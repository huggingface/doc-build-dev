import{S as bHt,i as vHt,s as FHt,e as a,k as l,w as F,t as o,M as THt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as MHt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as Aat}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function EHt($){let g,v,p,m,_,d,h,Co,xi,If,lt,$i,ki,i6,Nf,Oe,Qe,Si,Pn,d6,Bn,In,c6,Ri,Nn,f6,Pi,qf,Sa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Co=o(`, make sure its
`),xi=a("code"),If=o("model_type"),lt=o(" attribute is set to the same key you use when registering the config (here "),$i=a("code"),ki=o('"new-model"'),i6=o(")."),Nf=l(),Oe=a("p"),Qe=o("Likewise, if your "),Si=a("code"),Pn=o("NewModel"),d6=o(" is a subclass of "),Bn=a("a"),In=o("PreTrainedModel"),c6=o(`, make sure its
`),Ri=a("code"),Nn=o("config_class"),f6=o(` attribute is set to the same class you use when registering the model (here
`),Pi=a("code"),qf=o("NewModelConfig"),Sa=o(")."),this.h()},l(He){g=n(He,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var zS=s(p);m=r(zS,"NewModelConfig"),zS.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Bi=s(d);h=r(Bi,"PretrainedConfig"),Bi.forEach(t),Co=r(Ae,`, make sure its
`),xi=n(Ae,"CODE",{});var WS=s(xi);If=r(WS,"model_type"),WS.forEach(t),lt=r(Ae," attribute is set to the same key you use when registering the config (here "),$i=n(Ae,"CODE",{});var QS=s($i);ki=r(QS,'"new-model"'),QS.forEach(t),i6=r(Ae,")."),Ae.forEach(t),Nf=i(He),Oe=n(He,"P",{});var wo=s(Oe);Qe=r(wo,"Likewise, if your "),Si=n(wo,"CODE",{});var Ra=s(Si);Pn=r(Ra,"NewModel"),Ra.forEach(t),d6=r(wo," is a subclass of "),Bn=n(wo,"A",{href:!0});var HS=s(Bn);In=r(HS,"PreTrainedModel"),HS.forEach(t),c6=r(wo,`, make sure its
`),Ri=n(wo,"CODE",{});var jf=s(Ri);Nn=r(jf,"config_class"),jf.forEach(t),f6=r(wo,` attribute is set to the same class you use when registering the model (here
`),Pi=n(wo,"CODE",{});var US=s(Pi);qf=r(US,"NewModelConfig"),US.forEach(t),Sa=r(wo,")."),wo.forEach(t),this.h()},h(){c(Bn,"href","/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel")},m(He,Ae){b(He,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Co),e(g,xi),e(xi,If),e(g,lt),e(g,$i),e($i,ki),e(g,i6),b(He,Nf,Ae),b(He,Oe,Ae),e(Oe,Qe),e(Oe,Si),e(Si,Pn),e(Oe,d6),e(Oe,Bn),e(Bn,In),e(Oe,c6),e(Oe,Ri),e(Ri,Nn),e(Oe,f6),e(Oe,Pi),e(Pi,qf),e(Oe,Sa)},d(He){He&&t(g),He&&t(Nf),He&&t(Oe)}}}function CHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AHt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Co=s(p);m=r(Co,"use_auth_token=True"),Co.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function LHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yHt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Co=s(p);m=r(Co,"use_auth_token=True"),Co.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function xHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ht($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ut($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ut($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Jt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MJt($){let g,v,p,m,_,d,h,Co,xi,If,lt,$i,ki,i6,Nf,Oe,Qe,Si,Pn,d6,Bn,In,c6,Ri,Nn,f6,Pi,qf,Sa,He,Ae,zS,Bi,WS,QS,wo,Ra,HS,jf,US,WHe,kXe,Ii,Df,Xae,m6,QHe,zae,HHe,SXe,qn,UHe,Wae,JHe,YHe,Qae,KHe,ZHe,RXe,g6,PXe,JS,eUe,BXe,Gf,IXe,Ni,Of,Hae,h6,oUe,Uae,rUe,NXe,Ao,p6,tUe,_6,aUe,YS,nUe,sUe,lUe,u6,iUe,Jae,dUe,cUe,fUe,Lr,b6,mUe,Yae,gUe,hUe,qi,pUe,Kae,_Ue,uUe,Zae,bUe,vUe,FUe,A,Vf,ene,TUe,MUe,KS,EUe,CUe,wUe,Xf,one,AUe,LUe,ZS,yUe,xUe,$Ue,zf,rne,kUe,SUe,eR,RUe,PUe,BUe,Wf,tne,IUe,NUe,oR,qUe,jUe,DUe,Qf,ane,GUe,OUe,rR,VUe,XUe,zUe,Hf,nne,WUe,QUe,tR,HUe,UUe,JUe,Uf,sne,YUe,KUe,aR,ZUe,eJe,oJe,Jf,lne,rJe,tJe,nR,aJe,nJe,sJe,Yf,ine,lJe,iJe,sR,dJe,cJe,fJe,Kf,dne,mJe,gJe,lR,hJe,pJe,_Je,Zf,cne,uJe,bJe,iR,vJe,FJe,TJe,em,fne,MJe,EJe,dR,CJe,wJe,AJe,om,mne,LJe,yJe,cR,xJe,$Je,kJe,rm,gne,SJe,RJe,fR,PJe,BJe,IJe,tm,hne,NJe,qJe,mR,jJe,DJe,GJe,am,pne,OJe,VJe,gR,XJe,zJe,WJe,nm,_ne,QJe,HJe,hR,UJe,JJe,YJe,sm,une,KJe,ZJe,pR,eYe,oYe,rYe,lm,bne,tYe,aYe,_R,nYe,sYe,lYe,im,vne,iYe,dYe,uR,cYe,fYe,mYe,dm,Fne,gYe,hYe,bR,pYe,_Ye,uYe,cm,Tne,bYe,vYe,vR,FYe,TYe,MYe,fm,Mne,EYe,CYe,FR,wYe,AYe,LYe,mm,Ene,yYe,xYe,TR,$Ye,kYe,SYe,gm,Cne,RYe,PYe,MR,BYe,IYe,NYe,hm,wne,qYe,jYe,ER,DYe,GYe,OYe,pm,Ane,VYe,XYe,CR,zYe,WYe,QYe,_m,Lne,HYe,UYe,wR,JYe,YYe,KYe,um,yne,ZYe,eKe,AR,oKe,rKe,tKe,bm,xne,aKe,nKe,LR,sKe,lKe,iKe,vm,$ne,dKe,cKe,yR,fKe,mKe,gKe,Fm,kne,hKe,pKe,xR,_Ke,uKe,bKe,Tm,Sne,vKe,FKe,$R,TKe,MKe,EKe,Mm,Rne,CKe,wKe,kR,AKe,LKe,yKe,Em,Pne,xKe,$Ke,SR,kKe,SKe,RKe,Cm,Bne,PKe,BKe,RR,IKe,NKe,qKe,wm,Ine,jKe,DKe,PR,GKe,OKe,VKe,Am,Nne,XKe,zKe,BR,WKe,QKe,HKe,Lm,qne,UKe,JKe,IR,YKe,KKe,ZKe,ym,jne,eZe,oZe,NR,rZe,tZe,aZe,xm,Dne,nZe,sZe,qR,lZe,iZe,dZe,$m,Gne,cZe,fZe,jR,mZe,gZe,hZe,km,One,pZe,_Ze,DR,uZe,bZe,vZe,Sm,Vne,FZe,TZe,GR,MZe,EZe,CZe,Rm,Xne,wZe,AZe,OR,LZe,yZe,xZe,Pm,zne,$Ze,kZe,VR,SZe,RZe,PZe,Bm,Wne,BZe,IZe,XR,NZe,qZe,jZe,Im,Qne,DZe,GZe,zR,OZe,VZe,XZe,Nm,Hne,zZe,WZe,WR,QZe,HZe,UZe,qm,Une,JZe,YZe,QR,KZe,ZZe,eeo,jm,Jne,oeo,reo,HR,teo,aeo,neo,Dm,Yne,seo,leo,UR,ieo,deo,ceo,Gm,Kne,feo,meo,JR,geo,heo,peo,Om,Zne,_eo,ueo,YR,beo,veo,Feo,Vm,ese,Teo,Meo,KR,Eeo,Ceo,weo,Xm,ose,Aeo,Leo,ZR,yeo,xeo,$eo,zm,rse,keo,Seo,eP,Reo,Peo,Beo,Wm,tse,Ieo,Neo,oP,qeo,jeo,Deo,Qm,ase,Geo,Oeo,rP,Veo,Xeo,zeo,Hm,nse,Weo,Qeo,tP,Heo,Ueo,Jeo,Um,sse,Yeo,Keo,aP,Zeo,eoo,ooo,Jm,lse,roo,too,nP,aoo,noo,soo,Ym,ise,loo,ioo,sP,doo,coo,foo,Km,dse,moo,goo,lP,hoo,poo,_oo,Zm,cse,uoo,boo,iP,voo,Foo,Too,eg,fse,Moo,Eoo,dP,Coo,woo,Aoo,og,mse,Loo,yoo,cP,xoo,$oo,koo,rg,gse,Soo,Roo,fP,Poo,Boo,Ioo,tg,hse,Noo,qoo,mP,joo,Doo,Goo,ag,pse,Ooo,Voo,gP,Xoo,zoo,Woo,ng,_se,Qoo,Hoo,hP,Uoo,Joo,Yoo,sg,use,Koo,Zoo,pP,ero,oro,rro,lg,bse,tro,aro,_P,nro,sro,lro,ig,vse,iro,dro,uP,cro,fro,mro,dg,Fse,gro,hro,bP,pro,_ro,uro,cg,Tse,bro,vro,vP,Fro,Tro,Mro,fg,Mse,Ero,Cro,FP,wro,Aro,Lro,mg,Ese,yro,xro,TP,$ro,kro,Sro,gg,Cse,Rro,Pro,MP,Bro,Iro,Nro,hg,wse,qro,jro,EP,Dro,Gro,Oro,pg,Ase,Vro,Xro,CP,zro,Wro,Qro,_g,Lse,Hro,Uro,wP,Jro,Yro,Kro,ug,yse,Zro,eto,AP,oto,rto,tto,bg,xse,ato,nto,LP,sto,lto,ito,vg,$se,dto,cto,yP,fto,mto,gto,Fg,kse,hto,pto,xP,_to,uto,bto,Tg,Sse,vto,Fto,$P,Tto,Mto,Eto,Mg,Rse,Cto,wto,kP,Ato,Lto,yto,Eg,Pse,xto,$to,SP,kto,Sto,Rto,Cg,Bse,Pto,Bto,RP,Ito,Nto,qto,wg,Ise,jto,Dto,PP,Gto,Oto,Vto,Ag,Nse,Xto,zto,BP,Wto,Qto,Hto,Lg,qse,Uto,Jto,IP,Yto,Kto,Zto,yg,jse,eao,oao,NP,rao,tao,aao,xg,Dse,nao,sao,qP,lao,iao,dao,$g,Gse,cao,fao,jP,mao,gao,hao,kg,Ose,pao,_ao,DP,uao,bao,vao,Sg,Vse,Fao,Tao,GP,Mao,Eao,Cao,Rg,Xse,wao,Aao,OP,Lao,yao,xao,Pg,zse,$ao,kao,VP,Sao,Rao,Pao,Bg,Wse,Bao,Iao,XP,Nao,qao,jao,Ig,Qse,Dao,Gao,zP,Oao,Vao,Xao,Ng,Hse,zao,Wao,WP,Qao,Hao,Uao,qg,Use,Jao,Yao,QP,Kao,Zao,eno,jg,Jse,ono,rno,HP,tno,ano,nno,Dg,Yse,sno,lno,UP,ino,dno,cno,Gg,Kse,fno,mno,JP,gno,hno,pno,Og,Zse,_no,uno,YP,bno,vno,Fno,Vg,ele,Tno,Mno,KP,Eno,Cno,wno,Xg,ole,Ano,Lno,ZP,yno,xno,$no,zg,rle,kno,Sno,eB,Rno,Pno,Bno,Wg,tle,Ino,Nno,oB,qno,jno,Dno,Qg,ale,Gno,Ono,rB,Vno,Xno,zno,Hg,nle,Wno,Qno,tB,Hno,Uno,Jno,Ug,sle,Yno,Kno,aB,Zno,eso,oso,Jg,lle,rso,tso,nB,aso,nso,sso,Yg,ile,lso,iso,sB,dso,cso,fso,Kg,dle,mso,gso,lB,hso,pso,_so,Zg,cle,uso,bso,iB,vso,Fso,Tso,eh,Mso,oh,v6,Eso,fle,Cso,qXe,ji,rh,mle,F6,wso,gle,Aso,jXe,Lo,T6,Lso,M6,yso,dB,xso,$so,kso,E6,Sso,hle,Rso,Pso,Bso,yr,C6,Iso,ple,Nso,qso,Pa,jso,_le,Dso,Gso,ule,Oso,Vso,ble,Xso,zso,Wso,k,jn,vle,Qso,Hso,cB,Uso,Jso,fB,Yso,Kso,Zso,Dn,Fle,elo,olo,mB,rlo,tlo,gB,alo,nlo,slo,Gn,Tle,llo,ilo,hB,dlo,clo,pB,flo,mlo,glo,th,Mle,hlo,plo,_B,_lo,ulo,blo,On,Ele,vlo,Flo,uB,Tlo,Mlo,bB,Elo,Clo,wlo,ah,Cle,Alo,Llo,vB,ylo,xlo,$lo,nh,wle,klo,Slo,FB,Rlo,Plo,Blo,sh,Ale,Ilo,Nlo,TB,qlo,jlo,Dlo,Vn,Lle,Glo,Olo,MB,Vlo,Xlo,EB,zlo,Wlo,Qlo,Xn,yle,Hlo,Ulo,CB,Jlo,Ylo,wB,Klo,Zlo,eio,zn,xle,oio,rio,AB,tio,aio,LB,nio,sio,lio,lh,$le,iio,dio,yB,cio,fio,mio,ih,kle,gio,hio,xB,pio,_io,uio,dh,Sle,bio,vio,$B,Fio,Tio,Mio,Wn,Rle,Eio,Cio,kB,wio,Aio,SB,Lio,yio,xio,ch,Ple,$io,kio,RB,Sio,Rio,Pio,Qn,Ble,Bio,Iio,PB,Nio,qio,BB,jio,Dio,Gio,Hn,Ile,Oio,Vio,IB,Xio,zio,NB,Wio,Qio,Hio,Un,Nle,Uio,Jio,qB,Yio,Kio,jB,Zio,edo,odo,Jn,qle,rdo,tdo,DB,ado,ndo,GB,sdo,ldo,ido,fh,jle,ddo,cdo,OB,fdo,mdo,gdo,Yn,Dle,hdo,pdo,VB,_do,udo,XB,bdo,vdo,Fdo,Kn,Gle,Tdo,Mdo,zB,Edo,Cdo,WB,wdo,Ado,Ldo,Zn,Ole,ydo,xdo,QB,$do,kdo,HB,Sdo,Rdo,Pdo,es,Vle,Bdo,Ido,UB,Ndo,qdo,JB,jdo,Ddo,Gdo,os,Xle,Odo,Vdo,YB,Xdo,zdo,KB,Wdo,Qdo,Hdo,rs,zle,Udo,Jdo,ZB,Ydo,Kdo,eI,Zdo,eco,oco,mh,Wle,rco,tco,oI,aco,nco,sco,ts,Qle,lco,ico,rI,dco,cco,tI,fco,mco,gco,gh,Hle,hco,pco,aI,_co,uco,bco,as,Ule,vco,Fco,nI,Tco,Mco,sI,Eco,Cco,wco,ns,Jle,Aco,Lco,lI,yco,xco,iI,$co,kco,Sco,ss,Yle,Rco,Pco,dI,Bco,Ico,cI,Nco,qco,jco,hh,Kle,Dco,Gco,fI,Oco,Vco,Xco,ls,Zle,zco,Wco,mI,Qco,Hco,gI,Uco,Jco,Yco,is,eie,Kco,Zco,hI,efo,ofo,pI,rfo,tfo,afo,ds,oie,nfo,sfo,_I,lfo,ifo,uI,dfo,cfo,ffo,ph,rie,mfo,gfo,bI,hfo,pfo,_fo,cs,tie,ufo,bfo,vI,vfo,Ffo,FI,Tfo,Mfo,Efo,fs,aie,Cfo,wfo,TI,Afo,Lfo,MI,yfo,xfo,$fo,ms,nie,kfo,Sfo,EI,Rfo,Pfo,CI,Bfo,Ifo,Nfo,gs,sie,qfo,jfo,wI,Dfo,Gfo,AI,Ofo,Vfo,Xfo,hs,lie,zfo,Wfo,LI,Qfo,Hfo,yI,Ufo,Jfo,Yfo,ps,iie,Kfo,Zfo,xI,emo,omo,$I,rmo,tmo,amo,_s,die,nmo,smo,kI,lmo,imo,SI,dmo,cmo,fmo,us,cie,mmo,gmo,RI,hmo,pmo,PI,_mo,umo,bmo,_h,fie,vmo,Fmo,BI,Tmo,Mmo,Emo,bs,mie,Cmo,wmo,II,Amo,Lmo,NI,ymo,xmo,$mo,uh,gie,kmo,Smo,qI,Rmo,Pmo,Bmo,bh,hie,Imo,Nmo,jI,qmo,jmo,Dmo,vs,pie,Gmo,Omo,DI,Vmo,Xmo,GI,zmo,Wmo,Qmo,Fs,_ie,Hmo,Umo,OI,Jmo,Ymo,VI,Kmo,Zmo,ego,Ts,uie,ogo,rgo,XI,tgo,ago,zI,ngo,sgo,lgo,vh,bie,igo,dgo,WI,cgo,fgo,mgo,Ms,vie,ggo,hgo,QI,pgo,_go,HI,ugo,bgo,vgo,Es,Fie,Fgo,Tgo,UI,Mgo,Ego,JI,Cgo,wgo,Ago,Cs,Tie,Lgo,ygo,YI,xgo,$go,KI,kgo,Sgo,Rgo,ws,Mie,Pgo,Bgo,ZI,Igo,Ngo,eN,qgo,jgo,Dgo,As,Eie,Ggo,Ogo,oN,Vgo,Xgo,rN,zgo,Wgo,Qgo,Ls,Cie,Hgo,Ugo,tN,Jgo,Ygo,aN,Kgo,Zgo,eho,ys,wie,oho,rho,nN,tho,aho,sN,nho,sho,lho,xs,Aie,iho,dho,lN,cho,fho,iN,mho,gho,hho,Fh,Lie,pho,_ho,dN,uho,bho,vho,$s,yie,Fho,Tho,cN,Mho,Eho,fN,Cho,who,Aho,ks,xie,Lho,yho,mN,xho,$ho,gN,kho,Sho,Rho,Th,$ie,Pho,Bho,hN,Iho,Nho,qho,Mh,kie,jho,Dho,pN,Gho,Oho,Vho,Eh,Sie,Xho,zho,_N,Who,Qho,Hho,Ch,Rie,Uho,Jho,uN,Yho,Kho,Zho,Ss,Pie,epo,opo,bN,rpo,tpo,vN,apo,npo,spo,wh,Bie,lpo,ipo,FN,dpo,cpo,fpo,Rs,Iie,mpo,gpo,TN,hpo,ppo,MN,_po,upo,bpo,Ps,Nie,vpo,Fpo,EN,Tpo,Mpo,CN,Epo,Cpo,wpo,Bs,qie,Apo,Lpo,wN,ypo,xpo,AN,$po,kpo,Spo,Is,jie,Rpo,Ppo,LN,Bpo,Ipo,yN,Npo,qpo,jpo,Ns,Die,Dpo,Gpo,xN,Opo,Vpo,$N,Xpo,zpo,Wpo,qs,Gie,Qpo,Hpo,kN,Upo,Jpo,SN,Ypo,Kpo,Zpo,Ah,Oie,e_o,o_o,RN,r_o,t_o,a_o,Lh,Vie,n_o,s_o,PN,l_o,i_o,d_o,js,Xie,c_o,f_o,BN,m_o,g_o,IN,h_o,p_o,__o,Ds,zie,u_o,b_o,NN,v_o,F_o,qN,T_o,M_o,E_o,Gs,Wie,C_o,w_o,jN,A_o,L_o,DN,y_o,x_o,$_o,yh,Qie,k_o,S_o,GN,R_o,P_o,B_o,xh,Hie,I_o,N_o,ON,q_o,j_o,D_o,$h,Uie,G_o,O_o,VN,V_o,X_o,z_o,Os,Jie,W_o,Q_o,XN,H_o,U_o,zN,J_o,Y_o,K_o,Vs,Yie,Z_o,euo,WN,ouo,ruo,QN,tuo,auo,nuo,kh,Kie,suo,luo,HN,iuo,duo,cuo,Sh,Zie,fuo,muo,UN,guo,huo,puo,Rh,ede,_uo,uuo,JN,buo,vuo,Fuo,Xs,ode,Tuo,Muo,YN,Euo,Cuo,KN,wuo,Auo,Luo,Ph,rde,yuo,xuo,ZN,$uo,kuo,Suo,Bh,tde,Ruo,Puo,eq,Buo,Iuo,Nuo,zs,ade,quo,juo,oq,Duo,Guo,rq,Ouo,Vuo,Xuo,Ws,nde,zuo,Wuo,tq,Quo,Huo,aq,Uuo,Juo,Yuo,Qs,sde,Kuo,Zuo,nq,e1o,o1o,sq,r1o,t1o,a1o,Hs,lde,n1o,s1o,lq,l1o,i1o,iq,d1o,c1o,f1o,Ih,m1o,Nh,w6,g1o,ide,h1o,DXe,Di,qh,dde,A6,p1o,cde,_1o,GXe,yo,L6,u1o,y6,b1o,dq,v1o,F1o,T1o,x6,M1o,fde,E1o,C1o,w1o,Ue,$6,A1o,mde,L1o,y1o,Ba,x1o,gde,$1o,k1o,hde,S1o,R1o,pde,P1o,B1o,I1o,J,jh,_de,N1o,q1o,cq,j1o,D1o,G1o,Dh,ude,O1o,V1o,fq,X1o,z1o,W1o,Gh,bde,Q1o,H1o,mq,U1o,J1o,Y1o,Oh,vde,K1o,Z1o,gq,e2o,o2o,r2o,Vh,Fde,t2o,a2o,hq,n2o,s2o,l2o,Xh,Tde,i2o,d2o,pq,c2o,f2o,m2o,zh,Mde,g2o,h2o,_q,p2o,_2o,u2o,Wh,Ede,b2o,v2o,uq,F2o,T2o,M2o,Qh,Cde,E2o,C2o,bq,w2o,A2o,L2o,Hh,wde,y2o,x2o,vq,$2o,k2o,S2o,Uh,Ade,R2o,P2o,Fq,B2o,I2o,N2o,Jh,Lde,q2o,j2o,Tq,D2o,G2o,O2o,Yh,yde,V2o,X2o,Mq,z2o,W2o,Q2o,Kh,xde,H2o,U2o,Eq,J2o,Y2o,K2o,Zh,$de,Z2o,ebo,Cq,obo,rbo,tbo,ep,kde,abo,nbo,wq,sbo,lbo,ibo,op,Sde,dbo,cbo,Aq,fbo,mbo,gbo,rp,Rde,hbo,pbo,Lq,_bo,ubo,bbo,tp,Pde,vbo,Fbo,yq,Tbo,Mbo,Ebo,ap,Bde,Cbo,wbo,xq,Abo,Lbo,ybo,np,Ide,xbo,$bo,$q,kbo,Sbo,Rbo,sp,Nde,Pbo,Bbo,kq,Ibo,Nbo,qbo,lp,qde,jbo,Dbo,Sq,Gbo,Obo,Vbo,ip,jde,Xbo,zbo,Rq,Wbo,Qbo,Hbo,dp,Dde,Ubo,Jbo,Pq,Ybo,Kbo,Zbo,cp,Gde,e3o,o3o,Bq,r3o,t3o,a3o,fp,Ode,n3o,s3o,Iq,l3o,i3o,d3o,mp,Vde,c3o,f3o,Nq,m3o,g3o,h3o,gp,Xde,p3o,_3o,qq,u3o,b3o,v3o,hp,zde,F3o,T3o,jq,M3o,E3o,C3o,pp,Wde,w3o,A3o,Dq,L3o,y3o,x3o,_p,Qde,$3o,k3o,Gq,S3o,R3o,P3o,up,Hde,B3o,I3o,Oq,N3o,q3o,j3o,bp,Ude,D3o,G3o,Vq,O3o,V3o,X3o,vp,Jde,z3o,W3o,Xq,Q3o,H3o,U3o,Fp,J3o,Tp,Y3o,Mp,k6,K3o,Yde,Z3o,OXe,Gi,Ep,Kde,S6,evo,Zde,ovo,VXe,xo,R6,rvo,P6,tvo,zq,avo,nvo,svo,B6,lvo,ece,ivo,dvo,cvo,Je,I6,fvo,oce,mvo,gvo,Oi,hvo,rce,pvo,_vo,tce,uvo,bvo,vvo,fe,Cp,ace,Fvo,Tvo,Wq,Mvo,Evo,Cvo,wp,nce,wvo,Avo,sce,Lvo,yvo,xvo,Ap,lce,$vo,kvo,Qq,Svo,Rvo,Pvo,Lp,ice,Bvo,Ivo,Hq,Nvo,qvo,jvo,yp,dce,Dvo,Gvo,Uq,Ovo,Vvo,Xvo,xp,cce,zvo,Wvo,Jq,Qvo,Hvo,Uvo,$p,fce,Jvo,Yvo,Yq,Kvo,Zvo,eFo,kp,mce,oFo,rFo,Kq,tFo,aFo,nFo,Sp,gce,sFo,lFo,Zq,iFo,dFo,cFo,Rp,hce,fFo,mFo,ej,gFo,hFo,pFo,Pp,pce,_Fo,uFo,oj,bFo,vFo,FFo,Bp,_ce,TFo,MFo,rj,EFo,CFo,wFo,Ip,uce,AFo,LFo,tj,yFo,xFo,$Fo,Np,bce,kFo,SFo,aj,RFo,PFo,BFo,qp,vce,IFo,NFo,nj,qFo,jFo,DFo,jp,Fce,GFo,OFo,sj,VFo,XFo,zFo,Dp,Tce,WFo,QFo,lj,HFo,UFo,JFo,Gp,Mce,YFo,KFo,ij,ZFo,eTo,oTo,Op,Ece,rTo,tTo,dj,aTo,nTo,sTo,Vp,lTo,Xp,iTo,zp,N6,dTo,Cce,cTo,XXe,Vi,Wp,wce,q6,fTo,Ace,mTo,zXe,$o,j6,gTo,Xi,hTo,cj,pTo,_To,fj,uTo,bTo,vTo,D6,FTo,Lce,TTo,MTo,ETo,it,G6,CTo,yce,wTo,ATo,zi,LTo,xce,yTo,xTo,mj,$To,kTo,STo,Qp,RTo,Ye,O6,PTo,$ce,BTo,ITo,Ia,NTo,kce,qTo,jTo,Sce,DTo,GTo,Rce,OTo,VTo,XTo,y,Hp,Pce,zTo,WTo,gj,QTo,HTo,UTo,Up,Bce,JTo,YTo,hj,KTo,ZTo,e7o,Jp,Ice,o7o,r7o,pj,t7o,a7o,n7o,Yp,Nce,s7o,l7o,_j,i7o,d7o,c7o,Kp,qce,f7o,m7o,uj,g7o,h7o,p7o,Zp,jce,_7o,u7o,bj,b7o,v7o,F7o,e_,Dce,T7o,M7o,vj,E7o,C7o,w7o,o_,Gce,A7o,L7o,Fj,y7o,x7o,$7o,r_,Oce,k7o,S7o,Tj,R7o,P7o,B7o,t_,Vce,I7o,N7o,Mj,q7o,j7o,D7o,a_,Xce,G7o,O7o,Ej,V7o,X7o,z7o,n_,zce,W7o,Q7o,Cj,H7o,U7o,J7o,s_,Wce,Y7o,K7o,wj,Z7o,e8o,o8o,l_,Qce,r8o,t8o,Aj,a8o,n8o,s8o,i_,Hce,l8o,i8o,Lj,d8o,c8o,f8o,d_,Uce,m8o,g8o,yj,h8o,p8o,_8o,c_,Jce,u8o,b8o,xj,v8o,F8o,T8o,f_,Yce,M8o,E8o,$j,C8o,w8o,A8o,m_,Kce,L8o,y8o,kj,x8o,$8o,k8o,g_,Zce,S8o,R8o,Sj,P8o,B8o,I8o,h_,efe,N8o,q8o,Rj,j8o,D8o,G8o,p_,ofe,O8o,V8o,Pj,X8o,z8o,W8o,__,rfe,Q8o,H8o,Bj,U8o,J8o,Y8o,u_,tfe,K8o,Z8o,Ij,e9o,o9o,r9o,b_,afe,t9o,a9o,Nj,n9o,s9o,l9o,v_,nfe,i9o,d9o,qj,c9o,f9o,m9o,F_,sfe,g9o,h9o,jj,p9o,_9o,u9o,T_,lfe,b9o,v9o,Dj,F9o,T9o,M9o,M_,ife,E9o,C9o,Gj,w9o,A9o,L9o,E_,dfe,y9o,x9o,Oj,$9o,k9o,S9o,C_,cfe,R9o,P9o,Vj,B9o,I9o,N9o,w_,ffe,q9o,j9o,Xj,D9o,G9o,O9o,A_,mfe,V9o,X9o,zj,z9o,W9o,Q9o,L_,gfe,H9o,U9o,Wj,J9o,Y9o,K9o,Us,hfe,Z9o,eMo,Qj,oMo,rMo,Hj,tMo,aMo,nMo,y_,pfe,sMo,lMo,Uj,iMo,dMo,cMo,x_,_fe,fMo,mMo,Jj,gMo,hMo,pMo,$_,ufe,_Mo,uMo,Yj,bMo,vMo,FMo,k_,bfe,TMo,MMo,Kj,EMo,CMo,wMo,S_,vfe,AMo,LMo,Zj,yMo,xMo,$Mo,R_,Ffe,kMo,SMo,eD,RMo,PMo,BMo,P_,Tfe,IMo,NMo,oD,qMo,jMo,DMo,B_,Mfe,GMo,OMo,rD,VMo,XMo,zMo,I_,Efe,WMo,QMo,tD,HMo,UMo,JMo,N_,Cfe,YMo,KMo,aD,ZMo,e4o,o4o,q_,wfe,r4o,t4o,nD,a4o,n4o,s4o,j_,Afe,l4o,i4o,sD,d4o,c4o,f4o,D_,Lfe,m4o,g4o,lD,h4o,p4o,_4o,G_,yfe,u4o,b4o,iD,v4o,F4o,T4o,O_,xfe,M4o,E4o,dD,C4o,w4o,A4o,V_,$fe,L4o,y4o,cD,x4o,$4o,k4o,X_,kfe,S4o,R4o,fD,P4o,B4o,I4o,z_,Sfe,N4o,q4o,mD,j4o,D4o,G4o,W_,Rfe,O4o,V4o,gD,X4o,z4o,W4o,Q_,Pfe,Q4o,H4o,hD,U4o,J4o,Y4o,H_,Bfe,K4o,Z4o,pD,eEo,oEo,rEo,U_,Ife,tEo,aEo,_D,nEo,sEo,lEo,J_,Nfe,iEo,dEo,uD,cEo,fEo,mEo,Y_,qfe,gEo,hEo,bD,pEo,_Eo,uEo,K_,jfe,bEo,vEo,vD,FEo,TEo,MEo,Z_,Dfe,EEo,CEo,FD,wEo,AEo,LEo,eu,Gfe,yEo,xEo,TD,$Eo,kEo,SEo,ou,Ofe,REo,PEo,MD,BEo,IEo,NEo,ru,Vfe,qEo,jEo,ED,DEo,GEo,OEo,tu,Xfe,VEo,XEo,CD,zEo,WEo,QEo,au,zfe,HEo,UEo,wD,JEo,YEo,KEo,nu,Wfe,ZEo,eCo,AD,oCo,rCo,tCo,su,Qfe,aCo,nCo,LD,sCo,lCo,iCo,lu,Hfe,dCo,cCo,yD,fCo,mCo,gCo,iu,Ufe,hCo,pCo,xD,_Co,uCo,bCo,du,Jfe,vCo,FCo,$D,TCo,MCo,ECo,cu,Yfe,CCo,wCo,kD,ACo,LCo,yCo,fu,Kfe,xCo,$Co,SD,kCo,SCo,RCo,mu,Zfe,PCo,BCo,RD,ICo,NCo,qCo,gu,eme,jCo,DCo,PD,GCo,OCo,VCo,hu,ome,XCo,zCo,BD,WCo,QCo,HCo,pu,rme,UCo,JCo,ID,YCo,KCo,ZCo,_u,tme,e5o,o5o,ND,r5o,t5o,a5o,uu,ame,n5o,s5o,qD,l5o,i5o,d5o,bu,nme,c5o,f5o,jD,m5o,g5o,h5o,vu,sme,p5o,_5o,DD,u5o,b5o,v5o,Fu,lme,F5o,T5o,GD,M5o,E5o,C5o,Tu,ime,w5o,A5o,OD,L5o,y5o,x5o,Mu,dme,$5o,k5o,VD,S5o,R5o,P5o,Eu,cme,B5o,I5o,XD,N5o,q5o,j5o,Cu,fme,D5o,G5o,zD,O5o,V5o,X5o,wu,mme,z5o,W5o,WD,Q5o,H5o,U5o,Au,gme,J5o,Y5o,QD,K5o,Z5o,e0o,Lu,hme,o0o,r0o,HD,t0o,a0o,n0o,yu,pme,s0o,l0o,UD,i0o,d0o,c0o,xu,_me,f0o,m0o,JD,g0o,h0o,p0o,$u,ume,_0o,u0o,YD,b0o,v0o,F0o,ku,bme,T0o,M0o,KD,E0o,C0o,w0o,Su,vme,A0o,L0o,ZD,y0o,x0o,$0o,Ru,Fme,k0o,S0o,eG,R0o,P0o,B0o,Pu,Tme,I0o,N0o,oG,q0o,j0o,D0o,Bu,Mme,G0o,O0o,rG,V0o,X0o,z0o,Iu,Eme,W0o,Q0o,tG,H0o,U0o,J0o,Nu,Cme,Y0o,K0o,aG,Z0o,ewo,owo,qu,wme,rwo,two,nG,awo,nwo,swo,ju,Ame,lwo,iwo,sG,dwo,cwo,fwo,Du,Lme,mwo,gwo,lG,hwo,pwo,_wo,Gu,yme,uwo,bwo,iG,vwo,Fwo,Two,Ou,xme,Mwo,Ewo,dG,Cwo,wwo,Awo,Vu,$me,Lwo,ywo,cG,xwo,$wo,kwo,Xu,kme,Swo,Rwo,fG,Pwo,Bwo,Iwo,zu,Sme,Nwo,qwo,mG,jwo,Dwo,Gwo,Wu,Rme,Owo,Vwo,gG,Xwo,zwo,Wwo,Qu,Pme,Qwo,Hwo,hG,Uwo,Jwo,Ywo,Hu,Bme,Kwo,Zwo,pG,eAo,oAo,rAo,Uu,Ime,tAo,aAo,_G,nAo,sAo,lAo,Ju,Nme,iAo,dAo,uG,cAo,fAo,mAo,Yu,qme,gAo,hAo,bG,pAo,_Ao,uAo,Ku,bAo,jme,vAo,FAo,Dme,TAo,MAo,Zu,WXe,Wi,e1,Gme,V6,EAo,Ome,CAo,QXe,ko,X6,wAo,Qi,AAo,vG,LAo,yAo,FG,xAo,$Ao,kAo,z6,SAo,Vme,RAo,PAo,BAo,dt,W6,IAo,Xme,NAo,qAo,Hi,jAo,zme,DAo,GAo,TG,OAo,VAo,XAo,o1,zAo,Ke,Q6,WAo,Wme,QAo,HAo,Na,UAo,Qme,JAo,YAo,Hme,KAo,ZAo,Ume,e6o,o6o,r6o,G,r1,Jme,t6o,a6o,MG,n6o,s6o,l6o,t1,Yme,i6o,d6o,EG,c6o,f6o,m6o,a1,Kme,g6o,h6o,CG,p6o,_6o,u6o,n1,Zme,b6o,v6o,wG,F6o,T6o,M6o,s1,ege,E6o,C6o,AG,w6o,A6o,L6o,l1,oge,y6o,x6o,LG,$6o,k6o,S6o,i1,rge,R6o,P6o,yG,B6o,I6o,N6o,d1,tge,q6o,j6o,xG,D6o,G6o,O6o,c1,age,V6o,X6o,$G,z6o,W6o,Q6o,f1,nge,H6o,U6o,kG,J6o,Y6o,K6o,m1,sge,Z6o,eLo,SG,oLo,rLo,tLo,g1,lge,aLo,nLo,RG,sLo,lLo,iLo,h1,ige,dLo,cLo,PG,fLo,mLo,gLo,p1,dge,hLo,pLo,BG,_Lo,uLo,bLo,_1,cge,vLo,FLo,IG,TLo,MLo,ELo,u1,fge,CLo,wLo,NG,ALo,LLo,yLo,b1,mge,xLo,$Lo,qG,kLo,SLo,RLo,v1,gge,PLo,BLo,jG,ILo,NLo,qLo,F1,hge,jLo,DLo,DG,GLo,OLo,VLo,T1,pge,XLo,zLo,GG,WLo,QLo,HLo,M1,_ge,ULo,JLo,OG,YLo,KLo,ZLo,E1,uge,eyo,oyo,VG,ryo,tyo,ayo,C1,bge,nyo,syo,XG,lyo,iyo,dyo,w1,vge,cyo,fyo,zG,myo,gyo,hyo,A1,Fge,pyo,_yo,WG,uyo,byo,vyo,L1,Tge,Fyo,Tyo,QG,Myo,Eyo,Cyo,y1,Mge,wyo,Ayo,HG,Lyo,yyo,xyo,x1,Ege,$yo,kyo,UG,Syo,Ryo,Pyo,$1,Cge,Byo,Iyo,JG,Nyo,qyo,jyo,k1,wge,Dyo,Gyo,YG,Oyo,Vyo,Xyo,S1,Age,zyo,Wyo,KG,Qyo,Hyo,Uyo,R1,Lge,Jyo,Yyo,ZG,Kyo,Zyo,exo,P1,yge,oxo,rxo,eO,txo,axo,nxo,B1,xge,sxo,lxo,oO,ixo,dxo,cxo,I1,$ge,fxo,mxo,rO,gxo,hxo,pxo,N1,kge,_xo,uxo,tO,bxo,vxo,Fxo,q1,Sge,Txo,Mxo,aO,Exo,Cxo,wxo,j1,Rge,Axo,Lxo,nO,yxo,xxo,$xo,D1,Pge,kxo,Sxo,sO,Rxo,Pxo,Bxo,G1,Bge,Ixo,Nxo,lO,qxo,jxo,Dxo,O1,Ige,Gxo,Oxo,iO,Vxo,Xxo,zxo,V1,Nge,Wxo,Qxo,dO,Hxo,Uxo,Jxo,X1,qge,Yxo,Kxo,cO,Zxo,e$o,o$o,z1,jge,r$o,t$o,fO,a$o,n$o,s$o,W1,Dge,l$o,i$o,mO,d$o,c$o,f$o,Q1,m$o,Gge,g$o,h$o,Oge,p$o,_$o,H1,HXe,Ui,U1,Vge,H6,u$o,Xge,b$o,UXe,So,U6,v$o,Ji,F$o,gO,T$o,M$o,hO,E$o,C$o,w$o,J6,A$o,zge,L$o,y$o,x$o,ct,Y6,$$o,Wge,k$o,S$o,Yi,R$o,Qge,P$o,B$o,pO,I$o,N$o,q$o,J1,j$o,Ze,K6,D$o,Hge,G$o,O$o,qa,V$o,Uge,X$o,z$o,Jge,W$o,Q$o,Yge,H$o,U$o,J$o,z,Y1,Kge,Y$o,K$o,_O,Z$o,eko,oko,K1,Zge,rko,tko,uO,ako,nko,sko,Z1,ehe,lko,iko,bO,dko,cko,fko,e2,ohe,mko,gko,vO,hko,pko,_ko,o2,rhe,uko,bko,FO,vko,Fko,Tko,r2,the,Mko,Eko,TO,Cko,wko,Ako,t2,ahe,Lko,yko,MO,xko,$ko,kko,a2,nhe,Sko,Rko,EO,Pko,Bko,Iko,n2,she,Nko,qko,CO,jko,Dko,Gko,s2,lhe,Oko,Vko,wO,Xko,zko,Wko,l2,ihe,Qko,Hko,AO,Uko,Jko,Yko,i2,dhe,Kko,Zko,LO,eSo,oSo,rSo,d2,che,tSo,aSo,yO,nSo,sSo,lSo,c2,fhe,iSo,dSo,xO,cSo,fSo,mSo,f2,mhe,gSo,hSo,$O,pSo,_So,uSo,m2,ghe,bSo,vSo,kO,FSo,TSo,MSo,g2,hhe,ESo,CSo,SO,wSo,ASo,LSo,h2,phe,ySo,xSo,RO,$So,kSo,SSo,p2,_he,RSo,PSo,PO,BSo,ISo,NSo,_2,uhe,qSo,jSo,BO,DSo,GSo,OSo,u2,bhe,VSo,XSo,IO,zSo,WSo,QSo,b2,vhe,HSo,USo,NO,JSo,YSo,KSo,v2,Fhe,ZSo,eRo,qO,oRo,rRo,tRo,F2,The,aRo,nRo,jO,sRo,lRo,iRo,T2,Mhe,dRo,cRo,DO,fRo,mRo,gRo,M2,Ehe,hRo,pRo,GO,_Ro,uRo,bRo,E2,Che,vRo,FRo,OO,TRo,MRo,ERo,C2,whe,CRo,wRo,VO,ARo,LRo,yRo,w2,Ahe,xRo,$Ro,XO,kRo,SRo,RRo,A2,Lhe,PRo,BRo,zO,IRo,NRo,qRo,L2,yhe,jRo,DRo,WO,GRo,ORo,VRo,y2,xhe,XRo,zRo,QO,WRo,QRo,HRo,x2,$he,URo,JRo,HO,YRo,KRo,ZRo,$2,khe,ePo,oPo,UO,rPo,tPo,aPo,k2,She,nPo,sPo,JO,lPo,iPo,dPo,S2,Rhe,cPo,fPo,YO,mPo,gPo,hPo,R2,Phe,pPo,_Po,KO,uPo,bPo,vPo,P2,Bhe,FPo,TPo,ZO,MPo,EPo,CPo,B2,Ihe,wPo,APo,eV,LPo,yPo,xPo,I2,Nhe,$Po,kPo,oV,SPo,RPo,PPo,N2,BPo,qhe,IPo,NPo,jhe,qPo,jPo,q2,JXe,Ki,j2,Dhe,Z6,DPo,Ghe,GPo,YXe,Ro,eL,OPo,Zi,VPo,rV,XPo,zPo,tV,WPo,QPo,HPo,oL,UPo,Ohe,JPo,YPo,KPo,ft,rL,ZPo,Vhe,eBo,oBo,ed,rBo,Xhe,tBo,aBo,aV,nBo,sBo,lBo,D2,iBo,eo,tL,dBo,zhe,cBo,fBo,ja,mBo,Whe,gBo,hBo,Qhe,pBo,_Bo,Hhe,uBo,bBo,vBo,Q,G2,Uhe,FBo,TBo,nV,MBo,EBo,CBo,O2,Jhe,wBo,ABo,sV,LBo,yBo,xBo,V2,Yhe,$Bo,kBo,lV,SBo,RBo,PBo,X2,Khe,BBo,IBo,iV,NBo,qBo,jBo,z2,Zhe,DBo,GBo,dV,OBo,VBo,XBo,W2,epe,zBo,WBo,cV,QBo,HBo,UBo,Q2,ope,JBo,YBo,fV,KBo,ZBo,eIo,H2,rpe,oIo,rIo,mV,tIo,aIo,nIo,U2,tpe,sIo,lIo,gV,iIo,dIo,cIo,J2,ape,fIo,mIo,hV,gIo,hIo,pIo,Y2,npe,_Io,uIo,pV,bIo,vIo,FIo,K2,spe,TIo,MIo,_V,EIo,CIo,wIo,Z2,lpe,AIo,LIo,uV,yIo,xIo,$Io,eb,ipe,kIo,SIo,bV,RIo,PIo,BIo,ob,dpe,IIo,NIo,vV,qIo,jIo,DIo,rb,cpe,GIo,OIo,FV,VIo,XIo,zIo,tb,fpe,WIo,QIo,TV,HIo,UIo,JIo,ab,mpe,YIo,KIo,MV,ZIo,eNo,oNo,nb,gpe,rNo,tNo,EV,aNo,nNo,sNo,sb,hpe,lNo,iNo,CV,dNo,cNo,fNo,lb,ppe,mNo,gNo,wV,hNo,pNo,_No,ib,_pe,uNo,bNo,AV,vNo,FNo,TNo,db,upe,MNo,ENo,LV,CNo,wNo,ANo,cb,bpe,LNo,yNo,yV,xNo,$No,kNo,fb,vpe,SNo,RNo,xV,PNo,BNo,INo,mb,Fpe,NNo,qNo,$V,jNo,DNo,GNo,gb,Tpe,ONo,VNo,kV,XNo,zNo,WNo,hb,Mpe,QNo,HNo,SV,UNo,JNo,YNo,pb,Epe,KNo,ZNo,RV,eqo,oqo,rqo,_b,Cpe,tqo,aqo,PV,nqo,sqo,lqo,ub,wpe,iqo,dqo,BV,cqo,fqo,mqo,bb,Ape,gqo,hqo,IV,pqo,_qo,uqo,vb,Lpe,bqo,vqo,NV,Fqo,Tqo,Mqo,Fb,ype,Eqo,Cqo,xpe,wqo,Aqo,Lqo,Tb,$pe,yqo,xqo,qV,$qo,kqo,Sqo,Mb,kpe,Rqo,Pqo,jV,Bqo,Iqo,Nqo,Eb,Spe,qqo,jqo,DV,Dqo,Gqo,Oqo,Cb,Rpe,Vqo,Xqo,GV,zqo,Wqo,Qqo,wb,Hqo,Ppe,Uqo,Jqo,Bpe,Yqo,Kqo,Ab,KXe,od,Lb,Ipe,aL,Zqo,Npe,ejo,ZXe,Po,nL,ojo,rd,rjo,OV,tjo,ajo,VV,njo,sjo,ljo,sL,ijo,qpe,djo,cjo,fjo,mt,lL,mjo,jpe,gjo,hjo,td,pjo,Dpe,_jo,ujo,XV,bjo,vjo,Fjo,yb,Tjo,oo,iL,Mjo,Gpe,Ejo,Cjo,Da,wjo,Ope,Ajo,Ljo,Vpe,yjo,xjo,Xpe,$jo,kjo,Sjo,me,xb,zpe,Rjo,Pjo,zV,Bjo,Ijo,Njo,$b,Wpe,qjo,jjo,WV,Djo,Gjo,Ojo,kb,Qpe,Vjo,Xjo,QV,zjo,Wjo,Qjo,Sb,Hpe,Hjo,Ujo,HV,Jjo,Yjo,Kjo,Rb,Upe,Zjo,eDo,UV,oDo,rDo,tDo,Pb,Jpe,aDo,nDo,JV,sDo,lDo,iDo,Bb,Ype,dDo,cDo,YV,fDo,mDo,gDo,Ib,Kpe,hDo,pDo,KV,_Do,uDo,bDo,Nb,Zpe,vDo,FDo,ZV,TDo,MDo,EDo,qb,e_e,CDo,wDo,eX,ADo,LDo,yDo,jb,o_e,xDo,$Do,oX,kDo,SDo,RDo,Db,r_e,PDo,BDo,rX,IDo,NDo,qDo,Gb,t_e,jDo,DDo,tX,GDo,ODo,VDo,Ob,a_e,XDo,zDo,aX,WDo,QDo,HDo,Vb,n_e,UDo,JDo,nX,YDo,KDo,ZDo,Xb,s_e,eGo,oGo,sX,rGo,tGo,aGo,zb,l_e,nGo,sGo,lX,lGo,iGo,dGo,Wb,i_e,cGo,fGo,iX,mGo,gGo,hGo,Qb,d_e,pGo,_Go,dX,uGo,bGo,vGo,Hb,FGo,c_e,TGo,MGo,f_e,EGo,CGo,Ub,eze,ad,Jb,m_e,dL,wGo,g_e,AGo,oze,Bo,cL,LGo,nd,yGo,cX,xGo,$Go,fX,kGo,SGo,RGo,fL,PGo,h_e,BGo,IGo,NGo,gt,mL,qGo,p_e,jGo,DGo,sd,GGo,__e,OGo,VGo,mX,XGo,zGo,WGo,Yb,QGo,ro,gL,HGo,u_e,UGo,JGo,Ga,YGo,b_e,KGo,ZGo,v_e,eOo,oOo,F_e,rOo,tOo,aOo,N,Kb,T_e,nOo,sOo,gX,lOo,iOo,dOo,Zb,M_e,cOo,fOo,hX,mOo,gOo,hOo,e3,E_e,pOo,_Oo,pX,uOo,bOo,vOo,o3,C_e,FOo,TOo,_X,MOo,EOo,COo,r3,w_e,wOo,AOo,uX,LOo,yOo,xOo,t3,A_e,$Oo,kOo,bX,SOo,ROo,POo,a3,L_e,BOo,IOo,vX,NOo,qOo,jOo,n3,y_e,DOo,GOo,FX,OOo,VOo,XOo,s3,x_e,zOo,WOo,TX,QOo,HOo,UOo,l3,$_e,JOo,YOo,MX,KOo,ZOo,eVo,i3,k_e,oVo,rVo,EX,tVo,aVo,nVo,d3,S_e,sVo,lVo,CX,iVo,dVo,cVo,c3,R_e,fVo,mVo,wX,gVo,hVo,pVo,f3,P_e,_Vo,uVo,AX,bVo,vVo,FVo,m3,B_e,TVo,MVo,LX,EVo,CVo,wVo,g3,I_e,AVo,LVo,yX,yVo,xVo,$Vo,h3,N_e,kVo,SVo,xX,RVo,PVo,BVo,p3,q_e,IVo,NVo,$X,qVo,jVo,DVo,_3,j_e,GVo,OVo,kX,VVo,XVo,zVo,u3,D_e,WVo,QVo,SX,HVo,UVo,JVo,b3,G_e,YVo,KVo,RX,ZVo,eXo,oXo,v3,O_e,rXo,tXo,PX,aXo,nXo,sXo,F3,V_e,lXo,iXo,BX,dXo,cXo,fXo,T3,X_e,mXo,gXo,IX,hXo,pXo,_Xo,M3,z_e,uXo,bXo,NX,vXo,FXo,TXo,E3,W_e,MXo,EXo,qX,CXo,wXo,AXo,C3,Q_e,LXo,yXo,jX,xXo,$Xo,kXo,w3,H_e,SXo,RXo,DX,PXo,BXo,IXo,A3,U_e,NXo,qXo,GX,jXo,DXo,GXo,L3,J_e,OXo,VXo,OX,XXo,zXo,WXo,y3,Y_e,QXo,HXo,VX,UXo,JXo,YXo,x3,K_e,KXo,ZXo,XX,ezo,ozo,rzo,$3,Z_e,tzo,azo,zX,nzo,szo,lzo,k3,eue,izo,dzo,WX,czo,fzo,mzo,S3,oue,gzo,hzo,QX,pzo,_zo,uzo,R3,rue,bzo,vzo,HX,Fzo,Tzo,Mzo,P3,tue,Ezo,Czo,UX,wzo,Azo,Lzo,B3,aue,yzo,xzo,JX,$zo,kzo,Szo,I3,nue,Rzo,Pzo,YX,Bzo,Izo,Nzo,N3,sue,qzo,jzo,KX,Dzo,Gzo,Ozo,q3,lue,Vzo,Xzo,ZX,zzo,Wzo,Qzo,j3,iue,Hzo,Uzo,ez,Jzo,Yzo,Kzo,D3,due,Zzo,eWo,oz,oWo,rWo,tWo,G3,cue,aWo,nWo,rz,sWo,lWo,iWo,O3,fue,dWo,cWo,tz,fWo,mWo,gWo,V3,mue,hWo,pWo,az,_Wo,uWo,bWo,X3,gue,vWo,FWo,nz,TWo,MWo,EWo,z3,hue,CWo,wWo,sz,AWo,LWo,yWo,W3,pue,xWo,$Wo,lz,kWo,SWo,RWo,Q3,_ue,PWo,BWo,iz,IWo,NWo,qWo,H3,jWo,uue,DWo,GWo,bue,OWo,VWo,U3,rze,ld,J3,vue,hL,XWo,Fue,zWo,tze,Io,pL,WWo,id,QWo,dz,HWo,UWo,cz,JWo,YWo,KWo,_L,ZWo,Tue,eQo,oQo,rQo,ht,uL,tQo,Mue,aQo,nQo,dd,sQo,Eue,lQo,iQo,fz,dQo,cQo,fQo,Y3,mQo,to,bL,gQo,Cue,hQo,pQo,Oa,_Qo,wue,uQo,bQo,Aue,vQo,FQo,Lue,TQo,MQo,EQo,Z,K3,yue,CQo,wQo,mz,AQo,LQo,yQo,Z3,xue,xQo,$Qo,gz,kQo,SQo,RQo,ev,$ue,PQo,BQo,hz,IQo,NQo,qQo,ov,kue,jQo,DQo,pz,GQo,OQo,VQo,rv,Sue,XQo,zQo,_z,WQo,QQo,HQo,tv,Rue,UQo,JQo,uz,YQo,KQo,ZQo,av,Pue,eHo,oHo,bz,rHo,tHo,aHo,nv,Bue,nHo,sHo,vz,lHo,iHo,dHo,sv,Iue,cHo,fHo,Fz,mHo,gHo,hHo,lv,Nue,pHo,_Ho,Tz,uHo,bHo,vHo,iv,que,FHo,THo,Mz,MHo,EHo,CHo,dv,jue,wHo,AHo,Ez,LHo,yHo,xHo,cv,Due,$Ho,kHo,Cz,SHo,RHo,PHo,fv,Gue,BHo,IHo,wz,NHo,qHo,jHo,mv,Oue,DHo,GHo,Az,OHo,VHo,XHo,gv,Vue,zHo,WHo,Lz,QHo,HHo,UHo,hv,Xue,JHo,YHo,yz,KHo,ZHo,eUo,pv,zue,oUo,rUo,xz,tUo,aUo,nUo,_v,Wue,sUo,lUo,$z,iUo,dUo,cUo,uv,Que,fUo,mUo,kz,gUo,hUo,pUo,bv,Hue,_Uo,uUo,Sz,bUo,vUo,FUo,vv,Uue,TUo,MUo,Rz,EUo,CUo,wUo,Fv,Jue,AUo,LUo,Pz,yUo,xUo,$Uo,Tv,Yue,kUo,SUo,Bz,RUo,PUo,BUo,Mv,Kue,IUo,NUo,Iz,qUo,jUo,DUo,Ev,Zue,GUo,OUo,Nz,VUo,XUo,zUo,Cv,e1e,WUo,QUo,qz,HUo,UUo,JUo,wv,o1e,YUo,KUo,jz,ZUo,eJo,oJo,Av,r1e,rJo,tJo,Dz,aJo,nJo,sJo,Lv,t1e,lJo,iJo,Gz,dJo,cJo,fJo,yv,mJo,a1e,gJo,hJo,n1e,pJo,_Jo,xv,aze,cd,$v,s1e,vL,uJo,l1e,bJo,nze,No,FL,vJo,fd,FJo,Oz,TJo,MJo,Vz,EJo,CJo,wJo,TL,AJo,i1e,LJo,yJo,xJo,pt,ML,$Jo,d1e,kJo,SJo,md,RJo,c1e,PJo,BJo,Xz,IJo,NJo,qJo,kv,jJo,ao,EL,DJo,f1e,GJo,OJo,Va,VJo,m1e,XJo,zJo,g1e,WJo,QJo,h1e,HJo,UJo,JJo,qo,Sv,p1e,YJo,KJo,zz,ZJo,eYo,oYo,Rv,_1e,rYo,tYo,Wz,aYo,nYo,sYo,Pv,u1e,lYo,iYo,Qz,dYo,cYo,fYo,Bv,b1e,mYo,gYo,Hz,hYo,pYo,_Yo,Iv,v1e,uYo,bYo,Uz,vYo,FYo,TYo,Nv,F1e,MYo,EYo,Jz,CYo,wYo,AYo,qv,LYo,T1e,yYo,xYo,M1e,$Yo,kYo,jv,sze,gd,Dv,E1e,CL,SYo,C1e,RYo,lze,jo,wL,PYo,hd,BYo,Yz,IYo,NYo,Kz,qYo,jYo,DYo,AL,GYo,w1e,OYo,VYo,XYo,_t,LL,zYo,A1e,WYo,QYo,pd,HYo,L1e,UYo,JYo,Zz,YYo,KYo,ZYo,Gv,eKo,no,yL,oKo,y1e,rKo,tKo,Xa,aKo,x1e,nKo,sKo,$1e,lKo,iKo,k1e,dKo,cKo,fKo,U,Ov,S1e,mKo,gKo,eW,hKo,pKo,_Ko,Vv,R1e,uKo,bKo,oW,vKo,FKo,TKo,Xv,P1e,MKo,EKo,rW,CKo,wKo,AKo,zv,B1e,LKo,yKo,tW,xKo,$Ko,kKo,Wv,I1e,SKo,RKo,aW,PKo,BKo,IKo,Qv,N1e,NKo,qKo,nW,jKo,DKo,GKo,Hv,q1e,OKo,VKo,sW,XKo,zKo,WKo,Uv,j1e,QKo,HKo,lW,UKo,JKo,YKo,Jv,D1e,KKo,ZKo,iW,eZo,oZo,rZo,Yv,G1e,tZo,aZo,dW,nZo,sZo,lZo,Kv,O1e,iZo,dZo,cW,cZo,fZo,mZo,Zv,V1e,gZo,hZo,fW,pZo,_Zo,uZo,eF,X1e,bZo,vZo,mW,FZo,TZo,MZo,oF,z1e,EZo,CZo,gW,wZo,AZo,LZo,rF,W1e,yZo,xZo,hW,$Zo,kZo,SZo,tF,Q1e,RZo,PZo,pW,BZo,IZo,NZo,aF,H1e,qZo,jZo,_W,DZo,GZo,OZo,nF,U1e,VZo,XZo,uW,zZo,WZo,QZo,sF,J1e,HZo,UZo,bW,JZo,YZo,KZo,lF,Y1e,ZZo,eer,vW,oer,rer,ter,iF,K1e,aer,ner,FW,ser,ler,ier,dF,Z1e,der,cer,TW,fer,mer,ger,cF,e2e,her,per,MW,_er,uer,ber,fF,o2e,ver,Fer,EW,Ter,Mer,Eer,mF,r2e,Cer,wer,CW,Aer,Ler,yer,gF,t2e,xer,$er,wW,ker,Ser,Rer,hF,a2e,Per,Ber,AW,Ier,Ner,qer,pF,n2e,jer,Der,LW,Ger,Oer,Ver,_F,s2e,Xer,zer,yW,Wer,Qer,Her,uF,l2e,Uer,Jer,xW,Yer,Ker,Zer,bF,i2e,eor,oor,$W,ror,tor,aor,vF,d2e,nor,sor,kW,lor,ior,dor,FF,c2e,cor,mor,SW,gor,hor,por,TF,f2e,_or,uor,RW,bor,vor,For,MF,m2e,Tor,Mor,PW,Eor,Cor,wor,EF,g2e,Aor,Lor,BW,yor,xor,$or,CF,kor,h2e,Sor,Ror,p2e,Por,Bor,wF,ize,_d,AF,_2e,xL,Ior,u2e,Nor,dze,Do,$L,qor,ud,jor,IW,Dor,Gor,NW,Oor,Vor,Xor,kL,zor,b2e,Wor,Qor,Hor,ut,SL,Uor,v2e,Jor,Yor,bd,Kor,F2e,Zor,err,qW,orr,rrr,trr,LF,arr,so,RL,nrr,T2e,srr,lrr,za,irr,M2e,drr,crr,E2e,frr,mrr,C2e,grr,hrr,prr,V,yF,w2e,_rr,urr,jW,brr,vrr,Frr,xF,A2e,Trr,Mrr,DW,Err,Crr,wrr,$F,L2e,Arr,Lrr,GW,yrr,xrr,$rr,kF,y2e,krr,Srr,OW,Rrr,Prr,Brr,SF,x2e,Irr,Nrr,VW,qrr,jrr,Drr,RF,$2e,Grr,Orr,XW,Vrr,Xrr,zrr,PF,k2e,Wrr,Qrr,zW,Hrr,Urr,Jrr,BF,S2e,Yrr,Krr,WW,Zrr,etr,otr,IF,R2e,rtr,ttr,QW,atr,ntr,str,NF,P2e,ltr,itr,HW,dtr,ctr,ftr,qF,B2e,mtr,gtr,UW,htr,ptr,_tr,jF,I2e,utr,btr,JW,vtr,Ftr,Ttr,DF,N2e,Mtr,Etr,YW,Ctr,wtr,Atr,GF,q2e,Ltr,ytr,KW,xtr,$tr,ktr,OF,j2e,Str,Rtr,ZW,Ptr,Btr,Itr,VF,D2e,Ntr,qtr,eQ,jtr,Dtr,Gtr,XF,G2e,Otr,Vtr,oQ,Xtr,ztr,Wtr,zF,O2e,Qtr,Htr,rQ,Utr,Jtr,Ytr,WF,V2e,Ktr,Ztr,tQ,ear,oar,rar,QF,X2e,tar,aar,aQ,nar,sar,lar,HF,z2e,iar,dar,nQ,car,far,mar,UF,W2e,gar,har,sQ,par,_ar,uar,JF,Q2e,bar,Far,lQ,Tar,Mar,Ear,YF,H2e,Car,war,iQ,Aar,Lar,yar,KF,U2e,xar,$ar,dQ,kar,Sar,Rar,ZF,J2e,Par,Bar,cQ,Iar,Nar,qar,eT,Y2e,jar,Dar,fQ,Gar,Oar,Var,oT,K2e,Xar,zar,mQ,War,Qar,Har,rT,Z2e,Uar,Jar,gQ,Yar,Kar,Zar,tT,ebe,enr,onr,hQ,rnr,tnr,anr,aT,obe,nnr,snr,pQ,lnr,inr,dnr,nT,rbe,cnr,fnr,_Q,mnr,gnr,hnr,sT,tbe,pnr,_nr,uQ,unr,bnr,vnr,lT,abe,Fnr,Tnr,bQ,Mnr,Enr,Cnr,iT,nbe,wnr,Anr,vQ,Lnr,ynr,xnr,dT,sbe,$nr,knr,FQ,Snr,Rnr,Pnr,cT,lbe,Bnr,Inr,TQ,Nnr,qnr,jnr,fT,ibe,Dnr,Gnr,MQ,Onr,Vnr,Xnr,mT,dbe,znr,Wnr,EQ,Qnr,Hnr,Unr,gT,cbe,Jnr,Ynr,CQ,Knr,Znr,esr,hT,fbe,osr,rsr,wQ,tsr,asr,nsr,pT,mbe,ssr,lsr,AQ,isr,dsr,csr,_T,fsr,gbe,msr,gsr,hbe,hsr,psr,uT,cze,vd,bT,pbe,PL,_sr,_be,usr,fze,Go,BL,bsr,Fd,vsr,LQ,Fsr,Tsr,yQ,Msr,Esr,Csr,IL,wsr,ube,Asr,Lsr,ysr,bt,NL,xsr,bbe,$sr,ksr,Td,Ssr,vbe,Rsr,Psr,xQ,Bsr,Isr,Nsr,vT,qsr,lo,qL,jsr,Fbe,Dsr,Gsr,Wa,Osr,Tbe,Vsr,Xsr,Mbe,zsr,Wsr,Ebe,Qsr,Hsr,Usr,Cbe,FT,wbe,Jsr,Ysr,$Q,Ksr,Zsr,elr,TT,olr,Abe,rlr,tlr,Lbe,alr,nlr,MT,mze,Md,ET,ybe,jL,slr,xbe,llr,gze,Oo,DL,ilr,Ed,dlr,kQ,clr,flr,SQ,mlr,glr,hlr,GL,plr,$be,_lr,ulr,blr,vt,OL,vlr,kbe,Flr,Tlr,Cd,Mlr,Sbe,Elr,Clr,RQ,wlr,Alr,Llr,CT,ylr,io,VL,xlr,Rbe,$lr,klr,Qa,Slr,Pbe,Rlr,Plr,Bbe,Blr,Ilr,Ibe,Nlr,qlr,jlr,ve,wT,Nbe,Dlr,Glr,PQ,Olr,Vlr,Xlr,AT,qbe,zlr,Wlr,BQ,Qlr,Hlr,Ulr,LT,jbe,Jlr,Ylr,IQ,Klr,Zlr,eir,yT,Dbe,oir,rir,NQ,tir,air,nir,Js,Gbe,sir,lir,qQ,iir,dir,jQ,cir,fir,mir,xT,Obe,gir,hir,DQ,pir,_ir,uir,Ys,Vbe,bir,vir,GQ,Fir,Tir,OQ,Mir,Eir,Cir,$T,Xbe,wir,Air,VQ,Lir,yir,xir,Ft,zbe,$ir,kir,XQ,Sir,Rir,zQ,Pir,Bir,WQ,Iir,Nir,qir,kT,Wbe,jir,Dir,QQ,Gir,Oir,Vir,ST,Qbe,Xir,zir,HQ,Wir,Qir,Hir,RT,Hbe,Uir,Jir,UQ,Yir,Kir,Zir,PT,Ube,edr,odr,JQ,rdr,tdr,adr,BT,Jbe,ndr,sdr,YQ,ldr,idr,ddr,IT,Ybe,cdr,fdr,KQ,mdr,gdr,hdr,NT,Kbe,pdr,_dr,ZQ,udr,bdr,vdr,qT,Fdr,Zbe,Tdr,Mdr,e3e,Edr,Cdr,jT,hze,wd,DT,o3e,XL,wdr,r3e,Adr,pze,Vo,zL,Ldr,Ad,ydr,eH,xdr,$dr,oH,kdr,Sdr,Rdr,WL,Pdr,t3e,Bdr,Idr,Ndr,Tt,QL,qdr,a3e,jdr,Ddr,Ld,Gdr,n3e,Odr,Vdr,rH,Xdr,zdr,Wdr,GT,Qdr,co,HL,Hdr,s3e,Udr,Jdr,Ha,Ydr,l3e,Kdr,Zdr,i3e,ecr,ocr,d3e,rcr,tcr,acr,c3e,OT,f3e,ncr,scr,tH,lcr,icr,dcr,VT,ccr,m3e,fcr,mcr,g3e,gcr,hcr,XT,_ze,yd,zT,h3e,UL,pcr,p3e,_cr,uze,Xo,JL,ucr,xd,bcr,aH,vcr,Fcr,nH,Tcr,Mcr,Ecr,YL,Ccr,_3e,wcr,Acr,Lcr,Mt,KL,ycr,u3e,xcr,$cr,$d,kcr,b3e,Scr,Rcr,sH,Pcr,Bcr,Icr,WT,Ncr,fo,ZL,qcr,v3e,jcr,Dcr,Ua,Gcr,F3e,Ocr,Vcr,T3e,Xcr,zcr,M3e,Wcr,Qcr,Hcr,E3e,QT,C3e,Ucr,Jcr,lH,Ycr,Kcr,Zcr,HT,efr,w3e,ofr,rfr,A3e,tfr,afr,UT,bze,kd,JT,L3e,ey,nfr,y3e,sfr,vze,zo,oy,lfr,Sd,ifr,iH,dfr,cfr,dH,ffr,mfr,gfr,ry,hfr,x3e,pfr,_fr,ufr,Et,ty,bfr,$3e,vfr,Ffr,Rd,Tfr,k3e,Mfr,Efr,cH,Cfr,wfr,Afr,YT,Lfr,mo,ay,yfr,S3e,xfr,$fr,Ja,kfr,R3e,Sfr,Rfr,P3e,Pfr,Bfr,B3e,Ifr,Nfr,qfr,Pe,KT,I3e,jfr,Dfr,fH,Gfr,Ofr,Vfr,ZT,N3e,Xfr,zfr,mH,Wfr,Qfr,Hfr,e7,q3e,Ufr,Jfr,gH,Yfr,Kfr,Zfr,o7,j3e,emr,omr,hH,rmr,tmr,amr,r7,D3e,nmr,smr,pH,lmr,imr,dmr,t7,G3e,cmr,fmr,_H,mmr,gmr,hmr,a7,O3e,pmr,_mr,uH,umr,bmr,vmr,n7,V3e,Fmr,Tmr,bH,Mmr,Emr,Cmr,s7,X3e,wmr,Amr,vH,Lmr,ymr,xmr,l7,$mr,z3e,kmr,Smr,W3e,Rmr,Pmr,i7,Fze,Pd,d7,Q3e,ny,Bmr,H3e,Imr,Tze,Wo,sy,Nmr,Bd,qmr,FH,jmr,Dmr,TH,Gmr,Omr,Vmr,ly,Xmr,U3e,zmr,Wmr,Qmr,Ct,iy,Hmr,J3e,Umr,Jmr,Id,Ymr,Y3e,Kmr,Zmr,MH,egr,ogr,rgr,c7,tgr,go,dy,agr,K3e,ngr,sgr,Ya,lgr,Z3e,igr,dgr,eve,cgr,fgr,ove,mgr,ggr,hgr,rt,f7,rve,pgr,_gr,EH,ugr,bgr,vgr,m7,tve,Fgr,Tgr,CH,Mgr,Egr,Cgr,g7,ave,wgr,Agr,wH,Lgr,ygr,xgr,h7,nve,$gr,kgr,AH,Sgr,Rgr,Pgr,p7,sve,Bgr,Igr,LH,Ngr,qgr,jgr,_7,Dgr,lve,Ggr,Ogr,ive,Vgr,Xgr,u7,Mze,Nd,b7,dve,cy,zgr,cve,Wgr,Eze,Qo,fy,Qgr,qd,Hgr,yH,Ugr,Jgr,xH,Ygr,Kgr,Zgr,my,ehr,fve,ohr,rhr,thr,wt,gy,ahr,mve,nhr,shr,jd,lhr,gve,ihr,dhr,$H,chr,fhr,mhr,v7,ghr,ho,hy,hhr,hve,phr,_hr,Ka,uhr,pve,bhr,vhr,_ve,Fhr,Thr,uve,Mhr,Ehr,Chr,Le,F7,bve,whr,Ahr,kH,Lhr,yhr,xhr,T7,vve,$hr,khr,SH,Shr,Rhr,Phr,M7,Fve,Bhr,Ihr,RH,Nhr,qhr,jhr,E7,Tve,Dhr,Ghr,PH,Ohr,Vhr,Xhr,C7,Mve,zhr,Whr,BH,Qhr,Hhr,Uhr,w7,Eve,Jhr,Yhr,IH,Khr,Zhr,epr,A7,Cve,opr,rpr,NH,tpr,apr,npr,L7,wve,spr,lpr,qH,ipr,dpr,cpr,y7,Ave,fpr,mpr,jH,gpr,hpr,ppr,x7,Lve,_pr,upr,DH,bpr,vpr,Fpr,$7,Tpr,yve,Mpr,Epr,xve,Cpr,wpr,k7,Cze,Dd,S7,$ve,py,Apr,kve,Lpr,wze,Ho,_y,ypr,Gd,xpr,GH,$pr,kpr,OH,Spr,Rpr,Ppr,uy,Bpr,Sve,Ipr,Npr,qpr,At,by,jpr,Rve,Dpr,Gpr,Od,Opr,Pve,Vpr,Xpr,VH,zpr,Wpr,Qpr,R7,Hpr,po,vy,Upr,Bve,Jpr,Ypr,Za,Kpr,Ive,Zpr,e_r,Nve,o_r,r_r,qve,t_r,a_r,n_r,Fy,P7,jve,s_r,l_r,XH,i_r,d_r,c_r,B7,Dve,f_r,m_r,zH,g_r,h_r,p_r,I7,__r,Gve,u_r,b_r,Ove,v_r,F_r,N7,Aze,Vd,q7,Vve,Ty,T_r,Xve,M_r,Lze,Uo,My,E_r,Xd,C_r,WH,w_r,A_r,QH,L_r,y_r,x_r,Ey,$_r,zve,k_r,S_r,R_r,Lt,Cy,P_r,Wve,B_r,I_r,zd,N_r,Qve,q_r,j_r,HH,D_r,G_r,O_r,j7,V_r,_o,wy,X_r,Hve,z_r,W_r,en,Q_r,Uve,H_r,U_r,Jve,J_r,Y_r,Yve,K_r,Z_r,eur,tt,D7,Kve,our,rur,UH,tur,aur,nur,G7,Zve,sur,lur,JH,iur,dur,cur,O7,eFe,fur,mur,YH,gur,hur,pur,V7,oFe,_ur,uur,KH,bur,vur,Fur,X7,rFe,Tur,Mur,ZH,Eur,Cur,wur,z7,Aur,tFe,Lur,yur,aFe,xur,$ur,W7,yze,Wd,Q7,nFe,Ay,kur,sFe,Sur,xze,Jo,Ly,Rur,Qd,Pur,eU,Bur,Iur,oU,Nur,qur,jur,yy,Dur,lFe,Gur,Our,Vur,yt,xy,Xur,iFe,zur,Wur,Hd,Qur,dFe,Hur,Uur,rU,Jur,Yur,Kur,H7,Zur,uo,$y,e1r,cFe,o1r,r1r,on,t1r,fFe,a1r,n1r,mFe,s1r,l1r,gFe,i1r,d1r,c1r,Ud,U7,hFe,f1r,m1r,tU,g1r,h1r,p1r,J7,pFe,_1r,u1r,aU,b1r,v1r,F1r,Y7,_Fe,T1r,M1r,nU,E1r,C1r,w1r,K7,A1r,uFe,L1r,y1r,bFe,x1r,$1r,Z7,$ze,Jd,e8,vFe,ky,k1r,FFe,S1r,kze,Yo,Sy,R1r,Yd,P1r,sU,B1r,I1r,lU,N1r,q1r,j1r,Ry,D1r,TFe,G1r,O1r,V1r,xt,Py,X1r,MFe,z1r,W1r,Kd,Q1r,EFe,H1r,U1r,iU,J1r,Y1r,K1r,o8,Z1r,bo,By,e2r,CFe,o2r,r2r,rn,t2r,wFe,a2r,n2r,AFe,s2r,l2r,LFe,i2r,d2r,c2r,Iy,r8,yFe,f2r,m2r,dU,g2r,h2r,p2r,t8,xFe,_2r,u2r,cU,b2r,v2r,F2r,a8,T2r,$Fe,M2r,E2r,kFe,C2r,w2r,n8,Sze,Zd,s8,SFe,Ny,A2r,RFe,L2r,Rze,Ko,qy,y2r,ec,x2r,fU,$2r,k2r,mU,S2r,R2r,P2r,jy,B2r,PFe,I2r,N2r,q2r,$t,Dy,j2r,BFe,D2r,G2r,oc,O2r,IFe,V2r,X2r,gU,z2r,W2r,Q2r,l8,H2r,vo,Gy,U2r,NFe,J2r,Y2r,tn,K2r,qFe,Z2r,ebr,jFe,obr,rbr,DFe,tbr,abr,nbr,GFe,i8,OFe,sbr,lbr,hU,ibr,dbr,cbr,d8,fbr,VFe,mbr,gbr,XFe,hbr,pbr,c8,Pze,rc,f8,zFe,Oy,_br,WFe,ubr,Bze,Zo,Vy,bbr,tc,vbr,pU,Fbr,Tbr,_U,Mbr,Ebr,Cbr,Xy,wbr,QFe,Abr,Lbr,ybr,kt,zy,xbr,HFe,$br,kbr,ac,Sbr,UFe,Rbr,Pbr,uU,Bbr,Ibr,Nbr,m8,qbr,Fo,Wy,jbr,JFe,Dbr,Gbr,an,Obr,YFe,Vbr,Xbr,KFe,zbr,Wbr,ZFe,Qbr,Hbr,Ubr,at,g8,eTe,Jbr,Ybr,bU,Kbr,Zbr,e3r,h8,oTe,o3r,r3r,vU,t3r,a3r,n3r,p8,rTe,s3r,l3r,FU,i3r,d3r,c3r,_8,tTe,f3r,m3r,TU,g3r,h3r,p3r,u8,aTe,_3r,u3r,MU,b3r,v3r,F3r,b8,T3r,nTe,M3r,E3r,sTe,C3r,w3r,v8,Ize,nc,F8,lTe,Qy,A3r,iTe,L3r,Nze,er,Hy,y3r,sc,x3r,EU,$3r,k3r,CU,S3r,R3r,P3r,Uy,B3r,dTe,I3r,N3r,q3r,St,Jy,j3r,cTe,D3r,G3r,lc,O3r,fTe,V3r,X3r,wU,z3r,W3r,Q3r,T8,H3r,To,Yy,U3r,mTe,J3r,Y3r,nn,K3r,gTe,Z3r,evr,hTe,ovr,rvr,pTe,tvr,avr,nvr,_Te,M8,uTe,svr,lvr,AU,ivr,dvr,cvr,E8,fvr,bTe,mvr,gvr,vTe,hvr,pvr,C8,qze,ic,w8,FTe,Ky,_vr,TTe,uvr,jze,or,Zy,bvr,dc,vvr,LU,Fvr,Tvr,yU,Mvr,Evr,Cvr,ex,wvr,MTe,Avr,Lvr,yvr,Rt,ox,xvr,ETe,$vr,kvr,cc,Svr,CTe,Rvr,Pvr,xU,Bvr,Ivr,Nvr,A8,qvr,xr,rx,jvr,wTe,Dvr,Gvr,sn,Ovr,ATe,Vvr,Xvr,LTe,zvr,Wvr,yTe,Qvr,Hvr,Uvr,q,L8,xTe,Jvr,Yvr,$U,Kvr,Zvr,eFr,y8,$Te,oFr,rFr,kU,tFr,aFr,nFr,x8,kTe,sFr,lFr,SU,iFr,dFr,cFr,$8,STe,fFr,mFr,RU,gFr,hFr,pFr,k8,RTe,_Fr,uFr,PU,bFr,vFr,FFr,S8,PTe,TFr,MFr,BU,EFr,CFr,wFr,R8,BTe,AFr,LFr,IU,yFr,xFr,$Fr,P8,ITe,kFr,SFr,NU,RFr,PFr,BFr,B8,NTe,IFr,NFr,qU,qFr,jFr,DFr,I8,qTe,GFr,OFr,jU,VFr,XFr,zFr,N8,jTe,WFr,QFr,DU,HFr,UFr,JFr,q8,DTe,YFr,KFr,GU,ZFr,eTr,oTr,j8,GTe,rTr,tTr,OU,aTr,nTr,sTr,D8,OTe,lTr,iTr,VU,dTr,cTr,fTr,G8,VTe,mTr,gTr,XU,hTr,pTr,_Tr,O8,XTe,uTr,bTr,zU,vTr,FTr,TTr,V8,zTe,MTr,ETr,WU,CTr,wTr,ATr,X8,WTe,LTr,yTr,QU,xTr,$Tr,kTr,Ks,QTe,STr,RTr,HU,PTr,BTr,UU,ITr,NTr,qTr,z8,HTe,jTr,DTr,JU,GTr,OTr,VTr,W8,UTe,XTr,zTr,YU,WTr,QTr,HTr,Q8,JTe,UTr,JTr,KU,YTr,KTr,ZTr,H8,YTe,e7r,o7r,ZU,r7r,t7r,a7r,U8,KTe,n7r,s7r,eJ,l7r,i7r,d7r,J8,ZTe,c7r,f7r,oJ,m7r,g7r,h7r,Y8,e7e,p7r,_7r,rJ,u7r,b7r,v7r,K8,o7e,F7r,T7r,tJ,M7r,E7r,C7r,Z8,r7e,w7r,A7r,aJ,L7r,y7r,x7r,e9,t7e,$7r,k7r,nJ,S7r,R7r,P7r,o9,a7e,B7r,I7r,sJ,N7r,q7r,j7r,r9,n7e,D7r,G7r,lJ,O7r,V7r,X7r,t9,s7e,z7r,W7r,iJ,Q7r,H7r,U7r,a9,l7e,J7r,Y7r,dJ,K7r,Z7r,e8r,n9,i7e,o8r,r8r,cJ,t8r,a8r,n8r,s9,d7e,s8r,l8r,fJ,i8r,d8r,c8r,l9,c7e,f8r,m8r,mJ,g8r,h8r,p8r,i9,f7e,_8r,u8r,gJ,b8r,v8r,F8r,d9,m7e,T8r,M8r,hJ,E8r,C8r,w8r,c9,g7e,A8r,L8r,pJ,y8r,x8r,$8r,f9,h7e,k8r,S8r,_J,R8r,P8r,B8r,m9,p7e,I8r,N8r,uJ,q8r,j8r,D8r,g9,_7e,G8r,O8r,bJ,V8r,X8r,z8r,h9,u7e,W8r,Q8r,vJ,H8r,U8r,J8r,p9,b7e,Y8r,K8r,FJ,Z8r,e9r,o9r,_9,v7e,r9r,t9r,TJ,a9r,n9r,s9r,u9,F7e,l9r,i9r,MJ,d9r,c9r,f9r,b9,T7e,m9r,g9r,EJ,h9r,p9r,_9r,v9,M7e,u9r,b9r,CJ,v9r,F9r,T9r,F9,E7e,M9r,E9r,wJ,C9r,w9r,A9r,T9,C7e,L9r,y9r,AJ,x9r,$9r,k9r,M9,Dze,fc,E9,w7e,tx,S9r,A7e,R9r,Gze,rr,ax,P9r,mc,B9r,LJ,I9r,N9r,yJ,q9r,j9r,D9r,nx,G9r,L7e,O9r,V9r,X9r,Pt,sx,z9r,y7e,W9r,Q9r,gc,H9r,x7e,U9r,J9r,xJ,Y9r,K9r,Z9r,C9,eMr,$r,lx,oMr,$7e,rMr,tMr,ln,aMr,k7e,nMr,sMr,S7e,lMr,iMr,R7e,dMr,cMr,fMr,se,w9,P7e,mMr,gMr,$J,hMr,pMr,_Mr,A9,B7e,uMr,bMr,kJ,vMr,FMr,TMr,L9,I7e,MMr,EMr,SJ,CMr,wMr,AMr,y9,N7e,LMr,yMr,RJ,xMr,$Mr,kMr,x9,q7e,SMr,RMr,PJ,PMr,BMr,IMr,$9,j7e,NMr,qMr,BJ,jMr,DMr,GMr,k9,D7e,OMr,VMr,IJ,XMr,zMr,WMr,S9,G7e,QMr,HMr,NJ,UMr,JMr,YMr,R9,O7e,KMr,ZMr,qJ,e4r,o4r,r4r,P9,V7e,t4r,a4r,jJ,n4r,s4r,l4r,B9,X7e,i4r,d4r,DJ,c4r,f4r,m4r,I9,z7e,g4r,h4r,GJ,p4r,_4r,u4r,N9,W7e,b4r,v4r,OJ,F4r,T4r,M4r,q9,Q7e,E4r,C4r,VJ,w4r,A4r,L4r,j9,H7e,y4r,x4r,XJ,$4r,k4r,S4r,D9,U7e,R4r,P4r,zJ,B4r,I4r,N4r,G9,J7e,q4r,j4r,WJ,D4r,G4r,O4r,O9,Y7e,V4r,X4r,QJ,z4r,W4r,Q4r,V9,K7e,H4r,U4r,HJ,J4r,Y4r,K4r,X9,Z7e,Z4r,eEr,UJ,oEr,rEr,tEr,z9,e8e,aEr,nEr,JJ,sEr,lEr,iEr,W9,o8e,dEr,cEr,YJ,fEr,mEr,gEr,Q9,r8e,hEr,pEr,KJ,_Er,uEr,bEr,H9,Oze,hc,U9,t8e,ix,vEr,a8e,FEr,Vze,tr,dx,TEr,pc,MEr,ZJ,EEr,CEr,eY,wEr,AEr,LEr,cx,yEr,n8e,xEr,$Er,kEr,Bt,fx,SEr,s8e,REr,PEr,_c,BEr,l8e,IEr,NEr,oY,qEr,jEr,DEr,J9,GEr,kr,mx,OEr,i8e,VEr,XEr,dn,zEr,d8e,WEr,QEr,c8e,HEr,UEr,f8e,JEr,YEr,KEr,Me,Y9,m8e,ZEr,eCr,rY,oCr,rCr,tCr,K9,g8e,aCr,nCr,tY,sCr,lCr,iCr,Z9,h8e,dCr,cCr,aY,fCr,mCr,gCr,eM,p8e,hCr,pCr,nY,_Cr,uCr,bCr,oM,_8e,vCr,FCr,sY,TCr,MCr,ECr,rM,u8e,CCr,wCr,lY,ACr,LCr,yCr,tM,b8e,xCr,$Cr,iY,kCr,SCr,RCr,aM,v8e,PCr,BCr,dY,ICr,NCr,qCr,nM,F8e,jCr,DCr,cY,GCr,OCr,VCr,sM,T8e,XCr,zCr,fY,WCr,QCr,HCr,lM,M8e,UCr,JCr,mY,YCr,KCr,ZCr,iM,E8e,e5r,o5r,gY,r5r,t5r,a5r,dM,C8e,n5r,s5r,hY,l5r,i5r,d5r,cM,Xze,uc,fM,w8e,gx,c5r,A8e,f5r,zze,ar,hx,m5r,bc,g5r,pY,h5r,p5r,_Y,_5r,u5r,b5r,px,v5r,L8e,F5r,T5r,M5r,It,_x,E5r,y8e,C5r,w5r,vc,A5r,x8e,L5r,y5r,uY,x5r,$5r,k5r,mM,S5r,Sr,ux,R5r,$8e,P5r,B5r,cn,I5r,k8e,N5r,q5r,S8e,j5r,D5r,R8e,G5r,O5r,V5r,We,gM,P8e,X5r,z5r,bY,W5r,Q5r,H5r,hM,B8e,U5r,J5r,vY,Y5r,K5r,Z5r,Zs,I8e,e0r,o0r,FY,r0r,t0r,TY,a0r,n0r,s0r,pM,N8e,l0r,i0r,MY,d0r,c0r,f0r,_M,q8e,m0r,g0r,EY,h0r,p0r,_0r,uM,j8e,u0r,b0r,CY,v0r,F0r,T0r,bM,D8e,M0r,E0r,wY,C0r,w0r,A0r,vM,Wze,Fc,FM,G8e,bx,L0r,O8e,y0r,Qze,nr,vx,x0r,Tc,$0r,AY,k0r,S0r,LY,R0r,P0r,B0r,Fx,I0r,V8e,N0r,q0r,j0r,Nt,Tx,D0r,X8e,G0r,O0r,Mc,V0r,z8e,X0r,z0r,yY,W0r,Q0r,H0r,TM,U0r,Rr,Mx,J0r,W8e,Y0r,K0r,fn,Z0r,Q8e,ewr,owr,H8e,rwr,twr,U8e,awr,nwr,swr,ie,MM,J8e,lwr,iwr,xY,dwr,cwr,fwr,EM,Y8e,mwr,gwr,$Y,hwr,pwr,_wr,CM,K8e,uwr,bwr,kY,vwr,Fwr,Twr,wM,Z8e,Mwr,Ewr,SY,Cwr,wwr,Awr,AM,e9e,Lwr,ywr,RY,xwr,$wr,kwr,LM,o9e,Swr,Rwr,PY,Pwr,Bwr,Iwr,yM,r9e,Nwr,qwr,BY,jwr,Dwr,Gwr,xM,t9e,Owr,Vwr,IY,Xwr,zwr,Wwr,$M,a9e,Qwr,Hwr,NY,Uwr,Jwr,Ywr,kM,n9e,Kwr,Zwr,qY,eAr,oAr,rAr,SM,s9e,tAr,aAr,jY,nAr,sAr,lAr,RM,l9e,iAr,dAr,DY,cAr,fAr,mAr,PM,i9e,gAr,hAr,GY,pAr,_Ar,uAr,BM,d9e,bAr,vAr,OY,FAr,TAr,MAr,IM,c9e,EAr,CAr,VY,wAr,AAr,LAr,NM,f9e,yAr,xAr,XY,$Ar,kAr,SAr,qM,m9e,RAr,PAr,zY,BAr,IAr,NAr,jM,g9e,qAr,jAr,WY,DAr,GAr,OAr,DM,h9e,VAr,XAr,QY,zAr,WAr,QAr,GM,p9e,HAr,UAr,HY,JAr,YAr,KAr,OM,Hze,Ec,VM,_9e,Ex,ZAr,u9e,e6r,Uze,sr,Cx,o6r,Cc,r6r,UY,t6r,a6r,JY,n6r,s6r,l6r,wx,i6r,b9e,d6r,c6r,f6r,qt,Ax,m6r,v9e,g6r,h6r,wc,p6r,F9e,_6r,u6r,YY,b6r,v6r,F6r,XM,T6r,Pr,Lx,M6r,T9e,E6r,C6r,mn,w6r,M9e,A6r,L6r,E9e,y6r,x6r,C9e,$6r,k6r,S6r,ye,zM,w9e,R6r,P6r,KY,B6r,I6r,N6r,WM,A9e,q6r,j6r,ZY,D6r,G6r,O6r,QM,L9e,V6r,X6r,eK,z6r,W6r,Q6r,HM,y9e,H6r,U6r,oK,J6r,Y6r,K6r,UM,x9e,Z6r,eLr,rK,oLr,rLr,tLr,JM,$9e,aLr,nLr,tK,sLr,lLr,iLr,YM,k9e,dLr,cLr,aK,fLr,mLr,gLr,KM,S9e,hLr,pLr,nK,_Lr,uLr,bLr,ZM,R9e,vLr,FLr,sK,TLr,MLr,ELr,e4,P9e,CLr,wLr,lK,ALr,LLr,yLr,o4,Jze,Ac,r4,B9e,yx,xLr,I9e,$Lr,Yze,lr,xx,kLr,Lc,SLr,iK,RLr,PLr,dK,BLr,ILr,NLr,$x,qLr,N9e,jLr,DLr,GLr,jt,kx,OLr,q9e,VLr,XLr,yc,zLr,j9e,WLr,QLr,cK,HLr,ULr,JLr,t4,YLr,Br,Sx,KLr,D9e,ZLr,eyr,gn,oyr,G9e,ryr,tyr,O9e,ayr,nyr,V9e,syr,lyr,iyr,te,a4,X9e,dyr,cyr,fK,fyr,myr,gyr,n4,z9e,hyr,pyr,mK,_yr,uyr,byr,s4,W9e,vyr,Fyr,gK,Tyr,Myr,Eyr,l4,Q9e,Cyr,wyr,hK,Ayr,Lyr,yyr,i4,H9e,xyr,$yr,pK,kyr,Syr,Ryr,d4,U9e,Pyr,Byr,_K,Iyr,Nyr,qyr,c4,J9e,jyr,Dyr,uK,Gyr,Oyr,Vyr,f4,Y9e,Xyr,zyr,bK,Wyr,Qyr,Hyr,m4,K9e,Uyr,Jyr,vK,Yyr,Kyr,Zyr,g4,Z9e,exr,oxr,FK,rxr,txr,axr,h4,eMe,nxr,sxr,TK,lxr,ixr,dxr,p4,oMe,cxr,fxr,MK,mxr,gxr,hxr,_4,rMe,pxr,_xr,EK,uxr,bxr,vxr,u4,tMe,Fxr,Txr,CK,Mxr,Exr,Cxr,b4,aMe,wxr,Axr,wK,Lxr,yxr,xxr,v4,nMe,$xr,kxr,AK,Sxr,Rxr,Pxr,F4,sMe,Bxr,Ixr,LK,Nxr,qxr,jxr,T4,lMe,Dxr,Gxr,yK,Oxr,Vxr,Xxr,M4,iMe,zxr,Wxr,xK,Qxr,Hxr,Uxr,E4,dMe,Jxr,Yxr,$K,Kxr,Zxr,e$r,C4,cMe,o$r,r$r,kK,t$r,a$r,n$r,w4,fMe,s$r,l$r,SK,i$r,d$r,c$r,A4,mMe,f$r,m$r,RK,g$r,h$r,p$r,L4,gMe,_$r,u$r,PK,b$r,v$r,F$r,y4,hMe,T$r,M$r,BK,E$r,C$r,w$r,x4,pMe,A$r,L$r,IK,y$r,x$r,$$r,$4,Kze,xc,k4,_Me,Rx,k$r,uMe,S$r,Zze,ir,Px,R$r,$c,P$r,NK,B$r,I$r,qK,N$r,q$r,j$r,Bx,D$r,bMe,G$r,O$r,V$r,Dt,Ix,X$r,vMe,z$r,W$r,kc,Q$r,FMe,H$r,U$r,jK,J$r,Y$r,K$r,S4,Z$r,Ir,Nx,ekr,TMe,okr,rkr,hn,tkr,MMe,akr,nkr,EMe,skr,lkr,CMe,ikr,dkr,ckr,be,R4,wMe,fkr,mkr,DK,gkr,hkr,pkr,P4,AMe,_kr,ukr,GK,bkr,vkr,Fkr,B4,LMe,Tkr,Mkr,OK,Ekr,Ckr,wkr,I4,yMe,Akr,Lkr,VK,ykr,xkr,$kr,N4,xMe,kkr,Skr,XK,Rkr,Pkr,Bkr,q4,$Me,Ikr,Nkr,zK,qkr,jkr,Dkr,j4,kMe,Gkr,Okr,WK,Vkr,Xkr,zkr,D4,SMe,Wkr,Qkr,QK,Hkr,Ukr,Jkr,G4,RMe,Ykr,Kkr,HK,Zkr,eSr,oSr,O4,PMe,rSr,tSr,UK,aSr,nSr,sSr,V4,BMe,lSr,iSr,JK,dSr,cSr,fSr,X4,IMe,mSr,gSr,YK,hSr,pSr,_Sr,z4,NMe,uSr,bSr,KK,vSr,FSr,TSr,W4,qMe,MSr,ESr,ZK,CSr,wSr,ASr,Q4,jMe,LSr,ySr,eZ,xSr,$Sr,kSr,H4,DMe,SSr,RSr,oZ,PSr,BSr,ISr,U4,GMe,NSr,qSr,rZ,jSr,DSr,GSr,J4,eWe,Sc,Y4,OMe,qx,OSr,VMe,VSr,oWe,dr,jx,XSr,Rc,zSr,tZ,WSr,QSr,aZ,HSr,USr,JSr,Dx,YSr,XMe,KSr,ZSr,eRr,Gt,Gx,oRr,zMe,rRr,tRr,Pc,aRr,WMe,nRr,sRr,nZ,lRr,iRr,dRr,K4,cRr,Nr,Ox,fRr,QMe,mRr,gRr,pn,hRr,HMe,pRr,_Rr,UMe,uRr,bRr,JMe,vRr,FRr,TRr,Vx,Z4,YMe,MRr,ERr,sZ,CRr,wRr,ARr,eE,KMe,LRr,yRr,lZ,xRr,$Rr,kRr,oE,rWe,Bc,rE,ZMe,Xx,SRr,e4e,RRr,tWe,cr,zx,PRr,Ic,BRr,iZ,IRr,NRr,dZ,qRr,jRr,DRr,Wx,GRr,o4e,ORr,VRr,XRr,Ot,Qx,zRr,r4e,WRr,QRr,Nc,HRr,t4e,URr,JRr,cZ,YRr,KRr,ZRr,tE,ePr,qr,Hx,oPr,a4e,rPr,tPr,_n,aPr,n4e,nPr,sPr,s4e,lPr,iPr,l4e,dPr,cPr,fPr,i4e,aE,d4e,mPr,gPr,fZ,hPr,pPr,_Pr,nE,aWe,qc,sE,c4e,Ux,uPr,f4e,bPr,nWe,fr,Jx,vPr,jc,FPr,mZ,TPr,MPr,gZ,EPr,CPr,wPr,Yx,APr,m4e,LPr,yPr,xPr,Vt,Kx,$Pr,g4e,kPr,SPr,Dc,RPr,h4e,PPr,BPr,hZ,IPr,NPr,qPr,lE,jPr,jr,Zx,DPr,p4e,GPr,OPr,un,VPr,_4e,XPr,zPr,u4e,WPr,QPr,b4e,HPr,UPr,JPr,de,iE,v4e,YPr,KPr,pZ,ZPr,eBr,oBr,dE,F4e,rBr,tBr,_Z,aBr,nBr,sBr,cE,T4e,lBr,iBr,uZ,dBr,cBr,fBr,fE,M4e,mBr,gBr,bZ,hBr,pBr,_Br,mE,E4e,uBr,bBr,vZ,vBr,FBr,TBr,gE,C4e,MBr,EBr,FZ,CBr,wBr,ABr,hE,w4e,LBr,yBr,TZ,xBr,$Br,kBr,pE,A4e,SBr,RBr,MZ,PBr,BBr,IBr,_E,L4e,NBr,qBr,EZ,jBr,DBr,GBr,uE,y4e,OBr,VBr,CZ,XBr,zBr,WBr,bE,x4e,QBr,HBr,wZ,UBr,JBr,YBr,vE,$4e,KBr,ZBr,AZ,eIr,oIr,rIr,FE,k4e,tIr,aIr,LZ,nIr,sIr,lIr,TE,S4e,iIr,dIr,yZ,cIr,fIr,mIr,ME,R4e,gIr,hIr,xZ,pIr,_Ir,uIr,EE,P4e,bIr,vIr,$Z,FIr,TIr,MIr,CE,B4e,EIr,CIr,kZ,wIr,AIr,LIr,wE,I4e,yIr,xIr,SZ,$Ir,kIr,SIr,AE,N4e,RIr,PIr,RZ,BIr,IIr,NIr,LE,q4e,qIr,jIr,PZ,DIr,GIr,OIr,yE,sWe,Gc,xE,j4e,e$,VIr,D4e,XIr,lWe,mr,o$,zIr,Oc,WIr,BZ,QIr,HIr,IZ,UIr,JIr,YIr,r$,KIr,G4e,ZIr,eNr,oNr,Xt,t$,rNr,O4e,tNr,aNr,Vc,nNr,V4e,sNr,lNr,NZ,iNr,dNr,cNr,$E,fNr,Dr,a$,mNr,X4e,gNr,hNr,bn,pNr,z4e,_Nr,uNr,W4e,bNr,vNr,Q4e,FNr,TNr,MNr,ce,kE,H4e,ENr,CNr,qZ,wNr,ANr,LNr,SE,U4e,yNr,xNr,jZ,$Nr,kNr,SNr,RE,J4e,RNr,PNr,DZ,BNr,INr,NNr,PE,Y4e,qNr,jNr,GZ,DNr,GNr,ONr,BE,K4e,VNr,XNr,OZ,zNr,WNr,QNr,IE,Z4e,HNr,UNr,VZ,JNr,YNr,KNr,NE,eEe,ZNr,eqr,XZ,oqr,rqr,tqr,qE,oEe,aqr,nqr,zZ,sqr,lqr,iqr,jE,rEe,dqr,cqr,WZ,fqr,mqr,gqr,DE,tEe,hqr,pqr,QZ,_qr,uqr,bqr,GE,aEe,vqr,Fqr,HZ,Tqr,Mqr,Eqr,OE,nEe,Cqr,wqr,UZ,Aqr,Lqr,yqr,VE,sEe,xqr,$qr,JZ,kqr,Sqr,Rqr,XE,lEe,Pqr,Bqr,YZ,Iqr,Nqr,qqr,zE,iEe,jqr,Dqr,KZ,Gqr,Oqr,Vqr,WE,dEe,Xqr,zqr,ZZ,Wqr,Qqr,Hqr,QE,cEe,Uqr,Jqr,eee,Yqr,Kqr,Zqr,HE,fEe,ejr,ojr,oee,rjr,tjr,ajr,UE,mEe,njr,sjr,ree,ljr,ijr,djr,JE,gEe,cjr,fjr,tee,mjr,gjr,hjr,YE,iWe,Xc,KE,hEe,n$,pjr,pEe,_jr,dWe,gr,s$,ujr,zc,bjr,aee,vjr,Fjr,nee,Tjr,Mjr,Ejr,l$,Cjr,_Ee,wjr,Ajr,Ljr,zt,i$,yjr,uEe,xjr,$jr,Wc,kjr,bEe,Sjr,Rjr,see,Pjr,Bjr,Ijr,ZE,Njr,Gr,d$,qjr,vEe,jjr,Djr,vn,Gjr,FEe,Ojr,Vjr,TEe,Xjr,zjr,MEe,Wjr,Qjr,Hjr,EEe,eC,CEe,Ujr,Jjr,lee,Yjr,Kjr,Zjr,oC,cWe,Qc,rC,wEe,c$,eDr,AEe,oDr,fWe,hr,f$,rDr,Hc,tDr,iee,aDr,nDr,dee,sDr,lDr,iDr,m$,dDr,LEe,cDr,fDr,mDr,Wt,g$,gDr,yEe,hDr,pDr,Uc,_Dr,xEe,uDr,bDr,cee,vDr,FDr,TDr,tC,MDr,Or,h$,EDr,$Ee,CDr,wDr,Fn,ADr,kEe,LDr,yDr,SEe,xDr,$Dr,REe,kDr,SDr,RDr,PEe,aC,BEe,PDr,BDr,fee,IDr,NDr,qDr,nC,mWe,Jc,sC,IEe,p$,jDr,NEe,DDr,gWe,pr,_$,GDr,Yc,ODr,mee,VDr,XDr,gee,zDr,WDr,QDr,u$,HDr,qEe,UDr,JDr,YDr,Qt,b$,KDr,jEe,ZDr,eGr,Kc,oGr,DEe,rGr,tGr,hee,aGr,nGr,sGr,lC,lGr,Vr,v$,iGr,GEe,dGr,cGr,Tn,fGr,OEe,mGr,gGr,VEe,hGr,pGr,XEe,_Gr,uGr,bGr,oe,iC,zEe,vGr,FGr,pee,TGr,MGr,EGr,dC,WEe,CGr,wGr,_ee,AGr,LGr,yGr,cC,QEe,xGr,$Gr,uee,kGr,SGr,RGr,fC,HEe,PGr,BGr,bee,IGr,NGr,qGr,mC,UEe,jGr,DGr,vee,GGr,OGr,VGr,gC,JEe,XGr,zGr,Fee,WGr,QGr,HGr,hC,YEe,UGr,JGr,Tee,YGr,KGr,ZGr,pC,KEe,eOr,oOr,Mee,rOr,tOr,aOr,_C,ZEe,nOr,sOr,Eee,lOr,iOr,dOr,uC,eCe,cOr,fOr,Cee,mOr,gOr,hOr,bC,oCe,pOr,_Or,wee,uOr,bOr,vOr,vC,rCe,FOr,TOr,Aee,MOr,EOr,COr,FC,tCe,wOr,AOr,Lee,LOr,yOr,xOr,TC,aCe,$Or,kOr,yee,SOr,ROr,POr,MC,nCe,BOr,IOr,xee,NOr,qOr,jOr,EC,sCe,DOr,GOr,$ee,OOr,VOr,XOr,CC,lCe,zOr,WOr,kee,QOr,HOr,UOr,wC,iCe,JOr,YOr,See,KOr,ZOr,eVr,AC,dCe,oVr,rVr,Ree,tVr,aVr,nVr,LC,cCe,sVr,lVr,Pee,iVr,dVr,cVr,yC,fCe,fVr,mVr,Bee,gVr,hVr,pVr,xC,mCe,_Vr,uVr,Iee,bVr,vVr,FVr,$C,gCe,TVr,MVr,Nee,EVr,CVr,wVr,kC,hCe,AVr,LVr,qee,yVr,xVr,$Vr,SC,pCe,kVr,SVr,jee,RVr,PVr,BVr,RC,_Ce,IVr,NVr,Dee,qVr,jVr,DVr,PC,uCe,GVr,OVr,Gee,VVr,XVr,zVr,BC,hWe,Zc,IC,bCe,F$,WVr,vCe,QVr,pWe,_r,T$,HVr,ef,UVr,Oee,JVr,YVr,Vee,KVr,ZVr,eXr,M$,oXr,FCe,rXr,tXr,aXr,Ht,E$,nXr,TCe,sXr,lXr,of,iXr,MCe,dXr,cXr,Xee,fXr,mXr,gXr,NC,hXr,Xr,C$,pXr,ECe,_Xr,uXr,Mn,bXr,CCe,vXr,FXr,wCe,TXr,MXr,ACe,EXr,CXr,wXr,xe,qC,LCe,AXr,LXr,zee,yXr,xXr,$Xr,jC,yCe,kXr,SXr,Wee,RXr,PXr,BXr,DC,xCe,IXr,NXr,Qee,qXr,jXr,DXr,GC,$Ce,GXr,OXr,Hee,VXr,XXr,zXr,OC,kCe,WXr,QXr,Uee,HXr,UXr,JXr,VC,SCe,YXr,KXr,Jee,ZXr,ezr,ozr,XC,RCe,rzr,tzr,Yee,azr,nzr,szr,zC,PCe,lzr,izr,Kee,dzr,czr,fzr,WC,BCe,mzr,gzr,Zee,hzr,pzr,_zr,QC,ICe,uzr,bzr,eoe,vzr,Fzr,Tzr,HC,_We,rf,UC,NCe,w$,Mzr,qCe,Ezr,uWe,ur,A$,Czr,tf,wzr,ooe,Azr,Lzr,roe,yzr,xzr,$zr,L$,kzr,jCe,Szr,Rzr,Pzr,Ut,y$,Bzr,DCe,Izr,Nzr,af,qzr,GCe,jzr,Dzr,toe,Gzr,Ozr,Vzr,JC,Xzr,zr,x$,zzr,OCe,Wzr,Qzr,En,Hzr,VCe,Uzr,Jzr,XCe,Yzr,Kzr,zCe,Zzr,eWr,oWr,Ee,YC,WCe,rWr,tWr,aoe,aWr,nWr,sWr,KC,QCe,lWr,iWr,noe,dWr,cWr,fWr,ZC,HCe,mWr,gWr,soe,hWr,pWr,_Wr,e5,UCe,uWr,bWr,loe,vWr,FWr,TWr,o5,JCe,MWr,EWr,ioe,CWr,wWr,AWr,r5,YCe,LWr,yWr,doe,xWr,$Wr,kWr,t5,KCe,SWr,RWr,coe,PWr,BWr,IWr,a5,ZCe,NWr,qWr,foe,jWr,DWr,GWr,n5,e5e,OWr,VWr,moe,XWr,zWr,WWr,s5,o5e,QWr,HWr,goe,UWr,JWr,YWr,l5,r5e,KWr,ZWr,hoe,eQr,oQr,rQr,i5,t5e,tQr,aQr,poe,nQr,sQr,lQr,d5,a5e,iQr,dQr,_oe,cQr,fQr,mQr,c5,bWe,nf,f5,n5e,$$,gQr,s5e,hQr,vWe,br,k$,pQr,sf,_Qr,uoe,uQr,bQr,boe,vQr,FQr,TQr,S$,MQr,l5e,EQr,CQr,wQr,Jt,R$,AQr,i5e,LQr,yQr,lf,xQr,d5e,$Qr,kQr,voe,SQr,RQr,PQr,m5,BQr,Wr,P$,IQr,c5e,NQr,qQr,Cn,jQr,f5e,DQr,GQr,m5e,OQr,VQr,g5e,XQr,zQr,WQr,$e,g5,h5e,QQr,HQr,Foe,UQr,JQr,YQr,h5,p5e,KQr,ZQr,Toe,eHr,oHr,rHr,p5,_5e,tHr,aHr,Moe,nHr,sHr,lHr,_5,u5e,iHr,dHr,Eoe,cHr,fHr,mHr,u5,b5e,gHr,hHr,Coe,pHr,_Hr,uHr,b5,v5e,bHr,vHr,woe,FHr,THr,MHr,v5,F5e,EHr,CHr,Aoe,wHr,AHr,LHr,F5,T5e,yHr,xHr,Loe,$Hr,kHr,SHr,T5,M5e,RHr,PHr,yoe,BHr,IHr,NHr,M5,E5e,qHr,jHr,xoe,DHr,GHr,OHr,E5,FWe,df,C5,C5e,B$,VHr,w5e,XHr,TWe,vr,I$,zHr,cf,WHr,$oe,QHr,HHr,koe,UHr,JHr,YHr,N$,KHr,A5e,ZHr,eUr,oUr,Yt,q$,rUr,L5e,tUr,aUr,ff,nUr,y5e,sUr,lUr,Soe,iUr,dUr,cUr,w5,fUr,Qr,j$,mUr,x5e,gUr,hUr,wn,pUr,$5e,_Ur,uUr,k5e,bUr,vUr,S5e,FUr,TUr,MUr,ke,A5,R5e,EUr,CUr,Roe,wUr,AUr,LUr,L5,P5e,yUr,xUr,Poe,$Ur,kUr,SUr,y5,B5e,RUr,PUr,Boe,BUr,IUr,NUr,x5,I5e,qUr,jUr,Ioe,DUr,GUr,OUr,$5,N5e,VUr,XUr,Noe,zUr,WUr,QUr,k5,q5e,HUr,UUr,qoe,JUr,YUr,KUr,S5,j5e,ZUr,eJr,joe,oJr,rJr,tJr,R5,D5e,aJr,nJr,Doe,sJr,lJr,iJr,P5,G5e,dJr,cJr,Goe,fJr,mJr,gJr,B5,O5e,hJr,pJr,Ooe,_Jr,uJr,bJr,I5,MWe,mf,N5,V5e,D$,vJr,X5e,FJr,EWe,Fr,G$,TJr,gf,MJr,Voe,EJr,CJr,Xoe,wJr,AJr,LJr,O$,yJr,z5e,xJr,$Jr,kJr,Kt,V$,SJr,W5e,RJr,PJr,hf,BJr,Q5e,IJr,NJr,zoe,qJr,jJr,DJr,q5,GJr,Hr,X$,OJr,H5e,VJr,XJr,An,zJr,U5e,WJr,QJr,J5e,HJr,UJr,Y5e,JJr,YJr,KJr,Se,j5,K5e,ZJr,eYr,Woe,oYr,rYr,tYr,D5,Z5e,aYr,nYr,Qoe,sYr,lYr,iYr,G5,e0e,dYr,cYr,Hoe,fYr,mYr,gYr,O5,o0e,hYr,pYr,Uoe,_Yr,uYr,bYr,V5,r0e,vYr,FYr,Joe,TYr,MYr,EYr,X5,t0e,CYr,wYr,Yoe,AYr,LYr,yYr,z5,a0e,xYr,$Yr,Koe,kYr,SYr,RYr,W5,n0e,PYr,BYr,Zoe,IYr,NYr,qYr,Q5,s0e,jYr,DYr,ere,GYr,OYr,VYr,H5,l0e,XYr,zYr,ore,WYr,QYr,HYr,U5,CWe,pf,J5,i0e,z$,UYr,d0e,JYr,wWe,Tr,W$,YYr,_f,KYr,rre,ZYr,eKr,tre,oKr,rKr,tKr,Q$,aKr,c0e,nKr,sKr,lKr,Zt,H$,iKr,f0e,dKr,cKr,uf,fKr,m0e,mKr,gKr,are,hKr,pKr,_Kr,Y5,uKr,Ur,U$,bKr,g0e,vKr,FKr,Ln,TKr,h0e,MKr,EKr,p0e,CKr,wKr,_0e,AKr,LKr,yKr,Re,K5,u0e,xKr,$Kr,nre,kKr,SKr,RKr,Z5,b0e,PKr,BKr,sre,IKr,NKr,qKr,e0,v0e,jKr,DKr,lre,GKr,OKr,VKr,o0,F0e,XKr,zKr,ire,WKr,QKr,HKr,r0,T0e,UKr,JKr,dre,YKr,KKr,ZKr,t0,M0e,eZr,oZr,cre,rZr,tZr,aZr,a0,E0e,nZr,sZr,fre,lZr,iZr,dZr,n0,C0e,cZr,fZr,mre,mZr,gZr,hZr,s0,w0e,pZr,_Zr,gre,uZr,bZr,vZr,l0,A0e,FZr,TZr,hre,MZr,EZr,CZr,i0,AWe,bf,d0,L0e,J$,wZr,y0e,AZr,LWe,Mr,Y$,LZr,vf,yZr,pre,xZr,$Zr,_re,kZr,SZr,RZr,K$,PZr,x0e,BZr,IZr,NZr,ea,Z$,qZr,$0e,jZr,DZr,Ff,GZr,k0e,OZr,VZr,ure,XZr,zZr,WZr,c0,QZr,Jr,ek,HZr,S0e,UZr,JZr,yn,YZr,R0e,KZr,ZZr,P0e,eet,oet,B0e,ret,tet,aet,Ve,f0,I0e,net,set,bre,iet,det,cet,m0,N0e,fet,met,vre,get,het,pet,g0,q0e,_et,uet,Fre,bet,vet,Fet,h0,j0e,Tet,Met,Tre,Eet,Cet,wet,p0,D0e,Aet,Let,Mre,yet,xet,$et,_0,G0e,ket,Set,Ere,Ret,Pet,Bet,u0,O0e,Iet,Net,Cre,qet,jet,Det,b0,V0e,Get,Oet,wre,Vet,Xet,zet,v0,yWe,Tf,F0,X0e,ok,Wet,z0e,Qet,xWe,Er,rk,Het,Mf,Uet,Are,Jet,Yet,Lre,Ket,Zet,eot,tk,oot,W0e,rot,tot,aot,oa,ak,not,Q0e,sot,lot,Ef,iot,H0e,dot,cot,yre,fot,mot,got,T0,hot,Yr,nk,pot,U0e,_ot,uot,xn,bot,J0e,vot,Fot,Y0e,Tot,Mot,K0e,Eot,Cot,wot,Xe,M0,Z0e,Aot,Lot,xre,yot,xot,$ot,E0,ewe,kot,Sot,$re,Rot,Pot,Bot,C0,owe,Iot,Not,kre,qot,jot,Dot,w0,rwe,Got,Oot,Sre,Vot,Xot,zot,A0,twe,Wot,Qot,Rre,Hot,Uot,Jot,L0,awe,Yot,Kot,Pre,Zot,ert,ort,y0,nwe,rrt,trt,Bre,art,nrt,srt,x0,swe,lrt,irt,Ire,drt,crt,frt,$0,$We,Cf,k0,lwe,sk,mrt,iwe,grt,kWe,Cr,lk,hrt,wf,prt,Nre,_rt,urt,qre,brt,vrt,Frt,ik,Trt,dwe,Mrt,Ert,Crt,ra,dk,wrt,cwe,Art,Lrt,Af,yrt,fwe,xrt,$rt,jre,krt,Srt,Rrt,S0,Prt,Kr,ck,Brt,mwe,Irt,Nrt,$n,qrt,gwe,jrt,Drt,hwe,Grt,Ort,pwe,Vrt,Xrt,zrt,_we,R0,uwe,Wrt,Qrt,Dre,Hrt,Urt,Jrt,P0,SWe,Lf,B0,bwe,fk,Yrt,vwe,Krt,RWe,wr,mk,Zrt,yf,ett,Gre,ott,rtt,Ore,ttt,att,ntt,gk,stt,Fwe,ltt,itt,dtt,ta,hk,ctt,Twe,ftt,mtt,xf,gtt,Mwe,htt,ptt,Vre,_tt,utt,btt,I0,vtt,Zr,pk,Ftt,Ewe,Ttt,Mtt,kn,Ett,Cwe,Ctt,wtt,wwe,Att,Ltt,Awe,ytt,xtt,$tt,_k,N0,Lwe,ktt,Stt,Xre,Rtt,Ptt,Btt,q0,ywe,Itt,Ntt,zre,qtt,jtt,Dtt,j0,PWe,$f,D0,xwe,uk,Gtt,$we,Ott,BWe,Ar,bk,Vtt,kf,Xtt,Wre,ztt,Wtt,Qre,Qtt,Htt,Utt,vk,Jtt,kwe,Ytt,Ktt,Ztt,aa,Fk,eat,Swe,oat,rat,Sf,tat,Rwe,aat,nat,Hre,sat,lat,iat,G0,dat,et,Tk,cat,Pwe,fat,mat,Sn,gat,Bwe,hat,pat,Iwe,_at,uat,Nwe,bat,vat,Fat,qwe,O0,jwe,Tat,Mat,Ure,Eat,Cat,wat,V0,IWe;return d=new re({}),Sa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),m6=new re({}),g6=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Gf=new Aat({props:{warning:!0,$$slots:{default:[EHt]},$$scope:{ctx:$}}}),h6=new re({}),p6=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/configuration_auto.py#L614"}}),b6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/configuration_auto.py#L637"}}),eh=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[CHt]},$$scope:{ctx:$}}}),v6=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/configuration_auto.py#L760"}}),F6=new re({}),T6=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/tokenization_auto.py#L411"}}),C6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17938/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/tokenization_auto.py#L425"}}),Ih=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[wHt]},$$scope:{ctx:$}}}),w6=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/tokenization_auto.py#L624"}}),A6=new re({}),L6=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/feature_extraction_auto.py#L196"}}),$6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17938/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/feature_extraction_auto.py#L210"}}),Fp=new Aat({props:{$$slots:{default:[AHt]},$$scope:{ctx:$}}}),Tp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[LHt]},$$scope:{ctx:$}}}),k6=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/feature_extraction_auto.py#L337"}}),S6=new re({}),R6=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/processing_auto.py#L90"}}),I6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/processing_auto.py#L104"}}),Vp=new Aat({props:{$$slots:{default:[yHt]},$$scope:{ctx:$}}}),Xp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[xHt]},$$scope:{ctx:$}}}),N6=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/processing_auto.py#L257"}}),q6=new re({}),j6=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L786"}}),G6=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),Qp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[$Ht]},$$scope:{ctx:$}}}),O6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),Zu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[kHt]},$$scope:{ctx:$}}}),V6=new re({}),X6=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L793"}}),W6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),o1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[SHt]},$$scope:{ctx:$}}}),Q6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),H1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[RHt]},$$scope:{ctx:$}}}),H6=new re({}),U6=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L808"}}),Y6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),J1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[PHt]},$$scope:{ctx:$}}}),K6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),q2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[BHt]},$$scope:{ctx:$}}}),Z6=new re({}),eL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L815"}}),rL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),D2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[IHt]},$$scope:{ctx:$}}}),tL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),Ab=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[NHt]},$$scope:{ctx:$}}}),aL=new re({}),nL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L822"}}),lL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),yb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[qHt]},$$scope:{ctx:$}}}),iL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),Ub=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[jHt]},$$scope:{ctx:$}}}),dL=new re({}),cL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L831"}}),mL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),Yb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[DHt]},$$scope:{ctx:$}}}),gL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),U3=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[GHt]},$$scope:{ctx:$}}}),hL=new re({}),pL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L876"}}),uL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),Y3=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[OHt]},$$scope:{ctx:$}}}),bL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),xv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[VHt]},$$scope:{ctx:$}}}),vL=new re({}),FL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L883"}}),ML=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),kv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[XHt]},$$scope:{ctx:$}}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),jv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[zHt]},$$scope:{ctx:$}}}),CL=new re({}),wL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L869"}}),LL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),Gv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[WHt]},$$scope:{ctx:$}}}),yL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),wF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[QHt]},$$scope:{ctx:$}}}),xL=new re({}),$L=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L840"}}),SL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),LF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[HHt]},$$scope:{ctx:$}}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),uT=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[UHt]},$$scope:{ctx:$}}}),PL=new re({}),BL=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L847"}}),NL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),vT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[JHt]},$$scope:{ctx:$}}}),qL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),MT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[YHt]},$$scope:{ctx:$}}}),jL=new re({}),DL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L892"}}),OL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17938/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),CT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[KHt]},$$scope:{ctx:$}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),jT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[ZHt]},$$scope:{ctx:$}}}),XL=new re({}),zL=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L931"}}),QL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),GT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[eUt]},$$scope:{ctx:$}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),XT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[oUt]},$$scope:{ctx:$}}}),UL=new re({}),JL=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L858"}}),KL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),WT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[rUt]},$$scope:{ctx:$}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),UT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[tUt]},$$scope:{ctx:$}}}),ey=new re({}),oy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L938"}}),ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),YT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[aUt]},$$scope:{ctx:$}}}),ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),i7=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[nUt]},$$scope:{ctx:$}}}),ny=new re({}),sy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L961"}}),iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),c7=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[sUt]},$$scope:{ctx:$}}}),dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),u7=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[lUt]},$$scope:{ctx:$}}}),cy=new re({}),fy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L945"}}),gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),v7=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[iUt]},$$scope:{ctx:$}}}),hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),k7=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[dUt]},$$scope:{ctx:$}}}),py=new re({}),_y=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L952"}}),by=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),R7=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[cUt]},$$scope:{ctx:$}}}),vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),N7=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[fUt]},$$scope:{ctx:$}}}),Ty=new re({}),My=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L970"}}),Cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),j7=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[mUt]},$$scope:{ctx:$}}}),wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),W7=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[gUt]},$$scope:{ctx:$}}}),Ay=new re({}),Ly=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L977"}}),xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),H7=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[hUt]},$$scope:{ctx:$}}}),$y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),Z7=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[pUt]},$$scope:{ctx:$}}}),ky=new re({}),Sy=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L924"}}),Py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),o8=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[_Ut]},$$scope:{ctx:$}}}),By=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),n8=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[uUt]},$$scope:{ctx:$}}}),Ny=new re({}),qy=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L899"}}),Dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),l8=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[bUt]},$$scope:{ctx:$}}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),c8=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[vUt]},$$scope:{ctx:$}}}),Oy=new re({}),Vy=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L906"}}),zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),m8=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[FUt]},$$scope:{ctx:$}}}),Wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),v8=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[TUt]},$$scope:{ctx:$}}}),Qy=new re({}),Hy=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L915"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),T8=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[MUt]},$$scope:{ctx:$}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),C8=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[EUt]},$$scope:{ctx:$}}}),Ky=new re({}),Zy=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),ox=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),A8=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[CUt]},$$scope:{ctx:$}}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),M9=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[wUt]},$$scope:{ctx:$}}}),tx=new re({}),ax=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L420"}}),sx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),C9=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[AUt]},$$scope:{ctx:$}}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),H9=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[LUt]},$$scope:{ctx:$}}}),ix=new re({}),dx=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),fx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),J9=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[yUt]},$$scope:{ctx:$}}}),mx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),cM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[xUt]},$$scope:{ctx:$}}}),gx=new re({}),hx=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L451"}}),_x=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/pr_17938/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),mM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[$Ut]},$$scope:{ctx:$}}}),ux=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),vM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[kUt]},$$scope:{ctx:$}}}),bx=new re({}),vx=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),Tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),TM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[SUt]},$$scope:{ctx:$}}}),Mx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),OM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[RUt]},$$scope:{ctx:$}}}),Ex=new re({}),Cx=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L483"}}),Ax=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),XM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[PUt]},$$scope:{ctx:$}}}),Lx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),o4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[BUt]},$$scope:{ctx:$}}}),yx=new re({}),xx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),kx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),t4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[IUt]},$$scope:{ctx:$}}}),Sx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),$4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[NUt]},$$scope:{ctx:$}}}),Rx=new re({}),Px=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),Ix=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),S4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[qUt]},$$scope:{ctx:$}}}),Nx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),J4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[jUt]},$$scope:{ctx:$}}}),qx=new re({}),jx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L535"}}),Gx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),K4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[DUt]},$$scope:{ctx:$}}}),Ox=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),oE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[GUt]},$$scope:{ctx:$}}}),Xx=new re({}),zx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L508"}}),Qx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),tE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[OUt]},$$scope:{ctx:$}}}),Hx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),nE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[VUt]},$$scope:{ctx:$}}}),Ux=new re({}),Jx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L519"}}),Kx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),lE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[XUt]},$$scope:{ctx:$}}}),Zx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),yE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[zUt]},$$scope:{ctx:$}}}),e$=new re({}),o$=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),t$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),$E=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[WUt]},$$scope:{ctx:$}}}),a$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),YE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[QUt]},$$scope:{ctx:$}}}),n$=new re({}),s$=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),i$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),ZE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[HUt]},$$scope:{ctx:$}}}),d$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),oC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[UUt]},$$scope:{ctx:$}}}),c$=new re({}),f$=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L544"}}),g$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),tC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[JUt]},$$scope:{ctx:$}}}),h$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),nC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[YUt]},$$scope:{ctx:$}}}),p$=new re({}),_$=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),b$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),lC=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[KUt]},$$scope:{ctx:$}}}),v$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),BC=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[ZUt]},$$scope:{ctx:$}}}),F$=new re({}),T$=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),E$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),NC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[eJt]},$$scope:{ctx:$}}}),C$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),HC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[oJt]},$$scope:{ctx:$}}}),w$=new re({}),A$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),y$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),JC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[rJt]},$$scope:{ctx:$}}}),x$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),c5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[tJt]},$$scope:{ctx:$}}}),$$=new re({}),k$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),R$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),m5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[aJt]},$$scope:{ctx:$}}}),P$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),E5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[nJt]},$$scope:{ctx:$}}}),B$=new re({}),I$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),q$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),w5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[sJt]},$$scope:{ctx:$}}}),j$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),I5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[lJt]},$$scope:{ctx:$}}}),D$=new re({}),G$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),V$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),q5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[iJt]},$$scope:{ctx:$}}}),X$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),U5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[dJt]},$$scope:{ctx:$}}}),z$=new re({}),W$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),H$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),Y5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[cJt]},$$scope:{ctx:$}}}),U$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),i0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[fJt]},$$scope:{ctx:$}}}),J$=new re({}),Y$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),Z$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),c0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[mJt]},$$scope:{ctx:$}}}),ek=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),v0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[gJt]},$$scope:{ctx:$}}}),ok=new re({}),rk=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),ak=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),T0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[hJt]},$$scope:{ctx:$}}}),nk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),$0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[pJt]},$$scope:{ctx:$}}}),sk=new re({}),lk=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),dk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),S0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[_Jt]},$$scope:{ctx:$}}}),ck=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),P0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[uJt]},$$scope:{ctx:$}}}),fk=new re({}),mk=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),hk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),I0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[bJt]},$$scope:{ctx:$}}}),pk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),j0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[vJt]},$$scope:{ctx:$}}}),uk=new re({}),bk=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),Fk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),G0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[FJt]},$$scope:{ctx:$}}}),Tk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),V0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[TJt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Co=a("span"),xi=o("Auto Classes"),If=l(),lt=a("p"),$i=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ki=a("code"),i6=o("from_pretrained()"),Nf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),Si=o("Instantiating one of "),Pn=a("a"),d6=o("AutoConfig"),Bn=o(", "),In=a("a"),c6=o("AutoModel"),Ri=o(`, and
`),Nn=a("a"),f6=o("AutoTokenizer"),Pi=o(" will directly create a class of the relevant architecture. For instance"),qf=l(),F(Sa.$$.fragment),He=l(),Ae=a("p"),zS=o("will create a model that is an instance of "),Bi=a("a"),WS=o("BertModel"),QS=o("."),wo=l(),Ra=a("p"),HS=o("There is one class of "),jf=a("code"),US=o("AutoModel"),WHe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),kXe=l(),Ii=a("h2"),Df=a("a"),Xae=a("span"),F(m6.$$.fragment),QHe=l(),zae=a("span"),HHe=o("Extending the Auto Classes"),SXe=l(),qn=a("p"),UHe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Wae=a("code"),JHe=o("NewModel"),YHe=o(", make sure you have a "),Qae=a("code"),KHe=o("NewModelConfig"),ZHe=o(` then you can add those to the auto
classes like this:`),RXe=l(),F(g6.$$.fragment),PXe=l(),JS=a("p"),eUe=o("You will then be able to use the auto classes like you would usually do!"),BXe=l(),F(Gf.$$.fragment),IXe=l(),Ni=a("h2"),Of=a("a"),Hae=a("span"),F(h6.$$.fragment),oUe=l(),Uae=a("span"),rUe=o("AutoConfig"),NXe=l(),Ao=a("div"),F(p6.$$.fragment),tUe=l(),_6=a("p"),aUe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),YS=a("a"),nUe=o("from_pretrained()"),sUe=o(" class method."),lUe=l(),u6=a("p"),iUe=o("This class cannot be instantiated directly using "),Jae=a("code"),dUe=o("__init__()"),cUe=o(" (throws an error)."),fUe=l(),Lr=a("div"),F(b6.$$.fragment),mUe=l(),Yae=a("p"),gUe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),hUe=l(),qi=a("p"),pUe=o("The configuration class to instantiate is selected based on the "),Kae=a("code"),_Ue=o("model_type"),uUe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Zae=a("code"),bUe=o("pretrained_model_name_or_path"),vUe=o(":"),FUe=l(),A=a("ul"),Vf=a("li"),ene=a("strong"),TUe=o("albert"),MUe=o(" \u2014 "),KS=a("a"),EUe=o("AlbertConfig"),CUe=o(" (ALBERT model)"),wUe=l(),Xf=a("li"),one=a("strong"),AUe=o("bart"),LUe=o(" \u2014 "),ZS=a("a"),yUe=o("BartConfig"),xUe=o(" (BART model)"),$Ue=l(),zf=a("li"),rne=a("strong"),kUe=o("beit"),SUe=o(" \u2014 "),eR=a("a"),RUe=o("BeitConfig"),PUe=o(" (BEiT model)"),BUe=l(),Wf=a("li"),tne=a("strong"),IUe=o("bert"),NUe=o(" \u2014 "),oR=a("a"),qUe=o("BertConfig"),jUe=o(" (BERT model)"),DUe=l(),Qf=a("li"),ane=a("strong"),GUe=o("bert-generation"),OUe=o(" \u2014 "),rR=a("a"),VUe=o("BertGenerationConfig"),XUe=o(" (Bert Generation model)"),zUe=l(),Hf=a("li"),nne=a("strong"),WUe=o("big_bird"),QUe=o(" \u2014 "),tR=a("a"),HUe=o("BigBirdConfig"),UUe=o(" (BigBird model)"),JUe=l(),Uf=a("li"),sne=a("strong"),YUe=o("bigbird_pegasus"),KUe=o(" \u2014 "),aR=a("a"),ZUe=o("BigBirdPegasusConfig"),eJe=o(" (BigBird-Pegasus model)"),oJe=l(),Jf=a("li"),lne=a("strong"),rJe=o("blenderbot"),tJe=o(" \u2014 "),nR=a("a"),aJe=o("BlenderbotConfig"),nJe=o(" (Blenderbot model)"),sJe=l(),Yf=a("li"),ine=a("strong"),lJe=o("blenderbot-small"),iJe=o(" \u2014 "),sR=a("a"),dJe=o("BlenderbotSmallConfig"),cJe=o(" (BlenderbotSmall model)"),fJe=l(),Kf=a("li"),dne=a("strong"),mJe=o("bloom"),gJe=o(" \u2014 "),lR=a("a"),hJe=o("BloomConfig"),pJe=o(" (BLOOM model)"),_Je=l(),Zf=a("li"),cne=a("strong"),uJe=o("camembert"),bJe=o(" \u2014 "),iR=a("a"),vJe=o("CamembertConfig"),FJe=o(" (CamemBERT model)"),TJe=l(),em=a("li"),fne=a("strong"),MJe=o("canine"),EJe=o(" \u2014 "),dR=a("a"),CJe=o("CanineConfig"),wJe=o(" (CANINE model)"),AJe=l(),om=a("li"),mne=a("strong"),LJe=o("clip"),yJe=o(" \u2014 "),cR=a("a"),xJe=o("CLIPConfig"),$Je=o(" (CLIP model)"),kJe=l(),rm=a("li"),gne=a("strong"),SJe=o("codegen"),RJe=o(" \u2014 "),fR=a("a"),PJe=o("CodeGenConfig"),BJe=o(" (CodeGen model)"),IJe=l(),tm=a("li"),hne=a("strong"),NJe=o("convbert"),qJe=o(" \u2014 "),mR=a("a"),jJe=o("ConvBertConfig"),DJe=o(" (ConvBERT model)"),GJe=l(),am=a("li"),pne=a("strong"),OJe=o("convnext"),VJe=o(" \u2014 "),gR=a("a"),XJe=o("ConvNextConfig"),zJe=o(" (ConvNeXT model)"),WJe=l(),nm=a("li"),_ne=a("strong"),QJe=o("ctrl"),HJe=o(" \u2014 "),hR=a("a"),UJe=o("CTRLConfig"),JJe=o(" (CTRL model)"),YJe=l(),sm=a("li"),une=a("strong"),KJe=o("cvt"),ZJe=o(" \u2014 "),pR=a("a"),eYe=o("CvtConfig"),oYe=o(" (CvT model)"),rYe=l(),lm=a("li"),bne=a("strong"),tYe=o("data2vec-audio"),aYe=o(" \u2014 "),_R=a("a"),nYe=o("Data2VecAudioConfig"),sYe=o(" (Data2VecAudio model)"),lYe=l(),im=a("li"),vne=a("strong"),iYe=o("data2vec-text"),dYe=o(" \u2014 "),uR=a("a"),cYe=o("Data2VecTextConfig"),fYe=o(" (Data2VecText model)"),mYe=l(),dm=a("li"),Fne=a("strong"),gYe=o("data2vec-vision"),hYe=o(" \u2014 "),bR=a("a"),pYe=o("Data2VecVisionConfig"),_Ye=o(" (Data2VecVision model)"),uYe=l(),cm=a("li"),Tne=a("strong"),bYe=o("deberta"),vYe=o(" \u2014 "),vR=a("a"),FYe=o("DebertaConfig"),TYe=o(" (DeBERTa model)"),MYe=l(),fm=a("li"),Mne=a("strong"),EYe=o("deberta-v2"),CYe=o(" \u2014 "),FR=a("a"),wYe=o("DebertaV2Config"),AYe=o(" (DeBERTa-v2 model)"),LYe=l(),mm=a("li"),Ene=a("strong"),yYe=o("decision_transformer"),xYe=o(" \u2014 "),TR=a("a"),$Ye=o("DecisionTransformerConfig"),kYe=o(" (Decision Transformer model)"),SYe=l(),gm=a("li"),Cne=a("strong"),RYe=o("deit"),PYe=o(" \u2014 "),MR=a("a"),BYe=o("DeiTConfig"),IYe=o(" (DeiT model)"),NYe=l(),hm=a("li"),wne=a("strong"),qYe=o("detr"),jYe=o(" \u2014 "),ER=a("a"),DYe=o("DetrConfig"),GYe=o(" (DETR model)"),OYe=l(),pm=a("li"),Ane=a("strong"),VYe=o("distilbert"),XYe=o(" \u2014 "),CR=a("a"),zYe=o("DistilBertConfig"),WYe=o(" (DistilBERT model)"),QYe=l(),_m=a("li"),Lne=a("strong"),HYe=o("dpr"),UYe=o(" \u2014 "),wR=a("a"),JYe=o("DPRConfig"),YYe=o(" (DPR model)"),KYe=l(),um=a("li"),yne=a("strong"),ZYe=o("dpt"),eKe=o(" \u2014 "),AR=a("a"),oKe=o("DPTConfig"),rKe=o(" (DPT model)"),tKe=l(),bm=a("li"),xne=a("strong"),aKe=o("electra"),nKe=o(" \u2014 "),LR=a("a"),sKe=o("ElectraConfig"),lKe=o(" (ELECTRA model)"),iKe=l(),vm=a("li"),$ne=a("strong"),dKe=o("encoder-decoder"),cKe=o(" \u2014 "),yR=a("a"),fKe=o("EncoderDecoderConfig"),mKe=o(" (Encoder decoder model)"),gKe=l(),Fm=a("li"),kne=a("strong"),hKe=o("flaubert"),pKe=o(" \u2014 "),xR=a("a"),_Ke=o("FlaubertConfig"),uKe=o(" (FlauBERT model)"),bKe=l(),Tm=a("li"),Sne=a("strong"),vKe=o("flava"),FKe=o(" \u2014 "),$R=a("a"),TKe=o("FlavaConfig"),MKe=o(" (FLAVA model)"),EKe=l(),Mm=a("li"),Rne=a("strong"),CKe=o("fnet"),wKe=o(" \u2014 "),kR=a("a"),AKe=o("FNetConfig"),LKe=o(" (FNet model)"),yKe=l(),Em=a("li"),Pne=a("strong"),xKe=o("fsmt"),$Ke=o(" \u2014 "),SR=a("a"),kKe=o("FSMTConfig"),SKe=o(" (FairSeq Machine-Translation model)"),RKe=l(),Cm=a("li"),Bne=a("strong"),PKe=o("funnel"),BKe=o(" \u2014 "),RR=a("a"),IKe=o("FunnelConfig"),NKe=o(" (Funnel Transformer model)"),qKe=l(),wm=a("li"),Ine=a("strong"),jKe=o("glpn"),DKe=o(" \u2014 "),PR=a("a"),GKe=o("GLPNConfig"),OKe=o(" (GLPN model)"),VKe=l(),Am=a("li"),Nne=a("strong"),XKe=o("gpt2"),zKe=o(" \u2014 "),BR=a("a"),WKe=o("GPT2Config"),QKe=o(" (OpenAI GPT-2 model)"),HKe=l(),Lm=a("li"),qne=a("strong"),UKe=o("gpt_neo"),JKe=o(" \u2014 "),IR=a("a"),YKe=o("GPTNeoConfig"),KKe=o(" (GPT Neo model)"),ZKe=l(),ym=a("li"),jne=a("strong"),eZe=o("gpt_neox"),oZe=o(" \u2014 "),NR=a("a"),rZe=o("GPTNeoXConfig"),tZe=o(" (GPT NeoX model)"),aZe=l(),xm=a("li"),Dne=a("strong"),nZe=o("gptj"),sZe=o(" \u2014 "),qR=a("a"),lZe=o("GPTJConfig"),iZe=o(" (GPT-J model)"),dZe=l(),$m=a("li"),Gne=a("strong"),cZe=o("groupvit"),fZe=o(" \u2014 "),jR=a("a"),mZe=o("GroupViTConfig"),gZe=o(" (GroupViT model)"),hZe=l(),km=a("li"),One=a("strong"),pZe=o("hubert"),_Ze=o(" \u2014 "),DR=a("a"),uZe=o("HubertConfig"),bZe=o(" (Hubert model)"),vZe=l(),Sm=a("li"),Vne=a("strong"),FZe=o("ibert"),TZe=o(" \u2014 "),GR=a("a"),MZe=o("IBertConfig"),EZe=o(" (I-BERT model)"),CZe=l(),Rm=a("li"),Xne=a("strong"),wZe=o("imagegpt"),AZe=o(" \u2014 "),OR=a("a"),LZe=o("ImageGPTConfig"),yZe=o(" (ImageGPT model)"),xZe=l(),Pm=a("li"),zne=a("strong"),$Ze=o("layoutlm"),kZe=o(" \u2014 "),VR=a("a"),SZe=o("LayoutLMConfig"),RZe=o(" (LayoutLM model)"),PZe=l(),Bm=a("li"),Wne=a("strong"),BZe=o("layoutlmv2"),IZe=o(" \u2014 "),XR=a("a"),NZe=o("LayoutLMv2Config"),qZe=o(" (LayoutLMv2 model)"),jZe=l(),Im=a("li"),Qne=a("strong"),DZe=o("layoutlmv3"),GZe=o(" \u2014 "),zR=a("a"),OZe=o("LayoutLMv3Config"),VZe=o(" (LayoutLMv3 model)"),XZe=l(),Nm=a("li"),Hne=a("strong"),zZe=o("led"),WZe=o(" \u2014 "),WR=a("a"),QZe=o("LEDConfig"),HZe=o(" (LED model)"),UZe=l(),qm=a("li"),Une=a("strong"),JZe=o("levit"),YZe=o(" \u2014 "),QR=a("a"),KZe=o("LevitConfig"),ZZe=o(" (LeViT model)"),eeo=l(),jm=a("li"),Jne=a("strong"),oeo=o("longformer"),reo=o(" \u2014 "),HR=a("a"),teo=o("LongformerConfig"),aeo=o(" (Longformer model)"),neo=l(),Dm=a("li"),Yne=a("strong"),seo=o("longt5"),leo=o(" \u2014 "),UR=a("a"),ieo=o("LongT5Config"),deo=o(" (LongT5 model)"),ceo=l(),Gm=a("li"),Kne=a("strong"),feo=o("luke"),meo=o(" \u2014 "),JR=a("a"),geo=o("LukeConfig"),heo=o(" (LUKE model)"),peo=l(),Om=a("li"),Zne=a("strong"),_eo=o("lxmert"),ueo=o(" \u2014 "),YR=a("a"),beo=o("LxmertConfig"),veo=o(" (LXMERT model)"),Feo=l(),Vm=a("li"),ese=a("strong"),Teo=o("m2m_100"),Meo=o(" \u2014 "),KR=a("a"),Eeo=o("M2M100Config"),Ceo=o(" (M2M100 model)"),weo=l(),Xm=a("li"),ose=a("strong"),Aeo=o("marian"),Leo=o(" \u2014 "),ZR=a("a"),yeo=o("MarianConfig"),xeo=o(" (Marian model)"),$eo=l(),zm=a("li"),rse=a("strong"),keo=o("maskformer"),Seo=o(" \u2014 "),eP=a("a"),Reo=o("MaskFormerConfig"),Peo=o(" (MaskFormer model)"),Beo=l(),Wm=a("li"),tse=a("strong"),Ieo=o("mbart"),Neo=o(" \u2014 "),oP=a("a"),qeo=o("MBartConfig"),jeo=o(" (mBART model)"),Deo=l(),Qm=a("li"),ase=a("strong"),Geo=o("mctct"),Oeo=o(" \u2014 "),rP=a("a"),Veo=o("MCTCTConfig"),Xeo=o(" (M-CTC-T model)"),zeo=l(),Hm=a("li"),nse=a("strong"),Weo=o("megatron-bert"),Qeo=o(" \u2014 "),tP=a("a"),Heo=o("MegatronBertConfig"),Ueo=o(" (Megatron-BERT model)"),Jeo=l(),Um=a("li"),sse=a("strong"),Yeo=o("mobilebert"),Keo=o(" \u2014 "),aP=a("a"),Zeo=o("MobileBertConfig"),eoo=o(" (MobileBERT model)"),ooo=l(),Jm=a("li"),lse=a("strong"),roo=o("mobilevit"),too=o(" \u2014 "),nP=a("a"),aoo=o("MobileViTConfig"),noo=o(" (MobileViT model)"),soo=l(),Ym=a("li"),ise=a("strong"),loo=o("mpnet"),ioo=o(" \u2014 "),sP=a("a"),doo=o("MPNetConfig"),coo=o(" (MPNet model)"),foo=l(),Km=a("li"),dse=a("strong"),moo=o("mt5"),goo=o(" \u2014 "),lP=a("a"),hoo=o("MT5Config"),poo=o(" (MT5 model)"),_oo=l(),Zm=a("li"),cse=a("strong"),uoo=o("mvp"),boo=o(" \u2014 "),iP=a("a"),voo=o("MvpConfig"),Foo=o(" (MVP model)"),Too=l(),eg=a("li"),fse=a("strong"),Moo=o("nezha"),Eoo=o(" \u2014 "),dP=a("a"),Coo=o("NezhaConfig"),woo=o(" (Nezha model)"),Aoo=l(),og=a("li"),mse=a("strong"),Loo=o("nystromformer"),yoo=o(" \u2014 "),cP=a("a"),xoo=o("NystromformerConfig"),$oo=o(" (Nystr\xF6mformer model)"),koo=l(),rg=a("li"),gse=a("strong"),Soo=o("openai-gpt"),Roo=o(" \u2014 "),fP=a("a"),Poo=o("OpenAIGPTConfig"),Boo=o(" (OpenAI GPT model)"),Ioo=l(),tg=a("li"),hse=a("strong"),Noo=o("opt"),qoo=o(" \u2014 "),mP=a("a"),joo=o("OPTConfig"),Doo=o(" (OPT model)"),Goo=l(),ag=a("li"),pse=a("strong"),Ooo=o("owlvit"),Voo=o(" \u2014 "),gP=a("a"),Xoo=o("OwlViTConfig"),zoo=o(" (OWL-ViT model)"),Woo=l(),ng=a("li"),_se=a("strong"),Qoo=o("pegasus"),Hoo=o(" \u2014 "),hP=a("a"),Uoo=o("PegasusConfig"),Joo=o(" (Pegasus model)"),Yoo=l(),sg=a("li"),use=a("strong"),Koo=o("perceiver"),Zoo=o(" \u2014 "),pP=a("a"),ero=o("PerceiverConfig"),oro=o(" (Perceiver model)"),rro=l(),lg=a("li"),bse=a("strong"),tro=o("plbart"),aro=o(" \u2014 "),_P=a("a"),nro=o("PLBartConfig"),sro=o(" (PLBart model)"),lro=l(),ig=a("li"),vse=a("strong"),iro=o("poolformer"),dro=o(" \u2014 "),uP=a("a"),cro=o("PoolFormerConfig"),fro=o(" (PoolFormer model)"),mro=l(),dg=a("li"),Fse=a("strong"),gro=o("prophetnet"),hro=o(" \u2014 "),bP=a("a"),pro=o("ProphetNetConfig"),_ro=o(" (ProphetNet model)"),uro=l(),cg=a("li"),Tse=a("strong"),bro=o("qdqbert"),vro=o(" \u2014 "),vP=a("a"),Fro=o("QDQBertConfig"),Tro=o(" (QDQBert model)"),Mro=l(),fg=a("li"),Mse=a("strong"),Ero=o("rag"),Cro=o(" \u2014 "),FP=a("a"),wro=o("RagConfig"),Aro=o(" (RAG model)"),Lro=l(),mg=a("li"),Ese=a("strong"),yro=o("realm"),xro=o(" \u2014 "),TP=a("a"),$ro=o("RealmConfig"),kro=o(" (REALM model)"),Sro=l(),gg=a("li"),Cse=a("strong"),Rro=o("reformer"),Pro=o(" \u2014 "),MP=a("a"),Bro=o("ReformerConfig"),Iro=o(" (Reformer model)"),Nro=l(),hg=a("li"),wse=a("strong"),qro=o("regnet"),jro=o(" \u2014 "),EP=a("a"),Dro=o("RegNetConfig"),Gro=o(" (RegNet model)"),Oro=l(),pg=a("li"),Ase=a("strong"),Vro=o("rembert"),Xro=o(" \u2014 "),CP=a("a"),zro=o("RemBertConfig"),Wro=o(" (RemBERT model)"),Qro=l(),_g=a("li"),Lse=a("strong"),Hro=o("resnet"),Uro=o(" \u2014 "),wP=a("a"),Jro=o("ResNetConfig"),Yro=o(" (ResNet model)"),Kro=l(),ug=a("li"),yse=a("strong"),Zro=o("retribert"),eto=o(" \u2014 "),AP=a("a"),oto=o("RetriBertConfig"),rto=o(" (RetriBERT model)"),tto=l(),bg=a("li"),xse=a("strong"),ato=o("roberta"),nto=o(" \u2014 "),LP=a("a"),sto=o("RobertaConfig"),lto=o(" (RoBERTa model)"),ito=l(),vg=a("li"),$se=a("strong"),dto=o("roformer"),cto=o(" \u2014 "),yP=a("a"),fto=o("RoFormerConfig"),mto=o(" (RoFormer model)"),gto=l(),Fg=a("li"),kse=a("strong"),hto=o("segformer"),pto=o(" \u2014 "),xP=a("a"),_to=o("SegformerConfig"),uto=o(" (SegFormer model)"),bto=l(),Tg=a("li"),Sse=a("strong"),vto=o("sew"),Fto=o(" \u2014 "),$P=a("a"),Tto=o("SEWConfig"),Mto=o(" (SEW model)"),Eto=l(),Mg=a("li"),Rse=a("strong"),Cto=o("sew-d"),wto=o(" \u2014 "),kP=a("a"),Ato=o("SEWDConfig"),Lto=o(" (SEW-D model)"),yto=l(),Eg=a("li"),Pse=a("strong"),xto=o("speech-encoder-decoder"),$to=o(" \u2014 "),SP=a("a"),kto=o("SpeechEncoderDecoderConfig"),Sto=o(" (Speech Encoder decoder model)"),Rto=l(),Cg=a("li"),Bse=a("strong"),Pto=o("speech_to_text"),Bto=o(" \u2014 "),RP=a("a"),Ito=o("Speech2TextConfig"),Nto=o(" (Speech2Text model)"),qto=l(),wg=a("li"),Ise=a("strong"),jto=o("speech_to_text_2"),Dto=o(" \u2014 "),PP=a("a"),Gto=o("Speech2Text2Config"),Oto=o(" (Speech2Text2 model)"),Vto=l(),Ag=a("li"),Nse=a("strong"),Xto=o("splinter"),zto=o(" \u2014 "),BP=a("a"),Wto=o("SplinterConfig"),Qto=o(" (Splinter model)"),Hto=l(),Lg=a("li"),qse=a("strong"),Uto=o("squeezebert"),Jto=o(" \u2014 "),IP=a("a"),Yto=o("SqueezeBertConfig"),Kto=o(" (SqueezeBERT model)"),Zto=l(),yg=a("li"),jse=a("strong"),eao=o("swin"),oao=o(" \u2014 "),NP=a("a"),rao=o("SwinConfig"),tao=o(" (Swin Transformer model)"),aao=l(),xg=a("li"),Dse=a("strong"),nao=o("t5"),sao=o(" \u2014 "),qP=a("a"),lao=o("T5Config"),iao=o(" (T5 model)"),dao=l(),$g=a("li"),Gse=a("strong"),cao=o("tapas"),fao=o(" \u2014 "),jP=a("a"),mao=o("TapasConfig"),gao=o(" (TAPAS model)"),hao=l(),kg=a("li"),Ose=a("strong"),pao=o("trajectory_transformer"),_ao=o(" \u2014 "),DP=a("a"),uao=o("TrajectoryTransformerConfig"),bao=o(" (Trajectory Transformer model)"),vao=l(),Sg=a("li"),Vse=a("strong"),Fao=o("transfo-xl"),Tao=o(" \u2014 "),GP=a("a"),Mao=o("TransfoXLConfig"),Eao=o(" (Transformer-XL model)"),Cao=l(),Rg=a("li"),Xse=a("strong"),wao=o("trocr"),Aao=o(" \u2014 "),OP=a("a"),Lao=o("TrOCRConfig"),yao=o(" (TrOCR model)"),xao=l(),Pg=a("li"),zse=a("strong"),$ao=o("unispeech"),kao=o(" \u2014 "),VP=a("a"),Sao=o("UniSpeechConfig"),Rao=o(" (UniSpeech model)"),Pao=l(),Bg=a("li"),Wse=a("strong"),Bao=o("unispeech-sat"),Iao=o(" \u2014 "),XP=a("a"),Nao=o("UniSpeechSatConfig"),qao=o(" (UniSpeechSat model)"),jao=l(),Ig=a("li"),Qse=a("strong"),Dao=o("van"),Gao=o(" \u2014 "),zP=a("a"),Oao=o("VanConfig"),Vao=o(" (VAN model)"),Xao=l(),Ng=a("li"),Hse=a("strong"),zao=o("vilt"),Wao=o(" \u2014 "),WP=a("a"),Qao=o("ViltConfig"),Hao=o(" (ViLT model)"),Uao=l(),qg=a("li"),Use=a("strong"),Jao=o("vision-encoder-decoder"),Yao=o(" \u2014 "),QP=a("a"),Kao=o("VisionEncoderDecoderConfig"),Zao=o(" (Vision Encoder decoder model)"),eno=l(),jg=a("li"),Jse=a("strong"),ono=o("vision-text-dual-encoder"),rno=o(" \u2014 "),HP=a("a"),tno=o("VisionTextDualEncoderConfig"),ano=o(" (VisionTextDualEncoder model)"),nno=l(),Dg=a("li"),Yse=a("strong"),sno=o("visual_bert"),lno=o(" \u2014 "),UP=a("a"),ino=o("VisualBertConfig"),dno=o(" (VisualBERT model)"),cno=l(),Gg=a("li"),Kse=a("strong"),fno=o("vit"),mno=o(" \u2014 "),JP=a("a"),gno=o("ViTConfig"),hno=o(" (ViT model)"),pno=l(),Og=a("li"),Zse=a("strong"),_no=o("vit_mae"),uno=o(" \u2014 "),YP=a("a"),bno=o("ViTMAEConfig"),vno=o(" (ViTMAE model)"),Fno=l(),Vg=a("li"),ele=a("strong"),Tno=o("wav2vec2"),Mno=o(" \u2014 "),KP=a("a"),Eno=o("Wav2Vec2Config"),Cno=o(" (Wav2Vec2 model)"),wno=l(),Xg=a("li"),ole=a("strong"),Ano=o("wav2vec2-conformer"),Lno=o(" \u2014 "),ZP=a("a"),yno=o("Wav2Vec2ConformerConfig"),xno=o(" (Wav2Vec2-Conformer model)"),$no=l(),zg=a("li"),rle=a("strong"),kno=o("wavlm"),Sno=o(" \u2014 "),eB=a("a"),Rno=o("WavLMConfig"),Pno=o(" (WavLM model)"),Bno=l(),Wg=a("li"),tle=a("strong"),Ino=o("xglm"),Nno=o(" \u2014 "),oB=a("a"),qno=o("XGLMConfig"),jno=o(" (XGLM model)"),Dno=l(),Qg=a("li"),ale=a("strong"),Gno=o("xlm"),Ono=o(" \u2014 "),rB=a("a"),Vno=o("XLMConfig"),Xno=o(" (XLM model)"),zno=l(),Hg=a("li"),nle=a("strong"),Wno=o("xlm-prophetnet"),Qno=o(" \u2014 "),tB=a("a"),Hno=o("XLMProphetNetConfig"),Uno=o(" (XLM-ProphetNet model)"),Jno=l(),Ug=a("li"),sle=a("strong"),Yno=o("xlm-roberta"),Kno=o(" \u2014 "),aB=a("a"),Zno=o("XLMRobertaConfig"),eso=o(" (XLM-RoBERTa model)"),oso=l(),Jg=a("li"),lle=a("strong"),rso=o("xlm-roberta-xl"),tso=o(" \u2014 "),nB=a("a"),aso=o("XLMRobertaXLConfig"),nso=o(" (XLM-RoBERTa-XL model)"),sso=l(),Yg=a("li"),ile=a("strong"),lso=o("xlnet"),iso=o(" \u2014 "),sB=a("a"),dso=o("XLNetConfig"),cso=o(" (XLNet model)"),fso=l(),Kg=a("li"),dle=a("strong"),mso=o("yolos"),gso=o(" \u2014 "),lB=a("a"),hso=o("YolosConfig"),pso=o(" (YOLOS model)"),_so=l(),Zg=a("li"),cle=a("strong"),uso=o("yoso"),bso=o(" \u2014 "),iB=a("a"),vso=o("YosoConfig"),Fso=o(" (YOSO model)"),Tso=l(),F(eh.$$.fragment),Mso=l(),oh=a("div"),F(v6.$$.fragment),Eso=l(),fle=a("p"),Cso=o("Register a new configuration for this class."),qXe=l(),ji=a("h2"),rh=a("a"),mle=a("span"),F(F6.$$.fragment),wso=l(),gle=a("span"),Aso=o("AutoTokenizer"),jXe=l(),Lo=a("div"),F(T6.$$.fragment),Lso=l(),M6=a("p"),yso=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),dB=a("a"),xso=o("AutoTokenizer.from_pretrained()"),$so=o(" class method."),kso=l(),E6=a("p"),Sso=o("This class cannot be instantiated directly using "),hle=a("code"),Rso=o("__init__()"),Pso=o(" (throws an error)."),Bso=l(),yr=a("div"),F(C6.$$.fragment),Iso=l(),ple=a("p"),Nso=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),qso=l(),Pa=a("p"),jso=o("The tokenizer class to instantiate is selected based on the "),_le=a("code"),Dso=o("model_type"),Gso=o(` property of the config object (either
passed as an argument or loaded from `),ule=a("code"),Oso=o("pretrained_model_name_or_path"),Vso=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ble=a("code"),Xso=o("pretrained_model_name_or_path"),zso=o(":"),Wso=l(),k=a("ul"),jn=a("li"),vle=a("strong"),Qso=o("albert"),Hso=o(" \u2014 "),cB=a("a"),Uso=o("AlbertTokenizer"),Jso=o(" or "),fB=a("a"),Yso=o("AlbertTokenizerFast"),Kso=o(" (ALBERT model)"),Zso=l(),Dn=a("li"),Fle=a("strong"),elo=o("bart"),olo=o(" \u2014 "),mB=a("a"),rlo=o("BartTokenizer"),tlo=o(" or "),gB=a("a"),alo=o("BartTokenizerFast"),nlo=o(" (BART model)"),slo=l(),Gn=a("li"),Tle=a("strong"),llo=o("barthez"),ilo=o(" \u2014 "),hB=a("a"),dlo=o("BarthezTokenizer"),clo=o(" or "),pB=a("a"),flo=o("BarthezTokenizerFast"),mlo=o(" (BARThez model)"),glo=l(),th=a("li"),Mle=a("strong"),hlo=o("bartpho"),plo=o(" \u2014 "),_B=a("a"),_lo=o("BartphoTokenizer"),ulo=o(" (BARTpho model)"),blo=l(),On=a("li"),Ele=a("strong"),vlo=o("bert"),Flo=o(" \u2014 "),uB=a("a"),Tlo=o("BertTokenizer"),Mlo=o(" or "),bB=a("a"),Elo=o("BertTokenizerFast"),Clo=o(" (BERT model)"),wlo=l(),ah=a("li"),Cle=a("strong"),Alo=o("bert-generation"),Llo=o(" \u2014 "),vB=a("a"),ylo=o("BertGenerationTokenizer"),xlo=o(" (Bert Generation model)"),$lo=l(),nh=a("li"),wle=a("strong"),klo=o("bert-japanese"),Slo=o(" \u2014 "),FB=a("a"),Rlo=o("BertJapaneseTokenizer"),Plo=o(" (BertJapanese model)"),Blo=l(),sh=a("li"),Ale=a("strong"),Ilo=o("bertweet"),Nlo=o(" \u2014 "),TB=a("a"),qlo=o("BertweetTokenizer"),jlo=o(" (BERTweet model)"),Dlo=l(),Vn=a("li"),Lle=a("strong"),Glo=o("big_bird"),Olo=o(" \u2014 "),MB=a("a"),Vlo=o("BigBirdTokenizer"),Xlo=o(" or "),EB=a("a"),zlo=o("BigBirdTokenizerFast"),Wlo=o(" (BigBird model)"),Qlo=l(),Xn=a("li"),yle=a("strong"),Hlo=o("bigbird_pegasus"),Ulo=o(" \u2014 "),CB=a("a"),Jlo=o("PegasusTokenizer"),Ylo=o(" or "),wB=a("a"),Klo=o("PegasusTokenizerFast"),Zlo=o(" (BigBird-Pegasus model)"),eio=l(),zn=a("li"),xle=a("strong"),oio=o("blenderbot"),rio=o(" \u2014 "),AB=a("a"),tio=o("BlenderbotTokenizer"),aio=o(" or "),LB=a("a"),nio=o("BlenderbotTokenizerFast"),sio=o(" (Blenderbot model)"),lio=l(),lh=a("li"),$le=a("strong"),iio=o("blenderbot-small"),dio=o(" \u2014 "),yB=a("a"),cio=o("BlenderbotSmallTokenizer"),fio=o(" (BlenderbotSmall model)"),mio=l(),ih=a("li"),kle=a("strong"),gio=o("bloom"),hio=o(" \u2014 "),xB=a("a"),pio=o("BloomTokenizerFast"),_io=o(" (BLOOM model)"),uio=l(),dh=a("li"),Sle=a("strong"),bio=o("byt5"),vio=o(" \u2014 "),$B=a("a"),Fio=o("ByT5Tokenizer"),Tio=o(" (ByT5 model)"),Mio=l(),Wn=a("li"),Rle=a("strong"),Eio=o("camembert"),Cio=o(" \u2014 "),kB=a("a"),wio=o("CamembertTokenizer"),Aio=o(" or "),SB=a("a"),Lio=o("CamembertTokenizerFast"),yio=o(" (CamemBERT model)"),xio=l(),ch=a("li"),Ple=a("strong"),$io=o("canine"),kio=o(" \u2014 "),RB=a("a"),Sio=o("CanineTokenizer"),Rio=o(" (CANINE model)"),Pio=l(),Qn=a("li"),Ble=a("strong"),Bio=o("clip"),Iio=o(" \u2014 "),PB=a("a"),Nio=o("CLIPTokenizer"),qio=o(" or "),BB=a("a"),jio=o("CLIPTokenizerFast"),Dio=o(" (CLIP model)"),Gio=l(),Hn=a("li"),Ile=a("strong"),Oio=o("codegen"),Vio=o(" \u2014 "),IB=a("a"),Xio=o("CodeGenTokenizer"),zio=o(" or "),NB=a("a"),Wio=o("CodeGenTokenizerFast"),Qio=o(" (CodeGen model)"),Hio=l(),Un=a("li"),Nle=a("strong"),Uio=o("convbert"),Jio=o(" \u2014 "),qB=a("a"),Yio=o("ConvBertTokenizer"),Kio=o(" or "),jB=a("a"),Zio=o("ConvBertTokenizerFast"),edo=o(" (ConvBERT model)"),odo=l(),Jn=a("li"),qle=a("strong"),rdo=o("cpm"),tdo=o(" \u2014 "),DB=a("a"),ado=o("CpmTokenizer"),ndo=o(" or "),GB=a("a"),sdo=o("CpmTokenizerFast"),ldo=o(" (CPM model)"),ido=l(),fh=a("li"),jle=a("strong"),ddo=o("ctrl"),cdo=o(" \u2014 "),OB=a("a"),fdo=o("CTRLTokenizer"),mdo=o(" (CTRL model)"),gdo=l(),Yn=a("li"),Dle=a("strong"),hdo=o("data2vec-text"),pdo=o(" \u2014 "),VB=a("a"),_do=o("RobertaTokenizer"),udo=o(" or "),XB=a("a"),bdo=o("RobertaTokenizerFast"),vdo=o(" (Data2VecText model)"),Fdo=l(),Kn=a("li"),Gle=a("strong"),Tdo=o("deberta"),Mdo=o(" \u2014 "),zB=a("a"),Edo=o("DebertaTokenizer"),Cdo=o(" or "),WB=a("a"),wdo=o("DebertaTokenizerFast"),Ado=o(" (DeBERTa model)"),Ldo=l(),Zn=a("li"),Ole=a("strong"),ydo=o("deberta-v2"),xdo=o(" \u2014 "),QB=a("a"),$do=o("DebertaV2Tokenizer"),kdo=o(" or "),HB=a("a"),Sdo=o("DebertaV2TokenizerFast"),Rdo=o(" (DeBERTa-v2 model)"),Pdo=l(),es=a("li"),Vle=a("strong"),Bdo=o("distilbert"),Ido=o(" \u2014 "),UB=a("a"),Ndo=o("DistilBertTokenizer"),qdo=o(" or "),JB=a("a"),jdo=o("DistilBertTokenizerFast"),Ddo=o(" (DistilBERT model)"),Gdo=l(),os=a("li"),Xle=a("strong"),Odo=o("dpr"),Vdo=o(" \u2014 "),YB=a("a"),Xdo=o("DPRQuestionEncoderTokenizer"),zdo=o(" or "),KB=a("a"),Wdo=o("DPRQuestionEncoderTokenizerFast"),Qdo=o(" (DPR model)"),Hdo=l(),rs=a("li"),zle=a("strong"),Udo=o("electra"),Jdo=o(" \u2014 "),ZB=a("a"),Ydo=o("ElectraTokenizer"),Kdo=o(" or "),eI=a("a"),Zdo=o("ElectraTokenizerFast"),eco=o(" (ELECTRA model)"),oco=l(),mh=a("li"),Wle=a("strong"),rco=o("flaubert"),tco=o(" \u2014 "),oI=a("a"),aco=o("FlaubertTokenizer"),nco=o(" (FlauBERT model)"),sco=l(),ts=a("li"),Qle=a("strong"),lco=o("fnet"),ico=o(" \u2014 "),rI=a("a"),dco=o("FNetTokenizer"),cco=o(" or "),tI=a("a"),fco=o("FNetTokenizerFast"),mco=o(" (FNet model)"),gco=l(),gh=a("li"),Hle=a("strong"),hco=o("fsmt"),pco=o(" \u2014 "),aI=a("a"),_co=o("FSMTTokenizer"),uco=o(" (FairSeq Machine-Translation model)"),bco=l(),as=a("li"),Ule=a("strong"),vco=o("funnel"),Fco=o(" \u2014 "),nI=a("a"),Tco=o("FunnelTokenizer"),Mco=o(" or "),sI=a("a"),Eco=o("FunnelTokenizerFast"),Cco=o(" (Funnel Transformer model)"),wco=l(),ns=a("li"),Jle=a("strong"),Aco=o("gpt2"),Lco=o(" \u2014 "),lI=a("a"),yco=o("GPT2Tokenizer"),xco=o(" or "),iI=a("a"),$co=o("GPT2TokenizerFast"),kco=o(" (OpenAI GPT-2 model)"),Sco=l(),ss=a("li"),Yle=a("strong"),Rco=o("gpt_neo"),Pco=o(" \u2014 "),dI=a("a"),Bco=o("GPT2Tokenizer"),Ico=o(" or "),cI=a("a"),Nco=o("GPT2TokenizerFast"),qco=o(" (GPT Neo model)"),jco=l(),hh=a("li"),Kle=a("strong"),Dco=o("gpt_neox"),Gco=o(" \u2014 "),fI=a("a"),Oco=o("GPTNeoXTokenizerFast"),Vco=o(" (GPT NeoX model)"),Xco=l(),ls=a("li"),Zle=a("strong"),zco=o("gptj"),Wco=o(" \u2014 "),mI=a("a"),Qco=o("GPT2Tokenizer"),Hco=o(" or "),gI=a("a"),Uco=o("GPT2TokenizerFast"),Jco=o(" (GPT-J model)"),Yco=l(),is=a("li"),eie=a("strong"),Kco=o("groupvit"),Zco=o(" \u2014 "),hI=a("a"),efo=o("CLIPTokenizer"),ofo=o(" or "),pI=a("a"),rfo=o("CLIPTokenizerFast"),tfo=o(" (GroupViT model)"),afo=l(),ds=a("li"),oie=a("strong"),nfo=o("herbert"),sfo=o(" \u2014 "),_I=a("a"),lfo=o("HerbertTokenizer"),ifo=o(" or "),uI=a("a"),dfo=o("HerbertTokenizerFast"),cfo=o(" (HerBERT model)"),ffo=l(),ph=a("li"),rie=a("strong"),mfo=o("hubert"),gfo=o(" \u2014 "),bI=a("a"),hfo=o("Wav2Vec2CTCTokenizer"),pfo=o(" (Hubert model)"),_fo=l(),cs=a("li"),tie=a("strong"),ufo=o("ibert"),bfo=o(" \u2014 "),vI=a("a"),vfo=o("RobertaTokenizer"),Ffo=o(" or "),FI=a("a"),Tfo=o("RobertaTokenizerFast"),Mfo=o(" (I-BERT model)"),Efo=l(),fs=a("li"),aie=a("strong"),Cfo=o("layoutlm"),wfo=o(" \u2014 "),TI=a("a"),Afo=o("LayoutLMTokenizer"),Lfo=o(" or "),MI=a("a"),yfo=o("LayoutLMTokenizerFast"),xfo=o(" (LayoutLM model)"),$fo=l(),ms=a("li"),nie=a("strong"),kfo=o("layoutlmv2"),Sfo=o(" \u2014 "),EI=a("a"),Rfo=o("LayoutLMv2Tokenizer"),Pfo=o(" or "),CI=a("a"),Bfo=o("LayoutLMv2TokenizerFast"),Ifo=o(" (LayoutLMv2 model)"),Nfo=l(),gs=a("li"),sie=a("strong"),qfo=o("layoutlmv3"),jfo=o(" \u2014 "),wI=a("a"),Dfo=o("LayoutLMv3Tokenizer"),Gfo=o(" or "),AI=a("a"),Ofo=o("LayoutLMv3TokenizerFast"),Vfo=o(" (LayoutLMv3 model)"),Xfo=l(),hs=a("li"),lie=a("strong"),zfo=o("layoutxlm"),Wfo=o(" \u2014 "),LI=a("a"),Qfo=o("LayoutXLMTokenizer"),Hfo=o(" or "),yI=a("a"),Ufo=o("LayoutXLMTokenizerFast"),Jfo=o(" (LayoutXLM model)"),Yfo=l(),ps=a("li"),iie=a("strong"),Kfo=o("led"),Zfo=o(" \u2014 "),xI=a("a"),emo=o("LEDTokenizer"),omo=o(" or "),$I=a("a"),rmo=o("LEDTokenizerFast"),tmo=o(" (LED model)"),amo=l(),_s=a("li"),die=a("strong"),nmo=o("longformer"),smo=o(" \u2014 "),kI=a("a"),lmo=o("LongformerTokenizer"),imo=o(" or "),SI=a("a"),dmo=o("LongformerTokenizerFast"),cmo=o(" (Longformer model)"),fmo=l(),us=a("li"),cie=a("strong"),mmo=o("longt5"),gmo=o(" \u2014 "),RI=a("a"),hmo=o("T5Tokenizer"),pmo=o(" or "),PI=a("a"),_mo=o("T5TokenizerFast"),umo=o(" (LongT5 model)"),bmo=l(),_h=a("li"),fie=a("strong"),vmo=o("luke"),Fmo=o(" \u2014 "),BI=a("a"),Tmo=o("LukeTokenizer"),Mmo=o(" (LUKE model)"),Emo=l(),bs=a("li"),mie=a("strong"),Cmo=o("lxmert"),wmo=o(" \u2014 "),II=a("a"),Amo=o("LxmertTokenizer"),Lmo=o(" or "),NI=a("a"),ymo=o("LxmertTokenizerFast"),xmo=o(" (LXMERT model)"),$mo=l(),uh=a("li"),gie=a("strong"),kmo=o("m2m_100"),Smo=o(" \u2014 "),qI=a("a"),Rmo=o("M2M100Tokenizer"),Pmo=o(" (M2M100 model)"),Bmo=l(),bh=a("li"),hie=a("strong"),Imo=o("marian"),Nmo=o(" \u2014 "),jI=a("a"),qmo=o("MarianTokenizer"),jmo=o(" (Marian model)"),Dmo=l(),vs=a("li"),pie=a("strong"),Gmo=o("mbart"),Omo=o(" \u2014 "),DI=a("a"),Vmo=o("MBartTokenizer"),Xmo=o(" or "),GI=a("a"),zmo=o("MBartTokenizerFast"),Wmo=o(" (mBART model)"),Qmo=l(),Fs=a("li"),_ie=a("strong"),Hmo=o("mbart50"),Umo=o(" \u2014 "),OI=a("a"),Jmo=o("MBart50Tokenizer"),Ymo=o(" or "),VI=a("a"),Kmo=o("MBart50TokenizerFast"),Zmo=o(" (mBART-50 model)"),ego=l(),Ts=a("li"),uie=a("strong"),ogo=o("megatron-bert"),rgo=o(" \u2014 "),XI=a("a"),tgo=o("BertTokenizer"),ago=o(" or "),zI=a("a"),ngo=o("BertTokenizerFast"),sgo=o(" (Megatron-BERT model)"),lgo=l(),vh=a("li"),bie=a("strong"),igo=o("mluke"),dgo=o(" \u2014 "),WI=a("a"),cgo=o("MLukeTokenizer"),fgo=o(" (mLUKE model)"),mgo=l(),Ms=a("li"),vie=a("strong"),ggo=o("mobilebert"),hgo=o(" \u2014 "),QI=a("a"),pgo=o("MobileBertTokenizer"),_go=o(" or "),HI=a("a"),ugo=o("MobileBertTokenizerFast"),bgo=o(" (MobileBERT model)"),vgo=l(),Es=a("li"),Fie=a("strong"),Fgo=o("mpnet"),Tgo=o(" \u2014 "),UI=a("a"),Mgo=o("MPNetTokenizer"),Ego=o(" or "),JI=a("a"),Cgo=o("MPNetTokenizerFast"),wgo=o(" (MPNet model)"),Ago=l(),Cs=a("li"),Tie=a("strong"),Lgo=o("mt5"),ygo=o(" \u2014 "),YI=a("a"),xgo=o("MT5Tokenizer"),$go=o(" or "),KI=a("a"),kgo=o("MT5TokenizerFast"),Sgo=o(" (MT5 model)"),Rgo=l(),ws=a("li"),Mie=a("strong"),Pgo=o("mvp"),Bgo=o(" \u2014 "),ZI=a("a"),Igo=o("MvpTokenizer"),Ngo=o(" or "),eN=a("a"),qgo=o("MvpTokenizerFast"),jgo=o(" (MVP model)"),Dgo=l(),As=a("li"),Eie=a("strong"),Ggo=o("nezha"),Ogo=o(" \u2014 "),oN=a("a"),Vgo=o("BertTokenizer"),Xgo=o(" or "),rN=a("a"),zgo=o("BertTokenizerFast"),Wgo=o(" (Nezha model)"),Qgo=l(),Ls=a("li"),Cie=a("strong"),Hgo=o("nllb"),Ugo=o(" \u2014 "),tN=a("a"),Jgo=o("NllbTokenizer"),Ygo=o(" or "),aN=a("a"),Kgo=o("NllbTokenizerFast"),Zgo=o(" (NLLB model)"),eho=l(),ys=a("li"),wie=a("strong"),oho=o("nystromformer"),rho=o(" \u2014 "),nN=a("a"),tho=o("AlbertTokenizer"),aho=o(" or "),sN=a("a"),nho=o("AlbertTokenizerFast"),sho=o(" (Nystr\xF6mformer model)"),lho=l(),xs=a("li"),Aie=a("strong"),iho=o("openai-gpt"),dho=o(" \u2014 "),lN=a("a"),cho=o("OpenAIGPTTokenizer"),fho=o(" or "),iN=a("a"),mho=o("OpenAIGPTTokenizerFast"),gho=o(" (OpenAI GPT model)"),hho=l(),Fh=a("li"),Lie=a("strong"),pho=o("opt"),_ho=o(" \u2014 "),dN=a("a"),uho=o("GPT2Tokenizer"),bho=o(" (OPT model)"),vho=l(),$s=a("li"),yie=a("strong"),Fho=o("owlvit"),Tho=o(" \u2014 "),cN=a("a"),Mho=o("CLIPTokenizer"),Eho=o(" or "),fN=a("a"),Cho=o("CLIPTokenizerFast"),who=o(" (OWL-ViT model)"),Aho=l(),ks=a("li"),xie=a("strong"),Lho=o("pegasus"),yho=o(" \u2014 "),mN=a("a"),xho=o("PegasusTokenizer"),$ho=o(" or "),gN=a("a"),kho=o("PegasusTokenizerFast"),Sho=o(" (Pegasus model)"),Rho=l(),Th=a("li"),$ie=a("strong"),Pho=o("perceiver"),Bho=o(" \u2014 "),hN=a("a"),Iho=o("PerceiverTokenizer"),Nho=o(" (Perceiver model)"),qho=l(),Mh=a("li"),kie=a("strong"),jho=o("phobert"),Dho=o(" \u2014 "),pN=a("a"),Gho=o("PhobertTokenizer"),Oho=o(" (PhoBERT model)"),Vho=l(),Eh=a("li"),Sie=a("strong"),Xho=o("plbart"),zho=o(" \u2014 "),_N=a("a"),Who=o("PLBartTokenizer"),Qho=o(" (PLBart model)"),Hho=l(),Ch=a("li"),Rie=a("strong"),Uho=o("prophetnet"),Jho=o(" \u2014 "),uN=a("a"),Yho=o("ProphetNetTokenizer"),Kho=o(" (ProphetNet model)"),Zho=l(),Ss=a("li"),Pie=a("strong"),epo=o("qdqbert"),opo=o(" \u2014 "),bN=a("a"),rpo=o("BertTokenizer"),tpo=o(" or "),vN=a("a"),apo=o("BertTokenizerFast"),npo=o(" (QDQBert model)"),spo=l(),wh=a("li"),Bie=a("strong"),lpo=o("rag"),ipo=o(" \u2014 "),FN=a("a"),dpo=o("RagTokenizer"),cpo=o(" (RAG model)"),fpo=l(),Rs=a("li"),Iie=a("strong"),mpo=o("realm"),gpo=o(" \u2014 "),TN=a("a"),hpo=o("RealmTokenizer"),ppo=o(" or "),MN=a("a"),_po=o("RealmTokenizerFast"),upo=o(" (REALM model)"),bpo=l(),Ps=a("li"),Nie=a("strong"),vpo=o("reformer"),Fpo=o(" \u2014 "),EN=a("a"),Tpo=o("ReformerTokenizer"),Mpo=o(" or "),CN=a("a"),Epo=o("ReformerTokenizerFast"),Cpo=o(" (Reformer model)"),wpo=l(),Bs=a("li"),qie=a("strong"),Apo=o("rembert"),Lpo=o(" \u2014 "),wN=a("a"),ypo=o("RemBertTokenizer"),xpo=o(" or "),AN=a("a"),$po=o("RemBertTokenizerFast"),kpo=o(" (RemBERT model)"),Spo=l(),Is=a("li"),jie=a("strong"),Rpo=o("retribert"),Ppo=o(" \u2014 "),LN=a("a"),Bpo=o("RetriBertTokenizer"),Ipo=o(" or "),yN=a("a"),Npo=o("RetriBertTokenizerFast"),qpo=o(" (RetriBERT model)"),jpo=l(),Ns=a("li"),Die=a("strong"),Dpo=o("roberta"),Gpo=o(" \u2014 "),xN=a("a"),Opo=o("RobertaTokenizer"),Vpo=o(" or "),$N=a("a"),Xpo=o("RobertaTokenizerFast"),zpo=o(" (RoBERTa model)"),Wpo=l(),qs=a("li"),Gie=a("strong"),Qpo=o("roformer"),Hpo=o(" \u2014 "),kN=a("a"),Upo=o("RoFormerTokenizer"),Jpo=o(" or "),SN=a("a"),Ypo=o("RoFormerTokenizerFast"),Kpo=o(" (RoFormer model)"),Zpo=l(),Ah=a("li"),Oie=a("strong"),e_o=o("speech_to_text"),o_o=o(" \u2014 "),RN=a("a"),r_o=o("Speech2TextTokenizer"),t_o=o(" (Speech2Text model)"),a_o=l(),Lh=a("li"),Vie=a("strong"),n_o=o("speech_to_text_2"),s_o=o(" \u2014 "),PN=a("a"),l_o=o("Speech2Text2Tokenizer"),i_o=o(" (Speech2Text2 model)"),d_o=l(),js=a("li"),Xie=a("strong"),c_o=o("splinter"),f_o=o(" \u2014 "),BN=a("a"),m_o=o("SplinterTokenizer"),g_o=o(" or "),IN=a("a"),h_o=o("SplinterTokenizerFast"),p_o=o(" (Splinter model)"),__o=l(),Ds=a("li"),zie=a("strong"),u_o=o("squeezebert"),b_o=o(" \u2014 "),NN=a("a"),v_o=o("SqueezeBertTokenizer"),F_o=o(" or "),qN=a("a"),T_o=o("SqueezeBertTokenizerFast"),M_o=o(" (SqueezeBERT model)"),E_o=l(),Gs=a("li"),Wie=a("strong"),C_o=o("t5"),w_o=o(" \u2014 "),jN=a("a"),A_o=o("T5Tokenizer"),L_o=o(" or "),DN=a("a"),y_o=o("T5TokenizerFast"),x_o=o(" (T5 model)"),$_o=l(),yh=a("li"),Qie=a("strong"),k_o=o("tapas"),S_o=o(" \u2014 "),GN=a("a"),R_o=o("TapasTokenizer"),P_o=o(" (TAPAS model)"),B_o=l(),xh=a("li"),Hie=a("strong"),I_o=o("tapex"),N_o=o(" \u2014 "),ON=a("a"),q_o=o("TapexTokenizer"),j_o=o(" (TAPEX model)"),D_o=l(),$h=a("li"),Uie=a("strong"),G_o=o("transfo-xl"),O_o=o(" \u2014 "),VN=a("a"),V_o=o("TransfoXLTokenizer"),X_o=o(" (Transformer-XL model)"),z_o=l(),Os=a("li"),Jie=a("strong"),W_o=o("vilt"),Q_o=o(" \u2014 "),XN=a("a"),H_o=o("BertTokenizer"),U_o=o(" or "),zN=a("a"),J_o=o("BertTokenizerFast"),Y_o=o(" (ViLT model)"),K_o=l(),Vs=a("li"),Yie=a("strong"),Z_o=o("visual_bert"),euo=o(" \u2014 "),WN=a("a"),ouo=o("BertTokenizer"),ruo=o(" or "),QN=a("a"),tuo=o("BertTokenizerFast"),auo=o(" (VisualBERT model)"),nuo=l(),kh=a("li"),Kie=a("strong"),suo=o("wav2vec2"),luo=o(" \u2014 "),HN=a("a"),iuo=o("Wav2Vec2CTCTokenizer"),duo=o(" (Wav2Vec2 model)"),cuo=l(),Sh=a("li"),Zie=a("strong"),fuo=o("wav2vec2-conformer"),muo=o(" \u2014 "),UN=a("a"),guo=o("Wav2Vec2CTCTokenizer"),huo=o(" (Wav2Vec2-Conformer model)"),puo=l(),Rh=a("li"),ede=a("strong"),_uo=o("wav2vec2_phoneme"),uuo=o(" \u2014 "),JN=a("a"),buo=o("Wav2Vec2PhonemeCTCTokenizer"),vuo=o(" (Wav2Vec2Phoneme model)"),Fuo=l(),Xs=a("li"),ode=a("strong"),Tuo=o("xglm"),Muo=o(" \u2014 "),YN=a("a"),Euo=o("XGLMTokenizer"),Cuo=o(" or "),KN=a("a"),wuo=o("XGLMTokenizerFast"),Auo=o(" (XGLM model)"),Luo=l(),Ph=a("li"),rde=a("strong"),yuo=o("xlm"),xuo=o(" \u2014 "),ZN=a("a"),$uo=o("XLMTokenizer"),kuo=o(" (XLM model)"),Suo=l(),Bh=a("li"),tde=a("strong"),Ruo=o("xlm-prophetnet"),Puo=o(" \u2014 "),eq=a("a"),Buo=o("XLMProphetNetTokenizer"),Iuo=o(" (XLM-ProphetNet model)"),Nuo=l(),zs=a("li"),ade=a("strong"),quo=o("xlm-roberta"),juo=o(" \u2014 "),oq=a("a"),Duo=o("XLMRobertaTokenizer"),Guo=o(" or "),rq=a("a"),Ouo=o("XLMRobertaTokenizerFast"),Vuo=o(" (XLM-RoBERTa model)"),Xuo=l(),Ws=a("li"),nde=a("strong"),zuo=o("xlm-roberta-xl"),Wuo=o(" \u2014 "),tq=a("a"),Quo=o("RobertaTokenizer"),Huo=o(" or "),aq=a("a"),Uuo=o("RobertaTokenizerFast"),Juo=o(" (XLM-RoBERTa-XL model)"),Yuo=l(),Qs=a("li"),sde=a("strong"),Kuo=o("xlnet"),Zuo=o(" \u2014 "),nq=a("a"),e1o=o("XLNetTokenizer"),o1o=o(" or "),sq=a("a"),r1o=o("XLNetTokenizerFast"),t1o=o(" (XLNet model)"),a1o=l(),Hs=a("li"),lde=a("strong"),n1o=o("yoso"),s1o=o(" \u2014 "),lq=a("a"),l1o=o("AlbertTokenizer"),i1o=o(" or "),iq=a("a"),d1o=o("AlbertTokenizerFast"),c1o=o(" (YOSO model)"),f1o=l(),F(Ih.$$.fragment),m1o=l(),Nh=a("div"),F(w6.$$.fragment),g1o=l(),ide=a("p"),h1o=o("Register a new tokenizer in this mapping."),DXe=l(),Di=a("h2"),qh=a("a"),dde=a("span"),F(A6.$$.fragment),p1o=l(),cde=a("span"),_1o=o("AutoFeatureExtractor"),GXe=l(),yo=a("div"),F(L6.$$.fragment),u1o=l(),y6=a("p"),b1o=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),dq=a("a"),v1o=o("AutoFeatureExtractor.from_pretrained()"),F1o=o(" class method."),T1o=l(),x6=a("p"),M1o=o("This class cannot be instantiated directly using "),fde=a("code"),E1o=o("__init__()"),C1o=o(" (throws an error)."),w1o=l(),Ue=a("div"),F($6.$$.fragment),A1o=l(),mde=a("p"),L1o=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),y1o=l(),Ba=a("p"),x1o=o("The feature extractor class to instantiate is selected based on the "),gde=a("code"),$1o=o("model_type"),k1o=o(` property of the config object
(either passed as an argument or loaded from `),hde=a("code"),S1o=o("pretrained_model_name_or_path"),R1o=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),pde=a("code"),P1o=o("pretrained_model_name_or_path"),B1o=o(":"),I1o=l(),J=a("ul"),jh=a("li"),_de=a("strong"),N1o=o("beit"),q1o=o(" \u2014 "),cq=a("a"),j1o=o("BeitFeatureExtractor"),D1o=o(" (BEiT model)"),G1o=l(),Dh=a("li"),ude=a("strong"),O1o=o("clip"),V1o=o(" \u2014 "),fq=a("a"),X1o=o("CLIPFeatureExtractor"),z1o=o(" (CLIP model)"),W1o=l(),Gh=a("li"),bde=a("strong"),Q1o=o("convnext"),H1o=o(" \u2014 "),mq=a("a"),U1o=o("ConvNextFeatureExtractor"),J1o=o(" (ConvNeXT model)"),Y1o=l(),Oh=a("li"),vde=a("strong"),K1o=o("cvt"),Z1o=o(" \u2014 "),gq=a("a"),e2o=o("ConvNextFeatureExtractor"),o2o=o(" (CvT model)"),r2o=l(),Vh=a("li"),Fde=a("strong"),t2o=o("data2vec-audio"),a2o=o(" \u2014 "),hq=a("a"),n2o=o("Wav2Vec2FeatureExtractor"),s2o=o(" (Data2VecAudio model)"),l2o=l(),Xh=a("li"),Tde=a("strong"),i2o=o("data2vec-vision"),d2o=o(" \u2014 "),pq=a("a"),c2o=o("BeitFeatureExtractor"),f2o=o(" (Data2VecVision model)"),m2o=l(),zh=a("li"),Mde=a("strong"),g2o=o("deit"),h2o=o(" \u2014 "),_q=a("a"),p2o=o("DeiTFeatureExtractor"),_2o=o(" (DeiT model)"),u2o=l(),Wh=a("li"),Ede=a("strong"),b2o=o("detr"),v2o=o(" \u2014 "),uq=a("a"),F2o=o("DetrFeatureExtractor"),T2o=o(" (DETR model)"),M2o=l(),Qh=a("li"),Cde=a("strong"),E2o=o("dpt"),C2o=o(" \u2014 "),bq=a("a"),w2o=o("DPTFeatureExtractor"),A2o=o(" (DPT model)"),L2o=l(),Hh=a("li"),wde=a("strong"),y2o=o("flava"),x2o=o(" \u2014 "),vq=a("a"),$2o=o("FlavaFeatureExtractor"),k2o=o(" (FLAVA model)"),S2o=l(),Uh=a("li"),Ade=a("strong"),R2o=o("glpn"),P2o=o(" \u2014 "),Fq=a("a"),B2o=o("GLPNFeatureExtractor"),I2o=o(" (GLPN model)"),N2o=l(),Jh=a("li"),Lde=a("strong"),q2o=o("groupvit"),j2o=o(" \u2014 "),Tq=a("a"),D2o=o("CLIPFeatureExtractor"),G2o=o(" (GroupViT model)"),O2o=l(),Yh=a("li"),yde=a("strong"),V2o=o("hubert"),X2o=o(" \u2014 "),Mq=a("a"),z2o=o("Wav2Vec2FeatureExtractor"),W2o=o(" (Hubert model)"),Q2o=l(),Kh=a("li"),xde=a("strong"),H2o=o("imagegpt"),U2o=o(" \u2014 "),Eq=a("a"),J2o=o("ImageGPTFeatureExtractor"),Y2o=o(" (ImageGPT model)"),K2o=l(),Zh=a("li"),$de=a("strong"),Z2o=o("layoutlmv2"),ebo=o(" \u2014 "),Cq=a("a"),obo=o("LayoutLMv2FeatureExtractor"),rbo=o(" (LayoutLMv2 model)"),tbo=l(),ep=a("li"),kde=a("strong"),abo=o("layoutlmv3"),nbo=o(" \u2014 "),wq=a("a"),sbo=o("LayoutLMv3FeatureExtractor"),lbo=o(" (LayoutLMv3 model)"),ibo=l(),op=a("li"),Sde=a("strong"),dbo=o("levit"),cbo=o(" \u2014 "),Aq=a("a"),fbo=o("LevitFeatureExtractor"),mbo=o(" (LeViT model)"),gbo=l(),rp=a("li"),Rde=a("strong"),hbo=o("maskformer"),pbo=o(" \u2014 "),Lq=a("a"),_bo=o("MaskFormerFeatureExtractor"),ubo=o(" (MaskFormer model)"),bbo=l(),tp=a("li"),Pde=a("strong"),vbo=o("mctct"),Fbo=o(" \u2014 "),yq=a("a"),Tbo=o("MCTCTFeatureExtractor"),Mbo=o(" (M-CTC-T model)"),Ebo=l(),ap=a("li"),Bde=a("strong"),Cbo=o("mobilevit"),wbo=o(" \u2014 "),xq=a("a"),Abo=o("MobileViTFeatureExtractor"),Lbo=o(" (MobileViT model)"),ybo=l(),np=a("li"),Ide=a("strong"),xbo=o("owlvit"),$bo=o(" \u2014 "),$q=a("a"),kbo=o("OwlViTFeatureExtractor"),Sbo=o(" (OWL-ViT model)"),Rbo=l(),sp=a("li"),Nde=a("strong"),Pbo=o("perceiver"),Bbo=o(" \u2014 "),kq=a("a"),Ibo=o("PerceiverFeatureExtractor"),Nbo=o(" (Perceiver model)"),qbo=l(),lp=a("li"),qde=a("strong"),jbo=o("poolformer"),Dbo=o(" \u2014 "),Sq=a("a"),Gbo=o("PoolFormerFeatureExtractor"),Obo=o(" (PoolFormer model)"),Vbo=l(),ip=a("li"),jde=a("strong"),Xbo=o("regnet"),zbo=o(" \u2014 "),Rq=a("a"),Wbo=o("ConvNextFeatureExtractor"),Qbo=o(" (RegNet model)"),Hbo=l(),dp=a("li"),Dde=a("strong"),Ubo=o("resnet"),Jbo=o(" \u2014 "),Pq=a("a"),Ybo=o("ConvNextFeatureExtractor"),Kbo=o(" (ResNet model)"),Zbo=l(),cp=a("li"),Gde=a("strong"),e3o=o("segformer"),o3o=o(" \u2014 "),Bq=a("a"),r3o=o("SegformerFeatureExtractor"),t3o=o(" (SegFormer model)"),a3o=l(),fp=a("li"),Ode=a("strong"),n3o=o("speech_to_text"),s3o=o(" \u2014 "),Iq=a("a"),l3o=o("Speech2TextFeatureExtractor"),i3o=o(" (Speech2Text model)"),d3o=l(),mp=a("li"),Vde=a("strong"),c3o=o("swin"),f3o=o(" \u2014 "),Nq=a("a"),m3o=o("ViTFeatureExtractor"),g3o=o(" (Swin Transformer model)"),h3o=l(),gp=a("li"),Xde=a("strong"),p3o=o("van"),_3o=o(" \u2014 "),qq=a("a"),u3o=o("ConvNextFeatureExtractor"),b3o=o(" (VAN model)"),v3o=l(),hp=a("li"),zde=a("strong"),F3o=o("vilt"),T3o=o(" \u2014 "),jq=a("a"),M3o=o("ViltFeatureExtractor"),E3o=o(" (ViLT model)"),C3o=l(),pp=a("li"),Wde=a("strong"),w3o=o("vit"),A3o=o(" \u2014 "),Dq=a("a"),L3o=o("ViTFeatureExtractor"),y3o=o(" (ViT model)"),x3o=l(),_p=a("li"),Qde=a("strong"),$3o=o("vit_mae"),k3o=o(" \u2014 "),Gq=a("a"),S3o=o("ViTFeatureExtractor"),R3o=o(" (ViTMAE model)"),P3o=l(),up=a("li"),Hde=a("strong"),B3o=o("wav2vec2"),I3o=o(" \u2014 "),Oq=a("a"),N3o=o("Wav2Vec2FeatureExtractor"),q3o=o(" (Wav2Vec2 model)"),j3o=l(),bp=a("li"),Ude=a("strong"),D3o=o("wav2vec2-conformer"),G3o=o(" \u2014 "),Vq=a("a"),O3o=o("Wav2Vec2FeatureExtractor"),V3o=o(" (Wav2Vec2-Conformer model)"),X3o=l(),vp=a("li"),Jde=a("strong"),z3o=o("yolos"),W3o=o(" \u2014 "),Xq=a("a"),Q3o=o("YolosFeatureExtractor"),H3o=o(" (YOLOS model)"),U3o=l(),F(Fp.$$.fragment),J3o=l(),F(Tp.$$.fragment),Y3o=l(),Mp=a("div"),F(k6.$$.fragment),K3o=l(),Yde=a("p"),Z3o=o("Register a new feature extractor for this class."),OXe=l(),Gi=a("h2"),Ep=a("a"),Kde=a("span"),F(S6.$$.fragment),evo=l(),Zde=a("span"),ovo=o("AutoProcessor"),VXe=l(),xo=a("div"),F(R6.$$.fragment),rvo=l(),P6=a("p"),tvo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),zq=a("a"),avo=o("AutoProcessor.from_pretrained()"),nvo=o(" class method."),svo=l(),B6=a("p"),lvo=o("This class cannot be instantiated directly using "),ece=a("code"),ivo=o("__init__()"),dvo=o(" (throws an error)."),cvo=l(),Je=a("div"),F(I6.$$.fragment),fvo=l(),oce=a("p"),mvo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),gvo=l(),Oi=a("p"),hvo=o("The processor class to instantiate is selected based on the "),rce=a("code"),pvo=o("model_type"),_vo=o(` property of the config object (either
passed as an argument or loaded from `),tce=a("code"),uvo=o("pretrained_model_name_or_path"),bvo=o(" if possible):"),vvo=l(),fe=a("ul"),Cp=a("li"),ace=a("strong"),Fvo=o("clip"),Tvo=o(" \u2014 "),Wq=a("a"),Mvo=o("CLIPProcessor"),Evo=o(" (CLIP model)"),Cvo=l(),wp=a("li"),nce=a("strong"),wvo=o("flava"),Avo=o(" \u2014 "),sce=a("code"),Lvo=o("FLAVAProcessor"),yvo=o(" (FLAVA model)"),xvo=l(),Ap=a("li"),lce=a("strong"),$vo=o("groupvit"),kvo=o(" \u2014 "),Qq=a("a"),Svo=o("CLIPProcessor"),Rvo=o(" (GroupViT model)"),Pvo=l(),Lp=a("li"),ice=a("strong"),Bvo=o("layoutlmv2"),Ivo=o(" \u2014 "),Hq=a("a"),Nvo=o("LayoutLMv2Processor"),qvo=o(" (LayoutLMv2 model)"),jvo=l(),yp=a("li"),dce=a("strong"),Dvo=o("layoutlmv3"),Gvo=o(" \u2014 "),Uq=a("a"),Ovo=o("LayoutLMv3Processor"),Vvo=o(" (LayoutLMv3 model)"),Xvo=l(),xp=a("li"),cce=a("strong"),zvo=o("layoutxlm"),Wvo=o(" \u2014 "),Jq=a("a"),Qvo=o("LayoutXLMProcessor"),Hvo=o(" (LayoutXLM model)"),Uvo=l(),$p=a("li"),fce=a("strong"),Jvo=o("owlvit"),Yvo=o(" \u2014 "),Yq=a("a"),Kvo=o("OwlViTProcessor"),Zvo=o(" (OWL-ViT model)"),eFo=l(),kp=a("li"),mce=a("strong"),oFo=o("sew"),rFo=o(" \u2014 "),Kq=a("a"),tFo=o("Wav2Vec2Processor"),aFo=o(" (SEW model)"),nFo=l(),Sp=a("li"),gce=a("strong"),sFo=o("sew-d"),lFo=o(" \u2014 "),Zq=a("a"),iFo=o("Wav2Vec2Processor"),dFo=o(" (SEW-D model)"),cFo=l(),Rp=a("li"),hce=a("strong"),fFo=o("speech_to_text"),mFo=o(" \u2014 "),ej=a("a"),gFo=o("Speech2TextProcessor"),hFo=o(" (Speech2Text model)"),pFo=l(),Pp=a("li"),pce=a("strong"),_Fo=o("speech_to_text_2"),uFo=o(" \u2014 "),oj=a("a"),bFo=o("Speech2Text2Processor"),vFo=o(" (Speech2Text2 model)"),FFo=l(),Bp=a("li"),_ce=a("strong"),TFo=o("trocr"),MFo=o(" \u2014 "),rj=a("a"),EFo=o("TrOCRProcessor"),CFo=o(" (TrOCR model)"),wFo=l(),Ip=a("li"),uce=a("strong"),AFo=o("unispeech"),LFo=o(" \u2014 "),tj=a("a"),yFo=o("Wav2Vec2Processor"),xFo=o(" (UniSpeech model)"),$Fo=l(),Np=a("li"),bce=a("strong"),kFo=o("unispeech-sat"),SFo=o(" \u2014 "),aj=a("a"),RFo=o("Wav2Vec2Processor"),PFo=o(" (UniSpeechSat model)"),BFo=l(),qp=a("li"),vce=a("strong"),IFo=o("vilt"),NFo=o(" \u2014 "),nj=a("a"),qFo=o("ViltProcessor"),jFo=o(" (ViLT model)"),DFo=l(),jp=a("li"),Fce=a("strong"),GFo=o("vision-text-dual-encoder"),OFo=o(" \u2014 "),sj=a("a"),VFo=o("VisionTextDualEncoderProcessor"),XFo=o(" (VisionTextDualEncoder model)"),zFo=l(),Dp=a("li"),Tce=a("strong"),WFo=o("wav2vec2"),QFo=o(" \u2014 "),lj=a("a"),HFo=o("Wav2Vec2Processor"),UFo=o(" (Wav2Vec2 model)"),JFo=l(),Gp=a("li"),Mce=a("strong"),YFo=o("wav2vec2-conformer"),KFo=o(" \u2014 "),ij=a("a"),ZFo=o("Wav2Vec2Processor"),eTo=o(" (Wav2Vec2-Conformer model)"),oTo=l(),Op=a("li"),Ece=a("strong"),rTo=o("wavlm"),tTo=o(" \u2014 "),dj=a("a"),aTo=o("Wav2Vec2Processor"),nTo=o(" (WavLM model)"),sTo=l(),F(Vp.$$.fragment),lTo=l(),F(Xp.$$.fragment),iTo=l(),zp=a("div"),F(N6.$$.fragment),dTo=l(),Cce=a("p"),cTo=o("Register a new processor for this class."),XXe=l(),Vi=a("h2"),Wp=a("a"),wce=a("span"),F(q6.$$.fragment),fTo=l(),Ace=a("span"),mTo=o("AutoModel"),zXe=l(),$o=a("div"),F(j6.$$.fragment),gTo=l(),Xi=a("p"),hTo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),cj=a("a"),pTo=o("from_pretrained()"),_To=o(" class method or the "),fj=a("a"),uTo=o("from_config()"),bTo=o(` class
method.`),vTo=l(),D6=a("p"),FTo=o("This class cannot be instantiated directly using "),Lce=a("code"),TTo=o("__init__()"),MTo=o(" (throws an error)."),ETo=l(),it=a("div"),F(G6.$$.fragment),CTo=l(),yce=a("p"),wTo=o("Instantiates one of the base model classes of the library from a configuration."),ATo=l(),zi=a("p"),LTo=o(`Note:
Loading a model from its configuration file does `),xce=a("strong"),yTo=o("not"),xTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mj=a("a"),$To=o("from_pretrained()"),kTo=o(" to load the model weights."),STo=l(),F(Qp.$$.fragment),RTo=l(),Ye=a("div"),F(O6.$$.fragment),PTo=l(),$ce=a("p"),BTo=o("Instantiate one of the base model classes of the library from a pretrained model."),ITo=l(),Ia=a("p"),NTo=o("The model class to instantiate is selected based on the "),kce=a("code"),qTo=o("model_type"),jTo=o(` property of the config object (either
passed as an argument or loaded from `),Sce=a("code"),DTo=o("pretrained_model_name_or_path"),GTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rce=a("code"),OTo=o("pretrained_model_name_or_path"),VTo=o(":"),XTo=l(),y=a("ul"),Hp=a("li"),Pce=a("strong"),zTo=o("albert"),WTo=o(" \u2014 "),gj=a("a"),QTo=o("AlbertModel"),HTo=o(" (ALBERT model)"),UTo=l(),Up=a("li"),Bce=a("strong"),JTo=o("bart"),YTo=o(" \u2014 "),hj=a("a"),KTo=o("BartModel"),ZTo=o(" (BART model)"),e7o=l(),Jp=a("li"),Ice=a("strong"),o7o=o("beit"),r7o=o(" \u2014 "),pj=a("a"),t7o=o("BeitModel"),a7o=o(" (BEiT model)"),n7o=l(),Yp=a("li"),Nce=a("strong"),s7o=o("bert"),l7o=o(" \u2014 "),_j=a("a"),i7o=o("BertModel"),d7o=o(" (BERT model)"),c7o=l(),Kp=a("li"),qce=a("strong"),f7o=o("bert-generation"),m7o=o(" \u2014 "),uj=a("a"),g7o=o("BertGenerationEncoder"),h7o=o(" (Bert Generation model)"),p7o=l(),Zp=a("li"),jce=a("strong"),_7o=o("big_bird"),u7o=o(" \u2014 "),bj=a("a"),b7o=o("BigBirdModel"),v7o=o(" (BigBird model)"),F7o=l(),e_=a("li"),Dce=a("strong"),T7o=o("bigbird_pegasus"),M7o=o(" \u2014 "),vj=a("a"),E7o=o("BigBirdPegasusModel"),C7o=o(" (BigBird-Pegasus model)"),w7o=l(),o_=a("li"),Gce=a("strong"),A7o=o("blenderbot"),L7o=o(" \u2014 "),Fj=a("a"),y7o=o("BlenderbotModel"),x7o=o(" (Blenderbot model)"),$7o=l(),r_=a("li"),Oce=a("strong"),k7o=o("blenderbot-small"),S7o=o(" \u2014 "),Tj=a("a"),R7o=o("BlenderbotSmallModel"),P7o=o(" (BlenderbotSmall model)"),B7o=l(),t_=a("li"),Vce=a("strong"),I7o=o("bloom"),N7o=o(" \u2014 "),Mj=a("a"),q7o=o("BloomModel"),j7o=o(" (BLOOM model)"),D7o=l(),a_=a("li"),Xce=a("strong"),G7o=o("camembert"),O7o=o(" \u2014 "),Ej=a("a"),V7o=o("CamembertModel"),X7o=o(" (CamemBERT model)"),z7o=l(),n_=a("li"),zce=a("strong"),W7o=o("canine"),Q7o=o(" \u2014 "),Cj=a("a"),H7o=o("CanineModel"),U7o=o(" (CANINE model)"),J7o=l(),s_=a("li"),Wce=a("strong"),Y7o=o("clip"),K7o=o(" \u2014 "),wj=a("a"),Z7o=o("CLIPModel"),e8o=o(" (CLIP model)"),o8o=l(),l_=a("li"),Qce=a("strong"),r8o=o("codegen"),t8o=o(" \u2014 "),Aj=a("a"),a8o=o("CodeGenModel"),n8o=o(" (CodeGen model)"),s8o=l(),i_=a("li"),Hce=a("strong"),l8o=o("convbert"),i8o=o(" \u2014 "),Lj=a("a"),d8o=o("ConvBertModel"),c8o=o(" (ConvBERT model)"),f8o=l(),d_=a("li"),Uce=a("strong"),m8o=o("convnext"),g8o=o(" \u2014 "),yj=a("a"),h8o=o("ConvNextModel"),p8o=o(" (ConvNeXT model)"),_8o=l(),c_=a("li"),Jce=a("strong"),u8o=o("ctrl"),b8o=o(" \u2014 "),xj=a("a"),v8o=o("CTRLModel"),F8o=o(" (CTRL model)"),T8o=l(),f_=a("li"),Yce=a("strong"),M8o=o("cvt"),E8o=o(" \u2014 "),$j=a("a"),C8o=o("CvtModel"),w8o=o(" (CvT model)"),A8o=l(),m_=a("li"),Kce=a("strong"),L8o=o("data2vec-audio"),y8o=o(" \u2014 "),kj=a("a"),x8o=o("Data2VecAudioModel"),$8o=o(" (Data2VecAudio model)"),k8o=l(),g_=a("li"),Zce=a("strong"),S8o=o("data2vec-text"),R8o=o(" \u2014 "),Sj=a("a"),P8o=o("Data2VecTextModel"),B8o=o(" (Data2VecText model)"),I8o=l(),h_=a("li"),efe=a("strong"),N8o=o("data2vec-vision"),q8o=o(" \u2014 "),Rj=a("a"),j8o=o("Data2VecVisionModel"),D8o=o(" (Data2VecVision model)"),G8o=l(),p_=a("li"),ofe=a("strong"),O8o=o("deberta"),V8o=o(" \u2014 "),Pj=a("a"),X8o=o("DebertaModel"),z8o=o(" (DeBERTa model)"),W8o=l(),__=a("li"),rfe=a("strong"),Q8o=o("deberta-v2"),H8o=o(" \u2014 "),Bj=a("a"),U8o=o("DebertaV2Model"),J8o=o(" (DeBERTa-v2 model)"),Y8o=l(),u_=a("li"),tfe=a("strong"),K8o=o("decision_transformer"),Z8o=o(" \u2014 "),Ij=a("a"),e9o=o("DecisionTransformerModel"),o9o=o(" (Decision Transformer model)"),r9o=l(),b_=a("li"),afe=a("strong"),t9o=o("deit"),a9o=o(" \u2014 "),Nj=a("a"),n9o=o("DeiTModel"),s9o=o(" (DeiT model)"),l9o=l(),v_=a("li"),nfe=a("strong"),i9o=o("detr"),d9o=o(" \u2014 "),qj=a("a"),c9o=o("DetrModel"),f9o=o(" (DETR model)"),m9o=l(),F_=a("li"),sfe=a("strong"),g9o=o("distilbert"),h9o=o(" \u2014 "),jj=a("a"),p9o=o("DistilBertModel"),_9o=o(" (DistilBERT model)"),u9o=l(),T_=a("li"),lfe=a("strong"),b9o=o("dpr"),v9o=o(" \u2014 "),Dj=a("a"),F9o=o("DPRQuestionEncoder"),T9o=o(" (DPR model)"),M9o=l(),M_=a("li"),ife=a("strong"),E9o=o("dpt"),C9o=o(" \u2014 "),Gj=a("a"),w9o=o("DPTModel"),A9o=o(" (DPT model)"),L9o=l(),E_=a("li"),dfe=a("strong"),y9o=o("electra"),x9o=o(" \u2014 "),Oj=a("a"),$9o=o("ElectraModel"),k9o=o(" (ELECTRA model)"),S9o=l(),C_=a("li"),cfe=a("strong"),R9o=o("flaubert"),P9o=o(" \u2014 "),Vj=a("a"),B9o=o("FlaubertModel"),I9o=o(" (FlauBERT model)"),N9o=l(),w_=a("li"),ffe=a("strong"),q9o=o("flava"),j9o=o(" \u2014 "),Xj=a("a"),D9o=o("FlavaModel"),G9o=o(" (FLAVA model)"),O9o=l(),A_=a("li"),mfe=a("strong"),V9o=o("fnet"),X9o=o(" \u2014 "),zj=a("a"),z9o=o("FNetModel"),W9o=o(" (FNet model)"),Q9o=l(),L_=a("li"),gfe=a("strong"),H9o=o("fsmt"),U9o=o(" \u2014 "),Wj=a("a"),J9o=o("FSMTModel"),Y9o=o(" (FairSeq Machine-Translation model)"),K9o=l(),Us=a("li"),hfe=a("strong"),Z9o=o("funnel"),eMo=o(" \u2014 "),Qj=a("a"),oMo=o("FunnelModel"),rMo=o(" or "),Hj=a("a"),tMo=o("FunnelBaseModel"),aMo=o(" (Funnel Transformer model)"),nMo=l(),y_=a("li"),pfe=a("strong"),sMo=o("glpn"),lMo=o(" \u2014 "),Uj=a("a"),iMo=o("GLPNModel"),dMo=o(" (GLPN model)"),cMo=l(),x_=a("li"),_fe=a("strong"),fMo=o("gpt2"),mMo=o(" \u2014 "),Jj=a("a"),gMo=o("GPT2Model"),hMo=o(" (OpenAI GPT-2 model)"),pMo=l(),$_=a("li"),ufe=a("strong"),_Mo=o("gpt_neo"),uMo=o(" \u2014 "),Yj=a("a"),bMo=o("GPTNeoModel"),vMo=o(" (GPT Neo model)"),FMo=l(),k_=a("li"),bfe=a("strong"),TMo=o("gpt_neox"),MMo=o(" \u2014 "),Kj=a("a"),EMo=o("GPTNeoXModel"),CMo=o(" (GPT NeoX model)"),wMo=l(),S_=a("li"),vfe=a("strong"),AMo=o("gptj"),LMo=o(" \u2014 "),Zj=a("a"),yMo=o("GPTJModel"),xMo=o(" (GPT-J model)"),$Mo=l(),R_=a("li"),Ffe=a("strong"),kMo=o("groupvit"),SMo=o(" \u2014 "),eD=a("a"),RMo=o("GroupViTModel"),PMo=o(" (GroupViT model)"),BMo=l(),P_=a("li"),Tfe=a("strong"),IMo=o("hubert"),NMo=o(" \u2014 "),oD=a("a"),qMo=o("HubertModel"),jMo=o(" (Hubert model)"),DMo=l(),B_=a("li"),Mfe=a("strong"),GMo=o("ibert"),OMo=o(" \u2014 "),rD=a("a"),VMo=o("IBertModel"),XMo=o(" (I-BERT model)"),zMo=l(),I_=a("li"),Efe=a("strong"),WMo=o("imagegpt"),QMo=o(" \u2014 "),tD=a("a"),HMo=o("ImageGPTModel"),UMo=o(" (ImageGPT model)"),JMo=l(),N_=a("li"),Cfe=a("strong"),YMo=o("layoutlm"),KMo=o(" \u2014 "),aD=a("a"),ZMo=o("LayoutLMModel"),e4o=o(" (LayoutLM model)"),o4o=l(),q_=a("li"),wfe=a("strong"),r4o=o("layoutlmv2"),t4o=o(" \u2014 "),nD=a("a"),a4o=o("LayoutLMv2Model"),n4o=o(" (LayoutLMv2 model)"),s4o=l(),j_=a("li"),Afe=a("strong"),l4o=o("layoutlmv3"),i4o=o(" \u2014 "),sD=a("a"),d4o=o("LayoutLMv3Model"),c4o=o(" (LayoutLMv3 model)"),f4o=l(),D_=a("li"),Lfe=a("strong"),m4o=o("led"),g4o=o(" \u2014 "),lD=a("a"),h4o=o("LEDModel"),p4o=o(" (LED model)"),_4o=l(),G_=a("li"),yfe=a("strong"),u4o=o("levit"),b4o=o(" \u2014 "),iD=a("a"),v4o=o("LevitModel"),F4o=o(" (LeViT model)"),T4o=l(),O_=a("li"),xfe=a("strong"),M4o=o("longformer"),E4o=o(" \u2014 "),dD=a("a"),C4o=o("LongformerModel"),w4o=o(" (Longformer model)"),A4o=l(),V_=a("li"),$fe=a("strong"),L4o=o("longt5"),y4o=o(" \u2014 "),cD=a("a"),x4o=o("LongT5Model"),$4o=o(" (LongT5 model)"),k4o=l(),X_=a("li"),kfe=a("strong"),S4o=o("luke"),R4o=o(" \u2014 "),fD=a("a"),P4o=o("LukeModel"),B4o=o(" (LUKE model)"),I4o=l(),z_=a("li"),Sfe=a("strong"),N4o=o("lxmert"),q4o=o(" \u2014 "),mD=a("a"),j4o=o("LxmertModel"),D4o=o(" (LXMERT model)"),G4o=l(),W_=a("li"),Rfe=a("strong"),O4o=o("m2m_100"),V4o=o(" \u2014 "),gD=a("a"),X4o=o("M2M100Model"),z4o=o(" (M2M100 model)"),W4o=l(),Q_=a("li"),Pfe=a("strong"),Q4o=o("marian"),H4o=o(" \u2014 "),hD=a("a"),U4o=o("MarianModel"),J4o=o(" (Marian model)"),Y4o=l(),H_=a("li"),Bfe=a("strong"),K4o=o("maskformer"),Z4o=o(" \u2014 "),pD=a("a"),eEo=o("MaskFormerModel"),oEo=o(" (MaskFormer model)"),rEo=l(),U_=a("li"),Ife=a("strong"),tEo=o("mbart"),aEo=o(" \u2014 "),_D=a("a"),nEo=o("MBartModel"),sEo=o(" (mBART model)"),lEo=l(),J_=a("li"),Nfe=a("strong"),iEo=o("mctct"),dEo=o(" \u2014 "),uD=a("a"),cEo=o("MCTCTModel"),fEo=o(" (M-CTC-T model)"),mEo=l(),Y_=a("li"),qfe=a("strong"),gEo=o("megatron-bert"),hEo=o(" \u2014 "),bD=a("a"),pEo=o("MegatronBertModel"),_Eo=o(" (Megatron-BERT model)"),uEo=l(),K_=a("li"),jfe=a("strong"),bEo=o("mobilebert"),vEo=o(" \u2014 "),vD=a("a"),FEo=o("MobileBertModel"),TEo=o(" (MobileBERT model)"),MEo=l(),Z_=a("li"),Dfe=a("strong"),EEo=o("mobilevit"),CEo=o(" \u2014 "),FD=a("a"),wEo=o("MobileViTModel"),AEo=o(" (MobileViT model)"),LEo=l(),eu=a("li"),Gfe=a("strong"),yEo=o("mpnet"),xEo=o(" \u2014 "),TD=a("a"),$Eo=o("MPNetModel"),kEo=o(" (MPNet model)"),SEo=l(),ou=a("li"),Ofe=a("strong"),REo=o("mt5"),PEo=o(" \u2014 "),MD=a("a"),BEo=o("MT5Model"),IEo=o(" (MT5 model)"),NEo=l(),ru=a("li"),Vfe=a("strong"),qEo=o("mvp"),jEo=o(" \u2014 "),ED=a("a"),DEo=o("MvpModel"),GEo=o(" (MVP model)"),OEo=l(),tu=a("li"),Xfe=a("strong"),VEo=o("nezha"),XEo=o(" \u2014 "),CD=a("a"),zEo=o("NezhaModel"),WEo=o(" (Nezha model)"),QEo=l(),au=a("li"),zfe=a("strong"),HEo=o("nllb"),UEo=o(" \u2014 "),wD=a("a"),JEo=o("M2M100Model"),YEo=o(" (NLLB model)"),KEo=l(),nu=a("li"),Wfe=a("strong"),ZEo=o("nystromformer"),eCo=o(" \u2014 "),AD=a("a"),oCo=o("NystromformerModel"),rCo=o(" (Nystr\xF6mformer model)"),tCo=l(),su=a("li"),Qfe=a("strong"),aCo=o("openai-gpt"),nCo=o(" \u2014 "),LD=a("a"),sCo=o("OpenAIGPTModel"),lCo=o(" (OpenAI GPT model)"),iCo=l(),lu=a("li"),Hfe=a("strong"),dCo=o("opt"),cCo=o(" \u2014 "),yD=a("a"),fCo=o("OPTModel"),mCo=o(" (OPT model)"),gCo=l(),iu=a("li"),Ufe=a("strong"),hCo=o("owlvit"),pCo=o(" \u2014 "),xD=a("a"),_Co=o("OwlViTModel"),uCo=o(" (OWL-ViT model)"),bCo=l(),du=a("li"),Jfe=a("strong"),vCo=o("pegasus"),FCo=o(" \u2014 "),$D=a("a"),TCo=o("PegasusModel"),MCo=o(" (Pegasus model)"),ECo=l(),cu=a("li"),Yfe=a("strong"),CCo=o("perceiver"),wCo=o(" \u2014 "),kD=a("a"),ACo=o("PerceiverModel"),LCo=o(" (Perceiver model)"),yCo=l(),fu=a("li"),Kfe=a("strong"),xCo=o("plbart"),$Co=o(" \u2014 "),SD=a("a"),kCo=o("PLBartModel"),SCo=o(" (PLBart model)"),RCo=l(),mu=a("li"),Zfe=a("strong"),PCo=o("poolformer"),BCo=o(" \u2014 "),RD=a("a"),ICo=o("PoolFormerModel"),NCo=o(" (PoolFormer model)"),qCo=l(),gu=a("li"),eme=a("strong"),jCo=o("prophetnet"),DCo=o(" \u2014 "),PD=a("a"),GCo=o("ProphetNetModel"),OCo=o(" (ProphetNet model)"),VCo=l(),hu=a("li"),ome=a("strong"),XCo=o("qdqbert"),zCo=o(" \u2014 "),BD=a("a"),WCo=o("QDQBertModel"),QCo=o(" (QDQBert model)"),HCo=l(),pu=a("li"),rme=a("strong"),UCo=o("reformer"),JCo=o(" \u2014 "),ID=a("a"),YCo=o("ReformerModel"),KCo=o(" (Reformer model)"),ZCo=l(),_u=a("li"),tme=a("strong"),e5o=o("regnet"),o5o=o(" \u2014 "),ND=a("a"),r5o=o("RegNetModel"),t5o=o(" (RegNet model)"),a5o=l(),uu=a("li"),ame=a("strong"),n5o=o("rembert"),s5o=o(" \u2014 "),qD=a("a"),l5o=o("RemBertModel"),i5o=o(" (RemBERT model)"),d5o=l(),bu=a("li"),nme=a("strong"),c5o=o("resnet"),f5o=o(" \u2014 "),jD=a("a"),m5o=o("ResNetModel"),g5o=o(" (ResNet model)"),h5o=l(),vu=a("li"),sme=a("strong"),p5o=o("retribert"),_5o=o(" \u2014 "),DD=a("a"),u5o=o("RetriBertModel"),b5o=o(" (RetriBERT model)"),v5o=l(),Fu=a("li"),lme=a("strong"),F5o=o("roberta"),T5o=o(" \u2014 "),GD=a("a"),M5o=o("RobertaModel"),E5o=o(" (RoBERTa model)"),C5o=l(),Tu=a("li"),ime=a("strong"),w5o=o("roformer"),A5o=o(" \u2014 "),OD=a("a"),L5o=o("RoFormerModel"),y5o=o(" (RoFormer model)"),x5o=l(),Mu=a("li"),dme=a("strong"),$5o=o("segformer"),k5o=o(" \u2014 "),VD=a("a"),S5o=o("SegformerModel"),R5o=o(" (SegFormer model)"),P5o=l(),Eu=a("li"),cme=a("strong"),B5o=o("sew"),I5o=o(" \u2014 "),XD=a("a"),N5o=o("SEWModel"),q5o=o(" (SEW model)"),j5o=l(),Cu=a("li"),fme=a("strong"),D5o=o("sew-d"),G5o=o(" \u2014 "),zD=a("a"),O5o=o("SEWDModel"),V5o=o(" (SEW-D model)"),X5o=l(),wu=a("li"),mme=a("strong"),z5o=o("speech_to_text"),W5o=o(" \u2014 "),WD=a("a"),Q5o=o("Speech2TextModel"),H5o=o(" (Speech2Text model)"),U5o=l(),Au=a("li"),gme=a("strong"),J5o=o("splinter"),Y5o=o(" \u2014 "),QD=a("a"),K5o=o("SplinterModel"),Z5o=o(" (Splinter model)"),e0o=l(),Lu=a("li"),hme=a("strong"),o0o=o("squeezebert"),r0o=o(" \u2014 "),HD=a("a"),t0o=o("SqueezeBertModel"),a0o=o(" (SqueezeBERT model)"),n0o=l(),yu=a("li"),pme=a("strong"),s0o=o("swin"),l0o=o(" \u2014 "),UD=a("a"),i0o=o("SwinModel"),d0o=o(" (Swin Transformer model)"),c0o=l(),xu=a("li"),_me=a("strong"),f0o=o("t5"),m0o=o(" \u2014 "),JD=a("a"),g0o=o("T5Model"),h0o=o(" (T5 model)"),p0o=l(),$u=a("li"),ume=a("strong"),_0o=o("tapas"),u0o=o(" \u2014 "),YD=a("a"),b0o=o("TapasModel"),v0o=o(" (TAPAS model)"),F0o=l(),ku=a("li"),bme=a("strong"),T0o=o("trajectory_transformer"),M0o=o(" \u2014 "),KD=a("a"),E0o=o("TrajectoryTransformerModel"),C0o=o(" (Trajectory Transformer model)"),w0o=l(),Su=a("li"),vme=a("strong"),A0o=o("transfo-xl"),L0o=o(" \u2014 "),ZD=a("a"),y0o=o("TransfoXLModel"),x0o=o(" (Transformer-XL model)"),$0o=l(),Ru=a("li"),Fme=a("strong"),k0o=o("unispeech"),S0o=o(" \u2014 "),eG=a("a"),R0o=o("UniSpeechModel"),P0o=o(" (UniSpeech model)"),B0o=l(),Pu=a("li"),Tme=a("strong"),I0o=o("unispeech-sat"),N0o=o(" \u2014 "),oG=a("a"),q0o=o("UniSpeechSatModel"),j0o=o(" (UniSpeechSat model)"),D0o=l(),Bu=a("li"),Mme=a("strong"),G0o=o("van"),O0o=o(" \u2014 "),rG=a("a"),V0o=o("VanModel"),X0o=o(" (VAN model)"),z0o=l(),Iu=a("li"),Eme=a("strong"),W0o=o("vilt"),Q0o=o(" \u2014 "),tG=a("a"),H0o=o("ViltModel"),U0o=o(" (ViLT model)"),J0o=l(),Nu=a("li"),Cme=a("strong"),Y0o=o("vision-text-dual-encoder"),K0o=o(" \u2014 "),aG=a("a"),Z0o=o("VisionTextDualEncoderModel"),ewo=o(" (VisionTextDualEncoder model)"),owo=l(),qu=a("li"),wme=a("strong"),rwo=o("visual_bert"),two=o(" \u2014 "),nG=a("a"),awo=o("VisualBertModel"),nwo=o(" (VisualBERT model)"),swo=l(),ju=a("li"),Ame=a("strong"),lwo=o("vit"),iwo=o(" \u2014 "),sG=a("a"),dwo=o("ViTModel"),cwo=o(" (ViT model)"),fwo=l(),Du=a("li"),Lme=a("strong"),mwo=o("vit_mae"),gwo=o(" \u2014 "),lG=a("a"),hwo=o("ViTMAEModel"),pwo=o(" (ViTMAE model)"),_wo=l(),Gu=a("li"),yme=a("strong"),uwo=o("wav2vec2"),bwo=o(" \u2014 "),iG=a("a"),vwo=o("Wav2Vec2Model"),Fwo=o(" (Wav2Vec2 model)"),Two=l(),Ou=a("li"),xme=a("strong"),Mwo=o("wav2vec2-conformer"),Ewo=o(" \u2014 "),dG=a("a"),Cwo=o("Wav2Vec2ConformerModel"),wwo=o(" (Wav2Vec2-Conformer model)"),Awo=l(),Vu=a("li"),$me=a("strong"),Lwo=o("wavlm"),ywo=o(" \u2014 "),cG=a("a"),xwo=o("WavLMModel"),$wo=o(" (WavLM model)"),kwo=l(),Xu=a("li"),kme=a("strong"),Swo=o("xglm"),Rwo=o(" \u2014 "),fG=a("a"),Pwo=o("XGLMModel"),Bwo=o(" (XGLM model)"),Iwo=l(),zu=a("li"),Sme=a("strong"),Nwo=o("xlm"),qwo=o(" \u2014 "),mG=a("a"),jwo=o("XLMModel"),Dwo=o(" (XLM model)"),Gwo=l(),Wu=a("li"),Rme=a("strong"),Owo=o("xlm-prophetnet"),Vwo=o(" \u2014 "),gG=a("a"),Xwo=o("XLMProphetNetModel"),zwo=o(" (XLM-ProphetNet model)"),Wwo=l(),Qu=a("li"),Pme=a("strong"),Qwo=o("xlm-roberta"),Hwo=o(" \u2014 "),hG=a("a"),Uwo=o("XLMRobertaModel"),Jwo=o(" (XLM-RoBERTa model)"),Ywo=l(),Hu=a("li"),Bme=a("strong"),Kwo=o("xlm-roberta-xl"),Zwo=o(" \u2014 "),pG=a("a"),eAo=o("XLMRobertaXLModel"),oAo=o(" (XLM-RoBERTa-XL model)"),rAo=l(),Uu=a("li"),Ime=a("strong"),tAo=o("xlnet"),aAo=o(" \u2014 "),_G=a("a"),nAo=o("XLNetModel"),sAo=o(" (XLNet model)"),lAo=l(),Ju=a("li"),Nme=a("strong"),iAo=o("yolos"),dAo=o(" \u2014 "),uG=a("a"),cAo=o("YolosModel"),fAo=o(" (YOLOS model)"),mAo=l(),Yu=a("li"),qme=a("strong"),gAo=o("yoso"),hAo=o(" \u2014 "),bG=a("a"),pAo=o("YosoModel"),_Ao=o(" (YOSO model)"),uAo=l(),Ku=a("p"),bAo=o("The model is set in evaluation mode by default using "),jme=a("code"),vAo=o("model.eval()"),FAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dme=a("code"),TAo=o("model.train()"),MAo=l(),F(Zu.$$.fragment),WXe=l(),Wi=a("h2"),e1=a("a"),Gme=a("span"),F(V6.$$.fragment),EAo=l(),Ome=a("span"),CAo=o("AutoModelForPreTraining"),QXe=l(),ko=a("div"),F(X6.$$.fragment),wAo=l(),Qi=a("p"),AAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),vG=a("a"),LAo=o("from_pretrained()"),yAo=o(" class method or the "),FG=a("a"),xAo=o("from_config()"),$Ao=o(` class
method.`),kAo=l(),z6=a("p"),SAo=o("This class cannot be instantiated directly using "),Vme=a("code"),RAo=o("__init__()"),PAo=o(" (throws an error)."),BAo=l(),dt=a("div"),F(W6.$$.fragment),IAo=l(),Xme=a("p"),NAo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),qAo=l(),Hi=a("p"),jAo=o(`Note:
Loading a model from its configuration file does `),zme=a("strong"),DAo=o("not"),GAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TG=a("a"),OAo=o("from_pretrained()"),VAo=o(" to load the model weights."),XAo=l(),F(o1.$$.fragment),zAo=l(),Ke=a("div"),F(Q6.$$.fragment),WAo=l(),Wme=a("p"),QAo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),HAo=l(),Na=a("p"),UAo=o("The model class to instantiate is selected based on the "),Qme=a("code"),JAo=o("model_type"),YAo=o(` property of the config object (either
passed as an argument or loaded from `),Hme=a("code"),KAo=o("pretrained_model_name_or_path"),ZAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ume=a("code"),e6o=o("pretrained_model_name_or_path"),o6o=o(":"),r6o=l(),G=a("ul"),r1=a("li"),Jme=a("strong"),t6o=o("albert"),a6o=o(" \u2014 "),MG=a("a"),n6o=o("AlbertForPreTraining"),s6o=o(" (ALBERT model)"),l6o=l(),t1=a("li"),Yme=a("strong"),i6o=o("bart"),d6o=o(" \u2014 "),EG=a("a"),c6o=o("BartForConditionalGeneration"),f6o=o(" (BART model)"),m6o=l(),a1=a("li"),Kme=a("strong"),g6o=o("bert"),h6o=o(" \u2014 "),CG=a("a"),p6o=o("BertForPreTraining"),_6o=o(" (BERT model)"),u6o=l(),n1=a("li"),Zme=a("strong"),b6o=o("big_bird"),v6o=o(" \u2014 "),wG=a("a"),F6o=o("BigBirdForPreTraining"),T6o=o(" (BigBird model)"),M6o=l(),s1=a("li"),ege=a("strong"),E6o=o("bloom"),C6o=o(" \u2014 "),AG=a("a"),w6o=o("BloomForCausalLM"),A6o=o(" (BLOOM model)"),L6o=l(),l1=a("li"),oge=a("strong"),y6o=o("camembert"),x6o=o(" \u2014 "),LG=a("a"),$6o=o("CamembertForMaskedLM"),k6o=o(" (CamemBERT model)"),S6o=l(),i1=a("li"),rge=a("strong"),R6o=o("ctrl"),P6o=o(" \u2014 "),yG=a("a"),B6o=o("CTRLLMHeadModel"),I6o=o(" (CTRL model)"),N6o=l(),d1=a("li"),tge=a("strong"),q6o=o("data2vec-text"),j6o=o(" \u2014 "),xG=a("a"),D6o=o("Data2VecTextForMaskedLM"),G6o=o(" (Data2VecText model)"),O6o=l(),c1=a("li"),age=a("strong"),V6o=o("deberta"),X6o=o(" \u2014 "),$G=a("a"),z6o=o("DebertaForMaskedLM"),W6o=o(" (DeBERTa model)"),Q6o=l(),f1=a("li"),nge=a("strong"),H6o=o("deberta-v2"),U6o=o(" \u2014 "),kG=a("a"),J6o=o("DebertaV2ForMaskedLM"),Y6o=o(" (DeBERTa-v2 model)"),K6o=l(),m1=a("li"),sge=a("strong"),Z6o=o("distilbert"),eLo=o(" \u2014 "),SG=a("a"),oLo=o("DistilBertForMaskedLM"),rLo=o(" (DistilBERT model)"),tLo=l(),g1=a("li"),lge=a("strong"),aLo=o("electra"),nLo=o(" \u2014 "),RG=a("a"),sLo=o("ElectraForPreTraining"),lLo=o(" (ELECTRA model)"),iLo=l(),h1=a("li"),ige=a("strong"),dLo=o("flaubert"),cLo=o(" \u2014 "),PG=a("a"),fLo=o("FlaubertWithLMHeadModel"),mLo=o(" (FlauBERT model)"),gLo=l(),p1=a("li"),dge=a("strong"),hLo=o("flava"),pLo=o(" \u2014 "),BG=a("a"),_Lo=o("FlavaForPreTraining"),uLo=o(" (FLAVA model)"),bLo=l(),_1=a("li"),cge=a("strong"),vLo=o("fnet"),FLo=o(" \u2014 "),IG=a("a"),TLo=o("FNetForPreTraining"),MLo=o(" (FNet model)"),ELo=l(),u1=a("li"),fge=a("strong"),CLo=o("fsmt"),wLo=o(" \u2014 "),NG=a("a"),ALo=o("FSMTForConditionalGeneration"),LLo=o(" (FairSeq Machine-Translation model)"),yLo=l(),b1=a("li"),mge=a("strong"),xLo=o("funnel"),$Lo=o(" \u2014 "),qG=a("a"),kLo=o("FunnelForPreTraining"),SLo=o(" (Funnel Transformer model)"),RLo=l(),v1=a("li"),gge=a("strong"),PLo=o("gpt2"),BLo=o(" \u2014 "),jG=a("a"),ILo=o("GPT2LMHeadModel"),NLo=o(" (OpenAI GPT-2 model)"),qLo=l(),F1=a("li"),hge=a("strong"),jLo=o("ibert"),DLo=o(" \u2014 "),DG=a("a"),GLo=o("IBertForMaskedLM"),OLo=o(" (I-BERT model)"),VLo=l(),T1=a("li"),pge=a("strong"),XLo=o("layoutlm"),zLo=o(" \u2014 "),GG=a("a"),WLo=o("LayoutLMForMaskedLM"),QLo=o(" (LayoutLM model)"),HLo=l(),M1=a("li"),_ge=a("strong"),ULo=o("longformer"),JLo=o(" \u2014 "),OG=a("a"),YLo=o("LongformerForMaskedLM"),KLo=o(" (Longformer model)"),ZLo=l(),E1=a("li"),uge=a("strong"),eyo=o("lxmert"),oyo=o(" \u2014 "),VG=a("a"),ryo=o("LxmertForPreTraining"),tyo=o(" (LXMERT model)"),ayo=l(),C1=a("li"),bge=a("strong"),nyo=o("megatron-bert"),syo=o(" \u2014 "),XG=a("a"),lyo=o("MegatronBertForPreTraining"),iyo=o(" (Megatron-BERT model)"),dyo=l(),w1=a("li"),vge=a("strong"),cyo=o("mobilebert"),fyo=o(" \u2014 "),zG=a("a"),myo=o("MobileBertForPreTraining"),gyo=o(" (MobileBERT model)"),hyo=l(),A1=a("li"),Fge=a("strong"),pyo=o("mpnet"),_yo=o(" \u2014 "),WG=a("a"),uyo=o("MPNetForMaskedLM"),byo=o(" (MPNet model)"),vyo=l(),L1=a("li"),Tge=a("strong"),Fyo=o("mvp"),Tyo=o(" \u2014 "),QG=a("a"),Myo=o("MvpForConditionalGeneration"),Eyo=o(" (MVP model)"),Cyo=l(),y1=a("li"),Mge=a("strong"),wyo=o("nezha"),Ayo=o(" \u2014 "),HG=a("a"),Lyo=o("NezhaForPreTraining"),yyo=o(" (Nezha model)"),xyo=l(),x1=a("li"),Ege=a("strong"),$yo=o("openai-gpt"),kyo=o(" \u2014 "),UG=a("a"),Syo=o("OpenAIGPTLMHeadModel"),Ryo=o(" (OpenAI GPT model)"),Pyo=l(),$1=a("li"),Cge=a("strong"),Byo=o("retribert"),Iyo=o(" \u2014 "),JG=a("a"),Nyo=o("RetriBertModel"),qyo=o(" (RetriBERT model)"),jyo=l(),k1=a("li"),wge=a("strong"),Dyo=o("roberta"),Gyo=o(" \u2014 "),YG=a("a"),Oyo=o("RobertaForMaskedLM"),Vyo=o(" (RoBERTa model)"),Xyo=l(),S1=a("li"),Age=a("strong"),zyo=o("splinter"),Wyo=o(" \u2014 "),KG=a("a"),Qyo=o("SplinterForPreTraining"),Hyo=o(" (Splinter model)"),Uyo=l(),R1=a("li"),Lge=a("strong"),Jyo=o("squeezebert"),Yyo=o(" \u2014 "),ZG=a("a"),Kyo=o("SqueezeBertForMaskedLM"),Zyo=o(" (SqueezeBERT model)"),exo=l(),P1=a("li"),yge=a("strong"),oxo=o("t5"),rxo=o(" \u2014 "),eO=a("a"),txo=o("T5ForConditionalGeneration"),axo=o(" (T5 model)"),nxo=l(),B1=a("li"),xge=a("strong"),sxo=o("tapas"),lxo=o(" \u2014 "),oO=a("a"),ixo=o("TapasForMaskedLM"),dxo=o(" (TAPAS model)"),cxo=l(),I1=a("li"),$ge=a("strong"),fxo=o("transfo-xl"),mxo=o(" \u2014 "),rO=a("a"),gxo=o("TransfoXLLMHeadModel"),hxo=o(" (Transformer-XL model)"),pxo=l(),N1=a("li"),kge=a("strong"),_xo=o("unispeech"),uxo=o(" \u2014 "),tO=a("a"),bxo=o("UniSpeechForPreTraining"),vxo=o(" (UniSpeech model)"),Fxo=l(),q1=a("li"),Sge=a("strong"),Txo=o("unispeech-sat"),Mxo=o(" \u2014 "),aO=a("a"),Exo=o("UniSpeechSatForPreTraining"),Cxo=o(" (UniSpeechSat model)"),wxo=l(),j1=a("li"),Rge=a("strong"),Axo=o("visual_bert"),Lxo=o(" \u2014 "),nO=a("a"),yxo=o("VisualBertForPreTraining"),xxo=o(" (VisualBERT model)"),$xo=l(),D1=a("li"),Pge=a("strong"),kxo=o("vit_mae"),Sxo=o(" \u2014 "),sO=a("a"),Rxo=o("ViTMAEForPreTraining"),Pxo=o(" (ViTMAE model)"),Bxo=l(),G1=a("li"),Bge=a("strong"),Ixo=o("wav2vec2"),Nxo=o(" \u2014 "),lO=a("a"),qxo=o("Wav2Vec2ForPreTraining"),jxo=o(" (Wav2Vec2 model)"),Dxo=l(),O1=a("li"),Ige=a("strong"),Gxo=o("wav2vec2-conformer"),Oxo=o(" \u2014 "),iO=a("a"),Vxo=o("Wav2Vec2ConformerForPreTraining"),Xxo=o(" (Wav2Vec2-Conformer model)"),zxo=l(),V1=a("li"),Nge=a("strong"),Wxo=o("xlm"),Qxo=o(" \u2014 "),dO=a("a"),Hxo=o("XLMWithLMHeadModel"),Uxo=o(" (XLM model)"),Jxo=l(),X1=a("li"),qge=a("strong"),Yxo=o("xlm-roberta"),Kxo=o(" \u2014 "),cO=a("a"),Zxo=o("XLMRobertaForMaskedLM"),e$o=o(" (XLM-RoBERTa model)"),o$o=l(),z1=a("li"),jge=a("strong"),r$o=o("xlm-roberta-xl"),t$o=o(" \u2014 "),fO=a("a"),a$o=o("XLMRobertaXLForMaskedLM"),n$o=o(" (XLM-RoBERTa-XL model)"),s$o=l(),W1=a("li"),Dge=a("strong"),l$o=o("xlnet"),i$o=o(" \u2014 "),mO=a("a"),d$o=o("XLNetLMHeadModel"),c$o=o(" (XLNet model)"),f$o=l(),Q1=a("p"),m$o=o("The model is set in evaluation mode by default using "),Gge=a("code"),g$o=o("model.eval()"),h$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oge=a("code"),p$o=o("model.train()"),_$o=l(),F(H1.$$.fragment),HXe=l(),Ui=a("h2"),U1=a("a"),Vge=a("span"),F(H6.$$.fragment),u$o=l(),Xge=a("span"),b$o=o("AutoModelForCausalLM"),UXe=l(),So=a("div"),F(U6.$$.fragment),v$o=l(),Ji=a("p"),F$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),gO=a("a"),T$o=o("from_pretrained()"),M$o=o(" class method or the "),hO=a("a"),E$o=o("from_config()"),C$o=o(` class
method.`),w$o=l(),J6=a("p"),A$o=o("This class cannot be instantiated directly using "),zge=a("code"),L$o=o("__init__()"),y$o=o(" (throws an error)."),x$o=l(),ct=a("div"),F(Y6.$$.fragment),$$o=l(),Wge=a("p"),k$o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),S$o=l(),Yi=a("p"),R$o=o(`Note:
Loading a model from its configuration file does `),Qge=a("strong"),P$o=o("not"),B$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pO=a("a"),I$o=o("from_pretrained()"),N$o=o(" to load the model weights."),q$o=l(),F(J1.$$.fragment),j$o=l(),Ze=a("div"),F(K6.$$.fragment),D$o=l(),Hge=a("p"),G$o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),O$o=l(),qa=a("p"),V$o=o("The model class to instantiate is selected based on the "),Uge=a("code"),X$o=o("model_type"),z$o=o(` property of the config object (either
passed as an argument or loaded from `),Jge=a("code"),W$o=o("pretrained_model_name_or_path"),Q$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yge=a("code"),H$o=o("pretrained_model_name_or_path"),U$o=o(":"),J$o=l(),z=a("ul"),Y1=a("li"),Kge=a("strong"),Y$o=o("bart"),K$o=o(" \u2014 "),_O=a("a"),Z$o=o("BartForCausalLM"),eko=o(" (BART model)"),oko=l(),K1=a("li"),Zge=a("strong"),rko=o("bert"),tko=o(" \u2014 "),uO=a("a"),ako=o("BertLMHeadModel"),nko=o(" (BERT model)"),sko=l(),Z1=a("li"),ehe=a("strong"),lko=o("bert-generation"),iko=o(" \u2014 "),bO=a("a"),dko=o("BertGenerationDecoder"),cko=o(" (Bert Generation model)"),fko=l(),e2=a("li"),ohe=a("strong"),mko=o("big_bird"),gko=o(" \u2014 "),vO=a("a"),hko=o("BigBirdForCausalLM"),pko=o(" (BigBird model)"),_ko=l(),o2=a("li"),rhe=a("strong"),uko=o("bigbird_pegasus"),bko=o(" \u2014 "),FO=a("a"),vko=o("BigBirdPegasusForCausalLM"),Fko=o(" (BigBird-Pegasus model)"),Tko=l(),r2=a("li"),the=a("strong"),Mko=o("blenderbot"),Eko=o(" \u2014 "),TO=a("a"),Cko=o("BlenderbotForCausalLM"),wko=o(" (Blenderbot model)"),Ako=l(),t2=a("li"),ahe=a("strong"),Lko=o("blenderbot-small"),yko=o(" \u2014 "),MO=a("a"),xko=o("BlenderbotSmallForCausalLM"),$ko=o(" (BlenderbotSmall model)"),kko=l(),a2=a("li"),nhe=a("strong"),Sko=o("bloom"),Rko=o(" \u2014 "),EO=a("a"),Pko=o("BloomForCausalLM"),Bko=o(" (BLOOM model)"),Iko=l(),n2=a("li"),she=a("strong"),Nko=o("camembert"),qko=o(" \u2014 "),CO=a("a"),jko=o("CamembertForCausalLM"),Dko=o(" (CamemBERT model)"),Gko=l(),s2=a("li"),lhe=a("strong"),Oko=o("codegen"),Vko=o(" \u2014 "),wO=a("a"),Xko=o("CodeGenForCausalLM"),zko=o(" (CodeGen model)"),Wko=l(),l2=a("li"),ihe=a("strong"),Qko=o("ctrl"),Hko=o(" \u2014 "),AO=a("a"),Uko=o("CTRLLMHeadModel"),Jko=o(" (CTRL model)"),Yko=l(),i2=a("li"),dhe=a("strong"),Kko=o("data2vec-text"),Zko=o(" \u2014 "),LO=a("a"),eSo=o("Data2VecTextForCausalLM"),oSo=o(" (Data2VecText model)"),rSo=l(),d2=a("li"),che=a("strong"),tSo=o("electra"),aSo=o(" \u2014 "),yO=a("a"),nSo=o("ElectraForCausalLM"),sSo=o(" (ELECTRA model)"),lSo=l(),c2=a("li"),fhe=a("strong"),iSo=o("gpt2"),dSo=o(" \u2014 "),xO=a("a"),cSo=o("GPT2LMHeadModel"),fSo=o(" (OpenAI GPT-2 model)"),mSo=l(),f2=a("li"),mhe=a("strong"),gSo=o("gpt_neo"),hSo=o(" \u2014 "),$O=a("a"),pSo=o("GPTNeoForCausalLM"),_So=o(" (GPT Neo model)"),uSo=l(),m2=a("li"),ghe=a("strong"),bSo=o("gpt_neox"),vSo=o(" \u2014 "),kO=a("a"),FSo=o("GPTNeoXForCausalLM"),TSo=o(" (GPT NeoX model)"),MSo=l(),g2=a("li"),hhe=a("strong"),ESo=o("gptj"),CSo=o(" \u2014 "),SO=a("a"),wSo=o("GPTJForCausalLM"),ASo=o(" (GPT-J model)"),LSo=l(),h2=a("li"),phe=a("strong"),ySo=o("marian"),xSo=o(" \u2014 "),RO=a("a"),$So=o("MarianForCausalLM"),kSo=o(" (Marian model)"),SSo=l(),p2=a("li"),_he=a("strong"),RSo=o("mbart"),PSo=o(" \u2014 "),PO=a("a"),BSo=o("MBartForCausalLM"),ISo=o(" (mBART model)"),NSo=l(),_2=a("li"),uhe=a("strong"),qSo=o("megatron-bert"),jSo=o(" \u2014 "),BO=a("a"),DSo=o("MegatronBertForCausalLM"),GSo=o(" (Megatron-BERT model)"),OSo=l(),u2=a("li"),bhe=a("strong"),VSo=o("mvp"),XSo=o(" \u2014 "),IO=a("a"),zSo=o("MvpForCausalLM"),WSo=o(" (MVP model)"),QSo=l(),b2=a("li"),vhe=a("strong"),HSo=o("openai-gpt"),USo=o(" \u2014 "),NO=a("a"),JSo=o("OpenAIGPTLMHeadModel"),YSo=o(" (OpenAI GPT model)"),KSo=l(),v2=a("li"),Fhe=a("strong"),ZSo=o("opt"),eRo=o(" \u2014 "),qO=a("a"),oRo=o("OPTForCausalLM"),rRo=o(" (OPT model)"),tRo=l(),F2=a("li"),The=a("strong"),aRo=o("pegasus"),nRo=o(" \u2014 "),jO=a("a"),sRo=o("PegasusForCausalLM"),lRo=o(" (Pegasus model)"),iRo=l(),T2=a("li"),Mhe=a("strong"),dRo=o("plbart"),cRo=o(" \u2014 "),DO=a("a"),fRo=o("PLBartForCausalLM"),mRo=o(" (PLBart model)"),gRo=l(),M2=a("li"),Ehe=a("strong"),hRo=o("prophetnet"),pRo=o(" \u2014 "),GO=a("a"),_Ro=o("ProphetNetForCausalLM"),uRo=o(" (ProphetNet model)"),bRo=l(),E2=a("li"),Che=a("strong"),vRo=o("qdqbert"),FRo=o(" \u2014 "),OO=a("a"),TRo=o("QDQBertLMHeadModel"),MRo=o(" (QDQBert model)"),ERo=l(),C2=a("li"),whe=a("strong"),CRo=o("reformer"),wRo=o(" \u2014 "),VO=a("a"),ARo=o("ReformerModelWithLMHead"),LRo=o(" (Reformer model)"),yRo=l(),w2=a("li"),Ahe=a("strong"),xRo=o("rembert"),$Ro=o(" \u2014 "),XO=a("a"),kRo=o("RemBertForCausalLM"),SRo=o(" (RemBERT model)"),RRo=l(),A2=a("li"),Lhe=a("strong"),PRo=o("roberta"),BRo=o(" \u2014 "),zO=a("a"),IRo=o("RobertaForCausalLM"),NRo=o(" (RoBERTa model)"),qRo=l(),L2=a("li"),yhe=a("strong"),jRo=o("roformer"),DRo=o(" \u2014 "),WO=a("a"),GRo=o("RoFormerForCausalLM"),ORo=o(" (RoFormer model)"),VRo=l(),y2=a("li"),xhe=a("strong"),XRo=o("speech_to_text_2"),zRo=o(" \u2014 "),QO=a("a"),WRo=o("Speech2Text2ForCausalLM"),QRo=o(" (Speech2Text2 model)"),HRo=l(),x2=a("li"),$he=a("strong"),URo=o("transfo-xl"),JRo=o(" \u2014 "),HO=a("a"),YRo=o("TransfoXLLMHeadModel"),KRo=o(" (Transformer-XL model)"),ZRo=l(),$2=a("li"),khe=a("strong"),ePo=o("trocr"),oPo=o(" \u2014 "),UO=a("a"),rPo=o("TrOCRForCausalLM"),tPo=o(" (TrOCR model)"),aPo=l(),k2=a("li"),She=a("strong"),nPo=o("xglm"),sPo=o(" \u2014 "),JO=a("a"),lPo=o("XGLMForCausalLM"),iPo=o(" (XGLM model)"),dPo=l(),S2=a("li"),Rhe=a("strong"),cPo=o("xlm"),fPo=o(" \u2014 "),YO=a("a"),mPo=o("XLMWithLMHeadModel"),gPo=o(" (XLM model)"),hPo=l(),R2=a("li"),Phe=a("strong"),pPo=o("xlm-prophetnet"),_Po=o(" \u2014 "),KO=a("a"),uPo=o("XLMProphetNetForCausalLM"),bPo=o(" (XLM-ProphetNet model)"),vPo=l(),P2=a("li"),Bhe=a("strong"),FPo=o("xlm-roberta"),TPo=o(" \u2014 "),ZO=a("a"),MPo=o("XLMRobertaForCausalLM"),EPo=o(" (XLM-RoBERTa model)"),CPo=l(),B2=a("li"),Ihe=a("strong"),wPo=o("xlm-roberta-xl"),APo=o(" \u2014 "),eV=a("a"),LPo=o("XLMRobertaXLForCausalLM"),yPo=o(" (XLM-RoBERTa-XL model)"),xPo=l(),I2=a("li"),Nhe=a("strong"),$Po=o("xlnet"),kPo=o(" \u2014 "),oV=a("a"),SPo=o("XLNetLMHeadModel"),RPo=o(" (XLNet model)"),PPo=l(),N2=a("p"),BPo=o("The model is set in evaluation mode by default using "),qhe=a("code"),IPo=o("model.eval()"),NPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jhe=a("code"),qPo=o("model.train()"),jPo=l(),F(q2.$$.fragment),JXe=l(),Ki=a("h2"),j2=a("a"),Dhe=a("span"),F(Z6.$$.fragment),DPo=l(),Ghe=a("span"),GPo=o("AutoModelForMaskedLM"),YXe=l(),Ro=a("div"),F(eL.$$.fragment),OPo=l(),Zi=a("p"),VPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),rV=a("a"),XPo=o("from_pretrained()"),zPo=o(" class method or the "),tV=a("a"),WPo=o("from_config()"),QPo=o(` class
method.`),HPo=l(),oL=a("p"),UPo=o("This class cannot be instantiated directly using "),Ohe=a("code"),JPo=o("__init__()"),YPo=o(" (throws an error)."),KPo=l(),ft=a("div"),F(rL.$$.fragment),ZPo=l(),Vhe=a("p"),eBo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),oBo=l(),ed=a("p"),rBo=o(`Note:
Loading a model from its configuration file does `),Xhe=a("strong"),tBo=o("not"),aBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aV=a("a"),nBo=o("from_pretrained()"),sBo=o(" to load the model weights."),lBo=l(),F(D2.$$.fragment),iBo=l(),eo=a("div"),F(tL.$$.fragment),dBo=l(),zhe=a("p"),cBo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),fBo=l(),ja=a("p"),mBo=o("The model class to instantiate is selected based on the "),Whe=a("code"),gBo=o("model_type"),hBo=o(` property of the config object (either
passed as an argument or loaded from `),Qhe=a("code"),pBo=o("pretrained_model_name_or_path"),_Bo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hhe=a("code"),uBo=o("pretrained_model_name_or_path"),bBo=o(":"),vBo=l(),Q=a("ul"),G2=a("li"),Uhe=a("strong"),FBo=o("albert"),TBo=o(" \u2014 "),nV=a("a"),MBo=o("AlbertForMaskedLM"),EBo=o(" (ALBERT model)"),CBo=l(),O2=a("li"),Jhe=a("strong"),wBo=o("bart"),ABo=o(" \u2014 "),sV=a("a"),LBo=o("BartForConditionalGeneration"),yBo=o(" (BART model)"),xBo=l(),V2=a("li"),Yhe=a("strong"),$Bo=o("bert"),kBo=o(" \u2014 "),lV=a("a"),SBo=o("BertForMaskedLM"),RBo=o(" (BERT model)"),PBo=l(),X2=a("li"),Khe=a("strong"),BBo=o("big_bird"),IBo=o(" \u2014 "),iV=a("a"),NBo=o("BigBirdForMaskedLM"),qBo=o(" (BigBird model)"),jBo=l(),z2=a("li"),Zhe=a("strong"),DBo=o("camembert"),GBo=o(" \u2014 "),dV=a("a"),OBo=o("CamembertForMaskedLM"),VBo=o(" (CamemBERT model)"),XBo=l(),W2=a("li"),epe=a("strong"),zBo=o("convbert"),WBo=o(" \u2014 "),cV=a("a"),QBo=o("ConvBertForMaskedLM"),HBo=o(" (ConvBERT model)"),UBo=l(),Q2=a("li"),ope=a("strong"),JBo=o("data2vec-text"),YBo=o(" \u2014 "),fV=a("a"),KBo=o("Data2VecTextForMaskedLM"),ZBo=o(" (Data2VecText model)"),eIo=l(),H2=a("li"),rpe=a("strong"),oIo=o("deberta"),rIo=o(" \u2014 "),mV=a("a"),tIo=o("DebertaForMaskedLM"),aIo=o(" (DeBERTa model)"),nIo=l(),U2=a("li"),tpe=a("strong"),sIo=o("deberta-v2"),lIo=o(" \u2014 "),gV=a("a"),iIo=o("DebertaV2ForMaskedLM"),dIo=o(" (DeBERTa-v2 model)"),cIo=l(),J2=a("li"),ape=a("strong"),fIo=o("distilbert"),mIo=o(" \u2014 "),hV=a("a"),gIo=o("DistilBertForMaskedLM"),hIo=o(" (DistilBERT model)"),pIo=l(),Y2=a("li"),npe=a("strong"),_Io=o("electra"),uIo=o(" \u2014 "),pV=a("a"),bIo=o("ElectraForMaskedLM"),vIo=o(" (ELECTRA model)"),FIo=l(),K2=a("li"),spe=a("strong"),TIo=o("flaubert"),MIo=o(" \u2014 "),_V=a("a"),EIo=o("FlaubertWithLMHeadModel"),CIo=o(" (FlauBERT model)"),wIo=l(),Z2=a("li"),lpe=a("strong"),AIo=o("fnet"),LIo=o(" \u2014 "),uV=a("a"),yIo=o("FNetForMaskedLM"),xIo=o(" (FNet model)"),$Io=l(),eb=a("li"),ipe=a("strong"),kIo=o("funnel"),SIo=o(" \u2014 "),bV=a("a"),RIo=o("FunnelForMaskedLM"),PIo=o(" (Funnel Transformer model)"),BIo=l(),ob=a("li"),dpe=a("strong"),IIo=o("ibert"),NIo=o(" \u2014 "),vV=a("a"),qIo=o("IBertForMaskedLM"),jIo=o(" (I-BERT model)"),DIo=l(),rb=a("li"),cpe=a("strong"),GIo=o("layoutlm"),OIo=o(" \u2014 "),FV=a("a"),VIo=o("LayoutLMForMaskedLM"),XIo=o(" (LayoutLM model)"),zIo=l(),tb=a("li"),fpe=a("strong"),WIo=o("longformer"),QIo=o(" \u2014 "),TV=a("a"),HIo=o("LongformerForMaskedLM"),UIo=o(" (Longformer model)"),JIo=l(),ab=a("li"),mpe=a("strong"),YIo=o("luke"),KIo=o(" \u2014 "),MV=a("a"),ZIo=o("LukeForMaskedLM"),eNo=o(" (LUKE model)"),oNo=l(),nb=a("li"),gpe=a("strong"),rNo=o("mbart"),tNo=o(" \u2014 "),EV=a("a"),aNo=o("MBartForConditionalGeneration"),nNo=o(" (mBART model)"),sNo=l(),sb=a("li"),hpe=a("strong"),lNo=o("megatron-bert"),iNo=o(" \u2014 "),CV=a("a"),dNo=o("MegatronBertForMaskedLM"),cNo=o(" (Megatron-BERT model)"),fNo=l(),lb=a("li"),ppe=a("strong"),mNo=o("mobilebert"),gNo=o(" \u2014 "),wV=a("a"),hNo=o("MobileBertForMaskedLM"),pNo=o(" (MobileBERT model)"),_No=l(),ib=a("li"),_pe=a("strong"),uNo=o("mpnet"),bNo=o(" \u2014 "),AV=a("a"),vNo=o("MPNetForMaskedLM"),FNo=o(" (MPNet model)"),TNo=l(),db=a("li"),upe=a("strong"),MNo=o("mvp"),ENo=o(" \u2014 "),LV=a("a"),CNo=o("MvpForConditionalGeneration"),wNo=o(" (MVP model)"),ANo=l(),cb=a("li"),bpe=a("strong"),LNo=o("nezha"),yNo=o(" \u2014 "),yV=a("a"),xNo=o("NezhaForMaskedLM"),$No=o(" (Nezha model)"),kNo=l(),fb=a("li"),vpe=a("strong"),SNo=o("nystromformer"),RNo=o(" \u2014 "),xV=a("a"),PNo=o("NystromformerForMaskedLM"),BNo=o(" (Nystr\xF6mformer model)"),INo=l(),mb=a("li"),Fpe=a("strong"),NNo=o("perceiver"),qNo=o(" \u2014 "),$V=a("a"),jNo=o("PerceiverForMaskedLM"),DNo=o(" (Perceiver model)"),GNo=l(),gb=a("li"),Tpe=a("strong"),ONo=o("qdqbert"),VNo=o(" \u2014 "),kV=a("a"),XNo=o("QDQBertForMaskedLM"),zNo=o(" (QDQBert model)"),WNo=l(),hb=a("li"),Mpe=a("strong"),QNo=o("reformer"),HNo=o(" \u2014 "),SV=a("a"),UNo=o("ReformerForMaskedLM"),JNo=o(" (Reformer model)"),YNo=l(),pb=a("li"),Epe=a("strong"),KNo=o("rembert"),ZNo=o(" \u2014 "),RV=a("a"),eqo=o("RemBertForMaskedLM"),oqo=o(" (RemBERT model)"),rqo=l(),_b=a("li"),Cpe=a("strong"),tqo=o("roberta"),aqo=o(" \u2014 "),PV=a("a"),nqo=o("RobertaForMaskedLM"),sqo=o(" (RoBERTa model)"),lqo=l(),ub=a("li"),wpe=a("strong"),iqo=o("roformer"),dqo=o(" \u2014 "),BV=a("a"),cqo=o("RoFormerForMaskedLM"),fqo=o(" (RoFormer model)"),mqo=l(),bb=a("li"),Ape=a("strong"),gqo=o("squeezebert"),hqo=o(" \u2014 "),IV=a("a"),pqo=o("SqueezeBertForMaskedLM"),_qo=o(" (SqueezeBERT model)"),uqo=l(),vb=a("li"),Lpe=a("strong"),bqo=o("tapas"),vqo=o(" \u2014 "),NV=a("a"),Fqo=o("TapasForMaskedLM"),Tqo=o(" (TAPAS model)"),Mqo=l(),Fb=a("li"),ype=a("strong"),Eqo=o("wav2vec2"),Cqo=o(" \u2014 "),xpe=a("code"),wqo=o("Wav2Vec2ForMaskedLM"),Aqo=o(" (Wav2Vec2 model)"),Lqo=l(),Tb=a("li"),$pe=a("strong"),yqo=o("xlm"),xqo=o(" \u2014 "),qV=a("a"),$qo=o("XLMWithLMHeadModel"),kqo=o(" (XLM model)"),Sqo=l(),Mb=a("li"),kpe=a("strong"),Rqo=o("xlm-roberta"),Pqo=o(" \u2014 "),jV=a("a"),Bqo=o("XLMRobertaForMaskedLM"),Iqo=o(" (XLM-RoBERTa model)"),Nqo=l(),Eb=a("li"),Spe=a("strong"),qqo=o("xlm-roberta-xl"),jqo=o(" \u2014 "),DV=a("a"),Dqo=o("XLMRobertaXLForMaskedLM"),Gqo=o(" (XLM-RoBERTa-XL model)"),Oqo=l(),Cb=a("li"),Rpe=a("strong"),Vqo=o("yoso"),Xqo=o(" \u2014 "),GV=a("a"),zqo=o("YosoForMaskedLM"),Wqo=o(" (YOSO model)"),Qqo=l(),wb=a("p"),Hqo=o("The model is set in evaluation mode by default using "),Ppe=a("code"),Uqo=o("model.eval()"),Jqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bpe=a("code"),Yqo=o("model.train()"),Kqo=l(),F(Ab.$$.fragment),KXe=l(),od=a("h2"),Lb=a("a"),Ipe=a("span"),F(aL.$$.fragment),Zqo=l(),Npe=a("span"),ejo=o("AutoModelForSeq2SeqLM"),ZXe=l(),Po=a("div"),F(nL.$$.fragment),ojo=l(),rd=a("p"),rjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),OV=a("a"),tjo=o("from_pretrained()"),ajo=o(" class method or the "),VV=a("a"),njo=o("from_config()"),sjo=o(` class
method.`),ljo=l(),sL=a("p"),ijo=o("This class cannot be instantiated directly using "),qpe=a("code"),djo=o("__init__()"),cjo=o(" (throws an error)."),fjo=l(),mt=a("div"),F(lL.$$.fragment),mjo=l(),jpe=a("p"),gjo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),hjo=l(),td=a("p"),pjo=o(`Note:
Loading a model from its configuration file does `),Dpe=a("strong"),_jo=o("not"),ujo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XV=a("a"),bjo=o("from_pretrained()"),vjo=o(" to load the model weights."),Fjo=l(),F(yb.$$.fragment),Tjo=l(),oo=a("div"),F(iL.$$.fragment),Mjo=l(),Gpe=a("p"),Ejo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Cjo=l(),Da=a("p"),wjo=o("The model class to instantiate is selected based on the "),Ope=a("code"),Ajo=o("model_type"),Ljo=o(` property of the config object (either
passed as an argument or loaded from `),Vpe=a("code"),yjo=o("pretrained_model_name_or_path"),xjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xpe=a("code"),$jo=o("pretrained_model_name_or_path"),kjo=o(":"),Sjo=l(),me=a("ul"),xb=a("li"),zpe=a("strong"),Rjo=o("bart"),Pjo=o(" \u2014 "),zV=a("a"),Bjo=o("BartForConditionalGeneration"),Ijo=o(" (BART model)"),Njo=l(),$b=a("li"),Wpe=a("strong"),qjo=o("bigbird_pegasus"),jjo=o(" \u2014 "),WV=a("a"),Djo=o("BigBirdPegasusForConditionalGeneration"),Gjo=o(" (BigBird-Pegasus model)"),Ojo=l(),kb=a("li"),Qpe=a("strong"),Vjo=o("blenderbot"),Xjo=o(" \u2014 "),QV=a("a"),zjo=o("BlenderbotForConditionalGeneration"),Wjo=o(" (Blenderbot model)"),Qjo=l(),Sb=a("li"),Hpe=a("strong"),Hjo=o("blenderbot-small"),Ujo=o(" \u2014 "),HV=a("a"),Jjo=o("BlenderbotSmallForConditionalGeneration"),Yjo=o(" (BlenderbotSmall model)"),Kjo=l(),Rb=a("li"),Upe=a("strong"),Zjo=o("encoder-decoder"),eDo=o(" \u2014 "),UV=a("a"),oDo=o("EncoderDecoderModel"),rDo=o(" (Encoder decoder model)"),tDo=l(),Pb=a("li"),Jpe=a("strong"),aDo=o("fsmt"),nDo=o(" \u2014 "),JV=a("a"),sDo=o("FSMTForConditionalGeneration"),lDo=o(" (FairSeq Machine-Translation model)"),iDo=l(),Bb=a("li"),Ype=a("strong"),dDo=o("led"),cDo=o(" \u2014 "),YV=a("a"),fDo=o("LEDForConditionalGeneration"),mDo=o(" (LED model)"),gDo=l(),Ib=a("li"),Kpe=a("strong"),hDo=o("longt5"),pDo=o(" \u2014 "),KV=a("a"),_Do=o("LongT5ForConditionalGeneration"),uDo=o(" (LongT5 model)"),bDo=l(),Nb=a("li"),Zpe=a("strong"),vDo=o("m2m_100"),FDo=o(" \u2014 "),ZV=a("a"),TDo=o("M2M100ForConditionalGeneration"),MDo=o(" (M2M100 model)"),EDo=l(),qb=a("li"),e_e=a("strong"),CDo=o("marian"),wDo=o(" \u2014 "),eX=a("a"),ADo=o("MarianMTModel"),LDo=o(" (Marian model)"),yDo=l(),jb=a("li"),o_e=a("strong"),xDo=o("mbart"),$Do=o(" \u2014 "),oX=a("a"),kDo=o("MBartForConditionalGeneration"),SDo=o(" (mBART model)"),RDo=l(),Db=a("li"),r_e=a("strong"),PDo=o("mt5"),BDo=o(" \u2014 "),rX=a("a"),IDo=o("MT5ForConditionalGeneration"),NDo=o(" (MT5 model)"),qDo=l(),Gb=a("li"),t_e=a("strong"),jDo=o("mvp"),DDo=o(" \u2014 "),tX=a("a"),GDo=o("MvpForConditionalGeneration"),ODo=o(" (MVP model)"),VDo=l(),Ob=a("li"),a_e=a("strong"),XDo=o("nllb"),zDo=o(" \u2014 "),aX=a("a"),WDo=o("M2M100ForConditionalGeneration"),QDo=o(" (NLLB model)"),HDo=l(),Vb=a("li"),n_e=a("strong"),UDo=o("pegasus"),JDo=o(" \u2014 "),nX=a("a"),YDo=o("PegasusForConditionalGeneration"),KDo=o(" (Pegasus model)"),ZDo=l(),Xb=a("li"),s_e=a("strong"),eGo=o("plbart"),oGo=o(" \u2014 "),sX=a("a"),rGo=o("PLBartForConditionalGeneration"),tGo=o(" (PLBart model)"),aGo=l(),zb=a("li"),l_e=a("strong"),nGo=o("prophetnet"),sGo=o(" \u2014 "),lX=a("a"),lGo=o("ProphetNetForConditionalGeneration"),iGo=o(" (ProphetNet model)"),dGo=l(),Wb=a("li"),i_e=a("strong"),cGo=o("t5"),fGo=o(" \u2014 "),iX=a("a"),mGo=o("T5ForConditionalGeneration"),gGo=o(" (T5 model)"),hGo=l(),Qb=a("li"),d_e=a("strong"),pGo=o("xlm-prophetnet"),_Go=o(" \u2014 "),dX=a("a"),uGo=o("XLMProphetNetForConditionalGeneration"),bGo=o(" (XLM-ProphetNet model)"),vGo=l(),Hb=a("p"),FGo=o("The model is set in evaluation mode by default using "),c_e=a("code"),TGo=o("model.eval()"),MGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f_e=a("code"),EGo=o("model.train()"),CGo=l(),F(Ub.$$.fragment),eze=l(),ad=a("h2"),Jb=a("a"),m_e=a("span"),F(dL.$$.fragment),wGo=l(),g_e=a("span"),AGo=o("AutoModelForSequenceClassification"),oze=l(),Bo=a("div"),F(cL.$$.fragment),LGo=l(),nd=a("p"),yGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),cX=a("a"),xGo=o("from_pretrained()"),$Go=o(" class method or the "),fX=a("a"),kGo=o("from_config()"),SGo=o(` class
method.`),RGo=l(),fL=a("p"),PGo=o("This class cannot be instantiated directly using "),h_e=a("code"),BGo=o("__init__()"),IGo=o(" (throws an error)."),NGo=l(),gt=a("div"),F(mL.$$.fragment),qGo=l(),p_e=a("p"),jGo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),DGo=l(),sd=a("p"),GGo=o(`Note:
Loading a model from its configuration file does `),__e=a("strong"),OGo=o("not"),VGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mX=a("a"),XGo=o("from_pretrained()"),zGo=o(" to load the model weights."),WGo=l(),F(Yb.$$.fragment),QGo=l(),ro=a("div"),F(gL.$$.fragment),HGo=l(),u_e=a("p"),UGo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),JGo=l(),Ga=a("p"),YGo=o("The model class to instantiate is selected based on the "),b_e=a("code"),KGo=o("model_type"),ZGo=o(` property of the config object (either
passed as an argument or loaded from `),v_e=a("code"),eOo=o("pretrained_model_name_or_path"),oOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F_e=a("code"),rOo=o("pretrained_model_name_or_path"),tOo=o(":"),aOo=l(),N=a("ul"),Kb=a("li"),T_e=a("strong"),nOo=o("albert"),sOo=o(" \u2014 "),gX=a("a"),lOo=o("AlbertForSequenceClassification"),iOo=o(" (ALBERT model)"),dOo=l(),Zb=a("li"),M_e=a("strong"),cOo=o("bart"),fOo=o(" \u2014 "),hX=a("a"),mOo=o("BartForSequenceClassification"),gOo=o(" (BART model)"),hOo=l(),e3=a("li"),E_e=a("strong"),pOo=o("bert"),_Oo=o(" \u2014 "),pX=a("a"),uOo=o("BertForSequenceClassification"),bOo=o(" (BERT model)"),vOo=l(),o3=a("li"),C_e=a("strong"),FOo=o("big_bird"),TOo=o(" \u2014 "),_X=a("a"),MOo=o("BigBirdForSequenceClassification"),EOo=o(" (BigBird model)"),COo=l(),r3=a("li"),w_e=a("strong"),wOo=o("bigbird_pegasus"),AOo=o(" \u2014 "),uX=a("a"),LOo=o("BigBirdPegasusForSequenceClassification"),yOo=o(" (BigBird-Pegasus model)"),xOo=l(),t3=a("li"),A_e=a("strong"),$Oo=o("bloom"),kOo=o(" \u2014 "),bX=a("a"),SOo=o("BloomForSequenceClassification"),ROo=o(" (BLOOM model)"),POo=l(),a3=a("li"),L_e=a("strong"),BOo=o("camembert"),IOo=o(" \u2014 "),vX=a("a"),NOo=o("CamembertForSequenceClassification"),qOo=o(" (CamemBERT model)"),jOo=l(),n3=a("li"),y_e=a("strong"),DOo=o("canine"),GOo=o(" \u2014 "),FX=a("a"),OOo=o("CanineForSequenceClassification"),VOo=o(" (CANINE model)"),XOo=l(),s3=a("li"),x_e=a("strong"),zOo=o("convbert"),WOo=o(" \u2014 "),TX=a("a"),QOo=o("ConvBertForSequenceClassification"),HOo=o(" (ConvBERT model)"),UOo=l(),l3=a("li"),$_e=a("strong"),JOo=o("ctrl"),YOo=o(" \u2014 "),MX=a("a"),KOo=o("CTRLForSequenceClassification"),ZOo=o(" (CTRL model)"),eVo=l(),i3=a("li"),k_e=a("strong"),oVo=o("data2vec-text"),rVo=o(" \u2014 "),EX=a("a"),tVo=o("Data2VecTextForSequenceClassification"),aVo=o(" (Data2VecText model)"),nVo=l(),d3=a("li"),S_e=a("strong"),sVo=o("deberta"),lVo=o(" \u2014 "),CX=a("a"),iVo=o("DebertaForSequenceClassification"),dVo=o(" (DeBERTa model)"),cVo=l(),c3=a("li"),R_e=a("strong"),fVo=o("deberta-v2"),mVo=o(" \u2014 "),wX=a("a"),gVo=o("DebertaV2ForSequenceClassification"),hVo=o(" (DeBERTa-v2 model)"),pVo=l(),f3=a("li"),P_e=a("strong"),_Vo=o("distilbert"),uVo=o(" \u2014 "),AX=a("a"),bVo=o("DistilBertForSequenceClassification"),vVo=o(" (DistilBERT model)"),FVo=l(),m3=a("li"),B_e=a("strong"),TVo=o("electra"),MVo=o(" \u2014 "),LX=a("a"),EVo=o("ElectraForSequenceClassification"),CVo=o(" (ELECTRA model)"),wVo=l(),g3=a("li"),I_e=a("strong"),AVo=o("flaubert"),LVo=o(" \u2014 "),yX=a("a"),yVo=o("FlaubertForSequenceClassification"),xVo=o(" (FlauBERT model)"),$Vo=l(),h3=a("li"),N_e=a("strong"),kVo=o("fnet"),SVo=o(" \u2014 "),xX=a("a"),RVo=o("FNetForSequenceClassification"),PVo=o(" (FNet model)"),BVo=l(),p3=a("li"),q_e=a("strong"),IVo=o("funnel"),NVo=o(" \u2014 "),$X=a("a"),qVo=o("FunnelForSequenceClassification"),jVo=o(" (Funnel Transformer model)"),DVo=l(),_3=a("li"),j_e=a("strong"),GVo=o("gpt2"),OVo=o(" \u2014 "),kX=a("a"),VVo=o("GPT2ForSequenceClassification"),XVo=o(" (OpenAI GPT-2 model)"),zVo=l(),u3=a("li"),D_e=a("strong"),WVo=o("gpt_neo"),QVo=o(" \u2014 "),SX=a("a"),HVo=o("GPTNeoForSequenceClassification"),UVo=o(" (GPT Neo model)"),JVo=l(),b3=a("li"),G_e=a("strong"),YVo=o("gptj"),KVo=o(" \u2014 "),RX=a("a"),ZVo=o("GPTJForSequenceClassification"),eXo=o(" (GPT-J model)"),oXo=l(),v3=a("li"),O_e=a("strong"),rXo=o("ibert"),tXo=o(" \u2014 "),PX=a("a"),aXo=o("IBertForSequenceClassification"),nXo=o(" (I-BERT model)"),sXo=l(),F3=a("li"),V_e=a("strong"),lXo=o("layoutlm"),iXo=o(" \u2014 "),BX=a("a"),dXo=o("LayoutLMForSequenceClassification"),cXo=o(" (LayoutLM model)"),fXo=l(),T3=a("li"),X_e=a("strong"),mXo=o("layoutlmv2"),gXo=o(" \u2014 "),IX=a("a"),hXo=o("LayoutLMv2ForSequenceClassification"),pXo=o(" (LayoutLMv2 model)"),_Xo=l(),M3=a("li"),z_e=a("strong"),uXo=o("layoutlmv3"),bXo=o(" \u2014 "),NX=a("a"),vXo=o("LayoutLMv3ForSequenceClassification"),FXo=o(" (LayoutLMv3 model)"),TXo=l(),E3=a("li"),W_e=a("strong"),MXo=o("led"),EXo=o(" \u2014 "),qX=a("a"),CXo=o("LEDForSequenceClassification"),wXo=o(" (LED model)"),AXo=l(),C3=a("li"),Q_e=a("strong"),LXo=o("longformer"),yXo=o(" \u2014 "),jX=a("a"),xXo=o("LongformerForSequenceClassification"),$Xo=o(" (Longformer model)"),kXo=l(),w3=a("li"),H_e=a("strong"),SXo=o("mbart"),RXo=o(" \u2014 "),DX=a("a"),PXo=o("MBartForSequenceClassification"),BXo=o(" (mBART model)"),IXo=l(),A3=a("li"),U_e=a("strong"),NXo=o("megatron-bert"),qXo=o(" \u2014 "),GX=a("a"),jXo=o("MegatronBertForSequenceClassification"),DXo=o(" (Megatron-BERT model)"),GXo=l(),L3=a("li"),J_e=a("strong"),OXo=o("mobilebert"),VXo=o(" \u2014 "),OX=a("a"),XXo=o("MobileBertForSequenceClassification"),zXo=o(" (MobileBERT model)"),WXo=l(),y3=a("li"),Y_e=a("strong"),QXo=o("mpnet"),HXo=o(" \u2014 "),VX=a("a"),UXo=o("MPNetForSequenceClassification"),JXo=o(" (MPNet model)"),YXo=l(),x3=a("li"),K_e=a("strong"),KXo=o("mvp"),ZXo=o(" \u2014 "),XX=a("a"),ezo=o("MvpForSequenceClassification"),ozo=o(" (MVP model)"),rzo=l(),$3=a("li"),Z_e=a("strong"),tzo=o("nezha"),azo=o(" \u2014 "),zX=a("a"),nzo=o("NezhaForSequenceClassification"),szo=o(" (Nezha model)"),lzo=l(),k3=a("li"),eue=a("strong"),izo=o("nystromformer"),dzo=o(" \u2014 "),WX=a("a"),czo=o("NystromformerForSequenceClassification"),fzo=o(" (Nystr\xF6mformer model)"),mzo=l(),S3=a("li"),oue=a("strong"),gzo=o("openai-gpt"),hzo=o(" \u2014 "),QX=a("a"),pzo=o("OpenAIGPTForSequenceClassification"),_zo=o(" (OpenAI GPT model)"),uzo=l(),R3=a("li"),rue=a("strong"),bzo=o("perceiver"),vzo=o(" \u2014 "),HX=a("a"),Fzo=o("PerceiverForSequenceClassification"),Tzo=o(" (Perceiver model)"),Mzo=l(),P3=a("li"),tue=a("strong"),Ezo=o("plbart"),Czo=o(" \u2014 "),UX=a("a"),wzo=o("PLBartForSequenceClassification"),Azo=o(" (PLBart model)"),Lzo=l(),B3=a("li"),aue=a("strong"),yzo=o("qdqbert"),xzo=o(" \u2014 "),JX=a("a"),$zo=o("QDQBertForSequenceClassification"),kzo=o(" (QDQBert model)"),Szo=l(),I3=a("li"),nue=a("strong"),Rzo=o("reformer"),Pzo=o(" \u2014 "),YX=a("a"),Bzo=o("ReformerForSequenceClassification"),Izo=o(" (Reformer model)"),Nzo=l(),N3=a("li"),sue=a("strong"),qzo=o("rembert"),jzo=o(" \u2014 "),KX=a("a"),Dzo=o("RemBertForSequenceClassification"),Gzo=o(" (RemBERT model)"),Ozo=l(),q3=a("li"),lue=a("strong"),Vzo=o("roberta"),Xzo=o(" \u2014 "),ZX=a("a"),zzo=o("RobertaForSequenceClassification"),Wzo=o(" (RoBERTa model)"),Qzo=l(),j3=a("li"),iue=a("strong"),Hzo=o("roformer"),Uzo=o(" \u2014 "),ez=a("a"),Jzo=o("RoFormerForSequenceClassification"),Yzo=o(" (RoFormer model)"),Kzo=l(),D3=a("li"),due=a("strong"),Zzo=o("squeezebert"),eWo=o(" \u2014 "),oz=a("a"),oWo=o("SqueezeBertForSequenceClassification"),rWo=o(" (SqueezeBERT model)"),tWo=l(),G3=a("li"),cue=a("strong"),aWo=o("tapas"),nWo=o(" \u2014 "),rz=a("a"),sWo=o("TapasForSequenceClassification"),lWo=o(" (TAPAS model)"),iWo=l(),O3=a("li"),fue=a("strong"),dWo=o("transfo-xl"),cWo=o(" \u2014 "),tz=a("a"),fWo=o("TransfoXLForSequenceClassification"),mWo=o(" (Transformer-XL model)"),gWo=l(),V3=a("li"),mue=a("strong"),hWo=o("xlm"),pWo=o(" \u2014 "),az=a("a"),_Wo=o("XLMForSequenceClassification"),uWo=o(" (XLM model)"),bWo=l(),X3=a("li"),gue=a("strong"),vWo=o("xlm-roberta"),FWo=o(" \u2014 "),nz=a("a"),TWo=o("XLMRobertaForSequenceClassification"),MWo=o(" (XLM-RoBERTa model)"),EWo=l(),z3=a("li"),hue=a("strong"),CWo=o("xlm-roberta-xl"),wWo=o(" \u2014 "),sz=a("a"),AWo=o("XLMRobertaXLForSequenceClassification"),LWo=o(" (XLM-RoBERTa-XL model)"),yWo=l(),W3=a("li"),pue=a("strong"),xWo=o("xlnet"),$Wo=o(" \u2014 "),lz=a("a"),kWo=o("XLNetForSequenceClassification"),SWo=o(" (XLNet model)"),RWo=l(),Q3=a("li"),_ue=a("strong"),PWo=o("yoso"),BWo=o(" \u2014 "),iz=a("a"),IWo=o("YosoForSequenceClassification"),NWo=o(" (YOSO model)"),qWo=l(),H3=a("p"),jWo=o("The model is set in evaluation mode by default using "),uue=a("code"),DWo=o("model.eval()"),GWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bue=a("code"),OWo=o("model.train()"),VWo=l(),F(U3.$$.fragment),rze=l(),ld=a("h2"),J3=a("a"),vue=a("span"),F(hL.$$.fragment),XWo=l(),Fue=a("span"),zWo=o("AutoModelForMultipleChoice"),tze=l(),Io=a("div"),F(pL.$$.fragment),WWo=l(),id=a("p"),QWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),dz=a("a"),HWo=o("from_pretrained()"),UWo=o(" class method or the "),cz=a("a"),JWo=o("from_config()"),YWo=o(` class
method.`),KWo=l(),_L=a("p"),ZWo=o("This class cannot be instantiated directly using "),Tue=a("code"),eQo=o("__init__()"),oQo=o(" (throws an error)."),rQo=l(),ht=a("div"),F(uL.$$.fragment),tQo=l(),Mue=a("p"),aQo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),nQo=l(),dd=a("p"),sQo=o(`Note:
Loading a model from its configuration file does `),Eue=a("strong"),lQo=o("not"),iQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fz=a("a"),dQo=o("from_pretrained()"),cQo=o(" to load the model weights."),fQo=l(),F(Y3.$$.fragment),mQo=l(),to=a("div"),F(bL.$$.fragment),gQo=l(),Cue=a("p"),hQo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),pQo=l(),Oa=a("p"),_Qo=o("The model class to instantiate is selected based on the "),wue=a("code"),uQo=o("model_type"),bQo=o(` property of the config object (either
passed as an argument or loaded from `),Aue=a("code"),vQo=o("pretrained_model_name_or_path"),FQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lue=a("code"),TQo=o("pretrained_model_name_or_path"),MQo=o(":"),EQo=l(),Z=a("ul"),K3=a("li"),yue=a("strong"),CQo=o("albert"),wQo=o(" \u2014 "),mz=a("a"),AQo=o("AlbertForMultipleChoice"),LQo=o(" (ALBERT model)"),yQo=l(),Z3=a("li"),xue=a("strong"),xQo=o("bert"),$Qo=o(" \u2014 "),gz=a("a"),kQo=o("BertForMultipleChoice"),SQo=o(" (BERT model)"),RQo=l(),ev=a("li"),$ue=a("strong"),PQo=o("big_bird"),BQo=o(" \u2014 "),hz=a("a"),IQo=o("BigBirdForMultipleChoice"),NQo=o(" (BigBird model)"),qQo=l(),ov=a("li"),kue=a("strong"),jQo=o("camembert"),DQo=o(" \u2014 "),pz=a("a"),GQo=o("CamembertForMultipleChoice"),OQo=o(" (CamemBERT model)"),VQo=l(),rv=a("li"),Sue=a("strong"),XQo=o("canine"),zQo=o(" \u2014 "),_z=a("a"),WQo=o("CanineForMultipleChoice"),QQo=o(" (CANINE model)"),HQo=l(),tv=a("li"),Rue=a("strong"),UQo=o("convbert"),JQo=o(" \u2014 "),uz=a("a"),YQo=o("ConvBertForMultipleChoice"),KQo=o(" (ConvBERT model)"),ZQo=l(),av=a("li"),Pue=a("strong"),eHo=o("data2vec-text"),oHo=o(" \u2014 "),bz=a("a"),rHo=o("Data2VecTextForMultipleChoice"),tHo=o(" (Data2VecText model)"),aHo=l(),nv=a("li"),Bue=a("strong"),nHo=o("deberta-v2"),sHo=o(" \u2014 "),vz=a("a"),lHo=o("DebertaV2ForMultipleChoice"),iHo=o(" (DeBERTa-v2 model)"),dHo=l(),sv=a("li"),Iue=a("strong"),cHo=o("distilbert"),fHo=o(" \u2014 "),Fz=a("a"),mHo=o("DistilBertForMultipleChoice"),gHo=o(" (DistilBERT model)"),hHo=l(),lv=a("li"),Nue=a("strong"),pHo=o("electra"),_Ho=o(" \u2014 "),Tz=a("a"),uHo=o("ElectraForMultipleChoice"),bHo=o(" (ELECTRA model)"),vHo=l(),iv=a("li"),que=a("strong"),FHo=o("flaubert"),THo=o(" \u2014 "),Mz=a("a"),MHo=o("FlaubertForMultipleChoice"),EHo=o(" (FlauBERT model)"),CHo=l(),dv=a("li"),jue=a("strong"),wHo=o("fnet"),AHo=o(" \u2014 "),Ez=a("a"),LHo=o("FNetForMultipleChoice"),yHo=o(" (FNet model)"),xHo=l(),cv=a("li"),Due=a("strong"),$Ho=o("funnel"),kHo=o(" \u2014 "),Cz=a("a"),SHo=o("FunnelForMultipleChoice"),RHo=o(" (Funnel Transformer model)"),PHo=l(),fv=a("li"),Gue=a("strong"),BHo=o("ibert"),IHo=o(" \u2014 "),wz=a("a"),NHo=o("IBertForMultipleChoice"),qHo=o(" (I-BERT model)"),jHo=l(),mv=a("li"),Oue=a("strong"),DHo=o("longformer"),GHo=o(" \u2014 "),Az=a("a"),OHo=o("LongformerForMultipleChoice"),VHo=o(" (Longformer model)"),XHo=l(),gv=a("li"),Vue=a("strong"),zHo=o("megatron-bert"),WHo=o(" \u2014 "),Lz=a("a"),QHo=o("MegatronBertForMultipleChoice"),HHo=o(" (Megatron-BERT model)"),UHo=l(),hv=a("li"),Xue=a("strong"),JHo=o("mobilebert"),YHo=o(" \u2014 "),yz=a("a"),KHo=o("MobileBertForMultipleChoice"),ZHo=o(" (MobileBERT model)"),eUo=l(),pv=a("li"),zue=a("strong"),oUo=o("mpnet"),rUo=o(" \u2014 "),xz=a("a"),tUo=o("MPNetForMultipleChoice"),aUo=o(" (MPNet model)"),nUo=l(),_v=a("li"),Wue=a("strong"),sUo=o("nezha"),lUo=o(" \u2014 "),$z=a("a"),iUo=o("NezhaForMultipleChoice"),dUo=o(" (Nezha model)"),cUo=l(),uv=a("li"),Que=a("strong"),fUo=o("nystromformer"),mUo=o(" \u2014 "),kz=a("a"),gUo=o("NystromformerForMultipleChoice"),hUo=o(" (Nystr\xF6mformer model)"),pUo=l(),bv=a("li"),Hue=a("strong"),_Uo=o("qdqbert"),uUo=o(" \u2014 "),Sz=a("a"),bUo=o("QDQBertForMultipleChoice"),vUo=o(" (QDQBert model)"),FUo=l(),vv=a("li"),Uue=a("strong"),TUo=o("rembert"),MUo=o(" \u2014 "),Rz=a("a"),EUo=o("RemBertForMultipleChoice"),CUo=o(" (RemBERT model)"),wUo=l(),Fv=a("li"),Jue=a("strong"),AUo=o("roberta"),LUo=o(" \u2014 "),Pz=a("a"),yUo=o("RobertaForMultipleChoice"),xUo=o(" (RoBERTa model)"),$Uo=l(),Tv=a("li"),Yue=a("strong"),kUo=o("roformer"),SUo=o(" \u2014 "),Bz=a("a"),RUo=o("RoFormerForMultipleChoice"),PUo=o(" (RoFormer model)"),BUo=l(),Mv=a("li"),Kue=a("strong"),IUo=o("squeezebert"),NUo=o(" \u2014 "),Iz=a("a"),qUo=o("SqueezeBertForMultipleChoice"),jUo=o(" (SqueezeBERT model)"),DUo=l(),Ev=a("li"),Zue=a("strong"),GUo=o("xlm"),OUo=o(" \u2014 "),Nz=a("a"),VUo=o("XLMForMultipleChoice"),XUo=o(" (XLM model)"),zUo=l(),Cv=a("li"),e1e=a("strong"),WUo=o("xlm-roberta"),QUo=o(" \u2014 "),qz=a("a"),HUo=o("XLMRobertaForMultipleChoice"),UUo=o(" (XLM-RoBERTa model)"),JUo=l(),wv=a("li"),o1e=a("strong"),YUo=o("xlm-roberta-xl"),KUo=o(" \u2014 "),jz=a("a"),ZUo=o("XLMRobertaXLForMultipleChoice"),eJo=o(" (XLM-RoBERTa-XL model)"),oJo=l(),Av=a("li"),r1e=a("strong"),rJo=o("xlnet"),tJo=o(" \u2014 "),Dz=a("a"),aJo=o("XLNetForMultipleChoice"),nJo=o(" (XLNet model)"),sJo=l(),Lv=a("li"),t1e=a("strong"),lJo=o("yoso"),iJo=o(" \u2014 "),Gz=a("a"),dJo=o("YosoForMultipleChoice"),cJo=o(" (YOSO model)"),fJo=l(),yv=a("p"),mJo=o("The model is set in evaluation mode by default using "),a1e=a("code"),gJo=o("model.eval()"),hJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n1e=a("code"),pJo=o("model.train()"),_Jo=l(),F(xv.$$.fragment),aze=l(),cd=a("h2"),$v=a("a"),s1e=a("span"),F(vL.$$.fragment),uJo=l(),l1e=a("span"),bJo=o("AutoModelForNextSentencePrediction"),nze=l(),No=a("div"),F(FL.$$.fragment),vJo=l(),fd=a("p"),FJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Oz=a("a"),TJo=o("from_pretrained()"),MJo=o(" class method or the "),Vz=a("a"),EJo=o("from_config()"),CJo=o(` class
method.`),wJo=l(),TL=a("p"),AJo=o("This class cannot be instantiated directly using "),i1e=a("code"),LJo=o("__init__()"),yJo=o(" (throws an error)."),xJo=l(),pt=a("div"),F(ML.$$.fragment),$Jo=l(),d1e=a("p"),kJo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),SJo=l(),md=a("p"),RJo=o(`Note:
Loading a model from its configuration file does `),c1e=a("strong"),PJo=o("not"),BJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xz=a("a"),IJo=o("from_pretrained()"),NJo=o(" to load the model weights."),qJo=l(),F(kv.$$.fragment),jJo=l(),ao=a("div"),F(EL.$$.fragment),DJo=l(),f1e=a("p"),GJo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),OJo=l(),Va=a("p"),VJo=o("The model class to instantiate is selected based on the "),m1e=a("code"),XJo=o("model_type"),zJo=o(` property of the config object (either
passed as an argument or loaded from `),g1e=a("code"),WJo=o("pretrained_model_name_or_path"),QJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h1e=a("code"),HJo=o("pretrained_model_name_or_path"),UJo=o(":"),JJo=l(),qo=a("ul"),Sv=a("li"),p1e=a("strong"),YJo=o("bert"),KJo=o(" \u2014 "),zz=a("a"),ZJo=o("BertForNextSentencePrediction"),eYo=o(" (BERT model)"),oYo=l(),Rv=a("li"),_1e=a("strong"),rYo=o("fnet"),tYo=o(" \u2014 "),Wz=a("a"),aYo=o("FNetForNextSentencePrediction"),nYo=o(" (FNet model)"),sYo=l(),Pv=a("li"),u1e=a("strong"),lYo=o("megatron-bert"),iYo=o(" \u2014 "),Qz=a("a"),dYo=o("MegatronBertForNextSentencePrediction"),cYo=o(" (Megatron-BERT model)"),fYo=l(),Bv=a("li"),b1e=a("strong"),mYo=o("mobilebert"),gYo=o(" \u2014 "),Hz=a("a"),hYo=o("MobileBertForNextSentencePrediction"),pYo=o(" (MobileBERT model)"),_Yo=l(),Iv=a("li"),v1e=a("strong"),uYo=o("nezha"),bYo=o(" \u2014 "),Uz=a("a"),vYo=o("NezhaForNextSentencePrediction"),FYo=o(" (Nezha model)"),TYo=l(),Nv=a("li"),F1e=a("strong"),MYo=o("qdqbert"),EYo=o(" \u2014 "),Jz=a("a"),CYo=o("QDQBertForNextSentencePrediction"),wYo=o(" (QDQBert model)"),AYo=l(),qv=a("p"),LYo=o("The model is set in evaluation mode by default using "),T1e=a("code"),yYo=o("model.eval()"),xYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M1e=a("code"),$Yo=o("model.train()"),kYo=l(),F(jv.$$.fragment),sze=l(),gd=a("h2"),Dv=a("a"),E1e=a("span"),F(CL.$$.fragment),SYo=l(),C1e=a("span"),RYo=o("AutoModelForTokenClassification"),lze=l(),jo=a("div"),F(wL.$$.fragment),PYo=l(),hd=a("p"),BYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Yz=a("a"),IYo=o("from_pretrained()"),NYo=o(" class method or the "),Kz=a("a"),qYo=o("from_config()"),jYo=o(` class
method.`),DYo=l(),AL=a("p"),GYo=o("This class cannot be instantiated directly using "),w1e=a("code"),OYo=o("__init__()"),VYo=o(" (throws an error)."),XYo=l(),_t=a("div"),F(LL.$$.fragment),zYo=l(),A1e=a("p"),WYo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),QYo=l(),pd=a("p"),HYo=o(`Note:
Loading a model from its configuration file does `),L1e=a("strong"),UYo=o("not"),JYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zz=a("a"),YYo=o("from_pretrained()"),KYo=o(" to load the model weights."),ZYo=l(),F(Gv.$$.fragment),eKo=l(),no=a("div"),F(yL.$$.fragment),oKo=l(),y1e=a("p"),rKo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),tKo=l(),Xa=a("p"),aKo=o("The model class to instantiate is selected based on the "),x1e=a("code"),nKo=o("model_type"),sKo=o(` property of the config object (either
passed as an argument or loaded from `),$1e=a("code"),lKo=o("pretrained_model_name_or_path"),iKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k1e=a("code"),dKo=o("pretrained_model_name_or_path"),cKo=o(":"),fKo=l(),U=a("ul"),Ov=a("li"),S1e=a("strong"),mKo=o("albert"),gKo=o(" \u2014 "),eW=a("a"),hKo=o("AlbertForTokenClassification"),pKo=o(" (ALBERT model)"),_Ko=l(),Vv=a("li"),R1e=a("strong"),uKo=o("bert"),bKo=o(" \u2014 "),oW=a("a"),vKo=o("BertForTokenClassification"),FKo=o(" (BERT model)"),TKo=l(),Xv=a("li"),P1e=a("strong"),MKo=o("big_bird"),EKo=o(" \u2014 "),rW=a("a"),CKo=o("BigBirdForTokenClassification"),wKo=o(" (BigBird model)"),AKo=l(),zv=a("li"),B1e=a("strong"),LKo=o("bloom"),yKo=o(" \u2014 "),tW=a("a"),xKo=o("BloomForTokenClassification"),$Ko=o(" (BLOOM model)"),kKo=l(),Wv=a("li"),I1e=a("strong"),SKo=o("camembert"),RKo=o(" \u2014 "),aW=a("a"),PKo=o("CamembertForTokenClassification"),BKo=o(" (CamemBERT model)"),IKo=l(),Qv=a("li"),N1e=a("strong"),NKo=o("canine"),qKo=o(" \u2014 "),nW=a("a"),jKo=o("CanineForTokenClassification"),DKo=o(" (CANINE model)"),GKo=l(),Hv=a("li"),q1e=a("strong"),OKo=o("convbert"),VKo=o(" \u2014 "),sW=a("a"),XKo=o("ConvBertForTokenClassification"),zKo=o(" (ConvBERT model)"),WKo=l(),Uv=a("li"),j1e=a("strong"),QKo=o("data2vec-text"),HKo=o(" \u2014 "),lW=a("a"),UKo=o("Data2VecTextForTokenClassification"),JKo=o(" (Data2VecText model)"),YKo=l(),Jv=a("li"),D1e=a("strong"),KKo=o("deberta"),ZKo=o(" \u2014 "),iW=a("a"),eZo=o("DebertaForTokenClassification"),oZo=o(" (DeBERTa model)"),rZo=l(),Yv=a("li"),G1e=a("strong"),tZo=o("deberta-v2"),aZo=o(" \u2014 "),dW=a("a"),nZo=o("DebertaV2ForTokenClassification"),sZo=o(" (DeBERTa-v2 model)"),lZo=l(),Kv=a("li"),O1e=a("strong"),iZo=o("distilbert"),dZo=o(" \u2014 "),cW=a("a"),cZo=o("DistilBertForTokenClassification"),fZo=o(" (DistilBERT model)"),mZo=l(),Zv=a("li"),V1e=a("strong"),gZo=o("electra"),hZo=o(" \u2014 "),fW=a("a"),pZo=o("ElectraForTokenClassification"),_Zo=o(" (ELECTRA model)"),uZo=l(),eF=a("li"),X1e=a("strong"),bZo=o("flaubert"),vZo=o(" \u2014 "),mW=a("a"),FZo=o("FlaubertForTokenClassification"),TZo=o(" (FlauBERT model)"),MZo=l(),oF=a("li"),z1e=a("strong"),EZo=o("fnet"),CZo=o(" \u2014 "),gW=a("a"),wZo=o("FNetForTokenClassification"),AZo=o(" (FNet model)"),LZo=l(),rF=a("li"),W1e=a("strong"),yZo=o("funnel"),xZo=o(" \u2014 "),hW=a("a"),$Zo=o("FunnelForTokenClassification"),kZo=o(" (Funnel Transformer model)"),SZo=l(),tF=a("li"),Q1e=a("strong"),RZo=o("gpt2"),PZo=o(" \u2014 "),pW=a("a"),BZo=o("GPT2ForTokenClassification"),IZo=o(" (OpenAI GPT-2 model)"),NZo=l(),aF=a("li"),H1e=a("strong"),qZo=o("ibert"),jZo=o(" \u2014 "),_W=a("a"),DZo=o("IBertForTokenClassification"),GZo=o(" (I-BERT model)"),OZo=l(),nF=a("li"),U1e=a("strong"),VZo=o("layoutlm"),XZo=o(" \u2014 "),uW=a("a"),zZo=o("LayoutLMForTokenClassification"),WZo=o(" (LayoutLM model)"),QZo=l(),sF=a("li"),J1e=a("strong"),HZo=o("layoutlmv2"),UZo=o(" \u2014 "),bW=a("a"),JZo=o("LayoutLMv2ForTokenClassification"),YZo=o(" (LayoutLMv2 model)"),KZo=l(),lF=a("li"),Y1e=a("strong"),ZZo=o("layoutlmv3"),eer=o(" \u2014 "),vW=a("a"),oer=o("LayoutLMv3ForTokenClassification"),rer=o(" (LayoutLMv3 model)"),ter=l(),iF=a("li"),K1e=a("strong"),aer=o("longformer"),ner=o(" \u2014 "),FW=a("a"),ser=o("LongformerForTokenClassification"),ler=o(" (Longformer model)"),ier=l(),dF=a("li"),Z1e=a("strong"),der=o("megatron-bert"),cer=o(" \u2014 "),TW=a("a"),fer=o("MegatronBertForTokenClassification"),mer=o(" (Megatron-BERT model)"),ger=l(),cF=a("li"),e2e=a("strong"),her=o("mobilebert"),per=o(" \u2014 "),MW=a("a"),_er=o("MobileBertForTokenClassification"),uer=o(" (MobileBERT model)"),ber=l(),fF=a("li"),o2e=a("strong"),ver=o("mpnet"),Fer=o(" \u2014 "),EW=a("a"),Ter=o("MPNetForTokenClassification"),Mer=o(" (MPNet model)"),Eer=l(),mF=a("li"),r2e=a("strong"),Cer=o("nezha"),wer=o(" \u2014 "),CW=a("a"),Aer=o("NezhaForTokenClassification"),Ler=o(" (Nezha model)"),yer=l(),gF=a("li"),t2e=a("strong"),xer=o("nystromformer"),$er=o(" \u2014 "),wW=a("a"),ker=o("NystromformerForTokenClassification"),Ser=o(" (Nystr\xF6mformer model)"),Rer=l(),hF=a("li"),a2e=a("strong"),Per=o("qdqbert"),Ber=o(" \u2014 "),AW=a("a"),Ier=o("QDQBertForTokenClassification"),Ner=o(" (QDQBert model)"),qer=l(),pF=a("li"),n2e=a("strong"),jer=o("rembert"),Der=o(" \u2014 "),LW=a("a"),Ger=o("RemBertForTokenClassification"),Oer=o(" (RemBERT model)"),Ver=l(),_F=a("li"),s2e=a("strong"),Xer=o("roberta"),zer=o(" \u2014 "),yW=a("a"),Wer=o("RobertaForTokenClassification"),Qer=o(" (RoBERTa model)"),Her=l(),uF=a("li"),l2e=a("strong"),Uer=o("roformer"),Jer=o(" \u2014 "),xW=a("a"),Yer=o("RoFormerForTokenClassification"),Ker=o(" (RoFormer model)"),Zer=l(),bF=a("li"),i2e=a("strong"),eor=o("squeezebert"),oor=o(" \u2014 "),$W=a("a"),ror=o("SqueezeBertForTokenClassification"),tor=o(" (SqueezeBERT model)"),aor=l(),vF=a("li"),d2e=a("strong"),nor=o("xlm"),sor=o(" \u2014 "),kW=a("a"),lor=o("XLMForTokenClassification"),ior=o(" (XLM model)"),dor=l(),FF=a("li"),c2e=a("strong"),cor=o("xlm-roberta"),mor=o(" \u2014 "),SW=a("a"),gor=o("XLMRobertaForTokenClassification"),hor=o(" (XLM-RoBERTa model)"),por=l(),TF=a("li"),f2e=a("strong"),_or=o("xlm-roberta-xl"),uor=o(" \u2014 "),RW=a("a"),bor=o("XLMRobertaXLForTokenClassification"),vor=o(" (XLM-RoBERTa-XL model)"),For=l(),MF=a("li"),m2e=a("strong"),Tor=o("xlnet"),Mor=o(" \u2014 "),PW=a("a"),Eor=o("XLNetForTokenClassification"),Cor=o(" (XLNet model)"),wor=l(),EF=a("li"),g2e=a("strong"),Aor=o("yoso"),Lor=o(" \u2014 "),BW=a("a"),yor=o("YosoForTokenClassification"),xor=o(" (YOSO model)"),$or=l(),CF=a("p"),kor=o("The model is set in evaluation mode by default using "),h2e=a("code"),Sor=o("model.eval()"),Ror=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p2e=a("code"),Por=o("model.train()"),Bor=l(),F(wF.$$.fragment),ize=l(),_d=a("h2"),AF=a("a"),_2e=a("span"),F(xL.$$.fragment),Ior=l(),u2e=a("span"),Nor=o("AutoModelForQuestionAnswering"),dze=l(),Do=a("div"),F($L.$$.fragment),qor=l(),ud=a("p"),jor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),IW=a("a"),Dor=o("from_pretrained()"),Gor=o(" class method or the "),NW=a("a"),Oor=o("from_config()"),Vor=o(` class
method.`),Xor=l(),kL=a("p"),zor=o("This class cannot be instantiated directly using "),b2e=a("code"),Wor=o("__init__()"),Qor=o(" (throws an error)."),Hor=l(),ut=a("div"),F(SL.$$.fragment),Uor=l(),v2e=a("p"),Jor=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Yor=l(),bd=a("p"),Kor=o(`Note:
Loading a model from its configuration file does `),F2e=a("strong"),Zor=o("not"),err=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qW=a("a"),orr=o("from_pretrained()"),rrr=o(" to load the model weights."),trr=l(),F(LF.$$.fragment),arr=l(),so=a("div"),F(RL.$$.fragment),nrr=l(),T2e=a("p"),srr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),lrr=l(),za=a("p"),irr=o("The model class to instantiate is selected based on the "),M2e=a("code"),drr=o("model_type"),crr=o(` property of the config object (either
passed as an argument or loaded from `),E2e=a("code"),frr=o("pretrained_model_name_or_path"),mrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C2e=a("code"),grr=o("pretrained_model_name_or_path"),hrr=o(":"),prr=l(),V=a("ul"),yF=a("li"),w2e=a("strong"),_rr=o("albert"),urr=o(" \u2014 "),jW=a("a"),brr=o("AlbertForQuestionAnswering"),vrr=o(" (ALBERT model)"),Frr=l(),xF=a("li"),A2e=a("strong"),Trr=o("bart"),Mrr=o(" \u2014 "),DW=a("a"),Err=o("BartForQuestionAnswering"),Crr=o(" (BART model)"),wrr=l(),$F=a("li"),L2e=a("strong"),Arr=o("bert"),Lrr=o(" \u2014 "),GW=a("a"),yrr=o("BertForQuestionAnswering"),xrr=o(" (BERT model)"),$rr=l(),kF=a("li"),y2e=a("strong"),krr=o("big_bird"),Srr=o(" \u2014 "),OW=a("a"),Rrr=o("BigBirdForQuestionAnswering"),Prr=o(" (BigBird model)"),Brr=l(),SF=a("li"),x2e=a("strong"),Irr=o("bigbird_pegasus"),Nrr=o(" \u2014 "),VW=a("a"),qrr=o("BigBirdPegasusForQuestionAnswering"),jrr=o(" (BigBird-Pegasus model)"),Drr=l(),RF=a("li"),$2e=a("strong"),Grr=o("camembert"),Orr=o(" \u2014 "),XW=a("a"),Vrr=o("CamembertForQuestionAnswering"),Xrr=o(" (CamemBERT model)"),zrr=l(),PF=a("li"),k2e=a("strong"),Wrr=o("canine"),Qrr=o(" \u2014 "),zW=a("a"),Hrr=o("CanineForQuestionAnswering"),Urr=o(" (CANINE model)"),Jrr=l(),BF=a("li"),S2e=a("strong"),Yrr=o("convbert"),Krr=o(" \u2014 "),WW=a("a"),Zrr=o("ConvBertForQuestionAnswering"),etr=o(" (ConvBERT model)"),otr=l(),IF=a("li"),R2e=a("strong"),rtr=o("data2vec-text"),ttr=o(" \u2014 "),QW=a("a"),atr=o("Data2VecTextForQuestionAnswering"),ntr=o(" (Data2VecText model)"),str=l(),NF=a("li"),P2e=a("strong"),ltr=o("deberta"),itr=o(" \u2014 "),HW=a("a"),dtr=o("DebertaForQuestionAnswering"),ctr=o(" (DeBERTa model)"),ftr=l(),qF=a("li"),B2e=a("strong"),mtr=o("deberta-v2"),gtr=o(" \u2014 "),UW=a("a"),htr=o("DebertaV2ForQuestionAnswering"),ptr=o(" (DeBERTa-v2 model)"),_tr=l(),jF=a("li"),I2e=a("strong"),utr=o("distilbert"),btr=o(" \u2014 "),JW=a("a"),vtr=o("DistilBertForQuestionAnswering"),Ftr=o(" (DistilBERT model)"),Ttr=l(),DF=a("li"),N2e=a("strong"),Mtr=o("electra"),Etr=o(" \u2014 "),YW=a("a"),Ctr=o("ElectraForQuestionAnswering"),wtr=o(" (ELECTRA model)"),Atr=l(),GF=a("li"),q2e=a("strong"),Ltr=o("flaubert"),ytr=o(" \u2014 "),KW=a("a"),xtr=o("FlaubertForQuestionAnsweringSimple"),$tr=o(" (FlauBERT model)"),ktr=l(),OF=a("li"),j2e=a("strong"),Str=o("fnet"),Rtr=o(" \u2014 "),ZW=a("a"),Ptr=o("FNetForQuestionAnswering"),Btr=o(" (FNet model)"),Itr=l(),VF=a("li"),D2e=a("strong"),Ntr=o("funnel"),qtr=o(" \u2014 "),eQ=a("a"),jtr=o("FunnelForQuestionAnswering"),Dtr=o(" (Funnel Transformer model)"),Gtr=l(),XF=a("li"),G2e=a("strong"),Otr=o("gptj"),Vtr=o(" \u2014 "),oQ=a("a"),Xtr=o("GPTJForQuestionAnswering"),ztr=o(" (GPT-J model)"),Wtr=l(),zF=a("li"),O2e=a("strong"),Qtr=o("ibert"),Htr=o(" \u2014 "),rQ=a("a"),Utr=o("IBertForQuestionAnswering"),Jtr=o(" (I-BERT model)"),Ytr=l(),WF=a("li"),V2e=a("strong"),Ktr=o("layoutlmv2"),Ztr=o(" \u2014 "),tQ=a("a"),ear=o("LayoutLMv2ForQuestionAnswering"),oar=o(" (LayoutLMv2 model)"),rar=l(),QF=a("li"),X2e=a("strong"),tar=o("layoutlmv3"),aar=o(" \u2014 "),aQ=a("a"),nar=o("LayoutLMv3ForQuestionAnswering"),sar=o(" (LayoutLMv3 model)"),lar=l(),HF=a("li"),z2e=a("strong"),iar=o("led"),dar=o(" \u2014 "),nQ=a("a"),car=o("LEDForQuestionAnswering"),far=o(" (LED model)"),mar=l(),UF=a("li"),W2e=a("strong"),gar=o("longformer"),har=o(" \u2014 "),sQ=a("a"),par=o("LongformerForQuestionAnswering"),_ar=o(" (Longformer model)"),uar=l(),JF=a("li"),Q2e=a("strong"),bar=o("lxmert"),Far=o(" \u2014 "),lQ=a("a"),Tar=o("LxmertForQuestionAnswering"),Mar=o(" (LXMERT model)"),Ear=l(),YF=a("li"),H2e=a("strong"),Car=o("mbart"),war=o(" \u2014 "),iQ=a("a"),Aar=o("MBartForQuestionAnswering"),Lar=o(" (mBART model)"),yar=l(),KF=a("li"),U2e=a("strong"),xar=o("megatron-bert"),$ar=o(" \u2014 "),dQ=a("a"),kar=o("MegatronBertForQuestionAnswering"),Sar=o(" (Megatron-BERT model)"),Rar=l(),ZF=a("li"),J2e=a("strong"),Par=o("mobilebert"),Bar=o(" \u2014 "),cQ=a("a"),Iar=o("MobileBertForQuestionAnswering"),Nar=o(" (MobileBERT model)"),qar=l(),eT=a("li"),Y2e=a("strong"),jar=o("mpnet"),Dar=o(" \u2014 "),fQ=a("a"),Gar=o("MPNetForQuestionAnswering"),Oar=o(" (MPNet model)"),Var=l(),oT=a("li"),K2e=a("strong"),Xar=o("mvp"),zar=o(" \u2014 "),mQ=a("a"),War=o("MvpForQuestionAnswering"),Qar=o(" (MVP model)"),Har=l(),rT=a("li"),Z2e=a("strong"),Uar=o("nezha"),Jar=o(" \u2014 "),gQ=a("a"),Yar=o("NezhaForQuestionAnswering"),Kar=o(" (Nezha model)"),Zar=l(),tT=a("li"),ebe=a("strong"),enr=o("nystromformer"),onr=o(" \u2014 "),hQ=a("a"),rnr=o("NystromformerForQuestionAnswering"),tnr=o(" (Nystr\xF6mformer model)"),anr=l(),aT=a("li"),obe=a("strong"),nnr=o("qdqbert"),snr=o(" \u2014 "),pQ=a("a"),lnr=o("QDQBertForQuestionAnswering"),inr=o(" (QDQBert model)"),dnr=l(),nT=a("li"),rbe=a("strong"),cnr=o("reformer"),fnr=o(" \u2014 "),_Q=a("a"),mnr=o("ReformerForQuestionAnswering"),gnr=o(" (Reformer model)"),hnr=l(),sT=a("li"),tbe=a("strong"),pnr=o("rembert"),_nr=o(" \u2014 "),uQ=a("a"),unr=o("RemBertForQuestionAnswering"),bnr=o(" (RemBERT model)"),vnr=l(),lT=a("li"),abe=a("strong"),Fnr=o("roberta"),Tnr=o(" \u2014 "),bQ=a("a"),Mnr=o("RobertaForQuestionAnswering"),Enr=o(" (RoBERTa model)"),Cnr=l(),iT=a("li"),nbe=a("strong"),wnr=o("roformer"),Anr=o(" \u2014 "),vQ=a("a"),Lnr=o("RoFormerForQuestionAnswering"),ynr=o(" (RoFormer model)"),xnr=l(),dT=a("li"),sbe=a("strong"),$nr=o("splinter"),knr=o(" \u2014 "),FQ=a("a"),Snr=o("SplinterForQuestionAnswering"),Rnr=o(" (Splinter model)"),Pnr=l(),cT=a("li"),lbe=a("strong"),Bnr=o("squeezebert"),Inr=o(" \u2014 "),TQ=a("a"),Nnr=o("SqueezeBertForQuestionAnswering"),qnr=o(" (SqueezeBERT model)"),jnr=l(),fT=a("li"),ibe=a("strong"),Dnr=o("xlm"),Gnr=o(" \u2014 "),MQ=a("a"),Onr=o("XLMForQuestionAnsweringSimple"),Vnr=o(" (XLM model)"),Xnr=l(),mT=a("li"),dbe=a("strong"),znr=o("xlm-roberta"),Wnr=o(" \u2014 "),EQ=a("a"),Qnr=o("XLMRobertaForQuestionAnswering"),Hnr=o(" (XLM-RoBERTa model)"),Unr=l(),gT=a("li"),cbe=a("strong"),Jnr=o("xlm-roberta-xl"),Ynr=o(" \u2014 "),CQ=a("a"),Knr=o("XLMRobertaXLForQuestionAnswering"),Znr=o(" (XLM-RoBERTa-XL model)"),esr=l(),hT=a("li"),fbe=a("strong"),osr=o("xlnet"),rsr=o(" \u2014 "),wQ=a("a"),tsr=o("XLNetForQuestionAnsweringSimple"),asr=o(" (XLNet model)"),nsr=l(),pT=a("li"),mbe=a("strong"),ssr=o("yoso"),lsr=o(" \u2014 "),AQ=a("a"),isr=o("YosoForQuestionAnswering"),dsr=o(" (YOSO model)"),csr=l(),_T=a("p"),fsr=o("The model is set in evaluation mode by default using "),gbe=a("code"),msr=o("model.eval()"),gsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hbe=a("code"),hsr=o("model.train()"),psr=l(),F(uT.$$.fragment),cze=l(),vd=a("h2"),bT=a("a"),pbe=a("span"),F(PL.$$.fragment),_sr=l(),_be=a("span"),usr=o("AutoModelForTableQuestionAnswering"),fze=l(),Go=a("div"),F(BL.$$.fragment),bsr=l(),Fd=a("p"),vsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),LQ=a("a"),Fsr=o("from_pretrained()"),Tsr=o(" class method or the "),yQ=a("a"),Msr=o("from_config()"),Esr=o(` class
method.`),Csr=l(),IL=a("p"),wsr=o("This class cannot be instantiated directly using "),ube=a("code"),Asr=o("__init__()"),Lsr=o(" (throws an error)."),ysr=l(),bt=a("div"),F(NL.$$.fragment),xsr=l(),bbe=a("p"),$sr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ksr=l(),Td=a("p"),Ssr=o(`Note:
Loading a model from its configuration file does `),vbe=a("strong"),Rsr=o("not"),Psr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xQ=a("a"),Bsr=o("from_pretrained()"),Isr=o(" to load the model weights."),Nsr=l(),F(vT.$$.fragment),qsr=l(),lo=a("div"),F(qL.$$.fragment),jsr=l(),Fbe=a("p"),Dsr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Gsr=l(),Wa=a("p"),Osr=o("The model class to instantiate is selected based on the "),Tbe=a("code"),Vsr=o("model_type"),Xsr=o(` property of the config object (either
passed as an argument or loaded from `),Mbe=a("code"),zsr=o("pretrained_model_name_or_path"),Wsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ebe=a("code"),Qsr=o("pretrained_model_name_or_path"),Hsr=o(":"),Usr=l(),Cbe=a("ul"),FT=a("li"),wbe=a("strong"),Jsr=o("tapas"),Ysr=o(" \u2014 "),$Q=a("a"),Ksr=o("TapasForQuestionAnswering"),Zsr=o(" (TAPAS model)"),elr=l(),TT=a("p"),olr=o("The model is set in evaluation mode by default using "),Abe=a("code"),rlr=o("model.eval()"),tlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lbe=a("code"),alr=o("model.train()"),nlr=l(),F(MT.$$.fragment),mze=l(),Md=a("h2"),ET=a("a"),ybe=a("span"),F(jL.$$.fragment),slr=l(),xbe=a("span"),llr=o("AutoModelForImageClassification"),gze=l(),Oo=a("div"),F(DL.$$.fragment),ilr=l(),Ed=a("p"),dlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),kQ=a("a"),clr=o("from_pretrained()"),flr=o(" class method or the "),SQ=a("a"),mlr=o("from_config()"),glr=o(` class
method.`),hlr=l(),GL=a("p"),plr=o("This class cannot be instantiated directly using "),$be=a("code"),_lr=o("__init__()"),ulr=o(" (throws an error)."),blr=l(),vt=a("div"),F(OL.$$.fragment),vlr=l(),kbe=a("p"),Flr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Tlr=l(),Cd=a("p"),Mlr=o(`Note:
Loading a model from its configuration file does `),Sbe=a("strong"),Elr=o("not"),Clr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RQ=a("a"),wlr=o("from_pretrained()"),Alr=o(" to load the model weights."),Llr=l(),F(CT.$$.fragment),ylr=l(),io=a("div"),F(VL.$$.fragment),xlr=l(),Rbe=a("p"),$lr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),klr=l(),Qa=a("p"),Slr=o("The model class to instantiate is selected based on the "),Pbe=a("code"),Rlr=o("model_type"),Plr=o(` property of the config object (either
passed as an argument or loaded from `),Bbe=a("code"),Blr=o("pretrained_model_name_or_path"),Ilr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ibe=a("code"),Nlr=o("pretrained_model_name_or_path"),qlr=o(":"),jlr=l(),ve=a("ul"),wT=a("li"),Nbe=a("strong"),Dlr=o("beit"),Glr=o(" \u2014 "),PQ=a("a"),Olr=o("BeitForImageClassification"),Vlr=o(" (BEiT model)"),Xlr=l(),AT=a("li"),qbe=a("strong"),zlr=o("convnext"),Wlr=o(" \u2014 "),BQ=a("a"),Qlr=o("ConvNextForImageClassification"),Hlr=o(" (ConvNeXT model)"),Ulr=l(),LT=a("li"),jbe=a("strong"),Jlr=o("cvt"),Ylr=o(" \u2014 "),IQ=a("a"),Klr=o("CvtForImageClassification"),Zlr=o(" (CvT model)"),eir=l(),yT=a("li"),Dbe=a("strong"),oir=o("data2vec-vision"),rir=o(" \u2014 "),NQ=a("a"),tir=o("Data2VecVisionForImageClassification"),air=o(" (Data2VecVision model)"),nir=l(),Js=a("li"),Gbe=a("strong"),sir=o("deit"),lir=o(" \u2014 "),qQ=a("a"),iir=o("DeiTForImageClassification"),dir=o(" or "),jQ=a("a"),cir=o("DeiTForImageClassificationWithTeacher"),fir=o(" (DeiT model)"),mir=l(),xT=a("li"),Obe=a("strong"),gir=o("imagegpt"),hir=o(" \u2014 "),DQ=a("a"),pir=o("ImageGPTForImageClassification"),_ir=o(" (ImageGPT model)"),uir=l(),Ys=a("li"),Vbe=a("strong"),bir=o("levit"),vir=o(" \u2014 "),GQ=a("a"),Fir=o("LevitForImageClassification"),Tir=o(" or "),OQ=a("a"),Mir=o("LevitForImageClassificationWithTeacher"),Eir=o(" (LeViT model)"),Cir=l(),$T=a("li"),Xbe=a("strong"),wir=o("mobilevit"),Air=o(" \u2014 "),VQ=a("a"),Lir=o("MobileViTForImageClassification"),yir=o(" (MobileViT model)"),xir=l(),Ft=a("li"),zbe=a("strong"),$ir=o("perceiver"),kir=o(" \u2014 "),XQ=a("a"),Sir=o("PerceiverForImageClassificationLearned"),Rir=o(" or "),zQ=a("a"),Pir=o("PerceiverForImageClassificationFourier"),Bir=o(" or "),WQ=a("a"),Iir=o("PerceiverForImageClassificationConvProcessing"),Nir=o(" (Perceiver model)"),qir=l(),kT=a("li"),Wbe=a("strong"),jir=o("poolformer"),Dir=o(" \u2014 "),QQ=a("a"),Gir=o("PoolFormerForImageClassification"),Oir=o(" (PoolFormer model)"),Vir=l(),ST=a("li"),Qbe=a("strong"),Xir=o("regnet"),zir=o(" \u2014 "),HQ=a("a"),Wir=o("RegNetForImageClassification"),Qir=o(" (RegNet model)"),Hir=l(),RT=a("li"),Hbe=a("strong"),Uir=o("resnet"),Jir=o(" \u2014 "),UQ=a("a"),Yir=o("ResNetForImageClassification"),Kir=o(" (ResNet model)"),Zir=l(),PT=a("li"),Ube=a("strong"),edr=o("segformer"),odr=o(" \u2014 "),JQ=a("a"),rdr=o("SegformerForImageClassification"),tdr=o(" (SegFormer model)"),adr=l(),BT=a("li"),Jbe=a("strong"),ndr=o("swin"),sdr=o(" \u2014 "),YQ=a("a"),ldr=o("SwinForImageClassification"),idr=o(" (Swin Transformer model)"),ddr=l(),IT=a("li"),Ybe=a("strong"),cdr=o("van"),fdr=o(" \u2014 "),KQ=a("a"),mdr=o("VanForImageClassification"),gdr=o(" (VAN model)"),hdr=l(),NT=a("li"),Kbe=a("strong"),pdr=o("vit"),_dr=o(" \u2014 "),ZQ=a("a"),udr=o("ViTForImageClassification"),bdr=o(" (ViT model)"),vdr=l(),qT=a("p"),Fdr=o("The model is set in evaluation mode by default using "),Zbe=a("code"),Tdr=o("model.eval()"),Mdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e3e=a("code"),Edr=o("model.train()"),Cdr=l(),F(jT.$$.fragment),hze=l(),wd=a("h2"),DT=a("a"),o3e=a("span"),F(XL.$$.fragment),wdr=l(),r3e=a("span"),Adr=o("AutoModelForVision2Seq"),pze=l(),Vo=a("div"),F(zL.$$.fragment),Ldr=l(),Ad=a("p"),ydr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),eH=a("a"),xdr=o("from_pretrained()"),$dr=o(" class method or the "),oH=a("a"),kdr=o("from_config()"),Sdr=o(` class
method.`),Rdr=l(),WL=a("p"),Pdr=o("This class cannot be instantiated directly using "),t3e=a("code"),Bdr=o("__init__()"),Idr=o(" (throws an error)."),Ndr=l(),Tt=a("div"),F(QL.$$.fragment),qdr=l(),a3e=a("p"),jdr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Ddr=l(),Ld=a("p"),Gdr=o(`Note:
Loading a model from its configuration file does `),n3e=a("strong"),Odr=o("not"),Vdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=a("a"),Xdr=o("from_pretrained()"),zdr=o(" to load the model weights."),Wdr=l(),F(GT.$$.fragment),Qdr=l(),co=a("div"),F(HL.$$.fragment),Hdr=l(),s3e=a("p"),Udr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Jdr=l(),Ha=a("p"),Ydr=o("The model class to instantiate is selected based on the "),l3e=a("code"),Kdr=o("model_type"),Zdr=o(` property of the config object (either
passed as an argument or loaded from `),i3e=a("code"),ecr=o("pretrained_model_name_or_path"),ocr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d3e=a("code"),rcr=o("pretrained_model_name_or_path"),tcr=o(":"),acr=l(),c3e=a("ul"),OT=a("li"),f3e=a("strong"),ncr=o("vision-encoder-decoder"),scr=o(" \u2014 "),tH=a("a"),lcr=o("VisionEncoderDecoderModel"),icr=o(" (Vision Encoder decoder model)"),dcr=l(),VT=a("p"),ccr=o("The model is set in evaluation mode by default using "),m3e=a("code"),fcr=o("model.eval()"),mcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g3e=a("code"),gcr=o("model.train()"),hcr=l(),F(XT.$$.fragment),_ze=l(),yd=a("h2"),zT=a("a"),h3e=a("span"),F(UL.$$.fragment),pcr=l(),p3e=a("span"),_cr=o("AutoModelForVisualQuestionAnswering"),uze=l(),Xo=a("div"),F(JL.$$.fragment),ucr=l(),xd=a("p"),bcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),aH=a("a"),vcr=o("from_pretrained()"),Fcr=o(" class method or the "),nH=a("a"),Tcr=o("from_config()"),Mcr=o(` class
method.`),Ecr=l(),YL=a("p"),Ccr=o("This class cannot be instantiated directly using "),_3e=a("code"),wcr=o("__init__()"),Acr=o(" (throws an error)."),Lcr=l(),Mt=a("div"),F(KL.$$.fragment),ycr=l(),u3e=a("p"),xcr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),$cr=l(),$d=a("p"),kcr=o(`Note:
Loading a model from its configuration file does `),b3e=a("strong"),Scr=o("not"),Rcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sH=a("a"),Pcr=o("from_pretrained()"),Bcr=o(" to load the model weights."),Icr=l(),F(WT.$$.fragment),Ncr=l(),fo=a("div"),F(ZL.$$.fragment),qcr=l(),v3e=a("p"),jcr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Dcr=l(),Ua=a("p"),Gcr=o("The model class to instantiate is selected based on the "),F3e=a("code"),Ocr=o("model_type"),Vcr=o(` property of the config object (either
passed as an argument or loaded from `),T3e=a("code"),Xcr=o("pretrained_model_name_or_path"),zcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M3e=a("code"),Wcr=o("pretrained_model_name_or_path"),Qcr=o(":"),Hcr=l(),E3e=a("ul"),QT=a("li"),C3e=a("strong"),Ucr=o("vilt"),Jcr=o(" \u2014 "),lH=a("a"),Ycr=o("ViltForQuestionAnswering"),Kcr=o(" (ViLT model)"),Zcr=l(),HT=a("p"),efr=o("The model is set in evaluation mode by default using "),w3e=a("code"),ofr=o("model.eval()"),rfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A3e=a("code"),tfr=o("model.train()"),afr=l(),F(UT.$$.fragment),bze=l(),kd=a("h2"),JT=a("a"),L3e=a("span"),F(ey.$$.fragment),nfr=l(),y3e=a("span"),sfr=o("AutoModelForAudioClassification"),vze=l(),zo=a("div"),F(oy.$$.fragment),lfr=l(),Sd=a("p"),ifr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),iH=a("a"),dfr=o("from_pretrained()"),cfr=o(" class method or the "),dH=a("a"),ffr=o("from_config()"),mfr=o(` class
method.`),gfr=l(),ry=a("p"),hfr=o("This class cannot be instantiated directly using "),x3e=a("code"),pfr=o("__init__()"),_fr=o(" (throws an error)."),ufr=l(),Et=a("div"),F(ty.$$.fragment),bfr=l(),$3e=a("p"),vfr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Ffr=l(),Rd=a("p"),Tfr=o(`Note:
Loading a model from its configuration file does `),k3e=a("strong"),Mfr=o("not"),Efr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cH=a("a"),Cfr=o("from_pretrained()"),wfr=o(" to load the model weights."),Afr=l(),F(YT.$$.fragment),Lfr=l(),mo=a("div"),F(ay.$$.fragment),yfr=l(),S3e=a("p"),xfr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),$fr=l(),Ja=a("p"),kfr=o("The model class to instantiate is selected based on the "),R3e=a("code"),Sfr=o("model_type"),Rfr=o(` property of the config object (either
passed as an argument or loaded from `),P3e=a("code"),Pfr=o("pretrained_model_name_or_path"),Bfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B3e=a("code"),Ifr=o("pretrained_model_name_or_path"),Nfr=o(":"),qfr=l(),Pe=a("ul"),KT=a("li"),I3e=a("strong"),jfr=o("data2vec-audio"),Dfr=o(" \u2014 "),fH=a("a"),Gfr=o("Data2VecAudioForSequenceClassification"),Ofr=o(" (Data2VecAudio model)"),Vfr=l(),ZT=a("li"),N3e=a("strong"),Xfr=o("hubert"),zfr=o(" \u2014 "),mH=a("a"),Wfr=o("HubertForSequenceClassification"),Qfr=o(" (Hubert model)"),Hfr=l(),e7=a("li"),q3e=a("strong"),Ufr=o("sew"),Jfr=o(" \u2014 "),gH=a("a"),Yfr=o("SEWForSequenceClassification"),Kfr=o(" (SEW model)"),Zfr=l(),o7=a("li"),j3e=a("strong"),emr=o("sew-d"),omr=o(" \u2014 "),hH=a("a"),rmr=o("SEWDForSequenceClassification"),tmr=o(" (SEW-D model)"),amr=l(),r7=a("li"),D3e=a("strong"),nmr=o("unispeech"),smr=o(" \u2014 "),pH=a("a"),lmr=o("UniSpeechForSequenceClassification"),imr=o(" (UniSpeech model)"),dmr=l(),t7=a("li"),G3e=a("strong"),cmr=o("unispeech-sat"),fmr=o(" \u2014 "),_H=a("a"),mmr=o("UniSpeechSatForSequenceClassification"),gmr=o(" (UniSpeechSat model)"),hmr=l(),a7=a("li"),O3e=a("strong"),pmr=o("wav2vec2"),_mr=o(" \u2014 "),uH=a("a"),umr=o("Wav2Vec2ForSequenceClassification"),bmr=o(" (Wav2Vec2 model)"),vmr=l(),n7=a("li"),V3e=a("strong"),Fmr=o("wav2vec2-conformer"),Tmr=o(" \u2014 "),bH=a("a"),Mmr=o("Wav2Vec2ConformerForSequenceClassification"),Emr=o(" (Wav2Vec2-Conformer model)"),Cmr=l(),s7=a("li"),X3e=a("strong"),wmr=o("wavlm"),Amr=o(" \u2014 "),vH=a("a"),Lmr=o("WavLMForSequenceClassification"),ymr=o(" (WavLM model)"),xmr=l(),l7=a("p"),$mr=o("The model is set in evaluation mode by default using "),z3e=a("code"),kmr=o("model.eval()"),Smr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W3e=a("code"),Rmr=o("model.train()"),Pmr=l(),F(i7.$$.fragment),Fze=l(),Pd=a("h2"),d7=a("a"),Q3e=a("span"),F(ny.$$.fragment),Bmr=l(),H3e=a("span"),Imr=o("AutoModelForAudioFrameClassification"),Tze=l(),Wo=a("div"),F(sy.$$.fragment),Nmr=l(),Bd=a("p"),qmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),FH=a("a"),jmr=o("from_pretrained()"),Dmr=o(" class method or the "),TH=a("a"),Gmr=o("from_config()"),Omr=o(` class
method.`),Vmr=l(),ly=a("p"),Xmr=o("This class cannot be instantiated directly using "),U3e=a("code"),zmr=o("__init__()"),Wmr=o(" (throws an error)."),Qmr=l(),Ct=a("div"),F(iy.$$.fragment),Hmr=l(),J3e=a("p"),Umr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Jmr=l(),Id=a("p"),Ymr=o(`Note:
Loading a model from its configuration file does `),Y3e=a("strong"),Kmr=o("not"),Zmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=a("a"),egr=o("from_pretrained()"),ogr=o(" to load the model weights."),rgr=l(),F(c7.$$.fragment),tgr=l(),go=a("div"),F(dy.$$.fragment),agr=l(),K3e=a("p"),ngr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),sgr=l(),Ya=a("p"),lgr=o("The model class to instantiate is selected based on the "),Z3e=a("code"),igr=o("model_type"),dgr=o(` property of the config object (either
passed as an argument or loaded from `),eve=a("code"),cgr=o("pretrained_model_name_or_path"),fgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ove=a("code"),mgr=o("pretrained_model_name_or_path"),ggr=o(":"),hgr=l(),rt=a("ul"),f7=a("li"),rve=a("strong"),pgr=o("data2vec-audio"),_gr=o(" \u2014 "),EH=a("a"),ugr=o("Data2VecAudioForAudioFrameClassification"),bgr=o(" (Data2VecAudio model)"),vgr=l(),m7=a("li"),tve=a("strong"),Fgr=o("unispeech-sat"),Tgr=o(" \u2014 "),CH=a("a"),Mgr=o("UniSpeechSatForAudioFrameClassification"),Egr=o(" (UniSpeechSat model)"),Cgr=l(),g7=a("li"),ave=a("strong"),wgr=o("wav2vec2"),Agr=o(" \u2014 "),wH=a("a"),Lgr=o("Wav2Vec2ForAudioFrameClassification"),ygr=o(" (Wav2Vec2 model)"),xgr=l(),h7=a("li"),nve=a("strong"),$gr=o("wav2vec2-conformer"),kgr=o(" \u2014 "),AH=a("a"),Sgr=o("Wav2Vec2ConformerForAudioFrameClassification"),Rgr=o(" (Wav2Vec2-Conformer model)"),Pgr=l(),p7=a("li"),sve=a("strong"),Bgr=o("wavlm"),Igr=o(" \u2014 "),LH=a("a"),Ngr=o("WavLMForAudioFrameClassification"),qgr=o(" (WavLM model)"),jgr=l(),_7=a("p"),Dgr=o("The model is set in evaluation mode by default using "),lve=a("code"),Ggr=o("model.eval()"),Ogr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ive=a("code"),Vgr=o("model.train()"),Xgr=l(),F(u7.$$.fragment),Mze=l(),Nd=a("h2"),b7=a("a"),dve=a("span"),F(cy.$$.fragment),zgr=l(),cve=a("span"),Wgr=o("AutoModelForCTC"),Eze=l(),Qo=a("div"),F(fy.$$.fragment),Qgr=l(),qd=a("p"),Hgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),yH=a("a"),Ugr=o("from_pretrained()"),Jgr=o(" class method or the "),xH=a("a"),Ygr=o("from_config()"),Kgr=o(` class
method.`),Zgr=l(),my=a("p"),ehr=o("This class cannot be instantiated directly using "),fve=a("code"),ohr=o("__init__()"),rhr=o(" (throws an error)."),thr=l(),wt=a("div"),F(gy.$$.fragment),ahr=l(),mve=a("p"),nhr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),shr=l(),jd=a("p"),lhr=o(`Note:
Loading a model from its configuration file does `),gve=a("strong"),ihr=o("not"),dhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=a("a"),chr=o("from_pretrained()"),fhr=o(" to load the model weights."),mhr=l(),F(v7.$$.fragment),ghr=l(),ho=a("div"),F(hy.$$.fragment),hhr=l(),hve=a("p"),phr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),_hr=l(),Ka=a("p"),uhr=o("The model class to instantiate is selected based on the "),pve=a("code"),bhr=o("model_type"),vhr=o(` property of the config object (either
passed as an argument or loaded from `),_ve=a("code"),Fhr=o("pretrained_model_name_or_path"),Thr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uve=a("code"),Mhr=o("pretrained_model_name_or_path"),Ehr=o(":"),Chr=l(),Le=a("ul"),F7=a("li"),bve=a("strong"),whr=o("data2vec-audio"),Ahr=o(" \u2014 "),kH=a("a"),Lhr=o("Data2VecAudioForCTC"),yhr=o(" (Data2VecAudio model)"),xhr=l(),T7=a("li"),vve=a("strong"),$hr=o("hubert"),khr=o(" \u2014 "),SH=a("a"),Shr=o("HubertForCTC"),Rhr=o(" (Hubert model)"),Phr=l(),M7=a("li"),Fve=a("strong"),Bhr=o("mctct"),Ihr=o(" \u2014 "),RH=a("a"),Nhr=o("MCTCTForCTC"),qhr=o(" (M-CTC-T model)"),jhr=l(),E7=a("li"),Tve=a("strong"),Dhr=o("sew"),Ghr=o(" \u2014 "),PH=a("a"),Ohr=o("SEWForCTC"),Vhr=o(" (SEW model)"),Xhr=l(),C7=a("li"),Mve=a("strong"),zhr=o("sew-d"),Whr=o(" \u2014 "),BH=a("a"),Qhr=o("SEWDForCTC"),Hhr=o(" (SEW-D model)"),Uhr=l(),w7=a("li"),Eve=a("strong"),Jhr=o("unispeech"),Yhr=o(" \u2014 "),IH=a("a"),Khr=o("UniSpeechForCTC"),Zhr=o(" (UniSpeech model)"),epr=l(),A7=a("li"),Cve=a("strong"),opr=o("unispeech-sat"),rpr=o(" \u2014 "),NH=a("a"),tpr=o("UniSpeechSatForCTC"),apr=o(" (UniSpeechSat model)"),npr=l(),L7=a("li"),wve=a("strong"),spr=o("wav2vec2"),lpr=o(" \u2014 "),qH=a("a"),ipr=o("Wav2Vec2ForCTC"),dpr=o(" (Wav2Vec2 model)"),cpr=l(),y7=a("li"),Ave=a("strong"),fpr=o("wav2vec2-conformer"),mpr=o(" \u2014 "),jH=a("a"),gpr=o("Wav2Vec2ConformerForCTC"),hpr=o(" (Wav2Vec2-Conformer model)"),ppr=l(),x7=a("li"),Lve=a("strong"),_pr=o("wavlm"),upr=o(" \u2014 "),DH=a("a"),bpr=o("WavLMForCTC"),vpr=o(" (WavLM model)"),Fpr=l(),$7=a("p"),Tpr=o("The model is set in evaluation mode by default using "),yve=a("code"),Mpr=o("model.eval()"),Epr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xve=a("code"),Cpr=o("model.train()"),wpr=l(),F(k7.$$.fragment),Cze=l(),Dd=a("h2"),S7=a("a"),$ve=a("span"),F(py.$$.fragment),Apr=l(),kve=a("span"),Lpr=o("AutoModelForSpeechSeq2Seq"),wze=l(),Ho=a("div"),F(_y.$$.fragment),ypr=l(),Gd=a("p"),xpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),GH=a("a"),$pr=o("from_pretrained()"),kpr=o(" class method or the "),OH=a("a"),Spr=o("from_config()"),Rpr=o(` class
method.`),Ppr=l(),uy=a("p"),Bpr=o("This class cannot be instantiated directly using "),Sve=a("code"),Ipr=o("__init__()"),Npr=o(" (throws an error)."),qpr=l(),At=a("div"),F(by.$$.fragment),jpr=l(),Rve=a("p"),Dpr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Gpr=l(),Od=a("p"),Opr=o(`Note:
Loading a model from its configuration file does `),Pve=a("strong"),Vpr=o("not"),Xpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VH=a("a"),zpr=o("from_pretrained()"),Wpr=o(" to load the model weights."),Qpr=l(),F(R7.$$.fragment),Hpr=l(),po=a("div"),F(vy.$$.fragment),Upr=l(),Bve=a("p"),Jpr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Ypr=l(),Za=a("p"),Kpr=o("The model class to instantiate is selected based on the "),Ive=a("code"),Zpr=o("model_type"),e_r=o(` property of the config object (either
passed as an argument or loaded from `),Nve=a("code"),o_r=o("pretrained_model_name_or_path"),r_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qve=a("code"),t_r=o("pretrained_model_name_or_path"),a_r=o(":"),n_r=l(),Fy=a("ul"),P7=a("li"),jve=a("strong"),s_r=o("speech-encoder-decoder"),l_r=o(" \u2014 "),XH=a("a"),i_r=o("SpeechEncoderDecoderModel"),d_r=o(" (Speech Encoder decoder model)"),c_r=l(),B7=a("li"),Dve=a("strong"),f_r=o("speech_to_text"),m_r=o(" \u2014 "),zH=a("a"),g_r=o("Speech2TextForConditionalGeneration"),h_r=o(" (Speech2Text model)"),p_r=l(),I7=a("p"),__r=o("The model is set in evaluation mode by default using "),Gve=a("code"),u_r=o("model.eval()"),b_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ove=a("code"),v_r=o("model.train()"),F_r=l(),F(N7.$$.fragment),Aze=l(),Vd=a("h2"),q7=a("a"),Vve=a("span"),F(Ty.$$.fragment),T_r=l(),Xve=a("span"),M_r=o("AutoModelForAudioXVector"),Lze=l(),Uo=a("div"),F(My.$$.fragment),E_r=l(),Xd=a("p"),C_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),WH=a("a"),w_r=o("from_pretrained()"),A_r=o(" class method or the "),QH=a("a"),L_r=o("from_config()"),y_r=o(` class
method.`),x_r=l(),Ey=a("p"),$_r=o("This class cannot be instantiated directly using "),zve=a("code"),k_r=o("__init__()"),S_r=o(" (throws an error)."),R_r=l(),Lt=a("div"),F(Cy.$$.fragment),P_r=l(),Wve=a("p"),B_r=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),I_r=l(),zd=a("p"),N_r=o(`Note:
Loading a model from its configuration file does `),Qve=a("strong"),q_r=o("not"),j_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=a("a"),D_r=o("from_pretrained()"),G_r=o(" to load the model weights."),O_r=l(),F(j7.$$.fragment),V_r=l(),_o=a("div"),F(wy.$$.fragment),X_r=l(),Hve=a("p"),z_r=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),W_r=l(),en=a("p"),Q_r=o("The model class to instantiate is selected based on the "),Uve=a("code"),H_r=o("model_type"),U_r=o(` property of the config object (either
passed as an argument or loaded from `),Jve=a("code"),J_r=o("pretrained_model_name_or_path"),Y_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=a("code"),K_r=o("pretrained_model_name_or_path"),Z_r=o(":"),eur=l(),tt=a("ul"),D7=a("li"),Kve=a("strong"),our=o("data2vec-audio"),rur=o(" \u2014 "),UH=a("a"),tur=o("Data2VecAudioForXVector"),aur=o(" (Data2VecAudio model)"),nur=l(),G7=a("li"),Zve=a("strong"),sur=o("unispeech-sat"),lur=o(" \u2014 "),JH=a("a"),iur=o("UniSpeechSatForXVector"),dur=o(" (UniSpeechSat model)"),cur=l(),O7=a("li"),eFe=a("strong"),fur=o("wav2vec2"),mur=o(" \u2014 "),YH=a("a"),gur=o("Wav2Vec2ForXVector"),hur=o(" (Wav2Vec2 model)"),pur=l(),V7=a("li"),oFe=a("strong"),_ur=o("wav2vec2-conformer"),uur=o(" \u2014 "),KH=a("a"),bur=o("Wav2Vec2ConformerForXVector"),vur=o(" (Wav2Vec2-Conformer model)"),Fur=l(),X7=a("li"),rFe=a("strong"),Tur=o("wavlm"),Mur=o(" \u2014 "),ZH=a("a"),Eur=o("WavLMForXVector"),Cur=o(" (WavLM model)"),wur=l(),z7=a("p"),Aur=o("The model is set in evaluation mode by default using "),tFe=a("code"),Lur=o("model.eval()"),yur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aFe=a("code"),xur=o("model.train()"),$ur=l(),F(W7.$$.fragment),yze=l(),Wd=a("h2"),Q7=a("a"),nFe=a("span"),F(Ay.$$.fragment),kur=l(),sFe=a("span"),Sur=o("AutoModelForMaskedImageModeling"),xze=l(),Jo=a("div"),F(Ly.$$.fragment),Rur=l(),Qd=a("p"),Pur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),eU=a("a"),Bur=o("from_pretrained()"),Iur=o(" class method or the "),oU=a("a"),Nur=o("from_config()"),qur=o(` class
method.`),jur=l(),yy=a("p"),Dur=o("This class cannot be instantiated directly using "),lFe=a("code"),Gur=o("__init__()"),Our=o(" (throws an error)."),Vur=l(),yt=a("div"),F(xy.$$.fragment),Xur=l(),iFe=a("p"),zur=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Wur=l(),Hd=a("p"),Qur=o(`Note:
Loading a model from its configuration file does `),dFe=a("strong"),Hur=o("not"),Uur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rU=a("a"),Jur=o("from_pretrained()"),Yur=o(" to load the model weights."),Kur=l(),F(H7.$$.fragment),Zur=l(),uo=a("div"),F($y.$$.fragment),e1r=l(),cFe=a("p"),o1r=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),r1r=l(),on=a("p"),t1r=o("The model class to instantiate is selected based on the "),fFe=a("code"),a1r=o("model_type"),n1r=o(` property of the config object (either
passed as an argument or loaded from `),mFe=a("code"),s1r=o("pretrained_model_name_or_path"),l1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gFe=a("code"),i1r=o("pretrained_model_name_or_path"),d1r=o(":"),c1r=l(),Ud=a("ul"),U7=a("li"),hFe=a("strong"),f1r=o("deit"),m1r=o(" \u2014 "),tU=a("a"),g1r=o("DeiTForMaskedImageModeling"),h1r=o(" (DeiT model)"),p1r=l(),J7=a("li"),pFe=a("strong"),_1r=o("swin"),u1r=o(" \u2014 "),aU=a("a"),b1r=o("SwinForMaskedImageModeling"),v1r=o(" (Swin Transformer model)"),F1r=l(),Y7=a("li"),_Fe=a("strong"),T1r=o("vit"),M1r=o(" \u2014 "),nU=a("a"),E1r=o("ViTForMaskedImageModeling"),C1r=o(" (ViT model)"),w1r=l(),K7=a("p"),A1r=o("The model is set in evaluation mode by default using "),uFe=a("code"),L1r=o("model.eval()"),y1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bFe=a("code"),x1r=o("model.train()"),$1r=l(),F(Z7.$$.fragment),$ze=l(),Jd=a("h2"),e8=a("a"),vFe=a("span"),F(ky.$$.fragment),k1r=l(),FFe=a("span"),S1r=o("AutoModelForObjectDetection"),kze=l(),Yo=a("div"),F(Sy.$$.fragment),R1r=l(),Yd=a("p"),P1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),sU=a("a"),B1r=o("from_pretrained()"),I1r=o(" class method or the "),lU=a("a"),N1r=o("from_config()"),q1r=o(` class
method.`),j1r=l(),Ry=a("p"),D1r=o("This class cannot be instantiated directly using "),TFe=a("code"),G1r=o("__init__()"),O1r=o(" (throws an error)."),V1r=l(),xt=a("div"),F(Py.$$.fragment),X1r=l(),MFe=a("p"),z1r=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),W1r=l(),Kd=a("p"),Q1r=o(`Note:
Loading a model from its configuration file does `),EFe=a("strong"),H1r=o("not"),U1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iU=a("a"),J1r=o("from_pretrained()"),Y1r=o(" to load the model weights."),K1r=l(),F(o8.$$.fragment),Z1r=l(),bo=a("div"),F(By.$$.fragment),e2r=l(),CFe=a("p"),o2r=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),r2r=l(),rn=a("p"),t2r=o("The model class to instantiate is selected based on the "),wFe=a("code"),a2r=o("model_type"),n2r=o(` property of the config object (either
passed as an argument or loaded from `),AFe=a("code"),s2r=o("pretrained_model_name_or_path"),l2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LFe=a("code"),i2r=o("pretrained_model_name_or_path"),d2r=o(":"),c2r=l(),Iy=a("ul"),r8=a("li"),yFe=a("strong"),f2r=o("detr"),m2r=o(" \u2014 "),dU=a("a"),g2r=o("DetrForObjectDetection"),h2r=o(" (DETR model)"),p2r=l(),t8=a("li"),xFe=a("strong"),_2r=o("yolos"),u2r=o(" \u2014 "),cU=a("a"),b2r=o("YolosForObjectDetection"),v2r=o(" (YOLOS model)"),F2r=l(),a8=a("p"),T2r=o("The model is set in evaluation mode by default using "),$Fe=a("code"),M2r=o("model.eval()"),E2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kFe=a("code"),C2r=o("model.train()"),w2r=l(),F(n8.$$.fragment),Sze=l(),Zd=a("h2"),s8=a("a"),SFe=a("span"),F(Ny.$$.fragment),A2r=l(),RFe=a("span"),L2r=o("AutoModelForImageSegmentation"),Rze=l(),Ko=a("div"),F(qy.$$.fragment),y2r=l(),ec=a("p"),x2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),fU=a("a"),$2r=o("from_pretrained()"),k2r=o(" class method or the "),mU=a("a"),S2r=o("from_config()"),R2r=o(` class
method.`),P2r=l(),jy=a("p"),B2r=o("This class cannot be instantiated directly using "),PFe=a("code"),I2r=o("__init__()"),N2r=o(" (throws an error)."),q2r=l(),$t=a("div"),F(Dy.$$.fragment),j2r=l(),BFe=a("p"),D2r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),G2r=l(),oc=a("p"),O2r=o(`Note:
Loading a model from its configuration file does `),IFe=a("strong"),V2r=o("not"),X2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gU=a("a"),z2r=o("from_pretrained()"),W2r=o(" to load the model weights."),Q2r=l(),F(l8.$$.fragment),H2r=l(),vo=a("div"),F(Gy.$$.fragment),U2r=l(),NFe=a("p"),J2r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Y2r=l(),tn=a("p"),K2r=o("The model class to instantiate is selected based on the "),qFe=a("code"),Z2r=o("model_type"),ebr=o(` property of the config object (either
passed as an argument or loaded from `),jFe=a("code"),obr=o("pretrained_model_name_or_path"),rbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DFe=a("code"),tbr=o("pretrained_model_name_or_path"),abr=o(":"),nbr=l(),GFe=a("ul"),i8=a("li"),OFe=a("strong"),sbr=o("detr"),lbr=o(" \u2014 "),hU=a("a"),ibr=o("DetrForSegmentation"),dbr=o(" (DETR model)"),cbr=l(),d8=a("p"),fbr=o("The model is set in evaluation mode by default using "),VFe=a("code"),mbr=o("model.eval()"),gbr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),XFe=a("code"),hbr=o("model.train()"),pbr=l(),F(c8.$$.fragment),Pze=l(),rc=a("h2"),f8=a("a"),zFe=a("span"),F(Oy.$$.fragment),_br=l(),WFe=a("span"),ubr=o("AutoModelForSemanticSegmentation"),Bze=l(),Zo=a("div"),F(Vy.$$.fragment),bbr=l(),tc=a("p"),vbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),pU=a("a"),Fbr=o("from_pretrained()"),Tbr=o(" class method or the "),_U=a("a"),Mbr=o("from_config()"),Ebr=o(` class
method.`),Cbr=l(),Xy=a("p"),wbr=o("This class cannot be instantiated directly using "),QFe=a("code"),Abr=o("__init__()"),Lbr=o(" (throws an error)."),ybr=l(),kt=a("div"),F(zy.$$.fragment),xbr=l(),HFe=a("p"),$br=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),kbr=l(),ac=a("p"),Sbr=o(`Note:
Loading a model from its configuration file does `),UFe=a("strong"),Rbr=o("not"),Pbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uU=a("a"),Bbr=o("from_pretrained()"),Ibr=o(" to load the model weights."),Nbr=l(),F(m8.$$.fragment),qbr=l(),Fo=a("div"),F(Wy.$$.fragment),jbr=l(),JFe=a("p"),Dbr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Gbr=l(),an=a("p"),Obr=o("The model class to instantiate is selected based on the "),YFe=a("code"),Vbr=o("model_type"),Xbr=o(` property of the config object (either
passed as an argument or loaded from `),KFe=a("code"),zbr=o("pretrained_model_name_or_path"),Wbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZFe=a("code"),Qbr=o("pretrained_model_name_or_path"),Hbr=o(":"),Ubr=l(),at=a("ul"),g8=a("li"),eTe=a("strong"),Jbr=o("beit"),Ybr=o(" \u2014 "),bU=a("a"),Kbr=o("BeitForSemanticSegmentation"),Zbr=o(" (BEiT model)"),e3r=l(),h8=a("li"),oTe=a("strong"),o3r=o("data2vec-vision"),r3r=o(" \u2014 "),vU=a("a"),t3r=o("Data2VecVisionForSemanticSegmentation"),a3r=o(" (Data2VecVision model)"),n3r=l(),p8=a("li"),rTe=a("strong"),s3r=o("dpt"),l3r=o(" \u2014 "),FU=a("a"),i3r=o("DPTForSemanticSegmentation"),d3r=o(" (DPT model)"),c3r=l(),_8=a("li"),tTe=a("strong"),f3r=o("mobilevit"),m3r=o(" \u2014 "),TU=a("a"),g3r=o("MobileViTForSemanticSegmentation"),h3r=o(" (MobileViT model)"),p3r=l(),u8=a("li"),aTe=a("strong"),_3r=o("segformer"),u3r=o(" \u2014 "),MU=a("a"),b3r=o("SegformerForSemanticSegmentation"),v3r=o(" (SegFormer model)"),F3r=l(),b8=a("p"),T3r=o("The model is set in evaluation mode by default using "),nTe=a("code"),M3r=o("model.eval()"),E3r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sTe=a("code"),C3r=o("model.train()"),w3r=l(),F(v8.$$.fragment),Ize=l(),nc=a("h2"),F8=a("a"),lTe=a("span"),F(Qy.$$.fragment),A3r=l(),iTe=a("span"),L3r=o("AutoModelForInstanceSegmentation"),Nze=l(),er=a("div"),F(Hy.$$.fragment),y3r=l(),sc=a("p"),x3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),EU=a("a"),$3r=o("from_pretrained()"),k3r=o(" class method or the "),CU=a("a"),S3r=o("from_config()"),R3r=o(` class
method.`),P3r=l(),Uy=a("p"),B3r=o("This class cannot be instantiated directly using "),dTe=a("code"),I3r=o("__init__()"),N3r=o(" (throws an error)."),q3r=l(),St=a("div"),F(Jy.$$.fragment),j3r=l(),cTe=a("p"),D3r=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),G3r=l(),lc=a("p"),O3r=o(`Note:
Loading a model from its configuration file does `),fTe=a("strong"),V3r=o("not"),X3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wU=a("a"),z3r=o("from_pretrained()"),W3r=o(" to load the model weights."),Q3r=l(),F(T8.$$.fragment),H3r=l(),To=a("div"),F(Yy.$$.fragment),U3r=l(),mTe=a("p"),J3r=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Y3r=l(),nn=a("p"),K3r=o("The model class to instantiate is selected based on the "),gTe=a("code"),Z3r=o("model_type"),evr=o(` property of the config object (either
passed as an argument or loaded from `),hTe=a("code"),ovr=o("pretrained_model_name_or_path"),rvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pTe=a("code"),tvr=o("pretrained_model_name_or_path"),avr=o(":"),nvr=l(),_Te=a("ul"),M8=a("li"),uTe=a("strong"),svr=o("maskformer"),lvr=o(" \u2014 "),AU=a("a"),ivr=o("MaskFormerForInstanceSegmentation"),dvr=o(" (MaskFormer model)"),cvr=l(),E8=a("p"),fvr=o("The model is set in evaluation mode by default using "),bTe=a("code"),mvr=o("model.eval()"),gvr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vTe=a("code"),hvr=o("model.train()"),pvr=l(),F(C8.$$.fragment),qze=l(),ic=a("h2"),w8=a("a"),FTe=a("span"),F(Ky.$$.fragment),_vr=l(),TTe=a("span"),uvr=o("TFAutoModel"),jze=l(),or=a("div"),F(Zy.$$.fragment),bvr=l(),dc=a("p"),vvr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),LU=a("a"),Fvr=o("from_pretrained()"),Tvr=o(" class method or the "),yU=a("a"),Mvr=o("from_config()"),Evr=o(` class
method.`),Cvr=l(),ex=a("p"),wvr=o("This class cannot be instantiated directly using "),MTe=a("code"),Avr=o("__init__()"),Lvr=o(" (throws an error)."),yvr=l(),Rt=a("div"),F(ox.$$.fragment),xvr=l(),ETe=a("p"),$vr=o("Instantiates one of the base model classes of the library from a configuration."),kvr=l(),cc=a("p"),Svr=o(`Note:
Loading a model from its configuration file does `),CTe=a("strong"),Rvr=o("not"),Pvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xU=a("a"),Bvr=o("from_pretrained()"),Ivr=o(" to load the model weights."),Nvr=l(),F(A8.$$.fragment),qvr=l(),xr=a("div"),F(rx.$$.fragment),jvr=l(),wTe=a("p"),Dvr=o("Instantiate one of the base model classes of the library from a pretrained model."),Gvr=l(),sn=a("p"),Ovr=o("The model class to instantiate is selected based on the "),ATe=a("code"),Vvr=o("model_type"),Xvr=o(` property of the config object (either
passed as an argument or loaded from `),LTe=a("code"),zvr=o("pretrained_model_name_or_path"),Wvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yTe=a("code"),Qvr=o("pretrained_model_name_or_path"),Hvr=o(":"),Uvr=l(),q=a("ul"),L8=a("li"),xTe=a("strong"),Jvr=o("albert"),Yvr=o(" \u2014 "),$U=a("a"),Kvr=o("TFAlbertModel"),Zvr=o(" (ALBERT model)"),eFr=l(),y8=a("li"),$Te=a("strong"),oFr=o("bart"),rFr=o(" \u2014 "),kU=a("a"),tFr=o("TFBartModel"),aFr=o(" (BART model)"),nFr=l(),x8=a("li"),kTe=a("strong"),sFr=o("bert"),lFr=o(" \u2014 "),SU=a("a"),iFr=o("TFBertModel"),dFr=o(" (BERT model)"),cFr=l(),$8=a("li"),STe=a("strong"),fFr=o("blenderbot"),mFr=o(" \u2014 "),RU=a("a"),gFr=o("TFBlenderbotModel"),hFr=o(" (Blenderbot model)"),pFr=l(),k8=a("li"),RTe=a("strong"),_Fr=o("blenderbot-small"),uFr=o(" \u2014 "),PU=a("a"),bFr=o("TFBlenderbotSmallModel"),vFr=o(" (BlenderbotSmall model)"),FFr=l(),S8=a("li"),PTe=a("strong"),TFr=o("camembert"),MFr=o(" \u2014 "),BU=a("a"),EFr=o("TFCamembertModel"),CFr=o(" (CamemBERT model)"),wFr=l(),R8=a("li"),BTe=a("strong"),AFr=o("clip"),LFr=o(" \u2014 "),IU=a("a"),yFr=o("TFCLIPModel"),xFr=o(" (CLIP model)"),$Fr=l(),P8=a("li"),ITe=a("strong"),kFr=o("convbert"),SFr=o(" \u2014 "),NU=a("a"),RFr=o("TFConvBertModel"),PFr=o(" (ConvBERT model)"),BFr=l(),B8=a("li"),NTe=a("strong"),IFr=o("convnext"),NFr=o(" \u2014 "),qU=a("a"),qFr=o("TFConvNextModel"),jFr=o(" (ConvNeXT model)"),DFr=l(),I8=a("li"),qTe=a("strong"),GFr=o("ctrl"),OFr=o(" \u2014 "),jU=a("a"),VFr=o("TFCTRLModel"),XFr=o(" (CTRL model)"),zFr=l(),N8=a("li"),jTe=a("strong"),WFr=o("data2vec-vision"),QFr=o(" \u2014 "),DU=a("a"),HFr=o("TFData2VecVisionModel"),UFr=o(" (Data2VecVision model)"),JFr=l(),q8=a("li"),DTe=a("strong"),YFr=o("deberta"),KFr=o(" \u2014 "),GU=a("a"),ZFr=o("TFDebertaModel"),eTr=o(" (DeBERTa model)"),oTr=l(),j8=a("li"),GTe=a("strong"),rTr=o("deberta-v2"),tTr=o(" \u2014 "),OU=a("a"),aTr=o("TFDebertaV2Model"),nTr=o(" (DeBERTa-v2 model)"),sTr=l(),D8=a("li"),OTe=a("strong"),lTr=o("deit"),iTr=o(" \u2014 "),VU=a("a"),dTr=o("TFDeiTModel"),cTr=o(" (DeiT model)"),fTr=l(),G8=a("li"),VTe=a("strong"),mTr=o("distilbert"),gTr=o(" \u2014 "),XU=a("a"),hTr=o("TFDistilBertModel"),pTr=o(" (DistilBERT model)"),_Tr=l(),O8=a("li"),XTe=a("strong"),uTr=o("dpr"),bTr=o(" \u2014 "),zU=a("a"),vTr=o("TFDPRQuestionEncoder"),FTr=o(" (DPR model)"),TTr=l(),V8=a("li"),zTe=a("strong"),MTr=o("electra"),ETr=o(" \u2014 "),WU=a("a"),CTr=o("TFElectraModel"),wTr=o(" (ELECTRA model)"),ATr=l(),X8=a("li"),WTe=a("strong"),LTr=o("flaubert"),yTr=o(" \u2014 "),QU=a("a"),xTr=o("TFFlaubertModel"),$Tr=o(" (FlauBERT model)"),kTr=l(),Ks=a("li"),QTe=a("strong"),STr=o("funnel"),RTr=o(" \u2014 "),HU=a("a"),PTr=o("TFFunnelModel"),BTr=o(" or "),UU=a("a"),ITr=o("TFFunnelBaseModel"),NTr=o(" (Funnel Transformer model)"),qTr=l(),z8=a("li"),HTe=a("strong"),jTr=o("gpt2"),DTr=o(" \u2014 "),JU=a("a"),GTr=o("TFGPT2Model"),OTr=o(" (OpenAI GPT-2 model)"),VTr=l(),W8=a("li"),UTe=a("strong"),XTr=o("gptj"),zTr=o(" \u2014 "),YU=a("a"),WTr=o("TFGPTJModel"),QTr=o(" (GPT-J model)"),HTr=l(),Q8=a("li"),JTe=a("strong"),UTr=o("hubert"),JTr=o(" \u2014 "),KU=a("a"),YTr=o("TFHubertModel"),KTr=o(" (Hubert model)"),ZTr=l(),H8=a("li"),YTe=a("strong"),e7r=o("layoutlm"),o7r=o(" \u2014 "),ZU=a("a"),r7r=o("TFLayoutLMModel"),t7r=o(" (LayoutLM model)"),a7r=l(),U8=a("li"),KTe=a("strong"),n7r=o("led"),s7r=o(" \u2014 "),eJ=a("a"),l7r=o("TFLEDModel"),i7r=o(" (LED model)"),d7r=l(),J8=a("li"),ZTe=a("strong"),c7r=o("longformer"),f7r=o(" \u2014 "),oJ=a("a"),m7r=o("TFLongformerModel"),g7r=o(" (Longformer model)"),h7r=l(),Y8=a("li"),e7e=a("strong"),p7r=o("lxmert"),_7r=o(" \u2014 "),rJ=a("a"),u7r=o("TFLxmertModel"),b7r=o(" (LXMERT model)"),v7r=l(),K8=a("li"),o7e=a("strong"),F7r=o("marian"),T7r=o(" \u2014 "),tJ=a("a"),M7r=o("TFMarianModel"),E7r=o(" (Marian model)"),C7r=l(),Z8=a("li"),r7e=a("strong"),w7r=o("mbart"),A7r=o(" \u2014 "),aJ=a("a"),L7r=o("TFMBartModel"),y7r=o(" (mBART model)"),x7r=l(),e9=a("li"),t7e=a("strong"),$7r=o("mobilebert"),k7r=o(" \u2014 "),nJ=a("a"),S7r=o("TFMobileBertModel"),R7r=o(" (MobileBERT model)"),P7r=l(),o9=a("li"),a7e=a("strong"),B7r=o("mpnet"),I7r=o(" \u2014 "),sJ=a("a"),N7r=o("TFMPNetModel"),q7r=o(" (MPNet model)"),j7r=l(),r9=a("li"),n7e=a("strong"),D7r=o("mt5"),G7r=o(" \u2014 "),lJ=a("a"),O7r=o("TFMT5Model"),V7r=o(" (MT5 model)"),X7r=l(),t9=a("li"),s7e=a("strong"),z7r=o("openai-gpt"),W7r=o(" \u2014 "),iJ=a("a"),Q7r=o("TFOpenAIGPTModel"),H7r=o(" (OpenAI GPT model)"),U7r=l(),a9=a("li"),l7e=a("strong"),J7r=o("opt"),Y7r=o(" \u2014 "),dJ=a("a"),K7r=o("TFOPTModel"),Z7r=o(" (OPT model)"),e8r=l(),n9=a("li"),i7e=a("strong"),o8r=o("pegasus"),r8r=o(" \u2014 "),cJ=a("a"),t8r=o("TFPegasusModel"),a8r=o(" (Pegasus model)"),n8r=l(),s9=a("li"),d7e=a("strong"),s8r=o("regnet"),l8r=o(" \u2014 "),fJ=a("a"),i8r=o("TFRegNetModel"),d8r=o(" (RegNet model)"),c8r=l(),l9=a("li"),c7e=a("strong"),f8r=o("rembert"),m8r=o(" \u2014 "),mJ=a("a"),g8r=o("TFRemBertModel"),h8r=o(" (RemBERT model)"),p8r=l(),i9=a("li"),f7e=a("strong"),_8r=o("resnet"),u8r=o(" \u2014 "),gJ=a("a"),b8r=o("TFResNetModel"),v8r=o(" (ResNet model)"),F8r=l(),d9=a("li"),m7e=a("strong"),T8r=o("roberta"),M8r=o(" \u2014 "),hJ=a("a"),E8r=o("TFRobertaModel"),C8r=o(" (RoBERTa model)"),w8r=l(),c9=a("li"),g7e=a("strong"),A8r=o("roformer"),L8r=o(" \u2014 "),pJ=a("a"),y8r=o("TFRoFormerModel"),x8r=o(" (RoFormer model)"),$8r=l(),f9=a("li"),h7e=a("strong"),k8r=o("speech_to_text"),S8r=o(" \u2014 "),_J=a("a"),R8r=o("TFSpeech2TextModel"),P8r=o(" (Speech2Text model)"),B8r=l(),m9=a("li"),p7e=a("strong"),I8r=o("swin"),N8r=o(" \u2014 "),uJ=a("a"),q8r=o("TFSwinModel"),j8r=o(" (Swin Transformer model)"),D8r=l(),g9=a("li"),_7e=a("strong"),G8r=o("t5"),O8r=o(" \u2014 "),bJ=a("a"),V8r=o("TFT5Model"),X8r=o(" (T5 model)"),z8r=l(),h9=a("li"),u7e=a("strong"),W8r=o("tapas"),Q8r=o(" \u2014 "),vJ=a("a"),H8r=o("TFTapasModel"),U8r=o(" (TAPAS model)"),J8r=l(),p9=a("li"),b7e=a("strong"),Y8r=o("transfo-xl"),K8r=o(" \u2014 "),FJ=a("a"),Z8r=o("TFTransfoXLModel"),e9r=o(" (Transformer-XL model)"),o9r=l(),_9=a("li"),v7e=a("strong"),r9r=o("vit"),t9r=o(" \u2014 "),TJ=a("a"),a9r=o("TFViTModel"),n9r=o(" (ViT model)"),s9r=l(),u9=a("li"),F7e=a("strong"),l9r=o("vit_mae"),i9r=o(" \u2014 "),MJ=a("a"),d9r=o("TFViTMAEModel"),c9r=o(" (ViTMAE model)"),f9r=l(),b9=a("li"),T7e=a("strong"),m9r=o("wav2vec2"),g9r=o(" \u2014 "),EJ=a("a"),h9r=o("TFWav2Vec2Model"),p9r=o(" (Wav2Vec2 model)"),_9r=l(),v9=a("li"),M7e=a("strong"),u9r=o("xlm"),b9r=o(" \u2014 "),CJ=a("a"),v9r=o("TFXLMModel"),F9r=o(" (XLM model)"),T9r=l(),F9=a("li"),E7e=a("strong"),M9r=o("xlm-roberta"),E9r=o(" \u2014 "),wJ=a("a"),C9r=o("TFXLMRobertaModel"),w9r=o(" (XLM-RoBERTa model)"),A9r=l(),T9=a("li"),C7e=a("strong"),L9r=o("xlnet"),y9r=o(" \u2014 "),AJ=a("a"),x9r=o("TFXLNetModel"),$9r=o(" (XLNet model)"),k9r=l(),F(M9.$$.fragment),Dze=l(),fc=a("h2"),E9=a("a"),w7e=a("span"),F(tx.$$.fragment),S9r=l(),A7e=a("span"),R9r=o("TFAutoModelForPreTraining"),Gze=l(),rr=a("div"),F(ax.$$.fragment),P9r=l(),mc=a("p"),B9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),LJ=a("a"),I9r=o("from_pretrained()"),N9r=o(" class method or the "),yJ=a("a"),q9r=o("from_config()"),j9r=o(` class
method.`),D9r=l(),nx=a("p"),G9r=o("This class cannot be instantiated directly using "),L7e=a("code"),O9r=o("__init__()"),V9r=o(" (throws an error)."),X9r=l(),Pt=a("div"),F(sx.$$.fragment),z9r=l(),y7e=a("p"),W9r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Q9r=l(),gc=a("p"),H9r=o(`Note:
Loading a model from its configuration file does `),x7e=a("strong"),U9r=o("not"),J9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xJ=a("a"),Y9r=o("from_pretrained()"),K9r=o(" to load the model weights."),Z9r=l(),F(C9.$$.fragment),eMr=l(),$r=a("div"),F(lx.$$.fragment),oMr=l(),$7e=a("p"),rMr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),tMr=l(),ln=a("p"),aMr=o("The model class to instantiate is selected based on the "),k7e=a("code"),nMr=o("model_type"),sMr=o(` property of the config object (either
passed as an argument or loaded from `),S7e=a("code"),lMr=o("pretrained_model_name_or_path"),iMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R7e=a("code"),dMr=o("pretrained_model_name_or_path"),cMr=o(":"),fMr=l(),se=a("ul"),w9=a("li"),P7e=a("strong"),mMr=o("albert"),gMr=o(" \u2014 "),$J=a("a"),hMr=o("TFAlbertForPreTraining"),pMr=o(" (ALBERT model)"),_Mr=l(),A9=a("li"),B7e=a("strong"),uMr=o("bart"),bMr=o(" \u2014 "),kJ=a("a"),vMr=o("TFBartForConditionalGeneration"),FMr=o(" (BART model)"),TMr=l(),L9=a("li"),I7e=a("strong"),MMr=o("bert"),EMr=o(" \u2014 "),SJ=a("a"),CMr=o("TFBertForPreTraining"),wMr=o(" (BERT model)"),AMr=l(),y9=a("li"),N7e=a("strong"),LMr=o("camembert"),yMr=o(" \u2014 "),RJ=a("a"),xMr=o("TFCamembertForMaskedLM"),$Mr=o(" (CamemBERT model)"),kMr=l(),x9=a("li"),q7e=a("strong"),SMr=o("ctrl"),RMr=o(" \u2014 "),PJ=a("a"),PMr=o("TFCTRLLMHeadModel"),BMr=o(" (CTRL model)"),IMr=l(),$9=a("li"),j7e=a("strong"),NMr=o("distilbert"),qMr=o(" \u2014 "),BJ=a("a"),jMr=o("TFDistilBertForMaskedLM"),DMr=o(" (DistilBERT model)"),GMr=l(),k9=a("li"),D7e=a("strong"),OMr=o("electra"),VMr=o(" \u2014 "),IJ=a("a"),XMr=o("TFElectraForPreTraining"),zMr=o(" (ELECTRA model)"),WMr=l(),S9=a("li"),G7e=a("strong"),QMr=o("flaubert"),HMr=o(" \u2014 "),NJ=a("a"),UMr=o("TFFlaubertWithLMHeadModel"),JMr=o(" (FlauBERT model)"),YMr=l(),R9=a("li"),O7e=a("strong"),KMr=o("funnel"),ZMr=o(" \u2014 "),qJ=a("a"),e4r=o("TFFunnelForPreTraining"),o4r=o(" (Funnel Transformer model)"),r4r=l(),P9=a("li"),V7e=a("strong"),t4r=o("gpt2"),a4r=o(" \u2014 "),jJ=a("a"),n4r=o("TFGPT2LMHeadModel"),s4r=o(" (OpenAI GPT-2 model)"),l4r=l(),B9=a("li"),X7e=a("strong"),i4r=o("layoutlm"),d4r=o(" \u2014 "),DJ=a("a"),c4r=o("TFLayoutLMForMaskedLM"),f4r=o(" (LayoutLM model)"),m4r=l(),I9=a("li"),z7e=a("strong"),g4r=o("lxmert"),h4r=o(" \u2014 "),GJ=a("a"),p4r=o("TFLxmertForPreTraining"),_4r=o(" (LXMERT model)"),u4r=l(),N9=a("li"),W7e=a("strong"),b4r=o("mobilebert"),v4r=o(" \u2014 "),OJ=a("a"),F4r=o("TFMobileBertForPreTraining"),T4r=o(" (MobileBERT model)"),M4r=l(),q9=a("li"),Q7e=a("strong"),E4r=o("mpnet"),C4r=o(" \u2014 "),VJ=a("a"),w4r=o("TFMPNetForMaskedLM"),A4r=o(" (MPNet model)"),L4r=l(),j9=a("li"),H7e=a("strong"),y4r=o("openai-gpt"),x4r=o(" \u2014 "),XJ=a("a"),$4r=o("TFOpenAIGPTLMHeadModel"),k4r=o(" (OpenAI GPT model)"),S4r=l(),D9=a("li"),U7e=a("strong"),R4r=o("roberta"),P4r=o(" \u2014 "),zJ=a("a"),B4r=o("TFRobertaForMaskedLM"),I4r=o(" (RoBERTa model)"),N4r=l(),G9=a("li"),J7e=a("strong"),q4r=o("t5"),j4r=o(" \u2014 "),WJ=a("a"),D4r=o("TFT5ForConditionalGeneration"),G4r=o(" (T5 model)"),O4r=l(),O9=a("li"),Y7e=a("strong"),V4r=o("tapas"),X4r=o(" \u2014 "),QJ=a("a"),z4r=o("TFTapasForMaskedLM"),W4r=o(" (TAPAS model)"),Q4r=l(),V9=a("li"),K7e=a("strong"),H4r=o("transfo-xl"),U4r=o(" \u2014 "),HJ=a("a"),J4r=o("TFTransfoXLLMHeadModel"),Y4r=o(" (Transformer-XL model)"),K4r=l(),X9=a("li"),Z7e=a("strong"),Z4r=o("vit_mae"),eEr=o(" \u2014 "),UJ=a("a"),oEr=o("TFViTMAEForPreTraining"),rEr=o(" (ViTMAE model)"),tEr=l(),z9=a("li"),e8e=a("strong"),aEr=o("xlm"),nEr=o(" \u2014 "),JJ=a("a"),sEr=o("TFXLMWithLMHeadModel"),lEr=o(" (XLM model)"),iEr=l(),W9=a("li"),o8e=a("strong"),dEr=o("xlm-roberta"),cEr=o(" \u2014 "),YJ=a("a"),fEr=o("TFXLMRobertaForMaskedLM"),mEr=o(" (XLM-RoBERTa model)"),gEr=l(),Q9=a("li"),r8e=a("strong"),hEr=o("xlnet"),pEr=o(" \u2014 "),KJ=a("a"),_Er=o("TFXLNetLMHeadModel"),uEr=o(" (XLNet model)"),bEr=l(),F(H9.$$.fragment),Oze=l(),hc=a("h2"),U9=a("a"),t8e=a("span"),F(ix.$$.fragment),vEr=l(),a8e=a("span"),FEr=o("TFAutoModelForCausalLM"),Vze=l(),tr=a("div"),F(dx.$$.fragment),TEr=l(),pc=a("p"),MEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ZJ=a("a"),EEr=o("from_pretrained()"),CEr=o(" class method or the "),eY=a("a"),wEr=o("from_config()"),AEr=o(` class
method.`),LEr=l(),cx=a("p"),yEr=o("This class cannot be instantiated directly using "),n8e=a("code"),xEr=o("__init__()"),$Er=o(" (throws an error)."),kEr=l(),Bt=a("div"),F(fx.$$.fragment),SEr=l(),s8e=a("p"),REr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),PEr=l(),_c=a("p"),BEr=o(`Note:
Loading a model from its configuration file does `),l8e=a("strong"),IEr=o("not"),NEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=a("a"),qEr=o("from_pretrained()"),jEr=o(" to load the model weights."),DEr=l(),F(J9.$$.fragment),GEr=l(),kr=a("div"),F(mx.$$.fragment),OEr=l(),i8e=a("p"),VEr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),XEr=l(),dn=a("p"),zEr=o("The model class to instantiate is selected based on the "),d8e=a("code"),WEr=o("model_type"),QEr=o(` property of the config object (either
passed as an argument or loaded from `),c8e=a("code"),HEr=o("pretrained_model_name_or_path"),UEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f8e=a("code"),JEr=o("pretrained_model_name_or_path"),YEr=o(":"),KEr=l(),Me=a("ul"),Y9=a("li"),m8e=a("strong"),ZEr=o("bert"),eCr=o(" \u2014 "),rY=a("a"),oCr=o("TFBertLMHeadModel"),rCr=o(" (BERT model)"),tCr=l(),K9=a("li"),g8e=a("strong"),aCr=o("camembert"),nCr=o(" \u2014 "),tY=a("a"),sCr=o("TFCamembertForCausalLM"),lCr=o(" (CamemBERT model)"),iCr=l(),Z9=a("li"),h8e=a("strong"),dCr=o("ctrl"),cCr=o(" \u2014 "),aY=a("a"),fCr=o("TFCTRLLMHeadModel"),mCr=o(" (CTRL model)"),gCr=l(),eM=a("li"),p8e=a("strong"),hCr=o("gpt2"),pCr=o(" \u2014 "),nY=a("a"),_Cr=o("TFGPT2LMHeadModel"),uCr=o(" (OpenAI GPT-2 model)"),bCr=l(),oM=a("li"),_8e=a("strong"),vCr=o("gptj"),FCr=o(" \u2014 "),sY=a("a"),TCr=o("TFGPTJForCausalLM"),MCr=o(" (GPT-J model)"),ECr=l(),rM=a("li"),u8e=a("strong"),CCr=o("openai-gpt"),wCr=o(" \u2014 "),lY=a("a"),ACr=o("TFOpenAIGPTLMHeadModel"),LCr=o(" (OpenAI GPT model)"),yCr=l(),tM=a("li"),b8e=a("strong"),xCr=o("opt"),$Cr=o(" \u2014 "),iY=a("a"),kCr=o("TFOPTForCausalLM"),SCr=o(" (OPT model)"),RCr=l(),aM=a("li"),v8e=a("strong"),PCr=o("rembert"),BCr=o(" \u2014 "),dY=a("a"),ICr=o("TFRemBertForCausalLM"),NCr=o(" (RemBERT model)"),qCr=l(),nM=a("li"),F8e=a("strong"),jCr=o("roberta"),DCr=o(" \u2014 "),cY=a("a"),GCr=o("TFRobertaForCausalLM"),OCr=o(" (RoBERTa model)"),VCr=l(),sM=a("li"),T8e=a("strong"),XCr=o("roformer"),zCr=o(" \u2014 "),fY=a("a"),WCr=o("TFRoFormerForCausalLM"),QCr=o(" (RoFormer model)"),HCr=l(),lM=a("li"),M8e=a("strong"),UCr=o("transfo-xl"),JCr=o(" \u2014 "),mY=a("a"),YCr=o("TFTransfoXLLMHeadModel"),KCr=o(" (Transformer-XL model)"),ZCr=l(),iM=a("li"),E8e=a("strong"),e5r=o("xlm"),o5r=o(" \u2014 "),gY=a("a"),r5r=o("TFXLMWithLMHeadModel"),t5r=o(" (XLM model)"),a5r=l(),dM=a("li"),C8e=a("strong"),n5r=o("xlnet"),s5r=o(" \u2014 "),hY=a("a"),l5r=o("TFXLNetLMHeadModel"),i5r=o(" (XLNet model)"),d5r=l(),F(cM.$$.fragment),Xze=l(),uc=a("h2"),fM=a("a"),w8e=a("span"),F(gx.$$.fragment),c5r=l(),A8e=a("span"),f5r=o("TFAutoModelForImageClassification"),zze=l(),ar=a("div"),F(hx.$$.fragment),m5r=l(),bc=a("p"),g5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pY=a("a"),h5r=o("from_pretrained()"),p5r=o(" class method or the "),_Y=a("a"),_5r=o("from_config()"),u5r=o(` class
method.`),b5r=l(),px=a("p"),v5r=o("This class cannot be instantiated directly using "),L8e=a("code"),F5r=o("__init__()"),T5r=o(" (throws an error)."),M5r=l(),It=a("div"),F(_x.$$.fragment),E5r=l(),y8e=a("p"),C5r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),w5r=l(),vc=a("p"),A5r=o(`Note:
Loading a model from its configuration file does `),x8e=a("strong"),L5r=o("not"),y5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uY=a("a"),x5r=o("from_pretrained()"),$5r=o(" to load the model weights."),k5r=l(),F(mM.$$.fragment),S5r=l(),Sr=a("div"),F(ux.$$.fragment),R5r=l(),$8e=a("p"),P5r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),B5r=l(),cn=a("p"),I5r=o("The model class to instantiate is selected based on the "),k8e=a("code"),N5r=o("model_type"),q5r=o(` property of the config object (either
passed as an argument or loaded from `),S8e=a("code"),j5r=o("pretrained_model_name_or_path"),D5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R8e=a("code"),G5r=o("pretrained_model_name_or_path"),O5r=o(":"),V5r=l(),We=a("ul"),gM=a("li"),P8e=a("strong"),X5r=o("convnext"),z5r=o(" \u2014 "),bY=a("a"),W5r=o("TFConvNextForImageClassification"),Q5r=o(" (ConvNeXT model)"),H5r=l(),hM=a("li"),B8e=a("strong"),U5r=o("data2vec-vision"),J5r=o(" \u2014 "),vY=a("a"),Y5r=o("TFData2VecVisionForImageClassification"),K5r=o(" (Data2VecVision model)"),Z5r=l(),Zs=a("li"),I8e=a("strong"),e0r=o("deit"),o0r=o(" \u2014 "),FY=a("a"),r0r=o("TFDeiTForImageClassification"),t0r=o(" or "),TY=a("a"),a0r=o("TFDeiTForImageClassificationWithTeacher"),n0r=o(" (DeiT model)"),s0r=l(),pM=a("li"),N8e=a("strong"),l0r=o("regnet"),i0r=o(" \u2014 "),MY=a("a"),d0r=o("TFRegNetForImageClassification"),c0r=o(" (RegNet model)"),f0r=l(),_M=a("li"),q8e=a("strong"),m0r=o("resnet"),g0r=o(" \u2014 "),EY=a("a"),h0r=o("TFResNetForImageClassification"),p0r=o(" (ResNet model)"),_0r=l(),uM=a("li"),j8e=a("strong"),u0r=o("swin"),b0r=o(" \u2014 "),CY=a("a"),v0r=o("TFSwinForImageClassification"),F0r=o(" (Swin Transformer model)"),T0r=l(),bM=a("li"),D8e=a("strong"),M0r=o("vit"),E0r=o(" \u2014 "),wY=a("a"),C0r=o("TFViTForImageClassification"),w0r=o(" (ViT model)"),A0r=l(),F(vM.$$.fragment),Wze=l(),Fc=a("h2"),FM=a("a"),G8e=a("span"),F(bx.$$.fragment),L0r=l(),O8e=a("span"),y0r=o("TFAutoModelForMaskedLM"),Qze=l(),nr=a("div"),F(vx.$$.fragment),x0r=l(),Tc=a("p"),$0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),AY=a("a"),k0r=o("from_pretrained()"),S0r=o(" class method or the "),LY=a("a"),R0r=o("from_config()"),P0r=o(` class
method.`),B0r=l(),Fx=a("p"),I0r=o("This class cannot be instantiated directly using "),V8e=a("code"),N0r=o("__init__()"),q0r=o(" (throws an error)."),j0r=l(),Nt=a("div"),F(Tx.$$.fragment),D0r=l(),X8e=a("p"),G0r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),O0r=l(),Mc=a("p"),V0r=o(`Note:
Loading a model from its configuration file does `),z8e=a("strong"),X0r=o("not"),z0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yY=a("a"),W0r=o("from_pretrained()"),Q0r=o(" to load the model weights."),H0r=l(),F(TM.$$.fragment),U0r=l(),Rr=a("div"),F(Mx.$$.fragment),J0r=l(),W8e=a("p"),Y0r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),K0r=l(),fn=a("p"),Z0r=o("The model class to instantiate is selected based on the "),Q8e=a("code"),ewr=o("model_type"),owr=o(` property of the config object (either
passed as an argument or loaded from `),H8e=a("code"),rwr=o("pretrained_model_name_or_path"),twr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U8e=a("code"),awr=o("pretrained_model_name_or_path"),nwr=o(":"),swr=l(),ie=a("ul"),MM=a("li"),J8e=a("strong"),lwr=o("albert"),iwr=o(" \u2014 "),xY=a("a"),dwr=o("TFAlbertForMaskedLM"),cwr=o(" (ALBERT model)"),fwr=l(),EM=a("li"),Y8e=a("strong"),mwr=o("bert"),gwr=o(" \u2014 "),$Y=a("a"),hwr=o("TFBertForMaskedLM"),pwr=o(" (BERT model)"),_wr=l(),CM=a("li"),K8e=a("strong"),uwr=o("camembert"),bwr=o(" \u2014 "),kY=a("a"),vwr=o("TFCamembertForMaskedLM"),Fwr=o(" (CamemBERT model)"),Twr=l(),wM=a("li"),Z8e=a("strong"),Mwr=o("convbert"),Ewr=o(" \u2014 "),SY=a("a"),Cwr=o("TFConvBertForMaskedLM"),wwr=o(" (ConvBERT model)"),Awr=l(),AM=a("li"),e9e=a("strong"),Lwr=o("deberta"),ywr=o(" \u2014 "),RY=a("a"),xwr=o("TFDebertaForMaskedLM"),$wr=o(" (DeBERTa model)"),kwr=l(),LM=a("li"),o9e=a("strong"),Swr=o("deberta-v2"),Rwr=o(" \u2014 "),PY=a("a"),Pwr=o("TFDebertaV2ForMaskedLM"),Bwr=o(" (DeBERTa-v2 model)"),Iwr=l(),yM=a("li"),r9e=a("strong"),Nwr=o("distilbert"),qwr=o(" \u2014 "),BY=a("a"),jwr=o("TFDistilBertForMaskedLM"),Dwr=o(" (DistilBERT model)"),Gwr=l(),xM=a("li"),t9e=a("strong"),Owr=o("electra"),Vwr=o(" \u2014 "),IY=a("a"),Xwr=o("TFElectraForMaskedLM"),zwr=o(" (ELECTRA model)"),Wwr=l(),$M=a("li"),a9e=a("strong"),Qwr=o("flaubert"),Hwr=o(" \u2014 "),NY=a("a"),Uwr=o("TFFlaubertWithLMHeadModel"),Jwr=o(" (FlauBERT model)"),Ywr=l(),kM=a("li"),n9e=a("strong"),Kwr=o("funnel"),Zwr=o(" \u2014 "),qY=a("a"),eAr=o("TFFunnelForMaskedLM"),oAr=o(" (Funnel Transformer model)"),rAr=l(),SM=a("li"),s9e=a("strong"),tAr=o("layoutlm"),aAr=o(" \u2014 "),jY=a("a"),nAr=o("TFLayoutLMForMaskedLM"),sAr=o(" (LayoutLM model)"),lAr=l(),RM=a("li"),l9e=a("strong"),iAr=o("longformer"),dAr=o(" \u2014 "),DY=a("a"),cAr=o("TFLongformerForMaskedLM"),fAr=o(" (Longformer model)"),mAr=l(),PM=a("li"),i9e=a("strong"),gAr=o("mobilebert"),hAr=o(" \u2014 "),GY=a("a"),pAr=o("TFMobileBertForMaskedLM"),_Ar=o(" (MobileBERT model)"),uAr=l(),BM=a("li"),d9e=a("strong"),bAr=o("mpnet"),vAr=o(" \u2014 "),OY=a("a"),FAr=o("TFMPNetForMaskedLM"),TAr=o(" (MPNet model)"),MAr=l(),IM=a("li"),c9e=a("strong"),EAr=o("rembert"),CAr=o(" \u2014 "),VY=a("a"),wAr=o("TFRemBertForMaskedLM"),AAr=o(" (RemBERT model)"),LAr=l(),NM=a("li"),f9e=a("strong"),yAr=o("roberta"),xAr=o(" \u2014 "),XY=a("a"),$Ar=o("TFRobertaForMaskedLM"),kAr=o(" (RoBERTa model)"),SAr=l(),qM=a("li"),m9e=a("strong"),RAr=o("roformer"),PAr=o(" \u2014 "),zY=a("a"),BAr=o("TFRoFormerForMaskedLM"),IAr=o(" (RoFormer model)"),NAr=l(),jM=a("li"),g9e=a("strong"),qAr=o("tapas"),jAr=o(" \u2014 "),WY=a("a"),DAr=o("TFTapasForMaskedLM"),GAr=o(" (TAPAS model)"),OAr=l(),DM=a("li"),h9e=a("strong"),VAr=o("xlm"),XAr=o(" \u2014 "),QY=a("a"),zAr=o("TFXLMWithLMHeadModel"),WAr=o(" (XLM model)"),QAr=l(),GM=a("li"),p9e=a("strong"),HAr=o("xlm-roberta"),UAr=o(" \u2014 "),HY=a("a"),JAr=o("TFXLMRobertaForMaskedLM"),YAr=o(" (XLM-RoBERTa model)"),KAr=l(),F(OM.$$.fragment),Hze=l(),Ec=a("h2"),VM=a("a"),_9e=a("span"),F(Ex.$$.fragment),ZAr=l(),u9e=a("span"),e6r=o("TFAutoModelForSeq2SeqLM"),Uze=l(),sr=a("div"),F(Cx.$$.fragment),o6r=l(),Cc=a("p"),r6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),UY=a("a"),t6r=o("from_pretrained()"),a6r=o(" class method or the "),JY=a("a"),n6r=o("from_config()"),s6r=o(` class
method.`),l6r=l(),wx=a("p"),i6r=o("This class cannot be instantiated directly using "),b9e=a("code"),d6r=o("__init__()"),c6r=o(" (throws an error)."),f6r=l(),qt=a("div"),F(Ax.$$.fragment),m6r=l(),v9e=a("p"),g6r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),h6r=l(),wc=a("p"),p6r=o(`Note:
Loading a model from its configuration file does `),F9e=a("strong"),_6r=o("not"),u6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YY=a("a"),b6r=o("from_pretrained()"),v6r=o(" to load the model weights."),F6r=l(),F(XM.$$.fragment),T6r=l(),Pr=a("div"),F(Lx.$$.fragment),M6r=l(),T9e=a("p"),E6r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),C6r=l(),mn=a("p"),w6r=o("The model class to instantiate is selected based on the "),M9e=a("code"),A6r=o("model_type"),L6r=o(` property of the config object (either
passed as an argument or loaded from `),E9e=a("code"),y6r=o("pretrained_model_name_or_path"),x6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C9e=a("code"),$6r=o("pretrained_model_name_or_path"),k6r=o(":"),S6r=l(),ye=a("ul"),zM=a("li"),w9e=a("strong"),R6r=o("bart"),P6r=o(" \u2014 "),KY=a("a"),B6r=o("TFBartForConditionalGeneration"),I6r=o(" (BART model)"),N6r=l(),WM=a("li"),A9e=a("strong"),q6r=o("blenderbot"),j6r=o(" \u2014 "),ZY=a("a"),D6r=o("TFBlenderbotForConditionalGeneration"),G6r=o(" (Blenderbot model)"),O6r=l(),QM=a("li"),L9e=a("strong"),V6r=o("blenderbot-small"),X6r=o(" \u2014 "),eK=a("a"),z6r=o("TFBlenderbotSmallForConditionalGeneration"),W6r=o(" (BlenderbotSmall model)"),Q6r=l(),HM=a("li"),y9e=a("strong"),H6r=o("encoder-decoder"),U6r=o(" \u2014 "),oK=a("a"),J6r=o("TFEncoderDecoderModel"),Y6r=o(" (Encoder decoder model)"),K6r=l(),UM=a("li"),x9e=a("strong"),Z6r=o("led"),eLr=o(" \u2014 "),rK=a("a"),oLr=o("TFLEDForConditionalGeneration"),rLr=o(" (LED model)"),tLr=l(),JM=a("li"),$9e=a("strong"),aLr=o("marian"),nLr=o(" \u2014 "),tK=a("a"),sLr=o("TFMarianMTModel"),lLr=o(" (Marian model)"),iLr=l(),YM=a("li"),k9e=a("strong"),dLr=o("mbart"),cLr=o(" \u2014 "),aK=a("a"),fLr=o("TFMBartForConditionalGeneration"),mLr=o(" (mBART model)"),gLr=l(),KM=a("li"),S9e=a("strong"),hLr=o("mt5"),pLr=o(" \u2014 "),nK=a("a"),_Lr=o("TFMT5ForConditionalGeneration"),uLr=o(" (MT5 model)"),bLr=l(),ZM=a("li"),R9e=a("strong"),vLr=o("pegasus"),FLr=o(" \u2014 "),sK=a("a"),TLr=o("TFPegasusForConditionalGeneration"),MLr=o(" (Pegasus model)"),ELr=l(),e4=a("li"),P9e=a("strong"),CLr=o("t5"),wLr=o(" \u2014 "),lK=a("a"),ALr=o("TFT5ForConditionalGeneration"),LLr=o(" (T5 model)"),yLr=l(),F(o4.$$.fragment),Jze=l(),Ac=a("h2"),r4=a("a"),B9e=a("span"),F(yx.$$.fragment),xLr=l(),I9e=a("span"),$Lr=o("TFAutoModelForSequenceClassification"),Yze=l(),lr=a("div"),F(xx.$$.fragment),kLr=l(),Lc=a("p"),SLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),iK=a("a"),RLr=o("from_pretrained()"),PLr=o(" class method or the "),dK=a("a"),BLr=o("from_config()"),ILr=o(` class
method.`),NLr=l(),$x=a("p"),qLr=o("This class cannot be instantiated directly using "),N9e=a("code"),jLr=o("__init__()"),DLr=o(" (throws an error)."),GLr=l(),jt=a("div"),F(kx.$$.fragment),OLr=l(),q9e=a("p"),VLr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),XLr=l(),yc=a("p"),zLr=o(`Note:
Loading a model from its configuration file does `),j9e=a("strong"),WLr=o("not"),QLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cK=a("a"),HLr=o("from_pretrained()"),ULr=o(" to load the model weights."),JLr=l(),F(t4.$$.fragment),YLr=l(),Br=a("div"),F(Sx.$$.fragment),KLr=l(),D9e=a("p"),ZLr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),eyr=l(),gn=a("p"),oyr=o("The model class to instantiate is selected based on the "),G9e=a("code"),ryr=o("model_type"),tyr=o(` property of the config object (either
passed as an argument or loaded from `),O9e=a("code"),ayr=o("pretrained_model_name_or_path"),nyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V9e=a("code"),syr=o("pretrained_model_name_or_path"),lyr=o(":"),iyr=l(),te=a("ul"),a4=a("li"),X9e=a("strong"),dyr=o("albert"),cyr=o(" \u2014 "),fK=a("a"),fyr=o("TFAlbertForSequenceClassification"),myr=o(" (ALBERT model)"),gyr=l(),n4=a("li"),z9e=a("strong"),hyr=o("bert"),pyr=o(" \u2014 "),mK=a("a"),_yr=o("TFBertForSequenceClassification"),uyr=o(" (BERT model)"),byr=l(),s4=a("li"),W9e=a("strong"),vyr=o("camembert"),Fyr=o(" \u2014 "),gK=a("a"),Tyr=o("TFCamembertForSequenceClassification"),Myr=o(" (CamemBERT model)"),Eyr=l(),l4=a("li"),Q9e=a("strong"),Cyr=o("convbert"),wyr=o(" \u2014 "),hK=a("a"),Ayr=o("TFConvBertForSequenceClassification"),Lyr=o(" (ConvBERT model)"),yyr=l(),i4=a("li"),H9e=a("strong"),xyr=o("ctrl"),$yr=o(" \u2014 "),pK=a("a"),kyr=o("TFCTRLForSequenceClassification"),Syr=o(" (CTRL model)"),Ryr=l(),d4=a("li"),U9e=a("strong"),Pyr=o("deberta"),Byr=o(" \u2014 "),_K=a("a"),Iyr=o("TFDebertaForSequenceClassification"),Nyr=o(" (DeBERTa model)"),qyr=l(),c4=a("li"),J9e=a("strong"),jyr=o("deberta-v2"),Dyr=o(" \u2014 "),uK=a("a"),Gyr=o("TFDebertaV2ForSequenceClassification"),Oyr=o(" (DeBERTa-v2 model)"),Vyr=l(),f4=a("li"),Y9e=a("strong"),Xyr=o("distilbert"),zyr=o(" \u2014 "),bK=a("a"),Wyr=o("TFDistilBertForSequenceClassification"),Qyr=o(" (DistilBERT model)"),Hyr=l(),m4=a("li"),K9e=a("strong"),Uyr=o("electra"),Jyr=o(" \u2014 "),vK=a("a"),Yyr=o("TFElectraForSequenceClassification"),Kyr=o(" (ELECTRA model)"),Zyr=l(),g4=a("li"),Z9e=a("strong"),exr=o("flaubert"),oxr=o(" \u2014 "),FK=a("a"),rxr=o("TFFlaubertForSequenceClassification"),txr=o(" (FlauBERT model)"),axr=l(),h4=a("li"),eMe=a("strong"),nxr=o("funnel"),sxr=o(" \u2014 "),TK=a("a"),lxr=o("TFFunnelForSequenceClassification"),ixr=o(" (Funnel Transformer model)"),dxr=l(),p4=a("li"),oMe=a("strong"),cxr=o("gpt2"),fxr=o(" \u2014 "),MK=a("a"),mxr=o("TFGPT2ForSequenceClassification"),gxr=o(" (OpenAI GPT-2 model)"),hxr=l(),_4=a("li"),rMe=a("strong"),pxr=o("gptj"),_xr=o(" \u2014 "),EK=a("a"),uxr=o("TFGPTJForSequenceClassification"),bxr=o(" (GPT-J model)"),vxr=l(),u4=a("li"),tMe=a("strong"),Fxr=o("layoutlm"),Txr=o(" \u2014 "),CK=a("a"),Mxr=o("TFLayoutLMForSequenceClassification"),Exr=o(" (LayoutLM model)"),Cxr=l(),b4=a("li"),aMe=a("strong"),wxr=o("longformer"),Axr=o(" \u2014 "),wK=a("a"),Lxr=o("TFLongformerForSequenceClassification"),yxr=o(" (Longformer model)"),xxr=l(),v4=a("li"),nMe=a("strong"),$xr=o("mobilebert"),kxr=o(" \u2014 "),AK=a("a"),Sxr=o("TFMobileBertForSequenceClassification"),Rxr=o(" (MobileBERT model)"),Pxr=l(),F4=a("li"),sMe=a("strong"),Bxr=o("mpnet"),Ixr=o(" \u2014 "),LK=a("a"),Nxr=o("TFMPNetForSequenceClassification"),qxr=o(" (MPNet model)"),jxr=l(),T4=a("li"),lMe=a("strong"),Dxr=o("openai-gpt"),Gxr=o(" \u2014 "),yK=a("a"),Oxr=o("TFOpenAIGPTForSequenceClassification"),Vxr=o(" (OpenAI GPT model)"),Xxr=l(),M4=a("li"),iMe=a("strong"),zxr=o("rembert"),Wxr=o(" \u2014 "),xK=a("a"),Qxr=o("TFRemBertForSequenceClassification"),Hxr=o(" (RemBERT model)"),Uxr=l(),E4=a("li"),dMe=a("strong"),Jxr=o("roberta"),Yxr=o(" \u2014 "),$K=a("a"),Kxr=o("TFRobertaForSequenceClassification"),Zxr=o(" (RoBERTa model)"),e$r=l(),C4=a("li"),cMe=a("strong"),o$r=o("roformer"),r$r=o(" \u2014 "),kK=a("a"),t$r=o("TFRoFormerForSequenceClassification"),a$r=o(" (RoFormer model)"),n$r=l(),w4=a("li"),fMe=a("strong"),s$r=o("tapas"),l$r=o(" \u2014 "),SK=a("a"),i$r=o("TFTapasForSequenceClassification"),d$r=o(" (TAPAS model)"),c$r=l(),A4=a("li"),mMe=a("strong"),f$r=o("transfo-xl"),m$r=o(" \u2014 "),RK=a("a"),g$r=o("TFTransfoXLForSequenceClassification"),h$r=o(" (Transformer-XL model)"),p$r=l(),L4=a("li"),gMe=a("strong"),_$r=o("xlm"),u$r=o(" \u2014 "),PK=a("a"),b$r=o("TFXLMForSequenceClassification"),v$r=o(" (XLM model)"),F$r=l(),y4=a("li"),hMe=a("strong"),T$r=o("xlm-roberta"),M$r=o(" \u2014 "),BK=a("a"),E$r=o("TFXLMRobertaForSequenceClassification"),C$r=o(" (XLM-RoBERTa model)"),w$r=l(),x4=a("li"),pMe=a("strong"),A$r=o("xlnet"),L$r=o(" \u2014 "),IK=a("a"),y$r=o("TFXLNetForSequenceClassification"),x$r=o(" (XLNet model)"),$$r=l(),F($4.$$.fragment),Kze=l(),xc=a("h2"),k4=a("a"),_Me=a("span"),F(Rx.$$.fragment),k$r=l(),uMe=a("span"),S$r=o("TFAutoModelForMultipleChoice"),Zze=l(),ir=a("div"),F(Px.$$.fragment),R$r=l(),$c=a("p"),P$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),NK=a("a"),B$r=o("from_pretrained()"),I$r=o(" class method or the "),qK=a("a"),N$r=o("from_config()"),q$r=o(` class
method.`),j$r=l(),Bx=a("p"),D$r=o("This class cannot be instantiated directly using "),bMe=a("code"),G$r=o("__init__()"),O$r=o(" (throws an error)."),V$r=l(),Dt=a("div"),F(Ix.$$.fragment),X$r=l(),vMe=a("p"),z$r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),W$r=l(),kc=a("p"),Q$r=o(`Note:
Loading a model from its configuration file does `),FMe=a("strong"),H$r=o("not"),U$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=a("a"),J$r=o("from_pretrained()"),Y$r=o(" to load the model weights."),K$r=l(),F(S4.$$.fragment),Z$r=l(),Ir=a("div"),F(Nx.$$.fragment),ekr=l(),TMe=a("p"),okr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),rkr=l(),hn=a("p"),tkr=o("The model class to instantiate is selected based on the "),MMe=a("code"),akr=o("model_type"),nkr=o(` property of the config object (either
passed as an argument or loaded from `),EMe=a("code"),skr=o("pretrained_model_name_or_path"),lkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CMe=a("code"),ikr=o("pretrained_model_name_or_path"),dkr=o(":"),ckr=l(),be=a("ul"),R4=a("li"),wMe=a("strong"),fkr=o("albert"),mkr=o(" \u2014 "),DK=a("a"),gkr=o("TFAlbertForMultipleChoice"),hkr=o(" (ALBERT model)"),pkr=l(),P4=a("li"),AMe=a("strong"),_kr=o("bert"),ukr=o(" \u2014 "),GK=a("a"),bkr=o("TFBertForMultipleChoice"),vkr=o(" (BERT model)"),Fkr=l(),B4=a("li"),LMe=a("strong"),Tkr=o("camembert"),Mkr=o(" \u2014 "),OK=a("a"),Ekr=o("TFCamembertForMultipleChoice"),Ckr=o(" (CamemBERT model)"),wkr=l(),I4=a("li"),yMe=a("strong"),Akr=o("convbert"),Lkr=o(" \u2014 "),VK=a("a"),ykr=o("TFConvBertForMultipleChoice"),xkr=o(" (ConvBERT model)"),$kr=l(),N4=a("li"),xMe=a("strong"),kkr=o("distilbert"),Skr=o(" \u2014 "),XK=a("a"),Rkr=o("TFDistilBertForMultipleChoice"),Pkr=o(" (DistilBERT model)"),Bkr=l(),q4=a("li"),$Me=a("strong"),Ikr=o("electra"),Nkr=o(" \u2014 "),zK=a("a"),qkr=o("TFElectraForMultipleChoice"),jkr=o(" (ELECTRA model)"),Dkr=l(),j4=a("li"),kMe=a("strong"),Gkr=o("flaubert"),Okr=o(" \u2014 "),WK=a("a"),Vkr=o("TFFlaubertForMultipleChoice"),Xkr=o(" (FlauBERT model)"),zkr=l(),D4=a("li"),SMe=a("strong"),Wkr=o("funnel"),Qkr=o(" \u2014 "),QK=a("a"),Hkr=o("TFFunnelForMultipleChoice"),Ukr=o(" (Funnel Transformer model)"),Jkr=l(),G4=a("li"),RMe=a("strong"),Ykr=o("longformer"),Kkr=o(" \u2014 "),HK=a("a"),Zkr=o("TFLongformerForMultipleChoice"),eSr=o(" (Longformer model)"),oSr=l(),O4=a("li"),PMe=a("strong"),rSr=o("mobilebert"),tSr=o(" \u2014 "),UK=a("a"),aSr=o("TFMobileBertForMultipleChoice"),nSr=o(" (MobileBERT model)"),sSr=l(),V4=a("li"),BMe=a("strong"),lSr=o("mpnet"),iSr=o(" \u2014 "),JK=a("a"),dSr=o("TFMPNetForMultipleChoice"),cSr=o(" (MPNet model)"),fSr=l(),X4=a("li"),IMe=a("strong"),mSr=o("rembert"),gSr=o(" \u2014 "),YK=a("a"),hSr=o("TFRemBertForMultipleChoice"),pSr=o(" (RemBERT model)"),_Sr=l(),z4=a("li"),NMe=a("strong"),uSr=o("roberta"),bSr=o(" \u2014 "),KK=a("a"),vSr=o("TFRobertaForMultipleChoice"),FSr=o(" (RoBERTa model)"),TSr=l(),W4=a("li"),qMe=a("strong"),MSr=o("roformer"),ESr=o(" \u2014 "),ZK=a("a"),CSr=o("TFRoFormerForMultipleChoice"),wSr=o(" (RoFormer model)"),ASr=l(),Q4=a("li"),jMe=a("strong"),LSr=o("xlm"),ySr=o(" \u2014 "),eZ=a("a"),xSr=o("TFXLMForMultipleChoice"),$Sr=o(" (XLM model)"),kSr=l(),H4=a("li"),DMe=a("strong"),SSr=o("xlm-roberta"),RSr=o(" \u2014 "),oZ=a("a"),PSr=o("TFXLMRobertaForMultipleChoice"),BSr=o(" (XLM-RoBERTa model)"),ISr=l(),U4=a("li"),GMe=a("strong"),NSr=o("xlnet"),qSr=o(" \u2014 "),rZ=a("a"),jSr=o("TFXLNetForMultipleChoice"),DSr=o(" (XLNet model)"),GSr=l(),F(J4.$$.fragment),eWe=l(),Sc=a("h2"),Y4=a("a"),OMe=a("span"),F(qx.$$.fragment),OSr=l(),VMe=a("span"),VSr=o("TFAutoModelForNextSentencePrediction"),oWe=l(),dr=a("div"),F(jx.$$.fragment),XSr=l(),Rc=a("p"),zSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),tZ=a("a"),WSr=o("from_pretrained()"),QSr=o(" class method or the "),aZ=a("a"),HSr=o("from_config()"),USr=o(` class
method.`),JSr=l(),Dx=a("p"),YSr=o("This class cannot be instantiated directly using "),XMe=a("code"),KSr=o("__init__()"),ZSr=o(" (throws an error)."),eRr=l(),Gt=a("div"),F(Gx.$$.fragment),oRr=l(),zMe=a("p"),rRr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),tRr=l(),Pc=a("p"),aRr=o(`Note:
Loading a model from its configuration file does `),WMe=a("strong"),nRr=o("not"),sRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nZ=a("a"),lRr=o("from_pretrained()"),iRr=o(" to load the model weights."),dRr=l(),F(K4.$$.fragment),cRr=l(),Nr=a("div"),F(Ox.$$.fragment),fRr=l(),QMe=a("p"),mRr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),gRr=l(),pn=a("p"),hRr=o("The model class to instantiate is selected based on the "),HMe=a("code"),pRr=o("model_type"),_Rr=o(` property of the config object (either
passed as an argument or loaded from `),UMe=a("code"),uRr=o("pretrained_model_name_or_path"),bRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JMe=a("code"),vRr=o("pretrained_model_name_or_path"),FRr=o(":"),TRr=l(),Vx=a("ul"),Z4=a("li"),YMe=a("strong"),MRr=o("bert"),ERr=o(" \u2014 "),sZ=a("a"),CRr=o("TFBertForNextSentencePrediction"),wRr=o(" (BERT model)"),ARr=l(),eE=a("li"),KMe=a("strong"),LRr=o("mobilebert"),yRr=o(" \u2014 "),lZ=a("a"),xRr=o("TFMobileBertForNextSentencePrediction"),$Rr=o(" (MobileBERT model)"),kRr=l(),F(oE.$$.fragment),rWe=l(),Bc=a("h2"),rE=a("a"),ZMe=a("span"),F(Xx.$$.fragment),SRr=l(),e4e=a("span"),RRr=o("TFAutoModelForTableQuestionAnswering"),tWe=l(),cr=a("div"),F(zx.$$.fragment),PRr=l(),Ic=a("p"),BRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),iZ=a("a"),IRr=o("from_pretrained()"),NRr=o(" class method or the "),dZ=a("a"),qRr=o("from_config()"),jRr=o(` class
method.`),DRr=l(),Wx=a("p"),GRr=o("This class cannot be instantiated directly using "),o4e=a("code"),ORr=o("__init__()"),VRr=o(" (throws an error)."),XRr=l(),Ot=a("div"),F(Qx.$$.fragment),zRr=l(),r4e=a("p"),WRr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),QRr=l(),Nc=a("p"),HRr=o(`Note:
Loading a model from its configuration file does `),t4e=a("strong"),URr=o("not"),JRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cZ=a("a"),YRr=o("from_pretrained()"),KRr=o(" to load the model weights."),ZRr=l(),F(tE.$$.fragment),ePr=l(),qr=a("div"),F(Hx.$$.fragment),oPr=l(),a4e=a("p"),rPr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),tPr=l(),_n=a("p"),aPr=o("The model class to instantiate is selected based on the "),n4e=a("code"),nPr=o("model_type"),sPr=o(` property of the config object (either
passed as an argument or loaded from `),s4e=a("code"),lPr=o("pretrained_model_name_or_path"),iPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l4e=a("code"),dPr=o("pretrained_model_name_or_path"),cPr=o(":"),fPr=l(),i4e=a("ul"),aE=a("li"),d4e=a("strong"),mPr=o("tapas"),gPr=o(" \u2014 "),fZ=a("a"),hPr=o("TFTapasForQuestionAnswering"),pPr=o(" (TAPAS model)"),_Pr=l(),F(nE.$$.fragment),aWe=l(),qc=a("h2"),sE=a("a"),c4e=a("span"),F(Ux.$$.fragment),uPr=l(),f4e=a("span"),bPr=o("TFAutoModelForTokenClassification"),nWe=l(),fr=a("div"),F(Jx.$$.fragment),vPr=l(),jc=a("p"),FPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),mZ=a("a"),TPr=o("from_pretrained()"),MPr=o(" class method or the "),gZ=a("a"),EPr=o("from_config()"),CPr=o(` class
method.`),wPr=l(),Yx=a("p"),APr=o("This class cannot be instantiated directly using "),m4e=a("code"),LPr=o("__init__()"),yPr=o(" (throws an error)."),xPr=l(),Vt=a("div"),F(Kx.$$.fragment),$Pr=l(),g4e=a("p"),kPr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),SPr=l(),Dc=a("p"),RPr=o(`Note:
Loading a model from its configuration file does `),h4e=a("strong"),PPr=o("not"),BPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hZ=a("a"),IPr=o("from_pretrained()"),NPr=o(" to load the model weights."),qPr=l(),F(lE.$$.fragment),jPr=l(),jr=a("div"),F(Zx.$$.fragment),DPr=l(),p4e=a("p"),GPr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),OPr=l(),un=a("p"),VPr=o("The model class to instantiate is selected based on the "),_4e=a("code"),XPr=o("model_type"),zPr=o(` property of the config object (either
passed as an argument or loaded from `),u4e=a("code"),WPr=o("pretrained_model_name_or_path"),QPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b4e=a("code"),HPr=o("pretrained_model_name_or_path"),UPr=o(":"),JPr=l(),de=a("ul"),iE=a("li"),v4e=a("strong"),YPr=o("albert"),KPr=o(" \u2014 "),pZ=a("a"),ZPr=o("TFAlbertForTokenClassification"),eBr=o(" (ALBERT model)"),oBr=l(),dE=a("li"),F4e=a("strong"),rBr=o("bert"),tBr=o(" \u2014 "),_Z=a("a"),aBr=o("TFBertForTokenClassification"),nBr=o(" (BERT model)"),sBr=l(),cE=a("li"),T4e=a("strong"),lBr=o("camembert"),iBr=o(" \u2014 "),uZ=a("a"),dBr=o("TFCamembertForTokenClassification"),cBr=o(" (CamemBERT model)"),fBr=l(),fE=a("li"),M4e=a("strong"),mBr=o("convbert"),gBr=o(" \u2014 "),bZ=a("a"),hBr=o("TFConvBertForTokenClassification"),pBr=o(" (ConvBERT model)"),_Br=l(),mE=a("li"),E4e=a("strong"),uBr=o("deberta"),bBr=o(" \u2014 "),vZ=a("a"),vBr=o("TFDebertaForTokenClassification"),FBr=o(" (DeBERTa model)"),TBr=l(),gE=a("li"),C4e=a("strong"),MBr=o("deberta-v2"),EBr=o(" \u2014 "),FZ=a("a"),CBr=o("TFDebertaV2ForTokenClassification"),wBr=o(" (DeBERTa-v2 model)"),ABr=l(),hE=a("li"),w4e=a("strong"),LBr=o("distilbert"),yBr=o(" \u2014 "),TZ=a("a"),xBr=o("TFDistilBertForTokenClassification"),$Br=o(" (DistilBERT model)"),kBr=l(),pE=a("li"),A4e=a("strong"),SBr=o("electra"),RBr=o(" \u2014 "),MZ=a("a"),PBr=o("TFElectraForTokenClassification"),BBr=o(" (ELECTRA model)"),IBr=l(),_E=a("li"),L4e=a("strong"),NBr=o("flaubert"),qBr=o(" \u2014 "),EZ=a("a"),jBr=o("TFFlaubertForTokenClassification"),DBr=o(" (FlauBERT model)"),GBr=l(),uE=a("li"),y4e=a("strong"),OBr=o("funnel"),VBr=o(" \u2014 "),CZ=a("a"),XBr=o("TFFunnelForTokenClassification"),zBr=o(" (Funnel Transformer model)"),WBr=l(),bE=a("li"),x4e=a("strong"),QBr=o("layoutlm"),HBr=o(" \u2014 "),wZ=a("a"),UBr=o("TFLayoutLMForTokenClassification"),JBr=o(" (LayoutLM model)"),YBr=l(),vE=a("li"),$4e=a("strong"),KBr=o("longformer"),ZBr=o(" \u2014 "),AZ=a("a"),eIr=o("TFLongformerForTokenClassification"),oIr=o(" (Longformer model)"),rIr=l(),FE=a("li"),k4e=a("strong"),tIr=o("mobilebert"),aIr=o(" \u2014 "),LZ=a("a"),nIr=o("TFMobileBertForTokenClassification"),sIr=o(" (MobileBERT model)"),lIr=l(),TE=a("li"),S4e=a("strong"),iIr=o("mpnet"),dIr=o(" \u2014 "),yZ=a("a"),cIr=o("TFMPNetForTokenClassification"),fIr=o(" (MPNet model)"),mIr=l(),ME=a("li"),R4e=a("strong"),gIr=o("rembert"),hIr=o(" \u2014 "),xZ=a("a"),pIr=o("TFRemBertForTokenClassification"),_Ir=o(" (RemBERT model)"),uIr=l(),EE=a("li"),P4e=a("strong"),bIr=o("roberta"),vIr=o(" \u2014 "),$Z=a("a"),FIr=o("TFRobertaForTokenClassification"),TIr=o(" (RoBERTa model)"),MIr=l(),CE=a("li"),B4e=a("strong"),EIr=o("roformer"),CIr=o(" \u2014 "),kZ=a("a"),wIr=o("TFRoFormerForTokenClassification"),AIr=o(" (RoFormer model)"),LIr=l(),wE=a("li"),I4e=a("strong"),yIr=o("xlm"),xIr=o(" \u2014 "),SZ=a("a"),$Ir=o("TFXLMForTokenClassification"),kIr=o(" (XLM model)"),SIr=l(),AE=a("li"),N4e=a("strong"),RIr=o("xlm-roberta"),PIr=o(" \u2014 "),RZ=a("a"),BIr=o("TFXLMRobertaForTokenClassification"),IIr=o(" (XLM-RoBERTa model)"),NIr=l(),LE=a("li"),q4e=a("strong"),qIr=o("xlnet"),jIr=o(" \u2014 "),PZ=a("a"),DIr=o("TFXLNetForTokenClassification"),GIr=o(" (XLNet model)"),OIr=l(),F(yE.$$.fragment),sWe=l(),Gc=a("h2"),xE=a("a"),j4e=a("span"),F(e$.$$.fragment),VIr=l(),D4e=a("span"),XIr=o("TFAutoModelForQuestionAnswering"),lWe=l(),mr=a("div"),F(o$.$$.fragment),zIr=l(),Oc=a("p"),WIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),BZ=a("a"),QIr=o("from_pretrained()"),HIr=o(" class method or the "),IZ=a("a"),UIr=o("from_config()"),JIr=o(` class
method.`),YIr=l(),r$=a("p"),KIr=o("This class cannot be instantiated directly using "),G4e=a("code"),ZIr=o("__init__()"),eNr=o(" (throws an error)."),oNr=l(),Xt=a("div"),F(t$.$$.fragment),rNr=l(),O4e=a("p"),tNr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),aNr=l(),Vc=a("p"),nNr=o(`Note:
Loading a model from its configuration file does `),V4e=a("strong"),sNr=o("not"),lNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NZ=a("a"),iNr=o("from_pretrained()"),dNr=o(" to load the model weights."),cNr=l(),F($E.$$.fragment),fNr=l(),Dr=a("div"),F(a$.$$.fragment),mNr=l(),X4e=a("p"),gNr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),hNr=l(),bn=a("p"),pNr=o("The model class to instantiate is selected based on the "),z4e=a("code"),_Nr=o("model_type"),uNr=o(` property of the config object (either
passed as an argument or loaded from `),W4e=a("code"),bNr=o("pretrained_model_name_or_path"),vNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q4e=a("code"),FNr=o("pretrained_model_name_or_path"),TNr=o(":"),MNr=l(),ce=a("ul"),kE=a("li"),H4e=a("strong"),ENr=o("albert"),CNr=o(" \u2014 "),qZ=a("a"),wNr=o("TFAlbertForQuestionAnswering"),ANr=o(" (ALBERT model)"),LNr=l(),SE=a("li"),U4e=a("strong"),yNr=o("bert"),xNr=o(" \u2014 "),jZ=a("a"),$Nr=o("TFBertForQuestionAnswering"),kNr=o(" (BERT model)"),SNr=l(),RE=a("li"),J4e=a("strong"),RNr=o("camembert"),PNr=o(" \u2014 "),DZ=a("a"),BNr=o("TFCamembertForQuestionAnswering"),INr=o(" (CamemBERT model)"),NNr=l(),PE=a("li"),Y4e=a("strong"),qNr=o("convbert"),jNr=o(" \u2014 "),GZ=a("a"),DNr=o("TFConvBertForQuestionAnswering"),GNr=o(" (ConvBERT model)"),ONr=l(),BE=a("li"),K4e=a("strong"),VNr=o("deberta"),XNr=o(" \u2014 "),OZ=a("a"),zNr=o("TFDebertaForQuestionAnswering"),WNr=o(" (DeBERTa model)"),QNr=l(),IE=a("li"),Z4e=a("strong"),HNr=o("deberta-v2"),UNr=o(" \u2014 "),VZ=a("a"),JNr=o("TFDebertaV2ForQuestionAnswering"),YNr=o(" (DeBERTa-v2 model)"),KNr=l(),NE=a("li"),eEe=a("strong"),ZNr=o("distilbert"),eqr=o(" \u2014 "),XZ=a("a"),oqr=o("TFDistilBertForQuestionAnswering"),rqr=o(" (DistilBERT model)"),tqr=l(),qE=a("li"),oEe=a("strong"),aqr=o("electra"),nqr=o(" \u2014 "),zZ=a("a"),sqr=o("TFElectraForQuestionAnswering"),lqr=o(" (ELECTRA model)"),iqr=l(),jE=a("li"),rEe=a("strong"),dqr=o("flaubert"),cqr=o(" \u2014 "),WZ=a("a"),fqr=o("TFFlaubertForQuestionAnsweringSimple"),mqr=o(" (FlauBERT model)"),gqr=l(),DE=a("li"),tEe=a("strong"),hqr=o("funnel"),pqr=o(" \u2014 "),QZ=a("a"),_qr=o("TFFunnelForQuestionAnswering"),uqr=o(" (Funnel Transformer model)"),bqr=l(),GE=a("li"),aEe=a("strong"),vqr=o("gptj"),Fqr=o(" \u2014 "),HZ=a("a"),Tqr=o("TFGPTJForQuestionAnswering"),Mqr=o(" (GPT-J model)"),Eqr=l(),OE=a("li"),nEe=a("strong"),Cqr=o("longformer"),wqr=o(" \u2014 "),UZ=a("a"),Aqr=o("TFLongformerForQuestionAnswering"),Lqr=o(" (Longformer model)"),yqr=l(),VE=a("li"),sEe=a("strong"),xqr=o("mobilebert"),$qr=o(" \u2014 "),JZ=a("a"),kqr=o("TFMobileBertForQuestionAnswering"),Sqr=o(" (MobileBERT model)"),Rqr=l(),XE=a("li"),lEe=a("strong"),Pqr=o("mpnet"),Bqr=o(" \u2014 "),YZ=a("a"),Iqr=o("TFMPNetForQuestionAnswering"),Nqr=o(" (MPNet model)"),qqr=l(),zE=a("li"),iEe=a("strong"),jqr=o("rembert"),Dqr=o(" \u2014 "),KZ=a("a"),Gqr=o("TFRemBertForQuestionAnswering"),Oqr=o(" (RemBERT model)"),Vqr=l(),WE=a("li"),dEe=a("strong"),Xqr=o("roberta"),zqr=o(" \u2014 "),ZZ=a("a"),Wqr=o("TFRobertaForQuestionAnswering"),Qqr=o(" (RoBERTa model)"),Hqr=l(),QE=a("li"),cEe=a("strong"),Uqr=o("roformer"),Jqr=o(" \u2014 "),eee=a("a"),Yqr=o("TFRoFormerForQuestionAnswering"),Kqr=o(" (RoFormer model)"),Zqr=l(),HE=a("li"),fEe=a("strong"),ejr=o("xlm"),ojr=o(" \u2014 "),oee=a("a"),rjr=o("TFXLMForQuestionAnsweringSimple"),tjr=o(" (XLM model)"),ajr=l(),UE=a("li"),mEe=a("strong"),njr=o("xlm-roberta"),sjr=o(" \u2014 "),ree=a("a"),ljr=o("TFXLMRobertaForQuestionAnswering"),ijr=o(" (XLM-RoBERTa model)"),djr=l(),JE=a("li"),gEe=a("strong"),cjr=o("xlnet"),fjr=o(" \u2014 "),tee=a("a"),mjr=o("TFXLNetForQuestionAnsweringSimple"),gjr=o(" (XLNet model)"),hjr=l(),F(YE.$$.fragment),iWe=l(),Xc=a("h2"),KE=a("a"),hEe=a("span"),F(n$.$$.fragment),pjr=l(),pEe=a("span"),_jr=o("TFAutoModelForVision2Seq"),dWe=l(),gr=a("div"),F(s$.$$.fragment),ujr=l(),zc=a("p"),bjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),aee=a("a"),vjr=o("from_pretrained()"),Fjr=o(" class method or the "),nee=a("a"),Tjr=o("from_config()"),Mjr=o(` class
method.`),Ejr=l(),l$=a("p"),Cjr=o("This class cannot be instantiated directly using "),_Ee=a("code"),wjr=o("__init__()"),Ajr=o(" (throws an error)."),Ljr=l(),zt=a("div"),F(i$.$$.fragment),yjr=l(),uEe=a("p"),xjr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$jr=l(),Wc=a("p"),kjr=o(`Note:
Loading a model from its configuration file does `),bEe=a("strong"),Sjr=o("not"),Rjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),see=a("a"),Pjr=o("from_pretrained()"),Bjr=o(" to load the model weights."),Ijr=l(),F(ZE.$$.fragment),Njr=l(),Gr=a("div"),F(d$.$$.fragment),qjr=l(),vEe=a("p"),jjr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Djr=l(),vn=a("p"),Gjr=o("The model class to instantiate is selected based on the "),FEe=a("code"),Ojr=o("model_type"),Vjr=o(` property of the config object (either
passed as an argument or loaded from `),TEe=a("code"),Xjr=o("pretrained_model_name_or_path"),zjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MEe=a("code"),Wjr=o("pretrained_model_name_or_path"),Qjr=o(":"),Hjr=l(),EEe=a("ul"),eC=a("li"),CEe=a("strong"),Ujr=o("vision-encoder-decoder"),Jjr=o(" \u2014 "),lee=a("a"),Yjr=o("TFVisionEncoderDecoderModel"),Kjr=o(" (Vision Encoder decoder model)"),Zjr=l(),F(oC.$$.fragment),cWe=l(),Qc=a("h2"),rC=a("a"),wEe=a("span"),F(c$.$$.fragment),eDr=l(),AEe=a("span"),oDr=o("TFAutoModelForSpeechSeq2Seq"),fWe=l(),hr=a("div"),F(f$.$$.fragment),rDr=l(),Hc=a("p"),tDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),iee=a("a"),aDr=o("from_pretrained()"),nDr=o(" class method or the "),dee=a("a"),sDr=o("from_config()"),lDr=o(` class
method.`),iDr=l(),m$=a("p"),dDr=o("This class cannot be instantiated directly using "),LEe=a("code"),cDr=o("__init__()"),fDr=o(" (throws an error)."),mDr=l(),Wt=a("div"),F(g$.$$.fragment),gDr=l(),yEe=a("p"),hDr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),pDr=l(),Uc=a("p"),_Dr=o(`Note:
Loading a model from its configuration file does `),xEe=a("strong"),uDr=o("not"),bDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cee=a("a"),vDr=o("from_pretrained()"),FDr=o(" to load the model weights."),TDr=l(),F(tC.$$.fragment),MDr=l(),Or=a("div"),F(h$.$$.fragment),EDr=l(),$Ee=a("p"),CDr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),wDr=l(),Fn=a("p"),ADr=o("The model class to instantiate is selected based on the "),kEe=a("code"),LDr=o("model_type"),yDr=o(` property of the config object (either
passed as an argument or loaded from `),SEe=a("code"),xDr=o("pretrained_model_name_or_path"),$Dr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),REe=a("code"),kDr=o("pretrained_model_name_or_path"),SDr=o(":"),RDr=l(),PEe=a("ul"),aC=a("li"),BEe=a("strong"),PDr=o("speech_to_text"),BDr=o(" \u2014 "),fee=a("a"),IDr=o("TFSpeech2TextForConditionalGeneration"),NDr=o(" (Speech2Text model)"),qDr=l(),F(nC.$$.fragment),mWe=l(),Jc=a("h2"),sC=a("a"),IEe=a("span"),F(p$.$$.fragment),jDr=l(),NEe=a("span"),DDr=o("FlaxAutoModel"),gWe=l(),pr=a("div"),F(_$.$$.fragment),GDr=l(),Yc=a("p"),ODr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mee=a("a"),VDr=o("from_pretrained()"),XDr=o(" class method or the "),gee=a("a"),zDr=o("from_config()"),WDr=o(` class
method.`),QDr=l(),u$=a("p"),HDr=o("This class cannot be instantiated directly using "),qEe=a("code"),UDr=o("__init__()"),JDr=o(" (throws an error)."),YDr=l(),Qt=a("div"),F(b$.$$.fragment),KDr=l(),jEe=a("p"),ZDr=o("Instantiates one of the base model classes of the library from a configuration."),eGr=l(),Kc=a("p"),oGr=o(`Note:
Loading a model from its configuration file does `),DEe=a("strong"),rGr=o("not"),tGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hee=a("a"),aGr=o("from_pretrained()"),nGr=o(" to load the model weights."),sGr=l(),F(lC.$$.fragment),lGr=l(),Vr=a("div"),F(v$.$$.fragment),iGr=l(),GEe=a("p"),dGr=o("Instantiate one of the base model classes of the library from a pretrained model."),cGr=l(),Tn=a("p"),fGr=o("The model class to instantiate is selected based on the "),OEe=a("code"),mGr=o("model_type"),gGr=o(` property of the config object (either
passed as an argument or loaded from `),VEe=a("code"),hGr=o("pretrained_model_name_or_path"),pGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XEe=a("code"),_Gr=o("pretrained_model_name_or_path"),uGr=o(":"),bGr=l(),oe=a("ul"),iC=a("li"),zEe=a("strong"),vGr=o("albert"),FGr=o(" \u2014 "),pee=a("a"),TGr=o("FlaxAlbertModel"),MGr=o(" (ALBERT model)"),EGr=l(),dC=a("li"),WEe=a("strong"),CGr=o("bart"),wGr=o(" \u2014 "),_ee=a("a"),AGr=o("FlaxBartModel"),LGr=o(" (BART model)"),yGr=l(),cC=a("li"),QEe=a("strong"),xGr=o("beit"),$Gr=o(" \u2014 "),uee=a("a"),kGr=o("FlaxBeitModel"),SGr=o(" (BEiT model)"),RGr=l(),fC=a("li"),HEe=a("strong"),PGr=o("bert"),BGr=o(" \u2014 "),bee=a("a"),IGr=o("FlaxBertModel"),NGr=o(" (BERT model)"),qGr=l(),mC=a("li"),UEe=a("strong"),jGr=o("big_bird"),DGr=o(" \u2014 "),vee=a("a"),GGr=o("FlaxBigBirdModel"),OGr=o(" (BigBird model)"),VGr=l(),gC=a("li"),JEe=a("strong"),XGr=o("blenderbot"),zGr=o(" \u2014 "),Fee=a("a"),WGr=o("FlaxBlenderbotModel"),QGr=o(" (Blenderbot model)"),HGr=l(),hC=a("li"),YEe=a("strong"),UGr=o("blenderbot-small"),JGr=o(" \u2014 "),Tee=a("a"),YGr=o("FlaxBlenderbotSmallModel"),KGr=o(" (BlenderbotSmall model)"),ZGr=l(),pC=a("li"),KEe=a("strong"),eOr=o("clip"),oOr=o(" \u2014 "),Mee=a("a"),rOr=o("FlaxCLIPModel"),tOr=o(" (CLIP model)"),aOr=l(),_C=a("li"),ZEe=a("strong"),nOr=o("distilbert"),sOr=o(" \u2014 "),Eee=a("a"),lOr=o("FlaxDistilBertModel"),iOr=o(" (DistilBERT model)"),dOr=l(),uC=a("li"),eCe=a("strong"),cOr=o("electra"),fOr=o(" \u2014 "),Cee=a("a"),mOr=o("FlaxElectraModel"),gOr=o(" (ELECTRA model)"),hOr=l(),bC=a("li"),oCe=a("strong"),pOr=o("gpt2"),_Or=o(" \u2014 "),wee=a("a"),uOr=o("FlaxGPT2Model"),bOr=o(" (OpenAI GPT-2 model)"),vOr=l(),vC=a("li"),rCe=a("strong"),FOr=o("gpt_neo"),TOr=o(" \u2014 "),Aee=a("a"),MOr=o("FlaxGPTNeoModel"),EOr=o(" (GPT Neo model)"),COr=l(),FC=a("li"),tCe=a("strong"),wOr=o("gptj"),AOr=o(" \u2014 "),Lee=a("a"),LOr=o("FlaxGPTJModel"),yOr=o(" (GPT-J model)"),xOr=l(),TC=a("li"),aCe=a("strong"),$Or=o("longt5"),kOr=o(" \u2014 "),yee=a("a"),SOr=o("FlaxLongT5Model"),ROr=o(" (LongT5 model)"),POr=l(),MC=a("li"),nCe=a("strong"),BOr=o("marian"),IOr=o(" \u2014 "),xee=a("a"),NOr=o("FlaxMarianModel"),qOr=o(" (Marian model)"),jOr=l(),EC=a("li"),sCe=a("strong"),DOr=o("mbart"),GOr=o(" \u2014 "),$ee=a("a"),OOr=o("FlaxMBartModel"),VOr=o(" (mBART model)"),XOr=l(),CC=a("li"),lCe=a("strong"),zOr=o("mt5"),WOr=o(" \u2014 "),kee=a("a"),QOr=o("FlaxMT5Model"),HOr=o(" (MT5 model)"),UOr=l(),wC=a("li"),iCe=a("strong"),JOr=o("opt"),YOr=o(" \u2014 "),See=a("a"),KOr=o("FlaxOPTModel"),ZOr=o(" (OPT model)"),eVr=l(),AC=a("li"),dCe=a("strong"),oVr=o("pegasus"),rVr=o(" \u2014 "),Ree=a("a"),tVr=o("FlaxPegasusModel"),aVr=o(" (Pegasus model)"),nVr=l(),LC=a("li"),cCe=a("strong"),sVr=o("roberta"),lVr=o(" \u2014 "),Pee=a("a"),iVr=o("FlaxRobertaModel"),dVr=o(" (RoBERTa model)"),cVr=l(),yC=a("li"),fCe=a("strong"),fVr=o("roformer"),mVr=o(" \u2014 "),Bee=a("a"),gVr=o("FlaxRoFormerModel"),hVr=o(" (RoFormer model)"),pVr=l(),xC=a("li"),mCe=a("strong"),_Vr=o("t5"),uVr=o(" \u2014 "),Iee=a("a"),bVr=o("FlaxT5Model"),vVr=o(" (T5 model)"),FVr=l(),$C=a("li"),gCe=a("strong"),TVr=o("vision-text-dual-encoder"),MVr=o(" \u2014 "),Nee=a("a"),EVr=o("FlaxVisionTextDualEncoderModel"),CVr=o(" (VisionTextDualEncoder model)"),wVr=l(),kC=a("li"),hCe=a("strong"),AVr=o("vit"),LVr=o(" \u2014 "),qee=a("a"),yVr=o("FlaxViTModel"),xVr=o(" (ViT model)"),$Vr=l(),SC=a("li"),pCe=a("strong"),kVr=o("wav2vec2"),SVr=o(" \u2014 "),jee=a("a"),RVr=o("FlaxWav2Vec2Model"),PVr=o(" (Wav2Vec2 model)"),BVr=l(),RC=a("li"),_Ce=a("strong"),IVr=o("xglm"),NVr=o(" \u2014 "),Dee=a("a"),qVr=o("FlaxXGLMModel"),jVr=o(" (XGLM model)"),DVr=l(),PC=a("li"),uCe=a("strong"),GVr=o("xlm-roberta"),OVr=o(" \u2014 "),Gee=a("a"),VVr=o("FlaxXLMRobertaModel"),XVr=o(" (XLM-RoBERTa model)"),zVr=l(),F(BC.$$.fragment),hWe=l(),Zc=a("h2"),IC=a("a"),bCe=a("span"),F(F$.$$.fragment),WVr=l(),vCe=a("span"),QVr=o("FlaxAutoModelForCausalLM"),pWe=l(),_r=a("div"),F(T$.$$.fragment),HVr=l(),ef=a("p"),UVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Oee=a("a"),JVr=o("from_pretrained()"),YVr=o(" class method or the "),Vee=a("a"),KVr=o("from_config()"),ZVr=o(` class
method.`),eXr=l(),M$=a("p"),oXr=o("This class cannot be instantiated directly using "),FCe=a("code"),rXr=o("__init__()"),tXr=o(" (throws an error)."),aXr=l(),Ht=a("div"),F(E$.$$.fragment),nXr=l(),TCe=a("p"),sXr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),lXr=l(),of=a("p"),iXr=o(`Note:
Loading a model from its configuration file does `),MCe=a("strong"),dXr=o("not"),cXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xee=a("a"),fXr=o("from_pretrained()"),mXr=o(" to load the model weights."),gXr=l(),F(NC.$$.fragment),hXr=l(),Xr=a("div"),F(C$.$$.fragment),pXr=l(),ECe=a("p"),_Xr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),uXr=l(),Mn=a("p"),bXr=o("The model class to instantiate is selected based on the "),CCe=a("code"),vXr=o("model_type"),FXr=o(` property of the config object (either
passed as an argument or loaded from `),wCe=a("code"),TXr=o("pretrained_model_name_or_path"),MXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ACe=a("code"),EXr=o("pretrained_model_name_or_path"),CXr=o(":"),wXr=l(),xe=a("ul"),qC=a("li"),LCe=a("strong"),AXr=o("bart"),LXr=o(" \u2014 "),zee=a("a"),yXr=o("FlaxBartForCausalLM"),xXr=o(" (BART model)"),$Xr=l(),jC=a("li"),yCe=a("strong"),kXr=o("bert"),SXr=o(" \u2014 "),Wee=a("a"),RXr=o("FlaxBertForCausalLM"),PXr=o(" (BERT model)"),BXr=l(),DC=a("li"),xCe=a("strong"),IXr=o("big_bird"),NXr=o(" \u2014 "),Qee=a("a"),qXr=o("FlaxBigBirdForCausalLM"),jXr=o(" (BigBird model)"),DXr=l(),GC=a("li"),$Ce=a("strong"),GXr=o("electra"),OXr=o(" \u2014 "),Hee=a("a"),VXr=o("FlaxElectraForCausalLM"),XXr=o(" (ELECTRA model)"),zXr=l(),OC=a("li"),kCe=a("strong"),WXr=o("gpt2"),QXr=o(" \u2014 "),Uee=a("a"),HXr=o("FlaxGPT2LMHeadModel"),UXr=o(" (OpenAI GPT-2 model)"),JXr=l(),VC=a("li"),SCe=a("strong"),YXr=o("gpt_neo"),KXr=o(" \u2014 "),Jee=a("a"),ZXr=o("FlaxGPTNeoForCausalLM"),ezr=o(" (GPT Neo model)"),ozr=l(),XC=a("li"),RCe=a("strong"),rzr=o("gptj"),tzr=o(" \u2014 "),Yee=a("a"),azr=o("FlaxGPTJForCausalLM"),nzr=o(" (GPT-J model)"),szr=l(),zC=a("li"),PCe=a("strong"),lzr=o("opt"),izr=o(" \u2014 "),Kee=a("a"),dzr=o("FlaxOPTForCausalLM"),czr=o(" (OPT model)"),fzr=l(),WC=a("li"),BCe=a("strong"),mzr=o("roberta"),gzr=o(" \u2014 "),Zee=a("a"),hzr=o("FlaxRobertaForCausalLM"),pzr=o(" (RoBERTa model)"),_zr=l(),QC=a("li"),ICe=a("strong"),uzr=o("xglm"),bzr=o(" \u2014 "),eoe=a("a"),vzr=o("FlaxXGLMForCausalLM"),Fzr=o(" (XGLM model)"),Tzr=l(),F(HC.$$.fragment),_We=l(),rf=a("h2"),UC=a("a"),NCe=a("span"),F(w$.$$.fragment),Mzr=l(),qCe=a("span"),Ezr=o("FlaxAutoModelForPreTraining"),uWe=l(),ur=a("div"),F(A$.$$.fragment),Czr=l(),tf=a("p"),wzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ooe=a("a"),Azr=o("from_pretrained()"),Lzr=o(" class method or the "),roe=a("a"),yzr=o("from_config()"),xzr=o(` class
method.`),$zr=l(),L$=a("p"),kzr=o("This class cannot be instantiated directly using "),jCe=a("code"),Szr=o("__init__()"),Rzr=o(" (throws an error)."),Pzr=l(),Ut=a("div"),F(y$.$$.fragment),Bzr=l(),DCe=a("p"),Izr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Nzr=l(),af=a("p"),qzr=o(`Note:
Loading a model from its configuration file does `),GCe=a("strong"),jzr=o("not"),Dzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),toe=a("a"),Gzr=o("from_pretrained()"),Ozr=o(" to load the model weights."),Vzr=l(),F(JC.$$.fragment),Xzr=l(),zr=a("div"),F(x$.$$.fragment),zzr=l(),OCe=a("p"),Wzr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Qzr=l(),En=a("p"),Hzr=o("The model class to instantiate is selected based on the "),VCe=a("code"),Uzr=o("model_type"),Jzr=o(` property of the config object (either
passed as an argument or loaded from `),XCe=a("code"),Yzr=o("pretrained_model_name_or_path"),Kzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zCe=a("code"),Zzr=o("pretrained_model_name_or_path"),eWr=o(":"),oWr=l(),Ee=a("ul"),YC=a("li"),WCe=a("strong"),rWr=o("albert"),tWr=o(" \u2014 "),aoe=a("a"),aWr=o("FlaxAlbertForPreTraining"),nWr=o(" (ALBERT model)"),sWr=l(),KC=a("li"),QCe=a("strong"),lWr=o("bart"),iWr=o(" \u2014 "),noe=a("a"),dWr=o("FlaxBartForConditionalGeneration"),cWr=o(" (BART model)"),fWr=l(),ZC=a("li"),HCe=a("strong"),mWr=o("bert"),gWr=o(" \u2014 "),soe=a("a"),hWr=o("FlaxBertForPreTraining"),pWr=o(" (BERT model)"),_Wr=l(),e5=a("li"),UCe=a("strong"),uWr=o("big_bird"),bWr=o(" \u2014 "),loe=a("a"),vWr=o("FlaxBigBirdForPreTraining"),FWr=o(" (BigBird model)"),TWr=l(),o5=a("li"),JCe=a("strong"),MWr=o("electra"),EWr=o(" \u2014 "),ioe=a("a"),CWr=o("FlaxElectraForPreTraining"),wWr=o(" (ELECTRA model)"),AWr=l(),r5=a("li"),YCe=a("strong"),LWr=o("longt5"),yWr=o(" \u2014 "),doe=a("a"),xWr=o("FlaxLongT5ForConditionalGeneration"),$Wr=o(" (LongT5 model)"),kWr=l(),t5=a("li"),KCe=a("strong"),SWr=o("mbart"),RWr=o(" \u2014 "),coe=a("a"),PWr=o("FlaxMBartForConditionalGeneration"),BWr=o(" (mBART model)"),IWr=l(),a5=a("li"),ZCe=a("strong"),NWr=o("mt5"),qWr=o(" \u2014 "),foe=a("a"),jWr=o("FlaxMT5ForConditionalGeneration"),DWr=o(" (MT5 model)"),GWr=l(),n5=a("li"),e5e=a("strong"),OWr=o("roberta"),VWr=o(" \u2014 "),moe=a("a"),XWr=o("FlaxRobertaForMaskedLM"),zWr=o(" (RoBERTa model)"),WWr=l(),s5=a("li"),o5e=a("strong"),QWr=o("roformer"),HWr=o(" \u2014 "),goe=a("a"),UWr=o("FlaxRoFormerForMaskedLM"),JWr=o(" (RoFormer model)"),YWr=l(),l5=a("li"),r5e=a("strong"),KWr=o("t5"),ZWr=o(" \u2014 "),hoe=a("a"),eQr=o("FlaxT5ForConditionalGeneration"),oQr=o(" (T5 model)"),rQr=l(),i5=a("li"),t5e=a("strong"),tQr=o("wav2vec2"),aQr=o(" \u2014 "),poe=a("a"),nQr=o("FlaxWav2Vec2ForPreTraining"),sQr=o(" (Wav2Vec2 model)"),lQr=l(),d5=a("li"),a5e=a("strong"),iQr=o("xlm-roberta"),dQr=o(" \u2014 "),_oe=a("a"),cQr=o("FlaxXLMRobertaForMaskedLM"),fQr=o(" (XLM-RoBERTa model)"),mQr=l(),F(c5.$$.fragment),bWe=l(),nf=a("h2"),f5=a("a"),n5e=a("span"),F($$.$$.fragment),gQr=l(),s5e=a("span"),hQr=o("FlaxAutoModelForMaskedLM"),vWe=l(),br=a("div"),F(k$.$$.fragment),pQr=l(),sf=a("p"),_Qr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uoe=a("a"),uQr=o("from_pretrained()"),bQr=o(" class method or the "),boe=a("a"),vQr=o("from_config()"),FQr=o(` class
method.`),TQr=l(),S$=a("p"),MQr=o("This class cannot be instantiated directly using "),l5e=a("code"),EQr=o("__init__()"),CQr=o(" (throws an error)."),wQr=l(),Jt=a("div"),F(R$.$$.fragment),AQr=l(),i5e=a("p"),LQr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),yQr=l(),lf=a("p"),xQr=o(`Note:
Loading a model from its configuration file does `),d5e=a("strong"),$Qr=o("not"),kQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),voe=a("a"),SQr=o("from_pretrained()"),RQr=o(" to load the model weights."),PQr=l(),F(m5.$$.fragment),BQr=l(),Wr=a("div"),F(P$.$$.fragment),IQr=l(),c5e=a("p"),NQr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),qQr=l(),Cn=a("p"),jQr=o("The model class to instantiate is selected based on the "),f5e=a("code"),DQr=o("model_type"),GQr=o(` property of the config object (either
passed as an argument or loaded from `),m5e=a("code"),OQr=o("pretrained_model_name_or_path"),VQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g5e=a("code"),XQr=o("pretrained_model_name_or_path"),zQr=o(":"),WQr=l(),$e=a("ul"),g5=a("li"),h5e=a("strong"),QQr=o("albert"),HQr=o(" \u2014 "),Foe=a("a"),UQr=o("FlaxAlbertForMaskedLM"),JQr=o(" (ALBERT model)"),YQr=l(),h5=a("li"),p5e=a("strong"),KQr=o("bart"),ZQr=o(" \u2014 "),Toe=a("a"),eHr=o("FlaxBartForConditionalGeneration"),oHr=o(" (BART model)"),rHr=l(),p5=a("li"),_5e=a("strong"),tHr=o("bert"),aHr=o(" \u2014 "),Moe=a("a"),nHr=o("FlaxBertForMaskedLM"),sHr=o(" (BERT model)"),lHr=l(),_5=a("li"),u5e=a("strong"),iHr=o("big_bird"),dHr=o(" \u2014 "),Eoe=a("a"),cHr=o("FlaxBigBirdForMaskedLM"),fHr=o(" (BigBird model)"),mHr=l(),u5=a("li"),b5e=a("strong"),gHr=o("distilbert"),hHr=o(" \u2014 "),Coe=a("a"),pHr=o("FlaxDistilBertForMaskedLM"),_Hr=o(" (DistilBERT model)"),uHr=l(),b5=a("li"),v5e=a("strong"),bHr=o("electra"),vHr=o(" \u2014 "),woe=a("a"),FHr=o("FlaxElectraForMaskedLM"),THr=o(" (ELECTRA model)"),MHr=l(),v5=a("li"),F5e=a("strong"),EHr=o("mbart"),CHr=o(" \u2014 "),Aoe=a("a"),wHr=o("FlaxMBartForConditionalGeneration"),AHr=o(" (mBART model)"),LHr=l(),F5=a("li"),T5e=a("strong"),yHr=o("roberta"),xHr=o(" \u2014 "),Loe=a("a"),$Hr=o("FlaxRobertaForMaskedLM"),kHr=o(" (RoBERTa model)"),SHr=l(),T5=a("li"),M5e=a("strong"),RHr=o("roformer"),PHr=o(" \u2014 "),yoe=a("a"),BHr=o("FlaxRoFormerForMaskedLM"),IHr=o(" (RoFormer model)"),NHr=l(),M5=a("li"),E5e=a("strong"),qHr=o("xlm-roberta"),jHr=o(" \u2014 "),xoe=a("a"),DHr=o("FlaxXLMRobertaForMaskedLM"),GHr=o(" (XLM-RoBERTa model)"),OHr=l(),F(E5.$$.fragment),FWe=l(),df=a("h2"),C5=a("a"),C5e=a("span"),F(B$.$$.fragment),VHr=l(),w5e=a("span"),XHr=o("FlaxAutoModelForSeq2SeqLM"),TWe=l(),vr=a("div"),F(I$.$$.fragment),zHr=l(),cf=a("p"),WHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$oe=a("a"),QHr=o("from_pretrained()"),HHr=o(" class method or the "),koe=a("a"),UHr=o("from_config()"),JHr=o(` class
method.`),YHr=l(),N$=a("p"),KHr=o("This class cannot be instantiated directly using "),A5e=a("code"),ZHr=o("__init__()"),eUr=o(" (throws an error)."),oUr=l(),Yt=a("div"),F(q$.$$.fragment),rUr=l(),L5e=a("p"),tUr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),aUr=l(),ff=a("p"),nUr=o(`Note:
Loading a model from its configuration file does `),y5e=a("strong"),sUr=o("not"),lUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Soe=a("a"),iUr=o("from_pretrained()"),dUr=o(" to load the model weights."),cUr=l(),F(w5.$$.fragment),fUr=l(),Qr=a("div"),F(j$.$$.fragment),mUr=l(),x5e=a("p"),gUr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),hUr=l(),wn=a("p"),pUr=o("The model class to instantiate is selected based on the "),$5e=a("code"),_Ur=o("model_type"),uUr=o(` property of the config object (either
passed as an argument or loaded from `),k5e=a("code"),bUr=o("pretrained_model_name_or_path"),vUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S5e=a("code"),FUr=o("pretrained_model_name_or_path"),TUr=o(":"),MUr=l(),ke=a("ul"),A5=a("li"),R5e=a("strong"),EUr=o("bart"),CUr=o(" \u2014 "),Roe=a("a"),wUr=o("FlaxBartForConditionalGeneration"),AUr=o(" (BART model)"),LUr=l(),L5=a("li"),P5e=a("strong"),yUr=o("blenderbot"),xUr=o(" \u2014 "),Poe=a("a"),$Ur=o("FlaxBlenderbotForConditionalGeneration"),kUr=o(" (Blenderbot model)"),SUr=l(),y5=a("li"),B5e=a("strong"),RUr=o("blenderbot-small"),PUr=o(" \u2014 "),Boe=a("a"),BUr=o("FlaxBlenderbotSmallForConditionalGeneration"),IUr=o(" (BlenderbotSmall model)"),NUr=l(),x5=a("li"),I5e=a("strong"),qUr=o("encoder-decoder"),jUr=o(" \u2014 "),Ioe=a("a"),DUr=o("FlaxEncoderDecoderModel"),GUr=o(" (Encoder decoder model)"),OUr=l(),$5=a("li"),N5e=a("strong"),VUr=o("longt5"),XUr=o(" \u2014 "),Noe=a("a"),zUr=o("FlaxLongT5ForConditionalGeneration"),WUr=o(" (LongT5 model)"),QUr=l(),k5=a("li"),q5e=a("strong"),HUr=o("marian"),UUr=o(" \u2014 "),qoe=a("a"),JUr=o("FlaxMarianMTModel"),YUr=o(" (Marian model)"),KUr=l(),S5=a("li"),j5e=a("strong"),ZUr=o("mbart"),eJr=o(" \u2014 "),joe=a("a"),oJr=o("FlaxMBartForConditionalGeneration"),rJr=o(" (mBART model)"),tJr=l(),R5=a("li"),D5e=a("strong"),aJr=o("mt5"),nJr=o(" \u2014 "),Doe=a("a"),sJr=o("FlaxMT5ForConditionalGeneration"),lJr=o(" (MT5 model)"),iJr=l(),P5=a("li"),G5e=a("strong"),dJr=o("pegasus"),cJr=o(" \u2014 "),Goe=a("a"),fJr=o("FlaxPegasusForConditionalGeneration"),mJr=o(" (Pegasus model)"),gJr=l(),B5=a("li"),O5e=a("strong"),hJr=o("t5"),pJr=o(" \u2014 "),Ooe=a("a"),_Jr=o("FlaxT5ForConditionalGeneration"),uJr=o(" (T5 model)"),bJr=l(),F(I5.$$.fragment),MWe=l(),mf=a("h2"),N5=a("a"),V5e=a("span"),F(D$.$$.fragment),vJr=l(),X5e=a("span"),FJr=o("FlaxAutoModelForSequenceClassification"),EWe=l(),Fr=a("div"),F(G$.$$.fragment),TJr=l(),gf=a("p"),MJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Voe=a("a"),EJr=o("from_pretrained()"),CJr=o(" class method or the "),Xoe=a("a"),wJr=o("from_config()"),AJr=o(` class
method.`),LJr=l(),O$=a("p"),yJr=o("This class cannot be instantiated directly using "),z5e=a("code"),xJr=o("__init__()"),$Jr=o(" (throws an error)."),kJr=l(),Kt=a("div"),F(V$.$$.fragment),SJr=l(),W5e=a("p"),RJr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),PJr=l(),hf=a("p"),BJr=o(`Note:
Loading a model from its configuration file does `),Q5e=a("strong"),IJr=o("not"),NJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zoe=a("a"),qJr=o("from_pretrained()"),jJr=o(" to load the model weights."),DJr=l(),F(q5.$$.fragment),GJr=l(),Hr=a("div"),F(X$.$$.fragment),OJr=l(),H5e=a("p"),VJr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),XJr=l(),An=a("p"),zJr=o("The model class to instantiate is selected based on the "),U5e=a("code"),WJr=o("model_type"),QJr=o(` property of the config object (either
passed as an argument or loaded from `),J5e=a("code"),HJr=o("pretrained_model_name_or_path"),UJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y5e=a("code"),JJr=o("pretrained_model_name_or_path"),YJr=o(":"),KJr=l(),Se=a("ul"),j5=a("li"),K5e=a("strong"),ZJr=o("albert"),eYr=o(" \u2014 "),Woe=a("a"),oYr=o("FlaxAlbertForSequenceClassification"),rYr=o(" (ALBERT model)"),tYr=l(),D5=a("li"),Z5e=a("strong"),aYr=o("bart"),nYr=o(" \u2014 "),Qoe=a("a"),sYr=o("FlaxBartForSequenceClassification"),lYr=o(" (BART model)"),iYr=l(),G5=a("li"),e0e=a("strong"),dYr=o("bert"),cYr=o(" \u2014 "),Hoe=a("a"),fYr=o("FlaxBertForSequenceClassification"),mYr=o(" (BERT model)"),gYr=l(),O5=a("li"),o0e=a("strong"),hYr=o("big_bird"),pYr=o(" \u2014 "),Uoe=a("a"),_Yr=o("FlaxBigBirdForSequenceClassification"),uYr=o(" (BigBird model)"),bYr=l(),V5=a("li"),r0e=a("strong"),vYr=o("distilbert"),FYr=o(" \u2014 "),Joe=a("a"),TYr=o("FlaxDistilBertForSequenceClassification"),MYr=o(" (DistilBERT model)"),EYr=l(),X5=a("li"),t0e=a("strong"),CYr=o("electra"),wYr=o(" \u2014 "),Yoe=a("a"),AYr=o("FlaxElectraForSequenceClassification"),LYr=o(" (ELECTRA model)"),yYr=l(),z5=a("li"),a0e=a("strong"),xYr=o("mbart"),$Yr=o(" \u2014 "),Koe=a("a"),kYr=o("FlaxMBartForSequenceClassification"),SYr=o(" (mBART model)"),RYr=l(),W5=a("li"),n0e=a("strong"),PYr=o("roberta"),BYr=o(" \u2014 "),Zoe=a("a"),IYr=o("FlaxRobertaForSequenceClassification"),NYr=o(" (RoBERTa model)"),qYr=l(),Q5=a("li"),s0e=a("strong"),jYr=o("roformer"),DYr=o(" \u2014 "),ere=a("a"),GYr=o("FlaxRoFormerForSequenceClassification"),OYr=o(" (RoFormer model)"),VYr=l(),H5=a("li"),l0e=a("strong"),XYr=o("xlm-roberta"),zYr=o(" \u2014 "),ore=a("a"),WYr=o("FlaxXLMRobertaForSequenceClassification"),QYr=o(" (XLM-RoBERTa model)"),HYr=l(),F(U5.$$.fragment),CWe=l(),pf=a("h2"),J5=a("a"),i0e=a("span"),F(z$.$$.fragment),UYr=l(),d0e=a("span"),JYr=o("FlaxAutoModelForQuestionAnswering"),wWe=l(),Tr=a("div"),F(W$.$$.fragment),YYr=l(),_f=a("p"),KYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),rre=a("a"),ZYr=o("from_pretrained()"),eKr=o(" class method or the "),tre=a("a"),oKr=o("from_config()"),rKr=o(` class
method.`),tKr=l(),Q$=a("p"),aKr=o("This class cannot be instantiated directly using "),c0e=a("code"),nKr=o("__init__()"),sKr=o(" (throws an error)."),lKr=l(),Zt=a("div"),F(H$.$$.fragment),iKr=l(),f0e=a("p"),dKr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),cKr=l(),uf=a("p"),fKr=o(`Note:
Loading a model from its configuration file does `),m0e=a("strong"),mKr=o("not"),gKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),are=a("a"),hKr=o("from_pretrained()"),pKr=o(" to load the model weights."),_Kr=l(),F(Y5.$$.fragment),uKr=l(),Ur=a("div"),F(U$.$$.fragment),bKr=l(),g0e=a("p"),vKr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),FKr=l(),Ln=a("p"),TKr=o("The model class to instantiate is selected based on the "),h0e=a("code"),MKr=o("model_type"),EKr=o(` property of the config object (either
passed as an argument or loaded from `),p0e=a("code"),CKr=o("pretrained_model_name_or_path"),wKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_0e=a("code"),AKr=o("pretrained_model_name_or_path"),LKr=o(":"),yKr=l(),Re=a("ul"),K5=a("li"),u0e=a("strong"),xKr=o("albert"),$Kr=o(" \u2014 "),nre=a("a"),kKr=o("FlaxAlbertForQuestionAnswering"),SKr=o(" (ALBERT model)"),RKr=l(),Z5=a("li"),b0e=a("strong"),PKr=o("bart"),BKr=o(" \u2014 "),sre=a("a"),IKr=o("FlaxBartForQuestionAnswering"),NKr=o(" (BART model)"),qKr=l(),e0=a("li"),v0e=a("strong"),jKr=o("bert"),DKr=o(" \u2014 "),lre=a("a"),GKr=o("FlaxBertForQuestionAnswering"),OKr=o(" (BERT model)"),VKr=l(),o0=a("li"),F0e=a("strong"),XKr=o("big_bird"),zKr=o(" \u2014 "),ire=a("a"),WKr=o("FlaxBigBirdForQuestionAnswering"),QKr=o(" (BigBird model)"),HKr=l(),r0=a("li"),T0e=a("strong"),UKr=o("distilbert"),JKr=o(" \u2014 "),dre=a("a"),YKr=o("FlaxDistilBertForQuestionAnswering"),KKr=o(" (DistilBERT model)"),ZKr=l(),t0=a("li"),M0e=a("strong"),eZr=o("electra"),oZr=o(" \u2014 "),cre=a("a"),rZr=o("FlaxElectraForQuestionAnswering"),tZr=o(" (ELECTRA model)"),aZr=l(),a0=a("li"),E0e=a("strong"),nZr=o("mbart"),sZr=o(" \u2014 "),fre=a("a"),lZr=o("FlaxMBartForQuestionAnswering"),iZr=o(" (mBART model)"),dZr=l(),n0=a("li"),C0e=a("strong"),cZr=o("roberta"),fZr=o(" \u2014 "),mre=a("a"),mZr=o("FlaxRobertaForQuestionAnswering"),gZr=o(" (RoBERTa model)"),hZr=l(),s0=a("li"),w0e=a("strong"),pZr=o("roformer"),_Zr=o(" \u2014 "),gre=a("a"),uZr=o("FlaxRoFormerForQuestionAnswering"),bZr=o(" (RoFormer model)"),vZr=l(),l0=a("li"),A0e=a("strong"),FZr=o("xlm-roberta"),TZr=o(" \u2014 "),hre=a("a"),MZr=o("FlaxXLMRobertaForQuestionAnswering"),EZr=o(" (XLM-RoBERTa model)"),CZr=l(),F(i0.$$.fragment),AWe=l(),bf=a("h2"),d0=a("a"),L0e=a("span"),F(J$.$$.fragment),wZr=l(),y0e=a("span"),AZr=o("FlaxAutoModelForTokenClassification"),LWe=l(),Mr=a("div"),F(Y$.$$.fragment),LZr=l(),vf=a("p"),yZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),pre=a("a"),xZr=o("from_pretrained()"),$Zr=o(" class method or the "),_re=a("a"),kZr=o("from_config()"),SZr=o(` class
method.`),RZr=l(),K$=a("p"),PZr=o("This class cannot be instantiated directly using "),x0e=a("code"),BZr=o("__init__()"),IZr=o(" (throws an error)."),NZr=l(),ea=a("div"),F(Z$.$$.fragment),qZr=l(),$0e=a("p"),jZr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),DZr=l(),Ff=a("p"),GZr=o(`Note:
Loading a model from its configuration file does `),k0e=a("strong"),OZr=o("not"),VZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ure=a("a"),XZr=o("from_pretrained()"),zZr=o(" to load the model weights."),WZr=l(),F(c0.$$.fragment),QZr=l(),Jr=a("div"),F(ek.$$.fragment),HZr=l(),S0e=a("p"),UZr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),JZr=l(),yn=a("p"),YZr=o("The model class to instantiate is selected based on the "),R0e=a("code"),KZr=o("model_type"),ZZr=o(` property of the config object (either
passed as an argument or loaded from `),P0e=a("code"),eet=o("pretrained_model_name_or_path"),oet=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B0e=a("code"),ret=o("pretrained_model_name_or_path"),tet=o(":"),aet=l(),Ve=a("ul"),f0=a("li"),I0e=a("strong"),net=o("albert"),set=o(" \u2014 "),bre=a("a"),iet=o("FlaxAlbertForTokenClassification"),det=o(" (ALBERT model)"),cet=l(),m0=a("li"),N0e=a("strong"),fet=o("bert"),met=o(" \u2014 "),vre=a("a"),get=o("FlaxBertForTokenClassification"),het=o(" (BERT model)"),pet=l(),g0=a("li"),q0e=a("strong"),_et=o("big_bird"),uet=o(" \u2014 "),Fre=a("a"),bet=o("FlaxBigBirdForTokenClassification"),vet=o(" (BigBird model)"),Fet=l(),h0=a("li"),j0e=a("strong"),Tet=o("distilbert"),Met=o(" \u2014 "),Tre=a("a"),Eet=o("FlaxDistilBertForTokenClassification"),Cet=o(" (DistilBERT model)"),wet=l(),p0=a("li"),D0e=a("strong"),Aet=o("electra"),Let=o(" \u2014 "),Mre=a("a"),yet=o("FlaxElectraForTokenClassification"),xet=o(" (ELECTRA model)"),$et=l(),_0=a("li"),G0e=a("strong"),ket=o("roberta"),Set=o(" \u2014 "),Ere=a("a"),Ret=o("FlaxRobertaForTokenClassification"),Pet=o(" (RoBERTa model)"),Bet=l(),u0=a("li"),O0e=a("strong"),Iet=o("roformer"),Net=o(" \u2014 "),Cre=a("a"),qet=o("FlaxRoFormerForTokenClassification"),jet=o(" (RoFormer model)"),Det=l(),b0=a("li"),V0e=a("strong"),Get=o("xlm-roberta"),Oet=o(" \u2014 "),wre=a("a"),Vet=o("FlaxXLMRobertaForTokenClassification"),Xet=o(" (XLM-RoBERTa model)"),zet=l(),F(v0.$$.fragment),yWe=l(),Tf=a("h2"),F0=a("a"),X0e=a("span"),F(ok.$$.fragment),Wet=l(),z0e=a("span"),Qet=o("FlaxAutoModelForMultipleChoice"),xWe=l(),Er=a("div"),F(rk.$$.fragment),Het=l(),Mf=a("p"),Uet=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Are=a("a"),Jet=o("from_pretrained()"),Yet=o(" class method or the "),Lre=a("a"),Ket=o("from_config()"),Zet=o(` class
method.`),eot=l(),tk=a("p"),oot=o("This class cannot be instantiated directly using "),W0e=a("code"),rot=o("__init__()"),tot=o(" (throws an error)."),aot=l(),oa=a("div"),F(ak.$$.fragment),not=l(),Q0e=a("p"),sot=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),lot=l(),Ef=a("p"),iot=o(`Note:
Loading a model from its configuration file does `),H0e=a("strong"),dot=o("not"),cot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yre=a("a"),fot=o("from_pretrained()"),mot=o(" to load the model weights."),got=l(),F(T0.$$.fragment),hot=l(),Yr=a("div"),F(nk.$$.fragment),pot=l(),U0e=a("p"),_ot=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),uot=l(),xn=a("p"),bot=o("The model class to instantiate is selected based on the "),J0e=a("code"),vot=o("model_type"),Fot=o(` property of the config object (either
passed as an argument or loaded from `),Y0e=a("code"),Tot=o("pretrained_model_name_or_path"),Mot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K0e=a("code"),Eot=o("pretrained_model_name_or_path"),Cot=o(":"),wot=l(),Xe=a("ul"),M0=a("li"),Z0e=a("strong"),Aot=o("albert"),Lot=o(" \u2014 "),xre=a("a"),yot=o("FlaxAlbertForMultipleChoice"),xot=o(" (ALBERT model)"),$ot=l(),E0=a("li"),ewe=a("strong"),kot=o("bert"),Sot=o(" \u2014 "),$re=a("a"),Rot=o("FlaxBertForMultipleChoice"),Pot=o(" (BERT model)"),Bot=l(),C0=a("li"),owe=a("strong"),Iot=o("big_bird"),Not=o(" \u2014 "),kre=a("a"),qot=o("FlaxBigBirdForMultipleChoice"),jot=o(" (BigBird model)"),Dot=l(),w0=a("li"),rwe=a("strong"),Got=o("distilbert"),Oot=o(" \u2014 "),Sre=a("a"),Vot=o("FlaxDistilBertForMultipleChoice"),Xot=o(" (DistilBERT model)"),zot=l(),A0=a("li"),twe=a("strong"),Wot=o("electra"),Qot=o(" \u2014 "),Rre=a("a"),Hot=o("FlaxElectraForMultipleChoice"),Uot=o(" (ELECTRA model)"),Jot=l(),L0=a("li"),awe=a("strong"),Yot=o("roberta"),Kot=o(" \u2014 "),Pre=a("a"),Zot=o("FlaxRobertaForMultipleChoice"),ert=o(" (RoBERTa model)"),ort=l(),y0=a("li"),nwe=a("strong"),rrt=o("roformer"),trt=o(" \u2014 "),Bre=a("a"),art=o("FlaxRoFormerForMultipleChoice"),nrt=o(" (RoFormer model)"),srt=l(),x0=a("li"),swe=a("strong"),lrt=o("xlm-roberta"),irt=o(" \u2014 "),Ire=a("a"),drt=o("FlaxXLMRobertaForMultipleChoice"),crt=o(" (XLM-RoBERTa model)"),frt=l(),F($0.$$.fragment),$We=l(),Cf=a("h2"),k0=a("a"),lwe=a("span"),F(sk.$$.fragment),mrt=l(),iwe=a("span"),grt=o("FlaxAutoModelForNextSentencePrediction"),kWe=l(),Cr=a("div"),F(lk.$$.fragment),hrt=l(),wf=a("p"),prt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Nre=a("a"),_rt=o("from_pretrained()"),urt=o(" class method or the "),qre=a("a"),brt=o("from_config()"),vrt=o(` class
method.`),Frt=l(),ik=a("p"),Trt=o("This class cannot be instantiated directly using "),dwe=a("code"),Mrt=o("__init__()"),Ert=o(" (throws an error)."),Crt=l(),ra=a("div"),F(dk.$$.fragment),wrt=l(),cwe=a("p"),Art=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Lrt=l(),Af=a("p"),yrt=o(`Note:
Loading a model from its configuration file does `),fwe=a("strong"),xrt=o("not"),$rt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jre=a("a"),krt=o("from_pretrained()"),Srt=o(" to load the model weights."),Rrt=l(),F(S0.$$.fragment),Prt=l(),Kr=a("div"),F(ck.$$.fragment),Brt=l(),mwe=a("p"),Irt=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Nrt=l(),$n=a("p"),qrt=o("The model class to instantiate is selected based on the "),gwe=a("code"),jrt=o("model_type"),Drt=o(` property of the config object (either
passed as an argument or loaded from `),hwe=a("code"),Grt=o("pretrained_model_name_or_path"),Ort=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pwe=a("code"),Vrt=o("pretrained_model_name_or_path"),Xrt=o(":"),zrt=l(),_we=a("ul"),R0=a("li"),uwe=a("strong"),Wrt=o("bert"),Qrt=o(" \u2014 "),Dre=a("a"),Hrt=o("FlaxBertForNextSentencePrediction"),Urt=o(" (BERT model)"),Jrt=l(),F(P0.$$.fragment),SWe=l(),Lf=a("h2"),B0=a("a"),bwe=a("span"),F(fk.$$.fragment),Yrt=l(),vwe=a("span"),Krt=o("FlaxAutoModelForImageClassification"),RWe=l(),wr=a("div"),F(mk.$$.fragment),Zrt=l(),yf=a("p"),ett=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Gre=a("a"),ott=o("from_pretrained()"),rtt=o(" class method or the "),Ore=a("a"),ttt=o("from_config()"),att=o(` class
method.`),ntt=l(),gk=a("p"),stt=o("This class cannot be instantiated directly using "),Fwe=a("code"),ltt=o("__init__()"),itt=o(" (throws an error)."),dtt=l(),ta=a("div"),F(hk.$$.fragment),ctt=l(),Twe=a("p"),ftt=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),mtt=l(),xf=a("p"),gtt=o(`Note:
Loading a model from its configuration file does `),Mwe=a("strong"),htt=o("not"),ptt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vre=a("a"),_tt=o("from_pretrained()"),utt=o(" to load the model weights."),btt=l(),F(I0.$$.fragment),vtt=l(),Zr=a("div"),F(pk.$$.fragment),Ftt=l(),Ewe=a("p"),Ttt=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Mtt=l(),kn=a("p"),Ett=o("The model class to instantiate is selected based on the "),Cwe=a("code"),Ctt=o("model_type"),wtt=o(` property of the config object (either
passed as an argument or loaded from `),wwe=a("code"),Att=o("pretrained_model_name_or_path"),Ltt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Awe=a("code"),ytt=o("pretrained_model_name_or_path"),xtt=o(":"),$tt=l(),_k=a("ul"),N0=a("li"),Lwe=a("strong"),ktt=o("beit"),Stt=o(" \u2014 "),Xre=a("a"),Rtt=o("FlaxBeitForImageClassification"),Ptt=o(" (BEiT model)"),Btt=l(),q0=a("li"),ywe=a("strong"),Itt=o("vit"),Ntt=o(" \u2014 "),zre=a("a"),qtt=o("FlaxViTForImageClassification"),jtt=o(" (ViT model)"),Dtt=l(),F(j0.$$.fragment),PWe=l(),$f=a("h2"),D0=a("a"),xwe=a("span"),F(uk.$$.fragment),Gtt=l(),$we=a("span"),Ott=o("FlaxAutoModelForVision2Seq"),BWe=l(),Ar=a("div"),F(bk.$$.fragment),Vtt=l(),kf=a("p"),Xtt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Wre=a("a"),ztt=o("from_pretrained()"),Wtt=o(" class method or the "),Qre=a("a"),Qtt=o("from_config()"),Htt=o(` class
method.`),Utt=l(),vk=a("p"),Jtt=o("This class cannot be instantiated directly using "),kwe=a("code"),Ytt=o("__init__()"),Ktt=o(" (throws an error)."),Ztt=l(),aa=a("div"),F(Fk.$$.fragment),eat=l(),Swe=a("p"),oat=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),rat=l(),Sf=a("p"),tat=o(`Note:
Loading a model from its configuration file does `),Rwe=a("strong"),aat=o("not"),nat=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hre=a("a"),sat=o("from_pretrained()"),lat=o(" to load the model weights."),iat=l(),F(G0.$$.fragment),dat=l(),et=a("div"),F(Tk.$$.fragment),cat=l(),Pwe=a("p"),fat=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),mat=l(),Sn=a("p"),gat=o("The model class to instantiate is selected based on the "),Bwe=a("code"),hat=o("model_type"),pat=o(` property of the config object (either
passed as an argument or loaded from `),Iwe=a("code"),_at=o("pretrained_model_name_or_path"),uat=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nwe=a("code"),bat=o("pretrained_model_name_or_path"),vat=o(":"),Fat=l(),qwe=a("ul"),O0=a("li"),jwe=a("strong"),Tat=o("vision-encoder-decoder"),Mat=o(" \u2014 "),Ure=a("a"),Eat=o("FlaxVisionEncoderDecoderModel"),Cat=o(" (Vision Encoder decoder model)"),wat=l(),F(V0.$$.fragment),this.h()},l(f){const u=THt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Mk=s(p);m=n(Mk,"A",{id:!0,class:!0,href:!0});var Dwe=s(m);_=n(Dwe,"SPAN",{});var Gwe=s(_);T(d.$$.fragment,Gwe),Gwe.forEach(t),Dwe.forEach(t),h=i(Mk),Co=n(Mk,"SPAN",{});var Owe=s(Co);xi=r(Owe,"Auto Classes"),Owe.forEach(t),Mk.forEach(t),If=i(f),lt=n(f,"P",{});var Ek=s(lt);$i=r(Ek,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ki=n(Ek,"CODE",{});var Vwe=s(ki);i6=r(Vwe,"from_pretrained()"),Vwe.forEach(t),Nf=r(Ek,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ek.forEach(t),Oe=i(f),Qe=n(f,"P",{});var Rn=s(Qe);Si=r(Rn,"Instantiating one of "),Pn=n(Rn,"A",{href:!0});var Xwe=s(Pn);d6=r(Xwe,"AutoConfig"),Xwe.forEach(t),Bn=r(Rn,", "),In=n(Rn,"A",{href:!0});var zwe=s(In);c6=r(zwe,"AutoModel"),zwe.forEach(t),Ri=r(Rn,`, and
`),Nn=n(Rn,"A",{href:!0});var Wwe=s(Nn);f6=r(Wwe,"AutoTokenizer"),Wwe.forEach(t),Pi=r(Rn," will directly create a class of the relevant architecture. For instance"),Rn.forEach(t),qf=i(f),T(Sa.$$.fragment,f),He=i(f),Ae=n(f,"P",{});var Ck=s(Ae);zS=r(Ck,"will create a model that is an instance of "),Bi=n(Ck,"A",{href:!0});var Qwe=s(Bi);WS=r(Qwe,"BertModel"),Qwe.forEach(t),QS=r(Ck,"."),Ck.forEach(t),wo=i(f),Ra=n(f,"P",{});var wk=s(Ra);HS=r(wk,"There is one class of "),jf=n(wk,"CODE",{});var Hwe=s(jf);US=r(Hwe,"AutoModel"),Hwe.forEach(t),WHe=r(wk," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),wk.forEach(t),kXe=i(f),Ii=n(f,"H2",{class:!0});var Ak=s(Ii);Df=n(Ak,"A",{id:!0,class:!0,href:!0});var Uwe=s(Df);Xae=n(Uwe,"SPAN",{});var Jwe=s(Xae);T(m6.$$.fragment,Jwe),Jwe.forEach(t),Uwe.forEach(t),QHe=i(Ak),zae=n(Ak,"SPAN",{});var Ywe=s(zae);HHe=r(Ywe,"Extending the Auto Classes"),Ywe.forEach(t),Ak.forEach(t),SXe=i(f),qn=n(f,"P",{});var Rf=s(qn);UHe=r(Rf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Wae=n(Rf,"CODE",{});var Kwe=s(Wae);JHe=r(Kwe,"NewModel"),Kwe.forEach(t),YHe=r(Rf,", make sure you have a "),Qae=n(Rf,"CODE",{});var Zwe=s(Qae);KHe=r(Zwe,"NewModelConfig"),Zwe.forEach(t),ZHe=r(Rf,` then you can add those to the auto
classes like this:`),Rf.forEach(t),RXe=i(f),T(g6.$$.fragment,f),PXe=i(f),JS=n(f,"P",{});var eAe=s(JS);eUe=r(eAe,"You will then be able to use the auto classes like you would usually do!"),eAe.forEach(t),BXe=i(f),T(Gf.$$.fragment,f),IXe=i(f),Ni=n(f,"H2",{class:!0});var Lk=s(Ni);Of=n(Lk,"A",{id:!0,class:!0,href:!0});var oAe=s(Of);Hae=n(oAe,"SPAN",{});var rAe=s(Hae);T(h6.$$.fragment,rAe),rAe.forEach(t),oAe.forEach(t),oUe=i(Lk),Uae=n(Lk,"SPAN",{});var tAe=s(Uae);rUe=r(tAe,"AutoConfig"),tAe.forEach(t),Lk.forEach(t),NXe=i(f),Ao=n(f,"DIV",{class:!0});var nt=s(Ao);T(p6.$$.fragment,nt),tUe=i(nt),_6=n(nt,"P",{});var yk=s(_6);aUe=r(yk,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),YS=n(yk,"A",{href:!0});var aAe=s(YS);nUe=r(aAe,"from_pretrained()"),aAe.forEach(t),sUe=r(yk," class method."),yk.forEach(t),lUe=i(nt),u6=n(nt,"P",{});var xk=s(u6);iUe=r(xk,"This class cannot be instantiated directly using "),Jae=n(xk,"CODE",{});var nAe=s(Jae);dUe=r(nAe,"__init__()"),nAe.forEach(t),cUe=r(xk," (throws an error)."),xk.forEach(t),fUe=i(nt),Lr=n(nt,"DIV",{class:!0});var st=s(Lr);T(b6.$$.fragment,st),mUe=i(st),Yae=n(st,"P",{});var sAe=s(Yae);gUe=r(sAe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),sAe.forEach(t),hUe=i(st),qi=n(st,"P",{});var Pf=s(qi);pUe=r(Pf,"The configuration class to instantiate is selected based on the "),Kae=n(Pf,"CODE",{});var lAe=s(Kae);_Ue=r(lAe,"model_type"),lAe.forEach(t),uUe=r(Pf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Zae=n(Pf,"CODE",{});var iAe=s(Zae);bUe=r(iAe,"pretrained_model_name_or_path"),iAe.forEach(t),vUe=r(Pf,":"),Pf.forEach(t),FUe=i(st),A=n(st,"UL",{});var L=s(A);Vf=n(L,"LI",{});var X0=s(Vf);ene=n(X0,"STRONG",{});var dAe=s(ene);TUe=r(dAe,"albert"),dAe.forEach(t),MUe=r(X0," \u2014 "),KS=n(X0,"A",{href:!0});var cAe=s(KS);EUe=r(cAe,"AlbertConfig"),cAe.forEach(t),CUe=r(X0," (ALBERT model)"),X0.forEach(t),wUe=i(L),Xf=n(L,"LI",{});var z0=s(Xf);one=n(z0,"STRONG",{});var fAe=s(one);AUe=r(fAe,"bart"),fAe.forEach(t),LUe=r(z0," \u2014 "),ZS=n(z0,"A",{href:!0});var mAe=s(ZS);yUe=r(mAe,"BartConfig"),mAe.forEach(t),xUe=r(z0," (BART model)"),z0.forEach(t),$Ue=i(L),zf=n(L,"LI",{});var W0=s(zf);rne=n(W0,"STRONG",{});var gAe=s(rne);kUe=r(gAe,"beit"),gAe.forEach(t),SUe=r(W0," \u2014 "),eR=n(W0,"A",{href:!0});var hAe=s(eR);RUe=r(hAe,"BeitConfig"),hAe.forEach(t),PUe=r(W0," (BEiT model)"),W0.forEach(t),BUe=i(L),Wf=n(L,"LI",{});var Q0=s(Wf);tne=n(Q0,"STRONG",{});var pAe=s(tne);IUe=r(pAe,"bert"),pAe.forEach(t),NUe=r(Q0," \u2014 "),oR=n(Q0,"A",{href:!0});var _Ae=s(oR);qUe=r(_Ae,"BertConfig"),_Ae.forEach(t),jUe=r(Q0," (BERT model)"),Q0.forEach(t),DUe=i(L),Qf=n(L,"LI",{});var H0=s(Qf);ane=n(H0,"STRONG",{});var uAe=s(ane);GUe=r(uAe,"bert-generation"),uAe.forEach(t),OUe=r(H0," \u2014 "),rR=n(H0,"A",{href:!0});var bAe=s(rR);VUe=r(bAe,"BertGenerationConfig"),bAe.forEach(t),XUe=r(H0," (Bert Generation model)"),H0.forEach(t),zUe=i(L),Hf=n(L,"LI",{});var U0=s(Hf);nne=n(U0,"STRONG",{});var vAe=s(nne);WUe=r(vAe,"big_bird"),vAe.forEach(t),QUe=r(U0," \u2014 "),tR=n(U0,"A",{href:!0});var FAe=s(tR);HUe=r(FAe,"BigBirdConfig"),FAe.forEach(t),UUe=r(U0," (BigBird model)"),U0.forEach(t),JUe=i(L),Uf=n(L,"LI",{});var J0=s(Uf);sne=n(J0,"STRONG",{});var TAe=s(sne);YUe=r(TAe,"bigbird_pegasus"),TAe.forEach(t),KUe=r(J0," \u2014 "),aR=n(J0,"A",{href:!0});var MAe=s(aR);ZUe=r(MAe,"BigBirdPegasusConfig"),MAe.forEach(t),eJe=r(J0," (BigBird-Pegasus model)"),J0.forEach(t),oJe=i(L),Jf=n(L,"LI",{});var Y0=s(Jf);lne=n(Y0,"STRONG",{});var EAe=s(lne);rJe=r(EAe,"blenderbot"),EAe.forEach(t),tJe=r(Y0," \u2014 "),nR=n(Y0,"A",{href:!0});var CAe=s(nR);aJe=r(CAe,"BlenderbotConfig"),CAe.forEach(t),nJe=r(Y0," (Blenderbot model)"),Y0.forEach(t),sJe=i(L),Yf=n(L,"LI",{});var K0=s(Yf);ine=n(K0,"STRONG",{});var wAe=s(ine);lJe=r(wAe,"blenderbot-small"),wAe.forEach(t),iJe=r(K0," \u2014 "),sR=n(K0,"A",{href:!0});var AAe=s(sR);dJe=r(AAe,"BlenderbotSmallConfig"),AAe.forEach(t),cJe=r(K0," (BlenderbotSmall model)"),K0.forEach(t),fJe=i(L),Kf=n(L,"LI",{});var Z0=s(Kf);dne=n(Z0,"STRONG",{});var LAe=s(dne);mJe=r(LAe,"bloom"),LAe.forEach(t),gJe=r(Z0," \u2014 "),lR=n(Z0,"A",{href:!0});var yAe=s(lR);hJe=r(yAe,"BloomConfig"),yAe.forEach(t),pJe=r(Z0," (BLOOM model)"),Z0.forEach(t),_Je=i(L),Zf=n(L,"LI",{});var ew=s(Zf);cne=n(ew,"STRONG",{});var xAe=s(cne);uJe=r(xAe,"camembert"),xAe.forEach(t),bJe=r(ew," \u2014 "),iR=n(ew,"A",{href:!0});var $Ae=s(iR);vJe=r($Ae,"CamembertConfig"),$Ae.forEach(t),FJe=r(ew," (CamemBERT model)"),ew.forEach(t),TJe=i(L),em=n(L,"LI",{});var ow=s(em);fne=n(ow,"STRONG",{});var kAe=s(fne);MJe=r(kAe,"canine"),kAe.forEach(t),EJe=r(ow," \u2014 "),dR=n(ow,"A",{href:!0});var SAe=s(dR);CJe=r(SAe,"CanineConfig"),SAe.forEach(t),wJe=r(ow," (CANINE model)"),ow.forEach(t),AJe=i(L),om=n(L,"LI",{});var rw=s(om);mne=n(rw,"STRONG",{});var RAe=s(mne);LJe=r(RAe,"clip"),RAe.forEach(t),yJe=r(rw," \u2014 "),cR=n(rw,"A",{href:!0});var PAe=s(cR);xJe=r(PAe,"CLIPConfig"),PAe.forEach(t),$Je=r(rw," (CLIP model)"),rw.forEach(t),kJe=i(L),rm=n(L,"LI",{});var tw=s(rm);gne=n(tw,"STRONG",{});var BAe=s(gne);SJe=r(BAe,"codegen"),BAe.forEach(t),RJe=r(tw," \u2014 "),fR=n(tw,"A",{href:!0});var IAe=s(fR);PJe=r(IAe,"CodeGenConfig"),IAe.forEach(t),BJe=r(tw," (CodeGen model)"),tw.forEach(t),IJe=i(L),tm=n(L,"LI",{});var aw=s(tm);hne=n(aw,"STRONG",{});var NAe=s(hne);NJe=r(NAe,"convbert"),NAe.forEach(t),qJe=r(aw," \u2014 "),mR=n(aw,"A",{href:!0});var qAe=s(mR);jJe=r(qAe,"ConvBertConfig"),qAe.forEach(t),DJe=r(aw," (ConvBERT model)"),aw.forEach(t),GJe=i(L),am=n(L,"LI",{});var nw=s(am);pne=n(nw,"STRONG",{});var jAe=s(pne);OJe=r(jAe,"convnext"),jAe.forEach(t),VJe=r(nw," \u2014 "),gR=n(nw,"A",{href:!0});var DAe=s(gR);XJe=r(DAe,"ConvNextConfig"),DAe.forEach(t),zJe=r(nw," (ConvNeXT model)"),nw.forEach(t),WJe=i(L),nm=n(L,"LI",{});var sw=s(nm);_ne=n(sw,"STRONG",{});var GAe=s(_ne);QJe=r(GAe,"ctrl"),GAe.forEach(t),HJe=r(sw," \u2014 "),hR=n(sw,"A",{href:!0});var OAe=s(hR);UJe=r(OAe,"CTRLConfig"),OAe.forEach(t),JJe=r(sw," (CTRL model)"),sw.forEach(t),YJe=i(L),sm=n(L,"LI",{});var lw=s(sm);une=n(lw,"STRONG",{});var VAe=s(une);KJe=r(VAe,"cvt"),VAe.forEach(t),ZJe=r(lw," \u2014 "),pR=n(lw,"A",{href:!0});var XAe=s(pR);eYe=r(XAe,"CvtConfig"),XAe.forEach(t),oYe=r(lw," (CvT model)"),lw.forEach(t),rYe=i(L),lm=n(L,"LI",{});var iw=s(lm);bne=n(iw,"STRONG",{});var zAe=s(bne);tYe=r(zAe,"data2vec-audio"),zAe.forEach(t),aYe=r(iw," \u2014 "),_R=n(iw,"A",{href:!0});var WAe=s(_R);nYe=r(WAe,"Data2VecAudioConfig"),WAe.forEach(t),sYe=r(iw," (Data2VecAudio model)"),iw.forEach(t),lYe=i(L),im=n(L,"LI",{});var dw=s(im);vne=n(dw,"STRONG",{});var QAe=s(vne);iYe=r(QAe,"data2vec-text"),QAe.forEach(t),dYe=r(dw," \u2014 "),uR=n(dw,"A",{href:!0});var HAe=s(uR);cYe=r(HAe,"Data2VecTextConfig"),HAe.forEach(t),fYe=r(dw," (Data2VecText model)"),dw.forEach(t),mYe=i(L),dm=n(L,"LI",{});var cw=s(dm);Fne=n(cw,"STRONG",{});var UAe=s(Fne);gYe=r(UAe,"data2vec-vision"),UAe.forEach(t),hYe=r(cw," \u2014 "),bR=n(cw,"A",{href:!0});var JAe=s(bR);pYe=r(JAe,"Data2VecVisionConfig"),JAe.forEach(t),_Ye=r(cw," (Data2VecVision model)"),cw.forEach(t),uYe=i(L),cm=n(L,"LI",{});var fw=s(cm);Tne=n(fw,"STRONG",{});var YAe=s(Tne);bYe=r(YAe,"deberta"),YAe.forEach(t),vYe=r(fw," \u2014 "),vR=n(fw,"A",{href:!0});var KAe=s(vR);FYe=r(KAe,"DebertaConfig"),KAe.forEach(t),TYe=r(fw," (DeBERTa model)"),fw.forEach(t),MYe=i(L),fm=n(L,"LI",{});var mw=s(fm);Mne=n(mw,"STRONG",{});var ZAe=s(Mne);EYe=r(ZAe,"deberta-v2"),ZAe.forEach(t),CYe=r(mw," \u2014 "),FR=n(mw,"A",{href:!0});var e6e=s(FR);wYe=r(e6e,"DebertaV2Config"),e6e.forEach(t),AYe=r(mw," (DeBERTa-v2 model)"),mw.forEach(t),LYe=i(L),mm=n(L,"LI",{});var gw=s(mm);Ene=n(gw,"STRONG",{});var Lat=s(Ene);yYe=r(Lat,"decision_transformer"),Lat.forEach(t),xYe=r(gw," \u2014 "),TR=n(gw,"A",{href:!0});var yat=s(TR);$Ye=r(yat,"DecisionTransformerConfig"),yat.forEach(t),kYe=r(gw," (Decision Transformer model)"),gw.forEach(t),SYe=i(L),gm=n(L,"LI",{});var o6e=s(gm);Cne=n(o6e,"STRONG",{});var xat=s(Cne);RYe=r(xat,"deit"),xat.forEach(t),PYe=r(o6e," \u2014 "),MR=n(o6e,"A",{href:!0});var $at=s(MR);BYe=r($at,"DeiTConfig"),$at.forEach(t),IYe=r(o6e," (DeiT model)"),o6e.forEach(t),NYe=i(L),hm=n(L,"LI",{});var r6e=s(hm);wne=n(r6e,"STRONG",{});var kat=s(wne);qYe=r(kat,"detr"),kat.forEach(t),jYe=r(r6e," \u2014 "),ER=n(r6e,"A",{href:!0});var Sat=s(ER);DYe=r(Sat,"DetrConfig"),Sat.forEach(t),GYe=r(r6e," (DETR model)"),r6e.forEach(t),OYe=i(L),pm=n(L,"LI",{});var t6e=s(pm);Ane=n(t6e,"STRONG",{});var Rat=s(Ane);VYe=r(Rat,"distilbert"),Rat.forEach(t),XYe=r(t6e," \u2014 "),CR=n(t6e,"A",{href:!0});var Pat=s(CR);zYe=r(Pat,"DistilBertConfig"),Pat.forEach(t),WYe=r(t6e," (DistilBERT model)"),t6e.forEach(t),QYe=i(L),_m=n(L,"LI",{});var a6e=s(_m);Lne=n(a6e,"STRONG",{});var Bat=s(Lne);HYe=r(Bat,"dpr"),Bat.forEach(t),UYe=r(a6e," \u2014 "),wR=n(a6e,"A",{href:!0});var Iat=s(wR);JYe=r(Iat,"DPRConfig"),Iat.forEach(t),YYe=r(a6e," (DPR model)"),a6e.forEach(t),KYe=i(L),um=n(L,"LI",{});var n6e=s(um);yne=n(n6e,"STRONG",{});var Nat=s(yne);ZYe=r(Nat,"dpt"),Nat.forEach(t),eKe=r(n6e," \u2014 "),AR=n(n6e,"A",{href:!0});var qat=s(AR);oKe=r(qat,"DPTConfig"),qat.forEach(t),rKe=r(n6e," (DPT model)"),n6e.forEach(t),tKe=i(L),bm=n(L,"LI",{});var s6e=s(bm);xne=n(s6e,"STRONG",{});var jat=s(xne);aKe=r(jat,"electra"),jat.forEach(t),nKe=r(s6e," \u2014 "),LR=n(s6e,"A",{href:!0});var Dat=s(LR);sKe=r(Dat,"ElectraConfig"),Dat.forEach(t),lKe=r(s6e," (ELECTRA model)"),s6e.forEach(t),iKe=i(L),vm=n(L,"LI",{});var l6e=s(vm);$ne=n(l6e,"STRONG",{});var Gat=s($ne);dKe=r(Gat,"encoder-decoder"),Gat.forEach(t),cKe=r(l6e," \u2014 "),yR=n(l6e,"A",{href:!0});var Oat=s(yR);fKe=r(Oat,"EncoderDecoderConfig"),Oat.forEach(t),mKe=r(l6e," (Encoder decoder model)"),l6e.forEach(t),gKe=i(L),Fm=n(L,"LI",{});var i6e=s(Fm);kne=n(i6e,"STRONG",{});var Vat=s(kne);hKe=r(Vat,"flaubert"),Vat.forEach(t),pKe=r(i6e," \u2014 "),xR=n(i6e,"A",{href:!0});var Xat=s(xR);_Ke=r(Xat,"FlaubertConfig"),Xat.forEach(t),uKe=r(i6e," (FlauBERT model)"),i6e.forEach(t),bKe=i(L),Tm=n(L,"LI",{});var d6e=s(Tm);Sne=n(d6e,"STRONG",{});var zat=s(Sne);vKe=r(zat,"flava"),zat.forEach(t),FKe=r(d6e," \u2014 "),$R=n(d6e,"A",{href:!0});var Wat=s($R);TKe=r(Wat,"FlavaConfig"),Wat.forEach(t),MKe=r(d6e," (FLAVA model)"),d6e.forEach(t),EKe=i(L),Mm=n(L,"LI",{});var c6e=s(Mm);Rne=n(c6e,"STRONG",{});var Qat=s(Rne);CKe=r(Qat,"fnet"),Qat.forEach(t),wKe=r(c6e," \u2014 "),kR=n(c6e,"A",{href:!0});var Hat=s(kR);AKe=r(Hat,"FNetConfig"),Hat.forEach(t),LKe=r(c6e," (FNet model)"),c6e.forEach(t),yKe=i(L),Em=n(L,"LI",{});var f6e=s(Em);Pne=n(f6e,"STRONG",{});var Uat=s(Pne);xKe=r(Uat,"fsmt"),Uat.forEach(t),$Ke=r(f6e," \u2014 "),SR=n(f6e,"A",{href:!0});var Jat=s(SR);kKe=r(Jat,"FSMTConfig"),Jat.forEach(t),SKe=r(f6e," (FairSeq Machine-Translation model)"),f6e.forEach(t),RKe=i(L),Cm=n(L,"LI",{});var m6e=s(Cm);Bne=n(m6e,"STRONG",{});var Yat=s(Bne);PKe=r(Yat,"funnel"),Yat.forEach(t),BKe=r(m6e," \u2014 "),RR=n(m6e,"A",{href:!0});var Kat=s(RR);IKe=r(Kat,"FunnelConfig"),Kat.forEach(t),NKe=r(m6e," (Funnel Transformer model)"),m6e.forEach(t),qKe=i(L),wm=n(L,"LI",{});var g6e=s(wm);Ine=n(g6e,"STRONG",{});var Zat=s(Ine);jKe=r(Zat,"glpn"),Zat.forEach(t),DKe=r(g6e," \u2014 "),PR=n(g6e,"A",{href:!0});var ent=s(PR);GKe=r(ent,"GLPNConfig"),ent.forEach(t),OKe=r(g6e," (GLPN model)"),g6e.forEach(t),VKe=i(L),Am=n(L,"LI",{});var h6e=s(Am);Nne=n(h6e,"STRONG",{});var ont=s(Nne);XKe=r(ont,"gpt2"),ont.forEach(t),zKe=r(h6e," \u2014 "),BR=n(h6e,"A",{href:!0});var rnt=s(BR);WKe=r(rnt,"GPT2Config"),rnt.forEach(t),QKe=r(h6e," (OpenAI GPT-2 model)"),h6e.forEach(t),HKe=i(L),Lm=n(L,"LI",{});var p6e=s(Lm);qne=n(p6e,"STRONG",{});var tnt=s(qne);UKe=r(tnt,"gpt_neo"),tnt.forEach(t),JKe=r(p6e," \u2014 "),IR=n(p6e,"A",{href:!0});var ant=s(IR);YKe=r(ant,"GPTNeoConfig"),ant.forEach(t),KKe=r(p6e," (GPT Neo model)"),p6e.forEach(t),ZKe=i(L),ym=n(L,"LI",{});var _6e=s(ym);jne=n(_6e,"STRONG",{});var nnt=s(jne);eZe=r(nnt,"gpt_neox"),nnt.forEach(t),oZe=r(_6e," \u2014 "),NR=n(_6e,"A",{href:!0});var snt=s(NR);rZe=r(snt,"GPTNeoXConfig"),snt.forEach(t),tZe=r(_6e," (GPT NeoX model)"),_6e.forEach(t),aZe=i(L),xm=n(L,"LI",{});var u6e=s(xm);Dne=n(u6e,"STRONG",{});var lnt=s(Dne);nZe=r(lnt,"gptj"),lnt.forEach(t),sZe=r(u6e," \u2014 "),qR=n(u6e,"A",{href:!0});var int=s(qR);lZe=r(int,"GPTJConfig"),int.forEach(t),iZe=r(u6e," (GPT-J model)"),u6e.forEach(t),dZe=i(L),$m=n(L,"LI",{});var b6e=s($m);Gne=n(b6e,"STRONG",{});var dnt=s(Gne);cZe=r(dnt,"groupvit"),dnt.forEach(t),fZe=r(b6e," \u2014 "),jR=n(b6e,"A",{href:!0});var cnt=s(jR);mZe=r(cnt,"GroupViTConfig"),cnt.forEach(t),gZe=r(b6e," (GroupViT model)"),b6e.forEach(t),hZe=i(L),km=n(L,"LI",{});var v6e=s(km);One=n(v6e,"STRONG",{});var fnt=s(One);pZe=r(fnt,"hubert"),fnt.forEach(t),_Ze=r(v6e," \u2014 "),DR=n(v6e,"A",{href:!0});var mnt=s(DR);uZe=r(mnt,"HubertConfig"),mnt.forEach(t),bZe=r(v6e," (Hubert model)"),v6e.forEach(t),vZe=i(L),Sm=n(L,"LI",{});var F6e=s(Sm);Vne=n(F6e,"STRONG",{});var gnt=s(Vne);FZe=r(gnt,"ibert"),gnt.forEach(t),TZe=r(F6e," \u2014 "),GR=n(F6e,"A",{href:!0});var hnt=s(GR);MZe=r(hnt,"IBertConfig"),hnt.forEach(t),EZe=r(F6e," (I-BERT model)"),F6e.forEach(t),CZe=i(L),Rm=n(L,"LI",{});var T6e=s(Rm);Xne=n(T6e,"STRONG",{});var pnt=s(Xne);wZe=r(pnt,"imagegpt"),pnt.forEach(t),AZe=r(T6e," \u2014 "),OR=n(T6e,"A",{href:!0});var _nt=s(OR);LZe=r(_nt,"ImageGPTConfig"),_nt.forEach(t),yZe=r(T6e," (ImageGPT model)"),T6e.forEach(t),xZe=i(L),Pm=n(L,"LI",{});var M6e=s(Pm);zne=n(M6e,"STRONG",{});var unt=s(zne);$Ze=r(unt,"layoutlm"),unt.forEach(t),kZe=r(M6e," \u2014 "),VR=n(M6e,"A",{href:!0});var bnt=s(VR);SZe=r(bnt,"LayoutLMConfig"),bnt.forEach(t),RZe=r(M6e," (LayoutLM model)"),M6e.forEach(t),PZe=i(L),Bm=n(L,"LI",{});var E6e=s(Bm);Wne=n(E6e,"STRONG",{});var vnt=s(Wne);BZe=r(vnt,"layoutlmv2"),vnt.forEach(t),IZe=r(E6e," \u2014 "),XR=n(E6e,"A",{href:!0});var Fnt=s(XR);NZe=r(Fnt,"LayoutLMv2Config"),Fnt.forEach(t),qZe=r(E6e," (LayoutLMv2 model)"),E6e.forEach(t),jZe=i(L),Im=n(L,"LI",{});var C6e=s(Im);Qne=n(C6e,"STRONG",{});var Tnt=s(Qne);DZe=r(Tnt,"layoutlmv3"),Tnt.forEach(t),GZe=r(C6e," \u2014 "),zR=n(C6e,"A",{href:!0});var Mnt=s(zR);OZe=r(Mnt,"LayoutLMv3Config"),Mnt.forEach(t),VZe=r(C6e," (LayoutLMv3 model)"),C6e.forEach(t),XZe=i(L),Nm=n(L,"LI",{});var w6e=s(Nm);Hne=n(w6e,"STRONG",{});var Ent=s(Hne);zZe=r(Ent,"led"),Ent.forEach(t),WZe=r(w6e," \u2014 "),WR=n(w6e,"A",{href:!0});var Cnt=s(WR);QZe=r(Cnt,"LEDConfig"),Cnt.forEach(t),HZe=r(w6e," (LED model)"),w6e.forEach(t),UZe=i(L),qm=n(L,"LI",{});var A6e=s(qm);Une=n(A6e,"STRONG",{});var wnt=s(Une);JZe=r(wnt,"levit"),wnt.forEach(t),YZe=r(A6e," \u2014 "),QR=n(A6e,"A",{href:!0});var Ant=s(QR);KZe=r(Ant,"LevitConfig"),Ant.forEach(t),ZZe=r(A6e," (LeViT model)"),A6e.forEach(t),eeo=i(L),jm=n(L,"LI",{});var L6e=s(jm);Jne=n(L6e,"STRONG",{});var Lnt=s(Jne);oeo=r(Lnt,"longformer"),Lnt.forEach(t),reo=r(L6e," \u2014 "),HR=n(L6e,"A",{href:!0});var ynt=s(HR);teo=r(ynt,"LongformerConfig"),ynt.forEach(t),aeo=r(L6e," (Longformer model)"),L6e.forEach(t),neo=i(L),Dm=n(L,"LI",{});var y6e=s(Dm);Yne=n(y6e,"STRONG",{});var xnt=s(Yne);seo=r(xnt,"longt5"),xnt.forEach(t),leo=r(y6e," \u2014 "),UR=n(y6e,"A",{href:!0});var $nt=s(UR);ieo=r($nt,"LongT5Config"),$nt.forEach(t),deo=r(y6e," (LongT5 model)"),y6e.forEach(t),ceo=i(L),Gm=n(L,"LI",{});var x6e=s(Gm);Kne=n(x6e,"STRONG",{});var knt=s(Kne);feo=r(knt,"luke"),knt.forEach(t),meo=r(x6e," \u2014 "),JR=n(x6e,"A",{href:!0});var Snt=s(JR);geo=r(Snt,"LukeConfig"),Snt.forEach(t),heo=r(x6e," (LUKE model)"),x6e.forEach(t),peo=i(L),Om=n(L,"LI",{});var $6e=s(Om);Zne=n($6e,"STRONG",{});var Rnt=s(Zne);_eo=r(Rnt,"lxmert"),Rnt.forEach(t),ueo=r($6e," \u2014 "),YR=n($6e,"A",{href:!0});var Pnt=s(YR);beo=r(Pnt,"LxmertConfig"),Pnt.forEach(t),veo=r($6e," (LXMERT model)"),$6e.forEach(t),Feo=i(L),Vm=n(L,"LI",{});var k6e=s(Vm);ese=n(k6e,"STRONG",{});var Bnt=s(ese);Teo=r(Bnt,"m2m_100"),Bnt.forEach(t),Meo=r(k6e," \u2014 "),KR=n(k6e,"A",{href:!0});var Int=s(KR);Eeo=r(Int,"M2M100Config"),Int.forEach(t),Ceo=r(k6e," (M2M100 model)"),k6e.forEach(t),weo=i(L),Xm=n(L,"LI",{});var S6e=s(Xm);ose=n(S6e,"STRONG",{});var Nnt=s(ose);Aeo=r(Nnt,"marian"),Nnt.forEach(t),Leo=r(S6e," \u2014 "),ZR=n(S6e,"A",{href:!0});var qnt=s(ZR);yeo=r(qnt,"MarianConfig"),qnt.forEach(t),xeo=r(S6e," (Marian model)"),S6e.forEach(t),$eo=i(L),zm=n(L,"LI",{});var R6e=s(zm);rse=n(R6e,"STRONG",{});var jnt=s(rse);keo=r(jnt,"maskformer"),jnt.forEach(t),Seo=r(R6e," \u2014 "),eP=n(R6e,"A",{href:!0});var Dnt=s(eP);Reo=r(Dnt,"MaskFormerConfig"),Dnt.forEach(t),Peo=r(R6e," (MaskFormer model)"),R6e.forEach(t),Beo=i(L),Wm=n(L,"LI",{});var P6e=s(Wm);tse=n(P6e,"STRONG",{});var Gnt=s(tse);Ieo=r(Gnt,"mbart"),Gnt.forEach(t),Neo=r(P6e," \u2014 "),oP=n(P6e,"A",{href:!0});var Ont=s(oP);qeo=r(Ont,"MBartConfig"),Ont.forEach(t),jeo=r(P6e," (mBART model)"),P6e.forEach(t),Deo=i(L),Qm=n(L,"LI",{});var B6e=s(Qm);ase=n(B6e,"STRONG",{});var Vnt=s(ase);Geo=r(Vnt,"mctct"),Vnt.forEach(t),Oeo=r(B6e," \u2014 "),rP=n(B6e,"A",{href:!0});var Xnt=s(rP);Veo=r(Xnt,"MCTCTConfig"),Xnt.forEach(t),Xeo=r(B6e," (M-CTC-T model)"),B6e.forEach(t),zeo=i(L),Hm=n(L,"LI",{});var I6e=s(Hm);nse=n(I6e,"STRONG",{});var znt=s(nse);Weo=r(znt,"megatron-bert"),znt.forEach(t),Qeo=r(I6e," \u2014 "),tP=n(I6e,"A",{href:!0});var Wnt=s(tP);Heo=r(Wnt,"MegatronBertConfig"),Wnt.forEach(t),Ueo=r(I6e," (Megatron-BERT model)"),I6e.forEach(t),Jeo=i(L),Um=n(L,"LI",{});var N6e=s(Um);sse=n(N6e,"STRONG",{});var Qnt=s(sse);Yeo=r(Qnt,"mobilebert"),Qnt.forEach(t),Keo=r(N6e," \u2014 "),aP=n(N6e,"A",{href:!0});var Hnt=s(aP);Zeo=r(Hnt,"MobileBertConfig"),Hnt.forEach(t),eoo=r(N6e," (MobileBERT model)"),N6e.forEach(t),ooo=i(L),Jm=n(L,"LI",{});var q6e=s(Jm);lse=n(q6e,"STRONG",{});var Unt=s(lse);roo=r(Unt,"mobilevit"),Unt.forEach(t),too=r(q6e," \u2014 "),nP=n(q6e,"A",{href:!0});var Jnt=s(nP);aoo=r(Jnt,"MobileViTConfig"),Jnt.forEach(t),noo=r(q6e," (MobileViT model)"),q6e.forEach(t),soo=i(L),Ym=n(L,"LI",{});var j6e=s(Ym);ise=n(j6e,"STRONG",{});var Ynt=s(ise);loo=r(Ynt,"mpnet"),Ynt.forEach(t),ioo=r(j6e," \u2014 "),sP=n(j6e,"A",{href:!0});var Knt=s(sP);doo=r(Knt,"MPNetConfig"),Knt.forEach(t),coo=r(j6e," (MPNet model)"),j6e.forEach(t),foo=i(L),Km=n(L,"LI",{});var D6e=s(Km);dse=n(D6e,"STRONG",{});var Znt=s(dse);moo=r(Znt,"mt5"),Znt.forEach(t),goo=r(D6e," \u2014 "),lP=n(D6e,"A",{href:!0});var est=s(lP);hoo=r(est,"MT5Config"),est.forEach(t),poo=r(D6e," (MT5 model)"),D6e.forEach(t),_oo=i(L),Zm=n(L,"LI",{});var G6e=s(Zm);cse=n(G6e,"STRONG",{});var ost=s(cse);uoo=r(ost,"mvp"),ost.forEach(t),boo=r(G6e," \u2014 "),iP=n(G6e,"A",{href:!0});var rst=s(iP);voo=r(rst,"MvpConfig"),rst.forEach(t),Foo=r(G6e," (MVP model)"),G6e.forEach(t),Too=i(L),eg=n(L,"LI",{});var O6e=s(eg);fse=n(O6e,"STRONG",{});var tst=s(fse);Moo=r(tst,"nezha"),tst.forEach(t),Eoo=r(O6e," \u2014 "),dP=n(O6e,"A",{href:!0});var ast=s(dP);Coo=r(ast,"NezhaConfig"),ast.forEach(t),woo=r(O6e," (Nezha model)"),O6e.forEach(t),Aoo=i(L),og=n(L,"LI",{});var V6e=s(og);mse=n(V6e,"STRONG",{});var nst=s(mse);Loo=r(nst,"nystromformer"),nst.forEach(t),yoo=r(V6e," \u2014 "),cP=n(V6e,"A",{href:!0});var sst=s(cP);xoo=r(sst,"NystromformerConfig"),sst.forEach(t),$oo=r(V6e," (Nystr\xF6mformer model)"),V6e.forEach(t),koo=i(L),rg=n(L,"LI",{});var X6e=s(rg);gse=n(X6e,"STRONG",{});var lst=s(gse);Soo=r(lst,"openai-gpt"),lst.forEach(t),Roo=r(X6e," \u2014 "),fP=n(X6e,"A",{href:!0});var ist=s(fP);Poo=r(ist,"OpenAIGPTConfig"),ist.forEach(t),Boo=r(X6e," (OpenAI GPT model)"),X6e.forEach(t),Ioo=i(L),tg=n(L,"LI",{});var z6e=s(tg);hse=n(z6e,"STRONG",{});var dst=s(hse);Noo=r(dst,"opt"),dst.forEach(t),qoo=r(z6e," \u2014 "),mP=n(z6e,"A",{href:!0});var cst=s(mP);joo=r(cst,"OPTConfig"),cst.forEach(t),Doo=r(z6e," (OPT model)"),z6e.forEach(t),Goo=i(L),ag=n(L,"LI",{});var W6e=s(ag);pse=n(W6e,"STRONG",{});var fst=s(pse);Ooo=r(fst,"owlvit"),fst.forEach(t),Voo=r(W6e," \u2014 "),gP=n(W6e,"A",{href:!0});var mst=s(gP);Xoo=r(mst,"OwlViTConfig"),mst.forEach(t),zoo=r(W6e," (OWL-ViT model)"),W6e.forEach(t),Woo=i(L),ng=n(L,"LI",{});var Q6e=s(ng);_se=n(Q6e,"STRONG",{});var gst=s(_se);Qoo=r(gst,"pegasus"),gst.forEach(t),Hoo=r(Q6e," \u2014 "),hP=n(Q6e,"A",{href:!0});var hst=s(hP);Uoo=r(hst,"PegasusConfig"),hst.forEach(t),Joo=r(Q6e," (Pegasus model)"),Q6e.forEach(t),Yoo=i(L),sg=n(L,"LI",{});var H6e=s(sg);use=n(H6e,"STRONG",{});var pst=s(use);Koo=r(pst,"perceiver"),pst.forEach(t),Zoo=r(H6e," \u2014 "),pP=n(H6e,"A",{href:!0});var _st=s(pP);ero=r(_st,"PerceiverConfig"),_st.forEach(t),oro=r(H6e," (Perceiver model)"),H6e.forEach(t),rro=i(L),lg=n(L,"LI",{});var U6e=s(lg);bse=n(U6e,"STRONG",{});var ust=s(bse);tro=r(ust,"plbart"),ust.forEach(t),aro=r(U6e," \u2014 "),_P=n(U6e,"A",{href:!0});var bst=s(_P);nro=r(bst,"PLBartConfig"),bst.forEach(t),sro=r(U6e," (PLBart model)"),U6e.forEach(t),lro=i(L),ig=n(L,"LI",{});var J6e=s(ig);vse=n(J6e,"STRONG",{});var vst=s(vse);iro=r(vst,"poolformer"),vst.forEach(t),dro=r(J6e," \u2014 "),uP=n(J6e,"A",{href:!0});var Fst=s(uP);cro=r(Fst,"PoolFormerConfig"),Fst.forEach(t),fro=r(J6e," (PoolFormer model)"),J6e.forEach(t),mro=i(L),dg=n(L,"LI",{});var Y6e=s(dg);Fse=n(Y6e,"STRONG",{});var Tst=s(Fse);gro=r(Tst,"prophetnet"),Tst.forEach(t),hro=r(Y6e," \u2014 "),bP=n(Y6e,"A",{href:!0});var Mst=s(bP);pro=r(Mst,"ProphetNetConfig"),Mst.forEach(t),_ro=r(Y6e," (ProphetNet model)"),Y6e.forEach(t),uro=i(L),cg=n(L,"LI",{});var K6e=s(cg);Tse=n(K6e,"STRONG",{});var Est=s(Tse);bro=r(Est,"qdqbert"),Est.forEach(t),vro=r(K6e," \u2014 "),vP=n(K6e,"A",{href:!0});var Cst=s(vP);Fro=r(Cst,"QDQBertConfig"),Cst.forEach(t),Tro=r(K6e," (QDQBert model)"),K6e.forEach(t),Mro=i(L),fg=n(L,"LI",{});var Z6e=s(fg);Mse=n(Z6e,"STRONG",{});var wst=s(Mse);Ero=r(wst,"rag"),wst.forEach(t),Cro=r(Z6e," \u2014 "),FP=n(Z6e,"A",{href:!0});var Ast=s(FP);wro=r(Ast,"RagConfig"),Ast.forEach(t),Aro=r(Z6e," (RAG model)"),Z6e.forEach(t),Lro=i(L),mg=n(L,"LI",{});var eLe=s(mg);Ese=n(eLe,"STRONG",{});var Lst=s(Ese);yro=r(Lst,"realm"),Lst.forEach(t),xro=r(eLe," \u2014 "),TP=n(eLe,"A",{href:!0});var yst=s(TP);$ro=r(yst,"RealmConfig"),yst.forEach(t),kro=r(eLe," (REALM model)"),eLe.forEach(t),Sro=i(L),gg=n(L,"LI",{});var oLe=s(gg);Cse=n(oLe,"STRONG",{});var xst=s(Cse);Rro=r(xst,"reformer"),xst.forEach(t),Pro=r(oLe," \u2014 "),MP=n(oLe,"A",{href:!0});var $st=s(MP);Bro=r($st,"ReformerConfig"),$st.forEach(t),Iro=r(oLe," (Reformer model)"),oLe.forEach(t),Nro=i(L),hg=n(L,"LI",{});var rLe=s(hg);wse=n(rLe,"STRONG",{});var kst=s(wse);qro=r(kst,"regnet"),kst.forEach(t),jro=r(rLe," \u2014 "),EP=n(rLe,"A",{href:!0});var Sst=s(EP);Dro=r(Sst,"RegNetConfig"),Sst.forEach(t),Gro=r(rLe," (RegNet model)"),rLe.forEach(t),Oro=i(L),pg=n(L,"LI",{});var tLe=s(pg);Ase=n(tLe,"STRONG",{});var Rst=s(Ase);Vro=r(Rst,"rembert"),Rst.forEach(t),Xro=r(tLe," \u2014 "),CP=n(tLe,"A",{href:!0});var Pst=s(CP);zro=r(Pst,"RemBertConfig"),Pst.forEach(t),Wro=r(tLe," (RemBERT model)"),tLe.forEach(t),Qro=i(L),_g=n(L,"LI",{});var aLe=s(_g);Lse=n(aLe,"STRONG",{});var Bst=s(Lse);Hro=r(Bst,"resnet"),Bst.forEach(t),Uro=r(aLe," \u2014 "),wP=n(aLe,"A",{href:!0});var Ist=s(wP);Jro=r(Ist,"ResNetConfig"),Ist.forEach(t),Yro=r(aLe," (ResNet model)"),aLe.forEach(t),Kro=i(L),ug=n(L,"LI",{});var nLe=s(ug);yse=n(nLe,"STRONG",{});var Nst=s(yse);Zro=r(Nst,"retribert"),Nst.forEach(t),eto=r(nLe," \u2014 "),AP=n(nLe,"A",{href:!0});var qst=s(AP);oto=r(qst,"RetriBertConfig"),qst.forEach(t),rto=r(nLe," (RetriBERT model)"),nLe.forEach(t),tto=i(L),bg=n(L,"LI",{});var sLe=s(bg);xse=n(sLe,"STRONG",{});var jst=s(xse);ato=r(jst,"roberta"),jst.forEach(t),nto=r(sLe," \u2014 "),LP=n(sLe,"A",{href:!0});var Dst=s(LP);sto=r(Dst,"RobertaConfig"),Dst.forEach(t),lto=r(sLe," (RoBERTa model)"),sLe.forEach(t),ito=i(L),vg=n(L,"LI",{});var lLe=s(vg);$se=n(lLe,"STRONG",{});var Gst=s($se);dto=r(Gst,"roformer"),Gst.forEach(t),cto=r(lLe," \u2014 "),yP=n(lLe,"A",{href:!0});var Ost=s(yP);fto=r(Ost,"RoFormerConfig"),Ost.forEach(t),mto=r(lLe," (RoFormer model)"),lLe.forEach(t),gto=i(L),Fg=n(L,"LI",{});var iLe=s(Fg);kse=n(iLe,"STRONG",{});var Vst=s(kse);hto=r(Vst,"segformer"),Vst.forEach(t),pto=r(iLe," \u2014 "),xP=n(iLe,"A",{href:!0});var Xst=s(xP);_to=r(Xst,"SegformerConfig"),Xst.forEach(t),uto=r(iLe," (SegFormer model)"),iLe.forEach(t),bto=i(L),Tg=n(L,"LI",{});var dLe=s(Tg);Sse=n(dLe,"STRONG",{});var zst=s(Sse);vto=r(zst,"sew"),zst.forEach(t),Fto=r(dLe," \u2014 "),$P=n(dLe,"A",{href:!0});var Wst=s($P);Tto=r(Wst,"SEWConfig"),Wst.forEach(t),Mto=r(dLe," (SEW model)"),dLe.forEach(t),Eto=i(L),Mg=n(L,"LI",{});var cLe=s(Mg);Rse=n(cLe,"STRONG",{});var Qst=s(Rse);Cto=r(Qst,"sew-d"),Qst.forEach(t),wto=r(cLe," \u2014 "),kP=n(cLe,"A",{href:!0});var Hst=s(kP);Ato=r(Hst,"SEWDConfig"),Hst.forEach(t),Lto=r(cLe," (SEW-D model)"),cLe.forEach(t),yto=i(L),Eg=n(L,"LI",{});var fLe=s(Eg);Pse=n(fLe,"STRONG",{});var Ust=s(Pse);xto=r(Ust,"speech-encoder-decoder"),Ust.forEach(t),$to=r(fLe," \u2014 "),SP=n(fLe,"A",{href:!0});var Jst=s(SP);kto=r(Jst,"SpeechEncoderDecoderConfig"),Jst.forEach(t),Sto=r(fLe," (Speech Encoder decoder model)"),fLe.forEach(t),Rto=i(L),Cg=n(L,"LI",{});var mLe=s(Cg);Bse=n(mLe,"STRONG",{});var Yst=s(Bse);Pto=r(Yst,"speech_to_text"),Yst.forEach(t),Bto=r(mLe," \u2014 "),RP=n(mLe,"A",{href:!0});var Kst=s(RP);Ito=r(Kst,"Speech2TextConfig"),Kst.forEach(t),Nto=r(mLe," (Speech2Text model)"),mLe.forEach(t),qto=i(L),wg=n(L,"LI",{});var gLe=s(wg);Ise=n(gLe,"STRONG",{});var Zst=s(Ise);jto=r(Zst,"speech_to_text_2"),Zst.forEach(t),Dto=r(gLe," \u2014 "),PP=n(gLe,"A",{href:!0});var elt=s(PP);Gto=r(elt,"Speech2Text2Config"),elt.forEach(t),Oto=r(gLe," (Speech2Text2 model)"),gLe.forEach(t),Vto=i(L),Ag=n(L,"LI",{});var hLe=s(Ag);Nse=n(hLe,"STRONG",{});var olt=s(Nse);Xto=r(olt,"splinter"),olt.forEach(t),zto=r(hLe," \u2014 "),BP=n(hLe,"A",{href:!0});var rlt=s(BP);Wto=r(rlt,"SplinterConfig"),rlt.forEach(t),Qto=r(hLe," (Splinter model)"),hLe.forEach(t),Hto=i(L),Lg=n(L,"LI",{});var pLe=s(Lg);qse=n(pLe,"STRONG",{});var tlt=s(qse);Uto=r(tlt,"squeezebert"),tlt.forEach(t),Jto=r(pLe," \u2014 "),IP=n(pLe,"A",{href:!0});var alt=s(IP);Yto=r(alt,"SqueezeBertConfig"),alt.forEach(t),Kto=r(pLe," (SqueezeBERT model)"),pLe.forEach(t),Zto=i(L),yg=n(L,"LI",{});var _Le=s(yg);jse=n(_Le,"STRONG",{});var nlt=s(jse);eao=r(nlt,"swin"),nlt.forEach(t),oao=r(_Le," \u2014 "),NP=n(_Le,"A",{href:!0});var slt=s(NP);rao=r(slt,"SwinConfig"),slt.forEach(t),tao=r(_Le," (Swin Transformer model)"),_Le.forEach(t),aao=i(L),xg=n(L,"LI",{});var uLe=s(xg);Dse=n(uLe,"STRONG",{});var llt=s(Dse);nao=r(llt,"t5"),llt.forEach(t),sao=r(uLe," \u2014 "),qP=n(uLe,"A",{href:!0});var ilt=s(qP);lao=r(ilt,"T5Config"),ilt.forEach(t),iao=r(uLe," (T5 model)"),uLe.forEach(t),dao=i(L),$g=n(L,"LI",{});var bLe=s($g);Gse=n(bLe,"STRONG",{});var dlt=s(Gse);cao=r(dlt,"tapas"),dlt.forEach(t),fao=r(bLe," \u2014 "),jP=n(bLe,"A",{href:!0});var clt=s(jP);mao=r(clt,"TapasConfig"),clt.forEach(t),gao=r(bLe," (TAPAS model)"),bLe.forEach(t),hao=i(L),kg=n(L,"LI",{});var vLe=s(kg);Ose=n(vLe,"STRONG",{});var flt=s(Ose);pao=r(flt,"trajectory_transformer"),flt.forEach(t),_ao=r(vLe," \u2014 "),DP=n(vLe,"A",{href:!0});var mlt=s(DP);uao=r(mlt,"TrajectoryTransformerConfig"),mlt.forEach(t),bao=r(vLe," (Trajectory Transformer model)"),vLe.forEach(t),vao=i(L),Sg=n(L,"LI",{});var FLe=s(Sg);Vse=n(FLe,"STRONG",{});var glt=s(Vse);Fao=r(glt,"transfo-xl"),glt.forEach(t),Tao=r(FLe," \u2014 "),GP=n(FLe,"A",{href:!0});var hlt=s(GP);Mao=r(hlt,"TransfoXLConfig"),hlt.forEach(t),Eao=r(FLe," (Transformer-XL model)"),FLe.forEach(t),Cao=i(L),Rg=n(L,"LI",{});var TLe=s(Rg);Xse=n(TLe,"STRONG",{});var plt=s(Xse);wao=r(plt,"trocr"),plt.forEach(t),Aao=r(TLe," \u2014 "),OP=n(TLe,"A",{href:!0});var _lt=s(OP);Lao=r(_lt,"TrOCRConfig"),_lt.forEach(t),yao=r(TLe," (TrOCR model)"),TLe.forEach(t),xao=i(L),Pg=n(L,"LI",{});var MLe=s(Pg);zse=n(MLe,"STRONG",{});var ult=s(zse);$ao=r(ult,"unispeech"),ult.forEach(t),kao=r(MLe," \u2014 "),VP=n(MLe,"A",{href:!0});var blt=s(VP);Sao=r(blt,"UniSpeechConfig"),blt.forEach(t),Rao=r(MLe," (UniSpeech model)"),MLe.forEach(t),Pao=i(L),Bg=n(L,"LI",{});var ELe=s(Bg);Wse=n(ELe,"STRONG",{});var vlt=s(Wse);Bao=r(vlt,"unispeech-sat"),vlt.forEach(t),Iao=r(ELe," \u2014 "),XP=n(ELe,"A",{href:!0});var Flt=s(XP);Nao=r(Flt,"UniSpeechSatConfig"),Flt.forEach(t),qao=r(ELe," (UniSpeechSat model)"),ELe.forEach(t),jao=i(L),Ig=n(L,"LI",{});var CLe=s(Ig);Qse=n(CLe,"STRONG",{});var Tlt=s(Qse);Dao=r(Tlt,"van"),Tlt.forEach(t),Gao=r(CLe," \u2014 "),zP=n(CLe,"A",{href:!0});var Mlt=s(zP);Oao=r(Mlt,"VanConfig"),Mlt.forEach(t),Vao=r(CLe," (VAN model)"),CLe.forEach(t),Xao=i(L),Ng=n(L,"LI",{});var wLe=s(Ng);Hse=n(wLe,"STRONG",{});var Elt=s(Hse);zao=r(Elt,"vilt"),Elt.forEach(t),Wao=r(wLe," \u2014 "),WP=n(wLe,"A",{href:!0});var Clt=s(WP);Qao=r(Clt,"ViltConfig"),Clt.forEach(t),Hao=r(wLe," (ViLT model)"),wLe.forEach(t),Uao=i(L),qg=n(L,"LI",{});var ALe=s(qg);Use=n(ALe,"STRONG",{});var wlt=s(Use);Jao=r(wlt,"vision-encoder-decoder"),wlt.forEach(t),Yao=r(ALe," \u2014 "),QP=n(ALe,"A",{href:!0});var Alt=s(QP);Kao=r(Alt,"VisionEncoderDecoderConfig"),Alt.forEach(t),Zao=r(ALe," (Vision Encoder decoder model)"),ALe.forEach(t),eno=i(L),jg=n(L,"LI",{});var LLe=s(jg);Jse=n(LLe,"STRONG",{});var Llt=s(Jse);ono=r(Llt,"vision-text-dual-encoder"),Llt.forEach(t),rno=r(LLe," \u2014 "),HP=n(LLe,"A",{href:!0});var ylt=s(HP);tno=r(ylt,"VisionTextDualEncoderConfig"),ylt.forEach(t),ano=r(LLe," (VisionTextDualEncoder model)"),LLe.forEach(t),nno=i(L),Dg=n(L,"LI",{});var yLe=s(Dg);Yse=n(yLe,"STRONG",{});var xlt=s(Yse);sno=r(xlt,"visual_bert"),xlt.forEach(t),lno=r(yLe," \u2014 "),UP=n(yLe,"A",{href:!0});var $lt=s(UP);ino=r($lt,"VisualBertConfig"),$lt.forEach(t),dno=r(yLe," (VisualBERT model)"),yLe.forEach(t),cno=i(L),Gg=n(L,"LI",{});var xLe=s(Gg);Kse=n(xLe,"STRONG",{});var klt=s(Kse);fno=r(klt,"vit"),klt.forEach(t),mno=r(xLe," \u2014 "),JP=n(xLe,"A",{href:!0});var Slt=s(JP);gno=r(Slt,"ViTConfig"),Slt.forEach(t),hno=r(xLe," (ViT model)"),xLe.forEach(t),pno=i(L),Og=n(L,"LI",{});var $Le=s(Og);Zse=n($Le,"STRONG",{});var Rlt=s(Zse);_no=r(Rlt,"vit_mae"),Rlt.forEach(t),uno=r($Le," \u2014 "),YP=n($Le,"A",{href:!0});var Plt=s(YP);bno=r(Plt,"ViTMAEConfig"),Plt.forEach(t),vno=r($Le," (ViTMAE model)"),$Le.forEach(t),Fno=i(L),Vg=n(L,"LI",{});var kLe=s(Vg);ele=n(kLe,"STRONG",{});var Blt=s(ele);Tno=r(Blt,"wav2vec2"),Blt.forEach(t),Mno=r(kLe," \u2014 "),KP=n(kLe,"A",{href:!0});var Ilt=s(KP);Eno=r(Ilt,"Wav2Vec2Config"),Ilt.forEach(t),Cno=r(kLe," (Wav2Vec2 model)"),kLe.forEach(t),wno=i(L),Xg=n(L,"LI",{});var SLe=s(Xg);ole=n(SLe,"STRONG",{});var Nlt=s(ole);Ano=r(Nlt,"wav2vec2-conformer"),Nlt.forEach(t),Lno=r(SLe," \u2014 "),ZP=n(SLe,"A",{href:!0});var qlt=s(ZP);yno=r(qlt,"Wav2Vec2ConformerConfig"),qlt.forEach(t),xno=r(SLe," (Wav2Vec2-Conformer model)"),SLe.forEach(t),$no=i(L),zg=n(L,"LI",{});var RLe=s(zg);rle=n(RLe,"STRONG",{});var jlt=s(rle);kno=r(jlt,"wavlm"),jlt.forEach(t),Sno=r(RLe," \u2014 "),eB=n(RLe,"A",{href:!0});var Dlt=s(eB);Rno=r(Dlt,"WavLMConfig"),Dlt.forEach(t),Pno=r(RLe," (WavLM model)"),RLe.forEach(t),Bno=i(L),Wg=n(L,"LI",{});var PLe=s(Wg);tle=n(PLe,"STRONG",{});var Glt=s(tle);Ino=r(Glt,"xglm"),Glt.forEach(t),Nno=r(PLe," \u2014 "),oB=n(PLe,"A",{href:!0});var Olt=s(oB);qno=r(Olt,"XGLMConfig"),Olt.forEach(t),jno=r(PLe," (XGLM model)"),PLe.forEach(t),Dno=i(L),Qg=n(L,"LI",{});var BLe=s(Qg);ale=n(BLe,"STRONG",{});var Vlt=s(ale);Gno=r(Vlt,"xlm"),Vlt.forEach(t),Ono=r(BLe," \u2014 "),rB=n(BLe,"A",{href:!0});var Xlt=s(rB);Vno=r(Xlt,"XLMConfig"),Xlt.forEach(t),Xno=r(BLe," (XLM model)"),BLe.forEach(t),zno=i(L),Hg=n(L,"LI",{});var ILe=s(Hg);nle=n(ILe,"STRONG",{});var zlt=s(nle);Wno=r(zlt,"xlm-prophetnet"),zlt.forEach(t),Qno=r(ILe," \u2014 "),tB=n(ILe,"A",{href:!0});var Wlt=s(tB);Hno=r(Wlt,"XLMProphetNetConfig"),Wlt.forEach(t),Uno=r(ILe," (XLM-ProphetNet model)"),ILe.forEach(t),Jno=i(L),Ug=n(L,"LI",{});var NLe=s(Ug);sle=n(NLe,"STRONG",{});var Qlt=s(sle);Yno=r(Qlt,"xlm-roberta"),Qlt.forEach(t),Kno=r(NLe," \u2014 "),aB=n(NLe,"A",{href:!0});var Hlt=s(aB);Zno=r(Hlt,"XLMRobertaConfig"),Hlt.forEach(t),eso=r(NLe," (XLM-RoBERTa model)"),NLe.forEach(t),oso=i(L),Jg=n(L,"LI",{});var qLe=s(Jg);lle=n(qLe,"STRONG",{});var Ult=s(lle);rso=r(Ult,"xlm-roberta-xl"),Ult.forEach(t),tso=r(qLe," \u2014 "),nB=n(qLe,"A",{href:!0});var Jlt=s(nB);aso=r(Jlt,"XLMRobertaXLConfig"),Jlt.forEach(t),nso=r(qLe," (XLM-RoBERTa-XL model)"),qLe.forEach(t),sso=i(L),Yg=n(L,"LI",{});var jLe=s(Yg);ile=n(jLe,"STRONG",{});var Ylt=s(ile);lso=r(Ylt,"xlnet"),Ylt.forEach(t),iso=r(jLe," \u2014 "),sB=n(jLe,"A",{href:!0});var Klt=s(sB);dso=r(Klt,"XLNetConfig"),Klt.forEach(t),cso=r(jLe," (XLNet model)"),jLe.forEach(t),fso=i(L),Kg=n(L,"LI",{});var DLe=s(Kg);dle=n(DLe,"STRONG",{});var Zlt=s(dle);mso=r(Zlt,"yolos"),Zlt.forEach(t),gso=r(DLe," \u2014 "),lB=n(DLe,"A",{href:!0});var eit=s(lB);hso=r(eit,"YolosConfig"),eit.forEach(t),pso=r(DLe," (YOLOS model)"),DLe.forEach(t),_so=i(L),Zg=n(L,"LI",{});var GLe=s(Zg);cle=n(GLe,"STRONG",{});var oit=s(cle);uso=r(oit,"yoso"),oit.forEach(t),bso=r(GLe," \u2014 "),iB=n(GLe,"A",{href:!0});var rit=s(iB);vso=r(rit,"YosoConfig"),rit.forEach(t),Fso=r(GLe," (YOSO model)"),GLe.forEach(t),L.forEach(t),Tso=i(st),T(eh.$$.fragment,st),st.forEach(t),Mso=i(nt),oh=n(nt,"DIV",{class:!0});var NWe=s(oh);T(v6.$$.fragment,NWe),Eso=i(NWe),fle=n(NWe,"P",{});var tit=s(fle);Cso=r(tit,"Register a new configuration for this class."),tit.forEach(t),NWe.forEach(t),nt.forEach(t),qXe=i(f),ji=n(f,"H2",{class:!0});var qWe=s(ji);rh=n(qWe,"A",{id:!0,class:!0,href:!0});var ait=s(rh);mle=n(ait,"SPAN",{});var nit=s(mle);T(F6.$$.fragment,nit),nit.forEach(t),ait.forEach(t),wso=i(qWe),gle=n(qWe,"SPAN",{});var sit=s(gle);Aso=r(sit,"AutoTokenizer"),sit.forEach(t),qWe.forEach(t),jXe=i(f),Lo=n(f,"DIV",{class:!0});var el=s(Lo);T(T6.$$.fragment,el),Lso=i(el),M6=n(el,"P",{});var jWe=s(M6);yso=r(jWe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),dB=n(jWe,"A",{href:!0});var lit=s(dB);xso=r(lit,"AutoTokenizer.from_pretrained()"),lit.forEach(t),$so=r(jWe," class method."),jWe.forEach(t),kso=i(el),E6=n(el,"P",{});var DWe=s(E6);Sso=r(DWe,"This class cannot be instantiated directly using "),hle=n(DWe,"CODE",{});var iit=s(hle);Rso=r(iit,"__init__()"),iit.forEach(t),Pso=r(DWe," (throws an error)."),DWe.forEach(t),Bso=i(el),yr=n(el,"DIV",{class:!0});var ol=s(yr);T(C6.$$.fragment,ol),Iso=i(ol),ple=n(ol,"P",{});var dit=s(ple);Nso=r(dit,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),dit.forEach(t),qso=i(ol),Pa=n(ol,"P",{});var hw=s(Pa);jso=r(hw,"The tokenizer class to instantiate is selected based on the "),_le=n(hw,"CODE",{});var cit=s(_le);Dso=r(cit,"model_type"),cit.forEach(t),Gso=r(hw,` property of the config object (either
passed as an argument or loaded from `),ule=n(hw,"CODE",{});var fit=s(ule);Oso=r(fit,"pretrained_model_name_or_path"),fit.forEach(t),Vso=r(hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ble=n(hw,"CODE",{});var mit=s(ble);Xso=r(mit,"pretrained_model_name_or_path"),mit.forEach(t),zso=r(hw,":"),hw.forEach(t),Wso=i(ol),k=n(ol,"UL",{});var S=s(k);jn=n(S,"LI",{});var $k=s(jn);vle=n($k,"STRONG",{});var git=s(vle);Qso=r(git,"albert"),git.forEach(t),Hso=r($k," \u2014 "),cB=n($k,"A",{href:!0});var hit=s(cB);Uso=r(hit,"AlbertTokenizer"),hit.forEach(t),Jso=r($k," or "),fB=n($k,"A",{href:!0});var pit=s(fB);Yso=r(pit,"AlbertTokenizerFast"),pit.forEach(t),Kso=r($k," (ALBERT model)"),$k.forEach(t),Zso=i(S),Dn=n(S,"LI",{});var kk=s(Dn);Fle=n(kk,"STRONG",{});var _it=s(Fle);elo=r(_it,"bart"),_it.forEach(t),olo=r(kk," \u2014 "),mB=n(kk,"A",{href:!0});var uit=s(mB);rlo=r(uit,"BartTokenizer"),uit.forEach(t),tlo=r(kk," or "),gB=n(kk,"A",{href:!0});var bit=s(gB);alo=r(bit,"BartTokenizerFast"),bit.forEach(t),nlo=r(kk," (BART model)"),kk.forEach(t),slo=i(S),Gn=n(S,"LI",{});var Sk=s(Gn);Tle=n(Sk,"STRONG",{});var vit=s(Tle);llo=r(vit,"barthez"),vit.forEach(t),ilo=r(Sk," \u2014 "),hB=n(Sk,"A",{href:!0});var Fit=s(hB);dlo=r(Fit,"BarthezTokenizer"),Fit.forEach(t),clo=r(Sk," or "),pB=n(Sk,"A",{href:!0});var Tit=s(pB);flo=r(Tit,"BarthezTokenizerFast"),Tit.forEach(t),mlo=r(Sk," (BARThez model)"),Sk.forEach(t),glo=i(S),th=n(S,"LI",{});var OLe=s(th);Mle=n(OLe,"STRONG",{});var Mit=s(Mle);hlo=r(Mit,"bartpho"),Mit.forEach(t),plo=r(OLe," \u2014 "),_B=n(OLe,"A",{href:!0});var Eit=s(_B);_lo=r(Eit,"BartphoTokenizer"),Eit.forEach(t),ulo=r(OLe," (BARTpho model)"),OLe.forEach(t),blo=i(S),On=n(S,"LI",{});var Rk=s(On);Ele=n(Rk,"STRONG",{});var Cit=s(Ele);vlo=r(Cit,"bert"),Cit.forEach(t),Flo=r(Rk," \u2014 "),uB=n(Rk,"A",{href:!0});var wit=s(uB);Tlo=r(wit,"BertTokenizer"),wit.forEach(t),Mlo=r(Rk," or "),bB=n(Rk,"A",{href:!0});var Ait=s(bB);Elo=r(Ait,"BertTokenizerFast"),Ait.forEach(t),Clo=r(Rk," (BERT model)"),Rk.forEach(t),wlo=i(S),ah=n(S,"LI",{});var VLe=s(ah);Cle=n(VLe,"STRONG",{});var Lit=s(Cle);Alo=r(Lit,"bert-generation"),Lit.forEach(t),Llo=r(VLe," \u2014 "),vB=n(VLe,"A",{href:!0});var yit=s(vB);ylo=r(yit,"BertGenerationTokenizer"),yit.forEach(t),xlo=r(VLe," (Bert Generation model)"),VLe.forEach(t),$lo=i(S),nh=n(S,"LI",{});var XLe=s(nh);wle=n(XLe,"STRONG",{});var xit=s(wle);klo=r(xit,"bert-japanese"),xit.forEach(t),Slo=r(XLe," \u2014 "),FB=n(XLe,"A",{href:!0});var $it=s(FB);Rlo=r($it,"BertJapaneseTokenizer"),$it.forEach(t),Plo=r(XLe," (BertJapanese model)"),XLe.forEach(t),Blo=i(S),sh=n(S,"LI",{});var zLe=s(sh);Ale=n(zLe,"STRONG",{});var kit=s(Ale);Ilo=r(kit,"bertweet"),kit.forEach(t),Nlo=r(zLe," \u2014 "),TB=n(zLe,"A",{href:!0});var Sit=s(TB);qlo=r(Sit,"BertweetTokenizer"),Sit.forEach(t),jlo=r(zLe," (BERTweet model)"),zLe.forEach(t),Dlo=i(S),Vn=n(S,"LI",{});var Pk=s(Vn);Lle=n(Pk,"STRONG",{});var Rit=s(Lle);Glo=r(Rit,"big_bird"),Rit.forEach(t),Olo=r(Pk," \u2014 "),MB=n(Pk,"A",{href:!0});var Pit=s(MB);Vlo=r(Pit,"BigBirdTokenizer"),Pit.forEach(t),Xlo=r(Pk," or "),EB=n(Pk,"A",{href:!0});var Bit=s(EB);zlo=r(Bit,"BigBirdTokenizerFast"),Bit.forEach(t),Wlo=r(Pk," (BigBird model)"),Pk.forEach(t),Qlo=i(S),Xn=n(S,"LI",{});var Bk=s(Xn);yle=n(Bk,"STRONG",{});var Iit=s(yle);Hlo=r(Iit,"bigbird_pegasus"),Iit.forEach(t),Ulo=r(Bk," \u2014 "),CB=n(Bk,"A",{href:!0});var Nit=s(CB);Jlo=r(Nit,"PegasusTokenizer"),Nit.forEach(t),Ylo=r(Bk," or "),wB=n(Bk,"A",{href:!0});var qit=s(wB);Klo=r(qit,"PegasusTokenizerFast"),qit.forEach(t),Zlo=r(Bk," (BigBird-Pegasus model)"),Bk.forEach(t),eio=i(S),zn=n(S,"LI",{});var Ik=s(zn);xle=n(Ik,"STRONG",{});var jit=s(xle);oio=r(jit,"blenderbot"),jit.forEach(t),rio=r(Ik," \u2014 "),AB=n(Ik,"A",{href:!0});var Dit=s(AB);tio=r(Dit,"BlenderbotTokenizer"),Dit.forEach(t),aio=r(Ik," or "),LB=n(Ik,"A",{href:!0});var Git=s(LB);nio=r(Git,"BlenderbotTokenizerFast"),Git.forEach(t),sio=r(Ik," (Blenderbot model)"),Ik.forEach(t),lio=i(S),lh=n(S,"LI",{});var WLe=s(lh);$le=n(WLe,"STRONG",{});var Oit=s($le);iio=r(Oit,"blenderbot-small"),Oit.forEach(t),dio=r(WLe," \u2014 "),yB=n(WLe,"A",{href:!0});var Vit=s(yB);cio=r(Vit,"BlenderbotSmallTokenizer"),Vit.forEach(t),fio=r(WLe," (BlenderbotSmall model)"),WLe.forEach(t),mio=i(S),ih=n(S,"LI",{});var QLe=s(ih);kle=n(QLe,"STRONG",{});var Xit=s(kle);gio=r(Xit,"bloom"),Xit.forEach(t),hio=r(QLe," \u2014 "),xB=n(QLe,"A",{href:!0});var zit=s(xB);pio=r(zit,"BloomTokenizerFast"),zit.forEach(t),_io=r(QLe," (BLOOM model)"),QLe.forEach(t),uio=i(S),dh=n(S,"LI",{});var HLe=s(dh);Sle=n(HLe,"STRONG",{});var Wit=s(Sle);bio=r(Wit,"byt5"),Wit.forEach(t),vio=r(HLe," \u2014 "),$B=n(HLe,"A",{href:!0});var Qit=s($B);Fio=r(Qit,"ByT5Tokenizer"),Qit.forEach(t),Tio=r(HLe," (ByT5 model)"),HLe.forEach(t),Mio=i(S),Wn=n(S,"LI",{});var Nk=s(Wn);Rle=n(Nk,"STRONG",{});var Hit=s(Rle);Eio=r(Hit,"camembert"),Hit.forEach(t),Cio=r(Nk," \u2014 "),kB=n(Nk,"A",{href:!0});var Uit=s(kB);wio=r(Uit,"CamembertTokenizer"),Uit.forEach(t),Aio=r(Nk," or "),SB=n(Nk,"A",{href:!0});var Jit=s(SB);Lio=r(Jit,"CamembertTokenizerFast"),Jit.forEach(t),yio=r(Nk," (CamemBERT model)"),Nk.forEach(t),xio=i(S),ch=n(S,"LI",{});var ULe=s(ch);Ple=n(ULe,"STRONG",{});var Yit=s(Ple);$io=r(Yit,"canine"),Yit.forEach(t),kio=r(ULe," \u2014 "),RB=n(ULe,"A",{href:!0});var Kit=s(RB);Sio=r(Kit,"CanineTokenizer"),Kit.forEach(t),Rio=r(ULe," (CANINE model)"),ULe.forEach(t),Pio=i(S),Qn=n(S,"LI",{});var qk=s(Qn);Ble=n(qk,"STRONG",{});var Zit=s(Ble);Bio=r(Zit,"clip"),Zit.forEach(t),Iio=r(qk," \u2014 "),PB=n(qk,"A",{href:!0});var edt=s(PB);Nio=r(edt,"CLIPTokenizer"),edt.forEach(t),qio=r(qk," or "),BB=n(qk,"A",{href:!0});var odt=s(BB);jio=r(odt,"CLIPTokenizerFast"),odt.forEach(t),Dio=r(qk," (CLIP model)"),qk.forEach(t),Gio=i(S),Hn=n(S,"LI",{});var jk=s(Hn);Ile=n(jk,"STRONG",{});var rdt=s(Ile);Oio=r(rdt,"codegen"),rdt.forEach(t),Vio=r(jk," \u2014 "),IB=n(jk,"A",{href:!0});var tdt=s(IB);Xio=r(tdt,"CodeGenTokenizer"),tdt.forEach(t),zio=r(jk," or "),NB=n(jk,"A",{href:!0});var adt=s(NB);Wio=r(adt,"CodeGenTokenizerFast"),adt.forEach(t),Qio=r(jk," (CodeGen model)"),jk.forEach(t),Hio=i(S),Un=n(S,"LI",{});var Dk=s(Un);Nle=n(Dk,"STRONG",{});var ndt=s(Nle);Uio=r(ndt,"convbert"),ndt.forEach(t),Jio=r(Dk," \u2014 "),qB=n(Dk,"A",{href:!0});var sdt=s(qB);Yio=r(sdt,"ConvBertTokenizer"),sdt.forEach(t),Kio=r(Dk," or "),jB=n(Dk,"A",{href:!0});var ldt=s(jB);Zio=r(ldt,"ConvBertTokenizerFast"),ldt.forEach(t),edo=r(Dk," (ConvBERT model)"),Dk.forEach(t),odo=i(S),Jn=n(S,"LI",{});var Gk=s(Jn);qle=n(Gk,"STRONG",{});var idt=s(qle);rdo=r(idt,"cpm"),idt.forEach(t),tdo=r(Gk," \u2014 "),DB=n(Gk,"A",{href:!0});var ddt=s(DB);ado=r(ddt,"CpmTokenizer"),ddt.forEach(t),ndo=r(Gk," or "),GB=n(Gk,"A",{href:!0});var cdt=s(GB);sdo=r(cdt,"CpmTokenizerFast"),cdt.forEach(t),ldo=r(Gk," (CPM model)"),Gk.forEach(t),ido=i(S),fh=n(S,"LI",{});var JLe=s(fh);jle=n(JLe,"STRONG",{});var fdt=s(jle);ddo=r(fdt,"ctrl"),fdt.forEach(t),cdo=r(JLe," \u2014 "),OB=n(JLe,"A",{href:!0});var mdt=s(OB);fdo=r(mdt,"CTRLTokenizer"),mdt.forEach(t),mdo=r(JLe," (CTRL model)"),JLe.forEach(t),gdo=i(S),Yn=n(S,"LI",{});var Ok=s(Yn);Dle=n(Ok,"STRONG",{});var gdt=s(Dle);hdo=r(gdt,"data2vec-text"),gdt.forEach(t),pdo=r(Ok," \u2014 "),VB=n(Ok,"A",{href:!0});var hdt=s(VB);_do=r(hdt,"RobertaTokenizer"),hdt.forEach(t),udo=r(Ok," or "),XB=n(Ok,"A",{href:!0});var pdt=s(XB);bdo=r(pdt,"RobertaTokenizerFast"),pdt.forEach(t),vdo=r(Ok," (Data2VecText model)"),Ok.forEach(t),Fdo=i(S),Kn=n(S,"LI",{});var Vk=s(Kn);Gle=n(Vk,"STRONG",{});var _dt=s(Gle);Tdo=r(_dt,"deberta"),_dt.forEach(t),Mdo=r(Vk," \u2014 "),zB=n(Vk,"A",{href:!0});var udt=s(zB);Edo=r(udt,"DebertaTokenizer"),udt.forEach(t),Cdo=r(Vk," or "),WB=n(Vk,"A",{href:!0});var bdt=s(WB);wdo=r(bdt,"DebertaTokenizerFast"),bdt.forEach(t),Ado=r(Vk," (DeBERTa model)"),Vk.forEach(t),Ldo=i(S),Zn=n(S,"LI",{});var Xk=s(Zn);Ole=n(Xk,"STRONG",{});var vdt=s(Ole);ydo=r(vdt,"deberta-v2"),vdt.forEach(t),xdo=r(Xk," \u2014 "),QB=n(Xk,"A",{href:!0});var Fdt=s(QB);$do=r(Fdt,"DebertaV2Tokenizer"),Fdt.forEach(t),kdo=r(Xk," or "),HB=n(Xk,"A",{href:!0});var Tdt=s(HB);Sdo=r(Tdt,"DebertaV2TokenizerFast"),Tdt.forEach(t),Rdo=r(Xk," (DeBERTa-v2 model)"),Xk.forEach(t),Pdo=i(S),es=n(S,"LI",{});var zk=s(es);Vle=n(zk,"STRONG",{});var Mdt=s(Vle);Bdo=r(Mdt,"distilbert"),Mdt.forEach(t),Ido=r(zk," \u2014 "),UB=n(zk,"A",{href:!0});var Edt=s(UB);Ndo=r(Edt,"DistilBertTokenizer"),Edt.forEach(t),qdo=r(zk," or "),JB=n(zk,"A",{href:!0});var Cdt=s(JB);jdo=r(Cdt,"DistilBertTokenizerFast"),Cdt.forEach(t),Ddo=r(zk," (DistilBERT model)"),zk.forEach(t),Gdo=i(S),os=n(S,"LI",{});var Wk=s(os);Xle=n(Wk,"STRONG",{});var wdt=s(Xle);Odo=r(wdt,"dpr"),wdt.forEach(t),Vdo=r(Wk," \u2014 "),YB=n(Wk,"A",{href:!0});var Adt=s(YB);Xdo=r(Adt,"DPRQuestionEncoderTokenizer"),Adt.forEach(t),zdo=r(Wk," or "),KB=n(Wk,"A",{href:!0});var Ldt=s(KB);Wdo=r(Ldt,"DPRQuestionEncoderTokenizerFast"),Ldt.forEach(t),Qdo=r(Wk," (DPR model)"),Wk.forEach(t),Hdo=i(S),rs=n(S,"LI",{});var Qk=s(rs);zle=n(Qk,"STRONG",{});var ydt=s(zle);Udo=r(ydt,"electra"),ydt.forEach(t),Jdo=r(Qk," \u2014 "),ZB=n(Qk,"A",{href:!0});var xdt=s(ZB);Ydo=r(xdt,"ElectraTokenizer"),xdt.forEach(t),Kdo=r(Qk," or "),eI=n(Qk,"A",{href:!0});var $dt=s(eI);Zdo=r($dt,"ElectraTokenizerFast"),$dt.forEach(t),eco=r(Qk," (ELECTRA model)"),Qk.forEach(t),oco=i(S),mh=n(S,"LI",{});var YLe=s(mh);Wle=n(YLe,"STRONG",{});var kdt=s(Wle);rco=r(kdt,"flaubert"),kdt.forEach(t),tco=r(YLe," \u2014 "),oI=n(YLe,"A",{href:!0});var Sdt=s(oI);aco=r(Sdt,"FlaubertTokenizer"),Sdt.forEach(t),nco=r(YLe," (FlauBERT model)"),YLe.forEach(t),sco=i(S),ts=n(S,"LI",{});var Hk=s(ts);Qle=n(Hk,"STRONG",{});var Rdt=s(Qle);lco=r(Rdt,"fnet"),Rdt.forEach(t),ico=r(Hk," \u2014 "),rI=n(Hk,"A",{href:!0});var Pdt=s(rI);dco=r(Pdt,"FNetTokenizer"),Pdt.forEach(t),cco=r(Hk," or "),tI=n(Hk,"A",{href:!0});var Bdt=s(tI);fco=r(Bdt,"FNetTokenizerFast"),Bdt.forEach(t),mco=r(Hk," (FNet model)"),Hk.forEach(t),gco=i(S),gh=n(S,"LI",{});var KLe=s(gh);Hle=n(KLe,"STRONG",{});var Idt=s(Hle);hco=r(Idt,"fsmt"),Idt.forEach(t),pco=r(KLe," \u2014 "),aI=n(KLe,"A",{href:!0});var Ndt=s(aI);_co=r(Ndt,"FSMTTokenizer"),Ndt.forEach(t),uco=r(KLe," (FairSeq Machine-Translation model)"),KLe.forEach(t),bco=i(S),as=n(S,"LI",{});var Uk=s(as);Ule=n(Uk,"STRONG",{});var qdt=s(Ule);vco=r(qdt,"funnel"),qdt.forEach(t),Fco=r(Uk," \u2014 "),nI=n(Uk,"A",{href:!0});var jdt=s(nI);Tco=r(jdt,"FunnelTokenizer"),jdt.forEach(t),Mco=r(Uk," or "),sI=n(Uk,"A",{href:!0});var Ddt=s(sI);Eco=r(Ddt,"FunnelTokenizerFast"),Ddt.forEach(t),Cco=r(Uk," (Funnel Transformer model)"),Uk.forEach(t),wco=i(S),ns=n(S,"LI",{});var Jk=s(ns);Jle=n(Jk,"STRONG",{});var Gdt=s(Jle);Aco=r(Gdt,"gpt2"),Gdt.forEach(t),Lco=r(Jk," \u2014 "),lI=n(Jk,"A",{href:!0});var Odt=s(lI);yco=r(Odt,"GPT2Tokenizer"),Odt.forEach(t),xco=r(Jk," or "),iI=n(Jk,"A",{href:!0});var Vdt=s(iI);$co=r(Vdt,"GPT2TokenizerFast"),Vdt.forEach(t),kco=r(Jk," (OpenAI GPT-2 model)"),Jk.forEach(t),Sco=i(S),ss=n(S,"LI",{});var Yk=s(ss);Yle=n(Yk,"STRONG",{});var Xdt=s(Yle);Rco=r(Xdt,"gpt_neo"),Xdt.forEach(t),Pco=r(Yk," \u2014 "),dI=n(Yk,"A",{href:!0});var zdt=s(dI);Bco=r(zdt,"GPT2Tokenizer"),zdt.forEach(t),Ico=r(Yk," or "),cI=n(Yk,"A",{href:!0});var Wdt=s(cI);Nco=r(Wdt,"GPT2TokenizerFast"),Wdt.forEach(t),qco=r(Yk," (GPT Neo model)"),Yk.forEach(t),jco=i(S),hh=n(S,"LI",{});var ZLe=s(hh);Kle=n(ZLe,"STRONG",{});var Qdt=s(Kle);Dco=r(Qdt,"gpt_neox"),Qdt.forEach(t),Gco=r(ZLe," \u2014 "),fI=n(ZLe,"A",{href:!0});var Hdt=s(fI);Oco=r(Hdt,"GPTNeoXTokenizerFast"),Hdt.forEach(t),Vco=r(ZLe," (GPT NeoX model)"),ZLe.forEach(t),Xco=i(S),ls=n(S,"LI",{});var Kk=s(ls);Zle=n(Kk,"STRONG",{});var Udt=s(Zle);zco=r(Udt,"gptj"),Udt.forEach(t),Wco=r(Kk," \u2014 "),mI=n(Kk,"A",{href:!0});var Jdt=s(mI);Qco=r(Jdt,"GPT2Tokenizer"),Jdt.forEach(t),Hco=r(Kk," or "),gI=n(Kk,"A",{href:!0});var Ydt=s(gI);Uco=r(Ydt,"GPT2TokenizerFast"),Ydt.forEach(t),Jco=r(Kk," (GPT-J model)"),Kk.forEach(t),Yco=i(S),is=n(S,"LI",{});var Zk=s(is);eie=n(Zk,"STRONG",{});var Kdt=s(eie);Kco=r(Kdt,"groupvit"),Kdt.forEach(t),Zco=r(Zk," \u2014 "),hI=n(Zk,"A",{href:!0});var Zdt=s(hI);efo=r(Zdt,"CLIPTokenizer"),Zdt.forEach(t),ofo=r(Zk," or "),pI=n(Zk,"A",{href:!0});var ect=s(pI);rfo=r(ect,"CLIPTokenizerFast"),ect.forEach(t),tfo=r(Zk," (GroupViT model)"),Zk.forEach(t),afo=i(S),ds=n(S,"LI",{});var eS=s(ds);oie=n(eS,"STRONG",{});var oct=s(oie);nfo=r(oct,"herbert"),oct.forEach(t),sfo=r(eS," \u2014 "),_I=n(eS,"A",{href:!0});var rct=s(_I);lfo=r(rct,"HerbertTokenizer"),rct.forEach(t),ifo=r(eS," or "),uI=n(eS,"A",{href:!0});var tct=s(uI);dfo=r(tct,"HerbertTokenizerFast"),tct.forEach(t),cfo=r(eS," (HerBERT model)"),eS.forEach(t),ffo=i(S),ph=n(S,"LI",{});var eye=s(ph);rie=n(eye,"STRONG",{});var act=s(rie);mfo=r(act,"hubert"),act.forEach(t),gfo=r(eye," \u2014 "),bI=n(eye,"A",{href:!0});var nct=s(bI);hfo=r(nct,"Wav2Vec2CTCTokenizer"),nct.forEach(t),pfo=r(eye," (Hubert model)"),eye.forEach(t),_fo=i(S),cs=n(S,"LI",{});var oS=s(cs);tie=n(oS,"STRONG",{});var sct=s(tie);ufo=r(sct,"ibert"),sct.forEach(t),bfo=r(oS," \u2014 "),vI=n(oS,"A",{href:!0});var lct=s(vI);vfo=r(lct,"RobertaTokenizer"),lct.forEach(t),Ffo=r(oS," or "),FI=n(oS,"A",{href:!0});var ict=s(FI);Tfo=r(ict,"RobertaTokenizerFast"),ict.forEach(t),Mfo=r(oS," (I-BERT model)"),oS.forEach(t),Efo=i(S),fs=n(S,"LI",{});var rS=s(fs);aie=n(rS,"STRONG",{});var dct=s(aie);Cfo=r(dct,"layoutlm"),dct.forEach(t),wfo=r(rS," \u2014 "),TI=n(rS,"A",{href:!0});var cct=s(TI);Afo=r(cct,"LayoutLMTokenizer"),cct.forEach(t),Lfo=r(rS," or "),MI=n(rS,"A",{href:!0});var fct=s(MI);yfo=r(fct,"LayoutLMTokenizerFast"),fct.forEach(t),xfo=r(rS," (LayoutLM model)"),rS.forEach(t),$fo=i(S),ms=n(S,"LI",{});var tS=s(ms);nie=n(tS,"STRONG",{});var mct=s(nie);kfo=r(mct,"layoutlmv2"),mct.forEach(t),Sfo=r(tS," \u2014 "),EI=n(tS,"A",{href:!0});var gct=s(EI);Rfo=r(gct,"LayoutLMv2Tokenizer"),gct.forEach(t),Pfo=r(tS," or "),CI=n(tS,"A",{href:!0});var hct=s(CI);Bfo=r(hct,"LayoutLMv2TokenizerFast"),hct.forEach(t),Ifo=r(tS," (LayoutLMv2 model)"),tS.forEach(t),Nfo=i(S),gs=n(S,"LI",{});var aS=s(gs);sie=n(aS,"STRONG",{});var pct=s(sie);qfo=r(pct,"layoutlmv3"),pct.forEach(t),jfo=r(aS," \u2014 "),wI=n(aS,"A",{href:!0});var _ct=s(wI);Dfo=r(_ct,"LayoutLMv3Tokenizer"),_ct.forEach(t),Gfo=r(aS," or "),AI=n(aS,"A",{href:!0});var uct=s(AI);Ofo=r(uct,"LayoutLMv3TokenizerFast"),uct.forEach(t),Vfo=r(aS," (LayoutLMv3 model)"),aS.forEach(t),Xfo=i(S),hs=n(S,"LI",{});var nS=s(hs);lie=n(nS,"STRONG",{});var bct=s(lie);zfo=r(bct,"layoutxlm"),bct.forEach(t),Wfo=r(nS," \u2014 "),LI=n(nS,"A",{href:!0});var vct=s(LI);Qfo=r(vct,"LayoutXLMTokenizer"),vct.forEach(t),Hfo=r(nS," or "),yI=n(nS,"A",{href:!0});var Fct=s(yI);Ufo=r(Fct,"LayoutXLMTokenizerFast"),Fct.forEach(t),Jfo=r(nS," (LayoutXLM model)"),nS.forEach(t),Yfo=i(S),ps=n(S,"LI",{});var sS=s(ps);iie=n(sS,"STRONG",{});var Tct=s(iie);Kfo=r(Tct,"led"),Tct.forEach(t),Zfo=r(sS," \u2014 "),xI=n(sS,"A",{href:!0});var Mct=s(xI);emo=r(Mct,"LEDTokenizer"),Mct.forEach(t),omo=r(sS," or "),$I=n(sS,"A",{href:!0});var Ect=s($I);rmo=r(Ect,"LEDTokenizerFast"),Ect.forEach(t),tmo=r(sS," (LED model)"),sS.forEach(t),amo=i(S),_s=n(S,"LI",{});var lS=s(_s);die=n(lS,"STRONG",{});var Cct=s(die);nmo=r(Cct,"longformer"),Cct.forEach(t),smo=r(lS," \u2014 "),kI=n(lS,"A",{href:!0});var wct=s(kI);lmo=r(wct,"LongformerTokenizer"),wct.forEach(t),imo=r(lS," or "),SI=n(lS,"A",{href:!0});var Act=s(SI);dmo=r(Act,"LongformerTokenizerFast"),Act.forEach(t),cmo=r(lS," (Longformer model)"),lS.forEach(t),fmo=i(S),us=n(S,"LI",{});var iS=s(us);cie=n(iS,"STRONG",{});var Lct=s(cie);mmo=r(Lct,"longt5"),Lct.forEach(t),gmo=r(iS," \u2014 "),RI=n(iS,"A",{href:!0});var yct=s(RI);hmo=r(yct,"T5Tokenizer"),yct.forEach(t),pmo=r(iS," or "),PI=n(iS,"A",{href:!0});var xct=s(PI);_mo=r(xct,"T5TokenizerFast"),xct.forEach(t),umo=r(iS," (LongT5 model)"),iS.forEach(t),bmo=i(S),_h=n(S,"LI",{});var oye=s(_h);fie=n(oye,"STRONG",{});var $ct=s(fie);vmo=r($ct,"luke"),$ct.forEach(t),Fmo=r(oye," \u2014 "),BI=n(oye,"A",{href:!0});var kct=s(BI);Tmo=r(kct,"LukeTokenizer"),kct.forEach(t),Mmo=r(oye," (LUKE model)"),oye.forEach(t),Emo=i(S),bs=n(S,"LI",{});var dS=s(bs);mie=n(dS,"STRONG",{});var Sct=s(mie);Cmo=r(Sct,"lxmert"),Sct.forEach(t),wmo=r(dS," \u2014 "),II=n(dS,"A",{href:!0});var Rct=s(II);Amo=r(Rct,"LxmertTokenizer"),Rct.forEach(t),Lmo=r(dS," or "),NI=n(dS,"A",{href:!0});var Pct=s(NI);ymo=r(Pct,"LxmertTokenizerFast"),Pct.forEach(t),xmo=r(dS," (LXMERT model)"),dS.forEach(t),$mo=i(S),uh=n(S,"LI",{});var rye=s(uh);gie=n(rye,"STRONG",{});var Bct=s(gie);kmo=r(Bct,"m2m_100"),Bct.forEach(t),Smo=r(rye," \u2014 "),qI=n(rye,"A",{href:!0});var Ict=s(qI);Rmo=r(Ict,"M2M100Tokenizer"),Ict.forEach(t),Pmo=r(rye," (M2M100 model)"),rye.forEach(t),Bmo=i(S),bh=n(S,"LI",{});var tye=s(bh);hie=n(tye,"STRONG",{});var Nct=s(hie);Imo=r(Nct,"marian"),Nct.forEach(t),Nmo=r(tye," \u2014 "),jI=n(tye,"A",{href:!0});var qct=s(jI);qmo=r(qct,"MarianTokenizer"),qct.forEach(t),jmo=r(tye," (Marian model)"),tye.forEach(t),Dmo=i(S),vs=n(S,"LI",{});var cS=s(vs);pie=n(cS,"STRONG",{});var jct=s(pie);Gmo=r(jct,"mbart"),jct.forEach(t),Omo=r(cS," \u2014 "),DI=n(cS,"A",{href:!0});var Dct=s(DI);Vmo=r(Dct,"MBartTokenizer"),Dct.forEach(t),Xmo=r(cS," or "),GI=n(cS,"A",{href:!0});var Gct=s(GI);zmo=r(Gct,"MBartTokenizerFast"),Gct.forEach(t),Wmo=r(cS," (mBART model)"),cS.forEach(t),Qmo=i(S),Fs=n(S,"LI",{});var fS=s(Fs);_ie=n(fS,"STRONG",{});var Oct=s(_ie);Hmo=r(Oct,"mbart50"),Oct.forEach(t),Umo=r(fS," \u2014 "),OI=n(fS,"A",{href:!0});var Vct=s(OI);Jmo=r(Vct,"MBart50Tokenizer"),Vct.forEach(t),Ymo=r(fS," or "),VI=n(fS,"A",{href:!0});var Xct=s(VI);Kmo=r(Xct,"MBart50TokenizerFast"),Xct.forEach(t),Zmo=r(fS," (mBART-50 model)"),fS.forEach(t),ego=i(S),Ts=n(S,"LI",{});var mS=s(Ts);uie=n(mS,"STRONG",{});var zct=s(uie);ogo=r(zct,"megatron-bert"),zct.forEach(t),rgo=r(mS," \u2014 "),XI=n(mS,"A",{href:!0});var Wct=s(XI);tgo=r(Wct,"BertTokenizer"),Wct.forEach(t),ago=r(mS," or "),zI=n(mS,"A",{href:!0});var Qct=s(zI);ngo=r(Qct,"BertTokenizerFast"),Qct.forEach(t),sgo=r(mS," (Megatron-BERT model)"),mS.forEach(t),lgo=i(S),vh=n(S,"LI",{});var aye=s(vh);bie=n(aye,"STRONG",{});var Hct=s(bie);igo=r(Hct,"mluke"),Hct.forEach(t),dgo=r(aye," \u2014 "),WI=n(aye,"A",{href:!0});var Uct=s(WI);cgo=r(Uct,"MLukeTokenizer"),Uct.forEach(t),fgo=r(aye," (mLUKE model)"),aye.forEach(t),mgo=i(S),Ms=n(S,"LI",{});var gS=s(Ms);vie=n(gS,"STRONG",{});var Jct=s(vie);ggo=r(Jct,"mobilebert"),Jct.forEach(t),hgo=r(gS," \u2014 "),QI=n(gS,"A",{href:!0});var Yct=s(QI);pgo=r(Yct,"MobileBertTokenizer"),Yct.forEach(t),_go=r(gS," or "),HI=n(gS,"A",{href:!0});var Kct=s(HI);ugo=r(Kct,"MobileBertTokenizerFast"),Kct.forEach(t),bgo=r(gS," (MobileBERT model)"),gS.forEach(t),vgo=i(S),Es=n(S,"LI",{});var hS=s(Es);Fie=n(hS,"STRONG",{});var Zct=s(Fie);Fgo=r(Zct,"mpnet"),Zct.forEach(t),Tgo=r(hS," \u2014 "),UI=n(hS,"A",{href:!0});var eft=s(UI);Mgo=r(eft,"MPNetTokenizer"),eft.forEach(t),Ego=r(hS," or "),JI=n(hS,"A",{href:!0});var oft=s(JI);Cgo=r(oft,"MPNetTokenizerFast"),oft.forEach(t),wgo=r(hS," (MPNet model)"),hS.forEach(t),Ago=i(S),Cs=n(S,"LI",{});var pS=s(Cs);Tie=n(pS,"STRONG",{});var rft=s(Tie);Lgo=r(rft,"mt5"),rft.forEach(t),ygo=r(pS," \u2014 "),YI=n(pS,"A",{href:!0});var tft=s(YI);xgo=r(tft,"MT5Tokenizer"),tft.forEach(t),$go=r(pS," or "),KI=n(pS,"A",{href:!0});var aft=s(KI);kgo=r(aft,"MT5TokenizerFast"),aft.forEach(t),Sgo=r(pS," (MT5 model)"),pS.forEach(t),Rgo=i(S),ws=n(S,"LI",{});var _S=s(ws);Mie=n(_S,"STRONG",{});var nft=s(Mie);Pgo=r(nft,"mvp"),nft.forEach(t),Bgo=r(_S," \u2014 "),ZI=n(_S,"A",{href:!0});var sft=s(ZI);Igo=r(sft,"MvpTokenizer"),sft.forEach(t),Ngo=r(_S," or "),eN=n(_S,"A",{href:!0});var lft=s(eN);qgo=r(lft,"MvpTokenizerFast"),lft.forEach(t),jgo=r(_S," (MVP model)"),_S.forEach(t),Dgo=i(S),As=n(S,"LI",{});var uS=s(As);Eie=n(uS,"STRONG",{});var ift=s(Eie);Ggo=r(ift,"nezha"),ift.forEach(t),Ogo=r(uS," \u2014 "),oN=n(uS,"A",{href:!0});var dft=s(oN);Vgo=r(dft,"BertTokenizer"),dft.forEach(t),Xgo=r(uS," or "),rN=n(uS,"A",{href:!0});var cft=s(rN);zgo=r(cft,"BertTokenizerFast"),cft.forEach(t),Wgo=r(uS," (Nezha model)"),uS.forEach(t),Qgo=i(S),Ls=n(S,"LI",{});var bS=s(Ls);Cie=n(bS,"STRONG",{});var fft=s(Cie);Hgo=r(fft,"nllb"),fft.forEach(t),Ugo=r(bS," \u2014 "),tN=n(bS,"A",{href:!0});var mft=s(tN);Jgo=r(mft,"NllbTokenizer"),mft.forEach(t),Ygo=r(bS," or "),aN=n(bS,"A",{href:!0});var gft=s(aN);Kgo=r(gft,"NllbTokenizerFast"),gft.forEach(t),Zgo=r(bS," (NLLB model)"),bS.forEach(t),eho=i(S),ys=n(S,"LI",{});var vS=s(ys);wie=n(vS,"STRONG",{});var hft=s(wie);oho=r(hft,"nystromformer"),hft.forEach(t),rho=r(vS," \u2014 "),nN=n(vS,"A",{href:!0});var pft=s(nN);tho=r(pft,"AlbertTokenizer"),pft.forEach(t),aho=r(vS," or "),sN=n(vS,"A",{href:!0});var _ft=s(sN);nho=r(_ft,"AlbertTokenizerFast"),_ft.forEach(t),sho=r(vS," (Nystr\xF6mformer model)"),vS.forEach(t),lho=i(S),xs=n(S,"LI",{});var FS=s(xs);Aie=n(FS,"STRONG",{});var uft=s(Aie);iho=r(uft,"openai-gpt"),uft.forEach(t),dho=r(FS," \u2014 "),lN=n(FS,"A",{href:!0});var bft=s(lN);cho=r(bft,"OpenAIGPTTokenizer"),bft.forEach(t),fho=r(FS," or "),iN=n(FS,"A",{href:!0});var vft=s(iN);mho=r(vft,"OpenAIGPTTokenizerFast"),vft.forEach(t),gho=r(FS," (OpenAI GPT model)"),FS.forEach(t),hho=i(S),Fh=n(S,"LI",{});var nye=s(Fh);Lie=n(nye,"STRONG",{});var Fft=s(Lie);pho=r(Fft,"opt"),Fft.forEach(t),_ho=r(nye," \u2014 "),dN=n(nye,"A",{href:!0});var Tft=s(dN);uho=r(Tft,"GPT2Tokenizer"),Tft.forEach(t),bho=r(nye," (OPT model)"),nye.forEach(t),vho=i(S),$s=n(S,"LI",{});var TS=s($s);yie=n(TS,"STRONG",{});var Mft=s(yie);Fho=r(Mft,"owlvit"),Mft.forEach(t),Tho=r(TS," \u2014 "),cN=n(TS,"A",{href:!0});var Eft=s(cN);Mho=r(Eft,"CLIPTokenizer"),Eft.forEach(t),Eho=r(TS," or "),fN=n(TS,"A",{href:!0});var Cft=s(fN);Cho=r(Cft,"CLIPTokenizerFast"),Cft.forEach(t),who=r(TS," (OWL-ViT model)"),TS.forEach(t),Aho=i(S),ks=n(S,"LI",{});var MS=s(ks);xie=n(MS,"STRONG",{});var wft=s(xie);Lho=r(wft,"pegasus"),wft.forEach(t),yho=r(MS," \u2014 "),mN=n(MS,"A",{href:!0});var Aft=s(mN);xho=r(Aft,"PegasusTokenizer"),Aft.forEach(t),$ho=r(MS," or "),gN=n(MS,"A",{href:!0});var Lft=s(gN);kho=r(Lft,"PegasusTokenizerFast"),Lft.forEach(t),Sho=r(MS," (Pegasus model)"),MS.forEach(t),Rho=i(S),Th=n(S,"LI",{});var sye=s(Th);$ie=n(sye,"STRONG",{});var yft=s($ie);Pho=r(yft,"perceiver"),yft.forEach(t),Bho=r(sye," \u2014 "),hN=n(sye,"A",{href:!0});var xft=s(hN);Iho=r(xft,"PerceiverTokenizer"),xft.forEach(t),Nho=r(sye," (Perceiver model)"),sye.forEach(t),qho=i(S),Mh=n(S,"LI",{});var lye=s(Mh);kie=n(lye,"STRONG",{});var $ft=s(kie);jho=r($ft,"phobert"),$ft.forEach(t),Dho=r(lye," \u2014 "),pN=n(lye,"A",{href:!0});var kft=s(pN);Gho=r(kft,"PhobertTokenizer"),kft.forEach(t),Oho=r(lye," (PhoBERT model)"),lye.forEach(t),Vho=i(S),Eh=n(S,"LI",{});var iye=s(Eh);Sie=n(iye,"STRONG",{});var Sft=s(Sie);Xho=r(Sft,"plbart"),Sft.forEach(t),zho=r(iye," \u2014 "),_N=n(iye,"A",{href:!0});var Rft=s(_N);Who=r(Rft,"PLBartTokenizer"),Rft.forEach(t),Qho=r(iye," (PLBart model)"),iye.forEach(t),Hho=i(S),Ch=n(S,"LI",{});var dye=s(Ch);Rie=n(dye,"STRONG",{});var Pft=s(Rie);Uho=r(Pft,"prophetnet"),Pft.forEach(t),Jho=r(dye," \u2014 "),uN=n(dye,"A",{href:!0});var Bft=s(uN);Yho=r(Bft,"ProphetNetTokenizer"),Bft.forEach(t),Kho=r(dye," (ProphetNet model)"),dye.forEach(t),Zho=i(S),Ss=n(S,"LI",{});var ES=s(Ss);Pie=n(ES,"STRONG",{});var Ift=s(Pie);epo=r(Ift,"qdqbert"),Ift.forEach(t),opo=r(ES," \u2014 "),bN=n(ES,"A",{href:!0});var Nft=s(bN);rpo=r(Nft,"BertTokenizer"),Nft.forEach(t),tpo=r(ES," or "),vN=n(ES,"A",{href:!0});var qft=s(vN);apo=r(qft,"BertTokenizerFast"),qft.forEach(t),npo=r(ES," (QDQBert model)"),ES.forEach(t),spo=i(S),wh=n(S,"LI",{});var cye=s(wh);Bie=n(cye,"STRONG",{});var jft=s(Bie);lpo=r(jft,"rag"),jft.forEach(t),ipo=r(cye," \u2014 "),FN=n(cye,"A",{href:!0});var Dft=s(FN);dpo=r(Dft,"RagTokenizer"),Dft.forEach(t),cpo=r(cye," (RAG model)"),cye.forEach(t),fpo=i(S),Rs=n(S,"LI",{});var CS=s(Rs);Iie=n(CS,"STRONG",{});var Gft=s(Iie);mpo=r(Gft,"realm"),Gft.forEach(t),gpo=r(CS," \u2014 "),TN=n(CS,"A",{href:!0});var Oft=s(TN);hpo=r(Oft,"RealmTokenizer"),Oft.forEach(t),ppo=r(CS," or "),MN=n(CS,"A",{href:!0});var Vft=s(MN);_po=r(Vft,"RealmTokenizerFast"),Vft.forEach(t),upo=r(CS," (REALM model)"),CS.forEach(t),bpo=i(S),Ps=n(S,"LI",{});var wS=s(Ps);Nie=n(wS,"STRONG",{});var Xft=s(Nie);vpo=r(Xft,"reformer"),Xft.forEach(t),Fpo=r(wS," \u2014 "),EN=n(wS,"A",{href:!0});var zft=s(EN);Tpo=r(zft,"ReformerTokenizer"),zft.forEach(t),Mpo=r(wS," or "),CN=n(wS,"A",{href:!0});var Wft=s(CN);Epo=r(Wft,"ReformerTokenizerFast"),Wft.forEach(t),Cpo=r(wS," (Reformer model)"),wS.forEach(t),wpo=i(S),Bs=n(S,"LI",{});var AS=s(Bs);qie=n(AS,"STRONG",{});var Qft=s(qie);Apo=r(Qft,"rembert"),Qft.forEach(t),Lpo=r(AS," \u2014 "),wN=n(AS,"A",{href:!0});var Hft=s(wN);ypo=r(Hft,"RemBertTokenizer"),Hft.forEach(t),xpo=r(AS," or "),AN=n(AS,"A",{href:!0});var Uft=s(AN);$po=r(Uft,"RemBertTokenizerFast"),Uft.forEach(t),kpo=r(AS," (RemBERT model)"),AS.forEach(t),Spo=i(S),Is=n(S,"LI",{});var LS=s(Is);jie=n(LS,"STRONG",{});var Jft=s(jie);Rpo=r(Jft,"retribert"),Jft.forEach(t),Ppo=r(LS," \u2014 "),LN=n(LS,"A",{href:!0});var Yft=s(LN);Bpo=r(Yft,"RetriBertTokenizer"),Yft.forEach(t),Ipo=r(LS," or "),yN=n(LS,"A",{href:!0});var Kft=s(yN);Npo=r(Kft,"RetriBertTokenizerFast"),Kft.forEach(t),qpo=r(LS," (RetriBERT model)"),LS.forEach(t),jpo=i(S),Ns=n(S,"LI",{});var yS=s(Ns);Die=n(yS,"STRONG",{});var Zft=s(Die);Dpo=r(Zft,"roberta"),Zft.forEach(t),Gpo=r(yS," \u2014 "),xN=n(yS,"A",{href:!0});var emt=s(xN);Opo=r(emt,"RobertaTokenizer"),emt.forEach(t),Vpo=r(yS," or "),$N=n(yS,"A",{href:!0});var omt=s($N);Xpo=r(omt,"RobertaTokenizerFast"),omt.forEach(t),zpo=r(yS," (RoBERTa model)"),yS.forEach(t),Wpo=i(S),qs=n(S,"LI",{});var xS=s(qs);Gie=n(xS,"STRONG",{});var rmt=s(Gie);Qpo=r(rmt,"roformer"),rmt.forEach(t),Hpo=r(xS," \u2014 "),kN=n(xS,"A",{href:!0});var tmt=s(kN);Upo=r(tmt,"RoFormerTokenizer"),tmt.forEach(t),Jpo=r(xS," or "),SN=n(xS,"A",{href:!0});var amt=s(SN);Ypo=r(amt,"RoFormerTokenizerFast"),amt.forEach(t),Kpo=r(xS," (RoFormer model)"),xS.forEach(t),Zpo=i(S),Ah=n(S,"LI",{});var fye=s(Ah);Oie=n(fye,"STRONG",{});var nmt=s(Oie);e_o=r(nmt,"speech_to_text"),nmt.forEach(t),o_o=r(fye," \u2014 "),RN=n(fye,"A",{href:!0});var smt=s(RN);r_o=r(smt,"Speech2TextTokenizer"),smt.forEach(t),t_o=r(fye," (Speech2Text model)"),fye.forEach(t),a_o=i(S),Lh=n(S,"LI",{});var mye=s(Lh);Vie=n(mye,"STRONG",{});var lmt=s(Vie);n_o=r(lmt,"speech_to_text_2"),lmt.forEach(t),s_o=r(mye," \u2014 "),PN=n(mye,"A",{href:!0});var imt=s(PN);l_o=r(imt,"Speech2Text2Tokenizer"),imt.forEach(t),i_o=r(mye," (Speech2Text2 model)"),mye.forEach(t),d_o=i(S),js=n(S,"LI",{});var $S=s(js);Xie=n($S,"STRONG",{});var dmt=s(Xie);c_o=r(dmt,"splinter"),dmt.forEach(t),f_o=r($S," \u2014 "),BN=n($S,"A",{href:!0});var cmt=s(BN);m_o=r(cmt,"SplinterTokenizer"),cmt.forEach(t),g_o=r($S," or "),IN=n($S,"A",{href:!0});var fmt=s(IN);h_o=r(fmt,"SplinterTokenizerFast"),fmt.forEach(t),p_o=r($S," (Splinter model)"),$S.forEach(t),__o=i(S),Ds=n(S,"LI",{});var kS=s(Ds);zie=n(kS,"STRONG",{});var mmt=s(zie);u_o=r(mmt,"squeezebert"),mmt.forEach(t),b_o=r(kS," \u2014 "),NN=n(kS,"A",{href:!0});var gmt=s(NN);v_o=r(gmt,"SqueezeBertTokenizer"),gmt.forEach(t),F_o=r(kS," or "),qN=n(kS,"A",{href:!0});var hmt=s(qN);T_o=r(hmt,"SqueezeBertTokenizerFast"),hmt.forEach(t),M_o=r(kS," (SqueezeBERT model)"),kS.forEach(t),E_o=i(S),Gs=n(S,"LI",{});var SS=s(Gs);Wie=n(SS,"STRONG",{});var pmt=s(Wie);C_o=r(pmt,"t5"),pmt.forEach(t),w_o=r(SS," \u2014 "),jN=n(SS,"A",{href:!0});var _mt=s(jN);A_o=r(_mt,"T5Tokenizer"),_mt.forEach(t),L_o=r(SS," or "),DN=n(SS,"A",{href:!0});var umt=s(DN);y_o=r(umt,"T5TokenizerFast"),umt.forEach(t),x_o=r(SS," (T5 model)"),SS.forEach(t),$_o=i(S),yh=n(S,"LI",{});var gye=s(yh);Qie=n(gye,"STRONG",{});var bmt=s(Qie);k_o=r(bmt,"tapas"),bmt.forEach(t),S_o=r(gye," \u2014 "),GN=n(gye,"A",{href:!0});var vmt=s(GN);R_o=r(vmt,"TapasTokenizer"),vmt.forEach(t),P_o=r(gye," (TAPAS model)"),gye.forEach(t),B_o=i(S),xh=n(S,"LI",{});var hye=s(xh);Hie=n(hye,"STRONG",{});var Fmt=s(Hie);I_o=r(Fmt,"tapex"),Fmt.forEach(t),N_o=r(hye," \u2014 "),ON=n(hye,"A",{href:!0});var Tmt=s(ON);q_o=r(Tmt,"TapexTokenizer"),Tmt.forEach(t),j_o=r(hye," (TAPEX model)"),hye.forEach(t),D_o=i(S),$h=n(S,"LI",{});var pye=s($h);Uie=n(pye,"STRONG",{});var Mmt=s(Uie);G_o=r(Mmt,"transfo-xl"),Mmt.forEach(t),O_o=r(pye," \u2014 "),VN=n(pye,"A",{href:!0});var Emt=s(VN);V_o=r(Emt,"TransfoXLTokenizer"),Emt.forEach(t),X_o=r(pye," (Transformer-XL model)"),pye.forEach(t),z_o=i(S),Os=n(S,"LI",{});var RS=s(Os);Jie=n(RS,"STRONG",{});var Cmt=s(Jie);W_o=r(Cmt,"vilt"),Cmt.forEach(t),Q_o=r(RS," \u2014 "),XN=n(RS,"A",{href:!0});var wmt=s(XN);H_o=r(wmt,"BertTokenizer"),wmt.forEach(t),U_o=r(RS," or "),zN=n(RS,"A",{href:!0});var Amt=s(zN);J_o=r(Amt,"BertTokenizerFast"),Amt.forEach(t),Y_o=r(RS," (ViLT model)"),RS.forEach(t),K_o=i(S),Vs=n(S,"LI",{});var PS=s(Vs);Yie=n(PS,"STRONG",{});var Lmt=s(Yie);Z_o=r(Lmt,"visual_bert"),Lmt.forEach(t),euo=r(PS," \u2014 "),WN=n(PS,"A",{href:!0});var ymt=s(WN);ouo=r(ymt,"BertTokenizer"),ymt.forEach(t),ruo=r(PS," or "),QN=n(PS,"A",{href:!0});var xmt=s(QN);tuo=r(xmt,"BertTokenizerFast"),xmt.forEach(t),auo=r(PS," (VisualBERT model)"),PS.forEach(t),nuo=i(S),kh=n(S,"LI",{});var _ye=s(kh);Kie=n(_ye,"STRONG",{});var $mt=s(Kie);suo=r($mt,"wav2vec2"),$mt.forEach(t),luo=r(_ye," \u2014 "),HN=n(_ye,"A",{href:!0});var kmt=s(HN);iuo=r(kmt,"Wav2Vec2CTCTokenizer"),kmt.forEach(t),duo=r(_ye," (Wav2Vec2 model)"),_ye.forEach(t),cuo=i(S),Sh=n(S,"LI",{});var uye=s(Sh);Zie=n(uye,"STRONG",{});var Smt=s(Zie);fuo=r(Smt,"wav2vec2-conformer"),Smt.forEach(t),muo=r(uye," \u2014 "),UN=n(uye,"A",{href:!0});var Rmt=s(UN);guo=r(Rmt,"Wav2Vec2CTCTokenizer"),Rmt.forEach(t),huo=r(uye," (Wav2Vec2-Conformer model)"),uye.forEach(t),puo=i(S),Rh=n(S,"LI",{});var bye=s(Rh);ede=n(bye,"STRONG",{});var Pmt=s(ede);_uo=r(Pmt,"wav2vec2_phoneme"),Pmt.forEach(t),uuo=r(bye," \u2014 "),JN=n(bye,"A",{href:!0});var Bmt=s(JN);buo=r(Bmt,"Wav2Vec2PhonemeCTCTokenizer"),Bmt.forEach(t),vuo=r(bye," (Wav2Vec2Phoneme model)"),bye.forEach(t),Fuo=i(S),Xs=n(S,"LI",{});var BS=s(Xs);ode=n(BS,"STRONG",{});var Imt=s(ode);Tuo=r(Imt,"xglm"),Imt.forEach(t),Muo=r(BS," \u2014 "),YN=n(BS,"A",{href:!0});var Nmt=s(YN);Euo=r(Nmt,"XGLMTokenizer"),Nmt.forEach(t),Cuo=r(BS," or "),KN=n(BS,"A",{href:!0});var qmt=s(KN);wuo=r(qmt,"XGLMTokenizerFast"),qmt.forEach(t),Auo=r(BS," (XGLM model)"),BS.forEach(t),Luo=i(S),Ph=n(S,"LI",{});var vye=s(Ph);rde=n(vye,"STRONG",{});var jmt=s(rde);yuo=r(jmt,"xlm"),jmt.forEach(t),xuo=r(vye," \u2014 "),ZN=n(vye,"A",{href:!0});var Dmt=s(ZN);$uo=r(Dmt,"XLMTokenizer"),Dmt.forEach(t),kuo=r(vye," (XLM model)"),vye.forEach(t),Suo=i(S),Bh=n(S,"LI",{});var Fye=s(Bh);tde=n(Fye,"STRONG",{});var Gmt=s(tde);Ruo=r(Gmt,"xlm-prophetnet"),Gmt.forEach(t),Puo=r(Fye," \u2014 "),eq=n(Fye,"A",{href:!0});var Omt=s(eq);Buo=r(Omt,"XLMProphetNetTokenizer"),Omt.forEach(t),Iuo=r(Fye," (XLM-ProphetNet model)"),Fye.forEach(t),Nuo=i(S),zs=n(S,"LI",{});var IS=s(zs);ade=n(IS,"STRONG",{});var Vmt=s(ade);quo=r(Vmt,"xlm-roberta"),Vmt.forEach(t),juo=r(IS," \u2014 "),oq=n(IS,"A",{href:!0});var Xmt=s(oq);Duo=r(Xmt,"XLMRobertaTokenizer"),Xmt.forEach(t),Guo=r(IS," or "),rq=n(IS,"A",{href:!0});var zmt=s(rq);Ouo=r(zmt,"XLMRobertaTokenizerFast"),zmt.forEach(t),Vuo=r(IS," (XLM-RoBERTa model)"),IS.forEach(t),Xuo=i(S),Ws=n(S,"LI",{});var NS=s(Ws);nde=n(NS,"STRONG",{});var Wmt=s(nde);zuo=r(Wmt,"xlm-roberta-xl"),Wmt.forEach(t),Wuo=r(NS," \u2014 "),tq=n(NS,"A",{href:!0});var Qmt=s(tq);Quo=r(Qmt,"RobertaTokenizer"),Qmt.forEach(t),Huo=r(NS," or "),aq=n(NS,"A",{href:!0});var Hmt=s(aq);Uuo=r(Hmt,"RobertaTokenizerFast"),Hmt.forEach(t),Juo=r(NS," (XLM-RoBERTa-XL model)"),NS.forEach(t),Yuo=i(S),Qs=n(S,"LI",{});var qS=s(Qs);sde=n(qS,"STRONG",{});var Umt=s(sde);Kuo=r(Umt,"xlnet"),Umt.forEach(t),Zuo=r(qS," \u2014 "),nq=n(qS,"A",{href:!0});var Jmt=s(nq);e1o=r(Jmt,"XLNetTokenizer"),Jmt.forEach(t),o1o=r(qS," or "),sq=n(qS,"A",{href:!0});var Ymt=s(sq);r1o=r(Ymt,"XLNetTokenizerFast"),Ymt.forEach(t),t1o=r(qS," (XLNet model)"),qS.forEach(t),a1o=i(S),Hs=n(S,"LI",{});var jS=s(Hs);lde=n(jS,"STRONG",{});var Kmt=s(lde);n1o=r(Kmt,"yoso"),Kmt.forEach(t),s1o=r(jS," \u2014 "),lq=n(jS,"A",{href:!0});var Zmt=s(lq);l1o=r(Zmt,"AlbertTokenizer"),Zmt.forEach(t),i1o=r(jS," or "),iq=n(jS,"A",{href:!0});var egt=s(iq);d1o=r(egt,"AlbertTokenizerFast"),egt.forEach(t),c1o=r(jS," (YOSO model)"),jS.forEach(t),S.forEach(t),f1o=i(ol),T(Ih.$$.fragment,ol),ol.forEach(t),m1o=i(el),Nh=n(el,"DIV",{class:!0});var GWe=s(Nh);T(w6.$$.fragment,GWe),g1o=i(GWe),ide=n(GWe,"P",{});var ogt=s(ide);h1o=r(ogt,"Register a new tokenizer in this mapping."),ogt.forEach(t),GWe.forEach(t),el.forEach(t),DXe=i(f),Di=n(f,"H2",{class:!0});var OWe=s(Di);qh=n(OWe,"A",{id:!0,class:!0,href:!0});var rgt=s(qh);dde=n(rgt,"SPAN",{});var tgt=s(dde);T(A6.$$.fragment,tgt),tgt.forEach(t),rgt.forEach(t),p1o=i(OWe),cde=n(OWe,"SPAN",{});var agt=s(cde);_1o=r(agt,"AutoFeatureExtractor"),agt.forEach(t),OWe.forEach(t),GXe=i(f),yo=n(f,"DIV",{class:!0});var rl=s(yo);T(L6.$$.fragment,rl),u1o=i(rl),y6=n(rl,"P",{});var VWe=s(y6);b1o=r(VWe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),dq=n(VWe,"A",{href:!0});var ngt=s(dq);v1o=r(ngt,"AutoFeatureExtractor.from_pretrained()"),ngt.forEach(t),F1o=r(VWe," class method."),VWe.forEach(t),T1o=i(rl),x6=n(rl,"P",{});var XWe=s(x6);M1o=r(XWe,"This class cannot be instantiated directly using "),fde=n(XWe,"CODE",{});var sgt=s(fde);E1o=r(sgt,"__init__()"),sgt.forEach(t),C1o=r(XWe," (throws an error)."),XWe.forEach(t),w1o=i(rl),Ue=n(rl,"DIV",{class:!0});var na=s(Ue);T($6.$$.fragment,na),A1o=i(na),mde=n(na,"P",{});var lgt=s(mde);L1o=r(lgt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),lgt.forEach(t),y1o=i(na),Ba=n(na,"P",{});var pw=s(Ba);x1o=r(pw,"The feature extractor class to instantiate is selected based on the "),gde=n(pw,"CODE",{});var igt=s(gde);$1o=r(igt,"model_type"),igt.forEach(t),k1o=r(pw,` property of the config object
(either passed as an argument or loaded from `),hde=n(pw,"CODE",{});var dgt=s(hde);S1o=r(dgt,"pretrained_model_name_or_path"),dgt.forEach(t),R1o=r(pw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),pde=n(pw,"CODE",{});var cgt=s(pde);P1o=r(cgt,"pretrained_model_name_or_path"),cgt.forEach(t),B1o=r(pw,":"),pw.forEach(t),I1o=i(na),J=n(na,"UL",{});var K=s(J);jh=n(K,"LI",{});var Tye=s(jh);_de=n(Tye,"STRONG",{});var fgt=s(_de);N1o=r(fgt,"beit"),fgt.forEach(t),q1o=r(Tye," \u2014 "),cq=n(Tye,"A",{href:!0});var mgt=s(cq);j1o=r(mgt,"BeitFeatureExtractor"),mgt.forEach(t),D1o=r(Tye," (BEiT model)"),Tye.forEach(t),G1o=i(K),Dh=n(K,"LI",{});var Mye=s(Dh);ude=n(Mye,"STRONG",{});var ggt=s(ude);O1o=r(ggt,"clip"),ggt.forEach(t),V1o=r(Mye," \u2014 "),fq=n(Mye,"A",{href:!0});var hgt=s(fq);X1o=r(hgt,"CLIPFeatureExtractor"),hgt.forEach(t),z1o=r(Mye," (CLIP model)"),Mye.forEach(t),W1o=i(K),Gh=n(K,"LI",{});var Eye=s(Gh);bde=n(Eye,"STRONG",{});var pgt=s(bde);Q1o=r(pgt,"convnext"),pgt.forEach(t),H1o=r(Eye," \u2014 "),mq=n(Eye,"A",{href:!0});var _gt=s(mq);U1o=r(_gt,"ConvNextFeatureExtractor"),_gt.forEach(t),J1o=r(Eye," (ConvNeXT model)"),Eye.forEach(t),Y1o=i(K),Oh=n(K,"LI",{});var Cye=s(Oh);vde=n(Cye,"STRONG",{});var ugt=s(vde);K1o=r(ugt,"cvt"),ugt.forEach(t),Z1o=r(Cye," \u2014 "),gq=n(Cye,"A",{href:!0});var bgt=s(gq);e2o=r(bgt,"ConvNextFeatureExtractor"),bgt.forEach(t),o2o=r(Cye," (CvT model)"),Cye.forEach(t),r2o=i(K),Vh=n(K,"LI",{});var wye=s(Vh);Fde=n(wye,"STRONG",{});var vgt=s(Fde);t2o=r(vgt,"data2vec-audio"),vgt.forEach(t),a2o=r(wye," \u2014 "),hq=n(wye,"A",{href:!0});var Fgt=s(hq);n2o=r(Fgt,"Wav2Vec2FeatureExtractor"),Fgt.forEach(t),s2o=r(wye," (Data2VecAudio model)"),wye.forEach(t),l2o=i(K),Xh=n(K,"LI",{});var Aye=s(Xh);Tde=n(Aye,"STRONG",{});var Tgt=s(Tde);i2o=r(Tgt,"data2vec-vision"),Tgt.forEach(t),d2o=r(Aye," \u2014 "),pq=n(Aye,"A",{href:!0});var Mgt=s(pq);c2o=r(Mgt,"BeitFeatureExtractor"),Mgt.forEach(t),f2o=r(Aye," (Data2VecVision model)"),Aye.forEach(t),m2o=i(K),zh=n(K,"LI",{});var Lye=s(zh);Mde=n(Lye,"STRONG",{});var Egt=s(Mde);g2o=r(Egt,"deit"),Egt.forEach(t),h2o=r(Lye," \u2014 "),_q=n(Lye,"A",{href:!0});var Cgt=s(_q);p2o=r(Cgt,"DeiTFeatureExtractor"),Cgt.forEach(t),_2o=r(Lye," (DeiT model)"),Lye.forEach(t),u2o=i(K),Wh=n(K,"LI",{});var yye=s(Wh);Ede=n(yye,"STRONG",{});var wgt=s(Ede);b2o=r(wgt,"detr"),wgt.forEach(t),v2o=r(yye," \u2014 "),uq=n(yye,"A",{href:!0});var Agt=s(uq);F2o=r(Agt,"DetrFeatureExtractor"),Agt.forEach(t),T2o=r(yye," (DETR model)"),yye.forEach(t),M2o=i(K),Qh=n(K,"LI",{});var xye=s(Qh);Cde=n(xye,"STRONG",{});var Lgt=s(Cde);E2o=r(Lgt,"dpt"),Lgt.forEach(t),C2o=r(xye," \u2014 "),bq=n(xye,"A",{href:!0});var ygt=s(bq);w2o=r(ygt,"DPTFeatureExtractor"),ygt.forEach(t),A2o=r(xye," (DPT model)"),xye.forEach(t),L2o=i(K),Hh=n(K,"LI",{});var $ye=s(Hh);wde=n($ye,"STRONG",{});var xgt=s(wde);y2o=r(xgt,"flava"),xgt.forEach(t),x2o=r($ye," \u2014 "),vq=n($ye,"A",{href:!0});var $gt=s(vq);$2o=r($gt,"FlavaFeatureExtractor"),$gt.forEach(t),k2o=r($ye," (FLAVA model)"),$ye.forEach(t),S2o=i(K),Uh=n(K,"LI",{});var kye=s(Uh);Ade=n(kye,"STRONG",{});var kgt=s(Ade);R2o=r(kgt,"glpn"),kgt.forEach(t),P2o=r(kye," \u2014 "),Fq=n(kye,"A",{href:!0});var Sgt=s(Fq);B2o=r(Sgt,"GLPNFeatureExtractor"),Sgt.forEach(t),I2o=r(kye," (GLPN model)"),kye.forEach(t),N2o=i(K),Jh=n(K,"LI",{});var Sye=s(Jh);Lde=n(Sye,"STRONG",{});var Rgt=s(Lde);q2o=r(Rgt,"groupvit"),Rgt.forEach(t),j2o=r(Sye," \u2014 "),Tq=n(Sye,"A",{href:!0});var Pgt=s(Tq);D2o=r(Pgt,"CLIPFeatureExtractor"),Pgt.forEach(t),G2o=r(Sye," (GroupViT model)"),Sye.forEach(t),O2o=i(K),Yh=n(K,"LI",{});var Rye=s(Yh);yde=n(Rye,"STRONG",{});var Bgt=s(yde);V2o=r(Bgt,"hubert"),Bgt.forEach(t),X2o=r(Rye," \u2014 "),Mq=n(Rye,"A",{href:!0});var Igt=s(Mq);z2o=r(Igt,"Wav2Vec2FeatureExtractor"),Igt.forEach(t),W2o=r(Rye," (Hubert model)"),Rye.forEach(t),Q2o=i(K),Kh=n(K,"LI",{});var Pye=s(Kh);xde=n(Pye,"STRONG",{});var Ngt=s(xde);H2o=r(Ngt,"imagegpt"),Ngt.forEach(t),U2o=r(Pye," \u2014 "),Eq=n(Pye,"A",{href:!0});var qgt=s(Eq);J2o=r(qgt,"ImageGPTFeatureExtractor"),qgt.forEach(t),Y2o=r(Pye," (ImageGPT model)"),Pye.forEach(t),K2o=i(K),Zh=n(K,"LI",{});var Bye=s(Zh);$de=n(Bye,"STRONG",{});var jgt=s($de);Z2o=r(jgt,"layoutlmv2"),jgt.forEach(t),ebo=r(Bye," \u2014 "),Cq=n(Bye,"A",{href:!0});var Dgt=s(Cq);obo=r(Dgt,"LayoutLMv2FeatureExtractor"),Dgt.forEach(t),rbo=r(Bye," (LayoutLMv2 model)"),Bye.forEach(t),tbo=i(K),ep=n(K,"LI",{});var Iye=s(ep);kde=n(Iye,"STRONG",{});var Ggt=s(kde);abo=r(Ggt,"layoutlmv3"),Ggt.forEach(t),nbo=r(Iye," \u2014 "),wq=n(Iye,"A",{href:!0});var Ogt=s(wq);sbo=r(Ogt,"LayoutLMv3FeatureExtractor"),Ogt.forEach(t),lbo=r(Iye," (LayoutLMv3 model)"),Iye.forEach(t),ibo=i(K),op=n(K,"LI",{});var Nye=s(op);Sde=n(Nye,"STRONG",{});var Vgt=s(Sde);dbo=r(Vgt,"levit"),Vgt.forEach(t),cbo=r(Nye," \u2014 "),Aq=n(Nye,"A",{href:!0});var Xgt=s(Aq);fbo=r(Xgt,"LevitFeatureExtractor"),Xgt.forEach(t),mbo=r(Nye," (LeViT model)"),Nye.forEach(t),gbo=i(K),rp=n(K,"LI",{});var qye=s(rp);Rde=n(qye,"STRONG",{});var zgt=s(Rde);hbo=r(zgt,"maskformer"),zgt.forEach(t),pbo=r(qye," \u2014 "),Lq=n(qye,"A",{href:!0});var Wgt=s(Lq);_bo=r(Wgt,"MaskFormerFeatureExtractor"),Wgt.forEach(t),ubo=r(qye," (MaskFormer model)"),qye.forEach(t),bbo=i(K),tp=n(K,"LI",{});var jye=s(tp);Pde=n(jye,"STRONG",{});var Qgt=s(Pde);vbo=r(Qgt,"mctct"),Qgt.forEach(t),Fbo=r(jye," \u2014 "),yq=n(jye,"A",{href:!0});var Hgt=s(yq);Tbo=r(Hgt,"MCTCTFeatureExtractor"),Hgt.forEach(t),Mbo=r(jye," (M-CTC-T model)"),jye.forEach(t),Ebo=i(K),ap=n(K,"LI",{});var Dye=s(ap);Bde=n(Dye,"STRONG",{});var Ugt=s(Bde);Cbo=r(Ugt,"mobilevit"),Ugt.forEach(t),wbo=r(Dye," \u2014 "),xq=n(Dye,"A",{href:!0});var Jgt=s(xq);Abo=r(Jgt,"MobileViTFeatureExtractor"),Jgt.forEach(t),Lbo=r(Dye," (MobileViT model)"),Dye.forEach(t),ybo=i(K),np=n(K,"LI",{});var Gye=s(np);Ide=n(Gye,"STRONG",{});var Ygt=s(Ide);xbo=r(Ygt,"owlvit"),Ygt.forEach(t),$bo=r(Gye," \u2014 "),$q=n(Gye,"A",{href:!0});var Kgt=s($q);kbo=r(Kgt,"OwlViTFeatureExtractor"),Kgt.forEach(t),Sbo=r(Gye," (OWL-ViT model)"),Gye.forEach(t),Rbo=i(K),sp=n(K,"LI",{});var Oye=s(sp);Nde=n(Oye,"STRONG",{});var Zgt=s(Nde);Pbo=r(Zgt,"perceiver"),Zgt.forEach(t),Bbo=r(Oye," \u2014 "),kq=n(Oye,"A",{href:!0});var eht=s(kq);Ibo=r(eht,"PerceiverFeatureExtractor"),eht.forEach(t),Nbo=r(Oye," (Perceiver model)"),Oye.forEach(t),qbo=i(K),lp=n(K,"LI",{});var Vye=s(lp);qde=n(Vye,"STRONG",{});var oht=s(qde);jbo=r(oht,"poolformer"),oht.forEach(t),Dbo=r(Vye," \u2014 "),Sq=n(Vye,"A",{href:!0});var rht=s(Sq);Gbo=r(rht,"PoolFormerFeatureExtractor"),rht.forEach(t),Obo=r(Vye," (PoolFormer model)"),Vye.forEach(t),Vbo=i(K),ip=n(K,"LI",{});var Xye=s(ip);jde=n(Xye,"STRONG",{});var tht=s(jde);Xbo=r(tht,"regnet"),tht.forEach(t),zbo=r(Xye," \u2014 "),Rq=n(Xye,"A",{href:!0});var aht=s(Rq);Wbo=r(aht,"ConvNextFeatureExtractor"),aht.forEach(t),Qbo=r(Xye," (RegNet model)"),Xye.forEach(t),Hbo=i(K),dp=n(K,"LI",{});var zye=s(dp);Dde=n(zye,"STRONG",{});var nht=s(Dde);Ubo=r(nht,"resnet"),nht.forEach(t),Jbo=r(zye," \u2014 "),Pq=n(zye,"A",{href:!0});var sht=s(Pq);Ybo=r(sht,"ConvNextFeatureExtractor"),sht.forEach(t),Kbo=r(zye," (ResNet model)"),zye.forEach(t),Zbo=i(K),cp=n(K,"LI",{});var Wye=s(cp);Gde=n(Wye,"STRONG",{});var lht=s(Gde);e3o=r(lht,"segformer"),lht.forEach(t),o3o=r(Wye," \u2014 "),Bq=n(Wye,"A",{href:!0});var iht=s(Bq);r3o=r(iht,"SegformerFeatureExtractor"),iht.forEach(t),t3o=r(Wye," (SegFormer model)"),Wye.forEach(t),a3o=i(K),fp=n(K,"LI",{});var Qye=s(fp);Ode=n(Qye,"STRONG",{});var dht=s(Ode);n3o=r(dht,"speech_to_text"),dht.forEach(t),s3o=r(Qye," \u2014 "),Iq=n(Qye,"A",{href:!0});var cht=s(Iq);l3o=r(cht,"Speech2TextFeatureExtractor"),cht.forEach(t),i3o=r(Qye," (Speech2Text model)"),Qye.forEach(t),d3o=i(K),mp=n(K,"LI",{});var Hye=s(mp);Vde=n(Hye,"STRONG",{});var fht=s(Vde);c3o=r(fht,"swin"),fht.forEach(t),f3o=r(Hye," \u2014 "),Nq=n(Hye,"A",{href:!0});var mht=s(Nq);m3o=r(mht,"ViTFeatureExtractor"),mht.forEach(t),g3o=r(Hye," (Swin Transformer model)"),Hye.forEach(t),h3o=i(K),gp=n(K,"LI",{});var Uye=s(gp);Xde=n(Uye,"STRONG",{});var ght=s(Xde);p3o=r(ght,"van"),ght.forEach(t),_3o=r(Uye," \u2014 "),qq=n(Uye,"A",{href:!0});var hht=s(qq);u3o=r(hht,"ConvNextFeatureExtractor"),hht.forEach(t),b3o=r(Uye," (VAN model)"),Uye.forEach(t),v3o=i(K),hp=n(K,"LI",{});var Jye=s(hp);zde=n(Jye,"STRONG",{});var pht=s(zde);F3o=r(pht,"vilt"),pht.forEach(t),T3o=r(Jye," \u2014 "),jq=n(Jye,"A",{href:!0});var _ht=s(jq);M3o=r(_ht,"ViltFeatureExtractor"),_ht.forEach(t),E3o=r(Jye," (ViLT model)"),Jye.forEach(t),C3o=i(K),pp=n(K,"LI",{});var Yye=s(pp);Wde=n(Yye,"STRONG",{});var uht=s(Wde);w3o=r(uht,"vit"),uht.forEach(t),A3o=r(Yye," \u2014 "),Dq=n(Yye,"A",{href:!0});var bht=s(Dq);L3o=r(bht,"ViTFeatureExtractor"),bht.forEach(t),y3o=r(Yye," (ViT model)"),Yye.forEach(t),x3o=i(K),_p=n(K,"LI",{});var Kye=s(_p);Qde=n(Kye,"STRONG",{});var vht=s(Qde);$3o=r(vht,"vit_mae"),vht.forEach(t),k3o=r(Kye," \u2014 "),Gq=n(Kye,"A",{href:!0});var Fht=s(Gq);S3o=r(Fht,"ViTFeatureExtractor"),Fht.forEach(t),R3o=r(Kye," (ViTMAE model)"),Kye.forEach(t),P3o=i(K),up=n(K,"LI",{});var Zye=s(up);Hde=n(Zye,"STRONG",{});var Tht=s(Hde);B3o=r(Tht,"wav2vec2"),Tht.forEach(t),I3o=r(Zye," \u2014 "),Oq=n(Zye,"A",{href:!0});var Mht=s(Oq);N3o=r(Mht,"Wav2Vec2FeatureExtractor"),Mht.forEach(t),q3o=r(Zye," (Wav2Vec2 model)"),Zye.forEach(t),j3o=i(K),bp=n(K,"LI",{});var exe=s(bp);Ude=n(exe,"STRONG",{});var Eht=s(Ude);D3o=r(Eht,"wav2vec2-conformer"),Eht.forEach(t),G3o=r(exe," \u2014 "),Vq=n(exe,"A",{href:!0});var Cht=s(Vq);O3o=r(Cht,"Wav2Vec2FeatureExtractor"),Cht.forEach(t),V3o=r(exe," (Wav2Vec2-Conformer model)"),exe.forEach(t),X3o=i(K),vp=n(K,"LI",{});var oxe=s(vp);Jde=n(oxe,"STRONG",{});var wht=s(Jde);z3o=r(wht,"yolos"),wht.forEach(t),W3o=r(oxe," \u2014 "),Xq=n(oxe,"A",{href:!0});var Aht=s(Xq);Q3o=r(Aht,"YolosFeatureExtractor"),Aht.forEach(t),H3o=r(oxe," (YOLOS model)"),oxe.forEach(t),K.forEach(t),U3o=i(na),T(Fp.$$.fragment,na),J3o=i(na),T(Tp.$$.fragment,na),na.forEach(t),Y3o=i(rl),Mp=n(rl,"DIV",{class:!0});var zWe=s(Mp);T(k6.$$.fragment,zWe),K3o=i(zWe),Yde=n(zWe,"P",{});var Lht=s(Yde);Z3o=r(Lht,"Register a new feature extractor for this class."),Lht.forEach(t),zWe.forEach(t),rl.forEach(t),OXe=i(f),Gi=n(f,"H2",{class:!0});var WWe=s(Gi);Ep=n(WWe,"A",{id:!0,class:!0,href:!0});var yht=s(Ep);Kde=n(yht,"SPAN",{});var xht=s(Kde);T(S6.$$.fragment,xht),xht.forEach(t),yht.forEach(t),evo=i(WWe),Zde=n(WWe,"SPAN",{});var $ht=s(Zde);ovo=r($ht,"AutoProcessor"),$ht.forEach(t),WWe.forEach(t),VXe=i(f),xo=n(f,"DIV",{class:!0});var tl=s(xo);T(R6.$$.fragment,tl),rvo=i(tl),P6=n(tl,"P",{});var QWe=s(P6);tvo=r(QWe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),zq=n(QWe,"A",{href:!0});var kht=s(zq);avo=r(kht,"AutoProcessor.from_pretrained()"),kht.forEach(t),nvo=r(QWe," class method."),QWe.forEach(t),svo=i(tl),B6=n(tl,"P",{});var HWe=s(B6);lvo=r(HWe,"This class cannot be instantiated directly using "),ece=n(HWe,"CODE",{});var Sht=s(ece);ivo=r(Sht,"__init__()"),Sht.forEach(t),dvo=r(HWe," (throws an error)."),HWe.forEach(t),cvo=i(tl),Je=n(tl,"DIV",{class:!0});var sa=s(Je);T(I6.$$.fragment,sa),fvo=i(sa),oce=n(sa,"P",{});var Rht=s(oce);mvo=r(Rht,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Rht.forEach(t),gvo=i(sa),Oi=n(sa,"P",{});var Jre=s(Oi);hvo=r(Jre,"The processor class to instantiate is selected based on the "),rce=n(Jre,"CODE",{});var Pht=s(rce);pvo=r(Pht,"model_type"),Pht.forEach(t),_vo=r(Jre,` property of the config object (either
passed as an argument or loaded from `),tce=n(Jre,"CODE",{});var Bht=s(tce);uvo=r(Bht,"pretrained_model_name_or_path"),Bht.forEach(t),bvo=r(Jre," if possible):"),Jre.forEach(t),vvo=i(sa),fe=n(sa,"UL",{});var _e=s(fe);Cp=n(_e,"LI",{});var rxe=s(Cp);ace=n(rxe,"STRONG",{});var Iht=s(ace);Fvo=r(Iht,"clip"),Iht.forEach(t),Tvo=r(rxe," \u2014 "),Wq=n(rxe,"A",{href:!0});var Nht=s(Wq);Mvo=r(Nht,"CLIPProcessor"),Nht.forEach(t),Evo=r(rxe," (CLIP model)"),rxe.forEach(t),Cvo=i(_e),wp=n(_e,"LI",{});var txe=s(wp);nce=n(txe,"STRONG",{});var qht=s(nce);wvo=r(qht,"flava"),qht.forEach(t),Avo=r(txe," \u2014 "),sce=n(txe,"CODE",{});var jht=s(sce);Lvo=r(jht,"FLAVAProcessor"),jht.forEach(t),yvo=r(txe," (FLAVA model)"),txe.forEach(t),xvo=i(_e),Ap=n(_e,"LI",{});var axe=s(Ap);lce=n(axe,"STRONG",{});var Dht=s(lce);$vo=r(Dht,"groupvit"),Dht.forEach(t),kvo=r(axe," \u2014 "),Qq=n(axe,"A",{href:!0});var Ght=s(Qq);Svo=r(Ght,"CLIPProcessor"),Ght.forEach(t),Rvo=r(axe," (GroupViT model)"),axe.forEach(t),Pvo=i(_e),Lp=n(_e,"LI",{});var nxe=s(Lp);ice=n(nxe,"STRONG",{});var Oht=s(ice);Bvo=r(Oht,"layoutlmv2"),Oht.forEach(t),Ivo=r(nxe," \u2014 "),Hq=n(nxe,"A",{href:!0});var Vht=s(Hq);Nvo=r(Vht,"LayoutLMv2Processor"),Vht.forEach(t),qvo=r(nxe," (LayoutLMv2 model)"),nxe.forEach(t),jvo=i(_e),yp=n(_e,"LI",{});var sxe=s(yp);dce=n(sxe,"STRONG",{});var Xht=s(dce);Dvo=r(Xht,"layoutlmv3"),Xht.forEach(t),Gvo=r(sxe," \u2014 "),Uq=n(sxe,"A",{href:!0});var zht=s(Uq);Ovo=r(zht,"LayoutLMv3Processor"),zht.forEach(t),Vvo=r(sxe," (LayoutLMv3 model)"),sxe.forEach(t),Xvo=i(_e),xp=n(_e,"LI",{});var lxe=s(xp);cce=n(lxe,"STRONG",{});var Wht=s(cce);zvo=r(Wht,"layoutxlm"),Wht.forEach(t),Wvo=r(lxe," \u2014 "),Jq=n(lxe,"A",{href:!0});var Qht=s(Jq);Qvo=r(Qht,"LayoutXLMProcessor"),Qht.forEach(t),Hvo=r(lxe," (LayoutXLM model)"),lxe.forEach(t),Uvo=i(_e),$p=n(_e,"LI",{});var ixe=s($p);fce=n(ixe,"STRONG",{});var Hht=s(fce);Jvo=r(Hht,"owlvit"),Hht.forEach(t),Yvo=r(ixe," \u2014 "),Yq=n(ixe,"A",{href:!0});var Uht=s(Yq);Kvo=r(Uht,"OwlViTProcessor"),Uht.forEach(t),Zvo=r(ixe," (OWL-ViT model)"),ixe.forEach(t),eFo=i(_e),kp=n(_e,"LI",{});var dxe=s(kp);mce=n(dxe,"STRONG",{});var Jht=s(mce);oFo=r(Jht,"sew"),Jht.forEach(t),rFo=r(dxe," \u2014 "),Kq=n(dxe,"A",{href:!0});var Yht=s(Kq);tFo=r(Yht,"Wav2Vec2Processor"),Yht.forEach(t),aFo=r(dxe," (SEW model)"),dxe.forEach(t),nFo=i(_e),Sp=n(_e,"LI",{});var cxe=s(Sp);gce=n(cxe,"STRONG",{});var Kht=s(gce);sFo=r(Kht,"sew-d"),Kht.forEach(t),lFo=r(cxe," \u2014 "),Zq=n(cxe,"A",{href:!0});var Zht=s(Zq);iFo=r(Zht,"Wav2Vec2Processor"),Zht.forEach(t),dFo=r(cxe," (SEW-D model)"),cxe.forEach(t),cFo=i(_e),Rp=n(_e,"LI",{});var fxe=s(Rp);hce=n(fxe,"STRONG",{});var ept=s(hce);fFo=r(ept,"speech_to_text"),ept.forEach(t),mFo=r(fxe," \u2014 "),ej=n(fxe,"A",{href:!0});var opt=s(ej);gFo=r(opt,"Speech2TextProcessor"),opt.forEach(t),hFo=r(fxe," (Speech2Text model)"),fxe.forEach(t),pFo=i(_e),Pp=n(_e,"LI",{});var mxe=s(Pp);pce=n(mxe,"STRONG",{});var rpt=s(pce);_Fo=r(rpt,"speech_to_text_2"),rpt.forEach(t),uFo=r(mxe," \u2014 "),oj=n(mxe,"A",{href:!0});var tpt=s(oj);bFo=r(tpt,"Speech2Text2Processor"),tpt.forEach(t),vFo=r(mxe," (Speech2Text2 model)"),mxe.forEach(t),FFo=i(_e),Bp=n(_e,"LI",{});var gxe=s(Bp);_ce=n(gxe,"STRONG",{});var apt=s(_ce);TFo=r(apt,"trocr"),apt.forEach(t),MFo=r(gxe," \u2014 "),rj=n(gxe,"A",{href:!0});var npt=s(rj);EFo=r(npt,"TrOCRProcessor"),npt.forEach(t),CFo=r(gxe," (TrOCR model)"),gxe.forEach(t),wFo=i(_e),Ip=n(_e,"LI",{});var hxe=s(Ip);uce=n(hxe,"STRONG",{});var spt=s(uce);AFo=r(spt,"unispeech"),spt.forEach(t),LFo=r(hxe," \u2014 "),tj=n(hxe,"A",{href:!0});var lpt=s(tj);yFo=r(lpt,"Wav2Vec2Processor"),lpt.forEach(t),xFo=r(hxe," (UniSpeech model)"),hxe.forEach(t),$Fo=i(_e),Np=n(_e,"LI",{});var pxe=s(Np);bce=n(pxe,"STRONG",{});var ipt=s(bce);kFo=r(ipt,"unispeech-sat"),ipt.forEach(t),SFo=r(pxe," \u2014 "),aj=n(pxe,"A",{href:!0});var dpt=s(aj);RFo=r(dpt,"Wav2Vec2Processor"),dpt.forEach(t),PFo=r(pxe," (UniSpeechSat model)"),pxe.forEach(t),BFo=i(_e),qp=n(_e,"LI",{});var _xe=s(qp);vce=n(_xe,"STRONG",{});var cpt=s(vce);IFo=r(cpt,"vilt"),cpt.forEach(t),NFo=r(_xe," \u2014 "),nj=n(_xe,"A",{href:!0});var fpt=s(nj);qFo=r(fpt,"ViltProcessor"),fpt.forEach(t),jFo=r(_xe," (ViLT model)"),_xe.forEach(t),DFo=i(_e),jp=n(_e,"LI",{});var uxe=s(jp);Fce=n(uxe,"STRONG",{});var mpt=s(Fce);GFo=r(mpt,"vision-text-dual-encoder"),mpt.forEach(t),OFo=r(uxe," \u2014 "),sj=n(uxe,"A",{href:!0});var gpt=s(sj);VFo=r(gpt,"VisionTextDualEncoderProcessor"),gpt.forEach(t),XFo=r(uxe," (VisionTextDualEncoder model)"),uxe.forEach(t),zFo=i(_e),Dp=n(_e,"LI",{});var bxe=s(Dp);Tce=n(bxe,"STRONG",{});var hpt=s(Tce);WFo=r(hpt,"wav2vec2"),hpt.forEach(t),QFo=r(bxe," \u2014 "),lj=n(bxe,"A",{href:!0});var ppt=s(lj);HFo=r(ppt,"Wav2Vec2Processor"),ppt.forEach(t),UFo=r(bxe," (Wav2Vec2 model)"),bxe.forEach(t),JFo=i(_e),Gp=n(_e,"LI",{});var vxe=s(Gp);Mce=n(vxe,"STRONG",{});var _pt=s(Mce);YFo=r(_pt,"wav2vec2-conformer"),_pt.forEach(t),KFo=r(vxe," \u2014 "),ij=n(vxe,"A",{href:!0});var upt=s(ij);ZFo=r(upt,"Wav2Vec2Processor"),upt.forEach(t),eTo=r(vxe," (Wav2Vec2-Conformer model)"),vxe.forEach(t),oTo=i(_e),Op=n(_e,"LI",{});var Fxe=s(Op);Ece=n(Fxe,"STRONG",{});var bpt=s(Ece);rTo=r(bpt,"wavlm"),bpt.forEach(t),tTo=r(Fxe," \u2014 "),dj=n(Fxe,"A",{href:!0});var vpt=s(dj);aTo=r(vpt,"Wav2Vec2Processor"),vpt.forEach(t),nTo=r(Fxe," (WavLM model)"),Fxe.forEach(t),_e.forEach(t),sTo=i(sa),T(Vp.$$.fragment,sa),lTo=i(sa),T(Xp.$$.fragment,sa),sa.forEach(t),iTo=i(tl),zp=n(tl,"DIV",{class:!0});var UWe=s(zp);T(N6.$$.fragment,UWe),dTo=i(UWe),Cce=n(UWe,"P",{});var Fpt=s(Cce);cTo=r(Fpt,"Register a new processor for this class."),Fpt.forEach(t),UWe.forEach(t),tl.forEach(t),XXe=i(f),Vi=n(f,"H2",{class:!0});var JWe=s(Vi);Wp=n(JWe,"A",{id:!0,class:!0,href:!0});var Tpt=s(Wp);wce=n(Tpt,"SPAN",{});var Mpt=s(wce);T(q6.$$.fragment,Mpt),Mpt.forEach(t),Tpt.forEach(t),fTo=i(JWe),Ace=n(JWe,"SPAN",{});var Ept=s(Ace);mTo=r(Ept,"AutoModel"),Ept.forEach(t),JWe.forEach(t),zXe=i(f),$o=n(f,"DIV",{class:!0});var al=s($o);T(j6.$$.fragment,al),gTo=i(al),Xi=n(al,"P",{});var Yre=s(Xi);hTo=r(Yre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),cj=n(Yre,"A",{href:!0});var Cpt=s(cj);pTo=r(Cpt,"from_pretrained()"),Cpt.forEach(t),_To=r(Yre," class method or the "),fj=n(Yre,"A",{href:!0});var wpt=s(fj);uTo=r(wpt,"from_config()"),wpt.forEach(t),bTo=r(Yre,` class
method.`),Yre.forEach(t),vTo=i(al),D6=n(al,"P",{});var YWe=s(D6);FTo=r(YWe,"This class cannot be instantiated directly using "),Lce=n(YWe,"CODE",{});var Apt=s(Lce);TTo=r(Apt,"__init__()"),Apt.forEach(t),MTo=r(YWe," (throws an error)."),YWe.forEach(t),ETo=i(al),it=n(al,"DIV",{class:!0});var _w=s(it);T(G6.$$.fragment,_w),CTo=i(_w),yce=n(_w,"P",{});var Lpt=s(yce);wTo=r(Lpt,"Instantiates one of the base model classes of the library from a configuration."),Lpt.forEach(t),ATo=i(_w),zi=n(_w,"P",{});var Kre=s(zi);LTo=r(Kre,`Note:
Loading a model from its configuration file does `),xce=n(Kre,"STRONG",{});var ypt=s(xce);yTo=r(ypt,"not"),ypt.forEach(t),xTo=r(Kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),mj=n(Kre,"A",{href:!0});var xpt=s(mj);$To=r(xpt,"from_pretrained()"),xpt.forEach(t),kTo=r(Kre," to load the model weights."),Kre.forEach(t),STo=i(_w),T(Qp.$$.fragment,_w),_w.forEach(t),RTo=i(al),Ye=n(al,"DIV",{class:!0});var la=s(Ye);T(O6.$$.fragment,la),PTo=i(la),$ce=n(la,"P",{});var $pt=s($ce);BTo=r($pt,"Instantiate one of the base model classes of the library from a pretrained model."),$pt.forEach(t),ITo=i(la),Ia=n(la,"P",{});var uw=s(Ia);NTo=r(uw,"The model class to instantiate is selected based on the "),kce=n(uw,"CODE",{});var kpt=s(kce);qTo=r(kpt,"model_type"),kpt.forEach(t),jTo=r(uw,` property of the config object (either
passed as an argument or loaded from `),Sce=n(uw,"CODE",{});var Spt=s(Sce);DTo=r(Spt,"pretrained_model_name_or_path"),Spt.forEach(t),GTo=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rce=n(uw,"CODE",{});var Rpt=s(Rce);OTo=r(Rpt,"pretrained_model_name_or_path"),Rpt.forEach(t),VTo=r(uw,":"),uw.forEach(t),XTo=i(la),y=n(la,"UL",{});var x=s(y);Hp=n(x,"LI",{});var Txe=s(Hp);Pce=n(Txe,"STRONG",{});var Ppt=s(Pce);zTo=r(Ppt,"albert"),Ppt.forEach(t),WTo=r(Txe," \u2014 "),gj=n(Txe,"A",{href:!0});var Bpt=s(gj);QTo=r(Bpt,"AlbertModel"),Bpt.forEach(t),HTo=r(Txe," (ALBERT model)"),Txe.forEach(t),UTo=i(x),Up=n(x,"LI",{});var Mxe=s(Up);Bce=n(Mxe,"STRONG",{});var Ipt=s(Bce);JTo=r(Ipt,"bart"),Ipt.forEach(t),YTo=r(Mxe," \u2014 "),hj=n(Mxe,"A",{href:!0});var Npt=s(hj);KTo=r(Npt,"BartModel"),Npt.forEach(t),ZTo=r(Mxe," (BART model)"),Mxe.forEach(t),e7o=i(x),Jp=n(x,"LI",{});var Exe=s(Jp);Ice=n(Exe,"STRONG",{});var qpt=s(Ice);o7o=r(qpt,"beit"),qpt.forEach(t),r7o=r(Exe," \u2014 "),pj=n(Exe,"A",{href:!0});var jpt=s(pj);t7o=r(jpt,"BeitModel"),jpt.forEach(t),a7o=r(Exe," (BEiT model)"),Exe.forEach(t),n7o=i(x),Yp=n(x,"LI",{});var Cxe=s(Yp);Nce=n(Cxe,"STRONG",{});var Dpt=s(Nce);s7o=r(Dpt,"bert"),Dpt.forEach(t),l7o=r(Cxe," \u2014 "),_j=n(Cxe,"A",{href:!0});var Gpt=s(_j);i7o=r(Gpt,"BertModel"),Gpt.forEach(t),d7o=r(Cxe," (BERT model)"),Cxe.forEach(t),c7o=i(x),Kp=n(x,"LI",{});var wxe=s(Kp);qce=n(wxe,"STRONG",{});var Opt=s(qce);f7o=r(Opt,"bert-generation"),Opt.forEach(t),m7o=r(wxe," \u2014 "),uj=n(wxe,"A",{href:!0});var Vpt=s(uj);g7o=r(Vpt,"BertGenerationEncoder"),Vpt.forEach(t),h7o=r(wxe," (Bert Generation model)"),wxe.forEach(t),p7o=i(x),Zp=n(x,"LI",{});var Axe=s(Zp);jce=n(Axe,"STRONG",{});var Xpt=s(jce);_7o=r(Xpt,"big_bird"),Xpt.forEach(t),u7o=r(Axe," \u2014 "),bj=n(Axe,"A",{href:!0});var zpt=s(bj);b7o=r(zpt,"BigBirdModel"),zpt.forEach(t),v7o=r(Axe," (BigBird model)"),Axe.forEach(t),F7o=i(x),e_=n(x,"LI",{});var Lxe=s(e_);Dce=n(Lxe,"STRONG",{});var Wpt=s(Dce);T7o=r(Wpt,"bigbird_pegasus"),Wpt.forEach(t),M7o=r(Lxe," \u2014 "),vj=n(Lxe,"A",{href:!0});var Qpt=s(vj);E7o=r(Qpt,"BigBirdPegasusModel"),Qpt.forEach(t),C7o=r(Lxe," (BigBird-Pegasus model)"),Lxe.forEach(t),w7o=i(x),o_=n(x,"LI",{});var yxe=s(o_);Gce=n(yxe,"STRONG",{});var Hpt=s(Gce);A7o=r(Hpt,"blenderbot"),Hpt.forEach(t),L7o=r(yxe," \u2014 "),Fj=n(yxe,"A",{href:!0});var Upt=s(Fj);y7o=r(Upt,"BlenderbotModel"),Upt.forEach(t),x7o=r(yxe," (Blenderbot model)"),yxe.forEach(t),$7o=i(x),r_=n(x,"LI",{});var xxe=s(r_);Oce=n(xxe,"STRONG",{});var Jpt=s(Oce);k7o=r(Jpt,"blenderbot-small"),Jpt.forEach(t),S7o=r(xxe," \u2014 "),Tj=n(xxe,"A",{href:!0});var Ypt=s(Tj);R7o=r(Ypt,"BlenderbotSmallModel"),Ypt.forEach(t),P7o=r(xxe," (BlenderbotSmall model)"),xxe.forEach(t),B7o=i(x),t_=n(x,"LI",{});var $xe=s(t_);Vce=n($xe,"STRONG",{});var Kpt=s(Vce);I7o=r(Kpt,"bloom"),Kpt.forEach(t),N7o=r($xe," \u2014 "),Mj=n($xe,"A",{href:!0});var Zpt=s(Mj);q7o=r(Zpt,"BloomModel"),Zpt.forEach(t),j7o=r($xe," (BLOOM model)"),$xe.forEach(t),D7o=i(x),a_=n(x,"LI",{});var kxe=s(a_);Xce=n(kxe,"STRONG",{});var e_t=s(Xce);G7o=r(e_t,"camembert"),e_t.forEach(t),O7o=r(kxe," \u2014 "),Ej=n(kxe,"A",{href:!0});var o_t=s(Ej);V7o=r(o_t,"CamembertModel"),o_t.forEach(t),X7o=r(kxe," (CamemBERT model)"),kxe.forEach(t),z7o=i(x),n_=n(x,"LI",{});var Sxe=s(n_);zce=n(Sxe,"STRONG",{});var r_t=s(zce);W7o=r(r_t,"canine"),r_t.forEach(t),Q7o=r(Sxe," \u2014 "),Cj=n(Sxe,"A",{href:!0});var t_t=s(Cj);H7o=r(t_t,"CanineModel"),t_t.forEach(t),U7o=r(Sxe," (CANINE model)"),Sxe.forEach(t),J7o=i(x),s_=n(x,"LI",{});var Rxe=s(s_);Wce=n(Rxe,"STRONG",{});var a_t=s(Wce);Y7o=r(a_t,"clip"),a_t.forEach(t),K7o=r(Rxe," \u2014 "),wj=n(Rxe,"A",{href:!0});var n_t=s(wj);Z7o=r(n_t,"CLIPModel"),n_t.forEach(t),e8o=r(Rxe," (CLIP model)"),Rxe.forEach(t),o8o=i(x),l_=n(x,"LI",{});var Pxe=s(l_);Qce=n(Pxe,"STRONG",{});var s_t=s(Qce);r8o=r(s_t,"codegen"),s_t.forEach(t),t8o=r(Pxe," \u2014 "),Aj=n(Pxe,"A",{href:!0});var l_t=s(Aj);a8o=r(l_t,"CodeGenModel"),l_t.forEach(t),n8o=r(Pxe," (CodeGen model)"),Pxe.forEach(t),s8o=i(x),i_=n(x,"LI",{});var Bxe=s(i_);Hce=n(Bxe,"STRONG",{});var i_t=s(Hce);l8o=r(i_t,"convbert"),i_t.forEach(t),i8o=r(Bxe," \u2014 "),Lj=n(Bxe,"A",{href:!0});var d_t=s(Lj);d8o=r(d_t,"ConvBertModel"),d_t.forEach(t),c8o=r(Bxe," (ConvBERT model)"),Bxe.forEach(t),f8o=i(x),d_=n(x,"LI",{});var Ixe=s(d_);Uce=n(Ixe,"STRONG",{});var c_t=s(Uce);m8o=r(c_t,"convnext"),c_t.forEach(t),g8o=r(Ixe," \u2014 "),yj=n(Ixe,"A",{href:!0});var f_t=s(yj);h8o=r(f_t,"ConvNextModel"),f_t.forEach(t),p8o=r(Ixe," (ConvNeXT model)"),Ixe.forEach(t),_8o=i(x),c_=n(x,"LI",{});var Nxe=s(c_);Jce=n(Nxe,"STRONG",{});var m_t=s(Jce);u8o=r(m_t,"ctrl"),m_t.forEach(t),b8o=r(Nxe," \u2014 "),xj=n(Nxe,"A",{href:!0});var g_t=s(xj);v8o=r(g_t,"CTRLModel"),g_t.forEach(t),F8o=r(Nxe," (CTRL model)"),Nxe.forEach(t),T8o=i(x),f_=n(x,"LI",{});var qxe=s(f_);Yce=n(qxe,"STRONG",{});var h_t=s(Yce);M8o=r(h_t,"cvt"),h_t.forEach(t),E8o=r(qxe," \u2014 "),$j=n(qxe,"A",{href:!0});var p_t=s($j);C8o=r(p_t,"CvtModel"),p_t.forEach(t),w8o=r(qxe," (CvT model)"),qxe.forEach(t),A8o=i(x),m_=n(x,"LI",{});var jxe=s(m_);Kce=n(jxe,"STRONG",{});var __t=s(Kce);L8o=r(__t,"data2vec-audio"),__t.forEach(t),y8o=r(jxe," \u2014 "),kj=n(jxe,"A",{href:!0});var u_t=s(kj);x8o=r(u_t,"Data2VecAudioModel"),u_t.forEach(t),$8o=r(jxe," (Data2VecAudio model)"),jxe.forEach(t),k8o=i(x),g_=n(x,"LI",{});var Dxe=s(g_);Zce=n(Dxe,"STRONG",{});var b_t=s(Zce);S8o=r(b_t,"data2vec-text"),b_t.forEach(t),R8o=r(Dxe," \u2014 "),Sj=n(Dxe,"A",{href:!0});var v_t=s(Sj);P8o=r(v_t,"Data2VecTextModel"),v_t.forEach(t),B8o=r(Dxe," (Data2VecText model)"),Dxe.forEach(t),I8o=i(x),h_=n(x,"LI",{});var Gxe=s(h_);efe=n(Gxe,"STRONG",{});var F_t=s(efe);N8o=r(F_t,"data2vec-vision"),F_t.forEach(t),q8o=r(Gxe," \u2014 "),Rj=n(Gxe,"A",{href:!0});var T_t=s(Rj);j8o=r(T_t,"Data2VecVisionModel"),T_t.forEach(t),D8o=r(Gxe," (Data2VecVision model)"),Gxe.forEach(t),G8o=i(x),p_=n(x,"LI",{});var Oxe=s(p_);ofe=n(Oxe,"STRONG",{});var M_t=s(ofe);O8o=r(M_t,"deberta"),M_t.forEach(t),V8o=r(Oxe," \u2014 "),Pj=n(Oxe,"A",{href:!0});var E_t=s(Pj);X8o=r(E_t,"DebertaModel"),E_t.forEach(t),z8o=r(Oxe," (DeBERTa model)"),Oxe.forEach(t),W8o=i(x),__=n(x,"LI",{});var Vxe=s(__);rfe=n(Vxe,"STRONG",{});var C_t=s(rfe);Q8o=r(C_t,"deberta-v2"),C_t.forEach(t),H8o=r(Vxe," \u2014 "),Bj=n(Vxe,"A",{href:!0});var w_t=s(Bj);U8o=r(w_t,"DebertaV2Model"),w_t.forEach(t),J8o=r(Vxe," (DeBERTa-v2 model)"),Vxe.forEach(t),Y8o=i(x),u_=n(x,"LI",{});var Xxe=s(u_);tfe=n(Xxe,"STRONG",{});var A_t=s(tfe);K8o=r(A_t,"decision_transformer"),A_t.forEach(t),Z8o=r(Xxe," \u2014 "),Ij=n(Xxe,"A",{href:!0});var L_t=s(Ij);e9o=r(L_t,"DecisionTransformerModel"),L_t.forEach(t),o9o=r(Xxe," (Decision Transformer model)"),Xxe.forEach(t),r9o=i(x),b_=n(x,"LI",{});var zxe=s(b_);afe=n(zxe,"STRONG",{});var y_t=s(afe);t9o=r(y_t,"deit"),y_t.forEach(t),a9o=r(zxe," \u2014 "),Nj=n(zxe,"A",{href:!0});var x_t=s(Nj);n9o=r(x_t,"DeiTModel"),x_t.forEach(t),s9o=r(zxe," (DeiT model)"),zxe.forEach(t),l9o=i(x),v_=n(x,"LI",{});var Wxe=s(v_);nfe=n(Wxe,"STRONG",{});var $_t=s(nfe);i9o=r($_t,"detr"),$_t.forEach(t),d9o=r(Wxe," \u2014 "),qj=n(Wxe,"A",{href:!0});var k_t=s(qj);c9o=r(k_t,"DetrModel"),k_t.forEach(t),f9o=r(Wxe," (DETR model)"),Wxe.forEach(t),m9o=i(x),F_=n(x,"LI",{});var Qxe=s(F_);sfe=n(Qxe,"STRONG",{});var S_t=s(sfe);g9o=r(S_t,"distilbert"),S_t.forEach(t),h9o=r(Qxe," \u2014 "),jj=n(Qxe,"A",{href:!0});var R_t=s(jj);p9o=r(R_t,"DistilBertModel"),R_t.forEach(t),_9o=r(Qxe," (DistilBERT model)"),Qxe.forEach(t),u9o=i(x),T_=n(x,"LI",{});var Hxe=s(T_);lfe=n(Hxe,"STRONG",{});var P_t=s(lfe);b9o=r(P_t,"dpr"),P_t.forEach(t),v9o=r(Hxe," \u2014 "),Dj=n(Hxe,"A",{href:!0});var B_t=s(Dj);F9o=r(B_t,"DPRQuestionEncoder"),B_t.forEach(t),T9o=r(Hxe," (DPR model)"),Hxe.forEach(t),M9o=i(x),M_=n(x,"LI",{});var Uxe=s(M_);ife=n(Uxe,"STRONG",{});var I_t=s(ife);E9o=r(I_t,"dpt"),I_t.forEach(t),C9o=r(Uxe," \u2014 "),Gj=n(Uxe,"A",{href:!0});var N_t=s(Gj);w9o=r(N_t,"DPTModel"),N_t.forEach(t),A9o=r(Uxe," (DPT model)"),Uxe.forEach(t),L9o=i(x),E_=n(x,"LI",{});var Jxe=s(E_);dfe=n(Jxe,"STRONG",{});var q_t=s(dfe);y9o=r(q_t,"electra"),q_t.forEach(t),x9o=r(Jxe," \u2014 "),Oj=n(Jxe,"A",{href:!0});var j_t=s(Oj);$9o=r(j_t,"ElectraModel"),j_t.forEach(t),k9o=r(Jxe," (ELECTRA model)"),Jxe.forEach(t),S9o=i(x),C_=n(x,"LI",{});var Yxe=s(C_);cfe=n(Yxe,"STRONG",{});var D_t=s(cfe);R9o=r(D_t,"flaubert"),D_t.forEach(t),P9o=r(Yxe," \u2014 "),Vj=n(Yxe,"A",{href:!0});var G_t=s(Vj);B9o=r(G_t,"FlaubertModel"),G_t.forEach(t),I9o=r(Yxe," (FlauBERT model)"),Yxe.forEach(t),N9o=i(x),w_=n(x,"LI",{});var Kxe=s(w_);ffe=n(Kxe,"STRONG",{});var O_t=s(ffe);q9o=r(O_t,"flava"),O_t.forEach(t),j9o=r(Kxe," \u2014 "),Xj=n(Kxe,"A",{href:!0});var V_t=s(Xj);D9o=r(V_t,"FlavaModel"),V_t.forEach(t),G9o=r(Kxe," (FLAVA model)"),Kxe.forEach(t),O9o=i(x),A_=n(x,"LI",{});var Zxe=s(A_);mfe=n(Zxe,"STRONG",{});var X_t=s(mfe);V9o=r(X_t,"fnet"),X_t.forEach(t),X9o=r(Zxe," \u2014 "),zj=n(Zxe,"A",{href:!0});var z_t=s(zj);z9o=r(z_t,"FNetModel"),z_t.forEach(t),W9o=r(Zxe," (FNet model)"),Zxe.forEach(t),Q9o=i(x),L_=n(x,"LI",{});var e$e=s(L_);gfe=n(e$e,"STRONG",{});var W_t=s(gfe);H9o=r(W_t,"fsmt"),W_t.forEach(t),U9o=r(e$e," \u2014 "),Wj=n(e$e,"A",{href:!0});var Q_t=s(Wj);J9o=r(Q_t,"FSMTModel"),Q_t.forEach(t),Y9o=r(e$e," (FairSeq Machine-Translation model)"),e$e.forEach(t),K9o=i(x),Us=n(x,"LI",{});var DS=s(Us);hfe=n(DS,"STRONG",{});var H_t=s(hfe);Z9o=r(H_t,"funnel"),H_t.forEach(t),eMo=r(DS," \u2014 "),Qj=n(DS,"A",{href:!0});var U_t=s(Qj);oMo=r(U_t,"FunnelModel"),U_t.forEach(t),rMo=r(DS," or "),Hj=n(DS,"A",{href:!0});var J_t=s(Hj);tMo=r(J_t,"FunnelBaseModel"),J_t.forEach(t),aMo=r(DS," (Funnel Transformer model)"),DS.forEach(t),nMo=i(x),y_=n(x,"LI",{});var o$e=s(y_);pfe=n(o$e,"STRONG",{});var Y_t=s(pfe);sMo=r(Y_t,"glpn"),Y_t.forEach(t),lMo=r(o$e," \u2014 "),Uj=n(o$e,"A",{href:!0});var K_t=s(Uj);iMo=r(K_t,"GLPNModel"),K_t.forEach(t),dMo=r(o$e," (GLPN model)"),o$e.forEach(t),cMo=i(x),x_=n(x,"LI",{});var r$e=s(x_);_fe=n(r$e,"STRONG",{});var Z_t=s(_fe);fMo=r(Z_t,"gpt2"),Z_t.forEach(t),mMo=r(r$e," \u2014 "),Jj=n(r$e,"A",{href:!0});var eut=s(Jj);gMo=r(eut,"GPT2Model"),eut.forEach(t),hMo=r(r$e," (OpenAI GPT-2 model)"),r$e.forEach(t),pMo=i(x),$_=n(x,"LI",{});var t$e=s($_);ufe=n(t$e,"STRONG",{});var out=s(ufe);_Mo=r(out,"gpt_neo"),out.forEach(t),uMo=r(t$e," \u2014 "),Yj=n(t$e,"A",{href:!0});var rut=s(Yj);bMo=r(rut,"GPTNeoModel"),rut.forEach(t),vMo=r(t$e," (GPT Neo model)"),t$e.forEach(t),FMo=i(x),k_=n(x,"LI",{});var a$e=s(k_);bfe=n(a$e,"STRONG",{});var tut=s(bfe);TMo=r(tut,"gpt_neox"),tut.forEach(t),MMo=r(a$e," \u2014 "),Kj=n(a$e,"A",{href:!0});var aut=s(Kj);EMo=r(aut,"GPTNeoXModel"),aut.forEach(t),CMo=r(a$e," (GPT NeoX model)"),a$e.forEach(t),wMo=i(x),S_=n(x,"LI",{});var n$e=s(S_);vfe=n(n$e,"STRONG",{});var nut=s(vfe);AMo=r(nut,"gptj"),nut.forEach(t),LMo=r(n$e," \u2014 "),Zj=n(n$e,"A",{href:!0});var sut=s(Zj);yMo=r(sut,"GPTJModel"),sut.forEach(t),xMo=r(n$e," (GPT-J model)"),n$e.forEach(t),$Mo=i(x),R_=n(x,"LI",{});var s$e=s(R_);Ffe=n(s$e,"STRONG",{});var lut=s(Ffe);kMo=r(lut,"groupvit"),lut.forEach(t),SMo=r(s$e," \u2014 "),eD=n(s$e,"A",{href:!0});var iut=s(eD);RMo=r(iut,"GroupViTModel"),iut.forEach(t),PMo=r(s$e," (GroupViT model)"),s$e.forEach(t),BMo=i(x),P_=n(x,"LI",{});var l$e=s(P_);Tfe=n(l$e,"STRONG",{});var dut=s(Tfe);IMo=r(dut,"hubert"),dut.forEach(t),NMo=r(l$e," \u2014 "),oD=n(l$e,"A",{href:!0});var cut=s(oD);qMo=r(cut,"HubertModel"),cut.forEach(t),jMo=r(l$e," (Hubert model)"),l$e.forEach(t),DMo=i(x),B_=n(x,"LI",{});var i$e=s(B_);Mfe=n(i$e,"STRONG",{});var fut=s(Mfe);GMo=r(fut,"ibert"),fut.forEach(t),OMo=r(i$e," \u2014 "),rD=n(i$e,"A",{href:!0});var mut=s(rD);VMo=r(mut,"IBertModel"),mut.forEach(t),XMo=r(i$e," (I-BERT model)"),i$e.forEach(t),zMo=i(x),I_=n(x,"LI",{});var d$e=s(I_);Efe=n(d$e,"STRONG",{});var gut=s(Efe);WMo=r(gut,"imagegpt"),gut.forEach(t),QMo=r(d$e," \u2014 "),tD=n(d$e,"A",{href:!0});var hut=s(tD);HMo=r(hut,"ImageGPTModel"),hut.forEach(t),UMo=r(d$e," (ImageGPT model)"),d$e.forEach(t),JMo=i(x),N_=n(x,"LI",{});var c$e=s(N_);Cfe=n(c$e,"STRONG",{});var put=s(Cfe);YMo=r(put,"layoutlm"),put.forEach(t),KMo=r(c$e," \u2014 "),aD=n(c$e,"A",{href:!0});var _ut=s(aD);ZMo=r(_ut,"LayoutLMModel"),_ut.forEach(t),e4o=r(c$e," (LayoutLM model)"),c$e.forEach(t),o4o=i(x),q_=n(x,"LI",{});var f$e=s(q_);wfe=n(f$e,"STRONG",{});var uut=s(wfe);r4o=r(uut,"layoutlmv2"),uut.forEach(t),t4o=r(f$e," \u2014 "),nD=n(f$e,"A",{href:!0});var but=s(nD);a4o=r(but,"LayoutLMv2Model"),but.forEach(t),n4o=r(f$e," (LayoutLMv2 model)"),f$e.forEach(t),s4o=i(x),j_=n(x,"LI",{});var m$e=s(j_);Afe=n(m$e,"STRONG",{});var vut=s(Afe);l4o=r(vut,"layoutlmv3"),vut.forEach(t),i4o=r(m$e," \u2014 "),sD=n(m$e,"A",{href:!0});var Fut=s(sD);d4o=r(Fut,"LayoutLMv3Model"),Fut.forEach(t),c4o=r(m$e," (LayoutLMv3 model)"),m$e.forEach(t),f4o=i(x),D_=n(x,"LI",{});var g$e=s(D_);Lfe=n(g$e,"STRONG",{});var Tut=s(Lfe);m4o=r(Tut,"led"),Tut.forEach(t),g4o=r(g$e," \u2014 "),lD=n(g$e,"A",{href:!0});var Mut=s(lD);h4o=r(Mut,"LEDModel"),Mut.forEach(t),p4o=r(g$e," (LED model)"),g$e.forEach(t),_4o=i(x),G_=n(x,"LI",{});var h$e=s(G_);yfe=n(h$e,"STRONG",{});var Eut=s(yfe);u4o=r(Eut,"levit"),Eut.forEach(t),b4o=r(h$e," \u2014 "),iD=n(h$e,"A",{href:!0});var Cut=s(iD);v4o=r(Cut,"LevitModel"),Cut.forEach(t),F4o=r(h$e," (LeViT model)"),h$e.forEach(t),T4o=i(x),O_=n(x,"LI",{});var p$e=s(O_);xfe=n(p$e,"STRONG",{});var wut=s(xfe);M4o=r(wut,"longformer"),wut.forEach(t),E4o=r(p$e," \u2014 "),dD=n(p$e,"A",{href:!0});var Aut=s(dD);C4o=r(Aut,"LongformerModel"),Aut.forEach(t),w4o=r(p$e," (Longformer model)"),p$e.forEach(t),A4o=i(x),V_=n(x,"LI",{});var _$e=s(V_);$fe=n(_$e,"STRONG",{});var Lut=s($fe);L4o=r(Lut,"longt5"),Lut.forEach(t),y4o=r(_$e," \u2014 "),cD=n(_$e,"A",{href:!0});var yut=s(cD);x4o=r(yut,"LongT5Model"),yut.forEach(t),$4o=r(_$e," (LongT5 model)"),_$e.forEach(t),k4o=i(x),X_=n(x,"LI",{});var u$e=s(X_);kfe=n(u$e,"STRONG",{});var xut=s(kfe);S4o=r(xut,"luke"),xut.forEach(t),R4o=r(u$e," \u2014 "),fD=n(u$e,"A",{href:!0});var $ut=s(fD);P4o=r($ut,"LukeModel"),$ut.forEach(t),B4o=r(u$e," (LUKE model)"),u$e.forEach(t),I4o=i(x),z_=n(x,"LI",{});var b$e=s(z_);Sfe=n(b$e,"STRONG",{});var kut=s(Sfe);N4o=r(kut,"lxmert"),kut.forEach(t),q4o=r(b$e," \u2014 "),mD=n(b$e,"A",{href:!0});var Sut=s(mD);j4o=r(Sut,"LxmertModel"),Sut.forEach(t),D4o=r(b$e," (LXMERT model)"),b$e.forEach(t),G4o=i(x),W_=n(x,"LI",{});var v$e=s(W_);Rfe=n(v$e,"STRONG",{});var Rut=s(Rfe);O4o=r(Rut,"m2m_100"),Rut.forEach(t),V4o=r(v$e," \u2014 "),gD=n(v$e,"A",{href:!0});var Put=s(gD);X4o=r(Put,"M2M100Model"),Put.forEach(t),z4o=r(v$e," (M2M100 model)"),v$e.forEach(t),W4o=i(x),Q_=n(x,"LI",{});var F$e=s(Q_);Pfe=n(F$e,"STRONG",{});var But=s(Pfe);Q4o=r(But,"marian"),But.forEach(t),H4o=r(F$e," \u2014 "),hD=n(F$e,"A",{href:!0});var Iut=s(hD);U4o=r(Iut,"MarianModel"),Iut.forEach(t),J4o=r(F$e," (Marian model)"),F$e.forEach(t),Y4o=i(x),H_=n(x,"LI",{});var T$e=s(H_);Bfe=n(T$e,"STRONG",{});var Nut=s(Bfe);K4o=r(Nut,"maskformer"),Nut.forEach(t),Z4o=r(T$e," \u2014 "),pD=n(T$e,"A",{href:!0});var qut=s(pD);eEo=r(qut,"MaskFormerModel"),qut.forEach(t),oEo=r(T$e," (MaskFormer model)"),T$e.forEach(t),rEo=i(x),U_=n(x,"LI",{});var M$e=s(U_);Ife=n(M$e,"STRONG",{});var jut=s(Ife);tEo=r(jut,"mbart"),jut.forEach(t),aEo=r(M$e," \u2014 "),_D=n(M$e,"A",{href:!0});var Dut=s(_D);nEo=r(Dut,"MBartModel"),Dut.forEach(t),sEo=r(M$e," (mBART model)"),M$e.forEach(t),lEo=i(x),J_=n(x,"LI",{});var E$e=s(J_);Nfe=n(E$e,"STRONG",{});var Gut=s(Nfe);iEo=r(Gut,"mctct"),Gut.forEach(t),dEo=r(E$e," \u2014 "),uD=n(E$e,"A",{href:!0});var Out=s(uD);cEo=r(Out,"MCTCTModel"),Out.forEach(t),fEo=r(E$e," (M-CTC-T model)"),E$e.forEach(t),mEo=i(x),Y_=n(x,"LI",{});var C$e=s(Y_);qfe=n(C$e,"STRONG",{});var Vut=s(qfe);gEo=r(Vut,"megatron-bert"),Vut.forEach(t),hEo=r(C$e," \u2014 "),bD=n(C$e,"A",{href:!0});var Xut=s(bD);pEo=r(Xut,"MegatronBertModel"),Xut.forEach(t),_Eo=r(C$e," (Megatron-BERT model)"),C$e.forEach(t),uEo=i(x),K_=n(x,"LI",{});var w$e=s(K_);jfe=n(w$e,"STRONG",{});var zut=s(jfe);bEo=r(zut,"mobilebert"),zut.forEach(t),vEo=r(w$e," \u2014 "),vD=n(w$e,"A",{href:!0});var Wut=s(vD);FEo=r(Wut,"MobileBertModel"),Wut.forEach(t),TEo=r(w$e," (MobileBERT model)"),w$e.forEach(t),MEo=i(x),Z_=n(x,"LI",{});var A$e=s(Z_);Dfe=n(A$e,"STRONG",{});var Qut=s(Dfe);EEo=r(Qut,"mobilevit"),Qut.forEach(t),CEo=r(A$e," \u2014 "),FD=n(A$e,"A",{href:!0});var Hut=s(FD);wEo=r(Hut,"MobileViTModel"),Hut.forEach(t),AEo=r(A$e," (MobileViT model)"),A$e.forEach(t),LEo=i(x),eu=n(x,"LI",{});var L$e=s(eu);Gfe=n(L$e,"STRONG",{});var Uut=s(Gfe);yEo=r(Uut,"mpnet"),Uut.forEach(t),xEo=r(L$e," \u2014 "),TD=n(L$e,"A",{href:!0});var Jut=s(TD);$Eo=r(Jut,"MPNetModel"),Jut.forEach(t),kEo=r(L$e," (MPNet model)"),L$e.forEach(t),SEo=i(x),ou=n(x,"LI",{});var y$e=s(ou);Ofe=n(y$e,"STRONG",{});var Yut=s(Ofe);REo=r(Yut,"mt5"),Yut.forEach(t),PEo=r(y$e," \u2014 "),MD=n(y$e,"A",{href:!0});var Kut=s(MD);BEo=r(Kut,"MT5Model"),Kut.forEach(t),IEo=r(y$e," (MT5 model)"),y$e.forEach(t),NEo=i(x),ru=n(x,"LI",{});var x$e=s(ru);Vfe=n(x$e,"STRONG",{});var Zut=s(Vfe);qEo=r(Zut,"mvp"),Zut.forEach(t),jEo=r(x$e," \u2014 "),ED=n(x$e,"A",{href:!0});var e1t=s(ED);DEo=r(e1t,"MvpModel"),e1t.forEach(t),GEo=r(x$e," (MVP model)"),x$e.forEach(t),OEo=i(x),tu=n(x,"LI",{});var $$e=s(tu);Xfe=n($$e,"STRONG",{});var o1t=s(Xfe);VEo=r(o1t,"nezha"),o1t.forEach(t),XEo=r($$e," \u2014 "),CD=n($$e,"A",{href:!0});var r1t=s(CD);zEo=r(r1t,"NezhaModel"),r1t.forEach(t),WEo=r($$e," (Nezha model)"),$$e.forEach(t),QEo=i(x),au=n(x,"LI",{});var k$e=s(au);zfe=n(k$e,"STRONG",{});var t1t=s(zfe);HEo=r(t1t,"nllb"),t1t.forEach(t),UEo=r(k$e," \u2014 "),wD=n(k$e,"A",{href:!0});var a1t=s(wD);JEo=r(a1t,"M2M100Model"),a1t.forEach(t),YEo=r(k$e," (NLLB model)"),k$e.forEach(t),KEo=i(x),nu=n(x,"LI",{});var S$e=s(nu);Wfe=n(S$e,"STRONG",{});var n1t=s(Wfe);ZEo=r(n1t,"nystromformer"),n1t.forEach(t),eCo=r(S$e," \u2014 "),AD=n(S$e,"A",{href:!0});var s1t=s(AD);oCo=r(s1t,"NystromformerModel"),s1t.forEach(t),rCo=r(S$e," (Nystr\xF6mformer model)"),S$e.forEach(t),tCo=i(x),su=n(x,"LI",{});var R$e=s(su);Qfe=n(R$e,"STRONG",{});var l1t=s(Qfe);aCo=r(l1t,"openai-gpt"),l1t.forEach(t),nCo=r(R$e," \u2014 "),LD=n(R$e,"A",{href:!0});var i1t=s(LD);sCo=r(i1t,"OpenAIGPTModel"),i1t.forEach(t),lCo=r(R$e," (OpenAI GPT model)"),R$e.forEach(t),iCo=i(x),lu=n(x,"LI",{});var P$e=s(lu);Hfe=n(P$e,"STRONG",{});var d1t=s(Hfe);dCo=r(d1t,"opt"),d1t.forEach(t),cCo=r(P$e," \u2014 "),yD=n(P$e,"A",{href:!0});var c1t=s(yD);fCo=r(c1t,"OPTModel"),c1t.forEach(t),mCo=r(P$e," (OPT model)"),P$e.forEach(t),gCo=i(x),iu=n(x,"LI",{});var B$e=s(iu);Ufe=n(B$e,"STRONG",{});var f1t=s(Ufe);hCo=r(f1t,"owlvit"),f1t.forEach(t),pCo=r(B$e," \u2014 "),xD=n(B$e,"A",{href:!0});var m1t=s(xD);_Co=r(m1t,"OwlViTModel"),m1t.forEach(t),uCo=r(B$e," (OWL-ViT model)"),B$e.forEach(t),bCo=i(x),du=n(x,"LI",{});var I$e=s(du);Jfe=n(I$e,"STRONG",{});var g1t=s(Jfe);vCo=r(g1t,"pegasus"),g1t.forEach(t),FCo=r(I$e," \u2014 "),$D=n(I$e,"A",{href:!0});var h1t=s($D);TCo=r(h1t,"PegasusModel"),h1t.forEach(t),MCo=r(I$e," (Pegasus model)"),I$e.forEach(t),ECo=i(x),cu=n(x,"LI",{});var N$e=s(cu);Yfe=n(N$e,"STRONG",{});var p1t=s(Yfe);CCo=r(p1t,"perceiver"),p1t.forEach(t),wCo=r(N$e," \u2014 "),kD=n(N$e,"A",{href:!0});var _1t=s(kD);ACo=r(_1t,"PerceiverModel"),_1t.forEach(t),LCo=r(N$e," (Perceiver model)"),N$e.forEach(t),yCo=i(x),fu=n(x,"LI",{});var q$e=s(fu);Kfe=n(q$e,"STRONG",{});var u1t=s(Kfe);xCo=r(u1t,"plbart"),u1t.forEach(t),$Co=r(q$e," \u2014 "),SD=n(q$e,"A",{href:!0});var b1t=s(SD);kCo=r(b1t,"PLBartModel"),b1t.forEach(t),SCo=r(q$e," (PLBart model)"),q$e.forEach(t),RCo=i(x),mu=n(x,"LI",{});var j$e=s(mu);Zfe=n(j$e,"STRONG",{});var v1t=s(Zfe);PCo=r(v1t,"poolformer"),v1t.forEach(t),BCo=r(j$e," \u2014 "),RD=n(j$e,"A",{href:!0});var F1t=s(RD);ICo=r(F1t,"PoolFormerModel"),F1t.forEach(t),NCo=r(j$e," (PoolFormer model)"),j$e.forEach(t),qCo=i(x),gu=n(x,"LI",{});var D$e=s(gu);eme=n(D$e,"STRONG",{});var T1t=s(eme);jCo=r(T1t,"prophetnet"),T1t.forEach(t),DCo=r(D$e," \u2014 "),PD=n(D$e,"A",{href:!0});var M1t=s(PD);GCo=r(M1t,"ProphetNetModel"),M1t.forEach(t),OCo=r(D$e," (ProphetNet model)"),D$e.forEach(t),VCo=i(x),hu=n(x,"LI",{});var G$e=s(hu);ome=n(G$e,"STRONG",{});var E1t=s(ome);XCo=r(E1t,"qdqbert"),E1t.forEach(t),zCo=r(G$e," \u2014 "),BD=n(G$e,"A",{href:!0});var C1t=s(BD);WCo=r(C1t,"QDQBertModel"),C1t.forEach(t),QCo=r(G$e," (QDQBert model)"),G$e.forEach(t),HCo=i(x),pu=n(x,"LI",{});var O$e=s(pu);rme=n(O$e,"STRONG",{});var w1t=s(rme);UCo=r(w1t,"reformer"),w1t.forEach(t),JCo=r(O$e," \u2014 "),ID=n(O$e,"A",{href:!0});var A1t=s(ID);YCo=r(A1t,"ReformerModel"),A1t.forEach(t),KCo=r(O$e," (Reformer model)"),O$e.forEach(t),ZCo=i(x),_u=n(x,"LI",{});var V$e=s(_u);tme=n(V$e,"STRONG",{});var L1t=s(tme);e5o=r(L1t,"regnet"),L1t.forEach(t),o5o=r(V$e," \u2014 "),ND=n(V$e,"A",{href:!0});var y1t=s(ND);r5o=r(y1t,"RegNetModel"),y1t.forEach(t),t5o=r(V$e," (RegNet model)"),V$e.forEach(t),a5o=i(x),uu=n(x,"LI",{});var X$e=s(uu);ame=n(X$e,"STRONG",{});var x1t=s(ame);n5o=r(x1t,"rembert"),x1t.forEach(t),s5o=r(X$e," \u2014 "),qD=n(X$e,"A",{href:!0});var $1t=s(qD);l5o=r($1t,"RemBertModel"),$1t.forEach(t),i5o=r(X$e," (RemBERT model)"),X$e.forEach(t),d5o=i(x),bu=n(x,"LI",{});var z$e=s(bu);nme=n(z$e,"STRONG",{});var k1t=s(nme);c5o=r(k1t,"resnet"),k1t.forEach(t),f5o=r(z$e," \u2014 "),jD=n(z$e,"A",{href:!0});var S1t=s(jD);m5o=r(S1t,"ResNetModel"),S1t.forEach(t),g5o=r(z$e," (ResNet model)"),z$e.forEach(t),h5o=i(x),vu=n(x,"LI",{});var W$e=s(vu);sme=n(W$e,"STRONG",{});var R1t=s(sme);p5o=r(R1t,"retribert"),R1t.forEach(t),_5o=r(W$e," \u2014 "),DD=n(W$e,"A",{href:!0});var P1t=s(DD);u5o=r(P1t,"RetriBertModel"),P1t.forEach(t),b5o=r(W$e," (RetriBERT model)"),W$e.forEach(t),v5o=i(x),Fu=n(x,"LI",{});var Q$e=s(Fu);lme=n(Q$e,"STRONG",{});var B1t=s(lme);F5o=r(B1t,"roberta"),B1t.forEach(t),T5o=r(Q$e," \u2014 "),GD=n(Q$e,"A",{href:!0});var I1t=s(GD);M5o=r(I1t,"RobertaModel"),I1t.forEach(t),E5o=r(Q$e," (RoBERTa model)"),Q$e.forEach(t),C5o=i(x),Tu=n(x,"LI",{});var H$e=s(Tu);ime=n(H$e,"STRONG",{});var N1t=s(ime);w5o=r(N1t,"roformer"),N1t.forEach(t),A5o=r(H$e," \u2014 "),OD=n(H$e,"A",{href:!0});var q1t=s(OD);L5o=r(q1t,"RoFormerModel"),q1t.forEach(t),y5o=r(H$e," (RoFormer model)"),H$e.forEach(t),x5o=i(x),Mu=n(x,"LI",{});var U$e=s(Mu);dme=n(U$e,"STRONG",{});var j1t=s(dme);$5o=r(j1t,"segformer"),j1t.forEach(t),k5o=r(U$e," \u2014 "),VD=n(U$e,"A",{href:!0});var D1t=s(VD);S5o=r(D1t,"SegformerModel"),D1t.forEach(t),R5o=r(U$e," (SegFormer model)"),U$e.forEach(t),P5o=i(x),Eu=n(x,"LI",{});var J$e=s(Eu);cme=n(J$e,"STRONG",{});var G1t=s(cme);B5o=r(G1t,"sew"),G1t.forEach(t),I5o=r(J$e," \u2014 "),XD=n(J$e,"A",{href:!0});var O1t=s(XD);N5o=r(O1t,"SEWModel"),O1t.forEach(t),q5o=r(J$e," (SEW model)"),J$e.forEach(t),j5o=i(x),Cu=n(x,"LI",{});var Y$e=s(Cu);fme=n(Y$e,"STRONG",{});var V1t=s(fme);D5o=r(V1t,"sew-d"),V1t.forEach(t),G5o=r(Y$e," \u2014 "),zD=n(Y$e,"A",{href:!0});var X1t=s(zD);O5o=r(X1t,"SEWDModel"),X1t.forEach(t),V5o=r(Y$e," (SEW-D model)"),Y$e.forEach(t),X5o=i(x),wu=n(x,"LI",{});var K$e=s(wu);mme=n(K$e,"STRONG",{});var z1t=s(mme);z5o=r(z1t,"speech_to_text"),z1t.forEach(t),W5o=r(K$e," \u2014 "),WD=n(K$e,"A",{href:!0});var W1t=s(WD);Q5o=r(W1t,"Speech2TextModel"),W1t.forEach(t),H5o=r(K$e," (Speech2Text model)"),K$e.forEach(t),U5o=i(x),Au=n(x,"LI",{});var Z$e=s(Au);gme=n(Z$e,"STRONG",{});var Q1t=s(gme);J5o=r(Q1t,"splinter"),Q1t.forEach(t),Y5o=r(Z$e," \u2014 "),QD=n(Z$e,"A",{href:!0});var H1t=s(QD);K5o=r(H1t,"SplinterModel"),H1t.forEach(t),Z5o=r(Z$e," (Splinter model)"),Z$e.forEach(t),e0o=i(x),Lu=n(x,"LI",{});var eke=s(Lu);hme=n(eke,"STRONG",{});var U1t=s(hme);o0o=r(U1t,"squeezebert"),U1t.forEach(t),r0o=r(eke," \u2014 "),HD=n(eke,"A",{href:!0});var J1t=s(HD);t0o=r(J1t,"SqueezeBertModel"),J1t.forEach(t),a0o=r(eke," (SqueezeBERT model)"),eke.forEach(t),n0o=i(x),yu=n(x,"LI",{});var oke=s(yu);pme=n(oke,"STRONG",{});var Y1t=s(pme);s0o=r(Y1t,"swin"),Y1t.forEach(t),l0o=r(oke," \u2014 "),UD=n(oke,"A",{href:!0});var K1t=s(UD);i0o=r(K1t,"SwinModel"),K1t.forEach(t),d0o=r(oke," (Swin Transformer model)"),oke.forEach(t),c0o=i(x),xu=n(x,"LI",{});var rke=s(xu);_me=n(rke,"STRONG",{});var Z1t=s(_me);f0o=r(Z1t,"t5"),Z1t.forEach(t),m0o=r(rke," \u2014 "),JD=n(rke,"A",{href:!0});var e2t=s(JD);g0o=r(e2t,"T5Model"),e2t.forEach(t),h0o=r(rke," (T5 model)"),rke.forEach(t),p0o=i(x),$u=n(x,"LI",{});var tke=s($u);ume=n(tke,"STRONG",{});var o2t=s(ume);_0o=r(o2t,"tapas"),o2t.forEach(t),u0o=r(tke," \u2014 "),YD=n(tke,"A",{href:!0});var r2t=s(YD);b0o=r(r2t,"TapasModel"),r2t.forEach(t),v0o=r(tke," (TAPAS model)"),tke.forEach(t),F0o=i(x),ku=n(x,"LI",{});var ake=s(ku);bme=n(ake,"STRONG",{});var t2t=s(bme);T0o=r(t2t,"trajectory_transformer"),t2t.forEach(t),M0o=r(ake," \u2014 "),KD=n(ake,"A",{href:!0});var a2t=s(KD);E0o=r(a2t,"TrajectoryTransformerModel"),a2t.forEach(t),C0o=r(ake," (Trajectory Transformer model)"),ake.forEach(t),w0o=i(x),Su=n(x,"LI",{});var nke=s(Su);vme=n(nke,"STRONG",{});var n2t=s(vme);A0o=r(n2t,"transfo-xl"),n2t.forEach(t),L0o=r(nke," \u2014 "),ZD=n(nke,"A",{href:!0});var s2t=s(ZD);y0o=r(s2t,"TransfoXLModel"),s2t.forEach(t),x0o=r(nke," (Transformer-XL model)"),nke.forEach(t),$0o=i(x),Ru=n(x,"LI",{});var ske=s(Ru);Fme=n(ske,"STRONG",{});var l2t=s(Fme);k0o=r(l2t,"unispeech"),l2t.forEach(t),S0o=r(ske," \u2014 "),eG=n(ske,"A",{href:!0});var i2t=s(eG);R0o=r(i2t,"UniSpeechModel"),i2t.forEach(t),P0o=r(ske," (UniSpeech model)"),ske.forEach(t),B0o=i(x),Pu=n(x,"LI",{});var lke=s(Pu);Tme=n(lke,"STRONG",{});var d2t=s(Tme);I0o=r(d2t,"unispeech-sat"),d2t.forEach(t),N0o=r(lke," \u2014 "),oG=n(lke,"A",{href:!0});var c2t=s(oG);q0o=r(c2t,"UniSpeechSatModel"),c2t.forEach(t),j0o=r(lke," (UniSpeechSat model)"),lke.forEach(t),D0o=i(x),Bu=n(x,"LI",{});var ike=s(Bu);Mme=n(ike,"STRONG",{});var f2t=s(Mme);G0o=r(f2t,"van"),f2t.forEach(t),O0o=r(ike," \u2014 "),rG=n(ike,"A",{href:!0});var m2t=s(rG);V0o=r(m2t,"VanModel"),m2t.forEach(t),X0o=r(ike," (VAN model)"),ike.forEach(t),z0o=i(x),Iu=n(x,"LI",{});var dke=s(Iu);Eme=n(dke,"STRONG",{});var g2t=s(Eme);W0o=r(g2t,"vilt"),g2t.forEach(t),Q0o=r(dke," \u2014 "),tG=n(dke,"A",{href:!0});var h2t=s(tG);H0o=r(h2t,"ViltModel"),h2t.forEach(t),U0o=r(dke," (ViLT model)"),dke.forEach(t),J0o=i(x),Nu=n(x,"LI",{});var cke=s(Nu);Cme=n(cke,"STRONG",{});var p2t=s(Cme);Y0o=r(p2t,"vision-text-dual-encoder"),p2t.forEach(t),K0o=r(cke," \u2014 "),aG=n(cke,"A",{href:!0});var _2t=s(aG);Z0o=r(_2t,"VisionTextDualEncoderModel"),_2t.forEach(t),ewo=r(cke," (VisionTextDualEncoder model)"),cke.forEach(t),owo=i(x),qu=n(x,"LI",{});var fke=s(qu);wme=n(fke,"STRONG",{});var u2t=s(wme);rwo=r(u2t,"visual_bert"),u2t.forEach(t),two=r(fke," \u2014 "),nG=n(fke,"A",{href:!0});var b2t=s(nG);awo=r(b2t,"VisualBertModel"),b2t.forEach(t),nwo=r(fke," (VisualBERT model)"),fke.forEach(t),swo=i(x),ju=n(x,"LI",{});var mke=s(ju);Ame=n(mke,"STRONG",{});var v2t=s(Ame);lwo=r(v2t,"vit"),v2t.forEach(t),iwo=r(mke," \u2014 "),sG=n(mke,"A",{href:!0});var F2t=s(sG);dwo=r(F2t,"ViTModel"),F2t.forEach(t),cwo=r(mke," (ViT model)"),mke.forEach(t),fwo=i(x),Du=n(x,"LI",{});var gke=s(Du);Lme=n(gke,"STRONG",{});var T2t=s(Lme);mwo=r(T2t,"vit_mae"),T2t.forEach(t),gwo=r(gke," \u2014 "),lG=n(gke,"A",{href:!0});var M2t=s(lG);hwo=r(M2t,"ViTMAEModel"),M2t.forEach(t),pwo=r(gke," (ViTMAE model)"),gke.forEach(t),_wo=i(x),Gu=n(x,"LI",{});var hke=s(Gu);yme=n(hke,"STRONG",{});var E2t=s(yme);uwo=r(E2t,"wav2vec2"),E2t.forEach(t),bwo=r(hke," \u2014 "),iG=n(hke,"A",{href:!0});var C2t=s(iG);vwo=r(C2t,"Wav2Vec2Model"),C2t.forEach(t),Fwo=r(hke," (Wav2Vec2 model)"),hke.forEach(t),Two=i(x),Ou=n(x,"LI",{});var pke=s(Ou);xme=n(pke,"STRONG",{});var w2t=s(xme);Mwo=r(w2t,"wav2vec2-conformer"),w2t.forEach(t),Ewo=r(pke," \u2014 "),dG=n(pke,"A",{href:!0});var A2t=s(dG);Cwo=r(A2t,"Wav2Vec2ConformerModel"),A2t.forEach(t),wwo=r(pke," (Wav2Vec2-Conformer model)"),pke.forEach(t),Awo=i(x),Vu=n(x,"LI",{});var _ke=s(Vu);$me=n(_ke,"STRONG",{});var L2t=s($me);Lwo=r(L2t,"wavlm"),L2t.forEach(t),ywo=r(_ke," \u2014 "),cG=n(_ke,"A",{href:!0});var y2t=s(cG);xwo=r(y2t,"WavLMModel"),y2t.forEach(t),$wo=r(_ke," (WavLM model)"),_ke.forEach(t),kwo=i(x),Xu=n(x,"LI",{});var uke=s(Xu);kme=n(uke,"STRONG",{});var x2t=s(kme);Swo=r(x2t,"xglm"),x2t.forEach(t),Rwo=r(uke," \u2014 "),fG=n(uke,"A",{href:!0});var $2t=s(fG);Pwo=r($2t,"XGLMModel"),$2t.forEach(t),Bwo=r(uke," (XGLM model)"),uke.forEach(t),Iwo=i(x),zu=n(x,"LI",{});var bke=s(zu);Sme=n(bke,"STRONG",{});var k2t=s(Sme);Nwo=r(k2t,"xlm"),k2t.forEach(t),qwo=r(bke," \u2014 "),mG=n(bke,"A",{href:!0});var S2t=s(mG);jwo=r(S2t,"XLMModel"),S2t.forEach(t),Dwo=r(bke," (XLM model)"),bke.forEach(t),Gwo=i(x),Wu=n(x,"LI",{});var vke=s(Wu);Rme=n(vke,"STRONG",{});var R2t=s(Rme);Owo=r(R2t,"xlm-prophetnet"),R2t.forEach(t),Vwo=r(vke," \u2014 "),gG=n(vke,"A",{href:!0});var P2t=s(gG);Xwo=r(P2t,"XLMProphetNetModel"),P2t.forEach(t),zwo=r(vke," (XLM-ProphetNet model)"),vke.forEach(t),Wwo=i(x),Qu=n(x,"LI",{});var Fke=s(Qu);Pme=n(Fke,"STRONG",{});var B2t=s(Pme);Qwo=r(B2t,"xlm-roberta"),B2t.forEach(t),Hwo=r(Fke," \u2014 "),hG=n(Fke,"A",{href:!0});var I2t=s(hG);Uwo=r(I2t,"XLMRobertaModel"),I2t.forEach(t),Jwo=r(Fke," (XLM-RoBERTa model)"),Fke.forEach(t),Ywo=i(x),Hu=n(x,"LI",{});var Tke=s(Hu);Bme=n(Tke,"STRONG",{});var N2t=s(Bme);Kwo=r(N2t,"xlm-roberta-xl"),N2t.forEach(t),Zwo=r(Tke," \u2014 "),pG=n(Tke,"A",{href:!0});var q2t=s(pG);eAo=r(q2t,"XLMRobertaXLModel"),q2t.forEach(t),oAo=r(Tke," (XLM-RoBERTa-XL model)"),Tke.forEach(t),rAo=i(x),Uu=n(x,"LI",{});var Mke=s(Uu);Ime=n(Mke,"STRONG",{});var j2t=s(Ime);tAo=r(j2t,"xlnet"),j2t.forEach(t),aAo=r(Mke," \u2014 "),_G=n(Mke,"A",{href:!0});var D2t=s(_G);nAo=r(D2t,"XLNetModel"),D2t.forEach(t),sAo=r(Mke," (XLNet model)"),Mke.forEach(t),lAo=i(x),Ju=n(x,"LI",{});var Eke=s(Ju);Nme=n(Eke,"STRONG",{});var G2t=s(Nme);iAo=r(G2t,"yolos"),G2t.forEach(t),dAo=r(Eke," \u2014 "),uG=n(Eke,"A",{href:!0});var O2t=s(uG);cAo=r(O2t,"YolosModel"),O2t.forEach(t),fAo=r(Eke," (YOLOS model)"),Eke.forEach(t),mAo=i(x),Yu=n(x,"LI",{});var Cke=s(Yu);qme=n(Cke,"STRONG",{});var V2t=s(qme);gAo=r(V2t,"yoso"),V2t.forEach(t),hAo=r(Cke," \u2014 "),bG=n(Cke,"A",{href:!0});var X2t=s(bG);pAo=r(X2t,"YosoModel"),X2t.forEach(t),_Ao=r(Cke," (YOSO model)"),Cke.forEach(t),x.forEach(t),uAo=i(la),Ku=n(la,"P",{});var wke=s(Ku);bAo=r(wke,"The model is set in evaluation mode by default using "),jme=n(wke,"CODE",{});var z2t=s(jme);vAo=r(z2t,"model.eval()"),z2t.forEach(t),FAo=r(wke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dme=n(wke,"CODE",{});var W2t=s(Dme);TAo=r(W2t,"model.train()"),W2t.forEach(t),wke.forEach(t),MAo=i(la),T(Zu.$$.fragment,la),la.forEach(t),al.forEach(t),WXe=i(f),Wi=n(f,"H2",{class:!0});var KWe=s(Wi);e1=n(KWe,"A",{id:!0,class:!0,href:!0});var Q2t=s(e1);Gme=n(Q2t,"SPAN",{});var H2t=s(Gme);T(V6.$$.fragment,H2t),H2t.forEach(t),Q2t.forEach(t),EAo=i(KWe),Ome=n(KWe,"SPAN",{});var U2t=s(Ome);CAo=r(U2t,"AutoModelForPreTraining"),U2t.forEach(t),KWe.forEach(t),QXe=i(f),ko=n(f,"DIV",{class:!0});var nl=s(ko);T(X6.$$.fragment,nl),wAo=i(nl),Qi=n(nl,"P",{});var Zre=s(Qi);AAo=r(Zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),vG=n(Zre,"A",{href:!0});var J2t=s(vG);LAo=r(J2t,"from_pretrained()"),J2t.forEach(t),yAo=r(Zre," class method or the "),FG=n(Zre,"A",{href:!0});var Y2t=s(FG);xAo=r(Y2t,"from_config()"),Y2t.forEach(t),$Ao=r(Zre,` class
method.`),Zre.forEach(t),kAo=i(nl),z6=n(nl,"P",{});var ZWe=s(z6);SAo=r(ZWe,"This class cannot be instantiated directly using "),Vme=n(ZWe,"CODE",{});var K2t=s(Vme);RAo=r(K2t,"__init__()"),K2t.forEach(t),PAo=r(ZWe," (throws an error)."),ZWe.forEach(t),BAo=i(nl),dt=n(nl,"DIV",{class:!0});var bw=s(dt);T(W6.$$.fragment,bw),IAo=i(bw),Xme=n(bw,"P",{});var Z2t=s(Xme);NAo=r(Z2t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Z2t.forEach(t),qAo=i(bw),Hi=n(bw,"P",{});var ete=s(Hi);jAo=r(ete,`Note:
Loading a model from its configuration file does `),zme=n(ete,"STRONG",{});var ebt=s(zme);DAo=r(ebt,"not"),ebt.forEach(t),GAo=r(ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),TG=n(ete,"A",{href:!0});var obt=s(TG);OAo=r(obt,"from_pretrained()"),obt.forEach(t),VAo=r(ete," to load the model weights."),ete.forEach(t),XAo=i(bw),T(o1.$$.fragment,bw),bw.forEach(t),zAo=i(nl),Ke=n(nl,"DIV",{class:!0});var ia=s(Ke);T(Q6.$$.fragment,ia),WAo=i(ia),Wme=n(ia,"P",{});var rbt=s(Wme);QAo=r(rbt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),rbt.forEach(t),HAo=i(ia),Na=n(ia,"P",{});var vw=s(Na);UAo=r(vw,"The model class to instantiate is selected based on the "),Qme=n(vw,"CODE",{});var tbt=s(Qme);JAo=r(tbt,"model_type"),tbt.forEach(t),YAo=r(vw,` property of the config object (either
passed as an argument or loaded from `),Hme=n(vw,"CODE",{});var abt=s(Hme);KAo=r(abt,"pretrained_model_name_or_path"),abt.forEach(t),ZAo=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ume=n(vw,"CODE",{});var nbt=s(Ume);e6o=r(nbt,"pretrained_model_name_or_path"),nbt.forEach(t),o6o=r(vw,":"),vw.forEach(t),r6o=i(ia),G=n(ia,"UL",{});var O=s(G);r1=n(O,"LI",{});var Ake=s(r1);Jme=n(Ake,"STRONG",{});var sbt=s(Jme);t6o=r(sbt,"albert"),sbt.forEach(t),a6o=r(Ake," \u2014 "),MG=n(Ake,"A",{href:!0});var lbt=s(MG);n6o=r(lbt,"AlbertForPreTraining"),lbt.forEach(t),s6o=r(Ake," (ALBERT model)"),Ake.forEach(t),l6o=i(O),t1=n(O,"LI",{});var Lke=s(t1);Yme=n(Lke,"STRONG",{});var ibt=s(Yme);i6o=r(ibt,"bart"),ibt.forEach(t),d6o=r(Lke," \u2014 "),EG=n(Lke,"A",{href:!0});var dbt=s(EG);c6o=r(dbt,"BartForConditionalGeneration"),dbt.forEach(t),f6o=r(Lke," (BART model)"),Lke.forEach(t),m6o=i(O),a1=n(O,"LI",{});var yke=s(a1);Kme=n(yke,"STRONG",{});var cbt=s(Kme);g6o=r(cbt,"bert"),cbt.forEach(t),h6o=r(yke," \u2014 "),CG=n(yke,"A",{href:!0});var fbt=s(CG);p6o=r(fbt,"BertForPreTraining"),fbt.forEach(t),_6o=r(yke," (BERT model)"),yke.forEach(t),u6o=i(O),n1=n(O,"LI",{});var xke=s(n1);Zme=n(xke,"STRONG",{});var mbt=s(Zme);b6o=r(mbt,"big_bird"),mbt.forEach(t),v6o=r(xke," \u2014 "),wG=n(xke,"A",{href:!0});var gbt=s(wG);F6o=r(gbt,"BigBirdForPreTraining"),gbt.forEach(t),T6o=r(xke," (BigBird model)"),xke.forEach(t),M6o=i(O),s1=n(O,"LI",{});var $ke=s(s1);ege=n($ke,"STRONG",{});var hbt=s(ege);E6o=r(hbt,"bloom"),hbt.forEach(t),C6o=r($ke," \u2014 "),AG=n($ke,"A",{href:!0});var pbt=s(AG);w6o=r(pbt,"BloomForCausalLM"),pbt.forEach(t),A6o=r($ke," (BLOOM model)"),$ke.forEach(t),L6o=i(O),l1=n(O,"LI",{});var kke=s(l1);oge=n(kke,"STRONG",{});var _bt=s(oge);y6o=r(_bt,"camembert"),_bt.forEach(t),x6o=r(kke," \u2014 "),LG=n(kke,"A",{href:!0});var ubt=s(LG);$6o=r(ubt,"CamembertForMaskedLM"),ubt.forEach(t),k6o=r(kke," (CamemBERT model)"),kke.forEach(t),S6o=i(O),i1=n(O,"LI",{});var Ske=s(i1);rge=n(Ske,"STRONG",{});var bbt=s(rge);R6o=r(bbt,"ctrl"),bbt.forEach(t),P6o=r(Ske," \u2014 "),yG=n(Ske,"A",{href:!0});var vbt=s(yG);B6o=r(vbt,"CTRLLMHeadModel"),vbt.forEach(t),I6o=r(Ske," (CTRL model)"),Ske.forEach(t),N6o=i(O),d1=n(O,"LI",{});var Rke=s(d1);tge=n(Rke,"STRONG",{});var Fbt=s(tge);q6o=r(Fbt,"data2vec-text"),Fbt.forEach(t),j6o=r(Rke," \u2014 "),xG=n(Rke,"A",{href:!0});var Tbt=s(xG);D6o=r(Tbt,"Data2VecTextForMaskedLM"),Tbt.forEach(t),G6o=r(Rke," (Data2VecText model)"),Rke.forEach(t),O6o=i(O),c1=n(O,"LI",{});var Pke=s(c1);age=n(Pke,"STRONG",{});var Mbt=s(age);V6o=r(Mbt,"deberta"),Mbt.forEach(t),X6o=r(Pke," \u2014 "),$G=n(Pke,"A",{href:!0});var Ebt=s($G);z6o=r(Ebt,"DebertaForMaskedLM"),Ebt.forEach(t),W6o=r(Pke," (DeBERTa model)"),Pke.forEach(t),Q6o=i(O),f1=n(O,"LI",{});var Bke=s(f1);nge=n(Bke,"STRONG",{});var Cbt=s(nge);H6o=r(Cbt,"deberta-v2"),Cbt.forEach(t),U6o=r(Bke," \u2014 "),kG=n(Bke,"A",{href:!0});var wbt=s(kG);J6o=r(wbt,"DebertaV2ForMaskedLM"),wbt.forEach(t),Y6o=r(Bke," (DeBERTa-v2 model)"),Bke.forEach(t),K6o=i(O),m1=n(O,"LI",{});var Ike=s(m1);sge=n(Ike,"STRONG",{});var Abt=s(sge);Z6o=r(Abt,"distilbert"),Abt.forEach(t),eLo=r(Ike," \u2014 "),SG=n(Ike,"A",{href:!0});var Lbt=s(SG);oLo=r(Lbt,"DistilBertForMaskedLM"),Lbt.forEach(t),rLo=r(Ike," (DistilBERT model)"),Ike.forEach(t),tLo=i(O),g1=n(O,"LI",{});var Nke=s(g1);lge=n(Nke,"STRONG",{});var ybt=s(lge);aLo=r(ybt,"electra"),ybt.forEach(t),nLo=r(Nke," \u2014 "),RG=n(Nke,"A",{href:!0});var xbt=s(RG);sLo=r(xbt,"ElectraForPreTraining"),xbt.forEach(t),lLo=r(Nke," (ELECTRA model)"),Nke.forEach(t),iLo=i(O),h1=n(O,"LI",{});var qke=s(h1);ige=n(qke,"STRONG",{});var $bt=s(ige);dLo=r($bt,"flaubert"),$bt.forEach(t),cLo=r(qke," \u2014 "),PG=n(qke,"A",{href:!0});var kbt=s(PG);fLo=r(kbt,"FlaubertWithLMHeadModel"),kbt.forEach(t),mLo=r(qke," (FlauBERT model)"),qke.forEach(t),gLo=i(O),p1=n(O,"LI",{});var jke=s(p1);dge=n(jke,"STRONG",{});var Sbt=s(dge);hLo=r(Sbt,"flava"),Sbt.forEach(t),pLo=r(jke," \u2014 "),BG=n(jke,"A",{href:!0});var Rbt=s(BG);_Lo=r(Rbt,"FlavaForPreTraining"),Rbt.forEach(t),uLo=r(jke," (FLAVA model)"),jke.forEach(t),bLo=i(O),_1=n(O,"LI",{});var Dke=s(_1);cge=n(Dke,"STRONG",{});var Pbt=s(cge);vLo=r(Pbt,"fnet"),Pbt.forEach(t),FLo=r(Dke," \u2014 "),IG=n(Dke,"A",{href:!0});var Bbt=s(IG);TLo=r(Bbt,"FNetForPreTraining"),Bbt.forEach(t),MLo=r(Dke," (FNet model)"),Dke.forEach(t),ELo=i(O),u1=n(O,"LI",{});var Gke=s(u1);fge=n(Gke,"STRONG",{});var Ibt=s(fge);CLo=r(Ibt,"fsmt"),Ibt.forEach(t),wLo=r(Gke," \u2014 "),NG=n(Gke,"A",{href:!0});var Nbt=s(NG);ALo=r(Nbt,"FSMTForConditionalGeneration"),Nbt.forEach(t),LLo=r(Gke," (FairSeq Machine-Translation model)"),Gke.forEach(t),yLo=i(O),b1=n(O,"LI",{});var Oke=s(b1);mge=n(Oke,"STRONG",{});var qbt=s(mge);xLo=r(qbt,"funnel"),qbt.forEach(t),$Lo=r(Oke," \u2014 "),qG=n(Oke,"A",{href:!0});var jbt=s(qG);kLo=r(jbt,"FunnelForPreTraining"),jbt.forEach(t),SLo=r(Oke," (Funnel Transformer model)"),Oke.forEach(t),RLo=i(O),v1=n(O,"LI",{});var Vke=s(v1);gge=n(Vke,"STRONG",{});var Dbt=s(gge);PLo=r(Dbt,"gpt2"),Dbt.forEach(t),BLo=r(Vke," \u2014 "),jG=n(Vke,"A",{href:!0});var Gbt=s(jG);ILo=r(Gbt,"GPT2LMHeadModel"),Gbt.forEach(t),NLo=r(Vke," (OpenAI GPT-2 model)"),Vke.forEach(t),qLo=i(O),F1=n(O,"LI",{});var Xke=s(F1);hge=n(Xke,"STRONG",{});var Obt=s(hge);jLo=r(Obt,"ibert"),Obt.forEach(t),DLo=r(Xke," \u2014 "),DG=n(Xke,"A",{href:!0});var Vbt=s(DG);GLo=r(Vbt,"IBertForMaskedLM"),Vbt.forEach(t),OLo=r(Xke," (I-BERT model)"),Xke.forEach(t),VLo=i(O),T1=n(O,"LI",{});var zke=s(T1);pge=n(zke,"STRONG",{});var Xbt=s(pge);XLo=r(Xbt,"layoutlm"),Xbt.forEach(t),zLo=r(zke," \u2014 "),GG=n(zke,"A",{href:!0});var zbt=s(GG);WLo=r(zbt,"LayoutLMForMaskedLM"),zbt.forEach(t),QLo=r(zke," (LayoutLM model)"),zke.forEach(t),HLo=i(O),M1=n(O,"LI",{});var Wke=s(M1);_ge=n(Wke,"STRONG",{});var Wbt=s(_ge);ULo=r(Wbt,"longformer"),Wbt.forEach(t),JLo=r(Wke," \u2014 "),OG=n(Wke,"A",{href:!0});var Qbt=s(OG);YLo=r(Qbt,"LongformerForMaskedLM"),Qbt.forEach(t),KLo=r(Wke," (Longformer model)"),Wke.forEach(t),ZLo=i(O),E1=n(O,"LI",{});var Qke=s(E1);uge=n(Qke,"STRONG",{});var Hbt=s(uge);eyo=r(Hbt,"lxmert"),Hbt.forEach(t),oyo=r(Qke," \u2014 "),VG=n(Qke,"A",{href:!0});var Ubt=s(VG);ryo=r(Ubt,"LxmertForPreTraining"),Ubt.forEach(t),tyo=r(Qke," (LXMERT model)"),Qke.forEach(t),ayo=i(O),C1=n(O,"LI",{});var Hke=s(C1);bge=n(Hke,"STRONG",{});var Jbt=s(bge);nyo=r(Jbt,"megatron-bert"),Jbt.forEach(t),syo=r(Hke," \u2014 "),XG=n(Hke,"A",{href:!0});var Ybt=s(XG);lyo=r(Ybt,"MegatronBertForPreTraining"),Ybt.forEach(t),iyo=r(Hke," (Megatron-BERT model)"),Hke.forEach(t),dyo=i(O),w1=n(O,"LI",{});var Uke=s(w1);vge=n(Uke,"STRONG",{});var Kbt=s(vge);cyo=r(Kbt,"mobilebert"),Kbt.forEach(t),fyo=r(Uke," \u2014 "),zG=n(Uke,"A",{href:!0});var Zbt=s(zG);myo=r(Zbt,"MobileBertForPreTraining"),Zbt.forEach(t),gyo=r(Uke," (MobileBERT model)"),Uke.forEach(t),hyo=i(O),A1=n(O,"LI",{});var Jke=s(A1);Fge=n(Jke,"STRONG",{});var e3t=s(Fge);pyo=r(e3t,"mpnet"),e3t.forEach(t),_yo=r(Jke," \u2014 "),WG=n(Jke,"A",{href:!0});var o3t=s(WG);uyo=r(o3t,"MPNetForMaskedLM"),o3t.forEach(t),byo=r(Jke," (MPNet model)"),Jke.forEach(t),vyo=i(O),L1=n(O,"LI",{});var Yke=s(L1);Tge=n(Yke,"STRONG",{});var r3t=s(Tge);Fyo=r(r3t,"mvp"),r3t.forEach(t),Tyo=r(Yke," \u2014 "),QG=n(Yke,"A",{href:!0});var t3t=s(QG);Myo=r(t3t,"MvpForConditionalGeneration"),t3t.forEach(t),Eyo=r(Yke," (MVP model)"),Yke.forEach(t),Cyo=i(O),y1=n(O,"LI",{});var Kke=s(y1);Mge=n(Kke,"STRONG",{});var a3t=s(Mge);wyo=r(a3t,"nezha"),a3t.forEach(t),Ayo=r(Kke," \u2014 "),HG=n(Kke,"A",{href:!0});var n3t=s(HG);Lyo=r(n3t,"NezhaForPreTraining"),n3t.forEach(t),yyo=r(Kke," (Nezha model)"),Kke.forEach(t),xyo=i(O),x1=n(O,"LI",{});var Zke=s(x1);Ege=n(Zke,"STRONG",{});var s3t=s(Ege);$yo=r(s3t,"openai-gpt"),s3t.forEach(t),kyo=r(Zke," \u2014 "),UG=n(Zke,"A",{href:!0});var l3t=s(UG);Syo=r(l3t,"OpenAIGPTLMHeadModel"),l3t.forEach(t),Ryo=r(Zke," (OpenAI GPT model)"),Zke.forEach(t),Pyo=i(O),$1=n(O,"LI",{});var eSe=s($1);Cge=n(eSe,"STRONG",{});var i3t=s(Cge);Byo=r(i3t,"retribert"),i3t.forEach(t),Iyo=r(eSe," \u2014 "),JG=n(eSe,"A",{href:!0});var d3t=s(JG);Nyo=r(d3t,"RetriBertModel"),d3t.forEach(t),qyo=r(eSe," (RetriBERT model)"),eSe.forEach(t),jyo=i(O),k1=n(O,"LI",{});var oSe=s(k1);wge=n(oSe,"STRONG",{});var c3t=s(wge);Dyo=r(c3t,"roberta"),c3t.forEach(t),Gyo=r(oSe," \u2014 "),YG=n(oSe,"A",{href:!0});var f3t=s(YG);Oyo=r(f3t,"RobertaForMaskedLM"),f3t.forEach(t),Vyo=r(oSe," (RoBERTa model)"),oSe.forEach(t),Xyo=i(O),S1=n(O,"LI",{});var rSe=s(S1);Age=n(rSe,"STRONG",{});var m3t=s(Age);zyo=r(m3t,"splinter"),m3t.forEach(t),Wyo=r(rSe," \u2014 "),KG=n(rSe,"A",{href:!0});var g3t=s(KG);Qyo=r(g3t,"SplinterForPreTraining"),g3t.forEach(t),Hyo=r(rSe," (Splinter model)"),rSe.forEach(t),Uyo=i(O),R1=n(O,"LI",{});var tSe=s(R1);Lge=n(tSe,"STRONG",{});var h3t=s(Lge);Jyo=r(h3t,"squeezebert"),h3t.forEach(t),Yyo=r(tSe," \u2014 "),ZG=n(tSe,"A",{href:!0});var p3t=s(ZG);Kyo=r(p3t,"SqueezeBertForMaskedLM"),p3t.forEach(t),Zyo=r(tSe," (SqueezeBERT model)"),tSe.forEach(t),exo=i(O),P1=n(O,"LI",{});var aSe=s(P1);yge=n(aSe,"STRONG",{});var _3t=s(yge);oxo=r(_3t,"t5"),_3t.forEach(t),rxo=r(aSe," \u2014 "),eO=n(aSe,"A",{href:!0});var u3t=s(eO);txo=r(u3t,"T5ForConditionalGeneration"),u3t.forEach(t),axo=r(aSe," (T5 model)"),aSe.forEach(t),nxo=i(O),B1=n(O,"LI",{});var nSe=s(B1);xge=n(nSe,"STRONG",{});var b3t=s(xge);sxo=r(b3t,"tapas"),b3t.forEach(t),lxo=r(nSe," \u2014 "),oO=n(nSe,"A",{href:!0});var v3t=s(oO);ixo=r(v3t,"TapasForMaskedLM"),v3t.forEach(t),dxo=r(nSe," (TAPAS model)"),nSe.forEach(t),cxo=i(O),I1=n(O,"LI",{});var sSe=s(I1);$ge=n(sSe,"STRONG",{});var F3t=s($ge);fxo=r(F3t,"transfo-xl"),F3t.forEach(t),mxo=r(sSe," \u2014 "),rO=n(sSe,"A",{href:!0});var T3t=s(rO);gxo=r(T3t,"TransfoXLLMHeadModel"),T3t.forEach(t),hxo=r(sSe," (Transformer-XL model)"),sSe.forEach(t),pxo=i(O),N1=n(O,"LI",{});var lSe=s(N1);kge=n(lSe,"STRONG",{});var M3t=s(kge);_xo=r(M3t,"unispeech"),M3t.forEach(t),uxo=r(lSe," \u2014 "),tO=n(lSe,"A",{href:!0});var E3t=s(tO);bxo=r(E3t,"UniSpeechForPreTraining"),E3t.forEach(t),vxo=r(lSe," (UniSpeech model)"),lSe.forEach(t),Fxo=i(O),q1=n(O,"LI",{});var iSe=s(q1);Sge=n(iSe,"STRONG",{});var C3t=s(Sge);Txo=r(C3t,"unispeech-sat"),C3t.forEach(t),Mxo=r(iSe," \u2014 "),aO=n(iSe,"A",{href:!0});var w3t=s(aO);Exo=r(w3t,"UniSpeechSatForPreTraining"),w3t.forEach(t),Cxo=r(iSe," (UniSpeechSat model)"),iSe.forEach(t),wxo=i(O),j1=n(O,"LI",{});var dSe=s(j1);Rge=n(dSe,"STRONG",{});var A3t=s(Rge);Axo=r(A3t,"visual_bert"),A3t.forEach(t),Lxo=r(dSe," \u2014 "),nO=n(dSe,"A",{href:!0});var L3t=s(nO);yxo=r(L3t,"VisualBertForPreTraining"),L3t.forEach(t),xxo=r(dSe," (VisualBERT model)"),dSe.forEach(t),$xo=i(O),D1=n(O,"LI",{});var cSe=s(D1);Pge=n(cSe,"STRONG",{});var y3t=s(Pge);kxo=r(y3t,"vit_mae"),y3t.forEach(t),Sxo=r(cSe," \u2014 "),sO=n(cSe,"A",{href:!0});var x3t=s(sO);Rxo=r(x3t,"ViTMAEForPreTraining"),x3t.forEach(t),Pxo=r(cSe," (ViTMAE model)"),cSe.forEach(t),Bxo=i(O),G1=n(O,"LI",{});var fSe=s(G1);Bge=n(fSe,"STRONG",{});var $3t=s(Bge);Ixo=r($3t,"wav2vec2"),$3t.forEach(t),Nxo=r(fSe," \u2014 "),lO=n(fSe,"A",{href:!0});var k3t=s(lO);qxo=r(k3t,"Wav2Vec2ForPreTraining"),k3t.forEach(t),jxo=r(fSe," (Wav2Vec2 model)"),fSe.forEach(t),Dxo=i(O),O1=n(O,"LI",{});var mSe=s(O1);Ige=n(mSe,"STRONG",{});var S3t=s(Ige);Gxo=r(S3t,"wav2vec2-conformer"),S3t.forEach(t),Oxo=r(mSe," \u2014 "),iO=n(mSe,"A",{href:!0});var R3t=s(iO);Vxo=r(R3t,"Wav2Vec2ConformerForPreTraining"),R3t.forEach(t),Xxo=r(mSe," (Wav2Vec2-Conformer model)"),mSe.forEach(t),zxo=i(O),V1=n(O,"LI",{});var gSe=s(V1);Nge=n(gSe,"STRONG",{});var P3t=s(Nge);Wxo=r(P3t,"xlm"),P3t.forEach(t),Qxo=r(gSe," \u2014 "),dO=n(gSe,"A",{href:!0});var B3t=s(dO);Hxo=r(B3t,"XLMWithLMHeadModel"),B3t.forEach(t),Uxo=r(gSe," (XLM model)"),gSe.forEach(t),Jxo=i(O),X1=n(O,"LI",{});var hSe=s(X1);qge=n(hSe,"STRONG",{});var I3t=s(qge);Yxo=r(I3t,"xlm-roberta"),I3t.forEach(t),Kxo=r(hSe," \u2014 "),cO=n(hSe,"A",{href:!0});var N3t=s(cO);Zxo=r(N3t,"XLMRobertaForMaskedLM"),N3t.forEach(t),e$o=r(hSe," (XLM-RoBERTa model)"),hSe.forEach(t),o$o=i(O),z1=n(O,"LI",{});var pSe=s(z1);jge=n(pSe,"STRONG",{});var q3t=s(jge);r$o=r(q3t,"xlm-roberta-xl"),q3t.forEach(t),t$o=r(pSe," \u2014 "),fO=n(pSe,"A",{href:!0});var j3t=s(fO);a$o=r(j3t,"XLMRobertaXLForMaskedLM"),j3t.forEach(t),n$o=r(pSe," (XLM-RoBERTa-XL model)"),pSe.forEach(t),s$o=i(O),W1=n(O,"LI",{});var _Se=s(W1);Dge=n(_Se,"STRONG",{});var D3t=s(Dge);l$o=r(D3t,"xlnet"),D3t.forEach(t),i$o=r(_Se," \u2014 "),mO=n(_Se,"A",{href:!0});var G3t=s(mO);d$o=r(G3t,"XLNetLMHeadModel"),G3t.forEach(t),c$o=r(_Se," (XLNet model)"),_Se.forEach(t),O.forEach(t),f$o=i(ia),Q1=n(ia,"P",{});var uSe=s(Q1);m$o=r(uSe,"The model is set in evaluation mode by default using "),Gge=n(uSe,"CODE",{});var O3t=s(Gge);g$o=r(O3t,"model.eval()"),O3t.forEach(t),h$o=r(uSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oge=n(uSe,"CODE",{});var V3t=s(Oge);p$o=r(V3t,"model.train()"),V3t.forEach(t),uSe.forEach(t),_$o=i(ia),T(H1.$$.fragment,ia),ia.forEach(t),nl.forEach(t),HXe=i(f),Ui=n(f,"H2",{class:!0});var eQe=s(Ui);U1=n(eQe,"A",{id:!0,class:!0,href:!0});var X3t=s(U1);Vge=n(X3t,"SPAN",{});var z3t=s(Vge);T(H6.$$.fragment,z3t),z3t.forEach(t),X3t.forEach(t),u$o=i(eQe),Xge=n(eQe,"SPAN",{});var W3t=s(Xge);b$o=r(W3t,"AutoModelForCausalLM"),W3t.forEach(t),eQe.forEach(t),UXe=i(f),So=n(f,"DIV",{class:!0});var sl=s(So);T(U6.$$.fragment,sl),v$o=i(sl),Ji=n(sl,"P",{});var ote=s(Ji);F$o=r(ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),gO=n(ote,"A",{href:!0});var Q3t=s(gO);T$o=r(Q3t,"from_pretrained()"),Q3t.forEach(t),M$o=r(ote," class method or the "),hO=n(ote,"A",{href:!0});var H3t=s(hO);E$o=r(H3t,"from_config()"),H3t.forEach(t),C$o=r(ote,` class
method.`),ote.forEach(t),w$o=i(sl),J6=n(sl,"P",{});var oQe=s(J6);A$o=r(oQe,"This class cannot be instantiated directly using "),zge=n(oQe,"CODE",{});var U3t=s(zge);L$o=r(U3t,"__init__()"),U3t.forEach(t),y$o=r(oQe," (throws an error)."),oQe.forEach(t),x$o=i(sl),ct=n(sl,"DIV",{class:!0});var Fw=s(ct);T(Y6.$$.fragment,Fw),$$o=i(Fw),Wge=n(Fw,"P",{});var J3t=s(Wge);k$o=r(J3t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),J3t.forEach(t),S$o=i(Fw),Yi=n(Fw,"P",{});var rte=s(Yi);R$o=r(rte,`Note:
Loading a model from its configuration file does `),Qge=n(rte,"STRONG",{});var Y3t=s(Qge);P$o=r(Y3t,"not"),Y3t.forEach(t),B$o=r(rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),pO=n(rte,"A",{href:!0});var K3t=s(pO);I$o=r(K3t,"from_pretrained()"),K3t.forEach(t),N$o=r(rte," to load the model weights."),rte.forEach(t),q$o=i(Fw),T(J1.$$.fragment,Fw),Fw.forEach(t),j$o=i(sl),Ze=n(sl,"DIV",{class:!0});var da=s(Ze);T(K6.$$.fragment,da),D$o=i(da),Hge=n(da,"P",{});var Z3t=s(Hge);G$o=r(Z3t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Z3t.forEach(t),O$o=i(da),qa=n(da,"P",{});var Tw=s(qa);V$o=r(Tw,"The model class to instantiate is selected based on the "),Uge=n(Tw,"CODE",{});var evt=s(Uge);X$o=r(evt,"model_type"),evt.forEach(t),z$o=r(Tw,` property of the config object (either
passed as an argument or loaded from `),Jge=n(Tw,"CODE",{});var ovt=s(Jge);W$o=r(ovt,"pretrained_model_name_or_path"),ovt.forEach(t),Q$o=r(Tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yge=n(Tw,"CODE",{});var rvt=s(Yge);H$o=r(rvt,"pretrained_model_name_or_path"),rvt.forEach(t),U$o=r(Tw,":"),Tw.forEach(t),J$o=i(da),z=n(da,"UL",{});var W=s(z);Y1=n(W,"LI",{});var bSe=s(Y1);Kge=n(bSe,"STRONG",{});var tvt=s(Kge);Y$o=r(tvt,"bart"),tvt.forEach(t),K$o=r(bSe," \u2014 "),_O=n(bSe,"A",{href:!0});var avt=s(_O);Z$o=r(avt,"BartForCausalLM"),avt.forEach(t),eko=r(bSe," (BART model)"),bSe.forEach(t),oko=i(W),K1=n(W,"LI",{});var vSe=s(K1);Zge=n(vSe,"STRONG",{});var nvt=s(Zge);rko=r(nvt,"bert"),nvt.forEach(t),tko=r(vSe," \u2014 "),uO=n(vSe,"A",{href:!0});var svt=s(uO);ako=r(svt,"BertLMHeadModel"),svt.forEach(t),nko=r(vSe," (BERT model)"),vSe.forEach(t),sko=i(W),Z1=n(W,"LI",{});var FSe=s(Z1);ehe=n(FSe,"STRONG",{});var lvt=s(ehe);lko=r(lvt,"bert-generation"),lvt.forEach(t),iko=r(FSe," \u2014 "),bO=n(FSe,"A",{href:!0});var ivt=s(bO);dko=r(ivt,"BertGenerationDecoder"),ivt.forEach(t),cko=r(FSe," (Bert Generation model)"),FSe.forEach(t),fko=i(W),e2=n(W,"LI",{});var TSe=s(e2);ohe=n(TSe,"STRONG",{});var dvt=s(ohe);mko=r(dvt,"big_bird"),dvt.forEach(t),gko=r(TSe," \u2014 "),vO=n(TSe,"A",{href:!0});var cvt=s(vO);hko=r(cvt,"BigBirdForCausalLM"),cvt.forEach(t),pko=r(TSe," (BigBird model)"),TSe.forEach(t),_ko=i(W),o2=n(W,"LI",{});var MSe=s(o2);rhe=n(MSe,"STRONG",{});var fvt=s(rhe);uko=r(fvt,"bigbird_pegasus"),fvt.forEach(t),bko=r(MSe," \u2014 "),FO=n(MSe,"A",{href:!0});var mvt=s(FO);vko=r(mvt,"BigBirdPegasusForCausalLM"),mvt.forEach(t),Fko=r(MSe," (BigBird-Pegasus model)"),MSe.forEach(t),Tko=i(W),r2=n(W,"LI",{});var ESe=s(r2);the=n(ESe,"STRONG",{});var gvt=s(the);Mko=r(gvt,"blenderbot"),gvt.forEach(t),Eko=r(ESe," \u2014 "),TO=n(ESe,"A",{href:!0});var hvt=s(TO);Cko=r(hvt,"BlenderbotForCausalLM"),hvt.forEach(t),wko=r(ESe," (Blenderbot model)"),ESe.forEach(t),Ako=i(W),t2=n(W,"LI",{});var CSe=s(t2);ahe=n(CSe,"STRONG",{});var pvt=s(ahe);Lko=r(pvt,"blenderbot-small"),pvt.forEach(t),yko=r(CSe," \u2014 "),MO=n(CSe,"A",{href:!0});var _vt=s(MO);xko=r(_vt,"BlenderbotSmallForCausalLM"),_vt.forEach(t),$ko=r(CSe," (BlenderbotSmall model)"),CSe.forEach(t),kko=i(W),a2=n(W,"LI",{});var wSe=s(a2);nhe=n(wSe,"STRONG",{});var uvt=s(nhe);Sko=r(uvt,"bloom"),uvt.forEach(t),Rko=r(wSe," \u2014 "),EO=n(wSe,"A",{href:!0});var bvt=s(EO);Pko=r(bvt,"BloomForCausalLM"),bvt.forEach(t),Bko=r(wSe," (BLOOM model)"),wSe.forEach(t),Iko=i(W),n2=n(W,"LI",{});var ASe=s(n2);she=n(ASe,"STRONG",{});var vvt=s(she);Nko=r(vvt,"camembert"),vvt.forEach(t),qko=r(ASe," \u2014 "),CO=n(ASe,"A",{href:!0});var Fvt=s(CO);jko=r(Fvt,"CamembertForCausalLM"),Fvt.forEach(t),Dko=r(ASe," (CamemBERT model)"),ASe.forEach(t),Gko=i(W),s2=n(W,"LI",{});var LSe=s(s2);lhe=n(LSe,"STRONG",{});var Tvt=s(lhe);Oko=r(Tvt,"codegen"),Tvt.forEach(t),Vko=r(LSe," \u2014 "),wO=n(LSe,"A",{href:!0});var Mvt=s(wO);Xko=r(Mvt,"CodeGenForCausalLM"),Mvt.forEach(t),zko=r(LSe," (CodeGen model)"),LSe.forEach(t),Wko=i(W),l2=n(W,"LI",{});var ySe=s(l2);ihe=n(ySe,"STRONG",{});var Evt=s(ihe);Qko=r(Evt,"ctrl"),Evt.forEach(t),Hko=r(ySe," \u2014 "),AO=n(ySe,"A",{href:!0});var Cvt=s(AO);Uko=r(Cvt,"CTRLLMHeadModel"),Cvt.forEach(t),Jko=r(ySe," (CTRL model)"),ySe.forEach(t),Yko=i(W),i2=n(W,"LI",{});var xSe=s(i2);dhe=n(xSe,"STRONG",{});var wvt=s(dhe);Kko=r(wvt,"data2vec-text"),wvt.forEach(t),Zko=r(xSe," \u2014 "),LO=n(xSe,"A",{href:!0});var Avt=s(LO);eSo=r(Avt,"Data2VecTextForCausalLM"),Avt.forEach(t),oSo=r(xSe," (Data2VecText model)"),xSe.forEach(t),rSo=i(W),d2=n(W,"LI",{});var $Se=s(d2);che=n($Se,"STRONG",{});var Lvt=s(che);tSo=r(Lvt,"electra"),Lvt.forEach(t),aSo=r($Se," \u2014 "),yO=n($Se,"A",{href:!0});var yvt=s(yO);nSo=r(yvt,"ElectraForCausalLM"),yvt.forEach(t),sSo=r($Se," (ELECTRA model)"),$Se.forEach(t),lSo=i(W),c2=n(W,"LI",{});var kSe=s(c2);fhe=n(kSe,"STRONG",{});var xvt=s(fhe);iSo=r(xvt,"gpt2"),xvt.forEach(t),dSo=r(kSe," \u2014 "),xO=n(kSe,"A",{href:!0});var $vt=s(xO);cSo=r($vt,"GPT2LMHeadModel"),$vt.forEach(t),fSo=r(kSe," (OpenAI GPT-2 model)"),kSe.forEach(t),mSo=i(W),f2=n(W,"LI",{});var SSe=s(f2);mhe=n(SSe,"STRONG",{});var kvt=s(mhe);gSo=r(kvt,"gpt_neo"),kvt.forEach(t),hSo=r(SSe," \u2014 "),$O=n(SSe,"A",{href:!0});var Svt=s($O);pSo=r(Svt,"GPTNeoForCausalLM"),Svt.forEach(t),_So=r(SSe," (GPT Neo model)"),SSe.forEach(t),uSo=i(W),m2=n(W,"LI",{});var RSe=s(m2);ghe=n(RSe,"STRONG",{});var Rvt=s(ghe);bSo=r(Rvt,"gpt_neox"),Rvt.forEach(t),vSo=r(RSe," \u2014 "),kO=n(RSe,"A",{href:!0});var Pvt=s(kO);FSo=r(Pvt,"GPTNeoXForCausalLM"),Pvt.forEach(t),TSo=r(RSe," (GPT NeoX model)"),RSe.forEach(t),MSo=i(W),g2=n(W,"LI",{});var PSe=s(g2);hhe=n(PSe,"STRONG",{});var Bvt=s(hhe);ESo=r(Bvt,"gptj"),Bvt.forEach(t),CSo=r(PSe," \u2014 "),SO=n(PSe,"A",{href:!0});var Ivt=s(SO);wSo=r(Ivt,"GPTJForCausalLM"),Ivt.forEach(t),ASo=r(PSe," (GPT-J model)"),PSe.forEach(t),LSo=i(W),h2=n(W,"LI",{});var BSe=s(h2);phe=n(BSe,"STRONG",{});var Nvt=s(phe);ySo=r(Nvt,"marian"),Nvt.forEach(t),xSo=r(BSe," \u2014 "),RO=n(BSe,"A",{href:!0});var qvt=s(RO);$So=r(qvt,"MarianForCausalLM"),qvt.forEach(t),kSo=r(BSe," (Marian model)"),BSe.forEach(t),SSo=i(W),p2=n(W,"LI",{});var ISe=s(p2);_he=n(ISe,"STRONG",{});var jvt=s(_he);RSo=r(jvt,"mbart"),jvt.forEach(t),PSo=r(ISe," \u2014 "),PO=n(ISe,"A",{href:!0});var Dvt=s(PO);BSo=r(Dvt,"MBartForCausalLM"),Dvt.forEach(t),ISo=r(ISe," (mBART model)"),ISe.forEach(t),NSo=i(W),_2=n(W,"LI",{});var NSe=s(_2);uhe=n(NSe,"STRONG",{});var Gvt=s(uhe);qSo=r(Gvt,"megatron-bert"),Gvt.forEach(t),jSo=r(NSe," \u2014 "),BO=n(NSe,"A",{href:!0});var Ovt=s(BO);DSo=r(Ovt,"MegatronBertForCausalLM"),Ovt.forEach(t),GSo=r(NSe," (Megatron-BERT model)"),NSe.forEach(t),OSo=i(W),u2=n(W,"LI",{});var qSe=s(u2);bhe=n(qSe,"STRONG",{});var Vvt=s(bhe);VSo=r(Vvt,"mvp"),Vvt.forEach(t),XSo=r(qSe," \u2014 "),IO=n(qSe,"A",{href:!0});var Xvt=s(IO);zSo=r(Xvt,"MvpForCausalLM"),Xvt.forEach(t),WSo=r(qSe," (MVP model)"),qSe.forEach(t),QSo=i(W),b2=n(W,"LI",{});var jSe=s(b2);vhe=n(jSe,"STRONG",{});var zvt=s(vhe);HSo=r(zvt,"openai-gpt"),zvt.forEach(t),USo=r(jSe," \u2014 "),NO=n(jSe,"A",{href:!0});var Wvt=s(NO);JSo=r(Wvt,"OpenAIGPTLMHeadModel"),Wvt.forEach(t),YSo=r(jSe," (OpenAI GPT model)"),jSe.forEach(t),KSo=i(W),v2=n(W,"LI",{});var DSe=s(v2);Fhe=n(DSe,"STRONG",{});var Qvt=s(Fhe);ZSo=r(Qvt,"opt"),Qvt.forEach(t),eRo=r(DSe," \u2014 "),qO=n(DSe,"A",{href:!0});var Hvt=s(qO);oRo=r(Hvt,"OPTForCausalLM"),Hvt.forEach(t),rRo=r(DSe," (OPT model)"),DSe.forEach(t),tRo=i(W),F2=n(W,"LI",{});var GSe=s(F2);The=n(GSe,"STRONG",{});var Uvt=s(The);aRo=r(Uvt,"pegasus"),Uvt.forEach(t),nRo=r(GSe," \u2014 "),jO=n(GSe,"A",{href:!0});var Jvt=s(jO);sRo=r(Jvt,"PegasusForCausalLM"),Jvt.forEach(t),lRo=r(GSe," (Pegasus model)"),GSe.forEach(t),iRo=i(W),T2=n(W,"LI",{});var OSe=s(T2);Mhe=n(OSe,"STRONG",{});var Yvt=s(Mhe);dRo=r(Yvt,"plbart"),Yvt.forEach(t),cRo=r(OSe," \u2014 "),DO=n(OSe,"A",{href:!0});var Kvt=s(DO);fRo=r(Kvt,"PLBartForCausalLM"),Kvt.forEach(t),mRo=r(OSe," (PLBart model)"),OSe.forEach(t),gRo=i(W),M2=n(W,"LI",{});var VSe=s(M2);Ehe=n(VSe,"STRONG",{});var Zvt=s(Ehe);hRo=r(Zvt,"prophetnet"),Zvt.forEach(t),pRo=r(VSe," \u2014 "),GO=n(VSe,"A",{href:!0});var eFt=s(GO);_Ro=r(eFt,"ProphetNetForCausalLM"),eFt.forEach(t),uRo=r(VSe," (ProphetNet model)"),VSe.forEach(t),bRo=i(W),E2=n(W,"LI",{});var XSe=s(E2);Che=n(XSe,"STRONG",{});var oFt=s(Che);vRo=r(oFt,"qdqbert"),oFt.forEach(t),FRo=r(XSe," \u2014 "),OO=n(XSe,"A",{href:!0});var rFt=s(OO);TRo=r(rFt,"QDQBertLMHeadModel"),rFt.forEach(t),MRo=r(XSe," (QDQBert model)"),XSe.forEach(t),ERo=i(W),C2=n(W,"LI",{});var zSe=s(C2);whe=n(zSe,"STRONG",{});var tFt=s(whe);CRo=r(tFt,"reformer"),tFt.forEach(t),wRo=r(zSe," \u2014 "),VO=n(zSe,"A",{href:!0});var aFt=s(VO);ARo=r(aFt,"ReformerModelWithLMHead"),aFt.forEach(t),LRo=r(zSe," (Reformer model)"),zSe.forEach(t),yRo=i(W),w2=n(W,"LI",{});var WSe=s(w2);Ahe=n(WSe,"STRONG",{});var nFt=s(Ahe);xRo=r(nFt,"rembert"),nFt.forEach(t),$Ro=r(WSe," \u2014 "),XO=n(WSe,"A",{href:!0});var sFt=s(XO);kRo=r(sFt,"RemBertForCausalLM"),sFt.forEach(t),SRo=r(WSe," (RemBERT model)"),WSe.forEach(t),RRo=i(W),A2=n(W,"LI",{});var QSe=s(A2);Lhe=n(QSe,"STRONG",{});var lFt=s(Lhe);PRo=r(lFt,"roberta"),lFt.forEach(t),BRo=r(QSe," \u2014 "),zO=n(QSe,"A",{href:!0});var iFt=s(zO);IRo=r(iFt,"RobertaForCausalLM"),iFt.forEach(t),NRo=r(QSe," (RoBERTa model)"),QSe.forEach(t),qRo=i(W),L2=n(W,"LI",{});var HSe=s(L2);yhe=n(HSe,"STRONG",{});var dFt=s(yhe);jRo=r(dFt,"roformer"),dFt.forEach(t),DRo=r(HSe," \u2014 "),WO=n(HSe,"A",{href:!0});var cFt=s(WO);GRo=r(cFt,"RoFormerForCausalLM"),cFt.forEach(t),ORo=r(HSe," (RoFormer model)"),HSe.forEach(t),VRo=i(W),y2=n(W,"LI",{});var USe=s(y2);xhe=n(USe,"STRONG",{});var fFt=s(xhe);XRo=r(fFt,"speech_to_text_2"),fFt.forEach(t),zRo=r(USe," \u2014 "),QO=n(USe,"A",{href:!0});var mFt=s(QO);WRo=r(mFt,"Speech2Text2ForCausalLM"),mFt.forEach(t),QRo=r(USe," (Speech2Text2 model)"),USe.forEach(t),HRo=i(W),x2=n(W,"LI",{});var JSe=s(x2);$he=n(JSe,"STRONG",{});var gFt=s($he);URo=r(gFt,"transfo-xl"),gFt.forEach(t),JRo=r(JSe," \u2014 "),HO=n(JSe,"A",{href:!0});var hFt=s(HO);YRo=r(hFt,"TransfoXLLMHeadModel"),hFt.forEach(t),KRo=r(JSe," (Transformer-XL model)"),JSe.forEach(t),ZRo=i(W),$2=n(W,"LI",{});var YSe=s($2);khe=n(YSe,"STRONG",{});var pFt=s(khe);ePo=r(pFt,"trocr"),pFt.forEach(t),oPo=r(YSe," \u2014 "),UO=n(YSe,"A",{href:!0});var _Ft=s(UO);rPo=r(_Ft,"TrOCRForCausalLM"),_Ft.forEach(t),tPo=r(YSe," (TrOCR model)"),YSe.forEach(t),aPo=i(W),k2=n(W,"LI",{});var KSe=s(k2);She=n(KSe,"STRONG",{});var uFt=s(She);nPo=r(uFt,"xglm"),uFt.forEach(t),sPo=r(KSe," \u2014 "),JO=n(KSe,"A",{href:!0});var bFt=s(JO);lPo=r(bFt,"XGLMForCausalLM"),bFt.forEach(t),iPo=r(KSe," (XGLM model)"),KSe.forEach(t),dPo=i(W),S2=n(W,"LI",{});var ZSe=s(S2);Rhe=n(ZSe,"STRONG",{});var vFt=s(Rhe);cPo=r(vFt,"xlm"),vFt.forEach(t),fPo=r(ZSe," \u2014 "),YO=n(ZSe,"A",{href:!0});var FFt=s(YO);mPo=r(FFt,"XLMWithLMHeadModel"),FFt.forEach(t),gPo=r(ZSe," (XLM model)"),ZSe.forEach(t),hPo=i(W),R2=n(W,"LI",{});var eRe=s(R2);Phe=n(eRe,"STRONG",{});var TFt=s(Phe);pPo=r(TFt,"xlm-prophetnet"),TFt.forEach(t),_Po=r(eRe," \u2014 "),KO=n(eRe,"A",{href:!0});var MFt=s(KO);uPo=r(MFt,"XLMProphetNetForCausalLM"),MFt.forEach(t),bPo=r(eRe," (XLM-ProphetNet model)"),eRe.forEach(t),vPo=i(W),P2=n(W,"LI",{});var oRe=s(P2);Bhe=n(oRe,"STRONG",{});var EFt=s(Bhe);FPo=r(EFt,"xlm-roberta"),EFt.forEach(t),TPo=r(oRe," \u2014 "),ZO=n(oRe,"A",{href:!0});var CFt=s(ZO);MPo=r(CFt,"XLMRobertaForCausalLM"),CFt.forEach(t),EPo=r(oRe," (XLM-RoBERTa model)"),oRe.forEach(t),CPo=i(W),B2=n(W,"LI",{});var rRe=s(B2);Ihe=n(rRe,"STRONG",{});var wFt=s(Ihe);wPo=r(wFt,"xlm-roberta-xl"),wFt.forEach(t),APo=r(rRe," \u2014 "),eV=n(rRe,"A",{href:!0});var AFt=s(eV);LPo=r(AFt,"XLMRobertaXLForCausalLM"),AFt.forEach(t),yPo=r(rRe," (XLM-RoBERTa-XL model)"),rRe.forEach(t),xPo=i(W),I2=n(W,"LI",{});var tRe=s(I2);Nhe=n(tRe,"STRONG",{});var LFt=s(Nhe);$Po=r(LFt,"xlnet"),LFt.forEach(t),kPo=r(tRe," \u2014 "),oV=n(tRe,"A",{href:!0});var yFt=s(oV);SPo=r(yFt,"XLNetLMHeadModel"),yFt.forEach(t),RPo=r(tRe," (XLNet model)"),tRe.forEach(t),W.forEach(t),PPo=i(da),N2=n(da,"P",{});var aRe=s(N2);BPo=r(aRe,"The model is set in evaluation mode by default using "),qhe=n(aRe,"CODE",{});var xFt=s(qhe);IPo=r(xFt,"model.eval()"),xFt.forEach(t),NPo=r(aRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jhe=n(aRe,"CODE",{});var $Ft=s(jhe);qPo=r($Ft,"model.train()"),$Ft.forEach(t),aRe.forEach(t),jPo=i(da),T(q2.$$.fragment,da),da.forEach(t),sl.forEach(t),JXe=i(f),Ki=n(f,"H2",{class:!0});var rQe=s(Ki);j2=n(rQe,"A",{id:!0,class:!0,href:!0});var kFt=s(j2);Dhe=n(kFt,"SPAN",{});var SFt=s(Dhe);T(Z6.$$.fragment,SFt),SFt.forEach(t),kFt.forEach(t),DPo=i(rQe),Ghe=n(rQe,"SPAN",{});var RFt=s(Ghe);GPo=r(RFt,"AutoModelForMaskedLM"),RFt.forEach(t),rQe.forEach(t),YXe=i(f),Ro=n(f,"DIV",{class:!0});var ll=s(Ro);T(eL.$$.fragment,ll),OPo=i(ll),Zi=n(ll,"P",{});var tte=s(Zi);VPo=r(tte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),rV=n(tte,"A",{href:!0});var PFt=s(rV);XPo=r(PFt,"from_pretrained()"),PFt.forEach(t),zPo=r(tte," class method or the "),tV=n(tte,"A",{href:!0});var BFt=s(tV);WPo=r(BFt,"from_config()"),BFt.forEach(t),QPo=r(tte,` class
method.`),tte.forEach(t),HPo=i(ll),oL=n(ll,"P",{});var tQe=s(oL);UPo=r(tQe,"This class cannot be instantiated directly using "),Ohe=n(tQe,"CODE",{});var IFt=s(Ohe);JPo=r(IFt,"__init__()"),IFt.forEach(t),YPo=r(tQe," (throws an error)."),tQe.forEach(t),KPo=i(ll),ft=n(ll,"DIV",{class:!0});var Mw=s(ft);T(rL.$$.fragment,Mw),ZPo=i(Mw),Vhe=n(Mw,"P",{});var NFt=s(Vhe);eBo=r(NFt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),NFt.forEach(t),oBo=i(Mw),ed=n(Mw,"P",{});var ate=s(ed);rBo=r(ate,`Note:
Loading a model from its configuration file does `),Xhe=n(ate,"STRONG",{});var qFt=s(Xhe);tBo=r(qFt,"not"),qFt.forEach(t),aBo=r(ate,` load the model weights. It only affects the
model\u2019s configuration. Use `),aV=n(ate,"A",{href:!0});var jFt=s(aV);nBo=r(jFt,"from_pretrained()"),jFt.forEach(t),sBo=r(ate," to load the model weights."),ate.forEach(t),lBo=i(Mw),T(D2.$$.fragment,Mw),Mw.forEach(t),iBo=i(ll),eo=n(ll,"DIV",{class:!0});var ca=s(eo);T(tL.$$.fragment,ca),dBo=i(ca),zhe=n(ca,"P",{});var DFt=s(zhe);cBo=r(DFt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),DFt.forEach(t),fBo=i(ca),ja=n(ca,"P",{});var Ew=s(ja);mBo=r(Ew,"The model class to instantiate is selected based on the "),Whe=n(Ew,"CODE",{});var GFt=s(Whe);gBo=r(GFt,"model_type"),GFt.forEach(t),hBo=r(Ew,` property of the config object (either
passed as an argument or loaded from `),Qhe=n(Ew,"CODE",{});var OFt=s(Qhe);pBo=r(OFt,"pretrained_model_name_or_path"),OFt.forEach(t),_Bo=r(Ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hhe=n(Ew,"CODE",{});var VFt=s(Hhe);uBo=r(VFt,"pretrained_model_name_or_path"),VFt.forEach(t),bBo=r(Ew,":"),Ew.forEach(t),vBo=i(ca),Q=n(ca,"UL",{});var H=s(Q);G2=n(H,"LI",{});var nRe=s(G2);Uhe=n(nRe,"STRONG",{});var XFt=s(Uhe);FBo=r(XFt,"albert"),XFt.forEach(t),TBo=r(nRe," \u2014 "),nV=n(nRe,"A",{href:!0});var zFt=s(nV);MBo=r(zFt,"AlbertForMaskedLM"),zFt.forEach(t),EBo=r(nRe," (ALBERT model)"),nRe.forEach(t),CBo=i(H),O2=n(H,"LI",{});var sRe=s(O2);Jhe=n(sRe,"STRONG",{});var WFt=s(Jhe);wBo=r(WFt,"bart"),WFt.forEach(t),ABo=r(sRe," \u2014 "),sV=n(sRe,"A",{href:!0});var QFt=s(sV);LBo=r(QFt,"BartForConditionalGeneration"),QFt.forEach(t),yBo=r(sRe," (BART model)"),sRe.forEach(t),xBo=i(H),V2=n(H,"LI",{});var lRe=s(V2);Yhe=n(lRe,"STRONG",{});var HFt=s(Yhe);$Bo=r(HFt,"bert"),HFt.forEach(t),kBo=r(lRe," \u2014 "),lV=n(lRe,"A",{href:!0});var UFt=s(lV);SBo=r(UFt,"BertForMaskedLM"),UFt.forEach(t),RBo=r(lRe," (BERT model)"),lRe.forEach(t),PBo=i(H),X2=n(H,"LI",{});var iRe=s(X2);Khe=n(iRe,"STRONG",{});var JFt=s(Khe);BBo=r(JFt,"big_bird"),JFt.forEach(t),IBo=r(iRe," \u2014 "),iV=n(iRe,"A",{href:!0});var YFt=s(iV);NBo=r(YFt,"BigBirdForMaskedLM"),YFt.forEach(t),qBo=r(iRe," (BigBird model)"),iRe.forEach(t),jBo=i(H),z2=n(H,"LI",{});var dRe=s(z2);Zhe=n(dRe,"STRONG",{});var KFt=s(Zhe);DBo=r(KFt,"camembert"),KFt.forEach(t),GBo=r(dRe," \u2014 "),dV=n(dRe,"A",{href:!0});var ZFt=s(dV);OBo=r(ZFt,"CamembertForMaskedLM"),ZFt.forEach(t),VBo=r(dRe," (CamemBERT model)"),dRe.forEach(t),XBo=i(H),W2=n(H,"LI",{});var cRe=s(W2);epe=n(cRe,"STRONG",{});var eTt=s(epe);zBo=r(eTt,"convbert"),eTt.forEach(t),WBo=r(cRe," \u2014 "),cV=n(cRe,"A",{href:!0});var oTt=s(cV);QBo=r(oTt,"ConvBertForMaskedLM"),oTt.forEach(t),HBo=r(cRe," (ConvBERT model)"),cRe.forEach(t),UBo=i(H),Q2=n(H,"LI",{});var fRe=s(Q2);ope=n(fRe,"STRONG",{});var rTt=s(ope);JBo=r(rTt,"data2vec-text"),rTt.forEach(t),YBo=r(fRe," \u2014 "),fV=n(fRe,"A",{href:!0});var tTt=s(fV);KBo=r(tTt,"Data2VecTextForMaskedLM"),tTt.forEach(t),ZBo=r(fRe," (Data2VecText model)"),fRe.forEach(t),eIo=i(H),H2=n(H,"LI",{});var mRe=s(H2);rpe=n(mRe,"STRONG",{});var aTt=s(rpe);oIo=r(aTt,"deberta"),aTt.forEach(t),rIo=r(mRe," \u2014 "),mV=n(mRe,"A",{href:!0});var nTt=s(mV);tIo=r(nTt,"DebertaForMaskedLM"),nTt.forEach(t),aIo=r(mRe," (DeBERTa model)"),mRe.forEach(t),nIo=i(H),U2=n(H,"LI",{});var gRe=s(U2);tpe=n(gRe,"STRONG",{});var sTt=s(tpe);sIo=r(sTt,"deberta-v2"),sTt.forEach(t),lIo=r(gRe," \u2014 "),gV=n(gRe,"A",{href:!0});var lTt=s(gV);iIo=r(lTt,"DebertaV2ForMaskedLM"),lTt.forEach(t),dIo=r(gRe," (DeBERTa-v2 model)"),gRe.forEach(t),cIo=i(H),J2=n(H,"LI",{});var hRe=s(J2);ape=n(hRe,"STRONG",{});var iTt=s(ape);fIo=r(iTt,"distilbert"),iTt.forEach(t),mIo=r(hRe," \u2014 "),hV=n(hRe,"A",{href:!0});var dTt=s(hV);gIo=r(dTt,"DistilBertForMaskedLM"),dTt.forEach(t),hIo=r(hRe," (DistilBERT model)"),hRe.forEach(t),pIo=i(H),Y2=n(H,"LI",{});var pRe=s(Y2);npe=n(pRe,"STRONG",{});var cTt=s(npe);_Io=r(cTt,"electra"),cTt.forEach(t),uIo=r(pRe," \u2014 "),pV=n(pRe,"A",{href:!0});var fTt=s(pV);bIo=r(fTt,"ElectraForMaskedLM"),fTt.forEach(t),vIo=r(pRe," (ELECTRA model)"),pRe.forEach(t),FIo=i(H),K2=n(H,"LI",{});var _Re=s(K2);spe=n(_Re,"STRONG",{});var mTt=s(spe);TIo=r(mTt,"flaubert"),mTt.forEach(t),MIo=r(_Re," \u2014 "),_V=n(_Re,"A",{href:!0});var gTt=s(_V);EIo=r(gTt,"FlaubertWithLMHeadModel"),gTt.forEach(t),CIo=r(_Re," (FlauBERT model)"),_Re.forEach(t),wIo=i(H),Z2=n(H,"LI",{});var uRe=s(Z2);lpe=n(uRe,"STRONG",{});var hTt=s(lpe);AIo=r(hTt,"fnet"),hTt.forEach(t),LIo=r(uRe," \u2014 "),uV=n(uRe,"A",{href:!0});var pTt=s(uV);yIo=r(pTt,"FNetForMaskedLM"),pTt.forEach(t),xIo=r(uRe," (FNet model)"),uRe.forEach(t),$Io=i(H),eb=n(H,"LI",{});var bRe=s(eb);ipe=n(bRe,"STRONG",{});var _Tt=s(ipe);kIo=r(_Tt,"funnel"),_Tt.forEach(t),SIo=r(bRe," \u2014 "),bV=n(bRe,"A",{href:!0});var uTt=s(bV);RIo=r(uTt,"FunnelForMaskedLM"),uTt.forEach(t),PIo=r(bRe," (Funnel Transformer model)"),bRe.forEach(t),BIo=i(H),ob=n(H,"LI",{});var vRe=s(ob);dpe=n(vRe,"STRONG",{});var bTt=s(dpe);IIo=r(bTt,"ibert"),bTt.forEach(t),NIo=r(vRe," \u2014 "),vV=n(vRe,"A",{href:!0});var vTt=s(vV);qIo=r(vTt,"IBertForMaskedLM"),vTt.forEach(t),jIo=r(vRe," (I-BERT model)"),vRe.forEach(t),DIo=i(H),rb=n(H,"LI",{});var FRe=s(rb);cpe=n(FRe,"STRONG",{});var FTt=s(cpe);GIo=r(FTt,"layoutlm"),FTt.forEach(t),OIo=r(FRe," \u2014 "),FV=n(FRe,"A",{href:!0});var TTt=s(FV);VIo=r(TTt,"LayoutLMForMaskedLM"),TTt.forEach(t),XIo=r(FRe," (LayoutLM model)"),FRe.forEach(t),zIo=i(H),tb=n(H,"LI",{});var TRe=s(tb);fpe=n(TRe,"STRONG",{});var MTt=s(fpe);WIo=r(MTt,"longformer"),MTt.forEach(t),QIo=r(TRe," \u2014 "),TV=n(TRe,"A",{href:!0});var ETt=s(TV);HIo=r(ETt,"LongformerForMaskedLM"),ETt.forEach(t),UIo=r(TRe," (Longformer model)"),TRe.forEach(t),JIo=i(H),ab=n(H,"LI",{});var MRe=s(ab);mpe=n(MRe,"STRONG",{});var CTt=s(mpe);YIo=r(CTt,"luke"),CTt.forEach(t),KIo=r(MRe," \u2014 "),MV=n(MRe,"A",{href:!0});var wTt=s(MV);ZIo=r(wTt,"LukeForMaskedLM"),wTt.forEach(t),eNo=r(MRe," (LUKE model)"),MRe.forEach(t),oNo=i(H),nb=n(H,"LI",{});var ERe=s(nb);gpe=n(ERe,"STRONG",{});var ATt=s(gpe);rNo=r(ATt,"mbart"),ATt.forEach(t),tNo=r(ERe," \u2014 "),EV=n(ERe,"A",{href:!0});var LTt=s(EV);aNo=r(LTt,"MBartForConditionalGeneration"),LTt.forEach(t),nNo=r(ERe," (mBART model)"),ERe.forEach(t),sNo=i(H),sb=n(H,"LI",{});var CRe=s(sb);hpe=n(CRe,"STRONG",{});var yTt=s(hpe);lNo=r(yTt,"megatron-bert"),yTt.forEach(t),iNo=r(CRe," \u2014 "),CV=n(CRe,"A",{href:!0});var xTt=s(CV);dNo=r(xTt,"MegatronBertForMaskedLM"),xTt.forEach(t),cNo=r(CRe," (Megatron-BERT model)"),CRe.forEach(t),fNo=i(H),lb=n(H,"LI",{});var wRe=s(lb);ppe=n(wRe,"STRONG",{});var $Tt=s(ppe);mNo=r($Tt,"mobilebert"),$Tt.forEach(t),gNo=r(wRe," \u2014 "),wV=n(wRe,"A",{href:!0});var kTt=s(wV);hNo=r(kTt,"MobileBertForMaskedLM"),kTt.forEach(t),pNo=r(wRe," (MobileBERT model)"),wRe.forEach(t),_No=i(H),ib=n(H,"LI",{});var ARe=s(ib);_pe=n(ARe,"STRONG",{});var STt=s(_pe);uNo=r(STt,"mpnet"),STt.forEach(t),bNo=r(ARe," \u2014 "),AV=n(ARe,"A",{href:!0});var RTt=s(AV);vNo=r(RTt,"MPNetForMaskedLM"),RTt.forEach(t),FNo=r(ARe," (MPNet model)"),ARe.forEach(t),TNo=i(H),db=n(H,"LI",{});var LRe=s(db);upe=n(LRe,"STRONG",{});var PTt=s(upe);MNo=r(PTt,"mvp"),PTt.forEach(t),ENo=r(LRe," \u2014 "),LV=n(LRe,"A",{href:!0});var BTt=s(LV);CNo=r(BTt,"MvpForConditionalGeneration"),BTt.forEach(t),wNo=r(LRe," (MVP model)"),LRe.forEach(t),ANo=i(H),cb=n(H,"LI",{});var yRe=s(cb);bpe=n(yRe,"STRONG",{});var ITt=s(bpe);LNo=r(ITt,"nezha"),ITt.forEach(t),yNo=r(yRe," \u2014 "),yV=n(yRe,"A",{href:!0});var NTt=s(yV);xNo=r(NTt,"NezhaForMaskedLM"),NTt.forEach(t),$No=r(yRe," (Nezha model)"),yRe.forEach(t),kNo=i(H),fb=n(H,"LI",{});var xRe=s(fb);vpe=n(xRe,"STRONG",{});var qTt=s(vpe);SNo=r(qTt,"nystromformer"),qTt.forEach(t),RNo=r(xRe," \u2014 "),xV=n(xRe,"A",{href:!0});var jTt=s(xV);PNo=r(jTt,"NystromformerForMaskedLM"),jTt.forEach(t),BNo=r(xRe," (Nystr\xF6mformer model)"),xRe.forEach(t),INo=i(H),mb=n(H,"LI",{});var $Re=s(mb);Fpe=n($Re,"STRONG",{});var DTt=s(Fpe);NNo=r(DTt,"perceiver"),DTt.forEach(t),qNo=r($Re," \u2014 "),$V=n($Re,"A",{href:!0});var GTt=s($V);jNo=r(GTt,"PerceiverForMaskedLM"),GTt.forEach(t),DNo=r($Re," (Perceiver model)"),$Re.forEach(t),GNo=i(H),gb=n(H,"LI",{});var kRe=s(gb);Tpe=n(kRe,"STRONG",{});var OTt=s(Tpe);ONo=r(OTt,"qdqbert"),OTt.forEach(t),VNo=r(kRe," \u2014 "),kV=n(kRe,"A",{href:!0});var VTt=s(kV);XNo=r(VTt,"QDQBertForMaskedLM"),VTt.forEach(t),zNo=r(kRe," (QDQBert model)"),kRe.forEach(t),WNo=i(H),hb=n(H,"LI",{});var SRe=s(hb);Mpe=n(SRe,"STRONG",{});var XTt=s(Mpe);QNo=r(XTt,"reformer"),XTt.forEach(t),HNo=r(SRe," \u2014 "),SV=n(SRe,"A",{href:!0});var zTt=s(SV);UNo=r(zTt,"ReformerForMaskedLM"),zTt.forEach(t),JNo=r(SRe," (Reformer model)"),SRe.forEach(t),YNo=i(H),pb=n(H,"LI",{});var RRe=s(pb);Epe=n(RRe,"STRONG",{});var WTt=s(Epe);KNo=r(WTt,"rembert"),WTt.forEach(t),ZNo=r(RRe," \u2014 "),RV=n(RRe,"A",{href:!0});var QTt=s(RV);eqo=r(QTt,"RemBertForMaskedLM"),QTt.forEach(t),oqo=r(RRe," (RemBERT model)"),RRe.forEach(t),rqo=i(H),_b=n(H,"LI",{});var PRe=s(_b);Cpe=n(PRe,"STRONG",{});var HTt=s(Cpe);tqo=r(HTt,"roberta"),HTt.forEach(t),aqo=r(PRe," \u2014 "),PV=n(PRe,"A",{href:!0});var UTt=s(PV);nqo=r(UTt,"RobertaForMaskedLM"),UTt.forEach(t),sqo=r(PRe," (RoBERTa model)"),PRe.forEach(t),lqo=i(H),ub=n(H,"LI",{});var BRe=s(ub);wpe=n(BRe,"STRONG",{});var JTt=s(wpe);iqo=r(JTt,"roformer"),JTt.forEach(t),dqo=r(BRe," \u2014 "),BV=n(BRe,"A",{href:!0});var YTt=s(BV);cqo=r(YTt,"RoFormerForMaskedLM"),YTt.forEach(t),fqo=r(BRe," (RoFormer model)"),BRe.forEach(t),mqo=i(H),bb=n(H,"LI",{});var IRe=s(bb);Ape=n(IRe,"STRONG",{});var KTt=s(Ape);gqo=r(KTt,"squeezebert"),KTt.forEach(t),hqo=r(IRe," \u2014 "),IV=n(IRe,"A",{href:!0});var ZTt=s(IV);pqo=r(ZTt,"SqueezeBertForMaskedLM"),ZTt.forEach(t),_qo=r(IRe," (SqueezeBERT model)"),IRe.forEach(t),uqo=i(H),vb=n(H,"LI",{});var NRe=s(vb);Lpe=n(NRe,"STRONG",{});var e7t=s(Lpe);bqo=r(e7t,"tapas"),e7t.forEach(t),vqo=r(NRe," \u2014 "),NV=n(NRe,"A",{href:!0});var o7t=s(NV);Fqo=r(o7t,"TapasForMaskedLM"),o7t.forEach(t),Tqo=r(NRe," (TAPAS model)"),NRe.forEach(t),Mqo=i(H),Fb=n(H,"LI",{});var qRe=s(Fb);ype=n(qRe,"STRONG",{});var r7t=s(ype);Eqo=r(r7t,"wav2vec2"),r7t.forEach(t),Cqo=r(qRe," \u2014 "),xpe=n(qRe,"CODE",{});var t7t=s(xpe);wqo=r(t7t,"Wav2Vec2ForMaskedLM"),t7t.forEach(t),Aqo=r(qRe," (Wav2Vec2 model)"),qRe.forEach(t),Lqo=i(H),Tb=n(H,"LI",{});var jRe=s(Tb);$pe=n(jRe,"STRONG",{});var a7t=s($pe);yqo=r(a7t,"xlm"),a7t.forEach(t),xqo=r(jRe," \u2014 "),qV=n(jRe,"A",{href:!0});var n7t=s(qV);$qo=r(n7t,"XLMWithLMHeadModel"),n7t.forEach(t),kqo=r(jRe," (XLM model)"),jRe.forEach(t),Sqo=i(H),Mb=n(H,"LI",{});var DRe=s(Mb);kpe=n(DRe,"STRONG",{});var s7t=s(kpe);Rqo=r(s7t,"xlm-roberta"),s7t.forEach(t),Pqo=r(DRe," \u2014 "),jV=n(DRe,"A",{href:!0});var l7t=s(jV);Bqo=r(l7t,"XLMRobertaForMaskedLM"),l7t.forEach(t),Iqo=r(DRe," (XLM-RoBERTa model)"),DRe.forEach(t),Nqo=i(H),Eb=n(H,"LI",{});var GRe=s(Eb);Spe=n(GRe,"STRONG",{});var i7t=s(Spe);qqo=r(i7t,"xlm-roberta-xl"),i7t.forEach(t),jqo=r(GRe," \u2014 "),DV=n(GRe,"A",{href:!0});var d7t=s(DV);Dqo=r(d7t,"XLMRobertaXLForMaskedLM"),d7t.forEach(t),Gqo=r(GRe," (XLM-RoBERTa-XL model)"),GRe.forEach(t),Oqo=i(H),Cb=n(H,"LI",{});var ORe=s(Cb);Rpe=n(ORe,"STRONG",{});var c7t=s(Rpe);Vqo=r(c7t,"yoso"),c7t.forEach(t),Xqo=r(ORe," \u2014 "),GV=n(ORe,"A",{href:!0});var f7t=s(GV);zqo=r(f7t,"YosoForMaskedLM"),f7t.forEach(t),Wqo=r(ORe," (YOSO model)"),ORe.forEach(t),H.forEach(t),Qqo=i(ca),wb=n(ca,"P",{});var VRe=s(wb);Hqo=r(VRe,"The model is set in evaluation mode by default using "),Ppe=n(VRe,"CODE",{});var m7t=s(Ppe);Uqo=r(m7t,"model.eval()"),m7t.forEach(t),Jqo=r(VRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bpe=n(VRe,"CODE",{});var g7t=s(Bpe);Yqo=r(g7t,"model.train()"),g7t.forEach(t),VRe.forEach(t),Kqo=i(ca),T(Ab.$$.fragment,ca),ca.forEach(t),ll.forEach(t),KXe=i(f),od=n(f,"H2",{class:!0});var aQe=s(od);Lb=n(aQe,"A",{id:!0,class:!0,href:!0});var h7t=s(Lb);Ipe=n(h7t,"SPAN",{});var p7t=s(Ipe);T(aL.$$.fragment,p7t),p7t.forEach(t),h7t.forEach(t),Zqo=i(aQe),Npe=n(aQe,"SPAN",{});var _7t=s(Npe);ejo=r(_7t,"AutoModelForSeq2SeqLM"),_7t.forEach(t),aQe.forEach(t),ZXe=i(f),Po=n(f,"DIV",{class:!0});var il=s(Po);T(nL.$$.fragment,il),ojo=i(il),rd=n(il,"P",{});var nte=s(rd);rjo=r(nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),OV=n(nte,"A",{href:!0});var u7t=s(OV);tjo=r(u7t,"from_pretrained()"),u7t.forEach(t),ajo=r(nte," class method or the "),VV=n(nte,"A",{href:!0});var b7t=s(VV);njo=r(b7t,"from_config()"),b7t.forEach(t),sjo=r(nte,` class
method.`),nte.forEach(t),ljo=i(il),sL=n(il,"P",{});var nQe=s(sL);ijo=r(nQe,"This class cannot be instantiated directly using "),qpe=n(nQe,"CODE",{});var v7t=s(qpe);djo=r(v7t,"__init__()"),v7t.forEach(t),cjo=r(nQe," (throws an error)."),nQe.forEach(t),fjo=i(il),mt=n(il,"DIV",{class:!0});var Cw=s(mt);T(lL.$$.fragment,Cw),mjo=i(Cw),jpe=n(Cw,"P",{});var F7t=s(jpe);gjo=r(F7t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),F7t.forEach(t),hjo=i(Cw),td=n(Cw,"P",{});var ste=s(td);pjo=r(ste,`Note:
Loading a model from its configuration file does `),Dpe=n(ste,"STRONG",{});var T7t=s(Dpe);_jo=r(T7t,"not"),T7t.forEach(t),ujo=r(ste,` load the model weights. It only affects the
model\u2019s configuration. Use `),XV=n(ste,"A",{href:!0});var M7t=s(XV);bjo=r(M7t,"from_pretrained()"),M7t.forEach(t),vjo=r(ste," to load the model weights."),ste.forEach(t),Fjo=i(Cw),T(yb.$$.fragment,Cw),Cw.forEach(t),Tjo=i(il),oo=n(il,"DIV",{class:!0});var fa=s(oo);T(iL.$$.fragment,fa),Mjo=i(fa),Gpe=n(fa,"P",{});var E7t=s(Gpe);Ejo=r(E7t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),E7t.forEach(t),Cjo=i(fa),Da=n(fa,"P",{});var ww=s(Da);wjo=r(ww,"The model class to instantiate is selected based on the "),Ope=n(ww,"CODE",{});var C7t=s(Ope);Ajo=r(C7t,"model_type"),C7t.forEach(t),Ljo=r(ww,` property of the config object (either
passed as an argument or loaded from `),Vpe=n(ww,"CODE",{});var w7t=s(Vpe);yjo=r(w7t,"pretrained_model_name_or_path"),w7t.forEach(t),xjo=r(ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xpe=n(ww,"CODE",{});var A7t=s(Xpe);$jo=r(A7t,"pretrained_model_name_or_path"),A7t.forEach(t),kjo=r(ww,":"),ww.forEach(t),Sjo=i(fa),me=n(fa,"UL",{});var ue=s(me);xb=n(ue,"LI",{});var XRe=s(xb);zpe=n(XRe,"STRONG",{});var L7t=s(zpe);Rjo=r(L7t,"bart"),L7t.forEach(t),Pjo=r(XRe," \u2014 "),zV=n(XRe,"A",{href:!0});var y7t=s(zV);Bjo=r(y7t,"BartForConditionalGeneration"),y7t.forEach(t),Ijo=r(XRe," (BART model)"),XRe.forEach(t),Njo=i(ue),$b=n(ue,"LI",{});var zRe=s($b);Wpe=n(zRe,"STRONG",{});var x7t=s(Wpe);qjo=r(x7t,"bigbird_pegasus"),x7t.forEach(t),jjo=r(zRe," \u2014 "),WV=n(zRe,"A",{href:!0});var $7t=s(WV);Djo=r($7t,"BigBirdPegasusForConditionalGeneration"),$7t.forEach(t),Gjo=r(zRe," (BigBird-Pegasus model)"),zRe.forEach(t),Ojo=i(ue),kb=n(ue,"LI",{});var WRe=s(kb);Qpe=n(WRe,"STRONG",{});var k7t=s(Qpe);Vjo=r(k7t,"blenderbot"),k7t.forEach(t),Xjo=r(WRe," \u2014 "),QV=n(WRe,"A",{href:!0});var S7t=s(QV);zjo=r(S7t,"BlenderbotForConditionalGeneration"),S7t.forEach(t),Wjo=r(WRe," (Blenderbot model)"),WRe.forEach(t),Qjo=i(ue),Sb=n(ue,"LI",{});var QRe=s(Sb);Hpe=n(QRe,"STRONG",{});var R7t=s(Hpe);Hjo=r(R7t,"blenderbot-small"),R7t.forEach(t),Ujo=r(QRe," \u2014 "),HV=n(QRe,"A",{href:!0});var P7t=s(HV);Jjo=r(P7t,"BlenderbotSmallForConditionalGeneration"),P7t.forEach(t),Yjo=r(QRe," (BlenderbotSmall model)"),QRe.forEach(t),Kjo=i(ue),Rb=n(ue,"LI",{});var HRe=s(Rb);Upe=n(HRe,"STRONG",{});var B7t=s(Upe);Zjo=r(B7t,"encoder-decoder"),B7t.forEach(t),eDo=r(HRe," \u2014 "),UV=n(HRe,"A",{href:!0});var I7t=s(UV);oDo=r(I7t,"EncoderDecoderModel"),I7t.forEach(t),rDo=r(HRe," (Encoder decoder model)"),HRe.forEach(t),tDo=i(ue),Pb=n(ue,"LI",{});var URe=s(Pb);Jpe=n(URe,"STRONG",{});var N7t=s(Jpe);aDo=r(N7t,"fsmt"),N7t.forEach(t),nDo=r(URe," \u2014 "),JV=n(URe,"A",{href:!0});var q7t=s(JV);sDo=r(q7t,"FSMTForConditionalGeneration"),q7t.forEach(t),lDo=r(URe," (FairSeq Machine-Translation model)"),URe.forEach(t),iDo=i(ue),Bb=n(ue,"LI",{});var JRe=s(Bb);Ype=n(JRe,"STRONG",{});var j7t=s(Ype);dDo=r(j7t,"led"),j7t.forEach(t),cDo=r(JRe," \u2014 "),YV=n(JRe,"A",{href:!0});var D7t=s(YV);fDo=r(D7t,"LEDForConditionalGeneration"),D7t.forEach(t),mDo=r(JRe," (LED model)"),JRe.forEach(t),gDo=i(ue),Ib=n(ue,"LI",{});var YRe=s(Ib);Kpe=n(YRe,"STRONG",{});var G7t=s(Kpe);hDo=r(G7t,"longt5"),G7t.forEach(t),pDo=r(YRe," \u2014 "),KV=n(YRe,"A",{href:!0});var O7t=s(KV);_Do=r(O7t,"LongT5ForConditionalGeneration"),O7t.forEach(t),uDo=r(YRe," (LongT5 model)"),YRe.forEach(t),bDo=i(ue),Nb=n(ue,"LI",{});var KRe=s(Nb);Zpe=n(KRe,"STRONG",{});var V7t=s(Zpe);vDo=r(V7t,"m2m_100"),V7t.forEach(t),FDo=r(KRe," \u2014 "),ZV=n(KRe,"A",{href:!0});var X7t=s(ZV);TDo=r(X7t,"M2M100ForConditionalGeneration"),X7t.forEach(t),MDo=r(KRe," (M2M100 model)"),KRe.forEach(t),EDo=i(ue),qb=n(ue,"LI",{});var ZRe=s(qb);e_e=n(ZRe,"STRONG",{});var z7t=s(e_e);CDo=r(z7t,"marian"),z7t.forEach(t),wDo=r(ZRe," \u2014 "),eX=n(ZRe,"A",{href:!0});var W7t=s(eX);ADo=r(W7t,"MarianMTModel"),W7t.forEach(t),LDo=r(ZRe," (Marian model)"),ZRe.forEach(t),yDo=i(ue),jb=n(ue,"LI",{});var ePe=s(jb);o_e=n(ePe,"STRONG",{});var Q7t=s(o_e);xDo=r(Q7t,"mbart"),Q7t.forEach(t),$Do=r(ePe," \u2014 "),oX=n(ePe,"A",{href:!0});var H7t=s(oX);kDo=r(H7t,"MBartForConditionalGeneration"),H7t.forEach(t),SDo=r(ePe," (mBART model)"),ePe.forEach(t),RDo=i(ue),Db=n(ue,"LI",{});var oPe=s(Db);r_e=n(oPe,"STRONG",{});var U7t=s(r_e);PDo=r(U7t,"mt5"),U7t.forEach(t),BDo=r(oPe," \u2014 "),rX=n(oPe,"A",{href:!0});var J7t=s(rX);IDo=r(J7t,"MT5ForConditionalGeneration"),J7t.forEach(t),NDo=r(oPe," (MT5 model)"),oPe.forEach(t),qDo=i(ue),Gb=n(ue,"LI",{});var rPe=s(Gb);t_e=n(rPe,"STRONG",{});var Y7t=s(t_e);jDo=r(Y7t,"mvp"),Y7t.forEach(t),DDo=r(rPe," \u2014 "),tX=n(rPe,"A",{href:!0});var K7t=s(tX);GDo=r(K7t,"MvpForConditionalGeneration"),K7t.forEach(t),ODo=r(rPe," (MVP model)"),rPe.forEach(t),VDo=i(ue),Ob=n(ue,"LI",{});var tPe=s(Ob);a_e=n(tPe,"STRONG",{});var Z7t=s(a_e);XDo=r(Z7t,"nllb"),Z7t.forEach(t),zDo=r(tPe," \u2014 "),aX=n(tPe,"A",{href:!0});var e8t=s(aX);WDo=r(e8t,"M2M100ForConditionalGeneration"),e8t.forEach(t),QDo=r(tPe," (NLLB model)"),tPe.forEach(t),HDo=i(ue),Vb=n(ue,"LI",{});var aPe=s(Vb);n_e=n(aPe,"STRONG",{});var o8t=s(n_e);UDo=r(o8t,"pegasus"),o8t.forEach(t),JDo=r(aPe," \u2014 "),nX=n(aPe,"A",{href:!0});var r8t=s(nX);YDo=r(r8t,"PegasusForConditionalGeneration"),r8t.forEach(t),KDo=r(aPe," (Pegasus model)"),aPe.forEach(t),ZDo=i(ue),Xb=n(ue,"LI",{});var nPe=s(Xb);s_e=n(nPe,"STRONG",{});var t8t=s(s_e);eGo=r(t8t,"plbart"),t8t.forEach(t),oGo=r(nPe," \u2014 "),sX=n(nPe,"A",{href:!0});var a8t=s(sX);rGo=r(a8t,"PLBartForConditionalGeneration"),a8t.forEach(t),tGo=r(nPe," (PLBart model)"),nPe.forEach(t),aGo=i(ue),zb=n(ue,"LI",{});var sPe=s(zb);l_e=n(sPe,"STRONG",{});var n8t=s(l_e);nGo=r(n8t,"prophetnet"),n8t.forEach(t),sGo=r(sPe," \u2014 "),lX=n(sPe,"A",{href:!0});var s8t=s(lX);lGo=r(s8t,"ProphetNetForConditionalGeneration"),s8t.forEach(t),iGo=r(sPe," (ProphetNet model)"),sPe.forEach(t),dGo=i(ue),Wb=n(ue,"LI",{});var lPe=s(Wb);i_e=n(lPe,"STRONG",{});var l8t=s(i_e);cGo=r(l8t,"t5"),l8t.forEach(t),fGo=r(lPe," \u2014 "),iX=n(lPe,"A",{href:!0});var i8t=s(iX);mGo=r(i8t,"T5ForConditionalGeneration"),i8t.forEach(t),gGo=r(lPe," (T5 model)"),lPe.forEach(t),hGo=i(ue),Qb=n(ue,"LI",{});var iPe=s(Qb);d_e=n(iPe,"STRONG",{});var d8t=s(d_e);pGo=r(d8t,"xlm-prophetnet"),d8t.forEach(t),_Go=r(iPe," \u2014 "),dX=n(iPe,"A",{href:!0});var c8t=s(dX);uGo=r(c8t,"XLMProphetNetForConditionalGeneration"),c8t.forEach(t),bGo=r(iPe," (XLM-ProphetNet model)"),iPe.forEach(t),ue.forEach(t),vGo=i(fa),Hb=n(fa,"P",{});var dPe=s(Hb);FGo=r(dPe,"The model is set in evaluation mode by default using "),c_e=n(dPe,"CODE",{});var f8t=s(c_e);TGo=r(f8t,"model.eval()"),f8t.forEach(t),MGo=r(dPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f_e=n(dPe,"CODE",{});var m8t=s(f_e);EGo=r(m8t,"model.train()"),m8t.forEach(t),dPe.forEach(t),CGo=i(fa),T(Ub.$$.fragment,fa),fa.forEach(t),il.forEach(t),eze=i(f),ad=n(f,"H2",{class:!0});var sQe=s(ad);Jb=n(sQe,"A",{id:!0,class:!0,href:!0});var g8t=s(Jb);m_e=n(g8t,"SPAN",{});var h8t=s(m_e);T(dL.$$.fragment,h8t),h8t.forEach(t),g8t.forEach(t),wGo=i(sQe),g_e=n(sQe,"SPAN",{});var p8t=s(g_e);AGo=r(p8t,"AutoModelForSequenceClassification"),p8t.forEach(t),sQe.forEach(t),oze=i(f),Bo=n(f,"DIV",{class:!0});var dl=s(Bo);T(cL.$$.fragment,dl),LGo=i(dl),nd=n(dl,"P",{});var lte=s(nd);yGo=r(lte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),cX=n(lte,"A",{href:!0});var _8t=s(cX);xGo=r(_8t,"from_pretrained()"),_8t.forEach(t),$Go=r(lte," class method or the "),fX=n(lte,"A",{href:!0});var u8t=s(fX);kGo=r(u8t,"from_config()"),u8t.forEach(t),SGo=r(lte,` class
method.`),lte.forEach(t),RGo=i(dl),fL=n(dl,"P",{});var lQe=s(fL);PGo=r(lQe,"This class cannot be instantiated directly using "),h_e=n(lQe,"CODE",{});var b8t=s(h_e);BGo=r(b8t,"__init__()"),b8t.forEach(t),IGo=r(lQe," (throws an error)."),lQe.forEach(t),NGo=i(dl),gt=n(dl,"DIV",{class:!0});var Aw=s(gt);T(mL.$$.fragment,Aw),qGo=i(Aw),p_e=n(Aw,"P",{});var v8t=s(p_e);jGo=r(v8t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),v8t.forEach(t),DGo=i(Aw),sd=n(Aw,"P",{});var ite=s(sd);GGo=r(ite,`Note:
Loading a model from its configuration file does `),__e=n(ite,"STRONG",{});var F8t=s(__e);OGo=r(F8t,"not"),F8t.forEach(t),VGo=r(ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),mX=n(ite,"A",{href:!0});var T8t=s(mX);XGo=r(T8t,"from_pretrained()"),T8t.forEach(t),zGo=r(ite," to load the model weights."),ite.forEach(t),WGo=i(Aw),T(Yb.$$.fragment,Aw),Aw.forEach(t),QGo=i(dl),ro=n(dl,"DIV",{class:!0});var ma=s(ro);T(gL.$$.fragment,ma),HGo=i(ma),u_e=n(ma,"P",{});var M8t=s(u_e);UGo=r(M8t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),M8t.forEach(t),JGo=i(ma),Ga=n(ma,"P",{});var Lw=s(Ga);YGo=r(Lw,"The model class to instantiate is selected based on the "),b_e=n(Lw,"CODE",{});var E8t=s(b_e);KGo=r(E8t,"model_type"),E8t.forEach(t),ZGo=r(Lw,` property of the config object (either
passed as an argument or loaded from `),v_e=n(Lw,"CODE",{});var C8t=s(v_e);eOo=r(C8t,"pretrained_model_name_or_path"),C8t.forEach(t),oOo=r(Lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F_e=n(Lw,"CODE",{});var w8t=s(F_e);rOo=r(w8t,"pretrained_model_name_or_path"),w8t.forEach(t),tOo=r(Lw,":"),Lw.forEach(t),aOo=i(ma),N=n(ma,"UL",{});var j=s(N);Kb=n(j,"LI",{});var cPe=s(Kb);T_e=n(cPe,"STRONG",{});var A8t=s(T_e);nOo=r(A8t,"albert"),A8t.forEach(t),sOo=r(cPe," \u2014 "),gX=n(cPe,"A",{href:!0});var L8t=s(gX);lOo=r(L8t,"AlbertForSequenceClassification"),L8t.forEach(t),iOo=r(cPe," (ALBERT model)"),cPe.forEach(t),dOo=i(j),Zb=n(j,"LI",{});var fPe=s(Zb);M_e=n(fPe,"STRONG",{});var y8t=s(M_e);cOo=r(y8t,"bart"),y8t.forEach(t),fOo=r(fPe," \u2014 "),hX=n(fPe,"A",{href:!0});var x8t=s(hX);mOo=r(x8t,"BartForSequenceClassification"),x8t.forEach(t),gOo=r(fPe," (BART model)"),fPe.forEach(t),hOo=i(j),e3=n(j,"LI",{});var mPe=s(e3);E_e=n(mPe,"STRONG",{});var $8t=s(E_e);pOo=r($8t,"bert"),$8t.forEach(t),_Oo=r(mPe," \u2014 "),pX=n(mPe,"A",{href:!0});var k8t=s(pX);uOo=r(k8t,"BertForSequenceClassification"),k8t.forEach(t),bOo=r(mPe," (BERT model)"),mPe.forEach(t),vOo=i(j),o3=n(j,"LI",{});var gPe=s(o3);C_e=n(gPe,"STRONG",{});var S8t=s(C_e);FOo=r(S8t,"big_bird"),S8t.forEach(t),TOo=r(gPe," \u2014 "),_X=n(gPe,"A",{href:!0});var R8t=s(_X);MOo=r(R8t,"BigBirdForSequenceClassification"),R8t.forEach(t),EOo=r(gPe," (BigBird model)"),gPe.forEach(t),COo=i(j),r3=n(j,"LI",{});var hPe=s(r3);w_e=n(hPe,"STRONG",{});var P8t=s(w_e);wOo=r(P8t,"bigbird_pegasus"),P8t.forEach(t),AOo=r(hPe," \u2014 "),uX=n(hPe,"A",{href:!0});var B8t=s(uX);LOo=r(B8t,"BigBirdPegasusForSequenceClassification"),B8t.forEach(t),yOo=r(hPe," (BigBird-Pegasus model)"),hPe.forEach(t),xOo=i(j),t3=n(j,"LI",{});var pPe=s(t3);A_e=n(pPe,"STRONG",{});var I8t=s(A_e);$Oo=r(I8t,"bloom"),I8t.forEach(t),kOo=r(pPe," \u2014 "),bX=n(pPe,"A",{href:!0});var N8t=s(bX);SOo=r(N8t,"BloomForSequenceClassification"),N8t.forEach(t),ROo=r(pPe," (BLOOM model)"),pPe.forEach(t),POo=i(j),a3=n(j,"LI",{});var _Pe=s(a3);L_e=n(_Pe,"STRONG",{});var q8t=s(L_e);BOo=r(q8t,"camembert"),q8t.forEach(t),IOo=r(_Pe," \u2014 "),vX=n(_Pe,"A",{href:!0});var j8t=s(vX);NOo=r(j8t,"CamembertForSequenceClassification"),j8t.forEach(t),qOo=r(_Pe," (CamemBERT model)"),_Pe.forEach(t),jOo=i(j),n3=n(j,"LI",{});var uPe=s(n3);y_e=n(uPe,"STRONG",{});var D8t=s(y_e);DOo=r(D8t,"canine"),D8t.forEach(t),GOo=r(uPe," \u2014 "),FX=n(uPe,"A",{href:!0});var G8t=s(FX);OOo=r(G8t,"CanineForSequenceClassification"),G8t.forEach(t),VOo=r(uPe," (CANINE model)"),uPe.forEach(t),XOo=i(j),s3=n(j,"LI",{});var bPe=s(s3);x_e=n(bPe,"STRONG",{});var O8t=s(x_e);zOo=r(O8t,"convbert"),O8t.forEach(t),WOo=r(bPe," \u2014 "),TX=n(bPe,"A",{href:!0});var V8t=s(TX);QOo=r(V8t,"ConvBertForSequenceClassification"),V8t.forEach(t),HOo=r(bPe," (ConvBERT model)"),bPe.forEach(t),UOo=i(j),l3=n(j,"LI",{});var vPe=s(l3);$_e=n(vPe,"STRONG",{});var X8t=s($_e);JOo=r(X8t,"ctrl"),X8t.forEach(t),YOo=r(vPe," \u2014 "),MX=n(vPe,"A",{href:!0});var z8t=s(MX);KOo=r(z8t,"CTRLForSequenceClassification"),z8t.forEach(t),ZOo=r(vPe," (CTRL model)"),vPe.forEach(t),eVo=i(j),i3=n(j,"LI",{});var FPe=s(i3);k_e=n(FPe,"STRONG",{});var W8t=s(k_e);oVo=r(W8t,"data2vec-text"),W8t.forEach(t),rVo=r(FPe," \u2014 "),EX=n(FPe,"A",{href:!0});var Q8t=s(EX);tVo=r(Q8t,"Data2VecTextForSequenceClassification"),Q8t.forEach(t),aVo=r(FPe," (Data2VecText model)"),FPe.forEach(t),nVo=i(j),d3=n(j,"LI",{});var TPe=s(d3);S_e=n(TPe,"STRONG",{});var H8t=s(S_e);sVo=r(H8t,"deberta"),H8t.forEach(t),lVo=r(TPe," \u2014 "),CX=n(TPe,"A",{href:!0});var U8t=s(CX);iVo=r(U8t,"DebertaForSequenceClassification"),U8t.forEach(t),dVo=r(TPe," (DeBERTa model)"),TPe.forEach(t),cVo=i(j),c3=n(j,"LI",{});var MPe=s(c3);R_e=n(MPe,"STRONG",{});var J8t=s(R_e);fVo=r(J8t,"deberta-v2"),J8t.forEach(t),mVo=r(MPe," \u2014 "),wX=n(MPe,"A",{href:!0});var Y8t=s(wX);gVo=r(Y8t,"DebertaV2ForSequenceClassification"),Y8t.forEach(t),hVo=r(MPe," (DeBERTa-v2 model)"),MPe.forEach(t),pVo=i(j),f3=n(j,"LI",{});var EPe=s(f3);P_e=n(EPe,"STRONG",{});var K8t=s(P_e);_Vo=r(K8t,"distilbert"),K8t.forEach(t),uVo=r(EPe," \u2014 "),AX=n(EPe,"A",{href:!0});var Z8t=s(AX);bVo=r(Z8t,"DistilBertForSequenceClassification"),Z8t.forEach(t),vVo=r(EPe," (DistilBERT model)"),EPe.forEach(t),FVo=i(j),m3=n(j,"LI",{});var CPe=s(m3);B_e=n(CPe,"STRONG",{});var e9t=s(B_e);TVo=r(e9t,"electra"),e9t.forEach(t),MVo=r(CPe," \u2014 "),LX=n(CPe,"A",{href:!0});var o9t=s(LX);EVo=r(o9t,"ElectraForSequenceClassification"),o9t.forEach(t),CVo=r(CPe," (ELECTRA model)"),CPe.forEach(t),wVo=i(j),g3=n(j,"LI",{});var wPe=s(g3);I_e=n(wPe,"STRONG",{});var r9t=s(I_e);AVo=r(r9t,"flaubert"),r9t.forEach(t),LVo=r(wPe," \u2014 "),yX=n(wPe,"A",{href:!0});var t9t=s(yX);yVo=r(t9t,"FlaubertForSequenceClassification"),t9t.forEach(t),xVo=r(wPe," (FlauBERT model)"),wPe.forEach(t),$Vo=i(j),h3=n(j,"LI",{});var APe=s(h3);N_e=n(APe,"STRONG",{});var a9t=s(N_e);kVo=r(a9t,"fnet"),a9t.forEach(t),SVo=r(APe," \u2014 "),xX=n(APe,"A",{href:!0});var n9t=s(xX);RVo=r(n9t,"FNetForSequenceClassification"),n9t.forEach(t),PVo=r(APe," (FNet model)"),APe.forEach(t),BVo=i(j),p3=n(j,"LI",{});var LPe=s(p3);q_e=n(LPe,"STRONG",{});var s9t=s(q_e);IVo=r(s9t,"funnel"),s9t.forEach(t),NVo=r(LPe," \u2014 "),$X=n(LPe,"A",{href:!0});var l9t=s($X);qVo=r(l9t,"FunnelForSequenceClassification"),l9t.forEach(t),jVo=r(LPe," (Funnel Transformer model)"),LPe.forEach(t),DVo=i(j),_3=n(j,"LI",{});var yPe=s(_3);j_e=n(yPe,"STRONG",{});var i9t=s(j_e);GVo=r(i9t,"gpt2"),i9t.forEach(t),OVo=r(yPe," \u2014 "),kX=n(yPe,"A",{href:!0});var d9t=s(kX);VVo=r(d9t,"GPT2ForSequenceClassification"),d9t.forEach(t),XVo=r(yPe," (OpenAI GPT-2 model)"),yPe.forEach(t),zVo=i(j),u3=n(j,"LI",{});var xPe=s(u3);D_e=n(xPe,"STRONG",{});var c9t=s(D_e);WVo=r(c9t,"gpt_neo"),c9t.forEach(t),QVo=r(xPe," \u2014 "),SX=n(xPe,"A",{href:!0});var f9t=s(SX);HVo=r(f9t,"GPTNeoForSequenceClassification"),f9t.forEach(t),UVo=r(xPe," (GPT Neo model)"),xPe.forEach(t),JVo=i(j),b3=n(j,"LI",{});var $Pe=s(b3);G_e=n($Pe,"STRONG",{});var m9t=s(G_e);YVo=r(m9t,"gptj"),m9t.forEach(t),KVo=r($Pe," \u2014 "),RX=n($Pe,"A",{href:!0});var g9t=s(RX);ZVo=r(g9t,"GPTJForSequenceClassification"),g9t.forEach(t),eXo=r($Pe," (GPT-J model)"),$Pe.forEach(t),oXo=i(j),v3=n(j,"LI",{});var kPe=s(v3);O_e=n(kPe,"STRONG",{});var h9t=s(O_e);rXo=r(h9t,"ibert"),h9t.forEach(t),tXo=r(kPe," \u2014 "),PX=n(kPe,"A",{href:!0});var p9t=s(PX);aXo=r(p9t,"IBertForSequenceClassification"),p9t.forEach(t),nXo=r(kPe," (I-BERT model)"),kPe.forEach(t),sXo=i(j),F3=n(j,"LI",{});var SPe=s(F3);V_e=n(SPe,"STRONG",{});var _9t=s(V_e);lXo=r(_9t,"layoutlm"),_9t.forEach(t),iXo=r(SPe," \u2014 "),BX=n(SPe,"A",{href:!0});var u9t=s(BX);dXo=r(u9t,"LayoutLMForSequenceClassification"),u9t.forEach(t),cXo=r(SPe," (LayoutLM model)"),SPe.forEach(t),fXo=i(j),T3=n(j,"LI",{});var RPe=s(T3);X_e=n(RPe,"STRONG",{});var b9t=s(X_e);mXo=r(b9t,"layoutlmv2"),b9t.forEach(t),gXo=r(RPe," \u2014 "),IX=n(RPe,"A",{href:!0});var v9t=s(IX);hXo=r(v9t,"LayoutLMv2ForSequenceClassification"),v9t.forEach(t),pXo=r(RPe," (LayoutLMv2 model)"),RPe.forEach(t),_Xo=i(j),M3=n(j,"LI",{});var PPe=s(M3);z_e=n(PPe,"STRONG",{});var F9t=s(z_e);uXo=r(F9t,"layoutlmv3"),F9t.forEach(t),bXo=r(PPe," \u2014 "),NX=n(PPe,"A",{href:!0});var T9t=s(NX);vXo=r(T9t,"LayoutLMv3ForSequenceClassification"),T9t.forEach(t),FXo=r(PPe," (LayoutLMv3 model)"),PPe.forEach(t),TXo=i(j),E3=n(j,"LI",{});var BPe=s(E3);W_e=n(BPe,"STRONG",{});var M9t=s(W_e);MXo=r(M9t,"led"),M9t.forEach(t),EXo=r(BPe," \u2014 "),qX=n(BPe,"A",{href:!0});var E9t=s(qX);CXo=r(E9t,"LEDForSequenceClassification"),E9t.forEach(t),wXo=r(BPe," (LED model)"),BPe.forEach(t),AXo=i(j),C3=n(j,"LI",{});var IPe=s(C3);Q_e=n(IPe,"STRONG",{});var C9t=s(Q_e);LXo=r(C9t,"longformer"),C9t.forEach(t),yXo=r(IPe," \u2014 "),jX=n(IPe,"A",{href:!0});var w9t=s(jX);xXo=r(w9t,"LongformerForSequenceClassification"),w9t.forEach(t),$Xo=r(IPe," (Longformer model)"),IPe.forEach(t),kXo=i(j),w3=n(j,"LI",{});var NPe=s(w3);H_e=n(NPe,"STRONG",{});var A9t=s(H_e);SXo=r(A9t,"mbart"),A9t.forEach(t),RXo=r(NPe," \u2014 "),DX=n(NPe,"A",{href:!0});var L9t=s(DX);PXo=r(L9t,"MBartForSequenceClassification"),L9t.forEach(t),BXo=r(NPe," (mBART model)"),NPe.forEach(t),IXo=i(j),A3=n(j,"LI",{});var qPe=s(A3);U_e=n(qPe,"STRONG",{});var y9t=s(U_e);NXo=r(y9t,"megatron-bert"),y9t.forEach(t),qXo=r(qPe," \u2014 "),GX=n(qPe,"A",{href:!0});var x9t=s(GX);jXo=r(x9t,"MegatronBertForSequenceClassification"),x9t.forEach(t),DXo=r(qPe," (Megatron-BERT model)"),qPe.forEach(t),GXo=i(j),L3=n(j,"LI",{});var jPe=s(L3);J_e=n(jPe,"STRONG",{});var $9t=s(J_e);OXo=r($9t,"mobilebert"),$9t.forEach(t),VXo=r(jPe," \u2014 "),OX=n(jPe,"A",{href:!0});var k9t=s(OX);XXo=r(k9t,"MobileBertForSequenceClassification"),k9t.forEach(t),zXo=r(jPe," (MobileBERT model)"),jPe.forEach(t),WXo=i(j),y3=n(j,"LI",{});var DPe=s(y3);Y_e=n(DPe,"STRONG",{});var S9t=s(Y_e);QXo=r(S9t,"mpnet"),S9t.forEach(t),HXo=r(DPe," \u2014 "),VX=n(DPe,"A",{href:!0});var R9t=s(VX);UXo=r(R9t,"MPNetForSequenceClassification"),R9t.forEach(t),JXo=r(DPe," (MPNet model)"),DPe.forEach(t),YXo=i(j),x3=n(j,"LI",{});var GPe=s(x3);K_e=n(GPe,"STRONG",{});var P9t=s(K_e);KXo=r(P9t,"mvp"),P9t.forEach(t),ZXo=r(GPe," \u2014 "),XX=n(GPe,"A",{href:!0});var B9t=s(XX);ezo=r(B9t,"MvpForSequenceClassification"),B9t.forEach(t),ozo=r(GPe," (MVP model)"),GPe.forEach(t),rzo=i(j),$3=n(j,"LI",{});var OPe=s($3);Z_e=n(OPe,"STRONG",{});var I9t=s(Z_e);tzo=r(I9t,"nezha"),I9t.forEach(t),azo=r(OPe," \u2014 "),zX=n(OPe,"A",{href:!0});var N9t=s(zX);nzo=r(N9t,"NezhaForSequenceClassification"),N9t.forEach(t),szo=r(OPe," (Nezha model)"),OPe.forEach(t),lzo=i(j),k3=n(j,"LI",{});var VPe=s(k3);eue=n(VPe,"STRONG",{});var q9t=s(eue);izo=r(q9t,"nystromformer"),q9t.forEach(t),dzo=r(VPe," \u2014 "),WX=n(VPe,"A",{href:!0});var j9t=s(WX);czo=r(j9t,"NystromformerForSequenceClassification"),j9t.forEach(t),fzo=r(VPe," (Nystr\xF6mformer model)"),VPe.forEach(t),mzo=i(j),S3=n(j,"LI",{});var XPe=s(S3);oue=n(XPe,"STRONG",{});var D9t=s(oue);gzo=r(D9t,"openai-gpt"),D9t.forEach(t),hzo=r(XPe," \u2014 "),QX=n(XPe,"A",{href:!0});var G9t=s(QX);pzo=r(G9t,"OpenAIGPTForSequenceClassification"),G9t.forEach(t),_zo=r(XPe," (OpenAI GPT model)"),XPe.forEach(t),uzo=i(j),R3=n(j,"LI",{});var zPe=s(R3);rue=n(zPe,"STRONG",{});var O9t=s(rue);bzo=r(O9t,"perceiver"),O9t.forEach(t),vzo=r(zPe," \u2014 "),HX=n(zPe,"A",{href:!0});var V9t=s(HX);Fzo=r(V9t,"PerceiverForSequenceClassification"),V9t.forEach(t),Tzo=r(zPe," (Perceiver model)"),zPe.forEach(t),Mzo=i(j),P3=n(j,"LI",{});var WPe=s(P3);tue=n(WPe,"STRONG",{});var X9t=s(tue);Ezo=r(X9t,"plbart"),X9t.forEach(t),Czo=r(WPe," \u2014 "),UX=n(WPe,"A",{href:!0});var z9t=s(UX);wzo=r(z9t,"PLBartForSequenceClassification"),z9t.forEach(t),Azo=r(WPe," (PLBart model)"),WPe.forEach(t),Lzo=i(j),B3=n(j,"LI",{});var QPe=s(B3);aue=n(QPe,"STRONG",{});var W9t=s(aue);yzo=r(W9t,"qdqbert"),W9t.forEach(t),xzo=r(QPe," \u2014 "),JX=n(QPe,"A",{href:!0});var Q9t=s(JX);$zo=r(Q9t,"QDQBertForSequenceClassification"),Q9t.forEach(t),kzo=r(QPe," (QDQBert model)"),QPe.forEach(t),Szo=i(j),I3=n(j,"LI",{});var HPe=s(I3);nue=n(HPe,"STRONG",{});var H9t=s(nue);Rzo=r(H9t,"reformer"),H9t.forEach(t),Pzo=r(HPe," \u2014 "),YX=n(HPe,"A",{href:!0});var U9t=s(YX);Bzo=r(U9t,"ReformerForSequenceClassification"),U9t.forEach(t),Izo=r(HPe," (Reformer model)"),HPe.forEach(t),Nzo=i(j),N3=n(j,"LI",{});var UPe=s(N3);sue=n(UPe,"STRONG",{});var J9t=s(sue);qzo=r(J9t,"rembert"),J9t.forEach(t),jzo=r(UPe," \u2014 "),KX=n(UPe,"A",{href:!0});var Y9t=s(KX);Dzo=r(Y9t,"RemBertForSequenceClassification"),Y9t.forEach(t),Gzo=r(UPe," (RemBERT model)"),UPe.forEach(t),Ozo=i(j),q3=n(j,"LI",{});var JPe=s(q3);lue=n(JPe,"STRONG",{});var K9t=s(lue);Vzo=r(K9t,"roberta"),K9t.forEach(t),Xzo=r(JPe," \u2014 "),ZX=n(JPe,"A",{href:!0});var Z9t=s(ZX);zzo=r(Z9t,"RobertaForSequenceClassification"),Z9t.forEach(t),Wzo=r(JPe," (RoBERTa model)"),JPe.forEach(t),Qzo=i(j),j3=n(j,"LI",{});var YPe=s(j3);iue=n(YPe,"STRONG",{});var eMt=s(iue);Hzo=r(eMt,"roformer"),eMt.forEach(t),Uzo=r(YPe," \u2014 "),ez=n(YPe,"A",{href:!0});var oMt=s(ez);Jzo=r(oMt,"RoFormerForSequenceClassification"),oMt.forEach(t),Yzo=r(YPe," (RoFormer model)"),YPe.forEach(t),Kzo=i(j),D3=n(j,"LI",{});var KPe=s(D3);due=n(KPe,"STRONG",{});var rMt=s(due);Zzo=r(rMt,"squeezebert"),rMt.forEach(t),eWo=r(KPe," \u2014 "),oz=n(KPe,"A",{href:!0});var tMt=s(oz);oWo=r(tMt,"SqueezeBertForSequenceClassification"),tMt.forEach(t),rWo=r(KPe," (SqueezeBERT model)"),KPe.forEach(t),tWo=i(j),G3=n(j,"LI",{});var ZPe=s(G3);cue=n(ZPe,"STRONG",{});var aMt=s(cue);aWo=r(aMt,"tapas"),aMt.forEach(t),nWo=r(ZPe," \u2014 "),rz=n(ZPe,"A",{href:!0});var nMt=s(rz);sWo=r(nMt,"TapasForSequenceClassification"),nMt.forEach(t),lWo=r(ZPe," (TAPAS model)"),ZPe.forEach(t),iWo=i(j),O3=n(j,"LI",{});var eBe=s(O3);fue=n(eBe,"STRONG",{});var sMt=s(fue);dWo=r(sMt,"transfo-xl"),sMt.forEach(t),cWo=r(eBe," \u2014 "),tz=n(eBe,"A",{href:!0});var lMt=s(tz);fWo=r(lMt,"TransfoXLForSequenceClassification"),lMt.forEach(t),mWo=r(eBe," (Transformer-XL model)"),eBe.forEach(t),gWo=i(j),V3=n(j,"LI",{});var oBe=s(V3);mue=n(oBe,"STRONG",{});var iMt=s(mue);hWo=r(iMt,"xlm"),iMt.forEach(t),pWo=r(oBe," \u2014 "),az=n(oBe,"A",{href:!0});var dMt=s(az);_Wo=r(dMt,"XLMForSequenceClassification"),dMt.forEach(t),uWo=r(oBe," (XLM model)"),oBe.forEach(t),bWo=i(j),X3=n(j,"LI",{});var rBe=s(X3);gue=n(rBe,"STRONG",{});var cMt=s(gue);vWo=r(cMt,"xlm-roberta"),cMt.forEach(t),FWo=r(rBe," \u2014 "),nz=n(rBe,"A",{href:!0});var fMt=s(nz);TWo=r(fMt,"XLMRobertaForSequenceClassification"),fMt.forEach(t),MWo=r(rBe," (XLM-RoBERTa model)"),rBe.forEach(t),EWo=i(j),z3=n(j,"LI",{});var tBe=s(z3);hue=n(tBe,"STRONG",{});var mMt=s(hue);CWo=r(mMt,"xlm-roberta-xl"),mMt.forEach(t),wWo=r(tBe," \u2014 "),sz=n(tBe,"A",{href:!0});var gMt=s(sz);AWo=r(gMt,"XLMRobertaXLForSequenceClassification"),gMt.forEach(t),LWo=r(tBe," (XLM-RoBERTa-XL model)"),tBe.forEach(t),yWo=i(j),W3=n(j,"LI",{});var aBe=s(W3);pue=n(aBe,"STRONG",{});var hMt=s(pue);xWo=r(hMt,"xlnet"),hMt.forEach(t),$Wo=r(aBe," \u2014 "),lz=n(aBe,"A",{href:!0});var pMt=s(lz);kWo=r(pMt,"XLNetForSequenceClassification"),pMt.forEach(t),SWo=r(aBe," (XLNet model)"),aBe.forEach(t),RWo=i(j),Q3=n(j,"LI",{});var nBe=s(Q3);_ue=n(nBe,"STRONG",{});var _Mt=s(_ue);PWo=r(_Mt,"yoso"),_Mt.forEach(t),BWo=r(nBe," \u2014 "),iz=n(nBe,"A",{href:!0});var uMt=s(iz);IWo=r(uMt,"YosoForSequenceClassification"),uMt.forEach(t),NWo=r(nBe," (YOSO model)"),nBe.forEach(t),j.forEach(t),qWo=i(ma),H3=n(ma,"P",{});var sBe=s(H3);jWo=r(sBe,"The model is set in evaluation mode by default using "),uue=n(sBe,"CODE",{});var bMt=s(uue);DWo=r(bMt,"model.eval()"),bMt.forEach(t),GWo=r(sBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bue=n(sBe,"CODE",{});var vMt=s(bue);OWo=r(vMt,"model.train()"),vMt.forEach(t),sBe.forEach(t),VWo=i(ma),T(U3.$$.fragment,ma),ma.forEach(t),dl.forEach(t),rze=i(f),ld=n(f,"H2",{class:!0});var iQe=s(ld);J3=n(iQe,"A",{id:!0,class:!0,href:!0});var FMt=s(J3);vue=n(FMt,"SPAN",{});var TMt=s(vue);T(hL.$$.fragment,TMt),TMt.forEach(t),FMt.forEach(t),XWo=i(iQe),Fue=n(iQe,"SPAN",{});var MMt=s(Fue);zWo=r(MMt,"AutoModelForMultipleChoice"),MMt.forEach(t),iQe.forEach(t),tze=i(f),Io=n(f,"DIV",{class:!0});var cl=s(Io);T(pL.$$.fragment,cl),WWo=i(cl),id=n(cl,"P",{});var dte=s(id);QWo=r(dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),dz=n(dte,"A",{href:!0});var EMt=s(dz);HWo=r(EMt,"from_pretrained()"),EMt.forEach(t),UWo=r(dte," class method or the "),cz=n(dte,"A",{href:!0});var CMt=s(cz);JWo=r(CMt,"from_config()"),CMt.forEach(t),YWo=r(dte,` class
method.`),dte.forEach(t),KWo=i(cl),_L=n(cl,"P",{});var dQe=s(_L);ZWo=r(dQe,"This class cannot be instantiated directly using "),Tue=n(dQe,"CODE",{});var wMt=s(Tue);eQo=r(wMt,"__init__()"),wMt.forEach(t),oQo=r(dQe," (throws an error)."),dQe.forEach(t),rQo=i(cl),ht=n(cl,"DIV",{class:!0});var yw=s(ht);T(uL.$$.fragment,yw),tQo=i(yw),Mue=n(yw,"P",{});var AMt=s(Mue);aQo=r(AMt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),AMt.forEach(t),nQo=i(yw),dd=n(yw,"P",{});var cte=s(dd);sQo=r(cte,`Note:
Loading a model from its configuration file does `),Eue=n(cte,"STRONG",{});var LMt=s(Eue);lQo=r(LMt,"not"),LMt.forEach(t),iQo=r(cte,` load the model weights. It only affects the
model\u2019s configuration. Use `),fz=n(cte,"A",{href:!0});var yMt=s(fz);dQo=r(yMt,"from_pretrained()"),yMt.forEach(t),cQo=r(cte," to load the model weights."),cte.forEach(t),fQo=i(yw),T(Y3.$$.fragment,yw),yw.forEach(t),mQo=i(cl),to=n(cl,"DIV",{class:!0});var ga=s(to);T(bL.$$.fragment,ga),gQo=i(ga),Cue=n(ga,"P",{});var xMt=s(Cue);hQo=r(xMt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xMt.forEach(t),pQo=i(ga),Oa=n(ga,"P",{});var xw=s(Oa);_Qo=r(xw,"The model class to instantiate is selected based on the "),wue=n(xw,"CODE",{});var $Mt=s(wue);uQo=r($Mt,"model_type"),$Mt.forEach(t),bQo=r(xw,` property of the config object (either
passed as an argument or loaded from `),Aue=n(xw,"CODE",{});var kMt=s(Aue);vQo=r(kMt,"pretrained_model_name_or_path"),kMt.forEach(t),FQo=r(xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lue=n(xw,"CODE",{});var SMt=s(Lue);TQo=r(SMt,"pretrained_model_name_or_path"),SMt.forEach(t),MQo=r(xw,":"),xw.forEach(t),EQo=i(ga),Z=n(ga,"UL",{});var ee=s(Z);K3=n(ee,"LI",{});var lBe=s(K3);yue=n(lBe,"STRONG",{});var RMt=s(yue);CQo=r(RMt,"albert"),RMt.forEach(t),wQo=r(lBe," \u2014 "),mz=n(lBe,"A",{href:!0});var PMt=s(mz);AQo=r(PMt,"AlbertForMultipleChoice"),PMt.forEach(t),LQo=r(lBe," (ALBERT model)"),lBe.forEach(t),yQo=i(ee),Z3=n(ee,"LI",{});var iBe=s(Z3);xue=n(iBe,"STRONG",{});var BMt=s(xue);xQo=r(BMt,"bert"),BMt.forEach(t),$Qo=r(iBe," \u2014 "),gz=n(iBe,"A",{href:!0});var IMt=s(gz);kQo=r(IMt,"BertForMultipleChoice"),IMt.forEach(t),SQo=r(iBe," (BERT model)"),iBe.forEach(t),RQo=i(ee),ev=n(ee,"LI",{});var dBe=s(ev);$ue=n(dBe,"STRONG",{});var NMt=s($ue);PQo=r(NMt,"big_bird"),NMt.forEach(t),BQo=r(dBe," \u2014 "),hz=n(dBe,"A",{href:!0});var qMt=s(hz);IQo=r(qMt,"BigBirdForMultipleChoice"),qMt.forEach(t),NQo=r(dBe," (BigBird model)"),dBe.forEach(t),qQo=i(ee),ov=n(ee,"LI",{});var cBe=s(ov);kue=n(cBe,"STRONG",{});var jMt=s(kue);jQo=r(jMt,"camembert"),jMt.forEach(t),DQo=r(cBe," \u2014 "),pz=n(cBe,"A",{href:!0});var DMt=s(pz);GQo=r(DMt,"CamembertForMultipleChoice"),DMt.forEach(t),OQo=r(cBe," (CamemBERT model)"),cBe.forEach(t),VQo=i(ee),rv=n(ee,"LI",{});var fBe=s(rv);Sue=n(fBe,"STRONG",{});var GMt=s(Sue);XQo=r(GMt,"canine"),GMt.forEach(t),zQo=r(fBe," \u2014 "),_z=n(fBe,"A",{href:!0});var OMt=s(_z);WQo=r(OMt,"CanineForMultipleChoice"),OMt.forEach(t),QQo=r(fBe," (CANINE model)"),fBe.forEach(t),HQo=i(ee),tv=n(ee,"LI",{});var mBe=s(tv);Rue=n(mBe,"STRONG",{});var VMt=s(Rue);UQo=r(VMt,"convbert"),VMt.forEach(t),JQo=r(mBe," \u2014 "),uz=n(mBe,"A",{href:!0});var XMt=s(uz);YQo=r(XMt,"ConvBertForMultipleChoice"),XMt.forEach(t),KQo=r(mBe," (ConvBERT model)"),mBe.forEach(t),ZQo=i(ee),av=n(ee,"LI",{});var gBe=s(av);Pue=n(gBe,"STRONG",{});var zMt=s(Pue);eHo=r(zMt,"data2vec-text"),zMt.forEach(t),oHo=r(gBe," \u2014 "),bz=n(gBe,"A",{href:!0});var WMt=s(bz);rHo=r(WMt,"Data2VecTextForMultipleChoice"),WMt.forEach(t),tHo=r(gBe," (Data2VecText model)"),gBe.forEach(t),aHo=i(ee),nv=n(ee,"LI",{});var hBe=s(nv);Bue=n(hBe,"STRONG",{});var QMt=s(Bue);nHo=r(QMt,"deberta-v2"),QMt.forEach(t),sHo=r(hBe," \u2014 "),vz=n(hBe,"A",{href:!0});var HMt=s(vz);lHo=r(HMt,"DebertaV2ForMultipleChoice"),HMt.forEach(t),iHo=r(hBe," (DeBERTa-v2 model)"),hBe.forEach(t),dHo=i(ee),sv=n(ee,"LI",{});var pBe=s(sv);Iue=n(pBe,"STRONG",{});var UMt=s(Iue);cHo=r(UMt,"distilbert"),UMt.forEach(t),fHo=r(pBe," \u2014 "),Fz=n(pBe,"A",{href:!0});var JMt=s(Fz);mHo=r(JMt,"DistilBertForMultipleChoice"),JMt.forEach(t),gHo=r(pBe," (DistilBERT model)"),pBe.forEach(t),hHo=i(ee),lv=n(ee,"LI",{});var _Be=s(lv);Nue=n(_Be,"STRONG",{});var YMt=s(Nue);pHo=r(YMt,"electra"),YMt.forEach(t),_Ho=r(_Be," \u2014 "),Tz=n(_Be,"A",{href:!0});var KMt=s(Tz);uHo=r(KMt,"ElectraForMultipleChoice"),KMt.forEach(t),bHo=r(_Be," (ELECTRA model)"),_Be.forEach(t),vHo=i(ee),iv=n(ee,"LI",{});var uBe=s(iv);que=n(uBe,"STRONG",{});var ZMt=s(que);FHo=r(ZMt,"flaubert"),ZMt.forEach(t),THo=r(uBe," \u2014 "),Mz=n(uBe,"A",{href:!0});var e4t=s(Mz);MHo=r(e4t,"FlaubertForMultipleChoice"),e4t.forEach(t),EHo=r(uBe," (FlauBERT model)"),uBe.forEach(t),CHo=i(ee),dv=n(ee,"LI",{});var bBe=s(dv);jue=n(bBe,"STRONG",{});var o4t=s(jue);wHo=r(o4t,"fnet"),o4t.forEach(t),AHo=r(bBe," \u2014 "),Ez=n(bBe,"A",{href:!0});var r4t=s(Ez);LHo=r(r4t,"FNetForMultipleChoice"),r4t.forEach(t),yHo=r(bBe," (FNet model)"),bBe.forEach(t),xHo=i(ee),cv=n(ee,"LI",{});var vBe=s(cv);Due=n(vBe,"STRONG",{});var t4t=s(Due);$Ho=r(t4t,"funnel"),t4t.forEach(t),kHo=r(vBe," \u2014 "),Cz=n(vBe,"A",{href:!0});var a4t=s(Cz);SHo=r(a4t,"FunnelForMultipleChoice"),a4t.forEach(t),RHo=r(vBe," (Funnel Transformer model)"),vBe.forEach(t),PHo=i(ee),fv=n(ee,"LI",{});var FBe=s(fv);Gue=n(FBe,"STRONG",{});var n4t=s(Gue);BHo=r(n4t,"ibert"),n4t.forEach(t),IHo=r(FBe," \u2014 "),wz=n(FBe,"A",{href:!0});var s4t=s(wz);NHo=r(s4t,"IBertForMultipleChoice"),s4t.forEach(t),qHo=r(FBe," (I-BERT model)"),FBe.forEach(t),jHo=i(ee),mv=n(ee,"LI",{});var TBe=s(mv);Oue=n(TBe,"STRONG",{});var l4t=s(Oue);DHo=r(l4t,"longformer"),l4t.forEach(t),GHo=r(TBe," \u2014 "),Az=n(TBe,"A",{href:!0});var i4t=s(Az);OHo=r(i4t,"LongformerForMultipleChoice"),i4t.forEach(t),VHo=r(TBe," (Longformer model)"),TBe.forEach(t),XHo=i(ee),gv=n(ee,"LI",{});var MBe=s(gv);Vue=n(MBe,"STRONG",{});var d4t=s(Vue);zHo=r(d4t,"megatron-bert"),d4t.forEach(t),WHo=r(MBe," \u2014 "),Lz=n(MBe,"A",{href:!0});var c4t=s(Lz);QHo=r(c4t,"MegatronBertForMultipleChoice"),c4t.forEach(t),HHo=r(MBe," (Megatron-BERT model)"),MBe.forEach(t),UHo=i(ee),hv=n(ee,"LI",{});var EBe=s(hv);Xue=n(EBe,"STRONG",{});var f4t=s(Xue);JHo=r(f4t,"mobilebert"),f4t.forEach(t),YHo=r(EBe," \u2014 "),yz=n(EBe,"A",{href:!0});var m4t=s(yz);KHo=r(m4t,"MobileBertForMultipleChoice"),m4t.forEach(t),ZHo=r(EBe," (MobileBERT model)"),EBe.forEach(t),eUo=i(ee),pv=n(ee,"LI",{});var CBe=s(pv);zue=n(CBe,"STRONG",{});var g4t=s(zue);oUo=r(g4t,"mpnet"),g4t.forEach(t),rUo=r(CBe," \u2014 "),xz=n(CBe,"A",{href:!0});var h4t=s(xz);tUo=r(h4t,"MPNetForMultipleChoice"),h4t.forEach(t),aUo=r(CBe," (MPNet model)"),CBe.forEach(t),nUo=i(ee),_v=n(ee,"LI",{});var wBe=s(_v);Wue=n(wBe,"STRONG",{});var p4t=s(Wue);sUo=r(p4t,"nezha"),p4t.forEach(t),lUo=r(wBe," \u2014 "),$z=n(wBe,"A",{href:!0});var _4t=s($z);iUo=r(_4t,"NezhaForMultipleChoice"),_4t.forEach(t),dUo=r(wBe," (Nezha model)"),wBe.forEach(t),cUo=i(ee),uv=n(ee,"LI",{});var ABe=s(uv);Que=n(ABe,"STRONG",{});var u4t=s(Que);fUo=r(u4t,"nystromformer"),u4t.forEach(t),mUo=r(ABe," \u2014 "),kz=n(ABe,"A",{href:!0});var b4t=s(kz);gUo=r(b4t,"NystromformerForMultipleChoice"),b4t.forEach(t),hUo=r(ABe," (Nystr\xF6mformer model)"),ABe.forEach(t),pUo=i(ee),bv=n(ee,"LI",{});var LBe=s(bv);Hue=n(LBe,"STRONG",{});var v4t=s(Hue);_Uo=r(v4t,"qdqbert"),v4t.forEach(t),uUo=r(LBe," \u2014 "),Sz=n(LBe,"A",{href:!0});var F4t=s(Sz);bUo=r(F4t,"QDQBertForMultipleChoice"),F4t.forEach(t),vUo=r(LBe," (QDQBert model)"),LBe.forEach(t),FUo=i(ee),vv=n(ee,"LI",{});var yBe=s(vv);Uue=n(yBe,"STRONG",{});var T4t=s(Uue);TUo=r(T4t,"rembert"),T4t.forEach(t),MUo=r(yBe," \u2014 "),Rz=n(yBe,"A",{href:!0});var M4t=s(Rz);EUo=r(M4t,"RemBertForMultipleChoice"),M4t.forEach(t),CUo=r(yBe," (RemBERT model)"),yBe.forEach(t),wUo=i(ee),Fv=n(ee,"LI",{});var xBe=s(Fv);Jue=n(xBe,"STRONG",{});var E4t=s(Jue);AUo=r(E4t,"roberta"),E4t.forEach(t),LUo=r(xBe," \u2014 "),Pz=n(xBe,"A",{href:!0});var C4t=s(Pz);yUo=r(C4t,"RobertaForMultipleChoice"),C4t.forEach(t),xUo=r(xBe," (RoBERTa model)"),xBe.forEach(t),$Uo=i(ee),Tv=n(ee,"LI",{});var $Be=s(Tv);Yue=n($Be,"STRONG",{});var w4t=s(Yue);kUo=r(w4t,"roformer"),w4t.forEach(t),SUo=r($Be," \u2014 "),Bz=n($Be,"A",{href:!0});var A4t=s(Bz);RUo=r(A4t,"RoFormerForMultipleChoice"),A4t.forEach(t),PUo=r($Be," (RoFormer model)"),$Be.forEach(t),BUo=i(ee),Mv=n(ee,"LI",{});var kBe=s(Mv);Kue=n(kBe,"STRONG",{});var L4t=s(Kue);IUo=r(L4t,"squeezebert"),L4t.forEach(t),NUo=r(kBe," \u2014 "),Iz=n(kBe,"A",{href:!0});var y4t=s(Iz);qUo=r(y4t,"SqueezeBertForMultipleChoice"),y4t.forEach(t),jUo=r(kBe," (SqueezeBERT model)"),kBe.forEach(t),DUo=i(ee),Ev=n(ee,"LI",{});var SBe=s(Ev);Zue=n(SBe,"STRONG",{});var x4t=s(Zue);GUo=r(x4t,"xlm"),x4t.forEach(t),OUo=r(SBe," \u2014 "),Nz=n(SBe,"A",{href:!0});var $4t=s(Nz);VUo=r($4t,"XLMForMultipleChoice"),$4t.forEach(t),XUo=r(SBe," (XLM model)"),SBe.forEach(t),zUo=i(ee),Cv=n(ee,"LI",{});var RBe=s(Cv);e1e=n(RBe,"STRONG",{});var k4t=s(e1e);WUo=r(k4t,"xlm-roberta"),k4t.forEach(t),QUo=r(RBe," \u2014 "),qz=n(RBe,"A",{href:!0});var S4t=s(qz);HUo=r(S4t,"XLMRobertaForMultipleChoice"),S4t.forEach(t),UUo=r(RBe," (XLM-RoBERTa model)"),RBe.forEach(t),JUo=i(ee),wv=n(ee,"LI",{});var PBe=s(wv);o1e=n(PBe,"STRONG",{});var R4t=s(o1e);YUo=r(R4t,"xlm-roberta-xl"),R4t.forEach(t),KUo=r(PBe," \u2014 "),jz=n(PBe,"A",{href:!0});var P4t=s(jz);ZUo=r(P4t,"XLMRobertaXLForMultipleChoice"),P4t.forEach(t),eJo=r(PBe," (XLM-RoBERTa-XL model)"),PBe.forEach(t),oJo=i(ee),Av=n(ee,"LI",{});var BBe=s(Av);r1e=n(BBe,"STRONG",{});var B4t=s(r1e);rJo=r(B4t,"xlnet"),B4t.forEach(t),tJo=r(BBe," \u2014 "),Dz=n(BBe,"A",{href:!0});var I4t=s(Dz);aJo=r(I4t,"XLNetForMultipleChoice"),I4t.forEach(t),nJo=r(BBe," (XLNet model)"),BBe.forEach(t),sJo=i(ee),Lv=n(ee,"LI",{});var IBe=s(Lv);t1e=n(IBe,"STRONG",{});var N4t=s(t1e);lJo=r(N4t,"yoso"),N4t.forEach(t),iJo=r(IBe," \u2014 "),Gz=n(IBe,"A",{href:!0});var q4t=s(Gz);dJo=r(q4t,"YosoForMultipleChoice"),q4t.forEach(t),cJo=r(IBe," (YOSO model)"),IBe.forEach(t),ee.forEach(t),fJo=i(ga),yv=n(ga,"P",{});var NBe=s(yv);mJo=r(NBe,"The model is set in evaluation mode by default using "),a1e=n(NBe,"CODE",{});var j4t=s(a1e);gJo=r(j4t,"model.eval()"),j4t.forEach(t),hJo=r(NBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n1e=n(NBe,"CODE",{});var D4t=s(n1e);pJo=r(D4t,"model.train()"),D4t.forEach(t),NBe.forEach(t),_Jo=i(ga),T(xv.$$.fragment,ga),ga.forEach(t),cl.forEach(t),aze=i(f),cd=n(f,"H2",{class:!0});var cQe=s(cd);$v=n(cQe,"A",{id:!0,class:!0,href:!0});var G4t=s($v);s1e=n(G4t,"SPAN",{});var O4t=s(s1e);T(vL.$$.fragment,O4t),O4t.forEach(t),G4t.forEach(t),uJo=i(cQe),l1e=n(cQe,"SPAN",{});var V4t=s(l1e);bJo=r(V4t,"AutoModelForNextSentencePrediction"),V4t.forEach(t),cQe.forEach(t),nze=i(f),No=n(f,"DIV",{class:!0});var fl=s(No);T(FL.$$.fragment,fl),vJo=i(fl),fd=n(fl,"P",{});var fte=s(fd);FJo=r(fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Oz=n(fte,"A",{href:!0});var X4t=s(Oz);TJo=r(X4t,"from_pretrained()"),X4t.forEach(t),MJo=r(fte," class method or the "),Vz=n(fte,"A",{href:!0});var z4t=s(Vz);EJo=r(z4t,"from_config()"),z4t.forEach(t),CJo=r(fte,` class
method.`),fte.forEach(t),wJo=i(fl),TL=n(fl,"P",{});var fQe=s(TL);AJo=r(fQe,"This class cannot be instantiated directly using "),i1e=n(fQe,"CODE",{});var W4t=s(i1e);LJo=r(W4t,"__init__()"),W4t.forEach(t),yJo=r(fQe," (throws an error)."),fQe.forEach(t),xJo=i(fl),pt=n(fl,"DIV",{class:!0});var $w=s(pt);T(ML.$$.fragment,$w),$Jo=i($w),d1e=n($w,"P",{});var Q4t=s(d1e);kJo=r(Q4t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Q4t.forEach(t),SJo=i($w),md=n($w,"P",{});var mte=s(md);RJo=r(mte,`Note:
Loading a model from its configuration file does `),c1e=n(mte,"STRONG",{});var H4t=s(c1e);PJo=r(H4t,"not"),H4t.forEach(t),BJo=r(mte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xz=n(mte,"A",{href:!0});var U4t=s(Xz);IJo=r(U4t,"from_pretrained()"),U4t.forEach(t),NJo=r(mte," to load the model weights."),mte.forEach(t),qJo=i($w),T(kv.$$.fragment,$w),$w.forEach(t),jJo=i(fl),ao=n(fl,"DIV",{class:!0});var ha=s(ao);T(EL.$$.fragment,ha),DJo=i(ha),f1e=n(ha,"P",{});var J4t=s(f1e);GJo=r(J4t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),J4t.forEach(t),OJo=i(ha),Va=n(ha,"P",{});var kw=s(Va);VJo=r(kw,"The model class to instantiate is selected based on the "),m1e=n(kw,"CODE",{});var Y4t=s(m1e);XJo=r(Y4t,"model_type"),Y4t.forEach(t),zJo=r(kw,` property of the config object (either
passed as an argument or loaded from `),g1e=n(kw,"CODE",{});var K4t=s(g1e);WJo=r(K4t,"pretrained_model_name_or_path"),K4t.forEach(t),QJo=r(kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h1e=n(kw,"CODE",{});var Z4t=s(h1e);HJo=r(Z4t,"pretrained_model_name_or_path"),Z4t.forEach(t),UJo=r(kw,":"),kw.forEach(t),JJo=i(ha),qo=n(ha,"UL",{});var pa=s(qo);Sv=n(pa,"LI",{});var qBe=s(Sv);p1e=n(qBe,"STRONG",{});var eEt=s(p1e);YJo=r(eEt,"bert"),eEt.forEach(t),KJo=r(qBe," \u2014 "),zz=n(qBe,"A",{href:!0});var oEt=s(zz);ZJo=r(oEt,"BertForNextSentencePrediction"),oEt.forEach(t),eYo=r(qBe," (BERT model)"),qBe.forEach(t),oYo=i(pa),Rv=n(pa,"LI",{});var jBe=s(Rv);_1e=n(jBe,"STRONG",{});var rEt=s(_1e);rYo=r(rEt,"fnet"),rEt.forEach(t),tYo=r(jBe," \u2014 "),Wz=n(jBe,"A",{href:!0});var tEt=s(Wz);aYo=r(tEt,"FNetForNextSentencePrediction"),tEt.forEach(t),nYo=r(jBe," (FNet model)"),jBe.forEach(t),sYo=i(pa),Pv=n(pa,"LI",{});var DBe=s(Pv);u1e=n(DBe,"STRONG",{});var aEt=s(u1e);lYo=r(aEt,"megatron-bert"),aEt.forEach(t),iYo=r(DBe," \u2014 "),Qz=n(DBe,"A",{href:!0});var nEt=s(Qz);dYo=r(nEt,"MegatronBertForNextSentencePrediction"),nEt.forEach(t),cYo=r(DBe," (Megatron-BERT model)"),DBe.forEach(t),fYo=i(pa),Bv=n(pa,"LI",{});var GBe=s(Bv);b1e=n(GBe,"STRONG",{});var sEt=s(b1e);mYo=r(sEt,"mobilebert"),sEt.forEach(t),gYo=r(GBe," \u2014 "),Hz=n(GBe,"A",{href:!0});var lEt=s(Hz);hYo=r(lEt,"MobileBertForNextSentencePrediction"),lEt.forEach(t),pYo=r(GBe," (MobileBERT model)"),GBe.forEach(t),_Yo=i(pa),Iv=n(pa,"LI",{});var OBe=s(Iv);v1e=n(OBe,"STRONG",{});var iEt=s(v1e);uYo=r(iEt,"nezha"),iEt.forEach(t),bYo=r(OBe," \u2014 "),Uz=n(OBe,"A",{href:!0});var dEt=s(Uz);vYo=r(dEt,"NezhaForNextSentencePrediction"),dEt.forEach(t),FYo=r(OBe," (Nezha model)"),OBe.forEach(t),TYo=i(pa),Nv=n(pa,"LI",{});var VBe=s(Nv);F1e=n(VBe,"STRONG",{});var cEt=s(F1e);MYo=r(cEt,"qdqbert"),cEt.forEach(t),EYo=r(VBe," \u2014 "),Jz=n(VBe,"A",{href:!0});var fEt=s(Jz);CYo=r(fEt,"QDQBertForNextSentencePrediction"),fEt.forEach(t),wYo=r(VBe," (QDQBert model)"),VBe.forEach(t),pa.forEach(t),AYo=i(ha),qv=n(ha,"P",{});var XBe=s(qv);LYo=r(XBe,"The model is set in evaluation mode by default using "),T1e=n(XBe,"CODE",{});var mEt=s(T1e);yYo=r(mEt,"model.eval()"),mEt.forEach(t),xYo=r(XBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M1e=n(XBe,"CODE",{});var gEt=s(M1e);$Yo=r(gEt,"model.train()"),gEt.forEach(t),XBe.forEach(t),kYo=i(ha),T(jv.$$.fragment,ha),ha.forEach(t),fl.forEach(t),sze=i(f),gd=n(f,"H2",{class:!0});var mQe=s(gd);Dv=n(mQe,"A",{id:!0,class:!0,href:!0});var hEt=s(Dv);E1e=n(hEt,"SPAN",{});var pEt=s(E1e);T(CL.$$.fragment,pEt),pEt.forEach(t),hEt.forEach(t),SYo=i(mQe),C1e=n(mQe,"SPAN",{});var _Et=s(C1e);RYo=r(_Et,"AutoModelForTokenClassification"),_Et.forEach(t),mQe.forEach(t),lze=i(f),jo=n(f,"DIV",{class:!0});var ml=s(jo);T(wL.$$.fragment,ml),PYo=i(ml),hd=n(ml,"P",{});var gte=s(hd);BYo=r(gte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Yz=n(gte,"A",{href:!0});var uEt=s(Yz);IYo=r(uEt,"from_pretrained()"),uEt.forEach(t),NYo=r(gte," class method or the "),Kz=n(gte,"A",{href:!0});var bEt=s(Kz);qYo=r(bEt,"from_config()"),bEt.forEach(t),jYo=r(gte,` class
method.`),gte.forEach(t),DYo=i(ml),AL=n(ml,"P",{});var gQe=s(AL);GYo=r(gQe,"This class cannot be instantiated directly using "),w1e=n(gQe,"CODE",{});var vEt=s(w1e);OYo=r(vEt,"__init__()"),vEt.forEach(t),VYo=r(gQe," (throws an error)."),gQe.forEach(t),XYo=i(ml),_t=n(ml,"DIV",{class:!0});var Sw=s(_t);T(LL.$$.fragment,Sw),zYo=i(Sw),A1e=n(Sw,"P",{});var FEt=s(A1e);WYo=r(FEt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),FEt.forEach(t),QYo=i(Sw),pd=n(Sw,"P",{});var hte=s(pd);HYo=r(hte,`Note:
Loading a model from its configuration file does `),L1e=n(hte,"STRONG",{});var TEt=s(L1e);UYo=r(TEt,"not"),TEt.forEach(t),JYo=r(hte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zz=n(hte,"A",{href:!0});var MEt=s(Zz);YYo=r(MEt,"from_pretrained()"),MEt.forEach(t),KYo=r(hte," to load the model weights."),hte.forEach(t),ZYo=i(Sw),T(Gv.$$.fragment,Sw),Sw.forEach(t),eKo=i(ml),no=n(ml,"DIV",{class:!0});var _a=s(no);T(yL.$$.fragment,_a),oKo=i(_a),y1e=n(_a,"P",{});var EEt=s(y1e);rKo=r(EEt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),EEt.forEach(t),tKo=i(_a),Xa=n(_a,"P",{});var Rw=s(Xa);aKo=r(Rw,"The model class to instantiate is selected based on the "),x1e=n(Rw,"CODE",{});var CEt=s(x1e);nKo=r(CEt,"model_type"),CEt.forEach(t),sKo=r(Rw,` property of the config object (either
passed as an argument or loaded from `),$1e=n(Rw,"CODE",{});var wEt=s($1e);lKo=r(wEt,"pretrained_model_name_or_path"),wEt.forEach(t),iKo=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k1e=n(Rw,"CODE",{});var AEt=s(k1e);dKo=r(AEt,"pretrained_model_name_or_path"),AEt.forEach(t),cKo=r(Rw,":"),Rw.forEach(t),fKo=i(_a),U=n(_a,"UL",{});var Y=s(U);Ov=n(Y,"LI",{});var zBe=s(Ov);S1e=n(zBe,"STRONG",{});var LEt=s(S1e);mKo=r(LEt,"albert"),LEt.forEach(t),gKo=r(zBe," \u2014 "),eW=n(zBe,"A",{href:!0});var yEt=s(eW);hKo=r(yEt,"AlbertForTokenClassification"),yEt.forEach(t),pKo=r(zBe," (ALBERT model)"),zBe.forEach(t),_Ko=i(Y),Vv=n(Y,"LI",{});var WBe=s(Vv);R1e=n(WBe,"STRONG",{});var xEt=s(R1e);uKo=r(xEt,"bert"),xEt.forEach(t),bKo=r(WBe," \u2014 "),oW=n(WBe,"A",{href:!0});var $Et=s(oW);vKo=r($Et,"BertForTokenClassification"),$Et.forEach(t),FKo=r(WBe," (BERT model)"),WBe.forEach(t),TKo=i(Y),Xv=n(Y,"LI",{});var QBe=s(Xv);P1e=n(QBe,"STRONG",{});var kEt=s(P1e);MKo=r(kEt,"big_bird"),kEt.forEach(t),EKo=r(QBe," \u2014 "),rW=n(QBe,"A",{href:!0});var SEt=s(rW);CKo=r(SEt,"BigBirdForTokenClassification"),SEt.forEach(t),wKo=r(QBe," (BigBird model)"),QBe.forEach(t),AKo=i(Y),zv=n(Y,"LI",{});var HBe=s(zv);B1e=n(HBe,"STRONG",{});var REt=s(B1e);LKo=r(REt,"bloom"),REt.forEach(t),yKo=r(HBe," \u2014 "),tW=n(HBe,"A",{href:!0});var PEt=s(tW);xKo=r(PEt,"BloomForTokenClassification"),PEt.forEach(t),$Ko=r(HBe," (BLOOM model)"),HBe.forEach(t),kKo=i(Y),Wv=n(Y,"LI",{});var UBe=s(Wv);I1e=n(UBe,"STRONG",{});var BEt=s(I1e);SKo=r(BEt,"camembert"),BEt.forEach(t),RKo=r(UBe," \u2014 "),aW=n(UBe,"A",{href:!0});var IEt=s(aW);PKo=r(IEt,"CamembertForTokenClassification"),IEt.forEach(t),BKo=r(UBe," (CamemBERT model)"),UBe.forEach(t),IKo=i(Y),Qv=n(Y,"LI",{});var JBe=s(Qv);N1e=n(JBe,"STRONG",{});var NEt=s(N1e);NKo=r(NEt,"canine"),NEt.forEach(t),qKo=r(JBe," \u2014 "),nW=n(JBe,"A",{href:!0});var qEt=s(nW);jKo=r(qEt,"CanineForTokenClassification"),qEt.forEach(t),DKo=r(JBe," (CANINE model)"),JBe.forEach(t),GKo=i(Y),Hv=n(Y,"LI",{});var YBe=s(Hv);q1e=n(YBe,"STRONG",{});var jEt=s(q1e);OKo=r(jEt,"convbert"),jEt.forEach(t),VKo=r(YBe," \u2014 "),sW=n(YBe,"A",{href:!0});var DEt=s(sW);XKo=r(DEt,"ConvBertForTokenClassification"),DEt.forEach(t),zKo=r(YBe," (ConvBERT model)"),YBe.forEach(t),WKo=i(Y),Uv=n(Y,"LI",{});var KBe=s(Uv);j1e=n(KBe,"STRONG",{});var GEt=s(j1e);QKo=r(GEt,"data2vec-text"),GEt.forEach(t),HKo=r(KBe," \u2014 "),lW=n(KBe,"A",{href:!0});var OEt=s(lW);UKo=r(OEt,"Data2VecTextForTokenClassification"),OEt.forEach(t),JKo=r(KBe," (Data2VecText model)"),KBe.forEach(t),YKo=i(Y),Jv=n(Y,"LI",{});var ZBe=s(Jv);D1e=n(ZBe,"STRONG",{});var VEt=s(D1e);KKo=r(VEt,"deberta"),VEt.forEach(t),ZKo=r(ZBe," \u2014 "),iW=n(ZBe,"A",{href:!0});var XEt=s(iW);eZo=r(XEt,"DebertaForTokenClassification"),XEt.forEach(t),oZo=r(ZBe," (DeBERTa model)"),ZBe.forEach(t),rZo=i(Y),Yv=n(Y,"LI",{});var eIe=s(Yv);G1e=n(eIe,"STRONG",{});var zEt=s(G1e);tZo=r(zEt,"deberta-v2"),zEt.forEach(t),aZo=r(eIe," \u2014 "),dW=n(eIe,"A",{href:!0});var WEt=s(dW);nZo=r(WEt,"DebertaV2ForTokenClassification"),WEt.forEach(t),sZo=r(eIe," (DeBERTa-v2 model)"),eIe.forEach(t),lZo=i(Y),Kv=n(Y,"LI",{});var oIe=s(Kv);O1e=n(oIe,"STRONG",{});var QEt=s(O1e);iZo=r(QEt,"distilbert"),QEt.forEach(t),dZo=r(oIe," \u2014 "),cW=n(oIe,"A",{href:!0});var HEt=s(cW);cZo=r(HEt,"DistilBertForTokenClassification"),HEt.forEach(t),fZo=r(oIe," (DistilBERT model)"),oIe.forEach(t),mZo=i(Y),Zv=n(Y,"LI",{});var rIe=s(Zv);V1e=n(rIe,"STRONG",{});var UEt=s(V1e);gZo=r(UEt,"electra"),UEt.forEach(t),hZo=r(rIe," \u2014 "),fW=n(rIe,"A",{href:!0});var JEt=s(fW);pZo=r(JEt,"ElectraForTokenClassification"),JEt.forEach(t),_Zo=r(rIe," (ELECTRA model)"),rIe.forEach(t),uZo=i(Y),eF=n(Y,"LI",{});var tIe=s(eF);X1e=n(tIe,"STRONG",{});var YEt=s(X1e);bZo=r(YEt,"flaubert"),YEt.forEach(t),vZo=r(tIe," \u2014 "),mW=n(tIe,"A",{href:!0});var KEt=s(mW);FZo=r(KEt,"FlaubertForTokenClassification"),KEt.forEach(t),TZo=r(tIe," (FlauBERT model)"),tIe.forEach(t),MZo=i(Y),oF=n(Y,"LI",{});var aIe=s(oF);z1e=n(aIe,"STRONG",{});var ZEt=s(z1e);EZo=r(ZEt,"fnet"),ZEt.forEach(t),CZo=r(aIe," \u2014 "),gW=n(aIe,"A",{href:!0});var eCt=s(gW);wZo=r(eCt,"FNetForTokenClassification"),eCt.forEach(t),AZo=r(aIe," (FNet model)"),aIe.forEach(t),LZo=i(Y),rF=n(Y,"LI",{});var nIe=s(rF);W1e=n(nIe,"STRONG",{});var oCt=s(W1e);yZo=r(oCt,"funnel"),oCt.forEach(t),xZo=r(nIe," \u2014 "),hW=n(nIe,"A",{href:!0});var rCt=s(hW);$Zo=r(rCt,"FunnelForTokenClassification"),rCt.forEach(t),kZo=r(nIe," (Funnel Transformer model)"),nIe.forEach(t),SZo=i(Y),tF=n(Y,"LI",{});var sIe=s(tF);Q1e=n(sIe,"STRONG",{});var tCt=s(Q1e);RZo=r(tCt,"gpt2"),tCt.forEach(t),PZo=r(sIe," \u2014 "),pW=n(sIe,"A",{href:!0});var aCt=s(pW);BZo=r(aCt,"GPT2ForTokenClassification"),aCt.forEach(t),IZo=r(sIe," (OpenAI GPT-2 model)"),sIe.forEach(t),NZo=i(Y),aF=n(Y,"LI",{});var lIe=s(aF);H1e=n(lIe,"STRONG",{});var nCt=s(H1e);qZo=r(nCt,"ibert"),nCt.forEach(t),jZo=r(lIe," \u2014 "),_W=n(lIe,"A",{href:!0});var sCt=s(_W);DZo=r(sCt,"IBertForTokenClassification"),sCt.forEach(t),GZo=r(lIe," (I-BERT model)"),lIe.forEach(t),OZo=i(Y),nF=n(Y,"LI",{});var iIe=s(nF);U1e=n(iIe,"STRONG",{});var lCt=s(U1e);VZo=r(lCt,"layoutlm"),lCt.forEach(t),XZo=r(iIe," \u2014 "),uW=n(iIe,"A",{href:!0});var iCt=s(uW);zZo=r(iCt,"LayoutLMForTokenClassification"),iCt.forEach(t),WZo=r(iIe," (LayoutLM model)"),iIe.forEach(t),QZo=i(Y),sF=n(Y,"LI",{});var dIe=s(sF);J1e=n(dIe,"STRONG",{});var dCt=s(J1e);HZo=r(dCt,"layoutlmv2"),dCt.forEach(t),UZo=r(dIe," \u2014 "),bW=n(dIe,"A",{href:!0});var cCt=s(bW);JZo=r(cCt,"LayoutLMv2ForTokenClassification"),cCt.forEach(t),YZo=r(dIe," (LayoutLMv2 model)"),dIe.forEach(t),KZo=i(Y),lF=n(Y,"LI",{});var cIe=s(lF);Y1e=n(cIe,"STRONG",{});var fCt=s(Y1e);ZZo=r(fCt,"layoutlmv3"),fCt.forEach(t),eer=r(cIe," \u2014 "),vW=n(cIe,"A",{href:!0});var mCt=s(vW);oer=r(mCt,"LayoutLMv3ForTokenClassification"),mCt.forEach(t),rer=r(cIe," (LayoutLMv3 model)"),cIe.forEach(t),ter=i(Y),iF=n(Y,"LI",{});var fIe=s(iF);K1e=n(fIe,"STRONG",{});var gCt=s(K1e);aer=r(gCt,"longformer"),gCt.forEach(t),ner=r(fIe," \u2014 "),FW=n(fIe,"A",{href:!0});var hCt=s(FW);ser=r(hCt,"LongformerForTokenClassification"),hCt.forEach(t),ler=r(fIe," (Longformer model)"),fIe.forEach(t),ier=i(Y),dF=n(Y,"LI",{});var mIe=s(dF);Z1e=n(mIe,"STRONG",{});var pCt=s(Z1e);der=r(pCt,"megatron-bert"),pCt.forEach(t),cer=r(mIe," \u2014 "),TW=n(mIe,"A",{href:!0});var _Ct=s(TW);fer=r(_Ct,"MegatronBertForTokenClassification"),_Ct.forEach(t),mer=r(mIe," (Megatron-BERT model)"),mIe.forEach(t),ger=i(Y),cF=n(Y,"LI",{});var gIe=s(cF);e2e=n(gIe,"STRONG",{});var uCt=s(e2e);her=r(uCt,"mobilebert"),uCt.forEach(t),per=r(gIe," \u2014 "),MW=n(gIe,"A",{href:!0});var bCt=s(MW);_er=r(bCt,"MobileBertForTokenClassification"),bCt.forEach(t),uer=r(gIe," (MobileBERT model)"),gIe.forEach(t),ber=i(Y),fF=n(Y,"LI",{});var hIe=s(fF);o2e=n(hIe,"STRONG",{});var vCt=s(o2e);ver=r(vCt,"mpnet"),vCt.forEach(t),Fer=r(hIe," \u2014 "),EW=n(hIe,"A",{href:!0});var FCt=s(EW);Ter=r(FCt,"MPNetForTokenClassification"),FCt.forEach(t),Mer=r(hIe," (MPNet model)"),hIe.forEach(t),Eer=i(Y),mF=n(Y,"LI",{});var pIe=s(mF);r2e=n(pIe,"STRONG",{});var TCt=s(r2e);Cer=r(TCt,"nezha"),TCt.forEach(t),wer=r(pIe," \u2014 "),CW=n(pIe,"A",{href:!0});var MCt=s(CW);Aer=r(MCt,"NezhaForTokenClassification"),MCt.forEach(t),Ler=r(pIe," (Nezha model)"),pIe.forEach(t),yer=i(Y),gF=n(Y,"LI",{});var _Ie=s(gF);t2e=n(_Ie,"STRONG",{});var ECt=s(t2e);xer=r(ECt,"nystromformer"),ECt.forEach(t),$er=r(_Ie," \u2014 "),wW=n(_Ie,"A",{href:!0});var CCt=s(wW);ker=r(CCt,"NystromformerForTokenClassification"),CCt.forEach(t),Ser=r(_Ie," (Nystr\xF6mformer model)"),_Ie.forEach(t),Rer=i(Y),hF=n(Y,"LI",{});var uIe=s(hF);a2e=n(uIe,"STRONG",{});var wCt=s(a2e);Per=r(wCt,"qdqbert"),wCt.forEach(t),Ber=r(uIe," \u2014 "),AW=n(uIe,"A",{href:!0});var ACt=s(AW);Ier=r(ACt,"QDQBertForTokenClassification"),ACt.forEach(t),Ner=r(uIe," (QDQBert model)"),uIe.forEach(t),qer=i(Y),pF=n(Y,"LI",{});var bIe=s(pF);n2e=n(bIe,"STRONG",{});var LCt=s(n2e);jer=r(LCt,"rembert"),LCt.forEach(t),Der=r(bIe," \u2014 "),LW=n(bIe,"A",{href:!0});var yCt=s(LW);Ger=r(yCt,"RemBertForTokenClassification"),yCt.forEach(t),Oer=r(bIe," (RemBERT model)"),bIe.forEach(t),Ver=i(Y),_F=n(Y,"LI",{});var vIe=s(_F);s2e=n(vIe,"STRONG",{});var xCt=s(s2e);Xer=r(xCt,"roberta"),xCt.forEach(t),zer=r(vIe," \u2014 "),yW=n(vIe,"A",{href:!0});var $Ct=s(yW);Wer=r($Ct,"RobertaForTokenClassification"),$Ct.forEach(t),Qer=r(vIe," (RoBERTa model)"),vIe.forEach(t),Her=i(Y),uF=n(Y,"LI",{});var FIe=s(uF);l2e=n(FIe,"STRONG",{});var kCt=s(l2e);Uer=r(kCt,"roformer"),kCt.forEach(t),Jer=r(FIe," \u2014 "),xW=n(FIe,"A",{href:!0});var SCt=s(xW);Yer=r(SCt,"RoFormerForTokenClassification"),SCt.forEach(t),Ker=r(FIe," (RoFormer model)"),FIe.forEach(t),Zer=i(Y),bF=n(Y,"LI",{});var TIe=s(bF);i2e=n(TIe,"STRONG",{});var RCt=s(i2e);eor=r(RCt,"squeezebert"),RCt.forEach(t),oor=r(TIe," \u2014 "),$W=n(TIe,"A",{href:!0});var PCt=s($W);ror=r(PCt,"SqueezeBertForTokenClassification"),PCt.forEach(t),tor=r(TIe," (SqueezeBERT model)"),TIe.forEach(t),aor=i(Y),vF=n(Y,"LI",{});var MIe=s(vF);d2e=n(MIe,"STRONG",{});var BCt=s(d2e);nor=r(BCt,"xlm"),BCt.forEach(t),sor=r(MIe," \u2014 "),kW=n(MIe,"A",{href:!0});var ICt=s(kW);lor=r(ICt,"XLMForTokenClassification"),ICt.forEach(t),ior=r(MIe," (XLM model)"),MIe.forEach(t),dor=i(Y),FF=n(Y,"LI",{});var EIe=s(FF);c2e=n(EIe,"STRONG",{});var NCt=s(c2e);cor=r(NCt,"xlm-roberta"),NCt.forEach(t),mor=r(EIe," \u2014 "),SW=n(EIe,"A",{href:!0});var qCt=s(SW);gor=r(qCt,"XLMRobertaForTokenClassification"),qCt.forEach(t),hor=r(EIe," (XLM-RoBERTa model)"),EIe.forEach(t),por=i(Y),TF=n(Y,"LI",{});var CIe=s(TF);f2e=n(CIe,"STRONG",{});var jCt=s(f2e);_or=r(jCt,"xlm-roberta-xl"),jCt.forEach(t),uor=r(CIe," \u2014 "),RW=n(CIe,"A",{href:!0});var DCt=s(RW);bor=r(DCt,"XLMRobertaXLForTokenClassification"),DCt.forEach(t),vor=r(CIe," (XLM-RoBERTa-XL model)"),CIe.forEach(t),For=i(Y),MF=n(Y,"LI",{});var wIe=s(MF);m2e=n(wIe,"STRONG",{});var GCt=s(m2e);Tor=r(GCt,"xlnet"),GCt.forEach(t),Mor=r(wIe," \u2014 "),PW=n(wIe,"A",{href:!0});var OCt=s(PW);Eor=r(OCt,"XLNetForTokenClassification"),OCt.forEach(t),Cor=r(wIe," (XLNet model)"),wIe.forEach(t),wor=i(Y),EF=n(Y,"LI",{});var AIe=s(EF);g2e=n(AIe,"STRONG",{});var VCt=s(g2e);Aor=r(VCt,"yoso"),VCt.forEach(t),Lor=r(AIe," \u2014 "),BW=n(AIe,"A",{href:!0});var XCt=s(BW);yor=r(XCt,"YosoForTokenClassification"),XCt.forEach(t),xor=r(AIe," (YOSO model)"),AIe.forEach(t),Y.forEach(t),$or=i(_a),CF=n(_a,"P",{});var LIe=s(CF);kor=r(LIe,"The model is set in evaluation mode by default using "),h2e=n(LIe,"CODE",{});var zCt=s(h2e);Sor=r(zCt,"model.eval()"),zCt.forEach(t),Ror=r(LIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p2e=n(LIe,"CODE",{});var WCt=s(p2e);Por=r(WCt,"model.train()"),WCt.forEach(t),LIe.forEach(t),Bor=i(_a),T(wF.$$.fragment,_a),_a.forEach(t),ml.forEach(t),ize=i(f),_d=n(f,"H2",{class:!0});var hQe=s(_d);AF=n(hQe,"A",{id:!0,class:!0,href:!0});var QCt=s(AF);_2e=n(QCt,"SPAN",{});var HCt=s(_2e);T(xL.$$.fragment,HCt),HCt.forEach(t),QCt.forEach(t),Ior=i(hQe),u2e=n(hQe,"SPAN",{});var UCt=s(u2e);Nor=r(UCt,"AutoModelForQuestionAnswering"),UCt.forEach(t),hQe.forEach(t),dze=i(f),Do=n(f,"DIV",{class:!0});var gl=s(Do);T($L.$$.fragment,gl),qor=i(gl),ud=n(gl,"P",{});var pte=s(ud);jor=r(pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),IW=n(pte,"A",{href:!0});var JCt=s(IW);Dor=r(JCt,"from_pretrained()"),JCt.forEach(t),Gor=r(pte," class method or the "),NW=n(pte,"A",{href:!0});var YCt=s(NW);Oor=r(YCt,"from_config()"),YCt.forEach(t),Vor=r(pte,` class
method.`),pte.forEach(t),Xor=i(gl),kL=n(gl,"P",{});var pQe=s(kL);zor=r(pQe,"This class cannot be instantiated directly using "),b2e=n(pQe,"CODE",{});var KCt=s(b2e);Wor=r(KCt,"__init__()"),KCt.forEach(t),Qor=r(pQe," (throws an error)."),pQe.forEach(t),Hor=i(gl),ut=n(gl,"DIV",{class:!0});var Pw=s(ut);T(SL.$$.fragment,Pw),Uor=i(Pw),v2e=n(Pw,"P",{});var ZCt=s(v2e);Jor=r(ZCt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ZCt.forEach(t),Yor=i(Pw),bd=n(Pw,"P",{});var _te=s(bd);Kor=r(_te,`Note:
Loading a model from its configuration file does `),F2e=n(_te,"STRONG",{});var e5t=s(F2e);Zor=r(e5t,"not"),e5t.forEach(t),err=r(_te,` load the model weights. It only affects the
model\u2019s configuration. Use `),qW=n(_te,"A",{href:!0});var o5t=s(qW);orr=r(o5t,"from_pretrained()"),o5t.forEach(t),rrr=r(_te," to load the model weights."),_te.forEach(t),trr=i(Pw),T(LF.$$.fragment,Pw),Pw.forEach(t),arr=i(gl),so=n(gl,"DIV",{class:!0});var ua=s(so);T(RL.$$.fragment,ua),nrr=i(ua),T2e=n(ua,"P",{});var r5t=s(T2e);srr=r(r5t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),r5t.forEach(t),lrr=i(ua),za=n(ua,"P",{});var Bw=s(za);irr=r(Bw,"The model class to instantiate is selected based on the "),M2e=n(Bw,"CODE",{});var t5t=s(M2e);drr=r(t5t,"model_type"),t5t.forEach(t),crr=r(Bw,` property of the config object (either
passed as an argument or loaded from `),E2e=n(Bw,"CODE",{});var a5t=s(E2e);frr=r(a5t,"pretrained_model_name_or_path"),a5t.forEach(t),mrr=r(Bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C2e=n(Bw,"CODE",{});var n5t=s(C2e);grr=r(n5t,"pretrained_model_name_or_path"),n5t.forEach(t),hrr=r(Bw,":"),Bw.forEach(t),prr=i(ua),V=n(ua,"UL",{});var X=s(V);yF=n(X,"LI",{});var yIe=s(yF);w2e=n(yIe,"STRONG",{});var s5t=s(w2e);_rr=r(s5t,"albert"),s5t.forEach(t),urr=r(yIe," \u2014 "),jW=n(yIe,"A",{href:!0});var l5t=s(jW);brr=r(l5t,"AlbertForQuestionAnswering"),l5t.forEach(t),vrr=r(yIe," (ALBERT model)"),yIe.forEach(t),Frr=i(X),xF=n(X,"LI",{});var xIe=s(xF);A2e=n(xIe,"STRONG",{});var i5t=s(A2e);Trr=r(i5t,"bart"),i5t.forEach(t),Mrr=r(xIe," \u2014 "),DW=n(xIe,"A",{href:!0});var d5t=s(DW);Err=r(d5t,"BartForQuestionAnswering"),d5t.forEach(t),Crr=r(xIe," (BART model)"),xIe.forEach(t),wrr=i(X),$F=n(X,"LI",{});var $Ie=s($F);L2e=n($Ie,"STRONG",{});var c5t=s(L2e);Arr=r(c5t,"bert"),c5t.forEach(t),Lrr=r($Ie," \u2014 "),GW=n($Ie,"A",{href:!0});var f5t=s(GW);yrr=r(f5t,"BertForQuestionAnswering"),f5t.forEach(t),xrr=r($Ie," (BERT model)"),$Ie.forEach(t),$rr=i(X),kF=n(X,"LI",{});var kIe=s(kF);y2e=n(kIe,"STRONG",{});var m5t=s(y2e);krr=r(m5t,"big_bird"),m5t.forEach(t),Srr=r(kIe," \u2014 "),OW=n(kIe,"A",{href:!0});var g5t=s(OW);Rrr=r(g5t,"BigBirdForQuestionAnswering"),g5t.forEach(t),Prr=r(kIe," (BigBird model)"),kIe.forEach(t),Brr=i(X),SF=n(X,"LI",{});var SIe=s(SF);x2e=n(SIe,"STRONG",{});var h5t=s(x2e);Irr=r(h5t,"bigbird_pegasus"),h5t.forEach(t),Nrr=r(SIe," \u2014 "),VW=n(SIe,"A",{href:!0});var p5t=s(VW);qrr=r(p5t,"BigBirdPegasusForQuestionAnswering"),p5t.forEach(t),jrr=r(SIe," (BigBird-Pegasus model)"),SIe.forEach(t),Drr=i(X),RF=n(X,"LI",{});var RIe=s(RF);$2e=n(RIe,"STRONG",{});var _5t=s($2e);Grr=r(_5t,"camembert"),_5t.forEach(t),Orr=r(RIe," \u2014 "),XW=n(RIe,"A",{href:!0});var u5t=s(XW);Vrr=r(u5t,"CamembertForQuestionAnswering"),u5t.forEach(t),Xrr=r(RIe," (CamemBERT model)"),RIe.forEach(t),zrr=i(X),PF=n(X,"LI",{});var PIe=s(PF);k2e=n(PIe,"STRONG",{});var b5t=s(k2e);Wrr=r(b5t,"canine"),b5t.forEach(t),Qrr=r(PIe," \u2014 "),zW=n(PIe,"A",{href:!0});var v5t=s(zW);Hrr=r(v5t,"CanineForQuestionAnswering"),v5t.forEach(t),Urr=r(PIe," (CANINE model)"),PIe.forEach(t),Jrr=i(X),BF=n(X,"LI",{});var BIe=s(BF);S2e=n(BIe,"STRONG",{});var F5t=s(S2e);Yrr=r(F5t,"convbert"),F5t.forEach(t),Krr=r(BIe," \u2014 "),WW=n(BIe,"A",{href:!0});var T5t=s(WW);Zrr=r(T5t,"ConvBertForQuestionAnswering"),T5t.forEach(t),etr=r(BIe," (ConvBERT model)"),BIe.forEach(t),otr=i(X),IF=n(X,"LI",{});var IIe=s(IF);R2e=n(IIe,"STRONG",{});var M5t=s(R2e);rtr=r(M5t,"data2vec-text"),M5t.forEach(t),ttr=r(IIe," \u2014 "),QW=n(IIe,"A",{href:!0});var E5t=s(QW);atr=r(E5t,"Data2VecTextForQuestionAnswering"),E5t.forEach(t),ntr=r(IIe," (Data2VecText model)"),IIe.forEach(t),str=i(X),NF=n(X,"LI",{});var NIe=s(NF);P2e=n(NIe,"STRONG",{});var C5t=s(P2e);ltr=r(C5t,"deberta"),C5t.forEach(t),itr=r(NIe," \u2014 "),HW=n(NIe,"A",{href:!0});var w5t=s(HW);dtr=r(w5t,"DebertaForQuestionAnswering"),w5t.forEach(t),ctr=r(NIe," (DeBERTa model)"),NIe.forEach(t),ftr=i(X),qF=n(X,"LI",{});var qIe=s(qF);B2e=n(qIe,"STRONG",{});var A5t=s(B2e);mtr=r(A5t,"deberta-v2"),A5t.forEach(t),gtr=r(qIe," \u2014 "),UW=n(qIe,"A",{href:!0});var L5t=s(UW);htr=r(L5t,"DebertaV2ForQuestionAnswering"),L5t.forEach(t),ptr=r(qIe," (DeBERTa-v2 model)"),qIe.forEach(t),_tr=i(X),jF=n(X,"LI",{});var jIe=s(jF);I2e=n(jIe,"STRONG",{});var y5t=s(I2e);utr=r(y5t,"distilbert"),y5t.forEach(t),btr=r(jIe," \u2014 "),JW=n(jIe,"A",{href:!0});var x5t=s(JW);vtr=r(x5t,"DistilBertForQuestionAnswering"),x5t.forEach(t),Ftr=r(jIe," (DistilBERT model)"),jIe.forEach(t),Ttr=i(X),DF=n(X,"LI",{});var DIe=s(DF);N2e=n(DIe,"STRONG",{});var $5t=s(N2e);Mtr=r($5t,"electra"),$5t.forEach(t),Etr=r(DIe," \u2014 "),YW=n(DIe,"A",{href:!0});var k5t=s(YW);Ctr=r(k5t,"ElectraForQuestionAnswering"),k5t.forEach(t),wtr=r(DIe," (ELECTRA model)"),DIe.forEach(t),Atr=i(X),GF=n(X,"LI",{});var GIe=s(GF);q2e=n(GIe,"STRONG",{});var S5t=s(q2e);Ltr=r(S5t,"flaubert"),S5t.forEach(t),ytr=r(GIe," \u2014 "),KW=n(GIe,"A",{href:!0});var R5t=s(KW);xtr=r(R5t,"FlaubertForQuestionAnsweringSimple"),R5t.forEach(t),$tr=r(GIe," (FlauBERT model)"),GIe.forEach(t),ktr=i(X),OF=n(X,"LI",{});var OIe=s(OF);j2e=n(OIe,"STRONG",{});var P5t=s(j2e);Str=r(P5t,"fnet"),P5t.forEach(t),Rtr=r(OIe," \u2014 "),ZW=n(OIe,"A",{href:!0});var B5t=s(ZW);Ptr=r(B5t,"FNetForQuestionAnswering"),B5t.forEach(t),Btr=r(OIe," (FNet model)"),OIe.forEach(t),Itr=i(X),VF=n(X,"LI",{});var VIe=s(VF);D2e=n(VIe,"STRONG",{});var I5t=s(D2e);Ntr=r(I5t,"funnel"),I5t.forEach(t),qtr=r(VIe," \u2014 "),eQ=n(VIe,"A",{href:!0});var N5t=s(eQ);jtr=r(N5t,"FunnelForQuestionAnswering"),N5t.forEach(t),Dtr=r(VIe," (Funnel Transformer model)"),VIe.forEach(t),Gtr=i(X),XF=n(X,"LI",{});var XIe=s(XF);G2e=n(XIe,"STRONG",{});var q5t=s(G2e);Otr=r(q5t,"gptj"),q5t.forEach(t),Vtr=r(XIe," \u2014 "),oQ=n(XIe,"A",{href:!0});var j5t=s(oQ);Xtr=r(j5t,"GPTJForQuestionAnswering"),j5t.forEach(t),ztr=r(XIe," (GPT-J model)"),XIe.forEach(t),Wtr=i(X),zF=n(X,"LI",{});var zIe=s(zF);O2e=n(zIe,"STRONG",{});var D5t=s(O2e);Qtr=r(D5t,"ibert"),D5t.forEach(t),Htr=r(zIe," \u2014 "),rQ=n(zIe,"A",{href:!0});var G5t=s(rQ);Utr=r(G5t,"IBertForQuestionAnswering"),G5t.forEach(t),Jtr=r(zIe," (I-BERT model)"),zIe.forEach(t),Ytr=i(X),WF=n(X,"LI",{});var WIe=s(WF);V2e=n(WIe,"STRONG",{});var O5t=s(V2e);Ktr=r(O5t,"layoutlmv2"),O5t.forEach(t),Ztr=r(WIe," \u2014 "),tQ=n(WIe,"A",{href:!0});var V5t=s(tQ);ear=r(V5t,"LayoutLMv2ForQuestionAnswering"),V5t.forEach(t),oar=r(WIe," (LayoutLMv2 model)"),WIe.forEach(t),rar=i(X),QF=n(X,"LI",{});var QIe=s(QF);X2e=n(QIe,"STRONG",{});var X5t=s(X2e);tar=r(X5t,"layoutlmv3"),X5t.forEach(t),aar=r(QIe," \u2014 "),aQ=n(QIe,"A",{href:!0});var z5t=s(aQ);nar=r(z5t,"LayoutLMv3ForQuestionAnswering"),z5t.forEach(t),sar=r(QIe," (LayoutLMv3 model)"),QIe.forEach(t),lar=i(X),HF=n(X,"LI",{});var HIe=s(HF);z2e=n(HIe,"STRONG",{});var W5t=s(z2e);iar=r(W5t,"led"),W5t.forEach(t),dar=r(HIe," \u2014 "),nQ=n(HIe,"A",{href:!0});var Q5t=s(nQ);car=r(Q5t,"LEDForQuestionAnswering"),Q5t.forEach(t),far=r(HIe," (LED model)"),HIe.forEach(t),mar=i(X),UF=n(X,"LI",{});var UIe=s(UF);W2e=n(UIe,"STRONG",{});var H5t=s(W2e);gar=r(H5t,"longformer"),H5t.forEach(t),har=r(UIe," \u2014 "),sQ=n(UIe,"A",{href:!0});var U5t=s(sQ);par=r(U5t,"LongformerForQuestionAnswering"),U5t.forEach(t),_ar=r(UIe," (Longformer model)"),UIe.forEach(t),uar=i(X),JF=n(X,"LI",{});var JIe=s(JF);Q2e=n(JIe,"STRONG",{});var J5t=s(Q2e);bar=r(J5t,"lxmert"),J5t.forEach(t),Far=r(JIe," \u2014 "),lQ=n(JIe,"A",{href:!0});var Y5t=s(lQ);Tar=r(Y5t,"LxmertForQuestionAnswering"),Y5t.forEach(t),Mar=r(JIe," (LXMERT model)"),JIe.forEach(t),Ear=i(X),YF=n(X,"LI",{});var YIe=s(YF);H2e=n(YIe,"STRONG",{});var K5t=s(H2e);Car=r(K5t,"mbart"),K5t.forEach(t),war=r(YIe," \u2014 "),iQ=n(YIe,"A",{href:!0});var Z5t=s(iQ);Aar=r(Z5t,"MBartForQuestionAnswering"),Z5t.forEach(t),Lar=r(YIe," (mBART model)"),YIe.forEach(t),yar=i(X),KF=n(X,"LI",{});var KIe=s(KF);U2e=n(KIe,"STRONG",{});var e0t=s(U2e);xar=r(e0t,"megatron-bert"),e0t.forEach(t),$ar=r(KIe," \u2014 "),dQ=n(KIe,"A",{href:!0});var o0t=s(dQ);kar=r(o0t,"MegatronBertForQuestionAnswering"),o0t.forEach(t),Sar=r(KIe," (Megatron-BERT model)"),KIe.forEach(t),Rar=i(X),ZF=n(X,"LI",{});var ZIe=s(ZF);J2e=n(ZIe,"STRONG",{});var r0t=s(J2e);Par=r(r0t,"mobilebert"),r0t.forEach(t),Bar=r(ZIe," \u2014 "),cQ=n(ZIe,"A",{href:!0});var t0t=s(cQ);Iar=r(t0t,"MobileBertForQuestionAnswering"),t0t.forEach(t),Nar=r(ZIe," (MobileBERT model)"),ZIe.forEach(t),qar=i(X),eT=n(X,"LI",{});var eNe=s(eT);Y2e=n(eNe,"STRONG",{});var a0t=s(Y2e);jar=r(a0t,"mpnet"),a0t.forEach(t),Dar=r(eNe," \u2014 "),fQ=n(eNe,"A",{href:!0});var n0t=s(fQ);Gar=r(n0t,"MPNetForQuestionAnswering"),n0t.forEach(t),Oar=r(eNe," (MPNet model)"),eNe.forEach(t),Var=i(X),oT=n(X,"LI",{});var oNe=s(oT);K2e=n(oNe,"STRONG",{});var s0t=s(K2e);Xar=r(s0t,"mvp"),s0t.forEach(t),zar=r(oNe," \u2014 "),mQ=n(oNe,"A",{href:!0});var l0t=s(mQ);War=r(l0t,"MvpForQuestionAnswering"),l0t.forEach(t),Qar=r(oNe," (MVP model)"),oNe.forEach(t),Har=i(X),rT=n(X,"LI",{});var rNe=s(rT);Z2e=n(rNe,"STRONG",{});var i0t=s(Z2e);Uar=r(i0t,"nezha"),i0t.forEach(t),Jar=r(rNe," \u2014 "),gQ=n(rNe,"A",{href:!0});var d0t=s(gQ);Yar=r(d0t,"NezhaForQuestionAnswering"),d0t.forEach(t),Kar=r(rNe," (Nezha model)"),rNe.forEach(t),Zar=i(X),tT=n(X,"LI",{});var tNe=s(tT);ebe=n(tNe,"STRONG",{});var c0t=s(ebe);enr=r(c0t,"nystromformer"),c0t.forEach(t),onr=r(tNe," \u2014 "),hQ=n(tNe,"A",{href:!0});var f0t=s(hQ);rnr=r(f0t,"NystromformerForQuestionAnswering"),f0t.forEach(t),tnr=r(tNe," (Nystr\xF6mformer model)"),tNe.forEach(t),anr=i(X),aT=n(X,"LI",{});var aNe=s(aT);obe=n(aNe,"STRONG",{});var m0t=s(obe);nnr=r(m0t,"qdqbert"),m0t.forEach(t),snr=r(aNe," \u2014 "),pQ=n(aNe,"A",{href:!0});var g0t=s(pQ);lnr=r(g0t,"QDQBertForQuestionAnswering"),g0t.forEach(t),inr=r(aNe," (QDQBert model)"),aNe.forEach(t),dnr=i(X),nT=n(X,"LI",{});var nNe=s(nT);rbe=n(nNe,"STRONG",{});var h0t=s(rbe);cnr=r(h0t,"reformer"),h0t.forEach(t),fnr=r(nNe," \u2014 "),_Q=n(nNe,"A",{href:!0});var p0t=s(_Q);mnr=r(p0t,"ReformerForQuestionAnswering"),p0t.forEach(t),gnr=r(nNe," (Reformer model)"),nNe.forEach(t),hnr=i(X),sT=n(X,"LI",{});var sNe=s(sT);tbe=n(sNe,"STRONG",{});var _0t=s(tbe);pnr=r(_0t,"rembert"),_0t.forEach(t),_nr=r(sNe," \u2014 "),uQ=n(sNe,"A",{href:!0});var u0t=s(uQ);unr=r(u0t,"RemBertForQuestionAnswering"),u0t.forEach(t),bnr=r(sNe," (RemBERT model)"),sNe.forEach(t),vnr=i(X),lT=n(X,"LI",{});var lNe=s(lT);abe=n(lNe,"STRONG",{});var b0t=s(abe);Fnr=r(b0t,"roberta"),b0t.forEach(t),Tnr=r(lNe," \u2014 "),bQ=n(lNe,"A",{href:!0});var v0t=s(bQ);Mnr=r(v0t,"RobertaForQuestionAnswering"),v0t.forEach(t),Enr=r(lNe," (RoBERTa model)"),lNe.forEach(t),Cnr=i(X),iT=n(X,"LI",{});var iNe=s(iT);nbe=n(iNe,"STRONG",{});var F0t=s(nbe);wnr=r(F0t,"roformer"),F0t.forEach(t),Anr=r(iNe," \u2014 "),vQ=n(iNe,"A",{href:!0});var T0t=s(vQ);Lnr=r(T0t,"RoFormerForQuestionAnswering"),T0t.forEach(t),ynr=r(iNe," (RoFormer model)"),iNe.forEach(t),xnr=i(X),dT=n(X,"LI",{});var dNe=s(dT);sbe=n(dNe,"STRONG",{});var M0t=s(sbe);$nr=r(M0t,"splinter"),M0t.forEach(t),knr=r(dNe," \u2014 "),FQ=n(dNe,"A",{href:!0});var E0t=s(FQ);Snr=r(E0t,"SplinterForQuestionAnswering"),E0t.forEach(t),Rnr=r(dNe," (Splinter model)"),dNe.forEach(t),Pnr=i(X),cT=n(X,"LI",{});var cNe=s(cT);lbe=n(cNe,"STRONG",{});var C0t=s(lbe);Bnr=r(C0t,"squeezebert"),C0t.forEach(t),Inr=r(cNe," \u2014 "),TQ=n(cNe,"A",{href:!0});var w0t=s(TQ);Nnr=r(w0t,"SqueezeBertForQuestionAnswering"),w0t.forEach(t),qnr=r(cNe," (SqueezeBERT model)"),cNe.forEach(t),jnr=i(X),fT=n(X,"LI",{});var fNe=s(fT);ibe=n(fNe,"STRONG",{});var A0t=s(ibe);Dnr=r(A0t,"xlm"),A0t.forEach(t),Gnr=r(fNe," \u2014 "),MQ=n(fNe,"A",{href:!0});var L0t=s(MQ);Onr=r(L0t,"XLMForQuestionAnsweringSimple"),L0t.forEach(t),Vnr=r(fNe," (XLM model)"),fNe.forEach(t),Xnr=i(X),mT=n(X,"LI",{});var mNe=s(mT);dbe=n(mNe,"STRONG",{});var y0t=s(dbe);znr=r(y0t,"xlm-roberta"),y0t.forEach(t),Wnr=r(mNe," \u2014 "),EQ=n(mNe,"A",{href:!0});var x0t=s(EQ);Qnr=r(x0t,"XLMRobertaForQuestionAnswering"),x0t.forEach(t),Hnr=r(mNe," (XLM-RoBERTa model)"),mNe.forEach(t),Unr=i(X),gT=n(X,"LI",{});var gNe=s(gT);cbe=n(gNe,"STRONG",{});var $0t=s(cbe);Jnr=r($0t,"xlm-roberta-xl"),$0t.forEach(t),Ynr=r(gNe," \u2014 "),CQ=n(gNe,"A",{href:!0});var k0t=s(CQ);Knr=r(k0t,"XLMRobertaXLForQuestionAnswering"),k0t.forEach(t),Znr=r(gNe," (XLM-RoBERTa-XL model)"),gNe.forEach(t),esr=i(X),hT=n(X,"LI",{});var hNe=s(hT);fbe=n(hNe,"STRONG",{});var S0t=s(fbe);osr=r(S0t,"xlnet"),S0t.forEach(t),rsr=r(hNe," \u2014 "),wQ=n(hNe,"A",{href:!0});var R0t=s(wQ);tsr=r(R0t,"XLNetForQuestionAnsweringSimple"),R0t.forEach(t),asr=r(hNe," (XLNet model)"),hNe.forEach(t),nsr=i(X),pT=n(X,"LI",{});var pNe=s(pT);mbe=n(pNe,"STRONG",{});var P0t=s(mbe);ssr=r(P0t,"yoso"),P0t.forEach(t),lsr=r(pNe," \u2014 "),AQ=n(pNe,"A",{href:!0});var B0t=s(AQ);isr=r(B0t,"YosoForQuestionAnswering"),B0t.forEach(t),dsr=r(pNe," (YOSO model)"),pNe.forEach(t),X.forEach(t),csr=i(ua),_T=n(ua,"P",{});var _Ne=s(_T);fsr=r(_Ne,"The model is set in evaluation mode by default using "),gbe=n(_Ne,"CODE",{});var I0t=s(gbe);msr=r(I0t,"model.eval()"),I0t.forEach(t),gsr=r(_Ne,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hbe=n(_Ne,"CODE",{});var N0t=s(hbe);hsr=r(N0t,"model.train()"),N0t.forEach(t),_Ne.forEach(t),psr=i(ua),T(uT.$$.fragment,ua),ua.forEach(t),gl.forEach(t),cze=i(f),vd=n(f,"H2",{class:!0});var _Qe=s(vd);bT=n(_Qe,"A",{id:!0,class:!0,href:!0});var q0t=s(bT);pbe=n(q0t,"SPAN",{});var j0t=s(pbe);T(PL.$$.fragment,j0t),j0t.forEach(t),q0t.forEach(t),_sr=i(_Qe),_be=n(_Qe,"SPAN",{});var D0t=s(_be);usr=r(D0t,"AutoModelForTableQuestionAnswering"),D0t.forEach(t),_Qe.forEach(t),fze=i(f),Go=n(f,"DIV",{class:!0});var hl=s(Go);T(BL.$$.fragment,hl),bsr=i(hl),Fd=n(hl,"P",{});var ute=s(Fd);vsr=r(ute,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),LQ=n(ute,"A",{href:!0});var G0t=s(LQ);Fsr=r(G0t,"from_pretrained()"),G0t.forEach(t),Tsr=r(ute," class method or the "),yQ=n(ute,"A",{href:!0});var O0t=s(yQ);Msr=r(O0t,"from_config()"),O0t.forEach(t),Esr=r(ute,` class
method.`),ute.forEach(t),Csr=i(hl),IL=n(hl,"P",{});var uQe=s(IL);wsr=r(uQe,"This class cannot be instantiated directly using "),ube=n(uQe,"CODE",{});var V0t=s(ube);Asr=r(V0t,"__init__()"),V0t.forEach(t),Lsr=r(uQe," (throws an error)."),uQe.forEach(t),ysr=i(hl),bt=n(hl,"DIV",{class:!0});var Iw=s(bt);T(NL.$$.fragment,Iw),xsr=i(Iw),bbe=n(Iw,"P",{});var X0t=s(bbe);$sr=r(X0t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),X0t.forEach(t),ksr=i(Iw),Td=n(Iw,"P",{});var bte=s(Td);Ssr=r(bte,`Note:
Loading a model from its configuration file does `),vbe=n(bte,"STRONG",{});var z0t=s(vbe);Rsr=r(z0t,"not"),z0t.forEach(t),Psr=r(bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),xQ=n(bte,"A",{href:!0});var W0t=s(xQ);Bsr=r(W0t,"from_pretrained()"),W0t.forEach(t),Isr=r(bte," to load the model weights."),bte.forEach(t),Nsr=i(Iw),T(vT.$$.fragment,Iw),Iw.forEach(t),qsr=i(hl),lo=n(hl,"DIV",{class:!0});var ba=s(lo);T(qL.$$.fragment,ba),jsr=i(ba),Fbe=n(ba,"P",{});var Q0t=s(Fbe);Dsr=r(Q0t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Q0t.forEach(t),Gsr=i(ba),Wa=n(ba,"P",{});var Nw=s(Wa);Osr=r(Nw,"The model class to instantiate is selected based on the "),Tbe=n(Nw,"CODE",{});var H0t=s(Tbe);Vsr=r(H0t,"model_type"),H0t.forEach(t),Xsr=r(Nw,` property of the config object (either
passed as an argument or loaded from `),Mbe=n(Nw,"CODE",{});var U0t=s(Mbe);zsr=r(U0t,"pretrained_model_name_or_path"),U0t.forEach(t),Wsr=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ebe=n(Nw,"CODE",{});var J0t=s(Ebe);Qsr=r(J0t,"pretrained_model_name_or_path"),J0t.forEach(t),Hsr=r(Nw,":"),Nw.forEach(t),Usr=i(ba),Cbe=n(ba,"UL",{});var Y0t=s(Cbe);FT=n(Y0t,"LI",{});var uNe=s(FT);wbe=n(uNe,"STRONG",{});var K0t=s(wbe);Jsr=r(K0t,"tapas"),K0t.forEach(t),Ysr=r(uNe," \u2014 "),$Q=n(uNe,"A",{href:!0});var Z0t=s($Q);Ksr=r(Z0t,"TapasForQuestionAnswering"),Z0t.forEach(t),Zsr=r(uNe," (TAPAS model)"),uNe.forEach(t),Y0t.forEach(t),elr=i(ba),TT=n(ba,"P",{});var bNe=s(TT);olr=r(bNe,"The model is set in evaluation mode by default using "),Abe=n(bNe,"CODE",{});var ewt=s(Abe);rlr=r(ewt,"model.eval()"),ewt.forEach(t),tlr=r(bNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lbe=n(bNe,"CODE",{});var owt=s(Lbe);alr=r(owt,"model.train()"),owt.forEach(t),bNe.forEach(t),nlr=i(ba),T(MT.$$.fragment,ba),ba.forEach(t),hl.forEach(t),mze=i(f),Md=n(f,"H2",{class:!0});var bQe=s(Md);ET=n(bQe,"A",{id:!0,class:!0,href:!0});var rwt=s(ET);ybe=n(rwt,"SPAN",{});var twt=s(ybe);T(jL.$$.fragment,twt),twt.forEach(t),rwt.forEach(t),slr=i(bQe),xbe=n(bQe,"SPAN",{});var awt=s(xbe);llr=r(awt,"AutoModelForImageClassification"),awt.forEach(t),bQe.forEach(t),gze=i(f),Oo=n(f,"DIV",{class:!0});var pl=s(Oo);T(DL.$$.fragment,pl),ilr=i(pl),Ed=n(pl,"P",{});var vte=s(Ed);dlr=r(vte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),kQ=n(vte,"A",{href:!0});var nwt=s(kQ);clr=r(nwt,"from_pretrained()"),nwt.forEach(t),flr=r(vte," class method or the "),SQ=n(vte,"A",{href:!0});var swt=s(SQ);mlr=r(swt,"from_config()"),swt.forEach(t),glr=r(vte,` class
method.`),vte.forEach(t),hlr=i(pl),GL=n(pl,"P",{});var vQe=s(GL);plr=r(vQe,"This class cannot be instantiated directly using "),$be=n(vQe,"CODE",{});var lwt=s($be);_lr=r(lwt,"__init__()"),lwt.forEach(t),ulr=r(vQe," (throws an error)."),vQe.forEach(t),blr=i(pl),vt=n(pl,"DIV",{class:!0});var qw=s(vt);T(OL.$$.fragment,qw),vlr=i(qw),kbe=n(qw,"P",{});var iwt=s(kbe);Flr=r(iwt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),iwt.forEach(t),Tlr=i(qw),Cd=n(qw,"P",{});var Fte=s(Cd);Mlr=r(Fte,`Note:
Loading a model from its configuration file does `),Sbe=n(Fte,"STRONG",{});var dwt=s(Sbe);Elr=r(dwt,"not"),dwt.forEach(t),Clr=r(Fte,` load the model weights. It only affects the
model\u2019s configuration. Use `),RQ=n(Fte,"A",{href:!0});var cwt=s(RQ);wlr=r(cwt,"from_pretrained()"),cwt.forEach(t),Alr=r(Fte," to load the model weights."),Fte.forEach(t),Llr=i(qw),T(CT.$$.fragment,qw),qw.forEach(t),ylr=i(pl),io=n(pl,"DIV",{class:!0});var va=s(io);T(VL.$$.fragment,va),xlr=i(va),Rbe=n(va,"P",{});var fwt=s(Rbe);$lr=r(fwt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),fwt.forEach(t),klr=i(va),Qa=n(va,"P",{});var jw=s(Qa);Slr=r(jw,"The model class to instantiate is selected based on the "),Pbe=n(jw,"CODE",{});var mwt=s(Pbe);Rlr=r(mwt,"model_type"),mwt.forEach(t),Plr=r(jw,` property of the config object (either
passed as an argument or loaded from `),Bbe=n(jw,"CODE",{});var gwt=s(Bbe);Blr=r(gwt,"pretrained_model_name_or_path"),gwt.forEach(t),Ilr=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ibe=n(jw,"CODE",{});var hwt=s(Ibe);Nlr=r(hwt,"pretrained_model_name_or_path"),hwt.forEach(t),qlr=r(jw,":"),jw.forEach(t),jlr=i(va),ve=n(va,"UL",{});var Te=s(ve);wT=n(Te,"LI",{});var vNe=s(wT);Nbe=n(vNe,"STRONG",{});var pwt=s(Nbe);Dlr=r(pwt,"beit"),pwt.forEach(t),Glr=r(vNe," \u2014 "),PQ=n(vNe,"A",{href:!0});var _wt=s(PQ);Olr=r(_wt,"BeitForImageClassification"),_wt.forEach(t),Vlr=r(vNe," (BEiT model)"),vNe.forEach(t),Xlr=i(Te),AT=n(Te,"LI",{});var FNe=s(AT);qbe=n(FNe,"STRONG",{});var uwt=s(qbe);zlr=r(uwt,"convnext"),uwt.forEach(t),Wlr=r(FNe," \u2014 "),BQ=n(FNe,"A",{href:!0});var bwt=s(BQ);Qlr=r(bwt,"ConvNextForImageClassification"),bwt.forEach(t),Hlr=r(FNe," (ConvNeXT model)"),FNe.forEach(t),Ulr=i(Te),LT=n(Te,"LI",{});var TNe=s(LT);jbe=n(TNe,"STRONG",{});var vwt=s(jbe);Jlr=r(vwt,"cvt"),vwt.forEach(t),Ylr=r(TNe," \u2014 "),IQ=n(TNe,"A",{href:!0});var Fwt=s(IQ);Klr=r(Fwt,"CvtForImageClassification"),Fwt.forEach(t),Zlr=r(TNe," (CvT model)"),TNe.forEach(t),eir=i(Te),yT=n(Te,"LI",{});var MNe=s(yT);Dbe=n(MNe,"STRONG",{});var Twt=s(Dbe);oir=r(Twt,"data2vec-vision"),Twt.forEach(t),rir=r(MNe," \u2014 "),NQ=n(MNe,"A",{href:!0});var Mwt=s(NQ);tir=r(Mwt,"Data2VecVisionForImageClassification"),Mwt.forEach(t),air=r(MNe," (Data2VecVision model)"),MNe.forEach(t),nir=i(Te),Js=n(Te,"LI",{});var GS=s(Js);Gbe=n(GS,"STRONG",{});var Ewt=s(Gbe);sir=r(Ewt,"deit"),Ewt.forEach(t),lir=r(GS," \u2014 "),qQ=n(GS,"A",{href:!0});var Cwt=s(qQ);iir=r(Cwt,"DeiTForImageClassification"),Cwt.forEach(t),dir=r(GS," or "),jQ=n(GS,"A",{href:!0});var wwt=s(jQ);cir=r(wwt,"DeiTForImageClassificationWithTeacher"),wwt.forEach(t),fir=r(GS," (DeiT model)"),GS.forEach(t),mir=i(Te),xT=n(Te,"LI",{});var ENe=s(xT);Obe=n(ENe,"STRONG",{});var Awt=s(Obe);gir=r(Awt,"imagegpt"),Awt.forEach(t),hir=r(ENe," \u2014 "),DQ=n(ENe,"A",{href:!0});var Lwt=s(DQ);pir=r(Lwt,"ImageGPTForImageClassification"),Lwt.forEach(t),_ir=r(ENe," (ImageGPT model)"),ENe.forEach(t),uir=i(Te),Ys=n(Te,"LI",{});var OS=s(Ys);Vbe=n(OS,"STRONG",{});var ywt=s(Vbe);bir=r(ywt,"levit"),ywt.forEach(t),vir=r(OS," \u2014 "),GQ=n(OS,"A",{href:!0});var xwt=s(GQ);Fir=r(xwt,"LevitForImageClassification"),xwt.forEach(t),Tir=r(OS," or "),OQ=n(OS,"A",{href:!0});var $wt=s(OQ);Mir=r($wt,"LevitForImageClassificationWithTeacher"),$wt.forEach(t),Eir=r(OS," (LeViT model)"),OS.forEach(t),Cir=i(Te),$T=n(Te,"LI",{});var CNe=s($T);Xbe=n(CNe,"STRONG",{});var kwt=s(Xbe);wir=r(kwt,"mobilevit"),kwt.forEach(t),Air=r(CNe," \u2014 "),VQ=n(CNe,"A",{href:!0});var Swt=s(VQ);Lir=r(Swt,"MobileViTForImageClassification"),Swt.forEach(t),yir=r(CNe," (MobileViT model)"),CNe.forEach(t),xir=i(Te),Ft=n(Te,"LI",{});var Bf=s(Ft);zbe=n(Bf,"STRONG",{});var Rwt=s(zbe);$ir=r(Rwt,"perceiver"),Rwt.forEach(t),kir=r(Bf," \u2014 "),XQ=n(Bf,"A",{href:!0});var Pwt=s(XQ);Sir=r(Pwt,"PerceiverForImageClassificationLearned"),Pwt.forEach(t),Rir=r(Bf," or "),zQ=n(Bf,"A",{href:!0});var Bwt=s(zQ);Pir=r(Bwt,"PerceiverForImageClassificationFourier"),Bwt.forEach(t),Bir=r(Bf," or "),WQ=n(Bf,"A",{href:!0});var Iwt=s(WQ);Iir=r(Iwt,"PerceiverForImageClassificationConvProcessing"),Iwt.forEach(t),Nir=r(Bf," (Perceiver model)"),Bf.forEach(t),qir=i(Te),kT=n(Te,"LI",{});var wNe=s(kT);Wbe=n(wNe,"STRONG",{});var Nwt=s(Wbe);jir=r(Nwt,"poolformer"),Nwt.forEach(t),Dir=r(wNe," \u2014 "),QQ=n(wNe,"A",{href:!0});var qwt=s(QQ);Gir=r(qwt,"PoolFormerForImageClassification"),qwt.forEach(t),Oir=r(wNe," (PoolFormer model)"),wNe.forEach(t),Vir=i(Te),ST=n(Te,"LI",{});var ANe=s(ST);Qbe=n(ANe,"STRONG",{});var jwt=s(Qbe);Xir=r(jwt,"regnet"),jwt.forEach(t),zir=r(ANe," \u2014 "),HQ=n(ANe,"A",{href:!0});var Dwt=s(HQ);Wir=r(Dwt,"RegNetForImageClassification"),Dwt.forEach(t),Qir=r(ANe," (RegNet model)"),ANe.forEach(t),Hir=i(Te),RT=n(Te,"LI",{});var LNe=s(RT);Hbe=n(LNe,"STRONG",{});var Gwt=s(Hbe);Uir=r(Gwt,"resnet"),Gwt.forEach(t),Jir=r(LNe," \u2014 "),UQ=n(LNe,"A",{href:!0});var Owt=s(UQ);Yir=r(Owt,"ResNetForImageClassification"),Owt.forEach(t),Kir=r(LNe," (ResNet model)"),LNe.forEach(t),Zir=i(Te),PT=n(Te,"LI",{});var yNe=s(PT);Ube=n(yNe,"STRONG",{});var Vwt=s(Ube);edr=r(Vwt,"segformer"),Vwt.forEach(t),odr=r(yNe," \u2014 "),JQ=n(yNe,"A",{href:!0});var Xwt=s(JQ);rdr=r(Xwt,"SegformerForImageClassification"),Xwt.forEach(t),tdr=r(yNe," (SegFormer model)"),yNe.forEach(t),adr=i(Te),BT=n(Te,"LI",{});var xNe=s(BT);Jbe=n(xNe,"STRONG",{});var zwt=s(Jbe);ndr=r(zwt,"swin"),zwt.forEach(t),sdr=r(xNe," \u2014 "),YQ=n(xNe,"A",{href:!0});var Wwt=s(YQ);ldr=r(Wwt,"SwinForImageClassification"),Wwt.forEach(t),idr=r(xNe," (Swin Transformer model)"),xNe.forEach(t),ddr=i(Te),IT=n(Te,"LI",{});var $Ne=s(IT);Ybe=n($Ne,"STRONG",{});var Qwt=s(Ybe);cdr=r(Qwt,"van"),Qwt.forEach(t),fdr=r($Ne," \u2014 "),KQ=n($Ne,"A",{href:!0});var Hwt=s(KQ);mdr=r(Hwt,"VanForImageClassification"),Hwt.forEach(t),gdr=r($Ne," (VAN model)"),$Ne.forEach(t),hdr=i(Te),NT=n(Te,"LI",{});var kNe=s(NT);Kbe=n(kNe,"STRONG",{});var Uwt=s(Kbe);pdr=r(Uwt,"vit"),Uwt.forEach(t),_dr=r(kNe," \u2014 "),ZQ=n(kNe,"A",{href:!0});var Jwt=s(ZQ);udr=r(Jwt,"ViTForImageClassification"),Jwt.forEach(t),bdr=r(kNe," (ViT model)"),kNe.forEach(t),Te.forEach(t),vdr=i(va),qT=n(va,"P",{});var SNe=s(qT);Fdr=r(SNe,"The model is set in evaluation mode by default using "),Zbe=n(SNe,"CODE",{});var Ywt=s(Zbe);Tdr=r(Ywt,"model.eval()"),Ywt.forEach(t),Mdr=r(SNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e3e=n(SNe,"CODE",{});var Kwt=s(e3e);Edr=r(Kwt,"model.train()"),Kwt.forEach(t),SNe.forEach(t),Cdr=i(va),T(jT.$$.fragment,va),va.forEach(t),pl.forEach(t),hze=i(f),wd=n(f,"H2",{class:!0});var FQe=s(wd);DT=n(FQe,"A",{id:!0,class:!0,href:!0});var Zwt=s(DT);o3e=n(Zwt,"SPAN",{});var eAt=s(o3e);T(XL.$$.fragment,eAt),eAt.forEach(t),Zwt.forEach(t),wdr=i(FQe),r3e=n(FQe,"SPAN",{});var oAt=s(r3e);Adr=r(oAt,"AutoModelForVision2Seq"),oAt.forEach(t),FQe.forEach(t),pze=i(f),Vo=n(f,"DIV",{class:!0});var _l=s(Vo);T(zL.$$.fragment,_l),Ldr=i(_l),Ad=n(_l,"P",{});var Tte=s(Ad);ydr=r(Tte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),eH=n(Tte,"A",{href:!0});var rAt=s(eH);xdr=r(rAt,"from_pretrained()"),rAt.forEach(t),$dr=r(Tte," class method or the "),oH=n(Tte,"A",{href:!0});var tAt=s(oH);kdr=r(tAt,"from_config()"),tAt.forEach(t),Sdr=r(Tte,` class
method.`),Tte.forEach(t),Rdr=i(_l),WL=n(_l,"P",{});var TQe=s(WL);Pdr=r(TQe,"This class cannot be instantiated directly using "),t3e=n(TQe,"CODE",{});var aAt=s(t3e);Bdr=r(aAt,"__init__()"),aAt.forEach(t),Idr=r(TQe," (throws an error)."),TQe.forEach(t),Ndr=i(_l),Tt=n(_l,"DIV",{class:!0});var Dw=s(Tt);T(QL.$$.fragment,Dw),qdr=i(Dw),a3e=n(Dw,"P",{});var nAt=s(a3e);jdr=r(nAt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),nAt.forEach(t),Ddr=i(Dw),Ld=n(Dw,"P",{});var Mte=s(Ld);Gdr=r(Mte,`Note:
Loading a model from its configuration file does `),n3e=n(Mte,"STRONG",{});var sAt=s(n3e);Odr=r(sAt,"not"),sAt.forEach(t),Vdr=r(Mte,` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=n(Mte,"A",{href:!0});var lAt=s(rH);Xdr=r(lAt,"from_pretrained()"),lAt.forEach(t),zdr=r(Mte," to load the model weights."),Mte.forEach(t),Wdr=i(Dw),T(GT.$$.fragment,Dw),Dw.forEach(t),Qdr=i(_l),co=n(_l,"DIV",{class:!0});var Fa=s(co);T(HL.$$.fragment,Fa),Hdr=i(Fa),s3e=n(Fa,"P",{});var iAt=s(s3e);Udr=r(iAt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),iAt.forEach(t),Jdr=i(Fa),Ha=n(Fa,"P",{});var Gw=s(Ha);Ydr=r(Gw,"The model class to instantiate is selected based on the "),l3e=n(Gw,"CODE",{});var dAt=s(l3e);Kdr=r(dAt,"model_type"),dAt.forEach(t),Zdr=r(Gw,` property of the config object (either
passed as an argument or loaded from `),i3e=n(Gw,"CODE",{});var cAt=s(i3e);ecr=r(cAt,"pretrained_model_name_or_path"),cAt.forEach(t),ocr=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d3e=n(Gw,"CODE",{});var fAt=s(d3e);rcr=r(fAt,"pretrained_model_name_or_path"),fAt.forEach(t),tcr=r(Gw,":"),Gw.forEach(t),acr=i(Fa),c3e=n(Fa,"UL",{});var mAt=s(c3e);OT=n(mAt,"LI",{});var RNe=s(OT);f3e=n(RNe,"STRONG",{});var gAt=s(f3e);ncr=r(gAt,"vision-encoder-decoder"),gAt.forEach(t),scr=r(RNe," \u2014 "),tH=n(RNe,"A",{href:!0});var hAt=s(tH);lcr=r(hAt,"VisionEncoderDecoderModel"),hAt.forEach(t),icr=r(RNe," (Vision Encoder decoder model)"),RNe.forEach(t),mAt.forEach(t),dcr=i(Fa),VT=n(Fa,"P",{});var PNe=s(VT);ccr=r(PNe,"The model is set in evaluation mode by default using "),m3e=n(PNe,"CODE",{});var pAt=s(m3e);fcr=r(pAt,"model.eval()"),pAt.forEach(t),mcr=r(PNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g3e=n(PNe,"CODE",{});var _At=s(g3e);gcr=r(_At,"model.train()"),_At.forEach(t),PNe.forEach(t),hcr=i(Fa),T(XT.$$.fragment,Fa),Fa.forEach(t),_l.forEach(t),_ze=i(f),yd=n(f,"H2",{class:!0});var MQe=s(yd);zT=n(MQe,"A",{id:!0,class:!0,href:!0});var uAt=s(zT);h3e=n(uAt,"SPAN",{});var bAt=s(h3e);T(UL.$$.fragment,bAt),bAt.forEach(t),uAt.forEach(t),pcr=i(MQe),p3e=n(MQe,"SPAN",{});var vAt=s(p3e);_cr=r(vAt,"AutoModelForVisualQuestionAnswering"),vAt.forEach(t),MQe.forEach(t),uze=i(f),Xo=n(f,"DIV",{class:!0});var ul=s(Xo);T(JL.$$.fragment,ul),ucr=i(ul),xd=n(ul,"P",{});var Ete=s(xd);bcr=r(Ete,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),aH=n(Ete,"A",{href:!0});var FAt=s(aH);vcr=r(FAt,"from_pretrained()"),FAt.forEach(t),Fcr=r(Ete," class method or the "),nH=n(Ete,"A",{href:!0});var TAt=s(nH);Tcr=r(TAt,"from_config()"),TAt.forEach(t),Mcr=r(Ete,` class
method.`),Ete.forEach(t),Ecr=i(ul),YL=n(ul,"P",{});var EQe=s(YL);Ccr=r(EQe,"This class cannot be instantiated directly using "),_3e=n(EQe,"CODE",{});var MAt=s(_3e);wcr=r(MAt,"__init__()"),MAt.forEach(t),Acr=r(EQe," (throws an error)."),EQe.forEach(t),Lcr=i(ul),Mt=n(ul,"DIV",{class:!0});var Ow=s(Mt);T(KL.$$.fragment,Ow),ycr=i(Ow),u3e=n(Ow,"P",{});var EAt=s(u3e);xcr=r(EAt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),EAt.forEach(t),$cr=i(Ow),$d=n(Ow,"P",{});var Cte=s($d);kcr=r(Cte,`Note:
Loading a model from its configuration file does `),b3e=n(Cte,"STRONG",{});var CAt=s(b3e);Scr=r(CAt,"not"),CAt.forEach(t),Rcr=r(Cte,` load the model weights. It only affects the
model\u2019s configuration. Use `),sH=n(Cte,"A",{href:!0});var wAt=s(sH);Pcr=r(wAt,"from_pretrained()"),wAt.forEach(t),Bcr=r(Cte," to load the model weights."),Cte.forEach(t),Icr=i(Ow),T(WT.$$.fragment,Ow),Ow.forEach(t),Ncr=i(ul),fo=n(ul,"DIV",{class:!0});var Ta=s(fo);T(ZL.$$.fragment,Ta),qcr=i(Ta),v3e=n(Ta,"P",{});var AAt=s(v3e);jcr=r(AAt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),AAt.forEach(t),Dcr=i(Ta),Ua=n(Ta,"P",{});var Vw=s(Ua);Gcr=r(Vw,"The model class to instantiate is selected based on the "),F3e=n(Vw,"CODE",{});var LAt=s(F3e);Ocr=r(LAt,"model_type"),LAt.forEach(t),Vcr=r(Vw,` property of the config object (either
passed as an argument or loaded from `),T3e=n(Vw,"CODE",{});var yAt=s(T3e);Xcr=r(yAt,"pretrained_model_name_or_path"),yAt.forEach(t),zcr=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M3e=n(Vw,"CODE",{});var xAt=s(M3e);Wcr=r(xAt,"pretrained_model_name_or_path"),xAt.forEach(t),Qcr=r(Vw,":"),Vw.forEach(t),Hcr=i(Ta),E3e=n(Ta,"UL",{});var $At=s(E3e);QT=n($At,"LI",{});var BNe=s(QT);C3e=n(BNe,"STRONG",{});var kAt=s(C3e);Ucr=r(kAt,"vilt"),kAt.forEach(t),Jcr=r(BNe," \u2014 "),lH=n(BNe,"A",{href:!0});var SAt=s(lH);Ycr=r(SAt,"ViltForQuestionAnswering"),SAt.forEach(t),Kcr=r(BNe," (ViLT model)"),BNe.forEach(t),$At.forEach(t),Zcr=i(Ta),HT=n(Ta,"P",{});var INe=s(HT);efr=r(INe,"The model is set in evaluation mode by default using "),w3e=n(INe,"CODE",{});var RAt=s(w3e);ofr=r(RAt,"model.eval()"),RAt.forEach(t),rfr=r(INe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A3e=n(INe,"CODE",{});var PAt=s(A3e);tfr=r(PAt,"model.train()"),PAt.forEach(t),INe.forEach(t),afr=i(Ta),T(UT.$$.fragment,Ta),Ta.forEach(t),ul.forEach(t),bze=i(f),kd=n(f,"H2",{class:!0});var CQe=s(kd);JT=n(CQe,"A",{id:!0,class:!0,href:!0});var BAt=s(JT);L3e=n(BAt,"SPAN",{});var IAt=s(L3e);T(ey.$$.fragment,IAt),IAt.forEach(t),BAt.forEach(t),nfr=i(CQe),y3e=n(CQe,"SPAN",{});var NAt=s(y3e);sfr=r(NAt,"AutoModelForAudioClassification"),NAt.forEach(t),CQe.forEach(t),vze=i(f),zo=n(f,"DIV",{class:!0});var bl=s(zo);T(oy.$$.fragment,bl),lfr=i(bl),Sd=n(bl,"P",{});var wte=s(Sd);ifr=r(wte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),iH=n(wte,"A",{href:!0});var qAt=s(iH);dfr=r(qAt,"from_pretrained()"),qAt.forEach(t),cfr=r(wte," class method or the "),dH=n(wte,"A",{href:!0});var jAt=s(dH);ffr=r(jAt,"from_config()"),jAt.forEach(t),mfr=r(wte,` class
method.`),wte.forEach(t),gfr=i(bl),ry=n(bl,"P",{});var wQe=s(ry);hfr=r(wQe,"This class cannot be instantiated directly using "),x3e=n(wQe,"CODE",{});var DAt=s(x3e);pfr=r(DAt,"__init__()"),DAt.forEach(t),_fr=r(wQe," (throws an error)."),wQe.forEach(t),ufr=i(bl),Et=n(bl,"DIV",{class:!0});var Xw=s(Et);T(ty.$$.fragment,Xw),bfr=i(Xw),$3e=n(Xw,"P",{});var GAt=s($3e);vfr=r(GAt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),GAt.forEach(t),Ffr=i(Xw),Rd=n(Xw,"P",{});var Ate=s(Rd);Tfr=r(Ate,`Note:
Loading a model from its configuration file does `),k3e=n(Ate,"STRONG",{});var OAt=s(k3e);Mfr=r(OAt,"not"),OAt.forEach(t),Efr=r(Ate,` load the model weights. It only affects the
model\u2019s configuration. Use `),cH=n(Ate,"A",{href:!0});var VAt=s(cH);Cfr=r(VAt,"from_pretrained()"),VAt.forEach(t),wfr=r(Ate," to load the model weights."),Ate.forEach(t),Afr=i(Xw),T(YT.$$.fragment,Xw),Xw.forEach(t),Lfr=i(bl),mo=n(bl,"DIV",{class:!0});var Ma=s(mo);T(ay.$$.fragment,Ma),yfr=i(Ma),S3e=n(Ma,"P",{});var XAt=s(S3e);xfr=r(XAt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),XAt.forEach(t),$fr=i(Ma),Ja=n(Ma,"P",{});var zw=s(Ja);kfr=r(zw,"The model class to instantiate is selected based on the "),R3e=n(zw,"CODE",{});var zAt=s(R3e);Sfr=r(zAt,"model_type"),zAt.forEach(t),Rfr=r(zw,` property of the config object (either
passed as an argument or loaded from `),P3e=n(zw,"CODE",{});var WAt=s(P3e);Pfr=r(WAt,"pretrained_model_name_or_path"),WAt.forEach(t),Bfr=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B3e=n(zw,"CODE",{});var QAt=s(B3e);Ifr=r(QAt,"pretrained_model_name_or_path"),QAt.forEach(t),Nfr=r(zw,":"),zw.forEach(t),qfr=i(Ma),Pe=n(Ma,"UL",{});var ze=s(Pe);KT=n(ze,"LI",{});var NNe=s(KT);I3e=n(NNe,"STRONG",{});var HAt=s(I3e);jfr=r(HAt,"data2vec-audio"),HAt.forEach(t),Dfr=r(NNe," \u2014 "),fH=n(NNe,"A",{href:!0});var UAt=s(fH);Gfr=r(UAt,"Data2VecAudioForSequenceClassification"),UAt.forEach(t),Ofr=r(NNe," (Data2VecAudio model)"),NNe.forEach(t),Vfr=i(ze),ZT=n(ze,"LI",{});var qNe=s(ZT);N3e=n(qNe,"STRONG",{});var JAt=s(N3e);Xfr=r(JAt,"hubert"),JAt.forEach(t),zfr=r(qNe," \u2014 "),mH=n(qNe,"A",{href:!0});var YAt=s(mH);Wfr=r(YAt,"HubertForSequenceClassification"),YAt.forEach(t),Qfr=r(qNe," (Hubert model)"),qNe.forEach(t),Hfr=i(ze),e7=n(ze,"LI",{});var jNe=s(e7);q3e=n(jNe,"STRONG",{});var KAt=s(q3e);Ufr=r(KAt,"sew"),KAt.forEach(t),Jfr=r(jNe," \u2014 "),gH=n(jNe,"A",{href:!0});var ZAt=s(gH);Yfr=r(ZAt,"SEWForSequenceClassification"),ZAt.forEach(t),Kfr=r(jNe," (SEW model)"),jNe.forEach(t),Zfr=i(ze),o7=n(ze,"LI",{});var DNe=s(o7);j3e=n(DNe,"STRONG",{});var e6t=s(j3e);emr=r(e6t,"sew-d"),e6t.forEach(t),omr=r(DNe," \u2014 "),hH=n(DNe,"A",{href:!0});var o6t=s(hH);rmr=r(o6t,"SEWDForSequenceClassification"),o6t.forEach(t),tmr=r(DNe," (SEW-D model)"),DNe.forEach(t),amr=i(ze),r7=n(ze,"LI",{});var GNe=s(r7);D3e=n(GNe,"STRONG",{});var r6t=s(D3e);nmr=r(r6t,"unispeech"),r6t.forEach(t),smr=r(GNe," \u2014 "),pH=n(GNe,"A",{href:!0});var t6t=s(pH);lmr=r(t6t,"UniSpeechForSequenceClassification"),t6t.forEach(t),imr=r(GNe," (UniSpeech model)"),GNe.forEach(t),dmr=i(ze),t7=n(ze,"LI",{});var ONe=s(t7);G3e=n(ONe,"STRONG",{});var a6t=s(G3e);cmr=r(a6t,"unispeech-sat"),a6t.forEach(t),fmr=r(ONe," \u2014 "),_H=n(ONe,"A",{href:!0});var n6t=s(_H);mmr=r(n6t,"UniSpeechSatForSequenceClassification"),n6t.forEach(t),gmr=r(ONe," (UniSpeechSat model)"),ONe.forEach(t),hmr=i(ze),a7=n(ze,"LI",{});var VNe=s(a7);O3e=n(VNe,"STRONG",{});var s6t=s(O3e);pmr=r(s6t,"wav2vec2"),s6t.forEach(t),_mr=r(VNe," \u2014 "),uH=n(VNe,"A",{href:!0});var l6t=s(uH);umr=r(l6t,"Wav2Vec2ForSequenceClassification"),l6t.forEach(t),bmr=r(VNe," (Wav2Vec2 model)"),VNe.forEach(t),vmr=i(ze),n7=n(ze,"LI",{});var XNe=s(n7);V3e=n(XNe,"STRONG",{});var i6t=s(V3e);Fmr=r(i6t,"wav2vec2-conformer"),i6t.forEach(t),Tmr=r(XNe," \u2014 "),bH=n(XNe,"A",{href:!0});var d6t=s(bH);Mmr=r(d6t,"Wav2Vec2ConformerForSequenceClassification"),d6t.forEach(t),Emr=r(XNe," (Wav2Vec2-Conformer model)"),XNe.forEach(t),Cmr=i(ze),s7=n(ze,"LI",{});var zNe=s(s7);X3e=n(zNe,"STRONG",{});var c6t=s(X3e);wmr=r(c6t,"wavlm"),c6t.forEach(t),Amr=r(zNe," \u2014 "),vH=n(zNe,"A",{href:!0});var f6t=s(vH);Lmr=r(f6t,"WavLMForSequenceClassification"),f6t.forEach(t),ymr=r(zNe," (WavLM model)"),zNe.forEach(t),ze.forEach(t),xmr=i(Ma),l7=n(Ma,"P",{});var WNe=s(l7);$mr=r(WNe,"The model is set in evaluation mode by default using "),z3e=n(WNe,"CODE",{});var m6t=s(z3e);kmr=r(m6t,"model.eval()"),m6t.forEach(t),Smr=r(WNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W3e=n(WNe,"CODE",{});var g6t=s(W3e);Rmr=r(g6t,"model.train()"),g6t.forEach(t),WNe.forEach(t),Pmr=i(Ma),T(i7.$$.fragment,Ma),Ma.forEach(t),bl.forEach(t),Fze=i(f),Pd=n(f,"H2",{class:!0});var AQe=s(Pd);d7=n(AQe,"A",{id:!0,class:!0,href:!0});var h6t=s(d7);Q3e=n(h6t,"SPAN",{});var p6t=s(Q3e);T(ny.$$.fragment,p6t),p6t.forEach(t),h6t.forEach(t),Bmr=i(AQe),H3e=n(AQe,"SPAN",{});var _6t=s(H3e);Imr=r(_6t,"AutoModelForAudioFrameClassification"),_6t.forEach(t),AQe.forEach(t),Tze=i(f),Wo=n(f,"DIV",{class:!0});var vl=s(Wo);T(sy.$$.fragment,vl),Nmr=i(vl),Bd=n(vl,"P",{});var Lte=s(Bd);qmr=r(Lte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),FH=n(Lte,"A",{href:!0});var u6t=s(FH);jmr=r(u6t,"from_pretrained()"),u6t.forEach(t),Dmr=r(Lte," class method or the "),TH=n(Lte,"A",{href:!0});var b6t=s(TH);Gmr=r(b6t,"from_config()"),b6t.forEach(t),Omr=r(Lte,` class
method.`),Lte.forEach(t),Vmr=i(vl),ly=n(vl,"P",{});var LQe=s(ly);Xmr=r(LQe,"This class cannot be instantiated directly using "),U3e=n(LQe,"CODE",{});var v6t=s(U3e);zmr=r(v6t,"__init__()"),v6t.forEach(t),Wmr=r(LQe," (throws an error)."),LQe.forEach(t),Qmr=i(vl),Ct=n(vl,"DIV",{class:!0});var Ww=s(Ct);T(iy.$$.fragment,Ww),Hmr=i(Ww),J3e=n(Ww,"P",{});var F6t=s(J3e);Umr=r(F6t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),F6t.forEach(t),Jmr=i(Ww),Id=n(Ww,"P",{});var yte=s(Id);Ymr=r(yte,`Note:
Loading a model from its configuration file does `),Y3e=n(yte,"STRONG",{});var T6t=s(Y3e);Kmr=r(T6t,"not"),T6t.forEach(t),Zmr=r(yte,` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=n(yte,"A",{href:!0});var M6t=s(MH);egr=r(M6t,"from_pretrained()"),M6t.forEach(t),ogr=r(yte," to load the model weights."),yte.forEach(t),rgr=i(Ww),T(c7.$$.fragment,Ww),Ww.forEach(t),tgr=i(vl),go=n(vl,"DIV",{class:!0});var Ea=s(go);T(dy.$$.fragment,Ea),agr=i(Ea),K3e=n(Ea,"P",{});var E6t=s(K3e);ngr=r(E6t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),E6t.forEach(t),sgr=i(Ea),Ya=n(Ea,"P",{});var Qw=s(Ya);lgr=r(Qw,"The model class to instantiate is selected based on the "),Z3e=n(Qw,"CODE",{});var C6t=s(Z3e);igr=r(C6t,"model_type"),C6t.forEach(t),dgr=r(Qw,` property of the config object (either
passed as an argument or loaded from `),eve=n(Qw,"CODE",{});var w6t=s(eve);cgr=r(w6t,"pretrained_model_name_or_path"),w6t.forEach(t),fgr=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ove=n(Qw,"CODE",{});var A6t=s(ove);mgr=r(A6t,"pretrained_model_name_or_path"),A6t.forEach(t),ggr=r(Qw,":"),Qw.forEach(t),hgr=i(Ea),rt=n(Ea,"UL",{});var Fl=s(rt);f7=n(Fl,"LI",{});var QNe=s(f7);rve=n(QNe,"STRONG",{});var L6t=s(rve);pgr=r(L6t,"data2vec-audio"),L6t.forEach(t),_gr=r(QNe," \u2014 "),EH=n(QNe,"A",{href:!0});var y6t=s(EH);ugr=r(y6t,"Data2VecAudioForAudioFrameClassification"),y6t.forEach(t),bgr=r(QNe," (Data2VecAudio model)"),QNe.forEach(t),vgr=i(Fl),m7=n(Fl,"LI",{});var HNe=s(m7);tve=n(HNe,"STRONG",{});var x6t=s(tve);Fgr=r(x6t,"unispeech-sat"),x6t.forEach(t),Tgr=r(HNe," \u2014 "),CH=n(HNe,"A",{href:!0});var $6t=s(CH);Mgr=r($6t,"UniSpeechSatForAudioFrameClassification"),$6t.forEach(t),Egr=r(HNe," (UniSpeechSat model)"),HNe.forEach(t),Cgr=i(Fl),g7=n(Fl,"LI",{});var UNe=s(g7);ave=n(UNe,"STRONG",{});var k6t=s(ave);wgr=r(k6t,"wav2vec2"),k6t.forEach(t),Agr=r(UNe," \u2014 "),wH=n(UNe,"A",{href:!0});var S6t=s(wH);Lgr=r(S6t,"Wav2Vec2ForAudioFrameClassification"),S6t.forEach(t),ygr=r(UNe," (Wav2Vec2 model)"),UNe.forEach(t),xgr=i(Fl),h7=n(Fl,"LI",{});var JNe=s(h7);nve=n(JNe,"STRONG",{});var R6t=s(nve);$gr=r(R6t,"wav2vec2-conformer"),R6t.forEach(t),kgr=r(JNe," \u2014 "),AH=n(JNe,"A",{href:!0});var P6t=s(AH);Sgr=r(P6t,"Wav2Vec2ConformerForAudioFrameClassification"),P6t.forEach(t),Rgr=r(JNe," (Wav2Vec2-Conformer model)"),JNe.forEach(t),Pgr=i(Fl),p7=n(Fl,"LI",{});var YNe=s(p7);sve=n(YNe,"STRONG",{});var B6t=s(sve);Bgr=r(B6t,"wavlm"),B6t.forEach(t),Igr=r(YNe," \u2014 "),LH=n(YNe,"A",{href:!0});var I6t=s(LH);Ngr=r(I6t,"WavLMForAudioFrameClassification"),I6t.forEach(t),qgr=r(YNe," (WavLM model)"),YNe.forEach(t),Fl.forEach(t),jgr=i(Ea),_7=n(Ea,"P",{});var KNe=s(_7);Dgr=r(KNe,"The model is set in evaluation mode by default using "),lve=n(KNe,"CODE",{});var N6t=s(lve);Ggr=r(N6t,"model.eval()"),N6t.forEach(t),Ogr=r(KNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ive=n(KNe,"CODE",{});var q6t=s(ive);Vgr=r(q6t,"model.train()"),q6t.forEach(t),KNe.forEach(t),Xgr=i(Ea),T(u7.$$.fragment,Ea),Ea.forEach(t),vl.forEach(t),Mze=i(f),Nd=n(f,"H2",{class:!0});var yQe=s(Nd);b7=n(yQe,"A",{id:!0,class:!0,href:!0});var j6t=s(b7);dve=n(j6t,"SPAN",{});var D6t=s(dve);T(cy.$$.fragment,D6t),D6t.forEach(t),j6t.forEach(t),zgr=i(yQe),cve=n(yQe,"SPAN",{});var G6t=s(cve);Wgr=r(G6t,"AutoModelForCTC"),G6t.forEach(t),yQe.forEach(t),Eze=i(f),Qo=n(f,"DIV",{class:!0});var Tl=s(Qo);T(fy.$$.fragment,Tl),Qgr=i(Tl),qd=n(Tl,"P",{});var xte=s(qd);Hgr=r(xte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),yH=n(xte,"A",{href:!0});var O6t=s(yH);Ugr=r(O6t,"from_pretrained()"),O6t.forEach(t),Jgr=r(xte," class method or the "),xH=n(xte,"A",{href:!0});var V6t=s(xH);Ygr=r(V6t,"from_config()"),V6t.forEach(t),Kgr=r(xte,` class
method.`),xte.forEach(t),Zgr=i(Tl),my=n(Tl,"P",{});var xQe=s(my);ehr=r(xQe,"This class cannot be instantiated directly using "),fve=n(xQe,"CODE",{});var X6t=s(fve);ohr=r(X6t,"__init__()"),X6t.forEach(t),rhr=r(xQe," (throws an error)."),xQe.forEach(t),thr=i(Tl),wt=n(Tl,"DIV",{class:!0});var Hw=s(wt);T(gy.$$.fragment,Hw),ahr=i(Hw),mve=n(Hw,"P",{});var z6t=s(mve);nhr=r(z6t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),z6t.forEach(t),shr=i(Hw),jd=n(Hw,"P",{});var $te=s(jd);lhr=r($te,`Note:
Loading a model from its configuration file does `),gve=n($te,"STRONG",{});var W6t=s(gve);ihr=r(W6t,"not"),W6t.forEach(t),dhr=r($te,` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=n($te,"A",{href:!0});var Q6t=s($H);chr=r(Q6t,"from_pretrained()"),Q6t.forEach(t),fhr=r($te," to load the model weights."),$te.forEach(t),mhr=i(Hw),T(v7.$$.fragment,Hw),Hw.forEach(t),ghr=i(Tl),ho=n(Tl,"DIV",{class:!0});var Ca=s(ho);T(hy.$$.fragment,Ca),hhr=i(Ca),hve=n(Ca,"P",{});var H6t=s(hve);phr=r(H6t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),H6t.forEach(t),_hr=i(Ca),Ka=n(Ca,"P",{});var Uw=s(Ka);uhr=r(Uw,"The model class to instantiate is selected based on the "),pve=n(Uw,"CODE",{});var U6t=s(pve);bhr=r(U6t,"model_type"),U6t.forEach(t),vhr=r(Uw,` property of the config object (either
passed as an argument or loaded from `),_ve=n(Uw,"CODE",{});var J6t=s(_ve);Fhr=r(J6t,"pretrained_model_name_or_path"),J6t.forEach(t),Thr=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uve=n(Uw,"CODE",{});var Y6t=s(uve);Mhr=r(Y6t,"pretrained_model_name_or_path"),Y6t.forEach(t),Ehr=r(Uw,":"),Uw.forEach(t),Chr=i(Ca),Le=n(Ca,"UL",{});var Be=s(Le);F7=n(Be,"LI",{});var ZNe=s(F7);bve=n(ZNe,"STRONG",{});var K6t=s(bve);whr=r(K6t,"data2vec-audio"),K6t.forEach(t),Ahr=r(ZNe," \u2014 "),kH=n(ZNe,"A",{href:!0});var Z6t=s(kH);Lhr=r(Z6t,"Data2VecAudioForCTC"),Z6t.forEach(t),yhr=r(ZNe," (Data2VecAudio model)"),ZNe.forEach(t),xhr=i(Be),T7=n(Be,"LI",{});var eqe=s(T7);vve=n(eqe,"STRONG",{});var eLt=s(vve);$hr=r(eLt,"hubert"),eLt.forEach(t),khr=r(eqe," \u2014 "),SH=n(eqe,"A",{href:!0});var oLt=s(SH);Shr=r(oLt,"HubertForCTC"),oLt.forEach(t),Rhr=r(eqe," (Hubert model)"),eqe.forEach(t),Phr=i(Be),M7=n(Be,"LI",{});var oqe=s(M7);Fve=n(oqe,"STRONG",{});var rLt=s(Fve);Bhr=r(rLt,"mctct"),rLt.forEach(t),Ihr=r(oqe," \u2014 "),RH=n(oqe,"A",{href:!0});var tLt=s(RH);Nhr=r(tLt,"MCTCTForCTC"),tLt.forEach(t),qhr=r(oqe," (M-CTC-T model)"),oqe.forEach(t),jhr=i(Be),E7=n(Be,"LI",{});var rqe=s(E7);Tve=n(rqe,"STRONG",{});var aLt=s(Tve);Dhr=r(aLt,"sew"),aLt.forEach(t),Ghr=r(rqe," \u2014 "),PH=n(rqe,"A",{href:!0});var nLt=s(PH);Ohr=r(nLt,"SEWForCTC"),nLt.forEach(t),Vhr=r(rqe," (SEW model)"),rqe.forEach(t),Xhr=i(Be),C7=n(Be,"LI",{});var tqe=s(C7);Mve=n(tqe,"STRONG",{});var sLt=s(Mve);zhr=r(sLt,"sew-d"),sLt.forEach(t),Whr=r(tqe," \u2014 "),BH=n(tqe,"A",{href:!0});var lLt=s(BH);Qhr=r(lLt,"SEWDForCTC"),lLt.forEach(t),Hhr=r(tqe," (SEW-D model)"),tqe.forEach(t),Uhr=i(Be),w7=n(Be,"LI",{});var aqe=s(w7);Eve=n(aqe,"STRONG",{});var iLt=s(Eve);Jhr=r(iLt,"unispeech"),iLt.forEach(t),Yhr=r(aqe," \u2014 "),IH=n(aqe,"A",{href:!0});var dLt=s(IH);Khr=r(dLt,"UniSpeechForCTC"),dLt.forEach(t),Zhr=r(aqe," (UniSpeech model)"),aqe.forEach(t),epr=i(Be),A7=n(Be,"LI",{});var nqe=s(A7);Cve=n(nqe,"STRONG",{});var cLt=s(Cve);opr=r(cLt,"unispeech-sat"),cLt.forEach(t),rpr=r(nqe," \u2014 "),NH=n(nqe,"A",{href:!0});var fLt=s(NH);tpr=r(fLt,"UniSpeechSatForCTC"),fLt.forEach(t),apr=r(nqe," (UniSpeechSat model)"),nqe.forEach(t),npr=i(Be),L7=n(Be,"LI",{});var sqe=s(L7);wve=n(sqe,"STRONG",{});var mLt=s(wve);spr=r(mLt,"wav2vec2"),mLt.forEach(t),lpr=r(sqe," \u2014 "),qH=n(sqe,"A",{href:!0});var gLt=s(qH);ipr=r(gLt,"Wav2Vec2ForCTC"),gLt.forEach(t),dpr=r(sqe," (Wav2Vec2 model)"),sqe.forEach(t),cpr=i(Be),y7=n(Be,"LI",{});var lqe=s(y7);Ave=n(lqe,"STRONG",{});var hLt=s(Ave);fpr=r(hLt,"wav2vec2-conformer"),hLt.forEach(t),mpr=r(lqe," \u2014 "),jH=n(lqe,"A",{href:!0});var pLt=s(jH);gpr=r(pLt,"Wav2Vec2ConformerForCTC"),pLt.forEach(t),hpr=r(lqe," (Wav2Vec2-Conformer model)"),lqe.forEach(t),ppr=i(Be),x7=n(Be,"LI",{});var iqe=s(x7);Lve=n(iqe,"STRONG",{});var _Lt=s(Lve);_pr=r(_Lt,"wavlm"),_Lt.forEach(t),upr=r(iqe," \u2014 "),DH=n(iqe,"A",{href:!0});var uLt=s(DH);bpr=r(uLt,"WavLMForCTC"),uLt.forEach(t),vpr=r(iqe," (WavLM model)"),iqe.forEach(t),Be.forEach(t),Fpr=i(Ca),$7=n(Ca,"P",{});var dqe=s($7);Tpr=r(dqe,"The model is set in evaluation mode by default using "),yve=n(dqe,"CODE",{});var bLt=s(yve);Mpr=r(bLt,"model.eval()"),bLt.forEach(t),Epr=r(dqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xve=n(dqe,"CODE",{});var vLt=s(xve);Cpr=r(vLt,"model.train()"),vLt.forEach(t),dqe.forEach(t),wpr=i(Ca),T(k7.$$.fragment,Ca),Ca.forEach(t),Tl.forEach(t),Cze=i(f),Dd=n(f,"H2",{class:!0});var $Qe=s(Dd);S7=n($Qe,"A",{id:!0,class:!0,href:!0});var FLt=s(S7);$ve=n(FLt,"SPAN",{});var TLt=s($ve);T(py.$$.fragment,TLt),TLt.forEach(t),FLt.forEach(t),Apr=i($Qe),kve=n($Qe,"SPAN",{});var MLt=s(kve);Lpr=r(MLt,"AutoModelForSpeechSeq2Seq"),MLt.forEach(t),$Qe.forEach(t),wze=i(f),Ho=n(f,"DIV",{class:!0});var Ml=s(Ho);T(_y.$$.fragment,Ml),ypr=i(Ml),Gd=n(Ml,"P",{});var kte=s(Gd);xpr=r(kte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),GH=n(kte,"A",{href:!0});var ELt=s(GH);$pr=r(ELt,"from_pretrained()"),ELt.forEach(t),kpr=r(kte," class method or the "),OH=n(kte,"A",{href:!0});var CLt=s(OH);Spr=r(CLt,"from_config()"),CLt.forEach(t),Rpr=r(kte,` class
method.`),kte.forEach(t),Ppr=i(Ml),uy=n(Ml,"P",{});var kQe=s(uy);Bpr=r(kQe,"This class cannot be instantiated directly using "),Sve=n(kQe,"CODE",{});var wLt=s(Sve);Ipr=r(wLt,"__init__()"),wLt.forEach(t),Npr=r(kQe," (throws an error)."),kQe.forEach(t),qpr=i(Ml),At=n(Ml,"DIV",{class:!0});var Jw=s(At);T(by.$$.fragment,Jw),jpr=i(Jw),Rve=n(Jw,"P",{});var ALt=s(Rve);Dpr=r(ALt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ALt.forEach(t),Gpr=i(Jw),Od=n(Jw,"P",{});var Ste=s(Od);Opr=r(Ste,`Note:
Loading a model from its configuration file does `),Pve=n(Ste,"STRONG",{});var LLt=s(Pve);Vpr=r(LLt,"not"),LLt.forEach(t),Xpr=r(Ste,` load the model weights. It only affects the
model\u2019s configuration. Use `),VH=n(Ste,"A",{href:!0});var yLt=s(VH);zpr=r(yLt,"from_pretrained()"),yLt.forEach(t),Wpr=r(Ste," to load the model weights."),Ste.forEach(t),Qpr=i(Jw),T(R7.$$.fragment,Jw),Jw.forEach(t),Hpr=i(Ml),po=n(Ml,"DIV",{class:!0});var wa=s(po);T(vy.$$.fragment,wa),Upr=i(wa),Bve=n(wa,"P",{});var xLt=s(Bve);Jpr=r(xLt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),xLt.forEach(t),Ypr=i(wa),Za=n(wa,"P",{});var Yw=s(Za);Kpr=r(Yw,"The model class to instantiate is selected based on the "),Ive=n(Yw,"CODE",{});var $Lt=s(Ive);Zpr=r($Lt,"model_type"),$Lt.forEach(t),e_r=r(Yw,` property of the config object (either
passed as an argument or loaded from `),Nve=n(Yw,"CODE",{});var kLt=s(Nve);o_r=r(kLt,"pretrained_model_name_or_path"),kLt.forEach(t),r_r=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qve=n(Yw,"CODE",{});var SLt=s(qve);t_r=r(SLt,"pretrained_model_name_or_path"),SLt.forEach(t),a_r=r(Yw,":"),Yw.forEach(t),n_r=i(wa),Fy=n(wa,"UL",{});var SQe=s(Fy);P7=n(SQe,"LI",{});var cqe=s(P7);jve=n(cqe,"STRONG",{});var RLt=s(jve);s_r=r(RLt,"speech-encoder-decoder"),RLt.forEach(t),l_r=r(cqe," \u2014 "),XH=n(cqe,"A",{href:!0});var PLt=s(XH);i_r=r(PLt,"SpeechEncoderDecoderModel"),PLt.forEach(t),d_r=r(cqe," (Speech Encoder decoder model)"),cqe.forEach(t),c_r=i(SQe),B7=n(SQe,"LI",{});var fqe=s(B7);Dve=n(fqe,"STRONG",{});var BLt=s(Dve);f_r=r(BLt,"speech_to_text"),BLt.forEach(t),m_r=r(fqe," \u2014 "),zH=n(fqe,"A",{href:!0});var ILt=s(zH);g_r=r(ILt,"Speech2TextForConditionalGeneration"),ILt.forEach(t),h_r=r(fqe," (Speech2Text model)"),fqe.forEach(t),SQe.forEach(t),p_r=i(wa),I7=n(wa,"P",{});var mqe=s(I7);__r=r(mqe,"The model is set in evaluation mode by default using "),Gve=n(mqe,"CODE",{});var NLt=s(Gve);u_r=r(NLt,"model.eval()"),NLt.forEach(t),b_r=r(mqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ove=n(mqe,"CODE",{});var qLt=s(Ove);v_r=r(qLt,"model.train()"),qLt.forEach(t),mqe.forEach(t),F_r=i(wa),T(N7.$$.fragment,wa),wa.forEach(t),Ml.forEach(t),Aze=i(f),Vd=n(f,"H2",{class:!0});var RQe=s(Vd);q7=n(RQe,"A",{id:!0,class:!0,href:!0});var jLt=s(q7);Vve=n(jLt,"SPAN",{});var DLt=s(Vve);T(Ty.$$.fragment,DLt),DLt.forEach(t),jLt.forEach(t),T_r=i(RQe),Xve=n(RQe,"SPAN",{});var GLt=s(Xve);M_r=r(GLt,"AutoModelForAudioXVector"),GLt.forEach(t),RQe.forEach(t),Lze=i(f),Uo=n(f,"DIV",{class:!0});var El=s(Uo);T(My.$$.fragment,El),E_r=i(El),Xd=n(El,"P",{});var Rte=s(Xd);C_r=r(Rte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),WH=n(Rte,"A",{href:!0});var OLt=s(WH);w_r=r(OLt,"from_pretrained()"),OLt.forEach(t),A_r=r(Rte," class method or the "),QH=n(Rte,"A",{href:!0});var VLt=s(QH);L_r=r(VLt,"from_config()"),VLt.forEach(t),y_r=r(Rte,` class
method.`),Rte.forEach(t),x_r=i(El),Ey=n(El,"P",{});var PQe=s(Ey);$_r=r(PQe,"This class cannot be instantiated directly using "),zve=n(PQe,"CODE",{});var XLt=s(zve);k_r=r(XLt,"__init__()"),XLt.forEach(t),S_r=r(PQe," (throws an error)."),PQe.forEach(t),R_r=i(El),Lt=n(El,"DIV",{class:!0});var Kw=s(Lt);T(Cy.$$.fragment,Kw),P_r=i(Kw),Wve=n(Kw,"P",{});var zLt=s(Wve);B_r=r(zLt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),zLt.forEach(t),I_r=i(Kw),zd=n(Kw,"P",{});var Pte=s(zd);N_r=r(Pte,`Note:
Loading a model from its configuration file does `),Qve=n(Pte,"STRONG",{});var WLt=s(Qve);q_r=r(WLt,"not"),WLt.forEach(t),j_r=r(Pte,` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=n(Pte,"A",{href:!0});var QLt=s(HH);D_r=r(QLt,"from_pretrained()"),QLt.forEach(t),G_r=r(Pte," to load the model weights."),Pte.forEach(t),O_r=i(Kw),T(j7.$$.fragment,Kw),Kw.forEach(t),V_r=i(El),_o=n(El,"DIV",{class:!0});var Aa=s(_o);T(wy.$$.fragment,Aa),X_r=i(Aa),Hve=n(Aa,"P",{});var HLt=s(Hve);z_r=r(HLt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),HLt.forEach(t),W_r=i(Aa),en=n(Aa,"P",{});var Zw=s(en);Q_r=r(Zw,"The model class to instantiate is selected based on the "),Uve=n(Zw,"CODE",{});var ULt=s(Uve);H_r=r(ULt,"model_type"),ULt.forEach(t),U_r=r(Zw,` property of the config object (either
passed as an argument or loaded from `),Jve=n(Zw,"CODE",{});var JLt=s(Jve);J_r=r(JLt,"pretrained_model_name_or_path"),JLt.forEach(t),Y_r=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=n(Zw,"CODE",{});var YLt=s(Yve);K_r=r(YLt,"pretrained_model_name_or_path"),YLt.forEach(t),Z_r=r(Zw,":"),Zw.forEach(t),eur=i(Aa),tt=n(Aa,"UL",{});var Cl=s(tt);D7=n(Cl,"LI",{});var gqe=s(D7);Kve=n(gqe,"STRONG",{});var KLt=s(Kve);our=r(KLt,"data2vec-audio"),KLt.forEach(t),rur=r(gqe," \u2014 "),UH=n(gqe,"A",{href:!0});var ZLt=s(UH);tur=r(ZLt,"Data2VecAudioForXVector"),ZLt.forEach(t),aur=r(gqe," (Data2VecAudio model)"),gqe.forEach(t),nur=i(Cl),G7=n(Cl,"LI",{});var hqe=s(G7);Zve=n(hqe,"STRONG",{});var eyt=s(Zve);sur=r(eyt,"unispeech-sat"),eyt.forEach(t),lur=r(hqe," \u2014 "),JH=n(hqe,"A",{href:!0});var oyt=s(JH);iur=r(oyt,"UniSpeechSatForXVector"),oyt.forEach(t),dur=r(hqe," (UniSpeechSat model)"),hqe.forEach(t),cur=i(Cl),O7=n(Cl,"LI",{});var pqe=s(O7);eFe=n(pqe,"STRONG",{});var ryt=s(eFe);fur=r(ryt,"wav2vec2"),ryt.forEach(t),mur=r(pqe," \u2014 "),YH=n(pqe,"A",{href:!0});var tyt=s(YH);gur=r(tyt,"Wav2Vec2ForXVector"),tyt.forEach(t),hur=r(pqe," (Wav2Vec2 model)"),pqe.forEach(t),pur=i(Cl),V7=n(Cl,"LI",{});var _qe=s(V7);oFe=n(_qe,"STRONG",{});var ayt=s(oFe);_ur=r(ayt,"wav2vec2-conformer"),ayt.forEach(t),uur=r(_qe," \u2014 "),KH=n(_qe,"A",{href:!0});var nyt=s(KH);bur=r(nyt,"Wav2Vec2ConformerForXVector"),nyt.forEach(t),vur=r(_qe," (Wav2Vec2-Conformer model)"),_qe.forEach(t),Fur=i(Cl),X7=n(Cl,"LI",{});var uqe=s(X7);rFe=n(uqe,"STRONG",{});var syt=s(rFe);Tur=r(syt,"wavlm"),syt.forEach(t),Mur=r(uqe," \u2014 "),ZH=n(uqe,"A",{href:!0});var lyt=s(ZH);Eur=r(lyt,"WavLMForXVector"),lyt.forEach(t),Cur=r(uqe," (WavLM model)"),uqe.forEach(t),Cl.forEach(t),wur=i(Aa),z7=n(Aa,"P",{});var bqe=s(z7);Aur=r(bqe,"The model is set in evaluation mode by default using "),tFe=n(bqe,"CODE",{});var iyt=s(tFe);Lur=r(iyt,"model.eval()"),iyt.forEach(t),yur=r(bqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aFe=n(bqe,"CODE",{});var dyt=s(aFe);xur=r(dyt,"model.train()"),dyt.forEach(t),bqe.forEach(t),$ur=i(Aa),T(W7.$$.fragment,Aa),Aa.forEach(t),El.forEach(t),yze=i(f),Wd=n(f,"H2",{class:!0});var BQe=s(Wd);Q7=n(BQe,"A",{id:!0,class:!0,href:!0});var cyt=s(Q7);nFe=n(cyt,"SPAN",{});var fyt=s(nFe);T(Ay.$$.fragment,fyt),fyt.forEach(t),cyt.forEach(t),kur=i(BQe),sFe=n(BQe,"SPAN",{});var myt=s(sFe);Sur=r(myt,"AutoModelForMaskedImageModeling"),myt.forEach(t),BQe.forEach(t),xze=i(f),Jo=n(f,"DIV",{class:!0});var wl=s(Jo);T(Ly.$$.fragment,wl),Rur=i(wl),Qd=n(wl,"P",{});var Bte=s(Qd);Pur=r(Bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),eU=n(Bte,"A",{href:!0});var gyt=s(eU);Bur=r(gyt,"from_pretrained()"),gyt.forEach(t),Iur=r(Bte," class method or the "),oU=n(Bte,"A",{href:!0});var hyt=s(oU);Nur=r(hyt,"from_config()"),hyt.forEach(t),qur=r(Bte,` class
method.`),Bte.forEach(t),jur=i(wl),yy=n(wl,"P",{});var IQe=s(yy);Dur=r(IQe,"This class cannot be instantiated directly using "),lFe=n(IQe,"CODE",{});var pyt=s(lFe);Gur=r(pyt,"__init__()"),pyt.forEach(t),Our=r(IQe," (throws an error)."),IQe.forEach(t),Vur=i(wl),yt=n(wl,"DIV",{class:!0});var eA=s(yt);T(xy.$$.fragment,eA),Xur=i(eA),iFe=n(eA,"P",{});var _yt=s(iFe);zur=r(_yt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),_yt.forEach(t),Wur=i(eA),Hd=n(eA,"P",{});var Ite=s(Hd);Qur=r(Ite,`Note:
Loading a model from its configuration file does `),dFe=n(Ite,"STRONG",{});var uyt=s(dFe);Hur=r(uyt,"not"),uyt.forEach(t),Uur=r(Ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),rU=n(Ite,"A",{href:!0});var byt=s(rU);Jur=r(byt,"from_pretrained()"),byt.forEach(t),Yur=r(Ite," to load the model weights."),Ite.forEach(t),Kur=i(eA),T(H7.$$.fragment,eA),eA.forEach(t),Zur=i(wl),uo=n(wl,"DIV",{class:!0});var La=s(uo);T($y.$$.fragment,La),e1r=i(La),cFe=n(La,"P",{});var vyt=s(cFe);o1r=r(vyt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),vyt.forEach(t),r1r=i(La),on=n(La,"P",{});var oA=s(on);t1r=r(oA,"The model class to instantiate is selected based on the "),fFe=n(oA,"CODE",{});var Fyt=s(fFe);a1r=r(Fyt,"model_type"),Fyt.forEach(t),n1r=r(oA,` property of the config object (either
passed as an argument or loaded from `),mFe=n(oA,"CODE",{});var Tyt=s(mFe);s1r=r(Tyt,"pretrained_model_name_or_path"),Tyt.forEach(t),l1r=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gFe=n(oA,"CODE",{});var Myt=s(gFe);i1r=r(Myt,"pretrained_model_name_or_path"),Myt.forEach(t),d1r=r(oA,":"),oA.forEach(t),c1r=i(La),Ud=n(La,"UL",{});var Nte=s(Ud);U7=n(Nte,"LI",{});var vqe=s(U7);hFe=n(vqe,"STRONG",{});var Eyt=s(hFe);f1r=r(Eyt,"deit"),Eyt.forEach(t),m1r=r(vqe," \u2014 "),tU=n(vqe,"A",{href:!0});var Cyt=s(tU);g1r=r(Cyt,"DeiTForMaskedImageModeling"),Cyt.forEach(t),h1r=r(vqe," (DeiT model)"),vqe.forEach(t),p1r=i(Nte),J7=n(Nte,"LI",{});var Fqe=s(J7);pFe=n(Fqe,"STRONG",{});var wyt=s(pFe);_1r=r(wyt,"swin"),wyt.forEach(t),u1r=r(Fqe," \u2014 "),aU=n(Fqe,"A",{href:!0});var Ayt=s(aU);b1r=r(Ayt,"SwinForMaskedImageModeling"),Ayt.forEach(t),v1r=r(Fqe," (Swin Transformer model)"),Fqe.forEach(t),F1r=i(Nte),Y7=n(Nte,"LI",{});var Tqe=s(Y7);_Fe=n(Tqe,"STRONG",{});var Lyt=s(_Fe);T1r=r(Lyt,"vit"),Lyt.forEach(t),M1r=r(Tqe," \u2014 "),nU=n(Tqe,"A",{href:!0});var yyt=s(nU);E1r=r(yyt,"ViTForMaskedImageModeling"),yyt.forEach(t),C1r=r(Tqe," (ViT model)"),Tqe.forEach(t),Nte.forEach(t),w1r=i(La),K7=n(La,"P",{});var Mqe=s(K7);A1r=r(Mqe,"The model is set in evaluation mode by default using "),uFe=n(Mqe,"CODE",{});var xyt=s(uFe);L1r=r(xyt,"model.eval()"),xyt.forEach(t),y1r=r(Mqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bFe=n(Mqe,"CODE",{});var $yt=s(bFe);x1r=r($yt,"model.train()"),$yt.forEach(t),Mqe.forEach(t),$1r=i(La),T(Z7.$$.fragment,La),La.forEach(t),wl.forEach(t),$ze=i(f),Jd=n(f,"H2",{class:!0});var NQe=s(Jd);e8=n(NQe,"A",{id:!0,class:!0,href:!0});var kyt=s(e8);vFe=n(kyt,"SPAN",{});var Syt=s(vFe);T(ky.$$.fragment,Syt),Syt.forEach(t),kyt.forEach(t),k1r=i(NQe),FFe=n(NQe,"SPAN",{});var Ryt=s(FFe);S1r=r(Ryt,"AutoModelForObjectDetection"),Ryt.forEach(t),NQe.forEach(t),kze=i(f),Yo=n(f,"DIV",{class:!0});var Al=s(Yo);T(Sy.$$.fragment,Al),R1r=i(Al),Yd=n(Al,"P",{});var qte=s(Yd);P1r=r(qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),sU=n(qte,"A",{href:!0});var Pyt=s(sU);B1r=r(Pyt,"from_pretrained()"),Pyt.forEach(t),I1r=r(qte," class method or the "),lU=n(qte,"A",{href:!0});var Byt=s(lU);N1r=r(Byt,"from_config()"),Byt.forEach(t),q1r=r(qte,` class
method.`),qte.forEach(t),j1r=i(Al),Ry=n(Al,"P",{});var qQe=s(Ry);D1r=r(qQe,"This class cannot be instantiated directly using "),TFe=n(qQe,"CODE",{});var Iyt=s(TFe);G1r=r(Iyt,"__init__()"),Iyt.forEach(t),O1r=r(qQe," (throws an error)."),qQe.forEach(t),V1r=i(Al),xt=n(Al,"DIV",{class:!0});var rA=s(xt);T(Py.$$.fragment,rA),X1r=i(rA),MFe=n(rA,"P",{});var Nyt=s(MFe);z1r=r(Nyt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Nyt.forEach(t),W1r=i(rA),Kd=n(rA,"P",{});var jte=s(Kd);Q1r=r(jte,`Note:
Loading a model from its configuration file does `),EFe=n(jte,"STRONG",{});var qyt=s(EFe);H1r=r(qyt,"not"),qyt.forEach(t),U1r=r(jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),iU=n(jte,"A",{href:!0});var jyt=s(iU);J1r=r(jyt,"from_pretrained()"),jyt.forEach(t),Y1r=r(jte," to load the model weights."),jte.forEach(t),K1r=i(rA),T(o8.$$.fragment,rA),rA.forEach(t),Z1r=i(Al),bo=n(Al,"DIV",{class:!0});var ya=s(bo);T(By.$$.fragment,ya),e2r=i(ya),CFe=n(ya,"P",{});var Dyt=s(CFe);o2r=r(Dyt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Dyt.forEach(t),r2r=i(ya),rn=n(ya,"P",{});var tA=s(rn);t2r=r(tA,"The model class to instantiate is selected based on the "),wFe=n(tA,"CODE",{});var Gyt=s(wFe);a2r=r(Gyt,"model_type"),Gyt.forEach(t),n2r=r(tA,` property of the config object (either
passed as an argument or loaded from `),AFe=n(tA,"CODE",{});var Oyt=s(AFe);s2r=r(Oyt,"pretrained_model_name_or_path"),Oyt.forEach(t),l2r=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LFe=n(tA,"CODE",{});var Vyt=s(LFe);i2r=r(Vyt,"pretrained_model_name_or_path"),Vyt.forEach(t),d2r=r(tA,":"),tA.forEach(t),c2r=i(ya),Iy=n(ya,"UL",{});var jQe=s(Iy);r8=n(jQe,"LI",{});var Eqe=s(r8);yFe=n(Eqe,"STRONG",{});var Xyt=s(yFe);f2r=r(Xyt,"detr"),Xyt.forEach(t),m2r=r(Eqe," \u2014 "),dU=n(Eqe,"A",{href:!0});var zyt=s(dU);g2r=r(zyt,"DetrForObjectDetection"),zyt.forEach(t),h2r=r(Eqe," (DETR model)"),Eqe.forEach(t),p2r=i(jQe),t8=n(jQe,"LI",{});var Cqe=s(t8);xFe=n(Cqe,"STRONG",{});var Wyt=s(xFe);_2r=r(Wyt,"yolos"),Wyt.forEach(t),u2r=r(Cqe," \u2014 "),cU=n(Cqe,"A",{href:!0});var Qyt=s(cU);b2r=r(Qyt,"YolosForObjectDetection"),Qyt.forEach(t),v2r=r(Cqe," (YOLOS model)"),Cqe.forEach(t),jQe.forEach(t),F2r=i(ya),a8=n(ya,"P",{});var wqe=s(a8);T2r=r(wqe,"The model is set in evaluation mode by default using "),$Fe=n(wqe,"CODE",{});var Hyt=s($Fe);M2r=r(Hyt,"model.eval()"),Hyt.forEach(t),E2r=r(wqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kFe=n(wqe,"CODE",{});var Uyt=s(kFe);C2r=r(Uyt,"model.train()"),Uyt.forEach(t),wqe.forEach(t),w2r=i(ya),T(n8.$$.fragment,ya),ya.forEach(t),Al.forEach(t),Sze=i(f),Zd=n(f,"H2",{class:!0});var DQe=s(Zd);s8=n(DQe,"A",{id:!0,class:!0,href:!0});var Jyt=s(s8);SFe=n(Jyt,"SPAN",{});var Yyt=s(SFe);T(Ny.$$.fragment,Yyt),Yyt.forEach(t),Jyt.forEach(t),A2r=i(DQe),RFe=n(DQe,"SPAN",{});var Kyt=s(RFe);L2r=r(Kyt,"AutoModelForImageSegmentation"),Kyt.forEach(t),DQe.forEach(t),Rze=i(f),Ko=n(f,"DIV",{class:!0});var Ll=s(Ko);T(qy.$$.fragment,Ll),y2r=i(Ll),ec=n(Ll,"P",{});var Dte=s(ec);x2r=r(Dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),fU=n(Dte,"A",{href:!0});var Zyt=s(fU);$2r=r(Zyt,"from_pretrained()"),Zyt.forEach(t),k2r=r(Dte," class method or the "),mU=n(Dte,"A",{href:!0});var ext=s(mU);S2r=r(ext,"from_config()"),ext.forEach(t),R2r=r(Dte,` class
method.`),Dte.forEach(t),P2r=i(Ll),jy=n(Ll,"P",{});var GQe=s(jy);B2r=r(GQe,"This class cannot be instantiated directly using "),PFe=n(GQe,"CODE",{});var oxt=s(PFe);I2r=r(oxt,"__init__()"),oxt.forEach(t),N2r=r(GQe," (throws an error)."),GQe.forEach(t),q2r=i(Ll),$t=n(Ll,"DIV",{class:!0});var aA=s($t);T(Dy.$$.fragment,aA),j2r=i(aA),BFe=n(aA,"P",{});var rxt=s(BFe);D2r=r(rxt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),rxt.forEach(t),G2r=i(aA),oc=n(aA,"P",{});var Gte=s(oc);O2r=r(Gte,`Note:
Loading a model from its configuration file does `),IFe=n(Gte,"STRONG",{});var txt=s(IFe);V2r=r(txt,"not"),txt.forEach(t),X2r=r(Gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),gU=n(Gte,"A",{href:!0});var axt=s(gU);z2r=r(axt,"from_pretrained()"),axt.forEach(t),W2r=r(Gte," to load the model weights."),Gte.forEach(t),Q2r=i(aA),T(l8.$$.fragment,aA),aA.forEach(t),H2r=i(Ll),vo=n(Ll,"DIV",{class:!0});var xa=s(vo);T(Gy.$$.fragment,xa),U2r=i(xa),NFe=n(xa,"P",{});var nxt=s(NFe);J2r=r(nxt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),nxt.forEach(t),Y2r=i(xa),tn=n(xa,"P",{});var nA=s(tn);K2r=r(nA,"The model class to instantiate is selected based on the "),qFe=n(nA,"CODE",{});var sxt=s(qFe);Z2r=r(sxt,"model_type"),sxt.forEach(t),ebr=r(nA,` property of the config object (either
passed as an argument or loaded from `),jFe=n(nA,"CODE",{});var lxt=s(jFe);obr=r(lxt,"pretrained_model_name_or_path"),lxt.forEach(t),rbr=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DFe=n(nA,"CODE",{});var ixt=s(DFe);tbr=r(ixt,"pretrained_model_name_or_path"),ixt.forEach(t),abr=r(nA,":"),nA.forEach(t),nbr=i(xa),GFe=n(xa,"UL",{});var dxt=s(GFe);i8=n(dxt,"LI",{});var Aqe=s(i8);OFe=n(Aqe,"STRONG",{});var cxt=s(OFe);sbr=r(cxt,"detr"),cxt.forEach(t),lbr=r(Aqe," \u2014 "),hU=n(Aqe,"A",{href:!0});var fxt=s(hU);ibr=r(fxt,"DetrForSegmentation"),fxt.forEach(t),dbr=r(Aqe," (DETR model)"),Aqe.forEach(t),dxt.forEach(t),cbr=i(xa),d8=n(xa,"P",{});var Lqe=s(d8);fbr=r(Lqe,"The model is set in evaluation mode by default using "),VFe=n(Lqe,"CODE",{});var mxt=s(VFe);mbr=r(mxt,"model.eval()"),mxt.forEach(t),gbr=r(Lqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),XFe=n(Lqe,"CODE",{});var gxt=s(XFe);hbr=r(gxt,"model.train()"),gxt.forEach(t),Lqe.forEach(t),pbr=i(xa),T(c8.$$.fragment,xa),xa.forEach(t),Ll.forEach(t),Pze=i(f),rc=n(f,"H2",{class:!0});var OQe=s(rc);f8=n(OQe,"A",{id:!0,class:!0,href:!0});var hxt=s(f8);zFe=n(hxt,"SPAN",{});var pxt=s(zFe);T(Oy.$$.fragment,pxt),pxt.forEach(t),hxt.forEach(t),_br=i(OQe),WFe=n(OQe,"SPAN",{});var _xt=s(WFe);ubr=r(_xt,"AutoModelForSemanticSegmentation"),_xt.forEach(t),OQe.forEach(t),Bze=i(f),Zo=n(f,"DIV",{class:!0});var yl=s(Zo);T(Vy.$$.fragment,yl),bbr=i(yl),tc=n(yl,"P",{});var Ote=s(tc);vbr=r(Ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),pU=n(Ote,"A",{href:!0});var uxt=s(pU);Fbr=r(uxt,"from_pretrained()"),uxt.forEach(t),Tbr=r(Ote," class method or the "),_U=n(Ote,"A",{href:!0});var bxt=s(_U);Mbr=r(bxt,"from_config()"),bxt.forEach(t),Ebr=r(Ote,` class
method.`),Ote.forEach(t),Cbr=i(yl),Xy=n(yl,"P",{});var VQe=s(Xy);wbr=r(VQe,"This class cannot be instantiated directly using "),QFe=n(VQe,"CODE",{});var vxt=s(QFe);Abr=r(vxt,"__init__()"),vxt.forEach(t),Lbr=r(VQe," (throws an error)."),VQe.forEach(t),ybr=i(yl),kt=n(yl,"DIV",{class:!0});var sA=s(kt);T(zy.$$.fragment,sA),xbr=i(sA),HFe=n(sA,"P",{});var Fxt=s(HFe);$br=r(Fxt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Fxt.forEach(t),kbr=i(sA),ac=n(sA,"P",{});var Vte=s(ac);Sbr=r(Vte,`Note:
Loading a model from its configuration file does `),UFe=n(Vte,"STRONG",{});var Txt=s(UFe);Rbr=r(Txt,"not"),Txt.forEach(t),Pbr=r(Vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),uU=n(Vte,"A",{href:!0});var Mxt=s(uU);Bbr=r(Mxt,"from_pretrained()"),Mxt.forEach(t),Ibr=r(Vte," to load the model weights."),Vte.forEach(t),Nbr=i(sA),T(m8.$$.fragment,sA),sA.forEach(t),qbr=i(yl),Fo=n(yl,"DIV",{class:!0});var $a=s(Fo);T(Wy.$$.fragment,$a),jbr=i($a),JFe=n($a,"P",{});var Ext=s(JFe);Dbr=r(Ext,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Ext.forEach(t),Gbr=i($a),an=n($a,"P",{});var lA=s(an);Obr=r(lA,"The model class to instantiate is selected based on the "),YFe=n(lA,"CODE",{});var Cxt=s(YFe);Vbr=r(Cxt,"model_type"),Cxt.forEach(t),Xbr=r(lA,` property of the config object (either
passed as an argument or loaded from `),KFe=n(lA,"CODE",{});var wxt=s(KFe);zbr=r(wxt,"pretrained_model_name_or_path"),wxt.forEach(t),Wbr=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZFe=n(lA,"CODE",{});var Axt=s(ZFe);Qbr=r(Axt,"pretrained_model_name_or_path"),Axt.forEach(t),Hbr=r(lA,":"),lA.forEach(t),Ubr=i($a),at=n($a,"UL",{});var xl=s(at);g8=n(xl,"LI",{});var yqe=s(g8);eTe=n(yqe,"STRONG",{});var Lxt=s(eTe);Jbr=r(Lxt,"beit"),Lxt.forEach(t),Ybr=r(yqe," \u2014 "),bU=n(yqe,"A",{href:!0});var yxt=s(bU);Kbr=r(yxt,"BeitForSemanticSegmentation"),yxt.forEach(t),Zbr=r(yqe," (BEiT model)"),yqe.forEach(t),e3r=i(xl),h8=n(xl,"LI",{});var xqe=s(h8);oTe=n(xqe,"STRONG",{});var xxt=s(oTe);o3r=r(xxt,"data2vec-vision"),xxt.forEach(t),r3r=r(xqe," \u2014 "),vU=n(xqe,"A",{href:!0});var $xt=s(vU);t3r=r($xt,"Data2VecVisionForSemanticSegmentation"),$xt.forEach(t),a3r=r(xqe," (Data2VecVision model)"),xqe.forEach(t),n3r=i(xl),p8=n(xl,"LI",{});var $qe=s(p8);rTe=n($qe,"STRONG",{});var kxt=s(rTe);s3r=r(kxt,"dpt"),kxt.forEach(t),l3r=r($qe," \u2014 "),FU=n($qe,"A",{href:!0});var Sxt=s(FU);i3r=r(Sxt,"DPTForSemanticSegmentation"),Sxt.forEach(t),d3r=r($qe," (DPT model)"),$qe.forEach(t),c3r=i(xl),_8=n(xl,"LI",{});var kqe=s(_8);tTe=n(kqe,"STRONG",{});var Rxt=s(tTe);f3r=r(Rxt,"mobilevit"),Rxt.forEach(t),m3r=r(kqe," \u2014 "),TU=n(kqe,"A",{href:!0});var Pxt=s(TU);g3r=r(Pxt,"MobileViTForSemanticSegmentation"),Pxt.forEach(t),h3r=r(kqe," (MobileViT model)"),kqe.forEach(t),p3r=i(xl),u8=n(xl,"LI",{});var Sqe=s(u8);aTe=n(Sqe,"STRONG",{});var Bxt=s(aTe);_3r=r(Bxt,"segformer"),Bxt.forEach(t),u3r=r(Sqe," \u2014 "),MU=n(Sqe,"A",{href:!0});var Ixt=s(MU);b3r=r(Ixt,"SegformerForSemanticSegmentation"),Ixt.forEach(t),v3r=r(Sqe," (SegFormer model)"),Sqe.forEach(t),xl.forEach(t),F3r=i($a),b8=n($a,"P",{});var Rqe=s(b8);T3r=r(Rqe,"The model is set in evaluation mode by default using "),nTe=n(Rqe,"CODE",{});var Nxt=s(nTe);M3r=r(Nxt,"model.eval()"),Nxt.forEach(t),E3r=r(Rqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sTe=n(Rqe,"CODE",{});var qxt=s(sTe);C3r=r(qxt,"model.train()"),qxt.forEach(t),Rqe.forEach(t),w3r=i($a),T(v8.$$.fragment,$a),$a.forEach(t),yl.forEach(t),Ize=i(f),nc=n(f,"H2",{class:!0});var XQe=s(nc);F8=n(XQe,"A",{id:!0,class:!0,href:!0});var jxt=s(F8);lTe=n(jxt,"SPAN",{});var Dxt=s(lTe);T(Qy.$$.fragment,Dxt),Dxt.forEach(t),jxt.forEach(t),A3r=i(XQe),iTe=n(XQe,"SPAN",{});var Gxt=s(iTe);L3r=r(Gxt,"AutoModelForInstanceSegmentation"),Gxt.forEach(t),XQe.forEach(t),Nze=i(f),er=n(f,"DIV",{class:!0});var $l=s(er);T(Hy.$$.fragment,$l),y3r=i($l),sc=n($l,"P",{});var Xte=s(sc);x3r=r(Xte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),EU=n(Xte,"A",{href:!0});var Oxt=s(EU);$3r=r(Oxt,"from_pretrained()"),Oxt.forEach(t),k3r=r(Xte," class method or the "),CU=n(Xte,"A",{href:!0});var Vxt=s(CU);S3r=r(Vxt,"from_config()"),Vxt.forEach(t),R3r=r(Xte,` class
method.`),Xte.forEach(t),P3r=i($l),Uy=n($l,"P",{});var zQe=s(Uy);B3r=r(zQe,"This class cannot be instantiated directly using "),dTe=n(zQe,"CODE",{});var Xxt=s(dTe);I3r=r(Xxt,"__init__()"),Xxt.forEach(t),N3r=r(zQe," (throws an error)."),zQe.forEach(t),q3r=i($l),St=n($l,"DIV",{class:!0});var iA=s(St);T(Jy.$$.fragment,iA),j3r=i(iA),cTe=n(iA,"P",{});var zxt=s(cTe);D3r=r(zxt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),zxt.forEach(t),G3r=i(iA),lc=n(iA,"P",{});var zte=s(lc);O3r=r(zte,`Note:
Loading a model from its configuration file does `),fTe=n(zte,"STRONG",{});var Wxt=s(fTe);V3r=r(Wxt,"not"),Wxt.forEach(t),X3r=r(zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),wU=n(zte,"A",{href:!0});var Qxt=s(wU);z3r=r(Qxt,"from_pretrained()"),Qxt.forEach(t),W3r=r(zte," to load the model weights."),zte.forEach(t),Q3r=i(iA),T(T8.$$.fragment,iA),iA.forEach(t),H3r=i($l),To=n($l,"DIV",{class:!0});var ka=s(To);T(Yy.$$.fragment,ka),U3r=i(ka),mTe=n(ka,"P",{});var Hxt=s(mTe);J3r=r(Hxt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Hxt.forEach(t),Y3r=i(ka),nn=n(ka,"P",{});var dA=s(nn);K3r=r(dA,"The model class to instantiate is selected based on the "),gTe=n(dA,"CODE",{});var Uxt=s(gTe);Z3r=r(Uxt,"model_type"),Uxt.forEach(t),evr=r(dA,` property of the config object (either
passed as an argument or loaded from `),hTe=n(dA,"CODE",{});var Jxt=s(hTe);ovr=r(Jxt,"pretrained_model_name_or_path"),Jxt.forEach(t),rvr=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pTe=n(dA,"CODE",{});var Yxt=s(pTe);tvr=r(Yxt,"pretrained_model_name_or_path"),Yxt.forEach(t),avr=r(dA,":"),dA.forEach(t),nvr=i(ka),_Te=n(ka,"UL",{});var Kxt=s(_Te);M8=n(Kxt,"LI",{});var Pqe=s(M8);uTe=n(Pqe,"STRONG",{});var Zxt=s(uTe);svr=r(Zxt,"maskformer"),Zxt.forEach(t),lvr=r(Pqe," \u2014 "),AU=n(Pqe,"A",{href:!0});var e$t=s(AU);ivr=r(e$t,"MaskFormerForInstanceSegmentation"),e$t.forEach(t),dvr=r(Pqe," (MaskFormer model)"),Pqe.forEach(t),Kxt.forEach(t),cvr=i(ka),E8=n(ka,"P",{});var Bqe=s(E8);fvr=r(Bqe,"The model is set in evaluation mode by default using "),bTe=n(Bqe,"CODE",{});var o$t=s(bTe);mvr=r(o$t,"model.eval()"),o$t.forEach(t),gvr=r(Bqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vTe=n(Bqe,"CODE",{});var r$t=s(vTe);hvr=r(r$t,"model.train()"),r$t.forEach(t),Bqe.forEach(t),pvr=i(ka),T(C8.$$.fragment,ka),ka.forEach(t),$l.forEach(t),qze=i(f),ic=n(f,"H2",{class:!0});var WQe=s(ic);w8=n(WQe,"A",{id:!0,class:!0,href:!0});var t$t=s(w8);FTe=n(t$t,"SPAN",{});var a$t=s(FTe);T(Ky.$$.fragment,a$t),a$t.forEach(t),t$t.forEach(t),_vr=i(WQe),TTe=n(WQe,"SPAN",{});var n$t=s(TTe);uvr=r(n$t,"TFAutoModel"),n$t.forEach(t),WQe.forEach(t),jze=i(f),or=n(f,"DIV",{class:!0});var kl=s(or);T(Zy.$$.fragment,kl),bvr=i(kl),dc=n(kl,"P",{});var Wte=s(dc);vvr=r(Wte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),LU=n(Wte,"A",{href:!0});var s$t=s(LU);Fvr=r(s$t,"from_pretrained()"),s$t.forEach(t),Tvr=r(Wte," class method or the "),yU=n(Wte,"A",{href:!0});var l$t=s(yU);Mvr=r(l$t,"from_config()"),l$t.forEach(t),Evr=r(Wte,` class
method.`),Wte.forEach(t),Cvr=i(kl),ex=n(kl,"P",{});var QQe=s(ex);wvr=r(QQe,"This class cannot be instantiated directly using "),MTe=n(QQe,"CODE",{});var i$t=s(MTe);Avr=r(i$t,"__init__()"),i$t.forEach(t),Lvr=r(QQe," (throws an error)."),QQe.forEach(t),yvr=i(kl),Rt=n(kl,"DIV",{class:!0});var cA=s(Rt);T(ox.$$.fragment,cA),xvr=i(cA),ETe=n(cA,"P",{});var d$t=s(ETe);$vr=r(d$t,"Instantiates one of the base model classes of the library from a configuration."),d$t.forEach(t),kvr=i(cA),cc=n(cA,"P",{});var Qte=s(cc);Svr=r(Qte,`Note:
Loading a model from its configuration file does `),CTe=n(Qte,"STRONG",{});var c$t=s(CTe);Rvr=r(c$t,"not"),c$t.forEach(t),Pvr=r(Qte,` load the model weights. It only affects the
model\u2019s configuration. Use `),xU=n(Qte,"A",{href:!0});var f$t=s(xU);Bvr=r(f$t,"from_pretrained()"),f$t.forEach(t),Ivr=r(Qte," to load the model weights."),Qte.forEach(t),Nvr=i(cA),T(A8.$$.fragment,cA),cA.forEach(t),qvr=i(kl),xr=n(kl,"DIV",{class:!0});var Sl=s(xr);T(rx.$$.fragment,Sl),jvr=i(Sl),wTe=n(Sl,"P",{});var m$t=s(wTe);Dvr=r(m$t,"Instantiate one of the base model classes of the library from a pretrained model."),m$t.forEach(t),Gvr=i(Sl),sn=n(Sl,"P",{});var fA=s(sn);Ovr=r(fA,"The model class to instantiate is selected based on the "),ATe=n(fA,"CODE",{});var g$t=s(ATe);Vvr=r(g$t,"model_type"),g$t.forEach(t),Xvr=r(fA,` property of the config object (either
passed as an argument or loaded from `),LTe=n(fA,"CODE",{});var h$t=s(LTe);zvr=r(h$t,"pretrained_model_name_or_path"),h$t.forEach(t),Wvr=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yTe=n(fA,"CODE",{});var p$t=s(yTe);Qvr=r(p$t,"pretrained_model_name_or_path"),p$t.forEach(t),Hvr=r(fA,":"),fA.forEach(t),Uvr=i(Sl),q=n(Sl,"UL",{});var D=s(q);L8=n(D,"LI",{});var Iqe=s(L8);xTe=n(Iqe,"STRONG",{});var _$t=s(xTe);Jvr=r(_$t,"albert"),_$t.forEach(t),Yvr=r(Iqe," \u2014 "),$U=n(Iqe,"A",{href:!0});var u$t=s($U);Kvr=r(u$t,"TFAlbertModel"),u$t.forEach(t),Zvr=r(Iqe," (ALBERT model)"),Iqe.forEach(t),eFr=i(D),y8=n(D,"LI",{});var Nqe=s(y8);$Te=n(Nqe,"STRONG",{});var b$t=s($Te);oFr=r(b$t,"bart"),b$t.forEach(t),rFr=r(Nqe," \u2014 "),kU=n(Nqe,"A",{href:!0});var v$t=s(kU);tFr=r(v$t,"TFBartModel"),v$t.forEach(t),aFr=r(Nqe," (BART model)"),Nqe.forEach(t),nFr=i(D),x8=n(D,"LI",{});var qqe=s(x8);kTe=n(qqe,"STRONG",{});var F$t=s(kTe);sFr=r(F$t,"bert"),F$t.forEach(t),lFr=r(qqe," \u2014 "),SU=n(qqe,"A",{href:!0});var T$t=s(SU);iFr=r(T$t,"TFBertModel"),T$t.forEach(t),dFr=r(qqe," (BERT model)"),qqe.forEach(t),cFr=i(D),$8=n(D,"LI",{});var jqe=s($8);STe=n(jqe,"STRONG",{});var M$t=s(STe);fFr=r(M$t,"blenderbot"),M$t.forEach(t),mFr=r(jqe," \u2014 "),RU=n(jqe,"A",{href:!0});var E$t=s(RU);gFr=r(E$t,"TFBlenderbotModel"),E$t.forEach(t),hFr=r(jqe," (Blenderbot model)"),jqe.forEach(t),pFr=i(D),k8=n(D,"LI",{});var Dqe=s(k8);RTe=n(Dqe,"STRONG",{});var C$t=s(RTe);_Fr=r(C$t,"blenderbot-small"),C$t.forEach(t),uFr=r(Dqe," \u2014 "),PU=n(Dqe,"A",{href:!0});var w$t=s(PU);bFr=r(w$t,"TFBlenderbotSmallModel"),w$t.forEach(t),vFr=r(Dqe," (BlenderbotSmall model)"),Dqe.forEach(t),FFr=i(D),S8=n(D,"LI",{});var Gqe=s(S8);PTe=n(Gqe,"STRONG",{});var A$t=s(PTe);TFr=r(A$t,"camembert"),A$t.forEach(t),MFr=r(Gqe," \u2014 "),BU=n(Gqe,"A",{href:!0});var L$t=s(BU);EFr=r(L$t,"TFCamembertModel"),L$t.forEach(t),CFr=r(Gqe," (CamemBERT model)"),Gqe.forEach(t),wFr=i(D),R8=n(D,"LI",{});var Oqe=s(R8);BTe=n(Oqe,"STRONG",{});var y$t=s(BTe);AFr=r(y$t,"clip"),y$t.forEach(t),LFr=r(Oqe," \u2014 "),IU=n(Oqe,"A",{href:!0});var x$t=s(IU);yFr=r(x$t,"TFCLIPModel"),x$t.forEach(t),xFr=r(Oqe," (CLIP model)"),Oqe.forEach(t),$Fr=i(D),P8=n(D,"LI",{});var Vqe=s(P8);ITe=n(Vqe,"STRONG",{});var $$t=s(ITe);kFr=r($$t,"convbert"),$$t.forEach(t),SFr=r(Vqe," \u2014 "),NU=n(Vqe,"A",{href:!0});var k$t=s(NU);RFr=r(k$t,"TFConvBertModel"),k$t.forEach(t),PFr=r(Vqe," (ConvBERT model)"),Vqe.forEach(t),BFr=i(D),B8=n(D,"LI",{});var Xqe=s(B8);NTe=n(Xqe,"STRONG",{});var S$t=s(NTe);IFr=r(S$t,"convnext"),S$t.forEach(t),NFr=r(Xqe," \u2014 "),qU=n(Xqe,"A",{href:!0});var R$t=s(qU);qFr=r(R$t,"TFConvNextModel"),R$t.forEach(t),jFr=r(Xqe," (ConvNeXT model)"),Xqe.forEach(t),DFr=i(D),I8=n(D,"LI",{});var zqe=s(I8);qTe=n(zqe,"STRONG",{});var P$t=s(qTe);GFr=r(P$t,"ctrl"),P$t.forEach(t),OFr=r(zqe," \u2014 "),jU=n(zqe,"A",{href:!0});var B$t=s(jU);VFr=r(B$t,"TFCTRLModel"),B$t.forEach(t),XFr=r(zqe," (CTRL model)"),zqe.forEach(t),zFr=i(D),N8=n(D,"LI",{});var Wqe=s(N8);jTe=n(Wqe,"STRONG",{});var I$t=s(jTe);WFr=r(I$t,"data2vec-vision"),I$t.forEach(t),QFr=r(Wqe," \u2014 "),DU=n(Wqe,"A",{href:!0});var N$t=s(DU);HFr=r(N$t,"TFData2VecVisionModel"),N$t.forEach(t),UFr=r(Wqe," (Data2VecVision model)"),Wqe.forEach(t),JFr=i(D),q8=n(D,"LI",{});var Qqe=s(q8);DTe=n(Qqe,"STRONG",{});var q$t=s(DTe);YFr=r(q$t,"deberta"),q$t.forEach(t),KFr=r(Qqe," \u2014 "),GU=n(Qqe,"A",{href:!0});var j$t=s(GU);ZFr=r(j$t,"TFDebertaModel"),j$t.forEach(t),eTr=r(Qqe," (DeBERTa model)"),Qqe.forEach(t),oTr=i(D),j8=n(D,"LI",{});var Hqe=s(j8);GTe=n(Hqe,"STRONG",{});var D$t=s(GTe);rTr=r(D$t,"deberta-v2"),D$t.forEach(t),tTr=r(Hqe," \u2014 "),OU=n(Hqe,"A",{href:!0});var G$t=s(OU);aTr=r(G$t,"TFDebertaV2Model"),G$t.forEach(t),nTr=r(Hqe," (DeBERTa-v2 model)"),Hqe.forEach(t),sTr=i(D),D8=n(D,"LI",{});var Uqe=s(D8);OTe=n(Uqe,"STRONG",{});var O$t=s(OTe);lTr=r(O$t,"deit"),O$t.forEach(t),iTr=r(Uqe," \u2014 "),VU=n(Uqe,"A",{href:!0});var V$t=s(VU);dTr=r(V$t,"TFDeiTModel"),V$t.forEach(t),cTr=r(Uqe," (DeiT model)"),Uqe.forEach(t),fTr=i(D),G8=n(D,"LI",{});var Jqe=s(G8);VTe=n(Jqe,"STRONG",{});var X$t=s(VTe);mTr=r(X$t,"distilbert"),X$t.forEach(t),gTr=r(Jqe," \u2014 "),XU=n(Jqe,"A",{href:!0});var z$t=s(XU);hTr=r(z$t,"TFDistilBertModel"),z$t.forEach(t),pTr=r(Jqe," (DistilBERT model)"),Jqe.forEach(t),_Tr=i(D),O8=n(D,"LI",{});var Yqe=s(O8);XTe=n(Yqe,"STRONG",{});var W$t=s(XTe);uTr=r(W$t,"dpr"),W$t.forEach(t),bTr=r(Yqe," \u2014 "),zU=n(Yqe,"A",{href:!0});var Q$t=s(zU);vTr=r(Q$t,"TFDPRQuestionEncoder"),Q$t.forEach(t),FTr=r(Yqe," (DPR model)"),Yqe.forEach(t),TTr=i(D),V8=n(D,"LI",{});var Kqe=s(V8);zTe=n(Kqe,"STRONG",{});var H$t=s(zTe);MTr=r(H$t,"electra"),H$t.forEach(t),ETr=r(Kqe," \u2014 "),WU=n(Kqe,"A",{href:!0});var U$t=s(WU);CTr=r(U$t,"TFElectraModel"),U$t.forEach(t),wTr=r(Kqe," (ELECTRA model)"),Kqe.forEach(t),ATr=i(D),X8=n(D,"LI",{});var Zqe=s(X8);WTe=n(Zqe,"STRONG",{});var J$t=s(WTe);LTr=r(J$t,"flaubert"),J$t.forEach(t),yTr=r(Zqe," \u2014 "),QU=n(Zqe,"A",{href:!0});var Y$t=s(QU);xTr=r(Y$t,"TFFlaubertModel"),Y$t.forEach(t),$Tr=r(Zqe," (FlauBERT model)"),Zqe.forEach(t),kTr=i(D),Ks=n(D,"LI",{});var VS=s(Ks);QTe=n(VS,"STRONG",{});var K$t=s(QTe);STr=r(K$t,"funnel"),K$t.forEach(t),RTr=r(VS," \u2014 "),HU=n(VS,"A",{href:!0});var Z$t=s(HU);PTr=r(Z$t,"TFFunnelModel"),Z$t.forEach(t),BTr=r(VS," or "),UU=n(VS,"A",{href:!0});var ekt=s(UU);ITr=r(ekt,"TFFunnelBaseModel"),ekt.forEach(t),NTr=r(VS," (Funnel Transformer model)"),VS.forEach(t),qTr=i(D),z8=n(D,"LI",{});var eje=s(z8);HTe=n(eje,"STRONG",{});var okt=s(HTe);jTr=r(okt,"gpt2"),okt.forEach(t),DTr=r(eje," \u2014 "),JU=n(eje,"A",{href:!0});var rkt=s(JU);GTr=r(rkt,"TFGPT2Model"),rkt.forEach(t),OTr=r(eje," (OpenAI GPT-2 model)"),eje.forEach(t),VTr=i(D),W8=n(D,"LI",{});var oje=s(W8);UTe=n(oje,"STRONG",{});var tkt=s(UTe);XTr=r(tkt,"gptj"),tkt.forEach(t),zTr=r(oje," \u2014 "),YU=n(oje,"A",{href:!0});var akt=s(YU);WTr=r(akt,"TFGPTJModel"),akt.forEach(t),QTr=r(oje," (GPT-J model)"),oje.forEach(t),HTr=i(D),Q8=n(D,"LI",{});var rje=s(Q8);JTe=n(rje,"STRONG",{});var nkt=s(JTe);UTr=r(nkt,"hubert"),nkt.forEach(t),JTr=r(rje," \u2014 "),KU=n(rje,"A",{href:!0});var skt=s(KU);YTr=r(skt,"TFHubertModel"),skt.forEach(t),KTr=r(rje," (Hubert model)"),rje.forEach(t),ZTr=i(D),H8=n(D,"LI",{});var tje=s(H8);YTe=n(tje,"STRONG",{});var lkt=s(YTe);e7r=r(lkt,"layoutlm"),lkt.forEach(t),o7r=r(tje," \u2014 "),ZU=n(tje,"A",{href:!0});var ikt=s(ZU);r7r=r(ikt,"TFLayoutLMModel"),ikt.forEach(t),t7r=r(tje," (LayoutLM model)"),tje.forEach(t),a7r=i(D),U8=n(D,"LI",{});var aje=s(U8);KTe=n(aje,"STRONG",{});var dkt=s(KTe);n7r=r(dkt,"led"),dkt.forEach(t),s7r=r(aje," \u2014 "),eJ=n(aje,"A",{href:!0});var ckt=s(eJ);l7r=r(ckt,"TFLEDModel"),ckt.forEach(t),i7r=r(aje," (LED model)"),aje.forEach(t),d7r=i(D),J8=n(D,"LI",{});var nje=s(J8);ZTe=n(nje,"STRONG",{});var fkt=s(ZTe);c7r=r(fkt,"longformer"),fkt.forEach(t),f7r=r(nje," \u2014 "),oJ=n(nje,"A",{href:!0});var mkt=s(oJ);m7r=r(mkt,"TFLongformerModel"),mkt.forEach(t),g7r=r(nje," (Longformer model)"),nje.forEach(t),h7r=i(D),Y8=n(D,"LI",{});var sje=s(Y8);e7e=n(sje,"STRONG",{});var gkt=s(e7e);p7r=r(gkt,"lxmert"),gkt.forEach(t),_7r=r(sje," \u2014 "),rJ=n(sje,"A",{href:!0});var hkt=s(rJ);u7r=r(hkt,"TFLxmertModel"),hkt.forEach(t),b7r=r(sje," (LXMERT model)"),sje.forEach(t),v7r=i(D),K8=n(D,"LI",{});var lje=s(K8);o7e=n(lje,"STRONG",{});var pkt=s(o7e);F7r=r(pkt,"marian"),pkt.forEach(t),T7r=r(lje," \u2014 "),tJ=n(lje,"A",{href:!0});var _kt=s(tJ);M7r=r(_kt,"TFMarianModel"),_kt.forEach(t),E7r=r(lje," (Marian model)"),lje.forEach(t),C7r=i(D),Z8=n(D,"LI",{});var ije=s(Z8);r7e=n(ije,"STRONG",{});var ukt=s(r7e);w7r=r(ukt,"mbart"),ukt.forEach(t),A7r=r(ije," \u2014 "),aJ=n(ije,"A",{href:!0});var bkt=s(aJ);L7r=r(bkt,"TFMBartModel"),bkt.forEach(t),y7r=r(ije," (mBART model)"),ije.forEach(t),x7r=i(D),e9=n(D,"LI",{});var dje=s(e9);t7e=n(dje,"STRONG",{});var vkt=s(t7e);$7r=r(vkt,"mobilebert"),vkt.forEach(t),k7r=r(dje," \u2014 "),nJ=n(dje,"A",{href:!0});var Fkt=s(nJ);S7r=r(Fkt,"TFMobileBertModel"),Fkt.forEach(t),R7r=r(dje," (MobileBERT model)"),dje.forEach(t),P7r=i(D),o9=n(D,"LI",{});var cje=s(o9);a7e=n(cje,"STRONG",{});var Tkt=s(a7e);B7r=r(Tkt,"mpnet"),Tkt.forEach(t),I7r=r(cje," \u2014 "),sJ=n(cje,"A",{href:!0});var Mkt=s(sJ);N7r=r(Mkt,"TFMPNetModel"),Mkt.forEach(t),q7r=r(cje," (MPNet model)"),cje.forEach(t),j7r=i(D),r9=n(D,"LI",{});var fje=s(r9);n7e=n(fje,"STRONG",{});var Ekt=s(n7e);D7r=r(Ekt,"mt5"),Ekt.forEach(t),G7r=r(fje," \u2014 "),lJ=n(fje,"A",{href:!0});var Ckt=s(lJ);O7r=r(Ckt,"TFMT5Model"),Ckt.forEach(t),V7r=r(fje," (MT5 model)"),fje.forEach(t),X7r=i(D),t9=n(D,"LI",{});var mje=s(t9);s7e=n(mje,"STRONG",{});var wkt=s(s7e);z7r=r(wkt,"openai-gpt"),wkt.forEach(t),W7r=r(mje," \u2014 "),iJ=n(mje,"A",{href:!0});var Akt=s(iJ);Q7r=r(Akt,"TFOpenAIGPTModel"),Akt.forEach(t),H7r=r(mje," (OpenAI GPT model)"),mje.forEach(t),U7r=i(D),a9=n(D,"LI",{});var gje=s(a9);l7e=n(gje,"STRONG",{});var Lkt=s(l7e);J7r=r(Lkt,"opt"),Lkt.forEach(t),Y7r=r(gje," \u2014 "),dJ=n(gje,"A",{href:!0});var ykt=s(dJ);K7r=r(ykt,"TFOPTModel"),ykt.forEach(t),Z7r=r(gje," (OPT model)"),gje.forEach(t),e8r=i(D),n9=n(D,"LI",{});var hje=s(n9);i7e=n(hje,"STRONG",{});var xkt=s(i7e);o8r=r(xkt,"pegasus"),xkt.forEach(t),r8r=r(hje," \u2014 "),cJ=n(hje,"A",{href:!0});var $kt=s(cJ);t8r=r($kt,"TFPegasusModel"),$kt.forEach(t),a8r=r(hje," (Pegasus model)"),hje.forEach(t),n8r=i(D),s9=n(D,"LI",{});var pje=s(s9);d7e=n(pje,"STRONG",{});var kkt=s(d7e);s8r=r(kkt,"regnet"),kkt.forEach(t),l8r=r(pje," \u2014 "),fJ=n(pje,"A",{href:!0});var Skt=s(fJ);i8r=r(Skt,"TFRegNetModel"),Skt.forEach(t),d8r=r(pje," (RegNet model)"),pje.forEach(t),c8r=i(D),l9=n(D,"LI",{});var _je=s(l9);c7e=n(_je,"STRONG",{});var Rkt=s(c7e);f8r=r(Rkt,"rembert"),Rkt.forEach(t),m8r=r(_je," \u2014 "),mJ=n(_je,"A",{href:!0});var Pkt=s(mJ);g8r=r(Pkt,"TFRemBertModel"),Pkt.forEach(t),h8r=r(_je," (RemBERT model)"),_je.forEach(t),p8r=i(D),i9=n(D,"LI",{});var uje=s(i9);f7e=n(uje,"STRONG",{});var Bkt=s(f7e);_8r=r(Bkt,"resnet"),Bkt.forEach(t),u8r=r(uje," \u2014 "),gJ=n(uje,"A",{href:!0});var Ikt=s(gJ);b8r=r(Ikt,"TFResNetModel"),Ikt.forEach(t),v8r=r(uje," (ResNet model)"),uje.forEach(t),F8r=i(D),d9=n(D,"LI",{});var bje=s(d9);m7e=n(bje,"STRONG",{});var Nkt=s(m7e);T8r=r(Nkt,"roberta"),Nkt.forEach(t),M8r=r(bje," \u2014 "),hJ=n(bje,"A",{href:!0});var qkt=s(hJ);E8r=r(qkt,"TFRobertaModel"),qkt.forEach(t),C8r=r(bje," (RoBERTa model)"),bje.forEach(t),w8r=i(D),c9=n(D,"LI",{});var vje=s(c9);g7e=n(vje,"STRONG",{});var jkt=s(g7e);A8r=r(jkt,"roformer"),jkt.forEach(t),L8r=r(vje," \u2014 "),pJ=n(vje,"A",{href:!0});var Dkt=s(pJ);y8r=r(Dkt,"TFRoFormerModel"),Dkt.forEach(t),x8r=r(vje," (RoFormer model)"),vje.forEach(t),$8r=i(D),f9=n(D,"LI",{});var Fje=s(f9);h7e=n(Fje,"STRONG",{});var Gkt=s(h7e);k8r=r(Gkt,"speech_to_text"),Gkt.forEach(t),S8r=r(Fje," \u2014 "),_J=n(Fje,"A",{href:!0});var Okt=s(_J);R8r=r(Okt,"TFSpeech2TextModel"),Okt.forEach(t),P8r=r(Fje," (Speech2Text model)"),Fje.forEach(t),B8r=i(D),m9=n(D,"LI",{});var Tje=s(m9);p7e=n(Tje,"STRONG",{});var Vkt=s(p7e);I8r=r(Vkt,"swin"),Vkt.forEach(t),N8r=r(Tje," \u2014 "),uJ=n(Tje,"A",{href:!0});var Xkt=s(uJ);q8r=r(Xkt,"TFSwinModel"),Xkt.forEach(t),j8r=r(Tje," (Swin Transformer model)"),Tje.forEach(t),D8r=i(D),g9=n(D,"LI",{});var Mje=s(g9);_7e=n(Mje,"STRONG",{});var zkt=s(_7e);G8r=r(zkt,"t5"),zkt.forEach(t),O8r=r(Mje," \u2014 "),bJ=n(Mje,"A",{href:!0});var Wkt=s(bJ);V8r=r(Wkt,"TFT5Model"),Wkt.forEach(t),X8r=r(Mje," (T5 model)"),Mje.forEach(t),z8r=i(D),h9=n(D,"LI",{});var Eje=s(h9);u7e=n(Eje,"STRONG",{});var Qkt=s(u7e);W8r=r(Qkt,"tapas"),Qkt.forEach(t),Q8r=r(Eje," \u2014 "),vJ=n(Eje,"A",{href:!0});var Hkt=s(vJ);H8r=r(Hkt,"TFTapasModel"),Hkt.forEach(t),U8r=r(Eje," (TAPAS model)"),Eje.forEach(t),J8r=i(D),p9=n(D,"LI",{});var Cje=s(p9);b7e=n(Cje,"STRONG",{});var Ukt=s(b7e);Y8r=r(Ukt,"transfo-xl"),Ukt.forEach(t),K8r=r(Cje," \u2014 "),FJ=n(Cje,"A",{href:!0});var Jkt=s(FJ);Z8r=r(Jkt,"TFTransfoXLModel"),Jkt.forEach(t),e9r=r(Cje," (Transformer-XL model)"),Cje.forEach(t),o9r=i(D),_9=n(D,"LI",{});var wje=s(_9);v7e=n(wje,"STRONG",{});var Ykt=s(v7e);r9r=r(Ykt,"vit"),Ykt.forEach(t),t9r=r(wje," \u2014 "),TJ=n(wje,"A",{href:!0});var Kkt=s(TJ);a9r=r(Kkt,"TFViTModel"),Kkt.forEach(t),n9r=r(wje," (ViT model)"),wje.forEach(t),s9r=i(D),u9=n(D,"LI",{});var Aje=s(u9);F7e=n(Aje,"STRONG",{});var Zkt=s(F7e);l9r=r(Zkt,"vit_mae"),Zkt.forEach(t),i9r=r(Aje," \u2014 "),MJ=n(Aje,"A",{href:!0});var eSt=s(MJ);d9r=r(eSt,"TFViTMAEModel"),eSt.forEach(t),c9r=r(Aje," (ViTMAE model)"),Aje.forEach(t),f9r=i(D),b9=n(D,"LI",{});var Lje=s(b9);T7e=n(Lje,"STRONG",{});var oSt=s(T7e);m9r=r(oSt,"wav2vec2"),oSt.forEach(t),g9r=r(Lje," \u2014 "),EJ=n(Lje,"A",{href:!0});var rSt=s(EJ);h9r=r(rSt,"TFWav2Vec2Model"),rSt.forEach(t),p9r=r(Lje," (Wav2Vec2 model)"),Lje.forEach(t),_9r=i(D),v9=n(D,"LI",{});var yje=s(v9);M7e=n(yje,"STRONG",{});var tSt=s(M7e);u9r=r(tSt,"xlm"),tSt.forEach(t),b9r=r(yje," \u2014 "),CJ=n(yje,"A",{href:!0});var aSt=s(CJ);v9r=r(aSt,"TFXLMModel"),aSt.forEach(t),F9r=r(yje," (XLM model)"),yje.forEach(t),T9r=i(D),F9=n(D,"LI",{});var xje=s(F9);E7e=n(xje,"STRONG",{});var nSt=s(E7e);M9r=r(nSt,"xlm-roberta"),nSt.forEach(t),E9r=r(xje," \u2014 "),wJ=n(xje,"A",{href:!0});var sSt=s(wJ);C9r=r(sSt,"TFXLMRobertaModel"),sSt.forEach(t),w9r=r(xje," (XLM-RoBERTa model)"),xje.forEach(t),A9r=i(D),T9=n(D,"LI",{});var $je=s(T9);C7e=n($je,"STRONG",{});var lSt=s(C7e);L9r=r(lSt,"xlnet"),lSt.forEach(t),y9r=r($je," \u2014 "),AJ=n($je,"A",{href:!0});var iSt=s(AJ);x9r=r(iSt,"TFXLNetModel"),iSt.forEach(t),$9r=r($je," (XLNet model)"),$je.forEach(t),D.forEach(t),k9r=i(Sl),T(M9.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),Dze=i(f),fc=n(f,"H2",{class:!0});var HQe=s(fc);E9=n(HQe,"A",{id:!0,class:!0,href:!0});var dSt=s(E9);w7e=n(dSt,"SPAN",{});var cSt=s(w7e);T(tx.$$.fragment,cSt),cSt.forEach(t),dSt.forEach(t),S9r=i(HQe),A7e=n(HQe,"SPAN",{});var fSt=s(A7e);R9r=r(fSt,"TFAutoModelForPreTraining"),fSt.forEach(t),HQe.forEach(t),Gze=i(f),rr=n(f,"DIV",{class:!0});var Rl=s(rr);T(ax.$$.fragment,Rl),P9r=i(Rl),mc=n(Rl,"P",{});var Hte=s(mc);B9r=r(Hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),LJ=n(Hte,"A",{href:!0});var mSt=s(LJ);I9r=r(mSt,"from_pretrained()"),mSt.forEach(t),N9r=r(Hte," class method or the "),yJ=n(Hte,"A",{href:!0});var gSt=s(yJ);q9r=r(gSt,"from_config()"),gSt.forEach(t),j9r=r(Hte,` class
method.`),Hte.forEach(t),D9r=i(Rl),nx=n(Rl,"P",{});var UQe=s(nx);G9r=r(UQe,"This class cannot be instantiated directly using "),L7e=n(UQe,"CODE",{});var hSt=s(L7e);O9r=r(hSt,"__init__()"),hSt.forEach(t),V9r=r(UQe," (throws an error)."),UQe.forEach(t),X9r=i(Rl),Pt=n(Rl,"DIV",{class:!0});var mA=s(Pt);T(sx.$$.fragment,mA),z9r=i(mA),y7e=n(mA,"P",{});var pSt=s(y7e);W9r=r(pSt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),pSt.forEach(t),Q9r=i(mA),gc=n(mA,"P",{});var Ute=s(gc);H9r=r(Ute,`Note:
Loading a model from its configuration file does `),x7e=n(Ute,"STRONG",{});var _St=s(x7e);U9r=r(_St,"not"),_St.forEach(t),J9r=r(Ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),xJ=n(Ute,"A",{href:!0});var uSt=s(xJ);Y9r=r(uSt,"from_pretrained()"),uSt.forEach(t),K9r=r(Ute," to load the model weights."),Ute.forEach(t),Z9r=i(mA),T(C9.$$.fragment,mA),mA.forEach(t),eMr=i(Rl),$r=n(Rl,"DIV",{class:!0});var Pl=s($r);T(lx.$$.fragment,Pl),oMr=i(Pl),$7e=n(Pl,"P",{});var bSt=s($7e);rMr=r(bSt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),bSt.forEach(t),tMr=i(Pl),ln=n(Pl,"P",{});var gA=s(ln);aMr=r(gA,"The model class to instantiate is selected based on the "),k7e=n(gA,"CODE",{});var vSt=s(k7e);nMr=r(vSt,"model_type"),vSt.forEach(t),sMr=r(gA,` property of the config object (either
passed as an argument or loaded from `),S7e=n(gA,"CODE",{});var FSt=s(S7e);lMr=r(FSt,"pretrained_model_name_or_path"),FSt.forEach(t),iMr=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R7e=n(gA,"CODE",{});var TSt=s(R7e);dMr=r(TSt,"pretrained_model_name_or_path"),TSt.forEach(t),cMr=r(gA,":"),gA.forEach(t),fMr=i(Pl),se=n(Pl,"UL",{});var le=s(se);w9=n(le,"LI",{});var kje=s(w9);P7e=n(kje,"STRONG",{});var MSt=s(P7e);mMr=r(MSt,"albert"),MSt.forEach(t),gMr=r(kje," \u2014 "),$J=n(kje,"A",{href:!0});var ESt=s($J);hMr=r(ESt,"TFAlbertForPreTraining"),ESt.forEach(t),pMr=r(kje," (ALBERT model)"),kje.forEach(t),_Mr=i(le),A9=n(le,"LI",{});var Sje=s(A9);B7e=n(Sje,"STRONG",{});var CSt=s(B7e);uMr=r(CSt,"bart"),CSt.forEach(t),bMr=r(Sje," \u2014 "),kJ=n(Sje,"A",{href:!0});var wSt=s(kJ);vMr=r(wSt,"TFBartForConditionalGeneration"),wSt.forEach(t),FMr=r(Sje," (BART model)"),Sje.forEach(t),TMr=i(le),L9=n(le,"LI",{});var Rje=s(L9);I7e=n(Rje,"STRONG",{});var ASt=s(I7e);MMr=r(ASt,"bert"),ASt.forEach(t),EMr=r(Rje," \u2014 "),SJ=n(Rje,"A",{href:!0});var LSt=s(SJ);CMr=r(LSt,"TFBertForPreTraining"),LSt.forEach(t),wMr=r(Rje," (BERT model)"),Rje.forEach(t),AMr=i(le),y9=n(le,"LI",{});var Pje=s(y9);N7e=n(Pje,"STRONG",{});var ySt=s(N7e);LMr=r(ySt,"camembert"),ySt.forEach(t),yMr=r(Pje," \u2014 "),RJ=n(Pje,"A",{href:!0});var xSt=s(RJ);xMr=r(xSt,"TFCamembertForMaskedLM"),xSt.forEach(t),$Mr=r(Pje," (CamemBERT model)"),Pje.forEach(t),kMr=i(le),x9=n(le,"LI",{});var Bje=s(x9);q7e=n(Bje,"STRONG",{});var $St=s(q7e);SMr=r($St,"ctrl"),$St.forEach(t),RMr=r(Bje," \u2014 "),PJ=n(Bje,"A",{href:!0});var kSt=s(PJ);PMr=r(kSt,"TFCTRLLMHeadModel"),kSt.forEach(t),BMr=r(Bje," (CTRL model)"),Bje.forEach(t),IMr=i(le),$9=n(le,"LI",{});var Ije=s($9);j7e=n(Ije,"STRONG",{});var SSt=s(j7e);NMr=r(SSt,"distilbert"),SSt.forEach(t),qMr=r(Ije," \u2014 "),BJ=n(Ije,"A",{href:!0});var RSt=s(BJ);jMr=r(RSt,"TFDistilBertForMaskedLM"),RSt.forEach(t),DMr=r(Ije," (DistilBERT model)"),Ije.forEach(t),GMr=i(le),k9=n(le,"LI",{});var Nje=s(k9);D7e=n(Nje,"STRONG",{});var PSt=s(D7e);OMr=r(PSt,"electra"),PSt.forEach(t),VMr=r(Nje," \u2014 "),IJ=n(Nje,"A",{href:!0});var BSt=s(IJ);XMr=r(BSt,"TFElectraForPreTraining"),BSt.forEach(t),zMr=r(Nje," (ELECTRA model)"),Nje.forEach(t),WMr=i(le),S9=n(le,"LI",{});var qje=s(S9);G7e=n(qje,"STRONG",{});var ISt=s(G7e);QMr=r(ISt,"flaubert"),ISt.forEach(t),HMr=r(qje," \u2014 "),NJ=n(qje,"A",{href:!0});var NSt=s(NJ);UMr=r(NSt,"TFFlaubertWithLMHeadModel"),NSt.forEach(t),JMr=r(qje," (FlauBERT model)"),qje.forEach(t),YMr=i(le),R9=n(le,"LI",{});var jje=s(R9);O7e=n(jje,"STRONG",{});var qSt=s(O7e);KMr=r(qSt,"funnel"),qSt.forEach(t),ZMr=r(jje," \u2014 "),qJ=n(jje,"A",{href:!0});var jSt=s(qJ);e4r=r(jSt,"TFFunnelForPreTraining"),jSt.forEach(t),o4r=r(jje," (Funnel Transformer model)"),jje.forEach(t),r4r=i(le),P9=n(le,"LI",{});var Dje=s(P9);V7e=n(Dje,"STRONG",{});var DSt=s(V7e);t4r=r(DSt,"gpt2"),DSt.forEach(t),a4r=r(Dje," \u2014 "),jJ=n(Dje,"A",{href:!0});var GSt=s(jJ);n4r=r(GSt,"TFGPT2LMHeadModel"),GSt.forEach(t),s4r=r(Dje," (OpenAI GPT-2 model)"),Dje.forEach(t),l4r=i(le),B9=n(le,"LI",{});var Gje=s(B9);X7e=n(Gje,"STRONG",{});var OSt=s(X7e);i4r=r(OSt,"layoutlm"),OSt.forEach(t),d4r=r(Gje," \u2014 "),DJ=n(Gje,"A",{href:!0});var VSt=s(DJ);c4r=r(VSt,"TFLayoutLMForMaskedLM"),VSt.forEach(t),f4r=r(Gje," (LayoutLM model)"),Gje.forEach(t),m4r=i(le),I9=n(le,"LI",{});var Oje=s(I9);z7e=n(Oje,"STRONG",{});var XSt=s(z7e);g4r=r(XSt,"lxmert"),XSt.forEach(t),h4r=r(Oje," \u2014 "),GJ=n(Oje,"A",{href:!0});var zSt=s(GJ);p4r=r(zSt,"TFLxmertForPreTraining"),zSt.forEach(t),_4r=r(Oje," (LXMERT model)"),Oje.forEach(t),u4r=i(le),N9=n(le,"LI",{});var Vje=s(N9);W7e=n(Vje,"STRONG",{});var WSt=s(W7e);b4r=r(WSt,"mobilebert"),WSt.forEach(t),v4r=r(Vje," \u2014 "),OJ=n(Vje,"A",{href:!0});var QSt=s(OJ);F4r=r(QSt,"TFMobileBertForPreTraining"),QSt.forEach(t),T4r=r(Vje," (MobileBERT model)"),Vje.forEach(t),M4r=i(le),q9=n(le,"LI",{});var Xje=s(q9);Q7e=n(Xje,"STRONG",{});var HSt=s(Q7e);E4r=r(HSt,"mpnet"),HSt.forEach(t),C4r=r(Xje," \u2014 "),VJ=n(Xje,"A",{href:!0});var USt=s(VJ);w4r=r(USt,"TFMPNetForMaskedLM"),USt.forEach(t),A4r=r(Xje," (MPNet model)"),Xje.forEach(t),L4r=i(le),j9=n(le,"LI",{});var zje=s(j9);H7e=n(zje,"STRONG",{});var JSt=s(H7e);y4r=r(JSt,"openai-gpt"),JSt.forEach(t),x4r=r(zje," \u2014 "),XJ=n(zje,"A",{href:!0});var YSt=s(XJ);$4r=r(YSt,"TFOpenAIGPTLMHeadModel"),YSt.forEach(t),k4r=r(zje," (OpenAI GPT model)"),zje.forEach(t),S4r=i(le),D9=n(le,"LI",{});var Wje=s(D9);U7e=n(Wje,"STRONG",{});var KSt=s(U7e);R4r=r(KSt,"roberta"),KSt.forEach(t),P4r=r(Wje," \u2014 "),zJ=n(Wje,"A",{href:!0});var ZSt=s(zJ);B4r=r(ZSt,"TFRobertaForMaskedLM"),ZSt.forEach(t),I4r=r(Wje," (RoBERTa model)"),Wje.forEach(t),N4r=i(le),G9=n(le,"LI",{});var Qje=s(G9);J7e=n(Qje,"STRONG",{});var eRt=s(J7e);q4r=r(eRt,"t5"),eRt.forEach(t),j4r=r(Qje," \u2014 "),WJ=n(Qje,"A",{href:!0});var oRt=s(WJ);D4r=r(oRt,"TFT5ForConditionalGeneration"),oRt.forEach(t),G4r=r(Qje," (T5 model)"),Qje.forEach(t),O4r=i(le),O9=n(le,"LI",{});var Hje=s(O9);Y7e=n(Hje,"STRONG",{});var rRt=s(Y7e);V4r=r(rRt,"tapas"),rRt.forEach(t),X4r=r(Hje," \u2014 "),QJ=n(Hje,"A",{href:!0});var tRt=s(QJ);z4r=r(tRt,"TFTapasForMaskedLM"),tRt.forEach(t),W4r=r(Hje," (TAPAS model)"),Hje.forEach(t),Q4r=i(le),V9=n(le,"LI",{});var Uje=s(V9);K7e=n(Uje,"STRONG",{});var aRt=s(K7e);H4r=r(aRt,"transfo-xl"),aRt.forEach(t),U4r=r(Uje," \u2014 "),HJ=n(Uje,"A",{href:!0});var nRt=s(HJ);J4r=r(nRt,"TFTransfoXLLMHeadModel"),nRt.forEach(t),Y4r=r(Uje," (Transformer-XL model)"),Uje.forEach(t),K4r=i(le),X9=n(le,"LI",{});var Jje=s(X9);Z7e=n(Jje,"STRONG",{});var sRt=s(Z7e);Z4r=r(sRt,"vit_mae"),sRt.forEach(t),eEr=r(Jje," \u2014 "),UJ=n(Jje,"A",{href:!0});var lRt=s(UJ);oEr=r(lRt,"TFViTMAEForPreTraining"),lRt.forEach(t),rEr=r(Jje," (ViTMAE model)"),Jje.forEach(t),tEr=i(le),z9=n(le,"LI",{});var Yje=s(z9);e8e=n(Yje,"STRONG",{});var iRt=s(e8e);aEr=r(iRt,"xlm"),iRt.forEach(t),nEr=r(Yje," \u2014 "),JJ=n(Yje,"A",{href:!0});var dRt=s(JJ);sEr=r(dRt,"TFXLMWithLMHeadModel"),dRt.forEach(t),lEr=r(Yje," (XLM model)"),Yje.forEach(t),iEr=i(le),W9=n(le,"LI",{});var Kje=s(W9);o8e=n(Kje,"STRONG",{});var cRt=s(o8e);dEr=r(cRt,"xlm-roberta"),cRt.forEach(t),cEr=r(Kje," \u2014 "),YJ=n(Kje,"A",{href:!0});var fRt=s(YJ);fEr=r(fRt,"TFXLMRobertaForMaskedLM"),fRt.forEach(t),mEr=r(Kje," (XLM-RoBERTa model)"),Kje.forEach(t),gEr=i(le),Q9=n(le,"LI",{});var Zje=s(Q9);r8e=n(Zje,"STRONG",{});var mRt=s(r8e);hEr=r(mRt,"xlnet"),mRt.forEach(t),pEr=r(Zje," \u2014 "),KJ=n(Zje,"A",{href:!0});var gRt=s(KJ);_Er=r(gRt,"TFXLNetLMHeadModel"),gRt.forEach(t),uEr=r(Zje," (XLNet model)"),Zje.forEach(t),le.forEach(t),bEr=i(Pl),T(H9.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),Oze=i(f),hc=n(f,"H2",{class:!0});var JQe=s(hc);U9=n(JQe,"A",{id:!0,class:!0,href:!0});var hRt=s(U9);t8e=n(hRt,"SPAN",{});var pRt=s(t8e);T(ix.$$.fragment,pRt),pRt.forEach(t),hRt.forEach(t),vEr=i(JQe),a8e=n(JQe,"SPAN",{});var _Rt=s(a8e);FEr=r(_Rt,"TFAutoModelForCausalLM"),_Rt.forEach(t),JQe.forEach(t),Vze=i(f),tr=n(f,"DIV",{class:!0});var Bl=s(tr);T(dx.$$.fragment,Bl),TEr=i(Bl),pc=n(Bl,"P",{});var Jte=s(pc);MEr=r(Jte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ZJ=n(Jte,"A",{href:!0});var uRt=s(ZJ);EEr=r(uRt,"from_pretrained()"),uRt.forEach(t),CEr=r(Jte," class method or the "),eY=n(Jte,"A",{href:!0});var bRt=s(eY);wEr=r(bRt,"from_config()"),bRt.forEach(t),AEr=r(Jte,` class
method.`),Jte.forEach(t),LEr=i(Bl),cx=n(Bl,"P",{});var YQe=s(cx);yEr=r(YQe,"This class cannot be instantiated directly using "),n8e=n(YQe,"CODE",{});var vRt=s(n8e);xEr=r(vRt,"__init__()"),vRt.forEach(t),$Er=r(YQe," (throws an error)."),YQe.forEach(t),kEr=i(Bl),Bt=n(Bl,"DIV",{class:!0});var hA=s(Bt);T(fx.$$.fragment,hA),SEr=i(hA),s8e=n(hA,"P",{});var FRt=s(s8e);REr=r(FRt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),FRt.forEach(t),PEr=i(hA),_c=n(hA,"P",{});var Yte=s(_c);BEr=r(Yte,`Note:
Loading a model from its configuration file does `),l8e=n(Yte,"STRONG",{});var TRt=s(l8e);IEr=r(TRt,"not"),TRt.forEach(t),NEr=r(Yte,` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=n(Yte,"A",{href:!0});var MRt=s(oY);qEr=r(MRt,"from_pretrained()"),MRt.forEach(t),jEr=r(Yte," to load the model weights."),Yte.forEach(t),DEr=i(hA),T(J9.$$.fragment,hA),hA.forEach(t),GEr=i(Bl),kr=n(Bl,"DIV",{class:!0});var Il=s(kr);T(mx.$$.fragment,Il),OEr=i(Il),i8e=n(Il,"P",{});var ERt=s(i8e);VEr=r(ERt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ERt.forEach(t),XEr=i(Il),dn=n(Il,"P",{});var pA=s(dn);zEr=r(pA,"The model class to instantiate is selected based on the "),d8e=n(pA,"CODE",{});var CRt=s(d8e);WEr=r(CRt,"model_type"),CRt.forEach(t),QEr=r(pA,` property of the config object (either
passed as an argument or loaded from `),c8e=n(pA,"CODE",{});var wRt=s(c8e);HEr=r(wRt,"pretrained_model_name_or_path"),wRt.forEach(t),UEr=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f8e=n(pA,"CODE",{});var ARt=s(f8e);JEr=r(ARt,"pretrained_model_name_or_path"),ARt.forEach(t),YEr=r(pA,":"),pA.forEach(t),KEr=i(Il),Me=n(Il,"UL",{});var Ce=s(Me);Y9=n(Ce,"LI",{});var eDe=s(Y9);m8e=n(eDe,"STRONG",{});var LRt=s(m8e);ZEr=r(LRt,"bert"),LRt.forEach(t),eCr=r(eDe," \u2014 "),rY=n(eDe,"A",{href:!0});var yRt=s(rY);oCr=r(yRt,"TFBertLMHeadModel"),yRt.forEach(t),rCr=r(eDe," (BERT model)"),eDe.forEach(t),tCr=i(Ce),K9=n(Ce,"LI",{});var oDe=s(K9);g8e=n(oDe,"STRONG",{});var xRt=s(g8e);aCr=r(xRt,"camembert"),xRt.forEach(t),nCr=r(oDe," \u2014 "),tY=n(oDe,"A",{href:!0});var $Rt=s(tY);sCr=r($Rt,"TFCamembertForCausalLM"),$Rt.forEach(t),lCr=r(oDe," (CamemBERT model)"),oDe.forEach(t),iCr=i(Ce),Z9=n(Ce,"LI",{});var rDe=s(Z9);h8e=n(rDe,"STRONG",{});var kRt=s(h8e);dCr=r(kRt,"ctrl"),kRt.forEach(t),cCr=r(rDe," \u2014 "),aY=n(rDe,"A",{href:!0});var SRt=s(aY);fCr=r(SRt,"TFCTRLLMHeadModel"),SRt.forEach(t),mCr=r(rDe," (CTRL model)"),rDe.forEach(t),gCr=i(Ce),eM=n(Ce,"LI",{});var tDe=s(eM);p8e=n(tDe,"STRONG",{});var RRt=s(p8e);hCr=r(RRt,"gpt2"),RRt.forEach(t),pCr=r(tDe," \u2014 "),nY=n(tDe,"A",{href:!0});var PRt=s(nY);_Cr=r(PRt,"TFGPT2LMHeadModel"),PRt.forEach(t),uCr=r(tDe," (OpenAI GPT-2 model)"),tDe.forEach(t),bCr=i(Ce),oM=n(Ce,"LI",{});var aDe=s(oM);_8e=n(aDe,"STRONG",{});var BRt=s(_8e);vCr=r(BRt,"gptj"),BRt.forEach(t),FCr=r(aDe," \u2014 "),sY=n(aDe,"A",{href:!0});var IRt=s(sY);TCr=r(IRt,"TFGPTJForCausalLM"),IRt.forEach(t),MCr=r(aDe," (GPT-J model)"),aDe.forEach(t),ECr=i(Ce),rM=n(Ce,"LI",{});var nDe=s(rM);u8e=n(nDe,"STRONG",{});var NRt=s(u8e);CCr=r(NRt,"openai-gpt"),NRt.forEach(t),wCr=r(nDe," \u2014 "),lY=n(nDe,"A",{href:!0});var qRt=s(lY);ACr=r(qRt,"TFOpenAIGPTLMHeadModel"),qRt.forEach(t),LCr=r(nDe," (OpenAI GPT model)"),nDe.forEach(t),yCr=i(Ce),tM=n(Ce,"LI",{});var sDe=s(tM);b8e=n(sDe,"STRONG",{});var jRt=s(b8e);xCr=r(jRt,"opt"),jRt.forEach(t),$Cr=r(sDe," \u2014 "),iY=n(sDe,"A",{href:!0});var DRt=s(iY);kCr=r(DRt,"TFOPTForCausalLM"),DRt.forEach(t),SCr=r(sDe," (OPT model)"),sDe.forEach(t),RCr=i(Ce),aM=n(Ce,"LI",{});var lDe=s(aM);v8e=n(lDe,"STRONG",{});var GRt=s(v8e);PCr=r(GRt,"rembert"),GRt.forEach(t),BCr=r(lDe," \u2014 "),dY=n(lDe,"A",{href:!0});var ORt=s(dY);ICr=r(ORt,"TFRemBertForCausalLM"),ORt.forEach(t),NCr=r(lDe," (RemBERT model)"),lDe.forEach(t),qCr=i(Ce),nM=n(Ce,"LI",{});var iDe=s(nM);F8e=n(iDe,"STRONG",{});var VRt=s(F8e);jCr=r(VRt,"roberta"),VRt.forEach(t),DCr=r(iDe," \u2014 "),cY=n(iDe,"A",{href:!0});var XRt=s(cY);GCr=r(XRt,"TFRobertaForCausalLM"),XRt.forEach(t),OCr=r(iDe," (RoBERTa model)"),iDe.forEach(t),VCr=i(Ce),sM=n(Ce,"LI",{});var dDe=s(sM);T8e=n(dDe,"STRONG",{});var zRt=s(T8e);XCr=r(zRt,"roformer"),zRt.forEach(t),zCr=r(dDe," \u2014 "),fY=n(dDe,"A",{href:!0});var WRt=s(fY);WCr=r(WRt,"TFRoFormerForCausalLM"),WRt.forEach(t),QCr=r(dDe," (RoFormer model)"),dDe.forEach(t),HCr=i(Ce),lM=n(Ce,"LI",{});var cDe=s(lM);M8e=n(cDe,"STRONG",{});var QRt=s(M8e);UCr=r(QRt,"transfo-xl"),QRt.forEach(t),JCr=r(cDe," \u2014 "),mY=n(cDe,"A",{href:!0});var HRt=s(mY);YCr=r(HRt,"TFTransfoXLLMHeadModel"),HRt.forEach(t),KCr=r(cDe," (Transformer-XL model)"),cDe.forEach(t),ZCr=i(Ce),iM=n(Ce,"LI",{});var fDe=s(iM);E8e=n(fDe,"STRONG",{});var URt=s(E8e);e5r=r(URt,"xlm"),URt.forEach(t),o5r=r(fDe," \u2014 "),gY=n(fDe,"A",{href:!0});var JRt=s(gY);r5r=r(JRt,"TFXLMWithLMHeadModel"),JRt.forEach(t),t5r=r(fDe," (XLM model)"),fDe.forEach(t),a5r=i(Ce),dM=n(Ce,"LI",{});var mDe=s(dM);C8e=n(mDe,"STRONG",{});var YRt=s(C8e);n5r=r(YRt,"xlnet"),YRt.forEach(t),s5r=r(mDe," \u2014 "),hY=n(mDe,"A",{href:!0});var KRt=s(hY);l5r=r(KRt,"TFXLNetLMHeadModel"),KRt.forEach(t),i5r=r(mDe," (XLNet model)"),mDe.forEach(t),Ce.forEach(t),d5r=i(Il),T(cM.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),Xze=i(f),uc=n(f,"H2",{class:!0});var KQe=s(uc);fM=n(KQe,"A",{id:!0,class:!0,href:!0});var ZRt=s(fM);w8e=n(ZRt,"SPAN",{});var ePt=s(w8e);T(gx.$$.fragment,ePt),ePt.forEach(t),ZRt.forEach(t),c5r=i(KQe),A8e=n(KQe,"SPAN",{});var oPt=s(A8e);f5r=r(oPt,"TFAutoModelForImageClassification"),oPt.forEach(t),KQe.forEach(t),zze=i(f),ar=n(f,"DIV",{class:!0});var Nl=s(ar);T(hx.$$.fragment,Nl),m5r=i(Nl),bc=n(Nl,"P",{});var Kte=s(bc);g5r=r(Kte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pY=n(Kte,"A",{href:!0});var rPt=s(pY);h5r=r(rPt,"from_pretrained()"),rPt.forEach(t),p5r=r(Kte," class method or the "),_Y=n(Kte,"A",{href:!0});var tPt=s(_Y);_5r=r(tPt,"from_config()"),tPt.forEach(t),u5r=r(Kte,` class
method.`),Kte.forEach(t),b5r=i(Nl),px=n(Nl,"P",{});var ZQe=s(px);v5r=r(ZQe,"This class cannot be instantiated directly using "),L8e=n(ZQe,"CODE",{});var aPt=s(L8e);F5r=r(aPt,"__init__()"),aPt.forEach(t),T5r=r(ZQe," (throws an error)."),ZQe.forEach(t),M5r=i(Nl),It=n(Nl,"DIV",{class:!0});var _A=s(It);T(_x.$$.fragment,_A),E5r=i(_A),y8e=n(_A,"P",{});var nPt=s(y8e);C5r=r(nPt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),nPt.forEach(t),w5r=i(_A),vc=n(_A,"P",{});var Zte=s(vc);A5r=r(Zte,`Note:
Loading a model from its configuration file does `),x8e=n(Zte,"STRONG",{});var sPt=s(x8e);L5r=r(sPt,"not"),sPt.forEach(t),y5r=r(Zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),uY=n(Zte,"A",{href:!0});var lPt=s(uY);x5r=r(lPt,"from_pretrained()"),lPt.forEach(t),$5r=r(Zte," to load the model weights."),Zte.forEach(t),k5r=i(_A),T(mM.$$.fragment,_A),_A.forEach(t),S5r=i(Nl),Sr=n(Nl,"DIV",{class:!0});var ql=s(Sr);T(ux.$$.fragment,ql),R5r=i(ql),$8e=n(ql,"P",{});var iPt=s($8e);P5r=r(iPt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),iPt.forEach(t),B5r=i(ql),cn=n(ql,"P",{});var uA=s(cn);I5r=r(uA,"The model class to instantiate is selected based on the "),k8e=n(uA,"CODE",{});var dPt=s(k8e);N5r=r(dPt,"model_type"),dPt.forEach(t),q5r=r(uA,` property of the config object (either
passed as an argument or loaded from `),S8e=n(uA,"CODE",{});var cPt=s(S8e);j5r=r(cPt,"pretrained_model_name_or_path"),cPt.forEach(t),D5r=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R8e=n(uA,"CODE",{});var fPt=s(R8e);G5r=r(fPt,"pretrained_model_name_or_path"),fPt.forEach(t),O5r=r(uA,":"),uA.forEach(t),V5r=i(ql),We=n(ql,"UL",{});var ot=s(We);gM=n(ot,"LI",{});var gDe=s(gM);P8e=n(gDe,"STRONG",{});var mPt=s(P8e);X5r=r(mPt,"convnext"),mPt.forEach(t),z5r=r(gDe," \u2014 "),bY=n(gDe,"A",{href:!0});var gPt=s(bY);W5r=r(gPt,"TFConvNextForImageClassification"),gPt.forEach(t),Q5r=r(gDe," (ConvNeXT model)"),gDe.forEach(t),H5r=i(ot),hM=n(ot,"LI",{});var hDe=s(hM);B8e=n(hDe,"STRONG",{});var hPt=s(B8e);U5r=r(hPt,"data2vec-vision"),hPt.forEach(t),J5r=r(hDe," \u2014 "),vY=n(hDe,"A",{href:!0});var pPt=s(vY);Y5r=r(pPt,"TFData2VecVisionForImageClassification"),pPt.forEach(t),K5r=r(hDe," (Data2VecVision model)"),hDe.forEach(t),Z5r=i(ot),Zs=n(ot,"LI",{});var XS=s(Zs);I8e=n(XS,"STRONG",{});var _Pt=s(I8e);e0r=r(_Pt,"deit"),_Pt.forEach(t),o0r=r(XS," \u2014 "),FY=n(XS,"A",{href:!0});var uPt=s(FY);r0r=r(uPt,"TFDeiTForImageClassification"),uPt.forEach(t),t0r=r(XS," or "),TY=n(XS,"A",{href:!0});var bPt=s(TY);a0r=r(bPt,"TFDeiTForImageClassificationWithTeacher"),bPt.forEach(t),n0r=r(XS," (DeiT model)"),XS.forEach(t),s0r=i(ot),pM=n(ot,"LI",{});var pDe=s(pM);N8e=n(pDe,"STRONG",{});var vPt=s(N8e);l0r=r(vPt,"regnet"),vPt.forEach(t),i0r=r(pDe," \u2014 "),MY=n(pDe,"A",{href:!0});var FPt=s(MY);d0r=r(FPt,"TFRegNetForImageClassification"),FPt.forEach(t),c0r=r(pDe," (RegNet model)"),pDe.forEach(t),f0r=i(ot),_M=n(ot,"LI",{});var _De=s(_M);q8e=n(_De,"STRONG",{});var TPt=s(q8e);m0r=r(TPt,"resnet"),TPt.forEach(t),g0r=r(_De," \u2014 "),EY=n(_De,"A",{href:!0});var MPt=s(EY);h0r=r(MPt,"TFResNetForImageClassification"),MPt.forEach(t),p0r=r(_De," (ResNet model)"),_De.forEach(t),_0r=i(ot),uM=n(ot,"LI",{});var uDe=s(uM);j8e=n(uDe,"STRONG",{});var EPt=s(j8e);u0r=r(EPt,"swin"),EPt.forEach(t),b0r=r(uDe," \u2014 "),CY=n(uDe,"A",{href:!0});var CPt=s(CY);v0r=r(CPt,"TFSwinForImageClassification"),CPt.forEach(t),F0r=r(uDe," (Swin Transformer model)"),uDe.forEach(t),T0r=i(ot),bM=n(ot,"LI",{});var bDe=s(bM);D8e=n(bDe,"STRONG",{});var wPt=s(D8e);M0r=r(wPt,"vit"),wPt.forEach(t),E0r=r(bDe," \u2014 "),wY=n(bDe,"A",{href:!0});var APt=s(wY);C0r=r(APt,"TFViTForImageClassification"),APt.forEach(t),w0r=r(bDe," (ViT model)"),bDe.forEach(t),ot.forEach(t),A0r=i(ql),T(vM.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),Wze=i(f),Fc=n(f,"H2",{class:!0});var eHe=s(Fc);FM=n(eHe,"A",{id:!0,class:!0,href:!0});var LPt=s(FM);G8e=n(LPt,"SPAN",{});var yPt=s(G8e);T(bx.$$.fragment,yPt),yPt.forEach(t),LPt.forEach(t),L0r=i(eHe),O8e=n(eHe,"SPAN",{});var xPt=s(O8e);y0r=r(xPt,"TFAutoModelForMaskedLM"),xPt.forEach(t),eHe.forEach(t),Qze=i(f),nr=n(f,"DIV",{class:!0});var jl=s(nr);T(vx.$$.fragment,jl),x0r=i(jl),Tc=n(jl,"P",{});var eae=s(Tc);$0r=r(eae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),AY=n(eae,"A",{href:!0});var $Pt=s(AY);k0r=r($Pt,"from_pretrained()"),$Pt.forEach(t),S0r=r(eae," class method or the "),LY=n(eae,"A",{href:!0});var kPt=s(LY);R0r=r(kPt,"from_config()"),kPt.forEach(t),P0r=r(eae,` class
method.`),eae.forEach(t),B0r=i(jl),Fx=n(jl,"P",{});var oHe=s(Fx);I0r=r(oHe,"This class cannot be instantiated directly using "),V8e=n(oHe,"CODE",{});var SPt=s(V8e);N0r=r(SPt,"__init__()"),SPt.forEach(t),q0r=r(oHe," (throws an error)."),oHe.forEach(t),j0r=i(jl),Nt=n(jl,"DIV",{class:!0});var bA=s(Nt);T(Tx.$$.fragment,bA),D0r=i(bA),X8e=n(bA,"P",{});var RPt=s(X8e);G0r=r(RPt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),RPt.forEach(t),O0r=i(bA),Mc=n(bA,"P",{});var oae=s(Mc);V0r=r(oae,`Note:
Loading a model from its configuration file does `),z8e=n(oae,"STRONG",{});var PPt=s(z8e);X0r=r(PPt,"not"),PPt.forEach(t),z0r=r(oae,` load the model weights. It only affects the
model\u2019s configuration. Use `),yY=n(oae,"A",{href:!0});var BPt=s(yY);W0r=r(BPt,"from_pretrained()"),BPt.forEach(t),Q0r=r(oae," to load the model weights."),oae.forEach(t),H0r=i(bA),T(TM.$$.fragment,bA),bA.forEach(t),U0r=i(jl),Rr=n(jl,"DIV",{class:!0});var Dl=s(Rr);T(Mx.$$.fragment,Dl),J0r=i(Dl),W8e=n(Dl,"P",{});var IPt=s(W8e);Y0r=r(IPt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),IPt.forEach(t),K0r=i(Dl),fn=n(Dl,"P",{});var vA=s(fn);Z0r=r(vA,"The model class to instantiate is selected based on the "),Q8e=n(vA,"CODE",{});var NPt=s(Q8e);ewr=r(NPt,"model_type"),NPt.forEach(t),owr=r(vA,` property of the config object (either
passed as an argument or loaded from `),H8e=n(vA,"CODE",{});var qPt=s(H8e);rwr=r(qPt,"pretrained_model_name_or_path"),qPt.forEach(t),twr=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U8e=n(vA,"CODE",{});var jPt=s(U8e);awr=r(jPt,"pretrained_model_name_or_path"),jPt.forEach(t),nwr=r(vA,":"),vA.forEach(t),swr=i(Dl),ie=n(Dl,"UL",{});var ge=s(ie);MM=n(ge,"LI",{});var vDe=s(MM);J8e=n(vDe,"STRONG",{});var DPt=s(J8e);lwr=r(DPt,"albert"),DPt.forEach(t),iwr=r(vDe," \u2014 "),xY=n(vDe,"A",{href:!0});var GPt=s(xY);dwr=r(GPt,"TFAlbertForMaskedLM"),GPt.forEach(t),cwr=r(vDe," (ALBERT model)"),vDe.forEach(t),fwr=i(ge),EM=n(ge,"LI",{});var FDe=s(EM);Y8e=n(FDe,"STRONG",{});var OPt=s(Y8e);mwr=r(OPt,"bert"),OPt.forEach(t),gwr=r(FDe," \u2014 "),$Y=n(FDe,"A",{href:!0});var VPt=s($Y);hwr=r(VPt,"TFBertForMaskedLM"),VPt.forEach(t),pwr=r(FDe," (BERT model)"),FDe.forEach(t),_wr=i(ge),CM=n(ge,"LI",{});var TDe=s(CM);K8e=n(TDe,"STRONG",{});var XPt=s(K8e);uwr=r(XPt,"camembert"),XPt.forEach(t),bwr=r(TDe," \u2014 "),kY=n(TDe,"A",{href:!0});var zPt=s(kY);vwr=r(zPt,"TFCamembertForMaskedLM"),zPt.forEach(t),Fwr=r(TDe," (CamemBERT model)"),TDe.forEach(t),Twr=i(ge),wM=n(ge,"LI",{});var MDe=s(wM);Z8e=n(MDe,"STRONG",{});var WPt=s(Z8e);Mwr=r(WPt,"convbert"),WPt.forEach(t),Ewr=r(MDe," \u2014 "),SY=n(MDe,"A",{href:!0});var QPt=s(SY);Cwr=r(QPt,"TFConvBertForMaskedLM"),QPt.forEach(t),wwr=r(MDe," (ConvBERT model)"),MDe.forEach(t),Awr=i(ge),AM=n(ge,"LI",{});var EDe=s(AM);e9e=n(EDe,"STRONG",{});var HPt=s(e9e);Lwr=r(HPt,"deberta"),HPt.forEach(t),ywr=r(EDe," \u2014 "),RY=n(EDe,"A",{href:!0});var UPt=s(RY);xwr=r(UPt,"TFDebertaForMaskedLM"),UPt.forEach(t),$wr=r(EDe," (DeBERTa model)"),EDe.forEach(t),kwr=i(ge),LM=n(ge,"LI",{});var CDe=s(LM);o9e=n(CDe,"STRONG",{});var JPt=s(o9e);Swr=r(JPt,"deberta-v2"),JPt.forEach(t),Rwr=r(CDe," \u2014 "),PY=n(CDe,"A",{href:!0});var YPt=s(PY);Pwr=r(YPt,"TFDebertaV2ForMaskedLM"),YPt.forEach(t),Bwr=r(CDe," (DeBERTa-v2 model)"),CDe.forEach(t),Iwr=i(ge),yM=n(ge,"LI",{});var wDe=s(yM);r9e=n(wDe,"STRONG",{});var KPt=s(r9e);Nwr=r(KPt,"distilbert"),KPt.forEach(t),qwr=r(wDe," \u2014 "),BY=n(wDe,"A",{href:!0});var ZPt=s(BY);jwr=r(ZPt,"TFDistilBertForMaskedLM"),ZPt.forEach(t),Dwr=r(wDe," (DistilBERT model)"),wDe.forEach(t),Gwr=i(ge),xM=n(ge,"LI",{});var ADe=s(xM);t9e=n(ADe,"STRONG",{});var eBt=s(t9e);Owr=r(eBt,"electra"),eBt.forEach(t),Vwr=r(ADe," \u2014 "),IY=n(ADe,"A",{href:!0});var oBt=s(IY);Xwr=r(oBt,"TFElectraForMaskedLM"),oBt.forEach(t),zwr=r(ADe," (ELECTRA model)"),ADe.forEach(t),Wwr=i(ge),$M=n(ge,"LI",{});var LDe=s($M);a9e=n(LDe,"STRONG",{});var rBt=s(a9e);Qwr=r(rBt,"flaubert"),rBt.forEach(t),Hwr=r(LDe," \u2014 "),NY=n(LDe,"A",{href:!0});var tBt=s(NY);Uwr=r(tBt,"TFFlaubertWithLMHeadModel"),tBt.forEach(t),Jwr=r(LDe," (FlauBERT model)"),LDe.forEach(t),Ywr=i(ge),kM=n(ge,"LI",{});var yDe=s(kM);n9e=n(yDe,"STRONG",{});var aBt=s(n9e);Kwr=r(aBt,"funnel"),aBt.forEach(t),Zwr=r(yDe," \u2014 "),qY=n(yDe,"A",{href:!0});var nBt=s(qY);eAr=r(nBt,"TFFunnelForMaskedLM"),nBt.forEach(t),oAr=r(yDe," (Funnel Transformer model)"),yDe.forEach(t),rAr=i(ge),SM=n(ge,"LI",{});var xDe=s(SM);s9e=n(xDe,"STRONG",{});var sBt=s(s9e);tAr=r(sBt,"layoutlm"),sBt.forEach(t),aAr=r(xDe," \u2014 "),jY=n(xDe,"A",{href:!0});var lBt=s(jY);nAr=r(lBt,"TFLayoutLMForMaskedLM"),lBt.forEach(t),sAr=r(xDe," (LayoutLM model)"),xDe.forEach(t),lAr=i(ge),RM=n(ge,"LI",{});var $De=s(RM);l9e=n($De,"STRONG",{});var iBt=s(l9e);iAr=r(iBt,"longformer"),iBt.forEach(t),dAr=r($De," \u2014 "),DY=n($De,"A",{href:!0});var dBt=s(DY);cAr=r(dBt,"TFLongformerForMaskedLM"),dBt.forEach(t),fAr=r($De," (Longformer model)"),$De.forEach(t),mAr=i(ge),PM=n(ge,"LI",{});var kDe=s(PM);i9e=n(kDe,"STRONG",{});var cBt=s(i9e);gAr=r(cBt,"mobilebert"),cBt.forEach(t),hAr=r(kDe," \u2014 "),GY=n(kDe,"A",{href:!0});var fBt=s(GY);pAr=r(fBt,"TFMobileBertForMaskedLM"),fBt.forEach(t),_Ar=r(kDe," (MobileBERT model)"),kDe.forEach(t),uAr=i(ge),BM=n(ge,"LI",{});var SDe=s(BM);d9e=n(SDe,"STRONG",{});var mBt=s(d9e);bAr=r(mBt,"mpnet"),mBt.forEach(t),vAr=r(SDe," \u2014 "),OY=n(SDe,"A",{href:!0});var gBt=s(OY);FAr=r(gBt,"TFMPNetForMaskedLM"),gBt.forEach(t),TAr=r(SDe," (MPNet model)"),SDe.forEach(t),MAr=i(ge),IM=n(ge,"LI",{});var RDe=s(IM);c9e=n(RDe,"STRONG",{});var hBt=s(c9e);EAr=r(hBt,"rembert"),hBt.forEach(t),CAr=r(RDe," \u2014 "),VY=n(RDe,"A",{href:!0});var pBt=s(VY);wAr=r(pBt,"TFRemBertForMaskedLM"),pBt.forEach(t),AAr=r(RDe," (RemBERT model)"),RDe.forEach(t),LAr=i(ge),NM=n(ge,"LI",{});var PDe=s(NM);f9e=n(PDe,"STRONG",{});var _Bt=s(f9e);yAr=r(_Bt,"roberta"),_Bt.forEach(t),xAr=r(PDe," \u2014 "),XY=n(PDe,"A",{href:!0});var uBt=s(XY);$Ar=r(uBt,"TFRobertaForMaskedLM"),uBt.forEach(t),kAr=r(PDe," (RoBERTa model)"),PDe.forEach(t),SAr=i(ge),qM=n(ge,"LI",{});var BDe=s(qM);m9e=n(BDe,"STRONG",{});var bBt=s(m9e);RAr=r(bBt,"roformer"),bBt.forEach(t),PAr=r(BDe," \u2014 "),zY=n(BDe,"A",{href:!0});var vBt=s(zY);BAr=r(vBt,"TFRoFormerForMaskedLM"),vBt.forEach(t),IAr=r(BDe," (RoFormer model)"),BDe.forEach(t),NAr=i(ge),jM=n(ge,"LI",{});var IDe=s(jM);g9e=n(IDe,"STRONG",{});var FBt=s(g9e);qAr=r(FBt,"tapas"),FBt.forEach(t),jAr=r(IDe," \u2014 "),WY=n(IDe,"A",{href:!0});var TBt=s(WY);DAr=r(TBt,"TFTapasForMaskedLM"),TBt.forEach(t),GAr=r(IDe," (TAPAS model)"),IDe.forEach(t),OAr=i(ge),DM=n(ge,"LI",{});var NDe=s(DM);h9e=n(NDe,"STRONG",{});var MBt=s(h9e);VAr=r(MBt,"xlm"),MBt.forEach(t),XAr=r(NDe," \u2014 "),QY=n(NDe,"A",{href:!0});var EBt=s(QY);zAr=r(EBt,"TFXLMWithLMHeadModel"),EBt.forEach(t),WAr=r(NDe," (XLM model)"),NDe.forEach(t),QAr=i(ge),GM=n(ge,"LI",{});var qDe=s(GM);p9e=n(qDe,"STRONG",{});var CBt=s(p9e);HAr=r(CBt,"xlm-roberta"),CBt.forEach(t),UAr=r(qDe," \u2014 "),HY=n(qDe,"A",{href:!0});var wBt=s(HY);JAr=r(wBt,"TFXLMRobertaForMaskedLM"),wBt.forEach(t),YAr=r(qDe," (XLM-RoBERTa model)"),qDe.forEach(t),ge.forEach(t),KAr=i(Dl),T(OM.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),Hze=i(f),Ec=n(f,"H2",{class:!0});var rHe=s(Ec);VM=n(rHe,"A",{id:!0,class:!0,href:!0});var ABt=s(VM);_9e=n(ABt,"SPAN",{});var LBt=s(_9e);T(Ex.$$.fragment,LBt),LBt.forEach(t),ABt.forEach(t),ZAr=i(rHe),u9e=n(rHe,"SPAN",{});var yBt=s(u9e);e6r=r(yBt,"TFAutoModelForSeq2SeqLM"),yBt.forEach(t),rHe.forEach(t),Uze=i(f),sr=n(f,"DIV",{class:!0});var Gl=s(sr);T(Cx.$$.fragment,Gl),o6r=i(Gl),Cc=n(Gl,"P",{});var rae=s(Cc);r6r=r(rae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),UY=n(rae,"A",{href:!0});var xBt=s(UY);t6r=r(xBt,"from_pretrained()"),xBt.forEach(t),a6r=r(rae," class method or the "),JY=n(rae,"A",{href:!0});var $Bt=s(JY);n6r=r($Bt,"from_config()"),$Bt.forEach(t),s6r=r(rae,` class
method.`),rae.forEach(t),l6r=i(Gl),wx=n(Gl,"P",{});var tHe=s(wx);i6r=r(tHe,"This class cannot be instantiated directly using "),b9e=n(tHe,"CODE",{});var kBt=s(b9e);d6r=r(kBt,"__init__()"),kBt.forEach(t),c6r=r(tHe," (throws an error)."),tHe.forEach(t),f6r=i(Gl),qt=n(Gl,"DIV",{class:!0});var FA=s(qt);T(Ax.$$.fragment,FA),m6r=i(FA),v9e=n(FA,"P",{});var SBt=s(v9e);g6r=r(SBt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),SBt.forEach(t),h6r=i(FA),wc=n(FA,"P",{});var tae=s(wc);p6r=r(tae,`Note:
Loading a model from its configuration file does `),F9e=n(tae,"STRONG",{});var RBt=s(F9e);_6r=r(RBt,"not"),RBt.forEach(t),u6r=r(tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),YY=n(tae,"A",{href:!0});var PBt=s(YY);b6r=r(PBt,"from_pretrained()"),PBt.forEach(t),v6r=r(tae," to load the model weights."),tae.forEach(t),F6r=i(FA),T(XM.$$.fragment,FA),FA.forEach(t),T6r=i(Gl),Pr=n(Gl,"DIV",{class:!0});var Ol=s(Pr);T(Lx.$$.fragment,Ol),M6r=i(Ol),T9e=n(Ol,"P",{});var BBt=s(T9e);E6r=r(BBt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),BBt.forEach(t),C6r=i(Ol),mn=n(Ol,"P",{});var TA=s(mn);w6r=r(TA,"The model class to instantiate is selected based on the "),M9e=n(TA,"CODE",{});var IBt=s(M9e);A6r=r(IBt,"model_type"),IBt.forEach(t),L6r=r(TA,` property of the config object (either
passed as an argument or loaded from `),E9e=n(TA,"CODE",{});var NBt=s(E9e);y6r=r(NBt,"pretrained_model_name_or_path"),NBt.forEach(t),x6r=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C9e=n(TA,"CODE",{});var qBt=s(C9e);$6r=r(qBt,"pretrained_model_name_or_path"),qBt.forEach(t),k6r=r(TA,":"),TA.forEach(t),S6r=i(Ol),ye=n(Ol,"UL",{});var Ie=s(ye);zM=n(Ie,"LI",{});var jDe=s(zM);w9e=n(jDe,"STRONG",{});var jBt=s(w9e);R6r=r(jBt,"bart"),jBt.forEach(t),P6r=r(jDe," \u2014 "),KY=n(jDe,"A",{href:!0});var DBt=s(KY);B6r=r(DBt,"TFBartForConditionalGeneration"),DBt.forEach(t),I6r=r(jDe," (BART model)"),jDe.forEach(t),N6r=i(Ie),WM=n(Ie,"LI",{});var DDe=s(WM);A9e=n(DDe,"STRONG",{});var GBt=s(A9e);q6r=r(GBt,"blenderbot"),GBt.forEach(t),j6r=r(DDe," \u2014 "),ZY=n(DDe,"A",{href:!0});var OBt=s(ZY);D6r=r(OBt,"TFBlenderbotForConditionalGeneration"),OBt.forEach(t),G6r=r(DDe," (Blenderbot model)"),DDe.forEach(t),O6r=i(Ie),QM=n(Ie,"LI",{});var GDe=s(QM);L9e=n(GDe,"STRONG",{});var VBt=s(L9e);V6r=r(VBt,"blenderbot-small"),VBt.forEach(t),X6r=r(GDe," \u2014 "),eK=n(GDe,"A",{href:!0});var XBt=s(eK);z6r=r(XBt,"TFBlenderbotSmallForConditionalGeneration"),XBt.forEach(t),W6r=r(GDe," (BlenderbotSmall model)"),GDe.forEach(t),Q6r=i(Ie),HM=n(Ie,"LI",{});var ODe=s(HM);y9e=n(ODe,"STRONG",{});var zBt=s(y9e);H6r=r(zBt,"encoder-decoder"),zBt.forEach(t),U6r=r(ODe," \u2014 "),oK=n(ODe,"A",{href:!0});var WBt=s(oK);J6r=r(WBt,"TFEncoderDecoderModel"),WBt.forEach(t),Y6r=r(ODe," (Encoder decoder model)"),ODe.forEach(t),K6r=i(Ie),UM=n(Ie,"LI",{});var VDe=s(UM);x9e=n(VDe,"STRONG",{});var QBt=s(x9e);Z6r=r(QBt,"led"),QBt.forEach(t),eLr=r(VDe," \u2014 "),rK=n(VDe,"A",{href:!0});var HBt=s(rK);oLr=r(HBt,"TFLEDForConditionalGeneration"),HBt.forEach(t),rLr=r(VDe," (LED model)"),VDe.forEach(t),tLr=i(Ie),JM=n(Ie,"LI",{});var XDe=s(JM);$9e=n(XDe,"STRONG",{});var UBt=s($9e);aLr=r(UBt,"marian"),UBt.forEach(t),nLr=r(XDe," \u2014 "),tK=n(XDe,"A",{href:!0});var JBt=s(tK);sLr=r(JBt,"TFMarianMTModel"),JBt.forEach(t),lLr=r(XDe," (Marian model)"),XDe.forEach(t),iLr=i(Ie),YM=n(Ie,"LI",{});var zDe=s(YM);k9e=n(zDe,"STRONG",{});var YBt=s(k9e);dLr=r(YBt,"mbart"),YBt.forEach(t),cLr=r(zDe," \u2014 "),aK=n(zDe,"A",{href:!0});var KBt=s(aK);fLr=r(KBt,"TFMBartForConditionalGeneration"),KBt.forEach(t),mLr=r(zDe," (mBART model)"),zDe.forEach(t),gLr=i(Ie),KM=n(Ie,"LI",{});var WDe=s(KM);S9e=n(WDe,"STRONG",{});var ZBt=s(S9e);hLr=r(ZBt,"mt5"),ZBt.forEach(t),pLr=r(WDe," \u2014 "),nK=n(WDe,"A",{href:!0});var eIt=s(nK);_Lr=r(eIt,"TFMT5ForConditionalGeneration"),eIt.forEach(t),uLr=r(WDe," (MT5 model)"),WDe.forEach(t),bLr=i(Ie),ZM=n(Ie,"LI",{});var QDe=s(ZM);R9e=n(QDe,"STRONG",{});var oIt=s(R9e);vLr=r(oIt,"pegasus"),oIt.forEach(t),FLr=r(QDe," \u2014 "),sK=n(QDe,"A",{href:!0});var rIt=s(sK);TLr=r(rIt,"TFPegasusForConditionalGeneration"),rIt.forEach(t),MLr=r(QDe," (Pegasus model)"),QDe.forEach(t),ELr=i(Ie),e4=n(Ie,"LI",{});var HDe=s(e4);P9e=n(HDe,"STRONG",{});var tIt=s(P9e);CLr=r(tIt,"t5"),tIt.forEach(t),wLr=r(HDe," \u2014 "),lK=n(HDe,"A",{href:!0});var aIt=s(lK);ALr=r(aIt,"TFT5ForConditionalGeneration"),aIt.forEach(t),LLr=r(HDe," (T5 model)"),HDe.forEach(t),Ie.forEach(t),yLr=i(Ol),T(o4.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),Jze=i(f),Ac=n(f,"H2",{class:!0});var aHe=s(Ac);r4=n(aHe,"A",{id:!0,class:!0,href:!0});var nIt=s(r4);B9e=n(nIt,"SPAN",{});var sIt=s(B9e);T(yx.$$.fragment,sIt),sIt.forEach(t),nIt.forEach(t),xLr=i(aHe),I9e=n(aHe,"SPAN",{});var lIt=s(I9e);$Lr=r(lIt,"TFAutoModelForSequenceClassification"),lIt.forEach(t),aHe.forEach(t),Yze=i(f),lr=n(f,"DIV",{class:!0});var Vl=s(lr);T(xx.$$.fragment,Vl),kLr=i(Vl),Lc=n(Vl,"P",{});var aae=s(Lc);SLr=r(aae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),iK=n(aae,"A",{href:!0});var iIt=s(iK);RLr=r(iIt,"from_pretrained()"),iIt.forEach(t),PLr=r(aae," class method or the "),dK=n(aae,"A",{href:!0});var dIt=s(dK);BLr=r(dIt,"from_config()"),dIt.forEach(t),ILr=r(aae,` class
method.`),aae.forEach(t),NLr=i(Vl),$x=n(Vl,"P",{});var nHe=s($x);qLr=r(nHe,"This class cannot be instantiated directly using "),N9e=n(nHe,"CODE",{});var cIt=s(N9e);jLr=r(cIt,"__init__()"),cIt.forEach(t),DLr=r(nHe," (throws an error)."),nHe.forEach(t),GLr=i(Vl),jt=n(Vl,"DIV",{class:!0});var MA=s(jt);T(kx.$$.fragment,MA),OLr=i(MA),q9e=n(MA,"P",{});var fIt=s(q9e);VLr=r(fIt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),fIt.forEach(t),XLr=i(MA),yc=n(MA,"P",{});var nae=s(yc);zLr=r(nae,`Note:
Loading a model from its configuration file does `),j9e=n(nae,"STRONG",{});var mIt=s(j9e);WLr=r(mIt,"not"),mIt.forEach(t),QLr=r(nae,` load the model weights. It only affects the
model\u2019s configuration. Use `),cK=n(nae,"A",{href:!0});var gIt=s(cK);HLr=r(gIt,"from_pretrained()"),gIt.forEach(t),ULr=r(nae," to load the model weights."),nae.forEach(t),JLr=i(MA),T(t4.$$.fragment,MA),MA.forEach(t),YLr=i(Vl),Br=n(Vl,"DIV",{class:!0});var Xl=s(Br);T(Sx.$$.fragment,Xl),KLr=i(Xl),D9e=n(Xl,"P",{});var hIt=s(D9e);ZLr=r(hIt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),hIt.forEach(t),eyr=i(Xl),gn=n(Xl,"P",{});var EA=s(gn);oyr=r(EA,"The model class to instantiate is selected based on the "),G9e=n(EA,"CODE",{});var pIt=s(G9e);ryr=r(pIt,"model_type"),pIt.forEach(t),tyr=r(EA,` property of the config object (either
passed as an argument or loaded from `),O9e=n(EA,"CODE",{});var _It=s(O9e);ayr=r(_It,"pretrained_model_name_or_path"),_It.forEach(t),nyr=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V9e=n(EA,"CODE",{});var uIt=s(V9e);syr=r(uIt,"pretrained_model_name_or_path"),uIt.forEach(t),lyr=r(EA,":"),EA.forEach(t),iyr=i(Xl),te=n(Xl,"UL",{});var ne=s(te);a4=n(ne,"LI",{});var UDe=s(a4);X9e=n(UDe,"STRONG",{});var bIt=s(X9e);dyr=r(bIt,"albert"),bIt.forEach(t),cyr=r(UDe," \u2014 "),fK=n(UDe,"A",{href:!0});var vIt=s(fK);fyr=r(vIt,"TFAlbertForSequenceClassification"),vIt.forEach(t),myr=r(UDe," (ALBERT model)"),UDe.forEach(t),gyr=i(ne),n4=n(ne,"LI",{});var JDe=s(n4);z9e=n(JDe,"STRONG",{});var FIt=s(z9e);hyr=r(FIt,"bert"),FIt.forEach(t),pyr=r(JDe," \u2014 "),mK=n(JDe,"A",{href:!0});var TIt=s(mK);_yr=r(TIt,"TFBertForSequenceClassification"),TIt.forEach(t),uyr=r(JDe," (BERT model)"),JDe.forEach(t),byr=i(ne),s4=n(ne,"LI",{});var YDe=s(s4);W9e=n(YDe,"STRONG",{});var MIt=s(W9e);vyr=r(MIt,"camembert"),MIt.forEach(t),Fyr=r(YDe," \u2014 "),gK=n(YDe,"A",{href:!0});var EIt=s(gK);Tyr=r(EIt,"TFCamembertForSequenceClassification"),EIt.forEach(t),Myr=r(YDe," (CamemBERT model)"),YDe.forEach(t),Eyr=i(ne),l4=n(ne,"LI",{});var KDe=s(l4);Q9e=n(KDe,"STRONG",{});var CIt=s(Q9e);Cyr=r(CIt,"convbert"),CIt.forEach(t),wyr=r(KDe," \u2014 "),hK=n(KDe,"A",{href:!0});var wIt=s(hK);Ayr=r(wIt,"TFConvBertForSequenceClassification"),wIt.forEach(t),Lyr=r(KDe," (ConvBERT model)"),KDe.forEach(t),yyr=i(ne),i4=n(ne,"LI",{});var ZDe=s(i4);H9e=n(ZDe,"STRONG",{});var AIt=s(H9e);xyr=r(AIt,"ctrl"),AIt.forEach(t),$yr=r(ZDe," \u2014 "),pK=n(ZDe,"A",{href:!0});var LIt=s(pK);kyr=r(LIt,"TFCTRLForSequenceClassification"),LIt.forEach(t),Syr=r(ZDe," (CTRL model)"),ZDe.forEach(t),Ryr=i(ne),d4=n(ne,"LI",{});var eGe=s(d4);U9e=n(eGe,"STRONG",{});var yIt=s(U9e);Pyr=r(yIt,"deberta"),yIt.forEach(t),Byr=r(eGe," \u2014 "),_K=n(eGe,"A",{href:!0});var xIt=s(_K);Iyr=r(xIt,"TFDebertaForSequenceClassification"),xIt.forEach(t),Nyr=r(eGe," (DeBERTa model)"),eGe.forEach(t),qyr=i(ne),c4=n(ne,"LI",{});var oGe=s(c4);J9e=n(oGe,"STRONG",{});var $It=s(J9e);jyr=r($It,"deberta-v2"),$It.forEach(t),Dyr=r(oGe," \u2014 "),uK=n(oGe,"A",{href:!0});var kIt=s(uK);Gyr=r(kIt,"TFDebertaV2ForSequenceClassification"),kIt.forEach(t),Oyr=r(oGe," (DeBERTa-v2 model)"),oGe.forEach(t),Vyr=i(ne),f4=n(ne,"LI",{});var rGe=s(f4);Y9e=n(rGe,"STRONG",{});var SIt=s(Y9e);Xyr=r(SIt,"distilbert"),SIt.forEach(t),zyr=r(rGe," \u2014 "),bK=n(rGe,"A",{href:!0});var RIt=s(bK);Wyr=r(RIt,"TFDistilBertForSequenceClassification"),RIt.forEach(t),Qyr=r(rGe," (DistilBERT model)"),rGe.forEach(t),Hyr=i(ne),m4=n(ne,"LI",{});var tGe=s(m4);K9e=n(tGe,"STRONG",{});var PIt=s(K9e);Uyr=r(PIt,"electra"),PIt.forEach(t),Jyr=r(tGe," \u2014 "),vK=n(tGe,"A",{href:!0});var BIt=s(vK);Yyr=r(BIt,"TFElectraForSequenceClassification"),BIt.forEach(t),Kyr=r(tGe," (ELECTRA model)"),tGe.forEach(t),Zyr=i(ne),g4=n(ne,"LI",{});var aGe=s(g4);Z9e=n(aGe,"STRONG",{});var IIt=s(Z9e);exr=r(IIt,"flaubert"),IIt.forEach(t),oxr=r(aGe," \u2014 "),FK=n(aGe,"A",{href:!0});var NIt=s(FK);rxr=r(NIt,"TFFlaubertForSequenceClassification"),NIt.forEach(t),txr=r(aGe," (FlauBERT model)"),aGe.forEach(t),axr=i(ne),h4=n(ne,"LI",{});var nGe=s(h4);eMe=n(nGe,"STRONG",{});var qIt=s(eMe);nxr=r(qIt,"funnel"),qIt.forEach(t),sxr=r(nGe," \u2014 "),TK=n(nGe,"A",{href:!0});var jIt=s(TK);lxr=r(jIt,"TFFunnelForSequenceClassification"),jIt.forEach(t),ixr=r(nGe," (Funnel Transformer model)"),nGe.forEach(t),dxr=i(ne),p4=n(ne,"LI",{});var sGe=s(p4);oMe=n(sGe,"STRONG",{});var DIt=s(oMe);cxr=r(DIt,"gpt2"),DIt.forEach(t),fxr=r(sGe," \u2014 "),MK=n(sGe,"A",{href:!0});var GIt=s(MK);mxr=r(GIt,"TFGPT2ForSequenceClassification"),GIt.forEach(t),gxr=r(sGe," (OpenAI GPT-2 model)"),sGe.forEach(t),hxr=i(ne),_4=n(ne,"LI",{});var lGe=s(_4);rMe=n(lGe,"STRONG",{});var OIt=s(rMe);pxr=r(OIt,"gptj"),OIt.forEach(t),_xr=r(lGe," \u2014 "),EK=n(lGe,"A",{href:!0});var VIt=s(EK);uxr=r(VIt,"TFGPTJForSequenceClassification"),VIt.forEach(t),bxr=r(lGe," (GPT-J model)"),lGe.forEach(t),vxr=i(ne),u4=n(ne,"LI",{});var iGe=s(u4);tMe=n(iGe,"STRONG",{});var XIt=s(tMe);Fxr=r(XIt,"layoutlm"),XIt.forEach(t),Txr=r(iGe," \u2014 "),CK=n(iGe,"A",{href:!0});var zIt=s(CK);Mxr=r(zIt,"TFLayoutLMForSequenceClassification"),zIt.forEach(t),Exr=r(iGe," (LayoutLM model)"),iGe.forEach(t),Cxr=i(ne),b4=n(ne,"LI",{});var dGe=s(b4);aMe=n(dGe,"STRONG",{});var WIt=s(aMe);wxr=r(WIt,"longformer"),WIt.forEach(t),Axr=r(dGe," \u2014 "),wK=n(dGe,"A",{href:!0});var QIt=s(wK);Lxr=r(QIt,"TFLongformerForSequenceClassification"),QIt.forEach(t),yxr=r(dGe," (Longformer model)"),dGe.forEach(t),xxr=i(ne),v4=n(ne,"LI",{});var cGe=s(v4);nMe=n(cGe,"STRONG",{});var HIt=s(nMe);$xr=r(HIt,"mobilebert"),HIt.forEach(t),kxr=r(cGe," \u2014 "),AK=n(cGe,"A",{href:!0});var UIt=s(AK);Sxr=r(UIt,"TFMobileBertForSequenceClassification"),UIt.forEach(t),Rxr=r(cGe," (MobileBERT model)"),cGe.forEach(t),Pxr=i(ne),F4=n(ne,"LI",{});var fGe=s(F4);sMe=n(fGe,"STRONG",{});var JIt=s(sMe);Bxr=r(JIt,"mpnet"),JIt.forEach(t),Ixr=r(fGe," \u2014 "),LK=n(fGe,"A",{href:!0});var YIt=s(LK);Nxr=r(YIt,"TFMPNetForSequenceClassification"),YIt.forEach(t),qxr=r(fGe," (MPNet model)"),fGe.forEach(t),jxr=i(ne),T4=n(ne,"LI",{});var mGe=s(T4);lMe=n(mGe,"STRONG",{});var KIt=s(lMe);Dxr=r(KIt,"openai-gpt"),KIt.forEach(t),Gxr=r(mGe," \u2014 "),yK=n(mGe,"A",{href:!0});var ZIt=s(yK);Oxr=r(ZIt,"TFOpenAIGPTForSequenceClassification"),ZIt.forEach(t),Vxr=r(mGe," (OpenAI GPT model)"),mGe.forEach(t),Xxr=i(ne),M4=n(ne,"LI",{});var gGe=s(M4);iMe=n(gGe,"STRONG",{});var eNt=s(iMe);zxr=r(eNt,"rembert"),eNt.forEach(t),Wxr=r(gGe," \u2014 "),xK=n(gGe,"A",{href:!0});var oNt=s(xK);Qxr=r(oNt,"TFRemBertForSequenceClassification"),oNt.forEach(t),Hxr=r(gGe," (RemBERT model)"),gGe.forEach(t),Uxr=i(ne),E4=n(ne,"LI",{});var hGe=s(E4);dMe=n(hGe,"STRONG",{});var rNt=s(dMe);Jxr=r(rNt,"roberta"),rNt.forEach(t),Yxr=r(hGe," \u2014 "),$K=n(hGe,"A",{href:!0});var tNt=s($K);Kxr=r(tNt,"TFRobertaForSequenceClassification"),tNt.forEach(t),Zxr=r(hGe," (RoBERTa model)"),hGe.forEach(t),e$r=i(ne),C4=n(ne,"LI",{});var pGe=s(C4);cMe=n(pGe,"STRONG",{});var aNt=s(cMe);o$r=r(aNt,"roformer"),aNt.forEach(t),r$r=r(pGe," \u2014 "),kK=n(pGe,"A",{href:!0});var nNt=s(kK);t$r=r(nNt,"TFRoFormerForSequenceClassification"),nNt.forEach(t),a$r=r(pGe," (RoFormer model)"),pGe.forEach(t),n$r=i(ne),w4=n(ne,"LI",{});var _Ge=s(w4);fMe=n(_Ge,"STRONG",{});var sNt=s(fMe);s$r=r(sNt,"tapas"),sNt.forEach(t),l$r=r(_Ge," \u2014 "),SK=n(_Ge,"A",{href:!0});var lNt=s(SK);i$r=r(lNt,"TFTapasForSequenceClassification"),lNt.forEach(t),d$r=r(_Ge," (TAPAS model)"),_Ge.forEach(t),c$r=i(ne),A4=n(ne,"LI",{});var uGe=s(A4);mMe=n(uGe,"STRONG",{});var iNt=s(mMe);f$r=r(iNt,"transfo-xl"),iNt.forEach(t),m$r=r(uGe," \u2014 "),RK=n(uGe,"A",{href:!0});var dNt=s(RK);g$r=r(dNt,"TFTransfoXLForSequenceClassification"),dNt.forEach(t),h$r=r(uGe," (Transformer-XL model)"),uGe.forEach(t),p$r=i(ne),L4=n(ne,"LI",{});var bGe=s(L4);gMe=n(bGe,"STRONG",{});var cNt=s(gMe);_$r=r(cNt,"xlm"),cNt.forEach(t),u$r=r(bGe," \u2014 "),PK=n(bGe,"A",{href:!0});var fNt=s(PK);b$r=r(fNt,"TFXLMForSequenceClassification"),fNt.forEach(t),v$r=r(bGe," (XLM model)"),bGe.forEach(t),F$r=i(ne),y4=n(ne,"LI",{});var vGe=s(y4);hMe=n(vGe,"STRONG",{});var mNt=s(hMe);T$r=r(mNt,"xlm-roberta"),mNt.forEach(t),M$r=r(vGe," \u2014 "),BK=n(vGe,"A",{href:!0});var gNt=s(BK);E$r=r(gNt,"TFXLMRobertaForSequenceClassification"),gNt.forEach(t),C$r=r(vGe," (XLM-RoBERTa model)"),vGe.forEach(t),w$r=i(ne),x4=n(ne,"LI",{});var FGe=s(x4);pMe=n(FGe,"STRONG",{});var hNt=s(pMe);A$r=r(hNt,"xlnet"),hNt.forEach(t),L$r=r(FGe," \u2014 "),IK=n(FGe,"A",{href:!0});var pNt=s(IK);y$r=r(pNt,"TFXLNetForSequenceClassification"),pNt.forEach(t),x$r=r(FGe," (XLNet model)"),FGe.forEach(t),ne.forEach(t),$$r=i(Xl),T($4.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),Kze=i(f),xc=n(f,"H2",{class:!0});var sHe=s(xc);k4=n(sHe,"A",{id:!0,class:!0,href:!0});var _Nt=s(k4);_Me=n(_Nt,"SPAN",{});var uNt=s(_Me);T(Rx.$$.fragment,uNt),uNt.forEach(t),_Nt.forEach(t),k$r=i(sHe),uMe=n(sHe,"SPAN",{});var bNt=s(uMe);S$r=r(bNt,"TFAutoModelForMultipleChoice"),bNt.forEach(t),sHe.forEach(t),Zze=i(f),ir=n(f,"DIV",{class:!0});var zl=s(ir);T(Px.$$.fragment,zl),R$r=i(zl),$c=n(zl,"P",{});var sae=s($c);P$r=r(sae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),NK=n(sae,"A",{href:!0});var vNt=s(NK);B$r=r(vNt,"from_pretrained()"),vNt.forEach(t),I$r=r(sae," class method or the "),qK=n(sae,"A",{href:!0});var FNt=s(qK);N$r=r(FNt,"from_config()"),FNt.forEach(t),q$r=r(sae,` class
method.`),sae.forEach(t),j$r=i(zl),Bx=n(zl,"P",{});var lHe=s(Bx);D$r=r(lHe,"This class cannot be instantiated directly using "),bMe=n(lHe,"CODE",{});var TNt=s(bMe);G$r=r(TNt,"__init__()"),TNt.forEach(t),O$r=r(lHe," (throws an error)."),lHe.forEach(t),V$r=i(zl),Dt=n(zl,"DIV",{class:!0});var CA=s(Dt);T(Ix.$$.fragment,CA),X$r=i(CA),vMe=n(CA,"P",{});var MNt=s(vMe);z$r=r(MNt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),MNt.forEach(t),W$r=i(CA),kc=n(CA,"P",{});var lae=s(kc);Q$r=r(lae,`Note:
Loading a model from its configuration file does `),FMe=n(lae,"STRONG",{});var ENt=s(FMe);H$r=r(ENt,"not"),ENt.forEach(t),U$r=r(lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=n(lae,"A",{href:!0});var CNt=s(jK);J$r=r(CNt,"from_pretrained()"),CNt.forEach(t),Y$r=r(lae," to load the model weights."),lae.forEach(t),K$r=i(CA),T(S4.$$.fragment,CA),CA.forEach(t),Z$r=i(zl),Ir=n(zl,"DIV",{class:!0});var Wl=s(Ir);T(Nx.$$.fragment,Wl),ekr=i(Wl),TMe=n(Wl,"P",{});var wNt=s(TMe);okr=r(wNt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),wNt.forEach(t),rkr=i(Wl),hn=n(Wl,"P",{});var wA=s(hn);tkr=r(wA,"The model class to instantiate is selected based on the "),MMe=n(wA,"CODE",{});var ANt=s(MMe);akr=r(ANt,"model_type"),ANt.forEach(t),nkr=r(wA,` property of the config object (either
passed as an argument or loaded from `),EMe=n(wA,"CODE",{});var LNt=s(EMe);skr=r(LNt,"pretrained_model_name_or_path"),LNt.forEach(t),lkr=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CMe=n(wA,"CODE",{});var yNt=s(CMe);ikr=r(yNt,"pretrained_model_name_or_path"),yNt.forEach(t),dkr=r(wA,":"),wA.forEach(t),ckr=i(Wl),be=n(Wl,"UL",{});var Fe=s(be);R4=n(Fe,"LI",{});var TGe=s(R4);wMe=n(TGe,"STRONG",{});var xNt=s(wMe);fkr=r(xNt,"albert"),xNt.forEach(t),mkr=r(TGe," \u2014 "),DK=n(TGe,"A",{href:!0});var $Nt=s(DK);gkr=r($Nt,"TFAlbertForMultipleChoice"),$Nt.forEach(t),hkr=r(TGe," (ALBERT model)"),TGe.forEach(t),pkr=i(Fe),P4=n(Fe,"LI",{});var MGe=s(P4);AMe=n(MGe,"STRONG",{});var kNt=s(AMe);_kr=r(kNt,"bert"),kNt.forEach(t),ukr=r(MGe," \u2014 "),GK=n(MGe,"A",{href:!0});var SNt=s(GK);bkr=r(SNt,"TFBertForMultipleChoice"),SNt.forEach(t),vkr=r(MGe," (BERT model)"),MGe.forEach(t),Fkr=i(Fe),B4=n(Fe,"LI",{});var EGe=s(B4);LMe=n(EGe,"STRONG",{});var RNt=s(LMe);Tkr=r(RNt,"camembert"),RNt.forEach(t),Mkr=r(EGe," \u2014 "),OK=n(EGe,"A",{href:!0});var PNt=s(OK);Ekr=r(PNt,"TFCamembertForMultipleChoice"),PNt.forEach(t),Ckr=r(EGe," (CamemBERT model)"),EGe.forEach(t),wkr=i(Fe),I4=n(Fe,"LI",{});var CGe=s(I4);yMe=n(CGe,"STRONG",{});var BNt=s(yMe);Akr=r(BNt,"convbert"),BNt.forEach(t),Lkr=r(CGe," \u2014 "),VK=n(CGe,"A",{href:!0});var INt=s(VK);ykr=r(INt,"TFConvBertForMultipleChoice"),INt.forEach(t),xkr=r(CGe," (ConvBERT model)"),CGe.forEach(t),$kr=i(Fe),N4=n(Fe,"LI",{});var wGe=s(N4);xMe=n(wGe,"STRONG",{});var NNt=s(xMe);kkr=r(NNt,"distilbert"),NNt.forEach(t),Skr=r(wGe," \u2014 "),XK=n(wGe,"A",{href:!0});var qNt=s(XK);Rkr=r(qNt,"TFDistilBertForMultipleChoice"),qNt.forEach(t),Pkr=r(wGe," (DistilBERT model)"),wGe.forEach(t),Bkr=i(Fe),q4=n(Fe,"LI",{});var AGe=s(q4);$Me=n(AGe,"STRONG",{});var jNt=s($Me);Ikr=r(jNt,"electra"),jNt.forEach(t),Nkr=r(AGe," \u2014 "),zK=n(AGe,"A",{href:!0});var DNt=s(zK);qkr=r(DNt,"TFElectraForMultipleChoice"),DNt.forEach(t),jkr=r(AGe," (ELECTRA model)"),AGe.forEach(t),Dkr=i(Fe),j4=n(Fe,"LI",{});var LGe=s(j4);kMe=n(LGe,"STRONG",{});var GNt=s(kMe);Gkr=r(GNt,"flaubert"),GNt.forEach(t),Okr=r(LGe," \u2014 "),WK=n(LGe,"A",{href:!0});var ONt=s(WK);Vkr=r(ONt,"TFFlaubertForMultipleChoice"),ONt.forEach(t),Xkr=r(LGe," (FlauBERT model)"),LGe.forEach(t),zkr=i(Fe),D4=n(Fe,"LI",{});var yGe=s(D4);SMe=n(yGe,"STRONG",{});var VNt=s(SMe);Wkr=r(VNt,"funnel"),VNt.forEach(t),Qkr=r(yGe," \u2014 "),QK=n(yGe,"A",{href:!0});var XNt=s(QK);Hkr=r(XNt,"TFFunnelForMultipleChoice"),XNt.forEach(t),Ukr=r(yGe," (Funnel Transformer model)"),yGe.forEach(t),Jkr=i(Fe),G4=n(Fe,"LI",{});var xGe=s(G4);RMe=n(xGe,"STRONG",{});var zNt=s(RMe);Ykr=r(zNt,"longformer"),zNt.forEach(t),Kkr=r(xGe," \u2014 "),HK=n(xGe,"A",{href:!0});var WNt=s(HK);Zkr=r(WNt,"TFLongformerForMultipleChoice"),WNt.forEach(t),eSr=r(xGe," (Longformer model)"),xGe.forEach(t),oSr=i(Fe),O4=n(Fe,"LI",{});var $Ge=s(O4);PMe=n($Ge,"STRONG",{});var QNt=s(PMe);rSr=r(QNt,"mobilebert"),QNt.forEach(t),tSr=r($Ge," \u2014 "),UK=n($Ge,"A",{href:!0});var HNt=s(UK);aSr=r(HNt,"TFMobileBertForMultipleChoice"),HNt.forEach(t),nSr=r($Ge," (MobileBERT model)"),$Ge.forEach(t),sSr=i(Fe),V4=n(Fe,"LI",{});var kGe=s(V4);BMe=n(kGe,"STRONG",{});var UNt=s(BMe);lSr=r(UNt,"mpnet"),UNt.forEach(t),iSr=r(kGe," \u2014 "),JK=n(kGe,"A",{href:!0});var JNt=s(JK);dSr=r(JNt,"TFMPNetForMultipleChoice"),JNt.forEach(t),cSr=r(kGe," (MPNet model)"),kGe.forEach(t),fSr=i(Fe),X4=n(Fe,"LI",{});var SGe=s(X4);IMe=n(SGe,"STRONG",{});var YNt=s(IMe);mSr=r(YNt,"rembert"),YNt.forEach(t),gSr=r(SGe," \u2014 "),YK=n(SGe,"A",{href:!0});var KNt=s(YK);hSr=r(KNt,"TFRemBertForMultipleChoice"),KNt.forEach(t),pSr=r(SGe," (RemBERT model)"),SGe.forEach(t),_Sr=i(Fe),z4=n(Fe,"LI",{});var RGe=s(z4);NMe=n(RGe,"STRONG",{});var ZNt=s(NMe);uSr=r(ZNt,"roberta"),ZNt.forEach(t),bSr=r(RGe," \u2014 "),KK=n(RGe,"A",{href:!0});var eqt=s(KK);vSr=r(eqt,"TFRobertaForMultipleChoice"),eqt.forEach(t),FSr=r(RGe," (RoBERTa model)"),RGe.forEach(t),TSr=i(Fe),W4=n(Fe,"LI",{});var PGe=s(W4);qMe=n(PGe,"STRONG",{});var oqt=s(qMe);MSr=r(oqt,"roformer"),oqt.forEach(t),ESr=r(PGe," \u2014 "),ZK=n(PGe,"A",{href:!0});var rqt=s(ZK);CSr=r(rqt,"TFRoFormerForMultipleChoice"),rqt.forEach(t),wSr=r(PGe," (RoFormer model)"),PGe.forEach(t),ASr=i(Fe),Q4=n(Fe,"LI",{});var BGe=s(Q4);jMe=n(BGe,"STRONG",{});var tqt=s(jMe);LSr=r(tqt,"xlm"),tqt.forEach(t),ySr=r(BGe," \u2014 "),eZ=n(BGe,"A",{href:!0});var aqt=s(eZ);xSr=r(aqt,"TFXLMForMultipleChoice"),aqt.forEach(t),$Sr=r(BGe," (XLM model)"),BGe.forEach(t),kSr=i(Fe),H4=n(Fe,"LI",{});var IGe=s(H4);DMe=n(IGe,"STRONG",{});var nqt=s(DMe);SSr=r(nqt,"xlm-roberta"),nqt.forEach(t),RSr=r(IGe," \u2014 "),oZ=n(IGe,"A",{href:!0});var sqt=s(oZ);PSr=r(sqt,"TFXLMRobertaForMultipleChoice"),sqt.forEach(t),BSr=r(IGe," (XLM-RoBERTa model)"),IGe.forEach(t),ISr=i(Fe),U4=n(Fe,"LI",{});var NGe=s(U4);GMe=n(NGe,"STRONG",{});var lqt=s(GMe);NSr=r(lqt,"xlnet"),lqt.forEach(t),qSr=r(NGe," \u2014 "),rZ=n(NGe,"A",{href:!0});var iqt=s(rZ);jSr=r(iqt,"TFXLNetForMultipleChoice"),iqt.forEach(t),DSr=r(NGe," (XLNet model)"),NGe.forEach(t),Fe.forEach(t),GSr=i(Wl),T(J4.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),eWe=i(f),Sc=n(f,"H2",{class:!0});var iHe=s(Sc);Y4=n(iHe,"A",{id:!0,class:!0,href:!0});var dqt=s(Y4);OMe=n(dqt,"SPAN",{});var cqt=s(OMe);T(qx.$$.fragment,cqt),cqt.forEach(t),dqt.forEach(t),OSr=i(iHe),VMe=n(iHe,"SPAN",{});var fqt=s(VMe);VSr=r(fqt,"TFAutoModelForNextSentencePrediction"),fqt.forEach(t),iHe.forEach(t),oWe=i(f),dr=n(f,"DIV",{class:!0});var Ql=s(dr);T(jx.$$.fragment,Ql),XSr=i(Ql),Rc=n(Ql,"P",{});var iae=s(Rc);zSr=r(iae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),tZ=n(iae,"A",{href:!0});var mqt=s(tZ);WSr=r(mqt,"from_pretrained()"),mqt.forEach(t),QSr=r(iae," class method or the "),aZ=n(iae,"A",{href:!0});var gqt=s(aZ);HSr=r(gqt,"from_config()"),gqt.forEach(t),USr=r(iae,` class
method.`),iae.forEach(t),JSr=i(Ql),Dx=n(Ql,"P",{});var dHe=s(Dx);YSr=r(dHe,"This class cannot be instantiated directly using "),XMe=n(dHe,"CODE",{});var hqt=s(XMe);KSr=r(hqt,"__init__()"),hqt.forEach(t),ZSr=r(dHe," (throws an error)."),dHe.forEach(t),eRr=i(Ql),Gt=n(Ql,"DIV",{class:!0});var AA=s(Gt);T(Gx.$$.fragment,AA),oRr=i(AA),zMe=n(AA,"P",{});var pqt=s(zMe);rRr=r(pqt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),pqt.forEach(t),tRr=i(AA),Pc=n(AA,"P",{});var dae=s(Pc);aRr=r(dae,`Note:
Loading a model from its configuration file does `),WMe=n(dae,"STRONG",{});var _qt=s(WMe);nRr=r(_qt,"not"),_qt.forEach(t),sRr=r(dae,` load the model weights. It only affects the
model\u2019s configuration. Use `),nZ=n(dae,"A",{href:!0});var uqt=s(nZ);lRr=r(uqt,"from_pretrained()"),uqt.forEach(t),iRr=r(dae," to load the model weights."),dae.forEach(t),dRr=i(AA),T(K4.$$.fragment,AA),AA.forEach(t),cRr=i(Ql),Nr=n(Ql,"DIV",{class:!0});var Hl=s(Nr);T(Ox.$$.fragment,Hl),fRr=i(Hl),QMe=n(Hl,"P",{});var bqt=s(QMe);mRr=r(bqt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),bqt.forEach(t),gRr=i(Hl),pn=n(Hl,"P",{});var LA=s(pn);hRr=r(LA,"The model class to instantiate is selected based on the "),HMe=n(LA,"CODE",{});var vqt=s(HMe);pRr=r(vqt,"model_type"),vqt.forEach(t),_Rr=r(LA,` property of the config object (either
passed as an argument or loaded from `),UMe=n(LA,"CODE",{});var Fqt=s(UMe);uRr=r(Fqt,"pretrained_model_name_or_path"),Fqt.forEach(t),bRr=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JMe=n(LA,"CODE",{});var Tqt=s(JMe);vRr=r(Tqt,"pretrained_model_name_or_path"),Tqt.forEach(t),FRr=r(LA,":"),LA.forEach(t),TRr=i(Hl),Vx=n(Hl,"UL",{});var cHe=s(Vx);Z4=n(cHe,"LI",{});var qGe=s(Z4);YMe=n(qGe,"STRONG",{});var Mqt=s(YMe);MRr=r(Mqt,"bert"),Mqt.forEach(t),ERr=r(qGe," \u2014 "),sZ=n(qGe,"A",{href:!0});var Eqt=s(sZ);CRr=r(Eqt,"TFBertForNextSentencePrediction"),Eqt.forEach(t),wRr=r(qGe," (BERT model)"),qGe.forEach(t),ARr=i(cHe),eE=n(cHe,"LI",{});var jGe=s(eE);KMe=n(jGe,"STRONG",{});var Cqt=s(KMe);LRr=r(Cqt,"mobilebert"),Cqt.forEach(t),yRr=r(jGe," \u2014 "),lZ=n(jGe,"A",{href:!0});var wqt=s(lZ);xRr=r(wqt,"TFMobileBertForNextSentencePrediction"),wqt.forEach(t),$Rr=r(jGe," (MobileBERT model)"),jGe.forEach(t),cHe.forEach(t),kRr=i(Hl),T(oE.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),rWe=i(f),Bc=n(f,"H2",{class:!0});var fHe=s(Bc);rE=n(fHe,"A",{id:!0,class:!0,href:!0});var Aqt=s(rE);ZMe=n(Aqt,"SPAN",{});var Lqt=s(ZMe);T(Xx.$$.fragment,Lqt),Lqt.forEach(t),Aqt.forEach(t),SRr=i(fHe),e4e=n(fHe,"SPAN",{});var yqt=s(e4e);RRr=r(yqt,"TFAutoModelForTableQuestionAnswering"),yqt.forEach(t),fHe.forEach(t),tWe=i(f),cr=n(f,"DIV",{class:!0});var Ul=s(cr);T(zx.$$.fragment,Ul),PRr=i(Ul),Ic=n(Ul,"P",{});var cae=s(Ic);BRr=r(cae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),iZ=n(cae,"A",{href:!0});var xqt=s(iZ);IRr=r(xqt,"from_pretrained()"),xqt.forEach(t),NRr=r(cae," class method or the "),dZ=n(cae,"A",{href:!0});var $qt=s(dZ);qRr=r($qt,"from_config()"),$qt.forEach(t),jRr=r(cae,` class
method.`),cae.forEach(t),DRr=i(Ul),Wx=n(Ul,"P",{});var mHe=s(Wx);GRr=r(mHe,"This class cannot be instantiated directly using "),o4e=n(mHe,"CODE",{});var kqt=s(o4e);ORr=r(kqt,"__init__()"),kqt.forEach(t),VRr=r(mHe," (throws an error)."),mHe.forEach(t),XRr=i(Ul),Ot=n(Ul,"DIV",{class:!0});var yA=s(Ot);T(Qx.$$.fragment,yA),zRr=i(yA),r4e=n(yA,"P",{});var Sqt=s(r4e);WRr=r(Sqt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Sqt.forEach(t),QRr=i(yA),Nc=n(yA,"P",{});var fae=s(Nc);HRr=r(fae,`Note:
Loading a model from its configuration file does `),t4e=n(fae,"STRONG",{});var Rqt=s(t4e);URr=r(Rqt,"not"),Rqt.forEach(t),JRr=r(fae,` load the model weights. It only affects the
model\u2019s configuration. Use `),cZ=n(fae,"A",{href:!0});var Pqt=s(cZ);YRr=r(Pqt,"from_pretrained()"),Pqt.forEach(t),KRr=r(fae," to load the model weights."),fae.forEach(t),ZRr=i(yA),T(tE.$$.fragment,yA),yA.forEach(t),ePr=i(Ul),qr=n(Ul,"DIV",{class:!0});var Jl=s(qr);T(Hx.$$.fragment,Jl),oPr=i(Jl),a4e=n(Jl,"P",{});var Bqt=s(a4e);rPr=r(Bqt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Bqt.forEach(t),tPr=i(Jl),_n=n(Jl,"P",{});var xA=s(_n);aPr=r(xA,"The model class to instantiate is selected based on the "),n4e=n(xA,"CODE",{});var Iqt=s(n4e);nPr=r(Iqt,"model_type"),Iqt.forEach(t),sPr=r(xA,` property of the config object (either
passed as an argument or loaded from `),s4e=n(xA,"CODE",{});var Nqt=s(s4e);lPr=r(Nqt,"pretrained_model_name_or_path"),Nqt.forEach(t),iPr=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l4e=n(xA,"CODE",{});var qqt=s(l4e);dPr=r(qqt,"pretrained_model_name_or_path"),qqt.forEach(t),cPr=r(xA,":"),xA.forEach(t),fPr=i(Jl),i4e=n(Jl,"UL",{});var jqt=s(i4e);aE=n(jqt,"LI",{});var DGe=s(aE);d4e=n(DGe,"STRONG",{});var Dqt=s(d4e);mPr=r(Dqt,"tapas"),Dqt.forEach(t),gPr=r(DGe," \u2014 "),fZ=n(DGe,"A",{href:!0});var Gqt=s(fZ);hPr=r(Gqt,"TFTapasForQuestionAnswering"),Gqt.forEach(t),pPr=r(DGe," (TAPAS model)"),DGe.forEach(t),jqt.forEach(t),_Pr=i(Jl),T(nE.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),aWe=i(f),qc=n(f,"H2",{class:!0});var gHe=s(qc);sE=n(gHe,"A",{id:!0,class:!0,href:!0});var Oqt=s(sE);c4e=n(Oqt,"SPAN",{});var Vqt=s(c4e);T(Ux.$$.fragment,Vqt),Vqt.forEach(t),Oqt.forEach(t),uPr=i(gHe),f4e=n(gHe,"SPAN",{});var Xqt=s(f4e);bPr=r(Xqt,"TFAutoModelForTokenClassification"),Xqt.forEach(t),gHe.forEach(t),nWe=i(f),fr=n(f,"DIV",{class:!0});var Yl=s(fr);T(Jx.$$.fragment,Yl),vPr=i(Yl),jc=n(Yl,"P",{});var mae=s(jc);FPr=r(mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),mZ=n(mae,"A",{href:!0});var zqt=s(mZ);TPr=r(zqt,"from_pretrained()"),zqt.forEach(t),MPr=r(mae," class method or the "),gZ=n(mae,"A",{href:!0});var Wqt=s(gZ);EPr=r(Wqt,"from_config()"),Wqt.forEach(t),CPr=r(mae,` class
method.`),mae.forEach(t),wPr=i(Yl),Yx=n(Yl,"P",{});var hHe=s(Yx);APr=r(hHe,"This class cannot be instantiated directly using "),m4e=n(hHe,"CODE",{});var Qqt=s(m4e);LPr=r(Qqt,"__init__()"),Qqt.forEach(t),yPr=r(hHe," (throws an error)."),hHe.forEach(t),xPr=i(Yl),Vt=n(Yl,"DIV",{class:!0});var $A=s(Vt);T(Kx.$$.fragment,$A),$Pr=i($A),g4e=n($A,"P",{});var Hqt=s(g4e);kPr=r(Hqt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Hqt.forEach(t),SPr=i($A),Dc=n($A,"P",{});var gae=s(Dc);RPr=r(gae,`Note:
Loading a model from its configuration file does `),h4e=n(gae,"STRONG",{});var Uqt=s(h4e);PPr=r(Uqt,"not"),Uqt.forEach(t),BPr=r(gae,` load the model weights. It only affects the
model\u2019s configuration. Use `),hZ=n(gae,"A",{href:!0});var Jqt=s(hZ);IPr=r(Jqt,"from_pretrained()"),Jqt.forEach(t),NPr=r(gae," to load the model weights."),gae.forEach(t),qPr=i($A),T(lE.$$.fragment,$A),$A.forEach(t),jPr=i(Yl),jr=n(Yl,"DIV",{class:!0});var Kl=s(jr);T(Zx.$$.fragment,Kl),DPr=i(Kl),p4e=n(Kl,"P",{});var Yqt=s(p4e);GPr=r(Yqt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Yqt.forEach(t),OPr=i(Kl),un=n(Kl,"P",{});var kA=s(un);VPr=r(kA,"The model class to instantiate is selected based on the "),_4e=n(kA,"CODE",{});var Kqt=s(_4e);XPr=r(Kqt,"model_type"),Kqt.forEach(t),zPr=r(kA,` property of the config object (either
passed as an argument or loaded from `),u4e=n(kA,"CODE",{});var Zqt=s(u4e);WPr=r(Zqt,"pretrained_model_name_or_path"),Zqt.forEach(t),QPr=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b4e=n(kA,"CODE",{});var ejt=s(b4e);HPr=r(ejt,"pretrained_model_name_or_path"),ejt.forEach(t),UPr=r(kA,":"),kA.forEach(t),JPr=i(Kl),de=n(Kl,"UL",{});var he=s(de);iE=n(he,"LI",{});var GGe=s(iE);v4e=n(GGe,"STRONG",{});var ojt=s(v4e);YPr=r(ojt,"albert"),ojt.forEach(t),KPr=r(GGe," \u2014 "),pZ=n(GGe,"A",{href:!0});var rjt=s(pZ);ZPr=r(rjt,"TFAlbertForTokenClassification"),rjt.forEach(t),eBr=r(GGe," (ALBERT model)"),GGe.forEach(t),oBr=i(he),dE=n(he,"LI",{});var OGe=s(dE);F4e=n(OGe,"STRONG",{});var tjt=s(F4e);rBr=r(tjt,"bert"),tjt.forEach(t),tBr=r(OGe," \u2014 "),_Z=n(OGe,"A",{href:!0});var ajt=s(_Z);aBr=r(ajt,"TFBertForTokenClassification"),ajt.forEach(t),nBr=r(OGe," (BERT model)"),OGe.forEach(t),sBr=i(he),cE=n(he,"LI",{});var VGe=s(cE);T4e=n(VGe,"STRONG",{});var njt=s(T4e);lBr=r(njt,"camembert"),njt.forEach(t),iBr=r(VGe," \u2014 "),uZ=n(VGe,"A",{href:!0});var sjt=s(uZ);dBr=r(sjt,"TFCamembertForTokenClassification"),sjt.forEach(t),cBr=r(VGe," (CamemBERT model)"),VGe.forEach(t),fBr=i(he),fE=n(he,"LI",{});var XGe=s(fE);M4e=n(XGe,"STRONG",{});var ljt=s(M4e);mBr=r(ljt,"convbert"),ljt.forEach(t),gBr=r(XGe," \u2014 "),bZ=n(XGe,"A",{href:!0});var ijt=s(bZ);hBr=r(ijt,"TFConvBertForTokenClassification"),ijt.forEach(t),pBr=r(XGe," (ConvBERT model)"),XGe.forEach(t),_Br=i(he),mE=n(he,"LI",{});var zGe=s(mE);E4e=n(zGe,"STRONG",{});var djt=s(E4e);uBr=r(djt,"deberta"),djt.forEach(t),bBr=r(zGe," \u2014 "),vZ=n(zGe,"A",{href:!0});var cjt=s(vZ);vBr=r(cjt,"TFDebertaForTokenClassification"),cjt.forEach(t),FBr=r(zGe," (DeBERTa model)"),zGe.forEach(t),TBr=i(he),gE=n(he,"LI",{});var WGe=s(gE);C4e=n(WGe,"STRONG",{});var fjt=s(C4e);MBr=r(fjt,"deberta-v2"),fjt.forEach(t),EBr=r(WGe," \u2014 "),FZ=n(WGe,"A",{href:!0});var mjt=s(FZ);CBr=r(mjt,"TFDebertaV2ForTokenClassification"),mjt.forEach(t),wBr=r(WGe," (DeBERTa-v2 model)"),WGe.forEach(t),ABr=i(he),hE=n(he,"LI",{});var QGe=s(hE);w4e=n(QGe,"STRONG",{});var gjt=s(w4e);LBr=r(gjt,"distilbert"),gjt.forEach(t),yBr=r(QGe," \u2014 "),TZ=n(QGe,"A",{href:!0});var hjt=s(TZ);xBr=r(hjt,"TFDistilBertForTokenClassification"),hjt.forEach(t),$Br=r(QGe," (DistilBERT model)"),QGe.forEach(t),kBr=i(he),pE=n(he,"LI",{});var HGe=s(pE);A4e=n(HGe,"STRONG",{});var pjt=s(A4e);SBr=r(pjt,"electra"),pjt.forEach(t),RBr=r(HGe," \u2014 "),MZ=n(HGe,"A",{href:!0});var _jt=s(MZ);PBr=r(_jt,"TFElectraForTokenClassification"),_jt.forEach(t),BBr=r(HGe," (ELECTRA model)"),HGe.forEach(t),IBr=i(he),_E=n(he,"LI",{});var UGe=s(_E);L4e=n(UGe,"STRONG",{});var ujt=s(L4e);NBr=r(ujt,"flaubert"),ujt.forEach(t),qBr=r(UGe," \u2014 "),EZ=n(UGe,"A",{href:!0});var bjt=s(EZ);jBr=r(bjt,"TFFlaubertForTokenClassification"),bjt.forEach(t),DBr=r(UGe," (FlauBERT model)"),UGe.forEach(t),GBr=i(he),uE=n(he,"LI",{});var JGe=s(uE);y4e=n(JGe,"STRONG",{});var vjt=s(y4e);OBr=r(vjt,"funnel"),vjt.forEach(t),VBr=r(JGe," \u2014 "),CZ=n(JGe,"A",{href:!0});var Fjt=s(CZ);XBr=r(Fjt,"TFFunnelForTokenClassification"),Fjt.forEach(t),zBr=r(JGe," (Funnel Transformer model)"),JGe.forEach(t),WBr=i(he),bE=n(he,"LI",{});var YGe=s(bE);x4e=n(YGe,"STRONG",{});var Tjt=s(x4e);QBr=r(Tjt,"layoutlm"),Tjt.forEach(t),HBr=r(YGe," \u2014 "),wZ=n(YGe,"A",{href:!0});var Mjt=s(wZ);UBr=r(Mjt,"TFLayoutLMForTokenClassification"),Mjt.forEach(t),JBr=r(YGe," (LayoutLM model)"),YGe.forEach(t),YBr=i(he),vE=n(he,"LI",{});var KGe=s(vE);$4e=n(KGe,"STRONG",{});var Ejt=s($4e);KBr=r(Ejt,"longformer"),Ejt.forEach(t),ZBr=r(KGe," \u2014 "),AZ=n(KGe,"A",{href:!0});var Cjt=s(AZ);eIr=r(Cjt,"TFLongformerForTokenClassification"),Cjt.forEach(t),oIr=r(KGe," (Longformer model)"),KGe.forEach(t),rIr=i(he),FE=n(he,"LI",{});var ZGe=s(FE);k4e=n(ZGe,"STRONG",{});var wjt=s(k4e);tIr=r(wjt,"mobilebert"),wjt.forEach(t),aIr=r(ZGe," \u2014 "),LZ=n(ZGe,"A",{href:!0});var Ajt=s(LZ);nIr=r(Ajt,"TFMobileBertForTokenClassification"),Ajt.forEach(t),sIr=r(ZGe," (MobileBERT model)"),ZGe.forEach(t),lIr=i(he),TE=n(he,"LI",{});var eOe=s(TE);S4e=n(eOe,"STRONG",{});var Ljt=s(S4e);iIr=r(Ljt,"mpnet"),Ljt.forEach(t),dIr=r(eOe," \u2014 "),yZ=n(eOe,"A",{href:!0});var yjt=s(yZ);cIr=r(yjt,"TFMPNetForTokenClassification"),yjt.forEach(t),fIr=r(eOe," (MPNet model)"),eOe.forEach(t),mIr=i(he),ME=n(he,"LI",{});var oOe=s(ME);R4e=n(oOe,"STRONG",{});var xjt=s(R4e);gIr=r(xjt,"rembert"),xjt.forEach(t),hIr=r(oOe," \u2014 "),xZ=n(oOe,"A",{href:!0});var $jt=s(xZ);pIr=r($jt,"TFRemBertForTokenClassification"),$jt.forEach(t),_Ir=r(oOe," (RemBERT model)"),oOe.forEach(t),uIr=i(he),EE=n(he,"LI",{});var rOe=s(EE);P4e=n(rOe,"STRONG",{});var kjt=s(P4e);bIr=r(kjt,"roberta"),kjt.forEach(t),vIr=r(rOe," \u2014 "),$Z=n(rOe,"A",{href:!0});var Sjt=s($Z);FIr=r(Sjt,"TFRobertaForTokenClassification"),Sjt.forEach(t),TIr=r(rOe," (RoBERTa model)"),rOe.forEach(t),MIr=i(he),CE=n(he,"LI",{});var tOe=s(CE);B4e=n(tOe,"STRONG",{});var Rjt=s(B4e);EIr=r(Rjt,"roformer"),Rjt.forEach(t),CIr=r(tOe," \u2014 "),kZ=n(tOe,"A",{href:!0});var Pjt=s(kZ);wIr=r(Pjt,"TFRoFormerForTokenClassification"),Pjt.forEach(t),AIr=r(tOe," (RoFormer model)"),tOe.forEach(t),LIr=i(he),wE=n(he,"LI",{});var aOe=s(wE);I4e=n(aOe,"STRONG",{});var Bjt=s(I4e);yIr=r(Bjt,"xlm"),Bjt.forEach(t),xIr=r(aOe," \u2014 "),SZ=n(aOe,"A",{href:!0});var Ijt=s(SZ);$Ir=r(Ijt,"TFXLMForTokenClassification"),Ijt.forEach(t),kIr=r(aOe," (XLM model)"),aOe.forEach(t),SIr=i(he),AE=n(he,"LI",{});var nOe=s(AE);N4e=n(nOe,"STRONG",{});var Njt=s(N4e);RIr=r(Njt,"xlm-roberta"),Njt.forEach(t),PIr=r(nOe," \u2014 "),RZ=n(nOe,"A",{href:!0});var qjt=s(RZ);BIr=r(qjt,"TFXLMRobertaForTokenClassification"),qjt.forEach(t),IIr=r(nOe," (XLM-RoBERTa model)"),nOe.forEach(t),NIr=i(he),LE=n(he,"LI",{});var sOe=s(LE);q4e=n(sOe,"STRONG",{});var jjt=s(q4e);qIr=r(jjt,"xlnet"),jjt.forEach(t),jIr=r(sOe," \u2014 "),PZ=n(sOe,"A",{href:!0});var Djt=s(PZ);DIr=r(Djt,"TFXLNetForTokenClassification"),Djt.forEach(t),GIr=r(sOe," (XLNet model)"),sOe.forEach(t),he.forEach(t),OIr=i(Kl),T(yE.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),sWe=i(f),Gc=n(f,"H2",{class:!0});var pHe=s(Gc);xE=n(pHe,"A",{id:!0,class:!0,href:!0});var Gjt=s(xE);j4e=n(Gjt,"SPAN",{});var Ojt=s(j4e);T(e$.$$.fragment,Ojt),Ojt.forEach(t),Gjt.forEach(t),VIr=i(pHe),D4e=n(pHe,"SPAN",{});var Vjt=s(D4e);XIr=r(Vjt,"TFAutoModelForQuestionAnswering"),Vjt.forEach(t),pHe.forEach(t),lWe=i(f),mr=n(f,"DIV",{class:!0});var Zl=s(mr);T(o$.$$.fragment,Zl),zIr=i(Zl),Oc=n(Zl,"P",{});var hae=s(Oc);WIr=r(hae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),BZ=n(hae,"A",{href:!0});var Xjt=s(BZ);QIr=r(Xjt,"from_pretrained()"),Xjt.forEach(t),HIr=r(hae," class method or the "),IZ=n(hae,"A",{href:!0});var zjt=s(IZ);UIr=r(zjt,"from_config()"),zjt.forEach(t),JIr=r(hae,` class
method.`),hae.forEach(t),YIr=i(Zl),r$=n(Zl,"P",{});var _He=s(r$);KIr=r(_He,"This class cannot be instantiated directly using "),G4e=n(_He,"CODE",{});var Wjt=s(G4e);ZIr=r(Wjt,"__init__()"),Wjt.forEach(t),eNr=r(_He," (throws an error)."),_He.forEach(t),oNr=i(Zl),Xt=n(Zl,"DIV",{class:!0});var SA=s(Xt);T(t$.$$.fragment,SA),rNr=i(SA),O4e=n(SA,"P",{});var Qjt=s(O4e);tNr=r(Qjt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Qjt.forEach(t),aNr=i(SA),Vc=n(SA,"P",{});var pae=s(Vc);nNr=r(pae,`Note:
Loading a model from its configuration file does `),V4e=n(pae,"STRONG",{});var Hjt=s(V4e);sNr=r(Hjt,"not"),Hjt.forEach(t),lNr=r(pae,` load the model weights. It only affects the
model\u2019s configuration. Use `),NZ=n(pae,"A",{href:!0});var Ujt=s(NZ);iNr=r(Ujt,"from_pretrained()"),Ujt.forEach(t),dNr=r(pae," to load the model weights."),pae.forEach(t),cNr=i(SA),T($E.$$.fragment,SA),SA.forEach(t),fNr=i(Zl),Dr=n(Zl,"DIV",{class:!0});var ei=s(Dr);T(a$.$$.fragment,ei),mNr=i(ei),X4e=n(ei,"P",{});var Jjt=s(X4e);gNr=r(Jjt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Jjt.forEach(t),hNr=i(ei),bn=n(ei,"P",{});var RA=s(bn);pNr=r(RA,"The model class to instantiate is selected based on the "),z4e=n(RA,"CODE",{});var Yjt=s(z4e);_Nr=r(Yjt,"model_type"),Yjt.forEach(t),uNr=r(RA,` property of the config object (either
passed as an argument or loaded from `),W4e=n(RA,"CODE",{});var Kjt=s(W4e);bNr=r(Kjt,"pretrained_model_name_or_path"),Kjt.forEach(t),vNr=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q4e=n(RA,"CODE",{});var Zjt=s(Q4e);FNr=r(Zjt,"pretrained_model_name_or_path"),Zjt.forEach(t),TNr=r(RA,":"),RA.forEach(t),MNr=i(ei),ce=n(ei,"UL",{});var pe=s(ce);kE=n(pe,"LI",{});var lOe=s(kE);H4e=n(lOe,"STRONG",{});var eDt=s(H4e);ENr=r(eDt,"albert"),eDt.forEach(t),CNr=r(lOe," \u2014 "),qZ=n(lOe,"A",{href:!0});var oDt=s(qZ);wNr=r(oDt,"TFAlbertForQuestionAnswering"),oDt.forEach(t),ANr=r(lOe," (ALBERT model)"),lOe.forEach(t),LNr=i(pe),SE=n(pe,"LI",{});var iOe=s(SE);U4e=n(iOe,"STRONG",{});var rDt=s(U4e);yNr=r(rDt,"bert"),rDt.forEach(t),xNr=r(iOe," \u2014 "),jZ=n(iOe,"A",{href:!0});var tDt=s(jZ);$Nr=r(tDt,"TFBertForQuestionAnswering"),tDt.forEach(t),kNr=r(iOe," (BERT model)"),iOe.forEach(t),SNr=i(pe),RE=n(pe,"LI",{});var dOe=s(RE);J4e=n(dOe,"STRONG",{});var aDt=s(J4e);RNr=r(aDt,"camembert"),aDt.forEach(t),PNr=r(dOe," \u2014 "),DZ=n(dOe,"A",{href:!0});var nDt=s(DZ);BNr=r(nDt,"TFCamembertForQuestionAnswering"),nDt.forEach(t),INr=r(dOe," (CamemBERT model)"),dOe.forEach(t),NNr=i(pe),PE=n(pe,"LI",{});var cOe=s(PE);Y4e=n(cOe,"STRONG",{});var sDt=s(Y4e);qNr=r(sDt,"convbert"),sDt.forEach(t),jNr=r(cOe," \u2014 "),GZ=n(cOe,"A",{href:!0});var lDt=s(GZ);DNr=r(lDt,"TFConvBertForQuestionAnswering"),lDt.forEach(t),GNr=r(cOe," (ConvBERT model)"),cOe.forEach(t),ONr=i(pe),BE=n(pe,"LI",{});var fOe=s(BE);K4e=n(fOe,"STRONG",{});var iDt=s(K4e);VNr=r(iDt,"deberta"),iDt.forEach(t),XNr=r(fOe," \u2014 "),OZ=n(fOe,"A",{href:!0});var dDt=s(OZ);zNr=r(dDt,"TFDebertaForQuestionAnswering"),dDt.forEach(t),WNr=r(fOe," (DeBERTa model)"),fOe.forEach(t),QNr=i(pe),IE=n(pe,"LI",{});var mOe=s(IE);Z4e=n(mOe,"STRONG",{});var cDt=s(Z4e);HNr=r(cDt,"deberta-v2"),cDt.forEach(t),UNr=r(mOe," \u2014 "),VZ=n(mOe,"A",{href:!0});var fDt=s(VZ);JNr=r(fDt,"TFDebertaV2ForQuestionAnswering"),fDt.forEach(t),YNr=r(mOe," (DeBERTa-v2 model)"),mOe.forEach(t),KNr=i(pe),NE=n(pe,"LI",{});var gOe=s(NE);eEe=n(gOe,"STRONG",{});var mDt=s(eEe);ZNr=r(mDt,"distilbert"),mDt.forEach(t),eqr=r(gOe," \u2014 "),XZ=n(gOe,"A",{href:!0});var gDt=s(XZ);oqr=r(gDt,"TFDistilBertForQuestionAnswering"),gDt.forEach(t),rqr=r(gOe," (DistilBERT model)"),gOe.forEach(t),tqr=i(pe),qE=n(pe,"LI",{});var hOe=s(qE);oEe=n(hOe,"STRONG",{});var hDt=s(oEe);aqr=r(hDt,"electra"),hDt.forEach(t),nqr=r(hOe," \u2014 "),zZ=n(hOe,"A",{href:!0});var pDt=s(zZ);sqr=r(pDt,"TFElectraForQuestionAnswering"),pDt.forEach(t),lqr=r(hOe," (ELECTRA model)"),hOe.forEach(t),iqr=i(pe),jE=n(pe,"LI",{});var pOe=s(jE);rEe=n(pOe,"STRONG",{});var _Dt=s(rEe);dqr=r(_Dt,"flaubert"),_Dt.forEach(t),cqr=r(pOe," \u2014 "),WZ=n(pOe,"A",{href:!0});var uDt=s(WZ);fqr=r(uDt,"TFFlaubertForQuestionAnsweringSimple"),uDt.forEach(t),mqr=r(pOe," (FlauBERT model)"),pOe.forEach(t),gqr=i(pe),DE=n(pe,"LI",{});var _Oe=s(DE);tEe=n(_Oe,"STRONG",{});var bDt=s(tEe);hqr=r(bDt,"funnel"),bDt.forEach(t),pqr=r(_Oe," \u2014 "),QZ=n(_Oe,"A",{href:!0});var vDt=s(QZ);_qr=r(vDt,"TFFunnelForQuestionAnswering"),vDt.forEach(t),uqr=r(_Oe," (Funnel Transformer model)"),_Oe.forEach(t),bqr=i(pe),GE=n(pe,"LI",{});var uOe=s(GE);aEe=n(uOe,"STRONG",{});var FDt=s(aEe);vqr=r(FDt,"gptj"),FDt.forEach(t),Fqr=r(uOe," \u2014 "),HZ=n(uOe,"A",{href:!0});var TDt=s(HZ);Tqr=r(TDt,"TFGPTJForQuestionAnswering"),TDt.forEach(t),Mqr=r(uOe," (GPT-J model)"),uOe.forEach(t),Eqr=i(pe),OE=n(pe,"LI",{});var bOe=s(OE);nEe=n(bOe,"STRONG",{});var MDt=s(nEe);Cqr=r(MDt,"longformer"),MDt.forEach(t),wqr=r(bOe," \u2014 "),UZ=n(bOe,"A",{href:!0});var EDt=s(UZ);Aqr=r(EDt,"TFLongformerForQuestionAnswering"),EDt.forEach(t),Lqr=r(bOe," (Longformer model)"),bOe.forEach(t),yqr=i(pe),VE=n(pe,"LI",{});var vOe=s(VE);sEe=n(vOe,"STRONG",{});var CDt=s(sEe);xqr=r(CDt,"mobilebert"),CDt.forEach(t),$qr=r(vOe," \u2014 "),JZ=n(vOe,"A",{href:!0});var wDt=s(JZ);kqr=r(wDt,"TFMobileBertForQuestionAnswering"),wDt.forEach(t),Sqr=r(vOe," (MobileBERT model)"),vOe.forEach(t),Rqr=i(pe),XE=n(pe,"LI",{});var FOe=s(XE);lEe=n(FOe,"STRONG",{});var ADt=s(lEe);Pqr=r(ADt,"mpnet"),ADt.forEach(t),Bqr=r(FOe," \u2014 "),YZ=n(FOe,"A",{href:!0});var LDt=s(YZ);Iqr=r(LDt,"TFMPNetForQuestionAnswering"),LDt.forEach(t),Nqr=r(FOe," (MPNet model)"),FOe.forEach(t),qqr=i(pe),zE=n(pe,"LI",{});var TOe=s(zE);iEe=n(TOe,"STRONG",{});var yDt=s(iEe);jqr=r(yDt,"rembert"),yDt.forEach(t),Dqr=r(TOe," \u2014 "),KZ=n(TOe,"A",{href:!0});var xDt=s(KZ);Gqr=r(xDt,"TFRemBertForQuestionAnswering"),xDt.forEach(t),Oqr=r(TOe," (RemBERT model)"),TOe.forEach(t),Vqr=i(pe),WE=n(pe,"LI",{});var MOe=s(WE);dEe=n(MOe,"STRONG",{});var $Dt=s(dEe);Xqr=r($Dt,"roberta"),$Dt.forEach(t),zqr=r(MOe," \u2014 "),ZZ=n(MOe,"A",{href:!0});var kDt=s(ZZ);Wqr=r(kDt,"TFRobertaForQuestionAnswering"),kDt.forEach(t),Qqr=r(MOe," (RoBERTa model)"),MOe.forEach(t),Hqr=i(pe),QE=n(pe,"LI",{});var EOe=s(QE);cEe=n(EOe,"STRONG",{});var SDt=s(cEe);Uqr=r(SDt,"roformer"),SDt.forEach(t),Jqr=r(EOe," \u2014 "),eee=n(EOe,"A",{href:!0});var RDt=s(eee);Yqr=r(RDt,"TFRoFormerForQuestionAnswering"),RDt.forEach(t),Kqr=r(EOe," (RoFormer model)"),EOe.forEach(t),Zqr=i(pe),HE=n(pe,"LI",{});var COe=s(HE);fEe=n(COe,"STRONG",{});var PDt=s(fEe);ejr=r(PDt,"xlm"),PDt.forEach(t),ojr=r(COe," \u2014 "),oee=n(COe,"A",{href:!0});var BDt=s(oee);rjr=r(BDt,"TFXLMForQuestionAnsweringSimple"),BDt.forEach(t),tjr=r(COe," (XLM model)"),COe.forEach(t),ajr=i(pe),UE=n(pe,"LI",{});var wOe=s(UE);mEe=n(wOe,"STRONG",{});var IDt=s(mEe);njr=r(IDt,"xlm-roberta"),IDt.forEach(t),sjr=r(wOe," \u2014 "),ree=n(wOe,"A",{href:!0});var NDt=s(ree);ljr=r(NDt,"TFXLMRobertaForQuestionAnswering"),NDt.forEach(t),ijr=r(wOe," (XLM-RoBERTa model)"),wOe.forEach(t),djr=i(pe),JE=n(pe,"LI",{});var AOe=s(JE);gEe=n(AOe,"STRONG",{});var qDt=s(gEe);cjr=r(qDt,"xlnet"),qDt.forEach(t),fjr=r(AOe," \u2014 "),tee=n(AOe,"A",{href:!0});var jDt=s(tee);mjr=r(jDt,"TFXLNetForQuestionAnsweringSimple"),jDt.forEach(t),gjr=r(AOe," (XLNet model)"),AOe.forEach(t),pe.forEach(t),hjr=i(ei),T(YE.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),iWe=i(f),Xc=n(f,"H2",{class:!0});var uHe=s(Xc);KE=n(uHe,"A",{id:!0,class:!0,href:!0});var DDt=s(KE);hEe=n(DDt,"SPAN",{});var GDt=s(hEe);T(n$.$$.fragment,GDt),GDt.forEach(t),DDt.forEach(t),pjr=i(uHe),pEe=n(uHe,"SPAN",{});var ODt=s(pEe);_jr=r(ODt,"TFAutoModelForVision2Seq"),ODt.forEach(t),uHe.forEach(t),dWe=i(f),gr=n(f,"DIV",{class:!0});var oi=s(gr);T(s$.$$.fragment,oi),ujr=i(oi),zc=n(oi,"P",{});var _ae=s(zc);bjr=r(_ae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),aee=n(_ae,"A",{href:!0});var VDt=s(aee);vjr=r(VDt,"from_pretrained()"),VDt.forEach(t),Fjr=r(_ae," class method or the "),nee=n(_ae,"A",{href:!0});var XDt=s(nee);Tjr=r(XDt,"from_config()"),XDt.forEach(t),Mjr=r(_ae,` class
method.`),_ae.forEach(t),Ejr=i(oi),l$=n(oi,"P",{});var bHe=s(l$);Cjr=r(bHe,"This class cannot be instantiated directly using "),_Ee=n(bHe,"CODE",{});var zDt=s(_Ee);wjr=r(zDt,"__init__()"),zDt.forEach(t),Ajr=r(bHe," (throws an error)."),bHe.forEach(t),Ljr=i(oi),zt=n(oi,"DIV",{class:!0});var PA=s(zt);T(i$.$$.fragment,PA),yjr=i(PA),uEe=n(PA,"P",{});var WDt=s(uEe);xjr=r(WDt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),WDt.forEach(t),$jr=i(PA),Wc=n(PA,"P",{});var uae=s(Wc);kjr=r(uae,`Note:
Loading a model from its configuration file does `),bEe=n(uae,"STRONG",{});var QDt=s(bEe);Sjr=r(QDt,"not"),QDt.forEach(t),Rjr=r(uae,` load the model weights. It only affects the
model\u2019s configuration. Use `),see=n(uae,"A",{href:!0});var HDt=s(see);Pjr=r(HDt,"from_pretrained()"),HDt.forEach(t),Bjr=r(uae," to load the model weights."),uae.forEach(t),Ijr=i(PA),T(ZE.$$.fragment,PA),PA.forEach(t),Njr=i(oi),Gr=n(oi,"DIV",{class:!0});var ri=s(Gr);T(d$.$$.fragment,ri),qjr=i(ri),vEe=n(ri,"P",{});var UDt=s(vEe);jjr=r(UDt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),UDt.forEach(t),Djr=i(ri),vn=n(ri,"P",{});var BA=s(vn);Gjr=r(BA,"The model class to instantiate is selected based on the "),FEe=n(BA,"CODE",{});var JDt=s(FEe);Ojr=r(JDt,"model_type"),JDt.forEach(t),Vjr=r(BA,` property of the config object (either
passed as an argument or loaded from `),TEe=n(BA,"CODE",{});var YDt=s(TEe);Xjr=r(YDt,"pretrained_model_name_or_path"),YDt.forEach(t),zjr=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MEe=n(BA,"CODE",{});var KDt=s(MEe);Wjr=r(KDt,"pretrained_model_name_or_path"),KDt.forEach(t),Qjr=r(BA,":"),BA.forEach(t),Hjr=i(ri),EEe=n(ri,"UL",{});var ZDt=s(EEe);eC=n(ZDt,"LI",{});var LOe=s(eC);CEe=n(LOe,"STRONG",{});var eGt=s(CEe);Ujr=r(eGt,"vision-encoder-decoder"),eGt.forEach(t),Jjr=r(LOe," \u2014 "),lee=n(LOe,"A",{href:!0});var oGt=s(lee);Yjr=r(oGt,"TFVisionEncoderDecoderModel"),oGt.forEach(t),Kjr=r(LOe," (Vision Encoder decoder model)"),LOe.forEach(t),ZDt.forEach(t),Zjr=i(ri),T(oC.$$.fragment,ri),ri.forEach(t),oi.forEach(t),cWe=i(f),Qc=n(f,"H2",{class:!0});var vHe=s(Qc);rC=n(vHe,"A",{id:!0,class:!0,href:!0});var rGt=s(rC);wEe=n(rGt,"SPAN",{});var tGt=s(wEe);T(c$.$$.fragment,tGt),tGt.forEach(t),rGt.forEach(t),eDr=i(vHe),AEe=n(vHe,"SPAN",{});var aGt=s(AEe);oDr=r(aGt,"TFAutoModelForSpeechSeq2Seq"),aGt.forEach(t),vHe.forEach(t),fWe=i(f),hr=n(f,"DIV",{class:!0});var ti=s(hr);T(f$.$$.fragment,ti),rDr=i(ti),Hc=n(ti,"P",{});var bae=s(Hc);tDr=r(bae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),iee=n(bae,"A",{href:!0});var nGt=s(iee);aDr=r(nGt,"from_pretrained()"),nGt.forEach(t),nDr=r(bae," class method or the "),dee=n(bae,"A",{href:!0});var sGt=s(dee);sDr=r(sGt,"from_config()"),sGt.forEach(t),lDr=r(bae,` class
method.`),bae.forEach(t),iDr=i(ti),m$=n(ti,"P",{});var FHe=s(m$);dDr=r(FHe,"This class cannot be instantiated directly using "),LEe=n(FHe,"CODE",{});var lGt=s(LEe);cDr=r(lGt,"__init__()"),lGt.forEach(t),fDr=r(FHe," (throws an error)."),FHe.forEach(t),mDr=i(ti),Wt=n(ti,"DIV",{class:!0});var IA=s(Wt);T(g$.$$.fragment,IA),gDr=i(IA),yEe=n(IA,"P",{});var iGt=s(yEe);hDr=r(iGt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),iGt.forEach(t),pDr=i(IA),Uc=n(IA,"P",{});var vae=s(Uc);_Dr=r(vae,`Note:
Loading a model from its configuration file does `),xEe=n(vae,"STRONG",{});var dGt=s(xEe);uDr=r(dGt,"not"),dGt.forEach(t),bDr=r(vae,` load the model weights. It only affects the
model\u2019s configuration. Use `),cee=n(vae,"A",{href:!0});var cGt=s(cee);vDr=r(cGt,"from_pretrained()"),cGt.forEach(t),FDr=r(vae," to load the model weights."),vae.forEach(t),TDr=i(IA),T(tC.$$.fragment,IA),IA.forEach(t),MDr=i(ti),Or=n(ti,"DIV",{class:!0});var ai=s(Or);T(h$.$$.fragment,ai),EDr=i(ai),$Ee=n(ai,"P",{});var fGt=s($Ee);CDr=r(fGt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),fGt.forEach(t),wDr=i(ai),Fn=n(ai,"P",{});var NA=s(Fn);ADr=r(NA,"The model class to instantiate is selected based on the "),kEe=n(NA,"CODE",{});var mGt=s(kEe);LDr=r(mGt,"model_type"),mGt.forEach(t),yDr=r(NA,` property of the config object (either
passed as an argument or loaded from `),SEe=n(NA,"CODE",{});var gGt=s(SEe);xDr=r(gGt,"pretrained_model_name_or_path"),gGt.forEach(t),$Dr=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),REe=n(NA,"CODE",{});var hGt=s(REe);kDr=r(hGt,"pretrained_model_name_or_path"),hGt.forEach(t),SDr=r(NA,":"),NA.forEach(t),RDr=i(ai),PEe=n(ai,"UL",{});var pGt=s(PEe);aC=n(pGt,"LI",{});var yOe=s(aC);BEe=n(yOe,"STRONG",{});var _Gt=s(BEe);PDr=r(_Gt,"speech_to_text"),_Gt.forEach(t),BDr=r(yOe," \u2014 "),fee=n(yOe,"A",{href:!0});var uGt=s(fee);IDr=r(uGt,"TFSpeech2TextForConditionalGeneration"),uGt.forEach(t),NDr=r(yOe," (Speech2Text model)"),yOe.forEach(t),pGt.forEach(t),qDr=i(ai),T(nC.$$.fragment,ai),ai.forEach(t),ti.forEach(t),mWe=i(f),Jc=n(f,"H2",{class:!0});var THe=s(Jc);sC=n(THe,"A",{id:!0,class:!0,href:!0});var bGt=s(sC);IEe=n(bGt,"SPAN",{});var vGt=s(IEe);T(p$.$$.fragment,vGt),vGt.forEach(t),bGt.forEach(t),jDr=i(THe),NEe=n(THe,"SPAN",{});var FGt=s(NEe);DDr=r(FGt,"FlaxAutoModel"),FGt.forEach(t),THe.forEach(t),gWe=i(f),pr=n(f,"DIV",{class:!0});var ni=s(pr);T(_$.$$.fragment,ni),GDr=i(ni),Yc=n(ni,"P",{});var Fae=s(Yc);ODr=r(Fae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mee=n(Fae,"A",{href:!0});var TGt=s(mee);VDr=r(TGt,"from_pretrained()"),TGt.forEach(t),XDr=r(Fae," class method or the "),gee=n(Fae,"A",{href:!0});var MGt=s(gee);zDr=r(MGt,"from_config()"),MGt.forEach(t),WDr=r(Fae,` class
method.`),Fae.forEach(t),QDr=i(ni),u$=n(ni,"P",{});var MHe=s(u$);HDr=r(MHe,"This class cannot be instantiated directly using "),qEe=n(MHe,"CODE",{});var EGt=s(qEe);UDr=r(EGt,"__init__()"),EGt.forEach(t),JDr=r(MHe," (throws an error)."),MHe.forEach(t),YDr=i(ni),Qt=n(ni,"DIV",{class:!0});var qA=s(Qt);T(b$.$$.fragment,qA),KDr=i(qA),jEe=n(qA,"P",{});var CGt=s(jEe);ZDr=r(CGt,"Instantiates one of the base model classes of the library from a configuration."),CGt.forEach(t),eGr=i(qA),Kc=n(qA,"P",{});var Tae=s(Kc);oGr=r(Tae,`Note:
Loading a model from its configuration file does `),DEe=n(Tae,"STRONG",{});var wGt=s(DEe);rGr=r(wGt,"not"),wGt.forEach(t),tGr=r(Tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),hee=n(Tae,"A",{href:!0});var AGt=s(hee);aGr=r(AGt,"from_pretrained()"),AGt.forEach(t),nGr=r(Tae," to load the model weights."),Tae.forEach(t),sGr=i(qA),T(lC.$$.fragment,qA),qA.forEach(t),lGr=i(ni),Vr=n(ni,"DIV",{class:!0});var si=s(Vr);T(v$.$$.fragment,si),iGr=i(si),GEe=n(si,"P",{});var LGt=s(GEe);dGr=r(LGt,"Instantiate one of the base model classes of the library from a pretrained model."),LGt.forEach(t),cGr=i(si),Tn=n(si,"P",{});var jA=s(Tn);fGr=r(jA,"The model class to instantiate is selected based on the "),OEe=n(jA,"CODE",{});var yGt=s(OEe);mGr=r(yGt,"model_type"),yGt.forEach(t),gGr=r(jA,` property of the config object (either
passed as an argument or loaded from `),VEe=n(jA,"CODE",{});var xGt=s(VEe);hGr=r(xGt,"pretrained_model_name_or_path"),xGt.forEach(t),pGr=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XEe=n(jA,"CODE",{});var $Gt=s(XEe);_Gr=r($Gt,"pretrained_model_name_or_path"),$Gt.forEach(t),uGr=r(jA,":"),jA.forEach(t),bGr=i(si),oe=n(si,"UL",{});var ae=s(oe);iC=n(ae,"LI",{});var xOe=s(iC);zEe=n(xOe,"STRONG",{});var kGt=s(zEe);vGr=r(kGt,"albert"),kGt.forEach(t),FGr=r(xOe," \u2014 "),pee=n(xOe,"A",{href:!0});var SGt=s(pee);TGr=r(SGt,"FlaxAlbertModel"),SGt.forEach(t),MGr=r(xOe," (ALBERT model)"),xOe.forEach(t),EGr=i(ae),dC=n(ae,"LI",{});var $Oe=s(dC);WEe=n($Oe,"STRONG",{});var RGt=s(WEe);CGr=r(RGt,"bart"),RGt.forEach(t),wGr=r($Oe," \u2014 "),_ee=n($Oe,"A",{href:!0});var PGt=s(_ee);AGr=r(PGt,"FlaxBartModel"),PGt.forEach(t),LGr=r($Oe," (BART model)"),$Oe.forEach(t),yGr=i(ae),cC=n(ae,"LI",{});var kOe=s(cC);QEe=n(kOe,"STRONG",{});var BGt=s(QEe);xGr=r(BGt,"beit"),BGt.forEach(t),$Gr=r(kOe," \u2014 "),uee=n(kOe,"A",{href:!0});var IGt=s(uee);kGr=r(IGt,"FlaxBeitModel"),IGt.forEach(t),SGr=r(kOe," (BEiT model)"),kOe.forEach(t),RGr=i(ae),fC=n(ae,"LI",{});var SOe=s(fC);HEe=n(SOe,"STRONG",{});var NGt=s(HEe);PGr=r(NGt,"bert"),NGt.forEach(t),BGr=r(SOe," \u2014 "),bee=n(SOe,"A",{href:!0});var qGt=s(bee);IGr=r(qGt,"FlaxBertModel"),qGt.forEach(t),NGr=r(SOe," (BERT model)"),SOe.forEach(t),qGr=i(ae),mC=n(ae,"LI",{});var ROe=s(mC);UEe=n(ROe,"STRONG",{});var jGt=s(UEe);jGr=r(jGt,"big_bird"),jGt.forEach(t),DGr=r(ROe," \u2014 "),vee=n(ROe,"A",{href:!0});var DGt=s(vee);GGr=r(DGt,"FlaxBigBirdModel"),DGt.forEach(t),OGr=r(ROe," (BigBird model)"),ROe.forEach(t),VGr=i(ae),gC=n(ae,"LI",{});var POe=s(gC);JEe=n(POe,"STRONG",{});var GGt=s(JEe);XGr=r(GGt,"blenderbot"),GGt.forEach(t),zGr=r(POe," \u2014 "),Fee=n(POe,"A",{href:!0});var OGt=s(Fee);WGr=r(OGt,"FlaxBlenderbotModel"),OGt.forEach(t),QGr=r(POe," (Blenderbot model)"),POe.forEach(t),HGr=i(ae),hC=n(ae,"LI",{});var BOe=s(hC);YEe=n(BOe,"STRONG",{});var VGt=s(YEe);UGr=r(VGt,"blenderbot-small"),VGt.forEach(t),JGr=r(BOe," \u2014 "),Tee=n(BOe,"A",{href:!0});var XGt=s(Tee);YGr=r(XGt,"FlaxBlenderbotSmallModel"),XGt.forEach(t),KGr=r(BOe," (BlenderbotSmall model)"),BOe.forEach(t),ZGr=i(ae),pC=n(ae,"LI",{});var IOe=s(pC);KEe=n(IOe,"STRONG",{});var zGt=s(KEe);eOr=r(zGt,"clip"),zGt.forEach(t),oOr=r(IOe," \u2014 "),Mee=n(IOe,"A",{href:!0});var WGt=s(Mee);rOr=r(WGt,"FlaxCLIPModel"),WGt.forEach(t),tOr=r(IOe," (CLIP model)"),IOe.forEach(t),aOr=i(ae),_C=n(ae,"LI",{});var NOe=s(_C);ZEe=n(NOe,"STRONG",{});var QGt=s(ZEe);nOr=r(QGt,"distilbert"),QGt.forEach(t),sOr=r(NOe," \u2014 "),Eee=n(NOe,"A",{href:!0});var HGt=s(Eee);lOr=r(HGt,"FlaxDistilBertModel"),HGt.forEach(t),iOr=r(NOe," (DistilBERT model)"),NOe.forEach(t),dOr=i(ae),uC=n(ae,"LI",{});var qOe=s(uC);eCe=n(qOe,"STRONG",{});var UGt=s(eCe);cOr=r(UGt,"electra"),UGt.forEach(t),fOr=r(qOe," \u2014 "),Cee=n(qOe,"A",{href:!0});var JGt=s(Cee);mOr=r(JGt,"FlaxElectraModel"),JGt.forEach(t),gOr=r(qOe," (ELECTRA model)"),qOe.forEach(t),hOr=i(ae),bC=n(ae,"LI",{});var jOe=s(bC);oCe=n(jOe,"STRONG",{});var YGt=s(oCe);pOr=r(YGt,"gpt2"),YGt.forEach(t),_Or=r(jOe," \u2014 "),wee=n(jOe,"A",{href:!0});var KGt=s(wee);uOr=r(KGt,"FlaxGPT2Model"),KGt.forEach(t),bOr=r(jOe," (OpenAI GPT-2 model)"),jOe.forEach(t),vOr=i(ae),vC=n(ae,"LI",{});var DOe=s(vC);rCe=n(DOe,"STRONG",{});var ZGt=s(rCe);FOr=r(ZGt,"gpt_neo"),ZGt.forEach(t),TOr=r(DOe," \u2014 "),Aee=n(DOe,"A",{href:!0});var eOt=s(Aee);MOr=r(eOt,"FlaxGPTNeoModel"),eOt.forEach(t),EOr=r(DOe," (GPT Neo model)"),DOe.forEach(t),COr=i(ae),FC=n(ae,"LI",{});var GOe=s(FC);tCe=n(GOe,"STRONG",{});var oOt=s(tCe);wOr=r(oOt,"gptj"),oOt.forEach(t),AOr=r(GOe," \u2014 "),Lee=n(GOe,"A",{href:!0});var rOt=s(Lee);LOr=r(rOt,"FlaxGPTJModel"),rOt.forEach(t),yOr=r(GOe," (GPT-J model)"),GOe.forEach(t),xOr=i(ae),TC=n(ae,"LI",{});var OOe=s(TC);aCe=n(OOe,"STRONG",{});var tOt=s(aCe);$Or=r(tOt,"longt5"),tOt.forEach(t),kOr=r(OOe," \u2014 "),yee=n(OOe,"A",{href:!0});var aOt=s(yee);SOr=r(aOt,"FlaxLongT5Model"),aOt.forEach(t),ROr=r(OOe," (LongT5 model)"),OOe.forEach(t),POr=i(ae),MC=n(ae,"LI",{});var VOe=s(MC);nCe=n(VOe,"STRONG",{});var nOt=s(nCe);BOr=r(nOt,"marian"),nOt.forEach(t),IOr=r(VOe," \u2014 "),xee=n(VOe,"A",{href:!0});var sOt=s(xee);NOr=r(sOt,"FlaxMarianModel"),sOt.forEach(t),qOr=r(VOe," (Marian model)"),VOe.forEach(t),jOr=i(ae),EC=n(ae,"LI",{});var XOe=s(EC);sCe=n(XOe,"STRONG",{});var lOt=s(sCe);DOr=r(lOt,"mbart"),lOt.forEach(t),GOr=r(XOe," \u2014 "),$ee=n(XOe,"A",{href:!0});var iOt=s($ee);OOr=r(iOt,"FlaxMBartModel"),iOt.forEach(t),VOr=r(XOe," (mBART model)"),XOe.forEach(t),XOr=i(ae),CC=n(ae,"LI",{});var zOe=s(CC);lCe=n(zOe,"STRONG",{});var dOt=s(lCe);zOr=r(dOt,"mt5"),dOt.forEach(t),WOr=r(zOe," \u2014 "),kee=n(zOe,"A",{href:!0});var cOt=s(kee);QOr=r(cOt,"FlaxMT5Model"),cOt.forEach(t),HOr=r(zOe," (MT5 model)"),zOe.forEach(t),UOr=i(ae),wC=n(ae,"LI",{});var WOe=s(wC);iCe=n(WOe,"STRONG",{});var fOt=s(iCe);JOr=r(fOt,"opt"),fOt.forEach(t),YOr=r(WOe," \u2014 "),See=n(WOe,"A",{href:!0});var mOt=s(See);KOr=r(mOt,"FlaxOPTModel"),mOt.forEach(t),ZOr=r(WOe," (OPT model)"),WOe.forEach(t),eVr=i(ae),AC=n(ae,"LI",{});var QOe=s(AC);dCe=n(QOe,"STRONG",{});var gOt=s(dCe);oVr=r(gOt,"pegasus"),gOt.forEach(t),rVr=r(QOe," \u2014 "),Ree=n(QOe,"A",{href:!0});var hOt=s(Ree);tVr=r(hOt,"FlaxPegasusModel"),hOt.forEach(t),aVr=r(QOe," (Pegasus model)"),QOe.forEach(t),nVr=i(ae),LC=n(ae,"LI",{});var HOe=s(LC);cCe=n(HOe,"STRONG",{});var pOt=s(cCe);sVr=r(pOt,"roberta"),pOt.forEach(t),lVr=r(HOe," \u2014 "),Pee=n(HOe,"A",{href:!0});var _Ot=s(Pee);iVr=r(_Ot,"FlaxRobertaModel"),_Ot.forEach(t),dVr=r(HOe," (RoBERTa model)"),HOe.forEach(t),cVr=i(ae),yC=n(ae,"LI",{});var UOe=s(yC);fCe=n(UOe,"STRONG",{});var uOt=s(fCe);fVr=r(uOt,"roformer"),uOt.forEach(t),mVr=r(UOe," \u2014 "),Bee=n(UOe,"A",{href:!0});var bOt=s(Bee);gVr=r(bOt,"FlaxRoFormerModel"),bOt.forEach(t),hVr=r(UOe," (RoFormer model)"),UOe.forEach(t),pVr=i(ae),xC=n(ae,"LI",{});var JOe=s(xC);mCe=n(JOe,"STRONG",{});var vOt=s(mCe);_Vr=r(vOt,"t5"),vOt.forEach(t),uVr=r(JOe," \u2014 "),Iee=n(JOe,"A",{href:!0});var FOt=s(Iee);bVr=r(FOt,"FlaxT5Model"),FOt.forEach(t),vVr=r(JOe," (T5 model)"),JOe.forEach(t),FVr=i(ae),$C=n(ae,"LI",{});var YOe=s($C);gCe=n(YOe,"STRONG",{});var TOt=s(gCe);TVr=r(TOt,"vision-text-dual-encoder"),TOt.forEach(t),MVr=r(YOe," \u2014 "),Nee=n(YOe,"A",{href:!0});var MOt=s(Nee);EVr=r(MOt,"FlaxVisionTextDualEncoderModel"),MOt.forEach(t),CVr=r(YOe," (VisionTextDualEncoder model)"),YOe.forEach(t),wVr=i(ae),kC=n(ae,"LI",{});var KOe=s(kC);hCe=n(KOe,"STRONG",{});var EOt=s(hCe);AVr=r(EOt,"vit"),EOt.forEach(t),LVr=r(KOe," \u2014 "),qee=n(KOe,"A",{href:!0});var COt=s(qee);yVr=r(COt,"FlaxViTModel"),COt.forEach(t),xVr=r(KOe," (ViT model)"),KOe.forEach(t),$Vr=i(ae),SC=n(ae,"LI",{});var ZOe=s(SC);pCe=n(ZOe,"STRONG",{});var wOt=s(pCe);kVr=r(wOt,"wav2vec2"),wOt.forEach(t),SVr=r(ZOe," \u2014 "),jee=n(ZOe,"A",{href:!0});var AOt=s(jee);RVr=r(AOt,"FlaxWav2Vec2Model"),AOt.forEach(t),PVr=r(ZOe," (Wav2Vec2 model)"),ZOe.forEach(t),BVr=i(ae),RC=n(ae,"LI",{});var eVe=s(RC);_Ce=n(eVe,"STRONG",{});var LOt=s(_Ce);IVr=r(LOt,"xglm"),LOt.forEach(t),NVr=r(eVe," \u2014 "),Dee=n(eVe,"A",{href:!0});var yOt=s(Dee);qVr=r(yOt,"FlaxXGLMModel"),yOt.forEach(t),jVr=r(eVe," (XGLM model)"),eVe.forEach(t),DVr=i(ae),PC=n(ae,"LI",{});var oVe=s(PC);uCe=n(oVe,"STRONG",{});var xOt=s(uCe);GVr=r(xOt,"xlm-roberta"),xOt.forEach(t),OVr=r(oVe," \u2014 "),Gee=n(oVe,"A",{href:!0});var $Ot=s(Gee);VVr=r($Ot,"FlaxXLMRobertaModel"),$Ot.forEach(t),XVr=r(oVe," (XLM-RoBERTa model)"),oVe.forEach(t),ae.forEach(t),zVr=i(si),T(BC.$$.fragment,si),si.forEach(t),ni.forEach(t),hWe=i(f),Zc=n(f,"H2",{class:!0});var EHe=s(Zc);IC=n(EHe,"A",{id:!0,class:!0,href:!0});var kOt=s(IC);bCe=n(kOt,"SPAN",{});var SOt=s(bCe);T(F$.$$.fragment,SOt),SOt.forEach(t),kOt.forEach(t),WVr=i(EHe),vCe=n(EHe,"SPAN",{});var ROt=s(vCe);QVr=r(ROt,"FlaxAutoModelForCausalLM"),ROt.forEach(t),EHe.forEach(t),pWe=i(f),_r=n(f,"DIV",{class:!0});var li=s(_r);T(T$.$$.fragment,li),HVr=i(li),ef=n(li,"P",{});var Mae=s(ef);UVr=r(Mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Oee=n(Mae,"A",{href:!0});var POt=s(Oee);JVr=r(POt,"from_pretrained()"),POt.forEach(t),YVr=r(Mae," class method or the "),Vee=n(Mae,"A",{href:!0});var BOt=s(Vee);KVr=r(BOt,"from_config()"),BOt.forEach(t),ZVr=r(Mae,` class
method.`),Mae.forEach(t),eXr=i(li),M$=n(li,"P",{});var CHe=s(M$);oXr=r(CHe,"This class cannot be instantiated directly using "),FCe=n(CHe,"CODE",{});var IOt=s(FCe);rXr=r(IOt,"__init__()"),IOt.forEach(t),tXr=r(CHe," (throws an error)."),CHe.forEach(t),aXr=i(li),Ht=n(li,"DIV",{class:!0});var DA=s(Ht);T(E$.$$.fragment,DA),nXr=i(DA),TCe=n(DA,"P",{});var NOt=s(TCe);sXr=r(NOt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),NOt.forEach(t),lXr=i(DA),of=n(DA,"P",{});var Eae=s(of);iXr=r(Eae,`Note:
Loading a model from its configuration file does `),MCe=n(Eae,"STRONG",{});var qOt=s(MCe);dXr=r(qOt,"not"),qOt.forEach(t),cXr=r(Eae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xee=n(Eae,"A",{href:!0});var jOt=s(Xee);fXr=r(jOt,"from_pretrained()"),jOt.forEach(t),mXr=r(Eae," to load the model weights."),Eae.forEach(t),gXr=i(DA),T(NC.$$.fragment,DA),DA.forEach(t),hXr=i(li),Xr=n(li,"DIV",{class:!0});var ii=s(Xr);T(C$.$$.fragment,ii),pXr=i(ii),ECe=n(ii,"P",{});var DOt=s(ECe);_Xr=r(DOt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),DOt.forEach(t),uXr=i(ii),Mn=n(ii,"P",{});var GA=s(Mn);bXr=r(GA,"The model class to instantiate is selected based on the "),CCe=n(GA,"CODE",{});var GOt=s(CCe);vXr=r(GOt,"model_type"),GOt.forEach(t),FXr=r(GA,` property of the config object (either
passed as an argument or loaded from `),wCe=n(GA,"CODE",{});var OOt=s(wCe);TXr=r(OOt,"pretrained_model_name_or_path"),OOt.forEach(t),MXr=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ACe=n(GA,"CODE",{});var VOt=s(ACe);EXr=r(VOt,"pretrained_model_name_or_path"),VOt.forEach(t),CXr=r(GA,":"),GA.forEach(t),wXr=i(ii),xe=n(ii,"UL",{});var Ne=s(xe);qC=n(Ne,"LI",{});var rVe=s(qC);LCe=n(rVe,"STRONG",{});var XOt=s(LCe);AXr=r(XOt,"bart"),XOt.forEach(t),LXr=r(rVe," \u2014 "),zee=n(rVe,"A",{href:!0});var zOt=s(zee);yXr=r(zOt,"FlaxBartForCausalLM"),zOt.forEach(t),xXr=r(rVe," (BART model)"),rVe.forEach(t),$Xr=i(Ne),jC=n(Ne,"LI",{});var tVe=s(jC);yCe=n(tVe,"STRONG",{});var WOt=s(yCe);kXr=r(WOt,"bert"),WOt.forEach(t),SXr=r(tVe," \u2014 "),Wee=n(tVe,"A",{href:!0});var QOt=s(Wee);RXr=r(QOt,"FlaxBertForCausalLM"),QOt.forEach(t),PXr=r(tVe," (BERT model)"),tVe.forEach(t),BXr=i(Ne),DC=n(Ne,"LI",{});var aVe=s(DC);xCe=n(aVe,"STRONG",{});var HOt=s(xCe);IXr=r(HOt,"big_bird"),HOt.forEach(t),NXr=r(aVe," \u2014 "),Qee=n(aVe,"A",{href:!0});var UOt=s(Qee);qXr=r(UOt,"FlaxBigBirdForCausalLM"),UOt.forEach(t),jXr=r(aVe," (BigBird model)"),aVe.forEach(t),DXr=i(Ne),GC=n(Ne,"LI",{});var nVe=s(GC);$Ce=n(nVe,"STRONG",{});var JOt=s($Ce);GXr=r(JOt,"electra"),JOt.forEach(t),OXr=r(nVe," \u2014 "),Hee=n(nVe,"A",{href:!0});var YOt=s(Hee);VXr=r(YOt,"FlaxElectraForCausalLM"),YOt.forEach(t),XXr=r(nVe," (ELECTRA model)"),nVe.forEach(t),zXr=i(Ne),OC=n(Ne,"LI",{});var sVe=s(OC);kCe=n(sVe,"STRONG",{});var KOt=s(kCe);WXr=r(KOt,"gpt2"),KOt.forEach(t),QXr=r(sVe," \u2014 "),Uee=n(sVe,"A",{href:!0});var ZOt=s(Uee);HXr=r(ZOt,"FlaxGPT2LMHeadModel"),ZOt.forEach(t),UXr=r(sVe," (OpenAI GPT-2 model)"),sVe.forEach(t),JXr=i(Ne),VC=n(Ne,"LI",{});var lVe=s(VC);SCe=n(lVe,"STRONG",{});var eVt=s(SCe);YXr=r(eVt,"gpt_neo"),eVt.forEach(t),KXr=r(lVe," \u2014 "),Jee=n(lVe,"A",{href:!0});var oVt=s(Jee);ZXr=r(oVt,"FlaxGPTNeoForCausalLM"),oVt.forEach(t),ezr=r(lVe," (GPT Neo model)"),lVe.forEach(t),ozr=i(Ne),XC=n(Ne,"LI",{});var iVe=s(XC);RCe=n(iVe,"STRONG",{});var rVt=s(RCe);rzr=r(rVt,"gptj"),rVt.forEach(t),tzr=r(iVe," \u2014 "),Yee=n(iVe,"A",{href:!0});var tVt=s(Yee);azr=r(tVt,"FlaxGPTJForCausalLM"),tVt.forEach(t),nzr=r(iVe," (GPT-J model)"),iVe.forEach(t),szr=i(Ne),zC=n(Ne,"LI",{});var dVe=s(zC);PCe=n(dVe,"STRONG",{});var aVt=s(PCe);lzr=r(aVt,"opt"),aVt.forEach(t),izr=r(dVe," \u2014 "),Kee=n(dVe,"A",{href:!0});var nVt=s(Kee);dzr=r(nVt,"FlaxOPTForCausalLM"),nVt.forEach(t),czr=r(dVe," (OPT model)"),dVe.forEach(t),fzr=i(Ne),WC=n(Ne,"LI",{});var cVe=s(WC);BCe=n(cVe,"STRONG",{});var sVt=s(BCe);mzr=r(sVt,"roberta"),sVt.forEach(t),gzr=r(cVe," \u2014 "),Zee=n(cVe,"A",{href:!0});var lVt=s(Zee);hzr=r(lVt,"FlaxRobertaForCausalLM"),lVt.forEach(t),pzr=r(cVe," (RoBERTa model)"),cVe.forEach(t),_zr=i(Ne),QC=n(Ne,"LI",{});var fVe=s(QC);ICe=n(fVe,"STRONG",{});var iVt=s(ICe);uzr=r(iVt,"xglm"),iVt.forEach(t),bzr=r(fVe," \u2014 "),eoe=n(fVe,"A",{href:!0});var dVt=s(eoe);vzr=r(dVt,"FlaxXGLMForCausalLM"),dVt.forEach(t),Fzr=r(fVe," (XGLM model)"),fVe.forEach(t),Ne.forEach(t),Tzr=i(ii),T(HC.$$.fragment,ii),ii.forEach(t),li.forEach(t),_We=i(f),rf=n(f,"H2",{class:!0});var wHe=s(rf);UC=n(wHe,"A",{id:!0,class:!0,href:!0});var cVt=s(UC);NCe=n(cVt,"SPAN",{});var fVt=s(NCe);T(w$.$$.fragment,fVt),fVt.forEach(t),cVt.forEach(t),Mzr=i(wHe),qCe=n(wHe,"SPAN",{});var mVt=s(qCe);Ezr=r(mVt,"FlaxAutoModelForPreTraining"),mVt.forEach(t),wHe.forEach(t),uWe=i(f),ur=n(f,"DIV",{class:!0});var di=s(ur);T(A$.$$.fragment,di),Czr=i(di),tf=n(di,"P",{});var Cae=s(tf);wzr=r(Cae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ooe=n(Cae,"A",{href:!0});var gVt=s(ooe);Azr=r(gVt,"from_pretrained()"),gVt.forEach(t),Lzr=r(Cae," class method or the "),roe=n(Cae,"A",{href:!0});var hVt=s(roe);yzr=r(hVt,"from_config()"),hVt.forEach(t),xzr=r(Cae,` class
method.`),Cae.forEach(t),$zr=i(di),L$=n(di,"P",{});var AHe=s(L$);kzr=r(AHe,"This class cannot be instantiated directly using "),jCe=n(AHe,"CODE",{});var pVt=s(jCe);Szr=r(pVt,"__init__()"),pVt.forEach(t),Rzr=r(AHe," (throws an error)."),AHe.forEach(t),Pzr=i(di),Ut=n(di,"DIV",{class:!0});var OA=s(Ut);T(y$.$$.fragment,OA),Bzr=i(OA),DCe=n(OA,"P",{});var _Vt=s(DCe);Izr=r(_Vt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),_Vt.forEach(t),Nzr=i(OA),af=n(OA,"P",{});var wae=s(af);qzr=r(wae,`Note:
Loading a model from its configuration file does `),GCe=n(wae,"STRONG",{});var uVt=s(GCe);jzr=r(uVt,"not"),uVt.forEach(t),Dzr=r(wae,` load the model weights. It only affects the
model\u2019s configuration. Use `),toe=n(wae,"A",{href:!0});var bVt=s(toe);Gzr=r(bVt,"from_pretrained()"),bVt.forEach(t),Ozr=r(wae," to load the model weights."),wae.forEach(t),Vzr=i(OA),T(JC.$$.fragment,OA),OA.forEach(t),Xzr=i(di),zr=n(di,"DIV",{class:!0});var ci=s(zr);T(x$.$$.fragment,ci),zzr=i(ci),OCe=n(ci,"P",{});var vVt=s(OCe);Wzr=r(vVt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),vVt.forEach(t),Qzr=i(ci),En=n(ci,"P",{});var VA=s(En);Hzr=r(VA,"The model class to instantiate is selected based on the "),VCe=n(VA,"CODE",{});var FVt=s(VCe);Uzr=r(FVt,"model_type"),FVt.forEach(t),Jzr=r(VA,` property of the config object (either
passed as an argument or loaded from `),XCe=n(VA,"CODE",{});var TVt=s(XCe);Yzr=r(TVt,"pretrained_model_name_or_path"),TVt.forEach(t),Kzr=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zCe=n(VA,"CODE",{});var MVt=s(zCe);Zzr=r(MVt,"pretrained_model_name_or_path"),MVt.forEach(t),eWr=r(VA,":"),VA.forEach(t),oWr=i(ci),Ee=n(ci,"UL",{});var we=s(Ee);YC=n(we,"LI",{});var mVe=s(YC);WCe=n(mVe,"STRONG",{});var EVt=s(WCe);rWr=r(EVt,"albert"),EVt.forEach(t),tWr=r(mVe," \u2014 "),aoe=n(mVe,"A",{href:!0});var CVt=s(aoe);aWr=r(CVt,"FlaxAlbertForPreTraining"),CVt.forEach(t),nWr=r(mVe," (ALBERT model)"),mVe.forEach(t),sWr=i(we),KC=n(we,"LI",{});var gVe=s(KC);QCe=n(gVe,"STRONG",{});var wVt=s(QCe);lWr=r(wVt,"bart"),wVt.forEach(t),iWr=r(gVe," \u2014 "),noe=n(gVe,"A",{href:!0});var AVt=s(noe);dWr=r(AVt,"FlaxBartForConditionalGeneration"),AVt.forEach(t),cWr=r(gVe," (BART model)"),gVe.forEach(t),fWr=i(we),ZC=n(we,"LI",{});var hVe=s(ZC);HCe=n(hVe,"STRONG",{});var LVt=s(HCe);mWr=r(LVt,"bert"),LVt.forEach(t),gWr=r(hVe," \u2014 "),soe=n(hVe,"A",{href:!0});var yVt=s(soe);hWr=r(yVt,"FlaxBertForPreTraining"),yVt.forEach(t),pWr=r(hVe," (BERT model)"),hVe.forEach(t),_Wr=i(we),e5=n(we,"LI",{});var pVe=s(e5);UCe=n(pVe,"STRONG",{});var xVt=s(UCe);uWr=r(xVt,"big_bird"),xVt.forEach(t),bWr=r(pVe," \u2014 "),loe=n(pVe,"A",{href:!0});var $Vt=s(loe);vWr=r($Vt,"FlaxBigBirdForPreTraining"),$Vt.forEach(t),FWr=r(pVe," (BigBird model)"),pVe.forEach(t),TWr=i(we),o5=n(we,"LI",{});var _Ve=s(o5);JCe=n(_Ve,"STRONG",{});var kVt=s(JCe);MWr=r(kVt,"electra"),kVt.forEach(t),EWr=r(_Ve," \u2014 "),ioe=n(_Ve,"A",{href:!0});var SVt=s(ioe);CWr=r(SVt,"FlaxElectraForPreTraining"),SVt.forEach(t),wWr=r(_Ve," (ELECTRA model)"),_Ve.forEach(t),AWr=i(we),r5=n(we,"LI",{});var uVe=s(r5);YCe=n(uVe,"STRONG",{});var RVt=s(YCe);LWr=r(RVt,"longt5"),RVt.forEach(t),yWr=r(uVe," \u2014 "),doe=n(uVe,"A",{href:!0});var PVt=s(doe);xWr=r(PVt,"FlaxLongT5ForConditionalGeneration"),PVt.forEach(t),$Wr=r(uVe," (LongT5 model)"),uVe.forEach(t),kWr=i(we),t5=n(we,"LI",{});var bVe=s(t5);KCe=n(bVe,"STRONG",{});var BVt=s(KCe);SWr=r(BVt,"mbart"),BVt.forEach(t),RWr=r(bVe," \u2014 "),coe=n(bVe,"A",{href:!0});var IVt=s(coe);PWr=r(IVt,"FlaxMBartForConditionalGeneration"),IVt.forEach(t),BWr=r(bVe," (mBART model)"),bVe.forEach(t),IWr=i(we),a5=n(we,"LI",{});var vVe=s(a5);ZCe=n(vVe,"STRONG",{});var NVt=s(ZCe);NWr=r(NVt,"mt5"),NVt.forEach(t),qWr=r(vVe," \u2014 "),foe=n(vVe,"A",{href:!0});var qVt=s(foe);jWr=r(qVt,"FlaxMT5ForConditionalGeneration"),qVt.forEach(t),DWr=r(vVe," (MT5 model)"),vVe.forEach(t),GWr=i(we),n5=n(we,"LI",{});var FVe=s(n5);e5e=n(FVe,"STRONG",{});var jVt=s(e5e);OWr=r(jVt,"roberta"),jVt.forEach(t),VWr=r(FVe," \u2014 "),moe=n(FVe,"A",{href:!0});var DVt=s(moe);XWr=r(DVt,"FlaxRobertaForMaskedLM"),DVt.forEach(t),zWr=r(FVe," (RoBERTa model)"),FVe.forEach(t),WWr=i(we),s5=n(we,"LI",{});var TVe=s(s5);o5e=n(TVe,"STRONG",{});var GVt=s(o5e);QWr=r(GVt,"roformer"),GVt.forEach(t),HWr=r(TVe," \u2014 "),goe=n(TVe,"A",{href:!0});var OVt=s(goe);UWr=r(OVt,"FlaxRoFormerForMaskedLM"),OVt.forEach(t),JWr=r(TVe," (RoFormer model)"),TVe.forEach(t),YWr=i(we),l5=n(we,"LI",{});var MVe=s(l5);r5e=n(MVe,"STRONG",{});var VVt=s(r5e);KWr=r(VVt,"t5"),VVt.forEach(t),ZWr=r(MVe," \u2014 "),hoe=n(MVe,"A",{href:!0});var XVt=s(hoe);eQr=r(XVt,"FlaxT5ForConditionalGeneration"),XVt.forEach(t),oQr=r(MVe," (T5 model)"),MVe.forEach(t),rQr=i(we),i5=n(we,"LI",{});var EVe=s(i5);t5e=n(EVe,"STRONG",{});var zVt=s(t5e);tQr=r(zVt,"wav2vec2"),zVt.forEach(t),aQr=r(EVe," \u2014 "),poe=n(EVe,"A",{href:!0});var WVt=s(poe);nQr=r(WVt,"FlaxWav2Vec2ForPreTraining"),WVt.forEach(t),sQr=r(EVe," (Wav2Vec2 model)"),EVe.forEach(t),lQr=i(we),d5=n(we,"LI",{});var CVe=s(d5);a5e=n(CVe,"STRONG",{});var QVt=s(a5e);iQr=r(QVt,"xlm-roberta"),QVt.forEach(t),dQr=r(CVe," \u2014 "),_oe=n(CVe,"A",{href:!0});var HVt=s(_oe);cQr=r(HVt,"FlaxXLMRobertaForMaskedLM"),HVt.forEach(t),fQr=r(CVe," (XLM-RoBERTa model)"),CVe.forEach(t),we.forEach(t),mQr=i(ci),T(c5.$$.fragment,ci),ci.forEach(t),di.forEach(t),bWe=i(f),nf=n(f,"H2",{class:!0});var LHe=s(nf);f5=n(LHe,"A",{id:!0,class:!0,href:!0});var UVt=s(f5);n5e=n(UVt,"SPAN",{});var JVt=s(n5e);T($$.$$.fragment,JVt),JVt.forEach(t),UVt.forEach(t),gQr=i(LHe),s5e=n(LHe,"SPAN",{});var YVt=s(s5e);hQr=r(YVt,"FlaxAutoModelForMaskedLM"),YVt.forEach(t),LHe.forEach(t),vWe=i(f),br=n(f,"DIV",{class:!0});var fi=s(br);T(k$.$$.fragment,fi),pQr=i(fi),sf=n(fi,"P",{});var Aae=s(sf);_Qr=r(Aae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uoe=n(Aae,"A",{href:!0});var KVt=s(uoe);uQr=r(KVt,"from_pretrained()"),KVt.forEach(t),bQr=r(Aae," class method or the "),boe=n(Aae,"A",{href:!0});var ZVt=s(boe);vQr=r(ZVt,"from_config()"),ZVt.forEach(t),FQr=r(Aae,` class
method.`),Aae.forEach(t),TQr=i(fi),S$=n(fi,"P",{});var yHe=s(S$);MQr=r(yHe,"This class cannot be instantiated directly using "),l5e=n(yHe,"CODE",{});var eXt=s(l5e);EQr=r(eXt,"__init__()"),eXt.forEach(t),CQr=r(yHe," (throws an error)."),yHe.forEach(t),wQr=i(fi),Jt=n(fi,"DIV",{class:!0});var XA=s(Jt);T(R$.$$.fragment,XA),AQr=i(XA),i5e=n(XA,"P",{});var oXt=s(i5e);LQr=r(oXt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),oXt.forEach(t),yQr=i(XA),lf=n(XA,"P",{});var Lae=s(lf);xQr=r(Lae,`Note:
Loading a model from its configuration file does `),d5e=n(Lae,"STRONG",{});var rXt=s(d5e);$Qr=r(rXt,"not"),rXt.forEach(t),kQr=r(Lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),voe=n(Lae,"A",{href:!0});var tXt=s(voe);SQr=r(tXt,"from_pretrained()"),tXt.forEach(t),RQr=r(Lae," to load the model weights."),Lae.forEach(t),PQr=i(XA),T(m5.$$.fragment,XA),XA.forEach(t),BQr=i(fi),Wr=n(fi,"DIV",{class:!0});var mi=s(Wr);T(P$.$$.fragment,mi),IQr=i(mi),c5e=n(mi,"P",{});var aXt=s(c5e);NQr=r(aXt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),aXt.forEach(t),qQr=i(mi),Cn=n(mi,"P",{});var zA=s(Cn);jQr=r(zA,"The model class to instantiate is selected based on the "),f5e=n(zA,"CODE",{});var nXt=s(f5e);DQr=r(nXt,"model_type"),nXt.forEach(t),GQr=r(zA,` property of the config object (either
passed as an argument or loaded from `),m5e=n(zA,"CODE",{});var sXt=s(m5e);OQr=r(sXt,"pretrained_model_name_or_path"),sXt.forEach(t),VQr=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g5e=n(zA,"CODE",{});var lXt=s(g5e);XQr=r(lXt,"pretrained_model_name_or_path"),lXt.forEach(t),zQr=r(zA,":"),zA.forEach(t),WQr=i(mi),$e=n(mi,"UL",{});var qe=s($e);g5=n(qe,"LI",{});var wVe=s(g5);h5e=n(wVe,"STRONG",{});var iXt=s(h5e);QQr=r(iXt,"albert"),iXt.forEach(t),HQr=r(wVe," \u2014 "),Foe=n(wVe,"A",{href:!0});var dXt=s(Foe);UQr=r(dXt,"FlaxAlbertForMaskedLM"),dXt.forEach(t),JQr=r(wVe," (ALBERT model)"),wVe.forEach(t),YQr=i(qe),h5=n(qe,"LI",{});var AVe=s(h5);p5e=n(AVe,"STRONG",{});var cXt=s(p5e);KQr=r(cXt,"bart"),cXt.forEach(t),ZQr=r(AVe," \u2014 "),Toe=n(AVe,"A",{href:!0});var fXt=s(Toe);eHr=r(fXt,"FlaxBartForConditionalGeneration"),fXt.forEach(t),oHr=r(AVe," (BART model)"),AVe.forEach(t),rHr=i(qe),p5=n(qe,"LI",{});var LVe=s(p5);_5e=n(LVe,"STRONG",{});var mXt=s(_5e);tHr=r(mXt,"bert"),mXt.forEach(t),aHr=r(LVe," \u2014 "),Moe=n(LVe,"A",{href:!0});var gXt=s(Moe);nHr=r(gXt,"FlaxBertForMaskedLM"),gXt.forEach(t),sHr=r(LVe," (BERT model)"),LVe.forEach(t),lHr=i(qe),_5=n(qe,"LI",{});var yVe=s(_5);u5e=n(yVe,"STRONG",{});var hXt=s(u5e);iHr=r(hXt,"big_bird"),hXt.forEach(t),dHr=r(yVe," \u2014 "),Eoe=n(yVe,"A",{href:!0});var pXt=s(Eoe);cHr=r(pXt,"FlaxBigBirdForMaskedLM"),pXt.forEach(t),fHr=r(yVe," (BigBird model)"),yVe.forEach(t),mHr=i(qe),u5=n(qe,"LI",{});var xVe=s(u5);b5e=n(xVe,"STRONG",{});var _Xt=s(b5e);gHr=r(_Xt,"distilbert"),_Xt.forEach(t),hHr=r(xVe," \u2014 "),Coe=n(xVe,"A",{href:!0});var uXt=s(Coe);pHr=r(uXt,"FlaxDistilBertForMaskedLM"),uXt.forEach(t),_Hr=r(xVe," (DistilBERT model)"),xVe.forEach(t),uHr=i(qe),b5=n(qe,"LI",{});var $Ve=s(b5);v5e=n($Ve,"STRONG",{});var bXt=s(v5e);bHr=r(bXt,"electra"),bXt.forEach(t),vHr=r($Ve," \u2014 "),woe=n($Ve,"A",{href:!0});var vXt=s(woe);FHr=r(vXt,"FlaxElectraForMaskedLM"),vXt.forEach(t),THr=r($Ve," (ELECTRA model)"),$Ve.forEach(t),MHr=i(qe),v5=n(qe,"LI",{});var kVe=s(v5);F5e=n(kVe,"STRONG",{});var FXt=s(F5e);EHr=r(FXt,"mbart"),FXt.forEach(t),CHr=r(kVe," \u2014 "),Aoe=n(kVe,"A",{href:!0});var TXt=s(Aoe);wHr=r(TXt,"FlaxMBartForConditionalGeneration"),TXt.forEach(t),AHr=r(kVe," (mBART model)"),kVe.forEach(t),LHr=i(qe),F5=n(qe,"LI",{});var SVe=s(F5);T5e=n(SVe,"STRONG",{});var MXt=s(T5e);yHr=r(MXt,"roberta"),MXt.forEach(t),xHr=r(SVe," \u2014 "),Loe=n(SVe,"A",{href:!0});var EXt=s(Loe);$Hr=r(EXt,"FlaxRobertaForMaskedLM"),EXt.forEach(t),kHr=r(SVe," (RoBERTa model)"),SVe.forEach(t),SHr=i(qe),T5=n(qe,"LI",{});var RVe=s(T5);M5e=n(RVe,"STRONG",{});var CXt=s(M5e);RHr=r(CXt,"roformer"),CXt.forEach(t),PHr=r(RVe," \u2014 "),yoe=n(RVe,"A",{href:!0});var wXt=s(yoe);BHr=r(wXt,"FlaxRoFormerForMaskedLM"),wXt.forEach(t),IHr=r(RVe," (RoFormer model)"),RVe.forEach(t),NHr=i(qe),M5=n(qe,"LI",{});var PVe=s(M5);E5e=n(PVe,"STRONG",{});var AXt=s(E5e);qHr=r(AXt,"xlm-roberta"),AXt.forEach(t),jHr=r(PVe," \u2014 "),xoe=n(PVe,"A",{href:!0});var LXt=s(xoe);DHr=r(LXt,"FlaxXLMRobertaForMaskedLM"),LXt.forEach(t),GHr=r(PVe," (XLM-RoBERTa model)"),PVe.forEach(t),qe.forEach(t),OHr=i(mi),T(E5.$$.fragment,mi),mi.forEach(t),fi.forEach(t),FWe=i(f),df=n(f,"H2",{class:!0});var xHe=s(df);C5=n(xHe,"A",{id:!0,class:!0,href:!0});var yXt=s(C5);C5e=n(yXt,"SPAN",{});var xXt=s(C5e);T(B$.$$.fragment,xXt),xXt.forEach(t),yXt.forEach(t),VHr=i(xHe),w5e=n(xHe,"SPAN",{});var $Xt=s(w5e);XHr=r($Xt,"FlaxAutoModelForSeq2SeqLM"),$Xt.forEach(t),xHe.forEach(t),TWe=i(f),vr=n(f,"DIV",{class:!0});var gi=s(vr);T(I$.$$.fragment,gi),zHr=i(gi),cf=n(gi,"P",{});var yae=s(cf);WHr=r(yae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$oe=n(yae,"A",{href:!0});var kXt=s($oe);QHr=r(kXt,"from_pretrained()"),kXt.forEach(t),HHr=r(yae," class method or the "),koe=n(yae,"A",{href:!0});var SXt=s(koe);UHr=r(SXt,"from_config()"),SXt.forEach(t),JHr=r(yae,` class
method.`),yae.forEach(t),YHr=i(gi),N$=n(gi,"P",{});var $He=s(N$);KHr=r($He,"This class cannot be instantiated directly using "),A5e=n($He,"CODE",{});var RXt=s(A5e);ZHr=r(RXt,"__init__()"),RXt.forEach(t),eUr=r($He," (throws an error)."),$He.forEach(t),oUr=i(gi),Yt=n(gi,"DIV",{class:!0});var WA=s(Yt);T(q$.$$.fragment,WA),rUr=i(WA),L5e=n(WA,"P",{});var PXt=s(L5e);tUr=r(PXt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),PXt.forEach(t),aUr=i(WA),ff=n(WA,"P",{});var xae=s(ff);nUr=r(xae,`Note:
Loading a model from its configuration file does `),y5e=n(xae,"STRONG",{});var BXt=s(y5e);sUr=r(BXt,"not"),BXt.forEach(t),lUr=r(xae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Soe=n(xae,"A",{href:!0});var IXt=s(Soe);iUr=r(IXt,"from_pretrained()"),IXt.forEach(t),dUr=r(xae," to load the model weights."),xae.forEach(t),cUr=i(WA),T(w5.$$.fragment,WA),WA.forEach(t),fUr=i(gi),Qr=n(gi,"DIV",{class:!0});var hi=s(Qr);T(j$.$$.fragment,hi),mUr=i(hi),x5e=n(hi,"P",{});var NXt=s(x5e);gUr=r(NXt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),NXt.forEach(t),hUr=i(hi),wn=n(hi,"P",{});var QA=s(wn);pUr=r(QA,"The model class to instantiate is selected based on the "),$5e=n(QA,"CODE",{});var qXt=s($5e);_Ur=r(qXt,"model_type"),qXt.forEach(t),uUr=r(QA,` property of the config object (either
passed as an argument or loaded from `),k5e=n(QA,"CODE",{});var jXt=s(k5e);bUr=r(jXt,"pretrained_model_name_or_path"),jXt.forEach(t),vUr=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S5e=n(QA,"CODE",{});var DXt=s(S5e);FUr=r(DXt,"pretrained_model_name_or_path"),DXt.forEach(t),TUr=r(QA,":"),QA.forEach(t),MUr=i(hi),ke=n(hi,"UL",{});var je=s(ke);A5=n(je,"LI",{});var BVe=s(A5);R5e=n(BVe,"STRONG",{});var GXt=s(R5e);EUr=r(GXt,"bart"),GXt.forEach(t),CUr=r(BVe," \u2014 "),Roe=n(BVe,"A",{href:!0});var OXt=s(Roe);wUr=r(OXt,"FlaxBartForConditionalGeneration"),OXt.forEach(t),AUr=r(BVe," (BART model)"),BVe.forEach(t),LUr=i(je),L5=n(je,"LI",{});var IVe=s(L5);P5e=n(IVe,"STRONG",{});var VXt=s(P5e);yUr=r(VXt,"blenderbot"),VXt.forEach(t),xUr=r(IVe," \u2014 "),Poe=n(IVe,"A",{href:!0});var XXt=s(Poe);$Ur=r(XXt,"FlaxBlenderbotForConditionalGeneration"),XXt.forEach(t),kUr=r(IVe," (Blenderbot model)"),IVe.forEach(t),SUr=i(je),y5=n(je,"LI",{});var NVe=s(y5);B5e=n(NVe,"STRONG",{});var zXt=s(B5e);RUr=r(zXt,"blenderbot-small"),zXt.forEach(t),PUr=r(NVe," \u2014 "),Boe=n(NVe,"A",{href:!0});var WXt=s(Boe);BUr=r(WXt,"FlaxBlenderbotSmallForConditionalGeneration"),WXt.forEach(t),IUr=r(NVe," (BlenderbotSmall model)"),NVe.forEach(t),NUr=i(je),x5=n(je,"LI",{});var qVe=s(x5);I5e=n(qVe,"STRONG",{});var QXt=s(I5e);qUr=r(QXt,"encoder-decoder"),QXt.forEach(t),jUr=r(qVe," \u2014 "),Ioe=n(qVe,"A",{href:!0});var HXt=s(Ioe);DUr=r(HXt,"FlaxEncoderDecoderModel"),HXt.forEach(t),GUr=r(qVe," (Encoder decoder model)"),qVe.forEach(t),OUr=i(je),$5=n(je,"LI",{});var jVe=s($5);N5e=n(jVe,"STRONG",{});var UXt=s(N5e);VUr=r(UXt,"longt5"),UXt.forEach(t),XUr=r(jVe," \u2014 "),Noe=n(jVe,"A",{href:!0});var JXt=s(Noe);zUr=r(JXt,"FlaxLongT5ForConditionalGeneration"),JXt.forEach(t),WUr=r(jVe," (LongT5 model)"),jVe.forEach(t),QUr=i(je),k5=n(je,"LI",{});var DVe=s(k5);q5e=n(DVe,"STRONG",{});var YXt=s(q5e);HUr=r(YXt,"marian"),YXt.forEach(t),UUr=r(DVe," \u2014 "),qoe=n(DVe,"A",{href:!0});var KXt=s(qoe);JUr=r(KXt,"FlaxMarianMTModel"),KXt.forEach(t),YUr=r(DVe," (Marian model)"),DVe.forEach(t),KUr=i(je),S5=n(je,"LI",{});var GVe=s(S5);j5e=n(GVe,"STRONG",{});var ZXt=s(j5e);ZUr=r(ZXt,"mbart"),ZXt.forEach(t),eJr=r(GVe," \u2014 "),joe=n(GVe,"A",{href:!0});var ezt=s(joe);oJr=r(ezt,"FlaxMBartForConditionalGeneration"),ezt.forEach(t),rJr=r(GVe," (mBART model)"),GVe.forEach(t),tJr=i(je),R5=n(je,"LI",{});var OVe=s(R5);D5e=n(OVe,"STRONG",{});var ozt=s(D5e);aJr=r(ozt,"mt5"),ozt.forEach(t),nJr=r(OVe," \u2014 "),Doe=n(OVe,"A",{href:!0});var rzt=s(Doe);sJr=r(rzt,"FlaxMT5ForConditionalGeneration"),rzt.forEach(t),lJr=r(OVe," (MT5 model)"),OVe.forEach(t),iJr=i(je),P5=n(je,"LI",{});var VVe=s(P5);G5e=n(VVe,"STRONG",{});var tzt=s(G5e);dJr=r(tzt,"pegasus"),tzt.forEach(t),cJr=r(VVe," \u2014 "),Goe=n(VVe,"A",{href:!0});var azt=s(Goe);fJr=r(azt,"FlaxPegasusForConditionalGeneration"),azt.forEach(t),mJr=r(VVe," (Pegasus model)"),VVe.forEach(t),gJr=i(je),B5=n(je,"LI",{});var XVe=s(B5);O5e=n(XVe,"STRONG",{});var nzt=s(O5e);hJr=r(nzt,"t5"),nzt.forEach(t),pJr=r(XVe," \u2014 "),Ooe=n(XVe,"A",{href:!0});var szt=s(Ooe);_Jr=r(szt,"FlaxT5ForConditionalGeneration"),szt.forEach(t),uJr=r(XVe," (T5 model)"),XVe.forEach(t),je.forEach(t),bJr=i(hi),T(I5.$$.fragment,hi),hi.forEach(t),gi.forEach(t),MWe=i(f),mf=n(f,"H2",{class:!0});var kHe=s(mf);N5=n(kHe,"A",{id:!0,class:!0,href:!0});var lzt=s(N5);V5e=n(lzt,"SPAN",{});var izt=s(V5e);T(D$.$$.fragment,izt),izt.forEach(t),lzt.forEach(t),vJr=i(kHe),X5e=n(kHe,"SPAN",{});var dzt=s(X5e);FJr=r(dzt,"FlaxAutoModelForSequenceClassification"),dzt.forEach(t),kHe.forEach(t),EWe=i(f),Fr=n(f,"DIV",{class:!0});var pi=s(Fr);T(G$.$$.fragment,pi),TJr=i(pi),gf=n(pi,"P",{});var $ae=s(gf);MJr=r($ae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Voe=n($ae,"A",{href:!0});var czt=s(Voe);EJr=r(czt,"from_pretrained()"),czt.forEach(t),CJr=r($ae," class method or the "),Xoe=n($ae,"A",{href:!0});var fzt=s(Xoe);wJr=r(fzt,"from_config()"),fzt.forEach(t),AJr=r($ae,` class
method.`),$ae.forEach(t),LJr=i(pi),O$=n(pi,"P",{});var SHe=s(O$);yJr=r(SHe,"This class cannot be instantiated directly using "),z5e=n(SHe,"CODE",{});var mzt=s(z5e);xJr=r(mzt,"__init__()"),mzt.forEach(t),$Jr=r(SHe," (throws an error)."),SHe.forEach(t),kJr=i(pi),Kt=n(pi,"DIV",{class:!0});var HA=s(Kt);T(V$.$$.fragment,HA),SJr=i(HA),W5e=n(HA,"P",{});var gzt=s(W5e);RJr=r(gzt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),gzt.forEach(t),PJr=i(HA),hf=n(HA,"P",{});var kae=s(hf);BJr=r(kae,`Note:
Loading a model from its configuration file does `),Q5e=n(kae,"STRONG",{});var hzt=s(Q5e);IJr=r(hzt,"not"),hzt.forEach(t),NJr=r(kae,` load the model weights. It only affects the
model\u2019s configuration. Use `),zoe=n(kae,"A",{href:!0});var pzt=s(zoe);qJr=r(pzt,"from_pretrained()"),pzt.forEach(t),jJr=r(kae," to load the model weights."),kae.forEach(t),DJr=i(HA),T(q5.$$.fragment,HA),HA.forEach(t),GJr=i(pi),Hr=n(pi,"DIV",{class:!0});var _i=s(Hr);T(X$.$$.fragment,_i),OJr=i(_i),H5e=n(_i,"P",{});var _zt=s(H5e);VJr=r(_zt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),_zt.forEach(t),XJr=i(_i),An=n(_i,"P",{});var UA=s(An);zJr=r(UA,"The model class to instantiate is selected based on the "),U5e=n(UA,"CODE",{});var uzt=s(U5e);WJr=r(uzt,"model_type"),uzt.forEach(t),QJr=r(UA,` property of the config object (either
passed as an argument or loaded from `),J5e=n(UA,"CODE",{});var bzt=s(J5e);HJr=r(bzt,"pretrained_model_name_or_path"),bzt.forEach(t),UJr=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y5e=n(UA,"CODE",{});var vzt=s(Y5e);JJr=r(vzt,"pretrained_model_name_or_path"),vzt.forEach(t),YJr=r(UA,":"),UA.forEach(t),KJr=i(_i),Se=n(_i,"UL",{});var De=s(Se);j5=n(De,"LI",{});var zVe=s(j5);K5e=n(zVe,"STRONG",{});var Fzt=s(K5e);ZJr=r(Fzt,"albert"),Fzt.forEach(t),eYr=r(zVe," \u2014 "),Woe=n(zVe,"A",{href:!0});var Tzt=s(Woe);oYr=r(Tzt,"FlaxAlbertForSequenceClassification"),Tzt.forEach(t),rYr=r(zVe," (ALBERT model)"),zVe.forEach(t),tYr=i(De),D5=n(De,"LI",{});var WVe=s(D5);Z5e=n(WVe,"STRONG",{});var Mzt=s(Z5e);aYr=r(Mzt,"bart"),Mzt.forEach(t),nYr=r(WVe," \u2014 "),Qoe=n(WVe,"A",{href:!0});var Ezt=s(Qoe);sYr=r(Ezt,"FlaxBartForSequenceClassification"),Ezt.forEach(t),lYr=r(WVe," (BART model)"),WVe.forEach(t),iYr=i(De),G5=n(De,"LI",{});var QVe=s(G5);e0e=n(QVe,"STRONG",{});var Czt=s(e0e);dYr=r(Czt,"bert"),Czt.forEach(t),cYr=r(QVe," \u2014 "),Hoe=n(QVe,"A",{href:!0});var wzt=s(Hoe);fYr=r(wzt,"FlaxBertForSequenceClassification"),wzt.forEach(t),mYr=r(QVe," (BERT model)"),QVe.forEach(t),gYr=i(De),O5=n(De,"LI",{});var HVe=s(O5);o0e=n(HVe,"STRONG",{});var Azt=s(o0e);hYr=r(Azt,"big_bird"),Azt.forEach(t),pYr=r(HVe," \u2014 "),Uoe=n(HVe,"A",{href:!0});var Lzt=s(Uoe);_Yr=r(Lzt,"FlaxBigBirdForSequenceClassification"),Lzt.forEach(t),uYr=r(HVe," (BigBird model)"),HVe.forEach(t),bYr=i(De),V5=n(De,"LI",{});var UVe=s(V5);r0e=n(UVe,"STRONG",{});var yzt=s(r0e);vYr=r(yzt,"distilbert"),yzt.forEach(t),FYr=r(UVe," \u2014 "),Joe=n(UVe,"A",{href:!0});var xzt=s(Joe);TYr=r(xzt,"FlaxDistilBertForSequenceClassification"),xzt.forEach(t),MYr=r(UVe," (DistilBERT model)"),UVe.forEach(t),EYr=i(De),X5=n(De,"LI",{});var JVe=s(X5);t0e=n(JVe,"STRONG",{});var $zt=s(t0e);CYr=r($zt,"electra"),$zt.forEach(t),wYr=r(JVe," \u2014 "),Yoe=n(JVe,"A",{href:!0});var kzt=s(Yoe);AYr=r(kzt,"FlaxElectraForSequenceClassification"),kzt.forEach(t),LYr=r(JVe," (ELECTRA model)"),JVe.forEach(t),yYr=i(De),z5=n(De,"LI",{});var YVe=s(z5);a0e=n(YVe,"STRONG",{});var Szt=s(a0e);xYr=r(Szt,"mbart"),Szt.forEach(t),$Yr=r(YVe," \u2014 "),Koe=n(YVe,"A",{href:!0});var Rzt=s(Koe);kYr=r(Rzt,"FlaxMBartForSequenceClassification"),Rzt.forEach(t),SYr=r(YVe," (mBART model)"),YVe.forEach(t),RYr=i(De),W5=n(De,"LI",{});var KVe=s(W5);n0e=n(KVe,"STRONG",{});var Pzt=s(n0e);PYr=r(Pzt,"roberta"),Pzt.forEach(t),BYr=r(KVe," \u2014 "),Zoe=n(KVe,"A",{href:!0});var Bzt=s(Zoe);IYr=r(Bzt,"FlaxRobertaForSequenceClassification"),Bzt.forEach(t),NYr=r(KVe," (RoBERTa model)"),KVe.forEach(t),qYr=i(De),Q5=n(De,"LI",{});var ZVe=s(Q5);s0e=n(ZVe,"STRONG",{});var Izt=s(s0e);jYr=r(Izt,"roformer"),Izt.forEach(t),DYr=r(ZVe," \u2014 "),ere=n(ZVe,"A",{href:!0});var Nzt=s(ere);GYr=r(Nzt,"FlaxRoFormerForSequenceClassification"),Nzt.forEach(t),OYr=r(ZVe," (RoFormer model)"),ZVe.forEach(t),VYr=i(De),H5=n(De,"LI",{});var eXe=s(H5);l0e=n(eXe,"STRONG",{});var qzt=s(l0e);XYr=r(qzt,"xlm-roberta"),qzt.forEach(t),zYr=r(eXe," \u2014 "),ore=n(eXe,"A",{href:!0});var jzt=s(ore);WYr=r(jzt,"FlaxXLMRobertaForSequenceClassification"),jzt.forEach(t),QYr=r(eXe," (XLM-RoBERTa model)"),eXe.forEach(t),De.forEach(t),HYr=i(_i),T(U5.$$.fragment,_i),_i.forEach(t),pi.forEach(t),CWe=i(f),pf=n(f,"H2",{class:!0});var RHe=s(pf);J5=n(RHe,"A",{id:!0,class:!0,href:!0});var Dzt=s(J5);i0e=n(Dzt,"SPAN",{});var Gzt=s(i0e);T(z$.$$.fragment,Gzt),Gzt.forEach(t),Dzt.forEach(t),UYr=i(RHe),d0e=n(RHe,"SPAN",{});var Ozt=s(d0e);JYr=r(Ozt,"FlaxAutoModelForQuestionAnswering"),Ozt.forEach(t),RHe.forEach(t),wWe=i(f),Tr=n(f,"DIV",{class:!0});var ui=s(Tr);T(W$.$$.fragment,ui),YYr=i(ui),_f=n(ui,"P",{});var Sae=s(_f);KYr=r(Sae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),rre=n(Sae,"A",{href:!0});var Vzt=s(rre);ZYr=r(Vzt,"from_pretrained()"),Vzt.forEach(t),eKr=r(Sae," class method or the "),tre=n(Sae,"A",{href:!0});var Xzt=s(tre);oKr=r(Xzt,"from_config()"),Xzt.forEach(t),rKr=r(Sae,` class
method.`),Sae.forEach(t),tKr=i(ui),Q$=n(ui,"P",{});var PHe=s(Q$);aKr=r(PHe,"This class cannot be instantiated directly using "),c0e=n(PHe,"CODE",{});var zzt=s(c0e);nKr=r(zzt,"__init__()"),zzt.forEach(t),sKr=r(PHe," (throws an error)."),PHe.forEach(t),lKr=i(ui),Zt=n(ui,"DIV",{class:!0});var JA=s(Zt);T(H$.$$.fragment,JA),iKr=i(JA),f0e=n(JA,"P",{});var Wzt=s(f0e);dKr=r(Wzt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Wzt.forEach(t),cKr=i(JA),uf=n(JA,"P",{});var Rae=s(uf);fKr=r(Rae,`Note:
Loading a model from its configuration file does `),m0e=n(Rae,"STRONG",{});var Qzt=s(m0e);mKr=r(Qzt,"not"),Qzt.forEach(t),gKr=r(Rae,` load the model weights. It only affects the
model\u2019s configuration. Use `),are=n(Rae,"A",{href:!0});var Hzt=s(are);hKr=r(Hzt,"from_pretrained()"),Hzt.forEach(t),pKr=r(Rae," to load the model weights."),Rae.forEach(t),_Kr=i(JA),T(Y5.$$.fragment,JA),JA.forEach(t),uKr=i(ui),Ur=n(ui,"DIV",{class:!0});var bi=s(Ur);T(U$.$$.fragment,bi),bKr=i(bi),g0e=n(bi,"P",{});var Uzt=s(g0e);vKr=r(Uzt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Uzt.forEach(t),FKr=i(bi),Ln=n(bi,"P",{});var YA=s(Ln);TKr=r(YA,"The model class to instantiate is selected based on the "),h0e=n(YA,"CODE",{});var Jzt=s(h0e);MKr=r(Jzt,"model_type"),Jzt.forEach(t),EKr=r(YA,` property of the config object (either
passed as an argument or loaded from `),p0e=n(YA,"CODE",{});var Yzt=s(p0e);CKr=r(Yzt,"pretrained_model_name_or_path"),Yzt.forEach(t),wKr=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_0e=n(YA,"CODE",{});var Kzt=s(_0e);AKr=r(Kzt,"pretrained_model_name_or_path"),Kzt.forEach(t),LKr=r(YA,":"),YA.forEach(t),yKr=i(bi),Re=n(bi,"UL",{});var Ge=s(Re);K5=n(Ge,"LI",{});var oXe=s(K5);u0e=n(oXe,"STRONG",{});var Zzt=s(u0e);xKr=r(Zzt,"albert"),Zzt.forEach(t),$Kr=r(oXe," \u2014 "),nre=n(oXe,"A",{href:!0});var eWt=s(nre);kKr=r(eWt,"FlaxAlbertForQuestionAnswering"),eWt.forEach(t),SKr=r(oXe," (ALBERT model)"),oXe.forEach(t),RKr=i(Ge),Z5=n(Ge,"LI",{});var rXe=s(Z5);b0e=n(rXe,"STRONG",{});var oWt=s(b0e);PKr=r(oWt,"bart"),oWt.forEach(t),BKr=r(rXe," \u2014 "),sre=n(rXe,"A",{href:!0});var rWt=s(sre);IKr=r(rWt,"FlaxBartForQuestionAnswering"),rWt.forEach(t),NKr=r(rXe," (BART model)"),rXe.forEach(t),qKr=i(Ge),e0=n(Ge,"LI",{});var tXe=s(e0);v0e=n(tXe,"STRONG",{});var tWt=s(v0e);jKr=r(tWt,"bert"),tWt.forEach(t),DKr=r(tXe," \u2014 "),lre=n(tXe,"A",{href:!0});var aWt=s(lre);GKr=r(aWt,"FlaxBertForQuestionAnswering"),aWt.forEach(t),OKr=r(tXe," (BERT model)"),tXe.forEach(t),VKr=i(Ge),o0=n(Ge,"LI",{});var aXe=s(o0);F0e=n(aXe,"STRONG",{});var nWt=s(F0e);XKr=r(nWt,"big_bird"),nWt.forEach(t),zKr=r(aXe," \u2014 "),ire=n(aXe,"A",{href:!0});var sWt=s(ire);WKr=r(sWt,"FlaxBigBirdForQuestionAnswering"),sWt.forEach(t),QKr=r(aXe," (BigBird model)"),aXe.forEach(t),HKr=i(Ge),r0=n(Ge,"LI",{});var nXe=s(r0);T0e=n(nXe,"STRONG",{});var lWt=s(T0e);UKr=r(lWt,"distilbert"),lWt.forEach(t),JKr=r(nXe," \u2014 "),dre=n(nXe,"A",{href:!0});var iWt=s(dre);YKr=r(iWt,"FlaxDistilBertForQuestionAnswering"),iWt.forEach(t),KKr=r(nXe," (DistilBERT model)"),nXe.forEach(t),ZKr=i(Ge),t0=n(Ge,"LI",{});var sXe=s(t0);M0e=n(sXe,"STRONG",{});var dWt=s(M0e);eZr=r(dWt,"electra"),dWt.forEach(t),oZr=r(sXe," \u2014 "),cre=n(sXe,"A",{href:!0});var cWt=s(cre);rZr=r(cWt,"FlaxElectraForQuestionAnswering"),cWt.forEach(t),tZr=r(sXe," (ELECTRA model)"),sXe.forEach(t),aZr=i(Ge),a0=n(Ge,"LI",{});var lXe=s(a0);E0e=n(lXe,"STRONG",{});var fWt=s(E0e);nZr=r(fWt,"mbart"),fWt.forEach(t),sZr=r(lXe," \u2014 "),fre=n(lXe,"A",{href:!0});var mWt=s(fre);lZr=r(mWt,"FlaxMBartForQuestionAnswering"),mWt.forEach(t),iZr=r(lXe," (mBART model)"),lXe.forEach(t),dZr=i(Ge),n0=n(Ge,"LI",{});var iXe=s(n0);C0e=n(iXe,"STRONG",{});var gWt=s(C0e);cZr=r(gWt,"roberta"),gWt.forEach(t),fZr=r(iXe," \u2014 "),mre=n(iXe,"A",{href:!0});var hWt=s(mre);mZr=r(hWt,"FlaxRobertaForQuestionAnswering"),hWt.forEach(t),gZr=r(iXe," (RoBERTa model)"),iXe.forEach(t),hZr=i(Ge),s0=n(Ge,"LI",{});var dXe=s(s0);w0e=n(dXe,"STRONG",{});var pWt=s(w0e);pZr=r(pWt,"roformer"),pWt.forEach(t),_Zr=r(dXe," \u2014 "),gre=n(dXe,"A",{href:!0});var _Wt=s(gre);uZr=r(_Wt,"FlaxRoFormerForQuestionAnswering"),_Wt.forEach(t),bZr=r(dXe," (RoFormer model)"),dXe.forEach(t),vZr=i(Ge),l0=n(Ge,"LI",{});var cXe=s(l0);A0e=n(cXe,"STRONG",{});var uWt=s(A0e);FZr=r(uWt,"xlm-roberta"),uWt.forEach(t),TZr=r(cXe," \u2014 "),hre=n(cXe,"A",{href:!0});var bWt=s(hre);MZr=r(bWt,"FlaxXLMRobertaForQuestionAnswering"),bWt.forEach(t),EZr=r(cXe," (XLM-RoBERTa model)"),cXe.forEach(t),Ge.forEach(t),CZr=i(bi),T(i0.$$.fragment,bi),bi.forEach(t),ui.forEach(t),AWe=i(f),bf=n(f,"H2",{class:!0});var BHe=s(bf);d0=n(BHe,"A",{id:!0,class:!0,href:!0});var vWt=s(d0);L0e=n(vWt,"SPAN",{});var FWt=s(L0e);T(J$.$$.fragment,FWt),FWt.forEach(t),vWt.forEach(t),wZr=i(BHe),y0e=n(BHe,"SPAN",{});var TWt=s(y0e);AZr=r(TWt,"FlaxAutoModelForTokenClassification"),TWt.forEach(t),BHe.forEach(t),LWe=i(f),Mr=n(f,"DIV",{class:!0});var vi=s(Mr);T(Y$.$$.fragment,vi),LZr=i(vi),vf=n(vi,"P",{});var Pae=s(vf);yZr=r(Pae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),pre=n(Pae,"A",{href:!0});var MWt=s(pre);xZr=r(MWt,"from_pretrained()"),MWt.forEach(t),$Zr=r(Pae," class method or the "),_re=n(Pae,"A",{href:!0});var EWt=s(_re);kZr=r(EWt,"from_config()"),EWt.forEach(t),SZr=r(Pae,` class
method.`),Pae.forEach(t),RZr=i(vi),K$=n(vi,"P",{});var IHe=s(K$);PZr=r(IHe,"This class cannot be instantiated directly using "),x0e=n(IHe,"CODE",{});var CWt=s(x0e);BZr=r(CWt,"__init__()"),CWt.forEach(t),IZr=r(IHe," (throws an error)."),IHe.forEach(t),NZr=i(vi),ea=n(vi,"DIV",{class:!0});var KA=s(ea);T(Z$.$$.fragment,KA),qZr=i(KA),$0e=n(KA,"P",{});var wWt=s($0e);jZr=r(wWt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),wWt.forEach(t),DZr=i(KA),Ff=n(KA,"P",{});var Bae=s(Ff);GZr=r(Bae,`Note:
Loading a model from its configuration file does `),k0e=n(Bae,"STRONG",{});var AWt=s(k0e);OZr=r(AWt,"not"),AWt.forEach(t),VZr=r(Bae,` load the model weights. It only affects the
model\u2019s configuration. Use `),ure=n(Bae,"A",{href:!0});var LWt=s(ure);XZr=r(LWt,"from_pretrained()"),LWt.forEach(t),zZr=r(Bae," to load the model weights."),Bae.forEach(t),WZr=i(KA),T(c0.$$.fragment,KA),KA.forEach(t),QZr=i(vi),Jr=n(vi,"DIV",{class:!0});var Fi=s(Jr);T(ek.$$.fragment,Fi),HZr=i(Fi),S0e=n(Fi,"P",{});var yWt=s(S0e);UZr=r(yWt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),yWt.forEach(t),JZr=i(Fi),yn=n(Fi,"P",{});var ZA=s(yn);YZr=r(ZA,"The model class to instantiate is selected based on the "),R0e=n(ZA,"CODE",{});var xWt=s(R0e);KZr=r(xWt,"model_type"),xWt.forEach(t),ZZr=r(ZA,` property of the config object (either
passed as an argument or loaded from `),P0e=n(ZA,"CODE",{});var $Wt=s(P0e);eet=r($Wt,"pretrained_model_name_or_path"),$Wt.forEach(t),oet=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B0e=n(ZA,"CODE",{});var kWt=s(B0e);ret=r(kWt,"pretrained_model_name_or_path"),kWt.forEach(t),tet=r(ZA,":"),ZA.forEach(t),aet=i(Fi),Ve=n(Fi,"UL",{});var Mo=s(Ve);f0=n(Mo,"LI",{});var fXe=s(f0);I0e=n(fXe,"STRONG",{});var SWt=s(I0e);net=r(SWt,"albert"),SWt.forEach(t),set=r(fXe," \u2014 "),bre=n(fXe,"A",{href:!0});var RWt=s(bre);iet=r(RWt,"FlaxAlbertForTokenClassification"),RWt.forEach(t),det=r(fXe," (ALBERT model)"),fXe.forEach(t),cet=i(Mo),m0=n(Mo,"LI",{});var mXe=s(m0);N0e=n(mXe,"STRONG",{});var PWt=s(N0e);fet=r(PWt,"bert"),PWt.forEach(t),met=r(mXe," \u2014 "),vre=n(mXe,"A",{href:!0});var BWt=s(vre);get=r(BWt,"FlaxBertForTokenClassification"),BWt.forEach(t),het=r(mXe," (BERT model)"),mXe.forEach(t),pet=i(Mo),g0=n(Mo,"LI",{});var gXe=s(g0);q0e=n(gXe,"STRONG",{});var IWt=s(q0e);_et=r(IWt,"big_bird"),IWt.forEach(t),uet=r(gXe," \u2014 "),Fre=n(gXe,"A",{href:!0});var NWt=s(Fre);bet=r(NWt,"FlaxBigBirdForTokenClassification"),NWt.forEach(t),vet=r(gXe," (BigBird model)"),gXe.forEach(t),Fet=i(Mo),h0=n(Mo,"LI",{});var hXe=s(h0);j0e=n(hXe,"STRONG",{});var qWt=s(j0e);Tet=r(qWt,"distilbert"),qWt.forEach(t),Met=r(hXe," \u2014 "),Tre=n(hXe,"A",{href:!0});var jWt=s(Tre);Eet=r(jWt,"FlaxDistilBertForTokenClassification"),jWt.forEach(t),Cet=r(hXe," (DistilBERT model)"),hXe.forEach(t),wet=i(Mo),p0=n(Mo,"LI",{});var pXe=s(p0);D0e=n(pXe,"STRONG",{});var DWt=s(D0e);Aet=r(DWt,"electra"),DWt.forEach(t),Let=r(pXe," \u2014 "),Mre=n(pXe,"A",{href:!0});var GWt=s(Mre);yet=r(GWt,"FlaxElectraForTokenClassification"),GWt.forEach(t),xet=r(pXe," (ELECTRA model)"),pXe.forEach(t),$et=i(Mo),_0=n(Mo,"LI",{});var _Xe=s(_0);G0e=n(_Xe,"STRONG",{});var OWt=s(G0e);ket=r(OWt,"roberta"),OWt.forEach(t),Set=r(_Xe," \u2014 "),Ere=n(_Xe,"A",{href:!0});var VWt=s(Ere);Ret=r(VWt,"FlaxRobertaForTokenClassification"),VWt.forEach(t),Pet=r(_Xe," (RoBERTa model)"),_Xe.forEach(t),Bet=i(Mo),u0=n(Mo,"LI",{});var uXe=s(u0);O0e=n(uXe,"STRONG",{});var XWt=s(O0e);Iet=r(XWt,"roformer"),XWt.forEach(t),Net=r(uXe," \u2014 "),Cre=n(uXe,"A",{href:!0});var zWt=s(Cre);qet=r(zWt,"FlaxRoFormerForTokenClassification"),zWt.forEach(t),jet=r(uXe," (RoFormer model)"),uXe.forEach(t),Det=i(Mo),b0=n(Mo,"LI",{});var bXe=s(b0);V0e=n(bXe,"STRONG",{});var WWt=s(V0e);Get=r(WWt,"xlm-roberta"),WWt.forEach(t),Oet=r(bXe," \u2014 "),wre=n(bXe,"A",{href:!0});var QWt=s(wre);Vet=r(QWt,"FlaxXLMRobertaForTokenClassification"),QWt.forEach(t),Xet=r(bXe," (XLM-RoBERTa model)"),bXe.forEach(t),Mo.forEach(t),zet=i(Fi),T(v0.$$.fragment,Fi),Fi.forEach(t),vi.forEach(t),yWe=i(f),Tf=n(f,"H2",{class:!0});var NHe=s(Tf);F0=n(NHe,"A",{id:!0,class:!0,href:!0});var HWt=s(F0);X0e=n(HWt,"SPAN",{});var UWt=s(X0e);T(ok.$$.fragment,UWt),UWt.forEach(t),HWt.forEach(t),Wet=i(NHe),z0e=n(NHe,"SPAN",{});var JWt=s(z0e);Qet=r(JWt,"FlaxAutoModelForMultipleChoice"),JWt.forEach(t),NHe.forEach(t),xWe=i(f),Er=n(f,"DIV",{class:!0});var Ti=s(Er);T(rk.$$.fragment,Ti),Het=i(Ti),Mf=n(Ti,"P",{});var Iae=s(Mf);Uet=r(Iae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Are=n(Iae,"A",{href:!0});var YWt=s(Are);Jet=r(YWt,"from_pretrained()"),YWt.forEach(t),Yet=r(Iae," class method or the "),Lre=n(Iae,"A",{href:!0});var KWt=s(Lre);Ket=r(KWt,"from_config()"),KWt.forEach(t),Zet=r(Iae,` class
method.`),Iae.forEach(t),eot=i(Ti),tk=n(Ti,"P",{});var qHe=s(tk);oot=r(qHe,"This class cannot be instantiated directly using "),W0e=n(qHe,"CODE",{});var ZWt=s(W0e);rot=r(ZWt,"__init__()"),ZWt.forEach(t),tot=r(qHe," (throws an error)."),qHe.forEach(t),aot=i(Ti),oa=n(Ti,"DIV",{class:!0});var e6=s(oa);T(ak.$$.fragment,e6),not=i(e6),Q0e=n(e6,"P",{});var eQt=s(Q0e);sot=r(eQt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),eQt.forEach(t),lot=i(e6),Ef=n(e6,"P",{});var Nae=s(Ef);iot=r(Nae,`Note:
Loading a model from its configuration file does `),H0e=n(Nae,"STRONG",{});var oQt=s(H0e);dot=r(oQt,"not"),oQt.forEach(t),cot=r(Nae,` load the model weights. It only affects the
model\u2019s configuration. Use `),yre=n(Nae,"A",{href:!0});var rQt=s(yre);fot=r(rQt,"from_pretrained()"),rQt.forEach(t),mot=r(Nae," to load the model weights."),Nae.forEach(t),got=i(e6),T(T0.$$.fragment,e6),e6.forEach(t),hot=i(Ti),Yr=n(Ti,"DIV",{class:!0});var Mi=s(Yr);T(nk.$$.fragment,Mi),pot=i(Mi),U0e=n(Mi,"P",{});var tQt=s(U0e);_ot=r(tQt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),tQt.forEach(t),uot=i(Mi),xn=n(Mi,"P",{});var o6=s(xn);bot=r(o6,"The model class to instantiate is selected based on the "),J0e=n(o6,"CODE",{});var aQt=s(J0e);vot=r(aQt,"model_type"),aQt.forEach(t),Fot=r(o6,` property of the config object (either
passed as an argument or loaded from `),Y0e=n(o6,"CODE",{});var nQt=s(Y0e);Tot=r(nQt,"pretrained_model_name_or_path"),nQt.forEach(t),Mot=r(o6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K0e=n(o6,"CODE",{});var sQt=s(K0e);Eot=r(sQt,"pretrained_model_name_or_path"),sQt.forEach(t),Cot=r(o6,":"),o6.forEach(t),wot=i(Mi),Xe=n(Mi,"UL",{});var Eo=s(Xe);M0=n(Eo,"LI",{});var vXe=s(M0);Z0e=n(vXe,"STRONG",{});var lQt=s(Z0e);Aot=r(lQt,"albert"),lQt.forEach(t),Lot=r(vXe," \u2014 "),xre=n(vXe,"A",{href:!0});var iQt=s(xre);yot=r(iQt,"FlaxAlbertForMultipleChoice"),iQt.forEach(t),xot=r(vXe," (ALBERT model)"),vXe.forEach(t),$ot=i(Eo),E0=n(Eo,"LI",{});var FXe=s(E0);ewe=n(FXe,"STRONG",{});var dQt=s(ewe);kot=r(dQt,"bert"),dQt.forEach(t),Sot=r(FXe," \u2014 "),$re=n(FXe,"A",{href:!0});var cQt=s($re);Rot=r(cQt,"FlaxBertForMultipleChoice"),cQt.forEach(t),Pot=r(FXe," (BERT model)"),FXe.forEach(t),Bot=i(Eo),C0=n(Eo,"LI",{});var TXe=s(C0);owe=n(TXe,"STRONG",{});var fQt=s(owe);Iot=r(fQt,"big_bird"),fQt.forEach(t),Not=r(TXe," \u2014 "),kre=n(TXe,"A",{href:!0});var mQt=s(kre);qot=r(mQt,"FlaxBigBirdForMultipleChoice"),mQt.forEach(t),jot=r(TXe," (BigBird model)"),TXe.forEach(t),Dot=i(Eo),w0=n(Eo,"LI",{});var MXe=s(w0);rwe=n(MXe,"STRONG",{});var gQt=s(rwe);Got=r(gQt,"distilbert"),gQt.forEach(t),Oot=r(MXe," \u2014 "),Sre=n(MXe,"A",{href:!0});var hQt=s(Sre);Vot=r(hQt,"FlaxDistilBertForMultipleChoice"),hQt.forEach(t),Xot=r(MXe," (DistilBERT model)"),MXe.forEach(t),zot=i(Eo),A0=n(Eo,"LI",{});var EXe=s(A0);twe=n(EXe,"STRONG",{});var pQt=s(twe);Wot=r(pQt,"electra"),pQt.forEach(t),Qot=r(EXe," \u2014 "),Rre=n(EXe,"A",{href:!0});var _Qt=s(Rre);Hot=r(_Qt,"FlaxElectraForMultipleChoice"),_Qt.forEach(t),Uot=r(EXe," (ELECTRA model)"),EXe.forEach(t),Jot=i(Eo),L0=n(Eo,"LI",{});var CXe=s(L0);awe=n(CXe,"STRONG",{});var uQt=s(awe);Yot=r(uQt,"roberta"),uQt.forEach(t),Kot=r(CXe," \u2014 "),Pre=n(CXe,"A",{href:!0});var bQt=s(Pre);Zot=r(bQt,"FlaxRobertaForMultipleChoice"),bQt.forEach(t),ert=r(CXe," (RoBERTa model)"),CXe.forEach(t),ort=i(Eo),y0=n(Eo,"LI",{});var wXe=s(y0);nwe=n(wXe,"STRONG",{});var vQt=s(nwe);rrt=r(vQt,"roformer"),vQt.forEach(t),trt=r(wXe," \u2014 "),Bre=n(wXe,"A",{href:!0});var FQt=s(Bre);art=r(FQt,"FlaxRoFormerForMultipleChoice"),FQt.forEach(t),nrt=r(wXe," (RoFormer model)"),wXe.forEach(t),srt=i(Eo),x0=n(Eo,"LI",{});var AXe=s(x0);swe=n(AXe,"STRONG",{});var TQt=s(swe);lrt=r(TQt,"xlm-roberta"),TQt.forEach(t),irt=r(AXe," \u2014 "),Ire=n(AXe,"A",{href:!0});var MQt=s(Ire);drt=r(MQt,"FlaxXLMRobertaForMultipleChoice"),MQt.forEach(t),crt=r(AXe," (XLM-RoBERTa model)"),AXe.forEach(t),Eo.forEach(t),frt=i(Mi),T($0.$$.fragment,Mi),Mi.forEach(t),Ti.forEach(t),$We=i(f),Cf=n(f,"H2",{class:!0});var jHe=s(Cf);k0=n(jHe,"A",{id:!0,class:!0,href:!0});var EQt=s(k0);lwe=n(EQt,"SPAN",{});var CQt=s(lwe);T(sk.$$.fragment,CQt),CQt.forEach(t),EQt.forEach(t),mrt=i(jHe),iwe=n(jHe,"SPAN",{});var wQt=s(iwe);grt=r(wQt,"FlaxAutoModelForNextSentencePrediction"),wQt.forEach(t),jHe.forEach(t),kWe=i(f),Cr=n(f,"DIV",{class:!0});var Ei=s(Cr);T(lk.$$.fragment,Ei),hrt=i(Ei),wf=n(Ei,"P",{});var qae=s(wf);prt=r(qae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Nre=n(qae,"A",{href:!0});var AQt=s(Nre);_rt=r(AQt,"from_pretrained()"),AQt.forEach(t),urt=r(qae," class method or the "),qre=n(qae,"A",{href:!0});var LQt=s(qre);brt=r(LQt,"from_config()"),LQt.forEach(t),vrt=r(qae,` class
method.`),qae.forEach(t),Frt=i(Ei),ik=n(Ei,"P",{});var DHe=s(ik);Trt=r(DHe,"This class cannot be instantiated directly using "),dwe=n(DHe,"CODE",{});var yQt=s(dwe);Mrt=r(yQt,"__init__()"),yQt.forEach(t),Ert=r(DHe," (throws an error)."),DHe.forEach(t),Crt=i(Ei),ra=n(Ei,"DIV",{class:!0});var r6=s(ra);T(dk.$$.fragment,r6),wrt=i(r6),cwe=n(r6,"P",{});var xQt=s(cwe);Art=r(xQt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),xQt.forEach(t),Lrt=i(r6),Af=n(r6,"P",{});var jae=s(Af);yrt=r(jae,`Note:
Loading a model from its configuration file does `),fwe=n(jae,"STRONG",{});var $Qt=s(fwe);xrt=r($Qt,"not"),$Qt.forEach(t),$rt=r(jae,` load the model weights. It only affects the
model\u2019s configuration. Use `),jre=n(jae,"A",{href:!0});var kQt=s(jre);krt=r(kQt,"from_pretrained()"),kQt.forEach(t),Srt=r(jae," to load the model weights."),jae.forEach(t),Rrt=i(r6),T(S0.$$.fragment,r6),r6.forEach(t),Prt=i(Ei),Kr=n(Ei,"DIV",{class:!0});var Ci=s(Kr);T(ck.$$.fragment,Ci),Brt=i(Ci),mwe=n(Ci,"P",{});var SQt=s(mwe);Irt=r(SQt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),SQt.forEach(t),Nrt=i(Ci),$n=n(Ci,"P",{});var t6=s($n);qrt=r(t6,"The model class to instantiate is selected based on the "),gwe=n(t6,"CODE",{});var RQt=s(gwe);jrt=r(RQt,"model_type"),RQt.forEach(t),Drt=r(t6,` property of the config object (either
passed as an argument or loaded from `),hwe=n(t6,"CODE",{});var PQt=s(hwe);Grt=r(PQt,"pretrained_model_name_or_path"),PQt.forEach(t),Ort=r(t6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pwe=n(t6,"CODE",{});var BQt=s(pwe);Vrt=r(BQt,"pretrained_model_name_or_path"),BQt.forEach(t),Xrt=r(t6,":"),t6.forEach(t),zrt=i(Ci),_we=n(Ci,"UL",{});var IQt=s(_we);R0=n(IQt,"LI",{});var LXe=s(R0);uwe=n(LXe,"STRONG",{});var NQt=s(uwe);Wrt=r(NQt,"bert"),NQt.forEach(t),Qrt=r(LXe," \u2014 "),Dre=n(LXe,"A",{href:!0});var qQt=s(Dre);Hrt=r(qQt,"FlaxBertForNextSentencePrediction"),qQt.forEach(t),Urt=r(LXe," (BERT model)"),LXe.forEach(t),IQt.forEach(t),Jrt=i(Ci),T(P0.$$.fragment,Ci),Ci.forEach(t),Ei.forEach(t),SWe=i(f),Lf=n(f,"H2",{class:!0});var GHe=s(Lf);B0=n(GHe,"A",{id:!0,class:!0,href:!0});var jQt=s(B0);bwe=n(jQt,"SPAN",{});var DQt=s(bwe);T(fk.$$.fragment,DQt),DQt.forEach(t),jQt.forEach(t),Yrt=i(GHe),vwe=n(GHe,"SPAN",{});var GQt=s(vwe);Krt=r(GQt,"FlaxAutoModelForImageClassification"),GQt.forEach(t),GHe.forEach(t),RWe=i(f),wr=n(f,"DIV",{class:!0});var wi=s(wr);T(mk.$$.fragment,wi),Zrt=i(wi),yf=n(wi,"P",{});var Dae=s(yf);ett=r(Dae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Gre=n(Dae,"A",{href:!0});var OQt=s(Gre);ott=r(OQt,"from_pretrained()"),OQt.forEach(t),rtt=r(Dae," class method or the "),Ore=n(Dae,"A",{href:!0});var VQt=s(Ore);ttt=r(VQt,"from_config()"),VQt.forEach(t),att=r(Dae,` class
method.`),Dae.forEach(t),ntt=i(wi),gk=n(wi,"P",{});var OHe=s(gk);stt=r(OHe,"This class cannot be instantiated directly using "),Fwe=n(OHe,"CODE",{});var XQt=s(Fwe);ltt=r(XQt,"__init__()"),XQt.forEach(t),itt=r(OHe," (throws an error)."),OHe.forEach(t),dtt=i(wi),ta=n(wi,"DIV",{class:!0});var a6=s(ta);T(hk.$$.fragment,a6),ctt=i(a6),Twe=n(a6,"P",{});var zQt=s(Twe);ftt=r(zQt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),zQt.forEach(t),mtt=i(a6),xf=n(a6,"P",{});var Gae=s(xf);gtt=r(Gae,`Note:
Loading a model from its configuration file does `),Mwe=n(Gae,"STRONG",{});var WQt=s(Mwe);htt=r(WQt,"not"),WQt.forEach(t),ptt=r(Gae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vre=n(Gae,"A",{href:!0});var QQt=s(Vre);_tt=r(QQt,"from_pretrained()"),QQt.forEach(t),utt=r(Gae," to load the model weights."),Gae.forEach(t),btt=i(a6),T(I0.$$.fragment,a6),a6.forEach(t),vtt=i(wi),Zr=n(wi,"DIV",{class:!0});var Ai=s(Zr);T(pk.$$.fragment,Ai),Ftt=i(Ai),Ewe=n(Ai,"P",{});var HQt=s(Ewe);Ttt=r(HQt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),HQt.forEach(t),Mtt=i(Ai),kn=n(Ai,"P",{});var n6=s(kn);Ett=r(n6,"The model class to instantiate is selected based on the "),Cwe=n(n6,"CODE",{});var UQt=s(Cwe);Ctt=r(UQt,"model_type"),UQt.forEach(t),wtt=r(n6,` property of the config object (either
passed as an argument or loaded from `),wwe=n(n6,"CODE",{});var JQt=s(wwe);Att=r(JQt,"pretrained_model_name_or_path"),JQt.forEach(t),Ltt=r(n6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Awe=n(n6,"CODE",{});var YQt=s(Awe);ytt=r(YQt,"pretrained_model_name_or_path"),YQt.forEach(t),xtt=r(n6,":"),n6.forEach(t),$tt=i(Ai),_k=n(Ai,"UL",{});var VHe=s(_k);N0=n(VHe,"LI",{});var yXe=s(N0);Lwe=n(yXe,"STRONG",{});var KQt=s(Lwe);ktt=r(KQt,"beit"),KQt.forEach(t),Stt=r(yXe," \u2014 "),Xre=n(yXe,"A",{href:!0});var ZQt=s(Xre);Rtt=r(ZQt,"FlaxBeitForImageClassification"),ZQt.forEach(t),Ptt=r(yXe," (BEiT model)"),yXe.forEach(t),Btt=i(VHe),q0=n(VHe,"LI",{});var xXe=s(q0);ywe=n(xXe,"STRONG",{});var eHt=s(ywe);Itt=r(eHt,"vit"),eHt.forEach(t),Ntt=r(xXe," \u2014 "),zre=n(xXe,"A",{href:!0});var oHt=s(zre);qtt=r(oHt,"FlaxViTForImageClassification"),oHt.forEach(t),jtt=r(xXe," (ViT model)"),xXe.forEach(t),VHe.forEach(t),Dtt=i(Ai),T(j0.$$.fragment,Ai),Ai.forEach(t),wi.forEach(t),PWe=i(f),$f=n(f,"H2",{class:!0});var XHe=s($f);D0=n(XHe,"A",{id:!0,class:!0,href:!0});var rHt=s(D0);xwe=n(rHt,"SPAN",{});var tHt=s(xwe);T(uk.$$.fragment,tHt),tHt.forEach(t),rHt.forEach(t),Gtt=i(XHe),$we=n(XHe,"SPAN",{});var aHt=s($we);Ott=r(aHt,"FlaxAutoModelForVision2Seq"),aHt.forEach(t),XHe.forEach(t),BWe=i(f),Ar=n(f,"DIV",{class:!0});var Li=s(Ar);T(bk.$$.fragment,Li),Vtt=i(Li),kf=n(Li,"P",{});var Oae=s(kf);Xtt=r(Oae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Wre=n(Oae,"A",{href:!0});var nHt=s(Wre);ztt=r(nHt,"from_pretrained()"),nHt.forEach(t),Wtt=r(Oae," class method or the "),Qre=n(Oae,"A",{href:!0});var sHt=s(Qre);Qtt=r(sHt,"from_config()"),sHt.forEach(t),Htt=r(Oae,` class
method.`),Oae.forEach(t),Utt=i(Li),vk=n(Li,"P",{});var zHe=s(vk);Jtt=r(zHe,"This class cannot be instantiated directly using "),kwe=n(zHe,"CODE",{});var lHt=s(kwe);Ytt=r(lHt,"__init__()"),lHt.forEach(t),Ktt=r(zHe," (throws an error)."),zHe.forEach(t),Ztt=i(Li),aa=n(Li,"DIV",{class:!0});var s6=s(aa);T(Fk.$$.fragment,s6),eat=i(s6),Swe=n(s6,"P",{});var iHt=s(Swe);oat=r(iHt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),iHt.forEach(t),rat=i(s6),Sf=n(s6,"P",{});var Vae=s(Sf);tat=r(Vae,`Note:
Loading a model from its configuration file does `),Rwe=n(Vae,"STRONG",{});var dHt=s(Rwe);aat=r(dHt,"not"),dHt.forEach(t),nat=r(Vae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hre=n(Vae,"A",{href:!0});var cHt=s(Hre);sat=r(cHt,"from_pretrained()"),cHt.forEach(t),lat=r(Vae," to load the model weights."),Vae.forEach(t),iat=i(s6),T(G0.$$.fragment,s6),s6.forEach(t),dat=i(Li),et=n(Li,"DIV",{class:!0});var yi=s(et);T(Tk.$$.fragment,yi),cat=i(yi),Pwe=n(yi,"P",{});var fHt=s(Pwe);fat=r(fHt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),fHt.forEach(t),mat=i(yi),Sn=n(yi,"P",{});var l6=s(Sn);gat=r(l6,"The model class to instantiate is selected based on the "),Bwe=n(l6,"CODE",{});var mHt=s(Bwe);hat=r(mHt,"model_type"),mHt.forEach(t),pat=r(l6,` property of the config object (either
passed as an argument or loaded from `),Iwe=n(l6,"CODE",{});var gHt=s(Iwe);_at=r(gHt,"pretrained_model_name_or_path"),gHt.forEach(t),uat=r(l6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nwe=n(l6,"CODE",{});var hHt=s(Nwe);bat=r(hHt,"pretrained_model_name_or_path"),hHt.forEach(t),vat=r(l6,":"),l6.forEach(t),Fat=i(yi),qwe=n(yi,"UL",{});var pHt=s(qwe);O0=n(pHt,"LI",{});var $Xe=s(O0);jwe=n($Xe,"STRONG",{});var _Ht=s(jwe);Tat=r(_Ht,"vision-encoder-decoder"),_Ht.forEach(t),Mat=r($Xe," \u2014 "),Ure=n($Xe,"A",{href:!0});var uHt=s(Ure);Eat=r(uHt,"FlaxVisionEncoderDecoderModel"),uHt.forEach(t),Cat=r($Xe," (Vision Encoder decoder model)"),$Xe.forEach(t),pHt.forEach(t),wat=i(yi),T(V0.$$.fragment,yi),yi.forEach(t),Li.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(EJt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Pn,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.AutoConfig"),c(In,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.AutoModel"),c(Nn,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.AutoTokenizer"),c(Bi,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertModel"),c(Df,"id","extending-the-auto-classes"),c(Df,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Df,"href","#extending-the-auto-classes"),c(Ii,"class","relative group"),c(Of,"id","transformers.AutoConfig"),c(Of,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Of,"href","#transformers.AutoConfig"),c(Ni,"class","relative group"),c(YS,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(KS,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig"),c(ZS,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig"),c(eR,"href","/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitConfig"),c(oR,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig"),c(rR,"href","/docs/transformers/pr_17938/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(tR,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig"),c(aR,"href","/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(nR,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(sR,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(lR,"href","/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomConfig"),c(iR,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig"),c(dR,"href","/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineConfig"),c(cR,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPConfig"),c(fR,"href","/docs/transformers/pr_17938/en/model_doc/codegen#transformers.CodeGenConfig"),c(mR,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig"),c(gR,"href","/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextConfig"),c(hR,"href","/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLConfig"),c(pR,"href","/docs/transformers/pr_17938/en/model_doc/cvt#transformers.CvtConfig"),c(_R,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(uR,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(bR,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(vR,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig"),c(FR,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(TR,"href","/docs/transformers/pr_17938/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(MR,"href","/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTConfig"),c(ER,"href","/docs/transformers/pr_17938/en/model_doc/detr#transformers.DetrConfig"),c(CR,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig"),c(wR,"href","/docs/transformers/pr_17938/en/model_doc/dpr#transformers.DPRConfig"),c(AR,"href","/docs/transformers/pr_17938/en/model_doc/dpt#transformers.DPTConfig"),c(LR,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig"),c(yR,"href","/docs/transformers/pr_17938/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(xR,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig"),c($R,"href","/docs/transformers/pr_17938/en/model_doc/flava#transformers.FlavaConfig"),c(kR,"href","/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetConfig"),c(SR,"href","/docs/transformers/pr_17938/en/model_doc/fsmt#transformers.FSMTConfig"),c(RR,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig"),c(PR,"href","/docs/transformers/pr_17938/en/model_doc/glpn#transformers.GLPNConfig"),c(BR,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config"),c(IR,"href","/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(NR,"href","/docs/transformers/pr_17938/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(qR,"href","/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJConfig"),c(jR,"href","/docs/transformers/pr_17938/en/model_doc/groupvit#transformers.GroupViTConfig"),c(DR,"href","/docs/transformers/pr_17938/en/model_doc/hubert#transformers.HubertConfig"),c(GR,"href","/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertConfig"),c(OR,"href","/docs/transformers/pr_17938/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(VR,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(XR,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(zR,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(WR,"href","/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDConfig"),c(QR,"href","/docs/transformers/pr_17938/en/model_doc/levit#transformers.LevitConfig"),c(HR,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig"),c(UR,"href","/docs/transformers/pr_17938/en/model_doc/longt5#transformers.LongT5Config"),c(JR,"href","/docs/transformers/pr_17938/en/model_doc/luke#transformers.LukeConfig"),c(YR,"href","/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertConfig"),c(KR,"href","/docs/transformers/pr_17938/en/model_doc/m2m_100#transformers.M2M100Config"),c(ZR,"href","/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianConfig"),c(eP,"href","/docs/transformers/pr_17938/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(oP,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig"),c(rP,"href","/docs/transformers/pr_17938/en/model_doc/mctct#transformers.MCTCTConfig"),c(tP,"href","/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(aP,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(nP,"href","/docs/transformers/pr_17938/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(sP,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig"),c(lP,"href","/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5Config"),c(iP,"href","/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpConfig"),c(dP,"href","/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaConfig"),c(cP,"href","/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(fP,"href","/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(mP,"href","/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTConfig"),c(gP,"href","/docs/transformers/pr_17938/en/model_doc/owlvit#transformers.OwlViTConfig"),c(hP,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusConfig"),c(pP,"href","/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverConfig"),c(_P,"href","/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartConfig"),c(uP,"href","/docs/transformers/pr_17938/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(bP,"href","/docs/transformers/pr_17938/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(vP,"href","/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(FP,"href","/docs/transformers/pr_17938/en/model_doc/rag#transformers.RagConfig"),c(TP,"href","/docs/transformers/pr_17938/en/model_doc/realm#transformers.RealmConfig"),c(MP,"href","/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerConfig"),c(EP,"href","/docs/transformers/pr_17938/en/model_doc/regnet#transformers.RegNetConfig"),c(CP,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig"),c(wP,"href","/docs/transformers/pr_17938/en/model_doc/resnet#transformers.ResNetConfig"),c(AP,"href","/docs/transformers/pr_17938/en/model_doc/retribert#transformers.RetriBertConfig"),c(LP,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig"),c(yP,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig"),c(xP,"href","/docs/transformers/pr_17938/en/model_doc/segformer#transformers.SegformerConfig"),c($P,"href","/docs/transformers/pr_17938/en/model_doc/sew#transformers.SEWConfig"),c(kP,"href","/docs/transformers/pr_17938/en/model_doc/sew-d#transformers.SEWDConfig"),c(SP,"href","/docs/transformers/pr_17938/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(RP,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(PP,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(BP,"href","/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterConfig"),c(IP,"href","/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(NP,"href","/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinConfig"),c(qP,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Config"),c(jP,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasConfig"),c(DP,"href","/docs/transformers/pr_17938/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(GP,"href","/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(OP,"href","/docs/transformers/pr_17938/en/model_doc/trocr#transformers.TrOCRConfig"),c(VP,"href","/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(XP,"href","/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(zP,"href","/docs/transformers/pr_17938/en/model_doc/van#transformers.VanConfig"),c(WP,"href","/docs/transformers/pr_17938/en/model_doc/vilt#transformers.ViltConfig"),c(QP,"href","/docs/transformers/pr_17938/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(HP,"href","/docs/transformers/pr_17938/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(UP,"href","/docs/transformers/pr_17938/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(JP,"href","/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTConfig"),c(YP,"href","/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(KP,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(ZP,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(eB,"href","/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMConfig"),c(oB,"href","/docs/transformers/pr_17938/en/model_doc/xglm#transformers.XGLMConfig"),c(rB,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig"),c(tB,"href","/docs/transformers/pr_17938/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(aB,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(nB,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(sB,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig"),c(lB,"href","/docs/transformers/pr_17938/en/model_doc/yolos#transformers.YolosConfig"),c(iB,"href","/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoConfig"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rh,"id","transformers.AutoTokenizer"),c(rh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rh,"href","#transformers.AutoTokenizer"),c(ji,"class","relative group"),c(dB,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(cB,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertTokenizer"),c(fB,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(mB,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartTokenizer"),c(gB,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartTokenizerFast"),c(hB,"href","/docs/transformers/pr_17938/en/model_doc/barthez#transformers.BarthezTokenizer"),c(pB,"href","/docs/transformers/pr_17938/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(_B,"href","/docs/transformers/pr_17938/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(uB,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizer"),c(bB,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizerFast"),c(vB,"href","/docs/transformers/pr_17938/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(FB,"href","/docs/transformers/pr_17938/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(TB,"href","/docs/transformers/pr_17938/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(MB,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(EB,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(CB,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(wB,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(AB,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(LB,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(yB,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(xB,"href","/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomTokenizerFast"),c($B,"href","/docs/transformers/pr_17938/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(kB,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertTokenizer"),c(SB,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(RB,"href","/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineTokenizer"),c(PB,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPTokenizer"),c(BB,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(IB,"href","/docs/transformers/pr_17938/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(NB,"href","/docs/transformers/pr_17938/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(qB,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(jB,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(DB,"href","/docs/transformers/pr_17938/en/model_doc/cpm#transformers.CpmTokenizer"),c(GB,"href","/docs/transformers/pr_17938/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(OB,"href","/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(VB,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaTokenizer"),c(XB,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(zB,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaTokenizer"),c(WB,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(QB,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(HB,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(UB,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(JB,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(YB,"href","/docs/transformers/pr_17938/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(KB,"href","/docs/transformers/pr_17938/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(ZB,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraTokenizer"),c(eI,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(oI,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(rI,"href","/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetTokenizer"),c(tI,"href","/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(aI,"href","/docs/transformers/pr_17938/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(nI,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelTokenizer"),c(sI,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(lI,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(iI,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(dI,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(cI,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(fI,"href","/docs/transformers/pr_17938/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(mI,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(gI,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(hI,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPTokenizer"),c(pI,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(_I,"href","/docs/transformers/pr_17938/en/model_doc/herbert#transformers.HerbertTokenizer"),c(uI,"href","/docs/transformers/pr_17938/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(bI,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(vI,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaTokenizer"),c(FI,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(TI,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(MI,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(EI,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(CI,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(wI,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(AI,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(LI,"href","/docs/transformers/pr_17938/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(yI,"href","/docs/transformers/pr_17938/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(xI,"href","/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDTokenizer"),c($I,"href","/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDTokenizerFast"),c(kI,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerTokenizer"),c(SI,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(RI,"href","/docs/transformers/pr_17938/en/model_doc/mt5#transformers.T5Tokenizer"),c(PI,"href","/docs/transformers/pr_17938/en/model_doc/mt5#transformers.T5TokenizerFast"),c(BI,"href","/docs/transformers/pr_17938/en/model_doc/luke#transformers.LukeTokenizer"),c(II,"href","/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(NI,"href","/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(qI,"href","/docs/transformers/pr_17938/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(jI,"href","/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianTokenizer"),c(DI,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartTokenizer"),c(GI,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(OI,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(VI,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(XI,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizer"),c(zI,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizerFast"),c(WI,"href","/docs/transformers/pr_17938/en/model_doc/mluke#transformers.MLukeTokenizer"),c(QI,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(HI,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(UI,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(JI,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(YI,"href","/docs/transformers/pr_17938/en/model_doc/mt5#transformers.T5Tokenizer"),c(KI,"href","/docs/transformers/pr_17938/en/model_doc/mt5#transformers.T5TokenizerFast"),c(ZI,"href","/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpTokenizer"),c(eN,"href","/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(oN,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizer"),c(rN,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizerFast"),c(tN,"href","/docs/transformers/pr_17938/en/model_doc/nllb#transformers.NllbTokenizer"),c(aN,"href","/docs/transformers/pr_17938/en/model_doc/nllb#transformers.NllbTokenizerFast"),c(nN,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertTokenizer"),c(sN,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(lN,"href","/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(iN,"href","/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(dN,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(cN,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPTokenizer"),c(fN,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(mN,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(gN,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(hN,"href","/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(pN,"href","/docs/transformers/pr_17938/en/model_doc/phobert#transformers.PhobertTokenizer"),c(_N,"href","/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartTokenizer"),c(uN,"href","/docs/transformers/pr_17938/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(bN,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizer"),c(vN,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizerFast"),c(FN,"href","/docs/transformers/pr_17938/en/model_doc/rag#transformers.RagTokenizer"),c(TN,"href","/docs/transformers/pr_17938/en/model_doc/realm#transformers.RealmTokenizer"),c(MN,"href","/docs/transformers/pr_17938/en/model_doc/realm#transformers.RealmTokenizerFast"),c(EN,"href","/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerTokenizer"),c(CN,"href","/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(wN,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertTokenizer"),c(AN,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(LN,"href","/docs/transformers/pr_17938/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(yN,"href","/docs/transformers/pr_17938/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(xN,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaTokenizer"),c($N,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(kN,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(SN,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(RN,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(PN,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(BN,"href","/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterTokenizer"),c(IN,"href","/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(NN,"href","/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(qN,"href","/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(jN,"href","/docs/transformers/pr_17938/en/model_doc/mt5#transformers.T5Tokenizer"),c(DN,"href","/docs/transformers/pr_17938/en/model_doc/mt5#transformers.T5TokenizerFast"),c(GN,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasTokenizer"),c(ON,"href","/docs/transformers/pr_17938/en/model_doc/tapex#transformers.TapexTokenizer"),c(VN,"href","/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(XN,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizer"),c(zN,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizerFast"),c(WN,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizer"),c(QN,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizerFast"),c(HN,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(UN,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(JN,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(YN,"href","/docs/transformers/pr_17938/en/model_doc/xglm#transformers.XGLMTokenizer"),c(KN,"href","/docs/transformers/pr_17938/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(ZN,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMTokenizer"),c(eq,"href","/docs/transformers/pr_17938/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(oq,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(rq,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(tq,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaTokenizer"),c(aq,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(nq,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(sq,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(lq,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertTokenizer"),c(iq,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qh,"id","transformers.AutoFeatureExtractor"),c(qh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qh,"href","#transformers.AutoFeatureExtractor"),c(Di,"class","relative group"),c(dq,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(cq,"href","/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(fq,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(mq,"href","/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(gq,"href","/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(hq,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(pq,"href","/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(_q,"href","/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(uq,"href","/docs/transformers/pr_17938/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(bq,"href","/docs/transformers/pr_17938/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(vq,"href","/docs/transformers/pr_17938/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(Fq,"href","/docs/transformers/pr_17938/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(Tq,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(Mq,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Eq,"href","/docs/transformers/pr_17938/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(Cq,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(wq,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(Aq,"href","/docs/transformers/pr_17938/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(Lq,"href","/docs/transformers/pr_17938/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(yq,"href","/docs/transformers/pr_17938/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(xq,"href","/docs/transformers/pr_17938/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c($q,"href","/docs/transformers/pr_17938/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),c(kq,"href","/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(Sq,"href","/docs/transformers/pr_17938/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(Rq,"href","/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Pq,"href","/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Bq,"href","/docs/transformers/pr_17938/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(Iq,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(Nq,"href","/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(qq,"href","/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(jq,"href","/docs/transformers/pr_17938/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(Dq,"href","/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Gq,"href","/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Oq,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Vq,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Xq,"href","/docs/transformers/pr_17938/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ep,"id","transformers.AutoProcessor"),c(Ep,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ep,"href","#transformers.AutoProcessor"),c(Gi,"class","relative group"),c(zq,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(Wq,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPProcessor"),c(Qq,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPProcessor"),c(Hq,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(Uq,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(Jq,"href","/docs/transformers/pr_17938/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(Yq,"href","/docs/transformers/pr_17938/en/model_doc/owlvit#transformers.OwlViTProcessor"),c(Kq,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Zq,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(ej,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(oj,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(rj,"href","/docs/transformers/pr_17938/en/model_doc/trocr#transformers.TrOCRProcessor"),c(tj,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(aj,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(nj,"href","/docs/transformers/pr_17938/en/model_doc/vilt#transformers.ViltProcessor"),c(sj,"href","/docs/transformers/pr_17938/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(lj,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(ij,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(dj,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wp,"id","transformers.AutoModel"),c(Wp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wp,"href","#transformers.AutoModel"),c(Vi,"class","relative group"),c(cj,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fj,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mj,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gj,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertModel"),c(hj,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartModel"),c(pj,"href","/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitModel"),c(_j,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertModel"),c(uj,"href","/docs/transformers/pr_17938/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(bj,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdModel"),c(vj,"href","/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(Fj,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(Tj,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(Mj,"href","/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomModel"),c(Ej,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertModel"),c(Cj,"href","/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineModel"),c(wj,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPModel"),c(Aj,"href","/docs/transformers/pr_17938/en/model_doc/codegen#transformers.CodeGenModel"),c(Lj,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertModel"),c(yj,"href","/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextModel"),c(xj,"href","/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLModel"),c($j,"href","/docs/transformers/pr_17938/en/model_doc/cvt#transformers.CvtModel"),c(kj,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(Sj,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(Rj,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(Pj,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaModel"),c(Bj,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(Ij,"href","/docs/transformers/pr_17938/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(Nj,"href","/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTModel"),c(qj,"href","/docs/transformers/pr_17938/en/model_doc/detr#transformers.DetrModel"),c(jj,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertModel"),c(Dj,"href","/docs/transformers/pr_17938/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Gj,"href","/docs/transformers/pr_17938/en/model_doc/dpt#transformers.DPTModel"),c(Oj,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraModel"),c(Vj,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertModel"),c(Xj,"href","/docs/transformers/pr_17938/en/model_doc/flava#transformers.FlavaModel"),c(zj,"href","/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetModel"),c(Wj,"href","/docs/transformers/pr_17938/en/model_doc/fsmt#transformers.FSMTModel"),c(Qj,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelModel"),c(Hj,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelBaseModel"),c(Uj,"href","/docs/transformers/pr_17938/en/model_doc/glpn#transformers.GLPNModel"),c(Jj,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Model"),c(Yj,"href","/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Kj,"href","/docs/transformers/pr_17938/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(Zj,"href","/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJModel"),c(eD,"href","/docs/transformers/pr_17938/en/model_doc/groupvit#transformers.GroupViTModel"),c(oD,"href","/docs/transformers/pr_17938/en/model_doc/hubert#transformers.HubertModel"),c(rD,"href","/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertModel"),c(tD,"href","/docs/transformers/pr_17938/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(aD,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(nD,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(sD,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(lD,"href","/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDModel"),c(iD,"href","/docs/transformers/pr_17938/en/model_doc/levit#transformers.LevitModel"),c(dD,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerModel"),c(cD,"href","/docs/transformers/pr_17938/en/model_doc/longt5#transformers.LongT5Model"),c(fD,"href","/docs/transformers/pr_17938/en/model_doc/luke#transformers.LukeModel"),c(mD,"href","/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertModel"),c(gD,"href","/docs/transformers/pr_17938/en/model_doc/m2m_100#transformers.M2M100Model"),c(hD,"href","/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianModel"),c(pD,"href","/docs/transformers/pr_17938/en/model_doc/maskformer#transformers.MaskFormerModel"),c(_D,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartModel"),c(uD,"href","/docs/transformers/pr_17938/en/model_doc/mctct#transformers.MCTCTModel"),c(bD,"href","/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(vD,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertModel"),c(FD,"href","/docs/transformers/pr_17938/en/model_doc/mobilevit#transformers.MobileViTModel"),c(TD,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetModel"),c(MD,"href","/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5Model"),c(ED,"href","/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpModel"),c(CD,"href","/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaModel"),c(wD,"href","/docs/transformers/pr_17938/en/model_doc/m2m_100#transformers.M2M100Model"),c(AD,"href","/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerModel"),c(LD,"href","/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(yD,"href","/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTModel"),c(xD,"href","/docs/transformers/pr_17938/en/model_doc/owlvit#transformers.OwlViTModel"),c($D,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusModel"),c(kD,"href","/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverModel"),c(SD,"href","/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartModel"),c(RD,"href","/docs/transformers/pr_17938/en/model_doc/poolformer#transformers.PoolFormerModel"),c(PD,"href","/docs/transformers/pr_17938/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(BD,"href","/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertModel"),c(ID,"href","/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerModel"),c(ND,"href","/docs/transformers/pr_17938/en/model_doc/regnet#transformers.RegNetModel"),c(qD,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertModel"),c(jD,"href","/docs/transformers/pr_17938/en/model_doc/resnet#transformers.ResNetModel"),c(DD,"href","/docs/transformers/pr_17938/en/model_doc/retribert#transformers.RetriBertModel"),c(GD,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaModel"),c(OD,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerModel"),c(VD,"href","/docs/transformers/pr_17938/en/model_doc/segformer#transformers.SegformerModel"),c(XD,"href","/docs/transformers/pr_17938/en/model_doc/sew#transformers.SEWModel"),c(zD,"href","/docs/transformers/pr_17938/en/model_doc/sew-d#transformers.SEWDModel"),c(WD,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(QD,"href","/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterModel"),c(HD,"href","/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(UD,"href","/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinModel"),c(JD,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Model"),c(YD,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasModel"),c(KD,"href","/docs/transformers/pr_17938/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(ZD,"href","/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(eG,"href","/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechModel"),c(oG,"href","/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(rG,"href","/docs/transformers/pr_17938/en/model_doc/van#transformers.VanModel"),c(tG,"href","/docs/transformers/pr_17938/en/model_doc/vilt#transformers.ViltModel"),c(aG,"href","/docs/transformers/pr_17938/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(nG,"href","/docs/transformers/pr_17938/en/model_doc/visual_bert#transformers.VisualBertModel"),c(sG,"href","/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTModel"),c(lG,"href","/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(iG,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(dG,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(cG,"href","/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMModel"),c(fG,"href","/docs/transformers/pr_17938/en/model_doc/xglm#transformers.XGLMModel"),c(mG,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMModel"),c(gG,"href","/docs/transformers/pr_17938/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(hG,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(pG,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(_G,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetModel"),c(uG,"href","/docs/transformers/pr_17938/en/model_doc/yolos#transformers.YolosModel"),c(bG,"href","/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e1,"id","transformers.AutoModelForPreTraining"),c(e1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e1,"href","#transformers.AutoModelForPreTraining"),c(Wi,"class","relative group"),c(vG,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FG,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TG,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MG,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForPreTraining"),c(EG,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(CG,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForPreTraining"),c(wG,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(AG,"href","/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomForCausalLM"),c(LG,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(yG,"href","/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(xG,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c($G,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(kG,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(SG,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(RG,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForPreTraining"),c(PG,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(BG,"href","/docs/transformers/pr_17938/en/model_doc/flava#transformers.FlavaForPreTraining"),c(IG,"href","/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForPreTraining"),c(NG,"href","/docs/transformers/pr_17938/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(qG,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(jG,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(DG,"href","/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(GG,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(OG,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(VG,"href","/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(XG,"href","/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(zG,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(WG,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(QG,"href","/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(HG,"href","/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(UG,"href","/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(JG,"href","/docs/transformers/pr_17938/en/model_doc/retribert#transformers.RetriBertModel"),c(YG,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(KG,"href","/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(ZG,"href","/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(eO,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(oO,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(rO,"href","/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(tO,"href","/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(aO,"href","/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(nO,"href","/docs/transformers/pr_17938/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(sO,"href","/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(lO,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(iO,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(dO,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(cO,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(fO,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(mO,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U1,"id","transformers.AutoModelForCausalLM"),c(U1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U1,"href","#transformers.AutoModelForCausalLM"),c(Ui,"class","relative group"),c(gO,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hO,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pO,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_O,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForCausalLM"),c(uO,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertLMHeadModel"),c(bO,"href","/docs/transformers/pr_17938/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(vO,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(FO,"href","/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(TO,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(MO,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(EO,"href","/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomForCausalLM"),c(CO,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(wO,"href","/docs/transformers/pr_17938/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(AO,"href","/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(LO,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(yO,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForCausalLM"),c(xO,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c($O,"href","/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(kO,"href","/docs/transformers/pr_17938/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(SO,"href","/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(RO,"href","/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianForCausalLM"),c(PO,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartForCausalLM"),c(BO,"href","/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(IO,"href","/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForCausalLM"),c(NO,"href","/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(qO,"href","/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTForCausalLM"),c(jO,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(DO,"href","/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(GO,"href","/docs/transformers/pr_17938/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(OO,"href","/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(VO,"href","/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(XO,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(zO,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(WO,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(QO,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(HO,"href","/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(UO,"href","/docs/transformers/pr_17938/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(JO,"href","/docs/transformers/pr_17938/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(YO,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(KO,"href","/docs/transformers/pr_17938/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(ZO,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(eV,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(oV,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j2,"id","transformers.AutoModelForMaskedLM"),c(j2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j2,"href","#transformers.AutoModelForMaskedLM"),c(Ki,"class","relative group"),c(rV,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tV,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aV,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nV,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(sV,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(lV,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForMaskedLM"),c(iV,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(dV,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(cV,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(fV,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(mV,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(gV,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(hV,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(pV,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(_V,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(uV,"href","/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(bV,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(vV,"href","/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(FV,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(TV,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(MV,"href","/docs/transformers/pr_17938/en/model_doc/luke#transformers.LukeForMaskedLM"),c(EV,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(CV,"href","/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(wV,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(AV,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(LV,"href","/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(yV,"href","/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(xV,"href","/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c($V,"href","/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(kV,"href","/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(SV,"href","/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(RV,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(PV,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(BV,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(IV,"href","/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(NV,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(qV,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(jV,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(DV,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(GV,"href","/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lb,"id","transformers.AutoModelForSeq2SeqLM"),c(Lb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lb,"href","#transformers.AutoModelForSeq2SeqLM"),c(od,"class","relative group"),c(OV,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VV,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XV,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zV,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(WV,"href","/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(QV,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(HV,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(UV,"href","/docs/transformers/pr_17938/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(JV,"href","/docs/transformers/pr_17938/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(YV,"href","/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(KV,"href","/docs/transformers/pr_17938/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(ZV,"href","/docs/transformers/pr_17938/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(eX,"href","/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianMTModel"),c(oX,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(rX,"href","/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(tX,"href","/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(aX,"href","/docs/transformers/pr_17938/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(nX,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(sX,"href","/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(lX,"href","/docs/transformers/pr_17938/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(iX,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(dX,"href","/docs/transformers/pr_17938/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jb,"id","transformers.AutoModelForSequenceClassification"),c(Jb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jb,"href","#transformers.AutoModelForSequenceClassification"),c(ad,"class","relative group"),c(cX,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fX,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mX,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gX,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(hX,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForSequenceClassification"),c(pX,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForSequenceClassification"),c(_X,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(uX,"href","/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(bX,"href","/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(vX,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(FX,"href","/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(TX,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(MX,"href","/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(EX,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(CX,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(wX,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(AX,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(LX,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(yX,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(xX,"href","/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c($X,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(kX,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(SX,"href","/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(RX,"href","/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(PX,"href","/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(BX,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(IX,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(NX,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(qX,"href","/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDForSequenceClassification"),c(jX,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(DX,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(GX,"href","/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(OX,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(VX,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(XX,"href","/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(zX,"href","/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(WX,"href","/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(QX,"href","/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(HX,"href","/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(UX,"href","/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(JX,"href","/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(YX,"href","/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(KX,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(ZX,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(ez,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(oz,"href","/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(rz,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(tz,"href","/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(az,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(nz,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(sz,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(lz,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(iz,"href","/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J3,"id","transformers.AutoModelForMultipleChoice"),c(J3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J3,"href","#transformers.AutoModelForMultipleChoice"),c(ld,"class","relative group"),c(dz,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cz,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fz,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mz,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(gz,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForMultipleChoice"),c(hz,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(pz,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(_z,"href","/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(uz,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(bz,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(vz,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(Fz,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(Tz,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(Mz,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(Ez,"href","/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(Cz,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(wz,"href","/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(Az,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(Lz,"href","/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(yz,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(xz,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c($z,"href","/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(kz,"href","/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(Sz,"href","/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(Rz,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(Pz,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(Bz,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(Iz,"href","/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(Nz,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(qz,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(jz,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(Dz,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(Gz,"href","/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($v,"id","transformers.AutoModelForNextSentencePrediction"),c($v,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($v,"href","#transformers.AutoModelForNextSentencePrediction"),c(cd,"class","relative group"),c(Oz,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vz,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Xz,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zz,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(Wz,"href","/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(Qz,"href","/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(Hz,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(Uz,"href","/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(Jz,"href","/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dv,"id","transformers.AutoModelForTokenClassification"),c(Dv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dv,"href","#transformers.AutoModelForTokenClassification"),c(gd,"class","relative group"),c(Yz,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kz,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zz,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eW,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(oW,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForTokenClassification"),c(rW,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(tW,"href","/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(aW,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(nW,"href","/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineForTokenClassification"),c(sW,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(lW,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(iW,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(dW,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(cW,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(fW,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(mW,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(gW,"href","/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(hW,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(pW,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(_W,"href","/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(uW,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(bW,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(vW,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(FW,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(TW,"href","/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(MW,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(EW,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(CW,"href","/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(wW,"href","/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(AW,"href","/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(LW,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(yW,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(xW,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c($W,"href","/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(kW,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(SW,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(RW,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(PW,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(BW,"href","/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AF,"id","transformers.AutoModelForQuestionAnswering"),c(AF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AF,"href","#transformers.AutoModelForQuestionAnswering"),c(_d,"class","relative group"),c(IW,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NW,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qW,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jW,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(DW,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(GW,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(OW,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(VW,"href","/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(XW,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(zW,"href","/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(WW,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(QW,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(HW,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(UW,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(JW,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(YW,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(KW,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(ZW,"href","/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(eQ,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(oQ,"href","/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(rQ,"href","/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(tQ,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(aQ,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(nQ,"href","/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(sQ,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(lQ,"href","/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(iQ,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(dQ,"href","/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(cQ,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(fQ,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(mQ,"href","/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(gQ,"href","/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(hQ,"href","/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(pQ,"href","/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(_Q,"href","/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(uQ,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(bQ,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(vQ,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(FQ,"href","/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(TQ,"href","/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(MQ,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(EQ,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(CQ,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(wQ,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(AQ,"href","/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bT,"id","transformers.AutoModelForTableQuestionAnswering"),c(bT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bT,"href","#transformers.AutoModelForTableQuestionAnswering"),c(vd,"class","relative group"),c(LQ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yQ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xQ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($Q,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ET,"id","transformers.AutoModelForImageClassification"),c(ET,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ET,"href","#transformers.AutoModelForImageClassification"),c(Md,"class","relative group"),c(kQ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SQ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RQ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PQ,"href","/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitForImageClassification"),c(BQ,"href","/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(IQ,"href","/docs/transformers/pr_17938/en/model_doc/cvt#transformers.CvtForImageClassification"),c(NQ,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(qQ,"href","/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTForImageClassification"),c(jQ,"href","/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(DQ,"href","/docs/transformers/pr_17938/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(GQ,"href","/docs/transformers/pr_17938/en/model_doc/levit#transformers.LevitForImageClassification"),c(OQ,"href","/docs/transformers/pr_17938/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(VQ,"href","/docs/transformers/pr_17938/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(XQ,"href","/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(zQ,"href","/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(WQ,"href","/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(QQ,"href","/docs/transformers/pr_17938/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(HQ,"href","/docs/transformers/pr_17938/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(UQ,"href","/docs/transformers/pr_17938/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(JQ,"href","/docs/transformers/pr_17938/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(YQ,"href","/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinForImageClassification"),c(KQ,"href","/docs/transformers/pr_17938/en/model_doc/van#transformers.VanForImageClassification"),c(ZQ,"href","/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTForImageClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DT,"id","transformers.AutoModelForVision2Seq"),c(DT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DT,"href","#transformers.AutoModelForVision2Seq"),c(wd,"class","relative group"),c(eH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tH,"href","/docs/transformers/pr_17938/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zT,"id","transformers.AutoModelForVisualQuestionAnswering"),c(zT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zT,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(yd,"class","relative group"),c(aH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lH,"href","/docs/transformers/pr_17938/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JT,"id","transformers.AutoModelForAudioClassification"),c(JT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JT,"href","#transformers.AutoModelForAudioClassification"),c(kd,"class","relative group"),c(iH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fH,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(mH,"href","/docs/transformers/pr_17938/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(gH,"href","/docs/transformers/pr_17938/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(hH,"href","/docs/transformers/pr_17938/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(pH,"href","/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(_H,"href","/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(uH,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(bH,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(vH,"href","/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d7,"id","transformers.AutoModelForAudioFrameClassification"),c(d7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d7,"href","#transformers.AutoModelForAudioFrameClassification"),c(Pd,"class","relative group"),c(FH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EH,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(CH,"href","/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(wH,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(AH,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(LH,"href","/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b7,"id","transformers.AutoModelForCTC"),c(b7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b7,"href","#transformers.AutoModelForCTC"),c(Nd,"class","relative group"),c(yH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($H,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kH,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(SH,"href","/docs/transformers/pr_17938/en/model_doc/hubert#transformers.HubertForCTC"),c(RH,"href","/docs/transformers/pr_17938/en/model_doc/mctct#transformers.MCTCTForCTC"),c(PH,"href","/docs/transformers/pr_17938/en/model_doc/sew#transformers.SEWForCTC"),c(BH,"href","/docs/transformers/pr_17938/en/model_doc/sew-d#transformers.SEWDForCTC"),c(IH,"href","/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(NH,"href","/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(qH,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(jH,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(DH,"href","/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMForCTC"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S7,"id","transformers.AutoModelForSpeechSeq2Seq"),c(S7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S7,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Dd,"class","relative group"),c(GH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XH,"href","/docs/transformers/pr_17938/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(zH,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q7,"id","transformers.AutoModelForAudioXVector"),c(q7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q7,"href","#transformers.AutoModelForAudioXVector"),c(Vd,"class","relative group"),c(WH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UH,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(JH,"href","/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(YH,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(KH,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(ZH,"href","/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMForXVector"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q7,"id","transformers.AutoModelForMaskedImageModeling"),c(Q7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q7,"href","#transformers.AutoModelForMaskedImageModeling"),c(Wd,"class","relative group"),c(eU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tU,"href","/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(aU,"href","/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(nU,"href","/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e8,"id","transformers.AutoModelForObjectDetection"),c(e8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e8,"href","#transformers.AutoModelForObjectDetection"),c(Jd,"class","relative group"),c(sU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dU,"href","/docs/transformers/pr_17938/en/model_doc/detr#transformers.DetrForObjectDetection"),c(cU,"href","/docs/transformers/pr_17938/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s8,"id","transformers.AutoModelForImageSegmentation"),c(s8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s8,"href","#transformers.AutoModelForImageSegmentation"),c(Zd,"class","relative group"),c(fU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hU,"href","/docs/transformers/pr_17938/en/model_doc/detr#transformers.DetrForSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f8,"id","transformers.AutoModelForSemanticSegmentation"),c(f8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f8,"href","#transformers.AutoModelForSemanticSegmentation"),c(rc,"class","relative group"),c(pU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_U,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bU,"href","/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(vU,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(FU,"href","/docs/transformers/pr_17938/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(TU,"href","/docs/transformers/pr_17938/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(MU,"href","/docs/transformers/pr_17938/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F8,"id","transformers.AutoModelForInstanceSegmentation"),c(F8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F8,"href","#transformers.AutoModelForInstanceSegmentation"),c(nc,"class","relative group"),c(EU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AU,"href","/docs/transformers/pr_17938/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w8,"id","transformers.TFAutoModel"),c(w8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w8,"href","#transformers.TFAutoModel"),c(ic,"class","relative group"),c(LU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($U,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertModel"),c(kU,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.TFBartModel"),c(SU,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertModel"),c(RU,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(PU,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(BU,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertModel"),c(IU,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.TFCLIPModel"),c(NU,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertModel"),c(qU,"href","/docs/transformers/pr_17938/en/model_doc/convnext#transformers.TFConvNextModel"),c(jU,"href","/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.TFCTRLModel"),c(DU,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(GU,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.TFDebertaModel"),c(OU,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(VU,"href","/docs/transformers/pr_17938/en/model_doc/deit#transformers.TFDeiTModel"),c(XU,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(zU,"href","/docs/transformers/pr_17938/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(WU,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraModel"),c(QU,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(HU,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelModel"),c(UU,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(JU,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.TFGPT2Model"),c(YU,"href","/docs/transformers/pr_17938/en/model_doc/gptj#transformers.TFGPTJModel"),c(KU,"href","/docs/transformers/pr_17938/en/model_doc/hubert#transformers.TFHubertModel"),c(ZU,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(eJ,"href","/docs/transformers/pr_17938/en/model_doc/led#transformers.TFLEDModel"),c(oJ,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerModel"),c(rJ,"href","/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.TFLxmertModel"),c(tJ,"href","/docs/transformers/pr_17938/en/model_doc/marian#transformers.TFMarianModel"),c(aJ,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.TFMBartModel"),c(nJ,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(sJ,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetModel"),c(lJ,"href","/docs/transformers/pr_17938/en/model_doc/mt5#transformers.TFMT5Model"),c(iJ,"href","/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(dJ,"href","/docs/transformers/pr_17938/en/model_doc/opt#transformers.TFOPTModel"),c(cJ,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.TFPegasusModel"),c(fJ,"href","/docs/transformers/pr_17938/en/model_doc/regnet#transformers.TFRegNetModel"),c(mJ,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertModel"),c(gJ,"href","/docs/transformers/pr_17938/en/model_doc/resnet#transformers.TFResNetModel"),c(hJ,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaModel"),c(pJ,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerModel"),c(_J,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(uJ,"href","/docs/transformers/pr_17938/en/model_doc/swin#transformers.TFSwinModel"),c(bJ,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.TFT5Model"),c(vJ,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TFTapasModel"),c(FJ,"href","/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(TJ,"href","/docs/transformers/pr_17938/en/model_doc/vit#transformers.TFViTModel"),c(MJ,"href","/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(EJ,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(CJ,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMModel"),c(wJ,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(AJ,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E9,"id","transformers.TFAutoModelForPreTraining"),c(E9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E9,"href","#transformers.TFAutoModelForPreTraining"),c(fc,"class","relative group"),c(LJ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yJ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xJ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($J,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(kJ,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(SJ,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForPreTraining"),c(RJ,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(PJ,"href","/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(BJ,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(IJ,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(NJ,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(qJ,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(jJ,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(DJ,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(GJ,"href","/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(OJ,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(VJ,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(XJ,"href","/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(zJ,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(WJ,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(QJ,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(HJ,"href","/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(UJ,"href","/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(JJ,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(YJ,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(KJ,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U9,"id","transformers.TFAutoModelForCausalLM"),c(U9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U9,"href","#transformers.TFAutoModelForCausalLM"),c(hc,"class","relative group"),c(ZJ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eY,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oY,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rY,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(tY,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(aY,"href","/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(nY,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(sY,"href","/docs/transformers/pr_17938/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(lY,"href","/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(iY,"href","/docs/transformers/pr_17938/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(dY,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(cY,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(fY,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(mY,"href","/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(gY,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(hY,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fM,"id","transformers.TFAutoModelForImageClassification"),c(fM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fM,"href","#transformers.TFAutoModelForImageClassification"),c(uc,"class","relative group"),c(pY,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_Y,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uY,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bY,"href","/docs/transformers/pr_17938/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(vY,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(FY,"href","/docs/transformers/pr_17938/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(TY,"href","/docs/transformers/pr_17938/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(MY,"href","/docs/transformers/pr_17938/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(EY,"href","/docs/transformers/pr_17938/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(CY,"href","/docs/transformers/pr_17938/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(wY,"href","/docs/transformers/pr_17938/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FM,"id","transformers.TFAutoModelForMaskedLM"),c(FM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FM,"href","#transformers.TFAutoModelForMaskedLM"),c(Fc,"class","relative group"),c(AY,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LY,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yY,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xY,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c($Y,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(kY,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(SY,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(RY,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(PY,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(BY,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(IY,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(NY,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(qY,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(jY,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(DY,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(GY,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(OY,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(VY,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(XY,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(zY,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(WY,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(QY,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(HY,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(VM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Ec,"class","relative group"),c(UY,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JY,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YY,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KY,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(ZY,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(eK,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(oK,"href","/docs/transformers/pr_17938/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(rK,"href","/docs/transformers/pr_17938/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(tK,"href","/docs/transformers/pr_17938/en/model_doc/marian#transformers.TFMarianMTModel"),c(aK,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(nK,"href","/docs/transformers/pr_17938/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(sK,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(lK,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r4,"id","transformers.TFAutoModelForSequenceClassification"),c(r4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r4,"href","#transformers.TFAutoModelForSequenceClassification"),c(Ac,"class","relative group"),c(iK,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dK,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cK,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fK,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(mK,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(gK,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(hK,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(pK,"href","/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(_K,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(uK,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(bK,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(vK,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(FK,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(TK,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(MK,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(EK,"href","/docs/transformers/pr_17938/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(CK,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(wK,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(AK,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(LK,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(yK,"href","/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(xK,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c($K,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(kK,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(SK,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(RK,"href","/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(PK,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(BK,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(IK,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k4,"id","transformers.TFAutoModelForMultipleChoice"),c(k4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k4,"href","#transformers.TFAutoModelForMultipleChoice"),c(xc,"class","relative group"),c(NK,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qK,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jK,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DK,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(GK,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(OK,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(VK,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(XK,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(zK,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(WK,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(QK,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(HK,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(UK,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(JK,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(YK,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(KK,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(ZK,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(eZ,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(oZ,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(rZ,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y4,"id","transformers.TFAutoModelForNextSentencePrediction"),c(Y4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y4,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Sc,"class","relative group"),c(tZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sZ,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(lZ,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(rE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Bc,"class","relative group"),c(iZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fZ,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sE,"id","transformers.TFAutoModelForTokenClassification"),c(sE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sE,"href","#transformers.TFAutoModelForTokenClassification"),c(qc,"class","relative group"),c(mZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pZ,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(_Z,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(uZ,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(bZ,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(vZ,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(FZ,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(TZ,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(MZ,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(EZ,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(CZ,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(wZ,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(AZ,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(LZ,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(yZ,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(xZ,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c($Z,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(kZ,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(SZ,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(RZ,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(PZ,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xE,"id","transformers.TFAutoModelForQuestionAnswering"),c(xE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Gc,"class","relative group"),c(BZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qZ,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(jZ,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(DZ,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(GZ,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(OZ,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(VZ,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(XZ,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(zZ,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(WZ,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(QZ,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(HZ,"href","/docs/transformers/pr_17938/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(UZ,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(JZ,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(YZ,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(KZ,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(ZZ,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(eee,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(oee,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(ree,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(tee,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KE,"id","transformers.TFAutoModelForVision2Seq"),c(KE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KE,"href","#transformers.TFAutoModelForVision2Seq"),c(Xc,"class","relative group"),c(aee,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nee,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(see,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lee,"href","/docs/transformers/pr_17938/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(rC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Qc,"class","relative group"),c(iee,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dee,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cee,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fee,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sC,"id","transformers.FlaxAutoModel"),c(sC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sC,"href","#transformers.FlaxAutoModel"),c(Jc,"class","relative group"),c(mee,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gee,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hee,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pee,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertModel"),c(_ee,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartModel"),c(uee,"href","/docs/transformers/pr_17938/en/model_doc/beit#transformers.FlaxBeitModel"),c(bee,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertModel"),c(vee,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(Fee,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(Tee,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(Mee,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.FlaxCLIPModel"),c(Eee,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(Cee,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraModel"),c(wee,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(Aee,"href","/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(Lee,"href","/docs/transformers/pr_17938/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(yee,"href","/docs/transformers/pr_17938/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(xee,"href","/docs/transformers/pr_17938/en/model_doc/marian#transformers.FlaxMarianModel"),c($ee,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartModel"),c(kee,"href","/docs/transformers/pr_17938/en/model_doc/mt5#transformers.FlaxMT5Model"),c(See,"href","/docs/transformers/pr_17938/en/model_doc/opt#transformers.FlaxOPTModel"),c(Ree,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(Pee,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(Bee,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(Iee,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.FlaxT5Model"),c(Nee,"href","/docs/transformers/pr_17938/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(qee,"href","/docs/transformers/pr_17938/en/model_doc/vit#transformers.FlaxViTModel"),c(jee,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(Dee,"href","/docs/transformers/pr_17938/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(Gee,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IC,"id","transformers.FlaxAutoModelForCausalLM"),c(IC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IC,"href","#transformers.FlaxAutoModelForCausalLM"),c(Zc,"class","relative group"),c(Oee,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vee,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Xee,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zee,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(Wee,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(Qee,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(Hee,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(Uee,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(Jee,"href","/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(Yee,"href","/docs/transformers/pr_17938/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(Kee,"href","/docs/transformers/pr_17938/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(Zee,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(eoe,"href","/docs/transformers/pr_17938/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UC,"id","transformers.FlaxAutoModelForPreTraining"),c(UC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UC,"href","#transformers.FlaxAutoModelForPreTraining"),c(rf,"class","relative group"),c(ooe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(roe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(toe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aoe,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(noe,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(soe,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(loe,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(ioe,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(doe,"href","/docs/transformers/pr_17938/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(coe,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(foe,"href","/docs/transformers/pr_17938/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(moe,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(goe,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(hoe,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(poe,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(_oe,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f5,"id","transformers.FlaxAutoModelForMaskedLM"),c(f5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(nf,"class","relative group"),c(uoe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(boe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(voe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Foe,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(Toe,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Moe,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(Eoe,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(Coe,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(woe,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(Aoe,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Loe,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(yoe,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(xoe,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(C5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(df,"class","relative group"),c($oe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(koe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Soe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Roe,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Poe,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(Boe,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(Ioe,"href","/docs/transformers/pr_17938/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(Noe,"href","/docs/transformers/pr_17938/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(qoe,"href","/docs/transformers/pr_17938/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(joe,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Doe,"href","/docs/transformers/pr_17938/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Goe,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Ooe,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(N5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(mf,"class","relative group"),c(Voe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xoe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zoe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Woe,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Qoe,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Hoe,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Uoe,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(Joe,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(Yoe,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Koe,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Zoe,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(ere,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(ore,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(J5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(pf,"class","relative group"),c(rre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(are,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nre,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(sre,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(lre,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(ire,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(dre,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(cre,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(fre,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(mre,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(gre,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(hre,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d0,"id","transformers.FlaxAutoModelForTokenClassification"),c(d0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d0,"href","#transformers.FlaxAutoModelForTokenClassification"),c(bf,"class","relative group"),c(pre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_re,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ure,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bre,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(vre,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(Fre,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(Tre,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(Mre,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(Ere,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(Cre,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(wre,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F0,"id","transformers.FlaxAutoModelForMultipleChoice"),c(F0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F0,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Tf,"class","relative group"),c(Are,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xre,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c($re,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(kre,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Sre,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Rre,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Pre,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(Bre,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Ire,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k0,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(k0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k0,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Cf,"class","relative group"),c(Nre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dre,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B0,"id","transformers.FlaxAutoModelForImageClassification"),c(B0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B0,"href","#transformers.FlaxAutoModelForImageClassification"),c(Lf,"class","relative group"),c(Gre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ore,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xre,"href","/docs/transformers/pr_17938/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(zre,"href","/docs/transformers/pr_17938/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D0,"id","transformers.FlaxAutoModelForVision2Seq"),c(D0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D0,"href","#transformers.FlaxAutoModelForVision2Seq"),c($f,"class","relative group"),c(Wre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ure,"href","/docs/transformers/pr_17938/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Co),e(Co,xi),b(f,If,u),b(f,lt,u),e(lt,$i),e(lt,ki),e(ki,i6),e(lt,Nf),b(f,Oe,u),b(f,Qe,u),e(Qe,Si),e(Qe,Pn),e(Pn,d6),e(Qe,Bn),e(Qe,In),e(In,c6),e(Qe,Ri),e(Qe,Nn),e(Nn,f6),e(Qe,Pi),b(f,qf,u),M(Sa,f,u),b(f,He,u),b(f,Ae,u),e(Ae,zS),e(Ae,Bi),e(Bi,WS),e(Ae,QS),b(f,wo,u),b(f,Ra,u),e(Ra,HS),e(Ra,jf),e(jf,US),e(Ra,WHe),b(f,kXe,u),b(f,Ii,u),e(Ii,Df),e(Df,Xae),M(m6,Xae,null),e(Ii,QHe),e(Ii,zae),e(zae,HHe),b(f,SXe,u),b(f,qn,u),e(qn,UHe),e(qn,Wae),e(Wae,JHe),e(qn,YHe),e(qn,Qae),e(Qae,KHe),e(qn,ZHe),b(f,RXe,u),M(g6,f,u),b(f,PXe,u),b(f,JS,u),e(JS,eUe),b(f,BXe,u),M(Gf,f,u),b(f,IXe,u),b(f,Ni,u),e(Ni,Of),e(Of,Hae),M(h6,Hae,null),e(Ni,oUe),e(Ni,Uae),e(Uae,rUe),b(f,NXe,u),b(f,Ao,u),M(p6,Ao,null),e(Ao,tUe),e(Ao,_6),e(_6,aUe),e(_6,YS),e(YS,nUe),e(_6,sUe),e(Ao,lUe),e(Ao,u6),e(u6,iUe),e(u6,Jae),e(Jae,dUe),e(u6,cUe),e(Ao,fUe),e(Ao,Lr),M(b6,Lr,null),e(Lr,mUe),e(Lr,Yae),e(Yae,gUe),e(Lr,hUe),e(Lr,qi),e(qi,pUe),e(qi,Kae),e(Kae,_Ue),e(qi,uUe),e(qi,Zae),e(Zae,bUe),e(qi,vUe),e(Lr,FUe),e(Lr,A),e(A,Vf),e(Vf,ene),e(ene,TUe),e(Vf,MUe),e(Vf,KS),e(KS,EUe),e(Vf,CUe),e(A,wUe),e(A,Xf),e(Xf,one),e(one,AUe),e(Xf,LUe),e(Xf,ZS),e(ZS,yUe),e(Xf,xUe),e(A,$Ue),e(A,zf),e(zf,rne),e(rne,kUe),e(zf,SUe),e(zf,eR),e(eR,RUe),e(zf,PUe),e(A,BUe),e(A,Wf),e(Wf,tne),e(tne,IUe),e(Wf,NUe),e(Wf,oR),e(oR,qUe),e(Wf,jUe),e(A,DUe),e(A,Qf),e(Qf,ane),e(ane,GUe),e(Qf,OUe),e(Qf,rR),e(rR,VUe),e(Qf,XUe),e(A,zUe),e(A,Hf),e(Hf,nne),e(nne,WUe),e(Hf,QUe),e(Hf,tR),e(tR,HUe),e(Hf,UUe),e(A,JUe),e(A,Uf),e(Uf,sne),e(sne,YUe),e(Uf,KUe),e(Uf,aR),e(aR,ZUe),e(Uf,eJe),e(A,oJe),e(A,Jf),e(Jf,lne),e(lne,rJe),e(Jf,tJe),e(Jf,nR),e(nR,aJe),e(Jf,nJe),e(A,sJe),e(A,Yf),e(Yf,ine),e(ine,lJe),e(Yf,iJe),e(Yf,sR),e(sR,dJe),e(Yf,cJe),e(A,fJe),e(A,Kf),e(Kf,dne),e(dne,mJe),e(Kf,gJe),e(Kf,lR),e(lR,hJe),e(Kf,pJe),e(A,_Je),e(A,Zf),e(Zf,cne),e(cne,uJe),e(Zf,bJe),e(Zf,iR),e(iR,vJe),e(Zf,FJe),e(A,TJe),e(A,em),e(em,fne),e(fne,MJe),e(em,EJe),e(em,dR),e(dR,CJe),e(em,wJe),e(A,AJe),e(A,om),e(om,mne),e(mne,LJe),e(om,yJe),e(om,cR),e(cR,xJe),e(om,$Je),e(A,kJe),e(A,rm),e(rm,gne),e(gne,SJe),e(rm,RJe),e(rm,fR),e(fR,PJe),e(rm,BJe),e(A,IJe),e(A,tm),e(tm,hne),e(hne,NJe),e(tm,qJe),e(tm,mR),e(mR,jJe),e(tm,DJe),e(A,GJe),e(A,am),e(am,pne),e(pne,OJe),e(am,VJe),e(am,gR),e(gR,XJe),e(am,zJe),e(A,WJe),e(A,nm),e(nm,_ne),e(_ne,QJe),e(nm,HJe),e(nm,hR),e(hR,UJe),e(nm,JJe),e(A,YJe),e(A,sm),e(sm,une),e(une,KJe),e(sm,ZJe),e(sm,pR),e(pR,eYe),e(sm,oYe),e(A,rYe),e(A,lm),e(lm,bne),e(bne,tYe),e(lm,aYe),e(lm,_R),e(_R,nYe),e(lm,sYe),e(A,lYe),e(A,im),e(im,vne),e(vne,iYe),e(im,dYe),e(im,uR),e(uR,cYe),e(im,fYe),e(A,mYe),e(A,dm),e(dm,Fne),e(Fne,gYe),e(dm,hYe),e(dm,bR),e(bR,pYe),e(dm,_Ye),e(A,uYe),e(A,cm),e(cm,Tne),e(Tne,bYe),e(cm,vYe),e(cm,vR),e(vR,FYe),e(cm,TYe),e(A,MYe),e(A,fm),e(fm,Mne),e(Mne,EYe),e(fm,CYe),e(fm,FR),e(FR,wYe),e(fm,AYe),e(A,LYe),e(A,mm),e(mm,Ene),e(Ene,yYe),e(mm,xYe),e(mm,TR),e(TR,$Ye),e(mm,kYe),e(A,SYe),e(A,gm),e(gm,Cne),e(Cne,RYe),e(gm,PYe),e(gm,MR),e(MR,BYe),e(gm,IYe),e(A,NYe),e(A,hm),e(hm,wne),e(wne,qYe),e(hm,jYe),e(hm,ER),e(ER,DYe),e(hm,GYe),e(A,OYe),e(A,pm),e(pm,Ane),e(Ane,VYe),e(pm,XYe),e(pm,CR),e(CR,zYe),e(pm,WYe),e(A,QYe),e(A,_m),e(_m,Lne),e(Lne,HYe),e(_m,UYe),e(_m,wR),e(wR,JYe),e(_m,YYe),e(A,KYe),e(A,um),e(um,yne),e(yne,ZYe),e(um,eKe),e(um,AR),e(AR,oKe),e(um,rKe),e(A,tKe),e(A,bm),e(bm,xne),e(xne,aKe),e(bm,nKe),e(bm,LR),e(LR,sKe),e(bm,lKe),e(A,iKe),e(A,vm),e(vm,$ne),e($ne,dKe),e(vm,cKe),e(vm,yR),e(yR,fKe),e(vm,mKe),e(A,gKe),e(A,Fm),e(Fm,kne),e(kne,hKe),e(Fm,pKe),e(Fm,xR),e(xR,_Ke),e(Fm,uKe),e(A,bKe),e(A,Tm),e(Tm,Sne),e(Sne,vKe),e(Tm,FKe),e(Tm,$R),e($R,TKe),e(Tm,MKe),e(A,EKe),e(A,Mm),e(Mm,Rne),e(Rne,CKe),e(Mm,wKe),e(Mm,kR),e(kR,AKe),e(Mm,LKe),e(A,yKe),e(A,Em),e(Em,Pne),e(Pne,xKe),e(Em,$Ke),e(Em,SR),e(SR,kKe),e(Em,SKe),e(A,RKe),e(A,Cm),e(Cm,Bne),e(Bne,PKe),e(Cm,BKe),e(Cm,RR),e(RR,IKe),e(Cm,NKe),e(A,qKe),e(A,wm),e(wm,Ine),e(Ine,jKe),e(wm,DKe),e(wm,PR),e(PR,GKe),e(wm,OKe),e(A,VKe),e(A,Am),e(Am,Nne),e(Nne,XKe),e(Am,zKe),e(Am,BR),e(BR,WKe),e(Am,QKe),e(A,HKe),e(A,Lm),e(Lm,qne),e(qne,UKe),e(Lm,JKe),e(Lm,IR),e(IR,YKe),e(Lm,KKe),e(A,ZKe),e(A,ym),e(ym,jne),e(jne,eZe),e(ym,oZe),e(ym,NR),e(NR,rZe),e(ym,tZe),e(A,aZe),e(A,xm),e(xm,Dne),e(Dne,nZe),e(xm,sZe),e(xm,qR),e(qR,lZe),e(xm,iZe),e(A,dZe),e(A,$m),e($m,Gne),e(Gne,cZe),e($m,fZe),e($m,jR),e(jR,mZe),e($m,gZe),e(A,hZe),e(A,km),e(km,One),e(One,pZe),e(km,_Ze),e(km,DR),e(DR,uZe),e(km,bZe),e(A,vZe),e(A,Sm),e(Sm,Vne),e(Vne,FZe),e(Sm,TZe),e(Sm,GR),e(GR,MZe),e(Sm,EZe),e(A,CZe),e(A,Rm),e(Rm,Xne),e(Xne,wZe),e(Rm,AZe),e(Rm,OR),e(OR,LZe),e(Rm,yZe),e(A,xZe),e(A,Pm),e(Pm,zne),e(zne,$Ze),e(Pm,kZe),e(Pm,VR),e(VR,SZe),e(Pm,RZe),e(A,PZe),e(A,Bm),e(Bm,Wne),e(Wne,BZe),e(Bm,IZe),e(Bm,XR),e(XR,NZe),e(Bm,qZe),e(A,jZe),e(A,Im),e(Im,Qne),e(Qne,DZe),e(Im,GZe),e(Im,zR),e(zR,OZe),e(Im,VZe),e(A,XZe),e(A,Nm),e(Nm,Hne),e(Hne,zZe),e(Nm,WZe),e(Nm,WR),e(WR,QZe),e(Nm,HZe),e(A,UZe),e(A,qm),e(qm,Une),e(Une,JZe),e(qm,YZe),e(qm,QR),e(QR,KZe),e(qm,ZZe),e(A,eeo),e(A,jm),e(jm,Jne),e(Jne,oeo),e(jm,reo),e(jm,HR),e(HR,teo),e(jm,aeo),e(A,neo),e(A,Dm),e(Dm,Yne),e(Yne,seo),e(Dm,leo),e(Dm,UR),e(UR,ieo),e(Dm,deo),e(A,ceo),e(A,Gm),e(Gm,Kne),e(Kne,feo),e(Gm,meo),e(Gm,JR),e(JR,geo),e(Gm,heo),e(A,peo),e(A,Om),e(Om,Zne),e(Zne,_eo),e(Om,ueo),e(Om,YR),e(YR,beo),e(Om,veo),e(A,Feo),e(A,Vm),e(Vm,ese),e(ese,Teo),e(Vm,Meo),e(Vm,KR),e(KR,Eeo),e(Vm,Ceo),e(A,weo),e(A,Xm),e(Xm,ose),e(ose,Aeo),e(Xm,Leo),e(Xm,ZR),e(ZR,yeo),e(Xm,xeo),e(A,$eo),e(A,zm),e(zm,rse),e(rse,keo),e(zm,Seo),e(zm,eP),e(eP,Reo),e(zm,Peo),e(A,Beo),e(A,Wm),e(Wm,tse),e(tse,Ieo),e(Wm,Neo),e(Wm,oP),e(oP,qeo),e(Wm,jeo),e(A,Deo),e(A,Qm),e(Qm,ase),e(ase,Geo),e(Qm,Oeo),e(Qm,rP),e(rP,Veo),e(Qm,Xeo),e(A,zeo),e(A,Hm),e(Hm,nse),e(nse,Weo),e(Hm,Qeo),e(Hm,tP),e(tP,Heo),e(Hm,Ueo),e(A,Jeo),e(A,Um),e(Um,sse),e(sse,Yeo),e(Um,Keo),e(Um,aP),e(aP,Zeo),e(Um,eoo),e(A,ooo),e(A,Jm),e(Jm,lse),e(lse,roo),e(Jm,too),e(Jm,nP),e(nP,aoo),e(Jm,noo),e(A,soo),e(A,Ym),e(Ym,ise),e(ise,loo),e(Ym,ioo),e(Ym,sP),e(sP,doo),e(Ym,coo),e(A,foo),e(A,Km),e(Km,dse),e(dse,moo),e(Km,goo),e(Km,lP),e(lP,hoo),e(Km,poo),e(A,_oo),e(A,Zm),e(Zm,cse),e(cse,uoo),e(Zm,boo),e(Zm,iP),e(iP,voo),e(Zm,Foo),e(A,Too),e(A,eg),e(eg,fse),e(fse,Moo),e(eg,Eoo),e(eg,dP),e(dP,Coo),e(eg,woo),e(A,Aoo),e(A,og),e(og,mse),e(mse,Loo),e(og,yoo),e(og,cP),e(cP,xoo),e(og,$oo),e(A,koo),e(A,rg),e(rg,gse),e(gse,Soo),e(rg,Roo),e(rg,fP),e(fP,Poo),e(rg,Boo),e(A,Ioo),e(A,tg),e(tg,hse),e(hse,Noo),e(tg,qoo),e(tg,mP),e(mP,joo),e(tg,Doo),e(A,Goo),e(A,ag),e(ag,pse),e(pse,Ooo),e(ag,Voo),e(ag,gP),e(gP,Xoo),e(ag,zoo),e(A,Woo),e(A,ng),e(ng,_se),e(_se,Qoo),e(ng,Hoo),e(ng,hP),e(hP,Uoo),e(ng,Joo),e(A,Yoo),e(A,sg),e(sg,use),e(use,Koo),e(sg,Zoo),e(sg,pP),e(pP,ero),e(sg,oro),e(A,rro),e(A,lg),e(lg,bse),e(bse,tro),e(lg,aro),e(lg,_P),e(_P,nro),e(lg,sro),e(A,lro),e(A,ig),e(ig,vse),e(vse,iro),e(ig,dro),e(ig,uP),e(uP,cro),e(ig,fro),e(A,mro),e(A,dg),e(dg,Fse),e(Fse,gro),e(dg,hro),e(dg,bP),e(bP,pro),e(dg,_ro),e(A,uro),e(A,cg),e(cg,Tse),e(Tse,bro),e(cg,vro),e(cg,vP),e(vP,Fro),e(cg,Tro),e(A,Mro),e(A,fg),e(fg,Mse),e(Mse,Ero),e(fg,Cro),e(fg,FP),e(FP,wro),e(fg,Aro),e(A,Lro),e(A,mg),e(mg,Ese),e(Ese,yro),e(mg,xro),e(mg,TP),e(TP,$ro),e(mg,kro),e(A,Sro),e(A,gg),e(gg,Cse),e(Cse,Rro),e(gg,Pro),e(gg,MP),e(MP,Bro),e(gg,Iro),e(A,Nro),e(A,hg),e(hg,wse),e(wse,qro),e(hg,jro),e(hg,EP),e(EP,Dro),e(hg,Gro),e(A,Oro),e(A,pg),e(pg,Ase),e(Ase,Vro),e(pg,Xro),e(pg,CP),e(CP,zro),e(pg,Wro),e(A,Qro),e(A,_g),e(_g,Lse),e(Lse,Hro),e(_g,Uro),e(_g,wP),e(wP,Jro),e(_g,Yro),e(A,Kro),e(A,ug),e(ug,yse),e(yse,Zro),e(ug,eto),e(ug,AP),e(AP,oto),e(ug,rto),e(A,tto),e(A,bg),e(bg,xse),e(xse,ato),e(bg,nto),e(bg,LP),e(LP,sto),e(bg,lto),e(A,ito),e(A,vg),e(vg,$se),e($se,dto),e(vg,cto),e(vg,yP),e(yP,fto),e(vg,mto),e(A,gto),e(A,Fg),e(Fg,kse),e(kse,hto),e(Fg,pto),e(Fg,xP),e(xP,_to),e(Fg,uto),e(A,bto),e(A,Tg),e(Tg,Sse),e(Sse,vto),e(Tg,Fto),e(Tg,$P),e($P,Tto),e(Tg,Mto),e(A,Eto),e(A,Mg),e(Mg,Rse),e(Rse,Cto),e(Mg,wto),e(Mg,kP),e(kP,Ato),e(Mg,Lto),e(A,yto),e(A,Eg),e(Eg,Pse),e(Pse,xto),e(Eg,$to),e(Eg,SP),e(SP,kto),e(Eg,Sto),e(A,Rto),e(A,Cg),e(Cg,Bse),e(Bse,Pto),e(Cg,Bto),e(Cg,RP),e(RP,Ito),e(Cg,Nto),e(A,qto),e(A,wg),e(wg,Ise),e(Ise,jto),e(wg,Dto),e(wg,PP),e(PP,Gto),e(wg,Oto),e(A,Vto),e(A,Ag),e(Ag,Nse),e(Nse,Xto),e(Ag,zto),e(Ag,BP),e(BP,Wto),e(Ag,Qto),e(A,Hto),e(A,Lg),e(Lg,qse),e(qse,Uto),e(Lg,Jto),e(Lg,IP),e(IP,Yto),e(Lg,Kto),e(A,Zto),e(A,yg),e(yg,jse),e(jse,eao),e(yg,oao),e(yg,NP),e(NP,rao),e(yg,tao),e(A,aao),e(A,xg),e(xg,Dse),e(Dse,nao),e(xg,sao),e(xg,qP),e(qP,lao),e(xg,iao),e(A,dao),e(A,$g),e($g,Gse),e(Gse,cao),e($g,fao),e($g,jP),e(jP,mao),e($g,gao),e(A,hao),e(A,kg),e(kg,Ose),e(Ose,pao),e(kg,_ao),e(kg,DP),e(DP,uao),e(kg,bao),e(A,vao),e(A,Sg),e(Sg,Vse),e(Vse,Fao),e(Sg,Tao),e(Sg,GP),e(GP,Mao),e(Sg,Eao),e(A,Cao),e(A,Rg),e(Rg,Xse),e(Xse,wao),e(Rg,Aao),e(Rg,OP),e(OP,Lao),e(Rg,yao),e(A,xao),e(A,Pg),e(Pg,zse),e(zse,$ao),e(Pg,kao),e(Pg,VP),e(VP,Sao),e(Pg,Rao),e(A,Pao),e(A,Bg),e(Bg,Wse),e(Wse,Bao),e(Bg,Iao),e(Bg,XP),e(XP,Nao),e(Bg,qao),e(A,jao),e(A,Ig),e(Ig,Qse),e(Qse,Dao),e(Ig,Gao),e(Ig,zP),e(zP,Oao),e(Ig,Vao),e(A,Xao),e(A,Ng),e(Ng,Hse),e(Hse,zao),e(Ng,Wao),e(Ng,WP),e(WP,Qao),e(Ng,Hao),e(A,Uao),e(A,qg),e(qg,Use),e(Use,Jao),e(qg,Yao),e(qg,QP),e(QP,Kao),e(qg,Zao),e(A,eno),e(A,jg),e(jg,Jse),e(Jse,ono),e(jg,rno),e(jg,HP),e(HP,tno),e(jg,ano),e(A,nno),e(A,Dg),e(Dg,Yse),e(Yse,sno),e(Dg,lno),e(Dg,UP),e(UP,ino),e(Dg,dno),e(A,cno),e(A,Gg),e(Gg,Kse),e(Kse,fno),e(Gg,mno),e(Gg,JP),e(JP,gno),e(Gg,hno),e(A,pno),e(A,Og),e(Og,Zse),e(Zse,_no),e(Og,uno),e(Og,YP),e(YP,bno),e(Og,vno),e(A,Fno),e(A,Vg),e(Vg,ele),e(ele,Tno),e(Vg,Mno),e(Vg,KP),e(KP,Eno),e(Vg,Cno),e(A,wno),e(A,Xg),e(Xg,ole),e(ole,Ano),e(Xg,Lno),e(Xg,ZP),e(ZP,yno),e(Xg,xno),e(A,$no),e(A,zg),e(zg,rle),e(rle,kno),e(zg,Sno),e(zg,eB),e(eB,Rno),e(zg,Pno),e(A,Bno),e(A,Wg),e(Wg,tle),e(tle,Ino),e(Wg,Nno),e(Wg,oB),e(oB,qno),e(Wg,jno),e(A,Dno),e(A,Qg),e(Qg,ale),e(ale,Gno),e(Qg,Ono),e(Qg,rB),e(rB,Vno),e(Qg,Xno),e(A,zno),e(A,Hg),e(Hg,nle),e(nle,Wno),e(Hg,Qno),e(Hg,tB),e(tB,Hno),e(Hg,Uno),e(A,Jno),e(A,Ug),e(Ug,sle),e(sle,Yno),e(Ug,Kno),e(Ug,aB),e(aB,Zno),e(Ug,eso),e(A,oso),e(A,Jg),e(Jg,lle),e(lle,rso),e(Jg,tso),e(Jg,nB),e(nB,aso),e(Jg,nso),e(A,sso),e(A,Yg),e(Yg,ile),e(ile,lso),e(Yg,iso),e(Yg,sB),e(sB,dso),e(Yg,cso),e(A,fso),e(A,Kg),e(Kg,dle),e(dle,mso),e(Kg,gso),e(Kg,lB),e(lB,hso),e(Kg,pso),e(A,_so),e(A,Zg),e(Zg,cle),e(cle,uso),e(Zg,bso),e(Zg,iB),e(iB,vso),e(Zg,Fso),e(Lr,Tso),M(eh,Lr,null),e(Ao,Mso),e(Ao,oh),M(v6,oh,null),e(oh,Eso),e(oh,fle),e(fle,Cso),b(f,qXe,u),b(f,ji,u),e(ji,rh),e(rh,mle),M(F6,mle,null),e(ji,wso),e(ji,gle),e(gle,Aso),b(f,jXe,u),b(f,Lo,u),M(T6,Lo,null),e(Lo,Lso),e(Lo,M6),e(M6,yso),e(M6,dB),e(dB,xso),e(M6,$so),e(Lo,kso),e(Lo,E6),e(E6,Sso),e(E6,hle),e(hle,Rso),e(E6,Pso),e(Lo,Bso),e(Lo,yr),M(C6,yr,null),e(yr,Iso),e(yr,ple),e(ple,Nso),e(yr,qso),e(yr,Pa),e(Pa,jso),e(Pa,_le),e(_le,Dso),e(Pa,Gso),e(Pa,ule),e(ule,Oso),e(Pa,Vso),e(Pa,ble),e(ble,Xso),e(Pa,zso),e(yr,Wso),e(yr,k),e(k,jn),e(jn,vle),e(vle,Qso),e(jn,Hso),e(jn,cB),e(cB,Uso),e(jn,Jso),e(jn,fB),e(fB,Yso),e(jn,Kso),e(k,Zso),e(k,Dn),e(Dn,Fle),e(Fle,elo),e(Dn,olo),e(Dn,mB),e(mB,rlo),e(Dn,tlo),e(Dn,gB),e(gB,alo),e(Dn,nlo),e(k,slo),e(k,Gn),e(Gn,Tle),e(Tle,llo),e(Gn,ilo),e(Gn,hB),e(hB,dlo),e(Gn,clo),e(Gn,pB),e(pB,flo),e(Gn,mlo),e(k,glo),e(k,th),e(th,Mle),e(Mle,hlo),e(th,plo),e(th,_B),e(_B,_lo),e(th,ulo),e(k,blo),e(k,On),e(On,Ele),e(Ele,vlo),e(On,Flo),e(On,uB),e(uB,Tlo),e(On,Mlo),e(On,bB),e(bB,Elo),e(On,Clo),e(k,wlo),e(k,ah),e(ah,Cle),e(Cle,Alo),e(ah,Llo),e(ah,vB),e(vB,ylo),e(ah,xlo),e(k,$lo),e(k,nh),e(nh,wle),e(wle,klo),e(nh,Slo),e(nh,FB),e(FB,Rlo),e(nh,Plo),e(k,Blo),e(k,sh),e(sh,Ale),e(Ale,Ilo),e(sh,Nlo),e(sh,TB),e(TB,qlo),e(sh,jlo),e(k,Dlo),e(k,Vn),e(Vn,Lle),e(Lle,Glo),e(Vn,Olo),e(Vn,MB),e(MB,Vlo),e(Vn,Xlo),e(Vn,EB),e(EB,zlo),e(Vn,Wlo),e(k,Qlo),e(k,Xn),e(Xn,yle),e(yle,Hlo),e(Xn,Ulo),e(Xn,CB),e(CB,Jlo),e(Xn,Ylo),e(Xn,wB),e(wB,Klo),e(Xn,Zlo),e(k,eio),e(k,zn),e(zn,xle),e(xle,oio),e(zn,rio),e(zn,AB),e(AB,tio),e(zn,aio),e(zn,LB),e(LB,nio),e(zn,sio),e(k,lio),e(k,lh),e(lh,$le),e($le,iio),e(lh,dio),e(lh,yB),e(yB,cio),e(lh,fio),e(k,mio),e(k,ih),e(ih,kle),e(kle,gio),e(ih,hio),e(ih,xB),e(xB,pio),e(ih,_io),e(k,uio),e(k,dh),e(dh,Sle),e(Sle,bio),e(dh,vio),e(dh,$B),e($B,Fio),e(dh,Tio),e(k,Mio),e(k,Wn),e(Wn,Rle),e(Rle,Eio),e(Wn,Cio),e(Wn,kB),e(kB,wio),e(Wn,Aio),e(Wn,SB),e(SB,Lio),e(Wn,yio),e(k,xio),e(k,ch),e(ch,Ple),e(Ple,$io),e(ch,kio),e(ch,RB),e(RB,Sio),e(ch,Rio),e(k,Pio),e(k,Qn),e(Qn,Ble),e(Ble,Bio),e(Qn,Iio),e(Qn,PB),e(PB,Nio),e(Qn,qio),e(Qn,BB),e(BB,jio),e(Qn,Dio),e(k,Gio),e(k,Hn),e(Hn,Ile),e(Ile,Oio),e(Hn,Vio),e(Hn,IB),e(IB,Xio),e(Hn,zio),e(Hn,NB),e(NB,Wio),e(Hn,Qio),e(k,Hio),e(k,Un),e(Un,Nle),e(Nle,Uio),e(Un,Jio),e(Un,qB),e(qB,Yio),e(Un,Kio),e(Un,jB),e(jB,Zio),e(Un,edo),e(k,odo),e(k,Jn),e(Jn,qle),e(qle,rdo),e(Jn,tdo),e(Jn,DB),e(DB,ado),e(Jn,ndo),e(Jn,GB),e(GB,sdo),e(Jn,ldo),e(k,ido),e(k,fh),e(fh,jle),e(jle,ddo),e(fh,cdo),e(fh,OB),e(OB,fdo),e(fh,mdo),e(k,gdo),e(k,Yn),e(Yn,Dle),e(Dle,hdo),e(Yn,pdo),e(Yn,VB),e(VB,_do),e(Yn,udo),e(Yn,XB),e(XB,bdo),e(Yn,vdo),e(k,Fdo),e(k,Kn),e(Kn,Gle),e(Gle,Tdo),e(Kn,Mdo),e(Kn,zB),e(zB,Edo),e(Kn,Cdo),e(Kn,WB),e(WB,wdo),e(Kn,Ado),e(k,Ldo),e(k,Zn),e(Zn,Ole),e(Ole,ydo),e(Zn,xdo),e(Zn,QB),e(QB,$do),e(Zn,kdo),e(Zn,HB),e(HB,Sdo),e(Zn,Rdo),e(k,Pdo),e(k,es),e(es,Vle),e(Vle,Bdo),e(es,Ido),e(es,UB),e(UB,Ndo),e(es,qdo),e(es,JB),e(JB,jdo),e(es,Ddo),e(k,Gdo),e(k,os),e(os,Xle),e(Xle,Odo),e(os,Vdo),e(os,YB),e(YB,Xdo),e(os,zdo),e(os,KB),e(KB,Wdo),e(os,Qdo),e(k,Hdo),e(k,rs),e(rs,zle),e(zle,Udo),e(rs,Jdo),e(rs,ZB),e(ZB,Ydo),e(rs,Kdo),e(rs,eI),e(eI,Zdo),e(rs,eco),e(k,oco),e(k,mh),e(mh,Wle),e(Wle,rco),e(mh,tco),e(mh,oI),e(oI,aco),e(mh,nco),e(k,sco),e(k,ts),e(ts,Qle),e(Qle,lco),e(ts,ico),e(ts,rI),e(rI,dco),e(ts,cco),e(ts,tI),e(tI,fco),e(ts,mco),e(k,gco),e(k,gh),e(gh,Hle),e(Hle,hco),e(gh,pco),e(gh,aI),e(aI,_co),e(gh,uco),e(k,bco),e(k,as),e(as,Ule),e(Ule,vco),e(as,Fco),e(as,nI),e(nI,Tco),e(as,Mco),e(as,sI),e(sI,Eco),e(as,Cco),e(k,wco),e(k,ns),e(ns,Jle),e(Jle,Aco),e(ns,Lco),e(ns,lI),e(lI,yco),e(ns,xco),e(ns,iI),e(iI,$co),e(ns,kco),e(k,Sco),e(k,ss),e(ss,Yle),e(Yle,Rco),e(ss,Pco),e(ss,dI),e(dI,Bco),e(ss,Ico),e(ss,cI),e(cI,Nco),e(ss,qco),e(k,jco),e(k,hh),e(hh,Kle),e(Kle,Dco),e(hh,Gco),e(hh,fI),e(fI,Oco),e(hh,Vco),e(k,Xco),e(k,ls),e(ls,Zle),e(Zle,zco),e(ls,Wco),e(ls,mI),e(mI,Qco),e(ls,Hco),e(ls,gI),e(gI,Uco),e(ls,Jco),e(k,Yco),e(k,is),e(is,eie),e(eie,Kco),e(is,Zco),e(is,hI),e(hI,efo),e(is,ofo),e(is,pI),e(pI,rfo),e(is,tfo),e(k,afo),e(k,ds),e(ds,oie),e(oie,nfo),e(ds,sfo),e(ds,_I),e(_I,lfo),e(ds,ifo),e(ds,uI),e(uI,dfo),e(ds,cfo),e(k,ffo),e(k,ph),e(ph,rie),e(rie,mfo),e(ph,gfo),e(ph,bI),e(bI,hfo),e(ph,pfo),e(k,_fo),e(k,cs),e(cs,tie),e(tie,ufo),e(cs,bfo),e(cs,vI),e(vI,vfo),e(cs,Ffo),e(cs,FI),e(FI,Tfo),e(cs,Mfo),e(k,Efo),e(k,fs),e(fs,aie),e(aie,Cfo),e(fs,wfo),e(fs,TI),e(TI,Afo),e(fs,Lfo),e(fs,MI),e(MI,yfo),e(fs,xfo),e(k,$fo),e(k,ms),e(ms,nie),e(nie,kfo),e(ms,Sfo),e(ms,EI),e(EI,Rfo),e(ms,Pfo),e(ms,CI),e(CI,Bfo),e(ms,Ifo),e(k,Nfo),e(k,gs),e(gs,sie),e(sie,qfo),e(gs,jfo),e(gs,wI),e(wI,Dfo),e(gs,Gfo),e(gs,AI),e(AI,Ofo),e(gs,Vfo),e(k,Xfo),e(k,hs),e(hs,lie),e(lie,zfo),e(hs,Wfo),e(hs,LI),e(LI,Qfo),e(hs,Hfo),e(hs,yI),e(yI,Ufo),e(hs,Jfo),e(k,Yfo),e(k,ps),e(ps,iie),e(iie,Kfo),e(ps,Zfo),e(ps,xI),e(xI,emo),e(ps,omo),e(ps,$I),e($I,rmo),e(ps,tmo),e(k,amo),e(k,_s),e(_s,die),e(die,nmo),e(_s,smo),e(_s,kI),e(kI,lmo),e(_s,imo),e(_s,SI),e(SI,dmo),e(_s,cmo),e(k,fmo),e(k,us),e(us,cie),e(cie,mmo),e(us,gmo),e(us,RI),e(RI,hmo),e(us,pmo),e(us,PI),e(PI,_mo),e(us,umo),e(k,bmo),e(k,_h),e(_h,fie),e(fie,vmo),e(_h,Fmo),e(_h,BI),e(BI,Tmo),e(_h,Mmo),e(k,Emo),e(k,bs),e(bs,mie),e(mie,Cmo),e(bs,wmo),e(bs,II),e(II,Amo),e(bs,Lmo),e(bs,NI),e(NI,ymo),e(bs,xmo),e(k,$mo),e(k,uh),e(uh,gie),e(gie,kmo),e(uh,Smo),e(uh,qI),e(qI,Rmo),e(uh,Pmo),e(k,Bmo),e(k,bh),e(bh,hie),e(hie,Imo),e(bh,Nmo),e(bh,jI),e(jI,qmo),e(bh,jmo),e(k,Dmo),e(k,vs),e(vs,pie),e(pie,Gmo),e(vs,Omo),e(vs,DI),e(DI,Vmo),e(vs,Xmo),e(vs,GI),e(GI,zmo),e(vs,Wmo),e(k,Qmo),e(k,Fs),e(Fs,_ie),e(_ie,Hmo),e(Fs,Umo),e(Fs,OI),e(OI,Jmo),e(Fs,Ymo),e(Fs,VI),e(VI,Kmo),e(Fs,Zmo),e(k,ego),e(k,Ts),e(Ts,uie),e(uie,ogo),e(Ts,rgo),e(Ts,XI),e(XI,tgo),e(Ts,ago),e(Ts,zI),e(zI,ngo),e(Ts,sgo),e(k,lgo),e(k,vh),e(vh,bie),e(bie,igo),e(vh,dgo),e(vh,WI),e(WI,cgo),e(vh,fgo),e(k,mgo),e(k,Ms),e(Ms,vie),e(vie,ggo),e(Ms,hgo),e(Ms,QI),e(QI,pgo),e(Ms,_go),e(Ms,HI),e(HI,ugo),e(Ms,bgo),e(k,vgo),e(k,Es),e(Es,Fie),e(Fie,Fgo),e(Es,Tgo),e(Es,UI),e(UI,Mgo),e(Es,Ego),e(Es,JI),e(JI,Cgo),e(Es,wgo),e(k,Ago),e(k,Cs),e(Cs,Tie),e(Tie,Lgo),e(Cs,ygo),e(Cs,YI),e(YI,xgo),e(Cs,$go),e(Cs,KI),e(KI,kgo),e(Cs,Sgo),e(k,Rgo),e(k,ws),e(ws,Mie),e(Mie,Pgo),e(ws,Bgo),e(ws,ZI),e(ZI,Igo),e(ws,Ngo),e(ws,eN),e(eN,qgo),e(ws,jgo),e(k,Dgo),e(k,As),e(As,Eie),e(Eie,Ggo),e(As,Ogo),e(As,oN),e(oN,Vgo),e(As,Xgo),e(As,rN),e(rN,zgo),e(As,Wgo),e(k,Qgo),e(k,Ls),e(Ls,Cie),e(Cie,Hgo),e(Ls,Ugo),e(Ls,tN),e(tN,Jgo),e(Ls,Ygo),e(Ls,aN),e(aN,Kgo),e(Ls,Zgo),e(k,eho),e(k,ys),e(ys,wie),e(wie,oho),e(ys,rho),e(ys,nN),e(nN,tho),e(ys,aho),e(ys,sN),e(sN,nho),e(ys,sho),e(k,lho),e(k,xs),e(xs,Aie),e(Aie,iho),e(xs,dho),e(xs,lN),e(lN,cho),e(xs,fho),e(xs,iN),e(iN,mho),e(xs,gho),e(k,hho),e(k,Fh),e(Fh,Lie),e(Lie,pho),e(Fh,_ho),e(Fh,dN),e(dN,uho),e(Fh,bho),e(k,vho),e(k,$s),e($s,yie),e(yie,Fho),e($s,Tho),e($s,cN),e(cN,Mho),e($s,Eho),e($s,fN),e(fN,Cho),e($s,who),e(k,Aho),e(k,ks),e(ks,xie),e(xie,Lho),e(ks,yho),e(ks,mN),e(mN,xho),e(ks,$ho),e(ks,gN),e(gN,kho),e(ks,Sho),e(k,Rho),e(k,Th),e(Th,$ie),e($ie,Pho),e(Th,Bho),e(Th,hN),e(hN,Iho),e(Th,Nho),e(k,qho),e(k,Mh),e(Mh,kie),e(kie,jho),e(Mh,Dho),e(Mh,pN),e(pN,Gho),e(Mh,Oho),e(k,Vho),e(k,Eh),e(Eh,Sie),e(Sie,Xho),e(Eh,zho),e(Eh,_N),e(_N,Who),e(Eh,Qho),e(k,Hho),e(k,Ch),e(Ch,Rie),e(Rie,Uho),e(Ch,Jho),e(Ch,uN),e(uN,Yho),e(Ch,Kho),e(k,Zho),e(k,Ss),e(Ss,Pie),e(Pie,epo),e(Ss,opo),e(Ss,bN),e(bN,rpo),e(Ss,tpo),e(Ss,vN),e(vN,apo),e(Ss,npo),e(k,spo),e(k,wh),e(wh,Bie),e(Bie,lpo),e(wh,ipo),e(wh,FN),e(FN,dpo),e(wh,cpo),e(k,fpo),e(k,Rs),e(Rs,Iie),e(Iie,mpo),e(Rs,gpo),e(Rs,TN),e(TN,hpo),e(Rs,ppo),e(Rs,MN),e(MN,_po),e(Rs,upo),e(k,bpo),e(k,Ps),e(Ps,Nie),e(Nie,vpo),e(Ps,Fpo),e(Ps,EN),e(EN,Tpo),e(Ps,Mpo),e(Ps,CN),e(CN,Epo),e(Ps,Cpo),e(k,wpo),e(k,Bs),e(Bs,qie),e(qie,Apo),e(Bs,Lpo),e(Bs,wN),e(wN,ypo),e(Bs,xpo),e(Bs,AN),e(AN,$po),e(Bs,kpo),e(k,Spo),e(k,Is),e(Is,jie),e(jie,Rpo),e(Is,Ppo),e(Is,LN),e(LN,Bpo),e(Is,Ipo),e(Is,yN),e(yN,Npo),e(Is,qpo),e(k,jpo),e(k,Ns),e(Ns,Die),e(Die,Dpo),e(Ns,Gpo),e(Ns,xN),e(xN,Opo),e(Ns,Vpo),e(Ns,$N),e($N,Xpo),e(Ns,zpo),e(k,Wpo),e(k,qs),e(qs,Gie),e(Gie,Qpo),e(qs,Hpo),e(qs,kN),e(kN,Upo),e(qs,Jpo),e(qs,SN),e(SN,Ypo),e(qs,Kpo),e(k,Zpo),e(k,Ah),e(Ah,Oie),e(Oie,e_o),e(Ah,o_o),e(Ah,RN),e(RN,r_o),e(Ah,t_o),e(k,a_o),e(k,Lh),e(Lh,Vie),e(Vie,n_o),e(Lh,s_o),e(Lh,PN),e(PN,l_o),e(Lh,i_o),e(k,d_o),e(k,js),e(js,Xie),e(Xie,c_o),e(js,f_o),e(js,BN),e(BN,m_o),e(js,g_o),e(js,IN),e(IN,h_o),e(js,p_o),e(k,__o),e(k,Ds),e(Ds,zie),e(zie,u_o),e(Ds,b_o),e(Ds,NN),e(NN,v_o),e(Ds,F_o),e(Ds,qN),e(qN,T_o),e(Ds,M_o),e(k,E_o),e(k,Gs),e(Gs,Wie),e(Wie,C_o),e(Gs,w_o),e(Gs,jN),e(jN,A_o),e(Gs,L_o),e(Gs,DN),e(DN,y_o),e(Gs,x_o),e(k,$_o),e(k,yh),e(yh,Qie),e(Qie,k_o),e(yh,S_o),e(yh,GN),e(GN,R_o),e(yh,P_o),e(k,B_o),e(k,xh),e(xh,Hie),e(Hie,I_o),e(xh,N_o),e(xh,ON),e(ON,q_o),e(xh,j_o),e(k,D_o),e(k,$h),e($h,Uie),e(Uie,G_o),e($h,O_o),e($h,VN),e(VN,V_o),e($h,X_o),e(k,z_o),e(k,Os),e(Os,Jie),e(Jie,W_o),e(Os,Q_o),e(Os,XN),e(XN,H_o),e(Os,U_o),e(Os,zN),e(zN,J_o),e(Os,Y_o),e(k,K_o),e(k,Vs),e(Vs,Yie),e(Yie,Z_o),e(Vs,euo),e(Vs,WN),e(WN,ouo),e(Vs,ruo),e(Vs,QN),e(QN,tuo),e(Vs,auo),e(k,nuo),e(k,kh),e(kh,Kie),e(Kie,suo),e(kh,luo),e(kh,HN),e(HN,iuo),e(kh,duo),e(k,cuo),e(k,Sh),e(Sh,Zie),e(Zie,fuo),e(Sh,muo),e(Sh,UN),e(UN,guo),e(Sh,huo),e(k,puo),e(k,Rh),e(Rh,ede),e(ede,_uo),e(Rh,uuo),e(Rh,JN),e(JN,buo),e(Rh,vuo),e(k,Fuo),e(k,Xs),e(Xs,ode),e(ode,Tuo),e(Xs,Muo),e(Xs,YN),e(YN,Euo),e(Xs,Cuo),e(Xs,KN),e(KN,wuo),e(Xs,Auo),e(k,Luo),e(k,Ph),e(Ph,rde),e(rde,yuo),e(Ph,xuo),e(Ph,ZN),e(ZN,$uo),e(Ph,kuo),e(k,Suo),e(k,Bh),e(Bh,tde),e(tde,Ruo),e(Bh,Puo),e(Bh,eq),e(eq,Buo),e(Bh,Iuo),e(k,Nuo),e(k,zs),e(zs,ade),e(ade,quo),e(zs,juo),e(zs,oq),e(oq,Duo),e(zs,Guo),e(zs,rq),e(rq,Ouo),e(zs,Vuo),e(k,Xuo),e(k,Ws),e(Ws,nde),e(nde,zuo),e(Ws,Wuo),e(Ws,tq),e(tq,Quo),e(Ws,Huo),e(Ws,aq),e(aq,Uuo),e(Ws,Juo),e(k,Yuo),e(k,Qs),e(Qs,sde),e(sde,Kuo),e(Qs,Zuo),e(Qs,nq),e(nq,e1o),e(Qs,o1o),e(Qs,sq),e(sq,r1o),e(Qs,t1o),e(k,a1o),e(k,Hs),e(Hs,lde),e(lde,n1o),e(Hs,s1o),e(Hs,lq),e(lq,l1o),e(Hs,i1o),e(Hs,iq),e(iq,d1o),e(Hs,c1o),e(yr,f1o),M(Ih,yr,null),e(Lo,m1o),e(Lo,Nh),M(w6,Nh,null),e(Nh,g1o),e(Nh,ide),e(ide,h1o),b(f,DXe,u),b(f,Di,u),e(Di,qh),e(qh,dde),M(A6,dde,null),e(Di,p1o),e(Di,cde),e(cde,_1o),b(f,GXe,u),b(f,yo,u),M(L6,yo,null),e(yo,u1o),e(yo,y6),e(y6,b1o),e(y6,dq),e(dq,v1o),e(y6,F1o),e(yo,T1o),e(yo,x6),e(x6,M1o),e(x6,fde),e(fde,E1o),e(x6,C1o),e(yo,w1o),e(yo,Ue),M($6,Ue,null),e(Ue,A1o),e(Ue,mde),e(mde,L1o),e(Ue,y1o),e(Ue,Ba),e(Ba,x1o),e(Ba,gde),e(gde,$1o),e(Ba,k1o),e(Ba,hde),e(hde,S1o),e(Ba,R1o),e(Ba,pde),e(pde,P1o),e(Ba,B1o),e(Ue,I1o),e(Ue,J),e(J,jh),e(jh,_de),e(_de,N1o),e(jh,q1o),e(jh,cq),e(cq,j1o),e(jh,D1o),e(J,G1o),e(J,Dh),e(Dh,ude),e(ude,O1o),e(Dh,V1o),e(Dh,fq),e(fq,X1o),e(Dh,z1o),e(J,W1o),e(J,Gh),e(Gh,bde),e(bde,Q1o),e(Gh,H1o),e(Gh,mq),e(mq,U1o),e(Gh,J1o),e(J,Y1o),e(J,Oh),e(Oh,vde),e(vde,K1o),e(Oh,Z1o),e(Oh,gq),e(gq,e2o),e(Oh,o2o),e(J,r2o),e(J,Vh),e(Vh,Fde),e(Fde,t2o),e(Vh,a2o),e(Vh,hq),e(hq,n2o),e(Vh,s2o),e(J,l2o),e(J,Xh),e(Xh,Tde),e(Tde,i2o),e(Xh,d2o),e(Xh,pq),e(pq,c2o),e(Xh,f2o),e(J,m2o),e(J,zh),e(zh,Mde),e(Mde,g2o),e(zh,h2o),e(zh,_q),e(_q,p2o),e(zh,_2o),e(J,u2o),e(J,Wh),e(Wh,Ede),e(Ede,b2o),e(Wh,v2o),e(Wh,uq),e(uq,F2o),e(Wh,T2o),e(J,M2o),e(J,Qh),e(Qh,Cde),e(Cde,E2o),e(Qh,C2o),e(Qh,bq),e(bq,w2o),e(Qh,A2o),e(J,L2o),e(J,Hh),e(Hh,wde),e(wde,y2o),e(Hh,x2o),e(Hh,vq),e(vq,$2o),e(Hh,k2o),e(J,S2o),e(J,Uh),e(Uh,Ade),e(Ade,R2o),e(Uh,P2o),e(Uh,Fq),e(Fq,B2o),e(Uh,I2o),e(J,N2o),e(J,Jh),e(Jh,Lde),e(Lde,q2o),e(Jh,j2o),e(Jh,Tq),e(Tq,D2o),e(Jh,G2o),e(J,O2o),e(J,Yh),e(Yh,yde),e(yde,V2o),e(Yh,X2o),e(Yh,Mq),e(Mq,z2o),e(Yh,W2o),e(J,Q2o),e(J,Kh),e(Kh,xde),e(xde,H2o),e(Kh,U2o),e(Kh,Eq),e(Eq,J2o),e(Kh,Y2o),e(J,K2o),e(J,Zh),e(Zh,$de),e($de,Z2o),e(Zh,ebo),e(Zh,Cq),e(Cq,obo),e(Zh,rbo),e(J,tbo),e(J,ep),e(ep,kde),e(kde,abo),e(ep,nbo),e(ep,wq),e(wq,sbo),e(ep,lbo),e(J,ibo),e(J,op),e(op,Sde),e(Sde,dbo),e(op,cbo),e(op,Aq),e(Aq,fbo),e(op,mbo),e(J,gbo),e(J,rp),e(rp,Rde),e(Rde,hbo),e(rp,pbo),e(rp,Lq),e(Lq,_bo),e(rp,ubo),e(J,bbo),e(J,tp),e(tp,Pde),e(Pde,vbo),e(tp,Fbo),e(tp,yq),e(yq,Tbo),e(tp,Mbo),e(J,Ebo),e(J,ap),e(ap,Bde),e(Bde,Cbo),e(ap,wbo),e(ap,xq),e(xq,Abo),e(ap,Lbo),e(J,ybo),e(J,np),e(np,Ide),e(Ide,xbo),e(np,$bo),e(np,$q),e($q,kbo),e(np,Sbo),e(J,Rbo),e(J,sp),e(sp,Nde),e(Nde,Pbo),e(sp,Bbo),e(sp,kq),e(kq,Ibo),e(sp,Nbo),e(J,qbo),e(J,lp),e(lp,qde),e(qde,jbo),e(lp,Dbo),e(lp,Sq),e(Sq,Gbo),e(lp,Obo),e(J,Vbo),e(J,ip),e(ip,jde),e(jde,Xbo),e(ip,zbo),e(ip,Rq),e(Rq,Wbo),e(ip,Qbo),e(J,Hbo),e(J,dp),e(dp,Dde),e(Dde,Ubo),e(dp,Jbo),e(dp,Pq),e(Pq,Ybo),e(dp,Kbo),e(J,Zbo),e(J,cp),e(cp,Gde),e(Gde,e3o),e(cp,o3o),e(cp,Bq),e(Bq,r3o),e(cp,t3o),e(J,a3o),e(J,fp),e(fp,Ode),e(Ode,n3o),e(fp,s3o),e(fp,Iq),e(Iq,l3o),e(fp,i3o),e(J,d3o),e(J,mp),e(mp,Vde),e(Vde,c3o),e(mp,f3o),e(mp,Nq),e(Nq,m3o),e(mp,g3o),e(J,h3o),e(J,gp),e(gp,Xde),e(Xde,p3o),e(gp,_3o),e(gp,qq),e(qq,u3o),e(gp,b3o),e(J,v3o),e(J,hp),e(hp,zde),e(zde,F3o),e(hp,T3o),e(hp,jq),e(jq,M3o),e(hp,E3o),e(J,C3o),e(J,pp),e(pp,Wde),e(Wde,w3o),e(pp,A3o),e(pp,Dq),e(Dq,L3o),e(pp,y3o),e(J,x3o),e(J,_p),e(_p,Qde),e(Qde,$3o),e(_p,k3o),e(_p,Gq),e(Gq,S3o),e(_p,R3o),e(J,P3o),e(J,up),e(up,Hde),e(Hde,B3o),e(up,I3o),e(up,Oq),e(Oq,N3o),e(up,q3o),e(J,j3o),e(J,bp),e(bp,Ude),e(Ude,D3o),e(bp,G3o),e(bp,Vq),e(Vq,O3o),e(bp,V3o),e(J,X3o),e(J,vp),e(vp,Jde),e(Jde,z3o),e(vp,W3o),e(vp,Xq),e(Xq,Q3o),e(vp,H3o),e(Ue,U3o),M(Fp,Ue,null),e(Ue,J3o),M(Tp,Ue,null),e(yo,Y3o),e(yo,Mp),M(k6,Mp,null),e(Mp,K3o),e(Mp,Yde),e(Yde,Z3o),b(f,OXe,u),b(f,Gi,u),e(Gi,Ep),e(Ep,Kde),M(S6,Kde,null),e(Gi,evo),e(Gi,Zde),e(Zde,ovo),b(f,VXe,u),b(f,xo,u),M(R6,xo,null),e(xo,rvo),e(xo,P6),e(P6,tvo),e(P6,zq),e(zq,avo),e(P6,nvo),e(xo,svo),e(xo,B6),e(B6,lvo),e(B6,ece),e(ece,ivo),e(B6,dvo),e(xo,cvo),e(xo,Je),M(I6,Je,null),e(Je,fvo),e(Je,oce),e(oce,mvo),e(Je,gvo),e(Je,Oi),e(Oi,hvo),e(Oi,rce),e(rce,pvo),e(Oi,_vo),e(Oi,tce),e(tce,uvo),e(Oi,bvo),e(Je,vvo),e(Je,fe),e(fe,Cp),e(Cp,ace),e(ace,Fvo),e(Cp,Tvo),e(Cp,Wq),e(Wq,Mvo),e(Cp,Evo),e(fe,Cvo),e(fe,wp),e(wp,nce),e(nce,wvo),e(wp,Avo),e(wp,sce),e(sce,Lvo),e(wp,yvo),e(fe,xvo),e(fe,Ap),e(Ap,lce),e(lce,$vo),e(Ap,kvo),e(Ap,Qq),e(Qq,Svo),e(Ap,Rvo),e(fe,Pvo),e(fe,Lp),e(Lp,ice),e(ice,Bvo),e(Lp,Ivo),e(Lp,Hq),e(Hq,Nvo),e(Lp,qvo),e(fe,jvo),e(fe,yp),e(yp,dce),e(dce,Dvo),e(yp,Gvo),e(yp,Uq),e(Uq,Ovo),e(yp,Vvo),e(fe,Xvo),e(fe,xp),e(xp,cce),e(cce,zvo),e(xp,Wvo),e(xp,Jq),e(Jq,Qvo),e(xp,Hvo),e(fe,Uvo),e(fe,$p),e($p,fce),e(fce,Jvo),e($p,Yvo),e($p,Yq),e(Yq,Kvo),e($p,Zvo),e(fe,eFo),e(fe,kp),e(kp,mce),e(mce,oFo),e(kp,rFo),e(kp,Kq),e(Kq,tFo),e(kp,aFo),e(fe,nFo),e(fe,Sp),e(Sp,gce),e(gce,sFo),e(Sp,lFo),e(Sp,Zq),e(Zq,iFo),e(Sp,dFo),e(fe,cFo),e(fe,Rp),e(Rp,hce),e(hce,fFo),e(Rp,mFo),e(Rp,ej),e(ej,gFo),e(Rp,hFo),e(fe,pFo),e(fe,Pp),e(Pp,pce),e(pce,_Fo),e(Pp,uFo),e(Pp,oj),e(oj,bFo),e(Pp,vFo),e(fe,FFo),e(fe,Bp),e(Bp,_ce),e(_ce,TFo),e(Bp,MFo),e(Bp,rj),e(rj,EFo),e(Bp,CFo),e(fe,wFo),e(fe,Ip),e(Ip,uce),e(uce,AFo),e(Ip,LFo),e(Ip,tj),e(tj,yFo),e(Ip,xFo),e(fe,$Fo),e(fe,Np),e(Np,bce),e(bce,kFo),e(Np,SFo),e(Np,aj),e(aj,RFo),e(Np,PFo),e(fe,BFo),e(fe,qp),e(qp,vce),e(vce,IFo),e(qp,NFo),e(qp,nj),e(nj,qFo),e(qp,jFo),e(fe,DFo),e(fe,jp),e(jp,Fce),e(Fce,GFo),e(jp,OFo),e(jp,sj),e(sj,VFo),e(jp,XFo),e(fe,zFo),e(fe,Dp),e(Dp,Tce),e(Tce,WFo),e(Dp,QFo),e(Dp,lj),e(lj,HFo),e(Dp,UFo),e(fe,JFo),e(fe,Gp),e(Gp,Mce),e(Mce,YFo),e(Gp,KFo),e(Gp,ij),e(ij,ZFo),e(Gp,eTo),e(fe,oTo),e(fe,Op),e(Op,Ece),e(Ece,rTo),e(Op,tTo),e(Op,dj),e(dj,aTo),e(Op,nTo),e(Je,sTo),M(Vp,Je,null),e(Je,lTo),M(Xp,Je,null),e(xo,iTo),e(xo,zp),M(N6,zp,null),e(zp,dTo),e(zp,Cce),e(Cce,cTo),b(f,XXe,u),b(f,Vi,u),e(Vi,Wp),e(Wp,wce),M(q6,wce,null),e(Vi,fTo),e(Vi,Ace),e(Ace,mTo),b(f,zXe,u),b(f,$o,u),M(j6,$o,null),e($o,gTo),e($o,Xi),e(Xi,hTo),e(Xi,cj),e(cj,pTo),e(Xi,_To),e(Xi,fj),e(fj,uTo),e(Xi,bTo),e($o,vTo),e($o,D6),e(D6,FTo),e(D6,Lce),e(Lce,TTo),e(D6,MTo),e($o,ETo),e($o,it),M(G6,it,null),e(it,CTo),e(it,yce),e(yce,wTo),e(it,ATo),e(it,zi),e(zi,LTo),e(zi,xce),e(xce,yTo),e(zi,xTo),e(zi,mj),e(mj,$To),e(zi,kTo),e(it,STo),M(Qp,it,null),e($o,RTo),e($o,Ye),M(O6,Ye,null),e(Ye,PTo),e(Ye,$ce),e($ce,BTo),e(Ye,ITo),e(Ye,Ia),e(Ia,NTo),e(Ia,kce),e(kce,qTo),e(Ia,jTo),e(Ia,Sce),e(Sce,DTo),e(Ia,GTo),e(Ia,Rce),e(Rce,OTo),e(Ia,VTo),e(Ye,XTo),e(Ye,y),e(y,Hp),e(Hp,Pce),e(Pce,zTo),e(Hp,WTo),e(Hp,gj),e(gj,QTo),e(Hp,HTo),e(y,UTo),e(y,Up),e(Up,Bce),e(Bce,JTo),e(Up,YTo),e(Up,hj),e(hj,KTo),e(Up,ZTo),e(y,e7o),e(y,Jp),e(Jp,Ice),e(Ice,o7o),e(Jp,r7o),e(Jp,pj),e(pj,t7o),e(Jp,a7o),e(y,n7o),e(y,Yp),e(Yp,Nce),e(Nce,s7o),e(Yp,l7o),e(Yp,_j),e(_j,i7o),e(Yp,d7o),e(y,c7o),e(y,Kp),e(Kp,qce),e(qce,f7o),e(Kp,m7o),e(Kp,uj),e(uj,g7o),e(Kp,h7o),e(y,p7o),e(y,Zp),e(Zp,jce),e(jce,_7o),e(Zp,u7o),e(Zp,bj),e(bj,b7o),e(Zp,v7o),e(y,F7o),e(y,e_),e(e_,Dce),e(Dce,T7o),e(e_,M7o),e(e_,vj),e(vj,E7o),e(e_,C7o),e(y,w7o),e(y,o_),e(o_,Gce),e(Gce,A7o),e(o_,L7o),e(o_,Fj),e(Fj,y7o),e(o_,x7o),e(y,$7o),e(y,r_),e(r_,Oce),e(Oce,k7o),e(r_,S7o),e(r_,Tj),e(Tj,R7o),e(r_,P7o),e(y,B7o),e(y,t_),e(t_,Vce),e(Vce,I7o),e(t_,N7o),e(t_,Mj),e(Mj,q7o),e(t_,j7o),e(y,D7o),e(y,a_),e(a_,Xce),e(Xce,G7o),e(a_,O7o),e(a_,Ej),e(Ej,V7o),e(a_,X7o),e(y,z7o),e(y,n_),e(n_,zce),e(zce,W7o),e(n_,Q7o),e(n_,Cj),e(Cj,H7o),e(n_,U7o),e(y,J7o),e(y,s_),e(s_,Wce),e(Wce,Y7o),e(s_,K7o),e(s_,wj),e(wj,Z7o),e(s_,e8o),e(y,o8o),e(y,l_),e(l_,Qce),e(Qce,r8o),e(l_,t8o),e(l_,Aj),e(Aj,a8o),e(l_,n8o),e(y,s8o),e(y,i_),e(i_,Hce),e(Hce,l8o),e(i_,i8o),e(i_,Lj),e(Lj,d8o),e(i_,c8o),e(y,f8o),e(y,d_),e(d_,Uce),e(Uce,m8o),e(d_,g8o),e(d_,yj),e(yj,h8o),e(d_,p8o),e(y,_8o),e(y,c_),e(c_,Jce),e(Jce,u8o),e(c_,b8o),e(c_,xj),e(xj,v8o),e(c_,F8o),e(y,T8o),e(y,f_),e(f_,Yce),e(Yce,M8o),e(f_,E8o),e(f_,$j),e($j,C8o),e(f_,w8o),e(y,A8o),e(y,m_),e(m_,Kce),e(Kce,L8o),e(m_,y8o),e(m_,kj),e(kj,x8o),e(m_,$8o),e(y,k8o),e(y,g_),e(g_,Zce),e(Zce,S8o),e(g_,R8o),e(g_,Sj),e(Sj,P8o),e(g_,B8o),e(y,I8o),e(y,h_),e(h_,efe),e(efe,N8o),e(h_,q8o),e(h_,Rj),e(Rj,j8o),e(h_,D8o),e(y,G8o),e(y,p_),e(p_,ofe),e(ofe,O8o),e(p_,V8o),e(p_,Pj),e(Pj,X8o),e(p_,z8o),e(y,W8o),e(y,__),e(__,rfe),e(rfe,Q8o),e(__,H8o),e(__,Bj),e(Bj,U8o),e(__,J8o),e(y,Y8o),e(y,u_),e(u_,tfe),e(tfe,K8o),e(u_,Z8o),e(u_,Ij),e(Ij,e9o),e(u_,o9o),e(y,r9o),e(y,b_),e(b_,afe),e(afe,t9o),e(b_,a9o),e(b_,Nj),e(Nj,n9o),e(b_,s9o),e(y,l9o),e(y,v_),e(v_,nfe),e(nfe,i9o),e(v_,d9o),e(v_,qj),e(qj,c9o),e(v_,f9o),e(y,m9o),e(y,F_),e(F_,sfe),e(sfe,g9o),e(F_,h9o),e(F_,jj),e(jj,p9o),e(F_,_9o),e(y,u9o),e(y,T_),e(T_,lfe),e(lfe,b9o),e(T_,v9o),e(T_,Dj),e(Dj,F9o),e(T_,T9o),e(y,M9o),e(y,M_),e(M_,ife),e(ife,E9o),e(M_,C9o),e(M_,Gj),e(Gj,w9o),e(M_,A9o),e(y,L9o),e(y,E_),e(E_,dfe),e(dfe,y9o),e(E_,x9o),e(E_,Oj),e(Oj,$9o),e(E_,k9o),e(y,S9o),e(y,C_),e(C_,cfe),e(cfe,R9o),e(C_,P9o),e(C_,Vj),e(Vj,B9o),e(C_,I9o),e(y,N9o),e(y,w_),e(w_,ffe),e(ffe,q9o),e(w_,j9o),e(w_,Xj),e(Xj,D9o),e(w_,G9o),e(y,O9o),e(y,A_),e(A_,mfe),e(mfe,V9o),e(A_,X9o),e(A_,zj),e(zj,z9o),e(A_,W9o),e(y,Q9o),e(y,L_),e(L_,gfe),e(gfe,H9o),e(L_,U9o),e(L_,Wj),e(Wj,J9o),e(L_,Y9o),e(y,K9o),e(y,Us),e(Us,hfe),e(hfe,Z9o),e(Us,eMo),e(Us,Qj),e(Qj,oMo),e(Us,rMo),e(Us,Hj),e(Hj,tMo),e(Us,aMo),e(y,nMo),e(y,y_),e(y_,pfe),e(pfe,sMo),e(y_,lMo),e(y_,Uj),e(Uj,iMo),e(y_,dMo),e(y,cMo),e(y,x_),e(x_,_fe),e(_fe,fMo),e(x_,mMo),e(x_,Jj),e(Jj,gMo),e(x_,hMo),e(y,pMo),e(y,$_),e($_,ufe),e(ufe,_Mo),e($_,uMo),e($_,Yj),e(Yj,bMo),e($_,vMo),e(y,FMo),e(y,k_),e(k_,bfe),e(bfe,TMo),e(k_,MMo),e(k_,Kj),e(Kj,EMo),e(k_,CMo),e(y,wMo),e(y,S_),e(S_,vfe),e(vfe,AMo),e(S_,LMo),e(S_,Zj),e(Zj,yMo),e(S_,xMo),e(y,$Mo),e(y,R_),e(R_,Ffe),e(Ffe,kMo),e(R_,SMo),e(R_,eD),e(eD,RMo),e(R_,PMo),e(y,BMo),e(y,P_),e(P_,Tfe),e(Tfe,IMo),e(P_,NMo),e(P_,oD),e(oD,qMo),e(P_,jMo),e(y,DMo),e(y,B_),e(B_,Mfe),e(Mfe,GMo),e(B_,OMo),e(B_,rD),e(rD,VMo),e(B_,XMo),e(y,zMo),e(y,I_),e(I_,Efe),e(Efe,WMo),e(I_,QMo),e(I_,tD),e(tD,HMo),e(I_,UMo),e(y,JMo),e(y,N_),e(N_,Cfe),e(Cfe,YMo),e(N_,KMo),e(N_,aD),e(aD,ZMo),e(N_,e4o),e(y,o4o),e(y,q_),e(q_,wfe),e(wfe,r4o),e(q_,t4o),e(q_,nD),e(nD,a4o),e(q_,n4o),e(y,s4o),e(y,j_),e(j_,Afe),e(Afe,l4o),e(j_,i4o),e(j_,sD),e(sD,d4o),e(j_,c4o),e(y,f4o),e(y,D_),e(D_,Lfe),e(Lfe,m4o),e(D_,g4o),e(D_,lD),e(lD,h4o),e(D_,p4o),e(y,_4o),e(y,G_),e(G_,yfe),e(yfe,u4o),e(G_,b4o),e(G_,iD),e(iD,v4o),e(G_,F4o),e(y,T4o),e(y,O_),e(O_,xfe),e(xfe,M4o),e(O_,E4o),e(O_,dD),e(dD,C4o),e(O_,w4o),e(y,A4o),e(y,V_),e(V_,$fe),e($fe,L4o),e(V_,y4o),e(V_,cD),e(cD,x4o),e(V_,$4o),e(y,k4o),e(y,X_),e(X_,kfe),e(kfe,S4o),e(X_,R4o),e(X_,fD),e(fD,P4o),e(X_,B4o),e(y,I4o),e(y,z_),e(z_,Sfe),e(Sfe,N4o),e(z_,q4o),e(z_,mD),e(mD,j4o),e(z_,D4o),e(y,G4o),e(y,W_),e(W_,Rfe),e(Rfe,O4o),e(W_,V4o),e(W_,gD),e(gD,X4o),e(W_,z4o),e(y,W4o),e(y,Q_),e(Q_,Pfe),e(Pfe,Q4o),e(Q_,H4o),e(Q_,hD),e(hD,U4o),e(Q_,J4o),e(y,Y4o),e(y,H_),e(H_,Bfe),e(Bfe,K4o),e(H_,Z4o),e(H_,pD),e(pD,eEo),e(H_,oEo),e(y,rEo),e(y,U_),e(U_,Ife),e(Ife,tEo),e(U_,aEo),e(U_,_D),e(_D,nEo),e(U_,sEo),e(y,lEo),e(y,J_),e(J_,Nfe),e(Nfe,iEo),e(J_,dEo),e(J_,uD),e(uD,cEo),e(J_,fEo),e(y,mEo),e(y,Y_),e(Y_,qfe),e(qfe,gEo),e(Y_,hEo),e(Y_,bD),e(bD,pEo),e(Y_,_Eo),e(y,uEo),e(y,K_),e(K_,jfe),e(jfe,bEo),e(K_,vEo),e(K_,vD),e(vD,FEo),e(K_,TEo),e(y,MEo),e(y,Z_),e(Z_,Dfe),e(Dfe,EEo),e(Z_,CEo),e(Z_,FD),e(FD,wEo),e(Z_,AEo),e(y,LEo),e(y,eu),e(eu,Gfe),e(Gfe,yEo),e(eu,xEo),e(eu,TD),e(TD,$Eo),e(eu,kEo),e(y,SEo),e(y,ou),e(ou,Ofe),e(Ofe,REo),e(ou,PEo),e(ou,MD),e(MD,BEo),e(ou,IEo),e(y,NEo),e(y,ru),e(ru,Vfe),e(Vfe,qEo),e(ru,jEo),e(ru,ED),e(ED,DEo),e(ru,GEo),e(y,OEo),e(y,tu),e(tu,Xfe),e(Xfe,VEo),e(tu,XEo),e(tu,CD),e(CD,zEo),e(tu,WEo),e(y,QEo),e(y,au),e(au,zfe),e(zfe,HEo),e(au,UEo),e(au,wD),e(wD,JEo),e(au,YEo),e(y,KEo),e(y,nu),e(nu,Wfe),e(Wfe,ZEo),e(nu,eCo),e(nu,AD),e(AD,oCo),e(nu,rCo),e(y,tCo),e(y,su),e(su,Qfe),e(Qfe,aCo),e(su,nCo),e(su,LD),e(LD,sCo),e(su,lCo),e(y,iCo),e(y,lu),e(lu,Hfe),e(Hfe,dCo),e(lu,cCo),e(lu,yD),e(yD,fCo),e(lu,mCo),e(y,gCo),e(y,iu),e(iu,Ufe),e(Ufe,hCo),e(iu,pCo),e(iu,xD),e(xD,_Co),e(iu,uCo),e(y,bCo),e(y,du),e(du,Jfe),e(Jfe,vCo),e(du,FCo),e(du,$D),e($D,TCo),e(du,MCo),e(y,ECo),e(y,cu),e(cu,Yfe),e(Yfe,CCo),e(cu,wCo),e(cu,kD),e(kD,ACo),e(cu,LCo),e(y,yCo),e(y,fu),e(fu,Kfe),e(Kfe,xCo),e(fu,$Co),e(fu,SD),e(SD,kCo),e(fu,SCo),e(y,RCo),e(y,mu),e(mu,Zfe),e(Zfe,PCo),e(mu,BCo),e(mu,RD),e(RD,ICo),e(mu,NCo),e(y,qCo),e(y,gu),e(gu,eme),e(eme,jCo),e(gu,DCo),e(gu,PD),e(PD,GCo),e(gu,OCo),e(y,VCo),e(y,hu),e(hu,ome),e(ome,XCo),e(hu,zCo),e(hu,BD),e(BD,WCo),e(hu,QCo),e(y,HCo),e(y,pu),e(pu,rme),e(rme,UCo),e(pu,JCo),e(pu,ID),e(ID,YCo),e(pu,KCo),e(y,ZCo),e(y,_u),e(_u,tme),e(tme,e5o),e(_u,o5o),e(_u,ND),e(ND,r5o),e(_u,t5o),e(y,a5o),e(y,uu),e(uu,ame),e(ame,n5o),e(uu,s5o),e(uu,qD),e(qD,l5o),e(uu,i5o),e(y,d5o),e(y,bu),e(bu,nme),e(nme,c5o),e(bu,f5o),e(bu,jD),e(jD,m5o),e(bu,g5o),e(y,h5o),e(y,vu),e(vu,sme),e(sme,p5o),e(vu,_5o),e(vu,DD),e(DD,u5o),e(vu,b5o),e(y,v5o),e(y,Fu),e(Fu,lme),e(lme,F5o),e(Fu,T5o),e(Fu,GD),e(GD,M5o),e(Fu,E5o),e(y,C5o),e(y,Tu),e(Tu,ime),e(ime,w5o),e(Tu,A5o),e(Tu,OD),e(OD,L5o),e(Tu,y5o),e(y,x5o),e(y,Mu),e(Mu,dme),e(dme,$5o),e(Mu,k5o),e(Mu,VD),e(VD,S5o),e(Mu,R5o),e(y,P5o),e(y,Eu),e(Eu,cme),e(cme,B5o),e(Eu,I5o),e(Eu,XD),e(XD,N5o),e(Eu,q5o),e(y,j5o),e(y,Cu),e(Cu,fme),e(fme,D5o),e(Cu,G5o),e(Cu,zD),e(zD,O5o),e(Cu,V5o),e(y,X5o),e(y,wu),e(wu,mme),e(mme,z5o),e(wu,W5o),e(wu,WD),e(WD,Q5o),e(wu,H5o),e(y,U5o),e(y,Au),e(Au,gme),e(gme,J5o),e(Au,Y5o),e(Au,QD),e(QD,K5o),e(Au,Z5o),e(y,e0o),e(y,Lu),e(Lu,hme),e(hme,o0o),e(Lu,r0o),e(Lu,HD),e(HD,t0o),e(Lu,a0o),e(y,n0o),e(y,yu),e(yu,pme),e(pme,s0o),e(yu,l0o),e(yu,UD),e(UD,i0o),e(yu,d0o),e(y,c0o),e(y,xu),e(xu,_me),e(_me,f0o),e(xu,m0o),e(xu,JD),e(JD,g0o),e(xu,h0o),e(y,p0o),e(y,$u),e($u,ume),e(ume,_0o),e($u,u0o),e($u,YD),e(YD,b0o),e($u,v0o),e(y,F0o),e(y,ku),e(ku,bme),e(bme,T0o),e(ku,M0o),e(ku,KD),e(KD,E0o),e(ku,C0o),e(y,w0o),e(y,Su),e(Su,vme),e(vme,A0o),e(Su,L0o),e(Su,ZD),e(ZD,y0o),e(Su,x0o),e(y,$0o),e(y,Ru),e(Ru,Fme),e(Fme,k0o),e(Ru,S0o),e(Ru,eG),e(eG,R0o),e(Ru,P0o),e(y,B0o),e(y,Pu),e(Pu,Tme),e(Tme,I0o),e(Pu,N0o),e(Pu,oG),e(oG,q0o),e(Pu,j0o),e(y,D0o),e(y,Bu),e(Bu,Mme),e(Mme,G0o),e(Bu,O0o),e(Bu,rG),e(rG,V0o),e(Bu,X0o),e(y,z0o),e(y,Iu),e(Iu,Eme),e(Eme,W0o),e(Iu,Q0o),e(Iu,tG),e(tG,H0o),e(Iu,U0o),e(y,J0o),e(y,Nu),e(Nu,Cme),e(Cme,Y0o),e(Nu,K0o),e(Nu,aG),e(aG,Z0o),e(Nu,ewo),e(y,owo),e(y,qu),e(qu,wme),e(wme,rwo),e(qu,two),e(qu,nG),e(nG,awo),e(qu,nwo),e(y,swo),e(y,ju),e(ju,Ame),e(Ame,lwo),e(ju,iwo),e(ju,sG),e(sG,dwo),e(ju,cwo),e(y,fwo),e(y,Du),e(Du,Lme),e(Lme,mwo),e(Du,gwo),e(Du,lG),e(lG,hwo),e(Du,pwo),e(y,_wo),e(y,Gu),e(Gu,yme),e(yme,uwo),e(Gu,bwo),e(Gu,iG),e(iG,vwo),e(Gu,Fwo),e(y,Two),e(y,Ou),e(Ou,xme),e(xme,Mwo),e(Ou,Ewo),e(Ou,dG),e(dG,Cwo),e(Ou,wwo),e(y,Awo),e(y,Vu),e(Vu,$me),e($me,Lwo),e(Vu,ywo),e(Vu,cG),e(cG,xwo),e(Vu,$wo),e(y,kwo),e(y,Xu),e(Xu,kme),e(kme,Swo),e(Xu,Rwo),e(Xu,fG),e(fG,Pwo),e(Xu,Bwo),e(y,Iwo),e(y,zu),e(zu,Sme),e(Sme,Nwo),e(zu,qwo),e(zu,mG),e(mG,jwo),e(zu,Dwo),e(y,Gwo),e(y,Wu),e(Wu,Rme),e(Rme,Owo),e(Wu,Vwo),e(Wu,gG),e(gG,Xwo),e(Wu,zwo),e(y,Wwo),e(y,Qu),e(Qu,Pme),e(Pme,Qwo),e(Qu,Hwo),e(Qu,hG),e(hG,Uwo),e(Qu,Jwo),e(y,Ywo),e(y,Hu),e(Hu,Bme),e(Bme,Kwo),e(Hu,Zwo),e(Hu,pG),e(pG,eAo),e(Hu,oAo),e(y,rAo),e(y,Uu),e(Uu,Ime),e(Ime,tAo),e(Uu,aAo),e(Uu,_G),e(_G,nAo),e(Uu,sAo),e(y,lAo),e(y,Ju),e(Ju,Nme),e(Nme,iAo),e(Ju,dAo),e(Ju,uG),e(uG,cAo),e(Ju,fAo),e(y,mAo),e(y,Yu),e(Yu,qme),e(qme,gAo),e(Yu,hAo),e(Yu,bG),e(bG,pAo),e(Yu,_Ao),e(Ye,uAo),e(Ye,Ku),e(Ku,bAo),e(Ku,jme),e(jme,vAo),e(Ku,FAo),e(Ku,Dme),e(Dme,TAo),e(Ye,MAo),M(Zu,Ye,null),b(f,WXe,u),b(f,Wi,u),e(Wi,e1),e(e1,Gme),M(V6,Gme,null),e(Wi,EAo),e(Wi,Ome),e(Ome,CAo),b(f,QXe,u),b(f,ko,u),M(X6,ko,null),e(ko,wAo),e(ko,Qi),e(Qi,AAo),e(Qi,vG),e(vG,LAo),e(Qi,yAo),e(Qi,FG),e(FG,xAo),e(Qi,$Ao),e(ko,kAo),e(ko,z6),e(z6,SAo),e(z6,Vme),e(Vme,RAo),e(z6,PAo),e(ko,BAo),e(ko,dt),M(W6,dt,null),e(dt,IAo),e(dt,Xme),e(Xme,NAo),e(dt,qAo),e(dt,Hi),e(Hi,jAo),e(Hi,zme),e(zme,DAo),e(Hi,GAo),e(Hi,TG),e(TG,OAo),e(Hi,VAo),e(dt,XAo),M(o1,dt,null),e(ko,zAo),e(ko,Ke),M(Q6,Ke,null),e(Ke,WAo),e(Ke,Wme),e(Wme,QAo),e(Ke,HAo),e(Ke,Na),e(Na,UAo),e(Na,Qme),e(Qme,JAo),e(Na,YAo),e(Na,Hme),e(Hme,KAo),e(Na,ZAo),e(Na,Ume),e(Ume,e6o),e(Na,o6o),e(Ke,r6o),e(Ke,G),e(G,r1),e(r1,Jme),e(Jme,t6o),e(r1,a6o),e(r1,MG),e(MG,n6o),e(r1,s6o),e(G,l6o),e(G,t1),e(t1,Yme),e(Yme,i6o),e(t1,d6o),e(t1,EG),e(EG,c6o),e(t1,f6o),e(G,m6o),e(G,a1),e(a1,Kme),e(Kme,g6o),e(a1,h6o),e(a1,CG),e(CG,p6o),e(a1,_6o),e(G,u6o),e(G,n1),e(n1,Zme),e(Zme,b6o),e(n1,v6o),e(n1,wG),e(wG,F6o),e(n1,T6o),e(G,M6o),e(G,s1),e(s1,ege),e(ege,E6o),e(s1,C6o),e(s1,AG),e(AG,w6o),e(s1,A6o),e(G,L6o),e(G,l1),e(l1,oge),e(oge,y6o),e(l1,x6o),e(l1,LG),e(LG,$6o),e(l1,k6o),e(G,S6o),e(G,i1),e(i1,rge),e(rge,R6o),e(i1,P6o),e(i1,yG),e(yG,B6o),e(i1,I6o),e(G,N6o),e(G,d1),e(d1,tge),e(tge,q6o),e(d1,j6o),e(d1,xG),e(xG,D6o),e(d1,G6o),e(G,O6o),e(G,c1),e(c1,age),e(age,V6o),e(c1,X6o),e(c1,$G),e($G,z6o),e(c1,W6o),e(G,Q6o),e(G,f1),e(f1,nge),e(nge,H6o),e(f1,U6o),e(f1,kG),e(kG,J6o),e(f1,Y6o),e(G,K6o),e(G,m1),e(m1,sge),e(sge,Z6o),e(m1,eLo),e(m1,SG),e(SG,oLo),e(m1,rLo),e(G,tLo),e(G,g1),e(g1,lge),e(lge,aLo),e(g1,nLo),e(g1,RG),e(RG,sLo),e(g1,lLo),e(G,iLo),e(G,h1),e(h1,ige),e(ige,dLo),e(h1,cLo),e(h1,PG),e(PG,fLo),e(h1,mLo),e(G,gLo),e(G,p1),e(p1,dge),e(dge,hLo),e(p1,pLo),e(p1,BG),e(BG,_Lo),e(p1,uLo),e(G,bLo),e(G,_1),e(_1,cge),e(cge,vLo),e(_1,FLo),e(_1,IG),e(IG,TLo),e(_1,MLo),e(G,ELo),e(G,u1),e(u1,fge),e(fge,CLo),e(u1,wLo),e(u1,NG),e(NG,ALo),e(u1,LLo),e(G,yLo),e(G,b1),e(b1,mge),e(mge,xLo),e(b1,$Lo),e(b1,qG),e(qG,kLo),e(b1,SLo),e(G,RLo),e(G,v1),e(v1,gge),e(gge,PLo),e(v1,BLo),e(v1,jG),e(jG,ILo),e(v1,NLo),e(G,qLo),e(G,F1),e(F1,hge),e(hge,jLo),e(F1,DLo),e(F1,DG),e(DG,GLo),e(F1,OLo),e(G,VLo),e(G,T1),e(T1,pge),e(pge,XLo),e(T1,zLo),e(T1,GG),e(GG,WLo),e(T1,QLo),e(G,HLo),e(G,M1),e(M1,_ge),e(_ge,ULo),e(M1,JLo),e(M1,OG),e(OG,YLo),e(M1,KLo),e(G,ZLo),e(G,E1),e(E1,uge),e(uge,eyo),e(E1,oyo),e(E1,VG),e(VG,ryo),e(E1,tyo),e(G,ayo),e(G,C1),e(C1,bge),e(bge,nyo),e(C1,syo),e(C1,XG),e(XG,lyo),e(C1,iyo),e(G,dyo),e(G,w1),e(w1,vge),e(vge,cyo),e(w1,fyo),e(w1,zG),e(zG,myo),e(w1,gyo),e(G,hyo),e(G,A1),e(A1,Fge),e(Fge,pyo),e(A1,_yo),e(A1,WG),e(WG,uyo),e(A1,byo),e(G,vyo),e(G,L1),e(L1,Tge),e(Tge,Fyo),e(L1,Tyo),e(L1,QG),e(QG,Myo),e(L1,Eyo),e(G,Cyo),e(G,y1),e(y1,Mge),e(Mge,wyo),e(y1,Ayo),e(y1,HG),e(HG,Lyo),e(y1,yyo),e(G,xyo),e(G,x1),e(x1,Ege),e(Ege,$yo),e(x1,kyo),e(x1,UG),e(UG,Syo),e(x1,Ryo),e(G,Pyo),e(G,$1),e($1,Cge),e(Cge,Byo),e($1,Iyo),e($1,JG),e(JG,Nyo),e($1,qyo),e(G,jyo),e(G,k1),e(k1,wge),e(wge,Dyo),e(k1,Gyo),e(k1,YG),e(YG,Oyo),e(k1,Vyo),e(G,Xyo),e(G,S1),e(S1,Age),e(Age,zyo),e(S1,Wyo),e(S1,KG),e(KG,Qyo),e(S1,Hyo),e(G,Uyo),e(G,R1),e(R1,Lge),e(Lge,Jyo),e(R1,Yyo),e(R1,ZG),e(ZG,Kyo),e(R1,Zyo),e(G,exo),e(G,P1),e(P1,yge),e(yge,oxo),e(P1,rxo),e(P1,eO),e(eO,txo),e(P1,axo),e(G,nxo),e(G,B1),e(B1,xge),e(xge,sxo),e(B1,lxo),e(B1,oO),e(oO,ixo),e(B1,dxo),e(G,cxo),e(G,I1),e(I1,$ge),e($ge,fxo),e(I1,mxo),e(I1,rO),e(rO,gxo),e(I1,hxo),e(G,pxo),e(G,N1),e(N1,kge),e(kge,_xo),e(N1,uxo),e(N1,tO),e(tO,bxo),e(N1,vxo),e(G,Fxo),e(G,q1),e(q1,Sge),e(Sge,Txo),e(q1,Mxo),e(q1,aO),e(aO,Exo),e(q1,Cxo),e(G,wxo),e(G,j1),e(j1,Rge),e(Rge,Axo),e(j1,Lxo),e(j1,nO),e(nO,yxo),e(j1,xxo),e(G,$xo),e(G,D1),e(D1,Pge),e(Pge,kxo),e(D1,Sxo),e(D1,sO),e(sO,Rxo),e(D1,Pxo),e(G,Bxo),e(G,G1),e(G1,Bge),e(Bge,Ixo),e(G1,Nxo),e(G1,lO),e(lO,qxo),e(G1,jxo),e(G,Dxo),e(G,O1),e(O1,Ige),e(Ige,Gxo),e(O1,Oxo),e(O1,iO),e(iO,Vxo),e(O1,Xxo),e(G,zxo),e(G,V1),e(V1,Nge),e(Nge,Wxo),e(V1,Qxo),e(V1,dO),e(dO,Hxo),e(V1,Uxo),e(G,Jxo),e(G,X1),e(X1,qge),e(qge,Yxo),e(X1,Kxo),e(X1,cO),e(cO,Zxo),e(X1,e$o),e(G,o$o),e(G,z1),e(z1,jge),e(jge,r$o),e(z1,t$o),e(z1,fO),e(fO,a$o),e(z1,n$o),e(G,s$o),e(G,W1),e(W1,Dge),e(Dge,l$o),e(W1,i$o),e(W1,mO),e(mO,d$o),e(W1,c$o),e(Ke,f$o),e(Ke,Q1),e(Q1,m$o),e(Q1,Gge),e(Gge,g$o),e(Q1,h$o),e(Q1,Oge),e(Oge,p$o),e(Ke,_$o),M(H1,Ke,null),b(f,HXe,u),b(f,Ui,u),e(Ui,U1),e(U1,Vge),M(H6,Vge,null),e(Ui,u$o),e(Ui,Xge),e(Xge,b$o),b(f,UXe,u),b(f,So,u),M(U6,So,null),e(So,v$o),e(So,Ji),e(Ji,F$o),e(Ji,gO),e(gO,T$o),e(Ji,M$o),e(Ji,hO),e(hO,E$o),e(Ji,C$o),e(So,w$o),e(So,J6),e(J6,A$o),e(J6,zge),e(zge,L$o),e(J6,y$o),e(So,x$o),e(So,ct),M(Y6,ct,null),e(ct,$$o),e(ct,Wge),e(Wge,k$o),e(ct,S$o),e(ct,Yi),e(Yi,R$o),e(Yi,Qge),e(Qge,P$o),e(Yi,B$o),e(Yi,pO),e(pO,I$o),e(Yi,N$o),e(ct,q$o),M(J1,ct,null),e(So,j$o),e(So,Ze),M(K6,Ze,null),e(Ze,D$o),e(Ze,Hge),e(Hge,G$o),e(Ze,O$o),e(Ze,qa),e(qa,V$o),e(qa,Uge),e(Uge,X$o),e(qa,z$o),e(qa,Jge),e(Jge,W$o),e(qa,Q$o),e(qa,Yge),e(Yge,H$o),e(qa,U$o),e(Ze,J$o),e(Ze,z),e(z,Y1),e(Y1,Kge),e(Kge,Y$o),e(Y1,K$o),e(Y1,_O),e(_O,Z$o),e(Y1,eko),e(z,oko),e(z,K1),e(K1,Zge),e(Zge,rko),e(K1,tko),e(K1,uO),e(uO,ako),e(K1,nko),e(z,sko),e(z,Z1),e(Z1,ehe),e(ehe,lko),e(Z1,iko),e(Z1,bO),e(bO,dko),e(Z1,cko),e(z,fko),e(z,e2),e(e2,ohe),e(ohe,mko),e(e2,gko),e(e2,vO),e(vO,hko),e(e2,pko),e(z,_ko),e(z,o2),e(o2,rhe),e(rhe,uko),e(o2,bko),e(o2,FO),e(FO,vko),e(o2,Fko),e(z,Tko),e(z,r2),e(r2,the),e(the,Mko),e(r2,Eko),e(r2,TO),e(TO,Cko),e(r2,wko),e(z,Ako),e(z,t2),e(t2,ahe),e(ahe,Lko),e(t2,yko),e(t2,MO),e(MO,xko),e(t2,$ko),e(z,kko),e(z,a2),e(a2,nhe),e(nhe,Sko),e(a2,Rko),e(a2,EO),e(EO,Pko),e(a2,Bko),e(z,Iko),e(z,n2),e(n2,she),e(she,Nko),e(n2,qko),e(n2,CO),e(CO,jko),e(n2,Dko),e(z,Gko),e(z,s2),e(s2,lhe),e(lhe,Oko),e(s2,Vko),e(s2,wO),e(wO,Xko),e(s2,zko),e(z,Wko),e(z,l2),e(l2,ihe),e(ihe,Qko),e(l2,Hko),e(l2,AO),e(AO,Uko),e(l2,Jko),e(z,Yko),e(z,i2),e(i2,dhe),e(dhe,Kko),e(i2,Zko),e(i2,LO),e(LO,eSo),e(i2,oSo),e(z,rSo),e(z,d2),e(d2,che),e(che,tSo),e(d2,aSo),e(d2,yO),e(yO,nSo),e(d2,sSo),e(z,lSo),e(z,c2),e(c2,fhe),e(fhe,iSo),e(c2,dSo),e(c2,xO),e(xO,cSo),e(c2,fSo),e(z,mSo),e(z,f2),e(f2,mhe),e(mhe,gSo),e(f2,hSo),e(f2,$O),e($O,pSo),e(f2,_So),e(z,uSo),e(z,m2),e(m2,ghe),e(ghe,bSo),e(m2,vSo),e(m2,kO),e(kO,FSo),e(m2,TSo),e(z,MSo),e(z,g2),e(g2,hhe),e(hhe,ESo),e(g2,CSo),e(g2,SO),e(SO,wSo),e(g2,ASo),e(z,LSo),e(z,h2),e(h2,phe),e(phe,ySo),e(h2,xSo),e(h2,RO),e(RO,$So),e(h2,kSo),e(z,SSo),e(z,p2),e(p2,_he),e(_he,RSo),e(p2,PSo),e(p2,PO),e(PO,BSo),e(p2,ISo),e(z,NSo),e(z,_2),e(_2,uhe),e(uhe,qSo),e(_2,jSo),e(_2,BO),e(BO,DSo),e(_2,GSo),e(z,OSo),e(z,u2),e(u2,bhe),e(bhe,VSo),e(u2,XSo),e(u2,IO),e(IO,zSo),e(u2,WSo),e(z,QSo),e(z,b2),e(b2,vhe),e(vhe,HSo),e(b2,USo),e(b2,NO),e(NO,JSo),e(b2,YSo),e(z,KSo),e(z,v2),e(v2,Fhe),e(Fhe,ZSo),e(v2,eRo),e(v2,qO),e(qO,oRo),e(v2,rRo),e(z,tRo),e(z,F2),e(F2,The),e(The,aRo),e(F2,nRo),e(F2,jO),e(jO,sRo),e(F2,lRo),e(z,iRo),e(z,T2),e(T2,Mhe),e(Mhe,dRo),e(T2,cRo),e(T2,DO),e(DO,fRo),e(T2,mRo),e(z,gRo),e(z,M2),e(M2,Ehe),e(Ehe,hRo),e(M2,pRo),e(M2,GO),e(GO,_Ro),e(M2,uRo),e(z,bRo),e(z,E2),e(E2,Che),e(Che,vRo),e(E2,FRo),e(E2,OO),e(OO,TRo),e(E2,MRo),e(z,ERo),e(z,C2),e(C2,whe),e(whe,CRo),e(C2,wRo),e(C2,VO),e(VO,ARo),e(C2,LRo),e(z,yRo),e(z,w2),e(w2,Ahe),e(Ahe,xRo),e(w2,$Ro),e(w2,XO),e(XO,kRo),e(w2,SRo),e(z,RRo),e(z,A2),e(A2,Lhe),e(Lhe,PRo),e(A2,BRo),e(A2,zO),e(zO,IRo),e(A2,NRo),e(z,qRo),e(z,L2),e(L2,yhe),e(yhe,jRo),e(L2,DRo),e(L2,WO),e(WO,GRo),e(L2,ORo),e(z,VRo),e(z,y2),e(y2,xhe),e(xhe,XRo),e(y2,zRo),e(y2,QO),e(QO,WRo),e(y2,QRo),e(z,HRo),e(z,x2),e(x2,$he),e($he,URo),e(x2,JRo),e(x2,HO),e(HO,YRo),e(x2,KRo),e(z,ZRo),e(z,$2),e($2,khe),e(khe,ePo),e($2,oPo),e($2,UO),e(UO,rPo),e($2,tPo),e(z,aPo),e(z,k2),e(k2,She),e(She,nPo),e(k2,sPo),e(k2,JO),e(JO,lPo),e(k2,iPo),e(z,dPo),e(z,S2),e(S2,Rhe),e(Rhe,cPo),e(S2,fPo),e(S2,YO),e(YO,mPo),e(S2,gPo),e(z,hPo),e(z,R2),e(R2,Phe),e(Phe,pPo),e(R2,_Po),e(R2,KO),e(KO,uPo),e(R2,bPo),e(z,vPo),e(z,P2),e(P2,Bhe),e(Bhe,FPo),e(P2,TPo),e(P2,ZO),e(ZO,MPo),e(P2,EPo),e(z,CPo),e(z,B2),e(B2,Ihe),e(Ihe,wPo),e(B2,APo),e(B2,eV),e(eV,LPo),e(B2,yPo),e(z,xPo),e(z,I2),e(I2,Nhe),e(Nhe,$Po),e(I2,kPo),e(I2,oV),e(oV,SPo),e(I2,RPo),e(Ze,PPo),e(Ze,N2),e(N2,BPo),e(N2,qhe),e(qhe,IPo),e(N2,NPo),e(N2,jhe),e(jhe,qPo),e(Ze,jPo),M(q2,Ze,null),b(f,JXe,u),b(f,Ki,u),e(Ki,j2),e(j2,Dhe),M(Z6,Dhe,null),e(Ki,DPo),e(Ki,Ghe),e(Ghe,GPo),b(f,YXe,u),b(f,Ro,u),M(eL,Ro,null),e(Ro,OPo),e(Ro,Zi),e(Zi,VPo),e(Zi,rV),e(rV,XPo),e(Zi,zPo),e(Zi,tV),e(tV,WPo),e(Zi,QPo),e(Ro,HPo),e(Ro,oL),e(oL,UPo),e(oL,Ohe),e(Ohe,JPo),e(oL,YPo),e(Ro,KPo),e(Ro,ft),M(rL,ft,null),e(ft,ZPo),e(ft,Vhe),e(Vhe,eBo),e(ft,oBo),e(ft,ed),e(ed,rBo),e(ed,Xhe),e(Xhe,tBo),e(ed,aBo),e(ed,aV),e(aV,nBo),e(ed,sBo),e(ft,lBo),M(D2,ft,null),e(Ro,iBo),e(Ro,eo),M(tL,eo,null),e(eo,dBo),e(eo,zhe),e(zhe,cBo),e(eo,fBo),e(eo,ja),e(ja,mBo),e(ja,Whe),e(Whe,gBo),e(ja,hBo),e(ja,Qhe),e(Qhe,pBo),e(ja,_Bo),e(ja,Hhe),e(Hhe,uBo),e(ja,bBo),e(eo,vBo),e(eo,Q),e(Q,G2),e(G2,Uhe),e(Uhe,FBo),e(G2,TBo),e(G2,nV),e(nV,MBo),e(G2,EBo),e(Q,CBo),e(Q,O2),e(O2,Jhe),e(Jhe,wBo),e(O2,ABo),e(O2,sV),e(sV,LBo),e(O2,yBo),e(Q,xBo),e(Q,V2),e(V2,Yhe),e(Yhe,$Bo),e(V2,kBo),e(V2,lV),e(lV,SBo),e(V2,RBo),e(Q,PBo),e(Q,X2),e(X2,Khe),e(Khe,BBo),e(X2,IBo),e(X2,iV),e(iV,NBo),e(X2,qBo),e(Q,jBo),e(Q,z2),e(z2,Zhe),e(Zhe,DBo),e(z2,GBo),e(z2,dV),e(dV,OBo),e(z2,VBo),e(Q,XBo),e(Q,W2),e(W2,epe),e(epe,zBo),e(W2,WBo),e(W2,cV),e(cV,QBo),e(W2,HBo),e(Q,UBo),e(Q,Q2),e(Q2,ope),e(ope,JBo),e(Q2,YBo),e(Q2,fV),e(fV,KBo),e(Q2,ZBo),e(Q,eIo),e(Q,H2),e(H2,rpe),e(rpe,oIo),e(H2,rIo),e(H2,mV),e(mV,tIo),e(H2,aIo),e(Q,nIo),e(Q,U2),e(U2,tpe),e(tpe,sIo),e(U2,lIo),e(U2,gV),e(gV,iIo),e(U2,dIo),e(Q,cIo),e(Q,J2),e(J2,ape),e(ape,fIo),e(J2,mIo),e(J2,hV),e(hV,gIo),e(J2,hIo),e(Q,pIo),e(Q,Y2),e(Y2,npe),e(npe,_Io),e(Y2,uIo),e(Y2,pV),e(pV,bIo),e(Y2,vIo),e(Q,FIo),e(Q,K2),e(K2,spe),e(spe,TIo),e(K2,MIo),e(K2,_V),e(_V,EIo),e(K2,CIo),e(Q,wIo),e(Q,Z2),e(Z2,lpe),e(lpe,AIo),e(Z2,LIo),e(Z2,uV),e(uV,yIo),e(Z2,xIo),e(Q,$Io),e(Q,eb),e(eb,ipe),e(ipe,kIo),e(eb,SIo),e(eb,bV),e(bV,RIo),e(eb,PIo),e(Q,BIo),e(Q,ob),e(ob,dpe),e(dpe,IIo),e(ob,NIo),e(ob,vV),e(vV,qIo),e(ob,jIo),e(Q,DIo),e(Q,rb),e(rb,cpe),e(cpe,GIo),e(rb,OIo),e(rb,FV),e(FV,VIo),e(rb,XIo),e(Q,zIo),e(Q,tb),e(tb,fpe),e(fpe,WIo),e(tb,QIo),e(tb,TV),e(TV,HIo),e(tb,UIo),e(Q,JIo),e(Q,ab),e(ab,mpe),e(mpe,YIo),e(ab,KIo),e(ab,MV),e(MV,ZIo),e(ab,eNo),e(Q,oNo),e(Q,nb),e(nb,gpe),e(gpe,rNo),e(nb,tNo),e(nb,EV),e(EV,aNo),e(nb,nNo),e(Q,sNo),e(Q,sb),e(sb,hpe),e(hpe,lNo),e(sb,iNo),e(sb,CV),e(CV,dNo),e(sb,cNo),e(Q,fNo),e(Q,lb),e(lb,ppe),e(ppe,mNo),e(lb,gNo),e(lb,wV),e(wV,hNo),e(lb,pNo),e(Q,_No),e(Q,ib),e(ib,_pe),e(_pe,uNo),e(ib,bNo),e(ib,AV),e(AV,vNo),e(ib,FNo),e(Q,TNo),e(Q,db),e(db,upe),e(upe,MNo),e(db,ENo),e(db,LV),e(LV,CNo),e(db,wNo),e(Q,ANo),e(Q,cb),e(cb,bpe),e(bpe,LNo),e(cb,yNo),e(cb,yV),e(yV,xNo),e(cb,$No),e(Q,kNo),e(Q,fb),e(fb,vpe),e(vpe,SNo),e(fb,RNo),e(fb,xV),e(xV,PNo),e(fb,BNo),e(Q,INo),e(Q,mb),e(mb,Fpe),e(Fpe,NNo),e(mb,qNo),e(mb,$V),e($V,jNo),e(mb,DNo),e(Q,GNo),e(Q,gb),e(gb,Tpe),e(Tpe,ONo),e(gb,VNo),e(gb,kV),e(kV,XNo),e(gb,zNo),e(Q,WNo),e(Q,hb),e(hb,Mpe),e(Mpe,QNo),e(hb,HNo),e(hb,SV),e(SV,UNo),e(hb,JNo),e(Q,YNo),e(Q,pb),e(pb,Epe),e(Epe,KNo),e(pb,ZNo),e(pb,RV),e(RV,eqo),e(pb,oqo),e(Q,rqo),e(Q,_b),e(_b,Cpe),e(Cpe,tqo),e(_b,aqo),e(_b,PV),e(PV,nqo),e(_b,sqo),e(Q,lqo),e(Q,ub),e(ub,wpe),e(wpe,iqo),e(ub,dqo),e(ub,BV),e(BV,cqo),e(ub,fqo),e(Q,mqo),e(Q,bb),e(bb,Ape),e(Ape,gqo),e(bb,hqo),e(bb,IV),e(IV,pqo),e(bb,_qo),e(Q,uqo),e(Q,vb),e(vb,Lpe),e(Lpe,bqo),e(vb,vqo),e(vb,NV),e(NV,Fqo),e(vb,Tqo),e(Q,Mqo),e(Q,Fb),e(Fb,ype),e(ype,Eqo),e(Fb,Cqo),e(Fb,xpe),e(xpe,wqo),e(Fb,Aqo),e(Q,Lqo),e(Q,Tb),e(Tb,$pe),e($pe,yqo),e(Tb,xqo),e(Tb,qV),e(qV,$qo),e(Tb,kqo),e(Q,Sqo),e(Q,Mb),e(Mb,kpe),e(kpe,Rqo),e(Mb,Pqo),e(Mb,jV),e(jV,Bqo),e(Mb,Iqo),e(Q,Nqo),e(Q,Eb),e(Eb,Spe),e(Spe,qqo),e(Eb,jqo),e(Eb,DV),e(DV,Dqo),e(Eb,Gqo),e(Q,Oqo),e(Q,Cb),e(Cb,Rpe),e(Rpe,Vqo),e(Cb,Xqo),e(Cb,GV),e(GV,zqo),e(Cb,Wqo),e(eo,Qqo),e(eo,wb),e(wb,Hqo),e(wb,Ppe),e(Ppe,Uqo),e(wb,Jqo),e(wb,Bpe),e(Bpe,Yqo),e(eo,Kqo),M(Ab,eo,null),b(f,KXe,u),b(f,od,u),e(od,Lb),e(Lb,Ipe),M(aL,Ipe,null),e(od,Zqo),e(od,Npe),e(Npe,ejo),b(f,ZXe,u),b(f,Po,u),M(nL,Po,null),e(Po,ojo),e(Po,rd),e(rd,rjo),e(rd,OV),e(OV,tjo),e(rd,ajo),e(rd,VV),e(VV,njo),e(rd,sjo),e(Po,ljo),e(Po,sL),e(sL,ijo),e(sL,qpe),e(qpe,djo),e(sL,cjo),e(Po,fjo),e(Po,mt),M(lL,mt,null),e(mt,mjo),e(mt,jpe),e(jpe,gjo),e(mt,hjo),e(mt,td),e(td,pjo),e(td,Dpe),e(Dpe,_jo),e(td,ujo),e(td,XV),e(XV,bjo),e(td,vjo),e(mt,Fjo),M(yb,mt,null),e(Po,Tjo),e(Po,oo),M(iL,oo,null),e(oo,Mjo),e(oo,Gpe),e(Gpe,Ejo),e(oo,Cjo),e(oo,Da),e(Da,wjo),e(Da,Ope),e(Ope,Ajo),e(Da,Ljo),e(Da,Vpe),e(Vpe,yjo),e(Da,xjo),e(Da,Xpe),e(Xpe,$jo),e(Da,kjo),e(oo,Sjo),e(oo,me),e(me,xb),e(xb,zpe),e(zpe,Rjo),e(xb,Pjo),e(xb,zV),e(zV,Bjo),e(xb,Ijo),e(me,Njo),e(me,$b),e($b,Wpe),e(Wpe,qjo),e($b,jjo),e($b,WV),e(WV,Djo),e($b,Gjo),e(me,Ojo),e(me,kb),e(kb,Qpe),e(Qpe,Vjo),e(kb,Xjo),e(kb,QV),e(QV,zjo),e(kb,Wjo),e(me,Qjo),e(me,Sb),e(Sb,Hpe),e(Hpe,Hjo),e(Sb,Ujo),e(Sb,HV),e(HV,Jjo),e(Sb,Yjo),e(me,Kjo),e(me,Rb),e(Rb,Upe),e(Upe,Zjo),e(Rb,eDo),e(Rb,UV),e(UV,oDo),e(Rb,rDo),e(me,tDo),e(me,Pb),e(Pb,Jpe),e(Jpe,aDo),e(Pb,nDo),e(Pb,JV),e(JV,sDo),e(Pb,lDo),e(me,iDo),e(me,Bb),e(Bb,Ype),e(Ype,dDo),e(Bb,cDo),e(Bb,YV),e(YV,fDo),e(Bb,mDo),e(me,gDo),e(me,Ib),e(Ib,Kpe),e(Kpe,hDo),e(Ib,pDo),e(Ib,KV),e(KV,_Do),e(Ib,uDo),e(me,bDo),e(me,Nb),e(Nb,Zpe),e(Zpe,vDo),e(Nb,FDo),e(Nb,ZV),e(ZV,TDo),e(Nb,MDo),e(me,EDo),e(me,qb),e(qb,e_e),e(e_e,CDo),e(qb,wDo),e(qb,eX),e(eX,ADo),e(qb,LDo),e(me,yDo),e(me,jb),e(jb,o_e),e(o_e,xDo),e(jb,$Do),e(jb,oX),e(oX,kDo),e(jb,SDo),e(me,RDo),e(me,Db),e(Db,r_e),e(r_e,PDo),e(Db,BDo),e(Db,rX),e(rX,IDo),e(Db,NDo),e(me,qDo),e(me,Gb),e(Gb,t_e),e(t_e,jDo),e(Gb,DDo),e(Gb,tX),e(tX,GDo),e(Gb,ODo),e(me,VDo),e(me,Ob),e(Ob,a_e),e(a_e,XDo),e(Ob,zDo),e(Ob,aX),e(aX,WDo),e(Ob,QDo),e(me,HDo),e(me,Vb),e(Vb,n_e),e(n_e,UDo),e(Vb,JDo),e(Vb,nX),e(nX,YDo),e(Vb,KDo),e(me,ZDo),e(me,Xb),e(Xb,s_e),e(s_e,eGo),e(Xb,oGo),e(Xb,sX),e(sX,rGo),e(Xb,tGo),e(me,aGo),e(me,zb),e(zb,l_e),e(l_e,nGo),e(zb,sGo),e(zb,lX),e(lX,lGo),e(zb,iGo),e(me,dGo),e(me,Wb),e(Wb,i_e),e(i_e,cGo),e(Wb,fGo),e(Wb,iX),e(iX,mGo),e(Wb,gGo),e(me,hGo),e(me,Qb),e(Qb,d_e),e(d_e,pGo),e(Qb,_Go),e(Qb,dX),e(dX,uGo),e(Qb,bGo),e(oo,vGo),e(oo,Hb),e(Hb,FGo),e(Hb,c_e),e(c_e,TGo),e(Hb,MGo),e(Hb,f_e),e(f_e,EGo),e(oo,CGo),M(Ub,oo,null),b(f,eze,u),b(f,ad,u),e(ad,Jb),e(Jb,m_e),M(dL,m_e,null),e(ad,wGo),e(ad,g_e),e(g_e,AGo),b(f,oze,u),b(f,Bo,u),M(cL,Bo,null),e(Bo,LGo),e(Bo,nd),e(nd,yGo),e(nd,cX),e(cX,xGo),e(nd,$Go),e(nd,fX),e(fX,kGo),e(nd,SGo),e(Bo,RGo),e(Bo,fL),e(fL,PGo),e(fL,h_e),e(h_e,BGo),e(fL,IGo),e(Bo,NGo),e(Bo,gt),M(mL,gt,null),e(gt,qGo),e(gt,p_e),e(p_e,jGo),e(gt,DGo),e(gt,sd),e(sd,GGo),e(sd,__e),e(__e,OGo),e(sd,VGo),e(sd,mX),e(mX,XGo),e(sd,zGo),e(gt,WGo),M(Yb,gt,null),e(Bo,QGo),e(Bo,ro),M(gL,ro,null),e(ro,HGo),e(ro,u_e),e(u_e,UGo),e(ro,JGo),e(ro,Ga),e(Ga,YGo),e(Ga,b_e),e(b_e,KGo),e(Ga,ZGo),e(Ga,v_e),e(v_e,eOo),e(Ga,oOo),e(Ga,F_e),e(F_e,rOo),e(Ga,tOo),e(ro,aOo),e(ro,N),e(N,Kb),e(Kb,T_e),e(T_e,nOo),e(Kb,sOo),e(Kb,gX),e(gX,lOo),e(Kb,iOo),e(N,dOo),e(N,Zb),e(Zb,M_e),e(M_e,cOo),e(Zb,fOo),e(Zb,hX),e(hX,mOo),e(Zb,gOo),e(N,hOo),e(N,e3),e(e3,E_e),e(E_e,pOo),e(e3,_Oo),e(e3,pX),e(pX,uOo),e(e3,bOo),e(N,vOo),e(N,o3),e(o3,C_e),e(C_e,FOo),e(o3,TOo),e(o3,_X),e(_X,MOo),e(o3,EOo),e(N,COo),e(N,r3),e(r3,w_e),e(w_e,wOo),e(r3,AOo),e(r3,uX),e(uX,LOo),e(r3,yOo),e(N,xOo),e(N,t3),e(t3,A_e),e(A_e,$Oo),e(t3,kOo),e(t3,bX),e(bX,SOo),e(t3,ROo),e(N,POo),e(N,a3),e(a3,L_e),e(L_e,BOo),e(a3,IOo),e(a3,vX),e(vX,NOo),e(a3,qOo),e(N,jOo),e(N,n3),e(n3,y_e),e(y_e,DOo),e(n3,GOo),e(n3,FX),e(FX,OOo),e(n3,VOo),e(N,XOo),e(N,s3),e(s3,x_e),e(x_e,zOo),e(s3,WOo),e(s3,TX),e(TX,QOo),e(s3,HOo),e(N,UOo),e(N,l3),e(l3,$_e),e($_e,JOo),e(l3,YOo),e(l3,MX),e(MX,KOo),e(l3,ZOo),e(N,eVo),e(N,i3),e(i3,k_e),e(k_e,oVo),e(i3,rVo),e(i3,EX),e(EX,tVo),e(i3,aVo),e(N,nVo),e(N,d3),e(d3,S_e),e(S_e,sVo),e(d3,lVo),e(d3,CX),e(CX,iVo),e(d3,dVo),e(N,cVo),e(N,c3),e(c3,R_e),e(R_e,fVo),e(c3,mVo),e(c3,wX),e(wX,gVo),e(c3,hVo),e(N,pVo),e(N,f3),e(f3,P_e),e(P_e,_Vo),e(f3,uVo),e(f3,AX),e(AX,bVo),e(f3,vVo),e(N,FVo),e(N,m3),e(m3,B_e),e(B_e,TVo),e(m3,MVo),e(m3,LX),e(LX,EVo),e(m3,CVo),e(N,wVo),e(N,g3),e(g3,I_e),e(I_e,AVo),e(g3,LVo),e(g3,yX),e(yX,yVo),e(g3,xVo),e(N,$Vo),e(N,h3),e(h3,N_e),e(N_e,kVo),e(h3,SVo),e(h3,xX),e(xX,RVo),e(h3,PVo),e(N,BVo),e(N,p3),e(p3,q_e),e(q_e,IVo),e(p3,NVo),e(p3,$X),e($X,qVo),e(p3,jVo),e(N,DVo),e(N,_3),e(_3,j_e),e(j_e,GVo),e(_3,OVo),e(_3,kX),e(kX,VVo),e(_3,XVo),e(N,zVo),e(N,u3),e(u3,D_e),e(D_e,WVo),e(u3,QVo),e(u3,SX),e(SX,HVo),e(u3,UVo),e(N,JVo),e(N,b3),e(b3,G_e),e(G_e,YVo),e(b3,KVo),e(b3,RX),e(RX,ZVo),e(b3,eXo),e(N,oXo),e(N,v3),e(v3,O_e),e(O_e,rXo),e(v3,tXo),e(v3,PX),e(PX,aXo),e(v3,nXo),e(N,sXo),e(N,F3),e(F3,V_e),e(V_e,lXo),e(F3,iXo),e(F3,BX),e(BX,dXo),e(F3,cXo),e(N,fXo),e(N,T3),e(T3,X_e),e(X_e,mXo),e(T3,gXo),e(T3,IX),e(IX,hXo),e(T3,pXo),e(N,_Xo),e(N,M3),e(M3,z_e),e(z_e,uXo),e(M3,bXo),e(M3,NX),e(NX,vXo),e(M3,FXo),e(N,TXo),e(N,E3),e(E3,W_e),e(W_e,MXo),e(E3,EXo),e(E3,qX),e(qX,CXo),e(E3,wXo),e(N,AXo),e(N,C3),e(C3,Q_e),e(Q_e,LXo),e(C3,yXo),e(C3,jX),e(jX,xXo),e(C3,$Xo),e(N,kXo),e(N,w3),e(w3,H_e),e(H_e,SXo),e(w3,RXo),e(w3,DX),e(DX,PXo),e(w3,BXo),e(N,IXo),e(N,A3),e(A3,U_e),e(U_e,NXo),e(A3,qXo),e(A3,GX),e(GX,jXo),e(A3,DXo),e(N,GXo),e(N,L3),e(L3,J_e),e(J_e,OXo),e(L3,VXo),e(L3,OX),e(OX,XXo),e(L3,zXo),e(N,WXo),e(N,y3),e(y3,Y_e),e(Y_e,QXo),e(y3,HXo),e(y3,VX),e(VX,UXo),e(y3,JXo),e(N,YXo),e(N,x3),e(x3,K_e),e(K_e,KXo),e(x3,ZXo),e(x3,XX),e(XX,ezo),e(x3,ozo),e(N,rzo),e(N,$3),e($3,Z_e),e(Z_e,tzo),e($3,azo),e($3,zX),e(zX,nzo),e($3,szo),e(N,lzo),e(N,k3),e(k3,eue),e(eue,izo),e(k3,dzo),e(k3,WX),e(WX,czo),e(k3,fzo),e(N,mzo),e(N,S3),e(S3,oue),e(oue,gzo),e(S3,hzo),e(S3,QX),e(QX,pzo),e(S3,_zo),e(N,uzo),e(N,R3),e(R3,rue),e(rue,bzo),e(R3,vzo),e(R3,HX),e(HX,Fzo),e(R3,Tzo),e(N,Mzo),e(N,P3),e(P3,tue),e(tue,Ezo),e(P3,Czo),e(P3,UX),e(UX,wzo),e(P3,Azo),e(N,Lzo),e(N,B3),e(B3,aue),e(aue,yzo),e(B3,xzo),e(B3,JX),e(JX,$zo),e(B3,kzo),e(N,Szo),e(N,I3),e(I3,nue),e(nue,Rzo),e(I3,Pzo),e(I3,YX),e(YX,Bzo),e(I3,Izo),e(N,Nzo),e(N,N3),e(N3,sue),e(sue,qzo),e(N3,jzo),e(N3,KX),e(KX,Dzo),e(N3,Gzo),e(N,Ozo),e(N,q3),e(q3,lue),e(lue,Vzo),e(q3,Xzo),e(q3,ZX),e(ZX,zzo),e(q3,Wzo),e(N,Qzo),e(N,j3),e(j3,iue),e(iue,Hzo),e(j3,Uzo),e(j3,ez),e(ez,Jzo),e(j3,Yzo),e(N,Kzo),e(N,D3),e(D3,due),e(due,Zzo),e(D3,eWo),e(D3,oz),e(oz,oWo),e(D3,rWo),e(N,tWo),e(N,G3),e(G3,cue),e(cue,aWo),e(G3,nWo),e(G3,rz),e(rz,sWo),e(G3,lWo),e(N,iWo),e(N,O3),e(O3,fue),e(fue,dWo),e(O3,cWo),e(O3,tz),e(tz,fWo),e(O3,mWo),e(N,gWo),e(N,V3),e(V3,mue),e(mue,hWo),e(V3,pWo),e(V3,az),e(az,_Wo),e(V3,uWo),e(N,bWo),e(N,X3),e(X3,gue),e(gue,vWo),e(X3,FWo),e(X3,nz),e(nz,TWo),e(X3,MWo),e(N,EWo),e(N,z3),e(z3,hue),e(hue,CWo),e(z3,wWo),e(z3,sz),e(sz,AWo),e(z3,LWo),e(N,yWo),e(N,W3),e(W3,pue),e(pue,xWo),e(W3,$Wo),e(W3,lz),e(lz,kWo),e(W3,SWo),e(N,RWo),e(N,Q3),e(Q3,_ue),e(_ue,PWo),e(Q3,BWo),e(Q3,iz),e(iz,IWo),e(Q3,NWo),e(ro,qWo),e(ro,H3),e(H3,jWo),e(H3,uue),e(uue,DWo),e(H3,GWo),e(H3,bue),e(bue,OWo),e(ro,VWo),M(U3,ro,null),b(f,rze,u),b(f,ld,u),e(ld,J3),e(J3,vue),M(hL,vue,null),e(ld,XWo),e(ld,Fue),e(Fue,zWo),b(f,tze,u),b(f,Io,u),M(pL,Io,null),e(Io,WWo),e(Io,id),e(id,QWo),e(id,dz),e(dz,HWo),e(id,UWo),e(id,cz),e(cz,JWo),e(id,YWo),e(Io,KWo),e(Io,_L),e(_L,ZWo),e(_L,Tue),e(Tue,eQo),e(_L,oQo),e(Io,rQo),e(Io,ht),M(uL,ht,null),e(ht,tQo),e(ht,Mue),e(Mue,aQo),e(ht,nQo),e(ht,dd),e(dd,sQo),e(dd,Eue),e(Eue,lQo),e(dd,iQo),e(dd,fz),e(fz,dQo),e(dd,cQo),e(ht,fQo),M(Y3,ht,null),e(Io,mQo),e(Io,to),M(bL,to,null),e(to,gQo),e(to,Cue),e(Cue,hQo),e(to,pQo),e(to,Oa),e(Oa,_Qo),e(Oa,wue),e(wue,uQo),e(Oa,bQo),e(Oa,Aue),e(Aue,vQo),e(Oa,FQo),e(Oa,Lue),e(Lue,TQo),e(Oa,MQo),e(to,EQo),e(to,Z),e(Z,K3),e(K3,yue),e(yue,CQo),e(K3,wQo),e(K3,mz),e(mz,AQo),e(K3,LQo),e(Z,yQo),e(Z,Z3),e(Z3,xue),e(xue,xQo),e(Z3,$Qo),e(Z3,gz),e(gz,kQo),e(Z3,SQo),e(Z,RQo),e(Z,ev),e(ev,$ue),e($ue,PQo),e(ev,BQo),e(ev,hz),e(hz,IQo),e(ev,NQo),e(Z,qQo),e(Z,ov),e(ov,kue),e(kue,jQo),e(ov,DQo),e(ov,pz),e(pz,GQo),e(ov,OQo),e(Z,VQo),e(Z,rv),e(rv,Sue),e(Sue,XQo),e(rv,zQo),e(rv,_z),e(_z,WQo),e(rv,QQo),e(Z,HQo),e(Z,tv),e(tv,Rue),e(Rue,UQo),e(tv,JQo),e(tv,uz),e(uz,YQo),e(tv,KQo),e(Z,ZQo),e(Z,av),e(av,Pue),e(Pue,eHo),e(av,oHo),e(av,bz),e(bz,rHo),e(av,tHo),e(Z,aHo),e(Z,nv),e(nv,Bue),e(Bue,nHo),e(nv,sHo),e(nv,vz),e(vz,lHo),e(nv,iHo),e(Z,dHo),e(Z,sv),e(sv,Iue),e(Iue,cHo),e(sv,fHo),e(sv,Fz),e(Fz,mHo),e(sv,gHo),e(Z,hHo),e(Z,lv),e(lv,Nue),e(Nue,pHo),e(lv,_Ho),e(lv,Tz),e(Tz,uHo),e(lv,bHo),e(Z,vHo),e(Z,iv),e(iv,que),e(que,FHo),e(iv,THo),e(iv,Mz),e(Mz,MHo),e(iv,EHo),e(Z,CHo),e(Z,dv),e(dv,jue),e(jue,wHo),e(dv,AHo),e(dv,Ez),e(Ez,LHo),e(dv,yHo),e(Z,xHo),e(Z,cv),e(cv,Due),e(Due,$Ho),e(cv,kHo),e(cv,Cz),e(Cz,SHo),e(cv,RHo),e(Z,PHo),e(Z,fv),e(fv,Gue),e(Gue,BHo),e(fv,IHo),e(fv,wz),e(wz,NHo),e(fv,qHo),e(Z,jHo),e(Z,mv),e(mv,Oue),e(Oue,DHo),e(mv,GHo),e(mv,Az),e(Az,OHo),e(mv,VHo),e(Z,XHo),e(Z,gv),e(gv,Vue),e(Vue,zHo),e(gv,WHo),e(gv,Lz),e(Lz,QHo),e(gv,HHo),e(Z,UHo),e(Z,hv),e(hv,Xue),e(Xue,JHo),e(hv,YHo),e(hv,yz),e(yz,KHo),e(hv,ZHo),e(Z,eUo),e(Z,pv),e(pv,zue),e(zue,oUo),e(pv,rUo),e(pv,xz),e(xz,tUo),e(pv,aUo),e(Z,nUo),e(Z,_v),e(_v,Wue),e(Wue,sUo),e(_v,lUo),e(_v,$z),e($z,iUo),e(_v,dUo),e(Z,cUo),e(Z,uv),e(uv,Que),e(Que,fUo),e(uv,mUo),e(uv,kz),e(kz,gUo),e(uv,hUo),e(Z,pUo),e(Z,bv),e(bv,Hue),e(Hue,_Uo),e(bv,uUo),e(bv,Sz),e(Sz,bUo),e(bv,vUo),e(Z,FUo),e(Z,vv),e(vv,Uue),e(Uue,TUo),e(vv,MUo),e(vv,Rz),e(Rz,EUo),e(vv,CUo),e(Z,wUo),e(Z,Fv),e(Fv,Jue),e(Jue,AUo),e(Fv,LUo),e(Fv,Pz),e(Pz,yUo),e(Fv,xUo),e(Z,$Uo),e(Z,Tv),e(Tv,Yue),e(Yue,kUo),e(Tv,SUo),e(Tv,Bz),e(Bz,RUo),e(Tv,PUo),e(Z,BUo),e(Z,Mv),e(Mv,Kue),e(Kue,IUo),e(Mv,NUo),e(Mv,Iz),e(Iz,qUo),e(Mv,jUo),e(Z,DUo),e(Z,Ev),e(Ev,Zue),e(Zue,GUo),e(Ev,OUo),e(Ev,Nz),e(Nz,VUo),e(Ev,XUo),e(Z,zUo),e(Z,Cv),e(Cv,e1e),e(e1e,WUo),e(Cv,QUo),e(Cv,qz),e(qz,HUo),e(Cv,UUo),e(Z,JUo),e(Z,wv),e(wv,o1e),e(o1e,YUo),e(wv,KUo),e(wv,jz),e(jz,ZUo),e(wv,eJo),e(Z,oJo),e(Z,Av),e(Av,r1e),e(r1e,rJo),e(Av,tJo),e(Av,Dz),e(Dz,aJo),e(Av,nJo),e(Z,sJo),e(Z,Lv),e(Lv,t1e),e(t1e,lJo),e(Lv,iJo),e(Lv,Gz),e(Gz,dJo),e(Lv,cJo),e(to,fJo),e(to,yv),e(yv,mJo),e(yv,a1e),e(a1e,gJo),e(yv,hJo),e(yv,n1e),e(n1e,pJo),e(to,_Jo),M(xv,to,null),b(f,aze,u),b(f,cd,u),e(cd,$v),e($v,s1e),M(vL,s1e,null),e(cd,uJo),e(cd,l1e),e(l1e,bJo),b(f,nze,u),b(f,No,u),M(FL,No,null),e(No,vJo),e(No,fd),e(fd,FJo),e(fd,Oz),e(Oz,TJo),e(fd,MJo),e(fd,Vz),e(Vz,EJo),e(fd,CJo),e(No,wJo),e(No,TL),e(TL,AJo),e(TL,i1e),e(i1e,LJo),e(TL,yJo),e(No,xJo),e(No,pt),M(ML,pt,null),e(pt,$Jo),e(pt,d1e),e(d1e,kJo),e(pt,SJo),e(pt,md),e(md,RJo),e(md,c1e),e(c1e,PJo),e(md,BJo),e(md,Xz),e(Xz,IJo),e(md,NJo),e(pt,qJo),M(kv,pt,null),e(No,jJo),e(No,ao),M(EL,ao,null),e(ao,DJo),e(ao,f1e),e(f1e,GJo),e(ao,OJo),e(ao,Va),e(Va,VJo),e(Va,m1e),e(m1e,XJo),e(Va,zJo),e(Va,g1e),e(g1e,WJo),e(Va,QJo),e(Va,h1e),e(h1e,HJo),e(Va,UJo),e(ao,JJo),e(ao,qo),e(qo,Sv),e(Sv,p1e),e(p1e,YJo),e(Sv,KJo),e(Sv,zz),e(zz,ZJo),e(Sv,eYo),e(qo,oYo),e(qo,Rv),e(Rv,_1e),e(_1e,rYo),e(Rv,tYo),e(Rv,Wz),e(Wz,aYo),e(Rv,nYo),e(qo,sYo),e(qo,Pv),e(Pv,u1e),e(u1e,lYo),e(Pv,iYo),e(Pv,Qz),e(Qz,dYo),e(Pv,cYo),e(qo,fYo),e(qo,Bv),e(Bv,b1e),e(b1e,mYo),e(Bv,gYo),e(Bv,Hz),e(Hz,hYo),e(Bv,pYo),e(qo,_Yo),e(qo,Iv),e(Iv,v1e),e(v1e,uYo),e(Iv,bYo),e(Iv,Uz),e(Uz,vYo),e(Iv,FYo),e(qo,TYo),e(qo,Nv),e(Nv,F1e),e(F1e,MYo),e(Nv,EYo),e(Nv,Jz),e(Jz,CYo),e(Nv,wYo),e(ao,AYo),e(ao,qv),e(qv,LYo),e(qv,T1e),e(T1e,yYo),e(qv,xYo),e(qv,M1e),e(M1e,$Yo),e(ao,kYo),M(jv,ao,null),b(f,sze,u),b(f,gd,u),e(gd,Dv),e(Dv,E1e),M(CL,E1e,null),e(gd,SYo),e(gd,C1e),e(C1e,RYo),b(f,lze,u),b(f,jo,u),M(wL,jo,null),e(jo,PYo),e(jo,hd),e(hd,BYo),e(hd,Yz),e(Yz,IYo),e(hd,NYo),e(hd,Kz),e(Kz,qYo),e(hd,jYo),e(jo,DYo),e(jo,AL),e(AL,GYo),e(AL,w1e),e(w1e,OYo),e(AL,VYo),e(jo,XYo),e(jo,_t),M(LL,_t,null),e(_t,zYo),e(_t,A1e),e(A1e,WYo),e(_t,QYo),e(_t,pd),e(pd,HYo),e(pd,L1e),e(L1e,UYo),e(pd,JYo),e(pd,Zz),e(Zz,YYo),e(pd,KYo),e(_t,ZYo),M(Gv,_t,null),e(jo,eKo),e(jo,no),M(yL,no,null),e(no,oKo),e(no,y1e),e(y1e,rKo),e(no,tKo),e(no,Xa),e(Xa,aKo),e(Xa,x1e),e(x1e,nKo),e(Xa,sKo),e(Xa,$1e),e($1e,lKo),e(Xa,iKo),e(Xa,k1e),e(k1e,dKo),e(Xa,cKo),e(no,fKo),e(no,U),e(U,Ov),e(Ov,S1e),e(S1e,mKo),e(Ov,gKo),e(Ov,eW),e(eW,hKo),e(Ov,pKo),e(U,_Ko),e(U,Vv),e(Vv,R1e),e(R1e,uKo),e(Vv,bKo),e(Vv,oW),e(oW,vKo),e(Vv,FKo),e(U,TKo),e(U,Xv),e(Xv,P1e),e(P1e,MKo),e(Xv,EKo),e(Xv,rW),e(rW,CKo),e(Xv,wKo),e(U,AKo),e(U,zv),e(zv,B1e),e(B1e,LKo),e(zv,yKo),e(zv,tW),e(tW,xKo),e(zv,$Ko),e(U,kKo),e(U,Wv),e(Wv,I1e),e(I1e,SKo),e(Wv,RKo),e(Wv,aW),e(aW,PKo),e(Wv,BKo),e(U,IKo),e(U,Qv),e(Qv,N1e),e(N1e,NKo),e(Qv,qKo),e(Qv,nW),e(nW,jKo),e(Qv,DKo),e(U,GKo),e(U,Hv),e(Hv,q1e),e(q1e,OKo),e(Hv,VKo),e(Hv,sW),e(sW,XKo),e(Hv,zKo),e(U,WKo),e(U,Uv),e(Uv,j1e),e(j1e,QKo),e(Uv,HKo),e(Uv,lW),e(lW,UKo),e(Uv,JKo),e(U,YKo),e(U,Jv),e(Jv,D1e),e(D1e,KKo),e(Jv,ZKo),e(Jv,iW),e(iW,eZo),e(Jv,oZo),e(U,rZo),e(U,Yv),e(Yv,G1e),e(G1e,tZo),e(Yv,aZo),e(Yv,dW),e(dW,nZo),e(Yv,sZo),e(U,lZo),e(U,Kv),e(Kv,O1e),e(O1e,iZo),e(Kv,dZo),e(Kv,cW),e(cW,cZo),e(Kv,fZo),e(U,mZo),e(U,Zv),e(Zv,V1e),e(V1e,gZo),e(Zv,hZo),e(Zv,fW),e(fW,pZo),e(Zv,_Zo),e(U,uZo),e(U,eF),e(eF,X1e),e(X1e,bZo),e(eF,vZo),e(eF,mW),e(mW,FZo),e(eF,TZo),e(U,MZo),e(U,oF),e(oF,z1e),e(z1e,EZo),e(oF,CZo),e(oF,gW),e(gW,wZo),e(oF,AZo),e(U,LZo),e(U,rF),e(rF,W1e),e(W1e,yZo),e(rF,xZo),e(rF,hW),e(hW,$Zo),e(rF,kZo),e(U,SZo),e(U,tF),e(tF,Q1e),e(Q1e,RZo),e(tF,PZo),e(tF,pW),e(pW,BZo),e(tF,IZo),e(U,NZo),e(U,aF),e(aF,H1e),e(H1e,qZo),e(aF,jZo),e(aF,_W),e(_W,DZo),e(aF,GZo),e(U,OZo),e(U,nF),e(nF,U1e),e(U1e,VZo),e(nF,XZo),e(nF,uW),e(uW,zZo),e(nF,WZo),e(U,QZo),e(U,sF),e(sF,J1e),e(J1e,HZo),e(sF,UZo),e(sF,bW),e(bW,JZo),e(sF,YZo),e(U,KZo),e(U,lF),e(lF,Y1e),e(Y1e,ZZo),e(lF,eer),e(lF,vW),e(vW,oer),e(lF,rer),e(U,ter),e(U,iF),e(iF,K1e),e(K1e,aer),e(iF,ner),e(iF,FW),e(FW,ser),e(iF,ler),e(U,ier),e(U,dF),e(dF,Z1e),e(Z1e,der),e(dF,cer),e(dF,TW),e(TW,fer),e(dF,mer),e(U,ger),e(U,cF),e(cF,e2e),e(e2e,her),e(cF,per),e(cF,MW),e(MW,_er),e(cF,uer),e(U,ber),e(U,fF),e(fF,o2e),e(o2e,ver),e(fF,Fer),e(fF,EW),e(EW,Ter),e(fF,Mer),e(U,Eer),e(U,mF),e(mF,r2e),e(r2e,Cer),e(mF,wer),e(mF,CW),e(CW,Aer),e(mF,Ler),e(U,yer),e(U,gF),e(gF,t2e),e(t2e,xer),e(gF,$er),e(gF,wW),e(wW,ker),e(gF,Ser),e(U,Rer),e(U,hF),e(hF,a2e),e(a2e,Per),e(hF,Ber),e(hF,AW),e(AW,Ier),e(hF,Ner),e(U,qer),e(U,pF),e(pF,n2e),e(n2e,jer),e(pF,Der),e(pF,LW),e(LW,Ger),e(pF,Oer),e(U,Ver),e(U,_F),e(_F,s2e),e(s2e,Xer),e(_F,zer),e(_F,yW),e(yW,Wer),e(_F,Qer),e(U,Her),e(U,uF),e(uF,l2e),e(l2e,Uer),e(uF,Jer),e(uF,xW),e(xW,Yer),e(uF,Ker),e(U,Zer),e(U,bF),e(bF,i2e),e(i2e,eor),e(bF,oor),e(bF,$W),e($W,ror),e(bF,tor),e(U,aor),e(U,vF),e(vF,d2e),e(d2e,nor),e(vF,sor),e(vF,kW),e(kW,lor),e(vF,ior),e(U,dor),e(U,FF),e(FF,c2e),e(c2e,cor),e(FF,mor),e(FF,SW),e(SW,gor),e(FF,hor),e(U,por),e(U,TF),e(TF,f2e),e(f2e,_or),e(TF,uor),e(TF,RW),e(RW,bor),e(TF,vor),e(U,For),e(U,MF),e(MF,m2e),e(m2e,Tor),e(MF,Mor),e(MF,PW),e(PW,Eor),e(MF,Cor),e(U,wor),e(U,EF),e(EF,g2e),e(g2e,Aor),e(EF,Lor),e(EF,BW),e(BW,yor),e(EF,xor),e(no,$or),e(no,CF),e(CF,kor),e(CF,h2e),e(h2e,Sor),e(CF,Ror),e(CF,p2e),e(p2e,Por),e(no,Bor),M(wF,no,null),b(f,ize,u),b(f,_d,u),e(_d,AF),e(AF,_2e),M(xL,_2e,null),e(_d,Ior),e(_d,u2e),e(u2e,Nor),b(f,dze,u),b(f,Do,u),M($L,Do,null),e(Do,qor),e(Do,ud),e(ud,jor),e(ud,IW),e(IW,Dor),e(ud,Gor),e(ud,NW),e(NW,Oor),e(ud,Vor),e(Do,Xor),e(Do,kL),e(kL,zor),e(kL,b2e),e(b2e,Wor),e(kL,Qor),e(Do,Hor),e(Do,ut),M(SL,ut,null),e(ut,Uor),e(ut,v2e),e(v2e,Jor),e(ut,Yor),e(ut,bd),e(bd,Kor),e(bd,F2e),e(F2e,Zor),e(bd,err),e(bd,qW),e(qW,orr),e(bd,rrr),e(ut,trr),M(LF,ut,null),e(Do,arr),e(Do,so),M(RL,so,null),e(so,nrr),e(so,T2e),e(T2e,srr),e(so,lrr),e(so,za),e(za,irr),e(za,M2e),e(M2e,drr),e(za,crr),e(za,E2e),e(E2e,frr),e(za,mrr),e(za,C2e),e(C2e,grr),e(za,hrr),e(so,prr),e(so,V),e(V,yF),e(yF,w2e),e(w2e,_rr),e(yF,urr),e(yF,jW),e(jW,brr),e(yF,vrr),e(V,Frr),e(V,xF),e(xF,A2e),e(A2e,Trr),e(xF,Mrr),e(xF,DW),e(DW,Err),e(xF,Crr),e(V,wrr),e(V,$F),e($F,L2e),e(L2e,Arr),e($F,Lrr),e($F,GW),e(GW,yrr),e($F,xrr),e(V,$rr),e(V,kF),e(kF,y2e),e(y2e,krr),e(kF,Srr),e(kF,OW),e(OW,Rrr),e(kF,Prr),e(V,Brr),e(V,SF),e(SF,x2e),e(x2e,Irr),e(SF,Nrr),e(SF,VW),e(VW,qrr),e(SF,jrr),e(V,Drr),e(V,RF),e(RF,$2e),e($2e,Grr),e(RF,Orr),e(RF,XW),e(XW,Vrr),e(RF,Xrr),e(V,zrr),e(V,PF),e(PF,k2e),e(k2e,Wrr),e(PF,Qrr),e(PF,zW),e(zW,Hrr),e(PF,Urr),e(V,Jrr),e(V,BF),e(BF,S2e),e(S2e,Yrr),e(BF,Krr),e(BF,WW),e(WW,Zrr),e(BF,etr),e(V,otr),e(V,IF),e(IF,R2e),e(R2e,rtr),e(IF,ttr),e(IF,QW),e(QW,atr),e(IF,ntr),e(V,str),e(V,NF),e(NF,P2e),e(P2e,ltr),e(NF,itr),e(NF,HW),e(HW,dtr),e(NF,ctr),e(V,ftr),e(V,qF),e(qF,B2e),e(B2e,mtr),e(qF,gtr),e(qF,UW),e(UW,htr),e(qF,ptr),e(V,_tr),e(V,jF),e(jF,I2e),e(I2e,utr),e(jF,btr),e(jF,JW),e(JW,vtr),e(jF,Ftr),e(V,Ttr),e(V,DF),e(DF,N2e),e(N2e,Mtr),e(DF,Etr),e(DF,YW),e(YW,Ctr),e(DF,wtr),e(V,Atr),e(V,GF),e(GF,q2e),e(q2e,Ltr),e(GF,ytr),e(GF,KW),e(KW,xtr),e(GF,$tr),e(V,ktr),e(V,OF),e(OF,j2e),e(j2e,Str),e(OF,Rtr),e(OF,ZW),e(ZW,Ptr),e(OF,Btr),e(V,Itr),e(V,VF),e(VF,D2e),e(D2e,Ntr),e(VF,qtr),e(VF,eQ),e(eQ,jtr),e(VF,Dtr),e(V,Gtr),e(V,XF),e(XF,G2e),e(G2e,Otr),e(XF,Vtr),e(XF,oQ),e(oQ,Xtr),e(XF,ztr),e(V,Wtr),e(V,zF),e(zF,O2e),e(O2e,Qtr),e(zF,Htr),e(zF,rQ),e(rQ,Utr),e(zF,Jtr),e(V,Ytr),e(V,WF),e(WF,V2e),e(V2e,Ktr),e(WF,Ztr),e(WF,tQ),e(tQ,ear),e(WF,oar),e(V,rar),e(V,QF),e(QF,X2e),e(X2e,tar),e(QF,aar),e(QF,aQ),e(aQ,nar),e(QF,sar),e(V,lar),e(V,HF),e(HF,z2e),e(z2e,iar),e(HF,dar),e(HF,nQ),e(nQ,car),e(HF,far),e(V,mar),e(V,UF),e(UF,W2e),e(W2e,gar),e(UF,har),e(UF,sQ),e(sQ,par),e(UF,_ar),e(V,uar),e(V,JF),e(JF,Q2e),e(Q2e,bar),e(JF,Far),e(JF,lQ),e(lQ,Tar),e(JF,Mar),e(V,Ear),e(V,YF),e(YF,H2e),e(H2e,Car),e(YF,war),e(YF,iQ),e(iQ,Aar),e(YF,Lar),e(V,yar),e(V,KF),e(KF,U2e),e(U2e,xar),e(KF,$ar),e(KF,dQ),e(dQ,kar),e(KF,Sar),e(V,Rar),e(V,ZF),e(ZF,J2e),e(J2e,Par),e(ZF,Bar),e(ZF,cQ),e(cQ,Iar),e(ZF,Nar),e(V,qar),e(V,eT),e(eT,Y2e),e(Y2e,jar),e(eT,Dar),e(eT,fQ),e(fQ,Gar),e(eT,Oar),e(V,Var),e(V,oT),e(oT,K2e),e(K2e,Xar),e(oT,zar),e(oT,mQ),e(mQ,War),e(oT,Qar),e(V,Har),e(V,rT),e(rT,Z2e),e(Z2e,Uar),e(rT,Jar),e(rT,gQ),e(gQ,Yar),e(rT,Kar),e(V,Zar),e(V,tT),e(tT,ebe),e(ebe,enr),e(tT,onr),e(tT,hQ),e(hQ,rnr),e(tT,tnr),e(V,anr),e(V,aT),e(aT,obe),e(obe,nnr),e(aT,snr),e(aT,pQ),e(pQ,lnr),e(aT,inr),e(V,dnr),e(V,nT),e(nT,rbe),e(rbe,cnr),e(nT,fnr),e(nT,_Q),e(_Q,mnr),e(nT,gnr),e(V,hnr),e(V,sT),e(sT,tbe),e(tbe,pnr),e(sT,_nr),e(sT,uQ),e(uQ,unr),e(sT,bnr),e(V,vnr),e(V,lT),e(lT,abe),e(abe,Fnr),e(lT,Tnr),e(lT,bQ),e(bQ,Mnr),e(lT,Enr),e(V,Cnr),e(V,iT),e(iT,nbe),e(nbe,wnr),e(iT,Anr),e(iT,vQ),e(vQ,Lnr),e(iT,ynr),e(V,xnr),e(V,dT),e(dT,sbe),e(sbe,$nr),e(dT,knr),e(dT,FQ),e(FQ,Snr),e(dT,Rnr),e(V,Pnr),e(V,cT),e(cT,lbe),e(lbe,Bnr),e(cT,Inr),e(cT,TQ),e(TQ,Nnr),e(cT,qnr),e(V,jnr),e(V,fT),e(fT,ibe),e(ibe,Dnr),e(fT,Gnr),e(fT,MQ),e(MQ,Onr),e(fT,Vnr),e(V,Xnr),e(V,mT),e(mT,dbe),e(dbe,znr),e(mT,Wnr),e(mT,EQ),e(EQ,Qnr),e(mT,Hnr),e(V,Unr),e(V,gT),e(gT,cbe),e(cbe,Jnr),e(gT,Ynr),e(gT,CQ),e(CQ,Knr),e(gT,Znr),e(V,esr),e(V,hT),e(hT,fbe),e(fbe,osr),e(hT,rsr),e(hT,wQ),e(wQ,tsr),e(hT,asr),e(V,nsr),e(V,pT),e(pT,mbe),e(mbe,ssr),e(pT,lsr),e(pT,AQ),e(AQ,isr),e(pT,dsr),e(so,csr),e(so,_T),e(_T,fsr),e(_T,gbe),e(gbe,msr),e(_T,gsr),e(_T,hbe),e(hbe,hsr),e(so,psr),M(uT,so,null),b(f,cze,u),b(f,vd,u),e(vd,bT),e(bT,pbe),M(PL,pbe,null),e(vd,_sr),e(vd,_be),e(_be,usr),b(f,fze,u),b(f,Go,u),M(BL,Go,null),e(Go,bsr),e(Go,Fd),e(Fd,vsr),e(Fd,LQ),e(LQ,Fsr),e(Fd,Tsr),e(Fd,yQ),e(yQ,Msr),e(Fd,Esr),e(Go,Csr),e(Go,IL),e(IL,wsr),e(IL,ube),e(ube,Asr),e(IL,Lsr),e(Go,ysr),e(Go,bt),M(NL,bt,null),e(bt,xsr),e(bt,bbe),e(bbe,$sr),e(bt,ksr),e(bt,Td),e(Td,Ssr),e(Td,vbe),e(vbe,Rsr),e(Td,Psr),e(Td,xQ),e(xQ,Bsr),e(Td,Isr),e(bt,Nsr),M(vT,bt,null),e(Go,qsr),e(Go,lo),M(qL,lo,null),e(lo,jsr),e(lo,Fbe),e(Fbe,Dsr),e(lo,Gsr),e(lo,Wa),e(Wa,Osr),e(Wa,Tbe),e(Tbe,Vsr),e(Wa,Xsr),e(Wa,Mbe),e(Mbe,zsr),e(Wa,Wsr),e(Wa,Ebe),e(Ebe,Qsr),e(Wa,Hsr),e(lo,Usr),e(lo,Cbe),e(Cbe,FT),e(FT,wbe),e(wbe,Jsr),e(FT,Ysr),e(FT,$Q),e($Q,Ksr),e(FT,Zsr),e(lo,elr),e(lo,TT),e(TT,olr),e(TT,Abe),e(Abe,rlr),e(TT,tlr),e(TT,Lbe),e(Lbe,alr),e(lo,nlr),M(MT,lo,null),b(f,mze,u),b(f,Md,u),e(Md,ET),e(ET,ybe),M(jL,ybe,null),e(Md,slr),e(Md,xbe),e(xbe,llr),b(f,gze,u),b(f,Oo,u),M(DL,Oo,null),e(Oo,ilr),e(Oo,Ed),e(Ed,dlr),e(Ed,kQ),e(kQ,clr),e(Ed,flr),e(Ed,SQ),e(SQ,mlr),e(Ed,glr),e(Oo,hlr),e(Oo,GL),e(GL,plr),e(GL,$be),e($be,_lr),e(GL,ulr),e(Oo,blr),e(Oo,vt),M(OL,vt,null),e(vt,vlr),e(vt,kbe),e(kbe,Flr),e(vt,Tlr),e(vt,Cd),e(Cd,Mlr),e(Cd,Sbe),e(Sbe,Elr),e(Cd,Clr),e(Cd,RQ),e(RQ,wlr),e(Cd,Alr),e(vt,Llr),M(CT,vt,null),e(Oo,ylr),e(Oo,io),M(VL,io,null),e(io,xlr),e(io,Rbe),e(Rbe,$lr),e(io,klr),e(io,Qa),e(Qa,Slr),e(Qa,Pbe),e(Pbe,Rlr),e(Qa,Plr),e(Qa,Bbe),e(Bbe,Blr),e(Qa,Ilr),e(Qa,Ibe),e(Ibe,Nlr),e(Qa,qlr),e(io,jlr),e(io,ve),e(ve,wT),e(wT,Nbe),e(Nbe,Dlr),e(wT,Glr),e(wT,PQ),e(PQ,Olr),e(wT,Vlr),e(ve,Xlr),e(ve,AT),e(AT,qbe),e(qbe,zlr),e(AT,Wlr),e(AT,BQ),e(BQ,Qlr),e(AT,Hlr),e(ve,Ulr),e(ve,LT),e(LT,jbe),e(jbe,Jlr),e(LT,Ylr),e(LT,IQ),e(IQ,Klr),e(LT,Zlr),e(ve,eir),e(ve,yT),e(yT,Dbe),e(Dbe,oir),e(yT,rir),e(yT,NQ),e(NQ,tir),e(yT,air),e(ve,nir),e(ve,Js),e(Js,Gbe),e(Gbe,sir),e(Js,lir),e(Js,qQ),e(qQ,iir),e(Js,dir),e(Js,jQ),e(jQ,cir),e(Js,fir),e(ve,mir),e(ve,xT),e(xT,Obe),e(Obe,gir),e(xT,hir),e(xT,DQ),e(DQ,pir),e(xT,_ir),e(ve,uir),e(ve,Ys),e(Ys,Vbe),e(Vbe,bir),e(Ys,vir),e(Ys,GQ),e(GQ,Fir),e(Ys,Tir),e(Ys,OQ),e(OQ,Mir),e(Ys,Eir),e(ve,Cir),e(ve,$T),e($T,Xbe),e(Xbe,wir),e($T,Air),e($T,VQ),e(VQ,Lir),e($T,yir),e(ve,xir),e(ve,Ft),e(Ft,zbe),e(zbe,$ir),e(Ft,kir),e(Ft,XQ),e(XQ,Sir),e(Ft,Rir),e(Ft,zQ),e(zQ,Pir),e(Ft,Bir),e(Ft,WQ),e(WQ,Iir),e(Ft,Nir),e(ve,qir),e(ve,kT),e(kT,Wbe),e(Wbe,jir),e(kT,Dir),e(kT,QQ),e(QQ,Gir),e(kT,Oir),e(ve,Vir),e(ve,ST),e(ST,Qbe),e(Qbe,Xir),e(ST,zir),e(ST,HQ),e(HQ,Wir),e(ST,Qir),e(ve,Hir),e(ve,RT),e(RT,Hbe),e(Hbe,Uir),e(RT,Jir),e(RT,UQ),e(UQ,Yir),e(RT,Kir),e(ve,Zir),e(ve,PT),e(PT,Ube),e(Ube,edr),e(PT,odr),e(PT,JQ),e(JQ,rdr),e(PT,tdr),e(ve,adr),e(ve,BT),e(BT,Jbe),e(Jbe,ndr),e(BT,sdr),e(BT,YQ),e(YQ,ldr),e(BT,idr),e(ve,ddr),e(ve,IT),e(IT,Ybe),e(Ybe,cdr),e(IT,fdr),e(IT,KQ),e(KQ,mdr),e(IT,gdr),e(ve,hdr),e(ve,NT),e(NT,Kbe),e(Kbe,pdr),e(NT,_dr),e(NT,ZQ),e(ZQ,udr),e(NT,bdr),e(io,vdr),e(io,qT),e(qT,Fdr),e(qT,Zbe),e(Zbe,Tdr),e(qT,Mdr),e(qT,e3e),e(e3e,Edr),e(io,Cdr),M(jT,io,null),b(f,hze,u),b(f,wd,u),e(wd,DT),e(DT,o3e),M(XL,o3e,null),e(wd,wdr),e(wd,r3e),e(r3e,Adr),b(f,pze,u),b(f,Vo,u),M(zL,Vo,null),e(Vo,Ldr),e(Vo,Ad),e(Ad,ydr),e(Ad,eH),e(eH,xdr),e(Ad,$dr),e(Ad,oH),e(oH,kdr),e(Ad,Sdr),e(Vo,Rdr),e(Vo,WL),e(WL,Pdr),e(WL,t3e),e(t3e,Bdr),e(WL,Idr),e(Vo,Ndr),e(Vo,Tt),M(QL,Tt,null),e(Tt,qdr),e(Tt,a3e),e(a3e,jdr),e(Tt,Ddr),e(Tt,Ld),e(Ld,Gdr),e(Ld,n3e),e(n3e,Odr),e(Ld,Vdr),e(Ld,rH),e(rH,Xdr),e(Ld,zdr),e(Tt,Wdr),M(GT,Tt,null),e(Vo,Qdr),e(Vo,co),M(HL,co,null),e(co,Hdr),e(co,s3e),e(s3e,Udr),e(co,Jdr),e(co,Ha),e(Ha,Ydr),e(Ha,l3e),e(l3e,Kdr),e(Ha,Zdr),e(Ha,i3e),e(i3e,ecr),e(Ha,ocr),e(Ha,d3e),e(d3e,rcr),e(Ha,tcr),e(co,acr),e(co,c3e),e(c3e,OT),e(OT,f3e),e(f3e,ncr),e(OT,scr),e(OT,tH),e(tH,lcr),e(OT,icr),e(co,dcr),e(co,VT),e(VT,ccr),e(VT,m3e),e(m3e,fcr),e(VT,mcr),e(VT,g3e),e(g3e,gcr),e(co,hcr),M(XT,co,null),b(f,_ze,u),b(f,yd,u),e(yd,zT),e(zT,h3e),M(UL,h3e,null),e(yd,pcr),e(yd,p3e),e(p3e,_cr),b(f,uze,u),b(f,Xo,u),M(JL,Xo,null),e(Xo,ucr),e(Xo,xd),e(xd,bcr),e(xd,aH),e(aH,vcr),e(xd,Fcr),e(xd,nH),e(nH,Tcr),e(xd,Mcr),e(Xo,Ecr),e(Xo,YL),e(YL,Ccr),e(YL,_3e),e(_3e,wcr),e(YL,Acr),e(Xo,Lcr),e(Xo,Mt),M(KL,Mt,null),e(Mt,ycr),e(Mt,u3e),e(u3e,xcr),e(Mt,$cr),e(Mt,$d),e($d,kcr),e($d,b3e),e(b3e,Scr),e($d,Rcr),e($d,sH),e(sH,Pcr),e($d,Bcr),e(Mt,Icr),M(WT,Mt,null),e(Xo,Ncr),e(Xo,fo),M(ZL,fo,null),e(fo,qcr),e(fo,v3e),e(v3e,jcr),e(fo,Dcr),e(fo,Ua),e(Ua,Gcr),e(Ua,F3e),e(F3e,Ocr),e(Ua,Vcr),e(Ua,T3e),e(T3e,Xcr),e(Ua,zcr),e(Ua,M3e),e(M3e,Wcr),e(Ua,Qcr),e(fo,Hcr),e(fo,E3e),e(E3e,QT),e(QT,C3e),e(C3e,Ucr),e(QT,Jcr),e(QT,lH),e(lH,Ycr),e(QT,Kcr),e(fo,Zcr),e(fo,HT),e(HT,efr),e(HT,w3e),e(w3e,ofr),e(HT,rfr),e(HT,A3e),e(A3e,tfr),e(fo,afr),M(UT,fo,null),b(f,bze,u),b(f,kd,u),e(kd,JT),e(JT,L3e),M(ey,L3e,null),e(kd,nfr),e(kd,y3e),e(y3e,sfr),b(f,vze,u),b(f,zo,u),M(oy,zo,null),e(zo,lfr),e(zo,Sd),e(Sd,ifr),e(Sd,iH),e(iH,dfr),e(Sd,cfr),e(Sd,dH),e(dH,ffr),e(Sd,mfr),e(zo,gfr),e(zo,ry),e(ry,hfr),e(ry,x3e),e(x3e,pfr),e(ry,_fr),e(zo,ufr),e(zo,Et),M(ty,Et,null),e(Et,bfr),e(Et,$3e),e($3e,vfr),e(Et,Ffr),e(Et,Rd),e(Rd,Tfr),e(Rd,k3e),e(k3e,Mfr),e(Rd,Efr),e(Rd,cH),e(cH,Cfr),e(Rd,wfr),e(Et,Afr),M(YT,Et,null),e(zo,Lfr),e(zo,mo),M(ay,mo,null),e(mo,yfr),e(mo,S3e),e(S3e,xfr),e(mo,$fr),e(mo,Ja),e(Ja,kfr),e(Ja,R3e),e(R3e,Sfr),e(Ja,Rfr),e(Ja,P3e),e(P3e,Pfr),e(Ja,Bfr),e(Ja,B3e),e(B3e,Ifr),e(Ja,Nfr),e(mo,qfr),e(mo,Pe),e(Pe,KT),e(KT,I3e),e(I3e,jfr),e(KT,Dfr),e(KT,fH),e(fH,Gfr),e(KT,Ofr),e(Pe,Vfr),e(Pe,ZT),e(ZT,N3e),e(N3e,Xfr),e(ZT,zfr),e(ZT,mH),e(mH,Wfr),e(ZT,Qfr),e(Pe,Hfr),e(Pe,e7),e(e7,q3e),e(q3e,Ufr),e(e7,Jfr),e(e7,gH),e(gH,Yfr),e(e7,Kfr),e(Pe,Zfr),e(Pe,o7),e(o7,j3e),e(j3e,emr),e(o7,omr),e(o7,hH),e(hH,rmr),e(o7,tmr),e(Pe,amr),e(Pe,r7),e(r7,D3e),e(D3e,nmr),e(r7,smr),e(r7,pH),e(pH,lmr),e(r7,imr),e(Pe,dmr),e(Pe,t7),e(t7,G3e),e(G3e,cmr),e(t7,fmr),e(t7,_H),e(_H,mmr),e(t7,gmr),e(Pe,hmr),e(Pe,a7),e(a7,O3e),e(O3e,pmr),e(a7,_mr),e(a7,uH),e(uH,umr),e(a7,bmr),e(Pe,vmr),e(Pe,n7),e(n7,V3e),e(V3e,Fmr),e(n7,Tmr),e(n7,bH),e(bH,Mmr),e(n7,Emr),e(Pe,Cmr),e(Pe,s7),e(s7,X3e),e(X3e,wmr),e(s7,Amr),e(s7,vH),e(vH,Lmr),e(s7,ymr),e(mo,xmr),e(mo,l7),e(l7,$mr),e(l7,z3e),e(z3e,kmr),e(l7,Smr),e(l7,W3e),e(W3e,Rmr),e(mo,Pmr),M(i7,mo,null),b(f,Fze,u),b(f,Pd,u),e(Pd,d7),e(d7,Q3e),M(ny,Q3e,null),e(Pd,Bmr),e(Pd,H3e),e(H3e,Imr),b(f,Tze,u),b(f,Wo,u),M(sy,Wo,null),e(Wo,Nmr),e(Wo,Bd),e(Bd,qmr),e(Bd,FH),e(FH,jmr),e(Bd,Dmr),e(Bd,TH),e(TH,Gmr),e(Bd,Omr),e(Wo,Vmr),e(Wo,ly),e(ly,Xmr),e(ly,U3e),e(U3e,zmr),e(ly,Wmr),e(Wo,Qmr),e(Wo,Ct),M(iy,Ct,null),e(Ct,Hmr),e(Ct,J3e),e(J3e,Umr),e(Ct,Jmr),e(Ct,Id),e(Id,Ymr),e(Id,Y3e),e(Y3e,Kmr),e(Id,Zmr),e(Id,MH),e(MH,egr),e(Id,ogr),e(Ct,rgr),M(c7,Ct,null),e(Wo,tgr),e(Wo,go),M(dy,go,null),e(go,agr),e(go,K3e),e(K3e,ngr),e(go,sgr),e(go,Ya),e(Ya,lgr),e(Ya,Z3e),e(Z3e,igr),e(Ya,dgr),e(Ya,eve),e(eve,cgr),e(Ya,fgr),e(Ya,ove),e(ove,mgr),e(Ya,ggr),e(go,hgr),e(go,rt),e(rt,f7),e(f7,rve),e(rve,pgr),e(f7,_gr),e(f7,EH),e(EH,ugr),e(f7,bgr),e(rt,vgr),e(rt,m7),e(m7,tve),e(tve,Fgr),e(m7,Tgr),e(m7,CH),e(CH,Mgr),e(m7,Egr),e(rt,Cgr),e(rt,g7),e(g7,ave),e(ave,wgr),e(g7,Agr),e(g7,wH),e(wH,Lgr),e(g7,ygr),e(rt,xgr),e(rt,h7),e(h7,nve),e(nve,$gr),e(h7,kgr),e(h7,AH),e(AH,Sgr),e(h7,Rgr),e(rt,Pgr),e(rt,p7),e(p7,sve),e(sve,Bgr),e(p7,Igr),e(p7,LH),e(LH,Ngr),e(p7,qgr),e(go,jgr),e(go,_7),e(_7,Dgr),e(_7,lve),e(lve,Ggr),e(_7,Ogr),e(_7,ive),e(ive,Vgr),e(go,Xgr),M(u7,go,null),b(f,Mze,u),b(f,Nd,u),e(Nd,b7),e(b7,dve),M(cy,dve,null),e(Nd,zgr),e(Nd,cve),e(cve,Wgr),b(f,Eze,u),b(f,Qo,u),M(fy,Qo,null),e(Qo,Qgr),e(Qo,qd),e(qd,Hgr),e(qd,yH),e(yH,Ugr),e(qd,Jgr),e(qd,xH),e(xH,Ygr),e(qd,Kgr),e(Qo,Zgr),e(Qo,my),e(my,ehr),e(my,fve),e(fve,ohr),e(my,rhr),e(Qo,thr),e(Qo,wt),M(gy,wt,null),e(wt,ahr),e(wt,mve),e(mve,nhr),e(wt,shr),e(wt,jd),e(jd,lhr),e(jd,gve),e(gve,ihr),e(jd,dhr),e(jd,$H),e($H,chr),e(jd,fhr),e(wt,mhr),M(v7,wt,null),e(Qo,ghr),e(Qo,ho),M(hy,ho,null),e(ho,hhr),e(ho,hve),e(hve,phr),e(ho,_hr),e(ho,Ka),e(Ka,uhr),e(Ka,pve),e(pve,bhr),e(Ka,vhr),e(Ka,_ve),e(_ve,Fhr),e(Ka,Thr),e(Ka,uve),e(uve,Mhr),e(Ka,Ehr),e(ho,Chr),e(ho,Le),e(Le,F7),e(F7,bve),e(bve,whr),e(F7,Ahr),e(F7,kH),e(kH,Lhr),e(F7,yhr),e(Le,xhr),e(Le,T7),e(T7,vve),e(vve,$hr),e(T7,khr),e(T7,SH),e(SH,Shr),e(T7,Rhr),e(Le,Phr),e(Le,M7),e(M7,Fve),e(Fve,Bhr),e(M7,Ihr),e(M7,RH),e(RH,Nhr),e(M7,qhr),e(Le,jhr),e(Le,E7),e(E7,Tve),e(Tve,Dhr),e(E7,Ghr),e(E7,PH),e(PH,Ohr),e(E7,Vhr),e(Le,Xhr),e(Le,C7),e(C7,Mve),e(Mve,zhr),e(C7,Whr),e(C7,BH),e(BH,Qhr),e(C7,Hhr),e(Le,Uhr),e(Le,w7),e(w7,Eve),e(Eve,Jhr),e(w7,Yhr),e(w7,IH),e(IH,Khr),e(w7,Zhr),e(Le,epr),e(Le,A7),e(A7,Cve),e(Cve,opr),e(A7,rpr),e(A7,NH),e(NH,tpr),e(A7,apr),e(Le,npr),e(Le,L7),e(L7,wve),e(wve,spr),e(L7,lpr),e(L7,qH),e(qH,ipr),e(L7,dpr),e(Le,cpr),e(Le,y7),e(y7,Ave),e(Ave,fpr),e(y7,mpr),e(y7,jH),e(jH,gpr),e(y7,hpr),e(Le,ppr),e(Le,x7),e(x7,Lve),e(Lve,_pr),e(x7,upr),e(x7,DH),e(DH,bpr),e(x7,vpr),e(ho,Fpr),e(ho,$7),e($7,Tpr),e($7,yve),e(yve,Mpr),e($7,Epr),e($7,xve),e(xve,Cpr),e(ho,wpr),M(k7,ho,null),b(f,Cze,u),b(f,Dd,u),e(Dd,S7),e(S7,$ve),M(py,$ve,null),e(Dd,Apr),e(Dd,kve),e(kve,Lpr),b(f,wze,u),b(f,Ho,u),M(_y,Ho,null),e(Ho,ypr),e(Ho,Gd),e(Gd,xpr),e(Gd,GH),e(GH,$pr),e(Gd,kpr),e(Gd,OH),e(OH,Spr),e(Gd,Rpr),e(Ho,Ppr),e(Ho,uy),e(uy,Bpr),e(uy,Sve),e(Sve,Ipr),e(uy,Npr),e(Ho,qpr),e(Ho,At),M(by,At,null),e(At,jpr),e(At,Rve),e(Rve,Dpr),e(At,Gpr),e(At,Od),e(Od,Opr),e(Od,Pve),e(Pve,Vpr),e(Od,Xpr),e(Od,VH),e(VH,zpr),e(Od,Wpr),e(At,Qpr),M(R7,At,null),e(Ho,Hpr),e(Ho,po),M(vy,po,null),e(po,Upr),e(po,Bve),e(Bve,Jpr),e(po,Ypr),e(po,Za),e(Za,Kpr),e(Za,Ive),e(Ive,Zpr),e(Za,e_r),e(Za,Nve),e(Nve,o_r),e(Za,r_r),e(Za,qve),e(qve,t_r),e(Za,a_r),e(po,n_r),e(po,Fy),e(Fy,P7),e(P7,jve),e(jve,s_r),e(P7,l_r),e(P7,XH),e(XH,i_r),e(P7,d_r),e(Fy,c_r),e(Fy,B7),e(B7,Dve),e(Dve,f_r),e(B7,m_r),e(B7,zH),e(zH,g_r),e(B7,h_r),e(po,p_r),e(po,I7),e(I7,__r),e(I7,Gve),e(Gve,u_r),e(I7,b_r),e(I7,Ove),e(Ove,v_r),e(po,F_r),M(N7,po,null),b(f,Aze,u),b(f,Vd,u),e(Vd,q7),e(q7,Vve),M(Ty,Vve,null),e(Vd,T_r),e(Vd,Xve),e(Xve,M_r),b(f,Lze,u),b(f,Uo,u),M(My,Uo,null),e(Uo,E_r),e(Uo,Xd),e(Xd,C_r),e(Xd,WH),e(WH,w_r),e(Xd,A_r),e(Xd,QH),e(QH,L_r),e(Xd,y_r),e(Uo,x_r),e(Uo,Ey),e(Ey,$_r),e(Ey,zve),e(zve,k_r),e(Ey,S_r),e(Uo,R_r),e(Uo,Lt),M(Cy,Lt,null),e(Lt,P_r),e(Lt,Wve),e(Wve,B_r),e(Lt,I_r),e(Lt,zd),e(zd,N_r),e(zd,Qve),e(Qve,q_r),e(zd,j_r),e(zd,HH),e(HH,D_r),e(zd,G_r),e(Lt,O_r),M(j7,Lt,null),e(Uo,V_r),e(Uo,_o),M(wy,_o,null),e(_o,X_r),e(_o,Hve),e(Hve,z_r),e(_o,W_r),e(_o,en),e(en,Q_r),e(en,Uve),e(Uve,H_r),e(en,U_r),e(en,Jve),e(Jve,J_r),e(en,Y_r),e(en,Yve),e(Yve,K_r),e(en,Z_r),e(_o,eur),e(_o,tt),e(tt,D7),e(D7,Kve),e(Kve,our),e(D7,rur),e(D7,UH),e(UH,tur),e(D7,aur),e(tt,nur),e(tt,G7),e(G7,Zve),e(Zve,sur),e(G7,lur),e(G7,JH),e(JH,iur),e(G7,dur),e(tt,cur),e(tt,O7),e(O7,eFe),e(eFe,fur),e(O7,mur),e(O7,YH),e(YH,gur),e(O7,hur),e(tt,pur),e(tt,V7),e(V7,oFe),e(oFe,_ur),e(V7,uur),e(V7,KH),e(KH,bur),e(V7,vur),e(tt,Fur),e(tt,X7),e(X7,rFe),e(rFe,Tur),e(X7,Mur),e(X7,ZH),e(ZH,Eur),e(X7,Cur),e(_o,wur),e(_o,z7),e(z7,Aur),e(z7,tFe),e(tFe,Lur),e(z7,yur),e(z7,aFe),e(aFe,xur),e(_o,$ur),M(W7,_o,null),b(f,yze,u),b(f,Wd,u),e(Wd,Q7),e(Q7,nFe),M(Ay,nFe,null),e(Wd,kur),e(Wd,sFe),e(sFe,Sur),b(f,xze,u),b(f,Jo,u),M(Ly,Jo,null),e(Jo,Rur),e(Jo,Qd),e(Qd,Pur),e(Qd,eU),e(eU,Bur),e(Qd,Iur),e(Qd,oU),e(oU,Nur),e(Qd,qur),e(Jo,jur),e(Jo,yy),e(yy,Dur),e(yy,lFe),e(lFe,Gur),e(yy,Our),e(Jo,Vur),e(Jo,yt),M(xy,yt,null),e(yt,Xur),e(yt,iFe),e(iFe,zur),e(yt,Wur),e(yt,Hd),e(Hd,Qur),e(Hd,dFe),e(dFe,Hur),e(Hd,Uur),e(Hd,rU),e(rU,Jur),e(Hd,Yur),e(yt,Kur),M(H7,yt,null),e(Jo,Zur),e(Jo,uo),M($y,uo,null),e(uo,e1r),e(uo,cFe),e(cFe,o1r),e(uo,r1r),e(uo,on),e(on,t1r),e(on,fFe),e(fFe,a1r),e(on,n1r),e(on,mFe),e(mFe,s1r),e(on,l1r),e(on,gFe),e(gFe,i1r),e(on,d1r),e(uo,c1r),e(uo,Ud),e(Ud,U7),e(U7,hFe),e(hFe,f1r),e(U7,m1r),e(U7,tU),e(tU,g1r),e(U7,h1r),e(Ud,p1r),e(Ud,J7),e(J7,pFe),e(pFe,_1r),e(J7,u1r),e(J7,aU),e(aU,b1r),e(J7,v1r),e(Ud,F1r),e(Ud,Y7),e(Y7,_Fe),e(_Fe,T1r),e(Y7,M1r),e(Y7,nU),e(nU,E1r),e(Y7,C1r),e(uo,w1r),e(uo,K7),e(K7,A1r),e(K7,uFe),e(uFe,L1r),e(K7,y1r),e(K7,bFe),e(bFe,x1r),e(uo,$1r),M(Z7,uo,null),b(f,$ze,u),b(f,Jd,u),e(Jd,e8),e(e8,vFe),M(ky,vFe,null),e(Jd,k1r),e(Jd,FFe),e(FFe,S1r),b(f,kze,u),b(f,Yo,u),M(Sy,Yo,null),e(Yo,R1r),e(Yo,Yd),e(Yd,P1r),e(Yd,sU),e(sU,B1r),e(Yd,I1r),e(Yd,lU),e(lU,N1r),e(Yd,q1r),e(Yo,j1r),e(Yo,Ry),e(Ry,D1r),e(Ry,TFe),e(TFe,G1r),e(Ry,O1r),e(Yo,V1r),e(Yo,xt),M(Py,xt,null),e(xt,X1r),e(xt,MFe),e(MFe,z1r),e(xt,W1r),e(xt,Kd),e(Kd,Q1r),e(Kd,EFe),e(EFe,H1r),e(Kd,U1r),e(Kd,iU),e(iU,J1r),e(Kd,Y1r),e(xt,K1r),M(o8,xt,null),e(Yo,Z1r),e(Yo,bo),M(By,bo,null),e(bo,e2r),e(bo,CFe),e(CFe,o2r),e(bo,r2r),e(bo,rn),e(rn,t2r),e(rn,wFe),e(wFe,a2r),e(rn,n2r),e(rn,AFe),e(AFe,s2r),e(rn,l2r),e(rn,LFe),e(LFe,i2r),e(rn,d2r),e(bo,c2r),e(bo,Iy),e(Iy,r8),e(r8,yFe),e(yFe,f2r),e(r8,m2r),e(r8,dU),e(dU,g2r),e(r8,h2r),e(Iy,p2r),e(Iy,t8),e(t8,xFe),e(xFe,_2r),e(t8,u2r),e(t8,cU),e(cU,b2r),e(t8,v2r),e(bo,F2r),e(bo,a8),e(a8,T2r),e(a8,$Fe),e($Fe,M2r),e(a8,E2r),e(a8,kFe),e(kFe,C2r),e(bo,w2r),M(n8,bo,null),b(f,Sze,u),b(f,Zd,u),e(Zd,s8),e(s8,SFe),M(Ny,SFe,null),e(Zd,A2r),e(Zd,RFe),e(RFe,L2r),b(f,Rze,u),b(f,Ko,u),M(qy,Ko,null),e(Ko,y2r),e(Ko,ec),e(ec,x2r),e(ec,fU),e(fU,$2r),e(ec,k2r),e(ec,mU),e(mU,S2r),e(ec,R2r),e(Ko,P2r),e(Ko,jy),e(jy,B2r),e(jy,PFe),e(PFe,I2r),e(jy,N2r),e(Ko,q2r),e(Ko,$t),M(Dy,$t,null),e($t,j2r),e($t,BFe),e(BFe,D2r),e($t,G2r),e($t,oc),e(oc,O2r),e(oc,IFe),e(IFe,V2r),e(oc,X2r),e(oc,gU),e(gU,z2r),e(oc,W2r),e($t,Q2r),M(l8,$t,null),e(Ko,H2r),e(Ko,vo),M(Gy,vo,null),e(vo,U2r),e(vo,NFe),e(NFe,J2r),e(vo,Y2r),e(vo,tn),e(tn,K2r),e(tn,qFe),e(qFe,Z2r),e(tn,ebr),e(tn,jFe),e(jFe,obr),e(tn,rbr),e(tn,DFe),e(DFe,tbr),e(tn,abr),e(vo,nbr),e(vo,GFe),e(GFe,i8),e(i8,OFe),e(OFe,sbr),e(i8,lbr),e(i8,hU),e(hU,ibr),e(i8,dbr),e(vo,cbr),e(vo,d8),e(d8,fbr),e(d8,VFe),e(VFe,mbr),e(d8,gbr),e(d8,XFe),e(XFe,hbr),e(vo,pbr),M(c8,vo,null),b(f,Pze,u),b(f,rc,u),e(rc,f8),e(f8,zFe),M(Oy,zFe,null),e(rc,_br),e(rc,WFe),e(WFe,ubr),b(f,Bze,u),b(f,Zo,u),M(Vy,Zo,null),e(Zo,bbr),e(Zo,tc),e(tc,vbr),e(tc,pU),e(pU,Fbr),e(tc,Tbr),e(tc,_U),e(_U,Mbr),e(tc,Ebr),e(Zo,Cbr),e(Zo,Xy),e(Xy,wbr),e(Xy,QFe),e(QFe,Abr),e(Xy,Lbr),e(Zo,ybr),e(Zo,kt),M(zy,kt,null),e(kt,xbr),e(kt,HFe),e(HFe,$br),e(kt,kbr),e(kt,ac),e(ac,Sbr),e(ac,UFe),e(UFe,Rbr),e(ac,Pbr),e(ac,uU),e(uU,Bbr),e(ac,Ibr),e(kt,Nbr),M(m8,kt,null),e(Zo,qbr),e(Zo,Fo),M(Wy,Fo,null),e(Fo,jbr),e(Fo,JFe),e(JFe,Dbr),e(Fo,Gbr),e(Fo,an),e(an,Obr),e(an,YFe),e(YFe,Vbr),e(an,Xbr),e(an,KFe),e(KFe,zbr),e(an,Wbr),e(an,ZFe),e(ZFe,Qbr),e(an,Hbr),e(Fo,Ubr),e(Fo,at),e(at,g8),e(g8,eTe),e(eTe,Jbr),e(g8,Ybr),e(g8,bU),e(bU,Kbr),e(g8,Zbr),e(at,e3r),e(at,h8),e(h8,oTe),e(oTe,o3r),e(h8,r3r),e(h8,vU),e(vU,t3r),e(h8,a3r),e(at,n3r),e(at,p8),e(p8,rTe),e(rTe,s3r),e(p8,l3r),e(p8,FU),e(FU,i3r),e(p8,d3r),e(at,c3r),e(at,_8),e(_8,tTe),e(tTe,f3r),e(_8,m3r),e(_8,TU),e(TU,g3r),e(_8,h3r),e(at,p3r),e(at,u8),e(u8,aTe),e(aTe,_3r),e(u8,u3r),e(u8,MU),e(MU,b3r),e(u8,v3r),e(Fo,F3r),e(Fo,b8),e(b8,T3r),e(b8,nTe),e(nTe,M3r),e(b8,E3r),e(b8,sTe),e(sTe,C3r),e(Fo,w3r),M(v8,Fo,null),b(f,Ize,u),b(f,nc,u),e(nc,F8),e(F8,lTe),M(Qy,lTe,null),e(nc,A3r),e(nc,iTe),e(iTe,L3r),b(f,Nze,u),b(f,er,u),M(Hy,er,null),e(er,y3r),e(er,sc),e(sc,x3r),e(sc,EU),e(EU,$3r),e(sc,k3r),e(sc,CU),e(CU,S3r),e(sc,R3r),e(er,P3r),e(er,Uy),e(Uy,B3r),e(Uy,dTe),e(dTe,I3r),e(Uy,N3r),e(er,q3r),e(er,St),M(Jy,St,null),e(St,j3r),e(St,cTe),e(cTe,D3r),e(St,G3r),e(St,lc),e(lc,O3r),e(lc,fTe),e(fTe,V3r),e(lc,X3r),e(lc,wU),e(wU,z3r),e(lc,W3r),e(St,Q3r),M(T8,St,null),e(er,H3r),e(er,To),M(Yy,To,null),e(To,U3r),e(To,mTe),e(mTe,J3r),e(To,Y3r),e(To,nn),e(nn,K3r),e(nn,gTe),e(gTe,Z3r),e(nn,evr),e(nn,hTe),e(hTe,ovr),e(nn,rvr),e(nn,pTe),e(pTe,tvr),e(nn,avr),e(To,nvr),e(To,_Te),e(_Te,M8),e(M8,uTe),e(uTe,svr),e(M8,lvr),e(M8,AU),e(AU,ivr),e(M8,dvr),e(To,cvr),e(To,E8),e(E8,fvr),e(E8,bTe),e(bTe,mvr),e(E8,gvr),e(E8,vTe),e(vTe,hvr),e(To,pvr),M(C8,To,null),b(f,qze,u),b(f,ic,u),e(ic,w8),e(w8,FTe),M(Ky,FTe,null),e(ic,_vr),e(ic,TTe),e(TTe,uvr),b(f,jze,u),b(f,or,u),M(Zy,or,null),e(or,bvr),e(or,dc),e(dc,vvr),e(dc,LU),e(LU,Fvr),e(dc,Tvr),e(dc,yU),e(yU,Mvr),e(dc,Evr),e(or,Cvr),e(or,ex),e(ex,wvr),e(ex,MTe),e(MTe,Avr),e(ex,Lvr),e(or,yvr),e(or,Rt),M(ox,Rt,null),e(Rt,xvr),e(Rt,ETe),e(ETe,$vr),e(Rt,kvr),e(Rt,cc),e(cc,Svr),e(cc,CTe),e(CTe,Rvr),e(cc,Pvr),e(cc,xU),e(xU,Bvr),e(cc,Ivr),e(Rt,Nvr),M(A8,Rt,null),e(or,qvr),e(or,xr),M(rx,xr,null),e(xr,jvr),e(xr,wTe),e(wTe,Dvr),e(xr,Gvr),e(xr,sn),e(sn,Ovr),e(sn,ATe),e(ATe,Vvr),e(sn,Xvr),e(sn,LTe),e(LTe,zvr),e(sn,Wvr),e(sn,yTe),e(yTe,Qvr),e(sn,Hvr),e(xr,Uvr),e(xr,q),e(q,L8),e(L8,xTe),e(xTe,Jvr),e(L8,Yvr),e(L8,$U),e($U,Kvr),e(L8,Zvr),e(q,eFr),e(q,y8),e(y8,$Te),e($Te,oFr),e(y8,rFr),e(y8,kU),e(kU,tFr),e(y8,aFr),e(q,nFr),e(q,x8),e(x8,kTe),e(kTe,sFr),e(x8,lFr),e(x8,SU),e(SU,iFr),e(x8,dFr),e(q,cFr),e(q,$8),e($8,STe),e(STe,fFr),e($8,mFr),e($8,RU),e(RU,gFr),e($8,hFr),e(q,pFr),e(q,k8),e(k8,RTe),e(RTe,_Fr),e(k8,uFr),e(k8,PU),e(PU,bFr),e(k8,vFr),e(q,FFr),e(q,S8),e(S8,PTe),e(PTe,TFr),e(S8,MFr),e(S8,BU),e(BU,EFr),e(S8,CFr),e(q,wFr),e(q,R8),e(R8,BTe),e(BTe,AFr),e(R8,LFr),e(R8,IU),e(IU,yFr),e(R8,xFr),e(q,$Fr),e(q,P8),e(P8,ITe),e(ITe,kFr),e(P8,SFr),e(P8,NU),e(NU,RFr),e(P8,PFr),e(q,BFr),e(q,B8),e(B8,NTe),e(NTe,IFr),e(B8,NFr),e(B8,qU),e(qU,qFr),e(B8,jFr),e(q,DFr),e(q,I8),e(I8,qTe),e(qTe,GFr),e(I8,OFr),e(I8,jU),e(jU,VFr),e(I8,XFr),e(q,zFr),e(q,N8),e(N8,jTe),e(jTe,WFr),e(N8,QFr),e(N8,DU),e(DU,HFr),e(N8,UFr),e(q,JFr),e(q,q8),e(q8,DTe),e(DTe,YFr),e(q8,KFr),e(q8,GU),e(GU,ZFr),e(q8,eTr),e(q,oTr),e(q,j8),e(j8,GTe),e(GTe,rTr),e(j8,tTr),e(j8,OU),e(OU,aTr),e(j8,nTr),e(q,sTr),e(q,D8),e(D8,OTe),e(OTe,lTr),e(D8,iTr),e(D8,VU),e(VU,dTr),e(D8,cTr),e(q,fTr),e(q,G8),e(G8,VTe),e(VTe,mTr),e(G8,gTr),e(G8,XU),e(XU,hTr),e(G8,pTr),e(q,_Tr),e(q,O8),e(O8,XTe),e(XTe,uTr),e(O8,bTr),e(O8,zU),e(zU,vTr),e(O8,FTr),e(q,TTr),e(q,V8),e(V8,zTe),e(zTe,MTr),e(V8,ETr),e(V8,WU),e(WU,CTr),e(V8,wTr),e(q,ATr),e(q,X8),e(X8,WTe),e(WTe,LTr),e(X8,yTr),e(X8,QU),e(QU,xTr),e(X8,$Tr),e(q,kTr),e(q,Ks),e(Ks,QTe),e(QTe,STr),e(Ks,RTr),e(Ks,HU),e(HU,PTr),e(Ks,BTr),e(Ks,UU),e(UU,ITr),e(Ks,NTr),e(q,qTr),e(q,z8),e(z8,HTe),e(HTe,jTr),e(z8,DTr),e(z8,JU),e(JU,GTr),e(z8,OTr),e(q,VTr),e(q,W8),e(W8,UTe),e(UTe,XTr),e(W8,zTr),e(W8,YU),e(YU,WTr),e(W8,QTr),e(q,HTr),e(q,Q8),e(Q8,JTe),e(JTe,UTr),e(Q8,JTr),e(Q8,KU),e(KU,YTr),e(Q8,KTr),e(q,ZTr),e(q,H8),e(H8,YTe),e(YTe,e7r),e(H8,o7r),e(H8,ZU),e(ZU,r7r),e(H8,t7r),e(q,a7r),e(q,U8),e(U8,KTe),e(KTe,n7r),e(U8,s7r),e(U8,eJ),e(eJ,l7r),e(U8,i7r),e(q,d7r),e(q,J8),e(J8,ZTe),e(ZTe,c7r),e(J8,f7r),e(J8,oJ),e(oJ,m7r),e(J8,g7r),e(q,h7r),e(q,Y8),e(Y8,e7e),e(e7e,p7r),e(Y8,_7r),e(Y8,rJ),e(rJ,u7r),e(Y8,b7r),e(q,v7r),e(q,K8),e(K8,o7e),e(o7e,F7r),e(K8,T7r),e(K8,tJ),e(tJ,M7r),e(K8,E7r),e(q,C7r),e(q,Z8),e(Z8,r7e),e(r7e,w7r),e(Z8,A7r),e(Z8,aJ),e(aJ,L7r),e(Z8,y7r),e(q,x7r),e(q,e9),e(e9,t7e),e(t7e,$7r),e(e9,k7r),e(e9,nJ),e(nJ,S7r),e(e9,R7r),e(q,P7r),e(q,o9),e(o9,a7e),e(a7e,B7r),e(o9,I7r),e(o9,sJ),e(sJ,N7r),e(o9,q7r),e(q,j7r),e(q,r9),e(r9,n7e),e(n7e,D7r),e(r9,G7r),e(r9,lJ),e(lJ,O7r),e(r9,V7r),e(q,X7r),e(q,t9),e(t9,s7e),e(s7e,z7r),e(t9,W7r),e(t9,iJ),e(iJ,Q7r),e(t9,H7r),e(q,U7r),e(q,a9),e(a9,l7e),e(l7e,J7r),e(a9,Y7r),e(a9,dJ),e(dJ,K7r),e(a9,Z7r),e(q,e8r),e(q,n9),e(n9,i7e),e(i7e,o8r),e(n9,r8r),e(n9,cJ),e(cJ,t8r),e(n9,a8r),e(q,n8r),e(q,s9),e(s9,d7e),e(d7e,s8r),e(s9,l8r),e(s9,fJ),e(fJ,i8r),e(s9,d8r),e(q,c8r),e(q,l9),e(l9,c7e),e(c7e,f8r),e(l9,m8r),e(l9,mJ),e(mJ,g8r),e(l9,h8r),e(q,p8r),e(q,i9),e(i9,f7e),e(f7e,_8r),e(i9,u8r),e(i9,gJ),e(gJ,b8r),e(i9,v8r),e(q,F8r),e(q,d9),e(d9,m7e),e(m7e,T8r),e(d9,M8r),e(d9,hJ),e(hJ,E8r),e(d9,C8r),e(q,w8r),e(q,c9),e(c9,g7e),e(g7e,A8r),e(c9,L8r),e(c9,pJ),e(pJ,y8r),e(c9,x8r),e(q,$8r),e(q,f9),e(f9,h7e),e(h7e,k8r),e(f9,S8r),e(f9,_J),e(_J,R8r),e(f9,P8r),e(q,B8r),e(q,m9),e(m9,p7e),e(p7e,I8r),e(m9,N8r),e(m9,uJ),e(uJ,q8r),e(m9,j8r),e(q,D8r),e(q,g9),e(g9,_7e),e(_7e,G8r),e(g9,O8r),e(g9,bJ),e(bJ,V8r),e(g9,X8r),e(q,z8r),e(q,h9),e(h9,u7e),e(u7e,W8r),e(h9,Q8r),e(h9,vJ),e(vJ,H8r),e(h9,U8r),e(q,J8r),e(q,p9),e(p9,b7e),e(b7e,Y8r),e(p9,K8r),e(p9,FJ),e(FJ,Z8r),e(p9,e9r),e(q,o9r),e(q,_9),e(_9,v7e),e(v7e,r9r),e(_9,t9r),e(_9,TJ),e(TJ,a9r),e(_9,n9r),e(q,s9r),e(q,u9),e(u9,F7e),e(F7e,l9r),e(u9,i9r),e(u9,MJ),e(MJ,d9r),e(u9,c9r),e(q,f9r),e(q,b9),e(b9,T7e),e(T7e,m9r),e(b9,g9r),e(b9,EJ),e(EJ,h9r),e(b9,p9r),e(q,_9r),e(q,v9),e(v9,M7e),e(M7e,u9r),e(v9,b9r),e(v9,CJ),e(CJ,v9r),e(v9,F9r),e(q,T9r),e(q,F9),e(F9,E7e),e(E7e,M9r),e(F9,E9r),e(F9,wJ),e(wJ,C9r),e(F9,w9r),e(q,A9r),e(q,T9),e(T9,C7e),e(C7e,L9r),e(T9,y9r),e(T9,AJ),e(AJ,x9r),e(T9,$9r),e(xr,k9r),M(M9,xr,null),b(f,Dze,u),b(f,fc,u),e(fc,E9),e(E9,w7e),M(tx,w7e,null),e(fc,S9r),e(fc,A7e),e(A7e,R9r),b(f,Gze,u),b(f,rr,u),M(ax,rr,null),e(rr,P9r),e(rr,mc),e(mc,B9r),e(mc,LJ),e(LJ,I9r),e(mc,N9r),e(mc,yJ),e(yJ,q9r),e(mc,j9r),e(rr,D9r),e(rr,nx),e(nx,G9r),e(nx,L7e),e(L7e,O9r),e(nx,V9r),e(rr,X9r),e(rr,Pt),M(sx,Pt,null),e(Pt,z9r),e(Pt,y7e),e(y7e,W9r),e(Pt,Q9r),e(Pt,gc),e(gc,H9r),e(gc,x7e),e(x7e,U9r),e(gc,J9r),e(gc,xJ),e(xJ,Y9r),e(gc,K9r),e(Pt,Z9r),M(C9,Pt,null),e(rr,eMr),e(rr,$r),M(lx,$r,null),e($r,oMr),e($r,$7e),e($7e,rMr),e($r,tMr),e($r,ln),e(ln,aMr),e(ln,k7e),e(k7e,nMr),e(ln,sMr),e(ln,S7e),e(S7e,lMr),e(ln,iMr),e(ln,R7e),e(R7e,dMr),e(ln,cMr),e($r,fMr),e($r,se),e(se,w9),e(w9,P7e),e(P7e,mMr),e(w9,gMr),e(w9,$J),e($J,hMr),e(w9,pMr),e(se,_Mr),e(se,A9),e(A9,B7e),e(B7e,uMr),e(A9,bMr),e(A9,kJ),e(kJ,vMr),e(A9,FMr),e(se,TMr),e(se,L9),e(L9,I7e),e(I7e,MMr),e(L9,EMr),e(L9,SJ),e(SJ,CMr),e(L9,wMr),e(se,AMr),e(se,y9),e(y9,N7e),e(N7e,LMr),e(y9,yMr),e(y9,RJ),e(RJ,xMr),e(y9,$Mr),e(se,kMr),e(se,x9),e(x9,q7e),e(q7e,SMr),e(x9,RMr),e(x9,PJ),e(PJ,PMr),e(x9,BMr),e(se,IMr),e(se,$9),e($9,j7e),e(j7e,NMr),e($9,qMr),e($9,BJ),e(BJ,jMr),e($9,DMr),e(se,GMr),e(se,k9),e(k9,D7e),e(D7e,OMr),e(k9,VMr),e(k9,IJ),e(IJ,XMr),e(k9,zMr),e(se,WMr),e(se,S9),e(S9,G7e),e(G7e,QMr),e(S9,HMr),e(S9,NJ),e(NJ,UMr),e(S9,JMr),e(se,YMr),e(se,R9),e(R9,O7e),e(O7e,KMr),e(R9,ZMr),e(R9,qJ),e(qJ,e4r),e(R9,o4r),e(se,r4r),e(se,P9),e(P9,V7e),e(V7e,t4r),e(P9,a4r),e(P9,jJ),e(jJ,n4r),e(P9,s4r),e(se,l4r),e(se,B9),e(B9,X7e),e(X7e,i4r),e(B9,d4r),e(B9,DJ),e(DJ,c4r),e(B9,f4r),e(se,m4r),e(se,I9),e(I9,z7e),e(z7e,g4r),e(I9,h4r),e(I9,GJ),e(GJ,p4r),e(I9,_4r),e(se,u4r),e(se,N9),e(N9,W7e),e(W7e,b4r),e(N9,v4r),e(N9,OJ),e(OJ,F4r),e(N9,T4r),e(se,M4r),e(se,q9),e(q9,Q7e),e(Q7e,E4r),e(q9,C4r),e(q9,VJ),e(VJ,w4r),e(q9,A4r),e(se,L4r),e(se,j9),e(j9,H7e),e(H7e,y4r),e(j9,x4r),e(j9,XJ),e(XJ,$4r),e(j9,k4r),e(se,S4r),e(se,D9),e(D9,U7e),e(U7e,R4r),e(D9,P4r),e(D9,zJ),e(zJ,B4r),e(D9,I4r),e(se,N4r),e(se,G9),e(G9,J7e),e(J7e,q4r),e(G9,j4r),e(G9,WJ),e(WJ,D4r),e(G9,G4r),e(se,O4r),e(se,O9),e(O9,Y7e),e(Y7e,V4r),e(O9,X4r),e(O9,QJ),e(QJ,z4r),e(O9,W4r),e(se,Q4r),e(se,V9),e(V9,K7e),e(K7e,H4r),e(V9,U4r),e(V9,HJ),e(HJ,J4r),e(V9,Y4r),e(se,K4r),e(se,X9),e(X9,Z7e),e(Z7e,Z4r),e(X9,eEr),e(X9,UJ),e(UJ,oEr),e(X9,rEr),e(se,tEr),e(se,z9),e(z9,e8e),e(e8e,aEr),e(z9,nEr),e(z9,JJ),e(JJ,sEr),e(z9,lEr),e(se,iEr),e(se,W9),e(W9,o8e),e(o8e,dEr),e(W9,cEr),e(W9,YJ),e(YJ,fEr),e(W9,mEr),e(se,gEr),e(se,Q9),e(Q9,r8e),e(r8e,hEr),e(Q9,pEr),e(Q9,KJ),e(KJ,_Er),e(Q9,uEr),e($r,bEr),M(H9,$r,null),b(f,Oze,u),b(f,hc,u),e(hc,U9),e(U9,t8e),M(ix,t8e,null),e(hc,vEr),e(hc,a8e),e(a8e,FEr),b(f,Vze,u),b(f,tr,u),M(dx,tr,null),e(tr,TEr),e(tr,pc),e(pc,MEr),e(pc,ZJ),e(ZJ,EEr),e(pc,CEr),e(pc,eY),e(eY,wEr),e(pc,AEr),e(tr,LEr),e(tr,cx),e(cx,yEr),e(cx,n8e),e(n8e,xEr),e(cx,$Er),e(tr,kEr),e(tr,Bt),M(fx,Bt,null),e(Bt,SEr),e(Bt,s8e),e(s8e,REr),e(Bt,PEr),e(Bt,_c),e(_c,BEr),e(_c,l8e),e(l8e,IEr),e(_c,NEr),e(_c,oY),e(oY,qEr),e(_c,jEr),e(Bt,DEr),M(J9,Bt,null),e(tr,GEr),e(tr,kr),M(mx,kr,null),e(kr,OEr),e(kr,i8e),e(i8e,VEr),e(kr,XEr),e(kr,dn),e(dn,zEr),e(dn,d8e),e(d8e,WEr),e(dn,QEr),e(dn,c8e),e(c8e,HEr),e(dn,UEr),e(dn,f8e),e(f8e,JEr),e(dn,YEr),e(kr,KEr),e(kr,Me),e(Me,Y9),e(Y9,m8e),e(m8e,ZEr),e(Y9,eCr),e(Y9,rY),e(rY,oCr),e(Y9,rCr),e(Me,tCr),e(Me,K9),e(K9,g8e),e(g8e,aCr),e(K9,nCr),e(K9,tY),e(tY,sCr),e(K9,lCr),e(Me,iCr),e(Me,Z9),e(Z9,h8e),e(h8e,dCr),e(Z9,cCr),e(Z9,aY),e(aY,fCr),e(Z9,mCr),e(Me,gCr),e(Me,eM),e(eM,p8e),e(p8e,hCr),e(eM,pCr),e(eM,nY),e(nY,_Cr),e(eM,uCr),e(Me,bCr),e(Me,oM),e(oM,_8e),e(_8e,vCr),e(oM,FCr),e(oM,sY),e(sY,TCr),e(oM,MCr),e(Me,ECr),e(Me,rM),e(rM,u8e),e(u8e,CCr),e(rM,wCr),e(rM,lY),e(lY,ACr),e(rM,LCr),e(Me,yCr),e(Me,tM),e(tM,b8e),e(b8e,xCr),e(tM,$Cr),e(tM,iY),e(iY,kCr),e(tM,SCr),e(Me,RCr),e(Me,aM),e(aM,v8e),e(v8e,PCr),e(aM,BCr),e(aM,dY),e(dY,ICr),e(aM,NCr),e(Me,qCr),e(Me,nM),e(nM,F8e),e(F8e,jCr),e(nM,DCr),e(nM,cY),e(cY,GCr),e(nM,OCr),e(Me,VCr),e(Me,sM),e(sM,T8e),e(T8e,XCr),e(sM,zCr),e(sM,fY),e(fY,WCr),e(sM,QCr),e(Me,HCr),e(Me,lM),e(lM,M8e),e(M8e,UCr),e(lM,JCr),e(lM,mY),e(mY,YCr),e(lM,KCr),e(Me,ZCr),e(Me,iM),e(iM,E8e),e(E8e,e5r),e(iM,o5r),e(iM,gY),e(gY,r5r),e(iM,t5r),e(Me,a5r),e(Me,dM),e(dM,C8e),e(C8e,n5r),e(dM,s5r),e(dM,hY),e(hY,l5r),e(dM,i5r),e(kr,d5r),M(cM,kr,null),b(f,Xze,u),b(f,uc,u),e(uc,fM),e(fM,w8e),M(gx,w8e,null),e(uc,c5r),e(uc,A8e),e(A8e,f5r),b(f,zze,u),b(f,ar,u),M(hx,ar,null),e(ar,m5r),e(ar,bc),e(bc,g5r),e(bc,pY),e(pY,h5r),e(bc,p5r),e(bc,_Y),e(_Y,_5r),e(bc,u5r),e(ar,b5r),e(ar,px),e(px,v5r),e(px,L8e),e(L8e,F5r),e(px,T5r),e(ar,M5r),e(ar,It),M(_x,It,null),e(It,E5r),e(It,y8e),e(y8e,C5r),e(It,w5r),e(It,vc),e(vc,A5r),e(vc,x8e),e(x8e,L5r),e(vc,y5r),e(vc,uY),e(uY,x5r),e(vc,$5r),e(It,k5r),M(mM,It,null),e(ar,S5r),e(ar,Sr),M(ux,Sr,null),e(Sr,R5r),e(Sr,$8e),e($8e,P5r),e(Sr,B5r),e(Sr,cn),e(cn,I5r),e(cn,k8e),e(k8e,N5r),e(cn,q5r),e(cn,S8e),e(S8e,j5r),e(cn,D5r),e(cn,R8e),e(R8e,G5r),e(cn,O5r),e(Sr,V5r),e(Sr,We),e(We,gM),e(gM,P8e),e(P8e,X5r),e(gM,z5r),e(gM,bY),e(bY,W5r),e(gM,Q5r),e(We,H5r),e(We,hM),e(hM,B8e),e(B8e,U5r),e(hM,J5r),e(hM,vY),e(vY,Y5r),e(hM,K5r),e(We,Z5r),e(We,Zs),e(Zs,I8e),e(I8e,e0r),e(Zs,o0r),e(Zs,FY),e(FY,r0r),e(Zs,t0r),e(Zs,TY),e(TY,a0r),e(Zs,n0r),e(We,s0r),e(We,pM),e(pM,N8e),e(N8e,l0r),e(pM,i0r),e(pM,MY),e(MY,d0r),e(pM,c0r),e(We,f0r),e(We,_M),e(_M,q8e),e(q8e,m0r),e(_M,g0r),e(_M,EY),e(EY,h0r),e(_M,p0r),e(We,_0r),e(We,uM),e(uM,j8e),e(j8e,u0r),e(uM,b0r),e(uM,CY),e(CY,v0r),e(uM,F0r),e(We,T0r),e(We,bM),e(bM,D8e),e(D8e,M0r),e(bM,E0r),e(bM,wY),e(wY,C0r),e(bM,w0r),e(Sr,A0r),M(vM,Sr,null),b(f,Wze,u),b(f,Fc,u),e(Fc,FM),e(FM,G8e),M(bx,G8e,null),e(Fc,L0r),e(Fc,O8e),e(O8e,y0r),b(f,Qze,u),b(f,nr,u),M(vx,nr,null),e(nr,x0r),e(nr,Tc),e(Tc,$0r),e(Tc,AY),e(AY,k0r),e(Tc,S0r),e(Tc,LY),e(LY,R0r),e(Tc,P0r),e(nr,B0r),e(nr,Fx),e(Fx,I0r),e(Fx,V8e),e(V8e,N0r),e(Fx,q0r),e(nr,j0r),e(nr,Nt),M(Tx,Nt,null),e(Nt,D0r),e(Nt,X8e),e(X8e,G0r),e(Nt,O0r),e(Nt,Mc),e(Mc,V0r),e(Mc,z8e),e(z8e,X0r),e(Mc,z0r),e(Mc,yY),e(yY,W0r),e(Mc,Q0r),e(Nt,H0r),M(TM,Nt,null),e(nr,U0r),e(nr,Rr),M(Mx,Rr,null),e(Rr,J0r),e(Rr,W8e),e(W8e,Y0r),e(Rr,K0r),e(Rr,fn),e(fn,Z0r),e(fn,Q8e),e(Q8e,ewr),e(fn,owr),e(fn,H8e),e(H8e,rwr),e(fn,twr),e(fn,U8e),e(U8e,awr),e(fn,nwr),e(Rr,swr),e(Rr,ie),e(ie,MM),e(MM,J8e),e(J8e,lwr),e(MM,iwr),e(MM,xY),e(xY,dwr),e(MM,cwr),e(ie,fwr),e(ie,EM),e(EM,Y8e),e(Y8e,mwr),e(EM,gwr),e(EM,$Y),e($Y,hwr),e(EM,pwr),e(ie,_wr),e(ie,CM),e(CM,K8e),e(K8e,uwr),e(CM,bwr),e(CM,kY),e(kY,vwr),e(CM,Fwr),e(ie,Twr),e(ie,wM),e(wM,Z8e),e(Z8e,Mwr),e(wM,Ewr),e(wM,SY),e(SY,Cwr),e(wM,wwr),e(ie,Awr),e(ie,AM),e(AM,e9e),e(e9e,Lwr),e(AM,ywr),e(AM,RY),e(RY,xwr),e(AM,$wr),e(ie,kwr),e(ie,LM),e(LM,o9e),e(o9e,Swr),e(LM,Rwr),e(LM,PY),e(PY,Pwr),e(LM,Bwr),e(ie,Iwr),e(ie,yM),e(yM,r9e),e(r9e,Nwr),e(yM,qwr),e(yM,BY),e(BY,jwr),e(yM,Dwr),e(ie,Gwr),e(ie,xM),e(xM,t9e),e(t9e,Owr),e(xM,Vwr),e(xM,IY),e(IY,Xwr),e(xM,zwr),e(ie,Wwr),e(ie,$M),e($M,a9e),e(a9e,Qwr),e($M,Hwr),e($M,NY),e(NY,Uwr),e($M,Jwr),e(ie,Ywr),e(ie,kM),e(kM,n9e),e(n9e,Kwr),e(kM,Zwr),e(kM,qY),e(qY,eAr),e(kM,oAr),e(ie,rAr),e(ie,SM),e(SM,s9e),e(s9e,tAr),e(SM,aAr),e(SM,jY),e(jY,nAr),e(SM,sAr),e(ie,lAr),e(ie,RM),e(RM,l9e),e(l9e,iAr),e(RM,dAr),e(RM,DY),e(DY,cAr),e(RM,fAr),e(ie,mAr),e(ie,PM),e(PM,i9e),e(i9e,gAr),e(PM,hAr),e(PM,GY),e(GY,pAr),e(PM,_Ar),e(ie,uAr),e(ie,BM),e(BM,d9e),e(d9e,bAr),e(BM,vAr),e(BM,OY),e(OY,FAr),e(BM,TAr),e(ie,MAr),e(ie,IM),e(IM,c9e),e(c9e,EAr),e(IM,CAr),e(IM,VY),e(VY,wAr),e(IM,AAr),e(ie,LAr),e(ie,NM),e(NM,f9e),e(f9e,yAr),e(NM,xAr),e(NM,XY),e(XY,$Ar),e(NM,kAr),e(ie,SAr),e(ie,qM),e(qM,m9e),e(m9e,RAr),e(qM,PAr),e(qM,zY),e(zY,BAr),e(qM,IAr),e(ie,NAr),e(ie,jM),e(jM,g9e),e(g9e,qAr),e(jM,jAr),e(jM,WY),e(WY,DAr),e(jM,GAr),e(ie,OAr),e(ie,DM),e(DM,h9e),e(h9e,VAr),e(DM,XAr),e(DM,QY),e(QY,zAr),e(DM,WAr),e(ie,QAr),e(ie,GM),e(GM,p9e),e(p9e,HAr),e(GM,UAr),e(GM,HY),e(HY,JAr),e(GM,YAr),e(Rr,KAr),M(OM,Rr,null),b(f,Hze,u),b(f,Ec,u),e(Ec,VM),e(VM,_9e),M(Ex,_9e,null),e(Ec,ZAr),e(Ec,u9e),e(u9e,e6r),b(f,Uze,u),b(f,sr,u),M(Cx,sr,null),e(sr,o6r),e(sr,Cc),e(Cc,r6r),e(Cc,UY),e(UY,t6r),e(Cc,a6r),e(Cc,JY),e(JY,n6r),e(Cc,s6r),e(sr,l6r),e(sr,wx),e(wx,i6r),e(wx,b9e),e(b9e,d6r),e(wx,c6r),e(sr,f6r),e(sr,qt),M(Ax,qt,null),e(qt,m6r),e(qt,v9e),e(v9e,g6r),e(qt,h6r),e(qt,wc),e(wc,p6r),e(wc,F9e),e(F9e,_6r),e(wc,u6r),e(wc,YY),e(YY,b6r),e(wc,v6r),e(qt,F6r),M(XM,qt,null),e(sr,T6r),e(sr,Pr),M(Lx,Pr,null),e(Pr,M6r),e(Pr,T9e),e(T9e,E6r),e(Pr,C6r),e(Pr,mn),e(mn,w6r),e(mn,M9e),e(M9e,A6r),e(mn,L6r),e(mn,E9e),e(E9e,y6r),e(mn,x6r),e(mn,C9e),e(C9e,$6r),e(mn,k6r),e(Pr,S6r),e(Pr,ye),e(ye,zM),e(zM,w9e),e(w9e,R6r),e(zM,P6r),e(zM,KY),e(KY,B6r),e(zM,I6r),e(ye,N6r),e(ye,WM),e(WM,A9e),e(A9e,q6r),e(WM,j6r),e(WM,ZY),e(ZY,D6r),e(WM,G6r),e(ye,O6r),e(ye,QM),e(QM,L9e),e(L9e,V6r),e(QM,X6r),e(QM,eK),e(eK,z6r),e(QM,W6r),e(ye,Q6r),e(ye,HM),e(HM,y9e),e(y9e,H6r),e(HM,U6r),e(HM,oK),e(oK,J6r),e(HM,Y6r),e(ye,K6r),e(ye,UM),e(UM,x9e),e(x9e,Z6r),e(UM,eLr),e(UM,rK),e(rK,oLr),e(UM,rLr),e(ye,tLr),e(ye,JM),e(JM,$9e),e($9e,aLr),e(JM,nLr),e(JM,tK),e(tK,sLr),e(JM,lLr),e(ye,iLr),e(ye,YM),e(YM,k9e),e(k9e,dLr),e(YM,cLr),e(YM,aK),e(aK,fLr),e(YM,mLr),e(ye,gLr),e(ye,KM),e(KM,S9e),e(S9e,hLr),e(KM,pLr),e(KM,nK),e(nK,_Lr),e(KM,uLr),e(ye,bLr),e(ye,ZM),e(ZM,R9e),e(R9e,vLr),e(ZM,FLr),e(ZM,sK),e(sK,TLr),e(ZM,MLr),e(ye,ELr),e(ye,e4),e(e4,P9e),e(P9e,CLr),e(e4,wLr),e(e4,lK),e(lK,ALr),e(e4,LLr),e(Pr,yLr),M(o4,Pr,null),b(f,Jze,u),b(f,Ac,u),e(Ac,r4),e(r4,B9e),M(yx,B9e,null),e(Ac,xLr),e(Ac,I9e),e(I9e,$Lr),b(f,Yze,u),b(f,lr,u),M(xx,lr,null),e(lr,kLr),e(lr,Lc),e(Lc,SLr),e(Lc,iK),e(iK,RLr),e(Lc,PLr),e(Lc,dK),e(dK,BLr),e(Lc,ILr),e(lr,NLr),e(lr,$x),e($x,qLr),e($x,N9e),e(N9e,jLr),e($x,DLr),e(lr,GLr),e(lr,jt),M(kx,jt,null),e(jt,OLr),e(jt,q9e),e(q9e,VLr),e(jt,XLr),e(jt,yc),e(yc,zLr),e(yc,j9e),e(j9e,WLr),e(yc,QLr),e(yc,cK),e(cK,HLr),e(yc,ULr),e(jt,JLr),M(t4,jt,null),e(lr,YLr),e(lr,Br),M(Sx,Br,null),e(Br,KLr),e(Br,D9e),e(D9e,ZLr),e(Br,eyr),e(Br,gn),e(gn,oyr),e(gn,G9e),e(G9e,ryr),e(gn,tyr),e(gn,O9e),e(O9e,ayr),e(gn,nyr),e(gn,V9e),e(V9e,syr),e(gn,lyr),e(Br,iyr),e(Br,te),e(te,a4),e(a4,X9e),e(X9e,dyr),e(a4,cyr),e(a4,fK),e(fK,fyr),e(a4,myr),e(te,gyr),e(te,n4),e(n4,z9e),e(z9e,hyr),e(n4,pyr),e(n4,mK),e(mK,_yr),e(n4,uyr),e(te,byr),e(te,s4),e(s4,W9e),e(W9e,vyr),e(s4,Fyr),e(s4,gK),e(gK,Tyr),e(s4,Myr),e(te,Eyr),e(te,l4),e(l4,Q9e),e(Q9e,Cyr),e(l4,wyr),e(l4,hK),e(hK,Ayr),e(l4,Lyr),e(te,yyr),e(te,i4),e(i4,H9e),e(H9e,xyr),e(i4,$yr),e(i4,pK),e(pK,kyr),e(i4,Syr),e(te,Ryr),e(te,d4),e(d4,U9e),e(U9e,Pyr),e(d4,Byr),e(d4,_K),e(_K,Iyr),e(d4,Nyr),e(te,qyr),e(te,c4),e(c4,J9e),e(J9e,jyr),e(c4,Dyr),e(c4,uK),e(uK,Gyr),e(c4,Oyr),e(te,Vyr),e(te,f4),e(f4,Y9e),e(Y9e,Xyr),e(f4,zyr),e(f4,bK),e(bK,Wyr),e(f4,Qyr),e(te,Hyr),e(te,m4),e(m4,K9e),e(K9e,Uyr),e(m4,Jyr),e(m4,vK),e(vK,Yyr),e(m4,Kyr),e(te,Zyr),e(te,g4),e(g4,Z9e),e(Z9e,exr),e(g4,oxr),e(g4,FK),e(FK,rxr),e(g4,txr),e(te,axr),e(te,h4),e(h4,eMe),e(eMe,nxr),e(h4,sxr),e(h4,TK),e(TK,lxr),e(h4,ixr),e(te,dxr),e(te,p4),e(p4,oMe),e(oMe,cxr),e(p4,fxr),e(p4,MK),e(MK,mxr),e(p4,gxr),e(te,hxr),e(te,_4),e(_4,rMe),e(rMe,pxr),e(_4,_xr),e(_4,EK),e(EK,uxr),e(_4,bxr),e(te,vxr),e(te,u4),e(u4,tMe),e(tMe,Fxr),e(u4,Txr),e(u4,CK),e(CK,Mxr),e(u4,Exr),e(te,Cxr),e(te,b4),e(b4,aMe),e(aMe,wxr),e(b4,Axr),e(b4,wK),e(wK,Lxr),e(b4,yxr),e(te,xxr),e(te,v4),e(v4,nMe),e(nMe,$xr),e(v4,kxr),e(v4,AK),e(AK,Sxr),e(v4,Rxr),e(te,Pxr),e(te,F4),e(F4,sMe),e(sMe,Bxr),e(F4,Ixr),e(F4,LK),e(LK,Nxr),e(F4,qxr),e(te,jxr),e(te,T4),e(T4,lMe),e(lMe,Dxr),e(T4,Gxr),e(T4,yK),e(yK,Oxr),e(T4,Vxr),e(te,Xxr),e(te,M4),e(M4,iMe),e(iMe,zxr),e(M4,Wxr),e(M4,xK),e(xK,Qxr),e(M4,Hxr),e(te,Uxr),e(te,E4),e(E4,dMe),e(dMe,Jxr),e(E4,Yxr),e(E4,$K),e($K,Kxr),e(E4,Zxr),e(te,e$r),e(te,C4),e(C4,cMe),e(cMe,o$r),e(C4,r$r),e(C4,kK),e(kK,t$r),e(C4,a$r),e(te,n$r),e(te,w4),e(w4,fMe),e(fMe,s$r),e(w4,l$r),e(w4,SK),e(SK,i$r),e(w4,d$r),e(te,c$r),e(te,A4),e(A4,mMe),e(mMe,f$r),e(A4,m$r),e(A4,RK),e(RK,g$r),e(A4,h$r),e(te,p$r),e(te,L4),e(L4,gMe),e(gMe,_$r),e(L4,u$r),e(L4,PK),e(PK,b$r),e(L4,v$r),e(te,F$r),e(te,y4),e(y4,hMe),e(hMe,T$r),e(y4,M$r),e(y4,BK),e(BK,E$r),e(y4,C$r),e(te,w$r),e(te,x4),e(x4,pMe),e(pMe,A$r),e(x4,L$r),e(x4,IK),e(IK,y$r),e(x4,x$r),e(Br,$$r),M($4,Br,null),b(f,Kze,u),b(f,xc,u),e(xc,k4),e(k4,_Me),M(Rx,_Me,null),e(xc,k$r),e(xc,uMe),e(uMe,S$r),b(f,Zze,u),b(f,ir,u),M(Px,ir,null),e(ir,R$r),e(ir,$c),e($c,P$r),e($c,NK),e(NK,B$r),e($c,I$r),e($c,qK),e(qK,N$r),e($c,q$r),e(ir,j$r),e(ir,Bx),e(Bx,D$r),e(Bx,bMe),e(bMe,G$r),e(Bx,O$r),e(ir,V$r),e(ir,Dt),M(Ix,Dt,null),e(Dt,X$r),e(Dt,vMe),e(vMe,z$r),e(Dt,W$r),e(Dt,kc),e(kc,Q$r),e(kc,FMe),e(FMe,H$r),e(kc,U$r),e(kc,jK),e(jK,J$r),e(kc,Y$r),e(Dt,K$r),M(S4,Dt,null),e(ir,Z$r),e(ir,Ir),M(Nx,Ir,null),e(Ir,ekr),e(Ir,TMe),e(TMe,okr),e(Ir,rkr),e(Ir,hn),e(hn,tkr),e(hn,MMe),e(MMe,akr),e(hn,nkr),e(hn,EMe),e(EMe,skr),e(hn,lkr),e(hn,CMe),e(CMe,ikr),e(hn,dkr),e(Ir,ckr),e(Ir,be),e(be,R4),e(R4,wMe),e(wMe,fkr),e(R4,mkr),e(R4,DK),e(DK,gkr),e(R4,hkr),e(be,pkr),e(be,P4),e(P4,AMe),e(AMe,_kr),e(P4,ukr),e(P4,GK),e(GK,bkr),e(P4,vkr),e(be,Fkr),e(be,B4),e(B4,LMe),e(LMe,Tkr),e(B4,Mkr),e(B4,OK),e(OK,Ekr),e(B4,Ckr),e(be,wkr),e(be,I4),e(I4,yMe),e(yMe,Akr),e(I4,Lkr),e(I4,VK),e(VK,ykr),e(I4,xkr),e(be,$kr),e(be,N4),e(N4,xMe),e(xMe,kkr),e(N4,Skr),e(N4,XK),e(XK,Rkr),e(N4,Pkr),e(be,Bkr),e(be,q4),e(q4,$Me),e($Me,Ikr),e(q4,Nkr),e(q4,zK),e(zK,qkr),e(q4,jkr),e(be,Dkr),e(be,j4),e(j4,kMe),e(kMe,Gkr),e(j4,Okr),e(j4,WK),e(WK,Vkr),e(j4,Xkr),e(be,zkr),e(be,D4),e(D4,SMe),e(SMe,Wkr),e(D4,Qkr),e(D4,QK),e(QK,Hkr),e(D4,Ukr),e(be,Jkr),e(be,G4),e(G4,RMe),e(RMe,Ykr),e(G4,Kkr),e(G4,HK),e(HK,Zkr),e(G4,eSr),e(be,oSr),e(be,O4),e(O4,PMe),e(PMe,rSr),e(O4,tSr),e(O4,UK),e(UK,aSr),e(O4,nSr),e(be,sSr),e(be,V4),e(V4,BMe),e(BMe,lSr),e(V4,iSr),e(V4,JK),e(JK,dSr),e(V4,cSr),e(be,fSr),e(be,X4),e(X4,IMe),e(IMe,mSr),e(X4,gSr),e(X4,YK),e(YK,hSr),e(X4,pSr),e(be,_Sr),e(be,z4),e(z4,NMe),e(NMe,uSr),e(z4,bSr),e(z4,KK),e(KK,vSr),e(z4,FSr),e(be,TSr),e(be,W4),e(W4,qMe),e(qMe,MSr),e(W4,ESr),e(W4,ZK),e(ZK,CSr),e(W4,wSr),e(be,ASr),e(be,Q4),e(Q4,jMe),e(jMe,LSr),e(Q4,ySr),e(Q4,eZ),e(eZ,xSr),e(Q4,$Sr),e(be,kSr),e(be,H4),e(H4,DMe),e(DMe,SSr),e(H4,RSr),e(H4,oZ),e(oZ,PSr),e(H4,BSr),e(be,ISr),e(be,U4),e(U4,GMe),e(GMe,NSr),e(U4,qSr),e(U4,rZ),e(rZ,jSr),e(U4,DSr),e(Ir,GSr),M(J4,Ir,null),b(f,eWe,u),b(f,Sc,u),e(Sc,Y4),e(Y4,OMe),M(qx,OMe,null),e(Sc,OSr),e(Sc,VMe),e(VMe,VSr),b(f,oWe,u),b(f,dr,u),M(jx,dr,null),e(dr,XSr),e(dr,Rc),e(Rc,zSr),e(Rc,tZ),e(tZ,WSr),e(Rc,QSr),e(Rc,aZ),e(aZ,HSr),e(Rc,USr),e(dr,JSr),e(dr,Dx),e(Dx,YSr),e(Dx,XMe),e(XMe,KSr),e(Dx,ZSr),e(dr,eRr),e(dr,Gt),M(Gx,Gt,null),e(Gt,oRr),e(Gt,zMe),e(zMe,rRr),e(Gt,tRr),e(Gt,Pc),e(Pc,aRr),e(Pc,WMe),e(WMe,nRr),e(Pc,sRr),e(Pc,nZ),e(nZ,lRr),e(Pc,iRr),e(Gt,dRr),M(K4,Gt,null),e(dr,cRr),e(dr,Nr),M(Ox,Nr,null),e(Nr,fRr),e(Nr,QMe),e(QMe,mRr),e(Nr,gRr),e(Nr,pn),e(pn,hRr),e(pn,HMe),e(HMe,pRr),e(pn,_Rr),e(pn,UMe),e(UMe,uRr),e(pn,bRr),e(pn,JMe),e(JMe,vRr),e(pn,FRr),e(Nr,TRr),e(Nr,Vx),e(Vx,Z4),e(Z4,YMe),e(YMe,MRr),e(Z4,ERr),e(Z4,sZ),e(sZ,CRr),e(Z4,wRr),e(Vx,ARr),e(Vx,eE),e(eE,KMe),e(KMe,LRr),e(eE,yRr),e(eE,lZ),e(lZ,xRr),e(eE,$Rr),e(Nr,kRr),M(oE,Nr,null),b(f,rWe,u),b(f,Bc,u),e(Bc,rE),e(rE,ZMe),M(Xx,ZMe,null),e(Bc,SRr),e(Bc,e4e),e(e4e,RRr),b(f,tWe,u),b(f,cr,u),M(zx,cr,null),e(cr,PRr),e(cr,Ic),e(Ic,BRr),e(Ic,iZ),e(iZ,IRr),e(Ic,NRr),e(Ic,dZ),e(dZ,qRr),e(Ic,jRr),e(cr,DRr),e(cr,Wx),e(Wx,GRr),e(Wx,o4e),e(o4e,ORr),e(Wx,VRr),e(cr,XRr),e(cr,Ot),M(Qx,Ot,null),e(Ot,zRr),e(Ot,r4e),e(r4e,WRr),e(Ot,QRr),e(Ot,Nc),e(Nc,HRr),e(Nc,t4e),e(t4e,URr),e(Nc,JRr),e(Nc,cZ),e(cZ,YRr),e(Nc,KRr),e(Ot,ZRr),M(tE,Ot,null),e(cr,ePr),e(cr,qr),M(Hx,qr,null),e(qr,oPr),e(qr,a4e),e(a4e,rPr),e(qr,tPr),e(qr,_n),e(_n,aPr),e(_n,n4e),e(n4e,nPr),e(_n,sPr),e(_n,s4e),e(s4e,lPr),e(_n,iPr),e(_n,l4e),e(l4e,dPr),e(_n,cPr),e(qr,fPr),e(qr,i4e),e(i4e,aE),e(aE,d4e),e(d4e,mPr),e(aE,gPr),e(aE,fZ),e(fZ,hPr),e(aE,pPr),e(qr,_Pr),M(nE,qr,null),b(f,aWe,u),b(f,qc,u),e(qc,sE),e(sE,c4e),M(Ux,c4e,null),e(qc,uPr),e(qc,f4e),e(f4e,bPr),b(f,nWe,u),b(f,fr,u),M(Jx,fr,null),e(fr,vPr),e(fr,jc),e(jc,FPr),e(jc,mZ),e(mZ,TPr),e(jc,MPr),e(jc,gZ),e(gZ,EPr),e(jc,CPr),e(fr,wPr),e(fr,Yx),e(Yx,APr),e(Yx,m4e),e(m4e,LPr),e(Yx,yPr),e(fr,xPr),e(fr,Vt),M(Kx,Vt,null),e(Vt,$Pr),e(Vt,g4e),e(g4e,kPr),e(Vt,SPr),e(Vt,Dc),e(Dc,RPr),e(Dc,h4e),e(h4e,PPr),e(Dc,BPr),e(Dc,hZ),e(hZ,IPr),e(Dc,NPr),e(Vt,qPr),M(lE,Vt,null),e(fr,jPr),e(fr,jr),M(Zx,jr,null),e(jr,DPr),e(jr,p4e),e(p4e,GPr),e(jr,OPr),e(jr,un),e(un,VPr),e(un,_4e),e(_4e,XPr),e(un,zPr),e(un,u4e),e(u4e,WPr),e(un,QPr),e(un,b4e),e(b4e,HPr),e(un,UPr),e(jr,JPr),e(jr,de),e(de,iE),e(iE,v4e),e(v4e,YPr),e(iE,KPr),e(iE,pZ),e(pZ,ZPr),e(iE,eBr),e(de,oBr),e(de,dE),e(dE,F4e),e(F4e,rBr),e(dE,tBr),e(dE,_Z),e(_Z,aBr),e(dE,nBr),e(de,sBr),e(de,cE),e(cE,T4e),e(T4e,lBr),e(cE,iBr),e(cE,uZ),e(uZ,dBr),e(cE,cBr),e(de,fBr),e(de,fE),e(fE,M4e),e(M4e,mBr),e(fE,gBr),e(fE,bZ),e(bZ,hBr),e(fE,pBr),e(de,_Br),e(de,mE),e(mE,E4e),e(E4e,uBr),e(mE,bBr),e(mE,vZ),e(vZ,vBr),e(mE,FBr),e(de,TBr),e(de,gE),e(gE,C4e),e(C4e,MBr),e(gE,EBr),e(gE,FZ),e(FZ,CBr),e(gE,wBr),e(de,ABr),e(de,hE),e(hE,w4e),e(w4e,LBr),e(hE,yBr),e(hE,TZ),e(TZ,xBr),e(hE,$Br),e(de,kBr),e(de,pE),e(pE,A4e),e(A4e,SBr),e(pE,RBr),e(pE,MZ),e(MZ,PBr),e(pE,BBr),e(de,IBr),e(de,_E),e(_E,L4e),e(L4e,NBr),e(_E,qBr),e(_E,EZ),e(EZ,jBr),e(_E,DBr),e(de,GBr),e(de,uE),e(uE,y4e),e(y4e,OBr),e(uE,VBr),e(uE,CZ),e(CZ,XBr),e(uE,zBr),e(de,WBr),e(de,bE),e(bE,x4e),e(x4e,QBr),e(bE,HBr),e(bE,wZ),e(wZ,UBr),e(bE,JBr),e(de,YBr),e(de,vE),e(vE,$4e),e($4e,KBr),e(vE,ZBr),e(vE,AZ),e(AZ,eIr),e(vE,oIr),e(de,rIr),e(de,FE),e(FE,k4e),e(k4e,tIr),e(FE,aIr),e(FE,LZ),e(LZ,nIr),e(FE,sIr),e(de,lIr),e(de,TE),e(TE,S4e),e(S4e,iIr),e(TE,dIr),e(TE,yZ),e(yZ,cIr),e(TE,fIr),e(de,mIr),e(de,ME),e(ME,R4e),e(R4e,gIr),e(ME,hIr),e(ME,xZ),e(xZ,pIr),e(ME,_Ir),e(de,uIr),e(de,EE),e(EE,P4e),e(P4e,bIr),e(EE,vIr),e(EE,$Z),e($Z,FIr),e(EE,TIr),e(de,MIr),e(de,CE),e(CE,B4e),e(B4e,EIr),e(CE,CIr),e(CE,kZ),e(kZ,wIr),e(CE,AIr),e(de,LIr),e(de,wE),e(wE,I4e),e(I4e,yIr),e(wE,xIr),e(wE,SZ),e(SZ,$Ir),e(wE,kIr),e(de,SIr),e(de,AE),e(AE,N4e),e(N4e,RIr),e(AE,PIr),e(AE,RZ),e(RZ,BIr),e(AE,IIr),e(de,NIr),e(de,LE),e(LE,q4e),e(q4e,qIr),e(LE,jIr),e(LE,PZ),e(PZ,DIr),e(LE,GIr),e(jr,OIr),M(yE,jr,null),b(f,sWe,u),b(f,Gc,u),e(Gc,xE),e(xE,j4e),M(e$,j4e,null),e(Gc,VIr),e(Gc,D4e),e(D4e,XIr),b(f,lWe,u),b(f,mr,u),M(o$,mr,null),e(mr,zIr),e(mr,Oc),e(Oc,WIr),e(Oc,BZ),e(BZ,QIr),e(Oc,HIr),e(Oc,IZ),e(IZ,UIr),e(Oc,JIr),e(mr,YIr),e(mr,r$),e(r$,KIr),e(r$,G4e),e(G4e,ZIr),e(r$,eNr),e(mr,oNr),e(mr,Xt),M(t$,Xt,null),e(Xt,rNr),e(Xt,O4e),e(O4e,tNr),e(Xt,aNr),e(Xt,Vc),e(Vc,nNr),e(Vc,V4e),e(V4e,sNr),e(Vc,lNr),e(Vc,NZ),e(NZ,iNr),e(Vc,dNr),e(Xt,cNr),M($E,Xt,null),e(mr,fNr),e(mr,Dr),M(a$,Dr,null),e(Dr,mNr),e(Dr,X4e),e(X4e,gNr),e(Dr,hNr),e(Dr,bn),e(bn,pNr),e(bn,z4e),e(z4e,_Nr),e(bn,uNr),e(bn,W4e),e(W4e,bNr),e(bn,vNr),e(bn,Q4e),e(Q4e,FNr),e(bn,TNr),e(Dr,MNr),e(Dr,ce),e(ce,kE),e(kE,H4e),e(H4e,ENr),e(kE,CNr),e(kE,qZ),e(qZ,wNr),e(kE,ANr),e(ce,LNr),e(ce,SE),e(SE,U4e),e(U4e,yNr),e(SE,xNr),e(SE,jZ),e(jZ,$Nr),e(SE,kNr),e(ce,SNr),e(ce,RE),e(RE,J4e),e(J4e,RNr),e(RE,PNr),e(RE,DZ),e(DZ,BNr),e(RE,INr),e(ce,NNr),e(ce,PE),e(PE,Y4e),e(Y4e,qNr),e(PE,jNr),e(PE,GZ),e(GZ,DNr),e(PE,GNr),e(ce,ONr),e(ce,BE),e(BE,K4e),e(K4e,VNr),e(BE,XNr),e(BE,OZ),e(OZ,zNr),e(BE,WNr),e(ce,QNr),e(ce,IE),e(IE,Z4e),e(Z4e,HNr),e(IE,UNr),e(IE,VZ),e(VZ,JNr),e(IE,YNr),e(ce,KNr),e(ce,NE),e(NE,eEe),e(eEe,ZNr),e(NE,eqr),e(NE,XZ),e(XZ,oqr),e(NE,rqr),e(ce,tqr),e(ce,qE),e(qE,oEe),e(oEe,aqr),e(qE,nqr),e(qE,zZ),e(zZ,sqr),e(qE,lqr),e(ce,iqr),e(ce,jE),e(jE,rEe),e(rEe,dqr),e(jE,cqr),e(jE,WZ),e(WZ,fqr),e(jE,mqr),e(ce,gqr),e(ce,DE),e(DE,tEe),e(tEe,hqr),e(DE,pqr),e(DE,QZ),e(QZ,_qr),e(DE,uqr),e(ce,bqr),e(ce,GE),e(GE,aEe),e(aEe,vqr),e(GE,Fqr),e(GE,HZ),e(HZ,Tqr),e(GE,Mqr),e(ce,Eqr),e(ce,OE),e(OE,nEe),e(nEe,Cqr),e(OE,wqr),e(OE,UZ),e(UZ,Aqr),e(OE,Lqr),e(ce,yqr),e(ce,VE),e(VE,sEe),e(sEe,xqr),e(VE,$qr),e(VE,JZ),e(JZ,kqr),e(VE,Sqr),e(ce,Rqr),e(ce,XE),e(XE,lEe),e(lEe,Pqr),e(XE,Bqr),e(XE,YZ),e(YZ,Iqr),e(XE,Nqr),e(ce,qqr),e(ce,zE),e(zE,iEe),e(iEe,jqr),e(zE,Dqr),e(zE,KZ),e(KZ,Gqr),e(zE,Oqr),e(ce,Vqr),e(ce,WE),e(WE,dEe),e(dEe,Xqr),e(WE,zqr),e(WE,ZZ),e(ZZ,Wqr),e(WE,Qqr),e(ce,Hqr),e(ce,QE),e(QE,cEe),e(cEe,Uqr),e(QE,Jqr),e(QE,eee),e(eee,Yqr),e(QE,Kqr),e(ce,Zqr),e(ce,HE),e(HE,fEe),e(fEe,ejr),e(HE,ojr),e(HE,oee),e(oee,rjr),e(HE,tjr),e(ce,ajr),e(ce,UE),e(UE,mEe),e(mEe,njr),e(UE,sjr),e(UE,ree),e(ree,ljr),e(UE,ijr),e(ce,djr),e(ce,JE),e(JE,gEe),e(gEe,cjr),e(JE,fjr),e(JE,tee),e(tee,mjr),e(JE,gjr),e(Dr,hjr),M(YE,Dr,null),b(f,iWe,u),b(f,Xc,u),e(Xc,KE),e(KE,hEe),M(n$,hEe,null),e(Xc,pjr),e(Xc,pEe),e(pEe,_jr),b(f,dWe,u),b(f,gr,u),M(s$,gr,null),e(gr,ujr),e(gr,zc),e(zc,bjr),e(zc,aee),e(aee,vjr),e(zc,Fjr),e(zc,nee),e(nee,Tjr),e(zc,Mjr),e(gr,Ejr),e(gr,l$),e(l$,Cjr),e(l$,_Ee),e(_Ee,wjr),e(l$,Ajr),e(gr,Ljr),e(gr,zt),M(i$,zt,null),e(zt,yjr),e(zt,uEe),e(uEe,xjr),e(zt,$jr),e(zt,Wc),e(Wc,kjr),e(Wc,bEe),e(bEe,Sjr),e(Wc,Rjr),e(Wc,see),e(see,Pjr),e(Wc,Bjr),e(zt,Ijr),M(ZE,zt,null),e(gr,Njr),e(gr,Gr),M(d$,Gr,null),e(Gr,qjr),e(Gr,vEe),e(vEe,jjr),e(Gr,Djr),e(Gr,vn),e(vn,Gjr),e(vn,FEe),e(FEe,Ojr),e(vn,Vjr),e(vn,TEe),e(TEe,Xjr),e(vn,zjr),e(vn,MEe),e(MEe,Wjr),e(vn,Qjr),e(Gr,Hjr),e(Gr,EEe),e(EEe,eC),e(eC,CEe),e(CEe,Ujr),e(eC,Jjr),e(eC,lee),e(lee,Yjr),e(eC,Kjr),e(Gr,Zjr),M(oC,Gr,null),b(f,cWe,u),b(f,Qc,u),e(Qc,rC),e(rC,wEe),M(c$,wEe,null),e(Qc,eDr),e(Qc,AEe),e(AEe,oDr),b(f,fWe,u),b(f,hr,u),M(f$,hr,null),e(hr,rDr),e(hr,Hc),e(Hc,tDr),e(Hc,iee),e(iee,aDr),e(Hc,nDr),e(Hc,dee),e(dee,sDr),e(Hc,lDr),e(hr,iDr),e(hr,m$),e(m$,dDr),e(m$,LEe),e(LEe,cDr),e(m$,fDr),e(hr,mDr),e(hr,Wt),M(g$,Wt,null),e(Wt,gDr),e(Wt,yEe),e(yEe,hDr),e(Wt,pDr),e(Wt,Uc),e(Uc,_Dr),e(Uc,xEe),e(xEe,uDr),e(Uc,bDr),e(Uc,cee),e(cee,vDr),e(Uc,FDr),e(Wt,TDr),M(tC,Wt,null),e(hr,MDr),e(hr,Or),M(h$,Or,null),e(Or,EDr),e(Or,$Ee),e($Ee,CDr),e(Or,wDr),e(Or,Fn),e(Fn,ADr),e(Fn,kEe),e(kEe,LDr),e(Fn,yDr),e(Fn,SEe),e(SEe,xDr),e(Fn,$Dr),e(Fn,REe),e(REe,kDr),e(Fn,SDr),e(Or,RDr),e(Or,PEe),e(PEe,aC),e(aC,BEe),e(BEe,PDr),e(aC,BDr),e(aC,fee),e(fee,IDr),e(aC,NDr),e(Or,qDr),M(nC,Or,null),b(f,mWe,u),b(f,Jc,u),e(Jc,sC),e(sC,IEe),M(p$,IEe,null),e(Jc,jDr),e(Jc,NEe),e(NEe,DDr),b(f,gWe,u),b(f,pr,u),M(_$,pr,null),e(pr,GDr),e(pr,Yc),e(Yc,ODr),e(Yc,mee),e(mee,VDr),e(Yc,XDr),e(Yc,gee),e(gee,zDr),e(Yc,WDr),e(pr,QDr),e(pr,u$),e(u$,HDr),e(u$,qEe),e(qEe,UDr),e(u$,JDr),e(pr,YDr),e(pr,Qt),M(b$,Qt,null),e(Qt,KDr),e(Qt,jEe),e(jEe,ZDr),e(Qt,eGr),e(Qt,Kc),e(Kc,oGr),e(Kc,DEe),e(DEe,rGr),e(Kc,tGr),e(Kc,hee),e(hee,aGr),e(Kc,nGr),e(Qt,sGr),M(lC,Qt,null),e(pr,lGr),e(pr,Vr),M(v$,Vr,null),e(Vr,iGr),e(Vr,GEe),e(GEe,dGr),e(Vr,cGr),e(Vr,Tn),e(Tn,fGr),e(Tn,OEe),e(OEe,mGr),e(Tn,gGr),e(Tn,VEe),e(VEe,hGr),e(Tn,pGr),e(Tn,XEe),e(XEe,_Gr),e(Tn,uGr),e(Vr,bGr),e(Vr,oe),e(oe,iC),e(iC,zEe),e(zEe,vGr),e(iC,FGr),e(iC,pee),e(pee,TGr),e(iC,MGr),e(oe,EGr),e(oe,dC),e(dC,WEe),e(WEe,CGr),e(dC,wGr),e(dC,_ee),e(_ee,AGr),e(dC,LGr),e(oe,yGr),e(oe,cC),e(cC,QEe),e(QEe,xGr),e(cC,$Gr),e(cC,uee),e(uee,kGr),e(cC,SGr),e(oe,RGr),e(oe,fC),e(fC,HEe),e(HEe,PGr),e(fC,BGr),e(fC,bee),e(bee,IGr),e(fC,NGr),e(oe,qGr),e(oe,mC),e(mC,UEe),e(UEe,jGr),e(mC,DGr),e(mC,vee),e(vee,GGr),e(mC,OGr),e(oe,VGr),e(oe,gC),e(gC,JEe),e(JEe,XGr),e(gC,zGr),e(gC,Fee),e(Fee,WGr),e(gC,QGr),e(oe,HGr),e(oe,hC),e(hC,YEe),e(YEe,UGr),e(hC,JGr),e(hC,Tee),e(Tee,YGr),e(hC,KGr),e(oe,ZGr),e(oe,pC),e(pC,KEe),e(KEe,eOr),e(pC,oOr),e(pC,Mee),e(Mee,rOr),e(pC,tOr),e(oe,aOr),e(oe,_C),e(_C,ZEe),e(ZEe,nOr),e(_C,sOr),e(_C,Eee),e(Eee,lOr),e(_C,iOr),e(oe,dOr),e(oe,uC),e(uC,eCe),e(eCe,cOr),e(uC,fOr),e(uC,Cee),e(Cee,mOr),e(uC,gOr),e(oe,hOr),e(oe,bC),e(bC,oCe),e(oCe,pOr),e(bC,_Or),e(bC,wee),e(wee,uOr),e(bC,bOr),e(oe,vOr),e(oe,vC),e(vC,rCe),e(rCe,FOr),e(vC,TOr),e(vC,Aee),e(Aee,MOr),e(vC,EOr),e(oe,COr),e(oe,FC),e(FC,tCe),e(tCe,wOr),e(FC,AOr),e(FC,Lee),e(Lee,LOr),e(FC,yOr),e(oe,xOr),e(oe,TC),e(TC,aCe),e(aCe,$Or),e(TC,kOr),e(TC,yee),e(yee,SOr),e(TC,ROr),e(oe,POr),e(oe,MC),e(MC,nCe),e(nCe,BOr),e(MC,IOr),e(MC,xee),e(xee,NOr),e(MC,qOr),e(oe,jOr),e(oe,EC),e(EC,sCe),e(sCe,DOr),e(EC,GOr),e(EC,$ee),e($ee,OOr),e(EC,VOr),e(oe,XOr),e(oe,CC),e(CC,lCe),e(lCe,zOr),e(CC,WOr),e(CC,kee),e(kee,QOr),e(CC,HOr),e(oe,UOr),e(oe,wC),e(wC,iCe),e(iCe,JOr),e(wC,YOr),e(wC,See),e(See,KOr),e(wC,ZOr),e(oe,eVr),e(oe,AC),e(AC,dCe),e(dCe,oVr),e(AC,rVr),e(AC,Ree),e(Ree,tVr),e(AC,aVr),e(oe,nVr),e(oe,LC),e(LC,cCe),e(cCe,sVr),e(LC,lVr),e(LC,Pee),e(Pee,iVr),e(LC,dVr),e(oe,cVr),e(oe,yC),e(yC,fCe),e(fCe,fVr),e(yC,mVr),e(yC,Bee),e(Bee,gVr),e(yC,hVr),e(oe,pVr),e(oe,xC),e(xC,mCe),e(mCe,_Vr),e(xC,uVr),e(xC,Iee),e(Iee,bVr),e(xC,vVr),e(oe,FVr),e(oe,$C),e($C,gCe),e(gCe,TVr),e($C,MVr),e($C,Nee),e(Nee,EVr),e($C,CVr),e(oe,wVr),e(oe,kC),e(kC,hCe),e(hCe,AVr),e(kC,LVr),e(kC,qee),e(qee,yVr),e(kC,xVr),e(oe,$Vr),e(oe,SC),e(SC,pCe),e(pCe,kVr),e(SC,SVr),e(SC,jee),e(jee,RVr),e(SC,PVr),e(oe,BVr),e(oe,RC),e(RC,_Ce),e(_Ce,IVr),e(RC,NVr),e(RC,Dee),e(Dee,qVr),e(RC,jVr),e(oe,DVr),e(oe,PC),e(PC,uCe),e(uCe,GVr),e(PC,OVr),e(PC,Gee),e(Gee,VVr),e(PC,XVr),e(Vr,zVr),M(BC,Vr,null),b(f,hWe,u),b(f,Zc,u),e(Zc,IC),e(IC,bCe),M(F$,bCe,null),e(Zc,WVr),e(Zc,vCe),e(vCe,QVr),b(f,pWe,u),b(f,_r,u),M(T$,_r,null),e(_r,HVr),e(_r,ef),e(ef,UVr),e(ef,Oee),e(Oee,JVr),e(ef,YVr),e(ef,Vee),e(Vee,KVr),e(ef,ZVr),e(_r,eXr),e(_r,M$),e(M$,oXr),e(M$,FCe),e(FCe,rXr),e(M$,tXr),e(_r,aXr),e(_r,Ht),M(E$,Ht,null),e(Ht,nXr),e(Ht,TCe),e(TCe,sXr),e(Ht,lXr),e(Ht,of),e(of,iXr),e(of,MCe),e(MCe,dXr),e(of,cXr),e(of,Xee),e(Xee,fXr),e(of,mXr),e(Ht,gXr),M(NC,Ht,null),e(_r,hXr),e(_r,Xr),M(C$,Xr,null),e(Xr,pXr),e(Xr,ECe),e(ECe,_Xr),e(Xr,uXr),e(Xr,Mn),e(Mn,bXr),e(Mn,CCe),e(CCe,vXr),e(Mn,FXr),e(Mn,wCe),e(wCe,TXr),e(Mn,MXr),e(Mn,ACe),e(ACe,EXr),e(Mn,CXr),e(Xr,wXr),e(Xr,xe),e(xe,qC),e(qC,LCe),e(LCe,AXr),e(qC,LXr),e(qC,zee),e(zee,yXr),e(qC,xXr),e(xe,$Xr),e(xe,jC),e(jC,yCe),e(yCe,kXr),e(jC,SXr),e(jC,Wee),e(Wee,RXr),e(jC,PXr),e(xe,BXr),e(xe,DC),e(DC,xCe),e(xCe,IXr),e(DC,NXr),e(DC,Qee),e(Qee,qXr),e(DC,jXr),e(xe,DXr),e(xe,GC),e(GC,$Ce),e($Ce,GXr),e(GC,OXr),e(GC,Hee),e(Hee,VXr),e(GC,XXr),e(xe,zXr),e(xe,OC),e(OC,kCe),e(kCe,WXr),e(OC,QXr),e(OC,Uee),e(Uee,HXr),e(OC,UXr),e(xe,JXr),e(xe,VC),e(VC,SCe),e(SCe,YXr),e(VC,KXr),e(VC,Jee),e(Jee,ZXr),e(VC,ezr),e(xe,ozr),e(xe,XC),e(XC,RCe),e(RCe,rzr),e(XC,tzr),e(XC,Yee),e(Yee,azr),e(XC,nzr),e(xe,szr),e(xe,zC),e(zC,PCe),e(PCe,lzr),e(zC,izr),e(zC,Kee),e(Kee,dzr),e(zC,czr),e(xe,fzr),e(xe,WC),e(WC,BCe),e(BCe,mzr),e(WC,gzr),e(WC,Zee),e(Zee,hzr),e(WC,pzr),e(xe,_zr),e(xe,QC),e(QC,ICe),e(ICe,uzr),e(QC,bzr),e(QC,eoe),e(eoe,vzr),e(QC,Fzr),e(Xr,Tzr),M(HC,Xr,null),b(f,_We,u),b(f,rf,u),e(rf,UC),e(UC,NCe),M(w$,NCe,null),e(rf,Mzr),e(rf,qCe),e(qCe,Ezr),b(f,uWe,u),b(f,ur,u),M(A$,ur,null),e(ur,Czr),e(ur,tf),e(tf,wzr),e(tf,ooe),e(ooe,Azr),e(tf,Lzr),e(tf,roe),e(roe,yzr),e(tf,xzr),e(ur,$zr),e(ur,L$),e(L$,kzr),e(L$,jCe),e(jCe,Szr),e(L$,Rzr),e(ur,Pzr),e(ur,Ut),M(y$,Ut,null),e(Ut,Bzr),e(Ut,DCe),e(DCe,Izr),e(Ut,Nzr),e(Ut,af),e(af,qzr),e(af,GCe),e(GCe,jzr),e(af,Dzr),e(af,toe),e(toe,Gzr),e(af,Ozr),e(Ut,Vzr),M(JC,Ut,null),e(ur,Xzr),e(ur,zr),M(x$,zr,null),e(zr,zzr),e(zr,OCe),e(OCe,Wzr),e(zr,Qzr),e(zr,En),e(En,Hzr),e(En,VCe),e(VCe,Uzr),e(En,Jzr),e(En,XCe),e(XCe,Yzr),e(En,Kzr),e(En,zCe),e(zCe,Zzr),e(En,eWr),e(zr,oWr),e(zr,Ee),e(Ee,YC),e(YC,WCe),e(WCe,rWr),e(YC,tWr),e(YC,aoe),e(aoe,aWr),e(YC,nWr),e(Ee,sWr),e(Ee,KC),e(KC,QCe),e(QCe,lWr),e(KC,iWr),e(KC,noe),e(noe,dWr),e(KC,cWr),e(Ee,fWr),e(Ee,ZC),e(ZC,HCe),e(HCe,mWr),e(ZC,gWr),e(ZC,soe),e(soe,hWr),e(ZC,pWr),e(Ee,_Wr),e(Ee,e5),e(e5,UCe),e(UCe,uWr),e(e5,bWr),e(e5,loe),e(loe,vWr),e(e5,FWr),e(Ee,TWr),e(Ee,o5),e(o5,JCe),e(JCe,MWr),e(o5,EWr),e(o5,ioe),e(ioe,CWr),e(o5,wWr),e(Ee,AWr),e(Ee,r5),e(r5,YCe),e(YCe,LWr),e(r5,yWr),e(r5,doe),e(doe,xWr),e(r5,$Wr),e(Ee,kWr),e(Ee,t5),e(t5,KCe),e(KCe,SWr),e(t5,RWr),e(t5,coe),e(coe,PWr),e(t5,BWr),e(Ee,IWr),e(Ee,a5),e(a5,ZCe),e(ZCe,NWr),e(a5,qWr),e(a5,foe),e(foe,jWr),e(a5,DWr),e(Ee,GWr),e(Ee,n5),e(n5,e5e),e(e5e,OWr),e(n5,VWr),e(n5,moe),e(moe,XWr),e(n5,zWr),e(Ee,WWr),e(Ee,s5),e(s5,o5e),e(o5e,QWr),e(s5,HWr),e(s5,goe),e(goe,UWr),e(s5,JWr),e(Ee,YWr),e(Ee,l5),e(l5,r5e),e(r5e,KWr),e(l5,ZWr),e(l5,hoe),e(hoe,eQr),e(l5,oQr),e(Ee,rQr),e(Ee,i5),e(i5,t5e),e(t5e,tQr),e(i5,aQr),e(i5,poe),e(poe,nQr),e(i5,sQr),e(Ee,lQr),e(Ee,d5),e(d5,a5e),e(a5e,iQr),e(d5,dQr),e(d5,_oe),e(_oe,cQr),e(d5,fQr),e(zr,mQr),M(c5,zr,null),b(f,bWe,u),b(f,nf,u),e(nf,f5),e(f5,n5e),M($$,n5e,null),e(nf,gQr),e(nf,s5e),e(s5e,hQr),b(f,vWe,u),b(f,br,u),M(k$,br,null),e(br,pQr),e(br,sf),e(sf,_Qr),e(sf,uoe),e(uoe,uQr),e(sf,bQr),e(sf,boe),e(boe,vQr),e(sf,FQr),e(br,TQr),e(br,S$),e(S$,MQr),e(S$,l5e),e(l5e,EQr),e(S$,CQr),e(br,wQr),e(br,Jt),M(R$,Jt,null),e(Jt,AQr),e(Jt,i5e),e(i5e,LQr),e(Jt,yQr),e(Jt,lf),e(lf,xQr),e(lf,d5e),e(d5e,$Qr),e(lf,kQr),e(lf,voe),e(voe,SQr),e(lf,RQr),e(Jt,PQr),M(m5,Jt,null),e(br,BQr),e(br,Wr),M(P$,Wr,null),e(Wr,IQr),e(Wr,c5e),e(c5e,NQr),e(Wr,qQr),e(Wr,Cn),e(Cn,jQr),e(Cn,f5e),e(f5e,DQr),e(Cn,GQr),e(Cn,m5e),e(m5e,OQr),e(Cn,VQr),e(Cn,g5e),e(g5e,XQr),e(Cn,zQr),e(Wr,WQr),e(Wr,$e),e($e,g5),e(g5,h5e),e(h5e,QQr),e(g5,HQr),e(g5,Foe),e(Foe,UQr),e(g5,JQr),e($e,YQr),e($e,h5),e(h5,p5e),e(p5e,KQr),e(h5,ZQr),e(h5,Toe),e(Toe,eHr),e(h5,oHr),e($e,rHr),e($e,p5),e(p5,_5e),e(_5e,tHr),e(p5,aHr),e(p5,Moe),e(Moe,nHr),e(p5,sHr),e($e,lHr),e($e,_5),e(_5,u5e),e(u5e,iHr),e(_5,dHr),e(_5,Eoe),e(Eoe,cHr),e(_5,fHr),e($e,mHr),e($e,u5),e(u5,b5e),e(b5e,gHr),e(u5,hHr),e(u5,Coe),e(Coe,pHr),e(u5,_Hr),e($e,uHr),e($e,b5),e(b5,v5e),e(v5e,bHr),e(b5,vHr),e(b5,woe),e(woe,FHr),e(b5,THr),e($e,MHr),e($e,v5),e(v5,F5e),e(F5e,EHr),e(v5,CHr),e(v5,Aoe),e(Aoe,wHr),e(v5,AHr),e($e,LHr),e($e,F5),e(F5,T5e),e(T5e,yHr),e(F5,xHr),e(F5,Loe),e(Loe,$Hr),e(F5,kHr),e($e,SHr),e($e,T5),e(T5,M5e),e(M5e,RHr),e(T5,PHr),e(T5,yoe),e(yoe,BHr),e(T5,IHr),e($e,NHr),e($e,M5),e(M5,E5e),e(E5e,qHr),e(M5,jHr),e(M5,xoe),e(xoe,DHr),e(M5,GHr),e(Wr,OHr),M(E5,Wr,null),b(f,FWe,u),b(f,df,u),e(df,C5),e(C5,C5e),M(B$,C5e,null),e(df,VHr),e(df,w5e),e(w5e,XHr),b(f,TWe,u),b(f,vr,u),M(I$,vr,null),e(vr,zHr),e(vr,cf),e(cf,WHr),e(cf,$oe),e($oe,QHr),e(cf,HHr),e(cf,koe),e(koe,UHr),e(cf,JHr),e(vr,YHr),e(vr,N$),e(N$,KHr),e(N$,A5e),e(A5e,ZHr),e(N$,eUr),e(vr,oUr),e(vr,Yt),M(q$,Yt,null),e(Yt,rUr),e(Yt,L5e),e(L5e,tUr),e(Yt,aUr),e(Yt,ff),e(ff,nUr),e(ff,y5e),e(y5e,sUr),e(ff,lUr),e(ff,Soe),e(Soe,iUr),e(ff,dUr),e(Yt,cUr),M(w5,Yt,null),e(vr,fUr),e(vr,Qr),M(j$,Qr,null),e(Qr,mUr),e(Qr,x5e),e(x5e,gUr),e(Qr,hUr),e(Qr,wn),e(wn,pUr),e(wn,$5e),e($5e,_Ur),e(wn,uUr),e(wn,k5e),e(k5e,bUr),e(wn,vUr),e(wn,S5e),e(S5e,FUr),e(wn,TUr),e(Qr,MUr),e(Qr,ke),e(ke,A5),e(A5,R5e),e(R5e,EUr),e(A5,CUr),e(A5,Roe),e(Roe,wUr),e(A5,AUr),e(ke,LUr),e(ke,L5),e(L5,P5e),e(P5e,yUr),e(L5,xUr),e(L5,Poe),e(Poe,$Ur),e(L5,kUr),e(ke,SUr),e(ke,y5),e(y5,B5e),e(B5e,RUr),e(y5,PUr),e(y5,Boe),e(Boe,BUr),e(y5,IUr),e(ke,NUr),e(ke,x5),e(x5,I5e),e(I5e,qUr),e(x5,jUr),e(x5,Ioe),e(Ioe,DUr),e(x5,GUr),e(ke,OUr),e(ke,$5),e($5,N5e),e(N5e,VUr),e($5,XUr),e($5,Noe),e(Noe,zUr),e($5,WUr),e(ke,QUr),e(ke,k5),e(k5,q5e),e(q5e,HUr),e(k5,UUr),e(k5,qoe),e(qoe,JUr),e(k5,YUr),e(ke,KUr),e(ke,S5),e(S5,j5e),e(j5e,ZUr),e(S5,eJr),e(S5,joe),e(joe,oJr),e(S5,rJr),e(ke,tJr),e(ke,R5),e(R5,D5e),e(D5e,aJr),e(R5,nJr),e(R5,Doe),e(Doe,sJr),e(R5,lJr),e(ke,iJr),e(ke,P5),e(P5,G5e),e(G5e,dJr),e(P5,cJr),e(P5,Goe),e(Goe,fJr),e(P5,mJr),e(ke,gJr),e(ke,B5),e(B5,O5e),e(O5e,hJr),e(B5,pJr),e(B5,Ooe),e(Ooe,_Jr),e(B5,uJr),e(Qr,bJr),M(I5,Qr,null),b(f,MWe,u),b(f,mf,u),e(mf,N5),e(N5,V5e),M(D$,V5e,null),e(mf,vJr),e(mf,X5e),e(X5e,FJr),b(f,EWe,u),b(f,Fr,u),M(G$,Fr,null),e(Fr,TJr),e(Fr,gf),e(gf,MJr),e(gf,Voe),e(Voe,EJr),e(gf,CJr),e(gf,Xoe),e(Xoe,wJr),e(gf,AJr),e(Fr,LJr),e(Fr,O$),e(O$,yJr),e(O$,z5e),e(z5e,xJr),e(O$,$Jr),e(Fr,kJr),e(Fr,Kt),M(V$,Kt,null),e(Kt,SJr),e(Kt,W5e),e(W5e,RJr),e(Kt,PJr),e(Kt,hf),e(hf,BJr),e(hf,Q5e),e(Q5e,IJr),e(hf,NJr),e(hf,zoe),e(zoe,qJr),e(hf,jJr),e(Kt,DJr),M(q5,Kt,null),e(Fr,GJr),e(Fr,Hr),M(X$,Hr,null),e(Hr,OJr),e(Hr,H5e),e(H5e,VJr),e(Hr,XJr),e(Hr,An),e(An,zJr),e(An,U5e),e(U5e,WJr),e(An,QJr),e(An,J5e),e(J5e,HJr),e(An,UJr),e(An,Y5e),e(Y5e,JJr),e(An,YJr),e(Hr,KJr),e(Hr,Se),e(Se,j5),e(j5,K5e),e(K5e,ZJr),e(j5,eYr),e(j5,Woe),e(Woe,oYr),e(j5,rYr),e(Se,tYr),e(Se,D5),e(D5,Z5e),e(Z5e,aYr),e(D5,nYr),e(D5,Qoe),e(Qoe,sYr),e(D5,lYr),e(Se,iYr),e(Se,G5),e(G5,e0e),e(e0e,dYr),e(G5,cYr),e(G5,Hoe),e(Hoe,fYr),e(G5,mYr),e(Se,gYr),e(Se,O5),e(O5,o0e),e(o0e,hYr),e(O5,pYr),e(O5,Uoe),e(Uoe,_Yr),e(O5,uYr),e(Se,bYr),e(Se,V5),e(V5,r0e),e(r0e,vYr),e(V5,FYr),e(V5,Joe),e(Joe,TYr),e(V5,MYr),e(Se,EYr),e(Se,X5),e(X5,t0e),e(t0e,CYr),e(X5,wYr),e(X5,Yoe),e(Yoe,AYr),e(X5,LYr),e(Se,yYr),e(Se,z5),e(z5,a0e),e(a0e,xYr),e(z5,$Yr),e(z5,Koe),e(Koe,kYr),e(z5,SYr),e(Se,RYr),e(Se,W5),e(W5,n0e),e(n0e,PYr),e(W5,BYr),e(W5,Zoe),e(Zoe,IYr),e(W5,NYr),e(Se,qYr),e(Se,Q5),e(Q5,s0e),e(s0e,jYr),e(Q5,DYr),e(Q5,ere),e(ere,GYr),e(Q5,OYr),e(Se,VYr),e(Se,H5),e(H5,l0e),e(l0e,XYr),e(H5,zYr),e(H5,ore),e(ore,WYr),e(H5,QYr),e(Hr,HYr),M(U5,Hr,null),b(f,CWe,u),b(f,pf,u),e(pf,J5),e(J5,i0e),M(z$,i0e,null),e(pf,UYr),e(pf,d0e),e(d0e,JYr),b(f,wWe,u),b(f,Tr,u),M(W$,Tr,null),e(Tr,YYr),e(Tr,_f),e(_f,KYr),e(_f,rre),e(rre,ZYr),e(_f,eKr),e(_f,tre),e(tre,oKr),e(_f,rKr),e(Tr,tKr),e(Tr,Q$),e(Q$,aKr),e(Q$,c0e),e(c0e,nKr),e(Q$,sKr),e(Tr,lKr),e(Tr,Zt),M(H$,Zt,null),e(Zt,iKr),e(Zt,f0e),e(f0e,dKr),e(Zt,cKr),e(Zt,uf),e(uf,fKr),e(uf,m0e),e(m0e,mKr),e(uf,gKr),e(uf,are),e(are,hKr),e(uf,pKr),e(Zt,_Kr),M(Y5,Zt,null),e(Tr,uKr),e(Tr,Ur),M(U$,Ur,null),e(Ur,bKr),e(Ur,g0e),e(g0e,vKr),e(Ur,FKr),e(Ur,Ln),e(Ln,TKr),e(Ln,h0e),e(h0e,MKr),e(Ln,EKr),e(Ln,p0e),e(p0e,CKr),e(Ln,wKr),e(Ln,_0e),e(_0e,AKr),e(Ln,LKr),e(Ur,yKr),e(Ur,Re),e(Re,K5),e(K5,u0e),e(u0e,xKr),e(K5,$Kr),e(K5,nre),e(nre,kKr),e(K5,SKr),e(Re,RKr),e(Re,Z5),e(Z5,b0e),e(b0e,PKr),e(Z5,BKr),e(Z5,sre),e(sre,IKr),e(Z5,NKr),e(Re,qKr),e(Re,e0),e(e0,v0e),e(v0e,jKr),e(e0,DKr),e(e0,lre),e(lre,GKr),e(e0,OKr),e(Re,VKr),e(Re,o0),e(o0,F0e),e(F0e,XKr),e(o0,zKr),e(o0,ire),e(ire,WKr),e(o0,QKr),e(Re,HKr),e(Re,r0),e(r0,T0e),e(T0e,UKr),e(r0,JKr),e(r0,dre),e(dre,YKr),e(r0,KKr),e(Re,ZKr),e(Re,t0),e(t0,M0e),e(M0e,eZr),e(t0,oZr),e(t0,cre),e(cre,rZr),e(t0,tZr),e(Re,aZr),e(Re,a0),e(a0,E0e),e(E0e,nZr),e(a0,sZr),e(a0,fre),e(fre,lZr),e(a0,iZr),e(Re,dZr),e(Re,n0),e(n0,C0e),e(C0e,cZr),e(n0,fZr),e(n0,mre),e(mre,mZr),e(n0,gZr),e(Re,hZr),e(Re,s0),e(s0,w0e),e(w0e,pZr),e(s0,_Zr),e(s0,gre),e(gre,uZr),e(s0,bZr),e(Re,vZr),e(Re,l0),e(l0,A0e),e(A0e,FZr),e(l0,TZr),e(l0,hre),e(hre,MZr),e(l0,EZr),e(Ur,CZr),M(i0,Ur,null),b(f,AWe,u),b(f,bf,u),e(bf,d0),e(d0,L0e),M(J$,L0e,null),e(bf,wZr),e(bf,y0e),e(y0e,AZr),b(f,LWe,u),b(f,Mr,u),M(Y$,Mr,null),e(Mr,LZr),e(Mr,vf),e(vf,yZr),e(vf,pre),e(pre,xZr),e(vf,$Zr),e(vf,_re),e(_re,kZr),e(vf,SZr),e(Mr,RZr),e(Mr,K$),e(K$,PZr),e(K$,x0e),e(x0e,BZr),e(K$,IZr),e(Mr,NZr),e(Mr,ea),M(Z$,ea,null),e(ea,qZr),e(ea,$0e),e($0e,jZr),e(ea,DZr),e(ea,Ff),e(Ff,GZr),e(Ff,k0e),e(k0e,OZr),e(Ff,VZr),e(Ff,ure),e(ure,XZr),e(Ff,zZr),e(ea,WZr),M(c0,ea,null),e(Mr,QZr),e(Mr,Jr),M(ek,Jr,null),e(Jr,HZr),e(Jr,S0e),e(S0e,UZr),e(Jr,JZr),e(Jr,yn),e(yn,YZr),e(yn,R0e),e(R0e,KZr),e(yn,ZZr),e(yn,P0e),e(P0e,eet),e(yn,oet),e(yn,B0e),e(B0e,ret),e(yn,tet),e(Jr,aet),e(Jr,Ve),e(Ve,f0),e(f0,I0e),e(I0e,net),e(f0,set),e(f0,bre),e(bre,iet),e(f0,det),e(Ve,cet),e(Ve,m0),e(m0,N0e),e(N0e,fet),e(m0,met),e(m0,vre),e(vre,get),e(m0,het),e(Ve,pet),e(Ve,g0),e(g0,q0e),e(q0e,_et),e(g0,uet),e(g0,Fre),e(Fre,bet),e(g0,vet),e(Ve,Fet),e(Ve,h0),e(h0,j0e),e(j0e,Tet),e(h0,Met),e(h0,Tre),e(Tre,Eet),e(h0,Cet),e(Ve,wet),e(Ve,p0),e(p0,D0e),e(D0e,Aet),e(p0,Let),e(p0,Mre),e(Mre,yet),e(p0,xet),e(Ve,$et),e(Ve,_0),e(_0,G0e),e(G0e,ket),e(_0,Set),e(_0,Ere),e(Ere,Ret),e(_0,Pet),e(Ve,Bet),e(Ve,u0),e(u0,O0e),e(O0e,Iet),e(u0,Net),e(u0,Cre),e(Cre,qet),e(u0,jet),e(Ve,Det),e(Ve,b0),e(b0,V0e),e(V0e,Get),e(b0,Oet),e(b0,wre),e(wre,Vet),e(b0,Xet),e(Jr,zet),M(v0,Jr,null),b(f,yWe,u),b(f,Tf,u),e(Tf,F0),e(F0,X0e),M(ok,X0e,null),e(Tf,Wet),e(Tf,z0e),e(z0e,Qet),b(f,xWe,u),b(f,Er,u),M(rk,Er,null),e(Er,Het),e(Er,Mf),e(Mf,Uet),e(Mf,Are),e(Are,Jet),e(Mf,Yet),e(Mf,Lre),e(Lre,Ket),e(Mf,Zet),e(Er,eot),e(Er,tk),e(tk,oot),e(tk,W0e),e(W0e,rot),e(tk,tot),e(Er,aot),e(Er,oa),M(ak,oa,null),e(oa,not),e(oa,Q0e),e(Q0e,sot),e(oa,lot),e(oa,Ef),e(Ef,iot),e(Ef,H0e),e(H0e,dot),e(Ef,cot),e(Ef,yre),e(yre,fot),e(Ef,mot),e(oa,got),M(T0,oa,null),e(Er,hot),e(Er,Yr),M(nk,Yr,null),e(Yr,pot),e(Yr,U0e),e(U0e,_ot),e(Yr,uot),e(Yr,xn),e(xn,bot),e(xn,J0e),e(J0e,vot),e(xn,Fot),e(xn,Y0e),e(Y0e,Tot),e(xn,Mot),e(xn,K0e),e(K0e,Eot),e(xn,Cot),e(Yr,wot),e(Yr,Xe),e(Xe,M0),e(M0,Z0e),e(Z0e,Aot),e(M0,Lot),e(M0,xre),e(xre,yot),e(M0,xot),e(Xe,$ot),e(Xe,E0),e(E0,ewe),e(ewe,kot),e(E0,Sot),e(E0,$re),e($re,Rot),e(E0,Pot),e(Xe,Bot),e(Xe,C0),e(C0,owe),e(owe,Iot),e(C0,Not),e(C0,kre),e(kre,qot),e(C0,jot),e(Xe,Dot),e(Xe,w0),e(w0,rwe),e(rwe,Got),e(w0,Oot),e(w0,Sre),e(Sre,Vot),e(w0,Xot),e(Xe,zot),e(Xe,A0),e(A0,twe),e(twe,Wot),e(A0,Qot),e(A0,Rre),e(Rre,Hot),e(A0,Uot),e(Xe,Jot),e(Xe,L0),e(L0,awe),e(awe,Yot),e(L0,Kot),e(L0,Pre),e(Pre,Zot),e(L0,ert),e(Xe,ort),e(Xe,y0),e(y0,nwe),e(nwe,rrt),e(y0,trt),e(y0,Bre),e(Bre,art),e(y0,nrt),e(Xe,srt),e(Xe,x0),e(x0,swe),e(swe,lrt),e(x0,irt),e(x0,Ire),e(Ire,drt),e(x0,crt),e(Yr,frt),M($0,Yr,null),b(f,$We,u),b(f,Cf,u),e(Cf,k0),e(k0,lwe),M(sk,lwe,null),e(Cf,mrt),e(Cf,iwe),e(iwe,grt),b(f,kWe,u),b(f,Cr,u),M(lk,Cr,null),e(Cr,hrt),e(Cr,wf),e(wf,prt),e(wf,Nre),e(Nre,_rt),e(wf,urt),e(wf,qre),e(qre,brt),e(wf,vrt),e(Cr,Frt),e(Cr,ik),e(ik,Trt),e(ik,dwe),e(dwe,Mrt),e(ik,Ert),e(Cr,Crt),e(Cr,ra),M(dk,ra,null),e(ra,wrt),e(ra,cwe),e(cwe,Art),e(ra,Lrt),e(ra,Af),e(Af,yrt),e(Af,fwe),e(fwe,xrt),e(Af,$rt),e(Af,jre),e(jre,krt),e(Af,Srt),e(ra,Rrt),M(S0,ra,null),e(Cr,Prt),e(Cr,Kr),M(ck,Kr,null),e(Kr,Brt),e(Kr,mwe),e(mwe,Irt),e(Kr,Nrt),e(Kr,$n),e($n,qrt),e($n,gwe),e(gwe,jrt),e($n,Drt),e($n,hwe),e(hwe,Grt),e($n,Ort),e($n,pwe),e(pwe,Vrt),e($n,Xrt),e(Kr,zrt),e(Kr,_we),e(_we,R0),e(R0,uwe),e(uwe,Wrt),e(R0,Qrt),e(R0,Dre),e(Dre,Hrt),e(R0,Urt),e(Kr,Jrt),M(P0,Kr,null),b(f,SWe,u),b(f,Lf,u),e(Lf,B0),e(B0,bwe),M(fk,bwe,null),e(Lf,Yrt),e(Lf,vwe),e(vwe,Krt),b(f,RWe,u),b(f,wr,u),M(mk,wr,null),e(wr,Zrt),e(wr,yf),e(yf,ett),e(yf,Gre),e(Gre,ott),e(yf,rtt),e(yf,Ore),e(Ore,ttt),e(yf,att),e(wr,ntt),e(wr,gk),e(gk,stt),e(gk,Fwe),e(Fwe,ltt),e(gk,itt),e(wr,dtt),e(wr,ta),M(hk,ta,null),e(ta,ctt),e(ta,Twe),e(Twe,ftt),e(ta,mtt),e(ta,xf),e(xf,gtt),e(xf,Mwe),e(Mwe,htt),e(xf,ptt),e(xf,Vre),e(Vre,_tt),e(xf,utt),e(ta,btt),M(I0,ta,null),e(wr,vtt),e(wr,Zr),M(pk,Zr,null),e(Zr,Ftt),e(Zr,Ewe),e(Ewe,Ttt),e(Zr,Mtt),e(Zr,kn),e(kn,Ett),e(kn,Cwe),e(Cwe,Ctt),e(kn,wtt),e(kn,wwe),e(wwe,Att),e(kn,Ltt),e(kn,Awe),e(Awe,ytt),e(kn,xtt),e(Zr,$tt),e(Zr,_k),e(_k,N0),e(N0,Lwe),e(Lwe,ktt),e(N0,Stt),e(N0,Xre),e(Xre,Rtt),e(N0,Ptt),e(_k,Btt),e(_k,q0),e(q0,ywe),e(ywe,Itt),e(q0,Ntt),e(q0,zre),e(zre,qtt),e(q0,jtt),e(Zr,Dtt),M(j0,Zr,null),b(f,PWe,u),b(f,$f,u),e($f,D0),e(D0,xwe),M(uk,xwe,null),e($f,Gtt),e($f,$we),e($we,Ott),b(f,BWe,u),b(f,Ar,u),M(bk,Ar,null),e(Ar,Vtt),e(Ar,kf),e(kf,Xtt),e(kf,Wre),e(Wre,ztt),e(kf,Wtt),e(kf,Qre),e(Qre,Qtt),e(kf,Htt),e(Ar,Utt),e(Ar,vk),e(vk,Jtt),e(vk,kwe),e(kwe,Ytt),e(vk,Ktt),e(Ar,Ztt),e(Ar,aa),M(Fk,aa,null),e(aa,eat),e(aa,Swe),e(Swe,oat),e(aa,rat),e(aa,Sf),e(Sf,tat),e(Sf,Rwe),e(Rwe,aat),e(Sf,nat),e(Sf,Hre),e(Hre,sat),e(Sf,lat),e(aa,iat),M(G0,aa,null),e(Ar,dat),e(Ar,et),M(Tk,et,null),e(et,cat),e(et,Pwe),e(Pwe,fat),e(et,mat),e(et,Sn),e(Sn,gat),e(Sn,Bwe),e(Bwe,hat),e(Sn,pat),e(Sn,Iwe),e(Iwe,_at),e(Sn,uat),e(Sn,Nwe),e(Nwe,bat),e(Sn,vat),e(et,Fat),e(et,qwe),e(qwe,O0),e(O0,jwe),e(jwe,Tat),e(O0,Mat),e(O0,Ure),e(Ure,Eat),e(O0,Cat),e(et,wat),M(V0,et,null),IWe=!0},p(f,[u]){const Mk={};u&2&&(Mk.$$scope={dirty:u,ctx:f}),Gf.$set(Mk);const Dwe={};u&2&&(Dwe.$$scope={dirty:u,ctx:f}),eh.$set(Dwe);const Gwe={};u&2&&(Gwe.$$scope={dirty:u,ctx:f}),Ih.$set(Gwe);const Owe={};u&2&&(Owe.$$scope={dirty:u,ctx:f}),Fp.$set(Owe);const Ek={};u&2&&(Ek.$$scope={dirty:u,ctx:f}),Tp.$set(Ek);const Vwe={};u&2&&(Vwe.$$scope={dirty:u,ctx:f}),Vp.$set(Vwe);const Rn={};u&2&&(Rn.$$scope={dirty:u,ctx:f}),Xp.$set(Rn);const Xwe={};u&2&&(Xwe.$$scope={dirty:u,ctx:f}),Qp.$set(Xwe);const zwe={};u&2&&(zwe.$$scope={dirty:u,ctx:f}),Zu.$set(zwe);const Wwe={};u&2&&(Wwe.$$scope={dirty:u,ctx:f}),o1.$set(Wwe);const Ck={};u&2&&(Ck.$$scope={dirty:u,ctx:f}),H1.$set(Ck);const Qwe={};u&2&&(Qwe.$$scope={dirty:u,ctx:f}),J1.$set(Qwe);const wk={};u&2&&(wk.$$scope={dirty:u,ctx:f}),q2.$set(wk);const Hwe={};u&2&&(Hwe.$$scope={dirty:u,ctx:f}),D2.$set(Hwe);const Ak={};u&2&&(Ak.$$scope={dirty:u,ctx:f}),Ab.$set(Ak);const Uwe={};u&2&&(Uwe.$$scope={dirty:u,ctx:f}),yb.$set(Uwe);const Jwe={};u&2&&(Jwe.$$scope={dirty:u,ctx:f}),Ub.$set(Jwe);const Ywe={};u&2&&(Ywe.$$scope={dirty:u,ctx:f}),Yb.$set(Ywe);const Rf={};u&2&&(Rf.$$scope={dirty:u,ctx:f}),U3.$set(Rf);const Kwe={};u&2&&(Kwe.$$scope={dirty:u,ctx:f}),Y3.$set(Kwe);const Zwe={};u&2&&(Zwe.$$scope={dirty:u,ctx:f}),xv.$set(Zwe);const eAe={};u&2&&(eAe.$$scope={dirty:u,ctx:f}),kv.$set(eAe);const Lk={};u&2&&(Lk.$$scope={dirty:u,ctx:f}),jv.$set(Lk);const oAe={};u&2&&(oAe.$$scope={dirty:u,ctx:f}),Gv.$set(oAe);const rAe={};u&2&&(rAe.$$scope={dirty:u,ctx:f}),wF.$set(rAe);const tAe={};u&2&&(tAe.$$scope={dirty:u,ctx:f}),LF.$set(tAe);const nt={};u&2&&(nt.$$scope={dirty:u,ctx:f}),uT.$set(nt);const yk={};u&2&&(yk.$$scope={dirty:u,ctx:f}),vT.$set(yk);const aAe={};u&2&&(aAe.$$scope={dirty:u,ctx:f}),MT.$set(aAe);const xk={};u&2&&(xk.$$scope={dirty:u,ctx:f}),CT.$set(xk);const nAe={};u&2&&(nAe.$$scope={dirty:u,ctx:f}),jT.$set(nAe);const st={};u&2&&(st.$$scope={dirty:u,ctx:f}),GT.$set(st);const sAe={};u&2&&(sAe.$$scope={dirty:u,ctx:f}),XT.$set(sAe);const Pf={};u&2&&(Pf.$$scope={dirty:u,ctx:f}),WT.$set(Pf);const lAe={};u&2&&(lAe.$$scope={dirty:u,ctx:f}),UT.$set(lAe);const iAe={};u&2&&(iAe.$$scope={dirty:u,ctx:f}),YT.$set(iAe);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),i7.$set(L);const X0={};u&2&&(X0.$$scope={dirty:u,ctx:f}),c7.$set(X0);const dAe={};u&2&&(dAe.$$scope={dirty:u,ctx:f}),u7.$set(dAe);const cAe={};u&2&&(cAe.$$scope={dirty:u,ctx:f}),v7.$set(cAe);const z0={};u&2&&(z0.$$scope={dirty:u,ctx:f}),k7.$set(z0);const fAe={};u&2&&(fAe.$$scope={dirty:u,ctx:f}),R7.$set(fAe);const mAe={};u&2&&(mAe.$$scope={dirty:u,ctx:f}),N7.$set(mAe);const W0={};u&2&&(W0.$$scope={dirty:u,ctx:f}),j7.$set(W0);const gAe={};u&2&&(gAe.$$scope={dirty:u,ctx:f}),W7.$set(gAe);const hAe={};u&2&&(hAe.$$scope={dirty:u,ctx:f}),H7.$set(hAe);const Q0={};u&2&&(Q0.$$scope={dirty:u,ctx:f}),Z7.$set(Q0);const pAe={};u&2&&(pAe.$$scope={dirty:u,ctx:f}),o8.$set(pAe);const _Ae={};u&2&&(_Ae.$$scope={dirty:u,ctx:f}),n8.$set(_Ae);const H0={};u&2&&(H0.$$scope={dirty:u,ctx:f}),l8.$set(H0);const uAe={};u&2&&(uAe.$$scope={dirty:u,ctx:f}),c8.$set(uAe);const bAe={};u&2&&(bAe.$$scope={dirty:u,ctx:f}),m8.$set(bAe);const U0={};u&2&&(U0.$$scope={dirty:u,ctx:f}),v8.$set(U0);const vAe={};u&2&&(vAe.$$scope={dirty:u,ctx:f}),T8.$set(vAe);const FAe={};u&2&&(FAe.$$scope={dirty:u,ctx:f}),C8.$set(FAe);const J0={};u&2&&(J0.$$scope={dirty:u,ctx:f}),A8.$set(J0);const TAe={};u&2&&(TAe.$$scope={dirty:u,ctx:f}),M9.$set(TAe);const MAe={};u&2&&(MAe.$$scope={dirty:u,ctx:f}),C9.$set(MAe);const Y0={};u&2&&(Y0.$$scope={dirty:u,ctx:f}),H9.$set(Y0);const EAe={};u&2&&(EAe.$$scope={dirty:u,ctx:f}),J9.$set(EAe);const CAe={};u&2&&(CAe.$$scope={dirty:u,ctx:f}),cM.$set(CAe);const K0={};u&2&&(K0.$$scope={dirty:u,ctx:f}),mM.$set(K0);const wAe={};u&2&&(wAe.$$scope={dirty:u,ctx:f}),vM.$set(wAe);const AAe={};u&2&&(AAe.$$scope={dirty:u,ctx:f}),TM.$set(AAe);const Z0={};u&2&&(Z0.$$scope={dirty:u,ctx:f}),OM.$set(Z0);const LAe={};u&2&&(LAe.$$scope={dirty:u,ctx:f}),XM.$set(LAe);const yAe={};u&2&&(yAe.$$scope={dirty:u,ctx:f}),o4.$set(yAe);const ew={};u&2&&(ew.$$scope={dirty:u,ctx:f}),t4.$set(ew);const xAe={};u&2&&(xAe.$$scope={dirty:u,ctx:f}),$4.$set(xAe);const $Ae={};u&2&&($Ae.$$scope={dirty:u,ctx:f}),S4.$set($Ae);const ow={};u&2&&(ow.$$scope={dirty:u,ctx:f}),J4.$set(ow);const kAe={};u&2&&(kAe.$$scope={dirty:u,ctx:f}),K4.$set(kAe);const SAe={};u&2&&(SAe.$$scope={dirty:u,ctx:f}),oE.$set(SAe);const rw={};u&2&&(rw.$$scope={dirty:u,ctx:f}),tE.$set(rw);const RAe={};u&2&&(RAe.$$scope={dirty:u,ctx:f}),nE.$set(RAe);const PAe={};u&2&&(PAe.$$scope={dirty:u,ctx:f}),lE.$set(PAe);const tw={};u&2&&(tw.$$scope={dirty:u,ctx:f}),yE.$set(tw);const BAe={};u&2&&(BAe.$$scope={dirty:u,ctx:f}),$E.$set(BAe);const IAe={};u&2&&(IAe.$$scope={dirty:u,ctx:f}),YE.$set(IAe);const aw={};u&2&&(aw.$$scope={dirty:u,ctx:f}),ZE.$set(aw);const NAe={};u&2&&(NAe.$$scope={dirty:u,ctx:f}),oC.$set(NAe);const qAe={};u&2&&(qAe.$$scope={dirty:u,ctx:f}),tC.$set(qAe);const nw={};u&2&&(nw.$$scope={dirty:u,ctx:f}),nC.$set(nw);const jAe={};u&2&&(jAe.$$scope={dirty:u,ctx:f}),lC.$set(jAe);const DAe={};u&2&&(DAe.$$scope={dirty:u,ctx:f}),BC.$set(DAe);const sw={};u&2&&(sw.$$scope={dirty:u,ctx:f}),NC.$set(sw);const GAe={};u&2&&(GAe.$$scope={dirty:u,ctx:f}),HC.$set(GAe);const OAe={};u&2&&(OAe.$$scope={dirty:u,ctx:f}),JC.$set(OAe);const lw={};u&2&&(lw.$$scope={dirty:u,ctx:f}),c5.$set(lw);const VAe={};u&2&&(VAe.$$scope={dirty:u,ctx:f}),m5.$set(VAe);const XAe={};u&2&&(XAe.$$scope={dirty:u,ctx:f}),E5.$set(XAe);const iw={};u&2&&(iw.$$scope={dirty:u,ctx:f}),w5.$set(iw);const zAe={};u&2&&(zAe.$$scope={dirty:u,ctx:f}),I5.$set(zAe);const WAe={};u&2&&(WAe.$$scope={dirty:u,ctx:f}),q5.$set(WAe);const dw={};u&2&&(dw.$$scope={dirty:u,ctx:f}),U5.$set(dw);const QAe={};u&2&&(QAe.$$scope={dirty:u,ctx:f}),Y5.$set(QAe);const HAe={};u&2&&(HAe.$$scope={dirty:u,ctx:f}),i0.$set(HAe);const cw={};u&2&&(cw.$$scope={dirty:u,ctx:f}),c0.$set(cw);const UAe={};u&2&&(UAe.$$scope={dirty:u,ctx:f}),v0.$set(UAe);const JAe={};u&2&&(JAe.$$scope={dirty:u,ctx:f}),T0.$set(JAe);const fw={};u&2&&(fw.$$scope={dirty:u,ctx:f}),$0.$set(fw);const YAe={};u&2&&(YAe.$$scope={dirty:u,ctx:f}),S0.$set(YAe);const KAe={};u&2&&(KAe.$$scope={dirty:u,ctx:f}),P0.$set(KAe);const mw={};u&2&&(mw.$$scope={dirty:u,ctx:f}),I0.$set(mw);const ZAe={};u&2&&(ZAe.$$scope={dirty:u,ctx:f}),j0.$set(ZAe);const e6e={};u&2&&(e6e.$$scope={dirty:u,ctx:f}),G0.$set(e6e);const gw={};u&2&&(gw.$$scope={dirty:u,ctx:f}),V0.$set(gw)},i(f){IWe||(E(d.$$.fragment,f),E(Sa.$$.fragment,f),E(m6.$$.fragment,f),E(g6.$$.fragment,f),E(Gf.$$.fragment,f),E(h6.$$.fragment,f),E(p6.$$.fragment,f),E(b6.$$.fragment,f),E(eh.$$.fragment,f),E(v6.$$.fragment,f),E(F6.$$.fragment,f),E(T6.$$.fragment,f),E(C6.$$.fragment,f),E(Ih.$$.fragment,f),E(w6.$$.fragment,f),E(A6.$$.fragment,f),E(L6.$$.fragment,f),E($6.$$.fragment,f),E(Fp.$$.fragment,f),E(Tp.$$.fragment,f),E(k6.$$.fragment,f),E(S6.$$.fragment,f),E(R6.$$.fragment,f),E(I6.$$.fragment,f),E(Vp.$$.fragment,f),E(Xp.$$.fragment,f),E(N6.$$.fragment,f),E(q6.$$.fragment,f),E(j6.$$.fragment,f),E(G6.$$.fragment,f),E(Qp.$$.fragment,f),E(O6.$$.fragment,f),E(Zu.$$.fragment,f),E(V6.$$.fragment,f),E(X6.$$.fragment,f),E(W6.$$.fragment,f),E(o1.$$.fragment,f),E(Q6.$$.fragment,f),E(H1.$$.fragment,f),E(H6.$$.fragment,f),E(U6.$$.fragment,f),E(Y6.$$.fragment,f),E(J1.$$.fragment,f),E(K6.$$.fragment,f),E(q2.$$.fragment,f),E(Z6.$$.fragment,f),E(eL.$$.fragment,f),E(rL.$$.fragment,f),E(D2.$$.fragment,f),E(tL.$$.fragment,f),E(Ab.$$.fragment,f),E(aL.$$.fragment,f),E(nL.$$.fragment,f),E(lL.$$.fragment,f),E(yb.$$.fragment,f),E(iL.$$.fragment,f),E(Ub.$$.fragment,f),E(dL.$$.fragment,f),E(cL.$$.fragment,f),E(mL.$$.fragment,f),E(Yb.$$.fragment,f),E(gL.$$.fragment,f),E(U3.$$.fragment,f),E(hL.$$.fragment,f),E(pL.$$.fragment,f),E(uL.$$.fragment,f),E(Y3.$$.fragment,f),E(bL.$$.fragment,f),E(xv.$$.fragment,f),E(vL.$$.fragment,f),E(FL.$$.fragment,f),E(ML.$$.fragment,f),E(kv.$$.fragment,f),E(EL.$$.fragment,f),E(jv.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(LL.$$.fragment,f),E(Gv.$$.fragment,f),E(yL.$$.fragment,f),E(wF.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(SL.$$.fragment,f),E(LF.$$.fragment,f),E(RL.$$.fragment,f),E(uT.$$.fragment,f),E(PL.$$.fragment,f),E(BL.$$.fragment,f),E(NL.$$.fragment,f),E(vT.$$.fragment,f),E(qL.$$.fragment,f),E(MT.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(OL.$$.fragment,f),E(CT.$$.fragment,f),E(VL.$$.fragment,f),E(jT.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(QL.$$.fragment,f),E(GT.$$.fragment,f),E(HL.$$.fragment,f),E(XT.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(WT.$$.fragment,f),E(ZL.$$.fragment,f),E(UT.$$.fragment,f),E(ey.$$.fragment,f),E(oy.$$.fragment,f),E(ty.$$.fragment,f),E(YT.$$.fragment,f),E(ay.$$.fragment,f),E(i7.$$.fragment,f),E(ny.$$.fragment,f),E(sy.$$.fragment,f),E(iy.$$.fragment,f),E(c7.$$.fragment,f),E(dy.$$.fragment,f),E(u7.$$.fragment,f),E(cy.$$.fragment,f),E(fy.$$.fragment,f),E(gy.$$.fragment,f),E(v7.$$.fragment,f),E(hy.$$.fragment,f),E(k7.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(by.$$.fragment,f),E(R7.$$.fragment,f),E(vy.$$.fragment,f),E(N7.$$.fragment,f),E(Ty.$$.fragment,f),E(My.$$.fragment,f),E(Cy.$$.fragment,f),E(j7.$$.fragment,f),E(wy.$$.fragment,f),E(W7.$$.fragment,f),E(Ay.$$.fragment,f),E(Ly.$$.fragment,f),E(xy.$$.fragment,f),E(H7.$$.fragment,f),E($y.$$.fragment,f),E(Z7.$$.fragment,f),E(ky.$$.fragment,f),E(Sy.$$.fragment,f),E(Py.$$.fragment,f),E(o8.$$.fragment,f),E(By.$$.fragment,f),E(n8.$$.fragment,f),E(Ny.$$.fragment,f),E(qy.$$.fragment,f),E(Dy.$$.fragment,f),E(l8.$$.fragment,f),E(Gy.$$.fragment,f),E(c8.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(zy.$$.fragment,f),E(m8.$$.fragment,f),E(Wy.$$.fragment,f),E(v8.$$.fragment,f),E(Qy.$$.fragment,f),E(Hy.$$.fragment,f),E(Jy.$$.fragment,f),E(T8.$$.fragment,f),E(Yy.$$.fragment,f),E(C8.$$.fragment,f),E(Ky.$$.fragment,f),E(Zy.$$.fragment,f),E(ox.$$.fragment,f),E(A8.$$.fragment,f),E(rx.$$.fragment,f),E(M9.$$.fragment,f),E(tx.$$.fragment,f),E(ax.$$.fragment,f),E(sx.$$.fragment,f),E(C9.$$.fragment,f),E(lx.$$.fragment,f),E(H9.$$.fragment,f),E(ix.$$.fragment,f),E(dx.$$.fragment,f),E(fx.$$.fragment,f),E(J9.$$.fragment,f),E(mx.$$.fragment,f),E(cM.$$.fragment,f),E(gx.$$.fragment,f),E(hx.$$.fragment,f),E(_x.$$.fragment,f),E(mM.$$.fragment,f),E(ux.$$.fragment,f),E(vM.$$.fragment,f),E(bx.$$.fragment,f),E(vx.$$.fragment,f),E(Tx.$$.fragment,f),E(TM.$$.fragment,f),E(Mx.$$.fragment,f),E(OM.$$.fragment,f),E(Ex.$$.fragment,f),E(Cx.$$.fragment,f),E(Ax.$$.fragment,f),E(XM.$$.fragment,f),E(Lx.$$.fragment,f),E(o4.$$.fragment,f),E(yx.$$.fragment,f),E(xx.$$.fragment,f),E(kx.$$.fragment,f),E(t4.$$.fragment,f),E(Sx.$$.fragment,f),E($4.$$.fragment,f),E(Rx.$$.fragment,f),E(Px.$$.fragment,f),E(Ix.$$.fragment,f),E(S4.$$.fragment,f),E(Nx.$$.fragment,f),E(J4.$$.fragment,f),E(qx.$$.fragment,f),E(jx.$$.fragment,f),E(Gx.$$.fragment,f),E(K4.$$.fragment,f),E(Ox.$$.fragment,f),E(oE.$$.fragment,f),E(Xx.$$.fragment,f),E(zx.$$.fragment,f),E(Qx.$$.fragment,f),E(tE.$$.fragment,f),E(Hx.$$.fragment,f),E(nE.$$.fragment,f),E(Ux.$$.fragment,f),E(Jx.$$.fragment,f),E(Kx.$$.fragment,f),E(lE.$$.fragment,f),E(Zx.$$.fragment,f),E(yE.$$.fragment,f),E(e$.$$.fragment,f),E(o$.$$.fragment,f),E(t$.$$.fragment,f),E($E.$$.fragment,f),E(a$.$$.fragment,f),E(YE.$$.fragment,f),E(n$.$$.fragment,f),E(s$.$$.fragment,f),E(i$.$$.fragment,f),E(ZE.$$.fragment,f),E(d$.$$.fragment,f),E(oC.$$.fragment,f),E(c$.$$.fragment,f),E(f$.$$.fragment,f),E(g$.$$.fragment,f),E(tC.$$.fragment,f),E(h$.$$.fragment,f),E(nC.$$.fragment,f),E(p$.$$.fragment,f),E(_$.$$.fragment,f),E(b$.$$.fragment,f),E(lC.$$.fragment,f),E(v$.$$.fragment,f),E(BC.$$.fragment,f),E(F$.$$.fragment,f),E(T$.$$.fragment,f),E(E$.$$.fragment,f),E(NC.$$.fragment,f),E(C$.$$.fragment,f),E(HC.$$.fragment,f),E(w$.$$.fragment,f),E(A$.$$.fragment,f),E(y$.$$.fragment,f),E(JC.$$.fragment,f),E(x$.$$.fragment,f),E(c5.$$.fragment,f),E($$.$$.fragment,f),E(k$.$$.fragment,f),E(R$.$$.fragment,f),E(m5.$$.fragment,f),E(P$.$$.fragment,f),E(E5.$$.fragment,f),E(B$.$$.fragment,f),E(I$.$$.fragment,f),E(q$.$$.fragment,f),E(w5.$$.fragment,f),E(j$.$$.fragment,f),E(I5.$$.fragment,f),E(D$.$$.fragment,f),E(G$.$$.fragment,f),E(V$.$$.fragment,f),E(q5.$$.fragment,f),E(X$.$$.fragment,f),E(U5.$$.fragment,f),E(z$.$$.fragment,f),E(W$.$$.fragment,f),E(H$.$$.fragment,f),E(Y5.$$.fragment,f),E(U$.$$.fragment,f),E(i0.$$.fragment,f),E(J$.$$.fragment,f),E(Y$.$$.fragment,f),E(Z$.$$.fragment,f),E(c0.$$.fragment,f),E(ek.$$.fragment,f),E(v0.$$.fragment,f),E(ok.$$.fragment,f),E(rk.$$.fragment,f),E(ak.$$.fragment,f),E(T0.$$.fragment,f),E(nk.$$.fragment,f),E($0.$$.fragment,f),E(sk.$$.fragment,f),E(lk.$$.fragment,f),E(dk.$$.fragment,f),E(S0.$$.fragment,f),E(ck.$$.fragment,f),E(P0.$$.fragment,f),E(fk.$$.fragment,f),E(mk.$$.fragment,f),E(hk.$$.fragment,f),E(I0.$$.fragment,f),E(pk.$$.fragment,f),E(j0.$$.fragment,f),E(uk.$$.fragment,f),E(bk.$$.fragment,f),E(Fk.$$.fragment,f),E(G0.$$.fragment,f),E(Tk.$$.fragment,f),E(V0.$$.fragment,f),IWe=!0)},o(f){C(d.$$.fragment,f),C(Sa.$$.fragment,f),C(m6.$$.fragment,f),C(g6.$$.fragment,f),C(Gf.$$.fragment,f),C(h6.$$.fragment,f),C(p6.$$.fragment,f),C(b6.$$.fragment,f),C(eh.$$.fragment,f),C(v6.$$.fragment,f),C(F6.$$.fragment,f),C(T6.$$.fragment,f),C(C6.$$.fragment,f),C(Ih.$$.fragment,f),C(w6.$$.fragment,f),C(A6.$$.fragment,f),C(L6.$$.fragment,f),C($6.$$.fragment,f),C(Fp.$$.fragment,f),C(Tp.$$.fragment,f),C(k6.$$.fragment,f),C(S6.$$.fragment,f),C(R6.$$.fragment,f),C(I6.$$.fragment,f),C(Vp.$$.fragment,f),C(Xp.$$.fragment,f),C(N6.$$.fragment,f),C(q6.$$.fragment,f),C(j6.$$.fragment,f),C(G6.$$.fragment,f),C(Qp.$$.fragment,f),C(O6.$$.fragment,f),C(Zu.$$.fragment,f),C(V6.$$.fragment,f),C(X6.$$.fragment,f),C(W6.$$.fragment,f),C(o1.$$.fragment,f),C(Q6.$$.fragment,f),C(H1.$$.fragment,f),C(H6.$$.fragment,f),C(U6.$$.fragment,f),C(Y6.$$.fragment,f),C(J1.$$.fragment,f),C(K6.$$.fragment,f),C(q2.$$.fragment,f),C(Z6.$$.fragment,f),C(eL.$$.fragment,f),C(rL.$$.fragment,f),C(D2.$$.fragment,f),C(tL.$$.fragment,f),C(Ab.$$.fragment,f),C(aL.$$.fragment,f),C(nL.$$.fragment,f),C(lL.$$.fragment,f),C(yb.$$.fragment,f),C(iL.$$.fragment,f),C(Ub.$$.fragment,f),C(dL.$$.fragment,f),C(cL.$$.fragment,f),C(mL.$$.fragment,f),C(Yb.$$.fragment,f),C(gL.$$.fragment,f),C(U3.$$.fragment,f),C(hL.$$.fragment,f),C(pL.$$.fragment,f),C(uL.$$.fragment,f),C(Y3.$$.fragment,f),C(bL.$$.fragment,f),C(xv.$$.fragment,f),C(vL.$$.fragment,f),C(FL.$$.fragment,f),C(ML.$$.fragment,f),C(kv.$$.fragment,f),C(EL.$$.fragment,f),C(jv.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(LL.$$.fragment,f),C(Gv.$$.fragment,f),C(yL.$$.fragment,f),C(wF.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(SL.$$.fragment,f),C(LF.$$.fragment,f),C(RL.$$.fragment,f),C(uT.$$.fragment,f),C(PL.$$.fragment,f),C(BL.$$.fragment,f),C(NL.$$.fragment,f),C(vT.$$.fragment,f),C(qL.$$.fragment,f),C(MT.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(OL.$$.fragment,f),C(CT.$$.fragment,f),C(VL.$$.fragment,f),C(jT.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(QL.$$.fragment,f),C(GT.$$.fragment,f),C(HL.$$.fragment,f),C(XT.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(WT.$$.fragment,f),C(ZL.$$.fragment,f),C(UT.$$.fragment,f),C(ey.$$.fragment,f),C(oy.$$.fragment,f),C(ty.$$.fragment,f),C(YT.$$.fragment,f),C(ay.$$.fragment,f),C(i7.$$.fragment,f),C(ny.$$.fragment,f),C(sy.$$.fragment,f),C(iy.$$.fragment,f),C(c7.$$.fragment,f),C(dy.$$.fragment,f),C(u7.$$.fragment,f),C(cy.$$.fragment,f),C(fy.$$.fragment,f),C(gy.$$.fragment,f),C(v7.$$.fragment,f),C(hy.$$.fragment,f),C(k7.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(by.$$.fragment,f),C(R7.$$.fragment,f),C(vy.$$.fragment,f),C(N7.$$.fragment,f),C(Ty.$$.fragment,f),C(My.$$.fragment,f),C(Cy.$$.fragment,f),C(j7.$$.fragment,f),C(wy.$$.fragment,f),C(W7.$$.fragment,f),C(Ay.$$.fragment,f),C(Ly.$$.fragment,f),C(xy.$$.fragment,f),C(H7.$$.fragment,f),C($y.$$.fragment,f),C(Z7.$$.fragment,f),C(ky.$$.fragment,f),C(Sy.$$.fragment,f),C(Py.$$.fragment,f),C(o8.$$.fragment,f),C(By.$$.fragment,f),C(n8.$$.fragment,f),C(Ny.$$.fragment,f),C(qy.$$.fragment,f),C(Dy.$$.fragment,f),C(l8.$$.fragment,f),C(Gy.$$.fragment,f),C(c8.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(zy.$$.fragment,f),C(m8.$$.fragment,f),C(Wy.$$.fragment,f),C(v8.$$.fragment,f),C(Qy.$$.fragment,f),C(Hy.$$.fragment,f),C(Jy.$$.fragment,f),C(T8.$$.fragment,f),C(Yy.$$.fragment,f),C(C8.$$.fragment,f),C(Ky.$$.fragment,f),C(Zy.$$.fragment,f),C(ox.$$.fragment,f),C(A8.$$.fragment,f),C(rx.$$.fragment,f),C(M9.$$.fragment,f),C(tx.$$.fragment,f),C(ax.$$.fragment,f),C(sx.$$.fragment,f),C(C9.$$.fragment,f),C(lx.$$.fragment,f),C(H9.$$.fragment,f),C(ix.$$.fragment,f),C(dx.$$.fragment,f),C(fx.$$.fragment,f),C(J9.$$.fragment,f),C(mx.$$.fragment,f),C(cM.$$.fragment,f),C(gx.$$.fragment,f),C(hx.$$.fragment,f),C(_x.$$.fragment,f),C(mM.$$.fragment,f),C(ux.$$.fragment,f),C(vM.$$.fragment,f),C(bx.$$.fragment,f),C(vx.$$.fragment,f),C(Tx.$$.fragment,f),C(TM.$$.fragment,f),C(Mx.$$.fragment,f),C(OM.$$.fragment,f),C(Ex.$$.fragment,f),C(Cx.$$.fragment,f),C(Ax.$$.fragment,f),C(XM.$$.fragment,f),C(Lx.$$.fragment,f),C(o4.$$.fragment,f),C(yx.$$.fragment,f),C(xx.$$.fragment,f),C(kx.$$.fragment,f),C(t4.$$.fragment,f),C(Sx.$$.fragment,f),C($4.$$.fragment,f),C(Rx.$$.fragment,f),C(Px.$$.fragment,f),C(Ix.$$.fragment,f),C(S4.$$.fragment,f),C(Nx.$$.fragment,f),C(J4.$$.fragment,f),C(qx.$$.fragment,f),C(jx.$$.fragment,f),C(Gx.$$.fragment,f),C(K4.$$.fragment,f),C(Ox.$$.fragment,f),C(oE.$$.fragment,f),C(Xx.$$.fragment,f),C(zx.$$.fragment,f),C(Qx.$$.fragment,f),C(tE.$$.fragment,f),C(Hx.$$.fragment,f),C(nE.$$.fragment,f),C(Ux.$$.fragment,f),C(Jx.$$.fragment,f),C(Kx.$$.fragment,f),C(lE.$$.fragment,f),C(Zx.$$.fragment,f),C(yE.$$.fragment,f),C(e$.$$.fragment,f),C(o$.$$.fragment,f),C(t$.$$.fragment,f),C($E.$$.fragment,f),C(a$.$$.fragment,f),C(YE.$$.fragment,f),C(n$.$$.fragment,f),C(s$.$$.fragment,f),C(i$.$$.fragment,f),C(ZE.$$.fragment,f),C(d$.$$.fragment,f),C(oC.$$.fragment,f),C(c$.$$.fragment,f),C(f$.$$.fragment,f),C(g$.$$.fragment,f),C(tC.$$.fragment,f),C(h$.$$.fragment,f),C(nC.$$.fragment,f),C(p$.$$.fragment,f),C(_$.$$.fragment,f),C(b$.$$.fragment,f),C(lC.$$.fragment,f),C(v$.$$.fragment,f),C(BC.$$.fragment,f),C(F$.$$.fragment,f),C(T$.$$.fragment,f),C(E$.$$.fragment,f),C(NC.$$.fragment,f),C(C$.$$.fragment,f),C(HC.$$.fragment,f),C(w$.$$.fragment,f),C(A$.$$.fragment,f),C(y$.$$.fragment,f),C(JC.$$.fragment,f),C(x$.$$.fragment,f),C(c5.$$.fragment,f),C($$.$$.fragment,f),C(k$.$$.fragment,f),C(R$.$$.fragment,f),C(m5.$$.fragment,f),C(P$.$$.fragment,f),C(E5.$$.fragment,f),C(B$.$$.fragment,f),C(I$.$$.fragment,f),C(q$.$$.fragment,f),C(w5.$$.fragment,f),C(j$.$$.fragment,f),C(I5.$$.fragment,f),C(D$.$$.fragment,f),C(G$.$$.fragment,f),C(V$.$$.fragment,f),C(q5.$$.fragment,f),C(X$.$$.fragment,f),C(U5.$$.fragment,f),C(z$.$$.fragment,f),C(W$.$$.fragment,f),C(H$.$$.fragment,f),C(Y5.$$.fragment,f),C(U$.$$.fragment,f),C(i0.$$.fragment,f),C(J$.$$.fragment,f),C(Y$.$$.fragment,f),C(Z$.$$.fragment,f),C(c0.$$.fragment,f),C(ek.$$.fragment,f),C(v0.$$.fragment,f),C(ok.$$.fragment,f),C(rk.$$.fragment,f),C(ak.$$.fragment,f),C(T0.$$.fragment,f),C(nk.$$.fragment,f),C($0.$$.fragment,f),C(sk.$$.fragment,f),C(lk.$$.fragment,f),C(dk.$$.fragment,f),C(S0.$$.fragment,f),C(ck.$$.fragment,f),C(P0.$$.fragment,f),C(fk.$$.fragment,f),C(mk.$$.fragment,f),C(hk.$$.fragment,f),C(I0.$$.fragment,f),C(pk.$$.fragment,f),C(j0.$$.fragment,f),C(uk.$$.fragment,f),C(bk.$$.fragment,f),C(Fk.$$.fragment,f),C(G0.$$.fragment,f),C(Tk.$$.fragment,f),C(V0.$$.fragment,f),IWe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(If),f&&t(lt),f&&t(Oe),f&&t(Qe),f&&t(qf),w(Sa,f),f&&t(He),f&&t(Ae),f&&t(wo),f&&t(Ra),f&&t(kXe),f&&t(Ii),w(m6),f&&t(SXe),f&&t(qn),f&&t(RXe),w(g6,f),f&&t(PXe),f&&t(JS),f&&t(BXe),w(Gf,f),f&&t(IXe),f&&t(Ni),w(h6),f&&t(NXe),f&&t(Ao),w(p6),w(b6),w(eh),w(v6),f&&t(qXe),f&&t(ji),w(F6),f&&t(jXe),f&&t(Lo),w(T6),w(C6),w(Ih),w(w6),f&&t(DXe),f&&t(Di),w(A6),f&&t(GXe),f&&t(yo),w(L6),w($6),w(Fp),w(Tp),w(k6),f&&t(OXe),f&&t(Gi),w(S6),f&&t(VXe),f&&t(xo),w(R6),w(I6),w(Vp),w(Xp),w(N6),f&&t(XXe),f&&t(Vi),w(q6),f&&t(zXe),f&&t($o),w(j6),w(G6),w(Qp),w(O6),w(Zu),f&&t(WXe),f&&t(Wi),w(V6),f&&t(QXe),f&&t(ko),w(X6),w(W6),w(o1),w(Q6),w(H1),f&&t(HXe),f&&t(Ui),w(H6),f&&t(UXe),f&&t(So),w(U6),w(Y6),w(J1),w(K6),w(q2),f&&t(JXe),f&&t(Ki),w(Z6),f&&t(YXe),f&&t(Ro),w(eL),w(rL),w(D2),w(tL),w(Ab),f&&t(KXe),f&&t(od),w(aL),f&&t(ZXe),f&&t(Po),w(nL),w(lL),w(yb),w(iL),w(Ub),f&&t(eze),f&&t(ad),w(dL),f&&t(oze),f&&t(Bo),w(cL),w(mL),w(Yb),w(gL),w(U3),f&&t(rze),f&&t(ld),w(hL),f&&t(tze),f&&t(Io),w(pL),w(uL),w(Y3),w(bL),w(xv),f&&t(aze),f&&t(cd),w(vL),f&&t(nze),f&&t(No),w(FL),w(ML),w(kv),w(EL),w(jv),f&&t(sze),f&&t(gd),w(CL),f&&t(lze),f&&t(jo),w(wL),w(LL),w(Gv),w(yL),w(wF),f&&t(ize),f&&t(_d),w(xL),f&&t(dze),f&&t(Do),w($L),w(SL),w(LF),w(RL),w(uT),f&&t(cze),f&&t(vd),w(PL),f&&t(fze),f&&t(Go),w(BL),w(NL),w(vT),w(qL),w(MT),f&&t(mze),f&&t(Md),w(jL),f&&t(gze),f&&t(Oo),w(DL),w(OL),w(CT),w(VL),w(jT),f&&t(hze),f&&t(wd),w(XL),f&&t(pze),f&&t(Vo),w(zL),w(QL),w(GT),w(HL),w(XT),f&&t(_ze),f&&t(yd),w(UL),f&&t(uze),f&&t(Xo),w(JL),w(KL),w(WT),w(ZL),w(UT),f&&t(bze),f&&t(kd),w(ey),f&&t(vze),f&&t(zo),w(oy),w(ty),w(YT),w(ay),w(i7),f&&t(Fze),f&&t(Pd),w(ny),f&&t(Tze),f&&t(Wo),w(sy),w(iy),w(c7),w(dy),w(u7),f&&t(Mze),f&&t(Nd),w(cy),f&&t(Eze),f&&t(Qo),w(fy),w(gy),w(v7),w(hy),w(k7),f&&t(Cze),f&&t(Dd),w(py),f&&t(wze),f&&t(Ho),w(_y),w(by),w(R7),w(vy),w(N7),f&&t(Aze),f&&t(Vd),w(Ty),f&&t(Lze),f&&t(Uo),w(My),w(Cy),w(j7),w(wy),w(W7),f&&t(yze),f&&t(Wd),w(Ay),f&&t(xze),f&&t(Jo),w(Ly),w(xy),w(H7),w($y),w(Z7),f&&t($ze),f&&t(Jd),w(ky),f&&t(kze),f&&t(Yo),w(Sy),w(Py),w(o8),w(By),w(n8),f&&t(Sze),f&&t(Zd),w(Ny),f&&t(Rze),f&&t(Ko),w(qy),w(Dy),w(l8),w(Gy),w(c8),f&&t(Pze),f&&t(rc),w(Oy),f&&t(Bze),f&&t(Zo),w(Vy),w(zy),w(m8),w(Wy),w(v8),f&&t(Ize),f&&t(nc),w(Qy),f&&t(Nze),f&&t(er),w(Hy),w(Jy),w(T8),w(Yy),w(C8),f&&t(qze),f&&t(ic),w(Ky),f&&t(jze),f&&t(or),w(Zy),w(ox),w(A8),w(rx),w(M9),f&&t(Dze),f&&t(fc),w(tx),f&&t(Gze),f&&t(rr),w(ax),w(sx),w(C9),w(lx),w(H9),f&&t(Oze),f&&t(hc),w(ix),f&&t(Vze),f&&t(tr),w(dx),w(fx),w(J9),w(mx),w(cM),f&&t(Xze),f&&t(uc),w(gx),f&&t(zze),f&&t(ar),w(hx),w(_x),w(mM),w(ux),w(vM),f&&t(Wze),f&&t(Fc),w(bx),f&&t(Qze),f&&t(nr),w(vx),w(Tx),w(TM),w(Mx),w(OM),f&&t(Hze),f&&t(Ec),w(Ex),f&&t(Uze),f&&t(sr),w(Cx),w(Ax),w(XM),w(Lx),w(o4),f&&t(Jze),f&&t(Ac),w(yx),f&&t(Yze),f&&t(lr),w(xx),w(kx),w(t4),w(Sx),w($4),f&&t(Kze),f&&t(xc),w(Rx),f&&t(Zze),f&&t(ir),w(Px),w(Ix),w(S4),w(Nx),w(J4),f&&t(eWe),f&&t(Sc),w(qx),f&&t(oWe),f&&t(dr),w(jx),w(Gx),w(K4),w(Ox),w(oE),f&&t(rWe),f&&t(Bc),w(Xx),f&&t(tWe),f&&t(cr),w(zx),w(Qx),w(tE),w(Hx),w(nE),f&&t(aWe),f&&t(qc),w(Ux),f&&t(nWe),f&&t(fr),w(Jx),w(Kx),w(lE),w(Zx),w(yE),f&&t(sWe),f&&t(Gc),w(e$),f&&t(lWe),f&&t(mr),w(o$),w(t$),w($E),w(a$),w(YE),f&&t(iWe),f&&t(Xc),w(n$),f&&t(dWe),f&&t(gr),w(s$),w(i$),w(ZE),w(d$),w(oC),f&&t(cWe),f&&t(Qc),w(c$),f&&t(fWe),f&&t(hr),w(f$),w(g$),w(tC),w(h$),w(nC),f&&t(mWe),f&&t(Jc),w(p$),f&&t(gWe),f&&t(pr),w(_$),w(b$),w(lC),w(v$),w(BC),f&&t(hWe),f&&t(Zc),w(F$),f&&t(pWe),f&&t(_r),w(T$),w(E$),w(NC),w(C$),w(HC),f&&t(_We),f&&t(rf),w(w$),f&&t(uWe),f&&t(ur),w(A$),w(y$),w(JC),w(x$),w(c5),f&&t(bWe),f&&t(nf),w($$),f&&t(vWe),f&&t(br),w(k$),w(R$),w(m5),w(P$),w(E5),f&&t(FWe),f&&t(df),w(B$),f&&t(TWe),f&&t(vr),w(I$),w(q$),w(w5),w(j$),w(I5),f&&t(MWe),f&&t(mf),w(D$),f&&t(EWe),f&&t(Fr),w(G$),w(V$),w(q5),w(X$),w(U5),f&&t(CWe),f&&t(pf),w(z$),f&&t(wWe),f&&t(Tr),w(W$),w(H$),w(Y5),w(U$),w(i0),f&&t(AWe),f&&t(bf),w(J$),f&&t(LWe),f&&t(Mr),w(Y$),w(Z$),w(c0),w(ek),w(v0),f&&t(yWe),f&&t(Tf),w(ok),f&&t(xWe),f&&t(Er),w(rk),w(ak),w(T0),w(nk),w($0),f&&t($We),f&&t(Cf),w(sk),f&&t(kWe),f&&t(Cr),w(lk),w(dk),w(S0),w(ck),w(P0),f&&t(SWe),f&&t(Lf),w(fk),f&&t(RWe),f&&t(wr),w(mk),w(hk),w(I0),w(pk),w(j0),f&&t(PWe),f&&t($f),w(uk),f&&t(BWe),f&&t(Ar),w(bk),w(Fk),w(G0),w(Tk),w(V0)}}}const EJt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function CJt($){return MHt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class kJt extends bHt{constructor(g){super();vHt(this,g,CJt,MJt,FHt,{})}}export{kJt as default,EJt as metadata};
