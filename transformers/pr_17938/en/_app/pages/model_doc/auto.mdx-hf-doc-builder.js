import{S as xHt,i as $Ht,s as kHt,e as a,k as l,w as F,t as o,M as SHt,c as n,d as t,m as i,a as s,x as T,h as r,b as d,G as e,g as b,y as M,q as E,o as C,B as w,v as RHt,L as N}from"../../chunks/vendor-hf-doc-builder.js";import{T as Bat}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as I}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function PHt($){let g,v,p,m,_,c,h,Co,xi,If,lt,$i,ki,d6,Nf,Oe,Qe,Si,Pn,c6,Bn,In,f6,Ri,Nn,m6,Pi,qf,Sa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),c=a("code"),h=o("PretrainedConfig"),Co=o(`, make sure its
`),xi=a("code"),If=o("model_type"),lt=o(" attribute is set to the same key you use when registering the config (here "),$i=a("code"),ki=o('"new-model"'),d6=o(")."),Nf=l(),Oe=a("p"),Qe=o("Likewise, if your "),Si=a("code"),Pn=o("NewModel"),c6=o(" is a subclass of "),Bn=a("a"),In=o("PreTrainedModel"),f6=o(`, make sure its
`),Ri=a("code"),Nn=o("config_class"),m6=o(` attribute is set to the same class you use when registering the model (here
`),Pi=a("code"),qf=o("NewModelConfig"),Sa=o(")."),this.h()},l(He){g=n(He,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var WS=s(p);m=r(WS,"NewModelConfig"),WS.forEach(t),_=r(Ae," is a subclass of "),c=n(Ae,"CODE",{});var Bi=s(c);h=r(Bi,"PretrainedConfig"),Bi.forEach(t),Co=r(Ae,`, make sure its
`),xi=n(Ae,"CODE",{});var QS=s(xi);If=r(QS,"model_type"),QS.forEach(t),lt=r(Ae," attribute is set to the same key you use when registering the config (here "),$i=n(Ae,"CODE",{});var HS=s($i);ki=r(HS,'"new-model"'),HS.forEach(t),d6=r(Ae,")."),Ae.forEach(t),Nf=i(He),Oe=n(He,"P",{});var wo=s(Oe);Qe=r(wo,"Likewise, if your "),Si=n(wo,"CODE",{});var Ra=s(Si);Pn=r(Ra,"NewModel"),Ra.forEach(t),c6=r(wo," is a subclass of "),Bn=n(wo,"A",{href:!0});var US=s(Bn);In=r(US,"PreTrainedModel"),US.forEach(t),f6=r(wo,`, make sure its
`),Ri=n(wo,"CODE",{});var jf=s(Ri);Nn=r(jf,"config_class"),jf.forEach(t),m6=r(wo,` attribute is set to the same class you use when registering the model (here
`),Pi=n(wo,"CODE",{});var JS=s(Pi);qf=r(JS,"NewModelConfig"),JS.forEach(t),Sa=r(wo,")."),wo.forEach(t),this.h()},h(){d(Bn,"href","/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel")},m(He,Ae){b(He,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,c),e(c,h),e(g,Co),e(g,xi),e(xi,If),e(g,lt),e(g,$i),e($i,ki),e(g,d6),b(He,Nf,Ae),b(He,Oe,Ae),e(Oe,Qe),e(Oe,Si),e(Si,Pn),e(Oe,c6),e(Oe,Bn),e(Bn,In),e(Oe,f6),e(Oe,Ri),e(Ri,Nn),e(Oe,m6),e(Oe,Pi),e(Pi,qf),e(Oe,Sa)},d(He){He&&t(g),He&&t(Nf),He&&t(Oe)}}}function BHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function IHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function NHt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Co=s(p);m=r(Co,"use_auth_token=True"),Co.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(c,h){b(c,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(c){c&&t(g)}}}function qHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function jHt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Co=s(p);m=r(Co,"use_auth_token=True"),Co.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(c,h){b(c,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(c){c&&t(g)}}}function DHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function GHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function OHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function VHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function XHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function zHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function WHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function QHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function HHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function UHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function JHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function YHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function KHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function ZHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function eUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function oUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function rUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function tUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function aUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function nUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function sUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function lUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function iUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function dUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function cUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function fUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function mUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function gUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function hUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function pUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function _Ut($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function uUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function bUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function vUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function FUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function TUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function MUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function EUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function CUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function wUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function AUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function LUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function yUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function xUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function $Ut($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function kUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function SUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function RUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function PUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function BUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function IUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function NUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function qUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function jUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function DUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function GUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function OUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function VUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function XUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function zUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function WUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function QUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function HUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function UUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function JUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function YUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function KUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function ZUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function eJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function oJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function rJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function tJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function aJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function nJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function sJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function lJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function iJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function dJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function cJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function fJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function mJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function gJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function hJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function pJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function _Jt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function uJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function bJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function vJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function FJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function TJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function MJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function EJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function CJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function wJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function AJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function LJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function yJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function xJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function $Jt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function kJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function SJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:N,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function RJt($){let g,v,p,m,_,c,h,Co,xi,If,lt,$i,ki,d6,Nf,Oe,Qe,Si,Pn,c6,Bn,In,f6,Ri,Nn,m6,Pi,qf,Sa,He,Ae,WS,Bi,QS,HS,wo,Ra,US,jf,JS,JHe,BXe,Ii,Df,Qae,g6,YHe,Hae,KHe,IXe,qn,ZHe,Uae,eUe,oUe,Jae,rUe,tUe,NXe,h6,qXe,YS,aUe,jXe,Gf,DXe,Ni,Of,Yae,p6,nUe,Kae,sUe,GXe,Ao,_6,lUe,u6,iUe,KS,dUe,cUe,fUe,b6,mUe,Zae,gUe,hUe,pUe,Lr,v6,_Ue,ene,uUe,bUe,qi,vUe,one,FUe,TUe,rne,MUe,EUe,CUe,A,Vf,tne,wUe,AUe,ZS,LUe,yUe,xUe,Xf,ane,$Ue,kUe,eR,SUe,RUe,PUe,zf,nne,BUe,IUe,oR,NUe,qUe,jUe,Wf,sne,DUe,GUe,rR,OUe,VUe,XUe,Qf,lne,zUe,WUe,tR,QUe,HUe,UUe,Hf,ine,JUe,YUe,aR,KUe,ZUe,eJe,Uf,dne,oJe,rJe,nR,tJe,aJe,nJe,Jf,cne,sJe,lJe,sR,iJe,dJe,cJe,Yf,fne,fJe,mJe,lR,gJe,hJe,pJe,Kf,mne,_Je,uJe,iR,bJe,vJe,FJe,Zf,gne,TJe,MJe,dR,EJe,CJe,wJe,em,hne,AJe,LJe,cR,yJe,xJe,$Je,om,pne,kJe,SJe,fR,RJe,PJe,BJe,rm,_ne,IJe,NJe,mR,qJe,jJe,DJe,tm,une,GJe,OJe,gR,VJe,XJe,zJe,am,bne,WJe,QJe,hR,HJe,UJe,JJe,nm,vne,YJe,KJe,pR,ZJe,eYe,oYe,sm,Fne,rYe,tYe,_R,aYe,nYe,sYe,lm,Tne,lYe,iYe,uR,dYe,cYe,fYe,im,Mne,mYe,gYe,bR,hYe,pYe,_Ye,dm,Ene,uYe,bYe,vR,vYe,FYe,TYe,cm,Cne,MYe,EYe,FR,CYe,wYe,AYe,fm,wne,LYe,yYe,TR,xYe,$Ye,kYe,mm,Ane,SYe,RYe,MR,PYe,BYe,IYe,gm,Lne,NYe,qYe,ER,jYe,DYe,GYe,hm,yne,OYe,VYe,CR,XYe,zYe,WYe,pm,xne,QYe,HYe,wR,UYe,JYe,YYe,_m,$ne,KYe,ZYe,AR,eKe,oKe,rKe,um,kne,tKe,aKe,LR,nKe,sKe,lKe,bm,Sne,iKe,dKe,yR,cKe,fKe,mKe,vm,Rne,gKe,hKe,xR,pKe,_Ke,uKe,Fm,Pne,bKe,vKe,$R,FKe,TKe,MKe,Tm,Bne,EKe,CKe,kR,wKe,AKe,LKe,Mm,Ine,yKe,xKe,SR,$Ke,kKe,SKe,Em,Nne,RKe,PKe,RR,BKe,IKe,NKe,Cm,qne,qKe,jKe,PR,DKe,GKe,OKe,wm,jne,VKe,XKe,BR,zKe,WKe,QKe,Am,Dne,HKe,UKe,IR,JKe,YKe,KKe,Lm,Gne,ZKe,eZe,NR,oZe,rZe,tZe,ym,One,aZe,nZe,qR,sZe,lZe,iZe,xm,Vne,dZe,cZe,jR,fZe,mZe,gZe,$m,Xne,hZe,pZe,DR,_Ze,uZe,bZe,km,zne,vZe,FZe,GR,TZe,MZe,EZe,Sm,Wne,CZe,wZe,OR,AZe,LZe,yZe,Rm,Qne,xZe,$Ze,VR,kZe,SZe,RZe,Pm,Hne,PZe,BZe,XR,IZe,NZe,qZe,Bm,Une,jZe,DZe,zR,GZe,OZe,VZe,Im,Jne,XZe,zZe,WR,WZe,QZe,HZe,Nm,Yne,UZe,JZe,QR,YZe,KZe,ZZe,qm,Kne,eeo,oeo,HR,reo,teo,aeo,jm,Zne,neo,seo,UR,leo,ieo,deo,Dm,ese,ceo,feo,JR,meo,geo,heo,Gm,ose,peo,_eo,YR,ueo,beo,veo,Om,rse,Feo,Teo,KR,Meo,Eeo,Ceo,Vm,tse,weo,Aeo,ZR,Leo,yeo,xeo,Xm,ase,$eo,keo,eP,Seo,Reo,Peo,zm,nse,Beo,Ieo,oP,Neo,qeo,jeo,Wm,sse,Deo,Geo,rP,Oeo,Veo,Xeo,Qm,lse,zeo,Weo,tP,Qeo,Heo,Ueo,Hm,ise,Jeo,Yeo,aP,Keo,Zeo,eoo,Um,dse,ooo,roo,nP,too,aoo,noo,Jm,cse,soo,loo,sP,ioo,doo,coo,Ym,fse,foo,moo,lP,goo,hoo,poo,Km,mse,_oo,uoo,iP,boo,voo,Foo,Zm,gse,Too,Moo,dP,Eoo,Coo,woo,eg,hse,Aoo,Loo,cP,yoo,xoo,$oo,og,pse,koo,Soo,fP,Roo,Poo,Boo,rg,_se,Ioo,Noo,mP,qoo,joo,Doo,tg,use,Goo,Ooo,gP,Voo,Xoo,zoo,ag,bse,Woo,Qoo,hP,Hoo,Uoo,Joo,ng,vse,Yoo,Koo,pP,Zoo,ero,oro,sg,Fse,rro,tro,_P,aro,nro,sro,lg,Tse,lro,iro,uP,dro,cro,fro,ig,Mse,mro,gro,bP,hro,pro,_ro,dg,Ese,uro,bro,vP,vro,Fro,Tro,cg,Cse,Mro,Ero,FP,Cro,wro,Aro,fg,wse,Lro,yro,TP,xro,$ro,kro,mg,Ase,Sro,Rro,MP,Pro,Bro,Iro,gg,Lse,Nro,qro,EP,jro,Dro,Gro,hg,yse,Oro,Vro,CP,Xro,zro,Wro,pg,xse,Qro,Hro,wP,Uro,Jro,Yro,_g,$se,Kro,Zro,AP,eto,oto,rto,ug,kse,tto,ato,LP,nto,sto,lto,bg,Sse,ito,dto,yP,cto,fto,mto,vg,Rse,gto,hto,xP,pto,_to,uto,Fg,Pse,bto,vto,$P,Fto,Tto,Mto,Tg,Bse,Eto,Cto,kP,wto,Ato,Lto,Mg,Ise,yto,xto,SP,$to,kto,Sto,Eg,Nse,Rto,Pto,RP,Bto,Ito,Nto,Cg,qse,qto,jto,PP,Dto,Gto,Oto,wg,jse,Vto,Xto,BP,zto,Wto,Qto,Ag,Dse,Hto,Uto,IP,Jto,Yto,Kto,Lg,Gse,Zto,eao,NP,oao,rao,tao,yg,Ose,aao,nao,qP,sao,lao,iao,xg,Vse,dao,cao,jP,fao,mao,gao,$g,Xse,hao,pao,DP,_ao,uao,bao,kg,zse,vao,Fao,GP,Tao,Mao,Eao,Sg,Wse,Cao,wao,OP,Aao,Lao,yao,Rg,Qse,xao,$ao,VP,kao,Sao,Rao,Pg,Hse,Pao,Bao,XP,Iao,Nao,qao,Bg,Use,jao,Dao,zP,Gao,Oao,Vao,Ig,Jse,Xao,zao,WP,Wao,Qao,Hao,Ng,Yse,Uao,Jao,QP,Yao,Kao,Zao,qg,Kse,eno,ono,HP,rno,tno,ano,jg,Zse,nno,sno,UP,lno,ino,dno,Dg,ele,cno,fno,JP,mno,gno,hno,Gg,ole,pno,_no,YP,uno,bno,vno,Og,rle,Fno,Tno,KP,Mno,Eno,Cno,Vg,tle,wno,Ano,ZP,Lno,yno,xno,Xg,ale,$no,kno,eB,Sno,Rno,Pno,zg,nle,Bno,Ino,oB,Nno,qno,jno,Wg,sle,Dno,Gno,rB,Ono,Vno,Xno,Qg,lle,zno,Wno,tB,Qno,Hno,Uno,Hg,ile,Jno,Yno,aB,Kno,Zno,eso,Ug,dle,oso,rso,nB,tso,aso,nso,Jg,cle,sso,lso,sB,iso,dso,cso,Yg,fle,fso,mso,lB,gso,hso,pso,Kg,mle,_so,uso,iB,bso,vso,Fso,Zg,gle,Tso,Mso,dB,Eso,Cso,wso,eh,Aso,oh,F6,Lso,hle,yso,OXe,ji,rh,ple,T6,xso,_le,$so,VXe,Lo,M6,kso,E6,Sso,cB,Rso,Pso,Bso,C6,Iso,ule,Nso,qso,jso,yr,w6,Dso,ble,Gso,Oso,Pa,Vso,vle,Xso,zso,Fle,Wso,Qso,Tle,Hso,Uso,Jso,k,jn,Mle,Yso,Kso,fB,Zso,elo,mB,olo,rlo,tlo,Dn,Ele,alo,nlo,gB,slo,llo,hB,ilo,dlo,clo,Gn,Cle,flo,mlo,pB,glo,hlo,_B,plo,_lo,ulo,th,wle,blo,vlo,uB,Flo,Tlo,Mlo,On,Ale,Elo,Clo,bB,wlo,Alo,vB,Llo,ylo,xlo,ah,Lle,$lo,klo,FB,Slo,Rlo,Plo,nh,yle,Blo,Ilo,TB,Nlo,qlo,jlo,sh,xle,Dlo,Glo,MB,Olo,Vlo,Xlo,Vn,$le,zlo,Wlo,EB,Qlo,Hlo,CB,Ulo,Jlo,Ylo,Xn,kle,Klo,Zlo,wB,eio,oio,AB,rio,tio,aio,zn,Sle,nio,sio,LB,lio,iio,yB,dio,cio,fio,lh,Rle,mio,gio,xB,hio,pio,_io,ih,Ple,uio,bio,$B,vio,Fio,Tio,dh,Ble,Mio,Eio,kB,Cio,wio,Aio,Wn,Ile,Lio,yio,SB,xio,$io,RB,kio,Sio,Rio,ch,Nle,Pio,Bio,PB,Iio,Nio,qio,Qn,qle,jio,Dio,BB,Gio,Oio,IB,Vio,Xio,zio,Hn,jle,Wio,Qio,NB,Hio,Uio,qB,Jio,Yio,Kio,Un,Dle,Zio,edo,jB,odo,rdo,DB,tdo,ado,ndo,Jn,Gle,sdo,ldo,GB,ido,ddo,OB,cdo,fdo,mdo,fh,Ole,gdo,hdo,VB,pdo,_do,udo,Yn,Vle,bdo,vdo,XB,Fdo,Tdo,zB,Mdo,Edo,Cdo,Kn,Xle,wdo,Ado,WB,Ldo,ydo,QB,xdo,$do,kdo,Zn,zle,Sdo,Rdo,HB,Pdo,Bdo,UB,Ido,Ndo,qdo,es,Wle,jdo,Ddo,JB,Gdo,Odo,YB,Vdo,Xdo,zdo,os,Qle,Wdo,Qdo,KB,Hdo,Udo,ZB,Jdo,Ydo,Kdo,rs,Hle,Zdo,eco,eI,oco,rco,oI,tco,aco,nco,mh,Ule,sco,lco,rI,ico,dco,cco,ts,Jle,fco,mco,tI,gco,hco,aI,pco,_co,uco,gh,Yle,bco,vco,nI,Fco,Tco,Mco,as,Kle,Eco,Cco,sI,wco,Aco,lI,Lco,yco,xco,ns,Zle,$co,kco,iI,Sco,Rco,dI,Pco,Bco,Ico,ss,eie,Nco,qco,cI,jco,Dco,fI,Gco,Oco,Vco,hh,oie,Xco,zco,mI,Wco,Qco,Hco,ls,rie,Uco,Jco,gI,Yco,Kco,hI,Zco,efo,ofo,is,tie,rfo,tfo,pI,afo,nfo,_I,sfo,lfo,ifo,ds,aie,dfo,cfo,uI,ffo,mfo,bI,gfo,hfo,pfo,ph,nie,_fo,ufo,vI,bfo,vfo,Ffo,cs,sie,Tfo,Mfo,FI,Efo,Cfo,TI,wfo,Afo,Lfo,fs,lie,yfo,xfo,MI,$fo,kfo,EI,Sfo,Rfo,Pfo,ms,iie,Bfo,Ifo,CI,Nfo,qfo,wI,jfo,Dfo,Gfo,gs,die,Ofo,Vfo,AI,Xfo,zfo,LI,Wfo,Qfo,Hfo,hs,cie,Ufo,Jfo,yI,Yfo,Kfo,xI,Zfo,emo,omo,ps,fie,rmo,tmo,$I,amo,nmo,kI,smo,lmo,imo,_s,mie,dmo,cmo,SI,fmo,mmo,RI,gmo,hmo,pmo,us,gie,_mo,umo,PI,bmo,vmo,BI,Fmo,Tmo,Mmo,_h,hie,Emo,Cmo,II,wmo,Amo,Lmo,bs,pie,ymo,xmo,NI,$mo,kmo,qI,Smo,Rmo,Pmo,uh,_ie,Bmo,Imo,jI,Nmo,qmo,jmo,bh,uie,Dmo,Gmo,DI,Omo,Vmo,Xmo,vs,bie,zmo,Wmo,GI,Qmo,Hmo,OI,Umo,Jmo,Ymo,Fs,vie,Kmo,Zmo,VI,ego,ogo,XI,rgo,tgo,ago,Ts,Fie,ngo,sgo,zI,lgo,igo,WI,dgo,cgo,fgo,vh,Tie,mgo,ggo,QI,hgo,pgo,_go,Ms,Mie,ugo,bgo,HI,vgo,Fgo,UI,Tgo,Mgo,Ego,Es,Eie,Cgo,wgo,JI,Ago,Lgo,YI,ygo,xgo,$go,Cs,Cie,kgo,Sgo,KI,Rgo,Pgo,ZI,Bgo,Igo,Ngo,ws,wie,qgo,jgo,eN,Dgo,Ggo,oN,Ogo,Vgo,Xgo,As,Aie,zgo,Wgo,rN,Qgo,Hgo,tN,Ugo,Jgo,Ygo,Ls,Lie,Kgo,Zgo,aN,eho,oho,nN,rho,tho,aho,ys,yie,nho,sho,sN,lho,iho,lN,dho,cho,fho,xs,xie,mho,gho,iN,hho,pho,dN,_ho,uho,bho,Fh,$ie,vho,Fho,cN,Tho,Mho,Eho,$s,kie,Cho,who,fN,Aho,Lho,mN,yho,xho,$ho,ks,Sie,kho,Sho,gN,Rho,Pho,hN,Bho,Iho,Nho,Th,Rie,qho,jho,pN,Dho,Gho,Oho,Mh,Pie,Vho,Xho,_N,zho,Who,Qho,Eh,Bie,Hho,Uho,uN,Jho,Yho,Kho,Ch,Iie,Zho,epo,bN,opo,rpo,tpo,Ss,Nie,apo,npo,vN,spo,lpo,FN,ipo,dpo,cpo,wh,qie,fpo,mpo,TN,gpo,hpo,ppo,Rs,jie,_po,upo,MN,bpo,vpo,EN,Fpo,Tpo,Mpo,Ps,Die,Epo,Cpo,CN,wpo,Apo,wN,Lpo,ypo,xpo,Bs,Gie,$po,kpo,AN,Spo,Rpo,LN,Ppo,Bpo,Ipo,Is,Oie,Npo,qpo,yN,jpo,Dpo,xN,Gpo,Opo,Vpo,Ns,Vie,Xpo,zpo,$N,Wpo,Qpo,kN,Hpo,Upo,Jpo,qs,Xie,Ypo,Kpo,SN,Zpo,e_o,RN,o_o,r_o,t_o,Ah,zie,a_o,n_o,PN,s_o,l_o,i_o,Lh,Wie,d_o,c_o,BN,f_o,m_o,g_o,js,Qie,h_o,p_o,IN,__o,u_o,NN,b_o,v_o,F_o,Ds,Hie,T_o,M_o,qN,E_o,C_o,jN,w_o,A_o,L_o,Gs,Uie,y_o,x_o,DN,$_o,k_o,GN,S_o,R_o,P_o,yh,Jie,B_o,I_o,ON,N_o,q_o,j_o,xh,Yie,D_o,G_o,VN,O_o,V_o,X_o,$h,Kie,z_o,W_o,XN,Q_o,H_o,U_o,Os,Zie,J_o,Y_o,zN,K_o,Z_o,WN,euo,ouo,ruo,Vs,ede,tuo,auo,QN,nuo,suo,HN,luo,iuo,duo,kh,ode,cuo,fuo,UN,muo,guo,huo,Sh,rde,puo,_uo,JN,uuo,buo,vuo,Rh,tde,Fuo,Tuo,YN,Muo,Euo,Cuo,Xs,ade,wuo,Auo,KN,Luo,yuo,ZN,xuo,$uo,kuo,Ph,nde,Suo,Ruo,eq,Puo,Buo,Iuo,Bh,sde,Nuo,quo,oq,juo,Duo,Guo,zs,lde,Ouo,Vuo,rq,Xuo,zuo,tq,Wuo,Quo,Huo,Ws,ide,Uuo,Juo,aq,Yuo,Kuo,nq,Zuo,e1o,o1o,Qs,dde,r1o,t1o,sq,a1o,n1o,lq,s1o,l1o,i1o,Hs,cde,d1o,c1o,iq,f1o,m1o,dq,g1o,h1o,p1o,Ih,_1o,Nh,A6,u1o,fde,b1o,XXe,Di,qh,mde,L6,v1o,gde,F1o,zXe,yo,y6,T1o,x6,M1o,cq,E1o,C1o,w1o,$6,A1o,hde,L1o,y1o,x1o,Ue,k6,$1o,pde,k1o,S1o,Ba,R1o,_de,P1o,B1o,ude,I1o,N1o,bde,q1o,j1o,D1o,J,jh,vde,G1o,O1o,fq,V1o,X1o,z1o,Dh,Fde,W1o,Q1o,mq,H1o,U1o,J1o,Gh,Tde,Y1o,K1o,gq,Z1o,e2o,o2o,Oh,Mde,r2o,t2o,hq,a2o,n2o,s2o,Vh,Ede,l2o,i2o,pq,d2o,c2o,f2o,Xh,Cde,m2o,g2o,_q,h2o,p2o,_2o,zh,wde,u2o,b2o,uq,v2o,F2o,T2o,Wh,Ade,M2o,E2o,bq,C2o,w2o,A2o,Qh,Lde,L2o,y2o,vq,x2o,$2o,k2o,Hh,yde,S2o,R2o,Fq,P2o,B2o,I2o,Uh,xde,N2o,q2o,Tq,j2o,D2o,G2o,Jh,$de,O2o,V2o,Mq,X2o,z2o,W2o,Yh,kde,Q2o,H2o,Eq,U2o,J2o,Y2o,Kh,Sde,K2o,Z2o,Cq,ebo,obo,rbo,Zh,Rde,tbo,abo,wq,nbo,sbo,lbo,ep,Pde,ibo,dbo,Aq,cbo,fbo,mbo,op,Bde,gbo,hbo,Lq,pbo,_bo,ubo,rp,Ide,bbo,vbo,yq,Fbo,Tbo,Mbo,tp,Nde,Ebo,Cbo,xq,wbo,Abo,Lbo,ap,qde,ybo,xbo,$q,$bo,kbo,Sbo,np,jde,Rbo,Pbo,kq,Bbo,Ibo,Nbo,sp,Dde,qbo,jbo,Sq,Dbo,Gbo,Obo,lp,Gde,Vbo,Xbo,Rq,zbo,Wbo,Qbo,ip,Ode,Hbo,Ubo,Pq,Jbo,Ybo,Kbo,dp,Vde,Zbo,e3o,Bq,o3o,r3o,t3o,cp,Xde,a3o,n3o,Iq,s3o,l3o,i3o,fp,zde,d3o,c3o,Nq,f3o,m3o,g3o,mp,Wde,h3o,p3o,qq,_3o,u3o,b3o,gp,Qde,v3o,F3o,jq,T3o,M3o,E3o,hp,Hde,C3o,w3o,Dq,A3o,L3o,y3o,pp,Ude,x3o,$3o,Gq,k3o,S3o,R3o,_p,Jde,P3o,B3o,Oq,I3o,N3o,q3o,up,Yde,j3o,D3o,Vq,G3o,O3o,V3o,bp,Kde,X3o,z3o,Xq,W3o,Q3o,H3o,vp,Zde,U3o,J3o,zq,Y3o,K3o,Z3o,Fp,evo,Tp,ovo,Mp,S6,rvo,ece,tvo,WXe,Gi,Ep,oce,R6,avo,rce,nvo,QXe,xo,P6,svo,B6,lvo,Wq,ivo,dvo,cvo,I6,fvo,tce,mvo,gvo,hvo,Je,N6,pvo,ace,_vo,uvo,Oi,bvo,nce,vvo,Fvo,sce,Tvo,Mvo,Evo,fe,Cp,lce,Cvo,wvo,Qq,Avo,Lvo,yvo,wp,ice,xvo,$vo,Hq,kvo,Svo,Rvo,Ap,dce,Pvo,Bvo,Uq,Ivo,Nvo,qvo,Lp,cce,jvo,Dvo,Jq,Gvo,Ovo,Vvo,yp,fce,Xvo,zvo,Yq,Wvo,Qvo,Hvo,xp,mce,Uvo,Jvo,Kq,Yvo,Kvo,Zvo,$p,gce,eFo,oFo,Zq,rFo,tFo,aFo,kp,hce,nFo,sFo,ej,lFo,iFo,dFo,Sp,pce,cFo,fFo,oj,mFo,gFo,hFo,Rp,_ce,pFo,_Fo,rj,uFo,bFo,vFo,Pp,uce,FFo,TFo,tj,MFo,EFo,CFo,Bp,bce,wFo,AFo,aj,LFo,yFo,xFo,Ip,vce,$Fo,kFo,nj,SFo,RFo,PFo,Np,Fce,BFo,IFo,sj,NFo,qFo,jFo,qp,Tce,DFo,GFo,lj,OFo,VFo,XFo,jp,Mce,zFo,WFo,ij,QFo,HFo,UFo,Dp,Ece,JFo,YFo,dj,KFo,ZFo,eTo,Gp,Cce,oTo,rTo,cj,tTo,aTo,nTo,Op,wce,sTo,lTo,fj,iTo,dTo,cTo,Vp,fTo,Xp,mTo,zp,q6,gTo,Ace,hTo,HXe,Vi,Wp,Lce,j6,pTo,yce,_To,UXe,$o,D6,uTo,Xi,bTo,mj,vTo,FTo,gj,TTo,MTo,ETo,G6,CTo,xce,wTo,ATo,LTo,it,O6,yTo,$ce,xTo,$To,zi,kTo,kce,STo,RTo,hj,PTo,BTo,ITo,Qp,NTo,Ye,V6,qTo,Sce,jTo,DTo,Ia,GTo,Rce,OTo,VTo,Pce,XTo,zTo,Bce,WTo,QTo,HTo,y,Hp,Ice,UTo,JTo,pj,YTo,KTo,ZTo,Up,Nce,e7o,o7o,_j,r7o,t7o,a7o,Jp,qce,n7o,s7o,uj,l7o,i7o,d7o,Yp,jce,c7o,f7o,bj,m7o,g7o,h7o,Kp,Dce,p7o,_7o,vj,u7o,b7o,v7o,Zp,Gce,F7o,T7o,Fj,M7o,E7o,C7o,e_,Oce,w7o,A7o,Tj,L7o,y7o,x7o,o_,Vce,$7o,k7o,Mj,S7o,R7o,P7o,r_,Xce,B7o,I7o,Ej,N7o,q7o,j7o,t_,zce,D7o,G7o,Cj,O7o,V7o,X7o,a_,Wce,z7o,W7o,wj,Q7o,H7o,U7o,n_,Qce,J7o,Y7o,Aj,K7o,Z7o,e8o,s_,Hce,o8o,r8o,Lj,t8o,a8o,n8o,l_,Uce,s8o,l8o,yj,i8o,d8o,c8o,i_,Jce,f8o,m8o,xj,g8o,h8o,p8o,d_,Yce,_8o,u8o,$j,b8o,v8o,F8o,c_,Kce,T8o,M8o,kj,E8o,C8o,w8o,f_,Zce,A8o,L8o,Sj,y8o,x8o,$8o,m_,efe,k8o,S8o,Rj,R8o,P8o,B8o,g_,ofe,I8o,N8o,Pj,q8o,j8o,D8o,h_,rfe,G8o,O8o,Bj,V8o,X8o,z8o,p_,tfe,W8o,Q8o,Ij,H8o,U8o,J8o,__,afe,Y8o,K8o,Nj,Z8o,e9o,o9o,u_,nfe,r9o,t9o,qj,a9o,n9o,s9o,b_,sfe,l9o,i9o,jj,d9o,c9o,f9o,v_,lfe,m9o,g9o,Dj,h9o,p9o,_9o,F_,ife,u9o,b9o,Gj,v9o,F9o,T9o,T_,dfe,M9o,E9o,Oj,C9o,w9o,A9o,M_,cfe,L9o,y9o,Vj,x9o,$9o,k9o,E_,ffe,S9o,R9o,Xj,P9o,B9o,I9o,C_,mfe,N9o,q9o,zj,j9o,D9o,G9o,w_,gfe,O9o,V9o,Wj,X9o,z9o,W9o,A_,hfe,Q9o,H9o,Qj,U9o,J9o,Y9o,L_,pfe,K9o,Z9o,Hj,eMo,oMo,rMo,Us,_fe,tMo,aMo,Uj,nMo,sMo,Jj,lMo,iMo,dMo,y_,ufe,cMo,fMo,Yj,mMo,gMo,hMo,x_,bfe,pMo,_Mo,Kj,uMo,bMo,vMo,$_,vfe,FMo,TMo,Zj,MMo,EMo,CMo,k_,Ffe,wMo,AMo,eD,LMo,yMo,xMo,S_,Tfe,$Mo,kMo,oD,SMo,RMo,PMo,R_,Mfe,BMo,IMo,rD,NMo,qMo,jMo,P_,Efe,DMo,GMo,tD,OMo,VMo,XMo,B_,Cfe,zMo,WMo,aD,QMo,HMo,UMo,I_,wfe,JMo,YMo,nD,KMo,ZMo,e4o,N_,Afe,o4o,r4o,sD,t4o,a4o,n4o,q_,Lfe,s4o,l4o,lD,i4o,d4o,c4o,j_,yfe,f4o,m4o,iD,g4o,h4o,p4o,D_,xfe,_4o,u4o,dD,b4o,v4o,F4o,G_,$fe,T4o,M4o,cD,E4o,C4o,w4o,O_,kfe,A4o,L4o,fD,y4o,x4o,$4o,V_,Sfe,k4o,S4o,mD,R4o,P4o,B4o,X_,Rfe,I4o,N4o,gD,q4o,j4o,D4o,z_,Pfe,G4o,O4o,hD,V4o,X4o,z4o,W_,Bfe,W4o,Q4o,pD,H4o,U4o,J4o,Q_,Ife,Y4o,K4o,_D,Z4o,eEo,oEo,H_,Nfe,rEo,tEo,uD,aEo,nEo,sEo,U_,qfe,lEo,iEo,bD,dEo,cEo,fEo,J_,jfe,mEo,gEo,vD,hEo,pEo,_Eo,Y_,Dfe,uEo,bEo,FD,vEo,FEo,TEo,K_,Gfe,MEo,EEo,TD,CEo,wEo,AEo,Z_,Ofe,LEo,yEo,MD,xEo,$Eo,kEo,eu,Vfe,SEo,REo,ED,PEo,BEo,IEo,ou,Xfe,NEo,qEo,CD,jEo,DEo,GEo,ru,zfe,OEo,VEo,wD,XEo,zEo,WEo,tu,Wfe,QEo,HEo,AD,UEo,JEo,YEo,au,Qfe,KEo,ZEo,LD,eCo,oCo,rCo,nu,Hfe,tCo,aCo,yD,nCo,sCo,lCo,su,Ufe,iCo,dCo,xD,cCo,fCo,mCo,lu,Jfe,gCo,hCo,$D,pCo,_Co,uCo,iu,Yfe,bCo,vCo,kD,FCo,TCo,MCo,du,Kfe,ECo,CCo,SD,wCo,ACo,LCo,cu,Zfe,yCo,xCo,RD,$Co,kCo,SCo,fu,eme,RCo,PCo,PD,BCo,ICo,NCo,mu,ome,qCo,jCo,BD,DCo,GCo,OCo,gu,rme,VCo,XCo,ID,zCo,WCo,QCo,hu,tme,HCo,UCo,ND,JCo,YCo,KCo,pu,ame,ZCo,e5o,qD,o5o,r5o,t5o,_u,nme,a5o,n5o,jD,s5o,l5o,i5o,uu,sme,d5o,c5o,DD,f5o,m5o,g5o,bu,lme,h5o,p5o,GD,_5o,u5o,b5o,vu,ime,v5o,F5o,OD,T5o,M5o,E5o,Fu,dme,C5o,w5o,VD,A5o,L5o,y5o,Tu,cme,x5o,$5o,XD,k5o,S5o,R5o,Mu,fme,P5o,B5o,zD,I5o,N5o,q5o,Eu,mme,j5o,D5o,WD,G5o,O5o,V5o,Cu,gme,X5o,z5o,QD,W5o,Q5o,H5o,wu,hme,U5o,J5o,HD,Y5o,K5o,Z5o,Au,pme,e0o,o0o,UD,r0o,t0o,a0o,Lu,_me,n0o,s0o,JD,l0o,i0o,d0o,yu,ume,c0o,f0o,YD,m0o,g0o,h0o,xu,bme,p0o,_0o,KD,u0o,b0o,v0o,$u,vme,F0o,T0o,ZD,M0o,E0o,C0o,ku,Fme,w0o,A0o,eG,L0o,y0o,x0o,Su,Tme,$0o,k0o,oG,S0o,R0o,P0o,Ru,Mme,B0o,I0o,rG,N0o,q0o,j0o,Pu,Eme,D0o,G0o,tG,O0o,V0o,X0o,Bu,Cme,z0o,W0o,aG,Q0o,H0o,U0o,Iu,wme,J0o,Y0o,nG,K0o,Z0o,ewo,Nu,Ame,owo,rwo,sG,two,awo,nwo,qu,Lme,swo,lwo,lG,iwo,dwo,cwo,ju,yme,fwo,mwo,iG,gwo,hwo,pwo,Du,xme,_wo,uwo,dG,bwo,vwo,Fwo,Gu,$me,Two,Mwo,cG,Ewo,Cwo,wwo,Ou,kme,Awo,Lwo,fG,ywo,xwo,$wo,Vu,Sme,kwo,Swo,mG,Rwo,Pwo,Bwo,Xu,Rme,Iwo,Nwo,gG,qwo,jwo,Dwo,zu,Pme,Gwo,Owo,hG,Vwo,Xwo,zwo,Wu,Bme,Wwo,Qwo,pG,Hwo,Uwo,Jwo,Qu,Ime,Ywo,Kwo,_G,Zwo,eAo,oAo,Hu,Nme,rAo,tAo,uG,aAo,nAo,sAo,Uu,qme,lAo,iAo,bG,dAo,cAo,fAo,Ju,jme,mAo,gAo,vG,hAo,pAo,_Ao,Yu,Dme,uAo,bAo,FG,vAo,FAo,TAo,Ku,MAo,Gme,EAo,CAo,Ome,wAo,AAo,Zu,JXe,Wi,e1,Vme,X6,LAo,Xme,yAo,YXe,ko,z6,xAo,Qi,$Ao,TG,kAo,SAo,MG,RAo,PAo,BAo,W6,IAo,zme,NAo,qAo,jAo,dt,Q6,DAo,Wme,GAo,OAo,Hi,VAo,Qme,XAo,zAo,EG,WAo,QAo,HAo,o1,UAo,Ke,H6,JAo,Hme,YAo,KAo,Na,ZAo,Ume,e6o,o6o,Jme,r6o,t6o,Yme,a6o,n6o,s6o,G,r1,Kme,l6o,i6o,CG,d6o,c6o,f6o,t1,Zme,m6o,g6o,wG,h6o,p6o,_6o,a1,ege,u6o,b6o,AG,v6o,F6o,T6o,n1,oge,M6o,E6o,LG,C6o,w6o,A6o,s1,rge,L6o,y6o,yG,x6o,$6o,k6o,l1,tge,S6o,R6o,xG,P6o,B6o,I6o,i1,age,N6o,q6o,$G,j6o,D6o,G6o,d1,nge,O6o,V6o,kG,X6o,z6o,W6o,c1,sge,Q6o,H6o,SG,U6o,J6o,Y6o,f1,lge,K6o,Z6o,RG,eLo,oLo,rLo,m1,ige,tLo,aLo,PG,nLo,sLo,lLo,g1,dge,iLo,dLo,BG,cLo,fLo,mLo,h1,cge,gLo,hLo,IG,pLo,_Lo,uLo,p1,fge,bLo,vLo,NG,FLo,TLo,MLo,_1,mge,ELo,CLo,qG,wLo,ALo,LLo,u1,gge,yLo,xLo,jG,$Lo,kLo,SLo,b1,hge,RLo,PLo,DG,BLo,ILo,NLo,v1,pge,qLo,jLo,GG,DLo,GLo,OLo,F1,_ge,VLo,XLo,OG,zLo,WLo,QLo,T1,uge,HLo,ULo,VG,JLo,YLo,KLo,M1,bge,ZLo,eyo,XG,oyo,ryo,tyo,E1,vge,ayo,nyo,zG,syo,lyo,iyo,C1,Fge,dyo,cyo,WG,fyo,myo,gyo,w1,Tge,hyo,pyo,QG,_yo,uyo,byo,A1,Mge,vyo,Fyo,HG,Tyo,Myo,Eyo,L1,Ege,Cyo,wyo,UG,Ayo,Lyo,yyo,y1,Cge,xyo,$yo,JG,kyo,Syo,Ryo,x1,wge,Pyo,Byo,YG,Iyo,Nyo,qyo,$1,Age,jyo,Dyo,KG,Gyo,Oyo,Vyo,k1,Lge,Xyo,zyo,ZG,Wyo,Qyo,Hyo,S1,yge,Uyo,Jyo,eO,Yyo,Kyo,Zyo,R1,xge,exo,oxo,oO,rxo,txo,axo,P1,$ge,nxo,sxo,rO,lxo,ixo,dxo,B1,kge,cxo,fxo,tO,mxo,gxo,hxo,I1,Sge,pxo,_xo,aO,uxo,bxo,vxo,N1,Rge,Fxo,Txo,nO,Mxo,Exo,Cxo,q1,Pge,wxo,Axo,sO,Lxo,yxo,xxo,j1,Bge,$xo,kxo,lO,Sxo,Rxo,Pxo,D1,Ige,Bxo,Ixo,iO,Nxo,qxo,jxo,G1,Nge,Dxo,Gxo,dO,Oxo,Vxo,Xxo,O1,qge,zxo,Wxo,cO,Qxo,Hxo,Uxo,V1,jge,Jxo,Yxo,fO,Kxo,Zxo,e$o,X1,Dge,o$o,r$o,mO,t$o,a$o,n$o,z1,Gge,s$o,l$o,gO,i$o,d$o,c$o,W1,Oge,f$o,m$o,hO,g$o,h$o,p$o,Q1,_$o,Vge,u$o,b$o,Xge,v$o,F$o,H1,KXe,Ui,U1,zge,U6,T$o,Wge,M$o,ZXe,So,J6,E$o,Ji,C$o,pO,w$o,A$o,_O,L$o,y$o,x$o,Y6,$$o,Qge,k$o,S$o,R$o,ct,K6,P$o,Hge,B$o,I$o,Yi,N$o,Uge,q$o,j$o,uO,D$o,G$o,O$o,J1,V$o,Ze,Z6,X$o,Jge,z$o,W$o,qa,Q$o,Yge,H$o,U$o,Kge,J$o,Y$o,Zge,K$o,Z$o,eko,z,Y1,ehe,oko,rko,bO,tko,ako,nko,K1,ohe,sko,lko,vO,iko,dko,cko,Z1,rhe,fko,mko,FO,gko,hko,pko,e2,the,_ko,uko,TO,bko,vko,Fko,o2,ahe,Tko,Mko,MO,Eko,Cko,wko,r2,nhe,Ako,Lko,EO,yko,xko,$ko,t2,she,kko,Sko,CO,Rko,Pko,Bko,a2,lhe,Iko,Nko,wO,qko,jko,Dko,n2,ihe,Gko,Oko,AO,Vko,Xko,zko,s2,dhe,Wko,Qko,LO,Hko,Uko,Jko,l2,che,Yko,Kko,yO,Zko,eSo,oSo,i2,fhe,rSo,tSo,xO,aSo,nSo,sSo,d2,mhe,lSo,iSo,$O,dSo,cSo,fSo,c2,ghe,mSo,gSo,kO,hSo,pSo,_So,f2,hhe,uSo,bSo,SO,vSo,FSo,TSo,m2,phe,MSo,ESo,RO,CSo,wSo,ASo,g2,_he,LSo,ySo,PO,xSo,$So,kSo,h2,uhe,SSo,RSo,BO,PSo,BSo,ISo,p2,bhe,NSo,qSo,IO,jSo,DSo,GSo,_2,vhe,OSo,VSo,NO,XSo,zSo,WSo,u2,Fhe,QSo,HSo,qO,USo,JSo,YSo,b2,The,KSo,ZSo,jO,eRo,oRo,rRo,v2,Mhe,tRo,aRo,DO,nRo,sRo,lRo,F2,Ehe,iRo,dRo,GO,cRo,fRo,mRo,T2,Che,gRo,hRo,OO,pRo,_Ro,uRo,M2,whe,bRo,vRo,VO,FRo,TRo,MRo,E2,Ahe,ERo,CRo,XO,wRo,ARo,LRo,C2,Lhe,yRo,xRo,zO,$Ro,kRo,SRo,w2,yhe,RRo,PRo,WO,BRo,IRo,NRo,A2,xhe,qRo,jRo,QO,DRo,GRo,ORo,L2,$he,VRo,XRo,HO,zRo,WRo,QRo,y2,khe,HRo,URo,UO,JRo,YRo,KRo,x2,She,ZRo,ePo,JO,oPo,rPo,tPo,$2,Rhe,aPo,nPo,YO,sPo,lPo,iPo,k2,Phe,dPo,cPo,KO,fPo,mPo,gPo,S2,Bhe,hPo,pPo,ZO,_Po,uPo,bPo,R2,Ihe,vPo,FPo,eV,TPo,MPo,EPo,P2,Nhe,CPo,wPo,oV,APo,LPo,yPo,B2,qhe,xPo,$Po,rV,kPo,SPo,RPo,I2,jhe,PPo,BPo,tV,IPo,NPo,qPo,N2,jPo,Dhe,DPo,GPo,Ghe,OPo,VPo,q2,eze,Ki,j2,Ohe,eL,XPo,Vhe,zPo,oze,Ro,oL,WPo,Zi,QPo,aV,HPo,UPo,nV,JPo,YPo,KPo,rL,ZPo,Xhe,eBo,oBo,rBo,ft,tL,tBo,zhe,aBo,nBo,ed,sBo,Whe,lBo,iBo,sV,dBo,cBo,fBo,D2,mBo,eo,aL,gBo,Qhe,hBo,pBo,ja,_Bo,Hhe,uBo,bBo,Uhe,vBo,FBo,Jhe,TBo,MBo,EBo,Q,G2,Yhe,CBo,wBo,lV,ABo,LBo,yBo,O2,Khe,xBo,$Bo,iV,kBo,SBo,RBo,V2,Zhe,PBo,BBo,dV,IBo,NBo,qBo,X2,epe,jBo,DBo,cV,GBo,OBo,VBo,z2,ope,XBo,zBo,fV,WBo,QBo,HBo,W2,rpe,UBo,JBo,mV,YBo,KBo,ZBo,Q2,tpe,eIo,oIo,gV,rIo,tIo,aIo,H2,ape,nIo,sIo,hV,lIo,iIo,dIo,U2,npe,cIo,fIo,pV,mIo,gIo,hIo,J2,spe,pIo,_Io,_V,uIo,bIo,vIo,Y2,lpe,FIo,TIo,uV,MIo,EIo,CIo,K2,ipe,wIo,AIo,bV,LIo,yIo,xIo,Z2,dpe,$Io,kIo,vV,SIo,RIo,PIo,eb,cpe,BIo,IIo,FV,NIo,qIo,jIo,ob,fpe,DIo,GIo,TV,OIo,VIo,XIo,rb,mpe,zIo,WIo,MV,QIo,HIo,UIo,tb,gpe,JIo,YIo,EV,KIo,ZIo,eNo,ab,hpe,oNo,rNo,CV,tNo,aNo,nNo,nb,ppe,sNo,lNo,wV,iNo,dNo,cNo,sb,_pe,fNo,mNo,AV,gNo,hNo,pNo,lb,upe,_No,uNo,LV,bNo,vNo,FNo,ib,bpe,TNo,MNo,yV,ENo,CNo,wNo,db,vpe,ANo,LNo,xV,yNo,xNo,$No,cb,Fpe,kNo,SNo,$V,RNo,PNo,BNo,fb,Tpe,INo,NNo,kV,qNo,jNo,DNo,mb,Mpe,GNo,ONo,SV,VNo,XNo,zNo,gb,Epe,WNo,QNo,RV,HNo,UNo,JNo,hb,Cpe,YNo,KNo,PV,ZNo,eqo,oqo,pb,wpe,rqo,tqo,BV,aqo,nqo,sqo,_b,Ape,lqo,iqo,IV,dqo,cqo,fqo,ub,Lpe,mqo,gqo,NV,hqo,pqo,_qo,bb,ype,uqo,bqo,qV,vqo,Fqo,Tqo,vb,xpe,Mqo,Eqo,jV,Cqo,wqo,Aqo,Fb,$pe,Lqo,yqo,kpe,xqo,$qo,kqo,Tb,Spe,Sqo,Rqo,DV,Pqo,Bqo,Iqo,Mb,Rpe,Nqo,qqo,GV,jqo,Dqo,Gqo,Eb,Ppe,Oqo,Vqo,OV,Xqo,zqo,Wqo,Cb,Bpe,Qqo,Hqo,VV,Uqo,Jqo,Yqo,wb,Kqo,Ipe,Zqo,ejo,Npe,ojo,rjo,Ab,rze,od,Lb,qpe,nL,tjo,jpe,ajo,tze,Po,sL,njo,rd,sjo,XV,ljo,ijo,zV,djo,cjo,fjo,lL,mjo,Dpe,gjo,hjo,pjo,mt,iL,_jo,Gpe,ujo,bjo,td,vjo,Ope,Fjo,Tjo,WV,Mjo,Ejo,Cjo,yb,wjo,oo,dL,Ajo,Vpe,Ljo,yjo,Da,xjo,Xpe,$jo,kjo,zpe,Sjo,Rjo,Wpe,Pjo,Bjo,Ijo,me,xb,Qpe,Njo,qjo,QV,jjo,Djo,Gjo,$b,Hpe,Ojo,Vjo,HV,Xjo,zjo,Wjo,kb,Upe,Qjo,Hjo,UV,Ujo,Jjo,Yjo,Sb,Jpe,Kjo,Zjo,JV,eDo,oDo,rDo,Rb,Ype,tDo,aDo,YV,nDo,sDo,lDo,Pb,Kpe,iDo,dDo,KV,cDo,fDo,mDo,Bb,Zpe,gDo,hDo,ZV,pDo,_Do,uDo,Ib,e_e,bDo,vDo,eX,FDo,TDo,MDo,Nb,o_e,EDo,CDo,oX,wDo,ADo,LDo,qb,r_e,yDo,xDo,rX,$Do,kDo,SDo,jb,t_e,RDo,PDo,tX,BDo,IDo,NDo,Db,a_e,qDo,jDo,aX,DDo,GDo,ODo,Gb,n_e,VDo,XDo,nX,zDo,WDo,QDo,Ob,s_e,HDo,UDo,sX,JDo,YDo,KDo,Vb,l_e,ZDo,eGo,lX,oGo,rGo,tGo,Xb,i_e,aGo,nGo,iX,sGo,lGo,iGo,zb,d_e,dGo,cGo,dX,fGo,mGo,gGo,Wb,c_e,hGo,pGo,cX,_Go,uGo,bGo,Qb,f_e,vGo,FGo,fX,TGo,MGo,EGo,Hb,CGo,m_e,wGo,AGo,g_e,LGo,yGo,Ub,aze,ad,Jb,h_e,cL,xGo,p_e,$Go,nze,Bo,fL,kGo,nd,SGo,mX,RGo,PGo,gX,BGo,IGo,NGo,mL,qGo,__e,jGo,DGo,GGo,gt,gL,OGo,u_e,VGo,XGo,sd,zGo,b_e,WGo,QGo,hX,HGo,UGo,JGo,Yb,YGo,ro,hL,KGo,v_e,ZGo,eOo,Ga,oOo,F_e,rOo,tOo,T_e,aOo,nOo,M_e,sOo,lOo,iOo,B,Kb,E_e,dOo,cOo,pX,fOo,mOo,gOo,Zb,C_e,hOo,pOo,_X,_Oo,uOo,bOo,e3,w_e,vOo,FOo,uX,TOo,MOo,EOo,o3,A_e,COo,wOo,bX,AOo,LOo,yOo,r3,L_e,xOo,$Oo,vX,kOo,SOo,ROo,t3,y_e,POo,BOo,FX,IOo,NOo,qOo,a3,x_e,jOo,DOo,TX,GOo,OOo,VOo,n3,$_e,XOo,zOo,MX,WOo,QOo,HOo,s3,k_e,UOo,JOo,EX,YOo,KOo,ZOo,l3,S_e,eVo,oVo,CX,rVo,tVo,aVo,i3,R_e,nVo,sVo,wX,lVo,iVo,dVo,d3,P_e,cVo,fVo,AX,mVo,gVo,hVo,c3,B_e,pVo,_Vo,LX,uVo,bVo,vVo,f3,I_e,FVo,TVo,yX,MVo,EVo,CVo,m3,N_e,wVo,AVo,xX,LVo,yVo,xVo,g3,q_e,$Vo,kVo,$X,SVo,RVo,PVo,h3,j_e,BVo,IVo,kX,NVo,qVo,jVo,p3,D_e,DVo,GVo,SX,OVo,VVo,XVo,_3,G_e,zVo,WVo,RX,QVo,HVo,UVo,u3,O_e,JVo,YVo,PX,KVo,ZVo,eXo,b3,V_e,oXo,rXo,BX,tXo,aXo,nXo,v3,X_e,sXo,lXo,IX,iXo,dXo,cXo,F3,z_e,fXo,mXo,NX,gXo,hXo,pXo,T3,W_e,_Xo,uXo,qX,bXo,vXo,FXo,M3,Q_e,TXo,MXo,jX,EXo,CXo,wXo,E3,H_e,AXo,LXo,DX,yXo,xXo,$Xo,C3,U_e,kXo,SXo,GX,RXo,PXo,BXo,w3,J_e,IXo,NXo,OX,qXo,jXo,DXo,A3,Y_e,GXo,OXo,VX,VXo,XXo,zXo,L3,K_e,WXo,QXo,XX,HXo,UXo,JXo,y3,Z_e,YXo,KXo,zX,ZXo,ezo,ozo,x3,eue,rzo,tzo,WX,azo,nzo,szo,$3,oue,lzo,izo,QX,dzo,czo,fzo,k3,rue,mzo,gzo,HX,hzo,pzo,_zo,S3,tue,uzo,bzo,UX,vzo,Fzo,Tzo,R3,aue,Mzo,Ezo,JX,Czo,wzo,Azo,P3,nue,Lzo,yzo,YX,xzo,$zo,kzo,B3,sue,Szo,Rzo,KX,Pzo,Bzo,Izo,I3,lue,Nzo,qzo,ZX,jzo,Dzo,Gzo,N3,iue,Ozo,Vzo,ez,Xzo,zzo,Wzo,q3,due,Qzo,Hzo,oz,Uzo,Jzo,Yzo,j3,cue,Kzo,Zzo,rz,eWo,oWo,rWo,D3,fue,tWo,aWo,tz,nWo,sWo,lWo,G3,mue,iWo,dWo,az,cWo,fWo,mWo,O3,gue,gWo,hWo,nz,pWo,_Wo,uWo,V3,hue,bWo,vWo,sz,FWo,TWo,MWo,X3,pue,EWo,CWo,lz,wWo,AWo,LWo,z3,_ue,yWo,xWo,iz,$Wo,kWo,SWo,W3,uue,RWo,PWo,dz,BWo,IWo,NWo,Q3,bue,qWo,jWo,cz,DWo,GWo,OWo,H3,vue,VWo,XWo,fz,zWo,WWo,QWo,U3,HWo,Fue,UWo,JWo,Tue,YWo,KWo,J3,sze,ld,Y3,Mue,pL,ZWo,Eue,eQo,lze,Io,_L,oQo,id,rQo,mz,tQo,aQo,gz,nQo,sQo,lQo,uL,iQo,Cue,dQo,cQo,fQo,ht,bL,mQo,wue,gQo,hQo,dd,pQo,Aue,_Qo,uQo,hz,bQo,vQo,FQo,K3,TQo,to,vL,MQo,Lue,EQo,CQo,Oa,wQo,yue,AQo,LQo,xue,yQo,xQo,$ue,$Qo,kQo,SQo,Z,Z3,kue,RQo,PQo,pz,BQo,IQo,NQo,ev,Sue,qQo,jQo,_z,DQo,GQo,OQo,ov,Rue,VQo,XQo,uz,zQo,WQo,QQo,rv,Pue,HQo,UQo,bz,JQo,YQo,KQo,tv,Bue,ZQo,eHo,vz,oHo,rHo,tHo,av,Iue,aHo,nHo,Fz,sHo,lHo,iHo,nv,Nue,dHo,cHo,Tz,fHo,mHo,gHo,sv,que,hHo,pHo,Mz,_Ho,uHo,bHo,lv,jue,vHo,FHo,Ez,THo,MHo,EHo,iv,Due,CHo,wHo,Cz,AHo,LHo,yHo,dv,Gue,xHo,$Ho,wz,kHo,SHo,RHo,cv,Oue,PHo,BHo,Az,IHo,NHo,qHo,fv,Vue,jHo,DHo,Lz,GHo,OHo,VHo,mv,Xue,XHo,zHo,yz,WHo,QHo,HHo,gv,zue,UHo,JHo,xz,YHo,KHo,ZHo,hv,Wue,eUo,oUo,$z,rUo,tUo,aUo,pv,Que,nUo,sUo,kz,lUo,iUo,dUo,_v,Hue,cUo,fUo,Sz,mUo,gUo,hUo,uv,Uue,pUo,_Uo,Rz,uUo,bUo,vUo,bv,Jue,FUo,TUo,Pz,MUo,EUo,CUo,vv,Yue,wUo,AUo,Bz,LUo,yUo,xUo,Fv,Kue,$Uo,kUo,Iz,SUo,RUo,PUo,Tv,Zue,BUo,IUo,Nz,NUo,qUo,jUo,Mv,e1e,DUo,GUo,qz,OUo,VUo,XUo,Ev,o1e,zUo,WUo,jz,QUo,HUo,UUo,Cv,r1e,JUo,YUo,Dz,KUo,ZUo,eJo,wv,t1e,oJo,rJo,Gz,tJo,aJo,nJo,Av,a1e,sJo,lJo,Oz,iJo,dJo,cJo,Lv,n1e,fJo,mJo,Vz,gJo,hJo,pJo,yv,s1e,_Jo,uJo,Xz,bJo,vJo,FJo,xv,TJo,l1e,MJo,EJo,i1e,CJo,wJo,$v,ize,cd,kv,d1e,FL,AJo,c1e,LJo,dze,No,TL,yJo,fd,xJo,zz,$Jo,kJo,Wz,SJo,RJo,PJo,ML,BJo,f1e,IJo,NJo,qJo,pt,EL,jJo,m1e,DJo,GJo,md,OJo,g1e,VJo,XJo,Qz,zJo,WJo,QJo,Sv,HJo,ao,CL,UJo,h1e,JJo,YJo,Va,KJo,p1e,ZJo,eYo,_1e,oYo,rYo,u1e,tYo,aYo,nYo,qo,Rv,b1e,sYo,lYo,Hz,iYo,dYo,cYo,Pv,v1e,fYo,mYo,Uz,gYo,hYo,pYo,Bv,F1e,_Yo,uYo,Jz,bYo,vYo,FYo,Iv,T1e,TYo,MYo,Yz,EYo,CYo,wYo,Nv,M1e,AYo,LYo,Kz,yYo,xYo,$Yo,qv,E1e,kYo,SYo,Zz,RYo,PYo,BYo,jv,IYo,C1e,NYo,qYo,w1e,jYo,DYo,Dv,cze,gd,Gv,A1e,wL,GYo,L1e,OYo,fze,jo,AL,VYo,hd,XYo,eW,zYo,WYo,oW,QYo,HYo,UYo,LL,JYo,y1e,YYo,KYo,ZYo,_t,yL,eKo,x1e,oKo,rKo,pd,tKo,$1e,aKo,nKo,rW,sKo,lKo,iKo,Ov,dKo,no,xL,cKo,k1e,fKo,mKo,Xa,gKo,S1e,hKo,pKo,R1e,_Ko,uKo,P1e,bKo,vKo,FKo,U,Vv,B1e,TKo,MKo,tW,EKo,CKo,wKo,Xv,I1e,AKo,LKo,aW,yKo,xKo,$Ko,zv,N1e,kKo,SKo,nW,RKo,PKo,BKo,Wv,q1e,IKo,NKo,sW,qKo,jKo,DKo,Qv,j1e,GKo,OKo,lW,VKo,XKo,zKo,Hv,D1e,WKo,QKo,iW,HKo,UKo,JKo,Uv,G1e,YKo,KKo,dW,ZKo,eZo,oZo,Jv,O1e,rZo,tZo,cW,aZo,nZo,sZo,Yv,V1e,lZo,iZo,fW,dZo,cZo,fZo,Kv,X1e,mZo,gZo,mW,hZo,pZo,_Zo,Zv,z1e,uZo,bZo,gW,vZo,FZo,TZo,eF,W1e,MZo,EZo,hW,CZo,wZo,AZo,oF,Q1e,LZo,yZo,pW,xZo,$Zo,kZo,rF,H1e,SZo,RZo,_W,PZo,BZo,IZo,tF,U1e,NZo,qZo,uW,jZo,DZo,GZo,aF,J1e,OZo,VZo,bW,XZo,zZo,WZo,nF,Y1e,QZo,HZo,vW,UZo,JZo,YZo,sF,K1e,KZo,ZZo,FW,eer,oer,rer,lF,Z1e,ter,aer,TW,ner,ser,ler,iF,e2e,ier,der,MW,cer,fer,mer,dF,o2e,ger,her,EW,per,_er,uer,cF,r2e,ber,ver,CW,Fer,Ter,Mer,fF,t2e,Eer,Cer,wW,wer,Aer,Ler,mF,a2e,yer,xer,AW,$er,ker,Ser,gF,n2e,Rer,Per,LW,Ber,Ier,Ner,hF,s2e,qer,jer,yW,Der,Ger,Oer,pF,l2e,Ver,Xer,xW,zer,Wer,Qer,_F,i2e,Her,Uer,$W,Jer,Yer,Ker,uF,d2e,Zer,eor,kW,oor,ror,tor,bF,c2e,aor,nor,SW,sor,lor,ior,vF,f2e,dor,cor,RW,mor,gor,hor,FF,m2e,por,_or,PW,uor,bor,vor,TF,g2e,For,Tor,BW,Mor,Eor,Cor,MF,h2e,wor,Aor,IW,Lor,yor,xor,EF,p2e,$or,kor,NW,Sor,Ror,Por,CF,_2e,Bor,Ior,qW,Nor,qor,jor,wF,Dor,u2e,Gor,Oor,b2e,Vor,Xor,AF,mze,_d,LF,v2e,$L,zor,F2e,Wor,gze,Do,kL,Qor,ud,Hor,jW,Uor,Jor,DW,Yor,Kor,Zor,SL,err,T2e,orr,rrr,trr,ut,RL,arr,M2e,nrr,srr,bd,lrr,E2e,irr,drr,GW,crr,frr,mrr,yF,grr,so,PL,hrr,C2e,prr,_rr,za,urr,w2e,brr,vrr,A2e,Frr,Trr,L2e,Mrr,Err,Crr,V,xF,y2e,wrr,Arr,OW,Lrr,yrr,xrr,$F,x2e,$rr,krr,VW,Srr,Rrr,Prr,kF,$2e,Brr,Irr,XW,Nrr,qrr,jrr,SF,k2e,Drr,Grr,zW,Orr,Vrr,Xrr,RF,S2e,zrr,Wrr,WW,Qrr,Hrr,Urr,PF,R2e,Jrr,Yrr,QW,Krr,Zrr,etr,BF,P2e,otr,rtr,HW,ttr,atr,ntr,IF,B2e,str,ltr,UW,itr,dtr,ctr,NF,I2e,ftr,mtr,JW,gtr,htr,ptr,qF,N2e,_tr,utr,YW,btr,vtr,Ftr,jF,q2e,Ttr,Mtr,KW,Etr,Ctr,wtr,DF,j2e,Atr,Ltr,ZW,ytr,xtr,$tr,GF,D2e,ktr,Str,eQ,Rtr,Ptr,Btr,OF,G2e,Itr,Ntr,oQ,qtr,jtr,Dtr,VF,O2e,Gtr,Otr,rQ,Vtr,Xtr,ztr,XF,V2e,Wtr,Qtr,tQ,Htr,Utr,Jtr,zF,X2e,Ytr,Ktr,aQ,Ztr,ear,oar,WF,z2e,rar,tar,nQ,aar,nar,sar,QF,W2e,lar,iar,sQ,dar,car,far,HF,Q2e,mar,gar,lQ,har,par,_ar,UF,H2e,uar,bar,iQ,Far,Tar,Mar,JF,U2e,Ear,Car,dQ,war,Aar,Lar,YF,J2e,yar,xar,cQ,$ar,kar,Sar,KF,Y2e,Rar,Par,fQ,Bar,Iar,Nar,ZF,K2e,qar,jar,mQ,Dar,Gar,Oar,eT,Z2e,Var,Xar,gQ,zar,War,Qar,oT,ebe,Har,Uar,hQ,Jar,Yar,Kar,rT,obe,Zar,enr,pQ,onr,rnr,tnr,tT,rbe,anr,nnr,_Q,snr,lnr,inr,aT,tbe,dnr,cnr,uQ,fnr,mnr,gnr,nT,abe,hnr,pnr,bQ,_nr,unr,bnr,sT,nbe,vnr,Fnr,vQ,Tnr,Mnr,Enr,lT,sbe,Cnr,wnr,FQ,Anr,Lnr,ynr,iT,lbe,xnr,$nr,TQ,knr,Snr,Rnr,dT,ibe,Pnr,Bnr,MQ,Inr,Nnr,qnr,cT,dbe,jnr,Dnr,EQ,Gnr,Onr,Vnr,fT,cbe,Xnr,znr,CQ,Wnr,Qnr,Hnr,mT,fbe,Unr,Jnr,wQ,Ynr,Knr,Znr,gT,mbe,esr,osr,AQ,rsr,tsr,asr,hT,gbe,nsr,ssr,LQ,lsr,isr,dsr,pT,hbe,csr,fsr,yQ,msr,gsr,hsr,_T,pbe,psr,_sr,xQ,usr,bsr,vsr,uT,Fsr,_be,Tsr,Msr,ube,Esr,Csr,bT,hze,vd,vT,bbe,BL,wsr,vbe,Asr,pze,Go,IL,Lsr,Fd,ysr,$Q,xsr,$sr,kQ,ksr,Ssr,Rsr,NL,Psr,Fbe,Bsr,Isr,Nsr,bt,qL,qsr,Tbe,jsr,Dsr,Td,Gsr,Mbe,Osr,Vsr,SQ,Xsr,zsr,Wsr,FT,Qsr,lo,jL,Hsr,Ebe,Usr,Jsr,Wa,Ysr,Cbe,Ksr,Zsr,wbe,elr,olr,Abe,rlr,tlr,alr,Lbe,TT,ybe,nlr,slr,RQ,llr,ilr,dlr,MT,clr,xbe,flr,mlr,$be,glr,hlr,ET,_ze,Md,CT,kbe,DL,plr,Sbe,_lr,uze,Oo,GL,ulr,Ed,blr,PQ,vlr,Flr,BQ,Tlr,Mlr,Elr,OL,Clr,Rbe,wlr,Alr,Llr,vt,VL,ylr,Pbe,xlr,$lr,Cd,klr,Bbe,Slr,Rlr,IQ,Plr,Blr,Ilr,wT,Nlr,io,XL,qlr,Ibe,jlr,Dlr,Qa,Glr,Nbe,Olr,Vlr,qbe,Xlr,zlr,jbe,Wlr,Qlr,Hlr,ve,AT,Dbe,Ulr,Jlr,NQ,Ylr,Klr,Zlr,LT,Gbe,eir,oir,qQ,rir,tir,air,yT,Obe,nir,sir,jQ,lir,iir,dir,xT,Vbe,cir,fir,DQ,mir,gir,hir,Js,Xbe,pir,_ir,GQ,uir,bir,OQ,vir,Fir,Tir,$T,zbe,Mir,Eir,VQ,Cir,wir,Air,Ys,Wbe,Lir,yir,XQ,xir,$ir,zQ,kir,Sir,Rir,kT,Qbe,Pir,Bir,WQ,Iir,Nir,qir,Ft,Hbe,jir,Dir,QQ,Gir,Oir,HQ,Vir,Xir,UQ,zir,Wir,Qir,ST,Ube,Hir,Uir,JQ,Jir,Yir,Kir,RT,Jbe,Zir,edr,YQ,odr,rdr,tdr,PT,Ybe,adr,ndr,KQ,sdr,ldr,idr,BT,Kbe,ddr,cdr,ZQ,fdr,mdr,gdr,IT,Zbe,hdr,pdr,eH,_dr,udr,bdr,NT,e3e,vdr,Fdr,oH,Tdr,Mdr,Edr,qT,o3e,Cdr,wdr,rH,Adr,Ldr,ydr,jT,xdr,r3e,$dr,kdr,t3e,Sdr,Rdr,DT,bze,wd,GT,a3e,zL,Pdr,n3e,Bdr,vze,Vo,WL,Idr,Ad,Ndr,tH,qdr,jdr,aH,Ddr,Gdr,Odr,QL,Vdr,s3e,Xdr,zdr,Wdr,Tt,HL,Qdr,l3e,Hdr,Udr,Ld,Jdr,i3e,Ydr,Kdr,nH,Zdr,ecr,ocr,OT,rcr,co,UL,tcr,d3e,acr,ncr,Ha,scr,c3e,lcr,icr,f3e,dcr,ccr,m3e,fcr,mcr,gcr,g3e,VT,h3e,hcr,pcr,sH,_cr,ucr,bcr,XT,vcr,p3e,Fcr,Tcr,_3e,Mcr,Ecr,zT,Fze,yd,WT,u3e,JL,Ccr,b3e,wcr,Tze,Xo,YL,Acr,xd,Lcr,lH,ycr,xcr,iH,$cr,kcr,Scr,KL,Rcr,v3e,Pcr,Bcr,Icr,Mt,ZL,Ncr,F3e,qcr,jcr,$d,Dcr,T3e,Gcr,Ocr,dH,Vcr,Xcr,zcr,QT,Wcr,fo,ey,Qcr,M3e,Hcr,Ucr,Ua,Jcr,E3e,Ycr,Kcr,C3e,Zcr,efr,w3e,ofr,rfr,tfr,A3e,HT,L3e,afr,nfr,cH,sfr,lfr,ifr,UT,dfr,y3e,cfr,ffr,x3e,mfr,gfr,JT,Mze,kd,YT,$3e,oy,hfr,k3e,pfr,Eze,zo,ry,_fr,Sd,ufr,fH,bfr,vfr,mH,Ffr,Tfr,Mfr,ty,Efr,S3e,Cfr,wfr,Afr,Et,ay,Lfr,R3e,yfr,xfr,Rd,$fr,P3e,kfr,Sfr,gH,Rfr,Pfr,Bfr,KT,Ifr,mo,ny,Nfr,B3e,qfr,jfr,Ja,Dfr,I3e,Gfr,Ofr,N3e,Vfr,Xfr,q3e,zfr,Wfr,Qfr,Pe,ZT,j3e,Hfr,Ufr,hH,Jfr,Yfr,Kfr,e7,D3e,Zfr,emr,pH,omr,rmr,tmr,o7,G3e,amr,nmr,_H,smr,lmr,imr,r7,O3e,dmr,cmr,uH,fmr,mmr,gmr,t7,V3e,hmr,pmr,bH,_mr,umr,bmr,a7,X3e,vmr,Fmr,vH,Tmr,Mmr,Emr,n7,z3e,Cmr,wmr,FH,Amr,Lmr,ymr,s7,W3e,xmr,$mr,TH,kmr,Smr,Rmr,l7,Q3e,Pmr,Bmr,MH,Imr,Nmr,qmr,i7,jmr,H3e,Dmr,Gmr,U3e,Omr,Vmr,d7,Cze,Pd,c7,J3e,sy,Xmr,Y3e,zmr,wze,Wo,ly,Wmr,Bd,Qmr,EH,Hmr,Umr,CH,Jmr,Ymr,Kmr,iy,Zmr,K3e,egr,ogr,rgr,Ct,dy,tgr,Z3e,agr,ngr,Id,sgr,eve,lgr,igr,wH,dgr,cgr,fgr,f7,mgr,go,cy,ggr,ove,hgr,pgr,Ya,_gr,rve,ugr,bgr,tve,vgr,Fgr,ave,Tgr,Mgr,Egr,rt,m7,nve,Cgr,wgr,AH,Agr,Lgr,ygr,g7,sve,xgr,$gr,LH,kgr,Sgr,Rgr,h7,lve,Pgr,Bgr,yH,Igr,Ngr,qgr,p7,ive,jgr,Dgr,xH,Ggr,Ogr,Vgr,_7,dve,Xgr,zgr,$H,Wgr,Qgr,Hgr,u7,Ugr,cve,Jgr,Ygr,fve,Kgr,Zgr,b7,Aze,Nd,v7,mve,fy,ehr,gve,ohr,Lze,Qo,my,rhr,qd,thr,kH,ahr,nhr,SH,shr,lhr,ihr,gy,dhr,hve,chr,fhr,mhr,wt,hy,ghr,pve,hhr,phr,jd,_hr,_ve,uhr,bhr,RH,vhr,Fhr,Thr,F7,Mhr,ho,py,Ehr,uve,Chr,whr,Ka,Ahr,bve,Lhr,yhr,vve,xhr,$hr,Fve,khr,Shr,Rhr,Le,T7,Tve,Phr,Bhr,PH,Ihr,Nhr,qhr,M7,Mve,jhr,Dhr,BH,Ghr,Ohr,Vhr,E7,Eve,Xhr,zhr,IH,Whr,Qhr,Hhr,C7,Cve,Uhr,Jhr,NH,Yhr,Khr,Zhr,w7,wve,epr,opr,qH,rpr,tpr,apr,A7,Ave,npr,spr,jH,lpr,ipr,dpr,L7,Lve,cpr,fpr,DH,mpr,gpr,hpr,y7,yve,ppr,_pr,GH,upr,bpr,vpr,x7,xve,Fpr,Tpr,OH,Mpr,Epr,Cpr,$7,$ve,wpr,Apr,VH,Lpr,ypr,xpr,k7,$pr,kve,kpr,Spr,Sve,Rpr,Ppr,S7,yze,Dd,R7,Rve,_y,Bpr,Pve,Ipr,xze,Ho,uy,Npr,Gd,qpr,XH,jpr,Dpr,zH,Gpr,Opr,Vpr,by,Xpr,Bve,zpr,Wpr,Qpr,At,vy,Hpr,Ive,Upr,Jpr,Od,Ypr,Nve,Kpr,Zpr,WH,e_r,o_r,r_r,P7,t_r,po,Fy,a_r,qve,n_r,s_r,Za,l_r,jve,i_r,d_r,Dve,c_r,f_r,Gve,m_r,g_r,h_r,Ty,B7,Ove,p_r,__r,QH,u_r,b_r,v_r,I7,Vve,F_r,T_r,HH,M_r,E_r,C_r,N7,w_r,Xve,A_r,L_r,zve,y_r,x_r,q7,$ze,Vd,j7,Wve,My,$_r,Qve,k_r,kze,Uo,Ey,S_r,Xd,R_r,UH,P_r,B_r,JH,I_r,N_r,q_r,Cy,j_r,Hve,D_r,G_r,O_r,Lt,wy,V_r,Uve,X_r,z_r,zd,W_r,Jve,Q_r,H_r,YH,U_r,J_r,Y_r,D7,K_r,_o,Ay,Z_r,Yve,eur,our,en,rur,Kve,tur,aur,Zve,nur,sur,eFe,lur,iur,dur,tt,G7,oFe,cur,fur,KH,mur,gur,hur,O7,rFe,pur,_ur,ZH,uur,bur,vur,V7,tFe,Fur,Tur,eU,Mur,Eur,Cur,X7,aFe,wur,Aur,oU,Lur,yur,xur,z7,nFe,$ur,kur,rU,Sur,Rur,Pur,W7,Bur,sFe,Iur,Nur,lFe,qur,jur,Q7,Sze,Wd,H7,iFe,Ly,Dur,dFe,Gur,Rze,Jo,yy,Our,Qd,Vur,tU,Xur,zur,aU,Wur,Qur,Hur,xy,Uur,cFe,Jur,Yur,Kur,yt,$y,Zur,fFe,e1r,o1r,Hd,r1r,mFe,t1r,a1r,nU,n1r,s1r,l1r,U7,i1r,uo,ky,d1r,gFe,c1r,f1r,on,m1r,hFe,g1r,h1r,pFe,p1r,_1r,_Fe,u1r,b1r,v1r,Ud,J7,uFe,F1r,T1r,sU,M1r,E1r,C1r,Y7,bFe,w1r,A1r,lU,L1r,y1r,x1r,K7,vFe,$1r,k1r,iU,S1r,R1r,P1r,Z7,B1r,FFe,I1r,N1r,TFe,q1r,j1r,e8,Pze,Jd,o8,MFe,Sy,D1r,EFe,G1r,Bze,Yo,Ry,O1r,Yd,V1r,dU,X1r,z1r,cU,W1r,Q1r,H1r,Py,U1r,CFe,J1r,Y1r,K1r,xt,By,Z1r,wFe,e2r,o2r,Kd,r2r,AFe,t2r,a2r,fU,n2r,s2r,l2r,r8,i2r,bo,Iy,d2r,LFe,c2r,f2r,rn,m2r,yFe,g2r,h2r,xFe,p2r,_2r,$Fe,u2r,b2r,v2r,Ny,t8,kFe,F2r,T2r,mU,M2r,E2r,C2r,a8,SFe,w2r,A2r,gU,L2r,y2r,x2r,n8,$2r,RFe,k2r,S2r,PFe,R2r,P2r,s8,Ize,Zd,l8,BFe,qy,B2r,IFe,I2r,Nze,Ko,jy,N2r,ec,q2r,hU,j2r,D2r,pU,G2r,O2r,V2r,Dy,X2r,NFe,z2r,W2r,Q2r,$t,Gy,H2r,qFe,U2r,J2r,oc,Y2r,jFe,K2r,Z2r,_U,ebr,obr,rbr,i8,tbr,vo,Oy,abr,DFe,nbr,sbr,tn,lbr,GFe,ibr,dbr,OFe,cbr,fbr,VFe,mbr,gbr,hbr,XFe,d8,zFe,pbr,_br,uU,ubr,bbr,vbr,c8,Fbr,WFe,Tbr,Mbr,QFe,Ebr,Cbr,f8,qze,rc,m8,HFe,Vy,wbr,UFe,Abr,jze,Zo,Xy,Lbr,tc,ybr,bU,xbr,$br,vU,kbr,Sbr,Rbr,zy,Pbr,JFe,Bbr,Ibr,Nbr,kt,Wy,qbr,YFe,jbr,Dbr,ac,Gbr,KFe,Obr,Vbr,FU,Xbr,zbr,Wbr,g8,Qbr,Fo,Qy,Hbr,ZFe,Ubr,Jbr,an,Ybr,eTe,Kbr,Zbr,oTe,e3r,o3r,rTe,r3r,t3r,a3r,at,h8,tTe,n3r,s3r,TU,l3r,i3r,d3r,p8,aTe,c3r,f3r,MU,m3r,g3r,h3r,_8,nTe,p3r,_3r,EU,u3r,b3r,v3r,u8,sTe,F3r,T3r,CU,M3r,E3r,C3r,b8,lTe,w3r,A3r,wU,L3r,y3r,x3r,v8,$3r,iTe,k3r,S3r,dTe,R3r,P3r,F8,Dze,nc,T8,cTe,Hy,B3r,fTe,I3r,Gze,er,Uy,N3r,sc,q3r,AU,j3r,D3r,LU,G3r,O3r,V3r,Jy,X3r,mTe,z3r,W3r,Q3r,St,Yy,H3r,gTe,U3r,J3r,lc,Y3r,hTe,K3r,Z3r,yU,evr,ovr,rvr,M8,tvr,To,Ky,avr,pTe,nvr,svr,nn,lvr,_Te,ivr,dvr,uTe,cvr,fvr,bTe,mvr,gvr,hvr,vTe,E8,FTe,pvr,_vr,xU,uvr,bvr,vvr,C8,Fvr,TTe,Tvr,Mvr,MTe,Evr,Cvr,w8,Oze,ic,A8,ETe,Zy,wvr,CTe,Avr,Vze,or,ex,Lvr,dc,yvr,$U,xvr,$vr,kU,kvr,Svr,Rvr,ox,Pvr,wTe,Bvr,Ivr,Nvr,Rt,rx,qvr,ATe,jvr,Dvr,cc,Gvr,LTe,Ovr,Vvr,SU,Xvr,zvr,Wvr,L8,Qvr,xr,tx,Hvr,yTe,Uvr,Jvr,sn,Yvr,xTe,Kvr,Zvr,$Te,eFr,oFr,kTe,rFr,tFr,aFr,q,y8,STe,nFr,sFr,RU,lFr,iFr,dFr,x8,RTe,cFr,fFr,PU,mFr,gFr,hFr,$8,PTe,pFr,_Fr,BU,uFr,bFr,vFr,k8,BTe,FFr,TFr,IU,MFr,EFr,CFr,S8,ITe,wFr,AFr,NU,LFr,yFr,xFr,R8,NTe,$Fr,kFr,qU,SFr,RFr,PFr,P8,qTe,BFr,IFr,jU,NFr,qFr,jFr,B8,jTe,DFr,GFr,DU,OFr,VFr,XFr,I8,DTe,zFr,WFr,GU,QFr,HFr,UFr,N8,GTe,JFr,YFr,OU,KFr,ZFr,eTr,q8,OTe,oTr,rTr,VU,tTr,aTr,nTr,j8,VTe,sTr,lTr,XU,iTr,dTr,cTr,D8,XTe,fTr,mTr,zU,gTr,hTr,pTr,G8,zTe,_Tr,uTr,WU,bTr,vTr,FTr,O8,WTe,TTr,MTr,QU,ETr,CTr,wTr,V8,QTe,ATr,LTr,HU,yTr,xTr,$Tr,X8,HTe,kTr,STr,UU,RTr,PTr,BTr,z8,UTe,ITr,NTr,JU,qTr,jTr,DTr,Ks,JTe,GTr,OTr,YU,VTr,XTr,KU,zTr,WTr,QTr,W8,YTe,HTr,UTr,ZU,JTr,YTr,KTr,Q8,KTe,ZTr,e7r,eJ,o7r,r7r,t7r,H8,ZTe,a7r,n7r,oJ,s7r,l7r,i7r,U8,e7e,d7r,c7r,rJ,f7r,m7r,g7r,J8,o7e,h7r,p7r,tJ,_7r,u7r,b7r,Y8,r7e,v7r,F7r,aJ,T7r,M7r,E7r,K8,t7e,C7r,w7r,nJ,A7r,L7r,y7r,Z8,a7e,x7r,$7r,sJ,k7r,S7r,R7r,e9,n7e,P7r,B7r,lJ,I7r,N7r,q7r,o9,s7e,j7r,D7r,iJ,G7r,O7r,V7r,r9,l7e,X7r,z7r,dJ,W7r,Q7r,H7r,t9,i7e,U7r,J7r,cJ,Y7r,K7r,Z7r,a9,d7e,e8r,o8r,fJ,r8r,t8r,a8r,n9,c7e,n8r,s8r,mJ,l8r,i8r,d8r,s9,f7e,c8r,f8r,gJ,m8r,g8r,h8r,l9,m7e,p8r,_8r,hJ,u8r,b8r,v8r,i9,g7e,F8r,T8r,pJ,M8r,E8r,C8r,d9,h7e,w8r,A8r,_J,L8r,y8r,x8r,c9,p7e,$8r,k8r,uJ,S8r,R8r,P8r,f9,_7e,B8r,I8r,bJ,N8r,q8r,j8r,m9,u7e,D8r,G8r,vJ,O8r,V8r,X8r,g9,b7e,z8r,W8r,FJ,Q8r,H8r,U8r,h9,v7e,J8r,Y8r,TJ,K8r,Z8r,e9r,p9,F7e,o9r,r9r,MJ,t9r,a9r,n9r,_9,T7e,s9r,l9r,EJ,i9r,d9r,c9r,u9,M7e,f9r,m9r,CJ,g9r,h9r,p9r,b9,E7e,_9r,u9r,wJ,b9r,v9r,F9r,v9,C7e,T9r,M9r,AJ,E9r,C9r,w9r,F9,w7e,A9r,L9r,LJ,y9r,x9r,$9r,T9,A7e,k9r,S9r,yJ,R9r,P9r,B9r,M9,L7e,I9r,N9r,xJ,q9r,j9r,D9r,E9,Xze,fc,C9,y7e,ax,G9r,x7e,O9r,zze,rr,nx,V9r,mc,X9r,$J,z9r,W9r,kJ,Q9r,H9r,U9r,sx,J9r,$7e,Y9r,K9r,Z9r,Pt,lx,eMr,k7e,oMr,rMr,gc,tMr,S7e,aMr,nMr,SJ,sMr,lMr,iMr,w9,dMr,$r,ix,cMr,R7e,fMr,mMr,ln,gMr,P7e,hMr,pMr,B7e,_Mr,uMr,I7e,bMr,vMr,FMr,se,A9,N7e,TMr,MMr,RJ,EMr,CMr,wMr,L9,q7e,AMr,LMr,PJ,yMr,xMr,$Mr,y9,j7e,kMr,SMr,BJ,RMr,PMr,BMr,x9,D7e,IMr,NMr,IJ,qMr,jMr,DMr,$9,G7e,GMr,OMr,NJ,VMr,XMr,zMr,k9,O7e,WMr,QMr,qJ,HMr,UMr,JMr,S9,V7e,YMr,KMr,jJ,ZMr,e4r,o4r,R9,X7e,r4r,t4r,DJ,a4r,n4r,s4r,P9,z7e,l4r,i4r,GJ,d4r,c4r,f4r,B9,W7e,m4r,g4r,OJ,h4r,p4r,_4r,I9,Q7e,u4r,b4r,VJ,v4r,F4r,T4r,N9,H7e,M4r,E4r,XJ,C4r,w4r,A4r,q9,U7e,L4r,y4r,zJ,x4r,$4r,k4r,j9,J7e,S4r,R4r,WJ,P4r,B4r,I4r,D9,Y7e,N4r,q4r,QJ,j4r,D4r,G4r,G9,K7e,O4r,V4r,HJ,X4r,z4r,W4r,O9,Z7e,Q4r,H4r,UJ,U4r,J4r,Y4r,V9,e8e,K4r,Z4r,JJ,eEr,oEr,rEr,X9,o8e,tEr,aEr,YJ,nEr,sEr,lEr,z9,r8e,iEr,dEr,KJ,cEr,fEr,mEr,W9,t8e,gEr,hEr,ZJ,pEr,_Er,uEr,Q9,a8e,bEr,vEr,eY,FEr,TEr,MEr,H9,n8e,EEr,CEr,oY,wEr,AEr,LEr,U9,Wze,hc,J9,s8e,dx,yEr,l8e,xEr,Qze,tr,cx,$Er,pc,kEr,rY,SEr,REr,tY,PEr,BEr,IEr,fx,NEr,i8e,qEr,jEr,DEr,Bt,mx,GEr,d8e,OEr,VEr,_c,XEr,c8e,zEr,WEr,aY,QEr,HEr,UEr,Y9,JEr,kr,gx,YEr,f8e,KEr,ZEr,dn,eCr,m8e,oCr,rCr,g8e,tCr,aCr,h8e,nCr,sCr,lCr,Me,K9,p8e,iCr,dCr,nY,cCr,fCr,mCr,Z9,_8e,gCr,hCr,sY,pCr,_Cr,uCr,eM,u8e,bCr,vCr,lY,FCr,TCr,MCr,oM,b8e,ECr,CCr,iY,wCr,ACr,LCr,rM,v8e,yCr,xCr,dY,$Cr,kCr,SCr,tM,F8e,RCr,PCr,cY,BCr,ICr,NCr,aM,T8e,qCr,jCr,fY,DCr,GCr,OCr,nM,M8e,VCr,XCr,mY,zCr,WCr,QCr,sM,E8e,HCr,UCr,gY,JCr,YCr,KCr,lM,C8e,ZCr,e5r,hY,o5r,r5r,t5r,iM,w8e,a5r,n5r,pY,s5r,l5r,i5r,dM,A8e,d5r,c5r,_Y,f5r,m5r,g5r,cM,L8e,h5r,p5r,uY,_5r,u5r,b5r,fM,Hze,uc,mM,y8e,hx,v5r,x8e,F5r,Uze,ar,px,T5r,bc,M5r,bY,E5r,C5r,vY,w5r,A5r,L5r,_x,y5r,$8e,x5r,$5r,k5r,It,ux,S5r,k8e,R5r,P5r,vc,B5r,S8e,I5r,N5r,FY,q5r,j5r,D5r,gM,G5r,Sr,bx,O5r,R8e,V5r,X5r,cn,z5r,P8e,W5r,Q5r,B8e,H5r,U5r,I8e,J5r,Y5r,K5r,We,hM,N8e,Z5r,e0r,TY,o0r,r0r,t0r,pM,q8e,a0r,n0r,MY,s0r,l0r,i0r,Zs,j8e,d0r,c0r,EY,f0r,m0r,CY,g0r,h0r,p0r,_M,D8e,_0r,u0r,wY,b0r,v0r,F0r,uM,G8e,T0r,M0r,AY,E0r,C0r,w0r,bM,O8e,A0r,L0r,LY,y0r,x0r,$0r,vM,V8e,k0r,S0r,yY,R0r,P0r,B0r,FM,Jze,Fc,TM,X8e,vx,I0r,z8e,N0r,Yze,nr,Fx,q0r,Tc,j0r,xY,D0r,G0r,$Y,O0r,V0r,X0r,Tx,z0r,W8e,W0r,Q0r,H0r,Nt,Mx,U0r,Q8e,J0r,Y0r,Mc,K0r,H8e,Z0r,ewr,kY,owr,rwr,twr,MM,awr,Rr,Ex,nwr,U8e,swr,lwr,fn,iwr,J8e,dwr,cwr,Y8e,fwr,mwr,K8e,gwr,hwr,pwr,ie,EM,Z8e,_wr,uwr,SY,bwr,vwr,Fwr,CM,e9e,Twr,Mwr,RY,Ewr,Cwr,wwr,wM,o9e,Awr,Lwr,PY,ywr,xwr,$wr,AM,r9e,kwr,Swr,BY,Rwr,Pwr,Bwr,LM,t9e,Iwr,Nwr,IY,qwr,jwr,Dwr,yM,a9e,Gwr,Owr,NY,Vwr,Xwr,zwr,xM,n9e,Wwr,Qwr,qY,Hwr,Uwr,Jwr,$M,s9e,Ywr,Kwr,jY,Zwr,eAr,oAr,kM,l9e,rAr,tAr,DY,aAr,nAr,sAr,SM,i9e,lAr,iAr,GY,dAr,cAr,fAr,RM,d9e,mAr,gAr,OY,hAr,pAr,_Ar,PM,c9e,uAr,bAr,VY,vAr,FAr,TAr,BM,f9e,MAr,EAr,XY,CAr,wAr,AAr,IM,m9e,LAr,yAr,zY,xAr,$Ar,kAr,NM,g9e,SAr,RAr,WY,PAr,BAr,IAr,qM,h9e,NAr,qAr,QY,jAr,DAr,GAr,jM,p9e,OAr,VAr,HY,XAr,zAr,WAr,DM,_9e,QAr,HAr,UY,UAr,JAr,YAr,GM,u9e,KAr,ZAr,JY,e6r,o6r,r6r,OM,b9e,t6r,a6r,YY,n6r,s6r,l6r,VM,Kze,Ec,XM,v9e,Cx,i6r,F9e,d6r,Zze,sr,wx,c6r,Cc,f6r,KY,m6r,g6r,ZY,h6r,p6r,_6r,Ax,u6r,T9e,b6r,v6r,F6r,qt,Lx,T6r,M9e,M6r,E6r,wc,C6r,E9e,w6r,A6r,eK,L6r,y6r,x6r,zM,$6r,Pr,yx,k6r,C9e,S6r,R6r,mn,P6r,w9e,B6r,I6r,A9e,N6r,q6r,L9e,j6r,D6r,G6r,ye,WM,y9e,O6r,V6r,oK,X6r,z6r,W6r,QM,x9e,Q6r,H6r,rK,U6r,J6r,Y6r,HM,$9e,K6r,Z6r,tK,eLr,oLr,rLr,UM,k9e,tLr,aLr,aK,nLr,sLr,lLr,JM,S9e,iLr,dLr,nK,cLr,fLr,mLr,YM,R9e,gLr,hLr,sK,pLr,_Lr,uLr,KM,P9e,bLr,vLr,lK,FLr,TLr,MLr,ZM,B9e,ELr,CLr,iK,wLr,ALr,LLr,e4,I9e,yLr,xLr,dK,$Lr,kLr,SLr,o4,N9e,RLr,PLr,cK,BLr,ILr,NLr,r4,eWe,Ac,t4,q9e,xx,qLr,j9e,jLr,oWe,lr,$x,DLr,Lc,GLr,fK,OLr,VLr,mK,XLr,zLr,WLr,kx,QLr,D9e,HLr,ULr,JLr,jt,Sx,YLr,G9e,KLr,ZLr,yc,eyr,O9e,oyr,ryr,gK,tyr,ayr,nyr,a4,syr,Br,Rx,lyr,V9e,iyr,dyr,gn,cyr,X9e,fyr,myr,z9e,gyr,hyr,W9e,pyr,_yr,uyr,te,n4,Q9e,byr,vyr,hK,Fyr,Tyr,Myr,s4,H9e,Eyr,Cyr,pK,wyr,Ayr,Lyr,l4,U9e,yyr,xyr,_K,$yr,kyr,Syr,i4,J9e,Ryr,Pyr,uK,Byr,Iyr,Nyr,d4,Y9e,qyr,jyr,bK,Dyr,Gyr,Oyr,c4,K9e,Vyr,Xyr,vK,zyr,Wyr,Qyr,f4,Z9e,Hyr,Uyr,FK,Jyr,Yyr,Kyr,m4,eMe,Zyr,exr,TK,oxr,rxr,txr,g4,oMe,axr,nxr,MK,sxr,lxr,ixr,h4,rMe,dxr,cxr,EK,fxr,mxr,gxr,p4,tMe,hxr,pxr,CK,_xr,uxr,bxr,_4,aMe,vxr,Fxr,wK,Txr,Mxr,Exr,u4,nMe,Cxr,wxr,AK,Axr,Lxr,yxr,b4,sMe,xxr,$xr,LK,kxr,Sxr,Rxr,v4,lMe,Pxr,Bxr,yK,Ixr,Nxr,qxr,F4,iMe,jxr,Dxr,xK,Gxr,Oxr,Vxr,T4,dMe,Xxr,zxr,$K,Wxr,Qxr,Hxr,M4,cMe,Uxr,Jxr,kK,Yxr,Kxr,Zxr,E4,fMe,e$r,o$r,SK,r$r,t$r,a$r,C4,mMe,n$r,s$r,RK,l$r,i$r,d$r,w4,gMe,c$r,f$r,PK,m$r,g$r,h$r,A4,hMe,p$r,_$r,BK,u$r,b$r,v$r,L4,pMe,F$r,T$r,IK,M$r,E$r,C$r,y4,_Me,w$r,A$r,NK,L$r,y$r,x$r,x4,uMe,$$r,k$r,qK,S$r,R$r,P$r,$4,bMe,B$r,I$r,jK,N$r,q$r,j$r,k4,rWe,xc,S4,vMe,Px,D$r,FMe,G$r,tWe,ir,Bx,O$r,$c,V$r,DK,X$r,z$r,GK,W$r,Q$r,H$r,Ix,U$r,TMe,J$r,Y$r,K$r,Dt,Nx,Z$r,MMe,ekr,okr,kc,rkr,EMe,tkr,akr,OK,nkr,skr,lkr,R4,ikr,Ir,qx,dkr,CMe,ckr,fkr,hn,mkr,wMe,gkr,hkr,AMe,pkr,_kr,LMe,ukr,bkr,vkr,be,P4,yMe,Fkr,Tkr,VK,Mkr,Ekr,Ckr,B4,xMe,wkr,Akr,XK,Lkr,ykr,xkr,I4,$Me,$kr,kkr,zK,Skr,Rkr,Pkr,N4,kMe,Bkr,Ikr,WK,Nkr,qkr,jkr,q4,SMe,Dkr,Gkr,QK,Okr,Vkr,Xkr,j4,RMe,zkr,Wkr,HK,Qkr,Hkr,Ukr,D4,PMe,Jkr,Ykr,UK,Kkr,Zkr,eSr,G4,BMe,oSr,rSr,JK,tSr,aSr,nSr,O4,IMe,sSr,lSr,YK,iSr,dSr,cSr,V4,NMe,fSr,mSr,KK,gSr,hSr,pSr,X4,qMe,_Sr,uSr,ZK,bSr,vSr,FSr,z4,jMe,TSr,MSr,eZ,ESr,CSr,wSr,W4,DMe,ASr,LSr,oZ,ySr,xSr,$Sr,Q4,GMe,kSr,SSr,rZ,RSr,PSr,BSr,H4,OMe,ISr,NSr,tZ,qSr,jSr,DSr,U4,VMe,GSr,OSr,aZ,VSr,XSr,zSr,J4,XMe,WSr,QSr,nZ,HSr,USr,JSr,Y4,aWe,Sc,K4,zMe,jx,YSr,WMe,KSr,nWe,dr,Dx,ZSr,Rc,eRr,sZ,oRr,rRr,lZ,tRr,aRr,nRr,Gx,sRr,QMe,lRr,iRr,dRr,Gt,Ox,cRr,HMe,fRr,mRr,Pc,gRr,UMe,hRr,pRr,iZ,_Rr,uRr,bRr,Z4,vRr,Nr,Vx,FRr,JMe,TRr,MRr,pn,ERr,YMe,CRr,wRr,KMe,ARr,LRr,ZMe,yRr,xRr,$Rr,Xx,eE,e4e,kRr,SRr,dZ,RRr,PRr,BRr,oE,o4e,IRr,NRr,cZ,qRr,jRr,DRr,rE,sWe,Bc,tE,r4e,zx,GRr,t4e,ORr,lWe,cr,Wx,VRr,Ic,XRr,fZ,zRr,WRr,mZ,QRr,HRr,URr,Qx,JRr,a4e,YRr,KRr,ZRr,Ot,Hx,ePr,n4e,oPr,rPr,Nc,tPr,s4e,aPr,nPr,gZ,sPr,lPr,iPr,aE,dPr,qr,Ux,cPr,l4e,fPr,mPr,_n,gPr,i4e,hPr,pPr,d4e,_Pr,uPr,c4e,bPr,vPr,FPr,f4e,nE,m4e,TPr,MPr,hZ,EPr,CPr,wPr,sE,iWe,qc,lE,g4e,Jx,APr,h4e,LPr,dWe,fr,Yx,yPr,jc,xPr,pZ,$Pr,kPr,_Z,SPr,RPr,PPr,Kx,BPr,p4e,IPr,NPr,qPr,Vt,Zx,jPr,_4e,DPr,GPr,Dc,OPr,u4e,VPr,XPr,uZ,zPr,WPr,QPr,iE,HPr,jr,e$,UPr,b4e,JPr,YPr,un,KPr,v4e,ZPr,eBr,F4e,oBr,rBr,T4e,tBr,aBr,nBr,de,dE,M4e,sBr,lBr,bZ,iBr,dBr,cBr,cE,E4e,fBr,mBr,vZ,gBr,hBr,pBr,fE,C4e,_Br,uBr,FZ,bBr,vBr,FBr,mE,w4e,TBr,MBr,TZ,EBr,CBr,wBr,gE,A4e,ABr,LBr,MZ,yBr,xBr,$Br,hE,L4e,kBr,SBr,EZ,RBr,PBr,BBr,pE,y4e,IBr,NBr,CZ,qBr,jBr,DBr,_E,x4e,GBr,OBr,wZ,VBr,XBr,zBr,uE,$4e,WBr,QBr,AZ,HBr,UBr,JBr,bE,k4e,YBr,KBr,LZ,ZBr,eIr,oIr,vE,S4e,rIr,tIr,yZ,aIr,nIr,sIr,FE,R4e,lIr,iIr,xZ,dIr,cIr,fIr,TE,P4e,mIr,gIr,$Z,hIr,pIr,_Ir,ME,B4e,uIr,bIr,kZ,vIr,FIr,TIr,EE,I4e,MIr,EIr,SZ,CIr,wIr,AIr,CE,N4e,LIr,yIr,RZ,xIr,$Ir,kIr,wE,q4e,SIr,RIr,PZ,PIr,BIr,IIr,AE,j4e,NIr,qIr,BZ,jIr,DIr,GIr,LE,D4e,OIr,VIr,IZ,XIr,zIr,WIr,yE,G4e,QIr,HIr,NZ,UIr,JIr,YIr,xE,cWe,Gc,$E,O4e,o$,KIr,V4e,ZIr,fWe,mr,r$,eNr,Oc,oNr,qZ,rNr,tNr,jZ,aNr,nNr,sNr,t$,lNr,X4e,iNr,dNr,cNr,Xt,a$,fNr,z4e,mNr,gNr,Vc,hNr,W4e,pNr,_Nr,DZ,uNr,bNr,vNr,kE,FNr,Dr,n$,TNr,Q4e,MNr,ENr,bn,CNr,H4e,wNr,ANr,U4e,LNr,yNr,J4e,xNr,$Nr,kNr,ce,SE,Y4e,SNr,RNr,GZ,PNr,BNr,INr,RE,K4e,NNr,qNr,OZ,jNr,DNr,GNr,PE,Z4e,ONr,VNr,VZ,XNr,zNr,WNr,BE,eEe,QNr,HNr,XZ,UNr,JNr,YNr,IE,oEe,KNr,ZNr,zZ,eqr,oqr,rqr,NE,rEe,tqr,aqr,WZ,nqr,sqr,lqr,qE,tEe,iqr,dqr,QZ,cqr,fqr,mqr,jE,aEe,gqr,hqr,HZ,pqr,_qr,uqr,DE,nEe,bqr,vqr,UZ,Fqr,Tqr,Mqr,GE,sEe,Eqr,Cqr,JZ,wqr,Aqr,Lqr,OE,lEe,yqr,xqr,YZ,$qr,kqr,Sqr,VE,iEe,Rqr,Pqr,KZ,Bqr,Iqr,Nqr,XE,dEe,qqr,jqr,ZZ,Dqr,Gqr,Oqr,zE,cEe,Vqr,Xqr,eee,zqr,Wqr,Qqr,WE,fEe,Hqr,Uqr,oee,Jqr,Yqr,Kqr,QE,mEe,Zqr,ejr,ree,ojr,rjr,tjr,HE,gEe,ajr,njr,tee,sjr,ljr,ijr,UE,hEe,djr,cjr,aee,fjr,mjr,gjr,JE,pEe,hjr,pjr,nee,_jr,ujr,bjr,YE,_Ee,vjr,Fjr,see,Tjr,Mjr,Ejr,KE,mWe,Xc,ZE,uEe,s$,Cjr,bEe,wjr,gWe,gr,l$,Ajr,zc,Ljr,lee,yjr,xjr,iee,$jr,kjr,Sjr,i$,Rjr,vEe,Pjr,Bjr,Ijr,zt,d$,Njr,FEe,qjr,jjr,Wc,Djr,TEe,Gjr,Ojr,dee,Vjr,Xjr,zjr,eC,Wjr,Gr,c$,Qjr,MEe,Hjr,Ujr,vn,Jjr,EEe,Yjr,Kjr,CEe,Zjr,eDr,wEe,oDr,rDr,tDr,AEe,oC,LEe,aDr,nDr,cee,sDr,lDr,iDr,rC,hWe,Qc,tC,yEe,f$,dDr,xEe,cDr,pWe,hr,m$,fDr,Hc,mDr,fee,gDr,hDr,mee,pDr,_Dr,uDr,g$,bDr,$Ee,vDr,FDr,TDr,Wt,h$,MDr,kEe,EDr,CDr,Uc,wDr,SEe,ADr,LDr,gee,yDr,xDr,$Dr,aC,kDr,Or,p$,SDr,REe,RDr,PDr,Fn,BDr,PEe,IDr,NDr,BEe,qDr,jDr,IEe,DDr,GDr,ODr,NEe,nC,qEe,VDr,XDr,hee,zDr,WDr,QDr,sC,_We,Jc,lC,jEe,_$,HDr,DEe,UDr,uWe,pr,u$,JDr,Yc,YDr,pee,KDr,ZDr,_ee,eGr,oGr,rGr,b$,tGr,GEe,aGr,nGr,sGr,Qt,v$,lGr,OEe,iGr,dGr,Kc,cGr,VEe,fGr,mGr,uee,gGr,hGr,pGr,iC,_Gr,Vr,F$,uGr,XEe,bGr,vGr,Tn,FGr,zEe,TGr,MGr,WEe,EGr,CGr,QEe,wGr,AGr,LGr,oe,dC,HEe,yGr,xGr,bee,$Gr,kGr,SGr,cC,UEe,RGr,PGr,vee,BGr,IGr,NGr,fC,JEe,qGr,jGr,Fee,DGr,GGr,OGr,mC,YEe,VGr,XGr,Tee,zGr,WGr,QGr,gC,KEe,HGr,UGr,Mee,JGr,YGr,KGr,hC,ZEe,ZGr,eOr,Eee,oOr,rOr,tOr,pC,eCe,aOr,nOr,Cee,sOr,lOr,iOr,_C,oCe,dOr,cOr,wee,fOr,mOr,gOr,uC,rCe,hOr,pOr,Aee,_Or,uOr,bOr,bC,tCe,vOr,FOr,Lee,TOr,MOr,EOr,vC,aCe,COr,wOr,yee,AOr,LOr,yOr,FC,nCe,xOr,$Or,xee,kOr,SOr,ROr,TC,sCe,POr,BOr,$ee,IOr,NOr,qOr,MC,lCe,jOr,DOr,kee,GOr,OOr,VOr,EC,iCe,XOr,zOr,See,WOr,QOr,HOr,CC,dCe,UOr,JOr,Ree,YOr,KOr,ZOr,wC,cCe,eVr,oVr,Pee,rVr,tVr,aVr,AC,fCe,nVr,sVr,Bee,lVr,iVr,dVr,LC,mCe,cVr,fVr,Iee,mVr,gVr,hVr,yC,gCe,pVr,_Vr,Nee,uVr,bVr,vVr,xC,hCe,FVr,TVr,qee,MVr,EVr,CVr,$C,pCe,wVr,AVr,jee,LVr,yVr,xVr,kC,_Ce,$Vr,kVr,Dee,SVr,RVr,PVr,SC,uCe,BVr,IVr,Gee,NVr,qVr,jVr,RC,bCe,DVr,GVr,Oee,OVr,VVr,XVr,PC,vCe,zVr,WVr,Vee,QVr,HVr,UVr,BC,FCe,JVr,YVr,Xee,KVr,ZVr,eXr,IC,bWe,Zc,NC,TCe,T$,oXr,MCe,rXr,vWe,_r,M$,tXr,ef,aXr,zee,nXr,sXr,Wee,lXr,iXr,dXr,E$,cXr,ECe,fXr,mXr,gXr,Ht,C$,hXr,CCe,pXr,_Xr,of,uXr,wCe,bXr,vXr,Qee,FXr,TXr,MXr,qC,EXr,Xr,w$,CXr,ACe,wXr,AXr,Mn,LXr,LCe,yXr,xXr,yCe,$Xr,kXr,xCe,SXr,RXr,PXr,xe,jC,$Ce,BXr,IXr,Hee,NXr,qXr,jXr,DC,kCe,DXr,GXr,Uee,OXr,VXr,XXr,GC,SCe,zXr,WXr,Jee,QXr,HXr,UXr,OC,RCe,JXr,YXr,Yee,KXr,ZXr,ezr,VC,PCe,ozr,rzr,Kee,tzr,azr,nzr,XC,BCe,szr,lzr,Zee,izr,dzr,czr,zC,ICe,fzr,mzr,eoe,gzr,hzr,pzr,WC,NCe,_zr,uzr,ooe,bzr,vzr,Fzr,QC,qCe,Tzr,Mzr,roe,Ezr,Czr,wzr,HC,jCe,Azr,Lzr,toe,yzr,xzr,$zr,UC,FWe,rf,JC,DCe,A$,kzr,GCe,Szr,TWe,ur,L$,Rzr,tf,Pzr,aoe,Bzr,Izr,noe,Nzr,qzr,jzr,y$,Dzr,OCe,Gzr,Ozr,Vzr,Ut,x$,Xzr,VCe,zzr,Wzr,af,Qzr,XCe,Hzr,Uzr,soe,Jzr,Yzr,Kzr,YC,Zzr,zr,$$,eWr,zCe,oWr,rWr,En,tWr,WCe,aWr,nWr,QCe,sWr,lWr,HCe,iWr,dWr,cWr,Ee,KC,UCe,fWr,mWr,loe,gWr,hWr,pWr,ZC,JCe,_Wr,uWr,ioe,bWr,vWr,FWr,e5,YCe,TWr,MWr,doe,EWr,CWr,wWr,o5,KCe,AWr,LWr,coe,yWr,xWr,$Wr,r5,ZCe,kWr,SWr,foe,RWr,PWr,BWr,t5,e5e,IWr,NWr,moe,qWr,jWr,DWr,a5,o5e,GWr,OWr,goe,VWr,XWr,zWr,n5,r5e,WWr,QWr,hoe,HWr,UWr,JWr,s5,t5e,YWr,KWr,poe,ZWr,eQr,oQr,l5,a5e,rQr,tQr,_oe,aQr,nQr,sQr,i5,n5e,lQr,iQr,uoe,dQr,cQr,fQr,d5,s5e,mQr,gQr,boe,hQr,pQr,_Qr,c5,l5e,uQr,bQr,voe,vQr,FQr,TQr,f5,MWe,nf,m5,i5e,k$,MQr,d5e,EQr,EWe,br,S$,CQr,sf,wQr,Foe,AQr,LQr,Toe,yQr,xQr,$Qr,R$,kQr,c5e,SQr,RQr,PQr,Jt,P$,BQr,f5e,IQr,NQr,lf,qQr,m5e,jQr,DQr,Moe,GQr,OQr,VQr,g5,XQr,Wr,B$,zQr,g5e,WQr,QQr,Cn,HQr,h5e,UQr,JQr,p5e,YQr,KQr,_5e,ZQr,eHr,oHr,$e,h5,u5e,rHr,tHr,Eoe,aHr,nHr,sHr,p5,b5e,lHr,iHr,Coe,dHr,cHr,fHr,_5,v5e,mHr,gHr,woe,hHr,pHr,_Hr,u5,F5e,uHr,bHr,Aoe,vHr,FHr,THr,b5,T5e,MHr,EHr,Loe,CHr,wHr,AHr,v5,M5e,LHr,yHr,yoe,xHr,$Hr,kHr,F5,E5e,SHr,RHr,xoe,PHr,BHr,IHr,T5,C5e,NHr,qHr,$oe,jHr,DHr,GHr,M5,w5e,OHr,VHr,koe,XHr,zHr,WHr,E5,A5e,QHr,HHr,Soe,UHr,JHr,YHr,C5,CWe,df,w5,L5e,I$,KHr,y5e,ZHr,wWe,vr,N$,eUr,cf,oUr,Roe,rUr,tUr,Poe,aUr,nUr,sUr,q$,lUr,x5e,iUr,dUr,cUr,Yt,j$,fUr,$5e,mUr,gUr,ff,hUr,k5e,pUr,_Ur,Boe,uUr,bUr,vUr,A5,FUr,Qr,D$,TUr,S5e,MUr,EUr,wn,CUr,R5e,wUr,AUr,P5e,LUr,yUr,B5e,xUr,$Ur,kUr,ke,L5,I5e,SUr,RUr,Ioe,PUr,BUr,IUr,y5,N5e,NUr,qUr,Noe,jUr,DUr,GUr,x5,q5e,OUr,VUr,qoe,XUr,zUr,WUr,$5,j5e,QUr,HUr,joe,UUr,JUr,YUr,k5,D5e,KUr,ZUr,Doe,eJr,oJr,rJr,S5,G5e,tJr,aJr,Goe,nJr,sJr,lJr,R5,O5e,iJr,dJr,Ooe,cJr,fJr,mJr,P5,V5e,gJr,hJr,Voe,pJr,_Jr,uJr,B5,X5e,bJr,vJr,Xoe,FJr,TJr,MJr,I5,z5e,EJr,CJr,zoe,wJr,AJr,LJr,N5,AWe,mf,q5,W5e,G$,yJr,Q5e,xJr,LWe,Fr,O$,$Jr,gf,kJr,Woe,SJr,RJr,Qoe,PJr,BJr,IJr,V$,NJr,H5e,qJr,jJr,DJr,Kt,X$,GJr,U5e,OJr,VJr,hf,XJr,J5e,zJr,WJr,Hoe,QJr,HJr,UJr,j5,JJr,Hr,z$,YJr,Y5e,KJr,ZJr,An,eYr,K5e,oYr,rYr,Z5e,tYr,aYr,e0e,nYr,sYr,lYr,Se,D5,o0e,iYr,dYr,Uoe,cYr,fYr,mYr,G5,r0e,gYr,hYr,Joe,pYr,_Yr,uYr,O5,t0e,bYr,vYr,Yoe,FYr,TYr,MYr,V5,a0e,EYr,CYr,Koe,wYr,AYr,LYr,X5,n0e,yYr,xYr,Zoe,$Yr,kYr,SYr,z5,s0e,RYr,PYr,ere,BYr,IYr,NYr,W5,l0e,qYr,jYr,ore,DYr,GYr,OYr,Q5,i0e,VYr,XYr,rre,zYr,WYr,QYr,H5,d0e,HYr,UYr,tre,JYr,YYr,KYr,U5,c0e,ZYr,eKr,are,oKr,rKr,tKr,J5,yWe,pf,Y5,f0e,W$,aKr,m0e,nKr,xWe,Tr,Q$,sKr,_f,lKr,nre,iKr,dKr,sre,cKr,fKr,mKr,H$,gKr,g0e,hKr,pKr,_Kr,Zt,U$,uKr,h0e,bKr,vKr,uf,FKr,p0e,TKr,MKr,lre,EKr,CKr,wKr,K5,AKr,Ur,J$,LKr,_0e,yKr,xKr,Ln,$Kr,u0e,kKr,SKr,b0e,RKr,PKr,v0e,BKr,IKr,NKr,Re,Z5,F0e,qKr,jKr,ire,DKr,GKr,OKr,e0,T0e,VKr,XKr,dre,zKr,WKr,QKr,o0,M0e,HKr,UKr,cre,JKr,YKr,KKr,r0,E0e,ZKr,eZr,fre,oZr,rZr,tZr,t0,C0e,aZr,nZr,mre,sZr,lZr,iZr,a0,w0e,dZr,cZr,gre,fZr,mZr,gZr,n0,A0e,hZr,pZr,hre,_Zr,uZr,bZr,s0,L0e,vZr,FZr,pre,TZr,MZr,EZr,l0,y0e,CZr,wZr,_re,AZr,LZr,yZr,i0,x0e,xZr,$Zr,ure,kZr,SZr,RZr,d0,$We,bf,c0,$0e,Y$,PZr,k0e,BZr,kWe,Mr,K$,IZr,vf,NZr,bre,qZr,jZr,vre,DZr,GZr,OZr,Z$,VZr,S0e,XZr,zZr,WZr,ea,ek,QZr,R0e,HZr,UZr,Ff,JZr,P0e,YZr,KZr,Fre,ZZr,eet,oet,f0,ret,Jr,ok,tet,B0e,aet,net,yn,set,I0e,iet,det,N0e,cet,fet,q0e,met,get,het,Ve,m0,j0e,pet,_et,Tre,uet,bet,vet,g0,D0e,Fet,Tet,Mre,Met,Eet,Cet,h0,G0e,wet,Aet,Ere,Let,yet,xet,p0,O0e,$et,ket,Cre,Set,Ret,Pet,_0,V0e,Bet,Iet,wre,Net,qet,jet,u0,X0e,Det,Get,Are,Oet,Vet,Xet,b0,z0e,zet,Wet,Lre,Qet,Het,Uet,v0,W0e,Jet,Yet,yre,Ket,Zet,eot,F0,SWe,Tf,T0,Q0e,rk,oot,H0e,rot,RWe,Er,tk,tot,Mf,aot,xre,not,sot,$re,lot,iot,dot,ak,cot,U0e,fot,mot,got,oa,nk,hot,J0e,pot,_ot,Ef,uot,Y0e,bot,vot,kre,Fot,Tot,Mot,M0,Eot,Yr,sk,Cot,K0e,wot,Aot,xn,Lot,Z0e,yot,xot,ewe,$ot,kot,owe,Sot,Rot,Pot,Xe,E0,rwe,Bot,Iot,Sre,Not,qot,jot,C0,twe,Dot,Got,Rre,Oot,Vot,Xot,w0,awe,zot,Wot,Pre,Qot,Hot,Uot,A0,nwe,Jot,Yot,Bre,Kot,Zot,ert,L0,swe,ort,rrt,Ire,trt,art,nrt,y0,lwe,srt,lrt,Nre,irt,drt,crt,x0,iwe,frt,mrt,qre,grt,hrt,prt,$0,dwe,_rt,urt,jre,brt,vrt,Frt,k0,PWe,Cf,S0,cwe,lk,Trt,fwe,Mrt,BWe,Cr,ik,Ert,wf,Crt,Dre,wrt,Art,Gre,Lrt,yrt,xrt,dk,$rt,mwe,krt,Srt,Rrt,ra,ck,Prt,gwe,Brt,Irt,Af,Nrt,hwe,qrt,jrt,Ore,Drt,Grt,Ort,R0,Vrt,Kr,fk,Xrt,pwe,zrt,Wrt,$n,Qrt,_we,Hrt,Urt,uwe,Jrt,Yrt,bwe,Krt,Zrt,ett,vwe,P0,Fwe,ott,rtt,Vre,ttt,att,ntt,B0,IWe,Lf,I0,Twe,mk,stt,Mwe,ltt,NWe,wr,gk,itt,yf,dtt,Xre,ctt,ftt,zre,mtt,gtt,htt,hk,ptt,Ewe,_tt,utt,btt,ta,pk,vtt,Cwe,Ftt,Ttt,xf,Mtt,wwe,Ett,Ctt,Wre,wtt,Att,Ltt,N0,ytt,Zr,_k,xtt,Awe,$tt,ktt,kn,Stt,Lwe,Rtt,Ptt,ywe,Btt,Itt,xwe,Ntt,qtt,jtt,uk,q0,$we,Dtt,Gtt,Qre,Ott,Vtt,Xtt,j0,kwe,ztt,Wtt,Hre,Qtt,Htt,Utt,D0,qWe,$f,G0,Swe,bk,Jtt,Rwe,Ytt,jWe,Ar,vk,Ktt,kf,Ztt,Ure,eat,oat,Jre,rat,tat,aat,Fk,nat,Pwe,sat,lat,iat,aa,Tk,dat,Bwe,cat,fat,Sf,mat,Iwe,gat,hat,Yre,pat,_at,uat,O0,bat,et,Mk,vat,Nwe,Fat,Tat,Sn,Mat,qwe,Eat,Cat,jwe,wat,Aat,Dwe,Lat,yat,xat,Gwe,V0,Owe,$at,kat,Kre,Sat,Rat,Pat,X0,DWe;return c=new re({}),Sa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),g6=new re({}),h6=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Gf=new Bat({props:{warning:!0,$$slots:{default:[PHt]},$$scope:{ctx:$}}}),p6=new re({}),_6=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/configuration_auto.py#L614"}}),v6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/configuration_auto.py#L637"}}),eh=new I({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[BHt]},$$scope:{ctx:$}}}),F6=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/configuration_auto.py#L760"}}),T6=new re({}),M6=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/tokenization_auto.py#L411"}}),w6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17938/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/tokenization_auto.py#L425"}}),Ih=new I({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[IHt]},$$scope:{ctx:$}}}),A6=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/tokenization_auto.py#L624"}}),L6=new re({}),y6=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/feature_extraction_auto.py#L196"}}),k6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17938/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/feature_extraction_auto.py#L210"}}),Fp=new Bat({props:{$$slots:{default:[NHt]},$$scope:{ctx:$}}}),Tp=new I({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[qHt]},$$scope:{ctx:$}}}),S6=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/feature_extraction_auto.py#L337"}}),R6=new re({}),P6=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/processing_auto.py#L90"}}),N6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/processing_auto.py#L104"}}),Vp=new Bat({props:{$$slots:{default:[jHt]},$$scope:{ctx:$}}}),Xp=new I({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[DHt]},$$scope:{ctx:$}}}),q6=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/processing_auto.py#L257"}}),j6=new re({}),D6=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L787"}}),O6=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),Qp=new I({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[GHt]},$$scope:{ctx:$}}}),V6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),Zu=new I({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[OHt]},$$scope:{ctx:$}}}),X6=new re({}),z6=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L794"}}),Q6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),o1=new I({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[VHt]},$$scope:{ctx:$}}}),H6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),H1=new I({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[XHt]},$$scope:{ctx:$}}}),U6=new re({}),J6=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L809"}}),K6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),J1=new I({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[zHt]},$$scope:{ctx:$}}}),Z6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),q2=new I({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[WHt]},$$scope:{ctx:$}}}),eL=new re({}),oL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L816"}}),tL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),D2=new I({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[QHt]},$$scope:{ctx:$}}}),aL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),Ab=new I({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[HHt]},$$scope:{ctx:$}}}),nL=new re({}),sL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L823"}}),iL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),yb=new I({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[UHt]},$$scope:{ctx:$}}}),dL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),Ub=new I({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[JHt]},$$scope:{ctx:$}}}),cL=new re({}),fL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L832"}}),gL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),Yb=new I({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[YHt]},$$scope:{ctx:$}}}),hL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),J3=new I({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[KHt]},$$scope:{ctx:$}}}),pL=new re({}),_L=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L877"}}),bL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),K3=new I({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[ZHt]},$$scope:{ctx:$}}}),vL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),$v=new I({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[eUt]},$$scope:{ctx:$}}}),FL=new re({}),TL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L884"}}),EL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),Sv=new I({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[oUt]},$$scope:{ctx:$}}}),CL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),Dv=new I({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[rUt]},$$scope:{ctx:$}}}),wL=new re({}),AL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L870"}}),yL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),Ov=new I({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[tUt]},$$scope:{ctx:$}}}),xL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),AF=new I({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[aUt]},$$scope:{ctx:$}}}),$L=new re({}),kL=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L841"}}),RL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),yF=new I({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[nUt]},$$scope:{ctx:$}}}),PL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),bT=new I({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[sUt]},$$scope:{ctx:$}}}),BL=new re({}),IL=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L848"}}),qL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),FT=new I({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[lUt]},$$scope:{ctx:$}}}),jL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),ET=new I({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[iUt]},$$scope:{ctx:$}}}),DL=new re({}),GL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L893"}}),VL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17938/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),wT=new I({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[dUt]},$$scope:{ctx:$}}}),XL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),DT=new I({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[cUt]},$$scope:{ctx:$}}}),zL=new re({}),WL=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L932"}}),HL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),OT=new I({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[fUt]},$$scope:{ctx:$}}}),UL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),zT=new I({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[mUt]},$$scope:{ctx:$}}}),JL=new re({}),YL=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L859"}}),ZL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),QT=new I({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[gUt]},$$scope:{ctx:$}}}),ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),JT=new I({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[hUt]},$$scope:{ctx:$}}}),oy=new re({}),ry=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L939"}}),ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),KT=new I({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[pUt]},$$scope:{ctx:$}}}),ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),d7=new I({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[_Ut]},$$scope:{ctx:$}}}),sy=new re({}),ly=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L962"}}),dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),f7=new I({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[uUt]},$$scope:{ctx:$}}}),cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),b7=new I({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[bUt]},$$scope:{ctx:$}}}),fy=new re({}),my=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L946"}}),hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),F7=new I({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[vUt]},$$scope:{ctx:$}}}),py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),S7=new I({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[FUt]},$$scope:{ctx:$}}}),_y=new re({}),uy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L953"}}),vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),P7=new I({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[TUt]},$$scope:{ctx:$}}}),Fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),q7=new I({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[MUt]},$$scope:{ctx:$}}}),My=new re({}),Ey=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L971"}}),wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),D7=new I({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[EUt]},$$scope:{ctx:$}}}),Ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),Q7=new I({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[CUt]},$$scope:{ctx:$}}}),Ly=new re({}),yy=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L978"}}),$y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),U7=new I({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[wUt]},$$scope:{ctx:$}}}),ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),e8=new I({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[AUt]},$$scope:{ctx:$}}}),Sy=new re({}),Ry=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L925"}}),By=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),r8=new I({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[LUt]},$$scope:{ctx:$}}}),Iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),s8=new I({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[yUt]},$$scope:{ctx:$}}}),qy=new re({}),jy=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L900"}}),Gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),i8=new I({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[xUt]},$$scope:{ctx:$}}}),Oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),f8=new I({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[$Ut]},$$scope:{ctx:$}}}),Vy=new re({}),Xy=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L907"}}),Wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),g8=new I({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[kUt]},$$scope:{ctx:$}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),F8=new I({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[SUt]},$$scope:{ctx:$}}}),Hy=new re({}),Uy=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L916"}}),Yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),M8=new I({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[RUt]},$$scope:{ctx:$}}}),Ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),w8=new I({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[PUt]},$$scope:{ctx:$}}}),Zy=new re({}),ex=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),rx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),L8=new I({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[BUt]},$$scope:{ctx:$}}}),tx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),E9=new I({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[IUt]},$$scope:{ctx:$}}}),ax=new re({}),nx=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L420"}}),lx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),w9=new I({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[NUt]},$$scope:{ctx:$}}}),ix=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),U9=new I({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[qUt]},$$scope:{ctx:$}}}),dx=new re({}),cx=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),mx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),Y9=new I({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[jUt]},$$scope:{ctx:$}}}),gx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),fM=new I({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[DUt]},$$scope:{ctx:$}}}),hx=new re({}),px=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L451"}}),ux=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/pr_17938/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),gM=new I({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[GUt]},$$scope:{ctx:$}}}),bx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),FM=new I({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[OUt]},$$scope:{ctx:$}}}),vx=new re({}),Fx=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),Mx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),MM=new I({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[VUt]},$$scope:{ctx:$}}}),Ex=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),VM=new I({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[XUt]},$$scope:{ctx:$}}}),Cx=new re({}),wx=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L483"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),zM=new I({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[zUt]},$$scope:{ctx:$}}}),yx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),r4=new I({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[WUt]},$$scope:{ctx:$}}}),xx=new re({}),$x=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),Sx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),a4=new I({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[QUt]},$$scope:{ctx:$}}}),Rx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),k4=new I({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[HUt]},$$scope:{ctx:$}}}),Px=new re({}),Bx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),Nx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),R4=new I({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[UUt]},$$scope:{ctx:$}}}),qx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),Y4=new I({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[JUt]},$$scope:{ctx:$}}}),jx=new re({}),Dx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L535"}}),Ox=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),Z4=new I({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[YUt]},$$scope:{ctx:$}}}),Vx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),rE=new I({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[KUt]},$$scope:{ctx:$}}}),zx=new re({}),Wx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L508"}}),Hx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),aE=new I({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[ZUt]},$$scope:{ctx:$}}}),Ux=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),sE=new I({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[eJt]},$$scope:{ctx:$}}}),Jx=new re({}),Yx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L519"}}),Zx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),iE=new I({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[oJt]},$$scope:{ctx:$}}}),e$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),xE=new I({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[rJt]},$$scope:{ctx:$}}}),o$=new re({}),r$=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),a$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),kE=new I({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[tJt]},$$scope:{ctx:$}}}),n$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),KE=new I({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[aJt]},$$scope:{ctx:$}}}),s$=new re({}),l$=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),d$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),eC=new I({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[nJt]},$$scope:{ctx:$}}}),c$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),rC=new I({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[sJt]},$$scope:{ctx:$}}}),f$=new re({}),m$=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L544"}}),h$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),aC=new I({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[lJt]},$$scope:{ctx:$}}}),p$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),sC=new I({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[iJt]},$$scope:{ctx:$}}}),_$=new re({}),u$=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),v$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),iC=new I({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[dJt]},$$scope:{ctx:$}}}),F$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),IC=new I({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[cJt]},$$scope:{ctx:$}}}),T$=new re({}),M$=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),C$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),qC=new I({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[fJt]},$$scope:{ctx:$}}}),w$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),UC=new I({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[mJt]},$$scope:{ctx:$}}}),A$=new re({}),L$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),x$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),YC=new I({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[gJt]},$$scope:{ctx:$}}}),$$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),f5=new I({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[hJt]},$$scope:{ctx:$}}}),k$=new re({}),S$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),P$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),g5=new I({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[pJt]},$$scope:{ctx:$}}}),B$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),C5=new I({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[_Jt]},$$scope:{ctx:$}}}),I$=new re({}),N$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),j$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),A5=new I({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[uJt]},$$scope:{ctx:$}}}),D$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),N5=new I({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[bJt]},$$scope:{ctx:$}}}),G$=new re({}),O$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),X$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),j5=new I({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[vJt]},$$scope:{ctx:$}}}),z$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),J5=new I({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[FJt]},$$scope:{ctx:$}}}),W$=new re({}),Q$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),U$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),K5=new I({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[TJt]},$$scope:{ctx:$}}}),J$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),d0=new I({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[MJt]},$$scope:{ctx:$}}}),Y$=new re({}),K$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),ek=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),f0=new I({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[EJt]},$$scope:{ctx:$}}}),ok=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),F0=new I({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[CJt]},$$scope:{ctx:$}}}),rk=new re({}),tk=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),nk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),M0=new I({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[wJt]},$$scope:{ctx:$}}}),sk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),k0=new I({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[AJt]},$$scope:{ctx:$}}}),lk=new re({}),ik=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),ck=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),R0=new I({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[LJt]},$$scope:{ctx:$}}}),fk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),B0=new I({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[yJt]},$$scope:{ctx:$}}}),mk=new re({}),gk=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),pk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),N0=new I({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[xJt]},$$scope:{ctx:$}}}),_k=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),D0=new I({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[$Jt]},$$scope:{ctx:$}}}),bk=new re({}),vk=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),Tk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),O0=new I({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[kJt]},$$scope:{ctx:$}}}),Mk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),X0=new I({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[SJt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(c.$$.fragment),h=l(),Co=a("span"),xi=o("Auto Classes"),If=l(),lt=a("p"),$i=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ki=a("code"),d6=o("from_pretrained()"),Nf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),Si=o("Instantiating one of "),Pn=a("a"),c6=o("AutoConfig"),Bn=o(", "),In=a("a"),f6=o("AutoModel"),Ri=o(`, and
`),Nn=a("a"),m6=o("AutoTokenizer"),Pi=o(" will directly create a class of the relevant architecture. For instance"),qf=l(),F(Sa.$$.fragment),He=l(),Ae=a("p"),WS=o("will create a model that is an instance of "),Bi=a("a"),QS=o("BertModel"),HS=o("."),wo=l(),Ra=a("p"),US=o("There is one class of "),jf=a("code"),JS=o("AutoModel"),JHe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),BXe=l(),Ii=a("h2"),Df=a("a"),Qae=a("span"),F(g6.$$.fragment),YHe=l(),Hae=a("span"),KHe=o("Extending the Auto Classes"),IXe=l(),qn=a("p"),ZHe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Uae=a("code"),eUe=o("NewModel"),oUe=o(", make sure you have a "),Jae=a("code"),rUe=o("NewModelConfig"),tUe=o(` then you can add those to the auto
classes like this:`),NXe=l(),F(h6.$$.fragment),qXe=l(),YS=a("p"),aUe=o("You will then be able to use the auto classes like you would usually do!"),jXe=l(),F(Gf.$$.fragment),DXe=l(),Ni=a("h2"),Of=a("a"),Yae=a("span"),F(p6.$$.fragment),nUe=l(),Kae=a("span"),sUe=o("AutoConfig"),GXe=l(),Ao=a("div"),F(_6.$$.fragment),lUe=l(),u6=a("p"),iUe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),KS=a("a"),dUe=o("from_pretrained()"),cUe=o(" class method."),fUe=l(),b6=a("p"),mUe=o("This class cannot be instantiated directly using "),Zae=a("code"),gUe=o("__init__()"),hUe=o(" (throws an error)."),pUe=l(),Lr=a("div"),F(v6.$$.fragment),_Ue=l(),ene=a("p"),uUe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),bUe=l(),qi=a("p"),vUe=o("The configuration class to instantiate is selected based on the "),one=a("code"),FUe=o("model_type"),TUe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),rne=a("code"),MUe=o("pretrained_model_name_or_path"),EUe=o(":"),CUe=l(),A=a("ul"),Vf=a("li"),tne=a("strong"),wUe=o("albert"),AUe=o(" \u2014 "),ZS=a("a"),LUe=o("AlbertConfig"),yUe=o(" (ALBERT model)"),xUe=l(),Xf=a("li"),ane=a("strong"),$Ue=o("bart"),kUe=o(" \u2014 "),eR=a("a"),SUe=o("BartConfig"),RUe=o(" (BART model)"),PUe=l(),zf=a("li"),nne=a("strong"),BUe=o("beit"),IUe=o(" \u2014 "),oR=a("a"),NUe=o("BeitConfig"),qUe=o(" (BEiT model)"),jUe=l(),Wf=a("li"),sne=a("strong"),DUe=o("bert"),GUe=o(" \u2014 "),rR=a("a"),OUe=o("BertConfig"),VUe=o(" (BERT model)"),XUe=l(),Qf=a("li"),lne=a("strong"),zUe=o("bert-generation"),WUe=o(" \u2014 "),tR=a("a"),QUe=o("BertGenerationConfig"),HUe=o(" (Bert Generation model)"),UUe=l(),Hf=a("li"),ine=a("strong"),JUe=o("big_bird"),YUe=o(" \u2014 "),aR=a("a"),KUe=o("BigBirdConfig"),ZUe=o(" (BigBird model)"),eJe=l(),Uf=a("li"),dne=a("strong"),oJe=o("bigbird_pegasus"),rJe=o(" \u2014 "),nR=a("a"),tJe=o("BigBirdPegasusConfig"),aJe=o(" (BigBird-Pegasus model)"),nJe=l(),Jf=a("li"),cne=a("strong"),sJe=o("blenderbot"),lJe=o(" \u2014 "),sR=a("a"),iJe=o("BlenderbotConfig"),dJe=o(" (Blenderbot model)"),cJe=l(),Yf=a("li"),fne=a("strong"),fJe=o("blenderbot-small"),mJe=o(" \u2014 "),lR=a("a"),gJe=o("BlenderbotSmallConfig"),hJe=o(" (BlenderbotSmall model)"),pJe=l(),Kf=a("li"),mne=a("strong"),_Je=o("bloom"),uJe=o(" \u2014 "),iR=a("a"),bJe=o("BloomConfig"),vJe=o(" (BLOOM model)"),FJe=l(),Zf=a("li"),gne=a("strong"),TJe=o("camembert"),MJe=o(" \u2014 "),dR=a("a"),EJe=o("CamembertConfig"),CJe=o(" (CamemBERT model)"),wJe=l(),em=a("li"),hne=a("strong"),AJe=o("canine"),LJe=o(" \u2014 "),cR=a("a"),yJe=o("CanineConfig"),xJe=o(" (CANINE model)"),$Je=l(),om=a("li"),pne=a("strong"),kJe=o("clip"),SJe=o(" \u2014 "),fR=a("a"),RJe=o("CLIPConfig"),PJe=o(" (CLIP model)"),BJe=l(),rm=a("li"),_ne=a("strong"),IJe=o("codegen"),NJe=o(" \u2014 "),mR=a("a"),qJe=o("CodeGenConfig"),jJe=o(" (CodeGen model)"),DJe=l(),tm=a("li"),une=a("strong"),GJe=o("convbert"),OJe=o(" \u2014 "),gR=a("a"),VJe=o("ConvBertConfig"),XJe=o(" (ConvBERT model)"),zJe=l(),am=a("li"),bne=a("strong"),WJe=o("convnext"),QJe=o(" \u2014 "),hR=a("a"),HJe=o("ConvNextConfig"),UJe=o(" (ConvNeXT model)"),JJe=l(),nm=a("li"),vne=a("strong"),YJe=o("ctrl"),KJe=o(" \u2014 "),pR=a("a"),ZJe=o("CTRLConfig"),eYe=o(" (CTRL model)"),oYe=l(),sm=a("li"),Fne=a("strong"),rYe=o("cvt"),tYe=o(" \u2014 "),_R=a("a"),aYe=o("CvtConfig"),nYe=o(" (CvT model)"),sYe=l(),lm=a("li"),Tne=a("strong"),lYe=o("data2vec-audio"),iYe=o(" \u2014 "),uR=a("a"),dYe=o("Data2VecAudioConfig"),cYe=o(" (Data2VecAudio model)"),fYe=l(),im=a("li"),Mne=a("strong"),mYe=o("data2vec-text"),gYe=o(" \u2014 "),bR=a("a"),hYe=o("Data2VecTextConfig"),pYe=o(" (Data2VecText model)"),_Ye=l(),dm=a("li"),Ene=a("strong"),uYe=o("data2vec-vision"),bYe=o(" \u2014 "),vR=a("a"),vYe=o("Data2VecVisionConfig"),FYe=o(" (Data2VecVision model)"),TYe=l(),cm=a("li"),Cne=a("strong"),MYe=o("deberta"),EYe=o(" \u2014 "),FR=a("a"),CYe=o("DebertaConfig"),wYe=o(" (DeBERTa model)"),AYe=l(),fm=a("li"),wne=a("strong"),LYe=o("deberta-v2"),yYe=o(" \u2014 "),TR=a("a"),xYe=o("DebertaV2Config"),$Ye=o(" (DeBERTa-v2 model)"),kYe=l(),mm=a("li"),Ane=a("strong"),SYe=o("decision_transformer"),RYe=o(" \u2014 "),MR=a("a"),PYe=o("DecisionTransformerConfig"),BYe=o(" (Decision Transformer model)"),IYe=l(),gm=a("li"),Lne=a("strong"),NYe=o("deit"),qYe=o(" \u2014 "),ER=a("a"),jYe=o("DeiTConfig"),DYe=o(" (DeiT model)"),GYe=l(),hm=a("li"),yne=a("strong"),OYe=o("detr"),VYe=o(" \u2014 "),CR=a("a"),XYe=o("DetrConfig"),zYe=o(" (DETR model)"),WYe=l(),pm=a("li"),xne=a("strong"),QYe=o("distilbert"),HYe=o(" \u2014 "),wR=a("a"),UYe=o("DistilBertConfig"),JYe=o(" (DistilBERT model)"),YYe=l(),_m=a("li"),$ne=a("strong"),KYe=o("dpr"),ZYe=o(" \u2014 "),AR=a("a"),eKe=o("DPRConfig"),oKe=o(" (DPR model)"),rKe=l(),um=a("li"),kne=a("strong"),tKe=o("dpt"),aKe=o(" \u2014 "),LR=a("a"),nKe=o("DPTConfig"),sKe=o(" (DPT model)"),lKe=l(),bm=a("li"),Sne=a("strong"),iKe=o("electra"),dKe=o(" \u2014 "),yR=a("a"),cKe=o("ElectraConfig"),fKe=o(" (ELECTRA model)"),mKe=l(),vm=a("li"),Rne=a("strong"),gKe=o("encoder-decoder"),hKe=o(" \u2014 "),xR=a("a"),pKe=o("EncoderDecoderConfig"),_Ke=o(" (Encoder decoder model)"),uKe=l(),Fm=a("li"),Pne=a("strong"),bKe=o("flaubert"),vKe=o(" \u2014 "),$R=a("a"),FKe=o("FlaubertConfig"),TKe=o(" (FlauBERT model)"),MKe=l(),Tm=a("li"),Bne=a("strong"),EKe=o("flava"),CKe=o(" \u2014 "),kR=a("a"),wKe=o("FlavaConfig"),AKe=o(" (FLAVA model)"),LKe=l(),Mm=a("li"),Ine=a("strong"),yKe=o("fnet"),xKe=o(" \u2014 "),SR=a("a"),$Ke=o("FNetConfig"),kKe=o(" (FNet model)"),SKe=l(),Em=a("li"),Nne=a("strong"),RKe=o("fsmt"),PKe=o(" \u2014 "),RR=a("a"),BKe=o("FSMTConfig"),IKe=o(" (FairSeq Machine-Translation model)"),NKe=l(),Cm=a("li"),qne=a("strong"),qKe=o("funnel"),jKe=o(" \u2014 "),PR=a("a"),DKe=o("FunnelConfig"),GKe=o(" (Funnel Transformer model)"),OKe=l(),wm=a("li"),jne=a("strong"),VKe=o("glpn"),XKe=o(" \u2014 "),BR=a("a"),zKe=o("GLPNConfig"),WKe=o(" (GLPN model)"),QKe=l(),Am=a("li"),Dne=a("strong"),HKe=o("gpt2"),UKe=o(" \u2014 "),IR=a("a"),JKe=o("GPT2Config"),YKe=o(" (OpenAI GPT-2 model)"),KKe=l(),Lm=a("li"),Gne=a("strong"),ZKe=o("gpt_neo"),eZe=o(" \u2014 "),NR=a("a"),oZe=o("GPTNeoConfig"),rZe=o(" (GPT Neo model)"),tZe=l(),ym=a("li"),One=a("strong"),aZe=o("gpt_neox"),nZe=o(" \u2014 "),qR=a("a"),sZe=o("GPTNeoXConfig"),lZe=o(" (GPT NeoX model)"),iZe=l(),xm=a("li"),Vne=a("strong"),dZe=o("gptj"),cZe=o(" \u2014 "),jR=a("a"),fZe=o("GPTJConfig"),mZe=o(" (GPT-J model)"),gZe=l(),$m=a("li"),Xne=a("strong"),hZe=o("groupvit"),pZe=o(" \u2014 "),DR=a("a"),_Ze=o("GroupViTConfig"),uZe=o(" (GroupViT model)"),bZe=l(),km=a("li"),zne=a("strong"),vZe=o("hubert"),FZe=o(" \u2014 "),GR=a("a"),TZe=o("HubertConfig"),MZe=o(" (Hubert model)"),EZe=l(),Sm=a("li"),Wne=a("strong"),CZe=o("ibert"),wZe=o(" \u2014 "),OR=a("a"),AZe=o("IBertConfig"),LZe=o(" (I-BERT model)"),yZe=l(),Rm=a("li"),Qne=a("strong"),xZe=o("imagegpt"),$Ze=o(" \u2014 "),VR=a("a"),kZe=o("ImageGPTConfig"),SZe=o(" (ImageGPT model)"),RZe=l(),Pm=a("li"),Hne=a("strong"),PZe=o("layoutlm"),BZe=o(" \u2014 "),XR=a("a"),IZe=o("LayoutLMConfig"),NZe=o(" (LayoutLM model)"),qZe=l(),Bm=a("li"),Une=a("strong"),jZe=o("layoutlmv2"),DZe=o(" \u2014 "),zR=a("a"),GZe=o("LayoutLMv2Config"),OZe=o(" (LayoutLMv2 model)"),VZe=l(),Im=a("li"),Jne=a("strong"),XZe=o("layoutlmv3"),zZe=o(" \u2014 "),WR=a("a"),WZe=o("LayoutLMv3Config"),QZe=o(" (LayoutLMv3 model)"),HZe=l(),Nm=a("li"),Yne=a("strong"),UZe=o("led"),JZe=o(" \u2014 "),QR=a("a"),YZe=o("LEDConfig"),KZe=o(" (LED model)"),ZZe=l(),qm=a("li"),Kne=a("strong"),eeo=o("levit"),oeo=o(" \u2014 "),HR=a("a"),reo=o("LevitConfig"),teo=o(" (LeViT model)"),aeo=l(),jm=a("li"),Zne=a("strong"),neo=o("longformer"),seo=o(" \u2014 "),UR=a("a"),leo=o("LongformerConfig"),ieo=o(" (Longformer model)"),deo=l(),Dm=a("li"),ese=a("strong"),ceo=o("longt5"),feo=o(" \u2014 "),JR=a("a"),meo=o("LongT5Config"),geo=o(" (LongT5 model)"),heo=l(),Gm=a("li"),ose=a("strong"),peo=o("luke"),_eo=o(" \u2014 "),YR=a("a"),ueo=o("LukeConfig"),beo=o(" (LUKE model)"),veo=l(),Om=a("li"),rse=a("strong"),Feo=o("lxmert"),Teo=o(" \u2014 "),KR=a("a"),Meo=o("LxmertConfig"),Eeo=o(" (LXMERT model)"),Ceo=l(),Vm=a("li"),tse=a("strong"),weo=o("m2m_100"),Aeo=o(" \u2014 "),ZR=a("a"),Leo=o("M2M100Config"),yeo=o(" (M2M100 model)"),xeo=l(),Xm=a("li"),ase=a("strong"),$eo=o("marian"),keo=o(" \u2014 "),eP=a("a"),Seo=o("MarianConfig"),Reo=o(" (Marian model)"),Peo=l(),zm=a("li"),nse=a("strong"),Beo=o("maskformer"),Ieo=o(" \u2014 "),oP=a("a"),Neo=o("MaskFormerConfig"),qeo=o(" (MaskFormer model)"),jeo=l(),Wm=a("li"),sse=a("strong"),Deo=o("mbart"),Geo=o(" \u2014 "),rP=a("a"),Oeo=o("MBartConfig"),Veo=o(" (mBART model)"),Xeo=l(),Qm=a("li"),lse=a("strong"),zeo=o("mctct"),Weo=o(" \u2014 "),tP=a("a"),Qeo=o("MCTCTConfig"),Heo=o(" (M-CTC-T model)"),Ueo=l(),Hm=a("li"),ise=a("strong"),Jeo=o("megatron-bert"),Yeo=o(" \u2014 "),aP=a("a"),Keo=o("MegatronBertConfig"),Zeo=o(" (Megatron-BERT model)"),eoo=l(),Um=a("li"),dse=a("strong"),ooo=o("mobilebert"),roo=o(" \u2014 "),nP=a("a"),too=o("MobileBertConfig"),aoo=o(" (MobileBERT model)"),noo=l(),Jm=a("li"),cse=a("strong"),soo=o("mobilevit"),loo=o(" \u2014 "),sP=a("a"),ioo=o("MobileViTConfig"),doo=o(" (MobileViT model)"),coo=l(),Ym=a("li"),fse=a("strong"),foo=o("mpnet"),moo=o(" \u2014 "),lP=a("a"),goo=o("MPNetConfig"),hoo=o(" (MPNet model)"),poo=l(),Km=a("li"),mse=a("strong"),_oo=o("mt5"),uoo=o(" \u2014 "),iP=a("a"),boo=o("MT5Config"),voo=o(" (MT5 model)"),Foo=l(),Zm=a("li"),gse=a("strong"),Too=o("mvp"),Moo=o(" \u2014 "),dP=a("a"),Eoo=o("MvpConfig"),Coo=o(" (MVP model)"),woo=l(),eg=a("li"),hse=a("strong"),Aoo=o("nezha"),Loo=o(" \u2014 "),cP=a("a"),yoo=o("NezhaConfig"),xoo=o(" (Nezha model)"),$oo=l(),og=a("li"),pse=a("strong"),koo=o("nystromformer"),Soo=o(" \u2014 "),fP=a("a"),Roo=o("NystromformerConfig"),Poo=o(" (Nystr\xF6mformer model)"),Boo=l(),rg=a("li"),_se=a("strong"),Ioo=o("openai-gpt"),Noo=o(" \u2014 "),mP=a("a"),qoo=o("OpenAIGPTConfig"),joo=o(" (OpenAI GPT model)"),Doo=l(),tg=a("li"),use=a("strong"),Goo=o("opt"),Ooo=o(" \u2014 "),gP=a("a"),Voo=o("OPTConfig"),Xoo=o(" (OPT model)"),zoo=l(),ag=a("li"),bse=a("strong"),Woo=o("owlvit"),Qoo=o(" \u2014 "),hP=a("a"),Hoo=o("OwlViTConfig"),Uoo=o(" (OWL-ViT model)"),Joo=l(),ng=a("li"),vse=a("strong"),Yoo=o("pegasus"),Koo=o(" \u2014 "),pP=a("a"),Zoo=o("PegasusConfig"),ero=o(" (Pegasus model)"),oro=l(),sg=a("li"),Fse=a("strong"),rro=o("perceiver"),tro=o(" \u2014 "),_P=a("a"),aro=o("PerceiverConfig"),nro=o(" (Perceiver model)"),sro=l(),lg=a("li"),Tse=a("strong"),lro=o("plbart"),iro=o(" \u2014 "),uP=a("a"),dro=o("PLBartConfig"),cro=o(" (PLBart model)"),fro=l(),ig=a("li"),Mse=a("strong"),mro=o("poolformer"),gro=o(" \u2014 "),bP=a("a"),hro=o("PoolFormerConfig"),pro=o(" (PoolFormer model)"),_ro=l(),dg=a("li"),Ese=a("strong"),uro=o("prophetnet"),bro=o(" \u2014 "),vP=a("a"),vro=o("ProphetNetConfig"),Fro=o(" (ProphetNet model)"),Tro=l(),cg=a("li"),Cse=a("strong"),Mro=o("qdqbert"),Ero=o(" \u2014 "),FP=a("a"),Cro=o("QDQBertConfig"),wro=o(" (QDQBert model)"),Aro=l(),fg=a("li"),wse=a("strong"),Lro=o("rag"),yro=o(" \u2014 "),TP=a("a"),xro=o("RagConfig"),$ro=o(" (RAG model)"),kro=l(),mg=a("li"),Ase=a("strong"),Sro=o("realm"),Rro=o(" \u2014 "),MP=a("a"),Pro=o("RealmConfig"),Bro=o(" (REALM model)"),Iro=l(),gg=a("li"),Lse=a("strong"),Nro=o("reformer"),qro=o(" \u2014 "),EP=a("a"),jro=o("ReformerConfig"),Dro=o(" (Reformer model)"),Gro=l(),hg=a("li"),yse=a("strong"),Oro=o("regnet"),Vro=o(" \u2014 "),CP=a("a"),Xro=o("RegNetConfig"),zro=o(" (RegNet model)"),Wro=l(),pg=a("li"),xse=a("strong"),Qro=o("rembert"),Hro=o(" \u2014 "),wP=a("a"),Uro=o("RemBertConfig"),Jro=o(" (RemBERT model)"),Yro=l(),_g=a("li"),$se=a("strong"),Kro=o("resnet"),Zro=o(" \u2014 "),AP=a("a"),eto=o("ResNetConfig"),oto=o(" (ResNet model)"),rto=l(),ug=a("li"),kse=a("strong"),tto=o("retribert"),ato=o(" \u2014 "),LP=a("a"),nto=o("RetriBertConfig"),sto=o(" (RetriBERT model)"),lto=l(),bg=a("li"),Sse=a("strong"),ito=o("roberta"),dto=o(" \u2014 "),yP=a("a"),cto=o("RobertaConfig"),fto=o(" (RoBERTa model)"),mto=l(),vg=a("li"),Rse=a("strong"),gto=o("roformer"),hto=o(" \u2014 "),xP=a("a"),pto=o("RoFormerConfig"),_to=o(" (RoFormer model)"),uto=l(),Fg=a("li"),Pse=a("strong"),bto=o("segformer"),vto=o(" \u2014 "),$P=a("a"),Fto=o("SegformerConfig"),Tto=o(" (SegFormer model)"),Mto=l(),Tg=a("li"),Bse=a("strong"),Eto=o("sew"),Cto=o(" \u2014 "),kP=a("a"),wto=o("SEWConfig"),Ato=o(" (SEW model)"),Lto=l(),Mg=a("li"),Ise=a("strong"),yto=o("sew-d"),xto=o(" \u2014 "),SP=a("a"),$to=o("SEWDConfig"),kto=o(" (SEW-D model)"),Sto=l(),Eg=a("li"),Nse=a("strong"),Rto=o("speech-encoder-decoder"),Pto=o(" \u2014 "),RP=a("a"),Bto=o("SpeechEncoderDecoderConfig"),Ito=o(" (Speech Encoder decoder model)"),Nto=l(),Cg=a("li"),qse=a("strong"),qto=o("speech_to_text"),jto=o(" \u2014 "),PP=a("a"),Dto=o("Speech2TextConfig"),Gto=o(" (Speech2Text model)"),Oto=l(),wg=a("li"),jse=a("strong"),Vto=o("speech_to_text_2"),Xto=o(" \u2014 "),BP=a("a"),zto=o("Speech2Text2Config"),Wto=o(" (Speech2Text2 model)"),Qto=l(),Ag=a("li"),Dse=a("strong"),Hto=o("splinter"),Uto=o(" \u2014 "),IP=a("a"),Jto=o("SplinterConfig"),Yto=o(" (Splinter model)"),Kto=l(),Lg=a("li"),Gse=a("strong"),Zto=o("squeezebert"),eao=o(" \u2014 "),NP=a("a"),oao=o("SqueezeBertConfig"),rao=o(" (SqueezeBERT model)"),tao=l(),yg=a("li"),Ose=a("strong"),aao=o("swin"),nao=o(" \u2014 "),qP=a("a"),sao=o("SwinConfig"),lao=o(" (Swin Transformer model)"),iao=l(),xg=a("li"),Vse=a("strong"),dao=o("t5"),cao=o(" \u2014 "),jP=a("a"),fao=o("T5Config"),mao=o(" (T5 model)"),gao=l(),$g=a("li"),Xse=a("strong"),hao=o("tapas"),pao=o(" \u2014 "),DP=a("a"),_ao=o("TapasConfig"),uao=o(" (TAPAS model)"),bao=l(),kg=a("li"),zse=a("strong"),vao=o("trajectory_transformer"),Fao=o(" \u2014 "),GP=a("a"),Tao=o("TrajectoryTransformerConfig"),Mao=o(" (Trajectory Transformer model)"),Eao=l(),Sg=a("li"),Wse=a("strong"),Cao=o("transfo-xl"),wao=o(" \u2014 "),OP=a("a"),Aao=o("TransfoXLConfig"),Lao=o(" (Transformer-XL model)"),yao=l(),Rg=a("li"),Qse=a("strong"),xao=o("trocr"),$ao=o(" \u2014 "),VP=a("a"),kao=o("TrOCRConfig"),Sao=o(" (TrOCR model)"),Rao=l(),Pg=a("li"),Hse=a("strong"),Pao=o("unispeech"),Bao=o(" \u2014 "),XP=a("a"),Iao=o("UniSpeechConfig"),Nao=o(" (UniSpeech model)"),qao=l(),Bg=a("li"),Use=a("strong"),jao=o("unispeech-sat"),Dao=o(" \u2014 "),zP=a("a"),Gao=o("UniSpeechSatConfig"),Oao=o(" (UniSpeechSat model)"),Vao=l(),Ig=a("li"),Jse=a("strong"),Xao=o("van"),zao=o(" \u2014 "),WP=a("a"),Wao=o("VanConfig"),Qao=o(" (VAN model)"),Hao=l(),Ng=a("li"),Yse=a("strong"),Uao=o("vilt"),Jao=o(" \u2014 "),QP=a("a"),Yao=o("ViltConfig"),Kao=o(" (ViLT model)"),Zao=l(),qg=a("li"),Kse=a("strong"),eno=o("vision-encoder-decoder"),ono=o(" \u2014 "),HP=a("a"),rno=o("VisionEncoderDecoderConfig"),tno=o(" (Vision Encoder decoder model)"),ano=l(),jg=a("li"),Zse=a("strong"),nno=o("vision-text-dual-encoder"),sno=o(" \u2014 "),UP=a("a"),lno=o("VisionTextDualEncoderConfig"),ino=o(" (VisionTextDualEncoder model)"),dno=l(),Dg=a("li"),ele=a("strong"),cno=o("visual_bert"),fno=o(" \u2014 "),JP=a("a"),mno=o("VisualBertConfig"),gno=o(" (VisualBERT model)"),hno=l(),Gg=a("li"),ole=a("strong"),pno=o("vit"),_no=o(" \u2014 "),YP=a("a"),uno=o("ViTConfig"),bno=o(" (ViT model)"),vno=l(),Og=a("li"),rle=a("strong"),Fno=o("vit_mae"),Tno=o(" \u2014 "),KP=a("a"),Mno=o("ViTMAEConfig"),Eno=o(" (ViTMAE model)"),Cno=l(),Vg=a("li"),tle=a("strong"),wno=o("wav2vec2"),Ano=o(" \u2014 "),ZP=a("a"),Lno=o("Wav2Vec2Config"),yno=o(" (Wav2Vec2 model)"),xno=l(),Xg=a("li"),ale=a("strong"),$no=o("wav2vec2-conformer"),kno=o(" \u2014 "),eB=a("a"),Sno=o("Wav2Vec2ConformerConfig"),Rno=o(" (Wav2Vec2-Conformer model)"),Pno=l(),zg=a("li"),nle=a("strong"),Bno=o("wavlm"),Ino=o(" \u2014 "),oB=a("a"),Nno=o("WavLMConfig"),qno=o(" (WavLM model)"),jno=l(),Wg=a("li"),sle=a("strong"),Dno=o("xglm"),Gno=o(" \u2014 "),rB=a("a"),Ono=o("XGLMConfig"),Vno=o(" (XGLM model)"),Xno=l(),Qg=a("li"),lle=a("strong"),zno=o("xlm"),Wno=o(" \u2014 "),tB=a("a"),Qno=o("XLMConfig"),Hno=o(" (XLM model)"),Uno=l(),Hg=a("li"),ile=a("strong"),Jno=o("xlm-prophetnet"),Yno=o(" \u2014 "),aB=a("a"),Kno=o("XLMProphetNetConfig"),Zno=o(" (XLM-ProphetNet model)"),eso=l(),Ug=a("li"),dle=a("strong"),oso=o("xlm-roberta"),rso=o(" \u2014 "),nB=a("a"),tso=o("XLMRobertaConfig"),aso=o(" (XLM-RoBERTa model)"),nso=l(),Jg=a("li"),cle=a("strong"),sso=o("xlm-roberta-xl"),lso=o(" \u2014 "),sB=a("a"),iso=o("XLMRobertaXLConfig"),dso=o(" (XLM-RoBERTa-XL model)"),cso=l(),Yg=a("li"),fle=a("strong"),fso=o("xlnet"),mso=o(" \u2014 "),lB=a("a"),gso=o("XLNetConfig"),hso=o(" (XLNet model)"),pso=l(),Kg=a("li"),mle=a("strong"),_so=o("yolos"),uso=o(" \u2014 "),iB=a("a"),bso=o("YolosConfig"),vso=o(" (YOLOS model)"),Fso=l(),Zg=a("li"),gle=a("strong"),Tso=o("yoso"),Mso=o(" \u2014 "),dB=a("a"),Eso=o("YosoConfig"),Cso=o(" (YOSO model)"),wso=l(),F(eh.$$.fragment),Aso=l(),oh=a("div"),F(F6.$$.fragment),Lso=l(),hle=a("p"),yso=o("Register a new configuration for this class."),OXe=l(),ji=a("h2"),rh=a("a"),ple=a("span"),F(T6.$$.fragment),xso=l(),_le=a("span"),$so=o("AutoTokenizer"),VXe=l(),Lo=a("div"),F(M6.$$.fragment),kso=l(),E6=a("p"),Sso=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),cB=a("a"),Rso=o("AutoTokenizer.from_pretrained()"),Pso=o(" class method."),Bso=l(),C6=a("p"),Iso=o("This class cannot be instantiated directly using "),ule=a("code"),Nso=o("__init__()"),qso=o(" (throws an error)."),jso=l(),yr=a("div"),F(w6.$$.fragment),Dso=l(),ble=a("p"),Gso=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Oso=l(),Pa=a("p"),Vso=o("The tokenizer class to instantiate is selected based on the "),vle=a("code"),Xso=o("model_type"),zso=o(` property of the config object (either
passed as an argument or loaded from `),Fle=a("code"),Wso=o("pretrained_model_name_or_path"),Qso=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tle=a("code"),Hso=o("pretrained_model_name_or_path"),Uso=o(":"),Jso=l(),k=a("ul"),jn=a("li"),Mle=a("strong"),Yso=o("albert"),Kso=o(" \u2014 "),fB=a("a"),Zso=o("AlbertTokenizer"),elo=o(" or "),mB=a("a"),olo=o("AlbertTokenizerFast"),rlo=o(" (ALBERT model)"),tlo=l(),Dn=a("li"),Ele=a("strong"),alo=o("bart"),nlo=o(" \u2014 "),gB=a("a"),slo=o("BartTokenizer"),llo=o(" or "),hB=a("a"),ilo=o("BartTokenizerFast"),dlo=o(" (BART model)"),clo=l(),Gn=a("li"),Cle=a("strong"),flo=o("barthez"),mlo=o(" \u2014 "),pB=a("a"),glo=o("BarthezTokenizer"),hlo=o(" or "),_B=a("a"),plo=o("BarthezTokenizerFast"),_lo=o(" (BARThez model)"),ulo=l(),th=a("li"),wle=a("strong"),blo=o("bartpho"),vlo=o(" \u2014 "),uB=a("a"),Flo=o("BartphoTokenizer"),Tlo=o(" (BARTpho model)"),Mlo=l(),On=a("li"),Ale=a("strong"),Elo=o("bert"),Clo=o(" \u2014 "),bB=a("a"),wlo=o("BertTokenizer"),Alo=o(" or "),vB=a("a"),Llo=o("BertTokenizerFast"),ylo=o(" (BERT model)"),xlo=l(),ah=a("li"),Lle=a("strong"),$lo=o("bert-generation"),klo=o(" \u2014 "),FB=a("a"),Slo=o("BertGenerationTokenizer"),Rlo=o(" (Bert Generation model)"),Plo=l(),nh=a("li"),yle=a("strong"),Blo=o("bert-japanese"),Ilo=o(" \u2014 "),TB=a("a"),Nlo=o("BertJapaneseTokenizer"),qlo=o(" (BertJapanese model)"),jlo=l(),sh=a("li"),xle=a("strong"),Dlo=o("bertweet"),Glo=o(" \u2014 "),MB=a("a"),Olo=o("BertweetTokenizer"),Vlo=o(" (BERTweet model)"),Xlo=l(),Vn=a("li"),$le=a("strong"),zlo=o("big_bird"),Wlo=o(" \u2014 "),EB=a("a"),Qlo=o("BigBirdTokenizer"),Hlo=o(" or "),CB=a("a"),Ulo=o("BigBirdTokenizerFast"),Jlo=o(" (BigBird model)"),Ylo=l(),Xn=a("li"),kle=a("strong"),Klo=o("bigbird_pegasus"),Zlo=o(" \u2014 "),wB=a("a"),eio=o("PegasusTokenizer"),oio=o(" or "),AB=a("a"),rio=o("PegasusTokenizerFast"),tio=o(" (BigBird-Pegasus model)"),aio=l(),zn=a("li"),Sle=a("strong"),nio=o("blenderbot"),sio=o(" \u2014 "),LB=a("a"),lio=o("BlenderbotTokenizer"),iio=o(" or "),yB=a("a"),dio=o("BlenderbotTokenizerFast"),cio=o(" (Blenderbot model)"),fio=l(),lh=a("li"),Rle=a("strong"),mio=o("blenderbot-small"),gio=o(" \u2014 "),xB=a("a"),hio=o("BlenderbotSmallTokenizer"),pio=o(" (BlenderbotSmall model)"),_io=l(),ih=a("li"),Ple=a("strong"),uio=o("bloom"),bio=o(" \u2014 "),$B=a("a"),vio=o("BloomTokenizerFast"),Fio=o(" (BLOOM model)"),Tio=l(),dh=a("li"),Ble=a("strong"),Mio=o("byt5"),Eio=o(" \u2014 "),kB=a("a"),Cio=o("ByT5Tokenizer"),wio=o(" (ByT5 model)"),Aio=l(),Wn=a("li"),Ile=a("strong"),Lio=o("camembert"),yio=o(" \u2014 "),SB=a("a"),xio=o("CamembertTokenizer"),$io=o(" or "),RB=a("a"),kio=o("CamembertTokenizerFast"),Sio=o(" (CamemBERT model)"),Rio=l(),ch=a("li"),Nle=a("strong"),Pio=o("canine"),Bio=o(" \u2014 "),PB=a("a"),Iio=o("CanineTokenizer"),Nio=o(" (CANINE model)"),qio=l(),Qn=a("li"),qle=a("strong"),jio=o("clip"),Dio=o(" \u2014 "),BB=a("a"),Gio=o("CLIPTokenizer"),Oio=o(" or "),IB=a("a"),Vio=o("CLIPTokenizerFast"),Xio=o(" (CLIP model)"),zio=l(),Hn=a("li"),jle=a("strong"),Wio=o("codegen"),Qio=o(" \u2014 "),NB=a("a"),Hio=o("CodeGenTokenizer"),Uio=o(" or "),qB=a("a"),Jio=o("CodeGenTokenizerFast"),Yio=o(" (CodeGen model)"),Kio=l(),Un=a("li"),Dle=a("strong"),Zio=o("convbert"),edo=o(" \u2014 "),jB=a("a"),odo=o("ConvBertTokenizer"),rdo=o(" or "),DB=a("a"),tdo=o("ConvBertTokenizerFast"),ado=o(" (ConvBERT model)"),ndo=l(),Jn=a("li"),Gle=a("strong"),sdo=o("cpm"),ldo=o(" \u2014 "),GB=a("a"),ido=o("CpmTokenizer"),ddo=o(" or "),OB=a("a"),cdo=o("CpmTokenizerFast"),fdo=o(" (CPM model)"),mdo=l(),fh=a("li"),Ole=a("strong"),gdo=o("ctrl"),hdo=o(" \u2014 "),VB=a("a"),pdo=o("CTRLTokenizer"),_do=o(" (CTRL model)"),udo=l(),Yn=a("li"),Vle=a("strong"),bdo=o("data2vec-text"),vdo=o(" \u2014 "),XB=a("a"),Fdo=o("RobertaTokenizer"),Tdo=o(" or "),zB=a("a"),Mdo=o("RobertaTokenizerFast"),Edo=o(" (Data2VecText model)"),Cdo=l(),Kn=a("li"),Xle=a("strong"),wdo=o("deberta"),Ado=o(" \u2014 "),WB=a("a"),Ldo=o("DebertaTokenizer"),ydo=o(" or "),QB=a("a"),xdo=o("DebertaTokenizerFast"),$do=o(" (DeBERTa model)"),kdo=l(),Zn=a("li"),zle=a("strong"),Sdo=o("deberta-v2"),Rdo=o(" \u2014 "),HB=a("a"),Pdo=o("DebertaV2Tokenizer"),Bdo=o(" or "),UB=a("a"),Ido=o("DebertaV2TokenizerFast"),Ndo=o(" (DeBERTa-v2 model)"),qdo=l(),es=a("li"),Wle=a("strong"),jdo=o("distilbert"),Ddo=o(" \u2014 "),JB=a("a"),Gdo=o("DistilBertTokenizer"),Odo=o(" or "),YB=a("a"),Vdo=o("DistilBertTokenizerFast"),Xdo=o(" (DistilBERT model)"),zdo=l(),os=a("li"),Qle=a("strong"),Wdo=o("dpr"),Qdo=o(" \u2014 "),KB=a("a"),Hdo=o("DPRQuestionEncoderTokenizer"),Udo=o(" or "),ZB=a("a"),Jdo=o("DPRQuestionEncoderTokenizerFast"),Ydo=o(" (DPR model)"),Kdo=l(),rs=a("li"),Hle=a("strong"),Zdo=o("electra"),eco=o(" \u2014 "),eI=a("a"),oco=o("ElectraTokenizer"),rco=o(" or "),oI=a("a"),tco=o("ElectraTokenizerFast"),aco=o(" (ELECTRA model)"),nco=l(),mh=a("li"),Ule=a("strong"),sco=o("flaubert"),lco=o(" \u2014 "),rI=a("a"),ico=o("FlaubertTokenizer"),dco=o(" (FlauBERT model)"),cco=l(),ts=a("li"),Jle=a("strong"),fco=o("fnet"),mco=o(" \u2014 "),tI=a("a"),gco=o("FNetTokenizer"),hco=o(" or "),aI=a("a"),pco=o("FNetTokenizerFast"),_co=o(" (FNet model)"),uco=l(),gh=a("li"),Yle=a("strong"),bco=o("fsmt"),vco=o(" \u2014 "),nI=a("a"),Fco=o("FSMTTokenizer"),Tco=o(" (FairSeq Machine-Translation model)"),Mco=l(),as=a("li"),Kle=a("strong"),Eco=o("funnel"),Cco=o(" \u2014 "),sI=a("a"),wco=o("FunnelTokenizer"),Aco=o(" or "),lI=a("a"),Lco=o("FunnelTokenizerFast"),yco=o(" (Funnel Transformer model)"),xco=l(),ns=a("li"),Zle=a("strong"),$co=o("gpt2"),kco=o(" \u2014 "),iI=a("a"),Sco=o("GPT2Tokenizer"),Rco=o(" or "),dI=a("a"),Pco=o("GPT2TokenizerFast"),Bco=o(" (OpenAI GPT-2 model)"),Ico=l(),ss=a("li"),eie=a("strong"),Nco=o("gpt_neo"),qco=o(" \u2014 "),cI=a("a"),jco=o("GPT2Tokenizer"),Dco=o(" or "),fI=a("a"),Gco=o("GPT2TokenizerFast"),Oco=o(" (GPT Neo model)"),Vco=l(),hh=a("li"),oie=a("strong"),Xco=o("gpt_neox"),zco=o(" \u2014 "),mI=a("a"),Wco=o("GPTNeoXTokenizerFast"),Qco=o(" (GPT NeoX model)"),Hco=l(),ls=a("li"),rie=a("strong"),Uco=o("gptj"),Jco=o(" \u2014 "),gI=a("a"),Yco=o("GPT2Tokenizer"),Kco=o(" or "),hI=a("a"),Zco=o("GPT2TokenizerFast"),efo=o(" (GPT-J model)"),ofo=l(),is=a("li"),tie=a("strong"),rfo=o("groupvit"),tfo=o(" \u2014 "),pI=a("a"),afo=o("CLIPTokenizer"),nfo=o(" or "),_I=a("a"),sfo=o("CLIPTokenizerFast"),lfo=o(" (GroupViT model)"),ifo=l(),ds=a("li"),aie=a("strong"),dfo=o("herbert"),cfo=o(" \u2014 "),uI=a("a"),ffo=o("HerbertTokenizer"),mfo=o(" or "),bI=a("a"),gfo=o("HerbertTokenizerFast"),hfo=o(" (HerBERT model)"),pfo=l(),ph=a("li"),nie=a("strong"),_fo=o("hubert"),ufo=o(" \u2014 "),vI=a("a"),bfo=o("Wav2Vec2CTCTokenizer"),vfo=o(" (Hubert model)"),Ffo=l(),cs=a("li"),sie=a("strong"),Tfo=o("ibert"),Mfo=o(" \u2014 "),FI=a("a"),Efo=o("RobertaTokenizer"),Cfo=o(" or "),TI=a("a"),wfo=o("RobertaTokenizerFast"),Afo=o(" (I-BERT model)"),Lfo=l(),fs=a("li"),lie=a("strong"),yfo=o("layoutlm"),xfo=o(" \u2014 "),MI=a("a"),$fo=o("LayoutLMTokenizer"),kfo=o(" or "),EI=a("a"),Sfo=o("LayoutLMTokenizerFast"),Rfo=o(" (LayoutLM model)"),Pfo=l(),ms=a("li"),iie=a("strong"),Bfo=o("layoutlmv2"),Ifo=o(" \u2014 "),CI=a("a"),Nfo=o("LayoutLMv2Tokenizer"),qfo=o(" or "),wI=a("a"),jfo=o("LayoutLMv2TokenizerFast"),Dfo=o(" (LayoutLMv2 model)"),Gfo=l(),gs=a("li"),die=a("strong"),Ofo=o("layoutlmv3"),Vfo=o(" \u2014 "),AI=a("a"),Xfo=o("LayoutLMv3Tokenizer"),zfo=o(" or "),LI=a("a"),Wfo=o("LayoutLMv3TokenizerFast"),Qfo=o(" (LayoutLMv3 model)"),Hfo=l(),hs=a("li"),cie=a("strong"),Ufo=o("layoutxlm"),Jfo=o(" \u2014 "),yI=a("a"),Yfo=o("LayoutXLMTokenizer"),Kfo=o(" or "),xI=a("a"),Zfo=o("LayoutXLMTokenizerFast"),emo=o(" (LayoutXLM model)"),omo=l(),ps=a("li"),fie=a("strong"),rmo=o("led"),tmo=o(" \u2014 "),$I=a("a"),amo=o("LEDTokenizer"),nmo=o(" or "),kI=a("a"),smo=o("LEDTokenizerFast"),lmo=o(" (LED model)"),imo=l(),_s=a("li"),mie=a("strong"),dmo=o("longformer"),cmo=o(" \u2014 "),SI=a("a"),fmo=o("LongformerTokenizer"),mmo=o(" or "),RI=a("a"),gmo=o("LongformerTokenizerFast"),hmo=o(" (Longformer model)"),pmo=l(),us=a("li"),gie=a("strong"),_mo=o("longt5"),umo=o(" \u2014 "),PI=a("a"),bmo=o("T5Tokenizer"),vmo=o(" or "),BI=a("a"),Fmo=o("T5TokenizerFast"),Tmo=o(" (LongT5 model)"),Mmo=l(),_h=a("li"),hie=a("strong"),Emo=o("luke"),Cmo=o(" \u2014 "),II=a("a"),wmo=o("LukeTokenizer"),Amo=o(" (LUKE model)"),Lmo=l(),bs=a("li"),pie=a("strong"),ymo=o("lxmert"),xmo=o(" \u2014 "),NI=a("a"),$mo=o("LxmertTokenizer"),kmo=o(" or "),qI=a("a"),Smo=o("LxmertTokenizerFast"),Rmo=o(" (LXMERT model)"),Pmo=l(),uh=a("li"),_ie=a("strong"),Bmo=o("m2m_100"),Imo=o(" \u2014 "),jI=a("a"),Nmo=o("M2M100Tokenizer"),qmo=o(" (M2M100 model)"),jmo=l(),bh=a("li"),uie=a("strong"),Dmo=o("marian"),Gmo=o(" \u2014 "),DI=a("a"),Omo=o("MarianTokenizer"),Vmo=o(" (Marian model)"),Xmo=l(),vs=a("li"),bie=a("strong"),zmo=o("mbart"),Wmo=o(" \u2014 "),GI=a("a"),Qmo=o("MBartTokenizer"),Hmo=o(" or "),OI=a("a"),Umo=o("MBartTokenizerFast"),Jmo=o(" (mBART model)"),Ymo=l(),Fs=a("li"),vie=a("strong"),Kmo=o("mbart50"),Zmo=o(" \u2014 "),VI=a("a"),ego=o("MBart50Tokenizer"),ogo=o(" or "),XI=a("a"),rgo=o("MBart50TokenizerFast"),tgo=o(" (mBART-50 model)"),ago=l(),Ts=a("li"),Fie=a("strong"),ngo=o("megatron-bert"),sgo=o(" \u2014 "),zI=a("a"),lgo=o("BertTokenizer"),igo=o(" or "),WI=a("a"),dgo=o("BertTokenizerFast"),cgo=o(" (Megatron-BERT model)"),fgo=l(),vh=a("li"),Tie=a("strong"),mgo=o("mluke"),ggo=o(" \u2014 "),QI=a("a"),hgo=o("MLukeTokenizer"),pgo=o(" (mLUKE model)"),_go=l(),Ms=a("li"),Mie=a("strong"),ugo=o("mobilebert"),bgo=o(" \u2014 "),HI=a("a"),vgo=o("MobileBertTokenizer"),Fgo=o(" or "),UI=a("a"),Tgo=o("MobileBertTokenizerFast"),Mgo=o(" (MobileBERT model)"),Ego=l(),Es=a("li"),Eie=a("strong"),Cgo=o("mpnet"),wgo=o(" \u2014 "),JI=a("a"),Ago=o("MPNetTokenizer"),Lgo=o(" or "),YI=a("a"),ygo=o("MPNetTokenizerFast"),xgo=o(" (MPNet model)"),$go=l(),Cs=a("li"),Cie=a("strong"),kgo=o("mt5"),Sgo=o(" \u2014 "),KI=a("a"),Rgo=o("MT5Tokenizer"),Pgo=o(" or "),ZI=a("a"),Bgo=o("MT5TokenizerFast"),Igo=o(" (MT5 model)"),Ngo=l(),ws=a("li"),wie=a("strong"),qgo=o("mvp"),jgo=o(" \u2014 "),eN=a("a"),Dgo=o("MvpTokenizer"),Ggo=o(" or "),oN=a("a"),Ogo=o("MvpTokenizerFast"),Vgo=o(" (MVP model)"),Xgo=l(),As=a("li"),Aie=a("strong"),zgo=o("nezha"),Wgo=o(" \u2014 "),rN=a("a"),Qgo=o("BertTokenizer"),Hgo=o(" or "),tN=a("a"),Ugo=o("BertTokenizerFast"),Jgo=o(" (Nezha model)"),Ygo=l(),Ls=a("li"),Lie=a("strong"),Kgo=o("nllb"),Zgo=o(" \u2014 "),aN=a("a"),eho=o("NllbTokenizer"),oho=o(" or "),nN=a("a"),rho=o("NllbTokenizerFast"),tho=o(" (NLLB model)"),aho=l(),ys=a("li"),yie=a("strong"),nho=o("nystromformer"),sho=o(" \u2014 "),sN=a("a"),lho=o("AlbertTokenizer"),iho=o(" or "),lN=a("a"),dho=o("AlbertTokenizerFast"),cho=o(" (Nystr\xF6mformer model)"),fho=l(),xs=a("li"),xie=a("strong"),mho=o("openai-gpt"),gho=o(" \u2014 "),iN=a("a"),hho=o("OpenAIGPTTokenizer"),pho=o(" or "),dN=a("a"),_ho=o("OpenAIGPTTokenizerFast"),uho=o(" (OpenAI GPT model)"),bho=l(),Fh=a("li"),$ie=a("strong"),vho=o("opt"),Fho=o(" \u2014 "),cN=a("a"),Tho=o("GPT2Tokenizer"),Mho=o(" (OPT model)"),Eho=l(),$s=a("li"),kie=a("strong"),Cho=o("owlvit"),who=o(" \u2014 "),fN=a("a"),Aho=o("CLIPTokenizer"),Lho=o(" or "),mN=a("a"),yho=o("CLIPTokenizerFast"),xho=o(" (OWL-ViT model)"),$ho=l(),ks=a("li"),Sie=a("strong"),kho=o("pegasus"),Sho=o(" \u2014 "),gN=a("a"),Rho=o("PegasusTokenizer"),Pho=o(" or "),hN=a("a"),Bho=o("PegasusTokenizerFast"),Iho=o(" (Pegasus model)"),Nho=l(),Th=a("li"),Rie=a("strong"),qho=o("perceiver"),jho=o(" \u2014 "),pN=a("a"),Dho=o("PerceiverTokenizer"),Gho=o(" (Perceiver model)"),Oho=l(),Mh=a("li"),Pie=a("strong"),Vho=o("phobert"),Xho=o(" \u2014 "),_N=a("a"),zho=o("PhobertTokenizer"),Who=o(" (PhoBERT model)"),Qho=l(),Eh=a("li"),Bie=a("strong"),Hho=o("plbart"),Uho=o(" \u2014 "),uN=a("a"),Jho=o("PLBartTokenizer"),Yho=o(" (PLBart model)"),Kho=l(),Ch=a("li"),Iie=a("strong"),Zho=o("prophetnet"),epo=o(" \u2014 "),bN=a("a"),opo=o("ProphetNetTokenizer"),rpo=o(" (ProphetNet model)"),tpo=l(),Ss=a("li"),Nie=a("strong"),apo=o("qdqbert"),npo=o(" \u2014 "),vN=a("a"),spo=o("BertTokenizer"),lpo=o(" or "),FN=a("a"),ipo=o("BertTokenizerFast"),dpo=o(" (QDQBert model)"),cpo=l(),wh=a("li"),qie=a("strong"),fpo=o("rag"),mpo=o(" \u2014 "),TN=a("a"),gpo=o("RagTokenizer"),hpo=o(" (RAG model)"),ppo=l(),Rs=a("li"),jie=a("strong"),_po=o("realm"),upo=o(" \u2014 "),MN=a("a"),bpo=o("RealmTokenizer"),vpo=o(" or "),EN=a("a"),Fpo=o("RealmTokenizerFast"),Tpo=o(" (REALM model)"),Mpo=l(),Ps=a("li"),Die=a("strong"),Epo=o("reformer"),Cpo=o(" \u2014 "),CN=a("a"),wpo=o("ReformerTokenizer"),Apo=o(" or "),wN=a("a"),Lpo=o("ReformerTokenizerFast"),ypo=o(" (Reformer model)"),xpo=l(),Bs=a("li"),Gie=a("strong"),$po=o("rembert"),kpo=o(" \u2014 "),AN=a("a"),Spo=o("RemBertTokenizer"),Rpo=o(" or "),LN=a("a"),Ppo=o("RemBertTokenizerFast"),Bpo=o(" (RemBERT model)"),Ipo=l(),Is=a("li"),Oie=a("strong"),Npo=o("retribert"),qpo=o(" \u2014 "),yN=a("a"),jpo=o("RetriBertTokenizer"),Dpo=o(" or "),xN=a("a"),Gpo=o("RetriBertTokenizerFast"),Opo=o(" (RetriBERT model)"),Vpo=l(),Ns=a("li"),Vie=a("strong"),Xpo=o("roberta"),zpo=o(" \u2014 "),$N=a("a"),Wpo=o("RobertaTokenizer"),Qpo=o(" or "),kN=a("a"),Hpo=o("RobertaTokenizerFast"),Upo=o(" (RoBERTa model)"),Jpo=l(),qs=a("li"),Xie=a("strong"),Ypo=o("roformer"),Kpo=o(" \u2014 "),SN=a("a"),Zpo=o("RoFormerTokenizer"),e_o=o(" or "),RN=a("a"),o_o=o("RoFormerTokenizerFast"),r_o=o(" (RoFormer model)"),t_o=l(),Ah=a("li"),zie=a("strong"),a_o=o("speech_to_text"),n_o=o(" \u2014 "),PN=a("a"),s_o=o("Speech2TextTokenizer"),l_o=o(" (Speech2Text model)"),i_o=l(),Lh=a("li"),Wie=a("strong"),d_o=o("speech_to_text_2"),c_o=o(" \u2014 "),BN=a("a"),f_o=o("Speech2Text2Tokenizer"),m_o=o(" (Speech2Text2 model)"),g_o=l(),js=a("li"),Qie=a("strong"),h_o=o("splinter"),p_o=o(" \u2014 "),IN=a("a"),__o=o("SplinterTokenizer"),u_o=o(" or "),NN=a("a"),b_o=o("SplinterTokenizerFast"),v_o=o(" (Splinter model)"),F_o=l(),Ds=a("li"),Hie=a("strong"),T_o=o("squeezebert"),M_o=o(" \u2014 "),qN=a("a"),E_o=o("SqueezeBertTokenizer"),C_o=o(" or "),jN=a("a"),w_o=o("SqueezeBertTokenizerFast"),A_o=o(" (SqueezeBERT model)"),L_o=l(),Gs=a("li"),Uie=a("strong"),y_o=o("t5"),x_o=o(" \u2014 "),DN=a("a"),$_o=o("T5Tokenizer"),k_o=o(" or "),GN=a("a"),S_o=o("T5TokenizerFast"),R_o=o(" (T5 model)"),P_o=l(),yh=a("li"),Jie=a("strong"),B_o=o("tapas"),I_o=o(" \u2014 "),ON=a("a"),N_o=o("TapasTokenizer"),q_o=o(" (TAPAS model)"),j_o=l(),xh=a("li"),Yie=a("strong"),D_o=o("tapex"),G_o=o(" \u2014 "),VN=a("a"),O_o=o("TapexTokenizer"),V_o=o(" (TAPEX model)"),X_o=l(),$h=a("li"),Kie=a("strong"),z_o=o("transfo-xl"),W_o=o(" \u2014 "),XN=a("a"),Q_o=o("TransfoXLTokenizer"),H_o=o(" (Transformer-XL model)"),U_o=l(),Os=a("li"),Zie=a("strong"),J_o=o("vilt"),Y_o=o(" \u2014 "),zN=a("a"),K_o=o("BertTokenizer"),Z_o=o(" or "),WN=a("a"),euo=o("BertTokenizerFast"),ouo=o(" (ViLT model)"),ruo=l(),Vs=a("li"),ede=a("strong"),tuo=o("visual_bert"),auo=o(" \u2014 "),QN=a("a"),nuo=o("BertTokenizer"),suo=o(" or "),HN=a("a"),luo=o("BertTokenizerFast"),iuo=o(" (VisualBERT model)"),duo=l(),kh=a("li"),ode=a("strong"),cuo=o("wav2vec2"),fuo=o(" \u2014 "),UN=a("a"),muo=o("Wav2Vec2CTCTokenizer"),guo=o(" (Wav2Vec2 model)"),huo=l(),Sh=a("li"),rde=a("strong"),puo=o("wav2vec2-conformer"),_uo=o(" \u2014 "),JN=a("a"),uuo=o("Wav2Vec2CTCTokenizer"),buo=o(" (Wav2Vec2-Conformer model)"),vuo=l(),Rh=a("li"),tde=a("strong"),Fuo=o("wav2vec2_phoneme"),Tuo=o(" \u2014 "),YN=a("a"),Muo=o("Wav2Vec2PhonemeCTCTokenizer"),Euo=o(" (Wav2Vec2Phoneme model)"),Cuo=l(),Xs=a("li"),ade=a("strong"),wuo=o("xglm"),Auo=o(" \u2014 "),KN=a("a"),Luo=o("XGLMTokenizer"),yuo=o(" or "),ZN=a("a"),xuo=o("XGLMTokenizerFast"),$uo=o(" (XGLM model)"),kuo=l(),Ph=a("li"),nde=a("strong"),Suo=o("xlm"),Ruo=o(" \u2014 "),eq=a("a"),Puo=o("XLMTokenizer"),Buo=o(" (XLM model)"),Iuo=l(),Bh=a("li"),sde=a("strong"),Nuo=o("xlm-prophetnet"),quo=o(" \u2014 "),oq=a("a"),juo=o("XLMProphetNetTokenizer"),Duo=o(" (XLM-ProphetNet model)"),Guo=l(),zs=a("li"),lde=a("strong"),Ouo=o("xlm-roberta"),Vuo=o(" \u2014 "),rq=a("a"),Xuo=o("XLMRobertaTokenizer"),zuo=o(" or "),tq=a("a"),Wuo=o("XLMRobertaTokenizerFast"),Quo=o(" (XLM-RoBERTa model)"),Huo=l(),Ws=a("li"),ide=a("strong"),Uuo=o("xlm-roberta-xl"),Juo=o(" \u2014 "),aq=a("a"),Yuo=o("RobertaTokenizer"),Kuo=o(" or "),nq=a("a"),Zuo=o("RobertaTokenizerFast"),e1o=o(" (XLM-RoBERTa-XL model)"),o1o=l(),Qs=a("li"),dde=a("strong"),r1o=o("xlnet"),t1o=o(" \u2014 "),sq=a("a"),a1o=o("XLNetTokenizer"),n1o=o(" or "),lq=a("a"),s1o=o("XLNetTokenizerFast"),l1o=o(" (XLNet model)"),i1o=l(),Hs=a("li"),cde=a("strong"),d1o=o("yoso"),c1o=o(" \u2014 "),iq=a("a"),f1o=o("AlbertTokenizer"),m1o=o(" or "),dq=a("a"),g1o=o("AlbertTokenizerFast"),h1o=o(" (YOSO model)"),p1o=l(),F(Ih.$$.fragment),_1o=l(),Nh=a("div"),F(A6.$$.fragment),u1o=l(),fde=a("p"),b1o=o("Register a new tokenizer in this mapping."),XXe=l(),Di=a("h2"),qh=a("a"),mde=a("span"),F(L6.$$.fragment),v1o=l(),gde=a("span"),F1o=o("AutoFeatureExtractor"),zXe=l(),yo=a("div"),F(y6.$$.fragment),T1o=l(),x6=a("p"),M1o=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),cq=a("a"),E1o=o("AutoFeatureExtractor.from_pretrained()"),C1o=o(" class method."),w1o=l(),$6=a("p"),A1o=o("This class cannot be instantiated directly using "),hde=a("code"),L1o=o("__init__()"),y1o=o(" (throws an error)."),x1o=l(),Ue=a("div"),F(k6.$$.fragment),$1o=l(),pde=a("p"),k1o=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),S1o=l(),Ba=a("p"),R1o=o("The feature extractor class to instantiate is selected based on the "),_de=a("code"),P1o=o("model_type"),B1o=o(` property of the config object
(either passed as an argument or loaded from `),ude=a("code"),I1o=o("pretrained_model_name_or_path"),N1o=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),bde=a("code"),q1o=o("pretrained_model_name_or_path"),j1o=o(":"),D1o=l(),J=a("ul"),jh=a("li"),vde=a("strong"),G1o=o("beit"),O1o=o(" \u2014 "),fq=a("a"),V1o=o("BeitFeatureExtractor"),X1o=o(" (BEiT model)"),z1o=l(),Dh=a("li"),Fde=a("strong"),W1o=o("clip"),Q1o=o(" \u2014 "),mq=a("a"),H1o=o("CLIPFeatureExtractor"),U1o=o(" (CLIP model)"),J1o=l(),Gh=a("li"),Tde=a("strong"),Y1o=o("convnext"),K1o=o(" \u2014 "),gq=a("a"),Z1o=o("ConvNextFeatureExtractor"),e2o=o(" (ConvNeXT model)"),o2o=l(),Oh=a("li"),Mde=a("strong"),r2o=o("cvt"),t2o=o(" \u2014 "),hq=a("a"),a2o=o("ConvNextFeatureExtractor"),n2o=o(" (CvT model)"),s2o=l(),Vh=a("li"),Ede=a("strong"),l2o=o("data2vec-audio"),i2o=o(" \u2014 "),pq=a("a"),d2o=o("Wav2Vec2FeatureExtractor"),c2o=o(" (Data2VecAudio model)"),f2o=l(),Xh=a("li"),Cde=a("strong"),m2o=o("data2vec-vision"),g2o=o(" \u2014 "),_q=a("a"),h2o=o("BeitFeatureExtractor"),p2o=o(" (Data2VecVision model)"),_2o=l(),zh=a("li"),wde=a("strong"),u2o=o("deit"),b2o=o(" \u2014 "),uq=a("a"),v2o=o("DeiTFeatureExtractor"),F2o=o(" (DeiT model)"),T2o=l(),Wh=a("li"),Ade=a("strong"),M2o=o("detr"),E2o=o(" \u2014 "),bq=a("a"),C2o=o("DetrFeatureExtractor"),w2o=o(" (DETR model)"),A2o=l(),Qh=a("li"),Lde=a("strong"),L2o=o("dpt"),y2o=o(" \u2014 "),vq=a("a"),x2o=o("DPTFeatureExtractor"),$2o=o(" (DPT model)"),k2o=l(),Hh=a("li"),yde=a("strong"),S2o=o("flava"),R2o=o(" \u2014 "),Fq=a("a"),P2o=o("FlavaFeatureExtractor"),B2o=o(" (FLAVA model)"),I2o=l(),Uh=a("li"),xde=a("strong"),N2o=o("glpn"),q2o=o(" \u2014 "),Tq=a("a"),j2o=o("GLPNFeatureExtractor"),D2o=o(" (GLPN model)"),G2o=l(),Jh=a("li"),$de=a("strong"),O2o=o("groupvit"),V2o=o(" \u2014 "),Mq=a("a"),X2o=o("CLIPFeatureExtractor"),z2o=o(" (GroupViT model)"),W2o=l(),Yh=a("li"),kde=a("strong"),Q2o=o("hubert"),H2o=o(" \u2014 "),Eq=a("a"),U2o=o("Wav2Vec2FeatureExtractor"),J2o=o(" (Hubert model)"),Y2o=l(),Kh=a("li"),Sde=a("strong"),K2o=o("imagegpt"),Z2o=o(" \u2014 "),Cq=a("a"),ebo=o("ImageGPTFeatureExtractor"),obo=o(" (ImageGPT model)"),rbo=l(),Zh=a("li"),Rde=a("strong"),tbo=o("layoutlmv2"),abo=o(" \u2014 "),wq=a("a"),nbo=o("LayoutLMv2FeatureExtractor"),sbo=o(" (LayoutLMv2 model)"),lbo=l(),ep=a("li"),Pde=a("strong"),ibo=o("layoutlmv3"),dbo=o(" \u2014 "),Aq=a("a"),cbo=o("LayoutLMv3FeatureExtractor"),fbo=o(" (LayoutLMv3 model)"),mbo=l(),op=a("li"),Bde=a("strong"),gbo=o("levit"),hbo=o(" \u2014 "),Lq=a("a"),pbo=o("LevitFeatureExtractor"),_bo=o(" (LeViT model)"),ubo=l(),rp=a("li"),Ide=a("strong"),bbo=o("maskformer"),vbo=o(" \u2014 "),yq=a("a"),Fbo=o("MaskFormerFeatureExtractor"),Tbo=o(" (MaskFormer model)"),Mbo=l(),tp=a("li"),Nde=a("strong"),Ebo=o("mctct"),Cbo=o(" \u2014 "),xq=a("a"),wbo=o("MCTCTFeatureExtractor"),Abo=o(" (M-CTC-T model)"),Lbo=l(),ap=a("li"),qde=a("strong"),ybo=o("mobilevit"),xbo=o(" \u2014 "),$q=a("a"),$bo=o("MobileViTFeatureExtractor"),kbo=o(" (MobileViT model)"),Sbo=l(),np=a("li"),jde=a("strong"),Rbo=o("owlvit"),Pbo=o(" \u2014 "),kq=a("a"),Bbo=o("OwlViTFeatureExtractor"),Ibo=o(" (OWL-ViT model)"),Nbo=l(),sp=a("li"),Dde=a("strong"),qbo=o("perceiver"),jbo=o(" \u2014 "),Sq=a("a"),Dbo=o("PerceiverFeatureExtractor"),Gbo=o(" (Perceiver model)"),Obo=l(),lp=a("li"),Gde=a("strong"),Vbo=o("poolformer"),Xbo=o(" \u2014 "),Rq=a("a"),zbo=o("PoolFormerFeatureExtractor"),Wbo=o(" (PoolFormer model)"),Qbo=l(),ip=a("li"),Ode=a("strong"),Hbo=o("regnet"),Ubo=o(" \u2014 "),Pq=a("a"),Jbo=o("ConvNextFeatureExtractor"),Ybo=o(" (RegNet model)"),Kbo=l(),dp=a("li"),Vde=a("strong"),Zbo=o("resnet"),e3o=o(" \u2014 "),Bq=a("a"),o3o=o("ConvNextFeatureExtractor"),r3o=o(" (ResNet model)"),t3o=l(),cp=a("li"),Xde=a("strong"),a3o=o("segformer"),n3o=o(" \u2014 "),Iq=a("a"),s3o=o("SegformerFeatureExtractor"),l3o=o(" (SegFormer model)"),i3o=l(),fp=a("li"),zde=a("strong"),d3o=o("speech_to_text"),c3o=o(" \u2014 "),Nq=a("a"),f3o=o("Speech2TextFeatureExtractor"),m3o=o(" (Speech2Text model)"),g3o=l(),mp=a("li"),Wde=a("strong"),h3o=o("swin"),p3o=o(" \u2014 "),qq=a("a"),_3o=o("ViTFeatureExtractor"),u3o=o(" (Swin Transformer model)"),b3o=l(),gp=a("li"),Qde=a("strong"),v3o=o("van"),F3o=o(" \u2014 "),jq=a("a"),T3o=o("ConvNextFeatureExtractor"),M3o=o(" (VAN model)"),E3o=l(),hp=a("li"),Hde=a("strong"),C3o=o("vilt"),w3o=o(" \u2014 "),Dq=a("a"),A3o=o("ViltFeatureExtractor"),L3o=o(" (ViLT model)"),y3o=l(),pp=a("li"),Ude=a("strong"),x3o=o("vit"),$3o=o(" \u2014 "),Gq=a("a"),k3o=o("ViTFeatureExtractor"),S3o=o(" (ViT model)"),R3o=l(),_p=a("li"),Jde=a("strong"),P3o=o("vit_mae"),B3o=o(" \u2014 "),Oq=a("a"),I3o=o("ViTFeatureExtractor"),N3o=o(" (ViTMAE model)"),q3o=l(),up=a("li"),Yde=a("strong"),j3o=o("wav2vec2"),D3o=o(" \u2014 "),Vq=a("a"),G3o=o("Wav2Vec2FeatureExtractor"),O3o=o(" (Wav2Vec2 model)"),V3o=l(),bp=a("li"),Kde=a("strong"),X3o=o("wav2vec2-conformer"),z3o=o(" \u2014 "),Xq=a("a"),W3o=o("Wav2Vec2FeatureExtractor"),Q3o=o(" (Wav2Vec2-Conformer model)"),H3o=l(),vp=a("li"),Zde=a("strong"),U3o=o("yolos"),J3o=o(" \u2014 "),zq=a("a"),Y3o=o("YolosFeatureExtractor"),K3o=o(" (YOLOS model)"),Z3o=l(),F(Fp.$$.fragment),evo=l(),F(Tp.$$.fragment),ovo=l(),Mp=a("div"),F(S6.$$.fragment),rvo=l(),ece=a("p"),tvo=o("Register a new feature extractor for this class."),WXe=l(),Gi=a("h2"),Ep=a("a"),oce=a("span"),F(R6.$$.fragment),avo=l(),rce=a("span"),nvo=o("AutoProcessor"),QXe=l(),xo=a("div"),F(P6.$$.fragment),svo=l(),B6=a("p"),lvo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Wq=a("a"),ivo=o("AutoProcessor.from_pretrained()"),dvo=o(" class method."),cvo=l(),I6=a("p"),fvo=o("This class cannot be instantiated directly using "),tce=a("code"),mvo=o("__init__()"),gvo=o(" (throws an error)."),hvo=l(),Je=a("div"),F(N6.$$.fragment),pvo=l(),ace=a("p"),_vo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),uvo=l(),Oi=a("p"),bvo=o("The processor class to instantiate is selected based on the "),nce=a("code"),vvo=o("model_type"),Fvo=o(` property of the config object (either
passed as an argument or loaded from `),sce=a("code"),Tvo=o("pretrained_model_name_or_path"),Mvo=o(" if possible):"),Evo=l(),fe=a("ul"),Cp=a("li"),lce=a("strong"),Cvo=o("clip"),wvo=o(" \u2014 "),Qq=a("a"),Avo=o("CLIPProcessor"),Lvo=o(" (CLIP model)"),yvo=l(),wp=a("li"),ice=a("strong"),xvo=o("flava"),$vo=o(" \u2014 "),Hq=a("a"),kvo=o("FlavaProcessor"),Svo=o(" (FLAVA model)"),Rvo=l(),Ap=a("li"),dce=a("strong"),Pvo=o("groupvit"),Bvo=o(" \u2014 "),Uq=a("a"),Ivo=o("CLIPProcessor"),Nvo=o(" (GroupViT model)"),qvo=l(),Lp=a("li"),cce=a("strong"),jvo=o("layoutlmv2"),Dvo=o(" \u2014 "),Jq=a("a"),Gvo=o("LayoutLMv2Processor"),Ovo=o(" (LayoutLMv2 model)"),Vvo=l(),yp=a("li"),fce=a("strong"),Xvo=o("layoutlmv3"),zvo=o(" \u2014 "),Yq=a("a"),Wvo=o("LayoutLMv3Processor"),Qvo=o(" (LayoutLMv3 model)"),Hvo=l(),xp=a("li"),mce=a("strong"),Uvo=o("layoutxlm"),Jvo=o(" \u2014 "),Kq=a("a"),Yvo=o("LayoutXLMProcessor"),Kvo=o(" (LayoutXLM model)"),Zvo=l(),$p=a("li"),gce=a("strong"),eFo=o("owlvit"),oFo=o(" \u2014 "),Zq=a("a"),rFo=o("OwlViTProcessor"),tFo=o(" (OWL-ViT model)"),aFo=l(),kp=a("li"),hce=a("strong"),nFo=o("sew"),sFo=o(" \u2014 "),ej=a("a"),lFo=o("Wav2Vec2Processor"),iFo=o(" (SEW model)"),dFo=l(),Sp=a("li"),pce=a("strong"),cFo=o("sew-d"),fFo=o(" \u2014 "),oj=a("a"),mFo=o("Wav2Vec2Processor"),gFo=o(" (SEW-D model)"),hFo=l(),Rp=a("li"),_ce=a("strong"),pFo=o("speech_to_text"),_Fo=o(" \u2014 "),rj=a("a"),uFo=o("Speech2TextProcessor"),bFo=o(" (Speech2Text model)"),vFo=l(),Pp=a("li"),uce=a("strong"),FFo=o("speech_to_text_2"),TFo=o(" \u2014 "),tj=a("a"),MFo=o("Speech2Text2Processor"),EFo=o(" (Speech2Text2 model)"),CFo=l(),Bp=a("li"),bce=a("strong"),wFo=o("trocr"),AFo=o(" \u2014 "),aj=a("a"),LFo=o("TrOCRProcessor"),yFo=o(" (TrOCR model)"),xFo=l(),Ip=a("li"),vce=a("strong"),$Fo=o("unispeech"),kFo=o(" \u2014 "),nj=a("a"),SFo=o("Wav2Vec2Processor"),RFo=o(" (UniSpeech model)"),PFo=l(),Np=a("li"),Fce=a("strong"),BFo=o("unispeech-sat"),IFo=o(" \u2014 "),sj=a("a"),NFo=o("Wav2Vec2Processor"),qFo=o(" (UniSpeechSat model)"),jFo=l(),qp=a("li"),Tce=a("strong"),DFo=o("vilt"),GFo=o(" \u2014 "),lj=a("a"),OFo=o("ViltProcessor"),VFo=o(" (ViLT model)"),XFo=l(),jp=a("li"),Mce=a("strong"),zFo=o("vision-text-dual-encoder"),WFo=o(" \u2014 "),ij=a("a"),QFo=o("VisionTextDualEncoderProcessor"),HFo=o(" (VisionTextDualEncoder model)"),UFo=l(),Dp=a("li"),Ece=a("strong"),JFo=o("wav2vec2"),YFo=o(" \u2014 "),dj=a("a"),KFo=o("Wav2Vec2Processor"),ZFo=o(" (Wav2Vec2 model)"),eTo=l(),Gp=a("li"),Cce=a("strong"),oTo=o("wav2vec2-conformer"),rTo=o(" \u2014 "),cj=a("a"),tTo=o("Wav2Vec2Processor"),aTo=o(" (Wav2Vec2-Conformer model)"),nTo=l(),Op=a("li"),wce=a("strong"),sTo=o("wavlm"),lTo=o(" \u2014 "),fj=a("a"),iTo=o("Wav2Vec2Processor"),dTo=o(" (WavLM model)"),cTo=l(),F(Vp.$$.fragment),fTo=l(),F(Xp.$$.fragment),mTo=l(),zp=a("div"),F(q6.$$.fragment),gTo=l(),Ace=a("p"),hTo=o("Register a new processor for this class."),HXe=l(),Vi=a("h2"),Wp=a("a"),Lce=a("span"),F(j6.$$.fragment),pTo=l(),yce=a("span"),_To=o("AutoModel"),UXe=l(),$o=a("div"),F(D6.$$.fragment),uTo=l(),Xi=a("p"),bTo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mj=a("a"),vTo=o("from_pretrained()"),FTo=o(" class method or the "),gj=a("a"),TTo=o("from_config()"),MTo=o(` class
method.`),ETo=l(),G6=a("p"),CTo=o("This class cannot be instantiated directly using "),xce=a("code"),wTo=o("__init__()"),ATo=o(" (throws an error)."),LTo=l(),it=a("div"),F(O6.$$.fragment),yTo=l(),$ce=a("p"),xTo=o("Instantiates one of the base model classes of the library from a configuration."),$To=l(),zi=a("p"),kTo=o(`Note:
Loading a model from its configuration file does `),kce=a("strong"),STo=o("not"),RTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hj=a("a"),PTo=o("from_pretrained()"),BTo=o(" to load the model weights."),ITo=l(),F(Qp.$$.fragment),NTo=l(),Ye=a("div"),F(V6.$$.fragment),qTo=l(),Sce=a("p"),jTo=o("Instantiate one of the base model classes of the library from a pretrained model."),DTo=l(),Ia=a("p"),GTo=o("The model class to instantiate is selected based on the "),Rce=a("code"),OTo=o("model_type"),VTo=o(` property of the config object (either
passed as an argument or loaded from `),Pce=a("code"),XTo=o("pretrained_model_name_or_path"),zTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bce=a("code"),WTo=o("pretrained_model_name_or_path"),QTo=o(":"),HTo=l(),y=a("ul"),Hp=a("li"),Ice=a("strong"),UTo=o("albert"),JTo=o(" \u2014 "),pj=a("a"),YTo=o("AlbertModel"),KTo=o(" (ALBERT model)"),ZTo=l(),Up=a("li"),Nce=a("strong"),e7o=o("bart"),o7o=o(" \u2014 "),_j=a("a"),r7o=o("BartModel"),t7o=o(" (BART model)"),a7o=l(),Jp=a("li"),qce=a("strong"),n7o=o("beit"),s7o=o(" \u2014 "),uj=a("a"),l7o=o("BeitModel"),i7o=o(" (BEiT model)"),d7o=l(),Yp=a("li"),jce=a("strong"),c7o=o("bert"),f7o=o(" \u2014 "),bj=a("a"),m7o=o("BertModel"),g7o=o(" (BERT model)"),h7o=l(),Kp=a("li"),Dce=a("strong"),p7o=o("bert-generation"),_7o=o(" \u2014 "),vj=a("a"),u7o=o("BertGenerationEncoder"),b7o=o(" (Bert Generation model)"),v7o=l(),Zp=a("li"),Gce=a("strong"),F7o=o("big_bird"),T7o=o(" \u2014 "),Fj=a("a"),M7o=o("BigBirdModel"),E7o=o(" (BigBird model)"),C7o=l(),e_=a("li"),Oce=a("strong"),w7o=o("bigbird_pegasus"),A7o=o(" \u2014 "),Tj=a("a"),L7o=o("BigBirdPegasusModel"),y7o=o(" (BigBird-Pegasus model)"),x7o=l(),o_=a("li"),Vce=a("strong"),$7o=o("blenderbot"),k7o=o(" \u2014 "),Mj=a("a"),S7o=o("BlenderbotModel"),R7o=o(" (Blenderbot model)"),P7o=l(),r_=a("li"),Xce=a("strong"),B7o=o("blenderbot-small"),I7o=o(" \u2014 "),Ej=a("a"),N7o=o("BlenderbotSmallModel"),q7o=o(" (BlenderbotSmall model)"),j7o=l(),t_=a("li"),zce=a("strong"),D7o=o("bloom"),G7o=o(" \u2014 "),Cj=a("a"),O7o=o("BloomModel"),V7o=o(" (BLOOM model)"),X7o=l(),a_=a("li"),Wce=a("strong"),z7o=o("camembert"),W7o=o(" \u2014 "),wj=a("a"),Q7o=o("CamembertModel"),H7o=o(" (CamemBERT model)"),U7o=l(),n_=a("li"),Qce=a("strong"),J7o=o("canine"),Y7o=o(" \u2014 "),Aj=a("a"),K7o=o("CanineModel"),Z7o=o(" (CANINE model)"),e8o=l(),s_=a("li"),Hce=a("strong"),o8o=o("clip"),r8o=o(" \u2014 "),Lj=a("a"),t8o=o("CLIPModel"),a8o=o(" (CLIP model)"),n8o=l(),l_=a("li"),Uce=a("strong"),s8o=o("codegen"),l8o=o(" \u2014 "),yj=a("a"),i8o=o("CodeGenModel"),d8o=o(" (CodeGen model)"),c8o=l(),i_=a("li"),Jce=a("strong"),f8o=o("convbert"),m8o=o(" \u2014 "),xj=a("a"),g8o=o("ConvBertModel"),h8o=o(" (ConvBERT model)"),p8o=l(),d_=a("li"),Yce=a("strong"),_8o=o("convnext"),u8o=o(" \u2014 "),$j=a("a"),b8o=o("ConvNextModel"),v8o=o(" (ConvNeXT model)"),F8o=l(),c_=a("li"),Kce=a("strong"),T8o=o("ctrl"),M8o=o(" \u2014 "),kj=a("a"),E8o=o("CTRLModel"),C8o=o(" (CTRL model)"),w8o=l(),f_=a("li"),Zce=a("strong"),A8o=o("cvt"),L8o=o(" \u2014 "),Sj=a("a"),y8o=o("CvtModel"),x8o=o(" (CvT model)"),$8o=l(),m_=a("li"),efe=a("strong"),k8o=o("data2vec-audio"),S8o=o(" \u2014 "),Rj=a("a"),R8o=o("Data2VecAudioModel"),P8o=o(" (Data2VecAudio model)"),B8o=l(),g_=a("li"),ofe=a("strong"),I8o=o("data2vec-text"),N8o=o(" \u2014 "),Pj=a("a"),q8o=o("Data2VecTextModel"),j8o=o(" (Data2VecText model)"),D8o=l(),h_=a("li"),rfe=a("strong"),G8o=o("data2vec-vision"),O8o=o(" \u2014 "),Bj=a("a"),V8o=o("Data2VecVisionModel"),X8o=o(" (Data2VecVision model)"),z8o=l(),p_=a("li"),tfe=a("strong"),W8o=o("deberta"),Q8o=o(" \u2014 "),Ij=a("a"),H8o=o("DebertaModel"),U8o=o(" (DeBERTa model)"),J8o=l(),__=a("li"),afe=a("strong"),Y8o=o("deberta-v2"),K8o=o(" \u2014 "),Nj=a("a"),Z8o=o("DebertaV2Model"),e9o=o(" (DeBERTa-v2 model)"),o9o=l(),u_=a("li"),nfe=a("strong"),r9o=o("decision_transformer"),t9o=o(" \u2014 "),qj=a("a"),a9o=o("DecisionTransformerModel"),n9o=o(" (Decision Transformer model)"),s9o=l(),b_=a("li"),sfe=a("strong"),l9o=o("deit"),i9o=o(" \u2014 "),jj=a("a"),d9o=o("DeiTModel"),c9o=o(" (DeiT model)"),f9o=l(),v_=a("li"),lfe=a("strong"),m9o=o("detr"),g9o=o(" \u2014 "),Dj=a("a"),h9o=o("DetrModel"),p9o=o(" (DETR model)"),_9o=l(),F_=a("li"),ife=a("strong"),u9o=o("distilbert"),b9o=o(" \u2014 "),Gj=a("a"),v9o=o("DistilBertModel"),F9o=o(" (DistilBERT model)"),T9o=l(),T_=a("li"),dfe=a("strong"),M9o=o("dpr"),E9o=o(" \u2014 "),Oj=a("a"),C9o=o("DPRQuestionEncoder"),w9o=o(" (DPR model)"),A9o=l(),M_=a("li"),cfe=a("strong"),L9o=o("dpt"),y9o=o(" \u2014 "),Vj=a("a"),x9o=o("DPTModel"),$9o=o(" (DPT model)"),k9o=l(),E_=a("li"),ffe=a("strong"),S9o=o("electra"),R9o=o(" \u2014 "),Xj=a("a"),P9o=o("ElectraModel"),B9o=o(" (ELECTRA model)"),I9o=l(),C_=a("li"),mfe=a("strong"),N9o=o("flaubert"),q9o=o(" \u2014 "),zj=a("a"),j9o=o("FlaubertModel"),D9o=o(" (FlauBERT model)"),G9o=l(),w_=a("li"),gfe=a("strong"),O9o=o("flava"),V9o=o(" \u2014 "),Wj=a("a"),X9o=o("FlavaModel"),z9o=o(" (FLAVA model)"),W9o=l(),A_=a("li"),hfe=a("strong"),Q9o=o("fnet"),H9o=o(" \u2014 "),Qj=a("a"),U9o=o("FNetModel"),J9o=o(" (FNet model)"),Y9o=l(),L_=a("li"),pfe=a("strong"),K9o=o("fsmt"),Z9o=o(" \u2014 "),Hj=a("a"),eMo=o("FSMTModel"),oMo=o(" (FairSeq Machine-Translation model)"),rMo=l(),Us=a("li"),_fe=a("strong"),tMo=o("funnel"),aMo=o(" \u2014 "),Uj=a("a"),nMo=o("FunnelModel"),sMo=o(" or "),Jj=a("a"),lMo=o("FunnelBaseModel"),iMo=o(" (Funnel Transformer model)"),dMo=l(),y_=a("li"),ufe=a("strong"),cMo=o("glpn"),fMo=o(" \u2014 "),Yj=a("a"),mMo=o("GLPNModel"),gMo=o(" (GLPN model)"),hMo=l(),x_=a("li"),bfe=a("strong"),pMo=o("gpt2"),_Mo=o(" \u2014 "),Kj=a("a"),uMo=o("GPT2Model"),bMo=o(" (OpenAI GPT-2 model)"),vMo=l(),$_=a("li"),vfe=a("strong"),FMo=o("gpt_neo"),TMo=o(" \u2014 "),Zj=a("a"),MMo=o("GPTNeoModel"),EMo=o(" (GPT Neo model)"),CMo=l(),k_=a("li"),Ffe=a("strong"),wMo=o("gpt_neox"),AMo=o(" \u2014 "),eD=a("a"),LMo=o("GPTNeoXModel"),yMo=o(" (GPT NeoX model)"),xMo=l(),S_=a("li"),Tfe=a("strong"),$Mo=o("gptj"),kMo=o(" \u2014 "),oD=a("a"),SMo=o("GPTJModel"),RMo=o(" (GPT-J model)"),PMo=l(),R_=a("li"),Mfe=a("strong"),BMo=o("groupvit"),IMo=o(" \u2014 "),rD=a("a"),NMo=o("GroupViTModel"),qMo=o(" (GroupViT model)"),jMo=l(),P_=a("li"),Efe=a("strong"),DMo=o("hubert"),GMo=o(" \u2014 "),tD=a("a"),OMo=o("HubertModel"),VMo=o(" (Hubert model)"),XMo=l(),B_=a("li"),Cfe=a("strong"),zMo=o("ibert"),WMo=o(" \u2014 "),aD=a("a"),QMo=o("IBertModel"),HMo=o(" (I-BERT model)"),UMo=l(),I_=a("li"),wfe=a("strong"),JMo=o("imagegpt"),YMo=o(" \u2014 "),nD=a("a"),KMo=o("ImageGPTModel"),ZMo=o(" (ImageGPT model)"),e4o=l(),N_=a("li"),Afe=a("strong"),o4o=o("layoutlm"),r4o=o(" \u2014 "),sD=a("a"),t4o=o("LayoutLMModel"),a4o=o(" (LayoutLM model)"),n4o=l(),q_=a("li"),Lfe=a("strong"),s4o=o("layoutlmv2"),l4o=o(" \u2014 "),lD=a("a"),i4o=o("LayoutLMv2Model"),d4o=o(" (LayoutLMv2 model)"),c4o=l(),j_=a("li"),yfe=a("strong"),f4o=o("layoutlmv3"),m4o=o(" \u2014 "),iD=a("a"),g4o=o("LayoutLMv3Model"),h4o=o(" (LayoutLMv3 model)"),p4o=l(),D_=a("li"),xfe=a("strong"),_4o=o("led"),u4o=o(" \u2014 "),dD=a("a"),b4o=o("LEDModel"),v4o=o(" (LED model)"),F4o=l(),G_=a("li"),$fe=a("strong"),T4o=o("levit"),M4o=o(" \u2014 "),cD=a("a"),E4o=o("LevitModel"),C4o=o(" (LeViT model)"),w4o=l(),O_=a("li"),kfe=a("strong"),A4o=o("longformer"),L4o=o(" \u2014 "),fD=a("a"),y4o=o("LongformerModel"),x4o=o(" (Longformer model)"),$4o=l(),V_=a("li"),Sfe=a("strong"),k4o=o("longt5"),S4o=o(" \u2014 "),mD=a("a"),R4o=o("LongT5Model"),P4o=o(" (LongT5 model)"),B4o=l(),X_=a("li"),Rfe=a("strong"),I4o=o("luke"),N4o=o(" \u2014 "),gD=a("a"),q4o=o("LukeModel"),j4o=o(" (LUKE model)"),D4o=l(),z_=a("li"),Pfe=a("strong"),G4o=o("lxmert"),O4o=o(" \u2014 "),hD=a("a"),V4o=o("LxmertModel"),X4o=o(" (LXMERT model)"),z4o=l(),W_=a("li"),Bfe=a("strong"),W4o=o("m2m_100"),Q4o=o(" \u2014 "),pD=a("a"),H4o=o("M2M100Model"),U4o=o(" (M2M100 model)"),J4o=l(),Q_=a("li"),Ife=a("strong"),Y4o=o("marian"),K4o=o(" \u2014 "),_D=a("a"),Z4o=o("MarianModel"),eEo=o(" (Marian model)"),oEo=l(),H_=a("li"),Nfe=a("strong"),rEo=o("maskformer"),tEo=o(" \u2014 "),uD=a("a"),aEo=o("MaskFormerModel"),nEo=o(" (MaskFormer model)"),sEo=l(),U_=a("li"),qfe=a("strong"),lEo=o("mbart"),iEo=o(" \u2014 "),bD=a("a"),dEo=o("MBartModel"),cEo=o(" (mBART model)"),fEo=l(),J_=a("li"),jfe=a("strong"),mEo=o("mctct"),gEo=o(" \u2014 "),vD=a("a"),hEo=o("MCTCTModel"),pEo=o(" (M-CTC-T model)"),_Eo=l(),Y_=a("li"),Dfe=a("strong"),uEo=o("megatron-bert"),bEo=o(" \u2014 "),FD=a("a"),vEo=o("MegatronBertModel"),FEo=o(" (Megatron-BERT model)"),TEo=l(),K_=a("li"),Gfe=a("strong"),MEo=o("mobilebert"),EEo=o(" \u2014 "),TD=a("a"),CEo=o("MobileBertModel"),wEo=o(" (MobileBERT model)"),AEo=l(),Z_=a("li"),Ofe=a("strong"),LEo=o("mobilevit"),yEo=o(" \u2014 "),MD=a("a"),xEo=o("MobileViTModel"),$Eo=o(" (MobileViT model)"),kEo=l(),eu=a("li"),Vfe=a("strong"),SEo=o("mpnet"),REo=o(" \u2014 "),ED=a("a"),PEo=o("MPNetModel"),BEo=o(" (MPNet model)"),IEo=l(),ou=a("li"),Xfe=a("strong"),NEo=o("mt5"),qEo=o(" \u2014 "),CD=a("a"),jEo=o("MT5Model"),DEo=o(" (MT5 model)"),GEo=l(),ru=a("li"),zfe=a("strong"),OEo=o("mvp"),VEo=o(" \u2014 "),wD=a("a"),XEo=o("MvpModel"),zEo=o(" (MVP model)"),WEo=l(),tu=a("li"),Wfe=a("strong"),QEo=o("nezha"),HEo=o(" \u2014 "),AD=a("a"),UEo=o("NezhaModel"),JEo=o(" (Nezha model)"),YEo=l(),au=a("li"),Qfe=a("strong"),KEo=o("nllb"),ZEo=o(" \u2014 "),LD=a("a"),eCo=o("M2M100Model"),oCo=o(" (NLLB model)"),rCo=l(),nu=a("li"),Hfe=a("strong"),tCo=o("nystromformer"),aCo=o(" \u2014 "),yD=a("a"),nCo=o("NystromformerModel"),sCo=o(" (Nystr\xF6mformer model)"),lCo=l(),su=a("li"),Ufe=a("strong"),iCo=o("openai-gpt"),dCo=o(" \u2014 "),xD=a("a"),cCo=o("OpenAIGPTModel"),fCo=o(" (OpenAI GPT model)"),mCo=l(),lu=a("li"),Jfe=a("strong"),gCo=o("opt"),hCo=o(" \u2014 "),$D=a("a"),pCo=o("OPTModel"),_Co=o(" (OPT model)"),uCo=l(),iu=a("li"),Yfe=a("strong"),bCo=o("owlvit"),vCo=o(" \u2014 "),kD=a("a"),FCo=o("OwlViTModel"),TCo=o(" (OWL-ViT model)"),MCo=l(),du=a("li"),Kfe=a("strong"),ECo=o("pegasus"),CCo=o(" \u2014 "),SD=a("a"),wCo=o("PegasusModel"),ACo=o(" (Pegasus model)"),LCo=l(),cu=a("li"),Zfe=a("strong"),yCo=o("perceiver"),xCo=o(" \u2014 "),RD=a("a"),$Co=o("PerceiverModel"),kCo=o(" (Perceiver model)"),SCo=l(),fu=a("li"),eme=a("strong"),RCo=o("plbart"),PCo=o(" \u2014 "),PD=a("a"),BCo=o("PLBartModel"),ICo=o(" (PLBart model)"),NCo=l(),mu=a("li"),ome=a("strong"),qCo=o("poolformer"),jCo=o(" \u2014 "),BD=a("a"),DCo=o("PoolFormerModel"),GCo=o(" (PoolFormer model)"),OCo=l(),gu=a("li"),rme=a("strong"),VCo=o("prophetnet"),XCo=o(" \u2014 "),ID=a("a"),zCo=o("ProphetNetModel"),WCo=o(" (ProphetNet model)"),QCo=l(),hu=a("li"),tme=a("strong"),HCo=o("qdqbert"),UCo=o(" \u2014 "),ND=a("a"),JCo=o("QDQBertModel"),YCo=o(" (QDQBert model)"),KCo=l(),pu=a("li"),ame=a("strong"),ZCo=o("reformer"),e5o=o(" \u2014 "),qD=a("a"),o5o=o("ReformerModel"),r5o=o(" (Reformer model)"),t5o=l(),_u=a("li"),nme=a("strong"),a5o=o("regnet"),n5o=o(" \u2014 "),jD=a("a"),s5o=o("RegNetModel"),l5o=o(" (RegNet model)"),i5o=l(),uu=a("li"),sme=a("strong"),d5o=o("rembert"),c5o=o(" \u2014 "),DD=a("a"),f5o=o("RemBertModel"),m5o=o(" (RemBERT model)"),g5o=l(),bu=a("li"),lme=a("strong"),h5o=o("resnet"),p5o=o(" \u2014 "),GD=a("a"),_5o=o("ResNetModel"),u5o=o(" (ResNet model)"),b5o=l(),vu=a("li"),ime=a("strong"),v5o=o("retribert"),F5o=o(" \u2014 "),OD=a("a"),T5o=o("RetriBertModel"),M5o=o(" (RetriBERT model)"),E5o=l(),Fu=a("li"),dme=a("strong"),C5o=o("roberta"),w5o=o(" \u2014 "),VD=a("a"),A5o=o("RobertaModel"),L5o=o(" (RoBERTa model)"),y5o=l(),Tu=a("li"),cme=a("strong"),x5o=o("roformer"),$5o=o(" \u2014 "),XD=a("a"),k5o=o("RoFormerModel"),S5o=o(" (RoFormer model)"),R5o=l(),Mu=a("li"),fme=a("strong"),P5o=o("segformer"),B5o=o(" \u2014 "),zD=a("a"),I5o=o("SegformerModel"),N5o=o(" (SegFormer model)"),q5o=l(),Eu=a("li"),mme=a("strong"),j5o=o("sew"),D5o=o(" \u2014 "),WD=a("a"),G5o=o("SEWModel"),O5o=o(" (SEW model)"),V5o=l(),Cu=a("li"),gme=a("strong"),X5o=o("sew-d"),z5o=o(" \u2014 "),QD=a("a"),W5o=o("SEWDModel"),Q5o=o(" (SEW-D model)"),H5o=l(),wu=a("li"),hme=a("strong"),U5o=o("speech_to_text"),J5o=o(" \u2014 "),HD=a("a"),Y5o=o("Speech2TextModel"),K5o=o(" (Speech2Text model)"),Z5o=l(),Au=a("li"),pme=a("strong"),e0o=o("splinter"),o0o=o(" \u2014 "),UD=a("a"),r0o=o("SplinterModel"),t0o=o(" (Splinter model)"),a0o=l(),Lu=a("li"),_me=a("strong"),n0o=o("squeezebert"),s0o=o(" \u2014 "),JD=a("a"),l0o=o("SqueezeBertModel"),i0o=o(" (SqueezeBERT model)"),d0o=l(),yu=a("li"),ume=a("strong"),c0o=o("swin"),f0o=o(" \u2014 "),YD=a("a"),m0o=o("SwinModel"),g0o=o(" (Swin Transformer model)"),h0o=l(),xu=a("li"),bme=a("strong"),p0o=o("t5"),_0o=o(" \u2014 "),KD=a("a"),u0o=o("T5Model"),b0o=o(" (T5 model)"),v0o=l(),$u=a("li"),vme=a("strong"),F0o=o("tapas"),T0o=o(" \u2014 "),ZD=a("a"),M0o=o("TapasModel"),E0o=o(" (TAPAS model)"),C0o=l(),ku=a("li"),Fme=a("strong"),w0o=o("trajectory_transformer"),A0o=o(" \u2014 "),eG=a("a"),L0o=o("TrajectoryTransformerModel"),y0o=o(" (Trajectory Transformer model)"),x0o=l(),Su=a("li"),Tme=a("strong"),$0o=o("transfo-xl"),k0o=o(" \u2014 "),oG=a("a"),S0o=o("TransfoXLModel"),R0o=o(" (Transformer-XL model)"),P0o=l(),Ru=a("li"),Mme=a("strong"),B0o=o("unispeech"),I0o=o(" \u2014 "),rG=a("a"),N0o=o("UniSpeechModel"),q0o=o(" (UniSpeech model)"),j0o=l(),Pu=a("li"),Eme=a("strong"),D0o=o("unispeech-sat"),G0o=o(" \u2014 "),tG=a("a"),O0o=o("UniSpeechSatModel"),V0o=o(" (UniSpeechSat model)"),X0o=l(),Bu=a("li"),Cme=a("strong"),z0o=o("van"),W0o=o(" \u2014 "),aG=a("a"),Q0o=o("VanModel"),H0o=o(" (VAN model)"),U0o=l(),Iu=a("li"),wme=a("strong"),J0o=o("vilt"),Y0o=o(" \u2014 "),nG=a("a"),K0o=o("ViltModel"),Z0o=o(" (ViLT model)"),ewo=l(),Nu=a("li"),Ame=a("strong"),owo=o("vision-text-dual-encoder"),rwo=o(" \u2014 "),sG=a("a"),two=o("VisionTextDualEncoderModel"),awo=o(" (VisionTextDualEncoder model)"),nwo=l(),qu=a("li"),Lme=a("strong"),swo=o("visual_bert"),lwo=o(" \u2014 "),lG=a("a"),iwo=o("VisualBertModel"),dwo=o(" (VisualBERT model)"),cwo=l(),ju=a("li"),yme=a("strong"),fwo=o("vit"),mwo=o(" \u2014 "),iG=a("a"),gwo=o("ViTModel"),hwo=o(" (ViT model)"),pwo=l(),Du=a("li"),xme=a("strong"),_wo=o("vit_mae"),uwo=o(" \u2014 "),dG=a("a"),bwo=o("ViTMAEModel"),vwo=o(" (ViTMAE model)"),Fwo=l(),Gu=a("li"),$me=a("strong"),Two=o("wav2vec2"),Mwo=o(" \u2014 "),cG=a("a"),Ewo=o("Wav2Vec2Model"),Cwo=o(" (Wav2Vec2 model)"),wwo=l(),Ou=a("li"),kme=a("strong"),Awo=o("wav2vec2-conformer"),Lwo=o(" \u2014 "),fG=a("a"),ywo=o("Wav2Vec2ConformerModel"),xwo=o(" (Wav2Vec2-Conformer model)"),$wo=l(),Vu=a("li"),Sme=a("strong"),kwo=o("wavlm"),Swo=o(" \u2014 "),mG=a("a"),Rwo=o("WavLMModel"),Pwo=o(" (WavLM model)"),Bwo=l(),Xu=a("li"),Rme=a("strong"),Iwo=o("xglm"),Nwo=o(" \u2014 "),gG=a("a"),qwo=o("XGLMModel"),jwo=o(" (XGLM model)"),Dwo=l(),zu=a("li"),Pme=a("strong"),Gwo=o("xlm"),Owo=o(" \u2014 "),hG=a("a"),Vwo=o("XLMModel"),Xwo=o(" (XLM model)"),zwo=l(),Wu=a("li"),Bme=a("strong"),Wwo=o("xlm-prophetnet"),Qwo=o(" \u2014 "),pG=a("a"),Hwo=o("XLMProphetNetModel"),Uwo=o(" (XLM-ProphetNet model)"),Jwo=l(),Qu=a("li"),Ime=a("strong"),Ywo=o("xlm-roberta"),Kwo=o(" \u2014 "),_G=a("a"),Zwo=o("XLMRobertaModel"),eAo=o(" (XLM-RoBERTa model)"),oAo=l(),Hu=a("li"),Nme=a("strong"),rAo=o("xlm-roberta-xl"),tAo=o(" \u2014 "),uG=a("a"),aAo=o("XLMRobertaXLModel"),nAo=o(" (XLM-RoBERTa-XL model)"),sAo=l(),Uu=a("li"),qme=a("strong"),lAo=o("xlnet"),iAo=o(" \u2014 "),bG=a("a"),dAo=o("XLNetModel"),cAo=o(" (XLNet model)"),fAo=l(),Ju=a("li"),jme=a("strong"),mAo=o("yolos"),gAo=o(" \u2014 "),vG=a("a"),hAo=o("YolosModel"),pAo=o(" (YOLOS model)"),_Ao=l(),Yu=a("li"),Dme=a("strong"),uAo=o("yoso"),bAo=o(" \u2014 "),FG=a("a"),vAo=o("YosoModel"),FAo=o(" (YOSO model)"),TAo=l(),Ku=a("p"),MAo=o("The model is set in evaluation mode by default using "),Gme=a("code"),EAo=o("model.eval()"),CAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ome=a("code"),wAo=o("model.train()"),AAo=l(),F(Zu.$$.fragment),JXe=l(),Wi=a("h2"),e1=a("a"),Vme=a("span"),F(X6.$$.fragment),LAo=l(),Xme=a("span"),yAo=o("AutoModelForPreTraining"),YXe=l(),ko=a("div"),F(z6.$$.fragment),xAo=l(),Qi=a("p"),$Ao=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),TG=a("a"),kAo=o("from_pretrained()"),SAo=o(" class method or the "),MG=a("a"),RAo=o("from_config()"),PAo=o(` class
method.`),BAo=l(),W6=a("p"),IAo=o("This class cannot be instantiated directly using "),zme=a("code"),NAo=o("__init__()"),qAo=o(" (throws an error)."),jAo=l(),dt=a("div"),F(Q6.$$.fragment),DAo=l(),Wme=a("p"),GAo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),OAo=l(),Hi=a("p"),VAo=o(`Note:
Loading a model from its configuration file does `),Qme=a("strong"),XAo=o("not"),zAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EG=a("a"),WAo=o("from_pretrained()"),QAo=o(" to load the model weights."),HAo=l(),F(o1.$$.fragment),UAo=l(),Ke=a("div"),F(H6.$$.fragment),JAo=l(),Hme=a("p"),YAo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),KAo=l(),Na=a("p"),ZAo=o("The model class to instantiate is selected based on the "),Ume=a("code"),e6o=o("model_type"),o6o=o(` property of the config object (either
passed as an argument or loaded from `),Jme=a("code"),r6o=o("pretrained_model_name_or_path"),t6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yme=a("code"),a6o=o("pretrained_model_name_or_path"),n6o=o(":"),s6o=l(),G=a("ul"),r1=a("li"),Kme=a("strong"),l6o=o("albert"),i6o=o(" \u2014 "),CG=a("a"),d6o=o("AlbertForPreTraining"),c6o=o(" (ALBERT model)"),f6o=l(),t1=a("li"),Zme=a("strong"),m6o=o("bart"),g6o=o(" \u2014 "),wG=a("a"),h6o=o("BartForConditionalGeneration"),p6o=o(" (BART model)"),_6o=l(),a1=a("li"),ege=a("strong"),u6o=o("bert"),b6o=o(" \u2014 "),AG=a("a"),v6o=o("BertForPreTraining"),F6o=o(" (BERT model)"),T6o=l(),n1=a("li"),oge=a("strong"),M6o=o("big_bird"),E6o=o(" \u2014 "),LG=a("a"),C6o=o("BigBirdForPreTraining"),w6o=o(" (BigBird model)"),A6o=l(),s1=a("li"),rge=a("strong"),L6o=o("bloom"),y6o=o(" \u2014 "),yG=a("a"),x6o=o("BloomForCausalLM"),$6o=o(" (BLOOM model)"),k6o=l(),l1=a("li"),tge=a("strong"),S6o=o("camembert"),R6o=o(" \u2014 "),xG=a("a"),P6o=o("CamembertForMaskedLM"),B6o=o(" (CamemBERT model)"),I6o=l(),i1=a("li"),age=a("strong"),N6o=o("ctrl"),q6o=o(" \u2014 "),$G=a("a"),j6o=o("CTRLLMHeadModel"),D6o=o(" (CTRL model)"),G6o=l(),d1=a("li"),nge=a("strong"),O6o=o("data2vec-text"),V6o=o(" \u2014 "),kG=a("a"),X6o=o("Data2VecTextForMaskedLM"),z6o=o(" (Data2VecText model)"),W6o=l(),c1=a("li"),sge=a("strong"),Q6o=o("deberta"),H6o=o(" \u2014 "),SG=a("a"),U6o=o("DebertaForMaskedLM"),J6o=o(" (DeBERTa model)"),Y6o=l(),f1=a("li"),lge=a("strong"),K6o=o("deberta-v2"),Z6o=o(" \u2014 "),RG=a("a"),eLo=o("DebertaV2ForMaskedLM"),oLo=o(" (DeBERTa-v2 model)"),rLo=l(),m1=a("li"),ige=a("strong"),tLo=o("distilbert"),aLo=o(" \u2014 "),PG=a("a"),nLo=o("DistilBertForMaskedLM"),sLo=o(" (DistilBERT model)"),lLo=l(),g1=a("li"),dge=a("strong"),iLo=o("electra"),dLo=o(" \u2014 "),BG=a("a"),cLo=o("ElectraForPreTraining"),fLo=o(" (ELECTRA model)"),mLo=l(),h1=a("li"),cge=a("strong"),gLo=o("flaubert"),hLo=o(" \u2014 "),IG=a("a"),pLo=o("FlaubertWithLMHeadModel"),_Lo=o(" (FlauBERT model)"),uLo=l(),p1=a("li"),fge=a("strong"),bLo=o("flava"),vLo=o(" \u2014 "),NG=a("a"),FLo=o("FlavaForPreTraining"),TLo=o(" (FLAVA model)"),MLo=l(),_1=a("li"),mge=a("strong"),ELo=o("fnet"),CLo=o(" \u2014 "),qG=a("a"),wLo=o("FNetForPreTraining"),ALo=o(" (FNet model)"),LLo=l(),u1=a("li"),gge=a("strong"),yLo=o("fsmt"),xLo=o(" \u2014 "),jG=a("a"),$Lo=o("FSMTForConditionalGeneration"),kLo=o(" (FairSeq Machine-Translation model)"),SLo=l(),b1=a("li"),hge=a("strong"),RLo=o("funnel"),PLo=o(" \u2014 "),DG=a("a"),BLo=o("FunnelForPreTraining"),ILo=o(" (Funnel Transformer model)"),NLo=l(),v1=a("li"),pge=a("strong"),qLo=o("gpt2"),jLo=o(" \u2014 "),GG=a("a"),DLo=o("GPT2LMHeadModel"),GLo=o(" (OpenAI GPT-2 model)"),OLo=l(),F1=a("li"),_ge=a("strong"),VLo=o("ibert"),XLo=o(" \u2014 "),OG=a("a"),zLo=o("IBertForMaskedLM"),WLo=o(" (I-BERT model)"),QLo=l(),T1=a("li"),uge=a("strong"),HLo=o("layoutlm"),ULo=o(" \u2014 "),VG=a("a"),JLo=o("LayoutLMForMaskedLM"),YLo=o(" (LayoutLM model)"),KLo=l(),M1=a("li"),bge=a("strong"),ZLo=o("longformer"),eyo=o(" \u2014 "),XG=a("a"),oyo=o("LongformerForMaskedLM"),ryo=o(" (Longformer model)"),tyo=l(),E1=a("li"),vge=a("strong"),ayo=o("lxmert"),nyo=o(" \u2014 "),zG=a("a"),syo=o("LxmertForPreTraining"),lyo=o(" (LXMERT model)"),iyo=l(),C1=a("li"),Fge=a("strong"),dyo=o("megatron-bert"),cyo=o(" \u2014 "),WG=a("a"),fyo=o("MegatronBertForPreTraining"),myo=o(" (Megatron-BERT model)"),gyo=l(),w1=a("li"),Tge=a("strong"),hyo=o("mobilebert"),pyo=o(" \u2014 "),QG=a("a"),_yo=o("MobileBertForPreTraining"),uyo=o(" (MobileBERT model)"),byo=l(),A1=a("li"),Mge=a("strong"),vyo=o("mpnet"),Fyo=o(" \u2014 "),HG=a("a"),Tyo=o("MPNetForMaskedLM"),Myo=o(" (MPNet model)"),Eyo=l(),L1=a("li"),Ege=a("strong"),Cyo=o("mvp"),wyo=o(" \u2014 "),UG=a("a"),Ayo=o("MvpForConditionalGeneration"),Lyo=o(" (MVP model)"),yyo=l(),y1=a("li"),Cge=a("strong"),xyo=o("nezha"),$yo=o(" \u2014 "),JG=a("a"),kyo=o("NezhaForPreTraining"),Syo=o(" (Nezha model)"),Ryo=l(),x1=a("li"),wge=a("strong"),Pyo=o("openai-gpt"),Byo=o(" \u2014 "),YG=a("a"),Iyo=o("OpenAIGPTLMHeadModel"),Nyo=o(" (OpenAI GPT model)"),qyo=l(),$1=a("li"),Age=a("strong"),jyo=o("retribert"),Dyo=o(" \u2014 "),KG=a("a"),Gyo=o("RetriBertModel"),Oyo=o(" (RetriBERT model)"),Vyo=l(),k1=a("li"),Lge=a("strong"),Xyo=o("roberta"),zyo=o(" \u2014 "),ZG=a("a"),Wyo=o("RobertaForMaskedLM"),Qyo=o(" (RoBERTa model)"),Hyo=l(),S1=a("li"),yge=a("strong"),Uyo=o("splinter"),Jyo=o(" \u2014 "),eO=a("a"),Yyo=o("SplinterForPreTraining"),Kyo=o(" (Splinter model)"),Zyo=l(),R1=a("li"),xge=a("strong"),exo=o("squeezebert"),oxo=o(" \u2014 "),oO=a("a"),rxo=o("SqueezeBertForMaskedLM"),txo=o(" (SqueezeBERT model)"),axo=l(),P1=a("li"),$ge=a("strong"),nxo=o("t5"),sxo=o(" \u2014 "),rO=a("a"),lxo=o("T5ForConditionalGeneration"),ixo=o(" (T5 model)"),dxo=l(),B1=a("li"),kge=a("strong"),cxo=o("tapas"),fxo=o(" \u2014 "),tO=a("a"),mxo=o("TapasForMaskedLM"),gxo=o(" (TAPAS model)"),hxo=l(),I1=a("li"),Sge=a("strong"),pxo=o("transfo-xl"),_xo=o(" \u2014 "),aO=a("a"),uxo=o("TransfoXLLMHeadModel"),bxo=o(" (Transformer-XL model)"),vxo=l(),N1=a("li"),Rge=a("strong"),Fxo=o("unispeech"),Txo=o(" \u2014 "),nO=a("a"),Mxo=o("UniSpeechForPreTraining"),Exo=o(" (UniSpeech model)"),Cxo=l(),q1=a("li"),Pge=a("strong"),wxo=o("unispeech-sat"),Axo=o(" \u2014 "),sO=a("a"),Lxo=o("UniSpeechSatForPreTraining"),yxo=o(" (UniSpeechSat model)"),xxo=l(),j1=a("li"),Bge=a("strong"),$xo=o("visual_bert"),kxo=o(" \u2014 "),lO=a("a"),Sxo=o("VisualBertForPreTraining"),Rxo=o(" (VisualBERT model)"),Pxo=l(),D1=a("li"),Ige=a("strong"),Bxo=o("vit_mae"),Ixo=o(" \u2014 "),iO=a("a"),Nxo=o("ViTMAEForPreTraining"),qxo=o(" (ViTMAE model)"),jxo=l(),G1=a("li"),Nge=a("strong"),Dxo=o("wav2vec2"),Gxo=o(" \u2014 "),dO=a("a"),Oxo=o("Wav2Vec2ForPreTraining"),Vxo=o(" (Wav2Vec2 model)"),Xxo=l(),O1=a("li"),qge=a("strong"),zxo=o("wav2vec2-conformer"),Wxo=o(" \u2014 "),cO=a("a"),Qxo=o("Wav2Vec2ConformerForPreTraining"),Hxo=o(" (Wav2Vec2-Conformer model)"),Uxo=l(),V1=a("li"),jge=a("strong"),Jxo=o("xlm"),Yxo=o(" \u2014 "),fO=a("a"),Kxo=o("XLMWithLMHeadModel"),Zxo=o(" (XLM model)"),e$o=l(),X1=a("li"),Dge=a("strong"),o$o=o("xlm-roberta"),r$o=o(" \u2014 "),mO=a("a"),t$o=o("XLMRobertaForMaskedLM"),a$o=o(" (XLM-RoBERTa model)"),n$o=l(),z1=a("li"),Gge=a("strong"),s$o=o("xlm-roberta-xl"),l$o=o(" \u2014 "),gO=a("a"),i$o=o("XLMRobertaXLForMaskedLM"),d$o=o(" (XLM-RoBERTa-XL model)"),c$o=l(),W1=a("li"),Oge=a("strong"),f$o=o("xlnet"),m$o=o(" \u2014 "),hO=a("a"),g$o=o("XLNetLMHeadModel"),h$o=o(" (XLNet model)"),p$o=l(),Q1=a("p"),_$o=o("The model is set in evaluation mode by default using "),Vge=a("code"),u$o=o("model.eval()"),b$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xge=a("code"),v$o=o("model.train()"),F$o=l(),F(H1.$$.fragment),KXe=l(),Ui=a("h2"),U1=a("a"),zge=a("span"),F(U6.$$.fragment),T$o=l(),Wge=a("span"),M$o=o("AutoModelForCausalLM"),ZXe=l(),So=a("div"),F(J6.$$.fragment),E$o=l(),Ji=a("p"),C$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),pO=a("a"),w$o=o("from_pretrained()"),A$o=o(" class method or the "),_O=a("a"),L$o=o("from_config()"),y$o=o(` class
method.`),x$o=l(),Y6=a("p"),$$o=o("This class cannot be instantiated directly using "),Qge=a("code"),k$o=o("__init__()"),S$o=o(" (throws an error)."),R$o=l(),ct=a("div"),F(K6.$$.fragment),P$o=l(),Hge=a("p"),B$o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),I$o=l(),Yi=a("p"),N$o=o(`Note:
Loading a model from its configuration file does `),Uge=a("strong"),q$o=o("not"),j$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uO=a("a"),D$o=o("from_pretrained()"),G$o=o(" to load the model weights."),O$o=l(),F(J1.$$.fragment),V$o=l(),Ze=a("div"),F(Z6.$$.fragment),X$o=l(),Jge=a("p"),z$o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),W$o=l(),qa=a("p"),Q$o=o("The model class to instantiate is selected based on the "),Yge=a("code"),H$o=o("model_type"),U$o=o(` property of the config object (either
passed as an argument or loaded from `),Kge=a("code"),J$o=o("pretrained_model_name_or_path"),Y$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zge=a("code"),K$o=o("pretrained_model_name_or_path"),Z$o=o(":"),eko=l(),z=a("ul"),Y1=a("li"),ehe=a("strong"),oko=o("bart"),rko=o(" \u2014 "),bO=a("a"),tko=o("BartForCausalLM"),ako=o(" (BART model)"),nko=l(),K1=a("li"),ohe=a("strong"),sko=o("bert"),lko=o(" \u2014 "),vO=a("a"),iko=o("BertLMHeadModel"),dko=o(" (BERT model)"),cko=l(),Z1=a("li"),rhe=a("strong"),fko=o("bert-generation"),mko=o(" \u2014 "),FO=a("a"),gko=o("BertGenerationDecoder"),hko=o(" (Bert Generation model)"),pko=l(),e2=a("li"),the=a("strong"),_ko=o("big_bird"),uko=o(" \u2014 "),TO=a("a"),bko=o("BigBirdForCausalLM"),vko=o(" (BigBird model)"),Fko=l(),o2=a("li"),ahe=a("strong"),Tko=o("bigbird_pegasus"),Mko=o(" \u2014 "),MO=a("a"),Eko=o("BigBirdPegasusForCausalLM"),Cko=o(" (BigBird-Pegasus model)"),wko=l(),r2=a("li"),nhe=a("strong"),Ako=o("blenderbot"),Lko=o(" \u2014 "),EO=a("a"),yko=o("BlenderbotForCausalLM"),xko=o(" (Blenderbot model)"),$ko=l(),t2=a("li"),she=a("strong"),kko=o("blenderbot-small"),Sko=o(" \u2014 "),CO=a("a"),Rko=o("BlenderbotSmallForCausalLM"),Pko=o(" (BlenderbotSmall model)"),Bko=l(),a2=a("li"),lhe=a("strong"),Iko=o("bloom"),Nko=o(" \u2014 "),wO=a("a"),qko=o("BloomForCausalLM"),jko=o(" (BLOOM model)"),Dko=l(),n2=a("li"),ihe=a("strong"),Gko=o("camembert"),Oko=o(" \u2014 "),AO=a("a"),Vko=o("CamembertForCausalLM"),Xko=o(" (CamemBERT model)"),zko=l(),s2=a("li"),dhe=a("strong"),Wko=o("codegen"),Qko=o(" \u2014 "),LO=a("a"),Hko=o("CodeGenForCausalLM"),Uko=o(" (CodeGen model)"),Jko=l(),l2=a("li"),che=a("strong"),Yko=o("ctrl"),Kko=o(" \u2014 "),yO=a("a"),Zko=o("CTRLLMHeadModel"),eSo=o(" (CTRL model)"),oSo=l(),i2=a("li"),fhe=a("strong"),rSo=o("data2vec-text"),tSo=o(" \u2014 "),xO=a("a"),aSo=o("Data2VecTextForCausalLM"),nSo=o(" (Data2VecText model)"),sSo=l(),d2=a("li"),mhe=a("strong"),lSo=o("electra"),iSo=o(" \u2014 "),$O=a("a"),dSo=o("ElectraForCausalLM"),cSo=o(" (ELECTRA model)"),fSo=l(),c2=a("li"),ghe=a("strong"),mSo=o("gpt2"),gSo=o(" \u2014 "),kO=a("a"),hSo=o("GPT2LMHeadModel"),pSo=o(" (OpenAI GPT-2 model)"),_So=l(),f2=a("li"),hhe=a("strong"),uSo=o("gpt_neo"),bSo=o(" \u2014 "),SO=a("a"),vSo=o("GPTNeoForCausalLM"),FSo=o(" (GPT Neo model)"),TSo=l(),m2=a("li"),phe=a("strong"),MSo=o("gpt_neox"),ESo=o(" \u2014 "),RO=a("a"),CSo=o("GPTNeoXForCausalLM"),wSo=o(" (GPT NeoX model)"),ASo=l(),g2=a("li"),_he=a("strong"),LSo=o("gptj"),ySo=o(" \u2014 "),PO=a("a"),xSo=o("GPTJForCausalLM"),$So=o(" (GPT-J model)"),kSo=l(),h2=a("li"),uhe=a("strong"),SSo=o("marian"),RSo=o(" \u2014 "),BO=a("a"),PSo=o("MarianForCausalLM"),BSo=o(" (Marian model)"),ISo=l(),p2=a("li"),bhe=a("strong"),NSo=o("mbart"),qSo=o(" \u2014 "),IO=a("a"),jSo=o("MBartForCausalLM"),DSo=o(" (mBART model)"),GSo=l(),_2=a("li"),vhe=a("strong"),OSo=o("megatron-bert"),VSo=o(" \u2014 "),NO=a("a"),XSo=o("MegatronBertForCausalLM"),zSo=o(" (Megatron-BERT model)"),WSo=l(),u2=a("li"),Fhe=a("strong"),QSo=o("mvp"),HSo=o(" \u2014 "),qO=a("a"),USo=o("MvpForCausalLM"),JSo=o(" (MVP model)"),YSo=l(),b2=a("li"),The=a("strong"),KSo=o("openai-gpt"),ZSo=o(" \u2014 "),jO=a("a"),eRo=o("OpenAIGPTLMHeadModel"),oRo=o(" (OpenAI GPT model)"),rRo=l(),v2=a("li"),Mhe=a("strong"),tRo=o("opt"),aRo=o(" \u2014 "),DO=a("a"),nRo=o("OPTForCausalLM"),sRo=o(" (OPT model)"),lRo=l(),F2=a("li"),Ehe=a("strong"),iRo=o("pegasus"),dRo=o(" \u2014 "),GO=a("a"),cRo=o("PegasusForCausalLM"),fRo=o(" (Pegasus model)"),mRo=l(),T2=a("li"),Che=a("strong"),gRo=o("plbart"),hRo=o(" \u2014 "),OO=a("a"),pRo=o("PLBartForCausalLM"),_Ro=o(" (PLBart model)"),uRo=l(),M2=a("li"),whe=a("strong"),bRo=o("prophetnet"),vRo=o(" \u2014 "),VO=a("a"),FRo=o("ProphetNetForCausalLM"),TRo=o(" (ProphetNet model)"),MRo=l(),E2=a("li"),Ahe=a("strong"),ERo=o("qdqbert"),CRo=o(" \u2014 "),XO=a("a"),wRo=o("QDQBertLMHeadModel"),ARo=o(" (QDQBert model)"),LRo=l(),C2=a("li"),Lhe=a("strong"),yRo=o("reformer"),xRo=o(" \u2014 "),zO=a("a"),$Ro=o("ReformerModelWithLMHead"),kRo=o(" (Reformer model)"),SRo=l(),w2=a("li"),yhe=a("strong"),RRo=o("rembert"),PRo=o(" \u2014 "),WO=a("a"),BRo=o("RemBertForCausalLM"),IRo=o(" (RemBERT model)"),NRo=l(),A2=a("li"),xhe=a("strong"),qRo=o("roberta"),jRo=o(" \u2014 "),QO=a("a"),DRo=o("RobertaForCausalLM"),GRo=o(" (RoBERTa model)"),ORo=l(),L2=a("li"),$he=a("strong"),VRo=o("roformer"),XRo=o(" \u2014 "),HO=a("a"),zRo=o("RoFormerForCausalLM"),WRo=o(" (RoFormer model)"),QRo=l(),y2=a("li"),khe=a("strong"),HRo=o("speech_to_text_2"),URo=o(" \u2014 "),UO=a("a"),JRo=o("Speech2Text2ForCausalLM"),YRo=o(" (Speech2Text2 model)"),KRo=l(),x2=a("li"),She=a("strong"),ZRo=o("transfo-xl"),ePo=o(" \u2014 "),JO=a("a"),oPo=o("TransfoXLLMHeadModel"),rPo=o(" (Transformer-XL model)"),tPo=l(),$2=a("li"),Rhe=a("strong"),aPo=o("trocr"),nPo=o(" \u2014 "),YO=a("a"),sPo=o("TrOCRForCausalLM"),lPo=o(" (TrOCR model)"),iPo=l(),k2=a("li"),Phe=a("strong"),dPo=o("xglm"),cPo=o(" \u2014 "),KO=a("a"),fPo=o("XGLMForCausalLM"),mPo=o(" (XGLM model)"),gPo=l(),S2=a("li"),Bhe=a("strong"),hPo=o("xlm"),pPo=o(" \u2014 "),ZO=a("a"),_Po=o("XLMWithLMHeadModel"),uPo=o(" (XLM model)"),bPo=l(),R2=a("li"),Ihe=a("strong"),vPo=o("xlm-prophetnet"),FPo=o(" \u2014 "),eV=a("a"),TPo=o("XLMProphetNetForCausalLM"),MPo=o(" (XLM-ProphetNet model)"),EPo=l(),P2=a("li"),Nhe=a("strong"),CPo=o("xlm-roberta"),wPo=o(" \u2014 "),oV=a("a"),APo=o("XLMRobertaForCausalLM"),LPo=o(" (XLM-RoBERTa model)"),yPo=l(),B2=a("li"),qhe=a("strong"),xPo=o("xlm-roberta-xl"),$Po=o(" \u2014 "),rV=a("a"),kPo=o("XLMRobertaXLForCausalLM"),SPo=o(" (XLM-RoBERTa-XL model)"),RPo=l(),I2=a("li"),jhe=a("strong"),PPo=o("xlnet"),BPo=o(" \u2014 "),tV=a("a"),IPo=o("XLNetLMHeadModel"),NPo=o(" (XLNet model)"),qPo=l(),N2=a("p"),jPo=o("The model is set in evaluation mode by default using "),Dhe=a("code"),DPo=o("model.eval()"),GPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ghe=a("code"),OPo=o("model.train()"),VPo=l(),F(q2.$$.fragment),eze=l(),Ki=a("h2"),j2=a("a"),Ohe=a("span"),F(eL.$$.fragment),XPo=l(),Vhe=a("span"),zPo=o("AutoModelForMaskedLM"),oze=l(),Ro=a("div"),F(oL.$$.fragment),WPo=l(),Zi=a("p"),QPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),aV=a("a"),HPo=o("from_pretrained()"),UPo=o(" class method or the "),nV=a("a"),JPo=o("from_config()"),YPo=o(` class
method.`),KPo=l(),rL=a("p"),ZPo=o("This class cannot be instantiated directly using "),Xhe=a("code"),eBo=o("__init__()"),oBo=o(" (throws an error)."),rBo=l(),ft=a("div"),F(tL.$$.fragment),tBo=l(),zhe=a("p"),aBo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),nBo=l(),ed=a("p"),sBo=o(`Note:
Loading a model from its configuration file does `),Whe=a("strong"),lBo=o("not"),iBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sV=a("a"),dBo=o("from_pretrained()"),cBo=o(" to load the model weights."),fBo=l(),F(D2.$$.fragment),mBo=l(),eo=a("div"),F(aL.$$.fragment),gBo=l(),Qhe=a("p"),hBo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),pBo=l(),ja=a("p"),_Bo=o("The model class to instantiate is selected based on the "),Hhe=a("code"),uBo=o("model_type"),bBo=o(` property of the config object (either
passed as an argument or loaded from `),Uhe=a("code"),vBo=o("pretrained_model_name_or_path"),FBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jhe=a("code"),TBo=o("pretrained_model_name_or_path"),MBo=o(":"),EBo=l(),Q=a("ul"),G2=a("li"),Yhe=a("strong"),CBo=o("albert"),wBo=o(" \u2014 "),lV=a("a"),ABo=o("AlbertForMaskedLM"),LBo=o(" (ALBERT model)"),yBo=l(),O2=a("li"),Khe=a("strong"),xBo=o("bart"),$Bo=o(" \u2014 "),iV=a("a"),kBo=o("BartForConditionalGeneration"),SBo=o(" (BART model)"),RBo=l(),V2=a("li"),Zhe=a("strong"),PBo=o("bert"),BBo=o(" \u2014 "),dV=a("a"),IBo=o("BertForMaskedLM"),NBo=o(" (BERT model)"),qBo=l(),X2=a("li"),epe=a("strong"),jBo=o("big_bird"),DBo=o(" \u2014 "),cV=a("a"),GBo=o("BigBirdForMaskedLM"),OBo=o(" (BigBird model)"),VBo=l(),z2=a("li"),ope=a("strong"),XBo=o("camembert"),zBo=o(" \u2014 "),fV=a("a"),WBo=o("CamembertForMaskedLM"),QBo=o(" (CamemBERT model)"),HBo=l(),W2=a("li"),rpe=a("strong"),UBo=o("convbert"),JBo=o(" \u2014 "),mV=a("a"),YBo=o("ConvBertForMaskedLM"),KBo=o(" (ConvBERT model)"),ZBo=l(),Q2=a("li"),tpe=a("strong"),eIo=o("data2vec-text"),oIo=o(" \u2014 "),gV=a("a"),rIo=o("Data2VecTextForMaskedLM"),tIo=o(" (Data2VecText model)"),aIo=l(),H2=a("li"),ape=a("strong"),nIo=o("deberta"),sIo=o(" \u2014 "),hV=a("a"),lIo=o("DebertaForMaskedLM"),iIo=o(" (DeBERTa model)"),dIo=l(),U2=a("li"),npe=a("strong"),cIo=o("deberta-v2"),fIo=o(" \u2014 "),pV=a("a"),mIo=o("DebertaV2ForMaskedLM"),gIo=o(" (DeBERTa-v2 model)"),hIo=l(),J2=a("li"),spe=a("strong"),pIo=o("distilbert"),_Io=o(" \u2014 "),_V=a("a"),uIo=o("DistilBertForMaskedLM"),bIo=o(" (DistilBERT model)"),vIo=l(),Y2=a("li"),lpe=a("strong"),FIo=o("electra"),TIo=o(" \u2014 "),uV=a("a"),MIo=o("ElectraForMaskedLM"),EIo=o(" (ELECTRA model)"),CIo=l(),K2=a("li"),ipe=a("strong"),wIo=o("flaubert"),AIo=o(" \u2014 "),bV=a("a"),LIo=o("FlaubertWithLMHeadModel"),yIo=o(" (FlauBERT model)"),xIo=l(),Z2=a("li"),dpe=a("strong"),$Io=o("fnet"),kIo=o(" \u2014 "),vV=a("a"),SIo=o("FNetForMaskedLM"),RIo=o(" (FNet model)"),PIo=l(),eb=a("li"),cpe=a("strong"),BIo=o("funnel"),IIo=o(" \u2014 "),FV=a("a"),NIo=o("FunnelForMaskedLM"),qIo=o(" (Funnel Transformer model)"),jIo=l(),ob=a("li"),fpe=a("strong"),DIo=o("ibert"),GIo=o(" \u2014 "),TV=a("a"),OIo=o("IBertForMaskedLM"),VIo=o(" (I-BERT model)"),XIo=l(),rb=a("li"),mpe=a("strong"),zIo=o("layoutlm"),WIo=o(" \u2014 "),MV=a("a"),QIo=o("LayoutLMForMaskedLM"),HIo=o(" (LayoutLM model)"),UIo=l(),tb=a("li"),gpe=a("strong"),JIo=o("longformer"),YIo=o(" \u2014 "),EV=a("a"),KIo=o("LongformerForMaskedLM"),ZIo=o(" (Longformer model)"),eNo=l(),ab=a("li"),hpe=a("strong"),oNo=o("luke"),rNo=o(" \u2014 "),CV=a("a"),tNo=o("LukeForMaskedLM"),aNo=o(" (LUKE model)"),nNo=l(),nb=a("li"),ppe=a("strong"),sNo=o("mbart"),lNo=o(" \u2014 "),wV=a("a"),iNo=o("MBartForConditionalGeneration"),dNo=o(" (mBART model)"),cNo=l(),sb=a("li"),_pe=a("strong"),fNo=o("megatron-bert"),mNo=o(" \u2014 "),AV=a("a"),gNo=o("MegatronBertForMaskedLM"),hNo=o(" (Megatron-BERT model)"),pNo=l(),lb=a("li"),upe=a("strong"),_No=o("mobilebert"),uNo=o(" \u2014 "),LV=a("a"),bNo=o("MobileBertForMaskedLM"),vNo=o(" (MobileBERT model)"),FNo=l(),ib=a("li"),bpe=a("strong"),TNo=o("mpnet"),MNo=o(" \u2014 "),yV=a("a"),ENo=o("MPNetForMaskedLM"),CNo=o(" (MPNet model)"),wNo=l(),db=a("li"),vpe=a("strong"),ANo=o("mvp"),LNo=o(" \u2014 "),xV=a("a"),yNo=o("MvpForConditionalGeneration"),xNo=o(" (MVP model)"),$No=l(),cb=a("li"),Fpe=a("strong"),kNo=o("nezha"),SNo=o(" \u2014 "),$V=a("a"),RNo=o("NezhaForMaskedLM"),PNo=o(" (Nezha model)"),BNo=l(),fb=a("li"),Tpe=a("strong"),INo=o("nystromformer"),NNo=o(" \u2014 "),kV=a("a"),qNo=o("NystromformerForMaskedLM"),jNo=o(" (Nystr\xF6mformer model)"),DNo=l(),mb=a("li"),Mpe=a("strong"),GNo=o("perceiver"),ONo=o(" \u2014 "),SV=a("a"),VNo=o("PerceiverForMaskedLM"),XNo=o(" (Perceiver model)"),zNo=l(),gb=a("li"),Epe=a("strong"),WNo=o("qdqbert"),QNo=o(" \u2014 "),RV=a("a"),HNo=o("QDQBertForMaskedLM"),UNo=o(" (QDQBert model)"),JNo=l(),hb=a("li"),Cpe=a("strong"),YNo=o("reformer"),KNo=o(" \u2014 "),PV=a("a"),ZNo=o("ReformerForMaskedLM"),eqo=o(" (Reformer model)"),oqo=l(),pb=a("li"),wpe=a("strong"),rqo=o("rembert"),tqo=o(" \u2014 "),BV=a("a"),aqo=o("RemBertForMaskedLM"),nqo=o(" (RemBERT model)"),sqo=l(),_b=a("li"),Ape=a("strong"),lqo=o("roberta"),iqo=o(" \u2014 "),IV=a("a"),dqo=o("RobertaForMaskedLM"),cqo=o(" (RoBERTa model)"),fqo=l(),ub=a("li"),Lpe=a("strong"),mqo=o("roformer"),gqo=o(" \u2014 "),NV=a("a"),hqo=o("RoFormerForMaskedLM"),pqo=o(" (RoFormer model)"),_qo=l(),bb=a("li"),ype=a("strong"),uqo=o("squeezebert"),bqo=o(" \u2014 "),qV=a("a"),vqo=o("SqueezeBertForMaskedLM"),Fqo=o(" (SqueezeBERT model)"),Tqo=l(),vb=a("li"),xpe=a("strong"),Mqo=o("tapas"),Eqo=o(" \u2014 "),jV=a("a"),Cqo=o("TapasForMaskedLM"),wqo=o(" (TAPAS model)"),Aqo=l(),Fb=a("li"),$pe=a("strong"),Lqo=o("wav2vec2"),yqo=o(" \u2014 "),kpe=a("code"),xqo=o("Wav2Vec2ForMaskedLM"),$qo=o(" (Wav2Vec2 model)"),kqo=l(),Tb=a("li"),Spe=a("strong"),Sqo=o("xlm"),Rqo=o(" \u2014 "),DV=a("a"),Pqo=o("XLMWithLMHeadModel"),Bqo=o(" (XLM model)"),Iqo=l(),Mb=a("li"),Rpe=a("strong"),Nqo=o("xlm-roberta"),qqo=o(" \u2014 "),GV=a("a"),jqo=o("XLMRobertaForMaskedLM"),Dqo=o(" (XLM-RoBERTa model)"),Gqo=l(),Eb=a("li"),Ppe=a("strong"),Oqo=o("xlm-roberta-xl"),Vqo=o(" \u2014 "),OV=a("a"),Xqo=o("XLMRobertaXLForMaskedLM"),zqo=o(" (XLM-RoBERTa-XL model)"),Wqo=l(),Cb=a("li"),Bpe=a("strong"),Qqo=o("yoso"),Hqo=o(" \u2014 "),VV=a("a"),Uqo=o("YosoForMaskedLM"),Jqo=o(" (YOSO model)"),Yqo=l(),wb=a("p"),Kqo=o("The model is set in evaluation mode by default using "),Ipe=a("code"),Zqo=o("model.eval()"),ejo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Npe=a("code"),ojo=o("model.train()"),rjo=l(),F(Ab.$$.fragment),rze=l(),od=a("h2"),Lb=a("a"),qpe=a("span"),F(nL.$$.fragment),tjo=l(),jpe=a("span"),ajo=o("AutoModelForSeq2SeqLM"),tze=l(),Po=a("div"),F(sL.$$.fragment),njo=l(),rd=a("p"),sjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),XV=a("a"),ljo=o("from_pretrained()"),ijo=o(" class method or the "),zV=a("a"),djo=o("from_config()"),cjo=o(` class
method.`),fjo=l(),lL=a("p"),mjo=o("This class cannot be instantiated directly using "),Dpe=a("code"),gjo=o("__init__()"),hjo=o(" (throws an error)."),pjo=l(),mt=a("div"),F(iL.$$.fragment),_jo=l(),Gpe=a("p"),ujo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),bjo=l(),td=a("p"),vjo=o(`Note:
Loading a model from its configuration file does `),Ope=a("strong"),Fjo=o("not"),Tjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WV=a("a"),Mjo=o("from_pretrained()"),Ejo=o(" to load the model weights."),Cjo=l(),F(yb.$$.fragment),wjo=l(),oo=a("div"),F(dL.$$.fragment),Ajo=l(),Vpe=a("p"),Ljo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),yjo=l(),Da=a("p"),xjo=o("The model class to instantiate is selected based on the "),Xpe=a("code"),$jo=o("model_type"),kjo=o(` property of the config object (either
passed as an argument or loaded from `),zpe=a("code"),Sjo=o("pretrained_model_name_or_path"),Rjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wpe=a("code"),Pjo=o("pretrained_model_name_or_path"),Bjo=o(":"),Ijo=l(),me=a("ul"),xb=a("li"),Qpe=a("strong"),Njo=o("bart"),qjo=o(" \u2014 "),QV=a("a"),jjo=o("BartForConditionalGeneration"),Djo=o(" (BART model)"),Gjo=l(),$b=a("li"),Hpe=a("strong"),Ojo=o("bigbird_pegasus"),Vjo=o(" \u2014 "),HV=a("a"),Xjo=o("BigBirdPegasusForConditionalGeneration"),zjo=o(" (BigBird-Pegasus model)"),Wjo=l(),kb=a("li"),Upe=a("strong"),Qjo=o("blenderbot"),Hjo=o(" \u2014 "),UV=a("a"),Ujo=o("BlenderbotForConditionalGeneration"),Jjo=o(" (Blenderbot model)"),Yjo=l(),Sb=a("li"),Jpe=a("strong"),Kjo=o("blenderbot-small"),Zjo=o(" \u2014 "),JV=a("a"),eDo=o("BlenderbotSmallForConditionalGeneration"),oDo=o(" (BlenderbotSmall model)"),rDo=l(),Rb=a("li"),Ype=a("strong"),tDo=o("encoder-decoder"),aDo=o(" \u2014 "),YV=a("a"),nDo=o("EncoderDecoderModel"),sDo=o(" (Encoder decoder model)"),lDo=l(),Pb=a("li"),Kpe=a("strong"),iDo=o("fsmt"),dDo=o(" \u2014 "),KV=a("a"),cDo=o("FSMTForConditionalGeneration"),fDo=o(" (FairSeq Machine-Translation model)"),mDo=l(),Bb=a("li"),Zpe=a("strong"),gDo=o("led"),hDo=o(" \u2014 "),ZV=a("a"),pDo=o("LEDForConditionalGeneration"),_Do=o(" (LED model)"),uDo=l(),Ib=a("li"),e_e=a("strong"),bDo=o("longt5"),vDo=o(" \u2014 "),eX=a("a"),FDo=o("LongT5ForConditionalGeneration"),TDo=o(" (LongT5 model)"),MDo=l(),Nb=a("li"),o_e=a("strong"),EDo=o("m2m_100"),CDo=o(" \u2014 "),oX=a("a"),wDo=o("M2M100ForConditionalGeneration"),ADo=o(" (M2M100 model)"),LDo=l(),qb=a("li"),r_e=a("strong"),yDo=o("marian"),xDo=o(" \u2014 "),rX=a("a"),$Do=o("MarianMTModel"),kDo=o(" (Marian model)"),SDo=l(),jb=a("li"),t_e=a("strong"),RDo=o("mbart"),PDo=o(" \u2014 "),tX=a("a"),BDo=o("MBartForConditionalGeneration"),IDo=o(" (mBART model)"),NDo=l(),Db=a("li"),a_e=a("strong"),qDo=o("mt5"),jDo=o(" \u2014 "),aX=a("a"),DDo=o("MT5ForConditionalGeneration"),GDo=o(" (MT5 model)"),ODo=l(),Gb=a("li"),n_e=a("strong"),VDo=o("mvp"),XDo=o(" \u2014 "),nX=a("a"),zDo=o("MvpForConditionalGeneration"),WDo=o(" (MVP model)"),QDo=l(),Ob=a("li"),s_e=a("strong"),HDo=o("nllb"),UDo=o(" \u2014 "),sX=a("a"),JDo=o("M2M100ForConditionalGeneration"),YDo=o(" (NLLB model)"),KDo=l(),Vb=a("li"),l_e=a("strong"),ZDo=o("pegasus"),eGo=o(" \u2014 "),lX=a("a"),oGo=o("PegasusForConditionalGeneration"),rGo=o(" (Pegasus model)"),tGo=l(),Xb=a("li"),i_e=a("strong"),aGo=o("plbart"),nGo=o(" \u2014 "),iX=a("a"),sGo=o("PLBartForConditionalGeneration"),lGo=o(" (PLBart model)"),iGo=l(),zb=a("li"),d_e=a("strong"),dGo=o("prophetnet"),cGo=o(" \u2014 "),dX=a("a"),fGo=o("ProphetNetForConditionalGeneration"),mGo=o(" (ProphetNet model)"),gGo=l(),Wb=a("li"),c_e=a("strong"),hGo=o("t5"),pGo=o(" \u2014 "),cX=a("a"),_Go=o("T5ForConditionalGeneration"),uGo=o(" (T5 model)"),bGo=l(),Qb=a("li"),f_e=a("strong"),vGo=o("xlm-prophetnet"),FGo=o(" \u2014 "),fX=a("a"),TGo=o("XLMProphetNetForConditionalGeneration"),MGo=o(" (XLM-ProphetNet model)"),EGo=l(),Hb=a("p"),CGo=o("The model is set in evaluation mode by default using "),m_e=a("code"),wGo=o("model.eval()"),AGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g_e=a("code"),LGo=o("model.train()"),yGo=l(),F(Ub.$$.fragment),aze=l(),ad=a("h2"),Jb=a("a"),h_e=a("span"),F(cL.$$.fragment),xGo=l(),p_e=a("span"),$Go=o("AutoModelForSequenceClassification"),nze=l(),Bo=a("div"),F(fL.$$.fragment),kGo=l(),nd=a("p"),SGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),mX=a("a"),RGo=o("from_pretrained()"),PGo=o(" class method or the "),gX=a("a"),BGo=o("from_config()"),IGo=o(` class
method.`),NGo=l(),mL=a("p"),qGo=o("This class cannot be instantiated directly using "),__e=a("code"),jGo=o("__init__()"),DGo=o(" (throws an error)."),GGo=l(),gt=a("div"),F(gL.$$.fragment),OGo=l(),u_e=a("p"),VGo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),XGo=l(),sd=a("p"),zGo=o(`Note:
Loading a model from its configuration file does `),b_e=a("strong"),WGo=o("not"),QGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hX=a("a"),HGo=o("from_pretrained()"),UGo=o(" to load the model weights."),JGo=l(),F(Yb.$$.fragment),YGo=l(),ro=a("div"),F(hL.$$.fragment),KGo=l(),v_e=a("p"),ZGo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),eOo=l(),Ga=a("p"),oOo=o("The model class to instantiate is selected based on the "),F_e=a("code"),rOo=o("model_type"),tOo=o(` property of the config object (either
passed as an argument or loaded from `),T_e=a("code"),aOo=o("pretrained_model_name_or_path"),nOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M_e=a("code"),sOo=o("pretrained_model_name_or_path"),lOo=o(":"),iOo=l(),B=a("ul"),Kb=a("li"),E_e=a("strong"),dOo=o("albert"),cOo=o(" \u2014 "),pX=a("a"),fOo=o("AlbertForSequenceClassification"),mOo=o(" (ALBERT model)"),gOo=l(),Zb=a("li"),C_e=a("strong"),hOo=o("bart"),pOo=o(" \u2014 "),_X=a("a"),_Oo=o("BartForSequenceClassification"),uOo=o(" (BART model)"),bOo=l(),e3=a("li"),w_e=a("strong"),vOo=o("bert"),FOo=o(" \u2014 "),uX=a("a"),TOo=o("BertForSequenceClassification"),MOo=o(" (BERT model)"),EOo=l(),o3=a("li"),A_e=a("strong"),COo=o("big_bird"),wOo=o(" \u2014 "),bX=a("a"),AOo=o("BigBirdForSequenceClassification"),LOo=o(" (BigBird model)"),yOo=l(),r3=a("li"),L_e=a("strong"),xOo=o("bigbird_pegasus"),$Oo=o(" \u2014 "),vX=a("a"),kOo=o("BigBirdPegasusForSequenceClassification"),SOo=o(" (BigBird-Pegasus model)"),ROo=l(),t3=a("li"),y_e=a("strong"),POo=o("bloom"),BOo=o(" \u2014 "),FX=a("a"),IOo=o("BloomForSequenceClassification"),NOo=o(" (BLOOM model)"),qOo=l(),a3=a("li"),x_e=a("strong"),jOo=o("camembert"),DOo=o(" \u2014 "),TX=a("a"),GOo=o("CamembertForSequenceClassification"),OOo=o(" (CamemBERT model)"),VOo=l(),n3=a("li"),$_e=a("strong"),XOo=o("canine"),zOo=o(" \u2014 "),MX=a("a"),WOo=o("CanineForSequenceClassification"),QOo=o(" (CANINE model)"),HOo=l(),s3=a("li"),k_e=a("strong"),UOo=o("convbert"),JOo=o(" \u2014 "),EX=a("a"),YOo=o("ConvBertForSequenceClassification"),KOo=o(" (ConvBERT model)"),ZOo=l(),l3=a("li"),S_e=a("strong"),eVo=o("ctrl"),oVo=o(" \u2014 "),CX=a("a"),rVo=o("CTRLForSequenceClassification"),tVo=o(" (CTRL model)"),aVo=l(),i3=a("li"),R_e=a("strong"),nVo=o("data2vec-text"),sVo=o(" \u2014 "),wX=a("a"),lVo=o("Data2VecTextForSequenceClassification"),iVo=o(" (Data2VecText model)"),dVo=l(),d3=a("li"),P_e=a("strong"),cVo=o("deberta"),fVo=o(" \u2014 "),AX=a("a"),mVo=o("DebertaForSequenceClassification"),gVo=o(" (DeBERTa model)"),hVo=l(),c3=a("li"),B_e=a("strong"),pVo=o("deberta-v2"),_Vo=o(" \u2014 "),LX=a("a"),uVo=o("DebertaV2ForSequenceClassification"),bVo=o(" (DeBERTa-v2 model)"),vVo=l(),f3=a("li"),I_e=a("strong"),FVo=o("distilbert"),TVo=o(" \u2014 "),yX=a("a"),MVo=o("DistilBertForSequenceClassification"),EVo=o(" (DistilBERT model)"),CVo=l(),m3=a("li"),N_e=a("strong"),wVo=o("electra"),AVo=o(" \u2014 "),xX=a("a"),LVo=o("ElectraForSequenceClassification"),yVo=o(" (ELECTRA model)"),xVo=l(),g3=a("li"),q_e=a("strong"),$Vo=o("flaubert"),kVo=o(" \u2014 "),$X=a("a"),SVo=o("FlaubertForSequenceClassification"),RVo=o(" (FlauBERT model)"),PVo=l(),h3=a("li"),j_e=a("strong"),BVo=o("fnet"),IVo=o(" \u2014 "),kX=a("a"),NVo=o("FNetForSequenceClassification"),qVo=o(" (FNet model)"),jVo=l(),p3=a("li"),D_e=a("strong"),DVo=o("funnel"),GVo=o(" \u2014 "),SX=a("a"),OVo=o("FunnelForSequenceClassification"),VVo=o(" (Funnel Transformer model)"),XVo=l(),_3=a("li"),G_e=a("strong"),zVo=o("gpt2"),WVo=o(" \u2014 "),RX=a("a"),QVo=o("GPT2ForSequenceClassification"),HVo=o(" (OpenAI GPT-2 model)"),UVo=l(),u3=a("li"),O_e=a("strong"),JVo=o("gpt_neo"),YVo=o(" \u2014 "),PX=a("a"),KVo=o("GPTNeoForSequenceClassification"),ZVo=o(" (GPT Neo model)"),eXo=l(),b3=a("li"),V_e=a("strong"),oXo=o("gptj"),rXo=o(" \u2014 "),BX=a("a"),tXo=o("GPTJForSequenceClassification"),aXo=o(" (GPT-J model)"),nXo=l(),v3=a("li"),X_e=a("strong"),sXo=o("ibert"),lXo=o(" \u2014 "),IX=a("a"),iXo=o("IBertForSequenceClassification"),dXo=o(" (I-BERT model)"),cXo=l(),F3=a("li"),z_e=a("strong"),fXo=o("layoutlm"),mXo=o(" \u2014 "),NX=a("a"),gXo=o("LayoutLMForSequenceClassification"),hXo=o(" (LayoutLM model)"),pXo=l(),T3=a("li"),W_e=a("strong"),_Xo=o("layoutlmv2"),uXo=o(" \u2014 "),qX=a("a"),bXo=o("LayoutLMv2ForSequenceClassification"),vXo=o(" (LayoutLMv2 model)"),FXo=l(),M3=a("li"),Q_e=a("strong"),TXo=o("layoutlmv3"),MXo=o(" \u2014 "),jX=a("a"),EXo=o("LayoutLMv3ForSequenceClassification"),CXo=o(" (LayoutLMv3 model)"),wXo=l(),E3=a("li"),H_e=a("strong"),AXo=o("led"),LXo=o(" \u2014 "),DX=a("a"),yXo=o("LEDForSequenceClassification"),xXo=o(" (LED model)"),$Xo=l(),C3=a("li"),U_e=a("strong"),kXo=o("longformer"),SXo=o(" \u2014 "),GX=a("a"),RXo=o("LongformerForSequenceClassification"),PXo=o(" (Longformer model)"),BXo=l(),w3=a("li"),J_e=a("strong"),IXo=o("mbart"),NXo=o(" \u2014 "),OX=a("a"),qXo=o("MBartForSequenceClassification"),jXo=o(" (mBART model)"),DXo=l(),A3=a("li"),Y_e=a("strong"),GXo=o("megatron-bert"),OXo=o(" \u2014 "),VX=a("a"),VXo=o("MegatronBertForSequenceClassification"),XXo=o(" (Megatron-BERT model)"),zXo=l(),L3=a("li"),K_e=a("strong"),WXo=o("mobilebert"),QXo=o(" \u2014 "),XX=a("a"),HXo=o("MobileBertForSequenceClassification"),UXo=o(" (MobileBERT model)"),JXo=l(),y3=a("li"),Z_e=a("strong"),YXo=o("mpnet"),KXo=o(" \u2014 "),zX=a("a"),ZXo=o("MPNetForSequenceClassification"),ezo=o(" (MPNet model)"),ozo=l(),x3=a("li"),eue=a("strong"),rzo=o("mvp"),tzo=o(" \u2014 "),WX=a("a"),azo=o("MvpForSequenceClassification"),nzo=o(" (MVP model)"),szo=l(),$3=a("li"),oue=a("strong"),lzo=o("nezha"),izo=o(" \u2014 "),QX=a("a"),dzo=o("NezhaForSequenceClassification"),czo=o(" (Nezha model)"),fzo=l(),k3=a("li"),rue=a("strong"),mzo=o("nystromformer"),gzo=o(" \u2014 "),HX=a("a"),hzo=o("NystromformerForSequenceClassification"),pzo=o(" (Nystr\xF6mformer model)"),_zo=l(),S3=a("li"),tue=a("strong"),uzo=o("openai-gpt"),bzo=o(" \u2014 "),UX=a("a"),vzo=o("OpenAIGPTForSequenceClassification"),Fzo=o(" (OpenAI GPT model)"),Tzo=l(),R3=a("li"),aue=a("strong"),Mzo=o("opt"),Ezo=o(" \u2014 "),JX=a("a"),Czo=o("OPTForSequenceClassification"),wzo=o(" (OPT model)"),Azo=l(),P3=a("li"),nue=a("strong"),Lzo=o("perceiver"),yzo=o(" \u2014 "),YX=a("a"),xzo=o("PerceiverForSequenceClassification"),$zo=o(" (Perceiver model)"),kzo=l(),B3=a("li"),sue=a("strong"),Szo=o("plbart"),Rzo=o(" \u2014 "),KX=a("a"),Pzo=o("PLBartForSequenceClassification"),Bzo=o(" (PLBart model)"),Izo=l(),I3=a("li"),lue=a("strong"),Nzo=o("qdqbert"),qzo=o(" \u2014 "),ZX=a("a"),jzo=o("QDQBertForSequenceClassification"),Dzo=o(" (QDQBert model)"),Gzo=l(),N3=a("li"),iue=a("strong"),Ozo=o("reformer"),Vzo=o(" \u2014 "),ez=a("a"),Xzo=o("ReformerForSequenceClassification"),zzo=o(" (Reformer model)"),Wzo=l(),q3=a("li"),due=a("strong"),Qzo=o("rembert"),Hzo=o(" \u2014 "),oz=a("a"),Uzo=o("RemBertForSequenceClassification"),Jzo=o(" (RemBERT model)"),Yzo=l(),j3=a("li"),cue=a("strong"),Kzo=o("roberta"),Zzo=o(" \u2014 "),rz=a("a"),eWo=o("RobertaForSequenceClassification"),oWo=o(" (RoBERTa model)"),rWo=l(),D3=a("li"),fue=a("strong"),tWo=o("roformer"),aWo=o(" \u2014 "),tz=a("a"),nWo=o("RoFormerForSequenceClassification"),sWo=o(" (RoFormer model)"),lWo=l(),G3=a("li"),mue=a("strong"),iWo=o("squeezebert"),dWo=o(" \u2014 "),az=a("a"),cWo=o("SqueezeBertForSequenceClassification"),fWo=o(" (SqueezeBERT model)"),mWo=l(),O3=a("li"),gue=a("strong"),gWo=o("tapas"),hWo=o(" \u2014 "),nz=a("a"),pWo=o("TapasForSequenceClassification"),_Wo=o(" (TAPAS model)"),uWo=l(),V3=a("li"),hue=a("strong"),bWo=o("transfo-xl"),vWo=o(" \u2014 "),sz=a("a"),FWo=o("TransfoXLForSequenceClassification"),TWo=o(" (Transformer-XL model)"),MWo=l(),X3=a("li"),pue=a("strong"),EWo=o("xlm"),CWo=o(" \u2014 "),lz=a("a"),wWo=o("XLMForSequenceClassification"),AWo=o(" (XLM model)"),LWo=l(),z3=a("li"),_ue=a("strong"),yWo=o("xlm-roberta"),xWo=o(" \u2014 "),iz=a("a"),$Wo=o("XLMRobertaForSequenceClassification"),kWo=o(" (XLM-RoBERTa model)"),SWo=l(),W3=a("li"),uue=a("strong"),RWo=o("xlm-roberta-xl"),PWo=o(" \u2014 "),dz=a("a"),BWo=o("XLMRobertaXLForSequenceClassification"),IWo=o(" (XLM-RoBERTa-XL model)"),NWo=l(),Q3=a("li"),bue=a("strong"),qWo=o("xlnet"),jWo=o(" \u2014 "),cz=a("a"),DWo=o("XLNetForSequenceClassification"),GWo=o(" (XLNet model)"),OWo=l(),H3=a("li"),vue=a("strong"),VWo=o("yoso"),XWo=o(" \u2014 "),fz=a("a"),zWo=o("YosoForSequenceClassification"),WWo=o(" (YOSO model)"),QWo=l(),U3=a("p"),HWo=o("The model is set in evaluation mode by default using "),Fue=a("code"),UWo=o("model.eval()"),JWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tue=a("code"),YWo=o("model.train()"),KWo=l(),F(J3.$$.fragment),sze=l(),ld=a("h2"),Y3=a("a"),Mue=a("span"),F(pL.$$.fragment),ZWo=l(),Eue=a("span"),eQo=o("AutoModelForMultipleChoice"),lze=l(),Io=a("div"),F(_L.$$.fragment),oQo=l(),id=a("p"),rQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),mz=a("a"),tQo=o("from_pretrained()"),aQo=o(" class method or the "),gz=a("a"),nQo=o("from_config()"),sQo=o(` class
method.`),lQo=l(),uL=a("p"),iQo=o("This class cannot be instantiated directly using "),Cue=a("code"),dQo=o("__init__()"),cQo=o(" (throws an error)."),fQo=l(),ht=a("div"),F(bL.$$.fragment),mQo=l(),wue=a("p"),gQo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),hQo=l(),dd=a("p"),pQo=o(`Note:
Loading a model from its configuration file does `),Aue=a("strong"),_Qo=o("not"),uQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hz=a("a"),bQo=o("from_pretrained()"),vQo=o(" to load the model weights."),FQo=l(),F(K3.$$.fragment),TQo=l(),to=a("div"),F(vL.$$.fragment),MQo=l(),Lue=a("p"),EQo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),CQo=l(),Oa=a("p"),wQo=o("The model class to instantiate is selected based on the "),yue=a("code"),AQo=o("model_type"),LQo=o(` property of the config object (either
passed as an argument or loaded from `),xue=a("code"),yQo=o("pretrained_model_name_or_path"),xQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ue=a("code"),$Qo=o("pretrained_model_name_or_path"),kQo=o(":"),SQo=l(),Z=a("ul"),Z3=a("li"),kue=a("strong"),RQo=o("albert"),PQo=o(" \u2014 "),pz=a("a"),BQo=o("AlbertForMultipleChoice"),IQo=o(" (ALBERT model)"),NQo=l(),ev=a("li"),Sue=a("strong"),qQo=o("bert"),jQo=o(" \u2014 "),_z=a("a"),DQo=o("BertForMultipleChoice"),GQo=o(" (BERT model)"),OQo=l(),ov=a("li"),Rue=a("strong"),VQo=o("big_bird"),XQo=o(" \u2014 "),uz=a("a"),zQo=o("BigBirdForMultipleChoice"),WQo=o(" (BigBird model)"),QQo=l(),rv=a("li"),Pue=a("strong"),HQo=o("camembert"),UQo=o(" \u2014 "),bz=a("a"),JQo=o("CamembertForMultipleChoice"),YQo=o(" (CamemBERT model)"),KQo=l(),tv=a("li"),Bue=a("strong"),ZQo=o("canine"),eHo=o(" \u2014 "),vz=a("a"),oHo=o("CanineForMultipleChoice"),rHo=o(" (CANINE model)"),tHo=l(),av=a("li"),Iue=a("strong"),aHo=o("convbert"),nHo=o(" \u2014 "),Fz=a("a"),sHo=o("ConvBertForMultipleChoice"),lHo=o(" (ConvBERT model)"),iHo=l(),nv=a("li"),Nue=a("strong"),dHo=o("data2vec-text"),cHo=o(" \u2014 "),Tz=a("a"),fHo=o("Data2VecTextForMultipleChoice"),mHo=o(" (Data2VecText model)"),gHo=l(),sv=a("li"),que=a("strong"),hHo=o("deberta-v2"),pHo=o(" \u2014 "),Mz=a("a"),_Ho=o("DebertaV2ForMultipleChoice"),uHo=o(" (DeBERTa-v2 model)"),bHo=l(),lv=a("li"),jue=a("strong"),vHo=o("distilbert"),FHo=o(" \u2014 "),Ez=a("a"),THo=o("DistilBertForMultipleChoice"),MHo=o(" (DistilBERT model)"),EHo=l(),iv=a("li"),Due=a("strong"),CHo=o("electra"),wHo=o(" \u2014 "),Cz=a("a"),AHo=o("ElectraForMultipleChoice"),LHo=o(" (ELECTRA model)"),yHo=l(),dv=a("li"),Gue=a("strong"),xHo=o("flaubert"),$Ho=o(" \u2014 "),wz=a("a"),kHo=o("FlaubertForMultipleChoice"),SHo=o(" (FlauBERT model)"),RHo=l(),cv=a("li"),Oue=a("strong"),PHo=o("fnet"),BHo=o(" \u2014 "),Az=a("a"),IHo=o("FNetForMultipleChoice"),NHo=o(" (FNet model)"),qHo=l(),fv=a("li"),Vue=a("strong"),jHo=o("funnel"),DHo=o(" \u2014 "),Lz=a("a"),GHo=o("FunnelForMultipleChoice"),OHo=o(" (Funnel Transformer model)"),VHo=l(),mv=a("li"),Xue=a("strong"),XHo=o("ibert"),zHo=o(" \u2014 "),yz=a("a"),WHo=o("IBertForMultipleChoice"),QHo=o(" (I-BERT model)"),HHo=l(),gv=a("li"),zue=a("strong"),UHo=o("longformer"),JHo=o(" \u2014 "),xz=a("a"),YHo=o("LongformerForMultipleChoice"),KHo=o(" (Longformer model)"),ZHo=l(),hv=a("li"),Wue=a("strong"),eUo=o("megatron-bert"),oUo=o(" \u2014 "),$z=a("a"),rUo=o("MegatronBertForMultipleChoice"),tUo=o(" (Megatron-BERT model)"),aUo=l(),pv=a("li"),Que=a("strong"),nUo=o("mobilebert"),sUo=o(" \u2014 "),kz=a("a"),lUo=o("MobileBertForMultipleChoice"),iUo=o(" (MobileBERT model)"),dUo=l(),_v=a("li"),Hue=a("strong"),cUo=o("mpnet"),fUo=o(" \u2014 "),Sz=a("a"),mUo=o("MPNetForMultipleChoice"),gUo=o(" (MPNet model)"),hUo=l(),uv=a("li"),Uue=a("strong"),pUo=o("nezha"),_Uo=o(" \u2014 "),Rz=a("a"),uUo=o("NezhaForMultipleChoice"),bUo=o(" (Nezha model)"),vUo=l(),bv=a("li"),Jue=a("strong"),FUo=o("nystromformer"),TUo=o(" \u2014 "),Pz=a("a"),MUo=o("NystromformerForMultipleChoice"),EUo=o(" (Nystr\xF6mformer model)"),CUo=l(),vv=a("li"),Yue=a("strong"),wUo=o("qdqbert"),AUo=o(" \u2014 "),Bz=a("a"),LUo=o("QDQBertForMultipleChoice"),yUo=o(" (QDQBert model)"),xUo=l(),Fv=a("li"),Kue=a("strong"),$Uo=o("rembert"),kUo=o(" \u2014 "),Iz=a("a"),SUo=o("RemBertForMultipleChoice"),RUo=o(" (RemBERT model)"),PUo=l(),Tv=a("li"),Zue=a("strong"),BUo=o("roberta"),IUo=o(" \u2014 "),Nz=a("a"),NUo=o("RobertaForMultipleChoice"),qUo=o(" (RoBERTa model)"),jUo=l(),Mv=a("li"),e1e=a("strong"),DUo=o("roformer"),GUo=o(" \u2014 "),qz=a("a"),OUo=o("RoFormerForMultipleChoice"),VUo=o(" (RoFormer model)"),XUo=l(),Ev=a("li"),o1e=a("strong"),zUo=o("squeezebert"),WUo=o(" \u2014 "),jz=a("a"),QUo=o("SqueezeBertForMultipleChoice"),HUo=o(" (SqueezeBERT model)"),UUo=l(),Cv=a("li"),r1e=a("strong"),JUo=o("xlm"),YUo=o(" \u2014 "),Dz=a("a"),KUo=o("XLMForMultipleChoice"),ZUo=o(" (XLM model)"),eJo=l(),wv=a("li"),t1e=a("strong"),oJo=o("xlm-roberta"),rJo=o(" \u2014 "),Gz=a("a"),tJo=o("XLMRobertaForMultipleChoice"),aJo=o(" (XLM-RoBERTa model)"),nJo=l(),Av=a("li"),a1e=a("strong"),sJo=o("xlm-roberta-xl"),lJo=o(" \u2014 "),Oz=a("a"),iJo=o("XLMRobertaXLForMultipleChoice"),dJo=o(" (XLM-RoBERTa-XL model)"),cJo=l(),Lv=a("li"),n1e=a("strong"),fJo=o("xlnet"),mJo=o(" \u2014 "),Vz=a("a"),gJo=o("XLNetForMultipleChoice"),hJo=o(" (XLNet model)"),pJo=l(),yv=a("li"),s1e=a("strong"),_Jo=o("yoso"),uJo=o(" \u2014 "),Xz=a("a"),bJo=o("YosoForMultipleChoice"),vJo=o(" (YOSO model)"),FJo=l(),xv=a("p"),TJo=o("The model is set in evaluation mode by default using "),l1e=a("code"),MJo=o("model.eval()"),EJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i1e=a("code"),CJo=o("model.train()"),wJo=l(),F($v.$$.fragment),ize=l(),cd=a("h2"),kv=a("a"),d1e=a("span"),F(FL.$$.fragment),AJo=l(),c1e=a("span"),LJo=o("AutoModelForNextSentencePrediction"),dze=l(),No=a("div"),F(TL.$$.fragment),yJo=l(),fd=a("p"),xJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),zz=a("a"),$Jo=o("from_pretrained()"),kJo=o(" class method or the "),Wz=a("a"),SJo=o("from_config()"),RJo=o(` class
method.`),PJo=l(),ML=a("p"),BJo=o("This class cannot be instantiated directly using "),f1e=a("code"),IJo=o("__init__()"),NJo=o(" (throws an error)."),qJo=l(),pt=a("div"),F(EL.$$.fragment),jJo=l(),m1e=a("p"),DJo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),GJo=l(),md=a("p"),OJo=o(`Note:
Loading a model from its configuration file does `),g1e=a("strong"),VJo=o("not"),XJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=a("a"),zJo=o("from_pretrained()"),WJo=o(" to load the model weights."),QJo=l(),F(Sv.$$.fragment),HJo=l(),ao=a("div"),F(CL.$$.fragment),UJo=l(),h1e=a("p"),JJo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),YJo=l(),Va=a("p"),KJo=o("The model class to instantiate is selected based on the "),p1e=a("code"),ZJo=o("model_type"),eYo=o(` property of the config object (either
passed as an argument or loaded from `),_1e=a("code"),oYo=o("pretrained_model_name_or_path"),rYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u1e=a("code"),tYo=o("pretrained_model_name_or_path"),aYo=o(":"),nYo=l(),qo=a("ul"),Rv=a("li"),b1e=a("strong"),sYo=o("bert"),lYo=o(" \u2014 "),Hz=a("a"),iYo=o("BertForNextSentencePrediction"),dYo=o(" (BERT model)"),cYo=l(),Pv=a("li"),v1e=a("strong"),fYo=o("fnet"),mYo=o(" \u2014 "),Uz=a("a"),gYo=o("FNetForNextSentencePrediction"),hYo=o(" (FNet model)"),pYo=l(),Bv=a("li"),F1e=a("strong"),_Yo=o("megatron-bert"),uYo=o(" \u2014 "),Jz=a("a"),bYo=o("MegatronBertForNextSentencePrediction"),vYo=o(" (Megatron-BERT model)"),FYo=l(),Iv=a("li"),T1e=a("strong"),TYo=o("mobilebert"),MYo=o(" \u2014 "),Yz=a("a"),EYo=o("MobileBertForNextSentencePrediction"),CYo=o(" (MobileBERT model)"),wYo=l(),Nv=a("li"),M1e=a("strong"),AYo=o("nezha"),LYo=o(" \u2014 "),Kz=a("a"),yYo=o("NezhaForNextSentencePrediction"),xYo=o(" (Nezha model)"),$Yo=l(),qv=a("li"),E1e=a("strong"),kYo=o("qdqbert"),SYo=o(" \u2014 "),Zz=a("a"),RYo=o("QDQBertForNextSentencePrediction"),PYo=o(" (QDQBert model)"),BYo=l(),jv=a("p"),IYo=o("The model is set in evaluation mode by default using "),C1e=a("code"),NYo=o("model.eval()"),qYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w1e=a("code"),jYo=o("model.train()"),DYo=l(),F(Dv.$$.fragment),cze=l(),gd=a("h2"),Gv=a("a"),A1e=a("span"),F(wL.$$.fragment),GYo=l(),L1e=a("span"),OYo=o("AutoModelForTokenClassification"),fze=l(),jo=a("div"),F(AL.$$.fragment),VYo=l(),hd=a("p"),XYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),eW=a("a"),zYo=o("from_pretrained()"),WYo=o(" class method or the "),oW=a("a"),QYo=o("from_config()"),HYo=o(` class
method.`),UYo=l(),LL=a("p"),JYo=o("This class cannot be instantiated directly using "),y1e=a("code"),YYo=o("__init__()"),KYo=o(" (throws an error)."),ZYo=l(),_t=a("div"),F(yL.$$.fragment),eKo=l(),x1e=a("p"),oKo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),rKo=l(),pd=a("p"),tKo=o(`Note:
Loading a model from its configuration file does `),$1e=a("strong"),aKo=o("not"),nKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rW=a("a"),sKo=o("from_pretrained()"),lKo=o(" to load the model weights."),iKo=l(),F(Ov.$$.fragment),dKo=l(),no=a("div"),F(xL.$$.fragment),cKo=l(),k1e=a("p"),fKo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),mKo=l(),Xa=a("p"),gKo=o("The model class to instantiate is selected based on the "),S1e=a("code"),hKo=o("model_type"),pKo=o(` property of the config object (either
passed as an argument or loaded from `),R1e=a("code"),_Ko=o("pretrained_model_name_or_path"),uKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P1e=a("code"),bKo=o("pretrained_model_name_or_path"),vKo=o(":"),FKo=l(),U=a("ul"),Vv=a("li"),B1e=a("strong"),TKo=o("albert"),MKo=o(" \u2014 "),tW=a("a"),EKo=o("AlbertForTokenClassification"),CKo=o(" (ALBERT model)"),wKo=l(),Xv=a("li"),I1e=a("strong"),AKo=o("bert"),LKo=o(" \u2014 "),aW=a("a"),yKo=o("BertForTokenClassification"),xKo=o(" (BERT model)"),$Ko=l(),zv=a("li"),N1e=a("strong"),kKo=o("big_bird"),SKo=o(" \u2014 "),nW=a("a"),RKo=o("BigBirdForTokenClassification"),PKo=o(" (BigBird model)"),BKo=l(),Wv=a("li"),q1e=a("strong"),IKo=o("bloom"),NKo=o(" \u2014 "),sW=a("a"),qKo=o("BloomForTokenClassification"),jKo=o(" (BLOOM model)"),DKo=l(),Qv=a("li"),j1e=a("strong"),GKo=o("camembert"),OKo=o(" \u2014 "),lW=a("a"),VKo=o("CamembertForTokenClassification"),XKo=o(" (CamemBERT model)"),zKo=l(),Hv=a("li"),D1e=a("strong"),WKo=o("canine"),QKo=o(" \u2014 "),iW=a("a"),HKo=o("CanineForTokenClassification"),UKo=o(" (CANINE model)"),JKo=l(),Uv=a("li"),G1e=a("strong"),YKo=o("convbert"),KKo=o(" \u2014 "),dW=a("a"),ZKo=o("ConvBertForTokenClassification"),eZo=o(" (ConvBERT model)"),oZo=l(),Jv=a("li"),O1e=a("strong"),rZo=o("data2vec-text"),tZo=o(" \u2014 "),cW=a("a"),aZo=o("Data2VecTextForTokenClassification"),nZo=o(" (Data2VecText model)"),sZo=l(),Yv=a("li"),V1e=a("strong"),lZo=o("deberta"),iZo=o(" \u2014 "),fW=a("a"),dZo=o("DebertaForTokenClassification"),cZo=o(" (DeBERTa model)"),fZo=l(),Kv=a("li"),X1e=a("strong"),mZo=o("deberta-v2"),gZo=o(" \u2014 "),mW=a("a"),hZo=o("DebertaV2ForTokenClassification"),pZo=o(" (DeBERTa-v2 model)"),_Zo=l(),Zv=a("li"),z1e=a("strong"),uZo=o("distilbert"),bZo=o(" \u2014 "),gW=a("a"),vZo=o("DistilBertForTokenClassification"),FZo=o(" (DistilBERT model)"),TZo=l(),eF=a("li"),W1e=a("strong"),MZo=o("electra"),EZo=o(" \u2014 "),hW=a("a"),CZo=o("ElectraForTokenClassification"),wZo=o(" (ELECTRA model)"),AZo=l(),oF=a("li"),Q1e=a("strong"),LZo=o("flaubert"),yZo=o(" \u2014 "),pW=a("a"),xZo=o("FlaubertForTokenClassification"),$Zo=o(" (FlauBERT model)"),kZo=l(),rF=a("li"),H1e=a("strong"),SZo=o("fnet"),RZo=o(" \u2014 "),_W=a("a"),PZo=o("FNetForTokenClassification"),BZo=o(" (FNet model)"),IZo=l(),tF=a("li"),U1e=a("strong"),NZo=o("funnel"),qZo=o(" \u2014 "),uW=a("a"),jZo=o("FunnelForTokenClassification"),DZo=o(" (Funnel Transformer model)"),GZo=l(),aF=a("li"),J1e=a("strong"),OZo=o("gpt2"),VZo=o(" \u2014 "),bW=a("a"),XZo=o("GPT2ForTokenClassification"),zZo=o(" (OpenAI GPT-2 model)"),WZo=l(),nF=a("li"),Y1e=a("strong"),QZo=o("ibert"),HZo=o(" \u2014 "),vW=a("a"),UZo=o("IBertForTokenClassification"),JZo=o(" (I-BERT model)"),YZo=l(),sF=a("li"),K1e=a("strong"),KZo=o("layoutlm"),ZZo=o(" \u2014 "),FW=a("a"),eer=o("LayoutLMForTokenClassification"),oer=o(" (LayoutLM model)"),rer=l(),lF=a("li"),Z1e=a("strong"),ter=o("layoutlmv2"),aer=o(" \u2014 "),TW=a("a"),ner=o("LayoutLMv2ForTokenClassification"),ser=o(" (LayoutLMv2 model)"),ler=l(),iF=a("li"),e2e=a("strong"),ier=o("layoutlmv3"),der=o(" \u2014 "),MW=a("a"),cer=o("LayoutLMv3ForTokenClassification"),fer=o(" (LayoutLMv3 model)"),mer=l(),dF=a("li"),o2e=a("strong"),ger=o("longformer"),her=o(" \u2014 "),EW=a("a"),per=o("LongformerForTokenClassification"),_er=o(" (Longformer model)"),uer=l(),cF=a("li"),r2e=a("strong"),ber=o("megatron-bert"),ver=o(" \u2014 "),CW=a("a"),Fer=o("MegatronBertForTokenClassification"),Ter=o(" (Megatron-BERT model)"),Mer=l(),fF=a("li"),t2e=a("strong"),Eer=o("mobilebert"),Cer=o(" \u2014 "),wW=a("a"),wer=o("MobileBertForTokenClassification"),Aer=o(" (MobileBERT model)"),Ler=l(),mF=a("li"),a2e=a("strong"),yer=o("mpnet"),xer=o(" \u2014 "),AW=a("a"),$er=o("MPNetForTokenClassification"),ker=o(" (MPNet model)"),Ser=l(),gF=a("li"),n2e=a("strong"),Rer=o("nezha"),Per=o(" \u2014 "),LW=a("a"),Ber=o("NezhaForTokenClassification"),Ier=o(" (Nezha model)"),Ner=l(),hF=a("li"),s2e=a("strong"),qer=o("nystromformer"),jer=o(" \u2014 "),yW=a("a"),Der=o("NystromformerForTokenClassification"),Ger=o(" (Nystr\xF6mformer model)"),Oer=l(),pF=a("li"),l2e=a("strong"),Ver=o("qdqbert"),Xer=o(" \u2014 "),xW=a("a"),zer=o("QDQBertForTokenClassification"),Wer=o(" (QDQBert model)"),Qer=l(),_F=a("li"),i2e=a("strong"),Her=o("rembert"),Uer=o(" \u2014 "),$W=a("a"),Jer=o("RemBertForTokenClassification"),Yer=o(" (RemBERT model)"),Ker=l(),uF=a("li"),d2e=a("strong"),Zer=o("roberta"),eor=o(" \u2014 "),kW=a("a"),oor=o("RobertaForTokenClassification"),ror=o(" (RoBERTa model)"),tor=l(),bF=a("li"),c2e=a("strong"),aor=o("roformer"),nor=o(" \u2014 "),SW=a("a"),sor=o("RoFormerForTokenClassification"),lor=o(" (RoFormer model)"),ior=l(),vF=a("li"),f2e=a("strong"),dor=o("squeezebert"),cor=o(" \u2014 "),RW=a("a"),mor=o("SqueezeBertForTokenClassification"),gor=o(" (SqueezeBERT model)"),hor=l(),FF=a("li"),m2e=a("strong"),por=o("xlm"),_or=o(" \u2014 "),PW=a("a"),uor=o("XLMForTokenClassification"),bor=o(" (XLM model)"),vor=l(),TF=a("li"),g2e=a("strong"),For=o("xlm-roberta"),Tor=o(" \u2014 "),BW=a("a"),Mor=o("XLMRobertaForTokenClassification"),Eor=o(" (XLM-RoBERTa model)"),Cor=l(),MF=a("li"),h2e=a("strong"),wor=o("xlm-roberta-xl"),Aor=o(" \u2014 "),IW=a("a"),Lor=o("XLMRobertaXLForTokenClassification"),yor=o(" (XLM-RoBERTa-XL model)"),xor=l(),EF=a("li"),p2e=a("strong"),$or=o("xlnet"),kor=o(" \u2014 "),NW=a("a"),Sor=o("XLNetForTokenClassification"),Ror=o(" (XLNet model)"),Por=l(),CF=a("li"),_2e=a("strong"),Bor=o("yoso"),Ior=o(" \u2014 "),qW=a("a"),Nor=o("YosoForTokenClassification"),qor=o(" (YOSO model)"),jor=l(),wF=a("p"),Dor=o("The model is set in evaluation mode by default using "),u2e=a("code"),Gor=o("model.eval()"),Oor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b2e=a("code"),Vor=o("model.train()"),Xor=l(),F(AF.$$.fragment),mze=l(),_d=a("h2"),LF=a("a"),v2e=a("span"),F($L.$$.fragment),zor=l(),F2e=a("span"),Wor=o("AutoModelForQuestionAnswering"),gze=l(),Do=a("div"),F(kL.$$.fragment),Qor=l(),ud=a("p"),Hor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),jW=a("a"),Uor=o("from_pretrained()"),Jor=o(" class method or the "),DW=a("a"),Yor=o("from_config()"),Kor=o(` class
method.`),Zor=l(),SL=a("p"),err=o("This class cannot be instantiated directly using "),T2e=a("code"),orr=o("__init__()"),rrr=o(" (throws an error)."),trr=l(),ut=a("div"),F(RL.$$.fragment),arr=l(),M2e=a("p"),nrr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),srr=l(),bd=a("p"),lrr=o(`Note:
Loading a model from its configuration file does `),E2e=a("strong"),irr=o("not"),drr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=a("a"),crr=o("from_pretrained()"),frr=o(" to load the model weights."),mrr=l(),F(yF.$$.fragment),grr=l(),so=a("div"),F(PL.$$.fragment),hrr=l(),C2e=a("p"),prr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_rr=l(),za=a("p"),urr=o("The model class to instantiate is selected based on the "),w2e=a("code"),brr=o("model_type"),vrr=o(` property of the config object (either
passed as an argument or loaded from `),A2e=a("code"),Frr=o("pretrained_model_name_or_path"),Trr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L2e=a("code"),Mrr=o("pretrained_model_name_or_path"),Err=o(":"),Crr=l(),V=a("ul"),xF=a("li"),y2e=a("strong"),wrr=o("albert"),Arr=o(" \u2014 "),OW=a("a"),Lrr=o("AlbertForQuestionAnswering"),yrr=o(" (ALBERT model)"),xrr=l(),$F=a("li"),x2e=a("strong"),$rr=o("bart"),krr=o(" \u2014 "),VW=a("a"),Srr=o("BartForQuestionAnswering"),Rrr=o(" (BART model)"),Prr=l(),kF=a("li"),$2e=a("strong"),Brr=o("bert"),Irr=o(" \u2014 "),XW=a("a"),Nrr=o("BertForQuestionAnswering"),qrr=o(" (BERT model)"),jrr=l(),SF=a("li"),k2e=a("strong"),Drr=o("big_bird"),Grr=o(" \u2014 "),zW=a("a"),Orr=o("BigBirdForQuestionAnswering"),Vrr=o(" (BigBird model)"),Xrr=l(),RF=a("li"),S2e=a("strong"),zrr=o("bigbird_pegasus"),Wrr=o(" \u2014 "),WW=a("a"),Qrr=o("BigBirdPegasusForQuestionAnswering"),Hrr=o(" (BigBird-Pegasus model)"),Urr=l(),PF=a("li"),R2e=a("strong"),Jrr=o("camembert"),Yrr=o(" \u2014 "),QW=a("a"),Krr=o("CamembertForQuestionAnswering"),Zrr=o(" (CamemBERT model)"),etr=l(),BF=a("li"),P2e=a("strong"),otr=o("canine"),rtr=o(" \u2014 "),HW=a("a"),ttr=o("CanineForQuestionAnswering"),atr=o(" (CANINE model)"),ntr=l(),IF=a("li"),B2e=a("strong"),str=o("convbert"),ltr=o(" \u2014 "),UW=a("a"),itr=o("ConvBertForQuestionAnswering"),dtr=o(" (ConvBERT model)"),ctr=l(),NF=a("li"),I2e=a("strong"),ftr=o("data2vec-text"),mtr=o(" \u2014 "),JW=a("a"),gtr=o("Data2VecTextForQuestionAnswering"),htr=o(" (Data2VecText model)"),ptr=l(),qF=a("li"),N2e=a("strong"),_tr=o("deberta"),utr=o(" \u2014 "),YW=a("a"),btr=o("DebertaForQuestionAnswering"),vtr=o(" (DeBERTa model)"),Ftr=l(),jF=a("li"),q2e=a("strong"),Ttr=o("deberta-v2"),Mtr=o(" \u2014 "),KW=a("a"),Etr=o("DebertaV2ForQuestionAnswering"),Ctr=o(" (DeBERTa-v2 model)"),wtr=l(),DF=a("li"),j2e=a("strong"),Atr=o("distilbert"),Ltr=o(" \u2014 "),ZW=a("a"),ytr=o("DistilBertForQuestionAnswering"),xtr=o(" (DistilBERT model)"),$tr=l(),GF=a("li"),D2e=a("strong"),ktr=o("electra"),Str=o(" \u2014 "),eQ=a("a"),Rtr=o("ElectraForQuestionAnswering"),Ptr=o(" (ELECTRA model)"),Btr=l(),OF=a("li"),G2e=a("strong"),Itr=o("flaubert"),Ntr=o(" \u2014 "),oQ=a("a"),qtr=o("FlaubertForQuestionAnsweringSimple"),jtr=o(" (FlauBERT model)"),Dtr=l(),VF=a("li"),O2e=a("strong"),Gtr=o("fnet"),Otr=o(" \u2014 "),rQ=a("a"),Vtr=o("FNetForQuestionAnswering"),Xtr=o(" (FNet model)"),ztr=l(),XF=a("li"),V2e=a("strong"),Wtr=o("funnel"),Qtr=o(" \u2014 "),tQ=a("a"),Htr=o("FunnelForQuestionAnswering"),Utr=o(" (Funnel Transformer model)"),Jtr=l(),zF=a("li"),X2e=a("strong"),Ytr=o("gptj"),Ktr=o(" \u2014 "),aQ=a("a"),Ztr=o("GPTJForQuestionAnswering"),ear=o(" (GPT-J model)"),oar=l(),WF=a("li"),z2e=a("strong"),rar=o("ibert"),tar=o(" \u2014 "),nQ=a("a"),aar=o("IBertForQuestionAnswering"),nar=o(" (I-BERT model)"),sar=l(),QF=a("li"),W2e=a("strong"),lar=o("layoutlmv2"),iar=o(" \u2014 "),sQ=a("a"),dar=o("LayoutLMv2ForQuestionAnswering"),car=o(" (LayoutLMv2 model)"),far=l(),HF=a("li"),Q2e=a("strong"),mar=o("layoutlmv3"),gar=o(" \u2014 "),lQ=a("a"),har=o("LayoutLMv3ForQuestionAnswering"),par=o(" (LayoutLMv3 model)"),_ar=l(),UF=a("li"),H2e=a("strong"),uar=o("led"),bar=o(" \u2014 "),iQ=a("a"),Far=o("LEDForQuestionAnswering"),Tar=o(" (LED model)"),Mar=l(),JF=a("li"),U2e=a("strong"),Ear=o("longformer"),Car=o(" \u2014 "),dQ=a("a"),war=o("LongformerForQuestionAnswering"),Aar=o(" (Longformer model)"),Lar=l(),YF=a("li"),J2e=a("strong"),yar=o("lxmert"),xar=o(" \u2014 "),cQ=a("a"),$ar=o("LxmertForQuestionAnswering"),kar=o(" (LXMERT model)"),Sar=l(),KF=a("li"),Y2e=a("strong"),Rar=o("mbart"),Par=o(" \u2014 "),fQ=a("a"),Bar=o("MBartForQuestionAnswering"),Iar=o(" (mBART model)"),Nar=l(),ZF=a("li"),K2e=a("strong"),qar=o("megatron-bert"),jar=o(" \u2014 "),mQ=a("a"),Dar=o("MegatronBertForQuestionAnswering"),Gar=o(" (Megatron-BERT model)"),Oar=l(),eT=a("li"),Z2e=a("strong"),Var=o("mobilebert"),Xar=o(" \u2014 "),gQ=a("a"),zar=o("MobileBertForQuestionAnswering"),War=o(" (MobileBERT model)"),Qar=l(),oT=a("li"),ebe=a("strong"),Har=o("mpnet"),Uar=o(" \u2014 "),hQ=a("a"),Jar=o("MPNetForQuestionAnswering"),Yar=o(" (MPNet model)"),Kar=l(),rT=a("li"),obe=a("strong"),Zar=o("mvp"),enr=o(" \u2014 "),pQ=a("a"),onr=o("MvpForQuestionAnswering"),rnr=o(" (MVP model)"),tnr=l(),tT=a("li"),rbe=a("strong"),anr=o("nezha"),nnr=o(" \u2014 "),_Q=a("a"),snr=o("NezhaForQuestionAnswering"),lnr=o(" (Nezha model)"),inr=l(),aT=a("li"),tbe=a("strong"),dnr=o("nystromformer"),cnr=o(" \u2014 "),uQ=a("a"),fnr=o("NystromformerForQuestionAnswering"),mnr=o(" (Nystr\xF6mformer model)"),gnr=l(),nT=a("li"),abe=a("strong"),hnr=o("qdqbert"),pnr=o(" \u2014 "),bQ=a("a"),_nr=o("QDQBertForQuestionAnswering"),unr=o(" (QDQBert model)"),bnr=l(),sT=a("li"),nbe=a("strong"),vnr=o("reformer"),Fnr=o(" \u2014 "),vQ=a("a"),Tnr=o("ReformerForQuestionAnswering"),Mnr=o(" (Reformer model)"),Enr=l(),lT=a("li"),sbe=a("strong"),Cnr=o("rembert"),wnr=o(" \u2014 "),FQ=a("a"),Anr=o("RemBertForQuestionAnswering"),Lnr=o(" (RemBERT model)"),ynr=l(),iT=a("li"),lbe=a("strong"),xnr=o("roberta"),$nr=o(" \u2014 "),TQ=a("a"),knr=o("RobertaForQuestionAnswering"),Snr=o(" (RoBERTa model)"),Rnr=l(),dT=a("li"),ibe=a("strong"),Pnr=o("roformer"),Bnr=o(" \u2014 "),MQ=a("a"),Inr=o("RoFormerForQuestionAnswering"),Nnr=o(" (RoFormer model)"),qnr=l(),cT=a("li"),dbe=a("strong"),jnr=o("splinter"),Dnr=o(" \u2014 "),EQ=a("a"),Gnr=o("SplinterForQuestionAnswering"),Onr=o(" (Splinter model)"),Vnr=l(),fT=a("li"),cbe=a("strong"),Xnr=o("squeezebert"),znr=o(" \u2014 "),CQ=a("a"),Wnr=o("SqueezeBertForQuestionAnswering"),Qnr=o(" (SqueezeBERT model)"),Hnr=l(),mT=a("li"),fbe=a("strong"),Unr=o("xlm"),Jnr=o(" \u2014 "),wQ=a("a"),Ynr=o("XLMForQuestionAnsweringSimple"),Knr=o(" (XLM model)"),Znr=l(),gT=a("li"),mbe=a("strong"),esr=o("xlm-roberta"),osr=o(" \u2014 "),AQ=a("a"),rsr=o("XLMRobertaForQuestionAnswering"),tsr=o(" (XLM-RoBERTa model)"),asr=l(),hT=a("li"),gbe=a("strong"),nsr=o("xlm-roberta-xl"),ssr=o(" \u2014 "),LQ=a("a"),lsr=o("XLMRobertaXLForQuestionAnswering"),isr=o(" (XLM-RoBERTa-XL model)"),dsr=l(),pT=a("li"),hbe=a("strong"),csr=o("xlnet"),fsr=o(" \u2014 "),yQ=a("a"),msr=o("XLNetForQuestionAnsweringSimple"),gsr=o(" (XLNet model)"),hsr=l(),_T=a("li"),pbe=a("strong"),psr=o("yoso"),_sr=o(" \u2014 "),xQ=a("a"),usr=o("YosoForQuestionAnswering"),bsr=o(" (YOSO model)"),vsr=l(),uT=a("p"),Fsr=o("The model is set in evaluation mode by default using "),_be=a("code"),Tsr=o("model.eval()"),Msr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ube=a("code"),Esr=o("model.train()"),Csr=l(),F(bT.$$.fragment),hze=l(),vd=a("h2"),vT=a("a"),bbe=a("span"),F(BL.$$.fragment),wsr=l(),vbe=a("span"),Asr=o("AutoModelForTableQuestionAnswering"),pze=l(),Go=a("div"),F(IL.$$.fragment),Lsr=l(),Fd=a("p"),ysr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),$Q=a("a"),xsr=o("from_pretrained()"),$sr=o(" class method or the "),kQ=a("a"),ksr=o("from_config()"),Ssr=o(` class
method.`),Rsr=l(),NL=a("p"),Psr=o("This class cannot be instantiated directly using "),Fbe=a("code"),Bsr=o("__init__()"),Isr=o(" (throws an error)."),Nsr=l(),bt=a("div"),F(qL.$$.fragment),qsr=l(),Tbe=a("p"),jsr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Dsr=l(),Td=a("p"),Gsr=o(`Note:
Loading a model from its configuration file does `),Mbe=a("strong"),Osr=o("not"),Vsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=a("a"),Xsr=o("from_pretrained()"),zsr=o(" to load the model weights."),Wsr=l(),F(FT.$$.fragment),Qsr=l(),lo=a("div"),F(jL.$$.fragment),Hsr=l(),Ebe=a("p"),Usr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Jsr=l(),Wa=a("p"),Ysr=o("The model class to instantiate is selected based on the "),Cbe=a("code"),Ksr=o("model_type"),Zsr=o(` property of the config object (either
passed as an argument or loaded from `),wbe=a("code"),elr=o("pretrained_model_name_or_path"),olr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Abe=a("code"),rlr=o("pretrained_model_name_or_path"),tlr=o(":"),alr=l(),Lbe=a("ul"),TT=a("li"),ybe=a("strong"),nlr=o("tapas"),slr=o(" \u2014 "),RQ=a("a"),llr=o("TapasForQuestionAnswering"),ilr=o(" (TAPAS model)"),dlr=l(),MT=a("p"),clr=o("The model is set in evaluation mode by default using "),xbe=a("code"),flr=o("model.eval()"),mlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$be=a("code"),glr=o("model.train()"),hlr=l(),F(ET.$$.fragment),_ze=l(),Md=a("h2"),CT=a("a"),kbe=a("span"),F(DL.$$.fragment),plr=l(),Sbe=a("span"),_lr=o("AutoModelForImageClassification"),uze=l(),Oo=a("div"),F(GL.$$.fragment),ulr=l(),Ed=a("p"),blr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),PQ=a("a"),vlr=o("from_pretrained()"),Flr=o(" class method or the "),BQ=a("a"),Tlr=o("from_config()"),Mlr=o(` class
method.`),Elr=l(),OL=a("p"),Clr=o("This class cannot be instantiated directly using "),Rbe=a("code"),wlr=o("__init__()"),Alr=o(" (throws an error)."),Llr=l(),vt=a("div"),F(VL.$$.fragment),ylr=l(),Pbe=a("p"),xlr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),$lr=l(),Cd=a("p"),klr=o(`Note:
Loading a model from its configuration file does `),Bbe=a("strong"),Slr=o("not"),Rlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=a("a"),Plr=o("from_pretrained()"),Blr=o(" to load the model weights."),Ilr=l(),F(wT.$$.fragment),Nlr=l(),io=a("div"),F(XL.$$.fragment),qlr=l(),Ibe=a("p"),jlr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Dlr=l(),Qa=a("p"),Glr=o("The model class to instantiate is selected based on the "),Nbe=a("code"),Olr=o("model_type"),Vlr=o(` property of the config object (either
passed as an argument or loaded from `),qbe=a("code"),Xlr=o("pretrained_model_name_or_path"),zlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jbe=a("code"),Wlr=o("pretrained_model_name_or_path"),Qlr=o(":"),Hlr=l(),ve=a("ul"),AT=a("li"),Dbe=a("strong"),Ulr=o("beit"),Jlr=o(" \u2014 "),NQ=a("a"),Ylr=o("BeitForImageClassification"),Klr=o(" (BEiT model)"),Zlr=l(),LT=a("li"),Gbe=a("strong"),eir=o("convnext"),oir=o(" \u2014 "),qQ=a("a"),rir=o("ConvNextForImageClassification"),tir=o(" (ConvNeXT model)"),air=l(),yT=a("li"),Obe=a("strong"),nir=o("cvt"),sir=o(" \u2014 "),jQ=a("a"),lir=o("CvtForImageClassification"),iir=o(" (CvT model)"),dir=l(),xT=a("li"),Vbe=a("strong"),cir=o("data2vec-vision"),fir=o(" \u2014 "),DQ=a("a"),mir=o("Data2VecVisionForImageClassification"),gir=o(" (Data2VecVision model)"),hir=l(),Js=a("li"),Xbe=a("strong"),pir=o("deit"),_ir=o(" \u2014 "),GQ=a("a"),uir=o("DeiTForImageClassification"),bir=o(" or "),OQ=a("a"),vir=o("DeiTForImageClassificationWithTeacher"),Fir=o(" (DeiT model)"),Tir=l(),$T=a("li"),zbe=a("strong"),Mir=o("imagegpt"),Eir=o(" \u2014 "),VQ=a("a"),Cir=o("ImageGPTForImageClassification"),wir=o(" (ImageGPT model)"),Air=l(),Ys=a("li"),Wbe=a("strong"),Lir=o("levit"),yir=o(" \u2014 "),XQ=a("a"),xir=o("LevitForImageClassification"),$ir=o(" or "),zQ=a("a"),kir=o("LevitForImageClassificationWithTeacher"),Sir=o(" (LeViT model)"),Rir=l(),kT=a("li"),Qbe=a("strong"),Pir=o("mobilevit"),Bir=o(" \u2014 "),WQ=a("a"),Iir=o("MobileViTForImageClassification"),Nir=o(" (MobileViT model)"),qir=l(),Ft=a("li"),Hbe=a("strong"),jir=o("perceiver"),Dir=o(" \u2014 "),QQ=a("a"),Gir=o("PerceiverForImageClassificationLearned"),Oir=o(" or "),HQ=a("a"),Vir=o("PerceiverForImageClassificationFourier"),Xir=o(" or "),UQ=a("a"),zir=o("PerceiverForImageClassificationConvProcessing"),Wir=o(" (Perceiver model)"),Qir=l(),ST=a("li"),Ube=a("strong"),Hir=o("poolformer"),Uir=o(" \u2014 "),JQ=a("a"),Jir=o("PoolFormerForImageClassification"),Yir=o(" (PoolFormer model)"),Kir=l(),RT=a("li"),Jbe=a("strong"),Zir=o("regnet"),edr=o(" \u2014 "),YQ=a("a"),odr=o("RegNetForImageClassification"),rdr=o(" (RegNet model)"),tdr=l(),PT=a("li"),Ybe=a("strong"),adr=o("resnet"),ndr=o(" \u2014 "),KQ=a("a"),sdr=o("ResNetForImageClassification"),ldr=o(" (ResNet model)"),idr=l(),BT=a("li"),Kbe=a("strong"),ddr=o("segformer"),cdr=o(" \u2014 "),ZQ=a("a"),fdr=o("SegformerForImageClassification"),mdr=o(" (SegFormer model)"),gdr=l(),IT=a("li"),Zbe=a("strong"),hdr=o("swin"),pdr=o(" \u2014 "),eH=a("a"),_dr=o("SwinForImageClassification"),udr=o(" (Swin Transformer model)"),bdr=l(),NT=a("li"),e3e=a("strong"),vdr=o("van"),Fdr=o(" \u2014 "),oH=a("a"),Tdr=o("VanForImageClassification"),Mdr=o(" (VAN model)"),Edr=l(),qT=a("li"),o3e=a("strong"),Cdr=o("vit"),wdr=o(" \u2014 "),rH=a("a"),Adr=o("ViTForImageClassification"),Ldr=o(" (ViT model)"),ydr=l(),jT=a("p"),xdr=o("The model is set in evaluation mode by default using "),r3e=a("code"),$dr=o("model.eval()"),kdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t3e=a("code"),Sdr=o("model.train()"),Rdr=l(),F(DT.$$.fragment),bze=l(),wd=a("h2"),GT=a("a"),a3e=a("span"),F(zL.$$.fragment),Pdr=l(),n3e=a("span"),Bdr=o("AutoModelForVision2Seq"),vze=l(),Vo=a("div"),F(WL.$$.fragment),Idr=l(),Ad=a("p"),Ndr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),tH=a("a"),qdr=o("from_pretrained()"),jdr=o(" class method or the "),aH=a("a"),Ddr=o("from_config()"),Gdr=o(` class
method.`),Odr=l(),QL=a("p"),Vdr=o("This class cannot be instantiated directly using "),s3e=a("code"),Xdr=o("__init__()"),zdr=o(" (throws an error)."),Wdr=l(),Tt=a("div"),F(HL.$$.fragment),Qdr=l(),l3e=a("p"),Hdr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Udr=l(),Ld=a("p"),Jdr=o(`Note:
Loading a model from its configuration file does `),i3e=a("strong"),Ydr=o("not"),Kdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nH=a("a"),Zdr=o("from_pretrained()"),ecr=o(" to load the model weights."),ocr=l(),F(OT.$$.fragment),rcr=l(),co=a("div"),F(UL.$$.fragment),tcr=l(),d3e=a("p"),acr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ncr=l(),Ha=a("p"),scr=o("The model class to instantiate is selected based on the "),c3e=a("code"),lcr=o("model_type"),icr=o(` property of the config object (either
passed as an argument or loaded from `),f3e=a("code"),dcr=o("pretrained_model_name_or_path"),ccr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m3e=a("code"),fcr=o("pretrained_model_name_or_path"),mcr=o(":"),gcr=l(),g3e=a("ul"),VT=a("li"),h3e=a("strong"),hcr=o("vision-encoder-decoder"),pcr=o(" \u2014 "),sH=a("a"),_cr=o("VisionEncoderDecoderModel"),ucr=o(" (Vision Encoder decoder model)"),bcr=l(),XT=a("p"),vcr=o("The model is set in evaluation mode by default using "),p3e=a("code"),Fcr=o("model.eval()"),Tcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_3e=a("code"),Mcr=o("model.train()"),Ecr=l(),F(zT.$$.fragment),Fze=l(),yd=a("h2"),WT=a("a"),u3e=a("span"),F(JL.$$.fragment),Ccr=l(),b3e=a("span"),wcr=o("AutoModelForVisualQuestionAnswering"),Tze=l(),Xo=a("div"),F(YL.$$.fragment),Acr=l(),xd=a("p"),Lcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),lH=a("a"),ycr=o("from_pretrained()"),xcr=o(" class method or the "),iH=a("a"),$cr=o("from_config()"),kcr=o(` class
method.`),Scr=l(),KL=a("p"),Rcr=o("This class cannot be instantiated directly using "),v3e=a("code"),Pcr=o("__init__()"),Bcr=o(" (throws an error)."),Icr=l(),Mt=a("div"),F(ZL.$$.fragment),Ncr=l(),F3e=a("p"),qcr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),jcr=l(),$d=a("p"),Dcr=o(`Note:
Loading a model from its configuration file does `),T3e=a("strong"),Gcr=o("not"),Ocr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dH=a("a"),Vcr=o("from_pretrained()"),Xcr=o(" to load the model weights."),zcr=l(),F(QT.$$.fragment),Wcr=l(),fo=a("div"),F(ey.$$.fragment),Qcr=l(),M3e=a("p"),Hcr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Ucr=l(),Ua=a("p"),Jcr=o("The model class to instantiate is selected based on the "),E3e=a("code"),Ycr=o("model_type"),Kcr=o(` property of the config object (either
passed as an argument or loaded from `),C3e=a("code"),Zcr=o("pretrained_model_name_or_path"),efr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w3e=a("code"),ofr=o("pretrained_model_name_or_path"),rfr=o(":"),tfr=l(),A3e=a("ul"),HT=a("li"),L3e=a("strong"),afr=o("vilt"),nfr=o(" \u2014 "),cH=a("a"),sfr=o("ViltForQuestionAnswering"),lfr=o(" (ViLT model)"),ifr=l(),UT=a("p"),dfr=o("The model is set in evaluation mode by default using "),y3e=a("code"),cfr=o("model.eval()"),ffr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x3e=a("code"),mfr=o("model.train()"),gfr=l(),F(JT.$$.fragment),Mze=l(),kd=a("h2"),YT=a("a"),$3e=a("span"),F(oy.$$.fragment),hfr=l(),k3e=a("span"),pfr=o("AutoModelForAudioClassification"),Eze=l(),zo=a("div"),F(ry.$$.fragment),_fr=l(),Sd=a("p"),ufr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),fH=a("a"),bfr=o("from_pretrained()"),vfr=o(" class method or the "),mH=a("a"),Ffr=o("from_config()"),Tfr=o(` class
method.`),Mfr=l(),ty=a("p"),Efr=o("This class cannot be instantiated directly using "),S3e=a("code"),Cfr=o("__init__()"),wfr=o(" (throws an error)."),Afr=l(),Et=a("div"),F(ay.$$.fragment),Lfr=l(),R3e=a("p"),yfr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),xfr=l(),Rd=a("p"),$fr=o(`Note:
Loading a model from its configuration file does `),P3e=a("strong"),kfr=o("not"),Sfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gH=a("a"),Rfr=o("from_pretrained()"),Pfr=o(" to load the model weights."),Bfr=l(),F(KT.$$.fragment),Ifr=l(),mo=a("div"),F(ny.$$.fragment),Nfr=l(),B3e=a("p"),qfr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),jfr=l(),Ja=a("p"),Dfr=o("The model class to instantiate is selected based on the "),I3e=a("code"),Gfr=o("model_type"),Ofr=o(` property of the config object (either
passed as an argument or loaded from `),N3e=a("code"),Vfr=o("pretrained_model_name_or_path"),Xfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q3e=a("code"),zfr=o("pretrained_model_name_or_path"),Wfr=o(":"),Qfr=l(),Pe=a("ul"),ZT=a("li"),j3e=a("strong"),Hfr=o("data2vec-audio"),Ufr=o(" \u2014 "),hH=a("a"),Jfr=o("Data2VecAudioForSequenceClassification"),Yfr=o(" (Data2VecAudio model)"),Kfr=l(),e7=a("li"),D3e=a("strong"),Zfr=o("hubert"),emr=o(" \u2014 "),pH=a("a"),omr=o("HubertForSequenceClassification"),rmr=o(" (Hubert model)"),tmr=l(),o7=a("li"),G3e=a("strong"),amr=o("sew"),nmr=o(" \u2014 "),_H=a("a"),smr=o("SEWForSequenceClassification"),lmr=o(" (SEW model)"),imr=l(),r7=a("li"),O3e=a("strong"),dmr=o("sew-d"),cmr=o(" \u2014 "),uH=a("a"),fmr=o("SEWDForSequenceClassification"),mmr=o(" (SEW-D model)"),gmr=l(),t7=a("li"),V3e=a("strong"),hmr=o("unispeech"),pmr=o(" \u2014 "),bH=a("a"),_mr=o("UniSpeechForSequenceClassification"),umr=o(" (UniSpeech model)"),bmr=l(),a7=a("li"),X3e=a("strong"),vmr=o("unispeech-sat"),Fmr=o(" \u2014 "),vH=a("a"),Tmr=o("UniSpeechSatForSequenceClassification"),Mmr=o(" (UniSpeechSat model)"),Emr=l(),n7=a("li"),z3e=a("strong"),Cmr=o("wav2vec2"),wmr=o(" \u2014 "),FH=a("a"),Amr=o("Wav2Vec2ForSequenceClassification"),Lmr=o(" (Wav2Vec2 model)"),ymr=l(),s7=a("li"),W3e=a("strong"),xmr=o("wav2vec2-conformer"),$mr=o(" \u2014 "),TH=a("a"),kmr=o("Wav2Vec2ConformerForSequenceClassification"),Smr=o(" (Wav2Vec2-Conformer model)"),Rmr=l(),l7=a("li"),Q3e=a("strong"),Pmr=o("wavlm"),Bmr=o(" \u2014 "),MH=a("a"),Imr=o("WavLMForSequenceClassification"),Nmr=o(" (WavLM model)"),qmr=l(),i7=a("p"),jmr=o("The model is set in evaluation mode by default using "),H3e=a("code"),Dmr=o("model.eval()"),Gmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U3e=a("code"),Omr=o("model.train()"),Vmr=l(),F(d7.$$.fragment),Cze=l(),Pd=a("h2"),c7=a("a"),J3e=a("span"),F(sy.$$.fragment),Xmr=l(),Y3e=a("span"),zmr=o("AutoModelForAudioFrameClassification"),wze=l(),Wo=a("div"),F(ly.$$.fragment),Wmr=l(),Bd=a("p"),Qmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),EH=a("a"),Hmr=o("from_pretrained()"),Umr=o(" class method or the "),CH=a("a"),Jmr=o("from_config()"),Ymr=o(` class
method.`),Kmr=l(),iy=a("p"),Zmr=o("This class cannot be instantiated directly using "),K3e=a("code"),egr=o("__init__()"),ogr=o(" (throws an error)."),rgr=l(),Ct=a("div"),F(dy.$$.fragment),tgr=l(),Z3e=a("p"),agr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),ngr=l(),Id=a("p"),sgr=o(`Note:
Loading a model from its configuration file does `),eve=a("strong"),lgr=o("not"),igr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=a("a"),dgr=o("from_pretrained()"),cgr=o(" to load the model weights."),fgr=l(),F(f7.$$.fragment),mgr=l(),go=a("div"),F(cy.$$.fragment),ggr=l(),ove=a("p"),hgr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),pgr=l(),Ya=a("p"),_gr=o("The model class to instantiate is selected based on the "),rve=a("code"),ugr=o("model_type"),bgr=o(` property of the config object (either
passed as an argument or loaded from `),tve=a("code"),vgr=o("pretrained_model_name_or_path"),Fgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ave=a("code"),Tgr=o("pretrained_model_name_or_path"),Mgr=o(":"),Egr=l(),rt=a("ul"),m7=a("li"),nve=a("strong"),Cgr=o("data2vec-audio"),wgr=o(" \u2014 "),AH=a("a"),Agr=o("Data2VecAudioForAudioFrameClassification"),Lgr=o(" (Data2VecAudio model)"),ygr=l(),g7=a("li"),sve=a("strong"),xgr=o("unispeech-sat"),$gr=o(" \u2014 "),LH=a("a"),kgr=o("UniSpeechSatForAudioFrameClassification"),Sgr=o(" (UniSpeechSat model)"),Rgr=l(),h7=a("li"),lve=a("strong"),Pgr=o("wav2vec2"),Bgr=o(" \u2014 "),yH=a("a"),Igr=o("Wav2Vec2ForAudioFrameClassification"),Ngr=o(" (Wav2Vec2 model)"),qgr=l(),p7=a("li"),ive=a("strong"),jgr=o("wav2vec2-conformer"),Dgr=o(" \u2014 "),xH=a("a"),Ggr=o("Wav2Vec2ConformerForAudioFrameClassification"),Ogr=o(" (Wav2Vec2-Conformer model)"),Vgr=l(),_7=a("li"),dve=a("strong"),Xgr=o("wavlm"),zgr=o(" \u2014 "),$H=a("a"),Wgr=o("WavLMForAudioFrameClassification"),Qgr=o(" (WavLM model)"),Hgr=l(),u7=a("p"),Ugr=o("The model is set in evaluation mode by default using "),cve=a("code"),Jgr=o("model.eval()"),Ygr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fve=a("code"),Kgr=o("model.train()"),Zgr=l(),F(b7.$$.fragment),Aze=l(),Nd=a("h2"),v7=a("a"),mve=a("span"),F(fy.$$.fragment),ehr=l(),gve=a("span"),ohr=o("AutoModelForCTC"),Lze=l(),Qo=a("div"),F(my.$$.fragment),rhr=l(),qd=a("p"),thr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),kH=a("a"),ahr=o("from_pretrained()"),nhr=o(" class method or the "),SH=a("a"),shr=o("from_config()"),lhr=o(` class
method.`),ihr=l(),gy=a("p"),dhr=o("This class cannot be instantiated directly using "),hve=a("code"),chr=o("__init__()"),fhr=o(" (throws an error)."),mhr=l(),wt=a("div"),F(hy.$$.fragment),ghr=l(),pve=a("p"),hhr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),phr=l(),jd=a("p"),_hr=o(`Note:
Loading a model from its configuration file does `),_ve=a("strong"),uhr=o("not"),bhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=a("a"),vhr=o("from_pretrained()"),Fhr=o(" to load the model weights."),Thr=l(),F(F7.$$.fragment),Mhr=l(),ho=a("div"),F(py.$$.fragment),Ehr=l(),uve=a("p"),Chr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),whr=l(),Ka=a("p"),Ahr=o("The model class to instantiate is selected based on the "),bve=a("code"),Lhr=o("model_type"),yhr=o(` property of the config object (either
passed as an argument or loaded from `),vve=a("code"),xhr=o("pretrained_model_name_or_path"),$hr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fve=a("code"),khr=o("pretrained_model_name_or_path"),Shr=o(":"),Rhr=l(),Le=a("ul"),T7=a("li"),Tve=a("strong"),Phr=o("data2vec-audio"),Bhr=o(" \u2014 "),PH=a("a"),Ihr=o("Data2VecAudioForCTC"),Nhr=o(" (Data2VecAudio model)"),qhr=l(),M7=a("li"),Mve=a("strong"),jhr=o("hubert"),Dhr=o(" \u2014 "),BH=a("a"),Ghr=o("HubertForCTC"),Ohr=o(" (Hubert model)"),Vhr=l(),E7=a("li"),Eve=a("strong"),Xhr=o("mctct"),zhr=o(" \u2014 "),IH=a("a"),Whr=o("MCTCTForCTC"),Qhr=o(" (M-CTC-T model)"),Hhr=l(),C7=a("li"),Cve=a("strong"),Uhr=o("sew"),Jhr=o(" \u2014 "),NH=a("a"),Yhr=o("SEWForCTC"),Khr=o(" (SEW model)"),Zhr=l(),w7=a("li"),wve=a("strong"),epr=o("sew-d"),opr=o(" \u2014 "),qH=a("a"),rpr=o("SEWDForCTC"),tpr=o(" (SEW-D model)"),apr=l(),A7=a("li"),Ave=a("strong"),npr=o("unispeech"),spr=o(" \u2014 "),jH=a("a"),lpr=o("UniSpeechForCTC"),ipr=o(" (UniSpeech model)"),dpr=l(),L7=a("li"),Lve=a("strong"),cpr=o("unispeech-sat"),fpr=o(" \u2014 "),DH=a("a"),mpr=o("UniSpeechSatForCTC"),gpr=o(" (UniSpeechSat model)"),hpr=l(),y7=a("li"),yve=a("strong"),ppr=o("wav2vec2"),_pr=o(" \u2014 "),GH=a("a"),upr=o("Wav2Vec2ForCTC"),bpr=o(" (Wav2Vec2 model)"),vpr=l(),x7=a("li"),xve=a("strong"),Fpr=o("wav2vec2-conformer"),Tpr=o(" \u2014 "),OH=a("a"),Mpr=o("Wav2Vec2ConformerForCTC"),Epr=o(" (Wav2Vec2-Conformer model)"),Cpr=l(),$7=a("li"),$ve=a("strong"),wpr=o("wavlm"),Apr=o(" \u2014 "),VH=a("a"),Lpr=o("WavLMForCTC"),ypr=o(" (WavLM model)"),xpr=l(),k7=a("p"),$pr=o("The model is set in evaluation mode by default using "),kve=a("code"),kpr=o("model.eval()"),Spr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sve=a("code"),Rpr=o("model.train()"),Ppr=l(),F(S7.$$.fragment),yze=l(),Dd=a("h2"),R7=a("a"),Rve=a("span"),F(_y.$$.fragment),Bpr=l(),Pve=a("span"),Ipr=o("AutoModelForSpeechSeq2Seq"),xze=l(),Ho=a("div"),F(uy.$$.fragment),Npr=l(),Gd=a("p"),qpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),XH=a("a"),jpr=o("from_pretrained()"),Dpr=o(" class method or the "),zH=a("a"),Gpr=o("from_config()"),Opr=o(` class
method.`),Vpr=l(),by=a("p"),Xpr=o("This class cannot be instantiated directly using "),Bve=a("code"),zpr=o("__init__()"),Wpr=o(" (throws an error)."),Qpr=l(),At=a("div"),F(vy.$$.fragment),Hpr=l(),Ive=a("p"),Upr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Jpr=l(),Od=a("p"),Ypr=o(`Note:
Loading a model from its configuration file does `),Nve=a("strong"),Kpr=o("not"),Zpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WH=a("a"),e_r=o("from_pretrained()"),o_r=o(" to load the model weights."),r_r=l(),F(P7.$$.fragment),t_r=l(),po=a("div"),F(Fy.$$.fragment),a_r=l(),qve=a("p"),n_r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),s_r=l(),Za=a("p"),l_r=o("The model class to instantiate is selected based on the "),jve=a("code"),i_r=o("model_type"),d_r=o(` property of the config object (either
passed as an argument or loaded from `),Dve=a("code"),c_r=o("pretrained_model_name_or_path"),f_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gve=a("code"),m_r=o("pretrained_model_name_or_path"),g_r=o(":"),h_r=l(),Ty=a("ul"),B7=a("li"),Ove=a("strong"),p_r=o("speech-encoder-decoder"),__r=o(" \u2014 "),QH=a("a"),u_r=o("SpeechEncoderDecoderModel"),b_r=o(" (Speech Encoder decoder model)"),v_r=l(),I7=a("li"),Vve=a("strong"),F_r=o("speech_to_text"),T_r=o(" \u2014 "),HH=a("a"),M_r=o("Speech2TextForConditionalGeneration"),E_r=o(" (Speech2Text model)"),C_r=l(),N7=a("p"),w_r=o("The model is set in evaluation mode by default using "),Xve=a("code"),A_r=o("model.eval()"),L_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zve=a("code"),y_r=o("model.train()"),x_r=l(),F(q7.$$.fragment),$ze=l(),Vd=a("h2"),j7=a("a"),Wve=a("span"),F(My.$$.fragment),$_r=l(),Qve=a("span"),k_r=o("AutoModelForAudioXVector"),kze=l(),Uo=a("div"),F(Ey.$$.fragment),S_r=l(),Xd=a("p"),R_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),UH=a("a"),P_r=o("from_pretrained()"),B_r=o(" class method or the "),JH=a("a"),I_r=o("from_config()"),N_r=o(` class
method.`),q_r=l(),Cy=a("p"),j_r=o("This class cannot be instantiated directly using "),Hve=a("code"),D_r=o("__init__()"),G_r=o(" (throws an error)."),O_r=l(),Lt=a("div"),F(wy.$$.fragment),V_r=l(),Uve=a("p"),X_r=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),z_r=l(),zd=a("p"),W_r=o(`Note:
Loading a model from its configuration file does `),Jve=a("strong"),Q_r=o("not"),H_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=a("a"),U_r=o("from_pretrained()"),J_r=o(" to load the model weights."),Y_r=l(),F(D7.$$.fragment),K_r=l(),_o=a("div"),F(Ay.$$.fragment),Z_r=l(),Yve=a("p"),eur=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),our=l(),en=a("p"),rur=o("The model class to instantiate is selected based on the "),Kve=a("code"),tur=o("model_type"),aur=o(` property of the config object (either
passed as an argument or loaded from `),Zve=a("code"),nur=o("pretrained_model_name_or_path"),sur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eFe=a("code"),lur=o("pretrained_model_name_or_path"),iur=o(":"),dur=l(),tt=a("ul"),G7=a("li"),oFe=a("strong"),cur=o("data2vec-audio"),fur=o(" \u2014 "),KH=a("a"),mur=o("Data2VecAudioForXVector"),gur=o(" (Data2VecAudio model)"),hur=l(),O7=a("li"),rFe=a("strong"),pur=o("unispeech-sat"),_ur=o(" \u2014 "),ZH=a("a"),uur=o("UniSpeechSatForXVector"),bur=o(" (UniSpeechSat model)"),vur=l(),V7=a("li"),tFe=a("strong"),Fur=o("wav2vec2"),Tur=o(" \u2014 "),eU=a("a"),Mur=o("Wav2Vec2ForXVector"),Eur=o(" (Wav2Vec2 model)"),Cur=l(),X7=a("li"),aFe=a("strong"),wur=o("wav2vec2-conformer"),Aur=o(" \u2014 "),oU=a("a"),Lur=o("Wav2Vec2ConformerForXVector"),yur=o(" (Wav2Vec2-Conformer model)"),xur=l(),z7=a("li"),nFe=a("strong"),$ur=o("wavlm"),kur=o(" \u2014 "),rU=a("a"),Sur=o("WavLMForXVector"),Rur=o(" (WavLM model)"),Pur=l(),W7=a("p"),Bur=o("The model is set in evaluation mode by default using "),sFe=a("code"),Iur=o("model.eval()"),Nur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lFe=a("code"),qur=o("model.train()"),jur=l(),F(Q7.$$.fragment),Sze=l(),Wd=a("h2"),H7=a("a"),iFe=a("span"),F(Ly.$$.fragment),Dur=l(),dFe=a("span"),Gur=o("AutoModelForMaskedImageModeling"),Rze=l(),Jo=a("div"),F(yy.$$.fragment),Our=l(),Qd=a("p"),Vur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),tU=a("a"),Xur=o("from_pretrained()"),zur=o(" class method or the "),aU=a("a"),Wur=o("from_config()"),Qur=o(` class
method.`),Hur=l(),xy=a("p"),Uur=o("This class cannot be instantiated directly using "),cFe=a("code"),Jur=o("__init__()"),Yur=o(" (throws an error)."),Kur=l(),yt=a("div"),F($y.$$.fragment),Zur=l(),fFe=a("p"),e1r=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),o1r=l(),Hd=a("p"),r1r=o(`Note:
Loading a model from its configuration file does `),mFe=a("strong"),t1r=o("not"),a1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=a("a"),n1r=o("from_pretrained()"),s1r=o(" to load the model weights."),l1r=l(),F(U7.$$.fragment),i1r=l(),uo=a("div"),F(ky.$$.fragment),d1r=l(),gFe=a("p"),c1r=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),f1r=l(),on=a("p"),m1r=o("The model class to instantiate is selected based on the "),hFe=a("code"),g1r=o("model_type"),h1r=o(` property of the config object (either
passed as an argument or loaded from `),pFe=a("code"),p1r=o("pretrained_model_name_or_path"),_1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Fe=a("code"),u1r=o("pretrained_model_name_or_path"),b1r=o(":"),v1r=l(),Ud=a("ul"),J7=a("li"),uFe=a("strong"),F1r=o("deit"),T1r=o(" \u2014 "),sU=a("a"),M1r=o("DeiTForMaskedImageModeling"),E1r=o(" (DeiT model)"),C1r=l(),Y7=a("li"),bFe=a("strong"),w1r=o("swin"),A1r=o(" \u2014 "),lU=a("a"),L1r=o("SwinForMaskedImageModeling"),y1r=o(" (Swin Transformer model)"),x1r=l(),K7=a("li"),vFe=a("strong"),$1r=o("vit"),k1r=o(" \u2014 "),iU=a("a"),S1r=o("ViTForMaskedImageModeling"),R1r=o(" (ViT model)"),P1r=l(),Z7=a("p"),B1r=o("The model is set in evaluation mode by default using "),FFe=a("code"),I1r=o("model.eval()"),N1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),TFe=a("code"),q1r=o("model.train()"),j1r=l(),F(e8.$$.fragment),Pze=l(),Jd=a("h2"),o8=a("a"),MFe=a("span"),F(Sy.$$.fragment),D1r=l(),EFe=a("span"),G1r=o("AutoModelForObjectDetection"),Bze=l(),Yo=a("div"),F(Ry.$$.fragment),O1r=l(),Yd=a("p"),V1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),dU=a("a"),X1r=o("from_pretrained()"),z1r=o(" class method or the "),cU=a("a"),W1r=o("from_config()"),Q1r=o(` class
method.`),H1r=l(),Py=a("p"),U1r=o("This class cannot be instantiated directly using "),CFe=a("code"),J1r=o("__init__()"),Y1r=o(" (throws an error)."),K1r=l(),xt=a("div"),F(By.$$.fragment),Z1r=l(),wFe=a("p"),e2r=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),o2r=l(),Kd=a("p"),r2r=o(`Note:
Loading a model from its configuration file does `),AFe=a("strong"),t2r=o("not"),a2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=a("a"),n2r=o("from_pretrained()"),s2r=o(" to load the model weights."),l2r=l(),F(r8.$$.fragment),i2r=l(),bo=a("div"),F(Iy.$$.fragment),d2r=l(),LFe=a("p"),c2r=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),f2r=l(),rn=a("p"),m2r=o("The model class to instantiate is selected based on the "),yFe=a("code"),g2r=o("model_type"),h2r=o(` property of the config object (either
passed as an argument or loaded from `),xFe=a("code"),p2r=o("pretrained_model_name_or_path"),_2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Fe=a("code"),u2r=o("pretrained_model_name_or_path"),b2r=o(":"),v2r=l(),Ny=a("ul"),t8=a("li"),kFe=a("strong"),F2r=o("detr"),T2r=o(" \u2014 "),mU=a("a"),M2r=o("DetrForObjectDetection"),E2r=o(" (DETR model)"),C2r=l(),a8=a("li"),SFe=a("strong"),w2r=o("yolos"),A2r=o(" \u2014 "),gU=a("a"),L2r=o("YolosForObjectDetection"),y2r=o(" (YOLOS model)"),x2r=l(),n8=a("p"),$2r=o("The model is set in evaluation mode by default using "),RFe=a("code"),k2r=o("model.eval()"),S2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),PFe=a("code"),R2r=o("model.train()"),P2r=l(),F(s8.$$.fragment),Ize=l(),Zd=a("h2"),l8=a("a"),BFe=a("span"),F(qy.$$.fragment),B2r=l(),IFe=a("span"),I2r=o("AutoModelForImageSegmentation"),Nze=l(),Ko=a("div"),F(jy.$$.fragment),N2r=l(),ec=a("p"),q2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),hU=a("a"),j2r=o("from_pretrained()"),D2r=o(" class method or the "),pU=a("a"),G2r=o("from_config()"),O2r=o(` class
method.`),V2r=l(),Dy=a("p"),X2r=o("This class cannot be instantiated directly using "),NFe=a("code"),z2r=o("__init__()"),W2r=o(" (throws an error)."),Q2r=l(),$t=a("div"),F(Gy.$$.fragment),H2r=l(),qFe=a("p"),U2r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),J2r=l(),oc=a("p"),Y2r=o(`Note:
Loading a model from its configuration file does `),jFe=a("strong"),K2r=o("not"),Z2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_U=a("a"),ebr=o("from_pretrained()"),obr=o(" to load the model weights."),rbr=l(),F(i8.$$.fragment),tbr=l(),vo=a("div"),F(Oy.$$.fragment),abr=l(),DFe=a("p"),nbr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),sbr=l(),tn=a("p"),lbr=o("The model class to instantiate is selected based on the "),GFe=a("code"),ibr=o("model_type"),dbr=o(` property of the config object (either
passed as an argument or loaded from `),OFe=a("code"),cbr=o("pretrained_model_name_or_path"),fbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VFe=a("code"),mbr=o("pretrained_model_name_or_path"),gbr=o(":"),hbr=l(),XFe=a("ul"),d8=a("li"),zFe=a("strong"),pbr=o("detr"),_br=o(" \u2014 "),uU=a("a"),ubr=o("DetrForSegmentation"),bbr=o(" (DETR model)"),vbr=l(),c8=a("p"),Fbr=o("The model is set in evaluation mode by default using "),WFe=a("code"),Tbr=o("model.eval()"),Mbr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),QFe=a("code"),Ebr=o("model.train()"),Cbr=l(),F(f8.$$.fragment),qze=l(),rc=a("h2"),m8=a("a"),HFe=a("span"),F(Vy.$$.fragment),wbr=l(),UFe=a("span"),Abr=o("AutoModelForSemanticSegmentation"),jze=l(),Zo=a("div"),F(Xy.$$.fragment),Lbr=l(),tc=a("p"),ybr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),bU=a("a"),xbr=o("from_pretrained()"),$br=o(" class method or the "),vU=a("a"),kbr=o("from_config()"),Sbr=o(` class
method.`),Rbr=l(),zy=a("p"),Pbr=o("This class cannot be instantiated directly using "),JFe=a("code"),Bbr=o("__init__()"),Ibr=o(" (throws an error)."),Nbr=l(),kt=a("div"),F(Wy.$$.fragment),qbr=l(),YFe=a("p"),jbr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Dbr=l(),ac=a("p"),Gbr=o(`Note:
Loading a model from its configuration file does `),KFe=a("strong"),Obr=o("not"),Vbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FU=a("a"),Xbr=o("from_pretrained()"),zbr=o(" to load the model weights."),Wbr=l(),F(g8.$$.fragment),Qbr=l(),Fo=a("div"),F(Qy.$$.fragment),Hbr=l(),ZFe=a("p"),Ubr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Jbr=l(),an=a("p"),Ybr=o("The model class to instantiate is selected based on the "),eTe=a("code"),Kbr=o("model_type"),Zbr=o(` property of the config object (either
passed as an argument or loaded from `),oTe=a("code"),e3r=o("pretrained_model_name_or_path"),o3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rTe=a("code"),r3r=o("pretrained_model_name_or_path"),t3r=o(":"),a3r=l(),at=a("ul"),h8=a("li"),tTe=a("strong"),n3r=o("beit"),s3r=o(" \u2014 "),TU=a("a"),l3r=o("BeitForSemanticSegmentation"),i3r=o(" (BEiT model)"),d3r=l(),p8=a("li"),aTe=a("strong"),c3r=o("data2vec-vision"),f3r=o(" \u2014 "),MU=a("a"),m3r=o("Data2VecVisionForSemanticSegmentation"),g3r=o(" (Data2VecVision model)"),h3r=l(),_8=a("li"),nTe=a("strong"),p3r=o("dpt"),_3r=o(" \u2014 "),EU=a("a"),u3r=o("DPTForSemanticSegmentation"),b3r=o(" (DPT model)"),v3r=l(),u8=a("li"),sTe=a("strong"),F3r=o("mobilevit"),T3r=o(" \u2014 "),CU=a("a"),M3r=o("MobileViTForSemanticSegmentation"),E3r=o(" (MobileViT model)"),C3r=l(),b8=a("li"),lTe=a("strong"),w3r=o("segformer"),A3r=o(" \u2014 "),wU=a("a"),L3r=o("SegformerForSemanticSegmentation"),y3r=o(" (SegFormer model)"),x3r=l(),v8=a("p"),$3r=o("The model is set in evaluation mode by default using "),iTe=a("code"),k3r=o("model.eval()"),S3r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dTe=a("code"),R3r=o("model.train()"),P3r=l(),F(F8.$$.fragment),Dze=l(),nc=a("h2"),T8=a("a"),cTe=a("span"),F(Hy.$$.fragment),B3r=l(),fTe=a("span"),I3r=o("AutoModelForInstanceSegmentation"),Gze=l(),er=a("div"),F(Uy.$$.fragment),N3r=l(),sc=a("p"),q3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),AU=a("a"),j3r=o("from_pretrained()"),D3r=o(" class method or the "),LU=a("a"),G3r=o("from_config()"),O3r=o(` class
method.`),V3r=l(),Jy=a("p"),X3r=o("This class cannot be instantiated directly using "),mTe=a("code"),z3r=o("__init__()"),W3r=o(" (throws an error)."),Q3r=l(),St=a("div"),F(Yy.$$.fragment),H3r=l(),gTe=a("p"),U3r=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),J3r=l(),lc=a("p"),Y3r=o(`Note:
Loading a model from its configuration file does `),hTe=a("strong"),K3r=o("not"),Z3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yU=a("a"),evr=o("from_pretrained()"),ovr=o(" to load the model weights."),rvr=l(),F(M8.$$.fragment),tvr=l(),To=a("div"),F(Ky.$$.fragment),avr=l(),pTe=a("p"),nvr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),svr=l(),nn=a("p"),lvr=o("The model class to instantiate is selected based on the "),_Te=a("code"),ivr=o("model_type"),dvr=o(` property of the config object (either
passed as an argument or loaded from `),uTe=a("code"),cvr=o("pretrained_model_name_or_path"),fvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bTe=a("code"),mvr=o("pretrained_model_name_or_path"),gvr=o(":"),hvr=l(),vTe=a("ul"),E8=a("li"),FTe=a("strong"),pvr=o("maskformer"),_vr=o(" \u2014 "),xU=a("a"),uvr=o("MaskFormerForInstanceSegmentation"),bvr=o(" (MaskFormer model)"),vvr=l(),C8=a("p"),Fvr=o("The model is set in evaluation mode by default using "),TTe=a("code"),Tvr=o("model.eval()"),Mvr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),MTe=a("code"),Evr=o("model.train()"),Cvr=l(),F(w8.$$.fragment),Oze=l(),ic=a("h2"),A8=a("a"),ETe=a("span"),F(Zy.$$.fragment),wvr=l(),CTe=a("span"),Avr=o("TFAutoModel"),Vze=l(),or=a("div"),F(ex.$$.fragment),Lvr=l(),dc=a("p"),yvr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),$U=a("a"),xvr=o("from_pretrained()"),$vr=o(" class method or the "),kU=a("a"),kvr=o("from_config()"),Svr=o(` class
method.`),Rvr=l(),ox=a("p"),Pvr=o("This class cannot be instantiated directly using "),wTe=a("code"),Bvr=o("__init__()"),Ivr=o(" (throws an error)."),Nvr=l(),Rt=a("div"),F(rx.$$.fragment),qvr=l(),ATe=a("p"),jvr=o("Instantiates one of the base model classes of the library from a configuration."),Dvr=l(),cc=a("p"),Gvr=o(`Note:
Loading a model from its configuration file does `),LTe=a("strong"),Ovr=o("not"),Vvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SU=a("a"),Xvr=o("from_pretrained()"),zvr=o(" to load the model weights."),Wvr=l(),F(L8.$$.fragment),Qvr=l(),xr=a("div"),F(tx.$$.fragment),Hvr=l(),yTe=a("p"),Uvr=o("Instantiate one of the base model classes of the library from a pretrained model."),Jvr=l(),sn=a("p"),Yvr=o("The model class to instantiate is selected based on the "),xTe=a("code"),Kvr=o("model_type"),Zvr=o(` property of the config object (either
passed as an argument or loaded from `),$Te=a("code"),eFr=o("pretrained_model_name_or_path"),oFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kTe=a("code"),rFr=o("pretrained_model_name_or_path"),tFr=o(":"),aFr=l(),q=a("ul"),y8=a("li"),STe=a("strong"),nFr=o("albert"),sFr=o(" \u2014 "),RU=a("a"),lFr=o("TFAlbertModel"),iFr=o(" (ALBERT model)"),dFr=l(),x8=a("li"),RTe=a("strong"),cFr=o("bart"),fFr=o(" \u2014 "),PU=a("a"),mFr=o("TFBartModel"),gFr=o(" (BART model)"),hFr=l(),$8=a("li"),PTe=a("strong"),pFr=o("bert"),_Fr=o(" \u2014 "),BU=a("a"),uFr=o("TFBertModel"),bFr=o(" (BERT model)"),vFr=l(),k8=a("li"),BTe=a("strong"),FFr=o("blenderbot"),TFr=o(" \u2014 "),IU=a("a"),MFr=o("TFBlenderbotModel"),EFr=o(" (Blenderbot model)"),CFr=l(),S8=a("li"),ITe=a("strong"),wFr=o("blenderbot-small"),AFr=o(" \u2014 "),NU=a("a"),LFr=o("TFBlenderbotSmallModel"),yFr=o(" (BlenderbotSmall model)"),xFr=l(),R8=a("li"),NTe=a("strong"),$Fr=o("camembert"),kFr=o(" \u2014 "),qU=a("a"),SFr=o("TFCamembertModel"),RFr=o(" (CamemBERT model)"),PFr=l(),P8=a("li"),qTe=a("strong"),BFr=o("clip"),IFr=o(" \u2014 "),jU=a("a"),NFr=o("TFCLIPModel"),qFr=o(" (CLIP model)"),jFr=l(),B8=a("li"),jTe=a("strong"),DFr=o("convbert"),GFr=o(" \u2014 "),DU=a("a"),OFr=o("TFConvBertModel"),VFr=o(" (ConvBERT model)"),XFr=l(),I8=a("li"),DTe=a("strong"),zFr=o("convnext"),WFr=o(" \u2014 "),GU=a("a"),QFr=o("TFConvNextModel"),HFr=o(" (ConvNeXT model)"),UFr=l(),N8=a("li"),GTe=a("strong"),JFr=o("ctrl"),YFr=o(" \u2014 "),OU=a("a"),KFr=o("TFCTRLModel"),ZFr=o(" (CTRL model)"),eTr=l(),q8=a("li"),OTe=a("strong"),oTr=o("data2vec-vision"),rTr=o(" \u2014 "),VU=a("a"),tTr=o("TFData2VecVisionModel"),aTr=o(" (Data2VecVision model)"),nTr=l(),j8=a("li"),VTe=a("strong"),sTr=o("deberta"),lTr=o(" \u2014 "),XU=a("a"),iTr=o("TFDebertaModel"),dTr=o(" (DeBERTa model)"),cTr=l(),D8=a("li"),XTe=a("strong"),fTr=o("deberta-v2"),mTr=o(" \u2014 "),zU=a("a"),gTr=o("TFDebertaV2Model"),hTr=o(" (DeBERTa-v2 model)"),pTr=l(),G8=a("li"),zTe=a("strong"),_Tr=o("deit"),uTr=o(" \u2014 "),WU=a("a"),bTr=o("TFDeiTModel"),vTr=o(" (DeiT model)"),FTr=l(),O8=a("li"),WTe=a("strong"),TTr=o("distilbert"),MTr=o(" \u2014 "),QU=a("a"),ETr=o("TFDistilBertModel"),CTr=o(" (DistilBERT model)"),wTr=l(),V8=a("li"),QTe=a("strong"),ATr=o("dpr"),LTr=o(" \u2014 "),HU=a("a"),yTr=o("TFDPRQuestionEncoder"),xTr=o(" (DPR model)"),$Tr=l(),X8=a("li"),HTe=a("strong"),kTr=o("electra"),STr=o(" \u2014 "),UU=a("a"),RTr=o("TFElectraModel"),PTr=o(" (ELECTRA model)"),BTr=l(),z8=a("li"),UTe=a("strong"),ITr=o("flaubert"),NTr=o(" \u2014 "),JU=a("a"),qTr=o("TFFlaubertModel"),jTr=o(" (FlauBERT model)"),DTr=l(),Ks=a("li"),JTe=a("strong"),GTr=o("funnel"),OTr=o(" \u2014 "),YU=a("a"),VTr=o("TFFunnelModel"),XTr=o(" or "),KU=a("a"),zTr=o("TFFunnelBaseModel"),WTr=o(" (Funnel Transformer model)"),QTr=l(),W8=a("li"),YTe=a("strong"),HTr=o("gpt2"),UTr=o(" \u2014 "),ZU=a("a"),JTr=o("TFGPT2Model"),YTr=o(" (OpenAI GPT-2 model)"),KTr=l(),Q8=a("li"),KTe=a("strong"),ZTr=o("gptj"),e7r=o(" \u2014 "),eJ=a("a"),o7r=o("TFGPTJModel"),r7r=o(" (GPT-J model)"),t7r=l(),H8=a("li"),ZTe=a("strong"),a7r=o("hubert"),n7r=o(" \u2014 "),oJ=a("a"),s7r=o("TFHubertModel"),l7r=o(" (Hubert model)"),i7r=l(),U8=a("li"),e7e=a("strong"),d7r=o("layoutlm"),c7r=o(" \u2014 "),rJ=a("a"),f7r=o("TFLayoutLMModel"),m7r=o(" (LayoutLM model)"),g7r=l(),J8=a("li"),o7e=a("strong"),h7r=o("led"),p7r=o(" \u2014 "),tJ=a("a"),_7r=o("TFLEDModel"),u7r=o(" (LED model)"),b7r=l(),Y8=a("li"),r7e=a("strong"),v7r=o("longformer"),F7r=o(" \u2014 "),aJ=a("a"),T7r=o("TFLongformerModel"),M7r=o(" (Longformer model)"),E7r=l(),K8=a("li"),t7e=a("strong"),C7r=o("lxmert"),w7r=o(" \u2014 "),nJ=a("a"),A7r=o("TFLxmertModel"),L7r=o(" (LXMERT model)"),y7r=l(),Z8=a("li"),a7e=a("strong"),x7r=o("marian"),$7r=o(" \u2014 "),sJ=a("a"),k7r=o("TFMarianModel"),S7r=o(" (Marian model)"),R7r=l(),e9=a("li"),n7e=a("strong"),P7r=o("mbart"),B7r=o(" \u2014 "),lJ=a("a"),I7r=o("TFMBartModel"),N7r=o(" (mBART model)"),q7r=l(),o9=a("li"),s7e=a("strong"),j7r=o("mobilebert"),D7r=o(" \u2014 "),iJ=a("a"),G7r=o("TFMobileBertModel"),O7r=o(" (MobileBERT model)"),V7r=l(),r9=a("li"),l7e=a("strong"),X7r=o("mpnet"),z7r=o(" \u2014 "),dJ=a("a"),W7r=o("TFMPNetModel"),Q7r=o(" (MPNet model)"),H7r=l(),t9=a("li"),i7e=a("strong"),U7r=o("mt5"),J7r=o(" \u2014 "),cJ=a("a"),Y7r=o("TFMT5Model"),K7r=o(" (MT5 model)"),Z7r=l(),a9=a("li"),d7e=a("strong"),e8r=o("openai-gpt"),o8r=o(" \u2014 "),fJ=a("a"),r8r=o("TFOpenAIGPTModel"),t8r=o(" (OpenAI GPT model)"),a8r=l(),n9=a("li"),c7e=a("strong"),n8r=o("opt"),s8r=o(" \u2014 "),mJ=a("a"),l8r=o("TFOPTModel"),i8r=o(" (OPT model)"),d8r=l(),s9=a("li"),f7e=a("strong"),c8r=o("pegasus"),f8r=o(" \u2014 "),gJ=a("a"),m8r=o("TFPegasusModel"),g8r=o(" (Pegasus model)"),h8r=l(),l9=a("li"),m7e=a("strong"),p8r=o("regnet"),_8r=o(" \u2014 "),hJ=a("a"),u8r=o("TFRegNetModel"),b8r=o(" (RegNet model)"),v8r=l(),i9=a("li"),g7e=a("strong"),F8r=o("rembert"),T8r=o(" \u2014 "),pJ=a("a"),M8r=o("TFRemBertModel"),E8r=o(" (RemBERT model)"),C8r=l(),d9=a("li"),h7e=a("strong"),w8r=o("resnet"),A8r=o(" \u2014 "),_J=a("a"),L8r=o("TFResNetModel"),y8r=o(" (ResNet model)"),x8r=l(),c9=a("li"),p7e=a("strong"),$8r=o("roberta"),k8r=o(" \u2014 "),uJ=a("a"),S8r=o("TFRobertaModel"),R8r=o(" (RoBERTa model)"),P8r=l(),f9=a("li"),_7e=a("strong"),B8r=o("roformer"),I8r=o(" \u2014 "),bJ=a("a"),N8r=o("TFRoFormerModel"),q8r=o(" (RoFormer model)"),j8r=l(),m9=a("li"),u7e=a("strong"),D8r=o("speech_to_text"),G8r=o(" \u2014 "),vJ=a("a"),O8r=o("TFSpeech2TextModel"),V8r=o(" (Speech2Text model)"),X8r=l(),g9=a("li"),b7e=a("strong"),z8r=o("swin"),W8r=o(" \u2014 "),FJ=a("a"),Q8r=o("TFSwinModel"),H8r=o(" (Swin Transformer model)"),U8r=l(),h9=a("li"),v7e=a("strong"),J8r=o("t5"),Y8r=o(" \u2014 "),TJ=a("a"),K8r=o("TFT5Model"),Z8r=o(" (T5 model)"),e9r=l(),p9=a("li"),F7e=a("strong"),o9r=o("tapas"),r9r=o(" \u2014 "),MJ=a("a"),t9r=o("TFTapasModel"),a9r=o(" (TAPAS model)"),n9r=l(),_9=a("li"),T7e=a("strong"),s9r=o("transfo-xl"),l9r=o(" \u2014 "),EJ=a("a"),i9r=o("TFTransfoXLModel"),d9r=o(" (Transformer-XL model)"),c9r=l(),u9=a("li"),M7e=a("strong"),f9r=o("vit"),m9r=o(" \u2014 "),CJ=a("a"),g9r=o("TFViTModel"),h9r=o(" (ViT model)"),p9r=l(),b9=a("li"),E7e=a("strong"),_9r=o("vit_mae"),u9r=o(" \u2014 "),wJ=a("a"),b9r=o("TFViTMAEModel"),v9r=o(" (ViTMAE model)"),F9r=l(),v9=a("li"),C7e=a("strong"),T9r=o("wav2vec2"),M9r=o(" \u2014 "),AJ=a("a"),E9r=o("TFWav2Vec2Model"),C9r=o(" (Wav2Vec2 model)"),w9r=l(),F9=a("li"),w7e=a("strong"),A9r=o("xlm"),L9r=o(" \u2014 "),LJ=a("a"),y9r=o("TFXLMModel"),x9r=o(" (XLM model)"),$9r=l(),T9=a("li"),A7e=a("strong"),k9r=o("xlm-roberta"),S9r=o(" \u2014 "),yJ=a("a"),R9r=o("TFXLMRobertaModel"),P9r=o(" (XLM-RoBERTa model)"),B9r=l(),M9=a("li"),L7e=a("strong"),I9r=o("xlnet"),N9r=o(" \u2014 "),xJ=a("a"),q9r=o("TFXLNetModel"),j9r=o(" (XLNet model)"),D9r=l(),F(E9.$$.fragment),Xze=l(),fc=a("h2"),C9=a("a"),y7e=a("span"),F(ax.$$.fragment),G9r=l(),x7e=a("span"),O9r=o("TFAutoModelForPreTraining"),zze=l(),rr=a("div"),F(nx.$$.fragment),V9r=l(),mc=a("p"),X9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),$J=a("a"),z9r=o("from_pretrained()"),W9r=o(" class method or the "),kJ=a("a"),Q9r=o("from_config()"),H9r=o(` class
method.`),U9r=l(),sx=a("p"),J9r=o("This class cannot be instantiated directly using "),$7e=a("code"),Y9r=o("__init__()"),K9r=o(" (throws an error)."),Z9r=l(),Pt=a("div"),F(lx.$$.fragment),eMr=l(),k7e=a("p"),oMr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),rMr=l(),gc=a("p"),tMr=o(`Note:
Loading a model from its configuration file does `),S7e=a("strong"),aMr=o("not"),nMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SJ=a("a"),sMr=o("from_pretrained()"),lMr=o(" to load the model weights."),iMr=l(),F(w9.$$.fragment),dMr=l(),$r=a("div"),F(ix.$$.fragment),cMr=l(),R7e=a("p"),fMr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),mMr=l(),ln=a("p"),gMr=o("The model class to instantiate is selected based on the "),P7e=a("code"),hMr=o("model_type"),pMr=o(` property of the config object (either
passed as an argument or loaded from `),B7e=a("code"),_Mr=o("pretrained_model_name_or_path"),uMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I7e=a("code"),bMr=o("pretrained_model_name_or_path"),vMr=o(":"),FMr=l(),se=a("ul"),A9=a("li"),N7e=a("strong"),TMr=o("albert"),MMr=o(" \u2014 "),RJ=a("a"),EMr=o("TFAlbertForPreTraining"),CMr=o(" (ALBERT model)"),wMr=l(),L9=a("li"),q7e=a("strong"),AMr=o("bart"),LMr=o(" \u2014 "),PJ=a("a"),yMr=o("TFBartForConditionalGeneration"),xMr=o(" (BART model)"),$Mr=l(),y9=a("li"),j7e=a("strong"),kMr=o("bert"),SMr=o(" \u2014 "),BJ=a("a"),RMr=o("TFBertForPreTraining"),PMr=o(" (BERT model)"),BMr=l(),x9=a("li"),D7e=a("strong"),IMr=o("camembert"),NMr=o(" \u2014 "),IJ=a("a"),qMr=o("TFCamembertForMaskedLM"),jMr=o(" (CamemBERT model)"),DMr=l(),$9=a("li"),G7e=a("strong"),GMr=o("ctrl"),OMr=o(" \u2014 "),NJ=a("a"),VMr=o("TFCTRLLMHeadModel"),XMr=o(" (CTRL model)"),zMr=l(),k9=a("li"),O7e=a("strong"),WMr=o("distilbert"),QMr=o(" \u2014 "),qJ=a("a"),HMr=o("TFDistilBertForMaskedLM"),UMr=o(" (DistilBERT model)"),JMr=l(),S9=a("li"),V7e=a("strong"),YMr=o("electra"),KMr=o(" \u2014 "),jJ=a("a"),ZMr=o("TFElectraForPreTraining"),e4r=o(" (ELECTRA model)"),o4r=l(),R9=a("li"),X7e=a("strong"),r4r=o("flaubert"),t4r=o(" \u2014 "),DJ=a("a"),a4r=o("TFFlaubertWithLMHeadModel"),n4r=o(" (FlauBERT model)"),s4r=l(),P9=a("li"),z7e=a("strong"),l4r=o("funnel"),i4r=o(" \u2014 "),GJ=a("a"),d4r=o("TFFunnelForPreTraining"),c4r=o(" (Funnel Transformer model)"),f4r=l(),B9=a("li"),W7e=a("strong"),m4r=o("gpt2"),g4r=o(" \u2014 "),OJ=a("a"),h4r=o("TFGPT2LMHeadModel"),p4r=o(" (OpenAI GPT-2 model)"),_4r=l(),I9=a("li"),Q7e=a("strong"),u4r=o("layoutlm"),b4r=o(" \u2014 "),VJ=a("a"),v4r=o("TFLayoutLMForMaskedLM"),F4r=o(" (LayoutLM model)"),T4r=l(),N9=a("li"),H7e=a("strong"),M4r=o("lxmert"),E4r=o(" \u2014 "),XJ=a("a"),C4r=o("TFLxmertForPreTraining"),w4r=o(" (LXMERT model)"),A4r=l(),q9=a("li"),U7e=a("strong"),L4r=o("mobilebert"),y4r=o(" \u2014 "),zJ=a("a"),x4r=o("TFMobileBertForPreTraining"),$4r=o(" (MobileBERT model)"),k4r=l(),j9=a("li"),J7e=a("strong"),S4r=o("mpnet"),R4r=o(" \u2014 "),WJ=a("a"),P4r=o("TFMPNetForMaskedLM"),B4r=o(" (MPNet model)"),I4r=l(),D9=a("li"),Y7e=a("strong"),N4r=o("openai-gpt"),q4r=o(" \u2014 "),QJ=a("a"),j4r=o("TFOpenAIGPTLMHeadModel"),D4r=o(" (OpenAI GPT model)"),G4r=l(),G9=a("li"),K7e=a("strong"),O4r=o("roberta"),V4r=o(" \u2014 "),HJ=a("a"),X4r=o("TFRobertaForMaskedLM"),z4r=o(" (RoBERTa model)"),W4r=l(),O9=a("li"),Z7e=a("strong"),Q4r=o("t5"),H4r=o(" \u2014 "),UJ=a("a"),U4r=o("TFT5ForConditionalGeneration"),J4r=o(" (T5 model)"),Y4r=l(),V9=a("li"),e8e=a("strong"),K4r=o("tapas"),Z4r=o(" \u2014 "),JJ=a("a"),eEr=o("TFTapasForMaskedLM"),oEr=o(" (TAPAS model)"),rEr=l(),X9=a("li"),o8e=a("strong"),tEr=o("transfo-xl"),aEr=o(" \u2014 "),YJ=a("a"),nEr=o("TFTransfoXLLMHeadModel"),sEr=o(" (Transformer-XL model)"),lEr=l(),z9=a("li"),r8e=a("strong"),iEr=o("vit_mae"),dEr=o(" \u2014 "),KJ=a("a"),cEr=o("TFViTMAEForPreTraining"),fEr=o(" (ViTMAE model)"),mEr=l(),W9=a("li"),t8e=a("strong"),gEr=o("xlm"),hEr=o(" \u2014 "),ZJ=a("a"),pEr=o("TFXLMWithLMHeadModel"),_Er=o(" (XLM model)"),uEr=l(),Q9=a("li"),a8e=a("strong"),bEr=o("xlm-roberta"),vEr=o(" \u2014 "),eY=a("a"),FEr=o("TFXLMRobertaForMaskedLM"),TEr=o(" (XLM-RoBERTa model)"),MEr=l(),H9=a("li"),n8e=a("strong"),EEr=o("xlnet"),CEr=o(" \u2014 "),oY=a("a"),wEr=o("TFXLNetLMHeadModel"),AEr=o(" (XLNet model)"),LEr=l(),F(U9.$$.fragment),Wze=l(),hc=a("h2"),J9=a("a"),s8e=a("span"),F(dx.$$.fragment),yEr=l(),l8e=a("span"),xEr=o("TFAutoModelForCausalLM"),Qze=l(),tr=a("div"),F(cx.$$.fragment),$Er=l(),pc=a("p"),kEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),rY=a("a"),SEr=o("from_pretrained()"),REr=o(" class method or the "),tY=a("a"),PEr=o("from_config()"),BEr=o(` class
method.`),IEr=l(),fx=a("p"),NEr=o("This class cannot be instantiated directly using "),i8e=a("code"),qEr=o("__init__()"),jEr=o(" (throws an error)."),DEr=l(),Bt=a("div"),F(mx.$$.fragment),GEr=l(),d8e=a("p"),OEr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),VEr=l(),_c=a("p"),XEr=o(`Note:
Loading a model from its configuration file does `),c8e=a("strong"),zEr=o("not"),WEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aY=a("a"),QEr=o("from_pretrained()"),HEr=o(" to load the model weights."),UEr=l(),F(Y9.$$.fragment),JEr=l(),kr=a("div"),F(gx.$$.fragment),YEr=l(),f8e=a("p"),KEr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ZEr=l(),dn=a("p"),eCr=o("The model class to instantiate is selected based on the "),m8e=a("code"),oCr=o("model_type"),rCr=o(` property of the config object (either
passed as an argument or loaded from `),g8e=a("code"),tCr=o("pretrained_model_name_or_path"),aCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h8e=a("code"),nCr=o("pretrained_model_name_or_path"),sCr=o(":"),lCr=l(),Me=a("ul"),K9=a("li"),p8e=a("strong"),iCr=o("bert"),dCr=o(" \u2014 "),nY=a("a"),cCr=o("TFBertLMHeadModel"),fCr=o(" (BERT model)"),mCr=l(),Z9=a("li"),_8e=a("strong"),gCr=o("camembert"),hCr=o(" \u2014 "),sY=a("a"),pCr=o("TFCamembertForCausalLM"),_Cr=o(" (CamemBERT model)"),uCr=l(),eM=a("li"),u8e=a("strong"),bCr=o("ctrl"),vCr=o(" \u2014 "),lY=a("a"),FCr=o("TFCTRLLMHeadModel"),TCr=o(" (CTRL model)"),MCr=l(),oM=a("li"),b8e=a("strong"),ECr=o("gpt2"),CCr=o(" \u2014 "),iY=a("a"),wCr=o("TFGPT2LMHeadModel"),ACr=o(" (OpenAI GPT-2 model)"),LCr=l(),rM=a("li"),v8e=a("strong"),yCr=o("gptj"),xCr=o(" \u2014 "),dY=a("a"),$Cr=o("TFGPTJForCausalLM"),kCr=o(" (GPT-J model)"),SCr=l(),tM=a("li"),F8e=a("strong"),RCr=o("openai-gpt"),PCr=o(" \u2014 "),cY=a("a"),BCr=o("TFOpenAIGPTLMHeadModel"),ICr=o(" (OpenAI GPT model)"),NCr=l(),aM=a("li"),T8e=a("strong"),qCr=o("opt"),jCr=o(" \u2014 "),fY=a("a"),DCr=o("TFOPTForCausalLM"),GCr=o(" (OPT model)"),OCr=l(),nM=a("li"),M8e=a("strong"),VCr=o("rembert"),XCr=o(" \u2014 "),mY=a("a"),zCr=o("TFRemBertForCausalLM"),WCr=o(" (RemBERT model)"),QCr=l(),sM=a("li"),E8e=a("strong"),HCr=o("roberta"),UCr=o(" \u2014 "),gY=a("a"),JCr=o("TFRobertaForCausalLM"),YCr=o(" (RoBERTa model)"),KCr=l(),lM=a("li"),C8e=a("strong"),ZCr=o("roformer"),e5r=o(" \u2014 "),hY=a("a"),o5r=o("TFRoFormerForCausalLM"),r5r=o(" (RoFormer model)"),t5r=l(),iM=a("li"),w8e=a("strong"),a5r=o("transfo-xl"),n5r=o(" \u2014 "),pY=a("a"),s5r=o("TFTransfoXLLMHeadModel"),l5r=o(" (Transformer-XL model)"),i5r=l(),dM=a("li"),A8e=a("strong"),d5r=o("xlm"),c5r=o(" \u2014 "),_Y=a("a"),f5r=o("TFXLMWithLMHeadModel"),m5r=o(" (XLM model)"),g5r=l(),cM=a("li"),L8e=a("strong"),h5r=o("xlnet"),p5r=o(" \u2014 "),uY=a("a"),_5r=o("TFXLNetLMHeadModel"),u5r=o(" (XLNet model)"),b5r=l(),F(fM.$$.fragment),Hze=l(),uc=a("h2"),mM=a("a"),y8e=a("span"),F(hx.$$.fragment),v5r=l(),x8e=a("span"),F5r=o("TFAutoModelForImageClassification"),Uze=l(),ar=a("div"),F(px.$$.fragment),T5r=l(),bc=a("p"),M5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),bY=a("a"),E5r=o("from_pretrained()"),C5r=o(" class method or the "),vY=a("a"),w5r=o("from_config()"),A5r=o(` class
method.`),L5r=l(),_x=a("p"),y5r=o("This class cannot be instantiated directly using "),$8e=a("code"),x5r=o("__init__()"),$5r=o(" (throws an error)."),k5r=l(),It=a("div"),F(ux.$$.fragment),S5r=l(),k8e=a("p"),R5r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),P5r=l(),vc=a("p"),B5r=o(`Note:
Loading a model from its configuration file does `),S8e=a("strong"),I5r=o("not"),N5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=a("a"),q5r=o("from_pretrained()"),j5r=o(" to load the model weights."),D5r=l(),F(gM.$$.fragment),G5r=l(),Sr=a("div"),F(bx.$$.fragment),O5r=l(),R8e=a("p"),V5r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),X5r=l(),cn=a("p"),z5r=o("The model class to instantiate is selected based on the "),P8e=a("code"),W5r=o("model_type"),Q5r=o(` property of the config object (either
passed as an argument or loaded from `),B8e=a("code"),H5r=o("pretrained_model_name_or_path"),U5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I8e=a("code"),J5r=o("pretrained_model_name_or_path"),Y5r=o(":"),K5r=l(),We=a("ul"),hM=a("li"),N8e=a("strong"),Z5r=o("convnext"),e0r=o(" \u2014 "),TY=a("a"),o0r=o("TFConvNextForImageClassification"),r0r=o(" (ConvNeXT model)"),t0r=l(),pM=a("li"),q8e=a("strong"),a0r=o("data2vec-vision"),n0r=o(" \u2014 "),MY=a("a"),s0r=o("TFData2VecVisionForImageClassification"),l0r=o(" (Data2VecVision model)"),i0r=l(),Zs=a("li"),j8e=a("strong"),d0r=o("deit"),c0r=o(" \u2014 "),EY=a("a"),f0r=o("TFDeiTForImageClassification"),m0r=o(" or "),CY=a("a"),g0r=o("TFDeiTForImageClassificationWithTeacher"),h0r=o(" (DeiT model)"),p0r=l(),_M=a("li"),D8e=a("strong"),_0r=o("regnet"),u0r=o(" \u2014 "),wY=a("a"),b0r=o("TFRegNetForImageClassification"),v0r=o(" (RegNet model)"),F0r=l(),uM=a("li"),G8e=a("strong"),T0r=o("resnet"),M0r=o(" \u2014 "),AY=a("a"),E0r=o("TFResNetForImageClassification"),C0r=o(" (ResNet model)"),w0r=l(),bM=a("li"),O8e=a("strong"),A0r=o("swin"),L0r=o(" \u2014 "),LY=a("a"),y0r=o("TFSwinForImageClassification"),x0r=o(" (Swin Transformer model)"),$0r=l(),vM=a("li"),V8e=a("strong"),k0r=o("vit"),S0r=o(" \u2014 "),yY=a("a"),R0r=o("TFViTForImageClassification"),P0r=o(" (ViT model)"),B0r=l(),F(FM.$$.fragment),Jze=l(),Fc=a("h2"),TM=a("a"),X8e=a("span"),F(vx.$$.fragment),I0r=l(),z8e=a("span"),N0r=o("TFAutoModelForMaskedLM"),Yze=l(),nr=a("div"),F(Fx.$$.fragment),q0r=l(),Tc=a("p"),j0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),xY=a("a"),D0r=o("from_pretrained()"),G0r=o(" class method or the "),$Y=a("a"),O0r=o("from_config()"),V0r=o(` class
method.`),X0r=l(),Tx=a("p"),z0r=o("This class cannot be instantiated directly using "),W8e=a("code"),W0r=o("__init__()"),Q0r=o(" (throws an error)."),H0r=l(),Nt=a("div"),F(Mx.$$.fragment),U0r=l(),Q8e=a("p"),J0r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Y0r=l(),Mc=a("p"),K0r=o(`Note:
Loading a model from its configuration file does `),H8e=a("strong"),Z0r=o("not"),ewr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kY=a("a"),owr=o("from_pretrained()"),rwr=o(" to load the model weights."),twr=l(),F(MM.$$.fragment),awr=l(),Rr=a("div"),F(Ex.$$.fragment),nwr=l(),U8e=a("p"),swr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),lwr=l(),fn=a("p"),iwr=o("The model class to instantiate is selected based on the "),J8e=a("code"),dwr=o("model_type"),cwr=o(` property of the config object (either
passed as an argument or loaded from `),Y8e=a("code"),fwr=o("pretrained_model_name_or_path"),mwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K8e=a("code"),gwr=o("pretrained_model_name_or_path"),hwr=o(":"),pwr=l(),ie=a("ul"),EM=a("li"),Z8e=a("strong"),_wr=o("albert"),uwr=o(" \u2014 "),SY=a("a"),bwr=o("TFAlbertForMaskedLM"),vwr=o(" (ALBERT model)"),Fwr=l(),CM=a("li"),e9e=a("strong"),Twr=o("bert"),Mwr=o(" \u2014 "),RY=a("a"),Ewr=o("TFBertForMaskedLM"),Cwr=o(" (BERT model)"),wwr=l(),wM=a("li"),o9e=a("strong"),Awr=o("camembert"),Lwr=o(" \u2014 "),PY=a("a"),ywr=o("TFCamembertForMaskedLM"),xwr=o(" (CamemBERT model)"),$wr=l(),AM=a("li"),r9e=a("strong"),kwr=o("convbert"),Swr=o(" \u2014 "),BY=a("a"),Rwr=o("TFConvBertForMaskedLM"),Pwr=o(" (ConvBERT model)"),Bwr=l(),LM=a("li"),t9e=a("strong"),Iwr=o("deberta"),Nwr=o(" \u2014 "),IY=a("a"),qwr=o("TFDebertaForMaskedLM"),jwr=o(" (DeBERTa model)"),Dwr=l(),yM=a("li"),a9e=a("strong"),Gwr=o("deberta-v2"),Owr=o(" \u2014 "),NY=a("a"),Vwr=o("TFDebertaV2ForMaskedLM"),Xwr=o(" (DeBERTa-v2 model)"),zwr=l(),xM=a("li"),n9e=a("strong"),Wwr=o("distilbert"),Qwr=o(" \u2014 "),qY=a("a"),Hwr=o("TFDistilBertForMaskedLM"),Uwr=o(" (DistilBERT model)"),Jwr=l(),$M=a("li"),s9e=a("strong"),Ywr=o("electra"),Kwr=o(" \u2014 "),jY=a("a"),Zwr=o("TFElectraForMaskedLM"),eAr=o(" (ELECTRA model)"),oAr=l(),kM=a("li"),l9e=a("strong"),rAr=o("flaubert"),tAr=o(" \u2014 "),DY=a("a"),aAr=o("TFFlaubertWithLMHeadModel"),nAr=o(" (FlauBERT model)"),sAr=l(),SM=a("li"),i9e=a("strong"),lAr=o("funnel"),iAr=o(" \u2014 "),GY=a("a"),dAr=o("TFFunnelForMaskedLM"),cAr=o(" (Funnel Transformer model)"),fAr=l(),RM=a("li"),d9e=a("strong"),mAr=o("layoutlm"),gAr=o(" \u2014 "),OY=a("a"),hAr=o("TFLayoutLMForMaskedLM"),pAr=o(" (LayoutLM model)"),_Ar=l(),PM=a("li"),c9e=a("strong"),uAr=o("longformer"),bAr=o(" \u2014 "),VY=a("a"),vAr=o("TFLongformerForMaskedLM"),FAr=o(" (Longformer model)"),TAr=l(),BM=a("li"),f9e=a("strong"),MAr=o("mobilebert"),EAr=o(" \u2014 "),XY=a("a"),CAr=o("TFMobileBertForMaskedLM"),wAr=o(" (MobileBERT model)"),AAr=l(),IM=a("li"),m9e=a("strong"),LAr=o("mpnet"),yAr=o(" \u2014 "),zY=a("a"),xAr=o("TFMPNetForMaskedLM"),$Ar=o(" (MPNet model)"),kAr=l(),NM=a("li"),g9e=a("strong"),SAr=o("rembert"),RAr=o(" \u2014 "),WY=a("a"),PAr=o("TFRemBertForMaskedLM"),BAr=o(" (RemBERT model)"),IAr=l(),qM=a("li"),h9e=a("strong"),NAr=o("roberta"),qAr=o(" \u2014 "),QY=a("a"),jAr=o("TFRobertaForMaskedLM"),DAr=o(" (RoBERTa model)"),GAr=l(),jM=a("li"),p9e=a("strong"),OAr=o("roformer"),VAr=o(" \u2014 "),HY=a("a"),XAr=o("TFRoFormerForMaskedLM"),zAr=o(" (RoFormer model)"),WAr=l(),DM=a("li"),_9e=a("strong"),QAr=o("tapas"),HAr=o(" \u2014 "),UY=a("a"),UAr=o("TFTapasForMaskedLM"),JAr=o(" (TAPAS model)"),YAr=l(),GM=a("li"),u9e=a("strong"),KAr=o("xlm"),ZAr=o(" \u2014 "),JY=a("a"),e6r=o("TFXLMWithLMHeadModel"),o6r=o(" (XLM model)"),r6r=l(),OM=a("li"),b9e=a("strong"),t6r=o("xlm-roberta"),a6r=o(" \u2014 "),YY=a("a"),n6r=o("TFXLMRobertaForMaskedLM"),s6r=o(" (XLM-RoBERTa model)"),l6r=l(),F(VM.$$.fragment),Kze=l(),Ec=a("h2"),XM=a("a"),v9e=a("span"),F(Cx.$$.fragment),i6r=l(),F9e=a("span"),d6r=o("TFAutoModelForSeq2SeqLM"),Zze=l(),sr=a("div"),F(wx.$$.fragment),c6r=l(),Cc=a("p"),f6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),KY=a("a"),m6r=o("from_pretrained()"),g6r=o(" class method or the "),ZY=a("a"),h6r=o("from_config()"),p6r=o(` class
method.`),_6r=l(),Ax=a("p"),u6r=o("This class cannot be instantiated directly using "),T9e=a("code"),b6r=o("__init__()"),v6r=o(" (throws an error)."),F6r=l(),qt=a("div"),F(Lx.$$.fragment),T6r=l(),M9e=a("p"),M6r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),E6r=l(),wc=a("p"),C6r=o(`Note:
Loading a model from its configuration file does `),E9e=a("strong"),w6r=o("not"),A6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eK=a("a"),L6r=o("from_pretrained()"),y6r=o(" to load the model weights."),x6r=l(),F(zM.$$.fragment),$6r=l(),Pr=a("div"),F(yx.$$.fragment),k6r=l(),C9e=a("p"),S6r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),R6r=l(),mn=a("p"),P6r=o("The model class to instantiate is selected based on the "),w9e=a("code"),B6r=o("model_type"),I6r=o(` property of the config object (either
passed as an argument or loaded from `),A9e=a("code"),N6r=o("pretrained_model_name_or_path"),q6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L9e=a("code"),j6r=o("pretrained_model_name_or_path"),D6r=o(":"),G6r=l(),ye=a("ul"),WM=a("li"),y9e=a("strong"),O6r=o("bart"),V6r=o(" \u2014 "),oK=a("a"),X6r=o("TFBartForConditionalGeneration"),z6r=o(" (BART model)"),W6r=l(),QM=a("li"),x9e=a("strong"),Q6r=o("blenderbot"),H6r=o(" \u2014 "),rK=a("a"),U6r=o("TFBlenderbotForConditionalGeneration"),J6r=o(" (Blenderbot model)"),Y6r=l(),HM=a("li"),$9e=a("strong"),K6r=o("blenderbot-small"),Z6r=o(" \u2014 "),tK=a("a"),eLr=o("TFBlenderbotSmallForConditionalGeneration"),oLr=o(" (BlenderbotSmall model)"),rLr=l(),UM=a("li"),k9e=a("strong"),tLr=o("encoder-decoder"),aLr=o(" \u2014 "),aK=a("a"),nLr=o("TFEncoderDecoderModel"),sLr=o(" (Encoder decoder model)"),lLr=l(),JM=a("li"),S9e=a("strong"),iLr=o("led"),dLr=o(" \u2014 "),nK=a("a"),cLr=o("TFLEDForConditionalGeneration"),fLr=o(" (LED model)"),mLr=l(),YM=a("li"),R9e=a("strong"),gLr=o("marian"),hLr=o(" \u2014 "),sK=a("a"),pLr=o("TFMarianMTModel"),_Lr=o(" (Marian model)"),uLr=l(),KM=a("li"),P9e=a("strong"),bLr=o("mbart"),vLr=o(" \u2014 "),lK=a("a"),FLr=o("TFMBartForConditionalGeneration"),TLr=o(" (mBART model)"),MLr=l(),ZM=a("li"),B9e=a("strong"),ELr=o("mt5"),CLr=o(" \u2014 "),iK=a("a"),wLr=o("TFMT5ForConditionalGeneration"),ALr=o(" (MT5 model)"),LLr=l(),e4=a("li"),I9e=a("strong"),yLr=o("pegasus"),xLr=o(" \u2014 "),dK=a("a"),$Lr=o("TFPegasusForConditionalGeneration"),kLr=o(" (Pegasus model)"),SLr=l(),o4=a("li"),N9e=a("strong"),RLr=o("t5"),PLr=o(" \u2014 "),cK=a("a"),BLr=o("TFT5ForConditionalGeneration"),ILr=o(" (T5 model)"),NLr=l(),F(r4.$$.fragment),eWe=l(),Ac=a("h2"),t4=a("a"),q9e=a("span"),F(xx.$$.fragment),qLr=l(),j9e=a("span"),jLr=o("TFAutoModelForSequenceClassification"),oWe=l(),lr=a("div"),F($x.$$.fragment),DLr=l(),Lc=a("p"),GLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),fK=a("a"),OLr=o("from_pretrained()"),VLr=o(" class method or the "),mK=a("a"),XLr=o("from_config()"),zLr=o(` class
method.`),WLr=l(),kx=a("p"),QLr=o("This class cannot be instantiated directly using "),D9e=a("code"),HLr=o("__init__()"),ULr=o(" (throws an error)."),JLr=l(),jt=a("div"),F(Sx.$$.fragment),YLr=l(),G9e=a("p"),KLr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ZLr=l(),yc=a("p"),eyr=o(`Note:
Loading a model from its configuration file does `),O9e=a("strong"),oyr=o("not"),ryr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gK=a("a"),tyr=o("from_pretrained()"),ayr=o(" to load the model weights."),nyr=l(),F(a4.$$.fragment),syr=l(),Br=a("div"),F(Rx.$$.fragment),lyr=l(),V9e=a("p"),iyr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),dyr=l(),gn=a("p"),cyr=o("The model class to instantiate is selected based on the "),X9e=a("code"),fyr=o("model_type"),myr=o(` property of the config object (either
passed as an argument or loaded from `),z9e=a("code"),gyr=o("pretrained_model_name_or_path"),hyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W9e=a("code"),pyr=o("pretrained_model_name_or_path"),_yr=o(":"),uyr=l(),te=a("ul"),n4=a("li"),Q9e=a("strong"),byr=o("albert"),vyr=o(" \u2014 "),hK=a("a"),Fyr=o("TFAlbertForSequenceClassification"),Tyr=o(" (ALBERT model)"),Myr=l(),s4=a("li"),H9e=a("strong"),Eyr=o("bert"),Cyr=o(" \u2014 "),pK=a("a"),wyr=o("TFBertForSequenceClassification"),Ayr=o(" (BERT model)"),Lyr=l(),l4=a("li"),U9e=a("strong"),yyr=o("camembert"),xyr=o(" \u2014 "),_K=a("a"),$yr=o("TFCamembertForSequenceClassification"),kyr=o(" (CamemBERT model)"),Syr=l(),i4=a("li"),J9e=a("strong"),Ryr=o("convbert"),Pyr=o(" \u2014 "),uK=a("a"),Byr=o("TFConvBertForSequenceClassification"),Iyr=o(" (ConvBERT model)"),Nyr=l(),d4=a("li"),Y9e=a("strong"),qyr=o("ctrl"),jyr=o(" \u2014 "),bK=a("a"),Dyr=o("TFCTRLForSequenceClassification"),Gyr=o(" (CTRL model)"),Oyr=l(),c4=a("li"),K9e=a("strong"),Vyr=o("deberta"),Xyr=o(" \u2014 "),vK=a("a"),zyr=o("TFDebertaForSequenceClassification"),Wyr=o(" (DeBERTa model)"),Qyr=l(),f4=a("li"),Z9e=a("strong"),Hyr=o("deberta-v2"),Uyr=o(" \u2014 "),FK=a("a"),Jyr=o("TFDebertaV2ForSequenceClassification"),Yyr=o(" (DeBERTa-v2 model)"),Kyr=l(),m4=a("li"),eMe=a("strong"),Zyr=o("distilbert"),exr=o(" \u2014 "),TK=a("a"),oxr=o("TFDistilBertForSequenceClassification"),rxr=o(" (DistilBERT model)"),txr=l(),g4=a("li"),oMe=a("strong"),axr=o("electra"),nxr=o(" \u2014 "),MK=a("a"),sxr=o("TFElectraForSequenceClassification"),lxr=o(" (ELECTRA model)"),ixr=l(),h4=a("li"),rMe=a("strong"),dxr=o("flaubert"),cxr=o(" \u2014 "),EK=a("a"),fxr=o("TFFlaubertForSequenceClassification"),mxr=o(" (FlauBERT model)"),gxr=l(),p4=a("li"),tMe=a("strong"),hxr=o("funnel"),pxr=o(" \u2014 "),CK=a("a"),_xr=o("TFFunnelForSequenceClassification"),uxr=o(" (Funnel Transformer model)"),bxr=l(),_4=a("li"),aMe=a("strong"),vxr=o("gpt2"),Fxr=o(" \u2014 "),wK=a("a"),Txr=o("TFGPT2ForSequenceClassification"),Mxr=o(" (OpenAI GPT-2 model)"),Exr=l(),u4=a("li"),nMe=a("strong"),Cxr=o("gptj"),wxr=o(" \u2014 "),AK=a("a"),Axr=o("TFGPTJForSequenceClassification"),Lxr=o(" (GPT-J model)"),yxr=l(),b4=a("li"),sMe=a("strong"),xxr=o("layoutlm"),$xr=o(" \u2014 "),LK=a("a"),kxr=o("TFLayoutLMForSequenceClassification"),Sxr=o(" (LayoutLM model)"),Rxr=l(),v4=a("li"),lMe=a("strong"),Pxr=o("longformer"),Bxr=o(" \u2014 "),yK=a("a"),Ixr=o("TFLongformerForSequenceClassification"),Nxr=o(" (Longformer model)"),qxr=l(),F4=a("li"),iMe=a("strong"),jxr=o("mobilebert"),Dxr=o(" \u2014 "),xK=a("a"),Gxr=o("TFMobileBertForSequenceClassification"),Oxr=o(" (MobileBERT model)"),Vxr=l(),T4=a("li"),dMe=a("strong"),Xxr=o("mpnet"),zxr=o(" \u2014 "),$K=a("a"),Wxr=o("TFMPNetForSequenceClassification"),Qxr=o(" (MPNet model)"),Hxr=l(),M4=a("li"),cMe=a("strong"),Uxr=o("openai-gpt"),Jxr=o(" \u2014 "),kK=a("a"),Yxr=o("TFOpenAIGPTForSequenceClassification"),Kxr=o(" (OpenAI GPT model)"),Zxr=l(),E4=a("li"),fMe=a("strong"),e$r=o("rembert"),o$r=o(" \u2014 "),SK=a("a"),r$r=o("TFRemBertForSequenceClassification"),t$r=o(" (RemBERT model)"),a$r=l(),C4=a("li"),mMe=a("strong"),n$r=o("roberta"),s$r=o(" \u2014 "),RK=a("a"),l$r=o("TFRobertaForSequenceClassification"),i$r=o(" (RoBERTa model)"),d$r=l(),w4=a("li"),gMe=a("strong"),c$r=o("roformer"),f$r=o(" \u2014 "),PK=a("a"),m$r=o("TFRoFormerForSequenceClassification"),g$r=o(" (RoFormer model)"),h$r=l(),A4=a("li"),hMe=a("strong"),p$r=o("tapas"),_$r=o(" \u2014 "),BK=a("a"),u$r=o("TFTapasForSequenceClassification"),b$r=o(" (TAPAS model)"),v$r=l(),L4=a("li"),pMe=a("strong"),F$r=o("transfo-xl"),T$r=o(" \u2014 "),IK=a("a"),M$r=o("TFTransfoXLForSequenceClassification"),E$r=o(" (Transformer-XL model)"),C$r=l(),y4=a("li"),_Me=a("strong"),w$r=o("xlm"),A$r=o(" \u2014 "),NK=a("a"),L$r=o("TFXLMForSequenceClassification"),y$r=o(" (XLM model)"),x$r=l(),x4=a("li"),uMe=a("strong"),$$r=o("xlm-roberta"),k$r=o(" \u2014 "),qK=a("a"),S$r=o("TFXLMRobertaForSequenceClassification"),R$r=o(" (XLM-RoBERTa model)"),P$r=l(),$4=a("li"),bMe=a("strong"),B$r=o("xlnet"),I$r=o(" \u2014 "),jK=a("a"),N$r=o("TFXLNetForSequenceClassification"),q$r=o(" (XLNet model)"),j$r=l(),F(k4.$$.fragment),rWe=l(),xc=a("h2"),S4=a("a"),vMe=a("span"),F(Px.$$.fragment),D$r=l(),FMe=a("span"),G$r=o("TFAutoModelForMultipleChoice"),tWe=l(),ir=a("div"),F(Bx.$$.fragment),O$r=l(),$c=a("p"),V$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),DK=a("a"),X$r=o("from_pretrained()"),z$r=o(" class method or the "),GK=a("a"),W$r=o("from_config()"),Q$r=o(` class
method.`),H$r=l(),Ix=a("p"),U$r=o("This class cannot be instantiated directly using "),TMe=a("code"),J$r=o("__init__()"),Y$r=o(" (throws an error)."),K$r=l(),Dt=a("div"),F(Nx.$$.fragment),Z$r=l(),MMe=a("p"),ekr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),okr=l(),kc=a("p"),rkr=o(`Note:
Loading a model from its configuration file does `),EMe=a("strong"),tkr=o("not"),akr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=a("a"),nkr=o("from_pretrained()"),skr=o(" to load the model weights."),lkr=l(),F(R4.$$.fragment),ikr=l(),Ir=a("div"),F(qx.$$.fragment),dkr=l(),CMe=a("p"),ckr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),fkr=l(),hn=a("p"),mkr=o("The model class to instantiate is selected based on the "),wMe=a("code"),gkr=o("model_type"),hkr=o(` property of the config object (either
passed as an argument or loaded from `),AMe=a("code"),pkr=o("pretrained_model_name_or_path"),_kr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LMe=a("code"),ukr=o("pretrained_model_name_or_path"),bkr=o(":"),vkr=l(),be=a("ul"),P4=a("li"),yMe=a("strong"),Fkr=o("albert"),Tkr=o(" \u2014 "),VK=a("a"),Mkr=o("TFAlbertForMultipleChoice"),Ekr=o(" (ALBERT model)"),Ckr=l(),B4=a("li"),xMe=a("strong"),wkr=o("bert"),Akr=o(" \u2014 "),XK=a("a"),Lkr=o("TFBertForMultipleChoice"),ykr=o(" (BERT model)"),xkr=l(),I4=a("li"),$Me=a("strong"),$kr=o("camembert"),kkr=o(" \u2014 "),zK=a("a"),Skr=o("TFCamembertForMultipleChoice"),Rkr=o(" (CamemBERT model)"),Pkr=l(),N4=a("li"),kMe=a("strong"),Bkr=o("convbert"),Ikr=o(" \u2014 "),WK=a("a"),Nkr=o("TFConvBertForMultipleChoice"),qkr=o(" (ConvBERT model)"),jkr=l(),q4=a("li"),SMe=a("strong"),Dkr=o("distilbert"),Gkr=o(" \u2014 "),QK=a("a"),Okr=o("TFDistilBertForMultipleChoice"),Vkr=o(" (DistilBERT model)"),Xkr=l(),j4=a("li"),RMe=a("strong"),zkr=o("electra"),Wkr=o(" \u2014 "),HK=a("a"),Qkr=o("TFElectraForMultipleChoice"),Hkr=o(" (ELECTRA model)"),Ukr=l(),D4=a("li"),PMe=a("strong"),Jkr=o("flaubert"),Ykr=o(" \u2014 "),UK=a("a"),Kkr=o("TFFlaubertForMultipleChoice"),Zkr=o(" (FlauBERT model)"),eSr=l(),G4=a("li"),BMe=a("strong"),oSr=o("funnel"),rSr=o(" \u2014 "),JK=a("a"),tSr=o("TFFunnelForMultipleChoice"),aSr=o(" (Funnel Transformer model)"),nSr=l(),O4=a("li"),IMe=a("strong"),sSr=o("longformer"),lSr=o(" \u2014 "),YK=a("a"),iSr=o("TFLongformerForMultipleChoice"),dSr=o(" (Longformer model)"),cSr=l(),V4=a("li"),NMe=a("strong"),fSr=o("mobilebert"),mSr=o(" \u2014 "),KK=a("a"),gSr=o("TFMobileBertForMultipleChoice"),hSr=o(" (MobileBERT model)"),pSr=l(),X4=a("li"),qMe=a("strong"),_Sr=o("mpnet"),uSr=o(" \u2014 "),ZK=a("a"),bSr=o("TFMPNetForMultipleChoice"),vSr=o(" (MPNet model)"),FSr=l(),z4=a("li"),jMe=a("strong"),TSr=o("rembert"),MSr=o(" \u2014 "),eZ=a("a"),ESr=o("TFRemBertForMultipleChoice"),CSr=o(" (RemBERT model)"),wSr=l(),W4=a("li"),DMe=a("strong"),ASr=o("roberta"),LSr=o(" \u2014 "),oZ=a("a"),ySr=o("TFRobertaForMultipleChoice"),xSr=o(" (RoBERTa model)"),$Sr=l(),Q4=a("li"),GMe=a("strong"),kSr=o("roformer"),SSr=o(" \u2014 "),rZ=a("a"),RSr=o("TFRoFormerForMultipleChoice"),PSr=o(" (RoFormer model)"),BSr=l(),H4=a("li"),OMe=a("strong"),ISr=o("xlm"),NSr=o(" \u2014 "),tZ=a("a"),qSr=o("TFXLMForMultipleChoice"),jSr=o(" (XLM model)"),DSr=l(),U4=a("li"),VMe=a("strong"),GSr=o("xlm-roberta"),OSr=o(" \u2014 "),aZ=a("a"),VSr=o("TFXLMRobertaForMultipleChoice"),XSr=o(" (XLM-RoBERTa model)"),zSr=l(),J4=a("li"),XMe=a("strong"),WSr=o("xlnet"),QSr=o(" \u2014 "),nZ=a("a"),HSr=o("TFXLNetForMultipleChoice"),USr=o(" (XLNet model)"),JSr=l(),F(Y4.$$.fragment),aWe=l(),Sc=a("h2"),K4=a("a"),zMe=a("span"),F(jx.$$.fragment),YSr=l(),WMe=a("span"),KSr=o("TFAutoModelForNextSentencePrediction"),nWe=l(),dr=a("div"),F(Dx.$$.fragment),ZSr=l(),Rc=a("p"),eRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),sZ=a("a"),oRr=o("from_pretrained()"),rRr=o(" class method or the "),lZ=a("a"),tRr=o("from_config()"),aRr=o(` class
method.`),nRr=l(),Gx=a("p"),sRr=o("This class cannot be instantiated directly using "),QMe=a("code"),lRr=o("__init__()"),iRr=o(" (throws an error)."),dRr=l(),Gt=a("div"),F(Ox.$$.fragment),cRr=l(),HMe=a("p"),fRr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),mRr=l(),Pc=a("p"),gRr=o(`Note:
Loading a model from its configuration file does `),UMe=a("strong"),hRr=o("not"),pRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iZ=a("a"),_Rr=o("from_pretrained()"),uRr=o(" to load the model weights."),bRr=l(),F(Z4.$$.fragment),vRr=l(),Nr=a("div"),F(Vx.$$.fragment),FRr=l(),JMe=a("p"),TRr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),MRr=l(),pn=a("p"),ERr=o("The model class to instantiate is selected based on the "),YMe=a("code"),CRr=o("model_type"),wRr=o(` property of the config object (either
passed as an argument or loaded from `),KMe=a("code"),ARr=o("pretrained_model_name_or_path"),LRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZMe=a("code"),yRr=o("pretrained_model_name_or_path"),xRr=o(":"),$Rr=l(),Xx=a("ul"),eE=a("li"),e4e=a("strong"),kRr=o("bert"),SRr=o(" \u2014 "),dZ=a("a"),RRr=o("TFBertForNextSentencePrediction"),PRr=o(" (BERT model)"),BRr=l(),oE=a("li"),o4e=a("strong"),IRr=o("mobilebert"),NRr=o(" \u2014 "),cZ=a("a"),qRr=o("TFMobileBertForNextSentencePrediction"),jRr=o(" (MobileBERT model)"),DRr=l(),F(rE.$$.fragment),sWe=l(),Bc=a("h2"),tE=a("a"),r4e=a("span"),F(zx.$$.fragment),GRr=l(),t4e=a("span"),ORr=o("TFAutoModelForTableQuestionAnswering"),lWe=l(),cr=a("div"),F(Wx.$$.fragment),VRr=l(),Ic=a("p"),XRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),fZ=a("a"),zRr=o("from_pretrained()"),WRr=o(" class method or the "),mZ=a("a"),QRr=o("from_config()"),HRr=o(` class
method.`),URr=l(),Qx=a("p"),JRr=o("This class cannot be instantiated directly using "),a4e=a("code"),YRr=o("__init__()"),KRr=o(" (throws an error)."),ZRr=l(),Ot=a("div"),F(Hx.$$.fragment),ePr=l(),n4e=a("p"),oPr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),rPr=l(),Nc=a("p"),tPr=o(`Note:
Loading a model from its configuration file does `),s4e=a("strong"),aPr=o("not"),nPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gZ=a("a"),sPr=o("from_pretrained()"),lPr=o(" to load the model weights."),iPr=l(),F(aE.$$.fragment),dPr=l(),qr=a("div"),F(Ux.$$.fragment),cPr=l(),l4e=a("p"),fPr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),mPr=l(),_n=a("p"),gPr=o("The model class to instantiate is selected based on the "),i4e=a("code"),hPr=o("model_type"),pPr=o(` property of the config object (either
passed as an argument or loaded from `),d4e=a("code"),_Pr=o("pretrained_model_name_or_path"),uPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c4e=a("code"),bPr=o("pretrained_model_name_or_path"),vPr=o(":"),FPr=l(),f4e=a("ul"),nE=a("li"),m4e=a("strong"),TPr=o("tapas"),MPr=o(" \u2014 "),hZ=a("a"),EPr=o("TFTapasForQuestionAnswering"),CPr=o(" (TAPAS model)"),wPr=l(),F(sE.$$.fragment),iWe=l(),qc=a("h2"),lE=a("a"),g4e=a("span"),F(Jx.$$.fragment),APr=l(),h4e=a("span"),LPr=o("TFAutoModelForTokenClassification"),dWe=l(),fr=a("div"),F(Yx.$$.fragment),yPr=l(),jc=a("p"),xPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),pZ=a("a"),$Pr=o("from_pretrained()"),kPr=o(" class method or the "),_Z=a("a"),SPr=o("from_config()"),RPr=o(` class
method.`),PPr=l(),Kx=a("p"),BPr=o("This class cannot be instantiated directly using "),p4e=a("code"),IPr=o("__init__()"),NPr=o(" (throws an error)."),qPr=l(),Vt=a("div"),F(Zx.$$.fragment),jPr=l(),_4e=a("p"),DPr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),GPr=l(),Dc=a("p"),OPr=o(`Note:
Loading a model from its configuration file does `),u4e=a("strong"),VPr=o("not"),XPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uZ=a("a"),zPr=o("from_pretrained()"),WPr=o(" to load the model weights."),QPr=l(),F(iE.$$.fragment),HPr=l(),jr=a("div"),F(e$.$$.fragment),UPr=l(),b4e=a("p"),JPr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),YPr=l(),un=a("p"),KPr=o("The model class to instantiate is selected based on the "),v4e=a("code"),ZPr=o("model_type"),eBr=o(` property of the config object (either
passed as an argument or loaded from `),F4e=a("code"),oBr=o("pretrained_model_name_or_path"),rBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T4e=a("code"),tBr=o("pretrained_model_name_or_path"),aBr=o(":"),nBr=l(),de=a("ul"),dE=a("li"),M4e=a("strong"),sBr=o("albert"),lBr=o(" \u2014 "),bZ=a("a"),iBr=o("TFAlbertForTokenClassification"),dBr=o(" (ALBERT model)"),cBr=l(),cE=a("li"),E4e=a("strong"),fBr=o("bert"),mBr=o(" \u2014 "),vZ=a("a"),gBr=o("TFBertForTokenClassification"),hBr=o(" (BERT model)"),pBr=l(),fE=a("li"),C4e=a("strong"),_Br=o("camembert"),uBr=o(" \u2014 "),FZ=a("a"),bBr=o("TFCamembertForTokenClassification"),vBr=o(" (CamemBERT model)"),FBr=l(),mE=a("li"),w4e=a("strong"),TBr=o("convbert"),MBr=o(" \u2014 "),TZ=a("a"),EBr=o("TFConvBertForTokenClassification"),CBr=o(" (ConvBERT model)"),wBr=l(),gE=a("li"),A4e=a("strong"),ABr=o("deberta"),LBr=o(" \u2014 "),MZ=a("a"),yBr=o("TFDebertaForTokenClassification"),xBr=o(" (DeBERTa model)"),$Br=l(),hE=a("li"),L4e=a("strong"),kBr=o("deberta-v2"),SBr=o(" \u2014 "),EZ=a("a"),RBr=o("TFDebertaV2ForTokenClassification"),PBr=o(" (DeBERTa-v2 model)"),BBr=l(),pE=a("li"),y4e=a("strong"),IBr=o("distilbert"),NBr=o(" \u2014 "),CZ=a("a"),qBr=o("TFDistilBertForTokenClassification"),jBr=o(" (DistilBERT model)"),DBr=l(),_E=a("li"),x4e=a("strong"),GBr=o("electra"),OBr=o(" \u2014 "),wZ=a("a"),VBr=o("TFElectraForTokenClassification"),XBr=o(" (ELECTRA model)"),zBr=l(),uE=a("li"),$4e=a("strong"),WBr=o("flaubert"),QBr=o(" \u2014 "),AZ=a("a"),HBr=o("TFFlaubertForTokenClassification"),UBr=o(" (FlauBERT model)"),JBr=l(),bE=a("li"),k4e=a("strong"),YBr=o("funnel"),KBr=o(" \u2014 "),LZ=a("a"),ZBr=o("TFFunnelForTokenClassification"),eIr=o(" (Funnel Transformer model)"),oIr=l(),vE=a("li"),S4e=a("strong"),rIr=o("layoutlm"),tIr=o(" \u2014 "),yZ=a("a"),aIr=o("TFLayoutLMForTokenClassification"),nIr=o(" (LayoutLM model)"),sIr=l(),FE=a("li"),R4e=a("strong"),lIr=o("longformer"),iIr=o(" \u2014 "),xZ=a("a"),dIr=o("TFLongformerForTokenClassification"),cIr=o(" (Longformer model)"),fIr=l(),TE=a("li"),P4e=a("strong"),mIr=o("mobilebert"),gIr=o(" \u2014 "),$Z=a("a"),hIr=o("TFMobileBertForTokenClassification"),pIr=o(" (MobileBERT model)"),_Ir=l(),ME=a("li"),B4e=a("strong"),uIr=o("mpnet"),bIr=o(" \u2014 "),kZ=a("a"),vIr=o("TFMPNetForTokenClassification"),FIr=o(" (MPNet model)"),TIr=l(),EE=a("li"),I4e=a("strong"),MIr=o("rembert"),EIr=o(" \u2014 "),SZ=a("a"),CIr=o("TFRemBertForTokenClassification"),wIr=o(" (RemBERT model)"),AIr=l(),CE=a("li"),N4e=a("strong"),LIr=o("roberta"),yIr=o(" \u2014 "),RZ=a("a"),xIr=o("TFRobertaForTokenClassification"),$Ir=o(" (RoBERTa model)"),kIr=l(),wE=a("li"),q4e=a("strong"),SIr=o("roformer"),RIr=o(" \u2014 "),PZ=a("a"),PIr=o("TFRoFormerForTokenClassification"),BIr=o(" (RoFormer model)"),IIr=l(),AE=a("li"),j4e=a("strong"),NIr=o("xlm"),qIr=o(" \u2014 "),BZ=a("a"),jIr=o("TFXLMForTokenClassification"),DIr=o(" (XLM model)"),GIr=l(),LE=a("li"),D4e=a("strong"),OIr=o("xlm-roberta"),VIr=o(" \u2014 "),IZ=a("a"),XIr=o("TFXLMRobertaForTokenClassification"),zIr=o(" (XLM-RoBERTa model)"),WIr=l(),yE=a("li"),G4e=a("strong"),QIr=o("xlnet"),HIr=o(" \u2014 "),NZ=a("a"),UIr=o("TFXLNetForTokenClassification"),JIr=o(" (XLNet model)"),YIr=l(),F(xE.$$.fragment),cWe=l(),Gc=a("h2"),$E=a("a"),O4e=a("span"),F(o$.$$.fragment),KIr=l(),V4e=a("span"),ZIr=o("TFAutoModelForQuestionAnswering"),fWe=l(),mr=a("div"),F(r$.$$.fragment),eNr=l(),Oc=a("p"),oNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),qZ=a("a"),rNr=o("from_pretrained()"),tNr=o(" class method or the "),jZ=a("a"),aNr=o("from_config()"),nNr=o(` class
method.`),sNr=l(),t$=a("p"),lNr=o("This class cannot be instantiated directly using "),X4e=a("code"),iNr=o("__init__()"),dNr=o(" (throws an error)."),cNr=l(),Xt=a("div"),F(a$.$$.fragment),fNr=l(),z4e=a("p"),mNr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),gNr=l(),Vc=a("p"),hNr=o(`Note:
Loading a model from its configuration file does `),W4e=a("strong"),pNr=o("not"),_Nr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DZ=a("a"),uNr=o("from_pretrained()"),bNr=o(" to load the model weights."),vNr=l(),F(kE.$$.fragment),FNr=l(),Dr=a("div"),F(n$.$$.fragment),TNr=l(),Q4e=a("p"),MNr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ENr=l(),bn=a("p"),CNr=o("The model class to instantiate is selected based on the "),H4e=a("code"),wNr=o("model_type"),ANr=o(` property of the config object (either
passed as an argument or loaded from `),U4e=a("code"),LNr=o("pretrained_model_name_or_path"),yNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J4e=a("code"),xNr=o("pretrained_model_name_or_path"),$Nr=o(":"),kNr=l(),ce=a("ul"),SE=a("li"),Y4e=a("strong"),SNr=o("albert"),RNr=o(" \u2014 "),GZ=a("a"),PNr=o("TFAlbertForQuestionAnswering"),BNr=o(" (ALBERT model)"),INr=l(),RE=a("li"),K4e=a("strong"),NNr=o("bert"),qNr=o(" \u2014 "),OZ=a("a"),jNr=o("TFBertForQuestionAnswering"),DNr=o(" (BERT model)"),GNr=l(),PE=a("li"),Z4e=a("strong"),ONr=o("camembert"),VNr=o(" \u2014 "),VZ=a("a"),XNr=o("TFCamembertForQuestionAnswering"),zNr=o(" (CamemBERT model)"),WNr=l(),BE=a("li"),eEe=a("strong"),QNr=o("convbert"),HNr=o(" \u2014 "),XZ=a("a"),UNr=o("TFConvBertForQuestionAnswering"),JNr=o(" (ConvBERT model)"),YNr=l(),IE=a("li"),oEe=a("strong"),KNr=o("deberta"),ZNr=o(" \u2014 "),zZ=a("a"),eqr=o("TFDebertaForQuestionAnswering"),oqr=o(" (DeBERTa model)"),rqr=l(),NE=a("li"),rEe=a("strong"),tqr=o("deberta-v2"),aqr=o(" \u2014 "),WZ=a("a"),nqr=o("TFDebertaV2ForQuestionAnswering"),sqr=o(" (DeBERTa-v2 model)"),lqr=l(),qE=a("li"),tEe=a("strong"),iqr=o("distilbert"),dqr=o(" \u2014 "),QZ=a("a"),cqr=o("TFDistilBertForQuestionAnswering"),fqr=o(" (DistilBERT model)"),mqr=l(),jE=a("li"),aEe=a("strong"),gqr=o("electra"),hqr=o(" \u2014 "),HZ=a("a"),pqr=o("TFElectraForQuestionAnswering"),_qr=o(" (ELECTRA model)"),uqr=l(),DE=a("li"),nEe=a("strong"),bqr=o("flaubert"),vqr=o(" \u2014 "),UZ=a("a"),Fqr=o("TFFlaubertForQuestionAnsweringSimple"),Tqr=o(" (FlauBERT model)"),Mqr=l(),GE=a("li"),sEe=a("strong"),Eqr=o("funnel"),Cqr=o(" \u2014 "),JZ=a("a"),wqr=o("TFFunnelForQuestionAnswering"),Aqr=o(" (Funnel Transformer model)"),Lqr=l(),OE=a("li"),lEe=a("strong"),yqr=o("gptj"),xqr=o(" \u2014 "),YZ=a("a"),$qr=o("TFGPTJForQuestionAnswering"),kqr=o(" (GPT-J model)"),Sqr=l(),VE=a("li"),iEe=a("strong"),Rqr=o("longformer"),Pqr=o(" \u2014 "),KZ=a("a"),Bqr=o("TFLongformerForQuestionAnswering"),Iqr=o(" (Longformer model)"),Nqr=l(),XE=a("li"),dEe=a("strong"),qqr=o("mobilebert"),jqr=o(" \u2014 "),ZZ=a("a"),Dqr=o("TFMobileBertForQuestionAnswering"),Gqr=o(" (MobileBERT model)"),Oqr=l(),zE=a("li"),cEe=a("strong"),Vqr=o("mpnet"),Xqr=o(" \u2014 "),eee=a("a"),zqr=o("TFMPNetForQuestionAnswering"),Wqr=o(" (MPNet model)"),Qqr=l(),WE=a("li"),fEe=a("strong"),Hqr=o("rembert"),Uqr=o(" \u2014 "),oee=a("a"),Jqr=o("TFRemBertForQuestionAnswering"),Yqr=o(" (RemBERT model)"),Kqr=l(),QE=a("li"),mEe=a("strong"),Zqr=o("roberta"),ejr=o(" \u2014 "),ree=a("a"),ojr=o("TFRobertaForQuestionAnswering"),rjr=o(" (RoBERTa model)"),tjr=l(),HE=a("li"),gEe=a("strong"),ajr=o("roformer"),njr=o(" \u2014 "),tee=a("a"),sjr=o("TFRoFormerForQuestionAnswering"),ljr=o(" (RoFormer model)"),ijr=l(),UE=a("li"),hEe=a("strong"),djr=o("xlm"),cjr=o(" \u2014 "),aee=a("a"),fjr=o("TFXLMForQuestionAnsweringSimple"),mjr=o(" (XLM model)"),gjr=l(),JE=a("li"),pEe=a("strong"),hjr=o("xlm-roberta"),pjr=o(" \u2014 "),nee=a("a"),_jr=o("TFXLMRobertaForQuestionAnswering"),ujr=o(" (XLM-RoBERTa model)"),bjr=l(),YE=a("li"),_Ee=a("strong"),vjr=o("xlnet"),Fjr=o(" \u2014 "),see=a("a"),Tjr=o("TFXLNetForQuestionAnsweringSimple"),Mjr=o(" (XLNet model)"),Ejr=l(),F(KE.$$.fragment),mWe=l(),Xc=a("h2"),ZE=a("a"),uEe=a("span"),F(s$.$$.fragment),Cjr=l(),bEe=a("span"),wjr=o("TFAutoModelForVision2Seq"),gWe=l(),gr=a("div"),F(l$.$$.fragment),Ajr=l(),zc=a("p"),Ljr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),lee=a("a"),yjr=o("from_pretrained()"),xjr=o(" class method or the "),iee=a("a"),$jr=o("from_config()"),kjr=o(` class
method.`),Sjr=l(),i$=a("p"),Rjr=o("This class cannot be instantiated directly using "),vEe=a("code"),Pjr=o("__init__()"),Bjr=o(" (throws an error)."),Ijr=l(),zt=a("div"),F(d$.$$.fragment),Njr=l(),FEe=a("p"),qjr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jjr=l(),Wc=a("p"),Djr=o(`Note:
Loading a model from its configuration file does `),TEe=a("strong"),Gjr=o("not"),Ojr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dee=a("a"),Vjr=o("from_pretrained()"),Xjr=o(" to load the model weights."),zjr=l(),F(eC.$$.fragment),Wjr=l(),Gr=a("div"),F(c$.$$.fragment),Qjr=l(),MEe=a("p"),Hjr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Ujr=l(),vn=a("p"),Jjr=o("The model class to instantiate is selected based on the "),EEe=a("code"),Yjr=o("model_type"),Kjr=o(` property of the config object (either
passed as an argument or loaded from `),CEe=a("code"),Zjr=o("pretrained_model_name_or_path"),eDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wEe=a("code"),oDr=o("pretrained_model_name_or_path"),rDr=o(":"),tDr=l(),AEe=a("ul"),oC=a("li"),LEe=a("strong"),aDr=o("vision-encoder-decoder"),nDr=o(" \u2014 "),cee=a("a"),sDr=o("TFVisionEncoderDecoderModel"),lDr=o(" (Vision Encoder decoder model)"),iDr=l(),F(rC.$$.fragment),hWe=l(),Qc=a("h2"),tC=a("a"),yEe=a("span"),F(f$.$$.fragment),dDr=l(),xEe=a("span"),cDr=o("TFAutoModelForSpeechSeq2Seq"),pWe=l(),hr=a("div"),F(m$.$$.fragment),fDr=l(),Hc=a("p"),mDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),fee=a("a"),gDr=o("from_pretrained()"),hDr=o(" class method or the "),mee=a("a"),pDr=o("from_config()"),_Dr=o(` class
method.`),uDr=l(),g$=a("p"),bDr=o("This class cannot be instantiated directly using "),$Ee=a("code"),vDr=o("__init__()"),FDr=o(" (throws an error)."),TDr=l(),Wt=a("div"),F(h$.$$.fragment),MDr=l(),kEe=a("p"),EDr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),CDr=l(),Uc=a("p"),wDr=o(`Note:
Loading a model from its configuration file does `),SEe=a("strong"),ADr=o("not"),LDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gee=a("a"),yDr=o("from_pretrained()"),xDr=o(" to load the model weights."),$Dr=l(),F(aC.$$.fragment),kDr=l(),Or=a("div"),F(p$.$$.fragment),SDr=l(),REe=a("p"),RDr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),PDr=l(),Fn=a("p"),BDr=o("The model class to instantiate is selected based on the "),PEe=a("code"),IDr=o("model_type"),NDr=o(` property of the config object (either
passed as an argument or loaded from `),BEe=a("code"),qDr=o("pretrained_model_name_or_path"),jDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IEe=a("code"),DDr=o("pretrained_model_name_or_path"),GDr=o(":"),ODr=l(),NEe=a("ul"),nC=a("li"),qEe=a("strong"),VDr=o("speech_to_text"),XDr=o(" \u2014 "),hee=a("a"),zDr=o("TFSpeech2TextForConditionalGeneration"),WDr=o(" (Speech2Text model)"),QDr=l(),F(sC.$$.fragment),_We=l(),Jc=a("h2"),lC=a("a"),jEe=a("span"),F(_$.$$.fragment),HDr=l(),DEe=a("span"),UDr=o("FlaxAutoModel"),uWe=l(),pr=a("div"),F(u$.$$.fragment),JDr=l(),Yc=a("p"),YDr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),pee=a("a"),KDr=o("from_pretrained()"),ZDr=o(" class method or the "),_ee=a("a"),eGr=o("from_config()"),oGr=o(` class
method.`),rGr=l(),b$=a("p"),tGr=o("This class cannot be instantiated directly using "),GEe=a("code"),aGr=o("__init__()"),nGr=o(" (throws an error)."),sGr=l(),Qt=a("div"),F(v$.$$.fragment),lGr=l(),OEe=a("p"),iGr=o("Instantiates one of the base model classes of the library from a configuration."),dGr=l(),Kc=a("p"),cGr=o(`Note:
Loading a model from its configuration file does `),VEe=a("strong"),fGr=o("not"),mGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uee=a("a"),gGr=o("from_pretrained()"),hGr=o(" to load the model weights."),pGr=l(),F(iC.$$.fragment),_Gr=l(),Vr=a("div"),F(F$.$$.fragment),uGr=l(),XEe=a("p"),bGr=o("Instantiate one of the base model classes of the library from a pretrained model."),vGr=l(),Tn=a("p"),FGr=o("The model class to instantiate is selected based on the "),zEe=a("code"),TGr=o("model_type"),MGr=o(` property of the config object (either
passed as an argument or loaded from `),WEe=a("code"),EGr=o("pretrained_model_name_or_path"),CGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QEe=a("code"),wGr=o("pretrained_model_name_or_path"),AGr=o(":"),LGr=l(),oe=a("ul"),dC=a("li"),HEe=a("strong"),yGr=o("albert"),xGr=o(" \u2014 "),bee=a("a"),$Gr=o("FlaxAlbertModel"),kGr=o(" (ALBERT model)"),SGr=l(),cC=a("li"),UEe=a("strong"),RGr=o("bart"),PGr=o(" \u2014 "),vee=a("a"),BGr=o("FlaxBartModel"),IGr=o(" (BART model)"),NGr=l(),fC=a("li"),JEe=a("strong"),qGr=o("beit"),jGr=o(" \u2014 "),Fee=a("a"),DGr=o("FlaxBeitModel"),GGr=o(" (BEiT model)"),OGr=l(),mC=a("li"),YEe=a("strong"),VGr=o("bert"),XGr=o(" \u2014 "),Tee=a("a"),zGr=o("FlaxBertModel"),WGr=o(" (BERT model)"),QGr=l(),gC=a("li"),KEe=a("strong"),HGr=o("big_bird"),UGr=o(" \u2014 "),Mee=a("a"),JGr=o("FlaxBigBirdModel"),YGr=o(" (BigBird model)"),KGr=l(),hC=a("li"),ZEe=a("strong"),ZGr=o("blenderbot"),eOr=o(" \u2014 "),Eee=a("a"),oOr=o("FlaxBlenderbotModel"),rOr=o(" (Blenderbot model)"),tOr=l(),pC=a("li"),eCe=a("strong"),aOr=o("blenderbot-small"),nOr=o(" \u2014 "),Cee=a("a"),sOr=o("FlaxBlenderbotSmallModel"),lOr=o(" (BlenderbotSmall model)"),iOr=l(),_C=a("li"),oCe=a("strong"),dOr=o("clip"),cOr=o(" \u2014 "),wee=a("a"),fOr=o("FlaxCLIPModel"),mOr=o(" (CLIP model)"),gOr=l(),uC=a("li"),rCe=a("strong"),hOr=o("distilbert"),pOr=o(" \u2014 "),Aee=a("a"),_Or=o("FlaxDistilBertModel"),uOr=o(" (DistilBERT model)"),bOr=l(),bC=a("li"),tCe=a("strong"),vOr=o("electra"),FOr=o(" \u2014 "),Lee=a("a"),TOr=o("FlaxElectraModel"),MOr=o(" (ELECTRA model)"),EOr=l(),vC=a("li"),aCe=a("strong"),COr=o("gpt2"),wOr=o(" \u2014 "),yee=a("a"),AOr=o("FlaxGPT2Model"),LOr=o(" (OpenAI GPT-2 model)"),yOr=l(),FC=a("li"),nCe=a("strong"),xOr=o("gpt_neo"),$Or=o(" \u2014 "),xee=a("a"),kOr=o("FlaxGPTNeoModel"),SOr=o(" (GPT Neo model)"),ROr=l(),TC=a("li"),sCe=a("strong"),POr=o("gptj"),BOr=o(" \u2014 "),$ee=a("a"),IOr=o("FlaxGPTJModel"),NOr=o(" (GPT-J model)"),qOr=l(),MC=a("li"),lCe=a("strong"),jOr=o("longt5"),DOr=o(" \u2014 "),kee=a("a"),GOr=o("FlaxLongT5Model"),OOr=o(" (LongT5 model)"),VOr=l(),EC=a("li"),iCe=a("strong"),XOr=o("marian"),zOr=o(" \u2014 "),See=a("a"),WOr=o("FlaxMarianModel"),QOr=o(" (Marian model)"),HOr=l(),CC=a("li"),dCe=a("strong"),UOr=o("mbart"),JOr=o(" \u2014 "),Ree=a("a"),YOr=o("FlaxMBartModel"),KOr=o(" (mBART model)"),ZOr=l(),wC=a("li"),cCe=a("strong"),eVr=o("mt5"),oVr=o(" \u2014 "),Pee=a("a"),rVr=o("FlaxMT5Model"),tVr=o(" (MT5 model)"),aVr=l(),AC=a("li"),fCe=a("strong"),nVr=o("opt"),sVr=o(" \u2014 "),Bee=a("a"),lVr=o("FlaxOPTModel"),iVr=o(" (OPT model)"),dVr=l(),LC=a("li"),mCe=a("strong"),cVr=o("pegasus"),fVr=o(" \u2014 "),Iee=a("a"),mVr=o("FlaxPegasusModel"),gVr=o(" (Pegasus model)"),hVr=l(),yC=a("li"),gCe=a("strong"),pVr=o("roberta"),_Vr=o(" \u2014 "),Nee=a("a"),uVr=o("FlaxRobertaModel"),bVr=o(" (RoBERTa model)"),vVr=l(),xC=a("li"),hCe=a("strong"),FVr=o("roformer"),TVr=o(" \u2014 "),qee=a("a"),MVr=o("FlaxRoFormerModel"),EVr=o(" (RoFormer model)"),CVr=l(),$C=a("li"),pCe=a("strong"),wVr=o("t5"),AVr=o(" \u2014 "),jee=a("a"),LVr=o("FlaxT5Model"),yVr=o(" (T5 model)"),xVr=l(),kC=a("li"),_Ce=a("strong"),$Vr=o("vision-text-dual-encoder"),kVr=o(" \u2014 "),Dee=a("a"),SVr=o("FlaxVisionTextDualEncoderModel"),RVr=o(" (VisionTextDualEncoder model)"),PVr=l(),SC=a("li"),uCe=a("strong"),BVr=o("vit"),IVr=o(" \u2014 "),Gee=a("a"),NVr=o("FlaxViTModel"),qVr=o(" (ViT model)"),jVr=l(),RC=a("li"),bCe=a("strong"),DVr=o("wav2vec2"),GVr=o(" \u2014 "),Oee=a("a"),OVr=o("FlaxWav2Vec2Model"),VVr=o(" (Wav2Vec2 model)"),XVr=l(),PC=a("li"),vCe=a("strong"),zVr=o("xglm"),WVr=o(" \u2014 "),Vee=a("a"),QVr=o("FlaxXGLMModel"),HVr=o(" (XGLM model)"),UVr=l(),BC=a("li"),FCe=a("strong"),JVr=o("xlm-roberta"),YVr=o(" \u2014 "),Xee=a("a"),KVr=o("FlaxXLMRobertaModel"),ZVr=o(" (XLM-RoBERTa model)"),eXr=l(),F(IC.$$.fragment),bWe=l(),Zc=a("h2"),NC=a("a"),TCe=a("span"),F(T$.$$.fragment),oXr=l(),MCe=a("span"),rXr=o("FlaxAutoModelForCausalLM"),vWe=l(),_r=a("div"),F(M$.$$.fragment),tXr=l(),ef=a("p"),aXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),zee=a("a"),nXr=o("from_pretrained()"),sXr=o(" class method or the "),Wee=a("a"),lXr=o("from_config()"),iXr=o(` class
method.`),dXr=l(),E$=a("p"),cXr=o("This class cannot be instantiated directly using "),ECe=a("code"),fXr=o("__init__()"),mXr=o(" (throws an error)."),gXr=l(),Ht=a("div"),F(C$.$$.fragment),hXr=l(),CCe=a("p"),pXr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),_Xr=l(),of=a("p"),uXr=o(`Note:
Loading a model from its configuration file does `),wCe=a("strong"),bXr=o("not"),vXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qee=a("a"),FXr=o("from_pretrained()"),TXr=o(" to load the model weights."),MXr=l(),F(qC.$$.fragment),EXr=l(),Xr=a("div"),F(w$.$$.fragment),CXr=l(),ACe=a("p"),wXr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),AXr=l(),Mn=a("p"),LXr=o("The model class to instantiate is selected based on the "),LCe=a("code"),yXr=o("model_type"),xXr=o(` property of the config object (either
passed as an argument or loaded from `),yCe=a("code"),$Xr=o("pretrained_model_name_or_path"),kXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xCe=a("code"),SXr=o("pretrained_model_name_or_path"),RXr=o(":"),PXr=l(),xe=a("ul"),jC=a("li"),$Ce=a("strong"),BXr=o("bart"),IXr=o(" \u2014 "),Hee=a("a"),NXr=o("FlaxBartForCausalLM"),qXr=o(" (BART model)"),jXr=l(),DC=a("li"),kCe=a("strong"),DXr=o("bert"),GXr=o(" \u2014 "),Uee=a("a"),OXr=o("FlaxBertForCausalLM"),VXr=o(" (BERT model)"),XXr=l(),GC=a("li"),SCe=a("strong"),zXr=o("big_bird"),WXr=o(" \u2014 "),Jee=a("a"),QXr=o("FlaxBigBirdForCausalLM"),HXr=o(" (BigBird model)"),UXr=l(),OC=a("li"),RCe=a("strong"),JXr=o("electra"),YXr=o(" \u2014 "),Yee=a("a"),KXr=o("FlaxElectraForCausalLM"),ZXr=o(" (ELECTRA model)"),ezr=l(),VC=a("li"),PCe=a("strong"),ozr=o("gpt2"),rzr=o(" \u2014 "),Kee=a("a"),tzr=o("FlaxGPT2LMHeadModel"),azr=o(" (OpenAI GPT-2 model)"),nzr=l(),XC=a("li"),BCe=a("strong"),szr=o("gpt_neo"),lzr=o(" \u2014 "),Zee=a("a"),izr=o("FlaxGPTNeoForCausalLM"),dzr=o(" (GPT Neo model)"),czr=l(),zC=a("li"),ICe=a("strong"),fzr=o("gptj"),mzr=o(" \u2014 "),eoe=a("a"),gzr=o("FlaxGPTJForCausalLM"),hzr=o(" (GPT-J model)"),pzr=l(),WC=a("li"),NCe=a("strong"),_zr=o("opt"),uzr=o(" \u2014 "),ooe=a("a"),bzr=o("FlaxOPTForCausalLM"),vzr=o(" (OPT model)"),Fzr=l(),QC=a("li"),qCe=a("strong"),Tzr=o("roberta"),Mzr=o(" \u2014 "),roe=a("a"),Ezr=o("FlaxRobertaForCausalLM"),Czr=o(" (RoBERTa model)"),wzr=l(),HC=a("li"),jCe=a("strong"),Azr=o("xglm"),Lzr=o(" \u2014 "),toe=a("a"),yzr=o("FlaxXGLMForCausalLM"),xzr=o(" (XGLM model)"),$zr=l(),F(UC.$$.fragment),FWe=l(),rf=a("h2"),JC=a("a"),DCe=a("span"),F(A$.$$.fragment),kzr=l(),GCe=a("span"),Szr=o("FlaxAutoModelForPreTraining"),TWe=l(),ur=a("div"),F(L$.$$.fragment),Rzr=l(),tf=a("p"),Pzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),aoe=a("a"),Bzr=o("from_pretrained()"),Izr=o(" class method or the "),noe=a("a"),Nzr=o("from_config()"),qzr=o(` class
method.`),jzr=l(),y$=a("p"),Dzr=o("This class cannot be instantiated directly using "),OCe=a("code"),Gzr=o("__init__()"),Ozr=o(" (throws an error)."),Vzr=l(),Ut=a("div"),F(x$.$$.fragment),Xzr=l(),VCe=a("p"),zzr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Wzr=l(),af=a("p"),Qzr=o(`Note:
Loading a model from its configuration file does `),XCe=a("strong"),Hzr=o("not"),Uzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),soe=a("a"),Jzr=o("from_pretrained()"),Yzr=o(" to load the model weights."),Kzr=l(),F(YC.$$.fragment),Zzr=l(),zr=a("div"),F($$.$$.fragment),eWr=l(),zCe=a("p"),oWr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),rWr=l(),En=a("p"),tWr=o("The model class to instantiate is selected based on the "),WCe=a("code"),aWr=o("model_type"),nWr=o(` property of the config object (either
passed as an argument or loaded from `),QCe=a("code"),sWr=o("pretrained_model_name_or_path"),lWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HCe=a("code"),iWr=o("pretrained_model_name_or_path"),dWr=o(":"),cWr=l(),Ee=a("ul"),KC=a("li"),UCe=a("strong"),fWr=o("albert"),mWr=o(" \u2014 "),loe=a("a"),gWr=o("FlaxAlbertForPreTraining"),hWr=o(" (ALBERT model)"),pWr=l(),ZC=a("li"),JCe=a("strong"),_Wr=o("bart"),uWr=o(" \u2014 "),ioe=a("a"),bWr=o("FlaxBartForConditionalGeneration"),vWr=o(" (BART model)"),FWr=l(),e5=a("li"),YCe=a("strong"),TWr=o("bert"),MWr=o(" \u2014 "),doe=a("a"),EWr=o("FlaxBertForPreTraining"),CWr=o(" (BERT model)"),wWr=l(),o5=a("li"),KCe=a("strong"),AWr=o("big_bird"),LWr=o(" \u2014 "),coe=a("a"),yWr=o("FlaxBigBirdForPreTraining"),xWr=o(" (BigBird model)"),$Wr=l(),r5=a("li"),ZCe=a("strong"),kWr=o("electra"),SWr=o(" \u2014 "),foe=a("a"),RWr=o("FlaxElectraForPreTraining"),PWr=o(" (ELECTRA model)"),BWr=l(),t5=a("li"),e5e=a("strong"),IWr=o("longt5"),NWr=o(" \u2014 "),moe=a("a"),qWr=o("FlaxLongT5ForConditionalGeneration"),jWr=o(" (LongT5 model)"),DWr=l(),a5=a("li"),o5e=a("strong"),GWr=o("mbart"),OWr=o(" \u2014 "),goe=a("a"),VWr=o("FlaxMBartForConditionalGeneration"),XWr=o(" (mBART model)"),zWr=l(),n5=a("li"),r5e=a("strong"),WWr=o("mt5"),QWr=o(" \u2014 "),hoe=a("a"),HWr=o("FlaxMT5ForConditionalGeneration"),UWr=o(" (MT5 model)"),JWr=l(),s5=a("li"),t5e=a("strong"),YWr=o("roberta"),KWr=o(" \u2014 "),poe=a("a"),ZWr=o("FlaxRobertaForMaskedLM"),eQr=o(" (RoBERTa model)"),oQr=l(),l5=a("li"),a5e=a("strong"),rQr=o("roformer"),tQr=o(" \u2014 "),_oe=a("a"),aQr=o("FlaxRoFormerForMaskedLM"),nQr=o(" (RoFormer model)"),sQr=l(),i5=a("li"),n5e=a("strong"),lQr=o("t5"),iQr=o(" \u2014 "),uoe=a("a"),dQr=o("FlaxT5ForConditionalGeneration"),cQr=o(" (T5 model)"),fQr=l(),d5=a("li"),s5e=a("strong"),mQr=o("wav2vec2"),gQr=o(" \u2014 "),boe=a("a"),hQr=o("FlaxWav2Vec2ForPreTraining"),pQr=o(" (Wav2Vec2 model)"),_Qr=l(),c5=a("li"),l5e=a("strong"),uQr=o("xlm-roberta"),bQr=o(" \u2014 "),voe=a("a"),vQr=o("FlaxXLMRobertaForMaskedLM"),FQr=o(" (XLM-RoBERTa model)"),TQr=l(),F(f5.$$.fragment),MWe=l(),nf=a("h2"),m5=a("a"),i5e=a("span"),F(k$.$$.fragment),MQr=l(),d5e=a("span"),EQr=o("FlaxAutoModelForMaskedLM"),EWe=l(),br=a("div"),F(S$.$$.fragment),CQr=l(),sf=a("p"),wQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Foe=a("a"),AQr=o("from_pretrained()"),LQr=o(" class method or the "),Toe=a("a"),yQr=o("from_config()"),xQr=o(` class
method.`),$Qr=l(),R$=a("p"),kQr=o("This class cannot be instantiated directly using "),c5e=a("code"),SQr=o("__init__()"),RQr=o(" (throws an error)."),PQr=l(),Jt=a("div"),F(P$.$$.fragment),BQr=l(),f5e=a("p"),IQr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),NQr=l(),lf=a("p"),qQr=o(`Note:
Loading a model from its configuration file does `),m5e=a("strong"),jQr=o("not"),DQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Moe=a("a"),GQr=o("from_pretrained()"),OQr=o(" to load the model weights."),VQr=l(),F(g5.$$.fragment),XQr=l(),Wr=a("div"),F(B$.$$.fragment),zQr=l(),g5e=a("p"),WQr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),QQr=l(),Cn=a("p"),HQr=o("The model class to instantiate is selected based on the "),h5e=a("code"),UQr=o("model_type"),JQr=o(` property of the config object (either
passed as an argument or loaded from `),p5e=a("code"),YQr=o("pretrained_model_name_or_path"),KQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_5e=a("code"),ZQr=o("pretrained_model_name_or_path"),eHr=o(":"),oHr=l(),$e=a("ul"),h5=a("li"),u5e=a("strong"),rHr=o("albert"),tHr=o(" \u2014 "),Eoe=a("a"),aHr=o("FlaxAlbertForMaskedLM"),nHr=o(" (ALBERT model)"),sHr=l(),p5=a("li"),b5e=a("strong"),lHr=o("bart"),iHr=o(" \u2014 "),Coe=a("a"),dHr=o("FlaxBartForConditionalGeneration"),cHr=o(" (BART model)"),fHr=l(),_5=a("li"),v5e=a("strong"),mHr=o("bert"),gHr=o(" \u2014 "),woe=a("a"),hHr=o("FlaxBertForMaskedLM"),pHr=o(" (BERT model)"),_Hr=l(),u5=a("li"),F5e=a("strong"),uHr=o("big_bird"),bHr=o(" \u2014 "),Aoe=a("a"),vHr=o("FlaxBigBirdForMaskedLM"),FHr=o(" (BigBird model)"),THr=l(),b5=a("li"),T5e=a("strong"),MHr=o("distilbert"),EHr=o(" \u2014 "),Loe=a("a"),CHr=o("FlaxDistilBertForMaskedLM"),wHr=o(" (DistilBERT model)"),AHr=l(),v5=a("li"),M5e=a("strong"),LHr=o("electra"),yHr=o(" \u2014 "),yoe=a("a"),xHr=o("FlaxElectraForMaskedLM"),$Hr=o(" (ELECTRA model)"),kHr=l(),F5=a("li"),E5e=a("strong"),SHr=o("mbart"),RHr=o(" \u2014 "),xoe=a("a"),PHr=o("FlaxMBartForConditionalGeneration"),BHr=o(" (mBART model)"),IHr=l(),T5=a("li"),C5e=a("strong"),NHr=o("roberta"),qHr=o(" \u2014 "),$oe=a("a"),jHr=o("FlaxRobertaForMaskedLM"),DHr=o(" (RoBERTa model)"),GHr=l(),M5=a("li"),w5e=a("strong"),OHr=o("roformer"),VHr=o(" \u2014 "),koe=a("a"),XHr=o("FlaxRoFormerForMaskedLM"),zHr=o(" (RoFormer model)"),WHr=l(),E5=a("li"),A5e=a("strong"),QHr=o("xlm-roberta"),HHr=o(" \u2014 "),Soe=a("a"),UHr=o("FlaxXLMRobertaForMaskedLM"),JHr=o(" (XLM-RoBERTa model)"),YHr=l(),F(C5.$$.fragment),CWe=l(),df=a("h2"),w5=a("a"),L5e=a("span"),F(I$.$$.fragment),KHr=l(),y5e=a("span"),ZHr=o("FlaxAutoModelForSeq2SeqLM"),wWe=l(),vr=a("div"),F(N$.$$.fragment),eUr=l(),cf=a("p"),oUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Roe=a("a"),rUr=o("from_pretrained()"),tUr=o(" class method or the "),Poe=a("a"),aUr=o("from_config()"),nUr=o(` class
method.`),sUr=l(),q$=a("p"),lUr=o("This class cannot be instantiated directly using "),x5e=a("code"),iUr=o("__init__()"),dUr=o(" (throws an error)."),cUr=l(),Yt=a("div"),F(j$.$$.fragment),fUr=l(),$5e=a("p"),mUr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),gUr=l(),ff=a("p"),hUr=o(`Note:
Loading a model from its configuration file does `),k5e=a("strong"),pUr=o("not"),_Ur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Boe=a("a"),uUr=o("from_pretrained()"),bUr=o(" to load the model weights."),vUr=l(),F(A5.$$.fragment),FUr=l(),Qr=a("div"),F(D$.$$.fragment),TUr=l(),S5e=a("p"),MUr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),EUr=l(),wn=a("p"),CUr=o("The model class to instantiate is selected based on the "),R5e=a("code"),wUr=o("model_type"),AUr=o(` property of the config object (either
passed as an argument or loaded from `),P5e=a("code"),LUr=o("pretrained_model_name_or_path"),yUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B5e=a("code"),xUr=o("pretrained_model_name_or_path"),$Ur=o(":"),kUr=l(),ke=a("ul"),L5=a("li"),I5e=a("strong"),SUr=o("bart"),RUr=o(" \u2014 "),Ioe=a("a"),PUr=o("FlaxBartForConditionalGeneration"),BUr=o(" (BART model)"),IUr=l(),y5=a("li"),N5e=a("strong"),NUr=o("blenderbot"),qUr=o(" \u2014 "),Noe=a("a"),jUr=o("FlaxBlenderbotForConditionalGeneration"),DUr=o(" (Blenderbot model)"),GUr=l(),x5=a("li"),q5e=a("strong"),OUr=o("blenderbot-small"),VUr=o(" \u2014 "),qoe=a("a"),XUr=o("FlaxBlenderbotSmallForConditionalGeneration"),zUr=o(" (BlenderbotSmall model)"),WUr=l(),$5=a("li"),j5e=a("strong"),QUr=o("encoder-decoder"),HUr=o(" \u2014 "),joe=a("a"),UUr=o("FlaxEncoderDecoderModel"),JUr=o(" (Encoder decoder model)"),YUr=l(),k5=a("li"),D5e=a("strong"),KUr=o("longt5"),ZUr=o(" \u2014 "),Doe=a("a"),eJr=o("FlaxLongT5ForConditionalGeneration"),oJr=o(" (LongT5 model)"),rJr=l(),S5=a("li"),G5e=a("strong"),tJr=o("marian"),aJr=o(" \u2014 "),Goe=a("a"),nJr=o("FlaxMarianMTModel"),sJr=o(" (Marian model)"),lJr=l(),R5=a("li"),O5e=a("strong"),iJr=o("mbart"),dJr=o(" \u2014 "),Ooe=a("a"),cJr=o("FlaxMBartForConditionalGeneration"),fJr=o(" (mBART model)"),mJr=l(),P5=a("li"),V5e=a("strong"),gJr=o("mt5"),hJr=o(" \u2014 "),Voe=a("a"),pJr=o("FlaxMT5ForConditionalGeneration"),_Jr=o(" (MT5 model)"),uJr=l(),B5=a("li"),X5e=a("strong"),bJr=o("pegasus"),vJr=o(" \u2014 "),Xoe=a("a"),FJr=o("FlaxPegasusForConditionalGeneration"),TJr=o(" (Pegasus model)"),MJr=l(),I5=a("li"),z5e=a("strong"),EJr=o("t5"),CJr=o(" \u2014 "),zoe=a("a"),wJr=o("FlaxT5ForConditionalGeneration"),AJr=o(" (T5 model)"),LJr=l(),F(N5.$$.fragment),AWe=l(),mf=a("h2"),q5=a("a"),W5e=a("span"),F(G$.$$.fragment),yJr=l(),Q5e=a("span"),xJr=o("FlaxAutoModelForSequenceClassification"),LWe=l(),Fr=a("div"),F(O$.$$.fragment),$Jr=l(),gf=a("p"),kJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Woe=a("a"),SJr=o("from_pretrained()"),RJr=o(" class method or the "),Qoe=a("a"),PJr=o("from_config()"),BJr=o(` class
method.`),IJr=l(),V$=a("p"),NJr=o("This class cannot be instantiated directly using "),H5e=a("code"),qJr=o("__init__()"),jJr=o(" (throws an error)."),DJr=l(),Kt=a("div"),F(X$.$$.fragment),GJr=l(),U5e=a("p"),OJr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),VJr=l(),hf=a("p"),XJr=o(`Note:
Loading a model from its configuration file does `),J5e=a("strong"),zJr=o("not"),WJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hoe=a("a"),QJr=o("from_pretrained()"),HJr=o(" to load the model weights."),UJr=l(),F(j5.$$.fragment),JJr=l(),Hr=a("div"),F(z$.$$.fragment),YJr=l(),Y5e=a("p"),KJr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ZJr=l(),An=a("p"),eYr=o("The model class to instantiate is selected based on the "),K5e=a("code"),oYr=o("model_type"),rYr=o(` property of the config object (either
passed as an argument or loaded from `),Z5e=a("code"),tYr=o("pretrained_model_name_or_path"),aYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e0e=a("code"),nYr=o("pretrained_model_name_or_path"),sYr=o(":"),lYr=l(),Se=a("ul"),D5=a("li"),o0e=a("strong"),iYr=o("albert"),dYr=o(" \u2014 "),Uoe=a("a"),cYr=o("FlaxAlbertForSequenceClassification"),fYr=o(" (ALBERT model)"),mYr=l(),G5=a("li"),r0e=a("strong"),gYr=o("bart"),hYr=o(" \u2014 "),Joe=a("a"),pYr=o("FlaxBartForSequenceClassification"),_Yr=o(" (BART model)"),uYr=l(),O5=a("li"),t0e=a("strong"),bYr=o("bert"),vYr=o(" \u2014 "),Yoe=a("a"),FYr=o("FlaxBertForSequenceClassification"),TYr=o(" (BERT model)"),MYr=l(),V5=a("li"),a0e=a("strong"),EYr=o("big_bird"),CYr=o(" \u2014 "),Koe=a("a"),wYr=o("FlaxBigBirdForSequenceClassification"),AYr=o(" (BigBird model)"),LYr=l(),X5=a("li"),n0e=a("strong"),yYr=o("distilbert"),xYr=o(" \u2014 "),Zoe=a("a"),$Yr=o("FlaxDistilBertForSequenceClassification"),kYr=o(" (DistilBERT model)"),SYr=l(),z5=a("li"),s0e=a("strong"),RYr=o("electra"),PYr=o(" \u2014 "),ere=a("a"),BYr=o("FlaxElectraForSequenceClassification"),IYr=o(" (ELECTRA model)"),NYr=l(),W5=a("li"),l0e=a("strong"),qYr=o("mbart"),jYr=o(" \u2014 "),ore=a("a"),DYr=o("FlaxMBartForSequenceClassification"),GYr=o(" (mBART model)"),OYr=l(),Q5=a("li"),i0e=a("strong"),VYr=o("roberta"),XYr=o(" \u2014 "),rre=a("a"),zYr=o("FlaxRobertaForSequenceClassification"),WYr=o(" (RoBERTa model)"),QYr=l(),H5=a("li"),d0e=a("strong"),HYr=o("roformer"),UYr=o(" \u2014 "),tre=a("a"),JYr=o("FlaxRoFormerForSequenceClassification"),YYr=o(" (RoFormer model)"),KYr=l(),U5=a("li"),c0e=a("strong"),ZYr=o("xlm-roberta"),eKr=o(" \u2014 "),are=a("a"),oKr=o("FlaxXLMRobertaForSequenceClassification"),rKr=o(" (XLM-RoBERTa model)"),tKr=l(),F(J5.$$.fragment),yWe=l(),pf=a("h2"),Y5=a("a"),f0e=a("span"),F(W$.$$.fragment),aKr=l(),m0e=a("span"),nKr=o("FlaxAutoModelForQuestionAnswering"),xWe=l(),Tr=a("div"),F(Q$.$$.fragment),sKr=l(),_f=a("p"),lKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),nre=a("a"),iKr=o("from_pretrained()"),dKr=o(" class method or the "),sre=a("a"),cKr=o("from_config()"),fKr=o(` class
method.`),mKr=l(),H$=a("p"),gKr=o("This class cannot be instantiated directly using "),g0e=a("code"),hKr=o("__init__()"),pKr=o(" (throws an error)."),_Kr=l(),Zt=a("div"),F(U$.$$.fragment),uKr=l(),h0e=a("p"),bKr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),vKr=l(),uf=a("p"),FKr=o(`Note:
Loading a model from its configuration file does `),p0e=a("strong"),TKr=o("not"),MKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lre=a("a"),EKr=o("from_pretrained()"),CKr=o(" to load the model weights."),wKr=l(),F(K5.$$.fragment),AKr=l(),Ur=a("div"),F(J$.$$.fragment),LKr=l(),_0e=a("p"),yKr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),xKr=l(),Ln=a("p"),$Kr=o("The model class to instantiate is selected based on the "),u0e=a("code"),kKr=o("model_type"),SKr=o(` property of the config object (either
passed as an argument or loaded from `),b0e=a("code"),RKr=o("pretrained_model_name_or_path"),PKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v0e=a("code"),BKr=o("pretrained_model_name_or_path"),IKr=o(":"),NKr=l(),Re=a("ul"),Z5=a("li"),F0e=a("strong"),qKr=o("albert"),jKr=o(" \u2014 "),ire=a("a"),DKr=o("FlaxAlbertForQuestionAnswering"),GKr=o(" (ALBERT model)"),OKr=l(),e0=a("li"),T0e=a("strong"),VKr=o("bart"),XKr=o(" \u2014 "),dre=a("a"),zKr=o("FlaxBartForQuestionAnswering"),WKr=o(" (BART model)"),QKr=l(),o0=a("li"),M0e=a("strong"),HKr=o("bert"),UKr=o(" \u2014 "),cre=a("a"),JKr=o("FlaxBertForQuestionAnswering"),YKr=o(" (BERT model)"),KKr=l(),r0=a("li"),E0e=a("strong"),ZKr=o("big_bird"),eZr=o(" \u2014 "),fre=a("a"),oZr=o("FlaxBigBirdForQuestionAnswering"),rZr=o(" (BigBird model)"),tZr=l(),t0=a("li"),C0e=a("strong"),aZr=o("distilbert"),nZr=o(" \u2014 "),mre=a("a"),sZr=o("FlaxDistilBertForQuestionAnswering"),lZr=o(" (DistilBERT model)"),iZr=l(),a0=a("li"),w0e=a("strong"),dZr=o("electra"),cZr=o(" \u2014 "),gre=a("a"),fZr=o("FlaxElectraForQuestionAnswering"),mZr=o(" (ELECTRA model)"),gZr=l(),n0=a("li"),A0e=a("strong"),hZr=o("mbart"),pZr=o(" \u2014 "),hre=a("a"),_Zr=o("FlaxMBartForQuestionAnswering"),uZr=o(" (mBART model)"),bZr=l(),s0=a("li"),L0e=a("strong"),vZr=o("roberta"),FZr=o(" \u2014 "),pre=a("a"),TZr=o("FlaxRobertaForQuestionAnswering"),MZr=o(" (RoBERTa model)"),EZr=l(),l0=a("li"),y0e=a("strong"),CZr=o("roformer"),wZr=o(" \u2014 "),_re=a("a"),AZr=o("FlaxRoFormerForQuestionAnswering"),LZr=o(" (RoFormer model)"),yZr=l(),i0=a("li"),x0e=a("strong"),xZr=o("xlm-roberta"),$Zr=o(" \u2014 "),ure=a("a"),kZr=o("FlaxXLMRobertaForQuestionAnswering"),SZr=o(" (XLM-RoBERTa model)"),RZr=l(),F(d0.$$.fragment),$We=l(),bf=a("h2"),c0=a("a"),$0e=a("span"),F(Y$.$$.fragment),PZr=l(),k0e=a("span"),BZr=o("FlaxAutoModelForTokenClassification"),kWe=l(),Mr=a("div"),F(K$.$$.fragment),IZr=l(),vf=a("p"),NZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),bre=a("a"),qZr=o("from_pretrained()"),jZr=o(" class method or the "),vre=a("a"),DZr=o("from_config()"),GZr=o(` class
method.`),OZr=l(),Z$=a("p"),VZr=o("This class cannot be instantiated directly using "),S0e=a("code"),XZr=o("__init__()"),zZr=o(" (throws an error)."),WZr=l(),ea=a("div"),F(ek.$$.fragment),QZr=l(),R0e=a("p"),HZr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),UZr=l(),Ff=a("p"),JZr=o(`Note:
Loading a model from its configuration file does `),P0e=a("strong"),YZr=o("not"),KZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fre=a("a"),ZZr=o("from_pretrained()"),eet=o(" to load the model weights."),oet=l(),F(f0.$$.fragment),ret=l(),Jr=a("div"),F(ok.$$.fragment),tet=l(),B0e=a("p"),aet=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),net=l(),yn=a("p"),set=o("The model class to instantiate is selected based on the "),I0e=a("code"),iet=o("model_type"),det=o(` property of the config object (either
passed as an argument or loaded from `),N0e=a("code"),cet=o("pretrained_model_name_or_path"),fet=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q0e=a("code"),met=o("pretrained_model_name_or_path"),get=o(":"),het=l(),Ve=a("ul"),m0=a("li"),j0e=a("strong"),pet=o("albert"),_et=o(" \u2014 "),Tre=a("a"),uet=o("FlaxAlbertForTokenClassification"),bet=o(" (ALBERT model)"),vet=l(),g0=a("li"),D0e=a("strong"),Fet=o("bert"),Tet=o(" \u2014 "),Mre=a("a"),Met=o("FlaxBertForTokenClassification"),Eet=o(" (BERT model)"),Cet=l(),h0=a("li"),G0e=a("strong"),wet=o("big_bird"),Aet=o(" \u2014 "),Ere=a("a"),Let=o("FlaxBigBirdForTokenClassification"),yet=o(" (BigBird model)"),xet=l(),p0=a("li"),O0e=a("strong"),$et=o("distilbert"),ket=o(" \u2014 "),Cre=a("a"),Set=o("FlaxDistilBertForTokenClassification"),Ret=o(" (DistilBERT model)"),Pet=l(),_0=a("li"),V0e=a("strong"),Bet=o("electra"),Iet=o(" \u2014 "),wre=a("a"),Net=o("FlaxElectraForTokenClassification"),qet=o(" (ELECTRA model)"),jet=l(),u0=a("li"),X0e=a("strong"),Det=o("roberta"),Get=o(" \u2014 "),Are=a("a"),Oet=o("FlaxRobertaForTokenClassification"),Vet=o(" (RoBERTa model)"),Xet=l(),b0=a("li"),z0e=a("strong"),zet=o("roformer"),Wet=o(" \u2014 "),Lre=a("a"),Qet=o("FlaxRoFormerForTokenClassification"),Het=o(" (RoFormer model)"),Uet=l(),v0=a("li"),W0e=a("strong"),Jet=o("xlm-roberta"),Yet=o(" \u2014 "),yre=a("a"),Ket=o("FlaxXLMRobertaForTokenClassification"),Zet=o(" (XLM-RoBERTa model)"),eot=l(),F(F0.$$.fragment),SWe=l(),Tf=a("h2"),T0=a("a"),Q0e=a("span"),F(rk.$$.fragment),oot=l(),H0e=a("span"),rot=o("FlaxAutoModelForMultipleChoice"),RWe=l(),Er=a("div"),F(tk.$$.fragment),tot=l(),Mf=a("p"),aot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),xre=a("a"),not=o("from_pretrained()"),sot=o(" class method or the "),$re=a("a"),lot=o("from_config()"),iot=o(` class
method.`),dot=l(),ak=a("p"),cot=o("This class cannot be instantiated directly using "),U0e=a("code"),fot=o("__init__()"),mot=o(" (throws an error)."),got=l(),oa=a("div"),F(nk.$$.fragment),hot=l(),J0e=a("p"),pot=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),_ot=l(),Ef=a("p"),uot=o(`Note:
Loading a model from its configuration file does `),Y0e=a("strong"),bot=o("not"),vot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kre=a("a"),Fot=o("from_pretrained()"),Tot=o(" to load the model weights."),Mot=l(),F(M0.$$.fragment),Eot=l(),Yr=a("div"),F(sk.$$.fragment),Cot=l(),K0e=a("p"),wot=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Aot=l(),xn=a("p"),Lot=o("The model class to instantiate is selected based on the "),Z0e=a("code"),yot=o("model_type"),xot=o(` property of the config object (either
passed as an argument or loaded from `),ewe=a("code"),$ot=o("pretrained_model_name_or_path"),kot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),owe=a("code"),Sot=o("pretrained_model_name_or_path"),Rot=o(":"),Pot=l(),Xe=a("ul"),E0=a("li"),rwe=a("strong"),Bot=o("albert"),Iot=o(" \u2014 "),Sre=a("a"),Not=o("FlaxAlbertForMultipleChoice"),qot=o(" (ALBERT model)"),jot=l(),C0=a("li"),twe=a("strong"),Dot=o("bert"),Got=o(" \u2014 "),Rre=a("a"),Oot=o("FlaxBertForMultipleChoice"),Vot=o(" (BERT model)"),Xot=l(),w0=a("li"),awe=a("strong"),zot=o("big_bird"),Wot=o(" \u2014 "),Pre=a("a"),Qot=o("FlaxBigBirdForMultipleChoice"),Hot=o(" (BigBird model)"),Uot=l(),A0=a("li"),nwe=a("strong"),Jot=o("distilbert"),Yot=o(" \u2014 "),Bre=a("a"),Kot=o("FlaxDistilBertForMultipleChoice"),Zot=o(" (DistilBERT model)"),ert=l(),L0=a("li"),swe=a("strong"),ort=o("electra"),rrt=o(" \u2014 "),Ire=a("a"),trt=o("FlaxElectraForMultipleChoice"),art=o(" (ELECTRA model)"),nrt=l(),y0=a("li"),lwe=a("strong"),srt=o("roberta"),lrt=o(" \u2014 "),Nre=a("a"),irt=o("FlaxRobertaForMultipleChoice"),drt=o(" (RoBERTa model)"),crt=l(),x0=a("li"),iwe=a("strong"),frt=o("roformer"),mrt=o(" \u2014 "),qre=a("a"),grt=o("FlaxRoFormerForMultipleChoice"),hrt=o(" (RoFormer model)"),prt=l(),$0=a("li"),dwe=a("strong"),_rt=o("xlm-roberta"),urt=o(" \u2014 "),jre=a("a"),brt=o("FlaxXLMRobertaForMultipleChoice"),vrt=o(" (XLM-RoBERTa model)"),Frt=l(),F(k0.$$.fragment),PWe=l(),Cf=a("h2"),S0=a("a"),cwe=a("span"),F(lk.$$.fragment),Trt=l(),fwe=a("span"),Mrt=o("FlaxAutoModelForNextSentencePrediction"),BWe=l(),Cr=a("div"),F(ik.$$.fragment),Ert=l(),wf=a("p"),Crt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Dre=a("a"),wrt=o("from_pretrained()"),Art=o(" class method or the "),Gre=a("a"),Lrt=o("from_config()"),yrt=o(` class
method.`),xrt=l(),dk=a("p"),$rt=o("This class cannot be instantiated directly using "),mwe=a("code"),krt=o("__init__()"),Srt=o(" (throws an error)."),Rrt=l(),ra=a("div"),F(ck.$$.fragment),Prt=l(),gwe=a("p"),Brt=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Irt=l(),Af=a("p"),Nrt=o(`Note:
Loading a model from its configuration file does `),hwe=a("strong"),qrt=o("not"),jrt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ore=a("a"),Drt=o("from_pretrained()"),Grt=o(" to load the model weights."),Ort=l(),F(R0.$$.fragment),Vrt=l(),Kr=a("div"),F(fk.$$.fragment),Xrt=l(),pwe=a("p"),zrt=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Wrt=l(),$n=a("p"),Qrt=o("The model class to instantiate is selected based on the "),_we=a("code"),Hrt=o("model_type"),Urt=o(` property of the config object (either
passed as an argument or loaded from `),uwe=a("code"),Jrt=o("pretrained_model_name_or_path"),Yrt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bwe=a("code"),Krt=o("pretrained_model_name_or_path"),Zrt=o(":"),ett=l(),vwe=a("ul"),P0=a("li"),Fwe=a("strong"),ott=o("bert"),rtt=o(" \u2014 "),Vre=a("a"),ttt=o("FlaxBertForNextSentencePrediction"),att=o(" (BERT model)"),ntt=l(),F(B0.$$.fragment),IWe=l(),Lf=a("h2"),I0=a("a"),Twe=a("span"),F(mk.$$.fragment),stt=l(),Mwe=a("span"),ltt=o("FlaxAutoModelForImageClassification"),NWe=l(),wr=a("div"),F(gk.$$.fragment),itt=l(),yf=a("p"),dtt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Xre=a("a"),ctt=o("from_pretrained()"),ftt=o(" class method or the "),zre=a("a"),mtt=o("from_config()"),gtt=o(` class
method.`),htt=l(),hk=a("p"),ptt=o("This class cannot be instantiated directly using "),Ewe=a("code"),_tt=o("__init__()"),utt=o(" (throws an error)."),btt=l(),ta=a("div"),F(pk.$$.fragment),vtt=l(),Cwe=a("p"),Ftt=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Ttt=l(),xf=a("p"),Mtt=o(`Note:
Loading a model from its configuration file does `),wwe=a("strong"),Ett=o("not"),Ctt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wre=a("a"),wtt=o("from_pretrained()"),Att=o(" to load the model weights."),Ltt=l(),F(N0.$$.fragment),ytt=l(),Zr=a("div"),F(_k.$$.fragment),xtt=l(),Awe=a("p"),$tt=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ktt=l(),kn=a("p"),Stt=o("The model class to instantiate is selected based on the "),Lwe=a("code"),Rtt=o("model_type"),Ptt=o(` property of the config object (either
passed as an argument or loaded from `),ywe=a("code"),Btt=o("pretrained_model_name_or_path"),Itt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xwe=a("code"),Ntt=o("pretrained_model_name_or_path"),qtt=o(":"),jtt=l(),uk=a("ul"),q0=a("li"),$we=a("strong"),Dtt=o("beit"),Gtt=o(" \u2014 "),Qre=a("a"),Ott=o("FlaxBeitForImageClassification"),Vtt=o(" (BEiT model)"),Xtt=l(),j0=a("li"),kwe=a("strong"),ztt=o("vit"),Wtt=o(" \u2014 "),Hre=a("a"),Qtt=o("FlaxViTForImageClassification"),Htt=o(" (ViT model)"),Utt=l(),F(D0.$$.fragment),qWe=l(),$f=a("h2"),G0=a("a"),Swe=a("span"),F(bk.$$.fragment),Jtt=l(),Rwe=a("span"),Ytt=o("FlaxAutoModelForVision2Seq"),jWe=l(),Ar=a("div"),F(vk.$$.fragment),Ktt=l(),kf=a("p"),Ztt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Ure=a("a"),eat=o("from_pretrained()"),oat=o(" class method or the "),Jre=a("a"),rat=o("from_config()"),tat=o(` class
method.`),aat=l(),Fk=a("p"),nat=o("This class cannot be instantiated directly using "),Pwe=a("code"),sat=o("__init__()"),lat=o(" (throws an error)."),iat=l(),aa=a("div"),F(Tk.$$.fragment),dat=l(),Bwe=a("p"),cat=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),fat=l(),Sf=a("p"),mat=o(`Note:
Loading a model from its configuration file does `),Iwe=a("strong"),gat=o("not"),hat=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yre=a("a"),pat=o("from_pretrained()"),_at=o(" to load the model weights."),uat=l(),F(O0.$$.fragment),bat=l(),et=a("div"),F(Mk.$$.fragment),vat=l(),Nwe=a("p"),Fat=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Tat=l(),Sn=a("p"),Mat=o("The model class to instantiate is selected based on the "),qwe=a("code"),Eat=o("model_type"),Cat=o(` property of the config object (either
passed as an argument or loaded from `),jwe=a("code"),wat=o("pretrained_model_name_or_path"),Aat=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dwe=a("code"),Lat=o("pretrained_model_name_or_path"),yat=o(":"),xat=l(),Gwe=a("ul"),V0=a("li"),Owe=a("strong"),$at=o("vision-encoder-decoder"),kat=o(" \u2014 "),Kre=a("a"),Sat=o("FlaxVisionEncoderDecoderModel"),Rat=o(" (Vision Encoder decoder model)"),Pat=l(),F(X0.$$.fragment),this.h()},l(f){const u=SHt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Ek=s(p);m=n(Ek,"A",{id:!0,class:!0,href:!0});var Vwe=s(m);_=n(Vwe,"SPAN",{});var Xwe=s(_);T(c.$$.fragment,Xwe),Xwe.forEach(t),Vwe.forEach(t),h=i(Ek),Co=n(Ek,"SPAN",{});var zwe=s(Co);xi=r(zwe,"Auto Classes"),zwe.forEach(t),Ek.forEach(t),If=i(f),lt=n(f,"P",{});var Ck=s(lt);$i=r(Ck,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ki=n(Ck,"CODE",{});var Wwe=s(ki);d6=r(Wwe,"from_pretrained()"),Wwe.forEach(t),Nf=r(Ck,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ck.forEach(t),Oe=i(f),Qe=n(f,"P",{});var Rn=s(Qe);Si=r(Rn,"Instantiating one of "),Pn=n(Rn,"A",{href:!0});var Qwe=s(Pn);c6=r(Qwe,"AutoConfig"),Qwe.forEach(t),Bn=r(Rn,", "),In=n(Rn,"A",{href:!0});var Hwe=s(In);f6=r(Hwe,"AutoModel"),Hwe.forEach(t),Ri=r(Rn,`, and
`),Nn=n(Rn,"A",{href:!0});var Uwe=s(Nn);m6=r(Uwe,"AutoTokenizer"),Uwe.forEach(t),Pi=r(Rn," will directly create a class of the relevant architecture. For instance"),Rn.forEach(t),qf=i(f),T(Sa.$$.fragment,f),He=i(f),Ae=n(f,"P",{});var wk=s(Ae);WS=r(wk,"will create a model that is an instance of "),Bi=n(wk,"A",{href:!0});var Jwe=s(Bi);QS=r(Jwe,"BertModel"),Jwe.forEach(t),HS=r(wk,"."),wk.forEach(t),wo=i(f),Ra=n(f,"P",{});var Ak=s(Ra);US=r(Ak,"There is one class of "),jf=n(Ak,"CODE",{});var Ywe=s(jf);JS=r(Ywe,"AutoModel"),Ywe.forEach(t),JHe=r(Ak," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Ak.forEach(t),BXe=i(f),Ii=n(f,"H2",{class:!0});var Lk=s(Ii);Df=n(Lk,"A",{id:!0,class:!0,href:!0});var Kwe=s(Df);Qae=n(Kwe,"SPAN",{});var Zwe=s(Qae);T(g6.$$.fragment,Zwe),Zwe.forEach(t),Kwe.forEach(t),YHe=i(Lk),Hae=n(Lk,"SPAN",{});var eAe=s(Hae);KHe=r(eAe,"Extending the Auto Classes"),eAe.forEach(t),Lk.forEach(t),IXe=i(f),qn=n(f,"P",{});var Rf=s(qn);ZHe=r(Rf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Uae=n(Rf,"CODE",{});var oAe=s(Uae);eUe=r(oAe,"NewModel"),oAe.forEach(t),oUe=r(Rf,", make sure you have a "),Jae=n(Rf,"CODE",{});var rAe=s(Jae);rUe=r(rAe,"NewModelConfig"),rAe.forEach(t),tUe=r(Rf,` then you can add those to the auto
classes like this:`),Rf.forEach(t),NXe=i(f),T(h6.$$.fragment,f),qXe=i(f),YS=n(f,"P",{});var tAe=s(YS);aUe=r(tAe,"You will then be able to use the auto classes like you would usually do!"),tAe.forEach(t),jXe=i(f),T(Gf.$$.fragment,f),DXe=i(f),Ni=n(f,"H2",{class:!0});var yk=s(Ni);Of=n(yk,"A",{id:!0,class:!0,href:!0});var aAe=s(Of);Yae=n(aAe,"SPAN",{});var nAe=s(Yae);T(p6.$$.fragment,nAe),nAe.forEach(t),aAe.forEach(t),nUe=i(yk),Kae=n(yk,"SPAN",{});var sAe=s(Kae);sUe=r(sAe,"AutoConfig"),sAe.forEach(t),yk.forEach(t),GXe=i(f),Ao=n(f,"DIV",{class:!0});var nt=s(Ao);T(_6.$$.fragment,nt),lUe=i(nt),u6=n(nt,"P",{});var xk=s(u6);iUe=r(xk,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),KS=n(xk,"A",{href:!0});var lAe=s(KS);dUe=r(lAe,"from_pretrained()"),lAe.forEach(t),cUe=r(xk," class method."),xk.forEach(t),fUe=i(nt),b6=n(nt,"P",{});var $k=s(b6);mUe=r($k,"This class cannot be instantiated directly using "),Zae=n($k,"CODE",{});var iAe=s(Zae);gUe=r(iAe,"__init__()"),iAe.forEach(t),hUe=r($k," (throws an error)."),$k.forEach(t),pUe=i(nt),Lr=n(nt,"DIV",{class:!0});var st=s(Lr);T(v6.$$.fragment,st),_Ue=i(st),ene=n(st,"P",{});var dAe=s(ene);uUe=r(dAe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),dAe.forEach(t),bUe=i(st),qi=n(st,"P",{});var Pf=s(qi);vUe=r(Pf,"The configuration class to instantiate is selected based on the "),one=n(Pf,"CODE",{});var cAe=s(one);FUe=r(cAe,"model_type"),cAe.forEach(t),TUe=r(Pf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),rne=n(Pf,"CODE",{});var fAe=s(rne);MUe=r(fAe,"pretrained_model_name_or_path"),fAe.forEach(t),EUe=r(Pf,":"),Pf.forEach(t),CUe=i(st),A=n(st,"UL",{});var L=s(A);Vf=n(L,"LI",{});var z0=s(Vf);tne=n(z0,"STRONG",{});var mAe=s(tne);wUe=r(mAe,"albert"),mAe.forEach(t),AUe=r(z0," \u2014 "),ZS=n(z0,"A",{href:!0});var gAe=s(ZS);LUe=r(gAe,"AlbertConfig"),gAe.forEach(t),yUe=r(z0," (ALBERT model)"),z0.forEach(t),xUe=i(L),Xf=n(L,"LI",{});var W0=s(Xf);ane=n(W0,"STRONG",{});var hAe=s(ane);$Ue=r(hAe,"bart"),hAe.forEach(t),kUe=r(W0," \u2014 "),eR=n(W0,"A",{href:!0});var pAe=s(eR);SUe=r(pAe,"BartConfig"),pAe.forEach(t),RUe=r(W0," (BART model)"),W0.forEach(t),PUe=i(L),zf=n(L,"LI",{});var Q0=s(zf);nne=n(Q0,"STRONG",{});var _Ae=s(nne);BUe=r(_Ae,"beit"),_Ae.forEach(t),IUe=r(Q0," \u2014 "),oR=n(Q0,"A",{href:!0});var uAe=s(oR);NUe=r(uAe,"BeitConfig"),uAe.forEach(t),qUe=r(Q0," (BEiT model)"),Q0.forEach(t),jUe=i(L),Wf=n(L,"LI",{});var H0=s(Wf);sne=n(H0,"STRONG",{});var bAe=s(sne);DUe=r(bAe,"bert"),bAe.forEach(t),GUe=r(H0," \u2014 "),rR=n(H0,"A",{href:!0});var vAe=s(rR);OUe=r(vAe,"BertConfig"),vAe.forEach(t),VUe=r(H0," (BERT model)"),H0.forEach(t),XUe=i(L),Qf=n(L,"LI",{});var U0=s(Qf);lne=n(U0,"STRONG",{});var FAe=s(lne);zUe=r(FAe,"bert-generation"),FAe.forEach(t),WUe=r(U0," \u2014 "),tR=n(U0,"A",{href:!0});var TAe=s(tR);QUe=r(TAe,"BertGenerationConfig"),TAe.forEach(t),HUe=r(U0," (Bert Generation model)"),U0.forEach(t),UUe=i(L),Hf=n(L,"LI",{});var J0=s(Hf);ine=n(J0,"STRONG",{});var MAe=s(ine);JUe=r(MAe,"big_bird"),MAe.forEach(t),YUe=r(J0," \u2014 "),aR=n(J0,"A",{href:!0});var EAe=s(aR);KUe=r(EAe,"BigBirdConfig"),EAe.forEach(t),ZUe=r(J0," (BigBird model)"),J0.forEach(t),eJe=i(L),Uf=n(L,"LI",{});var Y0=s(Uf);dne=n(Y0,"STRONG",{});var CAe=s(dne);oJe=r(CAe,"bigbird_pegasus"),CAe.forEach(t),rJe=r(Y0," \u2014 "),nR=n(Y0,"A",{href:!0});var wAe=s(nR);tJe=r(wAe,"BigBirdPegasusConfig"),wAe.forEach(t),aJe=r(Y0," (BigBird-Pegasus model)"),Y0.forEach(t),nJe=i(L),Jf=n(L,"LI",{});var K0=s(Jf);cne=n(K0,"STRONG",{});var AAe=s(cne);sJe=r(AAe,"blenderbot"),AAe.forEach(t),lJe=r(K0," \u2014 "),sR=n(K0,"A",{href:!0});var LAe=s(sR);iJe=r(LAe,"BlenderbotConfig"),LAe.forEach(t),dJe=r(K0," (Blenderbot model)"),K0.forEach(t),cJe=i(L),Yf=n(L,"LI",{});var Z0=s(Yf);fne=n(Z0,"STRONG",{});var yAe=s(fne);fJe=r(yAe,"blenderbot-small"),yAe.forEach(t),mJe=r(Z0," \u2014 "),lR=n(Z0,"A",{href:!0});var xAe=s(lR);gJe=r(xAe,"BlenderbotSmallConfig"),xAe.forEach(t),hJe=r(Z0," (BlenderbotSmall model)"),Z0.forEach(t),pJe=i(L),Kf=n(L,"LI",{});var ew=s(Kf);mne=n(ew,"STRONG",{});var $Ae=s(mne);_Je=r($Ae,"bloom"),$Ae.forEach(t),uJe=r(ew," \u2014 "),iR=n(ew,"A",{href:!0});var kAe=s(iR);bJe=r(kAe,"BloomConfig"),kAe.forEach(t),vJe=r(ew," (BLOOM model)"),ew.forEach(t),FJe=i(L),Zf=n(L,"LI",{});var ow=s(Zf);gne=n(ow,"STRONG",{});var SAe=s(gne);TJe=r(SAe,"camembert"),SAe.forEach(t),MJe=r(ow," \u2014 "),dR=n(ow,"A",{href:!0});var RAe=s(dR);EJe=r(RAe,"CamembertConfig"),RAe.forEach(t),CJe=r(ow," (CamemBERT model)"),ow.forEach(t),wJe=i(L),em=n(L,"LI",{});var rw=s(em);hne=n(rw,"STRONG",{});var PAe=s(hne);AJe=r(PAe,"canine"),PAe.forEach(t),LJe=r(rw," \u2014 "),cR=n(rw,"A",{href:!0});var BAe=s(cR);yJe=r(BAe,"CanineConfig"),BAe.forEach(t),xJe=r(rw," (CANINE model)"),rw.forEach(t),$Je=i(L),om=n(L,"LI",{});var tw=s(om);pne=n(tw,"STRONG",{});var IAe=s(pne);kJe=r(IAe,"clip"),IAe.forEach(t),SJe=r(tw," \u2014 "),fR=n(tw,"A",{href:!0});var NAe=s(fR);RJe=r(NAe,"CLIPConfig"),NAe.forEach(t),PJe=r(tw," (CLIP model)"),tw.forEach(t),BJe=i(L),rm=n(L,"LI",{});var aw=s(rm);_ne=n(aw,"STRONG",{});var qAe=s(_ne);IJe=r(qAe,"codegen"),qAe.forEach(t),NJe=r(aw," \u2014 "),mR=n(aw,"A",{href:!0});var jAe=s(mR);qJe=r(jAe,"CodeGenConfig"),jAe.forEach(t),jJe=r(aw," (CodeGen model)"),aw.forEach(t),DJe=i(L),tm=n(L,"LI",{});var nw=s(tm);une=n(nw,"STRONG",{});var DAe=s(une);GJe=r(DAe,"convbert"),DAe.forEach(t),OJe=r(nw," \u2014 "),gR=n(nw,"A",{href:!0});var GAe=s(gR);VJe=r(GAe,"ConvBertConfig"),GAe.forEach(t),XJe=r(nw," (ConvBERT model)"),nw.forEach(t),zJe=i(L),am=n(L,"LI",{});var sw=s(am);bne=n(sw,"STRONG",{});var OAe=s(bne);WJe=r(OAe,"convnext"),OAe.forEach(t),QJe=r(sw," \u2014 "),hR=n(sw,"A",{href:!0});var VAe=s(hR);HJe=r(VAe,"ConvNextConfig"),VAe.forEach(t),UJe=r(sw," (ConvNeXT model)"),sw.forEach(t),JJe=i(L),nm=n(L,"LI",{});var lw=s(nm);vne=n(lw,"STRONG",{});var XAe=s(vne);YJe=r(XAe,"ctrl"),XAe.forEach(t),KJe=r(lw," \u2014 "),pR=n(lw,"A",{href:!0});var zAe=s(pR);ZJe=r(zAe,"CTRLConfig"),zAe.forEach(t),eYe=r(lw," (CTRL model)"),lw.forEach(t),oYe=i(L),sm=n(L,"LI",{});var iw=s(sm);Fne=n(iw,"STRONG",{});var WAe=s(Fne);rYe=r(WAe,"cvt"),WAe.forEach(t),tYe=r(iw," \u2014 "),_R=n(iw,"A",{href:!0});var QAe=s(_R);aYe=r(QAe,"CvtConfig"),QAe.forEach(t),nYe=r(iw," (CvT model)"),iw.forEach(t),sYe=i(L),lm=n(L,"LI",{});var dw=s(lm);Tne=n(dw,"STRONG",{});var HAe=s(Tne);lYe=r(HAe,"data2vec-audio"),HAe.forEach(t),iYe=r(dw," \u2014 "),uR=n(dw,"A",{href:!0});var UAe=s(uR);dYe=r(UAe,"Data2VecAudioConfig"),UAe.forEach(t),cYe=r(dw," (Data2VecAudio model)"),dw.forEach(t),fYe=i(L),im=n(L,"LI",{});var cw=s(im);Mne=n(cw,"STRONG",{});var JAe=s(Mne);mYe=r(JAe,"data2vec-text"),JAe.forEach(t),gYe=r(cw," \u2014 "),bR=n(cw,"A",{href:!0});var YAe=s(bR);hYe=r(YAe,"Data2VecTextConfig"),YAe.forEach(t),pYe=r(cw," (Data2VecText model)"),cw.forEach(t),_Ye=i(L),dm=n(L,"LI",{});var fw=s(dm);Ene=n(fw,"STRONG",{});var KAe=s(Ene);uYe=r(KAe,"data2vec-vision"),KAe.forEach(t),bYe=r(fw," \u2014 "),vR=n(fw,"A",{href:!0});var ZAe=s(vR);vYe=r(ZAe,"Data2VecVisionConfig"),ZAe.forEach(t),FYe=r(fw," (Data2VecVision model)"),fw.forEach(t),TYe=i(L),cm=n(L,"LI",{});var mw=s(cm);Cne=n(mw,"STRONG",{});var e6e=s(Cne);MYe=r(e6e,"deberta"),e6e.forEach(t),EYe=r(mw," \u2014 "),FR=n(mw,"A",{href:!0});var o6e=s(FR);CYe=r(o6e,"DebertaConfig"),o6e.forEach(t),wYe=r(mw," (DeBERTa model)"),mw.forEach(t),AYe=i(L),fm=n(L,"LI",{});var gw=s(fm);wne=n(gw,"STRONG",{});var r6e=s(wne);LYe=r(r6e,"deberta-v2"),r6e.forEach(t),yYe=r(gw," \u2014 "),TR=n(gw,"A",{href:!0});var t6e=s(TR);xYe=r(t6e,"DebertaV2Config"),t6e.forEach(t),$Ye=r(gw," (DeBERTa-v2 model)"),gw.forEach(t),kYe=i(L),mm=n(L,"LI",{});var hw=s(mm);Ane=n(hw,"STRONG",{});var Iat=s(Ane);SYe=r(Iat,"decision_transformer"),Iat.forEach(t),RYe=r(hw," \u2014 "),MR=n(hw,"A",{href:!0});var Nat=s(MR);PYe=r(Nat,"DecisionTransformerConfig"),Nat.forEach(t),BYe=r(hw," (Decision Transformer model)"),hw.forEach(t),IYe=i(L),gm=n(L,"LI",{});var a6e=s(gm);Lne=n(a6e,"STRONG",{});var qat=s(Lne);NYe=r(qat,"deit"),qat.forEach(t),qYe=r(a6e," \u2014 "),ER=n(a6e,"A",{href:!0});var jat=s(ER);jYe=r(jat,"DeiTConfig"),jat.forEach(t),DYe=r(a6e," (DeiT model)"),a6e.forEach(t),GYe=i(L),hm=n(L,"LI",{});var n6e=s(hm);yne=n(n6e,"STRONG",{});var Dat=s(yne);OYe=r(Dat,"detr"),Dat.forEach(t),VYe=r(n6e," \u2014 "),CR=n(n6e,"A",{href:!0});var Gat=s(CR);XYe=r(Gat,"DetrConfig"),Gat.forEach(t),zYe=r(n6e," (DETR model)"),n6e.forEach(t),WYe=i(L),pm=n(L,"LI",{});var s6e=s(pm);xne=n(s6e,"STRONG",{});var Oat=s(xne);QYe=r(Oat,"distilbert"),Oat.forEach(t),HYe=r(s6e," \u2014 "),wR=n(s6e,"A",{href:!0});var Vat=s(wR);UYe=r(Vat,"DistilBertConfig"),Vat.forEach(t),JYe=r(s6e," (DistilBERT model)"),s6e.forEach(t),YYe=i(L),_m=n(L,"LI",{});var l6e=s(_m);$ne=n(l6e,"STRONG",{});var Xat=s($ne);KYe=r(Xat,"dpr"),Xat.forEach(t),ZYe=r(l6e," \u2014 "),AR=n(l6e,"A",{href:!0});var zat=s(AR);eKe=r(zat,"DPRConfig"),zat.forEach(t),oKe=r(l6e," (DPR model)"),l6e.forEach(t),rKe=i(L),um=n(L,"LI",{});var i6e=s(um);kne=n(i6e,"STRONG",{});var Wat=s(kne);tKe=r(Wat,"dpt"),Wat.forEach(t),aKe=r(i6e," \u2014 "),LR=n(i6e,"A",{href:!0});var Qat=s(LR);nKe=r(Qat,"DPTConfig"),Qat.forEach(t),sKe=r(i6e," (DPT model)"),i6e.forEach(t),lKe=i(L),bm=n(L,"LI",{});var d6e=s(bm);Sne=n(d6e,"STRONG",{});var Hat=s(Sne);iKe=r(Hat,"electra"),Hat.forEach(t),dKe=r(d6e," \u2014 "),yR=n(d6e,"A",{href:!0});var Uat=s(yR);cKe=r(Uat,"ElectraConfig"),Uat.forEach(t),fKe=r(d6e," (ELECTRA model)"),d6e.forEach(t),mKe=i(L),vm=n(L,"LI",{});var c6e=s(vm);Rne=n(c6e,"STRONG",{});var Jat=s(Rne);gKe=r(Jat,"encoder-decoder"),Jat.forEach(t),hKe=r(c6e," \u2014 "),xR=n(c6e,"A",{href:!0});var Yat=s(xR);pKe=r(Yat,"EncoderDecoderConfig"),Yat.forEach(t),_Ke=r(c6e," (Encoder decoder model)"),c6e.forEach(t),uKe=i(L),Fm=n(L,"LI",{});var f6e=s(Fm);Pne=n(f6e,"STRONG",{});var Kat=s(Pne);bKe=r(Kat,"flaubert"),Kat.forEach(t),vKe=r(f6e," \u2014 "),$R=n(f6e,"A",{href:!0});var Zat=s($R);FKe=r(Zat,"FlaubertConfig"),Zat.forEach(t),TKe=r(f6e," (FlauBERT model)"),f6e.forEach(t),MKe=i(L),Tm=n(L,"LI",{});var m6e=s(Tm);Bne=n(m6e,"STRONG",{});var ent=s(Bne);EKe=r(ent,"flava"),ent.forEach(t),CKe=r(m6e," \u2014 "),kR=n(m6e,"A",{href:!0});var ont=s(kR);wKe=r(ont,"FlavaConfig"),ont.forEach(t),AKe=r(m6e," (FLAVA model)"),m6e.forEach(t),LKe=i(L),Mm=n(L,"LI",{});var g6e=s(Mm);Ine=n(g6e,"STRONG",{});var rnt=s(Ine);yKe=r(rnt,"fnet"),rnt.forEach(t),xKe=r(g6e," \u2014 "),SR=n(g6e,"A",{href:!0});var tnt=s(SR);$Ke=r(tnt,"FNetConfig"),tnt.forEach(t),kKe=r(g6e," (FNet model)"),g6e.forEach(t),SKe=i(L),Em=n(L,"LI",{});var h6e=s(Em);Nne=n(h6e,"STRONG",{});var ant=s(Nne);RKe=r(ant,"fsmt"),ant.forEach(t),PKe=r(h6e," \u2014 "),RR=n(h6e,"A",{href:!0});var nnt=s(RR);BKe=r(nnt,"FSMTConfig"),nnt.forEach(t),IKe=r(h6e," (FairSeq Machine-Translation model)"),h6e.forEach(t),NKe=i(L),Cm=n(L,"LI",{});var p6e=s(Cm);qne=n(p6e,"STRONG",{});var snt=s(qne);qKe=r(snt,"funnel"),snt.forEach(t),jKe=r(p6e," \u2014 "),PR=n(p6e,"A",{href:!0});var lnt=s(PR);DKe=r(lnt,"FunnelConfig"),lnt.forEach(t),GKe=r(p6e," (Funnel Transformer model)"),p6e.forEach(t),OKe=i(L),wm=n(L,"LI",{});var _6e=s(wm);jne=n(_6e,"STRONG",{});var int=s(jne);VKe=r(int,"glpn"),int.forEach(t),XKe=r(_6e," \u2014 "),BR=n(_6e,"A",{href:!0});var dnt=s(BR);zKe=r(dnt,"GLPNConfig"),dnt.forEach(t),WKe=r(_6e," (GLPN model)"),_6e.forEach(t),QKe=i(L),Am=n(L,"LI",{});var u6e=s(Am);Dne=n(u6e,"STRONG",{});var cnt=s(Dne);HKe=r(cnt,"gpt2"),cnt.forEach(t),UKe=r(u6e," \u2014 "),IR=n(u6e,"A",{href:!0});var fnt=s(IR);JKe=r(fnt,"GPT2Config"),fnt.forEach(t),YKe=r(u6e," (OpenAI GPT-2 model)"),u6e.forEach(t),KKe=i(L),Lm=n(L,"LI",{});var b6e=s(Lm);Gne=n(b6e,"STRONG",{});var mnt=s(Gne);ZKe=r(mnt,"gpt_neo"),mnt.forEach(t),eZe=r(b6e," \u2014 "),NR=n(b6e,"A",{href:!0});var gnt=s(NR);oZe=r(gnt,"GPTNeoConfig"),gnt.forEach(t),rZe=r(b6e," (GPT Neo model)"),b6e.forEach(t),tZe=i(L),ym=n(L,"LI",{});var v6e=s(ym);One=n(v6e,"STRONG",{});var hnt=s(One);aZe=r(hnt,"gpt_neox"),hnt.forEach(t),nZe=r(v6e," \u2014 "),qR=n(v6e,"A",{href:!0});var pnt=s(qR);sZe=r(pnt,"GPTNeoXConfig"),pnt.forEach(t),lZe=r(v6e," (GPT NeoX model)"),v6e.forEach(t),iZe=i(L),xm=n(L,"LI",{});var F6e=s(xm);Vne=n(F6e,"STRONG",{});var _nt=s(Vne);dZe=r(_nt,"gptj"),_nt.forEach(t),cZe=r(F6e," \u2014 "),jR=n(F6e,"A",{href:!0});var unt=s(jR);fZe=r(unt,"GPTJConfig"),unt.forEach(t),mZe=r(F6e," (GPT-J model)"),F6e.forEach(t),gZe=i(L),$m=n(L,"LI",{});var T6e=s($m);Xne=n(T6e,"STRONG",{});var bnt=s(Xne);hZe=r(bnt,"groupvit"),bnt.forEach(t),pZe=r(T6e," \u2014 "),DR=n(T6e,"A",{href:!0});var vnt=s(DR);_Ze=r(vnt,"GroupViTConfig"),vnt.forEach(t),uZe=r(T6e," (GroupViT model)"),T6e.forEach(t),bZe=i(L),km=n(L,"LI",{});var M6e=s(km);zne=n(M6e,"STRONG",{});var Fnt=s(zne);vZe=r(Fnt,"hubert"),Fnt.forEach(t),FZe=r(M6e," \u2014 "),GR=n(M6e,"A",{href:!0});var Tnt=s(GR);TZe=r(Tnt,"HubertConfig"),Tnt.forEach(t),MZe=r(M6e," (Hubert model)"),M6e.forEach(t),EZe=i(L),Sm=n(L,"LI",{});var E6e=s(Sm);Wne=n(E6e,"STRONG",{});var Mnt=s(Wne);CZe=r(Mnt,"ibert"),Mnt.forEach(t),wZe=r(E6e," \u2014 "),OR=n(E6e,"A",{href:!0});var Ent=s(OR);AZe=r(Ent,"IBertConfig"),Ent.forEach(t),LZe=r(E6e," (I-BERT model)"),E6e.forEach(t),yZe=i(L),Rm=n(L,"LI",{});var C6e=s(Rm);Qne=n(C6e,"STRONG",{});var Cnt=s(Qne);xZe=r(Cnt,"imagegpt"),Cnt.forEach(t),$Ze=r(C6e," \u2014 "),VR=n(C6e,"A",{href:!0});var wnt=s(VR);kZe=r(wnt,"ImageGPTConfig"),wnt.forEach(t),SZe=r(C6e," (ImageGPT model)"),C6e.forEach(t),RZe=i(L),Pm=n(L,"LI",{});var w6e=s(Pm);Hne=n(w6e,"STRONG",{});var Ant=s(Hne);PZe=r(Ant,"layoutlm"),Ant.forEach(t),BZe=r(w6e," \u2014 "),XR=n(w6e,"A",{href:!0});var Lnt=s(XR);IZe=r(Lnt,"LayoutLMConfig"),Lnt.forEach(t),NZe=r(w6e," (LayoutLM model)"),w6e.forEach(t),qZe=i(L),Bm=n(L,"LI",{});var A6e=s(Bm);Une=n(A6e,"STRONG",{});var ynt=s(Une);jZe=r(ynt,"layoutlmv2"),ynt.forEach(t),DZe=r(A6e," \u2014 "),zR=n(A6e,"A",{href:!0});var xnt=s(zR);GZe=r(xnt,"LayoutLMv2Config"),xnt.forEach(t),OZe=r(A6e," (LayoutLMv2 model)"),A6e.forEach(t),VZe=i(L),Im=n(L,"LI",{});var L6e=s(Im);Jne=n(L6e,"STRONG",{});var $nt=s(Jne);XZe=r($nt,"layoutlmv3"),$nt.forEach(t),zZe=r(L6e," \u2014 "),WR=n(L6e,"A",{href:!0});var knt=s(WR);WZe=r(knt,"LayoutLMv3Config"),knt.forEach(t),QZe=r(L6e," (LayoutLMv3 model)"),L6e.forEach(t),HZe=i(L),Nm=n(L,"LI",{});var y6e=s(Nm);Yne=n(y6e,"STRONG",{});var Snt=s(Yne);UZe=r(Snt,"led"),Snt.forEach(t),JZe=r(y6e," \u2014 "),QR=n(y6e,"A",{href:!0});var Rnt=s(QR);YZe=r(Rnt,"LEDConfig"),Rnt.forEach(t),KZe=r(y6e," (LED model)"),y6e.forEach(t),ZZe=i(L),qm=n(L,"LI",{});var x6e=s(qm);Kne=n(x6e,"STRONG",{});var Pnt=s(Kne);eeo=r(Pnt,"levit"),Pnt.forEach(t),oeo=r(x6e," \u2014 "),HR=n(x6e,"A",{href:!0});var Bnt=s(HR);reo=r(Bnt,"LevitConfig"),Bnt.forEach(t),teo=r(x6e," (LeViT model)"),x6e.forEach(t),aeo=i(L),jm=n(L,"LI",{});var $6e=s(jm);Zne=n($6e,"STRONG",{});var Int=s(Zne);neo=r(Int,"longformer"),Int.forEach(t),seo=r($6e," \u2014 "),UR=n($6e,"A",{href:!0});var Nnt=s(UR);leo=r(Nnt,"LongformerConfig"),Nnt.forEach(t),ieo=r($6e," (Longformer model)"),$6e.forEach(t),deo=i(L),Dm=n(L,"LI",{});var k6e=s(Dm);ese=n(k6e,"STRONG",{});var qnt=s(ese);ceo=r(qnt,"longt5"),qnt.forEach(t),feo=r(k6e," \u2014 "),JR=n(k6e,"A",{href:!0});var jnt=s(JR);meo=r(jnt,"LongT5Config"),jnt.forEach(t),geo=r(k6e," (LongT5 model)"),k6e.forEach(t),heo=i(L),Gm=n(L,"LI",{});var S6e=s(Gm);ose=n(S6e,"STRONG",{});var Dnt=s(ose);peo=r(Dnt,"luke"),Dnt.forEach(t),_eo=r(S6e," \u2014 "),YR=n(S6e,"A",{href:!0});var Gnt=s(YR);ueo=r(Gnt,"LukeConfig"),Gnt.forEach(t),beo=r(S6e," (LUKE model)"),S6e.forEach(t),veo=i(L),Om=n(L,"LI",{});var R6e=s(Om);rse=n(R6e,"STRONG",{});var Ont=s(rse);Feo=r(Ont,"lxmert"),Ont.forEach(t),Teo=r(R6e," \u2014 "),KR=n(R6e,"A",{href:!0});var Vnt=s(KR);Meo=r(Vnt,"LxmertConfig"),Vnt.forEach(t),Eeo=r(R6e," (LXMERT model)"),R6e.forEach(t),Ceo=i(L),Vm=n(L,"LI",{});var P6e=s(Vm);tse=n(P6e,"STRONG",{});var Xnt=s(tse);weo=r(Xnt,"m2m_100"),Xnt.forEach(t),Aeo=r(P6e," \u2014 "),ZR=n(P6e,"A",{href:!0});var znt=s(ZR);Leo=r(znt,"M2M100Config"),znt.forEach(t),yeo=r(P6e," (M2M100 model)"),P6e.forEach(t),xeo=i(L),Xm=n(L,"LI",{});var B6e=s(Xm);ase=n(B6e,"STRONG",{});var Wnt=s(ase);$eo=r(Wnt,"marian"),Wnt.forEach(t),keo=r(B6e," \u2014 "),eP=n(B6e,"A",{href:!0});var Qnt=s(eP);Seo=r(Qnt,"MarianConfig"),Qnt.forEach(t),Reo=r(B6e," (Marian model)"),B6e.forEach(t),Peo=i(L),zm=n(L,"LI",{});var I6e=s(zm);nse=n(I6e,"STRONG",{});var Hnt=s(nse);Beo=r(Hnt,"maskformer"),Hnt.forEach(t),Ieo=r(I6e," \u2014 "),oP=n(I6e,"A",{href:!0});var Unt=s(oP);Neo=r(Unt,"MaskFormerConfig"),Unt.forEach(t),qeo=r(I6e," (MaskFormer model)"),I6e.forEach(t),jeo=i(L),Wm=n(L,"LI",{});var N6e=s(Wm);sse=n(N6e,"STRONG",{});var Jnt=s(sse);Deo=r(Jnt,"mbart"),Jnt.forEach(t),Geo=r(N6e," \u2014 "),rP=n(N6e,"A",{href:!0});var Ynt=s(rP);Oeo=r(Ynt,"MBartConfig"),Ynt.forEach(t),Veo=r(N6e," (mBART model)"),N6e.forEach(t),Xeo=i(L),Qm=n(L,"LI",{});var q6e=s(Qm);lse=n(q6e,"STRONG",{});var Knt=s(lse);zeo=r(Knt,"mctct"),Knt.forEach(t),Weo=r(q6e," \u2014 "),tP=n(q6e,"A",{href:!0});var Znt=s(tP);Qeo=r(Znt,"MCTCTConfig"),Znt.forEach(t),Heo=r(q6e," (M-CTC-T model)"),q6e.forEach(t),Ueo=i(L),Hm=n(L,"LI",{});var j6e=s(Hm);ise=n(j6e,"STRONG",{});var est=s(ise);Jeo=r(est,"megatron-bert"),est.forEach(t),Yeo=r(j6e," \u2014 "),aP=n(j6e,"A",{href:!0});var ost=s(aP);Keo=r(ost,"MegatronBertConfig"),ost.forEach(t),Zeo=r(j6e," (Megatron-BERT model)"),j6e.forEach(t),eoo=i(L),Um=n(L,"LI",{});var D6e=s(Um);dse=n(D6e,"STRONG",{});var rst=s(dse);ooo=r(rst,"mobilebert"),rst.forEach(t),roo=r(D6e," \u2014 "),nP=n(D6e,"A",{href:!0});var tst=s(nP);too=r(tst,"MobileBertConfig"),tst.forEach(t),aoo=r(D6e," (MobileBERT model)"),D6e.forEach(t),noo=i(L),Jm=n(L,"LI",{});var G6e=s(Jm);cse=n(G6e,"STRONG",{});var ast=s(cse);soo=r(ast,"mobilevit"),ast.forEach(t),loo=r(G6e," \u2014 "),sP=n(G6e,"A",{href:!0});var nst=s(sP);ioo=r(nst,"MobileViTConfig"),nst.forEach(t),doo=r(G6e," (MobileViT model)"),G6e.forEach(t),coo=i(L),Ym=n(L,"LI",{});var O6e=s(Ym);fse=n(O6e,"STRONG",{});var sst=s(fse);foo=r(sst,"mpnet"),sst.forEach(t),moo=r(O6e," \u2014 "),lP=n(O6e,"A",{href:!0});var lst=s(lP);goo=r(lst,"MPNetConfig"),lst.forEach(t),hoo=r(O6e," (MPNet model)"),O6e.forEach(t),poo=i(L),Km=n(L,"LI",{});var V6e=s(Km);mse=n(V6e,"STRONG",{});var ist=s(mse);_oo=r(ist,"mt5"),ist.forEach(t),uoo=r(V6e," \u2014 "),iP=n(V6e,"A",{href:!0});var dst=s(iP);boo=r(dst,"MT5Config"),dst.forEach(t),voo=r(V6e," (MT5 model)"),V6e.forEach(t),Foo=i(L),Zm=n(L,"LI",{});var X6e=s(Zm);gse=n(X6e,"STRONG",{});var cst=s(gse);Too=r(cst,"mvp"),cst.forEach(t),Moo=r(X6e," \u2014 "),dP=n(X6e,"A",{href:!0});var fst=s(dP);Eoo=r(fst,"MvpConfig"),fst.forEach(t),Coo=r(X6e," (MVP model)"),X6e.forEach(t),woo=i(L),eg=n(L,"LI",{});var z6e=s(eg);hse=n(z6e,"STRONG",{});var mst=s(hse);Aoo=r(mst,"nezha"),mst.forEach(t),Loo=r(z6e," \u2014 "),cP=n(z6e,"A",{href:!0});var gst=s(cP);yoo=r(gst,"NezhaConfig"),gst.forEach(t),xoo=r(z6e," (Nezha model)"),z6e.forEach(t),$oo=i(L),og=n(L,"LI",{});var W6e=s(og);pse=n(W6e,"STRONG",{});var hst=s(pse);koo=r(hst,"nystromformer"),hst.forEach(t),Soo=r(W6e," \u2014 "),fP=n(W6e,"A",{href:!0});var pst=s(fP);Roo=r(pst,"NystromformerConfig"),pst.forEach(t),Poo=r(W6e," (Nystr\xF6mformer model)"),W6e.forEach(t),Boo=i(L),rg=n(L,"LI",{});var Q6e=s(rg);_se=n(Q6e,"STRONG",{});var _st=s(_se);Ioo=r(_st,"openai-gpt"),_st.forEach(t),Noo=r(Q6e," \u2014 "),mP=n(Q6e,"A",{href:!0});var ust=s(mP);qoo=r(ust,"OpenAIGPTConfig"),ust.forEach(t),joo=r(Q6e," (OpenAI GPT model)"),Q6e.forEach(t),Doo=i(L),tg=n(L,"LI",{});var H6e=s(tg);use=n(H6e,"STRONG",{});var bst=s(use);Goo=r(bst,"opt"),bst.forEach(t),Ooo=r(H6e," \u2014 "),gP=n(H6e,"A",{href:!0});var vst=s(gP);Voo=r(vst,"OPTConfig"),vst.forEach(t),Xoo=r(H6e," (OPT model)"),H6e.forEach(t),zoo=i(L),ag=n(L,"LI",{});var U6e=s(ag);bse=n(U6e,"STRONG",{});var Fst=s(bse);Woo=r(Fst,"owlvit"),Fst.forEach(t),Qoo=r(U6e," \u2014 "),hP=n(U6e,"A",{href:!0});var Tst=s(hP);Hoo=r(Tst,"OwlViTConfig"),Tst.forEach(t),Uoo=r(U6e," (OWL-ViT model)"),U6e.forEach(t),Joo=i(L),ng=n(L,"LI",{});var J6e=s(ng);vse=n(J6e,"STRONG",{});var Mst=s(vse);Yoo=r(Mst,"pegasus"),Mst.forEach(t),Koo=r(J6e," \u2014 "),pP=n(J6e,"A",{href:!0});var Est=s(pP);Zoo=r(Est,"PegasusConfig"),Est.forEach(t),ero=r(J6e," (Pegasus model)"),J6e.forEach(t),oro=i(L),sg=n(L,"LI",{});var Y6e=s(sg);Fse=n(Y6e,"STRONG",{});var Cst=s(Fse);rro=r(Cst,"perceiver"),Cst.forEach(t),tro=r(Y6e," \u2014 "),_P=n(Y6e,"A",{href:!0});var wst=s(_P);aro=r(wst,"PerceiverConfig"),wst.forEach(t),nro=r(Y6e," (Perceiver model)"),Y6e.forEach(t),sro=i(L),lg=n(L,"LI",{});var K6e=s(lg);Tse=n(K6e,"STRONG",{});var Ast=s(Tse);lro=r(Ast,"plbart"),Ast.forEach(t),iro=r(K6e," \u2014 "),uP=n(K6e,"A",{href:!0});var Lst=s(uP);dro=r(Lst,"PLBartConfig"),Lst.forEach(t),cro=r(K6e," (PLBart model)"),K6e.forEach(t),fro=i(L),ig=n(L,"LI",{});var Z6e=s(ig);Mse=n(Z6e,"STRONG",{});var yst=s(Mse);mro=r(yst,"poolformer"),yst.forEach(t),gro=r(Z6e," \u2014 "),bP=n(Z6e,"A",{href:!0});var xst=s(bP);hro=r(xst,"PoolFormerConfig"),xst.forEach(t),pro=r(Z6e," (PoolFormer model)"),Z6e.forEach(t),_ro=i(L),dg=n(L,"LI",{});var eLe=s(dg);Ese=n(eLe,"STRONG",{});var $st=s(Ese);uro=r($st,"prophetnet"),$st.forEach(t),bro=r(eLe," \u2014 "),vP=n(eLe,"A",{href:!0});var kst=s(vP);vro=r(kst,"ProphetNetConfig"),kst.forEach(t),Fro=r(eLe," (ProphetNet model)"),eLe.forEach(t),Tro=i(L),cg=n(L,"LI",{});var oLe=s(cg);Cse=n(oLe,"STRONG",{});var Sst=s(Cse);Mro=r(Sst,"qdqbert"),Sst.forEach(t),Ero=r(oLe," \u2014 "),FP=n(oLe,"A",{href:!0});var Rst=s(FP);Cro=r(Rst,"QDQBertConfig"),Rst.forEach(t),wro=r(oLe," (QDQBert model)"),oLe.forEach(t),Aro=i(L),fg=n(L,"LI",{});var rLe=s(fg);wse=n(rLe,"STRONG",{});var Pst=s(wse);Lro=r(Pst,"rag"),Pst.forEach(t),yro=r(rLe," \u2014 "),TP=n(rLe,"A",{href:!0});var Bst=s(TP);xro=r(Bst,"RagConfig"),Bst.forEach(t),$ro=r(rLe," (RAG model)"),rLe.forEach(t),kro=i(L),mg=n(L,"LI",{});var tLe=s(mg);Ase=n(tLe,"STRONG",{});var Ist=s(Ase);Sro=r(Ist,"realm"),Ist.forEach(t),Rro=r(tLe," \u2014 "),MP=n(tLe,"A",{href:!0});var Nst=s(MP);Pro=r(Nst,"RealmConfig"),Nst.forEach(t),Bro=r(tLe," (REALM model)"),tLe.forEach(t),Iro=i(L),gg=n(L,"LI",{});var aLe=s(gg);Lse=n(aLe,"STRONG",{});var qst=s(Lse);Nro=r(qst,"reformer"),qst.forEach(t),qro=r(aLe," \u2014 "),EP=n(aLe,"A",{href:!0});var jst=s(EP);jro=r(jst,"ReformerConfig"),jst.forEach(t),Dro=r(aLe," (Reformer model)"),aLe.forEach(t),Gro=i(L),hg=n(L,"LI",{});var nLe=s(hg);yse=n(nLe,"STRONG",{});var Dst=s(yse);Oro=r(Dst,"regnet"),Dst.forEach(t),Vro=r(nLe," \u2014 "),CP=n(nLe,"A",{href:!0});var Gst=s(CP);Xro=r(Gst,"RegNetConfig"),Gst.forEach(t),zro=r(nLe," (RegNet model)"),nLe.forEach(t),Wro=i(L),pg=n(L,"LI",{});var sLe=s(pg);xse=n(sLe,"STRONG",{});var Ost=s(xse);Qro=r(Ost,"rembert"),Ost.forEach(t),Hro=r(sLe," \u2014 "),wP=n(sLe,"A",{href:!0});var Vst=s(wP);Uro=r(Vst,"RemBertConfig"),Vst.forEach(t),Jro=r(sLe," (RemBERT model)"),sLe.forEach(t),Yro=i(L),_g=n(L,"LI",{});var lLe=s(_g);$se=n(lLe,"STRONG",{});var Xst=s($se);Kro=r(Xst,"resnet"),Xst.forEach(t),Zro=r(lLe," \u2014 "),AP=n(lLe,"A",{href:!0});var zst=s(AP);eto=r(zst,"ResNetConfig"),zst.forEach(t),oto=r(lLe," (ResNet model)"),lLe.forEach(t),rto=i(L),ug=n(L,"LI",{});var iLe=s(ug);kse=n(iLe,"STRONG",{});var Wst=s(kse);tto=r(Wst,"retribert"),Wst.forEach(t),ato=r(iLe," \u2014 "),LP=n(iLe,"A",{href:!0});var Qst=s(LP);nto=r(Qst,"RetriBertConfig"),Qst.forEach(t),sto=r(iLe," (RetriBERT model)"),iLe.forEach(t),lto=i(L),bg=n(L,"LI",{});var dLe=s(bg);Sse=n(dLe,"STRONG",{});var Hst=s(Sse);ito=r(Hst,"roberta"),Hst.forEach(t),dto=r(dLe," \u2014 "),yP=n(dLe,"A",{href:!0});var Ust=s(yP);cto=r(Ust,"RobertaConfig"),Ust.forEach(t),fto=r(dLe," (RoBERTa model)"),dLe.forEach(t),mto=i(L),vg=n(L,"LI",{});var cLe=s(vg);Rse=n(cLe,"STRONG",{});var Jst=s(Rse);gto=r(Jst,"roformer"),Jst.forEach(t),hto=r(cLe," \u2014 "),xP=n(cLe,"A",{href:!0});var Yst=s(xP);pto=r(Yst,"RoFormerConfig"),Yst.forEach(t),_to=r(cLe," (RoFormer model)"),cLe.forEach(t),uto=i(L),Fg=n(L,"LI",{});var fLe=s(Fg);Pse=n(fLe,"STRONG",{});var Kst=s(Pse);bto=r(Kst,"segformer"),Kst.forEach(t),vto=r(fLe," \u2014 "),$P=n(fLe,"A",{href:!0});var Zst=s($P);Fto=r(Zst,"SegformerConfig"),Zst.forEach(t),Tto=r(fLe," (SegFormer model)"),fLe.forEach(t),Mto=i(L),Tg=n(L,"LI",{});var mLe=s(Tg);Bse=n(mLe,"STRONG",{});var elt=s(Bse);Eto=r(elt,"sew"),elt.forEach(t),Cto=r(mLe," \u2014 "),kP=n(mLe,"A",{href:!0});var olt=s(kP);wto=r(olt,"SEWConfig"),olt.forEach(t),Ato=r(mLe," (SEW model)"),mLe.forEach(t),Lto=i(L),Mg=n(L,"LI",{});var gLe=s(Mg);Ise=n(gLe,"STRONG",{});var rlt=s(Ise);yto=r(rlt,"sew-d"),rlt.forEach(t),xto=r(gLe," \u2014 "),SP=n(gLe,"A",{href:!0});var tlt=s(SP);$to=r(tlt,"SEWDConfig"),tlt.forEach(t),kto=r(gLe," (SEW-D model)"),gLe.forEach(t),Sto=i(L),Eg=n(L,"LI",{});var hLe=s(Eg);Nse=n(hLe,"STRONG",{});var alt=s(Nse);Rto=r(alt,"speech-encoder-decoder"),alt.forEach(t),Pto=r(hLe," \u2014 "),RP=n(hLe,"A",{href:!0});var nlt=s(RP);Bto=r(nlt,"SpeechEncoderDecoderConfig"),nlt.forEach(t),Ito=r(hLe," (Speech Encoder decoder model)"),hLe.forEach(t),Nto=i(L),Cg=n(L,"LI",{});var pLe=s(Cg);qse=n(pLe,"STRONG",{});var slt=s(qse);qto=r(slt,"speech_to_text"),slt.forEach(t),jto=r(pLe," \u2014 "),PP=n(pLe,"A",{href:!0});var llt=s(PP);Dto=r(llt,"Speech2TextConfig"),llt.forEach(t),Gto=r(pLe," (Speech2Text model)"),pLe.forEach(t),Oto=i(L),wg=n(L,"LI",{});var _Le=s(wg);jse=n(_Le,"STRONG",{});var ilt=s(jse);Vto=r(ilt,"speech_to_text_2"),ilt.forEach(t),Xto=r(_Le," \u2014 "),BP=n(_Le,"A",{href:!0});var dlt=s(BP);zto=r(dlt,"Speech2Text2Config"),dlt.forEach(t),Wto=r(_Le," (Speech2Text2 model)"),_Le.forEach(t),Qto=i(L),Ag=n(L,"LI",{});var uLe=s(Ag);Dse=n(uLe,"STRONG",{});var clt=s(Dse);Hto=r(clt,"splinter"),clt.forEach(t),Uto=r(uLe," \u2014 "),IP=n(uLe,"A",{href:!0});var flt=s(IP);Jto=r(flt,"SplinterConfig"),flt.forEach(t),Yto=r(uLe," (Splinter model)"),uLe.forEach(t),Kto=i(L),Lg=n(L,"LI",{});var bLe=s(Lg);Gse=n(bLe,"STRONG",{});var mlt=s(Gse);Zto=r(mlt,"squeezebert"),mlt.forEach(t),eao=r(bLe," \u2014 "),NP=n(bLe,"A",{href:!0});var glt=s(NP);oao=r(glt,"SqueezeBertConfig"),glt.forEach(t),rao=r(bLe," (SqueezeBERT model)"),bLe.forEach(t),tao=i(L),yg=n(L,"LI",{});var vLe=s(yg);Ose=n(vLe,"STRONG",{});var hlt=s(Ose);aao=r(hlt,"swin"),hlt.forEach(t),nao=r(vLe," \u2014 "),qP=n(vLe,"A",{href:!0});var plt=s(qP);sao=r(plt,"SwinConfig"),plt.forEach(t),lao=r(vLe," (Swin Transformer model)"),vLe.forEach(t),iao=i(L),xg=n(L,"LI",{});var FLe=s(xg);Vse=n(FLe,"STRONG",{});var _lt=s(Vse);dao=r(_lt,"t5"),_lt.forEach(t),cao=r(FLe," \u2014 "),jP=n(FLe,"A",{href:!0});var ult=s(jP);fao=r(ult,"T5Config"),ult.forEach(t),mao=r(FLe," (T5 model)"),FLe.forEach(t),gao=i(L),$g=n(L,"LI",{});var TLe=s($g);Xse=n(TLe,"STRONG",{});var blt=s(Xse);hao=r(blt,"tapas"),blt.forEach(t),pao=r(TLe," \u2014 "),DP=n(TLe,"A",{href:!0});var vlt=s(DP);_ao=r(vlt,"TapasConfig"),vlt.forEach(t),uao=r(TLe," (TAPAS model)"),TLe.forEach(t),bao=i(L),kg=n(L,"LI",{});var MLe=s(kg);zse=n(MLe,"STRONG",{});var Flt=s(zse);vao=r(Flt,"trajectory_transformer"),Flt.forEach(t),Fao=r(MLe," \u2014 "),GP=n(MLe,"A",{href:!0});var Tlt=s(GP);Tao=r(Tlt,"TrajectoryTransformerConfig"),Tlt.forEach(t),Mao=r(MLe," (Trajectory Transformer model)"),MLe.forEach(t),Eao=i(L),Sg=n(L,"LI",{});var ELe=s(Sg);Wse=n(ELe,"STRONG",{});var Mlt=s(Wse);Cao=r(Mlt,"transfo-xl"),Mlt.forEach(t),wao=r(ELe," \u2014 "),OP=n(ELe,"A",{href:!0});var Elt=s(OP);Aao=r(Elt,"TransfoXLConfig"),Elt.forEach(t),Lao=r(ELe," (Transformer-XL model)"),ELe.forEach(t),yao=i(L),Rg=n(L,"LI",{});var CLe=s(Rg);Qse=n(CLe,"STRONG",{});var Clt=s(Qse);xao=r(Clt,"trocr"),Clt.forEach(t),$ao=r(CLe," \u2014 "),VP=n(CLe,"A",{href:!0});var wlt=s(VP);kao=r(wlt,"TrOCRConfig"),wlt.forEach(t),Sao=r(CLe," (TrOCR model)"),CLe.forEach(t),Rao=i(L),Pg=n(L,"LI",{});var wLe=s(Pg);Hse=n(wLe,"STRONG",{});var Alt=s(Hse);Pao=r(Alt,"unispeech"),Alt.forEach(t),Bao=r(wLe," \u2014 "),XP=n(wLe,"A",{href:!0});var Llt=s(XP);Iao=r(Llt,"UniSpeechConfig"),Llt.forEach(t),Nao=r(wLe," (UniSpeech model)"),wLe.forEach(t),qao=i(L),Bg=n(L,"LI",{});var ALe=s(Bg);Use=n(ALe,"STRONG",{});var ylt=s(Use);jao=r(ylt,"unispeech-sat"),ylt.forEach(t),Dao=r(ALe," \u2014 "),zP=n(ALe,"A",{href:!0});var xlt=s(zP);Gao=r(xlt,"UniSpeechSatConfig"),xlt.forEach(t),Oao=r(ALe," (UniSpeechSat model)"),ALe.forEach(t),Vao=i(L),Ig=n(L,"LI",{});var LLe=s(Ig);Jse=n(LLe,"STRONG",{});var $lt=s(Jse);Xao=r($lt,"van"),$lt.forEach(t),zao=r(LLe," \u2014 "),WP=n(LLe,"A",{href:!0});var klt=s(WP);Wao=r(klt,"VanConfig"),klt.forEach(t),Qao=r(LLe," (VAN model)"),LLe.forEach(t),Hao=i(L),Ng=n(L,"LI",{});var yLe=s(Ng);Yse=n(yLe,"STRONG",{});var Slt=s(Yse);Uao=r(Slt,"vilt"),Slt.forEach(t),Jao=r(yLe," \u2014 "),QP=n(yLe,"A",{href:!0});var Rlt=s(QP);Yao=r(Rlt,"ViltConfig"),Rlt.forEach(t),Kao=r(yLe," (ViLT model)"),yLe.forEach(t),Zao=i(L),qg=n(L,"LI",{});var xLe=s(qg);Kse=n(xLe,"STRONG",{});var Plt=s(Kse);eno=r(Plt,"vision-encoder-decoder"),Plt.forEach(t),ono=r(xLe," \u2014 "),HP=n(xLe,"A",{href:!0});var Blt=s(HP);rno=r(Blt,"VisionEncoderDecoderConfig"),Blt.forEach(t),tno=r(xLe," (Vision Encoder decoder model)"),xLe.forEach(t),ano=i(L),jg=n(L,"LI",{});var $Le=s(jg);Zse=n($Le,"STRONG",{});var Ilt=s(Zse);nno=r(Ilt,"vision-text-dual-encoder"),Ilt.forEach(t),sno=r($Le," \u2014 "),UP=n($Le,"A",{href:!0});var Nlt=s(UP);lno=r(Nlt,"VisionTextDualEncoderConfig"),Nlt.forEach(t),ino=r($Le," (VisionTextDualEncoder model)"),$Le.forEach(t),dno=i(L),Dg=n(L,"LI",{});var kLe=s(Dg);ele=n(kLe,"STRONG",{});var qlt=s(ele);cno=r(qlt,"visual_bert"),qlt.forEach(t),fno=r(kLe," \u2014 "),JP=n(kLe,"A",{href:!0});var jlt=s(JP);mno=r(jlt,"VisualBertConfig"),jlt.forEach(t),gno=r(kLe," (VisualBERT model)"),kLe.forEach(t),hno=i(L),Gg=n(L,"LI",{});var SLe=s(Gg);ole=n(SLe,"STRONG",{});var Dlt=s(ole);pno=r(Dlt,"vit"),Dlt.forEach(t),_no=r(SLe," \u2014 "),YP=n(SLe,"A",{href:!0});var Glt=s(YP);uno=r(Glt,"ViTConfig"),Glt.forEach(t),bno=r(SLe," (ViT model)"),SLe.forEach(t),vno=i(L),Og=n(L,"LI",{});var RLe=s(Og);rle=n(RLe,"STRONG",{});var Olt=s(rle);Fno=r(Olt,"vit_mae"),Olt.forEach(t),Tno=r(RLe," \u2014 "),KP=n(RLe,"A",{href:!0});var Vlt=s(KP);Mno=r(Vlt,"ViTMAEConfig"),Vlt.forEach(t),Eno=r(RLe," (ViTMAE model)"),RLe.forEach(t),Cno=i(L),Vg=n(L,"LI",{});var PLe=s(Vg);tle=n(PLe,"STRONG",{});var Xlt=s(tle);wno=r(Xlt,"wav2vec2"),Xlt.forEach(t),Ano=r(PLe," \u2014 "),ZP=n(PLe,"A",{href:!0});var zlt=s(ZP);Lno=r(zlt,"Wav2Vec2Config"),zlt.forEach(t),yno=r(PLe," (Wav2Vec2 model)"),PLe.forEach(t),xno=i(L),Xg=n(L,"LI",{});var BLe=s(Xg);ale=n(BLe,"STRONG",{});var Wlt=s(ale);$no=r(Wlt,"wav2vec2-conformer"),Wlt.forEach(t),kno=r(BLe," \u2014 "),eB=n(BLe,"A",{href:!0});var Qlt=s(eB);Sno=r(Qlt,"Wav2Vec2ConformerConfig"),Qlt.forEach(t),Rno=r(BLe," (Wav2Vec2-Conformer model)"),BLe.forEach(t),Pno=i(L),zg=n(L,"LI",{});var ILe=s(zg);nle=n(ILe,"STRONG",{});var Hlt=s(nle);Bno=r(Hlt,"wavlm"),Hlt.forEach(t),Ino=r(ILe," \u2014 "),oB=n(ILe,"A",{href:!0});var Ult=s(oB);Nno=r(Ult,"WavLMConfig"),Ult.forEach(t),qno=r(ILe," (WavLM model)"),ILe.forEach(t),jno=i(L),Wg=n(L,"LI",{});var NLe=s(Wg);sle=n(NLe,"STRONG",{});var Jlt=s(sle);Dno=r(Jlt,"xglm"),Jlt.forEach(t),Gno=r(NLe," \u2014 "),rB=n(NLe,"A",{href:!0});var Ylt=s(rB);Ono=r(Ylt,"XGLMConfig"),Ylt.forEach(t),Vno=r(NLe," (XGLM model)"),NLe.forEach(t),Xno=i(L),Qg=n(L,"LI",{});var qLe=s(Qg);lle=n(qLe,"STRONG",{});var Klt=s(lle);zno=r(Klt,"xlm"),Klt.forEach(t),Wno=r(qLe," \u2014 "),tB=n(qLe,"A",{href:!0});var Zlt=s(tB);Qno=r(Zlt,"XLMConfig"),Zlt.forEach(t),Hno=r(qLe," (XLM model)"),qLe.forEach(t),Uno=i(L),Hg=n(L,"LI",{});var jLe=s(Hg);ile=n(jLe,"STRONG",{});var eit=s(ile);Jno=r(eit,"xlm-prophetnet"),eit.forEach(t),Yno=r(jLe," \u2014 "),aB=n(jLe,"A",{href:!0});var oit=s(aB);Kno=r(oit,"XLMProphetNetConfig"),oit.forEach(t),Zno=r(jLe," (XLM-ProphetNet model)"),jLe.forEach(t),eso=i(L),Ug=n(L,"LI",{});var DLe=s(Ug);dle=n(DLe,"STRONG",{});var rit=s(dle);oso=r(rit,"xlm-roberta"),rit.forEach(t),rso=r(DLe," \u2014 "),nB=n(DLe,"A",{href:!0});var tit=s(nB);tso=r(tit,"XLMRobertaConfig"),tit.forEach(t),aso=r(DLe," (XLM-RoBERTa model)"),DLe.forEach(t),nso=i(L),Jg=n(L,"LI",{});var GLe=s(Jg);cle=n(GLe,"STRONG",{});var ait=s(cle);sso=r(ait,"xlm-roberta-xl"),ait.forEach(t),lso=r(GLe," \u2014 "),sB=n(GLe,"A",{href:!0});var nit=s(sB);iso=r(nit,"XLMRobertaXLConfig"),nit.forEach(t),dso=r(GLe," (XLM-RoBERTa-XL model)"),GLe.forEach(t),cso=i(L),Yg=n(L,"LI",{});var OLe=s(Yg);fle=n(OLe,"STRONG",{});var sit=s(fle);fso=r(sit,"xlnet"),sit.forEach(t),mso=r(OLe," \u2014 "),lB=n(OLe,"A",{href:!0});var lit=s(lB);gso=r(lit,"XLNetConfig"),lit.forEach(t),hso=r(OLe," (XLNet model)"),OLe.forEach(t),pso=i(L),Kg=n(L,"LI",{});var VLe=s(Kg);mle=n(VLe,"STRONG",{});var iit=s(mle);_so=r(iit,"yolos"),iit.forEach(t),uso=r(VLe," \u2014 "),iB=n(VLe,"A",{href:!0});var dit=s(iB);bso=r(dit,"YolosConfig"),dit.forEach(t),vso=r(VLe," (YOLOS model)"),VLe.forEach(t),Fso=i(L),Zg=n(L,"LI",{});var XLe=s(Zg);gle=n(XLe,"STRONG",{});var cit=s(gle);Tso=r(cit,"yoso"),cit.forEach(t),Mso=r(XLe," \u2014 "),dB=n(XLe,"A",{href:!0});var fit=s(dB);Eso=r(fit,"YosoConfig"),fit.forEach(t),Cso=r(XLe," (YOSO model)"),XLe.forEach(t),L.forEach(t),wso=i(st),T(eh.$$.fragment,st),st.forEach(t),Aso=i(nt),oh=n(nt,"DIV",{class:!0});var GWe=s(oh);T(F6.$$.fragment,GWe),Lso=i(GWe),hle=n(GWe,"P",{});var mit=s(hle);yso=r(mit,"Register a new configuration for this class."),mit.forEach(t),GWe.forEach(t),nt.forEach(t),OXe=i(f),ji=n(f,"H2",{class:!0});var OWe=s(ji);rh=n(OWe,"A",{id:!0,class:!0,href:!0});var git=s(rh);ple=n(git,"SPAN",{});var hit=s(ple);T(T6.$$.fragment,hit),hit.forEach(t),git.forEach(t),xso=i(OWe),_le=n(OWe,"SPAN",{});var pit=s(_le);$so=r(pit,"AutoTokenizer"),pit.forEach(t),OWe.forEach(t),VXe=i(f),Lo=n(f,"DIV",{class:!0});var el=s(Lo);T(M6.$$.fragment,el),kso=i(el),E6=n(el,"P",{});var VWe=s(E6);Sso=r(VWe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),cB=n(VWe,"A",{href:!0});var _it=s(cB);Rso=r(_it,"AutoTokenizer.from_pretrained()"),_it.forEach(t),Pso=r(VWe," class method."),VWe.forEach(t),Bso=i(el),C6=n(el,"P",{});var XWe=s(C6);Iso=r(XWe,"This class cannot be instantiated directly using "),ule=n(XWe,"CODE",{});var uit=s(ule);Nso=r(uit,"__init__()"),uit.forEach(t),qso=r(XWe," (throws an error)."),XWe.forEach(t),jso=i(el),yr=n(el,"DIV",{class:!0});var ol=s(yr);T(w6.$$.fragment,ol),Dso=i(ol),ble=n(ol,"P",{});var bit=s(ble);Gso=r(bit,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),bit.forEach(t),Oso=i(ol),Pa=n(ol,"P",{});var pw=s(Pa);Vso=r(pw,"The tokenizer class to instantiate is selected based on the "),vle=n(pw,"CODE",{});var vit=s(vle);Xso=r(vit,"model_type"),vit.forEach(t),zso=r(pw,` property of the config object (either
passed as an argument or loaded from `),Fle=n(pw,"CODE",{});var Fit=s(Fle);Wso=r(Fit,"pretrained_model_name_or_path"),Fit.forEach(t),Qso=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tle=n(pw,"CODE",{});var Tit=s(Tle);Hso=r(Tit,"pretrained_model_name_or_path"),Tit.forEach(t),Uso=r(pw,":"),pw.forEach(t),Jso=i(ol),k=n(ol,"UL",{});var S=s(k);jn=n(S,"LI",{});var kk=s(jn);Mle=n(kk,"STRONG",{});var Mit=s(Mle);Yso=r(Mit,"albert"),Mit.forEach(t),Kso=r(kk," \u2014 "),fB=n(kk,"A",{href:!0});var Eit=s(fB);Zso=r(Eit,"AlbertTokenizer"),Eit.forEach(t),elo=r(kk," or "),mB=n(kk,"A",{href:!0});var Cit=s(mB);olo=r(Cit,"AlbertTokenizerFast"),Cit.forEach(t),rlo=r(kk," (ALBERT model)"),kk.forEach(t),tlo=i(S),Dn=n(S,"LI",{});var Sk=s(Dn);Ele=n(Sk,"STRONG",{});var wit=s(Ele);alo=r(wit,"bart"),wit.forEach(t),nlo=r(Sk," \u2014 "),gB=n(Sk,"A",{href:!0});var Ait=s(gB);slo=r(Ait,"BartTokenizer"),Ait.forEach(t),llo=r(Sk," or "),hB=n(Sk,"A",{href:!0});var Lit=s(hB);ilo=r(Lit,"BartTokenizerFast"),Lit.forEach(t),dlo=r(Sk," (BART model)"),Sk.forEach(t),clo=i(S),Gn=n(S,"LI",{});var Rk=s(Gn);Cle=n(Rk,"STRONG",{});var yit=s(Cle);flo=r(yit,"barthez"),yit.forEach(t),mlo=r(Rk," \u2014 "),pB=n(Rk,"A",{href:!0});var xit=s(pB);glo=r(xit,"BarthezTokenizer"),xit.forEach(t),hlo=r(Rk," or "),_B=n(Rk,"A",{href:!0});var $it=s(_B);plo=r($it,"BarthezTokenizerFast"),$it.forEach(t),_lo=r(Rk," (BARThez model)"),Rk.forEach(t),ulo=i(S),th=n(S,"LI",{});var zLe=s(th);wle=n(zLe,"STRONG",{});var kit=s(wle);blo=r(kit,"bartpho"),kit.forEach(t),vlo=r(zLe," \u2014 "),uB=n(zLe,"A",{href:!0});var Sit=s(uB);Flo=r(Sit,"BartphoTokenizer"),Sit.forEach(t),Tlo=r(zLe," (BARTpho model)"),zLe.forEach(t),Mlo=i(S),On=n(S,"LI",{});var Pk=s(On);Ale=n(Pk,"STRONG",{});var Rit=s(Ale);Elo=r(Rit,"bert"),Rit.forEach(t),Clo=r(Pk," \u2014 "),bB=n(Pk,"A",{href:!0});var Pit=s(bB);wlo=r(Pit,"BertTokenizer"),Pit.forEach(t),Alo=r(Pk," or "),vB=n(Pk,"A",{href:!0});var Bit=s(vB);Llo=r(Bit,"BertTokenizerFast"),Bit.forEach(t),ylo=r(Pk," (BERT model)"),Pk.forEach(t),xlo=i(S),ah=n(S,"LI",{});var WLe=s(ah);Lle=n(WLe,"STRONG",{});var Iit=s(Lle);$lo=r(Iit,"bert-generation"),Iit.forEach(t),klo=r(WLe," \u2014 "),FB=n(WLe,"A",{href:!0});var Nit=s(FB);Slo=r(Nit,"BertGenerationTokenizer"),Nit.forEach(t),Rlo=r(WLe," (Bert Generation model)"),WLe.forEach(t),Plo=i(S),nh=n(S,"LI",{});var QLe=s(nh);yle=n(QLe,"STRONG",{});var qit=s(yle);Blo=r(qit,"bert-japanese"),qit.forEach(t),Ilo=r(QLe," \u2014 "),TB=n(QLe,"A",{href:!0});var jit=s(TB);Nlo=r(jit,"BertJapaneseTokenizer"),jit.forEach(t),qlo=r(QLe," (BertJapanese model)"),QLe.forEach(t),jlo=i(S),sh=n(S,"LI",{});var HLe=s(sh);xle=n(HLe,"STRONG",{});var Dit=s(xle);Dlo=r(Dit,"bertweet"),Dit.forEach(t),Glo=r(HLe," \u2014 "),MB=n(HLe,"A",{href:!0});var Git=s(MB);Olo=r(Git,"BertweetTokenizer"),Git.forEach(t),Vlo=r(HLe," (BERTweet model)"),HLe.forEach(t),Xlo=i(S),Vn=n(S,"LI",{});var Bk=s(Vn);$le=n(Bk,"STRONG",{});var Oit=s($le);zlo=r(Oit,"big_bird"),Oit.forEach(t),Wlo=r(Bk," \u2014 "),EB=n(Bk,"A",{href:!0});var Vit=s(EB);Qlo=r(Vit,"BigBirdTokenizer"),Vit.forEach(t),Hlo=r(Bk," or "),CB=n(Bk,"A",{href:!0});var Xit=s(CB);Ulo=r(Xit,"BigBirdTokenizerFast"),Xit.forEach(t),Jlo=r(Bk," (BigBird model)"),Bk.forEach(t),Ylo=i(S),Xn=n(S,"LI",{});var Ik=s(Xn);kle=n(Ik,"STRONG",{});var zit=s(kle);Klo=r(zit,"bigbird_pegasus"),zit.forEach(t),Zlo=r(Ik," \u2014 "),wB=n(Ik,"A",{href:!0});var Wit=s(wB);eio=r(Wit,"PegasusTokenizer"),Wit.forEach(t),oio=r(Ik," or "),AB=n(Ik,"A",{href:!0});var Qit=s(AB);rio=r(Qit,"PegasusTokenizerFast"),Qit.forEach(t),tio=r(Ik," (BigBird-Pegasus model)"),Ik.forEach(t),aio=i(S),zn=n(S,"LI",{});var Nk=s(zn);Sle=n(Nk,"STRONG",{});var Hit=s(Sle);nio=r(Hit,"blenderbot"),Hit.forEach(t),sio=r(Nk," \u2014 "),LB=n(Nk,"A",{href:!0});var Uit=s(LB);lio=r(Uit,"BlenderbotTokenizer"),Uit.forEach(t),iio=r(Nk," or "),yB=n(Nk,"A",{href:!0});var Jit=s(yB);dio=r(Jit,"BlenderbotTokenizerFast"),Jit.forEach(t),cio=r(Nk," (Blenderbot model)"),Nk.forEach(t),fio=i(S),lh=n(S,"LI",{});var ULe=s(lh);Rle=n(ULe,"STRONG",{});var Yit=s(Rle);mio=r(Yit,"blenderbot-small"),Yit.forEach(t),gio=r(ULe," \u2014 "),xB=n(ULe,"A",{href:!0});var Kit=s(xB);hio=r(Kit,"BlenderbotSmallTokenizer"),Kit.forEach(t),pio=r(ULe," (BlenderbotSmall model)"),ULe.forEach(t),_io=i(S),ih=n(S,"LI",{});var JLe=s(ih);Ple=n(JLe,"STRONG",{});var Zit=s(Ple);uio=r(Zit,"bloom"),Zit.forEach(t),bio=r(JLe," \u2014 "),$B=n(JLe,"A",{href:!0});var edt=s($B);vio=r(edt,"BloomTokenizerFast"),edt.forEach(t),Fio=r(JLe," (BLOOM model)"),JLe.forEach(t),Tio=i(S),dh=n(S,"LI",{});var YLe=s(dh);Ble=n(YLe,"STRONG",{});var odt=s(Ble);Mio=r(odt,"byt5"),odt.forEach(t),Eio=r(YLe," \u2014 "),kB=n(YLe,"A",{href:!0});var rdt=s(kB);Cio=r(rdt,"ByT5Tokenizer"),rdt.forEach(t),wio=r(YLe," (ByT5 model)"),YLe.forEach(t),Aio=i(S),Wn=n(S,"LI",{});var qk=s(Wn);Ile=n(qk,"STRONG",{});var tdt=s(Ile);Lio=r(tdt,"camembert"),tdt.forEach(t),yio=r(qk," \u2014 "),SB=n(qk,"A",{href:!0});var adt=s(SB);xio=r(adt,"CamembertTokenizer"),adt.forEach(t),$io=r(qk," or "),RB=n(qk,"A",{href:!0});var ndt=s(RB);kio=r(ndt,"CamembertTokenizerFast"),ndt.forEach(t),Sio=r(qk," (CamemBERT model)"),qk.forEach(t),Rio=i(S),ch=n(S,"LI",{});var KLe=s(ch);Nle=n(KLe,"STRONG",{});var sdt=s(Nle);Pio=r(sdt,"canine"),sdt.forEach(t),Bio=r(KLe," \u2014 "),PB=n(KLe,"A",{href:!0});var ldt=s(PB);Iio=r(ldt,"CanineTokenizer"),ldt.forEach(t),Nio=r(KLe," (CANINE model)"),KLe.forEach(t),qio=i(S),Qn=n(S,"LI",{});var jk=s(Qn);qle=n(jk,"STRONG",{});var idt=s(qle);jio=r(idt,"clip"),idt.forEach(t),Dio=r(jk," \u2014 "),BB=n(jk,"A",{href:!0});var ddt=s(BB);Gio=r(ddt,"CLIPTokenizer"),ddt.forEach(t),Oio=r(jk," or "),IB=n(jk,"A",{href:!0});var cdt=s(IB);Vio=r(cdt,"CLIPTokenizerFast"),cdt.forEach(t),Xio=r(jk," (CLIP model)"),jk.forEach(t),zio=i(S),Hn=n(S,"LI",{});var Dk=s(Hn);jle=n(Dk,"STRONG",{});var fdt=s(jle);Wio=r(fdt,"codegen"),fdt.forEach(t),Qio=r(Dk," \u2014 "),NB=n(Dk,"A",{href:!0});var mdt=s(NB);Hio=r(mdt,"CodeGenTokenizer"),mdt.forEach(t),Uio=r(Dk," or "),qB=n(Dk,"A",{href:!0});var gdt=s(qB);Jio=r(gdt,"CodeGenTokenizerFast"),gdt.forEach(t),Yio=r(Dk," (CodeGen model)"),Dk.forEach(t),Kio=i(S),Un=n(S,"LI",{});var Gk=s(Un);Dle=n(Gk,"STRONG",{});var hdt=s(Dle);Zio=r(hdt,"convbert"),hdt.forEach(t),edo=r(Gk," \u2014 "),jB=n(Gk,"A",{href:!0});var pdt=s(jB);odo=r(pdt,"ConvBertTokenizer"),pdt.forEach(t),rdo=r(Gk," or "),DB=n(Gk,"A",{href:!0});var _dt=s(DB);tdo=r(_dt,"ConvBertTokenizerFast"),_dt.forEach(t),ado=r(Gk," (ConvBERT model)"),Gk.forEach(t),ndo=i(S),Jn=n(S,"LI",{});var Ok=s(Jn);Gle=n(Ok,"STRONG",{});var udt=s(Gle);sdo=r(udt,"cpm"),udt.forEach(t),ldo=r(Ok," \u2014 "),GB=n(Ok,"A",{href:!0});var bdt=s(GB);ido=r(bdt,"CpmTokenizer"),bdt.forEach(t),ddo=r(Ok," or "),OB=n(Ok,"A",{href:!0});var vdt=s(OB);cdo=r(vdt,"CpmTokenizerFast"),vdt.forEach(t),fdo=r(Ok," (CPM model)"),Ok.forEach(t),mdo=i(S),fh=n(S,"LI",{});var ZLe=s(fh);Ole=n(ZLe,"STRONG",{});var Fdt=s(Ole);gdo=r(Fdt,"ctrl"),Fdt.forEach(t),hdo=r(ZLe," \u2014 "),VB=n(ZLe,"A",{href:!0});var Tdt=s(VB);pdo=r(Tdt,"CTRLTokenizer"),Tdt.forEach(t),_do=r(ZLe," (CTRL model)"),ZLe.forEach(t),udo=i(S),Yn=n(S,"LI",{});var Vk=s(Yn);Vle=n(Vk,"STRONG",{});var Mdt=s(Vle);bdo=r(Mdt,"data2vec-text"),Mdt.forEach(t),vdo=r(Vk," \u2014 "),XB=n(Vk,"A",{href:!0});var Edt=s(XB);Fdo=r(Edt,"RobertaTokenizer"),Edt.forEach(t),Tdo=r(Vk," or "),zB=n(Vk,"A",{href:!0});var Cdt=s(zB);Mdo=r(Cdt,"RobertaTokenizerFast"),Cdt.forEach(t),Edo=r(Vk," (Data2VecText model)"),Vk.forEach(t),Cdo=i(S),Kn=n(S,"LI",{});var Xk=s(Kn);Xle=n(Xk,"STRONG",{});var wdt=s(Xle);wdo=r(wdt,"deberta"),wdt.forEach(t),Ado=r(Xk," \u2014 "),WB=n(Xk,"A",{href:!0});var Adt=s(WB);Ldo=r(Adt,"DebertaTokenizer"),Adt.forEach(t),ydo=r(Xk," or "),QB=n(Xk,"A",{href:!0});var Ldt=s(QB);xdo=r(Ldt,"DebertaTokenizerFast"),Ldt.forEach(t),$do=r(Xk," (DeBERTa model)"),Xk.forEach(t),kdo=i(S),Zn=n(S,"LI",{});var zk=s(Zn);zle=n(zk,"STRONG",{});var ydt=s(zle);Sdo=r(ydt,"deberta-v2"),ydt.forEach(t),Rdo=r(zk," \u2014 "),HB=n(zk,"A",{href:!0});var xdt=s(HB);Pdo=r(xdt,"DebertaV2Tokenizer"),xdt.forEach(t),Bdo=r(zk," or "),UB=n(zk,"A",{href:!0});var $dt=s(UB);Ido=r($dt,"DebertaV2TokenizerFast"),$dt.forEach(t),Ndo=r(zk," (DeBERTa-v2 model)"),zk.forEach(t),qdo=i(S),es=n(S,"LI",{});var Wk=s(es);Wle=n(Wk,"STRONG",{});var kdt=s(Wle);jdo=r(kdt,"distilbert"),kdt.forEach(t),Ddo=r(Wk," \u2014 "),JB=n(Wk,"A",{href:!0});var Sdt=s(JB);Gdo=r(Sdt,"DistilBertTokenizer"),Sdt.forEach(t),Odo=r(Wk," or "),YB=n(Wk,"A",{href:!0});var Rdt=s(YB);Vdo=r(Rdt,"DistilBertTokenizerFast"),Rdt.forEach(t),Xdo=r(Wk," (DistilBERT model)"),Wk.forEach(t),zdo=i(S),os=n(S,"LI",{});var Qk=s(os);Qle=n(Qk,"STRONG",{});var Pdt=s(Qle);Wdo=r(Pdt,"dpr"),Pdt.forEach(t),Qdo=r(Qk," \u2014 "),KB=n(Qk,"A",{href:!0});var Bdt=s(KB);Hdo=r(Bdt,"DPRQuestionEncoderTokenizer"),Bdt.forEach(t),Udo=r(Qk," or "),ZB=n(Qk,"A",{href:!0});var Idt=s(ZB);Jdo=r(Idt,"DPRQuestionEncoderTokenizerFast"),Idt.forEach(t),Ydo=r(Qk," (DPR model)"),Qk.forEach(t),Kdo=i(S),rs=n(S,"LI",{});var Hk=s(rs);Hle=n(Hk,"STRONG",{});var Ndt=s(Hle);Zdo=r(Ndt,"electra"),Ndt.forEach(t),eco=r(Hk," \u2014 "),eI=n(Hk,"A",{href:!0});var qdt=s(eI);oco=r(qdt,"ElectraTokenizer"),qdt.forEach(t),rco=r(Hk," or "),oI=n(Hk,"A",{href:!0});var jdt=s(oI);tco=r(jdt,"ElectraTokenizerFast"),jdt.forEach(t),aco=r(Hk," (ELECTRA model)"),Hk.forEach(t),nco=i(S),mh=n(S,"LI",{});var eye=s(mh);Ule=n(eye,"STRONG",{});var Ddt=s(Ule);sco=r(Ddt,"flaubert"),Ddt.forEach(t),lco=r(eye," \u2014 "),rI=n(eye,"A",{href:!0});var Gdt=s(rI);ico=r(Gdt,"FlaubertTokenizer"),Gdt.forEach(t),dco=r(eye," (FlauBERT model)"),eye.forEach(t),cco=i(S),ts=n(S,"LI",{});var Uk=s(ts);Jle=n(Uk,"STRONG",{});var Odt=s(Jle);fco=r(Odt,"fnet"),Odt.forEach(t),mco=r(Uk," \u2014 "),tI=n(Uk,"A",{href:!0});var Vdt=s(tI);gco=r(Vdt,"FNetTokenizer"),Vdt.forEach(t),hco=r(Uk," or "),aI=n(Uk,"A",{href:!0});var Xdt=s(aI);pco=r(Xdt,"FNetTokenizerFast"),Xdt.forEach(t),_co=r(Uk," (FNet model)"),Uk.forEach(t),uco=i(S),gh=n(S,"LI",{});var oye=s(gh);Yle=n(oye,"STRONG",{});var zdt=s(Yle);bco=r(zdt,"fsmt"),zdt.forEach(t),vco=r(oye," \u2014 "),nI=n(oye,"A",{href:!0});var Wdt=s(nI);Fco=r(Wdt,"FSMTTokenizer"),Wdt.forEach(t),Tco=r(oye," (FairSeq Machine-Translation model)"),oye.forEach(t),Mco=i(S),as=n(S,"LI",{});var Jk=s(as);Kle=n(Jk,"STRONG",{});var Qdt=s(Kle);Eco=r(Qdt,"funnel"),Qdt.forEach(t),Cco=r(Jk," \u2014 "),sI=n(Jk,"A",{href:!0});var Hdt=s(sI);wco=r(Hdt,"FunnelTokenizer"),Hdt.forEach(t),Aco=r(Jk," or "),lI=n(Jk,"A",{href:!0});var Udt=s(lI);Lco=r(Udt,"FunnelTokenizerFast"),Udt.forEach(t),yco=r(Jk," (Funnel Transformer model)"),Jk.forEach(t),xco=i(S),ns=n(S,"LI",{});var Yk=s(ns);Zle=n(Yk,"STRONG",{});var Jdt=s(Zle);$co=r(Jdt,"gpt2"),Jdt.forEach(t),kco=r(Yk," \u2014 "),iI=n(Yk,"A",{href:!0});var Ydt=s(iI);Sco=r(Ydt,"GPT2Tokenizer"),Ydt.forEach(t),Rco=r(Yk," or "),dI=n(Yk,"A",{href:!0});var Kdt=s(dI);Pco=r(Kdt,"GPT2TokenizerFast"),Kdt.forEach(t),Bco=r(Yk," (OpenAI GPT-2 model)"),Yk.forEach(t),Ico=i(S),ss=n(S,"LI",{});var Kk=s(ss);eie=n(Kk,"STRONG",{});var Zdt=s(eie);Nco=r(Zdt,"gpt_neo"),Zdt.forEach(t),qco=r(Kk," \u2014 "),cI=n(Kk,"A",{href:!0});var ect=s(cI);jco=r(ect,"GPT2Tokenizer"),ect.forEach(t),Dco=r(Kk," or "),fI=n(Kk,"A",{href:!0});var oct=s(fI);Gco=r(oct,"GPT2TokenizerFast"),oct.forEach(t),Oco=r(Kk," (GPT Neo model)"),Kk.forEach(t),Vco=i(S),hh=n(S,"LI",{});var rye=s(hh);oie=n(rye,"STRONG",{});var rct=s(oie);Xco=r(rct,"gpt_neox"),rct.forEach(t),zco=r(rye," \u2014 "),mI=n(rye,"A",{href:!0});var tct=s(mI);Wco=r(tct,"GPTNeoXTokenizerFast"),tct.forEach(t),Qco=r(rye," (GPT NeoX model)"),rye.forEach(t),Hco=i(S),ls=n(S,"LI",{});var Zk=s(ls);rie=n(Zk,"STRONG",{});var act=s(rie);Uco=r(act,"gptj"),act.forEach(t),Jco=r(Zk," \u2014 "),gI=n(Zk,"A",{href:!0});var nct=s(gI);Yco=r(nct,"GPT2Tokenizer"),nct.forEach(t),Kco=r(Zk," or "),hI=n(Zk,"A",{href:!0});var sct=s(hI);Zco=r(sct,"GPT2TokenizerFast"),sct.forEach(t),efo=r(Zk," (GPT-J model)"),Zk.forEach(t),ofo=i(S),is=n(S,"LI",{});var eS=s(is);tie=n(eS,"STRONG",{});var lct=s(tie);rfo=r(lct,"groupvit"),lct.forEach(t),tfo=r(eS," \u2014 "),pI=n(eS,"A",{href:!0});var ict=s(pI);afo=r(ict,"CLIPTokenizer"),ict.forEach(t),nfo=r(eS," or "),_I=n(eS,"A",{href:!0});var dct=s(_I);sfo=r(dct,"CLIPTokenizerFast"),dct.forEach(t),lfo=r(eS," (GroupViT model)"),eS.forEach(t),ifo=i(S),ds=n(S,"LI",{});var oS=s(ds);aie=n(oS,"STRONG",{});var cct=s(aie);dfo=r(cct,"herbert"),cct.forEach(t),cfo=r(oS," \u2014 "),uI=n(oS,"A",{href:!0});var fct=s(uI);ffo=r(fct,"HerbertTokenizer"),fct.forEach(t),mfo=r(oS," or "),bI=n(oS,"A",{href:!0});var mct=s(bI);gfo=r(mct,"HerbertTokenizerFast"),mct.forEach(t),hfo=r(oS," (HerBERT model)"),oS.forEach(t),pfo=i(S),ph=n(S,"LI",{});var tye=s(ph);nie=n(tye,"STRONG",{});var gct=s(nie);_fo=r(gct,"hubert"),gct.forEach(t),ufo=r(tye," \u2014 "),vI=n(tye,"A",{href:!0});var hct=s(vI);bfo=r(hct,"Wav2Vec2CTCTokenizer"),hct.forEach(t),vfo=r(tye," (Hubert model)"),tye.forEach(t),Ffo=i(S),cs=n(S,"LI",{});var rS=s(cs);sie=n(rS,"STRONG",{});var pct=s(sie);Tfo=r(pct,"ibert"),pct.forEach(t),Mfo=r(rS," \u2014 "),FI=n(rS,"A",{href:!0});var _ct=s(FI);Efo=r(_ct,"RobertaTokenizer"),_ct.forEach(t),Cfo=r(rS," or "),TI=n(rS,"A",{href:!0});var uct=s(TI);wfo=r(uct,"RobertaTokenizerFast"),uct.forEach(t),Afo=r(rS," (I-BERT model)"),rS.forEach(t),Lfo=i(S),fs=n(S,"LI",{});var tS=s(fs);lie=n(tS,"STRONG",{});var bct=s(lie);yfo=r(bct,"layoutlm"),bct.forEach(t),xfo=r(tS," \u2014 "),MI=n(tS,"A",{href:!0});var vct=s(MI);$fo=r(vct,"LayoutLMTokenizer"),vct.forEach(t),kfo=r(tS," or "),EI=n(tS,"A",{href:!0});var Fct=s(EI);Sfo=r(Fct,"LayoutLMTokenizerFast"),Fct.forEach(t),Rfo=r(tS," (LayoutLM model)"),tS.forEach(t),Pfo=i(S),ms=n(S,"LI",{});var aS=s(ms);iie=n(aS,"STRONG",{});var Tct=s(iie);Bfo=r(Tct,"layoutlmv2"),Tct.forEach(t),Ifo=r(aS," \u2014 "),CI=n(aS,"A",{href:!0});var Mct=s(CI);Nfo=r(Mct,"LayoutLMv2Tokenizer"),Mct.forEach(t),qfo=r(aS," or "),wI=n(aS,"A",{href:!0});var Ect=s(wI);jfo=r(Ect,"LayoutLMv2TokenizerFast"),Ect.forEach(t),Dfo=r(aS," (LayoutLMv2 model)"),aS.forEach(t),Gfo=i(S),gs=n(S,"LI",{});var nS=s(gs);die=n(nS,"STRONG",{});var Cct=s(die);Ofo=r(Cct,"layoutlmv3"),Cct.forEach(t),Vfo=r(nS," \u2014 "),AI=n(nS,"A",{href:!0});var wct=s(AI);Xfo=r(wct,"LayoutLMv3Tokenizer"),wct.forEach(t),zfo=r(nS," or "),LI=n(nS,"A",{href:!0});var Act=s(LI);Wfo=r(Act,"LayoutLMv3TokenizerFast"),Act.forEach(t),Qfo=r(nS," (LayoutLMv3 model)"),nS.forEach(t),Hfo=i(S),hs=n(S,"LI",{});var sS=s(hs);cie=n(sS,"STRONG",{});var Lct=s(cie);Ufo=r(Lct,"layoutxlm"),Lct.forEach(t),Jfo=r(sS," \u2014 "),yI=n(sS,"A",{href:!0});var yct=s(yI);Yfo=r(yct,"LayoutXLMTokenizer"),yct.forEach(t),Kfo=r(sS," or "),xI=n(sS,"A",{href:!0});var xct=s(xI);Zfo=r(xct,"LayoutXLMTokenizerFast"),xct.forEach(t),emo=r(sS," (LayoutXLM model)"),sS.forEach(t),omo=i(S),ps=n(S,"LI",{});var lS=s(ps);fie=n(lS,"STRONG",{});var $ct=s(fie);rmo=r($ct,"led"),$ct.forEach(t),tmo=r(lS," \u2014 "),$I=n(lS,"A",{href:!0});var kct=s($I);amo=r(kct,"LEDTokenizer"),kct.forEach(t),nmo=r(lS," or "),kI=n(lS,"A",{href:!0});var Sct=s(kI);smo=r(Sct,"LEDTokenizerFast"),Sct.forEach(t),lmo=r(lS," (LED model)"),lS.forEach(t),imo=i(S),_s=n(S,"LI",{});var iS=s(_s);mie=n(iS,"STRONG",{});var Rct=s(mie);dmo=r(Rct,"longformer"),Rct.forEach(t),cmo=r(iS," \u2014 "),SI=n(iS,"A",{href:!0});var Pct=s(SI);fmo=r(Pct,"LongformerTokenizer"),Pct.forEach(t),mmo=r(iS," or "),RI=n(iS,"A",{href:!0});var Bct=s(RI);gmo=r(Bct,"LongformerTokenizerFast"),Bct.forEach(t),hmo=r(iS," (Longformer model)"),iS.forEach(t),pmo=i(S),us=n(S,"LI",{});var dS=s(us);gie=n(dS,"STRONG",{});var Ict=s(gie);_mo=r(Ict,"longt5"),Ict.forEach(t),umo=r(dS," \u2014 "),PI=n(dS,"A",{href:!0});var Nct=s(PI);bmo=r(Nct,"T5Tokenizer"),Nct.forEach(t),vmo=r(dS," or "),BI=n(dS,"A",{href:!0});var qct=s(BI);Fmo=r(qct,"T5TokenizerFast"),qct.forEach(t),Tmo=r(dS," (LongT5 model)"),dS.forEach(t),Mmo=i(S),_h=n(S,"LI",{});var aye=s(_h);hie=n(aye,"STRONG",{});var jct=s(hie);Emo=r(jct,"luke"),jct.forEach(t),Cmo=r(aye," \u2014 "),II=n(aye,"A",{href:!0});var Dct=s(II);wmo=r(Dct,"LukeTokenizer"),Dct.forEach(t),Amo=r(aye," (LUKE model)"),aye.forEach(t),Lmo=i(S),bs=n(S,"LI",{});var cS=s(bs);pie=n(cS,"STRONG",{});var Gct=s(pie);ymo=r(Gct,"lxmert"),Gct.forEach(t),xmo=r(cS," \u2014 "),NI=n(cS,"A",{href:!0});var Oct=s(NI);$mo=r(Oct,"LxmertTokenizer"),Oct.forEach(t),kmo=r(cS," or "),qI=n(cS,"A",{href:!0});var Vct=s(qI);Smo=r(Vct,"LxmertTokenizerFast"),Vct.forEach(t),Rmo=r(cS," (LXMERT model)"),cS.forEach(t),Pmo=i(S),uh=n(S,"LI",{});var nye=s(uh);_ie=n(nye,"STRONG",{});var Xct=s(_ie);Bmo=r(Xct,"m2m_100"),Xct.forEach(t),Imo=r(nye," \u2014 "),jI=n(nye,"A",{href:!0});var zct=s(jI);Nmo=r(zct,"M2M100Tokenizer"),zct.forEach(t),qmo=r(nye," (M2M100 model)"),nye.forEach(t),jmo=i(S),bh=n(S,"LI",{});var sye=s(bh);uie=n(sye,"STRONG",{});var Wct=s(uie);Dmo=r(Wct,"marian"),Wct.forEach(t),Gmo=r(sye," \u2014 "),DI=n(sye,"A",{href:!0});var Qct=s(DI);Omo=r(Qct,"MarianTokenizer"),Qct.forEach(t),Vmo=r(sye," (Marian model)"),sye.forEach(t),Xmo=i(S),vs=n(S,"LI",{});var fS=s(vs);bie=n(fS,"STRONG",{});var Hct=s(bie);zmo=r(Hct,"mbart"),Hct.forEach(t),Wmo=r(fS," \u2014 "),GI=n(fS,"A",{href:!0});var Uct=s(GI);Qmo=r(Uct,"MBartTokenizer"),Uct.forEach(t),Hmo=r(fS," or "),OI=n(fS,"A",{href:!0});var Jct=s(OI);Umo=r(Jct,"MBartTokenizerFast"),Jct.forEach(t),Jmo=r(fS," (mBART model)"),fS.forEach(t),Ymo=i(S),Fs=n(S,"LI",{});var mS=s(Fs);vie=n(mS,"STRONG",{});var Yct=s(vie);Kmo=r(Yct,"mbart50"),Yct.forEach(t),Zmo=r(mS," \u2014 "),VI=n(mS,"A",{href:!0});var Kct=s(VI);ego=r(Kct,"MBart50Tokenizer"),Kct.forEach(t),ogo=r(mS," or "),XI=n(mS,"A",{href:!0});var Zct=s(XI);rgo=r(Zct,"MBart50TokenizerFast"),Zct.forEach(t),tgo=r(mS," (mBART-50 model)"),mS.forEach(t),ago=i(S),Ts=n(S,"LI",{});var gS=s(Ts);Fie=n(gS,"STRONG",{});var eft=s(Fie);ngo=r(eft,"megatron-bert"),eft.forEach(t),sgo=r(gS," \u2014 "),zI=n(gS,"A",{href:!0});var oft=s(zI);lgo=r(oft,"BertTokenizer"),oft.forEach(t),igo=r(gS," or "),WI=n(gS,"A",{href:!0});var rft=s(WI);dgo=r(rft,"BertTokenizerFast"),rft.forEach(t),cgo=r(gS," (Megatron-BERT model)"),gS.forEach(t),fgo=i(S),vh=n(S,"LI",{});var lye=s(vh);Tie=n(lye,"STRONG",{});var tft=s(Tie);mgo=r(tft,"mluke"),tft.forEach(t),ggo=r(lye," \u2014 "),QI=n(lye,"A",{href:!0});var aft=s(QI);hgo=r(aft,"MLukeTokenizer"),aft.forEach(t),pgo=r(lye," (mLUKE model)"),lye.forEach(t),_go=i(S),Ms=n(S,"LI",{});var hS=s(Ms);Mie=n(hS,"STRONG",{});var nft=s(Mie);ugo=r(nft,"mobilebert"),nft.forEach(t),bgo=r(hS," \u2014 "),HI=n(hS,"A",{href:!0});var sft=s(HI);vgo=r(sft,"MobileBertTokenizer"),sft.forEach(t),Fgo=r(hS," or "),UI=n(hS,"A",{href:!0});var lft=s(UI);Tgo=r(lft,"MobileBertTokenizerFast"),lft.forEach(t),Mgo=r(hS," (MobileBERT model)"),hS.forEach(t),Ego=i(S),Es=n(S,"LI",{});var pS=s(Es);Eie=n(pS,"STRONG",{});var ift=s(Eie);Cgo=r(ift,"mpnet"),ift.forEach(t),wgo=r(pS," \u2014 "),JI=n(pS,"A",{href:!0});var dft=s(JI);Ago=r(dft,"MPNetTokenizer"),dft.forEach(t),Lgo=r(pS," or "),YI=n(pS,"A",{href:!0});var cft=s(YI);ygo=r(cft,"MPNetTokenizerFast"),cft.forEach(t),xgo=r(pS," (MPNet model)"),pS.forEach(t),$go=i(S),Cs=n(S,"LI",{});var _S=s(Cs);Cie=n(_S,"STRONG",{});var fft=s(Cie);kgo=r(fft,"mt5"),fft.forEach(t),Sgo=r(_S," \u2014 "),KI=n(_S,"A",{href:!0});var mft=s(KI);Rgo=r(mft,"MT5Tokenizer"),mft.forEach(t),Pgo=r(_S," or "),ZI=n(_S,"A",{href:!0});var gft=s(ZI);Bgo=r(gft,"MT5TokenizerFast"),gft.forEach(t),Igo=r(_S," (MT5 model)"),_S.forEach(t),Ngo=i(S),ws=n(S,"LI",{});var uS=s(ws);wie=n(uS,"STRONG",{});var hft=s(wie);qgo=r(hft,"mvp"),hft.forEach(t),jgo=r(uS," \u2014 "),eN=n(uS,"A",{href:!0});var pft=s(eN);Dgo=r(pft,"MvpTokenizer"),pft.forEach(t),Ggo=r(uS," or "),oN=n(uS,"A",{href:!0});var _ft=s(oN);Ogo=r(_ft,"MvpTokenizerFast"),_ft.forEach(t),Vgo=r(uS," (MVP model)"),uS.forEach(t),Xgo=i(S),As=n(S,"LI",{});var bS=s(As);Aie=n(bS,"STRONG",{});var uft=s(Aie);zgo=r(uft,"nezha"),uft.forEach(t),Wgo=r(bS," \u2014 "),rN=n(bS,"A",{href:!0});var bft=s(rN);Qgo=r(bft,"BertTokenizer"),bft.forEach(t),Hgo=r(bS," or "),tN=n(bS,"A",{href:!0});var vft=s(tN);Ugo=r(vft,"BertTokenizerFast"),vft.forEach(t),Jgo=r(bS," (Nezha model)"),bS.forEach(t),Ygo=i(S),Ls=n(S,"LI",{});var vS=s(Ls);Lie=n(vS,"STRONG",{});var Fft=s(Lie);Kgo=r(Fft,"nllb"),Fft.forEach(t),Zgo=r(vS," \u2014 "),aN=n(vS,"A",{href:!0});var Tft=s(aN);eho=r(Tft,"NllbTokenizer"),Tft.forEach(t),oho=r(vS," or "),nN=n(vS,"A",{href:!0});var Mft=s(nN);rho=r(Mft,"NllbTokenizerFast"),Mft.forEach(t),tho=r(vS," (NLLB model)"),vS.forEach(t),aho=i(S),ys=n(S,"LI",{});var FS=s(ys);yie=n(FS,"STRONG",{});var Eft=s(yie);nho=r(Eft,"nystromformer"),Eft.forEach(t),sho=r(FS," \u2014 "),sN=n(FS,"A",{href:!0});var Cft=s(sN);lho=r(Cft,"AlbertTokenizer"),Cft.forEach(t),iho=r(FS," or "),lN=n(FS,"A",{href:!0});var wft=s(lN);dho=r(wft,"AlbertTokenizerFast"),wft.forEach(t),cho=r(FS," (Nystr\xF6mformer model)"),FS.forEach(t),fho=i(S),xs=n(S,"LI",{});var TS=s(xs);xie=n(TS,"STRONG",{});var Aft=s(xie);mho=r(Aft,"openai-gpt"),Aft.forEach(t),gho=r(TS," \u2014 "),iN=n(TS,"A",{href:!0});var Lft=s(iN);hho=r(Lft,"OpenAIGPTTokenizer"),Lft.forEach(t),pho=r(TS," or "),dN=n(TS,"A",{href:!0});var yft=s(dN);_ho=r(yft,"OpenAIGPTTokenizerFast"),yft.forEach(t),uho=r(TS," (OpenAI GPT model)"),TS.forEach(t),bho=i(S),Fh=n(S,"LI",{});var iye=s(Fh);$ie=n(iye,"STRONG",{});var xft=s($ie);vho=r(xft,"opt"),xft.forEach(t),Fho=r(iye," \u2014 "),cN=n(iye,"A",{href:!0});var $ft=s(cN);Tho=r($ft,"GPT2Tokenizer"),$ft.forEach(t),Mho=r(iye," (OPT model)"),iye.forEach(t),Eho=i(S),$s=n(S,"LI",{});var MS=s($s);kie=n(MS,"STRONG",{});var kft=s(kie);Cho=r(kft,"owlvit"),kft.forEach(t),who=r(MS," \u2014 "),fN=n(MS,"A",{href:!0});var Sft=s(fN);Aho=r(Sft,"CLIPTokenizer"),Sft.forEach(t),Lho=r(MS," or "),mN=n(MS,"A",{href:!0});var Rft=s(mN);yho=r(Rft,"CLIPTokenizerFast"),Rft.forEach(t),xho=r(MS," (OWL-ViT model)"),MS.forEach(t),$ho=i(S),ks=n(S,"LI",{});var ES=s(ks);Sie=n(ES,"STRONG",{});var Pft=s(Sie);kho=r(Pft,"pegasus"),Pft.forEach(t),Sho=r(ES," \u2014 "),gN=n(ES,"A",{href:!0});var Bft=s(gN);Rho=r(Bft,"PegasusTokenizer"),Bft.forEach(t),Pho=r(ES," or "),hN=n(ES,"A",{href:!0});var Ift=s(hN);Bho=r(Ift,"PegasusTokenizerFast"),Ift.forEach(t),Iho=r(ES," (Pegasus model)"),ES.forEach(t),Nho=i(S),Th=n(S,"LI",{});var dye=s(Th);Rie=n(dye,"STRONG",{});var Nft=s(Rie);qho=r(Nft,"perceiver"),Nft.forEach(t),jho=r(dye," \u2014 "),pN=n(dye,"A",{href:!0});var qft=s(pN);Dho=r(qft,"PerceiverTokenizer"),qft.forEach(t),Gho=r(dye," (Perceiver model)"),dye.forEach(t),Oho=i(S),Mh=n(S,"LI",{});var cye=s(Mh);Pie=n(cye,"STRONG",{});var jft=s(Pie);Vho=r(jft,"phobert"),jft.forEach(t),Xho=r(cye," \u2014 "),_N=n(cye,"A",{href:!0});var Dft=s(_N);zho=r(Dft,"PhobertTokenizer"),Dft.forEach(t),Who=r(cye," (PhoBERT model)"),cye.forEach(t),Qho=i(S),Eh=n(S,"LI",{});var fye=s(Eh);Bie=n(fye,"STRONG",{});var Gft=s(Bie);Hho=r(Gft,"plbart"),Gft.forEach(t),Uho=r(fye," \u2014 "),uN=n(fye,"A",{href:!0});var Oft=s(uN);Jho=r(Oft,"PLBartTokenizer"),Oft.forEach(t),Yho=r(fye," (PLBart model)"),fye.forEach(t),Kho=i(S),Ch=n(S,"LI",{});var mye=s(Ch);Iie=n(mye,"STRONG",{});var Vft=s(Iie);Zho=r(Vft,"prophetnet"),Vft.forEach(t),epo=r(mye," \u2014 "),bN=n(mye,"A",{href:!0});var Xft=s(bN);opo=r(Xft,"ProphetNetTokenizer"),Xft.forEach(t),rpo=r(mye," (ProphetNet model)"),mye.forEach(t),tpo=i(S),Ss=n(S,"LI",{});var CS=s(Ss);Nie=n(CS,"STRONG",{});var zft=s(Nie);apo=r(zft,"qdqbert"),zft.forEach(t),npo=r(CS," \u2014 "),vN=n(CS,"A",{href:!0});var Wft=s(vN);spo=r(Wft,"BertTokenizer"),Wft.forEach(t),lpo=r(CS," or "),FN=n(CS,"A",{href:!0});var Qft=s(FN);ipo=r(Qft,"BertTokenizerFast"),Qft.forEach(t),dpo=r(CS," (QDQBert model)"),CS.forEach(t),cpo=i(S),wh=n(S,"LI",{});var gye=s(wh);qie=n(gye,"STRONG",{});var Hft=s(qie);fpo=r(Hft,"rag"),Hft.forEach(t),mpo=r(gye," \u2014 "),TN=n(gye,"A",{href:!0});var Uft=s(TN);gpo=r(Uft,"RagTokenizer"),Uft.forEach(t),hpo=r(gye," (RAG model)"),gye.forEach(t),ppo=i(S),Rs=n(S,"LI",{});var wS=s(Rs);jie=n(wS,"STRONG",{});var Jft=s(jie);_po=r(Jft,"realm"),Jft.forEach(t),upo=r(wS," \u2014 "),MN=n(wS,"A",{href:!0});var Yft=s(MN);bpo=r(Yft,"RealmTokenizer"),Yft.forEach(t),vpo=r(wS," or "),EN=n(wS,"A",{href:!0});var Kft=s(EN);Fpo=r(Kft,"RealmTokenizerFast"),Kft.forEach(t),Tpo=r(wS," (REALM model)"),wS.forEach(t),Mpo=i(S),Ps=n(S,"LI",{});var AS=s(Ps);Die=n(AS,"STRONG",{});var Zft=s(Die);Epo=r(Zft,"reformer"),Zft.forEach(t),Cpo=r(AS," \u2014 "),CN=n(AS,"A",{href:!0});var emt=s(CN);wpo=r(emt,"ReformerTokenizer"),emt.forEach(t),Apo=r(AS," or "),wN=n(AS,"A",{href:!0});var omt=s(wN);Lpo=r(omt,"ReformerTokenizerFast"),omt.forEach(t),ypo=r(AS," (Reformer model)"),AS.forEach(t),xpo=i(S),Bs=n(S,"LI",{});var LS=s(Bs);Gie=n(LS,"STRONG",{});var rmt=s(Gie);$po=r(rmt,"rembert"),rmt.forEach(t),kpo=r(LS," \u2014 "),AN=n(LS,"A",{href:!0});var tmt=s(AN);Spo=r(tmt,"RemBertTokenizer"),tmt.forEach(t),Rpo=r(LS," or "),LN=n(LS,"A",{href:!0});var amt=s(LN);Ppo=r(amt,"RemBertTokenizerFast"),amt.forEach(t),Bpo=r(LS," (RemBERT model)"),LS.forEach(t),Ipo=i(S),Is=n(S,"LI",{});var yS=s(Is);Oie=n(yS,"STRONG",{});var nmt=s(Oie);Npo=r(nmt,"retribert"),nmt.forEach(t),qpo=r(yS," \u2014 "),yN=n(yS,"A",{href:!0});var smt=s(yN);jpo=r(smt,"RetriBertTokenizer"),smt.forEach(t),Dpo=r(yS," or "),xN=n(yS,"A",{href:!0});var lmt=s(xN);Gpo=r(lmt,"RetriBertTokenizerFast"),lmt.forEach(t),Opo=r(yS," (RetriBERT model)"),yS.forEach(t),Vpo=i(S),Ns=n(S,"LI",{});var xS=s(Ns);Vie=n(xS,"STRONG",{});var imt=s(Vie);Xpo=r(imt,"roberta"),imt.forEach(t),zpo=r(xS," \u2014 "),$N=n(xS,"A",{href:!0});var dmt=s($N);Wpo=r(dmt,"RobertaTokenizer"),dmt.forEach(t),Qpo=r(xS," or "),kN=n(xS,"A",{href:!0});var cmt=s(kN);Hpo=r(cmt,"RobertaTokenizerFast"),cmt.forEach(t),Upo=r(xS," (RoBERTa model)"),xS.forEach(t),Jpo=i(S),qs=n(S,"LI",{});var $S=s(qs);Xie=n($S,"STRONG",{});var fmt=s(Xie);Ypo=r(fmt,"roformer"),fmt.forEach(t),Kpo=r($S," \u2014 "),SN=n($S,"A",{href:!0});var mmt=s(SN);Zpo=r(mmt,"RoFormerTokenizer"),mmt.forEach(t),e_o=r($S," or "),RN=n($S,"A",{href:!0});var gmt=s(RN);o_o=r(gmt,"RoFormerTokenizerFast"),gmt.forEach(t),r_o=r($S," (RoFormer model)"),$S.forEach(t),t_o=i(S),Ah=n(S,"LI",{});var hye=s(Ah);zie=n(hye,"STRONG",{});var hmt=s(zie);a_o=r(hmt,"speech_to_text"),hmt.forEach(t),n_o=r(hye," \u2014 "),PN=n(hye,"A",{href:!0});var pmt=s(PN);s_o=r(pmt,"Speech2TextTokenizer"),pmt.forEach(t),l_o=r(hye," (Speech2Text model)"),hye.forEach(t),i_o=i(S),Lh=n(S,"LI",{});var pye=s(Lh);Wie=n(pye,"STRONG",{});var _mt=s(Wie);d_o=r(_mt,"speech_to_text_2"),_mt.forEach(t),c_o=r(pye," \u2014 "),BN=n(pye,"A",{href:!0});var umt=s(BN);f_o=r(umt,"Speech2Text2Tokenizer"),umt.forEach(t),m_o=r(pye," (Speech2Text2 model)"),pye.forEach(t),g_o=i(S),js=n(S,"LI",{});var kS=s(js);Qie=n(kS,"STRONG",{});var bmt=s(Qie);h_o=r(bmt,"splinter"),bmt.forEach(t),p_o=r(kS," \u2014 "),IN=n(kS,"A",{href:!0});var vmt=s(IN);__o=r(vmt,"SplinterTokenizer"),vmt.forEach(t),u_o=r(kS," or "),NN=n(kS,"A",{href:!0});var Fmt=s(NN);b_o=r(Fmt,"SplinterTokenizerFast"),Fmt.forEach(t),v_o=r(kS," (Splinter model)"),kS.forEach(t),F_o=i(S),Ds=n(S,"LI",{});var SS=s(Ds);Hie=n(SS,"STRONG",{});var Tmt=s(Hie);T_o=r(Tmt,"squeezebert"),Tmt.forEach(t),M_o=r(SS," \u2014 "),qN=n(SS,"A",{href:!0});var Mmt=s(qN);E_o=r(Mmt,"SqueezeBertTokenizer"),Mmt.forEach(t),C_o=r(SS," or "),jN=n(SS,"A",{href:!0});var Emt=s(jN);w_o=r(Emt,"SqueezeBertTokenizerFast"),Emt.forEach(t),A_o=r(SS," (SqueezeBERT model)"),SS.forEach(t),L_o=i(S),Gs=n(S,"LI",{});var RS=s(Gs);Uie=n(RS,"STRONG",{});var Cmt=s(Uie);y_o=r(Cmt,"t5"),Cmt.forEach(t),x_o=r(RS," \u2014 "),DN=n(RS,"A",{href:!0});var wmt=s(DN);$_o=r(wmt,"T5Tokenizer"),wmt.forEach(t),k_o=r(RS," or "),GN=n(RS,"A",{href:!0});var Amt=s(GN);S_o=r(Amt,"T5TokenizerFast"),Amt.forEach(t),R_o=r(RS," (T5 model)"),RS.forEach(t),P_o=i(S),yh=n(S,"LI",{});var _ye=s(yh);Jie=n(_ye,"STRONG",{});var Lmt=s(Jie);B_o=r(Lmt,"tapas"),Lmt.forEach(t),I_o=r(_ye," \u2014 "),ON=n(_ye,"A",{href:!0});var ymt=s(ON);N_o=r(ymt,"TapasTokenizer"),ymt.forEach(t),q_o=r(_ye," (TAPAS model)"),_ye.forEach(t),j_o=i(S),xh=n(S,"LI",{});var uye=s(xh);Yie=n(uye,"STRONG",{});var xmt=s(Yie);D_o=r(xmt,"tapex"),xmt.forEach(t),G_o=r(uye," \u2014 "),VN=n(uye,"A",{href:!0});var $mt=s(VN);O_o=r($mt,"TapexTokenizer"),$mt.forEach(t),V_o=r(uye," (TAPEX model)"),uye.forEach(t),X_o=i(S),$h=n(S,"LI",{});var bye=s($h);Kie=n(bye,"STRONG",{});var kmt=s(Kie);z_o=r(kmt,"transfo-xl"),kmt.forEach(t),W_o=r(bye," \u2014 "),XN=n(bye,"A",{href:!0});var Smt=s(XN);Q_o=r(Smt,"TransfoXLTokenizer"),Smt.forEach(t),H_o=r(bye," (Transformer-XL model)"),bye.forEach(t),U_o=i(S),Os=n(S,"LI",{});var PS=s(Os);Zie=n(PS,"STRONG",{});var Rmt=s(Zie);J_o=r(Rmt,"vilt"),Rmt.forEach(t),Y_o=r(PS," \u2014 "),zN=n(PS,"A",{href:!0});var Pmt=s(zN);K_o=r(Pmt,"BertTokenizer"),Pmt.forEach(t),Z_o=r(PS," or "),WN=n(PS,"A",{href:!0});var Bmt=s(WN);euo=r(Bmt,"BertTokenizerFast"),Bmt.forEach(t),ouo=r(PS," (ViLT model)"),PS.forEach(t),ruo=i(S),Vs=n(S,"LI",{});var BS=s(Vs);ede=n(BS,"STRONG",{});var Imt=s(ede);tuo=r(Imt,"visual_bert"),Imt.forEach(t),auo=r(BS," \u2014 "),QN=n(BS,"A",{href:!0});var Nmt=s(QN);nuo=r(Nmt,"BertTokenizer"),Nmt.forEach(t),suo=r(BS," or "),HN=n(BS,"A",{href:!0});var qmt=s(HN);luo=r(qmt,"BertTokenizerFast"),qmt.forEach(t),iuo=r(BS," (VisualBERT model)"),BS.forEach(t),duo=i(S),kh=n(S,"LI",{});var vye=s(kh);ode=n(vye,"STRONG",{});var jmt=s(ode);cuo=r(jmt,"wav2vec2"),jmt.forEach(t),fuo=r(vye," \u2014 "),UN=n(vye,"A",{href:!0});var Dmt=s(UN);muo=r(Dmt,"Wav2Vec2CTCTokenizer"),Dmt.forEach(t),guo=r(vye," (Wav2Vec2 model)"),vye.forEach(t),huo=i(S),Sh=n(S,"LI",{});var Fye=s(Sh);rde=n(Fye,"STRONG",{});var Gmt=s(rde);puo=r(Gmt,"wav2vec2-conformer"),Gmt.forEach(t),_uo=r(Fye," \u2014 "),JN=n(Fye,"A",{href:!0});var Omt=s(JN);uuo=r(Omt,"Wav2Vec2CTCTokenizer"),Omt.forEach(t),buo=r(Fye," (Wav2Vec2-Conformer model)"),Fye.forEach(t),vuo=i(S),Rh=n(S,"LI",{});var Tye=s(Rh);tde=n(Tye,"STRONG",{});var Vmt=s(tde);Fuo=r(Vmt,"wav2vec2_phoneme"),Vmt.forEach(t),Tuo=r(Tye," \u2014 "),YN=n(Tye,"A",{href:!0});var Xmt=s(YN);Muo=r(Xmt,"Wav2Vec2PhonemeCTCTokenizer"),Xmt.forEach(t),Euo=r(Tye," (Wav2Vec2Phoneme model)"),Tye.forEach(t),Cuo=i(S),Xs=n(S,"LI",{});var IS=s(Xs);ade=n(IS,"STRONG",{});var zmt=s(ade);wuo=r(zmt,"xglm"),zmt.forEach(t),Auo=r(IS," \u2014 "),KN=n(IS,"A",{href:!0});var Wmt=s(KN);Luo=r(Wmt,"XGLMTokenizer"),Wmt.forEach(t),yuo=r(IS," or "),ZN=n(IS,"A",{href:!0});var Qmt=s(ZN);xuo=r(Qmt,"XGLMTokenizerFast"),Qmt.forEach(t),$uo=r(IS," (XGLM model)"),IS.forEach(t),kuo=i(S),Ph=n(S,"LI",{});var Mye=s(Ph);nde=n(Mye,"STRONG",{});var Hmt=s(nde);Suo=r(Hmt,"xlm"),Hmt.forEach(t),Ruo=r(Mye," \u2014 "),eq=n(Mye,"A",{href:!0});var Umt=s(eq);Puo=r(Umt,"XLMTokenizer"),Umt.forEach(t),Buo=r(Mye," (XLM model)"),Mye.forEach(t),Iuo=i(S),Bh=n(S,"LI",{});var Eye=s(Bh);sde=n(Eye,"STRONG",{});var Jmt=s(sde);Nuo=r(Jmt,"xlm-prophetnet"),Jmt.forEach(t),quo=r(Eye," \u2014 "),oq=n(Eye,"A",{href:!0});var Ymt=s(oq);juo=r(Ymt,"XLMProphetNetTokenizer"),Ymt.forEach(t),Duo=r(Eye," (XLM-ProphetNet model)"),Eye.forEach(t),Guo=i(S),zs=n(S,"LI",{});var NS=s(zs);lde=n(NS,"STRONG",{});var Kmt=s(lde);Ouo=r(Kmt,"xlm-roberta"),Kmt.forEach(t),Vuo=r(NS," \u2014 "),rq=n(NS,"A",{href:!0});var Zmt=s(rq);Xuo=r(Zmt,"XLMRobertaTokenizer"),Zmt.forEach(t),zuo=r(NS," or "),tq=n(NS,"A",{href:!0});var egt=s(tq);Wuo=r(egt,"XLMRobertaTokenizerFast"),egt.forEach(t),Quo=r(NS," (XLM-RoBERTa model)"),NS.forEach(t),Huo=i(S),Ws=n(S,"LI",{});var qS=s(Ws);ide=n(qS,"STRONG",{});var ogt=s(ide);Uuo=r(ogt,"xlm-roberta-xl"),ogt.forEach(t),Juo=r(qS," \u2014 "),aq=n(qS,"A",{href:!0});var rgt=s(aq);Yuo=r(rgt,"RobertaTokenizer"),rgt.forEach(t),Kuo=r(qS," or "),nq=n(qS,"A",{href:!0});var tgt=s(nq);Zuo=r(tgt,"RobertaTokenizerFast"),tgt.forEach(t),e1o=r(qS," (XLM-RoBERTa-XL model)"),qS.forEach(t),o1o=i(S),Qs=n(S,"LI",{});var jS=s(Qs);dde=n(jS,"STRONG",{});var agt=s(dde);r1o=r(agt,"xlnet"),agt.forEach(t),t1o=r(jS," \u2014 "),sq=n(jS,"A",{href:!0});var ngt=s(sq);a1o=r(ngt,"XLNetTokenizer"),ngt.forEach(t),n1o=r(jS," or "),lq=n(jS,"A",{href:!0});var sgt=s(lq);s1o=r(sgt,"XLNetTokenizerFast"),sgt.forEach(t),l1o=r(jS," (XLNet model)"),jS.forEach(t),i1o=i(S),Hs=n(S,"LI",{});var DS=s(Hs);cde=n(DS,"STRONG",{});var lgt=s(cde);d1o=r(lgt,"yoso"),lgt.forEach(t),c1o=r(DS," \u2014 "),iq=n(DS,"A",{href:!0});var igt=s(iq);f1o=r(igt,"AlbertTokenizer"),igt.forEach(t),m1o=r(DS," or "),dq=n(DS,"A",{href:!0});var dgt=s(dq);g1o=r(dgt,"AlbertTokenizerFast"),dgt.forEach(t),h1o=r(DS," (YOSO model)"),DS.forEach(t),S.forEach(t),p1o=i(ol),T(Ih.$$.fragment,ol),ol.forEach(t),_1o=i(el),Nh=n(el,"DIV",{class:!0});var zWe=s(Nh);T(A6.$$.fragment,zWe),u1o=i(zWe),fde=n(zWe,"P",{});var cgt=s(fde);b1o=r(cgt,"Register a new tokenizer in this mapping."),cgt.forEach(t),zWe.forEach(t),el.forEach(t),XXe=i(f),Di=n(f,"H2",{class:!0});var WWe=s(Di);qh=n(WWe,"A",{id:!0,class:!0,href:!0});var fgt=s(qh);mde=n(fgt,"SPAN",{});var mgt=s(mde);T(L6.$$.fragment,mgt),mgt.forEach(t),fgt.forEach(t),v1o=i(WWe),gde=n(WWe,"SPAN",{});var ggt=s(gde);F1o=r(ggt,"AutoFeatureExtractor"),ggt.forEach(t),WWe.forEach(t),zXe=i(f),yo=n(f,"DIV",{class:!0});var rl=s(yo);T(y6.$$.fragment,rl),T1o=i(rl),x6=n(rl,"P",{});var QWe=s(x6);M1o=r(QWe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),cq=n(QWe,"A",{href:!0});var hgt=s(cq);E1o=r(hgt,"AutoFeatureExtractor.from_pretrained()"),hgt.forEach(t),C1o=r(QWe," class method."),QWe.forEach(t),w1o=i(rl),$6=n(rl,"P",{});var HWe=s($6);A1o=r(HWe,"This class cannot be instantiated directly using "),hde=n(HWe,"CODE",{});var pgt=s(hde);L1o=r(pgt,"__init__()"),pgt.forEach(t),y1o=r(HWe," (throws an error)."),HWe.forEach(t),x1o=i(rl),Ue=n(rl,"DIV",{class:!0});var na=s(Ue);T(k6.$$.fragment,na),$1o=i(na),pde=n(na,"P",{});var _gt=s(pde);k1o=r(_gt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),_gt.forEach(t),S1o=i(na),Ba=n(na,"P",{});var _w=s(Ba);R1o=r(_w,"The feature extractor class to instantiate is selected based on the "),_de=n(_w,"CODE",{});var ugt=s(_de);P1o=r(ugt,"model_type"),ugt.forEach(t),B1o=r(_w,` property of the config object
(either passed as an argument or loaded from `),ude=n(_w,"CODE",{});var bgt=s(ude);I1o=r(bgt,"pretrained_model_name_or_path"),bgt.forEach(t),N1o=r(_w,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),bde=n(_w,"CODE",{});var vgt=s(bde);q1o=r(vgt,"pretrained_model_name_or_path"),vgt.forEach(t),j1o=r(_w,":"),_w.forEach(t),D1o=i(na),J=n(na,"UL",{});var K=s(J);jh=n(K,"LI",{});var Cye=s(jh);vde=n(Cye,"STRONG",{});var Fgt=s(vde);G1o=r(Fgt,"beit"),Fgt.forEach(t),O1o=r(Cye," \u2014 "),fq=n(Cye,"A",{href:!0});var Tgt=s(fq);V1o=r(Tgt,"BeitFeatureExtractor"),Tgt.forEach(t),X1o=r(Cye," (BEiT model)"),Cye.forEach(t),z1o=i(K),Dh=n(K,"LI",{});var wye=s(Dh);Fde=n(wye,"STRONG",{});var Mgt=s(Fde);W1o=r(Mgt,"clip"),Mgt.forEach(t),Q1o=r(wye," \u2014 "),mq=n(wye,"A",{href:!0});var Egt=s(mq);H1o=r(Egt,"CLIPFeatureExtractor"),Egt.forEach(t),U1o=r(wye," (CLIP model)"),wye.forEach(t),J1o=i(K),Gh=n(K,"LI",{});var Aye=s(Gh);Tde=n(Aye,"STRONG",{});var Cgt=s(Tde);Y1o=r(Cgt,"convnext"),Cgt.forEach(t),K1o=r(Aye," \u2014 "),gq=n(Aye,"A",{href:!0});var wgt=s(gq);Z1o=r(wgt,"ConvNextFeatureExtractor"),wgt.forEach(t),e2o=r(Aye," (ConvNeXT model)"),Aye.forEach(t),o2o=i(K),Oh=n(K,"LI",{});var Lye=s(Oh);Mde=n(Lye,"STRONG",{});var Agt=s(Mde);r2o=r(Agt,"cvt"),Agt.forEach(t),t2o=r(Lye," \u2014 "),hq=n(Lye,"A",{href:!0});var Lgt=s(hq);a2o=r(Lgt,"ConvNextFeatureExtractor"),Lgt.forEach(t),n2o=r(Lye," (CvT model)"),Lye.forEach(t),s2o=i(K),Vh=n(K,"LI",{});var yye=s(Vh);Ede=n(yye,"STRONG",{});var ygt=s(Ede);l2o=r(ygt,"data2vec-audio"),ygt.forEach(t),i2o=r(yye," \u2014 "),pq=n(yye,"A",{href:!0});var xgt=s(pq);d2o=r(xgt,"Wav2Vec2FeatureExtractor"),xgt.forEach(t),c2o=r(yye," (Data2VecAudio model)"),yye.forEach(t),f2o=i(K),Xh=n(K,"LI",{});var xye=s(Xh);Cde=n(xye,"STRONG",{});var $gt=s(Cde);m2o=r($gt,"data2vec-vision"),$gt.forEach(t),g2o=r(xye," \u2014 "),_q=n(xye,"A",{href:!0});var kgt=s(_q);h2o=r(kgt,"BeitFeatureExtractor"),kgt.forEach(t),p2o=r(xye," (Data2VecVision model)"),xye.forEach(t),_2o=i(K),zh=n(K,"LI",{});var $ye=s(zh);wde=n($ye,"STRONG",{});var Sgt=s(wde);u2o=r(Sgt,"deit"),Sgt.forEach(t),b2o=r($ye," \u2014 "),uq=n($ye,"A",{href:!0});var Rgt=s(uq);v2o=r(Rgt,"DeiTFeatureExtractor"),Rgt.forEach(t),F2o=r($ye," (DeiT model)"),$ye.forEach(t),T2o=i(K),Wh=n(K,"LI",{});var kye=s(Wh);Ade=n(kye,"STRONG",{});var Pgt=s(Ade);M2o=r(Pgt,"detr"),Pgt.forEach(t),E2o=r(kye," \u2014 "),bq=n(kye,"A",{href:!0});var Bgt=s(bq);C2o=r(Bgt,"DetrFeatureExtractor"),Bgt.forEach(t),w2o=r(kye," (DETR model)"),kye.forEach(t),A2o=i(K),Qh=n(K,"LI",{});var Sye=s(Qh);Lde=n(Sye,"STRONG",{});var Igt=s(Lde);L2o=r(Igt,"dpt"),Igt.forEach(t),y2o=r(Sye," \u2014 "),vq=n(Sye,"A",{href:!0});var Ngt=s(vq);x2o=r(Ngt,"DPTFeatureExtractor"),Ngt.forEach(t),$2o=r(Sye," (DPT model)"),Sye.forEach(t),k2o=i(K),Hh=n(K,"LI",{});var Rye=s(Hh);yde=n(Rye,"STRONG",{});var qgt=s(yde);S2o=r(qgt,"flava"),qgt.forEach(t),R2o=r(Rye," \u2014 "),Fq=n(Rye,"A",{href:!0});var jgt=s(Fq);P2o=r(jgt,"FlavaFeatureExtractor"),jgt.forEach(t),B2o=r(Rye," (FLAVA model)"),Rye.forEach(t),I2o=i(K),Uh=n(K,"LI",{});var Pye=s(Uh);xde=n(Pye,"STRONG",{});var Dgt=s(xde);N2o=r(Dgt,"glpn"),Dgt.forEach(t),q2o=r(Pye," \u2014 "),Tq=n(Pye,"A",{href:!0});var Ggt=s(Tq);j2o=r(Ggt,"GLPNFeatureExtractor"),Ggt.forEach(t),D2o=r(Pye," (GLPN model)"),Pye.forEach(t),G2o=i(K),Jh=n(K,"LI",{});var Bye=s(Jh);$de=n(Bye,"STRONG",{});var Ogt=s($de);O2o=r(Ogt,"groupvit"),Ogt.forEach(t),V2o=r(Bye," \u2014 "),Mq=n(Bye,"A",{href:!0});var Vgt=s(Mq);X2o=r(Vgt,"CLIPFeatureExtractor"),Vgt.forEach(t),z2o=r(Bye," (GroupViT model)"),Bye.forEach(t),W2o=i(K),Yh=n(K,"LI",{});var Iye=s(Yh);kde=n(Iye,"STRONG",{});var Xgt=s(kde);Q2o=r(Xgt,"hubert"),Xgt.forEach(t),H2o=r(Iye," \u2014 "),Eq=n(Iye,"A",{href:!0});var zgt=s(Eq);U2o=r(zgt,"Wav2Vec2FeatureExtractor"),zgt.forEach(t),J2o=r(Iye," (Hubert model)"),Iye.forEach(t),Y2o=i(K),Kh=n(K,"LI",{});var Nye=s(Kh);Sde=n(Nye,"STRONG",{});var Wgt=s(Sde);K2o=r(Wgt,"imagegpt"),Wgt.forEach(t),Z2o=r(Nye," \u2014 "),Cq=n(Nye,"A",{href:!0});var Qgt=s(Cq);ebo=r(Qgt,"ImageGPTFeatureExtractor"),Qgt.forEach(t),obo=r(Nye," (ImageGPT model)"),Nye.forEach(t),rbo=i(K),Zh=n(K,"LI",{});var qye=s(Zh);Rde=n(qye,"STRONG",{});var Hgt=s(Rde);tbo=r(Hgt,"layoutlmv2"),Hgt.forEach(t),abo=r(qye," \u2014 "),wq=n(qye,"A",{href:!0});var Ugt=s(wq);nbo=r(Ugt,"LayoutLMv2FeatureExtractor"),Ugt.forEach(t),sbo=r(qye," (LayoutLMv2 model)"),qye.forEach(t),lbo=i(K),ep=n(K,"LI",{});var jye=s(ep);Pde=n(jye,"STRONG",{});var Jgt=s(Pde);ibo=r(Jgt,"layoutlmv3"),Jgt.forEach(t),dbo=r(jye," \u2014 "),Aq=n(jye,"A",{href:!0});var Ygt=s(Aq);cbo=r(Ygt,"LayoutLMv3FeatureExtractor"),Ygt.forEach(t),fbo=r(jye," (LayoutLMv3 model)"),jye.forEach(t),mbo=i(K),op=n(K,"LI",{});var Dye=s(op);Bde=n(Dye,"STRONG",{});var Kgt=s(Bde);gbo=r(Kgt,"levit"),Kgt.forEach(t),hbo=r(Dye," \u2014 "),Lq=n(Dye,"A",{href:!0});var Zgt=s(Lq);pbo=r(Zgt,"LevitFeatureExtractor"),Zgt.forEach(t),_bo=r(Dye," (LeViT model)"),Dye.forEach(t),ubo=i(K),rp=n(K,"LI",{});var Gye=s(rp);Ide=n(Gye,"STRONG",{});var eht=s(Ide);bbo=r(eht,"maskformer"),eht.forEach(t),vbo=r(Gye," \u2014 "),yq=n(Gye,"A",{href:!0});var oht=s(yq);Fbo=r(oht,"MaskFormerFeatureExtractor"),oht.forEach(t),Tbo=r(Gye," (MaskFormer model)"),Gye.forEach(t),Mbo=i(K),tp=n(K,"LI",{});var Oye=s(tp);Nde=n(Oye,"STRONG",{});var rht=s(Nde);Ebo=r(rht,"mctct"),rht.forEach(t),Cbo=r(Oye," \u2014 "),xq=n(Oye,"A",{href:!0});var tht=s(xq);wbo=r(tht,"MCTCTFeatureExtractor"),tht.forEach(t),Abo=r(Oye," (M-CTC-T model)"),Oye.forEach(t),Lbo=i(K),ap=n(K,"LI",{});var Vye=s(ap);qde=n(Vye,"STRONG",{});var aht=s(qde);ybo=r(aht,"mobilevit"),aht.forEach(t),xbo=r(Vye," \u2014 "),$q=n(Vye,"A",{href:!0});var nht=s($q);$bo=r(nht,"MobileViTFeatureExtractor"),nht.forEach(t),kbo=r(Vye," (MobileViT model)"),Vye.forEach(t),Sbo=i(K),np=n(K,"LI",{});var Xye=s(np);jde=n(Xye,"STRONG",{});var sht=s(jde);Rbo=r(sht,"owlvit"),sht.forEach(t),Pbo=r(Xye," \u2014 "),kq=n(Xye,"A",{href:!0});var lht=s(kq);Bbo=r(lht,"OwlViTFeatureExtractor"),lht.forEach(t),Ibo=r(Xye," (OWL-ViT model)"),Xye.forEach(t),Nbo=i(K),sp=n(K,"LI",{});var zye=s(sp);Dde=n(zye,"STRONG",{});var iht=s(Dde);qbo=r(iht,"perceiver"),iht.forEach(t),jbo=r(zye," \u2014 "),Sq=n(zye,"A",{href:!0});var dht=s(Sq);Dbo=r(dht,"PerceiverFeatureExtractor"),dht.forEach(t),Gbo=r(zye," (Perceiver model)"),zye.forEach(t),Obo=i(K),lp=n(K,"LI",{});var Wye=s(lp);Gde=n(Wye,"STRONG",{});var cht=s(Gde);Vbo=r(cht,"poolformer"),cht.forEach(t),Xbo=r(Wye," \u2014 "),Rq=n(Wye,"A",{href:!0});var fht=s(Rq);zbo=r(fht,"PoolFormerFeatureExtractor"),fht.forEach(t),Wbo=r(Wye," (PoolFormer model)"),Wye.forEach(t),Qbo=i(K),ip=n(K,"LI",{});var Qye=s(ip);Ode=n(Qye,"STRONG",{});var mht=s(Ode);Hbo=r(mht,"regnet"),mht.forEach(t),Ubo=r(Qye," \u2014 "),Pq=n(Qye,"A",{href:!0});var ght=s(Pq);Jbo=r(ght,"ConvNextFeatureExtractor"),ght.forEach(t),Ybo=r(Qye," (RegNet model)"),Qye.forEach(t),Kbo=i(K),dp=n(K,"LI",{});var Hye=s(dp);Vde=n(Hye,"STRONG",{});var hht=s(Vde);Zbo=r(hht,"resnet"),hht.forEach(t),e3o=r(Hye," \u2014 "),Bq=n(Hye,"A",{href:!0});var pht=s(Bq);o3o=r(pht,"ConvNextFeatureExtractor"),pht.forEach(t),r3o=r(Hye," (ResNet model)"),Hye.forEach(t),t3o=i(K),cp=n(K,"LI",{});var Uye=s(cp);Xde=n(Uye,"STRONG",{});var _ht=s(Xde);a3o=r(_ht,"segformer"),_ht.forEach(t),n3o=r(Uye," \u2014 "),Iq=n(Uye,"A",{href:!0});var uht=s(Iq);s3o=r(uht,"SegformerFeatureExtractor"),uht.forEach(t),l3o=r(Uye," (SegFormer model)"),Uye.forEach(t),i3o=i(K),fp=n(K,"LI",{});var Jye=s(fp);zde=n(Jye,"STRONG",{});var bht=s(zde);d3o=r(bht,"speech_to_text"),bht.forEach(t),c3o=r(Jye," \u2014 "),Nq=n(Jye,"A",{href:!0});var vht=s(Nq);f3o=r(vht,"Speech2TextFeatureExtractor"),vht.forEach(t),m3o=r(Jye," (Speech2Text model)"),Jye.forEach(t),g3o=i(K),mp=n(K,"LI",{});var Yye=s(mp);Wde=n(Yye,"STRONG",{});var Fht=s(Wde);h3o=r(Fht,"swin"),Fht.forEach(t),p3o=r(Yye," \u2014 "),qq=n(Yye,"A",{href:!0});var Tht=s(qq);_3o=r(Tht,"ViTFeatureExtractor"),Tht.forEach(t),u3o=r(Yye," (Swin Transformer model)"),Yye.forEach(t),b3o=i(K),gp=n(K,"LI",{});var Kye=s(gp);Qde=n(Kye,"STRONG",{});var Mht=s(Qde);v3o=r(Mht,"van"),Mht.forEach(t),F3o=r(Kye," \u2014 "),jq=n(Kye,"A",{href:!0});var Eht=s(jq);T3o=r(Eht,"ConvNextFeatureExtractor"),Eht.forEach(t),M3o=r(Kye," (VAN model)"),Kye.forEach(t),E3o=i(K),hp=n(K,"LI",{});var Zye=s(hp);Hde=n(Zye,"STRONG",{});var Cht=s(Hde);C3o=r(Cht,"vilt"),Cht.forEach(t),w3o=r(Zye," \u2014 "),Dq=n(Zye,"A",{href:!0});var wht=s(Dq);A3o=r(wht,"ViltFeatureExtractor"),wht.forEach(t),L3o=r(Zye," (ViLT model)"),Zye.forEach(t),y3o=i(K),pp=n(K,"LI",{});var exe=s(pp);Ude=n(exe,"STRONG",{});var Aht=s(Ude);x3o=r(Aht,"vit"),Aht.forEach(t),$3o=r(exe," \u2014 "),Gq=n(exe,"A",{href:!0});var Lht=s(Gq);k3o=r(Lht,"ViTFeatureExtractor"),Lht.forEach(t),S3o=r(exe," (ViT model)"),exe.forEach(t),R3o=i(K),_p=n(K,"LI",{});var oxe=s(_p);Jde=n(oxe,"STRONG",{});var yht=s(Jde);P3o=r(yht,"vit_mae"),yht.forEach(t),B3o=r(oxe," \u2014 "),Oq=n(oxe,"A",{href:!0});var xht=s(Oq);I3o=r(xht,"ViTFeatureExtractor"),xht.forEach(t),N3o=r(oxe," (ViTMAE model)"),oxe.forEach(t),q3o=i(K),up=n(K,"LI",{});var rxe=s(up);Yde=n(rxe,"STRONG",{});var $ht=s(Yde);j3o=r($ht,"wav2vec2"),$ht.forEach(t),D3o=r(rxe," \u2014 "),Vq=n(rxe,"A",{href:!0});var kht=s(Vq);G3o=r(kht,"Wav2Vec2FeatureExtractor"),kht.forEach(t),O3o=r(rxe," (Wav2Vec2 model)"),rxe.forEach(t),V3o=i(K),bp=n(K,"LI",{});var txe=s(bp);Kde=n(txe,"STRONG",{});var Sht=s(Kde);X3o=r(Sht,"wav2vec2-conformer"),Sht.forEach(t),z3o=r(txe," \u2014 "),Xq=n(txe,"A",{href:!0});var Rht=s(Xq);W3o=r(Rht,"Wav2Vec2FeatureExtractor"),Rht.forEach(t),Q3o=r(txe," (Wav2Vec2-Conformer model)"),txe.forEach(t),H3o=i(K),vp=n(K,"LI",{});var axe=s(vp);Zde=n(axe,"STRONG",{});var Pht=s(Zde);U3o=r(Pht,"yolos"),Pht.forEach(t),J3o=r(axe," \u2014 "),zq=n(axe,"A",{href:!0});var Bht=s(zq);Y3o=r(Bht,"YolosFeatureExtractor"),Bht.forEach(t),K3o=r(axe," (YOLOS model)"),axe.forEach(t),K.forEach(t),Z3o=i(na),T(Fp.$$.fragment,na),evo=i(na),T(Tp.$$.fragment,na),na.forEach(t),ovo=i(rl),Mp=n(rl,"DIV",{class:!0});var UWe=s(Mp);T(S6.$$.fragment,UWe),rvo=i(UWe),ece=n(UWe,"P",{});var Iht=s(ece);tvo=r(Iht,"Register a new feature extractor for this class."),Iht.forEach(t),UWe.forEach(t),rl.forEach(t),WXe=i(f),Gi=n(f,"H2",{class:!0});var JWe=s(Gi);Ep=n(JWe,"A",{id:!0,class:!0,href:!0});var Nht=s(Ep);oce=n(Nht,"SPAN",{});var qht=s(oce);T(R6.$$.fragment,qht),qht.forEach(t),Nht.forEach(t),avo=i(JWe),rce=n(JWe,"SPAN",{});var jht=s(rce);nvo=r(jht,"AutoProcessor"),jht.forEach(t),JWe.forEach(t),QXe=i(f),xo=n(f,"DIV",{class:!0});var tl=s(xo);T(P6.$$.fragment,tl),svo=i(tl),B6=n(tl,"P",{});var YWe=s(B6);lvo=r(YWe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Wq=n(YWe,"A",{href:!0});var Dht=s(Wq);ivo=r(Dht,"AutoProcessor.from_pretrained()"),Dht.forEach(t),dvo=r(YWe," class method."),YWe.forEach(t),cvo=i(tl),I6=n(tl,"P",{});var KWe=s(I6);fvo=r(KWe,"This class cannot be instantiated directly using "),tce=n(KWe,"CODE",{});var Ght=s(tce);mvo=r(Ght,"__init__()"),Ght.forEach(t),gvo=r(KWe," (throws an error)."),KWe.forEach(t),hvo=i(tl),Je=n(tl,"DIV",{class:!0});var sa=s(Je);T(N6.$$.fragment,sa),pvo=i(sa),ace=n(sa,"P",{});var Oht=s(ace);_vo=r(Oht,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Oht.forEach(t),uvo=i(sa),Oi=n(sa,"P",{});var Zre=s(Oi);bvo=r(Zre,"The processor class to instantiate is selected based on the "),nce=n(Zre,"CODE",{});var Vht=s(nce);vvo=r(Vht,"model_type"),Vht.forEach(t),Fvo=r(Zre,` property of the config object (either
passed as an argument or loaded from `),sce=n(Zre,"CODE",{});var Xht=s(sce);Tvo=r(Xht,"pretrained_model_name_or_path"),Xht.forEach(t),Mvo=r(Zre," if possible):"),Zre.forEach(t),Evo=i(sa),fe=n(sa,"UL",{});var _e=s(fe);Cp=n(_e,"LI",{});var nxe=s(Cp);lce=n(nxe,"STRONG",{});var zht=s(lce);Cvo=r(zht,"clip"),zht.forEach(t),wvo=r(nxe," \u2014 "),Qq=n(nxe,"A",{href:!0});var Wht=s(Qq);Avo=r(Wht,"CLIPProcessor"),Wht.forEach(t),Lvo=r(nxe," (CLIP model)"),nxe.forEach(t),yvo=i(_e),wp=n(_e,"LI",{});var sxe=s(wp);ice=n(sxe,"STRONG",{});var Qht=s(ice);xvo=r(Qht,"flava"),Qht.forEach(t),$vo=r(sxe," \u2014 "),Hq=n(sxe,"A",{href:!0});var Hht=s(Hq);kvo=r(Hht,"FlavaProcessor"),Hht.forEach(t),Svo=r(sxe," (FLAVA model)"),sxe.forEach(t),Rvo=i(_e),Ap=n(_e,"LI",{});var lxe=s(Ap);dce=n(lxe,"STRONG",{});var Uht=s(dce);Pvo=r(Uht,"groupvit"),Uht.forEach(t),Bvo=r(lxe," \u2014 "),Uq=n(lxe,"A",{href:!0});var Jht=s(Uq);Ivo=r(Jht,"CLIPProcessor"),Jht.forEach(t),Nvo=r(lxe," (GroupViT model)"),lxe.forEach(t),qvo=i(_e),Lp=n(_e,"LI",{});var ixe=s(Lp);cce=n(ixe,"STRONG",{});var Yht=s(cce);jvo=r(Yht,"layoutlmv2"),Yht.forEach(t),Dvo=r(ixe," \u2014 "),Jq=n(ixe,"A",{href:!0});var Kht=s(Jq);Gvo=r(Kht,"LayoutLMv2Processor"),Kht.forEach(t),Ovo=r(ixe," (LayoutLMv2 model)"),ixe.forEach(t),Vvo=i(_e),yp=n(_e,"LI",{});var dxe=s(yp);fce=n(dxe,"STRONG",{});var Zht=s(fce);Xvo=r(Zht,"layoutlmv3"),Zht.forEach(t),zvo=r(dxe," \u2014 "),Yq=n(dxe,"A",{href:!0});var ept=s(Yq);Wvo=r(ept,"LayoutLMv3Processor"),ept.forEach(t),Qvo=r(dxe," (LayoutLMv3 model)"),dxe.forEach(t),Hvo=i(_e),xp=n(_e,"LI",{});var cxe=s(xp);mce=n(cxe,"STRONG",{});var opt=s(mce);Uvo=r(opt,"layoutxlm"),opt.forEach(t),Jvo=r(cxe," \u2014 "),Kq=n(cxe,"A",{href:!0});var rpt=s(Kq);Yvo=r(rpt,"LayoutXLMProcessor"),rpt.forEach(t),Kvo=r(cxe," (LayoutXLM model)"),cxe.forEach(t),Zvo=i(_e),$p=n(_e,"LI",{});var fxe=s($p);gce=n(fxe,"STRONG",{});var tpt=s(gce);eFo=r(tpt,"owlvit"),tpt.forEach(t),oFo=r(fxe," \u2014 "),Zq=n(fxe,"A",{href:!0});var apt=s(Zq);rFo=r(apt,"OwlViTProcessor"),apt.forEach(t),tFo=r(fxe," (OWL-ViT model)"),fxe.forEach(t),aFo=i(_e),kp=n(_e,"LI",{});var mxe=s(kp);hce=n(mxe,"STRONG",{});var npt=s(hce);nFo=r(npt,"sew"),npt.forEach(t),sFo=r(mxe," \u2014 "),ej=n(mxe,"A",{href:!0});var spt=s(ej);lFo=r(spt,"Wav2Vec2Processor"),spt.forEach(t),iFo=r(mxe," (SEW model)"),mxe.forEach(t),dFo=i(_e),Sp=n(_e,"LI",{});var gxe=s(Sp);pce=n(gxe,"STRONG",{});var lpt=s(pce);cFo=r(lpt,"sew-d"),lpt.forEach(t),fFo=r(gxe," \u2014 "),oj=n(gxe,"A",{href:!0});var ipt=s(oj);mFo=r(ipt,"Wav2Vec2Processor"),ipt.forEach(t),gFo=r(gxe," (SEW-D model)"),gxe.forEach(t),hFo=i(_e),Rp=n(_e,"LI",{});var hxe=s(Rp);_ce=n(hxe,"STRONG",{});var dpt=s(_ce);pFo=r(dpt,"speech_to_text"),dpt.forEach(t),_Fo=r(hxe," \u2014 "),rj=n(hxe,"A",{href:!0});var cpt=s(rj);uFo=r(cpt,"Speech2TextProcessor"),cpt.forEach(t),bFo=r(hxe," (Speech2Text model)"),hxe.forEach(t),vFo=i(_e),Pp=n(_e,"LI",{});var pxe=s(Pp);uce=n(pxe,"STRONG",{});var fpt=s(uce);FFo=r(fpt,"speech_to_text_2"),fpt.forEach(t),TFo=r(pxe," \u2014 "),tj=n(pxe,"A",{href:!0});var mpt=s(tj);MFo=r(mpt,"Speech2Text2Processor"),mpt.forEach(t),EFo=r(pxe," (Speech2Text2 model)"),pxe.forEach(t),CFo=i(_e),Bp=n(_e,"LI",{});var _xe=s(Bp);bce=n(_xe,"STRONG",{});var gpt=s(bce);wFo=r(gpt,"trocr"),gpt.forEach(t),AFo=r(_xe," \u2014 "),aj=n(_xe,"A",{href:!0});var hpt=s(aj);LFo=r(hpt,"TrOCRProcessor"),hpt.forEach(t),yFo=r(_xe," (TrOCR model)"),_xe.forEach(t),xFo=i(_e),Ip=n(_e,"LI",{});var uxe=s(Ip);vce=n(uxe,"STRONG",{});var ppt=s(vce);$Fo=r(ppt,"unispeech"),ppt.forEach(t),kFo=r(uxe," \u2014 "),nj=n(uxe,"A",{href:!0});var _pt=s(nj);SFo=r(_pt,"Wav2Vec2Processor"),_pt.forEach(t),RFo=r(uxe," (UniSpeech model)"),uxe.forEach(t),PFo=i(_e),Np=n(_e,"LI",{});var bxe=s(Np);Fce=n(bxe,"STRONG",{});var upt=s(Fce);BFo=r(upt,"unispeech-sat"),upt.forEach(t),IFo=r(bxe," \u2014 "),sj=n(bxe,"A",{href:!0});var bpt=s(sj);NFo=r(bpt,"Wav2Vec2Processor"),bpt.forEach(t),qFo=r(bxe," (UniSpeechSat model)"),bxe.forEach(t),jFo=i(_e),qp=n(_e,"LI",{});var vxe=s(qp);Tce=n(vxe,"STRONG",{});var vpt=s(Tce);DFo=r(vpt,"vilt"),vpt.forEach(t),GFo=r(vxe," \u2014 "),lj=n(vxe,"A",{href:!0});var Fpt=s(lj);OFo=r(Fpt,"ViltProcessor"),Fpt.forEach(t),VFo=r(vxe," (ViLT model)"),vxe.forEach(t),XFo=i(_e),jp=n(_e,"LI",{});var Fxe=s(jp);Mce=n(Fxe,"STRONG",{});var Tpt=s(Mce);zFo=r(Tpt,"vision-text-dual-encoder"),Tpt.forEach(t),WFo=r(Fxe," \u2014 "),ij=n(Fxe,"A",{href:!0});var Mpt=s(ij);QFo=r(Mpt,"VisionTextDualEncoderProcessor"),Mpt.forEach(t),HFo=r(Fxe," (VisionTextDualEncoder model)"),Fxe.forEach(t),UFo=i(_e),Dp=n(_e,"LI",{});var Txe=s(Dp);Ece=n(Txe,"STRONG",{});var Ept=s(Ece);JFo=r(Ept,"wav2vec2"),Ept.forEach(t),YFo=r(Txe," \u2014 "),dj=n(Txe,"A",{href:!0});var Cpt=s(dj);KFo=r(Cpt,"Wav2Vec2Processor"),Cpt.forEach(t),ZFo=r(Txe," (Wav2Vec2 model)"),Txe.forEach(t),eTo=i(_e),Gp=n(_e,"LI",{});var Mxe=s(Gp);Cce=n(Mxe,"STRONG",{});var wpt=s(Cce);oTo=r(wpt,"wav2vec2-conformer"),wpt.forEach(t),rTo=r(Mxe," \u2014 "),cj=n(Mxe,"A",{href:!0});var Apt=s(cj);tTo=r(Apt,"Wav2Vec2Processor"),Apt.forEach(t),aTo=r(Mxe," (Wav2Vec2-Conformer model)"),Mxe.forEach(t),nTo=i(_e),Op=n(_e,"LI",{});var Exe=s(Op);wce=n(Exe,"STRONG",{});var Lpt=s(wce);sTo=r(Lpt,"wavlm"),Lpt.forEach(t),lTo=r(Exe," \u2014 "),fj=n(Exe,"A",{href:!0});var ypt=s(fj);iTo=r(ypt,"Wav2Vec2Processor"),ypt.forEach(t),dTo=r(Exe," (WavLM model)"),Exe.forEach(t),_e.forEach(t),cTo=i(sa),T(Vp.$$.fragment,sa),fTo=i(sa),T(Xp.$$.fragment,sa),sa.forEach(t),mTo=i(tl),zp=n(tl,"DIV",{class:!0});var ZWe=s(zp);T(q6.$$.fragment,ZWe),gTo=i(ZWe),Ace=n(ZWe,"P",{});var xpt=s(Ace);hTo=r(xpt,"Register a new processor for this class."),xpt.forEach(t),ZWe.forEach(t),tl.forEach(t),HXe=i(f),Vi=n(f,"H2",{class:!0});var eQe=s(Vi);Wp=n(eQe,"A",{id:!0,class:!0,href:!0});var $pt=s(Wp);Lce=n($pt,"SPAN",{});var kpt=s(Lce);T(j6.$$.fragment,kpt),kpt.forEach(t),$pt.forEach(t),pTo=i(eQe),yce=n(eQe,"SPAN",{});var Spt=s(yce);_To=r(Spt,"AutoModel"),Spt.forEach(t),eQe.forEach(t),UXe=i(f),$o=n(f,"DIV",{class:!0});var al=s($o);T(D6.$$.fragment,al),uTo=i(al),Xi=n(al,"P",{});var ete=s(Xi);bTo=r(ete,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mj=n(ete,"A",{href:!0});var Rpt=s(mj);vTo=r(Rpt,"from_pretrained()"),Rpt.forEach(t),FTo=r(ete," class method or the "),gj=n(ete,"A",{href:!0});var Ppt=s(gj);TTo=r(Ppt,"from_config()"),Ppt.forEach(t),MTo=r(ete,` class
method.`),ete.forEach(t),ETo=i(al),G6=n(al,"P",{});var oQe=s(G6);CTo=r(oQe,"This class cannot be instantiated directly using "),xce=n(oQe,"CODE",{});var Bpt=s(xce);wTo=r(Bpt,"__init__()"),Bpt.forEach(t),ATo=r(oQe," (throws an error)."),oQe.forEach(t),LTo=i(al),it=n(al,"DIV",{class:!0});var uw=s(it);T(O6.$$.fragment,uw),yTo=i(uw),$ce=n(uw,"P",{});var Ipt=s($ce);xTo=r(Ipt,"Instantiates one of the base model classes of the library from a configuration."),Ipt.forEach(t),$To=i(uw),zi=n(uw,"P",{});var ote=s(zi);kTo=r(ote,`Note:
Loading a model from its configuration file does `),kce=n(ote,"STRONG",{});var Npt=s(kce);STo=r(Npt,"not"),Npt.forEach(t),RTo=r(ote,` load the model weights. It only affects the
model\u2019s configuration. Use `),hj=n(ote,"A",{href:!0});var qpt=s(hj);PTo=r(qpt,"from_pretrained()"),qpt.forEach(t),BTo=r(ote," to load the model weights."),ote.forEach(t),ITo=i(uw),T(Qp.$$.fragment,uw),uw.forEach(t),NTo=i(al),Ye=n(al,"DIV",{class:!0});var la=s(Ye);T(V6.$$.fragment,la),qTo=i(la),Sce=n(la,"P",{});var jpt=s(Sce);jTo=r(jpt,"Instantiate one of the base model classes of the library from a pretrained model."),jpt.forEach(t),DTo=i(la),Ia=n(la,"P",{});var bw=s(Ia);GTo=r(bw,"The model class to instantiate is selected based on the "),Rce=n(bw,"CODE",{});var Dpt=s(Rce);OTo=r(Dpt,"model_type"),Dpt.forEach(t),VTo=r(bw,` property of the config object (either
passed as an argument or loaded from `),Pce=n(bw,"CODE",{});var Gpt=s(Pce);XTo=r(Gpt,"pretrained_model_name_or_path"),Gpt.forEach(t),zTo=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bce=n(bw,"CODE",{});var Opt=s(Bce);WTo=r(Opt,"pretrained_model_name_or_path"),Opt.forEach(t),QTo=r(bw,":"),bw.forEach(t),HTo=i(la),y=n(la,"UL",{});var x=s(y);Hp=n(x,"LI",{});var Cxe=s(Hp);Ice=n(Cxe,"STRONG",{});var Vpt=s(Ice);UTo=r(Vpt,"albert"),Vpt.forEach(t),JTo=r(Cxe," \u2014 "),pj=n(Cxe,"A",{href:!0});var Xpt=s(pj);YTo=r(Xpt,"AlbertModel"),Xpt.forEach(t),KTo=r(Cxe," (ALBERT model)"),Cxe.forEach(t),ZTo=i(x),Up=n(x,"LI",{});var wxe=s(Up);Nce=n(wxe,"STRONG",{});var zpt=s(Nce);e7o=r(zpt,"bart"),zpt.forEach(t),o7o=r(wxe," \u2014 "),_j=n(wxe,"A",{href:!0});var Wpt=s(_j);r7o=r(Wpt,"BartModel"),Wpt.forEach(t),t7o=r(wxe," (BART model)"),wxe.forEach(t),a7o=i(x),Jp=n(x,"LI",{});var Axe=s(Jp);qce=n(Axe,"STRONG",{});var Qpt=s(qce);n7o=r(Qpt,"beit"),Qpt.forEach(t),s7o=r(Axe," \u2014 "),uj=n(Axe,"A",{href:!0});var Hpt=s(uj);l7o=r(Hpt,"BeitModel"),Hpt.forEach(t),i7o=r(Axe," (BEiT model)"),Axe.forEach(t),d7o=i(x),Yp=n(x,"LI",{});var Lxe=s(Yp);jce=n(Lxe,"STRONG",{});var Upt=s(jce);c7o=r(Upt,"bert"),Upt.forEach(t),f7o=r(Lxe," \u2014 "),bj=n(Lxe,"A",{href:!0});var Jpt=s(bj);m7o=r(Jpt,"BertModel"),Jpt.forEach(t),g7o=r(Lxe," (BERT model)"),Lxe.forEach(t),h7o=i(x),Kp=n(x,"LI",{});var yxe=s(Kp);Dce=n(yxe,"STRONG",{});var Ypt=s(Dce);p7o=r(Ypt,"bert-generation"),Ypt.forEach(t),_7o=r(yxe," \u2014 "),vj=n(yxe,"A",{href:!0});var Kpt=s(vj);u7o=r(Kpt,"BertGenerationEncoder"),Kpt.forEach(t),b7o=r(yxe," (Bert Generation model)"),yxe.forEach(t),v7o=i(x),Zp=n(x,"LI",{});var xxe=s(Zp);Gce=n(xxe,"STRONG",{});var Zpt=s(Gce);F7o=r(Zpt,"big_bird"),Zpt.forEach(t),T7o=r(xxe," \u2014 "),Fj=n(xxe,"A",{href:!0});var e_t=s(Fj);M7o=r(e_t,"BigBirdModel"),e_t.forEach(t),E7o=r(xxe," (BigBird model)"),xxe.forEach(t),C7o=i(x),e_=n(x,"LI",{});var $xe=s(e_);Oce=n($xe,"STRONG",{});var o_t=s(Oce);w7o=r(o_t,"bigbird_pegasus"),o_t.forEach(t),A7o=r($xe," \u2014 "),Tj=n($xe,"A",{href:!0});var r_t=s(Tj);L7o=r(r_t,"BigBirdPegasusModel"),r_t.forEach(t),y7o=r($xe," (BigBird-Pegasus model)"),$xe.forEach(t),x7o=i(x),o_=n(x,"LI",{});var kxe=s(o_);Vce=n(kxe,"STRONG",{});var t_t=s(Vce);$7o=r(t_t,"blenderbot"),t_t.forEach(t),k7o=r(kxe," \u2014 "),Mj=n(kxe,"A",{href:!0});var a_t=s(Mj);S7o=r(a_t,"BlenderbotModel"),a_t.forEach(t),R7o=r(kxe," (Blenderbot model)"),kxe.forEach(t),P7o=i(x),r_=n(x,"LI",{});var Sxe=s(r_);Xce=n(Sxe,"STRONG",{});var n_t=s(Xce);B7o=r(n_t,"blenderbot-small"),n_t.forEach(t),I7o=r(Sxe," \u2014 "),Ej=n(Sxe,"A",{href:!0});var s_t=s(Ej);N7o=r(s_t,"BlenderbotSmallModel"),s_t.forEach(t),q7o=r(Sxe," (BlenderbotSmall model)"),Sxe.forEach(t),j7o=i(x),t_=n(x,"LI",{});var Rxe=s(t_);zce=n(Rxe,"STRONG",{});var l_t=s(zce);D7o=r(l_t,"bloom"),l_t.forEach(t),G7o=r(Rxe," \u2014 "),Cj=n(Rxe,"A",{href:!0});var i_t=s(Cj);O7o=r(i_t,"BloomModel"),i_t.forEach(t),V7o=r(Rxe," (BLOOM model)"),Rxe.forEach(t),X7o=i(x),a_=n(x,"LI",{});var Pxe=s(a_);Wce=n(Pxe,"STRONG",{});var d_t=s(Wce);z7o=r(d_t,"camembert"),d_t.forEach(t),W7o=r(Pxe," \u2014 "),wj=n(Pxe,"A",{href:!0});var c_t=s(wj);Q7o=r(c_t,"CamembertModel"),c_t.forEach(t),H7o=r(Pxe," (CamemBERT model)"),Pxe.forEach(t),U7o=i(x),n_=n(x,"LI",{});var Bxe=s(n_);Qce=n(Bxe,"STRONG",{});var f_t=s(Qce);J7o=r(f_t,"canine"),f_t.forEach(t),Y7o=r(Bxe," \u2014 "),Aj=n(Bxe,"A",{href:!0});var m_t=s(Aj);K7o=r(m_t,"CanineModel"),m_t.forEach(t),Z7o=r(Bxe," (CANINE model)"),Bxe.forEach(t),e8o=i(x),s_=n(x,"LI",{});var Ixe=s(s_);Hce=n(Ixe,"STRONG",{});var g_t=s(Hce);o8o=r(g_t,"clip"),g_t.forEach(t),r8o=r(Ixe," \u2014 "),Lj=n(Ixe,"A",{href:!0});var h_t=s(Lj);t8o=r(h_t,"CLIPModel"),h_t.forEach(t),a8o=r(Ixe," (CLIP model)"),Ixe.forEach(t),n8o=i(x),l_=n(x,"LI",{});var Nxe=s(l_);Uce=n(Nxe,"STRONG",{});var p_t=s(Uce);s8o=r(p_t,"codegen"),p_t.forEach(t),l8o=r(Nxe," \u2014 "),yj=n(Nxe,"A",{href:!0});var __t=s(yj);i8o=r(__t,"CodeGenModel"),__t.forEach(t),d8o=r(Nxe," (CodeGen model)"),Nxe.forEach(t),c8o=i(x),i_=n(x,"LI",{});var qxe=s(i_);Jce=n(qxe,"STRONG",{});var u_t=s(Jce);f8o=r(u_t,"convbert"),u_t.forEach(t),m8o=r(qxe," \u2014 "),xj=n(qxe,"A",{href:!0});var b_t=s(xj);g8o=r(b_t,"ConvBertModel"),b_t.forEach(t),h8o=r(qxe," (ConvBERT model)"),qxe.forEach(t),p8o=i(x),d_=n(x,"LI",{});var jxe=s(d_);Yce=n(jxe,"STRONG",{});var v_t=s(Yce);_8o=r(v_t,"convnext"),v_t.forEach(t),u8o=r(jxe," \u2014 "),$j=n(jxe,"A",{href:!0});var F_t=s($j);b8o=r(F_t,"ConvNextModel"),F_t.forEach(t),v8o=r(jxe," (ConvNeXT model)"),jxe.forEach(t),F8o=i(x),c_=n(x,"LI",{});var Dxe=s(c_);Kce=n(Dxe,"STRONG",{});var T_t=s(Kce);T8o=r(T_t,"ctrl"),T_t.forEach(t),M8o=r(Dxe," \u2014 "),kj=n(Dxe,"A",{href:!0});var M_t=s(kj);E8o=r(M_t,"CTRLModel"),M_t.forEach(t),C8o=r(Dxe," (CTRL model)"),Dxe.forEach(t),w8o=i(x),f_=n(x,"LI",{});var Gxe=s(f_);Zce=n(Gxe,"STRONG",{});var E_t=s(Zce);A8o=r(E_t,"cvt"),E_t.forEach(t),L8o=r(Gxe," \u2014 "),Sj=n(Gxe,"A",{href:!0});var C_t=s(Sj);y8o=r(C_t,"CvtModel"),C_t.forEach(t),x8o=r(Gxe," (CvT model)"),Gxe.forEach(t),$8o=i(x),m_=n(x,"LI",{});var Oxe=s(m_);efe=n(Oxe,"STRONG",{});var w_t=s(efe);k8o=r(w_t,"data2vec-audio"),w_t.forEach(t),S8o=r(Oxe," \u2014 "),Rj=n(Oxe,"A",{href:!0});var A_t=s(Rj);R8o=r(A_t,"Data2VecAudioModel"),A_t.forEach(t),P8o=r(Oxe," (Data2VecAudio model)"),Oxe.forEach(t),B8o=i(x),g_=n(x,"LI",{});var Vxe=s(g_);ofe=n(Vxe,"STRONG",{});var L_t=s(ofe);I8o=r(L_t,"data2vec-text"),L_t.forEach(t),N8o=r(Vxe," \u2014 "),Pj=n(Vxe,"A",{href:!0});var y_t=s(Pj);q8o=r(y_t,"Data2VecTextModel"),y_t.forEach(t),j8o=r(Vxe," (Data2VecText model)"),Vxe.forEach(t),D8o=i(x),h_=n(x,"LI",{});var Xxe=s(h_);rfe=n(Xxe,"STRONG",{});var x_t=s(rfe);G8o=r(x_t,"data2vec-vision"),x_t.forEach(t),O8o=r(Xxe," \u2014 "),Bj=n(Xxe,"A",{href:!0});var $_t=s(Bj);V8o=r($_t,"Data2VecVisionModel"),$_t.forEach(t),X8o=r(Xxe," (Data2VecVision model)"),Xxe.forEach(t),z8o=i(x),p_=n(x,"LI",{});var zxe=s(p_);tfe=n(zxe,"STRONG",{});var k_t=s(tfe);W8o=r(k_t,"deberta"),k_t.forEach(t),Q8o=r(zxe," \u2014 "),Ij=n(zxe,"A",{href:!0});var S_t=s(Ij);H8o=r(S_t,"DebertaModel"),S_t.forEach(t),U8o=r(zxe," (DeBERTa model)"),zxe.forEach(t),J8o=i(x),__=n(x,"LI",{});var Wxe=s(__);afe=n(Wxe,"STRONG",{});var R_t=s(afe);Y8o=r(R_t,"deberta-v2"),R_t.forEach(t),K8o=r(Wxe," \u2014 "),Nj=n(Wxe,"A",{href:!0});var P_t=s(Nj);Z8o=r(P_t,"DebertaV2Model"),P_t.forEach(t),e9o=r(Wxe," (DeBERTa-v2 model)"),Wxe.forEach(t),o9o=i(x),u_=n(x,"LI",{});var Qxe=s(u_);nfe=n(Qxe,"STRONG",{});var B_t=s(nfe);r9o=r(B_t,"decision_transformer"),B_t.forEach(t),t9o=r(Qxe," \u2014 "),qj=n(Qxe,"A",{href:!0});var I_t=s(qj);a9o=r(I_t,"DecisionTransformerModel"),I_t.forEach(t),n9o=r(Qxe," (Decision Transformer model)"),Qxe.forEach(t),s9o=i(x),b_=n(x,"LI",{});var Hxe=s(b_);sfe=n(Hxe,"STRONG",{});var N_t=s(sfe);l9o=r(N_t,"deit"),N_t.forEach(t),i9o=r(Hxe," \u2014 "),jj=n(Hxe,"A",{href:!0});var q_t=s(jj);d9o=r(q_t,"DeiTModel"),q_t.forEach(t),c9o=r(Hxe," (DeiT model)"),Hxe.forEach(t),f9o=i(x),v_=n(x,"LI",{});var Uxe=s(v_);lfe=n(Uxe,"STRONG",{});var j_t=s(lfe);m9o=r(j_t,"detr"),j_t.forEach(t),g9o=r(Uxe," \u2014 "),Dj=n(Uxe,"A",{href:!0});var D_t=s(Dj);h9o=r(D_t,"DetrModel"),D_t.forEach(t),p9o=r(Uxe," (DETR model)"),Uxe.forEach(t),_9o=i(x),F_=n(x,"LI",{});var Jxe=s(F_);ife=n(Jxe,"STRONG",{});var G_t=s(ife);u9o=r(G_t,"distilbert"),G_t.forEach(t),b9o=r(Jxe," \u2014 "),Gj=n(Jxe,"A",{href:!0});var O_t=s(Gj);v9o=r(O_t,"DistilBertModel"),O_t.forEach(t),F9o=r(Jxe," (DistilBERT model)"),Jxe.forEach(t),T9o=i(x),T_=n(x,"LI",{});var Yxe=s(T_);dfe=n(Yxe,"STRONG",{});var V_t=s(dfe);M9o=r(V_t,"dpr"),V_t.forEach(t),E9o=r(Yxe," \u2014 "),Oj=n(Yxe,"A",{href:!0});var X_t=s(Oj);C9o=r(X_t,"DPRQuestionEncoder"),X_t.forEach(t),w9o=r(Yxe," (DPR model)"),Yxe.forEach(t),A9o=i(x),M_=n(x,"LI",{});var Kxe=s(M_);cfe=n(Kxe,"STRONG",{});var z_t=s(cfe);L9o=r(z_t,"dpt"),z_t.forEach(t),y9o=r(Kxe," \u2014 "),Vj=n(Kxe,"A",{href:!0});var W_t=s(Vj);x9o=r(W_t,"DPTModel"),W_t.forEach(t),$9o=r(Kxe," (DPT model)"),Kxe.forEach(t),k9o=i(x),E_=n(x,"LI",{});var Zxe=s(E_);ffe=n(Zxe,"STRONG",{});var Q_t=s(ffe);S9o=r(Q_t,"electra"),Q_t.forEach(t),R9o=r(Zxe," \u2014 "),Xj=n(Zxe,"A",{href:!0});var H_t=s(Xj);P9o=r(H_t,"ElectraModel"),H_t.forEach(t),B9o=r(Zxe," (ELECTRA model)"),Zxe.forEach(t),I9o=i(x),C_=n(x,"LI",{});var e$e=s(C_);mfe=n(e$e,"STRONG",{});var U_t=s(mfe);N9o=r(U_t,"flaubert"),U_t.forEach(t),q9o=r(e$e," \u2014 "),zj=n(e$e,"A",{href:!0});var J_t=s(zj);j9o=r(J_t,"FlaubertModel"),J_t.forEach(t),D9o=r(e$e," (FlauBERT model)"),e$e.forEach(t),G9o=i(x),w_=n(x,"LI",{});var o$e=s(w_);gfe=n(o$e,"STRONG",{});var Y_t=s(gfe);O9o=r(Y_t,"flava"),Y_t.forEach(t),V9o=r(o$e," \u2014 "),Wj=n(o$e,"A",{href:!0});var K_t=s(Wj);X9o=r(K_t,"FlavaModel"),K_t.forEach(t),z9o=r(o$e," (FLAVA model)"),o$e.forEach(t),W9o=i(x),A_=n(x,"LI",{});var r$e=s(A_);hfe=n(r$e,"STRONG",{});var Z_t=s(hfe);Q9o=r(Z_t,"fnet"),Z_t.forEach(t),H9o=r(r$e," \u2014 "),Qj=n(r$e,"A",{href:!0});var eut=s(Qj);U9o=r(eut,"FNetModel"),eut.forEach(t),J9o=r(r$e," (FNet model)"),r$e.forEach(t),Y9o=i(x),L_=n(x,"LI",{});var t$e=s(L_);pfe=n(t$e,"STRONG",{});var out=s(pfe);K9o=r(out,"fsmt"),out.forEach(t),Z9o=r(t$e," \u2014 "),Hj=n(t$e,"A",{href:!0});var rut=s(Hj);eMo=r(rut,"FSMTModel"),rut.forEach(t),oMo=r(t$e," (FairSeq Machine-Translation model)"),t$e.forEach(t),rMo=i(x),Us=n(x,"LI",{});var GS=s(Us);_fe=n(GS,"STRONG",{});var tut=s(_fe);tMo=r(tut,"funnel"),tut.forEach(t),aMo=r(GS," \u2014 "),Uj=n(GS,"A",{href:!0});var aut=s(Uj);nMo=r(aut,"FunnelModel"),aut.forEach(t),sMo=r(GS," or "),Jj=n(GS,"A",{href:!0});var nut=s(Jj);lMo=r(nut,"FunnelBaseModel"),nut.forEach(t),iMo=r(GS," (Funnel Transformer model)"),GS.forEach(t),dMo=i(x),y_=n(x,"LI",{});var a$e=s(y_);ufe=n(a$e,"STRONG",{});var sut=s(ufe);cMo=r(sut,"glpn"),sut.forEach(t),fMo=r(a$e," \u2014 "),Yj=n(a$e,"A",{href:!0});var lut=s(Yj);mMo=r(lut,"GLPNModel"),lut.forEach(t),gMo=r(a$e," (GLPN model)"),a$e.forEach(t),hMo=i(x),x_=n(x,"LI",{});var n$e=s(x_);bfe=n(n$e,"STRONG",{});var iut=s(bfe);pMo=r(iut,"gpt2"),iut.forEach(t),_Mo=r(n$e," \u2014 "),Kj=n(n$e,"A",{href:!0});var dut=s(Kj);uMo=r(dut,"GPT2Model"),dut.forEach(t),bMo=r(n$e," (OpenAI GPT-2 model)"),n$e.forEach(t),vMo=i(x),$_=n(x,"LI",{});var s$e=s($_);vfe=n(s$e,"STRONG",{});var cut=s(vfe);FMo=r(cut,"gpt_neo"),cut.forEach(t),TMo=r(s$e," \u2014 "),Zj=n(s$e,"A",{href:!0});var fut=s(Zj);MMo=r(fut,"GPTNeoModel"),fut.forEach(t),EMo=r(s$e," (GPT Neo model)"),s$e.forEach(t),CMo=i(x),k_=n(x,"LI",{});var l$e=s(k_);Ffe=n(l$e,"STRONG",{});var mut=s(Ffe);wMo=r(mut,"gpt_neox"),mut.forEach(t),AMo=r(l$e," \u2014 "),eD=n(l$e,"A",{href:!0});var gut=s(eD);LMo=r(gut,"GPTNeoXModel"),gut.forEach(t),yMo=r(l$e," (GPT NeoX model)"),l$e.forEach(t),xMo=i(x),S_=n(x,"LI",{});var i$e=s(S_);Tfe=n(i$e,"STRONG",{});var hut=s(Tfe);$Mo=r(hut,"gptj"),hut.forEach(t),kMo=r(i$e," \u2014 "),oD=n(i$e,"A",{href:!0});var put=s(oD);SMo=r(put,"GPTJModel"),put.forEach(t),RMo=r(i$e," (GPT-J model)"),i$e.forEach(t),PMo=i(x),R_=n(x,"LI",{});var d$e=s(R_);Mfe=n(d$e,"STRONG",{});var _ut=s(Mfe);BMo=r(_ut,"groupvit"),_ut.forEach(t),IMo=r(d$e," \u2014 "),rD=n(d$e,"A",{href:!0});var uut=s(rD);NMo=r(uut,"GroupViTModel"),uut.forEach(t),qMo=r(d$e," (GroupViT model)"),d$e.forEach(t),jMo=i(x),P_=n(x,"LI",{});var c$e=s(P_);Efe=n(c$e,"STRONG",{});var but=s(Efe);DMo=r(but,"hubert"),but.forEach(t),GMo=r(c$e," \u2014 "),tD=n(c$e,"A",{href:!0});var vut=s(tD);OMo=r(vut,"HubertModel"),vut.forEach(t),VMo=r(c$e," (Hubert model)"),c$e.forEach(t),XMo=i(x),B_=n(x,"LI",{});var f$e=s(B_);Cfe=n(f$e,"STRONG",{});var Fut=s(Cfe);zMo=r(Fut,"ibert"),Fut.forEach(t),WMo=r(f$e," \u2014 "),aD=n(f$e,"A",{href:!0});var Tut=s(aD);QMo=r(Tut,"IBertModel"),Tut.forEach(t),HMo=r(f$e," (I-BERT model)"),f$e.forEach(t),UMo=i(x),I_=n(x,"LI",{});var m$e=s(I_);wfe=n(m$e,"STRONG",{});var Mut=s(wfe);JMo=r(Mut,"imagegpt"),Mut.forEach(t),YMo=r(m$e," \u2014 "),nD=n(m$e,"A",{href:!0});var Eut=s(nD);KMo=r(Eut,"ImageGPTModel"),Eut.forEach(t),ZMo=r(m$e," (ImageGPT model)"),m$e.forEach(t),e4o=i(x),N_=n(x,"LI",{});var g$e=s(N_);Afe=n(g$e,"STRONG",{});var Cut=s(Afe);o4o=r(Cut,"layoutlm"),Cut.forEach(t),r4o=r(g$e," \u2014 "),sD=n(g$e,"A",{href:!0});var wut=s(sD);t4o=r(wut,"LayoutLMModel"),wut.forEach(t),a4o=r(g$e," (LayoutLM model)"),g$e.forEach(t),n4o=i(x),q_=n(x,"LI",{});var h$e=s(q_);Lfe=n(h$e,"STRONG",{});var Aut=s(Lfe);s4o=r(Aut,"layoutlmv2"),Aut.forEach(t),l4o=r(h$e," \u2014 "),lD=n(h$e,"A",{href:!0});var Lut=s(lD);i4o=r(Lut,"LayoutLMv2Model"),Lut.forEach(t),d4o=r(h$e," (LayoutLMv2 model)"),h$e.forEach(t),c4o=i(x),j_=n(x,"LI",{});var p$e=s(j_);yfe=n(p$e,"STRONG",{});var yut=s(yfe);f4o=r(yut,"layoutlmv3"),yut.forEach(t),m4o=r(p$e," \u2014 "),iD=n(p$e,"A",{href:!0});var xut=s(iD);g4o=r(xut,"LayoutLMv3Model"),xut.forEach(t),h4o=r(p$e," (LayoutLMv3 model)"),p$e.forEach(t),p4o=i(x),D_=n(x,"LI",{});var _$e=s(D_);xfe=n(_$e,"STRONG",{});var $ut=s(xfe);_4o=r($ut,"led"),$ut.forEach(t),u4o=r(_$e," \u2014 "),dD=n(_$e,"A",{href:!0});var kut=s(dD);b4o=r(kut,"LEDModel"),kut.forEach(t),v4o=r(_$e," (LED model)"),_$e.forEach(t),F4o=i(x),G_=n(x,"LI",{});var u$e=s(G_);$fe=n(u$e,"STRONG",{});var Sut=s($fe);T4o=r(Sut,"levit"),Sut.forEach(t),M4o=r(u$e," \u2014 "),cD=n(u$e,"A",{href:!0});var Rut=s(cD);E4o=r(Rut,"LevitModel"),Rut.forEach(t),C4o=r(u$e," (LeViT model)"),u$e.forEach(t),w4o=i(x),O_=n(x,"LI",{});var b$e=s(O_);kfe=n(b$e,"STRONG",{});var Put=s(kfe);A4o=r(Put,"longformer"),Put.forEach(t),L4o=r(b$e," \u2014 "),fD=n(b$e,"A",{href:!0});var But=s(fD);y4o=r(But,"LongformerModel"),But.forEach(t),x4o=r(b$e," (Longformer model)"),b$e.forEach(t),$4o=i(x),V_=n(x,"LI",{});var v$e=s(V_);Sfe=n(v$e,"STRONG",{});var Iut=s(Sfe);k4o=r(Iut,"longt5"),Iut.forEach(t),S4o=r(v$e," \u2014 "),mD=n(v$e,"A",{href:!0});var Nut=s(mD);R4o=r(Nut,"LongT5Model"),Nut.forEach(t),P4o=r(v$e," (LongT5 model)"),v$e.forEach(t),B4o=i(x),X_=n(x,"LI",{});var F$e=s(X_);Rfe=n(F$e,"STRONG",{});var qut=s(Rfe);I4o=r(qut,"luke"),qut.forEach(t),N4o=r(F$e," \u2014 "),gD=n(F$e,"A",{href:!0});var jut=s(gD);q4o=r(jut,"LukeModel"),jut.forEach(t),j4o=r(F$e," (LUKE model)"),F$e.forEach(t),D4o=i(x),z_=n(x,"LI",{});var T$e=s(z_);Pfe=n(T$e,"STRONG",{});var Dut=s(Pfe);G4o=r(Dut,"lxmert"),Dut.forEach(t),O4o=r(T$e," \u2014 "),hD=n(T$e,"A",{href:!0});var Gut=s(hD);V4o=r(Gut,"LxmertModel"),Gut.forEach(t),X4o=r(T$e," (LXMERT model)"),T$e.forEach(t),z4o=i(x),W_=n(x,"LI",{});var M$e=s(W_);Bfe=n(M$e,"STRONG",{});var Out=s(Bfe);W4o=r(Out,"m2m_100"),Out.forEach(t),Q4o=r(M$e," \u2014 "),pD=n(M$e,"A",{href:!0});var Vut=s(pD);H4o=r(Vut,"M2M100Model"),Vut.forEach(t),U4o=r(M$e," (M2M100 model)"),M$e.forEach(t),J4o=i(x),Q_=n(x,"LI",{});var E$e=s(Q_);Ife=n(E$e,"STRONG",{});var Xut=s(Ife);Y4o=r(Xut,"marian"),Xut.forEach(t),K4o=r(E$e," \u2014 "),_D=n(E$e,"A",{href:!0});var zut=s(_D);Z4o=r(zut,"MarianModel"),zut.forEach(t),eEo=r(E$e," (Marian model)"),E$e.forEach(t),oEo=i(x),H_=n(x,"LI",{});var C$e=s(H_);Nfe=n(C$e,"STRONG",{});var Wut=s(Nfe);rEo=r(Wut,"maskformer"),Wut.forEach(t),tEo=r(C$e," \u2014 "),uD=n(C$e,"A",{href:!0});var Qut=s(uD);aEo=r(Qut,"MaskFormerModel"),Qut.forEach(t),nEo=r(C$e," (MaskFormer model)"),C$e.forEach(t),sEo=i(x),U_=n(x,"LI",{});var w$e=s(U_);qfe=n(w$e,"STRONG",{});var Hut=s(qfe);lEo=r(Hut,"mbart"),Hut.forEach(t),iEo=r(w$e," \u2014 "),bD=n(w$e,"A",{href:!0});var Uut=s(bD);dEo=r(Uut,"MBartModel"),Uut.forEach(t),cEo=r(w$e," (mBART model)"),w$e.forEach(t),fEo=i(x),J_=n(x,"LI",{});var A$e=s(J_);jfe=n(A$e,"STRONG",{});var Jut=s(jfe);mEo=r(Jut,"mctct"),Jut.forEach(t),gEo=r(A$e," \u2014 "),vD=n(A$e,"A",{href:!0});var Yut=s(vD);hEo=r(Yut,"MCTCTModel"),Yut.forEach(t),pEo=r(A$e," (M-CTC-T model)"),A$e.forEach(t),_Eo=i(x),Y_=n(x,"LI",{});var L$e=s(Y_);Dfe=n(L$e,"STRONG",{});var Kut=s(Dfe);uEo=r(Kut,"megatron-bert"),Kut.forEach(t),bEo=r(L$e," \u2014 "),FD=n(L$e,"A",{href:!0});var Zut=s(FD);vEo=r(Zut,"MegatronBertModel"),Zut.forEach(t),FEo=r(L$e," (Megatron-BERT model)"),L$e.forEach(t),TEo=i(x),K_=n(x,"LI",{});var y$e=s(K_);Gfe=n(y$e,"STRONG",{});var e1t=s(Gfe);MEo=r(e1t,"mobilebert"),e1t.forEach(t),EEo=r(y$e," \u2014 "),TD=n(y$e,"A",{href:!0});var o1t=s(TD);CEo=r(o1t,"MobileBertModel"),o1t.forEach(t),wEo=r(y$e," (MobileBERT model)"),y$e.forEach(t),AEo=i(x),Z_=n(x,"LI",{});var x$e=s(Z_);Ofe=n(x$e,"STRONG",{});var r1t=s(Ofe);LEo=r(r1t,"mobilevit"),r1t.forEach(t),yEo=r(x$e," \u2014 "),MD=n(x$e,"A",{href:!0});var t1t=s(MD);xEo=r(t1t,"MobileViTModel"),t1t.forEach(t),$Eo=r(x$e," (MobileViT model)"),x$e.forEach(t),kEo=i(x),eu=n(x,"LI",{});var $$e=s(eu);Vfe=n($$e,"STRONG",{});var a1t=s(Vfe);SEo=r(a1t,"mpnet"),a1t.forEach(t),REo=r($$e," \u2014 "),ED=n($$e,"A",{href:!0});var n1t=s(ED);PEo=r(n1t,"MPNetModel"),n1t.forEach(t),BEo=r($$e," (MPNet model)"),$$e.forEach(t),IEo=i(x),ou=n(x,"LI",{});var k$e=s(ou);Xfe=n(k$e,"STRONG",{});var s1t=s(Xfe);NEo=r(s1t,"mt5"),s1t.forEach(t),qEo=r(k$e," \u2014 "),CD=n(k$e,"A",{href:!0});var l1t=s(CD);jEo=r(l1t,"MT5Model"),l1t.forEach(t),DEo=r(k$e," (MT5 model)"),k$e.forEach(t),GEo=i(x),ru=n(x,"LI",{});var S$e=s(ru);zfe=n(S$e,"STRONG",{});var i1t=s(zfe);OEo=r(i1t,"mvp"),i1t.forEach(t),VEo=r(S$e," \u2014 "),wD=n(S$e,"A",{href:!0});var d1t=s(wD);XEo=r(d1t,"MvpModel"),d1t.forEach(t),zEo=r(S$e," (MVP model)"),S$e.forEach(t),WEo=i(x),tu=n(x,"LI",{});var R$e=s(tu);Wfe=n(R$e,"STRONG",{});var c1t=s(Wfe);QEo=r(c1t,"nezha"),c1t.forEach(t),HEo=r(R$e," \u2014 "),AD=n(R$e,"A",{href:!0});var f1t=s(AD);UEo=r(f1t,"NezhaModel"),f1t.forEach(t),JEo=r(R$e," (Nezha model)"),R$e.forEach(t),YEo=i(x),au=n(x,"LI",{});var P$e=s(au);Qfe=n(P$e,"STRONG",{});var m1t=s(Qfe);KEo=r(m1t,"nllb"),m1t.forEach(t),ZEo=r(P$e," \u2014 "),LD=n(P$e,"A",{href:!0});var g1t=s(LD);eCo=r(g1t,"M2M100Model"),g1t.forEach(t),oCo=r(P$e," (NLLB model)"),P$e.forEach(t),rCo=i(x),nu=n(x,"LI",{});var B$e=s(nu);Hfe=n(B$e,"STRONG",{});var h1t=s(Hfe);tCo=r(h1t,"nystromformer"),h1t.forEach(t),aCo=r(B$e," \u2014 "),yD=n(B$e,"A",{href:!0});var p1t=s(yD);nCo=r(p1t,"NystromformerModel"),p1t.forEach(t),sCo=r(B$e," (Nystr\xF6mformer model)"),B$e.forEach(t),lCo=i(x),su=n(x,"LI",{});var I$e=s(su);Ufe=n(I$e,"STRONG",{});var _1t=s(Ufe);iCo=r(_1t,"openai-gpt"),_1t.forEach(t),dCo=r(I$e," \u2014 "),xD=n(I$e,"A",{href:!0});var u1t=s(xD);cCo=r(u1t,"OpenAIGPTModel"),u1t.forEach(t),fCo=r(I$e," (OpenAI GPT model)"),I$e.forEach(t),mCo=i(x),lu=n(x,"LI",{});var N$e=s(lu);Jfe=n(N$e,"STRONG",{});var b1t=s(Jfe);gCo=r(b1t,"opt"),b1t.forEach(t),hCo=r(N$e," \u2014 "),$D=n(N$e,"A",{href:!0});var v1t=s($D);pCo=r(v1t,"OPTModel"),v1t.forEach(t),_Co=r(N$e," (OPT model)"),N$e.forEach(t),uCo=i(x),iu=n(x,"LI",{});var q$e=s(iu);Yfe=n(q$e,"STRONG",{});var F1t=s(Yfe);bCo=r(F1t,"owlvit"),F1t.forEach(t),vCo=r(q$e," \u2014 "),kD=n(q$e,"A",{href:!0});var T1t=s(kD);FCo=r(T1t,"OwlViTModel"),T1t.forEach(t),TCo=r(q$e," (OWL-ViT model)"),q$e.forEach(t),MCo=i(x),du=n(x,"LI",{});var j$e=s(du);Kfe=n(j$e,"STRONG",{});var M1t=s(Kfe);ECo=r(M1t,"pegasus"),M1t.forEach(t),CCo=r(j$e," \u2014 "),SD=n(j$e,"A",{href:!0});var E1t=s(SD);wCo=r(E1t,"PegasusModel"),E1t.forEach(t),ACo=r(j$e," (Pegasus model)"),j$e.forEach(t),LCo=i(x),cu=n(x,"LI",{});var D$e=s(cu);Zfe=n(D$e,"STRONG",{});var C1t=s(Zfe);yCo=r(C1t,"perceiver"),C1t.forEach(t),xCo=r(D$e," \u2014 "),RD=n(D$e,"A",{href:!0});var w1t=s(RD);$Co=r(w1t,"PerceiverModel"),w1t.forEach(t),kCo=r(D$e," (Perceiver model)"),D$e.forEach(t),SCo=i(x),fu=n(x,"LI",{});var G$e=s(fu);eme=n(G$e,"STRONG",{});var A1t=s(eme);RCo=r(A1t,"plbart"),A1t.forEach(t),PCo=r(G$e," \u2014 "),PD=n(G$e,"A",{href:!0});var L1t=s(PD);BCo=r(L1t,"PLBartModel"),L1t.forEach(t),ICo=r(G$e," (PLBart model)"),G$e.forEach(t),NCo=i(x),mu=n(x,"LI",{});var O$e=s(mu);ome=n(O$e,"STRONG",{});var y1t=s(ome);qCo=r(y1t,"poolformer"),y1t.forEach(t),jCo=r(O$e," \u2014 "),BD=n(O$e,"A",{href:!0});var x1t=s(BD);DCo=r(x1t,"PoolFormerModel"),x1t.forEach(t),GCo=r(O$e," (PoolFormer model)"),O$e.forEach(t),OCo=i(x),gu=n(x,"LI",{});var V$e=s(gu);rme=n(V$e,"STRONG",{});var $1t=s(rme);VCo=r($1t,"prophetnet"),$1t.forEach(t),XCo=r(V$e," \u2014 "),ID=n(V$e,"A",{href:!0});var k1t=s(ID);zCo=r(k1t,"ProphetNetModel"),k1t.forEach(t),WCo=r(V$e," (ProphetNet model)"),V$e.forEach(t),QCo=i(x),hu=n(x,"LI",{});var X$e=s(hu);tme=n(X$e,"STRONG",{});var S1t=s(tme);HCo=r(S1t,"qdqbert"),S1t.forEach(t),UCo=r(X$e," \u2014 "),ND=n(X$e,"A",{href:!0});var R1t=s(ND);JCo=r(R1t,"QDQBertModel"),R1t.forEach(t),YCo=r(X$e," (QDQBert model)"),X$e.forEach(t),KCo=i(x),pu=n(x,"LI",{});var z$e=s(pu);ame=n(z$e,"STRONG",{});var P1t=s(ame);ZCo=r(P1t,"reformer"),P1t.forEach(t),e5o=r(z$e," \u2014 "),qD=n(z$e,"A",{href:!0});var B1t=s(qD);o5o=r(B1t,"ReformerModel"),B1t.forEach(t),r5o=r(z$e," (Reformer model)"),z$e.forEach(t),t5o=i(x),_u=n(x,"LI",{});var W$e=s(_u);nme=n(W$e,"STRONG",{});var I1t=s(nme);a5o=r(I1t,"regnet"),I1t.forEach(t),n5o=r(W$e," \u2014 "),jD=n(W$e,"A",{href:!0});var N1t=s(jD);s5o=r(N1t,"RegNetModel"),N1t.forEach(t),l5o=r(W$e," (RegNet model)"),W$e.forEach(t),i5o=i(x),uu=n(x,"LI",{});var Q$e=s(uu);sme=n(Q$e,"STRONG",{});var q1t=s(sme);d5o=r(q1t,"rembert"),q1t.forEach(t),c5o=r(Q$e," \u2014 "),DD=n(Q$e,"A",{href:!0});var j1t=s(DD);f5o=r(j1t,"RemBertModel"),j1t.forEach(t),m5o=r(Q$e," (RemBERT model)"),Q$e.forEach(t),g5o=i(x),bu=n(x,"LI",{});var H$e=s(bu);lme=n(H$e,"STRONG",{});var D1t=s(lme);h5o=r(D1t,"resnet"),D1t.forEach(t),p5o=r(H$e," \u2014 "),GD=n(H$e,"A",{href:!0});var G1t=s(GD);_5o=r(G1t,"ResNetModel"),G1t.forEach(t),u5o=r(H$e," (ResNet model)"),H$e.forEach(t),b5o=i(x),vu=n(x,"LI",{});var U$e=s(vu);ime=n(U$e,"STRONG",{});var O1t=s(ime);v5o=r(O1t,"retribert"),O1t.forEach(t),F5o=r(U$e," \u2014 "),OD=n(U$e,"A",{href:!0});var V1t=s(OD);T5o=r(V1t,"RetriBertModel"),V1t.forEach(t),M5o=r(U$e," (RetriBERT model)"),U$e.forEach(t),E5o=i(x),Fu=n(x,"LI",{});var J$e=s(Fu);dme=n(J$e,"STRONG",{});var X1t=s(dme);C5o=r(X1t,"roberta"),X1t.forEach(t),w5o=r(J$e," \u2014 "),VD=n(J$e,"A",{href:!0});var z1t=s(VD);A5o=r(z1t,"RobertaModel"),z1t.forEach(t),L5o=r(J$e," (RoBERTa model)"),J$e.forEach(t),y5o=i(x),Tu=n(x,"LI",{});var Y$e=s(Tu);cme=n(Y$e,"STRONG",{});var W1t=s(cme);x5o=r(W1t,"roformer"),W1t.forEach(t),$5o=r(Y$e," \u2014 "),XD=n(Y$e,"A",{href:!0});var Q1t=s(XD);k5o=r(Q1t,"RoFormerModel"),Q1t.forEach(t),S5o=r(Y$e," (RoFormer model)"),Y$e.forEach(t),R5o=i(x),Mu=n(x,"LI",{});var K$e=s(Mu);fme=n(K$e,"STRONG",{});var H1t=s(fme);P5o=r(H1t,"segformer"),H1t.forEach(t),B5o=r(K$e," \u2014 "),zD=n(K$e,"A",{href:!0});var U1t=s(zD);I5o=r(U1t,"SegformerModel"),U1t.forEach(t),N5o=r(K$e," (SegFormer model)"),K$e.forEach(t),q5o=i(x),Eu=n(x,"LI",{});var Z$e=s(Eu);mme=n(Z$e,"STRONG",{});var J1t=s(mme);j5o=r(J1t,"sew"),J1t.forEach(t),D5o=r(Z$e," \u2014 "),WD=n(Z$e,"A",{href:!0});var Y1t=s(WD);G5o=r(Y1t,"SEWModel"),Y1t.forEach(t),O5o=r(Z$e," (SEW model)"),Z$e.forEach(t),V5o=i(x),Cu=n(x,"LI",{});var eke=s(Cu);gme=n(eke,"STRONG",{});var K1t=s(gme);X5o=r(K1t,"sew-d"),K1t.forEach(t),z5o=r(eke," \u2014 "),QD=n(eke,"A",{href:!0});var Z1t=s(QD);W5o=r(Z1t,"SEWDModel"),Z1t.forEach(t),Q5o=r(eke," (SEW-D model)"),eke.forEach(t),H5o=i(x),wu=n(x,"LI",{});var oke=s(wu);hme=n(oke,"STRONG",{});var e2t=s(hme);U5o=r(e2t,"speech_to_text"),e2t.forEach(t),J5o=r(oke," \u2014 "),HD=n(oke,"A",{href:!0});var o2t=s(HD);Y5o=r(o2t,"Speech2TextModel"),o2t.forEach(t),K5o=r(oke," (Speech2Text model)"),oke.forEach(t),Z5o=i(x),Au=n(x,"LI",{});var rke=s(Au);pme=n(rke,"STRONG",{});var r2t=s(pme);e0o=r(r2t,"splinter"),r2t.forEach(t),o0o=r(rke," \u2014 "),UD=n(rke,"A",{href:!0});var t2t=s(UD);r0o=r(t2t,"SplinterModel"),t2t.forEach(t),t0o=r(rke," (Splinter model)"),rke.forEach(t),a0o=i(x),Lu=n(x,"LI",{});var tke=s(Lu);_me=n(tke,"STRONG",{});var a2t=s(_me);n0o=r(a2t,"squeezebert"),a2t.forEach(t),s0o=r(tke," \u2014 "),JD=n(tke,"A",{href:!0});var n2t=s(JD);l0o=r(n2t,"SqueezeBertModel"),n2t.forEach(t),i0o=r(tke," (SqueezeBERT model)"),tke.forEach(t),d0o=i(x),yu=n(x,"LI",{});var ake=s(yu);ume=n(ake,"STRONG",{});var s2t=s(ume);c0o=r(s2t,"swin"),s2t.forEach(t),f0o=r(ake," \u2014 "),YD=n(ake,"A",{href:!0});var l2t=s(YD);m0o=r(l2t,"SwinModel"),l2t.forEach(t),g0o=r(ake," (Swin Transformer model)"),ake.forEach(t),h0o=i(x),xu=n(x,"LI",{});var nke=s(xu);bme=n(nke,"STRONG",{});var i2t=s(bme);p0o=r(i2t,"t5"),i2t.forEach(t),_0o=r(nke," \u2014 "),KD=n(nke,"A",{href:!0});var d2t=s(KD);u0o=r(d2t,"T5Model"),d2t.forEach(t),b0o=r(nke," (T5 model)"),nke.forEach(t),v0o=i(x),$u=n(x,"LI",{});var ske=s($u);vme=n(ske,"STRONG",{});var c2t=s(vme);F0o=r(c2t,"tapas"),c2t.forEach(t),T0o=r(ske," \u2014 "),ZD=n(ske,"A",{href:!0});var f2t=s(ZD);M0o=r(f2t,"TapasModel"),f2t.forEach(t),E0o=r(ske," (TAPAS model)"),ske.forEach(t),C0o=i(x),ku=n(x,"LI",{});var lke=s(ku);Fme=n(lke,"STRONG",{});var m2t=s(Fme);w0o=r(m2t,"trajectory_transformer"),m2t.forEach(t),A0o=r(lke," \u2014 "),eG=n(lke,"A",{href:!0});var g2t=s(eG);L0o=r(g2t,"TrajectoryTransformerModel"),g2t.forEach(t),y0o=r(lke," (Trajectory Transformer model)"),lke.forEach(t),x0o=i(x),Su=n(x,"LI",{});var ike=s(Su);Tme=n(ike,"STRONG",{});var h2t=s(Tme);$0o=r(h2t,"transfo-xl"),h2t.forEach(t),k0o=r(ike," \u2014 "),oG=n(ike,"A",{href:!0});var p2t=s(oG);S0o=r(p2t,"TransfoXLModel"),p2t.forEach(t),R0o=r(ike," (Transformer-XL model)"),ike.forEach(t),P0o=i(x),Ru=n(x,"LI",{});var dke=s(Ru);Mme=n(dke,"STRONG",{});var _2t=s(Mme);B0o=r(_2t,"unispeech"),_2t.forEach(t),I0o=r(dke," \u2014 "),rG=n(dke,"A",{href:!0});var u2t=s(rG);N0o=r(u2t,"UniSpeechModel"),u2t.forEach(t),q0o=r(dke," (UniSpeech model)"),dke.forEach(t),j0o=i(x),Pu=n(x,"LI",{});var cke=s(Pu);Eme=n(cke,"STRONG",{});var b2t=s(Eme);D0o=r(b2t,"unispeech-sat"),b2t.forEach(t),G0o=r(cke," \u2014 "),tG=n(cke,"A",{href:!0});var v2t=s(tG);O0o=r(v2t,"UniSpeechSatModel"),v2t.forEach(t),V0o=r(cke," (UniSpeechSat model)"),cke.forEach(t),X0o=i(x),Bu=n(x,"LI",{});var fke=s(Bu);Cme=n(fke,"STRONG",{});var F2t=s(Cme);z0o=r(F2t,"van"),F2t.forEach(t),W0o=r(fke," \u2014 "),aG=n(fke,"A",{href:!0});var T2t=s(aG);Q0o=r(T2t,"VanModel"),T2t.forEach(t),H0o=r(fke," (VAN model)"),fke.forEach(t),U0o=i(x),Iu=n(x,"LI",{});var mke=s(Iu);wme=n(mke,"STRONG",{});var M2t=s(wme);J0o=r(M2t,"vilt"),M2t.forEach(t),Y0o=r(mke," \u2014 "),nG=n(mke,"A",{href:!0});var E2t=s(nG);K0o=r(E2t,"ViltModel"),E2t.forEach(t),Z0o=r(mke," (ViLT model)"),mke.forEach(t),ewo=i(x),Nu=n(x,"LI",{});var gke=s(Nu);Ame=n(gke,"STRONG",{});var C2t=s(Ame);owo=r(C2t,"vision-text-dual-encoder"),C2t.forEach(t),rwo=r(gke," \u2014 "),sG=n(gke,"A",{href:!0});var w2t=s(sG);two=r(w2t,"VisionTextDualEncoderModel"),w2t.forEach(t),awo=r(gke," (VisionTextDualEncoder model)"),gke.forEach(t),nwo=i(x),qu=n(x,"LI",{});var hke=s(qu);Lme=n(hke,"STRONG",{});var A2t=s(Lme);swo=r(A2t,"visual_bert"),A2t.forEach(t),lwo=r(hke," \u2014 "),lG=n(hke,"A",{href:!0});var L2t=s(lG);iwo=r(L2t,"VisualBertModel"),L2t.forEach(t),dwo=r(hke," (VisualBERT model)"),hke.forEach(t),cwo=i(x),ju=n(x,"LI",{});var pke=s(ju);yme=n(pke,"STRONG",{});var y2t=s(yme);fwo=r(y2t,"vit"),y2t.forEach(t),mwo=r(pke," \u2014 "),iG=n(pke,"A",{href:!0});var x2t=s(iG);gwo=r(x2t,"ViTModel"),x2t.forEach(t),hwo=r(pke," (ViT model)"),pke.forEach(t),pwo=i(x),Du=n(x,"LI",{});var _ke=s(Du);xme=n(_ke,"STRONG",{});var $2t=s(xme);_wo=r($2t,"vit_mae"),$2t.forEach(t),uwo=r(_ke," \u2014 "),dG=n(_ke,"A",{href:!0});var k2t=s(dG);bwo=r(k2t,"ViTMAEModel"),k2t.forEach(t),vwo=r(_ke," (ViTMAE model)"),_ke.forEach(t),Fwo=i(x),Gu=n(x,"LI",{});var uke=s(Gu);$me=n(uke,"STRONG",{});var S2t=s($me);Two=r(S2t,"wav2vec2"),S2t.forEach(t),Mwo=r(uke," \u2014 "),cG=n(uke,"A",{href:!0});var R2t=s(cG);Ewo=r(R2t,"Wav2Vec2Model"),R2t.forEach(t),Cwo=r(uke," (Wav2Vec2 model)"),uke.forEach(t),wwo=i(x),Ou=n(x,"LI",{});var bke=s(Ou);kme=n(bke,"STRONG",{});var P2t=s(kme);Awo=r(P2t,"wav2vec2-conformer"),P2t.forEach(t),Lwo=r(bke," \u2014 "),fG=n(bke,"A",{href:!0});var B2t=s(fG);ywo=r(B2t,"Wav2Vec2ConformerModel"),B2t.forEach(t),xwo=r(bke," (Wav2Vec2-Conformer model)"),bke.forEach(t),$wo=i(x),Vu=n(x,"LI",{});var vke=s(Vu);Sme=n(vke,"STRONG",{});var I2t=s(Sme);kwo=r(I2t,"wavlm"),I2t.forEach(t),Swo=r(vke," \u2014 "),mG=n(vke,"A",{href:!0});var N2t=s(mG);Rwo=r(N2t,"WavLMModel"),N2t.forEach(t),Pwo=r(vke," (WavLM model)"),vke.forEach(t),Bwo=i(x),Xu=n(x,"LI",{});var Fke=s(Xu);Rme=n(Fke,"STRONG",{});var q2t=s(Rme);Iwo=r(q2t,"xglm"),q2t.forEach(t),Nwo=r(Fke," \u2014 "),gG=n(Fke,"A",{href:!0});var j2t=s(gG);qwo=r(j2t,"XGLMModel"),j2t.forEach(t),jwo=r(Fke," (XGLM model)"),Fke.forEach(t),Dwo=i(x),zu=n(x,"LI",{});var Tke=s(zu);Pme=n(Tke,"STRONG",{});var D2t=s(Pme);Gwo=r(D2t,"xlm"),D2t.forEach(t),Owo=r(Tke," \u2014 "),hG=n(Tke,"A",{href:!0});var G2t=s(hG);Vwo=r(G2t,"XLMModel"),G2t.forEach(t),Xwo=r(Tke," (XLM model)"),Tke.forEach(t),zwo=i(x),Wu=n(x,"LI",{});var Mke=s(Wu);Bme=n(Mke,"STRONG",{});var O2t=s(Bme);Wwo=r(O2t,"xlm-prophetnet"),O2t.forEach(t),Qwo=r(Mke," \u2014 "),pG=n(Mke,"A",{href:!0});var V2t=s(pG);Hwo=r(V2t,"XLMProphetNetModel"),V2t.forEach(t),Uwo=r(Mke," (XLM-ProphetNet model)"),Mke.forEach(t),Jwo=i(x),Qu=n(x,"LI",{});var Eke=s(Qu);Ime=n(Eke,"STRONG",{});var X2t=s(Ime);Ywo=r(X2t,"xlm-roberta"),X2t.forEach(t),Kwo=r(Eke," \u2014 "),_G=n(Eke,"A",{href:!0});var z2t=s(_G);Zwo=r(z2t,"XLMRobertaModel"),z2t.forEach(t),eAo=r(Eke," (XLM-RoBERTa model)"),Eke.forEach(t),oAo=i(x),Hu=n(x,"LI",{});var Cke=s(Hu);Nme=n(Cke,"STRONG",{});var W2t=s(Nme);rAo=r(W2t,"xlm-roberta-xl"),W2t.forEach(t),tAo=r(Cke," \u2014 "),uG=n(Cke,"A",{href:!0});var Q2t=s(uG);aAo=r(Q2t,"XLMRobertaXLModel"),Q2t.forEach(t),nAo=r(Cke," (XLM-RoBERTa-XL model)"),Cke.forEach(t),sAo=i(x),Uu=n(x,"LI",{});var wke=s(Uu);qme=n(wke,"STRONG",{});var H2t=s(qme);lAo=r(H2t,"xlnet"),H2t.forEach(t),iAo=r(wke," \u2014 "),bG=n(wke,"A",{href:!0});var U2t=s(bG);dAo=r(U2t,"XLNetModel"),U2t.forEach(t),cAo=r(wke," (XLNet model)"),wke.forEach(t),fAo=i(x),Ju=n(x,"LI",{});var Ake=s(Ju);jme=n(Ake,"STRONG",{});var J2t=s(jme);mAo=r(J2t,"yolos"),J2t.forEach(t),gAo=r(Ake," \u2014 "),vG=n(Ake,"A",{href:!0});var Y2t=s(vG);hAo=r(Y2t,"YolosModel"),Y2t.forEach(t),pAo=r(Ake," (YOLOS model)"),Ake.forEach(t),_Ao=i(x),Yu=n(x,"LI",{});var Lke=s(Yu);Dme=n(Lke,"STRONG",{});var K2t=s(Dme);uAo=r(K2t,"yoso"),K2t.forEach(t),bAo=r(Lke," \u2014 "),FG=n(Lke,"A",{href:!0});var Z2t=s(FG);vAo=r(Z2t,"YosoModel"),Z2t.forEach(t),FAo=r(Lke," (YOSO model)"),Lke.forEach(t),x.forEach(t),TAo=i(la),Ku=n(la,"P",{});var yke=s(Ku);MAo=r(yke,"The model is set in evaluation mode by default using "),Gme=n(yke,"CODE",{});var ebt=s(Gme);EAo=r(ebt,"model.eval()"),ebt.forEach(t),CAo=r(yke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ome=n(yke,"CODE",{});var obt=s(Ome);wAo=r(obt,"model.train()"),obt.forEach(t),yke.forEach(t),AAo=i(la),T(Zu.$$.fragment,la),la.forEach(t),al.forEach(t),JXe=i(f),Wi=n(f,"H2",{class:!0});var rQe=s(Wi);e1=n(rQe,"A",{id:!0,class:!0,href:!0});var rbt=s(e1);Vme=n(rbt,"SPAN",{});var tbt=s(Vme);T(X6.$$.fragment,tbt),tbt.forEach(t),rbt.forEach(t),LAo=i(rQe),Xme=n(rQe,"SPAN",{});var abt=s(Xme);yAo=r(abt,"AutoModelForPreTraining"),abt.forEach(t),rQe.forEach(t),YXe=i(f),ko=n(f,"DIV",{class:!0});var nl=s(ko);T(z6.$$.fragment,nl),xAo=i(nl),Qi=n(nl,"P",{});var rte=s(Qi);$Ao=r(rte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),TG=n(rte,"A",{href:!0});var nbt=s(TG);kAo=r(nbt,"from_pretrained()"),nbt.forEach(t),SAo=r(rte," class method or the "),MG=n(rte,"A",{href:!0});var sbt=s(MG);RAo=r(sbt,"from_config()"),sbt.forEach(t),PAo=r(rte,` class
method.`),rte.forEach(t),BAo=i(nl),W6=n(nl,"P",{});var tQe=s(W6);IAo=r(tQe,"This class cannot be instantiated directly using "),zme=n(tQe,"CODE",{});var lbt=s(zme);NAo=r(lbt,"__init__()"),lbt.forEach(t),qAo=r(tQe," (throws an error)."),tQe.forEach(t),jAo=i(nl),dt=n(nl,"DIV",{class:!0});var vw=s(dt);T(Q6.$$.fragment,vw),DAo=i(vw),Wme=n(vw,"P",{});var ibt=s(Wme);GAo=r(ibt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ibt.forEach(t),OAo=i(vw),Hi=n(vw,"P",{});var tte=s(Hi);VAo=r(tte,`Note:
Loading a model from its configuration file does `),Qme=n(tte,"STRONG",{});var dbt=s(Qme);XAo=r(dbt,"not"),dbt.forEach(t),zAo=r(tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),EG=n(tte,"A",{href:!0});var cbt=s(EG);WAo=r(cbt,"from_pretrained()"),cbt.forEach(t),QAo=r(tte," to load the model weights."),tte.forEach(t),HAo=i(vw),T(o1.$$.fragment,vw),vw.forEach(t),UAo=i(nl),Ke=n(nl,"DIV",{class:!0});var ia=s(Ke);T(H6.$$.fragment,ia),JAo=i(ia),Hme=n(ia,"P",{});var fbt=s(Hme);YAo=r(fbt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),fbt.forEach(t),KAo=i(ia),Na=n(ia,"P",{});var Fw=s(Na);ZAo=r(Fw,"The model class to instantiate is selected based on the "),Ume=n(Fw,"CODE",{});var mbt=s(Ume);e6o=r(mbt,"model_type"),mbt.forEach(t),o6o=r(Fw,` property of the config object (either
passed as an argument or loaded from `),Jme=n(Fw,"CODE",{});var gbt=s(Jme);r6o=r(gbt,"pretrained_model_name_or_path"),gbt.forEach(t),t6o=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yme=n(Fw,"CODE",{});var hbt=s(Yme);a6o=r(hbt,"pretrained_model_name_or_path"),hbt.forEach(t),n6o=r(Fw,":"),Fw.forEach(t),s6o=i(ia),G=n(ia,"UL",{});var O=s(G);r1=n(O,"LI",{});var xke=s(r1);Kme=n(xke,"STRONG",{});var pbt=s(Kme);l6o=r(pbt,"albert"),pbt.forEach(t),i6o=r(xke," \u2014 "),CG=n(xke,"A",{href:!0});var _bt=s(CG);d6o=r(_bt,"AlbertForPreTraining"),_bt.forEach(t),c6o=r(xke," (ALBERT model)"),xke.forEach(t),f6o=i(O),t1=n(O,"LI",{});var $ke=s(t1);Zme=n($ke,"STRONG",{});var ubt=s(Zme);m6o=r(ubt,"bart"),ubt.forEach(t),g6o=r($ke," \u2014 "),wG=n($ke,"A",{href:!0});var bbt=s(wG);h6o=r(bbt,"BartForConditionalGeneration"),bbt.forEach(t),p6o=r($ke," (BART model)"),$ke.forEach(t),_6o=i(O),a1=n(O,"LI",{});var kke=s(a1);ege=n(kke,"STRONG",{});var vbt=s(ege);u6o=r(vbt,"bert"),vbt.forEach(t),b6o=r(kke," \u2014 "),AG=n(kke,"A",{href:!0});var Fbt=s(AG);v6o=r(Fbt,"BertForPreTraining"),Fbt.forEach(t),F6o=r(kke," (BERT model)"),kke.forEach(t),T6o=i(O),n1=n(O,"LI",{});var Ske=s(n1);oge=n(Ske,"STRONG",{});var Tbt=s(oge);M6o=r(Tbt,"big_bird"),Tbt.forEach(t),E6o=r(Ske," \u2014 "),LG=n(Ske,"A",{href:!0});var Mbt=s(LG);C6o=r(Mbt,"BigBirdForPreTraining"),Mbt.forEach(t),w6o=r(Ske," (BigBird model)"),Ske.forEach(t),A6o=i(O),s1=n(O,"LI",{});var Rke=s(s1);rge=n(Rke,"STRONG",{});var Ebt=s(rge);L6o=r(Ebt,"bloom"),Ebt.forEach(t),y6o=r(Rke," \u2014 "),yG=n(Rke,"A",{href:!0});var Cbt=s(yG);x6o=r(Cbt,"BloomForCausalLM"),Cbt.forEach(t),$6o=r(Rke," (BLOOM model)"),Rke.forEach(t),k6o=i(O),l1=n(O,"LI",{});var Pke=s(l1);tge=n(Pke,"STRONG",{});var wbt=s(tge);S6o=r(wbt,"camembert"),wbt.forEach(t),R6o=r(Pke," \u2014 "),xG=n(Pke,"A",{href:!0});var Abt=s(xG);P6o=r(Abt,"CamembertForMaskedLM"),Abt.forEach(t),B6o=r(Pke," (CamemBERT model)"),Pke.forEach(t),I6o=i(O),i1=n(O,"LI",{});var Bke=s(i1);age=n(Bke,"STRONG",{});var Lbt=s(age);N6o=r(Lbt,"ctrl"),Lbt.forEach(t),q6o=r(Bke," \u2014 "),$G=n(Bke,"A",{href:!0});var ybt=s($G);j6o=r(ybt,"CTRLLMHeadModel"),ybt.forEach(t),D6o=r(Bke," (CTRL model)"),Bke.forEach(t),G6o=i(O),d1=n(O,"LI",{});var Ike=s(d1);nge=n(Ike,"STRONG",{});var xbt=s(nge);O6o=r(xbt,"data2vec-text"),xbt.forEach(t),V6o=r(Ike," \u2014 "),kG=n(Ike,"A",{href:!0});var $bt=s(kG);X6o=r($bt,"Data2VecTextForMaskedLM"),$bt.forEach(t),z6o=r(Ike," (Data2VecText model)"),Ike.forEach(t),W6o=i(O),c1=n(O,"LI",{});var Nke=s(c1);sge=n(Nke,"STRONG",{});var kbt=s(sge);Q6o=r(kbt,"deberta"),kbt.forEach(t),H6o=r(Nke," \u2014 "),SG=n(Nke,"A",{href:!0});var Sbt=s(SG);U6o=r(Sbt,"DebertaForMaskedLM"),Sbt.forEach(t),J6o=r(Nke," (DeBERTa model)"),Nke.forEach(t),Y6o=i(O),f1=n(O,"LI",{});var qke=s(f1);lge=n(qke,"STRONG",{});var Rbt=s(lge);K6o=r(Rbt,"deberta-v2"),Rbt.forEach(t),Z6o=r(qke," \u2014 "),RG=n(qke,"A",{href:!0});var Pbt=s(RG);eLo=r(Pbt,"DebertaV2ForMaskedLM"),Pbt.forEach(t),oLo=r(qke," (DeBERTa-v2 model)"),qke.forEach(t),rLo=i(O),m1=n(O,"LI",{});var jke=s(m1);ige=n(jke,"STRONG",{});var Bbt=s(ige);tLo=r(Bbt,"distilbert"),Bbt.forEach(t),aLo=r(jke," \u2014 "),PG=n(jke,"A",{href:!0});var Ibt=s(PG);nLo=r(Ibt,"DistilBertForMaskedLM"),Ibt.forEach(t),sLo=r(jke," (DistilBERT model)"),jke.forEach(t),lLo=i(O),g1=n(O,"LI",{});var Dke=s(g1);dge=n(Dke,"STRONG",{});var Nbt=s(dge);iLo=r(Nbt,"electra"),Nbt.forEach(t),dLo=r(Dke," \u2014 "),BG=n(Dke,"A",{href:!0});var qbt=s(BG);cLo=r(qbt,"ElectraForPreTraining"),qbt.forEach(t),fLo=r(Dke," (ELECTRA model)"),Dke.forEach(t),mLo=i(O),h1=n(O,"LI",{});var Gke=s(h1);cge=n(Gke,"STRONG",{});var jbt=s(cge);gLo=r(jbt,"flaubert"),jbt.forEach(t),hLo=r(Gke," \u2014 "),IG=n(Gke,"A",{href:!0});var Dbt=s(IG);pLo=r(Dbt,"FlaubertWithLMHeadModel"),Dbt.forEach(t),_Lo=r(Gke," (FlauBERT model)"),Gke.forEach(t),uLo=i(O),p1=n(O,"LI",{});var Oke=s(p1);fge=n(Oke,"STRONG",{});var Gbt=s(fge);bLo=r(Gbt,"flava"),Gbt.forEach(t),vLo=r(Oke," \u2014 "),NG=n(Oke,"A",{href:!0});var Obt=s(NG);FLo=r(Obt,"FlavaForPreTraining"),Obt.forEach(t),TLo=r(Oke," (FLAVA model)"),Oke.forEach(t),MLo=i(O),_1=n(O,"LI",{});var Vke=s(_1);mge=n(Vke,"STRONG",{});var Vbt=s(mge);ELo=r(Vbt,"fnet"),Vbt.forEach(t),CLo=r(Vke," \u2014 "),qG=n(Vke,"A",{href:!0});var Xbt=s(qG);wLo=r(Xbt,"FNetForPreTraining"),Xbt.forEach(t),ALo=r(Vke," (FNet model)"),Vke.forEach(t),LLo=i(O),u1=n(O,"LI",{});var Xke=s(u1);gge=n(Xke,"STRONG",{});var zbt=s(gge);yLo=r(zbt,"fsmt"),zbt.forEach(t),xLo=r(Xke," \u2014 "),jG=n(Xke,"A",{href:!0});var Wbt=s(jG);$Lo=r(Wbt,"FSMTForConditionalGeneration"),Wbt.forEach(t),kLo=r(Xke," (FairSeq Machine-Translation model)"),Xke.forEach(t),SLo=i(O),b1=n(O,"LI",{});var zke=s(b1);hge=n(zke,"STRONG",{});var Qbt=s(hge);RLo=r(Qbt,"funnel"),Qbt.forEach(t),PLo=r(zke," \u2014 "),DG=n(zke,"A",{href:!0});var Hbt=s(DG);BLo=r(Hbt,"FunnelForPreTraining"),Hbt.forEach(t),ILo=r(zke," (Funnel Transformer model)"),zke.forEach(t),NLo=i(O),v1=n(O,"LI",{});var Wke=s(v1);pge=n(Wke,"STRONG",{});var Ubt=s(pge);qLo=r(Ubt,"gpt2"),Ubt.forEach(t),jLo=r(Wke," \u2014 "),GG=n(Wke,"A",{href:!0});var Jbt=s(GG);DLo=r(Jbt,"GPT2LMHeadModel"),Jbt.forEach(t),GLo=r(Wke," (OpenAI GPT-2 model)"),Wke.forEach(t),OLo=i(O),F1=n(O,"LI",{});var Qke=s(F1);_ge=n(Qke,"STRONG",{});var Ybt=s(_ge);VLo=r(Ybt,"ibert"),Ybt.forEach(t),XLo=r(Qke," \u2014 "),OG=n(Qke,"A",{href:!0});var Kbt=s(OG);zLo=r(Kbt,"IBertForMaskedLM"),Kbt.forEach(t),WLo=r(Qke," (I-BERT model)"),Qke.forEach(t),QLo=i(O),T1=n(O,"LI",{});var Hke=s(T1);uge=n(Hke,"STRONG",{});var Zbt=s(uge);HLo=r(Zbt,"layoutlm"),Zbt.forEach(t),ULo=r(Hke," \u2014 "),VG=n(Hke,"A",{href:!0});var e3t=s(VG);JLo=r(e3t,"LayoutLMForMaskedLM"),e3t.forEach(t),YLo=r(Hke," (LayoutLM model)"),Hke.forEach(t),KLo=i(O),M1=n(O,"LI",{});var Uke=s(M1);bge=n(Uke,"STRONG",{});var o3t=s(bge);ZLo=r(o3t,"longformer"),o3t.forEach(t),eyo=r(Uke," \u2014 "),XG=n(Uke,"A",{href:!0});var r3t=s(XG);oyo=r(r3t,"LongformerForMaskedLM"),r3t.forEach(t),ryo=r(Uke," (Longformer model)"),Uke.forEach(t),tyo=i(O),E1=n(O,"LI",{});var Jke=s(E1);vge=n(Jke,"STRONG",{});var t3t=s(vge);ayo=r(t3t,"lxmert"),t3t.forEach(t),nyo=r(Jke," \u2014 "),zG=n(Jke,"A",{href:!0});var a3t=s(zG);syo=r(a3t,"LxmertForPreTraining"),a3t.forEach(t),lyo=r(Jke," (LXMERT model)"),Jke.forEach(t),iyo=i(O),C1=n(O,"LI",{});var Yke=s(C1);Fge=n(Yke,"STRONG",{});var n3t=s(Fge);dyo=r(n3t,"megatron-bert"),n3t.forEach(t),cyo=r(Yke," \u2014 "),WG=n(Yke,"A",{href:!0});var s3t=s(WG);fyo=r(s3t,"MegatronBertForPreTraining"),s3t.forEach(t),myo=r(Yke," (Megatron-BERT model)"),Yke.forEach(t),gyo=i(O),w1=n(O,"LI",{});var Kke=s(w1);Tge=n(Kke,"STRONG",{});var l3t=s(Tge);hyo=r(l3t,"mobilebert"),l3t.forEach(t),pyo=r(Kke," \u2014 "),QG=n(Kke,"A",{href:!0});var i3t=s(QG);_yo=r(i3t,"MobileBertForPreTraining"),i3t.forEach(t),uyo=r(Kke," (MobileBERT model)"),Kke.forEach(t),byo=i(O),A1=n(O,"LI",{});var Zke=s(A1);Mge=n(Zke,"STRONG",{});var d3t=s(Mge);vyo=r(d3t,"mpnet"),d3t.forEach(t),Fyo=r(Zke," \u2014 "),HG=n(Zke,"A",{href:!0});var c3t=s(HG);Tyo=r(c3t,"MPNetForMaskedLM"),c3t.forEach(t),Myo=r(Zke," (MPNet model)"),Zke.forEach(t),Eyo=i(O),L1=n(O,"LI",{});var eSe=s(L1);Ege=n(eSe,"STRONG",{});var f3t=s(Ege);Cyo=r(f3t,"mvp"),f3t.forEach(t),wyo=r(eSe," \u2014 "),UG=n(eSe,"A",{href:!0});var m3t=s(UG);Ayo=r(m3t,"MvpForConditionalGeneration"),m3t.forEach(t),Lyo=r(eSe," (MVP model)"),eSe.forEach(t),yyo=i(O),y1=n(O,"LI",{});var oSe=s(y1);Cge=n(oSe,"STRONG",{});var g3t=s(Cge);xyo=r(g3t,"nezha"),g3t.forEach(t),$yo=r(oSe," \u2014 "),JG=n(oSe,"A",{href:!0});var h3t=s(JG);kyo=r(h3t,"NezhaForPreTraining"),h3t.forEach(t),Syo=r(oSe," (Nezha model)"),oSe.forEach(t),Ryo=i(O),x1=n(O,"LI",{});var rSe=s(x1);wge=n(rSe,"STRONG",{});var p3t=s(wge);Pyo=r(p3t,"openai-gpt"),p3t.forEach(t),Byo=r(rSe," \u2014 "),YG=n(rSe,"A",{href:!0});var _3t=s(YG);Iyo=r(_3t,"OpenAIGPTLMHeadModel"),_3t.forEach(t),Nyo=r(rSe," (OpenAI GPT model)"),rSe.forEach(t),qyo=i(O),$1=n(O,"LI",{});var tSe=s($1);Age=n(tSe,"STRONG",{});var u3t=s(Age);jyo=r(u3t,"retribert"),u3t.forEach(t),Dyo=r(tSe," \u2014 "),KG=n(tSe,"A",{href:!0});var b3t=s(KG);Gyo=r(b3t,"RetriBertModel"),b3t.forEach(t),Oyo=r(tSe," (RetriBERT model)"),tSe.forEach(t),Vyo=i(O),k1=n(O,"LI",{});var aSe=s(k1);Lge=n(aSe,"STRONG",{});var v3t=s(Lge);Xyo=r(v3t,"roberta"),v3t.forEach(t),zyo=r(aSe," \u2014 "),ZG=n(aSe,"A",{href:!0});var F3t=s(ZG);Wyo=r(F3t,"RobertaForMaskedLM"),F3t.forEach(t),Qyo=r(aSe," (RoBERTa model)"),aSe.forEach(t),Hyo=i(O),S1=n(O,"LI",{});var nSe=s(S1);yge=n(nSe,"STRONG",{});var T3t=s(yge);Uyo=r(T3t,"splinter"),T3t.forEach(t),Jyo=r(nSe," \u2014 "),eO=n(nSe,"A",{href:!0});var M3t=s(eO);Yyo=r(M3t,"SplinterForPreTraining"),M3t.forEach(t),Kyo=r(nSe," (Splinter model)"),nSe.forEach(t),Zyo=i(O),R1=n(O,"LI",{});var sSe=s(R1);xge=n(sSe,"STRONG",{});var E3t=s(xge);exo=r(E3t,"squeezebert"),E3t.forEach(t),oxo=r(sSe," \u2014 "),oO=n(sSe,"A",{href:!0});var C3t=s(oO);rxo=r(C3t,"SqueezeBertForMaskedLM"),C3t.forEach(t),txo=r(sSe," (SqueezeBERT model)"),sSe.forEach(t),axo=i(O),P1=n(O,"LI",{});var lSe=s(P1);$ge=n(lSe,"STRONG",{});var w3t=s($ge);nxo=r(w3t,"t5"),w3t.forEach(t),sxo=r(lSe," \u2014 "),rO=n(lSe,"A",{href:!0});var A3t=s(rO);lxo=r(A3t,"T5ForConditionalGeneration"),A3t.forEach(t),ixo=r(lSe," (T5 model)"),lSe.forEach(t),dxo=i(O),B1=n(O,"LI",{});var iSe=s(B1);kge=n(iSe,"STRONG",{});var L3t=s(kge);cxo=r(L3t,"tapas"),L3t.forEach(t),fxo=r(iSe," \u2014 "),tO=n(iSe,"A",{href:!0});var y3t=s(tO);mxo=r(y3t,"TapasForMaskedLM"),y3t.forEach(t),gxo=r(iSe," (TAPAS model)"),iSe.forEach(t),hxo=i(O),I1=n(O,"LI",{});var dSe=s(I1);Sge=n(dSe,"STRONG",{});var x3t=s(Sge);pxo=r(x3t,"transfo-xl"),x3t.forEach(t),_xo=r(dSe," \u2014 "),aO=n(dSe,"A",{href:!0});var $3t=s(aO);uxo=r($3t,"TransfoXLLMHeadModel"),$3t.forEach(t),bxo=r(dSe," (Transformer-XL model)"),dSe.forEach(t),vxo=i(O),N1=n(O,"LI",{});var cSe=s(N1);Rge=n(cSe,"STRONG",{});var k3t=s(Rge);Fxo=r(k3t,"unispeech"),k3t.forEach(t),Txo=r(cSe," \u2014 "),nO=n(cSe,"A",{href:!0});var S3t=s(nO);Mxo=r(S3t,"UniSpeechForPreTraining"),S3t.forEach(t),Exo=r(cSe," (UniSpeech model)"),cSe.forEach(t),Cxo=i(O),q1=n(O,"LI",{});var fSe=s(q1);Pge=n(fSe,"STRONG",{});var R3t=s(Pge);wxo=r(R3t,"unispeech-sat"),R3t.forEach(t),Axo=r(fSe," \u2014 "),sO=n(fSe,"A",{href:!0});var P3t=s(sO);Lxo=r(P3t,"UniSpeechSatForPreTraining"),P3t.forEach(t),yxo=r(fSe," (UniSpeechSat model)"),fSe.forEach(t),xxo=i(O),j1=n(O,"LI",{});var mSe=s(j1);Bge=n(mSe,"STRONG",{});var B3t=s(Bge);$xo=r(B3t,"visual_bert"),B3t.forEach(t),kxo=r(mSe," \u2014 "),lO=n(mSe,"A",{href:!0});var I3t=s(lO);Sxo=r(I3t,"VisualBertForPreTraining"),I3t.forEach(t),Rxo=r(mSe," (VisualBERT model)"),mSe.forEach(t),Pxo=i(O),D1=n(O,"LI",{});var gSe=s(D1);Ige=n(gSe,"STRONG",{});var N3t=s(Ige);Bxo=r(N3t,"vit_mae"),N3t.forEach(t),Ixo=r(gSe," \u2014 "),iO=n(gSe,"A",{href:!0});var q3t=s(iO);Nxo=r(q3t,"ViTMAEForPreTraining"),q3t.forEach(t),qxo=r(gSe," (ViTMAE model)"),gSe.forEach(t),jxo=i(O),G1=n(O,"LI",{});var hSe=s(G1);Nge=n(hSe,"STRONG",{});var j3t=s(Nge);Dxo=r(j3t,"wav2vec2"),j3t.forEach(t),Gxo=r(hSe," \u2014 "),dO=n(hSe,"A",{href:!0});var D3t=s(dO);Oxo=r(D3t,"Wav2Vec2ForPreTraining"),D3t.forEach(t),Vxo=r(hSe," (Wav2Vec2 model)"),hSe.forEach(t),Xxo=i(O),O1=n(O,"LI",{});var pSe=s(O1);qge=n(pSe,"STRONG",{});var G3t=s(qge);zxo=r(G3t,"wav2vec2-conformer"),G3t.forEach(t),Wxo=r(pSe," \u2014 "),cO=n(pSe,"A",{href:!0});var O3t=s(cO);Qxo=r(O3t,"Wav2Vec2ConformerForPreTraining"),O3t.forEach(t),Hxo=r(pSe," (Wav2Vec2-Conformer model)"),pSe.forEach(t),Uxo=i(O),V1=n(O,"LI",{});var _Se=s(V1);jge=n(_Se,"STRONG",{});var V3t=s(jge);Jxo=r(V3t,"xlm"),V3t.forEach(t),Yxo=r(_Se," \u2014 "),fO=n(_Se,"A",{href:!0});var X3t=s(fO);Kxo=r(X3t,"XLMWithLMHeadModel"),X3t.forEach(t),Zxo=r(_Se," (XLM model)"),_Se.forEach(t),e$o=i(O),X1=n(O,"LI",{});var uSe=s(X1);Dge=n(uSe,"STRONG",{});var z3t=s(Dge);o$o=r(z3t,"xlm-roberta"),z3t.forEach(t),r$o=r(uSe," \u2014 "),mO=n(uSe,"A",{href:!0});var W3t=s(mO);t$o=r(W3t,"XLMRobertaForMaskedLM"),W3t.forEach(t),a$o=r(uSe," (XLM-RoBERTa model)"),uSe.forEach(t),n$o=i(O),z1=n(O,"LI",{});var bSe=s(z1);Gge=n(bSe,"STRONG",{});var Q3t=s(Gge);s$o=r(Q3t,"xlm-roberta-xl"),Q3t.forEach(t),l$o=r(bSe," \u2014 "),gO=n(bSe,"A",{href:!0});var H3t=s(gO);i$o=r(H3t,"XLMRobertaXLForMaskedLM"),H3t.forEach(t),d$o=r(bSe," (XLM-RoBERTa-XL model)"),bSe.forEach(t),c$o=i(O),W1=n(O,"LI",{});var vSe=s(W1);Oge=n(vSe,"STRONG",{});var U3t=s(Oge);f$o=r(U3t,"xlnet"),U3t.forEach(t),m$o=r(vSe," \u2014 "),hO=n(vSe,"A",{href:!0});var J3t=s(hO);g$o=r(J3t,"XLNetLMHeadModel"),J3t.forEach(t),h$o=r(vSe," (XLNet model)"),vSe.forEach(t),O.forEach(t),p$o=i(ia),Q1=n(ia,"P",{});var FSe=s(Q1);_$o=r(FSe,"The model is set in evaluation mode by default using "),Vge=n(FSe,"CODE",{});var Y3t=s(Vge);u$o=r(Y3t,"model.eval()"),Y3t.forEach(t),b$o=r(FSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xge=n(FSe,"CODE",{});var K3t=s(Xge);v$o=r(K3t,"model.train()"),K3t.forEach(t),FSe.forEach(t),F$o=i(ia),T(H1.$$.fragment,ia),ia.forEach(t),nl.forEach(t),KXe=i(f),Ui=n(f,"H2",{class:!0});var aQe=s(Ui);U1=n(aQe,"A",{id:!0,class:!0,href:!0});var Z3t=s(U1);zge=n(Z3t,"SPAN",{});var evt=s(zge);T(U6.$$.fragment,evt),evt.forEach(t),Z3t.forEach(t),T$o=i(aQe),Wge=n(aQe,"SPAN",{});var ovt=s(Wge);M$o=r(ovt,"AutoModelForCausalLM"),ovt.forEach(t),aQe.forEach(t),ZXe=i(f),So=n(f,"DIV",{class:!0});var sl=s(So);T(J6.$$.fragment,sl),E$o=i(sl),Ji=n(sl,"P",{});var ate=s(Ji);C$o=r(ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),pO=n(ate,"A",{href:!0});var rvt=s(pO);w$o=r(rvt,"from_pretrained()"),rvt.forEach(t),A$o=r(ate," class method or the "),_O=n(ate,"A",{href:!0});var tvt=s(_O);L$o=r(tvt,"from_config()"),tvt.forEach(t),y$o=r(ate,` class
method.`),ate.forEach(t),x$o=i(sl),Y6=n(sl,"P",{});var nQe=s(Y6);$$o=r(nQe,"This class cannot be instantiated directly using "),Qge=n(nQe,"CODE",{});var avt=s(Qge);k$o=r(avt,"__init__()"),avt.forEach(t),S$o=r(nQe," (throws an error)."),nQe.forEach(t),R$o=i(sl),ct=n(sl,"DIV",{class:!0});var Tw=s(ct);T(K6.$$.fragment,Tw),P$o=i(Tw),Hge=n(Tw,"P",{});var nvt=s(Hge);B$o=r(nvt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),nvt.forEach(t),I$o=i(Tw),Yi=n(Tw,"P",{});var nte=s(Yi);N$o=r(nte,`Note:
Loading a model from its configuration file does `),Uge=n(nte,"STRONG",{});var svt=s(Uge);q$o=r(svt,"not"),svt.forEach(t),j$o=r(nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),uO=n(nte,"A",{href:!0});var lvt=s(uO);D$o=r(lvt,"from_pretrained()"),lvt.forEach(t),G$o=r(nte," to load the model weights."),nte.forEach(t),O$o=i(Tw),T(J1.$$.fragment,Tw),Tw.forEach(t),V$o=i(sl),Ze=n(sl,"DIV",{class:!0});var da=s(Ze);T(Z6.$$.fragment,da),X$o=i(da),Jge=n(da,"P",{});var ivt=s(Jge);z$o=r(ivt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ivt.forEach(t),W$o=i(da),qa=n(da,"P",{});var Mw=s(qa);Q$o=r(Mw,"The model class to instantiate is selected based on the "),Yge=n(Mw,"CODE",{});var dvt=s(Yge);H$o=r(dvt,"model_type"),dvt.forEach(t),U$o=r(Mw,` property of the config object (either
passed as an argument or loaded from `),Kge=n(Mw,"CODE",{});var cvt=s(Kge);J$o=r(cvt,"pretrained_model_name_or_path"),cvt.forEach(t),Y$o=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zge=n(Mw,"CODE",{});var fvt=s(Zge);K$o=r(fvt,"pretrained_model_name_or_path"),fvt.forEach(t),Z$o=r(Mw,":"),Mw.forEach(t),eko=i(da),z=n(da,"UL",{});var W=s(z);Y1=n(W,"LI",{});var TSe=s(Y1);ehe=n(TSe,"STRONG",{});var mvt=s(ehe);oko=r(mvt,"bart"),mvt.forEach(t),rko=r(TSe," \u2014 "),bO=n(TSe,"A",{href:!0});var gvt=s(bO);tko=r(gvt,"BartForCausalLM"),gvt.forEach(t),ako=r(TSe," (BART model)"),TSe.forEach(t),nko=i(W),K1=n(W,"LI",{});var MSe=s(K1);ohe=n(MSe,"STRONG",{});var hvt=s(ohe);sko=r(hvt,"bert"),hvt.forEach(t),lko=r(MSe," \u2014 "),vO=n(MSe,"A",{href:!0});var pvt=s(vO);iko=r(pvt,"BertLMHeadModel"),pvt.forEach(t),dko=r(MSe," (BERT model)"),MSe.forEach(t),cko=i(W),Z1=n(W,"LI",{});var ESe=s(Z1);rhe=n(ESe,"STRONG",{});var _vt=s(rhe);fko=r(_vt,"bert-generation"),_vt.forEach(t),mko=r(ESe," \u2014 "),FO=n(ESe,"A",{href:!0});var uvt=s(FO);gko=r(uvt,"BertGenerationDecoder"),uvt.forEach(t),hko=r(ESe," (Bert Generation model)"),ESe.forEach(t),pko=i(W),e2=n(W,"LI",{});var CSe=s(e2);the=n(CSe,"STRONG",{});var bvt=s(the);_ko=r(bvt,"big_bird"),bvt.forEach(t),uko=r(CSe," \u2014 "),TO=n(CSe,"A",{href:!0});var vvt=s(TO);bko=r(vvt,"BigBirdForCausalLM"),vvt.forEach(t),vko=r(CSe," (BigBird model)"),CSe.forEach(t),Fko=i(W),o2=n(W,"LI",{});var wSe=s(o2);ahe=n(wSe,"STRONG",{});var Fvt=s(ahe);Tko=r(Fvt,"bigbird_pegasus"),Fvt.forEach(t),Mko=r(wSe," \u2014 "),MO=n(wSe,"A",{href:!0});var Tvt=s(MO);Eko=r(Tvt,"BigBirdPegasusForCausalLM"),Tvt.forEach(t),Cko=r(wSe," (BigBird-Pegasus model)"),wSe.forEach(t),wko=i(W),r2=n(W,"LI",{});var ASe=s(r2);nhe=n(ASe,"STRONG",{});var Mvt=s(nhe);Ako=r(Mvt,"blenderbot"),Mvt.forEach(t),Lko=r(ASe," \u2014 "),EO=n(ASe,"A",{href:!0});var Evt=s(EO);yko=r(Evt,"BlenderbotForCausalLM"),Evt.forEach(t),xko=r(ASe," (Blenderbot model)"),ASe.forEach(t),$ko=i(W),t2=n(W,"LI",{});var LSe=s(t2);she=n(LSe,"STRONG",{});var Cvt=s(she);kko=r(Cvt,"blenderbot-small"),Cvt.forEach(t),Sko=r(LSe," \u2014 "),CO=n(LSe,"A",{href:!0});var wvt=s(CO);Rko=r(wvt,"BlenderbotSmallForCausalLM"),wvt.forEach(t),Pko=r(LSe," (BlenderbotSmall model)"),LSe.forEach(t),Bko=i(W),a2=n(W,"LI",{});var ySe=s(a2);lhe=n(ySe,"STRONG",{});var Avt=s(lhe);Iko=r(Avt,"bloom"),Avt.forEach(t),Nko=r(ySe," \u2014 "),wO=n(ySe,"A",{href:!0});var Lvt=s(wO);qko=r(Lvt,"BloomForCausalLM"),Lvt.forEach(t),jko=r(ySe," (BLOOM model)"),ySe.forEach(t),Dko=i(W),n2=n(W,"LI",{});var xSe=s(n2);ihe=n(xSe,"STRONG",{});var yvt=s(ihe);Gko=r(yvt,"camembert"),yvt.forEach(t),Oko=r(xSe," \u2014 "),AO=n(xSe,"A",{href:!0});var xvt=s(AO);Vko=r(xvt,"CamembertForCausalLM"),xvt.forEach(t),Xko=r(xSe," (CamemBERT model)"),xSe.forEach(t),zko=i(W),s2=n(W,"LI",{});var $Se=s(s2);dhe=n($Se,"STRONG",{});var $vt=s(dhe);Wko=r($vt,"codegen"),$vt.forEach(t),Qko=r($Se," \u2014 "),LO=n($Se,"A",{href:!0});var kvt=s(LO);Hko=r(kvt,"CodeGenForCausalLM"),kvt.forEach(t),Uko=r($Se," (CodeGen model)"),$Se.forEach(t),Jko=i(W),l2=n(W,"LI",{});var kSe=s(l2);che=n(kSe,"STRONG",{});var Svt=s(che);Yko=r(Svt,"ctrl"),Svt.forEach(t),Kko=r(kSe," \u2014 "),yO=n(kSe,"A",{href:!0});var Rvt=s(yO);Zko=r(Rvt,"CTRLLMHeadModel"),Rvt.forEach(t),eSo=r(kSe," (CTRL model)"),kSe.forEach(t),oSo=i(W),i2=n(W,"LI",{});var SSe=s(i2);fhe=n(SSe,"STRONG",{});var Pvt=s(fhe);rSo=r(Pvt,"data2vec-text"),Pvt.forEach(t),tSo=r(SSe," \u2014 "),xO=n(SSe,"A",{href:!0});var Bvt=s(xO);aSo=r(Bvt,"Data2VecTextForCausalLM"),Bvt.forEach(t),nSo=r(SSe," (Data2VecText model)"),SSe.forEach(t),sSo=i(W),d2=n(W,"LI",{});var RSe=s(d2);mhe=n(RSe,"STRONG",{});var Ivt=s(mhe);lSo=r(Ivt,"electra"),Ivt.forEach(t),iSo=r(RSe," \u2014 "),$O=n(RSe,"A",{href:!0});var Nvt=s($O);dSo=r(Nvt,"ElectraForCausalLM"),Nvt.forEach(t),cSo=r(RSe," (ELECTRA model)"),RSe.forEach(t),fSo=i(W),c2=n(W,"LI",{});var PSe=s(c2);ghe=n(PSe,"STRONG",{});var qvt=s(ghe);mSo=r(qvt,"gpt2"),qvt.forEach(t),gSo=r(PSe," \u2014 "),kO=n(PSe,"A",{href:!0});var jvt=s(kO);hSo=r(jvt,"GPT2LMHeadModel"),jvt.forEach(t),pSo=r(PSe," (OpenAI GPT-2 model)"),PSe.forEach(t),_So=i(W),f2=n(W,"LI",{});var BSe=s(f2);hhe=n(BSe,"STRONG",{});var Dvt=s(hhe);uSo=r(Dvt,"gpt_neo"),Dvt.forEach(t),bSo=r(BSe," \u2014 "),SO=n(BSe,"A",{href:!0});var Gvt=s(SO);vSo=r(Gvt,"GPTNeoForCausalLM"),Gvt.forEach(t),FSo=r(BSe," (GPT Neo model)"),BSe.forEach(t),TSo=i(W),m2=n(W,"LI",{});var ISe=s(m2);phe=n(ISe,"STRONG",{});var Ovt=s(phe);MSo=r(Ovt,"gpt_neox"),Ovt.forEach(t),ESo=r(ISe," \u2014 "),RO=n(ISe,"A",{href:!0});var Vvt=s(RO);CSo=r(Vvt,"GPTNeoXForCausalLM"),Vvt.forEach(t),wSo=r(ISe," (GPT NeoX model)"),ISe.forEach(t),ASo=i(W),g2=n(W,"LI",{});var NSe=s(g2);_he=n(NSe,"STRONG",{});var Xvt=s(_he);LSo=r(Xvt,"gptj"),Xvt.forEach(t),ySo=r(NSe," \u2014 "),PO=n(NSe,"A",{href:!0});var zvt=s(PO);xSo=r(zvt,"GPTJForCausalLM"),zvt.forEach(t),$So=r(NSe," (GPT-J model)"),NSe.forEach(t),kSo=i(W),h2=n(W,"LI",{});var qSe=s(h2);uhe=n(qSe,"STRONG",{});var Wvt=s(uhe);SSo=r(Wvt,"marian"),Wvt.forEach(t),RSo=r(qSe," \u2014 "),BO=n(qSe,"A",{href:!0});var Qvt=s(BO);PSo=r(Qvt,"MarianForCausalLM"),Qvt.forEach(t),BSo=r(qSe," (Marian model)"),qSe.forEach(t),ISo=i(W),p2=n(W,"LI",{});var jSe=s(p2);bhe=n(jSe,"STRONG",{});var Hvt=s(bhe);NSo=r(Hvt,"mbart"),Hvt.forEach(t),qSo=r(jSe," \u2014 "),IO=n(jSe,"A",{href:!0});var Uvt=s(IO);jSo=r(Uvt,"MBartForCausalLM"),Uvt.forEach(t),DSo=r(jSe," (mBART model)"),jSe.forEach(t),GSo=i(W),_2=n(W,"LI",{});var DSe=s(_2);vhe=n(DSe,"STRONG",{});var Jvt=s(vhe);OSo=r(Jvt,"megatron-bert"),Jvt.forEach(t),VSo=r(DSe," \u2014 "),NO=n(DSe,"A",{href:!0});var Yvt=s(NO);XSo=r(Yvt,"MegatronBertForCausalLM"),Yvt.forEach(t),zSo=r(DSe," (Megatron-BERT model)"),DSe.forEach(t),WSo=i(W),u2=n(W,"LI",{});var GSe=s(u2);Fhe=n(GSe,"STRONG",{});var Kvt=s(Fhe);QSo=r(Kvt,"mvp"),Kvt.forEach(t),HSo=r(GSe," \u2014 "),qO=n(GSe,"A",{href:!0});var Zvt=s(qO);USo=r(Zvt,"MvpForCausalLM"),Zvt.forEach(t),JSo=r(GSe," (MVP model)"),GSe.forEach(t),YSo=i(W),b2=n(W,"LI",{});var OSe=s(b2);The=n(OSe,"STRONG",{});var eFt=s(The);KSo=r(eFt,"openai-gpt"),eFt.forEach(t),ZSo=r(OSe," \u2014 "),jO=n(OSe,"A",{href:!0});var oFt=s(jO);eRo=r(oFt,"OpenAIGPTLMHeadModel"),oFt.forEach(t),oRo=r(OSe," (OpenAI GPT model)"),OSe.forEach(t),rRo=i(W),v2=n(W,"LI",{});var VSe=s(v2);Mhe=n(VSe,"STRONG",{});var rFt=s(Mhe);tRo=r(rFt,"opt"),rFt.forEach(t),aRo=r(VSe," \u2014 "),DO=n(VSe,"A",{href:!0});var tFt=s(DO);nRo=r(tFt,"OPTForCausalLM"),tFt.forEach(t),sRo=r(VSe," (OPT model)"),VSe.forEach(t),lRo=i(W),F2=n(W,"LI",{});var XSe=s(F2);Ehe=n(XSe,"STRONG",{});var aFt=s(Ehe);iRo=r(aFt,"pegasus"),aFt.forEach(t),dRo=r(XSe," \u2014 "),GO=n(XSe,"A",{href:!0});var nFt=s(GO);cRo=r(nFt,"PegasusForCausalLM"),nFt.forEach(t),fRo=r(XSe," (Pegasus model)"),XSe.forEach(t),mRo=i(W),T2=n(W,"LI",{});var zSe=s(T2);Che=n(zSe,"STRONG",{});var sFt=s(Che);gRo=r(sFt,"plbart"),sFt.forEach(t),hRo=r(zSe," \u2014 "),OO=n(zSe,"A",{href:!0});var lFt=s(OO);pRo=r(lFt,"PLBartForCausalLM"),lFt.forEach(t),_Ro=r(zSe," (PLBart model)"),zSe.forEach(t),uRo=i(W),M2=n(W,"LI",{});var WSe=s(M2);whe=n(WSe,"STRONG",{});var iFt=s(whe);bRo=r(iFt,"prophetnet"),iFt.forEach(t),vRo=r(WSe," \u2014 "),VO=n(WSe,"A",{href:!0});var dFt=s(VO);FRo=r(dFt,"ProphetNetForCausalLM"),dFt.forEach(t),TRo=r(WSe," (ProphetNet model)"),WSe.forEach(t),MRo=i(W),E2=n(W,"LI",{});var QSe=s(E2);Ahe=n(QSe,"STRONG",{});var cFt=s(Ahe);ERo=r(cFt,"qdqbert"),cFt.forEach(t),CRo=r(QSe," \u2014 "),XO=n(QSe,"A",{href:!0});var fFt=s(XO);wRo=r(fFt,"QDQBertLMHeadModel"),fFt.forEach(t),ARo=r(QSe," (QDQBert model)"),QSe.forEach(t),LRo=i(W),C2=n(W,"LI",{});var HSe=s(C2);Lhe=n(HSe,"STRONG",{});var mFt=s(Lhe);yRo=r(mFt,"reformer"),mFt.forEach(t),xRo=r(HSe," \u2014 "),zO=n(HSe,"A",{href:!0});var gFt=s(zO);$Ro=r(gFt,"ReformerModelWithLMHead"),gFt.forEach(t),kRo=r(HSe," (Reformer model)"),HSe.forEach(t),SRo=i(W),w2=n(W,"LI",{});var USe=s(w2);yhe=n(USe,"STRONG",{});var hFt=s(yhe);RRo=r(hFt,"rembert"),hFt.forEach(t),PRo=r(USe," \u2014 "),WO=n(USe,"A",{href:!0});var pFt=s(WO);BRo=r(pFt,"RemBertForCausalLM"),pFt.forEach(t),IRo=r(USe," (RemBERT model)"),USe.forEach(t),NRo=i(W),A2=n(W,"LI",{});var JSe=s(A2);xhe=n(JSe,"STRONG",{});var _Ft=s(xhe);qRo=r(_Ft,"roberta"),_Ft.forEach(t),jRo=r(JSe," \u2014 "),QO=n(JSe,"A",{href:!0});var uFt=s(QO);DRo=r(uFt,"RobertaForCausalLM"),uFt.forEach(t),GRo=r(JSe," (RoBERTa model)"),JSe.forEach(t),ORo=i(W),L2=n(W,"LI",{});var YSe=s(L2);$he=n(YSe,"STRONG",{});var bFt=s($he);VRo=r(bFt,"roformer"),bFt.forEach(t),XRo=r(YSe," \u2014 "),HO=n(YSe,"A",{href:!0});var vFt=s(HO);zRo=r(vFt,"RoFormerForCausalLM"),vFt.forEach(t),WRo=r(YSe," (RoFormer model)"),YSe.forEach(t),QRo=i(W),y2=n(W,"LI",{});var KSe=s(y2);khe=n(KSe,"STRONG",{});var FFt=s(khe);HRo=r(FFt,"speech_to_text_2"),FFt.forEach(t),URo=r(KSe," \u2014 "),UO=n(KSe,"A",{href:!0});var TFt=s(UO);JRo=r(TFt,"Speech2Text2ForCausalLM"),TFt.forEach(t),YRo=r(KSe," (Speech2Text2 model)"),KSe.forEach(t),KRo=i(W),x2=n(W,"LI",{});var ZSe=s(x2);She=n(ZSe,"STRONG",{});var MFt=s(She);ZRo=r(MFt,"transfo-xl"),MFt.forEach(t),ePo=r(ZSe," \u2014 "),JO=n(ZSe,"A",{href:!0});var EFt=s(JO);oPo=r(EFt,"TransfoXLLMHeadModel"),EFt.forEach(t),rPo=r(ZSe," (Transformer-XL model)"),ZSe.forEach(t),tPo=i(W),$2=n(W,"LI",{});var eRe=s($2);Rhe=n(eRe,"STRONG",{});var CFt=s(Rhe);aPo=r(CFt,"trocr"),CFt.forEach(t),nPo=r(eRe," \u2014 "),YO=n(eRe,"A",{href:!0});var wFt=s(YO);sPo=r(wFt,"TrOCRForCausalLM"),wFt.forEach(t),lPo=r(eRe," (TrOCR model)"),eRe.forEach(t),iPo=i(W),k2=n(W,"LI",{});var oRe=s(k2);Phe=n(oRe,"STRONG",{});var AFt=s(Phe);dPo=r(AFt,"xglm"),AFt.forEach(t),cPo=r(oRe," \u2014 "),KO=n(oRe,"A",{href:!0});var LFt=s(KO);fPo=r(LFt,"XGLMForCausalLM"),LFt.forEach(t),mPo=r(oRe," (XGLM model)"),oRe.forEach(t),gPo=i(W),S2=n(W,"LI",{});var rRe=s(S2);Bhe=n(rRe,"STRONG",{});var yFt=s(Bhe);hPo=r(yFt,"xlm"),yFt.forEach(t),pPo=r(rRe," \u2014 "),ZO=n(rRe,"A",{href:!0});var xFt=s(ZO);_Po=r(xFt,"XLMWithLMHeadModel"),xFt.forEach(t),uPo=r(rRe," (XLM model)"),rRe.forEach(t),bPo=i(W),R2=n(W,"LI",{});var tRe=s(R2);Ihe=n(tRe,"STRONG",{});var $Ft=s(Ihe);vPo=r($Ft,"xlm-prophetnet"),$Ft.forEach(t),FPo=r(tRe," \u2014 "),eV=n(tRe,"A",{href:!0});var kFt=s(eV);TPo=r(kFt,"XLMProphetNetForCausalLM"),kFt.forEach(t),MPo=r(tRe," (XLM-ProphetNet model)"),tRe.forEach(t),EPo=i(W),P2=n(W,"LI",{});var aRe=s(P2);Nhe=n(aRe,"STRONG",{});var SFt=s(Nhe);CPo=r(SFt,"xlm-roberta"),SFt.forEach(t),wPo=r(aRe," \u2014 "),oV=n(aRe,"A",{href:!0});var RFt=s(oV);APo=r(RFt,"XLMRobertaForCausalLM"),RFt.forEach(t),LPo=r(aRe," (XLM-RoBERTa model)"),aRe.forEach(t),yPo=i(W),B2=n(W,"LI",{});var nRe=s(B2);qhe=n(nRe,"STRONG",{});var PFt=s(qhe);xPo=r(PFt,"xlm-roberta-xl"),PFt.forEach(t),$Po=r(nRe," \u2014 "),rV=n(nRe,"A",{href:!0});var BFt=s(rV);kPo=r(BFt,"XLMRobertaXLForCausalLM"),BFt.forEach(t),SPo=r(nRe," (XLM-RoBERTa-XL model)"),nRe.forEach(t),RPo=i(W),I2=n(W,"LI",{});var sRe=s(I2);jhe=n(sRe,"STRONG",{});var IFt=s(jhe);PPo=r(IFt,"xlnet"),IFt.forEach(t),BPo=r(sRe," \u2014 "),tV=n(sRe,"A",{href:!0});var NFt=s(tV);IPo=r(NFt,"XLNetLMHeadModel"),NFt.forEach(t),NPo=r(sRe," (XLNet model)"),sRe.forEach(t),W.forEach(t),qPo=i(da),N2=n(da,"P",{});var lRe=s(N2);jPo=r(lRe,"The model is set in evaluation mode by default using "),Dhe=n(lRe,"CODE",{});var qFt=s(Dhe);DPo=r(qFt,"model.eval()"),qFt.forEach(t),GPo=r(lRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ghe=n(lRe,"CODE",{});var jFt=s(Ghe);OPo=r(jFt,"model.train()"),jFt.forEach(t),lRe.forEach(t),VPo=i(da),T(q2.$$.fragment,da),da.forEach(t),sl.forEach(t),eze=i(f),Ki=n(f,"H2",{class:!0});var sQe=s(Ki);j2=n(sQe,"A",{id:!0,class:!0,href:!0});var DFt=s(j2);Ohe=n(DFt,"SPAN",{});var GFt=s(Ohe);T(eL.$$.fragment,GFt),GFt.forEach(t),DFt.forEach(t),XPo=i(sQe),Vhe=n(sQe,"SPAN",{});var OFt=s(Vhe);zPo=r(OFt,"AutoModelForMaskedLM"),OFt.forEach(t),sQe.forEach(t),oze=i(f),Ro=n(f,"DIV",{class:!0});var ll=s(Ro);T(oL.$$.fragment,ll),WPo=i(ll),Zi=n(ll,"P",{});var ste=s(Zi);QPo=r(ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),aV=n(ste,"A",{href:!0});var VFt=s(aV);HPo=r(VFt,"from_pretrained()"),VFt.forEach(t),UPo=r(ste," class method or the "),nV=n(ste,"A",{href:!0});var XFt=s(nV);JPo=r(XFt,"from_config()"),XFt.forEach(t),YPo=r(ste,` class
method.`),ste.forEach(t),KPo=i(ll),rL=n(ll,"P",{});var lQe=s(rL);ZPo=r(lQe,"This class cannot be instantiated directly using "),Xhe=n(lQe,"CODE",{});var zFt=s(Xhe);eBo=r(zFt,"__init__()"),zFt.forEach(t),oBo=r(lQe," (throws an error)."),lQe.forEach(t),rBo=i(ll),ft=n(ll,"DIV",{class:!0});var Ew=s(ft);T(tL.$$.fragment,Ew),tBo=i(Ew),zhe=n(Ew,"P",{});var WFt=s(zhe);aBo=r(WFt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),WFt.forEach(t),nBo=i(Ew),ed=n(Ew,"P",{});var lte=s(ed);sBo=r(lte,`Note:
Loading a model from its configuration file does `),Whe=n(lte,"STRONG",{});var QFt=s(Whe);lBo=r(QFt,"not"),QFt.forEach(t),iBo=r(lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),sV=n(lte,"A",{href:!0});var HFt=s(sV);dBo=r(HFt,"from_pretrained()"),HFt.forEach(t),cBo=r(lte," to load the model weights."),lte.forEach(t),fBo=i(Ew),T(D2.$$.fragment,Ew),Ew.forEach(t),mBo=i(ll),eo=n(ll,"DIV",{class:!0});var ca=s(eo);T(aL.$$.fragment,ca),gBo=i(ca),Qhe=n(ca,"P",{});var UFt=s(Qhe);hBo=r(UFt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),UFt.forEach(t),pBo=i(ca),ja=n(ca,"P",{});var Cw=s(ja);_Bo=r(Cw,"The model class to instantiate is selected based on the "),Hhe=n(Cw,"CODE",{});var JFt=s(Hhe);uBo=r(JFt,"model_type"),JFt.forEach(t),bBo=r(Cw,` property of the config object (either
passed as an argument or loaded from `),Uhe=n(Cw,"CODE",{});var YFt=s(Uhe);vBo=r(YFt,"pretrained_model_name_or_path"),YFt.forEach(t),FBo=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jhe=n(Cw,"CODE",{});var KFt=s(Jhe);TBo=r(KFt,"pretrained_model_name_or_path"),KFt.forEach(t),MBo=r(Cw,":"),Cw.forEach(t),EBo=i(ca),Q=n(ca,"UL",{});var H=s(Q);G2=n(H,"LI",{});var iRe=s(G2);Yhe=n(iRe,"STRONG",{});var ZFt=s(Yhe);CBo=r(ZFt,"albert"),ZFt.forEach(t),wBo=r(iRe," \u2014 "),lV=n(iRe,"A",{href:!0});var eTt=s(lV);ABo=r(eTt,"AlbertForMaskedLM"),eTt.forEach(t),LBo=r(iRe," (ALBERT model)"),iRe.forEach(t),yBo=i(H),O2=n(H,"LI",{});var dRe=s(O2);Khe=n(dRe,"STRONG",{});var oTt=s(Khe);xBo=r(oTt,"bart"),oTt.forEach(t),$Bo=r(dRe," \u2014 "),iV=n(dRe,"A",{href:!0});var rTt=s(iV);kBo=r(rTt,"BartForConditionalGeneration"),rTt.forEach(t),SBo=r(dRe," (BART model)"),dRe.forEach(t),RBo=i(H),V2=n(H,"LI",{});var cRe=s(V2);Zhe=n(cRe,"STRONG",{});var tTt=s(Zhe);PBo=r(tTt,"bert"),tTt.forEach(t),BBo=r(cRe," \u2014 "),dV=n(cRe,"A",{href:!0});var aTt=s(dV);IBo=r(aTt,"BertForMaskedLM"),aTt.forEach(t),NBo=r(cRe," (BERT model)"),cRe.forEach(t),qBo=i(H),X2=n(H,"LI",{});var fRe=s(X2);epe=n(fRe,"STRONG",{});var nTt=s(epe);jBo=r(nTt,"big_bird"),nTt.forEach(t),DBo=r(fRe," \u2014 "),cV=n(fRe,"A",{href:!0});var sTt=s(cV);GBo=r(sTt,"BigBirdForMaskedLM"),sTt.forEach(t),OBo=r(fRe," (BigBird model)"),fRe.forEach(t),VBo=i(H),z2=n(H,"LI",{});var mRe=s(z2);ope=n(mRe,"STRONG",{});var lTt=s(ope);XBo=r(lTt,"camembert"),lTt.forEach(t),zBo=r(mRe," \u2014 "),fV=n(mRe,"A",{href:!0});var iTt=s(fV);WBo=r(iTt,"CamembertForMaskedLM"),iTt.forEach(t),QBo=r(mRe," (CamemBERT model)"),mRe.forEach(t),HBo=i(H),W2=n(H,"LI",{});var gRe=s(W2);rpe=n(gRe,"STRONG",{});var dTt=s(rpe);UBo=r(dTt,"convbert"),dTt.forEach(t),JBo=r(gRe," \u2014 "),mV=n(gRe,"A",{href:!0});var cTt=s(mV);YBo=r(cTt,"ConvBertForMaskedLM"),cTt.forEach(t),KBo=r(gRe," (ConvBERT model)"),gRe.forEach(t),ZBo=i(H),Q2=n(H,"LI",{});var hRe=s(Q2);tpe=n(hRe,"STRONG",{});var fTt=s(tpe);eIo=r(fTt,"data2vec-text"),fTt.forEach(t),oIo=r(hRe," \u2014 "),gV=n(hRe,"A",{href:!0});var mTt=s(gV);rIo=r(mTt,"Data2VecTextForMaskedLM"),mTt.forEach(t),tIo=r(hRe," (Data2VecText model)"),hRe.forEach(t),aIo=i(H),H2=n(H,"LI",{});var pRe=s(H2);ape=n(pRe,"STRONG",{});var gTt=s(ape);nIo=r(gTt,"deberta"),gTt.forEach(t),sIo=r(pRe," \u2014 "),hV=n(pRe,"A",{href:!0});var hTt=s(hV);lIo=r(hTt,"DebertaForMaskedLM"),hTt.forEach(t),iIo=r(pRe," (DeBERTa model)"),pRe.forEach(t),dIo=i(H),U2=n(H,"LI",{});var _Re=s(U2);npe=n(_Re,"STRONG",{});var pTt=s(npe);cIo=r(pTt,"deberta-v2"),pTt.forEach(t),fIo=r(_Re," \u2014 "),pV=n(_Re,"A",{href:!0});var _Tt=s(pV);mIo=r(_Tt,"DebertaV2ForMaskedLM"),_Tt.forEach(t),gIo=r(_Re," (DeBERTa-v2 model)"),_Re.forEach(t),hIo=i(H),J2=n(H,"LI",{});var uRe=s(J2);spe=n(uRe,"STRONG",{});var uTt=s(spe);pIo=r(uTt,"distilbert"),uTt.forEach(t),_Io=r(uRe," \u2014 "),_V=n(uRe,"A",{href:!0});var bTt=s(_V);uIo=r(bTt,"DistilBertForMaskedLM"),bTt.forEach(t),bIo=r(uRe," (DistilBERT model)"),uRe.forEach(t),vIo=i(H),Y2=n(H,"LI",{});var bRe=s(Y2);lpe=n(bRe,"STRONG",{});var vTt=s(lpe);FIo=r(vTt,"electra"),vTt.forEach(t),TIo=r(bRe," \u2014 "),uV=n(bRe,"A",{href:!0});var FTt=s(uV);MIo=r(FTt,"ElectraForMaskedLM"),FTt.forEach(t),EIo=r(bRe," (ELECTRA model)"),bRe.forEach(t),CIo=i(H),K2=n(H,"LI",{});var vRe=s(K2);ipe=n(vRe,"STRONG",{});var TTt=s(ipe);wIo=r(TTt,"flaubert"),TTt.forEach(t),AIo=r(vRe," \u2014 "),bV=n(vRe,"A",{href:!0});var MTt=s(bV);LIo=r(MTt,"FlaubertWithLMHeadModel"),MTt.forEach(t),yIo=r(vRe," (FlauBERT model)"),vRe.forEach(t),xIo=i(H),Z2=n(H,"LI",{});var FRe=s(Z2);dpe=n(FRe,"STRONG",{});var ETt=s(dpe);$Io=r(ETt,"fnet"),ETt.forEach(t),kIo=r(FRe," \u2014 "),vV=n(FRe,"A",{href:!0});var CTt=s(vV);SIo=r(CTt,"FNetForMaskedLM"),CTt.forEach(t),RIo=r(FRe," (FNet model)"),FRe.forEach(t),PIo=i(H),eb=n(H,"LI",{});var TRe=s(eb);cpe=n(TRe,"STRONG",{});var wTt=s(cpe);BIo=r(wTt,"funnel"),wTt.forEach(t),IIo=r(TRe," \u2014 "),FV=n(TRe,"A",{href:!0});var ATt=s(FV);NIo=r(ATt,"FunnelForMaskedLM"),ATt.forEach(t),qIo=r(TRe," (Funnel Transformer model)"),TRe.forEach(t),jIo=i(H),ob=n(H,"LI",{});var MRe=s(ob);fpe=n(MRe,"STRONG",{});var LTt=s(fpe);DIo=r(LTt,"ibert"),LTt.forEach(t),GIo=r(MRe," \u2014 "),TV=n(MRe,"A",{href:!0});var yTt=s(TV);OIo=r(yTt,"IBertForMaskedLM"),yTt.forEach(t),VIo=r(MRe," (I-BERT model)"),MRe.forEach(t),XIo=i(H),rb=n(H,"LI",{});var ERe=s(rb);mpe=n(ERe,"STRONG",{});var xTt=s(mpe);zIo=r(xTt,"layoutlm"),xTt.forEach(t),WIo=r(ERe," \u2014 "),MV=n(ERe,"A",{href:!0});var $Tt=s(MV);QIo=r($Tt,"LayoutLMForMaskedLM"),$Tt.forEach(t),HIo=r(ERe," (LayoutLM model)"),ERe.forEach(t),UIo=i(H),tb=n(H,"LI",{});var CRe=s(tb);gpe=n(CRe,"STRONG",{});var kTt=s(gpe);JIo=r(kTt,"longformer"),kTt.forEach(t),YIo=r(CRe," \u2014 "),EV=n(CRe,"A",{href:!0});var STt=s(EV);KIo=r(STt,"LongformerForMaskedLM"),STt.forEach(t),ZIo=r(CRe," (Longformer model)"),CRe.forEach(t),eNo=i(H),ab=n(H,"LI",{});var wRe=s(ab);hpe=n(wRe,"STRONG",{});var RTt=s(hpe);oNo=r(RTt,"luke"),RTt.forEach(t),rNo=r(wRe," \u2014 "),CV=n(wRe,"A",{href:!0});var PTt=s(CV);tNo=r(PTt,"LukeForMaskedLM"),PTt.forEach(t),aNo=r(wRe," (LUKE model)"),wRe.forEach(t),nNo=i(H),nb=n(H,"LI",{});var ARe=s(nb);ppe=n(ARe,"STRONG",{});var BTt=s(ppe);sNo=r(BTt,"mbart"),BTt.forEach(t),lNo=r(ARe," \u2014 "),wV=n(ARe,"A",{href:!0});var ITt=s(wV);iNo=r(ITt,"MBartForConditionalGeneration"),ITt.forEach(t),dNo=r(ARe," (mBART model)"),ARe.forEach(t),cNo=i(H),sb=n(H,"LI",{});var LRe=s(sb);_pe=n(LRe,"STRONG",{});var NTt=s(_pe);fNo=r(NTt,"megatron-bert"),NTt.forEach(t),mNo=r(LRe," \u2014 "),AV=n(LRe,"A",{href:!0});var qTt=s(AV);gNo=r(qTt,"MegatronBertForMaskedLM"),qTt.forEach(t),hNo=r(LRe," (Megatron-BERT model)"),LRe.forEach(t),pNo=i(H),lb=n(H,"LI",{});var yRe=s(lb);upe=n(yRe,"STRONG",{});var jTt=s(upe);_No=r(jTt,"mobilebert"),jTt.forEach(t),uNo=r(yRe," \u2014 "),LV=n(yRe,"A",{href:!0});var DTt=s(LV);bNo=r(DTt,"MobileBertForMaskedLM"),DTt.forEach(t),vNo=r(yRe," (MobileBERT model)"),yRe.forEach(t),FNo=i(H),ib=n(H,"LI",{});var xRe=s(ib);bpe=n(xRe,"STRONG",{});var GTt=s(bpe);TNo=r(GTt,"mpnet"),GTt.forEach(t),MNo=r(xRe," \u2014 "),yV=n(xRe,"A",{href:!0});var OTt=s(yV);ENo=r(OTt,"MPNetForMaskedLM"),OTt.forEach(t),CNo=r(xRe," (MPNet model)"),xRe.forEach(t),wNo=i(H),db=n(H,"LI",{});var $Re=s(db);vpe=n($Re,"STRONG",{});var VTt=s(vpe);ANo=r(VTt,"mvp"),VTt.forEach(t),LNo=r($Re," \u2014 "),xV=n($Re,"A",{href:!0});var XTt=s(xV);yNo=r(XTt,"MvpForConditionalGeneration"),XTt.forEach(t),xNo=r($Re," (MVP model)"),$Re.forEach(t),$No=i(H),cb=n(H,"LI",{});var kRe=s(cb);Fpe=n(kRe,"STRONG",{});var zTt=s(Fpe);kNo=r(zTt,"nezha"),zTt.forEach(t),SNo=r(kRe," \u2014 "),$V=n(kRe,"A",{href:!0});var WTt=s($V);RNo=r(WTt,"NezhaForMaskedLM"),WTt.forEach(t),PNo=r(kRe," (Nezha model)"),kRe.forEach(t),BNo=i(H),fb=n(H,"LI",{});var SRe=s(fb);Tpe=n(SRe,"STRONG",{});var QTt=s(Tpe);INo=r(QTt,"nystromformer"),QTt.forEach(t),NNo=r(SRe," \u2014 "),kV=n(SRe,"A",{href:!0});var HTt=s(kV);qNo=r(HTt,"NystromformerForMaskedLM"),HTt.forEach(t),jNo=r(SRe," (Nystr\xF6mformer model)"),SRe.forEach(t),DNo=i(H),mb=n(H,"LI",{});var RRe=s(mb);Mpe=n(RRe,"STRONG",{});var UTt=s(Mpe);GNo=r(UTt,"perceiver"),UTt.forEach(t),ONo=r(RRe," \u2014 "),SV=n(RRe,"A",{href:!0});var JTt=s(SV);VNo=r(JTt,"PerceiverForMaskedLM"),JTt.forEach(t),XNo=r(RRe," (Perceiver model)"),RRe.forEach(t),zNo=i(H),gb=n(H,"LI",{});var PRe=s(gb);Epe=n(PRe,"STRONG",{});var YTt=s(Epe);WNo=r(YTt,"qdqbert"),YTt.forEach(t),QNo=r(PRe," \u2014 "),RV=n(PRe,"A",{href:!0});var KTt=s(RV);HNo=r(KTt,"QDQBertForMaskedLM"),KTt.forEach(t),UNo=r(PRe," (QDQBert model)"),PRe.forEach(t),JNo=i(H),hb=n(H,"LI",{});var BRe=s(hb);Cpe=n(BRe,"STRONG",{});var ZTt=s(Cpe);YNo=r(ZTt,"reformer"),ZTt.forEach(t),KNo=r(BRe," \u2014 "),PV=n(BRe,"A",{href:!0});var e7t=s(PV);ZNo=r(e7t,"ReformerForMaskedLM"),e7t.forEach(t),eqo=r(BRe," (Reformer model)"),BRe.forEach(t),oqo=i(H),pb=n(H,"LI",{});var IRe=s(pb);wpe=n(IRe,"STRONG",{});var o7t=s(wpe);rqo=r(o7t,"rembert"),o7t.forEach(t),tqo=r(IRe," \u2014 "),BV=n(IRe,"A",{href:!0});var r7t=s(BV);aqo=r(r7t,"RemBertForMaskedLM"),r7t.forEach(t),nqo=r(IRe," (RemBERT model)"),IRe.forEach(t),sqo=i(H),_b=n(H,"LI",{});var NRe=s(_b);Ape=n(NRe,"STRONG",{});var t7t=s(Ape);lqo=r(t7t,"roberta"),t7t.forEach(t),iqo=r(NRe," \u2014 "),IV=n(NRe,"A",{href:!0});var a7t=s(IV);dqo=r(a7t,"RobertaForMaskedLM"),a7t.forEach(t),cqo=r(NRe," (RoBERTa model)"),NRe.forEach(t),fqo=i(H),ub=n(H,"LI",{});var qRe=s(ub);Lpe=n(qRe,"STRONG",{});var n7t=s(Lpe);mqo=r(n7t,"roformer"),n7t.forEach(t),gqo=r(qRe," \u2014 "),NV=n(qRe,"A",{href:!0});var s7t=s(NV);hqo=r(s7t,"RoFormerForMaskedLM"),s7t.forEach(t),pqo=r(qRe," (RoFormer model)"),qRe.forEach(t),_qo=i(H),bb=n(H,"LI",{});var jRe=s(bb);ype=n(jRe,"STRONG",{});var l7t=s(ype);uqo=r(l7t,"squeezebert"),l7t.forEach(t),bqo=r(jRe," \u2014 "),qV=n(jRe,"A",{href:!0});var i7t=s(qV);vqo=r(i7t,"SqueezeBertForMaskedLM"),i7t.forEach(t),Fqo=r(jRe," (SqueezeBERT model)"),jRe.forEach(t),Tqo=i(H),vb=n(H,"LI",{});var DRe=s(vb);xpe=n(DRe,"STRONG",{});var d7t=s(xpe);Mqo=r(d7t,"tapas"),d7t.forEach(t),Eqo=r(DRe," \u2014 "),jV=n(DRe,"A",{href:!0});var c7t=s(jV);Cqo=r(c7t,"TapasForMaskedLM"),c7t.forEach(t),wqo=r(DRe," (TAPAS model)"),DRe.forEach(t),Aqo=i(H),Fb=n(H,"LI",{});var GRe=s(Fb);$pe=n(GRe,"STRONG",{});var f7t=s($pe);Lqo=r(f7t,"wav2vec2"),f7t.forEach(t),yqo=r(GRe," \u2014 "),kpe=n(GRe,"CODE",{});var m7t=s(kpe);xqo=r(m7t,"Wav2Vec2ForMaskedLM"),m7t.forEach(t),$qo=r(GRe," (Wav2Vec2 model)"),GRe.forEach(t),kqo=i(H),Tb=n(H,"LI",{});var ORe=s(Tb);Spe=n(ORe,"STRONG",{});var g7t=s(Spe);Sqo=r(g7t,"xlm"),g7t.forEach(t),Rqo=r(ORe," \u2014 "),DV=n(ORe,"A",{href:!0});var h7t=s(DV);Pqo=r(h7t,"XLMWithLMHeadModel"),h7t.forEach(t),Bqo=r(ORe," (XLM model)"),ORe.forEach(t),Iqo=i(H),Mb=n(H,"LI",{});var VRe=s(Mb);Rpe=n(VRe,"STRONG",{});var p7t=s(Rpe);Nqo=r(p7t,"xlm-roberta"),p7t.forEach(t),qqo=r(VRe," \u2014 "),GV=n(VRe,"A",{href:!0});var _7t=s(GV);jqo=r(_7t,"XLMRobertaForMaskedLM"),_7t.forEach(t),Dqo=r(VRe," (XLM-RoBERTa model)"),VRe.forEach(t),Gqo=i(H),Eb=n(H,"LI",{});var XRe=s(Eb);Ppe=n(XRe,"STRONG",{});var u7t=s(Ppe);Oqo=r(u7t,"xlm-roberta-xl"),u7t.forEach(t),Vqo=r(XRe," \u2014 "),OV=n(XRe,"A",{href:!0});var b7t=s(OV);Xqo=r(b7t,"XLMRobertaXLForMaskedLM"),b7t.forEach(t),zqo=r(XRe," (XLM-RoBERTa-XL model)"),XRe.forEach(t),Wqo=i(H),Cb=n(H,"LI",{});var zRe=s(Cb);Bpe=n(zRe,"STRONG",{});var v7t=s(Bpe);Qqo=r(v7t,"yoso"),v7t.forEach(t),Hqo=r(zRe," \u2014 "),VV=n(zRe,"A",{href:!0});var F7t=s(VV);Uqo=r(F7t,"YosoForMaskedLM"),F7t.forEach(t),Jqo=r(zRe," (YOSO model)"),zRe.forEach(t),H.forEach(t),Yqo=i(ca),wb=n(ca,"P",{});var WRe=s(wb);Kqo=r(WRe,"The model is set in evaluation mode by default using "),Ipe=n(WRe,"CODE",{});var T7t=s(Ipe);Zqo=r(T7t,"model.eval()"),T7t.forEach(t),ejo=r(WRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Npe=n(WRe,"CODE",{});var M7t=s(Npe);ojo=r(M7t,"model.train()"),M7t.forEach(t),WRe.forEach(t),rjo=i(ca),T(Ab.$$.fragment,ca),ca.forEach(t),ll.forEach(t),rze=i(f),od=n(f,"H2",{class:!0});var iQe=s(od);Lb=n(iQe,"A",{id:!0,class:!0,href:!0});var E7t=s(Lb);qpe=n(E7t,"SPAN",{});var C7t=s(qpe);T(nL.$$.fragment,C7t),C7t.forEach(t),E7t.forEach(t),tjo=i(iQe),jpe=n(iQe,"SPAN",{});var w7t=s(jpe);ajo=r(w7t,"AutoModelForSeq2SeqLM"),w7t.forEach(t),iQe.forEach(t),tze=i(f),Po=n(f,"DIV",{class:!0});var il=s(Po);T(sL.$$.fragment,il),njo=i(il),rd=n(il,"P",{});var ite=s(rd);sjo=r(ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),XV=n(ite,"A",{href:!0});var A7t=s(XV);ljo=r(A7t,"from_pretrained()"),A7t.forEach(t),ijo=r(ite," class method or the "),zV=n(ite,"A",{href:!0});var L7t=s(zV);djo=r(L7t,"from_config()"),L7t.forEach(t),cjo=r(ite,` class
method.`),ite.forEach(t),fjo=i(il),lL=n(il,"P",{});var dQe=s(lL);mjo=r(dQe,"This class cannot be instantiated directly using "),Dpe=n(dQe,"CODE",{});var y7t=s(Dpe);gjo=r(y7t,"__init__()"),y7t.forEach(t),hjo=r(dQe," (throws an error)."),dQe.forEach(t),pjo=i(il),mt=n(il,"DIV",{class:!0});var ww=s(mt);T(iL.$$.fragment,ww),_jo=i(ww),Gpe=n(ww,"P",{});var x7t=s(Gpe);ujo=r(x7t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),x7t.forEach(t),bjo=i(ww),td=n(ww,"P",{});var dte=s(td);vjo=r(dte,`Note:
Loading a model from its configuration file does `),Ope=n(dte,"STRONG",{});var $7t=s(Ope);Fjo=r($7t,"not"),$7t.forEach(t),Tjo=r(dte,` load the model weights. It only affects the
model\u2019s configuration. Use `),WV=n(dte,"A",{href:!0});var k7t=s(WV);Mjo=r(k7t,"from_pretrained()"),k7t.forEach(t),Ejo=r(dte," to load the model weights."),dte.forEach(t),Cjo=i(ww),T(yb.$$.fragment,ww),ww.forEach(t),wjo=i(il),oo=n(il,"DIV",{class:!0});var fa=s(oo);T(dL.$$.fragment,fa),Ajo=i(fa),Vpe=n(fa,"P",{});var S7t=s(Vpe);Ljo=r(S7t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),S7t.forEach(t),yjo=i(fa),Da=n(fa,"P",{});var Aw=s(Da);xjo=r(Aw,"The model class to instantiate is selected based on the "),Xpe=n(Aw,"CODE",{});var R7t=s(Xpe);$jo=r(R7t,"model_type"),R7t.forEach(t),kjo=r(Aw,` property of the config object (either
passed as an argument or loaded from `),zpe=n(Aw,"CODE",{});var P7t=s(zpe);Sjo=r(P7t,"pretrained_model_name_or_path"),P7t.forEach(t),Rjo=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wpe=n(Aw,"CODE",{});var B7t=s(Wpe);Pjo=r(B7t,"pretrained_model_name_or_path"),B7t.forEach(t),Bjo=r(Aw,":"),Aw.forEach(t),Ijo=i(fa),me=n(fa,"UL",{});var ue=s(me);xb=n(ue,"LI",{});var QRe=s(xb);Qpe=n(QRe,"STRONG",{});var I7t=s(Qpe);Njo=r(I7t,"bart"),I7t.forEach(t),qjo=r(QRe," \u2014 "),QV=n(QRe,"A",{href:!0});var N7t=s(QV);jjo=r(N7t,"BartForConditionalGeneration"),N7t.forEach(t),Djo=r(QRe," (BART model)"),QRe.forEach(t),Gjo=i(ue),$b=n(ue,"LI",{});var HRe=s($b);Hpe=n(HRe,"STRONG",{});var q7t=s(Hpe);Ojo=r(q7t,"bigbird_pegasus"),q7t.forEach(t),Vjo=r(HRe," \u2014 "),HV=n(HRe,"A",{href:!0});var j7t=s(HV);Xjo=r(j7t,"BigBirdPegasusForConditionalGeneration"),j7t.forEach(t),zjo=r(HRe," (BigBird-Pegasus model)"),HRe.forEach(t),Wjo=i(ue),kb=n(ue,"LI",{});var URe=s(kb);Upe=n(URe,"STRONG",{});var D7t=s(Upe);Qjo=r(D7t,"blenderbot"),D7t.forEach(t),Hjo=r(URe," \u2014 "),UV=n(URe,"A",{href:!0});var G7t=s(UV);Ujo=r(G7t,"BlenderbotForConditionalGeneration"),G7t.forEach(t),Jjo=r(URe," (Blenderbot model)"),URe.forEach(t),Yjo=i(ue),Sb=n(ue,"LI",{});var JRe=s(Sb);Jpe=n(JRe,"STRONG",{});var O7t=s(Jpe);Kjo=r(O7t,"blenderbot-small"),O7t.forEach(t),Zjo=r(JRe," \u2014 "),JV=n(JRe,"A",{href:!0});var V7t=s(JV);eDo=r(V7t,"BlenderbotSmallForConditionalGeneration"),V7t.forEach(t),oDo=r(JRe," (BlenderbotSmall model)"),JRe.forEach(t),rDo=i(ue),Rb=n(ue,"LI",{});var YRe=s(Rb);Ype=n(YRe,"STRONG",{});var X7t=s(Ype);tDo=r(X7t,"encoder-decoder"),X7t.forEach(t),aDo=r(YRe," \u2014 "),YV=n(YRe,"A",{href:!0});var z7t=s(YV);nDo=r(z7t,"EncoderDecoderModel"),z7t.forEach(t),sDo=r(YRe," (Encoder decoder model)"),YRe.forEach(t),lDo=i(ue),Pb=n(ue,"LI",{});var KRe=s(Pb);Kpe=n(KRe,"STRONG",{});var W7t=s(Kpe);iDo=r(W7t,"fsmt"),W7t.forEach(t),dDo=r(KRe," \u2014 "),KV=n(KRe,"A",{href:!0});var Q7t=s(KV);cDo=r(Q7t,"FSMTForConditionalGeneration"),Q7t.forEach(t),fDo=r(KRe," (FairSeq Machine-Translation model)"),KRe.forEach(t),mDo=i(ue),Bb=n(ue,"LI",{});var ZRe=s(Bb);Zpe=n(ZRe,"STRONG",{});var H7t=s(Zpe);gDo=r(H7t,"led"),H7t.forEach(t),hDo=r(ZRe," \u2014 "),ZV=n(ZRe,"A",{href:!0});var U7t=s(ZV);pDo=r(U7t,"LEDForConditionalGeneration"),U7t.forEach(t),_Do=r(ZRe," (LED model)"),ZRe.forEach(t),uDo=i(ue),Ib=n(ue,"LI",{});var ePe=s(Ib);e_e=n(ePe,"STRONG",{});var J7t=s(e_e);bDo=r(J7t,"longt5"),J7t.forEach(t),vDo=r(ePe," \u2014 "),eX=n(ePe,"A",{href:!0});var Y7t=s(eX);FDo=r(Y7t,"LongT5ForConditionalGeneration"),Y7t.forEach(t),TDo=r(ePe," (LongT5 model)"),ePe.forEach(t),MDo=i(ue),Nb=n(ue,"LI",{});var oPe=s(Nb);o_e=n(oPe,"STRONG",{});var K7t=s(o_e);EDo=r(K7t,"m2m_100"),K7t.forEach(t),CDo=r(oPe," \u2014 "),oX=n(oPe,"A",{href:!0});var Z7t=s(oX);wDo=r(Z7t,"M2M100ForConditionalGeneration"),Z7t.forEach(t),ADo=r(oPe," (M2M100 model)"),oPe.forEach(t),LDo=i(ue),qb=n(ue,"LI",{});var rPe=s(qb);r_e=n(rPe,"STRONG",{});var e8t=s(r_e);yDo=r(e8t,"marian"),e8t.forEach(t),xDo=r(rPe," \u2014 "),rX=n(rPe,"A",{href:!0});var o8t=s(rX);$Do=r(o8t,"MarianMTModel"),o8t.forEach(t),kDo=r(rPe," (Marian model)"),rPe.forEach(t),SDo=i(ue),jb=n(ue,"LI",{});var tPe=s(jb);t_e=n(tPe,"STRONG",{});var r8t=s(t_e);RDo=r(r8t,"mbart"),r8t.forEach(t),PDo=r(tPe," \u2014 "),tX=n(tPe,"A",{href:!0});var t8t=s(tX);BDo=r(t8t,"MBartForConditionalGeneration"),t8t.forEach(t),IDo=r(tPe," (mBART model)"),tPe.forEach(t),NDo=i(ue),Db=n(ue,"LI",{});var aPe=s(Db);a_e=n(aPe,"STRONG",{});var a8t=s(a_e);qDo=r(a8t,"mt5"),a8t.forEach(t),jDo=r(aPe," \u2014 "),aX=n(aPe,"A",{href:!0});var n8t=s(aX);DDo=r(n8t,"MT5ForConditionalGeneration"),n8t.forEach(t),GDo=r(aPe," (MT5 model)"),aPe.forEach(t),ODo=i(ue),Gb=n(ue,"LI",{});var nPe=s(Gb);n_e=n(nPe,"STRONG",{});var s8t=s(n_e);VDo=r(s8t,"mvp"),s8t.forEach(t),XDo=r(nPe," \u2014 "),nX=n(nPe,"A",{href:!0});var l8t=s(nX);zDo=r(l8t,"MvpForConditionalGeneration"),l8t.forEach(t),WDo=r(nPe," (MVP model)"),nPe.forEach(t),QDo=i(ue),Ob=n(ue,"LI",{});var sPe=s(Ob);s_e=n(sPe,"STRONG",{});var i8t=s(s_e);HDo=r(i8t,"nllb"),i8t.forEach(t),UDo=r(sPe," \u2014 "),sX=n(sPe,"A",{href:!0});var d8t=s(sX);JDo=r(d8t,"M2M100ForConditionalGeneration"),d8t.forEach(t),YDo=r(sPe," (NLLB model)"),sPe.forEach(t),KDo=i(ue),Vb=n(ue,"LI",{});var lPe=s(Vb);l_e=n(lPe,"STRONG",{});var c8t=s(l_e);ZDo=r(c8t,"pegasus"),c8t.forEach(t),eGo=r(lPe," \u2014 "),lX=n(lPe,"A",{href:!0});var f8t=s(lX);oGo=r(f8t,"PegasusForConditionalGeneration"),f8t.forEach(t),rGo=r(lPe," (Pegasus model)"),lPe.forEach(t),tGo=i(ue),Xb=n(ue,"LI",{});var iPe=s(Xb);i_e=n(iPe,"STRONG",{});var m8t=s(i_e);aGo=r(m8t,"plbart"),m8t.forEach(t),nGo=r(iPe," \u2014 "),iX=n(iPe,"A",{href:!0});var g8t=s(iX);sGo=r(g8t,"PLBartForConditionalGeneration"),g8t.forEach(t),lGo=r(iPe," (PLBart model)"),iPe.forEach(t),iGo=i(ue),zb=n(ue,"LI",{});var dPe=s(zb);d_e=n(dPe,"STRONG",{});var h8t=s(d_e);dGo=r(h8t,"prophetnet"),h8t.forEach(t),cGo=r(dPe," \u2014 "),dX=n(dPe,"A",{href:!0});var p8t=s(dX);fGo=r(p8t,"ProphetNetForConditionalGeneration"),p8t.forEach(t),mGo=r(dPe," (ProphetNet model)"),dPe.forEach(t),gGo=i(ue),Wb=n(ue,"LI",{});var cPe=s(Wb);c_e=n(cPe,"STRONG",{});var _8t=s(c_e);hGo=r(_8t,"t5"),_8t.forEach(t),pGo=r(cPe," \u2014 "),cX=n(cPe,"A",{href:!0});var u8t=s(cX);_Go=r(u8t,"T5ForConditionalGeneration"),u8t.forEach(t),uGo=r(cPe," (T5 model)"),cPe.forEach(t),bGo=i(ue),Qb=n(ue,"LI",{});var fPe=s(Qb);f_e=n(fPe,"STRONG",{});var b8t=s(f_e);vGo=r(b8t,"xlm-prophetnet"),b8t.forEach(t),FGo=r(fPe," \u2014 "),fX=n(fPe,"A",{href:!0});var v8t=s(fX);TGo=r(v8t,"XLMProphetNetForConditionalGeneration"),v8t.forEach(t),MGo=r(fPe," (XLM-ProphetNet model)"),fPe.forEach(t),ue.forEach(t),EGo=i(fa),Hb=n(fa,"P",{});var mPe=s(Hb);CGo=r(mPe,"The model is set in evaluation mode by default using "),m_e=n(mPe,"CODE",{});var F8t=s(m_e);wGo=r(F8t,"model.eval()"),F8t.forEach(t),AGo=r(mPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g_e=n(mPe,"CODE",{});var T8t=s(g_e);LGo=r(T8t,"model.train()"),T8t.forEach(t),mPe.forEach(t),yGo=i(fa),T(Ub.$$.fragment,fa),fa.forEach(t),il.forEach(t),aze=i(f),ad=n(f,"H2",{class:!0});var cQe=s(ad);Jb=n(cQe,"A",{id:!0,class:!0,href:!0});var M8t=s(Jb);h_e=n(M8t,"SPAN",{});var E8t=s(h_e);T(cL.$$.fragment,E8t),E8t.forEach(t),M8t.forEach(t),xGo=i(cQe),p_e=n(cQe,"SPAN",{});var C8t=s(p_e);$Go=r(C8t,"AutoModelForSequenceClassification"),C8t.forEach(t),cQe.forEach(t),nze=i(f),Bo=n(f,"DIV",{class:!0});var dl=s(Bo);T(fL.$$.fragment,dl),kGo=i(dl),nd=n(dl,"P",{});var cte=s(nd);SGo=r(cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),mX=n(cte,"A",{href:!0});var w8t=s(mX);RGo=r(w8t,"from_pretrained()"),w8t.forEach(t),PGo=r(cte," class method or the "),gX=n(cte,"A",{href:!0});var A8t=s(gX);BGo=r(A8t,"from_config()"),A8t.forEach(t),IGo=r(cte,` class
method.`),cte.forEach(t),NGo=i(dl),mL=n(dl,"P",{});var fQe=s(mL);qGo=r(fQe,"This class cannot be instantiated directly using "),__e=n(fQe,"CODE",{});var L8t=s(__e);jGo=r(L8t,"__init__()"),L8t.forEach(t),DGo=r(fQe," (throws an error)."),fQe.forEach(t),GGo=i(dl),gt=n(dl,"DIV",{class:!0});var Lw=s(gt);T(gL.$$.fragment,Lw),OGo=i(Lw),u_e=n(Lw,"P",{});var y8t=s(u_e);VGo=r(y8t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),y8t.forEach(t),XGo=i(Lw),sd=n(Lw,"P",{});var fte=s(sd);zGo=r(fte,`Note:
Loading a model from its configuration file does `),b_e=n(fte,"STRONG",{});var x8t=s(b_e);WGo=r(x8t,"not"),x8t.forEach(t),QGo=r(fte,` load the model weights. It only affects the
model\u2019s configuration. Use `),hX=n(fte,"A",{href:!0});var $8t=s(hX);HGo=r($8t,"from_pretrained()"),$8t.forEach(t),UGo=r(fte," to load the model weights."),fte.forEach(t),JGo=i(Lw),T(Yb.$$.fragment,Lw),Lw.forEach(t),YGo=i(dl),ro=n(dl,"DIV",{class:!0});var ma=s(ro);T(hL.$$.fragment,ma),KGo=i(ma),v_e=n(ma,"P",{});var k8t=s(v_e);ZGo=r(k8t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),k8t.forEach(t),eOo=i(ma),Ga=n(ma,"P",{});var yw=s(Ga);oOo=r(yw,"The model class to instantiate is selected based on the "),F_e=n(yw,"CODE",{});var S8t=s(F_e);rOo=r(S8t,"model_type"),S8t.forEach(t),tOo=r(yw,` property of the config object (either
passed as an argument or loaded from `),T_e=n(yw,"CODE",{});var R8t=s(T_e);aOo=r(R8t,"pretrained_model_name_or_path"),R8t.forEach(t),nOo=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M_e=n(yw,"CODE",{});var P8t=s(M_e);sOo=r(P8t,"pretrained_model_name_or_path"),P8t.forEach(t),lOo=r(yw,":"),yw.forEach(t),iOo=i(ma),B=n(ma,"UL",{});var j=s(B);Kb=n(j,"LI",{});var gPe=s(Kb);E_e=n(gPe,"STRONG",{});var B8t=s(E_e);dOo=r(B8t,"albert"),B8t.forEach(t),cOo=r(gPe," \u2014 "),pX=n(gPe,"A",{href:!0});var I8t=s(pX);fOo=r(I8t,"AlbertForSequenceClassification"),I8t.forEach(t),mOo=r(gPe," (ALBERT model)"),gPe.forEach(t),gOo=i(j),Zb=n(j,"LI",{});var hPe=s(Zb);C_e=n(hPe,"STRONG",{});var N8t=s(C_e);hOo=r(N8t,"bart"),N8t.forEach(t),pOo=r(hPe," \u2014 "),_X=n(hPe,"A",{href:!0});var q8t=s(_X);_Oo=r(q8t,"BartForSequenceClassification"),q8t.forEach(t),uOo=r(hPe," (BART model)"),hPe.forEach(t),bOo=i(j),e3=n(j,"LI",{});var pPe=s(e3);w_e=n(pPe,"STRONG",{});var j8t=s(w_e);vOo=r(j8t,"bert"),j8t.forEach(t),FOo=r(pPe," \u2014 "),uX=n(pPe,"A",{href:!0});var D8t=s(uX);TOo=r(D8t,"BertForSequenceClassification"),D8t.forEach(t),MOo=r(pPe," (BERT model)"),pPe.forEach(t),EOo=i(j),o3=n(j,"LI",{});var _Pe=s(o3);A_e=n(_Pe,"STRONG",{});var G8t=s(A_e);COo=r(G8t,"big_bird"),G8t.forEach(t),wOo=r(_Pe," \u2014 "),bX=n(_Pe,"A",{href:!0});var O8t=s(bX);AOo=r(O8t,"BigBirdForSequenceClassification"),O8t.forEach(t),LOo=r(_Pe," (BigBird model)"),_Pe.forEach(t),yOo=i(j),r3=n(j,"LI",{});var uPe=s(r3);L_e=n(uPe,"STRONG",{});var V8t=s(L_e);xOo=r(V8t,"bigbird_pegasus"),V8t.forEach(t),$Oo=r(uPe," \u2014 "),vX=n(uPe,"A",{href:!0});var X8t=s(vX);kOo=r(X8t,"BigBirdPegasusForSequenceClassification"),X8t.forEach(t),SOo=r(uPe," (BigBird-Pegasus model)"),uPe.forEach(t),ROo=i(j),t3=n(j,"LI",{});var bPe=s(t3);y_e=n(bPe,"STRONG",{});var z8t=s(y_e);POo=r(z8t,"bloom"),z8t.forEach(t),BOo=r(bPe," \u2014 "),FX=n(bPe,"A",{href:!0});var W8t=s(FX);IOo=r(W8t,"BloomForSequenceClassification"),W8t.forEach(t),NOo=r(bPe," (BLOOM model)"),bPe.forEach(t),qOo=i(j),a3=n(j,"LI",{});var vPe=s(a3);x_e=n(vPe,"STRONG",{});var Q8t=s(x_e);jOo=r(Q8t,"camembert"),Q8t.forEach(t),DOo=r(vPe," \u2014 "),TX=n(vPe,"A",{href:!0});var H8t=s(TX);GOo=r(H8t,"CamembertForSequenceClassification"),H8t.forEach(t),OOo=r(vPe," (CamemBERT model)"),vPe.forEach(t),VOo=i(j),n3=n(j,"LI",{});var FPe=s(n3);$_e=n(FPe,"STRONG",{});var U8t=s($_e);XOo=r(U8t,"canine"),U8t.forEach(t),zOo=r(FPe," \u2014 "),MX=n(FPe,"A",{href:!0});var J8t=s(MX);WOo=r(J8t,"CanineForSequenceClassification"),J8t.forEach(t),QOo=r(FPe," (CANINE model)"),FPe.forEach(t),HOo=i(j),s3=n(j,"LI",{});var TPe=s(s3);k_e=n(TPe,"STRONG",{});var Y8t=s(k_e);UOo=r(Y8t,"convbert"),Y8t.forEach(t),JOo=r(TPe," \u2014 "),EX=n(TPe,"A",{href:!0});var K8t=s(EX);YOo=r(K8t,"ConvBertForSequenceClassification"),K8t.forEach(t),KOo=r(TPe," (ConvBERT model)"),TPe.forEach(t),ZOo=i(j),l3=n(j,"LI",{});var MPe=s(l3);S_e=n(MPe,"STRONG",{});var Z8t=s(S_e);eVo=r(Z8t,"ctrl"),Z8t.forEach(t),oVo=r(MPe," \u2014 "),CX=n(MPe,"A",{href:!0});var e9t=s(CX);rVo=r(e9t,"CTRLForSequenceClassification"),e9t.forEach(t),tVo=r(MPe," (CTRL model)"),MPe.forEach(t),aVo=i(j),i3=n(j,"LI",{});var EPe=s(i3);R_e=n(EPe,"STRONG",{});var o9t=s(R_e);nVo=r(o9t,"data2vec-text"),o9t.forEach(t),sVo=r(EPe," \u2014 "),wX=n(EPe,"A",{href:!0});var r9t=s(wX);lVo=r(r9t,"Data2VecTextForSequenceClassification"),r9t.forEach(t),iVo=r(EPe," (Data2VecText model)"),EPe.forEach(t),dVo=i(j),d3=n(j,"LI",{});var CPe=s(d3);P_e=n(CPe,"STRONG",{});var t9t=s(P_e);cVo=r(t9t,"deberta"),t9t.forEach(t),fVo=r(CPe," \u2014 "),AX=n(CPe,"A",{href:!0});var a9t=s(AX);mVo=r(a9t,"DebertaForSequenceClassification"),a9t.forEach(t),gVo=r(CPe," (DeBERTa model)"),CPe.forEach(t),hVo=i(j),c3=n(j,"LI",{});var wPe=s(c3);B_e=n(wPe,"STRONG",{});var n9t=s(B_e);pVo=r(n9t,"deberta-v2"),n9t.forEach(t),_Vo=r(wPe," \u2014 "),LX=n(wPe,"A",{href:!0});var s9t=s(LX);uVo=r(s9t,"DebertaV2ForSequenceClassification"),s9t.forEach(t),bVo=r(wPe," (DeBERTa-v2 model)"),wPe.forEach(t),vVo=i(j),f3=n(j,"LI",{});var APe=s(f3);I_e=n(APe,"STRONG",{});var l9t=s(I_e);FVo=r(l9t,"distilbert"),l9t.forEach(t),TVo=r(APe," \u2014 "),yX=n(APe,"A",{href:!0});var i9t=s(yX);MVo=r(i9t,"DistilBertForSequenceClassification"),i9t.forEach(t),EVo=r(APe," (DistilBERT model)"),APe.forEach(t),CVo=i(j),m3=n(j,"LI",{});var LPe=s(m3);N_e=n(LPe,"STRONG",{});var d9t=s(N_e);wVo=r(d9t,"electra"),d9t.forEach(t),AVo=r(LPe," \u2014 "),xX=n(LPe,"A",{href:!0});var c9t=s(xX);LVo=r(c9t,"ElectraForSequenceClassification"),c9t.forEach(t),yVo=r(LPe," (ELECTRA model)"),LPe.forEach(t),xVo=i(j),g3=n(j,"LI",{});var yPe=s(g3);q_e=n(yPe,"STRONG",{});var f9t=s(q_e);$Vo=r(f9t,"flaubert"),f9t.forEach(t),kVo=r(yPe," \u2014 "),$X=n(yPe,"A",{href:!0});var m9t=s($X);SVo=r(m9t,"FlaubertForSequenceClassification"),m9t.forEach(t),RVo=r(yPe," (FlauBERT model)"),yPe.forEach(t),PVo=i(j),h3=n(j,"LI",{});var xPe=s(h3);j_e=n(xPe,"STRONG",{});var g9t=s(j_e);BVo=r(g9t,"fnet"),g9t.forEach(t),IVo=r(xPe," \u2014 "),kX=n(xPe,"A",{href:!0});var h9t=s(kX);NVo=r(h9t,"FNetForSequenceClassification"),h9t.forEach(t),qVo=r(xPe," (FNet model)"),xPe.forEach(t),jVo=i(j),p3=n(j,"LI",{});var $Pe=s(p3);D_e=n($Pe,"STRONG",{});var p9t=s(D_e);DVo=r(p9t,"funnel"),p9t.forEach(t),GVo=r($Pe," \u2014 "),SX=n($Pe,"A",{href:!0});var _9t=s(SX);OVo=r(_9t,"FunnelForSequenceClassification"),_9t.forEach(t),VVo=r($Pe," (Funnel Transformer model)"),$Pe.forEach(t),XVo=i(j),_3=n(j,"LI",{});var kPe=s(_3);G_e=n(kPe,"STRONG",{});var u9t=s(G_e);zVo=r(u9t,"gpt2"),u9t.forEach(t),WVo=r(kPe," \u2014 "),RX=n(kPe,"A",{href:!0});var b9t=s(RX);QVo=r(b9t,"GPT2ForSequenceClassification"),b9t.forEach(t),HVo=r(kPe," (OpenAI GPT-2 model)"),kPe.forEach(t),UVo=i(j),u3=n(j,"LI",{});var SPe=s(u3);O_e=n(SPe,"STRONG",{});var v9t=s(O_e);JVo=r(v9t,"gpt_neo"),v9t.forEach(t),YVo=r(SPe," \u2014 "),PX=n(SPe,"A",{href:!0});var F9t=s(PX);KVo=r(F9t,"GPTNeoForSequenceClassification"),F9t.forEach(t),ZVo=r(SPe," (GPT Neo model)"),SPe.forEach(t),eXo=i(j),b3=n(j,"LI",{});var RPe=s(b3);V_e=n(RPe,"STRONG",{});var T9t=s(V_e);oXo=r(T9t,"gptj"),T9t.forEach(t),rXo=r(RPe," \u2014 "),BX=n(RPe,"A",{href:!0});var M9t=s(BX);tXo=r(M9t,"GPTJForSequenceClassification"),M9t.forEach(t),aXo=r(RPe," (GPT-J model)"),RPe.forEach(t),nXo=i(j),v3=n(j,"LI",{});var PPe=s(v3);X_e=n(PPe,"STRONG",{});var E9t=s(X_e);sXo=r(E9t,"ibert"),E9t.forEach(t),lXo=r(PPe," \u2014 "),IX=n(PPe,"A",{href:!0});var C9t=s(IX);iXo=r(C9t,"IBertForSequenceClassification"),C9t.forEach(t),dXo=r(PPe," (I-BERT model)"),PPe.forEach(t),cXo=i(j),F3=n(j,"LI",{});var BPe=s(F3);z_e=n(BPe,"STRONG",{});var w9t=s(z_e);fXo=r(w9t,"layoutlm"),w9t.forEach(t),mXo=r(BPe," \u2014 "),NX=n(BPe,"A",{href:!0});var A9t=s(NX);gXo=r(A9t,"LayoutLMForSequenceClassification"),A9t.forEach(t),hXo=r(BPe," (LayoutLM model)"),BPe.forEach(t),pXo=i(j),T3=n(j,"LI",{});var IPe=s(T3);W_e=n(IPe,"STRONG",{});var L9t=s(W_e);_Xo=r(L9t,"layoutlmv2"),L9t.forEach(t),uXo=r(IPe," \u2014 "),qX=n(IPe,"A",{href:!0});var y9t=s(qX);bXo=r(y9t,"LayoutLMv2ForSequenceClassification"),y9t.forEach(t),vXo=r(IPe," (LayoutLMv2 model)"),IPe.forEach(t),FXo=i(j),M3=n(j,"LI",{});var NPe=s(M3);Q_e=n(NPe,"STRONG",{});var x9t=s(Q_e);TXo=r(x9t,"layoutlmv3"),x9t.forEach(t),MXo=r(NPe," \u2014 "),jX=n(NPe,"A",{href:!0});var $9t=s(jX);EXo=r($9t,"LayoutLMv3ForSequenceClassification"),$9t.forEach(t),CXo=r(NPe," (LayoutLMv3 model)"),NPe.forEach(t),wXo=i(j),E3=n(j,"LI",{});var qPe=s(E3);H_e=n(qPe,"STRONG",{});var k9t=s(H_e);AXo=r(k9t,"led"),k9t.forEach(t),LXo=r(qPe," \u2014 "),DX=n(qPe,"A",{href:!0});var S9t=s(DX);yXo=r(S9t,"LEDForSequenceClassification"),S9t.forEach(t),xXo=r(qPe," (LED model)"),qPe.forEach(t),$Xo=i(j),C3=n(j,"LI",{});var jPe=s(C3);U_e=n(jPe,"STRONG",{});var R9t=s(U_e);kXo=r(R9t,"longformer"),R9t.forEach(t),SXo=r(jPe," \u2014 "),GX=n(jPe,"A",{href:!0});var P9t=s(GX);RXo=r(P9t,"LongformerForSequenceClassification"),P9t.forEach(t),PXo=r(jPe," (Longformer model)"),jPe.forEach(t),BXo=i(j),w3=n(j,"LI",{});var DPe=s(w3);J_e=n(DPe,"STRONG",{});var B9t=s(J_e);IXo=r(B9t,"mbart"),B9t.forEach(t),NXo=r(DPe," \u2014 "),OX=n(DPe,"A",{href:!0});var I9t=s(OX);qXo=r(I9t,"MBartForSequenceClassification"),I9t.forEach(t),jXo=r(DPe," (mBART model)"),DPe.forEach(t),DXo=i(j),A3=n(j,"LI",{});var GPe=s(A3);Y_e=n(GPe,"STRONG",{});var N9t=s(Y_e);GXo=r(N9t,"megatron-bert"),N9t.forEach(t),OXo=r(GPe," \u2014 "),VX=n(GPe,"A",{href:!0});var q9t=s(VX);VXo=r(q9t,"MegatronBertForSequenceClassification"),q9t.forEach(t),XXo=r(GPe," (Megatron-BERT model)"),GPe.forEach(t),zXo=i(j),L3=n(j,"LI",{});var OPe=s(L3);K_e=n(OPe,"STRONG",{});var j9t=s(K_e);WXo=r(j9t,"mobilebert"),j9t.forEach(t),QXo=r(OPe," \u2014 "),XX=n(OPe,"A",{href:!0});var D9t=s(XX);HXo=r(D9t,"MobileBertForSequenceClassification"),D9t.forEach(t),UXo=r(OPe," (MobileBERT model)"),OPe.forEach(t),JXo=i(j),y3=n(j,"LI",{});var VPe=s(y3);Z_e=n(VPe,"STRONG",{});var G9t=s(Z_e);YXo=r(G9t,"mpnet"),G9t.forEach(t),KXo=r(VPe," \u2014 "),zX=n(VPe,"A",{href:!0});var O9t=s(zX);ZXo=r(O9t,"MPNetForSequenceClassification"),O9t.forEach(t),ezo=r(VPe," (MPNet model)"),VPe.forEach(t),ozo=i(j),x3=n(j,"LI",{});var XPe=s(x3);eue=n(XPe,"STRONG",{});var V9t=s(eue);rzo=r(V9t,"mvp"),V9t.forEach(t),tzo=r(XPe," \u2014 "),WX=n(XPe,"A",{href:!0});var X9t=s(WX);azo=r(X9t,"MvpForSequenceClassification"),X9t.forEach(t),nzo=r(XPe," (MVP model)"),XPe.forEach(t),szo=i(j),$3=n(j,"LI",{});var zPe=s($3);oue=n(zPe,"STRONG",{});var z9t=s(oue);lzo=r(z9t,"nezha"),z9t.forEach(t),izo=r(zPe," \u2014 "),QX=n(zPe,"A",{href:!0});var W9t=s(QX);dzo=r(W9t,"NezhaForSequenceClassification"),W9t.forEach(t),czo=r(zPe," (Nezha model)"),zPe.forEach(t),fzo=i(j),k3=n(j,"LI",{});var WPe=s(k3);rue=n(WPe,"STRONG",{});var Q9t=s(rue);mzo=r(Q9t,"nystromformer"),Q9t.forEach(t),gzo=r(WPe," \u2014 "),HX=n(WPe,"A",{href:!0});var H9t=s(HX);hzo=r(H9t,"NystromformerForSequenceClassification"),H9t.forEach(t),pzo=r(WPe," (Nystr\xF6mformer model)"),WPe.forEach(t),_zo=i(j),S3=n(j,"LI",{});var QPe=s(S3);tue=n(QPe,"STRONG",{});var U9t=s(tue);uzo=r(U9t,"openai-gpt"),U9t.forEach(t),bzo=r(QPe," \u2014 "),UX=n(QPe,"A",{href:!0});var J9t=s(UX);vzo=r(J9t,"OpenAIGPTForSequenceClassification"),J9t.forEach(t),Fzo=r(QPe," (OpenAI GPT model)"),QPe.forEach(t),Tzo=i(j),R3=n(j,"LI",{});var HPe=s(R3);aue=n(HPe,"STRONG",{});var Y9t=s(aue);Mzo=r(Y9t,"opt"),Y9t.forEach(t),Ezo=r(HPe," \u2014 "),JX=n(HPe,"A",{href:!0});var K9t=s(JX);Czo=r(K9t,"OPTForSequenceClassification"),K9t.forEach(t),wzo=r(HPe," (OPT model)"),HPe.forEach(t),Azo=i(j),P3=n(j,"LI",{});var UPe=s(P3);nue=n(UPe,"STRONG",{});var Z9t=s(nue);Lzo=r(Z9t,"perceiver"),Z9t.forEach(t),yzo=r(UPe," \u2014 "),YX=n(UPe,"A",{href:!0});var eMt=s(YX);xzo=r(eMt,"PerceiverForSequenceClassification"),eMt.forEach(t),$zo=r(UPe," (Perceiver model)"),UPe.forEach(t),kzo=i(j),B3=n(j,"LI",{});var JPe=s(B3);sue=n(JPe,"STRONG",{});var oMt=s(sue);Szo=r(oMt,"plbart"),oMt.forEach(t),Rzo=r(JPe," \u2014 "),KX=n(JPe,"A",{href:!0});var rMt=s(KX);Pzo=r(rMt,"PLBartForSequenceClassification"),rMt.forEach(t),Bzo=r(JPe," (PLBart model)"),JPe.forEach(t),Izo=i(j),I3=n(j,"LI",{});var YPe=s(I3);lue=n(YPe,"STRONG",{});var tMt=s(lue);Nzo=r(tMt,"qdqbert"),tMt.forEach(t),qzo=r(YPe," \u2014 "),ZX=n(YPe,"A",{href:!0});var aMt=s(ZX);jzo=r(aMt,"QDQBertForSequenceClassification"),aMt.forEach(t),Dzo=r(YPe," (QDQBert model)"),YPe.forEach(t),Gzo=i(j),N3=n(j,"LI",{});var KPe=s(N3);iue=n(KPe,"STRONG",{});var nMt=s(iue);Ozo=r(nMt,"reformer"),nMt.forEach(t),Vzo=r(KPe," \u2014 "),ez=n(KPe,"A",{href:!0});var sMt=s(ez);Xzo=r(sMt,"ReformerForSequenceClassification"),sMt.forEach(t),zzo=r(KPe," (Reformer model)"),KPe.forEach(t),Wzo=i(j),q3=n(j,"LI",{});var ZPe=s(q3);due=n(ZPe,"STRONG",{});var lMt=s(due);Qzo=r(lMt,"rembert"),lMt.forEach(t),Hzo=r(ZPe," \u2014 "),oz=n(ZPe,"A",{href:!0});var iMt=s(oz);Uzo=r(iMt,"RemBertForSequenceClassification"),iMt.forEach(t),Jzo=r(ZPe," (RemBERT model)"),ZPe.forEach(t),Yzo=i(j),j3=n(j,"LI",{});var eBe=s(j3);cue=n(eBe,"STRONG",{});var dMt=s(cue);Kzo=r(dMt,"roberta"),dMt.forEach(t),Zzo=r(eBe," \u2014 "),rz=n(eBe,"A",{href:!0});var cMt=s(rz);eWo=r(cMt,"RobertaForSequenceClassification"),cMt.forEach(t),oWo=r(eBe," (RoBERTa model)"),eBe.forEach(t),rWo=i(j),D3=n(j,"LI",{});var oBe=s(D3);fue=n(oBe,"STRONG",{});var fMt=s(fue);tWo=r(fMt,"roformer"),fMt.forEach(t),aWo=r(oBe," \u2014 "),tz=n(oBe,"A",{href:!0});var mMt=s(tz);nWo=r(mMt,"RoFormerForSequenceClassification"),mMt.forEach(t),sWo=r(oBe," (RoFormer model)"),oBe.forEach(t),lWo=i(j),G3=n(j,"LI",{});var rBe=s(G3);mue=n(rBe,"STRONG",{});var gMt=s(mue);iWo=r(gMt,"squeezebert"),gMt.forEach(t),dWo=r(rBe," \u2014 "),az=n(rBe,"A",{href:!0});var hMt=s(az);cWo=r(hMt,"SqueezeBertForSequenceClassification"),hMt.forEach(t),fWo=r(rBe," (SqueezeBERT model)"),rBe.forEach(t),mWo=i(j),O3=n(j,"LI",{});var tBe=s(O3);gue=n(tBe,"STRONG",{});var pMt=s(gue);gWo=r(pMt,"tapas"),pMt.forEach(t),hWo=r(tBe," \u2014 "),nz=n(tBe,"A",{href:!0});var _Mt=s(nz);pWo=r(_Mt,"TapasForSequenceClassification"),_Mt.forEach(t),_Wo=r(tBe," (TAPAS model)"),tBe.forEach(t),uWo=i(j),V3=n(j,"LI",{});var aBe=s(V3);hue=n(aBe,"STRONG",{});var uMt=s(hue);bWo=r(uMt,"transfo-xl"),uMt.forEach(t),vWo=r(aBe," \u2014 "),sz=n(aBe,"A",{href:!0});var bMt=s(sz);FWo=r(bMt,"TransfoXLForSequenceClassification"),bMt.forEach(t),TWo=r(aBe," (Transformer-XL model)"),aBe.forEach(t),MWo=i(j),X3=n(j,"LI",{});var nBe=s(X3);pue=n(nBe,"STRONG",{});var vMt=s(pue);EWo=r(vMt,"xlm"),vMt.forEach(t),CWo=r(nBe," \u2014 "),lz=n(nBe,"A",{href:!0});var FMt=s(lz);wWo=r(FMt,"XLMForSequenceClassification"),FMt.forEach(t),AWo=r(nBe," (XLM model)"),nBe.forEach(t),LWo=i(j),z3=n(j,"LI",{});var sBe=s(z3);_ue=n(sBe,"STRONG",{});var TMt=s(_ue);yWo=r(TMt,"xlm-roberta"),TMt.forEach(t),xWo=r(sBe," \u2014 "),iz=n(sBe,"A",{href:!0});var MMt=s(iz);$Wo=r(MMt,"XLMRobertaForSequenceClassification"),MMt.forEach(t),kWo=r(sBe," (XLM-RoBERTa model)"),sBe.forEach(t),SWo=i(j),W3=n(j,"LI",{});var lBe=s(W3);uue=n(lBe,"STRONG",{});var EMt=s(uue);RWo=r(EMt,"xlm-roberta-xl"),EMt.forEach(t),PWo=r(lBe," \u2014 "),dz=n(lBe,"A",{href:!0});var CMt=s(dz);BWo=r(CMt,"XLMRobertaXLForSequenceClassification"),CMt.forEach(t),IWo=r(lBe," (XLM-RoBERTa-XL model)"),lBe.forEach(t),NWo=i(j),Q3=n(j,"LI",{});var iBe=s(Q3);bue=n(iBe,"STRONG",{});var wMt=s(bue);qWo=r(wMt,"xlnet"),wMt.forEach(t),jWo=r(iBe," \u2014 "),cz=n(iBe,"A",{href:!0});var AMt=s(cz);DWo=r(AMt,"XLNetForSequenceClassification"),AMt.forEach(t),GWo=r(iBe," (XLNet model)"),iBe.forEach(t),OWo=i(j),H3=n(j,"LI",{});var dBe=s(H3);vue=n(dBe,"STRONG",{});var LMt=s(vue);VWo=r(LMt,"yoso"),LMt.forEach(t),XWo=r(dBe," \u2014 "),fz=n(dBe,"A",{href:!0});var yMt=s(fz);zWo=r(yMt,"YosoForSequenceClassification"),yMt.forEach(t),WWo=r(dBe," (YOSO model)"),dBe.forEach(t),j.forEach(t),QWo=i(ma),U3=n(ma,"P",{});var cBe=s(U3);HWo=r(cBe,"The model is set in evaluation mode by default using "),Fue=n(cBe,"CODE",{});var xMt=s(Fue);UWo=r(xMt,"model.eval()"),xMt.forEach(t),JWo=r(cBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tue=n(cBe,"CODE",{});var $Mt=s(Tue);YWo=r($Mt,"model.train()"),$Mt.forEach(t),cBe.forEach(t),KWo=i(ma),T(J3.$$.fragment,ma),ma.forEach(t),dl.forEach(t),sze=i(f),ld=n(f,"H2",{class:!0});var mQe=s(ld);Y3=n(mQe,"A",{id:!0,class:!0,href:!0});var kMt=s(Y3);Mue=n(kMt,"SPAN",{});var SMt=s(Mue);T(pL.$$.fragment,SMt),SMt.forEach(t),kMt.forEach(t),ZWo=i(mQe),Eue=n(mQe,"SPAN",{});var RMt=s(Eue);eQo=r(RMt,"AutoModelForMultipleChoice"),RMt.forEach(t),mQe.forEach(t),lze=i(f),Io=n(f,"DIV",{class:!0});var cl=s(Io);T(_L.$$.fragment,cl),oQo=i(cl),id=n(cl,"P",{});var mte=s(id);rQo=r(mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),mz=n(mte,"A",{href:!0});var PMt=s(mz);tQo=r(PMt,"from_pretrained()"),PMt.forEach(t),aQo=r(mte," class method or the "),gz=n(mte,"A",{href:!0});var BMt=s(gz);nQo=r(BMt,"from_config()"),BMt.forEach(t),sQo=r(mte,` class
method.`),mte.forEach(t),lQo=i(cl),uL=n(cl,"P",{});var gQe=s(uL);iQo=r(gQe,"This class cannot be instantiated directly using "),Cue=n(gQe,"CODE",{});var IMt=s(Cue);dQo=r(IMt,"__init__()"),IMt.forEach(t),cQo=r(gQe," (throws an error)."),gQe.forEach(t),fQo=i(cl),ht=n(cl,"DIV",{class:!0});var xw=s(ht);T(bL.$$.fragment,xw),mQo=i(xw),wue=n(xw,"P",{});var NMt=s(wue);gQo=r(NMt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),NMt.forEach(t),hQo=i(xw),dd=n(xw,"P",{});var gte=s(dd);pQo=r(gte,`Note:
Loading a model from its configuration file does `),Aue=n(gte,"STRONG",{});var qMt=s(Aue);_Qo=r(qMt,"not"),qMt.forEach(t),uQo=r(gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),hz=n(gte,"A",{href:!0});var jMt=s(hz);bQo=r(jMt,"from_pretrained()"),jMt.forEach(t),vQo=r(gte," to load the model weights."),gte.forEach(t),FQo=i(xw),T(K3.$$.fragment,xw),xw.forEach(t),TQo=i(cl),to=n(cl,"DIV",{class:!0});var ga=s(to);T(vL.$$.fragment,ga),MQo=i(ga),Lue=n(ga,"P",{});var DMt=s(Lue);EQo=r(DMt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),DMt.forEach(t),CQo=i(ga),Oa=n(ga,"P",{});var $w=s(Oa);wQo=r($w,"The model class to instantiate is selected based on the "),yue=n($w,"CODE",{});var GMt=s(yue);AQo=r(GMt,"model_type"),GMt.forEach(t),LQo=r($w,` property of the config object (either
passed as an argument or loaded from `),xue=n($w,"CODE",{});var OMt=s(xue);yQo=r(OMt,"pretrained_model_name_or_path"),OMt.forEach(t),xQo=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ue=n($w,"CODE",{});var VMt=s($ue);$Qo=r(VMt,"pretrained_model_name_or_path"),VMt.forEach(t),kQo=r($w,":"),$w.forEach(t),SQo=i(ga),Z=n(ga,"UL",{});var ee=s(Z);Z3=n(ee,"LI",{});var fBe=s(Z3);kue=n(fBe,"STRONG",{});var XMt=s(kue);RQo=r(XMt,"albert"),XMt.forEach(t),PQo=r(fBe," \u2014 "),pz=n(fBe,"A",{href:!0});var zMt=s(pz);BQo=r(zMt,"AlbertForMultipleChoice"),zMt.forEach(t),IQo=r(fBe," (ALBERT model)"),fBe.forEach(t),NQo=i(ee),ev=n(ee,"LI",{});var mBe=s(ev);Sue=n(mBe,"STRONG",{});var WMt=s(Sue);qQo=r(WMt,"bert"),WMt.forEach(t),jQo=r(mBe," \u2014 "),_z=n(mBe,"A",{href:!0});var QMt=s(_z);DQo=r(QMt,"BertForMultipleChoice"),QMt.forEach(t),GQo=r(mBe," (BERT model)"),mBe.forEach(t),OQo=i(ee),ov=n(ee,"LI",{});var gBe=s(ov);Rue=n(gBe,"STRONG",{});var HMt=s(Rue);VQo=r(HMt,"big_bird"),HMt.forEach(t),XQo=r(gBe," \u2014 "),uz=n(gBe,"A",{href:!0});var UMt=s(uz);zQo=r(UMt,"BigBirdForMultipleChoice"),UMt.forEach(t),WQo=r(gBe," (BigBird model)"),gBe.forEach(t),QQo=i(ee),rv=n(ee,"LI",{});var hBe=s(rv);Pue=n(hBe,"STRONG",{});var JMt=s(Pue);HQo=r(JMt,"camembert"),JMt.forEach(t),UQo=r(hBe," \u2014 "),bz=n(hBe,"A",{href:!0});var YMt=s(bz);JQo=r(YMt,"CamembertForMultipleChoice"),YMt.forEach(t),YQo=r(hBe," (CamemBERT model)"),hBe.forEach(t),KQo=i(ee),tv=n(ee,"LI",{});var pBe=s(tv);Bue=n(pBe,"STRONG",{});var KMt=s(Bue);ZQo=r(KMt,"canine"),KMt.forEach(t),eHo=r(pBe," \u2014 "),vz=n(pBe,"A",{href:!0});var ZMt=s(vz);oHo=r(ZMt,"CanineForMultipleChoice"),ZMt.forEach(t),rHo=r(pBe," (CANINE model)"),pBe.forEach(t),tHo=i(ee),av=n(ee,"LI",{});var _Be=s(av);Iue=n(_Be,"STRONG",{});var e4t=s(Iue);aHo=r(e4t,"convbert"),e4t.forEach(t),nHo=r(_Be," \u2014 "),Fz=n(_Be,"A",{href:!0});var o4t=s(Fz);sHo=r(o4t,"ConvBertForMultipleChoice"),o4t.forEach(t),lHo=r(_Be," (ConvBERT model)"),_Be.forEach(t),iHo=i(ee),nv=n(ee,"LI",{});var uBe=s(nv);Nue=n(uBe,"STRONG",{});var r4t=s(Nue);dHo=r(r4t,"data2vec-text"),r4t.forEach(t),cHo=r(uBe," \u2014 "),Tz=n(uBe,"A",{href:!0});var t4t=s(Tz);fHo=r(t4t,"Data2VecTextForMultipleChoice"),t4t.forEach(t),mHo=r(uBe," (Data2VecText model)"),uBe.forEach(t),gHo=i(ee),sv=n(ee,"LI",{});var bBe=s(sv);que=n(bBe,"STRONG",{});var a4t=s(que);hHo=r(a4t,"deberta-v2"),a4t.forEach(t),pHo=r(bBe," \u2014 "),Mz=n(bBe,"A",{href:!0});var n4t=s(Mz);_Ho=r(n4t,"DebertaV2ForMultipleChoice"),n4t.forEach(t),uHo=r(bBe," (DeBERTa-v2 model)"),bBe.forEach(t),bHo=i(ee),lv=n(ee,"LI",{});var vBe=s(lv);jue=n(vBe,"STRONG",{});var s4t=s(jue);vHo=r(s4t,"distilbert"),s4t.forEach(t),FHo=r(vBe," \u2014 "),Ez=n(vBe,"A",{href:!0});var l4t=s(Ez);THo=r(l4t,"DistilBertForMultipleChoice"),l4t.forEach(t),MHo=r(vBe," (DistilBERT model)"),vBe.forEach(t),EHo=i(ee),iv=n(ee,"LI",{});var FBe=s(iv);Due=n(FBe,"STRONG",{});var i4t=s(Due);CHo=r(i4t,"electra"),i4t.forEach(t),wHo=r(FBe," \u2014 "),Cz=n(FBe,"A",{href:!0});var d4t=s(Cz);AHo=r(d4t,"ElectraForMultipleChoice"),d4t.forEach(t),LHo=r(FBe," (ELECTRA model)"),FBe.forEach(t),yHo=i(ee),dv=n(ee,"LI",{});var TBe=s(dv);Gue=n(TBe,"STRONG",{});var c4t=s(Gue);xHo=r(c4t,"flaubert"),c4t.forEach(t),$Ho=r(TBe," \u2014 "),wz=n(TBe,"A",{href:!0});var f4t=s(wz);kHo=r(f4t,"FlaubertForMultipleChoice"),f4t.forEach(t),SHo=r(TBe," (FlauBERT model)"),TBe.forEach(t),RHo=i(ee),cv=n(ee,"LI",{});var MBe=s(cv);Oue=n(MBe,"STRONG",{});var m4t=s(Oue);PHo=r(m4t,"fnet"),m4t.forEach(t),BHo=r(MBe," \u2014 "),Az=n(MBe,"A",{href:!0});var g4t=s(Az);IHo=r(g4t,"FNetForMultipleChoice"),g4t.forEach(t),NHo=r(MBe," (FNet model)"),MBe.forEach(t),qHo=i(ee),fv=n(ee,"LI",{});var EBe=s(fv);Vue=n(EBe,"STRONG",{});var h4t=s(Vue);jHo=r(h4t,"funnel"),h4t.forEach(t),DHo=r(EBe," \u2014 "),Lz=n(EBe,"A",{href:!0});var p4t=s(Lz);GHo=r(p4t,"FunnelForMultipleChoice"),p4t.forEach(t),OHo=r(EBe," (Funnel Transformer model)"),EBe.forEach(t),VHo=i(ee),mv=n(ee,"LI",{});var CBe=s(mv);Xue=n(CBe,"STRONG",{});var _4t=s(Xue);XHo=r(_4t,"ibert"),_4t.forEach(t),zHo=r(CBe," \u2014 "),yz=n(CBe,"A",{href:!0});var u4t=s(yz);WHo=r(u4t,"IBertForMultipleChoice"),u4t.forEach(t),QHo=r(CBe," (I-BERT model)"),CBe.forEach(t),HHo=i(ee),gv=n(ee,"LI",{});var wBe=s(gv);zue=n(wBe,"STRONG",{});var b4t=s(zue);UHo=r(b4t,"longformer"),b4t.forEach(t),JHo=r(wBe," \u2014 "),xz=n(wBe,"A",{href:!0});var v4t=s(xz);YHo=r(v4t,"LongformerForMultipleChoice"),v4t.forEach(t),KHo=r(wBe," (Longformer model)"),wBe.forEach(t),ZHo=i(ee),hv=n(ee,"LI",{});var ABe=s(hv);Wue=n(ABe,"STRONG",{});var F4t=s(Wue);eUo=r(F4t,"megatron-bert"),F4t.forEach(t),oUo=r(ABe," \u2014 "),$z=n(ABe,"A",{href:!0});var T4t=s($z);rUo=r(T4t,"MegatronBertForMultipleChoice"),T4t.forEach(t),tUo=r(ABe," (Megatron-BERT model)"),ABe.forEach(t),aUo=i(ee),pv=n(ee,"LI",{});var LBe=s(pv);Que=n(LBe,"STRONG",{});var M4t=s(Que);nUo=r(M4t,"mobilebert"),M4t.forEach(t),sUo=r(LBe," \u2014 "),kz=n(LBe,"A",{href:!0});var E4t=s(kz);lUo=r(E4t,"MobileBertForMultipleChoice"),E4t.forEach(t),iUo=r(LBe," (MobileBERT model)"),LBe.forEach(t),dUo=i(ee),_v=n(ee,"LI",{});var yBe=s(_v);Hue=n(yBe,"STRONG",{});var C4t=s(Hue);cUo=r(C4t,"mpnet"),C4t.forEach(t),fUo=r(yBe," \u2014 "),Sz=n(yBe,"A",{href:!0});var w4t=s(Sz);mUo=r(w4t,"MPNetForMultipleChoice"),w4t.forEach(t),gUo=r(yBe," (MPNet model)"),yBe.forEach(t),hUo=i(ee),uv=n(ee,"LI",{});var xBe=s(uv);Uue=n(xBe,"STRONG",{});var A4t=s(Uue);pUo=r(A4t,"nezha"),A4t.forEach(t),_Uo=r(xBe," \u2014 "),Rz=n(xBe,"A",{href:!0});var L4t=s(Rz);uUo=r(L4t,"NezhaForMultipleChoice"),L4t.forEach(t),bUo=r(xBe," (Nezha model)"),xBe.forEach(t),vUo=i(ee),bv=n(ee,"LI",{});var $Be=s(bv);Jue=n($Be,"STRONG",{});var y4t=s(Jue);FUo=r(y4t,"nystromformer"),y4t.forEach(t),TUo=r($Be," \u2014 "),Pz=n($Be,"A",{href:!0});var x4t=s(Pz);MUo=r(x4t,"NystromformerForMultipleChoice"),x4t.forEach(t),EUo=r($Be," (Nystr\xF6mformer model)"),$Be.forEach(t),CUo=i(ee),vv=n(ee,"LI",{});var kBe=s(vv);Yue=n(kBe,"STRONG",{});var $4t=s(Yue);wUo=r($4t,"qdqbert"),$4t.forEach(t),AUo=r(kBe," \u2014 "),Bz=n(kBe,"A",{href:!0});var k4t=s(Bz);LUo=r(k4t,"QDQBertForMultipleChoice"),k4t.forEach(t),yUo=r(kBe," (QDQBert model)"),kBe.forEach(t),xUo=i(ee),Fv=n(ee,"LI",{});var SBe=s(Fv);Kue=n(SBe,"STRONG",{});var S4t=s(Kue);$Uo=r(S4t,"rembert"),S4t.forEach(t),kUo=r(SBe," \u2014 "),Iz=n(SBe,"A",{href:!0});var R4t=s(Iz);SUo=r(R4t,"RemBertForMultipleChoice"),R4t.forEach(t),RUo=r(SBe," (RemBERT model)"),SBe.forEach(t),PUo=i(ee),Tv=n(ee,"LI",{});var RBe=s(Tv);Zue=n(RBe,"STRONG",{});var P4t=s(Zue);BUo=r(P4t,"roberta"),P4t.forEach(t),IUo=r(RBe," \u2014 "),Nz=n(RBe,"A",{href:!0});var B4t=s(Nz);NUo=r(B4t,"RobertaForMultipleChoice"),B4t.forEach(t),qUo=r(RBe," (RoBERTa model)"),RBe.forEach(t),jUo=i(ee),Mv=n(ee,"LI",{});var PBe=s(Mv);e1e=n(PBe,"STRONG",{});var I4t=s(e1e);DUo=r(I4t,"roformer"),I4t.forEach(t),GUo=r(PBe," \u2014 "),qz=n(PBe,"A",{href:!0});var N4t=s(qz);OUo=r(N4t,"RoFormerForMultipleChoice"),N4t.forEach(t),VUo=r(PBe," (RoFormer model)"),PBe.forEach(t),XUo=i(ee),Ev=n(ee,"LI",{});var BBe=s(Ev);o1e=n(BBe,"STRONG",{});var q4t=s(o1e);zUo=r(q4t,"squeezebert"),q4t.forEach(t),WUo=r(BBe," \u2014 "),jz=n(BBe,"A",{href:!0});var j4t=s(jz);QUo=r(j4t,"SqueezeBertForMultipleChoice"),j4t.forEach(t),HUo=r(BBe," (SqueezeBERT model)"),BBe.forEach(t),UUo=i(ee),Cv=n(ee,"LI",{});var IBe=s(Cv);r1e=n(IBe,"STRONG",{});var D4t=s(r1e);JUo=r(D4t,"xlm"),D4t.forEach(t),YUo=r(IBe," \u2014 "),Dz=n(IBe,"A",{href:!0});var G4t=s(Dz);KUo=r(G4t,"XLMForMultipleChoice"),G4t.forEach(t),ZUo=r(IBe," (XLM model)"),IBe.forEach(t),eJo=i(ee),wv=n(ee,"LI",{});var NBe=s(wv);t1e=n(NBe,"STRONG",{});var O4t=s(t1e);oJo=r(O4t,"xlm-roberta"),O4t.forEach(t),rJo=r(NBe," \u2014 "),Gz=n(NBe,"A",{href:!0});var V4t=s(Gz);tJo=r(V4t,"XLMRobertaForMultipleChoice"),V4t.forEach(t),aJo=r(NBe," (XLM-RoBERTa model)"),NBe.forEach(t),nJo=i(ee),Av=n(ee,"LI",{});var qBe=s(Av);a1e=n(qBe,"STRONG",{});var X4t=s(a1e);sJo=r(X4t,"xlm-roberta-xl"),X4t.forEach(t),lJo=r(qBe," \u2014 "),Oz=n(qBe,"A",{href:!0});var z4t=s(Oz);iJo=r(z4t,"XLMRobertaXLForMultipleChoice"),z4t.forEach(t),dJo=r(qBe," (XLM-RoBERTa-XL model)"),qBe.forEach(t),cJo=i(ee),Lv=n(ee,"LI",{});var jBe=s(Lv);n1e=n(jBe,"STRONG",{});var W4t=s(n1e);fJo=r(W4t,"xlnet"),W4t.forEach(t),mJo=r(jBe," \u2014 "),Vz=n(jBe,"A",{href:!0});var Q4t=s(Vz);gJo=r(Q4t,"XLNetForMultipleChoice"),Q4t.forEach(t),hJo=r(jBe," (XLNet model)"),jBe.forEach(t),pJo=i(ee),yv=n(ee,"LI",{});var DBe=s(yv);s1e=n(DBe,"STRONG",{});var H4t=s(s1e);_Jo=r(H4t,"yoso"),H4t.forEach(t),uJo=r(DBe," \u2014 "),Xz=n(DBe,"A",{href:!0});var U4t=s(Xz);bJo=r(U4t,"YosoForMultipleChoice"),U4t.forEach(t),vJo=r(DBe," (YOSO model)"),DBe.forEach(t),ee.forEach(t),FJo=i(ga),xv=n(ga,"P",{});var GBe=s(xv);TJo=r(GBe,"The model is set in evaluation mode by default using "),l1e=n(GBe,"CODE",{});var J4t=s(l1e);MJo=r(J4t,"model.eval()"),J4t.forEach(t),EJo=r(GBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i1e=n(GBe,"CODE",{});var Y4t=s(i1e);CJo=r(Y4t,"model.train()"),Y4t.forEach(t),GBe.forEach(t),wJo=i(ga),T($v.$$.fragment,ga),ga.forEach(t),cl.forEach(t),ize=i(f),cd=n(f,"H2",{class:!0});var hQe=s(cd);kv=n(hQe,"A",{id:!0,class:!0,href:!0});var K4t=s(kv);d1e=n(K4t,"SPAN",{});var Z4t=s(d1e);T(FL.$$.fragment,Z4t),Z4t.forEach(t),K4t.forEach(t),AJo=i(hQe),c1e=n(hQe,"SPAN",{});var eEt=s(c1e);LJo=r(eEt,"AutoModelForNextSentencePrediction"),eEt.forEach(t),hQe.forEach(t),dze=i(f),No=n(f,"DIV",{class:!0});var fl=s(No);T(TL.$$.fragment,fl),yJo=i(fl),fd=n(fl,"P",{});var hte=s(fd);xJo=r(hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),zz=n(hte,"A",{href:!0});var oEt=s(zz);$Jo=r(oEt,"from_pretrained()"),oEt.forEach(t),kJo=r(hte," class method or the "),Wz=n(hte,"A",{href:!0});var rEt=s(Wz);SJo=r(rEt,"from_config()"),rEt.forEach(t),RJo=r(hte,` class
method.`),hte.forEach(t),PJo=i(fl),ML=n(fl,"P",{});var pQe=s(ML);BJo=r(pQe,"This class cannot be instantiated directly using "),f1e=n(pQe,"CODE",{});var tEt=s(f1e);IJo=r(tEt,"__init__()"),tEt.forEach(t),NJo=r(pQe," (throws an error)."),pQe.forEach(t),qJo=i(fl),pt=n(fl,"DIV",{class:!0});var kw=s(pt);T(EL.$$.fragment,kw),jJo=i(kw),m1e=n(kw,"P",{});var aEt=s(m1e);DJo=r(aEt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),aEt.forEach(t),GJo=i(kw),md=n(kw,"P",{});var pte=s(md);OJo=r(pte,`Note:
Loading a model from its configuration file does `),g1e=n(pte,"STRONG",{});var nEt=s(g1e);VJo=r(nEt,"not"),nEt.forEach(t),XJo=r(pte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=n(pte,"A",{href:!0});var sEt=s(Qz);zJo=r(sEt,"from_pretrained()"),sEt.forEach(t),WJo=r(pte," to load the model weights."),pte.forEach(t),QJo=i(kw),T(Sv.$$.fragment,kw),kw.forEach(t),HJo=i(fl),ao=n(fl,"DIV",{class:!0});var ha=s(ao);T(CL.$$.fragment,ha),UJo=i(ha),h1e=n(ha,"P",{});var lEt=s(h1e);JJo=r(lEt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),lEt.forEach(t),YJo=i(ha),Va=n(ha,"P",{});var Sw=s(Va);KJo=r(Sw,"The model class to instantiate is selected based on the "),p1e=n(Sw,"CODE",{});var iEt=s(p1e);ZJo=r(iEt,"model_type"),iEt.forEach(t),eYo=r(Sw,` property of the config object (either
passed as an argument or loaded from `),_1e=n(Sw,"CODE",{});var dEt=s(_1e);oYo=r(dEt,"pretrained_model_name_or_path"),dEt.forEach(t),rYo=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u1e=n(Sw,"CODE",{});var cEt=s(u1e);tYo=r(cEt,"pretrained_model_name_or_path"),cEt.forEach(t),aYo=r(Sw,":"),Sw.forEach(t),nYo=i(ha),qo=n(ha,"UL",{});var pa=s(qo);Rv=n(pa,"LI",{});var OBe=s(Rv);b1e=n(OBe,"STRONG",{});var fEt=s(b1e);sYo=r(fEt,"bert"),fEt.forEach(t),lYo=r(OBe," \u2014 "),Hz=n(OBe,"A",{href:!0});var mEt=s(Hz);iYo=r(mEt,"BertForNextSentencePrediction"),mEt.forEach(t),dYo=r(OBe," (BERT model)"),OBe.forEach(t),cYo=i(pa),Pv=n(pa,"LI",{});var VBe=s(Pv);v1e=n(VBe,"STRONG",{});var gEt=s(v1e);fYo=r(gEt,"fnet"),gEt.forEach(t),mYo=r(VBe," \u2014 "),Uz=n(VBe,"A",{href:!0});var hEt=s(Uz);gYo=r(hEt,"FNetForNextSentencePrediction"),hEt.forEach(t),hYo=r(VBe," (FNet model)"),VBe.forEach(t),pYo=i(pa),Bv=n(pa,"LI",{});var XBe=s(Bv);F1e=n(XBe,"STRONG",{});var pEt=s(F1e);_Yo=r(pEt,"megatron-bert"),pEt.forEach(t),uYo=r(XBe," \u2014 "),Jz=n(XBe,"A",{href:!0});var _Et=s(Jz);bYo=r(_Et,"MegatronBertForNextSentencePrediction"),_Et.forEach(t),vYo=r(XBe," (Megatron-BERT model)"),XBe.forEach(t),FYo=i(pa),Iv=n(pa,"LI",{});var zBe=s(Iv);T1e=n(zBe,"STRONG",{});var uEt=s(T1e);TYo=r(uEt,"mobilebert"),uEt.forEach(t),MYo=r(zBe," \u2014 "),Yz=n(zBe,"A",{href:!0});var bEt=s(Yz);EYo=r(bEt,"MobileBertForNextSentencePrediction"),bEt.forEach(t),CYo=r(zBe," (MobileBERT model)"),zBe.forEach(t),wYo=i(pa),Nv=n(pa,"LI",{});var WBe=s(Nv);M1e=n(WBe,"STRONG",{});var vEt=s(M1e);AYo=r(vEt,"nezha"),vEt.forEach(t),LYo=r(WBe," \u2014 "),Kz=n(WBe,"A",{href:!0});var FEt=s(Kz);yYo=r(FEt,"NezhaForNextSentencePrediction"),FEt.forEach(t),xYo=r(WBe," (Nezha model)"),WBe.forEach(t),$Yo=i(pa),qv=n(pa,"LI",{});var QBe=s(qv);E1e=n(QBe,"STRONG",{});var TEt=s(E1e);kYo=r(TEt,"qdqbert"),TEt.forEach(t),SYo=r(QBe," \u2014 "),Zz=n(QBe,"A",{href:!0});var MEt=s(Zz);RYo=r(MEt,"QDQBertForNextSentencePrediction"),MEt.forEach(t),PYo=r(QBe," (QDQBert model)"),QBe.forEach(t),pa.forEach(t),BYo=i(ha),jv=n(ha,"P",{});var HBe=s(jv);IYo=r(HBe,"The model is set in evaluation mode by default using "),C1e=n(HBe,"CODE",{});var EEt=s(C1e);NYo=r(EEt,"model.eval()"),EEt.forEach(t),qYo=r(HBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w1e=n(HBe,"CODE",{});var CEt=s(w1e);jYo=r(CEt,"model.train()"),CEt.forEach(t),HBe.forEach(t),DYo=i(ha),T(Dv.$$.fragment,ha),ha.forEach(t),fl.forEach(t),cze=i(f),gd=n(f,"H2",{class:!0});var _Qe=s(gd);Gv=n(_Qe,"A",{id:!0,class:!0,href:!0});var wEt=s(Gv);A1e=n(wEt,"SPAN",{});var AEt=s(A1e);T(wL.$$.fragment,AEt),AEt.forEach(t),wEt.forEach(t),GYo=i(_Qe),L1e=n(_Qe,"SPAN",{});var LEt=s(L1e);OYo=r(LEt,"AutoModelForTokenClassification"),LEt.forEach(t),_Qe.forEach(t),fze=i(f),jo=n(f,"DIV",{class:!0});var ml=s(jo);T(AL.$$.fragment,ml),VYo=i(ml),hd=n(ml,"P",{});var _te=s(hd);XYo=r(_te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),eW=n(_te,"A",{href:!0});var yEt=s(eW);zYo=r(yEt,"from_pretrained()"),yEt.forEach(t),WYo=r(_te," class method or the "),oW=n(_te,"A",{href:!0});var xEt=s(oW);QYo=r(xEt,"from_config()"),xEt.forEach(t),HYo=r(_te,` class
method.`),_te.forEach(t),UYo=i(ml),LL=n(ml,"P",{});var uQe=s(LL);JYo=r(uQe,"This class cannot be instantiated directly using "),y1e=n(uQe,"CODE",{});var $Et=s(y1e);YYo=r($Et,"__init__()"),$Et.forEach(t),KYo=r(uQe," (throws an error)."),uQe.forEach(t),ZYo=i(ml),_t=n(ml,"DIV",{class:!0});var Rw=s(_t);T(yL.$$.fragment,Rw),eKo=i(Rw),x1e=n(Rw,"P",{});var kEt=s(x1e);oKo=r(kEt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),kEt.forEach(t),rKo=i(Rw),pd=n(Rw,"P",{});var ute=s(pd);tKo=r(ute,`Note:
Loading a model from its configuration file does `),$1e=n(ute,"STRONG",{});var SEt=s($1e);aKo=r(SEt,"not"),SEt.forEach(t),nKo=r(ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),rW=n(ute,"A",{href:!0});var REt=s(rW);sKo=r(REt,"from_pretrained()"),REt.forEach(t),lKo=r(ute," to load the model weights."),ute.forEach(t),iKo=i(Rw),T(Ov.$$.fragment,Rw),Rw.forEach(t),dKo=i(ml),no=n(ml,"DIV",{class:!0});var _a=s(no);T(xL.$$.fragment,_a),cKo=i(_a),k1e=n(_a,"P",{});var PEt=s(k1e);fKo=r(PEt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),PEt.forEach(t),mKo=i(_a),Xa=n(_a,"P",{});var Pw=s(Xa);gKo=r(Pw,"The model class to instantiate is selected based on the "),S1e=n(Pw,"CODE",{});var BEt=s(S1e);hKo=r(BEt,"model_type"),BEt.forEach(t),pKo=r(Pw,` property of the config object (either
passed as an argument or loaded from `),R1e=n(Pw,"CODE",{});var IEt=s(R1e);_Ko=r(IEt,"pretrained_model_name_or_path"),IEt.forEach(t),uKo=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P1e=n(Pw,"CODE",{});var NEt=s(P1e);bKo=r(NEt,"pretrained_model_name_or_path"),NEt.forEach(t),vKo=r(Pw,":"),Pw.forEach(t),FKo=i(_a),U=n(_a,"UL",{});var Y=s(U);Vv=n(Y,"LI",{});var UBe=s(Vv);B1e=n(UBe,"STRONG",{});var qEt=s(B1e);TKo=r(qEt,"albert"),qEt.forEach(t),MKo=r(UBe," \u2014 "),tW=n(UBe,"A",{href:!0});var jEt=s(tW);EKo=r(jEt,"AlbertForTokenClassification"),jEt.forEach(t),CKo=r(UBe," (ALBERT model)"),UBe.forEach(t),wKo=i(Y),Xv=n(Y,"LI",{});var JBe=s(Xv);I1e=n(JBe,"STRONG",{});var DEt=s(I1e);AKo=r(DEt,"bert"),DEt.forEach(t),LKo=r(JBe," \u2014 "),aW=n(JBe,"A",{href:!0});var GEt=s(aW);yKo=r(GEt,"BertForTokenClassification"),GEt.forEach(t),xKo=r(JBe," (BERT model)"),JBe.forEach(t),$Ko=i(Y),zv=n(Y,"LI",{});var YBe=s(zv);N1e=n(YBe,"STRONG",{});var OEt=s(N1e);kKo=r(OEt,"big_bird"),OEt.forEach(t),SKo=r(YBe," \u2014 "),nW=n(YBe,"A",{href:!0});var VEt=s(nW);RKo=r(VEt,"BigBirdForTokenClassification"),VEt.forEach(t),PKo=r(YBe," (BigBird model)"),YBe.forEach(t),BKo=i(Y),Wv=n(Y,"LI",{});var KBe=s(Wv);q1e=n(KBe,"STRONG",{});var XEt=s(q1e);IKo=r(XEt,"bloom"),XEt.forEach(t),NKo=r(KBe," \u2014 "),sW=n(KBe,"A",{href:!0});var zEt=s(sW);qKo=r(zEt,"BloomForTokenClassification"),zEt.forEach(t),jKo=r(KBe," (BLOOM model)"),KBe.forEach(t),DKo=i(Y),Qv=n(Y,"LI",{});var ZBe=s(Qv);j1e=n(ZBe,"STRONG",{});var WEt=s(j1e);GKo=r(WEt,"camembert"),WEt.forEach(t),OKo=r(ZBe," \u2014 "),lW=n(ZBe,"A",{href:!0});var QEt=s(lW);VKo=r(QEt,"CamembertForTokenClassification"),QEt.forEach(t),XKo=r(ZBe," (CamemBERT model)"),ZBe.forEach(t),zKo=i(Y),Hv=n(Y,"LI",{});var eIe=s(Hv);D1e=n(eIe,"STRONG",{});var HEt=s(D1e);WKo=r(HEt,"canine"),HEt.forEach(t),QKo=r(eIe," \u2014 "),iW=n(eIe,"A",{href:!0});var UEt=s(iW);HKo=r(UEt,"CanineForTokenClassification"),UEt.forEach(t),UKo=r(eIe," (CANINE model)"),eIe.forEach(t),JKo=i(Y),Uv=n(Y,"LI",{});var oIe=s(Uv);G1e=n(oIe,"STRONG",{});var JEt=s(G1e);YKo=r(JEt,"convbert"),JEt.forEach(t),KKo=r(oIe," \u2014 "),dW=n(oIe,"A",{href:!0});var YEt=s(dW);ZKo=r(YEt,"ConvBertForTokenClassification"),YEt.forEach(t),eZo=r(oIe," (ConvBERT model)"),oIe.forEach(t),oZo=i(Y),Jv=n(Y,"LI",{});var rIe=s(Jv);O1e=n(rIe,"STRONG",{});var KEt=s(O1e);rZo=r(KEt,"data2vec-text"),KEt.forEach(t),tZo=r(rIe," \u2014 "),cW=n(rIe,"A",{href:!0});var ZEt=s(cW);aZo=r(ZEt,"Data2VecTextForTokenClassification"),ZEt.forEach(t),nZo=r(rIe," (Data2VecText model)"),rIe.forEach(t),sZo=i(Y),Yv=n(Y,"LI",{});var tIe=s(Yv);V1e=n(tIe,"STRONG",{});var eCt=s(V1e);lZo=r(eCt,"deberta"),eCt.forEach(t),iZo=r(tIe," \u2014 "),fW=n(tIe,"A",{href:!0});var oCt=s(fW);dZo=r(oCt,"DebertaForTokenClassification"),oCt.forEach(t),cZo=r(tIe," (DeBERTa model)"),tIe.forEach(t),fZo=i(Y),Kv=n(Y,"LI",{});var aIe=s(Kv);X1e=n(aIe,"STRONG",{});var rCt=s(X1e);mZo=r(rCt,"deberta-v2"),rCt.forEach(t),gZo=r(aIe," \u2014 "),mW=n(aIe,"A",{href:!0});var tCt=s(mW);hZo=r(tCt,"DebertaV2ForTokenClassification"),tCt.forEach(t),pZo=r(aIe," (DeBERTa-v2 model)"),aIe.forEach(t),_Zo=i(Y),Zv=n(Y,"LI",{});var nIe=s(Zv);z1e=n(nIe,"STRONG",{});var aCt=s(z1e);uZo=r(aCt,"distilbert"),aCt.forEach(t),bZo=r(nIe," \u2014 "),gW=n(nIe,"A",{href:!0});var nCt=s(gW);vZo=r(nCt,"DistilBertForTokenClassification"),nCt.forEach(t),FZo=r(nIe," (DistilBERT model)"),nIe.forEach(t),TZo=i(Y),eF=n(Y,"LI",{});var sIe=s(eF);W1e=n(sIe,"STRONG",{});var sCt=s(W1e);MZo=r(sCt,"electra"),sCt.forEach(t),EZo=r(sIe," \u2014 "),hW=n(sIe,"A",{href:!0});var lCt=s(hW);CZo=r(lCt,"ElectraForTokenClassification"),lCt.forEach(t),wZo=r(sIe," (ELECTRA model)"),sIe.forEach(t),AZo=i(Y),oF=n(Y,"LI",{});var lIe=s(oF);Q1e=n(lIe,"STRONG",{});var iCt=s(Q1e);LZo=r(iCt,"flaubert"),iCt.forEach(t),yZo=r(lIe," \u2014 "),pW=n(lIe,"A",{href:!0});var dCt=s(pW);xZo=r(dCt,"FlaubertForTokenClassification"),dCt.forEach(t),$Zo=r(lIe," (FlauBERT model)"),lIe.forEach(t),kZo=i(Y),rF=n(Y,"LI",{});var iIe=s(rF);H1e=n(iIe,"STRONG",{});var cCt=s(H1e);SZo=r(cCt,"fnet"),cCt.forEach(t),RZo=r(iIe," \u2014 "),_W=n(iIe,"A",{href:!0});var fCt=s(_W);PZo=r(fCt,"FNetForTokenClassification"),fCt.forEach(t),BZo=r(iIe," (FNet model)"),iIe.forEach(t),IZo=i(Y),tF=n(Y,"LI",{});var dIe=s(tF);U1e=n(dIe,"STRONG",{});var mCt=s(U1e);NZo=r(mCt,"funnel"),mCt.forEach(t),qZo=r(dIe," \u2014 "),uW=n(dIe,"A",{href:!0});var gCt=s(uW);jZo=r(gCt,"FunnelForTokenClassification"),gCt.forEach(t),DZo=r(dIe," (Funnel Transformer model)"),dIe.forEach(t),GZo=i(Y),aF=n(Y,"LI",{});var cIe=s(aF);J1e=n(cIe,"STRONG",{});var hCt=s(J1e);OZo=r(hCt,"gpt2"),hCt.forEach(t),VZo=r(cIe," \u2014 "),bW=n(cIe,"A",{href:!0});var pCt=s(bW);XZo=r(pCt,"GPT2ForTokenClassification"),pCt.forEach(t),zZo=r(cIe," (OpenAI GPT-2 model)"),cIe.forEach(t),WZo=i(Y),nF=n(Y,"LI",{});var fIe=s(nF);Y1e=n(fIe,"STRONG",{});var _Ct=s(Y1e);QZo=r(_Ct,"ibert"),_Ct.forEach(t),HZo=r(fIe," \u2014 "),vW=n(fIe,"A",{href:!0});var uCt=s(vW);UZo=r(uCt,"IBertForTokenClassification"),uCt.forEach(t),JZo=r(fIe," (I-BERT model)"),fIe.forEach(t),YZo=i(Y),sF=n(Y,"LI",{});var mIe=s(sF);K1e=n(mIe,"STRONG",{});var bCt=s(K1e);KZo=r(bCt,"layoutlm"),bCt.forEach(t),ZZo=r(mIe," \u2014 "),FW=n(mIe,"A",{href:!0});var vCt=s(FW);eer=r(vCt,"LayoutLMForTokenClassification"),vCt.forEach(t),oer=r(mIe," (LayoutLM model)"),mIe.forEach(t),rer=i(Y),lF=n(Y,"LI",{});var gIe=s(lF);Z1e=n(gIe,"STRONG",{});var FCt=s(Z1e);ter=r(FCt,"layoutlmv2"),FCt.forEach(t),aer=r(gIe," \u2014 "),TW=n(gIe,"A",{href:!0});var TCt=s(TW);ner=r(TCt,"LayoutLMv2ForTokenClassification"),TCt.forEach(t),ser=r(gIe," (LayoutLMv2 model)"),gIe.forEach(t),ler=i(Y),iF=n(Y,"LI",{});var hIe=s(iF);e2e=n(hIe,"STRONG",{});var MCt=s(e2e);ier=r(MCt,"layoutlmv3"),MCt.forEach(t),der=r(hIe," \u2014 "),MW=n(hIe,"A",{href:!0});var ECt=s(MW);cer=r(ECt,"LayoutLMv3ForTokenClassification"),ECt.forEach(t),fer=r(hIe," (LayoutLMv3 model)"),hIe.forEach(t),mer=i(Y),dF=n(Y,"LI",{});var pIe=s(dF);o2e=n(pIe,"STRONG",{});var CCt=s(o2e);ger=r(CCt,"longformer"),CCt.forEach(t),her=r(pIe," \u2014 "),EW=n(pIe,"A",{href:!0});var wCt=s(EW);per=r(wCt,"LongformerForTokenClassification"),wCt.forEach(t),_er=r(pIe," (Longformer model)"),pIe.forEach(t),uer=i(Y),cF=n(Y,"LI",{});var _Ie=s(cF);r2e=n(_Ie,"STRONG",{});var ACt=s(r2e);ber=r(ACt,"megatron-bert"),ACt.forEach(t),ver=r(_Ie," \u2014 "),CW=n(_Ie,"A",{href:!0});var LCt=s(CW);Fer=r(LCt,"MegatronBertForTokenClassification"),LCt.forEach(t),Ter=r(_Ie," (Megatron-BERT model)"),_Ie.forEach(t),Mer=i(Y),fF=n(Y,"LI",{});var uIe=s(fF);t2e=n(uIe,"STRONG",{});var yCt=s(t2e);Eer=r(yCt,"mobilebert"),yCt.forEach(t),Cer=r(uIe," \u2014 "),wW=n(uIe,"A",{href:!0});var xCt=s(wW);wer=r(xCt,"MobileBertForTokenClassification"),xCt.forEach(t),Aer=r(uIe," (MobileBERT model)"),uIe.forEach(t),Ler=i(Y),mF=n(Y,"LI",{});var bIe=s(mF);a2e=n(bIe,"STRONG",{});var $Ct=s(a2e);yer=r($Ct,"mpnet"),$Ct.forEach(t),xer=r(bIe," \u2014 "),AW=n(bIe,"A",{href:!0});var kCt=s(AW);$er=r(kCt,"MPNetForTokenClassification"),kCt.forEach(t),ker=r(bIe," (MPNet model)"),bIe.forEach(t),Ser=i(Y),gF=n(Y,"LI",{});var vIe=s(gF);n2e=n(vIe,"STRONG",{});var SCt=s(n2e);Rer=r(SCt,"nezha"),SCt.forEach(t),Per=r(vIe," \u2014 "),LW=n(vIe,"A",{href:!0});var RCt=s(LW);Ber=r(RCt,"NezhaForTokenClassification"),RCt.forEach(t),Ier=r(vIe," (Nezha model)"),vIe.forEach(t),Ner=i(Y),hF=n(Y,"LI",{});var FIe=s(hF);s2e=n(FIe,"STRONG",{});var PCt=s(s2e);qer=r(PCt,"nystromformer"),PCt.forEach(t),jer=r(FIe," \u2014 "),yW=n(FIe,"A",{href:!0});var BCt=s(yW);Der=r(BCt,"NystromformerForTokenClassification"),BCt.forEach(t),Ger=r(FIe," (Nystr\xF6mformer model)"),FIe.forEach(t),Oer=i(Y),pF=n(Y,"LI",{});var TIe=s(pF);l2e=n(TIe,"STRONG",{});var ICt=s(l2e);Ver=r(ICt,"qdqbert"),ICt.forEach(t),Xer=r(TIe," \u2014 "),xW=n(TIe,"A",{href:!0});var NCt=s(xW);zer=r(NCt,"QDQBertForTokenClassification"),NCt.forEach(t),Wer=r(TIe," (QDQBert model)"),TIe.forEach(t),Qer=i(Y),_F=n(Y,"LI",{});var MIe=s(_F);i2e=n(MIe,"STRONG",{});var qCt=s(i2e);Her=r(qCt,"rembert"),qCt.forEach(t),Uer=r(MIe," \u2014 "),$W=n(MIe,"A",{href:!0});var jCt=s($W);Jer=r(jCt,"RemBertForTokenClassification"),jCt.forEach(t),Yer=r(MIe," (RemBERT model)"),MIe.forEach(t),Ker=i(Y),uF=n(Y,"LI",{});var EIe=s(uF);d2e=n(EIe,"STRONG",{});var DCt=s(d2e);Zer=r(DCt,"roberta"),DCt.forEach(t),eor=r(EIe," \u2014 "),kW=n(EIe,"A",{href:!0});var GCt=s(kW);oor=r(GCt,"RobertaForTokenClassification"),GCt.forEach(t),ror=r(EIe," (RoBERTa model)"),EIe.forEach(t),tor=i(Y),bF=n(Y,"LI",{});var CIe=s(bF);c2e=n(CIe,"STRONG",{});var OCt=s(c2e);aor=r(OCt,"roformer"),OCt.forEach(t),nor=r(CIe," \u2014 "),SW=n(CIe,"A",{href:!0});var VCt=s(SW);sor=r(VCt,"RoFormerForTokenClassification"),VCt.forEach(t),lor=r(CIe," (RoFormer model)"),CIe.forEach(t),ior=i(Y),vF=n(Y,"LI",{});var wIe=s(vF);f2e=n(wIe,"STRONG",{});var XCt=s(f2e);dor=r(XCt,"squeezebert"),XCt.forEach(t),cor=r(wIe," \u2014 "),RW=n(wIe,"A",{href:!0});var zCt=s(RW);mor=r(zCt,"SqueezeBertForTokenClassification"),zCt.forEach(t),gor=r(wIe," (SqueezeBERT model)"),wIe.forEach(t),hor=i(Y),FF=n(Y,"LI",{});var AIe=s(FF);m2e=n(AIe,"STRONG",{});var WCt=s(m2e);por=r(WCt,"xlm"),WCt.forEach(t),_or=r(AIe," \u2014 "),PW=n(AIe,"A",{href:!0});var QCt=s(PW);uor=r(QCt,"XLMForTokenClassification"),QCt.forEach(t),bor=r(AIe," (XLM model)"),AIe.forEach(t),vor=i(Y),TF=n(Y,"LI",{});var LIe=s(TF);g2e=n(LIe,"STRONG",{});var HCt=s(g2e);For=r(HCt,"xlm-roberta"),HCt.forEach(t),Tor=r(LIe," \u2014 "),BW=n(LIe,"A",{href:!0});var UCt=s(BW);Mor=r(UCt,"XLMRobertaForTokenClassification"),UCt.forEach(t),Eor=r(LIe," (XLM-RoBERTa model)"),LIe.forEach(t),Cor=i(Y),MF=n(Y,"LI",{});var yIe=s(MF);h2e=n(yIe,"STRONG",{});var JCt=s(h2e);wor=r(JCt,"xlm-roberta-xl"),JCt.forEach(t),Aor=r(yIe," \u2014 "),IW=n(yIe,"A",{href:!0});var YCt=s(IW);Lor=r(YCt,"XLMRobertaXLForTokenClassification"),YCt.forEach(t),yor=r(yIe," (XLM-RoBERTa-XL model)"),yIe.forEach(t),xor=i(Y),EF=n(Y,"LI",{});var xIe=s(EF);p2e=n(xIe,"STRONG",{});var KCt=s(p2e);$or=r(KCt,"xlnet"),KCt.forEach(t),kor=r(xIe," \u2014 "),NW=n(xIe,"A",{href:!0});var ZCt=s(NW);Sor=r(ZCt,"XLNetForTokenClassification"),ZCt.forEach(t),Ror=r(xIe," (XLNet model)"),xIe.forEach(t),Por=i(Y),CF=n(Y,"LI",{});var $Ie=s(CF);_2e=n($Ie,"STRONG",{});var e5t=s(_2e);Bor=r(e5t,"yoso"),e5t.forEach(t),Ior=r($Ie," \u2014 "),qW=n($Ie,"A",{href:!0});var o5t=s(qW);Nor=r(o5t,"YosoForTokenClassification"),o5t.forEach(t),qor=r($Ie," (YOSO model)"),$Ie.forEach(t),Y.forEach(t),jor=i(_a),wF=n(_a,"P",{});var kIe=s(wF);Dor=r(kIe,"The model is set in evaluation mode by default using "),u2e=n(kIe,"CODE",{});var r5t=s(u2e);Gor=r(r5t,"model.eval()"),r5t.forEach(t),Oor=r(kIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b2e=n(kIe,"CODE",{});var t5t=s(b2e);Vor=r(t5t,"model.train()"),t5t.forEach(t),kIe.forEach(t),Xor=i(_a),T(AF.$$.fragment,_a),_a.forEach(t),ml.forEach(t),mze=i(f),_d=n(f,"H2",{class:!0});var bQe=s(_d);LF=n(bQe,"A",{id:!0,class:!0,href:!0});var a5t=s(LF);v2e=n(a5t,"SPAN",{});var n5t=s(v2e);T($L.$$.fragment,n5t),n5t.forEach(t),a5t.forEach(t),zor=i(bQe),F2e=n(bQe,"SPAN",{});var s5t=s(F2e);Wor=r(s5t,"AutoModelForQuestionAnswering"),s5t.forEach(t),bQe.forEach(t),gze=i(f),Do=n(f,"DIV",{class:!0});var gl=s(Do);T(kL.$$.fragment,gl),Qor=i(gl),ud=n(gl,"P",{});var bte=s(ud);Hor=r(bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),jW=n(bte,"A",{href:!0});var l5t=s(jW);Uor=r(l5t,"from_pretrained()"),l5t.forEach(t),Jor=r(bte," class method or the "),DW=n(bte,"A",{href:!0});var i5t=s(DW);Yor=r(i5t,"from_config()"),i5t.forEach(t),Kor=r(bte,` class
method.`),bte.forEach(t),Zor=i(gl),SL=n(gl,"P",{});var vQe=s(SL);err=r(vQe,"This class cannot be instantiated directly using "),T2e=n(vQe,"CODE",{});var d5t=s(T2e);orr=r(d5t,"__init__()"),d5t.forEach(t),rrr=r(vQe," (throws an error)."),vQe.forEach(t),trr=i(gl),ut=n(gl,"DIV",{class:!0});var Bw=s(ut);T(RL.$$.fragment,Bw),arr=i(Bw),M2e=n(Bw,"P",{});var c5t=s(M2e);nrr=r(c5t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),c5t.forEach(t),srr=i(Bw),bd=n(Bw,"P",{});var vte=s(bd);lrr=r(vte,`Note:
Loading a model from its configuration file does `),E2e=n(vte,"STRONG",{});var f5t=s(E2e);irr=r(f5t,"not"),f5t.forEach(t),drr=r(vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=n(vte,"A",{href:!0});var m5t=s(GW);crr=r(m5t,"from_pretrained()"),m5t.forEach(t),frr=r(vte," to load the model weights."),vte.forEach(t),mrr=i(Bw),T(yF.$$.fragment,Bw),Bw.forEach(t),grr=i(gl),so=n(gl,"DIV",{class:!0});var ua=s(so);T(PL.$$.fragment,ua),hrr=i(ua),C2e=n(ua,"P",{});var g5t=s(C2e);prr=r(g5t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),g5t.forEach(t),_rr=i(ua),za=n(ua,"P",{});var Iw=s(za);urr=r(Iw,"The model class to instantiate is selected based on the "),w2e=n(Iw,"CODE",{});var h5t=s(w2e);brr=r(h5t,"model_type"),h5t.forEach(t),vrr=r(Iw,` property of the config object (either
passed as an argument or loaded from `),A2e=n(Iw,"CODE",{});var p5t=s(A2e);Frr=r(p5t,"pretrained_model_name_or_path"),p5t.forEach(t),Trr=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L2e=n(Iw,"CODE",{});var _5t=s(L2e);Mrr=r(_5t,"pretrained_model_name_or_path"),_5t.forEach(t),Err=r(Iw,":"),Iw.forEach(t),Crr=i(ua),V=n(ua,"UL",{});var X=s(V);xF=n(X,"LI",{});var SIe=s(xF);y2e=n(SIe,"STRONG",{});var u5t=s(y2e);wrr=r(u5t,"albert"),u5t.forEach(t),Arr=r(SIe," \u2014 "),OW=n(SIe,"A",{href:!0});var b5t=s(OW);Lrr=r(b5t,"AlbertForQuestionAnswering"),b5t.forEach(t),yrr=r(SIe," (ALBERT model)"),SIe.forEach(t),xrr=i(X),$F=n(X,"LI",{});var RIe=s($F);x2e=n(RIe,"STRONG",{});var v5t=s(x2e);$rr=r(v5t,"bart"),v5t.forEach(t),krr=r(RIe," \u2014 "),VW=n(RIe,"A",{href:!0});var F5t=s(VW);Srr=r(F5t,"BartForQuestionAnswering"),F5t.forEach(t),Rrr=r(RIe," (BART model)"),RIe.forEach(t),Prr=i(X),kF=n(X,"LI",{});var PIe=s(kF);$2e=n(PIe,"STRONG",{});var T5t=s($2e);Brr=r(T5t,"bert"),T5t.forEach(t),Irr=r(PIe," \u2014 "),XW=n(PIe,"A",{href:!0});var M5t=s(XW);Nrr=r(M5t,"BertForQuestionAnswering"),M5t.forEach(t),qrr=r(PIe," (BERT model)"),PIe.forEach(t),jrr=i(X),SF=n(X,"LI",{});var BIe=s(SF);k2e=n(BIe,"STRONG",{});var E5t=s(k2e);Drr=r(E5t,"big_bird"),E5t.forEach(t),Grr=r(BIe," \u2014 "),zW=n(BIe,"A",{href:!0});var C5t=s(zW);Orr=r(C5t,"BigBirdForQuestionAnswering"),C5t.forEach(t),Vrr=r(BIe," (BigBird model)"),BIe.forEach(t),Xrr=i(X),RF=n(X,"LI",{});var IIe=s(RF);S2e=n(IIe,"STRONG",{});var w5t=s(S2e);zrr=r(w5t,"bigbird_pegasus"),w5t.forEach(t),Wrr=r(IIe," \u2014 "),WW=n(IIe,"A",{href:!0});var A5t=s(WW);Qrr=r(A5t,"BigBirdPegasusForQuestionAnswering"),A5t.forEach(t),Hrr=r(IIe," (BigBird-Pegasus model)"),IIe.forEach(t),Urr=i(X),PF=n(X,"LI",{});var NIe=s(PF);R2e=n(NIe,"STRONG",{});var L5t=s(R2e);Jrr=r(L5t,"camembert"),L5t.forEach(t),Yrr=r(NIe," \u2014 "),QW=n(NIe,"A",{href:!0});var y5t=s(QW);Krr=r(y5t,"CamembertForQuestionAnswering"),y5t.forEach(t),Zrr=r(NIe," (CamemBERT model)"),NIe.forEach(t),etr=i(X),BF=n(X,"LI",{});var qIe=s(BF);P2e=n(qIe,"STRONG",{});var x5t=s(P2e);otr=r(x5t,"canine"),x5t.forEach(t),rtr=r(qIe," \u2014 "),HW=n(qIe,"A",{href:!0});var $5t=s(HW);ttr=r($5t,"CanineForQuestionAnswering"),$5t.forEach(t),atr=r(qIe," (CANINE model)"),qIe.forEach(t),ntr=i(X),IF=n(X,"LI",{});var jIe=s(IF);B2e=n(jIe,"STRONG",{});var k5t=s(B2e);str=r(k5t,"convbert"),k5t.forEach(t),ltr=r(jIe," \u2014 "),UW=n(jIe,"A",{href:!0});var S5t=s(UW);itr=r(S5t,"ConvBertForQuestionAnswering"),S5t.forEach(t),dtr=r(jIe," (ConvBERT model)"),jIe.forEach(t),ctr=i(X),NF=n(X,"LI",{});var DIe=s(NF);I2e=n(DIe,"STRONG",{});var R5t=s(I2e);ftr=r(R5t,"data2vec-text"),R5t.forEach(t),mtr=r(DIe," \u2014 "),JW=n(DIe,"A",{href:!0});var P5t=s(JW);gtr=r(P5t,"Data2VecTextForQuestionAnswering"),P5t.forEach(t),htr=r(DIe," (Data2VecText model)"),DIe.forEach(t),ptr=i(X),qF=n(X,"LI",{});var GIe=s(qF);N2e=n(GIe,"STRONG",{});var B5t=s(N2e);_tr=r(B5t,"deberta"),B5t.forEach(t),utr=r(GIe," \u2014 "),YW=n(GIe,"A",{href:!0});var I5t=s(YW);btr=r(I5t,"DebertaForQuestionAnswering"),I5t.forEach(t),vtr=r(GIe," (DeBERTa model)"),GIe.forEach(t),Ftr=i(X),jF=n(X,"LI",{});var OIe=s(jF);q2e=n(OIe,"STRONG",{});var N5t=s(q2e);Ttr=r(N5t,"deberta-v2"),N5t.forEach(t),Mtr=r(OIe," \u2014 "),KW=n(OIe,"A",{href:!0});var q5t=s(KW);Etr=r(q5t,"DebertaV2ForQuestionAnswering"),q5t.forEach(t),Ctr=r(OIe," (DeBERTa-v2 model)"),OIe.forEach(t),wtr=i(X),DF=n(X,"LI",{});var VIe=s(DF);j2e=n(VIe,"STRONG",{});var j5t=s(j2e);Atr=r(j5t,"distilbert"),j5t.forEach(t),Ltr=r(VIe," \u2014 "),ZW=n(VIe,"A",{href:!0});var D5t=s(ZW);ytr=r(D5t,"DistilBertForQuestionAnswering"),D5t.forEach(t),xtr=r(VIe," (DistilBERT model)"),VIe.forEach(t),$tr=i(X),GF=n(X,"LI",{});var XIe=s(GF);D2e=n(XIe,"STRONG",{});var G5t=s(D2e);ktr=r(G5t,"electra"),G5t.forEach(t),Str=r(XIe," \u2014 "),eQ=n(XIe,"A",{href:!0});var O5t=s(eQ);Rtr=r(O5t,"ElectraForQuestionAnswering"),O5t.forEach(t),Ptr=r(XIe," (ELECTRA model)"),XIe.forEach(t),Btr=i(X),OF=n(X,"LI",{});var zIe=s(OF);G2e=n(zIe,"STRONG",{});var V5t=s(G2e);Itr=r(V5t,"flaubert"),V5t.forEach(t),Ntr=r(zIe," \u2014 "),oQ=n(zIe,"A",{href:!0});var X5t=s(oQ);qtr=r(X5t,"FlaubertForQuestionAnsweringSimple"),X5t.forEach(t),jtr=r(zIe," (FlauBERT model)"),zIe.forEach(t),Dtr=i(X),VF=n(X,"LI",{});var WIe=s(VF);O2e=n(WIe,"STRONG",{});var z5t=s(O2e);Gtr=r(z5t,"fnet"),z5t.forEach(t),Otr=r(WIe," \u2014 "),rQ=n(WIe,"A",{href:!0});var W5t=s(rQ);Vtr=r(W5t,"FNetForQuestionAnswering"),W5t.forEach(t),Xtr=r(WIe," (FNet model)"),WIe.forEach(t),ztr=i(X),XF=n(X,"LI",{});var QIe=s(XF);V2e=n(QIe,"STRONG",{});var Q5t=s(V2e);Wtr=r(Q5t,"funnel"),Q5t.forEach(t),Qtr=r(QIe," \u2014 "),tQ=n(QIe,"A",{href:!0});var H5t=s(tQ);Htr=r(H5t,"FunnelForQuestionAnswering"),H5t.forEach(t),Utr=r(QIe," (Funnel Transformer model)"),QIe.forEach(t),Jtr=i(X),zF=n(X,"LI",{});var HIe=s(zF);X2e=n(HIe,"STRONG",{});var U5t=s(X2e);Ytr=r(U5t,"gptj"),U5t.forEach(t),Ktr=r(HIe," \u2014 "),aQ=n(HIe,"A",{href:!0});var J5t=s(aQ);Ztr=r(J5t,"GPTJForQuestionAnswering"),J5t.forEach(t),ear=r(HIe," (GPT-J model)"),HIe.forEach(t),oar=i(X),WF=n(X,"LI",{});var UIe=s(WF);z2e=n(UIe,"STRONG",{});var Y5t=s(z2e);rar=r(Y5t,"ibert"),Y5t.forEach(t),tar=r(UIe," \u2014 "),nQ=n(UIe,"A",{href:!0});var K5t=s(nQ);aar=r(K5t,"IBertForQuestionAnswering"),K5t.forEach(t),nar=r(UIe," (I-BERT model)"),UIe.forEach(t),sar=i(X),QF=n(X,"LI",{});var JIe=s(QF);W2e=n(JIe,"STRONG",{});var Z5t=s(W2e);lar=r(Z5t,"layoutlmv2"),Z5t.forEach(t),iar=r(JIe," \u2014 "),sQ=n(JIe,"A",{href:!0});var e0t=s(sQ);dar=r(e0t,"LayoutLMv2ForQuestionAnswering"),e0t.forEach(t),car=r(JIe," (LayoutLMv2 model)"),JIe.forEach(t),far=i(X),HF=n(X,"LI",{});var YIe=s(HF);Q2e=n(YIe,"STRONG",{});var o0t=s(Q2e);mar=r(o0t,"layoutlmv3"),o0t.forEach(t),gar=r(YIe," \u2014 "),lQ=n(YIe,"A",{href:!0});var r0t=s(lQ);har=r(r0t,"LayoutLMv3ForQuestionAnswering"),r0t.forEach(t),par=r(YIe," (LayoutLMv3 model)"),YIe.forEach(t),_ar=i(X),UF=n(X,"LI",{});var KIe=s(UF);H2e=n(KIe,"STRONG",{});var t0t=s(H2e);uar=r(t0t,"led"),t0t.forEach(t),bar=r(KIe," \u2014 "),iQ=n(KIe,"A",{href:!0});var a0t=s(iQ);Far=r(a0t,"LEDForQuestionAnswering"),a0t.forEach(t),Tar=r(KIe," (LED model)"),KIe.forEach(t),Mar=i(X),JF=n(X,"LI",{});var ZIe=s(JF);U2e=n(ZIe,"STRONG",{});var n0t=s(U2e);Ear=r(n0t,"longformer"),n0t.forEach(t),Car=r(ZIe," \u2014 "),dQ=n(ZIe,"A",{href:!0});var s0t=s(dQ);war=r(s0t,"LongformerForQuestionAnswering"),s0t.forEach(t),Aar=r(ZIe," (Longformer model)"),ZIe.forEach(t),Lar=i(X),YF=n(X,"LI",{});var eNe=s(YF);J2e=n(eNe,"STRONG",{});var l0t=s(J2e);yar=r(l0t,"lxmert"),l0t.forEach(t),xar=r(eNe," \u2014 "),cQ=n(eNe,"A",{href:!0});var i0t=s(cQ);$ar=r(i0t,"LxmertForQuestionAnswering"),i0t.forEach(t),kar=r(eNe," (LXMERT model)"),eNe.forEach(t),Sar=i(X),KF=n(X,"LI",{});var oNe=s(KF);Y2e=n(oNe,"STRONG",{});var d0t=s(Y2e);Rar=r(d0t,"mbart"),d0t.forEach(t),Par=r(oNe," \u2014 "),fQ=n(oNe,"A",{href:!0});var c0t=s(fQ);Bar=r(c0t,"MBartForQuestionAnswering"),c0t.forEach(t),Iar=r(oNe," (mBART model)"),oNe.forEach(t),Nar=i(X),ZF=n(X,"LI",{});var rNe=s(ZF);K2e=n(rNe,"STRONG",{});var f0t=s(K2e);qar=r(f0t,"megatron-bert"),f0t.forEach(t),jar=r(rNe," \u2014 "),mQ=n(rNe,"A",{href:!0});var m0t=s(mQ);Dar=r(m0t,"MegatronBertForQuestionAnswering"),m0t.forEach(t),Gar=r(rNe," (Megatron-BERT model)"),rNe.forEach(t),Oar=i(X),eT=n(X,"LI",{});var tNe=s(eT);Z2e=n(tNe,"STRONG",{});var g0t=s(Z2e);Var=r(g0t,"mobilebert"),g0t.forEach(t),Xar=r(tNe," \u2014 "),gQ=n(tNe,"A",{href:!0});var h0t=s(gQ);zar=r(h0t,"MobileBertForQuestionAnswering"),h0t.forEach(t),War=r(tNe," (MobileBERT model)"),tNe.forEach(t),Qar=i(X),oT=n(X,"LI",{});var aNe=s(oT);ebe=n(aNe,"STRONG",{});var p0t=s(ebe);Har=r(p0t,"mpnet"),p0t.forEach(t),Uar=r(aNe," \u2014 "),hQ=n(aNe,"A",{href:!0});var _0t=s(hQ);Jar=r(_0t,"MPNetForQuestionAnswering"),_0t.forEach(t),Yar=r(aNe," (MPNet model)"),aNe.forEach(t),Kar=i(X),rT=n(X,"LI",{});var nNe=s(rT);obe=n(nNe,"STRONG",{});var u0t=s(obe);Zar=r(u0t,"mvp"),u0t.forEach(t),enr=r(nNe," \u2014 "),pQ=n(nNe,"A",{href:!0});var b0t=s(pQ);onr=r(b0t,"MvpForQuestionAnswering"),b0t.forEach(t),rnr=r(nNe," (MVP model)"),nNe.forEach(t),tnr=i(X),tT=n(X,"LI",{});var sNe=s(tT);rbe=n(sNe,"STRONG",{});var v0t=s(rbe);anr=r(v0t,"nezha"),v0t.forEach(t),nnr=r(sNe," \u2014 "),_Q=n(sNe,"A",{href:!0});var F0t=s(_Q);snr=r(F0t,"NezhaForQuestionAnswering"),F0t.forEach(t),lnr=r(sNe," (Nezha model)"),sNe.forEach(t),inr=i(X),aT=n(X,"LI",{});var lNe=s(aT);tbe=n(lNe,"STRONG",{});var T0t=s(tbe);dnr=r(T0t,"nystromformer"),T0t.forEach(t),cnr=r(lNe," \u2014 "),uQ=n(lNe,"A",{href:!0});var M0t=s(uQ);fnr=r(M0t,"NystromformerForQuestionAnswering"),M0t.forEach(t),mnr=r(lNe," (Nystr\xF6mformer model)"),lNe.forEach(t),gnr=i(X),nT=n(X,"LI",{});var iNe=s(nT);abe=n(iNe,"STRONG",{});var E0t=s(abe);hnr=r(E0t,"qdqbert"),E0t.forEach(t),pnr=r(iNe," \u2014 "),bQ=n(iNe,"A",{href:!0});var C0t=s(bQ);_nr=r(C0t,"QDQBertForQuestionAnswering"),C0t.forEach(t),unr=r(iNe," (QDQBert model)"),iNe.forEach(t),bnr=i(X),sT=n(X,"LI",{});var dNe=s(sT);nbe=n(dNe,"STRONG",{});var w0t=s(nbe);vnr=r(w0t,"reformer"),w0t.forEach(t),Fnr=r(dNe," \u2014 "),vQ=n(dNe,"A",{href:!0});var A0t=s(vQ);Tnr=r(A0t,"ReformerForQuestionAnswering"),A0t.forEach(t),Mnr=r(dNe," (Reformer model)"),dNe.forEach(t),Enr=i(X),lT=n(X,"LI",{});var cNe=s(lT);sbe=n(cNe,"STRONG",{});var L0t=s(sbe);Cnr=r(L0t,"rembert"),L0t.forEach(t),wnr=r(cNe," \u2014 "),FQ=n(cNe,"A",{href:!0});var y0t=s(FQ);Anr=r(y0t,"RemBertForQuestionAnswering"),y0t.forEach(t),Lnr=r(cNe," (RemBERT model)"),cNe.forEach(t),ynr=i(X),iT=n(X,"LI",{});var fNe=s(iT);lbe=n(fNe,"STRONG",{});var x0t=s(lbe);xnr=r(x0t,"roberta"),x0t.forEach(t),$nr=r(fNe," \u2014 "),TQ=n(fNe,"A",{href:!0});var $0t=s(TQ);knr=r($0t,"RobertaForQuestionAnswering"),$0t.forEach(t),Snr=r(fNe," (RoBERTa model)"),fNe.forEach(t),Rnr=i(X),dT=n(X,"LI",{});var mNe=s(dT);ibe=n(mNe,"STRONG",{});var k0t=s(ibe);Pnr=r(k0t,"roformer"),k0t.forEach(t),Bnr=r(mNe," \u2014 "),MQ=n(mNe,"A",{href:!0});var S0t=s(MQ);Inr=r(S0t,"RoFormerForQuestionAnswering"),S0t.forEach(t),Nnr=r(mNe," (RoFormer model)"),mNe.forEach(t),qnr=i(X),cT=n(X,"LI",{});var gNe=s(cT);dbe=n(gNe,"STRONG",{});var R0t=s(dbe);jnr=r(R0t,"splinter"),R0t.forEach(t),Dnr=r(gNe," \u2014 "),EQ=n(gNe,"A",{href:!0});var P0t=s(EQ);Gnr=r(P0t,"SplinterForQuestionAnswering"),P0t.forEach(t),Onr=r(gNe," (Splinter model)"),gNe.forEach(t),Vnr=i(X),fT=n(X,"LI",{});var hNe=s(fT);cbe=n(hNe,"STRONG",{});var B0t=s(cbe);Xnr=r(B0t,"squeezebert"),B0t.forEach(t),znr=r(hNe," \u2014 "),CQ=n(hNe,"A",{href:!0});var I0t=s(CQ);Wnr=r(I0t,"SqueezeBertForQuestionAnswering"),I0t.forEach(t),Qnr=r(hNe," (SqueezeBERT model)"),hNe.forEach(t),Hnr=i(X),mT=n(X,"LI",{});var pNe=s(mT);fbe=n(pNe,"STRONG",{});var N0t=s(fbe);Unr=r(N0t,"xlm"),N0t.forEach(t),Jnr=r(pNe," \u2014 "),wQ=n(pNe,"A",{href:!0});var q0t=s(wQ);Ynr=r(q0t,"XLMForQuestionAnsweringSimple"),q0t.forEach(t),Knr=r(pNe," (XLM model)"),pNe.forEach(t),Znr=i(X),gT=n(X,"LI",{});var _Ne=s(gT);mbe=n(_Ne,"STRONG",{});var j0t=s(mbe);esr=r(j0t,"xlm-roberta"),j0t.forEach(t),osr=r(_Ne," \u2014 "),AQ=n(_Ne,"A",{href:!0});var D0t=s(AQ);rsr=r(D0t,"XLMRobertaForQuestionAnswering"),D0t.forEach(t),tsr=r(_Ne," (XLM-RoBERTa model)"),_Ne.forEach(t),asr=i(X),hT=n(X,"LI",{});var uNe=s(hT);gbe=n(uNe,"STRONG",{});var G0t=s(gbe);nsr=r(G0t,"xlm-roberta-xl"),G0t.forEach(t),ssr=r(uNe," \u2014 "),LQ=n(uNe,"A",{href:!0});var O0t=s(LQ);lsr=r(O0t,"XLMRobertaXLForQuestionAnswering"),O0t.forEach(t),isr=r(uNe," (XLM-RoBERTa-XL model)"),uNe.forEach(t),dsr=i(X),pT=n(X,"LI",{});var bNe=s(pT);hbe=n(bNe,"STRONG",{});var V0t=s(hbe);csr=r(V0t,"xlnet"),V0t.forEach(t),fsr=r(bNe," \u2014 "),yQ=n(bNe,"A",{href:!0});var X0t=s(yQ);msr=r(X0t,"XLNetForQuestionAnsweringSimple"),X0t.forEach(t),gsr=r(bNe," (XLNet model)"),bNe.forEach(t),hsr=i(X),_T=n(X,"LI",{});var vNe=s(_T);pbe=n(vNe,"STRONG",{});var z0t=s(pbe);psr=r(z0t,"yoso"),z0t.forEach(t),_sr=r(vNe," \u2014 "),xQ=n(vNe,"A",{href:!0});var W0t=s(xQ);usr=r(W0t,"YosoForQuestionAnswering"),W0t.forEach(t),bsr=r(vNe," (YOSO model)"),vNe.forEach(t),X.forEach(t),vsr=i(ua),uT=n(ua,"P",{});var FNe=s(uT);Fsr=r(FNe,"The model is set in evaluation mode by default using "),_be=n(FNe,"CODE",{});var Q0t=s(_be);Tsr=r(Q0t,"model.eval()"),Q0t.forEach(t),Msr=r(FNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ube=n(FNe,"CODE",{});var H0t=s(ube);Esr=r(H0t,"model.train()"),H0t.forEach(t),FNe.forEach(t),Csr=i(ua),T(bT.$$.fragment,ua),ua.forEach(t),gl.forEach(t),hze=i(f),vd=n(f,"H2",{class:!0});var FQe=s(vd);vT=n(FQe,"A",{id:!0,class:!0,href:!0});var U0t=s(vT);bbe=n(U0t,"SPAN",{});var J0t=s(bbe);T(BL.$$.fragment,J0t),J0t.forEach(t),U0t.forEach(t),wsr=i(FQe),vbe=n(FQe,"SPAN",{});var Y0t=s(vbe);Asr=r(Y0t,"AutoModelForTableQuestionAnswering"),Y0t.forEach(t),FQe.forEach(t),pze=i(f),Go=n(f,"DIV",{class:!0});var hl=s(Go);T(IL.$$.fragment,hl),Lsr=i(hl),Fd=n(hl,"P",{});var Fte=s(Fd);ysr=r(Fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),$Q=n(Fte,"A",{href:!0});var K0t=s($Q);xsr=r(K0t,"from_pretrained()"),K0t.forEach(t),$sr=r(Fte," class method or the "),kQ=n(Fte,"A",{href:!0});var Z0t=s(kQ);ksr=r(Z0t,"from_config()"),Z0t.forEach(t),Ssr=r(Fte,` class
method.`),Fte.forEach(t),Rsr=i(hl),NL=n(hl,"P",{});var TQe=s(NL);Psr=r(TQe,"This class cannot be instantiated directly using "),Fbe=n(TQe,"CODE",{});var ewt=s(Fbe);Bsr=r(ewt,"__init__()"),ewt.forEach(t),Isr=r(TQe," (throws an error)."),TQe.forEach(t),Nsr=i(hl),bt=n(hl,"DIV",{class:!0});var Nw=s(bt);T(qL.$$.fragment,Nw),qsr=i(Nw),Tbe=n(Nw,"P",{});var owt=s(Tbe);jsr=r(owt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),owt.forEach(t),Dsr=i(Nw),Td=n(Nw,"P",{});var Tte=s(Td);Gsr=r(Tte,`Note:
Loading a model from its configuration file does `),Mbe=n(Tte,"STRONG",{});var rwt=s(Mbe);Osr=r(rwt,"not"),rwt.forEach(t),Vsr=r(Tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=n(Tte,"A",{href:!0});var twt=s(SQ);Xsr=r(twt,"from_pretrained()"),twt.forEach(t),zsr=r(Tte," to load the model weights."),Tte.forEach(t),Wsr=i(Nw),T(FT.$$.fragment,Nw),Nw.forEach(t),Qsr=i(hl),lo=n(hl,"DIV",{class:!0});var ba=s(lo);T(jL.$$.fragment,ba),Hsr=i(ba),Ebe=n(ba,"P",{});var awt=s(Ebe);Usr=r(awt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),awt.forEach(t),Jsr=i(ba),Wa=n(ba,"P",{});var qw=s(Wa);Ysr=r(qw,"The model class to instantiate is selected based on the "),Cbe=n(qw,"CODE",{});var nwt=s(Cbe);Ksr=r(nwt,"model_type"),nwt.forEach(t),Zsr=r(qw,` property of the config object (either
passed as an argument or loaded from `),wbe=n(qw,"CODE",{});var swt=s(wbe);elr=r(swt,"pretrained_model_name_or_path"),swt.forEach(t),olr=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Abe=n(qw,"CODE",{});var lwt=s(Abe);rlr=r(lwt,"pretrained_model_name_or_path"),lwt.forEach(t),tlr=r(qw,":"),qw.forEach(t),alr=i(ba),Lbe=n(ba,"UL",{});var iwt=s(Lbe);TT=n(iwt,"LI",{});var TNe=s(TT);ybe=n(TNe,"STRONG",{});var dwt=s(ybe);nlr=r(dwt,"tapas"),dwt.forEach(t),slr=r(TNe," \u2014 "),RQ=n(TNe,"A",{href:!0});var cwt=s(RQ);llr=r(cwt,"TapasForQuestionAnswering"),cwt.forEach(t),ilr=r(TNe," (TAPAS model)"),TNe.forEach(t),iwt.forEach(t),dlr=i(ba),MT=n(ba,"P",{});var MNe=s(MT);clr=r(MNe,"The model is set in evaluation mode by default using "),xbe=n(MNe,"CODE",{});var fwt=s(xbe);flr=r(fwt,"model.eval()"),fwt.forEach(t),mlr=r(MNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$be=n(MNe,"CODE",{});var mwt=s($be);glr=r(mwt,"model.train()"),mwt.forEach(t),MNe.forEach(t),hlr=i(ba),T(ET.$$.fragment,ba),ba.forEach(t),hl.forEach(t),_ze=i(f),Md=n(f,"H2",{class:!0});var MQe=s(Md);CT=n(MQe,"A",{id:!0,class:!0,href:!0});var gwt=s(CT);kbe=n(gwt,"SPAN",{});var hwt=s(kbe);T(DL.$$.fragment,hwt),hwt.forEach(t),gwt.forEach(t),plr=i(MQe),Sbe=n(MQe,"SPAN",{});var pwt=s(Sbe);_lr=r(pwt,"AutoModelForImageClassification"),pwt.forEach(t),MQe.forEach(t),uze=i(f),Oo=n(f,"DIV",{class:!0});var pl=s(Oo);T(GL.$$.fragment,pl),ulr=i(pl),Ed=n(pl,"P",{});var Mte=s(Ed);blr=r(Mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),PQ=n(Mte,"A",{href:!0});var _wt=s(PQ);vlr=r(_wt,"from_pretrained()"),_wt.forEach(t),Flr=r(Mte," class method or the "),BQ=n(Mte,"A",{href:!0});var uwt=s(BQ);Tlr=r(uwt,"from_config()"),uwt.forEach(t),Mlr=r(Mte,` class
method.`),Mte.forEach(t),Elr=i(pl),OL=n(pl,"P",{});var EQe=s(OL);Clr=r(EQe,"This class cannot be instantiated directly using "),Rbe=n(EQe,"CODE",{});var bwt=s(Rbe);wlr=r(bwt,"__init__()"),bwt.forEach(t),Alr=r(EQe," (throws an error)."),EQe.forEach(t),Llr=i(pl),vt=n(pl,"DIV",{class:!0});var jw=s(vt);T(VL.$$.fragment,jw),ylr=i(jw),Pbe=n(jw,"P",{});var vwt=s(Pbe);xlr=r(vwt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),vwt.forEach(t),$lr=i(jw),Cd=n(jw,"P",{});var Ete=s(Cd);klr=r(Ete,`Note:
Loading a model from its configuration file does `),Bbe=n(Ete,"STRONG",{});var Fwt=s(Bbe);Slr=r(Fwt,"not"),Fwt.forEach(t),Rlr=r(Ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=n(Ete,"A",{href:!0});var Twt=s(IQ);Plr=r(Twt,"from_pretrained()"),Twt.forEach(t),Blr=r(Ete," to load the model weights."),Ete.forEach(t),Ilr=i(jw),T(wT.$$.fragment,jw),jw.forEach(t),Nlr=i(pl),io=n(pl,"DIV",{class:!0});var va=s(io);T(XL.$$.fragment,va),qlr=i(va),Ibe=n(va,"P",{});var Mwt=s(Ibe);jlr=r(Mwt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Mwt.forEach(t),Dlr=i(va),Qa=n(va,"P",{});var Dw=s(Qa);Glr=r(Dw,"The model class to instantiate is selected based on the "),Nbe=n(Dw,"CODE",{});var Ewt=s(Nbe);Olr=r(Ewt,"model_type"),Ewt.forEach(t),Vlr=r(Dw,` property of the config object (either
passed as an argument or loaded from `),qbe=n(Dw,"CODE",{});var Cwt=s(qbe);Xlr=r(Cwt,"pretrained_model_name_or_path"),Cwt.forEach(t),zlr=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jbe=n(Dw,"CODE",{});var wwt=s(jbe);Wlr=r(wwt,"pretrained_model_name_or_path"),wwt.forEach(t),Qlr=r(Dw,":"),Dw.forEach(t),Hlr=i(va),ve=n(va,"UL",{});var Te=s(ve);AT=n(Te,"LI",{});var ENe=s(AT);Dbe=n(ENe,"STRONG",{});var Awt=s(Dbe);Ulr=r(Awt,"beit"),Awt.forEach(t),Jlr=r(ENe," \u2014 "),NQ=n(ENe,"A",{href:!0});var Lwt=s(NQ);Ylr=r(Lwt,"BeitForImageClassification"),Lwt.forEach(t),Klr=r(ENe," (BEiT model)"),ENe.forEach(t),Zlr=i(Te),LT=n(Te,"LI",{});var CNe=s(LT);Gbe=n(CNe,"STRONG",{});var ywt=s(Gbe);eir=r(ywt,"convnext"),ywt.forEach(t),oir=r(CNe," \u2014 "),qQ=n(CNe,"A",{href:!0});var xwt=s(qQ);rir=r(xwt,"ConvNextForImageClassification"),xwt.forEach(t),tir=r(CNe," (ConvNeXT model)"),CNe.forEach(t),air=i(Te),yT=n(Te,"LI",{});var wNe=s(yT);Obe=n(wNe,"STRONG",{});var $wt=s(Obe);nir=r($wt,"cvt"),$wt.forEach(t),sir=r(wNe," \u2014 "),jQ=n(wNe,"A",{href:!0});var kwt=s(jQ);lir=r(kwt,"CvtForImageClassification"),kwt.forEach(t),iir=r(wNe," (CvT model)"),wNe.forEach(t),dir=i(Te),xT=n(Te,"LI",{});var ANe=s(xT);Vbe=n(ANe,"STRONG",{});var Swt=s(Vbe);cir=r(Swt,"data2vec-vision"),Swt.forEach(t),fir=r(ANe," \u2014 "),DQ=n(ANe,"A",{href:!0});var Rwt=s(DQ);mir=r(Rwt,"Data2VecVisionForImageClassification"),Rwt.forEach(t),gir=r(ANe," (Data2VecVision model)"),ANe.forEach(t),hir=i(Te),Js=n(Te,"LI",{});var OS=s(Js);Xbe=n(OS,"STRONG",{});var Pwt=s(Xbe);pir=r(Pwt,"deit"),Pwt.forEach(t),_ir=r(OS," \u2014 "),GQ=n(OS,"A",{href:!0});var Bwt=s(GQ);uir=r(Bwt,"DeiTForImageClassification"),Bwt.forEach(t),bir=r(OS," or "),OQ=n(OS,"A",{href:!0});var Iwt=s(OQ);vir=r(Iwt,"DeiTForImageClassificationWithTeacher"),Iwt.forEach(t),Fir=r(OS," (DeiT model)"),OS.forEach(t),Tir=i(Te),$T=n(Te,"LI",{});var LNe=s($T);zbe=n(LNe,"STRONG",{});var Nwt=s(zbe);Mir=r(Nwt,"imagegpt"),Nwt.forEach(t),Eir=r(LNe," \u2014 "),VQ=n(LNe,"A",{href:!0});var qwt=s(VQ);Cir=r(qwt,"ImageGPTForImageClassification"),qwt.forEach(t),wir=r(LNe," (ImageGPT model)"),LNe.forEach(t),Air=i(Te),Ys=n(Te,"LI",{});var VS=s(Ys);Wbe=n(VS,"STRONG",{});var jwt=s(Wbe);Lir=r(jwt,"levit"),jwt.forEach(t),yir=r(VS," \u2014 "),XQ=n(VS,"A",{href:!0});var Dwt=s(XQ);xir=r(Dwt,"LevitForImageClassification"),Dwt.forEach(t),$ir=r(VS," or "),zQ=n(VS,"A",{href:!0});var Gwt=s(zQ);kir=r(Gwt,"LevitForImageClassificationWithTeacher"),Gwt.forEach(t),Sir=r(VS," (LeViT model)"),VS.forEach(t),Rir=i(Te),kT=n(Te,"LI",{});var yNe=s(kT);Qbe=n(yNe,"STRONG",{});var Owt=s(Qbe);Pir=r(Owt,"mobilevit"),Owt.forEach(t),Bir=r(yNe," \u2014 "),WQ=n(yNe,"A",{href:!0});var Vwt=s(WQ);Iir=r(Vwt,"MobileViTForImageClassification"),Vwt.forEach(t),Nir=r(yNe," (MobileViT model)"),yNe.forEach(t),qir=i(Te),Ft=n(Te,"LI",{});var Bf=s(Ft);Hbe=n(Bf,"STRONG",{});var Xwt=s(Hbe);jir=r(Xwt,"perceiver"),Xwt.forEach(t),Dir=r(Bf," \u2014 "),QQ=n(Bf,"A",{href:!0});var zwt=s(QQ);Gir=r(zwt,"PerceiverForImageClassificationLearned"),zwt.forEach(t),Oir=r(Bf," or "),HQ=n(Bf,"A",{href:!0});var Wwt=s(HQ);Vir=r(Wwt,"PerceiverForImageClassificationFourier"),Wwt.forEach(t),Xir=r(Bf," or "),UQ=n(Bf,"A",{href:!0});var Qwt=s(UQ);zir=r(Qwt,"PerceiverForImageClassificationConvProcessing"),Qwt.forEach(t),Wir=r(Bf," (Perceiver model)"),Bf.forEach(t),Qir=i(Te),ST=n(Te,"LI",{});var xNe=s(ST);Ube=n(xNe,"STRONG",{});var Hwt=s(Ube);Hir=r(Hwt,"poolformer"),Hwt.forEach(t),Uir=r(xNe," \u2014 "),JQ=n(xNe,"A",{href:!0});var Uwt=s(JQ);Jir=r(Uwt,"PoolFormerForImageClassification"),Uwt.forEach(t),Yir=r(xNe," (PoolFormer model)"),xNe.forEach(t),Kir=i(Te),RT=n(Te,"LI",{});var $Ne=s(RT);Jbe=n($Ne,"STRONG",{});var Jwt=s(Jbe);Zir=r(Jwt,"regnet"),Jwt.forEach(t),edr=r($Ne," \u2014 "),YQ=n($Ne,"A",{href:!0});var Ywt=s(YQ);odr=r(Ywt,"RegNetForImageClassification"),Ywt.forEach(t),rdr=r($Ne," (RegNet model)"),$Ne.forEach(t),tdr=i(Te),PT=n(Te,"LI",{});var kNe=s(PT);Ybe=n(kNe,"STRONG",{});var Kwt=s(Ybe);adr=r(Kwt,"resnet"),Kwt.forEach(t),ndr=r(kNe," \u2014 "),KQ=n(kNe,"A",{href:!0});var Zwt=s(KQ);sdr=r(Zwt,"ResNetForImageClassification"),Zwt.forEach(t),ldr=r(kNe," (ResNet model)"),kNe.forEach(t),idr=i(Te),BT=n(Te,"LI",{});var SNe=s(BT);Kbe=n(SNe,"STRONG",{});var eAt=s(Kbe);ddr=r(eAt,"segformer"),eAt.forEach(t),cdr=r(SNe," \u2014 "),ZQ=n(SNe,"A",{href:!0});var oAt=s(ZQ);fdr=r(oAt,"SegformerForImageClassification"),oAt.forEach(t),mdr=r(SNe," (SegFormer model)"),SNe.forEach(t),gdr=i(Te),IT=n(Te,"LI",{});var RNe=s(IT);Zbe=n(RNe,"STRONG",{});var rAt=s(Zbe);hdr=r(rAt,"swin"),rAt.forEach(t),pdr=r(RNe," \u2014 "),eH=n(RNe,"A",{href:!0});var tAt=s(eH);_dr=r(tAt,"SwinForImageClassification"),tAt.forEach(t),udr=r(RNe," (Swin Transformer model)"),RNe.forEach(t),bdr=i(Te),NT=n(Te,"LI",{});var PNe=s(NT);e3e=n(PNe,"STRONG",{});var aAt=s(e3e);vdr=r(aAt,"van"),aAt.forEach(t),Fdr=r(PNe," \u2014 "),oH=n(PNe,"A",{href:!0});var nAt=s(oH);Tdr=r(nAt,"VanForImageClassification"),nAt.forEach(t),Mdr=r(PNe," (VAN model)"),PNe.forEach(t),Edr=i(Te),qT=n(Te,"LI",{});var BNe=s(qT);o3e=n(BNe,"STRONG",{});var sAt=s(o3e);Cdr=r(sAt,"vit"),sAt.forEach(t),wdr=r(BNe," \u2014 "),rH=n(BNe,"A",{href:!0});var lAt=s(rH);Adr=r(lAt,"ViTForImageClassification"),lAt.forEach(t),Ldr=r(BNe," (ViT model)"),BNe.forEach(t),Te.forEach(t),ydr=i(va),jT=n(va,"P",{});var INe=s(jT);xdr=r(INe,"The model is set in evaluation mode by default using "),r3e=n(INe,"CODE",{});var iAt=s(r3e);$dr=r(iAt,"model.eval()"),iAt.forEach(t),kdr=r(INe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t3e=n(INe,"CODE",{});var dAt=s(t3e);Sdr=r(dAt,"model.train()"),dAt.forEach(t),INe.forEach(t),Rdr=i(va),T(DT.$$.fragment,va),va.forEach(t),pl.forEach(t),bze=i(f),wd=n(f,"H2",{class:!0});var CQe=s(wd);GT=n(CQe,"A",{id:!0,class:!0,href:!0});var cAt=s(GT);a3e=n(cAt,"SPAN",{});var fAt=s(a3e);T(zL.$$.fragment,fAt),fAt.forEach(t),cAt.forEach(t),Pdr=i(CQe),n3e=n(CQe,"SPAN",{});var mAt=s(n3e);Bdr=r(mAt,"AutoModelForVision2Seq"),mAt.forEach(t),CQe.forEach(t),vze=i(f),Vo=n(f,"DIV",{class:!0});var _l=s(Vo);T(WL.$$.fragment,_l),Idr=i(_l),Ad=n(_l,"P",{});var Cte=s(Ad);Ndr=r(Cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),tH=n(Cte,"A",{href:!0});var gAt=s(tH);qdr=r(gAt,"from_pretrained()"),gAt.forEach(t),jdr=r(Cte," class method or the "),aH=n(Cte,"A",{href:!0});var hAt=s(aH);Ddr=r(hAt,"from_config()"),hAt.forEach(t),Gdr=r(Cte,` class
method.`),Cte.forEach(t),Odr=i(_l),QL=n(_l,"P",{});var wQe=s(QL);Vdr=r(wQe,"This class cannot be instantiated directly using "),s3e=n(wQe,"CODE",{});var pAt=s(s3e);Xdr=r(pAt,"__init__()"),pAt.forEach(t),zdr=r(wQe," (throws an error)."),wQe.forEach(t),Wdr=i(_l),Tt=n(_l,"DIV",{class:!0});var Gw=s(Tt);T(HL.$$.fragment,Gw),Qdr=i(Gw),l3e=n(Gw,"P",{});var _At=s(l3e);Hdr=r(_At,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),_At.forEach(t),Udr=i(Gw),Ld=n(Gw,"P",{});var wte=s(Ld);Jdr=r(wte,`Note:
Loading a model from its configuration file does `),i3e=n(wte,"STRONG",{});var uAt=s(i3e);Ydr=r(uAt,"not"),uAt.forEach(t),Kdr=r(wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),nH=n(wte,"A",{href:!0});var bAt=s(nH);Zdr=r(bAt,"from_pretrained()"),bAt.forEach(t),ecr=r(wte," to load the model weights."),wte.forEach(t),ocr=i(Gw),T(OT.$$.fragment,Gw),Gw.forEach(t),rcr=i(_l),co=n(_l,"DIV",{class:!0});var Fa=s(co);T(UL.$$.fragment,Fa),tcr=i(Fa),d3e=n(Fa,"P",{});var vAt=s(d3e);acr=r(vAt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),vAt.forEach(t),ncr=i(Fa),Ha=n(Fa,"P",{});var Ow=s(Ha);scr=r(Ow,"The model class to instantiate is selected based on the "),c3e=n(Ow,"CODE",{});var FAt=s(c3e);lcr=r(FAt,"model_type"),FAt.forEach(t),icr=r(Ow,` property of the config object (either
passed as an argument or loaded from `),f3e=n(Ow,"CODE",{});var TAt=s(f3e);dcr=r(TAt,"pretrained_model_name_or_path"),TAt.forEach(t),ccr=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m3e=n(Ow,"CODE",{});var MAt=s(m3e);fcr=r(MAt,"pretrained_model_name_or_path"),MAt.forEach(t),mcr=r(Ow,":"),Ow.forEach(t),gcr=i(Fa),g3e=n(Fa,"UL",{});var EAt=s(g3e);VT=n(EAt,"LI",{});var NNe=s(VT);h3e=n(NNe,"STRONG",{});var CAt=s(h3e);hcr=r(CAt,"vision-encoder-decoder"),CAt.forEach(t),pcr=r(NNe," \u2014 "),sH=n(NNe,"A",{href:!0});var wAt=s(sH);_cr=r(wAt,"VisionEncoderDecoderModel"),wAt.forEach(t),ucr=r(NNe," (Vision Encoder decoder model)"),NNe.forEach(t),EAt.forEach(t),bcr=i(Fa),XT=n(Fa,"P",{});var qNe=s(XT);vcr=r(qNe,"The model is set in evaluation mode by default using "),p3e=n(qNe,"CODE",{});var AAt=s(p3e);Fcr=r(AAt,"model.eval()"),AAt.forEach(t),Tcr=r(qNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_3e=n(qNe,"CODE",{});var LAt=s(_3e);Mcr=r(LAt,"model.train()"),LAt.forEach(t),qNe.forEach(t),Ecr=i(Fa),T(zT.$$.fragment,Fa),Fa.forEach(t),_l.forEach(t),Fze=i(f),yd=n(f,"H2",{class:!0});var AQe=s(yd);WT=n(AQe,"A",{id:!0,class:!0,href:!0});var yAt=s(WT);u3e=n(yAt,"SPAN",{});var xAt=s(u3e);T(JL.$$.fragment,xAt),xAt.forEach(t),yAt.forEach(t),Ccr=i(AQe),b3e=n(AQe,"SPAN",{});var $At=s(b3e);wcr=r($At,"AutoModelForVisualQuestionAnswering"),$At.forEach(t),AQe.forEach(t),Tze=i(f),Xo=n(f,"DIV",{class:!0});var ul=s(Xo);T(YL.$$.fragment,ul),Acr=i(ul),xd=n(ul,"P",{});var Ate=s(xd);Lcr=r(Ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),lH=n(Ate,"A",{href:!0});var kAt=s(lH);ycr=r(kAt,"from_pretrained()"),kAt.forEach(t),xcr=r(Ate," class method or the "),iH=n(Ate,"A",{href:!0});var SAt=s(iH);$cr=r(SAt,"from_config()"),SAt.forEach(t),kcr=r(Ate,` class
method.`),Ate.forEach(t),Scr=i(ul),KL=n(ul,"P",{});var LQe=s(KL);Rcr=r(LQe,"This class cannot be instantiated directly using "),v3e=n(LQe,"CODE",{});var RAt=s(v3e);Pcr=r(RAt,"__init__()"),RAt.forEach(t),Bcr=r(LQe," (throws an error)."),LQe.forEach(t),Icr=i(ul),Mt=n(ul,"DIV",{class:!0});var Vw=s(Mt);T(ZL.$$.fragment,Vw),Ncr=i(Vw),F3e=n(Vw,"P",{});var PAt=s(F3e);qcr=r(PAt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),PAt.forEach(t),jcr=i(Vw),$d=n(Vw,"P",{});var Lte=s($d);Dcr=r(Lte,`Note:
Loading a model from its configuration file does `),T3e=n(Lte,"STRONG",{});var BAt=s(T3e);Gcr=r(BAt,"not"),BAt.forEach(t),Ocr=r(Lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),dH=n(Lte,"A",{href:!0});var IAt=s(dH);Vcr=r(IAt,"from_pretrained()"),IAt.forEach(t),Xcr=r(Lte," to load the model weights."),Lte.forEach(t),zcr=i(Vw),T(QT.$$.fragment,Vw),Vw.forEach(t),Wcr=i(ul),fo=n(ul,"DIV",{class:!0});var Ta=s(fo);T(ey.$$.fragment,Ta),Qcr=i(Ta),M3e=n(Ta,"P",{});var NAt=s(M3e);Hcr=r(NAt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),NAt.forEach(t),Ucr=i(Ta),Ua=n(Ta,"P",{});var Xw=s(Ua);Jcr=r(Xw,"The model class to instantiate is selected based on the "),E3e=n(Xw,"CODE",{});var qAt=s(E3e);Ycr=r(qAt,"model_type"),qAt.forEach(t),Kcr=r(Xw,` property of the config object (either
passed as an argument or loaded from `),C3e=n(Xw,"CODE",{});var jAt=s(C3e);Zcr=r(jAt,"pretrained_model_name_or_path"),jAt.forEach(t),efr=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w3e=n(Xw,"CODE",{});var DAt=s(w3e);ofr=r(DAt,"pretrained_model_name_or_path"),DAt.forEach(t),rfr=r(Xw,":"),Xw.forEach(t),tfr=i(Ta),A3e=n(Ta,"UL",{});var GAt=s(A3e);HT=n(GAt,"LI",{});var jNe=s(HT);L3e=n(jNe,"STRONG",{});var OAt=s(L3e);afr=r(OAt,"vilt"),OAt.forEach(t),nfr=r(jNe," \u2014 "),cH=n(jNe,"A",{href:!0});var VAt=s(cH);sfr=r(VAt,"ViltForQuestionAnswering"),VAt.forEach(t),lfr=r(jNe," (ViLT model)"),jNe.forEach(t),GAt.forEach(t),ifr=i(Ta),UT=n(Ta,"P",{});var DNe=s(UT);dfr=r(DNe,"The model is set in evaluation mode by default using "),y3e=n(DNe,"CODE",{});var XAt=s(y3e);cfr=r(XAt,"model.eval()"),XAt.forEach(t),ffr=r(DNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x3e=n(DNe,"CODE",{});var zAt=s(x3e);mfr=r(zAt,"model.train()"),zAt.forEach(t),DNe.forEach(t),gfr=i(Ta),T(JT.$$.fragment,Ta),Ta.forEach(t),ul.forEach(t),Mze=i(f),kd=n(f,"H2",{class:!0});var yQe=s(kd);YT=n(yQe,"A",{id:!0,class:!0,href:!0});var WAt=s(YT);$3e=n(WAt,"SPAN",{});var QAt=s($3e);T(oy.$$.fragment,QAt),QAt.forEach(t),WAt.forEach(t),hfr=i(yQe),k3e=n(yQe,"SPAN",{});var HAt=s(k3e);pfr=r(HAt,"AutoModelForAudioClassification"),HAt.forEach(t),yQe.forEach(t),Eze=i(f),zo=n(f,"DIV",{class:!0});var bl=s(zo);T(ry.$$.fragment,bl),_fr=i(bl),Sd=n(bl,"P",{});var yte=s(Sd);ufr=r(yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),fH=n(yte,"A",{href:!0});var UAt=s(fH);bfr=r(UAt,"from_pretrained()"),UAt.forEach(t),vfr=r(yte," class method or the "),mH=n(yte,"A",{href:!0});var JAt=s(mH);Ffr=r(JAt,"from_config()"),JAt.forEach(t),Tfr=r(yte,` class
method.`),yte.forEach(t),Mfr=i(bl),ty=n(bl,"P",{});var xQe=s(ty);Efr=r(xQe,"This class cannot be instantiated directly using "),S3e=n(xQe,"CODE",{});var YAt=s(S3e);Cfr=r(YAt,"__init__()"),YAt.forEach(t),wfr=r(xQe," (throws an error)."),xQe.forEach(t),Afr=i(bl),Et=n(bl,"DIV",{class:!0});var zw=s(Et);T(ay.$$.fragment,zw),Lfr=i(zw),R3e=n(zw,"P",{});var KAt=s(R3e);yfr=r(KAt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),KAt.forEach(t),xfr=i(zw),Rd=n(zw,"P",{});var xte=s(Rd);$fr=r(xte,`Note:
Loading a model from its configuration file does `),P3e=n(xte,"STRONG",{});var ZAt=s(P3e);kfr=r(ZAt,"not"),ZAt.forEach(t),Sfr=r(xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),gH=n(xte,"A",{href:!0});var e6t=s(gH);Rfr=r(e6t,"from_pretrained()"),e6t.forEach(t),Pfr=r(xte," to load the model weights."),xte.forEach(t),Bfr=i(zw),T(KT.$$.fragment,zw),zw.forEach(t),Ifr=i(bl),mo=n(bl,"DIV",{class:!0});var Ma=s(mo);T(ny.$$.fragment,Ma),Nfr=i(Ma),B3e=n(Ma,"P",{});var o6t=s(B3e);qfr=r(o6t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),o6t.forEach(t),jfr=i(Ma),Ja=n(Ma,"P",{});var Ww=s(Ja);Dfr=r(Ww,"The model class to instantiate is selected based on the "),I3e=n(Ww,"CODE",{});var r6t=s(I3e);Gfr=r(r6t,"model_type"),r6t.forEach(t),Ofr=r(Ww,` property of the config object (either
passed as an argument or loaded from `),N3e=n(Ww,"CODE",{});var t6t=s(N3e);Vfr=r(t6t,"pretrained_model_name_or_path"),t6t.forEach(t),Xfr=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q3e=n(Ww,"CODE",{});var a6t=s(q3e);zfr=r(a6t,"pretrained_model_name_or_path"),a6t.forEach(t),Wfr=r(Ww,":"),Ww.forEach(t),Qfr=i(Ma),Pe=n(Ma,"UL",{});var ze=s(Pe);ZT=n(ze,"LI",{});var GNe=s(ZT);j3e=n(GNe,"STRONG",{});var n6t=s(j3e);Hfr=r(n6t,"data2vec-audio"),n6t.forEach(t),Ufr=r(GNe," \u2014 "),hH=n(GNe,"A",{href:!0});var s6t=s(hH);Jfr=r(s6t,"Data2VecAudioForSequenceClassification"),s6t.forEach(t),Yfr=r(GNe," (Data2VecAudio model)"),GNe.forEach(t),Kfr=i(ze),e7=n(ze,"LI",{});var ONe=s(e7);D3e=n(ONe,"STRONG",{});var l6t=s(D3e);Zfr=r(l6t,"hubert"),l6t.forEach(t),emr=r(ONe," \u2014 "),pH=n(ONe,"A",{href:!0});var i6t=s(pH);omr=r(i6t,"HubertForSequenceClassification"),i6t.forEach(t),rmr=r(ONe," (Hubert model)"),ONe.forEach(t),tmr=i(ze),o7=n(ze,"LI",{});var VNe=s(o7);G3e=n(VNe,"STRONG",{});var d6t=s(G3e);amr=r(d6t,"sew"),d6t.forEach(t),nmr=r(VNe," \u2014 "),_H=n(VNe,"A",{href:!0});var c6t=s(_H);smr=r(c6t,"SEWForSequenceClassification"),c6t.forEach(t),lmr=r(VNe," (SEW model)"),VNe.forEach(t),imr=i(ze),r7=n(ze,"LI",{});var XNe=s(r7);O3e=n(XNe,"STRONG",{});var f6t=s(O3e);dmr=r(f6t,"sew-d"),f6t.forEach(t),cmr=r(XNe," \u2014 "),uH=n(XNe,"A",{href:!0});var m6t=s(uH);fmr=r(m6t,"SEWDForSequenceClassification"),m6t.forEach(t),mmr=r(XNe," (SEW-D model)"),XNe.forEach(t),gmr=i(ze),t7=n(ze,"LI",{});var zNe=s(t7);V3e=n(zNe,"STRONG",{});var g6t=s(V3e);hmr=r(g6t,"unispeech"),g6t.forEach(t),pmr=r(zNe," \u2014 "),bH=n(zNe,"A",{href:!0});var h6t=s(bH);_mr=r(h6t,"UniSpeechForSequenceClassification"),h6t.forEach(t),umr=r(zNe," (UniSpeech model)"),zNe.forEach(t),bmr=i(ze),a7=n(ze,"LI",{});var WNe=s(a7);X3e=n(WNe,"STRONG",{});var p6t=s(X3e);vmr=r(p6t,"unispeech-sat"),p6t.forEach(t),Fmr=r(WNe," \u2014 "),vH=n(WNe,"A",{href:!0});var _6t=s(vH);Tmr=r(_6t,"UniSpeechSatForSequenceClassification"),_6t.forEach(t),Mmr=r(WNe," (UniSpeechSat model)"),WNe.forEach(t),Emr=i(ze),n7=n(ze,"LI",{});var QNe=s(n7);z3e=n(QNe,"STRONG",{});var u6t=s(z3e);Cmr=r(u6t,"wav2vec2"),u6t.forEach(t),wmr=r(QNe," \u2014 "),FH=n(QNe,"A",{href:!0});var b6t=s(FH);Amr=r(b6t,"Wav2Vec2ForSequenceClassification"),b6t.forEach(t),Lmr=r(QNe," (Wav2Vec2 model)"),QNe.forEach(t),ymr=i(ze),s7=n(ze,"LI",{});var HNe=s(s7);W3e=n(HNe,"STRONG",{});var v6t=s(W3e);xmr=r(v6t,"wav2vec2-conformer"),v6t.forEach(t),$mr=r(HNe," \u2014 "),TH=n(HNe,"A",{href:!0});var F6t=s(TH);kmr=r(F6t,"Wav2Vec2ConformerForSequenceClassification"),F6t.forEach(t),Smr=r(HNe," (Wav2Vec2-Conformer model)"),HNe.forEach(t),Rmr=i(ze),l7=n(ze,"LI",{});var UNe=s(l7);Q3e=n(UNe,"STRONG",{});var T6t=s(Q3e);Pmr=r(T6t,"wavlm"),T6t.forEach(t),Bmr=r(UNe," \u2014 "),MH=n(UNe,"A",{href:!0});var M6t=s(MH);Imr=r(M6t,"WavLMForSequenceClassification"),M6t.forEach(t),Nmr=r(UNe," (WavLM model)"),UNe.forEach(t),ze.forEach(t),qmr=i(Ma),i7=n(Ma,"P",{});var JNe=s(i7);jmr=r(JNe,"The model is set in evaluation mode by default using "),H3e=n(JNe,"CODE",{});var E6t=s(H3e);Dmr=r(E6t,"model.eval()"),E6t.forEach(t),Gmr=r(JNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U3e=n(JNe,"CODE",{});var C6t=s(U3e);Omr=r(C6t,"model.train()"),C6t.forEach(t),JNe.forEach(t),Vmr=i(Ma),T(d7.$$.fragment,Ma),Ma.forEach(t),bl.forEach(t),Cze=i(f),Pd=n(f,"H2",{class:!0});var $Qe=s(Pd);c7=n($Qe,"A",{id:!0,class:!0,href:!0});var w6t=s(c7);J3e=n(w6t,"SPAN",{});var A6t=s(J3e);T(sy.$$.fragment,A6t),A6t.forEach(t),w6t.forEach(t),Xmr=i($Qe),Y3e=n($Qe,"SPAN",{});var L6t=s(Y3e);zmr=r(L6t,"AutoModelForAudioFrameClassification"),L6t.forEach(t),$Qe.forEach(t),wze=i(f),Wo=n(f,"DIV",{class:!0});var vl=s(Wo);T(ly.$$.fragment,vl),Wmr=i(vl),Bd=n(vl,"P",{});var $te=s(Bd);Qmr=r($te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),EH=n($te,"A",{href:!0});var y6t=s(EH);Hmr=r(y6t,"from_pretrained()"),y6t.forEach(t),Umr=r($te," class method or the "),CH=n($te,"A",{href:!0});var x6t=s(CH);Jmr=r(x6t,"from_config()"),x6t.forEach(t),Ymr=r($te,` class
method.`),$te.forEach(t),Kmr=i(vl),iy=n(vl,"P",{});var kQe=s(iy);Zmr=r(kQe,"This class cannot be instantiated directly using "),K3e=n(kQe,"CODE",{});var $6t=s(K3e);egr=r($6t,"__init__()"),$6t.forEach(t),ogr=r(kQe," (throws an error)."),kQe.forEach(t),rgr=i(vl),Ct=n(vl,"DIV",{class:!0});var Qw=s(Ct);T(dy.$$.fragment,Qw),tgr=i(Qw),Z3e=n(Qw,"P",{});var k6t=s(Z3e);agr=r(k6t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),k6t.forEach(t),ngr=i(Qw),Id=n(Qw,"P",{});var kte=s(Id);sgr=r(kte,`Note:
Loading a model from its configuration file does `),eve=n(kte,"STRONG",{});var S6t=s(eve);lgr=r(S6t,"not"),S6t.forEach(t),igr=r(kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=n(kte,"A",{href:!0});var R6t=s(wH);dgr=r(R6t,"from_pretrained()"),R6t.forEach(t),cgr=r(kte," to load the model weights."),kte.forEach(t),fgr=i(Qw),T(f7.$$.fragment,Qw),Qw.forEach(t),mgr=i(vl),go=n(vl,"DIV",{class:!0});var Ea=s(go);T(cy.$$.fragment,Ea),ggr=i(Ea),ove=n(Ea,"P",{});var P6t=s(ove);hgr=r(P6t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),P6t.forEach(t),pgr=i(Ea),Ya=n(Ea,"P",{});var Hw=s(Ya);_gr=r(Hw,"The model class to instantiate is selected based on the "),rve=n(Hw,"CODE",{});var B6t=s(rve);ugr=r(B6t,"model_type"),B6t.forEach(t),bgr=r(Hw,` property of the config object (either
passed as an argument or loaded from `),tve=n(Hw,"CODE",{});var I6t=s(tve);vgr=r(I6t,"pretrained_model_name_or_path"),I6t.forEach(t),Fgr=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ave=n(Hw,"CODE",{});var N6t=s(ave);Tgr=r(N6t,"pretrained_model_name_or_path"),N6t.forEach(t),Mgr=r(Hw,":"),Hw.forEach(t),Egr=i(Ea),rt=n(Ea,"UL",{});var Fl=s(rt);m7=n(Fl,"LI",{});var YNe=s(m7);nve=n(YNe,"STRONG",{});var q6t=s(nve);Cgr=r(q6t,"data2vec-audio"),q6t.forEach(t),wgr=r(YNe," \u2014 "),AH=n(YNe,"A",{href:!0});var j6t=s(AH);Agr=r(j6t,"Data2VecAudioForAudioFrameClassification"),j6t.forEach(t),Lgr=r(YNe," (Data2VecAudio model)"),YNe.forEach(t),ygr=i(Fl),g7=n(Fl,"LI",{});var KNe=s(g7);sve=n(KNe,"STRONG",{});var D6t=s(sve);xgr=r(D6t,"unispeech-sat"),D6t.forEach(t),$gr=r(KNe," \u2014 "),LH=n(KNe,"A",{href:!0});var G6t=s(LH);kgr=r(G6t,"UniSpeechSatForAudioFrameClassification"),G6t.forEach(t),Sgr=r(KNe," (UniSpeechSat model)"),KNe.forEach(t),Rgr=i(Fl),h7=n(Fl,"LI",{});var ZNe=s(h7);lve=n(ZNe,"STRONG",{});var O6t=s(lve);Pgr=r(O6t,"wav2vec2"),O6t.forEach(t),Bgr=r(ZNe," \u2014 "),yH=n(ZNe,"A",{href:!0});var V6t=s(yH);Igr=r(V6t,"Wav2Vec2ForAudioFrameClassification"),V6t.forEach(t),Ngr=r(ZNe," (Wav2Vec2 model)"),ZNe.forEach(t),qgr=i(Fl),p7=n(Fl,"LI",{});var eqe=s(p7);ive=n(eqe,"STRONG",{});var X6t=s(ive);jgr=r(X6t,"wav2vec2-conformer"),X6t.forEach(t),Dgr=r(eqe," \u2014 "),xH=n(eqe,"A",{href:!0});var z6t=s(xH);Ggr=r(z6t,"Wav2Vec2ConformerForAudioFrameClassification"),z6t.forEach(t),Ogr=r(eqe," (Wav2Vec2-Conformer model)"),eqe.forEach(t),Vgr=i(Fl),_7=n(Fl,"LI",{});var oqe=s(_7);dve=n(oqe,"STRONG",{});var W6t=s(dve);Xgr=r(W6t,"wavlm"),W6t.forEach(t),zgr=r(oqe," \u2014 "),$H=n(oqe,"A",{href:!0});var Q6t=s($H);Wgr=r(Q6t,"WavLMForAudioFrameClassification"),Q6t.forEach(t),Qgr=r(oqe," (WavLM model)"),oqe.forEach(t),Fl.forEach(t),Hgr=i(Ea),u7=n(Ea,"P",{});var rqe=s(u7);Ugr=r(rqe,"The model is set in evaluation mode by default using "),cve=n(rqe,"CODE",{});var H6t=s(cve);Jgr=r(H6t,"model.eval()"),H6t.forEach(t),Ygr=r(rqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fve=n(rqe,"CODE",{});var U6t=s(fve);Kgr=r(U6t,"model.train()"),U6t.forEach(t),rqe.forEach(t),Zgr=i(Ea),T(b7.$$.fragment,Ea),Ea.forEach(t),vl.forEach(t),Aze=i(f),Nd=n(f,"H2",{class:!0});var SQe=s(Nd);v7=n(SQe,"A",{id:!0,class:!0,href:!0});var J6t=s(v7);mve=n(J6t,"SPAN",{});var Y6t=s(mve);T(fy.$$.fragment,Y6t),Y6t.forEach(t),J6t.forEach(t),ehr=i(SQe),gve=n(SQe,"SPAN",{});var K6t=s(gve);ohr=r(K6t,"AutoModelForCTC"),K6t.forEach(t),SQe.forEach(t),Lze=i(f),Qo=n(f,"DIV",{class:!0});var Tl=s(Qo);T(my.$$.fragment,Tl),rhr=i(Tl),qd=n(Tl,"P",{});var Ste=s(qd);thr=r(Ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),kH=n(Ste,"A",{href:!0});var Z6t=s(kH);ahr=r(Z6t,"from_pretrained()"),Z6t.forEach(t),nhr=r(Ste," class method or the "),SH=n(Ste,"A",{href:!0});var eLt=s(SH);shr=r(eLt,"from_config()"),eLt.forEach(t),lhr=r(Ste,` class
method.`),Ste.forEach(t),ihr=i(Tl),gy=n(Tl,"P",{});var RQe=s(gy);dhr=r(RQe,"This class cannot be instantiated directly using "),hve=n(RQe,"CODE",{});var oLt=s(hve);chr=r(oLt,"__init__()"),oLt.forEach(t),fhr=r(RQe," (throws an error)."),RQe.forEach(t),mhr=i(Tl),wt=n(Tl,"DIV",{class:!0});var Uw=s(wt);T(hy.$$.fragment,Uw),ghr=i(Uw),pve=n(Uw,"P",{});var rLt=s(pve);hhr=r(rLt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),rLt.forEach(t),phr=i(Uw),jd=n(Uw,"P",{});var Rte=s(jd);_hr=r(Rte,`Note:
Loading a model from its configuration file does `),_ve=n(Rte,"STRONG",{});var tLt=s(_ve);uhr=r(tLt,"not"),tLt.forEach(t),bhr=r(Rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=n(Rte,"A",{href:!0});var aLt=s(RH);vhr=r(aLt,"from_pretrained()"),aLt.forEach(t),Fhr=r(Rte," to load the model weights."),Rte.forEach(t),Thr=i(Uw),T(F7.$$.fragment,Uw),Uw.forEach(t),Mhr=i(Tl),ho=n(Tl,"DIV",{class:!0});var Ca=s(ho);T(py.$$.fragment,Ca),Ehr=i(Ca),uve=n(Ca,"P",{});var nLt=s(uve);Chr=r(nLt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),nLt.forEach(t),whr=i(Ca),Ka=n(Ca,"P",{});var Jw=s(Ka);Ahr=r(Jw,"The model class to instantiate is selected based on the "),bve=n(Jw,"CODE",{});var sLt=s(bve);Lhr=r(sLt,"model_type"),sLt.forEach(t),yhr=r(Jw,` property of the config object (either
passed as an argument or loaded from `),vve=n(Jw,"CODE",{});var lLt=s(vve);xhr=r(lLt,"pretrained_model_name_or_path"),lLt.forEach(t),$hr=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fve=n(Jw,"CODE",{});var iLt=s(Fve);khr=r(iLt,"pretrained_model_name_or_path"),iLt.forEach(t),Shr=r(Jw,":"),Jw.forEach(t),Rhr=i(Ca),Le=n(Ca,"UL",{});var Be=s(Le);T7=n(Be,"LI",{});var tqe=s(T7);Tve=n(tqe,"STRONG",{});var dLt=s(Tve);Phr=r(dLt,"data2vec-audio"),dLt.forEach(t),Bhr=r(tqe," \u2014 "),PH=n(tqe,"A",{href:!0});var cLt=s(PH);Ihr=r(cLt,"Data2VecAudioForCTC"),cLt.forEach(t),Nhr=r(tqe," (Data2VecAudio model)"),tqe.forEach(t),qhr=i(Be),M7=n(Be,"LI",{});var aqe=s(M7);Mve=n(aqe,"STRONG",{});var fLt=s(Mve);jhr=r(fLt,"hubert"),fLt.forEach(t),Dhr=r(aqe," \u2014 "),BH=n(aqe,"A",{href:!0});var mLt=s(BH);Ghr=r(mLt,"HubertForCTC"),mLt.forEach(t),Ohr=r(aqe," (Hubert model)"),aqe.forEach(t),Vhr=i(Be),E7=n(Be,"LI",{});var nqe=s(E7);Eve=n(nqe,"STRONG",{});var gLt=s(Eve);Xhr=r(gLt,"mctct"),gLt.forEach(t),zhr=r(nqe," \u2014 "),IH=n(nqe,"A",{href:!0});var hLt=s(IH);Whr=r(hLt,"MCTCTForCTC"),hLt.forEach(t),Qhr=r(nqe," (M-CTC-T model)"),nqe.forEach(t),Hhr=i(Be),C7=n(Be,"LI",{});var sqe=s(C7);Cve=n(sqe,"STRONG",{});var pLt=s(Cve);Uhr=r(pLt,"sew"),pLt.forEach(t),Jhr=r(sqe," \u2014 "),NH=n(sqe,"A",{href:!0});var _Lt=s(NH);Yhr=r(_Lt,"SEWForCTC"),_Lt.forEach(t),Khr=r(sqe," (SEW model)"),sqe.forEach(t),Zhr=i(Be),w7=n(Be,"LI",{});var lqe=s(w7);wve=n(lqe,"STRONG",{});var uLt=s(wve);epr=r(uLt,"sew-d"),uLt.forEach(t),opr=r(lqe," \u2014 "),qH=n(lqe,"A",{href:!0});var bLt=s(qH);rpr=r(bLt,"SEWDForCTC"),bLt.forEach(t),tpr=r(lqe," (SEW-D model)"),lqe.forEach(t),apr=i(Be),A7=n(Be,"LI",{});var iqe=s(A7);Ave=n(iqe,"STRONG",{});var vLt=s(Ave);npr=r(vLt,"unispeech"),vLt.forEach(t),spr=r(iqe," \u2014 "),jH=n(iqe,"A",{href:!0});var FLt=s(jH);lpr=r(FLt,"UniSpeechForCTC"),FLt.forEach(t),ipr=r(iqe," (UniSpeech model)"),iqe.forEach(t),dpr=i(Be),L7=n(Be,"LI",{});var dqe=s(L7);Lve=n(dqe,"STRONG",{});var TLt=s(Lve);cpr=r(TLt,"unispeech-sat"),TLt.forEach(t),fpr=r(dqe," \u2014 "),DH=n(dqe,"A",{href:!0});var MLt=s(DH);mpr=r(MLt,"UniSpeechSatForCTC"),MLt.forEach(t),gpr=r(dqe," (UniSpeechSat model)"),dqe.forEach(t),hpr=i(Be),y7=n(Be,"LI",{});var cqe=s(y7);yve=n(cqe,"STRONG",{});var ELt=s(yve);ppr=r(ELt,"wav2vec2"),ELt.forEach(t),_pr=r(cqe," \u2014 "),GH=n(cqe,"A",{href:!0});var CLt=s(GH);upr=r(CLt,"Wav2Vec2ForCTC"),CLt.forEach(t),bpr=r(cqe," (Wav2Vec2 model)"),cqe.forEach(t),vpr=i(Be),x7=n(Be,"LI",{});var fqe=s(x7);xve=n(fqe,"STRONG",{});var wLt=s(xve);Fpr=r(wLt,"wav2vec2-conformer"),wLt.forEach(t),Tpr=r(fqe," \u2014 "),OH=n(fqe,"A",{href:!0});var ALt=s(OH);Mpr=r(ALt,"Wav2Vec2ConformerForCTC"),ALt.forEach(t),Epr=r(fqe," (Wav2Vec2-Conformer model)"),fqe.forEach(t),Cpr=i(Be),$7=n(Be,"LI",{});var mqe=s($7);$ve=n(mqe,"STRONG",{});var LLt=s($ve);wpr=r(LLt,"wavlm"),LLt.forEach(t),Apr=r(mqe," \u2014 "),VH=n(mqe,"A",{href:!0});var yLt=s(VH);Lpr=r(yLt,"WavLMForCTC"),yLt.forEach(t),ypr=r(mqe," (WavLM model)"),mqe.forEach(t),Be.forEach(t),xpr=i(Ca),k7=n(Ca,"P",{});var gqe=s(k7);$pr=r(gqe,"The model is set in evaluation mode by default using "),kve=n(gqe,"CODE",{});var xLt=s(kve);kpr=r(xLt,"model.eval()"),xLt.forEach(t),Spr=r(gqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sve=n(gqe,"CODE",{});var $Lt=s(Sve);Rpr=r($Lt,"model.train()"),$Lt.forEach(t),gqe.forEach(t),Ppr=i(Ca),T(S7.$$.fragment,Ca),Ca.forEach(t),Tl.forEach(t),yze=i(f),Dd=n(f,"H2",{class:!0});var PQe=s(Dd);R7=n(PQe,"A",{id:!0,class:!0,href:!0});var kLt=s(R7);Rve=n(kLt,"SPAN",{});var SLt=s(Rve);T(_y.$$.fragment,SLt),SLt.forEach(t),kLt.forEach(t),Bpr=i(PQe),Pve=n(PQe,"SPAN",{});var RLt=s(Pve);Ipr=r(RLt,"AutoModelForSpeechSeq2Seq"),RLt.forEach(t),PQe.forEach(t),xze=i(f),Ho=n(f,"DIV",{class:!0});var Ml=s(Ho);T(uy.$$.fragment,Ml),Npr=i(Ml),Gd=n(Ml,"P",{});var Pte=s(Gd);qpr=r(Pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),XH=n(Pte,"A",{href:!0});var PLt=s(XH);jpr=r(PLt,"from_pretrained()"),PLt.forEach(t),Dpr=r(Pte," class method or the "),zH=n(Pte,"A",{href:!0});var BLt=s(zH);Gpr=r(BLt,"from_config()"),BLt.forEach(t),Opr=r(Pte,` class
method.`),Pte.forEach(t),Vpr=i(Ml),by=n(Ml,"P",{});var BQe=s(by);Xpr=r(BQe,"This class cannot be instantiated directly using "),Bve=n(BQe,"CODE",{});var ILt=s(Bve);zpr=r(ILt,"__init__()"),ILt.forEach(t),Wpr=r(BQe," (throws an error)."),BQe.forEach(t),Qpr=i(Ml),At=n(Ml,"DIV",{class:!0});var Yw=s(At);T(vy.$$.fragment,Yw),Hpr=i(Yw),Ive=n(Yw,"P",{});var NLt=s(Ive);Upr=r(NLt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),NLt.forEach(t),Jpr=i(Yw),Od=n(Yw,"P",{});var Bte=s(Od);Ypr=r(Bte,`Note:
Loading a model from its configuration file does `),Nve=n(Bte,"STRONG",{});var qLt=s(Nve);Kpr=r(qLt,"not"),qLt.forEach(t),Zpr=r(Bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),WH=n(Bte,"A",{href:!0});var jLt=s(WH);e_r=r(jLt,"from_pretrained()"),jLt.forEach(t),o_r=r(Bte," to load the model weights."),Bte.forEach(t),r_r=i(Yw),T(P7.$$.fragment,Yw),Yw.forEach(t),t_r=i(Ml),po=n(Ml,"DIV",{class:!0});var wa=s(po);T(Fy.$$.fragment,wa),a_r=i(wa),qve=n(wa,"P",{});var DLt=s(qve);n_r=r(DLt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),DLt.forEach(t),s_r=i(wa),Za=n(wa,"P",{});var Kw=s(Za);l_r=r(Kw,"The model class to instantiate is selected based on the "),jve=n(Kw,"CODE",{});var GLt=s(jve);i_r=r(GLt,"model_type"),GLt.forEach(t),d_r=r(Kw,` property of the config object (either
passed as an argument or loaded from `),Dve=n(Kw,"CODE",{});var OLt=s(Dve);c_r=r(OLt,"pretrained_model_name_or_path"),OLt.forEach(t),f_r=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gve=n(Kw,"CODE",{});var VLt=s(Gve);m_r=r(VLt,"pretrained_model_name_or_path"),VLt.forEach(t),g_r=r(Kw,":"),Kw.forEach(t),h_r=i(wa),Ty=n(wa,"UL",{});var IQe=s(Ty);B7=n(IQe,"LI",{});var hqe=s(B7);Ove=n(hqe,"STRONG",{});var XLt=s(Ove);p_r=r(XLt,"speech-encoder-decoder"),XLt.forEach(t),__r=r(hqe," \u2014 "),QH=n(hqe,"A",{href:!0});var zLt=s(QH);u_r=r(zLt,"SpeechEncoderDecoderModel"),zLt.forEach(t),b_r=r(hqe," (Speech Encoder decoder model)"),hqe.forEach(t),v_r=i(IQe),I7=n(IQe,"LI",{});var pqe=s(I7);Vve=n(pqe,"STRONG",{});var WLt=s(Vve);F_r=r(WLt,"speech_to_text"),WLt.forEach(t),T_r=r(pqe," \u2014 "),HH=n(pqe,"A",{href:!0});var QLt=s(HH);M_r=r(QLt,"Speech2TextForConditionalGeneration"),QLt.forEach(t),E_r=r(pqe," (Speech2Text model)"),pqe.forEach(t),IQe.forEach(t),C_r=i(wa),N7=n(wa,"P",{});var _qe=s(N7);w_r=r(_qe,"The model is set in evaluation mode by default using "),Xve=n(_qe,"CODE",{});var HLt=s(Xve);A_r=r(HLt,"model.eval()"),HLt.forEach(t),L_r=r(_qe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zve=n(_qe,"CODE",{});var ULt=s(zve);y_r=r(ULt,"model.train()"),ULt.forEach(t),_qe.forEach(t),x_r=i(wa),T(q7.$$.fragment,wa),wa.forEach(t),Ml.forEach(t),$ze=i(f),Vd=n(f,"H2",{class:!0});var NQe=s(Vd);j7=n(NQe,"A",{id:!0,class:!0,href:!0});var JLt=s(j7);Wve=n(JLt,"SPAN",{});var YLt=s(Wve);T(My.$$.fragment,YLt),YLt.forEach(t),JLt.forEach(t),$_r=i(NQe),Qve=n(NQe,"SPAN",{});var KLt=s(Qve);k_r=r(KLt,"AutoModelForAudioXVector"),KLt.forEach(t),NQe.forEach(t),kze=i(f),Uo=n(f,"DIV",{class:!0});var El=s(Uo);T(Ey.$$.fragment,El),S_r=i(El),Xd=n(El,"P",{});var Ite=s(Xd);R_r=r(Ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),UH=n(Ite,"A",{href:!0});var ZLt=s(UH);P_r=r(ZLt,"from_pretrained()"),ZLt.forEach(t),B_r=r(Ite," class method or the "),JH=n(Ite,"A",{href:!0});var eyt=s(JH);I_r=r(eyt,"from_config()"),eyt.forEach(t),N_r=r(Ite,` class
method.`),Ite.forEach(t),q_r=i(El),Cy=n(El,"P",{});var qQe=s(Cy);j_r=r(qQe,"This class cannot be instantiated directly using "),Hve=n(qQe,"CODE",{});var oyt=s(Hve);D_r=r(oyt,"__init__()"),oyt.forEach(t),G_r=r(qQe," (throws an error)."),qQe.forEach(t),O_r=i(El),Lt=n(El,"DIV",{class:!0});var Zw=s(Lt);T(wy.$$.fragment,Zw),V_r=i(Zw),Uve=n(Zw,"P",{});var ryt=s(Uve);X_r=r(ryt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),ryt.forEach(t),z_r=i(Zw),zd=n(Zw,"P",{});var Nte=s(zd);W_r=r(Nte,`Note:
Loading a model from its configuration file does `),Jve=n(Nte,"STRONG",{});var tyt=s(Jve);Q_r=r(tyt,"not"),tyt.forEach(t),H_r=r(Nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=n(Nte,"A",{href:!0});var ayt=s(YH);U_r=r(ayt,"from_pretrained()"),ayt.forEach(t),J_r=r(Nte," to load the model weights."),Nte.forEach(t),Y_r=i(Zw),T(D7.$$.fragment,Zw),Zw.forEach(t),K_r=i(El),_o=n(El,"DIV",{class:!0});var Aa=s(_o);T(Ay.$$.fragment,Aa),Z_r=i(Aa),Yve=n(Aa,"P",{});var nyt=s(Yve);eur=r(nyt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),nyt.forEach(t),our=i(Aa),en=n(Aa,"P",{});var eA=s(en);rur=r(eA,"The model class to instantiate is selected based on the "),Kve=n(eA,"CODE",{});var syt=s(Kve);tur=r(syt,"model_type"),syt.forEach(t),aur=r(eA,` property of the config object (either
passed as an argument or loaded from `),Zve=n(eA,"CODE",{});var lyt=s(Zve);nur=r(lyt,"pretrained_model_name_or_path"),lyt.forEach(t),sur=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eFe=n(eA,"CODE",{});var iyt=s(eFe);lur=r(iyt,"pretrained_model_name_or_path"),iyt.forEach(t),iur=r(eA,":"),eA.forEach(t),dur=i(Aa),tt=n(Aa,"UL",{});var Cl=s(tt);G7=n(Cl,"LI",{});var uqe=s(G7);oFe=n(uqe,"STRONG",{});var dyt=s(oFe);cur=r(dyt,"data2vec-audio"),dyt.forEach(t),fur=r(uqe," \u2014 "),KH=n(uqe,"A",{href:!0});var cyt=s(KH);mur=r(cyt,"Data2VecAudioForXVector"),cyt.forEach(t),gur=r(uqe," (Data2VecAudio model)"),uqe.forEach(t),hur=i(Cl),O7=n(Cl,"LI",{});var bqe=s(O7);rFe=n(bqe,"STRONG",{});var fyt=s(rFe);pur=r(fyt,"unispeech-sat"),fyt.forEach(t),_ur=r(bqe," \u2014 "),ZH=n(bqe,"A",{href:!0});var myt=s(ZH);uur=r(myt,"UniSpeechSatForXVector"),myt.forEach(t),bur=r(bqe," (UniSpeechSat model)"),bqe.forEach(t),vur=i(Cl),V7=n(Cl,"LI",{});var vqe=s(V7);tFe=n(vqe,"STRONG",{});var gyt=s(tFe);Fur=r(gyt,"wav2vec2"),gyt.forEach(t),Tur=r(vqe," \u2014 "),eU=n(vqe,"A",{href:!0});var hyt=s(eU);Mur=r(hyt,"Wav2Vec2ForXVector"),hyt.forEach(t),Eur=r(vqe," (Wav2Vec2 model)"),vqe.forEach(t),Cur=i(Cl),X7=n(Cl,"LI",{});var Fqe=s(X7);aFe=n(Fqe,"STRONG",{});var pyt=s(aFe);wur=r(pyt,"wav2vec2-conformer"),pyt.forEach(t),Aur=r(Fqe," \u2014 "),oU=n(Fqe,"A",{href:!0});var _yt=s(oU);Lur=r(_yt,"Wav2Vec2ConformerForXVector"),_yt.forEach(t),yur=r(Fqe," (Wav2Vec2-Conformer model)"),Fqe.forEach(t),xur=i(Cl),z7=n(Cl,"LI",{});var Tqe=s(z7);nFe=n(Tqe,"STRONG",{});var uyt=s(nFe);$ur=r(uyt,"wavlm"),uyt.forEach(t),kur=r(Tqe," \u2014 "),rU=n(Tqe,"A",{href:!0});var byt=s(rU);Sur=r(byt,"WavLMForXVector"),byt.forEach(t),Rur=r(Tqe," (WavLM model)"),Tqe.forEach(t),Cl.forEach(t),Pur=i(Aa),W7=n(Aa,"P",{});var Mqe=s(W7);Bur=r(Mqe,"The model is set in evaluation mode by default using "),sFe=n(Mqe,"CODE",{});var vyt=s(sFe);Iur=r(vyt,"model.eval()"),vyt.forEach(t),Nur=r(Mqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lFe=n(Mqe,"CODE",{});var Fyt=s(lFe);qur=r(Fyt,"model.train()"),Fyt.forEach(t),Mqe.forEach(t),jur=i(Aa),T(Q7.$$.fragment,Aa),Aa.forEach(t),El.forEach(t),Sze=i(f),Wd=n(f,"H2",{class:!0});var jQe=s(Wd);H7=n(jQe,"A",{id:!0,class:!0,href:!0});var Tyt=s(H7);iFe=n(Tyt,"SPAN",{});var Myt=s(iFe);T(Ly.$$.fragment,Myt),Myt.forEach(t),Tyt.forEach(t),Dur=i(jQe),dFe=n(jQe,"SPAN",{});var Eyt=s(dFe);Gur=r(Eyt,"AutoModelForMaskedImageModeling"),Eyt.forEach(t),jQe.forEach(t),Rze=i(f),Jo=n(f,"DIV",{class:!0});var wl=s(Jo);T(yy.$$.fragment,wl),Our=i(wl),Qd=n(wl,"P",{});var qte=s(Qd);Vur=r(qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),tU=n(qte,"A",{href:!0});var Cyt=s(tU);Xur=r(Cyt,"from_pretrained()"),Cyt.forEach(t),zur=r(qte," class method or the "),aU=n(qte,"A",{href:!0});var wyt=s(aU);Wur=r(wyt,"from_config()"),wyt.forEach(t),Qur=r(qte,` class
method.`),qte.forEach(t),Hur=i(wl),xy=n(wl,"P",{});var DQe=s(xy);Uur=r(DQe,"This class cannot be instantiated directly using "),cFe=n(DQe,"CODE",{});var Ayt=s(cFe);Jur=r(Ayt,"__init__()"),Ayt.forEach(t),Yur=r(DQe," (throws an error)."),DQe.forEach(t),Kur=i(wl),yt=n(wl,"DIV",{class:!0});var oA=s(yt);T($y.$$.fragment,oA),Zur=i(oA),fFe=n(oA,"P",{});var Lyt=s(fFe);e1r=r(Lyt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Lyt.forEach(t),o1r=i(oA),Hd=n(oA,"P",{});var jte=s(Hd);r1r=r(jte,`Note:
Loading a model from its configuration file does `),mFe=n(jte,"STRONG",{});var yyt=s(mFe);t1r=r(yyt,"not"),yyt.forEach(t),a1r=r(jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=n(jte,"A",{href:!0});var xyt=s(nU);n1r=r(xyt,"from_pretrained()"),xyt.forEach(t),s1r=r(jte," to load the model weights."),jte.forEach(t),l1r=i(oA),T(U7.$$.fragment,oA),oA.forEach(t),i1r=i(wl),uo=n(wl,"DIV",{class:!0});var La=s(uo);T(ky.$$.fragment,La),d1r=i(La),gFe=n(La,"P",{});var $yt=s(gFe);c1r=r($yt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),$yt.forEach(t),f1r=i(La),on=n(La,"P",{});var rA=s(on);m1r=r(rA,"The model class to instantiate is selected based on the "),hFe=n(rA,"CODE",{});var kyt=s(hFe);g1r=r(kyt,"model_type"),kyt.forEach(t),h1r=r(rA,` property of the config object (either
passed as an argument or loaded from `),pFe=n(rA,"CODE",{});var Syt=s(pFe);p1r=r(Syt,"pretrained_model_name_or_path"),Syt.forEach(t),_1r=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Fe=n(rA,"CODE",{});var Ryt=s(_Fe);u1r=r(Ryt,"pretrained_model_name_or_path"),Ryt.forEach(t),b1r=r(rA,":"),rA.forEach(t),v1r=i(La),Ud=n(La,"UL",{});var Dte=s(Ud);J7=n(Dte,"LI",{});var Eqe=s(J7);uFe=n(Eqe,"STRONG",{});var Pyt=s(uFe);F1r=r(Pyt,"deit"),Pyt.forEach(t),T1r=r(Eqe," \u2014 "),sU=n(Eqe,"A",{href:!0});var Byt=s(sU);M1r=r(Byt,"DeiTForMaskedImageModeling"),Byt.forEach(t),E1r=r(Eqe," (DeiT model)"),Eqe.forEach(t),C1r=i(Dte),Y7=n(Dte,"LI",{});var Cqe=s(Y7);bFe=n(Cqe,"STRONG",{});var Iyt=s(bFe);w1r=r(Iyt,"swin"),Iyt.forEach(t),A1r=r(Cqe," \u2014 "),lU=n(Cqe,"A",{href:!0});var Nyt=s(lU);L1r=r(Nyt,"SwinForMaskedImageModeling"),Nyt.forEach(t),y1r=r(Cqe," (Swin Transformer model)"),Cqe.forEach(t),x1r=i(Dte),K7=n(Dte,"LI",{});var wqe=s(K7);vFe=n(wqe,"STRONG",{});var qyt=s(vFe);$1r=r(qyt,"vit"),qyt.forEach(t),k1r=r(wqe," \u2014 "),iU=n(wqe,"A",{href:!0});var jyt=s(iU);S1r=r(jyt,"ViTForMaskedImageModeling"),jyt.forEach(t),R1r=r(wqe," (ViT model)"),wqe.forEach(t),Dte.forEach(t),P1r=i(La),Z7=n(La,"P",{});var Aqe=s(Z7);B1r=r(Aqe,"The model is set in evaluation mode by default using "),FFe=n(Aqe,"CODE",{});var Dyt=s(FFe);I1r=r(Dyt,"model.eval()"),Dyt.forEach(t),N1r=r(Aqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),TFe=n(Aqe,"CODE",{});var Gyt=s(TFe);q1r=r(Gyt,"model.train()"),Gyt.forEach(t),Aqe.forEach(t),j1r=i(La),T(e8.$$.fragment,La),La.forEach(t),wl.forEach(t),Pze=i(f),Jd=n(f,"H2",{class:!0});var GQe=s(Jd);o8=n(GQe,"A",{id:!0,class:!0,href:!0});var Oyt=s(o8);MFe=n(Oyt,"SPAN",{});var Vyt=s(MFe);T(Sy.$$.fragment,Vyt),Vyt.forEach(t),Oyt.forEach(t),D1r=i(GQe),EFe=n(GQe,"SPAN",{});var Xyt=s(EFe);G1r=r(Xyt,"AutoModelForObjectDetection"),Xyt.forEach(t),GQe.forEach(t),Bze=i(f),Yo=n(f,"DIV",{class:!0});var Al=s(Yo);T(Ry.$$.fragment,Al),O1r=i(Al),Yd=n(Al,"P",{});var Gte=s(Yd);V1r=r(Gte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),dU=n(Gte,"A",{href:!0});var zyt=s(dU);X1r=r(zyt,"from_pretrained()"),zyt.forEach(t),z1r=r(Gte," class method or the "),cU=n(Gte,"A",{href:!0});var Wyt=s(cU);W1r=r(Wyt,"from_config()"),Wyt.forEach(t),Q1r=r(Gte,` class
method.`),Gte.forEach(t),H1r=i(Al),Py=n(Al,"P",{});var OQe=s(Py);U1r=r(OQe,"This class cannot be instantiated directly using "),CFe=n(OQe,"CODE",{});var Qyt=s(CFe);J1r=r(Qyt,"__init__()"),Qyt.forEach(t),Y1r=r(OQe," (throws an error)."),OQe.forEach(t),K1r=i(Al),xt=n(Al,"DIV",{class:!0});var tA=s(xt);T(By.$$.fragment,tA),Z1r=i(tA),wFe=n(tA,"P",{});var Hyt=s(wFe);e2r=r(Hyt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Hyt.forEach(t),o2r=i(tA),Kd=n(tA,"P",{});var Ote=s(Kd);r2r=r(Ote,`Note:
Loading a model from its configuration file does `),AFe=n(Ote,"STRONG",{});var Uyt=s(AFe);t2r=r(Uyt,"not"),Uyt.forEach(t),a2r=r(Ote,` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=n(Ote,"A",{href:!0});var Jyt=s(fU);n2r=r(Jyt,"from_pretrained()"),Jyt.forEach(t),s2r=r(Ote," to load the model weights."),Ote.forEach(t),l2r=i(tA),T(r8.$$.fragment,tA),tA.forEach(t),i2r=i(Al),bo=n(Al,"DIV",{class:!0});var ya=s(bo);T(Iy.$$.fragment,ya),d2r=i(ya),LFe=n(ya,"P",{});var Yyt=s(LFe);c2r=r(Yyt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Yyt.forEach(t),f2r=i(ya),rn=n(ya,"P",{});var aA=s(rn);m2r=r(aA,"The model class to instantiate is selected based on the "),yFe=n(aA,"CODE",{});var Kyt=s(yFe);g2r=r(Kyt,"model_type"),Kyt.forEach(t),h2r=r(aA,` property of the config object (either
passed as an argument or loaded from `),xFe=n(aA,"CODE",{});var Zyt=s(xFe);p2r=r(Zyt,"pretrained_model_name_or_path"),Zyt.forEach(t),_2r=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Fe=n(aA,"CODE",{});var ext=s($Fe);u2r=r(ext,"pretrained_model_name_or_path"),ext.forEach(t),b2r=r(aA,":"),aA.forEach(t),v2r=i(ya),Ny=n(ya,"UL",{});var VQe=s(Ny);t8=n(VQe,"LI",{});var Lqe=s(t8);kFe=n(Lqe,"STRONG",{});var oxt=s(kFe);F2r=r(oxt,"detr"),oxt.forEach(t),T2r=r(Lqe," \u2014 "),mU=n(Lqe,"A",{href:!0});var rxt=s(mU);M2r=r(rxt,"DetrForObjectDetection"),rxt.forEach(t),E2r=r(Lqe," (DETR model)"),Lqe.forEach(t),C2r=i(VQe),a8=n(VQe,"LI",{});var yqe=s(a8);SFe=n(yqe,"STRONG",{});var txt=s(SFe);w2r=r(txt,"yolos"),txt.forEach(t),A2r=r(yqe," \u2014 "),gU=n(yqe,"A",{href:!0});var axt=s(gU);L2r=r(axt,"YolosForObjectDetection"),axt.forEach(t),y2r=r(yqe," (YOLOS model)"),yqe.forEach(t),VQe.forEach(t),x2r=i(ya),n8=n(ya,"P",{});var xqe=s(n8);$2r=r(xqe,"The model is set in evaluation mode by default using "),RFe=n(xqe,"CODE",{});var nxt=s(RFe);k2r=r(nxt,"model.eval()"),nxt.forEach(t),S2r=r(xqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),PFe=n(xqe,"CODE",{});var sxt=s(PFe);R2r=r(sxt,"model.train()"),sxt.forEach(t),xqe.forEach(t),P2r=i(ya),T(s8.$$.fragment,ya),ya.forEach(t),Al.forEach(t),Ize=i(f),Zd=n(f,"H2",{class:!0});var XQe=s(Zd);l8=n(XQe,"A",{id:!0,class:!0,href:!0});var lxt=s(l8);BFe=n(lxt,"SPAN",{});var ixt=s(BFe);T(qy.$$.fragment,ixt),ixt.forEach(t),lxt.forEach(t),B2r=i(XQe),IFe=n(XQe,"SPAN",{});var dxt=s(IFe);I2r=r(dxt,"AutoModelForImageSegmentation"),dxt.forEach(t),XQe.forEach(t),Nze=i(f),Ko=n(f,"DIV",{class:!0});var Ll=s(Ko);T(jy.$$.fragment,Ll),N2r=i(Ll),ec=n(Ll,"P",{});var Vte=s(ec);q2r=r(Vte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),hU=n(Vte,"A",{href:!0});var cxt=s(hU);j2r=r(cxt,"from_pretrained()"),cxt.forEach(t),D2r=r(Vte," class method or the "),pU=n(Vte,"A",{href:!0});var fxt=s(pU);G2r=r(fxt,"from_config()"),fxt.forEach(t),O2r=r(Vte,` class
method.`),Vte.forEach(t),V2r=i(Ll),Dy=n(Ll,"P",{});var zQe=s(Dy);X2r=r(zQe,"This class cannot be instantiated directly using "),NFe=n(zQe,"CODE",{});var mxt=s(NFe);z2r=r(mxt,"__init__()"),mxt.forEach(t),W2r=r(zQe," (throws an error)."),zQe.forEach(t),Q2r=i(Ll),$t=n(Ll,"DIV",{class:!0});var nA=s($t);T(Gy.$$.fragment,nA),H2r=i(nA),qFe=n(nA,"P",{});var gxt=s(qFe);U2r=r(gxt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),gxt.forEach(t),J2r=i(nA),oc=n(nA,"P",{});var Xte=s(oc);Y2r=r(Xte,`Note:
Loading a model from its configuration file does `),jFe=n(Xte,"STRONG",{});var hxt=s(jFe);K2r=r(hxt,"not"),hxt.forEach(t),Z2r=r(Xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),_U=n(Xte,"A",{href:!0});var pxt=s(_U);ebr=r(pxt,"from_pretrained()"),pxt.forEach(t),obr=r(Xte," to load the model weights."),Xte.forEach(t),rbr=i(nA),T(i8.$$.fragment,nA),nA.forEach(t),tbr=i(Ll),vo=n(Ll,"DIV",{class:!0});var xa=s(vo);T(Oy.$$.fragment,xa),abr=i(xa),DFe=n(xa,"P",{});var _xt=s(DFe);nbr=r(_xt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),_xt.forEach(t),sbr=i(xa),tn=n(xa,"P",{});var sA=s(tn);lbr=r(sA,"The model class to instantiate is selected based on the "),GFe=n(sA,"CODE",{});var uxt=s(GFe);ibr=r(uxt,"model_type"),uxt.forEach(t),dbr=r(sA,` property of the config object (either
passed as an argument or loaded from `),OFe=n(sA,"CODE",{});var bxt=s(OFe);cbr=r(bxt,"pretrained_model_name_or_path"),bxt.forEach(t),fbr=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VFe=n(sA,"CODE",{});var vxt=s(VFe);mbr=r(vxt,"pretrained_model_name_or_path"),vxt.forEach(t),gbr=r(sA,":"),sA.forEach(t),hbr=i(xa),XFe=n(xa,"UL",{});var Fxt=s(XFe);d8=n(Fxt,"LI",{});var $qe=s(d8);zFe=n($qe,"STRONG",{});var Txt=s(zFe);pbr=r(Txt,"detr"),Txt.forEach(t),_br=r($qe," \u2014 "),uU=n($qe,"A",{href:!0});var Mxt=s(uU);ubr=r(Mxt,"DetrForSegmentation"),Mxt.forEach(t),bbr=r($qe," (DETR model)"),$qe.forEach(t),Fxt.forEach(t),vbr=i(xa),c8=n(xa,"P",{});var kqe=s(c8);Fbr=r(kqe,"The model is set in evaluation mode by default using "),WFe=n(kqe,"CODE",{});var Ext=s(WFe);Tbr=r(Ext,"model.eval()"),Ext.forEach(t),Mbr=r(kqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),QFe=n(kqe,"CODE",{});var Cxt=s(QFe);Ebr=r(Cxt,"model.train()"),Cxt.forEach(t),kqe.forEach(t),Cbr=i(xa),T(f8.$$.fragment,xa),xa.forEach(t),Ll.forEach(t),qze=i(f),rc=n(f,"H2",{class:!0});var WQe=s(rc);m8=n(WQe,"A",{id:!0,class:!0,href:!0});var wxt=s(m8);HFe=n(wxt,"SPAN",{});var Axt=s(HFe);T(Vy.$$.fragment,Axt),Axt.forEach(t),wxt.forEach(t),wbr=i(WQe),UFe=n(WQe,"SPAN",{});var Lxt=s(UFe);Abr=r(Lxt,"AutoModelForSemanticSegmentation"),Lxt.forEach(t),WQe.forEach(t),jze=i(f),Zo=n(f,"DIV",{class:!0});var yl=s(Zo);T(Xy.$$.fragment,yl),Lbr=i(yl),tc=n(yl,"P",{});var zte=s(tc);ybr=r(zte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),bU=n(zte,"A",{href:!0});var yxt=s(bU);xbr=r(yxt,"from_pretrained()"),yxt.forEach(t),$br=r(zte," class method or the "),vU=n(zte,"A",{href:!0});var xxt=s(vU);kbr=r(xxt,"from_config()"),xxt.forEach(t),Sbr=r(zte,` class
method.`),zte.forEach(t),Rbr=i(yl),zy=n(yl,"P",{});var QQe=s(zy);Pbr=r(QQe,"This class cannot be instantiated directly using "),JFe=n(QQe,"CODE",{});var $xt=s(JFe);Bbr=r($xt,"__init__()"),$xt.forEach(t),Ibr=r(QQe," (throws an error)."),QQe.forEach(t),Nbr=i(yl),kt=n(yl,"DIV",{class:!0});var lA=s(kt);T(Wy.$$.fragment,lA),qbr=i(lA),YFe=n(lA,"P",{});var kxt=s(YFe);jbr=r(kxt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),kxt.forEach(t),Dbr=i(lA),ac=n(lA,"P",{});var Wte=s(ac);Gbr=r(Wte,`Note:
Loading a model from its configuration file does `),KFe=n(Wte,"STRONG",{});var Sxt=s(KFe);Obr=r(Sxt,"not"),Sxt.forEach(t),Vbr=r(Wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),FU=n(Wte,"A",{href:!0});var Rxt=s(FU);Xbr=r(Rxt,"from_pretrained()"),Rxt.forEach(t),zbr=r(Wte," to load the model weights."),Wte.forEach(t),Wbr=i(lA),T(g8.$$.fragment,lA),lA.forEach(t),Qbr=i(yl),Fo=n(yl,"DIV",{class:!0});var $a=s(Fo);T(Qy.$$.fragment,$a),Hbr=i($a),ZFe=n($a,"P",{});var Pxt=s(ZFe);Ubr=r(Pxt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Pxt.forEach(t),Jbr=i($a),an=n($a,"P",{});var iA=s(an);Ybr=r(iA,"The model class to instantiate is selected based on the "),eTe=n(iA,"CODE",{});var Bxt=s(eTe);Kbr=r(Bxt,"model_type"),Bxt.forEach(t),Zbr=r(iA,` property of the config object (either
passed as an argument or loaded from `),oTe=n(iA,"CODE",{});var Ixt=s(oTe);e3r=r(Ixt,"pretrained_model_name_or_path"),Ixt.forEach(t),o3r=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rTe=n(iA,"CODE",{});var Nxt=s(rTe);r3r=r(Nxt,"pretrained_model_name_or_path"),Nxt.forEach(t),t3r=r(iA,":"),iA.forEach(t),a3r=i($a),at=n($a,"UL",{});var xl=s(at);h8=n(xl,"LI",{});var Sqe=s(h8);tTe=n(Sqe,"STRONG",{});var qxt=s(tTe);n3r=r(qxt,"beit"),qxt.forEach(t),s3r=r(Sqe," \u2014 "),TU=n(Sqe,"A",{href:!0});var jxt=s(TU);l3r=r(jxt,"BeitForSemanticSegmentation"),jxt.forEach(t),i3r=r(Sqe," (BEiT model)"),Sqe.forEach(t),d3r=i(xl),p8=n(xl,"LI",{});var Rqe=s(p8);aTe=n(Rqe,"STRONG",{});var Dxt=s(aTe);c3r=r(Dxt,"data2vec-vision"),Dxt.forEach(t),f3r=r(Rqe," \u2014 "),MU=n(Rqe,"A",{href:!0});var Gxt=s(MU);m3r=r(Gxt,"Data2VecVisionForSemanticSegmentation"),Gxt.forEach(t),g3r=r(Rqe," (Data2VecVision model)"),Rqe.forEach(t),h3r=i(xl),_8=n(xl,"LI",{});var Pqe=s(_8);nTe=n(Pqe,"STRONG",{});var Oxt=s(nTe);p3r=r(Oxt,"dpt"),Oxt.forEach(t),_3r=r(Pqe," \u2014 "),EU=n(Pqe,"A",{href:!0});var Vxt=s(EU);u3r=r(Vxt,"DPTForSemanticSegmentation"),Vxt.forEach(t),b3r=r(Pqe," (DPT model)"),Pqe.forEach(t),v3r=i(xl),u8=n(xl,"LI",{});var Bqe=s(u8);sTe=n(Bqe,"STRONG",{});var Xxt=s(sTe);F3r=r(Xxt,"mobilevit"),Xxt.forEach(t),T3r=r(Bqe," \u2014 "),CU=n(Bqe,"A",{href:!0});var zxt=s(CU);M3r=r(zxt,"MobileViTForSemanticSegmentation"),zxt.forEach(t),E3r=r(Bqe," (MobileViT model)"),Bqe.forEach(t),C3r=i(xl),b8=n(xl,"LI",{});var Iqe=s(b8);lTe=n(Iqe,"STRONG",{});var Wxt=s(lTe);w3r=r(Wxt,"segformer"),Wxt.forEach(t),A3r=r(Iqe," \u2014 "),wU=n(Iqe,"A",{href:!0});var Qxt=s(wU);L3r=r(Qxt,"SegformerForSemanticSegmentation"),Qxt.forEach(t),y3r=r(Iqe," (SegFormer model)"),Iqe.forEach(t),xl.forEach(t),x3r=i($a),v8=n($a,"P",{});var Nqe=s(v8);$3r=r(Nqe,"The model is set in evaluation mode by default using "),iTe=n(Nqe,"CODE",{});var Hxt=s(iTe);k3r=r(Hxt,"model.eval()"),Hxt.forEach(t),S3r=r(Nqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dTe=n(Nqe,"CODE",{});var Uxt=s(dTe);R3r=r(Uxt,"model.train()"),Uxt.forEach(t),Nqe.forEach(t),P3r=i($a),T(F8.$$.fragment,$a),$a.forEach(t),yl.forEach(t),Dze=i(f),nc=n(f,"H2",{class:!0});var HQe=s(nc);T8=n(HQe,"A",{id:!0,class:!0,href:!0});var Jxt=s(T8);cTe=n(Jxt,"SPAN",{});var Yxt=s(cTe);T(Hy.$$.fragment,Yxt),Yxt.forEach(t),Jxt.forEach(t),B3r=i(HQe),fTe=n(HQe,"SPAN",{});var Kxt=s(fTe);I3r=r(Kxt,"AutoModelForInstanceSegmentation"),Kxt.forEach(t),HQe.forEach(t),Gze=i(f),er=n(f,"DIV",{class:!0});var $l=s(er);T(Uy.$$.fragment,$l),N3r=i($l),sc=n($l,"P",{});var Qte=s(sc);q3r=r(Qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),AU=n(Qte,"A",{href:!0});var Zxt=s(AU);j3r=r(Zxt,"from_pretrained()"),Zxt.forEach(t),D3r=r(Qte," class method or the "),LU=n(Qte,"A",{href:!0});var e$t=s(LU);G3r=r(e$t,"from_config()"),e$t.forEach(t),O3r=r(Qte,` class
method.`),Qte.forEach(t),V3r=i($l),Jy=n($l,"P",{});var UQe=s(Jy);X3r=r(UQe,"This class cannot be instantiated directly using "),mTe=n(UQe,"CODE",{});var o$t=s(mTe);z3r=r(o$t,"__init__()"),o$t.forEach(t),W3r=r(UQe," (throws an error)."),UQe.forEach(t),Q3r=i($l),St=n($l,"DIV",{class:!0});var dA=s(St);T(Yy.$$.fragment,dA),H3r=i(dA),gTe=n(dA,"P",{});var r$t=s(gTe);U3r=r(r$t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),r$t.forEach(t),J3r=i(dA),lc=n(dA,"P",{});var Hte=s(lc);Y3r=r(Hte,`Note:
Loading a model from its configuration file does `),hTe=n(Hte,"STRONG",{});var t$t=s(hTe);K3r=r(t$t,"not"),t$t.forEach(t),Z3r=r(Hte,` load the model weights. It only affects the
model\u2019s configuration. Use `),yU=n(Hte,"A",{href:!0});var a$t=s(yU);evr=r(a$t,"from_pretrained()"),a$t.forEach(t),ovr=r(Hte," to load the model weights."),Hte.forEach(t),rvr=i(dA),T(M8.$$.fragment,dA),dA.forEach(t),tvr=i($l),To=n($l,"DIV",{class:!0});var ka=s(To);T(Ky.$$.fragment,ka),avr=i(ka),pTe=n(ka,"P",{});var n$t=s(pTe);nvr=r(n$t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),n$t.forEach(t),svr=i(ka),nn=n(ka,"P",{});var cA=s(nn);lvr=r(cA,"The model class to instantiate is selected based on the "),_Te=n(cA,"CODE",{});var s$t=s(_Te);ivr=r(s$t,"model_type"),s$t.forEach(t),dvr=r(cA,` property of the config object (either
passed as an argument or loaded from `),uTe=n(cA,"CODE",{});var l$t=s(uTe);cvr=r(l$t,"pretrained_model_name_or_path"),l$t.forEach(t),fvr=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bTe=n(cA,"CODE",{});var i$t=s(bTe);mvr=r(i$t,"pretrained_model_name_or_path"),i$t.forEach(t),gvr=r(cA,":"),cA.forEach(t),hvr=i(ka),vTe=n(ka,"UL",{});var d$t=s(vTe);E8=n(d$t,"LI",{});var qqe=s(E8);FTe=n(qqe,"STRONG",{});var c$t=s(FTe);pvr=r(c$t,"maskformer"),c$t.forEach(t),_vr=r(qqe," \u2014 "),xU=n(qqe,"A",{href:!0});var f$t=s(xU);uvr=r(f$t,"MaskFormerForInstanceSegmentation"),f$t.forEach(t),bvr=r(qqe," (MaskFormer model)"),qqe.forEach(t),d$t.forEach(t),vvr=i(ka),C8=n(ka,"P",{});var jqe=s(C8);Fvr=r(jqe,"The model is set in evaluation mode by default using "),TTe=n(jqe,"CODE",{});var m$t=s(TTe);Tvr=r(m$t,"model.eval()"),m$t.forEach(t),Mvr=r(jqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),MTe=n(jqe,"CODE",{});var g$t=s(MTe);Evr=r(g$t,"model.train()"),g$t.forEach(t),jqe.forEach(t),Cvr=i(ka),T(w8.$$.fragment,ka),ka.forEach(t),$l.forEach(t),Oze=i(f),ic=n(f,"H2",{class:!0});var JQe=s(ic);A8=n(JQe,"A",{id:!0,class:!0,href:!0});var h$t=s(A8);ETe=n(h$t,"SPAN",{});var p$t=s(ETe);T(Zy.$$.fragment,p$t),p$t.forEach(t),h$t.forEach(t),wvr=i(JQe),CTe=n(JQe,"SPAN",{});var _$t=s(CTe);Avr=r(_$t,"TFAutoModel"),_$t.forEach(t),JQe.forEach(t),Vze=i(f),or=n(f,"DIV",{class:!0});var kl=s(or);T(ex.$$.fragment,kl),Lvr=i(kl),dc=n(kl,"P",{});var Ute=s(dc);yvr=r(Ute,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),$U=n(Ute,"A",{href:!0});var u$t=s($U);xvr=r(u$t,"from_pretrained()"),u$t.forEach(t),$vr=r(Ute," class method or the "),kU=n(Ute,"A",{href:!0});var b$t=s(kU);kvr=r(b$t,"from_config()"),b$t.forEach(t),Svr=r(Ute,` class
method.`),Ute.forEach(t),Rvr=i(kl),ox=n(kl,"P",{});var YQe=s(ox);Pvr=r(YQe,"This class cannot be instantiated directly using "),wTe=n(YQe,"CODE",{});var v$t=s(wTe);Bvr=r(v$t,"__init__()"),v$t.forEach(t),Ivr=r(YQe," (throws an error)."),YQe.forEach(t),Nvr=i(kl),Rt=n(kl,"DIV",{class:!0});var fA=s(Rt);T(rx.$$.fragment,fA),qvr=i(fA),ATe=n(fA,"P",{});var F$t=s(ATe);jvr=r(F$t,"Instantiates one of the base model classes of the library from a configuration."),F$t.forEach(t),Dvr=i(fA),cc=n(fA,"P",{});var Jte=s(cc);Gvr=r(Jte,`Note:
Loading a model from its configuration file does `),LTe=n(Jte,"STRONG",{});var T$t=s(LTe);Ovr=r(T$t,"not"),T$t.forEach(t),Vvr=r(Jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),SU=n(Jte,"A",{href:!0});var M$t=s(SU);Xvr=r(M$t,"from_pretrained()"),M$t.forEach(t),zvr=r(Jte," to load the model weights."),Jte.forEach(t),Wvr=i(fA),T(L8.$$.fragment,fA),fA.forEach(t),Qvr=i(kl),xr=n(kl,"DIV",{class:!0});var Sl=s(xr);T(tx.$$.fragment,Sl),Hvr=i(Sl),yTe=n(Sl,"P",{});var E$t=s(yTe);Uvr=r(E$t,"Instantiate one of the base model classes of the library from a pretrained model."),E$t.forEach(t),Jvr=i(Sl),sn=n(Sl,"P",{});var mA=s(sn);Yvr=r(mA,"The model class to instantiate is selected based on the "),xTe=n(mA,"CODE",{});var C$t=s(xTe);Kvr=r(C$t,"model_type"),C$t.forEach(t),Zvr=r(mA,` property of the config object (either
passed as an argument or loaded from `),$Te=n(mA,"CODE",{});var w$t=s($Te);eFr=r(w$t,"pretrained_model_name_or_path"),w$t.forEach(t),oFr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kTe=n(mA,"CODE",{});var A$t=s(kTe);rFr=r(A$t,"pretrained_model_name_or_path"),A$t.forEach(t),tFr=r(mA,":"),mA.forEach(t),aFr=i(Sl),q=n(Sl,"UL",{});var D=s(q);y8=n(D,"LI",{});var Dqe=s(y8);STe=n(Dqe,"STRONG",{});var L$t=s(STe);nFr=r(L$t,"albert"),L$t.forEach(t),sFr=r(Dqe," \u2014 "),RU=n(Dqe,"A",{href:!0});var y$t=s(RU);lFr=r(y$t,"TFAlbertModel"),y$t.forEach(t),iFr=r(Dqe," (ALBERT model)"),Dqe.forEach(t),dFr=i(D),x8=n(D,"LI",{});var Gqe=s(x8);RTe=n(Gqe,"STRONG",{});var x$t=s(RTe);cFr=r(x$t,"bart"),x$t.forEach(t),fFr=r(Gqe," \u2014 "),PU=n(Gqe,"A",{href:!0});var $$t=s(PU);mFr=r($$t,"TFBartModel"),$$t.forEach(t),gFr=r(Gqe," (BART model)"),Gqe.forEach(t),hFr=i(D),$8=n(D,"LI",{});var Oqe=s($8);PTe=n(Oqe,"STRONG",{});var k$t=s(PTe);pFr=r(k$t,"bert"),k$t.forEach(t),_Fr=r(Oqe," \u2014 "),BU=n(Oqe,"A",{href:!0});var S$t=s(BU);uFr=r(S$t,"TFBertModel"),S$t.forEach(t),bFr=r(Oqe," (BERT model)"),Oqe.forEach(t),vFr=i(D),k8=n(D,"LI",{});var Vqe=s(k8);BTe=n(Vqe,"STRONG",{});var R$t=s(BTe);FFr=r(R$t,"blenderbot"),R$t.forEach(t),TFr=r(Vqe," \u2014 "),IU=n(Vqe,"A",{href:!0});var P$t=s(IU);MFr=r(P$t,"TFBlenderbotModel"),P$t.forEach(t),EFr=r(Vqe," (Blenderbot model)"),Vqe.forEach(t),CFr=i(D),S8=n(D,"LI",{});var Xqe=s(S8);ITe=n(Xqe,"STRONG",{});var B$t=s(ITe);wFr=r(B$t,"blenderbot-small"),B$t.forEach(t),AFr=r(Xqe," \u2014 "),NU=n(Xqe,"A",{href:!0});var I$t=s(NU);LFr=r(I$t,"TFBlenderbotSmallModel"),I$t.forEach(t),yFr=r(Xqe," (BlenderbotSmall model)"),Xqe.forEach(t),xFr=i(D),R8=n(D,"LI",{});var zqe=s(R8);NTe=n(zqe,"STRONG",{});var N$t=s(NTe);$Fr=r(N$t,"camembert"),N$t.forEach(t),kFr=r(zqe," \u2014 "),qU=n(zqe,"A",{href:!0});var q$t=s(qU);SFr=r(q$t,"TFCamembertModel"),q$t.forEach(t),RFr=r(zqe," (CamemBERT model)"),zqe.forEach(t),PFr=i(D),P8=n(D,"LI",{});var Wqe=s(P8);qTe=n(Wqe,"STRONG",{});var j$t=s(qTe);BFr=r(j$t,"clip"),j$t.forEach(t),IFr=r(Wqe," \u2014 "),jU=n(Wqe,"A",{href:!0});var D$t=s(jU);NFr=r(D$t,"TFCLIPModel"),D$t.forEach(t),qFr=r(Wqe," (CLIP model)"),Wqe.forEach(t),jFr=i(D),B8=n(D,"LI",{});var Qqe=s(B8);jTe=n(Qqe,"STRONG",{});var G$t=s(jTe);DFr=r(G$t,"convbert"),G$t.forEach(t),GFr=r(Qqe," \u2014 "),DU=n(Qqe,"A",{href:!0});var O$t=s(DU);OFr=r(O$t,"TFConvBertModel"),O$t.forEach(t),VFr=r(Qqe," (ConvBERT model)"),Qqe.forEach(t),XFr=i(D),I8=n(D,"LI",{});var Hqe=s(I8);DTe=n(Hqe,"STRONG",{});var V$t=s(DTe);zFr=r(V$t,"convnext"),V$t.forEach(t),WFr=r(Hqe," \u2014 "),GU=n(Hqe,"A",{href:!0});var X$t=s(GU);QFr=r(X$t,"TFConvNextModel"),X$t.forEach(t),HFr=r(Hqe," (ConvNeXT model)"),Hqe.forEach(t),UFr=i(D),N8=n(D,"LI",{});var Uqe=s(N8);GTe=n(Uqe,"STRONG",{});var z$t=s(GTe);JFr=r(z$t,"ctrl"),z$t.forEach(t),YFr=r(Uqe," \u2014 "),OU=n(Uqe,"A",{href:!0});var W$t=s(OU);KFr=r(W$t,"TFCTRLModel"),W$t.forEach(t),ZFr=r(Uqe," (CTRL model)"),Uqe.forEach(t),eTr=i(D),q8=n(D,"LI",{});var Jqe=s(q8);OTe=n(Jqe,"STRONG",{});var Q$t=s(OTe);oTr=r(Q$t,"data2vec-vision"),Q$t.forEach(t),rTr=r(Jqe," \u2014 "),VU=n(Jqe,"A",{href:!0});var H$t=s(VU);tTr=r(H$t,"TFData2VecVisionModel"),H$t.forEach(t),aTr=r(Jqe," (Data2VecVision model)"),Jqe.forEach(t),nTr=i(D),j8=n(D,"LI",{});var Yqe=s(j8);VTe=n(Yqe,"STRONG",{});var U$t=s(VTe);sTr=r(U$t,"deberta"),U$t.forEach(t),lTr=r(Yqe," \u2014 "),XU=n(Yqe,"A",{href:!0});var J$t=s(XU);iTr=r(J$t,"TFDebertaModel"),J$t.forEach(t),dTr=r(Yqe," (DeBERTa model)"),Yqe.forEach(t),cTr=i(D),D8=n(D,"LI",{});var Kqe=s(D8);XTe=n(Kqe,"STRONG",{});var Y$t=s(XTe);fTr=r(Y$t,"deberta-v2"),Y$t.forEach(t),mTr=r(Kqe," \u2014 "),zU=n(Kqe,"A",{href:!0});var K$t=s(zU);gTr=r(K$t,"TFDebertaV2Model"),K$t.forEach(t),hTr=r(Kqe," (DeBERTa-v2 model)"),Kqe.forEach(t),pTr=i(D),G8=n(D,"LI",{});var Zqe=s(G8);zTe=n(Zqe,"STRONG",{});var Z$t=s(zTe);_Tr=r(Z$t,"deit"),Z$t.forEach(t),uTr=r(Zqe," \u2014 "),WU=n(Zqe,"A",{href:!0});var ekt=s(WU);bTr=r(ekt,"TFDeiTModel"),ekt.forEach(t),vTr=r(Zqe," (DeiT model)"),Zqe.forEach(t),FTr=i(D),O8=n(D,"LI",{});var eje=s(O8);WTe=n(eje,"STRONG",{});var okt=s(WTe);TTr=r(okt,"distilbert"),okt.forEach(t),MTr=r(eje," \u2014 "),QU=n(eje,"A",{href:!0});var rkt=s(QU);ETr=r(rkt,"TFDistilBertModel"),rkt.forEach(t),CTr=r(eje," (DistilBERT model)"),eje.forEach(t),wTr=i(D),V8=n(D,"LI",{});var oje=s(V8);QTe=n(oje,"STRONG",{});var tkt=s(QTe);ATr=r(tkt,"dpr"),tkt.forEach(t),LTr=r(oje," \u2014 "),HU=n(oje,"A",{href:!0});var akt=s(HU);yTr=r(akt,"TFDPRQuestionEncoder"),akt.forEach(t),xTr=r(oje," (DPR model)"),oje.forEach(t),$Tr=i(D),X8=n(D,"LI",{});var rje=s(X8);HTe=n(rje,"STRONG",{});var nkt=s(HTe);kTr=r(nkt,"electra"),nkt.forEach(t),STr=r(rje," \u2014 "),UU=n(rje,"A",{href:!0});var skt=s(UU);RTr=r(skt,"TFElectraModel"),skt.forEach(t),PTr=r(rje," (ELECTRA model)"),rje.forEach(t),BTr=i(D),z8=n(D,"LI",{});var tje=s(z8);UTe=n(tje,"STRONG",{});var lkt=s(UTe);ITr=r(lkt,"flaubert"),lkt.forEach(t),NTr=r(tje," \u2014 "),JU=n(tje,"A",{href:!0});var ikt=s(JU);qTr=r(ikt,"TFFlaubertModel"),ikt.forEach(t),jTr=r(tje," (FlauBERT model)"),tje.forEach(t),DTr=i(D),Ks=n(D,"LI",{});var XS=s(Ks);JTe=n(XS,"STRONG",{});var dkt=s(JTe);GTr=r(dkt,"funnel"),dkt.forEach(t),OTr=r(XS," \u2014 "),YU=n(XS,"A",{href:!0});var ckt=s(YU);VTr=r(ckt,"TFFunnelModel"),ckt.forEach(t),XTr=r(XS," or "),KU=n(XS,"A",{href:!0});var fkt=s(KU);zTr=r(fkt,"TFFunnelBaseModel"),fkt.forEach(t),WTr=r(XS," (Funnel Transformer model)"),XS.forEach(t),QTr=i(D),W8=n(D,"LI",{});var aje=s(W8);YTe=n(aje,"STRONG",{});var mkt=s(YTe);HTr=r(mkt,"gpt2"),mkt.forEach(t),UTr=r(aje," \u2014 "),ZU=n(aje,"A",{href:!0});var gkt=s(ZU);JTr=r(gkt,"TFGPT2Model"),gkt.forEach(t),YTr=r(aje," (OpenAI GPT-2 model)"),aje.forEach(t),KTr=i(D),Q8=n(D,"LI",{});var nje=s(Q8);KTe=n(nje,"STRONG",{});var hkt=s(KTe);ZTr=r(hkt,"gptj"),hkt.forEach(t),e7r=r(nje," \u2014 "),eJ=n(nje,"A",{href:!0});var pkt=s(eJ);o7r=r(pkt,"TFGPTJModel"),pkt.forEach(t),r7r=r(nje," (GPT-J model)"),nje.forEach(t),t7r=i(D),H8=n(D,"LI",{});var sje=s(H8);ZTe=n(sje,"STRONG",{});var _kt=s(ZTe);a7r=r(_kt,"hubert"),_kt.forEach(t),n7r=r(sje," \u2014 "),oJ=n(sje,"A",{href:!0});var ukt=s(oJ);s7r=r(ukt,"TFHubertModel"),ukt.forEach(t),l7r=r(sje," (Hubert model)"),sje.forEach(t),i7r=i(D),U8=n(D,"LI",{});var lje=s(U8);e7e=n(lje,"STRONG",{});var bkt=s(e7e);d7r=r(bkt,"layoutlm"),bkt.forEach(t),c7r=r(lje," \u2014 "),rJ=n(lje,"A",{href:!0});var vkt=s(rJ);f7r=r(vkt,"TFLayoutLMModel"),vkt.forEach(t),m7r=r(lje," (LayoutLM model)"),lje.forEach(t),g7r=i(D),J8=n(D,"LI",{});var ije=s(J8);o7e=n(ije,"STRONG",{});var Fkt=s(o7e);h7r=r(Fkt,"led"),Fkt.forEach(t),p7r=r(ije," \u2014 "),tJ=n(ije,"A",{href:!0});var Tkt=s(tJ);_7r=r(Tkt,"TFLEDModel"),Tkt.forEach(t),u7r=r(ije," (LED model)"),ije.forEach(t),b7r=i(D),Y8=n(D,"LI",{});var dje=s(Y8);r7e=n(dje,"STRONG",{});var Mkt=s(r7e);v7r=r(Mkt,"longformer"),Mkt.forEach(t),F7r=r(dje," \u2014 "),aJ=n(dje,"A",{href:!0});var Ekt=s(aJ);T7r=r(Ekt,"TFLongformerModel"),Ekt.forEach(t),M7r=r(dje," (Longformer model)"),dje.forEach(t),E7r=i(D),K8=n(D,"LI",{});var cje=s(K8);t7e=n(cje,"STRONG",{});var Ckt=s(t7e);C7r=r(Ckt,"lxmert"),Ckt.forEach(t),w7r=r(cje," \u2014 "),nJ=n(cje,"A",{href:!0});var wkt=s(nJ);A7r=r(wkt,"TFLxmertModel"),wkt.forEach(t),L7r=r(cje," (LXMERT model)"),cje.forEach(t),y7r=i(D),Z8=n(D,"LI",{});var fje=s(Z8);a7e=n(fje,"STRONG",{});var Akt=s(a7e);x7r=r(Akt,"marian"),Akt.forEach(t),$7r=r(fje," \u2014 "),sJ=n(fje,"A",{href:!0});var Lkt=s(sJ);k7r=r(Lkt,"TFMarianModel"),Lkt.forEach(t),S7r=r(fje," (Marian model)"),fje.forEach(t),R7r=i(D),e9=n(D,"LI",{});var mje=s(e9);n7e=n(mje,"STRONG",{});var ykt=s(n7e);P7r=r(ykt,"mbart"),ykt.forEach(t),B7r=r(mje," \u2014 "),lJ=n(mje,"A",{href:!0});var xkt=s(lJ);I7r=r(xkt,"TFMBartModel"),xkt.forEach(t),N7r=r(mje," (mBART model)"),mje.forEach(t),q7r=i(D),o9=n(D,"LI",{});var gje=s(o9);s7e=n(gje,"STRONG",{});var $kt=s(s7e);j7r=r($kt,"mobilebert"),$kt.forEach(t),D7r=r(gje," \u2014 "),iJ=n(gje,"A",{href:!0});var kkt=s(iJ);G7r=r(kkt,"TFMobileBertModel"),kkt.forEach(t),O7r=r(gje," (MobileBERT model)"),gje.forEach(t),V7r=i(D),r9=n(D,"LI",{});var hje=s(r9);l7e=n(hje,"STRONG",{});var Skt=s(l7e);X7r=r(Skt,"mpnet"),Skt.forEach(t),z7r=r(hje," \u2014 "),dJ=n(hje,"A",{href:!0});var Rkt=s(dJ);W7r=r(Rkt,"TFMPNetModel"),Rkt.forEach(t),Q7r=r(hje," (MPNet model)"),hje.forEach(t),H7r=i(D),t9=n(D,"LI",{});var pje=s(t9);i7e=n(pje,"STRONG",{});var Pkt=s(i7e);U7r=r(Pkt,"mt5"),Pkt.forEach(t),J7r=r(pje," \u2014 "),cJ=n(pje,"A",{href:!0});var Bkt=s(cJ);Y7r=r(Bkt,"TFMT5Model"),Bkt.forEach(t),K7r=r(pje," (MT5 model)"),pje.forEach(t),Z7r=i(D),a9=n(D,"LI",{});var _je=s(a9);d7e=n(_je,"STRONG",{});var Ikt=s(d7e);e8r=r(Ikt,"openai-gpt"),Ikt.forEach(t),o8r=r(_je," \u2014 "),fJ=n(_je,"A",{href:!0});var Nkt=s(fJ);r8r=r(Nkt,"TFOpenAIGPTModel"),Nkt.forEach(t),t8r=r(_je," (OpenAI GPT model)"),_je.forEach(t),a8r=i(D),n9=n(D,"LI",{});var uje=s(n9);c7e=n(uje,"STRONG",{});var qkt=s(c7e);n8r=r(qkt,"opt"),qkt.forEach(t),s8r=r(uje," \u2014 "),mJ=n(uje,"A",{href:!0});var jkt=s(mJ);l8r=r(jkt,"TFOPTModel"),jkt.forEach(t),i8r=r(uje," (OPT model)"),uje.forEach(t),d8r=i(D),s9=n(D,"LI",{});var bje=s(s9);f7e=n(bje,"STRONG",{});var Dkt=s(f7e);c8r=r(Dkt,"pegasus"),Dkt.forEach(t),f8r=r(bje," \u2014 "),gJ=n(bje,"A",{href:!0});var Gkt=s(gJ);m8r=r(Gkt,"TFPegasusModel"),Gkt.forEach(t),g8r=r(bje," (Pegasus model)"),bje.forEach(t),h8r=i(D),l9=n(D,"LI",{});var vje=s(l9);m7e=n(vje,"STRONG",{});var Okt=s(m7e);p8r=r(Okt,"regnet"),Okt.forEach(t),_8r=r(vje," \u2014 "),hJ=n(vje,"A",{href:!0});var Vkt=s(hJ);u8r=r(Vkt,"TFRegNetModel"),Vkt.forEach(t),b8r=r(vje," (RegNet model)"),vje.forEach(t),v8r=i(D),i9=n(D,"LI",{});var Fje=s(i9);g7e=n(Fje,"STRONG",{});var Xkt=s(g7e);F8r=r(Xkt,"rembert"),Xkt.forEach(t),T8r=r(Fje," \u2014 "),pJ=n(Fje,"A",{href:!0});var zkt=s(pJ);M8r=r(zkt,"TFRemBertModel"),zkt.forEach(t),E8r=r(Fje," (RemBERT model)"),Fje.forEach(t),C8r=i(D),d9=n(D,"LI",{});var Tje=s(d9);h7e=n(Tje,"STRONG",{});var Wkt=s(h7e);w8r=r(Wkt,"resnet"),Wkt.forEach(t),A8r=r(Tje," \u2014 "),_J=n(Tje,"A",{href:!0});var Qkt=s(_J);L8r=r(Qkt,"TFResNetModel"),Qkt.forEach(t),y8r=r(Tje," (ResNet model)"),Tje.forEach(t),x8r=i(D),c9=n(D,"LI",{});var Mje=s(c9);p7e=n(Mje,"STRONG",{});var Hkt=s(p7e);$8r=r(Hkt,"roberta"),Hkt.forEach(t),k8r=r(Mje," \u2014 "),uJ=n(Mje,"A",{href:!0});var Ukt=s(uJ);S8r=r(Ukt,"TFRobertaModel"),Ukt.forEach(t),R8r=r(Mje," (RoBERTa model)"),Mje.forEach(t),P8r=i(D),f9=n(D,"LI",{});var Eje=s(f9);_7e=n(Eje,"STRONG",{});var Jkt=s(_7e);B8r=r(Jkt,"roformer"),Jkt.forEach(t),I8r=r(Eje," \u2014 "),bJ=n(Eje,"A",{href:!0});var Ykt=s(bJ);N8r=r(Ykt,"TFRoFormerModel"),Ykt.forEach(t),q8r=r(Eje," (RoFormer model)"),Eje.forEach(t),j8r=i(D),m9=n(D,"LI",{});var Cje=s(m9);u7e=n(Cje,"STRONG",{});var Kkt=s(u7e);D8r=r(Kkt,"speech_to_text"),Kkt.forEach(t),G8r=r(Cje," \u2014 "),vJ=n(Cje,"A",{href:!0});var Zkt=s(vJ);O8r=r(Zkt,"TFSpeech2TextModel"),Zkt.forEach(t),V8r=r(Cje," (Speech2Text model)"),Cje.forEach(t),X8r=i(D),g9=n(D,"LI",{});var wje=s(g9);b7e=n(wje,"STRONG",{});var eSt=s(b7e);z8r=r(eSt,"swin"),eSt.forEach(t),W8r=r(wje," \u2014 "),FJ=n(wje,"A",{href:!0});var oSt=s(FJ);Q8r=r(oSt,"TFSwinModel"),oSt.forEach(t),H8r=r(wje," (Swin Transformer model)"),wje.forEach(t),U8r=i(D),h9=n(D,"LI",{});var Aje=s(h9);v7e=n(Aje,"STRONG",{});var rSt=s(v7e);J8r=r(rSt,"t5"),rSt.forEach(t),Y8r=r(Aje," \u2014 "),TJ=n(Aje,"A",{href:!0});var tSt=s(TJ);K8r=r(tSt,"TFT5Model"),tSt.forEach(t),Z8r=r(Aje," (T5 model)"),Aje.forEach(t),e9r=i(D),p9=n(D,"LI",{});var Lje=s(p9);F7e=n(Lje,"STRONG",{});var aSt=s(F7e);o9r=r(aSt,"tapas"),aSt.forEach(t),r9r=r(Lje," \u2014 "),MJ=n(Lje,"A",{href:!0});var nSt=s(MJ);t9r=r(nSt,"TFTapasModel"),nSt.forEach(t),a9r=r(Lje," (TAPAS model)"),Lje.forEach(t),n9r=i(D),_9=n(D,"LI",{});var yje=s(_9);T7e=n(yje,"STRONG",{});var sSt=s(T7e);s9r=r(sSt,"transfo-xl"),sSt.forEach(t),l9r=r(yje," \u2014 "),EJ=n(yje,"A",{href:!0});var lSt=s(EJ);i9r=r(lSt,"TFTransfoXLModel"),lSt.forEach(t),d9r=r(yje," (Transformer-XL model)"),yje.forEach(t),c9r=i(D),u9=n(D,"LI",{});var xje=s(u9);M7e=n(xje,"STRONG",{});var iSt=s(M7e);f9r=r(iSt,"vit"),iSt.forEach(t),m9r=r(xje," \u2014 "),CJ=n(xje,"A",{href:!0});var dSt=s(CJ);g9r=r(dSt,"TFViTModel"),dSt.forEach(t),h9r=r(xje," (ViT model)"),xje.forEach(t),p9r=i(D),b9=n(D,"LI",{});var $je=s(b9);E7e=n($je,"STRONG",{});var cSt=s(E7e);_9r=r(cSt,"vit_mae"),cSt.forEach(t),u9r=r($je," \u2014 "),wJ=n($je,"A",{href:!0});var fSt=s(wJ);b9r=r(fSt,"TFViTMAEModel"),fSt.forEach(t),v9r=r($je," (ViTMAE model)"),$je.forEach(t),F9r=i(D),v9=n(D,"LI",{});var kje=s(v9);C7e=n(kje,"STRONG",{});var mSt=s(C7e);T9r=r(mSt,"wav2vec2"),mSt.forEach(t),M9r=r(kje," \u2014 "),AJ=n(kje,"A",{href:!0});var gSt=s(AJ);E9r=r(gSt,"TFWav2Vec2Model"),gSt.forEach(t),C9r=r(kje," (Wav2Vec2 model)"),kje.forEach(t),w9r=i(D),F9=n(D,"LI",{});var Sje=s(F9);w7e=n(Sje,"STRONG",{});var hSt=s(w7e);A9r=r(hSt,"xlm"),hSt.forEach(t),L9r=r(Sje," \u2014 "),LJ=n(Sje,"A",{href:!0});var pSt=s(LJ);y9r=r(pSt,"TFXLMModel"),pSt.forEach(t),x9r=r(Sje," (XLM model)"),Sje.forEach(t),$9r=i(D),T9=n(D,"LI",{});var Rje=s(T9);A7e=n(Rje,"STRONG",{});var _St=s(A7e);k9r=r(_St,"xlm-roberta"),_St.forEach(t),S9r=r(Rje," \u2014 "),yJ=n(Rje,"A",{href:!0});var uSt=s(yJ);R9r=r(uSt,"TFXLMRobertaModel"),uSt.forEach(t),P9r=r(Rje," (XLM-RoBERTa model)"),Rje.forEach(t),B9r=i(D),M9=n(D,"LI",{});var Pje=s(M9);L7e=n(Pje,"STRONG",{});var bSt=s(L7e);I9r=r(bSt,"xlnet"),bSt.forEach(t),N9r=r(Pje," \u2014 "),xJ=n(Pje,"A",{href:!0});var vSt=s(xJ);q9r=r(vSt,"TFXLNetModel"),vSt.forEach(t),j9r=r(Pje," (XLNet model)"),Pje.forEach(t),D.forEach(t),D9r=i(Sl),T(E9.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),Xze=i(f),fc=n(f,"H2",{class:!0});var KQe=s(fc);C9=n(KQe,"A",{id:!0,class:!0,href:!0});var FSt=s(C9);y7e=n(FSt,"SPAN",{});var TSt=s(y7e);T(ax.$$.fragment,TSt),TSt.forEach(t),FSt.forEach(t),G9r=i(KQe),x7e=n(KQe,"SPAN",{});var MSt=s(x7e);O9r=r(MSt,"TFAutoModelForPreTraining"),MSt.forEach(t),KQe.forEach(t),zze=i(f),rr=n(f,"DIV",{class:!0});var Rl=s(rr);T(nx.$$.fragment,Rl),V9r=i(Rl),mc=n(Rl,"P",{});var Yte=s(mc);X9r=r(Yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),$J=n(Yte,"A",{href:!0});var ESt=s($J);z9r=r(ESt,"from_pretrained()"),ESt.forEach(t),W9r=r(Yte," class method or the "),kJ=n(Yte,"A",{href:!0});var CSt=s(kJ);Q9r=r(CSt,"from_config()"),CSt.forEach(t),H9r=r(Yte,` class
method.`),Yte.forEach(t),U9r=i(Rl),sx=n(Rl,"P",{});var ZQe=s(sx);J9r=r(ZQe,"This class cannot be instantiated directly using "),$7e=n(ZQe,"CODE",{});var wSt=s($7e);Y9r=r(wSt,"__init__()"),wSt.forEach(t),K9r=r(ZQe," (throws an error)."),ZQe.forEach(t),Z9r=i(Rl),Pt=n(Rl,"DIV",{class:!0});var gA=s(Pt);T(lx.$$.fragment,gA),eMr=i(gA),k7e=n(gA,"P",{});var ASt=s(k7e);oMr=r(ASt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ASt.forEach(t),rMr=i(gA),gc=n(gA,"P",{});var Kte=s(gc);tMr=r(Kte,`Note:
Loading a model from its configuration file does `),S7e=n(Kte,"STRONG",{});var LSt=s(S7e);aMr=r(LSt,"not"),LSt.forEach(t),nMr=r(Kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),SJ=n(Kte,"A",{href:!0});var ySt=s(SJ);sMr=r(ySt,"from_pretrained()"),ySt.forEach(t),lMr=r(Kte," to load the model weights."),Kte.forEach(t),iMr=i(gA),T(w9.$$.fragment,gA),gA.forEach(t),dMr=i(Rl),$r=n(Rl,"DIV",{class:!0});var Pl=s($r);T(ix.$$.fragment,Pl),cMr=i(Pl),R7e=n(Pl,"P",{});var xSt=s(R7e);fMr=r(xSt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),xSt.forEach(t),mMr=i(Pl),ln=n(Pl,"P",{});var hA=s(ln);gMr=r(hA,"The model class to instantiate is selected based on the "),P7e=n(hA,"CODE",{});var $St=s(P7e);hMr=r($St,"model_type"),$St.forEach(t),pMr=r(hA,` property of the config object (either
passed as an argument or loaded from `),B7e=n(hA,"CODE",{});var kSt=s(B7e);_Mr=r(kSt,"pretrained_model_name_or_path"),kSt.forEach(t),uMr=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I7e=n(hA,"CODE",{});var SSt=s(I7e);bMr=r(SSt,"pretrained_model_name_or_path"),SSt.forEach(t),vMr=r(hA,":"),hA.forEach(t),FMr=i(Pl),se=n(Pl,"UL",{});var le=s(se);A9=n(le,"LI",{});var Bje=s(A9);N7e=n(Bje,"STRONG",{});var RSt=s(N7e);TMr=r(RSt,"albert"),RSt.forEach(t),MMr=r(Bje," \u2014 "),RJ=n(Bje,"A",{href:!0});var PSt=s(RJ);EMr=r(PSt,"TFAlbertForPreTraining"),PSt.forEach(t),CMr=r(Bje," (ALBERT model)"),Bje.forEach(t),wMr=i(le),L9=n(le,"LI",{});var Ije=s(L9);q7e=n(Ije,"STRONG",{});var BSt=s(q7e);AMr=r(BSt,"bart"),BSt.forEach(t),LMr=r(Ije," \u2014 "),PJ=n(Ije,"A",{href:!0});var ISt=s(PJ);yMr=r(ISt,"TFBartForConditionalGeneration"),ISt.forEach(t),xMr=r(Ije," (BART model)"),Ije.forEach(t),$Mr=i(le),y9=n(le,"LI",{});var Nje=s(y9);j7e=n(Nje,"STRONG",{});var NSt=s(j7e);kMr=r(NSt,"bert"),NSt.forEach(t),SMr=r(Nje," \u2014 "),BJ=n(Nje,"A",{href:!0});var qSt=s(BJ);RMr=r(qSt,"TFBertForPreTraining"),qSt.forEach(t),PMr=r(Nje," (BERT model)"),Nje.forEach(t),BMr=i(le),x9=n(le,"LI",{});var qje=s(x9);D7e=n(qje,"STRONG",{});var jSt=s(D7e);IMr=r(jSt,"camembert"),jSt.forEach(t),NMr=r(qje," \u2014 "),IJ=n(qje,"A",{href:!0});var DSt=s(IJ);qMr=r(DSt,"TFCamembertForMaskedLM"),DSt.forEach(t),jMr=r(qje," (CamemBERT model)"),qje.forEach(t),DMr=i(le),$9=n(le,"LI",{});var jje=s($9);G7e=n(jje,"STRONG",{});var GSt=s(G7e);GMr=r(GSt,"ctrl"),GSt.forEach(t),OMr=r(jje," \u2014 "),NJ=n(jje,"A",{href:!0});var OSt=s(NJ);VMr=r(OSt,"TFCTRLLMHeadModel"),OSt.forEach(t),XMr=r(jje," (CTRL model)"),jje.forEach(t),zMr=i(le),k9=n(le,"LI",{});var Dje=s(k9);O7e=n(Dje,"STRONG",{});var VSt=s(O7e);WMr=r(VSt,"distilbert"),VSt.forEach(t),QMr=r(Dje," \u2014 "),qJ=n(Dje,"A",{href:!0});var XSt=s(qJ);HMr=r(XSt,"TFDistilBertForMaskedLM"),XSt.forEach(t),UMr=r(Dje," (DistilBERT model)"),Dje.forEach(t),JMr=i(le),S9=n(le,"LI",{});var Gje=s(S9);V7e=n(Gje,"STRONG",{});var zSt=s(V7e);YMr=r(zSt,"electra"),zSt.forEach(t),KMr=r(Gje," \u2014 "),jJ=n(Gje,"A",{href:!0});var WSt=s(jJ);ZMr=r(WSt,"TFElectraForPreTraining"),WSt.forEach(t),e4r=r(Gje," (ELECTRA model)"),Gje.forEach(t),o4r=i(le),R9=n(le,"LI",{});var Oje=s(R9);X7e=n(Oje,"STRONG",{});var QSt=s(X7e);r4r=r(QSt,"flaubert"),QSt.forEach(t),t4r=r(Oje," \u2014 "),DJ=n(Oje,"A",{href:!0});var HSt=s(DJ);a4r=r(HSt,"TFFlaubertWithLMHeadModel"),HSt.forEach(t),n4r=r(Oje," (FlauBERT model)"),Oje.forEach(t),s4r=i(le),P9=n(le,"LI",{});var Vje=s(P9);z7e=n(Vje,"STRONG",{});var USt=s(z7e);l4r=r(USt,"funnel"),USt.forEach(t),i4r=r(Vje," \u2014 "),GJ=n(Vje,"A",{href:!0});var JSt=s(GJ);d4r=r(JSt,"TFFunnelForPreTraining"),JSt.forEach(t),c4r=r(Vje," (Funnel Transformer model)"),Vje.forEach(t),f4r=i(le),B9=n(le,"LI",{});var Xje=s(B9);W7e=n(Xje,"STRONG",{});var YSt=s(W7e);m4r=r(YSt,"gpt2"),YSt.forEach(t),g4r=r(Xje," \u2014 "),OJ=n(Xje,"A",{href:!0});var KSt=s(OJ);h4r=r(KSt,"TFGPT2LMHeadModel"),KSt.forEach(t),p4r=r(Xje," (OpenAI GPT-2 model)"),Xje.forEach(t),_4r=i(le),I9=n(le,"LI",{});var zje=s(I9);Q7e=n(zje,"STRONG",{});var ZSt=s(Q7e);u4r=r(ZSt,"layoutlm"),ZSt.forEach(t),b4r=r(zje," \u2014 "),VJ=n(zje,"A",{href:!0});var eRt=s(VJ);v4r=r(eRt,"TFLayoutLMForMaskedLM"),eRt.forEach(t),F4r=r(zje," (LayoutLM model)"),zje.forEach(t),T4r=i(le),N9=n(le,"LI",{});var Wje=s(N9);H7e=n(Wje,"STRONG",{});var oRt=s(H7e);M4r=r(oRt,"lxmert"),oRt.forEach(t),E4r=r(Wje," \u2014 "),XJ=n(Wje,"A",{href:!0});var rRt=s(XJ);C4r=r(rRt,"TFLxmertForPreTraining"),rRt.forEach(t),w4r=r(Wje," (LXMERT model)"),Wje.forEach(t),A4r=i(le),q9=n(le,"LI",{});var Qje=s(q9);U7e=n(Qje,"STRONG",{});var tRt=s(U7e);L4r=r(tRt,"mobilebert"),tRt.forEach(t),y4r=r(Qje," \u2014 "),zJ=n(Qje,"A",{href:!0});var aRt=s(zJ);x4r=r(aRt,"TFMobileBertForPreTraining"),aRt.forEach(t),$4r=r(Qje," (MobileBERT model)"),Qje.forEach(t),k4r=i(le),j9=n(le,"LI",{});var Hje=s(j9);J7e=n(Hje,"STRONG",{});var nRt=s(J7e);S4r=r(nRt,"mpnet"),nRt.forEach(t),R4r=r(Hje," \u2014 "),WJ=n(Hje,"A",{href:!0});var sRt=s(WJ);P4r=r(sRt,"TFMPNetForMaskedLM"),sRt.forEach(t),B4r=r(Hje," (MPNet model)"),Hje.forEach(t),I4r=i(le),D9=n(le,"LI",{});var Uje=s(D9);Y7e=n(Uje,"STRONG",{});var lRt=s(Y7e);N4r=r(lRt,"openai-gpt"),lRt.forEach(t),q4r=r(Uje," \u2014 "),QJ=n(Uje,"A",{href:!0});var iRt=s(QJ);j4r=r(iRt,"TFOpenAIGPTLMHeadModel"),iRt.forEach(t),D4r=r(Uje," (OpenAI GPT model)"),Uje.forEach(t),G4r=i(le),G9=n(le,"LI",{});var Jje=s(G9);K7e=n(Jje,"STRONG",{});var dRt=s(K7e);O4r=r(dRt,"roberta"),dRt.forEach(t),V4r=r(Jje," \u2014 "),HJ=n(Jje,"A",{href:!0});var cRt=s(HJ);X4r=r(cRt,"TFRobertaForMaskedLM"),cRt.forEach(t),z4r=r(Jje," (RoBERTa model)"),Jje.forEach(t),W4r=i(le),O9=n(le,"LI",{});var Yje=s(O9);Z7e=n(Yje,"STRONG",{});var fRt=s(Z7e);Q4r=r(fRt,"t5"),fRt.forEach(t),H4r=r(Yje," \u2014 "),UJ=n(Yje,"A",{href:!0});var mRt=s(UJ);U4r=r(mRt,"TFT5ForConditionalGeneration"),mRt.forEach(t),J4r=r(Yje," (T5 model)"),Yje.forEach(t),Y4r=i(le),V9=n(le,"LI",{});var Kje=s(V9);e8e=n(Kje,"STRONG",{});var gRt=s(e8e);K4r=r(gRt,"tapas"),gRt.forEach(t),Z4r=r(Kje," \u2014 "),JJ=n(Kje,"A",{href:!0});var hRt=s(JJ);eEr=r(hRt,"TFTapasForMaskedLM"),hRt.forEach(t),oEr=r(Kje," (TAPAS model)"),Kje.forEach(t),rEr=i(le),X9=n(le,"LI",{});var Zje=s(X9);o8e=n(Zje,"STRONG",{});var pRt=s(o8e);tEr=r(pRt,"transfo-xl"),pRt.forEach(t),aEr=r(Zje," \u2014 "),YJ=n(Zje,"A",{href:!0});var _Rt=s(YJ);nEr=r(_Rt,"TFTransfoXLLMHeadModel"),_Rt.forEach(t),sEr=r(Zje," (Transformer-XL model)"),Zje.forEach(t),lEr=i(le),z9=n(le,"LI",{});var eDe=s(z9);r8e=n(eDe,"STRONG",{});var uRt=s(r8e);iEr=r(uRt,"vit_mae"),uRt.forEach(t),dEr=r(eDe," \u2014 "),KJ=n(eDe,"A",{href:!0});var bRt=s(KJ);cEr=r(bRt,"TFViTMAEForPreTraining"),bRt.forEach(t),fEr=r(eDe," (ViTMAE model)"),eDe.forEach(t),mEr=i(le),W9=n(le,"LI",{});var oDe=s(W9);t8e=n(oDe,"STRONG",{});var vRt=s(t8e);gEr=r(vRt,"xlm"),vRt.forEach(t),hEr=r(oDe," \u2014 "),ZJ=n(oDe,"A",{href:!0});var FRt=s(ZJ);pEr=r(FRt,"TFXLMWithLMHeadModel"),FRt.forEach(t),_Er=r(oDe," (XLM model)"),oDe.forEach(t),uEr=i(le),Q9=n(le,"LI",{});var rDe=s(Q9);a8e=n(rDe,"STRONG",{});var TRt=s(a8e);bEr=r(TRt,"xlm-roberta"),TRt.forEach(t),vEr=r(rDe," \u2014 "),eY=n(rDe,"A",{href:!0});var MRt=s(eY);FEr=r(MRt,"TFXLMRobertaForMaskedLM"),MRt.forEach(t),TEr=r(rDe," (XLM-RoBERTa model)"),rDe.forEach(t),MEr=i(le),H9=n(le,"LI",{});var tDe=s(H9);n8e=n(tDe,"STRONG",{});var ERt=s(n8e);EEr=r(ERt,"xlnet"),ERt.forEach(t),CEr=r(tDe," \u2014 "),oY=n(tDe,"A",{href:!0});var CRt=s(oY);wEr=r(CRt,"TFXLNetLMHeadModel"),CRt.forEach(t),AEr=r(tDe," (XLNet model)"),tDe.forEach(t),le.forEach(t),LEr=i(Pl),T(U9.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),Wze=i(f),hc=n(f,"H2",{class:!0});var eHe=s(hc);J9=n(eHe,"A",{id:!0,class:!0,href:!0});var wRt=s(J9);s8e=n(wRt,"SPAN",{});var ARt=s(s8e);T(dx.$$.fragment,ARt),ARt.forEach(t),wRt.forEach(t),yEr=i(eHe),l8e=n(eHe,"SPAN",{});var LRt=s(l8e);xEr=r(LRt,"TFAutoModelForCausalLM"),LRt.forEach(t),eHe.forEach(t),Qze=i(f),tr=n(f,"DIV",{class:!0});var Bl=s(tr);T(cx.$$.fragment,Bl),$Er=i(Bl),pc=n(Bl,"P",{});var Zte=s(pc);kEr=r(Zte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),rY=n(Zte,"A",{href:!0});var yRt=s(rY);SEr=r(yRt,"from_pretrained()"),yRt.forEach(t),REr=r(Zte," class method or the "),tY=n(Zte,"A",{href:!0});var xRt=s(tY);PEr=r(xRt,"from_config()"),xRt.forEach(t),BEr=r(Zte,` class
method.`),Zte.forEach(t),IEr=i(Bl),fx=n(Bl,"P",{});var oHe=s(fx);NEr=r(oHe,"This class cannot be instantiated directly using "),i8e=n(oHe,"CODE",{});var $Rt=s(i8e);qEr=r($Rt,"__init__()"),$Rt.forEach(t),jEr=r(oHe," (throws an error)."),oHe.forEach(t),DEr=i(Bl),Bt=n(Bl,"DIV",{class:!0});var pA=s(Bt);T(mx.$$.fragment,pA),GEr=i(pA),d8e=n(pA,"P",{});var kRt=s(d8e);OEr=r(kRt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),kRt.forEach(t),VEr=i(pA),_c=n(pA,"P",{});var eae=s(_c);XEr=r(eae,`Note:
Loading a model from its configuration file does `),c8e=n(eae,"STRONG",{});var SRt=s(c8e);zEr=r(SRt,"not"),SRt.forEach(t),WEr=r(eae,` load the model weights. It only affects the
model\u2019s configuration. Use `),aY=n(eae,"A",{href:!0});var RRt=s(aY);QEr=r(RRt,"from_pretrained()"),RRt.forEach(t),HEr=r(eae," to load the model weights."),eae.forEach(t),UEr=i(pA),T(Y9.$$.fragment,pA),pA.forEach(t),JEr=i(Bl),kr=n(Bl,"DIV",{class:!0});var Il=s(kr);T(gx.$$.fragment,Il),YEr=i(Il),f8e=n(Il,"P",{});var PRt=s(f8e);KEr=r(PRt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),PRt.forEach(t),ZEr=i(Il),dn=n(Il,"P",{});var _A=s(dn);eCr=r(_A,"The model class to instantiate is selected based on the "),m8e=n(_A,"CODE",{});var BRt=s(m8e);oCr=r(BRt,"model_type"),BRt.forEach(t),rCr=r(_A,` property of the config object (either
passed as an argument or loaded from `),g8e=n(_A,"CODE",{});var IRt=s(g8e);tCr=r(IRt,"pretrained_model_name_or_path"),IRt.forEach(t),aCr=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h8e=n(_A,"CODE",{});var NRt=s(h8e);nCr=r(NRt,"pretrained_model_name_or_path"),NRt.forEach(t),sCr=r(_A,":"),_A.forEach(t),lCr=i(Il),Me=n(Il,"UL",{});var Ce=s(Me);K9=n(Ce,"LI",{});var aDe=s(K9);p8e=n(aDe,"STRONG",{});var qRt=s(p8e);iCr=r(qRt,"bert"),qRt.forEach(t),dCr=r(aDe," \u2014 "),nY=n(aDe,"A",{href:!0});var jRt=s(nY);cCr=r(jRt,"TFBertLMHeadModel"),jRt.forEach(t),fCr=r(aDe," (BERT model)"),aDe.forEach(t),mCr=i(Ce),Z9=n(Ce,"LI",{});var nDe=s(Z9);_8e=n(nDe,"STRONG",{});var DRt=s(_8e);gCr=r(DRt,"camembert"),DRt.forEach(t),hCr=r(nDe," \u2014 "),sY=n(nDe,"A",{href:!0});var GRt=s(sY);pCr=r(GRt,"TFCamembertForCausalLM"),GRt.forEach(t),_Cr=r(nDe," (CamemBERT model)"),nDe.forEach(t),uCr=i(Ce),eM=n(Ce,"LI",{});var sDe=s(eM);u8e=n(sDe,"STRONG",{});var ORt=s(u8e);bCr=r(ORt,"ctrl"),ORt.forEach(t),vCr=r(sDe," \u2014 "),lY=n(sDe,"A",{href:!0});var VRt=s(lY);FCr=r(VRt,"TFCTRLLMHeadModel"),VRt.forEach(t),TCr=r(sDe," (CTRL model)"),sDe.forEach(t),MCr=i(Ce),oM=n(Ce,"LI",{});var lDe=s(oM);b8e=n(lDe,"STRONG",{});var XRt=s(b8e);ECr=r(XRt,"gpt2"),XRt.forEach(t),CCr=r(lDe," \u2014 "),iY=n(lDe,"A",{href:!0});var zRt=s(iY);wCr=r(zRt,"TFGPT2LMHeadModel"),zRt.forEach(t),ACr=r(lDe," (OpenAI GPT-2 model)"),lDe.forEach(t),LCr=i(Ce),rM=n(Ce,"LI",{});var iDe=s(rM);v8e=n(iDe,"STRONG",{});var WRt=s(v8e);yCr=r(WRt,"gptj"),WRt.forEach(t),xCr=r(iDe," \u2014 "),dY=n(iDe,"A",{href:!0});var QRt=s(dY);$Cr=r(QRt,"TFGPTJForCausalLM"),QRt.forEach(t),kCr=r(iDe," (GPT-J model)"),iDe.forEach(t),SCr=i(Ce),tM=n(Ce,"LI",{});var dDe=s(tM);F8e=n(dDe,"STRONG",{});var HRt=s(F8e);RCr=r(HRt,"openai-gpt"),HRt.forEach(t),PCr=r(dDe," \u2014 "),cY=n(dDe,"A",{href:!0});var URt=s(cY);BCr=r(URt,"TFOpenAIGPTLMHeadModel"),URt.forEach(t),ICr=r(dDe," (OpenAI GPT model)"),dDe.forEach(t),NCr=i(Ce),aM=n(Ce,"LI",{});var cDe=s(aM);T8e=n(cDe,"STRONG",{});var JRt=s(T8e);qCr=r(JRt,"opt"),JRt.forEach(t),jCr=r(cDe," \u2014 "),fY=n(cDe,"A",{href:!0});var YRt=s(fY);DCr=r(YRt,"TFOPTForCausalLM"),YRt.forEach(t),GCr=r(cDe," (OPT model)"),cDe.forEach(t),OCr=i(Ce),nM=n(Ce,"LI",{});var fDe=s(nM);M8e=n(fDe,"STRONG",{});var KRt=s(M8e);VCr=r(KRt,"rembert"),KRt.forEach(t),XCr=r(fDe," \u2014 "),mY=n(fDe,"A",{href:!0});var ZRt=s(mY);zCr=r(ZRt,"TFRemBertForCausalLM"),ZRt.forEach(t),WCr=r(fDe," (RemBERT model)"),fDe.forEach(t),QCr=i(Ce),sM=n(Ce,"LI",{});var mDe=s(sM);E8e=n(mDe,"STRONG",{});var ePt=s(E8e);HCr=r(ePt,"roberta"),ePt.forEach(t),UCr=r(mDe," \u2014 "),gY=n(mDe,"A",{href:!0});var oPt=s(gY);JCr=r(oPt,"TFRobertaForCausalLM"),oPt.forEach(t),YCr=r(mDe," (RoBERTa model)"),mDe.forEach(t),KCr=i(Ce),lM=n(Ce,"LI",{});var gDe=s(lM);C8e=n(gDe,"STRONG",{});var rPt=s(C8e);ZCr=r(rPt,"roformer"),rPt.forEach(t),e5r=r(gDe," \u2014 "),hY=n(gDe,"A",{href:!0});var tPt=s(hY);o5r=r(tPt,"TFRoFormerForCausalLM"),tPt.forEach(t),r5r=r(gDe," (RoFormer model)"),gDe.forEach(t),t5r=i(Ce),iM=n(Ce,"LI",{});var hDe=s(iM);w8e=n(hDe,"STRONG",{});var aPt=s(w8e);a5r=r(aPt,"transfo-xl"),aPt.forEach(t),n5r=r(hDe," \u2014 "),pY=n(hDe,"A",{href:!0});var nPt=s(pY);s5r=r(nPt,"TFTransfoXLLMHeadModel"),nPt.forEach(t),l5r=r(hDe," (Transformer-XL model)"),hDe.forEach(t),i5r=i(Ce),dM=n(Ce,"LI",{});var pDe=s(dM);A8e=n(pDe,"STRONG",{});var sPt=s(A8e);d5r=r(sPt,"xlm"),sPt.forEach(t),c5r=r(pDe," \u2014 "),_Y=n(pDe,"A",{href:!0});var lPt=s(_Y);f5r=r(lPt,"TFXLMWithLMHeadModel"),lPt.forEach(t),m5r=r(pDe," (XLM model)"),pDe.forEach(t),g5r=i(Ce),cM=n(Ce,"LI",{});var _De=s(cM);L8e=n(_De,"STRONG",{});var iPt=s(L8e);h5r=r(iPt,"xlnet"),iPt.forEach(t),p5r=r(_De," \u2014 "),uY=n(_De,"A",{href:!0});var dPt=s(uY);_5r=r(dPt,"TFXLNetLMHeadModel"),dPt.forEach(t),u5r=r(_De," (XLNet model)"),_De.forEach(t),Ce.forEach(t),b5r=i(Il),T(fM.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),Hze=i(f),uc=n(f,"H2",{class:!0});var rHe=s(uc);mM=n(rHe,"A",{id:!0,class:!0,href:!0});var cPt=s(mM);y8e=n(cPt,"SPAN",{});var fPt=s(y8e);T(hx.$$.fragment,fPt),fPt.forEach(t),cPt.forEach(t),v5r=i(rHe),x8e=n(rHe,"SPAN",{});var mPt=s(x8e);F5r=r(mPt,"TFAutoModelForImageClassification"),mPt.forEach(t),rHe.forEach(t),Uze=i(f),ar=n(f,"DIV",{class:!0});var Nl=s(ar);T(px.$$.fragment,Nl),T5r=i(Nl),bc=n(Nl,"P",{});var oae=s(bc);M5r=r(oae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),bY=n(oae,"A",{href:!0});var gPt=s(bY);E5r=r(gPt,"from_pretrained()"),gPt.forEach(t),C5r=r(oae," class method or the "),vY=n(oae,"A",{href:!0});var hPt=s(vY);w5r=r(hPt,"from_config()"),hPt.forEach(t),A5r=r(oae,` class
method.`),oae.forEach(t),L5r=i(Nl),_x=n(Nl,"P",{});var tHe=s(_x);y5r=r(tHe,"This class cannot be instantiated directly using "),$8e=n(tHe,"CODE",{});var pPt=s($8e);x5r=r(pPt,"__init__()"),pPt.forEach(t),$5r=r(tHe," (throws an error)."),tHe.forEach(t),k5r=i(Nl),It=n(Nl,"DIV",{class:!0});var uA=s(It);T(ux.$$.fragment,uA),S5r=i(uA),k8e=n(uA,"P",{});var _Pt=s(k8e);R5r=r(_Pt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),_Pt.forEach(t),P5r=i(uA),vc=n(uA,"P",{});var rae=s(vc);B5r=r(rae,`Note:
Loading a model from its configuration file does `),S8e=n(rae,"STRONG",{});var uPt=s(S8e);I5r=r(uPt,"not"),uPt.forEach(t),N5r=r(rae,` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=n(rae,"A",{href:!0});var bPt=s(FY);q5r=r(bPt,"from_pretrained()"),bPt.forEach(t),j5r=r(rae," to load the model weights."),rae.forEach(t),D5r=i(uA),T(gM.$$.fragment,uA),uA.forEach(t),G5r=i(Nl),Sr=n(Nl,"DIV",{class:!0});var ql=s(Sr);T(bx.$$.fragment,ql),O5r=i(ql),R8e=n(ql,"P",{});var vPt=s(R8e);V5r=r(vPt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),vPt.forEach(t),X5r=i(ql),cn=n(ql,"P",{});var bA=s(cn);z5r=r(bA,"The model class to instantiate is selected based on the "),P8e=n(bA,"CODE",{});var FPt=s(P8e);W5r=r(FPt,"model_type"),FPt.forEach(t),Q5r=r(bA,` property of the config object (either
passed as an argument or loaded from `),B8e=n(bA,"CODE",{});var TPt=s(B8e);H5r=r(TPt,"pretrained_model_name_or_path"),TPt.forEach(t),U5r=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I8e=n(bA,"CODE",{});var MPt=s(I8e);J5r=r(MPt,"pretrained_model_name_or_path"),MPt.forEach(t),Y5r=r(bA,":"),bA.forEach(t),K5r=i(ql),We=n(ql,"UL",{});var ot=s(We);hM=n(ot,"LI",{});var uDe=s(hM);N8e=n(uDe,"STRONG",{});var EPt=s(N8e);Z5r=r(EPt,"convnext"),EPt.forEach(t),e0r=r(uDe," \u2014 "),TY=n(uDe,"A",{href:!0});var CPt=s(TY);o0r=r(CPt,"TFConvNextForImageClassification"),CPt.forEach(t),r0r=r(uDe," (ConvNeXT model)"),uDe.forEach(t),t0r=i(ot),pM=n(ot,"LI",{});var bDe=s(pM);q8e=n(bDe,"STRONG",{});var wPt=s(q8e);a0r=r(wPt,"data2vec-vision"),wPt.forEach(t),n0r=r(bDe," \u2014 "),MY=n(bDe,"A",{href:!0});var APt=s(MY);s0r=r(APt,"TFData2VecVisionForImageClassification"),APt.forEach(t),l0r=r(bDe," (Data2VecVision model)"),bDe.forEach(t),i0r=i(ot),Zs=n(ot,"LI",{});var zS=s(Zs);j8e=n(zS,"STRONG",{});var LPt=s(j8e);d0r=r(LPt,"deit"),LPt.forEach(t),c0r=r(zS," \u2014 "),EY=n(zS,"A",{href:!0});var yPt=s(EY);f0r=r(yPt,"TFDeiTForImageClassification"),yPt.forEach(t),m0r=r(zS," or "),CY=n(zS,"A",{href:!0});var xPt=s(CY);g0r=r(xPt,"TFDeiTForImageClassificationWithTeacher"),xPt.forEach(t),h0r=r(zS," (DeiT model)"),zS.forEach(t),p0r=i(ot),_M=n(ot,"LI",{});var vDe=s(_M);D8e=n(vDe,"STRONG",{});var $Pt=s(D8e);_0r=r($Pt,"regnet"),$Pt.forEach(t),u0r=r(vDe," \u2014 "),wY=n(vDe,"A",{href:!0});var kPt=s(wY);b0r=r(kPt,"TFRegNetForImageClassification"),kPt.forEach(t),v0r=r(vDe," (RegNet model)"),vDe.forEach(t),F0r=i(ot),uM=n(ot,"LI",{});var FDe=s(uM);G8e=n(FDe,"STRONG",{});var SPt=s(G8e);T0r=r(SPt,"resnet"),SPt.forEach(t),M0r=r(FDe," \u2014 "),AY=n(FDe,"A",{href:!0});var RPt=s(AY);E0r=r(RPt,"TFResNetForImageClassification"),RPt.forEach(t),C0r=r(FDe," (ResNet model)"),FDe.forEach(t),w0r=i(ot),bM=n(ot,"LI",{});var TDe=s(bM);O8e=n(TDe,"STRONG",{});var PPt=s(O8e);A0r=r(PPt,"swin"),PPt.forEach(t),L0r=r(TDe," \u2014 "),LY=n(TDe,"A",{href:!0});var BPt=s(LY);y0r=r(BPt,"TFSwinForImageClassification"),BPt.forEach(t),x0r=r(TDe," (Swin Transformer model)"),TDe.forEach(t),$0r=i(ot),vM=n(ot,"LI",{});var MDe=s(vM);V8e=n(MDe,"STRONG",{});var IPt=s(V8e);k0r=r(IPt,"vit"),IPt.forEach(t),S0r=r(MDe," \u2014 "),yY=n(MDe,"A",{href:!0});var NPt=s(yY);R0r=r(NPt,"TFViTForImageClassification"),NPt.forEach(t),P0r=r(MDe," (ViT model)"),MDe.forEach(t),ot.forEach(t),B0r=i(ql),T(FM.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),Jze=i(f),Fc=n(f,"H2",{class:!0});var aHe=s(Fc);TM=n(aHe,"A",{id:!0,class:!0,href:!0});var qPt=s(TM);X8e=n(qPt,"SPAN",{});var jPt=s(X8e);T(vx.$$.fragment,jPt),jPt.forEach(t),qPt.forEach(t),I0r=i(aHe),z8e=n(aHe,"SPAN",{});var DPt=s(z8e);N0r=r(DPt,"TFAutoModelForMaskedLM"),DPt.forEach(t),aHe.forEach(t),Yze=i(f),nr=n(f,"DIV",{class:!0});var jl=s(nr);T(Fx.$$.fragment,jl),q0r=i(jl),Tc=n(jl,"P",{});var tae=s(Tc);j0r=r(tae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),xY=n(tae,"A",{href:!0});var GPt=s(xY);D0r=r(GPt,"from_pretrained()"),GPt.forEach(t),G0r=r(tae," class method or the "),$Y=n(tae,"A",{href:!0});var OPt=s($Y);O0r=r(OPt,"from_config()"),OPt.forEach(t),V0r=r(tae,` class
method.`),tae.forEach(t),X0r=i(jl),Tx=n(jl,"P",{});var nHe=s(Tx);z0r=r(nHe,"This class cannot be instantiated directly using "),W8e=n(nHe,"CODE",{});var VPt=s(W8e);W0r=r(VPt,"__init__()"),VPt.forEach(t),Q0r=r(nHe," (throws an error)."),nHe.forEach(t),H0r=i(jl),Nt=n(jl,"DIV",{class:!0});var vA=s(Nt);T(Mx.$$.fragment,vA),U0r=i(vA),Q8e=n(vA,"P",{});var XPt=s(Q8e);J0r=r(XPt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),XPt.forEach(t),Y0r=i(vA),Mc=n(vA,"P",{});var aae=s(Mc);K0r=r(aae,`Note:
Loading a model from its configuration file does `),H8e=n(aae,"STRONG",{});var zPt=s(H8e);Z0r=r(zPt,"not"),zPt.forEach(t),ewr=r(aae,` load the model weights. It only affects the
model\u2019s configuration. Use `),kY=n(aae,"A",{href:!0});var WPt=s(kY);owr=r(WPt,"from_pretrained()"),WPt.forEach(t),rwr=r(aae," to load the model weights."),aae.forEach(t),twr=i(vA),T(MM.$$.fragment,vA),vA.forEach(t),awr=i(jl),Rr=n(jl,"DIV",{class:!0});var Dl=s(Rr);T(Ex.$$.fragment,Dl),nwr=i(Dl),U8e=n(Dl,"P",{});var QPt=s(U8e);swr=r(QPt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),QPt.forEach(t),lwr=i(Dl),fn=n(Dl,"P",{});var FA=s(fn);iwr=r(FA,"The model class to instantiate is selected based on the "),J8e=n(FA,"CODE",{});var HPt=s(J8e);dwr=r(HPt,"model_type"),HPt.forEach(t),cwr=r(FA,` property of the config object (either
passed as an argument or loaded from `),Y8e=n(FA,"CODE",{});var UPt=s(Y8e);fwr=r(UPt,"pretrained_model_name_or_path"),UPt.forEach(t),mwr=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K8e=n(FA,"CODE",{});var JPt=s(K8e);gwr=r(JPt,"pretrained_model_name_or_path"),JPt.forEach(t),hwr=r(FA,":"),FA.forEach(t),pwr=i(Dl),ie=n(Dl,"UL",{});var ge=s(ie);EM=n(ge,"LI",{});var EDe=s(EM);Z8e=n(EDe,"STRONG",{});var YPt=s(Z8e);_wr=r(YPt,"albert"),YPt.forEach(t),uwr=r(EDe," \u2014 "),SY=n(EDe,"A",{href:!0});var KPt=s(SY);bwr=r(KPt,"TFAlbertForMaskedLM"),KPt.forEach(t),vwr=r(EDe," (ALBERT model)"),EDe.forEach(t),Fwr=i(ge),CM=n(ge,"LI",{});var CDe=s(CM);e9e=n(CDe,"STRONG",{});var ZPt=s(e9e);Twr=r(ZPt,"bert"),ZPt.forEach(t),Mwr=r(CDe," \u2014 "),RY=n(CDe,"A",{href:!0});var eBt=s(RY);Ewr=r(eBt,"TFBertForMaskedLM"),eBt.forEach(t),Cwr=r(CDe," (BERT model)"),CDe.forEach(t),wwr=i(ge),wM=n(ge,"LI",{});var wDe=s(wM);o9e=n(wDe,"STRONG",{});var oBt=s(o9e);Awr=r(oBt,"camembert"),oBt.forEach(t),Lwr=r(wDe," \u2014 "),PY=n(wDe,"A",{href:!0});var rBt=s(PY);ywr=r(rBt,"TFCamembertForMaskedLM"),rBt.forEach(t),xwr=r(wDe," (CamemBERT model)"),wDe.forEach(t),$wr=i(ge),AM=n(ge,"LI",{});var ADe=s(AM);r9e=n(ADe,"STRONG",{});var tBt=s(r9e);kwr=r(tBt,"convbert"),tBt.forEach(t),Swr=r(ADe," \u2014 "),BY=n(ADe,"A",{href:!0});var aBt=s(BY);Rwr=r(aBt,"TFConvBertForMaskedLM"),aBt.forEach(t),Pwr=r(ADe," (ConvBERT model)"),ADe.forEach(t),Bwr=i(ge),LM=n(ge,"LI",{});var LDe=s(LM);t9e=n(LDe,"STRONG",{});var nBt=s(t9e);Iwr=r(nBt,"deberta"),nBt.forEach(t),Nwr=r(LDe," \u2014 "),IY=n(LDe,"A",{href:!0});var sBt=s(IY);qwr=r(sBt,"TFDebertaForMaskedLM"),sBt.forEach(t),jwr=r(LDe," (DeBERTa model)"),LDe.forEach(t),Dwr=i(ge),yM=n(ge,"LI",{});var yDe=s(yM);a9e=n(yDe,"STRONG",{});var lBt=s(a9e);Gwr=r(lBt,"deberta-v2"),lBt.forEach(t),Owr=r(yDe," \u2014 "),NY=n(yDe,"A",{href:!0});var iBt=s(NY);Vwr=r(iBt,"TFDebertaV2ForMaskedLM"),iBt.forEach(t),Xwr=r(yDe," (DeBERTa-v2 model)"),yDe.forEach(t),zwr=i(ge),xM=n(ge,"LI",{});var xDe=s(xM);n9e=n(xDe,"STRONG",{});var dBt=s(n9e);Wwr=r(dBt,"distilbert"),dBt.forEach(t),Qwr=r(xDe," \u2014 "),qY=n(xDe,"A",{href:!0});var cBt=s(qY);Hwr=r(cBt,"TFDistilBertForMaskedLM"),cBt.forEach(t),Uwr=r(xDe," (DistilBERT model)"),xDe.forEach(t),Jwr=i(ge),$M=n(ge,"LI",{});var $De=s($M);s9e=n($De,"STRONG",{});var fBt=s(s9e);Ywr=r(fBt,"electra"),fBt.forEach(t),Kwr=r($De," \u2014 "),jY=n($De,"A",{href:!0});var mBt=s(jY);Zwr=r(mBt,"TFElectraForMaskedLM"),mBt.forEach(t),eAr=r($De," (ELECTRA model)"),$De.forEach(t),oAr=i(ge),kM=n(ge,"LI",{});var kDe=s(kM);l9e=n(kDe,"STRONG",{});var gBt=s(l9e);rAr=r(gBt,"flaubert"),gBt.forEach(t),tAr=r(kDe," \u2014 "),DY=n(kDe,"A",{href:!0});var hBt=s(DY);aAr=r(hBt,"TFFlaubertWithLMHeadModel"),hBt.forEach(t),nAr=r(kDe," (FlauBERT model)"),kDe.forEach(t),sAr=i(ge),SM=n(ge,"LI",{});var SDe=s(SM);i9e=n(SDe,"STRONG",{});var pBt=s(i9e);lAr=r(pBt,"funnel"),pBt.forEach(t),iAr=r(SDe," \u2014 "),GY=n(SDe,"A",{href:!0});var _Bt=s(GY);dAr=r(_Bt,"TFFunnelForMaskedLM"),_Bt.forEach(t),cAr=r(SDe," (Funnel Transformer model)"),SDe.forEach(t),fAr=i(ge),RM=n(ge,"LI",{});var RDe=s(RM);d9e=n(RDe,"STRONG",{});var uBt=s(d9e);mAr=r(uBt,"layoutlm"),uBt.forEach(t),gAr=r(RDe," \u2014 "),OY=n(RDe,"A",{href:!0});var bBt=s(OY);hAr=r(bBt,"TFLayoutLMForMaskedLM"),bBt.forEach(t),pAr=r(RDe," (LayoutLM model)"),RDe.forEach(t),_Ar=i(ge),PM=n(ge,"LI",{});var PDe=s(PM);c9e=n(PDe,"STRONG",{});var vBt=s(c9e);uAr=r(vBt,"longformer"),vBt.forEach(t),bAr=r(PDe," \u2014 "),VY=n(PDe,"A",{href:!0});var FBt=s(VY);vAr=r(FBt,"TFLongformerForMaskedLM"),FBt.forEach(t),FAr=r(PDe," (Longformer model)"),PDe.forEach(t),TAr=i(ge),BM=n(ge,"LI",{});var BDe=s(BM);f9e=n(BDe,"STRONG",{});var TBt=s(f9e);MAr=r(TBt,"mobilebert"),TBt.forEach(t),EAr=r(BDe," \u2014 "),XY=n(BDe,"A",{href:!0});var MBt=s(XY);CAr=r(MBt,"TFMobileBertForMaskedLM"),MBt.forEach(t),wAr=r(BDe," (MobileBERT model)"),BDe.forEach(t),AAr=i(ge),IM=n(ge,"LI",{});var IDe=s(IM);m9e=n(IDe,"STRONG",{});var EBt=s(m9e);LAr=r(EBt,"mpnet"),EBt.forEach(t),yAr=r(IDe," \u2014 "),zY=n(IDe,"A",{href:!0});var CBt=s(zY);xAr=r(CBt,"TFMPNetForMaskedLM"),CBt.forEach(t),$Ar=r(IDe," (MPNet model)"),IDe.forEach(t),kAr=i(ge),NM=n(ge,"LI",{});var NDe=s(NM);g9e=n(NDe,"STRONG",{});var wBt=s(g9e);SAr=r(wBt,"rembert"),wBt.forEach(t),RAr=r(NDe," \u2014 "),WY=n(NDe,"A",{href:!0});var ABt=s(WY);PAr=r(ABt,"TFRemBertForMaskedLM"),ABt.forEach(t),BAr=r(NDe," (RemBERT model)"),NDe.forEach(t),IAr=i(ge),qM=n(ge,"LI",{});var qDe=s(qM);h9e=n(qDe,"STRONG",{});var LBt=s(h9e);NAr=r(LBt,"roberta"),LBt.forEach(t),qAr=r(qDe," \u2014 "),QY=n(qDe,"A",{href:!0});var yBt=s(QY);jAr=r(yBt,"TFRobertaForMaskedLM"),yBt.forEach(t),DAr=r(qDe," (RoBERTa model)"),qDe.forEach(t),GAr=i(ge),jM=n(ge,"LI",{});var jDe=s(jM);p9e=n(jDe,"STRONG",{});var xBt=s(p9e);OAr=r(xBt,"roformer"),xBt.forEach(t),VAr=r(jDe," \u2014 "),HY=n(jDe,"A",{href:!0});var $Bt=s(HY);XAr=r($Bt,"TFRoFormerForMaskedLM"),$Bt.forEach(t),zAr=r(jDe," (RoFormer model)"),jDe.forEach(t),WAr=i(ge),DM=n(ge,"LI",{});var DDe=s(DM);_9e=n(DDe,"STRONG",{});var kBt=s(_9e);QAr=r(kBt,"tapas"),kBt.forEach(t),HAr=r(DDe," \u2014 "),UY=n(DDe,"A",{href:!0});var SBt=s(UY);UAr=r(SBt,"TFTapasForMaskedLM"),SBt.forEach(t),JAr=r(DDe," (TAPAS model)"),DDe.forEach(t),YAr=i(ge),GM=n(ge,"LI",{});var GDe=s(GM);u9e=n(GDe,"STRONG",{});var RBt=s(u9e);KAr=r(RBt,"xlm"),RBt.forEach(t),ZAr=r(GDe," \u2014 "),JY=n(GDe,"A",{href:!0});var PBt=s(JY);e6r=r(PBt,"TFXLMWithLMHeadModel"),PBt.forEach(t),o6r=r(GDe," (XLM model)"),GDe.forEach(t),r6r=i(ge),OM=n(ge,"LI",{});var ODe=s(OM);b9e=n(ODe,"STRONG",{});var BBt=s(b9e);t6r=r(BBt,"xlm-roberta"),BBt.forEach(t),a6r=r(ODe," \u2014 "),YY=n(ODe,"A",{href:!0});var IBt=s(YY);n6r=r(IBt,"TFXLMRobertaForMaskedLM"),IBt.forEach(t),s6r=r(ODe," (XLM-RoBERTa model)"),ODe.forEach(t),ge.forEach(t),l6r=i(Dl),T(VM.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),Kze=i(f),Ec=n(f,"H2",{class:!0});var sHe=s(Ec);XM=n(sHe,"A",{id:!0,class:!0,href:!0});var NBt=s(XM);v9e=n(NBt,"SPAN",{});var qBt=s(v9e);T(Cx.$$.fragment,qBt),qBt.forEach(t),NBt.forEach(t),i6r=i(sHe),F9e=n(sHe,"SPAN",{});var jBt=s(F9e);d6r=r(jBt,"TFAutoModelForSeq2SeqLM"),jBt.forEach(t),sHe.forEach(t),Zze=i(f),sr=n(f,"DIV",{class:!0});var Gl=s(sr);T(wx.$$.fragment,Gl),c6r=i(Gl),Cc=n(Gl,"P",{});var nae=s(Cc);f6r=r(nae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),KY=n(nae,"A",{href:!0});var DBt=s(KY);m6r=r(DBt,"from_pretrained()"),DBt.forEach(t),g6r=r(nae," class method or the "),ZY=n(nae,"A",{href:!0});var GBt=s(ZY);h6r=r(GBt,"from_config()"),GBt.forEach(t),p6r=r(nae,` class
method.`),nae.forEach(t),_6r=i(Gl),Ax=n(Gl,"P",{});var lHe=s(Ax);u6r=r(lHe,"This class cannot be instantiated directly using "),T9e=n(lHe,"CODE",{});var OBt=s(T9e);b6r=r(OBt,"__init__()"),OBt.forEach(t),v6r=r(lHe," (throws an error)."),lHe.forEach(t),F6r=i(Gl),qt=n(Gl,"DIV",{class:!0});var TA=s(qt);T(Lx.$$.fragment,TA),T6r=i(TA),M9e=n(TA,"P",{});var VBt=s(M9e);M6r=r(VBt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),VBt.forEach(t),E6r=i(TA),wc=n(TA,"P",{});var sae=s(wc);C6r=r(sae,`Note:
Loading a model from its configuration file does `),E9e=n(sae,"STRONG",{});var XBt=s(E9e);w6r=r(XBt,"not"),XBt.forEach(t),A6r=r(sae,` load the model weights. It only affects the
model\u2019s configuration. Use `),eK=n(sae,"A",{href:!0});var zBt=s(eK);L6r=r(zBt,"from_pretrained()"),zBt.forEach(t),y6r=r(sae," to load the model weights."),sae.forEach(t),x6r=i(TA),T(zM.$$.fragment,TA),TA.forEach(t),$6r=i(Gl),Pr=n(Gl,"DIV",{class:!0});var Ol=s(Pr);T(yx.$$.fragment,Ol),k6r=i(Ol),C9e=n(Ol,"P",{});var WBt=s(C9e);S6r=r(WBt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),WBt.forEach(t),R6r=i(Ol),mn=n(Ol,"P",{});var MA=s(mn);P6r=r(MA,"The model class to instantiate is selected based on the "),w9e=n(MA,"CODE",{});var QBt=s(w9e);B6r=r(QBt,"model_type"),QBt.forEach(t),I6r=r(MA,` property of the config object (either
passed as an argument or loaded from `),A9e=n(MA,"CODE",{});var HBt=s(A9e);N6r=r(HBt,"pretrained_model_name_or_path"),HBt.forEach(t),q6r=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L9e=n(MA,"CODE",{});var UBt=s(L9e);j6r=r(UBt,"pretrained_model_name_or_path"),UBt.forEach(t),D6r=r(MA,":"),MA.forEach(t),G6r=i(Ol),ye=n(Ol,"UL",{});var Ie=s(ye);WM=n(Ie,"LI",{});var VDe=s(WM);y9e=n(VDe,"STRONG",{});var JBt=s(y9e);O6r=r(JBt,"bart"),JBt.forEach(t),V6r=r(VDe," \u2014 "),oK=n(VDe,"A",{href:!0});var YBt=s(oK);X6r=r(YBt,"TFBartForConditionalGeneration"),YBt.forEach(t),z6r=r(VDe," (BART model)"),VDe.forEach(t),W6r=i(Ie),QM=n(Ie,"LI",{});var XDe=s(QM);x9e=n(XDe,"STRONG",{});var KBt=s(x9e);Q6r=r(KBt,"blenderbot"),KBt.forEach(t),H6r=r(XDe," \u2014 "),rK=n(XDe,"A",{href:!0});var ZBt=s(rK);U6r=r(ZBt,"TFBlenderbotForConditionalGeneration"),ZBt.forEach(t),J6r=r(XDe," (Blenderbot model)"),XDe.forEach(t),Y6r=i(Ie),HM=n(Ie,"LI",{});var zDe=s(HM);$9e=n(zDe,"STRONG",{});var eIt=s($9e);K6r=r(eIt,"blenderbot-small"),eIt.forEach(t),Z6r=r(zDe," \u2014 "),tK=n(zDe,"A",{href:!0});var oIt=s(tK);eLr=r(oIt,"TFBlenderbotSmallForConditionalGeneration"),oIt.forEach(t),oLr=r(zDe," (BlenderbotSmall model)"),zDe.forEach(t),rLr=i(Ie),UM=n(Ie,"LI",{});var WDe=s(UM);k9e=n(WDe,"STRONG",{});var rIt=s(k9e);tLr=r(rIt,"encoder-decoder"),rIt.forEach(t),aLr=r(WDe," \u2014 "),aK=n(WDe,"A",{href:!0});var tIt=s(aK);nLr=r(tIt,"TFEncoderDecoderModel"),tIt.forEach(t),sLr=r(WDe," (Encoder decoder model)"),WDe.forEach(t),lLr=i(Ie),JM=n(Ie,"LI",{});var QDe=s(JM);S9e=n(QDe,"STRONG",{});var aIt=s(S9e);iLr=r(aIt,"led"),aIt.forEach(t),dLr=r(QDe," \u2014 "),nK=n(QDe,"A",{href:!0});var nIt=s(nK);cLr=r(nIt,"TFLEDForConditionalGeneration"),nIt.forEach(t),fLr=r(QDe," (LED model)"),QDe.forEach(t),mLr=i(Ie),YM=n(Ie,"LI",{});var HDe=s(YM);R9e=n(HDe,"STRONG",{});var sIt=s(R9e);gLr=r(sIt,"marian"),sIt.forEach(t),hLr=r(HDe," \u2014 "),sK=n(HDe,"A",{href:!0});var lIt=s(sK);pLr=r(lIt,"TFMarianMTModel"),lIt.forEach(t),_Lr=r(HDe," (Marian model)"),HDe.forEach(t),uLr=i(Ie),KM=n(Ie,"LI",{});var UDe=s(KM);P9e=n(UDe,"STRONG",{});var iIt=s(P9e);bLr=r(iIt,"mbart"),iIt.forEach(t),vLr=r(UDe," \u2014 "),lK=n(UDe,"A",{href:!0});var dIt=s(lK);FLr=r(dIt,"TFMBartForConditionalGeneration"),dIt.forEach(t),TLr=r(UDe," (mBART model)"),UDe.forEach(t),MLr=i(Ie),ZM=n(Ie,"LI",{});var JDe=s(ZM);B9e=n(JDe,"STRONG",{});var cIt=s(B9e);ELr=r(cIt,"mt5"),cIt.forEach(t),CLr=r(JDe," \u2014 "),iK=n(JDe,"A",{href:!0});var fIt=s(iK);wLr=r(fIt,"TFMT5ForConditionalGeneration"),fIt.forEach(t),ALr=r(JDe," (MT5 model)"),JDe.forEach(t),LLr=i(Ie),e4=n(Ie,"LI",{});var YDe=s(e4);I9e=n(YDe,"STRONG",{});var mIt=s(I9e);yLr=r(mIt,"pegasus"),mIt.forEach(t),xLr=r(YDe," \u2014 "),dK=n(YDe,"A",{href:!0});var gIt=s(dK);$Lr=r(gIt,"TFPegasusForConditionalGeneration"),gIt.forEach(t),kLr=r(YDe," (Pegasus model)"),YDe.forEach(t),SLr=i(Ie),o4=n(Ie,"LI",{});var KDe=s(o4);N9e=n(KDe,"STRONG",{});var hIt=s(N9e);RLr=r(hIt,"t5"),hIt.forEach(t),PLr=r(KDe," \u2014 "),cK=n(KDe,"A",{href:!0});var pIt=s(cK);BLr=r(pIt,"TFT5ForConditionalGeneration"),pIt.forEach(t),ILr=r(KDe," (T5 model)"),KDe.forEach(t),Ie.forEach(t),NLr=i(Ol),T(r4.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),eWe=i(f),Ac=n(f,"H2",{class:!0});var iHe=s(Ac);t4=n(iHe,"A",{id:!0,class:!0,href:!0});var _It=s(t4);q9e=n(_It,"SPAN",{});var uIt=s(q9e);T(xx.$$.fragment,uIt),uIt.forEach(t),_It.forEach(t),qLr=i(iHe),j9e=n(iHe,"SPAN",{});var bIt=s(j9e);jLr=r(bIt,"TFAutoModelForSequenceClassification"),bIt.forEach(t),iHe.forEach(t),oWe=i(f),lr=n(f,"DIV",{class:!0});var Vl=s(lr);T($x.$$.fragment,Vl),DLr=i(Vl),Lc=n(Vl,"P",{});var lae=s(Lc);GLr=r(lae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),fK=n(lae,"A",{href:!0});var vIt=s(fK);OLr=r(vIt,"from_pretrained()"),vIt.forEach(t),VLr=r(lae," class method or the "),mK=n(lae,"A",{href:!0});var FIt=s(mK);XLr=r(FIt,"from_config()"),FIt.forEach(t),zLr=r(lae,` class
method.`),lae.forEach(t),WLr=i(Vl),kx=n(Vl,"P",{});var dHe=s(kx);QLr=r(dHe,"This class cannot be instantiated directly using "),D9e=n(dHe,"CODE",{});var TIt=s(D9e);HLr=r(TIt,"__init__()"),TIt.forEach(t),ULr=r(dHe," (throws an error)."),dHe.forEach(t),JLr=i(Vl),jt=n(Vl,"DIV",{class:!0});var EA=s(jt);T(Sx.$$.fragment,EA),YLr=i(EA),G9e=n(EA,"P",{});var MIt=s(G9e);KLr=r(MIt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),MIt.forEach(t),ZLr=i(EA),yc=n(EA,"P",{});var iae=s(yc);eyr=r(iae,`Note:
Loading a model from its configuration file does `),O9e=n(iae,"STRONG",{});var EIt=s(O9e);oyr=r(EIt,"not"),EIt.forEach(t),ryr=r(iae,` load the model weights. It only affects the
model\u2019s configuration. Use `),gK=n(iae,"A",{href:!0});var CIt=s(gK);tyr=r(CIt,"from_pretrained()"),CIt.forEach(t),ayr=r(iae," to load the model weights."),iae.forEach(t),nyr=i(EA),T(a4.$$.fragment,EA),EA.forEach(t),syr=i(Vl),Br=n(Vl,"DIV",{class:!0});var Xl=s(Br);T(Rx.$$.fragment,Xl),lyr=i(Xl),V9e=n(Xl,"P",{});var wIt=s(V9e);iyr=r(wIt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),wIt.forEach(t),dyr=i(Xl),gn=n(Xl,"P",{});var CA=s(gn);cyr=r(CA,"The model class to instantiate is selected based on the "),X9e=n(CA,"CODE",{});var AIt=s(X9e);fyr=r(AIt,"model_type"),AIt.forEach(t),myr=r(CA,` property of the config object (either
passed as an argument or loaded from `),z9e=n(CA,"CODE",{});var LIt=s(z9e);gyr=r(LIt,"pretrained_model_name_or_path"),LIt.forEach(t),hyr=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W9e=n(CA,"CODE",{});var yIt=s(W9e);pyr=r(yIt,"pretrained_model_name_or_path"),yIt.forEach(t),_yr=r(CA,":"),CA.forEach(t),uyr=i(Xl),te=n(Xl,"UL",{});var ne=s(te);n4=n(ne,"LI",{});var ZDe=s(n4);Q9e=n(ZDe,"STRONG",{});var xIt=s(Q9e);byr=r(xIt,"albert"),xIt.forEach(t),vyr=r(ZDe," \u2014 "),hK=n(ZDe,"A",{href:!0});var $It=s(hK);Fyr=r($It,"TFAlbertForSequenceClassification"),$It.forEach(t),Tyr=r(ZDe," (ALBERT model)"),ZDe.forEach(t),Myr=i(ne),s4=n(ne,"LI",{});var eGe=s(s4);H9e=n(eGe,"STRONG",{});var kIt=s(H9e);Eyr=r(kIt,"bert"),kIt.forEach(t),Cyr=r(eGe," \u2014 "),pK=n(eGe,"A",{href:!0});var SIt=s(pK);wyr=r(SIt,"TFBertForSequenceClassification"),SIt.forEach(t),Ayr=r(eGe," (BERT model)"),eGe.forEach(t),Lyr=i(ne),l4=n(ne,"LI",{});var oGe=s(l4);U9e=n(oGe,"STRONG",{});var RIt=s(U9e);yyr=r(RIt,"camembert"),RIt.forEach(t),xyr=r(oGe," \u2014 "),_K=n(oGe,"A",{href:!0});var PIt=s(_K);$yr=r(PIt,"TFCamembertForSequenceClassification"),PIt.forEach(t),kyr=r(oGe," (CamemBERT model)"),oGe.forEach(t),Syr=i(ne),i4=n(ne,"LI",{});var rGe=s(i4);J9e=n(rGe,"STRONG",{});var BIt=s(J9e);Ryr=r(BIt,"convbert"),BIt.forEach(t),Pyr=r(rGe," \u2014 "),uK=n(rGe,"A",{href:!0});var IIt=s(uK);Byr=r(IIt,"TFConvBertForSequenceClassification"),IIt.forEach(t),Iyr=r(rGe," (ConvBERT model)"),rGe.forEach(t),Nyr=i(ne),d4=n(ne,"LI",{});var tGe=s(d4);Y9e=n(tGe,"STRONG",{});var NIt=s(Y9e);qyr=r(NIt,"ctrl"),NIt.forEach(t),jyr=r(tGe," \u2014 "),bK=n(tGe,"A",{href:!0});var qIt=s(bK);Dyr=r(qIt,"TFCTRLForSequenceClassification"),qIt.forEach(t),Gyr=r(tGe," (CTRL model)"),tGe.forEach(t),Oyr=i(ne),c4=n(ne,"LI",{});var aGe=s(c4);K9e=n(aGe,"STRONG",{});var jIt=s(K9e);Vyr=r(jIt,"deberta"),jIt.forEach(t),Xyr=r(aGe," \u2014 "),vK=n(aGe,"A",{href:!0});var DIt=s(vK);zyr=r(DIt,"TFDebertaForSequenceClassification"),DIt.forEach(t),Wyr=r(aGe," (DeBERTa model)"),aGe.forEach(t),Qyr=i(ne),f4=n(ne,"LI",{});var nGe=s(f4);Z9e=n(nGe,"STRONG",{});var GIt=s(Z9e);Hyr=r(GIt,"deberta-v2"),GIt.forEach(t),Uyr=r(nGe," \u2014 "),FK=n(nGe,"A",{href:!0});var OIt=s(FK);Jyr=r(OIt,"TFDebertaV2ForSequenceClassification"),OIt.forEach(t),Yyr=r(nGe," (DeBERTa-v2 model)"),nGe.forEach(t),Kyr=i(ne),m4=n(ne,"LI",{});var sGe=s(m4);eMe=n(sGe,"STRONG",{});var VIt=s(eMe);Zyr=r(VIt,"distilbert"),VIt.forEach(t),exr=r(sGe," \u2014 "),TK=n(sGe,"A",{href:!0});var XIt=s(TK);oxr=r(XIt,"TFDistilBertForSequenceClassification"),XIt.forEach(t),rxr=r(sGe," (DistilBERT model)"),sGe.forEach(t),txr=i(ne),g4=n(ne,"LI",{});var lGe=s(g4);oMe=n(lGe,"STRONG",{});var zIt=s(oMe);axr=r(zIt,"electra"),zIt.forEach(t),nxr=r(lGe," \u2014 "),MK=n(lGe,"A",{href:!0});var WIt=s(MK);sxr=r(WIt,"TFElectraForSequenceClassification"),WIt.forEach(t),lxr=r(lGe," (ELECTRA model)"),lGe.forEach(t),ixr=i(ne),h4=n(ne,"LI",{});var iGe=s(h4);rMe=n(iGe,"STRONG",{});var QIt=s(rMe);dxr=r(QIt,"flaubert"),QIt.forEach(t),cxr=r(iGe," \u2014 "),EK=n(iGe,"A",{href:!0});var HIt=s(EK);fxr=r(HIt,"TFFlaubertForSequenceClassification"),HIt.forEach(t),mxr=r(iGe," (FlauBERT model)"),iGe.forEach(t),gxr=i(ne),p4=n(ne,"LI",{});var dGe=s(p4);tMe=n(dGe,"STRONG",{});var UIt=s(tMe);hxr=r(UIt,"funnel"),UIt.forEach(t),pxr=r(dGe," \u2014 "),CK=n(dGe,"A",{href:!0});var JIt=s(CK);_xr=r(JIt,"TFFunnelForSequenceClassification"),JIt.forEach(t),uxr=r(dGe," (Funnel Transformer model)"),dGe.forEach(t),bxr=i(ne),_4=n(ne,"LI",{});var cGe=s(_4);aMe=n(cGe,"STRONG",{});var YIt=s(aMe);vxr=r(YIt,"gpt2"),YIt.forEach(t),Fxr=r(cGe," \u2014 "),wK=n(cGe,"A",{href:!0});var KIt=s(wK);Txr=r(KIt,"TFGPT2ForSequenceClassification"),KIt.forEach(t),Mxr=r(cGe," (OpenAI GPT-2 model)"),cGe.forEach(t),Exr=i(ne),u4=n(ne,"LI",{});var fGe=s(u4);nMe=n(fGe,"STRONG",{});var ZIt=s(nMe);Cxr=r(ZIt,"gptj"),ZIt.forEach(t),wxr=r(fGe," \u2014 "),AK=n(fGe,"A",{href:!0});var eNt=s(AK);Axr=r(eNt,"TFGPTJForSequenceClassification"),eNt.forEach(t),Lxr=r(fGe," (GPT-J model)"),fGe.forEach(t),yxr=i(ne),b4=n(ne,"LI",{});var mGe=s(b4);sMe=n(mGe,"STRONG",{});var oNt=s(sMe);xxr=r(oNt,"layoutlm"),oNt.forEach(t),$xr=r(mGe," \u2014 "),LK=n(mGe,"A",{href:!0});var rNt=s(LK);kxr=r(rNt,"TFLayoutLMForSequenceClassification"),rNt.forEach(t),Sxr=r(mGe," (LayoutLM model)"),mGe.forEach(t),Rxr=i(ne),v4=n(ne,"LI",{});var gGe=s(v4);lMe=n(gGe,"STRONG",{});var tNt=s(lMe);Pxr=r(tNt,"longformer"),tNt.forEach(t),Bxr=r(gGe," \u2014 "),yK=n(gGe,"A",{href:!0});var aNt=s(yK);Ixr=r(aNt,"TFLongformerForSequenceClassification"),aNt.forEach(t),Nxr=r(gGe," (Longformer model)"),gGe.forEach(t),qxr=i(ne),F4=n(ne,"LI",{});var hGe=s(F4);iMe=n(hGe,"STRONG",{});var nNt=s(iMe);jxr=r(nNt,"mobilebert"),nNt.forEach(t),Dxr=r(hGe," \u2014 "),xK=n(hGe,"A",{href:!0});var sNt=s(xK);Gxr=r(sNt,"TFMobileBertForSequenceClassification"),sNt.forEach(t),Oxr=r(hGe," (MobileBERT model)"),hGe.forEach(t),Vxr=i(ne),T4=n(ne,"LI",{});var pGe=s(T4);dMe=n(pGe,"STRONG",{});var lNt=s(dMe);Xxr=r(lNt,"mpnet"),lNt.forEach(t),zxr=r(pGe," \u2014 "),$K=n(pGe,"A",{href:!0});var iNt=s($K);Wxr=r(iNt,"TFMPNetForSequenceClassification"),iNt.forEach(t),Qxr=r(pGe," (MPNet model)"),pGe.forEach(t),Hxr=i(ne),M4=n(ne,"LI",{});var _Ge=s(M4);cMe=n(_Ge,"STRONG",{});var dNt=s(cMe);Uxr=r(dNt,"openai-gpt"),dNt.forEach(t),Jxr=r(_Ge," \u2014 "),kK=n(_Ge,"A",{href:!0});var cNt=s(kK);Yxr=r(cNt,"TFOpenAIGPTForSequenceClassification"),cNt.forEach(t),Kxr=r(_Ge," (OpenAI GPT model)"),_Ge.forEach(t),Zxr=i(ne),E4=n(ne,"LI",{});var uGe=s(E4);fMe=n(uGe,"STRONG",{});var fNt=s(fMe);e$r=r(fNt,"rembert"),fNt.forEach(t),o$r=r(uGe," \u2014 "),SK=n(uGe,"A",{href:!0});var mNt=s(SK);r$r=r(mNt,"TFRemBertForSequenceClassification"),mNt.forEach(t),t$r=r(uGe," (RemBERT model)"),uGe.forEach(t),a$r=i(ne),C4=n(ne,"LI",{});var bGe=s(C4);mMe=n(bGe,"STRONG",{});var gNt=s(mMe);n$r=r(gNt,"roberta"),gNt.forEach(t),s$r=r(bGe," \u2014 "),RK=n(bGe,"A",{href:!0});var hNt=s(RK);l$r=r(hNt,"TFRobertaForSequenceClassification"),hNt.forEach(t),i$r=r(bGe," (RoBERTa model)"),bGe.forEach(t),d$r=i(ne),w4=n(ne,"LI",{});var vGe=s(w4);gMe=n(vGe,"STRONG",{});var pNt=s(gMe);c$r=r(pNt,"roformer"),pNt.forEach(t),f$r=r(vGe," \u2014 "),PK=n(vGe,"A",{href:!0});var _Nt=s(PK);m$r=r(_Nt,"TFRoFormerForSequenceClassification"),_Nt.forEach(t),g$r=r(vGe," (RoFormer model)"),vGe.forEach(t),h$r=i(ne),A4=n(ne,"LI",{});var FGe=s(A4);hMe=n(FGe,"STRONG",{});var uNt=s(hMe);p$r=r(uNt,"tapas"),uNt.forEach(t),_$r=r(FGe," \u2014 "),BK=n(FGe,"A",{href:!0});var bNt=s(BK);u$r=r(bNt,"TFTapasForSequenceClassification"),bNt.forEach(t),b$r=r(FGe," (TAPAS model)"),FGe.forEach(t),v$r=i(ne),L4=n(ne,"LI",{});var TGe=s(L4);pMe=n(TGe,"STRONG",{});var vNt=s(pMe);F$r=r(vNt,"transfo-xl"),vNt.forEach(t),T$r=r(TGe," \u2014 "),IK=n(TGe,"A",{href:!0});var FNt=s(IK);M$r=r(FNt,"TFTransfoXLForSequenceClassification"),FNt.forEach(t),E$r=r(TGe," (Transformer-XL model)"),TGe.forEach(t),C$r=i(ne),y4=n(ne,"LI",{});var MGe=s(y4);_Me=n(MGe,"STRONG",{});var TNt=s(_Me);w$r=r(TNt,"xlm"),TNt.forEach(t),A$r=r(MGe," \u2014 "),NK=n(MGe,"A",{href:!0});var MNt=s(NK);L$r=r(MNt,"TFXLMForSequenceClassification"),MNt.forEach(t),y$r=r(MGe," (XLM model)"),MGe.forEach(t),x$r=i(ne),x4=n(ne,"LI",{});var EGe=s(x4);uMe=n(EGe,"STRONG",{});var ENt=s(uMe);$$r=r(ENt,"xlm-roberta"),ENt.forEach(t),k$r=r(EGe," \u2014 "),qK=n(EGe,"A",{href:!0});var CNt=s(qK);S$r=r(CNt,"TFXLMRobertaForSequenceClassification"),CNt.forEach(t),R$r=r(EGe," (XLM-RoBERTa model)"),EGe.forEach(t),P$r=i(ne),$4=n(ne,"LI",{});var CGe=s($4);bMe=n(CGe,"STRONG",{});var wNt=s(bMe);B$r=r(wNt,"xlnet"),wNt.forEach(t),I$r=r(CGe," \u2014 "),jK=n(CGe,"A",{href:!0});var ANt=s(jK);N$r=r(ANt,"TFXLNetForSequenceClassification"),ANt.forEach(t),q$r=r(CGe," (XLNet model)"),CGe.forEach(t),ne.forEach(t),j$r=i(Xl),T(k4.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),rWe=i(f),xc=n(f,"H2",{class:!0});var cHe=s(xc);S4=n(cHe,"A",{id:!0,class:!0,href:!0});var LNt=s(S4);vMe=n(LNt,"SPAN",{});var yNt=s(vMe);T(Px.$$.fragment,yNt),yNt.forEach(t),LNt.forEach(t),D$r=i(cHe),FMe=n(cHe,"SPAN",{});var xNt=s(FMe);G$r=r(xNt,"TFAutoModelForMultipleChoice"),xNt.forEach(t),cHe.forEach(t),tWe=i(f),ir=n(f,"DIV",{class:!0});var zl=s(ir);T(Bx.$$.fragment,zl),O$r=i(zl),$c=n(zl,"P",{});var dae=s($c);V$r=r(dae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),DK=n(dae,"A",{href:!0});var $Nt=s(DK);X$r=r($Nt,"from_pretrained()"),$Nt.forEach(t),z$r=r(dae," class method or the "),GK=n(dae,"A",{href:!0});var kNt=s(GK);W$r=r(kNt,"from_config()"),kNt.forEach(t),Q$r=r(dae,` class
method.`),dae.forEach(t),H$r=i(zl),Ix=n(zl,"P",{});var fHe=s(Ix);U$r=r(fHe,"This class cannot be instantiated directly using "),TMe=n(fHe,"CODE",{});var SNt=s(TMe);J$r=r(SNt,"__init__()"),SNt.forEach(t),Y$r=r(fHe," (throws an error)."),fHe.forEach(t),K$r=i(zl),Dt=n(zl,"DIV",{class:!0});var wA=s(Dt);T(Nx.$$.fragment,wA),Z$r=i(wA),MMe=n(wA,"P",{});var RNt=s(MMe);ekr=r(RNt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),RNt.forEach(t),okr=i(wA),kc=n(wA,"P",{});var cae=s(kc);rkr=r(cae,`Note:
Loading a model from its configuration file does `),EMe=n(cae,"STRONG",{});var PNt=s(EMe);tkr=r(PNt,"not"),PNt.forEach(t),akr=r(cae,` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=n(cae,"A",{href:!0});var BNt=s(OK);nkr=r(BNt,"from_pretrained()"),BNt.forEach(t),skr=r(cae," to load the model weights."),cae.forEach(t),lkr=i(wA),T(R4.$$.fragment,wA),wA.forEach(t),ikr=i(zl),Ir=n(zl,"DIV",{class:!0});var Wl=s(Ir);T(qx.$$.fragment,Wl),dkr=i(Wl),CMe=n(Wl,"P",{});var INt=s(CMe);ckr=r(INt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),INt.forEach(t),fkr=i(Wl),hn=n(Wl,"P",{});var AA=s(hn);mkr=r(AA,"The model class to instantiate is selected based on the "),wMe=n(AA,"CODE",{});var NNt=s(wMe);gkr=r(NNt,"model_type"),NNt.forEach(t),hkr=r(AA,` property of the config object (either
passed as an argument or loaded from `),AMe=n(AA,"CODE",{});var qNt=s(AMe);pkr=r(qNt,"pretrained_model_name_or_path"),qNt.forEach(t),_kr=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LMe=n(AA,"CODE",{});var jNt=s(LMe);ukr=r(jNt,"pretrained_model_name_or_path"),jNt.forEach(t),bkr=r(AA,":"),AA.forEach(t),vkr=i(Wl),be=n(Wl,"UL",{});var Fe=s(be);P4=n(Fe,"LI",{});var wGe=s(P4);yMe=n(wGe,"STRONG",{});var DNt=s(yMe);Fkr=r(DNt,"albert"),DNt.forEach(t),Tkr=r(wGe," \u2014 "),VK=n(wGe,"A",{href:!0});var GNt=s(VK);Mkr=r(GNt,"TFAlbertForMultipleChoice"),GNt.forEach(t),Ekr=r(wGe," (ALBERT model)"),wGe.forEach(t),Ckr=i(Fe),B4=n(Fe,"LI",{});var AGe=s(B4);xMe=n(AGe,"STRONG",{});var ONt=s(xMe);wkr=r(ONt,"bert"),ONt.forEach(t),Akr=r(AGe," \u2014 "),XK=n(AGe,"A",{href:!0});var VNt=s(XK);Lkr=r(VNt,"TFBertForMultipleChoice"),VNt.forEach(t),ykr=r(AGe," (BERT model)"),AGe.forEach(t),xkr=i(Fe),I4=n(Fe,"LI",{});var LGe=s(I4);$Me=n(LGe,"STRONG",{});var XNt=s($Me);$kr=r(XNt,"camembert"),XNt.forEach(t),kkr=r(LGe," \u2014 "),zK=n(LGe,"A",{href:!0});var zNt=s(zK);Skr=r(zNt,"TFCamembertForMultipleChoice"),zNt.forEach(t),Rkr=r(LGe," (CamemBERT model)"),LGe.forEach(t),Pkr=i(Fe),N4=n(Fe,"LI",{});var yGe=s(N4);kMe=n(yGe,"STRONG",{});var WNt=s(kMe);Bkr=r(WNt,"convbert"),WNt.forEach(t),Ikr=r(yGe," \u2014 "),WK=n(yGe,"A",{href:!0});var QNt=s(WK);Nkr=r(QNt,"TFConvBertForMultipleChoice"),QNt.forEach(t),qkr=r(yGe," (ConvBERT model)"),yGe.forEach(t),jkr=i(Fe),q4=n(Fe,"LI",{});var xGe=s(q4);SMe=n(xGe,"STRONG",{});var HNt=s(SMe);Dkr=r(HNt,"distilbert"),HNt.forEach(t),Gkr=r(xGe," \u2014 "),QK=n(xGe,"A",{href:!0});var UNt=s(QK);Okr=r(UNt,"TFDistilBertForMultipleChoice"),UNt.forEach(t),Vkr=r(xGe," (DistilBERT model)"),xGe.forEach(t),Xkr=i(Fe),j4=n(Fe,"LI",{});var $Ge=s(j4);RMe=n($Ge,"STRONG",{});var JNt=s(RMe);zkr=r(JNt,"electra"),JNt.forEach(t),Wkr=r($Ge," \u2014 "),HK=n($Ge,"A",{href:!0});var YNt=s(HK);Qkr=r(YNt,"TFElectraForMultipleChoice"),YNt.forEach(t),Hkr=r($Ge," (ELECTRA model)"),$Ge.forEach(t),Ukr=i(Fe),D4=n(Fe,"LI",{});var kGe=s(D4);PMe=n(kGe,"STRONG",{});var KNt=s(PMe);Jkr=r(KNt,"flaubert"),KNt.forEach(t),Ykr=r(kGe," \u2014 "),UK=n(kGe,"A",{href:!0});var ZNt=s(UK);Kkr=r(ZNt,"TFFlaubertForMultipleChoice"),ZNt.forEach(t),Zkr=r(kGe," (FlauBERT model)"),kGe.forEach(t),eSr=i(Fe),G4=n(Fe,"LI",{});var SGe=s(G4);BMe=n(SGe,"STRONG",{});var eqt=s(BMe);oSr=r(eqt,"funnel"),eqt.forEach(t),rSr=r(SGe," \u2014 "),JK=n(SGe,"A",{href:!0});var oqt=s(JK);tSr=r(oqt,"TFFunnelForMultipleChoice"),oqt.forEach(t),aSr=r(SGe," (Funnel Transformer model)"),SGe.forEach(t),nSr=i(Fe),O4=n(Fe,"LI",{});var RGe=s(O4);IMe=n(RGe,"STRONG",{});var rqt=s(IMe);sSr=r(rqt,"longformer"),rqt.forEach(t),lSr=r(RGe," \u2014 "),YK=n(RGe,"A",{href:!0});var tqt=s(YK);iSr=r(tqt,"TFLongformerForMultipleChoice"),tqt.forEach(t),dSr=r(RGe," (Longformer model)"),RGe.forEach(t),cSr=i(Fe),V4=n(Fe,"LI",{});var PGe=s(V4);NMe=n(PGe,"STRONG",{});var aqt=s(NMe);fSr=r(aqt,"mobilebert"),aqt.forEach(t),mSr=r(PGe," \u2014 "),KK=n(PGe,"A",{href:!0});var nqt=s(KK);gSr=r(nqt,"TFMobileBertForMultipleChoice"),nqt.forEach(t),hSr=r(PGe," (MobileBERT model)"),PGe.forEach(t),pSr=i(Fe),X4=n(Fe,"LI",{});var BGe=s(X4);qMe=n(BGe,"STRONG",{});var sqt=s(qMe);_Sr=r(sqt,"mpnet"),sqt.forEach(t),uSr=r(BGe," \u2014 "),ZK=n(BGe,"A",{href:!0});var lqt=s(ZK);bSr=r(lqt,"TFMPNetForMultipleChoice"),lqt.forEach(t),vSr=r(BGe," (MPNet model)"),BGe.forEach(t),FSr=i(Fe),z4=n(Fe,"LI",{});var IGe=s(z4);jMe=n(IGe,"STRONG",{});var iqt=s(jMe);TSr=r(iqt,"rembert"),iqt.forEach(t),MSr=r(IGe," \u2014 "),eZ=n(IGe,"A",{href:!0});var dqt=s(eZ);ESr=r(dqt,"TFRemBertForMultipleChoice"),dqt.forEach(t),CSr=r(IGe," (RemBERT model)"),IGe.forEach(t),wSr=i(Fe),W4=n(Fe,"LI",{});var NGe=s(W4);DMe=n(NGe,"STRONG",{});var cqt=s(DMe);ASr=r(cqt,"roberta"),cqt.forEach(t),LSr=r(NGe," \u2014 "),oZ=n(NGe,"A",{href:!0});var fqt=s(oZ);ySr=r(fqt,"TFRobertaForMultipleChoice"),fqt.forEach(t),xSr=r(NGe," (RoBERTa model)"),NGe.forEach(t),$Sr=i(Fe),Q4=n(Fe,"LI",{});var qGe=s(Q4);GMe=n(qGe,"STRONG",{});var mqt=s(GMe);kSr=r(mqt,"roformer"),mqt.forEach(t),SSr=r(qGe," \u2014 "),rZ=n(qGe,"A",{href:!0});var gqt=s(rZ);RSr=r(gqt,"TFRoFormerForMultipleChoice"),gqt.forEach(t),PSr=r(qGe," (RoFormer model)"),qGe.forEach(t),BSr=i(Fe),H4=n(Fe,"LI",{});var jGe=s(H4);OMe=n(jGe,"STRONG",{});var hqt=s(OMe);ISr=r(hqt,"xlm"),hqt.forEach(t),NSr=r(jGe," \u2014 "),tZ=n(jGe,"A",{href:!0});var pqt=s(tZ);qSr=r(pqt,"TFXLMForMultipleChoice"),pqt.forEach(t),jSr=r(jGe," (XLM model)"),jGe.forEach(t),DSr=i(Fe),U4=n(Fe,"LI",{});var DGe=s(U4);VMe=n(DGe,"STRONG",{});var _qt=s(VMe);GSr=r(_qt,"xlm-roberta"),_qt.forEach(t),OSr=r(DGe," \u2014 "),aZ=n(DGe,"A",{href:!0});var uqt=s(aZ);VSr=r(uqt,"TFXLMRobertaForMultipleChoice"),uqt.forEach(t),XSr=r(DGe," (XLM-RoBERTa model)"),DGe.forEach(t),zSr=i(Fe),J4=n(Fe,"LI",{});var GGe=s(J4);XMe=n(GGe,"STRONG",{});var bqt=s(XMe);WSr=r(bqt,"xlnet"),bqt.forEach(t),QSr=r(GGe," \u2014 "),nZ=n(GGe,"A",{href:!0});var vqt=s(nZ);HSr=r(vqt,"TFXLNetForMultipleChoice"),vqt.forEach(t),USr=r(GGe," (XLNet model)"),GGe.forEach(t),Fe.forEach(t),JSr=i(Wl),T(Y4.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),aWe=i(f),Sc=n(f,"H2",{class:!0});var mHe=s(Sc);K4=n(mHe,"A",{id:!0,class:!0,href:!0});var Fqt=s(K4);zMe=n(Fqt,"SPAN",{});var Tqt=s(zMe);T(jx.$$.fragment,Tqt),Tqt.forEach(t),Fqt.forEach(t),YSr=i(mHe),WMe=n(mHe,"SPAN",{});var Mqt=s(WMe);KSr=r(Mqt,"TFAutoModelForNextSentencePrediction"),Mqt.forEach(t),mHe.forEach(t),nWe=i(f),dr=n(f,"DIV",{class:!0});var Ql=s(dr);T(Dx.$$.fragment,Ql),ZSr=i(Ql),Rc=n(Ql,"P",{});var fae=s(Rc);eRr=r(fae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),sZ=n(fae,"A",{href:!0});var Eqt=s(sZ);oRr=r(Eqt,"from_pretrained()"),Eqt.forEach(t),rRr=r(fae," class method or the "),lZ=n(fae,"A",{href:!0});var Cqt=s(lZ);tRr=r(Cqt,"from_config()"),Cqt.forEach(t),aRr=r(fae,` class
method.`),fae.forEach(t),nRr=i(Ql),Gx=n(Ql,"P",{});var gHe=s(Gx);sRr=r(gHe,"This class cannot be instantiated directly using "),QMe=n(gHe,"CODE",{});var wqt=s(QMe);lRr=r(wqt,"__init__()"),wqt.forEach(t),iRr=r(gHe," (throws an error)."),gHe.forEach(t),dRr=i(Ql),Gt=n(Ql,"DIV",{class:!0});var LA=s(Gt);T(Ox.$$.fragment,LA),cRr=i(LA),HMe=n(LA,"P",{});var Aqt=s(HMe);fRr=r(Aqt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Aqt.forEach(t),mRr=i(LA),Pc=n(LA,"P",{});var mae=s(Pc);gRr=r(mae,`Note:
Loading a model from its configuration file does `),UMe=n(mae,"STRONG",{});var Lqt=s(UMe);hRr=r(Lqt,"not"),Lqt.forEach(t),pRr=r(mae,` load the model weights. It only affects the
model\u2019s configuration. Use `),iZ=n(mae,"A",{href:!0});var yqt=s(iZ);_Rr=r(yqt,"from_pretrained()"),yqt.forEach(t),uRr=r(mae," to load the model weights."),mae.forEach(t),bRr=i(LA),T(Z4.$$.fragment,LA),LA.forEach(t),vRr=i(Ql),Nr=n(Ql,"DIV",{class:!0});var Hl=s(Nr);T(Vx.$$.fragment,Hl),FRr=i(Hl),JMe=n(Hl,"P",{});var xqt=s(JMe);TRr=r(xqt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),xqt.forEach(t),MRr=i(Hl),pn=n(Hl,"P",{});var yA=s(pn);ERr=r(yA,"The model class to instantiate is selected based on the "),YMe=n(yA,"CODE",{});var $qt=s(YMe);CRr=r($qt,"model_type"),$qt.forEach(t),wRr=r(yA,` property of the config object (either
passed as an argument or loaded from `),KMe=n(yA,"CODE",{});var kqt=s(KMe);ARr=r(kqt,"pretrained_model_name_or_path"),kqt.forEach(t),LRr=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZMe=n(yA,"CODE",{});var Sqt=s(ZMe);yRr=r(Sqt,"pretrained_model_name_or_path"),Sqt.forEach(t),xRr=r(yA,":"),yA.forEach(t),$Rr=i(Hl),Xx=n(Hl,"UL",{});var hHe=s(Xx);eE=n(hHe,"LI",{});var OGe=s(eE);e4e=n(OGe,"STRONG",{});var Rqt=s(e4e);kRr=r(Rqt,"bert"),Rqt.forEach(t),SRr=r(OGe," \u2014 "),dZ=n(OGe,"A",{href:!0});var Pqt=s(dZ);RRr=r(Pqt,"TFBertForNextSentencePrediction"),Pqt.forEach(t),PRr=r(OGe," (BERT model)"),OGe.forEach(t),BRr=i(hHe),oE=n(hHe,"LI",{});var VGe=s(oE);o4e=n(VGe,"STRONG",{});var Bqt=s(o4e);IRr=r(Bqt,"mobilebert"),Bqt.forEach(t),NRr=r(VGe," \u2014 "),cZ=n(VGe,"A",{href:!0});var Iqt=s(cZ);qRr=r(Iqt,"TFMobileBertForNextSentencePrediction"),Iqt.forEach(t),jRr=r(VGe," (MobileBERT model)"),VGe.forEach(t),hHe.forEach(t),DRr=i(Hl),T(rE.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),sWe=i(f),Bc=n(f,"H2",{class:!0});var pHe=s(Bc);tE=n(pHe,"A",{id:!0,class:!0,href:!0});var Nqt=s(tE);r4e=n(Nqt,"SPAN",{});var qqt=s(r4e);T(zx.$$.fragment,qqt),qqt.forEach(t),Nqt.forEach(t),GRr=i(pHe),t4e=n(pHe,"SPAN",{});var jqt=s(t4e);ORr=r(jqt,"TFAutoModelForTableQuestionAnswering"),jqt.forEach(t),pHe.forEach(t),lWe=i(f),cr=n(f,"DIV",{class:!0});var Ul=s(cr);T(Wx.$$.fragment,Ul),VRr=i(Ul),Ic=n(Ul,"P",{});var gae=s(Ic);XRr=r(gae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),fZ=n(gae,"A",{href:!0});var Dqt=s(fZ);zRr=r(Dqt,"from_pretrained()"),Dqt.forEach(t),WRr=r(gae," class method or the "),mZ=n(gae,"A",{href:!0});var Gqt=s(mZ);QRr=r(Gqt,"from_config()"),Gqt.forEach(t),HRr=r(gae,` class
method.`),gae.forEach(t),URr=i(Ul),Qx=n(Ul,"P",{});var _He=s(Qx);JRr=r(_He,"This class cannot be instantiated directly using "),a4e=n(_He,"CODE",{});var Oqt=s(a4e);YRr=r(Oqt,"__init__()"),Oqt.forEach(t),KRr=r(_He," (throws an error)."),_He.forEach(t),ZRr=i(Ul),Ot=n(Ul,"DIV",{class:!0});var xA=s(Ot);T(Hx.$$.fragment,xA),ePr=i(xA),n4e=n(xA,"P",{});var Vqt=s(n4e);oPr=r(Vqt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Vqt.forEach(t),rPr=i(xA),Nc=n(xA,"P",{});var hae=s(Nc);tPr=r(hae,`Note:
Loading a model from its configuration file does `),s4e=n(hae,"STRONG",{});var Xqt=s(s4e);aPr=r(Xqt,"not"),Xqt.forEach(t),nPr=r(hae,` load the model weights. It only affects the
model\u2019s configuration. Use `),gZ=n(hae,"A",{href:!0});var zqt=s(gZ);sPr=r(zqt,"from_pretrained()"),zqt.forEach(t),lPr=r(hae," to load the model weights."),hae.forEach(t),iPr=i(xA),T(aE.$$.fragment,xA),xA.forEach(t),dPr=i(Ul),qr=n(Ul,"DIV",{class:!0});var Jl=s(qr);T(Ux.$$.fragment,Jl),cPr=i(Jl),l4e=n(Jl,"P",{});var Wqt=s(l4e);fPr=r(Wqt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Wqt.forEach(t),mPr=i(Jl),_n=n(Jl,"P",{});var $A=s(_n);gPr=r($A,"The model class to instantiate is selected based on the "),i4e=n($A,"CODE",{});var Qqt=s(i4e);hPr=r(Qqt,"model_type"),Qqt.forEach(t),pPr=r($A,` property of the config object (either
passed as an argument or loaded from `),d4e=n($A,"CODE",{});var Hqt=s(d4e);_Pr=r(Hqt,"pretrained_model_name_or_path"),Hqt.forEach(t),uPr=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c4e=n($A,"CODE",{});var Uqt=s(c4e);bPr=r(Uqt,"pretrained_model_name_or_path"),Uqt.forEach(t),vPr=r($A,":"),$A.forEach(t),FPr=i(Jl),f4e=n(Jl,"UL",{});var Jqt=s(f4e);nE=n(Jqt,"LI",{});var XGe=s(nE);m4e=n(XGe,"STRONG",{});var Yqt=s(m4e);TPr=r(Yqt,"tapas"),Yqt.forEach(t),MPr=r(XGe," \u2014 "),hZ=n(XGe,"A",{href:!0});var Kqt=s(hZ);EPr=r(Kqt,"TFTapasForQuestionAnswering"),Kqt.forEach(t),CPr=r(XGe," (TAPAS model)"),XGe.forEach(t),Jqt.forEach(t),wPr=i(Jl),T(sE.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),iWe=i(f),qc=n(f,"H2",{class:!0});var uHe=s(qc);lE=n(uHe,"A",{id:!0,class:!0,href:!0});var Zqt=s(lE);g4e=n(Zqt,"SPAN",{});var ejt=s(g4e);T(Jx.$$.fragment,ejt),ejt.forEach(t),Zqt.forEach(t),APr=i(uHe),h4e=n(uHe,"SPAN",{});var ojt=s(h4e);LPr=r(ojt,"TFAutoModelForTokenClassification"),ojt.forEach(t),uHe.forEach(t),dWe=i(f),fr=n(f,"DIV",{class:!0});var Yl=s(fr);T(Yx.$$.fragment,Yl),yPr=i(Yl),jc=n(Yl,"P",{});var pae=s(jc);xPr=r(pae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),pZ=n(pae,"A",{href:!0});var rjt=s(pZ);$Pr=r(rjt,"from_pretrained()"),rjt.forEach(t),kPr=r(pae," class method or the "),_Z=n(pae,"A",{href:!0});var tjt=s(_Z);SPr=r(tjt,"from_config()"),tjt.forEach(t),RPr=r(pae,` class
method.`),pae.forEach(t),PPr=i(Yl),Kx=n(Yl,"P",{});var bHe=s(Kx);BPr=r(bHe,"This class cannot be instantiated directly using "),p4e=n(bHe,"CODE",{});var ajt=s(p4e);IPr=r(ajt,"__init__()"),ajt.forEach(t),NPr=r(bHe," (throws an error)."),bHe.forEach(t),qPr=i(Yl),Vt=n(Yl,"DIV",{class:!0});var kA=s(Vt);T(Zx.$$.fragment,kA),jPr=i(kA),_4e=n(kA,"P",{});var njt=s(_4e);DPr=r(njt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),njt.forEach(t),GPr=i(kA),Dc=n(kA,"P",{});var _ae=s(Dc);OPr=r(_ae,`Note:
Loading a model from its configuration file does `),u4e=n(_ae,"STRONG",{});var sjt=s(u4e);VPr=r(sjt,"not"),sjt.forEach(t),XPr=r(_ae,` load the model weights. It only affects the
model\u2019s configuration. Use `),uZ=n(_ae,"A",{href:!0});var ljt=s(uZ);zPr=r(ljt,"from_pretrained()"),ljt.forEach(t),WPr=r(_ae," to load the model weights."),_ae.forEach(t),QPr=i(kA),T(iE.$$.fragment,kA),kA.forEach(t),HPr=i(Yl),jr=n(Yl,"DIV",{class:!0});var Kl=s(jr);T(e$.$$.fragment,Kl),UPr=i(Kl),b4e=n(Kl,"P",{});var ijt=s(b4e);JPr=r(ijt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ijt.forEach(t),YPr=i(Kl),un=n(Kl,"P",{});var SA=s(un);KPr=r(SA,"The model class to instantiate is selected based on the "),v4e=n(SA,"CODE",{});var djt=s(v4e);ZPr=r(djt,"model_type"),djt.forEach(t),eBr=r(SA,` property of the config object (either
passed as an argument or loaded from `),F4e=n(SA,"CODE",{});var cjt=s(F4e);oBr=r(cjt,"pretrained_model_name_or_path"),cjt.forEach(t),rBr=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T4e=n(SA,"CODE",{});var fjt=s(T4e);tBr=r(fjt,"pretrained_model_name_or_path"),fjt.forEach(t),aBr=r(SA,":"),SA.forEach(t),nBr=i(Kl),de=n(Kl,"UL",{});var he=s(de);dE=n(he,"LI",{});var zGe=s(dE);M4e=n(zGe,"STRONG",{});var mjt=s(M4e);sBr=r(mjt,"albert"),mjt.forEach(t),lBr=r(zGe," \u2014 "),bZ=n(zGe,"A",{href:!0});var gjt=s(bZ);iBr=r(gjt,"TFAlbertForTokenClassification"),gjt.forEach(t),dBr=r(zGe," (ALBERT model)"),zGe.forEach(t),cBr=i(he),cE=n(he,"LI",{});var WGe=s(cE);E4e=n(WGe,"STRONG",{});var hjt=s(E4e);fBr=r(hjt,"bert"),hjt.forEach(t),mBr=r(WGe," \u2014 "),vZ=n(WGe,"A",{href:!0});var pjt=s(vZ);gBr=r(pjt,"TFBertForTokenClassification"),pjt.forEach(t),hBr=r(WGe," (BERT model)"),WGe.forEach(t),pBr=i(he),fE=n(he,"LI",{});var QGe=s(fE);C4e=n(QGe,"STRONG",{});var _jt=s(C4e);_Br=r(_jt,"camembert"),_jt.forEach(t),uBr=r(QGe," \u2014 "),FZ=n(QGe,"A",{href:!0});var ujt=s(FZ);bBr=r(ujt,"TFCamembertForTokenClassification"),ujt.forEach(t),vBr=r(QGe," (CamemBERT model)"),QGe.forEach(t),FBr=i(he),mE=n(he,"LI",{});var HGe=s(mE);w4e=n(HGe,"STRONG",{});var bjt=s(w4e);TBr=r(bjt,"convbert"),bjt.forEach(t),MBr=r(HGe," \u2014 "),TZ=n(HGe,"A",{href:!0});var vjt=s(TZ);EBr=r(vjt,"TFConvBertForTokenClassification"),vjt.forEach(t),CBr=r(HGe," (ConvBERT model)"),HGe.forEach(t),wBr=i(he),gE=n(he,"LI",{});var UGe=s(gE);A4e=n(UGe,"STRONG",{});var Fjt=s(A4e);ABr=r(Fjt,"deberta"),Fjt.forEach(t),LBr=r(UGe," \u2014 "),MZ=n(UGe,"A",{href:!0});var Tjt=s(MZ);yBr=r(Tjt,"TFDebertaForTokenClassification"),Tjt.forEach(t),xBr=r(UGe," (DeBERTa model)"),UGe.forEach(t),$Br=i(he),hE=n(he,"LI",{});var JGe=s(hE);L4e=n(JGe,"STRONG",{});var Mjt=s(L4e);kBr=r(Mjt,"deberta-v2"),Mjt.forEach(t),SBr=r(JGe," \u2014 "),EZ=n(JGe,"A",{href:!0});var Ejt=s(EZ);RBr=r(Ejt,"TFDebertaV2ForTokenClassification"),Ejt.forEach(t),PBr=r(JGe," (DeBERTa-v2 model)"),JGe.forEach(t),BBr=i(he),pE=n(he,"LI",{});var YGe=s(pE);y4e=n(YGe,"STRONG",{});var Cjt=s(y4e);IBr=r(Cjt,"distilbert"),Cjt.forEach(t),NBr=r(YGe," \u2014 "),CZ=n(YGe,"A",{href:!0});var wjt=s(CZ);qBr=r(wjt,"TFDistilBertForTokenClassification"),wjt.forEach(t),jBr=r(YGe," (DistilBERT model)"),YGe.forEach(t),DBr=i(he),_E=n(he,"LI",{});var KGe=s(_E);x4e=n(KGe,"STRONG",{});var Ajt=s(x4e);GBr=r(Ajt,"electra"),Ajt.forEach(t),OBr=r(KGe," \u2014 "),wZ=n(KGe,"A",{href:!0});var Ljt=s(wZ);VBr=r(Ljt,"TFElectraForTokenClassification"),Ljt.forEach(t),XBr=r(KGe," (ELECTRA model)"),KGe.forEach(t),zBr=i(he),uE=n(he,"LI",{});var ZGe=s(uE);$4e=n(ZGe,"STRONG",{});var yjt=s($4e);WBr=r(yjt,"flaubert"),yjt.forEach(t),QBr=r(ZGe," \u2014 "),AZ=n(ZGe,"A",{href:!0});var xjt=s(AZ);HBr=r(xjt,"TFFlaubertForTokenClassification"),xjt.forEach(t),UBr=r(ZGe," (FlauBERT model)"),ZGe.forEach(t),JBr=i(he),bE=n(he,"LI",{});var eOe=s(bE);k4e=n(eOe,"STRONG",{});var $jt=s(k4e);YBr=r($jt,"funnel"),$jt.forEach(t),KBr=r(eOe," \u2014 "),LZ=n(eOe,"A",{href:!0});var kjt=s(LZ);ZBr=r(kjt,"TFFunnelForTokenClassification"),kjt.forEach(t),eIr=r(eOe," (Funnel Transformer model)"),eOe.forEach(t),oIr=i(he),vE=n(he,"LI",{});var oOe=s(vE);S4e=n(oOe,"STRONG",{});var Sjt=s(S4e);rIr=r(Sjt,"layoutlm"),Sjt.forEach(t),tIr=r(oOe," \u2014 "),yZ=n(oOe,"A",{href:!0});var Rjt=s(yZ);aIr=r(Rjt,"TFLayoutLMForTokenClassification"),Rjt.forEach(t),nIr=r(oOe," (LayoutLM model)"),oOe.forEach(t),sIr=i(he),FE=n(he,"LI",{});var rOe=s(FE);R4e=n(rOe,"STRONG",{});var Pjt=s(R4e);lIr=r(Pjt,"longformer"),Pjt.forEach(t),iIr=r(rOe," \u2014 "),xZ=n(rOe,"A",{href:!0});var Bjt=s(xZ);dIr=r(Bjt,"TFLongformerForTokenClassification"),Bjt.forEach(t),cIr=r(rOe," (Longformer model)"),rOe.forEach(t),fIr=i(he),TE=n(he,"LI",{});var tOe=s(TE);P4e=n(tOe,"STRONG",{});var Ijt=s(P4e);mIr=r(Ijt,"mobilebert"),Ijt.forEach(t),gIr=r(tOe," \u2014 "),$Z=n(tOe,"A",{href:!0});var Njt=s($Z);hIr=r(Njt,"TFMobileBertForTokenClassification"),Njt.forEach(t),pIr=r(tOe," (MobileBERT model)"),tOe.forEach(t),_Ir=i(he),ME=n(he,"LI",{});var aOe=s(ME);B4e=n(aOe,"STRONG",{});var qjt=s(B4e);uIr=r(qjt,"mpnet"),qjt.forEach(t),bIr=r(aOe," \u2014 "),kZ=n(aOe,"A",{href:!0});var jjt=s(kZ);vIr=r(jjt,"TFMPNetForTokenClassification"),jjt.forEach(t),FIr=r(aOe," (MPNet model)"),aOe.forEach(t),TIr=i(he),EE=n(he,"LI",{});var nOe=s(EE);I4e=n(nOe,"STRONG",{});var Djt=s(I4e);MIr=r(Djt,"rembert"),Djt.forEach(t),EIr=r(nOe," \u2014 "),SZ=n(nOe,"A",{href:!0});var Gjt=s(SZ);CIr=r(Gjt,"TFRemBertForTokenClassification"),Gjt.forEach(t),wIr=r(nOe," (RemBERT model)"),nOe.forEach(t),AIr=i(he),CE=n(he,"LI",{});var sOe=s(CE);N4e=n(sOe,"STRONG",{});var Ojt=s(N4e);LIr=r(Ojt,"roberta"),Ojt.forEach(t),yIr=r(sOe," \u2014 "),RZ=n(sOe,"A",{href:!0});var Vjt=s(RZ);xIr=r(Vjt,"TFRobertaForTokenClassification"),Vjt.forEach(t),$Ir=r(sOe," (RoBERTa model)"),sOe.forEach(t),kIr=i(he),wE=n(he,"LI",{});var lOe=s(wE);q4e=n(lOe,"STRONG",{});var Xjt=s(q4e);SIr=r(Xjt,"roformer"),Xjt.forEach(t),RIr=r(lOe," \u2014 "),PZ=n(lOe,"A",{href:!0});var zjt=s(PZ);PIr=r(zjt,"TFRoFormerForTokenClassification"),zjt.forEach(t),BIr=r(lOe," (RoFormer model)"),lOe.forEach(t),IIr=i(he),AE=n(he,"LI",{});var iOe=s(AE);j4e=n(iOe,"STRONG",{});var Wjt=s(j4e);NIr=r(Wjt,"xlm"),Wjt.forEach(t),qIr=r(iOe," \u2014 "),BZ=n(iOe,"A",{href:!0});var Qjt=s(BZ);jIr=r(Qjt,"TFXLMForTokenClassification"),Qjt.forEach(t),DIr=r(iOe," (XLM model)"),iOe.forEach(t),GIr=i(he),LE=n(he,"LI",{});var dOe=s(LE);D4e=n(dOe,"STRONG",{});var Hjt=s(D4e);OIr=r(Hjt,"xlm-roberta"),Hjt.forEach(t),VIr=r(dOe," \u2014 "),IZ=n(dOe,"A",{href:!0});var Ujt=s(IZ);XIr=r(Ujt,"TFXLMRobertaForTokenClassification"),Ujt.forEach(t),zIr=r(dOe," (XLM-RoBERTa model)"),dOe.forEach(t),WIr=i(he),yE=n(he,"LI",{});var cOe=s(yE);G4e=n(cOe,"STRONG",{});var Jjt=s(G4e);QIr=r(Jjt,"xlnet"),Jjt.forEach(t),HIr=r(cOe," \u2014 "),NZ=n(cOe,"A",{href:!0});var Yjt=s(NZ);UIr=r(Yjt,"TFXLNetForTokenClassification"),Yjt.forEach(t),JIr=r(cOe," (XLNet model)"),cOe.forEach(t),he.forEach(t),YIr=i(Kl),T(xE.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),cWe=i(f),Gc=n(f,"H2",{class:!0});var vHe=s(Gc);$E=n(vHe,"A",{id:!0,class:!0,href:!0});var Kjt=s($E);O4e=n(Kjt,"SPAN",{});var Zjt=s(O4e);T(o$.$$.fragment,Zjt),Zjt.forEach(t),Kjt.forEach(t),KIr=i(vHe),V4e=n(vHe,"SPAN",{});var eDt=s(V4e);ZIr=r(eDt,"TFAutoModelForQuestionAnswering"),eDt.forEach(t),vHe.forEach(t),fWe=i(f),mr=n(f,"DIV",{class:!0});var Zl=s(mr);T(r$.$$.fragment,Zl),eNr=i(Zl),Oc=n(Zl,"P",{});var uae=s(Oc);oNr=r(uae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),qZ=n(uae,"A",{href:!0});var oDt=s(qZ);rNr=r(oDt,"from_pretrained()"),oDt.forEach(t),tNr=r(uae," class method or the "),jZ=n(uae,"A",{href:!0});var rDt=s(jZ);aNr=r(rDt,"from_config()"),rDt.forEach(t),nNr=r(uae,` class
method.`),uae.forEach(t),sNr=i(Zl),t$=n(Zl,"P",{});var FHe=s(t$);lNr=r(FHe,"This class cannot be instantiated directly using "),X4e=n(FHe,"CODE",{});var tDt=s(X4e);iNr=r(tDt,"__init__()"),tDt.forEach(t),dNr=r(FHe," (throws an error)."),FHe.forEach(t),cNr=i(Zl),Xt=n(Zl,"DIV",{class:!0});var RA=s(Xt);T(a$.$$.fragment,RA),fNr=i(RA),z4e=n(RA,"P",{});var aDt=s(z4e);mNr=r(aDt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),aDt.forEach(t),gNr=i(RA),Vc=n(RA,"P",{});var bae=s(Vc);hNr=r(bae,`Note:
Loading a model from its configuration file does `),W4e=n(bae,"STRONG",{});var nDt=s(W4e);pNr=r(nDt,"not"),nDt.forEach(t),_Nr=r(bae,` load the model weights. It only affects the
model\u2019s configuration. Use `),DZ=n(bae,"A",{href:!0});var sDt=s(DZ);uNr=r(sDt,"from_pretrained()"),sDt.forEach(t),bNr=r(bae," to load the model weights."),bae.forEach(t),vNr=i(RA),T(kE.$$.fragment,RA),RA.forEach(t),FNr=i(Zl),Dr=n(Zl,"DIV",{class:!0});var ei=s(Dr);T(n$.$$.fragment,ei),TNr=i(ei),Q4e=n(ei,"P",{});var lDt=s(Q4e);MNr=r(lDt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),lDt.forEach(t),ENr=i(ei),bn=n(ei,"P",{});var PA=s(bn);CNr=r(PA,"The model class to instantiate is selected based on the "),H4e=n(PA,"CODE",{});var iDt=s(H4e);wNr=r(iDt,"model_type"),iDt.forEach(t),ANr=r(PA,` property of the config object (either
passed as an argument or loaded from `),U4e=n(PA,"CODE",{});var dDt=s(U4e);LNr=r(dDt,"pretrained_model_name_or_path"),dDt.forEach(t),yNr=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J4e=n(PA,"CODE",{});var cDt=s(J4e);xNr=r(cDt,"pretrained_model_name_or_path"),cDt.forEach(t),$Nr=r(PA,":"),PA.forEach(t),kNr=i(ei),ce=n(ei,"UL",{});var pe=s(ce);SE=n(pe,"LI",{});var fOe=s(SE);Y4e=n(fOe,"STRONG",{});var fDt=s(Y4e);SNr=r(fDt,"albert"),fDt.forEach(t),RNr=r(fOe," \u2014 "),GZ=n(fOe,"A",{href:!0});var mDt=s(GZ);PNr=r(mDt,"TFAlbertForQuestionAnswering"),mDt.forEach(t),BNr=r(fOe," (ALBERT model)"),fOe.forEach(t),INr=i(pe),RE=n(pe,"LI",{});var mOe=s(RE);K4e=n(mOe,"STRONG",{});var gDt=s(K4e);NNr=r(gDt,"bert"),gDt.forEach(t),qNr=r(mOe," \u2014 "),OZ=n(mOe,"A",{href:!0});var hDt=s(OZ);jNr=r(hDt,"TFBertForQuestionAnswering"),hDt.forEach(t),DNr=r(mOe," (BERT model)"),mOe.forEach(t),GNr=i(pe),PE=n(pe,"LI",{});var gOe=s(PE);Z4e=n(gOe,"STRONG",{});var pDt=s(Z4e);ONr=r(pDt,"camembert"),pDt.forEach(t),VNr=r(gOe," \u2014 "),VZ=n(gOe,"A",{href:!0});var _Dt=s(VZ);XNr=r(_Dt,"TFCamembertForQuestionAnswering"),_Dt.forEach(t),zNr=r(gOe," (CamemBERT model)"),gOe.forEach(t),WNr=i(pe),BE=n(pe,"LI",{});var hOe=s(BE);eEe=n(hOe,"STRONG",{});var uDt=s(eEe);QNr=r(uDt,"convbert"),uDt.forEach(t),HNr=r(hOe," \u2014 "),XZ=n(hOe,"A",{href:!0});var bDt=s(XZ);UNr=r(bDt,"TFConvBertForQuestionAnswering"),bDt.forEach(t),JNr=r(hOe," (ConvBERT model)"),hOe.forEach(t),YNr=i(pe),IE=n(pe,"LI",{});var pOe=s(IE);oEe=n(pOe,"STRONG",{});var vDt=s(oEe);KNr=r(vDt,"deberta"),vDt.forEach(t),ZNr=r(pOe," \u2014 "),zZ=n(pOe,"A",{href:!0});var FDt=s(zZ);eqr=r(FDt,"TFDebertaForQuestionAnswering"),FDt.forEach(t),oqr=r(pOe," (DeBERTa model)"),pOe.forEach(t),rqr=i(pe),NE=n(pe,"LI",{});var _Oe=s(NE);rEe=n(_Oe,"STRONG",{});var TDt=s(rEe);tqr=r(TDt,"deberta-v2"),TDt.forEach(t),aqr=r(_Oe," \u2014 "),WZ=n(_Oe,"A",{href:!0});var MDt=s(WZ);nqr=r(MDt,"TFDebertaV2ForQuestionAnswering"),MDt.forEach(t),sqr=r(_Oe," (DeBERTa-v2 model)"),_Oe.forEach(t),lqr=i(pe),qE=n(pe,"LI",{});var uOe=s(qE);tEe=n(uOe,"STRONG",{});var EDt=s(tEe);iqr=r(EDt,"distilbert"),EDt.forEach(t),dqr=r(uOe," \u2014 "),QZ=n(uOe,"A",{href:!0});var CDt=s(QZ);cqr=r(CDt,"TFDistilBertForQuestionAnswering"),CDt.forEach(t),fqr=r(uOe," (DistilBERT model)"),uOe.forEach(t),mqr=i(pe),jE=n(pe,"LI",{});var bOe=s(jE);aEe=n(bOe,"STRONG",{});var wDt=s(aEe);gqr=r(wDt,"electra"),wDt.forEach(t),hqr=r(bOe," \u2014 "),HZ=n(bOe,"A",{href:!0});var ADt=s(HZ);pqr=r(ADt,"TFElectraForQuestionAnswering"),ADt.forEach(t),_qr=r(bOe," (ELECTRA model)"),bOe.forEach(t),uqr=i(pe),DE=n(pe,"LI",{});var vOe=s(DE);nEe=n(vOe,"STRONG",{});var LDt=s(nEe);bqr=r(LDt,"flaubert"),LDt.forEach(t),vqr=r(vOe," \u2014 "),UZ=n(vOe,"A",{href:!0});var yDt=s(UZ);Fqr=r(yDt,"TFFlaubertForQuestionAnsweringSimple"),yDt.forEach(t),Tqr=r(vOe," (FlauBERT model)"),vOe.forEach(t),Mqr=i(pe),GE=n(pe,"LI",{});var FOe=s(GE);sEe=n(FOe,"STRONG",{});var xDt=s(sEe);Eqr=r(xDt,"funnel"),xDt.forEach(t),Cqr=r(FOe," \u2014 "),JZ=n(FOe,"A",{href:!0});var $Dt=s(JZ);wqr=r($Dt,"TFFunnelForQuestionAnswering"),$Dt.forEach(t),Aqr=r(FOe," (Funnel Transformer model)"),FOe.forEach(t),Lqr=i(pe),OE=n(pe,"LI",{});var TOe=s(OE);lEe=n(TOe,"STRONG",{});var kDt=s(lEe);yqr=r(kDt,"gptj"),kDt.forEach(t),xqr=r(TOe," \u2014 "),YZ=n(TOe,"A",{href:!0});var SDt=s(YZ);$qr=r(SDt,"TFGPTJForQuestionAnswering"),SDt.forEach(t),kqr=r(TOe," (GPT-J model)"),TOe.forEach(t),Sqr=i(pe),VE=n(pe,"LI",{});var MOe=s(VE);iEe=n(MOe,"STRONG",{});var RDt=s(iEe);Rqr=r(RDt,"longformer"),RDt.forEach(t),Pqr=r(MOe," \u2014 "),KZ=n(MOe,"A",{href:!0});var PDt=s(KZ);Bqr=r(PDt,"TFLongformerForQuestionAnswering"),PDt.forEach(t),Iqr=r(MOe," (Longformer model)"),MOe.forEach(t),Nqr=i(pe),XE=n(pe,"LI",{});var EOe=s(XE);dEe=n(EOe,"STRONG",{});var BDt=s(dEe);qqr=r(BDt,"mobilebert"),BDt.forEach(t),jqr=r(EOe," \u2014 "),ZZ=n(EOe,"A",{href:!0});var IDt=s(ZZ);Dqr=r(IDt,"TFMobileBertForQuestionAnswering"),IDt.forEach(t),Gqr=r(EOe," (MobileBERT model)"),EOe.forEach(t),Oqr=i(pe),zE=n(pe,"LI",{});var COe=s(zE);cEe=n(COe,"STRONG",{});var NDt=s(cEe);Vqr=r(NDt,"mpnet"),NDt.forEach(t),Xqr=r(COe," \u2014 "),eee=n(COe,"A",{href:!0});var qDt=s(eee);zqr=r(qDt,"TFMPNetForQuestionAnswering"),qDt.forEach(t),Wqr=r(COe," (MPNet model)"),COe.forEach(t),Qqr=i(pe),WE=n(pe,"LI",{});var wOe=s(WE);fEe=n(wOe,"STRONG",{});var jDt=s(fEe);Hqr=r(jDt,"rembert"),jDt.forEach(t),Uqr=r(wOe," \u2014 "),oee=n(wOe,"A",{href:!0});var DDt=s(oee);Jqr=r(DDt,"TFRemBertForQuestionAnswering"),DDt.forEach(t),Yqr=r(wOe," (RemBERT model)"),wOe.forEach(t),Kqr=i(pe),QE=n(pe,"LI",{});var AOe=s(QE);mEe=n(AOe,"STRONG",{});var GDt=s(mEe);Zqr=r(GDt,"roberta"),GDt.forEach(t),ejr=r(AOe," \u2014 "),ree=n(AOe,"A",{href:!0});var ODt=s(ree);ojr=r(ODt,"TFRobertaForQuestionAnswering"),ODt.forEach(t),rjr=r(AOe," (RoBERTa model)"),AOe.forEach(t),tjr=i(pe),HE=n(pe,"LI",{});var LOe=s(HE);gEe=n(LOe,"STRONG",{});var VDt=s(gEe);ajr=r(VDt,"roformer"),VDt.forEach(t),njr=r(LOe," \u2014 "),tee=n(LOe,"A",{href:!0});var XDt=s(tee);sjr=r(XDt,"TFRoFormerForQuestionAnswering"),XDt.forEach(t),ljr=r(LOe," (RoFormer model)"),LOe.forEach(t),ijr=i(pe),UE=n(pe,"LI",{});var yOe=s(UE);hEe=n(yOe,"STRONG",{});var zDt=s(hEe);djr=r(zDt,"xlm"),zDt.forEach(t),cjr=r(yOe," \u2014 "),aee=n(yOe,"A",{href:!0});var WDt=s(aee);fjr=r(WDt,"TFXLMForQuestionAnsweringSimple"),WDt.forEach(t),mjr=r(yOe," (XLM model)"),yOe.forEach(t),gjr=i(pe),JE=n(pe,"LI",{});var xOe=s(JE);pEe=n(xOe,"STRONG",{});var QDt=s(pEe);hjr=r(QDt,"xlm-roberta"),QDt.forEach(t),pjr=r(xOe," \u2014 "),nee=n(xOe,"A",{href:!0});var HDt=s(nee);_jr=r(HDt,"TFXLMRobertaForQuestionAnswering"),HDt.forEach(t),ujr=r(xOe," (XLM-RoBERTa model)"),xOe.forEach(t),bjr=i(pe),YE=n(pe,"LI",{});var $Oe=s(YE);_Ee=n($Oe,"STRONG",{});var UDt=s(_Ee);vjr=r(UDt,"xlnet"),UDt.forEach(t),Fjr=r($Oe," \u2014 "),see=n($Oe,"A",{href:!0});var JDt=s(see);Tjr=r(JDt,"TFXLNetForQuestionAnsweringSimple"),JDt.forEach(t),Mjr=r($Oe," (XLNet model)"),$Oe.forEach(t),pe.forEach(t),Ejr=i(ei),T(KE.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),mWe=i(f),Xc=n(f,"H2",{class:!0});var THe=s(Xc);ZE=n(THe,"A",{id:!0,class:!0,href:!0});var YDt=s(ZE);uEe=n(YDt,"SPAN",{});var KDt=s(uEe);T(s$.$$.fragment,KDt),KDt.forEach(t),YDt.forEach(t),Cjr=i(THe),bEe=n(THe,"SPAN",{});var ZDt=s(bEe);wjr=r(ZDt,"TFAutoModelForVision2Seq"),ZDt.forEach(t),THe.forEach(t),gWe=i(f),gr=n(f,"DIV",{class:!0});var oi=s(gr);T(l$.$$.fragment,oi),Ajr=i(oi),zc=n(oi,"P",{});var vae=s(zc);Ljr=r(vae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),lee=n(vae,"A",{href:!0});var eGt=s(lee);yjr=r(eGt,"from_pretrained()"),eGt.forEach(t),xjr=r(vae," class method or the "),iee=n(vae,"A",{href:!0});var oGt=s(iee);$jr=r(oGt,"from_config()"),oGt.forEach(t),kjr=r(vae,` class
method.`),vae.forEach(t),Sjr=i(oi),i$=n(oi,"P",{});var MHe=s(i$);Rjr=r(MHe,"This class cannot be instantiated directly using "),vEe=n(MHe,"CODE",{});var rGt=s(vEe);Pjr=r(rGt,"__init__()"),rGt.forEach(t),Bjr=r(MHe," (throws an error)."),MHe.forEach(t),Ijr=i(oi),zt=n(oi,"DIV",{class:!0});var BA=s(zt);T(d$.$$.fragment,BA),Njr=i(BA),FEe=n(BA,"P",{});var tGt=s(FEe);qjr=r(tGt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tGt.forEach(t),jjr=i(BA),Wc=n(BA,"P",{});var Fae=s(Wc);Djr=r(Fae,`Note:
Loading a model from its configuration file does `),TEe=n(Fae,"STRONG",{});var aGt=s(TEe);Gjr=r(aGt,"not"),aGt.forEach(t),Ojr=r(Fae,` load the model weights. It only affects the
model\u2019s configuration. Use `),dee=n(Fae,"A",{href:!0});var nGt=s(dee);Vjr=r(nGt,"from_pretrained()"),nGt.forEach(t),Xjr=r(Fae," to load the model weights."),Fae.forEach(t),zjr=i(BA),T(eC.$$.fragment,BA),BA.forEach(t),Wjr=i(oi),Gr=n(oi,"DIV",{class:!0});var ri=s(Gr);T(c$.$$.fragment,ri),Qjr=i(ri),MEe=n(ri,"P",{});var sGt=s(MEe);Hjr=r(sGt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),sGt.forEach(t),Ujr=i(ri),vn=n(ri,"P",{});var IA=s(vn);Jjr=r(IA,"The model class to instantiate is selected based on the "),EEe=n(IA,"CODE",{});var lGt=s(EEe);Yjr=r(lGt,"model_type"),lGt.forEach(t),Kjr=r(IA,` property of the config object (either
passed as an argument or loaded from `),CEe=n(IA,"CODE",{});var iGt=s(CEe);Zjr=r(iGt,"pretrained_model_name_or_path"),iGt.forEach(t),eDr=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wEe=n(IA,"CODE",{});var dGt=s(wEe);oDr=r(dGt,"pretrained_model_name_or_path"),dGt.forEach(t),rDr=r(IA,":"),IA.forEach(t),tDr=i(ri),AEe=n(ri,"UL",{});var cGt=s(AEe);oC=n(cGt,"LI",{});var kOe=s(oC);LEe=n(kOe,"STRONG",{});var fGt=s(LEe);aDr=r(fGt,"vision-encoder-decoder"),fGt.forEach(t),nDr=r(kOe," \u2014 "),cee=n(kOe,"A",{href:!0});var mGt=s(cee);sDr=r(mGt,"TFVisionEncoderDecoderModel"),mGt.forEach(t),lDr=r(kOe," (Vision Encoder decoder model)"),kOe.forEach(t),cGt.forEach(t),iDr=i(ri),T(rC.$$.fragment,ri),ri.forEach(t),oi.forEach(t),hWe=i(f),Qc=n(f,"H2",{class:!0});var EHe=s(Qc);tC=n(EHe,"A",{id:!0,class:!0,href:!0});var gGt=s(tC);yEe=n(gGt,"SPAN",{});var hGt=s(yEe);T(f$.$$.fragment,hGt),hGt.forEach(t),gGt.forEach(t),dDr=i(EHe),xEe=n(EHe,"SPAN",{});var pGt=s(xEe);cDr=r(pGt,"TFAutoModelForSpeechSeq2Seq"),pGt.forEach(t),EHe.forEach(t),pWe=i(f),hr=n(f,"DIV",{class:!0});var ti=s(hr);T(m$.$$.fragment,ti),fDr=i(ti),Hc=n(ti,"P",{});var Tae=s(Hc);mDr=r(Tae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),fee=n(Tae,"A",{href:!0});var _Gt=s(fee);gDr=r(_Gt,"from_pretrained()"),_Gt.forEach(t),hDr=r(Tae," class method or the "),mee=n(Tae,"A",{href:!0});var uGt=s(mee);pDr=r(uGt,"from_config()"),uGt.forEach(t),_Dr=r(Tae,` class
method.`),Tae.forEach(t),uDr=i(ti),g$=n(ti,"P",{});var CHe=s(g$);bDr=r(CHe,"This class cannot be instantiated directly using "),$Ee=n(CHe,"CODE",{});var bGt=s($Ee);vDr=r(bGt,"__init__()"),bGt.forEach(t),FDr=r(CHe," (throws an error)."),CHe.forEach(t),TDr=i(ti),Wt=n(ti,"DIV",{class:!0});var NA=s(Wt);T(h$.$$.fragment,NA),MDr=i(NA),kEe=n(NA,"P",{});var vGt=s(kEe);EDr=r(vGt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),vGt.forEach(t),CDr=i(NA),Uc=n(NA,"P",{});var Mae=s(Uc);wDr=r(Mae,`Note:
Loading a model from its configuration file does `),SEe=n(Mae,"STRONG",{});var FGt=s(SEe);ADr=r(FGt,"not"),FGt.forEach(t),LDr=r(Mae,` load the model weights. It only affects the
model\u2019s configuration. Use `),gee=n(Mae,"A",{href:!0});var TGt=s(gee);yDr=r(TGt,"from_pretrained()"),TGt.forEach(t),xDr=r(Mae," to load the model weights."),Mae.forEach(t),$Dr=i(NA),T(aC.$$.fragment,NA),NA.forEach(t),kDr=i(ti),Or=n(ti,"DIV",{class:!0});var ai=s(Or);T(p$.$$.fragment,ai),SDr=i(ai),REe=n(ai,"P",{});var MGt=s(REe);RDr=r(MGt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),MGt.forEach(t),PDr=i(ai),Fn=n(ai,"P",{});var qA=s(Fn);BDr=r(qA,"The model class to instantiate is selected based on the "),PEe=n(qA,"CODE",{});var EGt=s(PEe);IDr=r(EGt,"model_type"),EGt.forEach(t),NDr=r(qA,` property of the config object (either
passed as an argument or loaded from `),BEe=n(qA,"CODE",{});var CGt=s(BEe);qDr=r(CGt,"pretrained_model_name_or_path"),CGt.forEach(t),jDr=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IEe=n(qA,"CODE",{});var wGt=s(IEe);DDr=r(wGt,"pretrained_model_name_or_path"),wGt.forEach(t),GDr=r(qA,":"),qA.forEach(t),ODr=i(ai),NEe=n(ai,"UL",{});var AGt=s(NEe);nC=n(AGt,"LI",{});var SOe=s(nC);qEe=n(SOe,"STRONG",{});var LGt=s(qEe);VDr=r(LGt,"speech_to_text"),LGt.forEach(t),XDr=r(SOe," \u2014 "),hee=n(SOe,"A",{href:!0});var yGt=s(hee);zDr=r(yGt,"TFSpeech2TextForConditionalGeneration"),yGt.forEach(t),WDr=r(SOe," (Speech2Text model)"),SOe.forEach(t),AGt.forEach(t),QDr=i(ai),T(sC.$$.fragment,ai),ai.forEach(t),ti.forEach(t),_We=i(f),Jc=n(f,"H2",{class:!0});var wHe=s(Jc);lC=n(wHe,"A",{id:!0,class:!0,href:!0});var xGt=s(lC);jEe=n(xGt,"SPAN",{});var $Gt=s(jEe);T(_$.$$.fragment,$Gt),$Gt.forEach(t),xGt.forEach(t),HDr=i(wHe),DEe=n(wHe,"SPAN",{});var kGt=s(DEe);UDr=r(kGt,"FlaxAutoModel"),kGt.forEach(t),wHe.forEach(t),uWe=i(f),pr=n(f,"DIV",{class:!0});var ni=s(pr);T(u$.$$.fragment,ni),JDr=i(ni),Yc=n(ni,"P",{});var Eae=s(Yc);YDr=r(Eae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),pee=n(Eae,"A",{href:!0});var SGt=s(pee);KDr=r(SGt,"from_pretrained()"),SGt.forEach(t),ZDr=r(Eae," class method or the "),_ee=n(Eae,"A",{href:!0});var RGt=s(_ee);eGr=r(RGt,"from_config()"),RGt.forEach(t),oGr=r(Eae,` class
method.`),Eae.forEach(t),rGr=i(ni),b$=n(ni,"P",{});var AHe=s(b$);tGr=r(AHe,"This class cannot be instantiated directly using "),GEe=n(AHe,"CODE",{});var PGt=s(GEe);aGr=r(PGt,"__init__()"),PGt.forEach(t),nGr=r(AHe," (throws an error)."),AHe.forEach(t),sGr=i(ni),Qt=n(ni,"DIV",{class:!0});var jA=s(Qt);T(v$.$$.fragment,jA),lGr=i(jA),OEe=n(jA,"P",{});var BGt=s(OEe);iGr=r(BGt,"Instantiates one of the base model classes of the library from a configuration."),BGt.forEach(t),dGr=i(jA),Kc=n(jA,"P",{});var Cae=s(Kc);cGr=r(Cae,`Note:
Loading a model from its configuration file does `),VEe=n(Cae,"STRONG",{});var IGt=s(VEe);fGr=r(IGt,"not"),IGt.forEach(t),mGr=r(Cae,` load the model weights. It only affects the
model\u2019s configuration. Use `),uee=n(Cae,"A",{href:!0});var NGt=s(uee);gGr=r(NGt,"from_pretrained()"),NGt.forEach(t),hGr=r(Cae," to load the model weights."),Cae.forEach(t),pGr=i(jA),T(iC.$$.fragment,jA),jA.forEach(t),_Gr=i(ni),Vr=n(ni,"DIV",{class:!0});var si=s(Vr);T(F$.$$.fragment,si),uGr=i(si),XEe=n(si,"P",{});var qGt=s(XEe);bGr=r(qGt,"Instantiate one of the base model classes of the library from a pretrained model."),qGt.forEach(t),vGr=i(si),Tn=n(si,"P",{});var DA=s(Tn);FGr=r(DA,"The model class to instantiate is selected based on the "),zEe=n(DA,"CODE",{});var jGt=s(zEe);TGr=r(jGt,"model_type"),jGt.forEach(t),MGr=r(DA,` property of the config object (either
passed as an argument or loaded from `),WEe=n(DA,"CODE",{});var DGt=s(WEe);EGr=r(DGt,"pretrained_model_name_or_path"),DGt.forEach(t),CGr=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QEe=n(DA,"CODE",{});var GGt=s(QEe);wGr=r(GGt,"pretrained_model_name_or_path"),GGt.forEach(t),AGr=r(DA,":"),DA.forEach(t),LGr=i(si),oe=n(si,"UL",{});var ae=s(oe);dC=n(ae,"LI",{});var ROe=s(dC);HEe=n(ROe,"STRONG",{});var OGt=s(HEe);yGr=r(OGt,"albert"),OGt.forEach(t),xGr=r(ROe," \u2014 "),bee=n(ROe,"A",{href:!0});var VGt=s(bee);$Gr=r(VGt,"FlaxAlbertModel"),VGt.forEach(t),kGr=r(ROe," (ALBERT model)"),ROe.forEach(t),SGr=i(ae),cC=n(ae,"LI",{});var POe=s(cC);UEe=n(POe,"STRONG",{});var XGt=s(UEe);RGr=r(XGt,"bart"),XGt.forEach(t),PGr=r(POe," \u2014 "),vee=n(POe,"A",{href:!0});var zGt=s(vee);BGr=r(zGt,"FlaxBartModel"),zGt.forEach(t),IGr=r(POe," (BART model)"),POe.forEach(t),NGr=i(ae),fC=n(ae,"LI",{});var BOe=s(fC);JEe=n(BOe,"STRONG",{});var WGt=s(JEe);qGr=r(WGt,"beit"),WGt.forEach(t),jGr=r(BOe," \u2014 "),Fee=n(BOe,"A",{href:!0});var QGt=s(Fee);DGr=r(QGt,"FlaxBeitModel"),QGt.forEach(t),GGr=r(BOe," (BEiT model)"),BOe.forEach(t),OGr=i(ae),mC=n(ae,"LI",{});var IOe=s(mC);YEe=n(IOe,"STRONG",{});var HGt=s(YEe);VGr=r(HGt,"bert"),HGt.forEach(t),XGr=r(IOe," \u2014 "),Tee=n(IOe,"A",{href:!0});var UGt=s(Tee);zGr=r(UGt,"FlaxBertModel"),UGt.forEach(t),WGr=r(IOe," (BERT model)"),IOe.forEach(t),QGr=i(ae),gC=n(ae,"LI",{});var NOe=s(gC);KEe=n(NOe,"STRONG",{});var JGt=s(KEe);HGr=r(JGt,"big_bird"),JGt.forEach(t),UGr=r(NOe," \u2014 "),Mee=n(NOe,"A",{href:!0});var YGt=s(Mee);JGr=r(YGt,"FlaxBigBirdModel"),YGt.forEach(t),YGr=r(NOe," (BigBird model)"),NOe.forEach(t),KGr=i(ae),hC=n(ae,"LI",{});var qOe=s(hC);ZEe=n(qOe,"STRONG",{});var KGt=s(ZEe);ZGr=r(KGt,"blenderbot"),KGt.forEach(t),eOr=r(qOe," \u2014 "),Eee=n(qOe,"A",{href:!0});var ZGt=s(Eee);oOr=r(ZGt,"FlaxBlenderbotModel"),ZGt.forEach(t),rOr=r(qOe," (Blenderbot model)"),qOe.forEach(t),tOr=i(ae),pC=n(ae,"LI",{});var jOe=s(pC);eCe=n(jOe,"STRONG",{});var eOt=s(eCe);aOr=r(eOt,"blenderbot-small"),eOt.forEach(t),nOr=r(jOe," \u2014 "),Cee=n(jOe,"A",{href:!0});var oOt=s(Cee);sOr=r(oOt,"FlaxBlenderbotSmallModel"),oOt.forEach(t),lOr=r(jOe," (BlenderbotSmall model)"),jOe.forEach(t),iOr=i(ae),_C=n(ae,"LI",{});var DOe=s(_C);oCe=n(DOe,"STRONG",{});var rOt=s(oCe);dOr=r(rOt,"clip"),rOt.forEach(t),cOr=r(DOe," \u2014 "),wee=n(DOe,"A",{href:!0});var tOt=s(wee);fOr=r(tOt,"FlaxCLIPModel"),tOt.forEach(t),mOr=r(DOe," (CLIP model)"),DOe.forEach(t),gOr=i(ae),uC=n(ae,"LI",{});var GOe=s(uC);rCe=n(GOe,"STRONG",{});var aOt=s(rCe);hOr=r(aOt,"distilbert"),aOt.forEach(t),pOr=r(GOe," \u2014 "),Aee=n(GOe,"A",{href:!0});var nOt=s(Aee);_Or=r(nOt,"FlaxDistilBertModel"),nOt.forEach(t),uOr=r(GOe," (DistilBERT model)"),GOe.forEach(t),bOr=i(ae),bC=n(ae,"LI",{});var OOe=s(bC);tCe=n(OOe,"STRONG",{});var sOt=s(tCe);vOr=r(sOt,"electra"),sOt.forEach(t),FOr=r(OOe," \u2014 "),Lee=n(OOe,"A",{href:!0});var lOt=s(Lee);TOr=r(lOt,"FlaxElectraModel"),lOt.forEach(t),MOr=r(OOe," (ELECTRA model)"),OOe.forEach(t),EOr=i(ae),vC=n(ae,"LI",{});var VOe=s(vC);aCe=n(VOe,"STRONG",{});var iOt=s(aCe);COr=r(iOt,"gpt2"),iOt.forEach(t),wOr=r(VOe," \u2014 "),yee=n(VOe,"A",{href:!0});var dOt=s(yee);AOr=r(dOt,"FlaxGPT2Model"),dOt.forEach(t),LOr=r(VOe," (OpenAI GPT-2 model)"),VOe.forEach(t),yOr=i(ae),FC=n(ae,"LI",{});var XOe=s(FC);nCe=n(XOe,"STRONG",{});var cOt=s(nCe);xOr=r(cOt,"gpt_neo"),cOt.forEach(t),$Or=r(XOe," \u2014 "),xee=n(XOe,"A",{href:!0});var fOt=s(xee);kOr=r(fOt,"FlaxGPTNeoModel"),fOt.forEach(t),SOr=r(XOe," (GPT Neo model)"),XOe.forEach(t),ROr=i(ae),TC=n(ae,"LI",{});var zOe=s(TC);sCe=n(zOe,"STRONG",{});var mOt=s(sCe);POr=r(mOt,"gptj"),mOt.forEach(t),BOr=r(zOe," \u2014 "),$ee=n(zOe,"A",{href:!0});var gOt=s($ee);IOr=r(gOt,"FlaxGPTJModel"),gOt.forEach(t),NOr=r(zOe," (GPT-J model)"),zOe.forEach(t),qOr=i(ae),MC=n(ae,"LI",{});var WOe=s(MC);lCe=n(WOe,"STRONG",{});var hOt=s(lCe);jOr=r(hOt,"longt5"),hOt.forEach(t),DOr=r(WOe," \u2014 "),kee=n(WOe,"A",{href:!0});var pOt=s(kee);GOr=r(pOt,"FlaxLongT5Model"),pOt.forEach(t),OOr=r(WOe," (LongT5 model)"),WOe.forEach(t),VOr=i(ae),EC=n(ae,"LI",{});var QOe=s(EC);iCe=n(QOe,"STRONG",{});var _Ot=s(iCe);XOr=r(_Ot,"marian"),_Ot.forEach(t),zOr=r(QOe," \u2014 "),See=n(QOe,"A",{href:!0});var uOt=s(See);WOr=r(uOt,"FlaxMarianModel"),uOt.forEach(t),QOr=r(QOe," (Marian model)"),QOe.forEach(t),HOr=i(ae),CC=n(ae,"LI",{});var HOe=s(CC);dCe=n(HOe,"STRONG",{});var bOt=s(dCe);UOr=r(bOt,"mbart"),bOt.forEach(t),JOr=r(HOe," \u2014 "),Ree=n(HOe,"A",{href:!0});var vOt=s(Ree);YOr=r(vOt,"FlaxMBartModel"),vOt.forEach(t),KOr=r(HOe," (mBART model)"),HOe.forEach(t),ZOr=i(ae),wC=n(ae,"LI",{});var UOe=s(wC);cCe=n(UOe,"STRONG",{});var FOt=s(cCe);eVr=r(FOt,"mt5"),FOt.forEach(t),oVr=r(UOe," \u2014 "),Pee=n(UOe,"A",{href:!0});var TOt=s(Pee);rVr=r(TOt,"FlaxMT5Model"),TOt.forEach(t),tVr=r(UOe," (MT5 model)"),UOe.forEach(t),aVr=i(ae),AC=n(ae,"LI",{});var JOe=s(AC);fCe=n(JOe,"STRONG",{});var MOt=s(fCe);nVr=r(MOt,"opt"),MOt.forEach(t),sVr=r(JOe," \u2014 "),Bee=n(JOe,"A",{href:!0});var EOt=s(Bee);lVr=r(EOt,"FlaxOPTModel"),EOt.forEach(t),iVr=r(JOe," (OPT model)"),JOe.forEach(t),dVr=i(ae),LC=n(ae,"LI",{});var YOe=s(LC);mCe=n(YOe,"STRONG",{});var COt=s(mCe);cVr=r(COt,"pegasus"),COt.forEach(t),fVr=r(YOe," \u2014 "),Iee=n(YOe,"A",{href:!0});var wOt=s(Iee);mVr=r(wOt,"FlaxPegasusModel"),wOt.forEach(t),gVr=r(YOe," (Pegasus model)"),YOe.forEach(t),hVr=i(ae),yC=n(ae,"LI",{});var KOe=s(yC);gCe=n(KOe,"STRONG",{});var AOt=s(gCe);pVr=r(AOt,"roberta"),AOt.forEach(t),_Vr=r(KOe," \u2014 "),Nee=n(KOe,"A",{href:!0});var LOt=s(Nee);uVr=r(LOt,"FlaxRobertaModel"),LOt.forEach(t),bVr=r(KOe," (RoBERTa model)"),KOe.forEach(t),vVr=i(ae),xC=n(ae,"LI",{});var ZOe=s(xC);hCe=n(ZOe,"STRONG",{});var yOt=s(hCe);FVr=r(yOt,"roformer"),yOt.forEach(t),TVr=r(ZOe," \u2014 "),qee=n(ZOe,"A",{href:!0});var xOt=s(qee);MVr=r(xOt,"FlaxRoFormerModel"),xOt.forEach(t),EVr=r(ZOe," (RoFormer model)"),ZOe.forEach(t),CVr=i(ae),$C=n(ae,"LI",{});var eVe=s($C);pCe=n(eVe,"STRONG",{});var $Ot=s(pCe);wVr=r($Ot,"t5"),$Ot.forEach(t),AVr=r(eVe," \u2014 "),jee=n(eVe,"A",{href:!0});var kOt=s(jee);LVr=r(kOt,"FlaxT5Model"),kOt.forEach(t),yVr=r(eVe," (T5 model)"),eVe.forEach(t),xVr=i(ae),kC=n(ae,"LI",{});var oVe=s(kC);_Ce=n(oVe,"STRONG",{});var SOt=s(_Ce);$Vr=r(SOt,"vision-text-dual-encoder"),SOt.forEach(t),kVr=r(oVe," \u2014 "),Dee=n(oVe,"A",{href:!0});var ROt=s(Dee);SVr=r(ROt,"FlaxVisionTextDualEncoderModel"),ROt.forEach(t),RVr=r(oVe," (VisionTextDualEncoder model)"),oVe.forEach(t),PVr=i(ae),SC=n(ae,"LI",{});var rVe=s(SC);uCe=n(rVe,"STRONG",{});var POt=s(uCe);BVr=r(POt,"vit"),POt.forEach(t),IVr=r(rVe," \u2014 "),Gee=n(rVe,"A",{href:!0});var BOt=s(Gee);NVr=r(BOt,"FlaxViTModel"),BOt.forEach(t),qVr=r(rVe," (ViT model)"),rVe.forEach(t),jVr=i(ae),RC=n(ae,"LI",{});var tVe=s(RC);bCe=n(tVe,"STRONG",{});var IOt=s(bCe);DVr=r(IOt,"wav2vec2"),IOt.forEach(t),GVr=r(tVe," \u2014 "),Oee=n(tVe,"A",{href:!0});var NOt=s(Oee);OVr=r(NOt,"FlaxWav2Vec2Model"),NOt.forEach(t),VVr=r(tVe," (Wav2Vec2 model)"),tVe.forEach(t),XVr=i(ae),PC=n(ae,"LI",{});var aVe=s(PC);vCe=n(aVe,"STRONG",{});var qOt=s(vCe);zVr=r(qOt,"xglm"),qOt.forEach(t),WVr=r(aVe," \u2014 "),Vee=n(aVe,"A",{href:!0});var jOt=s(Vee);QVr=r(jOt,"FlaxXGLMModel"),jOt.forEach(t),HVr=r(aVe," (XGLM model)"),aVe.forEach(t),UVr=i(ae),BC=n(ae,"LI",{});var nVe=s(BC);FCe=n(nVe,"STRONG",{});var DOt=s(FCe);JVr=r(DOt,"xlm-roberta"),DOt.forEach(t),YVr=r(nVe," \u2014 "),Xee=n(nVe,"A",{href:!0});var GOt=s(Xee);KVr=r(GOt,"FlaxXLMRobertaModel"),GOt.forEach(t),ZVr=r(nVe," (XLM-RoBERTa model)"),nVe.forEach(t),ae.forEach(t),eXr=i(si),T(IC.$$.fragment,si),si.forEach(t),ni.forEach(t),bWe=i(f),Zc=n(f,"H2",{class:!0});var LHe=s(Zc);NC=n(LHe,"A",{id:!0,class:!0,href:!0});var OOt=s(NC);TCe=n(OOt,"SPAN",{});var VOt=s(TCe);T(T$.$$.fragment,VOt),VOt.forEach(t),OOt.forEach(t),oXr=i(LHe),MCe=n(LHe,"SPAN",{});var XOt=s(MCe);rXr=r(XOt,"FlaxAutoModelForCausalLM"),XOt.forEach(t),LHe.forEach(t),vWe=i(f),_r=n(f,"DIV",{class:!0});var li=s(_r);T(M$.$$.fragment,li),tXr=i(li),ef=n(li,"P",{});var wae=s(ef);aXr=r(wae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),zee=n(wae,"A",{href:!0});var zOt=s(zee);nXr=r(zOt,"from_pretrained()"),zOt.forEach(t),sXr=r(wae," class method or the "),Wee=n(wae,"A",{href:!0});var WOt=s(Wee);lXr=r(WOt,"from_config()"),WOt.forEach(t),iXr=r(wae,` class
method.`),wae.forEach(t),dXr=i(li),E$=n(li,"P",{});var yHe=s(E$);cXr=r(yHe,"This class cannot be instantiated directly using "),ECe=n(yHe,"CODE",{});var QOt=s(ECe);fXr=r(QOt,"__init__()"),QOt.forEach(t),mXr=r(yHe," (throws an error)."),yHe.forEach(t),gXr=i(li),Ht=n(li,"DIV",{class:!0});var GA=s(Ht);T(C$.$$.fragment,GA),hXr=i(GA),CCe=n(GA,"P",{});var HOt=s(CCe);pXr=r(HOt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),HOt.forEach(t),_Xr=i(GA),of=n(GA,"P",{});var Aae=s(of);uXr=r(Aae,`Note:
Loading a model from its configuration file does `),wCe=n(Aae,"STRONG",{});var UOt=s(wCe);bXr=r(UOt,"not"),UOt.forEach(t),vXr=r(Aae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qee=n(Aae,"A",{href:!0});var JOt=s(Qee);FXr=r(JOt,"from_pretrained()"),JOt.forEach(t),TXr=r(Aae," to load the model weights."),Aae.forEach(t),MXr=i(GA),T(qC.$$.fragment,GA),GA.forEach(t),EXr=i(li),Xr=n(li,"DIV",{class:!0});var ii=s(Xr);T(w$.$$.fragment,ii),CXr=i(ii),ACe=n(ii,"P",{});var YOt=s(ACe);wXr=r(YOt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),YOt.forEach(t),AXr=i(ii),Mn=n(ii,"P",{});var OA=s(Mn);LXr=r(OA,"The model class to instantiate is selected based on the "),LCe=n(OA,"CODE",{});var KOt=s(LCe);yXr=r(KOt,"model_type"),KOt.forEach(t),xXr=r(OA,` property of the config object (either
passed as an argument or loaded from `),yCe=n(OA,"CODE",{});var ZOt=s(yCe);$Xr=r(ZOt,"pretrained_model_name_or_path"),ZOt.forEach(t),kXr=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xCe=n(OA,"CODE",{});var eVt=s(xCe);SXr=r(eVt,"pretrained_model_name_or_path"),eVt.forEach(t),RXr=r(OA,":"),OA.forEach(t),PXr=i(ii),xe=n(ii,"UL",{});var Ne=s(xe);jC=n(Ne,"LI",{});var sVe=s(jC);$Ce=n(sVe,"STRONG",{});var oVt=s($Ce);BXr=r(oVt,"bart"),oVt.forEach(t),IXr=r(sVe," \u2014 "),Hee=n(sVe,"A",{href:!0});var rVt=s(Hee);NXr=r(rVt,"FlaxBartForCausalLM"),rVt.forEach(t),qXr=r(sVe," (BART model)"),sVe.forEach(t),jXr=i(Ne),DC=n(Ne,"LI",{});var lVe=s(DC);kCe=n(lVe,"STRONG",{});var tVt=s(kCe);DXr=r(tVt,"bert"),tVt.forEach(t),GXr=r(lVe," \u2014 "),Uee=n(lVe,"A",{href:!0});var aVt=s(Uee);OXr=r(aVt,"FlaxBertForCausalLM"),aVt.forEach(t),VXr=r(lVe," (BERT model)"),lVe.forEach(t),XXr=i(Ne),GC=n(Ne,"LI",{});var iVe=s(GC);SCe=n(iVe,"STRONG",{});var nVt=s(SCe);zXr=r(nVt,"big_bird"),nVt.forEach(t),WXr=r(iVe," \u2014 "),Jee=n(iVe,"A",{href:!0});var sVt=s(Jee);QXr=r(sVt,"FlaxBigBirdForCausalLM"),sVt.forEach(t),HXr=r(iVe," (BigBird model)"),iVe.forEach(t),UXr=i(Ne),OC=n(Ne,"LI",{});var dVe=s(OC);RCe=n(dVe,"STRONG",{});var lVt=s(RCe);JXr=r(lVt,"electra"),lVt.forEach(t),YXr=r(dVe," \u2014 "),Yee=n(dVe,"A",{href:!0});var iVt=s(Yee);KXr=r(iVt,"FlaxElectraForCausalLM"),iVt.forEach(t),ZXr=r(dVe," (ELECTRA model)"),dVe.forEach(t),ezr=i(Ne),VC=n(Ne,"LI",{});var cVe=s(VC);PCe=n(cVe,"STRONG",{});var dVt=s(PCe);ozr=r(dVt,"gpt2"),dVt.forEach(t),rzr=r(cVe," \u2014 "),Kee=n(cVe,"A",{href:!0});var cVt=s(Kee);tzr=r(cVt,"FlaxGPT2LMHeadModel"),cVt.forEach(t),azr=r(cVe," (OpenAI GPT-2 model)"),cVe.forEach(t),nzr=i(Ne),XC=n(Ne,"LI",{});var fVe=s(XC);BCe=n(fVe,"STRONG",{});var fVt=s(BCe);szr=r(fVt,"gpt_neo"),fVt.forEach(t),lzr=r(fVe," \u2014 "),Zee=n(fVe,"A",{href:!0});var mVt=s(Zee);izr=r(mVt,"FlaxGPTNeoForCausalLM"),mVt.forEach(t),dzr=r(fVe," (GPT Neo model)"),fVe.forEach(t),czr=i(Ne),zC=n(Ne,"LI",{});var mVe=s(zC);ICe=n(mVe,"STRONG",{});var gVt=s(ICe);fzr=r(gVt,"gptj"),gVt.forEach(t),mzr=r(mVe," \u2014 "),eoe=n(mVe,"A",{href:!0});var hVt=s(eoe);gzr=r(hVt,"FlaxGPTJForCausalLM"),hVt.forEach(t),hzr=r(mVe," (GPT-J model)"),mVe.forEach(t),pzr=i(Ne),WC=n(Ne,"LI",{});var gVe=s(WC);NCe=n(gVe,"STRONG",{});var pVt=s(NCe);_zr=r(pVt,"opt"),pVt.forEach(t),uzr=r(gVe," \u2014 "),ooe=n(gVe,"A",{href:!0});var _Vt=s(ooe);bzr=r(_Vt,"FlaxOPTForCausalLM"),_Vt.forEach(t),vzr=r(gVe," (OPT model)"),gVe.forEach(t),Fzr=i(Ne),QC=n(Ne,"LI",{});var hVe=s(QC);qCe=n(hVe,"STRONG",{});var uVt=s(qCe);Tzr=r(uVt,"roberta"),uVt.forEach(t),Mzr=r(hVe," \u2014 "),roe=n(hVe,"A",{href:!0});var bVt=s(roe);Ezr=r(bVt,"FlaxRobertaForCausalLM"),bVt.forEach(t),Czr=r(hVe," (RoBERTa model)"),hVe.forEach(t),wzr=i(Ne),HC=n(Ne,"LI",{});var pVe=s(HC);jCe=n(pVe,"STRONG",{});var vVt=s(jCe);Azr=r(vVt,"xglm"),vVt.forEach(t),Lzr=r(pVe," \u2014 "),toe=n(pVe,"A",{href:!0});var FVt=s(toe);yzr=r(FVt,"FlaxXGLMForCausalLM"),FVt.forEach(t),xzr=r(pVe," (XGLM model)"),pVe.forEach(t),Ne.forEach(t),$zr=i(ii),T(UC.$$.fragment,ii),ii.forEach(t),li.forEach(t),FWe=i(f),rf=n(f,"H2",{class:!0});var xHe=s(rf);JC=n(xHe,"A",{id:!0,class:!0,href:!0});var TVt=s(JC);DCe=n(TVt,"SPAN",{});var MVt=s(DCe);T(A$.$$.fragment,MVt),MVt.forEach(t),TVt.forEach(t),kzr=i(xHe),GCe=n(xHe,"SPAN",{});var EVt=s(GCe);Szr=r(EVt,"FlaxAutoModelForPreTraining"),EVt.forEach(t),xHe.forEach(t),TWe=i(f),ur=n(f,"DIV",{class:!0});var di=s(ur);T(L$.$$.fragment,di),Rzr=i(di),tf=n(di,"P",{});var Lae=s(tf);Pzr=r(Lae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),aoe=n(Lae,"A",{href:!0});var CVt=s(aoe);Bzr=r(CVt,"from_pretrained()"),CVt.forEach(t),Izr=r(Lae," class method or the "),noe=n(Lae,"A",{href:!0});var wVt=s(noe);Nzr=r(wVt,"from_config()"),wVt.forEach(t),qzr=r(Lae,` class
method.`),Lae.forEach(t),jzr=i(di),y$=n(di,"P",{});var $He=s(y$);Dzr=r($He,"This class cannot be instantiated directly using "),OCe=n($He,"CODE",{});var AVt=s(OCe);Gzr=r(AVt,"__init__()"),AVt.forEach(t),Ozr=r($He," (throws an error)."),$He.forEach(t),Vzr=i(di),Ut=n(di,"DIV",{class:!0});var VA=s(Ut);T(x$.$$.fragment,VA),Xzr=i(VA),VCe=n(VA,"P",{});var LVt=s(VCe);zzr=r(LVt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),LVt.forEach(t),Wzr=i(VA),af=n(VA,"P",{});var yae=s(af);Qzr=r(yae,`Note:
Loading a model from its configuration file does `),XCe=n(yae,"STRONG",{});var yVt=s(XCe);Hzr=r(yVt,"not"),yVt.forEach(t),Uzr=r(yae,` load the model weights. It only affects the
model\u2019s configuration. Use `),soe=n(yae,"A",{href:!0});var xVt=s(soe);Jzr=r(xVt,"from_pretrained()"),xVt.forEach(t),Yzr=r(yae," to load the model weights."),yae.forEach(t),Kzr=i(VA),T(YC.$$.fragment,VA),VA.forEach(t),Zzr=i(di),zr=n(di,"DIV",{class:!0});var ci=s(zr);T($$.$$.fragment,ci),eWr=i(ci),zCe=n(ci,"P",{});var $Vt=s(zCe);oWr=r($Vt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),$Vt.forEach(t),rWr=i(ci),En=n(ci,"P",{});var XA=s(En);tWr=r(XA,"The model class to instantiate is selected based on the "),WCe=n(XA,"CODE",{});var kVt=s(WCe);aWr=r(kVt,"model_type"),kVt.forEach(t),nWr=r(XA,` property of the config object (either
passed as an argument or loaded from `),QCe=n(XA,"CODE",{});var SVt=s(QCe);sWr=r(SVt,"pretrained_model_name_or_path"),SVt.forEach(t),lWr=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HCe=n(XA,"CODE",{});var RVt=s(HCe);iWr=r(RVt,"pretrained_model_name_or_path"),RVt.forEach(t),dWr=r(XA,":"),XA.forEach(t),cWr=i(ci),Ee=n(ci,"UL",{});var we=s(Ee);KC=n(we,"LI",{});var _Ve=s(KC);UCe=n(_Ve,"STRONG",{});var PVt=s(UCe);fWr=r(PVt,"albert"),PVt.forEach(t),mWr=r(_Ve," \u2014 "),loe=n(_Ve,"A",{href:!0});var BVt=s(loe);gWr=r(BVt,"FlaxAlbertForPreTraining"),BVt.forEach(t),hWr=r(_Ve," (ALBERT model)"),_Ve.forEach(t),pWr=i(we),ZC=n(we,"LI",{});var uVe=s(ZC);JCe=n(uVe,"STRONG",{});var IVt=s(JCe);_Wr=r(IVt,"bart"),IVt.forEach(t),uWr=r(uVe," \u2014 "),ioe=n(uVe,"A",{href:!0});var NVt=s(ioe);bWr=r(NVt,"FlaxBartForConditionalGeneration"),NVt.forEach(t),vWr=r(uVe," (BART model)"),uVe.forEach(t),FWr=i(we),e5=n(we,"LI",{});var bVe=s(e5);YCe=n(bVe,"STRONG",{});var qVt=s(YCe);TWr=r(qVt,"bert"),qVt.forEach(t),MWr=r(bVe," \u2014 "),doe=n(bVe,"A",{href:!0});var jVt=s(doe);EWr=r(jVt,"FlaxBertForPreTraining"),jVt.forEach(t),CWr=r(bVe," (BERT model)"),bVe.forEach(t),wWr=i(we),o5=n(we,"LI",{});var vVe=s(o5);KCe=n(vVe,"STRONG",{});var DVt=s(KCe);AWr=r(DVt,"big_bird"),DVt.forEach(t),LWr=r(vVe," \u2014 "),coe=n(vVe,"A",{href:!0});var GVt=s(coe);yWr=r(GVt,"FlaxBigBirdForPreTraining"),GVt.forEach(t),xWr=r(vVe," (BigBird model)"),vVe.forEach(t),$Wr=i(we),r5=n(we,"LI",{});var FVe=s(r5);ZCe=n(FVe,"STRONG",{});var OVt=s(ZCe);kWr=r(OVt,"electra"),OVt.forEach(t),SWr=r(FVe," \u2014 "),foe=n(FVe,"A",{href:!0});var VVt=s(foe);RWr=r(VVt,"FlaxElectraForPreTraining"),VVt.forEach(t),PWr=r(FVe," (ELECTRA model)"),FVe.forEach(t),BWr=i(we),t5=n(we,"LI",{});var TVe=s(t5);e5e=n(TVe,"STRONG",{});var XVt=s(e5e);IWr=r(XVt,"longt5"),XVt.forEach(t),NWr=r(TVe," \u2014 "),moe=n(TVe,"A",{href:!0});var zVt=s(moe);qWr=r(zVt,"FlaxLongT5ForConditionalGeneration"),zVt.forEach(t),jWr=r(TVe," (LongT5 model)"),TVe.forEach(t),DWr=i(we),a5=n(we,"LI",{});var MVe=s(a5);o5e=n(MVe,"STRONG",{});var WVt=s(o5e);GWr=r(WVt,"mbart"),WVt.forEach(t),OWr=r(MVe," \u2014 "),goe=n(MVe,"A",{href:!0});var QVt=s(goe);VWr=r(QVt,"FlaxMBartForConditionalGeneration"),QVt.forEach(t),XWr=r(MVe," (mBART model)"),MVe.forEach(t),zWr=i(we),n5=n(we,"LI",{});var EVe=s(n5);r5e=n(EVe,"STRONG",{});var HVt=s(r5e);WWr=r(HVt,"mt5"),HVt.forEach(t),QWr=r(EVe," \u2014 "),hoe=n(EVe,"A",{href:!0});var UVt=s(hoe);HWr=r(UVt,"FlaxMT5ForConditionalGeneration"),UVt.forEach(t),UWr=r(EVe," (MT5 model)"),EVe.forEach(t),JWr=i(we),s5=n(we,"LI",{});var CVe=s(s5);t5e=n(CVe,"STRONG",{});var JVt=s(t5e);YWr=r(JVt,"roberta"),JVt.forEach(t),KWr=r(CVe," \u2014 "),poe=n(CVe,"A",{href:!0});var YVt=s(poe);ZWr=r(YVt,"FlaxRobertaForMaskedLM"),YVt.forEach(t),eQr=r(CVe," (RoBERTa model)"),CVe.forEach(t),oQr=i(we),l5=n(we,"LI",{});var wVe=s(l5);a5e=n(wVe,"STRONG",{});var KVt=s(a5e);rQr=r(KVt,"roformer"),KVt.forEach(t),tQr=r(wVe," \u2014 "),_oe=n(wVe,"A",{href:!0});var ZVt=s(_oe);aQr=r(ZVt,"FlaxRoFormerForMaskedLM"),ZVt.forEach(t),nQr=r(wVe," (RoFormer model)"),wVe.forEach(t),sQr=i(we),i5=n(we,"LI",{});var AVe=s(i5);n5e=n(AVe,"STRONG",{});var eXt=s(n5e);lQr=r(eXt,"t5"),eXt.forEach(t),iQr=r(AVe," \u2014 "),uoe=n(AVe,"A",{href:!0});var oXt=s(uoe);dQr=r(oXt,"FlaxT5ForConditionalGeneration"),oXt.forEach(t),cQr=r(AVe," (T5 model)"),AVe.forEach(t),fQr=i(we),d5=n(we,"LI",{});var LVe=s(d5);s5e=n(LVe,"STRONG",{});var rXt=s(s5e);mQr=r(rXt,"wav2vec2"),rXt.forEach(t),gQr=r(LVe," \u2014 "),boe=n(LVe,"A",{href:!0});var tXt=s(boe);hQr=r(tXt,"FlaxWav2Vec2ForPreTraining"),tXt.forEach(t),pQr=r(LVe," (Wav2Vec2 model)"),LVe.forEach(t),_Qr=i(we),c5=n(we,"LI",{});var yVe=s(c5);l5e=n(yVe,"STRONG",{});var aXt=s(l5e);uQr=r(aXt,"xlm-roberta"),aXt.forEach(t),bQr=r(yVe," \u2014 "),voe=n(yVe,"A",{href:!0});var nXt=s(voe);vQr=r(nXt,"FlaxXLMRobertaForMaskedLM"),nXt.forEach(t),FQr=r(yVe," (XLM-RoBERTa model)"),yVe.forEach(t),we.forEach(t),TQr=i(ci),T(f5.$$.fragment,ci),ci.forEach(t),di.forEach(t),MWe=i(f),nf=n(f,"H2",{class:!0});var kHe=s(nf);m5=n(kHe,"A",{id:!0,class:!0,href:!0});var sXt=s(m5);i5e=n(sXt,"SPAN",{});var lXt=s(i5e);T(k$.$$.fragment,lXt),lXt.forEach(t),sXt.forEach(t),MQr=i(kHe),d5e=n(kHe,"SPAN",{});var iXt=s(d5e);EQr=r(iXt,"FlaxAutoModelForMaskedLM"),iXt.forEach(t),kHe.forEach(t),EWe=i(f),br=n(f,"DIV",{class:!0});var fi=s(br);T(S$.$$.fragment,fi),CQr=i(fi),sf=n(fi,"P",{});var xae=s(sf);wQr=r(xae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Foe=n(xae,"A",{href:!0});var dXt=s(Foe);AQr=r(dXt,"from_pretrained()"),dXt.forEach(t),LQr=r(xae," class method or the "),Toe=n(xae,"A",{href:!0});var cXt=s(Toe);yQr=r(cXt,"from_config()"),cXt.forEach(t),xQr=r(xae,` class
method.`),xae.forEach(t),$Qr=i(fi),R$=n(fi,"P",{});var SHe=s(R$);kQr=r(SHe,"This class cannot be instantiated directly using "),c5e=n(SHe,"CODE",{});var fXt=s(c5e);SQr=r(fXt,"__init__()"),fXt.forEach(t),RQr=r(SHe," (throws an error)."),SHe.forEach(t),PQr=i(fi),Jt=n(fi,"DIV",{class:!0});var zA=s(Jt);T(P$.$$.fragment,zA),BQr=i(zA),f5e=n(zA,"P",{});var mXt=s(f5e);IQr=r(mXt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),mXt.forEach(t),NQr=i(zA),lf=n(zA,"P",{});var $ae=s(lf);qQr=r($ae,`Note:
Loading a model from its configuration file does `),m5e=n($ae,"STRONG",{});var gXt=s(m5e);jQr=r(gXt,"not"),gXt.forEach(t),DQr=r($ae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Moe=n($ae,"A",{href:!0});var hXt=s(Moe);GQr=r(hXt,"from_pretrained()"),hXt.forEach(t),OQr=r($ae," to load the model weights."),$ae.forEach(t),VQr=i(zA),T(g5.$$.fragment,zA),zA.forEach(t),XQr=i(fi),Wr=n(fi,"DIV",{class:!0});var mi=s(Wr);T(B$.$$.fragment,mi),zQr=i(mi),g5e=n(mi,"P",{});var pXt=s(g5e);WQr=r(pXt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),pXt.forEach(t),QQr=i(mi),Cn=n(mi,"P",{});var WA=s(Cn);HQr=r(WA,"The model class to instantiate is selected based on the "),h5e=n(WA,"CODE",{});var _Xt=s(h5e);UQr=r(_Xt,"model_type"),_Xt.forEach(t),JQr=r(WA,` property of the config object (either
passed as an argument or loaded from `),p5e=n(WA,"CODE",{});var uXt=s(p5e);YQr=r(uXt,"pretrained_model_name_or_path"),uXt.forEach(t),KQr=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_5e=n(WA,"CODE",{});var bXt=s(_5e);ZQr=r(bXt,"pretrained_model_name_or_path"),bXt.forEach(t),eHr=r(WA,":"),WA.forEach(t),oHr=i(mi),$e=n(mi,"UL",{});var qe=s($e);h5=n(qe,"LI",{});var xVe=s(h5);u5e=n(xVe,"STRONG",{});var vXt=s(u5e);rHr=r(vXt,"albert"),vXt.forEach(t),tHr=r(xVe," \u2014 "),Eoe=n(xVe,"A",{href:!0});var FXt=s(Eoe);aHr=r(FXt,"FlaxAlbertForMaskedLM"),FXt.forEach(t),nHr=r(xVe," (ALBERT model)"),xVe.forEach(t),sHr=i(qe),p5=n(qe,"LI",{});var $Ve=s(p5);b5e=n($Ve,"STRONG",{});var TXt=s(b5e);lHr=r(TXt,"bart"),TXt.forEach(t),iHr=r($Ve," \u2014 "),Coe=n($Ve,"A",{href:!0});var MXt=s(Coe);dHr=r(MXt,"FlaxBartForConditionalGeneration"),MXt.forEach(t),cHr=r($Ve," (BART model)"),$Ve.forEach(t),fHr=i(qe),_5=n(qe,"LI",{});var kVe=s(_5);v5e=n(kVe,"STRONG",{});var EXt=s(v5e);mHr=r(EXt,"bert"),EXt.forEach(t),gHr=r(kVe," \u2014 "),woe=n(kVe,"A",{href:!0});var CXt=s(woe);hHr=r(CXt,"FlaxBertForMaskedLM"),CXt.forEach(t),pHr=r(kVe," (BERT model)"),kVe.forEach(t),_Hr=i(qe),u5=n(qe,"LI",{});var SVe=s(u5);F5e=n(SVe,"STRONG",{});var wXt=s(F5e);uHr=r(wXt,"big_bird"),wXt.forEach(t),bHr=r(SVe," \u2014 "),Aoe=n(SVe,"A",{href:!0});var AXt=s(Aoe);vHr=r(AXt,"FlaxBigBirdForMaskedLM"),AXt.forEach(t),FHr=r(SVe," (BigBird model)"),SVe.forEach(t),THr=i(qe),b5=n(qe,"LI",{});var RVe=s(b5);T5e=n(RVe,"STRONG",{});var LXt=s(T5e);MHr=r(LXt,"distilbert"),LXt.forEach(t),EHr=r(RVe," \u2014 "),Loe=n(RVe,"A",{href:!0});var yXt=s(Loe);CHr=r(yXt,"FlaxDistilBertForMaskedLM"),yXt.forEach(t),wHr=r(RVe," (DistilBERT model)"),RVe.forEach(t),AHr=i(qe),v5=n(qe,"LI",{});var PVe=s(v5);M5e=n(PVe,"STRONG",{});var xXt=s(M5e);LHr=r(xXt,"electra"),xXt.forEach(t),yHr=r(PVe," \u2014 "),yoe=n(PVe,"A",{href:!0});var $Xt=s(yoe);xHr=r($Xt,"FlaxElectraForMaskedLM"),$Xt.forEach(t),$Hr=r(PVe," (ELECTRA model)"),PVe.forEach(t),kHr=i(qe),F5=n(qe,"LI",{});var BVe=s(F5);E5e=n(BVe,"STRONG",{});var kXt=s(E5e);SHr=r(kXt,"mbart"),kXt.forEach(t),RHr=r(BVe," \u2014 "),xoe=n(BVe,"A",{href:!0});var SXt=s(xoe);PHr=r(SXt,"FlaxMBartForConditionalGeneration"),SXt.forEach(t),BHr=r(BVe," (mBART model)"),BVe.forEach(t),IHr=i(qe),T5=n(qe,"LI",{});var IVe=s(T5);C5e=n(IVe,"STRONG",{});var RXt=s(C5e);NHr=r(RXt,"roberta"),RXt.forEach(t),qHr=r(IVe," \u2014 "),$oe=n(IVe,"A",{href:!0});var PXt=s($oe);jHr=r(PXt,"FlaxRobertaForMaskedLM"),PXt.forEach(t),DHr=r(IVe," (RoBERTa model)"),IVe.forEach(t),GHr=i(qe),M5=n(qe,"LI",{});var NVe=s(M5);w5e=n(NVe,"STRONG",{});var BXt=s(w5e);OHr=r(BXt,"roformer"),BXt.forEach(t),VHr=r(NVe," \u2014 "),koe=n(NVe,"A",{href:!0});var IXt=s(koe);XHr=r(IXt,"FlaxRoFormerForMaskedLM"),IXt.forEach(t),zHr=r(NVe," (RoFormer model)"),NVe.forEach(t),WHr=i(qe),E5=n(qe,"LI",{});var qVe=s(E5);A5e=n(qVe,"STRONG",{});var NXt=s(A5e);QHr=r(NXt,"xlm-roberta"),NXt.forEach(t),HHr=r(qVe," \u2014 "),Soe=n(qVe,"A",{href:!0});var qXt=s(Soe);UHr=r(qXt,"FlaxXLMRobertaForMaskedLM"),qXt.forEach(t),JHr=r(qVe," (XLM-RoBERTa model)"),qVe.forEach(t),qe.forEach(t),YHr=i(mi),T(C5.$$.fragment,mi),mi.forEach(t),fi.forEach(t),CWe=i(f),df=n(f,"H2",{class:!0});var RHe=s(df);w5=n(RHe,"A",{id:!0,class:!0,href:!0});var jXt=s(w5);L5e=n(jXt,"SPAN",{});var DXt=s(L5e);T(I$.$$.fragment,DXt),DXt.forEach(t),jXt.forEach(t),KHr=i(RHe),y5e=n(RHe,"SPAN",{});var GXt=s(y5e);ZHr=r(GXt,"FlaxAutoModelForSeq2SeqLM"),GXt.forEach(t),RHe.forEach(t),wWe=i(f),vr=n(f,"DIV",{class:!0});var gi=s(vr);T(N$.$$.fragment,gi),eUr=i(gi),cf=n(gi,"P",{});var kae=s(cf);oUr=r(kae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Roe=n(kae,"A",{href:!0});var OXt=s(Roe);rUr=r(OXt,"from_pretrained()"),OXt.forEach(t),tUr=r(kae," class method or the "),Poe=n(kae,"A",{href:!0});var VXt=s(Poe);aUr=r(VXt,"from_config()"),VXt.forEach(t),nUr=r(kae,` class
method.`),kae.forEach(t),sUr=i(gi),q$=n(gi,"P",{});var PHe=s(q$);lUr=r(PHe,"This class cannot be instantiated directly using "),x5e=n(PHe,"CODE",{});var XXt=s(x5e);iUr=r(XXt,"__init__()"),XXt.forEach(t),dUr=r(PHe," (throws an error)."),PHe.forEach(t),cUr=i(gi),Yt=n(gi,"DIV",{class:!0});var QA=s(Yt);T(j$.$$.fragment,QA),fUr=i(QA),$5e=n(QA,"P",{});var zXt=s($5e);mUr=r(zXt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),zXt.forEach(t),gUr=i(QA),ff=n(QA,"P",{});var Sae=s(ff);hUr=r(Sae,`Note:
Loading a model from its configuration file does `),k5e=n(Sae,"STRONG",{});var WXt=s(k5e);pUr=r(WXt,"not"),WXt.forEach(t),_Ur=r(Sae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Boe=n(Sae,"A",{href:!0});var QXt=s(Boe);uUr=r(QXt,"from_pretrained()"),QXt.forEach(t),bUr=r(Sae," to load the model weights."),Sae.forEach(t),vUr=i(QA),T(A5.$$.fragment,QA),QA.forEach(t),FUr=i(gi),Qr=n(gi,"DIV",{class:!0});var hi=s(Qr);T(D$.$$.fragment,hi),TUr=i(hi),S5e=n(hi,"P",{});var HXt=s(S5e);MUr=r(HXt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),HXt.forEach(t),EUr=i(hi),wn=n(hi,"P",{});var HA=s(wn);CUr=r(HA,"The model class to instantiate is selected based on the "),R5e=n(HA,"CODE",{});var UXt=s(R5e);wUr=r(UXt,"model_type"),UXt.forEach(t),AUr=r(HA,` property of the config object (either
passed as an argument or loaded from `),P5e=n(HA,"CODE",{});var JXt=s(P5e);LUr=r(JXt,"pretrained_model_name_or_path"),JXt.forEach(t),yUr=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B5e=n(HA,"CODE",{});var YXt=s(B5e);xUr=r(YXt,"pretrained_model_name_or_path"),YXt.forEach(t),$Ur=r(HA,":"),HA.forEach(t),kUr=i(hi),ke=n(hi,"UL",{});var je=s(ke);L5=n(je,"LI",{});var jVe=s(L5);I5e=n(jVe,"STRONG",{});var KXt=s(I5e);SUr=r(KXt,"bart"),KXt.forEach(t),RUr=r(jVe," \u2014 "),Ioe=n(jVe,"A",{href:!0});var ZXt=s(Ioe);PUr=r(ZXt,"FlaxBartForConditionalGeneration"),ZXt.forEach(t),BUr=r(jVe," (BART model)"),jVe.forEach(t),IUr=i(je),y5=n(je,"LI",{});var DVe=s(y5);N5e=n(DVe,"STRONG",{});var ezt=s(N5e);NUr=r(ezt,"blenderbot"),ezt.forEach(t),qUr=r(DVe," \u2014 "),Noe=n(DVe,"A",{href:!0});var ozt=s(Noe);jUr=r(ozt,"FlaxBlenderbotForConditionalGeneration"),ozt.forEach(t),DUr=r(DVe," (Blenderbot model)"),DVe.forEach(t),GUr=i(je),x5=n(je,"LI",{});var GVe=s(x5);q5e=n(GVe,"STRONG",{});var rzt=s(q5e);OUr=r(rzt,"blenderbot-small"),rzt.forEach(t),VUr=r(GVe," \u2014 "),qoe=n(GVe,"A",{href:!0});var tzt=s(qoe);XUr=r(tzt,"FlaxBlenderbotSmallForConditionalGeneration"),tzt.forEach(t),zUr=r(GVe," (BlenderbotSmall model)"),GVe.forEach(t),WUr=i(je),$5=n(je,"LI",{});var OVe=s($5);j5e=n(OVe,"STRONG",{});var azt=s(j5e);QUr=r(azt,"encoder-decoder"),azt.forEach(t),HUr=r(OVe," \u2014 "),joe=n(OVe,"A",{href:!0});var nzt=s(joe);UUr=r(nzt,"FlaxEncoderDecoderModel"),nzt.forEach(t),JUr=r(OVe," (Encoder decoder model)"),OVe.forEach(t),YUr=i(je),k5=n(je,"LI",{});var VVe=s(k5);D5e=n(VVe,"STRONG",{});var szt=s(D5e);KUr=r(szt,"longt5"),szt.forEach(t),ZUr=r(VVe," \u2014 "),Doe=n(VVe,"A",{href:!0});var lzt=s(Doe);eJr=r(lzt,"FlaxLongT5ForConditionalGeneration"),lzt.forEach(t),oJr=r(VVe," (LongT5 model)"),VVe.forEach(t),rJr=i(je),S5=n(je,"LI",{});var XVe=s(S5);G5e=n(XVe,"STRONG",{});var izt=s(G5e);tJr=r(izt,"marian"),izt.forEach(t),aJr=r(XVe," \u2014 "),Goe=n(XVe,"A",{href:!0});var dzt=s(Goe);nJr=r(dzt,"FlaxMarianMTModel"),dzt.forEach(t),sJr=r(XVe," (Marian model)"),XVe.forEach(t),lJr=i(je),R5=n(je,"LI",{});var zVe=s(R5);O5e=n(zVe,"STRONG",{});var czt=s(O5e);iJr=r(czt,"mbart"),czt.forEach(t),dJr=r(zVe," \u2014 "),Ooe=n(zVe,"A",{href:!0});var fzt=s(Ooe);cJr=r(fzt,"FlaxMBartForConditionalGeneration"),fzt.forEach(t),fJr=r(zVe," (mBART model)"),zVe.forEach(t),mJr=i(je),P5=n(je,"LI",{});var WVe=s(P5);V5e=n(WVe,"STRONG",{});var mzt=s(V5e);gJr=r(mzt,"mt5"),mzt.forEach(t),hJr=r(WVe," \u2014 "),Voe=n(WVe,"A",{href:!0});var gzt=s(Voe);pJr=r(gzt,"FlaxMT5ForConditionalGeneration"),gzt.forEach(t),_Jr=r(WVe," (MT5 model)"),WVe.forEach(t),uJr=i(je),B5=n(je,"LI",{});var QVe=s(B5);X5e=n(QVe,"STRONG",{});var hzt=s(X5e);bJr=r(hzt,"pegasus"),hzt.forEach(t),vJr=r(QVe," \u2014 "),Xoe=n(QVe,"A",{href:!0});var pzt=s(Xoe);FJr=r(pzt,"FlaxPegasusForConditionalGeneration"),pzt.forEach(t),TJr=r(QVe," (Pegasus model)"),QVe.forEach(t),MJr=i(je),I5=n(je,"LI",{});var HVe=s(I5);z5e=n(HVe,"STRONG",{});var _zt=s(z5e);EJr=r(_zt,"t5"),_zt.forEach(t),CJr=r(HVe," \u2014 "),zoe=n(HVe,"A",{href:!0});var uzt=s(zoe);wJr=r(uzt,"FlaxT5ForConditionalGeneration"),uzt.forEach(t),AJr=r(HVe," (T5 model)"),HVe.forEach(t),je.forEach(t),LJr=i(hi),T(N5.$$.fragment,hi),hi.forEach(t),gi.forEach(t),AWe=i(f),mf=n(f,"H2",{class:!0});var BHe=s(mf);q5=n(BHe,"A",{id:!0,class:!0,href:!0});var bzt=s(q5);W5e=n(bzt,"SPAN",{});var vzt=s(W5e);T(G$.$$.fragment,vzt),vzt.forEach(t),bzt.forEach(t),yJr=i(BHe),Q5e=n(BHe,"SPAN",{});var Fzt=s(Q5e);xJr=r(Fzt,"FlaxAutoModelForSequenceClassification"),Fzt.forEach(t),BHe.forEach(t),LWe=i(f),Fr=n(f,"DIV",{class:!0});var pi=s(Fr);T(O$.$$.fragment,pi),$Jr=i(pi),gf=n(pi,"P",{});var Rae=s(gf);kJr=r(Rae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Woe=n(Rae,"A",{href:!0});var Tzt=s(Woe);SJr=r(Tzt,"from_pretrained()"),Tzt.forEach(t),RJr=r(Rae," class method or the "),Qoe=n(Rae,"A",{href:!0});var Mzt=s(Qoe);PJr=r(Mzt,"from_config()"),Mzt.forEach(t),BJr=r(Rae,` class
method.`),Rae.forEach(t),IJr=i(pi),V$=n(pi,"P",{});var IHe=s(V$);NJr=r(IHe,"This class cannot be instantiated directly using "),H5e=n(IHe,"CODE",{});var Ezt=s(H5e);qJr=r(Ezt,"__init__()"),Ezt.forEach(t),jJr=r(IHe," (throws an error)."),IHe.forEach(t),DJr=i(pi),Kt=n(pi,"DIV",{class:!0});var UA=s(Kt);T(X$.$$.fragment,UA),GJr=i(UA),U5e=n(UA,"P",{});var Czt=s(U5e);OJr=r(Czt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Czt.forEach(t),VJr=i(UA),hf=n(UA,"P",{});var Pae=s(hf);XJr=r(Pae,`Note:
Loading a model from its configuration file does `),J5e=n(Pae,"STRONG",{});var wzt=s(J5e);zJr=r(wzt,"not"),wzt.forEach(t),WJr=r(Pae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hoe=n(Pae,"A",{href:!0});var Azt=s(Hoe);QJr=r(Azt,"from_pretrained()"),Azt.forEach(t),HJr=r(Pae," to load the model weights."),Pae.forEach(t),UJr=i(UA),T(j5.$$.fragment,UA),UA.forEach(t),JJr=i(pi),Hr=n(pi,"DIV",{class:!0});var _i=s(Hr);T(z$.$$.fragment,_i),YJr=i(_i),Y5e=n(_i,"P",{});var Lzt=s(Y5e);KJr=r(Lzt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Lzt.forEach(t),ZJr=i(_i),An=n(_i,"P",{});var JA=s(An);eYr=r(JA,"The model class to instantiate is selected based on the "),K5e=n(JA,"CODE",{});var yzt=s(K5e);oYr=r(yzt,"model_type"),yzt.forEach(t),rYr=r(JA,` property of the config object (either
passed as an argument or loaded from `),Z5e=n(JA,"CODE",{});var xzt=s(Z5e);tYr=r(xzt,"pretrained_model_name_or_path"),xzt.forEach(t),aYr=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e0e=n(JA,"CODE",{});var $zt=s(e0e);nYr=r($zt,"pretrained_model_name_or_path"),$zt.forEach(t),sYr=r(JA,":"),JA.forEach(t),lYr=i(_i),Se=n(_i,"UL",{});var De=s(Se);D5=n(De,"LI",{});var UVe=s(D5);o0e=n(UVe,"STRONG",{});var kzt=s(o0e);iYr=r(kzt,"albert"),kzt.forEach(t),dYr=r(UVe," \u2014 "),Uoe=n(UVe,"A",{href:!0});var Szt=s(Uoe);cYr=r(Szt,"FlaxAlbertForSequenceClassification"),Szt.forEach(t),fYr=r(UVe," (ALBERT model)"),UVe.forEach(t),mYr=i(De),G5=n(De,"LI",{});var JVe=s(G5);r0e=n(JVe,"STRONG",{});var Rzt=s(r0e);gYr=r(Rzt,"bart"),Rzt.forEach(t),hYr=r(JVe," \u2014 "),Joe=n(JVe,"A",{href:!0});var Pzt=s(Joe);pYr=r(Pzt,"FlaxBartForSequenceClassification"),Pzt.forEach(t),_Yr=r(JVe," (BART model)"),JVe.forEach(t),uYr=i(De),O5=n(De,"LI",{});var YVe=s(O5);t0e=n(YVe,"STRONG",{});var Bzt=s(t0e);bYr=r(Bzt,"bert"),Bzt.forEach(t),vYr=r(YVe," \u2014 "),Yoe=n(YVe,"A",{href:!0});var Izt=s(Yoe);FYr=r(Izt,"FlaxBertForSequenceClassification"),Izt.forEach(t),TYr=r(YVe," (BERT model)"),YVe.forEach(t),MYr=i(De),V5=n(De,"LI",{});var KVe=s(V5);a0e=n(KVe,"STRONG",{});var Nzt=s(a0e);EYr=r(Nzt,"big_bird"),Nzt.forEach(t),CYr=r(KVe," \u2014 "),Koe=n(KVe,"A",{href:!0});var qzt=s(Koe);wYr=r(qzt,"FlaxBigBirdForSequenceClassification"),qzt.forEach(t),AYr=r(KVe," (BigBird model)"),KVe.forEach(t),LYr=i(De),X5=n(De,"LI",{});var ZVe=s(X5);n0e=n(ZVe,"STRONG",{});var jzt=s(n0e);yYr=r(jzt,"distilbert"),jzt.forEach(t),xYr=r(ZVe," \u2014 "),Zoe=n(ZVe,"A",{href:!0});var Dzt=s(Zoe);$Yr=r(Dzt,"FlaxDistilBertForSequenceClassification"),Dzt.forEach(t),kYr=r(ZVe," (DistilBERT model)"),ZVe.forEach(t),SYr=i(De),z5=n(De,"LI",{});var eXe=s(z5);s0e=n(eXe,"STRONG",{});var Gzt=s(s0e);RYr=r(Gzt,"electra"),Gzt.forEach(t),PYr=r(eXe," \u2014 "),ere=n(eXe,"A",{href:!0});var Ozt=s(ere);BYr=r(Ozt,"FlaxElectraForSequenceClassification"),Ozt.forEach(t),IYr=r(eXe," (ELECTRA model)"),eXe.forEach(t),NYr=i(De),W5=n(De,"LI",{});var oXe=s(W5);l0e=n(oXe,"STRONG",{});var Vzt=s(l0e);qYr=r(Vzt,"mbart"),Vzt.forEach(t),jYr=r(oXe," \u2014 "),ore=n(oXe,"A",{href:!0});var Xzt=s(ore);DYr=r(Xzt,"FlaxMBartForSequenceClassification"),Xzt.forEach(t),GYr=r(oXe," (mBART model)"),oXe.forEach(t),OYr=i(De),Q5=n(De,"LI",{});var rXe=s(Q5);i0e=n(rXe,"STRONG",{});var zzt=s(i0e);VYr=r(zzt,"roberta"),zzt.forEach(t),XYr=r(rXe," \u2014 "),rre=n(rXe,"A",{href:!0});var Wzt=s(rre);zYr=r(Wzt,"FlaxRobertaForSequenceClassification"),Wzt.forEach(t),WYr=r(rXe," (RoBERTa model)"),rXe.forEach(t),QYr=i(De),H5=n(De,"LI",{});var tXe=s(H5);d0e=n(tXe,"STRONG",{});var Qzt=s(d0e);HYr=r(Qzt,"roformer"),Qzt.forEach(t),UYr=r(tXe," \u2014 "),tre=n(tXe,"A",{href:!0});var Hzt=s(tre);JYr=r(Hzt,"FlaxRoFormerForSequenceClassification"),Hzt.forEach(t),YYr=r(tXe," (RoFormer model)"),tXe.forEach(t),KYr=i(De),U5=n(De,"LI",{});var aXe=s(U5);c0e=n(aXe,"STRONG",{});var Uzt=s(c0e);ZYr=r(Uzt,"xlm-roberta"),Uzt.forEach(t),eKr=r(aXe," \u2014 "),are=n(aXe,"A",{href:!0});var Jzt=s(are);oKr=r(Jzt,"FlaxXLMRobertaForSequenceClassification"),Jzt.forEach(t),rKr=r(aXe," (XLM-RoBERTa model)"),aXe.forEach(t),De.forEach(t),tKr=i(_i),T(J5.$$.fragment,_i),_i.forEach(t),pi.forEach(t),yWe=i(f),pf=n(f,"H2",{class:!0});var NHe=s(pf);Y5=n(NHe,"A",{id:!0,class:!0,href:!0});var Yzt=s(Y5);f0e=n(Yzt,"SPAN",{});var Kzt=s(f0e);T(W$.$$.fragment,Kzt),Kzt.forEach(t),Yzt.forEach(t),aKr=i(NHe),m0e=n(NHe,"SPAN",{});var Zzt=s(m0e);nKr=r(Zzt,"FlaxAutoModelForQuestionAnswering"),Zzt.forEach(t),NHe.forEach(t),xWe=i(f),Tr=n(f,"DIV",{class:!0});var ui=s(Tr);T(Q$.$$.fragment,ui),sKr=i(ui),_f=n(ui,"P",{});var Bae=s(_f);lKr=r(Bae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),nre=n(Bae,"A",{href:!0});var eWt=s(nre);iKr=r(eWt,"from_pretrained()"),eWt.forEach(t),dKr=r(Bae," class method or the "),sre=n(Bae,"A",{href:!0});var oWt=s(sre);cKr=r(oWt,"from_config()"),oWt.forEach(t),fKr=r(Bae,` class
method.`),Bae.forEach(t),mKr=i(ui),H$=n(ui,"P",{});var qHe=s(H$);gKr=r(qHe,"This class cannot be instantiated directly using "),g0e=n(qHe,"CODE",{});var rWt=s(g0e);hKr=r(rWt,"__init__()"),rWt.forEach(t),pKr=r(qHe," (throws an error)."),qHe.forEach(t),_Kr=i(ui),Zt=n(ui,"DIV",{class:!0});var YA=s(Zt);T(U$.$$.fragment,YA),uKr=i(YA),h0e=n(YA,"P",{});var tWt=s(h0e);bKr=r(tWt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),tWt.forEach(t),vKr=i(YA),uf=n(YA,"P",{});var Iae=s(uf);FKr=r(Iae,`Note:
Loading a model from its configuration file does `),p0e=n(Iae,"STRONG",{});var aWt=s(p0e);TKr=r(aWt,"not"),aWt.forEach(t),MKr=r(Iae,` load the model weights. It only affects the
model\u2019s configuration. Use `),lre=n(Iae,"A",{href:!0});var nWt=s(lre);EKr=r(nWt,"from_pretrained()"),nWt.forEach(t),CKr=r(Iae," to load the model weights."),Iae.forEach(t),wKr=i(YA),T(K5.$$.fragment,YA),YA.forEach(t),AKr=i(ui),Ur=n(ui,"DIV",{class:!0});var bi=s(Ur);T(J$.$$.fragment,bi),LKr=i(bi),_0e=n(bi,"P",{});var sWt=s(_0e);yKr=r(sWt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),sWt.forEach(t),xKr=i(bi),Ln=n(bi,"P",{});var KA=s(Ln);$Kr=r(KA,"The model class to instantiate is selected based on the "),u0e=n(KA,"CODE",{});var lWt=s(u0e);kKr=r(lWt,"model_type"),lWt.forEach(t),SKr=r(KA,` property of the config object (either
passed as an argument or loaded from `),b0e=n(KA,"CODE",{});var iWt=s(b0e);RKr=r(iWt,"pretrained_model_name_or_path"),iWt.forEach(t),PKr=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v0e=n(KA,"CODE",{});var dWt=s(v0e);BKr=r(dWt,"pretrained_model_name_or_path"),dWt.forEach(t),IKr=r(KA,":"),KA.forEach(t),NKr=i(bi),Re=n(bi,"UL",{});var Ge=s(Re);Z5=n(Ge,"LI",{});var nXe=s(Z5);F0e=n(nXe,"STRONG",{});var cWt=s(F0e);qKr=r(cWt,"albert"),cWt.forEach(t),jKr=r(nXe," \u2014 "),ire=n(nXe,"A",{href:!0});var fWt=s(ire);DKr=r(fWt,"FlaxAlbertForQuestionAnswering"),fWt.forEach(t),GKr=r(nXe," (ALBERT model)"),nXe.forEach(t),OKr=i(Ge),e0=n(Ge,"LI",{});var sXe=s(e0);T0e=n(sXe,"STRONG",{});var mWt=s(T0e);VKr=r(mWt,"bart"),mWt.forEach(t),XKr=r(sXe," \u2014 "),dre=n(sXe,"A",{href:!0});var gWt=s(dre);zKr=r(gWt,"FlaxBartForQuestionAnswering"),gWt.forEach(t),WKr=r(sXe," (BART model)"),sXe.forEach(t),QKr=i(Ge),o0=n(Ge,"LI",{});var lXe=s(o0);M0e=n(lXe,"STRONG",{});var hWt=s(M0e);HKr=r(hWt,"bert"),hWt.forEach(t),UKr=r(lXe," \u2014 "),cre=n(lXe,"A",{href:!0});var pWt=s(cre);JKr=r(pWt,"FlaxBertForQuestionAnswering"),pWt.forEach(t),YKr=r(lXe," (BERT model)"),lXe.forEach(t),KKr=i(Ge),r0=n(Ge,"LI",{});var iXe=s(r0);E0e=n(iXe,"STRONG",{});var _Wt=s(E0e);ZKr=r(_Wt,"big_bird"),_Wt.forEach(t),eZr=r(iXe," \u2014 "),fre=n(iXe,"A",{href:!0});var uWt=s(fre);oZr=r(uWt,"FlaxBigBirdForQuestionAnswering"),uWt.forEach(t),rZr=r(iXe," (BigBird model)"),iXe.forEach(t),tZr=i(Ge),t0=n(Ge,"LI",{});var dXe=s(t0);C0e=n(dXe,"STRONG",{});var bWt=s(C0e);aZr=r(bWt,"distilbert"),bWt.forEach(t),nZr=r(dXe," \u2014 "),mre=n(dXe,"A",{href:!0});var vWt=s(mre);sZr=r(vWt,"FlaxDistilBertForQuestionAnswering"),vWt.forEach(t),lZr=r(dXe," (DistilBERT model)"),dXe.forEach(t),iZr=i(Ge),a0=n(Ge,"LI",{});var cXe=s(a0);w0e=n(cXe,"STRONG",{});var FWt=s(w0e);dZr=r(FWt,"electra"),FWt.forEach(t),cZr=r(cXe," \u2014 "),gre=n(cXe,"A",{href:!0});var TWt=s(gre);fZr=r(TWt,"FlaxElectraForQuestionAnswering"),TWt.forEach(t),mZr=r(cXe," (ELECTRA model)"),cXe.forEach(t),gZr=i(Ge),n0=n(Ge,"LI",{});var fXe=s(n0);A0e=n(fXe,"STRONG",{});var MWt=s(A0e);hZr=r(MWt,"mbart"),MWt.forEach(t),pZr=r(fXe," \u2014 "),hre=n(fXe,"A",{href:!0});var EWt=s(hre);_Zr=r(EWt,"FlaxMBartForQuestionAnswering"),EWt.forEach(t),uZr=r(fXe," (mBART model)"),fXe.forEach(t),bZr=i(Ge),s0=n(Ge,"LI",{});var mXe=s(s0);L0e=n(mXe,"STRONG",{});var CWt=s(L0e);vZr=r(CWt,"roberta"),CWt.forEach(t),FZr=r(mXe," \u2014 "),pre=n(mXe,"A",{href:!0});var wWt=s(pre);TZr=r(wWt,"FlaxRobertaForQuestionAnswering"),wWt.forEach(t),MZr=r(mXe," (RoBERTa model)"),mXe.forEach(t),EZr=i(Ge),l0=n(Ge,"LI",{});var gXe=s(l0);y0e=n(gXe,"STRONG",{});var AWt=s(y0e);CZr=r(AWt,"roformer"),AWt.forEach(t),wZr=r(gXe," \u2014 "),_re=n(gXe,"A",{href:!0});var LWt=s(_re);AZr=r(LWt,"FlaxRoFormerForQuestionAnswering"),LWt.forEach(t),LZr=r(gXe," (RoFormer model)"),gXe.forEach(t),yZr=i(Ge),i0=n(Ge,"LI",{});var hXe=s(i0);x0e=n(hXe,"STRONG",{});var yWt=s(x0e);xZr=r(yWt,"xlm-roberta"),yWt.forEach(t),$Zr=r(hXe," \u2014 "),ure=n(hXe,"A",{href:!0});var xWt=s(ure);kZr=r(xWt,"FlaxXLMRobertaForQuestionAnswering"),xWt.forEach(t),SZr=r(hXe," (XLM-RoBERTa model)"),hXe.forEach(t),Ge.forEach(t),RZr=i(bi),T(d0.$$.fragment,bi),bi.forEach(t),ui.forEach(t),$We=i(f),bf=n(f,"H2",{class:!0});var jHe=s(bf);c0=n(jHe,"A",{id:!0,class:!0,href:!0});var $Wt=s(c0);$0e=n($Wt,"SPAN",{});var kWt=s($0e);T(Y$.$$.fragment,kWt),kWt.forEach(t),$Wt.forEach(t),PZr=i(jHe),k0e=n(jHe,"SPAN",{});var SWt=s(k0e);BZr=r(SWt,"FlaxAutoModelForTokenClassification"),SWt.forEach(t),jHe.forEach(t),kWe=i(f),Mr=n(f,"DIV",{class:!0});var vi=s(Mr);T(K$.$$.fragment,vi),IZr=i(vi),vf=n(vi,"P",{});var Nae=s(vf);NZr=r(Nae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),bre=n(Nae,"A",{href:!0});var RWt=s(bre);qZr=r(RWt,"from_pretrained()"),RWt.forEach(t),jZr=r(Nae," class method or the "),vre=n(Nae,"A",{href:!0});var PWt=s(vre);DZr=r(PWt,"from_config()"),PWt.forEach(t),GZr=r(Nae,` class
method.`),Nae.forEach(t),OZr=i(vi),Z$=n(vi,"P",{});var DHe=s(Z$);VZr=r(DHe,"This class cannot be instantiated directly using "),S0e=n(DHe,"CODE",{});var BWt=s(S0e);XZr=r(BWt,"__init__()"),BWt.forEach(t),zZr=r(DHe," (throws an error)."),DHe.forEach(t),WZr=i(vi),ea=n(vi,"DIV",{class:!0});var ZA=s(ea);T(ek.$$.fragment,ZA),QZr=i(ZA),R0e=n(ZA,"P",{});var IWt=s(R0e);HZr=r(IWt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),IWt.forEach(t),UZr=i(ZA),Ff=n(ZA,"P",{});var qae=s(Ff);JZr=r(qae,`Note:
Loading a model from its configuration file does `),P0e=n(qae,"STRONG",{});var NWt=s(P0e);YZr=r(NWt,"not"),NWt.forEach(t),KZr=r(qae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fre=n(qae,"A",{href:!0});var qWt=s(Fre);ZZr=r(qWt,"from_pretrained()"),qWt.forEach(t),eet=r(qae," to load the model weights."),qae.forEach(t),oet=i(ZA),T(f0.$$.fragment,ZA),ZA.forEach(t),ret=i(vi),Jr=n(vi,"DIV",{class:!0});var Fi=s(Jr);T(ok.$$.fragment,Fi),tet=i(Fi),B0e=n(Fi,"P",{});var jWt=s(B0e);aet=r(jWt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),jWt.forEach(t),net=i(Fi),yn=n(Fi,"P",{});var e6=s(yn);set=r(e6,"The model class to instantiate is selected based on the "),I0e=n(e6,"CODE",{});var DWt=s(I0e);iet=r(DWt,"model_type"),DWt.forEach(t),det=r(e6,` property of the config object (either
passed as an argument or loaded from `),N0e=n(e6,"CODE",{});var GWt=s(N0e);cet=r(GWt,"pretrained_model_name_or_path"),GWt.forEach(t),fet=r(e6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q0e=n(e6,"CODE",{});var OWt=s(q0e);met=r(OWt,"pretrained_model_name_or_path"),OWt.forEach(t),get=r(e6,":"),e6.forEach(t),het=i(Fi),Ve=n(Fi,"UL",{});var Mo=s(Ve);m0=n(Mo,"LI",{});var pXe=s(m0);j0e=n(pXe,"STRONG",{});var VWt=s(j0e);pet=r(VWt,"albert"),VWt.forEach(t),_et=r(pXe," \u2014 "),Tre=n(pXe,"A",{href:!0});var XWt=s(Tre);uet=r(XWt,"FlaxAlbertForTokenClassification"),XWt.forEach(t),bet=r(pXe," (ALBERT model)"),pXe.forEach(t),vet=i(Mo),g0=n(Mo,"LI",{});var _Xe=s(g0);D0e=n(_Xe,"STRONG",{});var zWt=s(D0e);Fet=r(zWt,"bert"),zWt.forEach(t),Tet=r(_Xe," \u2014 "),Mre=n(_Xe,"A",{href:!0});var WWt=s(Mre);Met=r(WWt,"FlaxBertForTokenClassification"),WWt.forEach(t),Eet=r(_Xe," (BERT model)"),_Xe.forEach(t),Cet=i(Mo),h0=n(Mo,"LI",{});var uXe=s(h0);G0e=n(uXe,"STRONG",{});var QWt=s(G0e);wet=r(QWt,"big_bird"),QWt.forEach(t),Aet=r(uXe," \u2014 "),Ere=n(uXe,"A",{href:!0});var HWt=s(Ere);Let=r(HWt,"FlaxBigBirdForTokenClassification"),HWt.forEach(t),yet=r(uXe," (BigBird model)"),uXe.forEach(t),xet=i(Mo),p0=n(Mo,"LI",{});var bXe=s(p0);O0e=n(bXe,"STRONG",{});var UWt=s(O0e);$et=r(UWt,"distilbert"),UWt.forEach(t),ket=r(bXe," \u2014 "),Cre=n(bXe,"A",{href:!0});var JWt=s(Cre);Set=r(JWt,"FlaxDistilBertForTokenClassification"),JWt.forEach(t),Ret=r(bXe," (DistilBERT model)"),bXe.forEach(t),Pet=i(Mo),_0=n(Mo,"LI",{});var vXe=s(_0);V0e=n(vXe,"STRONG",{});var YWt=s(V0e);Bet=r(YWt,"electra"),YWt.forEach(t),Iet=r(vXe," \u2014 "),wre=n(vXe,"A",{href:!0});var KWt=s(wre);Net=r(KWt,"FlaxElectraForTokenClassification"),KWt.forEach(t),qet=r(vXe," (ELECTRA model)"),vXe.forEach(t),jet=i(Mo),u0=n(Mo,"LI",{});var FXe=s(u0);X0e=n(FXe,"STRONG",{});var ZWt=s(X0e);Det=r(ZWt,"roberta"),ZWt.forEach(t),Get=r(FXe," \u2014 "),Are=n(FXe,"A",{href:!0});var eQt=s(Are);Oet=r(eQt,"FlaxRobertaForTokenClassification"),eQt.forEach(t),Vet=r(FXe," (RoBERTa model)"),FXe.forEach(t),Xet=i(Mo),b0=n(Mo,"LI",{});var TXe=s(b0);z0e=n(TXe,"STRONG",{});var oQt=s(z0e);zet=r(oQt,"roformer"),oQt.forEach(t),Wet=r(TXe," \u2014 "),Lre=n(TXe,"A",{href:!0});var rQt=s(Lre);Qet=r(rQt,"FlaxRoFormerForTokenClassification"),rQt.forEach(t),Het=r(TXe," (RoFormer model)"),TXe.forEach(t),Uet=i(Mo),v0=n(Mo,"LI",{});var MXe=s(v0);W0e=n(MXe,"STRONG",{});var tQt=s(W0e);Jet=r(tQt,"xlm-roberta"),tQt.forEach(t),Yet=r(MXe," \u2014 "),yre=n(MXe,"A",{href:!0});var aQt=s(yre);Ket=r(aQt,"FlaxXLMRobertaForTokenClassification"),aQt.forEach(t),Zet=r(MXe," (XLM-RoBERTa model)"),MXe.forEach(t),Mo.forEach(t),eot=i(Fi),T(F0.$$.fragment,Fi),Fi.forEach(t),vi.forEach(t),SWe=i(f),Tf=n(f,"H2",{class:!0});var GHe=s(Tf);T0=n(GHe,"A",{id:!0,class:!0,href:!0});var nQt=s(T0);Q0e=n(nQt,"SPAN",{});var sQt=s(Q0e);T(rk.$$.fragment,sQt),sQt.forEach(t),nQt.forEach(t),oot=i(GHe),H0e=n(GHe,"SPAN",{});var lQt=s(H0e);rot=r(lQt,"FlaxAutoModelForMultipleChoice"),lQt.forEach(t),GHe.forEach(t),RWe=i(f),Er=n(f,"DIV",{class:!0});var Ti=s(Er);T(tk.$$.fragment,Ti),tot=i(Ti),Mf=n(Ti,"P",{});var jae=s(Mf);aot=r(jae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),xre=n(jae,"A",{href:!0});var iQt=s(xre);not=r(iQt,"from_pretrained()"),iQt.forEach(t),sot=r(jae," class method or the "),$re=n(jae,"A",{href:!0});var dQt=s($re);lot=r(dQt,"from_config()"),dQt.forEach(t),iot=r(jae,` class
method.`),jae.forEach(t),dot=i(Ti),ak=n(Ti,"P",{});var OHe=s(ak);cot=r(OHe,"This class cannot be instantiated directly using "),U0e=n(OHe,"CODE",{});var cQt=s(U0e);fot=r(cQt,"__init__()"),cQt.forEach(t),mot=r(OHe," (throws an error)."),OHe.forEach(t),got=i(Ti),oa=n(Ti,"DIV",{class:!0});var o6=s(oa);T(nk.$$.fragment,o6),hot=i(o6),J0e=n(o6,"P",{});var fQt=s(J0e);pot=r(fQt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),fQt.forEach(t),_ot=i(o6),Ef=n(o6,"P",{});var Dae=s(Ef);uot=r(Dae,`Note:
Loading a model from its configuration file does `),Y0e=n(Dae,"STRONG",{});var mQt=s(Y0e);bot=r(mQt,"not"),mQt.forEach(t),vot=r(Dae,` load the model weights. It only affects the
model\u2019s configuration. Use `),kre=n(Dae,"A",{href:!0});var gQt=s(kre);Fot=r(gQt,"from_pretrained()"),gQt.forEach(t),Tot=r(Dae," to load the model weights."),Dae.forEach(t),Mot=i(o6),T(M0.$$.fragment,o6),o6.forEach(t),Eot=i(Ti),Yr=n(Ti,"DIV",{class:!0});var Mi=s(Yr);T(sk.$$.fragment,Mi),Cot=i(Mi),K0e=n(Mi,"P",{});var hQt=s(K0e);wot=r(hQt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),hQt.forEach(t),Aot=i(Mi),xn=n(Mi,"P",{});var r6=s(xn);Lot=r(r6,"The model class to instantiate is selected based on the "),Z0e=n(r6,"CODE",{});var pQt=s(Z0e);yot=r(pQt,"model_type"),pQt.forEach(t),xot=r(r6,` property of the config object (either
passed as an argument or loaded from `),ewe=n(r6,"CODE",{});var _Qt=s(ewe);$ot=r(_Qt,"pretrained_model_name_or_path"),_Qt.forEach(t),kot=r(r6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),owe=n(r6,"CODE",{});var uQt=s(owe);Sot=r(uQt,"pretrained_model_name_or_path"),uQt.forEach(t),Rot=r(r6,":"),r6.forEach(t),Pot=i(Mi),Xe=n(Mi,"UL",{});var Eo=s(Xe);E0=n(Eo,"LI",{});var EXe=s(E0);rwe=n(EXe,"STRONG",{});var bQt=s(rwe);Bot=r(bQt,"albert"),bQt.forEach(t),Iot=r(EXe," \u2014 "),Sre=n(EXe,"A",{href:!0});var vQt=s(Sre);Not=r(vQt,"FlaxAlbertForMultipleChoice"),vQt.forEach(t),qot=r(EXe," (ALBERT model)"),EXe.forEach(t),jot=i(Eo),C0=n(Eo,"LI",{});var CXe=s(C0);twe=n(CXe,"STRONG",{});var FQt=s(twe);Dot=r(FQt,"bert"),FQt.forEach(t),Got=r(CXe," \u2014 "),Rre=n(CXe,"A",{href:!0});var TQt=s(Rre);Oot=r(TQt,"FlaxBertForMultipleChoice"),TQt.forEach(t),Vot=r(CXe," (BERT model)"),CXe.forEach(t),Xot=i(Eo),w0=n(Eo,"LI",{});var wXe=s(w0);awe=n(wXe,"STRONG",{});var MQt=s(awe);zot=r(MQt,"big_bird"),MQt.forEach(t),Wot=r(wXe," \u2014 "),Pre=n(wXe,"A",{href:!0});var EQt=s(Pre);Qot=r(EQt,"FlaxBigBirdForMultipleChoice"),EQt.forEach(t),Hot=r(wXe," (BigBird model)"),wXe.forEach(t),Uot=i(Eo),A0=n(Eo,"LI",{});var AXe=s(A0);nwe=n(AXe,"STRONG",{});var CQt=s(nwe);Jot=r(CQt,"distilbert"),CQt.forEach(t),Yot=r(AXe," \u2014 "),Bre=n(AXe,"A",{href:!0});var wQt=s(Bre);Kot=r(wQt,"FlaxDistilBertForMultipleChoice"),wQt.forEach(t),Zot=r(AXe," (DistilBERT model)"),AXe.forEach(t),ert=i(Eo),L0=n(Eo,"LI",{});var LXe=s(L0);swe=n(LXe,"STRONG",{});var AQt=s(swe);ort=r(AQt,"electra"),AQt.forEach(t),rrt=r(LXe," \u2014 "),Ire=n(LXe,"A",{href:!0});var LQt=s(Ire);trt=r(LQt,"FlaxElectraForMultipleChoice"),LQt.forEach(t),art=r(LXe," (ELECTRA model)"),LXe.forEach(t),nrt=i(Eo),y0=n(Eo,"LI",{});var yXe=s(y0);lwe=n(yXe,"STRONG",{});var yQt=s(lwe);srt=r(yQt,"roberta"),yQt.forEach(t),lrt=r(yXe," \u2014 "),Nre=n(yXe,"A",{href:!0});var xQt=s(Nre);irt=r(xQt,"FlaxRobertaForMultipleChoice"),xQt.forEach(t),drt=r(yXe," (RoBERTa model)"),yXe.forEach(t),crt=i(Eo),x0=n(Eo,"LI",{});var xXe=s(x0);iwe=n(xXe,"STRONG",{});var $Qt=s(iwe);frt=r($Qt,"roformer"),$Qt.forEach(t),mrt=r(xXe," \u2014 "),qre=n(xXe,"A",{href:!0});var kQt=s(qre);grt=r(kQt,"FlaxRoFormerForMultipleChoice"),kQt.forEach(t),hrt=r(xXe," (RoFormer model)"),xXe.forEach(t),prt=i(Eo),$0=n(Eo,"LI",{});var $Xe=s($0);dwe=n($Xe,"STRONG",{});var SQt=s(dwe);_rt=r(SQt,"xlm-roberta"),SQt.forEach(t),urt=r($Xe," \u2014 "),jre=n($Xe,"A",{href:!0});var RQt=s(jre);brt=r(RQt,"FlaxXLMRobertaForMultipleChoice"),RQt.forEach(t),vrt=r($Xe," (XLM-RoBERTa model)"),$Xe.forEach(t),Eo.forEach(t),Frt=i(Mi),T(k0.$$.fragment,Mi),Mi.forEach(t),Ti.forEach(t),PWe=i(f),Cf=n(f,"H2",{class:!0});var VHe=s(Cf);S0=n(VHe,"A",{id:!0,class:!0,href:!0});var PQt=s(S0);cwe=n(PQt,"SPAN",{});var BQt=s(cwe);T(lk.$$.fragment,BQt),BQt.forEach(t),PQt.forEach(t),Trt=i(VHe),fwe=n(VHe,"SPAN",{});var IQt=s(fwe);Mrt=r(IQt,"FlaxAutoModelForNextSentencePrediction"),IQt.forEach(t),VHe.forEach(t),BWe=i(f),Cr=n(f,"DIV",{class:!0});var Ei=s(Cr);T(ik.$$.fragment,Ei),Ert=i(Ei),wf=n(Ei,"P",{});var Gae=s(wf);Crt=r(Gae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Dre=n(Gae,"A",{href:!0});var NQt=s(Dre);wrt=r(NQt,"from_pretrained()"),NQt.forEach(t),Art=r(Gae," class method or the "),Gre=n(Gae,"A",{href:!0});var qQt=s(Gre);Lrt=r(qQt,"from_config()"),qQt.forEach(t),yrt=r(Gae,` class
method.`),Gae.forEach(t),xrt=i(Ei),dk=n(Ei,"P",{});var XHe=s(dk);$rt=r(XHe,"This class cannot be instantiated directly using "),mwe=n(XHe,"CODE",{});var jQt=s(mwe);krt=r(jQt,"__init__()"),jQt.forEach(t),Srt=r(XHe," (throws an error)."),XHe.forEach(t),Rrt=i(Ei),ra=n(Ei,"DIV",{class:!0});var t6=s(ra);T(ck.$$.fragment,t6),Prt=i(t6),gwe=n(t6,"P",{});var DQt=s(gwe);Brt=r(DQt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),DQt.forEach(t),Irt=i(t6),Af=n(t6,"P",{});var Oae=s(Af);Nrt=r(Oae,`Note:
Loading a model from its configuration file does `),hwe=n(Oae,"STRONG",{});var GQt=s(hwe);qrt=r(GQt,"not"),GQt.forEach(t),jrt=r(Oae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ore=n(Oae,"A",{href:!0});var OQt=s(Ore);Drt=r(OQt,"from_pretrained()"),OQt.forEach(t),Grt=r(Oae," to load the model weights."),Oae.forEach(t),Ort=i(t6),T(R0.$$.fragment,t6),t6.forEach(t),Vrt=i(Ei),Kr=n(Ei,"DIV",{class:!0});var Ci=s(Kr);T(fk.$$.fragment,Ci),Xrt=i(Ci),pwe=n(Ci,"P",{});var VQt=s(pwe);zrt=r(VQt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),VQt.forEach(t),Wrt=i(Ci),$n=n(Ci,"P",{});var a6=s($n);Qrt=r(a6,"The model class to instantiate is selected based on the "),_we=n(a6,"CODE",{});var XQt=s(_we);Hrt=r(XQt,"model_type"),XQt.forEach(t),Urt=r(a6,` property of the config object (either
passed as an argument or loaded from `),uwe=n(a6,"CODE",{});var zQt=s(uwe);Jrt=r(zQt,"pretrained_model_name_or_path"),zQt.forEach(t),Yrt=r(a6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bwe=n(a6,"CODE",{});var WQt=s(bwe);Krt=r(WQt,"pretrained_model_name_or_path"),WQt.forEach(t),Zrt=r(a6,":"),a6.forEach(t),ett=i(Ci),vwe=n(Ci,"UL",{});var QQt=s(vwe);P0=n(QQt,"LI",{});var kXe=s(P0);Fwe=n(kXe,"STRONG",{});var HQt=s(Fwe);ott=r(HQt,"bert"),HQt.forEach(t),rtt=r(kXe," \u2014 "),Vre=n(kXe,"A",{href:!0});var UQt=s(Vre);ttt=r(UQt,"FlaxBertForNextSentencePrediction"),UQt.forEach(t),att=r(kXe," (BERT model)"),kXe.forEach(t),QQt.forEach(t),ntt=i(Ci),T(B0.$$.fragment,Ci),Ci.forEach(t),Ei.forEach(t),IWe=i(f),Lf=n(f,"H2",{class:!0});var zHe=s(Lf);I0=n(zHe,"A",{id:!0,class:!0,href:!0});var JQt=s(I0);Twe=n(JQt,"SPAN",{});var YQt=s(Twe);T(mk.$$.fragment,YQt),YQt.forEach(t),JQt.forEach(t),stt=i(zHe),Mwe=n(zHe,"SPAN",{});var KQt=s(Mwe);ltt=r(KQt,"FlaxAutoModelForImageClassification"),KQt.forEach(t),zHe.forEach(t),NWe=i(f),wr=n(f,"DIV",{class:!0});var wi=s(wr);T(gk.$$.fragment,wi),itt=i(wi),yf=n(wi,"P",{});var Vae=s(yf);dtt=r(Vae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Xre=n(Vae,"A",{href:!0});var ZQt=s(Xre);ctt=r(ZQt,"from_pretrained()"),ZQt.forEach(t),ftt=r(Vae," class method or the "),zre=n(Vae,"A",{href:!0});var eHt=s(zre);mtt=r(eHt,"from_config()"),eHt.forEach(t),gtt=r(Vae,` class
method.`),Vae.forEach(t),htt=i(wi),hk=n(wi,"P",{});var WHe=s(hk);ptt=r(WHe,"This class cannot be instantiated directly using "),Ewe=n(WHe,"CODE",{});var oHt=s(Ewe);_tt=r(oHt,"__init__()"),oHt.forEach(t),utt=r(WHe," (throws an error)."),WHe.forEach(t),btt=i(wi),ta=n(wi,"DIV",{class:!0});var n6=s(ta);T(pk.$$.fragment,n6),vtt=i(n6),Cwe=n(n6,"P",{});var rHt=s(Cwe);Ftt=r(rHt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),rHt.forEach(t),Ttt=i(n6),xf=n(n6,"P",{});var Xae=s(xf);Mtt=r(Xae,`Note:
Loading a model from its configuration file does `),wwe=n(Xae,"STRONG",{});var tHt=s(wwe);Ett=r(tHt,"not"),tHt.forEach(t),Ctt=r(Xae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wre=n(Xae,"A",{href:!0});var aHt=s(Wre);wtt=r(aHt,"from_pretrained()"),aHt.forEach(t),Att=r(Xae," to load the model weights."),Xae.forEach(t),Ltt=i(n6),T(N0.$$.fragment,n6),n6.forEach(t),ytt=i(wi),Zr=n(wi,"DIV",{class:!0});var Ai=s(Zr);T(_k.$$.fragment,Ai),xtt=i(Ai),Awe=n(Ai,"P",{});var nHt=s(Awe);$tt=r(nHt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),nHt.forEach(t),ktt=i(Ai),kn=n(Ai,"P",{});var s6=s(kn);Stt=r(s6,"The model class to instantiate is selected based on the "),Lwe=n(s6,"CODE",{});var sHt=s(Lwe);Rtt=r(sHt,"model_type"),sHt.forEach(t),Ptt=r(s6,` property of the config object (either
passed as an argument or loaded from `),ywe=n(s6,"CODE",{});var lHt=s(ywe);Btt=r(lHt,"pretrained_model_name_or_path"),lHt.forEach(t),Itt=r(s6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xwe=n(s6,"CODE",{});var iHt=s(xwe);Ntt=r(iHt,"pretrained_model_name_or_path"),iHt.forEach(t),qtt=r(s6,":"),s6.forEach(t),jtt=i(Ai),uk=n(Ai,"UL",{});var QHe=s(uk);q0=n(QHe,"LI",{});var SXe=s(q0);$we=n(SXe,"STRONG",{});var dHt=s($we);Dtt=r(dHt,"beit"),dHt.forEach(t),Gtt=r(SXe," \u2014 "),Qre=n(SXe,"A",{href:!0});var cHt=s(Qre);Ott=r(cHt,"FlaxBeitForImageClassification"),cHt.forEach(t),Vtt=r(SXe," (BEiT model)"),SXe.forEach(t),Xtt=i(QHe),j0=n(QHe,"LI",{});var RXe=s(j0);kwe=n(RXe,"STRONG",{});var fHt=s(kwe);ztt=r(fHt,"vit"),fHt.forEach(t),Wtt=r(RXe," \u2014 "),Hre=n(RXe,"A",{href:!0});var mHt=s(Hre);Qtt=r(mHt,"FlaxViTForImageClassification"),mHt.forEach(t),Htt=r(RXe," (ViT model)"),RXe.forEach(t),QHe.forEach(t),Utt=i(Ai),T(D0.$$.fragment,Ai),Ai.forEach(t),wi.forEach(t),qWe=i(f),$f=n(f,"H2",{class:!0});var HHe=s($f);G0=n(HHe,"A",{id:!0,class:!0,href:!0});var gHt=s(G0);Swe=n(gHt,"SPAN",{});var hHt=s(Swe);T(bk.$$.fragment,hHt),hHt.forEach(t),gHt.forEach(t),Jtt=i(HHe),Rwe=n(HHe,"SPAN",{});var pHt=s(Rwe);Ytt=r(pHt,"FlaxAutoModelForVision2Seq"),pHt.forEach(t),HHe.forEach(t),jWe=i(f),Ar=n(f,"DIV",{class:!0});var Li=s(Ar);T(vk.$$.fragment,Li),Ktt=i(Li),kf=n(Li,"P",{});var zae=s(kf);Ztt=r(zae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Ure=n(zae,"A",{href:!0});var _Ht=s(Ure);eat=r(_Ht,"from_pretrained()"),_Ht.forEach(t),oat=r(zae," class method or the "),Jre=n(zae,"A",{href:!0});var uHt=s(Jre);rat=r(uHt,"from_config()"),uHt.forEach(t),tat=r(zae,` class
method.`),zae.forEach(t),aat=i(Li),Fk=n(Li,"P",{});var UHe=s(Fk);nat=r(UHe,"This class cannot be instantiated directly using "),Pwe=n(UHe,"CODE",{});var bHt=s(Pwe);sat=r(bHt,"__init__()"),bHt.forEach(t),lat=r(UHe," (throws an error)."),UHe.forEach(t),iat=i(Li),aa=n(Li,"DIV",{class:!0});var l6=s(aa);T(Tk.$$.fragment,l6),dat=i(l6),Bwe=n(l6,"P",{});var vHt=s(Bwe);cat=r(vHt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),vHt.forEach(t),fat=i(l6),Sf=n(l6,"P",{});var Wae=s(Sf);mat=r(Wae,`Note:
Loading a model from its configuration file does `),Iwe=n(Wae,"STRONG",{});var FHt=s(Iwe);gat=r(FHt,"not"),FHt.forEach(t),hat=r(Wae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yre=n(Wae,"A",{href:!0});var THt=s(Yre);pat=r(THt,"from_pretrained()"),THt.forEach(t),_at=r(Wae," to load the model weights."),Wae.forEach(t),uat=i(l6),T(O0.$$.fragment,l6),l6.forEach(t),bat=i(Li),et=n(Li,"DIV",{class:!0});var yi=s(et);T(Mk.$$.fragment,yi),vat=i(yi),Nwe=n(yi,"P",{});var MHt=s(Nwe);Fat=r(MHt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),MHt.forEach(t),Tat=i(yi),Sn=n(yi,"P",{});var i6=s(Sn);Mat=r(i6,"The model class to instantiate is selected based on the "),qwe=n(i6,"CODE",{});var EHt=s(qwe);Eat=r(EHt,"model_type"),EHt.forEach(t),Cat=r(i6,` property of the config object (either
passed as an argument or loaded from `),jwe=n(i6,"CODE",{});var CHt=s(jwe);wat=r(CHt,"pretrained_model_name_or_path"),CHt.forEach(t),Aat=r(i6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dwe=n(i6,"CODE",{});var wHt=s(Dwe);Lat=r(wHt,"pretrained_model_name_or_path"),wHt.forEach(t),yat=r(i6,":"),i6.forEach(t),xat=i(yi),Gwe=n(yi,"UL",{});var AHt=s(Gwe);V0=n(AHt,"LI",{});var PXe=s(V0);Owe=n(PXe,"STRONG",{});var LHt=s(Owe);$at=r(LHt,"vision-encoder-decoder"),LHt.forEach(t),kat=r(PXe," \u2014 "),Kre=n(PXe,"A",{href:!0});var yHt=s(Kre);Sat=r(yHt,"FlaxVisionEncoderDecoderModel"),yHt.forEach(t),Rat=r(PXe," (Vision Encoder decoder model)"),PXe.forEach(t),AHt.forEach(t),Pat=i(yi),T(X0.$$.fragment,yi),yi.forEach(t),Li.forEach(t),this.h()},h(){d(g,"name","hf:doc:metadata"),d(g,"content",JSON.stringify(PJt)),d(m,"id","auto-classes"),d(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(m,"href","#auto-classes"),d(p,"class","relative group"),d(Pn,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.AutoConfig"),d(In,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.AutoModel"),d(Nn,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.AutoTokenizer"),d(Bi,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertModel"),d(Df,"id","extending-the-auto-classes"),d(Df,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Df,"href","#extending-the-auto-classes"),d(Ii,"class","relative group"),d(Of,"id","transformers.AutoConfig"),d(Of,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Of,"href","#transformers.AutoConfig"),d(Ni,"class","relative group"),d(KS,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(ZS,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig"),d(eR,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig"),d(oR,"href","/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitConfig"),d(rR,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig"),d(tR,"href","/docs/transformers/pr_17938/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(aR,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig"),d(nR,"href","/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(sR,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(lR,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(iR,"href","/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomConfig"),d(dR,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig"),d(cR,"href","/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineConfig"),d(fR,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPConfig"),d(mR,"href","/docs/transformers/pr_17938/en/model_doc/codegen#transformers.CodeGenConfig"),d(gR,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig"),d(hR,"href","/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextConfig"),d(pR,"href","/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLConfig"),d(_R,"href","/docs/transformers/pr_17938/en/model_doc/cvt#transformers.CvtConfig"),d(uR,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(bR,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(vR,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),d(FR,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig"),d(TR,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(MR,"href","/docs/transformers/pr_17938/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(ER,"href","/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTConfig"),d(CR,"href","/docs/transformers/pr_17938/en/model_doc/detr#transformers.DetrConfig"),d(wR,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig"),d(AR,"href","/docs/transformers/pr_17938/en/model_doc/dpr#transformers.DPRConfig"),d(LR,"href","/docs/transformers/pr_17938/en/model_doc/dpt#transformers.DPTConfig"),d(yR,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig"),d(xR,"href","/docs/transformers/pr_17938/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d($R,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig"),d(kR,"href","/docs/transformers/pr_17938/en/model_doc/flava#transformers.FlavaConfig"),d(SR,"href","/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetConfig"),d(RR,"href","/docs/transformers/pr_17938/en/model_doc/fsmt#transformers.FSMTConfig"),d(PR,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig"),d(BR,"href","/docs/transformers/pr_17938/en/model_doc/glpn#transformers.GLPNConfig"),d(IR,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config"),d(NR,"href","/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(qR,"href","/docs/transformers/pr_17938/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),d(jR,"href","/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJConfig"),d(DR,"href","/docs/transformers/pr_17938/en/model_doc/groupvit#transformers.GroupViTConfig"),d(GR,"href","/docs/transformers/pr_17938/en/model_doc/hubert#transformers.HubertConfig"),d(OR,"href","/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertConfig"),d(VR,"href","/docs/transformers/pr_17938/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(XR,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(zR,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(WR,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),d(QR,"href","/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDConfig"),d(HR,"href","/docs/transformers/pr_17938/en/model_doc/levit#transformers.LevitConfig"),d(UR,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig"),d(JR,"href","/docs/transformers/pr_17938/en/model_doc/longt5#transformers.LongT5Config"),d(YR,"href","/docs/transformers/pr_17938/en/model_doc/luke#transformers.LukeConfig"),d(KR,"href","/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertConfig"),d(ZR,"href","/docs/transformers/pr_17938/en/model_doc/m2m_100#transformers.M2M100Config"),d(eP,"href","/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianConfig"),d(oP,"href","/docs/transformers/pr_17938/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(rP,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig"),d(tP,"href","/docs/transformers/pr_17938/en/model_doc/mctct#transformers.MCTCTConfig"),d(aP,"href","/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(nP,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(sP,"href","/docs/transformers/pr_17938/en/model_doc/mobilevit#transformers.MobileViTConfig"),d(lP,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig"),d(iP,"href","/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5Config"),d(dP,"href","/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpConfig"),d(cP,"href","/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaConfig"),d(fP,"href","/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(mP,"href","/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(gP,"href","/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTConfig"),d(hP,"href","/docs/transformers/pr_17938/en/model_doc/owlvit#transformers.OwlViTConfig"),d(pP,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusConfig"),d(_P,"href","/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverConfig"),d(uP,"href","/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartConfig"),d(bP,"href","/docs/transformers/pr_17938/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(vP,"href","/docs/transformers/pr_17938/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(FP,"href","/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(TP,"href","/docs/transformers/pr_17938/en/model_doc/rag#transformers.RagConfig"),d(MP,"href","/docs/transformers/pr_17938/en/model_doc/realm#transformers.RealmConfig"),d(EP,"href","/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerConfig"),d(CP,"href","/docs/transformers/pr_17938/en/model_doc/regnet#transformers.RegNetConfig"),d(wP,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig"),d(AP,"href","/docs/transformers/pr_17938/en/model_doc/resnet#transformers.ResNetConfig"),d(LP,"href","/docs/transformers/pr_17938/en/model_doc/retribert#transformers.RetriBertConfig"),d(yP,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig"),d(xP,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig"),d($P,"href","/docs/transformers/pr_17938/en/model_doc/segformer#transformers.SegformerConfig"),d(kP,"href","/docs/transformers/pr_17938/en/model_doc/sew#transformers.SEWConfig"),d(SP,"href","/docs/transformers/pr_17938/en/model_doc/sew-d#transformers.SEWDConfig"),d(RP,"href","/docs/transformers/pr_17938/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(PP,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(BP,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(IP,"href","/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterConfig"),d(NP,"href","/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(qP,"href","/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinConfig"),d(jP,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Config"),d(DP,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasConfig"),d(GP,"href","/docs/transformers/pr_17938/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),d(OP,"href","/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(VP,"href","/docs/transformers/pr_17938/en/model_doc/trocr#transformers.TrOCRConfig"),d(XP,"href","/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(zP,"href","/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(WP,"href","/docs/transformers/pr_17938/en/model_doc/van#transformers.VanConfig"),d(QP,"href","/docs/transformers/pr_17938/en/model_doc/vilt#transformers.ViltConfig"),d(HP,"href","/docs/transformers/pr_17938/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(UP,"href","/docs/transformers/pr_17938/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(JP,"href","/docs/transformers/pr_17938/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(YP,"href","/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTConfig"),d(KP,"href","/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(ZP,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(eB,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),d(oB,"href","/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMConfig"),d(rB,"href","/docs/transformers/pr_17938/en/model_doc/xglm#transformers.XGLMConfig"),d(tB,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig"),d(aB,"href","/docs/transformers/pr_17938/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(nB,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(sB,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(lB,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig"),d(iB,"href","/docs/transformers/pr_17938/en/model_doc/yolos#transformers.YolosConfig"),d(dB,"href","/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoConfig"),d(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rh,"id","transformers.AutoTokenizer"),d(rh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(rh,"href","#transformers.AutoTokenizer"),d(ji,"class","relative group"),d(cB,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(fB,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertTokenizer"),d(mB,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(gB,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartTokenizer"),d(hB,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartTokenizerFast"),d(pB,"href","/docs/transformers/pr_17938/en/model_doc/barthez#transformers.BarthezTokenizer"),d(_B,"href","/docs/transformers/pr_17938/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(uB,"href","/docs/transformers/pr_17938/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(bB,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizer"),d(vB,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizerFast"),d(FB,"href","/docs/transformers/pr_17938/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(TB,"href","/docs/transformers/pr_17938/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(MB,"href","/docs/transformers/pr_17938/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(EB,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(CB,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(wB,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(AB,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(LB,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(yB,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(xB,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d($B,"href","/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomTokenizerFast"),d(kB,"href","/docs/transformers/pr_17938/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(SB,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertTokenizer"),d(RB,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(PB,"href","/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineTokenizer"),d(BB,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPTokenizer"),d(IB,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(NB,"href","/docs/transformers/pr_17938/en/model_doc/codegen#transformers.CodeGenTokenizer"),d(qB,"href","/docs/transformers/pr_17938/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),d(jB,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(DB,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(GB,"href","/docs/transformers/pr_17938/en/model_doc/cpm#transformers.CpmTokenizer"),d(OB,"href","/docs/transformers/pr_17938/en/model_doc/cpm#transformers.CpmTokenizerFast"),d(VB,"href","/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(XB,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaTokenizer"),d(zB,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(WB,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaTokenizer"),d(QB,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(HB,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(UB,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),d(JB,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(YB,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(KB,"href","/docs/transformers/pr_17938/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(ZB,"href","/docs/transformers/pr_17938/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(eI,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraTokenizer"),d(oI,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(rI,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(tI,"href","/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetTokenizer"),d(aI,"href","/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(nI,"href","/docs/transformers/pr_17938/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(sI,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelTokenizer"),d(lI,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(iI,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(dI,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(cI,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(fI,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(mI,"href","/docs/transformers/pr_17938/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),d(gI,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(hI,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(pI,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPTokenizer"),d(_I,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(uI,"href","/docs/transformers/pr_17938/en/model_doc/herbert#transformers.HerbertTokenizer"),d(bI,"href","/docs/transformers/pr_17938/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(vI,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(FI,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaTokenizer"),d(TI,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(MI,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(EI,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(CI,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(wI,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(AI,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),d(LI,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),d(yI,"href","/docs/transformers/pr_17938/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(xI,"href","/docs/transformers/pr_17938/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d($I,"href","/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDTokenizer"),d(kI,"href","/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDTokenizerFast"),d(SI,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerTokenizer"),d(RI,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(PI,"href","/docs/transformers/pr_17938/en/model_doc/mt5#transformers.T5Tokenizer"),d(BI,"href","/docs/transformers/pr_17938/en/model_doc/mt5#transformers.T5TokenizerFast"),d(II,"href","/docs/transformers/pr_17938/en/model_doc/luke#transformers.LukeTokenizer"),d(NI,"href","/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(qI,"href","/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(jI,"href","/docs/transformers/pr_17938/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(DI,"href","/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianTokenizer"),d(GI,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartTokenizer"),d(OI,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(VI,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(XI,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(zI,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizer"),d(WI,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizerFast"),d(QI,"href","/docs/transformers/pr_17938/en/model_doc/mluke#transformers.MLukeTokenizer"),d(HI,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(UI,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(JI,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(YI,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(KI,"href","/docs/transformers/pr_17938/en/model_doc/mt5#transformers.T5Tokenizer"),d(ZI,"href","/docs/transformers/pr_17938/en/model_doc/mt5#transformers.T5TokenizerFast"),d(eN,"href","/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpTokenizer"),d(oN,"href","/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpTokenizerFast"),d(rN,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizer"),d(tN,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizerFast"),d(aN,"href","/docs/transformers/pr_17938/en/model_doc/nllb#transformers.NllbTokenizer"),d(nN,"href","/docs/transformers/pr_17938/en/model_doc/nllb#transformers.NllbTokenizerFast"),d(sN,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertTokenizer"),d(lN,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(iN,"href","/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(dN,"href","/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(cN,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(fN,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPTokenizer"),d(mN,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(gN,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(hN,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(pN,"href","/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(_N,"href","/docs/transformers/pr_17938/en/model_doc/phobert#transformers.PhobertTokenizer"),d(uN,"href","/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartTokenizer"),d(bN,"href","/docs/transformers/pr_17938/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(vN,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizer"),d(FN,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizerFast"),d(TN,"href","/docs/transformers/pr_17938/en/model_doc/rag#transformers.RagTokenizer"),d(MN,"href","/docs/transformers/pr_17938/en/model_doc/realm#transformers.RealmTokenizer"),d(EN,"href","/docs/transformers/pr_17938/en/model_doc/realm#transformers.RealmTokenizerFast"),d(CN,"href","/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerTokenizer"),d(wN,"href","/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(AN,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertTokenizer"),d(LN,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(yN,"href","/docs/transformers/pr_17938/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(xN,"href","/docs/transformers/pr_17938/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d($N,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaTokenizer"),d(kN,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(SN,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(RN,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(PN,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(BN,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(IN,"href","/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterTokenizer"),d(NN,"href","/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(qN,"href","/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(jN,"href","/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(DN,"href","/docs/transformers/pr_17938/en/model_doc/mt5#transformers.T5Tokenizer"),d(GN,"href","/docs/transformers/pr_17938/en/model_doc/mt5#transformers.T5TokenizerFast"),d(ON,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasTokenizer"),d(VN,"href","/docs/transformers/pr_17938/en/model_doc/tapex#transformers.TapexTokenizer"),d(XN,"href","/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(zN,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizer"),d(WN,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizerFast"),d(QN,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizer"),d(HN,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizerFast"),d(UN,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(JN,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(YN,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(KN,"href","/docs/transformers/pr_17938/en/model_doc/xglm#transformers.XGLMTokenizer"),d(ZN,"href","/docs/transformers/pr_17938/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(eq,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMTokenizer"),d(oq,"href","/docs/transformers/pr_17938/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(rq,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(tq,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(aq,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaTokenizer"),d(nq,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(sq,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(lq,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(iq,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertTokenizer"),d(dq,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qh,"id","transformers.AutoFeatureExtractor"),d(qh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qh,"href","#transformers.AutoFeatureExtractor"),d(Di,"class","relative group"),d(cq,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(fq,"href","/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(mq,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(gq,"href","/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(hq,"href","/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(pq,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(_q,"href","/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(uq,"href","/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(bq,"href","/docs/transformers/pr_17938/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(vq,"href","/docs/transformers/pr_17938/en/model_doc/dpt#transformers.DPTFeatureExtractor"),d(Fq,"href","/docs/transformers/pr_17938/en/model_doc/flava#transformers.FlavaFeatureExtractor"),d(Tq,"href","/docs/transformers/pr_17938/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),d(Mq,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(Eq,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(Cq,"href","/docs/transformers/pr_17938/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),d(wq,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(Aq,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),d(Lq,"href","/docs/transformers/pr_17938/en/model_doc/levit#transformers.LevitFeatureExtractor"),d(yq,"href","/docs/transformers/pr_17938/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(xq,"href","/docs/transformers/pr_17938/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),d($q,"href","/docs/transformers/pr_17938/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),d(kq,"href","/docs/transformers/pr_17938/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),d(Sq,"href","/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(Rq,"href","/docs/transformers/pr_17938/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(Pq,"href","/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(Bq,"href","/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(Iq,"href","/docs/transformers/pr_17938/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(Nq,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(qq,"href","/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(jq,"href","/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(Dq,"href","/docs/transformers/pr_17938/en/model_doc/vilt#transformers.ViltFeatureExtractor"),d(Gq,"href","/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(Oq,"href","/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(Vq,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(Xq,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(zq,"href","/docs/transformers/pr_17938/en/model_doc/yolos#transformers.YolosFeatureExtractor"),d(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ep,"id","transformers.AutoProcessor"),d(Ep,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ep,"href","#transformers.AutoProcessor"),d(Gi,"class","relative group"),d(Wq,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(Qq,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPProcessor"),d(Hq,"href","/docs/transformers/pr_17938/en/model_doc/flava#transformers.FlavaProcessor"),d(Uq,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPProcessor"),d(Jq,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(Yq,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),d(Kq,"href","/docs/transformers/pr_17938/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(Zq,"href","/docs/transformers/pr_17938/en/model_doc/owlvit#transformers.OwlViTProcessor"),d(ej,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(oj,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(rj,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(tj,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(aj,"href","/docs/transformers/pr_17938/en/model_doc/trocr#transformers.TrOCRProcessor"),d(nj,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(sj,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(lj,"href","/docs/transformers/pr_17938/en/model_doc/vilt#transformers.ViltProcessor"),d(ij,"href","/docs/transformers/pr_17938/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(dj,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(cj,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(fj,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wp,"id","transformers.AutoModel"),d(Wp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Wp,"href","#transformers.AutoModel"),d(Vi,"class","relative group"),d(mj,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gj,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hj,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pj,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertModel"),d(_j,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartModel"),d(uj,"href","/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitModel"),d(bj,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertModel"),d(vj,"href","/docs/transformers/pr_17938/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(Fj,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdModel"),d(Tj,"href","/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(Mj,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(Ej,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(Cj,"href","/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomModel"),d(wj,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertModel"),d(Aj,"href","/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineModel"),d(Lj,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPModel"),d(yj,"href","/docs/transformers/pr_17938/en/model_doc/codegen#transformers.CodeGenModel"),d(xj,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertModel"),d($j,"href","/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextModel"),d(kj,"href","/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLModel"),d(Sj,"href","/docs/transformers/pr_17938/en/model_doc/cvt#transformers.CvtModel"),d(Rj,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(Pj,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(Bj,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionModel"),d(Ij,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaModel"),d(Nj,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(qj,"href","/docs/transformers/pr_17938/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(jj,"href","/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTModel"),d(Dj,"href","/docs/transformers/pr_17938/en/model_doc/detr#transformers.DetrModel"),d(Gj,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertModel"),d(Oj,"href","/docs/transformers/pr_17938/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(Vj,"href","/docs/transformers/pr_17938/en/model_doc/dpt#transformers.DPTModel"),d(Xj,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraModel"),d(zj,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertModel"),d(Wj,"href","/docs/transformers/pr_17938/en/model_doc/flava#transformers.FlavaModel"),d(Qj,"href","/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetModel"),d(Hj,"href","/docs/transformers/pr_17938/en/model_doc/fsmt#transformers.FSMTModel"),d(Uj,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelModel"),d(Jj,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelBaseModel"),d(Yj,"href","/docs/transformers/pr_17938/en/model_doc/glpn#transformers.GLPNModel"),d(Kj,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Model"),d(Zj,"href","/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(eD,"href","/docs/transformers/pr_17938/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),d(oD,"href","/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJModel"),d(rD,"href","/docs/transformers/pr_17938/en/model_doc/groupvit#transformers.GroupViTModel"),d(tD,"href","/docs/transformers/pr_17938/en/model_doc/hubert#transformers.HubertModel"),d(aD,"href","/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertModel"),d(nD,"href","/docs/transformers/pr_17938/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(sD,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(lD,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(iD,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),d(dD,"href","/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDModel"),d(cD,"href","/docs/transformers/pr_17938/en/model_doc/levit#transformers.LevitModel"),d(fD,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerModel"),d(mD,"href","/docs/transformers/pr_17938/en/model_doc/longt5#transformers.LongT5Model"),d(gD,"href","/docs/transformers/pr_17938/en/model_doc/luke#transformers.LukeModel"),d(hD,"href","/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertModel"),d(pD,"href","/docs/transformers/pr_17938/en/model_doc/m2m_100#transformers.M2M100Model"),d(_D,"href","/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianModel"),d(uD,"href","/docs/transformers/pr_17938/en/model_doc/maskformer#transformers.MaskFormerModel"),d(bD,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartModel"),d(vD,"href","/docs/transformers/pr_17938/en/model_doc/mctct#transformers.MCTCTModel"),d(FD,"href","/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(TD,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertModel"),d(MD,"href","/docs/transformers/pr_17938/en/model_doc/mobilevit#transformers.MobileViTModel"),d(ED,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetModel"),d(CD,"href","/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5Model"),d(wD,"href","/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpModel"),d(AD,"href","/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaModel"),d(LD,"href","/docs/transformers/pr_17938/en/model_doc/m2m_100#transformers.M2M100Model"),d(yD,"href","/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerModel"),d(xD,"href","/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d($D,"href","/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTModel"),d(kD,"href","/docs/transformers/pr_17938/en/model_doc/owlvit#transformers.OwlViTModel"),d(SD,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusModel"),d(RD,"href","/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverModel"),d(PD,"href","/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartModel"),d(BD,"href","/docs/transformers/pr_17938/en/model_doc/poolformer#transformers.PoolFormerModel"),d(ID,"href","/docs/transformers/pr_17938/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(ND,"href","/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertModel"),d(qD,"href","/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerModel"),d(jD,"href","/docs/transformers/pr_17938/en/model_doc/regnet#transformers.RegNetModel"),d(DD,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertModel"),d(GD,"href","/docs/transformers/pr_17938/en/model_doc/resnet#transformers.ResNetModel"),d(OD,"href","/docs/transformers/pr_17938/en/model_doc/retribert#transformers.RetriBertModel"),d(VD,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaModel"),d(XD,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerModel"),d(zD,"href","/docs/transformers/pr_17938/en/model_doc/segformer#transformers.SegformerModel"),d(WD,"href","/docs/transformers/pr_17938/en/model_doc/sew#transformers.SEWModel"),d(QD,"href","/docs/transformers/pr_17938/en/model_doc/sew-d#transformers.SEWDModel"),d(HD,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(UD,"href","/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterModel"),d(JD,"href","/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(YD,"href","/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinModel"),d(KD,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Model"),d(ZD,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasModel"),d(eG,"href","/docs/transformers/pr_17938/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),d(oG,"href","/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(rG,"href","/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechModel"),d(tG,"href","/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(aG,"href","/docs/transformers/pr_17938/en/model_doc/van#transformers.VanModel"),d(nG,"href","/docs/transformers/pr_17938/en/model_doc/vilt#transformers.ViltModel"),d(sG,"href","/docs/transformers/pr_17938/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(lG,"href","/docs/transformers/pr_17938/en/model_doc/visual_bert#transformers.VisualBertModel"),d(iG,"href","/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTModel"),d(dG,"href","/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(cG,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(fG,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),d(mG,"href","/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMModel"),d(gG,"href","/docs/transformers/pr_17938/en/model_doc/xglm#transformers.XGLMModel"),d(hG,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMModel"),d(pG,"href","/docs/transformers/pr_17938/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(_G,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(uG,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(bG,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetModel"),d(vG,"href","/docs/transformers/pr_17938/en/model_doc/yolos#transformers.YolosModel"),d(FG,"href","/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoModel"),d(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(e1,"id","transformers.AutoModelForPreTraining"),d(e1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(e1,"href","#transformers.AutoModelForPreTraining"),d(Wi,"class","relative group"),d(TG,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(MG,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(EG,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(CG,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForPreTraining"),d(wG,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(AG,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForPreTraining"),d(LG,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(yG,"href","/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomForCausalLM"),d(xG,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d($G,"href","/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(kG,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(SG,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(RG,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(PG,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(BG,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForPreTraining"),d(IG,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(NG,"href","/docs/transformers/pr_17938/en/model_doc/flava#transformers.FlavaForPreTraining"),d(qG,"href","/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForPreTraining"),d(jG,"href","/docs/transformers/pr_17938/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(DG,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(GG,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(OG,"href","/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(VG,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(XG,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(zG,"href","/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(WG,"href","/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(QG,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(HG,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(UG,"href","/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),d(JG,"href","/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForPreTraining"),d(YG,"href","/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(KG,"href","/docs/transformers/pr_17938/en/model_doc/retribert#transformers.RetriBertModel"),d(ZG,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(eO,"href","/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterForPreTraining"),d(oO,"href","/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(rO,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(tO,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(aO,"href","/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(nO,"href","/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(sO,"href","/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(lO,"href","/docs/transformers/pr_17938/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(iO,"href","/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(dO,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(cO,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),d(fO,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(mO,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(gO,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(hO,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(U1,"id","transformers.AutoModelForCausalLM"),d(U1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(U1,"href","#transformers.AutoModelForCausalLM"),d(Ui,"class","relative group"),d(pO,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_O,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uO,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bO,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForCausalLM"),d(vO,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertLMHeadModel"),d(FO,"href","/docs/transformers/pr_17938/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(TO,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(MO,"href","/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(EO,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(CO,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(wO,"href","/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomForCausalLM"),d(AO,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(LO,"href","/docs/transformers/pr_17938/en/model_doc/codegen#transformers.CodeGenForCausalLM"),d(yO,"href","/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(xO,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d($O,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForCausalLM"),d(kO,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(SO,"href","/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(RO,"href","/docs/transformers/pr_17938/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),d(PO,"href","/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(BO,"href","/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianForCausalLM"),d(IO,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartForCausalLM"),d(NO,"href","/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(qO,"href","/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForCausalLM"),d(jO,"href","/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(DO,"href","/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTForCausalLM"),d(GO,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(OO,"href","/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(VO,"href","/docs/transformers/pr_17938/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(XO,"href","/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(zO,"href","/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(WO,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(QO,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(HO,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(UO,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(JO,"href","/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(YO,"href","/docs/transformers/pr_17938/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(KO,"href","/docs/transformers/pr_17938/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(ZO,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(eV,"href","/docs/transformers/pr_17938/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(oV,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(rV,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(tV,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(j2,"id","transformers.AutoModelForMaskedLM"),d(j2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(j2,"href","#transformers.AutoModelForMaskedLM"),d(Ki,"class","relative group"),d(aV,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nV,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sV,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lV,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(iV,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(dV,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForMaskedLM"),d(cV,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(fV,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(mV,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(gV,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(hV,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(pV,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(_V,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(uV,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(bV,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(vV,"href","/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(FV,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(TV,"href","/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(MV,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(EV,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(CV,"href","/docs/transformers/pr_17938/en/model_doc/luke#transformers.LukeForMaskedLM"),d(wV,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(AV,"href","/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(LV,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(yV,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(xV,"href","/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),d($V,"href","/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForMaskedLM"),d(kV,"href","/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(SV,"href","/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(RV,"href","/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(PV,"href","/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(BV,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(IV,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(NV,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(qV,"href","/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(jV,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(DV,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(GV,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(OV,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(VV,"href","/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lb,"id","transformers.AutoModelForSeq2SeqLM"),d(Lb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Lb,"href","#transformers.AutoModelForSeq2SeqLM"),d(od,"class","relative group"),d(XV,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zV,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(WV,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(QV,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(HV,"href","/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(UV,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(JV,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(YV,"href","/docs/transformers/pr_17938/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(KV,"href","/docs/transformers/pr_17938/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(ZV,"href","/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(eX,"href","/docs/transformers/pr_17938/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),d(oX,"href","/docs/transformers/pr_17938/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(rX,"href","/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianMTModel"),d(tX,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(aX,"href","/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(nX,"href","/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),d(sX,"href","/docs/transformers/pr_17938/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(lX,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(iX,"href","/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(dX,"href","/docs/transformers/pr_17938/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(cX,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(fX,"href","/docs/transformers/pr_17938/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jb,"id","transformers.AutoModelForSequenceClassification"),d(Jb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Jb,"href","#transformers.AutoModelForSequenceClassification"),d(ad,"class","relative group"),d(mX,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gX,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hX,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pX,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(_X,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForSequenceClassification"),d(uX,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForSequenceClassification"),d(bX,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(vX,"href","/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(FX,"href","/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomForSequenceClassification"),d(TX,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(MX,"href","/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(EX,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(CX,"href","/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(wX,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(AX,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(LX,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(yX,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(xX,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d($X,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(kX,"href","/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(SX,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(RX,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(PX,"href","/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(BX,"href","/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(IX,"href","/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(NX,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(qX,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(jX,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),d(DX,"href","/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDForSequenceClassification"),d(GX,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(OX,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(VX,"href","/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(XX,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(zX,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(WX,"href","/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForSequenceClassification"),d(QX,"href","/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),d(HX,"href","/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(UX,"href","/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(JX,"href","/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTForSequenceClassification"),d(YX,"href","/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(KX,"href","/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(ZX,"href","/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(ez,"href","/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(oz,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(rz,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(tz,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(az,"href","/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(nz,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(sz,"href","/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(lz,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(iz,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(dz,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(cz,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(fz,"href","/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Y3,"id","transformers.AutoModelForMultipleChoice"),d(Y3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Y3,"href","#transformers.AutoModelForMultipleChoice"),d(ld,"class","relative group"),d(mz,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gz,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hz,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pz,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(_z,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForMultipleChoice"),d(uz,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(bz,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(vz,"href","/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(Fz,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(Tz,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(Mz,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),d(Ez,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(Cz,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(wz,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(Az,"href","/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(Lz,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(yz,"href","/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(xz,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d($z,"href","/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(kz,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(Sz,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(Rz,"href","/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),d(Pz,"href","/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(Bz,"href","/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(Iz,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(Nz,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(qz,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(jz,"href","/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(Dz,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(Gz,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(Oz,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(Vz,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(Xz,"href","/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kv,"id","transformers.AutoModelForNextSentencePrediction"),d(kv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kv,"href","#transformers.AutoModelForNextSentencePrediction"),d(cd,"class","relative group"),d(zz,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wz,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Qz,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Hz,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(Uz,"href","/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(Jz,"href","/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(Yz,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(Kz,"href","/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),d(Zz,"href","/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gv,"id","transformers.AutoModelForTokenClassification"),d(Gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gv,"href","#transformers.AutoModelForTokenClassification"),d(gd,"class","relative group"),d(eW,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oW,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(rW,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tW,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(aW,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForTokenClassification"),d(nW,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(sW,"href","/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomForTokenClassification"),d(lW,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(iW,"href","/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineForTokenClassification"),d(dW,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(cW,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(fW,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(mW,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(gW,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(hW,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(pW,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(_W,"href","/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(uW,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(bW,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(vW,"href","/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(FW,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(TW,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(MW,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),d(EW,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(CW,"href","/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(wW,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(AW,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(LW,"href","/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForTokenClassification"),d(yW,"href","/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(xW,"href","/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d($W,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(kW,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(SW,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(RW,"href","/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(PW,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(BW,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(IW,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(NW,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(qW,"href","/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(LF,"id","transformers.AutoModelForQuestionAnswering"),d(LF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(LF,"href","#transformers.AutoModelForQuestionAnswering"),d(_d,"class","relative group"),d(jW,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(DW,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(GW,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(OW,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(VW,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(XW,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(zW,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(WW,"href","/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(QW,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(HW,"href","/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(UW,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(JW,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(YW,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(KW,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(ZW,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(eQ,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(oQ,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(rQ,"href","/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(tQ,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(aQ,"href","/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(nQ,"href","/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(sQ,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(lQ,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),d(iQ,"href","/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(dQ,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(cQ,"href","/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(fQ,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(mQ,"href","/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(gQ,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(hQ,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(pQ,"href","/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),d(_Q,"href","/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),d(uQ,"href","/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(bQ,"href","/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(vQ,"href","/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(FQ,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(TQ,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(MQ,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(EQ,"href","/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(CQ,"href","/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(wQ,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(AQ,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(LQ,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(yQ,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(xQ,"href","/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vT,"id","transformers.AutoModelForTableQuestionAnswering"),d(vT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vT,"href","#transformers.AutoModelForTableQuestionAnswering"),d(vd,"class","relative group"),d($Q,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kQ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(SQ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(RQ,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(CT,"id","transformers.AutoModelForImageClassification"),d(CT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(CT,"href","#transformers.AutoModelForImageClassification"),d(Md,"class","relative group"),d(PQ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(BQ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(IQ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(NQ,"href","/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitForImageClassification"),d(qQ,"href","/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(jQ,"href","/docs/transformers/pr_17938/en/model_doc/cvt#transformers.CvtForImageClassification"),d(DQ,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),d(GQ,"href","/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTForImageClassification"),d(OQ,"href","/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(VQ,"href","/docs/transformers/pr_17938/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(XQ,"href","/docs/transformers/pr_17938/en/model_doc/levit#transformers.LevitForImageClassification"),d(zQ,"href","/docs/transformers/pr_17938/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),d(WQ,"href","/docs/transformers/pr_17938/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),d(QQ,"href","/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(HQ,"href","/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(UQ,"href","/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(JQ,"href","/docs/transformers/pr_17938/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(YQ,"href","/docs/transformers/pr_17938/en/model_doc/regnet#transformers.RegNetForImageClassification"),d(KQ,"href","/docs/transformers/pr_17938/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(ZQ,"href","/docs/transformers/pr_17938/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(eH,"href","/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinForImageClassification"),d(oH,"href","/docs/transformers/pr_17938/en/model_doc/van#transformers.VanForImageClassification"),d(rH,"href","/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTForImageClassification"),d(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(GT,"id","transformers.AutoModelForVision2Seq"),d(GT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(GT,"href","#transformers.AutoModelForVision2Seq"),d(wd,"class","relative group"),d(tH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(aH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(nH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sH,"href","/docs/transformers/pr_17938/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(WT,"id","transformers.AutoModelForVisualQuestionAnswering"),d(WT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(WT,"href","#transformers.AutoModelForVisualQuestionAnswering"),d(yd,"class","relative group"),d(lH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(iH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(dH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cH,"href","/docs/transformers/pr_17938/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),d(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(YT,"id","transformers.AutoModelForAudioClassification"),d(YT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(YT,"href","#transformers.AutoModelForAudioClassification"),d(kd,"class","relative group"),d(fH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hH,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(pH,"href","/docs/transformers/pr_17938/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(_H,"href","/docs/transformers/pr_17938/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(uH,"href","/docs/transformers/pr_17938/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(bH,"href","/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(vH,"href","/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(FH,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(TH,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),d(MH,"href","/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(c7,"id","transformers.AutoModelForAudioFrameClassification"),d(c7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(c7,"href","#transformers.AutoModelForAudioFrameClassification"),d(Pd,"class","relative group"),d(EH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(CH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AH,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(LH,"href","/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(yH,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(xH,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),d($H,"href","/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(v7,"id","transformers.AutoModelForCTC"),d(v7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(v7,"href","#transformers.AutoModelForCTC"),d(Nd,"class","relative group"),d(kH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(SH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(RH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(PH,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(BH,"href","/docs/transformers/pr_17938/en/model_doc/hubert#transformers.HubertForCTC"),d(IH,"href","/docs/transformers/pr_17938/en/model_doc/mctct#transformers.MCTCTForCTC"),d(NH,"href","/docs/transformers/pr_17938/en/model_doc/sew#transformers.SEWForCTC"),d(qH,"href","/docs/transformers/pr_17938/en/model_doc/sew-d#transformers.SEWDForCTC"),d(jH,"href","/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(DH,"href","/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(GH,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(OH,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),d(VH,"href","/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMForCTC"),d(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(R7,"id","transformers.AutoModelForSpeechSeq2Seq"),d(R7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(R7,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Dd,"class","relative group"),d(XH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(WH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(QH,"href","/docs/transformers/pr_17938/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(HH,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(j7,"id","transformers.AutoModelForAudioXVector"),d(j7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(j7,"href","#transformers.AutoModelForAudioXVector"),d(Vd,"class","relative group"),d(UH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(JH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(YH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(KH,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(ZH,"href","/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(eU,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(oU,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),d(rU,"href","/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMForXVector"),d(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(H7,"id","transformers.AutoModelForMaskedImageModeling"),d(H7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(H7,"href","#transformers.AutoModelForMaskedImageModeling"),d(Wd,"class","relative group"),d(tU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(aU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(nU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sU,"href","/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(lU,"href","/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(iU,"href","/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(o8,"id","transformers.AutoModelForObjectDetection"),d(o8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o8,"href","#transformers.AutoModelForObjectDetection"),d(Jd,"class","relative group"),d(dU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mU,"href","/docs/transformers/pr_17938/en/model_doc/detr#transformers.DetrForObjectDetection"),d(gU,"href","/docs/transformers/pr_17938/en/model_doc/yolos#transformers.YolosForObjectDetection"),d(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(l8,"id","transformers.AutoModelForImageSegmentation"),d(l8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l8,"href","#transformers.AutoModelForImageSegmentation"),d(Zd,"class","relative group"),d(hU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_U,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uU,"href","/docs/transformers/pr_17938/en/model_doc/detr#transformers.DetrForSegmentation"),d(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(m8,"id","transformers.AutoModelForSemanticSegmentation"),d(m8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(m8,"href","#transformers.AutoModelForSemanticSegmentation"),d(rc,"class","relative group"),d(bU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(FU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(TU,"href","/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(MU,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),d(EU,"href","/docs/transformers/pr_17938/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(CU,"href","/docs/transformers/pr_17938/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),d(wU,"href","/docs/transformers/pr_17938/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(T8,"id","transformers.AutoModelForInstanceSegmentation"),d(T8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(T8,"href","#transformers.AutoModelForInstanceSegmentation"),d(nc,"class","relative group"),d(AU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(LU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xU,"href","/docs/transformers/pr_17938/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(A8,"id","transformers.TFAutoModel"),d(A8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(A8,"href","#transformers.TFAutoModel"),d(ic,"class","relative group"),d($U,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(SU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(RU,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertModel"),d(PU,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.TFBartModel"),d(BU,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertModel"),d(IU,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(NU,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(qU,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertModel"),d(jU,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.TFCLIPModel"),d(DU,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertModel"),d(GU,"href","/docs/transformers/pr_17938/en/model_doc/convnext#transformers.TFConvNextModel"),d(OU,"href","/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.TFCTRLModel"),d(VU,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),d(XU,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.TFDebertaModel"),d(zU,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(WU,"href","/docs/transformers/pr_17938/en/model_doc/deit#transformers.TFDeiTModel"),d(QU,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(HU,"href","/docs/transformers/pr_17938/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(UU,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraModel"),d(JU,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(YU,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelModel"),d(KU,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(ZU,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.TFGPT2Model"),d(eJ,"href","/docs/transformers/pr_17938/en/model_doc/gptj#transformers.TFGPTJModel"),d(oJ,"href","/docs/transformers/pr_17938/en/model_doc/hubert#transformers.TFHubertModel"),d(rJ,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(tJ,"href","/docs/transformers/pr_17938/en/model_doc/led#transformers.TFLEDModel"),d(aJ,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerModel"),d(nJ,"href","/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.TFLxmertModel"),d(sJ,"href","/docs/transformers/pr_17938/en/model_doc/marian#transformers.TFMarianModel"),d(lJ,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.TFMBartModel"),d(iJ,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(dJ,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetModel"),d(cJ,"href","/docs/transformers/pr_17938/en/model_doc/mt5#transformers.TFMT5Model"),d(fJ,"href","/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(mJ,"href","/docs/transformers/pr_17938/en/model_doc/opt#transformers.TFOPTModel"),d(gJ,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.TFPegasusModel"),d(hJ,"href","/docs/transformers/pr_17938/en/model_doc/regnet#transformers.TFRegNetModel"),d(pJ,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertModel"),d(_J,"href","/docs/transformers/pr_17938/en/model_doc/resnet#transformers.TFResNetModel"),d(uJ,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaModel"),d(bJ,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerModel"),d(vJ,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(FJ,"href","/docs/transformers/pr_17938/en/model_doc/swin#transformers.TFSwinModel"),d(TJ,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.TFT5Model"),d(MJ,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TFTapasModel"),d(EJ,"href","/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(CJ,"href","/docs/transformers/pr_17938/en/model_doc/vit#transformers.TFViTModel"),d(wJ,"href","/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(AJ,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(LJ,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMModel"),d(yJ,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(xJ,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetModel"),d(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(C9,"id","transformers.TFAutoModelForPreTraining"),d(C9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(C9,"href","#transformers.TFAutoModelForPreTraining"),d(fc,"class","relative group"),d($J,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kJ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(SJ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(RJ,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(PJ,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(BJ,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForPreTraining"),d(IJ,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(NJ,"href","/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(qJ,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(jJ,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(DJ,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(GJ,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(OJ,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(VJ,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(XJ,"href","/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(zJ,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(WJ,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(QJ,"href","/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(HJ,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(UJ,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(JJ,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(YJ,"href","/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(KJ,"href","/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(ZJ,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(eY,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(oY,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(J9,"id","transformers.TFAutoModelForCausalLM"),d(J9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(J9,"href","#transformers.TFAutoModelForCausalLM"),d(hc,"class","relative group"),d(rY,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tY,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aY,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nY,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(sY,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(lY,"href","/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(iY,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(dY,"href","/docs/transformers/pr_17938/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(cY,"href","/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(fY,"href","/docs/transformers/pr_17938/en/model_doc/opt#transformers.TFOPTForCausalLM"),d(mY,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(gY,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(hY,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(pY,"href","/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(_Y,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(uY,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mM,"id","transformers.TFAutoModelForImageClassification"),d(mM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mM,"href","#transformers.TFAutoModelForImageClassification"),d(uc,"class","relative group"),d(bY,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vY,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(FY,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(TY,"href","/docs/transformers/pr_17938/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(MY,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),d(EY,"href","/docs/transformers/pr_17938/en/model_doc/deit#transformers.TFDeiTForImageClassification"),d(CY,"href","/docs/transformers/pr_17938/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),d(wY,"href","/docs/transformers/pr_17938/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),d(AY,"href","/docs/transformers/pr_17938/en/model_doc/resnet#transformers.TFResNetForImageClassification"),d(LY,"href","/docs/transformers/pr_17938/en/model_doc/swin#transformers.TFSwinForImageClassification"),d(yY,"href","/docs/transformers/pr_17938/en/model_doc/vit#transformers.TFViTForImageClassification"),d(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(TM,"id","transformers.TFAutoModelForMaskedLM"),d(TM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(TM,"href","#transformers.TFAutoModelForMaskedLM"),d(Fc,"class","relative group"),d(xY,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($Y,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(kY,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(SY,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(RY,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(PY,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(BY,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(IY,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(NY,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(qY,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(jY,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(DY,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(GY,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(OY,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(VY,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(XY,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(zY,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(WY,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(QY,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(HY,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(UY,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(JY,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(YY,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(XM,"id","transformers.TFAutoModelForSeq2SeqLM"),d(XM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(XM,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Ec,"class","relative group"),d(KY,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ZY,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(eK,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oK,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(rK,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(tK,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(aK,"href","/docs/transformers/pr_17938/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(nK,"href","/docs/transformers/pr_17938/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(sK,"href","/docs/transformers/pr_17938/en/model_doc/marian#transformers.TFMarianMTModel"),d(lK,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(iK,"href","/docs/transformers/pr_17938/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(dK,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(cK,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(t4,"id","transformers.TFAutoModelForSequenceClassification"),d(t4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(t4,"href","#transformers.TFAutoModelForSequenceClassification"),d(Ac,"class","relative group"),d(fK,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mK,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gK,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hK,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(pK,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(_K,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(uK,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(bK,"href","/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(vK,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(FK,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(TK,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(MK,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(EK,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(CK,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(wK,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(AK,"href","/docs/transformers/pr_17938/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(LK,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(yK,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(xK,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d($K,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(kK,"href","/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(SK,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(RK,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(PK,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(BK,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(IK,"href","/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(NK,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(qK,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(jK,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(S4,"id","transformers.TFAutoModelForMultipleChoice"),d(S4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(S4,"href","#transformers.TFAutoModelForMultipleChoice"),d(xc,"class","relative group"),d(DK,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(GK,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(OK,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(VK,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(XK,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(zK,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(WK,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(QK,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(HK,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(UK,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(JK,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(YK,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(KK,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(ZK,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(eZ,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(oZ,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(rZ,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(tZ,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(aZ,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(nZ,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(K4,"id","transformers.TFAutoModelForNextSentencePrediction"),d(K4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(K4,"href","#transformers.TFAutoModelForNextSentencePrediction"),d(Sc,"class","relative group"),d(sZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dZ,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),d(cZ,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),d(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tE,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(tE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(Bc,"class","relative group"),d(fZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hZ,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lE,"id","transformers.TFAutoModelForTokenClassification"),d(lE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lE,"href","#transformers.TFAutoModelForTokenClassification"),d(qc,"class","relative group"),d(pZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_Z,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bZ,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(vZ,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(FZ,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(TZ,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(MZ,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(EZ,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(CZ,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(wZ,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(AZ,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(LZ,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(yZ,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(xZ,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d($Z,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(kZ,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(SZ,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(RZ,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(PZ,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(BZ,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(IZ,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(NZ,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($E,"id","transformers.TFAutoModelForQuestionAnswering"),d($E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($E,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Gc,"class","relative group"),d(qZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(DZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(GZ,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(OZ,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(VZ,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(XZ,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(zZ,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(WZ,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(QZ,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(HZ,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(UZ,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(JZ,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(YZ,"href","/docs/transformers/pr_17938/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(KZ,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(ZZ,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(eee,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(oee,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(ree,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(tee,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(aee,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(nee,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(see,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ZE,"id","transformers.TFAutoModelForVision2Seq"),d(ZE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ZE,"href","#transformers.TFAutoModelForVision2Seq"),d(Xc,"class","relative group"),d(lee,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(iee,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(dee,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cee,"href","/docs/transformers/pr_17938/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(tC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Qc,"class","relative group"),d(fee,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mee,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gee,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hee,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lC,"id","transformers.FlaxAutoModel"),d(lC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lC,"href","#transformers.FlaxAutoModel"),d(Jc,"class","relative group"),d(pee,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_ee,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uee,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bee,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertModel"),d(vee,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartModel"),d(Fee,"href","/docs/transformers/pr_17938/en/model_doc/beit#transformers.FlaxBeitModel"),d(Tee,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertModel"),d(Mee,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(Eee,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(Cee,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(wee,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.FlaxCLIPModel"),d(Aee,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(Lee,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraModel"),d(yee,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(xee,"href","/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d($ee,"href","/docs/transformers/pr_17938/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(kee,"href","/docs/transformers/pr_17938/en/model_doc/longt5#transformers.FlaxLongT5Model"),d(See,"href","/docs/transformers/pr_17938/en/model_doc/marian#transformers.FlaxMarianModel"),d(Ree,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartModel"),d(Pee,"href","/docs/transformers/pr_17938/en/model_doc/mt5#transformers.FlaxMT5Model"),d(Bee,"href","/docs/transformers/pr_17938/en/model_doc/opt#transformers.FlaxOPTModel"),d(Iee,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(Nee,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(qee,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(jee,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.FlaxT5Model"),d(Dee,"href","/docs/transformers/pr_17938/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(Gee,"href","/docs/transformers/pr_17938/en/model_doc/vit#transformers.FlaxViTModel"),d(Oee,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(Vee,"href","/docs/transformers/pr_17938/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(Xee,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(NC,"id","transformers.FlaxAutoModelForCausalLM"),d(NC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(NC,"href","#transformers.FlaxAutoModelForCausalLM"),d(Zc,"class","relative group"),d(zee,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wee,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Qee,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Hee,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(Uee,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForCausalLM"),d(Jee,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),d(Yee,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),d(Kee,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(Zee,"href","/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(eoe,"href","/docs/transformers/pr_17938/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(ooe,"href","/docs/transformers/pr_17938/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),d(roe,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),d(toe,"href","/docs/transformers/pr_17938/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(JC,"id","transformers.FlaxAutoModelForPreTraining"),d(JC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(JC,"href","#transformers.FlaxAutoModelForPreTraining"),d(rf,"class","relative group"),d(aoe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(noe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(soe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(loe,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(ioe,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(doe,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(coe,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(foe,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(moe,"href","/docs/transformers/pr_17938/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),d(goe,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(hoe,"href","/docs/transformers/pr_17938/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(poe,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(_oe,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(uoe,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(boe,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(voe,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(m5,"id","transformers.FlaxAutoModelForMaskedLM"),d(m5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(m5,"href","#transformers.FlaxAutoModelForMaskedLM"),d(nf,"class","relative group"),d(Foe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Toe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Moe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Eoe,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(Coe,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(woe,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(Aoe,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(Loe,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(yoe,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(xoe,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d($oe,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(koe,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(Soe,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(w5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(w5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(w5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(df,"class","relative group"),d(Roe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Poe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Boe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ioe,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(Noe,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(qoe,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(joe,"href","/docs/transformers/pr_17938/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(Doe,"href","/docs/transformers/pr_17938/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),d(Goe,"href","/docs/transformers/pr_17938/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(Ooe,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(Voe,"href","/docs/transformers/pr_17938/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(Xoe,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(zoe,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(q5,"id","transformers.FlaxAutoModelForSequenceClassification"),d(q5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(q5,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(mf,"class","relative group"),d(Woe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qoe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Hoe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uoe,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(Joe,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(Yoe,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(Koe,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(Zoe,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(ere,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(ore,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(rre,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(tre,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(are,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Y5,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(Y5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Y5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(pf,"class","relative group"),d(nre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(sre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(lre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ire,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(dre,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(cre,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(fre,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(mre,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(gre,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(hre,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(pre,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(_re,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(ure,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(c0,"id","transformers.FlaxAutoModelForTokenClassification"),d(c0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(c0,"href","#transformers.FlaxAutoModelForTokenClassification"),d(bf,"class","relative group"),d(bre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Fre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tre,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(Mre,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(Ere,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(Cre,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(wre,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(Are,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(Lre,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(yre,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(T0,"id","transformers.FlaxAutoModelForMultipleChoice"),d(T0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(T0,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Tf,"class","relative group"),d(xre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($re,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(kre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Sre,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(Rre,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(Pre,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(Bre,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(Ire,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(Nre,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(qre,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(jre,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(S0,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(S0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(S0,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(Cf,"class","relative group"),d(Dre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Gre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Ore,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vre,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(I0,"id","transformers.FlaxAutoModelForImageClassification"),d(I0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(I0,"href","#transformers.FlaxAutoModelForImageClassification"),d(Lf,"class","relative group"),d(Xre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Wre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qre,"href","/docs/transformers/pr_17938/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(Hre,"href","/docs/transformers/pr_17938/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(G0,"id","transformers.FlaxAutoModelForVision2Seq"),d(G0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(G0,"href","#transformers.FlaxAutoModelForVision2Seq"),d($f,"class","relative group"),d(Ure,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Yre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Kre,"href","/docs/transformers/pr_17938/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(c,_,null),e(p,h),e(p,Co),e(Co,xi),b(f,If,u),b(f,lt,u),e(lt,$i),e(lt,ki),e(ki,d6),e(lt,Nf),b(f,Oe,u),b(f,Qe,u),e(Qe,Si),e(Qe,Pn),e(Pn,c6),e(Qe,Bn),e(Qe,In),e(In,f6),e(Qe,Ri),e(Qe,Nn),e(Nn,m6),e(Qe,Pi),b(f,qf,u),M(Sa,f,u),b(f,He,u),b(f,Ae,u),e(Ae,WS),e(Ae,Bi),e(Bi,QS),e(Ae,HS),b(f,wo,u),b(f,Ra,u),e(Ra,US),e(Ra,jf),e(jf,JS),e(Ra,JHe),b(f,BXe,u),b(f,Ii,u),e(Ii,Df),e(Df,Qae),M(g6,Qae,null),e(Ii,YHe),e(Ii,Hae),e(Hae,KHe),b(f,IXe,u),b(f,qn,u),e(qn,ZHe),e(qn,Uae),e(Uae,eUe),e(qn,oUe),e(qn,Jae),e(Jae,rUe),e(qn,tUe),b(f,NXe,u),M(h6,f,u),b(f,qXe,u),b(f,YS,u),e(YS,aUe),b(f,jXe,u),M(Gf,f,u),b(f,DXe,u),b(f,Ni,u),e(Ni,Of),e(Of,Yae),M(p6,Yae,null),e(Ni,nUe),e(Ni,Kae),e(Kae,sUe),b(f,GXe,u),b(f,Ao,u),M(_6,Ao,null),e(Ao,lUe),e(Ao,u6),e(u6,iUe),e(u6,KS),e(KS,dUe),e(u6,cUe),e(Ao,fUe),e(Ao,b6),e(b6,mUe),e(b6,Zae),e(Zae,gUe),e(b6,hUe),e(Ao,pUe),e(Ao,Lr),M(v6,Lr,null),e(Lr,_Ue),e(Lr,ene),e(ene,uUe),e(Lr,bUe),e(Lr,qi),e(qi,vUe),e(qi,one),e(one,FUe),e(qi,TUe),e(qi,rne),e(rne,MUe),e(qi,EUe),e(Lr,CUe),e(Lr,A),e(A,Vf),e(Vf,tne),e(tne,wUe),e(Vf,AUe),e(Vf,ZS),e(ZS,LUe),e(Vf,yUe),e(A,xUe),e(A,Xf),e(Xf,ane),e(ane,$Ue),e(Xf,kUe),e(Xf,eR),e(eR,SUe),e(Xf,RUe),e(A,PUe),e(A,zf),e(zf,nne),e(nne,BUe),e(zf,IUe),e(zf,oR),e(oR,NUe),e(zf,qUe),e(A,jUe),e(A,Wf),e(Wf,sne),e(sne,DUe),e(Wf,GUe),e(Wf,rR),e(rR,OUe),e(Wf,VUe),e(A,XUe),e(A,Qf),e(Qf,lne),e(lne,zUe),e(Qf,WUe),e(Qf,tR),e(tR,QUe),e(Qf,HUe),e(A,UUe),e(A,Hf),e(Hf,ine),e(ine,JUe),e(Hf,YUe),e(Hf,aR),e(aR,KUe),e(Hf,ZUe),e(A,eJe),e(A,Uf),e(Uf,dne),e(dne,oJe),e(Uf,rJe),e(Uf,nR),e(nR,tJe),e(Uf,aJe),e(A,nJe),e(A,Jf),e(Jf,cne),e(cne,sJe),e(Jf,lJe),e(Jf,sR),e(sR,iJe),e(Jf,dJe),e(A,cJe),e(A,Yf),e(Yf,fne),e(fne,fJe),e(Yf,mJe),e(Yf,lR),e(lR,gJe),e(Yf,hJe),e(A,pJe),e(A,Kf),e(Kf,mne),e(mne,_Je),e(Kf,uJe),e(Kf,iR),e(iR,bJe),e(Kf,vJe),e(A,FJe),e(A,Zf),e(Zf,gne),e(gne,TJe),e(Zf,MJe),e(Zf,dR),e(dR,EJe),e(Zf,CJe),e(A,wJe),e(A,em),e(em,hne),e(hne,AJe),e(em,LJe),e(em,cR),e(cR,yJe),e(em,xJe),e(A,$Je),e(A,om),e(om,pne),e(pne,kJe),e(om,SJe),e(om,fR),e(fR,RJe),e(om,PJe),e(A,BJe),e(A,rm),e(rm,_ne),e(_ne,IJe),e(rm,NJe),e(rm,mR),e(mR,qJe),e(rm,jJe),e(A,DJe),e(A,tm),e(tm,une),e(une,GJe),e(tm,OJe),e(tm,gR),e(gR,VJe),e(tm,XJe),e(A,zJe),e(A,am),e(am,bne),e(bne,WJe),e(am,QJe),e(am,hR),e(hR,HJe),e(am,UJe),e(A,JJe),e(A,nm),e(nm,vne),e(vne,YJe),e(nm,KJe),e(nm,pR),e(pR,ZJe),e(nm,eYe),e(A,oYe),e(A,sm),e(sm,Fne),e(Fne,rYe),e(sm,tYe),e(sm,_R),e(_R,aYe),e(sm,nYe),e(A,sYe),e(A,lm),e(lm,Tne),e(Tne,lYe),e(lm,iYe),e(lm,uR),e(uR,dYe),e(lm,cYe),e(A,fYe),e(A,im),e(im,Mne),e(Mne,mYe),e(im,gYe),e(im,bR),e(bR,hYe),e(im,pYe),e(A,_Ye),e(A,dm),e(dm,Ene),e(Ene,uYe),e(dm,bYe),e(dm,vR),e(vR,vYe),e(dm,FYe),e(A,TYe),e(A,cm),e(cm,Cne),e(Cne,MYe),e(cm,EYe),e(cm,FR),e(FR,CYe),e(cm,wYe),e(A,AYe),e(A,fm),e(fm,wne),e(wne,LYe),e(fm,yYe),e(fm,TR),e(TR,xYe),e(fm,$Ye),e(A,kYe),e(A,mm),e(mm,Ane),e(Ane,SYe),e(mm,RYe),e(mm,MR),e(MR,PYe),e(mm,BYe),e(A,IYe),e(A,gm),e(gm,Lne),e(Lne,NYe),e(gm,qYe),e(gm,ER),e(ER,jYe),e(gm,DYe),e(A,GYe),e(A,hm),e(hm,yne),e(yne,OYe),e(hm,VYe),e(hm,CR),e(CR,XYe),e(hm,zYe),e(A,WYe),e(A,pm),e(pm,xne),e(xne,QYe),e(pm,HYe),e(pm,wR),e(wR,UYe),e(pm,JYe),e(A,YYe),e(A,_m),e(_m,$ne),e($ne,KYe),e(_m,ZYe),e(_m,AR),e(AR,eKe),e(_m,oKe),e(A,rKe),e(A,um),e(um,kne),e(kne,tKe),e(um,aKe),e(um,LR),e(LR,nKe),e(um,sKe),e(A,lKe),e(A,bm),e(bm,Sne),e(Sne,iKe),e(bm,dKe),e(bm,yR),e(yR,cKe),e(bm,fKe),e(A,mKe),e(A,vm),e(vm,Rne),e(Rne,gKe),e(vm,hKe),e(vm,xR),e(xR,pKe),e(vm,_Ke),e(A,uKe),e(A,Fm),e(Fm,Pne),e(Pne,bKe),e(Fm,vKe),e(Fm,$R),e($R,FKe),e(Fm,TKe),e(A,MKe),e(A,Tm),e(Tm,Bne),e(Bne,EKe),e(Tm,CKe),e(Tm,kR),e(kR,wKe),e(Tm,AKe),e(A,LKe),e(A,Mm),e(Mm,Ine),e(Ine,yKe),e(Mm,xKe),e(Mm,SR),e(SR,$Ke),e(Mm,kKe),e(A,SKe),e(A,Em),e(Em,Nne),e(Nne,RKe),e(Em,PKe),e(Em,RR),e(RR,BKe),e(Em,IKe),e(A,NKe),e(A,Cm),e(Cm,qne),e(qne,qKe),e(Cm,jKe),e(Cm,PR),e(PR,DKe),e(Cm,GKe),e(A,OKe),e(A,wm),e(wm,jne),e(jne,VKe),e(wm,XKe),e(wm,BR),e(BR,zKe),e(wm,WKe),e(A,QKe),e(A,Am),e(Am,Dne),e(Dne,HKe),e(Am,UKe),e(Am,IR),e(IR,JKe),e(Am,YKe),e(A,KKe),e(A,Lm),e(Lm,Gne),e(Gne,ZKe),e(Lm,eZe),e(Lm,NR),e(NR,oZe),e(Lm,rZe),e(A,tZe),e(A,ym),e(ym,One),e(One,aZe),e(ym,nZe),e(ym,qR),e(qR,sZe),e(ym,lZe),e(A,iZe),e(A,xm),e(xm,Vne),e(Vne,dZe),e(xm,cZe),e(xm,jR),e(jR,fZe),e(xm,mZe),e(A,gZe),e(A,$m),e($m,Xne),e(Xne,hZe),e($m,pZe),e($m,DR),e(DR,_Ze),e($m,uZe),e(A,bZe),e(A,km),e(km,zne),e(zne,vZe),e(km,FZe),e(km,GR),e(GR,TZe),e(km,MZe),e(A,EZe),e(A,Sm),e(Sm,Wne),e(Wne,CZe),e(Sm,wZe),e(Sm,OR),e(OR,AZe),e(Sm,LZe),e(A,yZe),e(A,Rm),e(Rm,Qne),e(Qne,xZe),e(Rm,$Ze),e(Rm,VR),e(VR,kZe),e(Rm,SZe),e(A,RZe),e(A,Pm),e(Pm,Hne),e(Hne,PZe),e(Pm,BZe),e(Pm,XR),e(XR,IZe),e(Pm,NZe),e(A,qZe),e(A,Bm),e(Bm,Une),e(Une,jZe),e(Bm,DZe),e(Bm,zR),e(zR,GZe),e(Bm,OZe),e(A,VZe),e(A,Im),e(Im,Jne),e(Jne,XZe),e(Im,zZe),e(Im,WR),e(WR,WZe),e(Im,QZe),e(A,HZe),e(A,Nm),e(Nm,Yne),e(Yne,UZe),e(Nm,JZe),e(Nm,QR),e(QR,YZe),e(Nm,KZe),e(A,ZZe),e(A,qm),e(qm,Kne),e(Kne,eeo),e(qm,oeo),e(qm,HR),e(HR,reo),e(qm,teo),e(A,aeo),e(A,jm),e(jm,Zne),e(Zne,neo),e(jm,seo),e(jm,UR),e(UR,leo),e(jm,ieo),e(A,deo),e(A,Dm),e(Dm,ese),e(ese,ceo),e(Dm,feo),e(Dm,JR),e(JR,meo),e(Dm,geo),e(A,heo),e(A,Gm),e(Gm,ose),e(ose,peo),e(Gm,_eo),e(Gm,YR),e(YR,ueo),e(Gm,beo),e(A,veo),e(A,Om),e(Om,rse),e(rse,Feo),e(Om,Teo),e(Om,KR),e(KR,Meo),e(Om,Eeo),e(A,Ceo),e(A,Vm),e(Vm,tse),e(tse,weo),e(Vm,Aeo),e(Vm,ZR),e(ZR,Leo),e(Vm,yeo),e(A,xeo),e(A,Xm),e(Xm,ase),e(ase,$eo),e(Xm,keo),e(Xm,eP),e(eP,Seo),e(Xm,Reo),e(A,Peo),e(A,zm),e(zm,nse),e(nse,Beo),e(zm,Ieo),e(zm,oP),e(oP,Neo),e(zm,qeo),e(A,jeo),e(A,Wm),e(Wm,sse),e(sse,Deo),e(Wm,Geo),e(Wm,rP),e(rP,Oeo),e(Wm,Veo),e(A,Xeo),e(A,Qm),e(Qm,lse),e(lse,zeo),e(Qm,Weo),e(Qm,tP),e(tP,Qeo),e(Qm,Heo),e(A,Ueo),e(A,Hm),e(Hm,ise),e(ise,Jeo),e(Hm,Yeo),e(Hm,aP),e(aP,Keo),e(Hm,Zeo),e(A,eoo),e(A,Um),e(Um,dse),e(dse,ooo),e(Um,roo),e(Um,nP),e(nP,too),e(Um,aoo),e(A,noo),e(A,Jm),e(Jm,cse),e(cse,soo),e(Jm,loo),e(Jm,sP),e(sP,ioo),e(Jm,doo),e(A,coo),e(A,Ym),e(Ym,fse),e(fse,foo),e(Ym,moo),e(Ym,lP),e(lP,goo),e(Ym,hoo),e(A,poo),e(A,Km),e(Km,mse),e(mse,_oo),e(Km,uoo),e(Km,iP),e(iP,boo),e(Km,voo),e(A,Foo),e(A,Zm),e(Zm,gse),e(gse,Too),e(Zm,Moo),e(Zm,dP),e(dP,Eoo),e(Zm,Coo),e(A,woo),e(A,eg),e(eg,hse),e(hse,Aoo),e(eg,Loo),e(eg,cP),e(cP,yoo),e(eg,xoo),e(A,$oo),e(A,og),e(og,pse),e(pse,koo),e(og,Soo),e(og,fP),e(fP,Roo),e(og,Poo),e(A,Boo),e(A,rg),e(rg,_se),e(_se,Ioo),e(rg,Noo),e(rg,mP),e(mP,qoo),e(rg,joo),e(A,Doo),e(A,tg),e(tg,use),e(use,Goo),e(tg,Ooo),e(tg,gP),e(gP,Voo),e(tg,Xoo),e(A,zoo),e(A,ag),e(ag,bse),e(bse,Woo),e(ag,Qoo),e(ag,hP),e(hP,Hoo),e(ag,Uoo),e(A,Joo),e(A,ng),e(ng,vse),e(vse,Yoo),e(ng,Koo),e(ng,pP),e(pP,Zoo),e(ng,ero),e(A,oro),e(A,sg),e(sg,Fse),e(Fse,rro),e(sg,tro),e(sg,_P),e(_P,aro),e(sg,nro),e(A,sro),e(A,lg),e(lg,Tse),e(Tse,lro),e(lg,iro),e(lg,uP),e(uP,dro),e(lg,cro),e(A,fro),e(A,ig),e(ig,Mse),e(Mse,mro),e(ig,gro),e(ig,bP),e(bP,hro),e(ig,pro),e(A,_ro),e(A,dg),e(dg,Ese),e(Ese,uro),e(dg,bro),e(dg,vP),e(vP,vro),e(dg,Fro),e(A,Tro),e(A,cg),e(cg,Cse),e(Cse,Mro),e(cg,Ero),e(cg,FP),e(FP,Cro),e(cg,wro),e(A,Aro),e(A,fg),e(fg,wse),e(wse,Lro),e(fg,yro),e(fg,TP),e(TP,xro),e(fg,$ro),e(A,kro),e(A,mg),e(mg,Ase),e(Ase,Sro),e(mg,Rro),e(mg,MP),e(MP,Pro),e(mg,Bro),e(A,Iro),e(A,gg),e(gg,Lse),e(Lse,Nro),e(gg,qro),e(gg,EP),e(EP,jro),e(gg,Dro),e(A,Gro),e(A,hg),e(hg,yse),e(yse,Oro),e(hg,Vro),e(hg,CP),e(CP,Xro),e(hg,zro),e(A,Wro),e(A,pg),e(pg,xse),e(xse,Qro),e(pg,Hro),e(pg,wP),e(wP,Uro),e(pg,Jro),e(A,Yro),e(A,_g),e(_g,$se),e($se,Kro),e(_g,Zro),e(_g,AP),e(AP,eto),e(_g,oto),e(A,rto),e(A,ug),e(ug,kse),e(kse,tto),e(ug,ato),e(ug,LP),e(LP,nto),e(ug,sto),e(A,lto),e(A,bg),e(bg,Sse),e(Sse,ito),e(bg,dto),e(bg,yP),e(yP,cto),e(bg,fto),e(A,mto),e(A,vg),e(vg,Rse),e(Rse,gto),e(vg,hto),e(vg,xP),e(xP,pto),e(vg,_to),e(A,uto),e(A,Fg),e(Fg,Pse),e(Pse,bto),e(Fg,vto),e(Fg,$P),e($P,Fto),e(Fg,Tto),e(A,Mto),e(A,Tg),e(Tg,Bse),e(Bse,Eto),e(Tg,Cto),e(Tg,kP),e(kP,wto),e(Tg,Ato),e(A,Lto),e(A,Mg),e(Mg,Ise),e(Ise,yto),e(Mg,xto),e(Mg,SP),e(SP,$to),e(Mg,kto),e(A,Sto),e(A,Eg),e(Eg,Nse),e(Nse,Rto),e(Eg,Pto),e(Eg,RP),e(RP,Bto),e(Eg,Ito),e(A,Nto),e(A,Cg),e(Cg,qse),e(qse,qto),e(Cg,jto),e(Cg,PP),e(PP,Dto),e(Cg,Gto),e(A,Oto),e(A,wg),e(wg,jse),e(jse,Vto),e(wg,Xto),e(wg,BP),e(BP,zto),e(wg,Wto),e(A,Qto),e(A,Ag),e(Ag,Dse),e(Dse,Hto),e(Ag,Uto),e(Ag,IP),e(IP,Jto),e(Ag,Yto),e(A,Kto),e(A,Lg),e(Lg,Gse),e(Gse,Zto),e(Lg,eao),e(Lg,NP),e(NP,oao),e(Lg,rao),e(A,tao),e(A,yg),e(yg,Ose),e(Ose,aao),e(yg,nao),e(yg,qP),e(qP,sao),e(yg,lao),e(A,iao),e(A,xg),e(xg,Vse),e(Vse,dao),e(xg,cao),e(xg,jP),e(jP,fao),e(xg,mao),e(A,gao),e(A,$g),e($g,Xse),e(Xse,hao),e($g,pao),e($g,DP),e(DP,_ao),e($g,uao),e(A,bao),e(A,kg),e(kg,zse),e(zse,vao),e(kg,Fao),e(kg,GP),e(GP,Tao),e(kg,Mao),e(A,Eao),e(A,Sg),e(Sg,Wse),e(Wse,Cao),e(Sg,wao),e(Sg,OP),e(OP,Aao),e(Sg,Lao),e(A,yao),e(A,Rg),e(Rg,Qse),e(Qse,xao),e(Rg,$ao),e(Rg,VP),e(VP,kao),e(Rg,Sao),e(A,Rao),e(A,Pg),e(Pg,Hse),e(Hse,Pao),e(Pg,Bao),e(Pg,XP),e(XP,Iao),e(Pg,Nao),e(A,qao),e(A,Bg),e(Bg,Use),e(Use,jao),e(Bg,Dao),e(Bg,zP),e(zP,Gao),e(Bg,Oao),e(A,Vao),e(A,Ig),e(Ig,Jse),e(Jse,Xao),e(Ig,zao),e(Ig,WP),e(WP,Wao),e(Ig,Qao),e(A,Hao),e(A,Ng),e(Ng,Yse),e(Yse,Uao),e(Ng,Jao),e(Ng,QP),e(QP,Yao),e(Ng,Kao),e(A,Zao),e(A,qg),e(qg,Kse),e(Kse,eno),e(qg,ono),e(qg,HP),e(HP,rno),e(qg,tno),e(A,ano),e(A,jg),e(jg,Zse),e(Zse,nno),e(jg,sno),e(jg,UP),e(UP,lno),e(jg,ino),e(A,dno),e(A,Dg),e(Dg,ele),e(ele,cno),e(Dg,fno),e(Dg,JP),e(JP,mno),e(Dg,gno),e(A,hno),e(A,Gg),e(Gg,ole),e(ole,pno),e(Gg,_no),e(Gg,YP),e(YP,uno),e(Gg,bno),e(A,vno),e(A,Og),e(Og,rle),e(rle,Fno),e(Og,Tno),e(Og,KP),e(KP,Mno),e(Og,Eno),e(A,Cno),e(A,Vg),e(Vg,tle),e(tle,wno),e(Vg,Ano),e(Vg,ZP),e(ZP,Lno),e(Vg,yno),e(A,xno),e(A,Xg),e(Xg,ale),e(ale,$no),e(Xg,kno),e(Xg,eB),e(eB,Sno),e(Xg,Rno),e(A,Pno),e(A,zg),e(zg,nle),e(nle,Bno),e(zg,Ino),e(zg,oB),e(oB,Nno),e(zg,qno),e(A,jno),e(A,Wg),e(Wg,sle),e(sle,Dno),e(Wg,Gno),e(Wg,rB),e(rB,Ono),e(Wg,Vno),e(A,Xno),e(A,Qg),e(Qg,lle),e(lle,zno),e(Qg,Wno),e(Qg,tB),e(tB,Qno),e(Qg,Hno),e(A,Uno),e(A,Hg),e(Hg,ile),e(ile,Jno),e(Hg,Yno),e(Hg,aB),e(aB,Kno),e(Hg,Zno),e(A,eso),e(A,Ug),e(Ug,dle),e(dle,oso),e(Ug,rso),e(Ug,nB),e(nB,tso),e(Ug,aso),e(A,nso),e(A,Jg),e(Jg,cle),e(cle,sso),e(Jg,lso),e(Jg,sB),e(sB,iso),e(Jg,dso),e(A,cso),e(A,Yg),e(Yg,fle),e(fle,fso),e(Yg,mso),e(Yg,lB),e(lB,gso),e(Yg,hso),e(A,pso),e(A,Kg),e(Kg,mle),e(mle,_so),e(Kg,uso),e(Kg,iB),e(iB,bso),e(Kg,vso),e(A,Fso),e(A,Zg),e(Zg,gle),e(gle,Tso),e(Zg,Mso),e(Zg,dB),e(dB,Eso),e(Zg,Cso),e(Lr,wso),M(eh,Lr,null),e(Ao,Aso),e(Ao,oh),M(F6,oh,null),e(oh,Lso),e(oh,hle),e(hle,yso),b(f,OXe,u),b(f,ji,u),e(ji,rh),e(rh,ple),M(T6,ple,null),e(ji,xso),e(ji,_le),e(_le,$so),b(f,VXe,u),b(f,Lo,u),M(M6,Lo,null),e(Lo,kso),e(Lo,E6),e(E6,Sso),e(E6,cB),e(cB,Rso),e(E6,Pso),e(Lo,Bso),e(Lo,C6),e(C6,Iso),e(C6,ule),e(ule,Nso),e(C6,qso),e(Lo,jso),e(Lo,yr),M(w6,yr,null),e(yr,Dso),e(yr,ble),e(ble,Gso),e(yr,Oso),e(yr,Pa),e(Pa,Vso),e(Pa,vle),e(vle,Xso),e(Pa,zso),e(Pa,Fle),e(Fle,Wso),e(Pa,Qso),e(Pa,Tle),e(Tle,Hso),e(Pa,Uso),e(yr,Jso),e(yr,k),e(k,jn),e(jn,Mle),e(Mle,Yso),e(jn,Kso),e(jn,fB),e(fB,Zso),e(jn,elo),e(jn,mB),e(mB,olo),e(jn,rlo),e(k,tlo),e(k,Dn),e(Dn,Ele),e(Ele,alo),e(Dn,nlo),e(Dn,gB),e(gB,slo),e(Dn,llo),e(Dn,hB),e(hB,ilo),e(Dn,dlo),e(k,clo),e(k,Gn),e(Gn,Cle),e(Cle,flo),e(Gn,mlo),e(Gn,pB),e(pB,glo),e(Gn,hlo),e(Gn,_B),e(_B,plo),e(Gn,_lo),e(k,ulo),e(k,th),e(th,wle),e(wle,blo),e(th,vlo),e(th,uB),e(uB,Flo),e(th,Tlo),e(k,Mlo),e(k,On),e(On,Ale),e(Ale,Elo),e(On,Clo),e(On,bB),e(bB,wlo),e(On,Alo),e(On,vB),e(vB,Llo),e(On,ylo),e(k,xlo),e(k,ah),e(ah,Lle),e(Lle,$lo),e(ah,klo),e(ah,FB),e(FB,Slo),e(ah,Rlo),e(k,Plo),e(k,nh),e(nh,yle),e(yle,Blo),e(nh,Ilo),e(nh,TB),e(TB,Nlo),e(nh,qlo),e(k,jlo),e(k,sh),e(sh,xle),e(xle,Dlo),e(sh,Glo),e(sh,MB),e(MB,Olo),e(sh,Vlo),e(k,Xlo),e(k,Vn),e(Vn,$le),e($le,zlo),e(Vn,Wlo),e(Vn,EB),e(EB,Qlo),e(Vn,Hlo),e(Vn,CB),e(CB,Ulo),e(Vn,Jlo),e(k,Ylo),e(k,Xn),e(Xn,kle),e(kle,Klo),e(Xn,Zlo),e(Xn,wB),e(wB,eio),e(Xn,oio),e(Xn,AB),e(AB,rio),e(Xn,tio),e(k,aio),e(k,zn),e(zn,Sle),e(Sle,nio),e(zn,sio),e(zn,LB),e(LB,lio),e(zn,iio),e(zn,yB),e(yB,dio),e(zn,cio),e(k,fio),e(k,lh),e(lh,Rle),e(Rle,mio),e(lh,gio),e(lh,xB),e(xB,hio),e(lh,pio),e(k,_io),e(k,ih),e(ih,Ple),e(Ple,uio),e(ih,bio),e(ih,$B),e($B,vio),e(ih,Fio),e(k,Tio),e(k,dh),e(dh,Ble),e(Ble,Mio),e(dh,Eio),e(dh,kB),e(kB,Cio),e(dh,wio),e(k,Aio),e(k,Wn),e(Wn,Ile),e(Ile,Lio),e(Wn,yio),e(Wn,SB),e(SB,xio),e(Wn,$io),e(Wn,RB),e(RB,kio),e(Wn,Sio),e(k,Rio),e(k,ch),e(ch,Nle),e(Nle,Pio),e(ch,Bio),e(ch,PB),e(PB,Iio),e(ch,Nio),e(k,qio),e(k,Qn),e(Qn,qle),e(qle,jio),e(Qn,Dio),e(Qn,BB),e(BB,Gio),e(Qn,Oio),e(Qn,IB),e(IB,Vio),e(Qn,Xio),e(k,zio),e(k,Hn),e(Hn,jle),e(jle,Wio),e(Hn,Qio),e(Hn,NB),e(NB,Hio),e(Hn,Uio),e(Hn,qB),e(qB,Jio),e(Hn,Yio),e(k,Kio),e(k,Un),e(Un,Dle),e(Dle,Zio),e(Un,edo),e(Un,jB),e(jB,odo),e(Un,rdo),e(Un,DB),e(DB,tdo),e(Un,ado),e(k,ndo),e(k,Jn),e(Jn,Gle),e(Gle,sdo),e(Jn,ldo),e(Jn,GB),e(GB,ido),e(Jn,ddo),e(Jn,OB),e(OB,cdo),e(Jn,fdo),e(k,mdo),e(k,fh),e(fh,Ole),e(Ole,gdo),e(fh,hdo),e(fh,VB),e(VB,pdo),e(fh,_do),e(k,udo),e(k,Yn),e(Yn,Vle),e(Vle,bdo),e(Yn,vdo),e(Yn,XB),e(XB,Fdo),e(Yn,Tdo),e(Yn,zB),e(zB,Mdo),e(Yn,Edo),e(k,Cdo),e(k,Kn),e(Kn,Xle),e(Xle,wdo),e(Kn,Ado),e(Kn,WB),e(WB,Ldo),e(Kn,ydo),e(Kn,QB),e(QB,xdo),e(Kn,$do),e(k,kdo),e(k,Zn),e(Zn,zle),e(zle,Sdo),e(Zn,Rdo),e(Zn,HB),e(HB,Pdo),e(Zn,Bdo),e(Zn,UB),e(UB,Ido),e(Zn,Ndo),e(k,qdo),e(k,es),e(es,Wle),e(Wle,jdo),e(es,Ddo),e(es,JB),e(JB,Gdo),e(es,Odo),e(es,YB),e(YB,Vdo),e(es,Xdo),e(k,zdo),e(k,os),e(os,Qle),e(Qle,Wdo),e(os,Qdo),e(os,KB),e(KB,Hdo),e(os,Udo),e(os,ZB),e(ZB,Jdo),e(os,Ydo),e(k,Kdo),e(k,rs),e(rs,Hle),e(Hle,Zdo),e(rs,eco),e(rs,eI),e(eI,oco),e(rs,rco),e(rs,oI),e(oI,tco),e(rs,aco),e(k,nco),e(k,mh),e(mh,Ule),e(Ule,sco),e(mh,lco),e(mh,rI),e(rI,ico),e(mh,dco),e(k,cco),e(k,ts),e(ts,Jle),e(Jle,fco),e(ts,mco),e(ts,tI),e(tI,gco),e(ts,hco),e(ts,aI),e(aI,pco),e(ts,_co),e(k,uco),e(k,gh),e(gh,Yle),e(Yle,bco),e(gh,vco),e(gh,nI),e(nI,Fco),e(gh,Tco),e(k,Mco),e(k,as),e(as,Kle),e(Kle,Eco),e(as,Cco),e(as,sI),e(sI,wco),e(as,Aco),e(as,lI),e(lI,Lco),e(as,yco),e(k,xco),e(k,ns),e(ns,Zle),e(Zle,$co),e(ns,kco),e(ns,iI),e(iI,Sco),e(ns,Rco),e(ns,dI),e(dI,Pco),e(ns,Bco),e(k,Ico),e(k,ss),e(ss,eie),e(eie,Nco),e(ss,qco),e(ss,cI),e(cI,jco),e(ss,Dco),e(ss,fI),e(fI,Gco),e(ss,Oco),e(k,Vco),e(k,hh),e(hh,oie),e(oie,Xco),e(hh,zco),e(hh,mI),e(mI,Wco),e(hh,Qco),e(k,Hco),e(k,ls),e(ls,rie),e(rie,Uco),e(ls,Jco),e(ls,gI),e(gI,Yco),e(ls,Kco),e(ls,hI),e(hI,Zco),e(ls,efo),e(k,ofo),e(k,is),e(is,tie),e(tie,rfo),e(is,tfo),e(is,pI),e(pI,afo),e(is,nfo),e(is,_I),e(_I,sfo),e(is,lfo),e(k,ifo),e(k,ds),e(ds,aie),e(aie,dfo),e(ds,cfo),e(ds,uI),e(uI,ffo),e(ds,mfo),e(ds,bI),e(bI,gfo),e(ds,hfo),e(k,pfo),e(k,ph),e(ph,nie),e(nie,_fo),e(ph,ufo),e(ph,vI),e(vI,bfo),e(ph,vfo),e(k,Ffo),e(k,cs),e(cs,sie),e(sie,Tfo),e(cs,Mfo),e(cs,FI),e(FI,Efo),e(cs,Cfo),e(cs,TI),e(TI,wfo),e(cs,Afo),e(k,Lfo),e(k,fs),e(fs,lie),e(lie,yfo),e(fs,xfo),e(fs,MI),e(MI,$fo),e(fs,kfo),e(fs,EI),e(EI,Sfo),e(fs,Rfo),e(k,Pfo),e(k,ms),e(ms,iie),e(iie,Bfo),e(ms,Ifo),e(ms,CI),e(CI,Nfo),e(ms,qfo),e(ms,wI),e(wI,jfo),e(ms,Dfo),e(k,Gfo),e(k,gs),e(gs,die),e(die,Ofo),e(gs,Vfo),e(gs,AI),e(AI,Xfo),e(gs,zfo),e(gs,LI),e(LI,Wfo),e(gs,Qfo),e(k,Hfo),e(k,hs),e(hs,cie),e(cie,Ufo),e(hs,Jfo),e(hs,yI),e(yI,Yfo),e(hs,Kfo),e(hs,xI),e(xI,Zfo),e(hs,emo),e(k,omo),e(k,ps),e(ps,fie),e(fie,rmo),e(ps,tmo),e(ps,$I),e($I,amo),e(ps,nmo),e(ps,kI),e(kI,smo),e(ps,lmo),e(k,imo),e(k,_s),e(_s,mie),e(mie,dmo),e(_s,cmo),e(_s,SI),e(SI,fmo),e(_s,mmo),e(_s,RI),e(RI,gmo),e(_s,hmo),e(k,pmo),e(k,us),e(us,gie),e(gie,_mo),e(us,umo),e(us,PI),e(PI,bmo),e(us,vmo),e(us,BI),e(BI,Fmo),e(us,Tmo),e(k,Mmo),e(k,_h),e(_h,hie),e(hie,Emo),e(_h,Cmo),e(_h,II),e(II,wmo),e(_h,Amo),e(k,Lmo),e(k,bs),e(bs,pie),e(pie,ymo),e(bs,xmo),e(bs,NI),e(NI,$mo),e(bs,kmo),e(bs,qI),e(qI,Smo),e(bs,Rmo),e(k,Pmo),e(k,uh),e(uh,_ie),e(_ie,Bmo),e(uh,Imo),e(uh,jI),e(jI,Nmo),e(uh,qmo),e(k,jmo),e(k,bh),e(bh,uie),e(uie,Dmo),e(bh,Gmo),e(bh,DI),e(DI,Omo),e(bh,Vmo),e(k,Xmo),e(k,vs),e(vs,bie),e(bie,zmo),e(vs,Wmo),e(vs,GI),e(GI,Qmo),e(vs,Hmo),e(vs,OI),e(OI,Umo),e(vs,Jmo),e(k,Ymo),e(k,Fs),e(Fs,vie),e(vie,Kmo),e(Fs,Zmo),e(Fs,VI),e(VI,ego),e(Fs,ogo),e(Fs,XI),e(XI,rgo),e(Fs,tgo),e(k,ago),e(k,Ts),e(Ts,Fie),e(Fie,ngo),e(Ts,sgo),e(Ts,zI),e(zI,lgo),e(Ts,igo),e(Ts,WI),e(WI,dgo),e(Ts,cgo),e(k,fgo),e(k,vh),e(vh,Tie),e(Tie,mgo),e(vh,ggo),e(vh,QI),e(QI,hgo),e(vh,pgo),e(k,_go),e(k,Ms),e(Ms,Mie),e(Mie,ugo),e(Ms,bgo),e(Ms,HI),e(HI,vgo),e(Ms,Fgo),e(Ms,UI),e(UI,Tgo),e(Ms,Mgo),e(k,Ego),e(k,Es),e(Es,Eie),e(Eie,Cgo),e(Es,wgo),e(Es,JI),e(JI,Ago),e(Es,Lgo),e(Es,YI),e(YI,ygo),e(Es,xgo),e(k,$go),e(k,Cs),e(Cs,Cie),e(Cie,kgo),e(Cs,Sgo),e(Cs,KI),e(KI,Rgo),e(Cs,Pgo),e(Cs,ZI),e(ZI,Bgo),e(Cs,Igo),e(k,Ngo),e(k,ws),e(ws,wie),e(wie,qgo),e(ws,jgo),e(ws,eN),e(eN,Dgo),e(ws,Ggo),e(ws,oN),e(oN,Ogo),e(ws,Vgo),e(k,Xgo),e(k,As),e(As,Aie),e(Aie,zgo),e(As,Wgo),e(As,rN),e(rN,Qgo),e(As,Hgo),e(As,tN),e(tN,Ugo),e(As,Jgo),e(k,Ygo),e(k,Ls),e(Ls,Lie),e(Lie,Kgo),e(Ls,Zgo),e(Ls,aN),e(aN,eho),e(Ls,oho),e(Ls,nN),e(nN,rho),e(Ls,tho),e(k,aho),e(k,ys),e(ys,yie),e(yie,nho),e(ys,sho),e(ys,sN),e(sN,lho),e(ys,iho),e(ys,lN),e(lN,dho),e(ys,cho),e(k,fho),e(k,xs),e(xs,xie),e(xie,mho),e(xs,gho),e(xs,iN),e(iN,hho),e(xs,pho),e(xs,dN),e(dN,_ho),e(xs,uho),e(k,bho),e(k,Fh),e(Fh,$ie),e($ie,vho),e(Fh,Fho),e(Fh,cN),e(cN,Tho),e(Fh,Mho),e(k,Eho),e(k,$s),e($s,kie),e(kie,Cho),e($s,who),e($s,fN),e(fN,Aho),e($s,Lho),e($s,mN),e(mN,yho),e($s,xho),e(k,$ho),e(k,ks),e(ks,Sie),e(Sie,kho),e(ks,Sho),e(ks,gN),e(gN,Rho),e(ks,Pho),e(ks,hN),e(hN,Bho),e(ks,Iho),e(k,Nho),e(k,Th),e(Th,Rie),e(Rie,qho),e(Th,jho),e(Th,pN),e(pN,Dho),e(Th,Gho),e(k,Oho),e(k,Mh),e(Mh,Pie),e(Pie,Vho),e(Mh,Xho),e(Mh,_N),e(_N,zho),e(Mh,Who),e(k,Qho),e(k,Eh),e(Eh,Bie),e(Bie,Hho),e(Eh,Uho),e(Eh,uN),e(uN,Jho),e(Eh,Yho),e(k,Kho),e(k,Ch),e(Ch,Iie),e(Iie,Zho),e(Ch,epo),e(Ch,bN),e(bN,opo),e(Ch,rpo),e(k,tpo),e(k,Ss),e(Ss,Nie),e(Nie,apo),e(Ss,npo),e(Ss,vN),e(vN,spo),e(Ss,lpo),e(Ss,FN),e(FN,ipo),e(Ss,dpo),e(k,cpo),e(k,wh),e(wh,qie),e(qie,fpo),e(wh,mpo),e(wh,TN),e(TN,gpo),e(wh,hpo),e(k,ppo),e(k,Rs),e(Rs,jie),e(jie,_po),e(Rs,upo),e(Rs,MN),e(MN,bpo),e(Rs,vpo),e(Rs,EN),e(EN,Fpo),e(Rs,Tpo),e(k,Mpo),e(k,Ps),e(Ps,Die),e(Die,Epo),e(Ps,Cpo),e(Ps,CN),e(CN,wpo),e(Ps,Apo),e(Ps,wN),e(wN,Lpo),e(Ps,ypo),e(k,xpo),e(k,Bs),e(Bs,Gie),e(Gie,$po),e(Bs,kpo),e(Bs,AN),e(AN,Spo),e(Bs,Rpo),e(Bs,LN),e(LN,Ppo),e(Bs,Bpo),e(k,Ipo),e(k,Is),e(Is,Oie),e(Oie,Npo),e(Is,qpo),e(Is,yN),e(yN,jpo),e(Is,Dpo),e(Is,xN),e(xN,Gpo),e(Is,Opo),e(k,Vpo),e(k,Ns),e(Ns,Vie),e(Vie,Xpo),e(Ns,zpo),e(Ns,$N),e($N,Wpo),e(Ns,Qpo),e(Ns,kN),e(kN,Hpo),e(Ns,Upo),e(k,Jpo),e(k,qs),e(qs,Xie),e(Xie,Ypo),e(qs,Kpo),e(qs,SN),e(SN,Zpo),e(qs,e_o),e(qs,RN),e(RN,o_o),e(qs,r_o),e(k,t_o),e(k,Ah),e(Ah,zie),e(zie,a_o),e(Ah,n_o),e(Ah,PN),e(PN,s_o),e(Ah,l_o),e(k,i_o),e(k,Lh),e(Lh,Wie),e(Wie,d_o),e(Lh,c_o),e(Lh,BN),e(BN,f_o),e(Lh,m_o),e(k,g_o),e(k,js),e(js,Qie),e(Qie,h_o),e(js,p_o),e(js,IN),e(IN,__o),e(js,u_o),e(js,NN),e(NN,b_o),e(js,v_o),e(k,F_o),e(k,Ds),e(Ds,Hie),e(Hie,T_o),e(Ds,M_o),e(Ds,qN),e(qN,E_o),e(Ds,C_o),e(Ds,jN),e(jN,w_o),e(Ds,A_o),e(k,L_o),e(k,Gs),e(Gs,Uie),e(Uie,y_o),e(Gs,x_o),e(Gs,DN),e(DN,$_o),e(Gs,k_o),e(Gs,GN),e(GN,S_o),e(Gs,R_o),e(k,P_o),e(k,yh),e(yh,Jie),e(Jie,B_o),e(yh,I_o),e(yh,ON),e(ON,N_o),e(yh,q_o),e(k,j_o),e(k,xh),e(xh,Yie),e(Yie,D_o),e(xh,G_o),e(xh,VN),e(VN,O_o),e(xh,V_o),e(k,X_o),e(k,$h),e($h,Kie),e(Kie,z_o),e($h,W_o),e($h,XN),e(XN,Q_o),e($h,H_o),e(k,U_o),e(k,Os),e(Os,Zie),e(Zie,J_o),e(Os,Y_o),e(Os,zN),e(zN,K_o),e(Os,Z_o),e(Os,WN),e(WN,euo),e(Os,ouo),e(k,ruo),e(k,Vs),e(Vs,ede),e(ede,tuo),e(Vs,auo),e(Vs,QN),e(QN,nuo),e(Vs,suo),e(Vs,HN),e(HN,luo),e(Vs,iuo),e(k,duo),e(k,kh),e(kh,ode),e(ode,cuo),e(kh,fuo),e(kh,UN),e(UN,muo),e(kh,guo),e(k,huo),e(k,Sh),e(Sh,rde),e(rde,puo),e(Sh,_uo),e(Sh,JN),e(JN,uuo),e(Sh,buo),e(k,vuo),e(k,Rh),e(Rh,tde),e(tde,Fuo),e(Rh,Tuo),e(Rh,YN),e(YN,Muo),e(Rh,Euo),e(k,Cuo),e(k,Xs),e(Xs,ade),e(ade,wuo),e(Xs,Auo),e(Xs,KN),e(KN,Luo),e(Xs,yuo),e(Xs,ZN),e(ZN,xuo),e(Xs,$uo),e(k,kuo),e(k,Ph),e(Ph,nde),e(nde,Suo),e(Ph,Ruo),e(Ph,eq),e(eq,Puo),e(Ph,Buo),e(k,Iuo),e(k,Bh),e(Bh,sde),e(sde,Nuo),e(Bh,quo),e(Bh,oq),e(oq,juo),e(Bh,Duo),e(k,Guo),e(k,zs),e(zs,lde),e(lde,Ouo),e(zs,Vuo),e(zs,rq),e(rq,Xuo),e(zs,zuo),e(zs,tq),e(tq,Wuo),e(zs,Quo),e(k,Huo),e(k,Ws),e(Ws,ide),e(ide,Uuo),e(Ws,Juo),e(Ws,aq),e(aq,Yuo),e(Ws,Kuo),e(Ws,nq),e(nq,Zuo),e(Ws,e1o),e(k,o1o),e(k,Qs),e(Qs,dde),e(dde,r1o),e(Qs,t1o),e(Qs,sq),e(sq,a1o),e(Qs,n1o),e(Qs,lq),e(lq,s1o),e(Qs,l1o),e(k,i1o),e(k,Hs),e(Hs,cde),e(cde,d1o),e(Hs,c1o),e(Hs,iq),e(iq,f1o),e(Hs,m1o),e(Hs,dq),e(dq,g1o),e(Hs,h1o),e(yr,p1o),M(Ih,yr,null),e(Lo,_1o),e(Lo,Nh),M(A6,Nh,null),e(Nh,u1o),e(Nh,fde),e(fde,b1o),b(f,XXe,u),b(f,Di,u),e(Di,qh),e(qh,mde),M(L6,mde,null),e(Di,v1o),e(Di,gde),e(gde,F1o),b(f,zXe,u),b(f,yo,u),M(y6,yo,null),e(yo,T1o),e(yo,x6),e(x6,M1o),e(x6,cq),e(cq,E1o),e(x6,C1o),e(yo,w1o),e(yo,$6),e($6,A1o),e($6,hde),e(hde,L1o),e($6,y1o),e(yo,x1o),e(yo,Ue),M(k6,Ue,null),e(Ue,$1o),e(Ue,pde),e(pde,k1o),e(Ue,S1o),e(Ue,Ba),e(Ba,R1o),e(Ba,_de),e(_de,P1o),e(Ba,B1o),e(Ba,ude),e(ude,I1o),e(Ba,N1o),e(Ba,bde),e(bde,q1o),e(Ba,j1o),e(Ue,D1o),e(Ue,J),e(J,jh),e(jh,vde),e(vde,G1o),e(jh,O1o),e(jh,fq),e(fq,V1o),e(jh,X1o),e(J,z1o),e(J,Dh),e(Dh,Fde),e(Fde,W1o),e(Dh,Q1o),e(Dh,mq),e(mq,H1o),e(Dh,U1o),e(J,J1o),e(J,Gh),e(Gh,Tde),e(Tde,Y1o),e(Gh,K1o),e(Gh,gq),e(gq,Z1o),e(Gh,e2o),e(J,o2o),e(J,Oh),e(Oh,Mde),e(Mde,r2o),e(Oh,t2o),e(Oh,hq),e(hq,a2o),e(Oh,n2o),e(J,s2o),e(J,Vh),e(Vh,Ede),e(Ede,l2o),e(Vh,i2o),e(Vh,pq),e(pq,d2o),e(Vh,c2o),e(J,f2o),e(J,Xh),e(Xh,Cde),e(Cde,m2o),e(Xh,g2o),e(Xh,_q),e(_q,h2o),e(Xh,p2o),e(J,_2o),e(J,zh),e(zh,wde),e(wde,u2o),e(zh,b2o),e(zh,uq),e(uq,v2o),e(zh,F2o),e(J,T2o),e(J,Wh),e(Wh,Ade),e(Ade,M2o),e(Wh,E2o),e(Wh,bq),e(bq,C2o),e(Wh,w2o),e(J,A2o),e(J,Qh),e(Qh,Lde),e(Lde,L2o),e(Qh,y2o),e(Qh,vq),e(vq,x2o),e(Qh,$2o),e(J,k2o),e(J,Hh),e(Hh,yde),e(yde,S2o),e(Hh,R2o),e(Hh,Fq),e(Fq,P2o),e(Hh,B2o),e(J,I2o),e(J,Uh),e(Uh,xde),e(xde,N2o),e(Uh,q2o),e(Uh,Tq),e(Tq,j2o),e(Uh,D2o),e(J,G2o),e(J,Jh),e(Jh,$de),e($de,O2o),e(Jh,V2o),e(Jh,Mq),e(Mq,X2o),e(Jh,z2o),e(J,W2o),e(J,Yh),e(Yh,kde),e(kde,Q2o),e(Yh,H2o),e(Yh,Eq),e(Eq,U2o),e(Yh,J2o),e(J,Y2o),e(J,Kh),e(Kh,Sde),e(Sde,K2o),e(Kh,Z2o),e(Kh,Cq),e(Cq,ebo),e(Kh,obo),e(J,rbo),e(J,Zh),e(Zh,Rde),e(Rde,tbo),e(Zh,abo),e(Zh,wq),e(wq,nbo),e(Zh,sbo),e(J,lbo),e(J,ep),e(ep,Pde),e(Pde,ibo),e(ep,dbo),e(ep,Aq),e(Aq,cbo),e(ep,fbo),e(J,mbo),e(J,op),e(op,Bde),e(Bde,gbo),e(op,hbo),e(op,Lq),e(Lq,pbo),e(op,_bo),e(J,ubo),e(J,rp),e(rp,Ide),e(Ide,bbo),e(rp,vbo),e(rp,yq),e(yq,Fbo),e(rp,Tbo),e(J,Mbo),e(J,tp),e(tp,Nde),e(Nde,Ebo),e(tp,Cbo),e(tp,xq),e(xq,wbo),e(tp,Abo),e(J,Lbo),e(J,ap),e(ap,qde),e(qde,ybo),e(ap,xbo),e(ap,$q),e($q,$bo),e(ap,kbo),e(J,Sbo),e(J,np),e(np,jde),e(jde,Rbo),e(np,Pbo),e(np,kq),e(kq,Bbo),e(np,Ibo),e(J,Nbo),e(J,sp),e(sp,Dde),e(Dde,qbo),e(sp,jbo),e(sp,Sq),e(Sq,Dbo),e(sp,Gbo),e(J,Obo),e(J,lp),e(lp,Gde),e(Gde,Vbo),e(lp,Xbo),e(lp,Rq),e(Rq,zbo),e(lp,Wbo),e(J,Qbo),e(J,ip),e(ip,Ode),e(Ode,Hbo),e(ip,Ubo),e(ip,Pq),e(Pq,Jbo),e(ip,Ybo),e(J,Kbo),e(J,dp),e(dp,Vde),e(Vde,Zbo),e(dp,e3o),e(dp,Bq),e(Bq,o3o),e(dp,r3o),e(J,t3o),e(J,cp),e(cp,Xde),e(Xde,a3o),e(cp,n3o),e(cp,Iq),e(Iq,s3o),e(cp,l3o),e(J,i3o),e(J,fp),e(fp,zde),e(zde,d3o),e(fp,c3o),e(fp,Nq),e(Nq,f3o),e(fp,m3o),e(J,g3o),e(J,mp),e(mp,Wde),e(Wde,h3o),e(mp,p3o),e(mp,qq),e(qq,_3o),e(mp,u3o),e(J,b3o),e(J,gp),e(gp,Qde),e(Qde,v3o),e(gp,F3o),e(gp,jq),e(jq,T3o),e(gp,M3o),e(J,E3o),e(J,hp),e(hp,Hde),e(Hde,C3o),e(hp,w3o),e(hp,Dq),e(Dq,A3o),e(hp,L3o),e(J,y3o),e(J,pp),e(pp,Ude),e(Ude,x3o),e(pp,$3o),e(pp,Gq),e(Gq,k3o),e(pp,S3o),e(J,R3o),e(J,_p),e(_p,Jde),e(Jde,P3o),e(_p,B3o),e(_p,Oq),e(Oq,I3o),e(_p,N3o),e(J,q3o),e(J,up),e(up,Yde),e(Yde,j3o),e(up,D3o),e(up,Vq),e(Vq,G3o),e(up,O3o),e(J,V3o),e(J,bp),e(bp,Kde),e(Kde,X3o),e(bp,z3o),e(bp,Xq),e(Xq,W3o),e(bp,Q3o),e(J,H3o),e(J,vp),e(vp,Zde),e(Zde,U3o),e(vp,J3o),e(vp,zq),e(zq,Y3o),e(vp,K3o),e(Ue,Z3o),M(Fp,Ue,null),e(Ue,evo),M(Tp,Ue,null),e(yo,ovo),e(yo,Mp),M(S6,Mp,null),e(Mp,rvo),e(Mp,ece),e(ece,tvo),b(f,WXe,u),b(f,Gi,u),e(Gi,Ep),e(Ep,oce),M(R6,oce,null),e(Gi,avo),e(Gi,rce),e(rce,nvo),b(f,QXe,u),b(f,xo,u),M(P6,xo,null),e(xo,svo),e(xo,B6),e(B6,lvo),e(B6,Wq),e(Wq,ivo),e(B6,dvo),e(xo,cvo),e(xo,I6),e(I6,fvo),e(I6,tce),e(tce,mvo),e(I6,gvo),e(xo,hvo),e(xo,Je),M(N6,Je,null),e(Je,pvo),e(Je,ace),e(ace,_vo),e(Je,uvo),e(Je,Oi),e(Oi,bvo),e(Oi,nce),e(nce,vvo),e(Oi,Fvo),e(Oi,sce),e(sce,Tvo),e(Oi,Mvo),e(Je,Evo),e(Je,fe),e(fe,Cp),e(Cp,lce),e(lce,Cvo),e(Cp,wvo),e(Cp,Qq),e(Qq,Avo),e(Cp,Lvo),e(fe,yvo),e(fe,wp),e(wp,ice),e(ice,xvo),e(wp,$vo),e(wp,Hq),e(Hq,kvo),e(wp,Svo),e(fe,Rvo),e(fe,Ap),e(Ap,dce),e(dce,Pvo),e(Ap,Bvo),e(Ap,Uq),e(Uq,Ivo),e(Ap,Nvo),e(fe,qvo),e(fe,Lp),e(Lp,cce),e(cce,jvo),e(Lp,Dvo),e(Lp,Jq),e(Jq,Gvo),e(Lp,Ovo),e(fe,Vvo),e(fe,yp),e(yp,fce),e(fce,Xvo),e(yp,zvo),e(yp,Yq),e(Yq,Wvo),e(yp,Qvo),e(fe,Hvo),e(fe,xp),e(xp,mce),e(mce,Uvo),e(xp,Jvo),e(xp,Kq),e(Kq,Yvo),e(xp,Kvo),e(fe,Zvo),e(fe,$p),e($p,gce),e(gce,eFo),e($p,oFo),e($p,Zq),e(Zq,rFo),e($p,tFo),e(fe,aFo),e(fe,kp),e(kp,hce),e(hce,nFo),e(kp,sFo),e(kp,ej),e(ej,lFo),e(kp,iFo),e(fe,dFo),e(fe,Sp),e(Sp,pce),e(pce,cFo),e(Sp,fFo),e(Sp,oj),e(oj,mFo),e(Sp,gFo),e(fe,hFo),e(fe,Rp),e(Rp,_ce),e(_ce,pFo),e(Rp,_Fo),e(Rp,rj),e(rj,uFo),e(Rp,bFo),e(fe,vFo),e(fe,Pp),e(Pp,uce),e(uce,FFo),e(Pp,TFo),e(Pp,tj),e(tj,MFo),e(Pp,EFo),e(fe,CFo),e(fe,Bp),e(Bp,bce),e(bce,wFo),e(Bp,AFo),e(Bp,aj),e(aj,LFo),e(Bp,yFo),e(fe,xFo),e(fe,Ip),e(Ip,vce),e(vce,$Fo),e(Ip,kFo),e(Ip,nj),e(nj,SFo),e(Ip,RFo),e(fe,PFo),e(fe,Np),e(Np,Fce),e(Fce,BFo),e(Np,IFo),e(Np,sj),e(sj,NFo),e(Np,qFo),e(fe,jFo),e(fe,qp),e(qp,Tce),e(Tce,DFo),e(qp,GFo),e(qp,lj),e(lj,OFo),e(qp,VFo),e(fe,XFo),e(fe,jp),e(jp,Mce),e(Mce,zFo),e(jp,WFo),e(jp,ij),e(ij,QFo),e(jp,HFo),e(fe,UFo),e(fe,Dp),e(Dp,Ece),e(Ece,JFo),e(Dp,YFo),e(Dp,dj),e(dj,KFo),e(Dp,ZFo),e(fe,eTo),e(fe,Gp),e(Gp,Cce),e(Cce,oTo),e(Gp,rTo),e(Gp,cj),e(cj,tTo),e(Gp,aTo),e(fe,nTo),e(fe,Op),e(Op,wce),e(wce,sTo),e(Op,lTo),e(Op,fj),e(fj,iTo),e(Op,dTo),e(Je,cTo),M(Vp,Je,null),e(Je,fTo),M(Xp,Je,null),e(xo,mTo),e(xo,zp),M(q6,zp,null),e(zp,gTo),e(zp,Ace),e(Ace,hTo),b(f,HXe,u),b(f,Vi,u),e(Vi,Wp),e(Wp,Lce),M(j6,Lce,null),e(Vi,pTo),e(Vi,yce),e(yce,_To),b(f,UXe,u),b(f,$o,u),M(D6,$o,null),e($o,uTo),e($o,Xi),e(Xi,bTo),e(Xi,mj),e(mj,vTo),e(Xi,FTo),e(Xi,gj),e(gj,TTo),e(Xi,MTo),e($o,ETo),e($o,G6),e(G6,CTo),e(G6,xce),e(xce,wTo),e(G6,ATo),e($o,LTo),e($o,it),M(O6,it,null),e(it,yTo),e(it,$ce),e($ce,xTo),e(it,$To),e(it,zi),e(zi,kTo),e(zi,kce),e(kce,STo),e(zi,RTo),e(zi,hj),e(hj,PTo),e(zi,BTo),e(it,ITo),M(Qp,it,null),e($o,NTo),e($o,Ye),M(V6,Ye,null),e(Ye,qTo),e(Ye,Sce),e(Sce,jTo),e(Ye,DTo),e(Ye,Ia),e(Ia,GTo),e(Ia,Rce),e(Rce,OTo),e(Ia,VTo),e(Ia,Pce),e(Pce,XTo),e(Ia,zTo),e(Ia,Bce),e(Bce,WTo),e(Ia,QTo),e(Ye,HTo),e(Ye,y),e(y,Hp),e(Hp,Ice),e(Ice,UTo),e(Hp,JTo),e(Hp,pj),e(pj,YTo),e(Hp,KTo),e(y,ZTo),e(y,Up),e(Up,Nce),e(Nce,e7o),e(Up,o7o),e(Up,_j),e(_j,r7o),e(Up,t7o),e(y,a7o),e(y,Jp),e(Jp,qce),e(qce,n7o),e(Jp,s7o),e(Jp,uj),e(uj,l7o),e(Jp,i7o),e(y,d7o),e(y,Yp),e(Yp,jce),e(jce,c7o),e(Yp,f7o),e(Yp,bj),e(bj,m7o),e(Yp,g7o),e(y,h7o),e(y,Kp),e(Kp,Dce),e(Dce,p7o),e(Kp,_7o),e(Kp,vj),e(vj,u7o),e(Kp,b7o),e(y,v7o),e(y,Zp),e(Zp,Gce),e(Gce,F7o),e(Zp,T7o),e(Zp,Fj),e(Fj,M7o),e(Zp,E7o),e(y,C7o),e(y,e_),e(e_,Oce),e(Oce,w7o),e(e_,A7o),e(e_,Tj),e(Tj,L7o),e(e_,y7o),e(y,x7o),e(y,o_),e(o_,Vce),e(Vce,$7o),e(o_,k7o),e(o_,Mj),e(Mj,S7o),e(o_,R7o),e(y,P7o),e(y,r_),e(r_,Xce),e(Xce,B7o),e(r_,I7o),e(r_,Ej),e(Ej,N7o),e(r_,q7o),e(y,j7o),e(y,t_),e(t_,zce),e(zce,D7o),e(t_,G7o),e(t_,Cj),e(Cj,O7o),e(t_,V7o),e(y,X7o),e(y,a_),e(a_,Wce),e(Wce,z7o),e(a_,W7o),e(a_,wj),e(wj,Q7o),e(a_,H7o),e(y,U7o),e(y,n_),e(n_,Qce),e(Qce,J7o),e(n_,Y7o),e(n_,Aj),e(Aj,K7o),e(n_,Z7o),e(y,e8o),e(y,s_),e(s_,Hce),e(Hce,o8o),e(s_,r8o),e(s_,Lj),e(Lj,t8o),e(s_,a8o),e(y,n8o),e(y,l_),e(l_,Uce),e(Uce,s8o),e(l_,l8o),e(l_,yj),e(yj,i8o),e(l_,d8o),e(y,c8o),e(y,i_),e(i_,Jce),e(Jce,f8o),e(i_,m8o),e(i_,xj),e(xj,g8o),e(i_,h8o),e(y,p8o),e(y,d_),e(d_,Yce),e(Yce,_8o),e(d_,u8o),e(d_,$j),e($j,b8o),e(d_,v8o),e(y,F8o),e(y,c_),e(c_,Kce),e(Kce,T8o),e(c_,M8o),e(c_,kj),e(kj,E8o),e(c_,C8o),e(y,w8o),e(y,f_),e(f_,Zce),e(Zce,A8o),e(f_,L8o),e(f_,Sj),e(Sj,y8o),e(f_,x8o),e(y,$8o),e(y,m_),e(m_,efe),e(efe,k8o),e(m_,S8o),e(m_,Rj),e(Rj,R8o),e(m_,P8o),e(y,B8o),e(y,g_),e(g_,ofe),e(ofe,I8o),e(g_,N8o),e(g_,Pj),e(Pj,q8o),e(g_,j8o),e(y,D8o),e(y,h_),e(h_,rfe),e(rfe,G8o),e(h_,O8o),e(h_,Bj),e(Bj,V8o),e(h_,X8o),e(y,z8o),e(y,p_),e(p_,tfe),e(tfe,W8o),e(p_,Q8o),e(p_,Ij),e(Ij,H8o),e(p_,U8o),e(y,J8o),e(y,__),e(__,afe),e(afe,Y8o),e(__,K8o),e(__,Nj),e(Nj,Z8o),e(__,e9o),e(y,o9o),e(y,u_),e(u_,nfe),e(nfe,r9o),e(u_,t9o),e(u_,qj),e(qj,a9o),e(u_,n9o),e(y,s9o),e(y,b_),e(b_,sfe),e(sfe,l9o),e(b_,i9o),e(b_,jj),e(jj,d9o),e(b_,c9o),e(y,f9o),e(y,v_),e(v_,lfe),e(lfe,m9o),e(v_,g9o),e(v_,Dj),e(Dj,h9o),e(v_,p9o),e(y,_9o),e(y,F_),e(F_,ife),e(ife,u9o),e(F_,b9o),e(F_,Gj),e(Gj,v9o),e(F_,F9o),e(y,T9o),e(y,T_),e(T_,dfe),e(dfe,M9o),e(T_,E9o),e(T_,Oj),e(Oj,C9o),e(T_,w9o),e(y,A9o),e(y,M_),e(M_,cfe),e(cfe,L9o),e(M_,y9o),e(M_,Vj),e(Vj,x9o),e(M_,$9o),e(y,k9o),e(y,E_),e(E_,ffe),e(ffe,S9o),e(E_,R9o),e(E_,Xj),e(Xj,P9o),e(E_,B9o),e(y,I9o),e(y,C_),e(C_,mfe),e(mfe,N9o),e(C_,q9o),e(C_,zj),e(zj,j9o),e(C_,D9o),e(y,G9o),e(y,w_),e(w_,gfe),e(gfe,O9o),e(w_,V9o),e(w_,Wj),e(Wj,X9o),e(w_,z9o),e(y,W9o),e(y,A_),e(A_,hfe),e(hfe,Q9o),e(A_,H9o),e(A_,Qj),e(Qj,U9o),e(A_,J9o),e(y,Y9o),e(y,L_),e(L_,pfe),e(pfe,K9o),e(L_,Z9o),e(L_,Hj),e(Hj,eMo),e(L_,oMo),e(y,rMo),e(y,Us),e(Us,_fe),e(_fe,tMo),e(Us,aMo),e(Us,Uj),e(Uj,nMo),e(Us,sMo),e(Us,Jj),e(Jj,lMo),e(Us,iMo),e(y,dMo),e(y,y_),e(y_,ufe),e(ufe,cMo),e(y_,fMo),e(y_,Yj),e(Yj,mMo),e(y_,gMo),e(y,hMo),e(y,x_),e(x_,bfe),e(bfe,pMo),e(x_,_Mo),e(x_,Kj),e(Kj,uMo),e(x_,bMo),e(y,vMo),e(y,$_),e($_,vfe),e(vfe,FMo),e($_,TMo),e($_,Zj),e(Zj,MMo),e($_,EMo),e(y,CMo),e(y,k_),e(k_,Ffe),e(Ffe,wMo),e(k_,AMo),e(k_,eD),e(eD,LMo),e(k_,yMo),e(y,xMo),e(y,S_),e(S_,Tfe),e(Tfe,$Mo),e(S_,kMo),e(S_,oD),e(oD,SMo),e(S_,RMo),e(y,PMo),e(y,R_),e(R_,Mfe),e(Mfe,BMo),e(R_,IMo),e(R_,rD),e(rD,NMo),e(R_,qMo),e(y,jMo),e(y,P_),e(P_,Efe),e(Efe,DMo),e(P_,GMo),e(P_,tD),e(tD,OMo),e(P_,VMo),e(y,XMo),e(y,B_),e(B_,Cfe),e(Cfe,zMo),e(B_,WMo),e(B_,aD),e(aD,QMo),e(B_,HMo),e(y,UMo),e(y,I_),e(I_,wfe),e(wfe,JMo),e(I_,YMo),e(I_,nD),e(nD,KMo),e(I_,ZMo),e(y,e4o),e(y,N_),e(N_,Afe),e(Afe,o4o),e(N_,r4o),e(N_,sD),e(sD,t4o),e(N_,a4o),e(y,n4o),e(y,q_),e(q_,Lfe),e(Lfe,s4o),e(q_,l4o),e(q_,lD),e(lD,i4o),e(q_,d4o),e(y,c4o),e(y,j_),e(j_,yfe),e(yfe,f4o),e(j_,m4o),e(j_,iD),e(iD,g4o),e(j_,h4o),e(y,p4o),e(y,D_),e(D_,xfe),e(xfe,_4o),e(D_,u4o),e(D_,dD),e(dD,b4o),e(D_,v4o),e(y,F4o),e(y,G_),e(G_,$fe),e($fe,T4o),e(G_,M4o),e(G_,cD),e(cD,E4o),e(G_,C4o),e(y,w4o),e(y,O_),e(O_,kfe),e(kfe,A4o),e(O_,L4o),e(O_,fD),e(fD,y4o),e(O_,x4o),e(y,$4o),e(y,V_),e(V_,Sfe),e(Sfe,k4o),e(V_,S4o),e(V_,mD),e(mD,R4o),e(V_,P4o),e(y,B4o),e(y,X_),e(X_,Rfe),e(Rfe,I4o),e(X_,N4o),e(X_,gD),e(gD,q4o),e(X_,j4o),e(y,D4o),e(y,z_),e(z_,Pfe),e(Pfe,G4o),e(z_,O4o),e(z_,hD),e(hD,V4o),e(z_,X4o),e(y,z4o),e(y,W_),e(W_,Bfe),e(Bfe,W4o),e(W_,Q4o),e(W_,pD),e(pD,H4o),e(W_,U4o),e(y,J4o),e(y,Q_),e(Q_,Ife),e(Ife,Y4o),e(Q_,K4o),e(Q_,_D),e(_D,Z4o),e(Q_,eEo),e(y,oEo),e(y,H_),e(H_,Nfe),e(Nfe,rEo),e(H_,tEo),e(H_,uD),e(uD,aEo),e(H_,nEo),e(y,sEo),e(y,U_),e(U_,qfe),e(qfe,lEo),e(U_,iEo),e(U_,bD),e(bD,dEo),e(U_,cEo),e(y,fEo),e(y,J_),e(J_,jfe),e(jfe,mEo),e(J_,gEo),e(J_,vD),e(vD,hEo),e(J_,pEo),e(y,_Eo),e(y,Y_),e(Y_,Dfe),e(Dfe,uEo),e(Y_,bEo),e(Y_,FD),e(FD,vEo),e(Y_,FEo),e(y,TEo),e(y,K_),e(K_,Gfe),e(Gfe,MEo),e(K_,EEo),e(K_,TD),e(TD,CEo),e(K_,wEo),e(y,AEo),e(y,Z_),e(Z_,Ofe),e(Ofe,LEo),e(Z_,yEo),e(Z_,MD),e(MD,xEo),e(Z_,$Eo),e(y,kEo),e(y,eu),e(eu,Vfe),e(Vfe,SEo),e(eu,REo),e(eu,ED),e(ED,PEo),e(eu,BEo),e(y,IEo),e(y,ou),e(ou,Xfe),e(Xfe,NEo),e(ou,qEo),e(ou,CD),e(CD,jEo),e(ou,DEo),e(y,GEo),e(y,ru),e(ru,zfe),e(zfe,OEo),e(ru,VEo),e(ru,wD),e(wD,XEo),e(ru,zEo),e(y,WEo),e(y,tu),e(tu,Wfe),e(Wfe,QEo),e(tu,HEo),e(tu,AD),e(AD,UEo),e(tu,JEo),e(y,YEo),e(y,au),e(au,Qfe),e(Qfe,KEo),e(au,ZEo),e(au,LD),e(LD,eCo),e(au,oCo),e(y,rCo),e(y,nu),e(nu,Hfe),e(Hfe,tCo),e(nu,aCo),e(nu,yD),e(yD,nCo),e(nu,sCo),e(y,lCo),e(y,su),e(su,Ufe),e(Ufe,iCo),e(su,dCo),e(su,xD),e(xD,cCo),e(su,fCo),e(y,mCo),e(y,lu),e(lu,Jfe),e(Jfe,gCo),e(lu,hCo),e(lu,$D),e($D,pCo),e(lu,_Co),e(y,uCo),e(y,iu),e(iu,Yfe),e(Yfe,bCo),e(iu,vCo),e(iu,kD),e(kD,FCo),e(iu,TCo),e(y,MCo),e(y,du),e(du,Kfe),e(Kfe,ECo),e(du,CCo),e(du,SD),e(SD,wCo),e(du,ACo),e(y,LCo),e(y,cu),e(cu,Zfe),e(Zfe,yCo),e(cu,xCo),e(cu,RD),e(RD,$Co),e(cu,kCo),e(y,SCo),e(y,fu),e(fu,eme),e(eme,RCo),e(fu,PCo),e(fu,PD),e(PD,BCo),e(fu,ICo),e(y,NCo),e(y,mu),e(mu,ome),e(ome,qCo),e(mu,jCo),e(mu,BD),e(BD,DCo),e(mu,GCo),e(y,OCo),e(y,gu),e(gu,rme),e(rme,VCo),e(gu,XCo),e(gu,ID),e(ID,zCo),e(gu,WCo),e(y,QCo),e(y,hu),e(hu,tme),e(tme,HCo),e(hu,UCo),e(hu,ND),e(ND,JCo),e(hu,YCo),e(y,KCo),e(y,pu),e(pu,ame),e(ame,ZCo),e(pu,e5o),e(pu,qD),e(qD,o5o),e(pu,r5o),e(y,t5o),e(y,_u),e(_u,nme),e(nme,a5o),e(_u,n5o),e(_u,jD),e(jD,s5o),e(_u,l5o),e(y,i5o),e(y,uu),e(uu,sme),e(sme,d5o),e(uu,c5o),e(uu,DD),e(DD,f5o),e(uu,m5o),e(y,g5o),e(y,bu),e(bu,lme),e(lme,h5o),e(bu,p5o),e(bu,GD),e(GD,_5o),e(bu,u5o),e(y,b5o),e(y,vu),e(vu,ime),e(ime,v5o),e(vu,F5o),e(vu,OD),e(OD,T5o),e(vu,M5o),e(y,E5o),e(y,Fu),e(Fu,dme),e(dme,C5o),e(Fu,w5o),e(Fu,VD),e(VD,A5o),e(Fu,L5o),e(y,y5o),e(y,Tu),e(Tu,cme),e(cme,x5o),e(Tu,$5o),e(Tu,XD),e(XD,k5o),e(Tu,S5o),e(y,R5o),e(y,Mu),e(Mu,fme),e(fme,P5o),e(Mu,B5o),e(Mu,zD),e(zD,I5o),e(Mu,N5o),e(y,q5o),e(y,Eu),e(Eu,mme),e(mme,j5o),e(Eu,D5o),e(Eu,WD),e(WD,G5o),e(Eu,O5o),e(y,V5o),e(y,Cu),e(Cu,gme),e(gme,X5o),e(Cu,z5o),e(Cu,QD),e(QD,W5o),e(Cu,Q5o),e(y,H5o),e(y,wu),e(wu,hme),e(hme,U5o),e(wu,J5o),e(wu,HD),e(HD,Y5o),e(wu,K5o),e(y,Z5o),e(y,Au),e(Au,pme),e(pme,e0o),e(Au,o0o),e(Au,UD),e(UD,r0o),e(Au,t0o),e(y,a0o),e(y,Lu),e(Lu,_me),e(_me,n0o),e(Lu,s0o),e(Lu,JD),e(JD,l0o),e(Lu,i0o),e(y,d0o),e(y,yu),e(yu,ume),e(ume,c0o),e(yu,f0o),e(yu,YD),e(YD,m0o),e(yu,g0o),e(y,h0o),e(y,xu),e(xu,bme),e(bme,p0o),e(xu,_0o),e(xu,KD),e(KD,u0o),e(xu,b0o),e(y,v0o),e(y,$u),e($u,vme),e(vme,F0o),e($u,T0o),e($u,ZD),e(ZD,M0o),e($u,E0o),e(y,C0o),e(y,ku),e(ku,Fme),e(Fme,w0o),e(ku,A0o),e(ku,eG),e(eG,L0o),e(ku,y0o),e(y,x0o),e(y,Su),e(Su,Tme),e(Tme,$0o),e(Su,k0o),e(Su,oG),e(oG,S0o),e(Su,R0o),e(y,P0o),e(y,Ru),e(Ru,Mme),e(Mme,B0o),e(Ru,I0o),e(Ru,rG),e(rG,N0o),e(Ru,q0o),e(y,j0o),e(y,Pu),e(Pu,Eme),e(Eme,D0o),e(Pu,G0o),e(Pu,tG),e(tG,O0o),e(Pu,V0o),e(y,X0o),e(y,Bu),e(Bu,Cme),e(Cme,z0o),e(Bu,W0o),e(Bu,aG),e(aG,Q0o),e(Bu,H0o),e(y,U0o),e(y,Iu),e(Iu,wme),e(wme,J0o),e(Iu,Y0o),e(Iu,nG),e(nG,K0o),e(Iu,Z0o),e(y,ewo),e(y,Nu),e(Nu,Ame),e(Ame,owo),e(Nu,rwo),e(Nu,sG),e(sG,two),e(Nu,awo),e(y,nwo),e(y,qu),e(qu,Lme),e(Lme,swo),e(qu,lwo),e(qu,lG),e(lG,iwo),e(qu,dwo),e(y,cwo),e(y,ju),e(ju,yme),e(yme,fwo),e(ju,mwo),e(ju,iG),e(iG,gwo),e(ju,hwo),e(y,pwo),e(y,Du),e(Du,xme),e(xme,_wo),e(Du,uwo),e(Du,dG),e(dG,bwo),e(Du,vwo),e(y,Fwo),e(y,Gu),e(Gu,$me),e($me,Two),e(Gu,Mwo),e(Gu,cG),e(cG,Ewo),e(Gu,Cwo),e(y,wwo),e(y,Ou),e(Ou,kme),e(kme,Awo),e(Ou,Lwo),e(Ou,fG),e(fG,ywo),e(Ou,xwo),e(y,$wo),e(y,Vu),e(Vu,Sme),e(Sme,kwo),e(Vu,Swo),e(Vu,mG),e(mG,Rwo),e(Vu,Pwo),e(y,Bwo),e(y,Xu),e(Xu,Rme),e(Rme,Iwo),e(Xu,Nwo),e(Xu,gG),e(gG,qwo),e(Xu,jwo),e(y,Dwo),e(y,zu),e(zu,Pme),e(Pme,Gwo),e(zu,Owo),e(zu,hG),e(hG,Vwo),e(zu,Xwo),e(y,zwo),e(y,Wu),e(Wu,Bme),e(Bme,Wwo),e(Wu,Qwo),e(Wu,pG),e(pG,Hwo),e(Wu,Uwo),e(y,Jwo),e(y,Qu),e(Qu,Ime),e(Ime,Ywo),e(Qu,Kwo),e(Qu,_G),e(_G,Zwo),e(Qu,eAo),e(y,oAo),e(y,Hu),e(Hu,Nme),e(Nme,rAo),e(Hu,tAo),e(Hu,uG),e(uG,aAo),e(Hu,nAo),e(y,sAo),e(y,Uu),e(Uu,qme),e(qme,lAo),e(Uu,iAo),e(Uu,bG),e(bG,dAo),e(Uu,cAo),e(y,fAo),e(y,Ju),e(Ju,jme),e(jme,mAo),e(Ju,gAo),e(Ju,vG),e(vG,hAo),e(Ju,pAo),e(y,_Ao),e(y,Yu),e(Yu,Dme),e(Dme,uAo),e(Yu,bAo),e(Yu,FG),e(FG,vAo),e(Yu,FAo),e(Ye,TAo),e(Ye,Ku),e(Ku,MAo),e(Ku,Gme),e(Gme,EAo),e(Ku,CAo),e(Ku,Ome),e(Ome,wAo),e(Ye,AAo),M(Zu,Ye,null),b(f,JXe,u),b(f,Wi,u),e(Wi,e1),e(e1,Vme),M(X6,Vme,null),e(Wi,LAo),e(Wi,Xme),e(Xme,yAo),b(f,YXe,u),b(f,ko,u),M(z6,ko,null),e(ko,xAo),e(ko,Qi),e(Qi,$Ao),e(Qi,TG),e(TG,kAo),e(Qi,SAo),e(Qi,MG),e(MG,RAo),e(Qi,PAo),e(ko,BAo),e(ko,W6),e(W6,IAo),e(W6,zme),e(zme,NAo),e(W6,qAo),e(ko,jAo),e(ko,dt),M(Q6,dt,null),e(dt,DAo),e(dt,Wme),e(Wme,GAo),e(dt,OAo),e(dt,Hi),e(Hi,VAo),e(Hi,Qme),e(Qme,XAo),e(Hi,zAo),e(Hi,EG),e(EG,WAo),e(Hi,QAo),e(dt,HAo),M(o1,dt,null),e(ko,UAo),e(ko,Ke),M(H6,Ke,null),e(Ke,JAo),e(Ke,Hme),e(Hme,YAo),e(Ke,KAo),e(Ke,Na),e(Na,ZAo),e(Na,Ume),e(Ume,e6o),e(Na,o6o),e(Na,Jme),e(Jme,r6o),e(Na,t6o),e(Na,Yme),e(Yme,a6o),e(Na,n6o),e(Ke,s6o),e(Ke,G),e(G,r1),e(r1,Kme),e(Kme,l6o),e(r1,i6o),e(r1,CG),e(CG,d6o),e(r1,c6o),e(G,f6o),e(G,t1),e(t1,Zme),e(Zme,m6o),e(t1,g6o),e(t1,wG),e(wG,h6o),e(t1,p6o),e(G,_6o),e(G,a1),e(a1,ege),e(ege,u6o),e(a1,b6o),e(a1,AG),e(AG,v6o),e(a1,F6o),e(G,T6o),e(G,n1),e(n1,oge),e(oge,M6o),e(n1,E6o),e(n1,LG),e(LG,C6o),e(n1,w6o),e(G,A6o),e(G,s1),e(s1,rge),e(rge,L6o),e(s1,y6o),e(s1,yG),e(yG,x6o),e(s1,$6o),e(G,k6o),e(G,l1),e(l1,tge),e(tge,S6o),e(l1,R6o),e(l1,xG),e(xG,P6o),e(l1,B6o),e(G,I6o),e(G,i1),e(i1,age),e(age,N6o),e(i1,q6o),e(i1,$G),e($G,j6o),e(i1,D6o),e(G,G6o),e(G,d1),e(d1,nge),e(nge,O6o),e(d1,V6o),e(d1,kG),e(kG,X6o),e(d1,z6o),e(G,W6o),e(G,c1),e(c1,sge),e(sge,Q6o),e(c1,H6o),e(c1,SG),e(SG,U6o),e(c1,J6o),e(G,Y6o),e(G,f1),e(f1,lge),e(lge,K6o),e(f1,Z6o),e(f1,RG),e(RG,eLo),e(f1,oLo),e(G,rLo),e(G,m1),e(m1,ige),e(ige,tLo),e(m1,aLo),e(m1,PG),e(PG,nLo),e(m1,sLo),e(G,lLo),e(G,g1),e(g1,dge),e(dge,iLo),e(g1,dLo),e(g1,BG),e(BG,cLo),e(g1,fLo),e(G,mLo),e(G,h1),e(h1,cge),e(cge,gLo),e(h1,hLo),e(h1,IG),e(IG,pLo),e(h1,_Lo),e(G,uLo),e(G,p1),e(p1,fge),e(fge,bLo),e(p1,vLo),e(p1,NG),e(NG,FLo),e(p1,TLo),e(G,MLo),e(G,_1),e(_1,mge),e(mge,ELo),e(_1,CLo),e(_1,qG),e(qG,wLo),e(_1,ALo),e(G,LLo),e(G,u1),e(u1,gge),e(gge,yLo),e(u1,xLo),e(u1,jG),e(jG,$Lo),e(u1,kLo),e(G,SLo),e(G,b1),e(b1,hge),e(hge,RLo),e(b1,PLo),e(b1,DG),e(DG,BLo),e(b1,ILo),e(G,NLo),e(G,v1),e(v1,pge),e(pge,qLo),e(v1,jLo),e(v1,GG),e(GG,DLo),e(v1,GLo),e(G,OLo),e(G,F1),e(F1,_ge),e(_ge,VLo),e(F1,XLo),e(F1,OG),e(OG,zLo),e(F1,WLo),e(G,QLo),e(G,T1),e(T1,uge),e(uge,HLo),e(T1,ULo),e(T1,VG),e(VG,JLo),e(T1,YLo),e(G,KLo),e(G,M1),e(M1,bge),e(bge,ZLo),e(M1,eyo),e(M1,XG),e(XG,oyo),e(M1,ryo),e(G,tyo),e(G,E1),e(E1,vge),e(vge,ayo),e(E1,nyo),e(E1,zG),e(zG,syo),e(E1,lyo),e(G,iyo),e(G,C1),e(C1,Fge),e(Fge,dyo),e(C1,cyo),e(C1,WG),e(WG,fyo),e(C1,myo),e(G,gyo),e(G,w1),e(w1,Tge),e(Tge,hyo),e(w1,pyo),e(w1,QG),e(QG,_yo),e(w1,uyo),e(G,byo),e(G,A1),e(A1,Mge),e(Mge,vyo),e(A1,Fyo),e(A1,HG),e(HG,Tyo),e(A1,Myo),e(G,Eyo),e(G,L1),e(L1,Ege),e(Ege,Cyo),e(L1,wyo),e(L1,UG),e(UG,Ayo),e(L1,Lyo),e(G,yyo),e(G,y1),e(y1,Cge),e(Cge,xyo),e(y1,$yo),e(y1,JG),e(JG,kyo),e(y1,Syo),e(G,Ryo),e(G,x1),e(x1,wge),e(wge,Pyo),e(x1,Byo),e(x1,YG),e(YG,Iyo),e(x1,Nyo),e(G,qyo),e(G,$1),e($1,Age),e(Age,jyo),e($1,Dyo),e($1,KG),e(KG,Gyo),e($1,Oyo),e(G,Vyo),e(G,k1),e(k1,Lge),e(Lge,Xyo),e(k1,zyo),e(k1,ZG),e(ZG,Wyo),e(k1,Qyo),e(G,Hyo),e(G,S1),e(S1,yge),e(yge,Uyo),e(S1,Jyo),e(S1,eO),e(eO,Yyo),e(S1,Kyo),e(G,Zyo),e(G,R1),e(R1,xge),e(xge,exo),e(R1,oxo),e(R1,oO),e(oO,rxo),e(R1,txo),e(G,axo),e(G,P1),e(P1,$ge),e($ge,nxo),e(P1,sxo),e(P1,rO),e(rO,lxo),e(P1,ixo),e(G,dxo),e(G,B1),e(B1,kge),e(kge,cxo),e(B1,fxo),e(B1,tO),e(tO,mxo),e(B1,gxo),e(G,hxo),e(G,I1),e(I1,Sge),e(Sge,pxo),e(I1,_xo),e(I1,aO),e(aO,uxo),e(I1,bxo),e(G,vxo),e(G,N1),e(N1,Rge),e(Rge,Fxo),e(N1,Txo),e(N1,nO),e(nO,Mxo),e(N1,Exo),e(G,Cxo),e(G,q1),e(q1,Pge),e(Pge,wxo),e(q1,Axo),e(q1,sO),e(sO,Lxo),e(q1,yxo),e(G,xxo),e(G,j1),e(j1,Bge),e(Bge,$xo),e(j1,kxo),e(j1,lO),e(lO,Sxo),e(j1,Rxo),e(G,Pxo),e(G,D1),e(D1,Ige),e(Ige,Bxo),e(D1,Ixo),e(D1,iO),e(iO,Nxo),e(D1,qxo),e(G,jxo),e(G,G1),e(G1,Nge),e(Nge,Dxo),e(G1,Gxo),e(G1,dO),e(dO,Oxo),e(G1,Vxo),e(G,Xxo),e(G,O1),e(O1,qge),e(qge,zxo),e(O1,Wxo),e(O1,cO),e(cO,Qxo),e(O1,Hxo),e(G,Uxo),e(G,V1),e(V1,jge),e(jge,Jxo),e(V1,Yxo),e(V1,fO),e(fO,Kxo),e(V1,Zxo),e(G,e$o),e(G,X1),e(X1,Dge),e(Dge,o$o),e(X1,r$o),e(X1,mO),e(mO,t$o),e(X1,a$o),e(G,n$o),e(G,z1),e(z1,Gge),e(Gge,s$o),e(z1,l$o),e(z1,gO),e(gO,i$o),e(z1,d$o),e(G,c$o),e(G,W1),e(W1,Oge),e(Oge,f$o),e(W1,m$o),e(W1,hO),e(hO,g$o),e(W1,h$o),e(Ke,p$o),e(Ke,Q1),e(Q1,_$o),e(Q1,Vge),e(Vge,u$o),e(Q1,b$o),e(Q1,Xge),e(Xge,v$o),e(Ke,F$o),M(H1,Ke,null),b(f,KXe,u),b(f,Ui,u),e(Ui,U1),e(U1,zge),M(U6,zge,null),e(Ui,T$o),e(Ui,Wge),e(Wge,M$o),b(f,ZXe,u),b(f,So,u),M(J6,So,null),e(So,E$o),e(So,Ji),e(Ji,C$o),e(Ji,pO),e(pO,w$o),e(Ji,A$o),e(Ji,_O),e(_O,L$o),e(Ji,y$o),e(So,x$o),e(So,Y6),e(Y6,$$o),e(Y6,Qge),e(Qge,k$o),e(Y6,S$o),e(So,R$o),e(So,ct),M(K6,ct,null),e(ct,P$o),e(ct,Hge),e(Hge,B$o),e(ct,I$o),e(ct,Yi),e(Yi,N$o),e(Yi,Uge),e(Uge,q$o),e(Yi,j$o),e(Yi,uO),e(uO,D$o),e(Yi,G$o),e(ct,O$o),M(J1,ct,null),e(So,V$o),e(So,Ze),M(Z6,Ze,null),e(Ze,X$o),e(Ze,Jge),e(Jge,z$o),e(Ze,W$o),e(Ze,qa),e(qa,Q$o),e(qa,Yge),e(Yge,H$o),e(qa,U$o),e(qa,Kge),e(Kge,J$o),e(qa,Y$o),e(qa,Zge),e(Zge,K$o),e(qa,Z$o),e(Ze,eko),e(Ze,z),e(z,Y1),e(Y1,ehe),e(ehe,oko),e(Y1,rko),e(Y1,bO),e(bO,tko),e(Y1,ako),e(z,nko),e(z,K1),e(K1,ohe),e(ohe,sko),e(K1,lko),e(K1,vO),e(vO,iko),e(K1,dko),e(z,cko),e(z,Z1),e(Z1,rhe),e(rhe,fko),e(Z1,mko),e(Z1,FO),e(FO,gko),e(Z1,hko),e(z,pko),e(z,e2),e(e2,the),e(the,_ko),e(e2,uko),e(e2,TO),e(TO,bko),e(e2,vko),e(z,Fko),e(z,o2),e(o2,ahe),e(ahe,Tko),e(o2,Mko),e(o2,MO),e(MO,Eko),e(o2,Cko),e(z,wko),e(z,r2),e(r2,nhe),e(nhe,Ako),e(r2,Lko),e(r2,EO),e(EO,yko),e(r2,xko),e(z,$ko),e(z,t2),e(t2,she),e(she,kko),e(t2,Sko),e(t2,CO),e(CO,Rko),e(t2,Pko),e(z,Bko),e(z,a2),e(a2,lhe),e(lhe,Iko),e(a2,Nko),e(a2,wO),e(wO,qko),e(a2,jko),e(z,Dko),e(z,n2),e(n2,ihe),e(ihe,Gko),e(n2,Oko),e(n2,AO),e(AO,Vko),e(n2,Xko),e(z,zko),e(z,s2),e(s2,dhe),e(dhe,Wko),e(s2,Qko),e(s2,LO),e(LO,Hko),e(s2,Uko),e(z,Jko),e(z,l2),e(l2,che),e(che,Yko),e(l2,Kko),e(l2,yO),e(yO,Zko),e(l2,eSo),e(z,oSo),e(z,i2),e(i2,fhe),e(fhe,rSo),e(i2,tSo),e(i2,xO),e(xO,aSo),e(i2,nSo),e(z,sSo),e(z,d2),e(d2,mhe),e(mhe,lSo),e(d2,iSo),e(d2,$O),e($O,dSo),e(d2,cSo),e(z,fSo),e(z,c2),e(c2,ghe),e(ghe,mSo),e(c2,gSo),e(c2,kO),e(kO,hSo),e(c2,pSo),e(z,_So),e(z,f2),e(f2,hhe),e(hhe,uSo),e(f2,bSo),e(f2,SO),e(SO,vSo),e(f2,FSo),e(z,TSo),e(z,m2),e(m2,phe),e(phe,MSo),e(m2,ESo),e(m2,RO),e(RO,CSo),e(m2,wSo),e(z,ASo),e(z,g2),e(g2,_he),e(_he,LSo),e(g2,ySo),e(g2,PO),e(PO,xSo),e(g2,$So),e(z,kSo),e(z,h2),e(h2,uhe),e(uhe,SSo),e(h2,RSo),e(h2,BO),e(BO,PSo),e(h2,BSo),e(z,ISo),e(z,p2),e(p2,bhe),e(bhe,NSo),e(p2,qSo),e(p2,IO),e(IO,jSo),e(p2,DSo),e(z,GSo),e(z,_2),e(_2,vhe),e(vhe,OSo),e(_2,VSo),e(_2,NO),e(NO,XSo),e(_2,zSo),e(z,WSo),e(z,u2),e(u2,Fhe),e(Fhe,QSo),e(u2,HSo),e(u2,qO),e(qO,USo),e(u2,JSo),e(z,YSo),e(z,b2),e(b2,The),e(The,KSo),e(b2,ZSo),e(b2,jO),e(jO,eRo),e(b2,oRo),e(z,rRo),e(z,v2),e(v2,Mhe),e(Mhe,tRo),e(v2,aRo),e(v2,DO),e(DO,nRo),e(v2,sRo),e(z,lRo),e(z,F2),e(F2,Ehe),e(Ehe,iRo),e(F2,dRo),e(F2,GO),e(GO,cRo),e(F2,fRo),e(z,mRo),e(z,T2),e(T2,Che),e(Che,gRo),e(T2,hRo),e(T2,OO),e(OO,pRo),e(T2,_Ro),e(z,uRo),e(z,M2),e(M2,whe),e(whe,bRo),e(M2,vRo),e(M2,VO),e(VO,FRo),e(M2,TRo),e(z,MRo),e(z,E2),e(E2,Ahe),e(Ahe,ERo),e(E2,CRo),e(E2,XO),e(XO,wRo),e(E2,ARo),e(z,LRo),e(z,C2),e(C2,Lhe),e(Lhe,yRo),e(C2,xRo),e(C2,zO),e(zO,$Ro),e(C2,kRo),e(z,SRo),e(z,w2),e(w2,yhe),e(yhe,RRo),e(w2,PRo),e(w2,WO),e(WO,BRo),e(w2,IRo),e(z,NRo),e(z,A2),e(A2,xhe),e(xhe,qRo),e(A2,jRo),e(A2,QO),e(QO,DRo),e(A2,GRo),e(z,ORo),e(z,L2),e(L2,$he),e($he,VRo),e(L2,XRo),e(L2,HO),e(HO,zRo),e(L2,WRo),e(z,QRo),e(z,y2),e(y2,khe),e(khe,HRo),e(y2,URo),e(y2,UO),e(UO,JRo),e(y2,YRo),e(z,KRo),e(z,x2),e(x2,She),e(She,ZRo),e(x2,ePo),e(x2,JO),e(JO,oPo),e(x2,rPo),e(z,tPo),e(z,$2),e($2,Rhe),e(Rhe,aPo),e($2,nPo),e($2,YO),e(YO,sPo),e($2,lPo),e(z,iPo),e(z,k2),e(k2,Phe),e(Phe,dPo),e(k2,cPo),e(k2,KO),e(KO,fPo),e(k2,mPo),e(z,gPo),e(z,S2),e(S2,Bhe),e(Bhe,hPo),e(S2,pPo),e(S2,ZO),e(ZO,_Po),e(S2,uPo),e(z,bPo),e(z,R2),e(R2,Ihe),e(Ihe,vPo),e(R2,FPo),e(R2,eV),e(eV,TPo),e(R2,MPo),e(z,EPo),e(z,P2),e(P2,Nhe),e(Nhe,CPo),e(P2,wPo),e(P2,oV),e(oV,APo),e(P2,LPo),e(z,yPo),e(z,B2),e(B2,qhe),e(qhe,xPo),e(B2,$Po),e(B2,rV),e(rV,kPo),e(B2,SPo),e(z,RPo),e(z,I2),e(I2,jhe),e(jhe,PPo),e(I2,BPo),e(I2,tV),e(tV,IPo),e(I2,NPo),e(Ze,qPo),e(Ze,N2),e(N2,jPo),e(N2,Dhe),e(Dhe,DPo),e(N2,GPo),e(N2,Ghe),e(Ghe,OPo),e(Ze,VPo),M(q2,Ze,null),b(f,eze,u),b(f,Ki,u),e(Ki,j2),e(j2,Ohe),M(eL,Ohe,null),e(Ki,XPo),e(Ki,Vhe),e(Vhe,zPo),b(f,oze,u),b(f,Ro,u),M(oL,Ro,null),e(Ro,WPo),e(Ro,Zi),e(Zi,QPo),e(Zi,aV),e(aV,HPo),e(Zi,UPo),e(Zi,nV),e(nV,JPo),e(Zi,YPo),e(Ro,KPo),e(Ro,rL),e(rL,ZPo),e(rL,Xhe),e(Xhe,eBo),e(rL,oBo),e(Ro,rBo),e(Ro,ft),M(tL,ft,null),e(ft,tBo),e(ft,zhe),e(zhe,aBo),e(ft,nBo),e(ft,ed),e(ed,sBo),e(ed,Whe),e(Whe,lBo),e(ed,iBo),e(ed,sV),e(sV,dBo),e(ed,cBo),e(ft,fBo),M(D2,ft,null),e(Ro,mBo),e(Ro,eo),M(aL,eo,null),e(eo,gBo),e(eo,Qhe),e(Qhe,hBo),e(eo,pBo),e(eo,ja),e(ja,_Bo),e(ja,Hhe),e(Hhe,uBo),e(ja,bBo),e(ja,Uhe),e(Uhe,vBo),e(ja,FBo),e(ja,Jhe),e(Jhe,TBo),e(ja,MBo),e(eo,EBo),e(eo,Q),e(Q,G2),e(G2,Yhe),e(Yhe,CBo),e(G2,wBo),e(G2,lV),e(lV,ABo),e(G2,LBo),e(Q,yBo),e(Q,O2),e(O2,Khe),e(Khe,xBo),e(O2,$Bo),e(O2,iV),e(iV,kBo),e(O2,SBo),e(Q,RBo),e(Q,V2),e(V2,Zhe),e(Zhe,PBo),e(V2,BBo),e(V2,dV),e(dV,IBo),e(V2,NBo),e(Q,qBo),e(Q,X2),e(X2,epe),e(epe,jBo),e(X2,DBo),e(X2,cV),e(cV,GBo),e(X2,OBo),e(Q,VBo),e(Q,z2),e(z2,ope),e(ope,XBo),e(z2,zBo),e(z2,fV),e(fV,WBo),e(z2,QBo),e(Q,HBo),e(Q,W2),e(W2,rpe),e(rpe,UBo),e(W2,JBo),e(W2,mV),e(mV,YBo),e(W2,KBo),e(Q,ZBo),e(Q,Q2),e(Q2,tpe),e(tpe,eIo),e(Q2,oIo),e(Q2,gV),e(gV,rIo),e(Q2,tIo),e(Q,aIo),e(Q,H2),e(H2,ape),e(ape,nIo),e(H2,sIo),e(H2,hV),e(hV,lIo),e(H2,iIo),e(Q,dIo),e(Q,U2),e(U2,npe),e(npe,cIo),e(U2,fIo),e(U2,pV),e(pV,mIo),e(U2,gIo),e(Q,hIo),e(Q,J2),e(J2,spe),e(spe,pIo),e(J2,_Io),e(J2,_V),e(_V,uIo),e(J2,bIo),e(Q,vIo),e(Q,Y2),e(Y2,lpe),e(lpe,FIo),e(Y2,TIo),e(Y2,uV),e(uV,MIo),e(Y2,EIo),e(Q,CIo),e(Q,K2),e(K2,ipe),e(ipe,wIo),e(K2,AIo),e(K2,bV),e(bV,LIo),e(K2,yIo),e(Q,xIo),e(Q,Z2),e(Z2,dpe),e(dpe,$Io),e(Z2,kIo),e(Z2,vV),e(vV,SIo),e(Z2,RIo),e(Q,PIo),e(Q,eb),e(eb,cpe),e(cpe,BIo),e(eb,IIo),e(eb,FV),e(FV,NIo),e(eb,qIo),e(Q,jIo),e(Q,ob),e(ob,fpe),e(fpe,DIo),e(ob,GIo),e(ob,TV),e(TV,OIo),e(ob,VIo),e(Q,XIo),e(Q,rb),e(rb,mpe),e(mpe,zIo),e(rb,WIo),e(rb,MV),e(MV,QIo),e(rb,HIo),e(Q,UIo),e(Q,tb),e(tb,gpe),e(gpe,JIo),e(tb,YIo),e(tb,EV),e(EV,KIo),e(tb,ZIo),e(Q,eNo),e(Q,ab),e(ab,hpe),e(hpe,oNo),e(ab,rNo),e(ab,CV),e(CV,tNo),e(ab,aNo),e(Q,nNo),e(Q,nb),e(nb,ppe),e(ppe,sNo),e(nb,lNo),e(nb,wV),e(wV,iNo),e(nb,dNo),e(Q,cNo),e(Q,sb),e(sb,_pe),e(_pe,fNo),e(sb,mNo),e(sb,AV),e(AV,gNo),e(sb,hNo),e(Q,pNo),e(Q,lb),e(lb,upe),e(upe,_No),e(lb,uNo),e(lb,LV),e(LV,bNo),e(lb,vNo),e(Q,FNo),e(Q,ib),e(ib,bpe),e(bpe,TNo),e(ib,MNo),e(ib,yV),e(yV,ENo),e(ib,CNo),e(Q,wNo),e(Q,db),e(db,vpe),e(vpe,ANo),e(db,LNo),e(db,xV),e(xV,yNo),e(db,xNo),e(Q,$No),e(Q,cb),e(cb,Fpe),e(Fpe,kNo),e(cb,SNo),e(cb,$V),e($V,RNo),e(cb,PNo),e(Q,BNo),e(Q,fb),e(fb,Tpe),e(Tpe,INo),e(fb,NNo),e(fb,kV),e(kV,qNo),e(fb,jNo),e(Q,DNo),e(Q,mb),e(mb,Mpe),e(Mpe,GNo),e(mb,ONo),e(mb,SV),e(SV,VNo),e(mb,XNo),e(Q,zNo),e(Q,gb),e(gb,Epe),e(Epe,WNo),e(gb,QNo),e(gb,RV),e(RV,HNo),e(gb,UNo),e(Q,JNo),e(Q,hb),e(hb,Cpe),e(Cpe,YNo),e(hb,KNo),e(hb,PV),e(PV,ZNo),e(hb,eqo),e(Q,oqo),e(Q,pb),e(pb,wpe),e(wpe,rqo),e(pb,tqo),e(pb,BV),e(BV,aqo),e(pb,nqo),e(Q,sqo),e(Q,_b),e(_b,Ape),e(Ape,lqo),e(_b,iqo),e(_b,IV),e(IV,dqo),e(_b,cqo),e(Q,fqo),e(Q,ub),e(ub,Lpe),e(Lpe,mqo),e(ub,gqo),e(ub,NV),e(NV,hqo),e(ub,pqo),e(Q,_qo),e(Q,bb),e(bb,ype),e(ype,uqo),e(bb,bqo),e(bb,qV),e(qV,vqo),e(bb,Fqo),e(Q,Tqo),e(Q,vb),e(vb,xpe),e(xpe,Mqo),e(vb,Eqo),e(vb,jV),e(jV,Cqo),e(vb,wqo),e(Q,Aqo),e(Q,Fb),e(Fb,$pe),e($pe,Lqo),e(Fb,yqo),e(Fb,kpe),e(kpe,xqo),e(Fb,$qo),e(Q,kqo),e(Q,Tb),e(Tb,Spe),e(Spe,Sqo),e(Tb,Rqo),e(Tb,DV),e(DV,Pqo),e(Tb,Bqo),e(Q,Iqo),e(Q,Mb),e(Mb,Rpe),e(Rpe,Nqo),e(Mb,qqo),e(Mb,GV),e(GV,jqo),e(Mb,Dqo),e(Q,Gqo),e(Q,Eb),e(Eb,Ppe),e(Ppe,Oqo),e(Eb,Vqo),e(Eb,OV),e(OV,Xqo),e(Eb,zqo),e(Q,Wqo),e(Q,Cb),e(Cb,Bpe),e(Bpe,Qqo),e(Cb,Hqo),e(Cb,VV),e(VV,Uqo),e(Cb,Jqo),e(eo,Yqo),e(eo,wb),e(wb,Kqo),e(wb,Ipe),e(Ipe,Zqo),e(wb,ejo),e(wb,Npe),e(Npe,ojo),e(eo,rjo),M(Ab,eo,null),b(f,rze,u),b(f,od,u),e(od,Lb),e(Lb,qpe),M(nL,qpe,null),e(od,tjo),e(od,jpe),e(jpe,ajo),b(f,tze,u),b(f,Po,u),M(sL,Po,null),e(Po,njo),e(Po,rd),e(rd,sjo),e(rd,XV),e(XV,ljo),e(rd,ijo),e(rd,zV),e(zV,djo),e(rd,cjo),e(Po,fjo),e(Po,lL),e(lL,mjo),e(lL,Dpe),e(Dpe,gjo),e(lL,hjo),e(Po,pjo),e(Po,mt),M(iL,mt,null),e(mt,_jo),e(mt,Gpe),e(Gpe,ujo),e(mt,bjo),e(mt,td),e(td,vjo),e(td,Ope),e(Ope,Fjo),e(td,Tjo),e(td,WV),e(WV,Mjo),e(td,Ejo),e(mt,Cjo),M(yb,mt,null),e(Po,wjo),e(Po,oo),M(dL,oo,null),e(oo,Ajo),e(oo,Vpe),e(Vpe,Ljo),e(oo,yjo),e(oo,Da),e(Da,xjo),e(Da,Xpe),e(Xpe,$jo),e(Da,kjo),e(Da,zpe),e(zpe,Sjo),e(Da,Rjo),e(Da,Wpe),e(Wpe,Pjo),e(Da,Bjo),e(oo,Ijo),e(oo,me),e(me,xb),e(xb,Qpe),e(Qpe,Njo),e(xb,qjo),e(xb,QV),e(QV,jjo),e(xb,Djo),e(me,Gjo),e(me,$b),e($b,Hpe),e(Hpe,Ojo),e($b,Vjo),e($b,HV),e(HV,Xjo),e($b,zjo),e(me,Wjo),e(me,kb),e(kb,Upe),e(Upe,Qjo),e(kb,Hjo),e(kb,UV),e(UV,Ujo),e(kb,Jjo),e(me,Yjo),e(me,Sb),e(Sb,Jpe),e(Jpe,Kjo),e(Sb,Zjo),e(Sb,JV),e(JV,eDo),e(Sb,oDo),e(me,rDo),e(me,Rb),e(Rb,Ype),e(Ype,tDo),e(Rb,aDo),e(Rb,YV),e(YV,nDo),e(Rb,sDo),e(me,lDo),e(me,Pb),e(Pb,Kpe),e(Kpe,iDo),e(Pb,dDo),e(Pb,KV),e(KV,cDo),e(Pb,fDo),e(me,mDo),e(me,Bb),e(Bb,Zpe),e(Zpe,gDo),e(Bb,hDo),e(Bb,ZV),e(ZV,pDo),e(Bb,_Do),e(me,uDo),e(me,Ib),e(Ib,e_e),e(e_e,bDo),e(Ib,vDo),e(Ib,eX),e(eX,FDo),e(Ib,TDo),e(me,MDo),e(me,Nb),e(Nb,o_e),e(o_e,EDo),e(Nb,CDo),e(Nb,oX),e(oX,wDo),e(Nb,ADo),e(me,LDo),e(me,qb),e(qb,r_e),e(r_e,yDo),e(qb,xDo),e(qb,rX),e(rX,$Do),e(qb,kDo),e(me,SDo),e(me,jb),e(jb,t_e),e(t_e,RDo),e(jb,PDo),e(jb,tX),e(tX,BDo),e(jb,IDo),e(me,NDo),e(me,Db),e(Db,a_e),e(a_e,qDo),e(Db,jDo),e(Db,aX),e(aX,DDo),e(Db,GDo),e(me,ODo),e(me,Gb),e(Gb,n_e),e(n_e,VDo),e(Gb,XDo),e(Gb,nX),e(nX,zDo),e(Gb,WDo),e(me,QDo),e(me,Ob),e(Ob,s_e),e(s_e,HDo),e(Ob,UDo),e(Ob,sX),e(sX,JDo),e(Ob,YDo),e(me,KDo),e(me,Vb),e(Vb,l_e),e(l_e,ZDo),e(Vb,eGo),e(Vb,lX),e(lX,oGo),e(Vb,rGo),e(me,tGo),e(me,Xb),e(Xb,i_e),e(i_e,aGo),e(Xb,nGo),e(Xb,iX),e(iX,sGo),e(Xb,lGo),e(me,iGo),e(me,zb),e(zb,d_e),e(d_e,dGo),e(zb,cGo),e(zb,dX),e(dX,fGo),e(zb,mGo),e(me,gGo),e(me,Wb),e(Wb,c_e),e(c_e,hGo),e(Wb,pGo),e(Wb,cX),e(cX,_Go),e(Wb,uGo),e(me,bGo),e(me,Qb),e(Qb,f_e),e(f_e,vGo),e(Qb,FGo),e(Qb,fX),e(fX,TGo),e(Qb,MGo),e(oo,EGo),e(oo,Hb),e(Hb,CGo),e(Hb,m_e),e(m_e,wGo),e(Hb,AGo),e(Hb,g_e),e(g_e,LGo),e(oo,yGo),M(Ub,oo,null),b(f,aze,u),b(f,ad,u),e(ad,Jb),e(Jb,h_e),M(cL,h_e,null),e(ad,xGo),e(ad,p_e),e(p_e,$Go),b(f,nze,u),b(f,Bo,u),M(fL,Bo,null),e(Bo,kGo),e(Bo,nd),e(nd,SGo),e(nd,mX),e(mX,RGo),e(nd,PGo),e(nd,gX),e(gX,BGo),e(nd,IGo),e(Bo,NGo),e(Bo,mL),e(mL,qGo),e(mL,__e),e(__e,jGo),e(mL,DGo),e(Bo,GGo),e(Bo,gt),M(gL,gt,null),e(gt,OGo),e(gt,u_e),e(u_e,VGo),e(gt,XGo),e(gt,sd),e(sd,zGo),e(sd,b_e),e(b_e,WGo),e(sd,QGo),e(sd,hX),e(hX,HGo),e(sd,UGo),e(gt,JGo),M(Yb,gt,null),e(Bo,YGo),e(Bo,ro),M(hL,ro,null),e(ro,KGo),e(ro,v_e),e(v_e,ZGo),e(ro,eOo),e(ro,Ga),e(Ga,oOo),e(Ga,F_e),e(F_e,rOo),e(Ga,tOo),e(Ga,T_e),e(T_e,aOo),e(Ga,nOo),e(Ga,M_e),e(M_e,sOo),e(Ga,lOo),e(ro,iOo),e(ro,B),e(B,Kb),e(Kb,E_e),e(E_e,dOo),e(Kb,cOo),e(Kb,pX),e(pX,fOo),e(Kb,mOo),e(B,gOo),e(B,Zb),e(Zb,C_e),e(C_e,hOo),e(Zb,pOo),e(Zb,_X),e(_X,_Oo),e(Zb,uOo),e(B,bOo),e(B,e3),e(e3,w_e),e(w_e,vOo),e(e3,FOo),e(e3,uX),e(uX,TOo),e(e3,MOo),e(B,EOo),e(B,o3),e(o3,A_e),e(A_e,COo),e(o3,wOo),e(o3,bX),e(bX,AOo),e(o3,LOo),e(B,yOo),e(B,r3),e(r3,L_e),e(L_e,xOo),e(r3,$Oo),e(r3,vX),e(vX,kOo),e(r3,SOo),e(B,ROo),e(B,t3),e(t3,y_e),e(y_e,POo),e(t3,BOo),e(t3,FX),e(FX,IOo),e(t3,NOo),e(B,qOo),e(B,a3),e(a3,x_e),e(x_e,jOo),e(a3,DOo),e(a3,TX),e(TX,GOo),e(a3,OOo),e(B,VOo),e(B,n3),e(n3,$_e),e($_e,XOo),e(n3,zOo),e(n3,MX),e(MX,WOo),e(n3,QOo),e(B,HOo),e(B,s3),e(s3,k_e),e(k_e,UOo),e(s3,JOo),e(s3,EX),e(EX,YOo),e(s3,KOo),e(B,ZOo),e(B,l3),e(l3,S_e),e(S_e,eVo),e(l3,oVo),e(l3,CX),e(CX,rVo),e(l3,tVo),e(B,aVo),e(B,i3),e(i3,R_e),e(R_e,nVo),e(i3,sVo),e(i3,wX),e(wX,lVo),e(i3,iVo),e(B,dVo),e(B,d3),e(d3,P_e),e(P_e,cVo),e(d3,fVo),e(d3,AX),e(AX,mVo),e(d3,gVo),e(B,hVo),e(B,c3),e(c3,B_e),e(B_e,pVo),e(c3,_Vo),e(c3,LX),e(LX,uVo),e(c3,bVo),e(B,vVo),e(B,f3),e(f3,I_e),e(I_e,FVo),e(f3,TVo),e(f3,yX),e(yX,MVo),e(f3,EVo),e(B,CVo),e(B,m3),e(m3,N_e),e(N_e,wVo),e(m3,AVo),e(m3,xX),e(xX,LVo),e(m3,yVo),e(B,xVo),e(B,g3),e(g3,q_e),e(q_e,$Vo),e(g3,kVo),e(g3,$X),e($X,SVo),e(g3,RVo),e(B,PVo),e(B,h3),e(h3,j_e),e(j_e,BVo),e(h3,IVo),e(h3,kX),e(kX,NVo),e(h3,qVo),e(B,jVo),e(B,p3),e(p3,D_e),e(D_e,DVo),e(p3,GVo),e(p3,SX),e(SX,OVo),e(p3,VVo),e(B,XVo),e(B,_3),e(_3,G_e),e(G_e,zVo),e(_3,WVo),e(_3,RX),e(RX,QVo),e(_3,HVo),e(B,UVo),e(B,u3),e(u3,O_e),e(O_e,JVo),e(u3,YVo),e(u3,PX),e(PX,KVo),e(u3,ZVo),e(B,eXo),e(B,b3),e(b3,V_e),e(V_e,oXo),e(b3,rXo),e(b3,BX),e(BX,tXo),e(b3,aXo),e(B,nXo),e(B,v3),e(v3,X_e),e(X_e,sXo),e(v3,lXo),e(v3,IX),e(IX,iXo),e(v3,dXo),e(B,cXo),e(B,F3),e(F3,z_e),e(z_e,fXo),e(F3,mXo),e(F3,NX),e(NX,gXo),e(F3,hXo),e(B,pXo),e(B,T3),e(T3,W_e),e(W_e,_Xo),e(T3,uXo),e(T3,qX),e(qX,bXo),e(T3,vXo),e(B,FXo),e(B,M3),e(M3,Q_e),e(Q_e,TXo),e(M3,MXo),e(M3,jX),e(jX,EXo),e(M3,CXo),e(B,wXo),e(B,E3),e(E3,H_e),e(H_e,AXo),e(E3,LXo),e(E3,DX),e(DX,yXo),e(E3,xXo),e(B,$Xo),e(B,C3),e(C3,U_e),e(U_e,kXo),e(C3,SXo),e(C3,GX),e(GX,RXo),e(C3,PXo),e(B,BXo),e(B,w3),e(w3,J_e),e(J_e,IXo),e(w3,NXo),e(w3,OX),e(OX,qXo),e(w3,jXo),e(B,DXo),e(B,A3),e(A3,Y_e),e(Y_e,GXo),e(A3,OXo),e(A3,VX),e(VX,VXo),e(A3,XXo),e(B,zXo),e(B,L3),e(L3,K_e),e(K_e,WXo),e(L3,QXo),e(L3,XX),e(XX,HXo),e(L3,UXo),e(B,JXo),e(B,y3),e(y3,Z_e),e(Z_e,YXo),e(y3,KXo),e(y3,zX),e(zX,ZXo),e(y3,ezo),e(B,ozo),e(B,x3),e(x3,eue),e(eue,rzo),e(x3,tzo),e(x3,WX),e(WX,azo),e(x3,nzo),e(B,szo),e(B,$3),e($3,oue),e(oue,lzo),e($3,izo),e($3,QX),e(QX,dzo),e($3,czo),e(B,fzo),e(B,k3),e(k3,rue),e(rue,mzo),e(k3,gzo),e(k3,HX),e(HX,hzo),e(k3,pzo),e(B,_zo),e(B,S3),e(S3,tue),e(tue,uzo),e(S3,bzo),e(S3,UX),e(UX,vzo),e(S3,Fzo),e(B,Tzo),e(B,R3),e(R3,aue),e(aue,Mzo),e(R3,Ezo),e(R3,JX),e(JX,Czo),e(R3,wzo),e(B,Azo),e(B,P3),e(P3,nue),e(nue,Lzo),e(P3,yzo),e(P3,YX),e(YX,xzo),e(P3,$zo),e(B,kzo),e(B,B3),e(B3,sue),e(sue,Szo),e(B3,Rzo),e(B3,KX),e(KX,Pzo),e(B3,Bzo),e(B,Izo),e(B,I3),e(I3,lue),e(lue,Nzo),e(I3,qzo),e(I3,ZX),e(ZX,jzo),e(I3,Dzo),e(B,Gzo),e(B,N3),e(N3,iue),e(iue,Ozo),e(N3,Vzo),e(N3,ez),e(ez,Xzo),e(N3,zzo),e(B,Wzo),e(B,q3),e(q3,due),e(due,Qzo),e(q3,Hzo),e(q3,oz),e(oz,Uzo),e(q3,Jzo),e(B,Yzo),e(B,j3),e(j3,cue),e(cue,Kzo),e(j3,Zzo),e(j3,rz),e(rz,eWo),e(j3,oWo),e(B,rWo),e(B,D3),e(D3,fue),e(fue,tWo),e(D3,aWo),e(D3,tz),e(tz,nWo),e(D3,sWo),e(B,lWo),e(B,G3),e(G3,mue),e(mue,iWo),e(G3,dWo),e(G3,az),e(az,cWo),e(G3,fWo),e(B,mWo),e(B,O3),e(O3,gue),e(gue,gWo),e(O3,hWo),e(O3,nz),e(nz,pWo),e(O3,_Wo),e(B,uWo),e(B,V3),e(V3,hue),e(hue,bWo),e(V3,vWo),e(V3,sz),e(sz,FWo),e(V3,TWo),e(B,MWo),e(B,X3),e(X3,pue),e(pue,EWo),e(X3,CWo),e(X3,lz),e(lz,wWo),e(X3,AWo),e(B,LWo),e(B,z3),e(z3,_ue),e(_ue,yWo),e(z3,xWo),e(z3,iz),e(iz,$Wo),e(z3,kWo),e(B,SWo),e(B,W3),e(W3,uue),e(uue,RWo),e(W3,PWo),e(W3,dz),e(dz,BWo),e(W3,IWo),e(B,NWo),e(B,Q3),e(Q3,bue),e(bue,qWo),e(Q3,jWo),e(Q3,cz),e(cz,DWo),e(Q3,GWo),e(B,OWo),e(B,H3),e(H3,vue),e(vue,VWo),e(H3,XWo),e(H3,fz),e(fz,zWo),e(H3,WWo),e(ro,QWo),e(ro,U3),e(U3,HWo),e(U3,Fue),e(Fue,UWo),e(U3,JWo),e(U3,Tue),e(Tue,YWo),e(ro,KWo),M(J3,ro,null),b(f,sze,u),b(f,ld,u),e(ld,Y3),e(Y3,Mue),M(pL,Mue,null),e(ld,ZWo),e(ld,Eue),e(Eue,eQo),b(f,lze,u),b(f,Io,u),M(_L,Io,null),e(Io,oQo),e(Io,id),e(id,rQo),e(id,mz),e(mz,tQo),e(id,aQo),e(id,gz),e(gz,nQo),e(id,sQo),e(Io,lQo),e(Io,uL),e(uL,iQo),e(uL,Cue),e(Cue,dQo),e(uL,cQo),e(Io,fQo),e(Io,ht),M(bL,ht,null),e(ht,mQo),e(ht,wue),e(wue,gQo),e(ht,hQo),e(ht,dd),e(dd,pQo),e(dd,Aue),e(Aue,_Qo),e(dd,uQo),e(dd,hz),e(hz,bQo),e(dd,vQo),e(ht,FQo),M(K3,ht,null),e(Io,TQo),e(Io,to),M(vL,to,null),e(to,MQo),e(to,Lue),e(Lue,EQo),e(to,CQo),e(to,Oa),e(Oa,wQo),e(Oa,yue),e(yue,AQo),e(Oa,LQo),e(Oa,xue),e(xue,yQo),e(Oa,xQo),e(Oa,$ue),e($ue,$Qo),e(Oa,kQo),e(to,SQo),e(to,Z),e(Z,Z3),e(Z3,kue),e(kue,RQo),e(Z3,PQo),e(Z3,pz),e(pz,BQo),e(Z3,IQo),e(Z,NQo),e(Z,ev),e(ev,Sue),e(Sue,qQo),e(ev,jQo),e(ev,_z),e(_z,DQo),e(ev,GQo),e(Z,OQo),e(Z,ov),e(ov,Rue),e(Rue,VQo),e(ov,XQo),e(ov,uz),e(uz,zQo),e(ov,WQo),e(Z,QQo),e(Z,rv),e(rv,Pue),e(Pue,HQo),e(rv,UQo),e(rv,bz),e(bz,JQo),e(rv,YQo),e(Z,KQo),e(Z,tv),e(tv,Bue),e(Bue,ZQo),e(tv,eHo),e(tv,vz),e(vz,oHo),e(tv,rHo),e(Z,tHo),e(Z,av),e(av,Iue),e(Iue,aHo),e(av,nHo),e(av,Fz),e(Fz,sHo),e(av,lHo),e(Z,iHo),e(Z,nv),e(nv,Nue),e(Nue,dHo),e(nv,cHo),e(nv,Tz),e(Tz,fHo),e(nv,mHo),e(Z,gHo),e(Z,sv),e(sv,que),e(que,hHo),e(sv,pHo),e(sv,Mz),e(Mz,_Ho),e(sv,uHo),e(Z,bHo),e(Z,lv),e(lv,jue),e(jue,vHo),e(lv,FHo),e(lv,Ez),e(Ez,THo),e(lv,MHo),e(Z,EHo),e(Z,iv),e(iv,Due),e(Due,CHo),e(iv,wHo),e(iv,Cz),e(Cz,AHo),e(iv,LHo),e(Z,yHo),e(Z,dv),e(dv,Gue),e(Gue,xHo),e(dv,$Ho),e(dv,wz),e(wz,kHo),e(dv,SHo),e(Z,RHo),e(Z,cv),e(cv,Oue),e(Oue,PHo),e(cv,BHo),e(cv,Az),e(Az,IHo),e(cv,NHo),e(Z,qHo),e(Z,fv),e(fv,Vue),e(Vue,jHo),e(fv,DHo),e(fv,Lz),e(Lz,GHo),e(fv,OHo),e(Z,VHo),e(Z,mv),e(mv,Xue),e(Xue,XHo),e(mv,zHo),e(mv,yz),e(yz,WHo),e(mv,QHo),e(Z,HHo),e(Z,gv),e(gv,zue),e(zue,UHo),e(gv,JHo),e(gv,xz),e(xz,YHo),e(gv,KHo),e(Z,ZHo),e(Z,hv),e(hv,Wue),e(Wue,eUo),e(hv,oUo),e(hv,$z),e($z,rUo),e(hv,tUo),e(Z,aUo),e(Z,pv),e(pv,Que),e(Que,nUo),e(pv,sUo),e(pv,kz),e(kz,lUo),e(pv,iUo),e(Z,dUo),e(Z,_v),e(_v,Hue),e(Hue,cUo),e(_v,fUo),e(_v,Sz),e(Sz,mUo),e(_v,gUo),e(Z,hUo),e(Z,uv),e(uv,Uue),e(Uue,pUo),e(uv,_Uo),e(uv,Rz),e(Rz,uUo),e(uv,bUo),e(Z,vUo),e(Z,bv),e(bv,Jue),e(Jue,FUo),e(bv,TUo),e(bv,Pz),e(Pz,MUo),e(bv,EUo),e(Z,CUo),e(Z,vv),e(vv,Yue),e(Yue,wUo),e(vv,AUo),e(vv,Bz),e(Bz,LUo),e(vv,yUo),e(Z,xUo),e(Z,Fv),e(Fv,Kue),e(Kue,$Uo),e(Fv,kUo),e(Fv,Iz),e(Iz,SUo),e(Fv,RUo),e(Z,PUo),e(Z,Tv),e(Tv,Zue),e(Zue,BUo),e(Tv,IUo),e(Tv,Nz),e(Nz,NUo),e(Tv,qUo),e(Z,jUo),e(Z,Mv),e(Mv,e1e),e(e1e,DUo),e(Mv,GUo),e(Mv,qz),e(qz,OUo),e(Mv,VUo),e(Z,XUo),e(Z,Ev),e(Ev,o1e),e(o1e,zUo),e(Ev,WUo),e(Ev,jz),e(jz,QUo),e(Ev,HUo),e(Z,UUo),e(Z,Cv),e(Cv,r1e),e(r1e,JUo),e(Cv,YUo),e(Cv,Dz),e(Dz,KUo),e(Cv,ZUo),e(Z,eJo),e(Z,wv),e(wv,t1e),e(t1e,oJo),e(wv,rJo),e(wv,Gz),e(Gz,tJo),e(wv,aJo),e(Z,nJo),e(Z,Av),e(Av,a1e),e(a1e,sJo),e(Av,lJo),e(Av,Oz),e(Oz,iJo),e(Av,dJo),e(Z,cJo),e(Z,Lv),e(Lv,n1e),e(n1e,fJo),e(Lv,mJo),e(Lv,Vz),e(Vz,gJo),e(Lv,hJo),e(Z,pJo),e(Z,yv),e(yv,s1e),e(s1e,_Jo),e(yv,uJo),e(yv,Xz),e(Xz,bJo),e(yv,vJo),e(to,FJo),e(to,xv),e(xv,TJo),e(xv,l1e),e(l1e,MJo),e(xv,EJo),e(xv,i1e),e(i1e,CJo),e(to,wJo),M($v,to,null),b(f,ize,u),b(f,cd,u),e(cd,kv),e(kv,d1e),M(FL,d1e,null),e(cd,AJo),e(cd,c1e),e(c1e,LJo),b(f,dze,u),b(f,No,u),M(TL,No,null),e(No,yJo),e(No,fd),e(fd,xJo),e(fd,zz),e(zz,$Jo),e(fd,kJo),e(fd,Wz),e(Wz,SJo),e(fd,RJo),e(No,PJo),e(No,ML),e(ML,BJo),e(ML,f1e),e(f1e,IJo),e(ML,NJo),e(No,qJo),e(No,pt),M(EL,pt,null),e(pt,jJo),e(pt,m1e),e(m1e,DJo),e(pt,GJo),e(pt,md),e(md,OJo),e(md,g1e),e(g1e,VJo),e(md,XJo),e(md,Qz),e(Qz,zJo),e(md,WJo),e(pt,QJo),M(Sv,pt,null),e(No,HJo),e(No,ao),M(CL,ao,null),e(ao,UJo),e(ao,h1e),e(h1e,JJo),e(ao,YJo),e(ao,Va),e(Va,KJo),e(Va,p1e),e(p1e,ZJo),e(Va,eYo),e(Va,_1e),e(_1e,oYo),e(Va,rYo),e(Va,u1e),e(u1e,tYo),e(Va,aYo),e(ao,nYo),e(ao,qo),e(qo,Rv),e(Rv,b1e),e(b1e,sYo),e(Rv,lYo),e(Rv,Hz),e(Hz,iYo),e(Rv,dYo),e(qo,cYo),e(qo,Pv),e(Pv,v1e),e(v1e,fYo),e(Pv,mYo),e(Pv,Uz),e(Uz,gYo),e(Pv,hYo),e(qo,pYo),e(qo,Bv),e(Bv,F1e),e(F1e,_Yo),e(Bv,uYo),e(Bv,Jz),e(Jz,bYo),e(Bv,vYo),e(qo,FYo),e(qo,Iv),e(Iv,T1e),e(T1e,TYo),e(Iv,MYo),e(Iv,Yz),e(Yz,EYo),e(Iv,CYo),e(qo,wYo),e(qo,Nv),e(Nv,M1e),e(M1e,AYo),e(Nv,LYo),e(Nv,Kz),e(Kz,yYo),e(Nv,xYo),e(qo,$Yo),e(qo,qv),e(qv,E1e),e(E1e,kYo),e(qv,SYo),e(qv,Zz),e(Zz,RYo),e(qv,PYo),e(ao,BYo),e(ao,jv),e(jv,IYo),e(jv,C1e),e(C1e,NYo),e(jv,qYo),e(jv,w1e),e(w1e,jYo),e(ao,DYo),M(Dv,ao,null),b(f,cze,u),b(f,gd,u),e(gd,Gv),e(Gv,A1e),M(wL,A1e,null),e(gd,GYo),e(gd,L1e),e(L1e,OYo),b(f,fze,u),b(f,jo,u),M(AL,jo,null),e(jo,VYo),e(jo,hd),e(hd,XYo),e(hd,eW),e(eW,zYo),e(hd,WYo),e(hd,oW),e(oW,QYo),e(hd,HYo),e(jo,UYo),e(jo,LL),e(LL,JYo),e(LL,y1e),e(y1e,YYo),e(LL,KYo),e(jo,ZYo),e(jo,_t),M(yL,_t,null),e(_t,eKo),e(_t,x1e),e(x1e,oKo),e(_t,rKo),e(_t,pd),e(pd,tKo),e(pd,$1e),e($1e,aKo),e(pd,nKo),e(pd,rW),e(rW,sKo),e(pd,lKo),e(_t,iKo),M(Ov,_t,null),e(jo,dKo),e(jo,no),M(xL,no,null),e(no,cKo),e(no,k1e),e(k1e,fKo),e(no,mKo),e(no,Xa),e(Xa,gKo),e(Xa,S1e),e(S1e,hKo),e(Xa,pKo),e(Xa,R1e),e(R1e,_Ko),e(Xa,uKo),e(Xa,P1e),e(P1e,bKo),e(Xa,vKo),e(no,FKo),e(no,U),e(U,Vv),e(Vv,B1e),e(B1e,TKo),e(Vv,MKo),e(Vv,tW),e(tW,EKo),e(Vv,CKo),e(U,wKo),e(U,Xv),e(Xv,I1e),e(I1e,AKo),e(Xv,LKo),e(Xv,aW),e(aW,yKo),e(Xv,xKo),e(U,$Ko),e(U,zv),e(zv,N1e),e(N1e,kKo),e(zv,SKo),e(zv,nW),e(nW,RKo),e(zv,PKo),e(U,BKo),e(U,Wv),e(Wv,q1e),e(q1e,IKo),e(Wv,NKo),e(Wv,sW),e(sW,qKo),e(Wv,jKo),e(U,DKo),e(U,Qv),e(Qv,j1e),e(j1e,GKo),e(Qv,OKo),e(Qv,lW),e(lW,VKo),e(Qv,XKo),e(U,zKo),e(U,Hv),e(Hv,D1e),e(D1e,WKo),e(Hv,QKo),e(Hv,iW),e(iW,HKo),e(Hv,UKo),e(U,JKo),e(U,Uv),e(Uv,G1e),e(G1e,YKo),e(Uv,KKo),e(Uv,dW),e(dW,ZKo),e(Uv,eZo),e(U,oZo),e(U,Jv),e(Jv,O1e),e(O1e,rZo),e(Jv,tZo),e(Jv,cW),e(cW,aZo),e(Jv,nZo),e(U,sZo),e(U,Yv),e(Yv,V1e),e(V1e,lZo),e(Yv,iZo),e(Yv,fW),e(fW,dZo),e(Yv,cZo),e(U,fZo),e(U,Kv),e(Kv,X1e),e(X1e,mZo),e(Kv,gZo),e(Kv,mW),e(mW,hZo),e(Kv,pZo),e(U,_Zo),e(U,Zv),e(Zv,z1e),e(z1e,uZo),e(Zv,bZo),e(Zv,gW),e(gW,vZo),e(Zv,FZo),e(U,TZo),e(U,eF),e(eF,W1e),e(W1e,MZo),e(eF,EZo),e(eF,hW),e(hW,CZo),e(eF,wZo),e(U,AZo),e(U,oF),e(oF,Q1e),e(Q1e,LZo),e(oF,yZo),e(oF,pW),e(pW,xZo),e(oF,$Zo),e(U,kZo),e(U,rF),e(rF,H1e),e(H1e,SZo),e(rF,RZo),e(rF,_W),e(_W,PZo),e(rF,BZo),e(U,IZo),e(U,tF),e(tF,U1e),e(U1e,NZo),e(tF,qZo),e(tF,uW),e(uW,jZo),e(tF,DZo),e(U,GZo),e(U,aF),e(aF,J1e),e(J1e,OZo),e(aF,VZo),e(aF,bW),e(bW,XZo),e(aF,zZo),e(U,WZo),e(U,nF),e(nF,Y1e),e(Y1e,QZo),e(nF,HZo),e(nF,vW),e(vW,UZo),e(nF,JZo),e(U,YZo),e(U,sF),e(sF,K1e),e(K1e,KZo),e(sF,ZZo),e(sF,FW),e(FW,eer),e(sF,oer),e(U,rer),e(U,lF),e(lF,Z1e),e(Z1e,ter),e(lF,aer),e(lF,TW),e(TW,ner),e(lF,ser),e(U,ler),e(U,iF),e(iF,e2e),e(e2e,ier),e(iF,der),e(iF,MW),e(MW,cer),e(iF,fer),e(U,mer),e(U,dF),e(dF,o2e),e(o2e,ger),e(dF,her),e(dF,EW),e(EW,per),e(dF,_er),e(U,uer),e(U,cF),e(cF,r2e),e(r2e,ber),e(cF,ver),e(cF,CW),e(CW,Fer),e(cF,Ter),e(U,Mer),e(U,fF),e(fF,t2e),e(t2e,Eer),e(fF,Cer),e(fF,wW),e(wW,wer),e(fF,Aer),e(U,Ler),e(U,mF),e(mF,a2e),e(a2e,yer),e(mF,xer),e(mF,AW),e(AW,$er),e(mF,ker),e(U,Ser),e(U,gF),e(gF,n2e),e(n2e,Rer),e(gF,Per),e(gF,LW),e(LW,Ber),e(gF,Ier),e(U,Ner),e(U,hF),e(hF,s2e),e(s2e,qer),e(hF,jer),e(hF,yW),e(yW,Der),e(hF,Ger),e(U,Oer),e(U,pF),e(pF,l2e),e(l2e,Ver),e(pF,Xer),e(pF,xW),e(xW,zer),e(pF,Wer),e(U,Qer),e(U,_F),e(_F,i2e),e(i2e,Her),e(_F,Uer),e(_F,$W),e($W,Jer),e(_F,Yer),e(U,Ker),e(U,uF),e(uF,d2e),e(d2e,Zer),e(uF,eor),e(uF,kW),e(kW,oor),e(uF,ror),e(U,tor),e(U,bF),e(bF,c2e),e(c2e,aor),e(bF,nor),e(bF,SW),e(SW,sor),e(bF,lor),e(U,ior),e(U,vF),e(vF,f2e),e(f2e,dor),e(vF,cor),e(vF,RW),e(RW,mor),e(vF,gor),e(U,hor),e(U,FF),e(FF,m2e),e(m2e,por),e(FF,_or),e(FF,PW),e(PW,uor),e(FF,bor),e(U,vor),e(U,TF),e(TF,g2e),e(g2e,For),e(TF,Tor),e(TF,BW),e(BW,Mor),e(TF,Eor),e(U,Cor),e(U,MF),e(MF,h2e),e(h2e,wor),e(MF,Aor),e(MF,IW),e(IW,Lor),e(MF,yor),e(U,xor),e(U,EF),e(EF,p2e),e(p2e,$or),e(EF,kor),e(EF,NW),e(NW,Sor),e(EF,Ror),e(U,Por),e(U,CF),e(CF,_2e),e(_2e,Bor),e(CF,Ior),e(CF,qW),e(qW,Nor),e(CF,qor),e(no,jor),e(no,wF),e(wF,Dor),e(wF,u2e),e(u2e,Gor),e(wF,Oor),e(wF,b2e),e(b2e,Vor),e(no,Xor),M(AF,no,null),b(f,mze,u),b(f,_d,u),e(_d,LF),e(LF,v2e),M($L,v2e,null),e(_d,zor),e(_d,F2e),e(F2e,Wor),b(f,gze,u),b(f,Do,u),M(kL,Do,null),e(Do,Qor),e(Do,ud),e(ud,Hor),e(ud,jW),e(jW,Uor),e(ud,Jor),e(ud,DW),e(DW,Yor),e(ud,Kor),e(Do,Zor),e(Do,SL),e(SL,err),e(SL,T2e),e(T2e,orr),e(SL,rrr),e(Do,trr),e(Do,ut),M(RL,ut,null),e(ut,arr),e(ut,M2e),e(M2e,nrr),e(ut,srr),e(ut,bd),e(bd,lrr),e(bd,E2e),e(E2e,irr),e(bd,drr),e(bd,GW),e(GW,crr),e(bd,frr),e(ut,mrr),M(yF,ut,null),e(Do,grr),e(Do,so),M(PL,so,null),e(so,hrr),e(so,C2e),e(C2e,prr),e(so,_rr),e(so,za),e(za,urr),e(za,w2e),e(w2e,brr),e(za,vrr),e(za,A2e),e(A2e,Frr),e(za,Trr),e(za,L2e),e(L2e,Mrr),e(za,Err),e(so,Crr),e(so,V),e(V,xF),e(xF,y2e),e(y2e,wrr),e(xF,Arr),e(xF,OW),e(OW,Lrr),e(xF,yrr),e(V,xrr),e(V,$F),e($F,x2e),e(x2e,$rr),e($F,krr),e($F,VW),e(VW,Srr),e($F,Rrr),e(V,Prr),e(V,kF),e(kF,$2e),e($2e,Brr),e(kF,Irr),e(kF,XW),e(XW,Nrr),e(kF,qrr),e(V,jrr),e(V,SF),e(SF,k2e),e(k2e,Drr),e(SF,Grr),e(SF,zW),e(zW,Orr),e(SF,Vrr),e(V,Xrr),e(V,RF),e(RF,S2e),e(S2e,zrr),e(RF,Wrr),e(RF,WW),e(WW,Qrr),e(RF,Hrr),e(V,Urr),e(V,PF),e(PF,R2e),e(R2e,Jrr),e(PF,Yrr),e(PF,QW),e(QW,Krr),e(PF,Zrr),e(V,etr),e(V,BF),e(BF,P2e),e(P2e,otr),e(BF,rtr),e(BF,HW),e(HW,ttr),e(BF,atr),e(V,ntr),e(V,IF),e(IF,B2e),e(B2e,str),e(IF,ltr),e(IF,UW),e(UW,itr),e(IF,dtr),e(V,ctr),e(V,NF),e(NF,I2e),e(I2e,ftr),e(NF,mtr),e(NF,JW),e(JW,gtr),e(NF,htr),e(V,ptr),e(V,qF),e(qF,N2e),e(N2e,_tr),e(qF,utr),e(qF,YW),e(YW,btr),e(qF,vtr),e(V,Ftr),e(V,jF),e(jF,q2e),e(q2e,Ttr),e(jF,Mtr),e(jF,KW),e(KW,Etr),e(jF,Ctr),e(V,wtr),e(V,DF),e(DF,j2e),e(j2e,Atr),e(DF,Ltr),e(DF,ZW),e(ZW,ytr),e(DF,xtr),e(V,$tr),e(V,GF),e(GF,D2e),e(D2e,ktr),e(GF,Str),e(GF,eQ),e(eQ,Rtr),e(GF,Ptr),e(V,Btr),e(V,OF),e(OF,G2e),e(G2e,Itr),e(OF,Ntr),e(OF,oQ),e(oQ,qtr),e(OF,jtr),e(V,Dtr),e(V,VF),e(VF,O2e),e(O2e,Gtr),e(VF,Otr),e(VF,rQ),e(rQ,Vtr),e(VF,Xtr),e(V,ztr),e(V,XF),e(XF,V2e),e(V2e,Wtr),e(XF,Qtr),e(XF,tQ),e(tQ,Htr),e(XF,Utr),e(V,Jtr),e(V,zF),e(zF,X2e),e(X2e,Ytr),e(zF,Ktr),e(zF,aQ),e(aQ,Ztr),e(zF,ear),e(V,oar),e(V,WF),e(WF,z2e),e(z2e,rar),e(WF,tar),e(WF,nQ),e(nQ,aar),e(WF,nar),e(V,sar),e(V,QF),e(QF,W2e),e(W2e,lar),e(QF,iar),e(QF,sQ),e(sQ,dar),e(QF,car),e(V,far),e(V,HF),e(HF,Q2e),e(Q2e,mar),e(HF,gar),e(HF,lQ),e(lQ,har),e(HF,par),e(V,_ar),e(V,UF),e(UF,H2e),e(H2e,uar),e(UF,bar),e(UF,iQ),e(iQ,Far),e(UF,Tar),e(V,Mar),e(V,JF),e(JF,U2e),e(U2e,Ear),e(JF,Car),e(JF,dQ),e(dQ,war),e(JF,Aar),e(V,Lar),e(V,YF),e(YF,J2e),e(J2e,yar),e(YF,xar),e(YF,cQ),e(cQ,$ar),e(YF,kar),e(V,Sar),e(V,KF),e(KF,Y2e),e(Y2e,Rar),e(KF,Par),e(KF,fQ),e(fQ,Bar),e(KF,Iar),e(V,Nar),e(V,ZF),e(ZF,K2e),e(K2e,qar),e(ZF,jar),e(ZF,mQ),e(mQ,Dar),e(ZF,Gar),e(V,Oar),e(V,eT),e(eT,Z2e),e(Z2e,Var),e(eT,Xar),e(eT,gQ),e(gQ,zar),e(eT,War),e(V,Qar),e(V,oT),e(oT,ebe),e(ebe,Har),e(oT,Uar),e(oT,hQ),e(hQ,Jar),e(oT,Yar),e(V,Kar),e(V,rT),e(rT,obe),e(obe,Zar),e(rT,enr),e(rT,pQ),e(pQ,onr),e(rT,rnr),e(V,tnr),e(V,tT),e(tT,rbe),e(rbe,anr),e(tT,nnr),e(tT,_Q),e(_Q,snr),e(tT,lnr),e(V,inr),e(V,aT),e(aT,tbe),e(tbe,dnr),e(aT,cnr),e(aT,uQ),e(uQ,fnr),e(aT,mnr),e(V,gnr),e(V,nT),e(nT,abe),e(abe,hnr),e(nT,pnr),e(nT,bQ),e(bQ,_nr),e(nT,unr),e(V,bnr),e(V,sT),e(sT,nbe),e(nbe,vnr),e(sT,Fnr),e(sT,vQ),e(vQ,Tnr),e(sT,Mnr),e(V,Enr),e(V,lT),e(lT,sbe),e(sbe,Cnr),e(lT,wnr),e(lT,FQ),e(FQ,Anr),e(lT,Lnr),e(V,ynr),e(V,iT),e(iT,lbe),e(lbe,xnr),e(iT,$nr),e(iT,TQ),e(TQ,knr),e(iT,Snr),e(V,Rnr),e(V,dT),e(dT,ibe),e(ibe,Pnr),e(dT,Bnr),e(dT,MQ),e(MQ,Inr),e(dT,Nnr),e(V,qnr),e(V,cT),e(cT,dbe),e(dbe,jnr),e(cT,Dnr),e(cT,EQ),e(EQ,Gnr),e(cT,Onr),e(V,Vnr),e(V,fT),e(fT,cbe),e(cbe,Xnr),e(fT,znr),e(fT,CQ),e(CQ,Wnr),e(fT,Qnr),e(V,Hnr),e(V,mT),e(mT,fbe),e(fbe,Unr),e(mT,Jnr),e(mT,wQ),e(wQ,Ynr),e(mT,Knr),e(V,Znr),e(V,gT),e(gT,mbe),e(mbe,esr),e(gT,osr),e(gT,AQ),e(AQ,rsr),e(gT,tsr),e(V,asr),e(V,hT),e(hT,gbe),e(gbe,nsr),e(hT,ssr),e(hT,LQ),e(LQ,lsr),e(hT,isr),e(V,dsr),e(V,pT),e(pT,hbe),e(hbe,csr),e(pT,fsr),e(pT,yQ),e(yQ,msr),e(pT,gsr),e(V,hsr),e(V,_T),e(_T,pbe),e(pbe,psr),e(_T,_sr),e(_T,xQ),e(xQ,usr),e(_T,bsr),e(so,vsr),e(so,uT),e(uT,Fsr),e(uT,_be),e(_be,Tsr),e(uT,Msr),e(uT,ube),e(ube,Esr),e(so,Csr),M(bT,so,null),b(f,hze,u),b(f,vd,u),e(vd,vT),e(vT,bbe),M(BL,bbe,null),e(vd,wsr),e(vd,vbe),e(vbe,Asr),b(f,pze,u),b(f,Go,u),M(IL,Go,null),e(Go,Lsr),e(Go,Fd),e(Fd,ysr),e(Fd,$Q),e($Q,xsr),e(Fd,$sr),e(Fd,kQ),e(kQ,ksr),e(Fd,Ssr),e(Go,Rsr),e(Go,NL),e(NL,Psr),e(NL,Fbe),e(Fbe,Bsr),e(NL,Isr),e(Go,Nsr),e(Go,bt),M(qL,bt,null),e(bt,qsr),e(bt,Tbe),e(Tbe,jsr),e(bt,Dsr),e(bt,Td),e(Td,Gsr),e(Td,Mbe),e(Mbe,Osr),e(Td,Vsr),e(Td,SQ),e(SQ,Xsr),e(Td,zsr),e(bt,Wsr),M(FT,bt,null),e(Go,Qsr),e(Go,lo),M(jL,lo,null),e(lo,Hsr),e(lo,Ebe),e(Ebe,Usr),e(lo,Jsr),e(lo,Wa),e(Wa,Ysr),e(Wa,Cbe),e(Cbe,Ksr),e(Wa,Zsr),e(Wa,wbe),e(wbe,elr),e(Wa,olr),e(Wa,Abe),e(Abe,rlr),e(Wa,tlr),e(lo,alr),e(lo,Lbe),e(Lbe,TT),e(TT,ybe),e(ybe,nlr),e(TT,slr),e(TT,RQ),e(RQ,llr),e(TT,ilr),e(lo,dlr),e(lo,MT),e(MT,clr),e(MT,xbe),e(xbe,flr),e(MT,mlr),e(MT,$be),e($be,glr),e(lo,hlr),M(ET,lo,null),b(f,_ze,u),b(f,Md,u),e(Md,CT),e(CT,kbe),M(DL,kbe,null),e(Md,plr),e(Md,Sbe),e(Sbe,_lr),b(f,uze,u),b(f,Oo,u),M(GL,Oo,null),e(Oo,ulr),e(Oo,Ed),e(Ed,blr),e(Ed,PQ),e(PQ,vlr),e(Ed,Flr),e(Ed,BQ),e(BQ,Tlr),e(Ed,Mlr),e(Oo,Elr),e(Oo,OL),e(OL,Clr),e(OL,Rbe),e(Rbe,wlr),e(OL,Alr),e(Oo,Llr),e(Oo,vt),M(VL,vt,null),e(vt,ylr),e(vt,Pbe),e(Pbe,xlr),e(vt,$lr),e(vt,Cd),e(Cd,klr),e(Cd,Bbe),e(Bbe,Slr),e(Cd,Rlr),e(Cd,IQ),e(IQ,Plr),e(Cd,Blr),e(vt,Ilr),M(wT,vt,null),e(Oo,Nlr),e(Oo,io),M(XL,io,null),e(io,qlr),e(io,Ibe),e(Ibe,jlr),e(io,Dlr),e(io,Qa),e(Qa,Glr),e(Qa,Nbe),e(Nbe,Olr),e(Qa,Vlr),e(Qa,qbe),e(qbe,Xlr),e(Qa,zlr),e(Qa,jbe),e(jbe,Wlr),e(Qa,Qlr),e(io,Hlr),e(io,ve),e(ve,AT),e(AT,Dbe),e(Dbe,Ulr),e(AT,Jlr),e(AT,NQ),e(NQ,Ylr),e(AT,Klr),e(ve,Zlr),e(ve,LT),e(LT,Gbe),e(Gbe,eir),e(LT,oir),e(LT,qQ),e(qQ,rir),e(LT,tir),e(ve,air),e(ve,yT),e(yT,Obe),e(Obe,nir),e(yT,sir),e(yT,jQ),e(jQ,lir),e(yT,iir),e(ve,dir),e(ve,xT),e(xT,Vbe),e(Vbe,cir),e(xT,fir),e(xT,DQ),e(DQ,mir),e(xT,gir),e(ve,hir),e(ve,Js),e(Js,Xbe),e(Xbe,pir),e(Js,_ir),e(Js,GQ),e(GQ,uir),e(Js,bir),e(Js,OQ),e(OQ,vir),e(Js,Fir),e(ve,Tir),e(ve,$T),e($T,zbe),e(zbe,Mir),e($T,Eir),e($T,VQ),e(VQ,Cir),e($T,wir),e(ve,Air),e(ve,Ys),e(Ys,Wbe),e(Wbe,Lir),e(Ys,yir),e(Ys,XQ),e(XQ,xir),e(Ys,$ir),e(Ys,zQ),e(zQ,kir),e(Ys,Sir),e(ve,Rir),e(ve,kT),e(kT,Qbe),e(Qbe,Pir),e(kT,Bir),e(kT,WQ),e(WQ,Iir),e(kT,Nir),e(ve,qir),e(ve,Ft),e(Ft,Hbe),e(Hbe,jir),e(Ft,Dir),e(Ft,QQ),e(QQ,Gir),e(Ft,Oir),e(Ft,HQ),e(HQ,Vir),e(Ft,Xir),e(Ft,UQ),e(UQ,zir),e(Ft,Wir),e(ve,Qir),e(ve,ST),e(ST,Ube),e(Ube,Hir),e(ST,Uir),e(ST,JQ),e(JQ,Jir),e(ST,Yir),e(ve,Kir),e(ve,RT),e(RT,Jbe),e(Jbe,Zir),e(RT,edr),e(RT,YQ),e(YQ,odr),e(RT,rdr),e(ve,tdr),e(ve,PT),e(PT,Ybe),e(Ybe,adr),e(PT,ndr),e(PT,KQ),e(KQ,sdr),e(PT,ldr),e(ve,idr),e(ve,BT),e(BT,Kbe),e(Kbe,ddr),e(BT,cdr),e(BT,ZQ),e(ZQ,fdr),e(BT,mdr),e(ve,gdr),e(ve,IT),e(IT,Zbe),e(Zbe,hdr),e(IT,pdr),e(IT,eH),e(eH,_dr),e(IT,udr),e(ve,bdr),e(ve,NT),e(NT,e3e),e(e3e,vdr),e(NT,Fdr),e(NT,oH),e(oH,Tdr),e(NT,Mdr),e(ve,Edr),e(ve,qT),e(qT,o3e),e(o3e,Cdr),e(qT,wdr),e(qT,rH),e(rH,Adr),e(qT,Ldr),e(io,ydr),e(io,jT),e(jT,xdr),e(jT,r3e),e(r3e,$dr),e(jT,kdr),e(jT,t3e),e(t3e,Sdr),e(io,Rdr),M(DT,io,null),b(f,bze,u),b(f,wd,u),e(wd,GT),e(GT,a3e),M(zL,a3e,null),e(wd,Pdr),e(wd,n3e),e(n3e,Bdr),b(f,vze,u),b(f,Vo,u),M(WL,Vo,null),e(Vo,Idr),e(Vo,Ad),e(Ad,Ndr),e(Ad,tH),e(tH,qdr),e(Ad,jdr),e(Ad,aH),e(aH,Ddr),e(Ad,Gdr),e(Vo,Odr),e(Vo,QL),e(QL,Vdr),e(QL,s3e),e(s3e,Xdr),e(QL,zdr),e(Vo,Wdr),e(Vo,Tt),M(HL,Tt,null),e(Tt,Qdr),e(Tt,l3e),e(l3e,Hdr),e(Tt,Udr),e(Tt,Ld),e(Ld,Jdr),e(Ld,i3e),e(i3e,Ydr),e(Ld,Kdr),e(Ld,nH),e(nH,Zdr),e(Ld,ecr),e(Tt,ocr),M(OT,Tt,null),e(Vo,rcr),e(Vo,co),M(UL,co,null),e(co,tcr),e(co,d3e),e(d3e,acr),e(co,ncr),e(co,Ha),e(Ha,scr),e(Ha,c3e),e(c3e,lcr),e(Ha,icr),e(Ha,f3e),e(f3e,dcr),e(Ha,ccr),e(Ha,m3e),e(m3e,fcr),e(Ha,mcr),e(co,gcr),e(co,g3e),e(g3e,VT),e(VT,h3e),e(h3e,hcr),e(VT,pcr),e(VT,sH),e(sH,_cr),e(VT,ucr),e(co,bcr),e(co,XT),e(XT,vcr),e(XT,p3e),e(p3e,Fcr),e(XT,Tcr),e(XT,_3e),e(_3e,Mcr),e(co,Ecr),M(zT,co,null),b(f,Fze,u),b(f,yd,u),e(yd,WT),e(WT,u3e),M(JL,u3e,null),e(yd,Ccr),e(yd,b3e),e(b3e,wcr),b(f,Tze,u),b(f,Xo,u),M(YL,Xo,null),e(Xo,Acr),e(Xo,xd),e(xd,Lcr),e(xd,lH),e(lH,ycr),e(xd,xcr),e(xd,iH),e(iH,$cr),e(xd,kcr),e(Xo,Scr),e(Xo,KL),e(KL,Rcr),e(KL,v3e),e(v3e,Pcr),e(KL,Bcr),e(Xo,Icr),e(Xo,Mt),M(ZL,Mt,null),e(Mt,Ncr),e(Mt,F3e),e(F3e,qcr),e(Mt,jcr),e(Mt,$d),e($d,Dcr),e($d,T3e),e(T3e,Gcr),e($d,Ocr),e($d,dH),e(dH,Vcr),e($d,Xcr),e(Mt,zcr),M(QT,Mt,null),e(Xo,Wcr),e(Xo,fo),M(ey,fo,null),e(fo,Qcr),e(fo,M3e),e(M3e,Hcr),e(fo,Ucr),e(fo,Ua),e(Ua,Jcr),e(Ua,E3e),e(E3e,Ycr),e(Ua,Kcr),e(Ua,C3e),e(C3e,Zcr),e(Ua,efr),e(Ua,w3e),e(w3e,ofr),e(Ua,rfr),e(fo,tfr),e(fo,A3e),e(A3e,HT),e(HT,L3e),e(L3e,afr),e(HT,nfr),e(HT,cH),e(cH,sfr),e(HT,lfr),e(fo,ifr),e(fo,UT),e(UT,dfr),e(UT,y3e),e(y3e,cfr),e(UT,ffr),e(UT,x3e),e(x3e,mfr),e(fo,gfr),M(JT,fo,null),b(f,Mze,u),b(f,kd,u),e(kd,YT),e(YT,$3e),M(oy,$3e,null),e(kd,hfr),e(kd,k3e),e(k3e,pfr),b(f,Eze,u),b(f,zo,u),M(ry,zo,null),e(zo,_fr),e(zo,Sd),e(Sd,ufr),e(Sd,fH),e(fH,bfr),e(Sd,vfr),e(Sd,mH),e(mH,Ffr),e(Sd,Tfr),e(zo,Mfr),e(zo,ty),e(ty,Efr),e(ty,S3e),e(S3e,Cfr),e(ty,wfr),e(zo,Afr),e(zo,Et),M(ay,Et,null),e(Et,Lfr),e(Et,R3e),e(R3e,yfr),e(Et,xfr),e(Et,Rd),e(Rd,$fr),e(Rd,P3e),e(P3e,kfr),e(Rd,Sfr),e(Rd,gH),e(gH,Rfr),e(Rd,Pfr),e(Et,Bfr),M(KT,Et,null),e(zo,Ifr),e(zo,mo),M(ny,mo,null),e(mo,Nfr),e(mo,B3e),e(B3e,qfr),e(mo,jfr),e(mo,Ja),e(Ja,Dfr),e(Ja,I3e),e(I3e,Gfr),e(Ja,Ofr),e(Ja,N3e),e(N3e,Vfr),e(Ja,Xfr),e(Ja,q3e),e(q3e,zfr),e(Ja,Wfr),e(mo,Qfr),e(mo,Pe),e(Pe,ZT),e(ZT,j3e),e(j3e,Hfr),e(ZT,Ufr),e(ZT,hH),e(hH,Jfr),e(ZT,Yfr),e(Pe,Kfr),e(Pe,e7),e(e7,D3e),e(D3e,Zfr),e(e7,emr),e(e7,pH),e(pH,omr),e(e7,rmr),e(Pe,tmr),e(Pe,o7),e(o7,G3e),e(G3e,amr),e(o7,nmr),e(o7,_H),e(_H,smr),e(o7,lmr),e(Pe,imr),e(Pe,r7),e(r7,O3e),e(O3e,dmr),e(r7,cmr),e(r7,uH),e(uH,fmr),e(r7,mmr),e(Pe,gmr),e(Pe,t7),e(t7,V3e),e(V3e,hmr),e(t7,pmr),e(t7,bH),e(bH,_mr),e(t7,umr),e(Pe,bmr),e(Pe,a7),e(a7,X3e),e(X3e,vmr),e(a7,Fmr),e(a7,vH),e(vH,Tmr),e(a7,Mmr),e(Pe,Emr),e(Pe,n7),e(n7,z3e),e(z3e,Cmr),e(n7,wmr),e(n7,FH),e(FH,Amr),e(n7,Lmr),e(Pe,ymr),e(Pe,s7),e(s7,W3e),e(W3e,xmr),e(s7,$mr),e(s7,TH),e(TH,kmr),e(s7,Smr),e(Pe,Rmr),e(Pe,l7),e(l7,Q3e),e(Q3e,Pmr),e(l7,Bmr),e(l7,MH),e(MH,Imr),e(l7,Nmr),e(mo,qmr),e(mo,i7),e(i7,jmr),e(i7,H3e),e(H3e,Dmr),e(i7,Gmr),e(i7,U3e),e(U3e,Omr),e(mo,Vmr),M(d7,mo,null),b(f,Cze,u),b(f,Pd,u),e(Pd,c7),e(c7,J3e),M(sy,J3e,null),e(Pd,Xmr),e(Pd,Y3e),e(Y3e,zmr),b(f,wze,u),b(f,Wo,u),M(ly,Wo,null),e(Wo,Wmr),e(Wo,Bd),e(Bd,Qmr),e(Bd,EH),e(EH,Hmr),e(Bd,Umr),e(Bd,CH),e(CH,Jmr),e(Bd,Ymr),e(Wo,Kmr),e(Wo,iy),e(iy,Zmr),e(iy,K3e),e(K3e,egr),e(iy,ogr),e(Wo,rgr),e(Wo,Ct),M(dy,Ct,null),e(Ct,tgr),e(Ct,Z3e),e(Z3e,agr),e(Ct,ngr),e(Ct,Id),e(Id,sgr),e(Id,eve),e(eve,lgr),e(Id,igr),e(Id,wH),e(wH,dgr),e(Id,cgr),e(Ct,fgr),M(f7,Ct,null),e(Wo,mgr),e(Wo,go),M(cy,go,null),e(go,ggr),e(go,ove),e(ove,hgr),e(go,pgr),e(go,Ya),e(Ya,_gr),e(Ya,rve),e(rve,ugr),e(Ya,bgr),e(Ya,tve),e(tve,vgr),e(Ya,Fgr),e(Ya,ave),e(ave,Tgr),e(Ya,Mgr),e(go,Egr),e(go,rt),e(rt,m7),e(m7,nve),e(nve,Cgr),e(m7,wgr),e(m7,AH),e(AH,Agr),e(m7,Lgr),e(rt,ygr),e(rt,g7),e(g7,sve),e(sve,xgr),e(g7,$gr),e(g7,LH),e(LH,kgr),e(g7,Sgr),e(rt,Rgr),e(rt,h7),e(h7,lve),e(lve,Pgr),e(h7,Bgr),e(h7,yH),e(yH,Igr),e(h7,Ngr),e(rt,qgr),e(rt,p7),e(p7,ive),e(ive,jgr),e(p7,Dgr),e(p7,xH),e(xH,Ggr),e(p7,Ogr),e(rt,Vgr),e(rt,_7),e(_7,dve),e(dve,Xgr),e(_7,zgr),e(_7,$H),e($H,Wgr),e(_7,Qgr),e(go,Hgr),e(go,u7),e(u7,Ugr),e(u7,cve),e(cve,Jgr),e(u7,Ygr),e(u7,fve),e(fve,Kgr),e(go,Zgr),M(b7,go,null),b(f,Aze,u),b(f,Nd,u),e(Nd,v7),e(v7,mve),M(fy,mve,null),e(Nd,ehr),e(Nd,gve),e(gve,ohr),b(f,Lze,u),b(f,Qo,u),M(my,Qo,null),e(Qo,rhr),e(Qo,qd),e(qd,thr),e(qd,kH),e(kH,ahr),e(qd,nhr),e(qd,SH),e(SH,shr),e(qd,lhr),e(Qo,ihr),e(Qo,gy),e(gy,dhr),e(gy,hve),e(hve,chr),e(gy,fhr),e(Qo,mhr),e(Qo,wt),M(hy,wt,null),e(wt,ghr),e(wt,pve),e(pve,hhr),e(wt,phr),e(wt,jd),e(jd,_hr),e(jd,_ve),e(_ve,uhr),e(jd,bhr),e(jd,RH),e(RH,vhr),e(jd,Fhr),e(wt,Thr),M(F7,wt,null),e(Qo,Mhr),e(Qo,ho),M(py,ho,null),e(ho,Ehr),e(ho,uve),e(uve,Chr),e(ho,whr),e(ho,Ka),e(Ka,Ahr),e(Ka,bve),e(bve,Lhr),e(Ka,yhr),e(Ka,vve),e(vve,xhr),e(Ka,$hr),e(Ka,Fve),e(Fve,khr),e(Ka,Shr),e(ho,Rhr),e(ho,Le),e(Le,T7),e(T7,Tve),e(Tve,Phr),e(T7,Bhr),e(T7,PH),e(PH,Ihr),e(T7,Nhr),e(Le,qhr),e(Le,M7),e(M7,Mve),e(Mve,jhr),e(M7,Dhr),e(M7,BH),e(BH,Ghr),e(M7,Ohr),e(Le,Vhr),e(Le,E7),e(E7,Eve),e(Eve,Xhr),e(E7,zhr),e(E7,IH),e(IH,Whr),e(E7,Qhr),e(Le,Hhr),e(Le,C7),e(C7,Cve),e(Cve,Uhr),e(C7,Jhr),e(C7,NH),e(NH,Yhr),e(C7,Khr),e(Le,Zhr),e(Le,w7),e(w7,wve),e(wve,epr),e(w7,opr),e(w7,qH),e(qH,rpr),e(w7,tpr),e(Le,apr),e(Le,A7),e(A7,Ave),e(Ave,npr),e(A7,spr),e(A7,jH),e(jH,lpr),e(A7,ipr),e(Le,dpr),e(Le,L7),e(L7,Lve),e(Lve,cpr),e(L7,fpr),e(L7,DH),e(DH,mpr),e(L7,gpr),e(Le,hpr),e(Le,y7),e(y7,yve),e(yve,ppr),e(y7,_pr),e(y7,GH),e(GH,upr),e(y7,bpr),e(Le,vpr),e(Le,x7),e(x7,xve),e(xve,Fpr),e(x7,Tpr),e(x7,OH),e(OH,Mpr),e(x7,Epr),e(Le,Cpr),e(Le,$7),e($7,$ve),e($ve,wpr),e($7,Apr),e($7,VH),e(VH,Lpr),e($7,ypr),e(ho,xpr),e(ho,k7),e(k7,$pr),e(k7,kve),e(kve,kpr),e(k7,Spr),e(k7,Sve),e(Sve,Rpr),e(ho,Ppr),M(S7,ho,null),b(f,yze,u),b(f,Dd,u),e(Dd,R7),e(R7,Rve),M(_y,Rve,null),e(Dd,Bpr),e(Dd,Pve),e(Pve,Ipr),b(f,xze,u),b(f,Ho,u),M(uy,Ho,null),e(Ho,Npr),e(Ho,Gd),e(Gd,qpr),e(Gd,XH),e(XH,jpr),e(Gd,Dpr),e(Gd,zH),e(zH,Gpr),e(Gd,Opr),e(Ho,Vpr),e(Ho,by),e(by,Xpr),e(by,Bve),e(Bve,zpr),e(by,Wpr),e(Ho,Qpr),e(Ho,At),M(vy,At,null),e(At,Hpr),e(At,Ive),e(Ive,Upr),e(At,Jpr),e(At,Od),e(Od,Ypr),e(Od,Nve),e(Nve,Kpr),e(Od,Zpr),e(Od,WH),e(WH,e_r),e(Od,o_r),e(At,r_r),M(P7,At,null),e(Ho,t_r),e(Ho,po),M(Fy,po,null),e(po,a_r),e(po,qve),e(qve,n_r),e(po,s_r),e(po,Za),e(Za,l_r),e(Za,jve),e(jve,i_r),e(Za,d_r),e(Za,Dve),e(Dve,c_r),e(Za,f_r),e(Za,Gve),e(Gve,m_r),e(Za,g_r),e(po,h_r),e(po,Ty),e(Ty,B7),e(B7,Ove),e(Ove,p_r),e(B7,__r),e(B7,QH),e(QH,u_r),e(B7,b_r),e(Ty,v_r),e(Ty,I7),e(I7,Vve),e(Vve,F_r),e(I7,T_r),e(I7,HH),e(HH,M_r),e(I7,E_r),e(po,C_r),e(po,N7),e(N7,w_r),e(N7,Xve),e(Xve,A_r),e(N7,L_r),e(N7,zve),e(zve,y_r),e(po,x_r),M(q7,po,null),b(f,$ze,u),b(f,Vd,u),e(Vd,j7),e(j7,Wve),M(My,Wve,null),e(Vd,$_r),e(Vd,Qve),e(Qve,k_r),b(f,kze,u),b(f,Uo,u),M(Ey,Uo,null),e(Uo,S_r),e(Uo,Xd),e(Xd,R_r),e(Xd,UH),e(UH,P_r),e(Xd,B_r),e(Xd,JH),e(JH,I_r),e(Xd,N_r),e(Uo,q_r),e(Uo,Cy),e(Cy,j_r),e(Cy,Hve),e(Hve,D_r),e(Cy,G_r),e(Uo,O_r),e(Uo,Lt),M(wy,Lt,null),e(Lt,V_r),e(Lt,Uve),e(Uve,X_r),e(Lt,z_r),e(Lt,zd),e(zd,W_r),e(zd,Jve),e(Jve,Q_r),e(zd,H_r),e(zd,YH),e(YH,U_r),e(zd,J_r),e(Lt,Y_r),M(D7,Lt,null),e(Uo,K_r),e(Uo,_o),M(Ay,_o,null),e(_o,Z_r),e(_o,Yve),e(Yve,eur),e(_o,our),e(_o,en),e(en,rur),e(en,Kve),e(Kve,tur),e(en,aur),e(en,Zve),e(Zve,nur),e(en,sur),e(en,eFe),e(eFe,lur),e(en,iur),e(_o,dur),e(_o,tt),e(tt,G7),e(G7,oFe),e(oFe,cur),e(G7,fur),e(G7,KH),e(KH,mur),e(G7,gur),e(tt,hur),e(tt,O7),e(O7,rFe),e(rFe,pur),e(O7,_ur),e(O7,ZH),e(ZH,uur),e(O7,bur),e(tt,vur),e(tt,V7),e(V7,tFe),e(tFe,Fur),e(V7,Tur),e(V7,eU),e(eU,Mur),e(V7,Eur),e(tt,Cur),e(tt,X7),e(X7,aFe),e(aFe,wur),e(X7,Aur),e(X7,oU),e(oU,Lur),e(X7,yur),e(tt,xur),e(tt,z7),e(z7,nFe),e(nFe,$ur),e(z7,kur),e(z7,rU),e(rU,Sur),e(z7,Rur),e(_o,Pur),e(_o,W7),e(W7,Bur),e(W7,sFe),e(sFe,Iur),e(W7,Nur),e(W7,lFe),e(lFe,qur),e(_o,jur),M(Q7,_o,null),b(f,Sze,u),b(f,Wd,u),e(Wd,H7),e(H7,iFe),M(Ly,iFe,null),e(Wd,Dur),e(Wd,dFe),e(dFe,Gur),b(f,Rze,u),b(f,Jo,u),M(yy,Jo,null),e(Jo,Our),e(Jo,Qd),e(Qd,Vur),e(Qd,tU),e(tU,Xur),e(Qd,zur),e(Qd,aU),e(aU,Wur),e(Qd,Qur),e(Jo,Hur),e(Jo,xy),e(xy,Uur),e(xy,cFe),e(cFe,Jur),e(xy,Yur),e(Jo,Kur),e(Jo,yt),M($y,yt,null),e(yt,Zur),e(yt,fFe),e(fFe,e1r),e(yt,o1r),e(yt,Hd),e(Hd,r1r),e(Hd,mFe),e(mFe,t1r),e(Hd,a1r),e(Hd,nU),e(nU,n1r),e(Hd,s1r),e(yt,l1r),M(U7,yt,null),e(Jo,i1r),e(Jo,uo),M(ky,uo,null),e(uo,d1r),e(uo,gFe),e(gFe,c1r),e(uo,f1r),e(uo,on),e(on,m1r),e(on,hFe),e(hFe,g1r),e(on,h1r),e(on,pFe),e(pFe,p1r),e(on,_1r),e(on,_Fe),e(_Fe,u1r),e(on,b1r),e(uo,v1r),e(uo,Ud),e(Ud,J7),e(J7,uFe),e(uFe,F1r),e(J7,T1r),e(J7,sU),e(sU,M1r),e(J7,E1r),e(Ud,C1r),e(Ud,Y7),e(Y7,bFe),e(bFe,w1r),e(Y7,A1r),e(Y7,lU),e(lU,L1r),e(Y7,y1r),e(Ud,x1r),e(Ud,K7),e(K7,vFe),e(vFe,$1r),e(K7,k1r),e(K7,iU),e(iU,S1r),e(K7,R1r),e(uo,P1r),e(uo,Z7),e(Z7,B1r),e(Z7,FFe),e(FFe,I1r),e(Z7,N1r),e(Z7,TFe),e(TFe,q1r),e(uo,j1r),M(e8,uo,null),b(f,Pze,u),b(f,Jd,u),e(Jd,o8),e(o8,MFe),M(Sy,MFe,null),e(Jd,D1r),e(Jd,EFe),e(EFe,G1r),b(f,Bze,u),b(f,Yo,u),M(Ry,Yo,null),e(Yo,O1r),e(Yo,Yd),e(Yd,V1r),e(Yd,dU),e(dU,X1r),e(Yd,z1r),e(Yd,cU),e(cU,W1r),e(Yd,Q1r),e(Yo,H1r),e(Yo,Py),e(Py,U1r),e(Py,CFe),e(CFe,J1r),e(Py,Y1r),e(Yo,K1r),e(Yo,xt),M(By,xt,null),e(xt,Z1r),e(xt,wFe),e(wFe,e2r),e(xt,o2r),e(xt,Kd),e(Kd,r2r),e(Kd,AFe),e(AFe,t2r),e(Kd,a2r),e(Kd,fU),e(fU,n2r),e(Kd,s2r),e(xt,l2r),M(r8,xt,null),e(Yo,i2r),e(Yo,bo),M(Iy,bo,null),e(bo,d2r),e(bo,LFe),e(LFe,c2r),e(bo,f2r),e(bo,rn),e(rn,m2r),e(rn,yFe),e(yFe,g2r),e(rn,h2r),e(rn,xFe),e(xFe,p2r),e(rn,_2r),e(rn,$Fe),e($Fe,u2r),e(rn,b2r),e(bo,v2r),e(bo,Ny),e(Ny,t8),e(t8,kFe),e(kFe,F2r),e(t8,T2r),e(t8,mU),e(mU,M2r),e(t8,E2r),e(Ny,C2r),e(Ny,a8),e(a8,SFe),e(SFe,w2r),e(a8,A2r),e(a8,gU),e(gU,L2r),e(a8,y2r),e(bo,x2r),e(bo,n8),e(n8,$2r),e(n8,RFe),e(RFe,k2r),e(n8,S2r),e(n8,PFe),e(PFe,R2r),e(bo,P2r),M(s8,bo,null),b(f,Ize,u),b(f,Zd,u),e(Zd,l8),e(l8,BFe),M(qy,BFe,null),e(Zd,B2r),e(Zd,IFe),e(IFe,I2r),b(f,Nze,u),b(f,Ko,u),M(jy,Ko,null),e(Ko,N2r),e(Ko,ec),e(ec,q2r),e(ec,hU),e(hU,j2r),e(ec,D2r),e(ec,pU),e(pU,G2r),e(ec,O2r),e(Ko,V2r),e(Ko,Dy),e(Dy,X2r),e(Dy,NFe),e(NFe,z2r),e(Dy,W2r),e(Ko,Q2r),e(Ko,$t),M(Gy,$t,null),e($t,H2r),e($t,qFe),e(qFe,U2r),e($t,J2r),e($t,oc),e(oc,Y2r),e(oc,jFe),e(jFe,K2r),e(oc,Z2r),e(oc,_U),e(_U,ebr),e(oc,obr),e($t,rbr),M(i8,$t,null),e(Ko,tbr),e(Ko,vo),M(Oy,vo,null),e(vo,abr),e(vo,DFe),e(DFe,nbr),e(vo,sbr),e(vo,tn),e(tn,lbr),e(tn,GFe),e(GFe,ibr),e(tn,dbr),e(tn,OFe),e(OFe,cbr),e(tn,fbr),e(tn,VFe),e(VFe,mbr),e(tn,gbr),e(vo,hbr),e(vo,XFe),e(XFe,d8),e(d8,zFe),e(zFe,pbr),e(d8,_br),e(d8,uU),e(uU,ubr),e(d8,bbr),e(vo,vbr),e(vo,c8),e(c8,Fbr),e(c8,WFe),e(WFe,Tbr),e(c8,Mbr),e(c8,QFe),e(QFe,Ebr),e(vo,Cbr),M(f8,vo,null),b(f,qze,u),b(f,rc,u),e(rc,m8),e(m8,HFe),M(Vy,HFe,null),e(rc,wbr),e(rc,UFe),e(UFe,Abr),b(f,jze,u),b(f,Zo,u),M(Xy,Zo,null),e(Zo,Lbr),e(Zo,tc),e(tc,ybr),e(tc,bU),e(bU,xbr),e(tc,$br),e(tc,vU),e(vU,kbr),e(tc,Sbr),e(Zo,Rbr),e(Zo,zy),e(zy,Pbr),e(zy,JFe),e(JFe,Bbr),e(zy,Ibr),e(Zo,Nbr),e(Zo,kt),M(Wy,kt,null),e(kt,qbr),e(kt,YFe),e(YFe,jbr),e(kt,Dbr),e(kt,ac),e(ac,Gbr),e(ac,KFe),e(KFe,Obr),e(ac,Vbr),e(ac,FU),e(FU,Xbr),e(ac,zbr),e(kt,Wbr),M(g8,kt,null),e(Zo,Qbr),e(Zo,Fo),M(Qy,Fo,null),e(Fo,Hbr),e(Fo,ZFe),e(ZFe,Ubr),e(Fo,Jbr),e(Fo,an),e(an,Ybr),e(an,eTe),e(eTe,Kbr),e(an,Zbr),e(an,oTe),e(oTe,e3r),e(an,o3r),e(an,rTe),e(rTe,r3r),e(an,t3r),e(Fo,a3r),e(Fo,at),e(at,h8),e(h8,tTe),e(tTe,n3r),e(h8,s3r),e(h8,TU),e(TU,l3r),e(h8,i3r),e(at,d3r),e(at,p8),e(p8,aTe),e(aTe,c3r),e(p8,f3r),e(p8,MU),e(MU,m3r),e(p8,g3r),e(at,h3r),e(at,_8),e(_8,nTe),e(nTe,p3r),e(_8,_3r),e(_8,EU),e(EU,u3r),e(_8,b3r),e(at,v3r),e(at,u8),e(u8,sTe),e(sTe,F3r),e(u8,T3r),e(u8,CU),e(CU,M3r),e(u8,E3r),e(at,C3r),e(at,b8),e(b8,lTe),e(lTe,w3r),e(b8,A3r),e(b8,wU),e(wU,L3r),e(b8,y3r),e(Fo,x3r),e(Fo,v8),e(v8,$3r),e(v8,iTe),e(iTe,k3r),e(v8,S3r),e(v8,dTe),e(dTe,R3r),e(Fo,P3r),M(F8,Fo,null),b(f,Dze,u),b(f,nc,u),e(nc,T8),e(T8,cTe),M(Hy,cTe,null),e(nc,B3r),e(nc,fTe),e(fTe,I3r),b(f,Gze,u),b(f,er,u),M(Uy,er,null),e(er,N3r),e(er,sc),e(sc,q3r),e(sc,AU),e(AU,j3r),e(sc,D3r),e(sc,LU),e(LU,G3r),e(sc,O3r),e(er,V3r),e(er,Jy),e(Jy,X3r),e(Jy,mTe),e(mTe,z3r),e(Jy,W3r),e(er,Q3r),e(er,St),M(Yy,St,null),e(St,H3r),e(St,gTe),e(gTe,U3r),e(St,J3r),e(St,lc),e(lc,Y3r),e(lc,hTe),e(hTe,K3r),e(lc,Z3r),e(lc,yU),e(yU,evr),e(lc,ovr),e(St,rvr),M(M8,St,null),e(er,tvr),e(er,To),M(Ky,To,null),e(To,avr),e(To,pTe),e(pTe,nvr),e(To,svr),e(To,nn),e(nn,lvr),e(nn,_Te),e(_Te,ivr),e(nn,dvr),e(nn,uTe),e(uTe,cvr),e(nn,fvr),e(nn,bTe),e(bTe,mvr),e(nn,gvr),e(To,hvr),e(To,vTe),e(vTe,E8),e(E8,FTe),e(FTe,pvr),e(E8,_vr),e(E8,xU),e(xU,uvr),e(E8,bvr),e(To,vvr),e(To,C8),e(C8,Fvr),e(C8,TTe),e(TTe,Tvr),e(C8,Mvr),e(C8,MTe),e(MTe,Evr),e(To,Cvr),M(w8,To,null),b(f,Oze,u),b(f,ic,u),e(ic,A8),e(A8,ETe),M(Zy,ETe,null),e(ic,wvr),e(ic,CTe),e(CTe,Avr),b(f,Vze,u),b(f,or,u),M(ex,or,null),e(or,Lvr),e(or,dc),e(dc,yvr),e(dc,$U),e($U,xvr),e(dc,$vr),e(dc,kU),e(kU,kvr),e(dc,Svr),e(or,Rvr),e(or,ox),e(ox,Pvr),e(ox,wTe),e(wTe,Bvr),e(ox,Ivr),e(or,Nvr),e(or,Rt),M(rx,Rt,null),e(Rt,qvr),e(Rt,ATe),e(ATe,jvr),e(Rt,Dvr),e(Rt,cc),e(cc,Gvr),e(cc,LTe),e(LTe,Ovr),e(cc,Vvr),e(cc,SU),e(SU,Xvr),e(cc,zvr),e(Rt,Wvr),M(L8,Rt,null),e(or,Qvr),e(or,xr),M(tx,xr,null),e(xr,Hvr),e(xr,yTe),e(yTe,Uvr),e(xr,Jvr),e(xr,sn),e(sn,Yvr),e(sn,xTe),e(xTe,Kvr),e(sn,Zvr),e(sn,$Te),e($Te,eFr),e(sn,oFr),e(sn,kTe),e(kTe,rFr),e(sn,tFr),e(xr,aFr),e(xr,q),e(q,y8),e(y8,STe),e(STe,nFr),e(y8,sFr),e(y8,RU),e(RU,lFr),e(y8,iFr),e(q,dFr),e(q,x8),e(x8,RTe),e(RTe,cFr),e(x8,fFr),e(x8,PU),e(PU,mFr),e(x8,gFr),e(q,hFr),e(q,$8),e($8,PTe),e(PTe,pFr),e($8,_Fr),e($8,BU),e(BU,uFr),e($8,bFr),e(q,vFr),e(q,k8),e(k8,BTe),e(BTe,FFr),e(k8,TFr),e(k8,IU),e(IU,MFr),e(k8,EFr),e(q,CFr),e(q,S8),e(S8,ITe),e(ITe,wFr),e(S8,AFr),e(S8,NU),e(NU,LFr),e(S8,yFr),e(q,xFr),e(q,R8),e(R8,NTe),e(NTe,$Fr),e(R8,kFr),e(R8,qU),e(qU,SFr),e(R8,RFr),e(q,PFr),e(q,P8),e(P8,qTe),e(qTe,BFr),e(P8,IFr),e(P8,jU),e(jU,NFr),e(P8,qFr),e(q,jFr),e(q,B8),e(B8,jTe),e(jTe,DFr),e(B8,GFr),e(B8,DU),e(DU,OFr),e(B8,VFr),e(q,XFr),e(q,I8),e(I8,DTe),e(DTe,zFr),e(I8,WFr),e(I8,GU),e(GU,QFr),e(I8,HFr),e(q,UFr),e(q,N8),e(N8,GTe),e(GTe,JFr),e(N8,YFr),e(N8,OU),e(OU,KFr),e(N8,ZFr),e(q,eTr),e(q,q8),e(q8,OTe),e(OTe,oTr),e(q8,rTr),e(q8,VU),e(VU,tTr),e(q8,aTr),e(q,nTr),e(q,j8),e(j8,VTe),e(VTe,sTr),e(j8,lTr),e(j8,XU),e(XU,iTr),e(j8,dTr),e(q,cTr),e(q,D8),e(D8,XTe),e(XTe,fTr),e(D8,mTr),e(D8,zU),e(zU,gTr),e(D8,hTr),e(q,pTr),e(q,G8),e(G8,zTe),e(zTe,_Tr),e(G8,uTr),e(G8,WU),e(WU,bTr),e(G8,vTr),e(q,FTr),e(q,O8),e(O8,WTe),e(WTe,TTr),e(O8,MTr),e(O8,QU),e(QU,ETr),e(O8,CTr),e(q,wTr),e(q,V8),e(V8,QTe),e(QTe,ATr),e(V8,LTr),e(V8,HU),e(HU,yTr),e(V8,xTr),e(q,$Tr),e(q,X8),e(X8,HTe),e(HTe,kTr),e(X8,STr),e(X8,UU),e(UU,RTr),e(X8,PTr),e(q,BTr),e(q,z8),e(z8,UTe),e(UTe,ITr),e(z8,NTr),e(z8,JU),e(JU,qTr),e(z8,jTr),e(q,DTr),e(q,Ks),e(Ks,JTe),e(JTe,GTr),e(Ks,OTr),e(Ks,YU),e(YU,VTr),e(Ks,XTr),e(Ks,KU),e(KU,zTr),e(Ks,WTr),e(q,QTr),e(q,W8),e(W8,YTe),e(YTe,HTr),e(W8,UTr),e(W8,ZU),e(ZU,JTr),e(W8,YTr),e(q,KTr),e(q,Q8),e(Q8,KTe),e(KTe,ZTr),e(Q8,e7r),e(Q8,eJ),e(eJ,o7r),e(Q8,r7r),e(q,t7r),e(q,H8),e(H8,ZTe),e(ZTe,a7r),e(H8,n7r),e(H8,oJ),e(oJ,s7r),e(H8,l7r),e(q,i7r),e(q,U8),e(U8,e7e),e(e7e,d7r),e(U8,c7r),e(U8,rJ),e(rJ,f7r),e(U8,m7r),e(q,g7r),e(q,J8),e(J8,o7e),e(o7e,h7r),e(J8,p7r),e(J8,tJ),e(tJ,_7r),e(J8,u7r),e(q,b7r),e(q,Y8),e(Y8,r7e),e(r7e,v7r),e(Y8,F7r),e(Y8,aJ),e(aJ,T7r),e(Y8,M7r),e(q,E7r),e(q,K8),e(K8,t7e),e(t7e,C7r),e(K8,w7r),e(K8,nJ),e(nJ,A7r),e(K8,L7r),e(q,y7r),e(q,Z8),e(Z8,a7e),e(a7e,x7r),e(Z8,$7r),e(Z8,sJ),e(sJ,k7r),e(Z8,S7r),e(q,R7r),e(q,e9),e(e9,n7e),e(n7e,P7r),e(e9,B7r),e(e9,lJ),e(lJ,I7r),e(e9,N7r),e(q,q7r),e(q,o9),e(o9,s7e),e(s7e,j7r),e(o9,D7r),e(o9,iJ),e(iJ,G7r),e(o9,O7r),e(q,V7r),e(q,r9),e(r9,l7e),e(l7e,X7r),e(r9,z7r),e(r9,dJ),e(dJ,W7r),e(r9,Q7r),e(q,H7r),e(q,t9),e(t9,i7e),e(i7e,U7r),e(t9,J7r),e(t9,cJ),e(cJ,Y7r),e(t9,K7r),e(q,Z7r),e(q,a9),e(a9,d7e),e(d7e,e8r),e(a9,o8r),e(a9,fJ),e(fJ,r8r),e(a9,t8r),e(q,a8r),e(q,n9),e(n9,c7e),e(c7e,n8r),e(n9,s8r),e(n9,mJ),e(mJ,l8r),e(n9,i8r),e(q,d8r),e(q,s9),e(s9,f7e),e(f7e,c8r),e(s9,f8r),e(s9,gJ),e(gJ,m8r),e(s9,g8r),e(q,h8r),e(q,l9),e(l9,m7e),e(m7e,p8r),e(l9,_8r),e(l9,hJ),e(hJ,u8r),e(l9,b8r),e(q,v8r),e(q,i9),e(i9,g7e),e(g7e,F8r),e(i9,T8r),e(i9,pJ),e(pJ,M8r),e(i9,E8r),e(q,C8r),e(q,d9),e(d9,h7e),e(h7e,w8r),e(d9,A8r),e(d9,_J),e(_J,L8r),e(d9,y8r),e(q,x8r),e(q,c9),e(c9,p7e),e(p7e,$8r),e(c9,k8r),e(c9,uJ),e(uJ,S8r),e(c9,R8r),e(q,P8r),e(q,f9),e(f9,_7e),e(_7e,B8r),e(f9,I8r),e(f9,bJ),e(bJ,N8r),e(f9,q8r),e(q,j8r),e(q,m9),e(m9,u7e),e(u7e,D8r),e(m9,G8r),e(m9,vJ),e(vJ,O8r),e(m9,V8r),e(q,X8r),e(q,g9),e(g9,b7e),e(b7e,z8r),e(g9,W8r),e(g9,FJ),e(FJ,Q8r),e(g9,H8r),e(q,U8r),e(q,h9),e(h9,v7e),e(v7e,J8r),e(h9,Y8r),e(h9,TJ),e(TJ,K8r),e(h9,Z8r),e(q,e9r),e(q,p9),e(p9,F7e),e(F7e,o9r),e(p9,r9r),e(p9,MJ),e(MJ,t9r),e(p9,a9r),e(q,n9r),e(q,_9),e(_9,T7e),e(T7e,s9r),e(_9,l9r),e(_9,EJ),e(EJ,i9r),e(_9,d9r),e(q,c9r),e(q,u9),e(u9,M7e),e(M7e,f9r),e(u9,m9r),e(u9,CJ),e(CJ,g9r),e(u9,h9r),e(q,p9r),e(q,b9),e(b9,E7e),e(E7e,_9r),e(b9,u9r),e(b9,wJ),e(wJ,b9r),e(b9,v9r),e(q,F9r),e(q,v9),e(v9,C7e),e(C7e,T9r),e(v9,M9r),e(v9,AJ),e(AJ,E9r),e(v9,C9r),e(q,w9r),e(q,F9),e(F9,w7e),e(w7e,A9r),e(F9,L9r),e(F9,LJ),e(LJ,y9r),e(F9,x9r),e(q,$9r),e(q,T9),e(T9,A7e),e(A7e,k9r),e(T9,S9r),e(T9,yJ),e(yJ,R9r),e(T9,P9r),e(q,B9r),e(q,M9),e(M9,L7e),e(L7e,I9r),e(M9,N9r),e(M9,xJ),e(xJ,q9r),e(M9,j9r),e(xr,D9r),M(E9,xr,null),b(f,Xze,u),b(f,fc,u),e(fc,C9),e(C9,y7e),M(ax,y7e,null),e(fc,G9r),e(fc,x7e),e(x7e,O9r),b(f,zze,u),b(f,rr,u),M(nx,rr,null),e(rr,V9r),e(rr,mc),e(mc,X9r),e(mc,$J),e($J,z9r),e(mc,W9r),e(mc,kJ),e(kJ,Q9r),e(mc,H9r),e(rr,U9r),e(rr,sx),e(sx,J9r),e(sx,$7e),e($7e,Y9r),e(sx,K9r),e(rr,Z9r),e(rr,Pt),M(lx,Pt,null),e(Pt,eMr),e(Pt,k7e),e(k7e,oMr),e(Pt,rMr),e(Pt,gc),e(gc,tMr),e(gc,S7e),e(S7e,aMr),e(gc,nMr),e(gc,SJ),e(SJ,sMr),e(gc,lMr),e(Pt,iMr),M(w9,Pt,null),e(rr,dMr),e(rr,$r),M(ix,$r,null),e($r,cMr),e($r,R7e),e(R7e,fMr),e($r,mMr),e($r,ln),e(ln,gMr),e(ln,P7e),e(P7e,hMr),e(ln,pMr),e(ln,B7e),e(B7e,_Mr),e(ln,uMr),e(ln,I7e),e(I7e,bMr),e(ln,vMr),e($r,FMr),e($r,se),e(se,A9),e(A9,N7e),e(N7e,TMr),e(A9,MMr),e(A9,RJ),e(RJ,EMr),e(A9,CMr),e(se,wMr),e(se,L9),e(L9,q7e),e(q7e,AMr),e(L9,LMr),e(L9,PJ),e(PJ,yMr),e(L9,xMr),e(se,$Mr),e(se,y9),e(y9,j7e),e(j7e,kMr),e(y9,SMr),e(y9,BJ),e(BJ,RMr),e(y9,PMr),e(se,BMr),e(se,x9),e(x9,D7e),e(D7e,IMr),e(x9,NMr),e(x9,IJ),e(IJ,qMr),e(x9,jMr),e(se,DMr),e(se,$9),e($9,G7e),e(G7e,GMr),e($9,OMr),e($9,NJ),e(NJ,VMr),e($9,XMr),e(se,zMr),e(se,k9),e(k9,O7e),e(O7e,WMr),e(k9,QMr),e(k9,qJ),e(qJ,HMr),e(k9,UMr),e(se,JMr),e(se,S9),e(S9,V7e),e(V7e,YMr),e(S9,KMr),e(S9,jJ),e(jJ,ZMr),e(S9,e4r),e(se,o4r),e(se,R9),e(R9,X7e),e(X7e,r4r),e(R9,t4r),e(R9,DJ),e(DJ,a4r),e(R9,n4r),e(se,s4r),e(se,P9),e(P9,z7e),e(z7e,l4r),e(P9,i4r),e(P9,GJ),e(GJ,d4r),e(P9,c4r),e(se,f4r),e(se,B9),e(B9,W7e),e(W7e,m4r),e(B9,g4r),e(B9,OJ),e(OJ,h4r),e(B9,p4r),e(se,_4r),e(se,I9),e(I9,Q7e),e(Q7e,u4r),e(I9,b4r),e(I9,VJ),e(VJ,v4r),e(I9,F4r),e(se,T4r),e(se,N9),e(N9,H7e),e(H7e,M4r),e(N9,E4r),e(N9,XJ),e(XJ,C4r),e(N9,w4r),e(se,A4r),e(se,q9),e(q9,U7e),e(U7e,L4r),e(q9,y4r),e(q9,zJ),e(zJ,x4r),e(q9,$4r),e(se,k4r),e(se,j9),e(j9,J7e),e(J7e,S4r),e(j9,R4r),e(j9,WJ),e(WJ,P4r),e(j9,B4r),e(se,I4r),e(se,D9),e(D9,Y7e),e(Y7e,N4r),e(D9,q4r),e(D9,QJ),e(QJ,j4r),e(D9,D4r),e(se,G4r),e(se,G9),e(G9,K7e),e(K7e,O4r),e(G9,V4r),e(G9,HJ),e(HJ,X4r),e(G9,z4r),e(se,W4r),e(se,O9),e(O9,Z7e),e(Z7e,Q4r),e(O9,H4r),e(O9,UJ),e(UJ,U4r),e(O9,J4r),e(se,Y4r),e(se,V9),e(V9,e8e),e(e8e,K4r),e(V9,Z4r),e(V9,JJ),e(JJ,eEr),e(V9,oEr),e(se,rEr),e(se,X9),e(X9,o8e),e(o8e,tEr),e(X9,aEr),e(X9,YJ),e(YJ,nEr),e(X9,sEr),e(se,lEr),e(se,z9),e(z9,r8e),e(r8e,iEr),e(z9,dEr),e(z9,KJ),e(KJ,cEr),e(z9,fEr),e(se,mEr),e(se,W9),e(W9,t8e),e(t8e,gEr),e(W9,hEr),e(W9,ZJ),e(ZJ,pEr),e(W9,_Er),e(se,uEr),e(se,Q9),e(Q9,a8e),e(a8e,bEr),e(Q9,vEr),e(Q9,eY),e(eY,FEr),e(Q9,TEr),e(se,MEr),e(se,H9),e(H9,n8e),e(n8e,EEr),e(H9,CEr),e(H9,oY),e(oY,wEr),e(H9,AEr),e($r,LEr),M(U9,$r,null),b(f,Wze,u),b(f,hc,u),e(hc,J9),e(J9,s8e),M(dx,s8e,null),e(hc,yEr),e(hc,l8e),e(l8e,xEr),b(f,Qze,u),b(f,tr,u),M(cx,tr,null),e(tr,$Er),e(tr,pc),e(pc,kEr),e(pc,rY),e(rY,SEr),e(pc,REr),e(pc,tY),e(tY,PEr),e(pc,BEr),e(tr,IEr),e(tr,fx),e(fx,NEr),e(fx,i8e),e(i8e,qEr),e(fx,jEr),e(tr,DEr),e(tr,Bt),M(mx,Bt,null),e(Bt,GEr),e(Bt,d8e),e(d8e,OEr),e(Bt,VEr),e(Bt,_c),e(_c,XEr),e(_c,c8e),e(c8e,zEr),e(_c,WEr),e(_c,aY),e(aY,QEr),e(_c,HEr),e(Bt,UEr),M(Y9,Bt,null),e(tr,JEr),e(tr,kr),M(gx,kr,null),e(kr,YEr),e(kr,f8e),e(f8e,KEr),e(kr,ZEr),e(kr,dn),e(dn,eCr),e(dn,m8e),e(m8e,oCr),e(dn,rCr),e(dn,g8e),e(g8e,tCr),e(dn,aCr),e(dn,h8e),e(h8e,nCr),e(dn,sCr),e(kr,lCr),e(kr,Me),e(Me,K9),e(K9,p8e),e(p8e,iCr),e(K9,dCr),e(K9,nY),e(nY,cCr),e(K9,fCr),e(Me,mCr),e(Me,Z9),e(Z9,_8e),e(_8e,gCr),e(Z9,hCr),e(Z9,sY),e(sY,pCr),e(Z9,_Cr),e(Me,uCr),e(Me,eM),e(eM,u8e),e(u8e,bCr),e(eM,vCr),e(eM,lY),e(lY,FCr),e(eM,TCr),e(Me,MCr),e(Me,oM),e(oM,b8e),e(b8e,ECr),e(oM,CCr),e(oM,iY),e(iY,wCr),e(oM,ACr),e(Me,LCr),e(Me,rM),e(rM,v8e),e(v8e,yCr),e(rM,xCr),e(rM,dY),e(dY,$Cr),e(rM,kCr),e(Me,SCr),e(Me,tM),e(tM,F8e),e(F8e,RCr),e(tM,PCr),e(tM,cY),e(cY,BCr),e(tM,ICr),e(Me,NCr),e(Me,aM),e(aM,T8e),e(T8e,qCr),e(aM,jCr),e(aM,fY),e(fY,DCr),e(aM,GCr),e(Me,OCr),e(Me,nM),e(nM,M8e),e(M8e,VCr),e(nM,XCr),e(nM,mY),e(mY,zCr),e(nM,WCr),e(Me,QCr),e(Me,sM),e(sM,E8e),e(E8e,HCr),e(sM,UCr),e(sM,gY),e(gY,JCr),e(sM,YCr),e(Me,KCr),e(Me,lM),e(lM,C8e),e(C8e,ZCr),e(lM,e5r),e(lM,hY),e(hY,o5r),e(lM,r5r),e(Me,t5r),e(Me,iM),e(iM,w8e),e(w8e,a5r),e(iM,n5r),e(iM,pY),e(pY,s5r),e(iM,l5r),e(Me,i5r),e(Me,dM),e(dM,A8e),e(A8e,d5r),e(dM,c5r),e(dM,_Y),e(_Y,f5r),e(dM,m5r),e(Me,g5r),e(Me,cM),e(cM,L8e),e(L8e,h5r),e(cM,p5r),e(cM,uY),e(uY,_5r),e(cM,u5r),e(kr,b5r),M(fM,kr,null),b(f,Hze,u),b(f,uc,u),e(uc,mM),e(mM,y8e),M(hx,y8e,null),e(uc,v5r),e(uc,x8e),e(x8e,F5r),b(f,Uze,u),b(f,ar,u),M(px,ar,null),e(ar,T5r),e(ar,bc),e(bc,M5r),e(bc,bY),e(bY,E5r),e(bc,C5r),e(bc,vY),e(vY,w5r),e(bc,A5r),e(ar,L5r),e(ar,_x),e(_x,y5r),e(_x,$8e),e($8e,x5r),e(_x,$5r),e(ar,k5r),e(ar,It),M(ux,It,null),e(It,S5r),e(It,k8e),e(k8e,R5r),e(It,P5r),e(It,vc),e(vc,B5r),e(vc,S8e),e(S8e,I5r),e(vc,N5r),e(vc,FY),e(FY,q5r),e(vc,j5r),e(It,D5r),M(gM,It,null),e(ar,G5r),e(ar,Sr),M(bx,Sr,null),e(Sr,O5r),e(Sr,R8e),e(R8e,V5r),e(Sr,X5r),e(Sr,cn),e(cn,z5r),e(cn,P8e),e(P8e,W5r),e(cn,Q5r),e(cn,B8e),e(B8e,H5r),e(cn,U5r),e(cn,I8e),e(I8e,J5r),e(cn,Y5r),e(Sr,K5r),e(Sr,We),e(We,hM),e(hM,N8e),e(N8e,Z5r),e(hM,e0r),e(hM,TY),e(TY,o0r),e(hM,r0r),e(We,t0r),e(We,pM),e(pM,q8e),e(q8e,a0r),e(pM,n0r),e(pM,MY),e(MY,s0r),e(pM,l0r),e(We,i0r),e(We,Zs),e(Zs,j8e),e(j8e,d0r),e(Zs,c0r),e(Zs,EY),e(EY,f0r),e(Zs,m0r),e(Zs,CY),e(CY,g0r),e(Zs,h0r),e(We,p0r),e(We,_M),e(_M,D8e),e(D8e,_0r),e(_M,u0r),e(_M,wY),e(wY,b0r),e(_M,v0r),e(We,F0r),e(We,uM),e(uM,G8e),e(G8e,T0r),e(uM,M0r),e(uM,AY),e(AY,E0r),e(uM,C0r),e(We,w0r),e(We,bM),e(bM,O8e),e(O8e,A0r),e(bM,L0r),e(bM,LY),e(LY,y0r),e(bM,x0r),e(We,$0r),e(We,vM),e(vM,V8e),e(V8e,k0r),e(vM,S0r),e(vM,yY),e(yY,R0r),e(vM,P0r),e(Sr,B0r),M(FM,Sr,null),b(f,Jze,u),b(f,Fc,u),e(Fc,TM),e(TM,X8e),M(vx,X8e,null),e(Fc,I0r),e(Fc,z8e),e(z8e,N0r),b(f,Yze,u),b(f,nr,u),M(Fx,nr,null),e(nr,q0r),e(nr,Tc),e(Tc,j0r),e(Tc,xY),e(xY,D0r),e(Tc,G0r),e(Tc,$Y),e($Y,O0r),e(Tc,V0r),e(nr,X0r),e(nr,Tx),e(Tx,z0r),e(Tx,W8e),e(W8e,W0r),e(Tx,Q0r),e(nr,H0r),e(nr,Nt),M(Mx,Nt,null),e(Nt,U0r),e(Nt,Q8e),e(Q8e,J0r),e(Nt,Y0r),e(Nt,Mc),e(Mc,K0r),e(Mc,H8e),e(H8e,Z0r),e(Mc,ewr),e(Mc,kY),e(kY,owr),e(Mc,rwr),e(Nt,twr),M(MM,Nt,null),e(nr,awr),e(nr,Rr),M(Ex,Rr,null),e(Rr,nwr),e(Rr,U8e),e(U8e,swr),e(Rr,lwr),e(Rr,fn),e(fn,iwr),e(fn,J8e),e(J8e,dwr),e(fn,cwr),e(fn,Y8e),e(Y8e,fwr),e(fn,mwr),e(fn,K8e),e(K8e,gwr),e(fn,hwr),e(Rr,pwr),e(Rr,ie),e(ie,EM),e(EM,Z8e),e(Z8e,_wr),e(EM,uwr),e(EM,SY),e(SY,bwr),e(EM,vwr),e(ie,Fwr),e(ie,CM),e(CM,e9e),e(e9e,Twr),e(CM,Mwr),e(CM,RY),e(RY,Ewr),e(CM,Cwr),e(ie,wwr),e(ie,wM),e(wM,o9e),e(o9e,Awr),e(wM,Lwr),e(wM,PY),e(PY,ywr),e(wM,xwr),e(ie,$wr),e(ie,AM),e(AM,r9e),e(r9e,kwr),e(AM,Swr),e(AM,BY),e(BY,Rwr),e(AM,Pwr),e(ie,Bwr),e(ie,LM),e(LM,t9e),e(t9e,Iwr),e(LM,Nwr),e(LM,IY),e(IY,qwr),e(LM,jwr),e(ie,Dwr),e(ie,yM),e(yM,a9e),e(a9e,Gwr),e(yM,Owr),e(yM,NY),e(NY,Vwr),e(yM,Xwr),e(ie,zwr),e(ie,xM),e(xM,n9e),e(n9e,Wwr),e(xM,Qwr),e(xM,qY),e(qY,Hwr),e(xM,Uwr),e(ie,Jwr),e(ie,$M),e($M,s9e),e(s9e,Ywr),e($M,Kwr),e($M,jY),e(jY,Zwr),e($M,eAr),e(ie,oAr),e(ie,kM),e(kM,l9e),e(l9e,rAr),e(kM,tAr),e(kM,DY),e(DY,aAr),e(kM,nAr),e(ie,sAr),e(ie,SM),e(SM,i9e),e(i9e,lAr),e(SM,iAr),e(SM,GY),e(GY,dAr),e(SM,cAr),e(ie,fAr),e(ie,RM),e(RM,d9e),e(d9e,mAr),e(RM,gAr),e(RM,OY),e(OY,hAr),e(RM,pAr),e(ie,_Ar),e(ie,PM),e(PM,c9e),e(c9e,uAr),e(PM,bAr),e(PM,VY),e(VY,vAr),e(PM,FAr),e(ie,TAr),e(ie,BM),e(BM,f9e),e(f9e,MAr),e(BM,EAr),e(BM,XY),e(XY,CAr),e(BM,wAr),e(ie,AAr),e(ie,IM),e(IM,m9e),e(m9e,LAr),e(IM,yAr),e(IM,zY),e(zY,xAr),e(IM,$Ar),e(ie,kAr),e(ie,NM),e(NM,g9e),e(g9e,SAr),e(NM,RAr),e(NM,WY),e(WY,PAr),e(NM,BAr),e(ie,IAr),e(ie,qM),e(qM,h9e),e(h9e,NAr),e(qM,qAr),e(qM,QY),e(QY,jAr),e(qM,DAr),e(ie,GAr),e(ie,jM),e(jM,p9e),e(p9e,OAr),e(jM,VAr),e(jM,HY),e(HY,XAr),e(jM,zAr),e(ie,WAr),e(ie,DM),e(DM,_9e),e(_9e,QAr),e(DM,HAr),e(DM,UY),e(UY,UAr),e(DM,JAr),e(ie,YAr),e(ie,GM),e(GM,u9e),e(u9e,KAr),e(GM,ZAr),e(GM,JY),e(JY,e6r),e(GM,o6r),e(ie,r6r),e(ie,OM),e(OM,b9e),e(b9e,t6r),e(OM,a6r),e(OM,YY),e(YY,n6r),e(OM,s6r),e(Rr,l6r),M(VM,Rr,null),b(f,Kze,u),b(f,Ec,u),e(Ec,XM),e(XM,v9e),M(Cx,v9e,null),e(Ec,i6r),e(Ec,F9e),e(F9e,d6r),b(f,Zze,u),b(f,sr,u),M(wx,sr,null),e(sr,c6r),e(sr,Cc),e(Cc,f6r),e(Cc,KY),e(KY,m6r),e(Cc,g6r),e(Cc,ZY),e(ZY,h6r),e(Cc,p6r),e(sr,_6r),e(sr,Ax),e(Ax,u6r),e(Ax,T9e),e(T9e,b6r),e(Ax,v6r),e(sr,F6r),e(sr,qt),M(Lx,qt,null),e(qt,T6r),e(qt,M9e),e(M9e,M6r),e(qt,E6r),e(qt,wc),e(wc,C6r),e(wc,E9e),e(E9e,w6r),e(wc,A6r),e(wc,eK),e(eK,L6r),e(wc,y6r),e(qt,x6r),M(zM,qt,null),e(sr,$6r),e(sr,Pr),M(yx,Pr,null),e(Pr,k6r),e(Pr,C9e),e(C9e,S6r),e(Pr,R6r),e(Pr,mn),e(mn,P6r),e(mn,w9e),e(w9e,B6r),e(mn,I6r),e(mn,A9e),e(A9e,N6r),e(mn,q6r),e(mn,L9e),e(L9e,j6r),e(mn,D6r),e(Pr,G6r),e(Pr,ye),e(ye,WM),e(WM,y9e),e(y9e,O6r),e(WM,V6r),e(WM,oK),e(oK,X6r),e(WM,z6r),e(ye,W6r),e(ye,QM),e(QM,x9e),e(x9e,Q6r),e(QM,H6r),e(QM,rK),e(rK,U6r),e(QM,J6r),e(ye,Y6r),e(ye,HM),e(HM,$9e),e($9e,K6r),e(HM,Z6r),e(HM,tK),e(tK,eLr),e(HM,oLr),e(ye,rLr),e(ye,UM),e(UM,k9e),e(k9e,tLr),e(UM,aLr),e(UM,aK),e(aK,nLr),e(UM,sLr),e(ye,lLr),e(ye,JM),e(JM,S9e),e(S9e,iLr),e(JM,dLr),e(JM,nK),e(nK,cLr),e(JM,fLr),e(ye,mLr),e(ye,YM),e(YM,R9e),e(R9e,gLr),e(YM,hLr),e(YM,sK),e(sK,pLr),e(YM,_Lr),e(ye,uLr),e(ye,KM),e(KM,P9e),e(P9e,bLr),e(KM,vLr),e(KM,lK),e(lK,FLr),e(KM,TLr),e(ye,MLr),e(ye,ZM),e(ZM,B9e),e(B9e,ELr),e(ZM,CLr),e(ZM,iK),e(iK,wLr),e(ZM,ALr),e(ye,LLr),e(ye,e4),e(e4,I9e),e(I9e,yLr),e(e4,xLr),e(e4,dK),e(dK,$Lr),e(e4,kLr),e(ye,SLr),e(ye,o4),e(o4,N9e),e(N9e,RLr),e(o4,PLr),e(o4,cK),e(cK,BLr),e(o4,ILr),e(Pr,NLr),M(r4,Pr,null),b(f,eWe,u),b(f,Ac,u),e(Ac,t4),e(t4,q9e),M(xx,q9e,null),e(Ac,qLr),e(Ac,j9e),e(j9e,jLr),b(f,oWe,u),b(f,lr,u),M($x,lr,null),e(lr,DLr),e(lr,Lc),e(Lc,GLr),e(Lc,fK),e(fK,OLr),e(Lc,VLr),e(Lc,mK),e(mK,XLr),e(Lc,zLr),e(lr,WLr),e(lr,kx),e(kx,QLr),e(kx,D9e),e(D9e,HLr),e(kx,ULr),e(lr,JLr),e(lr,jt),M(Sx,jt,null),e(jt,YLr),e(jt,G9e),e(G9e,KLr),e(jt,ZLr),e(jt,yc),e(yc,eyr),e(yc,O9e),e(O9e,oyr),e(yc,ryr),e(yc,gK),e(gK,tyr),e(yc,ayr),e(jt,nyr),M(a4,jt,null),e(lr,syr),e(lr,Br),M(Rx,Br,null),e(Br,lyr),e(Br,V9e),e(V9e,iyr),e(Br,dyr),e(Br,gn),e(gn,cyr),e(gn,X9e),e(X9e,fyr),e(gn,myr),e(gn,z9e),e(z9e,gyr),e(gn,hyr),e(gn,W9e),e(W9e,pyr),e(gn,_yr),e(Br,uyr),e(Br,te),e(te,n4),e(n4,Q9e),e(Q9e,byr),e(n4,vyr),e(n4,hK),e(hK,Fyr),e(n4,Tyr),e(te,Myr),e(te,s4),e(s4,H9e),e(H9e,Eyr),e(s4,Cyr),e(s4,pK),e(pK,wyr),e(s4,Ayr),e(te,Lyr),e(te,l4),e(l4,U9e),e(U9e,yyr),e(l4,xyr),e(l4,_K),e(_K,$yr),e(l4,kyr),e(te,Syr),e(te,i4),e(i4,J9e),e(J9e,Ryr),e(i4,Pyr),e(i4,uK),e(uK,Byr),e(i4,Iyr),e(te,Nyr),e(te,d4),e(d4,Y9e),e(Y9e,qyr),e(d4,jyr),e(d4,bK),e(bK,Dyr),e(d4,Gyr),e(te,Oyr),e(te,c4),e(c4,K9e),e(K9e,Vyr),e(c4,Xyr),e(c4,vK),e(vK,zyr),e(c4,Wyr),e(te,Qyr),e(te,f4),e(f4,Z9e),e(Z9e,Hyr),e(f4,Uyr),e(f4,FK),e(FK,Jyr),e(f4,Yyr),e(te,Kyr),e(te,m4),e(m4,eMe),e(eMe,Zyr),e(m4,exr),e(m4,TK),e(TK,oxr),e(m4,rxr),e(te,txr),e(te,g4),e(g4,oMe),e(oMe,axr),e(g4,nxr),e(g4,MK),e(MK,sxr),e(g4,lxr),e(te,ixr),e(te,h4),e(h4,rMe),e(rMe,dxr),e(h4,cxr),e(h4,EK),e(EK,fxr),e(h4,mxr),e(te,gxr),e(te,p4),e(p4,tMe),e(tMe,hxr),e(p4,pxr),e(p4,CK),e(CK,_xr),e(p4,uxr),e(te,bxr),e(te,_4),e(_4,aMe),e(aMe,vxr),e(_4,Fxr),e(_4,wK),e(wK,Txr),e(_4,Mxr),e(te,Exr),e(te,u4),e(u4,nMe),e(nMe,Cxr),e(u4,wxr),e(u4,AK),e(AK,Axr),e(u4,Lxr),e(te,yxr),e(te,b4),e(b4,sMe),e(sMe,xxr),e(b4,$xr),e(b4,LK),e(LK,kxr),e(b4,Sxr),e(te,Rxr),e(te,v4),e(v4,lMe),e(lMe,Pxr),e(v4,Bxr),e(v4,yK),e(yK,Ixr),e(v4,Nxr),e(te,qxr),e(te,F4),e(F4,iMe),e(iMe,jxr),e(F4,Dxr),e(F4,xK),e(xK,Gxr),e(F4,Oxr),e(te,Vxr),e(te,T4),e(T4,dMe),e(dMe,Xxr),e(T4,zxr),e(T4,$K),e($K,Wxr),e(T4,Qxr),e(te,Hxr),e(te,M4),e(M4,cMe),e(cMe,Uxr),e(M4,Jxr),e(M4,kK),e(kK,Yxr),e(M4,Kxr),e(te,Zxr),e(te,E4),e(E4,fMe),e(fMe,e$r),e(E4,o$r),e(E4,SK),e(SK,r$r),e(E4,t$r),e(te,a$r),e(te,C4),e(C4,mMe),e(mMe,n$r),e(C4,s$r),e(C4,RK),e(RK,l$r),e(C4,i$r),e(te,d$r),e(te,w4),e(w4,gMe),e(gMe,c$r),e(w4,f$r),e(w4,PK),e(PK,m$r),e(w4,g$r),e(te,h$r),e(te,A4),e(A4,hMe),e(hMe,p$r),e(A4,_$r),e(A4,BK),e(BK,u$r),e(A4,b$r),e(te,v$r),e(te,L4),e(L4,pMe),e(pMe,F$r),e(L4,T$r),e(L4,IK),e(IK,M$r),e(L4,E$r),e(te,C$r),e(te,y4),e(y4,_Me),e(_Me,w$r),e(y4,A$r),e(y4,NK),e(NK,L$r),e(y4,y$r),e(te,x$r),e(te,x4),e(x4,uMe),e(uMe,$$r),e(x4,k$r),e(x4,qK),e(qK,S$r),e(x4,R$r),e(te,P$r),e(te,$4),e($4,bMe),e(bMe,B$r),e($4,I$r),e($4,jK),e(jK,N$r),e($4,q$r),e(Br,j$r),M(k4,Br,null),b(f,rWe,u),b(f,xc,u),e(xc,S4),e(S4,vMe),M(Px,vMe,null),e(xc,D$r),e(xc,FMe),e(FMe,G$r),b(f,tWe,u),b(f,ir,u),M(Bx,ir,null),e(ir,O$r),e(ir,$c),e($c,V$r),e($c,DK),e(DK,X$r),e($c,z$r),e($c,GK),e(GK,W$r),e($c,Q$r),e(ir,H$r),e(ir,Ix),e(Ix,U$r),e(Ix,TMe),e(TMe,J$r),e(Ix,Y$r),e(ir,K$r),e(ir,Dt),M(Nx,Dt,null),e(Dt,Z$r),e(Dt,MMe),e(MMe,ekr),e(Dt,okr),e(Dt,kc),e(kc,rkr),e(kc,EMe),e(EMe,tkr),e(kc,akr),e(kc,OK),e(OK,nkr),e(kc,skr),e(Dt,lkr),M(R4,Dt,null),e(ir,ikr),e(ir,Ir),M(qx,Ir,null),e(Ir,dkr),e(Ir,CMe),e(CMe,ckr),e(Ir,fkr),e(Ir,hn),e(hn,mkr),e(hn,wMe),e(wMe,gkr),e(hn,hkr),e(hn,AMe),e(AMe,pkr),e(hn,_kr),e(hn,LMe),e(LMe,ukr),e(hn,bkr),e(Ir,vkr),e(Ir,be),e(be,P4),e(P4,yMe),e(yMe,Fkr),e(P4,Tkr),e(P4,VK),e(VK,Mkr),e(P4,Ekr),e(be,Ckr),e(be,B4),e(B4,xMe),e(xMe,wkr),e(B4,Akr),e(B4,XK),e(XK,Lkr),e(B4,ykr),e(be,xkr),e(be,I4),e(I4,$Me),e($Me,$kr),e(I4,kkr),e(I4,zK),e(zK,Skr),e(I4,Rkr),e(be,Pkr),e(be,N4),e(N4,kMe),e(kMe,Bkr),e(N4,Ikr),e(N4,WK),e(WK,Nkr),e(N4,qkr),e(be,jkr),e(be,q4),e(q4,SMe),e(SMe,Dkr),e(q4,Gkr),e(q4,QK),e(QK,Okr),e(q4,Vkr),e(be,Xkr),e(be,j4),e(j4,RMe),e(RMe,zkr),e(j4,Wkr),e(j4,HK),e(HK,Qkr),e(j4,Hkr),e(be,Ukr),e(be,D4),e(D4,PMe),e(PMe,Jkr),e(D4,Ykr),e(D4,UK),e(UK,Kkr),e(D4,Zkr),e(be,eSr),e(be,G4),e(G4,BMe),e(BMe,oSr),e(G4,rSr),e(G4,JK),e(JK,tSr),e(G4,aSr),e(be,nSr),e(be,O4),e(O4,IMe),e(IMe,sSr),e(O4,lSr),e(O4,YK),e(YK,iSr),e(O4,dSr),e(be,cSr),e(be,V4),e(V4,NMe),e(NMe,fSr),e(V4,mSr),e(V4,KK),e(KK,gSr),e(V4,hSr),e(be,pSr),e(be,X4),e(X4,qMe),e(qMe,_Sr),e(X4,uSr),e(X4,ZK),e(ZK,bSr),e(X4,vSr),e(be,FSr),e(be,z4),e(z4,jMe),e(jMe,TSr),e(z4,MSr),e(z4,eZ),e(eZ,ESr),e(z4,CSr),e(be,wSr),e(be,W4),e(W4,DMe),e(DMe,ASr),e(W4,LSr),e(W4,oZ),e(oZ,ySr),e(W4,xSr),e(be,$Sr),e(be,Q4),e(Q4,GMe),e(GMe,kSr),e(Q4,SSr),e(Q4,rZ),e(rZ,RSr),e(Q4,PSr),e(be,BSr),e(be,H4),e(H4,OMe),e(OMe,ISr),e(H4,NSr),e(H4,tZ),e(tZ,qSr),e(H4,jSr),e(be,DSr),e(be,U4),e(U4,VMe),e(VMe,GSr),e(U4,OSr),e(U4,aZ),e(aZ,VSr),e(U4,XSr),e(be,zSr),e(be,J4),e(J4,XMe),e(XMe,WSr),e(J4,QSr),e(J4,nZ),e(nZ,HSr),e(J4,USr),e(Ir,JSr),M(Y4,Ir,null),b(f,aWe,u),b(f,Sc,u),e(Sc,K4),e(K4,zMe),M(jx,zMe,null),e(Sc,YSr),e(Sc,WMe),e(WMe,KSr),b(f,nWe,u),b(f,dr,u),M(Dx,dr,null),e(dr,ZSr),e(dr,Rc),e(Rc,eRr),e(Rc,sZ),e(sZ,oRr),e(Rc,rRr),e(Rc,lZ),e(lZ,tRr),e(Rc,aRr),e(dr,nRr),e(dr,Gx),e(Gx,sRr),e(Gx,QMe),e(QMe,lRr),e(Gx,iRr),e(dr,dRr),e(dr,Gt),M(Ox,Gt,null),e(Gt,cRr),e(Gt,HMe),e(HMe,fRr),e(Gt,mRr),e(Gt,Pc),e(Pc,gRr),e(Pc,UMe),e(UMe,hRr),e(Pc,pRr),e(Pc,iZ),e(iZ,_Rr),e(Pc,uRr),e(Gt,bRr),M(Z4,Gt,null),e(dr,vRr),e(dr,Nr),M(Vx,Nr,null),e(Nr,FRr),e(Nr,JMe),e(JMe,TRr),e(Nr,MRr),e(Nr,pn),e(pn,ERr),e(pn,YMe),e(YMe,CRr),e(pn,wRr),e(pn,KMe),e(KMe,ARr),e(pn,LRr),e(pn,ZMe),e(ZMe,yRr),e(pn,xRr),e(Nr,$Rr),e(Nr,Xx),e(Xx,eE),e(eE,e4e),e(e4e,kRr),e(eE,SRr),e(eE,dZ),e(dZ,RRr),e(eE,PRr),e(Xx,BRr),e(Xx,oE),e(oE,o4e),e(o4e,IRr),e(oE,NRr),e(oE,cZ),e(cZ,qRr),e(oE,jRr),e(Nr,DRr),M(rE,Nr,null),b(f,sWe,u),b(f,Bc,u),e(Bc,tE),e(tE,r4e),M(zx,r4e,null),e(Bc,GRr),e(Bc,t4e),e(t4e,ORr),b(f,lWe,u),b(f,cr,u),M(Wx,cr,null),e(cr,VRr),e(cr,Ic),e(Ic,XRr),e(Ic,fZ),e(fZ,zRr),e(Ic,WRr),e(Ic,mZ),e(mZ,QRr),e(Ic,HRr),e(cr,URr),e(cr,Qx),e(Qx,JRr),e(Qx,a4e),e(a4e,YRr),e(Qx,KRr),e(cr,ZRr),e(cr,Ot),M(Hx,Ot,null),e(Ot,ePr),e(Ot,n4e),e(n4e,oPr),e(Ot,rPr),e(Ot,Nc),e(Nc,tPr),e(Nc,s4e),e(s4e,aPr),e(Nc,nPr),e(Nc,gZ),e(gZ,sPr),e(Nc,lPr),e(Ot,iPr),M(aE,Ot,null),e(cr,dPr),e(cr,qr),M(Ux,qr,null),e(qr,cPr),e(qr,l4e),e(l4e,fPr),e(qr,mPr),e(qr,_n),e(_n,gPr),e(_n,i4e),e(i4e,hPr),e(_n,pPr),e(_n,d4e),e(d4e,_Pr),e(_n,uPr),e(_n,c4e),e(c4e,bPr),e(_n,vPr),e(qr,FPr),e(qr,f4e),e(f4e,nE),e(nE,m4e),e(m4e,TPr),e(nE,MPr),e(nE,hZ),e(hZ,EPr),e(nE,CPr),e(qr,wPr),M(sE,qr,null),b(f,iWe,u),b(f,qc,u),e(qc,lE),e(lE,g4e),M(Jx,g4e,null),e(qc,APr),e(qc,h4e),e(h4e,LPr),b(f,dWe,u),b(f,fr,u),M(Yx,fr,null),e(fr,yPr),e(fr,jc),e(jc,xPr),e(jc,pZ),e(pZ,$Pr),e(jc,kPr),e(jc,_Z),e(_Z,SPr),e(jc,RPr),e(fr,PPr),e(fr,Kx),e(Kx,BPr),e(Kx,p4e),e(p4e,IPr),e(Kx,NPr),e(fr,qPr),e(fr,Vt),M(Zx,Vt,null),e(Vt,jPr),e(Vt,_4e),e(_4e,DPr),e(Vt,GPr),e(Vt,Dc),e(Dc,OPr),e(Dc,u4e),e(u4e,VPr),e(Dc,XPr),e(Dc,uZ),e(uZ,zPr),e(Dc,WPr),e(Vt,QPr),M(iE,Vt,null),e(fr,HPr),e(fr,jr),M(e$,jr,null),e(jr,UPr),e(jr,b4e),e(b4e,JPr),e(jr,YPr),e(jr,un),e(un,KPr),e(un,v4e),e(v4e,ZPr),e(un,eBr),e(un,F4e),e(F4e,oBr),e(un,rBr),e(un,T4e),e(T4e,tBr),e(un,aBr),e(jr,nBr),e(jr,de),e(de,dE),e(dE,M4e),e(M4e,sBr),e(dE,lBr),e(dE,bZ),e(bZ,iBr),e(dE,dBr),e(de,cBr),e(de,cE),e(cE,E4e),e(E4e,fBr),e(cE,mBr),e(cE,vZ),e(vZ,gBr),e(cE,hBr),e(de,pBr),e(de,fE),e(fE,C4e),e(C4e,_Br),e(fE,uBr),e(fE,FZ),e(FZ,bBr),e(fE,vBr),e(de,FBr),e(de,mE),e(mE,w4e),e(w4e,TBr),e(mE,MBr),e(mE,TZ),e(TZ,EBr),e(mE,CBr),e(de,wBr),e(de,gE),e(gE,A4e),e(A4e,ABr),e(gE,LBr),e(gE,MZ),e(MZ,yBr),e(gE,xBr),e(de,$Br),e(de,hE),e(hE,L4e),e(L4e,kBr),e(hE,SBr),e(hE,EZ),e(EZ,RBr),e(hE,PBr),e(de,BBr),e(de,pE),e(pE,y4e),e(y4e,IBr),e(pE,NBr),e(pE,CZ),e(CZ,qBr),e(pE,jBr),e(de,DBr),e(de,_E),e(_E,x4e),e(x4e,GBr),e(_E,OBr),e(_E,wZ),e(wZ,VBr),e(_E,XBr),e(de,zBr),e(de,uE),e(uE,$4e),e($4e,WBr),e(uE,QBr),e(uE,AZ),e(AZ,HBr),e(uE,UBr),e(de,JBr),e(de,bE),e(bE,k4e),e(k4e,YBr),e(bE,KBr),e(bE,LZ),e(LZ,ZBr),e(bE,eIr),e(de,oIr),e(de,vE),e(vE,S4e),e(S4e,rIr),e(vE,tIr),e(vE,yZ),e(yZ,aIr),e(vE,nIr),e(de,sIr),e(de,FE),e(FE,R4e),e(R4e,lIr),e(FE,iIr),e(FE,xZ),e(xZ,dIr),e(FE,cIr),e(de,fIr),e(de,TE),e(TE,P4e),e(P4e,mIr),e(TE,gIr),e(TE,$Z),e($Z,hIr),e(TE,pIr),e(de,_Ir),e(de,ME),e(ME,B4e),e(B4e,uIr),e(ME,bIr),e(ME,kZ),e(kZ,vIr),e(ME,FIr),e(de,TIr),e(de,EE),e(EE,I4e),e(I4e,MIr),e(EE,EIr),e(EE,SZ),e(SZ,CIr),e(EE,wIr),e(de,AIr),e(de,CE),e(CE,N4e),e(N4e,LIr),e(CE,yIr),e(CE,RZ),e(RZ,xIr),e(CE,$Ir),e(de,kIr),e(de,wE),e(wE,q4e),e(q4e,SIr),e(wE,RIr),e(wE,PZ),e(PZ,PIr),e(wE,BIr),e(de,IIr),e(de,AE),e(AE,j4e),e(j4e,NIr),e(AE,qIr),e(AE,BZ),e(BZ,jIr),e(AE,DIr),e(de,GIr),e(de,LE),e(LE,D4e),e(D4e,OIr),e(LE,VIr),e(LE,IZ),e(IZ,XIr),e(LE,zIr),e(de,WIr),e(de,yE),e(yE,G4e),e(G4e,QIr),e(yE,HIr),e(yE,NZ),e(NZ,UIr),e(yE,JIr),e(jr,YIr),M(xE,jr,null),b(f,cWe,u),b(f,Gc,u),e(Gc,$E),e($E,O4e),M(o$,O4e,null),e(Gc,KIr),e(Gc,V4e),e(V4e,ZIr),b(f,fWe,u),b(f,mr,u),M(r$,mr,null),e(mr,eNr),e(mr,Oc),e(Oc,oNr),e(Oc,qZ),e(qZ,rNr),e(Oc,tNr),e(Oc,jZ),e(jZ,aNr),e(Oc,nNr),e(mr,sNr),e(mr,t$),e(t$,lNr),e(t$,X4e),e(X4e,iNr),e(t$,dNr),e(mr,cNr),e(mr,Xt),M(a$,Xt,null),e(Xt,fNr),e(Xt,z4e),e(z4e,mNr),e(Xt,gNr),e(Xt,Vc),e(Vc,hNr),e(Vc,W4e),e(W4e,pNr),e(Vc,_Nr),e(Vc,DZ),e(DZ,uNr),e(Vc,bNr),e(Xt,vNr),M(kE,Xt,null),e(mr,FNr),e(mr,Dr),M(n$,Dr,null),e(Dr,TNr),e(Dr,Q4e),e(Q4e,MNr),e(Dr,ENr),e(Dr,bn),e(bn,CNr),e(bn,H4e),e(H4e,wNr),e(bn,ANr),e(bn,U4e),e(U4e,LNr),e(bn,yNr),e(bn,J4e),e(J4e,xNr),e(bn,$Nr),e(Dr,kNr),e(Dr,ce),e(ce,SE),e(SE,Y4e),e(Y4e,SNr),e(SE,RNr),e(SE,GZ),e(GZ,PNr),e(SE,BNr),e(ce,INr),e(ce,RE),e(RE,K4e),e(K4e,NNr),e(RE,qNr),e(RE,OZ),e(OZ,jNr),e(RE,DNr),e(ce,GNr),e(ce,PE),e(PE,Z4e),e(Z4e,ONr),e(PE,VNr),e(PE,VZ),e(VZ,XNr),e(PE,zNr),e(ce,WNr),e(ce,BE),e(BE,eEe),e(eEe,QNr),e(BE,HNr),e(BE,XZ),e(XZ,UNr),e(BE,JNr),e(ce,YNr),e(ce,IE),e(IE,oEe),e(oEe,KNr),e(IE,ZNr),e(IE,zZ),e(zZ,eqr),e(IE,oqr),e(ce,rqr),e(ce,NE),e(NE,rEe),e(rEe,tqr),e(NE,aqr),e(NE,WZ),e(WZ,nqr),e(NE,sqr),e(ce,lqr),e(ce,qE),e(qE,tEe),e(tEe,iqr),e(qE,dqr),e(qE,QZ),e(QZ,cqr),e(qE,fqr),e(ce,mqr),e(ce,jE),e(jE,aEe),e(aEe,gqr),e(jE,hqr),e(jE,HZ),e(HZ,pqr),e(jE,_qr),e(ce,uqr),e(ce,DE),e(DE,nEe),e(nEe,bqr),e(DE,vqr),e(DE,UZ),e(UZ,Fqr),e(DE,Tqr),e(ce,Mqr),e(ce,GE),e(GE,sEe),e(sEe,Eqr),e(GE,Cqr),e(GE,JZ),e(JZ,wqr),e(GE,Aqr),e(ce,Lqr),e(ce,OE),e(OE,lEe),e(lEe,yqr),e(OE,xqr),e(OE,YZ),e(YZ,$qr),e(OE,kqr),e(ce,Sqr),e(ce,VE),e(VE,iEe),e(iEe,Rqr),e(VE,Pqr),e(VE,KZ),e(KZ,Bqr),e(VE,Iqr),e(ce,Nqr),e(ce,XE),e(XE,dEe),e(dEe,qqr),e(XE,jqr),e(XE,ZZ),e(ZZ,Dqr),e(XE,Gqr),e(ce,Oqr),e(ce,zE),e(zE,cEe),e(cEe,Vqr),e(zE,Xqr),e(zE,eee),e(eee,zqr),e(zE,Wqr),e(ce,Qqr),e(ce,WE),e(WE,fEe),e(fEe,Hqr),e(WE,Uqr),e(WE,oee),e(oee,Jqr),e(WE,Yqr),e(ce,Kqr),e(ce,QE),e(QE,mEe),e(mEe,Zqr),e(QE,ejr),e(QE,ree),e(ree,ojr),e(QE,rjr),e(ce,tjr),e(ce,HE),e(HE,gEe),e(gEe,ajr),e(HE,njr),e(HE,tee),e(tee,sjr),e(HE,ljr),e(ce,ijr),e(ce,UE),e(UE,hEe),e(hEe,djr),e(UE,cjr),e(UE,aee),e(aee,fjr),e(UE,mjr),e(ce,gjr),e(ce,JE),e(JE,pEe),e(pEe,hjr),e(JE,pjr),e(JE,nee),e(nee,_jr),e(JE,ujr),e(ce,bjr),e(ce,YE),e(YE,_Ee),e(_Ee,vjr),e(YE,Fjr),e(YE,see),e(see,Tjr),e(YE,Mjr),e(Dr,Ejr),M(KE,Dr,null),b(f,mWe,u),b(f,Xc,u),e(Xc,ZE),e(ZE,uEe),M(s$,uEe,null),e(Xc,Cjr),e(Xc,bEe),e(bEe,wjr),b(f,gWe,u),b(f,gr,u),M(l$,gr,null),e(gr,Ajr),e(gr,zc),e(zc,Ljr),e(zc,lee),e(lee,yjr),e(zc,xjr),e(zc,iee),e(iee,$jr),e(zc,kjr),e(gr,Sjr),e(gr,i$),e(i$,Rjr),e(i$,vEe),e(vEe,Pjr),e(i$,Bjr),e(gr,Ijr),e(gr,zt),M(d$,zt,null),e(zt,Njr),e(zt,FEe),e(FEe,qjr),e(zt,jjr),e(zt,Wc),e(Wc,Djr),e(Wc,TEe),e(TEe,Gjr),e(Wc,Ojr),e(Wc,dee),e(dee,Vjr),e(Wc,Xjr),e(zt,zjr),M(eC,zt,null),e(gr,Wjr),e(gr,Gr),M(c$,Gr,null),e(Gr,Qjr),e(Gr,MEe),e(MEe,Hjr),e(Gr,Ujr),e(Gr,vn),e(vn,Jjr),e(vn,EEe),e(EEe,Yjr),e(vn,Kjr),e(vn,CEe),e(CEe,Zjr),e(vn,eDr),e(vn,wEe),e(wEe,oDr),e(vn,rDr),e(Gr,tDr),e(Gr,AEe),e(AEe,oC),e(oC,LEe),e(LEe,aDr),e(oC,nDr),e(oC,cee),e(cee,sDr),e(oC,lDr),e(Gr,iDr),M(rC,Gr,null),b(f,hWe,u),b(f,Qc,u),e(Qc,tC),e(tC,yEe),M(f$,yEe,null),e(Qc,dDr),e(Qc,xEe),e(xEe,cDr),b(f,pWe,u),b(f,hr,u),M(m$,hr,null),e(hr,fDr),e(hr,Hc),e(Hc,mDr),e(Hc,fee),e(fee,gDr),e(Hc,hDr),e(Hc,mee),e(mee,pDr),e(Hc,_Dr),e(hr,uDr),e(hr,g$),e(g$,bDr),e(g$,$Ee),e($Ee,vDr),e(g$,FDr),e(hr,TDr),e(hr,Wt),M(h$,Wt,null),e(Wt,MDr),e(Wt,kEe),e(kEe,EDr),e(Wt,CDr),e(Wt,Uc),e(Uc,wDr),e(Uc,SEe),e(SEe,ADr),e(Uc,LDr),e(Uc,gee),e(gee,yDr),e(Uc,xDr),e(Wt,$Dr),M(aC,Wt,null),e(hr,kDr),e(hr,Or),M(p$,Or,null),e(Or,SDr),e(Or,REe),e(REe,RDr),e(Or,PDr),e(Or,Fn),e(Fn,BDr),e(Fn,PEe),e(PEe,IDr),e(Fn,NDr),e(Fn,BEe),e(BEe,qDr),e(Fn,jDr),e(Fn,IEe),e(IEe,DDr),e(Fn,GDr),e(Or,ODr),e(Or,NEe),e(NEe,nC),e(nC,qEe),e(qEe,VDr),e(nC,XDr),e(nC,hee),e(hee,zDr),e(nC,WDr),e(Or,QDr),M(sC,Or,null),b(f,_We,u),b(f,Jc,u),e(Jc,lC),e(lC,jEe),M(_$,jEe,null),e(Jc,HDr),e(Jc,DEe),e(DEe,UDr),b(f,uWe,u),b(f,pr,u),M(u$,pr,null),e(pr,JDr),e(pr,Yc),e(Yc,YDr),e(Yc,pee),e(pee,KDr),e(Yc,ZDr),e(Yc,_ee),e(_ee,eGr),e(Yc,oGr),e(pr,rGr),e(pr,b$),e(b$,tGr),e(b$,GEe),e(GEe,aGr),e(b$,nGr),e(pr,sGr),e(pr,Qt),M(v$,Qt,null),e(Qt,lGr),e(Qt,OEe),e(OEe,iGr),e(Qt,dGr),e(Qt,Kc),e(Kc,cGr),e(Kc,VEe),e(VEe,fGr),e(Kc,mGr),e(Kc,uee),e(uee,gGr),e(Kc,hGr),e(Qt,pGr),M(iC,Qt,null),e(pr,_Gr),e(pr,Vr),M(F$,Vr,null),e(Vr,uGr),e(Vr,XEe),e(XEe,bGr),e(Vr,vGr),e(Vr,Tn),e(Tn,FGr),e(Tn,zEe),e(zEe,TGr),e(Tn,MGr),e(Tn,WEe),e(WEe,EGr),e(Tn,CGr),e(Tn,QEe),e(QEe,wGr),e(Tn,AGr),e(Vr,LGr),e(Vr,oe),e(oe,dC),e(dC,HEe),e(HEe,yGr),e(dC,xGr),e(dC,bee),e(bee,$Gr),e(dC,kGr),e(oe,SGr),e(oe,cC),e(cC,UEe),e(UEe,RGr),e(cC,PGr),e(cC,vee),e(vee,BGr),e(cC,IGr),e(oe,NGr),e(oe,fC),e(fC,JEe),e(JEe,qGr),e(fC,jGr),e(fC,Fee),e(Fee,DGr),e(fC,GGr),e(oe,OGr),e(oe,mC),e(mC,YEe),e(YEe,VGr),e(mC,XGr),e(mC,Tee),e(Tee,zGr),e(mC,WGr),e(oe,QGr),e(oe,gC),e(gC,KEe),e(KEe,HGr),e(gC,UGr),e(gC,Mee),e(Mee,JGr),e(gC,YGr),e(oe,KGr),e(oe,hC),e(hC,ZEe),e(ZEe,ZGr),e(hC,eOr),e(hC,Eee),e(Eee,oOr),e(hC,rOr),e(oe,tOr),e(oe,pC),e(pC,eCe),e(eCe,aOr),e(pC,nOr),e(pC,Cee),e(Cee,sOr),e(pC,lOr),e(oe,iOr),e(oe,_C),e(_C,oCe),e(oCe,dOr),e(_C,cOr),e(_C,wee),e(wee,fOr),e(_C,mOr),e(oe,gOr),e(oe,uC),e(uC,rCe),e(rCe,hOr),e(uC,pOr),e(uC,Aee),e(Aee,_Or),e(uC,uOr),e(oe,bOr),e(oe,bC),e(bC,tCe),e(tCe,vOr),e(bC,FOr),e(bC,Lee),e(Lee,TOr),e(bC,MOr),e(oe,EOr),e(oe,vC),e(vC,aCe),e(aCe,COr),e(vC,wOr),e(vC,yee),e(yee,AOr),e(vC,LOr),e(oe,yOr),e(oe,FC),e(FC,nCe),e(nCe,xOr),e(FC,$Or),e(FC,xee),e(xee,kOr),e(FC,SOr),e(oe,ROr),e(oe,TC),e(TC,sCe),e(sCe,POr),e(TC,BOr),e(TC,$ee),e($ee,IOr),e(TC,NOr),e(oe,qOr),e(oe,MC),e(MC,lCe),e(lCe,jOr),e(MC,DOr),e(MC,kee),e(kee,GOr),e(MC,OOr),e(oe,VOr),e(oe,EC),e(EC,iCe),e(iCe,XOr),e(EC,zOr),e(EC,See),e(See,WOr),e(EC,QOr),e(oe,HOr),e(oe,CC),e(CC,dCe),e(dCe,UOr),e(CC,JOr),e(CC,Ree),e(Ree,YOr),e(CC,KOr),e(oe,ZOr),e(oe,wC),e(wC,cCe),e(cCe,eVr),e(wC,oVr),e(wC,Pee),e(Pee,rVr),e(wC,tVr),e(oe,aVr),e(oe,AC),e(AC,fCe),e(fCe,nVr),e(AC,sVr),e(AC,Bee),e(Bee,lVr),e(AC,iVr),e(oe,dVr),e(oe,LC),e(LC,mCe),e(mCe,cVr),e(LC,fVr),e(LC,Iee),e(Iee,mVr),e(LC,gVr),e(oe,hVr),e(oe,yC),e(yC,gCe),e(gCe,pVr),e(yC,_Vr),e(yC,Nee),e(Nee,uVr),e(yC,bVr),e(oe,vVr),e(oe,xC),e(xC,hCe),e(hCe,FVr),e(xC,TVr),e(xC,qee),e(qee,MVr),e(xC,EVr),e(oe,CVr),e(oe,$C),e($C,pCe),e(pCe,wVr),e($C,AVr),e($C,jee),e(jee,LVr),e($C,yVr),e(oe,xVr),e(oe,kC),e(kC,_Ce),e(_Ce,$Vr),e(kC,kVr),e(kC,Dee),e(Dee,SVr),e(kC,RVr),e(oe,PVr),e(oe,SC),e(SC,uCe),e(uCe,BVr),e(SC,IVr),e(SC,Gee),e(Gee,NVr),e(SC,qVr),e(oe,jVr),e(oe,RC),e(RC,bCe),e(bCe,DVr),e(RC,GVr),e(RC,Oee),e(Oee,OVr),e(RC,VVr),e(oe,XVr),e(oe,PC),e(PC,vCe),e(vCe,zVr),e(PC,WVr),e(PC,Vee),e(Vee,QVr),e(PC,HVr),e(oe,UVr),e(oe,BC),e(BC,FCe),e(FCe,JVr),e(BC,YVr),e(BC,Xee),e(Xee,KVr),e(BC,ZVr),e(Vr,eXr),M(IC,Vr,null),b(f,bWe,u),b(f,Zc,u),e(Zc,NC),e(NC,TCe),M(T$,TCe,null),e(Zc,oXr),e(Zc,MCe),e(MCe,rXr),b(f,vWe,u),b(f,_r,u),M(M$,_r,null),e(_r,tXr),e(_r,ef),e(ef,aXr),e(ef,zee),e(zee,nXr),e(ef,sXr),e(ef,Wee),e(Wee,lXr),e(ef,iXr),e(_r,dXr),e(_r,E$),e(E$,cXr),e(E$,ECe),e(ECe,fXr),e(E$,mXr),e(_r,gXr),e(_r,Ht),M(C$,Ht,null),e(Ht,hXr),e(Ht,CCe),e(CCe,pXr),e(Ht,_Xr),e(Ht,of),e(of,uXr),e(of,wCe),e(wCe,bXr),e(of,vXr),e(of,Qee),e(Qee,FXr),e(of,TXr),e(Ht,MXr),M(qC,Ht,null),e(_r,EXr),e(_r,Xr),M(w$,Xr,null),e(Xr,CXr),e(Xr,ACe),e(ACe,wXr),e(Xr,AXr),e(Xr,Mn),e(Mn,LXr),e(Mn,LCe),e(LCe,yXr),e(Mn,xXr),e(Mn,yCe),e(yCe,$Xr),e(Mn,kXr),e(Mn,xCe),e(xCe,SXr),e(Mn,RXr),e(Xr,PXr),e(Xr,xe),e(xe,jC),e(jC,$Ce),e($Ce,BXr),e(jC,IXr),e(jC,Hee),e(Hee,NXr),e(jC,qXr),e(xe,jXr),e(xe,DC),e(DC,kCe),e(kCe,DXr),e(DC,GXr),e(DC,Uee),e(Uee,OXr),e(DC,VXr),e(xe,XXr),e(xe,GC),e(GC,SCe),e(SCe,zXr),e(GC,WXr),e(GC,Jee),e(Jee,QXr),e(GC,HXr),e(xe,UXr),e(xe,OC),e(OC,RCe),e(RCe,JXr),e(OC,YXr),e(OC,Yee),e(Yee,KXr),e(OC,ZXr),e(xe,ezr),e(xe,VC),e(VC,PCe),e(PCe,ozr),e(VC,rzr),e(VC,Kee),e(Kee,tzr),e(VC,azr),e(xe,nzr),e(xe,XC),e(XC,BCe),e(BCe,szr),e(XC,lzr),e(XC,Zee),e(Zee,izr),e(XC,dzr),e(xe,czr),e(xe,zC),e(zC,ICe),e(ICe,fzr),e(zC,mzr),e(zC,eoe),e(eoe,gzr),e(zC,hzr),e(xe,pzr),e(xe,WC),e(WC,NCe),e(NCe,_zr),e(WC,uzr),e(WC,ooe),e(ooe,bzr),e(WC,vzr),e(xe,Fzr),e(xe,QC),e(QC,qCe),e(qCe,Tzr),e(QC,Mzr),e(QC,roe),e(roe,Ezr),e(QC,Czr),e(xe,wzr),e(xe,HC),e(HC,jCe),e(jCe,Azr),e(HC,Lzr),e(HC,toe),e(toe,yzr),e(HC,xzr),e(Xr,$zr),M(UC,Xr,null),b(f,FWe,u),b(f,rf,u),e(rf,JC),e(JC,DCe),M(A$,DCe,null),e(rf,kzr),e(rf,GCe),e(GCe,Szr),b(f,TWe,u),b(f,ur,u),M(L$,ur,null),e(ur,Rzr),e(ur,tf),e(tf,Pzr),e(tf,aoe),e(aoe,Bzr),e(tf,Izr),e(tf,noe),e(noe,Nzr),e(tf,qzr),e(ur,jzr),e(ur,y$),e(y$,Dzr),e(y$,OCe),e(OCe,Gzr),e(y$,Ozr),e(ur,Vzr),e(ur,Ut),M(x$,Ut,null),e(Ut,Xzr),e(Ut,VCe),e(VCe,zzr),e(Ut,Wzr),e(Ut,af),e(af,Qzr),e(af,XCe),e(XCe,Hzr),e(af,Uzr),e(af,soe),e(soe,Jzr),e(af,Yzr),e(Ut,Kzr),M(YC,Ut,null),e(ur,Zzr),e(ur,zr),M($$,zr,null),e(zr,eWr),e(zr,zCe),e(zCe,oWr),e(zr,rWr),e(zr,En),e(En,tWr),e(En,WCe),e(WCe,aWr),e(En,nWr),e(En,QCe),e(QCe,sWr),e(En,lWr),e(En,HCe),e(HCe,iWr),e(En,dWr),e(zr,cWr),e(zr,Ee),e(Ee,KC),e(KC,UCe),e(UCe,fWr),e(KC,mWr),e(KC,loe),e(loe,gWr),e(KC,hWr),e(Ee,pWr),e(Ee,ZC),e(ZC,JCe),e(JCe,_Wr),e(ZC,uWr),e(ZC,ioe),e(ioe,bWr),e(ZC,vWr),e(Ee,FWr),e(Ee,e5),e(e5,YCe),e(YCe,TWr),e(e5,MWr),e(e5,doe),e(doe,EWr),e(e5,CWr),e(Ee,wWr),e(Ee,o5),e(o5,KCe),e(KCe,AWr),e(o5,LWr),e(o5,coe),e(coe,yWr),e(o5,xWr),e(Ee,$Wr),e(Ee,r5),e(r5,ZCe),e(ZCe,kWr),e(r5,SWr),e(r5,foe),e(foe,RWr),e(r5,PWr),e(Ee,BWr),e(Ee,t5),e(t5,e5e),e(e5e,IWr),e(t5,NWr),e(t5,moe),e(moe,qWr),e(t5,jWr),e(Ee,DWr),e(Ee,a5),e(a5,o5e),e(o5e,GWr),e(a5,OWr),e(a5,goe),e(goe,VWr),e(a5,XWr),e(Ee,zWr),e(Ee,n5),e(n5,r5e),e(r5e,WWr),e(n5,QWr),e(n5,hoe),e(hoe,HWr),e(n5,UWr),e(Ee,JWr),e(Ee,s5),e(s5,t5e),e(t5e,YWr),e(s5,KWr),e(s5,poe),e(poe,ZWr),e(s5,eQr),e(Ee,oQr),e(Ee,l5),e(l5,a5e),e(a5e,rQr),e(l5,tQr),e(l5,_oe),e(_oe,aQr),e(l5,nQr),e(Ee,sQr),e(Ee,i5),e(i5,n5e),e(n5e,lQr),e(i5,iQr),e(i5,uoe),e(uoe,dQr),e(i5,cQr),e(Ee,fQr),e(Ee,d5),e(d5,s5e),e(s5e,mQr),e(d5,gQr),e(d5,boe),e(boe,hQr),e(d5,pQr),e(Ee,_Qr),e(Ee,c5),e(c5,l5e),e(l5e,uQr),e(c5,bQr),e(c5,voe),e(voe,vQr),e(c5,FQr),e(zr,TQr),M(f5,zr,null),b(f,MWe,u),b(f,nf,u),e(nf,m5),e(m5,i5e),M(k$,i5e,null),e(nf,MQr),e(nf,d5e),e(d5e,EQr),b(f,EWe,u),b(f,br,u),M(S$,br,null),e(br,CQr),e(br,sf),e(sf,wQr),e(sf,Foe),e(Foe,AQr),e(sf,LQr),e(sf,Toe),e(Toe,yQr),e(sf,xQr),e(br,$Qr),e(br,R$),e(R$,kQr),e(R$,c5e),e(c5e,SQr),e(R$,RQr),e(br,PQr),e(br,Jt),M(P$,Jt,null),e(Jt,BQr),e(Jt,f5e),e(f5e,IQr),e(Jt,NQr),e(Jt,lf),e(lf,qQr),e(lf,m5e),e(m5e,jQr),e(lf,DQr),e(lf,Moe),e(Moe,GQr),e(lf,OQr),e(Jt,VQr),M(g5,Jt,null),e(br,XQr),e(br,Wr),M(B$,Wr,null),e(Wr,zQr),e(Wr,g5e),e(g5e,WQr),e(Wr,QQr),e(Wr,Cn),e(Cn,HQr),e(Cn,h5e),e(h5e,UQr),e(Cn,JQr),e(Cn,p5e),e(p5e,YQr),e(Cn,KQr),e(Cn,_5e),e(_5e,ZQr),e(Cn,eHr),e(Wr,oHr),e(Wr,$e),e($e,h5),e(h5,u5e),e(u5e,rHr),e(h5,tHr),e(h5,Eoe),e(Eoe,aHr),e(h5,nHr),e($e,sHr),e($e,p5),e(p5,b5e),e(b5e,lHr),e(p5,iHr),e(p5,Coe),e(Coe,dHr),e(p5,cHr),e($e,fHr),e($e,_5),e(_5,v5e),e(v5e,mHr),e(_5,gHr),e(_5,woe),e(woe,hHr),e(_5,pHr),e($e,_Hr),e($e,u5),e(u5,F5e),e(F5e,uHr),e(u5,bHr),e(u5,Aoe),e(Aoe,vHr),e(u5,FHr),e($e,THr),e($e,b5),e(b5,T5e),e(T5e,MHr),e(b5,EHr),e(b5,Loe),e(Loe,CHr),e(b5,wHr),e($e,AHr),e($e,v5),e(v5,M5e),e(M5e,LHr),e(v5,yHr),e(v5,yoe),e(yoe,xHr),e(v5,$Hr),e($e,kHr),e($e,F5),e(F5,E5e),e(E5e,SHr),e(F5,RHr),e(F5,xoe),e(xoe,PHr),e(F5,BHr),e($e,IHr),e($e,T5),e(T5,C5e),e(C5e,NHr),e(T5,qHr),e(T5,$oe),e($oe,jHr),e(T5,DHr),e($e,GHr),e($e,M5),e(M5,w5e),e(w5e,OHr),e(M5,VHr),e(M5,koe),e(koe,XHr),e(M5,zHr),e($e,WHr),e($e,E5),e(E5,A5e),e(A5e,QHr),e(E5,HHr),e(E5,Soe),e(Soe,UHr),e(E5,JHr),e(Wr,YHr),M(C5,Wr,null),b(f,CWe,u),b(f,df,u),e(df,w5),e(w5,L5e),M(I$,L5e,null),e(df,KHr),e(df,y5e),e(y5e,ZHr),b(f,wWe,u),b(f,vr,u),M(N$,vr,null),e(vr,eUr),e(vr,cf),e(cf,oUr),e(cf,Roe),e(Roe,rUr),e(cf,tUr),e(cf,Poe),e(Poe,aUr),e(cf,nUr),e(vr,sUr),e(vr,q$),e(q$,lUr),e(q$,x5e),e(x5e,iUr),e(q$,dUr),e(vr,cUr),e(vr,Yt),M(j$,Yt,null),e(Yt,fUr),e(Yt,$5e),e($5e,mUr),e(Yt,gUr),e(Yt,ff),e(ff,hUr),e(ff,k5e),e(k5e,pUr),e(ff,_Ur),e(ff,Boe),e(Boe,uUr),e(ff,bUr),e(Yt,vUr),M(A5,Yt,null),e(vr,FUr),e(vr,Qr),M(D$,Qr,null),e(Qr,TUr),e(Qr,S5e),e(S5e,MUr),e(Qr,EUr),e(Qr,wn),e(wn,CUr),e(wn,R5e),e(R5e,wUr),e(wn,AUr),e(wn,P5e),e(P5e,LUr),e(wn,yUr),e(wn,B5e),e(B5e,xUr),e(wn,$Ur),e(Qr,kUr),e(Qr,ke),e(ke,L5),e(L5,I5e),e(I5e,SUr),e(L5,RUr),e(L5,Ioe),e(Ioe,PUr),e(L5,BUr),e(ke,IUr),e(ke,y5),e(y5,N5e),e(N5e,NUr),e(y5,qUr),e(y5,Noe),e(Noe,jUr),e(y5,DUr),e(ke,GUr),e(ke,x5),e(x5,q5e),e(q5e,OUr),e(x5,VUr),e(x5,qoe),e(qoe,XUr),e(x5,zUr),e(ke,WUr),e(ke,$5),e($5,j5e),e(j5e,QUr),e($5,HUr),e($5,joe),e(joe,UUr),e($5,JUr),e(ke,YUr),e(ke,k5),e(k5,D5e),e(D5e,KUr),e(k5,ZUr),e(k5,Doe),e(Doe,eJr),e(k5,oJr),e(ke,rJr),e(ke,S5),e(S5,G5e),e(G5e,tJr),e(S5,aJr),e(S5,Goe),e(Goe,nJr),e(S5,sJr),e(ke,lJr),e(ke,R5),e(R5,O5e),e(O5e,iJr),e(R5,dJr),e(R5,Ooe),e(Ooe,cJr),e(R5,fJr),e(ke,mJr),e(ke,P5),e(P5,V5e),e(V5e,gJr),e(P5,hJr),e(P5,Voe),e(Voe,pJr),e(P5,_Jr),e(ke,uJr),e(ke,B5),e(B5,X5e),e(X5e,bJr),e(B5,vJr),e(B5,Xoe),e(Xoe,FJr),e(B5,TJr),e(ke,MJr),e(ke,I5),e(I5,z5e),e(z5e,EJr),e(I5,CJr),e(I5,zoe),e(zoe,wJr),e(I5,AJr),e(Qr,LJr),M(N5,Qr,null),b(f,AWe,u),b(f,mf,u),e(mf,q5),e(q5,W5e),M(G$,W5e,null),e(mf,yJr),e(mf,Q5e),e(Q5e,xJr),b(f,LWe,u),b(f,Fr,u),M(O$,Fr,null),e(Fr,$Jr),e(Fr,gf),e(gf,kJr),e(gf,Woe),e(Woe,SJr),e(gf,RJr),e(gf,Qoe),e(Qoe,PJr),e(gf,BJr),e(Fr,IJr),e(Fr,V$),e(V$,NJr),e(V$,H5e),e(H5e,qJr),e(V$,jJr),e(Fr,DJr),e(Fr,Kt),M(X$,Kt,null),e(Kt,GJr),e(Kt,U5e),e(U5e,OJr),e(Kt,VJr),e(Kt,hf),e(hf,XJr),e(hf,J5e),e(J5e,zJr),e(hf,WJr),e(hf,Hoe),e(Hoe,QJr),e(hf,HJr),e(Kt,UJr),M(j5,Kt,null),e(Fr,JJr),e(Fr,Hr),M(z$,Hr,null),e(Hr,YJr),e(Hr,Y5e),e(Y5e,KJr),e(Hr,ZJr),e(Hr,An),e(An,eYr),e(An,K5e),e(K5e,oYr),e(An,rYr),e(An,Z5e),e(Z5e,tYr),e(An,aYr),e(An,e0e),e(e0e,nYr),e(An,sYr),e(Hr,lYr),e(Hr,Se),e(Se,D5),e(D5,o0e),e(o0e,iYr),e(D5,dYr),e(D5,Uoe),e(Uoe,cYr),e(D5,fYr),e(Se,mYr),e(Se,G5),e(G5,r0e),e(r0e,gYr),e(G5,hYr),e(G5,Joe),e(Joe,pYr),e(G5,_Yr),e(Se,uYr),e(Se,O5),e(O5,t0e),e(t0e,bYr),e(O5,vYr),e(O5,Yoe),e(Yoe,FYr),e(O5,TYr),e(Se,MYr),e(Se,V5),e(V5,a0e),e(a0e,EYr),e(V5,CYr),e(V5,Koe),e(Koe,wYr),e(V5,AYr),e(Se,LYr),e(Se,X5),e(X5,n0e),e(n0e,yYr),e(X5,xYr),e(X5,Zoe),e(Zoe,$Yr),e(X5,kYr),e(Se,SYr),e(Se,z5),e(z5,s0e),e(s0e,RYr),e(z5,PYr),e(z5,ere),e(ere,BYr),e(z5,IYr),e(Se,NYr),e(Se,W5),e(W5,l0e),e(l0e,qYr),e(W5,jYr),e(W5,ore),e(ore,DYr),e(W5,GYr),e(Se,OYr),e(Se,Q5),e(Q5,i0e),e(i0e,VYr),e(Q5,XYr),e(Q5,rre),e(rre,zYr),e(Q5,WYr),e(Se,QYr),e(Se,H5),e(H5,d0e),e(d0e,HYr),e(H5,UYr),e(H5,tre),e(tre,JYr),e(H5,YYr),e(Se,KYr),e(Se,U5),e(U5,c0e),e(c0e,ZYr),e(U5,eKr),e(U5,are),e(are,oKr),e(U5,rKr),e(Hr,tKr),M(J5,Hr,null),b(f,yWe,u),b(f,pf,u),e(pf,Y5),e(Y5,f0e),M(W$,f0e,null),e(pf,aKr),e(pf,m0e),e(m0e,nKr),b(f,xWe,u),b(f,Tr,u),M(Q$,Tr,null),e(Tr,sKr),e(Tr,_f),e(_f,lKr),e(_f,nre),e(nre,iKr),e(_f,dKr),e(_f,sre),e(sre,cKr),e(_f,fKr),e(Tr,mKr),e(Tr,H$),e(H$,gKr),e(H$,g0e),e(g0e,hKr),e(H$,pKr),e(Tr,_Kr),e(Tr,Zt),M(U$,Zt,null),e(Zt,uKr),e(Zt,h0e),e(h0e,bKr),e(Zt,vKr),e(Zt,uf),e(uf,FKr),e(uf,p0e),e(p0e,TKr),e(uf,MKr),e(uf,lre),e(lre,EKr),e(uf,CKr),e(Zt,wKr),M(K5,Zt,null),e(Tr,AKr),e(Tr,Ur),M(J$,Ur,null),e(Ur,LKr),e(Ur,_0e),e(_0e,yKr),e(Ur,xKr),e(Ur,Ln),e(Ln,$Kr),e(Ln,u0e),e(u0e,kKr),e(Ln,SKr),e(Ln,b0e),e(b0e,RKr),e(Ln,PKr),e(Ln,v0e),e(v0e,BKr),e(Ln,IKr),e(Ur,NKr),e(Ur,Re),e(Re,Z5),e(Z5,F0e),e(F0e,qKr),e(Z5,jKr),e(Z5,ire),e(ire,DKr),e(Z5,GKr),e(Re,OKr),e(Re,e0),e(e0,T0e),e(T0e,VKr),e(e0,XKr),e(e0,dre),e(dre,zKr),e(e0,WKr),e(Re,QKr),e(Re,o0),e(o0,M0e),e(M0e,HKr),e(o0,UKr),e(o0,cre),e(cre,JKr),e(o0,YKr),e(Re,KKr),e(Re,r0),e(r0,E0e),e(E0e,ZKr),e(r0,eZr),e(r0,fre),e(fre,oZr),e(r0,rZr),e(Re,tZr),e(Re,t0),e(t0,C0e),e(C0e,aZr),e(t0,nZr),e(t0,mre),e(mre,sZr),e(t0,lZr),e(Re,iZr),e(Re,a0),e(a0,w0e),e(w0e,dZr),e(a0,cZr),e(a0,gre),e(gre,fZr),e(a0,mZr),e(Re,gZr),e(Re,n0),e(n0,A0e),e(A0e,hZr),e(n0,pZr),e(n0,hre),e(hre,_Zr),e(n0,uZr),e(Re,bZr),e(Re,s0),e(s0,L0e),e(L0e,vZr),e(s0,FZr),e(s0,pre),e(pre,TZr),e(s0,MZr),e(Re,EZr),e(Re,l0),e(l0,y0e),e(y0e,CZr),e(l0,wZr),e(l0,_re),e(_re,AZr),e(l0,LZr),e(Re,yZr),e(Re,i0),e(i0,x0e),e(x0e,xZr),e(i0,$Zr),e(i0,ure),e(ure,kZr),e(i0,SZr),e(Ur,RZr),M(d0,Ur,null),b(f,$We,u),b(f,bf,u),e(bf,c0),e(c0,$0e),M(Y$,$0e,null),e(bf,PZr),e(bf,k0e),e(k0e,BZr),b(f,kWe,u),b(f,Mr,u),M(K$,Mr,null),e(Mr,IZr),e(Mr,vf),e(vf,NZr),e(vf,bre),e(bre,qZr),e(vf,jZr),e(vf,vre),e(vre,DZr),e(vf,GZr),e(Mr,OZr),e(Mr,Z$),e(Z$,VZr),e(Z$,S0e),e(S0e,XZr),e(Z$,zZr),e(Mr,WZr),e(Mr,ea),M(ek,ea,null),e(ea,QZr),e(ea,R0e),e(R0e,HZr),e(ea,UZr),e(ea,Ff),e(Ff,JZr),e(Ff,P0e),e(P0e,YZr),e(Ff,KZr),e(Ff,Fre),e(Fre,ZZr),e(Ff,eet),e(ea,oet),M(f0,ea,null),e(Mr,ret),e(Mr,Jr),M(ok,Jr,null),e(Jr,tet),e(Jr,B0e),e(B0e,aet),e(Jr,net),e(Jr,yn),e(yn,set),e(yn,I0e),e(I0e,iet),e(yn,det),e(yn,N0e),e(N0e,cet),e(yn,fet),e(yn,q0e),e(q0e,met),e(yn,get),e(Jr,het),e(Jr,Ve),e(Ve,m0),e(m0,j0e),e(j0e,pet),e(m0,_et),e(m0,Tre),e(Tre,uet),e(m0,bet),e(Ve,vet),e(Ve,g0),e(g0,D0e),e(D0e,Fet),e(g0,Tet),e(g0,Mre),e(Mre,Met),e(g0,Eet),e(Ve,Cet),e(Ve,h0),e(h0,G0e),e(G0e,wet),e(h0,Aet),e(h0,Ere),e(Ere,Let),e(h0,yet),e(Ve,xet),e(Ve,p0),e(p0,O0e),e(O0e,$et),e(p0,ket),e(p0,Cre),e(Cre,Set),e(p0,Ret),e(Ve,Pet),e(Ve,_0),e(_0,V0e),e(V0e,Bet),e(_0,Iet),e(_0,wre),e(wre,Net),e(_0,qet),e(Ve,jet),e(Ve,u0),e(u0,X0e),e(X0e,Det),e(u0,Get),e(u0,Are),e(Are,Oet),e(u0,Vet),e(Ve,Xet),e(Ve,b0),e(b0,z0e),e(z0e,zet),e(b0,Wet),e(b0,Lre),e(Lre,Qet),e(b0,Het),e(Ve,Uet),e(Ve,v0),e(v0,W0e),e(W0e,Jet),e(v0,Yet),e(v0,yre),e(yre,Ket),e(v0,Zet),e(Jr,eot),M(F0,Jr,null),b(f,SWe,u),b(f,Tf,u),e(Tf,T0),e(T0,Q0e),M(rk,Q0e,null),e(Tf,oot),e(Tf,H0e),e(H0e,rot),b(f,RWe,u),b(f,Er,u),M(tk,Er,null),e(Er,tot),e(Er,Mf),e(Mf,aot),e(Mf,xre),e(xre,not),e(Mf,sot),e(Mf,$re),e($re,lot),e(Mf,iot),e(Er,dot),e(Er,ak),e(ak,cot),e(ak,U0e),e(U0e,fot),e(ak,mot),e(Er,got),e(Er,oa),M(nk,oa,null),e(oa,hot),e(oa,J0e),e(J0e,pot),e(oa,_ot),e(oa,Ef),e(Ef,uot),e(Ef,Y0e),e(Y0e,bot),e(Ef,vot),e(Ef,kre),e(kre,Fot),e(Ef,Tot),e(oa,Mot),M(M0,oa,null),e(Er,Eot),e(Er,Yr),M(sk,Yr,null),e(Yr,Cot),e(Yr,K0e),e(K0e,wot),e(Yr,Aot),e(Yr,xn),e(xn,Lot),e(xn,Z0e),e(Z0e,yot),e(xn,xot),e(xn,ewe),e(ewe,$ot),e(xn,kot),e(xn,owe),e(owe,Sot),e(xn,Rot),e(Yr,Pot),e(Yr,Xe),e(Xe,E0),e(E0,rwe),e(rwe,Bot),e(E0,Iot),e(E0,Sre),e(Sre,Not),e(E0,qot),e(Xe,jot),e(Xe,C0),e(C0,twe),e(twe,Dot),e(C0,Got),e(C0,Rre),e(Rre,Oot),e(C0,Vot),e(Xe,Xot),e(Xe,w0),e(w0,awe),e(awe,zot),e(w0,Wot),e(w0,Pre),e(Pre,Qot),e(w0,Hot),e(Xe,Uot),e(Xe,A0),e(A0,nwe),e(nwe,Jot),e(A0,Yot),e(A0,Bre),e(Bre,Kot),e(A0,Zot),e(Xe,ert),e(Xe,L0),e(L0,swe),e(swe,ort),e(L0,rrt),e(L0,Ire),e(Ire,trt),e(L0,art),e(Xe,nrt),e(Xe,y0),e(y0,lwe),e(lwe,srt),e(y0,lrt),e(y0,Nre),e(Nre,irt),e(y0,drt),e(Xe,crt),e(Xe,x0),e(x0,iwe),e(iwe,frt),e(x0,mrt),e(x0,qre),e(qre,grt),e(x0,hrt),e(Xe,prt),e(Xe,$0),e($0,dwe),e(dwe,_rt),e($0,urt),e($0,jre),e(jre,brt),e($0,vrt),e(Yr,Frt),M(k0,Yr,null),b(f,PWe,u),b(f,Cf,u),e(Cf,S0),e(S0,cwe),M(lk,cwe,null),e(Cf,Trt),e(Cf,fwe),e(fwe,Mrt),b(f,BWe,u),b(f,Cr,u),M(ik,Cr,null),e(Cr,Ert),e(Cr,wf),e(wf,Crt),e(wf,Dre),e(Dre,wrt),e(wf,Art),e(wf,Gre),e(Gre,Lrt),e(wf,yrt),e(Cr,xrt),e(Cr,dk),e(dk,$rt),e(dk,mwe),e(mwe,krt),e(dk,Srt),e(Cr,Rrt),e(Cr,ra),M(ck,ra,null),e(ra,Prt),e(ra,gwe),e(gwe,Brt),e(ra,Irt),e(ra,Af),e(Af,Nrt),e(Af,hwe),e(hwe,qrt),e(Af,jrt),e(Af,Ore),e(Ore,Drt),e(Af,Grt),e(ra,Ort),M(R0,ra,null),e(Cr,Vrt),e(Cr,Kr),M(fk,Kr,null),e(Kr,Xrt),e(Kr,pwe),e(pwe,zrt),e(Kr,Wrt),e(Kr,$n),e($n,Qrt),e($n,_we),e(_we,Hrt),e($n,Urt),e($n,uwe),e(uwe,Jrt),e($n,Yrt),e($n,bwe),e(bwe,Krt),e($n,Zrt),e(Kr,ett),e(Kr,vwe),e(vwe,P0),e(P0,Fwe),e(Fwe,ott),e(P0,rtt),e(P0,Vre),e(Vre,ttt),e(P0,att),e(Kr,ntt),M(B0,Kr,null),b(f,IWe,u),b(f,Lf,u),e(Lf,I0),e(I0,Twe),M(mk,Twe,null),e(Lf,stt),e(Lf,Mwe),e(Mwe,ltt),b(f,NWe,u),b(f,wr,u),M(gk,wr,null),e(wr,itt),e(wr,yf),e(yf,dtt),e(yf,Xre),e(Xre,ctt),e(yf,ftt),e(yf,zre),e(zre,mtt),e(yf,gtt),e(wr,htt),e(wr,hk),e(hk,ptt),e(hk,Ewe),e(Ewe,_tt),e(hk,utt),e(wr,btt),e(wr,ta),M(pk,ta,null),e(ta,vtt),e(ta,Cwe),e(Cwe,Ftt),e(ta,Ttt),e(ta,xf),e(xf,Mtt),e(xf,wwe),e(wwe,Ett),e(xf,Ctt),e(xf,Wre),e(Wre,wtt),e(xf,Att),e(ta,Ltt),M(N0,ta,null),e(wr,ytt),e(wr,Zr),M(_k,Zr,null),e(Zr,xtt),e(Zr,Awe),e(Awe,$tt),e(Zr,ktt),e(Zr,kn),e(kn,Stt),e(kn,Lwe),e(Lwe,Rtt),e(kn,Ptt),e(kn,ywe),e(ywe,Btt),e(kn,Itt),e(kn,xwe),e(xwe,Ntt),e(kn,qtt),e(Zr,jtt),e(Zr,uk),e(uk,q0),e(q0,$we),e($we,Dtt),e(q0,Gtt),e(q0,Qre),e(Qre,Ott),e(q0,Vtt),e(uk,Xtt),e(uk,j0),e(j0,kwe),e(kwe,ztt),e(j0,Wtt),e(j0,Hre),e(Hre,Qtt),e(j0,Htt),e(Zr,Utt),M(D0,Zr,null),b(f,qWe,u),b(f,$f,u),e($f,G0),e(G0,Swe),M(bk,Swe,null),e($f,Jtt),e($f,Rwe),e(Rwe,Ytt),b(f,jWe,u),b(f,Ar,u),M(vk,Ar,null),e(Ar,Ktt),e(Ar,kf),e(kf,Ztt),e(kf,Ure),e(Ure,eat),e(kf,oat),e(kf,Jre),e(Jre,rat),e(kf,tat),e(Ar,aat),e(Ar,Fk),e(Fk,nat),e(Fk,Pwe),e(Pwe,sat),e(Fk,lat),e(Ar,iat),e(Ar,aa),M(Tk,aa,null),e(aa,dat),e(aa,Bwe),e(Bwe,cat),e(aa,fat),e(aa,Sf),e(Sf,mat),e(Sf,Iwe),e(Iwe,gat),e(Sf,hat),e(Sf,Yre),e(Yre,pat),e(Sf,_at),e(aa,uat),M(O0,aa,null),e(Ar,bat),e(Ar,et),M(Mk,et,null),e(et,vat),e(et,Nwe),e(Nwe,Fat),e(et,Tat),e(et,Sn),e(Sn,Mat),e(Sn,qwe),e(qwe,Eat),e(Sn,Cat),e(Sn,jwe),e(jwe,wat),e(Sn,Aat),e(Sn,Dwe),e(Dwe,Lat),e(Sn,yat),e(et,xat),e(et,Gwe),e(Gwe,V0),e(V0,Owe),e(Owe,$at),e(V0,kat),e(V0,Kre),e(Kre,Sat),e(V0,Rat),e(et,Pat),M(X0,et,null),DWe=!0},p(f,[u]){const Ek={};u&2&&(Ek.$$scope={dirty:u,ctx:f}),Gf.$set(Ek);const Vwe={};u&2&&(Vwe.$$scope={dirty:u,ctx:f}),eh.$set(Vwe);const Xwe={};u&2&&(Xwe.$$scope={dirty:u,ctx:f}),Ih.$set(Xwe);const zwe={};u&2&&(zwe.$$scope={dirty:u,ctx:f}),Fp.$set(zwe);const Ck={};u&2&&(Ck.$$scope={dirty:u,ctx:f}),Tp.$set(Ck);const Wwe={};u&2&&(Wwe.$$scope={dirty:u,ctx:f}),Vp.$set(Wwe);const Rn={};u&2&&(Rn.$$scope={dirty:u,ctx:f}),Xp.$set(Rn);const Qwe={};u&2&&(Qwe.$$scope={dirty:u,ctx:f}),Qp.$set(Qwe);const Hwe={};u&2&&(Hwe.$$scope={dirty:u,ctx:f}),Zu.$set(Hwe);const Uwe={};u&2&&(Uwe.$$scope={dirty:u,ctx:f}),o1.$set(Uwe);const wk={};u&2&&(wk.$$scope={dirty:u,ctx:f}),H1.$set(wk);const Jwe={};u&2&&(Jwe.$$scope={dirty:u,ctx:f}),J1.$set(Jwe);const Ak={};u&2&&(Ak.$$scope={dirty:u,ctx:f}),q2.$set(Ak);const Ywe={};u&2&&(Ywe.$$scope={dirty:u,ctx:f}),D2.$set(Ywe);const Lk={};u&2&&(Lk.$$scope={dirty:u,ctx:f}),Ab.$set(Lk);const Kwe={};u&2&&(Kwe.$$scope={dirty:u,ctx:f}),yb.$set(Kwe);const Zwe={};u&2&&(Zwe.$$scope={dirty:u,ctx:f}),Ub.$set(Zwe);const eAe={};u&2&&(eAe.$$scope={dirty:u,ctx:f}),Yb.$set(eAe);const Rf={};u&2&&(Rf.$$scope={dirty:u,ctx:f}),J3.$set(Rf);const oAe={};u&2&&(oAe.$$scope={dirty:u,ctx:f}),K3.$set(oAe);const rAe={};u&2&&(rAe.$$scope={dirty:u,ctx:f}),$v.$set(rAe);const tAe={};u&2&&(tAe.$$scope={dirty:u,ctx:f}),Sv.$set(tAe);const yk={};u&2&&(yk.$$scope={dirty:u,ctx:f}),Dv.$set(yk);const aAe={};u&2&&(aAe.$$scope={dirty:u,ctx:f}),Ov.$set(aAe);const nAe={};u&2&&(nAe.$$scope={dirty:u,ctx:f}),AF.$set(nAe);const sAe={};u&2&&(sAe.$$scope={dirty:u,ctx:f}),yF.$set(sAe);const nt={};u&2&&(nt.$$scope={dirty:u,ctx:f}),bT.$set(nt);const xk={};u&2&&(xk.$$scope={dirty:u,ctx:f}),FT.$set(xk);const lAe={};u&2&&(lAe.$$scope={dirty:u,ctx:f}),ET.$set(lAe);const $k={};u&2&&($k.$$scope={dirty:u,ctx:f}),wT.$set($k);const iAe={};u&2&&(iAe.$$scope={dirty:u,ctx:f}),DT.$set(iAe);const st={};u&2&&(st.$$scope={dirty:u,ctx:f}),OT.$set(st);const dAe={};u&2&&(dAe.$$scope={dirty:u,ctx:f}),zT.$set(dAe);const Pf={};u&2&&(Pf.$$scope={dirty:u,ctx:f}),QT.$set(Pf);const cAe={};u&2&&(cAe.$$scope={dirty:u,ctx:f}),JT.$set(cAe);const fAe={};u&2&&(fAe.$$scope={dirty:u,ctx:f}),KT.$set(fAe);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),d7.$set(L);const z0={};u&2&&(z0.$$scope={dirty:u,ctx:f}),f7.$set(z0);const mAe={};u&2&&(mAe.$$scope={dirty:u,ctx:f}),b7.$set(mAe);const gAe={};u&2&&(gAe.$$scope={dirty:u,ctx:f}),F7.$set(gAe);const W0={};u&2&&(W0.$$scope={dirty:u,ctx:f}),S7.$set(W0);const hAe={};u&2&&(hAe.$$scope={dirty:u,ctx:f}),P7.$set(hAe);const pAe={};u&2&&(pAe.$$scope={dirty:u,ctx:f}),q7.$set(pAe);const Q0={};u&2&&(Q0.$$scope={dirty:u,ctx:f}),D7.$set(Q0);const _Ae={};u&2&&(_Ae.$$scope={dirty:u,ctx:f}),Q7.$set(_Ae);const uAe={};u&2&&(uAe.$$scope={dirty:u,ctx:f}),U7.$set(uAe);const H0={};u&2&&(H0.$$scope={dirty:u,ctx:f}),e8.$set(H0);const bAe={};u&2&&(bAe.$$scope={dirty:u,ctx:f}),r8.$set(bAe);const vAe={};u&2&&(vAe.$$scope={dirty:u,ctx:f}),s8.$set(vAe);const U0={};u&2&&(U0.$$scope={dirty:u,ctx:f}),i8.$set(U0);const FAe={};u&2&&(FAe.$$scope={dirty:u,ctx:f}),f8.$set(FAe);const TAe={};u&2&&(TAe.$$scope={dirty:u,ctx:f}),g8.$set(TAe);const J0={};u&2&&(J0.$$scope={dirty:u,ctx:f}),F8.$set(J0);const MAe={};u&2&&(MAe.$$scope={dirty:u,ctx:f}),M8.$set(MAe);const EAe={};u&2&&(EAe.$$scope={dirty:u,ctx:f}),w8.$set(EAe);const Y0={};u&2&&(Y0.$$scope={dirty:u,ctx:f}),L8.$set(Y0);const CAe={};u&2&&(CAe.$$scope={dirty:u,ctx:f}),E9.$set(CAe);const wAe={};u&2&&(wAe.$$scope={dirty:u,ctx:f}),w9.$set(wAe);const K0={};u&2&&(K0.$$scope={dirty:u,ctx:f}),U9.$set(K0);const AAe={};u&2&&(AAe.$$scope={dirty:u,ctx:f}),Y9.$set(AAe);const LAe={};u&2&&(LAe.$$scope={dirty:u,ctx:f}),fM.$set(LAe);const Z0={};u&2&&(Z0.$$scope={dirty:u,ctx:f}),gM.$set(Z0);const yAe={};u&2&&(yAe.$$scope={dirty:u,ctx:f}),FM.$set(yAe);const xAe={};u&2&&(xAe.$$scope={dirty:u,ctx:f}),MM.$set(xAe);const ew={};u&2&&(ew.$$scope={dirty:u,ctx:f}),VM.$set(ew);const $Ae={};u&2&&($Ae.$$scope={dirty:u,ctx:f}),zM.$set($Ae);const kAe={};u&2&&(kAe.$$scope={dirty:u,ctx:f}),r4.$set(kAe);const ow={};u&2&&(ow.$$scope={dirty:u,ctx:f}),a4.$set(ow);const SAe={};u&2&&(SAe.$$scope={dirty:u,ctx:f}),k4.$set(SAe);const RAe={};u&2&&(RAe.$$scope={dirty:u,ctx:f}),R4.$set(RAe);const rw={};u&2&&(rw.$$scope={dirty:u,ctx:f}),Y4.$set(rw);const PAe={};u&2&&(PAe.$$scope={dirty:u,ctx:f}),Z4.$set(PAe);const BAe={};u&2&&(BAe.$$scope={dirty:u,ctx:f}),rE.$set(BAe);const tw={};u&2&&(tw.$$scope={dirty:u,ctx:f}),aE.$set(tw);const IAe={};u&2&&(IAe.$$scope={dirty:u,ctx:f}),sE.$set(IAe);const NAe={};u&2&&(NAe.$$scope={dirty:u,ctx:f}),iE.$set(NAe);const aw={};u&2&&(aw.$$scope={dirty:u,ctx:f}),xE.$set(aw);const qAe={};u&2&&(qAe.$$scope={dirty:u,ctx:f}),kE.$set(qAe);const jAe={};u&2&&(jAe.$$scope={dirty:u,ctx:f}),KE.$set(jAe);const nw={};u&2&&(nw.$$scope={dirty:u,ctx:f}),eC.$set(nw);const DAe={};u&2&&(DAe.$$scope={dirty:u,ctx:f}),rC.$set(DAe);const GAe={};u&2&&(GAe.$$scope={dirty:u,ctx:f}),aC.$set(GAe);const sw={};u&2&&(sw.$$scope={dirty:u,ctx:f}),sC.$set(sw);const OAe={};u&2&&(OAe.$$scope={dirty:u,ctx:f}),iC.$set(OAe);const VAe={};u&2&&(VAe.$$scope={dirty:u,ctx:f}),IC.$set(VAe);const lw={};u&2&&(lw.$$scope={dirty:u,ctx:f}),qC.$set(lw);const XAe={};u&2&&(XAe.$$scope={dirty:u,ctx:f}),UC.$set(XAe);const zAe={};u&2&&(zAe.$$scope={dirty:u,ctx:f}),YC.$set(zAe);const iw={};u&2&&(iw.$$scope={dirty:u,ctx:f}),f5.$set(iw);const WAe={};u&2&&(WAe.$$scope={dirty:u,ctx:f}),g5.$set(WAe);const QAe={};u&2&&(QAe.$$scope={dirty:u,ctx:f}),C5.$set(QAe);const dw={};u&2&&(dw.$$scope={dirty:u,ctx:f}),A5.$set(dw);const HAe={};u&2&&(HAe.$$scope={dirty:u,ctx:f}),N5.$set(HAe);const UAe={};u&2&&(UAe.$$scope={dirty:u,ctx:f}),j5.$set(UAe);const cw={};u&2&&(cw.$$scope={dirty:u,ctx:f}),J5.$set(cw);const JAe={};u&2&&(JAe.$$scope={dirty:u,ctx:f}),K5.$set(JAe);const YAe={};u&2&&(YAe.$$scope={dirty:u,ctx:f}),d0.$set(YAe);const fw={};u&2&&(fw.$$scope={dirty:u,ctx:f}),f0.$set(fw);const KAe={};u&2&&(KAe.$$scope={dirty:u,ctx:f}),F0.$set(KAe);const ZAe={};u&2&&(ZAe.$$scope={dirty:u,ctx:f}),M0.$set(ZAe);const mw={};u&2&&(mw.$$scope={dirty:u,ctx:f}),k0.$set(mw);const e6e={};u&2&&(e6e.$$scope={dirty:u,ctx:f}),R0.$set(e6e);const o6e={};u&2&&(o6e.$$scope={dirty:u,ctx:f}),B0.$set(o6e);const gw={};u&2&&(gw.$$scope={dirty:u,ctx:f}),N0.$set(gw);const r6e={};u&2&&(r6e.$$scope={dirty:u,ctx:f}),D0.$set(r6e);const t6e={};u&2&&(t6e.$$scope={dirty:u,ctx:f}),O0.$set(t6e);const hw={};u&2&&(hw.$$scope={dirty:u,ctx:f}),X0.$set(hw)},i(f){DWe||(E(c.$$.fragment,f),E(Sa.$$.fragment,f),E(g6.$$.fragment,f),E(h6.$$.fragment,f),E(Gf.$$.fragment,f),E(p6.$$.fragment,f),E(_6.$$.fragment,f),E(v6.$$.fragment,f),E(eh.$$.fragment,f),E(F6.$$.fragment,f),E(T6.$$.fragment,f),E(M6.$$.fragment,f),E(w6.$$.fragment,f),E(Ih.$$.fragment,f),E(A6.$$.fragment,f),E(L6.$$.fragment,f),E(y6.$$.fragment,f),E(k6.$$.fragment,f),E(Fp.$$.fragment,f),E(Tp.$$.fragment,f),E(S6.$$.fragment,f),E(R6.$$.fragment,f),E(P6.$$.fragment,f),E(N6.$$.fragment,f),E(Vp.$$.fragment,f),E(Xp.$$.fragment,f),E(q6.$$.fragment,f),E(j6.$$.fragment,f),E(D6.$$.fragment,f),E(O6.$$.fragment,f),E(Qp.$$.fragment,f),E(V6.$$.fragment,f),E(Zu.$$.fragment,f),E(X6.$$.fragment,f),E(z6.$$.fragment,f),E(Q6.$$.fragment,f),E(o1.$$.fragment,f),E(H6.$$.fragment,f),E(H1.$$.fragment,f),E(U6.$$.fragment,f),E(J6.$$.fragment,f),E(K6.$$.fragment,f),E(J1.$$.fragment,f),E(Z6.$$.fragment,f),E(q2.$$.fragment,f),E(eL.$$.fragment,f),E(oL.$$.fragment,f),E(tL.$$.fragment,f),E(D2.$$.fragment,f),E(aL.$$.fragment,f),E(Ab.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(iL.$$.fragment,f),E(yb.$$.fragment,f),E(dL.$$.fragment,f),E(Ub.$$.fragment,f),E(cL.$$.fragment,f),E(fL.$$.fragment,f),E(gL.$$.fragment,f),E(Yb.$$.fragment,f),E(hL.$$.fragment,f),E(J3.$$.fragment,f),E(pL.$$.fragment,f),E(_L.$$.fragment,f),E(bL.$$.fragment,f),E(K3.$$.fragment,f),E(vL.$$.fragment,f),E($v.$$.fragment,f),E(FL.$$.fragment,f),E(TL.$$.fragment,f),E(EL.$$.fragment,f),E(Sv.$$.fragment,f),E(CL.$$.fragment,f),E(Dv.$$.fragment,f),E(wL.$$.fragment,f),E(AL.$$.fragment,f),E(yL.$$.fragment,f),E(Ov.$$.fragment,f),E(xL.$$.fragment,f),E(AF.$$.fragment,f),E($L.$$.fragment,f),E(kL.$$.fragment,f),E(RL.$$.fragment,f),E(yF.$$.fragment,f),E(PL.$$.fragment,f),E(bT.$$.fragment,f),E(BL.$$.fragment,f),E(IL.$$.fragment,f),E(qL.$$.fragment,f),E(FT.$$.fragment,f),E(jL.$$.fragment,f),E(ET.$$.fragment,f),E(DL.$$.fragment,f),E(GL.$$.fragment,f),E(VL.$$.fragment,f),E(wT.$$.fragment,f),E(XL.$$.fragment,f),E(DT.$$.fragment,f),E(zL.$$.fragment,f),E(WL.$$.fragment,f),E(HL.$$.fragment,f),E(OT.$$.fragment,f),E(UL.$$.fragment,f),E(zT.$$.fragment,f),E(JL.$$.fragment,f),E(YL.$$.fragment,f),E(ZL.$$.fragment,f),E(QT.$$.fragment,f),E(ey.$$.fragment,f),E(JT.$$.fragment,f),E(oy.$$.fragment,f),E(ry.$$.fragment,f),E(ay.$$.fragment,f),E(KT.$$.fragment,f),E(ny.$$.fragment,f),E(d7.$$.fragment,f),E(sy.$$.fragment,f),E(ly.$$.fragment,f),E(dy.$$.fragment,f),E(f7.$$.fragment,f),E(cy.$$.fragment,f),E(b7.$$.fragment,f),E(fy.$$.fragment,f),E(my.$$.fragment,f),E(hy.$$.fragment,f),E(F7.$$.fragment,f),E(py.$$.fragment,f),E(S7.$$.fragment,f),E(_y.$$.fragment,f),E(uy.$$.fragment,f),E(vy.$$.fragment,f),E(P7.$$.fragment,f),E(Fy.$$.fragment,f),E(q7.$$.fragment,f),E(My.$$.fragment,f),E(Ey.$$.fragment,f),E(wy.$$.fragment,f),E(D7.$$.fragment,f),E(Ay.$$.fragment,f),E(Q7.$$.fragment,f),E(Ly.$$.fragment,f),E(yy.$$.fragment,f),E($y.$$.fragment,f),E(U7.$$.fragment,f),E(ky.$$.fragment,f),E(e8.$$.fragment,f),E(Sy.$$.fragment,f),E(Ry.$$.fragment,f),E(By.$$.fragment,f),E(r8.$$.fragment,f),E(Iy.$$.fragment,f),E(s8.$$.fragment,f),E(qy.$$.fragment,f),E(jy.$$.fragment,f),E(Gy.$$.fragment,f),E(i8.$$.fragment,f),E(Oy.$$.fragment,f),E(f8.$$.fragment,f),E(Vy.$$.fragment,f),E(Xy.$$.fragment,f),E(Wy.$$.fragment,f),E(g8.$$.fragment,f),E(Qy.$$.fragment,f),E(F8.$$.fragment,f),E(Hy.$$.fragment,f),E(Uy.$$.fragment,f),E(Yy.$$.fragment,f),E(M8.$$.fragment,f),E(Ky.$$.fragment,f),E(w8.$$.fragment,f),E(Zy.$$.fragment,f),E(ex.$$.fragment,f),E(rx.$$.fragment,f),E(L8.$$.fragment,f),E(tx.$$.fragment,f),E(E9.$$.fragment,f),E(ax.$$.fragment,f),E(nx.$$.fragment,f),E(lx.$$.fragment,f),E(w9.$$.fragment,f),E(ix.$$.fragment,f),E(U9.$$.fragment,f),E(dx.$$.fragment,f),E(cx.$$.fragment,f),E(mx.$$.fragment,f),E(Y9.$$.fragment,f),E(gx.$$.fragment,f),E(fM.$$.fragment,f),E(hx.$$.fragment,f),E(px.$$.fragment,f),E(ux.$$.fragment,f),E(gM.$$.fragment,f),E(bx.$$.fragment,f),E(FM.$$.fragment,f),E(vx.$$.fragment,f),E(Fx.$$.fragment,f),E(Mx.$$.fragment,f),E(MM.$$.fragment,f),E(Ex.$$.fragment,f),E(VM.$$.fragment,f),E(Cx.$$.fragment,f),E(wx.$$.fragment,f),E(Lx.$$.fragment,f),E(zM.$$.fragment,f),E(yx.$$.fragment,f),E(r4.$$.fragment,f),E(xx.$$.fragment,f),E($x.$$.fragment,f),E(Sx.$$.fragment,f),E(a4.$$.fragment,f),E(Rx.$$.fragment,f),E(k4.$$.fragment,f),E(Px.$$.fragment,f),E(Bx.$$.fragment,f),E(Nx.$$.fragment,f),E(R4.$$.fragment,f),E(qx.$$.fragment,f),E(Y4.$$.fragment,f),E(jx.$$.fragment,f),E(Dx.$$.fragment,f),E(Ox.$$.fragment,f),E(Z4.$$.fragment,f),E(Vx.$$.fragment,f),E(rE.$$.fragment,f),E(zx.$$.fragment,f),E(Wx.$$.fragment,f),E(Hx.$$.fragment,f),E(aE.$$.fragment,f),E(Ux.$$.fragment,f),E(sE.$$.fragment,f),E(Jx.$$.fragment,f),E(Yx.$$.fragment,f),E(Zx.$$.fragment,f),E(iE.$$.fragment,f),E(e$.$$.fragment,f),E(xE.$$.fragment,f),E(o$.$$.fragment,f),E(r$.$$.fragment,f),E(a$.$$.fragment,f),E(kE.$$.fragment,f),E(n$.$$.fragment,f),E(KE.$$.fragment,f),E(s$.$$.fragment,f),E(l$.$$.fragment,f),E(d$.$$.fragment,f),E(eC.$$.fragment,f),E(c$.$$.fragment,f),E(rC.$$.fragment,f),E(f$.$$.fragment,f),E(m$.$$.fragment,f),E(h$.$$.fragment,f),E(aC.$$.fragment,f),E(p$.$$.fragment,f),E(sC.$$.fragment,f),E(_$.$$.fragment,f),E(u$.$$.fragment,f),E(v$.$$.fragment,f),E(iC.$$.fragment,f),E(F$.$$.fragment,f),E(IC.$$.fragment,f),E(T$.$$.fragment,f),E(M$.$$.fragment,f),E(C$.$$.fragment,f),E(qC.$$.fragment,f),E(w$.$$.fragment,f),E(UC.$$.fragment,f),E(A$.$$.fragment,f),E(L$.$$.fragment,f),E(x$.$$.fragment,f),E(YC.$$.fragment,f),E($$.$$.fragment,f),E(f5.$$.fragment,f),E(k$.$$.fragment,f),E(S$.$$.fragment,f),E(P$.$$.fragment,f),E(g5.$$.fragment,f),E(B$.$$.fragment,f),E(C5.$$.fragment,f),E(I$.$$.fragment,f),E(N$.$$.fragment,f),E(j$.$$.fragment,f),E(A5.$$.fragment,f),E(D$.$$.fragment,f),E(N5.$$.fragment,f),E(G$.$$.fragment,f),E(O$.$$.fragment,f),E(X$.$$.fragment,f),E(j5.$$.fragment,f),E(z$.$$.fragment,f),E(J5.$$.fragment,f),E(W$.$$.fragment,f),E(Q$.$$.fragment,f),E(U$.$$.fragment,f),E(K5.$$.fragment,f),E(J$.$$.fragment,f),E(d0.$$.fragment,f),E(Y$.$$.fragment,f),E(K$.$$.fragment,f),E(ek.$$.fragment,f),E(f0.$$.fragment,f),E(ok.$$.fragment,f),E(F0.$$.fragment,f),E(rk.$$.fragment,f),E(tk.$$.fragment,f),E(nk.$$.fragment,f),E(M0.$$.fragment,f),E(sk.$$.fragment,f),E(k0.$$.fragment,f),E(lk.$$.fragment,f),E(ik.$$.fragment,f),E(ck.$$.fragment,f),E(R0.$$.fragment,f),E(fk.$$.fragment,f),E(B0.$$.fragment,f),E(mk.$$.fragment,f),E(gk.$$.fragment,f),E(pk.$$.fragment,f),E(N0.$$.fragment,f),E(_k.$$.fragment,f),E(D0.$$.fragment,f),E(bk.$$.fragment,f),E(vk.$$.fragment,f),E(Tk.$$.fragment,f),E(O0.$$.fragment,f),E(Mk.$$.fragment,f),E(X0.$$.fragment,f),DWe=!0)},o(f){C(c.$$.fragment,f),C(Sa.$$.fragment,f),C(g6.$$.fragment,f),C(h6.$$.fragment,f),C(Gf.$$.fragment,f),C(p6.$$.fragment,f),C(_6.$$.fragment,f),C(v6.$$.fragment,f),C(eh.$$.fragment,f),C(F6.$$.fragment,f),C(T6.$$.fragment,f),C(M6.$$.fragment,f),C(w6.$$.fragment,f),C(Ih.$$.fragment,f),C(A6.$$.fragment,f),C(L6.$$.fragment,f),C(y6.$$.fragment,f),C(k6.$$.fragment,f),C(Fp.$$.fragment,f),C(Tp.$$.fragment,f),C(S6.$$.fragment,f),C(R6.$$.fragment,f),C(P6.$$.fragment,f),C(N6.$$.fragment,f),C(Vp.$$.fragment,f),C(Xp.$$.fragment,f),C(q6.$$.fragment,f),C(j6.$$.fragment,f),C(D6.$$.fragment,f),C(O6.$$.fragment,f),C(Qp.$$.fragment,f),C(V6.$$.fragment,f),C(Zu.$$.fragment,f),C(X6.$$.fragment,f),C(z6.$$.fragment,f),C(Q6.$$.fragment,f),C(o1.$$.fragment,f),C(H6.$$.fragment,f),C(H1.$$.fragment,f),C(U6.$$.fragment,f),C(J6.$$.fragment,f),C(K6.$$.fragment,f),C(J1.$$.fragment,f),C(Z6.$$.fragment,f),C(q2.$$.fragment,f),C(eL.$$.fragment,f),C(oL.$$.fragment,f),C(tL.$$.fragment,f),C(D2.$$.fragment,f),C(aL.$$.fragment,f),C(Ab.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(iL.$$.fragment,f),C(yb.$$.fragment,f),C(dL.$$.fragment,f),C(Ub.$$.fragment,f),C(cL.$$.fragment,f),C(fL.$$.fragment,f),C(gL.$$.fragment,f),C(Yb.$$.fragment,f),C(hL.$$.fragment,f),C(J3.$$.fragment,f),C(pL.$$.fragment,f),C(_L.$$.fragment,f),C(bL.$$.fragment,f),C(K3.$$.fragment,f),C(vL.$$.fragment,f),C($v.$$.fragment,f),C(FL.$$.fragment,f),C(TL.$$.fragment,f),C(EL.$$.fragment,f),C(Sv.$$.fragment,f),C(CL.$$.fragment,f),C(Dv.$$.fragment,f),C(wL.$$.fragment,f),C(AL.$$.fragment,f),C(yL.$$.fragment,f),C(Ov.$$.fragment,f),C(xL.$$.fragment,f),C(AF.$$.fragment,f),C($L.$$.fragment,f),C(kL.$$.fragment,f),C(RL.$$.fragment,f),C(yF.$$.fragment,f),C(PL.$$.fragment,f),C(bT.$$.fragment,f),C(BL.$$.fragment,f),C(IL.$$.fragment,f),C(qL.$$.fragment,f),C(FT.$$.fragment,f),C(jL.$$.fragment,f),C(ET.$$.fragment,f),C(DL.$$.fragment,f),C(GL.$$.fragment,f),C(VL.$$.fragment,f),C(wT.$$.fragment,f),C(XL.$$.fragment,f),C(DT.$$.fragment,f),C(zL.$$.fragment,f),C(WL.$$.fragment,f),C(HL.$$.fragment,f),C(OT.$$.fragment,f),C(UL.$$.fragment,f),C(zT.$$.fragment,f),C(JL.$$.fragment,f),C(YL.$$.fragment,f),C(ZL.$$.fragment,f),C(QT.$$.fragment,f),C(ey.$$.fragment,f),C(JT.$$.fragment,f),C(oy.$$.fragment,f),C(ry.$$.fragment,f),C(ay.$$.fragment,f),C(KT.$$.fragment,f),C(ny.$$.fragment,f),C(d7.$$.fragment,f),C(sy.$$.fragment,f),C(ly.$$.fragment,f),C(dy.$$.fragment,f),C(f7.$$.fragment,f),C(cy.$$.fragment,f),C(b7.$$.fragment,f),C(fy.$$.fragment,f),C(my.$$.fragment,f),C(hy.$$.fragment,f),C(F7.$$.fragment,f),C(py.$$.fragment,f),C(S7.$$.fragment,f),C(_y.$$.fragment,f),C(uy.$$.fragment,f),C(vy.$$.fragment,f),C(P7.$$.fragment,f),C(Fy.$$.fragment,f),C(q7.$$.fragment,f),C(My.$$.fragment,f),C(Ey.$$.fragment,f),C(wy.$$.fragment,f),C(D7.$$.fragment,f),C(Ay.$$.fragment,f),C(Q7.$$.fragment,f),C(Ly.$$.fragment,f),C(yy.$$.fragment,f),C($y.$$.fragment,f),C(U7.$$.fragment,f),C(ky.$$.fragment,f),C(e8.$$.fragment,f),C(Sy.$$.fragment,f),C(Ry.$$.fragment,f),C(By.$$.fragment,f),C(r8.$$.fragment,f),C(Iy.$$.fragment,f),C(s8.$$.fragment,f),C(qy.$$.fragment,f),C(jy.$$.fragment,f),C(Gy.$$.fragment,f),C(i8.$$.fragment,f),C(Oy.$$.fragment,f),C(f8.$$.fragment,f),C(Vy.$$.fragment,f),C(Xy.$$.fragment,f),C(Wy.$$.fragment,f),C(g8.$$.fragment,f),C(Qy.$$.fragment,f),C(F8.$$.fragment,f),C(Hy.$$.fragment,f),C(Uy.$$.fragment,f),C(Yy.$$.fragment,f),C(M8.$$.fragment,f),C(Ky.$$.fragment,f),C(w8.$$.fragment,f),C(Zy.$$.fragment,f),C(ex.$$.fragment,f),C(rx.$$.fragment,f),C(L8.$$.fragment,f),C(tx.$$.fragment,f),C(E9.$$.fragment,f),C(ax.$$.fragment,f),C(nx.$$.fragment,f),C(lx.$$.fragment,f),C(w9.$$.fragment,f),C(ix.$$.fragment,f),C(U9.$$.fragment,f),C(dx.$$.fragment,f),C(cx.$$.fragment,f),C(mx.$$.fragment,f),C(Y9.$$.fragment,f),C(gx.$$.fragment,f),C(fM.$$.fragment,f),C(hx.$$.fragment,f),C(px.$$.fragment,f),C(ux.$$.fragment,f),C(gM.$$.fragment,f),C(bx.$$.fragment,f),C(FM.$$.fragment,f),C(vx.$$.fragment,f),C(Fx.$$.fragment,f),C(Mx.$$.fragment,f),C(MM.$$.fragment,f),C(Ex.$$.fragment,f),C(VM.$$.fragment,f),C(Cx.$$.fragment,f),C(wx.$$.fragment,f),C(Lx.$$.fragment,f),C(zM.$$.fragment,f),C(yx.$$.fragment,f),C(r4.$$.fragment,f),C(xx.$$.fragment,f),C($x.$$.fragment,f),C(Sx.$$.fragment,f),C(a4.$$.fragment,f),C(Rx.$$.fragment,f),C(k4.$$.fragment,f),C(Px.$$.fragment,f),C(Bx.$$.fragment,f),C(Nx.$$.fragment,f),C(R4.$$.fragment,f),C(qx.$$.fragment,f),C(Y4.$$.fragment,f),C(jx.$$.fragment,f),C(Dx.$$.fragment,f),C(Ox.$$.fragment,f),C(Z4.$$.fragment,f),C(Vx.$$.fragment,f),C(rE.$$.fragment,f),C(zx.$$.fragment,f),C(Wx.$$.fragment,f),C(Hx.$$.fragment,f),C(aE.$$.fragment,f),C(Ux.$$.fragment,f),C(sE.$$.fragment,f),C(Jx.$$.fragment,f),C(Yx.$$.fragment,f),C(Zx.$$.fragment,f),C(iE.$$.fragment,f),C(e$.$$.fragment,f),C(xE.$$.fragment,f),C(o$.$$.fragment,f),C(r$.$$.fragment,f),C(a$.$$.fragment,f),C(kE.$$.fragment,f),C(n$.$$.fragment,f),C(KE.$$.fragment,f),C(s$.$$.fragment,f),C(l$.$$.fragment,f),C(d$.$$.fragment,f),C(eC.$$.fragment,f),C(c$.$$.fragment,f),C(rC.$$.fragment,f),C(f$.$$.fragment,f),C(m$.$$.fragment,f),C(h$.$$.fragment,f),C(aC.$$.fragment,f),C(p$.$$.fragment,f),C(sC.$$.fragment,f),C(_$.$$.fragment,f),C(u$.$$.fragment,f),C(v$.$$.fragment,f),C(iC.$$.fragment,f),C(F$.$$.fragment,f),C(IC.$$.fragment,f),C(T$.$$.fragment,f),C(M$.$$.fragment,f),C(C$.$$.fragment,f),C(qC.$$.fragment,f),C(w$.$$.fragment,f),C(UC.$$.fragment,f),C(A$.$$.fragment,f),C(L$.$$.fragment,f),C(x$.$$.fragment,f),C(YC.$$.fragment,f),C($$.$$.fragment,f),C(f5.$$.fragment,f),C(k$.$$.fragment,f),C(S$.$$.fragment,f),C(P$.$$.fragment,f),C(g5.$$.fragment,f),C(B$.$$.fragment,f),C(C5.$$.fragment,f),C(I$.$$.fragment,f),C(N$.$$.fragment,f),C(j$.$$.fragment,f),C(A5.$$.fragment,f),C(D$.$$.fragment,f),C(N5.$$.fragment,f),C(G$.$$.fragment,f),C(O$.$$.fragment,f),C(X$.$$.fragment,f),C(j5.$$.fragment,f),C(z$.$$.fragment,f),C(J5.$$.fragment,f),C(W$.$$.fragment,f),C(Q$.$$.fragment,f),C(U$.$$.fragment,f),C(K5.$$.fragment,f),C(J$.$$.fragment,f),C(d0.$$.fragment,f),C(Y$.$$.fragment,f),C(K$.$$.fragment,f),C(ek.$$.fragment,f),C(f0.$$.fragment,f),C(ok.$$.fragment,f),C(F0.$$.fragment,f),C(rk.$$.fragment,f),C(tk.$$.fragment,f),C(nk.$$.fragment,f),C(M0.$$.fragment,f),C(sk.$$.fragment,f),C(k0.$$.fragment,f),C(lk.$$.fragment,f),C(ik.$$.fragment,f),C(ck.$$.fragment,f),C(R0.$$.fragment,f),C(fk.$$.fragment,f),C(B0.$$.fragment,f),C(mk.$$.fragment,f),C(gk.$$.fragment,f),C(pk.$$.fragment,f),C(N0.$$.fragment,f),C(_k.$$.fragment,f),C(D0.$$.fragment,f),C(bk.$$.fragment,f),C(vk.$$.fragment,f),C(Tk.$$.fragment,f),C(O0.$$.fragment,f),C(Mk.$$.fragment,f),C(X0.$$.fragment,f),DWe=!1},d(f){t(g),f&&t(v),f&&t(p),w(c),f&&t(If),f&&t(lt),f&&t(Oe),f&&t(Qe),f&&t(qf),w(Sa,f),f&&t(He),f&&t(Ae),f&&t(wo),f&&t(Ra),f&&t(BXe),f&&t(Ii),w(g6),f&&t(IXe),f&&t(qn),f&&t(NXe),w(h6,f),f&&t(qXe),f&&t(YS),f&&t(jXe),w(Gf,f),f&&t(DXe),f&&t(Ni),w(p6),f&&t(GXe),f&&t(Ao),w(_6),w(v6),w(eh),w(F6),f&&t(OXe),f&&t(ji),w(T6),f&&t(VXe),f&&t(Lo),w(M6),w(w6),w(Ih),w(A6),f&&t(XXe),f&&t(Di),w(L6),f&&t(zXe),f&&t(yo),w(y6),w(k6),w(Fp),w(Tp),w(S6),f&&t(WXe),f&&t(Gi),w(R6),f&&t(QXe),f&&t(xo),w(P6),w(N6),w(Vp),w(Xp),w(q6),f&&t(HXe),f&&t(Vi),w(j6),f&&t(UXe),f&&t($o),w(D6),w(O6),w(Qp),w(V6),w(Zu),f&&t(JXe),f&&t(Wi),w(X6),f&&t(YXe),f&&t(ko),w(z6),w(Q6),w(o1),w(H6),w(H1),f&&t(KXe),f&&t(Ui),w(U6),f&&t(ZXe),f&&t(So),w(J6),w(K6),w(J1),w(Z6),w(q2),f&&t(eze),f&&t(Ki),w(eL),f&&t(oze),f&&t(Ro),w(oL),w(tL),w(D2),w(aL),w(Ab),f&&t(rze),f&&t(od),w(nL),f&&t(tze),f&&t(Po),w(sL),w(iL),w(yb),w(dL),w(Ub),f&&t(aze),f&&t(ad),w(cL),f&&t(nze),f&&t(Bo),w(fL),w(gL),w(Yb),w(hL),w(J3),f&&t(sze),f&&t(ld),w(pL),f&&t(lze),f&&t(Io),w(_L),w(bL),w(K3),w(vL),w($v),f&&t(ize),f&&t(cd),w(FL),f&&t(dze),f&&t(No),w(TL),w(EL),w(Sv),w(CL),w(Dv),f&&t(cze),f&&t(gd),w(wL),f&&t(fze),f&&t(jo),w(AL),w(yL),w(Ov),w(xL),w(AF),f&&t(mze),f&&t(_d),w($L),f&&t(gze),f&&t(Do),w(kL),w(RL),w(yF),w(PL),w(bT),f&&t(hze),f&&t(vd),w(BL),f&&t(pze),f&&t(Go),w(IL),w(qL),w(FT),w(jL),w(ET),f&&t(_ze),f&&t(Md),w(DL),f&&t(uze),f&&t(Oo),w(GL),w(VL),w(wT),w(XL),w(DT),f&&t(bze),f&&t(wd),w(zL),f&&t(vze),f&&t(Vo),w(WL),w(HL),w(OT),w(UL),w(zT),f&&t(Fze),f&&t(yd),w(JL),f&&t(Tze),f&&t(Xo),w(YL),w(ZL),w(QT),w(ey),w(JT),f&&t(Mze),f&&t(kd),w(oy),f&&t(Eze),f&&t(zo),w(ry),w(ay),w(KT),w(ny),w(d7),f&&t(Cze),f&&t(Pd),w(sy),f&&t(wze),f&&t(Wo),w(ly),w(dy),w(f7),w(cy),w(b7),f&&t(Aze),f&&t(Nd),w(fy),f&&t(Lze),f&&t(Qo),w(my),w(hy),w(F7),w(py),w(S7),f&&t(yze),f&&t(Dd),w(_y),f&&t(xze),f&&t(Ho),w(uy),w(vy),w(P7),w(Fy),w(q7),f&&t($ze),f&&t(Vd),w(My),f&&t(kze),f&&t(Uo),w(Ey),w(wy),w(D7),w(Ay),w(Q7),f&&t(Sze),f&&t(Wd),w(Ly),f&&t(Rze),f&&t(Jo),w(yy),w($y),w(U7),w(ky),w(e8),f&&t(Pze),f&&t(Jd),w(Sy),f&&t(Bze),f&&t(Yo),w(Ry),w(By),w(r8),w(Iy),w(s8),f&&t(Ize),f&&t(Zd),w(qy),f&&t(Nze),f&&t(Ko),w(jy),w(Gy),w(i8),w(Oy),w(f8),f&&t(qze),f&&t(rc),w(Vy),f&&t(jze),f&&t(Zo),w(Xy),w(Wy),w(g8),w(Qy),w(F8),f&&t(Dze),f&&t(nc),w(Hy),f&&t(Gze),f&&t(er),w(Uy),w(Yy),w(M8),w(Ky),w(w8),f&&t(Oze),f&&t(ic),w(Zy),f&&t(Vze),f&&t(or),w(ex),w(rx),w(L8),w(tx),w(E9),f&&t(Xze),f&&t(fc),w(ax),f&&t(zze),f&&t(rr),w(nx),w(lx),w(w9),w(ix),w(U9),f&&t(Wze),f&&t(hc),w(dx),f&&t(Qze),f&&t(tr),w(cx),w(mx),w(Y9),w(gx),w(fM),f&&t(Hze),f&&t(uc),w(hx),f&&t(Uze),f&&t(ar),w(px),w(ux),w(gM),w(bx),w(FM),f&&t(Jze),f&&t(Fc),w(vx),f&&t(Yze),f&&t(nr),w(Fx),w(Mx),w(MM),w(Ex),w(VM),f&&t(Kze),f&&t(Ec),w(Cx),f&&t(Zze),f&&t(sr),w(wx),w(Lx),w(zM),w(yx),w(r4),f&&t(eWe),f&&t(Ac),w(xx),f&&t(oWe),f&&t(lr),w($x),w(Sx),w(a4),w(Rx),w(k4),f&&t(rWe),f&&t(xc),w(Px),f&&t(tWe),f&&t(ir),w(Bx),w(Nx),w(R4),w(qx),w(Y4),f&&t(aWe),f&&t(Sc),w(jx),f&&t(nWe),f&&t(dr),w(Dx),w(Ox),w(Z4),w(Vx),w(rE),f&&t(sWe),f&&t(Bc),w(zx),f&&t(lWe),f&&t(cr),w(Wx),w(Hx),w(aE),w(Ux),w(sE),f&&t(iWe),f&&t(qc),w(Jx),f&&t(dWe),f&&t(fr),w(Yx),w(Zx),w(iE),w(e$),w(xE),f&&t(cWe),f&&t(Gc),w(o$),f&&t(fWe),f&&t(mr),w(r$),w(a$),w(kE),w(n$),w(KE),f&&t(mWe),f&&t(Xc),w(s$),f&&t(gWe),f&&t(gr),w(l$),w(d$),w(eC),w(c$),w(rC),f&&t(hWe),f&&t(Qc),w(f$),f&&t(pWe),f&&t(hr),w(m$),w(h$),w(aC),w(p$),w(sC),f&&t(_We),f&&t(Jc),w(_$),f&&t(uWe),f&&t(pr),w(u$),w(v$),w(iC),w(F$),w(IC),f&&t(bWe),f&&t(Zc),w(T$),f&&t(vWe),f&&t(_r),w(M$),w(C$),w(qC),w(w$),w(UC),f&&t(FWe),f&&t(rf),w(A$),f&&t(TWe),f&&t(ur),w(L$),w(x$),w(YC),w($$),w(f5),f&&t(MWe),f&&t(nf),w(k$),f&&t(EWe),f&&t(br),w(S$),w(P$),w(g5),w(B$),w(C5),f&&t(CWe),f&&t(df),w(I$),f&&t(wWe),f&&t(vr),w(N$),w(j$),w(A5),w(D$),w(N5),f&&t(AWe),f&&t(mf),w(G$),f&&t(LWe),f&&t(Fr),w(O$),w(X$),w(j5),w(z$),w(J5),f&&t(yWe),f&&t(pf),w(W$),f&&t(xWe),f&&t(Tr),w(Q$),w(U$),w(K5),w(J$),w(d0),f&&t($We),f&&t(bf),w(Y$),f&&t(kWe),f&&t(Mr),w(K$),w(ek),w(f0),w(ok),w(F0),f&&t(SWe),f&&t(Tf),w(rk),f&&t(RWe),f&&t(Er),w(tk),w(nk),w(M0),w(sk),w(k0),f&&t(PWe),f&&t(Cf),w(lk),f&&t(BWe),f&&t(Cr),w(ik),w(ck),w(R0),w(fk),w(B0),f&&t(IWe),f&&t(Lf),w(mk),f&&t(NWe),f&&t(wr),w(gk),w(pk),w(N0),w(_k),w(D0),f&&t(qWe),f&&t($f),w(bk),f&&t(jWe),f&&t(Ar),w(vk),w(Tk),w(O0),w(Mk),w(X0)}}}const PJt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function BJt($){return RHt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class OJt extends xHt{constructor(g){super();$Ht(this,g,BJt,RJt,kHt,{})}}export{OJt as default,PJt as metadata};
