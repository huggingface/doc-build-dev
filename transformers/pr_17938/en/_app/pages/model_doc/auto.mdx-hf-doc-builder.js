import{S as BQt,i as IQt,s as NQt,e as a,k as l,w as F,t as o,M as qQt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as jQt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as Jtt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function DQt($){let g,v,p,m,_,d,h,Co,yi,Bf,lt,xi,$i,n6,If,Oe,Qe,ki,Pn,s6,Bn,In,l6,Si,Nn,i6,Ri,Nf,Sa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Co=o(`, make sure its
`),yi=a("code"),Bf=o("model_type"),lt=o(" attribute is set to the same key you use when registering the config (here "),xi=a("code"),$i=o('"new-model"'),n6=o(")."),If=l(),Oe=a("p"),Qe=o("Likewise, if your "),ki=a("code"),Pn=o("NewModel"),s6=o(" is a subclass of "),Bn=a("a"),In=o("PreTrainedModel"),l6=o(`, make sure its
`),Si=a("code"),Nn=o("config_class"),i6=o(` attribute is set to the same class you use when registering the model (here
`),Ri=a("code"),Nf=o("NewModelConfig"),Sa=o(")."),this.h()},l(He){g=n(He,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var GS=s(p);m=r(GS,"NewModelConfig"),GS.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Pi=s(d);h=r(Pi,"PretrainedConfig"),Pi.forEach(t),Co=r(Ae,`, make sure its
`),yi=n(Ae,"CODE",{});var OS=s(yi);Bf=r(OS,"model_type"),OS.forEach(t),lt=r(Ae," attribute is set to the same key you use when registering the config (here "),xi=n(Ae,"CODE",{});var VS=s(xi);$i=r(VS,'"new-model"'),VS.forEach(t),n6=r(Ae,")."),Ae.forEach(t),If=i(He),Oe=n(He,"P",{});var wo=s(Oe);Qe=r(wo,"Likewise, if your "),ki=n(wo,"CODE",{});var Ra=s(ki);Pn=r(Ra,"NewModel"),Ra.forEach(t),s6=r(wo," is a subclass of "),Bn=n(wo,"A",{href:!0});var XS=s(Bn);In=r(XS,"PreTrainedModel"),XS.forEach(t),l6=r(wo,`, make sure its
`),Si=n(wo,"CODE",{});var qf=s(Si);Nn=r(qf,"config_class"),qf.forEach(t),i6=r(wo,` attribute is set to the same class you use when registering the model (here
`),Ri=n(wo,"CODE",{});var zS=s(Ri);Nf=r(zS,"NewModelConfig"),zS.forEach(t),Sa=r(wo,")."),wo.forEach(t),this.h()},h(){c(Bn,"href","/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel")},m(He,Ae){b(He,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Co),e(g,yi),e(yi,Bf),e(g,lt),e(g,xi),e(xi,$i),e(g,n6),b(He,If,Ae),b(He,Oe,Ae),e(Oe,Qe),e(Oe,ki),e(ki,Pn),e(Oe,s6),e(Oe,Bn),e(Bn,In),e(Oe,l6),e(Oe,Si),e(Si,Nn),e(Oe,i6),e(Oe,Ri),e(Ri,Nf),e(Oe,Sa)},d(He){He&&t(g),He&&t(If),He&&t(Oe)}}}function GQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VQt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Co=s(p);m=r(Co,"use_auth_token=True"),Co.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function XQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zQt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Co=s(p);m=r(Co,"use_auth_token=True"),Co.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function WQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ht($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function THt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ht($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ut($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ut($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jUt($){let g,v,p,m,_,d,h,Co,yi,Bf,lt,xi,$i,n6,If,Oe,Qe,ki,Pn,s6,Bn,In,l6,Si,Nn,i6,Ri,Nf,Sa,He,Ae,GS,Pi,OS,VS,wo,Ra,XS,qf,zS,RHe,bXe,Bi,jf,Iae,d6,PHe,Nae,BHe,vXe,qn,IHe,qae,NHe,qHe,jae,jHe,DHe,FXe,c6,TXe,WS,GHe,MXe,Df,EXe,Ii,Gf,Dae,f6,OHe,Gae,VHe,CXe,Ao,m6,XHe,g6,zHe,QS,WHe,QHe,HHe,h6,UHe,Oae,JHe,YHe,KHe,Lr,p6,ZHe,Vae,eUe,oUe,Ni,rUe,Xae,tUe,aUe,zae,nUe,sUe,lUe,A,Of,Wae,iUe,dUe,HS,cUe,fUe,mUe,Vf,Qae,gUe,hUe,US,pUe,_Ue,uUe,Xf,Hae,bUe,vUe,JS,FUe,TUe,MUe,zf,Uae,EUe,CUe,YS,wUe,AUe,LUe,Wf,Jae,yUe,xUe,KS,$Ue,kUe,SUe,Qf,Yae,RUe,PUe,ZS,BUe,IUe,NUe,Hf,Kae,qUe,jUe,eR,DUe,GUe,OUe,Uf,Zae,VUe,XUe,oR,zUe,WUe,QUe,Jf,ene,HUe,UUe,rR,JUe,YUe,KUe,Yf,one,ZUe,eJe,tR,oJe,rJe,tJe,Kf,rne,aJe,nJe,aR,sJe,lJe,iJe,Zf,tne,dJe,cJe,nR,fJe,mJe,gJe,em,ane,hJe,pJe,sR,_Je,uJe,bJe,om,nne,vJe,FJe,lR,TJe,MJe,EJe,rm,sne,CJe,wJe,iR,AJe,LJe,yJe,tm,lne,xJe,$Je,dR,kJe,SJe,RJe,am,ine,PJe,BJe,cR,IJe,NJe,qJe,nm,dne,jJe,DJe,fR,GJe,OJe,VJe,sm,cne,XJe,zJe,mR,WJe,QJe,HJe,lm,fne,UJe,JJe,gR,YJe,KJe,ZJe,im,mne,eYe,oYe,hR,rYe,tYe,aYe,dm,gne,nYe,sYe,pR,lYe,iYe,dYe,cm,hne,cYe,fYe,_R,mYe,gYe,hYe,fm,pne,pYe,_Ye,uR,uYe,bYe,vYe,mm,_ne,FYe,TYe,bR,MYe,EYe,CYe,gm,une,wYe,AYe,vR,LYe,yYe,xYe,hm,bne,$Ye,kYe,FR,SYe,RYe,PYe,pm,vne,BYe,IYe,TR,NYe,qYe,jYe,_m,Fne,DYe,GYe,MR,OYe,VYe,XYe,um,Tne,zYe,WYe,ER,QYe,HYe,UYe,bm,Mne,JYe,YYe,CR,KYe,ZYe,eKe,vm,Ene,oKe,rKe,wR,tKe,aKe,nKe,Fm,Cne,sKe,lKe,AR,iKe,dKe,cKe,Tm,wne,fKe,mKe,LR,gKe,hKe,pKe,Mm,Ane,_Ke,uKe,yR,bKe,vKe,FKe,Em,Lne,TKe,MKe,xR,EKe,CKe,wKe,Cm,yne,AKe,LKe,$R,yKe,xKe,$Ke,wm,xne,kKe,SKe,kR,RKe,PKe,BKe,Am,$ne,IKe,NKe,SR,qKe,jKe,DKe,Lm,kne,GKe,OKe,RR,VKe,XKe,zKe,ym,Sne,WKe,QKe,PR,HKe,UKe,JKe,xm,Rne,YKe,KKe,BR,ZKe,eZe,oZe,$m,Pne,rZe,tZe,IR,aZe,nZe,sZe,km,Bne,lZe,iZe,NR,dZe,cZe,fZe,Sm,Ine,mZe,gZe,qR,hZe,pZe,_Ze,Rm,Nne,uZe,bZe,jR,vZe,FZe,TZe,Pm,qne,MZe,EZe,DR,CZe,wZe,AZe,Bm,jne,LZe,yZe,GR,xZe,$Ze,kZe,Im,Dne,SZe,RZe,OR,PZe,BZe,IZe,Nm,Gne,NZe,qZe,VR,jZe,DZe,GZe,qm,One,OZe,VZe,XR,XZe,zZe,WZe,jm,Vne,QZe,HZe,zR,UZe,JZe,YZe,Dm,Xne,KZe,ZZe,WR,eeo,oeo,reo,Gm,zne,teo,aeo,QR,neo,seo,leo,Om,Wne,ieo,deo,HR,ceo,feo,meo,Vm,Qne,geo,heo,UR,peo,_eo,ueo,Xm,Hne,beo,veo,JR,Feo,Teo,Meo,zm,Une,Eeo,Ceo,YR,weo,Aeo,Leo,Wm,Jne,yeo,xeo,KR,$eo,keo,Seo,Qm,Yne,Reo,Peo,ZR,Beo,Ieo,Neo,Hm,Kne,qeo,jeo,eP,Deo,Geo,Oeo,Um,Zne,Veo,Xeo,oP,zeo,Weo,Qeo,Jm,ese,Heo,Ueo,rP,Jeo,Yeo,Keo,Ym,ose,Zeo,eoo,tP,ooo,roo,too,Km,rse,aoo,noo,aP,soo,loo,ioo,Zm,tse,doo,coo,nP,foo,moo,goo,eg,ase,hoo,poo,sP,_oo,uoo,boo,og,nse,voo,Foo,lP,Too,Moo,Eoo,rg,sse,Coo,woo,iP,Aoo,Loo,yoo,tg,lse,xoo,$oo,dP,koo,Soo,Roo,ag,ise,Poo,Boo,cP,Ioo,Noo,qoo,ng,dse,joo,Doo,fP,Goo,Ooo,Voo,sg,cse,Xoo,zoo,mP,Woo,Qoo,Hoo,lg,fse,Uoo,Joo,gP,Yoo,Koo,Zoo,ig,mse,ero,oro,hP,rro,tro,aro,dg,gse,nro,sro,pP,lro,iro,dro,cg,hse,cro,fro,_P,mro,gro,hro,fg,pse,pro,_ro,uP,uro,bro,vro,mg,_se,Fro,Tro,bP,Mro,Ero,Cro,gg,use,wro,Aro,vP,Lro,yro,xro,hg,bse,$ro,kro,FP,Sro,Rro,Pro,pg,vse,Bro,Iro,TP,Nro,qro,jro,_g,Fse,Dro,Gro,MP,Oro,Vro,Xro,ug,Tse,zro,Wro,EP,Qro,Hro,Uro,bg,Mse,Jro,Yro,CP,Kro,Zro,eto,vg,Ese,oto,rto,wP,tto,ato,nto,Fg,Cse,sto,lto,AP,ito,dto,cto,Tg,wse,fto,mto,LP,gto,hto,pto,Mg,Ase,_to,uto,yP,bto,vto,Fto,Eg,Lse,Tto,Mto,xP,Eto,Cto,wto,Cg,yse,Ato,Lto,$P,yto,xto,$to,wg,xse,kto,Sto,kP,Rto,Pto,Bto,Ag,$se,Ito,Nto,SP,qto,jto,Dto,Lg,kse,Gto,Oto,RP,Vto,Xto,zto,yg,Sse,Wto,Qto,PP,Hto,Uto,Jto,xg,Rse,Yto,Kto,BP,Zto,eao,oao,$g,Pse,rao,tao,IP,aao,nao,sao,kg,Bse,lao,iao,NP,dao,cao,fao,Sg,Ise,mao,gao,qP,hao,pao,_ao,Rg,Nse,uao,bao,jP,vao,Fao,Tao,Pg,qse,Mao,Eao,DP,Cao,wao,Aao,Bg,jse,Lao,yao,GP,xao,$ao,kao,Ig,Dse,Sao,Rao,OP,Pao,Bao,Iao,Ng,Gse,Nao,qao,VP,jao,Dao,Gao,qg,Ose,Oao,Vao,XP,Xao,zao,Wao,jg,Vse,Qao,Hao,zP,Uao,Jao,Yao,Dg,Xse,Kao,Zao,WP,eno,ono,rno,Gg,zse,tno,ano,QP,nno,sno,lno,Og,Wse,ino,dno,HP,cno,fno,mno,Vg,Qse,gno,hno,UP,pno,_no,uno,Xg,Hse,bno,vno,JP,Fno,Tno,Mno,zg,Use,Eno,Cno,YP,wno,Ano,Lno,Wg,Jse,yno,xno,KP,$no,kno,Sno,Qg,Yse,Rno,Pno,ZP,Bno,Ino,Nno,Hg,Kse,qno,jno,eB,Dno,Gno,Ono,Ug,Zse,Vno,Xno,oB,zno,Wno,Qno,Jg,ele,Hno,Uno,rB,Jno,Yno,Kno,Yg,ole,Zno,eso,tB,oso,rso,tso,Kg,rle,aso,nso,aB,sso,lso,iso,Zg,dso,eh,_6,cso,tle,fso,wXe,qi,oh,ale,u6,mso,nle,gso,AXe,Lo,b6,hso,v6,pso,nB,_so,uso,bso,F6,vso,sle,Fso,Tso,Mso,yr,T6,Eso,lle,Cso,wso,Pa,Aso,ile,Lso,yso,dle,xso,$so,cle,kso,Sso,Rso,k,jn,fle,Pso,Bso,sB,Iso,Nso,lB,qso,jso,Dso,Dn,mle,Gso,Oso,iB,Vso,Xso,dB,zso,Wso,Qso,Gn,gle,Hso,Uso,cB,Jso,Yso,fB,Kso,Zso,elo,rh,hle,olo,rlo,mB,tlo,alo,nlo,On,ple,slo,llo,gB,ilo,dlo,hB,clo,flo,mlo,th,_le,glo,hlo,pB,plo,_lo,ulo,ah,ule,blo,vlo,_B,Flo,Tlo,Mlo,nh,ble,Elo,Clo,uB,wlo,Alo,Llo,Vn,vle,ylo,xlo,bB,$lo,klo,vB,Slo,Rlo,Plo,Xn,Fle,Blo,Ilo,FB,Nlo,qlo,TB,jlo,Dlo,Glo,zn,Tle,Olo,Vlo,MB,Xlo,zlo,EB,Wlo,Qlo,Hlo,sh,Mle,Ulo,Jlo,CB,Ylo,Klo,Zlo,lh,Ele,eio,oio,wB,rio,tio,aio,ih,Cle,nio,sio,AB,lio,iio,dio,Wn,wle,cio,fio,LB,mio,gio,yB,hio,pio,_io,dh,Ale,uio,bio,xB,vio,Fio,Tio,Qn,Lle,Mio,Eio,$B,Cio,wio,kB,Aio,Lio,yio,Hn,yle,xio,$io,SB,kio,Sio,RB,Rio,Pio,Bio,Un,xle,Iio,Nio,PB,qio,jio,BB,Dio,Gio,Oio,Jn,$le,Vio,Xio,IB,zio,Wio,NB,Qio,Hio,Uio,ch,kle,Jio,Yio,qB,Kio,Zio,edo,Yn,Sle,odo,rdo,jB,tdo,ado,DB,ndo,sdo,ldo,Kn,Rle,ido,ddo,GB,cdo,fdo,OB,mdo,gdo,hdo,Zn,Ple,pdo,_do,VB,udo,bdo,XB,vdo,Fdo,Tdo,es,Ble,Mdo,Edo,zB,Cdo,wdo,WB,Ado,Ldo,ydo,os,Ile,xdo,$do,QB,kdo,Sdo,HB,Rdo,Pdo,Bdo,rs,Nle,Ido,Ndo,UB,qdo,jdo,JB,Ddo,Gdo,Odo,fh,qle,Vdo,Xdo,YB,zdo,Wdo,Qdo,ts,jle,Hdo,Udo,KB,Jdo,Ydo,ZB,Kdo,Zdo,eco,mh,Dle,oco,rco,eI,tco,aco,nco,as,Gle,sco,lco,oI,ico,dco,rI,cco,fco,mco,ns,Ole,gco,hco,tI,pco,_co,aI,uco,bco,vco,ss,Vle,Fco,Tco,nI,Mco,Eco,sI,Cco,wco,Aco,gh,Xle,Lco,yco,lI,xco,$co,kco,ls,zle,Sco,Rco,iI,Pco,Bco,dI,Ico,Nco,qco,is,Wle,jco,Dco,cI,Gco,Oco,fI,Vco,Xco,zco,ds,Qle,Wco,Qco,mI,Hco,Uco,gI,Jco,Yco,Kco,hh,Hle,Zco,efo,hI,ofo,rfo,tfo,cs,Ule,afo,nfo,pI,sfo,lfo,_I,ifo,dfo,cfo,fs,Jle,ffo,mfo,uI,gfo,hfo,bI,pfo,_fo,ufo,ms,Yle,bfo,vfo,vI,Ffo,Tfo,FI,Mfo,Efo,Cfo,gs,Kle,wfo,Afo,TI,Lfo,yfo,MI,xfo,$fo,kfo,hs,Zle,Sfo,Rfo,EI,Pfo,Bfo,CI,Ifo,Nfo,qfo,ps,eie,jfo,Dfo,wI,Gfo,Ofo,AI,Vfo,Xfo,zfo,_s,oie,Wfo,Qfo,LI,Hfo,Ufo,yI,Jfo,Yfo,Kfo,us,rie,Zfo,emo,xI,omo,rmo,$I,tmo,amo,nmo,ph,tie,smo,lmo,kI,imo,dmo,cmo,bs,aie,fmo,mmo,SI,gmo,hmo,RI,pmo,_mo,umo,_h,nie,bmo,vmo,PI,Fmo,Tmo,Mmo,uh,sie,Emo,Cmo,BI,wmo,Amo,Lmo,vs,lie,ymo,xmo,II,$mo,kmo,NI,Smo,Rmo,Pmo,Fs,iie,Bmo,Imo,qI,Nmo,qmo,jI,jmo,Dmo,Gmo,Ts,die,Omo,Vmo,DI,Xmo,zmo,GI,Wmo,Qmo,Hmo,bh,cie,Umo,Jmo,OI,Ymo,Kmo,Zmo,Ms,fie,ego,ogo,VI,rgo,tgo,XI,ago,ngo,sgo,Es,mie,lgo,igo,zI,dgo,cgo,WI,fgo,mgo,ggo,Cs,gie,hgo,pgo,QI,_go,ugo,HI,bgo,vgo,Fgo,ws,hie,Tgo,Mgo,UI,Ego,Cgo,JI,wgo,Ago,Lgo,As,pie,ygo,xgo,YI,$go,kgo,KI,Sgo,Rgo,Pgo,Ls,_ie,Bgo,Igo,ZI,Ngo,qgo,eN,jgo,Dgo,Ggo,ys,uie,Ogo,Vgo,oN,Xgo,zgo,rN,Wgo,Qgo,Hgo,vh,bie,Ugo,Jgo,tN,Ygo,Kgo,Zgo,xs,vie,eho,oho,aN,rho,tho,nN,aho,nho,sho,$s,Fie,lho,iho,sN,dho,cho,lN,fho,mho,gho,Fh,Tie,hho,pho,iN,_ho,uho,bho,Th,Mie,vho,Fho,dN,Tho,Mho,Eho,Mh,Eie,Cho,who,cN,Aho,Lho,yho,Eh,Cie,xho,$ho,fN,kho,Sho,Rho,ks,wie,Pho,Bho,mN,Iho,Nho,gN,qho,jho,Dho,Ch,Aie,Gho,Oho,hN,Vho,Xho,zho,Ss,Lie,Who,Qho,pN,Hho,Uho,_N,Jho,Yho,Kho,Rs,yie,Zho,epo,uN,opo,rpo,bN,tpo,apo,npo,Ps,xie,spo,lpo,vN,ipo,dpo,FN,cpo,fpo,mpo,Bs,$ie,gpo,hpo,TN,ppo,_po,MN,upo,bpo,vpo,Is,kie,Fpo,Tpo,EN,Mpo,Epo,CN,Cpo,wpo,Apo,Ns,Sie,Lpo,ypo,wN,xpo,$po,AN,kpo,Spo,Rpo,wh,Rie,Ppo,Bpo,LN,Ipo,Npo,qpo,Ah,Pie,jpo,Dpo,yN,Gpo,Opo,Vpo,qs,Bie,Xpo,zpo,xN,Wpo,Qpo,$N,Hpo,Upo,Jpo,js,Iie,Ypo,Kpo,kN,Zpo,e_o,SN,o_o,r_o,t_o,Ds,Nie,a_o,n_o,RN,s_o,l_o,PN,i_o,d_o,c_o,Lh,qie,f_o,m_o,BN,g_o,h_o,p_o,yh,jie,__o,u_o,IN,b_o,v_o,F_o,xh,Die,T_o,M_o,NN,E_o,C_o,w_o,Gs,Gie,A_o,L_o,qN,y_o,x_o,jN,$_o,k_o,S_o,Os,Oie,R_o,P_o,DN,B_o,I_o,GN,N_o,q_o,j_o,$h,Vie,D_o,G_o,ON,O_o,V_o,X_o,kh,Xie,z_o,W_o,VN,Q_o,H_o,U_o,Sh,zie,J_o,Y_o,XN,K_o,Z_o,euo,Vs,Wie,ouo,ruo,zN,tuo,auo,WN,nuo,suo,luo,Rh,Qie,iuo,duo,QN,cuo,fuo,muo,Ph,Hie,guo,huo,HN,puo,_uo,uuo,Xs,Uie,buo,vuo,UN,Fuo,Tuo,JN,Muo,Euo,Cuo,zs,Jie,wuo,Auo,YN,Luo,yuo,KN,xuo,$uo,kuo,Ws,Yie,Suo,Ruo,ZN,Puo,Buo,eq,Iuo,Nuo,quo,Qs,Kie,juo,Duo,oq,Guo,Ouo,rq,Vuo,Xuo,zuo,Bh,Wuo,Ih,M6,Quo,Zie,Huo,LXe,ji,Nh,ede,E6,Uuo,ode,Juo,yXe,yo,C6,Yuo,w6,Kuo,tq,Zuo,e1o,o1o,A6,r1o,rde,t1o,a1o,n1o,Ue,L6,s1o,tde,l1o,i1o,Ba,d1o,ade,c1o,f1o,nde,m1o,g1o,sde,h1o,p1o,_1o,J,qh,lde,u1o,b1o,aq,v1o,F1o,T1o,jh,ide,M1o,E1o,nq,C1o,w1o,A1o,Dh,dde,L1o,y1o,sq,x1o,$1o,k1o,Gh,cde,S1o,R1o,lq,P1o,B1o,I1o,Oh,fde,N1o,q1o,iq,j1o,D1o,G1o,Vh,mde,O1o,V1o,dq,X1o,z1o,W1o,Xh,gde,Q1o,H1o,cq,U1o,J1o,Y1o,zh,hde,K1o,Z1o,fq,e2o,o2o,r2o,Wh,pde,t2o,a2o,mq,n2o,s2o,l2o,Qh,_de,i2o,d2o,gq,c2o,f2o,m2o,Hh,ude,g2o,h2o,hq,p2o,_2o,u2o,Uh,bde,b2o,v2o,pq,F2o,T2o,M2o,Jh,vde,E2o,C2o,_q,w2o,A2o,L2o,Yh,Fde,y2o,x2o,uq,$2o,k2o,S2o,Kh,Tde,R2o,P2o,bq,B2o,I2o,N2o,Zh,Mde,q2o,j2o,vq,D2o,G2o,O2o,ep,Ede,V2o,X2o,Fq,z2o,W2o,Q2o,op,Cde,H2o,U2o,Tq,J2o,Y2o,K2o,rp,wde,Z2o,ebo,Mq,obo,rbo,tbo,tp,Ade,abo,nbo,Eq,sbo,lbo,ibo,ap,Lde,dbo,cbo,Cq,fbo,mbo,gbo,np,yde,hbo,pbo,wq,_bo,ubo,bbo,sp,xde,vbo,Fbo,Aq,Tbo,Mbo,Ebo,lp,$de,Cbo,wbo,Lq,Abo,Lbo,ybo,ip,kde,xbo,$bo,yq,kbo,Sbo,Rbo,dp,Sde,Pbo,Bbo,xq,Ibo,Nbo,qbo,cp,Rde,jbo,Dbo,$q,Gbo,Obo,Vbo,fp,Pde,Xbo,zbo,kq,Wbo,Qbo,Hbo,mp,Bde,Ubo,Jbo,Sq,Ybo,Kbo,Zbo,gp,Ide,evo,ovo,Rq,rvo,tvo,avo,hp,Nde,nvo,svo,Pq,lvo,ivo,dvo,pp,qde,cvo,fvo,Bq,mvo,gvo,hvo,_p,jde,pvo,_vo,Iq,uvo,bvo,vvo,up,Dde,Fvo,Tvo,Nq,Mvo,Evo,Cvo,bp,Gde,wvo,Avo,qq,Lvo,yvo,xvo,vp,$vo,Fp,kvo,Tp,y6,Svo,Ode,Rvo,xXe,Di,Mp,Vde,x6,Pvo,Xde,Bvo,$Xe,xo,$6,Ivo,k6,Nvo,jq,qvo,jvo,Dvo,S6,Gvo,zde,Ovo,Vvo,Xvo,Je,R6,zvo,Wde,Wvo,Qvo,Gi,Hvo,Qde,Uvo,Jvo,Hde,Yvo,Kvo,Zvo,fe,Ep,Ude,e3o,o3o,Dq,r3o,t3o,a3o,Cp,Jde,n3o,s3o,Yde,l3o,i3o,d3o,wp,Kde,c3o,f3o,Gq,m3o,g3o,h3o,Ap,Zde,p3o,_3o,Oq,u3o,b3o,v3o,Lp,ece,F3o,T3o,Vq,M3o,E3o,C3o,yp,oce,w3o,A3o,Xq,L3o,y3o,x3o,xp,rce,$3o,k3o,zq,S3o,R3o,P3o,$p,tce,B3o,I3o,Wq,N3o,q3o,j3o,kp,ace,D3o,G3o,Qq,O3o,V3o,X3o,Sp,nce,z3o,W3o,Hq,Q3o,H3o,U3o,Rp,sce,J3o,Y3o,Uq,K3o,Z3o,eFo,Pp,lce,oFo,rFo,Jq,tFo,aFo,nFo,Bp,ice,sFo,lFo,Yq,iFo,dFo,cFo,Ip,dce,fFo,mFo,Kq,gFo,hFo,pFo,Np,cce,_Fo,uFo,Zq,bFo,vFo,FFo,qp,fce,TFo,MFo,ej,EFo,CFo,wFo,jp,mce,AFo,LFo,oj,yFo,xFo,$Fo,Dp,gce,kFo,SFo,rj,RFo,PFo,BFo,Gp,hce,IFo,NFo,tj,qFo,jFo,DFo,Op,GFo,Vp,OFo,Xp,P6,VFo,pce,XFo,kXe,Oi,zp,_ce,B6,zFo,uce,WFo,SXe,$o,I6,QFo,Vi,HFo,aj,UFo,JFo,nj,YFo,KFo,ZFo,N6,eTo,bce,oTo,rTo,tTo,it,q6,aTo,vce,nTo,sTo,Xi,lTo,Fce,iTo,dTo,sj,cTo,fTo,mTo,Wp,gTo,Ye,j6,hTo,Tce,pTo,_To,Ia,uTo,Mce,bTo,vTo,Ece,FTo,TTo,Cce,MTo,ETo,CTo,y,Qp,wce,wTo,ATo,lj,LTo,yTo,xTo,Hp,Ace,$To,kTo,ij,STo,RTo,PTo,Up,Lce,BTo,ITo,dj,NTo,qTo,jTo,Jp,yce,DTo,GTo,cj,OTo,VTo,XTo,Yp,xce,zTo,WTo,fj,QTo,HTo,UTo,Kp,$ce,JTo,YTo,mj,KTo,ZTo,e7o,Zp,kce,o7o,r7o,gj,t7o,a7o,n7o,e_,Sce,s7o,l7o,hj,i7o,d7o,c7o,o_,Rce,f7o,m7o,pj,g7o,h7o,p7o,r_,Pce,_7o,u7o,_j,b7o,v7o,F7o,t_,Bce,T7o,M7o,uj,E7o,C7o,w7o,a_,Ice,A7o,L7o,bj,y7o,x7o,$7o,n_,Nce,k7o,S7o,vj,R7o,P7o,B7o,s_,qce,I7o,N7o,Fj,q7o,j7o,D7o,l_,jce,G7o,O7o,Tj,V7o,X7o,z7o,i_,Dce,W7o,Q7o,Mj,H7o,U7o,J7o,d_,Gce,Y7o,K7o,Ej,Z7o,e8o,o8o,c_,Oce,r8o,t8o,Cj,a8o,n8o,s8o,f_,Vce,l8o,i8o,wj,d8o,c8o,f8o,m_,Xce,m8o,g8o,Aj,h8o,p8o,_8o,g_,zce,u8o,b8o,Lj,v8o,F8o,T8o,h_,Wce,M8o,E8o,yj,C8o,w8o,A8o,p_,Qce,L8o,y8o,xj,x8o,$8o,k8o,__,Hce,S8o,R8o,$j,P8o,B8o,I8o,u_,Uce,N8o,q8o,kj,j8o,D8o,G8o,b_,Jce,O8o,V8o,Sj,X8o,z8o,W8o,v_,Yce,Q8o,H8o,Rj,U8o,J8o,Y8o,F_,Kce,K8o,Z8o,Pj,e9o,o9o,r9o,T_,Zce,t9o,a9o,Bj,n9o,s9o,l9o,M_,efe,i9o,d9o,Ij,c9o,f9o,m9o,E_,ofe,g9o,h9o,Nj,p9o,_9o,u9o,C_,rfe,b9o,v9o,qj,F9o,T9o,M9o,w_,tfe,E9o,C9o,jj,w9o,A9o,L9o,A_,afe,y9o,x9o,Dj,$9o,k9o,S9o,Hs,nfe,R9o,P9o,Gj,B9o,I9o,Oj,N9o,q9o,j9o,L_,sfe,D9o,G9o,Vj,O9o,V9o,X9o,y_,lfe,z9o,W9o,Xj,Q9o,H9o,U9o,x_,ife,J9o,Y9o,zj,K9o,Z9o,eMo,$_,dfe,oMo,rMo,Wj,tMo,aMo,nMo,k_,cfe,sMo,lMo,Qj,iMo,dMo,cMo,S_,ffe,fMo,mMo,Hj,gMo,hMo,pMo,R_,mfe,_Mo,uMo,Uj,bMo,vMo,FMo,P_,gfe,TMo,MMo,Jj,EMo,CMo,wMo,B_,hfe,AMo,LMo,Yj,yMo,xMo,$Mo,I_,pfe,kMo,SMo,Kj,RMo,PMo,BMo,N_,_fe,IMo,NMo,Zj,qMo,jMo,DMo,q_,ufe,GMo,OMo,eD,VMo,XMo,zMo,j_,bfe,WMo,QMo,oD,HMo,UMo,JMo,D_,vfe,YMo,KMo,rD,ZMo,e4o,o4o,G_,Ffe,r4o,t4o,tD,a4o,n4o,s4o,O_,Tfe,l4o,i4o,aD,d4o,c4o,f4o,V_,Mfe,m4o,g4o,nD,h4o,p4o,_4o,X_,Efe,u4o,b4o,sD,v4o,F4o,T4o,z_,Cfe,M4o,E4o,lD,C4o,w4o,A4o,W_,wfe,L4o,y4o,iD,x4o,$4o,k4o,Q_,Afe,S4o,R4o,dD,P4o,B4o,I4o,H_,Lfe,N4o,q4o,cD,j4o,D4o,G4o,U_,yfe,O4o,V4o,fD,X4o,z4o,W4o,J_,xfe,Q4o,H4o,mD,U4o,J4o,Y4o,Y_,$fe,K4o,Z4o,gD,eEo,oEo,rEo,K_,kfe,tEo,aEo,hD,nEo,sEo,lEo,Z_,Sfe,iEo,dEo,pD,cEo,fEo,mEo,eu,Rfe,gEo,hEo,_D,pEo,_Eo,uEo,ou,Pfe,bEo,vEo,uD,FEo,TEo,MEo,ru,Bfe,EEo,CEo,bD,wEo,AEo,LEo,tu,Ife,yEo,xEo,vD,$Eo,kEo,SEo,au,Nfe,REo,PEo,FD,BEo,IEo,NEo,nu,qfe,qEo,jEo,TD,DEo,GEo,OEo,su,jfe,VEo,XEo,MD,zEo,WEo,QEo,lu,Dfe,HEo,UEo,ED,JEo,YEo,KEo,iu,Gfe,ZEo,eCo,CD,oCo,rCo,tCo,du,Ofe,aCo,nCo,wD,sCo,lCo,iCo,cu,Vfe,dCo,cCo,AD,fCo,mCo,gCo,fu,Xfe,hCo,pCo,LD,_Co,uCo,bCo,mu,zfe,vCo,FCo,yD,TCo,MCo,ECo,gu,Wfe,CCo,wCo,xD,ACo,LCo,yCo,hu,Qfe,xCo,$Co,$D,kCo,SCo,RCo,pu,Hfe,PCo,BCo,kD,ICo,NCo,qCo,_u,Ufe,jCo,DCo,SD,GCo,OCo,VCo,uu,Jfe,XCo,zCo,RD,WCo,QCo,HCo,bu,Yfe,UCo,JCo,PD,YCo,KCo,ZCo,vu,Kfe,e5o,o5o,BD,r5o,t5o,a5o,Fu,Zfe,n5o,s5o,ID,l5o,i5o,d5o,Tu,eme,c5o,f5o,ND,m5o,g5o,h5o,Mu,ome,p5o,_5o,qD,u5o,b5o,v5o,Eu,rme,F5o,T5o,jD,M5o,E5o,C5o,Cu,tme,w5o,A5o,DD,L5o,y5o,x5o,wu,ame,$5o,k5o,GD,S5o,R5o,P5o,Au,nme,B5o,I5o,OD,N5o,q5o,j5o,Lu,sme,D5o,G5o,VD,O5o,V5o,X5o,yu,lme,z5o,W5o,XD,Q5o,H5o,U5o,xu,ime,J5o,Y5o,zD,K5o,Z5o,e0o,$u,dme,o0o,r0o,WD,t0o,a0o,n0o,ku,cme,s0o,l0o,QD,i0o,d0o,c0o,Su,fme,f0o,m0o,HD,g0o,h0o,p0o,Ru,mme,_0o,u0o,UD,b0o,v0o,F0o,Pu,gme,T0o,M0o,JD,E0o,C0o,w0o,Bu,hme,A0o,L0o,YD,y0o,x0o,$0o,Iu,pme,k0o,S0o,KD,R0o,P0o,B0o,Nu,_me,I0o,N0o,ZD,q0o,j0o,D0o,qu,ume,G0o,O0o,eG,V0o,X0o,z0o,ju,bme,W0o,Q0o,oG,H0o,U0o,J0o,Du,vme,Y0o,K0o,rG,Z0o,ewo,owo,Gu,Fme,rwo,two,tG,awo,nwo,swo,Ou,Tme,lwo,iwo,aG,dwo,cwo,fwo,Vu,Mme,mwo,gwo,nG,hwo,pwo,_wo,Xu,Eme,uwo,bwo,sG,vwo,Fwo,Two,zu,Cme,Mwo,Ewo,lG,Cwo,wwo,Awo,Wu,wme,Lwo,ywo,iG,xwo,$wo,kwo,Qu,Ame,Swo,Rwo,dG,Pwo,Bwo,Iwo,Hu,Lme,Nwo,qwo,cG,jwo,Dwo,Gwo,Uu,yme,Owo,Vwo,fG,Xwo,zwo,Wwo,Ju,Qwo,xme,Hwo,Uwo,$me,Jwo,Ywo,Yu,RXe,zi,Ku,kme,D6,Kwo,Sme,Zwo,PXe,ko,G6,eAo,Wi,oAo,mG,rAo,tAo,gG,aAo,nAo,sAo,O6,lAo,Rme,iAo,dAo,cAo,dt,V6,fAo,Pme,mAo,gAo,Qi,hAo,Bme,pAo,_Ao,hG,uAo,bAo,vAo,Zu,FAo,Ke,X6,TAo,Ime,MAo,EAo,Na,CAo,Nme,wAo,AAo,qme,LAo,yAo,jme,xAo,$Ao,kAo,G,e1,Dme,SAo,RAo,pG,PAo,BAo,IAo,o1,Gme,NAo,qAo,_G,jAo,DAo,GAo,r1,Ome,OAo,VAo,uG,XAo,zAo,WAo,t1,Vme,QAo,HAo,bG,UAo,JAo,YAo,a1,Xme,KAo,ZAo,vG,e6o,o6o,r6o,n1,zme,t6o,a6o,FG,n6o,s6o,l6o,s1,Wme,i6o,d6o,TG,c6o,f6o,m6o,l1,Qme,g6o,h6o,MG,p6o,_6o,u6o,i1,Hme,b6o,v6o,EG,F6o,T6o,M6o,d1,Ume,E6o,C6o,CG,w6o,A6o,L6o,c1,Jme,y6o,x6o,wG,$6o,k6o,S6o,f1,Yme,R6o,P6o,AG,B6o,I6o,N6o,m1,Kme,q6o,j6o,LG,D6o,G6o,O6o,g1,Zme,V6o,X6o,yG,z6o,W6o,Q6o,h1,ege,H6o,U6o,xG,J6o,Y6o,K6o,p1,oge,Z6o,eLo,$G,oLo,rLo,tLo,_1,rge,aLo,nLo,kG,sLo,lLo,iLo,u1,tge,dLo,cLo,SG,fLo,mLo,gLo,b1,age,hLo,pLo,RG,_Lo,uLo,bLo,v1,nge,vLo,FLo,PG,TLo,MLo,ELo,F1,sge,CLo,wLo,BG,ALo,LLo,yLo,T1,lge,xLo,$Lo,IG,kLo,SLo,RLo,M1,ige,PLo,BLo,NG,ILo,NLo,qLo,E1,dge,jLo,DLo,qG,GLo,OLo,VLo,C1,cge,XLo,zLo,jG,WLo,QLo,HLo,w1,fge,ULo,JLo,DG,YLo,KLo,ZLo,A1,mge,eyo,oyo,GG,ryo,tyo,ayo,L1,gge,nyo,syo,OG,lyo,iyo,dyo,y1,hge,cyo,fyo,VG,myo,gyo,hyo,x1,pge,pyo,_yo,XG,uyo,byo,vyo,$1,_ge,Fyo,Tyo,zG,Myo,Eyo,Cyo,k1,uge,wyo,Ayo,WG,Lyo,yyo,xyo,S1,bge,$yo,kyo,QG,Syo,Ryo,Pyo,R1,vge,Byo,Iyo,HG,Nyo,qyo,jyo,P1,Fge,Dyo,Gyo,UG,Oyo,Vyo,Xyo,B1,Tge,zyo,Wyo,JG,Qyo,Hyo,Uyo,I1,Mge,Jyo,Yyo,YG,Kyo,Zyo,exo,N1,Ege,oxo,rxo,KG,txo,axo,nxo,q1,Cge,sxo,lxo,ZG,ixo,dxo,cxo,j1,wge,fxo,mxo,eO,gxo,hxo,pxo,D1,Age,_xo,uxo,oO,bxo,vxo,Fxo,G1,Lge,Txo,Mxo,rO,Exo,Cxo,wxo,O1,yge,Axo,Lxo,tO,yxo,xxo,$xo,V1,xge,kxo,Sxo,aO,Rxo,Pxo,Bxo,X1,$ge,Ixo,Nxo,nO,qxo,jxo,Dxo,z1,Gxo,kge,Oxo,Vxo,Sge,Xxo,zxo,W1,BXe,Hi,Q1,Rge,z6,Wxo,Pge,Qxo,IXe,So,W6,Hxo,Ui,Uxo,sO,Jxo,Yxo,lO,Kxo,Zxo,e$o,Q6,o$o,Bge,r$o,t$o,a$o,ct,H6,n$o,Ige,s$o,l$o,Ji,i$o,Nge,d$o,c$o,iO,f$o,m$o,g$o,H1,h$o,Ze,U6,p$o,qge,_$o,u$o,qa,b$o,jge,v$o,F$o,Dge,T$o,M$o,Gge,E$o,C$o,w$o,z,U1,Oge,A$o,L$o,dO,y$o,x$o,$$o,J1,Vge,k$o,S$o,cO,R$o,P$o,B$o,Y1,Xge,I$o,N$o,fO,q$o,j$o,D$o,K1,zge,G$o,O$o,mO,V$o,X$o,z$o,Z1,Wge,W$o,Q$o,gO,H$o,U$o,J$o,e2,Qge,Y$o,K$o,hO,Z$o,eko,oko,o2,Hge,rko,tko,pO,ako,nko,sko,r2,Uge,lko,iko,_O,dko,cko,fko,t2,Jge,mko,gko,uO,hko,pko,_ko,a2,Yge,uko,bko,bO,vko,Fko,Tko,n2,Kge,Mko,Eko,vO,Cko,wko,Ako,s2,Zge,Lko,yko,FO,xko,$ko,kko,l2,ehe,Sko,Rko,TO,Pko,Bko,Iko,i2,ohe,Nko,qko,MO,jko,Dko,Gko,d2,rhe,Oko,Vko,EO,Xko,zko,Wko,c2,the,Qko,Hko,CO,Uko,Jko,Yko,f2,ahe,Kko,Zko,wO,eSo,oSo,rSo,m2,nhe,tSo,aSo,AO,nSo,sSo,lSo,g2,she,iSo,dSo,LO,cSo,fSo,mSo,h2,lhe,gSo,hSo,yO,pSo,_So,uSo,p2,ihe,bSo,vSo,xO,FSo,TSo,MSo,_2,dhe,ESo,CSo,$O,wSo,ASo,LSo,u2,che,ySo,xSo,kO,$So,kSo,SSo,b2,fhe,RSo,PSo,SO,BSo,ISo,NSo,v2,mhe,qSo,jSo,RO,DSo,GSo,OSo,F2,ghe,VSo,XSo,PO,zSo,WSo,QSo,T2,hhe,HSo,USo,BO,JSo,YSo,KSo,M2,phe,ZSo,eRo,IO,oRo,rRo,tRo,E2,_he,aRo,nRo,NO,sRo,lRo,iRo,C2,uhe,dRo,cRo,qO,fRo,mRo,gRo,w2,bhe,hRo,pRo,jO,_Ro,uRo,bRo,A2,vhe,vRo,FRo,DO,TRo,MRo,ERo,L2,Fhe,CRo,wRo,GO,ARo,LRo,yRo,y2,The,xRo,$Ro,OO,kRo,SRo,RRo,x2,Mhe,PRo,BRo,VO,IRo,NRo,qRo,$2,Ehe,jRo,DRo,XO,GRo,ORo,VRo,k2,Che,XRo,zRo,zO,WRo,QRo,HRo,S2,whe,URo,JRo,WO,YRo,KRo,ZRo,R2,Ahe,ePo,oPo,QO,rPo,tPo,aPo,P2,Lhe,nPo,sPo,HO,lPo,iPo,dPo,B2,cPo,yhe,fPo,mPo,xhe,gPo,hPo,I2,NXe,Yi,N2,$he,J6,pPo,khe,_Po,qXe,Ro,Y6,uPo,Ki,bPo,UO,vPo,FPo,JO,TPo,MPo,EPo,K6,CPo,She,wPo,APo,LPo,ft,Z6,yPo,Rhe,xPo,$Po,Zi,kPo,Phe,SPo,RPo,YO,PPo,BPo,IPo,q2,NPo,eo,eL,qPo,Bhe,jPo,DPo,ja,GPo,Ihe,OPo,VPo,Nhe,XPo,zPo,qhe,WPo,QPo,HPo,Q,j2,jhe,UPo,JPo,KO,YPo,KPo,ZPo,D2,Dhe,eBo,oBo,ZO,rBo,tBo,aBo,G2,Ghe,nBo,sBo,eV,lBo,iBo,dBo,O2,Ohe,cBo,fBo,oV,mBo,gBo,hBo,V2,Vhe,pBo,_Bo,rV,uBo,bBo,vBo,X2,Xhe,FBo,TBo,tV,MBo,EBo,CBo,z2,zhe,wBo,ABo,aV,LBo,yBo,xBo,W2,Whe,$Bo,kBo,nV,SBo,RBo,PBo,Q2,Qhe,BBo,IBo,sV,NBo,qBo,jBo,H2,Hhe,DBo,GBo,lV,OBo,VBo,XBo,U2,Uhe,zBo,WBo,iV,QBo,HBo,UBo,J2,Jhe,JBo,YBo,dV,KBo,ZBo,eIo,Y2,Yhe,oIo,rIo,cV,tIo,aIo,nIo,K2,Khe,sIo,lIo,fV,iIo,dIo,cIo,Z2,Zhe,fIo,mIo,mV,gIo,hIo,pIo,eb,epe,_Io,uIo,gV,bIo,vIo,FIo,ob,ope,TIo,MIo,hV,EIo,CIo,wIo,rb,rpe,AIo,LIo,pV,yIo,xIo,$Io,tb,tpe,kIo,SIo,_V,RIo,PIo,BIo,ab,ape,IIo,NIo,uV,qIo,jIo,DIo,nb,npe,GIo,OIo,bV,VIo,XIo,zIo,sb,spe,WIo,QIo,vV,HIo,UIo,JIo,lb,lpe,YIo,KIo,FV,ZIo,eNo,oNo,ib,ipe,rNo,tNo,TV,aNo,nNo,sNo,db,dpe,lNo,iNo,MV,dNo,cNo,fNo,cb,cpe,mNo,gNo,EV,hNo,pNo,_No,fb,fpe,uNo,bNo,CV,vNo,FNo,TNo,mb,mpe,MNo,ENo,wV,CNo,wNo,ANo,gb,gpe,LNo,yNo,AV,xNo,$No,kNo,hb,hpe,SNo,RNo,LV,PNo,BNo,INo,pb,ppe,NNo,qNo,yV,jNo,DNo,GNo,_b,_pe,ONo,VNo,xV,XNo,zNo,WNo,ub,upe,QNo,HNo,$V,UNo,JNo,YNo,bb,bpe,KNo,ZNo,vpe,eqo,oqo,rqo,vb,Fpe,tqo,aqo,kV,nqo,sqo,lqo,Fb,Tpe,iqo,dqo,SV,cqo,fqo,mqo,Tb,Mpe,gqo,hqo,RV,pqo,_qo,uqo,Mb,Epe,bqo,vqo,PV,Fqo,Tqo,Mqo,Eb,Eqo,Cpe,Cqo,wqo,wpe,Aqo,Lqo,Cb,jXe,ed,wb,Ape,oL,yqo,Lpe,xqo,DXe,Po,rL,$qo,od,kqo,BV,Sqo,Rqo,IV,Pqo,Bqo,Iqo,tL,Nqo,ype,qqo,jqo,Dqo,mt,aL,Gqo,xpe,Oqo,Vqo,rd,Xqo,$pe,zqo,Wqo,NV,Qqo,Hqo,Uqo,Ab,Jqo,oo,nL,Yqo,kpe,Kqo,Zqo,Da,ejo,Spe,ojo,rjo,Rpe,tjo,ajo,Ppe,njo,sjo,ljo,pe,Lb,Bpe,ijo,djo,qV,cjo,fjo,mjo,yb,Ipe,gjo,hjo,jV,pjo,_jo,ujo,xb,Npe,bjo,vjo,DV,Fjo,Tjo,Mjo,$b,qpe,Ejo,Cjo,GV,wjo,Ajo,Ljo,kb,jpe,yjo,xjo,OV,$jo,kjo,Sjo,Sb,Dpe,Rjo,Pjo,VV,Bjo,Ijo,Njo,Rb,Gpe,qjo,jjo,XV,Djo,Gjo,Ojo,Pb,Ope,Vjo,Xjo,zV,zjo,Wjo,Qjo,Bb,Vpe,Hjo,Ujo,WV,Jjo,Yjo,Kjo,Ib,Xpe,Zjo,eDo,QV,oDo,rDo,tDo,Nb,zpe,aDo,nDo,HV,sDo,lDo,iDo,qb,Wpe,dDo,cDo,UV,fDo,mDo,gDo,jb,Qpe,hDo,pDo,JV,_Do,uDo,bDo,Db,Hpe,vDo,FDo,YV,TDo,MDo,EDo,Gb,Upe,CDo,wDo,KV,ADo,LDo,yDo,Ob,Jpe,xDo,$Do,ZV,kDo,SDo,RDo,Vb,Ype,PDo,BDo,eX,IDo,NDo,qDo,Xb,Kpe,jDo,DDo,oX,GDo,ODo,VDo,zb,XDo,Zpe,zDo,WDo,e_e,QDo,HDo,Wb,GXe,td,Qb,o_e,sL,UDo,r_e,JDo,OXe,Bo,lL,YDo,ad,KDo,rX,ZDo,eGo,tX,oGo,rGo,tGo,iL,aGo,t_e,nGo,sGo,lGo,gt,dL,iGo,a_e,dGo,cGo,nd,fGo,n_e,mGo,gGo,aX,hGo,pGo,_Go,Hb,uGo,ro,cL,bGo,s_e,vGo,FGo,Ga,TGo,l_e,MGo,EGo,i_e,CGo,wGo,d_e,AGo,LGo,yGo,N,Ub,c_e,xGo,$Go,nX,kGo,SGo,RGo,Jb,f_e,PGo,BGo,sX,IGo,NGo,qGo,Yb,m_e,jGo,DGo,lX,GGo,OGo,VGo,Kb,g_e,XGo,zGo,iX,WGo,QGo,HGo,Zb,h_e,UGo,JGo,dX,YGo,KGo,ZGo,ev,p_e,eOo,oOo,cX,rOo,tOo,aOo,ov,__e,nOo,sOo,fX,lOo,iOo,dOo,rv,u_e,cOo,fOo,mX,mOo,gOo,hOo,tv,b_e,pOo,_Oo,gX,uOo,bOo,vOo,av,v_e,FOo,TOo,hX,MOo,EOo,COo,nv,F_e,wOo,AOo,pX,LOo,yOo,xOo,sv,T_e,$Oo,kOo,_X,SOo,ROo,POo,lv,M_e,BOo,IOo,uX,NOo,qOo,jOo,iv,E_e,DOo,GOo,bX,OOo,VOo,XOo,dv,C_e,zOo,WOo,vX,QOo,HOo,UOo,cv,w_e,JOo,YOo,FX,KOo,ZOo,eVo,fv,A_e,oVo,rVo,TX,tVo,aVo,nVo,mv,L_e,sVo,lVo,MX,iVo,dVo,cVo,gv,y_e,fVo,mVo,EX,gVo,hVo,pVo,hv,x_e,_Vo,uVo,CX,bVo,vVo,FVo,pv,$_e,TVo,MVo,wX,EVo,CVo,wVo,_v,k_e,AVo,LVo,AX,yVo,xVo,$Vo,uv,S_e,kVo,SVo,LX,RVo,PVo,BVo,bv,R_e,IVo,NVo,yX,qVo,jVo,DVo,vv,P_e,GVo,OVo,xX,VVo,XVo,zVo,Fv,B_e,WVo,QVo,$X,HVo,UVo,JVo,Tv,I_e,YVo,KVo,kX,ZVo,eXo,oXo,Mv,N_e,rXo,tXo,SX,aXo,nXo,sXo,Ev,q_e,lXo,iXo,RX,dXo,cXo,fXo,Cv,j_e,mXo,gXo,PX,hXo,pXo,_Xo,wv,D_e,uXo,bXo,BX,vXo,FXo,TXo,Av,G_e,MXo,EXo,IX,CXo,wXo,AXo,Lv,O_e,LXo,yXo,NX,xXo,$Xo,kXo,yv,V_e,SXo,RXo,qX,PXo,BXo,IXo,xv,X_e,NXo,qXo,jX,jXo,DXo,GXo,$v,z_e,OXo,VXo,DX,XXo,zXo,WXo,kv,W_e,QXo,HXo,GX,UXo,JXo,YXo,Sv,Q_e,KXo,ZXo,OX,ezo,ozo,rzo,Rv,H_e,tzo,azo,VX,nzo,szo,lzo,Pv,U_e,izo,dzo,XX,czo,fzo,mzo,Bv,J_e,gzo,hzo,zX,pzo,_zo,uzo,Iv,Y_e,bzo,vzo,WX,Fzo,Tzo,Mzo,Nv,K_e,Ezo,Czo,QX,wzo,Azo,Lzo,qv,Z_e,yzo,xzo,HX,$zo,kzo,Szo,jv,eue,Rzo,Pzo,UX,Bzo,Izo,Nzo,Dv,oue,qzo,jzo,JX,Dzo,Gzo,Ozo,Gv,rue,Vzo,Xzo,YX,zzo,Wzo,Qzo,Ov,tue,Hzo,Uzo,KX,Jzo,Yzo,Kzo,Vv,aue,Zzo,eWo,ZX,oWo,rWo,tWo,Xv,nue,aWo,nWo,ez,sWo,lWo,iWo,zv,dWo,sue,cWo,fWo,lue,mWo,gWo,Wv,VXe,sd,Qv,iue,fL,hWo,due,pWo,XXe,Io,mL,_Wo,ld,uWo,oz,bWo,vWo,rz,FWo,TWo,MWo,gL,EWo,cue,CWo,wWo,AWo,ht,hL,LWo,fue,yWo,xWo,id,$Wo,mue,kWo,SWo,tz,RWo,PWo,BWo,Hv,IWo,to,pL,NWo,gue,qWo,jWo,Oa,DWo,hue,GWo,OWo,pue,VWo,XWo,_ue,zWo,WWo,QWo,Z,Uv,uue,HWo,UWo,az,JWo,YWo,KWo,Jv,bue,ZWo,eQo,nz,oQo,rQo,tQo,Yv,vue,aQo,nQo,sz,sQo,lQo,iQo,Kv,Fue,dQo,cQo,lz,fQo,mQo,gQo,Zv,Tue,hQo,pQo,iz,_Qo,uQo,bQo,e3,Mue,vQo,FQo,dz,TQo,MQo,EQo,o3,Eue,CQo,wQo,cz,AQo,LQo,yQo,r3,Cue,xQo,$Qo,fz,kQo,SQo,RQo,t3,wue,PQo,BQo,mz,IQo,NQo,qQo,a3,Aue,jQo,DQo,gz,GQo,OQo,VQo,n3,Lue,XQo,zQo,hz,WQo,QQo,HQo,s3,yue,UQo,JQo,pz,YQo,KQo,ZQo,l3,xue,eHo,oHo,_z,rHo,tHo,aHo,i3,$ue,nHo,sHo,uz,lHo,iHo,dHo,d3,kue,cHo,fHo,bz,mHo,gHo,hHo,c3,Sue,pHo,_Ho,vz,uHo,bHo,vHo,f3,Rue,FHo,THo,Fz,MHo,EHo,CHo,m3,Pue,wHo,AHo,Tz,LHo,yHo,xHo,g3,Bue,$Ho,kHo,Mz,SHo,RHo,PHo,h3,Iue,BHo,IHo,Ez,NHo,qHo,jHo,p3,Nue,DHo,GHo,Cz,OHo,VHo,XHo,_3,que,zHo,WHo,wz,QHo,HHo,UHo,u3,jue,JHo,YHo,Az,KHo,ZHo,eUo,b3,Due,oUo,rUo,Lz,tUo,aUo,nUo,v3,Gue,sUo,lUo,yz,iUo,dUo,cUo,F3,Oue,fUo,mUo,xz,gUo,hUo,pUo,T3,Vue,_Uo,uUo,$z,bUo,vUo,FUo,M3,Xue,TUo,MUo,kz,EUo,CUo,wUo,E3,zue,AUo,LUo,Sz,yUo,xUo,$Uo,C3,Wue,kUo,SUo,Rz,RUo,PUo,BUo,w3,IUo,Que,NUo,qUo,Hue,jUo,DUo,A3,zXe,dd,L3,Uue,_L,GUo,Jue,OUo,WXe,No,uL,VUo,cd,XUo,Pz,zUo,WUo,Bz,QUo,HUo,UUo,bL,JUo,Yue,YUo,KUo,ZUo,pt,vL,eJo,Kue,oJo,rJo,fd,tJo,Zue,aJo,nJo,Iz,sJo,lJo,iJo,y3,dJo,ao,FL,cJo,e1e,fJo,mJo,Va,gJo,o1e,hJo,pJo,r1e,_Jo,uJo,t1e,bJo,vJo,FJo,qo,x3,a1e,TJo,MJo,Nz,EJo,CJo,wJo,$3,n1e,AJo,LJo,qz,yJo,xJo,$Jo,k3,s1e,kJo,SJo,jz,RJo,PJo,BJo,S3,l1e,IJo,NJo,Dz,qJo,jJo,DJo,R3,i1e,GJo,OJo,Gz,VJo,XJo,zJo,P3,d1e,WJo,QJo,Oz,HJo,UJo,JJo,B3,YJo,c1e,KJo,ZJo,f1e,eYo,oYo,I3,QXe,md,N3,m1e,TL,rYo,g1e,tYo,HXe,jo,ML,aYo,gd,nYo,Vz,sYo,lYo,Xz,iYo,dYo,cYo,EL,fYo,h1e,mYo,gYo,hYo,_t,CL,pYo,p1e,_Yo,uYo,hd,bYo,_1e,vYo,FYo,zz,TYo,MYo,EYo,q3,CYo,no,wL,wYo,u1e,AYo,LYo,Xa,yYo,b1e,xYo,$Yo,v1e,kYo,SYo,F1e,RYo,PYo,BYo,U,j3,T1e,IYo,NYo,Wz,qYo,jYo,DYo,D3,M1e,GYo,OYo,Qz,VYo,XYo,zYo,G3,E1e,WYo,QYo,Hz,HYo,UYo,JYo,O3,C1e,YYo,KYo,Uz,ZYo,eKo,oKo,V3,w1e,rKo,tKo,Jz,aKo,nKo,sKo,X3,A1e,lKo,iKo,Yz,dKo,cKo,fKo,z3,L1e,mKo,gKo,Kz,hKo,pKo,_Ko,W3,y1e,uKo,bKo,Zz,vKo,FKo,TKo,Q3,x1e,MKo,EKo,eW,CKo,wKo,AKo,H3,$1e,LKo,yKo,oW,xKo,$Ko,kKo,U3,k1e,SKo,RKo,rW,PKo,BKo,IKo,J3,S1e,NKo,qKo,tW,jKo,DKo,GKo,Y3,R1e,OKo,VKo,aW,XKo,zKo,WKo,K3,P1e,QKo,HKo,nW,UKo,JKo,YKo,Z3,B1e,KKo,ZKo,sW,eZo,oZo,rZo,eF,I1e,tZo,aZo,lW,nZo,sZo,lZo,oF,N1e,iZo,dZo,iW,cZo,fZo,mZo,rF,q1e,gZo,hZo,dW,pZo,_Zo,uZo,tF,j1e,bZo,vZo,cW,FZo,TZo,MZo,aF,D1e,EZo,CZo,fW,wZo,AZo,LZo,nF,G1e,yZo,xZo,mW,$Zo,kZo,SZo,sF,O1e,RZo,PZo,gW,BZo,IZo,NZo,lF,V1e,qZo,jZo,hW,DZo,GZo,OZo,iF,X1e,VZo,XZo,pW,zZo,WZo,QZo,dF,z1e,HZo,UZo,_W,JZo,YZo,KZo,cF,W1e,ZZo,eer,uW,oer,rer,ter,fF,Q1e,aer,ner,bW,ser,ler,ier,mF,H1e,der,cer,vW,fer,mer,ger,gF,U1e,her,per,FW,_er,uer,ber,hF,J1e,ver,Fer,TW,Ter,Mer,Eer,pF,Y1e,Cer,wer,MW,Aer,Ler,yer,_F,K1e,xer,$er,EW,ker,Ser,Rer,uF,Z1e,Per,Ber,CW,Ier,Ner,qer,bF,e2e,jer,Der,wW,Ger,Oer,Ver,vF,o2e,Xer,zer,AW,Wer,Qer,Her,FF,r2e,Uer,Jer,LW,Yer,Ker,Zer,TF,eor,t2e,oor,ror,a2e,tor,aor,MF,UXe,pd,EF,n2e,AL,nor,s2e,sor,JXe,Do,LL,lor,_d,ior,yW,dor,cor,xW,mor,gor,hor,yL,por,l2e,_or,uor,bor,ut,xL,vor,i2e,For,Tor,ud,Mor,d2e,Eor,Cor,$W,wor,Aor,Lor,CF,yor,so,$L,xor,c2e,$or,kor,za,Sor,f2e,Ror,Por,m2e,Bor,Ior,g2e,Nor,qor,jor,V,wF,h2e,Dor,Gor,kW,Oor,Vor,Xor,AF,p2e,zor,Wor,SW,Qor,Hor,Uor,LF,_2e,Jor,Yor,RW,Kor,Zor,err,yF,u2e,orr,rrr,PW,trr,arr,nrr,xF,b2e,srr,lrr,BW,irr,drr,crr,$F,v2e,frr,mrr,IW,grr,hrr,prr,kF,F2e,_rr,urr,NW,brr,vrr,Frr,SF,T2e,Trr,Mrr,qW,Err,Crr,wrr,RF,M2e,Arr,Lrr,jW,yrr,xrr,$rr,PF,E2e,krr,Srr,DW,Rrr,Prr,Brr,BF,C2e,Irr,Nrr,GW,qrr,jrr,Drr,IF,w2e,Grr,Orr,OW,Vrr,Xrr,zrr,NF,A2e,Wrr,Qrr,VW,Hrr,Urr,Jrr,qF,L2e,Yrr,Krr,XW,Zrr,etr,otr,jF,y2e,rtr,ttr,zW,atr,ntr,str,DF,x2e,ltr,itr,WW,dtr,ctr,ftr,GF,$2e,mtr,gtr,QW,htr,ptr,_tr,OF,k2e,utr,btr,HW,vtr,Ftr,Ttr,VF,S2e,Mtr,Etr,UW,Ctr,wtr,Atr,XF,R2e,Ltr,ytr,JW,xtr,$tr,ktr,zF,P2e,Str,Rtr,YW,Ptr,Btr,Itr,WF,B2e,Ntr,qtr,KW,jtr,Dtr,Gtr,QF,I2e,Otr,Vtr,ZW,Xtr,ztr,Wtr,HF,N2e,Qtr,Htr,eQ,Utr,Jtr,Ytr,UF,q2e,Ktr,Ztr,oQ,ear,oar,rar,JF,j2e,tar,aar,rQ,nar,sar,lar,YF,D2e,iar,dar,tQ,car,far,mar,KF,G2e,gar,har,aQ,par,_ar,uar,ZF,O2e,bar,Far,nQ,Tar,Mar,Ear,eT,V2e,Car,war,sQ,Aar,Lar,yar,oT,X2e,xar,$ar,lQ,kar,Sar,Rar,rT,z2e,Par,Bar,iQ,Iar,Nar,qar,tT,W2e,jar,Dar,dQ,Gar,Oar,Var,aT,Q2e,Xar,zar,cQ,War,Qar,Har,nT,H2e,Uar,Jar,fQ,Yar,Kar,Zar,sT,U2e,enr,onr,mQ,rnr,tnr,anr,lT,J2e,nnr,snr,gQ,lnr,inr,dnr,iT,Y2e,cnr,fnr,hQ,mnr,gnr,hnr,dT,K2e,pnr,_nr,pQ,unr,bnr,vnr,cT,Z2e,Fnr,Tnr,_Q,Mnr,Enr,Cnr,fT,ebe,wnr,Anr,uQ,Lnr,ynr,xnr,mT,obe,$nr,knr,bQ,Snr,Rnr,Pnr,gT,Bnr,rbe,Inr,Nnr,tbe,qnr,jnr,hT,YXe,bd,pT,abe,kL,Dnr,nbe,Gnr,KXe,Go,SL,Onr,vd,Vnr,vQ,Xnr,znr,FQ,Wnr,Qnr,Hnr,RL,Unr,sbe,Jnr,Ynr,Knr,bt,PL,Znr,lbe,esr,osr,Fd,rsr,ibe,tsr,asr,TQ,nsr,ssr,lsr,_T,isr,lo,BL,dsr,dbe,csr,fsr,Wa,msr,cbe,gsr,hsr,fbe,psr,_sr,mbe,usr,bsr,vsr,gbe,uT,hbe,Fsr,Tsr,MQ,Msr,Esr,Csr,bT,wsr,pbe,Asr,Lsr,_be,ysr,xsr,vT,ZXe,Td,FT,ube,IL,$sr,bbe,ksr,eze,Oo,NL,Ssr,Md,Rsr,EQ,Psr,Bsr,CQ,Isr,Nsr,qsr,qL,jsr,vbe,Dsr,Gsr,Osr,vt,jL,Vsr,Fbe,Xsr,zsr,Ed,Wsr,Tbe,Qsr,Hsr,wQ,Usr,Jsr,Ysr,TT,Ksr,io,DL,Zsr,Mbe,elr,olr,Qa,rlr,Ebe,tlr,alr,Cbe,nlr,slr,wbe,llr,ilr,dlr,ve,MT,Abe,clr,flr,AQ,mlr,glr,hlr,ET,Lbe,plr,_lr,LQ,ulr,blr,vlr,CT,ybe,Flr,Tlr,yQ,Mlr,Elr,Clr,wT,xbe,wlr,Alr,xQ,Llr,ylr,xlr,Us,$be,$lr,klr,$Q,Slr,Rlr,kQ,Plr,Blr,Ilr,AT,kbe,Nlr,qlr,SQ,jlr,Dlr,Glr,Js,Sbe,Olr,Vlr,RQ,Xlr,zlr,PQ,Wlr,Qlr,Hlr,LT,Rbe,Ulr,Jlr,BQ,Ylr,Klr,Zlr,Ft,Pbe,eir,oir,IQ,rir,tir,NQ,air,nir,qQ,sir,lir,iir,yT,Bbe,dir,cir,jQ,fir,mir,gir,xT,Ibe,hir,pir,DQ,_ir,uir,bir,$T,Nbe,vir,Fir,GQ,Tir,Mir,Eir,kT,qbe,Cir,wir,OQ,Air,Lir,yir,ST,jbe,xir,$ir,VQ,kir,Sir,Rir,RT,Dbe,Pir,Bir,XQ,Iir,Nir,qir,PT,Gbe,jir,Dir,zQ,Gir,Oir,Vir,BT,Xir,Obe,zir,Wir,Vbe,Qir,Hir,IT,oze,Cd,NT,Xbe,GL,Uir,zbe,Jir,rze,Vo,OL,Yir,wd,Kir,WQ,Zir,edr,QQ,odr,rdr,tdr,VL,adr,Wbe,ndr,sdr,ldr,Tt,XL,idr,Qbe,ddr,cdr,Ad,fdr,Hbe,mdr,gdr,HQ,hdr,pdr,_dr,qT,udr,co,zL,bdr,Ube,vdr,Fdr,Ha,Tdr,Jbe,Mdr,Edr,Ybe,Cdr,wdr,Kbe,Adr,Ldr,ydr,Zbe,jT,eve,xdr,$dr,UQ,kdr,Sdr,Rdr,DT,Pdr,ove,Bdr,Idr,rve,Ndr,qdr,GT,tze,Ld,OT,tve,WL,jdr,ave,Ddr,aze,Xo,QL,Gdr,yd,Odr,JQ,Vdr,Xdr,YQ,zdr,Wdr,Qdr,HL,Hdr,nve,Udr,Jdr,Ydr,Mt,UL,Kdr,sve,Zdr,ecr,xd,ocr,lve,rcr,tcr,KQ,acr,ncr,scr,VT,lcr,fo,JL,icr,ive,dcr,ccr,Ua,fcr,dve,mcr,gcr,cve,hcr,pcr,fve,_cr,ucr,bcr,mve,XT,gve,vcr,Fcr,ZQ,Tcr,Mcr,Ecr,zT,Ccr,hve,wcr,Acr,pve,Lcr,ycr,WT,nze,$d,QT,_ve,YL,xcr,uve,$cr,sze,zo,KL,kcr,kd,Scr,eH,Rcr,Pcr,oH,Bcr,Icr,Ncr,ZL,qcr,bve,jcr,Dcr,Gcr,Et,ey,Ocr,vve,Vcr,Xcr,Sd,zcr,Fve,Wcr,Qcr,rH,Hcr,Ucr,Jcr,HT,Ycr,mo,oy,Kcr,Tve,Zcr,efr,Ja,ofr,Mve,rfr,tfr,Eve,afr,nfr,Cve,sfr,lfr,ifr,Pe,UT,wve,dfr,cfr,tH,ffr,mfr,gfr,JT,Ave,hfr,pfr,aH,_fr,ufr,bfr,YT,Lve,vfr,Ffr,nH,Tfr,Mfr,Efr,KT,yve,Cfr,wfr,sH,Afr,Lfr,yfr,ZT,xve,xfr,$fr,lH,kfr,Sfr,Rfr,e7,$ve,Pfr,Bfr,iH,Ifr,Nfr,qfr,o7,kve,jfr,Dfr,dH,Gfr,Ofr,Vfr,r7,Sve,Xfr,zfr,cH,Wfr,Qfr,Hfr,t7,Rve,Ufr,Jfr,fH,Yfr,Kfr,Zfr,a7,emr,Pve,omr,rmr,Bve,tmr,amr,n7,lze,Rd,s7,Ive,ry,nmr,Nve,smr,ize,Wo,ty,lmr,Pd,imr,mH,dmr,cmr,gH,fmr,mmr,gmr,ay,hmr,qve,pmr,_mr,umr,Ct,ny,bmr,jve,vmr,Fmr,Bd,Tmr,Dve,Mmr,Emr,hH,Cmr,wmr,Amr,l7,Lmr,go,sy,ymr,Gve,xmr,$mr,Ya,kmr,Ove,Smr,Rmr,Vve,Pmr,Bmr,Xve,Imr,Nmr,qmr,rt,i7,zve,jmr,Dmr,pH,Gmr,Omr,Vmr,d7,Wve,Xmr,zmr,_H,Wmr,Qmr,Hmr,c7,Qve,Umr,Jmr,uH,Ymr,Kmr,Zmr,f7,Hve,egr,ogr,bH,rgr,tgr,agr,m7,Uve,ngr,sgr,vH,lgr,igr,dgr,g7,cgr,Jve,fgr,mgr,Yve,ggr,hgr,h7,dze,Id,p7,Kve,ly,pgr,Zve,_gr,cze,Qo,iy,ugr,Nd,bgr,FH,vgr,Fgr,TH,Tgr,Mgr,Egr,dy,Cgr,e3e,wgr,Agr,Lgr,wt,cy,ygr,o3e,xgr,$gr,qd,kgr,r3e,Sgr,Rgr,MH,Pgr,Bgr,Igr,_7,Ngr,ho,fy,qgr,t3e,jgr,Dgr,Ka,Ggr,a3e,Ogr,Vgr,n3e,Xgr,zgr,s3e,Wgr,Qgr,Hgr,Le,u7,l3e,Ugr,Jgr,EH,Ygr,Kgr,Zgr,b7,i3e,ehr,ohr,CH,rhr,thr,ahr,v7,d3e,nhr,shr,wH,lhr,ihr,dhr,F7,c3e,chr,fhr,AH,mhr,ghr,hhr,T7,f3e,phr,_hr,LH,uhr,bhr,vhr,M7,m3e,Fhr,Thr,yH,Mhr,Ehr,Chr,E7,g3e,whr,Ahr,xH,Lhr,yhr,xhr,C7,h3e,$hr,khr,$H,Shr,Rhr,Phr,w7,p3e,Bhr,Ihr,kH,Nhr,qhr,jhr,A7,_3e,Dhr,Ghr,SH,Ohr,Vhr,Xhr,L7,zhr,u3e,Whr,Qhr,b3e,Hhr,Uhr,y7,fze,jd,x7,v3e,my,Jhr,F3e,Yhr,mze,Ho,gy,Khr,Dd,Zhr,RH,epr,opr,PH,rpr,tpr,apr,hy,npr,T3e,spr,lpr,ipr,At,py,dpr,M3e,cpr,fpr,Gd,mpr,E3e,gpr,hpr,BH,ppr,_pr,upr,$7,bpr,po,_y,vpr,C3e,Fpr,Tpr,Za,Mpr,w3e,Epr,Cpr,A3e,wpr,Apr,L3e,Lpr,ypr,xpr,uy,k7,y3e,$pr,kpr,IH,Spr,Rpr,Ppr,S7,x3e,Bpr,Ipr,NH,Npr,qpr,jpr,R7,Dpr,$3e,Gpr,Opr,k3e,Vpr,Xpr,P7,gze,Od,B7,S3e,by,zpr,R3e,Wpr,hze,Uo,vy,Qpr,Vd,Hpr,qH,Upr,Jpr,jH,Ypr,Kpr,Zpr,Fy,e_r,P3e,o_r,r_r,t_r,Lt,Ty,a_r,B3e,n_r,s_r,Xd,l_r,I3e,i_r,d_r,DH,c_r,f_r,m_r,I7,g_r,_o,My,h_r,N3e,p_r,__r,en,u_r,q3e,b_r,v_r,j3e,F_r,T_r,D3e,M_r,E_r,C_r,tt,N7,G3e,w_r,A_r,GH,L_r,y_r,x_r,q7,O3e,$_r,k_r,OH,S_r,R_r,P_r,j7,V3e,B_r,I_r,VH,N_r,q_r,j_r,D7,X3e,D_r,G_r,XH,O_r,V_r,X_r,G7,z3e,z_r,W_r,zH,Q_r,H_r,U_r,O7,J_r,W3e,Y_r,K_r,Q3e,Z_r,eur,V7,pze,zd,X7,H3e,Ey,our,U3e,rur,_ze,Jo,Cy,tur,Wd,aur,WH,nur,sur,QH,lur,iur,dur,wy,cur,J3e,fur,mur,gur,yt,Ay,hur,Y3e,pur,_ur,Qd,uur,K3e,bur,vur,HH,Fur,Tur,Mur,z7,Eur,uo,Ly,Cur,Z3e,wur,Aur,on,Lur,eFe,yur,xur,oFe,$ur,kur,rFe,Sur,Rur,Pur,Hd,W7,tFe,Bur,Iur,UH,Nur,qur,jur,Q7,aFe,Dur,Gur,JH,Our,Vur,Xur,H7,nFe,zur,Wur,YH,Qur,Hur,Uur,U7,Jur,sFe,Yur,Kur,lFe,Zur,e1r,J7,uze,Ud,Y7,iFe,yy,o1r,dFe,r1r,bze,Yo,xy,t1r,Jd,a1r,KH,n1r,s1r,ZH,l1r,i1r,d1r,$y,c1r,cFe,f1r,m1r,g1r,xt,ky,h1r,fFe,p1r,_1r,Yd,u1r,mFe,b1r,v1r,eU,F1r,T1r,M1r,K7,E1r,bo,Sy,C1r,gFe,w1r,A1r,rn,L1r,hFe,y1r,x1r,pFe,$1r,k1r,_Fe,S1r,R1r,P1r,Ry,Z7,uFe,B1r,I1r,oU,N1r,q1r,j1r,e8,bFe,D1r,G1r,rU,O1r,V1r,X1r,o8,z1r,vFe,W1r,Q1r,FFe,H1r,U1r,r8,vze,Kd,t8,TFe,Py,J1r,MFe,Y1r,Fze,Ko,By,K1r,Zd,Z1r,tU,e2r,o2r,aU,r2r,t2r,a2r,Iy,n2r,EFe,s2r,l2r,i2r,$t,Ny,d2r,CFe,c2r,f2r,ec,m2r,wFe,g2r,h2r,nU,p2r,_2r,u2r,a8,b2r,vo,qy,v2r,AFe,F2r,T2r,tn,M2r,LFe,E2r,C2r,yFe,w2r,A2r,xFe,L2r,y2r,x2r,$Fe,n8,kFe,$2r,k2r,sU,S2r,R2r,P2r,s8,B2r,SFe,I2r,N2r,RFe,q2r,j2r,l8,Tze,oc,i8,PFe,jy,D2r,BFe,G2r,Mze,Zo,Dy,O2r,rc,V2r,lU,X2r,z2r,iU,W2r,Q2r,H2r,Gy,U2r,IFe,J2r,Y2r,K2r,kt,Oy,Z2r,NFe,ebr,obr,tc,rbr,qFe,tbr,abr,dU,nbr,sbr,lbr,d8,ibr,Fo,Vy,dbr,jFe,cbr,fbr,an,mbr,DFe,gbr,hbr,GFe,pbr,_br,OFe,ubr,bbr,vbr,at,c8,VFe,Fbr,Tbr,cU,Mbr,Ebr,Cbr,f8,XFe,wbr,Abr,fU,Lbr,ybr,xbr,m8,zFe,$br,kbr,mU,Sbr,Rbr,Pbr,g8,WFe,Bbr,Ibr,gU,Nbr,qbr,jbr,h8,QFe,Dbr,Gbr,hU,Obr,Vbr,Xbr,p8,zbr,HFe,Wbr,Qbr,UFe,Hbr,Ubr,_8,Eze,ac,u8,JFe,Xy,Jbr,YFe,Ybr,Cze,er,zy,Kbr,nc,Zbr,pU,evr,ovr,_U,rvr,tvr,avr,Wy,nvr,KFe,svr,lvr,ivr,St,Qy,dvr,ZFe,cvr,fvr,sc,mvr,eTe,gvr,hvr,uU,pvr,_vr,uvr,b8,bvr,To,Hy,vvr,oTe,Fvr,Tvr,nn,Mvr,rTe,Evr,Cvr,tTe,wvr,Avr,aTe,Lvr,yvr,xvr,nTe,v8,sTe,$vr,kvr,bU,Svr,Rvr,Pvr,F8,Bvr,lTe,Ivr,Nvr,iTe,qvr,jvr,T8,wze,lc,M8,dTe,Uy,Dvr,cTe,Gvr,Aze,or,Jy,Ovr,ic,Vvr,vU,Xvr,zvr,FU,Wvr,Qvr,Hvr,Yy,Uvr,fTe,Jvr,Yvr,Kvr,Rt,Ky,Zvr,mTe,e3r,o3r,dc,r3r,gTe,t3r,a3r,TU,n3r,s3r,l3r,E8,i3r,xr,Zy,d3r,hTe,c3r,f3r,sn,m3r,pTe,g3r,h3r,_Te,p3r,_3r,uTe,u3r,b3r,v3r,q,C8,bTe,F3r,T3r,MU,M3r,E3r,C3r,w8,vTe,w3r,A3r,EU,L3r,y3r,x3r,A8,FTe,$3r,k3r,CU,S3r,R3r,P3r,L8,TTe,B3r,I3r,wU,N3r,q3r,j3r,y8,MTe,D3r,G3r,AU,O3r,V3r,X3r,x8,ETe,z3r,W3r,LU,Q3r,H3r,U3r,$8,CTe,J3r,Y3r,yU,K3r,Z3r,eFr,k8,wTe,oFr,rFr,xU,tFr,aFr,nFr,S8,ATe,sFr,lFr,$U,iFr,dFr,cFr,R8,LTe,fFr,mFr,kU,gFr,hFr,pFr,P8,yTe,_Fr,uFr,SU,bFr,vFr,FFr,B8,xTe,TFr,MFr,RU,EFr,CFr,wFr,I8,$Te,AFr,LFr,PU,yFr,xFr,$Fr,N8,kTe,kFr,SFr,BU,RFr,PFr,BFr,q8,STe,IFr,NFr,IU,qFr,jFr,DFr,j8,RTe,GFr,OFr,NU,VFr,XFr,zFr,D8,PTe,WFr,QFr,qU,HFr,UFr,JFr,G8,BTe,YFr,KFr,jU,ZFr,eTr,oTr,Ys,ITe,rTr,tTr,DU,aTr,nTr,GU,sTr,lTr,iTr,O8,NTe,dTr,cTr,OU,fTr,mTr,gTr,V8,qTe,hTr,pTr,VU,_Tr,uTr,bTr,X8,jTe,vTr,FTr,XU,TTr,MTr,ETr,z8,DTe,CTr,wTr,zU,ATr,LTr,yTr,W8,GTe,xTr,$Tr,WU,kTr,STr,RTr,Q8,OTe,PTr,BTr,QU,ITr,NTr,qTr,H8,VTe,jTr,DTr,HU,GTr,OTr,VTr,U8,XTe,XTr,zTr,UU,WTr,QTr,HTr,J8,zTe,UTr,JTr,JU,YTr,KTr,ZTr,Y8,WTe,e7r,o7r,YU,r7r,t7r,a7r,K8,QTe,n7r,s7r,KU,l7r,i7r,d7r,Z8,HTe,c7r,f7r,ZU,m7r,g7r,h7r,e9,UTe,p7r,_7r,eJ,u7r,b7r,v7r,o9,JTe,F7r,T7r,oJ,M7r,E7r,C7r,r9,YTe,w7r,A7r,rJ,L7r,y7r,x7r,t9,KTe,$7r,k7r,tJ,S7r,R7r,P7r,a9,ZTe,B7r,I7r,aJ,N7r,q7r,j7r,n9,e7e,D7r,G7r,nJ,O7r,V7r,X7r,s9,o7e,z7r,W7r,sJ,Q7r,H7r,U7r,l9,r7e,J7r,Y7r,lJ,K7r,Z7r,e8r,i9,t7e,o8r,r8r,iJ,t8r,a8r,n8r,d9,a7e,s8r,l8r,dJ,i8r,d8r,c8r,c9,n7e,f8r,m8r,cJ,g8r,h8r,p8r,f9,s7e,_8r,u8r,fJ,b8r,v8r,F8r,m9,l7e,T8r,M8r,mJ,E8r,C8r,w8r,g9,i7e,A8r,L8r,gJ,y8r,x8r,$8r,h9,d7e,k8r,S8r,hJ,R8r,P8r,B8r,p9,c7e,I8r,N8r,pJ,q8r,j8r,D8r,_9,f7e,G8r,O8r,_J,V8r,X8r,z8r,u9,m7e,W8r,Q8r,uJ,H8r,U8r,J8r,b9,g7e,Y8r,K8r,bJ,Z8r,e9r,o9r,v9,Lze,cc,F9,h7e,ex,r9r,p7e,t9r,yze,rr,ox,a9r,fc,n9r,vJ,s9r,l9r,FJ,i9r,d9r,c9r,rx,f9r,_7e,m9r,g9r,h9r,Pt,tx,p9r,u7e,_9r,u9r,mc,b9r,b7e,v9r,F9r,TJ,T9r,M9r,E9r,T9,C9r,$r,ax,w9r,v7e,A9r,L9r,ln,y9r,F7e,x9r,$9r,T7e,k9r,S9r,M7e,R9r,P9r,B9r,se,M9,E7e,I9r,N9r,MJ,q9r,j9r,D9r,E9,C7e,G9r,O9r,EJ,V9r,X9r,z9r,C9,w7e,W9r,Q9r,CJ,H9r,U9r,J9r,w9,A7e,Y9r,K9r,wJ,Z9r,eMr,oMr,A9,L7e,rMr,tMr,AJ,aMr,nMr,sMr,L9,y7e,lMr,iMr,LJ,dMr,cMr,fMr,y9,x7e,mMr,gMr,yJ,hMr,pMr,_Mr,x9,$7e,uMr,bMr,xJ,vMr,FMr,TMr,$9,k7e,MMr,EMr,$J,CMr,wMr,AMr,k9,S7e,LMr,yMr,kJ,xMr,$Mr,kMr,S9,R7e,SMr,RMr,SJ,PMr,BMr,IMr,R9,P7e,NMr,qMr,RJ,jMr,DMr,GMr,P9,B7e,OMr,VMr,PJ,XMr,zMr,WMr,B9,I7e,QMr,HMr,BJ,UMr,JMr,YMr,I9,N7e,KMr,ZMr,IJ,e4r,o4r,r4r,N9,q7e,t4r,a4r,NJ,n4r,s4r,l4r,q9,j7e,i4r,d4r,qJ,c4r,f4r,m4r,j9,D7e,g4r,h4r,jJ,p4r,_4r,u4r,D9,G7e,b4r,v4r,DJ,F4r,T4r,M4r,G9,O7e,E4r,C4r,GJ,w4r,A4r,L4r,O9,V7e,y4r,x4r,OJ,$4r,k4r,S4r,V9,X7e,R4r,P4r,VJ,B4r,I4r,N4r,X9,z7e,q4r,j4r,XJ,D4r,G4r,O4r,z9,xze,gc,W9,W7e,nx,V4r,Q7e,X4r,$ze,tr,sx,z4r,hc,W4r,zJ,Q4r,H4r,WJ,U4r,J4r,Y4r,lx,K4r,H7e,Z4r,eEr,oEr,Bt,ix,rEr,U7e,tEr,aEr,pc,nEr,J7e,sEr,lEr,QJ,iEr,dEr,cEr,Q9,fEr,kr,dx,mEr,Y7e,gEr,hEr,dn,pEr,K7e,_Er,uEr,Z7e,bEr,vEr,e8e,FEr,TEr,MEr,Me,H9,o8e,EEr,CEr,HJ,wEr,AEr,LEr,U9,r8e,yEr,xEr,UJ,$Er,kEr,SEr,J9,t8e,REr,PEr,JJ,BEr,IEr,NEr,Y9,a8e,qEr,jEr,YJ,DEr,GEr,OEr,K9,n8e,VEr,XEr,KJ,zEr,WEr,QEr,Z9,s8e,HEr,UEr,ZJ,JEr,YEr,KEr,eM,l8e,ZEr,eCr,eY,oCr,rCr,tCr,oM,i8e,aCr,nCr,oY,sCr,lCr,iCr,rM,d8e,dCr,cCr,rY,fCr,mCr,gCr,tM,c8e,hCr,pCr,tY,_Cr,uCr,bCr,aM,f8e,vCr,FCr,aY,TCr,MCr,ECr,nM,m8e,CCr,wCr,nY,ACr,LCr,yCr,sM,g8e,xCr,$Cr,sY,kCr,SCr,RCr,lM,kze,_c,iM,h8e,cx,PCr,p8e,BCr,Sze,ar,fx,ICr,uc,NCr,lY,qCr,jCr,iY,DCr,GCr,OCr,mx,VCr,_8e,XCr,zCr,WCr,It,gx,QCr,u8e,HCr,UCr,bc,JCr,b8e,YCr,KCr,dY,ZCr,e5r,o5r,dM,r5r,Sr,hx,t5r,v8e,a5r,n5r,cn,s5r,F8e,l5r,i5r,T8e,d5r,c5r,M8e,f5r,m5r,g5r,We,cM,E8e,h5r,p5r,cY,_5r,u5r,b5r,fM,C8e,v5r,F5r,fY,T5r,M5r,E5r,Ks,w8e,C5r,w5r,mY,A5r,L5r,gY,y5r,x5r,$5r,mM,A8e,k5r,S5r,hY,R5r,P5r,B5r,gM,L8e,I5r,N5r,pY,q5r,j5r,D5r,hM,y8e,G5r,O5r,_Y,V5r,X5r,z5r,pM,x8e,W5r,Q5r,uY,H5r,U5r,J5r,_M,Rze,vc,uM,$8e,px,Y5r,k8e,K5r,Pze,nr,_x,Z5r,Fc,e0r,bY,o0r,r0r,vY,t0r,a0r,n0r,ux,s0r,S8e,l0r,i0r,d0r,Nt,bx,c0r,R8e,f0r,m0r,Tc,g0r,P8e,h0r,p0r,FY,_0r,u0r,b0r,bM,v0r,Rr,vx,F0r,B8e,T0r,M0r,fn,E0r,I8e,C0r,w0r,N8e,A0r,L0r,q8e,y0r,x0r,$0r,ie,vM,j8e,k0r,S0r,TY,R0r,P0r,B0r,FM,D8e,I0r,N0r,MY,q0r,j0r,D0r,TM,G8e,G0r,O0r,EY,V0r,X0r,z0r,MM,O8e,W0r,Q0r,CY,H0r,U0r,J0r,EM,V8e,Y0r,K0r,wY,Z0r,ewr,owr,CM,X8e,rwr,twr,AY,awr,nwr,swr,wM,z8e,lwr,iwr,LY,dwr,cwr,fwr,AM,W8e,mwr,gwr,yY,hwr,pwr,_wr,LM,Q8e,uwr,bwr,xY,vwr,Fwr,Twr,yM,H8e,Mwr,Ewr,$Y,Cwr,wwr,Awr,xM,U8e,Lwr,ywr,kY,xwr,$wr,kwr,$M,J8e,Swr,Rwr,SY,Pwr,Bwr,Iwr,kM,Y8e,Nwr,qwr,RY,jwr,Dwr,Gwr,SM,K8e,Owr,Vwr,PY,Xwr,zwr,Wwr,RM,Z8e,Qwr,Hwr,BY,Uwr,Jwr,Ywr,PM,e9e,Kwr,Zwr,IY,eAr,oAr,rAr,BM,o9e,tAr,aAr,NY,nAr,sAr,lAr,IM,r9e,iAr,dAr,qY,cAr,fAr,mAr,NM,t9e,gAr,hAr,jY,pAr,_Ar,uAr,qM,a9e,bAr,vAr,DY,FAr,TAr,MAr,jM,Bze,Mc,DM,n9e,Fx,EAr,s9e,CAr,Ize,sr,Tx,wAr,Ec,AAr,GY,LAr,yAr,OY,xAr,$Ar,kAr,Mx,SAr,l9e,RAr,PAr,BAr,qt,Ex,IAr,i9e,NAr,qAr,Cc,jAr,d9e,DAr,GAr,VY,OAr,VAr,XAr,GM,zAr,Pr,Cx,WAr,c9e,QAr,HAr,mn,UAr,f9e,JAr,YAr,m9e,KAr,ZAr,g9e,e6r,o6r,r6r,ye,OM,h9e,t6r,a6r,XY,n6r,s6r,l6r,VM,p9e,i6r,d6r,zY,c6r,f6r,m6r,XM,_9e,g6r,h6r,WY,p6r,_6r,u6r,zM,u9e,b6r,v6r,QY,F6r,T6r,M6r,WM,b9e,E6r,C6r,HY,w6r,A6r,L6r,QM,v9e,y6r,x6r,UY,$6r,k6r,S6r,HM,F9e,R6r,P6r,JY,B6r,I6r,N6r,UM,T9e,q6r,j6r,YY,D6r,G6r,O6r,JM,M9e,V6r,X6r,KY,z6r,W6r,Q6r,YM,E9e,H6r,U6r,ZY,J6r,Y6r,K6r,KM,Nze,wc,ZM,C9e,wx,Z6r,w9e,eLr,qze,lr,Ax,oLr,Ac,rLr,eK,tLr,aLr,oK,nLr,sLr,lLr,Lx,iLr,A9e,dLr,cLr,fLr,jt,yx,mLr,L9e,gLr,hLr,Lc,pLr,y9e,_Lr,uLr,rK,bLr,vLr,FLr,e4,TLr,Br,xx,MLr,x9e,ELr,CLr,gn,wLr,$9e,ALr,LLr,k9e,yLr,xLr,S9e,$Lr,kLr,SLr,te,o4,R9e,RLr,PLr,tK,BLr,ILr,NLr,r4,P9e,qLr,jLr,aK,DLr,GLr,OLr,t4,B9e,VLr,XLr,nK,zLr,WLr,QLr,a4,I9e,HLr,ULr,sK,JLr,YLr,KLr,n4,N9e,ZLr,eyr,lK,oyr,ryr,tyr,s4,q9e,ayr,nyr,iK,syr,lyr,iyr,l4,j9e,dyr,cyr,dK,fyr,myr,gyr,i4,D9e,hyr,pyr,cK,_yr,uyr,byr,d4,G9e,vyr,Fyr,fK,Tyr,Myr,Eyr,c4,O9e,Cyr,wyr,mK,Ayr,Lyr,yyr,f4,V9e,xyr,$yr,gK,kyr,Syr,Ryr,m4,X9e,Pyr,Byr,hK,Iyr,Nyr,qyr,g4,z9e,jyr,Dyr,pK,Gyr,Oyr,Vyr,h4,W9e,Xyr,zyr,_K,Wyr,Qyr,Hyr,p4,Q9e,Uyr,Jyr,uK,Yyr,Kyr,Zyr,_4,H9e,exr,oxr,bK,rxr,txr,axr,u4,U9e,nxr,sxr,vK,lxr,ixr,dxr,b4,J9e,cxr,fxr,FK,mxr,gxr,hxr,v4,Y9e,pxr,_xr,TK,uxr,bxr,vxr,F4,K9e,Fxr,Txr,MK,Mxr,Exr,Cxr,T4,Z9e,wxr,Axr,EK,Lxr,yxr,xxr,M4,eMe,$xr,kxr,CK,Sxr,Rxr,Pxr,E4,oMe,Bxr,Ixr,wK,Nxr,qxr,jxr,C4,rMe,Dxr,Gxr,AK,Oxr,Vxr,Xxr,w4,tMe,zxr,Wxr,LK,Qxr,Hxr,Uxr,A4,aMe,Jxr,Yxr,yK,Kxr,Zxr,e$r,L4,jze,yc,y4,nMe,$x,o$r,sMe,r$r,Dze,ir,kx,t$r,xc,a$r,xK,n$r,s$r,$K,l$r,i$r,d$r,Sx,c$r,lMe,f$r,m$r,g$r,Dt,Rx,h$r,iMe,p$r,_$r,$c,u$r,dMe,b$r,v$r,kK,F$r,T$r,M$r,x4,E$r,Ir,Px,C$r,cMe,w$r,A$r,hn,L$r,fMe,y$r,x$r,mMe,$$r,k$r,gMe,S$r,R$r,P$r,ue,$4,hMe,B$r,I$r,SK,N$r,q$r,j$r,k4,pMe,D$r,G$r,RK,O$r,V$r,X$r,S4,_Me,z$r,W$r,PK,Q$r,H$r,U$r,R4,uMe,J$r,Y$r,BK,K$r,Z$r,ekr,P4,bMe,okr,rkr,IK,tkr,akr,nkr,B4,vMe,skr,lkr,NK,ikr,dkr,ckr,I4,FMe,fkr,mkr,qK,gkr,hkr,pkr,N4,TMe,_kr,ukr,jK,bkr,vkr,Fkr,q4,MMe,Tkr,Mkr,DK,Ekr,Ckr,wkr,j4,EMe,Akr,Lkr,GK,ykr,xkr,$kr,D4,CMe,kkr,Skr,OK,Rkr,Pkr,Bkr,G4,wMe,Ikr,Nkr,VK,qkr,jkr,Dkr,O4,AMe,Gkr,Okr,XK,Vkr,Xkr,zkr,V4,LMe,Wkr,Qkr,zK,Hkr,Ukr,Jkr,X4,yMe,Ykr,Kkr,WK,Zkr,eSr,oSr,z4,xMe,rSr,tSr,QK,aSr,nSr,sSr,W4,$Me,lSr,iSr,HK,dSr,cSr,fSr,Q4,Gze,kc,H4,kMe,Bx,mSr,SMe,gSr,Oze,dr,Ix,hSr,Sc,pSr,UK,_Sr,uSr,JK,bSr,vSr,FSr,Nx,TSr,RMe,MSr,ESr,CSr,Gt,qx,wSr,PMe,ASr,LSr,Rc,ySr,BMe,xSr,$Sr,YK,kSr,SSr,RSr,U4,PSr,Nr,jx,BSr,IMe,ISr,NSr,pn,qSr,NMe,jSr,DSr,qMe,GSr,OSr,jMe,VSr,XSr,zSr,Dx,J4,DMe,WSr,QSr,KK,HSr,USr,JSr,Y4,GMe,YSr,KSr,ZK,ZSr,eRr,oRr,K4,Vze,Pc,Z4,OMe,Gx,rRr,VMe,tRr,Xze,cr,Ox,aRr,Bc,nRr,eZ,sRr,lRr,oZ,iRr,dRr,cRr,Vx,fRr,XMe,mRr,gRr,hRr,Ot,Xx,pRr,zMe,_Rr,uRr,Ic,bRr,WMe,vRr,FRr,rZ,TRr,MRr,ERr,eE,CRr,qr,zx,wRr,QMe,ARr,LRr,_n,yRr,HMe,xRr,$Rr,UMe,kRr,SRr,JMe,RRr,PRr,BRr,YMe,oE,KMe,IRr,NRr,tZ,qRr,jRr,DRr,rE,zze,Nc,tE,ZMe,Wx,GRr,e4e,ORr,Wze,fr,Qx,VRr,qc,XRr,aZ,zRr,WRr,nZ,QRr,HRr,URr,Hx,JRr,o4e,YRr,KRr,ZRr,Vt,Ux,ePr,r4e,oPr,rPr,jc,tPr,t4e,aPr,nPr,sZ,sPr,lPr,iPr,aE,dPr,jr,Jx,cPr,a4e,fPr,mPr,un,gPr,n4e,hPr,pPr,s4e,_Pr,uPr,l4e,bPr,vPr,FPr,de,nE,i4e,TPr,MPr,lZ,EPr,CPr,wPr,sE,d4e,APr,LPr,iZ,yPr,xPr,$Pr,lE,c4e,kPr,SPr,dZ,RPr,PPr,BPr,iE,f4e,IPr,NPr,cZ,qPr,jPr,DPr,dE,m4e,GPr,OPr,fZ,VPr,XPr,zPr,cE,g4e,WPr,QPr,mZ,HPr,UPr,JPr,fE,h4e,YPr,KPr,gZ,ZPr,eBr,oBr,mE,p4e,rBr,tBr,hZ,aBr,nBr,sBr,gE,_4e,lBr,iBr,pZ,dBr,cBr,fBr,hE,u4e,mBr,gBr,_Z,hBr,pBr,_Br,pE,b4e,uBr,bBr,uZ,vBr,FBr,TBr,_E,v4e,MBr,EBr,bZ,CBr,wBr,ABr,uE,F4e,LBr,yBr,vZ,xBr,$Br,kBr,bE,T4e,SBr,RBr,FZ,PBr,BBr,IBr,vE,M4e,NBr,qBr,TZ,jBr,DBr,GBr,FE,E4e,OBr,VBr,MZ,XBr,zBr,WBr,TE,C4e,QBr,HBr,EZ,UBr,JBr,YBr,ME,w4e,KBr,ZBr,CZ,eIr,oIr,rIr,EE,A4e,tIr,aIr,wZ,nIr,sIr,lIr,CE,L4e,iIr,dIr,AZ,cIr,fIr,mIr,wE,Qze,Dc,AE,y4e,Yx,gIr,x4e,hIr,Hze,mr,Kx,pIr,Gc,_Ir,LZ,uIr,bIr,yZ,vIr,FIr,TIr,Zx,MIr,$4e,EIr,CIr,wIr,Xt,e$,AIr,k4e,LIr,yIr,Oc,xIr,S4e,$Ir,kIr,xZ,SIr,RIr,PIr,LE,BIr,Dr,o$,IIr,R4e,NIr,qIr,bn,jIr,P4e,DIr,GIr,B4e,OIr,VIr,I4e,XIr,zIr,WIr,ce,yE,N4e,QIr,HIr,$Z,UIr,JIr,YIr,xE,q4e,KIr,ZIr,kZ,eNr,oNr,rNr,$E,j4e,tNr,aNr,SZ,nNr,sNr,lNr,kE,D4e,iNr,dNr,RZ,cNr,fNr,mNr,SE,G4e,gNr,hNr,PZ,pNr,_Nr,uNr,RE,O4e,bNr,vNr,BZ,FNr,TNr,MNr,PE,V4e,ENr,CNr,IZ,wNr,ANr,LNr,BE,X4e,yNr,xNr,NZ,$Nr,kNr,SNr,IE,z4e,RNr,PNr,qZ,BNr,INr,NNr,NE,W4e,qNr,jNr,jZ,DNr,GNr,ONr,qE,Q4e,VNr,XNr,DZ,zNr,WNr,QNr,jE,H4e,HNr,UNr,GZ,JNr,YNr,KNr,DE,U4e,ZNr,eqr,OZ,oqr,rqr,tqr,GE,J4e,aqr,nqr,VZ,sqr,lqr,iqr,OE,Y4e,dqr,cqr,XZ,fqr,mqr,gqr,VE,K4e,hqr,pqr,zZ,_qr,uqr,bqr,XE,Z4e,vqr,Fqr,WZ,Tqr,Mqr,Eqr,zE,eEe,Cqr,wqr,QZ,Aqr,Lqr,yqr,WE,oEe,xqr,$qr,HZ,kqr,Sqr,Rqr,QE,rEe,Pqr,Bqr,UZ,Iqr,Nqr,qqr,HE,Uze,Vc,UE,tEe,r$,jqr,aEe,Dqr,Jze,gr,t$,Gqr,Xc,Oqr,JZ,Vqr,Xqr,YZ,zqr,Wqr,Qqr,a$,Hqr,nEe,Uqr,Jqr,Yqr,zt,n$,Kqr,sEe,Zqr,ejr,zc,ojr,lEe,rjr,tjr,KZ,ajr,njr,sjr,JE,ljr,Gr,s$,ijr,iEe,djr,cjr,vn,fjr,dEe,mjr,gjr,cEe,hjr,pjr,fEe,_jr,ujr,bjr,mEe,YE,gEe,vjr,Fjr,ZZ,Tjr,Mjr,Ejr,KE,Yze,Wc,ZE,hEe,l$,Cjr,pEe,wjr,Kze,hr,i$,Ajr,Qc,Ljr,eee,yjr,xjr,oee,$jr,kjr,Sjr,d$,Rjr,_Ee,Pjr,Bjr,Ijr,Wt,c$,Njr,uEe,qjr,jjr,Hc,Djr,bEe,Gjr,Ojr,ree,Vjr,Xjr,zjr,eC,Wjr,Or,f$,Qjr,vEe,Hjr,Ujr,Fn,Jjr,FEe,Yjr,Kjr,TEe,Zjr,eDr,MEe,oDr,rDr,tDr,EEe,oC,CEe,aDr,nDr,tee,sDr,lDr,iDr,rC,Zze,Uc,tC,wEe,m$,dDr,AEe,cDr,eWe,pr,g$,fDr,Jc,mDr,aee,gDr,hDr,nee,pDr,_Dr,uDr,h$,bDr,LEe,vDr,FDr,TDr,Qt,p$,MDr,yEe,EDr,CDr,Yc,wDr,xEe,ADr,LDr,see,yDr,xDr,$Dr,aC,kDr,Vr,_$,SDr,$Ee,RDr,PDr,Tn,BDr,kEe,IDr,NDr,SEe,qDr,jDr,REe,DDr,GDr,ODr,oe,nC,PEe,VDr,XDr,lee,zDr,WDr,QDr,sC,BEe,HDr,UDr,iee,JDr,YDr,KDr,lC,IEe,ZDr,eGr,dee,oGr,rGr,tGr,iC,NEe,aGr,nGr,cee,sGr,lGr,iGr,dC,qEe,dGr,cGr,fee,fGr,mGr,gGr,cC,jEe,hGr,pGr,mee,_Gr,uGr,bGr,fC,DEe,vGr,FGr,gee,TGr,MGr,EGr,mC,GEe,CGr,wGr,hee,AGr,LGr,yGr,gC,OEe,xGr,$Gr,pee,kGr,SGr,RGr,hC,VEe,PGr,BGr,_ee,IGr,NGr,qGr,pC,XEe,jGr,DGr,uee,GGr,OGr,VGr,_C,zEe,XGr,zGr,bee,WGr,QGr,HGr,uC,WEe,UGr,JGr,vee,YGr,KGr,ZGr,bC,QEe,eOr,oOr,Fee,rOr,tOr,aOr,vC,HEe,nOr,sOr,Tee,lOr,iOr,dOr,FC,UEe,cOr,fOr,Mee,mOr,gOr,hOr,TC,JEe,pOr,_Or,Eee,uOr,bOr,vOr,MC,YEe,FOr,TOr,Cee,MOr,EOr,COr,EC,KEe,wOr,AOr,wee,LOr,yOr,xOr,CC,ZEe,$Or,kOr,Aee,SOr,ROr,POr,wC,eCe,BOr,IOr,Lee,NOr,qOr,jOr,AC,oCe,DOr,GOr,yee,OOr,VOr,XOr,LC,rCe,zOr,WOr,xee,QOr,HOr,UOr,yC,tCe,JOr,YOr,$ee,KOr,ZOr,eVr,xC,aCe,oVr,rVr,kee,tVr,aVr,nVr,$C,nCe,sVr,lVr,See,iVr,dVr,cVr,kC,sCe,fVr,mVr,Ree,gVr,hVr,pVr,SC,oWe,Kc,RC,lCe,u$,_Vr,iCe,uVr,rWe,_r,b$,bVr,Zc,vVr,Pee,FVr,TVr,Bee,MVr,EVr,CVr,v$,wVr,dCe,AVr,LVr,yVr,Ht,F$,xVr,cCe,$Vr,kVr,ef,SVr,fCe,RVr,PVr,Iee,BVr,IVr,NVr,PC,qVr,Xr,T$,jVr,mCe,DVr,GVr,Mn,OVr,gCe,VVr,XVr,hCe,zVr,WVr,pCe,QVr,HVr,UVr,xe,BC,_Ce,JVr,YVr,Nee,KVr,ZVr,eXr,IC,uCe,oXr,rXr,qee,tXr,aXr,nXr,NC,bCe,sXr,lXr,jee,iXr,dXr,cXr,qC,vCe,fXr,mXr,Dee,gXr,hXr,pXr,jC,FCe,_Xr,uXr,Gee,bXr,vXr,FXr,DC,TCe,TXr,MXr,Oee,EXr,CXr,wXr,GC,MCe,AXr,LXr,Vee,yXr,xXr,$Xr,OC,ECe,kXr,SXr,Xee,RXr,PXr,BXr,VC,CCe,IXr,NXr,zee,qXr,jXr,DXr,XC,wCe,GXr,OXr,Wee,VXr,XXr,zXr,zC,tWe,of,WC,ACe,M$,WXr,LCe,QXr,aWe,ur,E$,HXr,rf,UXr,Qee,JXr,YXr,Hee,KXr,ZXr,ezr,C$,ozr,yCe,rzr,tzr,azr,Ut,w$,nzr,xCe,szr,lzr,tf,izr,$Ce,dzr,czr,Uee,fzr,mzr,gzr,QC,hzr,zr,A$,pzr,kCe,_zr,uzr,En,bzr,SCe,vzr,Fzr,RCe,Tzr,Mzr,PCe,Ezr,Czr,wzr,Ee,HC,BCe,Azr,Lzr,Jee,yzr,xzr,$zr,UC,ICe,kzr,Szr,Yee,Rzr,Pzr,Bzr,JC,NCe,Izr,Nzr,Kee,qzr,jzr,Dzr,YC,qCe,Gzr,Ozr,Zee,Vzr,Xzr,zzr,KC,jCe,Wzr,Qzr,eoe,Hzr,Uzr,Jzr,ZC,DCe,Yzr,Kzr,ooe,Zzr,eWr,oWr,e5,GCe,rWr,tWr,roe,aWr,nWr,sWr,o5,OCe,lWr,iWr,toe,dWr,cWr,fWr,r5,VCe,mWr,gWr,aoe,hWr,pWr,_Wr,t5,XCe,uWr,bWr,noe,vWr,FWr,TWr,a5,zCe,MWr,EWr,soe,CWr,wWr,AWr,n5,WCe,LWr,yWr,loe,xWr,$Wr,kWr,s5,QCe,SWr,RWr,ioe,PWr,BWr,IWr,l5,nWe,af,i5,HCe,L$,NWr,UCe,qWr,sWe,br,y$,jWr,nf,DWr,doe,GWr,OWr,coe,VWr,XWr,zWr,x$,WWr,JCe,QWr,HWr,UWr,Jt,$$,JWr,YCe,YWr,KWr,sf,ZWr,KCe,eQr,oQr,foe,rQr,tQr,aQr,d5,nQr,Wr,k$,sQr,ZCe,lQr,iQr,Cn,dQr,e5e,cQr,fQr,o5e,mQr,gQr,r5e,hQr,pQr,_Qr,$e,c5,t5e,uQr,bQr,moe,vQr,FQr,TQr,f5,a5e,MQr,EQr,goe,CQr,wQr,AQr,m5,n5e,LQr,yQr,hoe,xQr,$Qr,kQr,g5,s5e,SQr,RQr,poe,PQr,BQr,IQr,h5,l5e,NQr,qQr,_oe,jQr,DQr,GQr,p5,i5e,OQr,VQr,uoe,XQr,zQr,WQr,_5,d5e,QQr,HQr,boe,UQr,JQr,YQr,u5,c5e,KQr,ZQr,voe,eHr,oHr,rHr,b5,f5e,tHr,aHr,Foe,nHr,sHr,lHr,v5,m5e,iHr,dHr,Toe,cHr,fHr,mHr,F5,lWe,lf,T5,g5e,S$,gHr,h5e,hHr,iWe,vr,R$,pHr,df,_Hr,Moe,uHr,bHr,Eoe,vHr,FHr,THr,P$,MHr,p5e,EHr,CHr,wHr,Yt,B$,AHr,_5e,LHr,yHr,cf,xHr,u5e,$Hr,kHr,Coe,SHr,RHr,PHr,M5,BHr,Qr,I$,IHr,b5e,NHr,qHr,wn,jHr,v5e,DHr,GHr,F5e,OHr,VHr,T5e,XHr,zHr,WHr,ke,E5,M5e,QHr,HHr,woe,UHr,JHr,YHr,C5,E5e,KHr,ZHr,Aoe,eUr,oUr,rUr,w5,C5e,tUr,aUr,Loe,nUr,sUr,lUr,A5,w5e,iUr,dUr,yoe,cUr,fUr,mUr,L5,A5e,gUr,hUr,xoe,pUr,_Ur,uUr,y5,L5e,bUr,vUr,$oe,FUr,TUr,MUr,x5,y5e,EUr,CUr,koe,wUr,AUr,LUr,$5,x5e,yUr,xUr,Soe,$Ur,kUr,SUr,k5,$5e,RUr,PUr,Roe,BUr,IUr,NUr,S5,k5e,qUr,jUr,Poe,DUr,GUr,OUr,R5,dWe,ff,P5,S5e,N$,VUr,R5e,XUr,cWe,Fr,q$,zUr,mf,WUr,Boe,QUr,HUr,Ioe,UUr,JUr,YUr,j$,KUr,P5e,ZUr,eJr,oJr,Kt,D$,rJr,B5e,tJr,aJr,gf,nJr,I5e,sJr,lJr,Noe,iJr,dJr,cJr,B5,fJr,Hr,G$,mJr,N5e,gJr,hJr,An,pJr,q5e,_Jr,uJr,j5e,bJr,vJr,D5e,FJr,TJr,MJr,Se,I5,G5e,EJr,CJr,qoe,wJr,AJr,LJr,N5,O5e,yJr,xJr,joe,$Jr,kJr,SJr,q5,V5e,RJr,PJr,Doe,BJr,IJr,NJr,j5,X5e,qJr,jJr,Goe,DJr,GJr,OJr,D5,z5e,VJr,XJr,Ooe,zJr,WJr,QJr,G5,W5e,HJr,UJr,Voe,JJr,YJr,KJr,O5,Q5e,ZJr,eYr,Xoe,oYr,rYr,tYr,V5,H5e,aYr,nYr,zoe,sYr,lYr,iYr,X5,U5e,dYr,cYr,Woe,fYr,mYr,gYr,z5,J5e,hYr,pYr,Qoe,_Yr,uYr,bYr,W5,fWe,hf,Q5,Y5e,O$,vYr,K5e,FYr,mWe,Tr,V$,TYr,pf,MYr,Hoe,EYr,CYr,Uoe,wYr,AYr,LYr,X$,yYr,Z5e,xYr,$Yr,kYr,Zt,z$,SYr,e0e,RYr,PYr,_f,BYr,o0e,IYr,NYr,Joe,qYr,jYr,DYr,H5,GYr,Ur,W$,OYr,r0e,VYr,XYr,Ln,zYr,t0e,WYr,QYr,a0e,HYr,UYr,n0e,JYr,YYr,KYr,Re,U5,s0e,ZYr,eKr,Yoe,oKr,rKr,tKr,J5,l0e,aKr,nKr,Koe,sKr,lKr,iKr,Y5,i0e,dKr,cKr,Zoe,fKr,mKr,gKr,K5,d0e,hKr,pKr,ere,_Kr,uKr,bKr,Z5,c0e,vKr,FKr,ore,TKr,MKr,EKr,e0,f0e,CKr,wKr,rre,AKr,LKr,yKr,o0,m0e,xKr,$Kr,tre,kKr,SKr,RKr,r0,g0e,PKr,BKr,are,IKr,NKr,qKr,t0,h0e,jKr,DKr,nre,GKr,OKr,VKr,a0,p0e,XKr,zKr,sre,WKr,QKr,HKr,n0,gWe,uf,s0,_0e,Q$,UKr,u0e,JKr,hWe,Mr,H$,YKr,bf,KKr,lre,ZKr,eZr,ire,oZr,rZr,tZr,U$,aZr,b0e,nZr,sZr,lZr,ea,J$,iZr,v0e,dZr,cZr,vf,fZr,F0e,mZr,gZr,dre,hZr,pZr,_Zr,l0,uZr,Jr,Y$,bZr,T0e,vZr,FZr,yn,TZr,M0e,MZr,EZr,E0e,CZr,wZr,C0e,AZr,LZr,yZr,Ve,i0,w0e,xZr,$Zr,cre,kZr,SZr,RZr,d0,A0e,PZr,BZr,fre,IZr,NZr,qZr,c0,L0e,jZr,DZr,mre,GZr,OZr,VZr,f0,y0e,XZr,zZr,gre,WZr,QZr,HZr,m0,x0e,UZr,JZr,hre,YZr,KZr,ZZr,g0,$0e,eet,oet,pre,ret,tet,aet,h0,k0e,net,set,_re,iet,det,cet,p0,S0e,fet,met,ure,get,het,pet,_0,pWe,Ff,u0,R0e,K$,_et,P0e,uet,_We,Er,Z$,bet,Tf,vet,bre,Fet,Tet,vre,Met,Eet,Cet,ek,wet,B0e,Aet,Let,yet,oa,ok,xet,I0e,$et,ket,Mf,Set,N0e,Ret,Pet,Fre,Bet,Iet,Net,b0,qet,Yr,rk,jet,q0e,Det,Get,xn,Oet,j0e,Vet,Xet,D0e,zet,Wet,G0e,Qet,Het,Uet,Xe,v0,O0e,Jet,Yet,Tre,Ket,Zet,eot,F0,V0e,oot,rot,Mre,tot,aot,not,T0,X0e,sot,lot,Ere,iot,dot,cot,M0,z0e,fot,mot,Cre,got,hot,pot,E0,W0e,_ot,uot,wre,bot,vot,Fot,C0,Q0e,Tot,Mot,Are,Eot,Cot,wot,w0,H0e,Aot,Lot,Lre,yot,xot,$ot,A0,U0e,kot,Sot,yre,Rot,Pot,Bot,L0,uWe,Ef,y0,J0e,tk,Iot,Y0e,Not,bWe,Cr,ak,qot,Cf,jot,xre,Dot,Got,$re,Oot,Vot,Xot,nk,zot,K0e,Wot,Qot,Hot,ra,sk,Uot,Z0e,Jot,Yot,wf,Kot,ewe,Zot,ert,kre,ort,rrt,trt,x0,art,Kr,lk,nrt,owe,srt,lrt,$n,irt,rwe,drt,crt,twe,frt,mrt,awe,grt,hrt,prt,nwe,$0,swe,_rt,urt,Sre,brt,vrt,Frt,k0,vWe,Af,S0,lwe,ik,Trt,iwe,Mrt,FWe,wr,dk,Ert,Lf,Crt,Rre,wrt,Art,Pre,Lrt,yrt,xrt,ck,$rt,dwe,krt,Srt,Rrt,ta,fk,Prt,cwe,Brt,Irt,yf,Nrt,fwe,qrt,jrt,Bre,Drt,Grt,Ort,R0,Vrt,Zr,mk,Xrt,mwe,zrt,Wrt,kn,Qrt,gwe,Hrt,Urt,hwe,Jrt,Yrt,pwe,Krt,Zrt,ett,gk,P0,_we,ott,rtt,Ire,ttt,att,ntt,B0,uwe,stt,ltt,Nre,itt,dtt,ctt,I0,TWe,xf,N0,bwe,hk,ftt,vwe,mtt,MWe,Ar,pk,gtt,$f,htt,qre,ptt,_tt,jre,utt,btt,vtt,_k,Ftt,Fwe,Ttt,Mtt,Ett,aa,uk,Ctt,Twe,wtt,Att,kf,Ltt,Mwe,ytt,xtt,Dre,$tt,ktt,Stt,q0,Rtt,et,bk,Ptt,Ewe,Btt,Itt,Sn,Ntt,Cwe,qtt,jtt,wwe,Dtt,Gtt,Awe,Ott,Vtt,Xtt,Lwe,j0,ywe,ztt,Wtt,Gre,Qtt,Htt,Utt,D0,EWe;return d=new re({}),Sa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),d6=new re({}),c6=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Df=new Jtt({props:{warning:!0,$$slots:{default:[DQt]},$$scope:{ctx:$}}}),f6=new re({}),m6=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/configuration_auto.py#L613"}}),p6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/configuration_auto.py#L636"}}),Zg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[GQt]},$$scope:{ctx:$}}}),_6=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/configuration_auto.py#L759"}}),u6=new re({}),b6=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/tokenization_auto.py#L404"}}),T6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17938/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/tokenization_auto.py#L418"}}),Bh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[OQt]},$$scope:{ctx:$}}}),M6=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/tokenization_auto.py#L617"}}),E6=new re({}),C6=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/feature_extraction_auto.py#L196"}}),L6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17938/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/feature_extraction_auto.py#L210"}}),vp=new Jtt({props:{$$slots:{default:[VQt]},$$scope:{ctx:$}}}),Fp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[XQt]},$$scope:{ctx:$}}}),y6=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/feature_extraction_auto.py#L337"}}),x6=new re({}),$6=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/processing_auto.py#L90"}}),R6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/processing_auto.py#L104"}}),Op=new Jtt({props:{$$slots:{default:[zQt]},$$scope:{ctx:$}}}),Vp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[WQt]},$$scope:{ctx:$}}}),P6=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/processing_auto.py#L257"}}),B6=new re({}),I6=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L783"}}),q6=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),Wp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[QQt]},$$scope:{ctx:$}}}),j6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),Yu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[HQt]},$$scope:{ctx:$}}}),D6=new re({}),G6=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L790"}}),V6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),Zu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[UQt]},$$scope:{ctx:$}}}),X6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),W1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[JQt]},$$scope:{ctx:$}}}),z6=new re({}),W6=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L805"}}),H6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),H1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[YQt]},$$scope:{ctx:$}}}),U6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),I2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[KQt]},$$scope:{ctx:$}}}),J6=new re({}),Y6=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L812"}}),Z6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),q2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[ZQt]},$$scope:{ctx:$}}}),eL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),Cb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[eHt]},$$scope:{ctx:$}}}),oL=new re({}),rL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L819"}}),aL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),Ab=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[oHt]},$$scope:{ctx:$}}}),nL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),Wb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[rHt]},$$scope:{ctx:$}}}),sL=new re({}),lL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L828"}}),dL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),Hb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[tHt]},$$scope:{ctx:$}}}),cL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),Wv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[aHt]},$$scope:{ctx:$}}}),fL=new re({}),mL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L873"}}),hL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),Hv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[nHt]},$$scope:{ctx:$}}}),pL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),A3=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[sHt]},$$scope:{ctx:$}}}),_L=new re({}),uL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L880"}}),vL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),y3=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[lHt]},$$scope:{ctx:$}}}),FL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),I3=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[iHt]},$$scope:{ctx:$}}}),TL=new re({}),ML=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L866"}}),CL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),q3=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[dHt]},$$scope:{ctx:$}}}),wL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),MF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[cHt]},$$scope:{ctx:$}}}),AL=new re({}),LL=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L837"}}),xL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),CF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[fHt]},$$scope:{ctx:$}}}),$L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),hT=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[mHt]},$$scope:{ctx:$}}}),kL=new re({}),SL=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L844"}}),PL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),_T=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[gHt]},$$scope:{ctx:$}}}),BL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),vT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[hHt]},$$scope:{ctx:$}}}),IL=new re({}),NL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L889"}}),jL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17938/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),TT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[pHt]},$$scope:{ctx:$}}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),IT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[_Ht]},$$scope:{ctx:$}}}),GL=new re({}),OL=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L928"}}),XL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),qT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[uHt]},$$scope:{ctx:$}}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),GT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[bHt]},$$scope:{ctx:$}}}),WL=new re({}),QL=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L855"}}),UL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),VT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[vHt]},$$scope:{ctx:$}}}),JL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),WT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[FHt]},$$scope:{ctx:$}}}),YL=new re({}),KL=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L935"}}),ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),HT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[THt]},$$scope:{ctx:$}}}),oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),n7=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[MHt]},$$scope:{ctx:$}}}),ry=new re({}),ty=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L958"}}),ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),l7=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[EHt]},$$scope:{ctx:$}}}),sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),h7=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[CHt]},$$scope:{ctx:$}}}),ly=new re({}),iy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L942"}}),cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),_7=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[wHt]},$$scope:{ctx:$}}}),fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),y7=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[AHt]},$$scope:{ctx:$}}}),my=new re({}),gy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L949"}}),py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),$7=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[LHt]},$$scope:{ctx:$}}}),_y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),P7=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[yHt]},$$scope:{ctx:$}}}),by=new re({}),vy=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L967"}}),Ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),I7=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[xHt]},$$scope:{ctx:$}}}),My=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),V7=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[$Ht]},$$scope:{ctx:$}}}),Ey=new re({}),Cy=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L974"}}),Ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),z7=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[kHt]},$$scope:{ctx:$}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),J7=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[SHt]},$$scope:{ctx:$}}}),yy=new re({}),xy=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L921"}}),ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),K7=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[RHt]},$$scope:{ctx:$}}}),Sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),r8=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[PHt]},$$scope:{ctx:$}}}),Py=new re({}),By=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L896"}}),Ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),a8=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[BHt]},$$scope:{ctx:$}}}),qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),l8=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[IHt]},$$scope:{ctx:$}}}),jy=new re({}),Dy=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L903"}}),Oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),d8=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[NHt]},$$scope:{ctx:$}}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),_8=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[qHt]},$$scope:{ctx:$}}}),Xy=new re({}),zy=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L912"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),b8=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[jHt]},$$scope:{ctx:$}}}),Hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),T8=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[DHt]},$$scope:{ctx:$}}}),Uy=new re({}),Jy=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),Ky=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),E8=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[GHt]},$$scope:{ctx:$}}}),Zy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),v9=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[OHt]},$$scope:{ctx:$}}}),ex=new re({}),ox=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L420"}}),tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),T9=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[VHt]},$$scope:{ctx:$}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),z9=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[XHt]},$$scope:{ctx:$}}}),nx=new re({}),sx=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),ix=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),Q9=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[zHt]},$$scope:{ctx:$}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),lM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[WHt]},$$scope:{ctx:$}}}),cx=new re({}),fx=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L451"}}),gx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/pr_17938/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),dM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[QHt]},$$scope:{ctx:$}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),_M=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[HHt]},$$scope:{ctx:$}}}),px=new re({}),_x=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),bx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),bM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[UHt]},$$scope:{ctx:$}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),jM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[JHt]},$$scope:{ctx:$}}}),Fx=new re({}),Tx=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L483"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),GM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[YHt]},$$scope:{ctx:$}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),KM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[KHt]},$$scope:{ctx:$}}}),wx=new re({}),Ax=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),yx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),e4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[ZHt]},$$scope:{ctx:$}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),L4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[eUt]},$$scope:{ctx:$}}}),$x=new re({}),kx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),Rx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),x4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[oUt]},$$scope:{ctx:$}}}),Px=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),Q4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[rUt]},$$scope:{ctx:$}}}),Bx=new re({}),Ix=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L535"}}),qx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),U4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[tUt]},$$scope:{ctx:$}}}),jx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),K4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[aUt]},$$scope:{ctx:$}}}),Gx=new re({}),Ox=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L508"}}),Xx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),eE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[nUt]},$$scope:{ctx:$}}}),zx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),rE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[sUt]},$$scope:{ctx:$}}}),Wx=new re({}),Qx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L519"}}),Ux=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),aE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[lUt]},$$scope:{ctx:$}}}),Jx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),wE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[iUt]},$$scope:{ctx:$}}}),Yx=new re({}),Kx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),e$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),LE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[dUt]},$$scope:{ctx:$}}}),o$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),HE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[cUt]},$$scope:{ctx:$}}}),r$=new re({}),t$=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),n$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),JE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[fUt]},$$scope:{ctx:$}}}),s$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),KE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[mUt]},$$scope:{ctx:$}}}),l$=new re({}),i$=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L544"}}),c$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),eC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[gUt]},$$scope:{ctx:$}}}),f$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),rC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[hUt]},$$scope:{ctx:$}}}),m$=new re({}),g$=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),p$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),aC=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[pUt]},$$scope:{ctx:$}}}),_$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),SC=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[_Ut]},$$scope:{ctx:$}}}),u$=new re({}),b$=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),F$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),PC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[uUt]},$$scope:{ctx:$}}}),T$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),zC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[bUt]},$$scope:{ctx:$}}}),M$=new re({}),E$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),w$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),QC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[vUt]},$$scope:{ctx:$}}}),A$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),l5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[FUt]},$$scope:{ctx:$}}}),L$=new re({}),y$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),$$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),d5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[TUt]},$$scope:{ctx:$}}}),k$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),F5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[MUt]},$$scope:{ctx:$}}}),S$=new re({}),R$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),B$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),M5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[EUt]},$$scope:{ctx:$}}}),I$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),R5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[CUt]},$$scope:{ctx:$}}}),N$=new re({}),q$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),D$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),B5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[wUt]},$$scope:{ctx:$}}}),G$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),W5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[AUt]},$$scope:{ctx:$}}}),O$=new re({}),V$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),z$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),H5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[LUt]},$$scope:{ctx:$}}}),W$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),n0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[yUt]},$$scope:{ctx:$}}}),Q$=new re({}),H$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),J$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),l0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[xUt]},$$scope:{ctx:$}}}),Y$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),_0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[$Ut]},$$scope:{ctx:$}}}),K$=new re({}),Z$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),ok=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),b0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[kUt]},$$scope:{ctx:$}}}),rk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),L0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[SUt]},$$scope:{ctx:$}}}),tk=new re({}),ak=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),sk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),x0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[RUt]},$$scope:{ctx:$}}}),lk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),k0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[PUt]},$$scope:{ctx:$}}}),ik=new re({}),dk=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),fk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),R0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[BUt]},$$scope:{ctx:$}}}),mk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),I0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[IUt]},$$scope:{ctx:$}}}),hk=new re({}),pk=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),uk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),q0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[NUt]},$$scope:{ctx:$}}}),bk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),D0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[qUt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Co=a("span"),yi=o("Auto Classes"),Bf=l(),lt=a("p"),xi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),$i=a("code"),n6=o("from_pretrained()"),If=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),ki=o("Instantiating one of "),Pn=a("a"),s6=o("AutoConfig"),Bn=o(", "),In=a("a"),l6=o("AutoModel"),Si=o(`, and
`),Nn=a("a"),i6=o("AutoTokenizer"),Ri=o(" will directly create a class of the relevant architecture. For instance"),Nf=l(),F(Sa.$$.fragment),He=l(),Ae=a("p"),GS=o("will create a model that is an instance of "),Pi=a("a"),OS=o("BertModel"),VS=o("."),wo=l(),Ra=a("p"),XS=o("There is one class of "),qf=a("code"),zS=o("AutoModel"),RHe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),bXe=l(),Bi=a("h2"),jf=a("a"),Iae=a("span"),F(d6.$$.fragment),PHe=l(),Nae=a("span"),BHe=o("Extending the Auto Classes"),vXe=l(),qn=a("p"),IHe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),qae=a("code"),NHe=o("NewModel"),qHe=o(", make sure you have a "),jae=a("code"),jHe=o("NewModelConfig"),DHe=o(` then you can add those to the auto
classes like this:`),FXe=l(),F(c6.$$.fragment),TXe=l(),WS=a("p"),GHe=o("You will then be able to use the auto classes like you would usually do!"),MXe=l(),F(Df.$$.fragment),EXe=l(),Ii=a("h2"),Gf=a("a"),Dae=a("span"),F(f6.$$.fragment),OHe=l(),Gae=a("span"),VHe=o("AutoConfig"),CXe=l(),Ao=a("div"),F(m6.$$.fragment),XHe=l(),g6=a("p"),zHe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),QS=a("a"),WHe=o("from_pretrained()"),QHe=o(" class method."),HHe=l(),h6=a("p"),UHe=o("This class cannot be instantiated directly using "),Oae=a("code"),JHe=o("__init__()"),YHe=o(" (throws an error)."),KHe=l(),Lr=a("div"),F(p6.$$.fragment),ZHe=l(),Vae=a("p"),eUe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),oUe=l(),Ni=a("p"),rUe=o("The configuration class to instantiate is selected based on the "),Xae=a("code"),tUe=o("model_type"),aUe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),zae=a("code"),nUe=o("pretrained_model_name_or_path"),sUe=o(":"),lUe=l(),A=a("ul"),Of=a("li"),Wae=a("strong"),iUe=o("albert"),dUe=o(" \u2014 "),HS=a("a"),cUe=o("AlbertConfig"),fUe=o(" (ALBERT model)"),mUe=l(),Vf=a("li"),Qae=a("strong"),gUe=o("bart"),hUe=o(" \u2014 "),US=a("a"),pUe=o("BartConfig"),_Ue=o(" (BART model)"),uUe=l(),Xf=a("li"),Hae=a("strong"),bUe=o("beit"),vUe=o(" \u2014 "),JS=a("a"),FUe=o("BeitConfig"),TUe=o(" (BEiT model)"),MUe=l(),zf=a("li"),Uae=a("strong"),EUe=o("bert"),CUe=o(" \u2014 "),YS=a("a"),wUe=o("BertConfig"),AUe=o(" (BERT model)"),LUe=l(),Wf=a("li"),Jae=a("strong"),yUe=o("bert-generation"),xUe=o(" \u2014 "),KS=a("a"),$Ue=o("BertGenerationConfig"),kUe=o(" (Bert Generation model)"),SUe=l(),Qf=a("li"),Yae=a("strong"),RUe=o("big_bird"),PUe=o(" \u2014 "),ZS=a("a"),BUe=o("BigBirdConfig"),IUe=o(" (BigBird model)"),NUe=l(),Hf=a("li"),Kae=a("strong"),qUe=o("bigbird_pegasus"),jUe=o(" \u2014 "),eR=a("a"),DUe=o("BigBirdPegasusConfig"),GUe=o(" (BigBird-Pegasus model)"),OUe=l(),Uf=a("li"),Zae=a("strong"),VUe=o("blenderbot"),XUe=o(" \u2014 "),oR=a("a"),zUe=o("BlenderbotConfig"),WUe=o(" (Blenderbot model)"),QUe=l(),Jf=a("li"),ene=a("strong"),HUe=o("blenderbot-small"),UUe=o(" \u2014 "),rR=a("a"),JUe=o("BlenderbotSmallConfig"),YUe=o(" (BlenderbotSmall model)"),KUe=l(),Yf=a("li"),one=a("strong"),ZUe=o("bloom"),eJe=o(" \u2014 "),tR=a("a"),oJe=o("BloomConfig"),rJe=o(" (BLOOM model)"),tJe=l(),Kf=a("li"),rne=a("strong"),aJe=o("camembert"),nJe=o(" \u2014 "),aR=a("a"),sJe=o("CamembertConfig"),lJe=o(" (CamemBERT model)"),iJe=l(),Zf=a("li"),tne=a("strong"),dJe=o("canine"),cJe=o(" \u2014 "),nR=a("a"),fJe=o("CanineConfig"),mJe=o(" (CANINE model)"),gJe=l(),em=a("li"),ane=a("strong"),hJe=o("clip"),pJe=o(" \u2014 "),sR=a("a"),_Je=o("CLIPConfig"),uJe=o(" (CLIP model)"),bJe=l(),om=a("li"),nne=a("strong"),vJe=o("codegen"),FJe=o(" \u2014 "),lR=a("a"),TJe=o("CodeGenConfig"),MJe=o(" (CodeGen model)"),EJe=l(),rm=a("li"),sne=a("strong"),CJe=o("convbert"),wJe=o(" \u2014 "),iR=a("a"),AJe=o("ConvBertConfig"),LJe=o(" (ConvBERT model)"),yJe=l(),tm=a("li"),lne=a("strong"),xJe=o("convnext"),$Je=o(" \u2014 "),dR=a("a"),kJe=o("ConvNextConfig"),SJe=o(" (ConvNeXT model)"),RJe=l(),am=a("li"),ine=a("strong"),PJe=o("ctrl"),BJe=o(" \u2014 "),cR=a("a"),IJe=o("CTRLConfig"),NJe=o(" (CTRL model)"),qJe=l(),nm=a("li"),dne=a("strong"),jJe=o("cvt"),DJe=o(" \u2014 "),fR=a("a"),GJe=o("CvtConfig"),OJe=o(" (CvT model)"),VJe=l(),sm=a("li"),cne=a("strong"),XJe=o("data2vec-audio"),zJe=o(" \u2014 "),mR=a("a"),WJe=o("Data2VecAudioConfig"),QJe=o(" (Data2VecAudio model)"),HJe=l(),lm=a("li"),fne=a("strong"),UJe=o("data2vec-text"),JJe=o(" \u2014 "),gR=a("a"),YJe=o("Data2VecTextConfig"),KJe=o(" (Data2VecText model)"),ZJe=l(),im=a("li"),mne=a("strong"),eYe=o("data2vec-vision"),oYe=o(" \u2014 "),hR=a("a"),rYe=o("Data2VecVisionConfig"),tYe=o(" (Data2VecVision model)"),aYe=l(),dm=a("li"),gne=a("strong"),nYe=o("deberta"),sYe=o(" \u2014 "),pR=a("a"),lYe=o("DebertaConfig"),iYe=o(" (DeBERTa model)"),dYe=l(),cm=a("li"),hne=a("strong"),cYe=o("deberta-v2"),fYe=o(" \u2014 "),_R=a("a"),mYe=o("DebertaV2Config"),gYe=o(" (DeBERTa-v2 model)"),hYe=l(),fm=a("li"),pne=a("strong"),pYe=o("decision_transformer"),_Ye=o(" \u2014 "),uR=a("a"),uYe=o("DecisionTransformerConfig"),bYe=o(" (Decision Transformer model)"),vYe=l(),mm=a("li"),_ne=a("strong"),FYe=o("deit"),TYe=o(" \u2014 "),bR=a("a"),MYe=o("DeiTConfig"),EYe=o(" (DeiT model)"),CYe=l(),gm=a("li"),une=a("strong"),wYe=o("detr"),AYe=o(" \u2014 "),vR=a("a"),LYe=o("DetrConfig"),yYe=o(" (DETR model)"),xYe=l(),hm=a("li"),bne=a("strong"),$Ye=o("distilbert"),kYe=o(" \u2014 "),FR=a("a"),SYe=o("DistilBertConfig"),RYe=o(" (DistilBERT model)"),PYe=l(),pm=a("li"),vne=a("strong"),BYe=o("dpr"),IYe=o(" \u2014 "),TR=a("a"),NYe=o("DPRConfig"),qYe=o(" (DPR model)"),jYe=l(),_m=a("li"),Fne=a("strong"),DYe=o("dpt"),GYe=o(" \u2014 "),MR=a("a"),OYe=o("DPTConfig"),VYe=o(" (DPT model)"),XYe=l(),um=a("li"),Tne=a("strong"),zYe=o("electra"),WYe=o(" \u2014 "),ER=a("a"),QYe=o("ElectraConfig"),HYe=o(" (ELECTRA model)"),UYe=l(),bm=a("li"),Mne=a("strong"),JYe=o("encoder-decoder"),YYe=o(" \u2014 "),CR=a("a"),KYe=o("EncoderDecoderConfig"),ZYe=o(" (Encoder decoder model)"),eKe=l(),vm=a("li"),Ene=a("strong"),oKe=o("flaubert"),rKe=o(" \u2014 "),wR=a("a"),tKe=o("FlaubertConfig"),aKe=o(" (FlauBERT model)"),nKe=l(),Fm=a("li"),Cne=a("strong"),sKe=o("flava"),lKe=o(" \u2014 "),AR=a("a"),iKe=o("FlavaConfig"),dKe=o(" (FLAVA model)"),cKe=l(),Tm=a("li"),wne=a("strong"),fKe=o("fnet"),mKe=o(" \u2014 "),LR=a("a"),gKe=o("FNetConfig"),hKe=o(" (FNet model)"),pKe=l(),Mm=a("li"),Ane=a("strong"),_Ke=o("fsmt"),uKe=o(" \u2014 "),yR=a("a"),bKe=o("FSMTConfig"),vKe=o(" (FairSeq Machine-Translation model)"),FKe=l(),Em=a("li"),Lne=a("strong"),TKe=o("funnel"),MKe=o(" \u2014 "),xR=a("a"),EKe=o("FunnelConfig"),CKe=o(" (Funnel Transformer model)"),wKe=l(),Cm=a("li"),yne=a("strong"),AKe=o("glpn"),LKe=o(" \u2014 "),$R=a("a"),yKe=o("GLPNConfig"),xKe=o(" (GLPN model)"),$Ke=l(),wm=a("li"),xne=a("strong"),kKe=o("gpt2"),SKe=o(" \u2014 "),kR=a("a"),RKe=o("GPT2Config"),PKe=o(" (OpenAI GPT-2 model)"),BKe=l(),Am=a("li"),$ne=a("strong"),IKe=o("gpt_neo"),NKe=o(" \u2014 "),SR=a("a"),qKe=o("GPTNeoConfig"),jKe=o(" (GPT Neo model)"),DKe=l(),Lm=a("li"),kne=a("strong"),GKe=o("gpt_neox"),OKe=o(" \u2014 "),RR=a("a"),VKe=o("GPTNeoXConfig"),XKe=o(" (GPT NeoX model)"),zKe=l(),ym=a("li"),Sne=a("strong"),WKe=o("gptj"),QKe=o(" \u2014 "),PR=a("a"),HKe=o("GPTJConfig"),UKe=o(" (GPT-J model)"),JKe=l(),xm=a("li"),Rne=a("strong"),YKe=o("groupvit"),KKe=o(" \u2014 "),BR=a("a"),ZKe=o("GroupViTConfig"),eZe=o(" (GroupViT model)"),oZe=l(),$m=a("li"),Pne=a("strong"),rZe=o("hubert"),tZe=o(" \u2014 "),IR=a("a"),aZe=o("HubertConfig"),nZe=o(" (Hubert model)"),sZe=l(),km=a("li"),Bne=a("strong"),lZe=o("ibert"),iZe=o(" \u2014 "),NR=a("a"),dZe=o("IBertConfig"),cZe=o(" (I-BERT model)"),fZe=l(),Sm=a("li"),Ine=a("strong"),mZe=o("imagegpt"),gZe=o(" \u2014 "),qR=a("a"),hZe=o("ImageGPTConfig"),pZe=o(" (ImageGPT model)"),_Ze=l(),Rm=a("li"),Nne=a("strong"),uZe=o("layoutlm"),bZe=o(" \u2014 "),jR=a("a"),vZe=o("LayoutLMConfig"),FZe=o(" (LayoutLM model)"),TZe=l(),Pm=a("li"),qne=a("strong"),MZe=o("layoutlmv2"),EZe=o(" \u2014 "),DR=a("a"),CZe=o("LayoutLMv2Config"),wZe=o(" (LayoutLMv2 model)"),AZe=l(),Bm=a("li"),jne=a("strong"),LZe=o("layoutlmv3"),yZe=o(" \u2014 "),GR=a("a"),xZe=o("LayoutLMv3Config"),$Ze=o(" (LayoutLMv3 model)"),kZe=l(),Im=a("li"),Dne=a("strong"),SZe=o("led"),RZe=o(" \u2014 "),OR=a("a"),PZe=o("LEDConfig"),BZe=o(" (LED model)"),IZe=l(),Nm=a("li"),Gne=a("strong"),NZe=o("levit"),qZe=o(" \u2014 "),VR=a("a"),jZe=o("LevitConfig"),DZe=o(" (LeViT model)"),GZe=l(),qm=a("li"),One=a("strong"),OZe=o("longformer"),VZe=o(" \u2014 "),XR=a("a"),XZe=o("LongformerConfig"),zZe=o(" (Longformer model)"),WZe=l(),jm=a("li"),Vne=a("strong"),QZe=o("longt5"),HZe=o(" \u2014 "),zR=a("a"),UZe=o("LongT5Config"),JZe=o(" (LongT5 model)"),YZe=l(),Dm=a("li"),Xne=a("strong"),KZe=o("luke"),ZZe=o(" \u2014 "),WR=a("a"),eeo=o("LukeConfig"),oeo=o(" (LUKE model)"),reo=l(),Gm=a("li"),zne=a("strong"),teo=o("lxmert"),aeo=o(" \u2014 "),QR=a("a"),neo=o("LxmertConfig"),seo=o(" (LXMERT model)"),leo=l(),Om=a("li"),Wne=a("strong"),ieo=o("m2m_100"),deo=o(" \u2014 "),HR=a("a"),ceo=o("M2M100Config"),feo=o(" (M2M100 model)"),meo=l(),Vm=a("li"),Qne=a("strong"),geo=o("marian"),heo=o(" \u2014 "),UR=a("a"),peo=o("MarianConfig"),_eo=o(" (Marian model)"),ueo=l(),Xm=a("li"),Hne=a("strong"),beo=o("maskformer"),veo=o(" \u2014 "),JR=a("a"),Feo=o("MaskFormerConfig"),Teo=o(" (MaskFormer model)"),Meo=l(),zm=a("li"),Une=a("strong"),Eeo=o("mbart"),Ceo=o(" \u2014 "),YR=a("a"),weo=o("MBartConfig"),Aeo=o(" (mBART model)"),Leo=l(),Wm=a("li"),Jne=a("strong"),yeo=o("mctct"),xeo=o(" \u2014 "),KR=a("a"),$eo=o("MCTCTConfig"),keo=o(" (M-CTC-T model)"),Seo=l(),Qm=a("li"),Yne=a("strong"),Reo=o("megatron-bert"),Peo=o(" \u2014 "),ZR=a("a"),Beo=o("MegatronBertConfig"),Ieo=o(" (Megatron-BERT model)"),Neo=l(),Hm=a("li"),Kne=a("strong"),qeo=o("mobilebert"),jeo=o(" \u2014 "),eP=a("a"),Deo=o("MobileBertConfig"),Geo=o(" (MobileBERT model)"),Oeo=l(),Um=a("li"),Zne=a("strong"),Veo=o("mobilevit"),Xeo=o(" \u2014 "),oP=a("a"),zeo=o("MobileViTConfig"),Weo=o(" (MobileViT model)"),Qeo=l(),Jm=a("li"),ese=a("strong"),Heo=o("mpnet"),Ueo=o(" \u2014 "),rP=a("a"),Jeo=o("MPNetConfig"),Yeo=o(" (MPNet model)"),Keo=l(),Ym=a("li"),ose=a("strong"),Zeo=o("mt5"),eoo=o(" \u2014 "),tP=a("a"),ooo=o("MT5Config"),roo=o(" (MT5 model)"),too=l(),Km=a("li"),rse=a("strong"),aoo=o("mvp"),noo=o(" \u2014 "),aP=a("a"),soo=o("MvpConfig"),loo=o(" (MVP model)"),ioo=l(),Zm=a("li"),tse=a("strong"),doo=o("nezha"),coo=o(" \u2014 "),nP=a("a"),foo=o("NezhaConfig"),moo=o(" (Nezha model)"),goo=l(),eg=a("li"),ase=a("strong"),hoo=o("nystromformer"),poo=o(" \u2014 "),sP=a("a"),_oo=o("NystromformerConfig"),uoo=o(" (Nystr\xF6mformer model)"),boo=l(),og=a("li"),nse=a("strong"),voo=o("openai-gpt"),Foo=o(" \u2014 "),lP=a("a"),Too=o("OpenAIGPTConfig"),Moo=o(" (OpenAI GPT model)"),Eoo=l(),rg=a("li"),sse=a("strong"),Coo=o("opt"),woo=o(" \u2014 "),iP=a("a"),Aoo=o("OPTConfig"),Loo=o(" (OPT model)"),yoo=l(),tg=a("li"),lse=a("strong"),xoo=o("owlvit"),$oo=o(" \u2014 "),dP=a("a"),koo=o("OwlViTConfig"),Soo=o(" (OWL-ViT model)"),Roo=l(),ag=a("li"),ise=a("strong"),Poo=o("pegasus"),Boo=o(" \u2014 "),cP=a("a"),Ioo=o("PegasusConfig"),Noo=o(" (Pegasus model)"),qoo=l(),ng=a("li"),dse=a("strong"),joo=o("perceiver"),Doo=o(" \u2014 "),fP=a("a"),Goo=o("PerceiverConfig"),Ooo=o(" (Perceiver model)"),Voo=l(),sg=a("li"),cse=a("strong"),Xoo=o("plbart"),zoo=o(" \u2014 "),mP=a("a"),Woo=o("PLBartConfig"),Qoo=o(" (PLBart model)"),Hoo=l(),lg=a("li"),fse=a("strong"),Uoo=o("poolformer"),Joo=o(" \u2014 "),gP=a("a"),Yoo=o("PoolFormerConfig"),Koo=o(" (PoolFormer model)"),Zoo=l(),ig=a("li"),mse=a("strong"),ero=o("prophetnet"),oro=o(" \u2014 "),hP=a("a"),rro=o("ProphetNetConfig"),tro=o(" (ProphetNet model)"),aro=l(),dg=a("li"),gse=a("strong"),nro=o("qdqbert"),sro=o(" \u2014 "),pP=a("a"),lro=o("QDQBertConfig"),iro=o(" (QDQBert model)"),dro=l(),cg=a("li"),hse=a("strong"),cro=o("rag"),fro=o(" \u2014 "),_P=a("a"),mro=o("RagConfig"),gro=o(" (RAG model)"),hro=l(),fg=a("li"),pse=a("strong"),pro=o("realm"),_ro=o(" \u2014 "),uP=a("a"),uro=o("RealmConfig"),bro=o(" (REALM model)"),vro=l(),mg=a("li"),_se=a("strong"),Fro=o("reformer"),Tro=o(" \u2014 "),bP=a("a"),Mro=o("ReformerConfig"),Ero=o(" (Reformer model)"),Cro=l(),gg=a("li"),use=a("strong"),wro=o("regnet"),Aro=o(" \u2014 "),vP=a("a"),Lro=o("RegNetConfig"),yro=o(" (RegNet model)"),xro=l(),hg=a("li"),bse=a("strong"),$ro=o("rembert"),kro=o(" \u2014 "),FP=a("a"),Sro=o("RemBertConfig"),Rro=o(" (RemBERT model)"),Pro=l(),pg=a("li"),vse=a("strong"),Bro=o("resnet"),Iro=o(" \u2014 "),TP=a("a"),Nro=o("ResNetConfig"),qro=o(" (ResNet model)"),jro=l(),_g=a("li"),Fse=a("strong"),Dro=o("retribert"),Gro=o(" \u2014 "),MP=a("a"),Oro=o("RetriBertConfig"),Vro=o(" (RetriBERT model)"),Xro=l(),ug=a("li"),Tse=a("strong"),zro=o("roberta"),Wro=o(" \u2014 "),EP=a("a"),Qro=o("RobertaConfig"),Hro=o(" (RoBERTa model)"),Uro=l(),bg=a("li"),Mse=a("strong"),Jro=o("roformer"),Yro=o(" \u2014 "),CP=a("a"),Kro=o("RoFormerConfig"),Zro=o(" (RoFormer model)"),eto=l(),vg=a("li"),Ese=a("strong"),oto=o("segformer"),rto=o(" \u2014 "),wP=a("a"),tto=o("SegformerConfig"),ato=o(" (SegFormer model)"),nto=l(),Fg=a("li"),Cse=a("strong"),sto=o("sew"),lto=o(" \u2014 "),AP=a("a"),ito=o("SEWConfig"),dto=o(" (SEW model)"),cto=l(),Tg=a("li"),wse=a("strong"),fto=o("sew-d"),mto=o(" \u2014 "),LP=a("a"),gto=o("SEWDConfig"),hto=o(" (SEW-D model)"),pto=l(),Mg=a("li"),Ase=a("strong"),_to=o("speech-encoder-decoder"),uto=o(" \u2014 "),yP=a("a"),bto=o("SpeechEncoderDecoderConfig"),vto=o(" (Speech Encoder decoder model)"),Fto=l(),Eg=a("li"),Lse=a("strong"),Tto=o("speech_to_text"),Mto=o(" \u2014 "),xP=a("a"),Eto=o("Speech2TextConfig"),Cto=o(" (Speech2Text model)"),wto=l(),Cg=a("li"),yse=a("strong"),Ato=o("speech_to_text_2"),Lto=o(" \u2014 "),$P=a("a"),yto=o("Speech2Text2Config"),xto=o(" (Speech2Text2 model)"),$to=l(),wg=a("li"),xse=a("strong"),kto=o("splinter"),Sto=o(" \u2014 "),kP=a("a"),Rto=o("SplinterConfig"),Pto=o(" (Splinter model)"),Bto=l(),Ag=a("li"),$se=a("strong"),Ito=o("squeezebert"),Nto=o(" \u2014 "),SP=a("a"),qto=o("SqueezeBertConfig"),jto=o(" (SqueezeBERT model)"),Dto=l(),Lg=a("li"),kse=a("strong"),Gto=o("swin"),Oto=o(" \u2014 "),RP=a("a"),Vto=o("SwinConfig"),Xto=o(" (Swin Transformer model)"),zto=l(),yg=a("li"),Sse=a("strong"),Wto=o("t5"),Qto=o(" \u2014 "),PP=a("a"),Hto=o("T5Config"),Uto=o(" (T5 model)"),Jto=l(),xg=a("li"),Rse=a("strong"),Yto=o("tapas"),Kto=o(" \u2014 "),BP=a("a"),Zto=o("TapasConfig"),eao=o(" (TAPAS model)"),oao=l(),$g=a("li"),Pse=a("strong"),rao=o("trajectory_transformer"),tao=o(" \u2014 "),IP=a("a"),aao=o("TrajectoryTransformerConfig"),nao=o(" (Trajectory Transformer model)"),sao=l(),kg=a("li"),Bse=a("strong"),lao=o("transfo-xl"),iao=o(" \u2014 "),NP=a("a"),dao=o("TransfoXLConfig"),cao=o(" (Transformer-XL model)"),fao=l(),Sg=a("li"),Ise=a("strong"),mao=o("trocr"),gao=o(" \u2014 "),qP=a("a"),hao=o("TrOCRConfig"),pao=o(" (TrOCR model)"),_ao=l(),Rg=a("li"),Nse=a("strong"),uao=o("unispeech"),bao=o(" \u2014 "),jP=a("a"),vao=o("UniSpeechConfig"),Fao=o(" (UniSpeech model)"),Tao=l(),Pg=a("li"),qse=a("strong"),Mao=o("unispeech-sat"),Eao=o(" \u2014 "),DP=a("a"),Cao=o("UniSpeechSatConfig"),wao=o(" (UniSpeechSat model)"),Aao=l(),Bg=a("li"),jse=a("strong"),Lao=o("van"),yao=o(" \u2014 "),GP=a("a"),xao=o("VanConfig"),$ao=o(" (VAN model)"),kao=l(),Ig=a("li"),Dse=a("strong"),Sao=o("vilt"),Rao=o(" \u2014 "),OP=a("a"),Pao=o("ViltConfig"),Bao=o(" (ViLT model)"),Iao=l(),Ng=a("li"),Gse=a("strong"),Nao=o("vision-encoder-decoder"),qao=o(" \u2014 "),VP=a("a"),jao=o("VisionEncoderDecoderConfig"),Dao=o(" (Vision Encoder decoder model)"),Gao=l(),qg=a("li"),Ose=a("strong"),Oao=o("vision-text-dual-encoder"),Vao=o(" \u2014 "),XP=a("a"),Xao=o("VisionTextDualEncoderConfig"),zao=o(" (VisionTextDualEncoder model)"),Wao=l(),jg=a("li"),Vse=a("strong"),Qao=o("visual_bert"),Hao=o(" \u2014 "),zP=a("a"),Uao=o("VisualBertConfig"),Jao=o(" (VisualBERT model)"),Yao=l(),Dg=a("li"),Xse=a("strong"),Kao=o("vit"),Zao=o(" \u2014 "),WP=a("a"),eno=o("ViTConfig"),ono=o(" (ViT model)"),rno=l(),Gg=a("li"),zse=a("strong"),tno=o("vit_mae"),ano=o(" \u2014 "),QP=a("a"),nno=o("ViTMAEConfig"),sno=o(" (ViTMAE model)"),lno=l(),Og=a("li"),Wse=a("strong"),ino=o("wav2vec2"),dno=o(" \u2014 "),HP=a("a"),cno=o("Wav2Vec2Config"),fno=o(" (Wav2Vec2 model)"),mno=l(),Vg=a("li"),Qse=a("strong"),gno=o("wav2vec2-conformer"),hno=o(" \u2014 "),UP=a("a"),pno=o("Wav2Vec2ConformerConfig"),_no=o(" (Wav2Vec2-Conformer model)"),uno=l(),Xg=a("li"),Hse=a("strong"),bno=o("wavlm"),vno=o(" \u2014 "),JP=a("a"),Fno=o("WavLMConfig"),Tno=o(" (WavLM model)"),Mno=l(),zg=a("li"),Use=a("strong"),Eno=o("xglm"),Cno=o(" \u2014 "),YP=a("a"),wno=o("XGLMConfig"),Ano=o(" (XGLM model)"),Lno=l(),Wg=a("li"),Jse=a("strong"),yno=o("xlm"),xno=o(" \u2014 "),KP=a("a"),$no=o("XLMConfig"),kno=o(" (XLM model)"),Sno=l(),Qg=a("li"),Yse=a("strong"),Rno=o("xlm-prophetnet"),Pno=o(" \u2014 "),ZP=a("a"),Bno=o("XLMProphetNetConfig"),Ino=o(" (XLM-ProphetNet model)"),Nno=l(),Hg=a("li"),Kse=a("strong"),qno=o("xlm-roberta"),jno=o(" \u2014 "),eB=a("a"),Dno=o("XLMRobertaConfig"),Gno=o(" (XLM-RoBERTa model)"),Ono=l(),Ug=a("li"),Zse=a("strong"),Vno=o("xlm-roberta-xl"),Xno=o(" \u2014 "),oB=a("a"),zno=o("XLMRobertaXLConfig"),Wno=o(" (XLM-RoBERTa-XL model)"),Qno=l(),Jg=a("li"),ele=a("strong"),Hno=o("xlnet"),Uno=o(" \u2014 "),rB=a("a"),Jno=o("XLNetConfig"),Yno=o(" (XLNet model)"),Kno=l(),Yg=a("li"),ole=a("strong"),Zno=o("yolos"),eso=o(" \u2014 "),tB=a("a"),oso=o("YolosConfig"),rso=o(" (YOLOS model)"),tso=l(),Kg=a("li"),rle=a("strong"),aso=o("yoso"),nso=o(" \u2014 "),aB=a("a"),sso=o("YosoConfig"),lso=o(" (YOSO model)"),iso=l(),F(Zg.$$.fragment),dso=l(),eh=a("div"),F(_6.$$.fragment),cso=l(),tle=a("p"),fso=o("Register a new configuration for this class."),wXe=l(),qi=a("h2"),oh=a("a"),ale=a("span"),F(u6.$$.fragment),mso=l(),nle=a("span"),gso=o("AutoTokenizer"),AXe=l(),Lo=a("div"),F(b6.$$.fragment),hso=l(),v6=a("p"),pso=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),nB=a("a"),_so=o("AutoTokenizer.from_pretrained()"),uso=o(" class method."),bso=l(),F6=a("p"),vso=o("This class cannot be instantiated directly using "),sle=a("code"),Fso=o("__init__()"),Tso=o(" (throws an error)."),Mso=l(),yr=a("div"),F(T6.$$.fragment),Eso=l(),lle=a("p"),Cso=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),wso=l(),Pa=a("p"),Aso=o("The tokenizer class to instantiate is selected based on the "),ile=a("code"),Lso=o("model_type"),yso=o(` property of the config object (either
passed as an argument or loaded from `),dle=a("code"),xso=o("pretrained_model_name_or_path"),$so=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cle=a("code"),kso=o("pretrained_model_name_or_path"),Sso=o(":"),Rso=l(),k=a("ul"),jn=a("li"),fle=a("strong"),Pso=o("albert"),Bso=o(" \u2014 "),sB=a("a"),Iso=o("AlbertTokenizer"),Nso=o(" or "),lB=a("a"),qso=o("AlbertTokenizerFast"),jso=o(" (ALBERT model)"),Dso=l(),Dn=a("li"),mle=a("strong"),Gso=o("bart"),Oso=o(" \u2014 "),iB=a("a"),Vso=o("BartTokenizer"),Xso=o(" or "),dB=a("a"),zso=o("BartTokenizerFast"),Wso=o(" (BART model)"),Qso=l(),Gn=a("li"),gle=a("strong"),Hso=o("barthez"),Uso=o(" \u2014 "),cB=a("a"),Jso=o("BarthezTokenizer"),Yso=o(" or "),fB=a("a"),Kso=o("BarthezTokenizerFast"),Zso=o(" (BARThez model)"),elo=l(),rh=a("li"),hle=a("strong"),olo=o("bartpho"),rlo=o(" \u2014 "),mB=a("a"),tlo=o("BartphoTokenizer"),alo=o(" (BARTpho model)"),nlo=l(),On=a("li"),ple=a("strong"),slo=o("bert"),llo=o(" \u2014 "),gB=a("a"),ilo=o("BertTokenizer"),dlo=o(" or "),hB=a("a"),clo=o("BertTokenizerFast"),flo=o(" (BERT model)"),mlo=l(),th=a("li"),_le=a("strong"),glo=o("bert-generation"),hlo=o(" \u2014 "),pB=a("a"),plo=o("BertGenerationTokenizer"),_lo=o(" (Bert Generation model)"),ulo=l(),ah=a("li"),ule=a("strong"),blo=o("bert-japanese"),vlo=o(" \u2014 "),_B=a("a"),Flo=o("BertJapaneseTokenizer"),Tlo=o(" (BertJapanese model)"),Mlo=l(),nh=a("li"),ble=a("strong"),Elo=o("bertweet"),Clo=o(" \u2014 "),uB=a("a"),wlo=o("BertweetTokenizer"),Alo=o(" (BERTweet model)"),Llo=l(),Vn=a("li"),vle=a("strong"),ylo=o("big_bird"),xlo=o(" \u2014 "),bB=a("a"),$lo=o("BigBirdTokenizer"),klo=o(" or "),vB=a("a"),Slo=o("BigBirdTokenizerFast"),Rlo=o(" (BigBird model)"),Plo=l(),Xn=a("li"),Fle=a("strong"),Blo=o("bigbird_pegasus"),Ilo=o(" \u2014 "),FB=a("a"),Nlo=o("PegasusTokenizer"),qlo=o(" or "),TB=a("a"),jlo=o("PegasusTokenizerFast"),Dlo=o(" (BigBird-Pegasus model)"),Glo=l(),zn=a("li"),Tle=a("strong"),Olo=o("blenderbot"),Vlo=o(" \u2014 "),MB=a("a"),Xlo=o("BlenderbotTokenizer"),zlo=o(" or "),EB=a("a"),Wlo=o("BlenderbotTokenizerFast"),Qlo=o(" (Blenderbot model)"),Hlo=l(),sh=a("li"),Mle=a("strong"),Ulo=o("blenderbot-small"),Jlo=o(" \u2014 "),CB=a("a"),Ylo=o("BlenderbotSmallTokenizer"),Klo=o(" (BlenderbotSmall model)"),Zlo=l(),lh=a("li"),Ele=a("strong"),eio=o("bloom"),oio=o(" \u2014 "),wB=a("a"),rio=o("BloomTokenizerFast"),tio=o(" (BLOOM model)"),aio=l(),ih=a("li"),Cle=a("strong"),nio=o("byt5"),sio=o(" \u2014 "),AB=a("a"),lio=o("ByT5Tokenizer"),iio=o(" (ByT5 model)"),dio=l(),Wn=a("li"),wle=a("strong"),cio=o("camembert"),fio=o(" \u2014 "),LB=a("a"),mio=o("CamembertTokenizer"),gio=o(" or "),yB=a("a"),hio=o("CamembertTokenizerFast"),pio=o(" (CamemBERT model)"),_io=l(),dh=a("li"),Ale=a("strong"),uio=o("canine"),bio=o(" \u2014 "),xB=a("a"),vio=o("CanineTokenizer"),Fio=o(" (CANINE model)"),Tio=l(),Qn=a("li"),Lle=a("strong"),Mio=o("clip"),Eio=o(" \u2014 "),$B=a("a"),Cio=o("CLIPTokenizer"),wio=o(" or "),kB=a("a"),Aio=o("CLIPTokenizerFast"),Lio=o(" (CLIP model)"),yio=l(),Hn=a("li"),yle=a("strong"),xio=o("codegen"),$io=o(" \u2014 "),SB=a("a"),kio=o("CodeGenTokenizer"),Sio=o(" or "),RB=a("a"),Rio=o("CodeGenTokenizerFast"),Pio=o(" (CodeGen model)"),Bio=l(),Un=a("li"),xle=a("strong"),Iio=o("convbert"),Nio=o(" \u2014 "),PB=a("a"),qio=o("ConvBertTokenizer"),jio=o(" or "),BB=a("a"),Dio=o("ConvBertTokenizerFast"),Gio=o(" (ConvBERT model)"),Oio=l(),Jn=a("li"),$le=a("strong"),Vio=o("cpm"),Xio=o(" \u2014 "),IB=a("a"),zio=o("CpmTokenizer"),Wio=o(" or "),NB=a("a"),Qio=o("CpmTokenizerFast"),Hio=o(" (CPM model)"),Uio=l(),ch=a("li"),kle=a("strong"),Jio=o("ctrl"),Yio=o(" \u2014 "),qB=a("a"),Kio=o("CTRLTokenizer"),Zio=o(" (CTRL model)"),edo=l(),Yn=a("li"),Sle=a("strong"),odo=o("data2vec-text"),rdo=o(" \u2014 "),jB=a("a"),tdo=o("RobertaTokenizer"),ado=o(" or "),DB=a("a"),ndo=o("RobertaTokenizerFast"),sdo=o(" (Data2VecText model)"),ldo=l(),Kn=a("li"),Rle=a("strong"),ido=o("deberta"),ddo=o(" \u2014 "),GB=a("a"),cdo=o("DebertaTokenizer"),fdo=o(" or "),OB=a("a"),mdo=o("DebertaTokenizerFast"),gdo=o(" (DeBERTa model)"),hdo=l(),Zn=a("li"),Ple=a("strong"),pdo=o("deberta-v2"),_do=o(" \u2014 "),VB=a("a"),udo=o("DebertaV2Tokenizer"),bdo=o(" or "),XB=a("a"),vdo=o("DebertaV2TokenizerFast"),Fdo=o(" (DeBERTa-v2 model)"),Tdo=l(),es=a("li"),Ble=a("strong"),Mdo=o("distilbert"),Edo=o(" \u2014 "),zB=a("a"),Cdo=o("DistilBertTokenizer"),wdo=o(" or "),WB=a("a"),Ado=o("DistilBertTokenizerFast"),Ldo=o(" (DistilBERT model)"),ydo=l(),os=a("li"),Ile=a("strong"),xdo=o("dpr"),$do=o(" \u2014 "),QB=a("a"),kdo=o("DPRQuestionEncoderTokenizer"),Sdo=o(" or "),HB=a("a"),Rdo=o("DPRQuestionEncoderTokenizerFast"),Pdo=o(" (DPR model)"),Bdo=l(),rs=a("li"),Nle=a("strong"),Ido=o("electra"),Ndo=o(" \u2014 "),UB=a("a"),qdo=o("ElectraTokenizer"),jdo=o(" or "),JB=a("a"),Ddo=o("ElectraTokenizerFast"),Gdo=o(" (ELECTRA model)"),Odo=l(),fh=a("li"),qle=a("strong"),Vdo=o("flaubert"),Xdo=o(" \u2014 "),YB=a("a"),zdo=o("FlaubertTokenizer"),Wdo=o(" (FlauBERT model)"),Qdo=l(),ts=a("li"),jle=a("strong"),Hdo=o("fnet"),Udo=o(" \u2014 "),KB=a("a"),Jdo=o("FNetTokenizer"),Ydo=o(" or "),ZB=a("a"),Kdo=o("FNetTokenizerFast"),Zdo=o(" (FNet model)"),eco=l(),mh=a("li"),Dle=a("strong"),oco=o("fsmt"),rco=o(" \u2014 "),eI=a("a"),tco=o("FSMTTokenizer"),aco=o(" (FairSeq Machine-Translation model)"),nco=l(),as=a("li"),Gle=a("strong"),sco=o("funnel"),lco=o(" \u2014 "),oI=a("a"),ico=o("FunnelTokenizer"),dco=o(" or "),rI=a("a"),cco=o("FunnelTokenizerFast"),fco=o(" (Funnel Transformer model)"),mco=l(),ns=a("li"),Ole=a("strong"),gco=o("gpt2"),hco=o(" \u2014 "),tI=a("a"),pco=o("GPT2Tokenizer"),_co=o(" or "),aI=a("a"),uco=o("GPT2TokenizerFast"),bco=o(" (OpenAI GPT-2 model)"),vco=l(),ss=a("li"),Vle=a("strong"),Fco=o("gpt_neo"),Tco=o(" \u2014 "),nI=a("a"),Mco=o("GPT2Tokenizer"),Eco=o(" or "),sI=a("a"),Cco=o("GPT2TokenizerFast"),wco=o(" (GPT Neo model)"),Aco=l(),gh=a("li"),Xle=a("strong"),Lco=o("gpt_neox"),yco=o(" \u2014 "),lI=a("a"),xco=o("GPTNeoXTokenizerFast"),$co=o(" (GPT NeoX model)"),kco=l(),ls=a("li"),zle=a("strong"),Sco=o("gptj"),Rco=o(" \u2014 "),iI=a("a"),Pco=o("GPT2Tokenizer"),Bco=o(" or "),dI=a("a"),Ico=o("GPT2TokenizerFast"),Nco=o(" (GPT-J model)"),qco=l(),is=a("li"),Wle=a("strong"),jco=o("groupvit"),Dco=o(" \u2014 "),cI=a("a"),Gco=o("CLIPTokenizer"),Oco=o(" or "),fI=a("a"),Vco=o("CLIPTokenizerFast"),Xco=o(" (GroupViT model)"),zco=l(),ds=a("li"),Qle=a("strong"),Wco=o("herbert"),Qco=o(" \u2014 "),mI=a("a"),Hco=o("HerbertTokenizer"),Uco=o(" or "),gI=a("a"),Jco=o("HerbertTokenizerFast"),Yco=o(" (HerBERT model)"),Kco=l(),hh=a("li"),Hle=a("strong"),Zco=o("hubert"),efo=o(" \u2014 "),hI=a("a"),ofo=o("Wav2Vec2CTCTokenizer"),rfo=o(" (Hubert model)"),tfo=l(),cs=a("li"),Ule=a("strong"),afo=o("ibert"),nfo=o(" \u2014 "),pI=a("a"),sfo=o("RobertaTokenizer"),lfo=o(" or "),_I=a("a"),ifo=o("RobertaTokenizerFast"),dfo=o(" (I-BERT model)"),cfo=l(),fs=a("li"),Jle=a("strong"),ffo=o("layoutlm"),mfo=o(" \u2014 "),uI=a("a"),gfo=o("LayoutLMTokenizer"),hfo=o(" or "),bI=a("a"),pfo=o("LayoutLMTokenizerFast"),_fo=o(" (LayoutLM model)"),ufo=l(),ms=a("li"),Yle=a("strong"),bfo=o("layoutlmv2"),vfo=o(" \u2014 "),vI=a("a"),Ffo=o("LayoutLMv2Tokenizer"),Tfo=o(" or "),FI=a("a"),Mfo=o("LayoutLMv2TokenizerFast"),Efo=o(" (LayoutLMv2 model)"),Cfo=l(),gs=a("li"),Kle=a("strong"),wfo=o("layoutlmv3"),Afo=o(" \u2014 "),TI=a("a"),Lfo=o("LayoutLMv3Tokenizer"),yfo=o(" or "),MI=a("a"),xfo=o("LayoutLMv3TokenizerFast"),$fo=o(" (LayoutLMv3 model)"),kfo=l(),hs=a("li"),Zle=a("strong"),Sfo=o("layoutxlm"),Rfo=o(" \u2014 "),EI=a("a"),Pfo=o("LayoutXLMTokenizer"),Bfo=o(" or "),CI=a("a"),Ifo=o("LayoutXLMTokenizerFast"),Nfo=o(" (LayoutXLM model)"),qfo=l(),ps=a("li"),eie=a("strong"),jfo=o("led"),Dfo=o(" \u2014 "),wI=a("a"),Gfo=o("LEDTokenizer"),Ofo=o(" or "),AI=a("a"),Vfo=o("LEDTokenizerFast"),Xfo=o(" (LED model)"),zfo=l(),_s=a("li"),oie=a("strong"),Wfo=o("longformer"),Qfo=o(" \u2014 "),LI=a("a"),Hfo=o("LongformerTokenizer"),Ufo=o(" or "),yI=a("a"),Jfo=o("LongformerTokenizerFast"),Yfo=o(" (Longformer model)"),Kfo=l(),us=a("li"),rie=a("strong"),Zfo=o("longt5"),emo=o(" \u2014 "),xI=a("a"),omo=o("T5Tokenizer"),rmo=o(" or "),$I=a("a"),tmo=o("T5TokenizerFast"),amo=o(" (LongT5 model)"),nmo=l(),ph=a("li"),tie=a("strong"),smo=o("luke"),lmo=o(" \u2014 "),kI=a("a"),imo=o("LukeTokenizer"),dmo=o(" (LUKE model)"),cmo=l(),bs=a("li"),aie=a("strong"),fmo=o("lxmert"),mmo=o(" \u2014 "),SI=a("a"),gmo=o("LxmertTokenizer"),hmo=o(" or "),RI=a("a"),pmo=o("LxmertTokenizerFast"),_mo=o(" (LXMERT model)"),umo=l(),_h=a("li"),nie=a("strong"),bmo=o("m2m_100"),vmo=o(" \u2014 "),PI=a("a"),Fmo=o("M2M100Tokenizer"),Tmo=o(" (M2M100 model)"),Mmo=l(),uh=a("li"),sie=a("strong"),Emo=o("marian"),Cmo=o(" \u2014 "),BI=a("a"),wmo=o("MarianTokenizer"),Amo=o(" (Marian model)"),Lmo=l(),vs=a("li"),lie=a("strong"),ymo=o("mbart"),xmo=o(" \u2014 "),II=a("a"),$mo=o("MBartTokenizer"),kmo=o(" or "),NI=a("a"),Smo=o("MBartTokenizerFast"),Rmo=o(" (mBART model)"),Pmo=l(),Fs=a("li"),iie=a("strong"),Bmo=o("mbart50"),Imo=o(" \u2014 "),qI=a("a"),Nmo=o("MBart50Tokenizer"),qmo=o(" or "),jI=a("a"),jmo=o("MBart50TokenizerFast"),Dmo=o(" (mBART-50 model)"),Gmo=l(),Ts=a("li"),die=a("strong"),Omo=o("megatron-bert"),Vmo=o(" \u2014 "),DI=a("a"),Xmo=o("BertTokenizer"),zmo=o(" or "),GI=a("a"),Wmo=o("BertTokenizerFast"),Qmo=o(" (Megatron-BERT model)"),Hmo=l(),bh=a("li"),cie=a("strong"),Umo=o("mluke"),Jmo=o(" \u2014 "),OI=a("a"),Ymo=o("MLukeTokenizer"),Kmo=o(" (mLUKE model)"),Zmo=l(),Ms=a("li"),fie=a("strong"),ego=o("mobilebert"),ogo=o(" \u2014 "),VI=a("a"),rgo=o("MobileBertTokenizer"),tgo=o(" or "),XI=a("a"),ago=o("MobileBertTokenizerFast"),ngo=o(" (MobileBERT model)"),sgo=l(),Es=a("li"),mie=a("strong"),lgo=o("mpnet"),igo=o(" \u2014 "),zI=a("a"),dgo=o("MPNetTokenizer"),cgo=o(" or "),WI=a("a"),fgo=o("MPNetTokenizerFast"),mgo=o(" (MPNet model)"),ggo=l(),Cs=a("li"),gie=a("strong"),hgo=o("mt5"),pgo=o(" \u2014 "),QI=a("a"),_go=o("MT5Tokenizer"),ugo=o(" or "),HI=a("a"),bgo=o("MT5TokenizerFast"),vgo=o(" (MT5 model)"),Fgo=l(),ws=a("li"),hie=a("strong"),Tgo=o("mvp"),Mgo=o(" \u2014 "),UI=a("a"),Ego=o("MvpTokenizer"),Cgo=o(" or "),JI=a("a"),wgo=o("MvpTokenizerFast"),Ago=o(" (MVP model)"),Lgo=l(),As=a("li"),pie=a("strong"),ygo=o("nezha"),xgo=o(" \u2014 "),YI=a("a"),$go=o("BertTokenizer"),kgo=o(" or "),KI=a("a"),Sgo=o("BertTokenizerFast"),Rgo=o(" (Nezha model)"),Pgo=l(),Ls=a("li"),_ie=a("strong"),Bgo=o("nystromformer"),Igo=o(" \u2014 "),ZI=a("a"),Ngo=o("AlbertTokenizer"),qgo=o(" or "),eN=a("a"),jgo=o("AlbertTokenizerFast"),Dgo=o(" (Nystr\xF6mformer model)"),Ggo=l(),ys=a("li"),uie=a("strong"),Ogo=o("openai-gpt"),Vgo=o(" \u2014 "),oN=a("a"),Xgo=o("OpenAIGPTTokenizer"),zgo=o(" or "),rN=a("a"),Wgo=o("OpenAIGPTTokenizerFast"),Qgo=o(" (OpenAI GPT model)"),Hgo=l(),vh=a("li"),bie=a("strong"),Ugo=o("opt"),Jgo=o(" \u2014 "),tN=a("a"),Ygo=o("GPT2Tokenizer"),Kgo=o(" (OPT model)"),Zgo=l(),xs=a("li"),vie=a("strong"),eho=o("owlvit"),oho=o(" \u2014 "),aN=a("a"),rho=o("CLIPTokenizer"),tho=o(" or "),nN=a("a"),aho=o("CLIPTokenizerFast"),nho=o(" (OWL-ViT model)"),sho=l(),$s=a("li"),Fie=a("strong"),lho=o("pegasus"),iho=o(" \u2014 "),sN=a("a"),dho=o("PegasusTokenizer"),cho=o(" or "),lN=a("a"),fho=o("PegasusTokenizerFast"),mho=o(" (Pegasus model)"),gho=l(),Fh=a("li"),Tie=a("strong"),hho=o("perceiver"),pho=o(" \u2014 "),iN=a("a"),_ho=o("PerceiverTokenizer"),uho=o(" (Perceiver model)"),bho=l(),Th=a("li"),Mie=a("strong"),vho=o("phobert"),Fho=o(" \u2014 "),dN=a("a"),Tho=o("PhobertTokenizer"),Mho=o(" (PhoBERT model)"),Eho=l(),Mh=a("li"),Eie=a("strong"),Cho=o("plbart"),who=o(" \u2014 "),cN=a("a"),Aho=o("PLBartTokenizer"),Lho=o(" (PLBart model)"),yho=l(),Eh=a("li"),Cie=a("strong"),xho=o("prophetnet"),$ho=o(" \u2014 "),fN=a("a"),kho=o("ProphetNetTokenizer"),Sho=o(" (ProphetNet model)"),Rho=l(),ks=a("li"),wie=a("strong"),Pho=o("qdqbert"),Bho=o(" \u2014 "),mN=a("a"),Iho=o("BertTokenizer"),Nho=o(" or "),gN=a("a"),qho=o("BertTokenizerFast"),jho=o(" (QDQBert model)"),Dho=l(),Ch=a("li"),Aie=a("strong"),Gho=o("rag"),Oho=o(" \u2014 "),hN=a("a"),Vho=o("RagTokenizer"),Xho=o(" (RAG model)"),zho=l(),Ss=a("li"),Lie=a("strong"),Who=o("realm"),Qho=o(" \u2014 "),pN=a("a"),Hho=o("RealmTokenizer"),Uho=o(" or "),_N=a("a"),Jho=o("RealmTokenizerFast"),Yho=o(" (REALM model)"),Kho=l(),Rs=a("li"),yie=a("strong"),Zho=o("reformer"),epo=o(" \u2014 "),uN=a("a"),opo=o("ReformerTokenizer"),rpo=o(" or "),bN=a("a"),tpo=o("ReformerTokenizerFast"),apo=o(" (Reformer model)"),npo=l(),Ps=a("li"),xie=a("strong"),spo=o("rembert"),lpo=o(" \u2014 "),vN=a("a"),ipo=o("RemBertTokenizer"),dpo=o(" or "),FN=a("a"),cpo=o("RemBertTokenizerFast"),fpo=o(" (RemBERT model)"),mpo=l(),Bs=a("li"),$ie=a("strong"),gpo=o("retribert"),hpo=o(" \u2014 "),TN=a("a"),ppo=o("RetriBertTokenizer"),_po=o(" or "),MN=a("a"),upo=o("RetriBertTokenizerFast"),bpo=o(" (RetriBERT model)"),vpo=l(),Is=a("li"),kie=a("strong"),Fpo=o("roberta"),Tpo=o(" \u2014 "),EN=a("a"),Mpo=o("RobertaTokenizer"),Epo=o(" or "),CN=a("a"),Cpo=o("RobertaTokenizerFast"),wpo=o(" (RoBERTa model)"),Apo=l(),Ns=a("li"),Sie=a("strong"),Lpo=o("roformer"),ypo=o(" \u2014 "),wN=a("a"),xpo=o("RoFormerTokenizer"),$po=o(" or "),AN=a("a"),kpo=o("RoFormerTokenizerFast"),Spo=o(" (RoFormer model)"),Rpo=l(),wh=a("li"),Rie=a("strong"),Ppo=o("speech_to_text"),Bpo=o(" \u2014 "),LN=a("a"),Ipo=o("Speech2TextTokenizer"),Npo=o(" (Speech2Text model)"),qpo=l(),Ah=a("li"),Pie=a("strong"),jpo=o("speech_to_text_2"),Dpo=o(" \u2014 "),yN=a("a"),Gpo=o("Speech2Text2Tokenizer"),Opo=o(" (Speech2Text2 model)"),Vpo=l(),qs=a("li"),Bie=a("strong"),Xpo=o("splinter"),zpo=o(" \u2014 "),xN=a("a"),Wpo=o("SplinterTokenizer"),Qpo=o(" or "),$N=a("a"),Hpo=o("SplinterTokenizerFast"),Upo=o(" (Splinter model)"),Jpo=l(),js=a("li"),Iie=a("strong"),Ypo=o("squeezebert"),Kpo=o(" \u2014 "),kN=a("a"),Zpo=o("SqueezeBertTokenizer"),e_o=o(" or "),SN=a("a"),o_o=o("SqueezeBertTokenizerFast"),r_o=o(" (SqueezeBERT model)"),t_o=l(),Ds=a("li"),Nie=a("strong"),a_o=o("t5"),n_o=o(" \u2014 "),RN=a("a"),s_o=o("T5Tokenizer"),l_o=o(" or "),PN=a("a"),i_o=o("T5TokenizerFast"),d_o=o(" (T5 model)"),c_o=l(),Lh=a("li"),qie=a("strong"),f_o=o("tapas"),m_o=o(" \u2014 "),BN=a("a"),g_o=o("TapasTokenizer"),h_o=o(" (TAPAS model)"),p_o=l(),yh=a("li"),jie=a("strong"),__o=o("tapex"),u_o=o(" \u2014 "),IN=a("a"),b_o=o("TapexTokenizer"),v_o=o(" (TAPEX model)"),F_o=l(),xh=a("li"),Die=a("strong"),T_o=o("transfo-xl"),M_o=o(" \u2014 "),NN=a("a"),E_o=o("TransfoXLTokenizer"),C_o=o(" (Transformer-XL model)"),w_o=l(),Gs=a("li"),Gie=a("strong"),A_o=o("vilt"),L_o=o(" \u2014 "),qN=a("a"),y_o=o("BertTokenizer"),x_o=o(" or "),jN=a("a"),$_o=o("BertTokenizerFast"),k_o=o(" (ViLT model)"),S_o=l(),Os=a("li"),Oie=a("strong"),R_o=o("visual_bert"),P_o=o(" \u2014 "),DN=a("a"),B_o=o("BertTokenizer"),I_o=o(" or "),GN=a("a"),N_o=o("BertTokenizerFast"),q_o=o(" (VisualBERT model)"),j_o=l(),$h=a("li"),Vie=a("strong"),D_o=o("wav2vec2"),G_o=o(" \u2014 "),ON=a("a"),O_o=o("Wav2Vec2CTCTokenizer"),V_o=o(" (Wav2Vec2 model)"),X_o=l(),kh=a("li"),Xie=a("strong"),z_o=o("wav2vec2-conformer"),W_o=o(" \u2014 "),VN=a("a"),Q_o=o("Wav2Vec2CTCTokenizer"),H_o=o(" (Wav2Vec2-Conformer model)"),U_o=l(),Sh=a("li"),zie=a("strong"),J_o=o("wav2vec2_phoneme"),Y_o=o(" \u2014 "),XN=a("a"),K_o=o("Wav2Vec2PhonemeCTCTokenizer"),Z_o=o(" (Wav2Vec2Phoneme model)"),euo=l(),Vs=a("li"),Wie=a("strong"),ouo=o("xglm"),ruo=o(" \u2014 "),zN=a("a"),tuo=o("XGLMTokenizer"),auo=o(" or "),WN=a("a"),nuo=o("XGLMTokenizerFast"),suo=o(" (XGLM model)"),luo=l(),Rh=a("li"),Qie=a("strong"),iuo=o("xlm"),duo=o(" \u2014 "),QN=a("a"),cuo=o("XLMTokenizer"),fuo=o(" (XLM model)"),muo=l(),Ph=a("li"),Hie=a("strong"),guo=o("xlm-prophetnet"),huo=o(" \u2014 "),HN=a("a"),puo=o("XLMProphetNetTokenizer"),_uo=o(" (XLM-ProphetNet model)"),uuo=l(),Xs=a("li"),Uie=a("strong"),buo=o("xlm-roberta"),vuo=o(" \u2014 "),UN=a("a"),Fuo=o("XLMRobertaTokenizer"),Tuo=o(" or "),JN=a("a"),Muo=o("XLMRobertaTokenizerFast"),Euo=o(" (XLM-RoBERTa model)"),Cuo=l(),zs=a("li"),Jie=a("strong"),wuo=o("xlm-roberta-xl"),Auo=o(" \u2014 "),YN=a("a"),Luo=o("RobertaTokenizer"),yuo=o(" or "),KN=a("a"),xuo=o("RobertaTokenizerFast"),$uo=o(" (XLM-RoBERTa-XL model)"),kuo=l(),Ws=a("li"),Yie=a("strong"),Suo=o("xlnet"),Ruo=o(" \u2014 "),ZN=a("a"),Puo=o("XLNetTokenizer"),Buo=o(" or "),eq=a("a"),Iuo=o("XLNetTokenizerFast"),Nuo=o(" (XLNet model)"),quo=l(),Qs=a("li"),Kie=a("strong"),juo=o("yoso"),Duo=o(" \u2014 "),oq=a("a"),Guo=o("AlbertTokenizer"),Ouo=o(" or "),rq=a("a"),Vuo=o("AlbertTokenizerFast"),Xuo=o(" (YOSO model)"),zuo=l(),F(Bh.$$.fragment),Wuo=l(),Ih=a("div"),F(M6.$$.fragment),Quo=l(),Zie=a("p"),Huo=o("Register a new tokenizer in this mapping."),LXe=l(),ji=a("h2"),Nh=a("a"),ede=a("span"),F(E6.$$.fragment),Uuo=l(),ode=a("span"),Juo=o("AutoFeatureExtractor"),yXe=l(),yo=a("div"),F(C6.$$.fragment),Yuo=l(),w6=a("p"),Kuo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),tq=a("a"),Zuo=o("AutoFeatureExtractor.from_pretrained()"),e1o=o(" class method."),o1o=l(),A6=a("p"),r1o=o("This class cannot be instantiated directly using "),rde=a("code"),t1o=o("__init__()"),a1o=o(" (throws an error)."),n1o=l(),Ue=a("div"),F(L6.$$.fragment),s1o=l(),tde=a("p"),l1o=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),i1o=l(),Ba=a("p"),d1o=o("The feature extractor class to instantiate is selected based on the "),ade=a("code"),c1o=o("model_type"),f1o=o(` property of the config object
(either passed as an argument or loaded from `),nde=a("code"),m1o=o("pretrained_model_name_or_path"),g1o=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),sde=a("code"),h1o=o("pretrained_model_name_or_path"),p1o=o(":"),_1o=l(),J=a("ul"),qh=a("li"),lde=a("strong"),u1o=o("beit"),b1o=o(" \u2014 "),aq=a("a"),v1o=o("BeitFeatureExtractor"),F1o=o(" (BEiT model)"),T1o=l(),jh=a("li"),ide=a("strong"),M1o=o("clip"),E1o=o(" \u2014 "),nq=a("a"),C1o=o("CLIPFeatureExtractor"),w1o=o(" (CLIP model)"),A1o=l(),Dh=a("li"),dde=a("strong"),L1o=o("convnext"),y1o=o(" \u2014 "),sq=a("a"),x1o=o("ConvNextFeatureExtractor"),$1o=o(" (ConvNeXT model)"),k1o=l(),Gh=a("li"),cde=a("strong"),S1o=o("cvt"),R1o=o(" \u2014 "),lq=a("a"),P1o=o("ConvNextFeatureExtractor"),B1o=o(" (CvT model)"),I1o=l(),Oh=a("li"),fde=a("strong"),N1o=o("data2vec-audio"),q1o=o(" \u2014 "),iq=a("a"),j1o=o("Wav2Vec2FeatureExtractor"),D1o=o(" (Data2VecAudio model)"),G1o=l(),Vh=a("li"),mde=a("strong"),O1o=o("data2vec-vision"),V1o=o(" \u2014 "),dq=a("a"),X1o=o("BeitFeatureExtractor"),z1o=o(" (Data2VecVision model)"),W1o=l(),Xh=a("li"),gde=a("strong"),Q1o=o("deit"),H1o=o(" \u2014 "),cq=a("a"),U1o=o("DeiTFeatureExtractor"),J1o=o(" (DeiT model)"),Y1o=l(),zh=a("li"),hde=a("strong"),K1o=o("detr"),Z1o=o(" \u2014 "),fq=a("a"),e2o=o("DetrFeatureExtractor"),o2o=o(" (DETR model)"),r2o=l(),Wh=a("li"),pde=a("strong"),t2o=o("dpt"),a2o=o(" \u2014 "),mq=a("a"),n2o=o("DPTFeatureExtractor"),s2o=o(" (DPT model)"),l2o=l(),Qh=a("li"),_de=a("strong"),i2o=o("flava"),d2o=o(" \u2014 "),gq=a("a"),c2o=o("FlavaFeatureExtractor"),f2o=o(" (FLAVA model)"),m2o=l(),Hh=a("li"),ude=a("strong"),g2o=o("glpn"),h2o=o(" \u2014 "),hq=a("a"),p2o=o("GLPNFeatureExtractor"),_2o=o(" (GLPN model)"),u2o=l(),Uh=a("li"),bde=a("strong"),b2o=o("groupvit"),v2o=o(" \u2014 "),pq=a("a"),F2o=o("CLIPFeatureExtractor"),T2o=o(" (GroupViT model)"),M2o=l(),Jh=a("li"),vde=a("strong"),E2o=o("hubert"),C2o=o(" \u2014 "),_q=a("a"),w2o=o("Wav2Vec2FeatureExtractor"),A2o=o(" (Hubert model)"),L2o=l(),Yh=a("li"),Fde=a("strong"),y2o=o("imagegpt"),x2o=o(" \u2014 "),uq=a("a"),$2o=o("ImageGPTFeatureExtractor"),k2o=o(" (ImageGPT model)"),S2o=l(),Kh=a("li"),Tde=a("strong"),R2o=o("layoutlmv2"),P2o=o(" \u2014 "),bq=a("a"),B2o=o("LayoutLMv2FeatureExtractor"),I2o=o(" (LayoutLMv2 model)"),N2o=l(),Zh=a("li"),Mde=a("strong"),q2o=o("layoutlmv3"),j2o=o(" \u2014 "),vq=a("a"),D2o=o("LayoutLMv3FeatureExtractor"),G2o=o(" (LayoutLMv3 model)"),O2o=l(),ep=a("li"),Ede=a("strong"),V2o=o("levit"),X2o=o(" \u2014 "),Fq=a("a"),z2o=o("LevitFeatureExtractor"),W2o=o(" (LeViT model)"),Q2o=l(),op=a("li"),Cde=a("strong"),H2o=o("maskformer"),U2o=o(" \u2014 "),Tq=a("a"),J2o=o("MaskFormerFeatureExtractor"),Y2o=o(" (MaskFormer model)"),K2o=l(),rp=a("li"),wde=a("strong"),Z2o=o("mctct"),ebo=o(" \u2014 "),Mq=a("a"),obo=o("MCTCTFeatureExtractor"),rbo=o(" (M-CTC-T model)"),tbo=l(),tp=a("li"),Ade=a("strong"),abo=o("mobilevit"),nbo=o(" \u2014 "),Eq=a("a"),sbo=o("MobileViTFeatureExtractor"),lbo=o(" (MobileViT model)"),ibo=l(),ap=a("li"),Lde=a("strong"),dbo=o("owlvit"),cbo=o(" \u2014 "),Cq=a("a"),fbo=o("OwlViTFeatureExtractor"),mbo=o(" (OWL-ViT model)"),gbo=l(),np=a("li"),yde=a("strong"),hbo=o("perceiver"),pbo=o(" \u2014 "),wq=a("a"),_bo=o("PerceiverFeatureExtractor"),ubo=o(" (Perceiver model)"),bbo=l(),sp=a("li"),xde=a("strong"),vbo=o("poolformer"),Fbo=o(" \u2014 "),Aq=a("a"),Tbo=o("PoolFormerFeatureExtractor"),Mbo=o(" (PoolFormer model)"),Ebo=l(),lp=a("li"),$de=a("strong"),Cbo=o("regnet"),wbo=o(" \u2014 "),Lq=a("a"),Abo=o("ConvNextFeatureExtractor"),Lbo=o(" (RegNet model)"),ybo=l(),ip=a("li"),kde=a("strong"),xbo=o("resnet"),$bo=o(" \u2014 "),yq=a("a"),kbo=o("ConvNextFeatureExtractor"),Sbo=o(" (ResNet model)"),Rbo=l(),dp=a("li"),Sde=a("strong"),Pbo=o("segformer"),Bbo=o(" \u2014 "),xq=a("a"),Ibo=o("SegformerFeatureExtractor"),Nbo=o(" (SegFormer model)"),qbo=l(),cp=a("li"),Rde=a("strong"),jbo=o("speech_to_text"),Dbo=o(" \u2014 "),$q=a("a"),Gbo=o("Speech2TextFeatureExtractor"),Obo=o(" (Speech2Text model)"),Vbo=l(),fp=a("li"),Pde=a("strong"),Xbo=o("swin"),zbo=o(" \u2014 "),kq=a("a"),Wbo=o("ViTFeatureExtractor"),Qbo=o(" (Swin Transformer model)"),Hbo=l(),mp=a("li"),Bde=a("strong"),Ubo=o("van"),Jbo=o(" \u2014 "),Sq=a("a"),Ybo=o("ConvNextFeatureExtractor"),Kbo=o(" (VAN model)"),Zbo=l(),gp=a("li"),Ide=a("strong"),evo=o("vilt"),ovo=o(" \u2014 "),Rq=a("a"),rvo=o("ViltFeatureExtractor"),tvo=o(" (ViLT model)"),avo=l(),hp=a("li"),Nde=a("strong"),nvo=o("vit"),svo=o(" \u2014 "),Pq=a("a"),lvo=o("ViTFeatureExtractor"),ivo=o(" (ViT model)"),dvo=l(),pp=a("li"),qde=a("strong"),cvo=o("vit_mae"),fvo=o(" \u2014 "),Bq=a("a"),mvo=o("ViTFeatureExtractor"),gvo=o(" (ViTMAE model)"),hvo=l(),_p=a("li"),jde=a("strong"),pvo=o("wav2vec2"),_vo=o(" \u2014 "),Iq=a("a"),uvo=o("Wav2Vec2FeatureExtractor"),bvo=o(" (Wav2Vec2 model)"),vvo=l(),up=a("li"),Dde=a("strong"),Fvo=o("wav2vec2-conformer"),Tvo=o(" \u2014 "),Nq=a("a"),Mvo=o("Wav2Vec2FeatureExtractor"),Evo=o(" (Wav2Vec2-Conformer model)"),Cvo=l(),bp=a("li"),Gde=a("strong"),wvo=o("yolos"),Avo=o(" \u2014 "),qq=a("a"),Lvo=o("YolosFeatureExtractor"),yvo=o(" (YOLOS model)"),xvo=l(),F(vp.$$.fragment),$vo=l(),F(Fp.$$.fragment),kvo=l(),Tp=a("div"),F(y6.$$.fragment),Svo=l(),Ode=a("p"),Rvo=o("Register a new feature extractor for this class."),xXe=l(),Di=a("h2"),Mp=a("a"),Vde=a("span"),F(x6.$$.fragment),Pvo=l(),Xde=a("span"),Bvo=o("AutoProcessor"),$Xe=l(),xo=a("div"),F($6.$$.fragment),Ivo=l(),k6=a("p"),Nvo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),jq=a("a"),qvo=o("AutoProcessor.from_pretrained()"),jvo=o(" class method."),Dvo=l(),S6=a("p"),Gvo=o("This class cannot be instantiated directly using "),zde=a("code"),Ovo=o("__init__()"),Vvo=o(" (throws an error)."),Xvo=l(),Je=a("div"),F(R6.$$.fragment),zvo=l(),Wde=a("p"),Wvo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Qvo=l(),Gi=a("p"),Hvo=o("The processor class to instantiate is selected based on the "),Qde=a("code"),Uvo=o("model_type"),Jvo=o(` property of the config object (either
passed as an argument or loaded from `),Hde=a("code"),Yvo=o("pretrained_model_name_or_path"),Kvo=o(" if possible):"),Zvo=l(),fe=a("ul"),Ep=a("li"),Ude=a("strong"),e3o=o("clip"),o3o=o(" \u2014 "),Dq=a("a"),r3o=o("CLIPProcessor"),t3o=o(" (CLIP model)"),a3o=l(),Cp=a("li"),Jde=a("strong"),n3o=o("flava"),s3o=o(" \u2014 "),Yde=a("code"),l3o=o("FLAVAProcessor"),i3o=o(" (FLAVA model)"),d3o=l(),wp=a("li"),Kde=a("strong"),c3o=o("groupvit"),f3o=o(" \u2014 "),Gq=a("a"),m3o=o("CLIPProcessor"),g3o=o(" (GroupViT model)"),h3o=l(),Ap=a("li"),Zde=a("strong"),p3o=o("layoutlmv2"),_3o=o(" \u2014 "),Oq=a("a"),u3o=o("LayoutLMv2Processor"),b3o=o(" (LayoutLMv2 model)"),v3o=l(),Lp=a("li"),ece=a("strong"),F3o=o("layoutlmv3"),T3o=o(" \u2014 "),Vq=a("a"),M3o=o("LayoutLMv3Processor"),E3o=o(" (LayoutLMv3 model)"),C3o=l(),yp=a("li"),oce=a("strong"),w3o=o("layoutxlm"),A3o=o(" \u2014 "),Xq=a("a"),L3o=o("LayoutXLMProcessor"),y3o=o(" (LayoutXLM model)"),x3o=l(),xp=a("li"),rce=a("strong"),$3o=o("owlvit"),k3o=o(" \u2014 "),zq=a("a"),S3o=o("OwlViTProcessor"),R3o=o(" (OWL-ViT model)"),P3o=l(),$p=a("li"),tce=a("strong"),B3o=o("sew"),I3o=o(" \u2014 "),Wq=a("a"),N3o=o("Wav2Vec2Processor"),q3o=o(" (SEW model)"),j3o=l(),kp=a("li"),ace=a("strong"),D3o=o("sew-d"),G3o=o(" \u2014 "),Qq=a("a"),O3o=o("Wav2Vec2Processor"),V3o=o(" (SEW-D model)"),X3o=l(),Sp=a("li"),nce=a("strong"),z3o=o("speech_to_text"),W3o=o(" \u2014 "),Hq=a("a"),Q3o=o("Speech2TextProcessor"),H3o=o(" (Speech2Text model)"),U3o=l(),Rp=a("li"),sce=a("strong"),J3o=o("speech_to_text_2"),Y3o=o(" \u2014 "),Uq=a("a"),K3o=o("Speech2Text2Processor"),Z3o=o(" (Speech2Text2 model)"),eFo=l(),Pp=a("li"),lce=a("strong"),oFo=o("trocr"),rFo=o(" \u2014 "),Jq=a("a"),tFo=o("TrOCRProcessor"),aFo=o(" (TrOCR model)"),nFo=l(),Bp=a("li"),ice=a("strong"),sFo=o("unispeech"),lFo=o(" \u2014 "),Yq=a("a"),iFo=o("Wav2Vec2Processor"),dFo=o(" (UniSpeech model)"),cFo=l(),Ip=a("li"),dce=a("strong"),fFo=o("unispeech-sat"),mFo=o(" \u2014 "),Kq=a("a"),gFo=o("Wav2Vec2Processor"),hFo=o(" (UniSpeechSat model)"),pFo=l(),Np=a("li"),cce=a("strong"),_Fo=o("vilt"),uFo=o(" \u2014 "),Zq=a("a"),bFo=o("ViltProcessor"),vFo=o(" (ViLT model)"),FFo=l(),qp=a("li"),fce=a("strong"),TFo=o("vision-text-dual-encoder"),MFo=o(" \u2014 "),ej=a("a"),EFo=o("VisionTextDualEncoderProcessor"),CFo=o(" (VisionTextDualEncoder model)"),wFo=l(),jp=a("li"),mce=a("strong"),AFo=o("wav2vec2"),LFo=o(" \u2014 "),oj=a("a"),yFo=o("Wav2Vec2Processor"),xFo=o(" (Wav2Vec2 model)"),$Fo=l(),Dp=a("li"),gce=a("strong"),kFo=o("wav2vec2-conformer"),SFo=o(" \u2014 "),rj=a("a"),RFo=o("Wav2Vec2Processor"),PFo=o(" (Wav2Vec2-Conformer model)"),BFo=l(),Gp=a("li"),hce=a("strong"),IFo=o("wavlm"),NFo=o(" \u2014 "),tj=a("a"),qFo=o("Wav2Vec2Processor"),jFo=o(" (WavLM model)"),DFo=l(),F(Op.$$.fragment),GFo=l(),F(Vp.$$.fragment),OFo=l(),Xp=a("div"),F(P6.$$.fragment),VFo=l(),pce=a("p"),XFo=o("Register a new processor for this class."),kXe=l(),Oi=a("h2"),zp=a("a"),_ce=a("span"),F(B6.$$.fragment),zFo=l(),uce=a("span"),WFo=o("AutoModel"),SXe=l(),$o=a("div"),F(I6.$$.fragment),QFo=l(),Vi=a("p"),HFo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),aj=a("a"),UFo=o("from_pretrained()"),JFo=o(" class method or the "),nj=a("a"),YFo=o("from_config()"),KFo=o(` class
method.`),ZFo=l(),N6=a("p"),eTo=o("This class cannot be instantiated directly using "),bce=a("code"),oTo=o("__init__()"),rTo=o(" (throws an error)."),tTo=l(),it=a("div"),F(q6.$$.fragment),aTo=l(),vce=a("p"),nTo=o("Instantiates one of the base model classes of the library from a configuration."),sTo=l(),Xi=a("p"),lTo=o(`Note:
Loading a model from its configuration file does `),Fce=a("strong"),iTo=o("not"),dTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sj=a("a"),cTo=o("from_pretrained()"),fTo=o(" to load the model weights."),mTo=l(),F(Wp.$$.fragment),gTo=l(),Ye=a("div"),F(j6.$$.fragment),hTo=l(),Tce=a("p"),pTo=o("Instantiate one of the base model classes of the library from a pretrained model."),_To=l(),Ia=a("p"),uTo=o("The model class to instantiate is selected based on the "),Mce=a("code"),bTo=o("model_type"),vTo=o(` property of the config object (either
passed as an argument or loaded from `),Ece=a("code"),FTo=o("pretrained_model_name_or_path"),TTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cce=a("code"),MTo=o("pretrained_model_name_or_path"),ETo=o(":"),CTo=l(),y=a("ul"),Qp=a("li"),wce=a("strong"),wTo=o("albert"),ATo=o(" \u2014 "),lj=a("a"),LTo=o("AlbertModel"),yTo=o(" (ALBERT model)"),xTo=l(),Hp=a("li"),Ace=a("strong"),$To=o("bart"),kTo=o(" \u2014 "),ij=a("a"),STo=o("BartModel"),RTo=o(" (BART model)"),PTo=l(),Up=a("li"),Lce=a("strong"),BTo=o("beit"),ITo=o(" \u2014 "),dj=a("a"),NTo=o("BeitModel"),qTo=o(" (BEiT model)"),jTo=l(),Jp=a("li"),yce=a("strong"),DTo=o("bert"),GTo=o(" \u2014 "),cj=a("a"),OTo=o("BertModel"),VTo=o(" (BERT model)"),XTo=l(),Yp=a("li"),xce=a("strong"),zTo=o("bert-generation"),WTo=o(" \u2014 "),fj=a("a"),QTo=o("BertGenerationEncoder"),HTo=o(" (Bert Generation model)"),UTo=l(),Kp=a("li"),$ce=a("strong"),JTo=o("big_bird"),YTo=o(" \u2014 "),mj=a("a"),KTo=o("BigBirdModel"),ZTo=o(" (BigBird model)"),e7o=l(),Zp=a("li"),kce=a("strong"),o7o=o("bigbird_pegasus"),r7o=o(" \u2014 "),gj=a("a"),t7o=o("BigBirdPegasusModel"),a7o=o(" (BigBird-Pegasus model)"),n7o=l(),e_=a("li"),Sce=a("strong"),s7o=o("blenderbot"),l7o=o(" \u2014 "),hj=a("a"),i7o=o("BlenderbotModel"),d7o=o(" (Blenderbot model)"),c7o=l(),o_=a("li"),Rce=a("strong"),f7o=o("blenderbot-small"),m7o=o(" \u2014 "),pj=a("a"),g7o=o("BlenderbotSmallModel"),h7o=o(" (BlenderbotSmall model)"),p7o=l(),r_=a("li"),Pce=a("strong"),_7o=o("bloom"),u7o=o(" \u2014 "),_j=a("a"),b7o=o("BloomModel"),v7o=o(" (BLOOM model)"),F7o=l(),t_=a("li"),Bce=a("strong"),T7o=o("camembert"),M7o=o(" \u2014 "),uj=a("a"),E7o=o("CamembertModel"),C7o=o(" (CamemBERT model)"),w7o=l(),a_=a("li"),Ice=a("strong"),A7o=o("canine"),L7o=o(" \u2014 "),bj=a("a"),y7o=o("CanineModel"),x7o=o(" (CANINE model)"),$7o=l(),n_=a("li"),Nce=a("strong"),k7o=o("clip"),S7o=o(" \u2014 "),vj=a("a"),R7o=o("CLIPModel"),P7o=o(" (CLIP model)"),B7o=l(),s_=a("li"),qce=a("strong"),I7o=o("codegen"),N7o=o(" \u2014 "),Fj=a("a"),q7o=o("CodeGenModel"),j7o=o(" (CodeGen model)"),D7o=l(),l_=a("li"),jce=a("strong"),G7o=o("convbert"),O7o=o(" \u2014 "),Tj=a("a"),V7o=o("ConvBertModel"),X7o=o(" (ConvBERT model)"),z7o=l(),i_=a("li"),Dce=a("strong"),W7o=o("convnext"),Q7o=o(" \u2014 "),Mj=a("a"),H7o=o("ConvNextModel"),U7o=o(" (ConvNeXT model)"),J7o=l(),d_=a("li"),Gce=a("strong"),Y7o=o("ctrl"),K7o=o(" \u2014 "),Ej=a("a"),Z7o=o("CTRLModel"),e8o=o(" (CTRL model)"),o8o=l(),c_=a("li"),Oce=a("strong"),r8o=o("cvt"),t8o=o(" \u2014 "),Cj=a("a"),a8o=o("CvtModel"),n8o=o(" (CvT model)"),s8o=l(),f_=a("li"),Vce=a("strong"),l8o=o("data2vec-audio"),i8o=o(" \u2014 "),wj=a("a"),d8o=o("Data2VecAudioModel"),c8o=o(" (Data2VecAudio model)"),f8o=l(),m_=a("li"),Xce=a("strong"),m8o=o("data2vec-text"),g8o=o(" \u2014 "),Aj=a("a"),h8o=o("Data2VecTextModel"),p8o=o(" (Data2VecText model)"),_8o=l(),g_=a("li"),zce=a("strong"),u8o=o("data2vec-vision"),b8o=o(" \u2014 "),Lj=a("a"),v8o=o("Data2VecVisionModel"),F8o=o(" (Data2VecVision model)"),T8o=l(),h_=a("li"),Wce=a("strong"),M8o=o("deberta"),E8o=o(" \u2014 "),yj=a("a"),C8o=o("DebertaModel"),w8o=o(" (DeBERTa model)"),A8o=l(),p_=a("li"),Qce=a("strong"),L8o=o("deberta-v2"),y8o=o(" \u2014 "),xj=a("a"),x8o=o("DebertaV2Model"),$8o=o(" (DeBERTa-v2 model)"),k8o=l(),__=a("li"),Hce=a("strong"),S8o=o("decision_transformer"),R8o=o(" \u2014 "),$j=a("a"),P8o=o("DecisionTransformerModel"),B8o=o(" (Decision Transformer model)"),I8o=l(),u_=a("li"),Uce=a("strong"),N8o=o("deit"),q8o=o(" \u2014 "),kj=a("a"),j8o=o("DeiTModel"),D8o=o(" (DeiT model)"),G8o=l(),b_=a("li"),Jce=a("strong"),O8o=o("detr"),V8o=o(" \u2014 "),Sj=a("a"),X8o=o("DetrModel"),z8o=o(" (DETR model)"),W8o=l(),v_=a("li"),Yce=a("strong"),Q8o=o("distilbert"),H8o=o(" \u2014 "),Rj=a("a"),U8o=o("DistilBertModel"),J8o=o(" (DistilBERT model)"),Y8o=l(),F_=a("li"),Kce=a("strong"),K8o=o("dpr"),Z8o=o(" \u2014 "),Pj=a("a"),e9o=o("DPRQuestionEncoder"),o9o=o(" (DPR model)"),r9o=l(),T_=a("li"),Zce=a("strong"),t9o=o("dpt"),a9o=o(" \u2014 "),Bj=a("a"),n9o=o("DPTModel"),s9o=o(" (DPT model)"),l9o=l(),M_=a("li"),efe=a("strong"),i9o=o("electra"),d9o=o(" \u2014 "),Ij=a("a"),c9o=o("ElectraModel"),f9o=o(" (ELECTRA model)"),m9o=l(),E_=a("li"),ofe=a("strong"),g9o=o("flaubert"),h9o=o(" \u2014 "),Nj=a("a"),p9o=o("FlaubertModel"),_9o=o(" (FlauBERT model)"),u9o=l(),C_=a("li"),rfe=a("strong"),b9o=o("flava"),v9o=o(" \u2014 "),qj=a("a"),F9o=o("FlavaModel"),T9o=o(" (FLAVA model)"),M9o=l(),w_=a("li"),tfe=a("strong"),E9o=o("fnet"),C9o=o(" \u2014 "),jj=a("a"),w9o=o("FNetModel"),A9o=o(" (FNet model)"),L9o=l(),A_=a("li"),afe=a("strong"),y9o=o("fsmt"),x9o=o(" \u2014 "),Dj=a("a"),$9o=o("FSMTModel"),k9o=o(" (FairSeq Machine-Translation model)"),S9o=l(),Hs=a("li"),nfe=a("strong"),R9o=o("funnel"),P9o=o(" \u2014 "),Gj=a("a"),B9o=o("FunnelModel"),I9o=o(" or "),Oj=a("a"),N9o=o("FunnelBaseModel"),q9o=o(" (Funnel Transformer model)"),j9o=l(),L_=a("li"),sfe=a("strong"),D9o=o("glpn"),G9o=o(" \u2014 "),Vj=a("a"),O9o=o("GLPNModel"),V9o=o(" (GLPN model)"),X9o=l(),y_=a("li"),lfe=a("strong"),z9o=o("gpt2"),W9o=o(" \u2014 "),Xj=a("a"),Q9o=o("GPT2Model"),H9o=o(" (OpenAI GPT-2 model)"),U9o=l(),x_=a("li"),ife=a("strong"),J9o=o("gpt_neo"),Y9o=o(" \u2014 "),zj=a("a"),K9o=o("GPTNeoModel"),Z9o=o(" (GPT Neo model)"),eMo=l(),$_=a("li"),dfe=a("strong"),oMo=o("gpt_neox"),rMo=o(" \u2014 "),Wj=a("a"),tMo=o("GPTNeoXModel"),aMo=o(" (GPT NeoX model)"),nMo=l(),k_=a("li"),cfe=a("strong"),sMo=o("gptj"),lMo=o(" \u2014 "),Qj=a("a"),iMo=o("GPTJModel"),dMo=o(" (GPT-J model)"),cMo=l(),S_=a("li"),ffe=a("strong"),fMo=o("groupvit"),mMo=o(" \u2014 "),Hj=a("a"),gMo=o("GroupViTModel"),hMo=o(" (GroupViT model)"),pMo=l(),R_=a("li"),mfe=a("strong"),_Mo=o("hubert"),uMo=o(" \u2014 "),Uj=a("a"),bMo=o("HubertModel"),vMo=o(" (Hubert model)"),FMo=l(),P_=a("li"),gfe=a("strong"),TMo=o("ibert"),MMo=o(" \u2014 "),Jj=a("a"),EMo=o("IBertModel"),CMo=o(" (I-BERT model)"),wMo=l(),B_=a("li"),hfe=a("strong"),AMo=o("imagegpt"),LMo=o(" \u2014 "),Yj=a("a"),yMo=o("ImageGPTModel"),xMo=o(" (ImageGPT model)"),$Mo=l(),I_=a("li"),pfe=a("strong"),kMo=o("layoutlm"),SMo=o(" \u2014 "),Kj=a("a"),RMo=o("LayoutLMModel"),PMo=o(" (LayoutLM model)"),BMo=l(),N_=a("li"),_fe=a("strong"),IMo=o("layoutlmv2"),NMo=o(" \u2014 "),Zj=a("a"),qMo=o("LayoutLMv2Model"),jMo=o(" (LayoutLMv2 model)"),DMo=l(),q_=a("li"),ufe=a("strong"),GMo=o("layoutlmv3"),OMo=o(" \u2014 "),eD=a("a"),VMo=o("LayoutLMv3Model"),XMo=o(" (LayoutLMv3 model)"),zMo=l(),j_=a("li"),bfe=a("strong"),WMo=o("led"),QMo=o(" \u2014 "),oD=a("a"),HMo=o("LEDModel"),UMo=o(" (LED model)"),JMo=l(),D_=a("li"),vfe=a("strong"),YMo=o("levit"),KMo=o(" \u2014 "),rD=a("a"),ZMo=o("LevitModel"),e4o=o(" (LeViT model)"),o4o=l(),G_=a("li"),Ffe=a("strong"),r4o=o("longformer"),t4o=o(" \u2014 "),tD=a("a"),a4o=o("LongformerModel"),n4o=o(" (Longformer model)"),s4o=l(),O_=a("li"),Tfe=a("strong"),l4o=o("longt5"),i4o=o(" \u2014 "),aD=a("a"),d4o=o("LongT5Model"),c4o=o(" (LongT5 model)"),f4o=l(),V_=a("li"),Mfe=a("strong"),m4o=o("luke"),g4o=o(" \u2014 "),nD=a("a"),h4o=o("LukeModel"),p4o=o(" (LUKE model)"),_4o=l(),X_=a("li"),Efe=a("strong"),u4o=o("lxmert"),b4o=o(" \u2014 "),sD=a("a"),v4o=o("LxmertModel"),F4o=o(" (LXMERT model)"),T4o=l(),z_=a("li"),Cfe=a("strong"),M4o=o("m2m_100"),E4o=o(" \u2014 "),lD=a("a"),C4o=o("M2M100Model"),w4o=o(" (M2M100 model)"),A4o=l(),W_=a("li"),wfe=a("strong"),L4o=o("marian"),y4o=o(" \u2014 "),iD=a("a"),x4o=o("MarianModel"),$4o=o(" (Marian model)"),k4o=l(),Q_=a("li"),Afe=a("strong"),S4o=o("maskformer"),R4o=o(" \u2014 "),dD=a("a"),P4o=o("MaskFormerModel"),B4o=o(" (MaskFormer model)"),I4o=l(),H_=a("li"),Lfe=a("strong"),N4o=o("mbart"),q4o=o(" \u2014 "),cD=a("a"),j4o=o("MBartModel"),D4o=o(" (mBART model)"),G4o=l(),U_=a("li"),yfe=a("strong"),O4o=o("mctct"),V4o=o(" \u2014 "),fD=a("a"),X4o=o("MCTCTModel"),z4o=o(" (M-CTC-T model)"),W4o=l(),J_=a("li"),xfe=a("strong"),Q4o=o("megatron-bert"),H4o=o(" \u2014 "),mD=a("a"),U4o=o("MegatronBertModel"),J4o=o(" (Megatron-BERT model)"),Y4o=l(),Y_=a("li"),$fe=a("strong"),K4o=o("mobilebert"),Z4o=o(" \u2014 "),gD=a("a"),eEo=o("MobileBertModel"),oEo=o(" (MobileBERT model)"),rEo=l(),K_=a("li"),kfe=a("strong"),tEo=o("mobilevit"),aEo=o(" \u2014 "),hD=a("a"),nEo=o("MobileViTModel"),sEo=o(" (MobileViT model)"),lEo=l(),Z_=a("li"),Sfe=a("strong"),iEo=o("mpnet"),dEo=o(" \u2014 "),pD=a("a"),cEo=o("MPNetModel"),fEo=o(" (MPNet model)"),mEo=l(),eu=a("li"),Rfe=a("strong"),gEo=o("mt5"),hEo=o(" \u2014 "),_D=a("a"),pEo=o("MT5Model"),_Eo=o(" (MT5 model)"),uEo=l(),ou=a("li"),Pfe=a("strong"),bEo=o("mvp"),vEo=o(" \u2014 "),uD=a("a"),FEo=o("MvpModel"),TEo=o(" (MVP model)"),MEo=l(),ru=a("li"),Bfe=a("strong"),EEo=o("nezha"),CEo=o(" \u2014 "),bD=a("a"),wEo=o("NezhaModel"),AEo=o(" (Nezha model)"),LEo=l(),tu=a("li"),Ife=a("strong"),yEo=o("nystromformer"),xEo=o(" \u2014 "),vD=a("a"),$Eo=o("NystromformerModel"),kEo=o(" (Nystr\xF6mformer model)"),SEo=l(),au=a("li"),Nfe=a("strong"),REo=o("openai-gpt"),PEo=o(" \u2014 "),FD=a("a"),BEo=o("OpenAIGPTModel"),IEo=o(" (OpenAI GPT model)"),NEo=l(),nu=a("li"),qfe=a("strong"),qEo=o("opt"),jEo=o(" \u2014 "),TD=a("a"),DEo=o("OPTModel"),GEo=o(" (OPT model)"),OEo=l(),su=a("li"),jfe=a("strong"),VEo=o("owlvit"),XEo=o(" \u2014 "),MD=a("a"),zEo=o("OwlViTModel"),WEo=o(" (OWL-ViT model)"),QEo=l(),lu=a("li"),Dfe=a("strong"),HEo=o("pegasus"),UEo=o(" \u2014 "),ED=a("a"),JEo=o("PegasusModel"),YEo=o(" (Pegasus model)"),KEo=l(),iu=a("li"),Gfe=a("strong"),ZEo=o("perceiver"),eCo=o(" \u2014 "),CD=a("a"),oCo=o("PerceiverModel"),rCo=o(" (Perceiver model)"),tCo=l(),du=a("li"),Ofe=a("strong"),aCo=o("plbart"),nCo=o(" \u2014 "),wD=a("a"),sCo=o("PLBartModel"),lCo=o(" (PLBart model)"),iCo=l(),cu=a("li"),Vfe=a("strong"),dCo=o("poolformer"),cCo=o(" \u2014 "),AD=a("a"),fCo=o("PoolFormerModel"),mCo=o(" (PoolFormer model)"),gCo=l(),fu=a("li"),Xfe=a("strong"),hCo=o("prophetnet"),pCo=o(" \u2014 "),LD=a("a"),_Co=o("ProphetNetModel"),uCo=o(" (ProphetNet model)"),bCo=l(),mu=a("li"),zfe=a("strong"),vCo=o("qdqbert"),FCo=o(" \u2014 "),yD=a("a"),TCo=o("QDQBertModel"),MCo=o(" (QDQBert model)"),ECo=l(),gu=a("li"),Wfe=a("strong"),CCo=o("reformer"),wCo=o(" \u2014 "),xD=a("a"),ACo=o("ReformerModel"),LCo=o(" (Reformer model)"),yCo=l(),hu=a("li"),Qfe=a("strong"),xCo=o("regnet"),$Co=o(" \u2014 "),$D=a("a"),kCo=o("RegNetModel"),SCo=o(" (RegNet model)"),RCo=l(),pu=a("li"),Hfe=a("strong"),PCo=o("rembert"),BCo=o(" \u2014 "),kD=a("a"),ICo=o("RemBertModel"),NCo=o(" (RemBERT model)"),qCo=l(),_u=a("li"),Ufe=a("strong"),jCo=o("resnet"),DCo=o(" \u2014 "),SD=a("a"),GCo=o("ResNetModel"),OCo=o(" (ResNet model)"),VCo=l(),uu=a("li"),Jfe=a("strong"),XCo=o("retribert"),zCo=o(" \u2014 "),RD=a("a"),WCo=o("RetriBertModel"),QCo=o(" (RetriBERT model)"),HCo=l(),bu=a("li"),Yfe=a("strong"),UCo=o("roberta"),JCo=o(" \u2014 "),PD=a("a"),YCo=o("RobertaModel"),KCo=o(" (RoBERTa model)"),ZCo=l(),vu=a("li"),Kfe=a("strong"),e5o=o("roformer"),o5o=o(" \u2014 "),BD=a("a"),r5o=o("RoFormerModel"),t5o=o(" (RoFormer model)"),a5o=l(),Fu=a("li"),Zfe=a("strong"),n5o=o("segformer"),s5o=o(" \u2014 "),ID=a("a"),l5o=o("SegformerModel"),i5o=o(" (SegFormer model)"),d5o=l(),Tu=a("li"),eme=a("strong"),c5o=o("sew"),f5o=o(" \u2014 "),ND=a("a"),m5o=o("SEWModel"),g5o=o(" (SEW model)"),h5o=l(),Mu=a("li"),ome=a("strong"),p5o=o("sew-d"),_5o=o(" \u2014 "),qD=a("a"),u5o=o("SEWDModel"),b5o=o(" (SEW-D model)"),v5o=l(),Eu=a("li"),rme=a("strong"),F5o=o("speech_to_text"),T5o=o(" \u2014 "),jD=a("a"),M5o=o("Speech2TextModel"),E5o=o(" (Speech2Text model)"),C5o=l(),Cu=a("li"),tme=a("strong"),w5o=o("splinter"),A5o=o(" \u2014 "),DD=a("a"),L5o=o("SplinterModel"),y5o=o(" (Splinter model)"),x5o=l(),wu=a("li"),ame=a("strong"),$5o=o("squeezebert"),k5o=o(" \u2014 "),GD=a("a"),S5o=o("SqueezeBertModel"),R5o=o(" (SqueezeBERT model)"),P5o=l(),Au=a("li"),nme=a("strong"),B5o=o("swin"),I5o=o(" \u2014 "),OD=a("a"),N5o=o("SwinModel"),q5o=o(" (Swin Transformer model)"),j5o=l(),Lu=a("li"),sme=a("strong"),D5o=o("t5"),G5o=o(" \u2014 "),VD=a("a"),O5o=o("T5Model"),V5o=o(" (T5 model)"),X5o=l(),yu=a("li"),lme=a("strong"),z5o=o("tapas"),W5o=o(" \u2014 "),XD=a("a"),Q5o=o("TapasModel"),H5o=o(" (TAPAS model)"),U5o=l(),xu=a("li"),ime=a("strong"),J5o=o("trajectory_transformer"),Y5o=o(" \u2014 "),zD=a("a"),K5o=o("TrajectoryTransformerModel"),Z5o=o(" (Trajectory Transformer model)"),e0o=l(),$u=a("li"),dme=a("strong"),o0o=o("transfo-xl"),r0o=o(" \u2014 "),WD=a("a"),t0o=o("TransfoXLModel"),a0o=o(" (Transformer-XL model)"),n0o=l(),ku=a("li"),cme=a("strong"),s0o=o("unispeech"),l0o=o(" \u2014 "),QD=a("a"),i0o=o("UniSpeechModel"),d0o=o(" (UniSpeech model)"),c0o=l(),Su=a("li"),fme=a("strong"),f0o=o("unispeech-sat"),m0o=o(" \u2014 "),HD=a("a"),g0o=o("UniSpeechSatModel"),h0o=o(" (UniSpeechSat model)"),p0o=l(),Ru=a("li"),mme=a("strong"),_0o=o("van"),u0o=o(" \u2014 "),UD=a("a"),b0o=o("VanModel"),v0o=o(" (VAN model)"),F0o=l(),Pu=a("li"),gme=a("strong"),T0o=o("vilt"),M0o=o(" \u2014 "),JD=a("a"),E0o=o("ViltModel"),C0o=o(" (ViLT model)"),w0o=l(),Bu=a("li"),hme=a("strong"),A0o=o("vision-text-dual-encoder"),L0o=o(" \u2014 "),YD=a("a"),y0o=o("VisionTextDualEncoderModel"),x0o=o(" (VisionTextDualEncoder model)"),$0o=l(),Iu=a("li"),pme=a("strong"),k0o=o("visual_bert"),S0o=o(" \u2014 "),KD=a("a"),R0o=o("VisualBertModel"),P0o=o(" (VisualBERT model)"),B0o=l(),Nu=a("li"),_me=a("strong"),I0o=o("vit"),N0o=o(" \u2014 "),ZD=a("a"),q0o=o("ViTModel"),j0o=o(" (ViT model)"),D0o=l(),qu=a("li"),ume=a("strong"),G0o=o("vit_mae"),O0o=o(" \u2014 "),eG=a("a"),V0o=o("ViTMAEModel"),X0o=o(" (ViTMAE model)"),z0o=l(),ju=a("li"),bme=a("strong"),W0o=o("wav2vec2"),Q0o=o(" \u2014 "),oG=a("a"),H0o=o("Wav2Vec2Model"),U0o=o(" (Wav2Vec2 model)"),J0o=l(),Du=a("li"),vme=a("strong"),Y0o=o("wav2vec2-conformer"),K0o=o(" \u2014 "),rG=a("a"),Z0o=o("Wav2Vec2ConformerModel"),ewo=o(" (Wav2Vec2-Conformer model)"),owo=l(),Gu=a("li"),Fme=a("strong"),rwo=o("wavlm"),two=o(" \u2014 "),tG=a("a"),awo=o("WavLMModel"),nwo=o(" (WavLM model)"),swo=l(),Ou=a("li"),Tme=a("strong"),lwo=o("xglm"),iwo=o(" \u2014 "),aG=a("a"),dwo=o("XGLMModel"),cwo=o(" (XGLM model)"),fwo=l(),Vu=a("li"),Mme=a("strong"),mwo=o("xlm"),gwo=o(" \u2014 "),nG=a("a"),hwo=o("XLMModel"),pwo=o(" (XLM model)"),_wo=l(),Xu=a("li"),Eme=a("strong"),uwo=o("xlm-prophetnet"),bwo=o(" \u2014 "),sG=a("a"),vwo=o("XLMProphetNetModel"),Fwo=o(" (XLM-ProphetNet model)"),Two=l(),zu=a("li"),Cme=a("strong"),Mwo=o("xlm-roberta"),Ewo=o(" \u2014 "),lG=a("a"),Cwo=o("XLMRobertaModel"),wwo=o(" (XLM-RoBERTa model)"),Awo=l(),Wu=a("li"),wme=a("strong"),Lwo=o("xlm-roberta-xl"),ywo=o(" \u2014 "),iG=a("a"),xwo=o("XLMRobertaXLModel"),$wo=o(" (XLM-RoBERTa-XL model)"),kwo=l(),Qu=a("li"),Ame=a("strong"),Swo=o("xlnet"),Rwo=o(" \u2014 "),dG=a("a"),Pwo=o("XLNetModel"),Bwo=o(" (XLNet model)"),Iwo=l(),Hu=a("li"),Lme=a("strong"),Nwo=o("yolos"),qwo=o(" \u2014 "),cG=a("a"),jwo=o("YolosModel"),Dwo=o(" (YOLOS model)"),Gwo=l(),Uu=a("li"),yme=a("strong"),Owo=o("yoso"),Vwo=o(" \u2014 "),fG=a("a"),Xwo=o("YosoModel"),zwo=o(" (YOSO model)"),Wwo=l(),Ju=a("p"),Qwo=o("The model is set in evaluation mode by default using "),xme=a("code"),Hwo=o("model.eval()"),Uwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$me=a("code"),Jwo=o("model.train()"),Ywo=l(),F(Yu.$$.fragment),RXe=l(),zi=a("h2"),Ku=a("a"),kme=a("span"),F(D6.$$.fragment),Kwo=l(),Sme=a("span"),Zwo=o("AutoModelForPreTraining"),PXe=l(),ko=a("div"),F(G6.$$.fragment),eAo=l(),Wi=a("p"),oAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),mG=a("a"),rAo=o("from_pretrained()"),tAo=o(" class method or the "),gG=a("a"),aAo=o("from_config()"),nAo=o(` class
method.`),sAo=l(),O6=a("p"),lAo=o("This class cannot be instantiated directly using "),Rme=a("code"),iAo=o("__init__()"),dAo=o(" (throws an error)."),cAo=l(),dt=a("div"),F(V6.$$.fragment),fAo=l(),Pme=a("p"),mAo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),gAo=l(),Qi=a("p"),hAo=o(`Note:
Loading a model from its configuration file does `),Bme=a("strong"),pAo=o("not"),_Ao=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hG=a("a"),uAo=o("from_pretrained()"),bAo=o(" to load the model weights."),vAo=l(),F(Zu.$$.fragment),FAo=l(),Ke=a("div"),F(X6.$$.fragment),TAo=l(),Ime=a("p"),MAo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),EAo=l(),Na=a("p"),CAo=o("The model class to instantiate is selected based on the "),Nme=a("code"),wAo=o("model_type"),AAo=o(` property of the config object (either
passed as an argument or loaded from `),qme=a("code"),LAo=o("pretrained_model_name_or_path"),yAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jme=a("code"),xAo=o("pretrained_model_name_or_path"),$Ao=o(":"),kAo=l(),G=a("ul"),e1=a("li"),Dme=a("strong"),SAo=o("albert"),RAo=o(" \u2014 "),pG=a("a"),PAo=o("AlbertForPreTraining"),BAo=o(" (ALBERT model)"),IAo=l(),o1=a("li"),Gme=a("strong"),NAo=o("bart"),qAo=o(" \u2014 "),_G=a("a"),jAo=o("BartForConditionalGeneration"),DAo=o(" (BART model)"),GAo=l(),r1=a("li"),Ome=a("strong"),OAo=o("bert"),VAo=o(" \u2014 "),uG=a("a"),XAo=o("BertForPreTraining"),zAo=o(" (BERT model)"),WAo=l(),t1=a("li"),Vme=a("strong"),QAo=o("big_bird"),HAo=o(" \u2014 "),bG=a("a"),UAo=o("BigBirdForPreTraining"),JAo=o(" (BigBird model)"),YAo=l(),a1=a("li"),Xme=a("strong"),KAo=o("bloom"),ZAo=o(" \u2014 "),vG=a("a"),e6o=o("BloomForCausalLM"),o6o=o(" (BLOOM model)"),r6o=l(),n1=a("li"),zme=a("strong"),t6o=o("camembert"),a6o=o(" \u2014 "),FG=a("a"),n6o=o("CamembertForMaskedLM"),s6o=o(" (CamemBERT model)"),l6o=l(),s1=a("li"),Wme=a("strong"),i6o=o("ctrl"),d6o=o(" \u2014 "),TG=a("a"),c6o=o("CTRLLMHeadModel"),f6o=o(" (CTRL model)"),m6o=l(),l1=a("li"),Qme=a("strong"),g6o=o("data2vec-text"),h6o=o(" \u2014 "),MG=a("a"),p6o=o("Data2VecTextForMaskedLM"),_6o=o(" (Data2VecText model)"),u6o=l(),i1=a("li"),Hme=a("strong"),b6o=o("deberta"),v6o=o(" \u2014 "),EG=a("a"),F6o=o("DebertaForMaskedLM"),T6o=o(" (DeBERTa model)"),M6o=l(),d1=a("li"),Ume=a("strong"),E6o=o("deberta-v2"),C6o=o(" \u2014 "),CG=a("a"),w6o=o("DebertaV2ForMaskedLM"),A6o=o(" (DeBERTa-v2 model)"),L6o=l(),c1=a("li"),Jme=a("strong"),y6o=o("distilbert"),x6o=o(" \u2014 "),wG=a("a"),$6o=o("DistilBertForMaskedLM"),k6o=o(" (DistilBERT model)"),S6o=l(),f1=a("li"),Yme=a("strong"),R6o=o("electra"),P6o=o(" \u2014 "),AG=a("a"),B6o=o("ElectraForPreTraining"),I6o=o(" (ELECTRA model)"),N6o=l(),m1=a("li"),Kme=a("strong"),q6o=o("flaubert"),j6o=o(" \u2014 "),LG=a("a"),D6o=o("FlaubertWithLMHeadModel"),G6o=o(" (FlauBERT model)"),O6o=l(),g1=a("li"),Zme=a("strong"),V6o=o("flava"),X6o=o(" \u2014 "),yG=a("a"),z6o=o("FlavaForPreTraining"),W6o=o(" (FLAVA model)"),Q6o=l(),h1=a("li"),ege=a("strong"),H6o=o("fnet"),U6o=o(" \u2014 "),xG=a("a"),J6o=o("FNetForPreTraining"),Y6o=o(" (FNet model)"),K6o=l(),p1=a("li"),oge=a("strong"),Z6o=o("fsmt"),eLo=o(" \u2014 "),$G=a("a"),oLo=o("FSMTForConditionalGeneration"),rLo=o(" (FairSeq Machine-Translation model)"),tLo=l(),_1=a("li"),rge=a("strong"),aLo=o("funnel"),nLo=o(" \u2014 "),kG=a("a"),sLo=o("FunnelForPreTraining"),lLo=o(" (Funnel Transformer model)"),iLo=l(),u1=a("li"),tge=a("strong"),dLo=o("gpt2"),cLo=o(" \u2014 "),SG=a("a"),fLo=o("GPT2LMHeadModel"),mLo=o(" (OpenAI GPT-2 model)"),gLo=l(),b1=a("li"),age=a("strong"),hLo=o("ibert"),pLo=o(" \u2014 "),RG=a("a"),_Lo=o("IBertForMaskedLM"),uLo=o(" (I-BERT model)"),bLo=l(),v1=a("li"),nge=a("strong"),vLo=o("layoutlm"),FLo=o(" \u2014 "),PG=a("a"),TLo=o("LayoutLMForMaskedLM"),MLo=o(" (LayoutLM model)"),ELo=l(),F1=a("li"),sge=a("strong"),CLo=o("longformer"),wLo=o(" \u2014 "),BG=a("a"),ALo=o("LongformerForMaskedLM"),LLo=o(" (Longformer model)"),yLo=l(),T1=a("li"),lge=a("strong"),xLo=o("lxmert"),$Lo=o(" \u2014 "),IG=a("a"),kLo=o("LxmertForPreTraining"),SLo=o(" (LXMERT model)"),RLo=l(),M1=a("li"),ige=a("strong"),PLo=o("megatron-bert"),BLo=o(" \u2014 "),NG=a("a"),ILo=o("MegatronBertForPreTraining"),NLo=o(" (Megatron-BERT model)"),qLo=l(),E1=a("li"),dge=a("strong"),jLo=o("mobilebert"),DLo=o(" \u2014 "),qG=a("a"),GLo=o("MobileBertForPreTraining"),OLo=o(" (MobileBERT model)"),VLo=l(),C1=a("li"),cge=a("strong"),XLo=o("mpnet"),zLo=o(" \u2014 "),jG=a("a"),WLo=o("MPNetForMaskedLM"),QLo=o(" (MPNet model)"),HLo=l(),w1=a("li"),fge=a("strong"),ULo=o("mvp"),JLo=o(" \u2014 "),DG=a("a"),YLo=o("MvpForConditionalGeneration"),KLo=o(" (MVP model)"),ZLo=l(),A1=a("li"),mge=a("strong"),eyo=o("nezha"),oyo=o(" \u2014 "),GG=a("a"),ryo=o("NezhaForPreTraining"),tyo=o(" (Nezha model)"),ayo=l(),L1=a("li"),gge=a("strong"),nyo=o("openai-gpt"),syo=o(" \u2014 "),OG=a("a"),lyo=o("OpenAIGPTLMHeadModel"),iyo=o(" (OpenAI GPT model)"),dyo=l(),y1=a("li"),hge=a("strong"),cyo=o("retribert"),fyo=o(" \u2014 "),VG=a("a"),myo=o("RetriBertModel"),gyo=o(" (RetriBERT model)"),hyo=l(),x1=a("li"),pge=a("strong"),pyo=o("roberta"),_yo=o(" \u2014 "),XG=a("a"),uyo=o("RobertaForMaskedLM"),byo=o(" (RoBERTa model)"),vyo=l(),$1=a("li"),_ge=a("strong"),Fyo=o("splinter"),Tyo=o(" \u2014 "),zG=a("a"),Myo=o("SplinterForPreTraining"),Eyo=o(" (Splinter model)"),Cyo=l(),k1=a("li"),uge=a("strong"),wyo=o("squeezebert"),Ayo=o(" \u2014 "),WG=a("a"),Lyo=o("SqueezeBertForMaskedLM"),yyo=o(" (SqueezeBERT model)"),xyo=l(),S1=a("li"),bge=a("strong"),$yo=o("t5"),kyo=o(" \u2014 "),QG=a("a"),Syo=o("T5ForConditionalGeneration"),Ryo=o(" (T5 model)"),Pyo=l(),R1=a("li"),vge=a("strong"),Byo=o("tapas"),Iyo=o(" \u2014 "),HG=a("a"),Nyo=o("TapasForMaskedLM"),qyo=o(" (TAPAS model)"),jyo=l(),P1=a("li"),Fge=a("strong"),Dyo=o("transfo-xl"),Gyo=o(" \u2014 "),UG=a("a"),Oyo=o("TransfoXLLMHeadModel"),Vyo=o(" (Transformer-XL model)"),Xyo=l(),B1=a("li"),Tge=a("strong"),zyo=o("unispeech"),Wyo=o(" \u2014 "),JG=a("a"),Qyo=o("UniSpeechForPreTraining"),Hyo=o(" (UniSpeech model)"),Uyo=l(),I1=a("li"),Mge=a("strong"),Jyo=o("unispeech-sat"),Yyo=o(" \u2014 "),YG=a("a"),Kyo=o("UniSpeechSatForPreTraining"),Zyo=o(" (UniSpeechSat model)"),exo=l(),N1=a("li"),Ege=a("strong"),oxo=o("visual_bert"),rxo=o(" \u2014 "),KG=a("a"),txo=o("VisualBertForPreTraining"),axo=o(" (VisualBERT model)"),nxo=l(),q1=a("li"),Cge=a("strong"),sxo=o("vit_mae"),lxo=o(" \u2014 "),ZG=a("a"),ixo=o("ViTMAEForPreTraining"),dxo=o(" (ViTMAE model)"),cxo=l(),j1=a("li"),wge=a("strong"),fxo=o("wav2vec2"),mxo=o(" \u2014 "),eO=a("a"),gxo=o("Wav2Vec2ForPreTraining"),hxo=o(" (Wav2Vec2 model)"),pxo=l(),D1=a("li"),Age=a("strong"),_xo=o("wav2vec2-conformer"),uxo=o(" \u2014 "),oO=a("a"),bxo=o("Wav2Vec2ConformerForPreTraining"),vxo=o(" (Wav2Vec2-Conformer model)"),Fxo=l(),G1=a("li"),Lge=a("strong"),Txo=o("xlm"),Mxo=o(" \u2014 "),rO=a("a"),Exo=o("XLMWithLMHeadModel"),Cxo=o(" (XLM model)"),wxo=l(),O1=a("li"),yge=a("strong"),Axo=o("xlm-roberta"),Lxo=o(" \u2014 "),tO=a("a"),yxo=o("XLMRobertaForMaskedLM"),xxo=o(" (XLM-RoBERTa model)"),$xo=l(),V1=a("li"),xge=a("strong"),kxo=o("xlm-roberta-xl"),Sxo=o(" \u2014 "),aO=a("a"),Rxo=o("XLMRobertaXLForMaskedLM"),Pxo=o(" (XLM-RoBERTa-XL model)"),Bxo=l(),X1=a("li"),$ge=a("strong"),Ixo=o("xlnet"),Nxo=o(" \u2014 "),nO=a("a"),qxo=o("XLNetLMHeadModel"),jxo=o(" (XLNet model)"),Dxo=l(),z1=a("p"),Gxo=o("The model is set in evaluation mode by default using "),kge=a("code"),Oxo=o("model.eval()"),Vxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sge=a("code"),Xxo=o("model.train()"),zxo=l(),F(W1.$$.fragment),BXe=l(),Hi=a("h2"),Q1=a("a"),Rge=a("span"),F(z6.$$.fragment),Wxo=l(),Pge=a("span"),Qxo=o("AutoModelForCausalLM"),IXe=l(),So=a("div"),F(W6.$$.fragment),Hxo=l(),Ui=a("p"),Uxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),sO=a("a"),Jxo=o("from_pretrained()"),Yxo=o(" class method or the "),lO=a("a"),Kxo=o("from_config()"),Zxo=o(` class
method.`),e$o=l(),Q6=a("p"),o$o=o("This class cannot be instantiated directly using "),Bge=a("code"),r$o=o("__init__()"),t$o=o(" (throws an error)."),a$o=l(),ct=a("div"),F(H6.$$.fragment),n$o=l(),Ige=a("p"),s$o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),l$o=l(),Ji=a("p"),i$o=o(`Note:
Loading a model from its configuration file does `),Nge=a("strong"),d$o=o("not"),c$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iO=a("a"),f$o=o("from_pretrained()"),m$o=o(" to load the model weights."),g$o=l(),F(H1.$$.fragment),h$o=l(),Ze=a("div"),F(U6.$$.fragment),p$o=l(),qge=a("p"),_$o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),u$o=l(),qa=a("p"),b$o=o("The model class to instantiate is selected based on the "),jge=a("code"),v$o=o("model_type"),F$o=o(` property of the config object (either
passed as an argument or loaded from `),Dge=a("code"),T$o=o("pretrained_model_name_or_path"),M$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gge=a("code"),E$o=o("pretrained_model_name_or_path"),C$o=o(":"),w$o=l(),z=a("ul"),U1=a("li"),Oge=a("strong"),A$o=o("bart"),L$o=o(" \u2014 "),dO=a("a"),y$o=o("BartForCausalLM"),x$o=o(" (BART model)"),$$o=l(),J1=a("li"),Vge=a("strong"),k$o=o("bert"),S$o=o(" \u2014 "),cO=a("a"),R$o=o("BertLMHeadModel"),P$o=o(" (BERT model)"),B$o=l(),Y1=a("li"),Xge=a("strong"),I$o=o("bert-generation"),N$o=o(" \u2014 "),fO=a("a"),q$o=o("BertGenerationDecoder"),j$o=o(" (Bert Generation model)"),D$o=l(),K1=a("li"),zge=a("strong"),G$o=o("big_bird"),O$o=o(" \u2014 "),mO=a("a"),V$o=o("BigBirdForCausalLM"),X$o=o(" (BigBird model)"),z$o=l(),Z1=a("li"),Wge=a("strong"),W$o=o("bigbird_pegasus"),Q$o=o(" \u2014 "),gO=a("a"),H$o=o("BigBirdPegasusForCausalLM"),U$o=o(" (BigBird-Pegasus model)"),J$o=l(),e2=a("li"),Qge=a("strong"),Y$o=o("blenderbot"),K$o=o(" \u2014 "),hO=a("a"),Z$o=o("BlenderbotForCausalLM"),eko=o(" (Blenderbot model)"),oko=l(),o2=a("li"),Hge=a("strong"),rko=o("blenderbot-small"),tko=o(" \u2014 "),pO=a("a"),ako=o("BlenderbotSmallForCausalLM"),nko=o(" (BlenderbotSmall model)"),sko=l(),r2=a("li"),Uge=a("strong"),lko=o("bloom"),iko=o(" \u2014 "),_O=a("a"),dko=o("BloomForCausalLM"),cko=o(" (BLOOM model)"),fko=l(),t2=a("li"),Jge=a("strong"),mko=o("camembert"),gko=o(" \u2014 "),uO=a("a"),hko=o("CamembertForCausalLM"),pko=o(" (CamemBERT model)"),_ko=l(),a2=a("li"),Yge=a("strong"),uko=o("codegen"),bko=o(" \u2014 "),bO=a("a"),vko=o("CodeGenForCausalLM"),Fko=o(" (CodeGen model)"),Tko=l(),n2=a("li"),Kge=a("strong"),Mko=o("ctrl"),Eko=o(" \u2014 "),vO=a("a"),Cko=o("CTRLLMHeadModel"),wko=o(" (CTRL model)"),Ako=l(),s2=a("li"),Zge=a("strong"),Lko=o("data2vec-text"),yko=o(" \u2014 "),FO=a("a"),xko=o("Data2VecTextForCausalLM"),$ko=o(" (Data2VecText model)"),kko=l(),l2=a("li"),ehe=a("strong"),Sko=o("electra"),Rko=o(" \u2014 "),TO=a("a"),Pko=o("ElectraForCausalLM"),Bko=o(" (ELECTRA model)"),Iko=l(),i2=a("li"),ohe=a("strong"),Nko=o("gpt2"),qko=o(" \u2014 "),MO=a("a"),jko=o("GPT2LMHeadModel"),Dko=o(" (OpenAI GPT-2 model)"),Gko=l(),d2=a("li"),rhe=a("strong"),Oko=o("gpt_neo"),Vko=o(" \u2014 "),EO=a("a"),Xko=o("GPTNeoForCausalLM"),zko=o(" (GPT Neo model)"),Wko=l(),c2=a("li"),the=a("strong"),Qko=o("gpt_neox"),Hko=o(" \u2014 "),CO=a("a"),Uko=o("GPTNeoXForCausalLM"),Jko=o(" (GPT NeoX model)"),Yko=l(),f2=a("li"),ahe=a("strong"),Kko=o("gptj"),Zko=o(" \u2014 "),wO=a("a"),eSo=o("GPTJForCausalLM"),oSo=o(" (GPT-J model)"),rSo=l(),m2=a("li"),nhe=a("strong"),tSo=o("marian"),aSo=o(" \u2014 "),AO=a("a"),nSo=o("MarianForCausalLM"),sSo=o(" (Marian model)"),lSo=l(),g2=a("li"),she=a("strong"),iSo=o("mbart"),dSo=o(" \u2014 "),LO=a("a"),cSo=o("MBartForCausalLM"),fSo=o(" (mBART model)"),mSo=l(),h2=a("li"),lhe=a("strong"),gSo=o("megatron-bert"),hSo=o(" \u2014 "),yO=a("a"),pSo=o("MegatronBertForCausalLM"),_So=o(" (Megatron-BERT model)"),uSo=l(),p2=a("li"),ihe=a("strong"),bSo=o("mvp"),vSo=o(" \u2014 "),xO=a("a"),FSo=o("MvpForCausalLM"),TSo=o(" (MVP model)"),MSo=l(),_2=a("li"),dhe=a("strong"),ESo=o("openai-gpt"),CSo=o(" \u2014 "),$O=a("a"),wSo=o("OpenAIGPTLMHeadModel"),ASo=o(" (OpenAI GPT model)"),LSo=l(),u2=a("li"),che=a("strong"),ySo=o("opt"),xSo=o(" \u2014 "),kO=a("a"),$So=o("OPTForCausalLM"),kSo=o(" (OPT model)"),SSo=l(),b2=a("li"),fhe=a("strong"),RSo=o("pegasus"),PSo=o(" \u2014 "),SO=a("a"),BSo=o("PegasusForCausalLM"),ISo=o(" (Pegasus model)"),NSo=l(),v2=a("li"),mhe=a("strong"),qSo=o("plbart"),jSo=o(" \u2014 "),RO=a("a"),DSo=o("PLBartForCausalLM"),GSo=o(" (PLBart model)"),OSo=l(),F2=a("li"),ghe=a("strong"),VSo=o("prophetnet"),XSo=o(" \u2014 "),PO=a("a"),zSo=o("ProphetNetForCausalLM"),WSo=o(" (ProphetNet model)"),QSo=l(),T2=a("li"),hhe=a("strong"),HSo=o("qdqbert"),USo=o(" \u2014 "),BO=a("a"),JSo=o("QDQBertLMHeadModel"),YSo=o(" (QDQBert model)"),KSo=l(),M2=a("li"),phe=a("strong"),ZSo=o("reformer"),eRo=o(" \u2014 "),IO=a("a"),oRo=o("ReformerModelWithLMHead"),rRo=o(" (Reformer model)"),tRo=l(),E2=a("li"),_he=a("strong"),aRo=o("rembert"),nRo=o(" \u2014 "),NO=a("a"),sRo=o("RemBertForCausalLM"),lRo=o(" (RemBERT model)"),iRo=l(),C2=a("li"),uhe=a("strong"),dRo=o("roberta"),cRo=o(" \u2014 "),qO=a("a"),fRo=o("RobertaForCausalLM"),mRo=o(" (RoBERTa model)"),gRo=l(),w2=a("li"),bhe=a("strong"),hRo=o("roformer"),pRo=o(" \u2014 "),jO=a("a"),_Ro=o("RoFormerForCausalLM"),uRo=o(" (RoFormer model)"),bRo=l(),A2=a("li"),vhe=a("strong"),vRo=o("speech_to_text_2"),FRo=o(" \u2014 "),DO=a("a"),TRo=o("Speech2Text2ForCausalLM"),MRo=o(" (Speech2Text2 model)"),ERo=l(),L2=a("li"),Fhe=a("strong"),CRo=o("transfo-xl"),wRo=o(" \u2014 "),GO=a("a"),ARo=o("TransfoXLLMHeadModel"),LRo=o(" (Transformer-XL model)"),yRo=l(),y2=a("li"),The=a("strong"),xRo=o("trocr"),$Ro=o(" \u2014 "),OO=a("a"),kRo=o("TrOCRForCausalLM"),SRo=o(" (TrOCR model)"),RRo=l(),x2=a("li"),Mhe=a("strong"),PRo=o("xglm"),BRo=o(" \u2014 "),VO=a("a"),IRo=o("XGLMForCausalLM"),NRo=o(" (XGLM model)"),qRo=l(),$2=a("li"),Ehe=a("strong"),jRo=o("xlm"),DRo=o(" \u2014 "),XO=a("a"),GRo=o("XLMWithLMHeadModel"),ORo=o(" (XLM model)"),VRo=l(),k2=a("li"),Che=a("strong"),XRo=o("xlm-prophetnet"),zRo=o(" \u2014 "),zO=a("a"),WRo=o("XLMProphetNetForCausalLM"),QRo=o(" (XLM-ProphetNet model)"),HRo=l(),S2=a("li"),whe=a("strong"),URo=o("xlm-roberta"),JRo=o(" \u2014 "),WO=a("a"),YRo=o("XLMRobertaForCausalLM"),KRo=o(" (XLM-RoBERTa model)"),ZRo=l(),R2=a("li"),Ahe=a("strong"),ePo=o("xlm-roberta-xl"),oPo=o(" \u2014 "),QO=a("a"),rPo=o("XLMRobertaXLForCausalLM"),tPo=o(" (XLM-RoBERTa-XL model)"),aPo=l(),P2=a("li"),Lhe=a("strong"),nPo=o("xlnet"),sPo=o(" \u2014 "),HO=a("a"),lPo=o("XLNetLMHeadModel"),iPo=o(" (XLNet model)"),dPo=l(),B2=a("p"),cPo=o("The model is set in evaluation mode by default using "),yhe=a("code"),fPo=o("model.eval()"),mPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xhe=a("code"),gPo=o("model.train()"),hPo=l(),F(I2.$$.fragment),NXe=l(),Yi=a("h2"),N2=a("a"),$he=a("span"),F(J6.$$.fragment),pPo=l(),khe=a("span"),_Po=o("AutoModelForMaskedLM"),qXe=l(),Ro=a("div"),F(Y6.$$.fragment),uPo=l(),Ki=a("p"),bPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),UO=a("a"),vPo=o("from_pretrained()"),FPo=o(" class method or the "),JO=a("a"),TPo=o("from_config()"),MPo=o(` class
method.`),EPo=l(),K6=a("p"),CPo=o("This class cannot be instantiated directly using "),She=a("code"),wPo=o("__init__()"),APo=o(" (throws an error)."),LPo=l(),ft=a("div"),F(Z6.$$.fragment),yPo=l(),Rhe=a("p"),xPo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),$Po=l(),Zi=a("p"),kPo=o(`Note:
Loading a model from its configuration file does `),Phe=a("strong"),SPo=o("not"),RPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YO=a("a"),PPo=o("from_pretrained()"),BPo=o(" to load the model weights."),IPo=l(),F(q2.$$.fragment),NPo=l(),eo=a("div"),F(eL.$$.fragment),qPo=l(),Bhe=a("p"),jPo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),DPo=l(),ja=a("p"),GPo=o("The model class to instantiate is selected based on the "),Ihe=a("code"),OPo=o("model_type"),VPo=o(` property of the config object (either
passed as an argument or loaded from `),Nhe=a("code"),XPo=o("pretrained_model_name_or_path"),zPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qhe=a("code"),WPo=o("pretrained_model_name_or_path"),QPo=o(":"),HPo=l(),Q=a("ul"),j2=a("li"),jhe=a("strong"),UPo=o("albert"),JPo=o(" \u2014 "),KO=a("a"),YPo=o("AlbertForMaskedLM"),KPo=o(" (ALBERT model)"),ZPo=l(),D2=a("li"),Dhe=a("strong"),eBo=o("bart"),oBo=o(" \u2014 "),ZO=a("a"),rBo=o("BartForConditionalGeneration"),tBo=o(" (BART model)"),aBo=l(),G2=a("li"),Ghe=a("strong"),nBo=o("bert"),sBo=o(" \u2014 "),eV=a("a"),lBo=o("BertForMaskedLM"),iBo=o(" (BERT model)"),dBo=l(),O2=a("li"),Ohe=a("strong"),cBo=o("big_bird"),fBo=o(" \u2014 "),oV=a("a"),mBo=o("BigBirdForMaskedLM"),gBo=o(" (BigBird model)"),hBo=l(),V2=a("li"),Vhe=a("strong"),pBo=o("camembert"),_Bo=o(" \u2014 "),rV=a("a"),uBo=o("CamembertForMaskedLM"),bBo=o(" (CamemBERT model)"),vBo=l(),X2=a("li"),Xhe=a("strong"),FBo=o("convbert"),TBo=o(" \u2014 "),tV=a("a"),MBo=o("ConvBertForMaskedLM"),EBo=o(" (ConvBERT model)"),CBo=l(),z2=a("li"),zhe=a("strong"),wBo=o("data2vec-text"),ABo=o(" \u2014 "),aV=a("a"),LBo=o("Data2VecTextForMaskedLM"),yBo=o(" (Data2VecText model)"),xBo=l(),W2=a("li"),Whe=a("strong"),$Bo=o("deberta"),kBo=o(" \u2014 "),nV=a("a"),SBo=o("DebertaForMaskedLM"),RBo=o(" (DeBERTa model)"),PBo=l(),Q2=a("li"),Qhe=a("strong"),BBo=o("deberta-v2"),IBo=o(" \u2014 "),sV=a("a"),NBo=o("DebertaV2ForMaskedLM"),qBo=o(" (DeBERTa-v2 model)"),jBo=l(),H2=a("li"),Hhe=a("strong"),DBo=o("distilbert"),GBo=o(" \u2014 "),lV=a("a"),OBo=o("DistilBertForMaskedLM"),VBo=o(" (DistilBERT model)"),XBo=l(),U2=a("li"),Uhe=a("strong"),zBo=o("electra"),WBo=o(" \u2014 "),iV=a("a"),QBo=o("ElectraForMaskedLM"),HBo=o(" (ELECTRA model)"),UBo=l(),J2=a("li"),Jhe=a("strong"),JBo=o("flaubert"),YBo=o(" \u2014 "),dV=a("a"),KBo=o("FlaubertWithLMHeadModel"),ZBo=o(" (FlauBERT model)"),eIo=l(),Y2=a("li"),Yhe=a("strong"),oIo=o("fnet"),rIo=o(" \u2014 "),cV=a("a"),tIo=o("FNetForMaskedLM"),aIo=o(" (FNet model)"),nIo=l(),K2=a("li"),Khe=a("strong"),sIo=o("funnel"),lIo=o(" \u2014 "),fV=a("a"),iIo=o("FunnelForMaskedLM"),dIo=o(" (Funnel Transformer model)"),cIo=l(),Z2=a("li"),Zhe=a("strong"),fIo=o("ibert"),mIo=o(" \u2014 "),mV=a("a"),gIo=o("IBertForMaskedLM"),hIo=o(" (I-BERT model)"),pIo=l(),eb=a("li"),epe=a("strong"),_Io=o("layoutlm"),uIo=o(" \u2014 "),gV=a("a"),bIo=o("LayoutLMForMaskedLM"),vIo=o(" (LayoutLM model)"),FIo=l(),ob=a("li"),ope=a("strong"),TIo=o("longformer"),MIo=o(" \u2014 "),hV=a("a"),EIo=o("LongformerForMaskedLM"),CIo=o(" (Longformer model)"),wIo=l(),rb=a("li"),rpe=a("strong"),AIo=o("luke"),LIo=o(" \u2014 "),pV=a("a"),yIo=o("LukeForMaskedLM"),xIo=o(" (LUKE model)"),$Io=l(),tb=a("li"),tpe=a("strong"),kIo=o("mbart"),SIo=o(" \u2014 "),_V=a("a"),RIo=o("MBartForConditionalGeneration"),PIo=o(" (mBART model)"),BIo=l(),ab=a("li"),ape=a("strong"),IIo=o("megatron-bert"),NIo=o(" \u2014 "),uV=a("a"),qIo=o("MegatronBertForMaskedLM"),jIo=o(" (Megatron-BERT model)"),DIo=l(),nb=a("li"),npe=a("strong"),GIo=o("mobilebert"),OIo=o(" \u2014 "),bV=a("a"),VIo=o("MobileBertForMaskedLM"),XIo=o(" (MobileBERT model)"),zIo=l(),sb=a("li"),spe=a("strong"),WIo=o("mpnet"),QIo=o(" \u2014 "),vV=a("a"),HIo=o("MPNetForMaskedLM"),UIo=o(" (MPNet model)"),JIo=l(),lb=a("li"),lpe=a("strong"),YIo=o("mvp"),KIo=o(" \u2014 "),FV=a("a"),ZIo=o("MvpForConditionalGeneration"),eNo=o(" (MVP model)"),oNo=l(),ib=a("li"),ipe=a("strong"),rNo=o("nezha"),tNo=o(" \u2014 "),TV=a("a"),aNo=o("NezhaForMaskedLM"),nNo=o(" (Nezha model)"),sNo=l(),db=a("li"),dpe=a("strong"),lNo=o("nystromformer"),iNo=o(" \u2014 "),MV=a("a"),dNo=o("NystromformerForMaskedLM"),cNo=o(" (Nystr\xF6mformer model)"),fNo=l(),cb=a("li"),cpe=a("strong"),mNo=o("perceiver"),gNo=o(" \u2014 "),EV=a("a"),hNo=o("PerceiverForMaskedLM"),pNo=o(" (Perceiver model)"),_No=l(),fb=a("li"),fpe=a("strong"),uNo=o("qdqbert"),bNo=o(" \u2014 "),CV=a("a"),vNo=o("QDQBertForMaskedLM"),FNo=o(" (QDQBert model)"),TNo=l(),mb=a("li"),mpe=a("strong"),MNo=o("reformer"),ENo=o(" \u2014 "),wV=a("a"),CNo=o("ReformerForMaskedLM"),wNo=o(" (Reformer model)"),ANo=l(),gb=a("li"),gpe=a("strong"),LNo=o("rembert"),yNo=o(" \u2014 "),AV=a("a"),xNo=o("RemBertForMaskedLM"),$No=o(" (RemBERT model)"),kNo=l(),hb=a("li"),hpe=a("strong"),SNo=o("roberta"),RNo=o(" \u2014 "),LV=a("a"),PNo=o("RobertaForMaskedLM"),BNo=o(" (RoBERTa model)"),INo=l(),pb=a("li"),ppe=a("strong"),NNo=o("roformer"),qNo=o(" \u2014 "),yV=a("a"),jNo=o("RoFormerForMaskedLM"),DNo=o(" (RoFormer model)"),GNo=l(),_b=a("li"),_pe=a("strong"),ONo=o("squeezebert"),VNo=o(" \u2014 "),xV=a("a"),XNo=o("SqueezeBertForMaskedLM"),zNo=o(" (SqueezeBERT model)"),WNo=l(),ub=a("li"),upe=a("strong"),QNo=o("tapas"),HNo=o(" \u2014 "),$V=a("a"),UNo=o("TapasForMaskedLM"),JNo=o(" (TAPAS model)"),YNo=l(),bb=a("li"),bpe=a("strong"),KNo=o("wav2vec2"),ZNo=o(" \u2014 "),vpe=a("code"),eqo=o("Wav2Vec2ForMaskedLM"),oqo=o(" (Wav2Vec2 model)"),rqo=l(),vb=a("li"),Fpe=a("strong"),tqo=o("xlm"),aqo=o(" \u2014 "),kV=a("a"),nqo=o("XLMWithLMHeadModel"),sqo=o(" (XLM model)"),lqo=l(),Fb=a("li"),Tpe=a("strong"),iqo=o("xlm-roberta"),dqo=o(" \u2014 "),SV=a("a"),cqo=o("XLMRobertaForMaskedLM"),fqo=o(" (XLM-RoBERTa model)"),mqo=l(),Tb=a("li"),Mpe=a("strong"),gqo=o("xlm-roberta-xl"),hqo=o(" \u2014 "),RV=a("a"),pqo=o("XLMRobertaXLForMaskedLM"),_qo=o(" (XLM-RoBERTa-XL model)"),uqo=l(),Mb=a("li"),Epe=a("strong"),bqo=o("yoso"),vqo=o(" \u2014 "),PV=a("a"),Fqo=o("YosoForMaskedLM"),Tqo=o(" (YOSO model)"),Mqo=l(),Eb=a("p"),Eqo=o("The model is set in evaluation mode by default using "),Cpe=a("code"),Cqo=o("model.eval()"),wqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wpe=a("code"),Aqo=o("model.train()"),Lqo=l(),F(Cb.$$.fragment),jXe=l(),ed=a("h2"),wb=a("a"),Ape=a("span"),F(oL.$$.fragment),yqo=l(),Lpe=a("span"),xqo=o("AutoModelForSeq2SeqLM"),DXe=l(),Po=a("div"),F(rL.$$.fragment),$qo=l(),od=a("p"),kqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),BV=a("a"),Sqo=o("from_pretrained()"),Rqo=o(" class method or the "),IV=a("a"),Pqo=o("from_config()"),Bqo=o(` class
method.`),Iqo=l(),tL=a("p"),Nqo=o("This class cannot be instantiated directly using "),ype=a("code"),qqo=o("__init__()"),jqo=o(" (throws an error)."),Dqo=l(),mt=a("div"),F(aL.$$.fragment),Gqo=l(),xpe=a("p"),Oqo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Vqo=l(),rd=a("p"),Xqo=o(`Note:
Loading a model from its configuration file does `),$pe=a("strong"),zqo=o("not"),Wqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NV=a("a"),Qqo=o("from_pretrained()"),Hqo=o(" to load the model weights."),Uqo=l(),F(Ab.$$.fragment),Jqo=l(),oo=a("div"),F(nL.$$.fragment),Yqo=l(),kpe=a("p"),Kqo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Zqo=l(),Da=a("p"),ejo=o("The model class to instantiate is selected based on the "),Spe=a("code"),ojo=o("model_type"),rjo=o(` property of the config object (either
passed as an argument or loaded from `),Rpe=a("code"),tjo=o("pretrained_model_name_or_path"),ajo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ppe=a("code"),njo=o("pretrained_model_name_or_path"),sjo=o(":"),ljo=l(),pe=a("ul"),Lb=a("li"),Bpe=a("strong"),ijo=o("bart"),djo=o(" \u2014 "),qV=a("a"),cjo=o("BartForConditionalGeneration"),fjo=o(" (BART model)"),mjo=l(),yb=a("li"),Ipe=a("strong"),gjo=o("bigbird_pegasus"),hjo=o(" \u2014 "),jV=a("a"),pjo=o("BigBirdPegasusForConditionalGeneration"),_jo=o(" (BigBird-Pegasus model)"),ujo=l(),xb=a("li"),Npe=a("strong"),bjo=o("blenderbot"),vjo=o(" \u2014 "),DV=a("a"),Fjo=o("BlenderbotForConditionalGeneration"),Tjo=o(" (Blenderbot model)"),Mjo=l(),$b=a("li"),qpe=a("strong"),Ejo=o("blenderbot-small"),Cjo=o(" \u2014 "),GV=a("a"),wjo=o("BlenderbotSmallForConditionalGeneration"),Ajo=o(" (BlenderbotSmall model)"),Ljo=l(),kb=a("li"),jpe=a("strong"),yjo=o("encoder-decoder"),xjo=o(" \u2014 "),OV=a("a"),$jo=o("EncoderDecoderModel"),kjo=o(" (Encoder decoder model)"),Sjo=l(),Sb=a("li"),Dpe=a("strong"),Rjo=o("fsmt"),Pjo=o(" \u2014 "),VV=a("a"),Bjo=o("FSMTForConditionalGeneration"),Ijo=o(" (FairSeq Machine-Translation model)"),Njo=l(),Rb=a("li"),Gpe=a("strong"),qjo=o("led"),jjo=o(" \u2014 "),XV=a("a"),Djo=o("LEDForConditionalGeneration"),Gjo=o(" (LED model)"),Ojo=l(),Pb=a("li"),Ope=a("strong"),Vjo=o("longt5"),Xjo=o(" \u2014 "),zV=a("a"),zjo=o("LongT5ForConditionalGeneration"),Wjo=o(" (LongT5 model)"),Qjo=l(),Bb=a("li"),Vpe=a("strong"),Hjo=o("m2m_100"),Ujo=o(" \u2014 "),WV=a("a"),Jjo=o("M2M100ForConditionalGeneration"),Yjo=o(" (M2M100 model)"),Kjo=l(),Ib=a("li"),Xpe=a("strong"),Zjo=o("marian"),eDo=o(" \u2014 "),QV=a("a"),oDo=o("MarianMTModel"),rDo=o(" (Marian model)"),tDo=l(),Nb=a("li"),zpe=a("strong"),aDo=o("mbart"),nDo=o(" \u2014 "),HV=a("a"),sDo=o("MBartForConditionalGeneration"),lDo=o(" (mBART model)"),iDo=l(),qb=a("li"),Wpe=a("strong"),dDo=o("mt5"),cDo=o(" \u2014 "),UV=a("a"),fDo=o("MT5ForConditionalGeneration"),mDo=o(" (MT5 model)"),gDo=l(),jb=a("li"),Qpe=a("strong"),hDo=o("mvp"),pDo=o(" \u2014 "),JV=a("a"),_Do=o("MvpForConditionalGeneration"),uDo=o(" (MVP model)"),bDo=l(),Db=a("li"),Hpe=a("strong"),vDo=o("pegasus"),FDo=o(" \u2014 "),YV=a("a"),TDo=o("PegasusForConditionalGeneration"),MDo=o(" (Pegasus model)"),EDo=l(),Gb=a("li"),Upe=a("strong"),CDo=o("plbart"),wDo=o(" \u2014 "),KV=a("a"),ADo=o("PLBartForConditionalGeneration"),LDo=o(" (PLBart model)"),yDo=l(),Ob=a("li"),Jpe=a("strong"),xDo=o("prophetnet"),$Do=o(" \u2014 "),ZV=a("a"),kDo=o("ProphetNetForConditionalGeneration"),SDo=o(" (ProphetNet model)"),RDo=l(),Vb=a("li"),Ype=a("strong"),PDo=o("t5"),BDo=o(" \u2014 "),eX=a("a"),IDo=o("T5ForConditionalGeneration"),NDo=o(" (T5 model)"),qDo=l(),Xb=a("li"),Kpe=a("strong"),jDo=o("xlm-prophetnet"),DDo=o(" \u2014 "),oX=a("a"),GDo=o("XLMProphetNetForConditionalGeneration"),ODo=o(" (XLM-ProphetNet model)"),VDo=l(),zb=a("p"),XDo=o("The model is set in evaluation mode by default using "),Zpe=a("code"),zDo=o("model.eval()"),WDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e_e=a("code"),QDo=o("model.train()"),HDo=l(),F(Wb.$$.fragment),GXe=l(),td=a("h2"),Qb=a("a"),o_e=a("span"),F(sL.$$.fragment),UDo=l(),r_e=a("span"),JDo=o("AutoModelForSequenceClassification"),OXe=l(),Bo=a("div"),F(lL.$$.fragment),YDo=l(),ad=a("p"),KDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),rX=a("a"),ZDo=o("from_pretrained()"),eGo=o(" class method or the "),tX=a("a"),oGo=o("from_config()"),rGo=o(` class
method.`),tGo=l(),iL=a("p"),aGo=o("This class cannot be instantiated directly using "),t_e=a("code"),nGo=o("__init__()"),sGo=o(" (throws an error)."),lGo=l(),gt=a("div"),F(dL.$$.fragment),iGo=l(),a_e=a("p"),dGo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),cGo=l(),nd=a("p"),fGo=o(`Note:
Loading a model from its configuration file does `),n_e=a("strong"),mGo=o("not"),gGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=a("a"),hGo=o("from_pretrained()"),pGo=o(" to load the model weights."),_Go=l(),F(Hb.$$.fragment),uGo=l(),ro=a("div"),F(cL.$$.fragment),bGo=l(),s_e=a("p"),vGo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),FGo=l(),Ga=a("p"),TGo=o("The model class to instantiate is selected based on the "),l_e=a("code"),MGo=o("model_type"),EGo=o(` property of the config object (either
passed as an argument or loaded from `),i_e=a("code"),CGo=o("pretrained_model_name_or_path"),wGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d_e=a("code"),AGo=o("pretrained_model_name_or_path"),LGo=o(":"),yGo=l(),N=a("ul"),Ub=a("li"),c_e=a("strong"),xGo=o("albert"),$Go=o(" \u2014 "),nX=a("a"),kGo=o("AlbertForSequenceClassification"),SGo=o(" (ALBERT model)"),RGo=l(),Jb=a("li"),f_e=a("strong"),PGo=o("bart"),BGo=o(" \u2014 "),sX=a("a"),IGo=o("BartForSequenceClassification"),NGo=o(" (BART model)"),qGo=l(),Yb=a("li"),m_e=a("strong"),jGo=o("bert"),DGo=o(" \u2014 "),lX=a("a"),GGo=o("BertForSequenceClassification"),OGo=o(" (BERT model)"),VGo=l(),Kb=a("li"),g_e=a("strong"),XGo=o("big_bird"),zGo=o(" \u2014 "),iX=a("a"),WGo=o("BigBirdForSequenceClassification"),QGo=o(" (BigBird model)"),HGo=l(),Zb=a("li"),h_e=a("strong"),UGo=o("bigbird_pegasus"),JGo=o(" \u2014 "),dX=a("a"),YGo=o("BigBirdPegasusForSequenceClassification"),KGo=o(" (BigBird-Pegasus model)"),ZGo=l(),ev=a("li"),p_e=a("strong"),eOo=o("bloom"),oOo=o(" \u2014 "),cX=a("a"),rOo=o("BloomForSequenceClassification"),tOo=o(" (BLOOM model)"),aOo=l(),ov=a("li"),__e=a("strong"),nOo=o("camembert"),sOo=o(" \u2014 "),fX=a("a"),lOo=o("CamembertForSequenceClassification"),iOo=o(" (CamemBERT model)"),dOo=l(),rv=a("li"),u_e=a("strong"),cOo=o("canine"),fOo=o(" \u2014 "),mX=a("a"),mOo=o("CanineForSequenceClassification"),gOo=o(" (CANINE model)"),hOo=l(),tv=a("li"),b_e=a("strong"),pOo=o("convbert"),_Oo=o(" \u2014 "),gX=a("a"),uOo=o("ConvBertForSequenceClassification"),bOo=o(" (ConvBERT model)"),vOo=l(),av=a("li"),v_e=a("strong"),FOo=o("ctrl"),TOo=o(" \u2014 "),hX=a("a"),MOo=o("CTRLForSequenceClassification"),EOo=o(" (CTRL model)"),COo=l(),nv=a("li"),F_e=a("strong"),wOo=o("data2vec-text"),AOo=o(" \u2014 "),pX=a("a"),LOo=o("Data2VecTextForSequenceClassification"),yOo=o(" (Data2VecText model)"),xOo=l(),sv=a("li"),T_e=a("strong"),$Oo=o("deberta"),kOo=o(" \u2014 "),_X=a("a"),SOo=o("DebertaForSequenceClassification"),ROo=o(" (DeBERTa model)"),POo=l(),lv=a("li"),M_e=a("strong"),BOo=o("deberta-v2"),IOo=o(" \u2014 "),uX=a("a"),NOo=o("DebertaV2ForSequenceClassification"),qOo=o(" (DeBERTa-v2 model)"),jOo=l(),iv=a("li"),E_e=a("strong"),DOo=o("distilbert"),GOo=o(" \u2014 "),bX=a("a"),OOo=o("DistilBertForSequenceClassification"),VOo=o(" (DistilBERT model)"),XOo=l(),dv=a("li"),C_e=a("strong"),zOo=o("electra"),WOo=o(" \u2014 "),vX=a("a"),QOo=o("ElectraForSequenceClassification"),HOo=o(" (ELECTRA model)"),UOo=l(),cv=a("li"),w_e=a("strong"),JOo=o("flaubert"),YOo=o(" \u2014 "),FX=a("a"),KOo=o("FlaubertForSequenceClassification"),ZOo=o(" (FlauBERT model)"),eVo=l(),fv=a("li"),A_e=a("strong"),oVo=o("fnet"),rVo=o(" \u2014 "),TX=a("a"),tVo=o("FNetForSequenceClassification"),aVo=o(" (FNet model)"),nVo=l(),mv=a("li"),L_e=a("strong"),sVo=o("funnel"),lVo=o(" \u2014 "),MX=a("a"),iVo=o("FunnelForSequenceClassification"),dVo=o(" (Funnel Transformer model)"),cVo=l(),gv=a("li"),y_e=a("strong"),fVo=o("gpt2"),mVo=o(" \u2014 "),EX=a("a"),gVo=o("GPT2ForSequenceClassification"),hVo=o(" (OpenAI GPT-2 model)"),pVo=l(),hv=a("li"),x_e=a("strong"),_Vo=o("gpt_neo"),uVo=o(" \u2014 "),CX=a("a"),bVo=o("GPTNeoForSequenceClassification"),vVo=o(" (GPT Neo model)"),FVo=l(),pv=a("li"),$_e=a("strong"),TVo=o("gptj"),MVo=o(" \u2014 "),wX=a("a"),EVo=o("GPTJForSequenceClassification"),CVo=o(" (GPT-J model)"),wVo=l(),_v=a("li"),k_e=a("strong"),AVo=o("ibert"),LVo=o(" \u2014 "),AX=a("a"),yVo=o("IBertForSequenceClassification"),xVo=o(" (I-BERT model)"),$Vo=l(),uv=a("li"),S_e=a("strong"),kVo=o("layoutlm"),SVo=o(" \u2014 "),LX=a("a"),RVo=o("LayoutLMForSequenceClassification"),PVo=o(" (LayoutLM model)"),BVo=l(),bv=a("li"),R_e=a("strong"),IVo=o("layoutlmv2"),NVo=o(" \u2014 "),yX=a("a"),qVo=o("LayoutLMv2ForSequenceClassification"),jVo=o(" (LayoutLMv2 model)"),DVo=l(),vv=a("li"),P_e=a("strong"),GVo=o("layoutlmv3"),OVo=o(" \u2014 "),xX=a("a"),VVo=o("LayoutLMv3ForSequenceClassification"),XVo=o(" (LayoutLMv3 model)"),zVo=l(),Fv=a("li"),B_e=a("strong"),WVo=o("led"),QVo=o(" \u2014 "),$X=a("a"),HVo=o("LEDForSequenceClassification"),UVo=o(" (LED model)"),JVo=l(),Tv=a("li"),I_e=a("strong"),YVo=o("longformer"),KVo=o(" \u2014 "),kX=a("a"),ZVo=o("LongformerForSequenceClassification"),eXo=o(" (Longformer model)"),oXo=l(),Mv=a("li"),N_e=a("strong"),rXo=o("mbart"),tXo=o(" \u2014 "),SX=a("a"),aXo=o("MBartForSequenceClassification"),nXo=o(" (mBART model)"),sXo=l(),Ev=a("li"),q_e=a("strong"),lXo=o("megatron-bert"),iXo=o(" \u2014 "),RX=a("a"),dXo=o("MegatronBertForSequenceClassification"),cXo=o(" (Megatron-BERT model)"),fXo=l(),Cv=a("li"),j_e=a("strong"),mXo=o("mobilebert"),gXo=o(" \u2014 "),PX=a("a"),hXo=o("MobileBertForSequenceClassification"),pXo=o(" (MobileBERT model)"),_Xo=l(),wv=a("li"),D_e=a("strong"),uXo=o("mpnet"),bXo=o(" \u2014 "),BX=a("a"),vXo=o("MPNetForSequenceClassification"),FXo=o(" (MPNet model)"),TXo=l(),Av=a("li"),G_e=a("strong"),MXo=o("mvp"),EXo=o(" \u2014 "),IX=a("a"),CXo=o("MvpForSequenceClassification"),wXo=o(" (MVP model)"),AXo=l(),Lv=a("li"),O_e=a("strong"),LXo=o("nezha"),yXo=o(" \u2014 "),NX=a("a"),xXo=o("NezhaForSequenceClassification"),$Xo=o(" (Nezha model)"),kXo=l(),yv=a("li"),V_e=a("strong"),SXo=o("nystromformer"),RXo=o(" \u2014 "),qX=a("a"),PXo=o("NystromformerForSequenceClassification"),BXo=o(" (Nystr\xF6mformer model)"),IXo=l(),xv=a("li"),X_e=a("strong"),NXo=o("openai-gpt"),qXo=o(" \u2014 "),jX=a("a"),jXo=o("OpenAIGPTForSequenceClassification"),DXo=o(" (OpenAI GPT model)"),GXo=l(),$v=a("li"),z_e=a("strong"),OXo=o("perceiver"),VXo=o(" \u2014 "),DX=a("a"),XXo=o("PerceiverForSequenceClassification"),zXo=o(" (Perceiver model)"),WXo=l(),kv=a("li"),W_e=a("strong"),QXo=o("plbart"),HXo=o(" \u2014 "),GX=a("a"),UXo=o("PLBartForSequenceClassification"),JXo=o(" (PLBart model)"),YXo=l(),Sv=a("li"),Q_e=a("strong"),KXo=o("qdqbert"),ZXo=o(" \u2014 "),OX=a("a"),ezo=o("QDQBertForSequenceClassification"),ozo=o(" (QDQBert model)"),rzo=l(),Rv=a("li"),H_e=a("strong"),tzo=o("reformer"),azo=o(" \u2014 "),VX=a("a"),nzo=o("ReformerForSequenceClassification"),szo=o(" (Reformer model)"),lzo=l(),Pv=a("li"),U_e=a("strong"),izo=o("rembert"),dzo=o(" \u2014 "),XX=a("a"),czo=o("RemBertForSequenceClassification"),fzo=o(" (RemBERT model)"),mzo=l(),Bv=a("li"),J_e=a("strong"),gzo=o("roberta"),hzo=o(" \u2014 "),zX=a("a"),pzo=o("RobertaForSequenceClassification"),_zo=o(" (RoBERTa model)"),uzo=l(),Iv=a("li"),Y_e=a("strong"),bzo=o("roformer"),vzo=o(" \u2014 "),WX=a("a"),Fzo=o("RoFormerForSequenceClassification"),Tzo=o(" (RoFormer model)"),Mzo=l(),Nv=a("li"),K_e=a("strong"),Ezo=o("squeezebert"),Czo=o(" \u2014 "),QX=a("a"),wzo=o("SqueezeBertForSequenceClassification"),Azo=o(" (SqueezeBERT model)"),Lzo=l(),qv=a("li"),Z_e=a("strong"),yzo=o("tapas"),xzo=o(" \u2014 "),HX=a("a"),$zo=o("TapasForSequenceClassification"),kzo=o(" (TAPAS model)"),Szo=l(),jv=a("li"),eue=a("strong"),Rzo=o("transfo-xl"),Pzo=o(" \u2014 "),UX=a("a"),Bzo=o("TransfoXLForSequenceClassification"),Izo=o(" (Transformer-XL model)"),Nzo=l(),Dv=a("li"),oue=a("strong"),qzo=o("xlm"),jzo=o(" \u2014 "),JX=a("a"),Dzo=o("XLMForSequenceClassification"),Gzo=o(" (XLM model)"),Ozo=l(),Gv=a("li"),rue=a("strong"),Vzo=o("xlm-roberta"),Xzo=o(" \u2014 "),YX=a("a"),zzo=o("XLMRobertaForSequenceClassification"),Wzo=o(" (XLM-RoBERTa model)"),Qzo=l(),Ov=a("li"),tue=a("strong"),Hzo=o("xlm-roberta-xl"),Uzo=o(" \u2014 "),KX=a("a"),Jzo=o("XLMRobertaXLForSequenceClassification"),Yzo=o(" (XLM-RoBERTa-XL model)"),Kzo=l(),Vv=a("li"),aue=a("strong"),Zzo=o("xlnet"),eWo=o(" \u2014 "),ZX=a("a"),oWo=o("XLNetForSequenceClassification"),rWo=o(" (XLNet model)"),tWo=l(),Xv=a("li"),nue=a("strong"),aWo=o("yoso"),nWo=o(" \u2014 "),ez=a("a"),sWo=o("YosoForSequenceClassification"),lWo=o(" (YOSO model)"),iWo=l(),zv=a("p"),dWo=o("The model is set in evaluation mode by default using "),sue=a("code"),cWo=o("model.eval()"),fWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lue=a("code"),mWo=o("model.train()"),gWo=l(),F(Wv.$$.fragment),VXe=l(),sd=a("h2"),Qv=a("a"),iue=a("span"),F(fL.$$.fragment),hWo=l(),due=a("span"),pWo=o("AutoModelForMultipleChoice"),XXe=l(),Io=a("div"),F(mL.$$.fragment),_Wo=l(),ld=a("p"),uWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),oz=a("a"),bWo=o("from_pretrained()"),vWo=o(" class method or the "),rz=a("a"),FWo=o("from_config()"),TWo=o(` class
method.`),MWo=l(),gL=a("p"),EWo=o("This class cannot be instantiated directly using "),cue=a("code"),CWo=o("__init__()"),wWo=o(" (throws an error)."),AWo=l(),ht=a("div"),F(hL.$$.fragment),LWo=l(),fue=a("p"),yWo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),xWo=l(),id=a("p"),$Wo=o(`Note:
Loading a model from its configuration file does `),mue=a("strong"),kWo=o("not"),SWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tz=a("a"),RWo=o("from_pretrained()"),PWo=o(" to load the model weights."),BWo=l(),F(Hv.$$.fragment),IWo=l(),to=a("div"),F(pL.$$.fragment),NWo=l(),gue=a("p"),qWo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),jWo=l(),Oa=a("p"),DWo=o("The model class to instantiate is selected based on the "),hue=a("code"),GWo=o("model_type"),OWo=o(` property of the config object (either
passed as an argument or loaded from `),pue=a("code"),VWo=o("pretrained_model_name_or_path"),XWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ue=a("code"),zWo=o("pretrained_model_name_or_path"),WWo=o(":"),QWo=l(),Z=a("ul"),Uv=a("li"),uue=a("strong"),HWo=o("albert"),UWo=o(" \u2014 "),az=a("a"),JWo=o("AlbertForMultipleChoice"),YWo=o(" (ALBERT model)"),KWo=l(),Jv=a("li"),bue=a("strong"),ZWo=o("bert"),eQo=o(" \u2014 "),nz=a("a"),oQo=o("BertForMultipleChoice"),rQo=o(" (BERT model)"),tQo=l(),Yv=a("li"),vue=a("strong"),aQo=o("big_bird"),nQo=o(" \u2014 "),sz=a("a"),sQo=o("BigBirdForMultipleChoice"),lQo=o(" (BigBird model)"),iQo=l(),Kv=a("li"),Fue=a("strong"),dQo=o("camembert"),cQo=o(" \u2014 "),lz=a("a"),fQo=o("CamembertForMultipleChoice"),mQo=o(" (CamemBERT model)"),gQo=l(),Zv=a("li"),Tue=a("strong"),hQo=o("canine"),pQo=o(" \u2014 "),iz=a("a"),_Qo=o("CanineForMultipleChoice"),uQo=o(" (CANINE model)"),bQo=l(),e3=a("li"),Mue=a("strong"),vQo=o("convbert"),FQo=o(" \u2014 "),dz=a("a"),TQo=o("ConvBertForMultipleChoice"),MQo=o(" (ConvBERT model)"),EQo=l(),o3=a("li"),Eue=a("strong"),CQo=o("data2vec-text"),wQo=o(" \u2014 "),cz=a("a"),AQo=o("Data2VecTextForMultipleChoice"),LQo=o(" (Data2VecText model)"),yQo=l(),r3=a("li"),Cue=a("strong"),xQo=o("deberta-v2"),$Qo=o(" \u2014 "),fz=a("a"),kQo=o("DebertaV2ForMultipleChoice"),SQo=o(" (DeBERTa-v2 model)"),RQo=l(),t3=a("li"),wue=a("strong"),PQo=o("distilbert"),BQo=o(" \u2014 "),mz=a("a"),IQo=o("DistilBertForMultipleChoice"),NQo=o(" (DistilBERT model)"),qQo=l(),a3=a("li"),Aue=a("strong"),jQo=o("electra"),DQo=o(" \u2014 "),gz=a("a"),GQo=o("ElectraForMultipleChoice"),OQo=o(" (ELECTRA model)"),VQo=l(),n3=a("li"),Lue=a("strong"),XQo=o("flaubert"),zQo=o(" \u2014 "),hz=a("a"),WQo=o("FlaubertForMultipleChoice"),QQo=o(" (FlauBERT model)"),HQo=l(),s3=a("li"),yue=a("strong"),UQo=o("fnet"),JQo=o(" \u2014 "),pz=a("a"),YQo=o("FNetForMultipleChoice"),KQo=o(" (FNet model)"),ZQo=l(),l3=a("li"),xue=a("strong"),eHo=o("funnel"),oHo=o(" \u2014 "),_z=a("a"),rHo=o("FunnelForMultipleChoice"),tHo=o(" (Funnel Transformer model)"),aHo=l(),i3=a("li"),$ue=a("strong"),nHo=o("ibert"),sHo=o(" \u2014 "),uz=a("a"),lHo=o("IBertForMultipleChoice"),iHo=o(" (I-BERT model)"),dHo=l(),d3=a("li"),kue=a("strong"),cHo=o("longformer"),fHo=o(" \u2014 "),bz=a("a"),mHo=o("LongformerForMultipleChoice"),gHo=o(" (Longformer model)"),hHo=l(),c3=a("li"),Sue=a("strong"),pHo=o("megatron-bert"),_Ho=o(" \u2014 "),vz=a("a"),uHo=o("MegatronBertForMultipleChoice"),bHo=o(" (Megatron-BERT model)"),vHo=l(),f3=a("li"),Rue=a("strong"),FHo=o("mobilebert"),THo=o(" \u2014 "),Fz=a("a"),MHo=o("MobileBertForMultipleChoice"),EHo=o(" (MobileBERT model)"),CHo=l(),m3=a("li"),Pue=a("strong"),wHo=o("mpnet"),AHo=o(" \u2014 "),Tz=a("a"),LHo=o("MPNetForMultipleChoice"),yHo=o(" (MPNet model)"),xHo=l(),g3=a("li"),Bue=a("strong"),$Ho=o("nezha"),kHo=o(" \u2014 "),Mz=a("a"),SHo=o("NezhaForMultipleChoice"),RHo=o(" (Nezha model)"),PHo=l(),h3=a("li"),Iue=a("strong"),BHo=o("nystromformer"),IHo=o(" \u2014 "),Ez=a("a"),NHo=o("NystromformerForMultipleChoice"),qHo=o(" (Nystr\xF6mformer model)"),jHo=l(),p3=a("li"),Nue=a("strong"),DHo=o("qdqbert"),GHo=o(" \u2014 "),Cz=a("a"),OHo=o("QDQBertForMultipleChoice"),VHo=o(" (QDQBert model)"),XHo=l(),_3=a("li"),que=a("strong"),zHo=o("rembert"),WHo=o(" \u2014 "),wz=a("a"),QHo=o("RemBertForMultipleChoice"),HHo=o(" (RemBERT model)"),UHo=l(),u3=a("li"),jue=a("strong"),JHo=o("roberta"),YHo=o(" \u2014 "),Az=a("a"),KHo=o("RobertaForMultipleChoice"),ZHo=o(" (RoBERTa model)"),eUo=l(),b3=a("li"),Due=a("strong"),oUo=o("roformer"),rUo=o(" \u2014 "),Lz=a("a"),tUo=o("RoFormerForMultipleChoice"),aUo=o(" (RoFormer model)"),nUo=l(),v3=a("li"),Gue=a("strong"),sUo=o("squeezebert"),lUo=o(" \u2014 "),yz=a("a"),iUo=o("SqueezeBertForMultipleChoice"),dUo=o(" (SqueezeBERT model)"),cUo=l(),F3=a("li"),Oue=a("strong"),fUo=o("xlm"),mUo=o(" \u2014 "),xz=a("a"),gUo=o("XLMForMultipleChoice"),hUo=o(" (XLM model)"),pUo=l(),T3=a("li"),Vue=a("strong"),_Uo=o("xlm-roberta"),uUo=o(" \u2014 "),$z=a("a"),bUo=o("XLMRobertaForMultipleChoice"),vUo=o(" (XLM-RoBERTa model)"),FUo=l(),M3=a("li"),Xue=a("strong"),TUo=o("xlm-roberta-xl"),MUo=o(" \u2014 "),kz=a("a"),EUo=o("XLMRobertaXLForMultipleChoice"),CUo=o(" (XLM-RoBERTa-XL model)"),wUo=l(),E3=a("li"),zue=a("strong"),AUo=o("xlnet"),LUo=o(" \u2014 "),Sz=a("a"),yUo=o("XLNetForMultipleChoice"),xUo=o(" (XLNet model)"),$Uo=l(),C3=a("li"),Wue=a("strong"),kUo=o("yoso"),SUo=o(" \u2014 "),Rz=a("a"),RUo=o("YosoForMultipleChoice"),PUo=o(" (YOSO model)"),BUo=l(),w3=a("p"),IUo=o("The model is set in evaluation mode by default using "),Que=a("code"),NUo=o("model.eval()"),qUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hue=a("code"),jUo=o("model.train()"),DUo=l(),F(A3.$$.fragment),zXe=l(),dd=a("h2"),L3=a("a"),Uue=a("span"),F(_L.$$.fragment),GUo=l(),Jue=a("span"),OUo=o("AutoModelForNextSentencePrediction"),WXe=l(),No=a("div"),F(uL.$$.fragment),VUo=l(),cd=a("p"),XUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Pz=a("a"),zUo=o("from_pretrained()"),WUo=o(" class method or the "),Bz=a("a"),QUo=o("from_config()"),HUo=o(` class
method.`),UUo=l(),bL=a("p"),JUo=o("This class cannot be instantiated directly using "),Yue=a("code"),YUo=o("__init__()"),KUo=o(" (throws an error)."),ZUo=l(),pt=a("div"),F(vL.$$.fragment),eJo=l(),Kue=a("p"),oJo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),rJo=l(),fd=a("p"),tJo=o(`Note:
Loading a model from its configuration file does `),Zue=a("strong"),aJo=o("not"),nJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Iz=a("a"),sJo=o("from_pretrained()"),lJo=o(" to load the model weights."),iJo=l(),F(y3.$$.fragment),dJo=l(),ao=a("div"),F(FL.$$.fragment),cJo=l(),e1e=a("p"),fJo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),mJo=l(),Va=a("p"),gJo=o("The model class to instantiate is selected based on the "),o1e=a("code"),hJo=o("model_type"),pJo=o(` property of the config object (either
passed as an argument or loaded from `),r1e=a("code"),_Jo=o("pretrained_model_name_or_path"),uJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t1e=a("code"),bJo=o("pretrained_model_name_or_path"),vJo=o(":"),FJo=l(),qo=a("ul"),x3=a("li"),a1e=a("strong"),TJo=o("bert"),MJo=o(" \u2014 "),Nz=a("a"),EJo=o("BertForNextSentencePrediction"),CJo=o(" (BERT model)"),wJo=l(),$3=a("li"),n1e=a("strong"),AJo=o("fnet"),LJo=o(" \u2014 "),qz=a("a"),yJo=o("FNetForNextSentencePrediction"),xJo=o(" (FNet model)"),$Jo=l(),k3=a("li"),s1e=a("strong"),kJo=o("megatron-bert"),SJo=o(" \u2014 "),jz=a("a"),RJo=o("MegatronBertForNextSentencePrediction"),PJo=o(" (Megatron-BERT model)"),BJo=l(),S3=a("li"),l1e=a("strong"),IJo=o("mobilebert"),NJo=o(" \u2014 "),Dz=a("a"),qJo=o("MobileBertForNextSentencePrediction"),jJo=o(" (MobileBERT model)"),DJo=l(),R3=a("li"),i1e=a("strong"),GJo=o("nezha"),OJo=o(" \u2014 "),Gz=a("a"),VJo=o("NezhaForNextSentencePrediction"),XJo=o(" (Nezha model)"),zJo=l(),P3=a("li"),d1e=a("strong"),WJo=o("qdqbert"),QJo=o(" \u2014 "),Oz=a("a"),HJo=o("QDQBertForNextSentencePrediction"),UJo=o(" (QDQBert model)"),JJo=l(),B3=a("p"),YJo=o("The model is set in evaluation mode by default using "),c1e=a("code"),KJo=o("model.eval()"),ZJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f1e=a("code"),eYo=o("model.train()"),oYo=l(),F(I3.$$.fragment),QXe=l(),md=a("h2"),N3=a("a"),m1e=a("span"),F(TL.$$.fragment),rYo=l(),g1e=a("span"),tYo=o("AutoModelForTokenClassification"),HXe=l(),jo=a("div"),F(ML.$$.fragment),aYo=l(),gd=a("p"),nYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Vz=a("a"),sYo=o("from_pretrained()"),lYo=o(" class method or the "),Xz=a("a"),iYo=o("from_config()"),dYo=o(` class
method.`),cYo=l(),EL=a("p"),fYo=o("This class cannot be instantiated directly using "),h1e=a("code"),mYo=o("__init__()"),gYo=o(" (throws an error)."),hYo=l(),_t=a("div"),F(CL.$$.fragment),pYo=l(),p1e=a("p"),_Yo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),uYo=l(),hd=a("p"),bYo=o(`Note:
Loading a model from its configuration file does `),_1e=a("strong"),vYo=o("not"),FYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zz=a("a"),TYo=o("from_pretrained()"),MYo=o(" to load the model weights."),EYo=l(),F(q3.$$.fragment),CYo=l(),no=a("div"),F(wL.$$.fragment),wYo=l(),u1e=a("p"),AYo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),LYo=l(),Xa=a("p"),yYo=o("The model class to instantiate is selected based on the "),b1e=a("code"),xYo=o("model_type"),$Yo=o(` property of the config object (either
passed as an argument or loaded from `),v1e=a("code"),kYo=o("pretrained_model_name_or_path"),SYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F1e=a("code"),RYo=o("pretrained_model_name_or_path"),PYo=o(":"),BYo=l(),U=a("ul"),j3=a("li"),T1e=a("strong"),IYo=o("albert"),NYo=o(" \u2014 "),Wz=a("a"),qYo=o("AlbertForTokenClassification"),jYo=o(" (ALBERT model)"),DYo=l(),D3=a("li"),M1e=a("strong"),GYo=o("bert"),OYo=o(" \u2014 "),Qz=a("a"),VYo=o("BertForTokenClassification"),XYo=o(" (BERT model)"),zYo=l(),G3=a("li"),E1e=a("strong"),WYo=o("big_bird"),QYo=o(" \u2014 "),Hz=a("a"),HYo=o("BigBirdForTokenClassification"),UYo=o(" (BigBird model)"),JYo=l(),O3=a("li"),C1e=a("strong"),YYo=o("bloom"),KYo=o(" \u2014 "),Uz=a("a"),ZYo=o("BloomForTokenClassification"),eKo=o(" (BLOOM model)"),oKo=l(),V3=a("li"),w1e=a("strong"),rKo=o("camembert"),tKo=o(" \u2014 "),Jz=a("a"),aKo=o("CamembertForTokenClassification"),nKo=o(" (CamemBERT model)"),sKo=l(),X3=a("li"),A1e=a("strong"),lKo=o("canine"),iKo=o(" \u2014 "),Yz=a("a"),dKo=o("CanineForTokenClassification"),cKo=o(" (CANINE model)"),fKo=l(),z3=a("li"),L1e=a("strong"),mKo=o("convbert"),gKo=o(" \u2014 "),Kz=a("a"),hKo=o("ConvBertForTokenClassification"),pKo=o(" (ConvBERT model)"),_Ko=l(),W3=a("li"),y1e=a("strong"),uKo=o("data2vec-text"),bKo=o(" \u2014 "),Zz=a("a"),vKo=o("Data2VecTextForTokenClassification"),FKo=o(" (Data2VecText model)"),TKo=l(),Q3=a("li"),x1e=a("strong"),MKo=o("deberta"),EKo=o(" \u2014 "),eW=a("a"),CKo=o("DebertaForTokenClassification"),wKo=o(" (DeBERTa model)"),AKo=l(),H3=a("li"),$1e=a("strong"),LKo=o("deberta-v2"),yKo=o(" \u2014 "),oW=a("a"),xKo=o("DebertaV2ForTokenClassification"),$Ko=o(" (DeBERTa-v2 model)"),kKo=l(),U3=a("li"),k1e=a("strong"),SKo=o("distilbert"),RKo=o(" \u2014 "),rW=a("a"),PKo=o("DistilBertForTokenClassification"),BKo=o(" (DistilBERT model)"),IKo=l(),J3=a("li"),S1e=a("strong"),NKo=o("electra"),qKo=o(" \u2014 "),tW=a("a"),jKo=o("ElectraForTokenClassification"),DKo=o(" (ELECTRA model)"),GKo=l(),Y3=a("li"),R1e=a("strong"),OKo=o("flaubert"),VKo=o(" \u2014 "),aW=a("a"),XKo=o("FlaubertForTokenClassification"),zKo=o(" (FlauBERT model)"),WKo=l(),K3=a("li"),P1e=a("strong"),QKo=o("fnet"),HKo=o(" \u2014 "),nW=a("a"),UKo=o("FNetForTokenClassification"),JKo=o(" (FNet model)"),YKo=l(),Z3=a("li"),B1e=a("strong"),KKo=o("funnel"),ZKo=o(" \u2014 "),sW=a("a"),eZo=o("FunnelForTokenClassification"),oZo=o(" (Funnel Transformer model)"),rZo=l(),eF=a("li"),I1e=a("strong"),tZo=o("gpt2"),aZo=o(" \u2014 "),lW=a("a"),nZo=o("GPT2ForTokenClassification"),sZo=o(" (OpenAI GPT-2 model)"),lZo=l(),oF=a("li"),N1e=a("strong"),iZo=o("ibert"),dZo=o(" \u2014 "),iW=a("a"),cZo=o("IBertForTokenClassification"),fZo=o(" (I-BERT model)"),mZo=l(),rF=a("li"),q1e=a("strong"),gZo=o("layoutlm"),hZo=o(" \u2014 "),dW=a("a"),pZo=o("LayoutLMForTokenClassification"),_Zo=o(" (LayoutLM model)"),uZo=l(),tF=a("li"),j1e=a("strong"),bZo=o("layoutlmv2"),vZo=o(" \u2014 "),cW=a("a"),FZo=o("LayoutLMv2ForTokenClassification"),TZo=o(" (LayoutLMv2 model)"),MZo=l(),aF=a("li"),D1e=a("strong"),EZo=o("layoutlmv3"),CZo=o(" \u2014 "),fW=a("a"),wZo=o("LayoutLMv3ForTokenClassification"),AZo=o(" (LayoutLMv3 model)"),LZo=l(),nF=a("li"),G1e=a("strong"),yZo=o("longformer"),xZo=o(" \u2014 "),mW=a("a"),$Zo=o("LongformerForTokenClassification"),kZo=o(" (Longformer model)"),SZo=l(),sF=a("li"),O1e=a("strong"),RZo=o("megatron-bert"),PZo=o(" \u2014 "),gW=a("a"),BZo=o("MegatronBertForTokenClassification"),IZo=o(" (Megatron-BERT model)"),NZo=l(),lF=a("li"),V1e=a("strong"),qZo=o("mobilebert"),jZo=o(" \u2014 "),hW=a("a"),DZo=o("MobileBertForTokenClassification"),GZo=o(" (MobileBERT model)"),OZo=l(),iF=a("li"),X1e=a("strong"),VZo=o("mpnet"),XZo=o(" \u2014 "),pW=a("a"),zZo=o("MPNetForTokenClassification"),WZo=o(" (MPNet model)"),QZo=l(),dF=a("li"),z1e=a("strong"),HZo=o("nezha"),UZo=o(" \u2014 "),_W=a("a"),JZo=o("NezhaForTokenClassification"),YZo=o(" (Nezha model)"),KZo=l(),cF=a("li"),W1e=a("strong"),ZZo=o("nystromformer"),eer=o(" \u2014 "),uW=a("a"),oer=o("NystromformerForTokenClassification"),rer=o(" (Nystr\xF6mformer model)"),ter=l(),fF=a("li"),Q1e=a("strong"),aer=o("qdqbert"),ner=o(" \u2014 "),bW=a("a"),ser=o("QDQBertForTokenClassification"),ler=o(" (QDQBert model)"),ier=l(),mF=a("li"),H1e=a("strong"),der=o("rembert"),cer=o(" \u2014 "),vW=a("a"),fer=o("RemBertForTokenClassification"),mer=o(" (RemBERT model)"),ger=l(),gF=a("li"),U1e=a("strong"),her=o("roberta"),per=o(" \u2014 "),FW=a("a"),_er=o("RobertaForTokenClassification"),uer=o(" (RoBERTa model)"),ber=l(),hF=a("li"),J1e=a("strong"),ver=o("roformer"),Fer=o(" \u2014 "),TW=a("a"),Ter=o("RoFormerForTokenClassification"),Mer=o(" (RoFormer model)"),Eer=l(),pF=a("li"),Y1e=a("strong"),Cer=o("squeezebert"),wer=o(" \u2014 "),MW=a("a"),Aer=o("SqueezeBertForTokenClassification"),Ler=o(" (SqueezeBERT model)"),yer=l(),_F=a("li"),K1e=a("strong"),xer=o("xlm"),$er=o(" \u2014 "),EW=a("a"),ker=o("XLMForTokenClassification"),Ser=o(" (XLM model)"),Rer=l(),uF=a("li"),Z1e=a("strong"),Per=o("xlm-roberta"),Ber=o(" \u2014 "),CW=a("a"),Ier=o("XLMRobertaForTokenClassification"),Ner=o(" (XLM-RoBERTa model)"),qer=l(),bF=a("li"),e2e=a("strong"),jer=o("xlm-roberta-xl"),Der=o(" \u2014 "),wW=a("a"),Ger=o("XLMRobertaXLForTokenClassification"),Oer=o(" (XLM-RoBERTa-XL model)"),Ver=l(),vF=a("li"),o2e=a("strong"),Xer=o("xlnet"),zer=o(" \u2014 "),AW=a("a"),Wer=o("XLNetForTokenClassification"),Qer=o(" (XLNet model)"),Her=l(),FF=a("li"),r2e=a("strong"),Uer=o("yoso"),Jer=o(" \u2014 "),LW=a("a"),Yer=o("YosoForTokenClassification"),Ker=o(" (YOSO model)"),Zer=l(),TF=a("p"),eor=o("The model is set in evaluation mode by default using "),t2e=a("code"),oor=o("model.eval()"),ror=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a2e=a("code"),tor=o("model.train()"),aor=l(),F(MF.$$.fragment),UXe=l(),pd=a("h2"),EF=a("a"),n2e=a("span"),F(AL.$$.fragment),nor=l(),s2e=a("span"),sor=o("AutoModelForQuestionAnswering"),JXe=l(),Do=a("div"),F(LL.$$.fragment),lor=l(),_d=a("p"),ior=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),yW=a("a"),dor=o("from_pretrained()"),cor=o(" class method or the "),xW=a("a"),mor=o("from_config()"),gor=o(` class
method.`),hor=l(),yL=a("p"),por=o("This class cannot be instantiated directly using "),l2e=a("code"),_or=o("__init__()"),uor=o(" (throws an error)."),bor=l(),ut=a("div"),F(xL.$$.fragment),vor=l(),i2e=a("p"),For=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Tor=l(),ud=a("p"),Mor=o(`Note:
Loading a model from its configuration file does `),d2e=a("strong"),Eor=o("not"),Cor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$W=a("a"),wor=o("from_pretrained()"),Aor=o(" to load the model weights."),Lor=l(),F(CF.$$.fragment),yor=l(),so=a("div"),F($L.$$.fragment),xor=l(),c2e=a("p"),$or=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),kor=l(),za=a("p"),Sor=o("The model class to instantiate is selected based on the "),f2e=a("code"),Ror=o("model_type"),Por=o(` property of the config object (either
passed as an argument or loaded from `),m2e=a("code"),Bor=o("pretrained_model_name_or_path"),Ior=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g2e=a("code"),Nor=o("pretrained_model_name_or_path"),qor=o(":"),jor=l(),V=a("ul"),wF=a("li"),h2e=a("strong"),Dor=o("albert"),Gor=o(" \u2014 "),kW=a("a"),Oor=o("AlbertForQuestionAnswering"),Vor=o(" (ALBERT model)"),Xor=l(),AF=a("li"),p2e=a("strong"),zor=o("bart"),Wor=o(" \u2014 "),SW=a("a"),Qor=o("BartForQuestionAnswering"),Hor=o(" (BART model)"),Uor=l(),LF=a("li"),_2e=a("strong"),Jor=o("bert"),Yor=o(" \u2014 "),RW=a("a"),Kor=o("BertForQuestionAnswering"),Zor=o(" (BERT model)"),err=l(),yF=a("li"),u2e=a("strong"),orr=o("big_bird"),rrr=o(" \u2014 "),PW=a("a"),trr=o("BigBirdForQuestionAnswering"),arr=o(" (BigBird model)"),nrr=l(),xF=a("li"),b2e=a("strong"),srr=o("bigbird_pegasus"),lrr=o(" \u2014 "),BW=a("a"),irr=o("BigBirdPegasusForQuestionAnswering"),drr=o(" (BigBird-Pegasus model)"),crr=l(),$F=a("li"),v2e=a("strong"),frr=o("camembert"),mrr=o(" \u2014 "),IW=a("a"),grr=o("CamembertForQuestionAnswering"),hrr=o(" (CamemBERT model)"),prr=l(),kF=a("li"),F2e=a("strong"),_rr=o("canine"),urr=o(" \u2014 "),NW=a("a"),brr=o("CanineForQuestionAnswering"),vrr=o(" (CANINE model)"),Frr=l(),SF=a("li"),T2e=a("strong"),Trr=o("convbert"),Mrr=o(" \u2014 "),qW=a("a"),Err=o("ConvBertForQuestionAnswering"),Crr=o(" (ConvBERT model)"),wrr=l(),RF=a("li"),M2e=a("strong"),Arr=o("data2vec-text"),Lrr=o(" \u2014 "),jW=a("a"),yrr=o("Data2VecTextForQuestionAnswering"),xrr=o(" (Data2VecText model)"),$rr=l(),PF=a("li"),E2e=a("strong"),krr=o("deberta"),Srr=o(" \u2014 "),DW=a("a"),Rrr=o("DebertaForQuestionAnswering"),Prr=o(" (DeBERTa model)"),Brr=l(),BF=a("li"),C2e=a("strong"),Irr=o("deberta-v2"),Nrr=o(" \u2014 "),GW=a("a"),qrr=o("DebertaV2ForQuestionAnswering"),jrr=o(" (DeBERTa-v2 model)"),Drr=l(),IF=a("li"),w2e=a("strong"),Grr=o("distilbert"),Orr=o(" \u2014 "),OW=a("a"),Vrr=o("DistilBertForQuestionAnswering"),Xrr=o(" (DistilBERT model)"),zrr=l(),NF=a("li"),A2e=a("strong"),Wrr=o("electra"),Qrr=o(" \u2014 "),VW=a("a"),Hrr=o("ElectraForQuestionAnswering"),Urr=o(" (ELECTRA model)"),Jrr=l(),qF=a("li"),L2e=a("strong"),Yrr=o("flaubert"),Krr=o(" \u2014 "),XW=a("a"),Zrr=o("FlaubertForQuestionAnsweringSimple"),etr=o(" (FlauBERT model)"),otr=l(),jF=a("li"),y2e=a("strong"),rtr=o("fnet"),ttr=o(" \u2014 "),zW=a("a"),atr=o("FNetForQuestionAnswering"),ntr=o(" (FNet model)"),str=l(),DF=a("li"),x2e=a("strong"),ltr=o("funnel"),itr=o(" \u2014 "),WW=a("a"),dtr=o("FunnelForQuestionAnswering"),ctr=o(" (Funnel Transformer model)"),ftr=l(),GF=a("li"),$2e=a("strong"),mtr=o("gptj"),gtr=o(" \u2014 "),QW=a("a"),htr=o("GPTJForQuestionAnswering"),ptr=o(" (GPT-J model)"),_tr=l(),OF=a("li"),k2e=a("strong"),utr=o("ibert"),btr=o(" \u2014 "),HW=a("a"),vtr=o("IBertForQuestionAnswering"),Ftr=o(" (I-BERT model)"),Ttr=l(),VF=a("li"),S2e=a("strong"),Mtr=o("layoutlmv2"),Etr=o(" \u2014 "),UW=a("a"),Ctr=o("LayoutLMv2ForQuestionAnswering"),wtr=o(" (LayoutLMv2 model)"),Atr=l(),XF=a("li"),R2e=a("strong"),Ltr=o("layoutlmv3"),ytr=o(" \u2014 "),JW=a("a"),xtr=o("LayoutLMv3ForQuestionAnswering"),$tr=o(" (LayoutLMv3 model)"),ktr=l(),zF=a("li"),P2e=a("strong"),Str=o("led"),Rtr=o(" \u2014 "),YW=a("a"),Ptr=o("LEDForQuestionAnswering"),Btr=o(" (LED model)"),Itr=l(),WF=a("li"),B2e=a("strong"),Ntr=o("longformer"),qtr=o(" \u2014 "),KW=a("a"),jtr=o("LongformerForQuestionAnswering"),Dtr=o(" (Longformer model)"),Gtr=l(),QF=a("li"),I2e=a("strong"),Otr=o("lxmert"),Vtr=o(" \u2014 "),ZW=a("a"),Xtr=o("LxmertForQuestionAnswering"),ztr=o(" (LXMERT model)"),Wtr=l(),HF=a("li"),N2e=a("strong"),Qtr=o("mbart"),Htr=o(" \u2014 "),eQ=a("a"),Utr=o("MBartForQuestionAnswering"),Jtr=o(" (mBART model)"),Ytr=l(),UF=a("li"),q2e=a("strong"),Ktr=o("megatron-bert"),Ztr=o(" \u2014 "),oQ=a("a"),ear=o("MegatronBertForQuestionAnswering"),oar=o(" (Megatron-BERT model)"),rar=l(),JF=a("li"),j2e=a("strong"),tar=o("mobilebert"),aar=o(" \u2014 "),rQ=a("a"),nar=o("MobileBertForQuestionAnswering"),sar=o(" (MobileBERT model)"),lar=l(),YF=a("li"),D2e=a("strong"),iar=o("mpnet"),dar=o(" \u2014 "),tQ=a("a"),car=o("MPNetForQuestionAnswering"),far=o(" (MPNet model)"),mar=l(),KF=a("li"),G2e=a("strong"),gar=o("mvp"),har=o(" \u2014 "),aQ=a("a"),par=o("MvpForQuestionAnswering"),_ar=o(" (MVP model)"),uar=l(),ZF=a("li"),O2e=a("strong"),bar=o("nezha"),Far=o(" \u2014 "),nQ=a("a"),Tar=o("NezhaForQuestionAnswering"),Mar=o(" (Nezha model)"),Ear=l(),eT=a("li"),V2e=a("strong"),Car=o("nystromformer"),war=o(" \u2014 "),sQ=a("a"),Aar=o("NystromformerForQuestionAnswering"),Lar=o(" (Nystr\xF6mformer model)"),yar=l(),oT=a("li"),X2e=a("strong"),xar=o("qdqbert"),$ar=o(" \u2014 "),lQ=a("a"),kar=o("QDQBertForQuestionAnswering"),Sar=o(" (QDQBert model)"),Rar=l(),rT=a("li"),z2e=a("strong"),Par=o("reformer"),Bar=o(" \u2014 "),iQ=a("a"),Iar=o("ReformerForQuestionAnswering"),Nar=o(" (Reformer model)"),qar=l(),tT=a("li"),W2e=a("strong"),jar=o("rembert"),Dar=o(" \u2014 "),dQ=a("a"),Gar=o("RemBertForQuestionAnswering"),Oar=o(" (RemBERT model)"),Var=l(),aT=a("li"),Q2e=a("strong"),Xar=o("roberta"),zar=o(" \u2014 "),cQ=a("a"),War=o("RobertaForQuestionAnswering"),Qar=o(" (RoBERTa model)"),Har=l(),nT=a("li"),H2e=a("strong"),Uar=o("roformer"),Jar=o(" \u2014 "),fQ=a("a"),Yar=o("RoFormerForQuestionAnswering"),Kar=o(" (RoFormer model)"),Zar=l(),sT=a("li"),U2e=a("strong"),enr=o("splinter"),onr=o(" \u2014 "),mQ=a("a"),rnr=o("SplinterForQuestionAnswering"),tnr=o(" (Splinter model)"),anr=l(),lT=a("li"),J2e=a("strong"),nnr=o("squeezebert"),snr=o(" \u2014 "),gQ=a("a"),lnr=o("SqueezeBertForQuestionAnswering"),inr=o(" (SqueezeBERT model)"),dnr=l(),iT=a("li"),Y2e=a("strong"),cnr=o("xlm"),fnr=o(" \u2014 "),hQ=a("a"),mnr=o("XLMForQuestionAnsweringSimple"),gnr=o(" (XLM model)"),hnr=l(),dT=a("li"),K2e=a("strong"),pnr=o("xlm-roberta"),_nr=o(" \u2014 "),pQ=a("a"),unr=o("XLMRobertaForQuestionAnswering"),bnr=o(" (XLM-RoBERTa model)"),vnr=l(),cT=a("li"),Z2e=a("strong"),Fnr=o("xlm-roberta-xl"),Tnr=o(" \u2014 "),_Q=a("a"),Mnr=o("XLMRobertaXLForQuestionAnswering"),Enr=o(" (XLM-RoBERTa-XL model)"),Cnr=l(),fT=a("li"),ebe=a("strong"),wnr=o("xlnet"),Anr=o(" \u2014 "),uQ=a("a"),Lnr=o("XLNetForQuestionAnsweringSimple"),ynr=o(" (XLNet model)"),xnr=l(),mT=a("li"),obe=a("strong"),$nr=o("yoso"),knr=o(" \u2014 "),bQ=a("a"),Snr=o("YosoForQuestionAnswering"),Rnr=o(" (YOSO model)"),Pnr=l(),gT=a("p"),Bnr=o("The model is set in evaluation mode by default using "),rbe=a("code"),Inr=o("model.eval()"),Nnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tbe=a("code"),qnr=o("model.train()"),jnr=l(),F(hT.$$.fragment),YXe=l(),bd=a("h2"),pT=a("a"),abe=a("span"),F(kL.$$.fragment),Dnr=l(),nbe=a("span"),Gnr=o("AutoModelForTableQuestionAnswering"),KXe=l(),Go=a("div"),F(SL.$$.fragment),Onr=l(),vd=a("p"),Vnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),vQ=a("a"),Xnr=o("from_pretrained()"),znr=o(" class method or the "),FQ=a("a"),Wnr=o("from_config()"),Qnr=o(` class
method.`),Hnr=l(),RL=a("p"),Unr=o("This class cannot be instantiated directly using "),sbe=a("code"),Jnr=o("__init__()"),Ynr=o(" (throws an error)."),Knr=l(),bt=a("div"),F(PL.$$.fragment),Znr=l(),lbe=a("p"),esr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),osr=l(),Fd=a("p"),rsr=o(`Note:
Loading a model from its configuration file does `),ibe=a("strong"),tsr=o("not"),asr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=a("a"),nsr=o("from_pretrained()"),ssr=o(" to load the model weights."),lsr=l(),F(_T.$$.fragment),isr=l(),lo=a("div"),F(BL.$$.fragment),dsr=l(),dbe=a("p"),csr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),fsr=l(),Wa=a("p"),msr=o("The model class to instantiate is selected based on the "),cbe=a("code"),gsr=o("model_type"),hsr=o(` property of the config object (either
passed as an argument or loaded from `),fbe=a("code"),psr=o("pretrained_model_name_or_path"),_sr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mbe=a("code"),usr=o("pretrained_model_name_or_path"),bsr=o(":"),vsr=l(),gbe=a("ul"),uT=a("li"),hbe=a("strong"),Fsr=o("tapas"),Tsr=o(" \u2014 "),MQ=a("a"),Msr=o("TapasForQuestionAnswering"),Esr=o(" (TAPAS model)"),Csr=l(),bT=a("p"),wsr=o("The model is set in evaluation mode by default using "),pbe=a("code"),Asr=o("model.eval()"),Lsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_be=a("code"),ysr=o("model.train()"),xsr=l(),F(vT.$$.fragment),ZXe=l(),Td=a("h2"),FT=a("a"),ube=a("span"),F(IL.$$.fragment),$sr=l(),bbe=a("span"),ksr=o("AutoModelForImageClassification"),eze=l(),Oo=a("div"),F(NL.$$.fragment),Ssr=l(),Md=a("p"),Rsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),EQ=a("a"),Psr=o("from_pretrained()"),Bsr=o(" class method or the "),CQ=a("a"),Isr=o("from_config()"),Nsr=o(` class
method.`),qsr=l(),qL=a("p"),jsr=o("This class cannot be instantiated directly using "),vbe=a("code"),Dsr=o("__init__()"),Gsr=o(" (throws an error)."),Osr=l(),vt=a("div"),F(jL.$$.fragment),Vsr=l(),Fbe=a("p"),Xsr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),zsr=l(),Ed=a("p"),Wsr=o(`Note:
Loading a model from its configuration file does `),Tbe=a("strong"),Qsr=o("not"),Hsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wQ=a("a"),Usr=o("from_pretrained()"),Jsr=o(" to load the model weights."),Ysr=l(),F(TT.$$.fragment),Ksr=l(),io=a("div"),F(DL.$$.fragment),Zsr=l(),Mbe=a("p"),elr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),olr=l(),Qa=a("p"),rlr=o("The model class to instantiate is selected based on the "),Ebe=a("code"),tlr=o("model_type"),alr=o(` property of the config object (either
passed as an argument or loaded from `),Cbe=a("code"),nlr=o("pretrained_model_name_or_path"),slr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wbe=a("code"),llr=o("pretrained_model_name_or_path"),ilr=o(":"),dlr=l(),ve=a("ul"),MT=a("li"),Abe=a("strong"),clr=o("beit"),flr=o(" \u2014 "),AQ=a("a"),mlr=o("BeitForImageClassification"),glr=o(" (BEiT model)"),hlr=l(),ET=a("li"),Lbe=a("strong"),plr=o("convnext"),_lr=o(" \u2014 "),LQ=a("a"),ulr=o("ConvNextForImageClassification"),blr=o(" (ConvNeXT model)"),vlr=l(),CT=a("li"),ybe=a("strong"),Flr=o("cvt"),Tlr=o(" \u2014 "),yQ=a("a"),Mlr=o("CvtForImageClassification"),Elr=o(" (CvT model)"),Clr=l(),wT=a("li"),xbe=a("strong"),wlr=o("data2vec-vision"),Alr=o(" \u2014 "),xQ=a("a"),Llr=o("Data2VecVisionForImageClassification"),ylr=o(" (Data2VecVision model)"),xlr=l(),Us=a("li"),$be=a("strong"),$lr=o("deit"),klr=o(" \u2014 "),$Q=a("a"),Slr=o("DeiTForImageClassification"),Rlr=o(" or "),kQ=a("a"),Plr=o("DeiTForImageClassificationWithTeacher"),Blr=o(" (DeiT model)"),Ilr=l(),AT=a("li"),kbe=a("strong"),Nlr=o("imagegpt"),qlr=o(" \u2014 "),SQ=a("a"),jlr=o("ImageGPTForImageClassification"),Dlr=o(" (ImageGPT model)"),Glr=l(),Js=a("li"),Sbe=a("strong"),Olr=o("levit"),Vlr=o(" \u2014 "),RQ=a("a"),Xlr=o("LevitForImageClassification"),zlr=o(" or "),PQ=a("a"),Wlr=o("LevitForImageClassificationWithTeacher"),Qlr=o(" (LeViT model)"),Hlr=l(),LT=a("li"),Rbe=a("strong"),Ulr=o("mobilevit"),Jlr=o(" \u2014 "),BQ=a("a"),Ylr=o("MobileViTForImageClassification"),Klr=o(" (MobileViT model)"),Zlr=l(),Ft=a("li"),Pbe=a("strong"),eir=o("perceiver"),oir=o(" \u2014 "),IQ=a("a"),rir=o("PerceiverForImageClassificationLearned"),tir=o(" or "),NQ=a("a"),air=o("PerceiverForImageClassificationFourier"),nir=o(" or "),qQ=a("a"),sir=o("PerceiverForImageClassificationConvProcessing"),lir=o(" (Perceiver model)"),iir=l(),yT=a("li"),Bbe=a("strong"),dir=o("poolformer"),cir=o(" \u2014 "),jQ=a("a"),fir=o("PoolFormerForImageClassification"),mir=o(" (PoolFormer model)"),gir=l(),xT=a("li"),Ibe=a("strong"),hir=o("regnet"),pir=o(" \u2014 "),DQ=a("a"),_ir=o("RegNetForImageClassification"),uir=o(" (RegNet model)"),bir=l(),$T=a("li"),Nbe=a("strong"),vir=o("resnet"),Fir=o(" \u2014 "),GQ=a("a"),Tir=o("ResNetForImageClassification"),Mir=o(" (ResNet model)"),Eir=l(),kT=a("li"),qbe=a("strong"),Cir=o("segformer"),wir=o(" \u2014 "),OQ=a("a"),Air=o("SegformerForImageClassification"),Lir=o(" (SegFormer model)"),yir=l(),ST=a("li"),jbe=a("strong"),xir=o("swin"),$ir=o(" \u2014 "),VQ=a("a"),kir=o("SwinForImageClassification"),Sir=o(" (Swin Transformer model)"),Rir=l(),RT=a("li"),Dbe=a("strong"),Pir=o("van"),Bir=o(" \u2014 "),XQ=a("a"),Iir=o("VanForImageClassification"),Nir=o(" (VAN model)"),qir=l(),PT=a("li"),Gbe=a("strong"),jir=o("vit"),Dir=o(" \u2014 "),zQ=a("a"),Gir=o("ViTForImageClassification"),Oir=o(" (ViT model)"),Vir=l(),BT=a("p"),Xir=o("The model is set in evaluation mode by default using "),Obe=a("code"),zir=o("model.eval()"),Wir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vbe=a("code"),Qir=o("model.train()"),Hir=l(),F(IT.$$.fragment),oze=l(),Cd=a("h2"),NT=a("a"),Xbe=a("span"),F(GL.$$.fragment),Uir=l(),zbe=a("span"),Jir=o("AutoModelForVision2Seq"),rze=l(),Vo=a("div"),F(OL.$$.fragment),Yir=l(),wd=a("p"),Kir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),WQ=a("a"),Zir=o("from_pretrained()"),edr=o(" class method or the "),QQ=a("a"),odr=o("from_config()"),rdr=o(` class
method.`),tdr=l(),VL=a("p"),adr=o("This class cannot be instantiated directly using "),Wbe=a("code"),ndr=o("__init__()"),sdr=o(" (throws an error)."),ldr=l(),Tt=a("div"),F(XL.$$.fragment),idr=l(),Qbe=a("p"),ddr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),cdr=l(),Ad=a("p"),fdr=o(`Note:
Loading a model from its configuration file does `),Hbe=a("strong"),mdr=o("not"),gdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HQ=a("a"),hdr=o("from_pretrained()"),pdr=o(" to load the model weights."),_dr=l(),F(qT.$$.fragment),udr=l(),co=a("div"),F(zL.$$.fragment),bdr=l(),Ube=a("p"),vdr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Fdr=l(),Ha=a("p"),Tdr=o("The model class to instantiate is selected based on the "),Jbe=a("code"),Mdr=o("model_type"),Edr=o(` property of the config object (either
passed as an argument or loaded from `),Ybe=a("code"),Cdr=o("pretrained_model_name_or_path"),wdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kbe=a("code"),Adr=o("pretrained_model_name_or_path"),Ldr=o(":"),ydr=l(),Zbe=a("ul"),jT=a("li"),eve=a("strong"),xdr=o("vision-encoder-decoder"),$dr=o(" \u2014 "),UQ=a("a"),kdr=o("VisionEncoderDecoderModel"),Sdr=o(" (Vision Encoder decoder model)"),Rdr=l(),DT=a("p"),Pdr=o("The model is set in evaluation mode by default using "),ove=a("code"),Bdr=o("model.eval()"),Idr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rve=a("code"),Ndr=o("model.train()"),qdr=l(),F(GT.$$.fragment),tze=l(),Ld=a("h2"),OT=a("a"),tve=a("span"),F(WL.$$.fragment),jdr=l(),ave=a("span"),Ddr=o("AutoModelForVisualQuestionAnswering"),aze=l(),Xo=a("div"),F(QL.$$.fragment),Gdr=l(),yd=a("p"),Odr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),JQ=a("a"),Vdr=o("from_pretrained()"),Xdr=o(" class method or the "),YQ=a("a"),zdr=o("from_config()"),Wdr=o(` class
method.`),Qdr=l(),HL=a("p"),Hdr=o("This class cannot be instantiated directly using "),nve=a("code"),Udr=o("__init__()"),Jdr=o(" (throws an error)."),Ydr=l(),Mt=a("div"),F(UL.$$.fragment),Kdr=l(),sve=a("p"),Zdr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),ecr=l(),xd=a("p"),ocr=o(`Note:
Loading a model from its configuration file does `),lve=a("strong"),rcr=o("not"),tcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KQ=a("a"),acr=o("from_pretrained()"),ncr=o(" to load the model weights."),scr=l(),F(VT.$$.fragment),lcr=l(),fo=a("div"),F(JL.$$.fragment),icr=l(),ive=a("p"),dcr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),ccr=l(),Ua=a("p"),fcr=o("The model class to instantiate is selected based on the "),dve=a("code"),mcr=o("model_type"),gcr=o(` property of the config object (either
passed as an argument or loaded from `),cve=a("code"),hcr=o("pretrained_model_name_or_path"),pcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fve=a("code"),_cr=o("pretrained_model_name_or_path"),ucr=o(":"),bcr=l(),mve=a("ul"),XT=a("li"),gve=a("strong"),vcr=o("vilt"),Fcr=o(" \u2014 "),ZQ=a("a"),Tcr=o("ViltForQuestionAnswering"),Mcr=o(" (ViLT model)"),Ecr=l(),zT=a("p"),Ccr=o("The model is set in evaluation mode by default using "),hve=a("code"),wcr=o("model.eval()"),Acr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pve=a("code"),Lcr=o("model.train()"),ycr=l(),F(WT.$$.fragment),nze=l(),$d=a("h2"),QT=a("a"),_ve=a("span"),F(YL.$$.fragment),xcr=l(),uve=a("span"),$cr=o("AutoModelForAudioClassification"),sze=l(),zo=a("div"),F(KL.$$.fragment),kcr=l(),kd=a("p"),Scr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),eH=a("a"),Rcr=o("from_pretrained()"),Pcr=o(" class method or the "),oH=a("a"),Bcr=o("from_config()"),Icr=o(` class
method.`),Ncr=l(),ZL=a("p"),qcr=o("This class cannot be instantiated directly using "),bve=a("code"),jcr=o("__init__()"),Dcr=o(" (throws an error)."),Gcr=l(),Et=a("div"),F(ey.$$.fragment),Ocr=l(),vve=a("p"),Vcr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Xcr=l(),Sd=a("p"),zcr=o(`Note:
Loading a model from its configuration file does `),Fve=a("strong"),Wcr=o("not"),Qcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=a("a"),Hcr=o("from_pretrained()"),Ucr=o(" to load the model weights."),Jcr=l(),F(HT.$$.fragment),Ycr=l(),mo=a("div"),F(oy.$$.fragment),Kcr=l(),Tve=a("p"),Zcr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),efr=l(),Ja=a("p"),ofr=o("The model class to instantiate is selected based on the "),Mve=a("code"),rfr=o("model_type"),tfr=o(` property of the config object (either
passed as an argument or loaded from `),Eve=a("code"),afr=o("pretrained_model_name_or_path"),nfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cve=a("code"),sfr=o("pretrained_model_name_or_path"),lfr=o(":"),ifr=l(),Pe=a("ul"),UT=a("li"),wve=a("strong"),dfr=o("data2vec-audio"),cfr=o(" \u2014 "),tH=a("a"),ffr=o("Data2VecAudioForSequenceClassification"),mfr=o(" (Data2VecAudio model)"),gfr=l(),JT=a("li"),Ave=a("strong"),hfr=o("hubert"),pfr=o(" \u2014 "),aH=a("a"),_fr=o("HubertForSequenceClassification"),ufr=o(" (Hubert model)"),bfr=l(),YT=a("li"),Lve=a("strong"),vfr=o("sew"),Ffr=o(" \u2014 "),nH=a("a"),Tfr=o("SEWForSequenceClassification"),Mfr=o(" (SEW model)"),Efr=l(),KT=a("li"),yve=a("strong"),Cfr=o("sew-d"),wfr=o(" \u2014 "),sH=a("a"),Afr=o("SEWDForSequenceClassification"),Lfr=o(" (SEW-D model)"),yfr=l(),ZT=a("li"),xve=a("strong"),xfr=o("unispeech"),$fr=o(" \u2014 "),lH=a("a"),kfr=o("UniSpeechForSequenceClassification"),Sfr=o(" (UniSpeech model)"),Rfr=l(),e7=a("li"),$ve=a("strong"),Pfr=o("unispeech-sat"),Bfr=o(" \u2014 "),iH=a("a"),Ifr=o("UniSpeechSatForSequenceClassification"),Nfr=o(" (UniSpeechSat model)"),qfr=l(),o7=a("li"),kve=a("strong"),jfr=o("wav2vec2"),Dfr=o(" \u2014 "),dH=a("a"),Gfr=o("Wav2Vec2ForSequenceClassification"),Ofr=o(" (Wav2Vec2 model)"),Vfr=l(),r7=a("li"),Sve=a("strong"),Xfr=o("wav2vec2-conformer"),zfr=o(" \u2014 "),cH=a("a"),Wfr=o("Wav2Vec2ConformerForSequenceClassification"),Qfr=o(" (Wav2Vec2-Conformer model)"),Hfr=l(),t7=a("li"),Rve=a("strong"),Ufr=o("wavlm"),Jfr=o(" \u2014 "),fH=a("a"),Yfr=o("WavLMForSequenceClassification"),Kfr=o(" (WavLM model)"),Zfr=l(),a7=a("p"),emr=o("The model is set in evaluation mode by default using "),Pve=a("code"),omr=o("model.eval()"),rmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bve=a("code"),tmr=o("model.train()"),amr=l(),F(n7.$$.fragment),lze=l(),Rd=a("h2"),s7=a("a"),Ive=a("span"),F(ry.$$.fragment),nmr=l(),Nve=a("span"),smr=o("AutoModelForAudioFrameClassification"),ize=l(),Wo=a("div"),F(ty.$$.fragment),lmr=l(),Pd=a("p"),imr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),mH=a("a"),dmr=o("from_pretrained()"),cmr=o(" class method or the "),gH=a("a"),fmr=o("from_config()"),mmr=o(` class
method.`),gmr=l(),ay=a("p"),hmr=o("This class cannot be instantiated directly using "),qve=a("code"),pmr=o("__init__()"),_mr=o(" (throws an error)."),umr=l(),Ct=a("div"),F(ny.$$.fragment),bmr=l(),jve=a("p"),vmr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Fmr=l(),Bd=a("p"),Tmr=o(`Note:
Loading a model from its configuration file does `),Dve=a("strong"),Mmr=o("not"),Emr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=a("a"),Cmr=o("from_pretrained()"),wmr=o(" to load the model weights."),Amr=l(),F(l7.$$.fragment),Lmr=l(),go=a("div"),F(sy.$$.fragment),ymr=l(),Gve=a("p"),xmr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),$mr=l(),Ya=a("p"),kmr=o("The model class to instantiate is selected based on the "),Ove=a("code"),Smr=o("model_type"),Rmr=o(` property of the config object (either
passed as an argument or loaded from `),Vve=a("code"),Pmr=o("pretrained_model_name_or_path"),Bmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xve=a("code"),Imr=o("pretrained_model_name_or_path"),Nmr=o(":"),qmr=l(),rt=a("ul"),i7=a("li"),zve=a("strong"),jmr=o("data2vec-audio"),Dmr=o(" \u2014 "),pH=a("a"),Gmr=o("Data2VecAudioForAudioFrameClassification"),Omr=o(" (Data2VecAudio model)"),Vmr=l(),d7=a("li"),Wve=a("strong"),Xmr=o("unispeech-sat"),zmr=o(" \u2014 "),_H=a("a"),Wmr=o("UniSpeechSatForAudioFrameClassification"),Qmr=o(" (UniSpeechSat model)"),Hmr=l(),c7=a("li"),Qve=a("strong"),Umr=o("wav2vec2"),Jmr=o(" \u2014 "),uH=a("a"),Ymr=o("Wav2Vec2ForAudioFrameClassification"),Kmr=o(" (Wav2Vec2 model)"),Zmr=l(),f7=a("li"),Hve=a("strong"),egr=o("wav2vec2-conformer"),ogr=o(" \u2014 "),bH=a("a"),rgr=o("Wav2Vec2ConformerForAudioFrameClassification"),tgr=o(" (Wav2Vec2-Conformer model)"),agr=l(),m7=a("li"),Uve=a("strong"),ngr=o("wavlm"),sgr=o(" \u2014 "),vH=a("a"),lgr=o("WavLMForAudioFrameClassification"),igr=o(" (WavLM model)"),dgr=l(),g7=a("p"),cgr=o("The model is set in evaluation mode by default using "),Jve=a("code"),fgr=o("model.eval()"),mgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yve=a("code"),ggr=o("model.train()"),hgr=l(),F(h7.$$.fragment),dze=l(),Id=a("h2"),p7=a("a"),Kve=a("span"),F(ly.$$.fragment),pgr=l(),Zve=a("span"),_gr=o("AutoModelForCTC"),cze=l(),Qo=a("div"),F(iy.$$.fragment),ugr=l(),Nd=a("p"),bgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),FH=a("a"),vgr=o("from_pretrained()"),Fgr=o(" class method or the "),TH=a("a"),Tgr=o("from_config()"),Mgr=o(` class
method.`),Egr=l(),dy=a("p"),Cgr=o("This class cannot be instantiated directly using "),e3e=a("code"),wgr=o("__init__()"),Agr=o(" (throws an error)."),Lgr=l(),wt=a("div"),F(cy.$$.fragment),ygr=l(),o3e=a("p"),xgr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),$gr=l(),qd=a("p"),kgr=o(`Note:
Loading a model from its configuration file does `),r3e=a("strong"),Sgr=o("not"),Rgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=a("a"),Pgr=o("from_pretrained()"),Bgr=o(" to load the model weights."),Igr=l(),F(_7.$$.fragment),Ngr=l(),ho=a("div"),F(fy.$$.fragment),qgr=l(),t3e=a("p"),jgr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Dgr=l(),Ka=a("p"),Ggr=o("The model class to instantiate is selected based on the "),a3e=a("code"),Ogr=o("model_type"),Vgr=o(` property of the config object (either
passed as an argument or loaded from `),n3e=a("code"),Xgr=o("pretrained_model_name_or_path"),zgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s3e=a("code"),Wgr=o("pretrained_model_name_or_path"),Qgr=o(":"),Hgr=l(),Le=a("ul"),u7=a("li"),l3e=a("strong"),Ugr=o("data2vec-audio"),Jgr=o(" \u2014 "),EH=a("a"),Ygr=o("Data2VecAudioForCTC"),Kgr=o(" (Data2VecAudio model)"),Zgr=l(),b7=a("li"),i3e=a("strong"),ehr=o("hubert"),ohr=o(" \u2014 "),CH=a("a"),rhr=o("HubertForCTC"),thr=o(" (Hubert model)"),ahr=l(),v7=a("li"),d3e=a("strong"),nhr=o("mctct"),shr=o(" \u2014 "),wH=a("a"),lhr=o("MCTCTForCTC"),ihr=o(" (M-CTC-T model)"),dhr=l(),F7=a("li"),c3e=a("strong"),chr=o("sew"),fhr=o(" \u2014 "),AH=a("a"),mhr=o("SEWForCTC"),ghr=o(" (SEW model)"),hhr=l(),T7=a("li"),f3e=a("strong"),phr=o("sew-d"),_hr=o(" \u2014 "),LH=a("a"),uhr=o("SEWDForCTC"),bhr=o(" (SEW-D model)"),vhr=l(),M7=a("li"),m3e=a("strong"),Fhr=o("unispeech"),Thr=o(" \u2014 "),yH=a("a"),Mhr=o("UniSpeechForCTC"),Ehr=o(" (UniSpeech model)"),Chr=l(),E7=a("li"),g3e=a("strong"),whr=o("unispeech-sat"),Ahr=o(" \u2014 "),xH=a("a"),Lhr=o("UniSpeechSatForCTC"),yhr=o(" (UniSpeechSat model)"),xhr=l(),C7=a("li"),h3e=a("strong"),$hr=o("wav2vec2"),khr=o(" \u2014 "),$H=a("a"),Shr=o("Wav2Vec2ForCTC"),Rhr=o(" (Wav2Vec2 model)"),Phr=l(),w7=a("li"),p3e=a("strong"),Bhr=o("wav2vec2-conformer"),Ihr=o(" \u2014 "),kH=a("a"),Nhr=o("Wav2Vec2ConformerForCTC"),qhr=o(" (Wav2Vec2-Conformer model)"),jhr=l(),A7=a("li"),_3e=a("strong"),Dhr=o("wavlm"),Ghr=o(" \u2014 "),SH=a("a"),Ohr=o("WavLMForCTC"),Vhr=o(" (WavLM model)"),Xhr=l(),L7=a("p"),zhr=o("The model is set in evaluation mode by default using "),u3e=a("code"),Whr=o("model.eval()"),Qhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b3e=a("code"),Hhr=o("model.train()"),Uhr=l(),F(y7.$$.fragment),fze=l(),jd=a("h2"),x7=a("a"),v3e=a("span"),F(my.$$.fragment),Jhr=l(),F3e=a("span"),Yhr=o("AutoModelForSpeechSeq2Seq"),mze=l(),Ho=a("div"),F(gy.$$.fragment),Khr=l(),Dd=a("p"),Zhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),RH=a("a"),epr=o("from_pretrained()"),opr=o(" class method or the "),PH=a("a"),rpr=o("from_config()"),tpr=o(` class
method.`),apr=l(),hy=a("p"),npr=o("This class cannot be instantiated directly using "),T3e=a("code"),spr=o("__init__()"),lpr=o(" (throws an error)."),ipr=l(),At=a("div"),F(py.$$.fragment),dpr=l(),M3e=a("p"),cpr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),fpr=l(),Gd=a("p"),mpr=o(`Note:
Loading a model from its configuration file does `),E3e=a("strong"),gpr=o("not"),hpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=a("a"),ppr=o("from_pretrained()"),_pr=o(" to load the model weights."),upr=l(),F($7.$$.fragment),bpr=l(),po=a("div"),F(_y.$$.fragment),vpr=l(),C3e=a("p"),Fpr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Tpr=l(),Za=a("p"),Mpr=o("The model class to instantiate is selected based on the "),w3e=a("code"),Epr=o("model_type"),Cpr=o(` property of the config object (either
passed as an argument or loaded from `),A3e=a("code"),wpr=o("pretrained_model_name_or_path"),Apr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L3e=a("code"),Lpr=o("pretrained_model_name_or_path"),ypr=o(":"),xpr=l(),uy=a("ul"),k7=a("li"),y3e=a("strong"),$pr=o("speech-encoder-decoder"),kpr=o(" \u2014 "),IH=a("a"),Spr=o("SpeechEncoderDecoderModel"),Rpr=o(" (Speech Encoder decoder model)"),Ppr=l(),S7=a("li"),x3e=a("strong"),Bpr=o("speech_to_text"),Ipr=o(" \u2014 "),NH=a("a"),Npr=o("Speech2TextForConditionalGeneration"),qpr=o(" (Speech2Text model)"),jpr=l(),R7=a("p"),Dpr=o("The model is set in evaluation mode by default using "),$3e=a("code"),Gpr=o("model.eval()"),Opr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k3e=a("code"),Vpr=o("model.train()"),Xpr=l(),F(P7.$$.fragment),gze=l(),Od=a("h2"),B7=a("a"),S3e=a("span"),F(by.$$.fragment),zpr=l(),R3e=a("span"),Wpr=o("AutoModelForAudioXVector"),hze=l(),Uo=a("div"),F(vy.$$.fragment),Qpr=l(),Vd=a("p"),Hpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),qH=a("a"),Upr=o("from_pretrained()"),Jpr=o(" class method or the "),jH=a("a"),Ypr=o("from_config()"),Kpr=o(` class
method.`),Zpr=l(),Fy=a("p"),e_r=o("This class cannot be instantiated directly using "),P3e=a("code"),o_r=o("__init__()"),r_r=o(" (throws an error)."),t_r=l(),Lt=a("div"),F(Ty.$$.fragment),a_r=l(),B3e=a("p"),n_r=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),s_r=l(),Xd=a("p"),l_r=o(`Note:
Loading a model from its configuration file does `),I3e=a("strong"),i_r=o("not"),d_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=a("a"),c_r=o("from_pretrained()"),f_r=o(" to load the model weights."),m_r=l(),F(I7.$$.fragment),g_r=l(),_o=a("div"),F(My.$$.fragment),h_r=l(),N3e=a("p"),p_r=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),__r=l(),en=a("p"),u_r=o("The model class to instantiate is selected based on the "),q3e=a("code"),b_r=o("model_type"),v_r=o(` property of the config object (either
passed as an argument or loaded from `),j3e=a("code"),F_r=o("pretrained_model_name_or_path"),T_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D3e=a("code"),M_r=o("pretrained_model_name_or_path"),E_r=o(":"),C_r=l(),tt=a("ul"),N7=a("li"),G3e=a("strong"),w_r=o("data2vec-audio"),A_r=o(" \u2014 "),GH=a("a"),L_r=o("Data2VecAudioForXVector"),y_r=o(" (Data2VecAudio model)"),x_r=l(),q7=a("li"),O3e=a("strong"),$_r=o("unispeech-sat"),k_r=o(" \u2014 "),OH=a("a"),S_r=o("UniSpeechSatForXVector"),R_r=o(" (UniSpeechSat model)"),P_r=l(),j7=a("li"),V3e=a("strong"),B_r=o("wav2vec2"),I_r=o(" \u2014 "),VH=a("a"),N_r=o("Wav2Vec2ForXVector"),q_r=o(" (Wav2Vec2 model)"),j_r=l(),D7=a("li"),X3e=a("strong"),D_r=o("wav2vec2-conformer"),G_r=o(" \u2014 "),XH=a("a"),O_r=o("Wav2Vec2ConformerForXVector"),V_r=o(" (Wav2Vec2-Conformer model)"),X_r=l(),G7=a("li"),z3e=a("strong"),z_r=o("wavlm"),W_r=o(" \u2014 "),zH=a("a"),Q_r=o("WavLMForXVector"),H_r=o(" (WavLM model)"),U_r=l(),O7=a("p"),J_r=o("The model is set in evaluation mode by default using "),W3e=a("code"),Y_r=o("model.eval()"),K_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q3e=a("code"),Z_r=o("model.train()"),eur=l(),F(V7.$$.fragment),pze=l(),zd=a("h2"),X7=a("a"),H3e=a("span"),F(Ey.$$.fragment),our=l(),U3e=a("span"),rur=o("AutoModelForMaskedImageModeling"),_ze=l(),Jo=a("div"),F(Cy.$$.fragment),tur=l(),Wd=a("p"),aur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),WH=a("a"),nur=o("from_pretrained()"),sur=o(" class method or the "),QH=a("a"),lur=o("from_config()"),iur=o(` class
method.`),dur=l(),wy=a("p"),cur=o("This class cannot be instantiated directly using "),J3e=a("code"),fur=o("__init__()"),mur=o(" (throws an error)."),gur=l(),yt=a("div"),F(Ay.$$.fragment),hur=l(),Y3e=a("p"),pur=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),_ur=l(),Qd=a("p"),uur=o(`Note:
Loading a model from its configuration file does `),K3e=a("strong"),bur=o("not"),vur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=a("a"),Fur=o("from_pretrained()"),Tur=o(" to load the model weights."),Mur=l(),F(z7.$$.fragment),Eur=l(),uo=a("div"),F(Ly.$$.fragment),Cur=l(),Z3e=a("p"),wur=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Aur=l(),on=a("p"),Lur=o("The model class to instantiate is selected based on the "),eFe=a("code"),yur=o("model_type"),xur=o(` property of the config object (either
passed as an argument or loaded from `),oFe=a("code"),$ur=o("pretrained_model_name_or_path"),kur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rFe=a("code"),Sur=o("pretrained_model_name_or_path"),Rur=o(":"),Pur=l(),Hd=a("ul"),W7=a("li"),tFe=a("strong"),Bur=o("deit"),Iur=o(" \u2014 "),UH=a("a"),Nur=o("DeiTForMaskedImageModeling"),qur=o(" (DeiT model)"),jur=l(),Q7=a("li"),aFe=a("strong"),Dur=o("swin"),Gur=o(" \u2014 "),JH=a("a"),Our=o("SwinForMaskedImageModeling"),Vur=o(" (Swin Transformer model)"),Xur=l(),H7=a("li"),nFe=a("strong"),zur=o("vit"),Wur=o(" \u2014 "),YH=a("a"),Qur=o("ViTForMaskedImageModeling"),Hur=o(" (ViT model)"),Uur=l(),U7=a("p"),Jur=o("The model is set in evaluation mode by default using "),sFe=a("code"),Yur=o("model.eval()"),Kur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lFe=a("code"),Zur=o("model.train()"),e1r=l(),F(J7.$$.fragment),uze=l(),Ud=a("h2"),Y7=a("a"),iFe=a("span"),F(yy.$$.fragment),o1r=l(),dFe=a("span"),r1r=o("AutoModelForObjectDetection"),bze=l(),Yo=a("div"),F(xy.$$.fragment),t1r=l(),Jd=a("p"),a1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),KH=a("a"),n1r=o("from_pretrained()"),s1r=o(" class method or the "),ZH=a("a"),l1r=o("from_config()"),i1r=o(` class
method.`),d1r=l(),$y=a("p"),c1r=o("This class cannot be instantiated directly using "),cFe=a("code"),f1r=o("__init__()"),m1r=o(" (throws an error)."),g1r=l(),xt=a("div"),F(ky.$$.fragment),h1r=l(),fFe=a("p"),p1r=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),_1r=l(),Yd=a("p"),u1r=o(`Note:
Loading a model from its configuration file does `),mFe=a("strong"),b1r=o("not"),v1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eU=a("a"),F1r=o("from_pretrained()"),T1r=o(" to load the model weights."),M1r=l(),F(K7.$$.fragment),E1r=l(),bo=a("div"),F(Sy.$$.fragment),C1r=l(),gFe=a("p"),w1r=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),A1r=l(),rn=a("p"),L1r=o("The model class to instantiate is selected based on the "),hFe=a("code"),y1r=o("model_type"),x1r=o(` property of the config object (either
passed as an argument or loaded from `),pFe=a("code"),$1r=o("pretrained_model_name_or_path"),k1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Fe=a("code"),S1r=o("pretrained_model_name_or_path"),R1r=o(":"),P1r=l(),Ry=a("ul"),Z7=a("li"),uFe=a("strong"),B1r=o("detr"),I1r=o(" \u2014 "),oU=a("a"),N1r=o("DetrForObjectDetection"),q1r=o(" (DETR model)"),j1r=l(),e8=a("li"),bFe=a("strong"),D1r=o("yolos"),G1r=o(" \u2014 "),rU=a("a"),O1r=o("YolosForObjectDetection"),V1r=o(" (YOLOS model)"),X1r=l(),o8=a("p"),z1r=o("The model is set in evaluation mode by default using "),vFe=a("code"),W1r=o("model.eval()"),Q1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),FFe=a("code"),H1r=o("model.train()"),U1r=l(),F(r8.$$.fragment),vze=l(),Kd=a("h2"),t8=a("a"),TFe=a("span"),F(Py.$$.fragment),J1r=l(),MFe=a("span"),Y1r=o("AutoModelForImageSegmentation"),Fze=l(),Ko=a("div"),F(By.$$.fragment),K1r=l(),Zd=a("p"),Z1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),tU=a("a"),e2r=o("from_pretrained()"),o2r=o(" class method or the "),aU=a("a"),r2r=o("from_config()"),t2r=o(` class
method.`),a2r=l(),Iy=a("p"),n2r=o("This class cannot be instantiated directly using "),EFe=a("code"),s2r=o("__init__()"),l2r=o(" (throws an error)."),i2r=l(),$t=a("div"),F(Ny.$$.fragment),d2r=l(),CFe=a("p"),c2r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),f2r=l(),ec=a("p"),m2r=o(`Note:
Loading a model from its configuration file does `),wFe=a("strong"),g2r=o("not"),h2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=a("a"),p2r=o("from_pretrained()"),_2r=o(" to load the model weights."),u2r=l(),F(a8.$$.fragment),b2r=l(),vo=a("div"),F(qy.$$.fragment),v2r=l(),AFe=a("p"),F2r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),T2r=l(),tn=a("p"),M2r=o("The model class to instantiate is selected based on the "),LFe=a("code"),E2r=o("model_type"),C2r=o(` property of the config object (either
passed as an argument or loaded from `),yFe=a("code"),w2r=o("pretrained_model_name_or_path"),A2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xFe=a("code"),L2r=o("pretrained_model_name_or_path"),y2r=o(":"),x2r=l(),$Fe=a("ul"),n8=a("li"),kFe=a("strong"),$2r=o("detr"),k2r=o(" \u2014 "),sU=a("a"),S2r=o("DetrForSegmentation"),R2r=o(" (DETR model)"),P2r=l(),s8=a("p"),B2r=o("The model is set in evaluation mode by default using "),SFe=a("code"),I2r=o("model.eval()"),N2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),RFe=a("code"),q2r=o("model.train()"),j2r=l(),F(l8.$$.fragment),Tze=l(),oc=a("h2"),i8=a("a"),PFe=a("span"),F(jy.$$.fragment),D2r=l(),BFe=a("span"),G2r=o("AutoModelForSemanticSegmentation"),Mze=l(),Zo=a("div"),F(Dy.$$.fragment),O2r=l(),rc=a("p"),V2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),lU=a("a"),X2r=o("from_pretrained()"),z2r=o(" class method or the "),iU=a("a"),W2r=o("from_config()"),Q2r=o(` class
method.`),H2r=l(),Gy=a("p"),U2r=o("This class cannot be instantiated directly using "),IFe=a("code"),J2r=o("__init__()"),Y2r=o(" (throws an error)."),K2r=l(),kt=a("div"),F(Oy.$$.fragment),Z2r=l(),NFe=a("p"),ebr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),obr=l(),tc=a("p"),rbr=o(`Note:
Loading a model from its configuration file does `),qFe=a("strong"),tbr=o("not"),abr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=a("a"),nbr=o("from_pretrained()"),sbr=o(" to load the model weights."),lbr=l(),F(d8.$$.fragment),ibr=l(),Fo=a("div"),F(Vy.$$.fragment),dbr=l(),jFe=a("p"),cbr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),fbr=l(),an=a("p"),mbr=o("The model class to instantiate is selected based on the "),DFe=a("code"),gbr=o("model_type"),hbr=o(` property of the config object (either
passed as an argument or loaded from `),GFe=a("code"),pbr=o("pretrained_model_name_or_path"),_br=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OFe=a("code"),ubr=o("pretrained_model_name_or_path"),bbr=o(":"),vbr=l(),at=a("ul"),c8=a("li"),VFe=a("strong"),Fbr=o("beit"),Tbr=o(" \u2014 "),cU=a("a"),Mbr=o("BeitForSemanticSegmentation"),Ebr=o(" (BEiT model)"),Cbr=l(),f8=a("li"),XFe=a("strong"),wbr=o("data2vec-vision"),Abr=o(" \u2014 "),fU=a("a"),Lbr=o("Data2VecVisionForSemanticSegmentation"),ybr=o(" (Data2VecVision model)"),xbr=l(),m8=a("li"),zFe=a("strong"),$br=o("dpt"),kbr=o(" \u2014 "),mU=a("a"),Sbr=o("DPTForSemanticSegmentation"),Rbr=o(" (DPT model)"),Pbr=l(),g8=a("li"),WFe=a("strong"),Bbr=o("mobilevit"),Ibr=o(" \u2014 "),gU=a("a"),Nbr=o("MobileViTForSemanticSegmentation"),qbr=o(" (MobileViT model)"),jbr=l(),h8=a("li"),QFe=a("strong"),Dbr=o("segformer"),Gbr=o(" \u2014 "),hU=a("a"),Obr=o("SegformerForSemanticSegmentation"),Vbr=o(" (SegFormer model)"),Xbr=l(),p8=a("p"),zbr=o("The model is set in evaluation mode by default using "),HFe=a("code"),Wbr=o("model.eval()"),Qbr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),UFe=a("code"),Hbr=o("model.train()"),Ubr=l(),F(_8.$$.fragment),Eze=l(),ac=a("h2"),u8=a("a"),JFe=a("span"),F(Xy.$$.fragment),Jbr=l(),YFe=a("span"),Ybr=o("AutoModelForInstanceSegmentation"),Cze=l(),er=a("div"),F(zy.$$.fragment),Kbr=l(),nc=a("p"),Zbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),pU=a("a"),evr=o("from_pretrained()"),ovr=o(" class method or the "),_U=a("a"),rvr=o("from_config()"),tvr=o(` class
method.`),avr=l(),Wy=a("p"),nvr=o("This class cannot be instantiated directly using "),KFe=a("code"),svr=o("__init__()"),lvr=o(" (throws an error)."),ivr=l(),St=a("div"),F(Qy.$$.fragment),dvr=l(),ZFe=a("p"),cvr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),fvr=l(),sc=a("p"),mvr=o(`Note:
Loading a model from its configuration file does `),eTe=a("strong"),gvr=o("not"),hvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uU=a("a"),pvr=o("from_pretrained()"),_vr=o(" to load the model weights."),uvr=l(),F(b8.$$.fragment),bvr=l(),To=a("div"),F(Hy.$$.fragment),vvr=l(),oTe=a("p"),Fvr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Tvr=l(),nn=a("p"),Mvr=o("The model class to instantiate is selected based on the "),rTe=a("code"),Evr=o("model_type"),Cvr=o(` property of the config object (either
passed as an argument or loaded from `),tTe=a("code"),wvr=o("pretrained_model_name_or_path"),Avr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aTe=a("code"),Lvr=o("pretrained_model_name_or_path"),yvr=o(":"),xvr=l(),nTe=a("ul"),v8=a("li"),sTe=a("strong"),$vr=o("maskformer"),kvr=o(" \u2014 "),bU=a("a"),Svr=o("MaskFormerForInstanceSegmentation"),Rvr=o(" (MaskFormer model)"),Pvr=l(),F8=a("p"),Bvr=o("The model is set in evaluation mode by default using "),lTe=a("code"),Ivr=o("model.eval()"),Nvr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iTe=a("code"),qvr=o("model.train()"),jvr=l(),F(T8.$$.fragment),wze=l(),lc=a("h2"),M8=a("a"),dTe=a("span"),F(Uy.$$.fragment),Dvr=l(),cTe=a("span"),Gvr=o("TFAutoModel"),Aze=l(),or=a("div"),F(Jy.$$.fragment),Ovr=l(),ic=a("p"),Vvr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vU=a("a"),Xvr=o("from_pretrained()"),zvr=o(" class method or the "),FU=a("a"),Wvr=o("from_config()"),Qvr=o(` class
method.`),Hvr=l(),Yy=a("p"),Uvr=o("This class cannot be instantiated directly using "),fTe=a("code"),Jvr=o("__init__()"),Yvr=o(" (throws an error)."),Kvr=l(),Rt=a("div"),F(Ky.$$.fragment),Zvr=l(),mTe=a("p"),e3r=o("Instantiates one of the base model classes of the library from a configuration."),o3r=l(),dc=a("p"),r3r=o(`Note:
Loading a model from its configuration file does `),gTe=a("strong"),t3r=o("not"),a3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TU=a("a"),n3r=o("from_pretrained()"),s3r=o(" to load the model weights."),l3r=l(),F(E8.$$.fragment),i3r=l(),xr=a("div"),F(Zy.$$.fragment),d3r=l(),hTe=a("p"),c3r=o("Instantiate one of the base model classes of the library from a pretrained model."),f3r=l(),sn=a("p"),m3r=o("The model class to instantiate is selected based on the "),pTe=a("code"),g3r=o("model_type"),h3r=o(` property of the config object (either
passed as an argument or loaded from `),_Te=a("code"),p3r=o("pretrained_model_name_or_path"),_3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uTe=a("code"),u3r=o("pretrained_model_name_or_path"),b3r=o(":"),v3r=l(),q=a("ul"),C8=a("li"),bTe=a("strong"),F3r=o("albert"),T3r=o(" \u2014 "),MU=a("a"),M3r=o("TFAlbertModel"),E3r=o(" (ALBERT model)"),C3r=l(),w8=a("li"),vTe=a("strong"),w3r=o("bart"),A3r=o(" \u2014 "),EU=a("a"),L3r=o("TFBartModel"),y3r=o(" (BART model)"),x3r=l(),A8=a("li"),FTe=a("strong"),$3r=o("bert"),k3r=o(" \u2014 "),CU=a("a"),S3r=o("TFBertModel"),R3r=o(" (BERT model)"),P3r=l(),L8=a("li"),TTe=a("strong"),B3r=o("blenderbot"),I3r=o(" \u2014 "),wU=a("a"),N3r=o("TFBlenderbotModel"),q3r=o(" (Blenderbot model)"),j3r=l(),y8=a("li"),MTe=a("strong"),D3r=o("blenderbot-small"),G3r=o(" \u2014 "),AU=a("a"),O3r=o("TFBlenderbotSmallModel"),V3r=o(" (BlenderbotSmall model)"),X3r=l(),x8=a("li"),ETe=a("strong"),z3r=o("camembert"),W3r=o(" \u2014 "),LU=a("a"),Q3r=o("TFCamembertModel"),H3r=o(" (CamemBERT model)"),U3r=l(),$8=a("li"),CTe=a("strong"),J3r=o("clip"),Y3r=o(" \u2014 "),yU=a("a"),K3r=o("TFCLIPModel"),Z3r=o(" (CLIP model)"),eFr=l(),k8=a("li"),wTe=a("strong"),oFr=o("convbert"),rFr=o(" \u2014 "),xU=a("a"),tFr=o("TFConvBertModel"),aFr=o(" (ConvBERT model)"),nFr=l(),S8=a("li"),ATe=a("strong"),sFr=o("convnext"),lFr=o(" \u2014 "),$U=a("a"),iFr=o("TFConvNextModel"),dFr=o(" (ConvNeXT model)"),cFr=l(),R8=a("li"),LTe=a("strong"),fFr=o("ctrl"),mFr=o(" \u2014 "),kU=a("a"),gFr=o("TFCTRLModel"),hFr=o(" (CTRL model)"),pFr=l(),P8=a("li"),yTe=a("strong"),_Fr=o("data2vec-vision"),uFr=o(" \u2014 "),SU=a("a"),bFr=o("TFData2VecVisionModel"),vFr=o(" (Data2VecVision model)"),FFr=l(),B8=a("li"),xTe=a("strong"),TFr=o("deberta"),MFr=o(" \u2014 "),RU=a("a"),EFr=o("TFDebertaModel"),CFr=o(" (DeBERTa model)"),wFr=l(),I8=a("li"),$Te=a("strong"),AFr=o("deberta-v2"),LFr=o(" \u2014 "),PU=a("a"),yFr=o("TFDebertaV2Model"),xFr=o(" (DeBERTa-v2 model)"),$Fr=l(),N8=a("li"),kTe=a("strong"),kFr=o("deit"),SFr=o(" \u2014 "),BU=a("a"),RFr=o("TFDeiTModel"),PFr=o(" (DeiT model)"),BFr=l(),q8=a("li"),STe=a("strong"),IFr=o("distilbert"),NFr=o(" \u2014 "),IU=a("a"),qFr=o("TFDistilBertModel"),jFr=o(" (DistilBERT model)"),DFr=l(),j8=a("li"),RTe=a("strong"),GFr=o("dpr"),OFr=o(" \u2014 "),NU=a("a"),VFr=o("TFDPRQuestionEncoder"),XFr=o(" (DPR model)"),zFr=l(),D8=a("li"),PTe=a("strong"),WFr=o("electra"),QFr=o(" \u2014 "),qU=a("a"),HFr=o("TFElectraModel"),UFr=o(" (ELECTRA model)"),JFr=l(),G8=a("li"),BTe=a("strong"),YFr=o("flaubert"),KFr=o(" \u2014 "),jU=a("a"),ZFr=o("TFFlaubertModel"),eTr=o(" (FlauBERT model)"),oTr=l(),Ys=a("li"),ITe=a("strong"),rTr=o("funnel"),tTr=o(" \u2014 "),DU=a("a"),aTr=o("TFFunnelModel"),nTr=o(" or "),GU=a("a"),sTr=o("TFFunnelBaseModel"),lTr=o(" (Funnel Transformer model)"),iTr=l(),O8=a("li"),NTe=a("strong"),dTr=o("gpt2"),cTr=o(" \u2014 "),OU=a("a"),fTr=o("TFGPT2Model"),mTr=o(" (OpenAI GPT-2 model)"),gTr=l(),V8=a("li"),qTe=a("strong"),hTr=o("gptj"),pTr=o(" \u2014 "),VU=a("a"),_Tr=o("TFGPTJModel"),uTr=o(" (GPT-J model)"),bTr=l(),X8=a("li"),jTe=a("strong"),vTr=o("hubert"),FTr=o(" \u2014 "),XU=a("a"),TTr=o("TFHubertModel"),MTr=o(" (Hubert model)"),ETr=l(),z8=a("li"),DTe=a("strong"),CTr=o("layoutlm"),wTr=o(" \u2014 "),zU=a("a"),ATr=o("TFLayoutLMModel"),LTr=o(" (LayoutLM model)"),yTr=l(),W8=a("li"),GTe=a("strong"),xTr=o("led"),$Tr=o(" \u2014 "),WU=a("a"),kTr=o("TFLEDModel"),STr=o(" (LED model)"),RTr=l(),Q8=a("li"),OTe=a("strong"),PTr=o("longformer"),BTr=o(" \u2014 "),QU=a("a"),ITr=o("TFLongformerModel"),NTr=o(" (Longformer model)"),qTr=l(),H8=a("li"),VTe=a("strong"),jTr=o("lxmert"),DTr=o(" \u2014 "),HU=a("a"),GTr=o("TFLxmertModel"),OTr=o(" (LXMERT model)"),VTr=l(),U8=a("li"),XTe=a("strong"),XTr=o("marian"),zTr=o(" \u2014 "),UU=a("a"),WTr=o("TFMarianModel"),QTr=o(" (Marian model)"),HTr=l(),J8=a("li"),zTe=a("strong"),UTr=o("mbart"),JTr=o(" \u2014 "),JU=a("a"),YTr=o("TFMBartModel"),KTr=o(" (mBART model)"),ZTr=l(),Y8=a("li"),WTe=a("strong"),e7r=o("mobilebert"),o7r=o(" \u2014 "),YU=a("a"),r7r=o("TFMobileBertModel"),t7r=o(" (MobileBERT model)"),a7r=l(),K8=a("li"),QTe=a("strong"),n7r=o("mpnet"),s7r=o(" \u2014 "),KU=a("a"),l7r=o("TFMPNetModel"),i7r=o(" (MPNet model)"),d7r=l(),Z8=a("li"),HTe=a("strong"),c7r=o("mt5"),f7r=o(" \u2014 "),ZU=a("a"),m7r=o("TFMT5Model"),g7r=o(" (MT5 model)"),h7r=l(),e9=a("li"),UTe=a("strong"),p7r=o("openai-gpt"),_7r=o(" \u2014 "),eJ=a("a"),u7r=o("TFOpenAIGPTModel"),b7r=o(" (OpenAI GPT model)"),v7r=l(),o9=a("li"),JTe=a("strong"),F7r=o("opt"),T7r=o(" \u2014 "),oJ=a("a"),M7r=o("TFOPTModel"),E7r=o(" (OPT model)"),C7r=l(),r9=a("li"),YTe=a("strong"),w7r=o("pegasus"),A7r=o(" \u2014 "),rJ=a("a"),L7r=o("TFPegasusModel"),y7r=o(" (Pegasus model)"),x7r=l(),t9=a("li"),KTe=a("strong"),$7r=o("regnet"),k7r=o(" \u2014 "),tJ=a("a"),S7r=o("TFRegNetModel"),R7r=o(" (RegNet model)"),P7r=l(),a9=a("li"),ZTe=a("strong"),B7r=o("rembert"),I7r=o(" \u2014 "),aJ=a("a"),N7r=o("TFRemBertModel"),q7r=o(" (RemBERT model)"),j7r=l(),n9=a("li"),e7e=a("strong"),D7r=o("resnet"),G7r=o(" \u2014 "),nJ=a("a"),O7r=o("TFResNetModel"),V7r=o(" (ResNet model)"),X7r=l(),s9=a("li"),o7e=a("strong"),z7r=o("roberta"),W7r=o(" \u2014 "),sJ=a("a"),Q7r=o("TFRobertaModel"),H7r=o(" (RoBERTa model)"),U7r=l(),l9=a("li"),r7e=a("strong"),J7r=o("roformer"),Y7r=o(" \u2014 "),lJ=a("a"),K7r=o("TFRoFormerModel"),Z7r=o(" (RoFormer model)"),e8r=l(),i9=a("li"),t7e=a("strong"),o8r=o("speech_to_text"),r8r=o(" \u2014 "),iJ=a("a"),t8r=o("TFSpeech2TextModel"),a8r=o(" (Speech2Text model)"),n8r=l(),d9=a("li"),a7e=a("strong"),s8r=o("swin"),l8r=o(" \u2014 "),dJ=a("a"),i8r=o("TFSwinModel"),d8r=o(" (Swin Transformer model)"),c8r=l(),c9=a("li"),n7e=a("strong"),f8r=o("t5"),m8r=o(" \u2014 "),cJ=a("a"),g8r=o("TFT5Model"),h8r=o(" (T5 model)"),p8r=l(),f9=a("li"),s7e=a("strong"),_8r=o("tapas"),u8r=o(" \u2014 "),fJ=a("a"),b8r=o("TFTapasModel"),v8r=o(" (TAPAS model)"),F8r=l(),m9=a("li"),l7e=a("strong"),T8r=o("transfo-xl"),M8r=o(" \u2014 "),mJ=a("a"),E8r=o("TFTransfoXLModel"),C8r=o(" (Transformer-XL model)"),w8r=l(),g9=a("li"),i7e=a("strong"),A8r=o("vit"),L8r=o(" \u2014 "),gJ=a("a"),y8r=o("TFViTModel"),x8r=o(" (ViT model)"),$8r=l(),h9=a("li"),d7e=a("strong"),k8r=o("vit_mae"),S8r=o(" \u2014 "),hJ=a("a"),R8r=o("TFViTMAEModel"),P8r=o(" (ViTMAE model)"),B8r=l(),p9=a("li"),c7e=a("strong"),I8r=o("wav2vec2"),N8r=o(" \u2014 "),pJ=a("a"),q8r=o("TFWav2Vec2Model"),j8r=o(" (Wav2Vec2 model)"),D8r=l(),_9=a("li"),f7e=a("strong"),G8r=o("xlm"),O8r=o(" \u2014 "),_J=a("a"),V8r=o("TFXLMModel"),X8r=o(" (XLM model)"),z8r=l(),u9=a("li"),m7e=a("strong"),W8r=o("xlm-roberta"),Q8r=o(" \u2014 "),uJ=a("a"),H8r=o("TFXLMRobertaModel"),U8r=o(" (XLM-RoBERTa model)"),J8r=l(),b9=a("li"),g7e=a("strong"),Y8r=o("xlnet"),K8r=o(" \u2014 "),bJ=a("a"),Z8r=o("TFXLNetModel"),e9r=o(" (XLNet model)"),o9r=l(),F(v9.$$.fragment),Lze=l(),cc=a("h2"),F9=a("a"),h7e=a("span"),F(ex.$$.fragment),r9r=l(),p7e=a("span"),t9r=o("TFAutoModelForPreTraining"),yze=l(),rr=a("div"),F(ox.$$.fragment),a9r=l(),fc=a("p"),n9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),vJ=a("a"),s9r=o("from_pretrained()"),l9r=o(" class method or the "),FJ=a("a"),i9r=o("from_config()"),d9r=o(` class
method.`),c9r=l(),rx=a("p"),f9r=o("This class cannot be instantiated directly using "),_7e=a("code"),m9r=o("__init__()"),g9r=o(" (throws an error)."),h9r=l(),Pt=a("div"),F(tx.$$.fragment),p9r=l(),u7e=a("p"),_9r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),u9r=l(),mc=a("p"),b9r=o(`Note:
Loading a model from its configuration file does `),b7e=a("strong"),v9r=o("not"),F9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TJ=a("a"),T9r=o("from_pretrained()"),M9r=o(" to load the model weights."),E9r=l(),F(T9.$$.fragment),C9r=l(),$r=a("div"),F(ax.$$.fragment),w9r=l(),v7e=a("p"),A9r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),L9r=l(),ln=a("p"),y9r=o("The model class to instantiate is selected based on the "),F7e=a("code"),x9r=o("model_type"),$9r=o(` property of the config object (either
passed as an argument or loaded from `),T7e=a("code"),k9r=o("pretrained_model_name_or_path"),S9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M7e=a("code"),R9r=o("pretrained_model_name_or_path"),P9r=o(":"),B9r=l(),se=a("ul"),M9=a("li"),E7e=a("strong"),I9r=o("albert"),N9r=o(" \u2014 "),MJ=a("a"),q9r=o("TFAlbertForPreTraining"),j9r=o(" (ALBERT model)"),D9r=l(),E9=a("li"),C7e=a("strong"),G9r=o("bart"),O9r=o(" \u2014 "),EJ=a("a"),V9r=o("TFBartForConditionalGeneration"),X9r=o(" (BART model)"),z9r=l(),C9=a("li"),w7e=a("strong"),W9r=o("bert"),Q9r=o(" \u2014 "),CJ=a("a"),H9r=o("TFBertForPreTraining"),U9r=o(" (BERT model)"),J9r=l(),w9=a("li"),A7e=a("strong"),Y9r=o("camembert"),K9r=o(" \u2014 "),wJ=a("a"),Z9r=o("TFCamembertForMaskedLM"),eMr=o(" (CamemBERT model)"),oMr=l(),A9=a("li"),L7e=a("strong"),rMr=o("ctrl"),tMr=o(" \u2014 "),AJ=a("a"),aMr=o("TFCTRLLMHeadModel"),nMr=o(" (CTRL model)"),sMr=l(),L9=a("li"),y7e=a("strong"),lMr=o("distilbert"),iMr=o(" \u2014 "),LJ=a("a"),dMr=o("TFDistilBertForMaskedLM"),cMr=o(" (DistilBERT model)"),fMr=l(),y9=a("li"),x7e=a("strong"),mMr=o("electra"),gMr=o(" \u2014 "),yJ=a("a"),hMr=o("TFElectraForPreTraining"),pMr=o(" (ELECTRA model)"),_Mr=l(),x9=a("li"),$7e=a("strong"),uMr=o("flaubert"),bMr=o(" \u2014 "),xJ=a("a"),vMr=o("TFFlaubertWithLMHeadModel"),FMr=o(" (FlauBERT model)"),TMr=l(),$9=a("li"),k7e=a("strong"),MMr=o("funnel"),EMr=o(" \u2014 "),$J=a("a"),CMr=o("TFFunnelForPreTraining"),wMr=o(" (Funnel Transformer model)"),AMr=l(),k9=a("li"),S7e=a("strong"),LMr=o("gpt2"),yMr=o(" \u2014 "),kJ=a("a"),xMr=o("TFGPT2LMHeadModel"),$Mr=o(" (OpenAI GPT-2 model)"),kMr=l(),S9=a("li"),R7e=a("strong"),SMr=o("layoutlm"),RMr=o(" \u2014 "),SJ=a("a"),PMr=o("TFLayoutLMForMaskedLM"),BMr=o(" (LayoutLM model)"),IMr=l(),R9=a("li"),P7e=a("strong"),NMr=o("lxmert"),qMr=o(" \u2014 "),RJ=a("a"),jMr=o("TFLxmertForPreTraining"),DMr=o(" (LXMERT model)"),GMr=l(),P9=a("li"),B7e=a("strong"),OMr=o("mobilebert"),VMr=o(" \u2014 "),PJ=a("a"),XMr=o("TFMobileBertForPreTraining"),zMr=o(" (MobileBERT model)"),WMr=l(),B9=a("li"),I7e=a("strong"),QMr=o("mpnet"),HMr=o(" \u2014 "),BJ=a("a"),UMr=o("TFMPNetForMaskedLM"),JMr=o(" (MPNet model)"),YMr=l(),I9=a("li"),N7e=a("strong"),KMr=o("openai-gpt"),ZMr=o(" \u2014 "),IJ=a("a"),e4r=o("TFOpenAIGPTLMHeadModel"),o4r=o(" (OpenAI GPT model)"),r4r=l(),N9=a("li"),q7e=a("strong"),t4r=o("roberta"),a4r=o(" \u2014 "),NJ=a("a"),n4r=o("TFRobertaForMaskedLM"),s4r=o(" (RoBERTa model)"),l4r=l(),q9=a("li"),j7e=a("strong"),i4r=o("t5"),d4r=o(" \u2014 "),qJ=a("a"),c4r=o("TFT5ForConditionalGeneration"),f4r=o(" (T5 model)"),m4r=l(),j9=a("li"),D7e=a("strong"),g4r=o("tapas"),h4r=o(" \u2014 "),jJ=a("a"),p4r=o("TFTapasForMaskedLM"),_4r=o(" (TAPAS model)"),u4r=l(),D9=a("li"),G7e=a("strong"),b4r=o("transfo-xl"),v4r=o(" \u2014 "),DJ=a("a"),F4r=o("TFTransfoXLLMHeadModel"),T4r=o(" (Transformer-XL model)"),M4r=l(),G9=a("li"),O7e=a("strong"),E4r=o("vit_mae"),C4r=o(" \u2014 "),GJ=a("a"),w4r=o("TFViTMAEForPreTraining"),A4r=o(" (ViTMAE model)"),L4r=l(),O9=a("li"),V7e=a("strong"),y4r=o("xlm"),x4r=o(" \u2014 "),OJ=a("a"),$4r=o("TFXLMWithLMHeadModel"),k4r=o(" (XLM model)"),S4r=l(),V9=a("li"),X7e=a("strong"),R4r=o("xlm-roberta"),P4r=o(" \u2014 "),VJ=a("a"),B4r=o("TFXLMRobertaForMaskedLM"),I4r=o(" (XLM-RoBERTa model)"),N4r=l(),X9=a("li"),z7e=a("strong"),q4r=o("xlnet"),j4r=o(" \u2014 "),XJ=a("a"),D4r=o("TFXLNetLMHeadModel"),G4r=o(" (XLNet model)"),O4r=l(),F(z9.$$.fragment),xze=l(),gc=a("h2"),W9=a("a"),W7e=a("span"),F(nx.$$.fragment),V4r=l(),Q7e=a("span"),X4r=o("TFAutoModelForCausalLM"),$ze=l(),tr=a("div"),F(sx.$$.fragment),z4r=l(),hc=a("p"),W4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),zJ=a("a"),Q4r=o("from_pretrained()"),H4r=o(" class method or the "),WJ=a("a"),U4r=o("from_config()"),J4r=o(` class
method.`),Y4r=l(),lx=a("p"),K4r=o("This class cannot be instantiated directly using "),H7e=a("code"),Z4r=o("__init__()"),eEr=o(" (throws an error)."),oEr=l(),Bt=a("div"),F(ix.$$.fragment),rEr=l(),U7e=a("p"),tEr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),aEr=l(),pc=a("p"),nEr=o(`Note:
Loading a model from its configuration file does `),J7e=a("strong"),sEr=o("not"),lEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=a("a"),iEr=o("from_pretrained()"),dEr=o(" to load the model weights."),cEr=l(),F(Q9.$$.fragment),fEr=l(),kr=a("div"),F(dx.$$.fragment),mEr=l(),Y7e=a("p"),gEr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),hEr=l(),dn=a("p"),pEr=o("The model class to instantiate is selected based on the "),K7e=a("code"),_Er=o("model_type"),uEr=o(` property of the config object (either
passed as an argument or loaded from `),Z7e=a("code"),bEr=o("pretrained_model_name_or_path"),vEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e8e=a("code"),FEr=o("pretrained_model_name_or_path"),TEr=o(":"),MEr=l(),Me=a("ul"),H9=a("li"),o8e=a("strong"),EEr=o("bert"),CEr=o(" \u2014 "),HJ=a("a"),wEr=o("TFBertLMHeadModel"),AEr=o(" (BERT model)"),LEr=l(),U9=a("li"),r8e=a("strong"),yEr=o("camembert"),xEr=o(" \u2014 "),UJ=a("a"),$Er=o("TFCamembertForCausalLM"),kEr=o(" (CamemBERT model)"),SEr=l(),J9=a("li"),t8e=a("strong"),REr=o("ctrl"),PEr=o(" \u2014 "),JJ=a("a"),BEr=o("TFCTRLLMHeadModel"),IEr=o(" (CTRL model)"),NEr=l(),Y9=a("li"),a8e=a("strong"),qEr=o("gpt2"),jEr=o(" \u2014 "),YJ=a("a"),DEr=o("TFGPT2LMHeadModel"),GEr=o(" (OpenAI GPT-2 model)"),OEr=l(),K9=a("li"),n8e=a("strong"),VEr=o("gptj"),XEr=o(" \u2014 "),KJ=a("a"),zEr=o("TFGPTJForCausalLM"),WEr=o(" (GPT-J model)"),QEr=l(),Z9=a("li"),s8e=a("strong"),HEr=o("openai-gpt"),UEr=o(" \u2014 "),ZJ=a("a"),JEr=o("TFOpenAIGPTLMHeadModel"),YEr=o(" (OpenAI GPT model)"),KEr=l(),eM=a("li"),l8e=a("strong"),ZEr=o("opt"),eCr=o(" \u2014 "),eY=a("a"),oCr=o("TFOPTForCausalLM"),rCr=o(" (OPT model)"),tCr=l(),oM=a("li"),i8e=a("strong"),aCr=o("rembert"),nCr=o(" \u2014 "),oY=a("a"),sCr=o("TFRemBertForCausalLM"),lCr=o(" (RemBERT model)"),iCr=l(),rM=a("li"),d8e=a("strong"),dCr=o("roberta"),cCr=o(" \u2014 "),rY=a("a"),fCr=o("TFRobertaForCausalLM"),mCr=o(" (RoBERTa model)"),gCr=l(),tM=a("li"),c8e=a("strong"),hCr=o("roformer"),pCr=o(" \u2014 "),tY=a("a"),_Cr=o("TFRoFormerForCausalLM"),uCr=o(" (RoFormer model)"),bCr=l(),aM=a("li"),f8e=a("strong"),vCr=o("transfo-xl"),FCr=o(" \u2014 "),aY=a("a"),TCr=o("TFTransfoXLLMHeadModel"),MCr=o(" (Transformer-XL model)"),ECr=l(),nM=a("li"),m8e=a("strong"),CCr=o("xlm"),wCr=o(" \u2014 "),nY=a("a"),ACr=o("TFXLMWithLMHeadModel"),LCr=o(" (XLM model)"),yCr=l(),sM=a("li"),g8e=a("strong"),xCr=o("xlnet"),$Cr=o(" \u2014 "),sY=a("a"),kCr=o("TFXLNetLMHeadModel"),SCr=o(" (XLNet model)"),RCr=l(),F(lM.$$.fragment),kze=l(),_c=a("h2"),iM=a("a"),h8e=a("span"),F(cx.$$.fragment),PCr=l(),p8e=a("span"),BCr=o("TFAutoModelForImageClassification"),Sze=l(),ar=a("div"),F(fx.$$.fragment),ICr=l(),uc=a("p"),NCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),lY=a("a"),qCr=o("from_pretrained()"),jCr=o(" class method or the "),iY=a("a"),DCr=o("from_config()"),GCr=o(` class
method.`),OCr=l(),mx=a("p"),VCr=o("This class cannot be instantiated directly using "),_8e=a("code"),XCr=o("__init__()"),zCr=o(" (throws an error)."),WCr=l(),It=a("div"),F(gx.$$.fragment),QCr=l(),u8e=a("p"),HCr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),UCr=l(),bc=a("p"),JCr=o(`Note:
Loading a model from its configuration file does `),b8e=a("strong"),YCr=o("not"),KCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dY=a("a"),ZCr=o("from_pretrained()"),e5r=o(" to load the model weights."),o5r=l(),F(dM.$$.fragment),r5r=l(),Sr=a("div"),F(hx.$$.fragment),t5r=l(),v8e=a("p"),a5r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),n5r=l(),cn=a("p"),s5r=o("The model class to instantiate is selected based on the "),F8e=a("code"),l5r=o("model_type"),i5r=o(` property of the config object (either
passed as an argument or loaded from `),T8e=a("code"),d5r=o("pretrained_model_name_or_path"),c5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M8e=a("code"),f5r=o("pretrained_model_name_or_path"),m5r=o(":"),g5r=l(),We=a("ul"),cM=a("li"),E8e=a("strong"),h5r=o("convnext"),p5r=o(" \u2014 "),cY=a("a"),_5r=o("TFConvNextForImageClassification"),u5r=o(" (ConvNeXT model)"),b5r=l(),fM=a("li"),C8e=a("strong"),v5r=o("data2vec-vision"),F5r=o(" \u2014 "),fY=a("a"),T5r=o("TFData2VecVisionForImageClassification"),M5r=o(" (Data2VecVision model)"),E5r=l(),Ks=a("li"),w8e=a("strong"),C5r=o("deit"),w5r=o(" \u2014 "),mY=a("a"),A5r=o("TFDeiTForImageClassification"),L5r=o(" or "),gY=a("a"),y5r=o("TFDeiTForImageClassificationWithTeacher"),x5r=o(" (DeiT model)"),$5r=l(),mM=a("li"),A8e=a("strong"),k5r=o("regnet"),S5r=o(" \u2014 "),hY=a("a"),R5r=o("TFRegNetForImageClassification"),P5r=o(" (RegNet model)"),B5r=l(),gM=a("li"),L8e=a("strong"),I5r=o("resnet"),N5r=o(" \u2014 "),pY=a("a"),q5r=o("TFResNetForImageClassification"),j5r=o(" (ResNet model)"),D5r=l(),hM=a("li"),y8e=a("strong"),G5r=o("swin"),O5r=o(" \u2014 "),_Y=a("a"),V5r=o("TFSwinForImageClassification"),X5r=o(" (Swin Transformer model)"),z5r=l(),pM=a("li"),x8e=a("strong"),W5r=o("vit"),Q5r=o(" \u2014 "),uY=a("a"),H5r=o("TFViTForImageClassification"),U5r=o(" (ViT model)"),J5r=l(),F(_M.$$.fragment),Rze=l(),vc=a("h2"),uM=a("a"),$8e=a("span"),F(px.$$.fragment),Y5r=l(),k8e=a("span"),K5r=o("TFAutoModelForMaskedLM"),Pze=l(),nr=a("div"),F(_x.$$.fragment),Z5r=l(),Fc=a("p"),e0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),bY=a("a"),o0r=o("from_pretrained()"),r0r=o(" class method or the "),vY=a("a"),t0r=o("from_config()"),a0r=o(` class
method.`),n0r=l(),ux=a("p"),s0r=o("This class cannot be instantiated directly using "),S8e=a("code"),l0r=o("__init__()"),i0r=o(" (throws an error)."),d0r=l(),Nt=a("div"),F(bx.$$.fragment),c0r=l(),R8e=a("p"),f0r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),m0r=l(),Tc=a("p"),g0r=o(`Note:
Loading a model from its configuration file does `),P8e=a("strong"),h0r=o("not"),p0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=a("a"),_0r=o("from_pretrained()"),u0r=o(" to load the model weights."),b0r=l(),F(bM.$$.fragment),v0r=l(),Rr=a("div"),F(vx.$$.fragment),F0r=l(),B8e=a("p"),T0r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),M0r=l(),fn=a("p"),E0r=o("The model class to instantiate is selected based on the "),I8e=a("code"),C0r=o("model_type"),w0r=o(` property of the config object (either
passed as an argument or loaded from `),N8e=a("code"),A0r=o("pretrained_model_name_or_path"),L0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q8e=a("code"),y0r=o("pretrained_model_name_or_path"),x0r=o(":"),$0r=l(),ie=a("ul"),vM=a("li"),j8e=a("strong"),k0r=o("albert"),S0r=o(" \u2014 "),TY=a("a"),R0r=o("TFAlbertForMaskedLM"),P0r=o(" (ALBERT model)"),B0r=l(),FM=a("li"),D8e=a("strong"),I0r=o("bert"),N0r=o(" \u2014 "),MY=a("a"),q0r=o("TFBertForMaskedLM"),j0r=o(" (BERT model)"),D0r=l(),TM=a("li"),G8e=a("strong"),G0r=o("camembert"),O0r=o(" \u2014 "),EY=a("a"),V0r=o("TFCamembertForMaskedLM"),X0r=o(" (CamemBERT model)"),z0r=l(),MM=a("li"),O8e=a("strong"),W0r=o("convbert"),Q0r=o(" \u2014 "),CY=a("a"),H0r=o("TFConvBertForMaskedLM"),U0r=o(" (ConvBERT model)"),J0r=l(),EM=a("li"),V8e=a("strong"),Y0r=o("deberta"),K0r=o(" \u2014 "),wY=a("a"),Z0r=o("TFDebertaForMaskedLM"),ewr=o(" (DeBERTa model)"),owr=l(),CM=a("li"),X8e=a("strong"),rwr=o("deberta-v2"),twr=o(" \u2014 "),AY=a("a"),awr=o("TFDebertaV2ForMaskedLM"),nwr=o(" (DeBERTa-v2 model)"),swr=l(),wM=a("li"),z8e=a("strong"),lwr=o("distilbert"),iwr=o(" \u2014 "),LY=a("a"),dwr=o("TFDistilBertForMaskedLM"),cwr=o(" (DistilBERT model)"),fwr=l(),AM=a("li"),W8e=a("strong"),mwr=o("electra"),gwr=o(" \u2014 "),yY=a("a"),hwr=o("TFElectraForMaskedLM"),pwr=o(" (ELECTRA model)"),_wr=l(),LM=a("li"),Q8e=a("strong"),uwr=o("flaubert"),bwr=o(" \u2014 "),xY=a("a"),vwr=o("TFFlaubertWithLMHeadModel"),Fwr=o(" (FlauBERT model)"),Twr=l(),yM=a("li"),H8e=a("strong"),Mwr=o("funnel"),Ewr=o(" \u2014 "),$Y=a("a"),Cwr=o("TFFunnelForMaskedLM"),wwr=o(" (Funnel Transformer model)"),Awr=l(),xM=a("li"),U8e=a("strong"),Lwr=o("layoutlm"),ywr=o(" \u2014 "),kY=a("a"),xwr=o("TFLayoutLMForMaskedLM"),$wr=o(" (LayoutLM model)"),kwr=l(),$M=a("li"),J8e=a("strong"),Swr=o("longformer"),Rwr=o(" \u2014 "),SY=a("a"),Pwr=o("TFLongformerForMaskedLM"),Bwr=o(" (Longformer model)"),Iwr=l(),kM=a("li"),Y8e=a("strong"),Nwr=o("mobilebert"),qwr=o(" \u2014 "),RY=a("a"),jwr=o("TFMobileBertForMaskedLM"),Dwr=o(" (MobileBERT model)"),Gwr=l(),SM=a("li"),K8e=a("strong"),Owr=o("mpnet"),Vwr=o(" \u2014 "),PY=a("a"),Xwr=o("TFMPNetForMaskedLM"),zwr=o(" (MPNet model)"),Wwr=l(),RM=a("li"),Z8e=a("strong"),Qwr=o("rembert"),Hwr=o(" \u2014 "),BY=a("a"),Uwr=o("TFRemBertForMaskedLM"),Jwr=o(" (RemBERT model)"),Ywr=l(),PM=a("li"),e9e=a("strong"),Kwr=o("roberta"),Zwr=o(" \u2014 "),IY=a("a"),eAr=o("TFRobertaForMaskedLM"),oAr=o(" (RoBERTa model)"),rAr=l(),BM=a("li"),o9e=a("strong"),tAr=o("roformer"),aAr=o(" \u2014 "),NY=a("a"),nAr=o("TFRoFormerForMaskedLM"),sAr=o(" (RoFormer model)"),lAr=l(),IM=a("li"),r9e=a("strong"),iAr=o("tapas"),dAr=o(" \u2014 "),qY=a("a"),cAr=o("TFTapasForMaskedLM"),fAr=o(" (TAPAS model)"),mAr=l(),NM=a("li"),t9e=a("strong"),gAr=o("xlm"),hAr=o(" \u2014 "),jY=a("a"),pAr=o("TFXLMWithLMHeadModel"),_Ar=o(" (XLM model)"),uAr=l(),qM=a("li"),a9e=a("strong"),bAr=o("xlm-roberta"),vAr=o(" \u2014 "),DY=a("a"),FAr=o("TFXLMRobertaForMaskedLM"),TAr=o(" (XLM-RoBERTa model)"),MAr=l(),F(jM.$$.fragment),Bze=l(),Mc=a("h2"),DM=a("a"),n9e=a("span"),F(Fx.$$.fragment),EAr=l(),s9e=a("span"),CAr=o("TFAutoModelForSeq2SeqLM"),Ize=l(),sr=a("div"),F(Tx.$$.fragment),wAr=l(),Ec=a("p"),AAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),GY=a("a"),LAr=o("from_pretrained()"),yAr=o(" class method or the "),OY=a("a"),xAr=o("from_config()"),$Ar=o(` class
method.`),kAr=l(),Mx=a("p"),SAr=o("This class cannot be instantiated directly using "),l9e=a("code"),RAr=o("__init__()"),PAr=o(" (throws an error)."),BAr=l(),qt=a("div"),F(Ex.$$.fragment),IAr=l(),i9e=a("p"),NAr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),qAr=l(),Cc=a("p"),jAr=o(`Note:
Loading a model from its configuration file does `),d9e=a("strong"),DAr=o("not"),GAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VY=a("a"),OAr=o("from_pretrained()"),VAr=o(" to load the model weights."),XAr=l(),F(GM.$$.fragment),zAr=l(),Pr=a("div"),F(Cx.$$.fragment),WAr=l(),c9e=a("p"),QAr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),HAr=l(),mn=a("p"),UAr=o("The model class to instantiate is selected based on the "),f9e=a("code"),JAr=o("model_type"),YAr=o(` property of the config object (either
passed as an argument or loaded from `),m9e=a("code"),KAr=o("pretrained_model_name_or_path"),ZAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g9e=a("code"),e6r=o("pretrained_model_name_or_path"),o6r=o(":"),r6r=l(),ye=a("ul"),OM=a("li"),h9e=a("strong"),t6r=o("bart"),a6r=o(" \u2014 "),XY=a("a"),n6r=o("TFBartForConditionalGeneration"),s6r=o(" (BART model)"),l6r=l(),VM=a("li"),p9e=a("strong"),i6r=o("blenderbot"),d6r=o(" \u2014 "),zY=a("a"),c6r=o("TFBlenderbotForConditionalGeneration"),f6r=o(" (Blenderbot model)"),m6r=l(),XM=a("li"),_9e=a("strong"),g6r=o("blenderbot-small"),h6r=o(" \u2014 "),WY=a("a"),p6r=o("TFBlenderbotSmallForConditionalGeneration"),_6r=o(" (BlenderbotSmall model)"),u6r=l(),zM=a("li"),u9e=a("strong"),b6r=o("encoder-decoder"),v6r=o(" \u2014 "),QY=a("a"),F6r=o("TFEncoderDecoderModel"),T6r=o(" (Encoder decoder model)"),M6r=l(),WM=a("li"),b9e=a("strong"),E6r=o("led"),C6r=o(" \u2014 "),HY=a("a"),w6r=o("TFLEDForConditionalGeneration"),A6r=o(" (LED model)"),L6r=l(),QM=a("li"),v9e=a("strong"),y6r=o("marian"),x6r=o(" \u2014 "),UY=a("a"),$6r=o("TFMarianMTModel"),k6r=o(" (Marian model)"),S6r=l(),HM=a("li"),F9e=a("strong"),R6r=o("mbart"),P6r=o(" \u2014 "),JY=a("a"),B6r=o("TFMBartForConditionalGeneration"),I6r=o(" (mBART model)"),N6r=l(),UM=a("li"),T9e=a("strong"),q6r=o("mt5"),j6r=o(" \u2014 "),YY=a("a"),D6r=o("TFMT5ForConditionalGeneration"),G6r=o(" (MT5 model)"),O6r=l(),JM=a("li"),M9e=a("strong"),V6r=o("pegasus"),X6r=o(" \u2014 "),KY=a("a"),z6r=o("TFPegasusForConditionalGeneration"),W6r=o(" (Pegasus model)"),Q6r=l(),YM=a("li"),E9e=a("strong"),H6r=o("t5"),U6r=o(" \u2014 "),ZY=a("a"),J6r=o("TFT5ForConditionalGeneration"),Y6r=o(" (T5 model)"),K6r=l(),F(KM.$$.fragment),Nze=l(),wc=a("h2"),ZM=a("a"),C9e=a("span"),F(wx.$$.fragment),Z6r=l(),w9e=a("span"),eLr=o("TFAutoModelForSequenceClassification"),qze=l(),lr=a("div"),F(Ax.$$.fragment),oLr=l(),Ac=a("p"),rLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),eK=a("a"),tLr=o("from_pretrained()"),aLr=o(" class method or the "),oK=a("a"),nLr=o("from_config()"),sLr=o(` class
method.`),lLr=l(),Lx=a("p"),iLr=o("This class cannot be instantiated directly using "),A9e=a("code"),dLr=o("__init__()"),cLr=o(" (throws an error)."),fLr=l(),jt=a("div"),F(yx.$$.fragment),mLr=l(),L9e=a("p"),gLr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),hLr=l(),Lc=a("p"),pLr=o(`Note:
Loading a model from its configuration file does `),y9e=a("strong"),_Lr=o("not"),uLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rK=a("a"),bLr=o("from_pretrained()"),vLr=o(" to load the model weights."),FLr=l(),F(e4.$$.fragment),TLr=l(),Br=a("div"),F(xx.$$.fragment),MLr=l(),x9e=a("p"),ELr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),CLr=l(),gn=a("p"),wLr=o("The model class to instantiate is selected based on the "),$9e=a("code"),ALr=o("model_type"),LLr=o(` property of the config object (either
passed as an argument or loaded from `),k9e=a("code"),yLr=o("pretrained_model_name_or_path"),xLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S9e=a("code"),$Lr=o("pretrained_model_name_or_path"),kLr=o(":"),SLr=l(),te=a("ul"),o4=a("li"),R9e=a("strong"),RLr=o("albert"),PLr=o(" \u2014 "),tK=a("a"),BLr=o("TFAlbertForSequenceClassification"),ILr=o(" (ALBERT model)"),NLr=l(),r4=a("li"),P9e=a("strong"),qLr=o("bert"),jLr=o(" \u2014 "),aK=a("a"),DLr=o("TFBertForSequenceClassification"),GLr=o(" (BERT model)"),OLr=l(),t4=a("li"),B9e=a("strong"),VLr=o("camembert"),XLr=o(" \u2014 "),nK=a("a"),zLr=o("TFCamembertForSequenceClassification"),WLr=o(" (CamemBERT model)"),QLr=l(),a4=a("li"),I9e=a("strong"),HLr=o("convbert"),ULr=o(" \u2014 "),sK=a("a"),JLr=o("TFConvBertForSequenceClassification"),YLr=o(" (ConvBERT model)"),KLr=l(),n4=a("li"),N9e=a("strong"),ZLr=o("ctrl"),eyr=o(" \u2014 "),lK=a("a"),oyr=o("TFCTRLForSequenceClassification"),ryr=o(" (CTRL model)"),tyr=l(),s4=a("li"),q9e=a("strong"),ayr=o("deberta"),nyr=o(" \u2014 "),iK=a("a"),syr=o("TFDebertaForSequenceClassification"),lyr=o(" (DeBERTa model)"),iyr=l(),l4=a("li"),j9e=a("strong"),dyr=o("deberta-v2"),cyr=o(" \u2014 "),dK=a("a"),fyr=o("TFDebertaV2ForSequenceClassification"),myr=o(" (DeBERTa-v2 model)"),gyr=l(),i4=a("li"),D9e=a("strong"),hyr=o("distilbert"),pyr=o(" \u2014 "),cK=a("a"),_yr=o("TFDistilBertForSequenceClassification"),uyr=o(" (DistilBERT model)"),byr=l(),d4=a("li"),G9e=a("strong"),vyr=o("electra"),Fyr=o(" \u2014 "),fK=a("a"),Tyr=o("TFElectraForSequenceClassification"),Myr=o(" (ELECTRA model)"),Eyr=l(),c4=a("li"),O9e=a("strong"),Cyr=o("flaubert"),wyr=o(" \u2014 "),mK=a("a"),Ayr=o("TFFlaubertForSequenceClassification"),Lyr=o(" (FlauBERT model)"),yyr=l(),f4=a("li"),V9e=a("strong"),xyr=o("funnel"),$yr=o(" \u2014 "),gK=a("a"),kyr=o("TFFunnelForSequenceClassification"),Syr=o(" (Funnel Transformer model)"),Ryr=l(),m4=a("li"),X9e=a("strong"),Pyr=o("gpt2"),Byr=o(" \u2014 "),hK=a("a"),Iyr=o("TFGPT2ForSequenceClassification"),Nyr=o(" (OpenAI GPT-2 model)"),qyr=l(),g4=a("li"),z9e=a("strong"),jyr=o("gptj"),Dyr=o(" \u2014 "),pK=a("a"),Gyr=o("TFGPTJForSequenceClassification"),Oyr=o(" (GPT-J model)"),Vyr=l(),h4=a("li"),W9e=a("strong"),Xyr=o("layoutlm"),zyr=o(" \u2014 "),_K=a("a"),Wyr=o("TFLayoutLMForSequenceClassification"),Qyr=o(" (LayoutLM model)"),Hyr=l(),p4=a("li"),Q9e=a("strong"),Uyr=o("longformer"),Jyr=o(" \u2014 "),uK=a("a"),Yyr=o("TFLongformerForSequenceClassification"),Kyr=o(" (Longformer model)"),Zyr=l(),_4=a("li"),H9e=a("strong"),exr=o("mobilebert"),oxr=o(" \u2014 "),bK=a("a"),rxr=o("TFMobileBertForSequenceClassification"),txr=o(" (MobileBERT model)"),axr=l(),u4=a("li"),U9e=a("strong"),nxr=o("mpnet"),sxr=o(" \u2014 "),vK=a("a"),lxr=o("TFMPNetForSequenceClassification"),ixr=o(" (MPNet model)"),dxr=l(),b4=a("li"),J9e=a("strong"),cxr=o("openai-gpt"),fxr=o(" \u2014 "),FK=a("a"),mxr=o("TFOpenAIGPTForSequenceClassification"),gxr=o(" (OpenAI GPT model)"),hxr=l(),v4=a("li"),Y9e=a("strong"),pxr=o("rembert"),_xr=o(" \u2014 "),TK=a("a"),uxr=o("TFRemBertForSequenceClassification"),bxr=o(" (RemBERT model)"),vxr=l(),F4=a("li"),K9e=a("strong"),Fxr=o("roberta"),Txr=o(" \u2014 "),MK=a("a"),Mxr=o("TFRobertaForSequenceClassification"),Exr=o(" (RoBERTa model)"),Cxr=l(),T4=a("li"),Z9e=a("strong"),wxr=o("roformer"),Axr=o(" \u2014 "),EK=a("a"),Lxr=o("TFRoFormerForSequenceClassification"),yxr=o(" (RoFormer model)"),xxr=l(),M4=a("li"),eMe=a("strong"),$xr=o("tapas"),kxr=o(" \u2014 "),CK=a("a"),Sxr=o("TFTapasForSequenceClassification"),Rxr=o(" (TAPAS model)"),Pxr=l(),E4=a("li"),oMe=a("strong"),Bxr=o("transfo-xl"),Ixr=o(" \u2014 "),wK=a("a"),Nxr=o("TFTransfoXLForSequenceClassification"),qxr=o(" (Transformer-XL model)"),jxr=l(),C4=a("li"),rMe=a("strong"),Dxr=o("xlm"),Gxr=o(" \u2014 "),AK=a("a"),Oxr=o("TFXLMForSequenceClassification"),Vxr=o(" (XLM model)"),Xxr=l(),w4=a("li"),tMe=a("strong"),zxr=o("xlm-roberta"),Wxr=o(" \u2014 "),LK=a("a"),Qxr=o("TFXLMRobertaForSequenceClassification"),Hxr=o(" (XLM-RoBERTa model)"),Uxr=l(),A4=a("li"),aMe=a("strong"),Jxr=o("xlnet"),Yxr=o(" \u2014 "),yK=a("a"),Kxr=o("TFXLNetForSequenceClassification"),Zxr=o(" (XLNet model)"),e$r=l(),F(L4.$$.fragment),jze=l(),yc=a("h2"),y4=a("a"),nMe=a("span"),F($x.$$.fragment),o$r=l(),sMe=a("span"),r$r=o("TFAutoModelForMultipleChoice"),Dze=l(),ir=a("div"),F(kx.$$.fragment),t$r=l(),xc=a("p"),a$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),xK=a("a"),n$r=o("from_pretrained()"),s$r=o(" class method or the "),$K=a("a"),l$r=o("from_config()"),i$r=o(` class
method.`),d$r=l(),Sx=a("p"),c$r=o("This class cannot be instantiated directly using "),lMe=a("code"),f$r=o("__init__()"),m$r=o(" (throws an error)."),g$r=l(),Dt=a("div"),F(Rx.$$.fragment),h$r=l(),iMe=a("p"),p$r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),_$r=l(),$c=a("p"),u$r=o(`Note:
Loading a model from its configuration file does `),dMe=a("strong"),b$r=o("not"),v$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kK=a("a"),F$r=o("from_pretrained()"),T$r=o(" to load the model weights."),M$r=l(),F(x4.$$.fragment),E$r=l(),Ir=a("div"),F(Px.$$.fragment),C$r=l(),cMe=a("p"),w$r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),A$r=l(),hn=a("p"),L$r=o("The model class to instantiate is selected based on the "),fMe=a("code"),y$r=o("model_type"),x$r=o(` property of the config object (either
passed as an argument or loaded from `),mMe=a("code"),$$r=o("pretrained_model_name_or_path"),k$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gMe=a("code"),S$r=o("pretrained_model_name_or_path"),R$r=o(":"),P$r=l(),ue=a("ul"),$4=a("li"),hMe=a("strong"),B$r=o("albert"),I$r=o(" \u2014 "),SK=a("a"),N$r=o("TFAlbertForMultipleChoice"),q$r=o(" (ALBERT model)"),j$r=l(),k4=a("li"),pMe=a("strong"),D$r=o("bert"),G$r=o(" \u2014 "),RK=a("a"),O$r=o("TFBertForMultipleChoice"),V$r=o(" (BERT model)"),X$r=l(),S4=a("li"),_Me=a("strong"),z$r=o("camembert"),W$r=o(" \u2014 "),PK=a("a"),Q$r=o("TFCamembertForMultipleChoice"),H$r=o(" (CamemBERT model)"),U$r=l(),R4=a("li"),uMe=a("strong"),J$r=o("convbert"),Y$r=o(" \u2014 "),BK=a("a"),K$r=o("TFConvBertForMultipleChoice"),Z$r=o(" (ConvBERT model)"),ekr=l(),P4=a("li"),bMe=a("strong"),okr=o("distilbert"),rkr=o(" \u2014 "),IK=a("a"),tkr=o("TFDistilBertForMultipleChoice"),akr=o(" (DistilBERT model)"),nkr=l(),B4=a("li"),vMe=a("strong"),skr=o("electra"),lkr=o(" \u2014 "),NK=a("a"),ikr=o("TFElectraForMultipleChoice"),dkr=o(" (ELECTRA model)"),ckr=l(),I4=a("li"),FMe=a("strong"),fkr=o("flaubert"),mkr=o(" \u2014 "),qK=a("a"),gkr=o("TFFlaubertForMultipleChoice"),hkr=o(" (FlauBERT model)"),pkr=l(),N4=a("li"),TMe=a("strong"),_kr=o("funnel"),ukr=o(" \u2014 "),jK=a("a"),bkr=o("TFFunnelForMultipleChoice"),vkr=o(" (Funnel Transformer model)"),Fkr=l(),q4=a("li"),MMe=a("strong"),Tkr=o("longformer"),Mkr=o(" \u2014 "),DK=a("a"),Ekr=o("TFLongformerForMultipleChoice"),Ckr=o(" (Longformer model)"),wkr=l(),j4=a("li"),EMe=a("strong"),Akr=o("mobilebert"),Lkr=o(" \u2014 "),GK=a("a"),ykr=o("TFMobileBertForMultipleChoice"),xkr=o(" (MobileBERT model)"),$kr=l(),D4=a("li"),CMe=a("strong"),kkr=o("mpnet"),Skr=o(" \u2014 "),OK=a("a"),Rkr=o("TFMPNetForMultipleChoice"),Pkr=o(" (MPNet model)"),Bkr=l(),G4=a("li"),wMe=a("strong"),Ikr=o("rembert"),Nkr=o(" \u2014 "),VK=a("a"),qkr=o("TFRemBertForMultipleChoice"),jkr=o(" (RemBERT model)"),Dkr=l(),O4=a("li"),AMe=a("strong"),Gkr=o("roberta"),Okr=o(" \u2014 "),XK=a("a"),Vkr=o("TFRobertaForMultipleChoice"),Xkr=o(" (RoBERTa model)"),zkr=l(),V4=a("li"),LMe=a("strong"),Wkr=o("roformer"),Qkr=o(" \u2014 "),zK=a("a"),Hkr=o("TFRoFormerForMultipleChoice"),Ukr=o(" (RoFormer model)"),Jkr=l(),X4=a("li"),yMe=a("strong"),Ykr=o("xlm"),Kkr=o(" \u2014 "),WK=a("a"),Zkr=o("TFXLMForMultipleChoice"),eSr=o(" (XLM model)"),oSr=l(),z4=a("li"),xMe=a("strong"),rSr=o("xlm-roberta"),tSr=o(" \u2014 "),QK=a("a"),aSr=o("TFXLMRobertaForMultipleChoice"),nSr=o(" (XLM-RoBERTa model)"),sSr=l(),W4=a("li"),$Me=a("strong"),lSr=o("xlnet"),iSr=o(" \u2014 "),HK=a("a"),dSr=o("TFXLNetForMultipleChoice"),cSr=o(" (XLNet model)"),fSr=l(),F(Q4.$$.fragment),Gze=l(),kc=a("h2"),H4=a("a"),kMe=a("span"),F(Bx.$$.fragment),mSr=l(),SMe=a("span"),gSr=o("TFAutoModelForNextSentencePrediction"),Oze=l(),dr=a("div"),F(Ix.$$.fragment),hSr=l(),Sc=a("p"),pSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),UK=a("a"),_Sr=o("from_pretrained()"),uSr=o(" class method or the "),JK=a("a"),bSr=o("from_config()"),vSr=o(` class
method.`),FSr=l(),Nx=a("p"),TSr=o("This class cannot be instantiated directly using "),RMe=a("code"),MSr=o("__init__()"),ESr=o(" (throws an error)."),CSr=l(),Gt=a("div"),F(qx.$$.fragment),wSr=l(),PMe=a("p"),ASr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),LSr=l(),Rc=a("p"),ySr=o(`Note:
Loading a model from its configuration file does `),BMe=a("strong"),xSr=o("not"),$Sr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YK=a("a"),kSr=o("from_pretrained()"),SSr=o(" to load the model weights."),RSr=l(),F(U4.$$.fragment),PSr=l(),Nr=a("div"),F(jx.$$.fragment),BSr=l(),IMe=a("p"),ISr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),NSr=l(),pn=a("p"),qSr=o("The model class to instantiate is selected based on the "),NMe=a("code"),jSr=o("model_type"),DSr=o(` property of the config object (either
passed as an argument or loaded from `),qMe=a("code"),GSr=o("pretrained_model_name_or_path"),OSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jMe=a("code"),VSr=o("pretrained_model_name_or_path"),XSr=o(":"),zSr=l(),Dx=a("ul"),J4=a("li"),DMe=a("strong"),WSr=o("bert"),QSr=o(" \u2014 "),KK=a("a"),HSr=o("TFBertForNextSentencePrediction"),USr=o(" (BERT model)"),JSr=l(),Y4=a("li"),GMe=a("strong"),YSr=o("mobilebert"),KSr=o(" \u2014 "),ZK=a("a"),ZSr=o("TFMobileBertForNextSentencePrediction"),eRr=o(" (MobileBERT model)"),oRr=l(),F(K4.$$.fragment),Vze=l(),Pc=a("h2"),Z4=a("a"),OMe=a("span"),F(Gx.$$.fragment),rRr=l(),VMe=a("span"),tRr=o("TFAutoModelForTableQuestionAnswering"),Xze=l(),cr=a("div"),F(Ox.$$.fragment),aRr=l(),Bc=a("p"),nRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),eZ=a("a"),sRr=o("from_pretrained()"),lRr=o(" class method or the "),oZ=a("a"),iRr=o("from_config()"),dRr=o(` class
method.`),cRr=l(),Vx=a("p"),fRr=o("This class cannot be instantiated directly using "),XMe=a("code"),mRr=o("__init__()"),gRr=o(" (throws an error)."),hRr=l(),Ot=a("div"),F(Xx.$$.fragment),pRr=l(),zMe=a("p"),_Rr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),uRr=l(),Ic=a("p"),bRr=o(`Note:
Loading a model from its configuration file does `),WMe=a("strong"),vRr=o("not"),FRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rZ=a("a"),TRr=o("from_pretrained()"),MRr=o(" to load the model weights."),ERr=l(),F(eE.$$.fragment),CRr=l(),qr=a("div"),F(zx.$$.fragment),wRr=l(),QMe=a("p"),ARr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),LRr=l(),_n=a("p"),yRr=o("The model class to instantiate is selected based on the "),HMe=a("code"),xRr=o("model_type"),$Rr=o(` property of the config object (either
passed as an argument or loaded from `),UMe=a("code"),kRr=o("pretrained_model_name_or_path"),SRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JMe=a("code"),RRr=o("pretrained_model_name_or_path"),PRr=o(":"),BRr=l(),YMe=a("ul"),oE=a("li"),KMe=a("strong"),IRr=o("tapas"),NRr=o(" \u2014 "),tZ=a("a"),qRr=o("TFTapasForQuestionAnswering"),jRr=o(" (TAPAS model)"),DRr=l(),F(rE.$$.fragment),zze=l(),Nc=a("h2"),tE=a("a"),ZMe=a("span"),F(Wx.$$.fragment),GRr=l(),e4e=a("span"),ORr=o("TFAutoModelForTokenClassification"),Wze=l(),fr=a("div"),F(Qx.$$.fragment),VRr=l(),qc=a("p"),XRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),aZ=a("a"),zRr=o("from_pretrained()"),WRr=o(" class method or the "),nZ=a("a"),QRr=o("from_config()"),HRr=o(` class
method.`),URr=l(),Hx=a("p"),JRr=o("This class cannot be instantiated directly using "),o4e=a("code"),YRr=o("__init__()"),KRr=o(" (throws an error)."),ZRr=l(),Vt=a("div"),F(Ux.$$.fragment),ePr=l(),r4e=a("p"),oPr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),rPr=l(),jc=a("p"),tPr=o(`Note:
Loading a model from its configuration file does `),t4e=a("strong"),aPr=o("not"),nPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sZ=a("a"),sPr=o("from_pretrained()"),lPr=o(" to load the model weights."),iPr=l(),F(aE.$$.fragment),dPr=l(),jr=a("div"),F(Jx.$$.fragment),cPr=l(),a4e=a("p"),fPr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),mPr=l(),un=a("p"),gPr=o("The model class to instantiate is selected based on the "),n4e=a("code"),hPr=o("model_type"),pPr=o(` property of the config object (either
passed as an argument or loaded from `),s4e=a("code"),_Pr=o("pretrained_model_name_or_path"),uPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l4e=a("code"),bPr=o("pretrained_model_name_or_path"),vPr=o(":"),FPr=l(),de=a("ul"),nE=a("li"),i4e=a("strong"),TPr=o("albert"),MPr=o(" \u2014 "),lZ=a("a"),EPr=o("TFAlbertForTokenClassification"),CPr=o(" (ALBERT model)"),wPr=l(),sE=a("li"),d4e=a("strong"),APr=o("bert"),LPr=o(" \u2014 "),iZ=a("a"),yPr=o("TFBertForTokenClassification"),xPr=o(" (BERT model)"),$Pr=l(),lE=a("li"),c4e=a("strong"),kPr=o("camembert"),SPr=o(" \u2014 "),dZ=a("a"),RPr=o("TFCamembertForTokenClassification"),PPr=o(" (CamemBERT model)"),BPr=l(),iE=a("li"),f4e=a("strong"),IPr=o("convbert"),NPr=o(" \u2014 "),cZ=a("a"),qPr=o("TFConvBertForTokenClassification"),jPr=o(" (ConvBERT model)"),DPr=l(),dE=a("li"),m4e=a("strong"),GPr=o("deberta"),OPr=o(" \u2014 "),fZ=a("a"),VPr=o("TFDebertaForTokenClassification"),XPr=o(" (DeBERTa model)"),zPr=l(),cE=a("li"),g4e=a("strong"),WPr=o("deberta-v2"),QPr=o(" \u2014 "),mZ=a("a"),HPr=o("TFDebertaV2ForTokenClassification"),UPr=o(" (DeBERTa-v2 model)"),JPr=l(),fE=a("li"),h4e=a("strong"),YPr=o("distilbert"),KPr=o(" \u2014 "),gZ=a("a"),ZPr=o("TFDistilBertForTokenClassification"),eBr=o(" (DistilBERT model)"),oBr=l(),mE=a("li"),p4e=a("strong"),rBr=o("electra"),tBr=o(" \u2014 "),hZ=a("a"),aBr=o("TFElectraForTokenClassification"),nBr=o(" (ELECTRA model)"),sBr=l(),gE=a("li"),_4e=a("strong"),lBr=o("flaubert"),iBr=o(" \u2014 "),pZ=a("a"),dBr=o("TFFlaubertForTokenClassification"),cBr=o(" (FlauBERT model)"),fBr=l(),hE=a("li"),u4e=a("strong"),mBr=o("funnel"),gBr=o(" \u2014 "),_Z=a("a"),hBr=o("TFFunnelForTokenClassification"),pBr=o(" (Funnel Transformer model)"),_Br=l(),pE=a("li"),b4e=a("strong"),uBr=o("layoutlm"),bBr=o(" \u2014 "),uZ=a("a"),vBr=o("TFLayoutLMForTokenClassification"),FBr=o(" (LayoutLM model)"),TBr=l(),_E=a("li"),v4e=a("strong"),MBr=o("longformer"),EBr=o(" \u2014 "),bZ=a("a"),CBr=o("TFLongformerForTokenClassification"),wBr=o(" (Longformer model)"),ABr=l(),uE=a("li"),F4e=a("strong"),LBr=o("mobilebert"),yBr=o(" \u2014 "),vZ=a("a"),xBr=o("TFMobileBertForTokenClassification"),$Br=o(" (MobileBERT model)"),kBr=l(),bE=a("li"),T4e=a("strong"),SBr=o("mpnet"),RBr=o(" \u2014 "),FZ=a("a"),PBr=o("TFMPNetForTokenClassification"),BBr=o(" (MPNet model)"),IBr=l(),vE=a("li"),M4e=a("strong"),NBr=o("rembert"),qBr=o(" \u2014 "),TZ=a("a"),jBr=o("TFRemBertForTokenClassification"),DBr=o(" (RemBERT model)"),GBr=l(),FE=a("li"),E4e=a("strong"),OBr=o("roberta"),VBr=o(" \u2014 "),MZ=a("a"),XBr=o("TFRobertaForTokenClassification"),zBr=o(" (RoBERTa model)"),WBr=l(),TE=a("li"),C4e=a("strong"),QBr=o("roformer"),HBr=o(" \u2014 "),EZ=a("a"),UBr=o("TFRoFormerForTokenClassification"),JBr=o(" (RoFormer model)"),YBr=l(),ME=a("li"),w4e=a("strong"),KBr=o("xlm"),ZBr=o(" \u2014 "),CZ=a("a"),eIr=o("TFXLMForTokenClassification"),oIr=o(" (XLM model)"),rIr=l(),EE=a("li"),A4e=a("strong"),tIr=o("xlm-roberta"),aIr=o(" \u2014 "),wZ=a("a"),nIr=o("TFXLMRobertaForTokenClassification"),sIr=o(" (XLM-RoBERTa model)"),lIr=l(),CE=a("li"),L4e=a("strong"),iIr=o("xlnet"),dIr=o(" \u2014 "),AZ=a("a"),cIr=o("TFXLNetForTokenClassification"),fIr=o(" (XLNet model)"),mIr=l(),F(wE.$$.fragment),Qze=l(),Dc=a("h2"),AE=a("a"),y4e=a("span"),F(Yx.$$.fragment),gIr=l(),x4e=a("span"),hIr=o("TFAutoModelForQuestionAnswering"),Hze=l(),mr=a("div"),F(Kx.$$.fragment),pIr=l(),Gc=a("p"),_Ir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),LZ=a("a"),uIr=o("from_pretrained()"),bIr=o(" class method or the "),yZ=a("a"),vIr=o("from_config()"),FIr=o(` class
method.`),TIr=l(),Zx=a("p"),MIr=o("This class cannot be instantiated directly using "),$4e=a("code"),EIr=o("__init__()"),CIr=o(" (throws an error)."),wIr=l(),Xt=a("div"),F(e$.$$.fragment),AIr=l(),k4e=a("p"),LIr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),yIr=l(),Oc=a("p"),xIr=o(`Note:
Loading a model from its configuration file does `),S4e=a("strong"),$Ir=o("not"),kIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xZ=a("a"),SIr=o("from_pretrained()"),RIr=o(" to load the model weights."),PIr=l(),F(LE.$$.fragment),BIr=l(),Dr=a("div"),F(o$.$$.fragment),IIr=l(),R4e=a("p"),NIr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),qIr=l(),bn=a("p"),jIr=o("The model class to instantiate is selected based on the "),P4e=a("code"),DIr=o("model_type"),GIr=o(` property of the config object (either
passed as an argument or loaded from `),B4e=a("code"),OIr=o("pretrained_model_name_or_path"),VIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I4e=a("code"),XIr=o("pretrained_model_name_or_path"),zIr=o(":"),WIr=l(),ce=a("ul"),yE=a("li"),N4e=a("strong"),QIr=o("albert"),HIr=o(" \u2014 "),$Z=a("a"),UIr=o("TFAlbertForQuestionAnswering"),JIr=o(" (ALBERT model)"),YIr=l(),xE=a("li"),q4e=a("strong"),KIr=o("bert"),ZIr=o(" \u2014 "),kZ=a("a"),eNr=o("TFBertForQuestionAnswering"),oNr=o(" (BERT model)"),rNr=l(),$E=a("li"),j4e=a("strong"),tNr=o("camembert"),aNr=o(" \u2014 "),SZ=a("a"),nNr=o("TFCamembertForQuestionAnswering"),sNr=o(" (CamemBERT model)"),lNr=l(),kE=a("li"),D4e=a("strong"),iNr=o("convbert"),dNr=o(" \u2014 "),RZ=a("a"),cNr=o("TFConvBertForQuestionAnswering"),fNr=o(" (ConvBERT model)"),mNr=l(),SE=a("li"),G4e=a("strong"),gNr=o("deberta"),hNr=o(" \u2014 "),PZ=a("a"),pNr=o("TFDebertaForQuestionAnswering"),_Nr=o(" (DeBERTa model)"),uNr=l(),RE=a("li"),O4e=a("strong"),bNr=o("deberta-v2"),vNr=o(" \u2014 "),BZ=a("a"),FNr=o("TFDebertaV2ForQuestionAnswering"),TNr=o(" (DeBERTa-v2 model)"),MNr=l(),PE=a("li"),V4e=a("strong"),ENr=o("distilbert"),CNr=o(" \u2014 "),IZ=a("a"),wNr=o("TFDistilBertForQuestionAnswering"),ANr=o(" (DistilBERT model)"),LNr=l(),BE=a("li"),X4e=a("strong"),yNr=o("electra"),xNr=o(" \u2014 "),NZ=a("a"),$Nr=o("TFElectraForQuestionAnswering"),kNr=o(" (ELECTRA model)"),SNr=l(),IE=a("li"),z4e=a("strong"),RNr=o("flaubert"),PNr=o(" \u2014 "),qZ=a("a"),BNr=o("TFFlaubertForQuestionAnsweringSimple"),INr=o(" (FlauBERT model)"),NNr=l(),NE=a("li"),W4e=a("strong"),qNr=o("funnel"),jNr=o(" \u2014 "),jZ=a("a"),DNr=o("TFFunnelForQuestionAnswering"),GNr=o(" (Funnel Transformer model)"),ONr=l(),qE=a("li"),Q4e=a("strong"),VNr=o("gptj"),XNr=o(" \u2014 "),DZ=a("a"),zNr=o("TFGPTJForQuestionAnswering"),WNr=o(" (GPT-J model)"),QNr=l(),jE=a("li"),H4e=a("strong"),HNr=o("longformer"),UNr=o(" \u2014 "),GZ=a("a"),JNr=o("TFLongformerForQuestionAnswering"),YNr=o(" (Longformer model)"),KNr=l(),DE=a("li"),U4e=a("strong"),ZNr=o("mobilebert"),eqr=o(" \u2014 "),OZ=a("a"),oqr=o("TFMobileBertForQuestionAnswering"),rqr=o(" (MobileBERT model)"),tqr=l(),GE=a("li"),J4e=a("strong"),aqr=o("mpnet"),nqr=o(" \u2014 "),VZ=a("a"),sqr=o("TFMPNetForQuestionAnswering"),lqr=o(" (MPNet model)"),iqr=l(),OE=a("li"),Y4e=a("strong"),dqr=o("rembert"),cqr=o(" \u2014 "),XZ=a("a"),fqr=o("TFRemBertForQuestionAnswering"),mqr=o(" (RemBERT model)"),gqr=l(),VE=a("li"),K4e=a("strong"),hqr=o("roberta"),pqr=o(" \u2014 "),zZ=a("a"),_qr=o("TFRobertaForQuestionAnswering"),uqr=o(" (RoBERTa model)"),bqr=l(),XE=a("li"),Z4e=a("strong"),vqr=o("roformer"),Fqr=o(" \u2014 "),WZ=a("a"),Tqr=o("TFRoFormerForQuestionAnswering"),Mqr=o(" (RoFormer model)"),Eqr=l(),zE=a("li"),eEe=a("strong"),Cqr=o("xlm"),wqr=o(" \u2014 "),QZ=a("a"),Aqr=o("TFXLMForQuestionAnsweringSimple"),Lqr=o(" (XLM model)"),yqr=l(),WE=a("li"),oEe=a("strong"),xqr=o("xlm-roberta"),$qr=o(" \u2014 "),HZ=a("a"),kqr=o("TFXLMRobertaForQuestionAnswering"),Sqr=o(" (XLM-RoBERTa model)"),Rqr=l(),QE=a("li"),rEe=a("strong"),Pqr=o("xlnet"),Bqr=o(" \u2014 "),UZ=a("a"),Iqr=o("TFXLNetForQuestionAnsweringSimple"),Nqr=o(" (XLNet model)"),qqr=l(),F(HE.$$.fragment),Uze=l(),Vc=a("h2"),UE=a("a"),tEe=a("span"),F(r$.$$.fragment),jqr=l(),aEe=a("span"),Dqr=o("TFAutoModelForVision2Seq"),Jze=l(),gr=a("div"),F(t$.$$.fragment),Gqr=l(),Xc=a("p"),Oqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),JZ=a("a"),Vqr=o("from_pretrained()"),Xqr=o(" class method or the "),YZ=a("a"),zqr=o("from_config()"),Wqr=o(` class
method.`),Qqr=l(),a$=a("p"),Hqr=o("This class cannot be instantiated directly using "),nEe=a("code"),Uqr=o("__init__()"),Jqr=o(" (throws an error)."),Yqr=l(),zt=a("div"),F(n$.$$.fragment),Kqr=l(),sEe=a("p"),Zqr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ejr=l(),zc=a("p"),ojr=o(`Note:
Loading a model from its configuration file does `),lEe=a("strong"),rjr=o("not"),tjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KZ=a("a"),ajr=o("from_pretrained()"),njr=o(" to load the model weights."),sjr=l(),F(JE.$$.fragment),ljr=l(),Gr=a("div"),F(s$.$$.fragment),ijr=l(),iEe=a("p"),djr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),cjr=l(),vn=a("p"),fjr=o("The model class to instantiate is selected based on the "),dEe=a("code"),mjr=o("model_type"),gjr=o(` property of the config object (either
passed as an argument or loaded from `),cEe=a("code"),hjr=o("pretrained_model_name_or_path"),pjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fEe=a("code"),_jr=o("pretrained_model_name_or_path"),ujr=o(":"),bjr=l(),mEe=a("ul"),YE=a("li"),gEe=a("strong"),vjr=o("vision-encoder-decoder"),Fjr=o(" \u2014 "),ZZ=a("a"),Tjr=o("TFVisionEncoderDecoderModel"),Mjr=o(" (Vision Encoder decoder model)"),Ejr=l(),F(KE.$$.fragment),Yze=l(),Wc=a("h2"),ZE=a("a"),hEe=a("span"),F(l$.$$.fragment),Cjr=l(),pEe=a("span"),wjr=o("TFAutoModelForSpeechSeq2Seq"),Kze=l(),hr=a("div"),F(i$.$$.fragment),Ajr=l(),Qc=a("p"),Ljr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),eee=a("a"),yjr=o("from_pretrained()"),xjr=o(" class method or the "),oee=a("a"),$jr=o("from_config()"),kjr=o(` class
method.`),Sjr=l(),d$=a("p"),Rjr=o("This class cannot be instantiated directly using "),_Ee=a("code"),Pjr=o("__init__()"),Bjr=o(" (throws an error)."),Ijr=l(),Wt=a("div"),F(c$.$$.fragment),Njr=l(),uEe=a("p"),qjr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),jjr=l(),Hc=a("p"),Djr=o(`Note:
Loading a model from its configuration file does `),bEe=a("strong"),Gjr=o("not"),Ojr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ree=a("a"),Vjr=o("from_pretrained()"),Xjr=o(" to load the model weights."),zjr=l(),F(eC.$$.fragment),Wjr=l(),Or=a("div"),F(f$.$$.fragment),Qjr=l(),vEe=a("p"),Hjr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Ujr=l(),Fn=a("p"),Jjr=o("The model class to instantiate is selected based on the "),FEe=a("code"),Yjr=o("model_type"),Kjr=o(` property of the config object (either
passed as an argument or loaded from `),TEe=a("code"),Zjr=o("pretrained_model_name_or_path"),eDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MEe=a("code"),oDr=o("pretrained_model_name_or_path"),rDr=o(":"),tDr=l(),EEe=a("ul"),oC=a("li"),CEe=a("strong"),aDr=o("speech_to_text"),nDr=o(" \u2014 "),tee=a("a"),sDr=o("TFSpeech2TextForConditionalGeneration"),lDr=o(" (Speech2Text model)"),iDr=l(),F(rC.$$.fragment),Zze=l(),Uc=a("h2"),tC=a("a"),wEe=a("span"),F(m$.$$.fragment),dDr=l(),AEe=a("span"),cDr=o("FlaxAutoModel"),eWe=l(),pr=a("div"),F(g$.$$.fragment),fDr=l(),Jc=a("p"),mDr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),aee=a("a"),gDr=o("from_pretrained()"),hDr=o(" class method or the "),nee=a("a"),pDr=o("from_config()"),_Dr=o(` class
method.`),uDr=l(),h$=a("p"),bDr=o("This class cannot be instantiated directly using "),LEe=a("code"),vDr=o("__init__()"),FDr=o(" (throws an error)."),TDr=l(),Qt=a("div"),F(p$.$$.fragment),MDr=l(),yEe=a("p"),EDr=o("Instantiates one of the base model classes of the library from a configuration."),CDr=l(),Yc=a("p"),wDr=o(`Note:
Loading a model from its configuration file does `),xEe=a("strong"),ADr=o("not"),LDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),see=a("a"),yDr=o("from_pretrained()"),xDr=o(" to load the model weights."),$Dr=l(),F(aC.$$.fragment),kDr=l(),Vr=a("div"),F(_$.$$.fragment),SDr=l(),$Ee=a("p"),RDr=o("Instantiate one of the base model classes of the library from a pretrained model."),PDr=l(),Tn=a("p"),BDr=o("The model class to instantiate is selected based on the "),kEe=a("code"),IDr=o("model_type"),NDr=o(` property of the config object (either
passed as an argument or loaded from `),SEe=a("code"),qDr=o("pretrained_model_name_or_path"),jDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),REe=a("code"),DDr=o("pretrained_model_name_or_path"),GDr=o(":"),ODr=l(),oe=a("ul"),nC=a("li"),PEe=a("strong"),VDr=o("albert"),XDr=o(" \u2014 "),lee=a("a"),zDr=o("FlaxAlbertModel"),WDr=o(" (ALBERT model)"),QDr=l(),sC=a("li"),BEe=a("strong"),HDr=o("bart"),UDr=o(" \u2014 "),iee=a("a"),JDr=o("FlaxBartModel"),YDr=o(" (BART model)"),KDr=l(),lC=a("li"),IEe=a("strong"),ZDr=o("beit"),eGr=o(" \u2014 "),dee=a("a"),oGr=o("FlaxBeitModel"),rGr=o(" (BEiT model)"),tGr=l(),iC=a("li"),NEe=a("strong"),aGr=o("bert"),nGr=o(" \u2014 "),cee=a("a"),sGr=o("FlaxBertModel"),lGr=o(" (BERT model)"),iGr=l(),dC=a("li"),qEe=a("strong"),dGr=o("big_bird"),cGr=o(" \u2014 "),fee=a("a"),fGr=o("FlaxBigBirdModel"),mGr=o(" (BigBird model)"),gGr=l(),cC=a("li"),jEe=a("strong"),hGr=o("blenderbot"),pGr=o(" \u2014 "),mee=a("a"),_Gr=o("FlaxBlenderbotModel"),uGr=o(" (Blenderbot model)"),bGr=l(),fC=a("li"),DEe=a("strong"),vGr=o("blenderbot-small"),FGr=o(" \u2014 "),gee=a("a"),TGr=o("FlaxBlenderbotSmallModel"),MGr=o(" (BlenderbotSmall model)"),EGr=l(),mC=a("li"),GEe=a("strong"),CGr=o("clip"),wGr=o(" \u2014 "),hee=a("a"),AGr=o("FlaxCLIPModel"),LGr=o(" (CLIP model)"),yGr=l(),gC=a("li"),OEe=a("strong"),xGr=o("distilbert"),$Gr=o(" \u2014 "),pee=a("a"),kGr=o("FlaxDistilBertModel"),SGr=o(" (DistilBERT model)"),RGr=l(),hC=a("li"),VEe=a("strong"),PGr=o("electra"),BGr=o(" \u2014 "),_ee=a("a"),IGr=o("FlaxElectraModel"),NGr=o(" (ELECTRA model)"),qGr=l(),pC=a("li"),XEe=a("strong"),jGr=o("gpt2"),DGr=o(" \u2014 "),uee=a("a"),GGr=o("FlaxGPT2Model"),OGr=o(" (OpenAI GPT-2 model)"),VGr=l(),_C=a("li"),zEe=a("strong"),XGr=o("gpt_neo"),zGr=o(" \u2014 "),bee=a("a"),WGr=o("FlaxGPTNeoModel"),QGr=o(" (GPT Neo model)"),HGr=l(),uC=a("li"),WEe=a("strong"),UGr=o("gptj"),JGr=o(" \u2014 "),vee=a("a"),YGr=o("FlaxGPTJModel"),KGr=o(" (GPT-J model)"),ZGr=l(),bC=a("li"),QEe=a("strong"),eOr=o("longt5"),oOr=o(" \u2014 "),Fee=a("a"),rOr=o("FlaxLongT5Model"),tOr=o(" (LongT5 model)"),aOr=l(),vC=a("li"),HEe=a("strong"),nOr=o("marian"),sOr=o(" \u2014 "),Tee=a("a"),lOr=o("FlaxMarianModel"),iOr=o(" (Marian model)"),dOr=l(),FC=a("li"),UEe=a("strong"),cOr=o("mbart"),fOr=o(" \u2014 "),Mee=a("a"),mOr=o("FlaxMBartModel"),gOr=o(" (mBART model)"),hOr=l(),TC=a("li"),JEe=a("strong"),pOr=o("mt5"),_Or=o(" \u2014 "),Eee=a("a"),uOr=o("FlaxMT5Model"),bOr=o(" (MT5 model)"),vOr=l(),MC=a("li"),YEe=a("strong"),FOr=o("opt"),TOr=o(" \u2014 "),Cee=a("a"),MOr=o("FlaxOPTModel"),EOr=o(" (OPT model)"),COr=l(),EC=a("li"),KEe=a("strong"),wOr=o("pegasus"),AOr=o(" \u2014 "),wee=a("a"),LOr=o("FlaxPegasusModel"),yOr=o(" (Pegasus model)"),xOr=l(),CC=a("li"),ZEe=a("strong"),$Or=o("roberta"),kOr=o(" \u2014 "),Aee=a("a"),SOr=o("FlaxRobertaModel"),ROr=o(" (RoBERTa model)"),POr=l(),wC=a("li"),eCe=a("strong"),BOr=o("roformer"),IOr=o(" \u2014 "),Lee=a("a"),NOr=o("FlaxRoFormerModel"),qOr=o(" (RoFormer model)"),jOr=l(),AC=a("li"),oCe=a("strong"),DOr=o("t5"),GOr=o(" \u2014 "),yee=a("a"),OOr=o("FlaxT5Model"),VOr=o(" (T5 model)"),XOr=l(),LC=a("li"),rCe=a("strong"),zOr=o("vision-text-dual-encoder"),WOr=o(" \u2014 "),xee=a("a"),QOr=o("FlaxVisionTextDualEncoderModel"),HOr=o(" (VisionTextDualEncoder model)"),UOr=l(),yC=a("li"),tCe=a("strong"),JOr=o("vit"),YOr=o(" \u2014 "),$ee=a("a"),KOr=o("FlaxViTModel"),ZOr=o(" (ViT model)"),eVr=l(),xC=a("li"),aCe=a("strong"),oVr=o("wav2vec2"),rVr=o(" \u2014 "),kee=a("a"),tVr=o("FlaxWav2Vec2Model"),aVr=o(" (Wav2Vec2 model)"),nVr=l(),$C=a("li"),nCe=a("strong"),sVr=o("xglm"),lVr=o(" \u2014 "),See=a("a"),iVr=o("FlaxXGLMModel"),dVr=o(" (XGLM model)"),cVr=l(),kC=a("li"),sCe=a("strong"),fVr=o("xlm-roberta"),mVr=o(" \u2014 "),Ree=a("a"),gVr=o("FlaxXLMRobertaModel"),hVr=o(" (XLM-RoBERTa model)"),pVr=l(),F(SC.$$.fragment),oWe=l(),Kc=a("h2"),RC=a("a"),lCe=a("span"),F(u$.$$.fragment),_Vr=l(),iCe=a("span"),uVr=o("FlaxAutoModelForCausalLM"),rWe=l(),_r=a("div"),F(b$.$$.fragment),bVr=l(),Zc=a("p"),vVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Pee=a("a"),FVr=o("from_pretrained()"),TVr=o(" class method or the "),Bee=a("a"),MVr=o("from_config()"),EVr=o(` class
method.`),CVr=l(),v$=a("p"),wVr=o("This class cannot be instantiated directly using "),dCe=a("code"),AVr=o("__init__()"),LVr=o(" (throws an error)."),yVr=l(),Ht=a("div"),F(F$.$$.fragment),xVr=l(),cCe=a("p"),$Vr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),kVr=l(),ef=a("p"),SVr=o(`Note:
Loading a model from its configuration file does `),fCe=a("strong"),RVr=o("not"),PVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Iee=a("a"),BVr=o("from_pretrained()"),IVr=o(" to load the model weights."),NVr=l(),F(PC.$$.fragment),qVr=l(),Xr=a("div"),F(T$.$$.fragment),jVr=l(),mCe=a("p"),DVr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),GVr=l(),Mn=a("p"),OVr=o("The model class to instantiate is selected based on the "),gCe=a("code"),VVr=o("model_type"),XVr=o(` property of the config object (either
passed as an argument or loaded from `),hCe=a("code"),zVr=o("pretrained_model_name_or_path"),WVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pCe=a("code"),QVr=o("pretrained_model_name_or_path"),HVr=o(":"),UVr=l(),xe=a("ul"),BC=a("li"),_Ce=a("strong"),JVr=o("bart"),YVr=o(" \u2014 "),Nee=a("a"),KVr=o("FlaxBartForCausalLM"),ZVr=o(" (BART model)"),eXr=l(),IC=a("li"),uCe=a("strong"),oXr=o("bert"),rXr=o(" \u2014 "),qee=a("a"),tXr=o("FlaxBertForCausalLM"),aXr=o(" (BERT model)"),nXr=l(),NC=a("li"),bCe=a("strong"),sXr=o("big_bird"),lXr=o(" \u2014 "),jee=a("a"),iXr=o("FlaxBigBirdForCausalLM"),dXr=o(" (BigBird model)"),cXr=l(),qC=a("li"),vCe=a("strong"),fXr=o("electra"),mXr=o(" \u2014 "),Dee=a("a"),gXr=o("FlaxElectraForCausalLM"),hXr=o(" (ELECTRA model)"),pXr=l(),jC=a("li"),FCe=a("strong"),_Xr=o("gpt2"),uXr=o(" \u2014 "),Gee=a("a"),bXr=o("FlaxGPT2LMHeadModel"),vXr=o(" (OpenAI GPT-2 model)"),FXr=l(),DC=a("li"),TCe=a("strong"),TXr=o("gpt_neo"),MXr=o(" \u2014 "),Oee=a("a"),EXr=o("FlaxGPTNeoForCausalLM"),CXr=o(" (GPT Neo model)"),wXr=l(),GC=a("li"),MCe=a("strong"),AXr=o("gptj"),LXr=o(" \u2014 "),Vee=a("a"),yXr=o("FlaxGPTJForCausalLM"),xXr=o(" (GPT-J model)"),$Xr=l(),OC=a("li"),ECe=a("strong"),kXr=o("opt"),SXr=o(" \u2014 "),Xee=a("a"),RXr=o("FlaxOPTForCausalLM"),PXr=o(" (OPT model)"),BXr=l(),VC=a("li"),CCe=a("strong"),IXr=o("roberta"),NXr=o(" \u2014 "),zee=a("a"),qXr=o("FlaxRobertaForCausalLM"),jXr=o(" (RoBERTa model)"),DXr=l(),XC=a("li"),wCe=a("strong"),GXr=o("xglm"),OXr=o(" \u2014 "),Wee=a("a"),VXr=o("FlaxXGLMForCausalLM"),XXr=o(" (XGLM model)"),zXr=l(),F(zC.$$.fragment),tWe=l(),of=a("h2"),WC=a("a"),ACe=a("span"),F(M$.$$.fragment),WXr=l(),LCe=a("span"),QXr=o("FlaxAutoModelForPreTraining"),aWe=l(),ur=a("div"),F(E$.$$.fragment),HXr=l(),rf=a("p"),UXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Qee=a("a"),JXr=o("from_pretrained()"),YXr=o(" class method or the "),Hee=a("a"),KXr=o("from_config()"),ZXr=o(` class
method.`),ezr=l(),C$=a("p"),ozr=o("This class cannot be instantiated directly using "),yCe=a("code"),rzr=o("__init__()"),tzr=o(" (throws an error)."),azr=l(),Ut=a("div"),F(w$.$$.fragment),nzr=l(),xCe=a("p"),szr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),lzr=l(),tf=a("p"),izr=o(`Note:
Loading a model from its configuration file does `),$Ce=a("strong"),dzr=o("not"),czr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uee=a("a"),fzr=o("from_pretrained()"),mzr=o(" to load the model weights."),gzr=l(),F(QC.$$.fragment),hzr=l(),zr=a("div"),F(A$.$$.fragment),pzr=l(),kCe=a("p"),_zr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),uzr=l(),En=a("p"),bzr=o("The model class to instantiate is selected based on the "),SCe=a("code"),vzr=o("model_type"),Fzr=o(` property of the config object (either
passed as an argument or loaded from `),RCe=a("code"),Tzr=o("pretrained_model_name_or_path"),Mzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PCe=a("code"),Ezr=o("pretrained_model_name_or_path"),Czr=o(":"),wzr=l(),Ee=a("ul"),HC=a("li"),BCe=a("strong"),Azr=o("albert"),Lzr=o(" \u2014 "),Jee=a("a"),yzr=o("FlaxAlbertForPreTraining"),xzr=o(" (ALBERT model)"),$zr=l(),UC=a("li"),ICe=a("strong"),kzr=o("bart"),Szr=o(" \u2014 "),Yee=a("a"),Rzr=o("FlaxBartForConditionalGeneration"),Pzr=o(" (BART model)"),Bzr=l(),JC=a("li"),NCe=a("strong"),Izr=o("bert"),Nzr=o(" \u2014 "),Kee=a("a"),qzr=o("FlaxBertForPreTraining"),jzr=o(" (BERT model)"),Dzr=l(),YC=a("li"),qCe=a("strong"),Gzr=o("big_bird"),Ozr=o(" \u2014 "),Zee=a("a"),Vzr=o("FlaxBigBirdForPreTraining"),Xzr=o(" (BigBird model)"),zzr=l(),KC=a("li"),jCe=a("strong"),Wzr=o("electra"),Qzr=o(" \u2014 "),eoe=a("a"),Hzr=o("FlaxElectraForPreTraining"),Uzr=o(" (ELECTRA model)"),Jzr=l(),ZC=a("li"),DCe=a("strong"),Yzr=o("longt5"),Kzr=o(" \u2014 "),ooe=a("a"),Zzr=o("FlaxLongT5ForConditionalGeneration"),eWr=o(" (LongT5 model)"),oWr=l(),e5=a("li"),GCe=a("strong"),rWr=o("mbart"),tWr=o(" \u2014 "),roe=a("a"),aWr=o("FlaxMBartForConditionalGeneration"),nWr=o(" (mBART model)"),sWr=l(),o5=a("li"),OCe=a("strong"),lWr=o("mt5"),iWr=o(" \u2014 "),toe=a("a"),dWr=o("FlaxMT5ForConditionalGeneration"),cWr=o(" (MT5 model)"),fWr=l(),r5=a("li"),VCe=a("strong"),mWr=o("roberta"),gWr=o(" \u2014 "),aoe=a("a"),hWr=o("FlaxRobertaForMaskedLM"),pWr=o(" (RoBERTa model)"),_Wr=l(),t5=a("li"),XCe=a("strong"),uWr=o("roformer"),bWr=o(" \u2014 "),noe=a("a"),vWr=o("FlaxRoFormerForMaskedLM"),FWr=o(" (RoFormer model)"),TWr=l(),a5=a("li"),zCe=a("strong"),MWr=o("t5"),EWr=o(" \u2014 "),soe=a("a"),CWr=o("FlaxT5ForConditionalGeneration"),wWr=o(" (T5 model)"),AWr=l(),n5=a("li"),WCe=a("strong"),LWr=o("wav2vec2"),yWr=o(" \u2014 "),loe=a("a"),xWr=o("FlaxWav2Vec2ForPreTraining"),$Wr=o(" (Wav2Vec2 model)"),kWr=l(),s5=a("li"),QCe=a("strong"),SWr=o("xlm-roberta"),RWr=o(" \u2014 "),ioe=a("a"),PWr=o("FlaxXLMRobertaForMaskedLM"),BWr=o(" (XLM-RoBERTa model)"),IWr=l(),F(l5.$$.fragment),nWe=l(),af=a("h2"),i5=a("a"),HCe=a("span"),F(L$.$$.fragment),NWr=l(),UCe=a("span"),qWr=o("FlaxAutoModelForMaskedLM"),sWe=l(),br=a("div"),F(y$.$$.fragment),jWr=l(),nf=a("p"),DWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),doe=a("a"),GWr=o("from_pretrained()"),OWr=o(" class method or the "),coe=a("a"),VWr=o("from_config()"),XWr=o(` class
method.`),zWr=l(),x$=a("p"),WWr=o("This class cannot be instantiated directly using "),JCe=a("code"),QWr=o("__init__()"),HWr=o(" (throws an error)."),UWr=l(),Jt=a("div"),F($$.$$.fragment),JWr=l(),YCe=a("p"),YWr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),KWr=l(),sf=a("p"),ZWr=o(`Note:
Loading a model from its configuration file does `),KCe=a("strong"),eQr=o("not"),oQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),foe=a("a"),rQr=o("from_pretrained()"),tQr=o(" to load the model weights."),aQr=l(),F(d5.$$.fragment),nQr=l(),Wr=a("div"),F(k$.$$.fragment),sQr=l(),ZCe=a("p"),lQr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),iQr=l(),Cn=a("p"),dQr=o("The model class to instantiate is selected based on the "),e5e=a("code"),cQr=o("model_type"),fQr=o(` property of the config object (either
passed as an argument or loaded from `),o5e=a("code"),mQr=o("pretrained_model_name_or_path"),gQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r5e=a("code"),hQr=o("pretrained_model_name_or_path"),pQr=o(":"),_Qr=l(),$e=a("ul"),c5=a("li"),t5e=a("strong"),uQr=o("albert"),bQr=o(" \u2014 "),moe=a("a"),vQr=o("FlaxAlbertForMaskedLM"),FQr=o(" (ALBERT model)"),TQr=l(),f5=a("li"),a5e=a("strong"),MQr=o("bart"),EQr=o(" \u2014 "),goe=a("a"),CQr=o("FlaxBartForConditionalGeneration"),wQr=o(" (BART model)"),AQr=l(),m5=a("li"),n5e=a("strong"),LQr=o("bert"),yQr=o(" \u2014 "),hoe=a("a"),xQr=o("FlaxBertForMaskedLM"),$Qr=o(" (BERT model)"),kQr=l(),g5=a("li"),s5e=a("strong"),SQr=o("big_bird"),RQr=o(" \u2014 "),poe=a("a"),PQr=o("FlaxBigBirdForMaskedLM"),BQr=o(" (BigBird model)"),IQr=l(),h5=a("li"),l5e=a("strong"),NQr=o("distilbert"),qQr=o(" \u2014 "),_oe=a("a"),jQr=o("FlaxDistilBertForMaskedLM"),DQr=o(" (DistilBERT model)"),GQr=l(),p5=a("li"),i5e=a("strong"),OQr=o("electra"),VQr=o(" \u2014 "),uoe=a("a"),XQr=o("FlaxElectraForMaskedLM"),zQr=o(" (ELECTRA model)"),WQr=l(),_5=a("li"),d5e=a("strong"),QQr=o("mbart"),HQr=o(" \u2014 "),boe=a("a"),UQr=o("FlaxMBartForConditionalGeneration"),JQr=o(" (mBART model)"),YQr=l(),u5=a("li"),c5e=a("strong"),KQr=o("roberta"),ZQr=o(" \u2014 "),voe=a("a"),eHr=o("FlaxRobertaForMaskedLM"),oHr=o(" (RoBERTa model)"),rHr=l(),b5=a("li"),f5e=a("strong"),tHr=o("roformer"),aHr=o(" \u2014 "),Foe=a("a"),nHr=o("FlaxRoFormerForMaskedLM"),sHr=o(" (RoFormer model)"),lHr=l(),v5=a("li"),m5e=a("strong"),iHr=o("xlm-roberta"),dHr=o(" \u2014 "),Toe=a("a"),cHr=o("FlaxXLMRobertaForMaskedLM"),fHr=o(" (XLM-RoBERTa model)"),mHr=l(),F(F5.$$.fragment),lWe=l(),lf=a("h2"),T5=a("a"),g5e=a("span"),F(S$.$$.fragment),gHr=l(),h5e=a("span"),hHr=o("FlaxAutoModelForSeq2SeqLM"),iWe=l(),vr=a("div"),F(R$.$$.fragment),pHr=l(),df=a("p"),_Hr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Moe=a("a"),uHr=o("from_pretrained()"),bHr=o(" class method or the "),Eoe=a("a"),vHr=o("from_config()"),FHr=o(` class
method.`),THr=l(),P$=a("p"),MHr=o("This class cannot be instantiated directly using "),p5e=a("code"),EHr=o("__init__()"),CHr=o(" (throws an error)."),wHr=l(),Yt=a("div"),F(B$.$$.fragment),AHr=l(),_5e=a("p"),LHr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),yHr=l(),cf=a("p"),xHr=o(`Note:
Loading a model from its configuration file does `),u5e=a("strong"),$Hr=o("not"),kHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Coe=a("a"),SHr=o("from_pretrained()"),RHr=o(" to load the model weights."),PHr=l(),F(M5.$$.fragment),BHr=l(),Qr=a("div"),F(I$.$$.fragment),IHr=l(),b5e=a("p"),NHr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),qHr=l(),wn=a("p"),jHr=o("The model class to instantiate is selected based on the "),v5e=a("code"),DHr=o("model_type"),GHr=o(` property of the config object (either
passed as an argument or loaded from `),F5e=a("code"),OHr=o("pretrained_model_name_or_path"),VHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T5e=a("code"),XHr=o("pretrained_model_name_or_path"),zHr=o(":"),WHr=l(),ke=a("ul"),E5=a("li"),M5e=a("strong"),QHr=o("bart"),HHr=o(" \u2014 "),woe=a("a"),UHr=o("FlaxBartForConditionalGeneration"),JHr=o(" (BART model)"),YHr=l(),C5=a("li"),E5e=a("strong"),KHr=o("blenderbot"),ZHr=o(" \u2014 "),Aoe=a("a"),eUr=o("FlaxBlenderbotForConditionalGeneration"),oUr=o(" (Blenderbot model)"),rUr=l(),w5=a("li"),C5e=a("strong"),tUr=o("blenderbot-small"),aUr=o(" \u2014 "),Loe=a("a"),nUr=o("FlaxBlenderbotSmallForConditionalGeneration"),sUr=o(" (BlenderbotSmall model)"),lUr=l(),A5=a("li"),w5e=a("strong"),iUr=o("encoder-decoder"),dUr=o(" \u2014 "),yoe=a("a"),cUr=o("FlaxEncoderDecoderModel"),fUr=o(" (Encoder decoder model)"),mUr=l(),L5=a("li"),A5e=a("strong"),gUr=o("longt5"),hUr=o(" \u2014 "),xoe=a("a"),pUr=o("FlaxLongT5ForConditionalGeneration"),_Ur=o(" (LongT5 model)"),uUr=l(),y5=a("li"),L5e=a("strong"),bUr=o("marian"),vUr=o(" \u2014 "),$oe=a("a"),FUr=o("FlaxMarianMTModel"),TUr=o(" (Marian model)"),MUr=l(),x5=a("li"),y5e=a("strong"),EUr=o("mbart"),CUr=o(" \u2014 "),koe=a("a"),wUr=o("FlaxMBartForConditionalGeneration"),AUr=o(" (mBART model)"),LUr=l(),$5=a("li"),x5e=a("strong"),yUr=o("mt5"),xUr=o(" \u2014 "),Soe=a("a"),$Ur=o("FlaxMT5ForConditionalGeneration"),kUr=o(" (MT5 model)"),SUr=l(),k5=a("li"),$5e=a("strong"),RUr=o("pegasus"),PUr=o(" \u2014 "),Roe=a("a"),BUr=o("FlaxPegasusForConditionalGeneration"),IUr=o(" (Pegasus model)"),NUr=l(),S5=a("li"),k5e=a("strong"),qUr=o("t5"),jUr=o(" \u2014 "),Poe=a("a"),DUr=o("FlaxT5ForConditionalGeneration"),GUr=o(" (T5 model)"),OUr=l(),F(R5.$$.fragment),dWe=l(),ff=a("h2"),P5=a("a"),S5e=a("span"),F(N$.$$.fragment),VUr=l(),R5e=a("span"),XUr=o("FlaxAutoModelForSequenceClassification"),cWe=l(),Fr=a("div"),F(q$.$$.fragment),zUr=l(),mf=a("p"),WUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Boe=a("a"),QUr=o("from_pretrained()"),HUr=o(" class method or the "),Ioe=a("a"),UUr=o("from_config()"),JUr=o(` class
method.`),YUr=l(),j$=a("p"),KUr=o("This class cannot be instantiated directly using "),P5e=a("code"),ZUr=o("__init__()"),eJr=o(" (throws an error)."),oJr=l(),Kt=a("div"),F(D$.$$.fragment),rJr=l(),B5e=a("p"),tJr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),aJr=l(),gf=a("p"),nJr=o(`Note:
Loading a model from its configuration file does `),I5e=a("strong"),sJr=o("not"),lJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Noe=a("a"),iJr=o("from_pretrained()"),dJr=o(" to load the model weights."),cJr=l(),F(B5.$$.fragment),fJr=l(),Hr=a("div"),F(G$.$$.fragment),mJr=l(),N5e=a("p"),gJr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),hJr=l(),An=a("p"),pJr=o("The model class to instantiate is selected based on the "),q5e=a("code"),_Jr=o("model_type"),uJr=o(` property of the config object (either
passed as an argument or loaded from `),j5e=a("code"),bJr=o("pretrained_model_name_or_path"),vJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D5e=a("code"),FJr=o("pretrained_model_name_or_path"),TJr=o(":"),MJr=l(),Se=a("ul"),I5=a("li"),G5e=a("strong"),EJr=o("albert"),CJr=o(" \u2014 "),qoe=a("a"),wJr=o("FlaxAlbertForSequenceClassification"),AJr=o(" (ALBERT model)"),LJr=l(),N5=a("li"),O5e=a("strong"),yJr=o("bart"),xJr=o(" \u2014 "),joe=a("a"),$Jr=o("FlaxBartForSequenceClassification"),kJr=o(" (BART model)"),SJr=l(),q5=a("li"),V5e=a("strong"),RJr=o("bert"),PJr=o(" \u2014 "),Doe=a("a"),BJr=o("FlaxBertForSequenceClassification"),IJr=o(" (BERT model)"),NJr=l(),j5=a("li"),X5e=a("strong"),qJr=o("big_bird"),jJr=o(" \u2014 "),Goe=a("a"),DJr=o("FlaxBigBirdForSequenceClassification"),GJr=o(" (BigBird model)"),OJr=l(),D5=a("li"),z5e=a("strong"),VJr=o("distilbert"),XJr=o(" \u2014 "),Ooe=a("a"),zJr=o("FlaxDistilBertForSequenceClassification"),WJr=o(" (DistilBERT model)"),QJr=l(),G5=a("li"),W5e=a("strong"),HJr=o("electra"),UJr=o(" \u2014 "),Voe=a("a"),JJr=o("FlaxElectraForSequenceClassification"),YJr=o(" (ELECTRA model)"),KJr=l(),O5=a("li"),Q5e=a("strong"),ZJr=o("mbart"),eYr=o(" \u2014 "),Xoe=a("a"),oYr=o("FlaxMBartForSequenceClassification"),rYr=o(" (mBART model)"),tYr=l(),V5=a("li"),H5e=a("strong"),aYr=o("roberta"),nYr=o(" \u2014 "),zoe=a("a"),sYr=o("FlaxRobertaForSequenceClassification"),lYr=o(" (RoBERTa model)"),iYr=l(),X5=a("li"),U5e=a("strong"),dYr=o("roformer"),cYr=o(" \u2014 "),Woe=a("a"),fYr=o("FlaxRoFormerForSequenceClassification"),mYr=o(" (RoFormer model)"),gYr=l(),z5=a("li"),J5e=a("strong"),hYr=o("xlm-roberta"),pYr=o(" \u2014 "),Qoe=a("a"),_Yr=o("FlaxXLMRobertaForSequenceClassification"),uYr=o(" (XLM-RoBERTa model)"),bYr=l(),F(W5.$$.fragment),fWe=l(),hf=a("h2"),Q5=a("a"),Y5e=a("span"),F(O$.$$.fragment),vYr=l(),K5e=a("span"),FYr=o("FlaxAutoModelForQuestionAnswering"),mWe=l(),Tr=a("div"),F(V$.$$.fragment),TYr=l(),pf=a("p"),MYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Hoe=a("a"),EYr=o("from_pretrained()"),CYr=o(" class method or the "),Uoe=a("a"),wYr=o("from_config()"),AYr=o(` class
method.`),LYr=l(),X$=a("p"),yYr=o("This class cannot be instantiated directly using "),Z5e=a("code"),xYr=o("__init__()"),$Yr=o(" (throws an error)."),kYr=l(),Zt=a("div"),F(z$.$$.fragment),SYr=l(),e0e=a("p"),RYr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),PYr=l(),_f=a("p"),BYr=o(`Note:
Loading a model from its configuration file does `),o0e=a("strong"),IYr=o("not"),NYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Joe=a("a"),qYr=o("from_pretrained()"),jYr=o(" to load the model weights."),DYr=l(),F(H5.$$.fragment),GYr=l(),Ur=a("div"),F(W$.$$.fragment),OYr=l(),r0e=a("p"),VYr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),XYr=l(),Ln=a("p"),zYr=o("The model class to instantiate is selected based on the "),t0e=a("code"),WYr=o("model_type"),QYr=o(` property of the config object (either
passed as an argument or loaded from `),a0e=a("code"),HYr=o("pretrained_model_name_or_path"),UYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n0e=a("code"),JYr=o("pretrained_model_name_or_path"),YYr=o(":"),KYr=l(),Re=a("ul"),U5=a("li"),s0e=a("strong"),ZYr=o("albert"),eKr=o(" \u2014 "),Yoe=a("a"),oKr=o("FlaxAlbertForQuestionAnswering"),rKr=o(" (ALBERT model)"),tKr=l(),J5=a("li"),l0e=a("strong"),aKr=o("bart"),nKr=o(" \u2014 "),Koe=a("a"),sKr=o("FlaxBartForQuestionAnswering"),lKr=o(" (BART model)"),iKr=l(),Y5=a("li"),i0e=a("strong"),dKr=o("bert"),cKr=o(" \u2014 "),Zoe=a("a"),fKr=o("FlaxBertForQuestionAnswering"),mKr=o(" (BERT model)"),gKr=l(),K5=a("li"),d0e=a("strong"),hKr=o("big_bird"),pKr=o(" \u2014 "),ere=a("a"),_Kr=o("FlaxBigBirdForQuestionAnswering"),uKr=o(" (BigBird model)"),bKr=l(),Z5=a("li"),c0e=a("strong"),vKr=o("distilbert"),FKr=o(" \u2014 "),ore=a("a"),TKr=o("FlaxDistilBertForQuestionAnswering"),MKr=o(" (DistilBERT model)"),EKr=l(),e0=a("li"),f0e=a("strong"),CKr=o("electra"),wKr=o(" \u2014 "),rre=a("a"),AKr=o("FlaxElectraForQuestionAnswering"),LKr=o(" (ELECTRA model)"),yKr=l(),o0=a("li"),m0e=a("strong"),xKr=o("mbart"),$Kr=o(" \u2014 "),tre=a("a"),kKr=o("FlaxMBartForQuestionAnswering"),SKr=o(" (mBART model)"),RKr=l(),r0=a("li"),g0e=a("strong"),PKr=o("roberta"),BKr=o(" \u2014 "),are=a("a"),IKr=o("FlaxRobertaForQuestionAnswering"),NKr=o(" (RoBERTa model)"),qKr=l(),t0=a("li"),h0e=a("strong"),jKr=o("roformer"),DKr=o(" \u2014 "),nre=a("a"),GKr=o("FlaxRoFormerForQuestionAnswering"),OKr=o(" (RoFormer model)"),VKr=l(),a0=a("li"),p0e=a("strong"),XKr=o("xlm-roberta"),zKr=o(" \u2014 "),sre=a("a"),WKr=o("FlaxXLMRobertaForQuestionAnswering"),QKr=o(" (XLM-RoBERTa model)"),HKr=l(),F(n0.$$.fragment),gWe=l(),uf=a("h2"),s0=a("a"),_0e=a("span"),F(Q$.$$.fragment),UKr=l(),u0e=a("span"),JKr=o("FlaxAutoModelForTokenClassification"),hWe=l(),Mr=a("div"),F(H$.$$.fragment),YKr=l(),bf=a("p"),KKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),lre=a("a"),ZKr=o("from_pretrained()"),eZr=o(" class method or the "),ire=a("a"),oZr=o("from_config()"),rZr=o(` class
method.`),tZr=l(),U$=a("p"),aZr=o("This class cannot be instantiated directly using "),b0e=a("code"),nZr=o("__init__()"),sZr=o(" (throws an error)."),lZr=l(),ea=a("div"),F(J$.$$.fragment),iZr=l(),v0e=a("p"),dZr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),cZr=l(),vf=a("p"),fZr=o(`Note:
Loading a model from its configuration file does `),F0e=a("strong"),mZr=o("not"),gZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dre=a("a"),hZr=o("from_pretrained()"),pZr=o(" to load the model weights."),_Zr=l(),F(l0.$$.fragment),uZr=l(),Jr=a("div"),F(Y$.$$.fragment),bZr=l(),T0e=a("p"),vZr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),FZr=l(),yn=a("p"),TZr=o("The model class to instantiate is selected based on the "),M0e=a("code"),MZr=o("model_type"),EZr=o(` property of the config object (either
passed as an argument or loaded from `),E0e=a("code"),CZr=o("pretrained_model_name_or_path"),wZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C0e=a("code"),AZr=o("pretrained_model_name_or_path"),LZr=o(":"),yZr=l(),Ve=a("ul"),i0=a("li"),w0e=a("strong"),xZr=o("albert"),$Zr=o(" \u2014 "),cre=a("a"),kZr=o("FlaxAlbertForTokenClassification"),SZr=o(" (ALBERT model)"),RZr=l(),d0=a("li"),A0e=a("strong"),PZr=o("bert"),BZr=o(" \u2014 "),fre=a("a"),IZr=o("FlaxBertForTokenClassification"),NZr=o(" (BERT model)"),qZr=l(),c0=a("li"),L0e=a("strong"),jZr=o("big_bird"),DZr=o(" \u2014 "),mre=a("a"),GZr=o("FlaxBigBirdForTokenClassification"),OZr=o(" (BigBird model)"),VZr=l(),f0=a("li"),y0e=a("strong"),XZr=o("distilbert"),zZr=o(" \u2014 "),gre=a("a"),WZr=o("FlaxDistilBertForTokenClassification"),QZr=o(" (DistilBERT model)"),HZr=l(),m0=a("li"),x0e=a("strong"),UZr=o("electra"),JZr=o(" \u2014 "),hre=a("a"),YZr=o("FlaxElectraForTokenClassification"),KZr=o(" (ELECTRA model)"),ZZr=l(),g0=a("li"),$0e=a("strong"),eet=o("roberta"),oet=o(" \u2014 "),pre=a("a"),ret=o("FlaxRobertaForTokenClassification"),tet=o(" (RoBERTa model)"),aet=l(),h0=a("li"),k0e=a("strong"),net=o("roformer"),set=o(" \u2014 "),_re=a("a"),iet=o("FlaxRoFormerForTokenClassification"),det=o(" (RoFormer model)"),cet=l(),p0=a("li"),S0e=a("strong"),fet=o("xlm-roberta"),met=o(" \u2014 "),ure=a("a"),get=o("FlaxXLMRobertaForTokenClassification"),het=o(" (XLM-RoBERTa model)"),pet=l(),F(_0.$$.fragment),pWe=l(),Ff=a("h2"),u0=a("a"),R0e=a("span"),F(K$.$$.fragment),_et=l(),P0e=a("span"),uet=o("FlaxAutoModelForMultipleChoice"),_We=l(),Er=a("div"),F(Z$.$$.fragment),bet=l(),Tf=a("p"),vet=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bre=a("a"),Fet=o("from_pretrained()"),Tet=o(" class method or the "),vre=a("a"),Met=o("from_config()"),Eet=o(` class
method.`),Cet=l(),ek=a("p"),wet=o("This class cannot be instantiated directly using "),B0e=a("code"),Aet=o("__init__()"),Let=o(" (throws an error)."),yet=l(),oa=a("div"),F(ok.$$.fragment),xet=l(),I0e=a("p"),$et=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ket=l(),Mf=a("p"),Set=o(`Note:
Loading a model from its configuration file does `),N0e=a("strong"),Ret=o("not"),Pet=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fre=a("a"),Bet=o("from_pretrained()"),Iet=o(" to load the model weights."),Net=l(),F(b0.$$.fragment),qet=l(),Yr=a("div"),F(rk.$$.fragment),jet=l(),q0e=a("p"),Det=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Get=l(),xn=a("p"),Oet=o("The model class to instantiate is selected based on the "),j0e=a("code"),Vet=o("model_type"),Xet=o(` property of the config object (either
passed as an argument or loaded from `),D0e=a("code"),zet=o("pretrained_model_name_or_path"),Wet=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G0e=a("code"),Qet=o("pretrained_model_name_or_path"),Het=o(":"),Uet=l(),Xe=a("ul"),v0=a("li"),O0e=a("strong"),Jet=o("albert"),Yet=o(" \u2014 "),Tre=a("a"),Ket=o("FlaxAlbertForMultipleChoice"),Zet=o(" (ALBERT model)"),eot=l(),F0=a("li"),V0e=a("strong"),oot=o("bert"),rot=o(" \u2014 "),Mre=a("a"),tot=o("FlaxBertForMultipleChoice"),aot=o(" (BERT model)"),not=l(),T0=a("li"),X0e=a("strong"),sot=o("big_bird"),lot=o(" \u2014 "),Ere=a("a"),iot=o("FlaxBigBirdForMultipleChoice"),dot=o(" (BigBird model)"),cot=l(),M0=a("li"),z0e=a("strong"),fot=o("distilbert"),mot=o(" \u2014 "),Cre=a("a"),got=o("FlaxDistilBertForMultipleChoice"),hot=o(" (DistilBERT model)"),pot=l(),E0=a("li"),W0e=a("strong"),_ot=o("electra"),uot=o(" \u2014 "),wre=a("a"),bot=o("FlaxElectraForMultipleChoice"),vot=o(" (ELECTRA model)"),Fot=l(),C0=a("li"),Q0e=a("strong"),Tot=o("roberta"),Mot=o(" \u2014 "),Are=a("a"),Eot=o("FlaxRobertaForMultipleChoice"),Cot=o(" (RoBERTa model)"),wot=l(),w0=a("li"),H0e=a("strong"),Aot=o("roformer"),Lot=o(" \u2014 "),Lre=a("a"),yot=o("FlaxRoFormerForMultipleChoice"),xot=o(" (RoFormer model)"),$ot=l(),A0=a("li"),U0e=a("strong"),kot=o("xlm-roberta"),Sot=o(" \u2014 "),yre=a("a"),Rot=o("FlaxXLMRobertaForMultipleChoice"),Pot=o(" (XLM-RoBERTa model)"),Bot=l(),F(L0.$$.fragment),uWe=l(),Ef=a("h2"),y0=a("a"),J0e=a("span"),F(tk.$$.fragment),Iot=l(),Y0e=a("span"),Not=o("FlaxAutoModelForNextSentencePrediction"),bWe=l(),Cr=a("div"),F(ak.$$.fragment),qot=l(),Cf=a("p"),jot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),xre=a("a"),Dot=o("from_pretrained()"),Got=o(" class method or the "),$re=a("a"),Oot=o("from_config()"),Vot=o(` class
method.`),Xot=l(),nk=a("p"),zot=o("This class cannot be instantiated directly using "),K0e=a("code"),Wot=o("__init__()"),Qot=o(" (throws an error)."),Hot=l(),ra=a("div"),F(sk.$$.fragment),Uot=l(),Z0e=a("p"),Jot=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Yot=l(),wf=a("p"),Kot=o(`Note:
Loading a model from its configuration file does `),ewe=a("strong"),Zot=o("not"),ert=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kre=a("a"),ort=o("from_pretrained()"),rrt=o(" to load the model weights."),trt=l(),F(x0.$$.fragment),art=l(),Kr=a("div"),F(lk.$$.fragment),nrt=l(),owe=a("p"),srt=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),lrt=l(),$n=a("p"),irt=o("The model class to instantiate is selected based on the "),rwe=a("code"),drt=o("model_type"),crt=o(` property of the config object (either
passed as an argument or loaded from `),twe=a("code"),frt=o("pretrained_model_name_or_path"),mrt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),awe=a("code"),grt=o("pretrained_model_name_or_path"),hrt=o(":"),prt=l(),nwe=a("ul"),$0=a("li"),swe=a("strong"),_rt=o("bert"),urt=o(" \u2014 "),Sre=a("a"),brt=o("FlaxBertForNextSentencePrediction"),vrt=o(" (BERT model)"),Frt=l(),F(k0.$$.fragment),vWe=l(),Af=a("h2"),S0=a("a"),lwe=a("span"),F(ik.$$.fragment),Trt=l(),iwe=a("span"),Mrt=o("FlaxAutoModelForImageClassification"),FWe=l(),wr=a("div"),F(dk.$$.fragment),Ert=l(),Lf=a("p"),Crt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Rre=a("a"),wrt=o("from_pretrained()"),Art=o(" class method or the "),Pre=a("a"),Lrt=o("from_config()"),yrt=o(` class
method.`),xrt=l(),ck=a("p"),$rt=o("This class cannot be instantiated directly using "),dwe=a("code"),krt=o("__init__()"),Srt=o(" (throws an error)."),Rrt=l(),ta=a("div"),F(fk.$$.fragment),Prt=l(),cwe=a("p"),Brt=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Irt=l(),yf=a("p"),Nrt=o(`Note:
Loading a model from its configuration file does `),fwe=a("strong"),qrt=o("not"),jrt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bre=a("a"),Drt=o("from_pretrained()"),Grt=o(" to load the model weights."),Ort=l(),F(R0.$$.fragment),Vrt=l(),Zr=a("div"),F(mk.$$.fragment),Xrt=l(),mwe=a("p"),zrt=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Wrt=l(),kn=a("p"),Qrt=o("The model class to instantiate is selected based on the "),gwe=a("code"),Hrt=o("model_type"),Urt=o(` property of the config object (either
passed as an argument or loaded from `),hwe=a("code"),Jrt=o("pretrained_model_name_or_path"),Yrt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pwe=a("code"),Krt=o("pretrained_model_name_or_path"),Zrt=o(":"),ett=l(),gk=a("ul"),P0=a("li"),_we=a("strong"),ott=o("beit"),rtt=o(" \u2014 "),Ire=a("a"),ttt=o("FlaxBeitForImageClassification"),att=o(" (BEiT model)"),ntt=l(),B0=a("li"),uwe=a("strong"),stt=o("vit"),ltt=o(" \u2014 "),Nre=a("a"),itt=o("FlaxViTForImageClassification"),dtt=o(" (ViT model)"),ctt=l(),F(I0.$$.fragment),TWe=l(),xf=a("h2"),N0=a("a"),bwe=a("span"),F(hk.$$.fragment),ftt=l(),vwe=a("span"),mtt=o("FlaxAutoModelForVision2Seq"),MWe=l(),Ar=a("div"),F(pk.$$.fragment),gtt=l(),$f=a("p"),htt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),qre=a("a"),ptt=o("from_pretrained()"),_tt=o(" class method or the "),jre=a("a"),utt=o("from_config()"),btt=o(` class
method.`),vtt=l(),_k=a("p"),Ftt=o("This class cannot be instantiated directly using "),Fwe=a("code"),Ttt=o("__init__()"),Mtt=o(" (throws an error)."),Ett=l(),aa=a("div"),F(uk.$$.fragment),Ctt=l(),Twe=a("p"),wtt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Att=l(),kf=a("p"),Ltt=o(`Note:
Loading a model from its configuration file does `),Mwe=a("strong"),ytt=o("not"),xtt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dre=a("a"),$tt=o("from_pretrained()"),ktt=o(" to load the model weights."),Stt=l(),F(q0.$$.fragment),Rtt=l(),et=a("div"),F(bk.$$.fragment),Ptt=l(),Ewe=a("p"),Btt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Itt=l(),Sn=a("p"),Ntt=o("The model class to instantiate is selected based on the "),Cwe=a("code"),qtt=o("model_type"),jtt=o(` property of the config object (either
passed as an argument or loaded from `),wwe=a("code"),Dtt=o("pretrained_model_name_or_path"),Gtt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Awe=a("code"),Ott=o("pretrained_model_name_or_path"),Vtt=o(":"),Xtt=l(),Lwe=a("ul"),j0=a("li"),ywe=a("strong"),ztt=o("vision-encoder-decoder"),Wtt=o(" \u2014 "),Gre=a("a"),Qtt=o("FlaxVisionEncoderDecoderModel"),Htt=o(" (Vision Encoder decoder model)"),Utt=l(),F(D0.$$.fragment),this.h()},l(f){const u=qQt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var vk=s(p);m=n(vk,"A",{id:!0,class:!0,href:!0});var xwe=s(m);_=n(xwe,"SPAN",{});var $we=s(_);T(d.$$.fragment,$we),$we.forEach(t),xwe.forEach(t),h=i(vk),Co=n(vk,"SPAN",{});var kwe=s(Co);yi=r(kwe,"Auto Classes"),kwe.forEach(t),vk.forEach(t),Bf=i(f),lt=n(f,"P",{});var Fk=s(lt);xi=r(Fk,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),$i=n(Fk,"CODE",{});var Swe=s($i);n6=r(Swe,"from_pretrained()"),Swe.forEach(t),If=r(Fk,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Fk.forEach(t),Oe=i(f),Qe=n(f,"P",{});var Rn=s(Qe);ki=r(Rn,"Instantiating one of "),Pn=n(Rn,"A",{href:!0});var Rwe=s(Pn);s6=r(Rwe,"AutoConfig"),Rwe.forEach(t),Bn=r(Rn,", "),In=n(Rn,"A",{href:!0});var Pwe=s(In);l6=r(Pwe,"AutoModel"),Pwe.forEach(t),Si=r(Rn,`, and
`),Nn=n(Rn,"A",{href:!0});var Bwe=s(Nn);i6=r(Bwe,"AutoTokenizer"),Bwe.forEach(t),Ri=r(Rn," will directly create a class of the relevant architecture. For instance"),Rn.forEach(t),Nf=i(f),T(Sa.$$.fragment,f),He=i(f),Ae=n(f,"P",{});var Tk=s(Ae);GS=r(Tk,"will create a model that is an instance of "),Pi=n(Tk,"A",{href:!0});var Iwe=s(Pi);OS=r(Iwe,"BertModel"),Iwe.forEach(t),VS=r(Tk,"."),Tk.forEach(t),wo=i(f),Ra=n(f,"P",{});var Mk=s(Ra);XS=r(Mk,"There is one class of "),qf=n(Mk,"CODE",{});var Nwe=s(qf);zS=r(Nwe,"AutoModel"),Nwe.forEach(t),RHe=r(Mk," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Mk.forEach(t),bXe=i(f),Bi=n(f,"H2",{class:!0});var Ek=s(Bi);jf=n(Ek,"A",{id:!0,class:!0,href:!0});var qwe=s(jf);Iae=n(qwe,"SPAN",{});var jwe=s(Iae);T(d6.$$.fragment,jwe),jwe.forEach(t),qwe.forEach(t),PHe=i(Ek),Nae=n(Ek,"SPAN",{});var Dwe=s(Nae);BHe=r(Dwe,"Extending the Auto Classes"),Dwe.forEach(t),Ek.forEach(t),vXe=i(f),qn=n(f,"P",{});var Sf=s(qn);IHe=r(Sf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),qae=n(Sf,"CODE",{});var Gwe=s(qae);NHe=r(Gwe,"NewModel"),Gwe.forEach(t),qHe=r(Sf,", make sure you have a "),jae=n(Sf,"CODE",{});var Owe=s(jae);jHe=r(Owe,"NewModelConfig"),Owe.forEach(t),DHe=r(Sf,` then you can add those to the auto
classes like this:`),Sf.forEach(t),FXe=i(f),T(c6.$$.fragment,f),TXe=i(f),WS=n(f,"P",{});var Vwe=s(WS);GHe=r(Vwe,"You will then be able to use the auto classes like you would usually do!"),Vwe.forEach(t),MXe=i(f),T(Df.$$.fragment,f),EXe=i(f),Ii=n(f,"H2",{class:!0});var Ck=s(Ii);Gf=n(Ck,"A",{id:!0,class:!0,href:!0});var Xwe=s(Gf);Dae=n(Xwe,"SPAN",{});var zwe=s(Dae);T(f6.$$.fragment,zwe),zwe.forEach(t),Xwe.forEach(t),OHe=i(Ck),Gae=n(Ck,"SPAN",{});var Wwe=s(Gae);VHe=r(Wwe,"AutoConfig"),Wwe.forEach(t),Ck.forEach(t),CXe=i(f),Ao=n(f,"DIV",{class:!0});var nt=s(Ao);T(m6.$$.fragment,nt),XHe=i(nt),g6=n(nt,"P",{});var wk=s(g6);zHe=r(wk,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),QS=n(wk,"A",{href:!0});var Qwe=s(QS);WHe=r(Qwe,"from_pretrained()"),Qwe.forEach(t),QHe=r(wk," class method."),wk.forEach(t),HHe=i(nt),h6=n(nt,"P",{});var Ak=s(h6);UHe=r(Ak,"This class cannot be instantiated directly using "),Oae=n(Ak,"CODE",{});var Hwe=s(Oae);JHe=r(Hwe,"__init__()"),Hwe.forEach(t),YHe=r(Ak," (throws an error)."),Ak.forEach(t),KHe=i(nt),Lr=n(nt,"DIV",{class:!0});var st=s(Lr);T(p6.$$.fragment,st),ZHe=i(st),Vae=n(st,"P",{});var Uwe=s(Vae);eUe=r(Uwe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),Uwe.forEach(t),oUe=i(st),Ni=n(st,"P",{});var Rf=s(Ni);rUe=r(Rf,"The configuration class to instantiate is selected based on the "),Xae=n(Rf,"CODE",{});var Jwe=s(Xae);tUe=r(Jwe,"model_type"),Jwe.forEach(t),aUe=r(Rf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),zae=n(Rf,"CODE",{});var Ywe=s(zae);nUe=r(Ywe,"pretrained_model_name_or_path"),Ywe.forEach(t),sUe=r(Rf,":"),Rf.forEach(t),lUe=i(st),A=n(st,"UL",{});var L=s(A);Of=n(L,"LI",{});var G0=s(Of);Wae=n(G0,"STRONG",{});var Kwe=s(Wae);iUe=r(Kwe,"albert"),Kwe.forEach(t),dUe=r(G0," \u2014 "),HS=n(G0,"A",{href:!0});var Zwe=s(HS);cUe=r(Zwe,"AlbertConfig"),Zwe.forEach(t),fUe=r(G0," (ALBERT model)"),G0.forEach(t),mUe=i(L),Vf=n(L,"LI",{});var O0=s(Vf);Qae=n(O0,"STRONG",{});var eAe=s(Qae);gUe=r(eAe,"bart"),eAe.forEach(t),hUe=r(O0," \u2014 "),US=n(O0,"A",{href:!0});var oAe=s(US);pUe=r(oAe,"BartConfig"),oAe.forEach(t),_Ue=r(O0," (BART model)"),O0.forEach(t),uUe=i(L),Xf=n(L,"LI",{});var V0=s(Xf);Hae=n(V0,"STRONG",{});var rAe=s(Hae);bUe=r(rAe,"beit"),rAe.forEach(t),vUe=r(V0," \u2014 "),JS=n(V0,"A",{href:!0});var tAe=s(JS);FUe=r(tAe,"BeitConfig"),tAe.forEach(t),TUe=r(V0," (BEiT model)"),V0.forEach(t),MUe=i(L),zf=n(L,"LI",{});var X0=s(zf);Uae=n(X0,"STRONG",{});var aAe=s(Uae);EUe=r(aAe,"bert"),aAe.forEach(t),CUe=r(X0," \u2014 "),YS=n(X0,"A",{href:!0});var nAe=s(YS);wUe=r(nAe,"BertConfig"),nAe.forEach(t),AUe=r(X0," (BERT model)"),X0.forEach(t),LUe=i(L),Wf=n(L,"LI",{});var z0=s(Wf);Jae=n(z0,"STRONG",{});var sAe=s(Jae);yUe=r(sAe,"bert-generation"),sAe.forEach(t),xUe=r(z0," \u2014 "),KS=n(z0,"A",{href:!0});var lAe=s(KS);$Ue=r(lAe,"BertGenerationConfig"),lAe.forEach(t),kUe=r(z0," (Bert Generation model)"),z0.forEach(t),SUe=i(L),Qf=n(L,"LI",{});var W0=s(Qf);Yae=n(W0,"STRONG",{});var iAe=s(Yae);RUe=r(iAe,"big_bird"),iAe.forEach(t),PUe=r(W0," \u2014 "),ZS=n(W0,"A",{href:!0});var dAe=s(ZS);BUe=r(dAe,"BigBirdConfig"),dAe.forEach(t),IUe=r(W0," (BigBird model)"),W0.forEach(t),NUe=i(L),Hf=n(L,"LI",{});var Q0=s(Hf);Kae=n(Q0,"STRONG",{});var cAe=s(Kae);qUe=r(cAe,"bigbird_pegasus"),cAe.forEach(t),jUe=r(Q0," \u2014 "),eR=n(Q0,"A",{href:!0});var fAe=s(eR);DUe=r(fAe,"BigBirdPegasusConfig"),fAe.forEach(t),GUe=r(Q0," (BigBird-Pegasus model)"),Q0.forEach(t),OUe=i(L),Uf=n(L,"LI",{});var H0=s(Uf);Zae=n(H0,"STRONG",{});var mAe=s(Zae);VUe=r(mAe,"blenderbot"),mAe.forEach(t),XUe=r(H0," \u2014 "),oR=n(H0,"A",{href:!0});var gAe=s(oR);zUe=r(gAe,"BlenderbotConfig"),gAe.forEach(t),WUe=r(H0," (Blenderbot model)"),H0.forEach(t),QUe=i(L),Jf=n(L,"LI",{});var U0=s(Jf);ene=n(U0,"STRONG",{});var hAe=s(ene);HUe=r(hAe,"blenderbot-small"),hAe.forEach(t),UUe=r(U0," \u2014 "),rR=n(U0,"A",{href:!0});var pAe=s(rR);JUe=r(pAe,"BlenderbotSmallConfig"),pAe.forEach(t),YUe=r(U0," (BlenderbotSmall model)"),U0.forEach(t),KUe=i(L),Yf=n(L,"LI",{});var J0=s(Yf);one=n(J0,"STRONG",{});var _Ae=s(one);ZUe=r(_Ae,"bloom"),_Ae.forEach(t),eJe=r(J0," \u2014 "),tR=n(J0,"A",{href:!0});var uAe=s(tR);oJe=r(uAe,"BloomConfig"),uAe.forEach(t),rJe=r(J0," (BLOOM model)"),J0.forEach(t),tJe=i(L),Kf=n(L,"LI",{});var Y0=s(Kf);rne=n(Y0,"STRONG",{});var bAe=s(rne);aJe=r(bAe,"camembert"),bAe.forEach(t),nJe=r(Y0," \u2014 "),aR=n(Y0,"A",{href:!0});var vAe=s(aR);sJe=r(vAe,"CamembertConfig"),vAe.forEach(t),lJe=r(Y0," (CamemBERT model)"),Y0.forEach(t),iJe=i(L),Zf=n(L,"LI",{});var K0=s(Zf);tne=n(K0,"STRONG",{});var FAe=s(tne);dJe=r(FAe,"canine"),FAe.forEach(t),cJe=r(K0," \u2014 "),nR=n(K0,"A",{href:!0});var TAe=s(nR);fJe=r(TAe,"CanineConfig"),TAe.forEach(t),mJe=r(K0," (CANINE model)"),K0.forEach(t),gJe=i(L),em=n(L,"LI",{});var Z0=s(em);ane=n(Z0,"STRONG",{});var MAe=s(ane);hJe=r(MAe,"clip"),MAe.forEach(t),pJe=r(Z0," \u2014 "),sR=n(Z0,"A",{href:!0});var EAe=s(sR);_Je=r(EAe,"CLIPConfig"),EAe.forEach(t),uJe=r(Z0," (CLIP model)"),Z0.forEach(t),bJe=i(L),om=n(L,"LI",{});var ew=s(om);nne=n(ew,"STRONG",{});var CAe=s(nne);vJe=r(CAe,"codegen"),CAe.forEach(t),FJe=r(ew," \u2014 "),lR=n(ew,"A",{href:!0});var wAe=s(lR);TJe=r(wAe,"CodeGenConfig"),wAe.forEach(t),MJe=r(ew," (CodeGen model)"),ew.forEach(t),EJe=i(L),rm=n(L,"LI",{});var ow=s(rm);sne=n(ow,"STRONG",{});var AAe=s(sne);CJe=r(AAe,"convbert"),AAe.forEach(t),wJe=r(ow," \u2014 "),iR=n(ow,"A",{href:!0});var LAe=s(iR);AJe=r(LAe,"ConvBertConfig"),LAe.forEach(t),LJe=r(ow," (ConvBERT model)"),ow.forEach(t),yJe=i(L),tm=n(L,"LI",{});var rw=s(tm);lne=n(rw,"STRONG",{});var yAe=s(lne);xJe=r(yAe,"convnext"),yAe.forEach(t),$Je=r(rw," \u2014 "),dR=n(rw,"A",{href:!0});var xAe=s(dR);kJe=r(xAe,"ConvNextConfig"),xAe.forEach(t),SJe=r(rw," (ConvNeXT model)"),rw.forEach(t),RJe=i(L),am=n(L,"LI",{});var tw=s(am);ine=n(tw,"STRONG",{});var $Ae=s(ine);PJe=r($Ae,"ctrl"),$Ae.forEach(t),BJe=r(tw," \u2014 "),cR=n(tw,"A",{href:!0});var kAe=s(cR);IJe=r(kAe,"CTRLConfig"),kAe.forEach(t),NJe=r(tw," (CTRL model)"),tw.forEach(t),qJe=i(L),nm=n(L,"LI",{});var aw=s(nm);dne=n(aw,"STRONG",{});var SAe=s(dne);jJe=r(SAe,"cvt"),SAe.forEach(t),DJe=r(aw," \u2014 "),fR=n(aw,"A",{href:!0});var RAe=s(fR);GJe=r(RAe,"CvtConfig"),RAe.forEach(t),OJe=r(aw," (CvT model)"),aw.forEach(t),VJe=i(L),sm=n(L,"LI",{});var nw=s(sm);cne=n(nw,"STRONG",{});var PAe=s(cne);XJe=r(PAe,"data2vec-audio"),PAe.forEach(t),zJe=r(nw," \u2014 "),mR=n(nw,"A",{href:!0});var BAe=s(mR);WJe=r(BAe,"Data2VecAudioConfig"),BAe.forEach(t),QJe=r(nw," (Data2VecAudio model)"),nw.forEach(t),HJe=i(L),lm=n(L,"LI",{});var sw=s(lm);fne=n(sw,"STRONG",{});var IAe=s(fne);UJe=r(IAe,"data2vec-text"),IAe.forEach(t),JJe=r(sw," \u2014 "),gR=n(sw,"A",{href:!0});var NAe=s(gR);YJe=r(NAe,"Data2VecTextConfig"),NAe.forEach(t),KJe=r(sw," (Data2VecText model)"),sw.forEach(t),ZJe=i(L),im=n(L,"LI",{});var lw=s(im);mne=n(lw,"STRONG",{});var qAe=s(mne);eYe=r(qAe,"data2vec-vision"),qAe.forEach(t),oYe=r(lw," \u2014 "),hR=n(lw,"A",{href:!0});var jAe=s(hR);rYe=r(jAe,"Data2VecVisionConfig"),jAe.forEach(t),tYe=r(lw," (Data2VecVision model)"),lw.forEach(t),aYe=i(L),dm=n(L,"LI",{});var iw=s(dm);gne=n(iw,"STRONG",{});var DAe=s(gne);nYe=r(DAe,"deberta"),DAe.forEach(t),sYe=r(iw," \u2014 "),pR=n(iw,"A",{href:!0});var GAe=s(pR);lYe=r(GAe,"DebertaConfig"),GAe.forEach(t),iYe=r(iw," (DeBERTa model)"),iw.forEach(t),dYe=i(L),cm=n(L,"LI",{});var dw=s(cm);hne=n(dw,"STRONG",{});var OAe=s(hne);cYe=r(OAe,"deberta-v2"),OAe.forEach(t),fYe=r(dw," \u2014 "),_R=n(dw,"A",{href:!0});var VAe=s(_R);mYe=r(VAe,"DebertaV2Config"),VAe.forEach(t),gYe=r(dw," (DeBERTa-v2 model)"),dw.forEach(t),hYe=i(L),fm=n(L,"LI",{});var cw=s(fm);pne=n(cw,"STRONG",{});var Ytt=s(pne);pYe=r(Ytt,"decision_transformer"),Ytt.forEach(t),_Ye=r(cw," \u2014 "),uR=n(cw,"A",{href:!0});var Ktt=s(uR);uYe=r(Ktt,"DecisionTransformerConfig"),Ktt.forEach(t),bYe=r(cw," (Decision Transformer model)"),cw.forEach(t),vYe=i(L),mm=n(L,"LI",{});var XAe=s(mm);_ne=n(XAe,"STRONG",{});var Ztt=s(_ne);FYe=r(Ztt,"deit"),Ztt.forEach(t),TYe=r(XAe," \u2014 "),bR=n(XAe,"A",{href:!0});var eat=s(bR);MYe=r(eat,"DeiTConfig"),eat.forEach(t),EYe=r(XAe," (DeiT model)"),XAe.forEach(t),CYe=i(L),gm=n(L,"LI",{});var zAe=s(gm);une=n(zAe,"STRONG",{});var oat=s(une);wYe=r(oat,"detr"),oat.forEach(t),AYe=r(zAe," \u2014 "),vR=n(zAe,"A",{href:!0});var rat=s(vR);LYe=r(rat,"DetrConfig"),rat.forEach(t),yYe=r(zAe," (DETR model)"),zAe.forEach(t),xYe=i(L),hm=n(L,"LI",{});var WAe=s(hm);bne=n(WAe,"STRONG",{});var tat=s(bne);$Ye=r(tat,"distilbert"),tat.forEach(t),kYe=r(WAe," \u2014 "),FR=n(WAe,"A",{href:!0});var aat=s(FR);SYe=r(aat,"DistilBertConfig"),aat.forEach(t),RYe=r(WAe," (DistilBERT model)"),WAe.forEach(t),PYe=i(L),pm=n(L,"LI",{});var QAe=s(pm);vne=n(QAe,"STRONG",{});var nat=s(vne);BYe=r(nat,"dpr"),nat.forEach(t),IYe=r(QAe," \u2014 "),TR=n(QAe,"A",{href:!0});var sat=s(TR);NYe=r(sat,"DPRConfig"),sat.forEach(t),qYe=r(QAe," (DPR model)"),QAe.forEach(t),jYe=i(L),_m=n(L,"LI",{});var HAe=s(_m);Fne=n(HAe,"STRONG",{});var lat=s(Fne);DYe=r(lat,"dpt"),lat.forEach(t),GYe=r(HAe," \u2014 "),MR=n(HAe,"A",{href:!0});var iat=s(MR);OYe=r(iat,"DPTConfig"),iat.forEach(t),VYe=r(HAe," (DPT model)"),HAe.forEach(t),XYe=i(L),um=n(L,"LI",{});var UAe=s(um);Tne=n(UAe,"STRONG",{});var dat=s(Tne);zYe=r(dat,"electra"),dat.forEach(t),WYe=r(UAe," \u2014 "),ER=n(UAe,"A",{href:!0});var cat=s(ER);QYe=r(cat,"ElectraConfig"),cat.forEach(t),HYe=r(UAe," (ELECTRA model)"),UAe.forEach(t),UYe=i(L),bm=n(L,"LI",{});var JAe=s(bm);Mne=n(JAe,"STRONG",{});var fat=s(Mne);JYe=r(fat,"encoder-decoder"),fat.forEach(t),YYe=r(JAe," \u2014 "),CR=n(JAe,"A",{href:!0});var mat=s(CR);KYe=r(mat,"EncoderDecoderConfig"),mat.forEach(t),ZYe=r(JAe," (Encoder decoder model)"),JAe.forEach(t),eKe=i(L),vm=n(L,"LI",{});var YAe=s(vm);Ene=n(YAe,"STRONG",{});var gat=s(Ene);oKe=r(gat,"flaubert"),gat.forEach(t),rKe=r(YAe," \u2014 "),wR=n(YAe,"A",{href:!0});var hat=s(wR);tKe=r(hat,"FlaubertConfig"),hat.forEach(t),aKe=r(YAe," (FlauBERT model)"),YAe.forEach(t),nKe=i(L),Fm=n(L,"LI",{});var KAe=s(Fm);Cne=n(KAe,"STRONG",{});var pat=s(Cne);sKe=r(pat,"flava"),pat.forEach(t),lKe=r(KAe," \u2014 "),AR=n(KAe,"A",{href:!0});var _at=s(AR);iKe=r(_at,"FlavaConfig"),_at.forEach(t),dKe=r(KAe," (FLAVA model)"),KAe.forEach(t),cKe=i(L),Tm=n(L,"LI",{});var ZAe=s(Tm);wne=n(ZAe,"STRONG",{});var uat=s(wne);fKe=r(uat,"fnet"),uat.forEach(t),mKe=r(ZAe," \u2014 "),LR=n(ZAe,"A",{href:!0});var bat=s(LR);gKe=r(bat,"FNetConfig"),bat.forEach(t),hKe=r(ZAe," (FNet model)"),ZAe.forEach(t),pKe=i(L),Mm=n(L,"LI",{});var e6e=s(Mm);Ane=n(e6e,"STRONG",{});var vat=s(Ane);_Ke=r(vat,"fsmt"),vat.forEach(t),uKe=r(e6e," \u2014 "),yR=n(e6e,"A",{href:!0});var Fat=s(yR);bKe=r(Fat,"FSMTConfig"),Fat.forEach(t),vKe=r(e6e," (FairSeq Machine-Translation model)"),e6e.forEach(t),FKe=i(L),Em=n(L,"LI",{});var o6e=s(Em);Lne=n(o6e,"STRONG",{});var Tat=s(Lne);TKe=r(Tat,"funnel"),Tat.forEach(t),MKe=r(o6e," \u2014 "),xR=n(o6e,"A",{href:!0});var Mat=s(xR);EKe=r(Mat,"FunnelConfig"),Mat.forEach(t),CKe=r(o6e," (Funnel Transformer model)"),o6e.forEach(t),wKe=i(L),Cm=n(L,"LI",{});var r6e=s(Cm);yne=n(r6e,"STRONG",{});var Eat=s(yne);AKe=r(Eat,"glpn"),Eat.forEach(t),LKe=r(r6e," \u2014 "),$R=n(r6e,"A",{href:!0});var Cat=s($R);yKe=r(Cat,"GLPNConfig"),Cat.forEach(t),xKe=r(r6e," (GLPN model)"),r6e.forEach(t),$Ke=i(L),wm=n(L,"LI",{});var t6e=s(wm);xne=n(t6e,"STRONG",{});var wat=s(xne);kKe=r(wat,"gpt2"),wat.forEach(t),SKe=r(t6e," \u2014 "),kR=n(t6e,"A",{href:!0});var Aat=s(kR);RKe=r(Aat,"GPT2Config"),Aat.forEach(t),PKe=r(t6e," (OpenAI GPT-2 model)"),t6e.forEach(t),BKe=i(L),Am=n(L,"LI",{});var a6e=s(Am);$ne=n(a6e,"STRONG",{});var Lat=s($ne);IKe=r(Lat,"gpt_neo"),Lat.forEach(t),NKe=r(a6e," \u2014 "),SR=n(a6e,"A",{href:!0});var yat=s(SR);qKe=r(yat,"GPTNeoConfig"),yat.forEach(t),jKe=r(a6e," (GPT Neo model)"),a6e.forEach(t),DKe=i(L),Lm=n(L,"LI",{});var n6e=s(Lm);kne=n(n6e,"STRONG",{});var xat=s(kne);GKe=r(xat,"gpt_neox"),xat.forEach(t),OKe=r(n6e," \u2014 "),RR=n(n6e,"A",{href:!0});var $at=s(RR);VKe=r($at,"GPTNeoXConfig"),$at.forEach(t),XKe=r(n6e," (GPT NeoX model)"),n6e.forEach(t),zKe=i(L),ym=n(L,"LI",{});var s6e=s(ym);Sne=n(s6e,"STRONG",{});var kat=s(Sne);WKe=r(kat,"gptj"),kat.forEach(t),QKe=r(s6e," \u2014 "),PR=n(s6e,"A",{href:!0});var Sat=s(PR);HKe=r(Sat,"GPTJConfig"),Sat.forEach(t),UKe=r(s6e," (GPT-J model)"),s6e.forEach(t),JKe=i(L),xm=n(L,"LI",{});var l6e=s(xm);Rne=n(l6e,"STRONG",{});var Rat=s(Rne);YKe=r(Rat,"groupvit"),Rat.forEach(t),KKe=r(l6e," \u2014 "),BR=n(l6e,"A",{href:!0});var Pat=s(BR);ZKe=r(Pat,"GroupViTConfig"),Pat.forEach(t),eZe=r(l6e," (GroupViT model)"),l6e.forEach(t),oZe=i(L),$m=n(L,"LI",{});var i6e=s($m);Pne=n(i6e,"STRONG",{});var Bat=s(Pne);rZe=r(Bat,"hubert"),Bat.forEach(t),tZe=r(i6e," \u2014 "),IR=n(i6e,"A",{href:!0});var Iat=s(IR);aZe=r(Iat,"HubertConfig"),Iat.forEach(t),nZe=r(i6e," (Hubert model)"),i6e.forEach(t),sZe=i(L),km=n(L,"LI",{});var d6e=s(km);Bne=n(d6e,"STRONG",{});var Nat=s(Bne);lZe=r(Nat,"ibert"),Nat.forEach(t),iZe=r(d6e," \u2014 "),NR=n(d6e,"A",{href:!0});var qat=s(NR);dZe=r(qat,"IBertConfig"),qat.forEach(t),cZe=r(d6e," (I-BERT model)"),d6e.forEach(t),fZe=i(L),Sm=n(L,"LI",{});var c6e=s(Sm);Ine=n(c6e,"STRONG",{});var jat=s(Ine);mZe=r(jat,"imagegpt"),jat.forEach(t),gZe=r(c6e," \u2014 "),qR=n(c6e,"A",{href:!0});var Dat=s(qR);hZe=r(Dat,"ImageGPTConfig"),Dat.forEach(t),pZe=r(c6e," (ImageGPT model)"),c6e.forEach(t),_Ze=i(L),Rm=n(L,"LI",{});var f6e=s(Rm);Nne=n(f6e,"STRONG",{});var Gat=s(Nne);uZe=r(Gat,"layoutlm"),Gat.forEach(t),bZe=r(f6e," \u2014 "),jR=n(f6e,"A",{href:!0});var Oat=s(jR);vZe=r(Oat,"LayoutLMConfig"),Oat.forEach(t),FZe=r(f6e," (LayoutLM model)"),f6e.forEach(t),TZe=i(L),Pm=n(L,"LI",{});var m6e=s(Pm);qne=n(m6e,"STRONG",{});var Vat=s(qne);MZe=r(Vat,"layoutlmv2"),Vat.forEach(t),EZe=r(m6e," \u2014 "),DR=n(m6e,"A",{href:!0});var Xat=s(DR);CZe=r(Xat,"LayoutLMv2Config"),Xat.forEach(t),wZe=r(m6e," (LayoutLMv2 model)"),m6e.forEach(t),AZe=i(L),Bm=n(L,"LI",{});var g6e=s(Bm);jne=n(g6e,"STRONG",{});var zat=s(jne);LZe=r(zat,"layoutlmv3"),zat.forEach(t),yZe=r(g6e," \u2014 "),GR=n(g6e,"A",{href:!0});var Wat=s(GR);xZe=r(Wat,"LayoutLMv3Config"),Wat.forEach(t),$Ze=r(g6e," (LayoutLMv3 model)"),g6e.forEach(t),kZe=i(L),Im=n(L,"LI",{});var h6e=s(Im);Dne=n(h6e,"STRONG",{});var Qat=s(Dne);SZe=r(Qat,"led"),Qat.forEach(t),RZe=r(h6e," \u2014 "),OR=n(h6e,"A",{href:!0});var Hat=s(OR);PZe=r(Hat,"LEDConfig"),Hat.forEach(t),BZe=r(h6e," (LED model)"),h6e.forEach(t),IZe=i(L),Nm=n(L,"LI",{});var p6e=s(Nm);Gne=n(p6e,"STRONG",{});var Uat=s(Gne);NZe=r(Uat,"levit"),Uat.forEach(t),qZe=r(p6e," \u2014 "),VR=n(p6e,"A",{href:!0});var Jat=s(VR);jZe=r(Jat,"LevitConfig"),Jat.forEach(t),DZe=r(p6e," (LeViT model)"),p6e.forEach(t),GZe=i(L),qm=n(L,"LI",{});var _6e=s(qm);One=n(_6e,"STRONG",{});var Yat=s(One);OZe=r(Yat,"longformer"),Yat.forEach(t),VZe=r(_6e," \u2014 "),XR=n(_6e,"A",{href:!0});var Kat=s(XR);XZe=r(Kat,"LongformerConfig"),Kat.forEach(t),zZe=r(_6e," (Longformer model)"),_6e.forEach(t),WZe=i(L),jm=n(L,"LI",{});var u6e=s(jm);Vne=n(u6e,"STRONG",{});var Zat=s(Vne);QZe=r(Zat,"longt5"),Zat.forEach(t),HZe=r(u6e," \u2014 "),zR=n(u6e,"A",{href:!0});var ent=s(zR);UZe=r(ent,"LongT5Config"),ent.forEach(t),JZe=r(u6e," (LongT5 model)"),u6e.forEach(t),YZe=i(L),Dm=n(L,"LI",{});var b6e=s(Dm);Xne=n(b6e,"STRONG",{});var ont=s(Xne);KZe=r(ont,"luke"),ont.forEach(t),ZZe=r(b6e," \u2014 "),WR=n(b6e,"A",{href:!0});var rnt=s(WR);eeo=r(rnt,"LukeConfig"),rnt.forEach(t),oeo=r(b6e," (LUKE model)"),b6e.forEach(t),reo=i(L),Gm=n(L,"LI",{});var v6e=s(Gm);zne=n(v6e,"STRONG",{});var tnt=s(zne);teo=r(tnt,"lxmert"),tnt.forEach(t),aeo=r(v6e," \u2014 "),QR=n(v6e,"A",{href:!0});var ant=s(QR);neo=r(ant,"LxmertConfig"),ant.forEach(t),seo=r(v6e," (LXMERT model)"),v6e.forEach(t),leo=i(L),Om=n(L,"LI",{});var F6e=s(Om);Wne=n(F6e,"STRONG",{});var nnt=s(Wne);ieo=r(nnt,"m2m_100"),nnt.forEach(t),deo=r(F6e," \u2014 "),HR=n(F6e,"A",{href:!0});var snt=s(HR);ceo=r(snt,"M2M100Config"),snt.forEach(t),feo=r(F6e," (M2M100 model)"),F6e.forEach(t),meo=i(L),Vm=n(L,"LI",{});var T6e=s(Vm);Qne=n(T6e,"STRONG",{});var lnt=s(Qne);geo=r(lnt,"marian"),lnt.forEach(t),heo=r(T6e," \u2014 "),UR=n(T6e,"A",{href:!0});var int=s(UR);peo=r(int,"MarianConfig"),int.forEach(t),_eo=r(T6e," (Marian model)"),T6e.forEach(t),ueo=i(L),Xm=n(L,"LI",{});var M6e=s(Xm);Hne=n(M6e,"STRONG",{});var dnt=s(Hne);beo=r(dnt,"maskformer"),dnt.forEach(t),veo=r(M6e," \u2014 "),JR=n(M6e,"A",{href:!0});var cnt=s(JR);Feo=r(cnt,"MaskFormerConfig"),cnt.forEach(t),Teo=r(M6e," (MaskFormer model)"),M6e.forEach(t),Meo=i(L),zm=n(L,"LI",{});var E6e=s(zm);Une=n(E6e,"STRONG",{});var fnt=s(Une);Eeo=r(fnt,"mbart"),fnt.forEach(t),Ceo=r(E6e," \u2014 "),YR=n(E6e,"A",{href:!0});var mnt=s(YR);weo=r(mnt,"MBartConfig"),mnt.forEach(t),Aeo=r(E6e," (mBART model)"),E6e.forEach(t),Leo=i(L),Wm=n(L,"LI",{});var C6e=s(Wm);Jne=n(C6e,"STRONG",{});var gnt=s(Jne);yeo=r(gnt,"mctct"),gnt.forEach(t),xeo=r(C6e," \u2014 "),KR=n(C6e,"A",{href:!0});var hnt=s(KR);$eo=r(hnt,"MCTCTConfig"),hnt.forEach(t),keo=r(C6e," (M-CTC-T model)"),C6e.forEach(t),Seo=i(L),Qm=n(L,"LI",{});var w6e=s(Qm);Yne=n(w6e,"STRONG",{});var pnt=s(Yne);Reo=r(pnt,"megatron-bert"),pnt.forEach(t),Peo=r(w6e," \u2014 "),ZR=n(w6e,"A",{href:!0});var _nt=s(ZR);Beo=r(_nt,"MegatronBertConfig"),_nt.forEach(t),Ieo=r(w6e," (Megatron-BERT model)"),w6e.forEach(t),Neo=i(L),Hm=n(L,"LI",{});var A6e=s(Hm);Kne=n(A6e,"STRONG",{});var unt=s(Kne);qeo=r(unt,"mobilebert"),unt.forEach(t),jeo=r(A6e," \u2014 "),eP=n(A6e,"A",{href:!0});var bnt=s(eP);Deo=r(bnt,"MobileBertConfig"),bnt.forEach(t),Geo=r(A6e," (MobileBERT model)"),A6e.forEach(t),Oeo=i(L),Um=n(L,"LI",{});var L6e=s(Um);Zne=n(L6e,"STRONG",{});var vnt=s(Zne);Veo=r(vnt,"mobilevit"),vnt.forEach(t),Xeo=r(L6e," \u2014 "),oP=n(L6e,"A",{href:!0});var Fnt=s(oP);zeo=r(Fnt,"MobileViTConfig"),Fnt.forEach(t),Weo=r(L6e," (MobileViT model)"),L6e.forEach(t),Qeo=i(L),Jm=n(L,"LI",{});var y6e=s(Jm);ese=n(y6e,"STRONG",{});var Tnt=s(ese);Heo=r(Tnt,"mpnet"),Tnt.forEach(t),Ueo=r(y6e," \u2014 "),rP=n(y6e,"A",{href:!0});var Mnt=s(rP);Jeo=r(Mnt,"MPNetConfig"),Mnt.forEach(t),Yeo=r(y6e," (MPNet model)"),y6e.forEach(t),Keo=i(L),Ym=n(L,"LI",{});var x6e=s(Ym);ose=n(x6e,"STRONG",{});var Ent=s(ose);Zeo=r(Ent,"mt5"),Ent.forEach(t),eoo=r(x6e," \u2014 "),tP=n(x6e,"A",{href:!0});var Cnt=s(tP);ooo=r(Cnt,"MT5Config"),Cnt.forEach(t),roo=r(x6e," (MT5 model)"),x6e.forEach(t),too=i(L),Km=n(L,"LI",{});var $6e=s(Km);rse=n($6e,"STRONG",{});var wnt=s(rse);aoo=r(wnt,"mvp"),wnt.forEach(t),noo=r($6e," \u2014 "),aP=n($6e,"A",{href:!0});var Ant=s(aP);soo=r(Ant,"MvpConfig"),Ant.forEach(t),loo=r($6e," (MVP model)"),$6e.forEach(t),ioo=i(L),Zm=n(L,"LI",{});var k6e=s(Zm);tse=n(k6e,"STRONG",{});var Lnt=s(tse);doo=r(Lnt,"nezha"),Lnt.forEach(t),coo=r(k6e," \u2014 "),nP=n(k6e,"A",{href:!0});var ynt=s(nP);foo=r(ynt,"NezhaConfig"),ynt.forEach(t),moo=r(k6e," (Nezha model)"),k6e.forEach(t),goo=i(L),eg=n(L,"LI",{});var S6e=s(eg);ase=n(S6e,"STRONG",{});var xnt=s(ase);hoo=r(xnt,"nystromformer"),xnt.forEach(t),poo=r(S6e," \u2014 "),sP=n(S6e,"A",{href:!0});var $nt=s(sP);_oo=r($nt,"NystromformerConfig"),$nt.forEach(t),uoo=r(S6e," (Nystr\xF6mformer model)"),S6e.forEach(t),boo=i(L),og=n(L,"LI",{});var R6e=s(og);nse=n(R6e,"STRONG",{});var knt=s(nse);voo=r(knt,"openai-gpt"),knt.forEach(t),Foo=r(R6e," \u2014 "),lP=n(R6e,"A",{href:!0});var Snt=s(lP);Too=r(Snt,"OpenAIGPTConfig"),Snt.forEach(t),Moo=r(R6e," (OpenAI GPT model)"),R6e.forEach(t),Eoo=i(L),rg=n(L,"LI",{});var P6e=s(rg);sse=n(P6e,"STRONG",{});var Rnt=s(sse);Coo=r(Rnt,"opt"),Rnt.forEach(t),woo=r(P6e," \u2014 "),iP=n(P6e,"A",{href:!0});var Pnt=s(iP);Aoo=r(Pnt,"OPTConfig"),Pnt.forEach(t),Loo=r(P6e," (OPT model)"),P6e.forEach(t),yoo=i(L),tg=n(L,"LI",{});var B6e=s(tg);lse=n(B6e,"STRONG",{});var Bnt=s(lse);xoo=r(Bnt,"owlvit"),Bnt.forEach(t),$oo=r(B6e," \u2014 "),dP=n(B6e,"A",{href:!0});var Int=s(dP);koo=r(Int,"OwlViTConfig"),Int.forEach(t),Soo=r(B6e," (OWL-ViT model)"),B6e.forEach(t),Roo=i(L),ag=n(L,"LI",{});var I6e=s(ag);ise=n(I6e,"STRONG",{});var Nnt=s(ise);Poo=r(Nnt,"pegasus"),Nnt.forEach(t),Boo=r(I6e," \u2014 "),cP=n(I6e,"A",{href:!0});var qnt=s(cP);Ioo=r(qnt,"PegasusConfig"),qnt.forEach(t),Noo=r(I6e," (Pegasus model)"),I6e.forEach(t),qoo=i(L),ng=n(L,"LI",{});var N6e=s(ng);dse=n(N6e,"STRONG",{});var jnt=s(dse);joo=r(jnt,"perceiver"),jnt.forEach(t),Doo=r(N6e," \u2014 "),fP=n(N6e,"A",{href:!0});var Dnt=s(fP);Goo=r(Dnt,"PerceiverConfig"),Dnt.forEach(t),Ooo=r(N6e," (Perceiver model)"),N6e.forEach(t),Voo=i(L),sg=n(L,"LI",{});var q6e=s(sg);cse=n(q6e,"STRONG",{});var Gnt=s(cse);Xoo=r(Gnt,"plbart"),Gnt.forEach(t),zoo=r(q6e," \u2014 "),mP=n(q6e,"A",{href:!0});var Ont=s(mP);Woo=r(Ont,"PLBartConfig"),Ont.forEach(t),Qoo=r(q6e," (PLBart model)"),q6e.forEach(t),Hoo=i(L),lg=n(L,"LI",{});var j6e=s(lg);fse=n(j6e,"STRONG",{});var Vnt=s(fse);Uoo=r(Vnt,"poolformer"),Vnt.forEach(t),Joo=r(j6e," \u2014 "),gP=n(j6e,"A",{href:!0});var Xnt=s(gP);Yoo=r(Xnt,"PoolFormerConfig"),Xnt.forEach(t),Koo=r(j6e," (PoolFormer model)"),j6e.forEach(t),Zoo=i(L),ig=n(L,"LI",{});var D6e=s(ig);mse=n(D6e,"STRONG",{});var znt=s(mse);ero=r(znt,"prophetnet"),znt.forEach(t),oro=r(D6e," \u2014 "),hP=n(D6e,"A",{href:!0});var Wnt=s(hP);rro=r(Wnt,"ProphetNetConfig"),Wnt.forEach(t),tro=r(D6e," (ProphetNet model)"),D6e.forEach(t),aro=i(L),dg=n(L,"LI",{});var G6e=s(dg);gse=n(G6e,"STRONG",{});var Qnt=s(gse);nro=r(Qnt,"qdqbert"),Qnt.forEach(t),sro=r(G6e," \u2014 "),pP=n(G6e,"A",{href:!0});var Hnt=s(pP);lro=r(Hnt,"QDQBertConfig"),Hnt.forEach(t),iro=r(G6e," (QDQBert model)"),G6e.forEach(t),dro=i(L),cg=n(L,"LI",{});var O6e=s(cg);hse=n(O6e,"STRONG",{});var Unt=s(hse);cro=r(Unt,"rag"),Unt.forEach(t),fro=r(O6e," \u2014 "),_P=n(O6e,"A",{href:!0});var Jnt=s(_P);mro=r(Jnt,"RagConfig"),Jnt.forEach(t),gro=r(O6e," (RAG model)"),O6e.forEach(t),hro=i(L),fg=n(L,"LI",{});var V6e=s(fg);pse=n(V6e,"STRONG",{});var Ynt=s(pse);pro=r(Ynt,"realm"),Ynt.forEach(t),_ro=r(V6e," \u2014 "),uP=n(V6e,"A",{href:!0});var Knt=s(uP);uro=r(Knt,"RealmConfig"),Knt.forEach(t),bro=r(V6e," (REALM model)"),V6e.forEach(t),vro=i(L),mg=n(L,"LI",{});var X6e=s(mg);_se=n(X6e,"STRONG",{});var Znt=s(_se);Fro=r(Znt,"reformer"),Znt.forEach(t),Tro=r(X6e," \u2014 "),bP=n(X6e,"A",{href:!0});var est=s(bP);Mro=r(est,"ReformerConfig"),est.forEach(t),Ero=r(X6e," (Reformer model)"),X6e.forEach(t),Cro=i(L),gg=n(L,"LI",{});var z6e=s(gg);use=n(z6e,"STRONG",{});var ost=s(use);wro=r(ost,"regnet"),ost.forEach(t),Aro=r(z6e," \u2014 "),vP=n(z6e,"A",{href:!0});var rst=s(vP);Lro=r(rst,"RegNetConfig"),rst.forEach(t),yro=r(z6e," (RegNet model)"),z6e.forEach(t),xro=i(L),hg=n(L,"LI",{});var W6e=s(hg);bse=n(W6e,"STRONG",{});var tst=s(bse);$ro=r(tst,"rembert"),tst.forEach(t),kro=r(W6e," \u2014 "),FP=n(W6e,"A",{href:!0});var ast=s(FP);Sro=r(ast,"RemBertConfig"),ast.forEach(t),Rro=r(W6e," (RemBERT model)"),W6e.forEach(t),Pro=i(L),pg=n(L,"LI",{});var Q6e=s(pg);vse=n(Q6e,"STRONG",{});var nst=s(vse);Bro=r(nst,"resnet"),nst.forEach(t),Iro=r(Q6e," \u2014 "),TP=n(Q6e,"A",{href:!0});var sst=s(TP);Nro=r(sst,"ResNetConfig"),sst.forEach(t),qro=r(Q6e," (ResNet model)"),Q6e.forEach(t),jro=i(L),_g=n(L,"LI",{});var H6e=s(_g);Fse=n(H6e,"STRONG",{});var lst=s(Fse);Dro=r(lst,"retribert"),lst.forEach(t),Gro=r(H6e," \u2014 "),MP=n(H6e,"A",{href:!0});var ist=s(MP);Oro=r(ist,"RetriBertConfig"),ist.forEach(t),Vro=r(H6e," (RetriBERT model)"),H6e.forEach(t),Xro=i(L),ug=n(L,"LI",{});var U6e=s(ug);Tse=n(U6e,"STRONG",{});var dst=s(Tse);zro=r(dst,"roberta"),dst.forEach(t),Wro=r(U6e," \u2014 "),EP=n(U6e,"A",{href:!0});var cst=s(EP);Qro=r(cst,"RobertaConfig"),cst.forEach(t),Hro=r(U6e," (RoBERTa model)"),U6e.forEach(t),Uro=i(L),bg=n(L,"LI",{});var J6e=s(bg);Mse=n(J6e,"STRONG",{});var fst=s(Mse);Jro=r(fst,"roformer"),fst.forEach(t),Yro=r(J6e," \u2014 "),CP=n(J6e,"A",{href:!0});var mst=s(CP);Kro=r(mst,"RoFormerConfig"),mst.forEach(t),Zro=r(J6e," (RoFormer model)"),J6e.forEach(t),eto=i(L),vg=n(L,"LI",{});var Y6e=s(vg);Ese=n(Y6e,"STRONG",{});var gst=s(Ese);oto=r(gst,"segformer"),gst.forEach(t),rto=r(Y6e," \u2014 "),wP=n(Y6e,"A",{href:!0});var hst=s(wP);tto=r(hst,"SegformerConfig"),hst.forEach(t),ato=r(Y6e," (SegFormer model)"),Y6e.forEach(t),nto=i(L),Fg=n(L,"LI",{});var K6e=s(Fg);Cse=n(K6e,"STRONG",{});var pst=s(Cse);sto=r(pst,"sew"),pst.forEach(t),lto=r(K6e," \u2014 "),AP=n(K6e,"A",{href:!0});var _st=s(AP);ito=r(_st,"SEWConfig"),_st.forEach(t),dto=r(K6e," (SEW model)"),K6e.forEach(t),cto=i(L),Tg=n(L,"LI",{});var Z6e=s(Tg);wse=n(Z6e,"STRONG",{});var ust=s(wse);fto=r(ust,"sew-d"),ust.forEach(t),mto=r(Z6e," \u2014 "),LP=n(Z6e,"A",{href:!0});var bst=s(LP);gto=r(bst,"SEWDConfig"),bst.forEach(t),hto=r(Z6e," (SEW-D model)"),Z6e.forEach(t),pto=i(L),Mg=n(L,"LI",{});var eLe=s(Mg);Ase=n(eLe,"STRONG",{});var vst=s(Ase);_to=r(vst,"speech-encoder-decoder"),vst.forEach(t),uto=r(eLe," \u2014 "),yP=n(eLe,"A",{href:!0});var Fst=s(yP);bto=r(Fst,"SpeechEncoderDecoderConfig"),Fst.forEach(t),vto=r(eLe," (Speech Encoder decoder model)"),eLe.forEach(t),Fto=i(L),Eg=n(L,"LI",{});var oLe=s(Eg);Lse=n(oLe,"STRONG",{});var Tst=s(Lse);Tto=r(Tst,"speech_to_text"),Tst.forEach(t),Mto=r(oLe," \u2014 "),xP=n(oLe,"A",{href:!0});var Mst=s(xP);Eto=r(Mst,"Speech2TextConfig"),Mst.forEach(t),Cto=r(oLe," (Speech2Text model)"),oLe.forEach(t),wto=i(L),Cg=n(L,"LI",{});var rLe=s(Cg);yse=n(rLe,"STRONG",{});var Est=s(yse);Ato=r(Est,"speech_to_text_2"),Est.forEach(t),Lto=r(rLe," \u2014 "),$P=n(rLe,"A",{href:!0});var Cst=s($P);yto=r(Cst,"Speech2Text2Config"),Cst.forEach(t),xto=r(rLe," (Speech2Text2 model)"),rLe.forEach(t),$to=i(L),wg=n(L,"LI",{});var tLe=s(wg);xse=n(tLe,"STRONG",{});var wst=s(xse);kto=r(wst,"splinter"),wst.forEach(t),Sto=r(tLe," \u2014 "),kP=n(tLe,"A",{href:!0});var Ast=s(kP);Rto=r(Ast,"SplinterConfig"),Ast.forEach(t),Pto=r(tLe," (Splinter model)"),tLe.forEach(t),Bto=i(L),Ag=n(L,"LI",{});var aLe=s(Ag);$se=n(aLe,"STRONG",{});var Lst=s($se);Ito=r(Lst,"squeezebert"),Lst.forEach(t),Nto=r(aLe," \u2014 "),SP=n(aLe,"A",{href:!0});var yst=s(SP);qto=r(yst,"SqueezeBertConfig"),yst.forEach(t),jto=r(aLe," (SqueezeBERT model)"),aLe.forEach(t),Dto=i(L),Lg=n(L,"LI",{});var nLe=s(Lg);kse=n(nLe,"STRONG",{});var xst=s(kse);Gto=r(xst,"swin"),xst.forEach(t),Oto=r(nLe," \u2014 "),RP=n(nLe,"A",{href:!0});var $st=s(RP);Vto=r($st,"SwinConfig"),$st.forEach(t),Xto=r(nLe," (Swin Transformer model)"),nLe.forEach(t),zto=i(L),yg=n(L,"LI",{});var sLe=s(yg);Sse=n(sLe,"STRONG",{});var kst=s(Sse);Wto=r(kst,"t5"),kst.forEach(t),Qto=r(sLe," \u2014 "),PP=n(sLe,"A",{href:!0});var Sst=s(PP);Hto=r(Sst,"T5Config"),Sst.forEach(t),Uto=r(sLe," (T5 model)"),sLe.forEach(t),Jto=i(L),xg=n(L,"LI",{});var lLe=s(xg);Rse=n(lLe,"STRONG",{});var Rst=s(Rse);Yto=r(Rst,"tapas"),Rst.forEach(t),Kto=r(lLe," \u2014 "),BP=n(lLe,"A",{href:!0});var Pst=s(BP);Zto=r(Pst,"TapasConfig"),Pst.forEach(t),eao=r(lLe," (TAPAS model)"),lLe.forEach(t),oao=i(L),$g=n(L,"LI",{});var iLe=s($g);Pse=n(iLe,"STRONG",{});var Bst=s(Pse);rao=r(Bst,"trajectory_transformer"),Bst.forEach(t),tao=r(iLe," \u2014 "),IP=n(iLe,"A",{href:!0});var Ist=s(IP);aao=r(Ist,"TrajectoryTransformerConfig"),Ist.forEach(t),nao=r(iLe," (Trajectory Transformer model)"),iLe.forEach(t),sao=i(L),kg=n(L,"LI",{});var dLe=s(kg);Bse=n(dLe,"STRONG",{});var Nst=s(Bse);lao=r(Nst,"transfo-xl"),Nst.forEach(t),iao=r(dLe," \u2014 "),NP=n(dLe,"A",{href:!0});var qst=s(NP);dao=r(qst,"TransfoXLConfig"),qst.forEach(t),cao=r(dLe," (Transformer-XL model)"),dLe.forEach(t),fao=i(L),Sg=n(L,"LI",{});var cLe=s(Sg);Ise=n(cLe,"STRONG",{});var jst=s(Ise);mao=r(jst,"trocr"),jst.forEach(t),gao=r(cLe," \u2014 "),qP=n(cLe,"A",{href:!0});var Dst=s(qP);hao=r(Dst,"TrOCRConfig"),Dst.forEach(t),pao=r(cLe," (TrOCR model)"),cLe.forEach(t),_ao=i(L),Rg=n(L,"LI",{});var fLe=s(Rg);Nse=n(fLe,"STRONG",{});var Gst=s(Nse);uao=r(Gst,"unispeech"),Gst.forEach(t),bao=r(fLe," \u2014 "),jP=n(fLe,"A",{href:!0});var Ost=s(jP);vao=r(Ost,"UniSpeechConfig"),Ost.forEach(t),Fao=r(fLe," (UniSpeech model)"),fLe.forEach(t),Tao=i(L),Pg=n(L,"LI",{});var mLe=s(Pg);qse=n(mLe,"STRONG",{});var Vst=s(qse);Mao=r(Vst,"unispeech-sat"),Vst.forEach(t),Eao=r(mLe," \u2014 "),DP=n(mLe,"A",{href:!0});var Xst=s(DP);Cao=r(Xst,"UniSpeechSatConfig"),Xst.forEach(t),wao=r(mLe," (UniSpeechSat model)"),mLe.forEach(t),Aao=i(L),Bg=n(L,"LI",{});var gLe=s(Bg);jse=n(gLe,"STRONG",{});var zst=s(jse);Lao=r(zst,"van"),zst.forEach(t),yao=r(gLe," \u2014 "),GP=n(gLe,"A",{href:!0});var Wst=s(GP);xao=r(Wst,"VanConfig"),Wst.forEach(t),$ao=r(gLe," (VAN model)"),gLe.forEach(t),kao=i(L),Ig=n(L,"LI",{});var hLe=s(Ig);Dse=n(hLe,"STRONG",{});var Qst=s(Dse);Sao=r(Qst,"vilt"),Qst.forEach(t),Rao=r(hLe," \u2014 "),OP=n(hLe,"A",{href:!0});var Hst=s(OP);Pao=r(Hst,"ViltConfig"),Hst.forEach(t),Bao=r(hLe," (ViLT model)"),hLe.forEach(t),Iao=i(L),Ng=n(L,"LI",{});var pLe=s(Ng);Gse=n(pLe,"STRONG",{});var Ust=s(Gse);Nao=r(Ust,"vision-encoder-decoder"),Ust.forEach(t),qao=r(pLe," \u2014 "),VP=n(pLe,"A",{href:!0});var Jst=s(VP);jao=r(Jst,"VisionEncoderDecoderConfig"),Jst.forEach(t),Dao=r(pLe," (Vision Encoder decoder model)"),pLe.forEach(t),Gao=i(L),qg=n(L,"LI",{});var _Le=s(qg);Ose=n(_Le,"STRONG",{});var Yst=s(Ose);Oao=r(Yst,"vision-text-dual-encoder"),Yst.forEach(t),Vao=r(_Le," \u2014 "),XP=n(_Le,"A",{href:!0});var Kst=s(XP);Xao=r(Kst,"VisionTextDualEncoderConfig"),Kst.forEach(t),zao=r(_Le," (VisionTextDualEncoder model)"),_Le.forEach(t),Wao=i(L),jg=n(L,"LI",{});var uLe=s(jg);Vse=n(uLe,"STRONG",{});var Zst=s(Vse);Qao=r(Zst,"visual_bert"),Zst.forEach(t),Hao=r(uLe," \u2014 "),zP=n(uLe,"A",{href:!0});var elt=s(zP);Uao=r(elt,"VisualBertConfig"),elt.forEach(t),Jao=r(uLe," (VisualBERT model)"),uLe.forEach(t),Yao=i(L),Dg=n(L,"LI",{});var bLe=s(Dg);Xse=n(bLe,"STRONG",{});var olt=s(Xse);Kao=r(olt,"vit"),olt.forEach(t),Zao=r(bLe," \u2014 "),WP=n(bLe,"A",{href:!0});var rlt=s(WP);eno=r(rlt,"ViTConfig"),rlt.forEach(t),ono=r(bLe," (ViT model)"),bLe.forEach(t),rno=i(L),Gg=n(L,"LI",{});var vLe=s(Gg);zse=n(vLe,"STRONG",{});var tlt=s(zse);tno=r(tlt,"vit_mae"),tlt.forEach(t),ano=r(vLe," \u2014 "),QP=n(vLe,"A",{href:!0});var alt=s(QP);nno=r(alt,"ViTMAEConfig"),alt.forEach(t),sno=r(vLe," (ViTMAE model)"),vLe.forEach(t),lno=i(L),Og=n(L,"LI",{});var FLe=s(Og);Wse=n(FLe,"STRONG",{});var nlt=s(Wse);ino=r(nlt,"wav2vec2"),nlt.forEach(t),dno=r(FLe," \u2014 "),HP=n(FLe,"A",{href:!0});var slt=s(HP);cno=r(slt,"Wav2Vec2Config"),slt.forEach(t),fno=r(FLe," (Wav2Vec2 model)"),FLe.forEach(t),mno=i(L),Vg=n(L,"LI",{});var TLe=s(Vg);Qse=n(TLe,"STRONG",{});var llt=s(Qse);gno=r(llt,"wav2vec2-conformer"),llt.forEach(t),hno=r(TLe," \u2014 "),UP=n(TLe,"A",{href:!0});var ilt=s(UP);pno=r(ilt,"Wav2Vec2ConformerConfig"),ilt.forEach(t),_no=r(TLe," (Wav2Vec2-Conformer model)"),TLe.forEach(t),uno=i(L),Xg=n(L,"LI",{});var MLe=s(Xg);Hse=n(MLe,"STRONG",{});var dlt=s(Hse);bno=r(dlt,"wavlm"),dlt.forEach(t),vno=r(MLe," \u2014 "),JP=n(MLe,"A",{href:!0});var clt=s(JP);Fno=r(clt,"WavLMConfig"),clt.forEach(t),Tno=r(MLe," (WavLM model)"),MLe.forEach(t),Mno=i(L),zg=n(L,"LI",{});var ELe=s(zg);Use=n(ELe,"STRONG",{});var flt=s(Use);Eno=r(flt,"xglm"),flt.forEach(t),Cno=r(ELe," \u2014 "),YP=n(ELe,"A",{href:!0});var mlt=s(YP);wno=r(mlt,"XGLMConfig"),mlt.forEach(t),Ano=r(ELe," (XGLM model)"),ELe.forEach(t),Lno=i(L),Wg=n(L,"LI",{});var CLe=s(Wg);Jse=n(CLe,"STRONG",{});var glt=s(Jse);yno=r(glt,"xlm"),glt.forEach(t),xno=r(CLe," \u2014 "),KP=n(CLe,"A",{href:!0});var hlt=s(KP);$no=r(hlt,"XLMConfig"),hlt.forEach(t),kno=r(CLe," (XLM model)"),CLe.forEach(t),Sno=i(L),Qg=n(L,"LI",{});var wLe=s(Qg);Yse=n(wLe,"STRONG",{});var plt=s(Yse);Rno=r(plt,"xlm-prophetnet"),plt.forEach(t),Pno=r(wLe," \u2014 "),ZP=n(wLe,"A",{href:!0});var _lt=s(ZP);Bno=r(_lt,"XLMProphetNetConfig"),_lt.forEach(t),Ino=r(wLe," (XLM-ProphetNet model)"),wLe.forEach(t),Nno=i(L),Hg=n(L,"LI",{});var ALe=s(Hg);Kse=n(ALe,"STRONG",{});var ult=s(Kse);qno=r(ult,"xlm-roberta"),ult.forEach(t),jno=r(ALe," \u2014 "),eB=n(ALe,"A",{href:!0});var blt=s(eB);Dno=r(blt,"XLMRobertaConfig"),blt.forEach(t),Gno=r(ALe," (XLM-RoBERTa model)"),ALe.forEach(t),Ono=i(L),Ug=n(L,"LI",{});var LLe=s(Ug);Zse=n(LLe,"STRONG",{});var vlt=s(Zse);Vno=r(vlt,"xlm-roberta-xl"),vlt.forEach(t),Xno=r(LLe," \u2014 "),oB=n(LLe,"A",{href:!0});var Flt=s(oB);zno=r(Flt,"XLMRobertaXLConfig"),Flt.forEach(t),Wno=r(LLe," (XLM-RoBERTa-XL model)"),LLe.forEach(t),Qno=i(L),Jg=n(L,"LI",{});var yLe=s(Jg);ele=n(yLe,"STRONG",{});var Tlt=s(ele);Hno=r(Tlt,"xlnet"),Tlt.forEach(t),Uno=r(yLe," \u2014 "),rB=n(yLe,"A",{href:!0});var Mlt=s(rB);Jno=r(Mlt,"XLNetConfig"),Mlt.forEach(t),Yno=r(yLe," (XLNet model)"),yLe.forEach(t),Kno=i(L),Yg=n(L,"LI",{});var xLe=s(Yg);ole=n(xLe,"STRONG",{});var Elt=s(ole);Zno=r(Elt,"yolos"),Elt.forEach(t),eso=r(xLe," \u2014 "),tB=n(xLe,"A",{href:!0});var Clt=s(tB);oso=r(Clt,"YolosConfig"),Clt.forEach(t),rso=r(xLe," (YOLOS model)"),xLe.forEach(t),tso=i(L),Kg=n(L,"LI",{});var $Le=s(Kg);rle=n($Le,"STRONG",{});var wlt=s(rle);aso=r(wlt,"yoso"),wlt.forEach(t),nso=r($Le," \u2014 "),aB=n($Le,"A",{href:!0});var Alt=s(aB);sso=r(Alt,"YosoConfig"),Alt.forEach(t),lso=r($Le," (YOSO model)"),$Le.forEach(t),L.forEach(t),iso=i(st),T(Zg.$$.fragment,st),st.forEach(t),dso=i(nt),eh=n(nt,"DIV",{class:!0});var CWe=s(eh);T(_6.$$.fragment,CWe),cso=i(CWe),tle=n(CWe,"P",{});var Llt=s(tle);fso=r(Llt,"Register a new configuration for this class."),Llt.forEach(t),CWe.forEach(t),nt.forEach(t),wXe=i(f),qi=n(f,"H2",{class:!0});var wWe=s(qi);oh=n(wWe,"A",{id:!0,class:!0,href:!0});var ylt=s(oh);ale=n(ylt,"SPAN",{});var xlt=s(ale);T(u6.$$.fragment,xlt),xlt.forEach(t),ylt.forEach(t),mso=i(wWe),nle=n(wWe,"SPAN",{});var $lt=s(nle);gso=r($lt,"AutoTokenizer"),$lt.forEach(t),wWe.forEach(t),AXe=i(f),Lo=n(f,"DIV",{class:!0});var Zs=s(Lo);T(b6.$$.fragment,Zs),hso=i(Zs),v6=n(Zs,"P",{});var AWe=s(v6);pso=r(AWe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),nB=n(AWe,"A",{href:!0});var klt=s(nB);_so=r(klt,"AutoTokenizer.from_pretrained()"),klt.forEach(t),uso=r(AWe," class method."),AWe.forEach(t),bso=i(Zs),F6=n(Zs,"P",{});var LWe=s(F6);vso=r(LWe,"This class cannot be instantiated directly using "),sle=n(LWe,"CODE",{});var Slt=s(sle);Fso=r(Slt,"__init__()"),Slt.forEach(t),Tso=r(LWe," (throws an error)."),LWe.forEach(t),Mso=i(Zs),yr=n(Zs,"DIV",{class:!0});var el=s(yr);T(T6.$$.fragment,el),Eso=i(el),lle=n(el,"P",{});var Rlt=s(lle);Cso=r(Rlt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Rlt.forEach(t),wso=i(el),Pa=n(el,"P",{});var fw=s(Pa);Aso=r(fw,"The tokenizer class to instantiate is selected based on the "),ile=n(fw,"CODE",{});var Plt=s(ile);Lso=r(Plt,"model_type"),Plt.forEach(t),yso=r(fw,` property of the config object (either
passed as an argument or loaded from `),dle=n(fw,"CODE",{});var Blt=s(dle);xso=r(Blt,"pretrained_model_name_or_path"),Blt.forEach(t),$so=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cle=n(fw,"CODE",{});var Ilt=s(cle);kso=r(Ilt,"pretrained_model_name_or_path"),Ilt.forEach(t),Sso=r(fw,":"),fw.forEach(t),Rso=i(el),k=n(el,"UL",{});var S=s(k);jn=n(S,"LI",{});var Lk=s(jn);fle=n(Lk,"STRONG",{});var Nlt=s(fle);Pso=r(Nlt,"albert"),Nlt.forEach(t),Bso=r(Lk," \u2014 "),sB=n(Lk,"A",{href:!0});var qlt=s(sB);Iso=r(qlt,"AlbertTokenizer"),qlt.forEach(t),Nso=r(Lk," or "),lB=n(Lk,"A",{href:!0});var jlt=s(lB);qso=r(jlt,"AlbertTokenizerFast"),jlt.forEach(t),jso=r(Lk," (ALBERT model)"),Lk.forEach(t),Dso=i(S),Dn=n(S,"LI",{});var yk=s(Dn);mle=n(yk,"STRONG",{});var Dlt=s(mle);Gso=r(Dlt,"bart"),Dlt.forEach(t),Oso=r(yk," \u2014 "),iB=n(yk,"A",{href:!0});var Glt=s(iB);Vso=r(Glt,"BartTokenizer"),Glt.forEach(t),Xso=r(yk," or "),dB=n(yk,"A",{href:!0});var Olt=s(dB);zso=r(Olt,"BartTokenizerFast"),Olt.forEach(t),Wso=r(yk," (BART model)"),yk.forEach(t),Qso=i(S),Gn=n(S,"LI",{});var xk=s(Gn);gle=n(xk,"STRONG",{});var Vlt=s(gle);Hso=r(Vlt,"barthez"),Vlt.forEach(t),Uso=r(xk," \u2014 "),cB=n(xk,"A",{href:!0});var Xlt=s(cB);Jso=r(Xlt,"BarthezTokenizer"),Xlt.forEach(t),Yso=r(xk," or "),fB=n(xk,"A",{href:!0});var zlt=s(fB);Kso=r(zlt,"BarthezTokenizerFast"),zlt.forEach(t),Zso=r(xk," (BARThez model)"),xk.forEach(t),elo=i(S),rh=n(S,"LI",{});var kLe=s(rh);hle=n(kLe,"STRONG",{});var Wlt=s(hle);olo=r(Wlt,"bartpho"),Wlt.forEach(t),rlo=r(kLe," \u2014 "),mB=n(kLe,"A",{href:!0});var Qlt=s(mB);tlo=r(Qlt,"BartphoTokenizer"),Qlt.forEach(t),alo=r(kLe," (BARTpho model)"),kLe.forEach(t),nlo=i(S),On=n(S,"LI",{});var $k=s(On);ple=n($k,"STRONG",{});var Hlt=s(ple);slo=r(Hlt,"bert"),Hlt.forEach(t),llo=r($k," \u2014 "),gB=n($k,"A",{href:!0});var Ult=s(gB);ilo=r(Ult,"BertTokenizer"),Ult.forEach(t),dlo=r($k," or "),hB=n($k,"A",{href:!0});var Jlt=s(hB);clo=r(Jlt,"BertTokenizerFast"),Jlt.forEach(t),flo=r($k," (BERT model)"),$k.forEach(t),mlo=i(S),th=n(S,"LI",{});var SLe=s(th);_le=n(SLe,"STRONG",{});var Ylt=s(_le);glo=r(Ylt,"bert-generation"),Ylt.forEach(t),hlo=r(SLe," \u2014 "),pB=n(SLe,"A",{href:!0});var Klt=s(pB);plo=r(Klt,"BertGenerationTokenizer"),Klt.forEach(t),_lo=r(SLe," (Bert Generation model)"),SLe.forEach(t),ulo=i(S),ah=n(S,"LI",{});var RLe=s(ah);ule=n(RLe,"STRONG",{});var Zlt=s(ule);blo=r(Zlt,"bert-japanese"),Zlt.forEach(t),vlo=r(RLe," \u2014 "),_B=n(RLe,"A",{href:!0});var eit=s(_B);Flo=r(eit,"BertJapaneseTokenizer"),eit.forEach(t),Tlo=r(RLe," (BertJapanese model)"),RLe.forEach(t),Mlo=i(S),nh=n(S,"LI",{});var PLe=s(nh);ble=n(PLe,"STRONG",{});var oit=s(ble);Elo=r(oit,"bertweet"),oit.forEach(t),Clo=r(PLe," \u2014 "),uB=n(PLe,"A",{href:!0});var rit=s(uB);wlo=r(rit,"BertweetTokenizer"),rit.forEach(t),Alo=r(PLe," (BERTweet model)"),PLe.forEach(t),Llo=i(S),Vn=n(S,"LI",{});var kk=s(Vn);vle=n(kk,"STRONG",{});var tit=s(vle);ylo=r(tit,"big_bird"),tit.forEach(t),xlo=r(kk," \u2014 "),bB=n(kk,"A",{href:!0});var ait=s(bB);$lo=r(ait,"BigBirdTokenizer"),ait.forEach(t),klo=r(kk," or "),vB=n(kk,"A",{href:!0});var nit=s(vB);Slo=r(nit,"BigBirdTokenizerFast"),nit.forEach(t),Rlo=r(kk," (BigBird model)"),kk.forEach(t),Plo=i(S),Xn=n(S,"LI",{});var Sk=s(Xn);Fle=n(Sk,"STRONG",{});var sit=s(Fle);Blo=r(sit,"bigbird_pegasus"),sit.forEach(t),Ilo=r(Sk," \u2014 "),FB=n(Sk,"A",{href:!0});var lit=s(FB);Nlo=r(lit,"PegasusTokenizer"),lit.forEach(t),qlo=r(Sk," or "),TB=n(Sk,"A",{href:!0});var iit=s(TB);jlo=r(iit,"PegasusTokenizerFast"),iit.forEach(t),Dlo=r(Sk," (BigBird-Pegasus model)"),Sk.forEach(t),Glo=i(S),zn=n(S,"LI",{});var Rk=s(zn);Tle=n(Rk,"STRONG",{});var dit=s(Tle);Olo=r(dit,"blenderbot"),dit.forEach(t),Vlo=r(Rk," \u2014 "),MB=n(Rk,"A",{href:!0});var cit=s(MB);Xlo=r(cit,"BlenderbotTokenizer"),cit.forEach(t),zlo=r(Rk," or "),EB=n(Rk,"A",{href:!0});var fit=s(EB);Wlo=r(fit,"BlenderbotTokenizerFast"),fit.forEach(t),Qlo=r(Rk," (Blenderbot model)"),Rk.forEach(t),Hlo=i(S),sh=n(S,"LI",{});var BLe=s(sh);Mle=n(BLe,"STRONG",{});var mit=s(Mle);Ulo=r(mit,"blenderbot-small"),mit.forEach(t),Jlo=r(BLe," \u2014 "),CB=n(BLe,"A",{href:!0});var git=s(CB);Ylo=r(git,"BlenderbotSmallTokenizer"),git.forEach(t),Klo=r(BLe," (BlenderbotSmall model)"),BLe.forEach(t),Zlo=i(S),lh=n(S,"LI",{});var ILe=s(lh);Ele=n(ILe,"STRONG",{});var hit=s(Ele);eio=r(hit,"bloom"),hit.forEach(t),oio=r(ILe," \u2014 "),wB=n(ILe,"A",{href:!0});var pit=s(wB);rio=r(pit,"BloomTokenizerFast"),pit.forEach(t),tio=r(ILe," (BLOOM model)"),ILe.forEach(t),aio=i(S),ih=n(S,"LI",{});var NLe=s(ih);Cle=n(NLe,"STRONG",{});var _it=s(Cle);nio=r(_it,"byt5"),_it.forEach(t),sio=r(NLe," \u2014 "),AB=n(NLe,"A",{href:!0});var uit=s(AB);lio=r(uit,"ByT5Tokenizer"),uit.forEach(t),iio=r(NLe," (ByT5 model)"),NLe.forEach(t),dio=i(S),Wn=n(S,"LI",{});var Pk=s(Wn);wle=n(Pk,"STRONG",{});var bit=s(wle);cio=r(bit,"camembert"),bit.forEach(t),fio=r(Pk," \u2014 "),LB=n(Pk,"A",{href:!0});var vit=s(LB);mio=r(vit,"CamembertTokenizer"),vit.forEach(t),gio=r(Pk," or "),yB=n(Pk,"A",{href:!0});var Fit=s(yB);hio=r(Fit,"CamembertTokenizerFast"),Fit.forEach(t),pio=r(Pk," (CamemBERT model)"),Pk.forEach(t),_io=i(S),dh=n(S,"LI",{});var qLe=s(dh);Ale=n(qLe,"STRONG",{});var Tit=s(Ale);uio=r(Tit,"canine"),Tit.forEach(t),bio=r(qLe," \u2014 "),xB=n(qLe,"A",{href:!0});var Mit=s(xB);vio=r(Mit,"CanineTokenizer"),Mit.forEach(t),Fio=r(qLe," (CANINE model)"),qLe.forEach(t),Tio=i(S),Qn=n(S,"LI",{});var Bk=s(Qn);Lle=n(Bk,"STRONG",{});var Eit=s(Lle);Mio=r(Eit,"clip"),Eit.forEach(t),Eio=r(Bk," \u2014 "),$B=n(Bk,"A",{href:!0});var Cit=s($B);Cio=r(Cit,"CLIPTokenizer"),Cit.forEach(t),wio=r(Bk," or "),kB=n(Bk,"A",{href:!0});var wit=s(kB);Aio=r(wit,"CLIPTokenizerFast"),wit.forEach(t),Lio=r(Bk," (CLIP model)"),Bk.forEach(t),yio=i(S),Hn=n(S,"LI",{});var Ik=s(Hn);yle=n(Ik,"STRONG",{});var Ait=s(yle);xio=r(Ait,"codegen"),Ait.forEach(t),$io=r(Ik," \u2014 "),SB=n(Ik,"A",{href:!0});var Lit=s(SB);kio=r(Lit,"CodeGenTokenizer"),Lit.forEach(t),Sio=r(Ik," or "),RB=n(Ik,"A",{href:!0});var yit=s(RB);Rio=r(yit,"CodeGenTokenizerFast"),yit.forEach(t),Pio=r(Ik," (CodeGen model)"),Ik.forEach(t),Bio=i(S),Un=n(S,"LI",{});var Nk=s(Un);xle=n(Nk,"STRONG",{});var xit=s(xle);Iio=r(xit,"convbert"),xit.forEach(t),Nio=r(Nk," \u2014 "),PB=n(Nk,"A",{href:!0});var $it=s(PB);qio=r($it,"ConvBertTokenizer"),$it.forEach(t),jio=r(Nk," or "),BB=n(Nk,"A",{href:!0});var kit=s(BB);Dio=r(kit,"ConvBertTokenizerFast"),kit.forEach(t),Gio=r(Nk," (ConvBERT model)"),Nk.forEach(t),Oio=i(S),Jn=n(S,"LI",{});var qk=s(Jn);$le=n(qk,"STRONG",{});var Sit=s($le);Vio=r(Sit,"cpm"),Sit.forEach(t),Xio=r(qk," \u2014 "),IB=n(qk,"A",{href:!0});var Rit=s(IB);zio=r(Rit,"CpmTokenizer"),Rit.forEach(t),Wio=r(qk," or "),NB=n(qk,"A",{href:!0});var Pit=s(NB);Qio=r(Pit,"CpmTokenizerFast"),Pit.forEach(t),Hio=r(qk," (CPM model)"),qk.forEach(t),Uio=i(S),ch=n(S,"LI",{});var jLe=s(ch);kle=n(jLe,"STRONG",{});var Bit=s(kle);Jio=r(Bit,"ctrl"),Bit.forEach(t),Yio=r(jLe," \u2014 "),qB=n(jLe,"A",{href:!0});var Iit=s(qB);Kio=r(Iit,"CTRLTokenizer"),Iit.forEach(t),Zio=r(jLe," (CTRL model)"),jLe.forEach(t),edo=i(S),Yn=n(S,"LI",{});var jk=s(Yn);Sle=n(jk,"STRONG",{});var Nit=s(Sle);odo=r(Nit,"data2vec-text"),Nit.forEach(t),rdo=r(jk," \u2014 "),jB=n(jk,"A",{href:!0});var qit=s(jB);tdo=r(qit,"RobertaTokenizer"),qit.forEach(t),ado=r(jk," or "),DB=n(jk,"A",{href:!0});var jit=s(DB);ndo=r(jit,"RobertaTokenizerFast"),jit.forEach(t),sdo=r(jk," (Data2VecText model)"),jk.forEach(t),ldo=i(S),Kn=n(S,"LI",{});var Dk=s(Kn);Rle=n(Dk,"STRONG",{});var Dit=s(Rle);ido=r(Dit,"deberta"),Dit.forEach(t),ddo=r(Dk," \u2014 "),GB=n(Dk,"A",{href:!0});var Git=s(GB);cdo=r(Git,"DebertaTokenizer"),Git.forEach(t),fdo=r(Dk," or "),OB=n(Dk,"A",{href:!0});var Oit=s(OB);mdo=r(Oit,"DebertaTokenizerFast"),Oit.forEach(t),gdo=r(Dk," (DeBERTa model)"),Dk.forEach(t),hdo=i(S),Zn=n(S,"LI",{});var Gk=s(Zn);Ple=n(Gk,"STRONG",{});var Vit=s(Ple);pdo=r(Vit,"deberta-v2"),Vit.forEach(t),_do=r(Gk," \u2014 "),VB=n(Gk,"A",{href:!0});var Xit=s(VB);udo=r(Xit,"DebertaV2Tokenizer"),Xit.forEach(t),bdo=r(Gk," or "),XB=n(Gk,"A",{href:!0});var zit=s(XB);vdo=r(zit,"DebertaV2TokenizerFast"),zit.forEach(t),Fdo=r(Gk," (DeBERTa-v2 model)"),Gk.forEach(t),Tdo=i(S),es=n(S,"LI",{});var Ok=s(es);Ble=n(Ok,"STRONG",{});var Wit=s(Ble);Mdo=r(Wit,"distilbert"),Wit.forEach(t),Edo=r(Ok," \u2014 "),zB=n(Ok,"A",{href:!0});var Qit=s(zB);Cdo=r(Qit,"DistilBertTokenizer"),Qit.forEach(t),wdo=r(Ok," or "),WB=n(Ok,"A",{href:!0});var Hit=s(WB);Ado=r(Hit,"DistilBertTokenizerFast"),Hit.forEach(t),Ldo=r(Ok," (DistilBERT model)"),Ok.forEach(t),ydo=i(S),os=n(S,"LI",{});var Vk=s(os);Ile=n(Vk,"STRONG",{});var Uit=s(Ile);xdo=r(Uit,"dpr"),Uit.forEach(t),$do=r(Vk," \u2014 "),QB=n(Vk,"A",{href:!0});var Jit=s(QB);kdo=r(Jit,"DPRQuestionEncoderTokenizer"),Jit.forEach(t),Sdo=r(Vk," or "),HB=n(Vk,"A",{href:!0});var Yit=s(HB);Rdo=r(Yit,"DPRQuestionEncoderTokenizerFast"),Yit.forEach(t),Pdo=r(Vk," (DPR model)"),Vk.forEach(t),Bdo=i(S),rs=n(S,"LI",{});var Xk=s(rs);Nle=n(Xk,"STRONG",{});var Kit=s(Nle);Ido=r(Kit,"electra"),Kit.forEach(t),Ndo=r(Xk," \u2014 "),UB=n(Xk,"A",{href:!0});var Zit=s(UB);qdo=r(Zit,"ElectraTokenizer"),Zit.forEach(t),jdo=r(Xk," or "),JB=n(Xk,"A",{href:!0});var edt=s(JB);Ddo=r(edt,"ElectraTokenizerFast"),edt.forEach(t),Gdo=r(Xk," (ELECTRA model)"),Xk.forEach(t),Odo=i(S),fh=n(S,"LI",{});var DLe=s(fh);qle=n(DLe,"STRONG",{});var odt=s(qle);Vdo=r(odt,"flaubert"),odt.forEach(t),Xdo=r(DLe," \u2014 "),YB=n(DLe,"A",{href:!0});var rdt=s(YB);zdo=r(rdt,"FlaubertTokenizer"),rdt.forEach(t),Wdo=r(DLe," (FlauBERT model)"),DLe.forEach(t),Qdo=i(S),ts=n(S,"LI",{});var zk=s(ts);jle=n(zk,"STRONG",{});var tdt=s(jle);Hdo=r(tdt,"fnet"),tdt.forEach(t),Udo=r(zk," \u2014 "),KB=n(zk,"A",{href:!0});var adt=s(KB);Jdo=r(adt,"FNetTokenizer"),adt.forEach(t),Ydo=r(zk," or "),ZB=n(zk,"A",{href:!0});var ndt=s(ZB);Kdo=r(ndt,"FNetTokenizerFast"),ndt.forEach(t),Zdo=r(zk," (FNet model)"),zk.forEach(t),eco=i(S),mh=n(S,"LI",{});var GLe=s(mh);Dle=n(GLe,"STRONG",{});var sdt=s(Dle);oco=r(sdt,"fsmt"),sdt.forEach(t),rco=r(GLe," \u2014 "),eI=n(GLe,"A",{href:!0});var ldt=s(eI);tco=r(ldt,"FSMTTokenizer"),ldt.forEach(t),aco=r(GLe," (FairSeq Machine-Translation model)"),GLe.forEach(t),nco=i(S),as=n(S,"LI",{});var Wk=s(as);Gle=n(Wk,"STRONG",{});var idt=s(Gle);sco=r(idt,"funnel"),idt.forEach(t),lco=r(Wk," \u2014 "),oI=n(Wk,"A",{href:!0});var ddt=s(oI);ico=r(ddt,"FunnelTokenizer"),ddt.forEach(t),dco=r(Wk," or "),rI=n(Wk,"A",{href:!0});var cdt=s(rI);cco=r(cdt,"FunnelTokenizerFast"),cdt.forEach(t),fco=r(Wk," (Funnel Transformer model)"),Wk.forEach(t),mco=i(S),ns=n(S,"LI",{});var Qk=s(ns);Ole=n(Qk,"STRONG",{});var fdt=s(Ole);gco=r(fdt,"gpt2"),fdt.forEach(t),hco=r(Qk," \u2014 "),tI=n(Qk,"A",{href:!0});var mdt=s(tI);pco=r(mdt,"GPT2Tokenizer"),mdt.forEach(t),_co=r(Qk," or "),aI=n(Qk,"A",{href:!0});var gdt=s(aI);uco=r(gdt,"GPT2TokenizerFast"),gdt.forEach(t),bco=r(Qk," (OpenAI GPT-2 model)"),Qk.forEach(t),vco=i(S),ss=n(S,"LI",{});var Hk=s(ss);Vle=n(Hk,"STRONG",{});var hdt=s(Vle);Fco=r(hdt,"gpt_neo"),hdt.forEach(t),Tco=r(Hk," \u2014 "),nI=n(Hk,"A",{href:!0});var pdt=s(nI);Mco=r(pdt,"GPT2Tokenizer"),pdt.forEach(t),Eco=r(Hk," or "),sI=n(Hk,"A",{href:!0});var _dt=s(sI);Cco=r(_dt,"GPT2TokenizerFast"),_dt.forEach(t),wco=r(Hk," (GPT Neo model)"),Hk.forEach(t),Aco=i(S),gh=n(S,"LI",{});var OLe=s(gh);Xle=n(OLe,"STRONG",{});var udt=s(Xle);Lco=r(udt,"gpt_neox"),udt.forEach(t),yco=r(OLe," \u2014 "),lI=n(OLe,"A",{href:!0});var bdt=s(lI);xco=r(bdt,"GPTNeoXTokenizerFast"),bdt.forEach(t),$co=r(OLe," (GPT NeoX model)"),OLe.forEach(t),kco=i(S),ls=n(S,"LI",{});var Uk=s(ls);zle=n(Uk,"STRONG",{});var vdt=s(zle);Sco=r(vdt,"gptj"),vdt.forEach(t),Rco=r(Uk," \u2014 "),iI=n(Uk,"A",{href:!0});var Fdt=s(iI);Pco=r(Fdt,"GPT2Tokenizer"),Fdt.forEach(t),Bco=r(Uk," or "),dI=n(Uk,"A",{href:!0});var Tdt=s(dI);Ico=r(Tdt,"GPT2TokenizerFast"),Tdt.forEach(t),Nco=r(Uk," (GPT-J model)"),Uk.forEach(t),qco=i(S),is=n(S,"LI",{});var Jk=s(is);Wle=n(Jk,"STRONG",{});var Mdt=s(Wle);jco=r(Mdt,"groupvit"),Mdt.forEach(t),Dco=r(Jk," \u2014 "),cI=n(Jk,"A",{href:!0});var Edt=s(cI);Gco=r(Edt,"CLIPTokenizer"),Edt.forEach(t),Oco=r(Jk," or "),fI=n(Jk,"A",{href:!0});var Cdt=s(fI);Vco=r(Cdt,"CLIPTokenizerFast"),Cdt.forEach(t),Xco=r(Jk," (GroupViT model)"),Jk.forEach(t),zco=i(S),ds=n(S,"LI",{});var Yk=s(ds);Qle=n(Yk,"STRONG",{});var wdt=s(Qle);Wco=r(wdt,"herbert"),wdt.forEach(t),Qco=r(Yk," \u2014 "),mI=n(Yk,"A",{href:!0});var Adt=s(mI);Hco=r(Adt,"HerbertTokenizer"),Adt.forEach(t),Uco=r(Yk," or "),gI=n(Yk,"A",{href:!0});var Ldt=s(gI);Jco=r(Ldt,"HerbertTokenizerFast"),Ldt.forEach(t),Yco=r(Yk," (HerBERT model)"),Yk.forEach(t),Kco=i(S),hh=n(S,"LI",{});var VLe=s(hh);Hle=n(VLe,"STRONG",{});var ydt=s(Hle);Zco=r(ydt,"hubert"),ydt.forEach(t),efo=r(VLe," \u2014 "),hI=n(VLe,"A",{href:!0});var xdt=s(hI);ofo=r(xdt,"Wav2Vec2CTCTokenizer"),xdt.forEach(t),rfo=r(VLe," (Hubert model)"),VLe.forEach(t),tfo=i(S),cs=n(S,"LI",{});var Kk=s(cs);Ule=n(Kk,"STRONG",{});var $dt=s(Ule);afo=r($dt,"ibert"),$dt.forEach(t),nfo=r(Kk," \u2014 "),pI=n(Kk,"A",{href:!0});var kdt=s(pI);sfo=r(kdt,"RobertaTokenizer"),kdt.forEach(t),lfo=r(Kk," or "),_I=n(Kk,"A",{href:!0});var Sdt=s(_I);ifo=r(Sdt,"RobertaTokenizerFast"),Sdt.forEach(t),dfo=r(Kk," (I-BERT model)"),Kk.forEach(t),cfo=i(S),fs=n(S,"LI",{});var Zk=s(fs);Jle=n(Zk,"STRONG",{});var Rdt=s(Jle);ffo=r(Rdt,"layoutlm"),Rdt.forEach(t),mfo=r(Zk," \u2014 "),uI=n(Zk,"A",{href:!0});var Pdt=s(uI);gfo=r(Pdt,"LayoutLMTokenizer"),Pdt.forEach(t),hfo=r(Zk," or "),bI=n(Zk,"A",{href:!0});var Bdt=s(bI);pfo=r(Bdt,"LayoutLMTokenizerFast"),Bdt.forEach(t),_fo=r(Zk," (LayoutLM model)"),Zk.forEach(t),ufo=i(S),ms=n(S,"LI",{});var eS=s(ms);Yle=n(eS,"STRONG",{});var Idt=s(Yle);bfo=r(Idt,"layoutlmv2"),Idt.forEach(t),vfo=r(eS," \u2014 "),vI=n(eS,"A",{href:!0});var Ndt=s(vI);Ffo=r(Ndt,"LayoutLMv2Tokenizer"),Ndt.forEach(t),Tfo=r(eS," or "),FI=n(eS,"A",{href:!0});var qdt=s(FI);Mfo=r(qdt,"LayoutLMv2TokenizerFast"),qdt.forEach(t),Efo=r(eS," (LayoutLMv2 model)"),eS.forEach(t),Cfo=i(S),gs=n(S,"LI",{});var oS=s(gs);Kle=n(oS,"STRONG",{});var jdt=s(Kle);wfo=r(jdt,"layoutlmv3"),jdt.forEach(t),Afo=r(oS," \u2014 "),TI=n(oS,"A",{href:!0});var Ddt=s(TI);Lfo=r(Ddt,"LayoutLMv3Tokenizer"),Ddt.forEach(t),yfo=r(oS," or "),MI=n(oS,"A",{href:!0});var Gdt=s(MI);xfo=r(Gdt,"LayoutLMv3TokenizerFast"),Gdt.forEach(t),$fo=r(oS," (LayoutLMv3 model)"),oS.forEach(t),kfo=i(S),hs=n(S,"LI",{});var rS=s(hs);Zle=n(rS,"STRONG",{});var Odt=s(Zle);Sfo=r(Odt,"layoutxlm"),Odt.forEach(t),Rfo=r(rS," \u2014 "),EI=n(rS,"A",{href:!0});var Vdt=s(EI);Pfo=r(Vdt,"LayoutXLMTokenizer"),Vdt.forEach(t),Bfo=r(rS," or "),CI=n(rS,"A",{href:!0});var Xdt=s(CI);Ifo=r(Xdt,"LayoutXLMTokenizerFast"),Xdt.forEach(t),Nfo=r(rS," (LayoutXLM model)"),rS.forEach(t),qfo=i(S),ps=n(S,"LI",{});var tS=s(ps);eie=n(tS,"STRONG",{});var zdt=s(eie);jfo=r(zdt,"led"),zdt.forEach(t),Dfo=r(tS," \u2014 "),wI=n(tS,"A",{href:!0});var Wdt=s(wI);Gfo=r(Wdt,"LEDTokenizer"),Wdt.forEach(t),Ofo=r(tS," or "),AI=n(tS,"A",{href:!0});var Qdt=s(AI);Vfo=r(Qdt,"LEDTokenizerFast"),Qdt.forEach(t),Xfo=r(tS," (LED model)"),tS.forEach(t),zfo=i(S),_s=n(S,"LI",{});var aS=s(_s);oie=n(aS,"STRONG",{});var Hdt=s(oie);Wfo=r(Hdt,"longformer"),Hdt.forEach(t),Qfo=r(aS," \u2014 "),LI=n(aS,"A",{href:!0});var Udt=s(LI);Hfo=r(Udt,"LongformerTokenizer"),Udt.forEach(t),Ufo=r(aS," or "),yI=n(aS,"A",{href:!0});var Jdt=s(yI);Jfo=r(Jdt,"LongformerTokenizerFast"),Jdt.forEach(t),Yfo=r(aS," (Longformer model)"),aS.forEach(t),Kfo=i(S),us=n(S,"LI",{});var nS=s(us);rie=n(nS,"STRONG",{});var Ydt=s(rie);Zfo=r(Ydt,"longt5"),Ydt.forEach(t),emo=r(nS," \u2014 "),xI=n(nS,"A",{href:!0});var Kdt=s(xI);omo=r(Kdt,"T5Tokenizer"),Kdt.forEach(t),rmo=r(nS," or "),$I=n(nS,"A",{href:!0});var Zdt=s($I);tmo=r(Zdt,"T5TokenizerFast"),Zdt.forEach(t),amo=r(nS," (LongT5 model)"),nS.forEach(t),nmo=i(S),ph=n(S,"LI",{});var XLe=s(ph);tie=n(XLe,"STRONG",{});var ect=s(tie);smo=r(ect,"luke"),ect.forEach(t),lmo=r(XLe," \u2014 "),kI=n(XLe,"A",{href:!0});var oct=s(kI);imo=r(oct,"LukeTokenizer"),oct.forEach(t),dmo=r(XLe," (LUKE model)"),XLe.forEach(t),cmo=i(S),bs=n(S,"LI",{});var sS=s(bs);aie=n(sS,"STRONG",{});var rct=s(aie);fmo=r(rct,"lxmert"),rct.forEach(t),mmo=r(sS," \u2014 "),SI=n(sS,"A",{href:!0});var tct=s(SI);gmo=r(tct,"LxmertTokenizer"),tct.forEach(t),hmo=r(sS," or "),RI=n(sS,"A",{href:!0});var act=s(RI);pmo=r(act,"LxmertTokenizerFast"),act.forEach(t),_mo=r(sS," (LXMERT model)"),sS.forEach(t),umo=i(S),_h=n(S,"LI",{});var zLe=s(_h);nie=n(zLe,"STRONG",{});var nct=s(nie);bmo=r(nct,"m2m_100"),nct.forEach(t),vmo=r(zLe," \u2014 "),PI=n(zLe,"A",{href:!0});var sct=s(PI);Fmo=r(sct,"M2M100Tokenizer"),sct.forEach(t),Tmo=r(zLe," (M2M100 model)"),zLe.forEach(t),Mmo=i(S),uh=n(S,"LI",{});var WLe=s(uh);sie=n(WLe,"STRONG",{});var lct=s(sie);Emo=r(lct,"marian"),lct.forEach(t),Cmo=r(WLe," \u2014 "),BI=n(WLe,"A",{href:!0});var ict=s(BI);wmo=r(ict,"MarianTokenizer"),ict.forEach(t),Amo=r(WLe," (Marian model)"),WLe.forEach(t),Lmo=i(S),vs=n(S,"LI",{});var lS=s(vs);lie=n(lS,"STRONG",{});var dct=s(lie);ymo=r(dct,"mbart"),dct.forEach(t),xmo=r(lS," \u2014 "),II=n(lS,"A",{href:!0});var cct=s(II);$mo=r(cct,"MBartTokenizer"),cct.forEach(t),kmo=r(lS," or "),NI=n(lS,"A",{href:!0});var fct=s(NI);Smo=r(fct,"MBartTokenizerFast"),fct.forEach(t),Rmo=r(lS," (mBART model)"),lS.forEach(t),Pmo=i(S),Fs=n(S,"LI",{});var iS=s(Fs);iie=n(iS,"STRONG",{});var mct=s(iie);Bmo=r(mct,"mbart50"),mct.forEach(t),Imo=r(iS," \u2014 "),qI=n(iS,"A",{href:!0});var gct=s(qI);Nmo=r(gct,"MBart50Tokenizer"),gct.forEach(t),qmo=r(iS," or "),jI=n(iS,"A",{href:!0});var hct=s(jI);jmo=r(hct,"MBart50TokenizerFast"),hct.forEach(t),Dmo=r(iS," (mBART-50 model)"),iS.forEach(t),Gmo=i(S),Ts=n(S,"LI",{});var dS=s(Ts);die=n(dS,"STRONG",{});var pct=s(die);Omo=r(pct,"megatron-bert"),pct.forEach(t),Vmo=r(dS," \u2014 "),DI=n(dS,"A",{href:!0});var _ct=s(DI);Xmo=r(_ct,"BertTokenizer"),_ct.forEach(t),zmo=r(dS," or "),GI=n(dS,"A",{href:!0});var uct=s(GI);Wmo=r(uct,"BertTokenizerFast"),uct.forEach(t),Qmo=r(dS," (Megatron-BERT model)"),dS.forEach(t),Hmo=i(S),bh=n(S,"LI",{});var QLe=s(bh);cie=n(QLe,"STRONG",{});var bct=s(cie);Umo=r(bct,"mluke"),bct.forEach(t),Jmo=r(QLe," \u2014 "),OI=n(QLe,"A",{href:!0});var vct=s(OI);Ymo=r(vct,"MLukeTokenizer"),vct.forEach(t),Kmo=r(QLe," (mLUKE model)"),QLe.forEach(t),Zmo=i(S),Ms=n(S,"LI",{});var cS=s(Ms);fie=n(cS,"STRONG",{});var Fct=s(fie);ego=r(Fct,"mobilebert"),Fct.forEach(t),ogo=r(cS," \u2014 "),VI=n(cS,"A",{href:!0});var Tct=s(VI);rgo=r(Tct,"MobileBertTokenizer"),Tct.forEach(t),tgo=r(cS," or "),XI=n(cS,"A",{href:!0});var Mct=s(XI);ago=r(Mct,"MobileBertTokenizerFast"),Mct.forEach(t),ngo=r(cS," (MobileBERT model)"),cS.forEach(t),sgo=i(S),Es=n(S,"LI",{});var fS=s(Es);mie=n(fS,"STRONG",{});var Ect=s(mie);lgo=r(Ect,"mpnet"),Ect.forEach(t),igo=r(fS," \u2014 "),zI=n(fS,"A",{href:!0});var Cct=s(zI);dgo=r(Cct,"MPNetTokenizer"),Cct.forEach(t),cgo=r(fS," or "),WI=n(fS,"A",{href:!0});var wct=s(WI);fgo=r(wct,"MPNetTokenizerFast"),wct.forEach(t),mgo=r(fS," (MPNet model)"),fS.forEach(t),ggo=i(S),Cs=n(S,"LI",{});var mS=s(Cs);gie=n(mS,"STRONG",{});var Act=s(gie);hgo=r(Act,"mt5"),Act.forEach(t),pgo=r(mS," \u2014 "),QI=n(mS,"A",{href:!0});var Lct=s(QI);_go=r(Lct,"MT5Tokenizer"),Lct.forEach(t),ugo=r(mS," or "),HI=n(mS,"A",{href:!0});var yct=s(HI);bgo=r(yct,"MT5TokenizerFast"),yct.forEach(t),vgo=r(mS," (MT5 model)"),mS.forEach(t),Fgo=i(S),ws=n(S,"LI",{});var gS=s(ws);hie=n(gS,"STRONG",{});var xct=s(hie);Tgo=r(xct,"mvp"),xct.forEach(t),Mgo=r(gS," \u2014 "),UI=n(gS,"A",{href:!0});var $ct=s(UI);Ego=r($ct,"MvpTokenizer"),$ct.forEach(t),Cgo=r(gS," or "),JI=n(gS,"A",{href:!0});var kct=s(JI);wgo=r(kct,"MvpTokenizerFast"),kct.forEach(t),Ago=r(gS," (MVP model)"),gS.forEach(t),Lgo=i(S),As=n(S,"LI",{});var hS=s(As);pie=n(hS,"STRONG",{});var Sct=s(pie);ygo=r(Sct,"nezha"),Sct.forEach(t),xgo=r(hS," \u2014 "),YI=n(hS,"A",{href:!0});var Rct=s(YI);$go=r(Rct,"BertTokenizer"),Rct.forEach(t),kgo=r(hS," or "),KI=n(hS,"A",{href:!0});var Pct=s(KI);Sgo=r(Pct,"BertTokenizerFast"),Pct.forEach(t),Rgo=r(hS," (Nezha model)"),hS.forEach(t),Pgo=i(S),Ls=n(S,"LI",{});var pS=s(Ls);_ie=n(pS,"STRONG",{});var Bct=s(_ie);Bgo=r(Bct,"nystromformer"),Bct.forEach(t),Igo=r(pS," \u2014 "),ZI=n(pS,"A",{href:!0});var Ict=s(ZI);Ngo=r(Ict,"AlbertTokenizer"),Ict.forEach(t),qgo=r(pS," or "),eN=n(pS,"A",{href:!0});var Nct=s(eN);jgo=r(Nct,"AlbertTokenizerFast"),Nct.forEach(t),Dgo=r(pS," (Nystr\xF6mformer model)"),pS.forEach(t),Ggo=i(S),ys=n(S,"LI",{});var _S=s(ys);uie=n(_S,"STRONG",{});var qct=s(uie);Ogo=r(qct,"openai-gpt"),qct.forEach(t),Vgo=r(_S," \u2014 "),oN=n(_S,"A",{href:!0});var jct=s(oN);Xgo=r(jct,"OpenAIGPTTokenizer"),jct.forEach(t),zgo=r(_S," or "),rN=n(_S,"A",{href:!0});var Dct=s(rN);Wgo=r(Dct,"OpenAIGPTTokenizerFast"),Dct.forEach(t),Qgo=r(_S," (OpenAI GPT model)"),_S.forEach(t),Hgo=i(S),vh=n(S,"LI",{});var HLe=s(vh);bie=n(HLe,"STRONG",{});var Gct=s(bie);Ugo=r(Gct,"opt"),Gct.forEach(t),Jgo=r(HLe," \u2014 "),tN=n(HLe,"A",{href:!0});var Oct=s(tN);Ygo=r(Oct,"GPT2Tokenizer"),Oct.forEach(t),Kgo=r(HLe," (OPT model)"),HLe.forEach(t),Zgo=i(S),xs=n(S,"LI",{});var uS=s(xs);vie=n(uS,"STRONG",{});var Vct=s(vie);eho=r(Vct,"owlvit"),Vct.forEach(t),oho=r(uS," \u2014 "),aN=n(uS,"A",{href:!0});var Xct=s(aN);rho=r(Xct,"CLIPTokenizer"),Xct.forEach(t),tho=r(uS," or "),nN=n(uS,"A",{href:!0});var zct=s(nN);aho=r(zct,"CLIPTokenizerFast"),zct.forEach(t),nho=r(uS," (OWL-ViT model)"),uS.forEach(t),sho=i(S),$s=n(S,"LI",{});var bS=s($s);Fie=n(bS,"STRONG",{});var Wct=s(Fie);lho=r(Wct,"pegasus"),Wct.forEach(t),iho=r(bS," \u2014 "),sN=n(bS,"A",{href:!0});var Qct=s(sN);dho=r(Qct,"PegasusTokenizer"),Qct.forEach(t),cho=r(bS," or "),lN=n(bS,"A",{href:!0});var Hct=s(lN);fho=r(Hct,"PegasusTokenizerFast"),Hct.forEach(t),mho=r(bS," (Pegasus model)"),bS.forEach(t),gho=i(S),Fh=n(S,"LI",{});var ULe=s(Fh);Tie=n(ULe,"STRONG",{});var Uct=s(Tie);hho=r(Uct,"perceiver"),Uct.forEach(t),pho=r(ULe," \u2014 "),iN=n(ULe,"A",{href:!0});var Jct=s(iN);_ho=r(Jct,"PerceiverTokenizer"),Jct.forEach(t),uho=r(ULe," (Perceiver model)"),ULe.forEach(t),bho=i(S),Th=n(S,"LI",{});var JLe=s(Th);Mie=n(JLe,"STRONG",{});var Yct=s(Mie);vho=r(Yct,"phobert"),Yct.forEach(t),Fho=r(JLe," \u2014 "),dN=n(JLe,"A",{href:!0});var Kct=s(dN);Tho=r(Kct,"PhobertTokenizer"),Kct.forEach(t),Mho=r(JLe," (PhoBERT model)"),JLe.forEach(t),Eho=i(S),Mh=n(S,"LI",{});var YLe=s(Mh);Eie=n(YLe,"STRONG",{});var Zct=s(Eie);Cho=r(Zct,"plbart"),Zct.forEach(t),who=r(YLe," \u2014 "),cN=n(YLe,"A",{href:!0});var eft=s(cN);Aho=r(eft,"PLBartTokenizer"),eft.forEach(t),Lho=r(YLe," (PLBart model)"),YLe.forEach(t),yho=i(S),Eh=n(S,"LI",{});var KLe=s(Eh);Cie=n(KLe,"STRONG",{});var oft=s(Cie);xho=r(oft,"prophetnet"),oft.forEach(t),$ho=r(KLe," \u2014 "),fN=n(KLe,"A",{href:!0});var rft=s(fN);kho=r(rft,"ProphetNetTokenizer"),rft.forEach(t),Sho=r(KLe," (ProphetNet model)"),KLe.forEach(t),Rho=i(S),ks=n(S,"LI",{});var vS=s(ks);wie=n(vS,"STRONG",{});var tft=s(wie);Pho=r(tft,"qdqbert"),tft.forEach(t),Bho=r(vS," \u2014 "),mN=n(vS,"A",{href:!0});var aft=s(mN);Iho=r(aft,"BertTokenizer"),aft.forEach(t),Nho=r(vS," or "),gN=n(vS,"A",{href:!0});var nft=s(gN);qho=r(nft,"BertTokenizerFast"),nft.forEach(t),jho=r(vS," (QDQBert model)"),vS.forEach(t),Dho=i(S),Ch=n(S,"LI",{});var ZLe=s(Ch);Aie=n(ZLe,"STRONG",{});var sft=s(Aie);Gho=r(sft,"rag"),sft.forEach(t),Oho=r(ZLe," \u2014 "),hN=n(ZLe,"A",{href:!0});var lft=s(hN);Vho=r(lft,"RagTokenizer"),lft.forEach(t),Xho=r(ZLe," (RAG model)"),ZLe.forEach(t),zho=i(S),Ss=n(S,"LI",{});var FS=s(Ss);Lie=n(FS,"STRONG",{});var ift=s(Lie);Who=r(ift,"realm"),ift.forEach(t),Qho=r(FS," \u2014 "),pN=n(FS,"A",{href:!0});var dft=s(pN);Hho=r(dft,"RealmTokenizer"),dft.forEach(t),Uho=r(FS," or "),_N=n(FS,"A",{href:!0});var cft=s(_N);Jho=r(cft,"RealmTokenizerFast"),cft.forEach(t),Yho=r(FS," (REALM model)"),FS.forEach(t),Kho=i(S),Rs=n(S,"LI",{});var TS=s(Rs);yie=n(TS,"STRONG",{});var fft=s(yie);Zho=r(fft,"reformer"),fft.forEach(t),epo=r(TS," \u2014 "),uN=n(TS,"A",{href:!0});var mft=s(uN);opo=r(mft,"ReformerTokenizer"),mft.forEach(t),rpo=r(TS," or "),bN=n(TS,"A",{href:!0});var gft=s(bN);tpo=r(gft,"ReformerTokenizerFast"),gft.forEach(t),apo=r(TS," (Reformer model)"),TS.forEach(t),npo=i(S),Ps=n(S,"LI",{});var MS=s(Ps);xie=n(MS,"STRONG",{});var hft=s(xie);spo=r(hft,"rembert"),hft.forEach(t),lpo=r(MS," \u2014 "),vN=n(MS,"A",{href:!0});var pft=s(vN);ipo=r(pft,"RemBertTokenizer"),pft.forEach(t),dpo=r(MS," or "),FN=n(MS,"A",{href:!0});var _ft=s(FN);cpo=r(_ft,"RemBertTokenizerFast"),_ft.forEach(t),fpo=r(MS," (RemBERT model)"),MS.forEach(t),mpo=i(S),Bs=n(S,"LI",{});var ES=s(Bs);$ie=n(ES,"STRONG",{});var uft=s($ie);gpo=r(uft,"retribert"),uft.forEach(t),hpo=r(ES," \u2014 "),TN=n(ES,"A",{href:!0});var bft=s(TN);ppo=r(bft,"RetriBertTokenizer"),bft.forEach(t),_po=r(ES," or "),MN=n(ES,"A",{href:!0});var vft=s(MN);upo=r(vft,"RetriBertTokenizerFast"),vft.forEach(t),bpo=r(ES," (RetriBERT model)"),ES.forEach(t),vpo=i(S),Is=n(S,"LI",{});var CS=s(Is);kie=n(CS,"STRONG",{});var Fft=s(kie);Fpo=r(Fft,"roberta"),Fft.forEach(t),Tpo=r(CS," \u2014 "),EN=n(CS,"A",{href:!0});var Tft=s(EN);Mpo=r(Tft,"RobertaTokenizer"),Tft.forEach(t),Epo=r(CS," or "),CN=n(CS,"A",{href:!0});var Mft=s(CN);Cpo=r(Mft,"RobertaTokenizerFast"),Mft.forEach(t),wpo=r(CS," (RoBERTa model)"),CS.forEach(t),Apo=i(S),Ns=n(S,"LI",{});var wS=s(Ns);Sie=n(wS,"STRONG",{});var Eft=s(Sie);Lpo=r(Eft,"roformer"),Eft.forEach(t),ypo=r(wS," \u2014 "),wN=n(wS,"A",{href:!0});var Cft=s(wN);xpo=r(Cft,"RoFormerTokenizer"),Cft.forEach(t),$po=r(wS," or "),AN=n(wS,"A",{href:!0});var wft=s(AN);kpo=r(wft,"RoFormerTokenizerFast"),wft.forEach(t),Spo=r(wS," (RoFormer model)"),wS.forEach(t),Rpo=i(S),wh=n(S,"LI",{});var eye=s(wh);Rie=n(eye,"STRONG",{});var Aft=s(Rie);Ppo=r(Aft,"speech_to_text"),Aft.forEach(t),Bpo=r(eye," \u2014 "),LN=n(eye,"A",{href:!0});var Lft=s(LN);Ipo=r(Lft,"Speech2TextTokenizer"),Lft.forEach(t),Npo=r(eye," (Speech2Text model)"),eye.forEach(t),qpo=i(S),Ah=n(S,"LI",{});var oye=s(Ah);Pie=n(oye,"STRONG",{});var yft=s(Pie);jpo=r(yft,"speech_to_text_2"),yft.forEach(t),Dpo=r(oye," \u2014 "),yN=n(oye,"A",{href:!0});var xft=s(yN);Gpo=r(xft,"Speech2Text2Tokenizer"),xft.forEach(t),Opo=r(oye," (Speech2Text2 model)"),oye.forEach(t),Vpo=i(S),qs=n(S,"LI",{});var AS=s(qs);Bie=n(AS,"STRONG",{});var $ft=s(Bie);Xpo=r($ft,"splinter"),$ft.forEach(t),zpo=r(AS," \u2014 "),xN=n(AS,"A",{href:!0});var kft=s(xN);Wpo=r(kft,"SplinterTokenizer"),kft.forEach(t),Qpo=r(AS," or "),$N=n(AS,"A",{href:!0});var Sft=s($N);Hpo=r(Sft,"SplinterTokenizerFast"),Sft.forEach(t),Upo=r(AS," (Splinter model)"),AS.forEach(t),Jpo=i(S),js=n(S,"LI",{});var LS=s(js);Iie=n(LS,"STRONG",{});var Rft=s(Iie);Ypo=r(Rft,"squeezebert"),Rft.forEach(t),Kpo=r(LS," \u2014 "),kN=n(LS,"A",{href:!0});var Pft=s(kN);Zpo=r(Pft,"SqueezeBertTokenizer"),Pft.forEach(t),e_o=r(LS," or "),SN=n(LS,"A",{href:!0});var Bft=s(SN);o_o=r(Bft,"SqueezeBertTokenizerFast"),Bft.forEach(t),r_o=r(LS," (SqueezeBERT model)"),LS.forEach(t),t_o=i(S),Ds=n(S,"LI",{});var yS=s(Ds);Nie=n(yS,"STRONG",{});var Ift=s(Nie);a_o=r(Ift,"t5"),Ift.forEach(t),n_o=r(yS," \u2014 "),RN=n(yS,"A",{href:!0});var Nft=s(RN);s_o=r(Nft,"T5Tokenizer"),Nft.forEach(t),l_o=r(yS," or "),PN=n(yS,"A",{href:!0});var qft=s(PN);i_o=r(qft,"T5TokenizerFast"),qft.forEach(t),d_o=r(yS," (T5 model)"),yS.forEach(t),c_o=i(S),Lh=n(S,"LI",{});var rye=s(Lh);qie=n(rye,"STRONG",{});var jft=s(qie);f_o=r(jft,"tapas"),jft.forEach(t),m_o=r(rye," \u2014 "),BN=n(rye,"A",{href:!0});var Dft=s(BN);g_o=r(Dft,"TapasTokenizer"),Dft.forEach(t),h_o=r(rye," (TAPAS model)"),rye.forEach(t),p_o=i(S),yh=n(S,"LI",{});var tye=s(yh);jie=n(tye,"STRONG",{});var Gft=s(jie);__o=r(Gft,"tapex"),Gft.forEach(t),u_o=r(tye," \u2014 "),IN=n(tye,"A",{href:!0});var Oft=s(IN);b_o=r(Oft,"TapexTokenizer"),Oft.forEach(t),v_o=r(tye," (TAPEX model)"),tye.forEach(t),F_o=i(S),xh=n(S,"LI",{});var aye=s(xh);Die=n(aye,"STRONG",{});var Vft=s(Die);T_o=r(Vft,"transfo-xl"),Vft.forEach(t),M_o=r(aye," \u2014 "),NN=n(aye,"A",{href:!0});var Xft=s(NN);E_o=r(Xft,"TransfoXLTokenizer"),Xft.forEach(t),C_o=r(aye," (Transformer-XL model)"),aye.forEach(t),w_o=i(S),Gs=n(S,"LI",{});var xS=s(Gs);Gie=n(xS,"STRONG",{});var zft=s(Gie);A_o=r(zft,"vilt"),zft.forEach(t),L_o=r(xS," \u2014 "),qN=n(xS,"A",{href:!0});var Wft=s(qN);y_o=r(Wft,"BertTokenizer"),Wft.forEach(t),x_o=r(xS," or "),jN=n(xS,"A",{href:!0});var Qft=s(jN);$_o=r(Qft,"BertTokenizerFast"),Qft.forEach(t),k_o=r(xS," (ViLT model)"),xS.forEach(t),S_o=i(S),Os=n(S,"LI",{});var $S=s(Os);Oie=n($S,"STRONG",{});var Hft=s(Oie);R_o=r(Hft,"visual_bert"),Hft.forEach(t),P_o=r($S," \u2014 "),DN=n($S,"A",{href:!0});var Uft=s(DN);B_o=r(Uft,"BertTokenizer"),Uft.forEach(t),I_o=r($S," or "),GN=n($S,"A",{href:!0});var Jft=s(GN);N_o=r(Jft,"BertTokenizerFast"),Jft.forEach(t),q_o=r($S," (VisualBERT model)"),$S.forEach(t),j_o=i(S),$h=n(S,"LI",{});var nye=s($h);Vie=n(nye,"STRONG",{});var Yft=s(Vie);D_o=r(Yft,"wav2vec2"),Yft.forEach(t),G_o=r(nye," \u2014 "),ON=n(nye,"A",{href:!0});var Kft=s(ON);O_o=r(Kft,"Wav2Vec2CTCTokenizer"),Kft.forEach(t),V_o=r(nye," (Wav2Vec2 model)"),nye.forEach(t),X_o=i(S),kh=n(S,"LI",{});var sye=s(kh);Xie=n(sye,"STRONG",{});var Zft=s(Xie);z_o=r(Zft,"wav2vec2-conformer"),Zft.forEach(t),W_o=r(sye," \u2014 "),VN=n(sye,"A",{href:!0});var emt=s(VN);Q_o=r(emt,"Wav2Vec2CTCTokenizer"),emt.forEach(t),H_o=r(sye," (Wav2Vec2-Conformer model)"),sye.forEach(t),U_o=i(S),Sh=n(S,"LI",{});var lye=s(Sh);zie=n(lye,"STRONG",{});var omt=s(zie);J_o=r(omt,"wav2vec2_phoneme"),omt.forEach(t),Y_o=r(lye," \u2014 "),XN=n(lye,"A",{href:!0});var rmt=s(XN);K_o=r(rmt,"Wav2Vec2PhonemeCTCTokenizer"),rmt.forEach(t),Z_o=r(lye," (Wav2Vec2Phoneme model)"),lye.forEach(t),euo=i(S),Vs=n(S,"LI",{});var kS=s(Vs);Wie=n(kS,"STRONG",{});var tmt=s(Wie);ouo=r(tmt,"xglm"),tmt.forEach(t),ruo=r(kS," \u2014 "),zN=n(kS,"A",{href:!0});var amt=s(zN);tuo=r(amt,"XGLMTokenizer"),amt.forEach(t),auo=r(kS," or "),WN=n(kS,"A",{href:!0});var nmt=s(WN);nuo=r(nmt,"XGLMTokenizerFast"),nmt.forEach(t),suo=r(kS," (XGLM model)"),kS.forEach(t),luo=i(S),Rh=n(S,"LI",{});var iye=s(Rh);Qie=n(iye,"STRONG",{});var smt=s(Qie);iuo=r(smt,"xlm"),smt.forEach(t),duo=r(iye," \u2014 "),QN=n(iye,"A",{href:!0});var lmt=s(QN);cuo=r(lmt,"XLMTokenizer"),lmt.forEach(t),fuo=r(iye," (XLM model)"),iye.forEach(t),muo=i(S),Ph=n(S,"LI",{});var dye=s(Ph);Hie=n(dye,"STRONG",{});var imt=s(Hie);guo=r(imt,"xlm-prophetnet"),imt.forEach(t),huo=r(dye," \u2014 "),HN=n(dye,"A",{href:!0});var dmt=s(HN);puo=r(dmt,"XLMProphetNetTokenizer"),dmt.forEach(t),_uo=r(dye," (XLM-ProphetNet model)"),dye.forEach(t),uuo=i(S),Xs=n(S,"LI",{});var SS=s(Xs);Uie=n(SS,"STRONG",{});var cmt=s(Uie);buo=r(cmt,"xlm-roberta"),cmt.forEach(t),vuo=r(SS," \u2014 "),UN=n(SS,"A",{href:!0});var fmt=s(UN);Fuo=r(fmt,"XLMRobertaTokenizer"),fmt.forEach(t),Tuo=r(SS," or "),JN=n(SS,"A",{href:!0});var mmt=s(JN);Muo=r(mmt,"XLMRobertaTokenizerFast"),mmt.forEach(t),Euo=r(SS," (XLM-RoBERTa model)"),SS.forEach(t),Cuo=i(S),zs=n(S,"LI",{});var RS=s(zs);Jie=n(RS,"STRONG",{});var gmt=s(Jie);wuo=r(gmt,"xlm-roberta-xl"),gmt.forEach(t),Auo=r(RS," \u2014 "),YN=n(RS,"A",{href:!0});var hmt=s(YN);Luo=r(hmt,"RobertaTokenizer"),hmt.forEach(t),yuo=r(RS," or "),KN=n(RS,"A",{href:!0});var pmt=s(KN);xuo=r(pmt,"RobertaTokenizerFast"),pmt.forEach(t),$uo=r(RS," (XLM-RoBERTa-XL model)"),RS.forEach(t),kuo=i(S),Ws=n(S,"LI",{});var PS=s(Ws);Yie=n(PS,"STRONG",{});var _mt=s(Yie);Suo=r(_mt,"xlnet"),_mt.forEach(t),Ruo=r(PS," \u2014 "),ZN=n(PS,"A",{href:!0});var umt=s(ZN);Puo=r(umt,"XLNetTokenizer"),umt.forEach(t),Buo=r(PS," or "),eq=n(PS,"A",{href:!0});var bmt=s(eq);Iuo=r(bmt,"XLNetTokenizerFast"),bmt.forEach(t),Nuo=r(PS," (XLNet model)"),PS.forEach(t),quo=i(S),Qs=n(S,"LI",{});var BS=s(Qs);Kie=n(BS,"STRONG",{});var vmt=s(Kie);juo=r(vmt,"yoso"),vmt.forEach(t),Duo=r(BS," \u2014 "),oq=n(BS,"A",{href:!0});var Fmt=s(oq);Guo=r(Fmt,"AlbertTokenizer"),Fmt.forEach(t),Ouo=r(BS," or "),rq=n(BS,"A",{href:!0});var Tmt=s(rq);Vuo=r(Tmt,"AlbertTokenizerFast"),Tmt.forEach(t),Xuo=r(BS," (YOSO model)"),BS.forEach(t),S.forEach(t),zuo=i(el),T(Bh.$$.fragment,el),el.forEach(t),Wuo=i(Zs),Ih=n(Zs,"DIV",{class:!0});var yWe=s(Ih);T(M6.$$.fragment,yWe),Quo=i(yWe),Zie=n(yWe,"P",{});var Mmt=s(Zie);Huo=r(Mmt,"Register a new tokenizer in this mapping."),Mmt.forEach(t),yWe.forEach(t),Zs.forEach(t),LXe=i(f),ji=n(f,"H2",{class:!0});var xWe=s(ji);Nh=n(xWe,"A",{id:!0,class:!0,href:!0});var Emt=s(Nh);ede=n(Emt,"SPAN",{});var Cmt=s(ede);T(E6.$$.fragment,Cmt),Cmt.forEach(t),Emt.forEach(t),Uuo=i(xWe),ode=n(xWe,"SPAN",{});var wmt=s(ode);Juo=r(wmt,"AutoFeatureExtractor"),wmt.forEach(t),xWe.forEach(t),yXe=i(f),yo=n(f,"DIV",{class:!0});var ol=s(yo);T(C6.$$.fragment,ol),Yuo=i(ol),w6=n(ol,"P",{});var $We=s(w6);Kuo=r($We,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),tq=n($We,"A",{href:!0});var Amt=s(tq);Zuo=r(Amt,"AutoFeatureExtractor.from_pretrained()"),Amt.forEach(t),e1o=r($We," class method."),$We.forEach(t),o1o=i(ol),A6=n(ol,"P",{});var kWe=s(A6);r1o=r(kWe,"This class cannot be instantiated directly using "),rde=n(kWe,"CODE",{});var Lmt=s(rde);t1o=r(Lmt,"__init__()"),Lmt.forEach(t),a1o=r(kWe," (throws an error)."),kWe.forEach(t),n1o=i(ol),Ue=n(ol,"DIV",{class:!0});var na=s(Ue);T(L6.$$.fragment,na),s1o=i(na),tde=n(na,"P",{});var ymt=s(tde);l1o=r(ymt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),ymt.forEach(t),i1o=i(na),Ba=n(na,"P",{});var mw=s(Ba);d1o=r(mw,"The feature extractor class to instantiate is selected based on the "),ade=n(mw,"CODE",{});var xmt=s(ade);c1o=r(xmt,"model_type"),xmt.forEach(t),f1o=r(mw,` property of the config object
(either passed as an argument or loaded from `),nde=n(mw,"CODE",{});var $mt=s(nde);m1o=r($mt,"pretrained_model_name_or_path"),$mt.forEach(t),g1o=r(mw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),sde=n(mw,"CODE",{});var kmt=s(sde);h1o=r(kmt,"pretrained_model_name_or_path"),kmt.forEach(t),p1o=r(mw,":"),mw.forEach(t),_1o=i(na),J=n(na,"UL",{});var K=s(J);qh=n(K,"LI",{});var cye=s(qh);lde=n(cye,"STRONG",{});var Smt=s(lde);u1o=r(Smt,"beit"),Smt.forEach(t),b1o=r(cye," \u2014 "),aq=n(cye,"A",{href:!0});var Rmt=s(aq);v1o=r(Rmt,"BeitFeatureExtractor"),Rmt.forEach(t),F1o=r(cye," (BEiT model)"),cye.forEach(t),T1o=i(K),jh=n(K,"LI",{});var fye=s(jh);ide=n(fye,"STRONG",{});var Pmt=s(ide);M1o=r(Pmt,"clip"),Pmt.forEach(t),E1o=r(fye," \u2014 "),nq=n(fye,"A",{href:!0});var Bmt=s(nq);C1o=r(Bmt,"CLIPFeatureExtractor"),Bmt.forEach(t),w1o=r(fye," (CLIP model)"),fye.forEach(t),A1o=i(K),Dh=n(K,"LI",{});var mye=s(Dh);dde=n(mye,"STRONG",{});var Imt=s(dde);L1o=r(Imt,"convnext"),Imt.forEach(t),y1o=r(mye," \u2014 "),sq=n(mye,"A",{href:!0});var Nmt=s(sq);x1o=r(Nmt,"ConvNextFeatureExtractor"),Nmt.forEach(t),$1o=r(mye," (ConvNeXT model)"),mye.forEach(t),k1o=i(K),Gh=n(K,"LI",{});var gye=s(Gh);cde=n(gye,"STRONG",{});var qmt=s(cde);S1o=r(qmt,"cvt"),qmt.forEach(t),R1o=r(gye," \u2014 "),lq=n(gye,"A",{href:!0});var jmt=s(lq);P1o=r(jmt,"ConvNextFeatureExtractor"),jmt.forEach(t),B1o=r(gye," (CvT model)"),gye.forEach(t),I1o=i(K),Oh=n(K,"LI",{});var hye=s(Oh);fde=n(hye,"STRONG",{});var Dmt=s(fde);N1o=r(Dmt,"data2vec-audio"),Dmt.forEach(t),q1o=r(hye," \u2014 "),iq=n(hye,"A",{href:!0});var Gmt=s(iq);j1o=r(Gmt,"Wav2Vec2FeatureExtractor"),Gmt.forEach(t),D1o=r(hye," (Data2VecAudio model)"),hye.forEach(t),G1o=i(K),Vh=n(K,"LI",{});var pye=s(Vh);mde=n(pye,"STRONG",{});var Omt=s(mde);O1o=r(Omt,"data2vec-vision"),Omt.forEach(t),V1o=r(pye," \u2014 "),dq=n(pye,"A",{href:!0});var Vmt=s(dq);X1o=r(Vmt,"BeitFeatureExtractor"),Vmt.forEach(t),z1o=r(pye," (Data2VecVision model)"),pye.forEach(t),W1o=i(K),Xh=n(K,"LI",{});var _ye=s(Xh);gde=n(_ye,"STRONG",{});var Xmt=s(gde);Q1o=r(Xmt,"deit"),Xmt.forEach(t),H1o=r(_ye," \u2014 "),cq=n(_ye,"A",{href:!0});var zmt=s(cq);U1o=r(zmt,"DeiTFeatureExtractor"),zmt.forEach(t),J1o=r(_ye," (DeiT model)"),_ye.forEach(t),Y1o=i(K),zh=n(K,"LI",{});var uye=s(zh);hde=n(uye,"STRONG",{});var Wmt=s(hde);K1o=r(Wmt,"detr"),Wmt.forEach(t),Z1o=r(uye," \u2014 "),fq=n(uye,"A",{href:!0});var Qmt=s(fq);e2o=r(Qmt,"DetrFeatureExtractor"),Qmt.forEach(t),o2o=r(uye," (DETR model)"),uye.forEach(t),r2o=i(K),Wh=n(K,"LI",{});var bye=s(Wh);pde=n(bye,"STRONG",{});var Hmt=s(pde);t2o=r(Hmt,"dpt"),Hmt.forEach(t),a2o=r(bye," \u2014 "),mq=n(bye,"A",{href:!0});var Umt=s(mq);n2o=r(Umt,"DPTFeatureExtractor"),Umt.forEach(t),s2o=r(bye," (DPT model)"),bye.forEach(t),l2o=i(K),Qh=n(K,"LI",{});var vye=s(Qh);_de=n(vye,"STRONG",{});var Jmt=s(_de);i2o=r(Jmt,"flava"),Jmt.forEach(t),d2o=r(vye," \u2014 "),gq=n(vye,"A",{href:!0});var Ymt=s(gq);c2o=r(Ymt,"FlavaFeatureExtractor"),Ymt.forEach(t),f2o=r(vye," (FLAVA model)"),vye.forEach(t),m2o=i(K),Hh=n(K,"LI",{});var Fye=s(Hh);ude=n(Fye,"STRONG",{});var Kmt=s(ude);g2o=r(Kmt,"glpn"),Kmt.forEach(t),h2o=r(Fye," \u2014 "),hq=n(Fye,"A",{href:!0});var Zmt=s(hq);p2o=r(Zmt,"GLPNFeatureExtractor"),Zmt.forEach(t),_2o=r(Fye," (GLPN model)"),Fye.forEach(t),u2o=i(K),Uh=n(K,"LI",{});var Tye=s(Uh);bde=n(Tye,"STRONG",{});var egt=s(bde);b2o=r(egt,"groupvit"),egt.forEach(t),v2o=r(Tye," \u2014 "),pq=n(Tye,"A",{href:!0});var ogt=s(pq);F2o=r(ogt,"CLIPFeatureExtractor"),ogt.forEach(t),T2o=r(Tye," (GroupViT model)"),Tye.forEach(t),M2o=i(K),Jh=n(K,"LI",{});var Mye=s(Jh);vde=n(Mye,"STRONG",{});var rgt=s(vde);E2o=r(rgt,"hubert"),rgt.forEach(t),C2o=r(Mye," \u2014 "),_q=n(Mye,"A",{href:!0});var tgt=s(_q);w2o=r(tgt,"Wav2Vec2FeatureExtractor"),tgt.forEach(t),A2o=r(Mye," (Hubert model)"),Mye.forEach(t),L2o=i(K),Yh=n(K,"LI",{});var Eye=s(Yh);Fde=n(Eye,"STRONG",{});var agt=s(Fde);y2o=r(agt,"imagegpt"),agt.forEach(t),x2o=r(Eye," \u2014 "),uq=n(Eye,"A",{href:!0});var ngt=s(uq);$2o=r(ngt,"ImageGPTFeatureExtractor"),ngt.forEach(t),k2o=r(Eye," (ImageGPT model)"),Eye.forEach(t),S2o=i(K),Kh=n(K,"LI",{});var Cye=s(Kh);Tde=n(Cye,"STRONG",{});var sgt=s(Tde);R2o=r(sgt,"layoutlmv2"),sgt.forEach(t),P2o=r(Cye," \u2014 "),bq=n(Cye,"A",{href:!0});var lgt=s(bq);B2o=r(lgt,"LayoutLMv2FeatureExtractor"),lgt.forEach(t),I2o=r(Cye," (LayoutLMv2 model)"),Cye.forEach(t),N2o=i(K),Zh=n(K,"LI",{});var wye=s(Zh);Mde=n(wye,"STRONG",{});var igt=s(Mde);q2o=r(igt,"layoutlmv3"),igt.forEach(t),j2o=r(wye," \u2014 "),vq=n(wye,"A",{href:!0});var dgt=s(vq);D2o=r(dgt,"LayoutLMv3FeatureExtractor"),dgt.forEach(t),G2o=r(wye," (LayoutLMv3 model)"),wye.forEach(t),O2o=i(K),ep=n(K,"LI",{});var Aye=s(ep);Ede=n(Aye,"STRONG",{});var cgt=s(Ede);V2o=r(cgt,"levit"),cgt.forEach(t),X2o=r(Aye," \u2014 "),Fq=n(Aye,"A",{href:!0});var fgt=s(Fq);z2o=r(fgt,"LevitFeatureExtractor"),fgt.forEach(t),W2o=r(Aye," (LeViT model)"),Aye.forEach(t),Q2o=i(K),op=n(K,"LI",{});var Lye=s(op);Cde=n(Lye,"STRONG",{});var mgt=s(Cde);H2o=r(mgt,"maskformer"),mgt.forEach(t),U2o=r(Lye," \u2014 "),Tq=n(Lye,"A",{href:!0});var ggt=s(Tq);J2o=r(ggt,"MaskFormerFeatureExtractor"),ggt.forEach(t),Y2o=r(Lye," (MaskFormer model)"),Lye.forEach(t),K2o=i(K),rp=n(K,"LI",{});var yye=s(rp);wde=n(yye,"STRONG",{});var hgt=s(wde);Z2o=r(hgt,"mctct"),hgt.forEach(t),ebo=r(yye," \u2014 "),Mq=n(yye,"A",{href:!0});var pgt=s(Mq);obo=r(pgt,"MCTCTFeatureExtractor"),pgt.forEach(t),rbo=r(yye," (M-CTC-T model)"),yye.forEach(t),tbo=i(K),tp=n(K,"LI",{});var xye=s(tp);Ade=n(xye,"STRONG",{});var _gt=s(Ade);abo=r(_gt,"mobilevit"),_gt.forEach(t),nbo=r(xye," \u2014 "),Eq=n(xye,"A",{href:!0});var ugt=s(Eq);sbo=r(ugt,"MobileViTFeatureExtractor"),ugt.forEach(t),lbo=r(xye," (MobileViT model)"),xye.forEach(t),ibo=i(K),ap=n(K,"LI",{});var $ye=s(ap);Lde=n($ye,"STRONG",{});var bgt=s(Lde);dbo=r(bgt,"owlvit"),bgt.forEach(t),cbo=r($ye," \u2014 "),Cq=n($ye,"A",{href:!0});var vgt=s(Cq);fbo=r(vgt,"OwlViTFeatureExtractor"),vgt.forEach(t),mbo=r($ye," (OWL-ViT model)"),$ye.forEach(t),gbo=i(K),np=n(K,"LI",{});var kye=s(np);yde=n(kye,"STRONG",{});var Fgt=s(yde);hbo=r(Fgt,"perceiver"),Fgt.forEach(t),pbo=r(kye," \u2014 "),wq=n(kye,"A",{href:!0});var Tgt=s(wq);_bo=r(Tgt,"PerceiverFeatureExtractor"),Tgt.forEach(t),ubo=r(kye," (Perceiver model)"),kye.forEach(t),bbo=i(K),sp=n(K,"LI",{});var Sye=s(sp);xde=n(Sye,"STRONG",{});var Mgt=s(xde);vbo=r(Mgt,"poolformer"),Mgt.forEach(t),Fbo=r(Sye," \u2014 "),Aq=n(Sye,"A",{href:!0});var Egt=s(Aq);Tbo=r(Egt,"PoolFormerFeatureExtractor"),Egt.forEach(t),Mbo=r(Sye," (PoolFormer model)"),Sye.forEach(t),Ebo=i(K),lp=n(K,"LI",{});var Rye=s(lp);$de=n(Rye,"STRONG",{});var Cgt=s($de);Cbo=r(Cgt,"regnet"),Cgt.forEach(t),wbo=r(Rye," \u2014 "),Lq=n(Rye,"A",{href:!0});var wgt=s(Lq);Abo=r(wgt,"ConvNextFeatureExtractor"),wgt.forEach(t),Lbo=r(Rye," (RegNet model)"),Rye.forEach(t),ybo=i(K),ip=n(K,"LI",{});var Pye=s(ip);kde=n(Pye,"STRONG",{});var Agt=s(kde);xbo=r(Agt,"resnet"),Agt.forEach(t),$bo=r(Pye," \u2014 "),yq=n(Pye,"A",{href:!0});var Lgt=s(yq);kbo=r(Lgt,"ConvNextFeatureExtractor"),Lgt.forEach(t),Sbo=r(Pye," (ResNet model)"),Pye.forEach(t),Rbo=i(K),dp=n(K,"LI",{});var Bye=s(dp);Sde=n(Bye,"STRONG",{});var ygt=s(Sde);Pbo=r(ygt,"segformer"),ygt.forEach(t),Bbo=r(Bye," \u2014 "),xq=n(Bye,"A",{href:!0});var xgt=s(xq);Ibo=r(xgt,"SegformerFeatureExtractor"),xgt.forEach(t),Nbo=r(Bye," (SegFormer model)"),Bye.forEach(t),qbo=i(K),cp=n(K,"LI",{});var Iye=s(cp);Rde=n(Iye,"STRONG",{});var $gt=s(Rde);jbo=r($gt,"speech_to_text"),$gt.forEach(t),Dbo=r(Iye," \u2014 "),$q=n(Iye,"A",{href:!0});var kgt=s($q);Gbo=r(kgt,"Speech2TextFeatureExtractor"),kgt.forEach(t),Obo=r(Iye," (Speech2Text model)"),Iye.forEach(t),Vbo=i(K),fp=n(K,"LI",{});var Nye=s(fp);Pde=n(Nye,"STRONG",{});var Sgt=s(Pde);Xbo=r(Sgt,"swin"),Sgt.forEach(t),zbo=r(Nye," \u2014 "),kq=n(Nye,"A",{href:!0});var Rgt=s(kq);Wbo=r(Rgt,"ViTFeatureExtractor"),Rgt.forEach(t),Qbo=r(Nye," (Swin Transformer model)"),Nye.forEach(t),Hbo=i(K),mp=n(K,"LI",{});var qye=s(mp);Bde=n(qye,"STRONG",{});var Pgt=s(Bde);Ubo=r(Pgt,"van"),Pgt.forEach(t),Jbo=r(qye," \u2014 "),Sq=n(qye,"A",{href:!0});var Bgt=s(Sq);Ybo=r(Bgt,"ConvNextFeatureExtractor"),Bgt.forEach(t),Kbo=r(qye," (VAN model)"),qye.forEach(t),Zbo=i(K),gp=n(K,"LI",{});var jye=s(gp);Ide=n(jye,"STRONG",{});var Igt=s(Ide);evo=r(Igt,"vilt"),Igt.forEach(t),ovo=r(jye," \u2014 "),Rq=n(jye,"A",{href:!0});var Ngt=s(Rq);rvo=r(Ngt,"ViltFeatureExtractor"),Ngt.forEach(t),tvo=r(jye," (ViLT model)"),jye.forEach(t),avo=i(K),hp=n(K,"LI",{});var Dye=s(hp);Nde=n(Dye,"STRONG",{});var qgt=s(Nde);nvo=r(qgt,"vit"),qgt.forEach(t),svo=r(Dye," \u2014 "),Pq=n(Dye,"A",{href:!0});var jgt=s(Pq);lvo=r(jgt,"ViTFeatureExtractor"),jgt.forEach(t),ivo=r(Dye," (ViT model)"),Dye.forEach(t),dvo=i(K),pp=n(K,"LI",{});var Gye=s(pp);qde=n(Gye,"STRONG",{});var Dgt=s(qde);cvo=r(Dgt,"vit_mae"),Dgt.forEach(t),fvo=r(Gye," \u2014 "),Bq=n(Gye,"A",{href:!0});var Ggt=s(Bq);mvo=r(Ggt,"ViTFeatureExtractor"),Ggt.forEach(t),gvo=r(Gye," (ViTMAE model)"),Gye.forEach(t),hvo=i(K),_p=n(K,"LI",{});var Oye=s(_p);jde=n(Oye,"STRONG",{});var Ogt=s(jde);pvo=r(Ogt,"wav2vec2"),Ogt.forEach(t),_vo=r(Oye," \u2014 "),Iq=n(Oye,"A",{href:!0});var Vgt=s(Iq);uvo=r(Vgt,"Wav2Vec2FeatureExtractor"),Vgt.forEach(t),bvo=r(Oye," (Wav2Vec2 model)"),Oye.forEach(t),vvo=i(K),up=n(K,"LI",{});var Vye=s(up);Dde=n(Vye,"STRONG",{});var Xgt=s(Dde);Fvo=r(Xgt,"wav2vec2-conformer"),Xgt.forEach(t),Tvo=r(Vye," \u2014 "),Nq=n(Vye,"A",{href:!0});var zgt=s(Nq);Mvo=r(zgt,"Wav2Vec2FeatureExtractor"),zgt.forEach(t),Evo=r(Vye," (Wav2Vec2-Conformer model)"),Vye.forEach(t),Cvo=i(K),bp=n(K,"LI",{});var Xye=s(bp);Gde=n(Xye,"STRONG",{});var Wgt=s(Gde);wvo=r(Wgt,"yolos"),Wgt.forEach(t),Avo=r(Xye," \u2014 "),qq=n(Xye,"A",{href:!0});var Qgt=s(qq);Lvo=r(Qgt,"YolosFeatureExtractor"),Qgt.forEach(t),yvo=r(Xye," (YOLOS model)"),Xye.forEach(t),K.forEach(t),xvo=i(na),T(vp.$$.fragment,na),$vo=i(na),T(Fp.$$.fragment,na),na.forEach(t),kvo=i(ol),Tp=n(ol,"DIV",{class:!0});var SWe=s(Tp);T(y6.$$.fragment,SWe),Svo=i(SWe),Ode=n(SWe,"P",{});var Hgt=s(Ode);Rvo=r(Hgt,"Register a new feature extractor for this class."),Hgt.forEach(t),SWe.forEach(t),ol.forEach(t),xXe=i(f),Di=n(f,"H2",{class:!0});var RWe=s(Di);Mp=n(RWe,"A",{id:!0,class:!0,href:!0});var Ugt=s(Mp);Vde=n(Ugt,"SPAN",{});var Jgt=s(Vde);T(x6.$$.fragment,Jgt),Jgt.forEach(t),Ugt.forEach(t),Pvo=i(RWe),Xde=n(RWe,"SPAN",{});var Ygt=s(Xde);Bvo=r(Ygt,"AutoProcessor"),Ygt.forEach(t),RWe.forEach(t),$Xe=i(f),xo=n(f,"DIV",{class:!0});var rl=s(xo);T($6.$$.fragment,rl),Ivo=i(rl),k6=n(rl,"P",{});var PWe=s(k6);Nvo=r(PWe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),jq=n(PWe,"A",{href:!0});var Kgt=s(jq);qvo=r(Kgt,"AutoProcessor.from_pretrained()"),Kgt.forEach(t),jvo=r(PWe," class method."),PWe.forEach(t),Dvo=i(rl),S6=n(rl,"P",{});var BWe=s(S6);Gvo=r(BWe,"This class cannot be instantiated directly using "),zde=n(BWe,"CODE",{});var Zgt=s(zde);Ovo=r(Zgt,"__init__()"),Zgt.forEach(t),Vvo=r(BWe," (throws an error)."),BWe.forEach(t),Xvo=i(rl),Je=n(rl,"DIV",{class:!0});var sa=s(Je);T(R6.$$.fragment,sa),zvo=i(sa),Wde=n(sa,"P",{});var eht=s(Wde);Wvo=r(eht,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),eht.forEach(t),Qvo=i(sa),Gi=n(sa,"P",{});var Ore=s(Gi);Hvo=r(Ore,"The processor class to instantiate is selected based on the "),Qde=n(Ore,"CODE",{});var oht=s(Qde);Uvo=r(oht,"model_type"),oht.forEach(t),Jvo=r(Ore,` property of the config object (either
passed as an argument or loaded from `),Hde=n(Ore,"CODE",{});var rht=s(Hde);Yvo=r(rht,"pretrained_model_name_or_path"),rht.forEach(t),Kvo=r(Ore," if possible):"),Ore.forEach(t),Zvo=i(sa),fe=n(sa,"UL",{});var _e=s(fe);Ep=n(_e,"LI",{});var zye=s(Ep);Ude=n(zye,"STRONG",{});var tht=s(Ude);e3o=r(tht,"clip"),tht.forEach(t),o3o=r(zye," \u2014 "),Dq=n(zye,"A",{href:!0});var aht=s(Dq);r3o=r(aht,"CLIPProcessor"),aht.forEach(t),t3o=r(zye," (CLIP model)"),zye.forEach(t),a3o=i(_e),Cp=n(_e,"LI",{});var Wye=s(Cp);Jde=n(Wye,"STRONG",{});var nht=s(Jde);n3o=r(nht,"flava"),nht.forEach(t),s3o=r(Wye," \u2014 "),Yde=n(Wye,"CODE",{});var sht=s(Yde);l3o=r(sht,"FLAVAProcessor"),sht.forEach(t),i3o=r(Wye," (FLAVA model)"),Wye.forEach(t),d3o=i(_e),wp=n(_e,"LI",{});var Qye=s(wp);Kde=n(Qye,"STRONG",{});var lht=s(Kde);c3o=r(lht,"groupvit"),lht.forEach(t),f3o=r(Qye," \u2014 "),Gq=n(Qye,"A",{href:!0});var iht=s(Gq);m3o=r(iht,"CLIPProcessor"),iht.forEach(t),g3o=r(Qye," (GroupViT model)"),Qye.forEach(t),h3o=i(_e),Ap=n(_e,"LI",{});var Hye=s(Ap);Zde=n(Hye,"STRONG",{});var dht=s(Zde);p3o=r(dht,"layoutlmv2"),dht.forEach(t),_3o=r(Hye," \u2014 "),Oq=n(Hye,"A",{href:!0});var cht=s(Oq);u3o=r(cht,"LayoutLMv2Processor"),cht.forEach(t),b3o=r(Hye," (LayoutLMv2 model)"),Hye.forEach(t),v3o=i(_e),Lp=n(_e,"LI",{});var Uye=s(Lp);ece=n(Uye,"STRONG",{});var fht=s(ece);F3o=r(fht,"layoutlmv3"),fht.forEach(t),T3o=r(Uye," \u2014 "),Vq=n(Uye,"A",{href:!0});var mht=s(Vq);M3o=r(mht,"LayoutLMv3Processor"),mht.forEach(t),E3o=r(Uye," (LayoutLMv3 model)"),Uye.forEach(t),C3o=i(_e),yp=n(_e,"LI",{});var Jye=s(yp);oce=n(Jye,"STRONG",{});var ght=s(oce);w3o=r(ght,"layoutxlm"),ght.forEach(t),A3o=r(Jye," \u2014 "),Xq=n(Jye,"A",{href:!0});var hht=s(Xq);L3o=r(hht,"LayoutXLMProcessor"),hht.forEach(t),y3o=r(Jye," (LayoutXLM model)"),Jye.forEach(t),x3o=i(_e),xp=n(_e,"LI",{});var Yye=s(xp);rce=n(Yye,"STRONG",{});var pht=s(rce);$3o=r(pht,"owlvit"),pht.forEach(t),k3o=r(Yye," \u2014 "),zq=n(Yye,"A",{href:!0});var _ht=s(zq);S3o=r(_ht,"OwlViTProcessor"),_ht.forEach(t),R3o=r(Yye," (OWL-ViT model)"),Yye.forEach(t),P3o=i(_e),$p=n(_e,"LI",{});var Kye=s($p);tce=n(Kye,"STRONG",{});var uht=s(tce);B3o=r(uht,"sew"),uht.forEach(t),I3o=r(Kye," \u2014 "),Wq=n(Kye,"A",{href:!0});var bht=s(Wq);N3o=r(bht,"Wav2Vec2Processor"),bht.forEach(t),q3o=r(Kye," (SEW model)"),Kye.forEach(t),j3o=i(_e),kp=n(_e,"LI",{});var Zye=s(kp);ace=n(Zye,"STRONG",{});var vht=s(ace);D3o=r(vht,"sew-d"),vht.forEach(t),G3o=r(Zye," \u2014 "),Qq=n(Zye,"A",{href:!0});var Fht=s(Qq);O3o=r(Fht,"Wav2Vec2Processor"),Fht.forEach(t),V3o=r(Zye," (SEW-D model)"),Zye.forEach(t),X3o=i(_e),Sp=n(_e,"LI",{});var exe=s(Sp);nce=n(exe,"STRONG",{});var Tht=s(nce);z3o=r(Tht,"speech_to_text"),Tht.forEach(t),W3o=r(exe," \u2014 "),Hq=n(exe,"A",{href:!0});var Mht=s(Hq);Q3o=r(Mht,"Speech2TextProcessor"),Mht.forEach(t),H3o=r(exe," (Speech2Text model)"),exe.forEach(t),U3o=i(_e),Rp=n(_e,"LI",{});var oxe=s(Rp);sce=n(oxe,"STRONG",{});var Eht=s(sce);J3o=r(Eht,"speech_to_text_2"),Eht.forEach(t),Y3o=r(oxe," \u2014 "),Uq=n(oxe,"A",{href:!0});var Cht=s(Uq);K3o=r(Cht,"Speech2Text2Processor"),Cht.forEach(t),Z3o=r(oxe," (Speech2Text2 model)"),oxe.forEach(t),eFo=i(_e),Pp=n(_e,"LI",{});var rxe=s(Pp);lce=n(rxe,"STRONG",{});var wht=s(lce);oFo=r(wht,"trocr"),wht.forEach(t),rFo=r(rxe," \u2014 "),Jq=n(rxe,"A",{href:!0});var Aht=s(Jq);tFo=r(Aht,"TrOCRProcessor"),Aht.forEach(t),aFo=r(rxe," (TrOCR model)"),rxe.forEach(t),nFo=i(_e),Bp=n(_e,"LI",{});var txe=s(Bp);ice=n(txe,"STRONG",{});var Lht=s(ice);sFo=r(Lht,"unispeech"),Lht.forEach(t),lFo=r(txe," \u2014 "),Yq=n(txe,"A",{href:!0});var yht=s(Yq);iFo=r(yht,"Wav2Vec2Processor"),yht.forEach(t),dFo=r(txe," (UniSpeech model)"),txe.forEach(t),cFo=i(_e),Ip=n(_e,"LI",{});var axe=s(Ip);dce=n(axe,"STRONG",{});var xht=s(dce);fFo=r(xht,"unispeech-sat"),xht.forEach(t),mFo=r(axe," \u2014 "),Kq=n(axe,"A",{href:!0});var $ht=s(Kq);gFo=r($ht,"Wav2Vec2Processor"),$ht.forEach(t),hFo=r(axe," (UniSpeechSat model)"),axe.forEach(t),pFo=i(_e),Np=n(_e,"LI",{});var nxe=s(Np);cce=n(nxe,"STRONG",{});var kht=s(cce);_Fo=r(kht,"vilt"),kht.forEach(t),uFo=r(nxe," \u2014 "),Zq=n(nxe,"A",{href:!0});var Sht=s(Zq);bFo=r(Sht,"ViltProcessor"),Sht.forEach(t),vFo=r(nxe," (ViLT model)"),nxe.forEach(t),FFo=i(_e),qp=n(_e,"LI",{});var sxe=s(qp);fce=n(sxe,"STRONG",{});var Rht=s(fce);TFo=r(Rht,"vision-text-dual-encoder"),Rht.forEach(t),MFo=r(sxe," \u2014 "),ej=n(sxe,"A",{href:!0});var Pht=s(ej);EFo=r(Pht,"VisionTextDualEncoderProcessor"),Pht.forEach(t),CFo=r(sxe," (VisionTextDualEncoder model)"),sxe.forEach(t),wFo=i(_e),jp=n(_e,"LI",{});var lxe=s(jp);mce=n(lxe,"STRONG",{});var Bht=s(mce);AFo=r(Bht,"wav2vec2"),Bht.forEach(t),LFo=r(lxe," \u2014 "),oj=n(lxe,"A",{href:!0});var Iht=s(oj);yFo=r(Iht,"Wav2Vec2Processor"),Iht.forEach(t),xFo=r(lxe," (Wav2Vec2 model)"),lxe.forEach(t),$Fo=i(_e),Dp=n(_e,"LI",{});var ixe=s(Dp);gce=n(ixe,"STRONG",{});var Nht=s(gce);kFo=r(Nht,"wav2vec2-conformer"),Nht.forEach(t),SFo=r(ixe," \u2014 "),rj=n(ixe,"A",{href:!0});var qht=s(rj);RFo=r(qht,"Wav2Vec2Processor"),qht.forEach(t),PFo=r(ixe," (Wav2Vec2-Conformer model)"),ixe.forEach(t),BFo=i(_e),Gp=n(_e,"LI",{});var dxe=s(Gp);hce=n(dxe,"STRONG",{});var jht=s(hce);IFo=r(jht,"wavlm"),jht.forEach(t),NFo=r(dxe," \u2014 "),tj=n(dxe,"A",{href:!0});var Dht=s(tj);qFo=r(Dht,"Wav2Vec2Processor"),Dht.forEach(t),jFo=r(dxe," (WavLM model)"),dxe.forEach(t),_e.forEach(t),DFo=i(sa),T(Op.$$.fragment,sa),GFo=i(sa),T(Vp.$$.fragment,sa),sa.forEach(t),OFo=i(rl),Xp=n(rl,"DIV",{class:!0});var IWe=s(Xp);T(P6.$$.fragment,IWe),VFo=i(IWe),pce=n(IWe,"P",{});var Ght=s(pce);XFo=r(Ght,"Register a new processor for this class."),Ght.forEach(t),IWe.forEach(t),rl.forEach(t),kXe=i(f),Oi=n(f,"H2",{class:!0});var NWe=s(Oi);zp=n(NWe,"A",{id:!0,class:!0,href:!0});var Oht=s(zp);_ce=n(Oht,"SPAN",{});var Vht=s(_ce);T(B6.$$.fragment,Vht),Vht.forEach(t),Oht.forEach(t),zFo=i(NWe),uce=n(NWe,"SPAN",{});var Xht=s(uce);WFo=r(Xht,"AutoModel"),Xht.forEach(t),NWe.forEach(t),SXe=i(f),$o=n(f,"DIV",{class:!0});var tl=s($o);T(I6.$$.fragment,tl),QFo=i(tl),Vi=n(tl,"P",{});var Vre=s(Vi);HFo=r(Vre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),aj=n(Vre,"A",{href:!0});var zht=s(aj);UFo=r(zht,"from_pretrained()"),zht.forEach(t),JFo=r(Vre," class method or the "),nj=n(Vre,"A",{href:!0});var Wht=s(nj);YFo=r(Wht,"from_config()"),Wht.forEach(t),KFo=r(Vre,` class
method.`),Vre.forEach(t),ZFo=i(tl),N6=n(tl,"P",{});var qWe=s(N6);eTo=r(qWe,"This class cannot be instantiated directly using "),bce=n(qWe,"CODE",{});var Qht=s(bce);oTo=r(Qht,"__init__()"),Qht.forEach(t),rTo=r(qWe," (throws an error)."),qWe.forEach(t),tTo=i(tl),it=n(tl,"DIV",{class:!0});var gw=s(it);T(q6.$$.fragment,gw),aTo=i(gw),vce=n(gw,"P",{});var Hht=s(vce);nTo=r(Hht,"Instantiates one of the base model classes of the library from a configuration."),Hht.forEach(t),sTo=i(gw),Xi=n(gw,"P",{});var Xre=s(Xi);lTo=r(Xre,`Note:
Loading a model from its configuration file does `),Fce=n(Xre,"STRONG",{});var Uht=s(Fce);iTo=r(Uht,"not"),Uht.forEach(t),dTo=r(Xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),sj=n(Xre,"A",{href:!0});var Jht=s(sj);cTo=r(Jht,"from_pretrained()"),Jht.forEach(t),fTo=r(Xre," to load the model weights."),Xre.forEach(t),mTo=i(gw),T(Wp.$$.fragment,gw),gw.forEach(t),gTo=i(tl),Ye=n(tl,"DIV",{class:!0});var la=s(Ye);T(j6.$$.fragment,la),hTo=i(la),Tce=n(la,"P",{});var Yht=s(Tce);pTo=r(Yht,"Instantiate one of the base model classes of the library from a pretrained model."),Yht.forEach(t),_To=i(la),Ia=n(la,"P",{});var hw=s(Ia);uTo=r(hw,"The model class to instantiate is selected based on the "),Mce=n(hw,"CODE",{});var Kht=s(Mce);bTo=r(Kht,"model_type"),Kht.forEach(t),vTo=r(hw,` property of the config object (either
passed as an argument or loaded from `),Ece=n(hw,"CODE",{});var Zht=s(Ece);FTo=r(Zht,"pretrained_model_name_or_path"),Zht.forEach(t),TTo=r(hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cce=n(hw,"CODE",{});var ept=s(Cce);MTo=r(ept,"pretrained_model_name_or_path"),ept.forEach(t),ETo=r(hw,":"),hw.forEach(t),CTo=i(la),y=n(la,"UL",{});var x=s(y);Qp=n(x,"LI",{});var cxe=s(Qp);wce=n(cxe,"STRONG",{});var opt=s(wce);wTo=r(opt,"albert"),opt.forEach(t),ATo=r(cxe," \u2014 "),lj=n(cxe,"A",{href:!0});var rpt=s(lj);LTo=r(rpt,"AlbertModel"),rpt.forEach(t),yTo=r(cxe," (ALBERT model)"),cxe.forEach(t),xTo=i(x),Hp=n(x,"LI",{});var fxe=s(Hp);Ace=n(fxe,"STRONG",{});var tpt=s(Ace);$To=r(tpt,"bart"),tpt.forEach(t),kTo=r(fxe," \u2014 "),ij=n(fxe,"A",{href:!0});var apt=s(ij);STo=r(apt,"BartModel"),apt.forEach(t),RTo=r(fxe," (BART model)"),fxe.forEach(t),PTo=i(x),Up=n(x,"LI",{});var mxe=s(Up);Lce=n(mxe,"STRONG",{});var npt=s(Lce);BTo=r(npt,"beit"),npt.forEach(t),ITo=r(mxe," \u2014 "),dj=n(mxe,"A",{href:!0});var spt=s(dj);NTo=r(spt,"BeitModel"),spt.forEach(t),qTo=r(mxe," (BEiT model)"),mxe.forEach(t),jTo=i(x),Jp=n(x,"LI",{});var gxe=s(Jp);yce=n(gxe,"STRONG",{});var lpt=s(yce);DTo=r(lpt,"bert"),lpt.forEach(t),GTo=r(gxe," \u2014 "),cj=n(gxe,"A",{href:!0});var ipt=s(cj);OTo=r(ipt,"BertModel"),ipt.forEach(t),VTo=r(gxe," (BERT model)"),gxe.forEach(t),XTo=i(x),Yp=n(x,"LI",{});var hxe=s(Yp);xce=n(hxe,"STRONG",{});var dpt=s(xce);zTo=r(dpt,"bert-generation"),dpt.forEach(t),WTo=r(hxe," \u2014 "),fj=n(hxe,"A",{href:!0});var cpt=s(fj);QTo=r(cpt,"BertGenerationEncoder"),cpt.forEach(t),HTo=r(hxe," (Bert Generation model)"),hxe.forEach(t),UTo=i(x),Kp=n(x,"LI",{});var pxe=s(Kp);$ce=n(pxe,"STRONG",{});var fpt=s($ce);JTo=r(fpt,"big_bird"),fpt.forEach(t),YTo=r(pxe," \u2014 "),mj=n(pxe,"A",{href:!0});var mpt=s(mj);KTo=r(mpt,"BigBirdModel"),mpt.forEach(t),ZTo=r(pxe," (BigBird model)"),pxe.forEach(t),e7o=i(x),Zp=n(x,"LI",{});var _xe=s(Zp);kce=n(_xe,"STRONG",{});var gpt=s(kce);o7o=r(gpt,"bigbird_pegasus"),gpt.forEach(t),r7o=r(_xe," \u2014 "),gj=n(_xe,"A",{href:!0});var hpt=s(gj);t7o=r(hpt,"BigBirdPegasusModel"),hpt.forEach(t),a7o=r(_xe," (BigBird-Pegasus model)"),_xe.forEach(t),n7o=i(x),e_=n(x,"LI",{});var uxe=s(e_);Sce=n(uxe,"STRONG",{});var ppt=s(Sce);s7o=r(ppt,"blenderbot"),ppt.forEach(t),l7o=r(uxe," \u2014 "),hj=n(uxe,"A",{href:!0});var _pt=s(hj);i7o=r(_pt,"BlenderbotModel"),_pt.forEach(t),d7o=r(uxe," (Blenderbot model)"),uxe.forEach(t),c7o=i(x),o_=n(x,"LI",{});var bxe=s(o_);Rce=n(bxe,"STRONG",{});var upt=s(Rce);f7o=r(upt,"blenderbot-small"),upt.forEach(t),m7o=r(bxe," \u2014 "),pj=n(bxe,"A",{href:!0});var bpt=s(pj);g7o=r(bpt,"BlenderbotSmallModel"),bpt.forEach(t),h7o=r(bxe," (BlenderbotSmall model)"),bxe.forEach(t),p7o=i(x),r_=n(x,"LI",{});var vxe=s(r_);Pce=n(vxe,"STRONG",{});var vpt=s(Pce);_7o=r(vpt,"bloom"),vpt.forEach(t),u7o=r(vxe," \u2014 "),_j=n(vxe,"A",{href:!0});var Fpt=s(_j);b7o=r(Fpt,"BloomModel"),Fpt.forEach(t),v7o=r(vxe," (BLOOM model)"),vxe.forEach(t),F7o=i(x),t_=n(x,"LI",{});var Fxe=s(t_);Bce=n(Fxe,"STRONG",{});var Tpt=s(Bce);T7o=r(Tpt,"camembert"),Tpt.forEach(t),M7o=r(Fxe," \u2014 "),uj=n(Fxe,"A",{href:!0});var Mpt=s(uj);E7o=r(Mpt,"CamembertModel"),Mpt.forEach(t),C7o=r(Fxe," (CamemBERT model)"),Fxe.forEach(t),w7o=i(x),a_=n(x,"LI",{});var Txe=s(a_);Ice=n(Txe,"STRONG",{});var Ept=s(Ice);A7o=r(Ept,"canine"),Ept.forEach(t),L7o=r(Txe," \u2014 "),bj=n(Txe,"A",{href:!0});var Cpt=s(bj);y7o=r(Cpt,"CanineModel"),Cpt.forEach(t),x7o=r(Txe," (CANINE model)"),Txe.forEach(t),$7o=i(x),n_=n(x,"LI",{});var Mxe=s(n_);Nce=n(Mxe,"STRONG",{});var wpt=s(Nce);k7o=r(wpt,"clip"),wpt.forEach(t),S7o=r(Mxe," \u2014 "),vj=n(Mxe,"A",{href:!0});var Apt=s(vj);R7o=r(Apt,"CLIPModel"),Apt.forEach(t),P7o=r(Mxe," (CLIP model)"),Mxe.forEach(t),B7o=i(x),s_=n(x,"LI",{});var Exe=s(s_);qce=n(Exe,"STRONG",{});var Lpt=s(qce);I7o=r(Lpt,"codegen"),Lpt.forEach(t),N7o=r(Exe," \u2014 "),Fj=n(Exe,"A",{href:!0});var ypt=s(Fj);q7o=r(ypt,"CodeGenModel"),ypt.forEach(t),j7o=r(Exe," (CodeGen model)"),Exe.forEach(t),D7o=i(x),l_=n(x,"LI",{});var Cxe=s(l_);jce=n(Cxe,"STRONG",{});var xpt=s(jce);G7o=r(xpt,"convbert"),xpt.forEach(t),O7o=r(Cxe," \u2014 "),Tj=n(Cxe,"A",{href:!0});var $pt=s(Tj);V7o=r($pt,"ConvBertModel"),$pt.forEach(t),X7o=r(Cxe," (ConvBERT model)"),Cxe.forEach(t),z7o=i(x),i_=n(x,"LI",{});var wxe=s(i_);Dce=n(wxe,"STRONG",{});var kpt=s(Dce);W7o=r(kpt,"convnext"),kpt.forEach(t),Q7o=r(wxe," \u2014 "),Mj=n(wxe,"A",{href:!0});var Spt=s(Mj);H7o=r(Spt,"ConvNextModel"),Spt.forEach(t),U7o=r(wxe," (ConvNeXT model)"),wxe.forEach(t),J7o=i(x),d_=n(x,"LI",{});var Axe=s(d_);Gce=n(Axe,"STRONG",{});var Rpt=s(Gce);Y7o=r(Rpt,"ctrl"),Rpt.forEach(t),K7o=r(Axe," \u2014 "),Ej=n(Axe,"A",{href:!0});var Ppt=s(Ej);Z7o=r(Ppt,"CTRLModel"),Ppt.forEach(t),e8o=r(Axe," (CTRL model)"),Axe.forEach(t),o8o=i(x),c_=n(x,"LI",{});var Lxe=s(c_);Oce=n(Lxe,"STRONG",{});var Bpt=s(Oce);r8o=r(Bpt,"cvt"),Bpt.forEach(t),t8o=r(Lxe," \u2014 "),Cj=n(Lxe,"A",{href:!0});var Ipt=s(Cj);a8o=r(Ipt,"CvtModel"),Ipt.forEach(t),n8o=r(Lxe," (CvT model)"),Lxe.forEach(t),s8o=i(x),f_=n(x,"LI",{});var yxe=s(f_);Vce=n(yxe,"STRONG",{});var Npt=s(Vce);l8o=r(Npt,"data2vec-audio"),Npt.forEach(t),i8o=r(yxe," \u2014 "),wj=n(yxe,"A",{href:!0});var qpt=s(wj);d8o=r(qpt,"Data2VecAudioModel"),qpt.forEach(t),c8o=r(yxe," (Data2VecAudio model)"),yxe.forEach(t),f8o=i(x),m_=n(x,"LI",{});var xxe=s(m_);Xce=n(xxe,"STRONG",{});var jpt=s(Xce);m8o=r(jpt,"data2vec-text"),jpt.forEach(t),g8o=r(xxe," \u2014 "),Aj=n(xxe,"A",{href:!0});var Dpt=s(Aj);h8o=r(Dpt,"Data2VecTextModel"),Dpt.forEach(t),p8o=r(xxe," (Data2VecText model)"),xxe.forEach(t),_8o=i(x),g_=n(x,"LI",{});var $xe=s(g_);zce=n($xe,"STRONG",{});var Gpt=s(zce);u8o=r(Gpt,"data2vec-vision"),Gpt.forEach(t),b8o=r($xe," \u2014 "),Lj=n($xe,"A",{href:!0});var Opt=s(Lj);v8o=r(Opt,"Data2VecVisionModel"),Opt.forEach(t),F8o=r($xe," (Data2VecVision model)"),$xe.forEach(t),T8o=i(x),h_=n(x,"LI",{});var kxe=s(h_);Wce=n(kxe,"STRONG",{});var Vpt=s(Wce);M8o=r(Vpt,"deberta"),Vpt.forEach(t),E8o=r(kxe," \u2014 "),yj=n(kxe,"A",{href:!0});var Xpt=s(yj);C8o=r(Xpt,"DebertaModel"),Xpt.forEach(t),w8o=r(kxe," (DeBERTa model)"),kxe.forEach(t),A8o=i(x),p_=n(x,"LI",{});var Sxe=s(p_);Qce=n(Sxe,"STRONG",{});var zpt=s(Qce);L8o=r(zpt,"deberta-v2"),zpt.forEach(t),y8o=r(Sxe," \u2014 "),xj=n(Sxe,"A",{href:!0});var Wpt=s(xj);x8o=r(Wpt,"DebertaV2Model"),Wpt.forEach(t),$8o=r(Sxe," (DeBERTa-v2 model)"),Sxe.forEach(t),k8o=i(x),__=n(x,"LI",{});var Rxe=s(__);Hce=n(Rxe,"STRONG",{});var Qpt=s(Hce);S8o=r(Qpt,"decision_transformer"),Qpt.forEach(t),R8o=r(Rxe," \u2014 "),$j=n(Rxe,"A",{href:!0});var Hpt=s($j);P8o=r(Hpt,"DecisionTransformerModel"),Hpt.forEach(t),B8o=r(Rxe," (Decision Transformer model)"),Rxe.forEach(t),I8o=i(x),u_=n(x,"LI",{});var Pxe=s(u_);Uce=n(Pxe,"STRONG",{});var Upt=s(Uce);N8o=r(Upt,"deit"),Upt.forEach(t),q8o=r(Pxe," \u2014 "),kj=n(Pxe,"A",{href:!0});var Jpt=s(kj);j8o=r(Jpt,"DeiTModel"),Jpt.forEach(t),D8o=r(Pxe," (DeiT model)"),Pxe.forEach(t),G8o=i(x),b_=n(x,"LI",{});var Bxe=s(b_);Jce=n(Bxe,"STRONG",{});var Ypt=s(Jce);O8o=r(Ypt,"detr"),Ypt.forEach(t),V8o=r(Bxe," \u2014 "),Sj=n(Bxe,"A",{href:!0});var Kpt=s(Sj);X8o=r(Kpt,"DetrModel"),Kpt.forEach(t),z8o=r(Bxe," (DETR model)"),Bxe.forEach(t),W8o=i(x),v_=n(x,"LI",{});var Ixe=s(v_);Yce=n(Ixe,"STRONG",{});var Zpt=s(Yce);Q8o=r(Zpt,"distilbert"),Zpt.forEach(t),H8o=r(Ixe," \u2014 "),Rj=n(Ixe,"A",{href:!0});var e_t=s(Rj);U8o=r(e_t,"DistilBertModel"),e_t.forEach(t),J8o=r(Ixe," (DistilBERT model)"),Ixe.forEach(t),Y8o=i(x),F_=n(x,"LI",{});var Nxe=s(F_);Kce=n(Nxe,"STRONG",{});var o_t=s(Kce);K8o=r(o_t,"dpr"),o_t.forEach(t),Z8o=r(Nxe," \u2014 "),Pj=n(Nxe,"A",{href:!0});var r_t=s(Pj);e9o=r(r_t,"DPRQuestionEncoder"),r_t.forEach(t),o9o=r(Nxe," (DPR model)"),Nxe.forEach(t),r9o=i(x),T_=n(x,"LI",{});var qxe=s(T_);Zce=n(qxe,"STRONG",{});var t_t=s(Zce);t9o=r(t_t,"dpt"),t_t.forEach(t),a9o=r(qxe," \u2014 "),Bj=n(qxe,"A",{href:!0});var a_t=s(Bj);n9o=r(a_t,"DPTModel"),a_t.forEach(t),s9o=r(qxe," (DPT model)"),qxe.forEach(t),l9o=i(x),M_=n(x,"LI",{});var jxe=s(M_);efe=n(jxe,"STRONG",{});var n_t=s(efe);i9o=r(n_t,"electra"),n_t.forEach(t),d9o=r(jxe," \u2014 "),Ij=n(jxe,"A",{href:!0});var s_t=s(Ij);c9o=r(s_t,"ElectraModel"),s_t.forEach(t),f9o=r(jxe," (ELECTRA model)"),jxe.forEach(t),m9o=i(x),E_=n(x,"LI",{});var Dxe=s(E_);ofe=n(Dxe,"STRONG",{});var l_t=s(ofe);g9o=r(l_t,"flaubert"),l_t.forEach(t),h9o=r(Dxe," \u2014 "),Nj=n(Dxe,"A",{href:!0});var i_t=s(Nj);p9o=r(i_t,"FlaubertModel"),i_t.forEach(t),_9o=r(Dxe," (FlauBERT model)"),Dxe.forEach(t),u9o=i(x),C_=n(x,"LI",{});var Gxe=s(C_);rfe=n(Gxe,"STRONG",{});var d_t=s(rfe);b9o=r(d_t,"flava"),d_t.forEach(t),v9o=r(Gxe," \u2014 "),qj=n(Gxe,"A",{href:!0});var c_t=s(qj);F9o=r(c_t,"FlavaModel"),c_t.forEach(t),T9o=r(Gxe," (FLAVA model)"),Gxe.forEach(t),M9o=i(x),w_=n(x,"LI",{});var Oxe=s(w_);tfe=n(Oxe,"STRONG",{});var f_t=s(tfe);E9o=r(f_t,"fnet"),f_t.forEach(t),C9o=r(Oxe," \u2014 "),jj=n(Oxe,"A",{href:!0});var m_t=s(jj);w9o=r(m_t,"FNetModel"),m_t.forEach(t),A9o=r(Oxe," (FNet model)"),Oxe.forEach(t),L9o=i(x),A_=n(x,"LI",{});var Vxe=s(A_);afe=n(Vxe,"STRONG",{});var g_t=s(afe);y9o=r(g_t,"fsmt"),g_t.forEach(t),x9o=r(Vxe," \u2014 "),Dj=n(Vxe,"A",{href:!0});var h_t=s(Dj);$9o=r(h_t,"FSMTModel"),h_t.forEach(t),k9o=r(Vxe," (FairSeq Machine-Translation model)"),Vxe.forEach(t),S9o=i(x),Hs=n(x,"LI",{});var IS=s(Hs);nfe=n(IS,"STRONG",{});var p_t=s(nfe);R9o=r(p_t,"funnel"),p_t.forEach(t),P9o=r(IS," \u2014 "),Gj=n(IS,"A",{href:!0});var __t=s(Gj);B9o=r(__t,"FunnelModel"),__t.forEach(t),I9o=r(IS," or "),Oj=n(IS,"A",{href:!0});var u_t=s(Oj);N9o=r(u_t,"FunnelBaseModel"),u_t.forEach(t),q9o=r(IS," (Funnel Transformer model)"),IS.forEach(t),j9o=i(x),L_=n(x,"LI",{});var Xxe=s(L_);sfe=n(Xxe,"STRONG",{});var b_t=s(sfe);D9o=r(b_t,"glpn"),b_t.forEach(t),G9o=r(Xxe," \u2014 "),Vj=n(Xxe,"A",{href:!0});var v_t=s(Vj);O9o=r(v_t,"GLPNModel"),v_t.forEach(t),V9o=r(Xxe," (GLPN model)"),Xxe.forEach(t),X9o=i(x),y_=n(x,"LI",{});var zxe=s(y_);lfe=n(zxe,"STRONG",{});var F_t=s(lfe);z9o=r(F_t,"gpt2"),F_t.forEach(t),W9o=r(zxe," \u2014 "),Xj=n(zxe,"A",{href:!0});var T_t=s(Xj);Q9o=r(T_t,"GPT2Model"),T_t.forEach(t),H9o=r(zxe," (OpenAI GPT-2 model)"),zxe.forEach(t),U9o=i(x),x_=n(x,"LI",{});var Wxe=s(x_);ife=n(Wxe,"STRONG",{});var M_t=s(ife);J9o=r(M_t,"gpt_neo"),M_t.forEach(t),Y9o=r(Wxe," \u2014 "),zj=n(Wxe,"A",{href:!0});var E_t=s(zj);K9o=r(E_t,"GPTNeoModel"),E_t.forEach(t),Z9o=r(Wxe," (GPT Neo model)"),Wxe.forEach(t),eMo=i(x),$_=n(x,"LI",{});var Qxe=s($_);dfe=n(Qxe,"STRONG",{});var C_t=s(dfe);oMo=r(C_t,"gpt_neox"),C_t.forEach(t),rMo=r(Qxe," \u2014 "),Wj=n(Qxe,"A",{href:!0});var w_t=s(Wj);tMo=r(w_t,"GPTNeoXModel"),w_t.forEach(t),aMo=r(Qxe," (GPT NeoX model)"),Qxe.forEach(t),nMo=i(x),k_=n(x,"LI",{});var Hxe=s(k_);cfe=n(Hxe,"STRONG",{});var A_t=s(cfe);sMo=r(A_t,"gptj"),A_t.forEach(t),lMo=r(Hxe," \u2014 "),Qj=n(Hxe,"A",{href:!0});var L_t=s(Qj);iMo=r(L_t,"GPTJModel"),L_t.forEach(t),dMo=r(Hxe," (GPT-J model)"),Hxe.forEach(t),cMo=i(x),S_=n(x,"LI",{});var Uxe=s(S_);ffe=n(Uxe,"STRONG",{});var y_t=s(ffe);fMo=r(y_t,"groupvit"),y_t.forEach(t),mMo=r(Uxe," \u2014 "),Hj=n(Uxe,"A",{href:!0});var x_t=s(Hj);gMo=r(x_t,"GroupViTModel"),x_t.forEach(t),hMo=r(Uxe," (GroupViT model)"),Uxe.forEach(t),pMo=i(x),R_=n(x,"LI",{});var Jxe=s(R_);mfe=n(Jxe,"STRONG",{});var $_t=s(mfe);_Mo=r($_t,"hubert"),$_t.forEach(t),uMo=r(Jxe," \u2014 "),Uj=n(Jxe,"A",{href:!0});var k_t=s(Uj);bMo=r(k_t,"HubertModel"),k_t.forEach(t),vMo=r(Jxe," (Hubert model)"),Jxe.forEach(t),FMo=i(x),P_=n(x,"LI",{});var Yxe=s(P_);gfe=n(Yxe,"STRONG",{});var S_t=s(gfe);TMo=r(S_t,"ibert"),S_t.forEach(t),MMo=r(Yxe," \u2014 "),Jj=n(Yxe,"A",{href:!0});var R_t=s(Jj);EMo=r(R_t,"IBertModel"),R_t.forEach(t),CMo=r(Yxe," (I-BERT model)"),Yxe.forEach(t),wMo=i(x),B_=n(x,"LI",{});var Kxe=s(B_);hfe=n(Kxe,"STRONG",{});var P_t=s(hfe);AMo=r(P_t,"imagegpt"),P_t.forEach(t),LMo=r(Kxe," \u2014 "),Yj=n(Kxe,"A",{href:!0});var B_t=s(Yj);yMo=r(B_t,"ImageGPTModel"),B_t.forEach(t),xMo=r(Kxe," (ImageGPT model)"),Kxe.forEach(t),$Mo=i(x),I_=n(x,"LI",{});var Zxe=s(I_);pfe=n(Zxe,"STRONG",{});var I_t=s(pfe);kMo=r(I_t,"layoutlm"),I_t.forEach(t),SMo=r(Zxe," \u2014 "),Kj=n(Zxe,"A",{href:!0});var N_t=s(Kj);RMo=r(N_t,"LayoutLMModel"),N_t.forEach(t),PMo=r(Zxe," (LayoutLM model)"),Zxe.forEach(t),BMo=i(x),N_=n(x,"LI",{});var e$e=s(N_);_fe=n(e$e,"STRONG",{});var q_t=s(_fe);IMo=r(q_t,"layoutlmv2"),q_t.forEach(t),NMo=r(e$e," \u2014 "),Zj=n(e$e,"A",{href:!0});var j_t=s(Zj);qMo=r(j_t,"LayoutLMv2Model"),j_t.forEach(t),jMo=r(e$e," (LayoutLMv2 model)"),e$e.forEach(t),DMo=i(x),q_=n(x,"LI",{});var o$e=s(q_);ufe=n(o$e,"STRONG",{});var D_t=s(ufe);GMo=r(D_t,"layoutlmv3"),D_t.forEach(t),OMo=r(o$e," \u2014 "),eD=n(o$e,"A",{href:!0});var G_t=s(eD);VMo=r(G_t,"LayoutLMv3Model"),G_t.forEach(t),XMo=r(o$e," (LayoutLMv3 model)"),o$e.forEach(t),zMo=i(x),j_=n(x,"LI",{});var r$e=s(j_);bfe=n(r$e,"STRONG",{});var O_t=s(bfe);WMo=r(O_t,"led"),O_t.forEach(t),QMo=r(r$e," \u2014 "),oD=n(r$e,"A",{href:!0});var V_t=s(oD);HMo=r(V_t,"LEDModel"),V_t.forEach(t),UMo=r(r$e," (LED model)"),r$e.forEach(t),JMo=i(x),D_=n(x,"LI",{});var t$e=s(D_);vfe=n(t$e,"STRONG",{});var X_t=s(vfe);YMo=r(X_t,"levit"),X_t.forEach(t),KMo=r(t$e," \u2014 "),rD=n(t$e,"A",{href:!0});var z_t=s(rD);ZMo=r(z_t,"LevitModel"),z_t.forEach(t),e4o=r(t$e," (LeViT model)"),t$e.forEach(t),o4o=i(x),G_=n(x,"LI",{});var a$e=s(G_);Ffe=n(a$e,"STRONG",{});var W_t=s(Ffe);r4o=r(W_t,"longformer"),W_t.forEach(t),t4o=r(a$e," \u2014 "),tD=n(a$e,"A",{href:!0});var Q_t=s(tD);a4o=r(Q_t,"LongformerModel"),Q_t.forEach(t),n4o=r(a$e," (Longformer model)"),a$e.forEach(t),s4o=i(x),O_=n(x,"LI",{});var n$e=s(O_);Tfe=n(n$e,"STRONG",{});var H_t=s(Tfe);l4o=r(H_t,"longt5"),H_t.forEach(t),i4o=r(n$e," \u2014 "),aD=n(n$e,"A",{href:!0});var U_t=s(aD);d4o=r(U_t,"LongT5Model"),U_t.forEach(t),c4o=r(n$e," (LongT5 model)"),n$e.forEach(t),f4o=i(x),V_=n(x,"LI",{});var s$e=s(V_);Mfe=n(s$e,"STRONG",{});var J_t=s(Mfe);m4o=r(J_t,"luke"),J_t.forEach(t),g4o=r(s$e," \u2014 "),nD=n(s$e,"A",{href:!0});var Y_t=s(nD);h4o=r(Y_t,"LukeModel"),Y_t.forEach(t),p4o=r(s$e," (LUKE model)"),s$e.forEach(t),_4o=i(x),X_=n(x,"LI",{});var l$e=s(X_);Efe=n(l$e,"STRONG",{});var K_t=s(Efe);u4o=r(K_t,"lxmert"),K_t.forEach(t),b4o=r(l$e," \u2014 "),sD=n(l$e,"A",{href:!0});var Z_t=s(sD);v4o=r(Z_t,"LxmertModel"),Z_t.forEach(t),F4o=r(l$e," (LXMERT model)"),l$e.forEach(t),T4o=i(x),z_=n(x,"LI",{});var i$e=s(z_);Cfe=n(i$e,"STRONG",{});var eut=s(Cfe);M4o=r(eut,"m2m_100"),eut.forEach(t),E4o=r(i$e," \u2014 "),lD=n(i$e,"A",{href:!0});var out=s(lD);C4o=r(out,"M2M100Model"),out.forEach(t),w4o=r(i$e," (M2M100 model)"),i$e.forEach(t),A4o=i(x),W_=n(x,"LI",{});var d$e=s(W_);wfe=n(d$e,"STRONG",{});var rut=s(wfe);L4o=r(rut,"marian"),rut.forEach(t),y4o=r(d$e," \u2014 "),iD=n(d$e,"A",{href:!0});var tut=s(iD);x4o=r(tut,"MarianModel"),tut.forEach(t),$4o=r(d$e," (Marian model)"),d$e.forEach(t),k4o=i(x),Q_=n(x,"LI",{});var c$e=s(Q_);Afe=n(c$e,"STRONG",{});var aut=s(Afe);S4o=r(aut,"maskformer"),aut.forEach(t),R4o=r(c$e," \u2014 "),dD=n(c$e,"A",{href:!0});var nut=s(dD);P4o=r(nut,"MaskFormerModel"),nut.forEach(t),B4o=r(c$e," (MaskFormer model)"),c$e.forEach(t),I4o=i(x),H_=n(x,"LI",{});var f$e=s(H_);Lfe=n(f$e,"STRONG",{});var sut=s(Lfe);N4o=r(sut,"mbart"),sut.forEach(t),q4o=r(f$e," \u2014 "),cD=n(f$e,"A",{href:!0});var lut=s(cD);j4o=r(lut,"MBartModel"),lut.forEach(t),D4o=r(f$e," (mBART model)"),f$e.forEach(t),G4o=i(x),U_=n(x,"LI",{});var m$e=s(U_);yfe=n(m$e,"STRONG",{});var iut=s(yfe);O4o=r(iut,"mctct"),iut.forEach(t),V4o=r(m$e," \u2014 "),fD=n(m$e,"A",{href:!0});var dut=s(fD);X4o=r(dut,"MCTCTModel"),dut.forEach(t),z4o=r(m$e," (M-CTC-T model)"),m$e.forEach(t),W4o=i(x),J_=n(x,"LI",{});var g$e=s(J_);xfe=n(g$e,"STRONG",{});var cut=s(xfe);Q4o=r(cut,"megatron-bert"),cut.forEach(t),H4o=r(g$e," \u2014 "),mD=n(g$e,"A",{href:!0});var fut=s(mD);U4o=r(fut,"MegatronBertModel"),fut.forEach(t),J4o=r(g$e," (Megatron-BERT model)"),g$e.forEach(t),Y4o=i(x),Y_=n(x,"LI",{});var h$e=s(Y_);$fe=n(h$e,"STRONG",{});var mut=s($fe);K4o=r(mut,"mobilebert"),mut.forEach(t),Z4o=r(h$e," \u2014 "),gD=n(h$e,"A",{href:!0});var gut=s(gD);eEo=r(gut,"MobileBertModel"),gut.forEach(t),oEo=r(h$e," (MobileBERT model)"),h$e.forEach(t),rEo=i(x),K_=n(x,"LI",{});var p$e=s(K_);kfe=n(p$e,"STRONG",{});var hut=s(kfe);tEo=r(hut,"mobilevit"),hut.forEach(t),aEo=r(p$e," \u2014 "),hD=n(p$e,"A",{href:!0});var put=s(hD);nEo=r(put,"MobileViTModel"),put.forEach(t),sEo=r(p$e," (MobileViT model)"),p$e.forEach(t),lEo=i(x),Z_=n(x,"LI",{});var _$e=s(Z_);Sfe=n(_$e,"STRONG",{});var _ut=s(Sfe);iEo=r(_ut,"mpnet"),_ut.forEach(t),dEo=r(_$e," \u2014 "),pD=n(_$e,"A",{href:!0});var uut=s(pD);cEo=r(uut,"MPNetModel"),uut.forEach(t),fEo=r(_$e," (MPNet model)"),_$e.forEach(t),mEo=i(x),eu=n(x,"LI",{});var u$e=s(eu);Rfe=n(u$e,"STRONG",{});var but=s(Rfe);gEo=r(but,"mt5"),but.forEach(t),hEo=r(u$e," \u2014 "),_D=n(u$e,"A",{href:!0});var vut=s(_D);pEo=r(vut,"MT5Model"),vut.forEach(t),_Eo=r(u$e," (MT5 model)"),u$e.forEach(t),uEo=i(x),ou=n(x,"LI",{});var b$e=s(ou);Pfe=n(b$e,"STRONG",{});var Fut=s(Pfe);bEo=r(Fut,"mvp"),Fut.forEach(t),vEo=r(b$e," \u2014 "),uD=n(b$e,"A",{href:!0});var Tut=s(uD);FEo=r(Tut,"MvpModel"),Tut.forEach(t),TEo=r(b$e," (MVP model)"),b$e.forEach(t),MEo=i(x),ru=n(x,"LI",{});var v$e=s(ru);Bfe=n(v$e,"STRONG",{});var Mut=s(Bfe);EEo=r(Mut,"nezha"),Mut.forEach(t),CEo=r(v$e," \u2014 "),bD=n(v$e,"A",{href:!0});var Eut=s(bD);wEo=r(Eut,"NezhaModel"),Eut.forEach(t),AEo=r(v$e," (Nezha model)"),v$e.forEach(t),LEo=i(x),tu=n(x,"LI",{});var F$e=s(tu);Ife=n(F$e,"STRONG",{});var Cut=s(Ife);yEo=r(Cut,"nystromformer"),Cut.forEach(t),xEo=r(F$e," \u2014 "),vD=n(F$e,"A",{href:!0});var wut=s(vD);$Eo=r(wut,"NystromformerModel"),wut.forEach(t),kEo=r(F$e," (Nystr\xF6mformer model)"),F$e.forEach(t),SEo=i(x),au=n(x,"LI",{});var T$e=s(au);Nfe=n(T$e,"STRONG",{});var Aut=s(Nfe);REo=r(Aut,"openai-gpt"),Aut.forEach(t),PEo=r(T$e," \u2014 "),FD=n(T$e,"A",{href:!0});var Lut=s(FD);BEo=r(Lut,"OpenAIGPTModel"),Lut.forEach(t),IEo=r(T$e," (OpenAI GPT model)"),T$e.forEach(t),NEo=i(x),nu=n(x,"LI",{});var M$e=s(nu);qfe=n(M$e,"STRONG",{});var yut=s(qfe);qEo=r(yut,"opt"),yut.forEach(t),jEo=r(M$e," \u2014 "),TD=n(M$e,"A",{href:!0});var xut=s(TD);DEo=r(xut,"OPTModel"),xut.forEach(t),GEo=r(M$e," (OPT model)"),M$e.forEach(t),OEo=i(x),su=n(x,"LI",{});var E$e=s(su);jfe=n(E$e,"STRONG",{});var $ut=s(jfe);VEo=r($ut,"owlvit"),$ut.forEach(t),XEo=r(E$e," \u2014 "),MD=n(E$e,"A",{href:!0});var kut=s(MD);zEo=r(kut,"OwlViTModel"),kut.forEach(t),WEo=r(E$e," (OWL-ViT model)"),E$e.forEach(t),QEo=i(x),lu=n(x,"LI",{});var C$e=s(lu);Dfe=n(C$e,"STRONG",{});var Sut=s(Dfe);HEo=r(Sut,"pegasus"),Sut.forEach(t),UEo=r(C$e," \u2014 "),ED=n(C$e,"A",{href:!0});var Rut=s(ED);JEo=r(Rut,"PegasusModel"),Rut.forEach(t),YEo=r(C$e," (Pegasus model)"),C$e.forEach(t),KEo=i(x),iu=n(x,"LI",{});var w$e=s(iu);Gfe=n(w$e,"STRONG",{});var Put=s(Gfe);ZEo=r(Put,"perceiver"),Put.forEach(t),eCo=r(w$e," \u2014 "),CD=n(w$e,"A",{href:!0});var But=s(CD);oCo=r(But,"PerceiverModel"),But.forEach(t),rCo=r(w$e," (Perceiver model)"),w$e.forEach(t),tCo=i(x),du=n(x,"LI",{});var A$e=s(du);Ofe=n(A$e,"STRONG",{});var Iut=s(Ofe);aCo=r(Iut,"plbart"),Iut.forEach(t),nCo=r(A$e," \u2014 "),wD=n(A$e,"A",{href:!0});var Nut=s(wD);sCo=r(Nut,"PLBartModel"),Nut.forEach(t),lCo=r(A$e," (PLBart model)"),A$e.forEach(t),iCo=i(x),cu=n(x,"LI",{});var L$e=s(cu);Vfe=n(L$e,"STRONG",{});var qut=s(Vfe);dCo=r(qut,"poolformer"),qut.forEach(t),cCo=r(L$e," \u2014 "),AD=n(L$e,"A",{href:!0});var jut=s(AD);fCo=r(jut,"PoolFormerModel"),jut.forEach(t),mCo=r(L$e," (PoolFormer model)"),L$e.forEach(t),gCo=i(x),fu=n(x,"LI",{});var y$e=s(fu);Xfe=n(y$e,"STRONG",{});var Dut=s(Xfe);hCo=r(Dut,"prophetnet"),Dut.forEach(t),pCo=r(y$e," \u2014 "),LD=n(y$e,"A",{href:!0});var Gut=s(LD);_Co=r(Gut,"ProphetNetModel"),Gut.forEach(t),uCo=r(y$e," (ProphetNet model)"),y$e.forEach(t),bCo=i(x),mu=n(x,"LI",{});var x$e=s(mu);zfe=n(x$e,"STRONG",{});var Out=s(zfe);vCo=r(Out,"qdqbert"),Out.forEach(t),FCo=r(x$e," \u2014 "),yD=n(x$e,"A",{href:!0});var Vut=s(yD);TCo=r(Vut,"QDQBertModel"),Vut.forEach(t),MCo=r(x$e," (QDQBert model)"),x$e.forEach(t),ECo=i(x),gu=n(x,"LI",{});var $$e=s(gu);Wfe=n($$e,"STRONG",{});var Xut=s(Wfe);CCo=r(Xut,"reformer"),Xut.forEach(t),wCo=r($$e," \u2014 "),xD=n($$e,"A",{href:!0});var zut=s(xD);ACo=r(zut,"ReformerModel"),zut.forEach(t),LCo=r($$e," (Reformer model)"),$$e.forEach(t),yCo=i(x),hu=n(x,"LI",{});var k$e=s(hu);Qfe=n(k$e,"STRONG",{});var Wut=s(Qfe);xCo=r(Wut,"regnet"),Wut.forEach(t),$Co=r(k$e," \u2014 "),$D=n(k$e,"A",{href:!0});var Qut=s($D);kCo=r(Qut,"RegNetModel"),Qut.forEach(t),SCo=r(k$e," (RegNet model)"),k$e.forEach(t),RCo=i(x),pu=n(x,"LI",{});var S$e=s(pu);Hfe=n(S$e,"STRONG",{});var Hut=s(Hfe);PCo=r(Hut,"rembert"),Hut.forEach(t),BCo=r(S$e," \u2014 "),kD=n(S$e,"A",{href:!0});var Uut=s(kD);ICo=r(Uut,"RemBertModel"),Uut.forEach(t),NCo=r(S$e," (RemBERT model)"),S$e.forEach(t),qCo=i(x),_u=n(x,"LI",{});var R$e=s(_u);Ufe=n(R$e,"STRONG",{});var Jut=s(Ufe);jCo=r(Jut,"resnet"),Jut.forEach(t),DCo=r(R$e," \u2014 "),SD=n(R$e,"A",{href:!0});var Yut=s(SD);GCo=r(Yut,"ResNetModel"),Yut.forEach(t),OCo=r(R$e," (ResNet model)"),R$e.forEach(t),VCo=i(x),uu=n(x,"LI",{});var P$e=s(uu);Jfe=n(P$e,"STRONG",{});var Kut=s(Jfe);XCo=r(Kut,"retribert"),Kut.forEach(t),zCo=r(P$e," \u2014 "),RD=n(P$e,"A",{href:!0});var Zut=s(RD);WCo=r(Zut,"RetriBertModel"),Zut.forEach(t),QCo=r(P$e," (RetriBERT model)"),P$e.forEach(t),HCo=i(x),bu=n(x,"LI",{});var B$e=s(bu);Yfe=n(B$e,"STRONG",{});var e1t=s(Yfe);UCo=r(e1t,"roberta"),e1t.forEach(t),JCo=r(B$e," \u2014 "),PD=n(B$e,"A",{href:!0});var o1t=s(PD);YCo=r(o1t,"RobertaModel"),o1t.forEach(t),KCo=r(B$e," (RoBERTa model)"),B$e.forEach(t),ZCo=i(x),vu=n(x,"LI",{});var I$e=s(vu);Kfe=n(I$e,"STRONG",{});var r1t=s(Kfe);e5o=r(r1t,"roformer"),r1t.forEach(t),o5o=r(I$e," \u2014 "),BD=n(I$e,"A",{href:!0});var t1t=s(BD);r5o=r(t1t,"RoFormerModel"),t1t.forEach(t),t5o=r(I$e," (RoFormer model)"),I$e.forEach(t),a5o=i(x),Fu=n(x,"LI",{});var N$e=s(Fu);Zfe=n(N$e,"STRONG",{});var a1t=s(Zfe);n5o=r(a1t,"segformer"),a1t.forEach(t),s5o=r(N$e," \u2014 "),ID=n(N$e,"A",{href:!0});var n1t=s(ID);l5o=r(n1t,"SegformerModel"),n1t.forEach(t),i5o=r(N$e," (SegFormer model)"),N$e.forEach(t),d5o=i(x),Tu=n(x,"LI",{});var q$e=s(Tu);eme=n(q$e,"STRONG",{});var s1t=s(eme);c5o=r(s1t,"sew"),s1t.forEach(t),f5o=r(q$e," \u2014 "),ND=n(q$e,"A",{href:!0});var l1t=s(ND);m5o=r(l1t,"SEWModel"),l1t.forEach(t),g5o=r(q$e," (SEW model)"),q$e.forEach(t),h5o=i(x),Mu=n(x,"LI",{});var j$e=s(Mu);ome=n(j$e,"STRONG",{});var i1t=s(ome);p5o=r(i1t,"sew-d"),i1t.forEach(t),_5o=r(j$e," \u2014 "),qD=n(j$e,"A",{href:!0});var d1t=s(qD);u5o=r(d1t,"SEWDModel"),d1t.forEach(t),b5o=r(j$e," (SEW-D model)"),j$e.forEach(t),v5o=i(x),Eu=n(x,"LI",{});var D$e=s(Eu);rme=n(D$e,"STRONG",{});var c1t=s(rme);F5o=r(c1t,"speech_to_text"),c1t.forEach(t),T5o=r(D$e," \u2014 "),jD=n(D$e,"A",{href:!0});var f1t=s(jD);M5o=r(f1t,"Speech2TextModel"),f1t.forEach(t),E5o=r(D$e," (Speech2Text model)"),D$e.forEach(t),C5o=i(x),Cu=n(x,"LI",{});var G$e=s(Cu);tme=n(G$e,"STRONG",{});var m1t=s(tme);w5o=r(m1t,"splinter"),m1t.forEach(t),A5o=r(G$e," \u2014 "),DD=n(G$e,"A",{href:!0});var g1t=s(DD);L5o=r(g1t,"SplinterModel"),g1t.forEach(t),y5o=r(G$e," (Splinter model)"),G$e.forEach(t),x5o=i(x),wu=n(x,"LI",{});var O$e=s(wu);ame=n(O$e,"STRONG",{});var h1t=s(ame);$5o=r(h1t,"squeezebert"),h1t.forEach(t),k5o=r(O$e," \u2014 "),GD=n(O$e,"A",{href:!0});var p1t=s(GD);S5o=r(p1t,"SqueezeBertModel"),p1t.forEach(t),R5o=r(O$e," (SqueezeBERT model)"),O$e.forEach(t),P5o=i(x),Au=n(x,"LI",{});var V$e=s(Au);nme=n(V$e,"STRONG",{});var _1t=s(nme);B5o=r(_1t,"swin"),_1t.forEach(t),I5o=r(V$e," \u2014 "),OD=n(V$e,"A",{href:!0});var u1t=s(OD);N5o=r(u1t,"SwinModel"),u1t.forEach(t),q5o=r(V$e," (Swin Transformer model)"),V$e.forEach(t),j5o=i(x),Lu=n(x,"LI",{});var X$e=s(Lu);sme=n(X$e,"STRONG",{});var b1t=s(sme);D5o=r(b1t,"t5"),b1t.forEach(t),G5o=r(X$e," \u2014 "),VD=n(X$e,"A",{href:!0});var v1t=s(VD);O5o=r(v1t,"T5Model"),v1t.forEach(t),V5o=r(X$e," (T5 model)"),X$e.forEach(t),X5o=i(x),yu=n(x,"LI",{});var z$e=s(yu);lme=n(z$e,"STRONG",{});var F1t=s(lme);z5o=r(F1t,"tapas"),F1t.forEach(t),W5o=r(z$e," \u2014 "),XD=n(z$e,"A",{href:!0});var T1t=s(XD);Q5o=r(T1t,"TapasModel"),T1t.forEach(t),H5o=r(z$e," (TAPAS model)"),z$e.forEach(t),U5o=i(x),xu=n(x,"LI",{});var W$e=s(xu);ime=n(W$e,"STRONG",{});var M1t=s(ime);J5o=r(M1t,"trajectory_transformer"),M1t.forEach(t),Y5o=r(W$e," \u2014 "),zD=n(W$e,"A",{href:!0});var E1t=s(zD);K5o=r(E1t,"TrajectoryTransformerModel"),E1t.forEach(t),Z5o=r(W$e," (Trajectory Transformer model)"),W$e.forEach(t),e0o=i(x),$u=n(x,"LI",{});var Q$e=s($u);dme=n(Q$e,"STRONG",{});var C1t=s(dme);o0o=r(C1t,"transfo-xl"),C1t.forEach(t),r0o=r(Q$e," \u2014 "),WD=n(Q$e,"A",{href:!0});var w1t=s(WD);t0o=r(w1t,"TransfoXLModel"),w1t.forEach(t),a0o=r(Q$e," (Transformer-XL model)"),Q$e.forEach(t),n0o=i(x),ku=n(x,"LI",{});var H$e=s(ku);cme=n(H$e,"STRONG",{});var A1t=s(cme);s0o=r(A1t,"unispeech"),A1t.forEach(t),l0o=r(H$e," \u2014 "),QD=n(H$e,"A",{href:!0});var L1t=s(QD);i0o=r(L1t,"UniSpeechModel"),L1t.forEach(t),d0o=r(H$e," (UniSpeech model)"),H$e.forEach(t),c0o=i(x),Su=n(x,"LI",{});var U$e=s(Su);fme=n(U$e,"STRONG",{});var y1t=s(fme);f0o=r(y1t,"unispeech-sat"),y1t.forEach(t),m0o=r(U$e," \u2014 "),HD=n(U$e,"A",{href:!0});var x1t=s(HD);g0o=r(x1t,"UniSpeechSatModel"),x1t.forEach(t),h0o=r(U$e," (UniSpeechSat model)"),U$e.forEach(t),p0o=i(x),Ru=n(x,"LI",{});var J$e=s(Ru);mme=n(J$e,"STRONG",{});var $1t=s(mme);_0o=r($1t,"van"),$1t.forEach(t),u0o=r(J$e," \u2014 "),UD=n(J$e,"A",{href:!0});var k1t=s(UD);b0o=r(k1t,"VanModel"),k1t.forEach(t),v0o=r(J$e," (VAN model)"),J$e.forEach(t),F0o=i(x),Pu=n(x,"LI",{});var Y$e=s(Pu);gme=n(Y$e,"STRONG",{});var S1t=s(gme);T0o=r(S1t,"vilt"),S1t.forEach(t),M0o=r(Y$e," \u2014 "),JD=n(Y$e,"A",{href:!0});var R1t=s(JD);E0o=r(R1t,"ViltModel"),R1t.forEach(t),C0o=r(Y$e," (ViLT model)"),Y$e.forEach(t),w0o=i(x),Bu=n(x,"LI",{});var K$e=s(Bu);hme=n(K$e,"STRONG",{});var P1t=s(hme);A0o=r(P1t,"vision-text-dual-encoder"),P1t.forEach(t),L0o=r(K$e," \u2014 "),YD=n(K$e,"A",{href:!0});var B1t=s(YD);y0o=r(B1t,"VisionTextDualEncoderModel"),B1t.forEach(t),x0o=r(K$e," (VisionTextDualEncoder model)"),K$e.forEach(t),$0o=i(x),Iu=n(x,"LI",{});var Z$e=s(Iu);pme=n(Z$e,"STRONG",{});var I1t=s(pme);k0o=r(I1t,"visual_bert"),I1t.forEach(t),S0o=r(Z$e," \u2014 "),KD=n(Z$e,"A",{href:!0});var N1t=s(KD);R0o=r(N1t,"VisualBertModel"),N1t.forEach(t),P0o=r(Z$e," (VisualBERT model)"),Z$e.forEach(t),B0o=i(x),Nu=n(x,"LI",{});var eke=s(Nu);_me=n(eke,"STRONG",{});var q1t=s(_me);I0o=r(q1t,"vit"),q1t.forEach(t),N0o=r(eke," \u2014 "),ZD=n(eke,"A",{href:!0});var j1t=s(ZD);q0o=r(j1t,"ViTModel"),j1t.forEach(t),j0o=r(eke," (ViT model)"),eke.forEach(t),D0o=i(x),qu=n(x,"LI",{});var oke=s(qu);ume=n(oke,"STRONG",{});var D1t=s(ume);G0o=r(D1t,"vit_mae"),D1t.forEach(t),O0o=r(oke," \u2014 "),eG=n(oke,"A",{href:!0});var G1t=s(eG);V0o=r(G1t,"ViTMAEModel"),G1t.forEach(t),X0o=r(oke," (ViTMAE model)"),oke.forEach(t),z0o=i(x),ju=n(x,"LI",{});var rke=s(ju);bme=n(rke,"STRONG",{});var O1t=s(bme);W0o=r(O1t,"wav2vec2"),O1t.forEach(t),Q0o=r(rke," \u2014 "),oG=n(rke,"A",{href:!0});var V1t=s(oG);H0o=r(V1t,"Wav2Vec2Model"),V1t.forEach(t),U0o=r(rke," (Wav2Vec2 model)"),rke.forEach(t),J0o=i(x),Du=n(x,"LI",{});var tke=s(Du);vme=n(tke,"STRONG",{});var X1t=s(vme);Y0o=r(X1t,"wav2vec2-conformer"),X1t.forEach(t),K0o=r(tke," \u2014 "),rG=n(tke,"A",{href:!0});var z1t=s(rG);Z0o=r(z1t,"Wav2Vec2ConformerModel"),z1t.forEach(t),ewo=r(tke," (Wav2Vec2-Conformer model)"),tke.forEach(t),owo=i(x),Gu=n(x,"LI",{});var ake=s(Gu);Fme=n(ake,"STRONG",{});var W1t=s(Fme);rwo=r(W1t,"wavlm"),W1t.forEach(t),two=r(ake," \u2014 "),tG=n(ake,"A",{href:!0});var Q1t=s(tG);awo=r(Q1t,"WavLMModel"),Q1t.forEach(t),nwo=r(ake," (WavLM model)"),ake.forEach(t),swo=i(x),Ou=n(x,"LI",{});var nke=s(Ou);Tme=n(nke,"STRONG",{});var H1t=s(Tme);lwo=r(H1t,"xglm"),H1t.forEach(t),iwo=r(nke," \u2014 "),aG=n(nke,"A",{href:!0});var U1t=s(aG);dwo=r(U1t,"XGLMModel"),U1t.forEach(t),cwo=r(nke," (XGLM model)"),nke.forEach(t),fwo=i(x),Vu=n(x,"LI",{});var ske=s(Vu);Mme=n(ske,"STRONG",{});var J1t=s(Mme);mwo=r(J1t,"xlm"),J1t.forEach(t),gwo=r(ske," \u2014 "),nG=n(ske,"A",{href:!0});var Y1t=s(nG);hwo=r(Y1t,"XLMModel"),Y1t.forEach(t),pwo=r(ske," (XLM model)"),ske.forEach(t),_wo=i(x),Xu=n(x,"LI",{});var lke=s(Xu);Eme=n(lke,"STRONG",{});var K1t=s(Eme);uwo=r(K1t,"xlm-prophetnet"),K1t.forEach(t),bwo=r(lke," \u2014 "),sG=n(lke,"A",{href:!0});var Z1t=s(sG);vwo=r(Z1t,"XLMProphetNetModel"),Z1t.forEach(t),Fwo=r(lke," (XLM-ProphetNet model)"),lke.forEach(t),Two=i(x),zu=n(x,"LI",{});var ike=s(zu);Cme=n(ike,"STRONG",{});var e2t=s(Cme);Mwo=r(e2t,"xlm-roberta"),e2t.forEach(t),Ewo=r(ike," \u2014 "),lG=n(ike,"A",{href:!0});var o2t=s(lG);Cwo=r(o2t,"XLMRobertaModel"),o2t.forEach(t),wwo=r(ike," (XLM-RoBERTa model)"),ike.forEach(t),Awo=i(x),Wu=n(x,"LI",{});var dke=s(Wu);wme=n(dke,"STRONG",{});var r2t=s(wme);Lwo=r(r2t,"xlm-roberta-xl"),r2t.forEach(t),ywo=r(dke," \u2014 "),iG=n(dke,"A",{href:!0});var t2t=s(iG);xwo=r(t2t,"XLMRobertaXLModel"),t2t.forEach(t),$wo=r(dke," (XLM-RoBERTa-XL model)"),dke.forEach(t),kwo=i(x),Qu=n(x,"LI",{});var cke=s(Qu);Ame=n(cke,"STRONG",{});var a2t=s(Ame);Swo=r(a2t,"xlnet"),a2t.forEach(t),Rwo=r(cke," \u2014 "),dG=n(cke,"A",{href:!0});var n2t=s(dG);Pwo=r(n2t,"XLNetModel"),n2t.forEach(t),Bwo=r(cke," (XLNet model)"),cke.forEach(t),Iwo=i(x),Hu=n(x,"LI",{});var fke=s(Hu);Lme=n(fke,"STRONG",{});var s2t=s(Lme);Nwo=r(s2t,"yolos"),s2t.forEach(t),qwo=r(fke," \u2014 "),cG=n(fke,"A",{href:!0});var l2t=s(cG);jwo=r(l2t,"YolosModel"),l2t.forEach(t),Dwo=r(fke," (YOLOS model)"),fke.forEach(t),Gwo=i(x),Uu=n(x,"LI",{});var mke=s(Uu);yme=n(mke,"STRONG",{});var i2t=s(yme);Owo=r(i2t,"yoso"),i2t.forEach(t),Vwo=r(mke," \u2014 "),fG=n(mke,"A",{href:!0});var d2t=s(fG);Xwo=r(d2t,"YosoModel"),d2t.forEach(t),zwo=r(mke," (YOSO model)"),mke.forEach(t),x.forEach(t),Wwo=i(la),Ju=n(la,"P",{});var gke=s(Ju);Qwo=r(gke,"The model is set in evaluation mode by default using "),xme=n(gke,"CODE",{});var c2t=s(xme);Hwo=r(c2t,"model.eval()"),c2t.forEach(t),Uwo=r(gke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$me=n(gke,"CODE",{});var f2t=s($me);Jwo=r(f2t,"model.train()"),f2t.forEach(t),gke.forEach(t),Ywo=i(la),T(Yu.$$.fragment,la),la.forEach(t),tl.forEach(t),RXe=i(f),zi=n(f,"H2",{class:!0});var jWe=s(zi);Ku=n(jWe,"A",{id:!0,class:!0,href:!0});var m2t=s(Ku);kme=n(m2t,"SPAN",{});var g2t=s(kme);T(D6.$$.fragment,g2t),g2t.forEach(t),m2t.forEach(t),Kwo=i(jWe),Sme=n(jWe,"SPAN",{});var h2t=s(Sme);Zwo=r(h2t,"AutoModelForPreTraining"),h2t.forEach(t),jWe.forEach(t),PXe=i(f),ko=n(f,"DIV",{class:!0});var al=s(ko);T(G6.$$.fragment,al),eAo=i(al),Wi=n(al,"P",{});var zre=s(Wi);oAo=r(zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),mG=n(zre,"A",{href:!0});var p2t=s(mG);rAo=r(p2t,"from_pretrained()"),p2t.forEach(t),tAo=r(zre," class method or the "),gG=n(zre,"A",{href:!0});var _2t=s(gG);aAo=r(_2t,"from_config()"),_2t.forEach(t),nAo=r(zre,` class
method.`),zre.forEach(t),sAo=i(al),O6=n(al,"P",{});var DWe=s(O6);lAo=r(DWe,"This class cannot be instantiated directly using "),Rme=n(DWe,"CODE",{});var u2t=s(Rme);iAo=r(u2t,"__init__()"),u2t.forEach(t),dAo=r(DWe," (throws an error)."),DWe.forEach(t),cAo=i(al),dt=n(al,"DIV",{class:!0});var pw=s(dt);T(V6.$$.fragment,pw),fAo=i(pw),Pme=n(pw,"P",{});var b2t=s(Pme);mAo=r(b2t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),b2t.forEach(t),gAo=i(pw),Qi=n(pw,"P",{});var Wre=s(Qi);hAo=r(Wre,`Note:
Loading a model from its configuration file does `),Bme=n(Wre,"STRONG",{});var v2t=s(Bme);pAo=r(v2t,"not"),v2t.forEach(t),_Ao=r(Wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),hG=n(Wre,"A",{href:!0});var F2t=s(hG);uAo=r(F2t,"from_pretrained()"),F2t.forEach(t),bAo=r(Wre," to load the model weights."),Wre.forEach(t),vAo=i(pw),T(Zu.$$.fragment,pw),pw.forEach(t),FAo=i(al),Ke=n(al,"DIV",{class:!0});var ia=s(Ke);T(X6.$$.fragment,ia),TAo=i(ia),Ime=n(ia,"P",{});var T2t=s(Ime);MAo=r(T2t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),T2t.forEach(t),EAo=i(ia),Na=n(ia,"P",{});var _w=s(Na);CAo=r(_w,"The model class to instantiate is selected based on the "),Nme=n(_w,"CODE",{});var M2t=s(Nme);wAo=r(M2t,"model_type"),M2t.forEach(t),AAo=r(_w,` property of the config object (either
passed as an argument or loaded from `),qme=n(_w,"CODE",{});var E2t=s(qme);LAo=r(E2t,"pretrained_model_name_or_path"),E2t.forEach(t),yAo=r(_w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jme=n(_w,"CODE",{});var C2t=s(jme);xAo=r(C2t,"pretrained_model_name_or_path"),C2t.forEach(t),$Ao=r(_w,":"),_w.forEach(t),kAo=i(ia),G=n(ia,"UL",{});var O=s(G);e1=n(O,"LI",{});var hke=s(e1);Dme=n(hke,"STRONG",{});var w2t=s(Dme);SAo=r(w2t,"albert"),w2t.forEach(t),RAo=r(hke," \u2014 "),pG=n(hke,"A",{href:!0});var A2t=s(pG);PAo=r(A2t,"AlbertForPreTraining"),A2t.forEach(t),BAo=r(hke," (ALBERT model)"),hke.forEach(t),IAo=i(O),o1=n(O,"LI",{});var pke=s(o1);Gme=n(pke,"STRONG",{});var L2t=s(Gme);NAo=r(L2t,"bart"),L2t.forEach(t),qAo=r(pke," \u2014 "),_G=n(pke,"A",{href:!0});var y2t=s(_G);jAo=r(y2t,"BartForConditionalGeneration"),y2t.forEach(t),DAo=r(pke," (BART model)"),pke.forEach(t),GAo=i(O),r1=n(O,"LI",{});var _ke=s(r1);Ome=n(_ke,"STRONG",{});var x2t=s(Ome);OAo=r(x2t,"bert"),x2t.forEach(t),VAo=r(_ke," \u2014 "),uG=n(_ke,"A",{href:!0});var $2t=s(uG);XAo=r($2t,"BertForPreTraining"),$2t.forEach(t),zAo=r(_ke," (BERT model)"),_ke.forEach(t),WAo=i(O),t1=n(O,"LI",{});var uke=s(t1);Vme=n(uke,"STRONG",{});var k2t=s(Vme);QAo=r(k2t,"big_bird"),k2t.forEach(t),HAo=r(uke," \u2014 "),bG=n(uke,"A",{href:!0});var S2t=s(bG);UAo=r(S2t,"BigBirdForPreTraining"),S2t.forEach(t),JAo=r(uke," (BigBird model)"),uke.forEach(t),YAo=i(O),a1=n(O,"LI",{});var bke=s(a1);Xme=n(bke,"STRONG",{});var R2t=s(Xme);KAo=r(R2t,"bloom"),R2t.forEach(t),ZAo=r(bke," \u2014 "),vG=n(bke,"A",{href:!0});var P2t=s(vG);e6o=r(P2t,"BloomForCausalLM"),P2t.forEach(t),o6o=r(bke," (BLOOM model)"),bke.forEach(t),r6o=i(O),n1=n(O,"LI",{});var vke=s(n1);zme=n(vke,"STRONG",{});var B2t=s(zme);t6o=r(B2t,"camembert"),B2t.forEach(t),a6o=r(vke," \u2014 "),FG=n(vke,"A",{href:!0});var I2t=s(FG);n6o=r(I2t,"CamembertForMaskedLM"),I2t.forEach(t),s6o=r(vke," (CamemBERT model)"),vke.forEach(t),l6o=i(O),s1=n(O,"LI",{});var Fke=s(s1);Wme=n(Fke,"STRONG",{});var N2t=s(Wme);i6o=r(N2t,"ctrl"),N2t.forEach(t),d6o=r(Fke," \u2014 "),TG=n(Fke,"A",{href:!0});var q2t=s(TG);c6o=r(q2t,"CTRLLMHeadModel"),q2t.forEach(t),f6o=r(Fke," (CTRL model)"),Fke.forEach(t),m6o=i(O),l1=n(O,"LI",{});var Tke=s(l1);Qme=n(Tke,"STRONG",{});var j2t=s(Qme);g6o=r(j2t,"data2vec-text"),j2t.forEach(t),h6o=r(Tke," \u2014 "),MG=n(Tke,"A",{href:!0});var D2t=s(MG);p6o=r(D2t,"Data2VecTextForMaskedLM"),D2t.forEach(t),_6o=r(Tke," (Data2VecText model)"),Tke.forEach(t),u6o=i(O),i1=n(O,"LI",{});var Mke=s(i1);Hme=n(Mke,"STRONG",{});var G2t=s(Hme);b6o=r(G2t,"deberta"),G2t.forEach(t),v6o=r(Mke," \u2014 "),EG=n(Mke,"A",{href:!0});var O2t=s(EG);F6o=r(O2t,"DebertaForMaskedLM"),O2t.forEach(t),T6o=r(Mke," (DeBERTa model)"),Mke.forEach(t),M6o=i(O),d1=n(O,"LI",{});var Eke=s(d1);Ume=n(Eke,"STRONG",{});var V2t=s(Ume);E6o=r(V2t,"deberta-v2"),V2t.forEach(t),C6o=r(Eke," \u2014 "),CG=n(Eke,"A",{href:!0});var X2t=s(CG);w6o=r(X2t,"DebertaV2ForMaskedLM"),X2t.forEach(t),A6o=r(Eke," (DeBERTa-v2 model)"),Eke.forEach(t),L6o=i(O),c1=n(O,"LI",{});var Cke=s(c1);Jme=n(Cke,"STRONG",{});var z2t=s(Jme);y6o=r(z2t,"distilbert"),z2t.forEach(t),x6o=r(Cke," \u2014 "),wG=n(Cke,"A",{href:!0});var W2t=s(wG);$6o=r(W2t,"DistilBertForMaskedLM"),W2t.forEach(t),k6o=r(Cke," (DistilBERT model)"),Cke.forEach(t),S6o=i(O),f1=n(O,"LI",{});var wke=s(f1);Yme=n(wke,"STRONG",{});var Q2t=s(Yme);R6o=r(Q2t,"electra"),Q2t.forEach(t),P6o=r(wke," \u2014 "),AG=n(wke,"A",{href:!0});var H2t=s(AG);B6o=r(H2t,"ElectraForPreTraining"),H2t.forEach(t),I6o=r(wke," (ELECTRA model)"),wke.forEach(t),N6o=i(O),m1=n(O,"LI",{});var Ake=s(m1);Kme=n(Ake,"STRONG",{});var U2t=s(Kme);q6o=r(U2t,"flaubert"),U2t.forEach(t),j6o=r(Ake," \u2014 "),LG=n(Ake,"A",{href:!0});var J2t=s(LG);D6o=r(J2t,"FlaubertWithLMHeadModel"),J2t.forEach(t),G6o=r(Ake," (FlauBERT model)"),Ake.forEach(t),O6o=i(O),g1=n(O,"LI",{});var Lke=s(g1);Zme=n(Lke,"STRONG",{});var Y2t=s(Zme);V6o=r(Y2t,"flava"),Y2t.forEach(t),X6o=r(Lke," \u2014 "),yG=n(Lke,"A",{href:!0});var K2t=s(yG);z6o=r(K2t,"FlavaForPreTraining"),K2t.forEach(t),W6o=r(Lke," (FLAVA model)"),Lke.forEach(t),Q6o=i(O),h1=n(O,"LI",{});var yke=s(h1);ege=n(yke,"STRONG",{});var Z2t=s(ege);H6o=r(Z2t,"fnet"),Z2t.forEach(t),U6o=r(yke," \u2014 "),xG=n(yke,"A",{href:!0});var ebt=s(xG);J6o=r(ebt,"FNetForPreTraining"),ebt.forEach(t),Y6o=r(yke," (FNet model)"),yke.forEach(t),K6o=i(O),p1=n(O,"LI",{});var xke=s(p1);oge=n(xke,"STRONG",{});var obt=s(oge);Z6o=r(obt,"fsmt"),obt.forEach(t),eLo=r(xke," \u2014 "),$G=n(xke,"A",{href:!0});var rbt=s($G);oLo=r(rbt,"FSMTForConditionalGeneration"),rbt.forEach(t),rLo=r(xke," (FairSeq Machine-Translation model)"),xke.forEach(t),tLo=i(O),_1=n(O,"LI",{});var $ke=s(_1);rge=n($ke,"STRONG",{});var tbt=s(rge);aLo=r(tbt,"funnel"),tbt.forEach(t),nLo=r($ke," \u2014 "),kG=n($ke,"A",{href:!0});var abt=s(kG);sLo=r(abt,"FunnelForPreTraining"),abt.forEach(t),lLo=r($ke," (Funnel Transformer model)"),$ke.forEach(t),iLo=i(O),u1=n(O,"LI",{});var kke=s(u1);tge=n(kke,"STRONG",{});var nbt=s(tge);dLo=r(nbt,"gpt2"),nbt.forEach(t),cLo=r(kke," \u2014 "),SG=n(kke,"A",{href:!0});var sbt=s(SG);fLo=r(sbt,"GPT2LMHeadModel"),sbt.forEach(t),mLo=r(kke," (OpenAI GPT-2 model)"),kke.forEach(t),gLo=i(O),b1=n(O,"LI",{});var Ske=s(b1);age=n(Ske,"STRONG",{});var lbt=s(age);hLo=r(lbt,"ibert"),lbt.forEach(t),pLo=r(Ske," \u2014 "),RG=n(Ske,"A",{href:!0});var ibt=s(RG);_Lo=r(ibt,"IBertForMaskedLM"),ibt.forEach(t),uLo=r(Ske," (I-BERT model)"),Ske.forEach(t),bLo=i(O),v1=n(O,"LI",{});var Rke=s(v1);nge=n(Rke,"STRONG",{});var dbt=s(nge);vLo=r(dbt,"layoutlm"),dbt.forEach(t),FLo=r(Rke," \u2014 "),PG=n(Rke,"A",{href:!0});var cbt=s(PG);TLo=r(cbt,"LayoutLMForMaskedLM"),cbt.forEach(t),MLo=r(Rke," (LayoutLM model)"),Rke.forEach(t),ELo=i(O),F1=n(O,"LI",{});var Pke=s(F1);sge=n(Pke,"STRONG",{});var fbt=s(sge);CLo=r(fbt,"longformer"),fbt.forEach(t),wLo=r(Pke," \u2014 "),BG=n(Pke,"A",{href:!0});var mbt=s(BG);ALo=r(mbt,"LongformerForMaskedLM"),mbt.forEach(t),LLo=r(Pke," (Longformer model)"),Pke.forEach(t),yLo=i(O),T1=n(O,"LI",{});var Bke=s(T1);lge=n(Bke,"STRONG",{});var gbt=s(lge);xLo=r(gbt,"lxmert"),gbt.forEach(t),$Lo=r(Bke," \u2014 "),IG=n(Bke,"A",{href:!0});var hbt=s(IG);kLo=r(hbt,"LxmertForPreTraining"),hbt.forEach(t),SLo=r(Bke," (LXMERT model)"),Bke.forEach(t),RLo=i(O),M1=n(O,"LI",{});var Ike=s(M1);ige=n(Ike,"STRONG",{});var pbt=s(ige);PLo=r(pbt,"megatron-bert"),pbt.forEach(t),BLo=r(Ike," \u2014 "),NG=n(Ike,"A",{href:!0});var _bt=s(NG);ILo=r(_bt,"MegatronBertForPreTraining"),_bt.forEach(t),NLo=r(Ike," (Megatron-BERT model)"),Ike.forEach(t),qLo=i(O),E1=n(O,"LI",{});var Nke=s(E1);dge=n(Nke,"STRONG",{});var ubt=s(dge);jLo=r(ubt,"mobilebert"),ubt.forEach(t),DLo=r(Nke," \u2014 "),qG=n(Nke,"A",{href:!0});var bbt=s(qG);GLo=r(bbt,"MobileBertForPreTraining"),bbt.forEach(t),OLo=r(Nke," (MobileBERT model)"),Nke.forEach(t),VLo=i(O),C1=n(O,"LI",{});var qke=s(C1);cge=n(qke,"STRONG",{});var vbt=s(cge);XLo=r(vbt,"mpnet"),vbt.forEach(t),zLo=r(qke," \u2014 "),jG=n(qke,"A",{href:!0});var Fbt=s(jG);WLo=r(Fbt,"MPNetForMaskedLM"),Fbt.forEach(t),QLo=r(qke," (MPNet model)"),qke.forEach(t),HLo=i(O),w1=n(O,"LI",{});var jke=s(w1);fge=n(jke,"STRONG",{});var Tbt=s(fge);ULo=r(Tbt,"mvp"),Tbt.forEach(t),JLo=r(jke," \u2014 "),DG=n(jke,"A",{href:!0});var Mbt=s(DG);YLo=r(Mbt,"MvpForConditionalGeneration"),Mbt.forEach(t),KLo=r(jke," (MVP model)"),jke.forEach(t),ZLo=i(O),A1=n(O,"LI",{});var Dke=s(A1);mge=n(Dke,"STRONG",{});var Ebt=s(mge);eyo=r(Ebt,"nezha"),Ebt.forEach(t),oyo=r(Dke," \u2014 "),GG=n(Dke,"A",{href:!0});var Cbt=s(GG);ryo=r(Cbt,"NezhaForPreTraining"),Cbt.forEach(t),tyo=r(Dke," (Nezha model)"),Dke.forEach(t),ayo=i(O),L1=n(O,"LI",{});var Gke=s(L1);gge=n(Gke,"STRONG",{});var wbt=s(gge);nyo=r(wbt,"openai-gpt"),wbt.forEach(t),syo=r(Gke," \u2014 "),OG=n(Gke,"A",{href:!0});var Abt=s(OG);lyo=r(Abt,"OpenAIGPTLMHeadModel"),Abt.forEach(t),iyo=r(Gke," (OpenAI GPT model)"),Gke.forEach(t),dyo=i(O),y1=n(O,"LI",{});var Oke=s(y1);hge=n(Oke,"STRONG",{});var Lbt=s(hge);cyo=r(Lbt,"retribert"),Lbt.forEach(t),fyo=r(Oke," \u2014 "),VG=n(Oke,"A",{href:!0});var ybt=s(VG);myo=r(ybt,"RetriBertModel"),ybt.forEach(t),gyo=r(Oke," (RetriBERT model)"),Oke.forEach(t),hyo=i(O),x1=n(O,"LI",{});var Vke=s(x1);pge=n(Vke,"STRONG",{});var xbt=s(pge);pyo=r(xbt,"roberta"),xbt.forEach(t),_yo=r(Vke," \u2014 "),XG=n(Vke,"A",{href:!0});var $bt=s(XG);uyo=r($bt,"RobertaForMaskedLM"),$bt.forEach(t),byo=r(Vke," (RoBERTa model)"),Vke.forEach(t),vyo=i(O),$1=n(O,"LI",{});var Xke=s($1);_ge=n(Xke,"STRONG",{});var kbt=s(_ge);Fyo=r(kbt,"splinter"),kbt.forEach(t),Tyo=r(Xke," \u2014 "),zG=n(Xke,"A",{href:!0});var Sbt=s(zG);Myo=r(Sbt,"SplinterForPreTraining"),Sbt.forEach(t),Eyo=r(Xke," (Splinter model)"),Xke.forEach(t),Cyo=i(O),k1=n(O,"LI",{});var zke=s(k1);uge=n(zke,"STRONG",{});var Rbt=s(uge);wyo=r(Rbt,"squeezebert"),Rbt.forEach(t),Ayo=r(zke," \u2014 "),WG=n(zke,"A",{href:!0});var Pbt=s(WG);Lyo=r(Pbt,"SqueezeBertForMaskedLM"),Pbt.forEach(t),yyo=r(zke," (SqueezeBERT model)"),zke.forEach(t),xyo=i(O),S1=n(O,"LI",{});var Wke=s(S1);bge=n(Wke,"STRONG",{});var Bbt=s(bge);$yo=r(Bbt,"t5"),Bbt.forEach(t),kyo=r(Wke," \u2014 "),QG=n(Wke,"A",{href:!0});var Ibt=s(QG);Syo=r(Ibt,"T5ForConditionalGeneration"),Ibt.forEach(t),Ryo=r(Wke," (T5 model)"),Wke.forEach(t),Pyo=i(O),R1=n(O,"LI",{});var Qke=s(R1);vge=n(Qke,"STRONG",{});var Nbt=s(vge);Byo=r(Nbt,"tapas"),Nbt.forEach(t),Iyo=r(Qke," \u2014 "),HG=n(Qke,"A",{href:!0});var qbt=s(HG);Nyo=r(qbt,"TapasForMaskedLM"),qbt.forEach(t),qyo=r(Qke," (TAPAS model)"),Qke.forEach(t),jyo=i(O),P1=n(O,"LI",{});var Hke=s(P1);Fge=n(Hke,"STRONG",{});var jbt=s(Fge);Dyo=r(jbt,"transfo-xl"),jbt.forEach(t),Gyo=r(Hke," \u2014 "),UG=n(Hke,"A",{href:!0});var Dbt=s(UG);Oyo=r(Dbt,"TransfoXLLMHeadModel"),Dbt.forEach(t),Vyo=r(Hke," (Transformer-XL model)"),Hke.forEach(t),Xyo=i(O),B1=n(O,"LI",{});var Uke=s(B1);Tge=n(Uke,"STRONG",{});var Gbt=s(Tge);zyo=r(Gbt,"unispeech"),Gbt.forEach(t),Wyo=r(Uke," \u2014 "),JG=n(Uke,"A",{href:!0});var Obt=s(JG);Qyo=r(Obt,"UniSpeechForPreTraining"),Obt.forEach(t),Hyo=r(Uke," (UniSpeech model)"),Uke.forEach(t),Uyo=i(O),I1=n(O,"LI",{});var Jke=s(I1);Mge=n(Jke,"STRONG",{});var Vbt=s(Mge);Jyo=r(Vbt,"unispeech-sat"),Vbt.forEach(t),Yyo=r(Jke," \u2014 "),YG=n(Jke,"A",{href:!0});var Xbt=s(YG);Kyo=r(Xbt,"UniSpeechSatForPreTraining"),Xbt.forEach(t),Zyo=r(Jke," (UniSpeechSat model)"),Jke.forEach(t),exo=i(O),N1=n(O,"LI",{});var Yke=s(N1);Ege=n(Yke,"STRONG",{});var zbt=s(Ege);oxo=r(zbt,"visual_bert"),zbt.forEach(t),rxo=r(Yke," \u2014 "),KG=n(Yke,"A",{href:!0});var Wbt=s(KG);txo=r(Wbt,"VisualBertForPreTraining"),Wbt.forEach(t),axo=r(Yke," (VisualBERT model)"),Yke.forEach(t),nxo=i(O),q1=n(O,"LI",{});var Kke=s(q1);Cge=n(Kke,"STRONG",{});var Qbt=s(Cge);sxo=r(Qbt,"vit_mae"),Qbt.forEach(t),lxo=r(Kke," \u2014 "),ZG=n(Kke,"A",{href:!0});var Hbt=s(ZG);ixo=r(Hbt,"ViTMAEForPreTraining"),Hbt.forEach(t),dxo=r(Kke," (ViTMAE model)"),Kke.forEach(t),cxo=i(O),j1=n(O,"LI",{});var Zke=s(j1);wge=n(Zke,"STRONG",{});var Ubt=s(wge);fxo=r(Ubt,"wav2vec2"),Ubt.forEach(t),mxo=r(Zke," \u2014 "),eO=n(Zke,"A",{href:!0});var Jbt=s(eO);gxo=r(Jbt,"Wav2Vec2ForPreTraining"),Jbt.forEach(t),hxo=r(Zke," (Wav2Vec2 model)"),Zke.forEach(t),pxo=i(O),D1=n(O,"LI",{});var eSe=s(D1);Age=n(eSe,"STRONG",{});var Ybt=s(Age);_xo=r(Ybt,"wav2vec2-conformer"),Ybt.forEach(t),uxo=r(eSe," \u2014 "),oO=n(eSe,"A",{href:!0});var Kbt=s(oO);bxo=r(Kbt,"Wav2Vec2ConformerForPreTraining"),Kbt.forEach(t),vxo=r(eSe," (Wav2Vec2-Conformer model)"),eSe.forEach(t),Fxo=i(O),G1=n(O,"LI",{});var oSe=s(G1);Lge=n(oSe,"STRONG",{});var Zbt=s(Lge);Txo=r(Zbt,"xlm"),Zbt.forEach(t),Mxo=r(oSe," \u2014 "),rO=n(oSe,"A",{href:!0});var evt=s(rO);Exo=r(evt,"XLMWithLMHeadModel"),evt.forEach(t),Cxo=r(oSe," (XLM model)"),oSe.forEach(t),wxo=i(O),O1=n(O,"LI",{});var rSe=s(O1);yge=n(rSe,"STRONG",{});var ovt=s(yge);Axo=r(ovt,"xlm-roberta"),ovt.forEach(t),Lxo=r(rSe," \u2014 "),tO=n(rSe,"A",{href:!0});var rvt=s(tO);yxo=r(rvt,"XLMRobertaForMaskedLM"),rvt.forEach(t),xxo=r(rSe," (XLM-RoBERTa model)"),rSe.forEach(t),$xo=i(O),V1=n(O,"LI",{});var tSe=s(V1);xge=n(tSe,"STRONG",{});var tvt=s(xge);kxo=r(tvt,"xlm-roberta-xl"),tvt.forEach(t),Sxo=r(tSe," \u2014 "),aO=n(tSe,"A",{href:!0});var avt=s(aO);Rxo=r(avt,"XLMRobertaXLForMaskedLM"),avt.forEach(t),Pxo=r(tSe," (XLM-RoBERTa-XL model)"),tSe.forEach(t),Bxo=i(O),X1=n(O,"LI",{});var aSe=s(X1);$ge=n(aSe,"STRONG",{});var nvt=s($ge);Ixo=r(nvt,"xlnet"),nvt.forEach(t),Nxo=r(aSe," \u2014 "),nO=n(aSe,"A",{href:!0});var svt=s(nO);qxo=r(svt,"XLNetLMHeadModel"),svt.forEach(t),jxo=r(aSe," (XLNet model)"),aSe.forEach(t),O.forEach(t),Dxo=i(ia),z1=n(ia,"P",{});var nSe=s(z1);Gxo=r(nSe,"The model is set in evaluation mode by default using "),kge=n(nSe,"CODE",{});var lvt=s(kge);Oxo=r(lvt,"model.eval()"),lvt.forEach(t),Vxo=r(nSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sge=n(nSe,"CODE",{});var ivt=s(Sge);Xxo=r(ivt,"model.train()"),ivt.forEach(t),nSe.forEach(t),zxo=i(ia),T(W1.$$.fragment,ia),ia.forEach(t),al.forEach(t),BXe=i(f),Hi=n(f,"H2",{class:!0});var GWe=s(Hi);Q1=n(GWe,"A",{id:!0,class:!0,href:!0});var dvt=s(Q1);Rge=n(dvt,"SPAN",{});var cvt=s(Rge);T(z6.$$.fragment,cvt),cvt.forEach(t),dvt.forEach(t),Wxo=i(GWe),Pge=n(GWe,"SPAN",{});var fvt=s(Pge);Qxo=r(fvt,"AutoModelForCausalLM"),fvt.forEach(t),GWe.forEach(t),IXe=i(f),So=n(f,"DIV",{class:!0});var nl=s(So);T(W6.$$.fragment,nl),Hxo=i(nl),Ui=n(nl,"P",{});var Qre=s(Ui);Uxo=r(Qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),sO=n(Qre,"A",{href:!0});var mvt=s(sO);Jxo=r(mvt,"from_pretrained()"),mvt.forEach(t),Yxo=r(Qre," class method or the "),lO=n(Qre,"A",{href:!0});var gvt=s(lO);Kxo=r(gvt,"from_config()"),gvt.forEach(t),Zxo=r(Qre,` class
method.`),Qre.forEach(t),e$o=i(nl),Q6=n(nl,"P",{});var OWe=s(Q6);o$o=r(OWe,"This class cannot be instantiated directly using "),Bge=n(OWe,"CODE",{});var hvt=s(Bge);r$o=r(hvt,"__init__()"),hvt.forEach(t),t$o=r(OWe," (throws an error)."),OWe.forEach(t),a$o=i(nl),ct=n(nl,"DIV",{class:!0});var uw=s(ct);T(H6.$$.fragment,uw),n$o=i(uw),Ige=n(uw,"P",{});var pvt=s(Ige);s$o=r(pvt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),pvt.forEach(t),l$o=i(uw),Ji=n(uw,"P",{});var Hre=s(Ji);i$o=r(Hre,`Note:
Loading a model from its configuration file does `),Nge=n(Hre,"STRONG",{});var _vt=s(Nge);d$o=r(_vt,"not"),_vt.forEach(t),c$o=r(Hre,` load the model weights. It only affects the
model\u2019s configuration. Use `),iO=n(Hre,"A",{href:!0});var uvt=s(iO);f$o=r(uvt,"from_pretrained()"),uvt.forEach(t),m$o=r(Hre," to load the model weights."),Hre.forEach(t),g$o=i(uw),T(H1.$$.fragment,uw),uw.forEach(t),h$o=i(nl),Ze=n(nl,"DIV",{class:!0});var da=s(Ze);T(U6.$$.fragment,da),p$o=i(da),qge=n(da,"P",{});var bvt=s(qge);_$o=r(bvt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),bvt.forEach(t),u$o=i(da),qa=n(da,"P",{});var bw=s(qa);b$o=r(bw,"The model class to instantiate is selected based on the "),jge=n(bw,"CODE",{});var vvt=s(jge);v$o=r(vvt,"model_type"),vvt.forEach(t),F$o=r(bw,` property of the config object (either
passed as an argument or loaded from `),Dge=n(bw,"CODE",{});var Fvt=s(Dge);T$o=r(Fvt,"pretrained_model_name_or_path"),Fvt.forEach(t),M$o=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gge=n(bw,"CODE",{});var Tvt=s(Gge);E$o=r(Tvt,"pretrained_model_name_or_path"),Tvt.forEach(t),C$o=r(bw,":"),bw.forEach(t),w$o=i(da),z=n(da,"UL",{});var W=s(z);U1=n(W,"LI",{});var sSe=s(U1);Oge=n(sSe,"STRONG",{});var Mvt=s(Oge);A$o=r(Mvt,"bart"),Mvt.forEach(t),L$o=r(sSe," \u2014 "),dO=n(sSe,"A",{href:!0});var Evt=s(dO);y$o=r(Evt,"BartForCausalLM"),Evt.forEach(t),x$o=r(sSe," (BART model)"),sSe.forEach(t),$$o=i(W),J1=n(W,"LI",{});var lSe=s(J1);Vge=n(lSe,"STRONG",{});var Cvt=s(Vge);k$o=r(Cvt,"bert"),Cvt.forEach(t),S$o=r(lSe," \u2014 "),cO=n(lSe,"A",{href:!0});var wvt=s(cO);R$o=r(wvt,"BertLMHeadModel"),wvt.forEach(t),P$o=r(lSe," (BERT model)"),lSe.forEach(t),B$o=i(W),Y1=n(W,"LI",{});var iSe=s(Y1);Xge=n(iSe,"STRONG",{});var Avt=s(Xge);I$o=r(Avt,"bert-generation"),Avt.forEach(t),N$o=r(iSe," \u2014 "),fO=n(iSe,"A",{href:!0});var Lvt=s(fO);q$o=r(Lvt,"BertGenerationDecoder"),Lvt.forEach(t),j$o=r(iSe," (Bert Generation model)"),iSe.forEach(t),D$o=i(W),K1=n(W,"LI",{});var dSe=s(K1);zge=n(dSe,"STRONG",{});var yvt=s(zge);G$o=r(yvt,"big_bird"),yvt.forEach(t),O$o=r(dSe," \u2014 "),mO=n(dSe,"A",{href:!0});var xvt=s(mO);V$o=r(xvt,"BigBirdForCausalLM"),xvt.forEach(t),X$o=r(dSe," (BigBird model)"),dSe.forEach(t),z$o=i(W),Z1=n(W,"LI",{});var cSe=s(Z1);Wge=n(cSe,"STRONG",{});var $vt=s(Wge);W$o=r($vt,"bigbird_pegasus"),$vt.forEach(t),Q$o=r(cSe," \u2014 "),gO=n(cSe,"A",{href:!0});var kvt=s(gO);H$o=r(kvt,"BigBirdPegasusForCausalLM"),kvt.forEach(t),U$o=r(cSe," (BigBird-Pegasus model)"),cSe.forEach(t),J$o=i(W),e2=n(W,"LI",{});var fSe=s(e2);Qge=n(fSe,"STRONG",{});var Svt=s(Qge);Y$o=r(Svt,"blenderbot"),Svt.forEach(t),K$o=r(fSe," \u2014 "),hO=n(fSe,"A",{href:!0});var Rvt=s(hO);Z$o=r(Rvt,"BlenderbotForCausalLM"),Rvt.forEach(t),eko=r(fSe," (Blenderbot model)"),fSe.forEach(t),oko=i(W),o2=n(W,"LI",{});var mSe=s(o2);Hge=n(mSe,"STRONG",{});var Pvt=s(Hge);rko=r(Pvt,"blenderbot-small"),Pvt.forEach(t),tko=r(mSe," \u2014 "),pO=n(mSe,"A",{href:!0});var Bvt=s(pO);ako=r(Bvt,"BlenderbotSmallForCausalLM"),Bvt.forEach(t),nko=r(mSe," (BlenderbotSmall model)"),mSe.forEach(t),sko=i(W),r2=n(W,"LI",{});var gSe=s(r2);Uge=n(gSe,"STRONG",{});var Ivt=s(Uge);lko=r(Ivt,"bloom"),Ivt.forEach(t),iko=r(gSe," \u2014 "),_O=n(gSe,"A",{href:!0});var Nvt=s(_O);dko=r(Nvt,"BloomForCausalLM"),Nvt.forEach(t),cko=r(gSe," (BLOOM model)"),gSe.forEach(t),fko=i(W),t2=n(W,"LI",{});var hSe=s(t2);Jge=n(hSe,"STRONG",{});var qvt=s(Jge);mko=r(qvt,"camembert"),qvt.forEach(t),gko=r(hSe," \u2014 "),uO=n(hSe,"A",{href:!0});var jvt=s(uO);hko=r(jvt,"CamembertForCausalLM"),jvt.forEach(t),pko=r(hSe," (CamemBERT model)"),hSe.forEach(t),_ko=i(W),a2=n(W,"LI",{});var pSe=s(a2);Yge=n(pSe,"STRONG",{});var Dvt=s(Yge);uko=r(Dvt,"codegen"),Dvt.forEach(t),bko=r(pSe," \u2014 "),bO=n(pSe,"A",{href:!0});var Gvt=s(bO);vko=r(Gvt,"CodeGenForCausalLM"),Gvt.forEach(t),Fko=r(pSe," (CodeGen model)"),pSe.forEach(t),Tko=i(W),n2=n(W,"LI",{});var _Se=s(n2);Kge=n(_Se,"STRONG",{});var Ovt=s(Kge);Mko=r(Ovt,"ctrl"),Ovt.forEach(t),Eko=r(_Se," \u2014 "),vO=n(_Se,"A",{href:!0});var Vvt=s(vO);Cko=r(Vvt,"CTRLLMHeadModel"),Vvt.forEach(t),wko=r(_Se," (CTRL model)"),_Se.forEach(t),Ako=i(W),s2=n(W,"LI",{});var uSe=s(s2);Zge=n(uSe,"STRONG",{});var Xvt=s(Zge);Lko=r(Xvt,"data2vec-text"),Xvt.forEach(t),yko=r(uSe," \u2014 "),FO=n(uSe,"A",{href:!0});var zvt=s(FO);xko=r(zvt,"Data2VecTextForCausalLM"),zvt.forEach(t),$ko=r(uSe," (Data2VecText model)"),uSe.forEach(t),kko=i(W),l2=n(W,"LI",{});var bSe=s(l2);ehe=n(bSe,"STRONG",{});var Wvt=s(ehe);Sko=r(Wvt,"electra"),Wvt.forEach(t),Rko=r(bSe," \u2014 "),TO=n(bSe,"A",{href:!0});var Qvt=s(TO);Pko=r(Qvt,"ElectraForCausalLM"),Qvt.forEach(t),Bko=r(bSe," (ELECTRA model)"),bSe.forEach(t),Iko=i(W),i2=n(W,"LI",{});var vSe=s(i2);ohe=n(vSe,"STRONG",{});var Hvt=s(ohe);Nko=r(Hvt,"gpt2"),Hvt.forEach(t),qko=r(vSe," \u2014 "),MO=n(vSe,"A",{href:!0});var Uvt=s(MO);jko=r(Uvt,"GPT2LMHeadModel"),Uvt.forEach(t),Dko=r(vSe," (OpenAI GPT-2 model)"),vSe.forEach(t),Gko=i(W),d2=n(W,"LI",{});var FSe=s(d2);rhe=n(FSe,"STRONG",{});var Jvt=s(rhe);Oko=r(Jvt,"gpt_neo"),Jvt.forEach(t),Vko=r(FSe," \u2014 "),EO=n(FSe,"A",{href:!0});var Yvt=s(EO);Xko=r(Yvt,"GPTNeoForCausalLM"),Yvt.forEach(t),zko=r(FSe," (GPT Neo model)"),FSe.forEach(t),Wko=i(W),c2=n(W,"LI",{});var TSe=s(c2);the=n(TSe,"STRONG",{});var Kvt=s(the);Qko=r(Kvt,"gpt_neox"),Kvt.forEach(t),Hko=r(TSe," \u2014 "),CO=n(TSe,"A",{href:!0});var Zvt=s(CO);Uko=r(Zvt,"GPTNeoXForCausalLM"),Zvt.forEach(t),Jko=r(TSe," (GPT NeoX model)"),TSe.forEach(t),Yko=i(W),f2=n(W,"LI",{});var MSe=s(f2);ahe=n(MSe,"STRONG",{});var e3t=s(ahe);Kko=r(e3t,"gptj"),e3t.forEach(t),Zko=r(MSe," \u2014 "),wO=n(MSe,"A",{href:!0});var o3t=s(wO);eSo=r(o3t,"GPTJForCausalLM"),o3t.forEach(t),oSo=r(MSe," (GPT-J model)"),MSe.forEach(t),rSo=i(W),m2=n(W,"LI",{});var ESe=s(m2);nhe=n(ESe,"STRONG",{});var r3t=s(nhe);tSo=r(r3t,"marian"),r3t.forEach(t),aSo=r(ESe," \u2014 "),AO=n(ESe,"A",{href:!0});var t3t=s(AO);nSo=r(t3t,"MarianForCausalLM"),t3t.forEach(t),sSo=r(ESe," (Marian model)"),ESe.forEach(t),lSo=i(W),g2=n(W,"LI",{});var CSe=s(g2);she=n(CSe,"STRONG",{});var a3t=s(she);iSo=r(a3t,"mbart"),a3t.forEach(t),dSo=r(CSe," \u2014 "),LO=n(CSe,"A",{href:!0});var n3t=s(LO);cSo=r(n3t,"MBartForCausalLM"),n3t.forEach(t),fSo=r(CSe," (mBART model)"),CSe.forEach(t),mSo=i(W),h2=n(W,"LI",{});var wSe=s(h2);lhe=n(wSe,"STRONG",{});var s3t=s(lhe);gSo=r(s3t,"megatron-bert"),s3t.forEach(t),hSo=r(wSe," \u2014 "),yO=n(wSe,"A",{href:!0});var l3t=s(yO);pSo=r(l3t,"MegatronBertForCausalLM"),l3t.forEach(t),_So=r(wSe," (Megatron-BERT model)"),wSe.forEach(t),uSo=i(W),p2=n(W,"LI",{});var ASe=s(p2);ihe=n(ASe,"STRONG",{});var i3t=s(ihe);bSo=r(i3t,"mvp"),i3t.forEach(t),vSo=r(ASe," \u2014 "),xO=n(ASe,"A",{href:!0});var d3t=s(xO);FSo=r(d3t,"MvpForCausalLM"),d3t.forEach(t),TSo=r(ASe," (MVP model)"),ASe.forEach(t),MSo=i(W),_2=n(W,"LI",{});var LSe=s(_2);dhe=n(LSe,"STRONG",{});var c3t=s(dhe);ESo=r(c3t,"openai-gpt"),c3t.forEach(t),CSo=r(LSe," \u2014 "),$O=n(LSe,"A",{href:!0});var f3t=s($O);wSo=r(f3t,"OpenAIGPTLMHeadModel"),f3t.forEach(t),ASo=r(LSe," (OpenAI GPT model)"),LSe.forEach(t),LSo=i(W),u2=n(W,"LI",{});var ySe=s(u2);che=n(ySe,"STRONG",{});var m3t=s(che);ySo=r(m3t,"opt"),m3t.forEach(t),xSo=r(ySe," \u2014 "),kO=n(ySe,"A",{href:!0});var g3t=s(kO);$So=r(g3t,"OPTForCausalLM"),g3t.forEach(t),kSo=r(ySe," (OPT model)"),ySe.forEach(t),SSo=i(W),b2=n(W,"LI",{});var xSe=s(b2);fhe=n(xSe,"STRONG",{});var h3t=s(fhe);RSo=r(h3t,"pegasus"),h3t.forEach(t),PSo=r(xSe," \u2014 "),SO=n(xSe,"A",{href:!0});var p3t=s(SO);BSo=r(p3t,"PegasusForCausalLM"),p3t.forEach(t),ISo=r(xSe," (Pegasus model)"),xSe.forEach(t),NSo=i(W),v2=n(W,"LI",{});var $Se=s(v2);mhe=n($Se,"STRONG",{});var _3t=s(mhe);qSo=r(_3t,"plbart"),_3t.forEach(t),jSo=r($Se," \u2014 "),RO=n($Se,"A",{href:!0});var u3t=s(RO);DSo=r(u3t,"PLBartForCausalLM"),u3t.forEach(t),GSo=r($Se," (PLBart model)"),$Se.forEach(t),OSo=i(W),F2=n(W,"LI",{});var kSe=s(F2);ghe=n(kSe,"STRONG",{});var b3t=s(ghe);VSo=r(b3t,"prophetnet"),b3t.forEach(t),XSo=r(kSe," \u2014 "),PO=n(kSe,"A",{href:!0});var v3t=s(PO);zSo=r(v3t,"ProphetNetForCausalLM"),v3t.forEach(t),WSo=r(kSe," (ProphetNet model)"),kSe.forEach(t),QSo=i(W),T2=n(W,"LI",{});var SSe=s(T2);hhe=n(SSe,"STRONG",{});var F3t=s(hhe);HSo=r(F3t,"qdqbert"),F3t.forEach(t),USo=r(SSe," \u2014 "),BO=n(SSe,"A",{href:!0});var T3t=s(BO);JSo=r(T3t,"QDQBertLMHeadModel"),T3t.forEach(t),YSo=r(SSe," (QDQBert model)"),SSe.forEach(t),KSo=i(W),M2=n(W,"LI",{});var RSe=s(M2);phe=n(RSe,"STRONG",{});var M3t=s(phe);ZSo=r(M3t,"reformer"),M3t.forEach(t),eRo=r(RSe," \u2014 "),IO=n(RSe,"A",{href:!0});var E3t=s(IO);oRo=r(E3t,"ReformerModelWithLMHead"),E3t.forEach(t),rRo=r(RSe," (Reformer model)"),RSe.forEach(t),tRo=i(W),E2=n(W,"LI",{});var PSe=s(E2);_he=n(PSe,"STRONG",{});var C3t=s(_he);aRo=r(C3t,"rembert"),C3t.forEach(t),nRo=r(PSe," \u2014 "),NO=n(PSe,"A",{href:!0});var w3t=s(NO);sRo=r(w3t,"RemBertForCausalLM"),w3t.forEach(t),lRo=r(PSe," (RemBERT model)"),PSe.forEach(t),iRo=i(W),C2=n(W,"LI",{});var BSe=s(C2);uhe=n(BSe,"STRONG",{});var A3t=s(uhe);dRo=r(A3t,"roberta"),A3t.forEach(t),cRo=r(BSe," \u2014 "),qO=n(BSe,"A",{href:!0});var L3t=s(qO);fRo=r(L3t,"RobertaForCausalLM"),L3t.forEach(t),mRo=r(BSe," (RoBERTa model)"),BSe.forEach(t),gRo=i(W),w2=n(W,"LI",{});var ISe=s(w2);bhe=n(ISe,"STRONG",{});var y3t=s(bhe);hRo=r(y3t,"roformer"),y3t.forEach(t),pRo=r(ISe," \u2014 "),jO=n(ISe,"A",{href:!0});var x3t=s(jO);_Ro=r(x3t,"RoFormerForCausalLM"),x3t.forEach(t),uRo=r(ISe," (RoFormer model)"),ISe.forEach(t),bRo=i(W),A2=n(W,"LI",{});var NSe=s(A2);vhe=n(NSe,"STRONG",{});var $3t=s(vhe);vRo=r($3t,"speech_to_text_2"),$3t.forEach(t),FRo=r(NSe," \u2014 "),DO=n(NSe,"A",{href:!0});var k3t=s(DO);TRo=r(k3t,"Speech2Text2ForCausalLM"),k3t.forEach(t),MRo=r(NSe," (Speech2Text2 model)"),NSe.forEach(t),ERo=i(W),L2=n(W,"LI",{});var qSe=s(L2);Fhe=n(qSe,"STRONG",{});var S3t=s(Fhe);CRo=r(S3t,"transfo-xl"),S3t.forEach(t),wRo=r(qSe," \u2014 "),GO=n(qSe,"A",{href:!0});var R3t=s(GO);ARo=r(R3t,"TransfoXLLMHeadModel"),R3t.forEach(t),LRo=r(qSe," (Transformer-XL model)"),qSe.forEach(t),yRo=i(W),y2=n(W,"LI",{});var jSe=s(y2);The=n(jSe,"STRONG",{});var P3t=s(The);xRo=r(P3t,"trocr"),P3t.forEach(t),$Ro=r(jSe," \u2014 "),OO=n(jSe,"A",{href:!0});var B3t=s(OO);kRo=r(B3t,"TrOCRForCausalLM"),B3t.forEach(t),SRo=r(jSe," (TrOCR model)"),jSe.forEach(t),RRo=i(W),x2=n(W,"LI",{});var DSe=s(x2);Mhe=n(DSe,"STRONG",{});var I3t=s(Mhe);PRo=r(I3t,"xglm"),I3t.forEach(t),BRo=r(DSe," \u2014 "),VO=n(DSe,"A",{href:!0});var N3t=s(VO);IRo=r(N3t,"XGLMForCausalLM"),N3t.forEach(t),NRo=r(DSe," (XGLM model)"),DSe.forEach(t),qRo=i(W),$2=n(W,"LI",{});var GSe=s($2);Ehe=n(GSe,"STRONG",{});var q3t=s(Ehe);jRo=r(q3t,"xlm"),q3t.forEach(t),DRo=r(GSe," \u2014 "),XO=n(GSe,"A",{href:!0});var j3t=s(XO);GRo=r(j3t,"XLMWithLMHeadModel"),j3t.forEach(t),ORo=r(GSe," (XLM model)"),GSe.forEach(t),VRo=i(W),k2=n(W,"LI",{});var OSe=s(k2);Che=n(OSe,"STRONG",{});var D3t=s(Che);XRo=r(D3t,"xlm-prophetnet"),D3t.forEach(t),zRo=r(OSe," \u2014 "),zO=n(OSe,"A",{href:!0});var G3t=s(zO);WRo=r(G3t,"XLMProphetNetForCausalLM"),G3t.forEach(t),QRo=r(OSe," (XLM-ProphetNet model)"),OSe.forEach(t),HRo=i(W),S2=n(W,"LI",{});var VSe=s(S2);whe=n(VSe,"STRONG",{});var O3t=s(whe);URo=r(O3t,"xlm-roberta"),O3t.forEach(t),JRo=r(VSe," \u2014 "),WO=n(VSe,"A",{href:!0});var V3t=s(WO);YRo=r(V3t,"XLMRobertaForCausalLM"),V3t.forEach(t),KRo=r(VSe," (XLM-RoBERTa model)"),VSe.forEach(t),ZRo=i(W),R2=n(W,"LI",{});var XSe=s(R2);Ahe=n(XSe,"STRONG",{});var X3t=s(Ahe);ePo=r(X3t,"xlm-roberta-xl"),X3t.forEach(t),oPo=r(XSe," \u2014 "),QO=n(XSe,"A",{href:!0});var z3t=s(QO);rPo=r(z3t,"XLMRobertaXLForCausalLM"),z3t.forEach(t),tPo=r(XSe," (XLM-RoBERTa-XL model)"),XSe.forEach(t),aPo=i(W),P2=n(W,"LI",{});var zSe=s(P2);Lhe=n(zSe,"STRONG",{});var W3t=s(Lhe);nPo=r(W3t,"xlnet"),W3t.forEach(t),sPo=r(zSe," \u2014 "),HO=n(zSe,"A",{href:!0});var Q3t=s(HO);lPo=r(Q3t,"XLNetLMHeadModel"),Q3t.forEach(t),iPo=r(zSe," (XLNet model)"),zSe.forEach(t),W.forEach(t),dPo=i(da),B2=n(da,"P",{});var WSe=s(B2);cPo=r(WSe,"The model is set in evaluation mode by default using "),yhe=n(WSe,"CODE",{});var H3t=s(yhe);fPo=r(H3t,"model.eval()"),H3t.forEach(t),mPo=r(WSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xhe=n(WSe,"CODE",{});var U3t=s(xhe);gPo=r(U3t,"model.train()"),U3t.forEach(t),WSe.forEach(t),hPo=i(da),T(I2.$$.fragment,da),da.forEach(t),nl.forEach(t),NXe=i(f),Yi=n(f,"H2",{class:!0});var VWe=s(Yi);N2=n(VWe,"A",{id:!0,class:!0,href:!0});var J3t=s(N2);$he=n(J3t,"SPAN",{});var Y3t=s($he);T(J6.$$.fragment,Y3t),Y3t.forEach(t),J3t.forEach(t),pPo=i(VWe),khe=n(VWe,"SPAN",{});var K3t=s(khe);_Po=r(K3t,"AutoModelForMaskedLM"),K3t.forEach(t),VWe.forEach(t),qXe=i(f),Ro=n(f,"DIV",{class:!0});var sl=s(Ro);T(Y6.$$.fragment,sl),uPo=i(sl),Ki=n(sl,"P",{});var Ure=s(Ki);bPo=r(Ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),UO=n(Ure,"A",{href:!0});var Z3t=s(UO);vPo=r(Z3t,"from_pretrained()"),Z3t.forEach(t),FPo=r(Ure," class method or the "),JO=n(Ure,"A",{href:!0});var eFt=s(JO);TPo=r(eFt,"from_config()"),eFt.forEach(t),MPo=r(Ure,` class
method.`),Ure.forEach(t),EPo=i(sl),K6=n(sl,"P",{});var XWe=s(K6);CPo=r(XWe,"This class cannot be instantiated directly using "),She=n(XWe,"CODE",{});var oFt=s(She);wPo=r(oFt,"__init__()"),oFt.forEach(t),APo=r(XWe," (throws an error)."),XWe.forEach(t),LPo=i(sl),ft=n(sl,"DIV",{class:!0});var vw=s(ft);T(Z6.$$.fragment,vw),yPo=i(vw),Rhe=n(vw,"P",{});var rFt=s(Rhe);xPo=r(rFt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),rFt.forEach(t),$Po=i(vw),Zi=n(vw,"P",{});var Jre=s(Zi);kPo=r(Jre,`Note:
Loading a model from its configuration file does `),Phe=n(Jre,"STRONG",{});var tFt=s(Phe);SPo=r(tFt,"not"),tFt.forEach(t),RPo=r(Jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),YO=n(Jre,"A",{href:!0});var aFt=s(YO);PPo=r(aFt,"from_pretrained()"),aFt.forEach(t),BPo=r(Jre," to load the model weights."),Jre.forEach(t),IPo=i(vw),T(q2.$$.fragment,vw),vw.forEach(t),NPo=i(sl),eo=n(sl,"DIV",{class:!0});var ca=s(eo);T(eL.$$.fragment,ca),qPo=i(ca),Bhe=n(ca,"P",{});var nFt=s(Bhe);jPo=r(nFt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),nFt.forEach(t),DPo=i(ca),ja=n(ca,"P",{});var Fw=s(ja);GPo=r(Fw,"The model class to instantiate is selected based on the "),Ihe=n(Fw,"CODE",{});var sFt=s(Ihe);OPo=r(sFt,"model_type"),sFt.forEach(t),VPo=r(Fw,` property of the config object (either
passed as an argument or loaded from `),Nhe=n(Fw,"CODE",{});var lFt=s(Nhe);XPo=r(lFt,"pretrained_model_name_or_path"),lFt.forEach(t),zPo=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qhe=n(Fw,"CODE",{});var iFt=s(qhe);WPo=r(iFt,"pretrained_model_name_or_path"),iFt.forEach(t),QPo=r(Fw,":"),Fw.forEach(t),HPo=i(ca),Q=n(ca,"UL",{});var H=s(Q);j2=n(H,"LI",{});var QSe=s(j2);jhe=n(QSe,"STRONG",{});var dFt=s(jhe);UPo=r(dFt,"albert"),dFt.forEach(t),JPo=r(QSe," \u2014 "),KO=n(QSe,"A",{href:!0});var cFt=s(KO);YPo=r(cFt,"AlbertForMaskedLM"),cFt.forEach(t),KPo=r(QSe," (ALBERT model)"),QSe.forEach(t),ZPo=i(H),D2=n(H,"LI",{});var HSe=s(D2);Dhe=n(HSe,"STRONG",{});var fFt=s(Dhe);eBo=r(fFt,"bart"),fFt.forEach(t),oBo=r(HSe," \u2014 "),ZO=n(HSe,"A",{href:!0});var mFt=s(ZO);rBo=r(mFt,"BartForConditionalGeneration"),mFt.forEach(t),tBo=r(HSe," (BART model)"),HSe.forEach(t),aBo=i(H),G2=n(H,"LI",{});var USe=s(G2);Ghe=n(USe,"STRONG",{});var gFt=s(Ghe);nBo=r(gFt,"bert"),gFt.forEach(t),sBo=r(USe," \u2014 "),eV=n(USe,"A",{href:!0});var hFt=s(eV);lBo=r(hFt,"BertForMaskedLM"),hFt.forEach(t),iBo=r(USe," (BERT model)"),USe.forEach(t),dBo=i(H),O2=n(H,"LI",{});var JSe=s(O2);Ohe=n(JSe,"STRONG",{});var pFt=s(Ohe);cBo=r(pFt,"big_bird"),pFt.forEach(t),fBo=r(JSe," \u2014 "),oV=n(JSe,"A",{href:!0});var _Ft=s(oV);mBo=r(_Ft,"BigBirdForMaskedLM"),_Ft.forEach(t),gBo=r(JSe," (BigBird model)"),JSe.forEach(t),hBo=i(H),V2=n(H,"LI",{});var YSe=s(V2);Vhe=n(YSe,"STRONG",{});var uFt=s(Vhe);pBo=r(uFt,"camembert"),uFt.forEach(t),_Bo=r(YSe," \u2014 "),rV=n(YSe,"A",{href:!0});var bFt=s(rV);uBo=r(bFt,"CamembertForMaskedLM"),bFt.forEach(t),bBo=r(YSe," (CamemBERT model)"),YSe.forEach(t),vBo=i(H),X2=n(H,"LI",{});var KSe=s(X2);Xhe=n(KSe,"STRONG",{});var vFt=s(Xhe);FBo=r(vFt,"convbert"),vFt.forEach(t),TBo=r(KSe," \u2014 "),tV=n(KSe,"A",{href:!0});var FFt=s(tV);MBo=r(FFt,"ConvBertForMaskedLM"),FFt.forEach(t),EBo=r(KSe," (ConvBERT model)"),KSe.forEach(t),CBo=i(H),z2=n(H,"LI",{});var ZSe=s(z2);zhe=n(ZSe,"STRONG",{});var TFt=s(zhe);wBo=r(TFt,"data2vec-text"),TFt.forEach(t),ABo=r(ZSe," \u2014 "),aV=n(ZSe,"A",{href:!0});var MFt=s(aV);LBo=r(MFt,"Data2VecTextForMaskedLM"),MFt.forEach(t),yBo=r(ZSe," (Data2VecText model)"),ZSe.forEach(t),xBo=i(H),W2=n(H,"LI",{});var eRe=s(W2);Whe=n(eRe,"STRONG",{});var EFt=s(Whe);$Bo=r(EFt,"deberta"),EFt.forEach(t),kBo=r(eRe," \u2014 "),nV=n(eRe,"A",{href:!0});var CFt=s(nV);SBo=r(CFt,"DebertaForMaskedLM"),CFt.forEach(t),RBo=r(eRe," (DeBERTa model)"),eRe.forEach(t),PBo=i(H),Q2=n(H,"LI",{});var oRe=s(Q2);Qhe=n(oRe,"STRONG",{});var wFt=s(Qhe);BBo=r(wFt,"deberta-v2"),wFt.forEach(t),IBo=r(oRe," \u2014 "),sV=n(oRe,"A",{href:!0});var AFt=s(sV);NBo=r(AFt,"DebertaV2ForMaskedLM"),AFt.forEach(t),qBo=r(oRe," (DeBERTa-v2 model)"),oRe.forEach(t),jBo=i(H),H2=n(H,"LI",{});var rRe=s(H2);Hhe=n(rRe,"STRONG",{});var LFt=s(Hhe);DBo=r(LFt,"distilbert"),LFt.forEach(t),GBo=r(rRe," \u2014 "),lV=n(rRe,"A",{href:!0});var yFt=s(lV);OBo=r(yFt,"DistilBertForMaskedLM"),yFt.forEach(t),VBo=r(rRe," (DistilBERT model)"),rRe.forEach(t),XBo=i(H),U2=n(H,"LI",{});var tRe=s(U2);Uhe=n(tRe,"STRONG",{});var xFt=s(Uhe);zBo=r(xFt,"electra"),xFt.forEach(t),WBo=r(tRe," \u2014 "),iV=n(tRe,"A",{href:!0});var $Ft=s(iV);QBo=r($Ft,"ElectraForMaskedLM"),$Ft.forEach(t),HBo=r(tRe," (ELECTRA model)"),tRe.forEach(t),UBo=i(H),J2=n(H,"LI",{});var aRe=s(J2);Jhe=n(aRe,"STRONG",{});var kFt=s(Jhe);JBo=r(kFt,"flaubert"),kFt.forEach(t),YBo=r(aRe," \u2014 "),dV=n(aRe,"A",{href:!0});var SFt=s(dV);KBo=r(SFt,"FlaubertWithLMHeadModel"),SFt.forEach(t),ZBo=r(aRe," (FlauBERT model)"),aRe.forEach(t),eIo=i(H),Y2=n(H,"LI",{});var nRe=s(Y2);Yhe=n(nRe,"STRONG",{});var RFt=s(Yhe);oIo=r(RFt,"fnet"),RFt.forEach(t),rIo=r(nRe," \u2014 "),cV=n(nRe,"A",{href:!0});var PFt=s(cV);tIo=r(PFt,"FNetForMaskedLM"),PFt.forEach(t),aIo=r(nRe," (FNet model)"),nRe.forEach(t),nIo=i(H),K2=n(H,"LI",{});var sRe=s(K2);Khe=n(sRe,"STRONG",{});var BFt=s(Khe);sIo=r(BFt,"funnel"),BFt.forEach(t),lIo=r(sRe," \u2014 "),fV=n(sRe,"A",{href:!0});var IFt=s(fV);iIo=r(IFt,"FunnelForMaskedLM"),IFt.forEach(t),dIo=r(sRe," (Funnel Transformer model)"),sRe.forEach(t),cIo=i(H),Z2=n(H,"LI",{});var lRe=s(Z2);Zhe=n(lRe,"STRONG",{});var NFt=s(Zhe);fIo=r(NFt,"ibert"),NFt.forEach(t),mIo=r(lRe," \u2014 "),mV=n(lRe,"A",{href:!0});var qFt=s(mV);gIo=r(qFt,"IBertForMaskedLM"),qFt.forEach(t),hIo=r(lRe," (I-BERT model)"),lRe.forEach(t),pIo=i(H),eb=n(H,"LI",{});var iRe=s(eb);epe=n(iRe,"STRONG",{});var jFt=s(epe);_Io=r(jFt,"layoutlm"),jFt.forEach(t),uIo=r(iRe," \u2014 "),gV=n(iRe,"A",{href:!0});var DFt=s(gV);bIo=r(DFt,"LayoutLMForMaskedLM"),DFt.forEach(t),vIo=r(iRe," (LayoutLM model)"),iRe.forEach(t),FIo=i(H),ob=n(H,"LI",{});var dRe=s(ob);ope=n(dRe,"STRONG",{});var GFt=s(ope);TIo=r(GFt,"longformer"),GFt.forEach(t),MIo=r(dRe," \u2014 "),hV=n(dRe,"A",{href:!0});var OFt=s(hV);EIo=r(OFt,"LongformerForMaskedLM"),OFt.forEach(t),CIo=r(dRe," (Longformer model)"),dRe.forEach(t),wIo=i(H),rb=n(H,"LI",{});var cRe=s(rb);rpe=n(cRe,"STRONG",{});var VFt=s(rpe);AIo=r(VFt,"luke"),VFt.forEach(t),LIo=r(cRe," \u2014 "),pV=n(cRe,"A",{href:!0});var XFt=s(pV);yIo=r(XFt,"LukeForMaskedLM"),XFt.forEach(t),xIo=r(cRe," (LUKE model)"),cRe.forEach(t),$Io=i(H),tb=n(H,"LI",{});var fRe=s(tb);tpe=n(fRe,"STRONG",{});var zFt=s(tpe);kIo=r(zFt,"mbart"),zFt.forEach(t),SIo=r(fRe," \u2014 "),_V=n(fRe,"A",{href:!0});var WFt=s(_V);RIo=r(WFt,"MBartForConditionalGeneration"),WFt.forEach(t),PIo=r(fRe," (mBART model)"),fRe.forEach(t),BIo=i(H),ab=n(H,"LI",{});var mRe=s(ab);ape=n(mRe,"STRONG",{});var QFt=s(ape);IIo=r(QFt,"megatron-bert"),QFt.forEach(t),NIo=r(mRe," \u2014 "),uV=n(mRe,"A",{href:!0});var HFt=s(uV);qIo=r(HFt,"MegatronBertForMaskedLM"),HFt.forEach(t),jIo=r(mRe," (Megatron-BERT model)"),mRe.forEach(t),DIo=i(H),nb=n(H,"LI",{});var gRe=s(nb);npe=n(gRe,"STRONG",{});var UFt=s(npe);GIo=r(UFt,"mobilebert"),UFt.forEach(t),OIo=r(gRe," \u2014 "),bV=n(gRe,"A",{href:!0});var JFt=s(bV);VIo=r(JFt,"MobileBertForMaskedLM"),JFt.forEach(t),XIo=r(gRe," (MobileBERT model)"),gRe.forEach(t),zIo=i(H),sb=n(H,"LI",{});var hRe=s(sb);spe=n(hRe,"STRONG",{});var YFt=s(spe);WIo=r(YFt,"mpnet"),YFt.forEach(t),QIo=r(hRe," \u2014 "),vV=n(hRe,"A",{href:!0});var KFt=s(vV);HIo=r(KFt,"MPNetForMaskedLM"),KFt.forEach(t),UIo=r(hRe," (MPNet model)"),hRe.forEach(t),JIo=i(H),lb=n(H,"LI",{});var pRe=s(lb);lpe=n(pRe,"STRONG",{});var ZFt=s(lpe);YIo=r(ZFt,"mvp"),ZFt.forEach(t),KIo=r(pRe," \u2014 "),FV=n(pRe,"A",{href:!0});var eTt=s(FV);ZIo=r(eTt,"MvpForConditionalGeneration"),eTt.forEach(t),eNo=r(pRe," (MVP model)"),pRe.forEach(t),oNo=i(H),ib=n(H,"LI",{});var _Re=s(ib);ipe=n(_Re,"STRONG",{});var oTt=s(ipe);rNo=r(oTt,"nezha"),oTt.forEach(t),tNo=r(_Re," \u2014 "),TV=n(_Re,"A",{href:!0});var rTt=s(TV);aNo=r(rTt,"NezhaForMaskedLM"),rTt.forEach(t),nNo=r(_Re," (Nezha model)"),_Re.forEach(t),sNo=i(H),db=n(H,"LI",{});var uRe=s(db);dpe=n(uRe,"STRONG",{});var tTt=s(dpe);lNo=r(tTt,"nystromformer"),tTt.forEach(t),iNo=r(uRe," \u2014 "),MV=n(uRe,"A",{href:!0});var aTt=s(MV);dNo=r(aTt,"NystromformerForMaskedLM"),aTt.forEach(t),cNo=r(uRe," (Nystr\xF6mformer model)"),uRe.forEach(t),fNo=i(H),cb=n(H,"LI",{});var bRe=s(cb);cpe=n(bRe,"STRONG",{});var nTt=s(cpe);mNo=r(nTt,"perceiver"),nTt.forEach(t),gNo=r(bRe," \u2014 "),EV=n(bRe,"A",{href:!0});var sTt=s(EV);hNo=r(sTt,"PerceiverForMaskedLM"),sTt.forEach(t),pNo=r(bRe," (Perceiver model)"),bRe.forEach(t),_No=i(H),fb=n(H,"LI",{});var vRe=s(fb);fpe=n(vRe,"STRONG",{});var lTt=s(fpe);uNo=r(lTt,"qdqbert"),lTt.forEach(t),bNo=r(vRe," \u2014 "),CV=n(vRe,"A",{href:!0});var iTt=s(CV);vNo=r(iTt,"QDQBertForMaskedLM"),iTt.forEach(t),FNo=r(vRe," (QDQBert model)"),vRe.forEach(t),TNo=i(H),mb=n(H,"LI",{});var FRe=s(mb);mpe=n(FRe,"STRONG",{});var dTt=s(mpe);MNo=r(dTt,"reformer"),dTt.forEach(t),ENo=r(FRe," \u2014 "),wV=n(FRe,"A",{href:!0});var cTt=s(wV);CNo=r(cTt,"ReformerForMaskedLM"),cTt.forEach(t),wNo=r(FRe," (Reformer model)"),FRe.forEach(t),ANo=i(H),gb=n(H,"LI",{});var TRe=s(gb);gpe=n(TRe,"STRONG",{});var fTt=s(gpe);LNo=r(fTt,"rembert"),fTt.forEach(t),yNo=r(TRe," \u2014 "),AV=n(TRe,"A",{href:!0});var mTt=s(AV);xNo=r(mTt,"RemBertForMaskedLM"),mTt.forEach(t),$No=r(TRe," (RemBERT model)"),TRe.forEach(t),kNo=i(H),hb=n(H,"LI",{});var MRe=s(hb);hpe=n(MRe,"STRONG",{});var gTt=s(hpe);SNo=r(gTt,"roberta"),gTt.forEach(t),RNo=r(MRe," \u2014 "),LV=n(MRe,"A",{href:!0});var hTt=s(LV);PNo=r(hTt,"RobertaForMaskedLM"),hTt.forEach(t),BNo=r(MRe," (RoBERTa model)"),MRe.forEach(t),INo=i(H),pb=n(H,"LI",{});var ERe=s(pb);ppe=n(ERe,"STRONG",{});var pTt=s(ppe);NNo=r(pTt,"roformer"),pTt.forEach(t),qNo=r(ERe," \u2014 "),yV=n(ERe,"A",{href:!0});var _Tt=s(yV);jNo=r(_Tt,"RoFormerForMaskedLM"),_Tt.forEach(t),DNo=r(ERe," (RoFormer model)"),ERe.forEach(t),GNo=i(H),_b=n(H,"LI",{});var CRe=s(_b);_pe=n(CRe,"STRONG",{});var uTt=s(_pe);ONo=r(uTt,"squeezebert"),uTt.forEach(t),VNo=r(CRe," \u2014 "),xV=n(CRe,"A",{href:!0});var bTt=s(xV);XNo=r(bTt,"SqueezeBertForMaskedLM"),bTt.forEach(t),zNo=r(CRe," (SqueezeBERT model)"),CRe.forEach(t),WNo=i(H),ub=n(H,"LI",{});var wRe=s(ub);upe=n(wRe,"STRONG",{});var vTt=s(upe);QNo=r(vTt,"tapas"),vTt.forEach(t),HNo=r(wRe," \u2014 "),$V=n(wRe,"A",{href:!0});var FTt=s($V);UNo=r(FTt,"TapasForMaskedLM"),FTt.forEach(t),JNo=r(wRe," (TAPAS model)"),wRe.forEach(t),YNo=i(H),bb=n(H,"LI",{});var ARe=s(bb);bpe=n(ARe,"STRONG",{});var TTt=s(bpe);KNo=r(TTt,"wav2vec2"),TTt.forEach(t),ZNo=r(ARe," \u2014 "),vpe=n(ARe,"CODE",{});var MTt=s(vpe);eqo=r(MTt,"Wav2Vec2ForMaskedLM"),MTt.forEach(t),oqo=r(ARe," (Wav2Vec2 model)"),ARe.forEach(t),rqo=i(H),vb=n(H,"LI",{});var LRe=s(vb);Fpe=n(LRe,"STRONG",{});var ETt=s(Fpe);tqo=r(ETt,"xlm"),ETt.forEach(t),aqo=r(LRe," \u2014 "),kV=n(LRe,"A",{href:!0});var CTt=s(kV);nqo=r(CTt,"XLMWithLMHeadModel"),CTt.forEach(t),sqo=r(LRe," (XLM model)"),LRe.forEach(t),lqo=i(H),Fb=n(H,"LI",{});var yRe=s(Fb);Tpe=n(yRe,"STRONG",{});var wTt=s(Tpe);iqo=r(wTt,"xlm-roberta"),wTt.forEach(t),dqo=r(yRe," \u2014 "),SV=n(yRe,"A",{href:!0});var ATt=s(SV);cqo=r(ATt,"XLMRobertaForMaskedLM"),ATt.forEach(t),fqo=r(yRe," (XLM-RoBERTa model)"),yRe.forEach(t),mqo=i(H),Tb=n(H,"LI",{});var xRe=s(Tb);Mpe=n(xRe,"STRONG",{});var LTt=s(Mpe);gqo=r(LTt,"xlm-roberta-xl"),LTt.forEach(t),hqo=r(xRe," \u2014 "),RV=n(xRe,"A",{href:!0});var yTt=s(RV);pqo=r(yTt,"XLMRobertaXLForMaskedLM"),yTt.forEach(t),_qo=r(xRe," (XLM-RoBERTa-XL model)"),xRe.forEach(t),uqo=i(H),Mb=n(H,"LI",{});var $Re=s(Mb);Epe=n($Re,"STRONG",{});var xTt=s(Epe);bqo=r(xTt,"yoso"),xTt.forEach(t),vqo=r($Re," \u2014 "),PV=n($Re,"A",{href:!0});var $Tt=s(PV);Fqo=r($Tt,"YosoForMaskedLM"),$Tt.forEach(t),Tqo=r($Re," (YOSO model)"),$Re.forEach(t),H.forEach(t),Mqo=i(ca),Eb=n(ca,"P",{});var kRe=s(Eb);Eqo=r(kRe,"The model is set in evaluation mode by default using "),Cpe=n(kRe,"CODE",{});var kTt=s(Cpe);Cqo=r(kTt,"model.eval()"),kTt.forEach(t),wqo=r(kRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wpe=n(kRe,"CODE",{});var STt=s(wpe);Aqo=r(STt,"model.train()"),STt.forEach(t),kRe.forEach(t),Lqo=i(ca),T(Cb.$$.fragment,ca),ca.forEach(t),sl.forEach(t),jXe=i(f),ed=n(f,"H2",{class:!0});var zWe=s(ed);wb=n(zWe,"A",{id:!0,class:!0,href:!0});var RTt=s(wb);Ape=n(RTt,"SPAN",{});var PTt=s(Ape);T(oL.$$.fragment,PTt),PTt.forEach(t),RTt.forEach(t),yqo=i(zWe),Lpe=n(zWe,"SPAN",{});var BTt=s(Lpe);xqo=r(BTt,"AutoModelForSeq2SeqLM"),BTt.forEach(t),zWe.forEach(t),DXe=i(f),Po=n(f,"DIV",{class:!0});var ll=s(Po);T(rL.$$.fragment,ll),$qo=i(ll),od=n(ll,"P",{});var Yre=s(od);kqo=r(Yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),BV=n(Yre,"A",{href:!0});var ITt=s(BV);Sqo=r(ITt,"from_pretrained()"),ITt.forEach(t),Rqo=r(Yre," class method or the "),IV=n(Yre,"A",{href:!0});var NTt=s(IV);Pqo=r(NTt,"from_config()"),NTt.forEach(t),Bqo=r(Yre,` class
method.`),Yre.forEach(t),Iqo=i(ll),tL=n(ll,"P",{});var WWe=s(tL);Nqo=r(WWe,"This class cannot be instantiated directly using "),ype=n(WWe,"CODE",{});var qTt=s(ype);qqo=r(qTt,"__init__()"),qTt.forEach(t),jqo=r(WWe," (throws an error)."),WWe.forEach(t),Dqo=i(ll),mt=n(ll,"DIV",{class:!0});var Tw=s(mt);T(aL.$$.fragment,Tw),Gqo=i(Tw),xpe=n(Tw,"P",{});var jTt=s(xpe);Oqo=r(jTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),jTt.forEach(t),Vqo=i(Tw),rd=n(Tw,"P",{});var Kre=s(rd);Xqo=r(Kre,`Note:
Loading a model from its configuration file does `),$pe=n(Kre,"STRONG",{});var DTt=s($pe);zqo=r(DTt,"not"),DTt.forEach(t),Wqo=r(Kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),NV=n(Kre,"A",{href:!0});var GTt=s(NV);Qqo=r(GTt,"from_pretrained()"),GTt.forEach(t),Hqo=r(Kre," to load the model weights."),Kre.forEach(t),Uqo=i(Tw),T(Ab.$$.fragment,Tw),Tw.forEach(t),Jqo=i(ll),oo=n(ll,"DIV",{class:!0});var fa=s(oo);T(nL.$$.fragment,fa),Yqo=i(fa),kpe=n(fa,"P",{});var OTt=s(kpe);Kqo=r(OTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),OTt.forEach(t),Zqo=i(fa),Da=n(fa,"P",{});var Mw=s(Da);ejo=r(Mw,"The model class to instantiate is selected based on the "),Spe=n(Mw,"CODE",{});var VTt=s(Spe);ojo=r(VTt,"model_type"),VTt.forEach(t),rjo=r(Mw,` property of the config object (either
passed as an argument or loaded from `),Rpe=n(Mw,"CODE",{});var XTt=s(Rpe);tjo=r(XTt,"pretrained_model_name_or_path"),XTt.forEach(t),ajo=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ppe=n(Mw,"CODE",{});var zTt=s(Ppe);njo=r(zTt,"pretrained_model_name_or_path"),zTt.forEach(t),sjo=r(Mw,":"),Mw.forEach(t),ljo=i(fa),pe=n(fa,"UL",{});var be=s(pe);Lb=n(be,"LI",{});var SRe=s(Lb);Bpe=n(SRe,"STRONG",{});var WTt=s(Bpe);ijo=r(WTt,"bart"),WTt.forEach(t),djo=r(SRe," \u2014 "),qV=n(SRe,"A",{href:!0});var QTt=s(qV);cjo=r(QTt,"BartForConditionalGeneration"),QTt.forEach(t),fjo=r(SRe," (BART model)"),SRe.forEach(t),mjo=i(be),yb=n(be,"LI",{});var RRe=s(yb);Ipe=n(RRe,"STRONG",{});var HTt=s(Ipe);gjo=r(HTt,"bigbird_pegasus"),HTt.forEach(t),hjo=r(RRe," \u2014 "),jV=n(RRe,"A",{href:!0});var UTt=s(jV);pjo=r(UTt,"BigBirdPegasusForConditionalGeneration"),UTt.forEach(t),_jo=r(RRe," (BigBird-Pegasus model)"),RRe.forEach(t),ujo=i(be),xb=n(be,"LI",{});var PRe=s(xb);Npe=n(PRe,"STRONG",{});var JTt=s(Npe);bjo=r(JTt,"blenderbot"),JTt.forEach(t),vjo=r(PRe," \u2014 "),DV=n(PRe,"A",{href:!0});var YTt=s(DV);Fjo=r(YTt,"BlenderbotForConditionalGeneration"),YTt.forEach(t),Tjo=r(PRe," (Blenderbot model)"),PRe.forEach(t),Mjo=i(be),$b=n(be,"LI",{});var BRe=s($b);qpe=n(BRe,"STRONG",{});var KTt=s(qpe);Ejo=r(KTt,"blenderbot-small"),KTt.forEach(t),Cjo=r(BRe," \u2014 "),GV=n(BRe,"A",{href:!0});var ZTt=s(GV);wjo=r(ZTt,"BlenderbotSmallForConditionalGeneration"),ZTt.forEach(t),Ajo=r(BRe," (BlenderbotSmall model)"),BRe.forEach(t),Ljo=i(be),kb=n(be,"LI",{});var IRe=s(kb);jpe=n(IRe,"STRONG",{});var e7t=s(jpe);yjo=r(e7t,"encoder-decoder"),e7t.forEach(t),xjo=r(IRe," \u2014 "),OV=n(IRe,"A",{href:!0});var o7t=s(OV);$jo=r(o7t,"EncoderDecoderModel"),o7t.forEach(t),kjo=r(IRe," (Encoder decoder model)"),IRe.forEach(t),Sjo=i(be),Sb=n(be,"LI",{});var NRe=s(Sb);Dpe=n(NRe,"STRONG",{});var r7t=s(Dpe);Rjo=r(r7t,"fsmt"),r7t.forEach(t),Pjo=r(NRe," \u2014 "),VV=n(NRe,"A",{href:!0});var t7t=s(VV);Bjo=r(t7t,"FSMTForConditionalGeneration"),t7t.forEach(t),Ijo=r(NRe," (FairSeq Machine-Translation model)"),NRe.forEach(t),Njo=i(be),Rb=n(be,"LI",{});var qRe=s(Rb);Gpe=n(qRe,"STRONG",{});var a7t=s(Gpe);qjo=r(a7t,"led"),a7t.forEach(t),jjo=r(qRe," \u2014 "),XV=n(qRe,"A",{href:!0});var n7t=s(XV);Djo=r(n7t,"LEDForConditionalGeneration"),n7t.forEach(t),Gjo=r(qRe," (LED model)"),qRe.forEach(t),Ojo=i(be),Pb=n(be,"LI",{});var jRe=s(Pb);Ope=n(jRe,"STRONG",{});var s7t=s(Ope);Vjo=r(s7t,"longt5"),s7t.forEach(t),Xjo=r(jRe," \u2014 "),zV=n(jRe,"A",{href:!0});var l7t=s(zV);zjo=r(l7t,"LongT5ForConditionalGeneration"),l7t.forEach(t),Wjo=r(jRe," (LongT5 model)"),jRe.forEach(t),Qjo=i(be),Bb=n(be,"LI",{});var DRe=s(Bb);Vpe=n(DRe,"STRONG",{});var i7t=s(Vpe);Hjo=r(i7t,"m2m_100"),i7t.forEach(t),Ujo=r(DRe," \u2014 "),WV=n(DRe,"A",{href:!0});var d7t=s(WV);Jjo=r(d7t,"M2M100ForConditionalGeneration"),d7t.forEach(t),Yjo=r(DRe," (M2M100 model)"),DRe.forEach(t),Kjo=i(be),Ib=n(be,"LI",{});var GRe=s(Ib);Xpe=n(GRe,"STRONG",{});var c7t=s(Xpe);Zjo=r(c7t,"marian"),c7t.forEach(t),eDo=r(GRe," \u2014 "),QV=n(GRe,"A",{href:!0});var f7t=s(QV);oDo=r(f7t,"MarianMTModel"),f7t.forEach(t),rDo=r(GRe," (Marian model)"),GRe.forEach(t),tDo=i(be),Nb=n(be,"LI",{});var ORe=s(Nb);zpe=n(ORe,"STRONG",{});var m7t=s(zpe);aDo=r(m7t,"mbart"),m7t.forEach(t),nDo=r(ORe," \u2014 "),HV=n(ORe,"A",{href:!0});var g7t=s(HV);sDo=r(g7t,"MBartForConditionalGeneration"),g7t.forEach(t),lDo=r(ORe," (mBART model)"),ORe.forEach(t),iDo=i(be),qb=n(be,"LI",{});var VRe=s(qb);Wpe=n(VRe,"STRONG",{});var h7t=s(Wpe);dDo=r(h7t,"mt5"),h7t.forEach(t),cDo=r(VRe," \u2014 "),UV=n(VRe,"A",{href:!0});var p7t=s(UV);fDo=r(p7t,"MT5ForConditionalGeneration"),p7t.forEach(t),mDo=r(VRe," (MT5 model)"),VRe.forEach(t),gDo=i(be),jb=n(be,"LI",{});var XRe=s(jb);Qpe=n(XRe,"STRONG",{});var _7t=s(Qpe);hDo=r(_7t,"mvp"),_7t.forEach(t),pDo=r(XRe," \u2014 "),JV=n(XRe,"A",{href:!0});var u7t=s(JV);_Do=r(u7t,"MvpForConditionalGeneration"),u7t.forEach(t),uDo=r(XRe," (MVP model)"),XRe.forEach(t),bDo=i(be),Db=n(be,"LI",{});var zRe=s(Db);Hpe=n(zRe,"STRONG",{});var b7t=s(Hpe);vDo=r(b7t,"pegasus"),b7t.forEach(t),FDo=r(zRe," \u2014 "),YV=n(zRe,"A",{href:!0});var v7t=s(YV);TDo=r(v7t,"PegasusForConditionalGeneration"),v7t.forEach(t),MDo=r(zRe," (Pegasus model)"),zRe.forEach(t),EDo=i(be),Gb=n(be,"LI",{});var WRe=s(Gb);Upe=n(WRe,"STRONG",{});var F7t=s(Upe);CDo=r(F7t,"plbart"),F7t.forEach(t),wDo=r(WRe," \u2014 "),KV=n(WRe,"A",{href:!0});var T7t=s(KV);ADo=r(T7t,"PLBartForConditionalGeneration"),T7t.forEach(t),LDo=r(WRe," (PLBart model)"),WRe.forEach(t),yDo=i(be),Ob=n(be,"LI",{});var QRe=s(Ob);Jpe=n(QRe,"STRONG",{});var M7t=s(Jpe);xDo=r(M7t,"prophetnet"),M7t.forEach(t),$Do=r(QRe," \u2014 "),ZV=n(QRe,"A",{href:!0});var E7t=s(ZV);kDo=r(E7t,"ProphetNetForConditionalGeneration"),E7t.forEach(t),SDo=r(QRe," (ProphetNet model)"),QRe.forEach(t),RDo=i(be),Vb=n(be,"LI",{});var HRe=s(Vb);Ype=n(HRe,"STRONG",{});var C7t=s(Ype);PDo=r(C7t,"t5"),C7t.forEach(t),BDo=r(HRe," \u2014 "),eX=n(HRe,"A",{href:!0});var w7t=s(eX);IDo=r(w7t,"T5ForConditionalGeneration"),w7t.forEach(t),NDo=r(HRe," (T5 model)"),HRe.forEach(t),qDo=i(be),Xb=n(be,"LI",{});var URe=s(Xb);Kpe=n(URe,"STRONG",{});var A7t=s(Kpe);jDo=r(A7t,"xlm-prophetnet"),A7t.forEach(t),DDo=r(URe," \u2014 "),oX=n(URe,"A",{href:!0});var L7t=s(oX);GDo=r(L7t,"XLMProphetNetForConditionalGeneration"),L7t.forEach(t),ODo=r(URe," (XLM-ProphetNet model)"),URe.forEach(t),be.forEach(t),VDo=i(fa),zb=n(fa,"P",{});var JRe=s(zb);XDo=r(JRe,"The model is set in evaluation mode by default using "),Zpe=n(JRe,"CODE",{});var y7t=s(Zpe);zDo=r(y7t,"model.eval()"),y7t.forEach(t),WDo=r(JRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e_e=n(JRe,"CODE",{});var x7t=s(e_e);QDo=r(x7t,"model.train()"),x7t.forEach(t),JRe.forEach(t),HDo=i(fa),T(Wb.$$.fragment,fa),fa.forEach(t),ll.forEach(t),GXe=i(f),td=n(f,"H2",{class:!0});var QWe=s(td);Qb=n(QWe,"A",{id:!0,class:!0,href:!0});var $7t=s(Qb);o_e=n($7t,"SPAN",{});var k7t=s(o_e);T(sL.$$.fragment,k7t),k7t.forEach(t),$7t.forEach(t),UDo=i(QWe),r_e=n(QWe,"SPAN",{});var S7t=s(r_e);JDo=r(S7t,"AutoModelForSequenceClassification"),S7t.forEach(t),QWe.forEach(t),OXe=i(f),Bo=n(f,"DIV",{class:!0});var il=s(Bo);T(lL.$$.fragment,il),YDo=i(il),ad=n(il,"P",{});var Zre=s(ad);KDo=r(Zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),rX=n(Zre,"A",{href:!0});var R7t=s(rX);ZDo=r(R7t,"from_pretrained()"),R7t.forEach(t),eGo=r(Zre," class method or the "),tX=n(Zre,"A",{href:!0});var P7t=s(tX);oGo=r(P7t,"from_config()"),P7t.forEach(t),rGo=r(Zre,` class
method.`),Zre.forEach(t),tGo=i(il),iL=n(il,"P",{});var HWe=s(iL);aGo=r(HWe,"This class cannot be instantiated directly using "),t_e=n(HWe,"CODE",{});var B7t=s(t_e);nGo=r(B7t,"__init__()"),B7t.forEach(t),sGo=r(HWe," (throws an error)."),HWe.forEach(t),lGo=i(il),gt=n(il,"DIV",{class:!0});var Ew=s(gt);T(dL.$$.fragment,Ew),iGo=i(Ew),a_e=n(Ew,"P",{});var I7t=s(a_e);dGo=r(I7t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),I7t.forEach(t),cGo=i(Ew),nd=n(Ew,"P",{});var ete=s(nd);fGo=r(ete,`Note:
Loading a model from its configuration file does `),n_e=n(ete,"STRONG",{});var N7t=s(n_e);mGo=r(N7t,"not"),N7t.forEach(t),gGo=r(ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=n(ete,"A",{href:!0});var q7t=s(aX);hGo=r(q7t,"from_pretrained()"),q7t.forEach(t),pGo=r(ete," to load the model weights."),ete.forEach(t),_Go=i(Ew),T(Hb.$$.fragment,Ew),Ew.forEach(t),uGo=i(il),ro=n(il,"DIV",{class:!0});var ma=s(ro);T(cL.$$.fragment,ma),bGo=i(ma),s_e=n(ma,"P",{});var j7t=s(s_e);vGo=r(j7t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),j7t.forEach(t),FGo=i(ma),Ga=n(ma,"P",{});var Cw=s(Ga);TGo=r(Cw,"The model class to instantiate is selected based on the "),l_e=n(Cw,"CODE",{});var D7t=s(l_e);MGo=r(D7t,"model_type"),D7t.forEach(t),EGo=r(Cw,` property of the config object (either
passed as an argument or loaded from `),i_e=n(Cw,"CODE",{});var G7t=s(i_e);CGo=r(G7t,"pretrained_model_name_or_path"),G7t.forEach(t),wGo=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d_e=n(Cw,"CODE",{});var O7t=s(d_e);AGo=r(O7t,"pretrained_model_name_or_path"),O7t.forEach(t),LGo=r(Cw,":"),Cw.forEach(t),yGo=i(ma),N=n(ma,"UL",{});var j=s(N);Ub=n(j,"LI",{});var YRe=s(Ub);c_e=n(YRe,"STRONG",{});var V7t=s(c_e);xGo=r(V7t,"albert"),V7t.forEach(t),$Go=r(YRe," \u2014 "),nX=n(YRe,"A",{href:!0});var X7t=s(nX);kGo=r(X7t,"AlbertForSequenceClassification"),X7t.forEach(t),SGo=r(YRe," (ALBERT model)"),YRe.forEach(t),RGo=i(j),Jb=n(j,"LI",{});var KRe=s(Jb);f_e=n(KRe,"STRONG",{});var z7t=s(f_e);PGo=r(z7t,"bart"),z7t.forEach(t),BGo=r(KRe," \u2014 "),sX=n(KRe,"A",{href:!0});var W7t=s(sX);IGo=r(W7t,"BartForSequenceClassification"),W7t.forEach(t),NGo=r(KRe," (BART model)"),KRe.forEach(t),qGo=i(j),Yb=n(j,"LI",{});var ZRe=s(Yb);m_e=n(ZRe,"STRONG",{});var Q7t=s(m_e);jGo=r(Q7t,"bert"),Q7t.forEach(t),DGo=r(ZRe," \u2014 "),lX=n(ZRe,"A",{href:!0});var H7t=s(lX);GGo=r(H7t,"BertForSequenceClassification"),H7t.forEach(t),OGo=r(ZRe," (BERT model)"),ZRe.forEach(t),VGo=i(j),Kb=n(j,"LI",{});var ePe=s(Kb);g_e=n(ePe,"STRONG",{});var U7t=s(g_e);XGo=r(U7t,"big_bird"),U7t.forEach(t),zGo=r(ePe," \u2014 "),iX=n(ePe,"A",{href:!0});var J7t=s(iX);WGo=r(J7t,"BigBirdForSequenceClassification"),J7t.forEach(t),QGo=r(ePe," (BigBird model)"),ePe.forEach(t),HGo=i(j),Zb=n(j,"LI",{});var oPe=s(Zb);h_e=n(oPe,"STRONG",{});var Y7t=s(h_e);UGo=r(Y7t,"bigbird_pegasus"),Y7t.forEach(t),JGo=r(oPe," \u2014 "),dX=n(oPe,"A",{href:!0});var K7t=s(dX);YGo=r(K7t,"BigBirdPegasusForSequenceClassification"),K7t.forEach(t),KGo=r(oPe," (BigBird-Pegasus model)"),oPe.forEach(t),ZGo=i(j),ev=n(j,"LI",{});var rPe=s(ev);p_e=n(rPe,"STRONG",{});var Z7t=s(p_e);eOo=r(Z7t,"bloom"),Z7t.forEach(t),oOo=r(rPe," \u2014 "),cX=n(rPe,"A",{href:!0});var e8t=s(cX);rOo=r(e8t,"BloomForSequenceClassification"),e8t.forEach(t),tOo=r(rPe," (BLOOM model)"),rPe.forEach(t),aOo=i(j),ov=n(j,"LI",{});var tPe=s(ov);__e=n(tPe,"STRONG",{});var o8t=s(__e);nOo=r(o8t,"camembert"),o8t.forEach(t),sOo=r(tPe," \u2014 "),fX=n(tPe,"A",{href:!0});var r8t=s(fX);lOo=r(r8t,"CamembertForSequenceClassification"),r8t.forEach(t),iOo=r(tPe," (CamemBERT model)"),tPe.forEach(t),dOo=i(j),rv=n(j,"LI",{});var aPe=s(rv);u_e=n(aPe,"STRONG",{});var t8t=s(u_e);cOo=r(t8t,"canine"),t8t.forEach(t),fOo=r(aPe," \u2014 "),mX=n(aPe,"A",{href:!0});var a8t=s(mX);mOo=r(a8t,"CanineForSequenceClassification"),a8t.forEach(t),gOo=r(aPe," (CANINE model)"),aPe.forEach(t),hOo=i(j),tv=n(j,"LI",{});var nPe=s(tv);b_e=n(nPe,"STRONG",{});var n8t=s(b_e);pOo=r(n8t,"convbert"),n8t.forEach(t),_Oo=r(nPe," \u2014 "),gX=n(nPe,"A",{href:!0});var s8t=s(gX);uOo=r(s8t,"ConvBertForSequenceClassification"),s8t.forEach(t),bOo=r(nPe," (ConvBERT model)"),nPe.forEach(t),vOo=i(j),av=n(j,"LI",{});var sPe=s(av);v_e=n(sPe,"STRONG",{});var l8t=s(v_e);FOo=r(l8t,"ctrl"),l8t.forEach(t),TOo=r(sPe," \u2014 "),hX=n(sPe,"A",{href:!0});var i8t=s(hX);MOo=r(i8t,"CTRLForSequenceClassification"),i8t.forEach(t),EOo=r(sPe," (CTRL model)"),sPe.forEach(t),COo=i(j),nv=n(j,"LI",{});var lPe=s(nv);F_e=n(lPe,"STRONG",{});var d8t=s(F_e);wOo=r(d8t,"data2vec-text"),d8t.forEach(t),AOo=r(lPe," \u2014 "),pX=n(lPe,"A",{href:!0});var c8t=s(pX);LOo=r(c8t,"Data2VecTextForSequenceClassification"),c8t.forEach(t),yOo=r(lPe," (Data2VecText model)"),lPe.forEach(t),xOo=i(j),sv=n(j,"LI",{});var iPe=s(sv);T_e=n(iPe,"STRONG",{});var f8t=s(T_e);$Oo=r(f8t,"deberta"),f8t.forEach(t),kOo=r(iPe," \u2014 "),_X=n(iPe,"A",{href:!0});var m8t=s(_X);SOo=r(m8t,"DebertaForSequenceClassification"),m8t.forEach(t),ROo=r(iPe," (DeBERTa model)"),iPe.forEach(t),POo=i(j),lv=n(j,"LI",{});var dPe=s(lv);M_e=n(dPe,"STRONG",{});var g8t=s(M_e);BOo=r(g8t,"deberta-v2"),g8t.forEach(t),IOo=r(dPe," \u2014 "),uX=n(dPe,"A",{href:!0});var h8t=s(uX);NOo=r(h8t,"DebertaV2ForSequenceClassification"),h8t.forEach(t),qOo=r(dPe," (DeBERTa-v2 model)"),dPe.forEach(t),jOo=i(j),iv=n(j,"LI",{});var cPe=s(iv);E_e=n(cPe,"STRONG",{});var p8t=s(E_e);DOo=r(p8t,"distilbert"),p8t.forEach(t),GOo=r(cPe," \u2014 "),bX=n(cPe,"A",{href:!0});var _8t=s(bX);OOo=r(_8t,"DistilBertForSequenceClassification"),_8t.forEach(t),VOo=r(cPe," (DistilBERT model)"),cPe.forEach(t),XOo=i(j),dv=n(j,"LI",{});var fPe=s(dv);C_e=n(fPe,"STRONG",{});var u8t=s(C_e);zOo=r(u8t,"electra"),u8t.forEach(t),WOo=r(fPe," \u2014 "),vX=n(fPe,"A",{href:!0});var b8t=s(vX);QOo=r(b8t,"ElectraForSequenceClassification"),b8t.forEach(t),HOo=r(fPe," (ELECTRA model)"),fPe.forEach(t),UOo=i(j),cv=n(j,"LI",{});var mPe=s(cv);w_e=n(mPe,"STRONG",{});var v8t=s(w_e);JOo=r(v8t,"flaubert"),v8t.forEach(t),YOo=r(mPe," \u2014 "),FX=n(mPe,"A",{href:!0});var F8t=s(FX);KOo=r(F8t,"FlaubertForSequenceClassification"),F8t.forEach(t),ZOo=r(mPe," (FlauBERT model)"),mPe.forEach(t),eVo=i(j),fv=n(j,"LI",{});var gPe=s(fv);A_e=n(gPe,"STRONG",{});var T8t=s(A_e);oVo=r(T8t,"fnet"),T8t.forEach(t),rVo=r(gPe," \u2014 "),TX=n(gPe,"A",{href:!0});var M8t=s(TX);tVo=r(M8t,"FNetForSequenceClassification"),M8t.forEach(t),aVo=r(gPe," (FNet model)"),gPe.forEach(t),nVo=i(j),mv=n(j,"LI",{});var hPe=s(mv);L_e=n(hPe,"STRONG",{});var E8t=s(L_e);sVo=r(E8t,"funnel"),E8t.forEach(t),lVo=r(hPe," \u2014 "),MX=n(hPe,"A",{href:!0});var C8t=s(MX);iVo=r(C8t,"FunnelForSequenceClassification"),C8t.forEach(t),dVo=r(hPe," (Funnel Transformer model)"),hPe.forEach(t),cVo=i(j),gv=n(j,"LI",{});var pPe=s(gv);y_e=n(pPe,"STRONG",{});var w8t=s(y_e);fVo=r(w8t,"gpt2"),w8t.forEach(t),mVo=r(pPe," \u2014 "),EX=n(pPe,"A",{href:!0});var A8t=s(EX);gVo=r(A8t,"GPT2ForSequenceClassification"),A8t.forEach(t),hVo=r(pPe," (OpenAI GPT-2 model)"),pPe.forEach(t),pVo=i(j),hv=n(j,"LI",{});var _Pe=s(hv);x_e=n(_Pe,"STRONG",{});var L8t=s(x_e);_Vo=r(L8t,"gpt_neo"),L8t.forEach(t),uVo=r(_Pe," \u2014 "),CX=n(_Pe,"A",{href:!0});var y8t=s(CX);bVo=r(y8t,"GPTNeoForSequenceClassification"),y8t.forEach(t),vVo=r(_Pe," (GPT Neo model)"),_Pe.forEach(t),FVo=i(j),pv=n(j,"LI",{});var uPe=s(pv);$_e=n(uPe,"STRONG",{});var x8t=s($_e);TVo=r(x8t,"gptj"),x8t.forEach(t),MVo=r(uPe," \u2014 "),wX=n(uPe,"A",{href:!0});var $8t=s(wX);EVo=r($8t,"GPTJForSequenceClassification"),$8t.forEach(t),CVo=r(uPe," (GPT-J model)"),uPe.forEach(t),wVo=i(j),_v=n(j,"LI",{});var bPe=s(_v);k_e=n(bPe,"STRONG",{});var k8t=s(k_e);AVo=r(k8t,"ibert"),k8t.forEach(t),LVo=r(bPe," \u2014 "),AX=n(bPe,"A",{href:!0});var S8t=s(AX);yVo=r(S8t,"IBertForSequenceClassification"),S8t.forEach(t),xVo=r(bPe," (I-BERT model)"),bPe.forEach(t),$Vo=i(j),uv=n(j,"LI",{});var vPe=s(uv);S_e=n(vPe,"STRONG",{});var R8t=s(S_e);kVo=r(R8t,"layoutlm"),R8t.forEach(t),SVo=r(vPe," \u2014 "),LX=n(vPe,"A",{href:!0});var P8t=s(LX);RVo=r(P8t,"LayoutLMForSequenceClassification"),P8t.forEach(t),PVo=r(vPe," (LayoutLM model)"),vPe.forEach(t),BVo=i(j),bv=n(j,"LI",{});var FPe=s(bv);R_e=n(FPe,"STRONG",{});var B8t=s(R_e);IVo=r(B8t,"layoutlmv2"),B8t.forEach(t),NVo=r(FPe," \u2014 "),yX=n(FPe,"A",{href:!0});var I8t=s(yX);qVo=r(I8t,"LayoutLMv2ForSequenceClassification"),I8t.forEach(t),jVo=r(FPe," (LayoutLMv2 model)"),FPe.forEach(t),DVo=i(j),vv=n(j,"LI",{});var TPe=s(vv);P_e=n(TPe,"STRONG",{});var N8t=s(P_e);GVo=r(N8t,"layoutlmv3"),N8t.forEach(t),OVo=r(TPe," \u2014 "),xX=n(TPe,"A",{href:!0});var q8t=s(xX);VVo=r(q8t,"LayoutLMv3ForSequenceClassification"),q8t.forEach(t),XVo=r(TPe," (LayoutLMv3 model)"),TPe.forEach(t),zVo=i(j),Fv=n(j,"LI",{});var MPe=s(Fv);B_e=n(MPe,"STRONG",{});var j8t=s(B_e);WVo=r(j8t,"led"),j8t.forEach(t),QVo=r(MPe," \u2014 "),$X=n(MPe,"A",{href:!0});var D8t=s($X);HVo=r(D8t,"LEDForSequenceClassification"),D8t.forEach(t),UVo=r(MPe," (LED model)"),MPe.forEach(t),JVo=i(j),Tv=n(j,"LI",{});var EPe=s(Tv);I_e=n(EPe,"STRONG",{});var G8t=s(I_e);YVo=r(G8t,"longformer"),G8t.forEach(t),KVo=r(EPe," \u2014 "),kX=n(EPe,"A",{href:!0});var O8t=s(kX);ZVo=r(O8t,"LongformerForSequenceClassification"),O8t.forEach(t),eXo=r(EPe," (Longformer model)"),EPe.forEach(t),oXo=i(j),Mv=n(j,"LI",{});var CPe=s(Mv);N_e=n(CPe,"STRONG",{});var V8t=s(N_e);rXo=r(V8t,"mbart"),V8t.forEach(t),tXo=r(CPe," \u2014 "),SX=n(CPe,"A",{href:!0});var X8t=s(SX);aXo=r(X8t,"MBartForSequenceClassification"),X8t.forEach(t),nXo=r(CPe," (mBART model)"),CPe.forEach(t),sXo=i(j),Ev=n(j,"LI",{});var wPe=s(Ev);q_e=n(wPe,"STRONG",{});var z8t=s(q_e);lXo=r(z8t,"megatron-bert"),z8t.forEach(t),iXo=r(wPe," \u2014 "),RX=n(wPe,"A",{href:!0});var W8t=s(RX);dXo=r(W8t,"MegatronBertForSequenceClassification"),W8t.forEach(t),cXo=r(wPe," (Megatron-BERT model)"),wPe.forEach(t),fXo=i(j),Cv=n(j,"LI",{});var APe=s(Cv);j_e=n(APe,"STRONG",{});var Q8t=s(j_e);mXo=r(Q8t,"mobilebert"),Q8t.forEach(t),gXo=r(APe," \u2014 "),PX=n(APe,"A",{href:!0});var H8t=s(PX);hXo=r(H8t,"MobileBertForSequenceClassification"),H8t.forEach(t),pXo=r(APe," (MobileBERT model)"),APe.forEach(t),_Xo=i(j),wv=n(j,"LI",{});var LPe=s(wv);D_e=n(LPe,"STRONG",{});var U8t=s(D_e);uXo=r(U8t,"mpnet"),U8t.forEach(t),bXo=r(LPe," \u2014 "),BX=n(LPe,"A",{href:!0});var J8t=s(BX);vXo=r(J8t,"MPNetForSequenceClassification"),J8t.forEach(t),FXo=r(LPe," (MPNet model)"),LPe.forEach(t),TXo=i(j),Av=n(j,"LI",{});var yPe=s(Av);G_e=n(yPe,"STRONG",{});var Y8t=s(G_e);MXo=r(Y8t,"mvp"),Y8t.forEach(t),EXo=r(yPe," \u2014 "),IX=n(yPe,"A",{href:!0});var K8t=s(IX);CXo=r(K8t,"MvpForSequenceClassification"),K8t.forEach(t),wXo=r(yPe," (MVP model)"),yPe.forEach(t),AXo=i(j),Lv=n(j,"LI",{});var xPe=s(Lv);O_e=n(xPe,"STRONG",{});var Z8t=s(O_e);LXo=r(Z8t,"nezha"),Z8t.forEach(t),yXo=r(xPe," \u2014 "),NX=n(xPe,"A",{href:!0});var e9t=s(NX);xXo=r(e9t,"NezhaForSequenceClassification"),e9t.forEach(t),$Xo=r(xPe," (Nezha model)"),xPe.forEach(t),kXo=i(j),yv=n(j,"LI",{});var $Pe=s(yv);V_e=n($Pe,"STRONG",{});var o9t=s(V_e);SXo=r(o9t,"nystromformer"),o9t.forEach(t),RXo=r($Pe," \u2014 "),qX=n($Pe,"A",{href:!0});var r9t=s(qX);PXo=r(r9t,"NystromformerForSequenceClassification"),r9t.forEach(t),BXo=r($Pe," (Nystr\xF6mformer model)"),$Pe.forEach(t),IXo=i(j),xv=n(j,"LI",{});var kPe=s(xv);X_e=n(kPe,"STRONG",{});var t9t=s(X_e);NXo=r(t9t,"openai-gpt"),t9t.forEach(t),qXo=r(kPe," \u2014 "),jX=n(kPe,"A",{href:!0});var a9t=s(jX);jXo=r(a9t,"OpenAIGPTForSequenceClassification"),a9t.forEach(t),DXo=r(kPe," (OpenAI GPT model)"),kPe.forEach(t),GXo=i(j),$v=n(j,"LI",{});var SPe=s($v);z_e=n(SPe,"STRONG",{});var n9t=s(z_e);OXo=r(n9t,"perceiver"),n9t.forEach(t),VXo=r(SPe," \u2014 "),DX=n(SPe,"A",{href:!0});var s9t=s(DX);XXo=r(s9t,"PerceiverForSequenceClassification"),s9t.forEach(t),zXo=r(SPe," (Perceiver model)"),SPe.forEach(t),WXo=i(j),kv=n(j,"LI",{});var RPe=s(kv);W_e=n(RPe,"STRONG",{});var l9t=s(W_e);QXo=r(l9t,"plbart"),l9t.forEach(t),HXo=r(RPe," \u2014 "),GX=n(RPe,"A",{href:!0});var i9t=s(GX);UXo=r(i9t,"PLBartForSequenceClassification"),i9t.forEach(t),JXo=r(RPe," (PLBart model)"),RPe.forEach(t),YXo=i(j),Sv=n(j,"LI",{});var PPe=s(Sv);Q_e=n(PPe,"STRONG",{});var d9t=s(Q_e);KXo=r(d9t,"qdqbert"),d9t.forEach(t),ZXo=r(PPe," \u2014 "),OX=n(PPe,"A",{href:!0});var c9t=s(OX);ezo=r(c9t,"QDQBertForSequenceClassification"),c9t.forEach(t),ozo=r(PPe," (QDQBert model)"),PPe.forEach(t),rzo=i(j),Rv=n(j,"LI",{});var BPe=s(Rv);H_e=n(BPe,"STRONG",{});var f9t=s(H_e);tzo=r(f9t,"reformer"),f9t.forEach(t),azo=r(BPe," \u2014 "),VX=n(BPe,"A",{href:!0});var m9t=s(VX);nzo=r(m9t,"ReformerForSequenceClassification"),m9t.forEach(t),szo=r(BPe," (Reformer model)"),BPe.forEach(t),lzo=i(j),Pv=n(j,"LI",{});var IPe=s(Pv);U_e=n(IPe,"STRONG",{});var g9t=s(U_e);izo=r(g9t,"rembert"),g9t.forEach(t),dzo=r(IPe," \u2014 "),XX=n(IPe,"A",{href:!0});var h9t=s(XX);czo=r(h9t,"RemBertForSequenceClassification"),h9t.forEach(t),fzo=r(IPe," (RemBERT model)"),IPe.forEach(t),mzo=i(j),Bv=n(j,"LI",{});var NPe=s(Bv);J_e=n(NPe,"STRONG",{});var p9t=s(J_e);gzo=r(p9t,"roberta"),p9t.forEach(t),hzo=r(NPe," \u2014 "),zX=n(NPe,"A",{href:!0});var _9t=s(zX);pzo=r(_9t,"RobertaForSequenceClassification"),_9t.forEach(t),_zo=r(NPe," (RoBERTa model)"),NPe.forEach(t),uzo=i(j),Iv=n(j,"LI",{});var qPe=s(Iv);Y_e=n(qPe,"STRONG",{});var u9t=s(Y_e);bzo=r(u9t,"roformer"),u9t.forEach(t),vzo=r(qPe," \u2014 "),WX=n(qPe,"A",{href:!0});var b9t=s(WX);Fzo=r(b9t,"RoFormerForSequenceClassification"),b9t.forEach(t),Tzo=r(qPe," (RoFormer model)"),qPe.forEach(t),Mzo=i(j),Nv=n(j,"LI",{});var jPe=s(Nv);K_e=n(jPe,"STRONG",{});var v9t=s(K_e);Ezo=r(v9t,"squeezebert"),v9t.forEach(t),Czo=r(jPe," \u2014 "),QX=n(jPe,"A",{href:!0});var F9t=s(QX);wzo=r(F9t,"SqueezeBertForSequenceClassification"),F9t.forEach(t),Azo=r(jPe," (SqueezeBERT model)"),jPe.forEach(t),Lzo=i(j),qv=n(j,"LI",{});var DPe=s(qv);Z_e=n(DPe,"STRONG",{});var T9t=s(Z_e);yzo=r(T9t,"tapas"),T9t.forEach(t),xzo=r(DPe," \u2014 "),HX=n(DPe,"A",{href:!0});var M9t=s(HX);$zo=r(M9t,"TapasForSequenceClassification"),M9t.forEach(t),kzo=r(DPe," (TAPAS model)"),DPe.forEach(t),Szo=i(j),jv=n(j,"LI",{});var GPe=s(jv);eue=n(GPe,"STRONG",{});var E9t=s(eue);Rzo=r(E9t,"transfo-xl"),E9t.forEach(t),Pzo=r(GPe," \u2014 "),UX=n(GPe,"A",{href:!0});var C9t=s(UX);Bzo=r(C9t,"TransfoXLForSequenceClassification"),C9t.forEach(t),Izo=r(GPe," (Transformer-XL model)"),GPe.forEach(t),Nzo=i(j),Dv=n(j,"LI",{});var OPe=s(Dv);oue=n(OPe,"STRONG",{});var w9t=s(oue);qzo=r(w9t,"xlm"),w9t.forEach(t),jzo=r(OPe," \u2014 "),JX=n(OPe,"A",{href:!0});var A9t=s(JX);Dzo=r(A9t,"XLMForSequenceClassification"),A9t.forEach(t),Gzo=r(OPe," (XLM model)"),OPe.forEach(t),Ozo=i(j),Gv=n(j,"LI",{});var VPe=s(Gv);rue=n(VPe,"STRONG",{});var L9t=s(rue);Vzo=r(L9t,"xlm-roberta"),L9t.forEach(t),Xzo=r(VPe," \u2014 "),YX=n(VPe,"A",{href:!0});var y9t=s(YX);zzo=r(y9t,"XLMRobertaForSequenceClassification"),y9t.forEach(t),Wzo=r(VPe," (XLM-RoBERTa model)"),VPe.forEach(t),Qzo=i(j),Ov=n(j,"LI",{});var XPe=s(Ov);tue=n(XPe,"STRONG",{});var x9t=s(tue);Hzo=r(x9t,"xlm-roberta-xl"),x9t.forEach(t),Uzo=r(XPe," \u2014 "),KX=n(XPe,"A",{href:!0});var $9t=s(KX);Jzo=r($9t,"XLMRobertaXLForSequenceClassification"),$9t.forEach(t),Yzo=r(XPe," (XLM-RoBERTa-XL model)"),XPe.forEach(t),Kzo=i(j),Vv=n(j,"LI",{});var zPe=s(Vv);aue=n(zPe,"STRONG",{});var k9t=s(aue);Zzo=r(k9t,"xlnet"),k9t.forEach(t),eWo=r(zPe," \u2014 "),ZX=n(zPe,"A",{href:!0});var S9t=s(ZX);oWo=r(S9t,"XLNetForSequenceClassification"),S9t.forEach(t),rWo=r(zPe," (XLNet model)"),zPe.forEach(t),tWo=i(j),Xv=n(j,"LI",{});var WPe=s(Xv);nue=n(WPe,"STRONG",{});var R9t=s(nue);aWo=r(R9t,"yoso"),R9t.forEach(t),nWo=r(WPe," \u2014 "),ez=n(WPe,"A",{href:!0});var P9t=s(ez);sWo=r(P9t,"YosoForSequenceClassification"),P9t.forEach(t),lWo=r(WPe," (YOSO model)"),WPe.forEach(t),j.forEach(t),iWo=i(ma),zv=n(ma,"P",{});var QPe=s(zv);dWo=r(QPe,"The model is set in evaluation mode by default using "),sue=n(QPe,"CODE",{});var B9t=s(sue);cWo=r(B9t,"model.eval()"),B9t.forEach(t),fWo=r(QPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lue=n(QPe,"CODE",{});var I9t=s(lue);mWo=r(I9t,"model.train()"),I9t.forEach(t),QPe.forEach(t),gWo=i(ma),T(Wv.$$.fragment,ma),ma.forEach(t),il.forEach(t),VXe=i(f),sd=n(f,"H2",{class:!0});var UWe=s(sd);Qv=n(UWe,"A",{id:!0,class:!0,href:!0});var N9t=s(Qv);iue=n(N9t,"SPAN",{});var q9t=s(iue);T(fL.$$.fragment,q9t),q9t.forEach(t),N9t.forEach(t),hWo=i(UWe),due=n(UWe,"SPAN",{});var j9t=s(due);pWo=r(j9t,"AutoModelForMultipleChoice"),j9t.forEach(t),UWe.forEach(t),XXe=i(f),Io=n(f,"DIV",{class:!0});var dl=s(Io);T(mL.$$.fragment,dl),_Wo=i(dl),ld=n(dl,"P",{});var ote=s(ld);uWo=r(ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),oz=n(ote,"A",{href:!0});var D9t=s(oz);bWo=r(D9t,"from_pretrained()"),D9t.forEach(t),vWo=r(ote," class method or the "),rz=n(ote,"A",{href:!0});var G9t=s(rz);FWo=r(G9t,"from_config()"),G9t.forEach(t),TWo=r(ote,` class
method.`),ote.forEach(t),MWo=i(dl),gL=n(dl,"P",{});var JWe=s(gL);EWo=r(JWe,"This class cannot be instantiated directly using "),cue=n(JWe,"CODE",{});var O9t=s(cue);CWo=r(O9t,"__init__()"),O9t.forEach(t),wWo=r(JWe," (throws an error)."),JWe.forEach(t),AWo=i(dl),ht=n(dl,"DIV",{class:!0});var ww=s(ht);T(hL.$$.fragment,ww),LWo=i(ww),fue=n(ww,"P",{});var V9t=s(fue);yWo=r(V9t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),V9t.forEach(t),xWo=i(ww),id=n(ww,"P",{});var rte=s(id);$Wo=r(rte,`Note:
Loading a model from its configuration file does `),mue=n(rte,"STRONG",{});var X9t=s(mue);kWo=r(X9t,"not"),X9t.forEach(t),SWo=r(rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),tz=n(rte,"A",{href:!0});var z9t=s(tz);RWo=r(z9t,"from_pretrained()"),z9t.forEach(t),PWo=r(rte," to load the model weights."),rte.forEach(t),BWo=i(ww),T(Hv.$$.fragment,ww),ww.forEach(t),IWo=i(dl),to=n(dl,"DIV",{class:!0});var ga=s(to);T(pL.$$.fragment,ga),NWo=i(ga),gue=n(ga,"P",{});var W9t=s(gue);qWo=r(W9t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),W9t.forEach(t),jWo=i(ga),Oa=n(ga,"P",{});var Aw=s(Oa);DWo=r(Aw,"The model class to instantiate is selected based on the "),hue=n(Aw,"CODE",{});var Q9t=s(hue);GWo=r(Q9t,"model_type"),Q9t.forEach(t),OWo=r(Aw,` property of the config object (either
passed as an argument or loaded from `),pue=n(Aw,"CODE",{});var H9t=s(pue);VWo=r(H9t,"pretrained_model_name_or_path"),H9t.forEach(t),XWo=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ue=n(Aw,"CODE",{});var U9t=s(_ue);zWo=r(U9t,"pretrained_model_name_or_path"),U9t.forEach(t),WWo=r(Aw,":"),Aw.forEach(t),QWo=i(ga),Z=n(ga,"UL",{});var ee=s(Z);Uv=n(ee,"LI",{});var HPe=s(Uv);uue=n(HPe,"STRONG",{});var J9t=s(uue);HWo=r(J9t,"albert"),J9t.forEach(t),UWo=r(HPe," \u2014 "),az=n(HPe,"A",{href:!0});var Y9t=s(az);JWo=r(Y9t,"AlbertForMultipleChoice"),Y9t.forEach(t),YWo=r(HPe," (ALBERT model)"),HPe.forEach(t),KWo=i(ee),Jv=n(ee,"LI",{});var UPe=s(Jv);bue=n(UPe,"STRONG",{});var K9t=s(bue);ZWo=r(K9t,"bert"),K9t.forEach(t),eQo=r(UPe," \u2014 "),nz=n(UPe,"A",{href:!0});var Z9t=s(nz);oQo=r(Z9t,"BertForMultipleChoice"),Z9t.forEach(t),rQo=r(UPe," (BERT model)"),UPe.forEach(t),tQo=i(ee),Yv=n(ee,"LI",{});var JPe=s(Yv);vue=n(JPe,"STRONG",{});var eMt=s(vue);aQo=r(eMt,"big_bird"),eMt.forEach(t),nQo=r(JPe," \u2014 "),sz=n(JPe,"A",{href:!0});var oMt=s(sz);sQo=r(oMt,"BigBirdForMultipleChoice"),oMt.forEach(t),lQo=r(JPe," (BigBird model)"),JPe.forEach(t),iQo=i(ee),Kv=n(ee,"LI",{});var YPe=s(Kv);Fue=n(YPe,"STRONG",{});var rMt=s(Fue);dQo=r(rMt,"camembert"),rMt.forEach(t),cQo=r(YPe," \u2014 "),lz=n(YPe,"A",{href:!0});var tMt=s(lz);fQo=r(tMt,"CamembertForMultipleChoice"),tMt.forEach(t),mQo=r(YPe," (CamemBERT model)"),YPe.forEach(t),gQo=i(ee),Zv=n(ee,"LI",{});var KPe=s(Zv);Tue=n(KPe,"STRONG",{});var aMt=s(Tue);hQo=r(aMt,"canine"),aMt.forEach(t),pQo=r(KPe," \u2014 "),iz=n(KPe,"A",{href:!0});var nMt=s(iz);_Qo=r(nMt,"CanineForMultipleChoice"),nMt.forEach(t),uQo=r(KPe," (CANINE model)"),KPe.forEach(t),bQo=i(ee),e3=n(ee,"LI",{});var ZPe=s(e3);Mue=n(ZPe,"STRONG",{});var sMt=s(Mue);vQo=r(sMt,"convbert"),sMt.forEach(t),FQo=r(ZPe," \u2014 "),dz=n(ZPe,"A",{href:!0});var lMt=s(dz);TQo=r(lMt,"ConvBertForMultipleChoice"),lMt.forEach(t),MQo=r(ZPe," (ConvBERT model)"),ZPe.forEach(t),EQo=i(ee),o3=n(ee,"LI",{});var eBe=s(o3);Eue=n(eBe,"STRONG",{});var iMt=s(Eue);CQo=r(iMt,"data2vec-text"),iMt.forEach(t),wQo=r(eBe," \u2014 "),cz=n(eBe,"A",{href:!0});var dMt=s(cz);AQo=r(dMt,"Data2VecTextForMultipleChoice"),dMt.forEach(t),LQo=r(eBe," (Data2VecText model)"),eBe.forEach(t),yQo=i(ee),r3=n(ee,"LI",{});var oBe=s(r3);Cue=n(oBe,"STRONG",{});var cMt=s(Cue);xQo=r(cMt,"deberta-v2"),cMt.forEach(t),$Qo=r(oBe," \u2014 "),fz=n(oBe,"A",{href:!0});var fMt=s(fz);kQo=r(fMt,"DebertaV2ForMultipleChoice"),fMt.forEach(t),SQo=r(oBe," (DeBERTa-v2 model)"),oBe.forEach(t),RQo=i(ee),t3=n(ee,"LI",{});var rBe=s(t3);wue=n(rBe,"STRONG",{});var mMt=s(wue);PQo=r(mMt,"distilbert"),mMt.forEach(t),BQo=r(rBe," \u2014 "),mz=n(rBe,"A",{href:!0});var gMt=s(mz);IQo=r(gMt,"DistilBertForMultipleChoice"),gMt.forEach(t),NQo=r(rBe," (DistilBERT model)"),rBe.forEach(t),qQo=i(ee),a3=n(ee,"LI",{});var tBe=s(a3);Aue=n(tBe,"STRONG",{});var hMt=s(Aue);jQo=r(hMt,"electra"),hMt.forEach(t),DQo=r(tBe," \u2014 "),gz=n(tBe,"A",{href:!0});var pMt=s(gz);GQo=r(pMt,"ElectraForMultipleChoice"),pMt.forEach(t),OQo=r(tBe," (ELECTRA model)"),tBe.forEach(t),VQo=i(ee),n3=n(ee,"LI",{});var aBe=s(n3);Lue=n(aBe,"STRONG",{});var _Mt=s(Lue);XQo=r(_Mt,"flaubert"),_Mt.forEach(t),zQo=r(aBe," \u2014 "),hz=n(aBe,"A",{href:!0});var uMt=s(hz);WQo=r(uMt,"FlaubertForMultipleChoice"),uMt.forEach(t),QQo=r(aBe," (FlauBERT model)"),aBe.forEach(t),HQo=i(ee),s3=n(ee,"LI",{});var nBe=s(s3);yue=n(nBe,"STRONG",{});var bMt=s(yue);UQo=r(bMt,"fnet"),bMt.forEach(t),JQo=r(nBe," \u2014 "),pz=n(nBe,"A",{href:!0});var vMt=s(pz);YQo=r(vMt,"FNetForMultipleChoice"),vMt.forEach(t),KQo=r(nBe," (FNet model)"),nBe.forEach(t),ZQo=i(ee),l3=n(ee,"LI",{});var sBe=s(l3);xue=n(sBe,"STRONG",{});var FMt=s(xue);eHo=r(FMt,"funnel"),FMt.forEach(t),oHo=r(sBe," \u2014 "),_z=n(sBe,"A",{href:!0});var TMt=s(_z);rHo=r(TMt,"FunnelForMultipleChoice"),TMt.forEach(t),tHo=r(sBe," (Funnel Transformer model)"),sBe.forEach(t),aHo=i(ee),i3=n(ee,"LI",{});var lBe=s(i3);$ue=n(lBe,"STRONG",{});var MMt=s($ue);nHo=r(MMt,"ibert"),MMt.forEach(t),sHo=r(lBe," \u2014 "),uz=n(lBe,"A",{href:!0});var EMt=s(uz);lHo=r(EMt,"IBertForMultipleChoice"),EMt.forEach(t),iHo=r(lBe," (I-BERT model)"),lBe.forEach(t),dHo=i(ee),d3=n(ee,"LI",{});var iBe=s(d3);kue=n(iBe,"STRONG",{});var CMt=s(kue);cHo=r(CMt,"longformer"),CMt.forEach(t),fHo=r(iBe," \u2014 "),bz=n(iBe,"A",{href:!0});var wMt=s(bz);mHo=r(wMt,"LongformerForMultipleChoice"),wMt.forEach(t),gHo=r(iBe," (Longformer model)"),iBe.forEach(t),hHo=i(ee),c3=n(ee,"LI",{});var dBe=s(c3);Sue=n(dBe,"STRONG",{});var AMt=s(Sue);pHo=r(AMt,"megatron-bert"),AMt.forEach(t),_Ho=r(dBe," \u2014 "),vz=n(dBe,"A",{href:!0});var LMt=s(vz);uHo=r(LMt,"MegatronBertForMultipleChoice"),LMt.forEach(t),bHo=r(dBe," (Megatron-BERT model)"),dBe.forEach(t),vHo=i(ee),f3=n(ee,"LI",{});var cBe=s(f3);Rue=n(cBe,"STRONG",{});var yMt=s(Rue);FHo=r(yMt,"mobilebert"),yMt.forEach(t),THo=r(cBe," \u2014 "),Fz=n(cBe,"A",{href:!0});var xMt=s(Fz);MHo=r(xMt,"MobileBertForMultipleChoice"),xMt.forEach(t),EHo=r(cBe," (MobileBERT model)"),cBe.forEach(t),CHo=i(ee),m3=n(ee,"LI",{});var fBe=s(m3);Pue=n(fBe,"STRONG",{});var $Mt=s(Pue);wHo=r($Mt,"mpnet"),$Mt.forEach(t),AHo=r(fBe," \u2014 "),Tz=n(fBe,"A",{href:!0});var kMt=s(Tz);LHo=r(kMt,"MPNetForMultipleChoice"),kMt.forEach(t),yHo=r(fBe," (MPNet model)"),fBe.forEach(t),xHo=i(ee),g3=n(ee,"LI",{});var mBe=s(g3);Bue=n(mBe,"STRONG",{});var SMt=s(Bue);$Ho=r(SMt,"nezha"),SMt.forEach(t),kHo=r(mBe," \u2014 "),Mz=n(mBe,"A",{href:!0});var RMt=s(Mz);SHo=r(RMt,"NezhaForMultipleChoice"),RMt.forEach(t),RHo=r(mBe," (Nezha model)"),mBe.forEach(t),PHo=i(ee),h3=n(ee,"LI",{});var gBe=s(h3);Iue=n(gBe,"STRONG",{});var PMt=s(Iue);BHo=r(PMt,"nystromformer"),PMt.forEach(t),IHo=r(gBe," \u2014 "),Ez=n(gBe,"A",{href:!0});var BMt=s(Ez);NHo=r(BMt,"NystromformerForMultipleChoice"),BMt.forEach(t),qHo=r(gBe," (Nystr\xF6mformer model)"),gBe.forEach(t),jHo=i(ee),p3=n(ee,"LI",{});var hBe=s(p3);Nue=n(hBe,"STRONG",{});var IMt=s(Nue);DHo=r(IMt,"qdqbert"),IMt.forEach(t),GHo=r(hBe," \u2014 "),Cz=n(hBe,"A",{href:!0});var NMt=s(Cz);OHo=r(NMt,"QDQBertForMultipleChoice"),NMt.forEach(t),VHo=r(hBe," (QDQBert model)"),hBe.forEach(t),XHo=i(ee),_3=n(ee,"LI",{});var pBe=s(_3);que=n(pBe,"STRONG",{});var qMt=s(que);zHo=r(qMt,"rembert"),qMt.forEach(t),WHo=r(pBe," \u2014 "),wz=n(pBe,"A",{href:!0});var jMt=s(wz);QHo=r(jMt,"RemBertForMultipleChoice"),jMt.forEach(t),HHo=r(pBe," (RemBERT model)"),pBe.forEach(t),UHo=i(ee),u3=n(ee,"LI",{});var _Be=s(u3);jue=n(_Be,"STRONG",{});var DMt=s(jue);JHo=r(DMt,"roberta"),DMt.forEach(t),YHo=r(_Be," \u2014 "),Az=n(_Be,"A",{href:!0});var GMt=s(Az);KHo=r(GMt,"RobertaForMultipleChoice"),GMt.forEach(t),ZHo=r(_Be," (RoBERTa model)"),_Be.forEach(t),eUo=i(ee),b3=n(ee,"LI",{});var uBe=s(b3);Due=n(uBe,"STRONG",{});var OMt=s(Due);oUo=r(OMt,"roformer"),OMt.forEach(t),rUo=r(uBe," \u2014 "),Lz=n(uBe,"A",{href:!0});var VMt=s(Lz);tUo=r(VMt,"RoFormerForMultipleChoice"),VMt.forEach(t),aUo=r(uBe," (RoFormer model)"),uBe.forEach(t),nUo=i(ee),v3=n(ee,"LI",{});var bBe=s(v3);Gue=n(bBe,"STRONG",{});var XMt=s(Gue);sUo=r(XMt,"squeezebert"),XMt.forEach(t),lUo=r(bBe," \u2014 "),yz=n(bBe,"A",{href:!0});var zMt=s(yz);iUo=r(zMt,"SqueezeBertForMultipleChoice"),zMt.forEach(t),dUo=r(bBe," (SqueezeBERT model)"),bBe.forEach(t),cUo=i(ee),F3=n(ee,"LI",{});var vBe=s(F3);Oue=n(vBe,"STRONG",{});var WMt=s(Oue);fUo=r(WMt,"xlm"),WMt.forEach(t),mUo=r(vBe," \u2014 "),xz=n(vBe,"A",{href:!0});var QMt=s(xz);gUo=r(QMt,"XLMForMultipleChoice"),QMt.forEach(t),hUo=r(vBe," (XLM model)"),vBe.forEach(t),pUo=i(ee),T3=n(ee,"LI",{});var FBe=s(T3);Vue=n(FBe,"STRONG",{});var HMt=s(Vue);_Uo=r(HMt,"xlm-roberta"),HMt.forEach(t),uUo=r(FBe," \u2014 "),$z=n(FBe,"A",{href:!0});var UMt=s($z);bUo=r(UMt,"XLMRobertaForMultipleChoice"),UMt.forEach(t),vUo=r(FBe," (XLM-RoBERTa model)"),FBe.forEach(t),FUo=i(ee),M3=n(ee,"LI",{});var TBe=s(M3);Xue=n(TBe,"STRONG",{});var JMt=s(Xue);TUo=r(JMt,"xlm-roberta-xl"),JMt.forEach(t),MUo=r(TBe," \u2014 "),kz=n(TBe,"A",{href:!0});var YMt=s(kz);EUo=r(YMt,"XLMRobertaXLForMultipleChoice"),YMt.forEach(t),CUo=r(TBe," (XLM-RoBERTa-XL model)"),TBe.forEach(t),wUo=i(ee),E3=n(ee,"LI",{});var MBe=s(E3);zue=n(MBe,"STRONG",{});var KMt=s(zue);AUo=r(KMt,"xlnet"),KMt.forEach(t),LUo=r(MBe," \u2014 "),Sz=n(MBe,"A",{href:!0});var ZMt=s(Sz);yUo=r(ZMt,"XLNetForMultipleChoice"),ZMt.forEach(t),xUo=r(MBe," (XLNet model)"),MBe.forEach(t),$Uo=i(ee),C3=n(ee,"LI",{});var EBe=s(C3);Wue=n(EBe,"STRONG",{});var e4t=s(Wue);kUo=r(e4t,"yoso"),e4t.forEach(t),SUo=r(EBe," \u2014 "),Rz=n(EBe,"A",{href:!0});var o4t=s(Rz);RUo=r(o4t,"YosoForMultipleChoice"),o4t.forEach(t),PUo=r(EBe," (YOSO model)"),EBe.forEach(t),ee.forEach(t),BUo=i(ga),w3=n(ga,"P",{});var CBe=s(w3);IUo=r(CBe,"The model is set in evaluation mode by default using "),Que=n(CBe,"CODE",{});var r4t=s(Que);NUo=r(r4t,"model.eval()"),r4t.forEach(t),qUo=r(CBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hue=n(CBe,"CODE",{});var t4t=s(Hue);jUo=r(t4t,"model.train()"),t4t.forEach(t),CBe.forEach(t),DUo=i(ga),T(A3.$$.fragment,ga),ga.forEach(t),dl.forEach(t),zXe=i(f),dd=n(f,"H2",{class:!0});var YWe=s(dd);L3=n(YWe,"A",{id:!0,class:!0,href:!0});var a4t=s(L3);Uue=n(a4t,"SPAN",{});var n4t=s(Uue);T(_L.$$.fragment,n4t),n4t.forEach(t),a4t.forEach(t),GUo=i(YWe),Jue=n(YWe,"SPAN",{});var s4t=s(Jue);OUo=r(s4t,"AutoModelForNextSentencePrediction"),s4t.forEach(t),YWe.forEach(t),WXe=i(f),No=n(f,"DIV",{class:!0});var cl=s(No);T(uL.$$.fragment,cl),VUo=i(cl),cd=n(cl,"P",{});var tte=s(cd);XUo=r(tte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Pz=n(tte,"A",{href:!0});var l4t=s(Pz);zUo=r(l4t,"from_pretrained()"),l4t.forEach(t),WUo=r(tte," class method or the "),Bz=n(tte,"A",{href:!0});var i4t=s(Bz);QUo=r(i4t,"from_config()"),i4t.forEach(t),HUo=r(tte,` class
method.`),tte.forEach(t),UUo=i(cl),bL=n(cl,"P",{});var KWe=s(bL);JUo=r(KWe,"This class cannot be instantiated directly using "),Yue=n(KWe,"CODE",{});var d4t=s(Yue);YUo=r(d4t,"__init__()"),d4t.forEach(t),KUo=r(KWe," (throws an error)."),KWe.forEach(t),ZUo=i(cl),pt=n(cl,"DIV",{class:!0});var Lw=s(pt);T(vL.$$.fragment,Lw),eJo=i(Lw),Kue=n(Lw,"P",{});var c4t=s(Kue);oJo=r(c4t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),c4t.forEach(t),rJo=i(Lw),fd=n(Lw,"P",{});var ate=s(fd);tJo=r(ate,`Note:
Loading a model from its configuration file does `),Zue=n(ate,"STRONG",{});var f4t=s(Zue);aJo=r(f4t,"not"),f4t.forEach(t),nJo=r(ate,` load the model weights. It only affects the
model\u2019s configuration. Use `),Iz=n(ate,"A",{href:!0});var m4t=s(Iz);sJo=r(m4t,"from_pretrained()"),m4t.forEach(t),lJo=r(ate," to load the model weights."),ate.forEach(t),iJo=i(Lw),T(y3.$$.fragment,Lw),Lw.forEach(t),dJo=i(cl),ao=n(cl,"DIV",{class:!0});var ha=s(ao);T(FL.$$.fragment,ha),cJo=i(ha),e1e=n(ha,"P",{});var g4t=s(e1e);fJo=r(g4t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),g4t.forEach(t),mJo=i(ha),Va=n(ha,"P",{});var yw=s(Va);gJo=r(yw,"The model class to instantiate is selected based on the "),o1e=n(yw,"CODE",{});var h4t=s(o1e);hJo=r(h4t,"model_type"),h4t.forEach(t),pJo=r(yw,` property of the config object (either
passed as an argument or loaded from `),r1e=n(yw,"CODE",{});var p4t=s(r1e);_Jo=r(p4t,"pretrained_model_name_or_path"),p4t.forEach(t),uJo=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t1e=n(yw,"CODE",{});var _4t=s(t1e);bJo=r(_4t,"pretrained_model_name_or_path"),_4t.forEach(t),vJo=r(yw,":"),yw.forEach(t),FJo=i(ha),qo=n(ha,"UL",{});var pa=s(qo);x3=n(pa,"LI",{});var wBe=s(x3);a1e=n(wBe,"STRONG",{});var u4t=s(a1e);TJo=r(u4t,"bert"),u4t.forEach(t),MJo=r(wBe," \u2014 "),Nz=n(wBe,"A",{href:!0});var b4t=s(Nz);EJo=r(b4t,"BertForNextSentencePrediction"),b4t.forEach(t),CJo=r(wBe," (BERT model)"),wBe.forEach(t),wJo=i(pa),$3=n(pa,"LI",{});var ABe=s($3);n1e=n(ABe,"STRONG",{});var v4t=s(n1e);AJo=r(v4t,"fnet"),v4t.forEach(t),LJo=r(ABe," \u2014 "),qz=n(ABe,"A",{href:!0});var F4t=s(qz);yJo=r(F4t,"FNetForNextSentencePrediction"),F4t.forEach(t),xJo=r(ABe," (FNet model)"),ABe.forEach(t),$Jo=i(pa),k3=n(pa,"LI",{});var LBe=s(k3);s1e=n(LBe,"STRONG",{});var T4t=s(s1e);kJo=r(T4t,"megatron-bert"),T4t.forEach(t),SJo=r(LBe," \u2014 "),jz=n(LBe,"A",{href:!0});var M4t=s(jz);RJo=r(M4t,"MegatronBertForNextSentencePrediction"),M4t.forEach(t),PJo=r(LBe," (Megatron-BERT model)"),LBe.forEach(t),BJo=i(pa),S3=n(pa,"LI",{});var yBe=s(S3);l1e=n(yBe,"STRONG",{});var E4t=s(l1e);IJo=r(E4t,"mobilebert"),E4t.forEach(t),NJo=r(yBe," \u2014 "),Dz=n(yBe,"A",{href:!0});var C4t=s(Dz);qJo=r(C4t,"MobileBertForNextSentencePrediction"),C4t.forEach(t),jJo=r(yBe," (MobileBERT model)"),yBe.forEach(t),DJo=i(pa),R3=n(pa,"LI",{});var xBe=s(R3);i1e=n(xBe,"STRONG",{});var w4t=s(i1e);GJo=r(w4t,"nezha"),w4t.forEach(t),OJo=r(xBe," \u2014 "),Gz=n(xBe,"A",{href:!0});var A4t=s(Gz);VJo=r(A4t,"NezhaForNextSentencePrediction"),A4t.forEach(t),XJo=r(xBe," (Nezha model)"),xBe.forEach(t),zJo=i(pa),P3=n(pa,"LI",{});var $Be=s(P3);d1e=n($Be,"STRONG",{});var L4t=s(d1e);WJo=r(L4t,"qdqbert"),L4t.forEach(t),QJo=r($Be," \u2014 "),Oz=n($Be,"A",{href:!0});var y4t=s(Oz);HJo=r(y4t,"QDQBertForNextSentencePrediction"),y4t.forEach(t),UJo=r($Be," (QDQBert model)"),$Be.forEach(t),pa.forEach(t),JJo=i(ha),B3=n(ha,"P",{});var kBe=s(B3);YJo=r(kBe,"The model is set in evaluation mode by default using "),c1e=n(kBe,"CODE",{});var x4t=s(c1e);KJo=r(x4t,"model.eval()"),x4t.forEach(t),ZJo=r(kBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f1e=n(kBe,"CODE",{});var $4t=s(f1e);eYo=r($4t,"model.train()"),$4t.forEach(t),kBe.forEach(t),oYo=i(ha),T(I3.$$.fragment,ha),ha.forEach(t),cl.forEach(t),QXe=i(f),md=n(f,"H2",{class:!0});var ZWe=s(md);N3=n(ZWe,"A",{id:!0,class:!0,href:!0});var k4t=s(N3);m1e=n(k4t,"SPAN",{});var S4t=s(m1e);T(TL.$$.fragment,S4t),S4t.forEach(t),k4t.forEach(t),rYo=i(ZWe),g1e=n(ZWe,"SPAN",{});var R4t=s(g1e);tYo=r(R4t,"AutoModelForTokenClassification"),R4t.forEach(t),ZWe.forEach(t),HXe=i(f),jo=n(f,"DIV",{class:!0});var fl=s(jo);T(ML.$$.fragment,fl),aYo=i(fl),gd=n(fl,"P",{});var nte=s(gd);nYo=r(nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Vz=n(nte,"A",{href:!0});var P4t=s(Vz);sYo=r(P4t,"from_pretrained()"),P4t.forEach(t),lYo=r(nte," class method or the "),Xz=n(nte,"A",{href:!0});var B4t=s(Xz);iYo=r(B4t,"from_config()"),B4t.forEach(t),dYo=r(nte,` class
method.`),nte.forEach(t),cYo=i(fl),EL=n(fl,"P",{});var eQe=s(EL);fYo=r(eQe,"This class cannot be instantiated directly using "),h1e=n(eQe,"CODE",{});var I4t=s(h1e);mYo=r(I4t,"__init__()"),I4t.forEach(t),gYo=r(eQe," (throws an error)."),eQe.forEach(t),hYo=i(fl),_t=n(fl,"DIV",{class:!0});var xw=s(_t);T(CL.$$.fragment,xw),pYo=i(xw),p1e=n(xw,"P",{});var N4t=s(p1e);_Yo=r(N4t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),N4t.forEach(t),uYo=i(xw),hd=n(xw,"P",{});var ste=s(hd);bYo=r(ste,`Note:
Loading a model from its configuration file does `),_1e=n(ste,"STRONG",{});var q4t=s(_1e);vYo=r(q4t,"not"),q4t.forEach(t),FYo=r(ste,` load the model weights. It only affects the
model\u2019s configuration. Use `),zz=n(ste,"A",{href:!0});var j4t=s(zz);TYo=r(j4t,"from_pretrained()"),j4t.forEach(t),MYo=r(ste," to load the model weights."),ste.forEach(t),EYo=i(xw),T(q3.$$.fragment,xw),xw.forEach(t),CYo=i(fl),no=n(fl,"DIV",{class:!0});var _a=s(no);T(wL.$$.fragment,_a),wYo=i(_a),u1e=n(_a,"P",{});var D4t=s(u1e);AYo=r(D4t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),D4t.forEach(t),LYo=i(_a),Xa=n(_a,"P",{});var $w=s(Xa);yYo=r($w,"The model class to instantiate is selected based on the "),b1e=n($w,"CODE",{});var G4t=s(b1e);xYo=r(G4t,"model_type"),G4t.forEach(t),$Yo=r($w,` property of the config object (either
passed as an argument or loaded from `),v1e=n($w,"CODE",{});var O4t=s(v1e);kYo=r(O4t,"pretrained_model_name_or_path"),O4t.forEach(t),SYo=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F1e=n($w,"CODE",{});var V4t=s(F1e);RYo=r(V4t,"pretrained_model_name_or_path"),V4t.forEach(t),PYo=r($w,":"),$w.forEach(t),BYo=i(_a),U=n(_a,"UL",{});var Y=s(U);j3=n(Y,"LI",{});var SBe=s(j3);T1e=n(SBe,"STRONG",{});var X4t=s(T1e);IYo=r(X4t,"albert"),X4t.forEach(t),NYo=r(SBe," \u2014 "),Wz=n(SBe,"A",{href:!0});var z4t=s(Wz);qYo=r(z4t,"AlbertForTokenClassification"),z4t.forEach(t),jYo=r(SBe," (ALBERT model)"),SBe.forEach(t),DYo=i(Y),D3=n(Y,"LI",{});var RBe=s(D3);M1e=n(RBe,"STRONG",{});var W4t=s(M1e);GYo=r(W4t,"bert"),W4t.forEach(t),OYo=r(RBe," \u2014 "),Qz=n(RBe,"A",{href:!0});var Q4t=s(Qz);VYo=r(Q4t,"BertForTokenClassification"),Q4t.forEach(t),XYo=r(RBe," (BERT model)"),RBe.forEach(t),zYo=i(Y),G3=n(Y,"LI",{});var PBe=s(G3);E1e=n(PBe,"STRONG",{});var H4t=s(E1e);WYo=r(H4t,"big_bird"),H4t.forEach(t),QYo=r(PBe," \u2014 "),Hz=n(PBe,"A",{href:!0});var U4t=s(Hz);HYo=r(U4t,"BigBirdForTokenClassification"),U4t.forEach(t),UYo=r(PBe," (BigBird model)"),PBe.forEach(t),JYo=i(Y),O3=n(Y,"LI",{});var BBe=s(O3);C1e=n(BBe,"STRONG",{});var J4t=s(C1e);YYo=r(J4t,"bloom"),J4t.forEach(t),KYo=r(BBe," \u2014 "),Uz=n(BBe,"A",{href:!0});var Y4t=s(Uz);ZYo=r(Y4t,"BloomForTokenClassification"),Y4t.forEach(t),eKo=r(BBe," (BLOOM model)"),BBe.forEach(t),oKo=i(Y),V3=n(Y,"LI",{});var IBe=s(V3);w1e=n(IBe,"STRONG",{});var K4t=s(w1e);rKo=r(K4t,"camembert"),K4t.forEach(t),tKo=r(IBe," \u2014 "),Jz=n(IBe,"A",{href:!0});var Z4t=s(Jz);aKo=r(Z4t,"CamembertForTokenClassification"),Z4t.forEach(t),nKo=r(IBe," (CamemBERT model)"),IBe.forEach(t),sKo=i(Y),X3=n(Y,"LI",{});var NBe=s(X3);A1e=n(NBe,"STRONG",{});var eEt=s(A1e);lKo=r(eEt,"canine"),eEt.forEach(t),iKo=r(NBe," \u2014 "),Yz=n(NBe,"A",{href:!0});var oEt=s(Yz);dKo=r(oEt,"CanineForTokenClassification"),oEt.forEach(t),cKo=r(NBe," (CANINE model)"),NBe.forEach(t),fKo=i(Y),z3=n(Y,"LI",{});var qBe=s(z3);L1e=n(qBe,"STRONG",{});var rEt=s(L1e);mKo=r(rEt,"convbert"),rEt.forEach(t),gKo=r(qBe," \u2014 "),Kz=n(qBe,"A",{href:!0});var tEt=s(Kz);hKo=r(tEt,"ConvBertForTokenClassification"),tEt.forEach(t),pKo=r(qBe," (ConvBERT model)"),qBe.forEach(t),_Ko=i(Y),W3=n(Y,"LI",{});var jBe=s(W3);y1e=n(jBe,"STRONG",{});var aEt=s(y1e);uKo=r(aEt,"data2vec-text"),aEt.forEach(t),bKo=r(jBe," \u2014 "),Zz=n(jBe,"A",{href:!0});var nEt=s(Zz);vKo=r(nEt,"Data2VecTextForTokenClassification"),nEt.forEach(t),FKo=r(jBe," (Data2VecText model)"),jBe.forEach(t),TKo=i(Y),Q3=n(Y,"LI",{});var DBe=s(Q3);x1e=n(DBe,"STRONG",{});var sEt=s(x1e);MKo=r(sEt,"deberta"),sEt.forEach(t),EKo=r(DBe," \u2014 "),eW=n(DBe,"A",{href:!0});var lEt=s(eW);CKo=r(lEt,"DebertaForTokenClassification"),lEt.forEach(t),wKo=r(DBe," (DeBERTa model)"),DBe.forEach(t),AKo=i(Y),H3=n(Y,"LI",{});var GBe=s(H3);$1e=n(GBe,"STRONG",{});var iEt=s($1e);LKo=r(iEt,"deberta-v2"),iEt.forEach(t),yKo=r(GBe," \u2014 "),oW=n(GBe,"A",{href:!0});var dEt=s(oW);xKo=r(dEt,"DebertaV2ForTokenClassification"),dEt.forEach(t),$Ko=r(GBe," (DeBERTa-v2 model)"),GBe.forEach(t),kKo=i(Y),U3=n(Y,"LI",{});var OBe=s(U3);k1e=n(OBe,"STRONG",{});var cEt=s(k1e);SKo=r(cEt,"distilbert"),cEt.forEach(t),RKo=r(OBe," \u2014 "),rW=n(OBe,"A",{href:!0});var fEt=s(rW);PKo=r(fEt,"DistilBertForTokenClassification"),fEt.forEach(t),BKo=r(OBe," (DistilBERT model)"),OBe.forEach(t),IKo=i(Y),J3=n(Y,"LI",{});var VBe=s(J3);S1e=n(VBe,"STRONG",{});var mEt=s(S1e);NKo=r(mEt,"electra"),mEt.forEach(t),qKo=r(VBe," \u2014 "),tW=n(VBe,"A",{href:!0});var gEt=s(tW);jKo=r(gEt,"ElectraForTokenClassification"),gEt.forEach(t),DKo=r(VBe," (ELECTRA model)"),VBe.forEach(t),GKo=i(Y),Y3=n(Y,"LI",{});var XBe=s(Y3);R1e=n(XBe,"STRONG",{});var hEt=s(R1e);OKo=r(hEt,"flaubert"),hEt.forEach(t),VKo=r(XBe," \u2014 "),aW=n(XBe,"A",{href:!0});var pEt=s(aW);XKo=r(pEt,"FlaubertForTokenClassification"),pEt.forEach(t),zKo=r(XBe," (FlauBERT model)"),XBe.forEach(t),WKo=i(Y),K3=n(Y,"LI",{});var zBe=s(K3);P1e=n(zBe,"STRONG",{});var _Et=s(P1e);QKo=r(_Et,"fnet"),_Et.forEach(t),HKo=r(zBe," \u2014 "),nW=n(zBe,"A",{href:!0});var uEt=s(nW);UKo=r(uEt,"FNetForTokenClassification"),uEt.forEach(t),JKo=r(zBe," (FNet model)"),zBe.forEach(t),YKo=i(Y),Z3=n(Y,"LI",{});var WBe=s(Z3);B1e=n(WBe,"STRONG",{});var bEt=s(B1e);KKo=r(bEt,"funnel"),bEt.forEach(t),ZKo=r(WBe," \u2014 "),sW=n(WBe,"A",{href:!0});var vEt=s(sW);eZo=r(vEt,"FunnelForTokenClassification"),vEt.forEach(t),oZo=r(WBe," (Funnel Transformer model)"),WBe.forEach(t),rZo=i(Y),eF=n(Y,"LI",{});var QBe=s(eF);I1e=n(QBe,"STRONG",{});var FEt=s(I1e);tZo=r(FEt,"gpt2"),FEt.forEach(t),aZo=r(QBe," \u2014 "),lW=n(QBe,"A",{href:!0});var TEt=s(lW);nZo=r(TEt,"GPT2ForTokenClassification"),TEt.forEach(t),sZo=r(QBe," (OpenAI GPT-2 model)"),QBe.forEach(t),lZo=i(Y),oF=n(Y,"LI",{});var HBe=s(oF);N1e=n(HBe,"STRONG",{});var MEt=s(N1e);iZo=r(MEt,"ibert"),MEt.forEach(t),dZo=r(HBe," \u2014 "),iW=n(HBe,"A",{href:!0});var EEt=s(iW);cZo=r(EEt,"IBertForTokenClassification"),EEt.forEach(t),fZo=r(HBe," (I-BERT model)"),HBe.forEach(t),mZo=i(Y),rF=n(Y,"LI",{});var UBe=s(rF);q1e=n(UBe,"STRONG",{});var CEt=s(q1e);gZo=r(CEt,"layoutlm"),CEt.forEach(t),hZo=r(UBe," \u2014 "),dW=n(UBe,"A",{href:!0});var wEt=s(dW);pZo=r(wEt,"LayoutLMForTokenClassification"),wEt.forEach(t),_Zo=r(UBe," (LayoutLM model)"),UBe.forEach(t),uZo=i(Y),tF=n(Y,"LI",{});var JBe=s(tF);j1e=n(JBe,"STRONG",{});var AEt=s(j1e);bZo=r(AEt,"layoutlmv2"),AEt.forEach(t),vZo=r(JBe," \u2014 "),cW=n(JBe,"A",{href:!0});var LEt=s(cW);FZo=r(LEt,"LayoutLMv2ForTokenClassification"),LEt.forEach(t),TZo=r(JBe," (LayoutLMv2 model)"),JBe.forEach(t),MZo=i(Y),aF=n(Y,"LI",{});var YBe=s(aF);D1e=n(YBe,"STRONG",{});var yEt=s(D1e);EZo=r(yEt,"layoutlmv3"),yEt.forEach(t),CZo=r(YBe," \u2014 "),fW=n(YBe,"A",{href:!0});var xEt=s(fW);wZo=r(xEt,"LayoutLMv3ForTokenClassification"),xEt.forEach(t),AZo=r(YBe," (LayoutLMv3 model)"),YBe.forEach(t),LZo=i(Y),nF=n(Y,"LI",{});var KBe=s(nF);G1e=n(KBe,"STRONG",{});var $Et=s(G1e);yZo=r($Et,"longformer"),$Et.forEach(t),xZo=r(KBe," \u2014 "),mW=n(KBe,"A",{href:!0});var kEt=s(mW);$Zo=r(kEt,"LongformerForTokenClassification"),kEt.forEach(t),kZo=r(KBe," (Longformer model)"),KBe.forEach(t),SZo=i(Y),sF=n(Y,"LI",{});var ZBe=s(sF);O1e=n(ZBe,"STRONG",{});var SEt=s(O1e);RZo=r(SEt,"megatron-bert"),SEt.forEach(t),PZo=r(ZBe," \u2014 "),gW=n(ZBe,"A",{href:!0});var REt=s(gW);BZo=r(REt,"MegatronBertForTokenClassification"),REt.forEach(t),IZo=r(ZBe," (Megatron-BERT model)"),ZBe.forEach(t),NZo=i(Y),lF=n(Y,"LI",{});var eIe=s(lF);V1e=n(eIe,"STRONG",{});var PEt=s(V1e);qZo=r(PEt,"mobilebert"),PEt.forEach(t),jZo=r(eIe," \u2014 "),hW=n(eIe,"A",{href:!0});var BEt=s(hW);DZo=r(BEt,"MobileBertForTokenClassification"),BEt.forEach(t),GZo=r(eIe," (MobileBERT model)"),eIe.forEach(t),OZo=i(Y),iF=n(Y,"LI",{});var oIe=s(iF);X1e=n(oIe,"STRONG",{});var IEt=s(X1e);VZo=r(IEt,"mpnet"),IEt.forEach(t),XZo=r(oIe," \u2014 "),pW=n(oIe,"A",{href:!0});var NEt=s(pW);zZo=r(NEt,"MPNetForTokenClassification"),NEt.forEach(t),WZo=r(oIe," (MPNet model)"),oIe.forEach(t),QZo=i(Y),dF=n(Y,"LI",{});var rIe=s(dF);z1e=n(rIe,"STRONG",{});var qEt=s(z1e);HZo=r(qEt,"nezha"),qEt.forEach(t),UZo=r(rIe," \u2014 "),_W=n(rIe,"A",{href:!0});var jEt=s(_W);JZo=r(jEt,"NezhaForTokenClassification"),jEt.forEach(t),YZo=r(rIe," (Nezha model)"),rIe.forEach(t),KZo=i(Y),cF=n(Y,"LI",{});var tIe=s(cF);W1e=n(tIe,"STRONG",{});var DEt=s(W1e);ZZo=r(DEt,"nystromformer"),DEt.forEach(t),eer=r(tIe," \u2014 "),uW=n(tIe,"A",{href:!0});var GEt=s(uW);oer=r(GEt,"NystromformerForTokenClassification"),GEt.forEach(t),rer=r(tIe," (Nystr\xF6mformer model)"),tIe.forEach(t),ter=i(Y),fF=n(Y,"LI",{});var aIe=s(fF);Q1e=n(aIe,"STRONG",{});var OEt=s(Q1e);aer=r(OEt,"qdqbert"),OEt.forEach(t),ner=r(aIe," \u2014 "),bW=n(aIe,"A",{href:!0});var VEt=s(bW);ser=r(VEt,"QDQBertForTokenClassification"),VEt.forEach(t),ler=r(aIe," (QDQBert model)"),aIe.forEach(t),ier=i(Y),mF=n(Y,"LI",{});var nIe=s(mF);H1e=n(nIe,"STRONG",{});var XEt=s(H1e);der=r(XEt,"rembert"),XEt.forEach(t),cer=r(nIe," \u2014 "),vW=n(nIe,"A",{href:!0});var zEt=s(vW);fer=r(zEt,"RemBertForTokenClassification"),zEt.forEach(t),mer=r(nIe," (RemBERT model)"),nIe.forEach(t),ger=i(Y),gF=n(Y,"LI",{});var sIe=s(gF);U1e=n(sIe,"STRONG",{});var WEt=s(U1e);her=r(WEt,"roberta"),WEt.forEach(t),per=r(sIe," \u2014 "),FW=n(sIe,"A",{href:!0});var QEt=s(FW);_er=r(QEt,"RobertaForTokenClassification"),QEt.forEach(t),uer=r(sIe," (RoBERTa model)"),sIe.forEach(t),ber=i(Y),hF=n(Y,"LI",{});var lIe=s(hF);J1e=n(lIe,"STRONG",{});var HEt=s(J1e);ver=r(HEt,"roformer"),HEt.forEach(t),Fer=r(lIe," \u2014 "),TW=n(lIe,"A",{href:!0});var UEt=s(TW);Ter=r(UEt,"RoFormerForTokenClassification"),UEt.forEach(t),Mer=r(lIe," (RoFormer model)"),lIe.forEach(t),Eer=i(Y),pF=n(Y,"LI",{});var iIe=s(pF);Y1e=n(iIe,"STRONG",{});var JEt=s(Y1e);Cer=r(JEt,"squeezebert"),JEt.forEach(t),wer=r(iIe," \u2014 "),MW=n(iIe,"A",{href:!0});var YEt=s(MW);Aer=r(YEt,"SqueezeBertForTokenClassification"),YEt.forEach(t),Ler=r(iIe," (SqueezeBERT model)"),iIe.forEach(t),yer=i(Y),_F=n(Y,"LI",{});var dIe=s(_F);K1e=n(dIe,"STRONG",{});var KEt=s(K1e);xer=r(KEt,"xlm"),KEt.forEach(t),$er=r(dIe," \u2014 "),EW=n(dIe,"A",{href:!0});var ZEt=s(EW);ker=r(ZEt,"XLMForTokenClassification"),ZEt.forEach(t),Ser=r(dIe," (XLM model)"),dIe.forEach(t),Rer=i(Y),uF=n(Y,"LI",{});var cIe=s(uF);Z1e=n(cIe,"STRONG",{});var eCt=s(Z1e);Per=r(eCt,"xlm-roberta"),eCt.forEach(t),Ber=r(cIe," \u2014 "),CW=n(cIe,"A",{href:!0});var oCt=s(CW);Ier=r(oCt,"XLMRobertaForTokenClassification"),oCt.forEach(t),Ner=r(cIe," (XLM-RoBERTa model)"),cIe.forEach(t),qer=i(Y),bF=n(Y,"LI",{});var fIe=s(bF);e2e=n(fIe,"STRONG",{});var rCt=s(e2e);jer=r(rCt,"xlm-roberta-xl"),rCt.forEach(t),Der=r(fIe," \u2014 "),wW=n(fIe,"A",{href:!0});var tCt=s(wW);Ger=r(tCt,"XLMRobertaXLForTokenClassification"),tCt.forEach(t),Oer=r(fIe," (XLM-RoBERTa-XL model)"),fIe.forEach(t),Ver=i(Y),vF=n(Y,"LI",{});var mIe=s(vF);o2e=n(mIe,"STRONG",{});var aCt=s(o2e);Xer=r(aCt,"xlnet"),aCt.forEach(t),zer=r(mIe," \u2014 "),AW=n(mIe,"A",{href:!0});var nCt=s(AW);Wer=r(nCt,"XLNetForTokenClassification"),nCt.forEach(t),Qer=r(mIe," (XLNet model)"),mIe.forEach(t),Her=i(Y),FF=n(Y,"LI",{});var gIe=s(FF);r2e=n(gIe,"STRONG",{});var sCt=s(r2e);Uer=r(sCt,"yoso"),sCt.forEach(t),Jer=r(gIe," \u2014 "),LW=n(gIe,"A",{href:!0});var lCt=s(LW);Yer=r(lCt,"YosoForTokenClassification"),lCt.forEach(t),Ker=r(gIe," (YOSO model)"),gIe.forEach(t),Y.forEach(t),Zer=i(_a),TF=n(_a,"P",{});var hIe=s(TF);eor=r(hIe,"The model is set in evaluation mode by default using "),t2e=n(hIe,"CODE",{});var iCt=s(t2e);oor=r(iCt,"model.eval()"),iCt.forEach(t),ror=r(hIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a2e=n(hIe,"CODE",{});var dCt=s(a2e);tor=r(dCt,"model.train()"),dCt.forEach(t),hIe.forEach(t),aor=i(_a),T(MF.$$.fragment,_a),_a.forEach(t),fl.forEach(t),UXe=i(f),pd=n(f,"H2",{class:!0});var oQe=s(pd);EF=n(oQe,"A",{id:!0,class:!0,href:!0});var cCt=s(EF);n2e=n(cCt,"SPAN",{});var fCt=s(n2e);T(AL.$$.fragment,fCt),fCt.forEach(t),cCt.forEach(t),nor=i(oQe),s2e=n(oQe,"SPAN",{});var mCt=s(s2e);sor=r(mCt,"AutoModelForQuestionAnswering"),mCt.forEach(t),oQe.forEach(t),JXe=i(f),Do=n(f,"DIV",{class:!0});var ml=s(Do);T(LL.$$.fragment,ml),lor=i(ml),_d=n(ml,"P",{});var lte=s(_d);ior=r(lte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),yW=n(lte,"A",{href:!0});var gCt=s(yW);dor=r(gCt,"from_pretrained()"),gCt.forEach(t),cor=r(lte," class method or the "),xW=n(lte,"A",{href:!0});var hCt=s(xW);mor=r(hCt,"from_config()"),hCt.forEach(t),gor=r(lte,` class
method.`),lte.forEach(t),hor=i(ml),yL=n(ml,"P",{});var rQe=s(yL);por=r(rQe,"This class cannot be instantiated directly using "),l2e=n(rQe,"CODE",{});var pCt=s(l2e);_or=r(pCt,"__init__()"),pCt.forEach(t),uor=r(rQe," (throws an error)."),rQe.forEach(t),bor=i(ml),ut=n(ml,"DIV",{class:!0});var kw=s(ut);T(xL.$$.fragment,kw),vor=i(kw),i2e=n(kw,"P",{});var _Ct=s(i2e);For=r(_Ct,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),_Ct.forEach(t),Tor=i(kw),ud=n(kw,"P",{});var ite=s(ud);Mor=r(ite,`Note:
Loading a model from its configuration file does `),d2e=n(ite,"STRONG",{});var uCt=s(d2e);Eor=r(uCt,"not"),uCt.forEach(t),Cor=r(ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),$W=n(ite,"A",{href:!0});var bCt=s($W);wor=r(bCt,"from_pretrained()"),bCt.forEach(t),Aor=r(ite," to load the model weights."),ite.forEach(t),Lor=i(kw),T(CF.$$.fragment,kw),kw.forEach(t),yor=i(ml),so=n(ml,"DIV",{class:!0});var ua=s(so);T($L.$$.fragment,ua),xor=i(ua),c2e=n(ua,"P",{});var vCt=s(c2e);$or=r(vCt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),vCt.forEach(t),kor=i(ua),za=n(ua,"P",{});var Sw=s(za);Sor=r(Sw,"The model class to instantiate is selected based on the "),f2e=n(Sw,"CODE",{});var FCt=s(f2e);Ror=r(FCt,"model_type"),FCt.forEach(t),Por=r(Sw,` property of the config object (either
passed as an argument or loaded from `),m2e=n(Sw,"CODE",{});var TCt=s(m2e);Bor=r(TCt,"pretrained_model_name_or_path"),TCt.forEach(t),Ior=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g2e=n(Sw,"CODE",{});var MCt=s(g2e);Nor=r(MCt,"pretrained_model_name_or_path"),MCt.forEach(t),qor=r(Sw,":"),Sw.forEach(t),jor=i(ua),V=n(ua,"UL",{});var X=s(V);wF=n(X,"LI",{});var pIe=s(wF);h2e=n(pIe,"STRONG",{});var ECt=s(h2e);Dor=r(ECt,"albert"),ECt.forEach(t),Gor=r(pIe," \u2014 "),kW=n(pIe,"A",{href:!0});var CCt=s(kW);Oor=r(CCt,"AlbertForQuestionAnswering"),CCt.forEach(t),Vor=r(pIe," (ALBERT model)"),pIe.forEach(t),Xor=i(X),AF=n(X,"LI",{});var _Ie=s(AF);p2e=n(_Ie,"STRONG",{});var wCt=s(p2e);zor=r(wCt,"bart"),wCt.forEach(t),Wor=r(_Ie," \u2014 "),SW=n(_Ie,"A",{href:!0});var ACt=s(SW);Qor=r(ACt,"BartForQuestionAnswering"),ACt.forEach(t),Hor=r(_Ie," (BART model)"),_Ie.forEach(t),Uor=i(X),LF=n(X,"LI",{});var uIe=s(LF);_2e=n(uIe,"STRONG",{});var LCt=s(_2e);Jor=r(LCt,"bert"),LCt.forEach(t),Yor=r(uIe," \u2014 "),RW=n(uIe,"A",{href:!0});var yCt=s(RW);Kor=r(yCt,"BertForQuestionAnswering"),yCt.forEach(t),Zor=r(uIe," (BERT model)"),uIe.forEach(t),err=i(X),yF=n(X,"LI",{});var bIe=s(yF);u2e=n(bIe,"STRONG",{});var xCt=s(u2e);orr=r(xCt,"big_bird"),xCt.forEach(t),rrr=r(bIe," \u2014 "),PW=n(bIe,"A",{href:!0});var $Ct=s(PW);trr=r($Ct,"BigBirdForQuestionAnswering"),$Ct.forEach(t),arr=r(bIe," (BigBird model)"),bIe.forEach(t),nrr=i(X),xF=n(X,"LI",{});var vIe=s(xF);b2e=n(vIe,"STRONG",{});var kCt=s(b2e);srr=r(kCt,"bigbird_pegasus"),kCt.forEach(t),lrr=r(vIe," \u2014 "),BW=n(vIe,"A",{href:!0});var SCt=s(BW);irr=r(SCt,"BigBirdPegasusForQuestionAnswering"),SCt.forEach(t),drr=r(vIe," (BigBird-Pegasus model)"),vIe.forEach(t),crr=i(X),$F=n(X,"LI",{});var FIe=s($F);v2e=n(FIe,"STRONG",{});var RCt=s(v2e);frr=r(RCt,"camembert"),RCt.forEach(t),mrr=r(FIe," \u2014 "),IW=n(FIe,"A",{href:!0});var PCt=s(IW);grr=r(PCt,"CamembertForQuestionAnswering"),PCt.forEach(t),hrr=r(FIe," (CamemBERT model)"),FIe.forEach(t),prr=i(X),kF=n(X,"LI",{});var TIe=s(kF);F2e=n(TIe,"STRONG",{});var BCt=s(F2e);_rr=r(BCt,"canine"),BCt.forEach(t),urr=r(TIe," \u2014 "),NW=n(TIe,"A",{href:!0});var ICt=s(NW);brr=r(ICt,"CanineForQuestionAnswering"),ICt.forEach(t),vrr=r(TIe," (CANINE model)"),TIe.forEach(t),Frr=i(X),SF=n(X,"LI",{});var MIe=s(SF);T2e=n(MIe,"STRONG",{});var NCt=s(T2e);Trr=r(NCt,"convbert"),NCt.forEach(t),Mrr=r(MIe," \u2014 "),qW=n(MIe,"A",{href:!0});var qCt=s(qW);Err=r(qCt,"ConvBertForQuestionAnswering"),qCt.forEach(t),Crr=r(MIe," (ConvBERT model)"),MIe.forEach(t),wrr=i(X),RF=n(X,"LI",{});var EIe=s(RF);M2e=n(EIe,"STRONG",{});var jCt=s(M2e);Arr=r(jCt,"data2vec-text"),jCt.forEach(t),Lrr=r(EIe," \u2014 "),jW=n(EIe,"A",{href:!0});var DCt=s(jW);yrr=r(DCt,"Data2VecTextForQuestionAnswering"),DCt.forEach(t),xrr=r(EIe," (Data2VecText model)"),EIe.forEach(t),$rr=i(X),PF=n(X,"LI",{});var CIe=s(PF);E2e=n(CIe,"STRONG",{});var GCt=s(E2e);krr=r(GCt,"deberta"),GCt.forEach(t),Srr=r(CIe," \u2014 "),DW=n(CIe,"A",{href:!0});var OCt=s(DW);Rrr=r(OCt,"DebertaForQuestionAnswering"),OCt.forEach(t),Prr=r(CIe," (DeBERTa model)"),CIe.forEach(t),Brr=i(X),BF=n(X,"LI",{});var wIe=s(BF);C2e=n(wIe,"STRONG",{});var VCt=s(C2e);Irr=r(VCt,"deberta-v2"),VCt.forEach(t),Nrr=r(wIe," \u2014 "),GW=n(wIe,"A",{href:!0});var XCt=s(GW);qrr=r(XCt,"DebertaV2ForQuestionAnswering"),XCt.forEach(t),jrr=r(wIe," (DeBERTa-v2 model)"),wIe.forEach(t),Drr=i(X),IF=n(X,"LI",{});var AIe=s(IF);w2e=n(AIe,"STRONG",{});var zCt=s(w2e);Grr=r(zCt,"distilbert"),zCt.forEach(t),Orr=r(AIe," \u2014 "),OW=n(AIe,"A",{href:!0});var WCt=s(OW);Vrr=r(WCt,"DistilBertForQuestionAnswering"),WCt.forEach(t),Xrr=r(AIe," (DistilBERT model)"),AIe.forEach(t),zrr=i(X),NF=n(X,"LI",{});var LIe=s(NF);A2e=n(LIe,"STRONG",{});var QCt=s(A2e);Wrr=r(QCt,"electra"),QCt.forEach(t),Qrr=r(LIe," \u2014 "),VW=n(LIe,"A",{href:!0});var HCt=s(VW);Hrr=r(HCt,"ElectraForQuestionAnswering"),HCt.forEach(t),Urr=r(LIe," (ELECTRA model)"),LIe.forEach(t),Jrr=i(X),qF=n(X,"LI",{});var yIe=s(qF);L2e=n(yIe,"STRONG",{});var UCt=s(L2e);Yrr=r(UCt,"flaubert"),UCt.forEach(t),Krr=r(yIe," \u2014 "),XW=n(yIe,"A",{href:!0});var JCt=s(XW);Zrr=r(JCt,"FlaubertForQuestionAnsweringSimple"),JCt.forEach(t),etr=r(yIe," (FlauBERT model)"),yIe.forEach(t),otr=i(X),jF=n(X,"LI",{});var xIe=s(jF);y2e=n(xIe,"STRONG",{});var YCt=s(y2e);rtr=r(YCt,"fnet"),YCt.forEach(t),ttr=r(xIe," \u2014 "),zW=n(xIe,"A",{href:!0});var KCt=s(zW);atr=r(KCt,"FNetForQuestionAnswering"),KCt.forEach(t),ntr=r(xIe," (FNet model)"),xIe.forEach(t),str=i(X),DF=n(X,"LI",{});var $Ie=s(DF);x2e=n($Ie,"STRONG",{});var ZCt=s(x2e);ltr=r(ZCt,"funnel"),ZCt.forEach(t),itr=r($Ie," \u2014 "),WW=n($Ie,"A",{href:!0});var e5t=s(WW);dtr=r(e5t,"FunnelForQuestionAnswering"),e5t.forEach(t),ctr=r($Ie," (Funnel Transformer model)"),$Ie.forEach(t),ftr=i(X),GF=n(X,"LI",{});var kIe=s(GF);$2e=n(kIe,"STRONG",{});var o5t=s($2e);mtr=r(o5t,"gptj"),o5t.forEach(t),gtr=r(kIe," \u2014 "),QW=n(kIe,"A",{href:!0});var r5t=s(QW);htr=r(r5t,"GPTJForQuestionAnswering"),r5t.forEach(t),ptr=r(kIe," (GPT-J model)"),kIe.forEach(t),_tr=i(X),OF=n(X,"LI",{});var SIe=s(OF);k2e=n(SIe,"STRONG",{});var t5t=s(k2e);utr=r(t5t,"ibert"),t5t.forEach(t),btr=r(SIe," \u2014 "),HW=n(SIe,"A",{href:!0});var a5t=s(HW);vtr=r(a5t,"IBertForQuestionAnswering"),a5t.forEach(t),Ftr=r(SIe," (I-BERT model)"),SIe.forEach(t),Ttr=i(X),VF=n(X,"LI",{});var RIe=s(VF);S2e=n(RIe,"STRONG",{});var n5t=s(S2e);Mtr=r(n5t,"layoutlmv2"),n5t.forEach(t),Etr=r(RIe," \u2014 "),UW=n(RIe,"A",{href:!0});var s5t=s(UW);Ctr=r(s5t,"LayoutLMv2ForQuestionAnswering"),s5t.forEach(t),wtr=r(RIe," (LayoutLMv2 model)"),RIe.forEach(t),Atr=i(X),XF=n(X,"LI",{});var PIe=s(XF);R2e=n(PIe,"STRONG",{});var l5t=s(R2e);Ltr=r(l5t,"layoutlmv3"),l5t.forEach(t),ytr=r(PIe," \u2014 "),JW=n(PIe,"A",{href:!0});var i5t=s(JW);xtr=r(i5t,"LayoutLMv3ForQuestionAnswering"),i5t.forEach(t),$tr=r(PIe," (LayoutLMv3 model)"),PIe.forEach(t),ktr=i(X),zF=n(X,"LI",{});var BIe=s(zF);P2e=n(BIe,"STRONG",{});var d5t=s(P2e);Str=r(d5t,"led"),d5t.forEach(t),Rtr=r(BIe," \u2014 "),YW=n(BIe,"A",{href:!0});var c5t=s(YW);Ptr=r(c5t,"LEDForQuestionAnswering"),c5t.forEach(t),Btr=r(BIe," (LED model)"),BIe.forEach(t),Itr=i(X),WF=n(X,"LI",{});var IIe=s(WF);B2e=n(IIe,"STRONG",{});var f5t=s(B2e);Ntr=r(f5t,"longformer"),f5t.forEach(t),qtr=r(IIe," \u2014 "),KW=n(IIe,"A",{href:!0});var m5t=s(KW);jtr=r(m5t,"LongformerForQuestionAnswering"),m5t.forEach(t),Dtr=r(IIe," (Longformer model)"),IIe.forEach(t),Gtr=i(X),QF=n(X,"LI",{});var NIe=s(QF);I2e=n(NIe,"STRONG",{});var g5t=s(I2e);Otr=r(g5t,"lxmert"),g5t.forEach(t),Vtr=r(NIe," \u2014 "),ZW=n(NIe,"A",{href:!0});var h5t=s(ZW);Xtr=r(h5t,"LxmertForQuestionAnswering"),h5t.forEach(t),ztr=r(NIe," (LXMERT model)"),NIe.forEach(t),Wtr=i(X),HF=n(X,"LI",{});var qIe=s(HF);N2e=n(qIe,"STRONG",{});var p5t=s(N2e);Qtr=r(p5t,"mbart"),p5t.forEach(t),Htr=r(qIe," \u2014 "),eQ=n(qIe,"A",{href:!0});var _5t=s(eQ);Utr=r(_5t,"MBartForQuestionAnswering"),_5t.forEach(t),Jtr=r(qIe," (mBART model)"),qIe.forEach(t),Ytr=i(X),UF=n(X,"LI",{});var jIe=s(UF);q2e=n(jIe,"STRONG",{});var u5t=s(q2e);Ktr=r(u5t,"megatron-bert"),u5t.forEach(t),Ztr=r(jIe," \u2014 "),oQ=n(jIe,"A",{href:!0});var b5t=s(oQ);ear=r(b5t,"MegatronBertForQuestionAnswering"),b5t.forEach(t),oar=r(jIe," (Megatron-BERT model)"),jIe.forEach(t),rar=i(X),JF=n(X,"LI",{});var DIe=s(JF);j2e=n(DIe,"STRONG",{});var v5t=s(j2e);tar=r(v5t,"mobilebert"),v5t.forEach(t),aar=r(DIe," \u2014 "),rQ=n(DIe,"A",{href:!0});var F5t=s(rQ);nar=r(F5t,"MobileBertForQuestionAnswering"),F5t.forEach(t),sar=r(DIe," (MobileBERT model)"),DIe.forEach(t),lar=i(X),YF=n(X,"LI",{});var GIe=s(YF);D2e=n(GIe,"STRONG",{});var T5t=s(D2e);iar=r(T5t,"mpnet"),T5t.forEach(t),dar=r(GIe," \u2014 "),tQ=n(GIe,"A",{href:!0});var M5t=s(tQ);car=r(M5t,"MPNetForQuestionAnswering"),M5t.forEach(t),far=r(GIe," (MPNet model)"),GIe.forEach(t),mar=i(X),KF=n(X,"LI",{});var OIe=s(KF);G2e=n(OIe,"STRONG",{});var E5t=s(G2e);gar=r(E5t,"mvp"),E5t.forEach(t),har=r(OIe," \u2014 "),aQ=n(OIe,"A",{href:!0});var C5t=s(aQ);par=r(C5t,"MvpForQuestionAnswering"),C5t.forEach(t),_ar=r(OIe," (MVP model)"),OIe.forEach(t),uar=i(X),ZF=n(X,"LI",{});var VIe=s(ZF);O2e=n(VIe,"STRONG",{});var w5t=s(O2e);bar=r(w5t,"nezha"),w5t.forEach(t),Far=r(VIe," \u2014 "),nQ=n(VIe,"A",{href:!0});var A5t=s(nQ);Tar=r(A5t,"NezhaForQuestionAnswering"),A5t.forEach(t),Mar=r(VIe," (Nezha model)"),VIe.forEach(t),Ear=i(X),eT=n(X,"LI",{});var XIe=s(eT);V2e=n(XIe,"STRONG",{});var L5t=s(V2e);Car=r(L5t,"nystromformer"),L5t.forEach(t),war=r(XIe," \u2014 "),sQ=n(XIe,"A",{href:!0});var y5t=s(sQ);Aar=r(y5t,"NystromformerForQuestionAnswering"),y5t.forEach(t),Lar=r(XIe," (Nystr\xF6mformer model)"),XIe.forEach(t),yar=i(X),oT=n(X,"LI",{});var zIe=s(oT);X2e=n(zIe,"STRONG",{});var x5t=s(X2e);xar=r(x5t,"qdqbert"),x5t.forEach(t),$ar=r(zIe," \u2014 "),lQ=n(zIe,"A",{href:!0});var $5t=s(lQ);kar=r($5t,"QDQBertForQuestionAnswering"),$5t.forEach(t),Sar=r(zIe," (QDQBert model)"),zIe.forEach(t),Rar=i(X),rT=n(X,"LI",{});var WIe=s(rT);z2e=n(WIe,"STRONG",{});var k5t=s(z2e);Par=r(k5t,"reformer"),k5t.forEach(t),Bar=r(WIe," \u2014 "),iQ=n(WIe,"A",{href:!0});var S5t=s(iQ);Iar=r(S5t,"ReformerForQuestionAnswering"),S5t.forEach(t),Nar=r(WIe," (Reformer model)"),WIe.forEach(t),qar=i(X),tT=n(X,"LI",{});var QIe=s(tT);W2e=n(QIe,"STRONG",{});var R5t=s(W2e);jar=r(R5t,"rembert"),R5t.forEach(t),Dar=r(QIe," \u2014 "),dQ=n(QIe,"A",{href:!0});var P5t=s(dQ);Gar=r(P5t,"RemBertForQuestionAnswering"),P5t.forEach(t),Oar=r(QIe," (RemBERT model)"),QIe.forEach(t),Var=i(X),aT=n(X,"LI",{});var HIe=s(aT);Q2e=n(HIe,"STRONG",{});var B5t=s(Q2e);Xar=r(B5t,"roberta"),B5t.forEach(t),zar=r(HIe," \u2014 "),cQ=n(HIe,"A",{href:!0});var I5t=s(cQ);War=r(I5t,"RobertaForQuestionAnswering"),I5t.forEach(t),Qar=r(HIe," (RoBERTa model)"),HIe.forEach(t),Har=i(X),nT=n(X,"LI",{});var UIe=s(nT);H2e=n(UIe,"STRONG",{});var N5t=s(H2e);Uar=r(N5t,"roformer"),N5t.forEach(t),Jar=r(UIe," \u2014 "),fQ=n(UIe,"A",{href:!0});var q5t=s(fQ);Yar=r(q5t,"RoFormerForQuestionAnswering"),q5t.forEach(t),Kar=r(UIe," (RoFormer model)"),UIe.forEach(t),Zar=i(X),sT=n(X,"LI",{});var JIe=s(sT);U2e=n(JIe,"STRONG",{});var j5t=s(U2e);enr=r(j5t,"splinter"),j5t.forEach(t),onr=r(JIe," \u2014 "),mQ=n(JIe,"A",{href:!0});var D5t=s(mQ);rnr=r(D5t,"SplinterForQuestionAnswering"),D5t.forEach(t),tnr=r(JIe," (Splinter model)"),JIe.forEach(t),anr=i(X),lT=n(X,"LI",{});var YIe=s(lT);J2e=n(YIe,"STRONG",{});var G5t=s(J2e);nnr=r(G5t,"squeezebert"),G5t.forEach(t),snr=r(YIe," \u2014 "),gQ=n(YIe,"A",{href:!0});var O5t=s(gQ);lnr=r(O5t,"SqueezeBertForQuestionAnswering"),O5t.forEach(t),inr=r(YIe," (SqueezeBERT model)"),YIe.forEach(t),dnr=i(X),iT=n(X,"LI",{});var KIe=s(iT);Y2e=n(KIe,"STRONG",{});var V5t=s(Y2e);cnr=r(V5t,"xlm"),V5t.forEach(t),fnr=r(KIe," \u2014 "),hQ=n(KIe,"A",{href:!0});var X5t=s(hQ);mnr=r(X5t,"XLMForQuestionAnsweringSimple"),X5t.forEach(t),gnr=r(KIe," (XLM model)"),KIe.forEach(t),hnr=i(X),dT=n(X,"LI",{});var ZIe=s(dT);K2e=n(ZIe,"STRONG",{});var z5t=s(K2e);pnr=r(z5t,"xlm-roberta"),z5t.forEach(t),_nr=r(ZIe," \u2014 "),pQ=n(ZIe,"A",{href:!0});var W5t=s(pQ);unr=r(W5t,"XLMRobertaForQuestionAnswering"),W5t.forEach(t),bnr=r(ZIe," (XLM-RoBERTa model)"),ZIe.forEach(t),vnr=i(X),cT=n(X,"LI",{});var eNe=s(cT);Z2e=n(eNe,"STRONG",{});var Q5t=s(Z2e);Fnr=r(Q5t,"xlm-roberta-xl"),Q5t.forEach(t),Tnr=r(eNe," \u2014 "),_Q=n(eNe,"A",{href:!0});var H5t=s(_Q);Mnr=r(H5t,"XLMRobertaXLForQuestionAnswering"),H5t.forEach(t),Enr=r(eNe," (XLM-RoBERTa-XL model)"),eNe.forEach(t),Cnr=i(X),fT=n(X,"LI",{});var oNe=s(fT);ebe=n(oNe,"STRONG",{});var U5t=s(ebe);wnr=r(U5t,"xlnet"),U5t.forEach(t),Anr=r(oNe," \u2014 "),uQ=n(oNe,"A",{href:!0});var J5t=s(uQ);Lnr=r(J5t,"XLNetForQuestionAnsweringSimple"),J5t.forEach(t),ynr=r(oNe," (XLNet model)"),oNe.forEach(t),xnr=i(X),mT=n(X,"LI",{});var rNe=s(mT);obe=n(rNe,"STRONG",{});var Y5t=s(obe);$nr=r(Y5t,"yoso"),Y5t.forEach(t),knr=r(rNe," \u2014 "),bQ=n(rNe,"A",{href:!0});var K5t=s(bQ);Snr=r(K5t,"YosoForQuestionAnswering"),K5t.forEach(t),Rnr=r(rNe," (YOSO model)"),rNe.forEach(t),X.forEach(t),Pnr=i(ua),gT=n(ua,"P",{});var tNe=s(gT);Bnr=r(tNe,"The model is set in evaluation mode by default using "),rbe=n(tNe,"CODE",{});var Z5t=s(rbe);Inr=r(Z5t,"model.eval()"),Z5t.forEach(t),Nnr=r(tNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tbe=n(tNe,"CODE",{});var e0t=s(tbe);qnr=r(e0t,"model.train()"),e0t.forEach(t),tNe.forEach(t),jnr=i(ua),T(hT.$$.fragment,ua),ua.forEach(t),ml.forEach(t),YXe=i(f),bd=n(f,"H2",{class:!0});var tQe=s(bd);pT=n(tQe,"A",{id:!0,class:!0,href:!0});var o0t=s(pT);abe=n(o0t,"SPAN",{});var r0t=s(abe);T(kL.$$.fragment,r0t),r0t.forEach(t),o0t.forEach(t),Dnr=i(tQe),nbe=n(tQe,"SPAN",{});var t0t=s(nbe);Gnr=r(t0t,"AutoModelForTableQuestionAnswering"),t0t.forEach(t),tQe.forEach(t),KXe=i(f),Go=n(f,"DIV",{class:!0});var gl=s(Go);T(SL.$$.fragment,gl),Onr=i(gl),vd=n(gl,"P",{});var dte=s(vd);Vnr=r(dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),vQ=n(dte,"A",{href:!0});var a0t=s(vQ);Xnr=r(a0t,"from_pretrained()"),a0t.forEach(t),znr=r(dte," class method or the "),FQ=n(dte,"A",{href:!0});var n0t=s(FQ);Wnr=r(n0t,"from_config()"),n0t.forEach(t),Qnr=r(dte,` class
method.`),dte.forEach(t),Hnr=i(gl),RL=n(gl,"P",{});var aQe=s(RL);Unr=r(aQe,"This class cannot be instantiated directly using "),sbe=n(aQe,"CODE",{});var s0t=s(sbe);Jnr=r(s0t,"__init__()"),s0t.forEach(t),Ynr=r(aQe," (throws an error)."),aQe.forEach(t),Knr=i(gl),bt=n(gl,"DIV",{class:!0});var Rw=s(bt);T(PL.$$.fragment,Rw),Znr=i(Rw),lbe=n(Rw,"P",{});var l0t=s(lbe);esr=r(l0t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),l0t.forEach(t),osr=i(Rw),Fd=n(Rw,"P",{});var cte=s(Fd);rsr=r(cte,`Note:
Loading a model from its configuration file does `),ibe=n(cte,"STRONG",{});var i0t=s(ibe);tsr=r(i0t,"not"),i0t.forEach(t),asr=r(cte,` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=n(cte,"A",{href:!0});var d0t=s(TQ);nsr=r(d0t,"from_pretrained()"),d0t.forEach(t),ssr=r(cte," to load the model weights."),cte.forEach(t),lsr=i(Rw),T(_T.$$.fragment,Rw),Rw.forEach(t),isr=i(gl),lo=n(gl,"DIV",{class:!0});var ba=s(lo);T(BL.$$.fragment,ba),dsr=i(ba),dbe=n(ba,"P",{});var c0t=s(dbe);csr=r(c0t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),c0t.forEach(t),fsr=i(ba),Wa=n(ba,"P",{});var Pw=s(Wa);msr=r(Pw,"The model class to instantiate is selected based on the "),cbe=n(Pw,"CODE",{});var f0t=s(cbe);gsr=r(f0t,"model_type"),f0t.forEach(t),hsr=r(Pw,` property of the config object (either
passed as an argument or loaded from `),fbe=n(Pw,"CODE",{});var m0t=s(fbe);psr=r(m0t,"pretrained_model_name_or_path"),m0t.forEach(t),_sr=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mbe=n(Pw,"CODE",{});var g0t=s(mbe);usr=r(g0t,"pretrained_model_name_or_path"),g0t.forEach(t),bsr=r(Pw,":"),Pw.forEach(t),vsr=i(ba),gbe=n(ba,"UL",{});var h0t=s(gbe);uT=n(h0t,"LI",{});var aNe=s(uT);hbe=n(aNe,"STRONG",{});var p0t=s(hbe);Fsr=r(p0t,"tapas"),p0t.forEach(t),Tsr=r(aNe," \u2014 "),MQ=n(aNe,"A",{href:!0});var _0t=s(MQ);Msr=r(_0t,"TapasForQuestionAnswering"),_0t.forEach(t),Esr=r(aNe," (TAPAS model)"),aNe.forEach(t),h0t.forEach(t),Csr=i(ba),bT=n(ba,"P",{});var nNe=s(bT);wsr=r(nNe,"The model is set in evaluation mode by default using "),pbe=n(nNe,"CODE",{});var u0t=s(pbe);Asr=r(u0t,"model.eval()"),u0t.forEach(t),Lsr=r(nNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_be=n(nNe,"CODE",{});var b0t=s(_be);ysr=r(b0t,"model.train()"),b0t.forEach(t),nNe.forEach(t),xsr=i(ba),T(vT.$$.fragment,ba),ba.forEach(t),gl.forEach(t),ZXe=i(f),Td=n(f,"H2",{class:!0});var nQe=s(Td);FT=n(nQe,"A",{id:!0,class:!0,href:!0});var v0t=s(FT);ube=n(v0t,"SPAN",{});var F0t=s(ube);T(IL.$$.fragment,F0t),F0t.forEach(t),v0t.forEach(t),$sr=i(nQe),bbe=n(nQe,"SPAN",{});var T0t=s(bbe);ksr=r(T0t,"AutoModelForImageClassification"),T0t.forEach(t),nQe.forEach(t),eze=i(f),Oo=n(f,"DIV",{class:!0});var hl=s(Oo);T(NL.$$.fragment,hl),Ssr=i(hl),Md=n(hl,"P",{});var fte=s(Md);Rsr=r(fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),EQ=n(fte,"A",{href:!0});var M0t=s(EQ);Psr=r(M0t,"from_pretrained()"),M0t.forEach(t),Bsr=r(fte," class method or the "),CQ=n(fte,"A",{href:!0});var E0t=s(CQ);Isr=r(E0t,"from_config()"),E0t.forEach(t),Nsr=r(fte,` class
method.`),fte.forEach(t),qsr=i(hl),qL=n(hl,"P",{});var sQe=s(qL);jsr=r(sQe,"This class cannot be instantiated directly using "),vbe=n(sQe,"CODE",{});var C0t=s(vbe);Dsr=r(C0t,"__init__()"),C0t.forEach(t),Gsr=r(sQe," (throws an error)."),sQe.forEach(t),Osr=i(hl),vt=n(hl,"DIV",{class:!0});var Bw=s(vt);T(jL.$$.fragment,Bw),Vsr=i(Bw),Fbe=n(Bw,"P",{});var w0t=s(Fbe);Xsr=r(w0t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),w0t.forEach(t),zsr=i(Bw),Ed=n(Bw,"P",{});var mte=s(Ed);Wsr=r(mte,`Note:
Loading a model from its configuration file does `),Tbe=n(mte,"STRONG",{});var A0t=s(Tbe);Qsr=r(A0t,"not"),A0t.forEach(t),Hsr=r(mte,` load the model weights. It only affects the
model\u2019s configuration. Use `),wQ=n(mte,"A",{href:!0});var L0t=s(wQ);Usr=r(L0t,"from_pretrained()"),L0t.forEach(t),Jsr=r(mte," to load the model weights."),mte.forEach(t),Ysr=i(Bw),T(TT.$$.fragment,Bw),Bw.forEach(t),Ksr=i(hl),io=n(hl,"DIV",{class:!0});var va=s(io);T(DL.$$.fragment,va),Zsr=i(va),Mbe=n(va,"P",{});var y0t=s(Mbe);elr=r(y0t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),y0t.forEach(t),olr=i(va),Qa=n(va,"P",{});var Iw=s(Qa);rlr=r(Iw,"The model class to instantiate is selected based on the "),Ebe=n(Iw,"CODE",{});var x0t=s(Ebe);tlr=r(x0t,"model_type"),x0t.forEach(t),alr=r(Iw,` property of the config object (either
passed as an argument or loaded from `),Cbe=n(Iw,"CODE",{});var $0t=s(Cbe);nlr=r($0t,"pretrained_model_name_or_path"),$0t.forEach(t),slr=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wbe=n(Iw,"CODE",{});var k0t=s(wbe);llr=r(k0t,"pretrained_model_name_or_path"),k0t.forEach(t),ilr=r(Iw,":"),Iw.forEach(t),dlr=i(va),ve=n(va,"UL",{});var Te=s(ve);MT=n(Te,"LI",{});var sNe=s(MT);Abe=n(sNe,"STRONG",{});var S0t=s(Abe);clr=r(S0t,"beit"),S0t.forEach(t),flr=r(sNe," \u2014 "),AQ=n(sNe,"A",{href:!0});var R0t=s(AQ);mlr=r(R0t,"BeitForImageClassification"),R0t.forEach(t),glr=r(sNe," (BEiT model)"),sNe.forEach(t),hlr=i(Te),ET=n(Te,"LI",{});var lNe=s(ET);Lbe=n(lNe,"STRONG",{});var P0t=s(Lbe);plr=r(P0t,"convnext"),P0t.forEach(t),_lr=r(lNe," \u2014 "),LQ=n(lNe,"A",{href:!0});var B0t=s(LQ);ulr=r(B0t,"ConvNextForImageClassification"),B0t.forEach(t),blr=r(lNe," (ConvNeXT model)"),lNe.forEach(t),vlr=i(Te),CT=n(Te,"LI",{});var iNe=s(CT);ybe=n(iNe,"STRONG",{});var I0t=s(ybe);Flr=r(I0t,"cvt"),I0t.forEach(t),Tlr=r(iNe," \u2014 "),yQ=n(iNe,"A",{href:!0});var N0t=s(yQ);Mlr=r(N0t,"CvtForImageClassification"),N0t.forEach(t),Elr=r(iNe," (CvT model)"),iNe.forEach(t),Clr=i(Te),wT=n(Te,"LI",{});var dNe=s(wT);xbe=n(dNe,"STRONG",{});var q0t=s(xbe);wlr=r(q0t,"data2vec-vision"),q0t.forEach(t),Alr=r(dNe," \u2014 "),xQ=n(dNe,"A",{href:!0});var j0t=s(xQ);Llr=r(j0t,"Data2VecVisionForImageClassification"),j0t.forEach(t),ylr=r(dNe," (Data2VecVision model)"),dNe.forEach(t),xlr=i(Te),Us=n(Te,"LI",{});var NS=s(Us);$be=n(NS,"STRONG",{});var D0t=s($be);$lr=r(D0t,"deit"),D0t.forEach(t),klr=r(NS," \u2014 "),$Q=n(NS,"A",{href:!0});var G0t=s($Q);Slr=r(G0t,"DeiTForImageClassification"),G0t.forEach(t),Rlr=r(NS," or "),kQ=n(NS,"A",{href:!0});var O0t=s(kQ);Plr=r(O0t,"DeiTForImageClassificationWithTeacher"),O0t.forEach(t),Blr=r(NS," (DeiT model)"),NS.forEach(t),Ilr=i(Te),AT=n(Te,"LI",{});var cNe=s(AT);kbe=n(cNe,"STRONG",{});var V0t=s(kbe);Nlr=r(V0t,"imagegpt"),V0t.forEach(t),qlr=r(cNe," \u2014 "),SQ=n(cNe,"A",{href:!0});var X0t=s(SQ);jlr=r(X0t,"ImageGPTForImageClassification"),X0t.forEach(t),Dlr=r(cNe," (ImageGPT model)"),cNe.forEach(t),Glr=i(Te),Js=n(Te,"LI",{});var qS=s(Js);Sbe=n(qS,"STRONG",{});var z0t=s(Sbe);Olr=r(z0t,"levit"),z0t.forEach(t),Vlr=r(qS," \u2014 "),RQ=n(qS,"A",{href:!0});var W0t=s(RQ);Xlr=r(W0t,"LevitForImageClassification"),W0t.forEach(t),zlr=r(qS," or "),PQ=n(qS,"A",{href:!0});var Q0t=s(PQ);Wlr=r(Q0t,"LevitForImageClassificationWithTeacher"),Q0t.forEach(t),Qlr=r(qS," (LeViT model)"),qS.forEach(t),Hlr=i(Te),LT=n(Te,"LI",{});var fNe=s(LT);Rbe=n(fNe,"STRONG",{});var H0t=s(Rbe);Ulr=r(H0t,"mobilevit"),H0t.forEach(t),Jlr=r(fNe," \u2014 "),BQ=n(fNe,"A",{href:!0});var U0t=s(BQ);Ylr=r(U0t,"MobileViTForImageClassification"),U0t.forEach(t),Klr=r(fNe," (MobileViT model)"),fNe.forEach(t),Zlr=i(Te),Ft=n(Te,"LI",{});var Pf=s(Ft);Pbe=n(Pf,"STRONG",{});var J0t=s(Pbe);eir=r(J0t,"perceiver"),J0t.forEach(t),oir=r(Pf," \u2014 "),IQ=n(Pf,"A",{href:!0});var Y0t=s(IQ);rir=r(Y0t,"PerceiverForImageClassificationLearned"),Y0t.forEach(t),tir=r(Pf," or "),NQ=n(Pf,"A",{href:!0});var K0t=s(NQ);air=r(K0t,"PerceiverForImageClassificationFourier"),K0t.forEach(t),nir=r(Pf," or "),qQ=n(Pf,"A",{href:!0});var Z0t=s(qQ);sir=r(Z0t,"PerceiverForImageClassificationConvProcessing"),Z0t.forEach(t),lir=r(Pf," (Perceiver model)"),Pf.forEach(t),iir=i(Te),yT=n(Te,"LI",{});var mNe=s(yT);Bbe=n(mNe,"STRONG",{});var ewt=s(Bbe);dir=r(ewt,"poolformer"),ewt.forEach(t),cir=r(mNe," \u2014 "),jQ=n(mNe,"A",{href:!0});var owt=s(jQ);fir=r(owt,"PoolFormerForImageClassification"),owt.forEach(t),mir=r(mNe," (PoolFormer model)"),mNe.forEach(t),gir=i(Te),xT=n(Te,"LI",{});var gNe=s(xT);Ibe=n(gNe,"STRONG",{});var rwt=s(Ibe);hir=r(rwt,"regnet"),rwt.forEach(t),pir=r(gNe," \u2014 "),DQ=n(gNe,"A",{href:!0});var twt=s(DQ);_ir=r(twt,"RegNetForImageClassification"),twt.forEach(t),uir=r(gNe," (RegNet model)"),gNe.forEach(t),bir=i(Te),$T=n(Te,"LI",{});var hNe=s($T);Nbe=n(hNe,"STRONG",{});var awt=s(Nbe);vir=r(awt,"resnet"),awt.forEach(t),Fir=r(hNe," \u2014 "),GQ=n(hNe,"A",{href:!0});var nwt=s(GQ);Tir=r(nwt,"ResNetForImageClassification"),nwt.forEach(t),Mir=r(hNe," (ResNet model)"),hNe.forEach(t),Eir=i(Te),kT=n(Te,"LI",{});var pNe=s(kT);qbe=n(pNe,"STRONG",{});var swt=s(qbe);Cir=r(swt,"segformer"),swt.forEach(t),wir=r(pNe," \u2014 "),OQ=n(pNe,"A",{href:!0});var lwt=s(OQ);Air=r(lwt,"SegformerForImageClassification"),lwt.forEach(t),Lir=r(pNe," (SegFormer model)"),pNe.forEach(t),yir=i(Te),ST=n(Te,"LI",{});var _Ne=s(ST);jbe=n(_Ne,"STRONG",{});var iwt=s(jbe);xir=r(iwt,"swin"),iwt.forEach(t),$ir=r(_Ne," \u2014 "),VQ=n(_Ne,"A",{href:!0});var dwt=s(VQ);kir=r(dwt,"SwinForImageClassification"),dwt.forEach(t),Sir=r(_Ne," (Swin Transformer model)"),_Ne.forEach(t),Rir=i(Te),RT=n(Te,"LI",{});var uNe=s(RT);Dbe=n(uNe,"STRONG",{});var cwt=s(Dbe);Pir=r(cwt,"van"),cwt.forEach(t),Bir=r(uNe," \u2014 "),XQ=n(uNe,"A",{href:!0});var fwt=s(XQ);Iir=r(fwt,"VanForImageClassification"),fwt.forEach(t),Nir=r(uNe," (VAN model)"),uNe.forEach(t),qir=i(Te),PT=n(Te,"LI",{});var bNe=s(PT);Gbe=n(bNe,"STRONG",{});var mwt=s(Gbe);jir=r(mwt,"vit"),mwt.forEach(t),Dir=r(bNe," \u2014 "),zQ=n(bNe,"A",{href:!0});var gwt=s(zQ);Gir=r(gwt,"ViTForImageClassification"),gwt.forEach(t),Oir=r(bNe," (ViT model)"),bNe.forEach(t),Te.forEach(t),Vir=i(va),BT=n(va,"P",{});var vNe=s(BT);Xir=r(vNe,"The model is set in evaluation mode by default using "),Obe=n(vNe,"CODE",{});var hwt=s(Obe);zir=r(hwt,"model.eval()"),hwt.forEach(t),Wir=r(vNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vbe=n(vNe,"CODE",{});var pwt=s(Vbe);Qir=r(pwt,"model.train()"),pwt.forEach(t),vNe.forEach(t),Hir=i(va),T(IT.$$.fragment,va),va.forEach(t),hl.forEach(t),oze=i(f),Cd=n(f,"H2",{class:!0});var lQe=s(Cd);NT=n(lQe,"A",{id:!0,class:!0,href:!0});var _wt=s(NT);Xbe=n(_wt,"SPAN",{});var uwt=s(Xbe);T(GL.$$.fragment,uwt),uwt.forEach(t),_wt.forEach(t),Uir=i(lQe),zbe=n(lQe,"SPAN",{});var bwt=s(zbe);Jir=r(bwt,"AutoModelForVision2Seq"),bwt.forEach(t),lQe.forEach(t),rze=i(f),Vo=n(f,"DIV",{class:!0});var pl=s(Vo);T(OL.$$.fragment,pl),Yir=i(pl),wd=n(pl,"P",{});var gte=s(wd);Kir=r(gte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),WQ=n(gte,"A",{href:!0});var vwt=s(WQ);Zir=r(vwt,"from_pretrained()"),vwt.forEach(t),edr=r(gte," class method or the "),QQ=n(gte,"A",{href:!0});var Fwt=s(QQ);odr=r(Fwt,"from_config()"),Fwt.forEach(t),rdr=r(gte,` class
method.`),gte.forEach(t),tdr=i(pl),VL=n(pl,"P",{});var iQe=s(VL);adr=r(iQe,"This class cannot be instantiated directly using "),Wbe=n(iQe,"CODE",{});var Twt=s(Wbe);ndr=r(Twt,"__init__()"),Twt.forEach(t),sdr=r(iQe," (throws an error)."),iQe.forEach(t),ldr=i(pl),Tt=n(pl,"DIV",{class:!0});var Nw=s(Tt);T(XL.$$.fragment,Nw),idr=i(Nw),Qbe=n(Nw,"P",{});var Mwt=s(Qbe);ddr=r(Mwt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Mwt.forEach(t),cdr=i(Nw),Ad=n(Nw,"P",{});var hte=s(Ad);fdr=r(hte,`Note:
Loading a model from its configuration file does `),Hbe=n(hte,"STRONG",{});var Ewt=s(Hbe);mdr=r(Ewt,"not"),Ewt.forEach(t),gdr=r(hte,` load the model weights. It only affects the
model\u2019s configuration. Use `),HQ=n(hte,"A",{href:!0});var Cwt=s(HQ);hdr=r(Cwt,"from_pretrained()"),Cwt.forEach(t),pdr=r(hte," to load the model weights."),hte.forEach(t),_dr=i(Nw),T(qT.$$.fragment,Nw),Nw.forEach(t),udr=i(pl),co=n(pl,"DIV",{class:!0});var Fa=s(co);T(zL.$$.fragment,Fa),bdr=i(Fa),Ube=n(Fa,"P",{});var wwt=s(Ube);vdr=r(wwt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),wwt.forEach(t),Fdr=i(Fa),Ha=n(Fa,"P",{});var qw=s(Ha);Tdr=r(qw,"The model class to instantiate is selected based on the "),Jbe=n(qw,"CODE",{});var Awt=s(Jbe);Mdr=r(Awt,"model_type"),Awt.forEach(t),Edr=r(qw,` property of the config object (either
passed as an argument or loaded from `),Ybe=n(qw,"CODE",{});var Lwt=s(Ybe);Cdr=r(Lwt,"pretrained_model_name_or_path"),Lwt.forEach(t),wdr=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kbe=n(qw,"CODE",{});var ywt=s(Kbe);Adr=r(ywt,"pretrained_model_name_or_path"),ywt.forEach(t),Ldr=r(qw,":"),qw.forEach(t),ydr=i(Fa),Zbe=n(Fa,"UL",{});var xwt=s(Zbe);jT=n(xwt,"LI",{});var FNe=s(jT);eve=n(FNe,"STRONG",{});var $wt=s(eve);xdr=r($wt,"vision-encoder-decoder"),$wt.forEach(t),$dr=r(FNe," \u2014 "),UQ=n(FNe,"A",{href:!0});var kwt=s(UQ);kdr=r(kwt,"VisionEncoderDecoderModel"),kwt.forEach(t),Sdr=r(FNe," (Vision Encoder decoder model)"),FNe.forEach(t),xwt.forEach(t),Rdr=i(Fa),DT=n(Fa,"P",{});var TNe=s(DT);Pdr=r(TNe,"The model is set in evaluation mode by default using "),ove=n(TNe,"CODE",{});var Swt=s(ove);Bdr=r(Swt,"model.eval()"),Swt.forEach(t),Idr=r(TNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rve=n(TNe,"CODE",{});var Rwt=s(rve);Ndr=r(Rwt,"model.train()"),Rwt.forEach(t),TNe.forEach(t),qdr=i(Fa),T(GT.$$.fragment,Fa),Fa.forEach(t),pl.forEach(t),tze=i(f),Ld=n(f,"H2",{class:!0});var dQe=s(Ld);OT=n(dQe,"A",{id:!0,class:!0,href:!0});var Pwt=s(OT);tve=n(Pwt,"SPAN",{});var Bwt=s(tve);T(WL.$$.fragment,Bwt),Bwt.forEach(t),Pwt.forEach(t),jdr=i(dQe),ave=n(dQe,"SPAN",{});var Iwt=s(ave);Ddr=r(Iwt,"AutoModelForVisualQuestionAnswering"),Iwt.forEach(t),dQe.forEach(t),aze=i(f),Xo=n(f,"DIV",{class:!0});var _l=s(Xo);T(QL.$$.fragment,_l),Gdr=i(_l),yd=n(_l,"P",{});var pte=s(yd);Odr=r(pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),JQ=n(pte,"A",{href:!0});var Nwt=s(JQ);Vdr=r(Nwt,"from_pretrained()"),Nwt.forEach(t),Xdr=r(pte," class method or the "),YQ=n(pte,"A",{href:!0});var qwt=s(YQ);zdr=r(qwt,"from_config()"),qwt.forEach(t),Wdr=r(pte,` class
method.`),pte.forEach(t),Qdr=i(_l),HL=n(_l,"P",{});var cQe=s(HL);Hdr=r(cQe,"This class cannot be instantiated directly using "),nve=n(cQe,"CODE",{});var jwt=s(nve);Udr=r(jwt,"__init__()"),jwt.forEach(t),Jdr=r(cQe," (throws an error)."),cQe.forEach(t),Ydr=i(_l),Mt=n(_l,"DIV",{class:!0});var jw=s(Mt);T(UL.$$.fragment,jw),Kdr=i(jw),sve=n(jw,"P",{});var Dwt=s(sve);Zdr=r(Dwt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Dwt.forEach(t),ecr=i(jw),xd=n(jw,"P",{});var _te=s(xd);ocr=r(_te,`Note:
Loading a model from its configuration file does `),lve=n(_te,"STRONG",{});var Gwt=s(lve);rcr=r(Gwt,"not"),Gwt.forEach(t),tcr=r(_te,` load the model weights. It only affects the
model\u2019s configuration. Use `),KQ=n(_te,"A",{href:!0});var Owt=s(KQ);acr=r(Owt,"from_pretrained()"),Owt.forEach(t),ncr=r(_te," to load the model weights."),_te.forEach(t),scr=i(jw),T(VT.$$.fragment,jw),jw.forEach(t),lcr=i(_l),fo=n(_l,"DIV",{class:!0});var Ta=s(fo);T(JL.$$.fragment,Ta),icr=i(Ta),ive=n(Ta,"P",{});var Vwt=s(ive);dcr=r(Vwt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Vwt.forEach(t),ccr=i(Ta),Ua=n(Ta,"P",{});var Dw=s(Ua);fcr=r(Dw,"The model class to instantiate is selected based on the "),dve=n(Dw,"CODE",{});var Xwt=s(dve);mcr=r(Xwt,"model_type"),Xwt.forEach(t),gcr=r(Dw,` property of the config object (either
passed as an argument or loaded from `),cve=n(Dw,"CODE",{});var zwt=s(cve);hcr=r(zwt,"pretrained_model_name_or_path"),zwt.forEach(t),pcr=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fve=n(Dw,"CODE",{});var Wwt=s(fve);_cr=r(Wwt,"pretrained_model_name_or_path"),Wwt.forEach(t),ucr=r(Dw,":"),Dw.forEach(t),bcr=i(Ta),mve=n(Ta,"UL",{});var Qwt=s(mve);XT=n(Qwt,"LI",{});var MNe=s(XT);gve=n(MNe,"STRONG",{});var Hwt=s(gve);vcr=r(Hwt,"vilt"),Hwt.forEach(t),Fcr=r(MNe," \u2014 "),ZQ=n(MNe,"A",{href:!0});var Uwt=s(ZQ);Tcr=r(Uwt,"ViltForQuestionAnswering"),Uwt.forEach(t),Mcr=r(MNe," (ViLT model)"),MNe.forEach(t),Qwt.forEach(t),Ecr=i(Ta),zT=n(Ta,"P",{});var ENe=s(zT);Ccr=r(ENe,"The model is set in evaluation mode by default using "),hve=n(ENe,"CODE",{});var Jwt=s(hve);wcr=r(Jwt,"model.eval()"),Jwt.forEach(t),Acr=r(ENe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pve=n(ENe,"CODE",{});var Ywt=s(pve);Lcr=r(Ywt,"model.train()"),Ywt.forEach(t),ENe.forEach(t),ycr=i(Ta),T(WT.$$.fragment,Ta),Ta.forEach(t),_l.forEach(t),nze=i(f),$d=n(f,"H2",{class:!0});var fQe=s($d);QT=n(fQe,"A",{id:!0,class:!0,href:!0});var Kwt=s(QT);_ve=n(Kwt,"SPAN",{});var Zwt=s(_ve);T(YL.$$.fragment,Zwt),Zwt.forEach(t),Kwt.forEach(t),xcr=i(fQe),uve=n(fQe,"SPAN",{});var eAt=s(uve);$cr=r(eAt,"AutoModelForAudioClassification"),eAt.forEach(t),fQe.forEach(t),sze=i(f),zo=n(f,"DIV",{class:!0});var ul=s(zo);T(KL.$$.fragment,ul),kcr=i(ul),kd=n(ul,"P",{});var ute=s(kd);Scr=r(ute,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),eH=n(ute,"A",{href:!0});var oAt=s(eH);Rcr=r(oAt,"from_pretrained()"),oAt.forEach(t),Pcr=r(ute," class method or the "),oH=n(ute,"A",{href:!0});var rAt=s(oH);Bcr=r(rAt,"from_config()"),rAt.forEach(t),Icr=r(ute,` class
method.`),ute.forEach(t),Ncr=i(ul),ZL=n(ul,"P",{});var mQe=s(ZL);qcr=r(mQe,"This class cannot be instantiated directly using "),bve=n(mQe,"CODE",{});var tAt=s(bve);jcr=r(tAt,"__init__()"),tAt.forEach(t),Dcr=r(mQe," (throws an error)."),mQe.forEach(t),Gcr=i(ul),Et=n(ul,"DIV",{class:!0});var Gw=s(Et);T(ey.$$.fragment,Gw),Ocr=i(Gw),vve=n(Gw,"P",{});var aAt=s(vve);Vcr=r(aAt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),aAt.forEach(t),Xcr=i(Gw),Sd=n(Gw,"P",{});var bte=s(Sd);zcr=r(bte,`Note:
Loading a model from its configuration file does `),Fve=n(bte,"STRONG",{});var nAt=s(Fve);Wcr=r(nAt,"not"),nAt.forEach(t),Qcr=r(bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=n(bte,"A",{href:!0});var sAt=s(rH);Hcr=r(sAt,"from_pretrained()"),sAt.forEach(t),Ucr=r(bte," to load the model weights."),bte.forEach(t),Jcr=i(Gw),T(HT.$$.fragment,Gw),Gw.forEach(t),Ycr=i(ul),mo=n(ul,"DIV",{class:!0});var Ma=s(mo);T(oy.$$.fragment,Ma),Kcr=i(Ma),Tve=n(Ma,"P",{});var lAt=s(Tve);Zcr=r(lAt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),lAt.forEach(t),efr=i(Ma),Ja=n(Ma,"P",{});var Ow=s(Ja);ofr=r(Ow,"The model class to instantiate is selected based on the "),Mve=n(Ow,"CODE",{});var iAt=s(Mve);rfr=r(iAt,"model_type"),iAt.forEach(t),tfr=r(Ow,` property of the config object (either
passed as an argument or loaded from `),Eve=n(Ow,"CODE",{});var dAt=s(Eve);afr=r(dAt,"pretrained_model_name_or_path"),dAt.forEach(t),nfr=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cve=n(Ow,"CODE",{});var cAt=s(Cve);sfr=r(cAt,"pretrained_model_name_or_path"),cAt.forEach(t),lfr=r(Ow,":"),Ow.forEach(t),ifr=i(Ma),Pe=n(Ma,"UL",{});var ze=s(Pe);UT=n(ze,"LI",{});var CNe=s(UT);wve=n(CNe,"STRONG",{});var fAt=s(wve);dfr=r(fAt,"data2vec-audio"),fAt.forEach(t),cfr=r(CNe," \u2014 "),tH=n(CNe,"A",{href:!0});var mAt=s(tH);ffr=r(mAt,"Data2VecAudioForSequenceClassification"),mAt.forEach(t),mfr=r(CNe," (Data2VecAudio model)"),CNe.forEach(t),gfr=i(ze),JT=n(ze,"LI",{});var wNe=s(JT);Ave=n(wNe,"STRONG",{});var gAt=s(Ave);hfr=r(gAt,"hubert"),gAt.forEach(t),pfr=r(wNe," \u2014 "),aH=n(wNe,"A",{href:!0});var hAt=s(aH);_fr=r(hAt,"HubertForSequenceClassification"),hAt.forEach(t),ufr=r(wNe," (Hubert model)"),wNe.forEach(t),bfr=i(ze),YT=n(ze,"LI",{});var ANe=s(YT);Lve=n(ANe,"STRONG",{});var pAt=s(Lve);vfr=r(pAt,"sew"),pAt.forEach(t),Ffr=r(ANe," \u2014 "),nH=n(ANe,"A",{href:!0});var _At=s(nH);Tfr=r(_At,"SEWForSequenceClassification"),_At.forEach(t),Mfr=r(ANe," (SEW model)"),ANe.forEach(t),Efr=i(ze),KT=n(ze,"LI",{});var LNe=s(KT);yve=n(LNe,"STRONG",{});var uAt=s(yve);Cfr=r(uAt,"sew-d"),uAt.forEach(t),wfr=r(LNe," \u2014 "),sH=n(LNe,"A",{href:!0});var bAt=s(sH);Afr=r(bAt,"SEWDForSequenceClassification"),bAt.forEach(t),Lfr=r(LNe," (SEW-D model)"),LNe.forEach(t),yfr=i(ze),ZT=n(ze,"LI",{});var yNe=s(ZT);xve=n(yNe,"STRONG",{});var vAt=s(xve);xfr=r(vAt,"unispeech"),vAt.forEach(t),$fr=r(yNe," \u2014 "),lH=n(yNe,"A",{href:!0});var FAt=s(lH);kfr=r(FAt,"UniSpeechForSequenceClassification"),FAt.forEach(t),Sfr=r(yNe," (UniSpeech model)"),yNe.forEach(t),Rfr=i(ze),e7=n(ze,"LI",{});var xNe=s(e7);$ve=n(xNe,"STRONG",{});var TAt=s($ve);Pfr=r(TAt,"unispeech-sat"),TAt.forEach(t),Bfr=r(xNe," \u2014 "),iH=n(xNe,"A",{href:!0});var MAt=s(iH);Ifr=r(MAt,"UniSpeechSatForSequenceClassification"),MAt.forEach(t),Nfr=r(xNe," (UniSpeechSat model)"),xNe.forEach(t),qfr=i(ze),o7=n(ze,"LI",{});var $Ne=s(o7);kve=n($Ne,"STRONG",{});var EAt=s(kve);jfr=r(EAt,"wav2vec2"),EAt.forEach(t),Dfr=r($Ne," \u2014 "),dH=n($Ne,"A",{href:!0});var CAt=s(dH);Gfr=r(CAt,"Wav2Vec2ForSequenceClassification"),CAt.forEach(t),Ofr=r($Ne," (Wav2Vec2 model)"),$Ne.forEach(t),Vfr=i(ze),r7=n(ze,"LI",{});var kNe=s(r7);Sve=n(kNe,"STRONG",{});var wAt=s(Sve);Xfr=r(wAt,"wav2vec2-conformer"),wAt.forEach(t),zfr=r(kNe," \u2014 "),cH=n(kNe,"A",{href:!0});var AAt=s(cH);Wfr=r(AAt,"Wav2Vec2ConformerForSequenceClassification"),AAt.forEach(t),Qfr=r(kNe," (Wav2Vec2-Conformer model)"),kNe.forEach(t),Hfr=i(ze),t7=n(ze,"LI",{});var SNe=s(t7);Rve=n(SNe,"STRONG",{});var LAt=s(Rve);Ufr=r(LAt,"wavlm"),LAt.forEach(t),Jfr=r(SNe," \u2014 "),fH=n(SNe,"A",{href:!0});var yAt=s(fH);Yfr=r(yAt,"WavLMForSequenceClassification"),yAt.forEach(t),Kfr=r(SNe," (WavLM model)"),SNe.forEach(t),ze.forEach(t),Zfr=i(Ma),a7=n(Ma,"P",{});var RNe=s(a7);emr=r(RNe,"The model is set in evaluation mode by default using "),Pve=n(RNe,"CODE",{});var xAt=s(Pve);omr=r(xAt,"model.eval()"),xAt.forEach(t),rmr=r(RNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bve=n(RNe,"CODE",{});var $At=s(Bve);tmr=r($At,"model.train()"),$At.forEach(t),RNe.forEach(t),amr=i(Ma),T(n7.$$.fragment,Ma),Ma.forEach(t),ul.forEach(t),lze=i(f),Rd=n(f,"H2",{class:!0});var gQe=s(Rd);s7=n(gQe,"A",{id:!0,class:!0,href:!0});var kAt=s(s7);Ive=n(kAt,"SPAN",{});var SAt=s(Ive);T(ry.$$.fragment,SAt),SAt.forEach(t),kAt.forEach(t),nmr=i(gQe),Nve=n(gQe,"SPAN",{});var RAt=s(Nve);smr=r(RAt,"AutoModelForAudioFrameClassification"),RAt.forEach(t),gQe.forEach(t),ize=i(f),Wo=n(f,"DIV",{class:!0});var bl=s(Wo);T(ty.$$.fragment,bl),lmr=i(bl),Pd=n(bl,"P",{});var vte=s(Pd);imr=r(vte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),mH=n(vte,"A",{href:!0});var PAt=s(mH);dmr=r(PAt,"from_pretrained()"),PAt.forEach(t),cmr=r(vte," class method or the "),gH=n(vte,"A",{href:!0});var BAt=s(gH);fmr=r(BAt,"from_config()"),BAt.forEach(t),mmr=r(vte,` class
method.`),vte.forEach(t),gmr=i(bl),ay=n(bl,"P",{});var hQe=s(ay);hmr=r(hQe,"This class cannot be instantiated directly using "),qve=n(hQe,"CODE",{});var IAt=s(qve);pmr=r(IAt,"__init__()"),IAt.forEach(t),_mr=r(hQe," (throws an error)."),hQe.forEach(t),umr=i(bl),Ct=n(bl,"DIV",{class:!0});var Vw=s(Ct);T(ny.$$.fragment,Vw),bmr=i(Vw),jve=n(Vw,"P",{});var NAt=s(jve);vmr=r(NAt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),NAt.forEach(t),Fmr=i(Vw),Bd=n(Vw,"P",{});var Fte=s(Bd);Tmr=r(Fte,`Note:
Loading a model from its configuration file does `),Dve=n(Fte,"STRONG",{});var qAt=s(Dve);Mmr=r(qAt,"not"),qAt.forEach(t),Emr=r(Fte,` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=n(Fte,"A",{href:!0});var jAt=s(hH);Cmr=r(jAt,"from_pretrained()"),jAt.forEach(t),wmr=r(Fte," to load the model weights."),Fte.forEach(t),Amr=i(Vw),T(l7.$$.fragment,Vw),Vw.forEach(t),Lmr=i(bl),go=n(bl,"DIV",{class:!0});var Ea=s(go);T(sy.$$.fragment,Ea),ymr=i(Ea),Gve=n(Ea,"P",{});var DAt=s(Gve);xmr=r(DAt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),DAt.forEach(t),$mr=i(Ea),Ya=n(Ea,"P",{});var Xw=s(Ya);kmr=r(Xw,"The model class to instantiate is selected based on the "),Ove=n(Xw,"CODE",{});var GAt=s(Ove);Smr=r(GAt,"model_type"),GAt.forEach(t),Rmr=r(Xw,` property of the config object (either
passed as an argument or loaded from `),Vve=n(Xw,"CODE",{});var OAt=s(Vve);Pmr=r(OAt,"pretrained_model_name_or_path"),OAt.forEach(t),Bmr=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xve=n(Xw,"CODE",{});var VAt=s(Xve);Imr=r(VAt,"pretrained_model_name_or_path"),VAt.forEach(t),Nmr=r(Xw,":"),Xw.forEach(t),qmr=i(Ea),rt=n(Ea,"UL",{});var vl=s(rt);i7=n(vl,"LI",{});var PNe=s(i7);zve=n(PNe,"STRONG",{});var XAt=s(zve);jmr=r(XAt,"data2vec-audio"),XAt.forEach(t),Dmr=r(PNe," \u2014 "),pH=n(PNe,"A",{href:!0});var zAt=s(pH);Gmr=r(zAt,"Data2VecAudioForAudioFrameClassification"),zAt.forEach(t),Omr=r(PNe," (Data2VecAudio model)"),PNe.forEach(t),Vmr=i(vl),d7=n(vl,"LI",{});var BNe=s(d7);Wve=n(BNe,"STRONG",{});var WAt=s(Wve);Xmr=r(WAt,"unispeech-sat"),WAt.forEach(t),zmr=r(BNe," \u2014 "),_H=n(BNe,"A",{href:!0});var QAt=s(_H);Wmr=r(QAt,"UniSpeechSatForAudioFrameClassification"),QAt.forEach(t),Qmr=r(BNe," (UniSpeechSat model)"),BNe.forEach(t),Hmr=i(vl),c7=n(vl,"LI",{});var INe=s(c7);Qve=n(INe,"STRONG",{});var HAt=s(Qve);Umr=r(HAt,"wav2vec2"),HAt.forEach(t),Jmr=r(INe," \u2014 "),uH=n(INe,"A",{href:!0});var UAt=s(uH);Ymr=r(UAt,"Wav2Vec2ForAudioFrameClassification"),UAt.forEach(t),Kmr=r(INe," (Wav2Vec2 model)"),INe.forEach(t),Zmr=i(vl),f7=n(vl,"LI",{});var NNe=s(f7);Hve=n(NNe,"STRONG",{});var JAt=s(Hve);egr=r(JAt,"wav2vec2-conformer"),JAt.forEach(t),ogr=r(NNe," \u2014 "),bH=n(NNe,"A",{href:!0});var YAt=s(bH);rgr=r(YAt,"Wav2Vec2ConformerForAudioFrameClassification"),YAt.forEach(t),tgr=r(NNe," (Wav2Vec2-Conformer model)"),NNe.forEach(t),agr=i(vl),m7=n(vl,"LI",{});var qNe=s(m7);Uve=n(qNe,"STRONG",{});var KAt=s(Uve);ngr=r(KAt,"wavlm"),KAt.forEach(t),sgr=r(qNe," \u2014 "),vH=n(qNe,"A",{href:!0});var ZAt=s(vH);lgr=r(ZAt,"WavLMForAudioFrameClassification"),ZAt.forEach(t),igr=r(qNe," (WavLM model)"),qNe.forEach(t),vl.forEach(t),dgr=i(Ea),g7=n(Ea,"P",{});var jNe=s(g7);cgr=r(jNe,"The model is set in evaluation mode by default using "),Jve=n(jNe,"CODE",{});var e6t=s(Jve);fgr=r(e6t,"model.eval()"),e6t.forEach(t),mgr=r(jNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yve=n(jNe,"CODE",{});var o6t=s(Yve);ggr=r(o6t,"model.train()"),o6t.forEach(t),jNe.forEach(t),hgr=i(Ea),T(h7.$$.fragment,Ea),Ea.forEach(t),bl.forEach(t),dze=i(f),Id=n(f,"H2",{class:!0});var pQe=s(Id);p7=n(pQe,"A",{id:!0,class:!0,href:!0});var r6t=s(p7);Kve=n(r6t,"SPAN",{});var t6t=s(Kve);T(ly.$$.fragment,t6t),t6t.forEach(t),r6t.forEach(t),pgr=i(pQe),Zve=n(pQe,"SPAN",{});var a6t=s(Zve);_gr=r(a6t,"AutoModelForCTC"),a6t.forEach(t),pQe.forEach(t),cze=i(f),Qo=n(f,"DIV",{class:!0});var Fl=s(Qo);T(iy.$$.fragment,Fl),ugr=i(Fl),Nd=n(Fl,"P",{});var Tte=s(Nd);bgr=r(Tte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),FH=n(Tte,"A",{href:!0});var n6t=s(FH);vgr=r(n6t,"from_pretrained()"),n6t.forEach(t),Fgr=r(Tte," class method or the "),TH=n(Tte,"A",{href:!0});var s6t=s(TH);Tgr=r(s6t,"from_config()"),s6t.forEach(t),Mgr=r(Tte,` class
method.`),Tte.forEach(t),Egr=i(Fl),dy=n(Fl,"P",{});var _Qe=s(dy);Cgr=r(_Qe,"This class cannot be instantiated directly using "),e3e=n(_Qe,"CODE",{});var l6t=s(e3e);wgr=r(l6t,"__init__()"),l6t.forEach(t),Agr=r(_Qe," (throws an error)."),_Qe.forEach(t),Lgr=i(Fl),wt=n(Fl,"DIV",{class:!0});var zw=s(wt);T(cy.$$.fragment,zw),ygr=i(zw),o3e=n(zw,"P",{});var i6t=s(o3e);xgr=r(i6t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),i6t.forEach(t),$gr=i(zw),qd=n(zw,"P",{});var Mte=s(qd);kgr=r(Mte,`Note:
Loading a model from its configuration file does `),r3e=n(Mte,"STRONG",{});var d6t=s(r3e);Sgr=r(d6t,"not"),d6t.forEach(t),Rgr=r(Mte,` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=n(Mte,"A",{href:!0});var c6t=s(MH);Pgr=r(c6t,"from_pretrained()"),c6t.forEach(t),Bgr=r(Mte," to load the model weights."),Mte.forEach(t),Igr=i(zw),T(_7.$$.fragment,zw),zw.forEach(t),Ngr=i(Fl),ho=n(Fl,"DIV",{class:!0});var Ca=s(ho);T(fy.$$.fragment,Ca),qgr=i(Ca),t3e=n(Ca,"P",{});var f6t=s(t3e);jgr=r(f6t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),f6t.forEach(t),Dgr=i(Ca),Ka=n(Ca,"P",{});var Ww=s(Ka);Ggr=r(Ww,"The model class to instantiate is selected based on the "),a3e=n(Ww,"CODE",{});var m6t=s(a3e);Ogr=r(m6t,"model_type"),m6t.forEach(t),Vgr=r(Ww,` property of the config object (either
passed as an argument or loaded from `),n3e=n(Ww,"CODE",{});var g6t=s(n3e);Xgr=r(g6t,"pretrained_model_name_or_path"),g6t.forEach(t),zgr=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s3e=n(Ww,"CODE",{});var h6t=s(s3e);Wgr=r(h6t,"pretrained_model_name_or_path"),h6t.forEach(t),Qgr=r(Ww,":"),Ww.forEach(t),Hgr=i(Ca),Le=n(Ca,"UL",{});var Be=s(Le);u7=n(Be,"LI",{});var DNe=s(u7);l3e=n(DNe,"STRONG",{});var p6t=s(l3e);Ugr=r(p6t,"data2vec-audio"),p6t.forEach(t),Jgr=r(DNe," \u2014 "),EH=n(DNe,"A",{href:!0});var _6t=s(EH);Ygr=r(_6t,"Data2VecAudioForCTC"),_6t.forEach(t),Kgr=r(DNe," (Data2VecAudio model)"),DNe.forEach(t),Zgr=i(Be),b7=n(Be,"LI",{});var GNe=s(b7);i3e=n(GNe,"STRONG",{});var u6t=s(i3e);ehr=r(u6t,"hubert"),u6t.forEach(t),ohr=r(GNe," \u2014 "),CH=n(GNe,"A",{href:!0});var b6t=s(CH);rhr=r(b6t,"HubertForCTC"),b6t.forEach(t),thr=r(GNe," (Hubert model)"),GNe.forEach(t),ahr=i(Be),v7=n(Be,"LI",{});var ONe=s(v7);d3e=n(ONe,"STRONG",{});var v6t=s(d3e);nhr=r(v6t,"mctct"),v6t.forEach(t),shr=r(ONe," \u2014 "),wH=n(ONe,"A",{href:!0});var F6t=s(wH);lhr=r(F6t,"MCTCTForCTC"),F6t.forEach(t),ihr=r(ONe," (M-CTC-T model)"),ONe.forEach(t),dhr=i(Be),F7=n(Be,"LI",{});var VNe=s(F7);c3e=n(VNe,"STRONG",{});var T6t=s(c3e);chr=r(T6t,"sew"),T6t.forEach(t),fhr=r(VNe," \u2014 "),AH=n(VNe,"A",{href:!0});var M6t=s(AH);mhr=r(M6t,"SEWForCTC"),M6t.forEach(t),ghr=r(VNe," (SEW model)"),VNe.forEach(t),hhr=i(Be),T7=n(Be,"LI",{});var XNe=s(T7);f3e=n(XNe,"STRONG",{});var E6t=s(f3e);phr=r(E6t,"sew-d"),E6t.forEach(t),_hr=r(XNe," \u2014 "),LH=n(XNe,"A",{href:!0});var C6t=s(LH);uhr=r(C6t,"SEWDForCTC"),C6t.forEach(t),bhr=r(XNe," (SEW-D model)"),XNe.forEach(t),vhr=i(Be),M7=n(Be,"LI",{});var zNe=s(M7);m3e=n(zNe,"STRONG",{});var w6t=s(m3e);Fhr=r(w6t,"unispeech"),w6t.forEach(t),Thr=r(zNe," \u2014 "),yH=n(zNe,"A",{href:!0});var A6t=s(yH);Mhr=r(A6t,"UniSpeechForCTC"),A6t.forEach(t),Ehr=r(zNe," (UniSpeech model)"),zNe.forEach(t),Chr=i(Be),E7=n(Be,"LI",{});var WNe=s(E7);g3e=n(WNe,"STRONG",{});var L6t=s(g3e);whr=r(L6t,"unispeech-sat"),L6t.forEach(t),Ahr=r(WNe," \u2014 "),xH=n(WNe,"A",{href:!0});var y6t=s(xH);Lhr=r(y6t,"UniSpeechSatForCTC"),y6t.forEach(t),yhr=r(WNe," (UniSpeechSat model)"),WNe.forEach(t),xhr=i(Be),C7=n(Be,"LI",{});var QNe=s(C7);h3e=n(QNe,"STRONG",{});var x6t=s(h3e);$hr=r(x6t,"wav2vec2"),x6t.forEach(t),khr=r(QNe," \u2014 "),$H=n(QNe,"A",{href:!0});var $6t=s($H);Shr=r($6t,"Wav2Vec2ForCTC"),$6t.forEach(t),Rhr=r(QNe," (Wav2Vec2 model)"),QNe.forEach(t),Phr=i(Be),w7=n(Be,"LI",{});var HNe=s(w7);p3e=n(HNe,"STRONG",{});var k6t=s(p3e);Bhr=r(k6t,"wav2vec2-conformer"),k6t.forEach(t),Ihr=r(HNe," \u2014 "),kH=n(HNe,"A",{href:!0});var S6t=s(kH);Nhr=r(S6t,"Wav2Vec2ConformerForCTC"),S6t.forEach(t),qhr=r(HNe," (Wav2Vec2-Conformer model)"),HNe.forEach(t),jhr=i(Be),A7=n(Be,"LI",{});var UNe=s(A7);_3e=n(UNe,"STRONG",{});var R6t=s(_3e);Dhr=r(R6t,"wavlm"),R6t.forEach(t),Ghr=r(UNe," \u2014 "),SH=n(UNe,"A",{href:!0});var P6t=s(SH);Ohr=r(P6t,"WavLMForCTC"),P6t.forEach(t),Vhr=r(UNe," (WavLM model)"),UNe.forEach(t),Be.forEach(t),Xhr=i(Ca),L7=n(Ca,"P",{});var JNe=s(L7);zhr=r(JNe,"The model is set in evaluation mode by default using "),u3e=n(JNe,"CODE",{});var B6t=s(u3e);Whr=r(B6t,"model.eval()"),B6t.forEach(t),Qhr=r(JNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b3e=n(JNe,"CODE",{});var I6t=s(b3e);Hhr=r(I6t,"model.train()"),I6t.forEach(t),JNe.forEach(t),Uhr=i(Ca),T(y7.$$.fragment,Ca),Ca.forEach(t),Fl.forEach(t),fze=i(f),jd=n(f,"H2",{class:!0});var uQe=s(jd);x7=n(uQe,"A",{id:!0,class:!0,href:!0});var N6t=s(x7);v3e=n(N6t,"SPAN",{});var q6t=s(v3e);T(my.$$.fragment,q6t),q6t.forEach(t),N6t.forEach(t),Jhr=i(uQe),F3e=n(uQe,"SPAN",{});var j6t=s(F3e);Yhr=r(j6t,"AutoModelForSpeechSeq2Seq"),j6t.forEach(t),uQe.forEach(t),mze=i(f),Ho=n(f,"DIV",{class:!0});var Tl=s(Ho);T(gy.$$.fragment,Tl),Khr=i(Tl),Dd=n(Tl,"P",{});var Ete=s(Dd);Zhr=r(Ete,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),RH=n(Ete,"A",{href:!0});var D6t=s(RH);epr=r(D6t,"from_pretrained()"),D6t.forEach(t),opr=r(Ete," class method or the "),PH=n(Ete,"A",{href:!0});var G6t=s(PH);rpr=r(G6t,"from_config()"),G6t.forEach(t),tpr=r(Ete,` class
method.`),Ete.forEach(t),apr=i(Tl),hy=n(Tl,"P",{});var bQe=s(hy);npr=r(bQe,"This class cannot be instantiated directly using "),T3e=n(bQe,"CODE",{});var O6t=s(T3e);spr=r(O6t,"__init__()"),O6t.forEach(t),lpr=r(bQe," (throws an error)."),bQe.forEach(t),ipr=i(Tl),At=n(Tl,"DIV",{class:!0});var Qw=s(At);T(py.$$.fragment,Qw),dpr=i(Qw),M3e=n(Qw,"P",{});var V6t=s(M3e);cpr=r(V6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),V6t.forEach(t),fpr=i(Qw),Gd=n(Qw,"P",{});var Cte=s(Gd);mpr=r(Cte,`Note:
Loading a model from its configuration file does `),E3e=n(Cte,"STRONG",{});var X6t=s(E3e);gpr=r(X6t,"not"),X6t.forEach(t),hpr=r(Cte,` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=n(Cte,"A",{href:!0});var z6t=s(BH);ppr=r(z6t,"from_pretrained()"),z6t.forEach(t),_pr=r(Cte," to load the model weights."),Cte.forEach(t),upr=i(Qw),T($7.$$.fragment,Qw),Qw.forEach(t),bpr=i(Tl),po=n(Tl,"DIV",{class:!0});var wa=s(po);T(_y.$$.fragment,wa),vpr=i(wa),C3e=n(wa,"P",{});var W6t=s(C3e);Fpr=r(W6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),W6t.forEach(t),Tpr=i(wa),Za=n(wa,"P",{});var Hw=s(Za);Mpr=r(Hw,"The model class to instantiate is selected based on the "),w3e=n(Hw,"CODE",{});var Q6t=s(w3e);Epr=r(Q6t,"model_type"),Q6t.forEach(t),Cpr=r(Hw,` property of the config object (either
passed as an argument or loaded from `),A3e=n(Hw,"CODE",{});var H6t=s(A3e);wpr=r(H6t,"pretrained_model_name_or_path"),H6t.forEach(t),Apr=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L3e=n(Hw,"CODE",{});var U6t=s(L3e);Lpr=r(U6t,"pretrained_model_name_or_path"),U6t.forEach(t),ypr=r(Hw,":"),Hw.forEach(t),xpr=i(wa),uy=n(wa,"UL",{});var vQe=s(uy);k7=n(vQe,"LI",{});var YNe=s(k7);y3e=n(YNe,"STRONG",{});var J6t=s(y3e);$pr=r(J6t,"speech-encoder-decoder"),J6t.forEach(t),kpr=r(YNe," \u2014 "),IH=n(YNe,"A",{href:!0});var Y6t=s(IH);Spr=r(Y6t,"SpeechEncoderDecoderModel"),Y6t.forEach(t),Rpr=r(YNe," (Speech Encoder decoder model)"),YNe.forEach(t),Ppr=i(vQe),S7=n(vQe,"LI",{});var KNe=s(S7);x3e=n(KNe,"STRONG",{});var K6t=s(x3e);Bpr=r(K6t,"speech_to_text"),K6t.forEach(t),Ipr=r(KNe," \u2014 "),NH=n(KNe,"A",{href:!0});var Z6t=s(NH);Npr=r(Z6t,"Speech2TextForConditionalGeneration"),Z6t.forEach(t),qpr=r(KNe," (Speech2Text model)"),KNe.forEach(t),vQe.forEach(t),jpr=i(wa),R7=n(wa,"P",{});var ZNe=s(R7);Dpr=r(ZNe,"The model is set in evaluation mode by default using "),$3e=n(ZNe,"CODE",{});var eLt=s($3e);Gpr=r(eLt,"model.eval()"),eLt.forEach(t),Opr=r(ZNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k3e=n(ZNe,"CODE",{});var oLt=s(k3e);Vpr=r(oLt,"model.train()"),oLt.forEach(t),ZNe.forEach(t),Xpr=i(wa),T(P7.$$.fragment,wa),wa.forEach(t),Tl.forEach(t),gze=i(f),Od=n(f,"H2",{class:!0});var FQe=s(Od);B7=n(FQe,"A",{id:!0,class:!0,href:!0});var rLt=s(B7);S3e=n(rLt,"SPAN",{});var tLt=s(S3e);T(by.$$.fragment,tLt),tLt.forEach(t),rLt.forEach(t),zpr=i(FQe),R3e=n(FQe,"SPAN",{});var aLt=s(R3e);Wpr=r(aLt,"AutoModelForAudioXVector"),aLt.forEach(t),FQe.forEach(t),hze=i(f),Uo=n(f,"DIV",{class:!0});var Ml=s(Uo);T(vy.$$.fragment,Ml),Qpr=i(Ml),Vd=n(Ml,"P",{});var wte=s(Vd);Hpr=r(wte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),qH=n(wte,"A",{href:!0});var nLt=s(qH);Upr=r(nLt,"from_pretrained()"),nLt.forEach(t),Jpr=r(wte," class method or the "),jH=n(wte,"A",{href:!0});var sLt=s(jH);Ypr=r(sLt,"from_config()"),sLt.forEach(t),Kpr=r(wte,` class
method.`),wte.forEach(t),Zpr=i(Ml),Fy=n(Ml,"P",{});var TQe=s(Fy);e_r=r(TQe,"This class cannot be instantiated directly using "),P3e=n(TQe,"CODE",{});var lLt=s(P3e);o_r=r(lLt,"__init__()"),lLt.forEach(t),r_r=r(TQe," (throws an error)."),TQe.forEach(t),t_r=i(Ml),Lt=n(Ml,"DIV",{class:!0});var Uw=s(Lt);T(Ty.$$.fragment,Uw),a_r=i(Uw),B3e=n(Uw,"P",{});var iLt=s(B3e);n_r=r(iLt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),iLt.forEach(t),s_r=i(Uw),Xd=n(Uw,"P",{});var Ate=s(Xd);l_r=r(Ate,`Note:
Loading a model from its configuration file does `),I3e=n(Ate,"STRONG",{});var dLt=s(I3e);i_r=r(dLt,"not"),dLt.forEach(t),d_r=r(Ate,` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=n(Ate,"A",{href:!0});var cLt=s(DH);c_r=r(cLt,"from_pretrained()"),cLt.forEach(t),f_r=r(Ate," to load the model weights."),Ate.forEach(t),m_r=i(Uw),T(I7.$$.fragment,Uw),Uw.forEach(t),g_r=i(Ml),_o=n(Ml,"DIV",{class:!0});var Aa=s(_o);T(My.$$.fragment,Aa),h_r=i(Aa),N3e=n(Aa,"P",{});var fLt=s(N3e);p_r=r(fLt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),fLt.forEach(t),__r=i(Aa),en=n(Aa,"P",{});var Jw=s(en);u_r=r(Jw,"The model class to instantiate is selected based on the "),q3e=n(Jw,"CODE",{});var mLt=s(q3e);b_r=r(mLt,"model_type"),mLt.forEach(t),v_r=r(Jw,` property of the config object (either
passed as an argument or loaded from `),j3e=n(Jw,"CODE",{});var gLt=s(j3e);F_r=r(gLt,"pretrained_model_name_or_path"),gLt.forEach(t),T_r=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D3e=n(Jw,"CODE",{});var hLt=s(D3e);M_r=r(hLt,"pretrained_model_name_or_path"),hLt.forEach(t),E_r=r(Jw,":"),Jw.forEach(t),C_r=i(Aa),tt=n(Aa,"UL",{});var El=s(tt);N7=n(El,"LI",{});var eqe=s(N7);G3e=n(eqe,"STRONG",{});var pLt=s(G3e);w_r=r(pLt,"data2vec-audio"),pLt.forEach(t),A_r=r(eqe," \u2014 "),GH=n(eqe,"A",{href:!0});var _Lt=s(GH);L_r=r(_Lt,"Data2VecAudioForXVector"),_Lt.forEach(t),y_r=r(eqe," (Data2VecAudio model)"),eqe.forEach(t),x_r=i(El),q7=n(El,"LI",{});var oqe=s(q7);O3e=n(oqe,"STRONG",{});var uLt=s(O3e);$_r=r(uLt,"unispeech-sat"),uLt.forEach(t),k_r=r(oqe," \u2014 "),OH=n(oqe,"A",{href:!0});var bLt=s(OH);S_r=r(bLt,"UniSpeechSatForXVector"),bLt.forEach(t),R_r=r(oqe," (UniSpeechSat model)"),oqe.forEach(t),P_r=i(El),j7=n(El,"LI",{});var rqe=s(j7);V3e=n(rqe,"STRONG",{});var vLt=s(V3e);B_r=r(vLt,"wav2vec2"),vLt.forEach(t),I_r=r(rqe," \u2014 "),VH=n(rqe,"A",{href:!0});var FLt=s(VH);N_r=r(FLt,"Wav2Vec2ForXVector"),FLt.forEach(t),q_r=r(rqe," (Wav2Vec2 model)"),rqe.forEach(t),j_r=i(El),D7=n(El,"LI",{});var tqe=s(D7);X3e=n(tqe,"STRONG",{});var TLt=s(X3e);D_r=r(TLt,"wav2vec2-conformer"),TLt.forEach(t),G_r=r(tqe," \u2014 "),XH=n(tqe,"A",{href:!0});var MLt=s(XH);O_r=r(MLt,"Wav2Vec2ConformerForXVector"),MLt.forEach(t),V_r=r(tqe," (Wav2Vec2-Conformer model)"),tqe.forEach(t),X_r=i(El),G7=n(El,"LI",{});var aqe=s(G7);z3e=n(aqe,"STRONG",{});var ELt=s(z3e);z_r=r(ELt,"wavlm"),ELt.forEach(t),W_r=r(aqe," \u2014 "),zH=n(aqe,"A",{href:!0});var CLt=s(zH);Q_r=r(CLt,"WavLMForXVector"),CLt.forEach(t),H_r=r(aqe," (WavLM model)"),aqe.forEach(t),El.forEach(t),U_r=i(Aa),O7=n(Aa,"P",{});var nqe=s(O7);J_r=r(nqe,"The model is set in evaluation mode by default using "),W3e=n(nqe,"CODE",{});var wLt=s(W3e);Y_r=r(wLt,"model.eval()"),wLt.forEach(t),K_r=r(nqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q3e=n(nqe,"CODE",{});var ALt=s(Q3e);Z_r=r(ALt,"model.train()"),ALt.forEach(t),nqe.forEach(t),eur=i(Aa),T(V7.$$.fragment,Aa),Aa.forEach(t),Ml.forEach(t),pze=i(f),zd=n(f,"H2",{class:!0});var MQe=s(zd);X7=n(MQe,"A",{id:!0,class:!0,href:!0});var LLt=s(X7);H3e=n(LLt,"SPAN",{});var yLt=s(H3e);T(Ey.$$.fragment,yLt),yLt.forEach(t),LLt.forEach(t),our=i(MQe),U3e=n(MQe,"SPAN",{});var xLt=s(U3e);rur=r(xLt,"AutoModelForMaskedImageModeling"),xLt.forEach(t),MQe.forEach(t),_ze=i(f),Jo=n(f,"DIV",{class:!0});var Cl=s(Jo);T(Cy.$$.fragment,Cl),tur=i(Cl),Wd=n(Cl,"P",{});var Lte=s(Wd);aur=r(Lte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),WH=n(Lte,"A",{href:!0});var $Lt=s(WH);nur=r($Lt,"from_pretrained()"),$Lt.forEach(t),sur=r(Lte," class method or the "),QH=n(Lte,"A",{href:!0});var kLt=s(QH);lur=r(kLt,"from_config()"),kLt.forEach(t),iur=r(Lte,` class
method.`),Lte.forEach(t),dur=i(Cl),wy=n(Cl,"P",{});var EQe=s(wy);cur=r(EQe,"This class cannot be instantiated directly using "),J3e=n(EQe,"CODE",{});var SLt=s(J3e);fur=r(SLt,"__init__()"),SLt.forEach(t),mur=r(EQe," (throws an error)."),EQe.forEach(t),gur=i(Cl),yt=n(Cl,"DIV",{class:!0});var Yw=s(yt);T(Ay.$$.fragment,Yw),hur=i(Yw),Y3e=n(Yw,"P",{});var RLt=s(Y3e);pur=r(RLt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),RLt.forEach(t),_ur=i(Yw),Qd=n(Yw,"P",{});var yte=s(Qd);uur=r(yte,`Note:
Loading a model from its configuration file does `),K3e=n(yte,"STRONG",{});var PLt=s(K3e);bur=r(PLt,"not"),PLt.forEach(t),vur=r(yte,` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=n(yte,"A",{href:!0});var BLt=s(HH);Fur=r(BLt,"from_pretrained()"),BLt.forEach(t),Tur=r(yte," to load the model weights."),yte.forEach(t),Mur=i(Yw),T(z7.$$.fragment,Yw),Yw.forEach(t),Eur=i(Cl),uo=n(Cl,"DIV",{class:!0});var La=s(uo);T(Ly.$$.fragment,La),Cur=i(La),Z3e=n(La,"P",{});var ILt=s(Z3e);wur=r(ILt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),ILt.forEach(t),Aur=i(La),on=n(La,"P",{});var Kw=s(on);Lur=r(Kw,"The model class to instantiate is selected based on the "),eFe=n(Kw,"CODE",{});var NLt=s(eFe);yur=r(NLt,"model_type"),NLt.forEach(t),xur=r(Kw,` property of the config object (either
passed as an argument or loaded from `),oFe=n(Kw,"CODE",{});var qLt=s(oFe);$ur=r(qLt,"pretrained_model_name_or_path"),qLt.forEach(t),kur=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rFe=n(Kw,"CODE",{});var jLt=s(rFe);Sur=r(jLt,"pretrained_model_name_or_path"),jLt.forEach(t),Rur=r(Kw,":"),Kw.forEach(t),Pur=i(La),Hd=n(La,"UL",{});var xte=s(Hd);W7=n(xte,"LI",{});var sqe=s(W7);tFe=n(sqe,"STRONG",{});var DLt=s(tFe);Bur=r(DLt,"deit"),DLt.forEach(t),Iur=r(sqe," \u2014 "),UH=n(sqe,"A",{href:!0});var GLt=s(UH);Nur=r(GLt,"DeiTForMaskedImageModeling"),GLt.forEach(t),qur=r(sqe," (DeiT model)"),sqe.forEach(t),jur=i(xte),Q7=n(xte,"LI",{});var lqe=s(Q7);aFe=n(lqe,"STRONG",{});var OLt=s(aFe);Dur=r(OLt,"swin"),OLt.forEach(t),Gur=r(lqe," \u2014 "),JH=n(lqe,"A",{href:!0});var VLt=s(JH);Our=r(VLt,"SwinForMaskedImageModeling"),VLt.forEach(t),Vur=r(lqe," (Swin Transformer model)"),lqe.forEach(t),Xur=i(xte),H7=n(xte,"LI",{});var iqe=s(H7);nFe=n(iqe,"STRONG",{});var XLt=s(nFe);zur=r(XLt,"vit"),XLt.forEach(t),Wur=r(iqe," \u2014 "),YH=n(iqe,"A",{href:!0});var zLt=s(YH);Qur=r(zLt,"ViTForMaskedImageModeling"),zLt.forEach(t),Hur=r(iqe," (ViT model)"),iqe.forEach(t),xte.forEach(t),Uur=i(La),U7=n(La,"P",{});var dqe=s(U7);Jur=r(dqe,"The model is set in evaluation mode by default using "),sFe=n(dqe,"CODE",{});var WLt=s(sFe);Yur=r(WLt,"model.eval()"),WLt.forEach(t),Kur=r(dqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lFe=n(dqe,"CODE",{});var QLt=s(lFe);Zur=r(QLt,"model.train()"),QLt.forEach(t),dqe.forEach(t),e1r=i(La),T(J7.$$.fragment,La),La.forEach(t),Cl.forEach(t),uze=i(f),Ud=n(f,"H2",{class:!0});var CQe=s(Ud);Y7=n(CQe,"A",{id:!0,class:!0,href:!0});var HLt=s(Y7);iFe=n(HLt,"SPAN",{});var ULt=s(iFe);T(yy.$$.fragment,ULt),ULt.forEach(t),HLt.forEach(t),o1r=i(CQe),dFe=n(CQe,"SPAN",{});var JLt=s(dFe);r1r=r(JLt,"AutoModelForObjectDetection"),JLt.forEach(t),CQe.forEach(t),bze=i(f),Yo=n(f,"DIV",{class:!0});var wl=s(Yo);T(xy.$$.fragment,wl),t1r=i(wl),Jd=n(wl,"P",{});var $te=s(Jd);a1r=r($te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),KH=n($te,"A",{href:!0});var YLt=s(KH);n1r=r(YLt,"from_pretrained()"),YLt.forEach(t),s1r=r($te," class method or the "),ZH=n($te,"A",{href:!0});var KLt=s(ZH);l1r=r(KLt,"from_config()"),KLt.forEach(t),i1r=r($te,` class
method.`),$te.forEach(t),d1r=i(wl),$y=n(wl,"P",{});var wQe=s($y);c1r=r(wQe,"This class cannot be instantiated directly using "),cFe=n(wQe,"CODE",{});var ZLt=s(cFe);f1r=r(ZLt,"__init__()"),ZLt.forEach(t),m1r=r(wQe," (throws an error)."),wQe.forEach(t),g1r=i(wl),xt=n(wl,"DIV",{class:!0});var Zw=s(xt);T(ky.$$.fragment,Zw),h1r=i(Zw),fFe=n(Zw,"P",{});var eyt=s(fFe);p1r=r(eyt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),eyt.forEach(t),_1r=i(Zw),Yd=n(Zw,"P",{});var kte=s(Yd);u1r=r(kte,`Note:
Loading a model from its configuration file does `),mFe=n(kte,"STRONG",{});var oyt=s(mFe);b1r=r(oyt,"not"),oyt.forEach(t),v1r=r(kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),eU=n(kte,"A",{href:!0});var ryt=s(eU);F1r=r(ryt,"from_pretrained()"),ryt.forEach(t),T1r=r(kte," to load the model weights."),kte.forEach(t),M1r=i(Zw),T(K7.$$.fragment,Zw),Zw.forEach(t),E1r=i(wl),bo=n(wl,"DIV",{class:!0});var ya=s(bo);T(Sy.$$.fragment,ya),C1r=i(ya),gFe=n(ya,"P",{});var tyt=s(gFe);w1r=r(tyt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),tyt.forEach(t),A1r=i(ya),rn=n(ya,"P",{});var eA=s(rn);L1r=r(eA,"The model class to instantiate is selected based on the "),hFe=n(eA,"CODE",{});var ayt=s(hFe);y1r=r(ayt,"model_type"),ayt.forEach(t),x1r=r(eA,` property of the config object (either
passed as an argument or loaded from `),pFe=n(eA,"CODE",{});var nyt=s(pFe);$1r=r(nyt,"pretrained_model_name_or_path"),nyt.forEach(t),k1r=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Fe=n(eA,"CODE",{});var syt=s(_Fe);S1r=r(syt,"pretrained_model_name_or_path"),syt.forEach(t),R1r=r(eA,":"),eA.forEach(t),P1r=i(ya),Ry=n(ya,"UL",{});var AQe=s(Ry);Z7=n(AQe,"LI",{});var cqe=s(Z7);uFe=n(cqe,"STRONG",{});var lyt=s(uFe);B1r=r(lyt,"detr"),lyt.forEach(t),I1r=r(cqe," \u2014 "),oU=n(cqe,"A",{href:!0});var iyt=s(oU);N1r=r(iyt,"DetrForObjectDetection"),iyt.forEach(t),q1r=r(cqe," (DETR model)"),cqe.forEach(t),j1r=i(AQe),e8=n(AQe,"LI",{});var fqe=s(e8);bFe=n(fqe,"STRONG",{});var dyt=s(bFe);D1r=r(dyt,"yolos"),dyt.forEach(t),G1r=r(fqe," \u2014 "),rU=n(fqe,"A",{href:!0});var cyt=s(rU);O1r=r(cyt,"YolosForObjectDetection"),cyt.forEach(t),V1r=r(fqe," (YOLOS model)"),fqe.forEach(t),AQe.forEach(t),X1r=i(ya),o8=n(ya,"P",{});var mqe=s(o8);z1r=r(mqe,"The model is set in evaluation mode by default using "),vFe=n(mqe,"CODE",{});var fyt=s(vFe);W1r=r(fyt,"model.eval()"),fyt.forEach(t),Q1r=r(mqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),FFe=n(mqe,"CODE",{});var myt=s(FFe);H1r=r(myt,"model.train()"),myt.forEach(t),mqe.forEach(t),U1r=i(ya),T(r8.$$.fragment,ya),ya.forEach(t),wl.forEach(t),vze=i(f),Kd=n(f,"H2",{class:!0});var LQe=s(Kd);t8=n(LQe,"A",{id:!0,class:!0,href:!0});var gyt=s(t8);TFe=n(gyt,"SPAN",{});var hyt=s(TFe);T(Py.$$.fragment,hyt),hyt.forEach(t),gyt.forEach(t),J1r=i(LQe),MFe=n(LQe,"SPAN",{});var pyt=s(MFe);Y1r=r(pyt,"AutoModelForImageSegmentation"),pyt.forEach(t),LQe.forEach(t),Fze=i(f),Ko=n(f,"DIV",{class:!0});var Al=s(Ko);T(By.$$.fragment,Al),K1r=i(Al),Zd=n(Al,"P",{});var Ste=s(Zd);Z1r=r(Ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),tU=n(Ste,"A",{href:!0});var _yt=s(tU);e2r=r(_yt,"from_pretrained()"),_yt.forEach(t),o2r=r(Ste," class method or the "),aU=n(Ste,"A",{href:!0});var uyt=s(aU);r2r=r(uyt,"from_config()"),uyt.forEach(t),t2r=r(Ste,` class
method.`),Ste.forEach(t),a2r=i(Al),Iy=n(Al,"P",{});var yQe=s(Iy);n2r=r(yQe,"This class cannot be instantiated directly using "),EFe=n(yQe,"CODE",{});var byt=s(EFe);s2r=r(byt,"__init__()"),byt.forEach(t),l2r=r(yQe," (throws an error)."),yQe.forEach(t),i2r=i(Al),$t=n(Al,"DIV",{class:!0});var oA=s($t);T(Ny.$$.fragment,oA),d2r=i(oA),CFe=n(oA,"P",{});var vyt=s(CFe);c2r=r(vyt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),vyt.forEach(t),f2r=i(oA),ec=n(oA,"P",{});var Rte=s(ec);m2r=r(Rte,`Note:
Loading a model from its configuration file does `),wFe=n(Rte,"STRONG",{});var Fyt=s(wFe);g2r=r(Fyt,"not"),Fyt.forEach(t),h2r=r(Rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=n(Rte,"A",{href:!0});var Tyt=s(nU);p2r=r(Tyt,"from_pretrained()"),Tyt.forEach(t),_2r=r(Rte," to load the model weights."),Rte.forEach(t),u2r=i(oA),T(a8.$$.fragment,oA),oA.forEach(t),b2r=i(Al),vo=n(Al,"DIV",{class:!0});var xa=s(vo);T(qy.$$.fragment,xa),v2r=i(xa),AFe=n(xa,"P",{});var Myt=s(AFe);F2r=r(Myt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Myt.forEach(t),T2r=i(xa),tn=n(xa,"P",{});var rA=s(tn);M2r=r(rA,"The model class to instantiate is selected based on the "),LFe=n(rA,"CODE",{});var Eyt=s(LFe);E2r=r(Eyt,"model_type"),Eyt.forEach(t),C2r=r(rA,` property of the config object (either
passed as an argument or loaded from `),yFe=n(rA,"CODE",{});var Cyt=s(yFe);w2r=r(Cyt,"pretrained_model_name_or_path"),Cyt.forEach(t),A2r=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xFe=n(rA,"CODE",{});var wyt=s(xFe);L2r=r(wyt,"pretrained_model_name_or_path"),wyt.forEach(t),y2r=r(rA,":"),rA.forEach(t),x2r=i(xa),$Fe=n(xa,"UL",{});var Ayt=s($Fe);n8=n(Ayt,"LI",{});var gqe=s(n8);kFe=n(gqe,"STRONG",{});var Lyt=s(kFe);$2r=r(Lyt,"detr"),Lyt.forEach(t),k2r=r(gqe," \u2014 "),sU=n(gqe,"A",{href:!0});var yyt=s(sU);S2r=r(yyt,"DetrForSegmentation"),yyt.forEach(t),R2r=r(gqe," (DETR model)"),gqe.forEach(t),Ayt.forEach(t),P2r=i(xa),s8=n(xa,"P",{});var hqe=s(s8);B2r=r(hqe,"The model is set in evaluation mode by default using "),SFe=n(hqe,"CODE",{});var xyt=s(SFe);I2r=r(xyt,"model.eval()"),xyt.forEach(t),N2r=r(hqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),RFe=n(hqe,"CODE",{});var $yt=s(RFe);q2r=r($yt,"model.train()"),$yt.forEach(t),hqe.forEach(t),j2r=i(xa),T(l8.$$.fragment,xa),xa.forEach(t),Al.forEach(t),Tze=i(f),oc=n(f,"H2",{class:!0});var xQe=s(oc);i8=n(xQe,"A",{id:!0,class:!0,href:!0});var kyt=s(i8);PFe=n(kyt,"SPAN",{});var Syt=s(PFe);T(jy.$$.fragment,Syt),Syt.forEach(t),kyt.forEach(t),D2r=i(xQe),BFe=n(xQe,"SPAN",{});var Ryt=s(BFe);G2r=r(Ryt,"AutoModelForSemanticSegmentation"),Ryt.forEach(t),xQe.forEach(t),Mze=i(f),Zo=n(f,"DIV",{class:!0});var Ll=s(Zo);T(Dy.$$.fragment,Ll),O2r=i(Ll),rc=n(Ll,"P",{});var Pte=s(rc);V2r=r(Pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),lU=n(Pte,"A",{href:!0});var Pyt=s(lU);X2r=r(Pyt,"from_pretrained()"),Pyt.forEach(t),z2r=r(Pte," class method or the "),iU=n(Pte,"A",{href:!0});var Byt=s(iU);W2r=r(Byt,"from_config()"),Byt.forEach(t),Q2r=r(Pte,` class
method.`),Pte.forEach(t),H2r=i(Ll),Gy=n(Ll,"P",{});var $Qe=s(Gy);U2r=r($Qe,"This class cannot be instantiated directly using "),IFe=n($Qe,"CODE",{});var Iyt=s(IFe);J2r=r(Iyt,"__init__()"),Iyt.forEach(t),Y2r=r($Qe," (throws an error)."),$Qe.forEach(t),K2r=i(Ll),kt=n(Ll,"DIV",{class:!0});var tA=s(kt);T(Oy.$$.fragment,tA),Z2r=i(tA),NFe=n(tA,"P",{});var Nyt=s(NFe);ebr=r(Nyt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Nyt.forEach(t),obr=i(tA),tc=n(tA,"P",{});var Bte=s(tc);rbr=r(Bte,`Note:
Loading a model from its configuration file does `),qFe=n(Bte,"STRONG",{});var qyt=s(qFe);tbr=r(qyt,"not"),qyt.forEach(t),abr=r(Bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=n(Bte,"A",{href:!0});var jyt=s(dU);nbr=r(jyt,"from_pretrained()"),jyt.forEach(t),sbr=r(Bte," to load the model weights."),Bte.forEach(t),lbr=i(tA),T(d8.$$.fragment,tA),tA.forEach(t),ibr=i(Ll),Fo=n(Ll,"DIV",{class:!0});var $a=s(Fo);T(Vy.$$.fragment,$a),dbr=i($a),jFe=n($a,"P",{});var Dyt=s(jFe);cbr=r(Dyt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Dyt.forEach(t),fbr=i($a),an=n($a,"P",{});var aA=s(an);mbr=r(aA,"The model class to instantiate is selected based on the "),DFe=n(aA,"CODE",{});var Gyt=s(DFe);gbr=r(Gyt,"model_type"),Gyt.forEach(t),hbr=r(aA,` property of the config object (either
passed as an argument or loaded from `),GFe=n(aA,"CODE",{});var Oyt=s(GFe);pbr=r(Oyt,"pretrained_model_name_or_path"),Oyt.forEach(t),_br=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OFe=n(aA,"CODE",{});var Vyt=s(OFe);ubr=r(Vyt,"pretrained_model_name_or_path"),Vyt.forEach(t),bbr=r(aA,":"),aA.forEach(t),vbr=i($a),at=n($a,"UL",{});var yl=s(at);c8=n(yl,"LI",{});var pqe=s(c8);VFe=n(pqe,"STRONG",{});var Xyt=s(VFe);Fbr=r(Xyt,"beit"),Xyt.forEach(t),Tbr=r(pqe," \u2014 "),cU=n(pqe,"A",{href:!0});var zyt=s(cU);Mbr=r(zyt,"BeitForSemanticSegmentation"),zyt.forEach(t),Ebr=r(pqe," (BEiT model)"),pqe.forEach(t),Cbr=i(yl),f8=n(yl,"LI",{});var _qe=s(f8);XFe=n(_qe,"STRONG",{});var Wyt=s(XFe);wbr=r(Wyt,"data2vec-vision"),Wyt.forEach(t),Abr=r(_qe," \u2014 "),fU=n(_qe,"A",{href:!0});var Qyt=s(fU);Lbr=r(Qyt,"Data2VecVisionForSemanticSegmentation"),Qyt.forEach(t),ybr=r(_qe," (Data2VecVision model)"),_qe.forEach(t),xbr=i(yl),m8=n(yl,"LI",{});var uqe=s(m8);zFe=n(uqe,"STRONG",{});var Hyt=s(zFe);$br=r(Hyt,"dpt"),Hyt.forEach(t),kbr=r(uqe," \u2014 "),mU=n(uqe,"A",{href:!0});var Uyt=s(mU);Sbr=r(Uyt,"DPTForSemanticSegmentation"),Uyt.forEach(t),Rbr=r(uqe," (DPT model)"),uqe.forEach(t),Pbr=i(yl),g8=n(yl,"LI",{});var bqe=s(g8);WFe=n(bqe,"STRONG",{});var Jyt=s(WFe);Bbr=r(Jyt,"mobilevit"),Jyt.forEach(t),Ibr=r(bqe," \u2014 "),gU=n(bqe,"A",{href:!0});var Yyt=s(gU);Nbr=r(Yyt,"MobileViTForSemanticSegmentation"),Yyt.forEach(t),qbr=r(bqe," (MobileViT model)"),bqe.forEach(t),jbr=i(yl),h8=n(yl,"LI",{});var vqe=s(h8);QFe=n(vqe,"STRONG",{});var Kyt=s(QFe);Dbr=r(Kyt,"segformer"),Kyt.forEach(t),Gbr=r(vqe," \u2014 "),hU=n(vqe,"A",{href:!0});var Zyt=s(hU);Obr=r(Zyt,"SegformerForSemanticSegmentation"),Zyt.forEach(t),Vbr=r(vqe," (SegFormer model)"),vqe.forEach(t),yl.forEach(t),Xbr=i($a),p8=n($a,"P",{});var Fqe=s(p8);zbr=r(Fqe,"The model is set in evaluation mode by default using "),HFe=n(Fqe,"CODE",{});var ext=s(HFe);Wbr=r(ext,"model.eval()"),ext.forEach(t),Qbr=r(Fqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),UFe=n(Fqe,"CODE",{});var oxt=s(UFe);Hbr=r(oxt,"model.train()"),oxt.forEach(t),Fqe.forEach(t),Ubr=i($a),T(_8.$$.fragment,$a),$a.forEach(t),Ll.forEach(t),Eze=i(f),ac=n(f,"H2",{class:!0});var kQe=s(ac);u8=n(kQe,"A",{id:!0,class:!0,href:!0});var rxt=s(u8);JFe=n(rxt,"SPAN",{});var txt=s(JFe);T(Xy.$$.fragment,txt),txt.forEach(t),rxt.forEach(t),Jbr=i(kQe),YFe=n(kQe,"SPAN",{});var axt=s(YFe);Ybr=r(axt,"AutoModelForInstanceSegmentation"),axt.forEach(t),kQe.forEach(t),Cze=i(f),er=n(f,"DIV",{class:!0});var xl=s(er);T(zy.$$.fragment,xl),Kbr=i(xl),nc=n(xl,"P",{});var Ite=s(nc);Zbr=r(Ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),pU=n(Ite,"A",{href:!0});var nxt=s(pU);evr=r(nxt,"from_pretrained()"),nxt.forEach(t),ovr=r(Ite," class method or the "),_U=n(Ite,"A",{href:!0});var sxt=s(_U);rvr=r(sxt,"from_config()"),sxt.forEach(t),tvr=r(Ite,` class
method.`),Ite.forEach(t),avr=i(xl),Wy=n(xl,"P",{});var SQe=s(Wy);nvr=r(SQe,"This class cannot be instantiated directly using "),KFe=n(SQe,"CODE",{});var lxt=s(KFe);svr=r(lxt,"__init__()"),lxt.forEach(t),lvr=r(SQe," (throws an error)."),SQe.forEach(t),ivr=i(xl),St=n(xl,"DIV",{class:!0});var nA=s(St);T(Qy.$$.fragment,nA),dvr=i(nA),ZFe=n(nA,"P",{});var ixt=s(ZFe);cvr=r(ixt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),ixt.forEach(t),fvr=i(nA),sc=n(nA,"P",{});var Nte=s(sc);mvr=r(Nte,`Note:
Loading a model from its configuration file does `),eTe=n(Nte,"STRONG",{});var dxt=s(eTe);gvr=r(dxt,"not"),dxt.forEach(t),hvr=r(Nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),uU=n(Nte,"A",{href:!0});var cxt=s(uU);pvr=r(cxt,"from_pretrained()"),cxt.forEach(t),_vr=r(Nte," to load the model weights."),Nte.forEach(t),uvr=i(nA),T(b8.$$.fragment,nA),nA.forEach(t),bvr=i(xl),To=n(xl,"DIV",{class:!0});var ka=s(To);T(Hy.$$.fragment,ka),vvr=i(ka),oTe=n(ka,"P",{});var fxt=s(oTe);Fvr=r(fxt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),fxt.forEach(t),Tvr=i(ka),nn=n(ka,"P",{});var sA=s(nn);Mvr=r(sA,"The model class to instantiate is selected based on the "),rTe=n(sA,"CODE",{});var mxt=s(rTe);Evr=r(mxt,"model_type"),mxt.forEach(t),Cvr=r(sA,` property of the config object (either
passed as an argument or loaded from `),tTe=n(sA,"CODE",{});var gxt=s(tTe);wvr=r(gxt,"pretrained_model_name_or_path"),gxt.forEach(t),Avr=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aTe=n(sA,"CODE",{});var hxt=s(aTe);Lvr=r(hxt,"pretrained_model_name_or_path"),hxt.forEach(t),yvr=r(sA,":"),sA.forEach(t),xvr=i(ka),nTe=n(ka,"UL",{});var pxt=s(nTe);v8=n(pxt,"LI",{});var Tqe=s(v8);sTe=n(Tqe,"STRONG",{});var _xt=s(sTe);$vr=r(_xt,"maskformer"),_xt.forEach(t),kvr=r(Tqe," \u2014 "),bU=n(Tqe,"A",{href:!0});var uxt=s(bU);Svr=r(uxt,"MaskFormerForInstanceSegmentation"),uxt.forEach(t),Rvr=r(Tqe," (MaskFormer model)"),Tqe.forEach(t),pxt.forEach(t),Pvr=i(ka),F8=n(ka,"P",{});var Mqe=s(F8);Bvr=r(Mqe,"The model is set in evaluation mode by default using "),lTe=n(Mqe,"CODE",{});var bxt=s(lTe);Ivr=r(bxt,"model.eval()"),bxt.forEach(t),Nvr=r(Mqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iTe=n(Mqe,"CODE",{});var vxt=s(iTe);qvr=r(vxt,"model.train()"),vxt.forEach(t),Mqe.forEach(t),jvr=i(ka),T(T8.$$.fragment,ka),ka.forEach(t),xl.forEach(t),wze=i(f),lc=n(f,"H2",{class:!0});var RQe=s(lc);M8=n(RQe,"A",{id:!0,class:!0,href:!0});var Fxt=s(M8);dTe=n(Fxt,"SPAN",{});var Txt=s(dTe);T(Uy.$$.fragment,Txt),Txt.forEach(t),Fxt.forEach(t),Dvr=i(RQe),cTe=n(RQe,"SPAN",{});var Mxt=s(cTe);Gvr=r(Mxt,"TFAutoModel"),Mxt.forEach(t),RQe.forEach(t),Aze=i(f),or=n(f,"DIV",{class:!0});var $l=s(or);T(Jy.$$.fragment,$l),Ovr=i($l),ic=n($l,"P",{});var qte=s(ic);Vvr=r(qte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vU=n(qte,"A",{href:!0});var Ext=s(vU);Xvr=r(Ext,"from_pretrained()"),Ext.forEach(t),zvr=r(qte," class method or the "),FU=n(qte,"A",{href:!0});var Cxt=s(FU);Wvr=r(Cxt,"from_config()"),Cxt.forEach(t),Qvr=r(qte,` class
method.`),qte.forEach(t),Hvr=i($l),Yy=n($l,"P",{});var PQe=s(Yy);Uvr=r(PQe,"This class cannot be instantiated directly using "),fTe=n(PQe,"CODE",{});var wxt=s(fTe);Jvr=r(wxt,"__init__()"),wxt.forEach(t),Yvr=r(PQe," (throws an error)."),PQe.forEach(t),Kvr=i($l),Rt=n($l,"DIV",{class:!0});var lA=s(Rt);T(Ky.$$.fragment,lA),Zvr=i(lA),mTe=n(lA,"P",{});var Axt=s(mTe);e3r=r(Axt,"Instantiates one of the base model classes of the library from a configuration."),Axt.forEach(t),o3r=i(lA),dc=n(lA,"P",{});var jte=s(dc);r3r=r(jte,`Note:
Loading a model from its configuration file does `),gTe=n(jte,"STRONG",{});var Lxt=s(gTe);t3r=r(Lxt,"not"),Lxt.forEach(t),a3r=r(jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),TU=n(jte,"A",{href:!0});var yxt=s(TU);n3r=r(yxt,"from_pretrained()"),yxt.forEach(t),s3r=r(jte," to load the model weights."),jte.forEach(t),l3r=i(lA),T(E8.$$.fragment,lA),lA.forEach(t),i3r=i($l),xr=n($l,"DIV",{class:!0});var kl=s(xr);T(Zy.$$.fragment,kl),d3r=i(kl),hTe=n(kl,"P",{});var xxt=s(hTe);c3r=r(xxt,"Instantiate one of the base model classes of the library from a pretrained model."),xxt.forEach(t),f3r=i(kl),sn=n(kl,"P",{});var iA=s(sn);m3r=r(iA,"The model class to instantiate is selected based on the "),pTe=n(iA,"CODE",{});var $xt=s(pTe);g3r=r($xt,"model_type"),$xt.forEach(t),h3r=r(iA,` property of the config object (either
passed as an argument or loaded from `),_Te=n(iA,"CODE",{});var kxt=s(_Te);p3r=r(kxt,"pretrained_model_name_or_path"),kxt.forEach(t),_3r=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uTe=n(iA,"CODE",{});var Sxt=s(uTe);u3r=r(Sxt,"pretrained_model_name_or_path"),Sxt.forEach(t),b3r=r(iA,":"),iA.forEach(t),v3r=i(kl),q=n(kl,"UL",{});var D=s(q);C8=n(D,"LI",{});var Eqe=s(C8);bTe=n(Eqe,"STRONG",{});var Rxt=s(bTe);F3r=r(Rxt,"albert"),Rxt.forEach(t),T3r=r(Eqe," \u2014 "),MU=n(Eqe,"A",{href:!0});var Pxt=s(MU);M3r=r(Pxt,"TFAlbertModel"),Pxt.forEach(t),E3r=r(Eqe," (ALBERT model)"),Eqe.forEach(t),C3r=i(D),w8=n(D,"LI",{});var Cqe=s(w8);vTe=n(Cqe,"STRONG",{});var Bxt=s(vTe);w3r=r(Bxt,"bart"),Bxt.forEach(t),A3r=r(Cqe," \u2014 "),EU=n(Cqe,"A",{href:!0});var Ixt=s(EU);L3r=r(Ixt,"TFBartModel"),Ixt.forEach(t),y3r=r(Cqe," (BART model)"),Cqe.forEach(t),x3r=i(D),A8=n(D,"LI",{});var wqe=s(A8);FTe=n(wqe,"STRONG",{});var Nxt=s(FTe);$3r=r(Nxt,"bert"),Nxt.forEach(t),k3r=r(wqe," \u2014 "),CU=n(wqe,"A",{href:!0});var qxt=s(CU);S3r=r(qxt,"TFBertModel"),qxt.forEach(t),R3r=r(wqe," (BERT model)"),wqe.forEach(t),P3r=i(D),L8=n(D,"LI",{});var Aqe=s(L8);TTe=n(Aqe,"STRONG",{});var jxt=s(TTe);B3r=r(jxt,"blenderbot"),jxt.forEach(t),I3r=r(Aqe," \u2014 "),wU=n(Aqe,"A",{href:!0});var Dxt=s(wU);N3r=r(Dxt,"TFBlenderbotModel"),Dxt.forEach(t),q3r=r(Aqe," (Blenderbot model)"),Aqe.forEach(t),j3r=i(D),y8=n(D,"LI",{});var Lqe=s(y8);MTe=n(Lqe,"STRONG",{});var Gxt=s(MTe);D3r=r(Gxt,"blenderbot-small"),Gxt.forEach(t),G3r=r(Lqe," \u2014 "),AU=n(Lqe,"A",{href:!0});var Oxt=s(AU);O3r=r(Oxt,"TFBlenderbotSmallModel"),Oxt.forEach(t),V3r=r(Lqe," (BlenderbotSmall model)"),Lqe.forEach(t),X3r=i(D),x8=n(D,"LI",{});var yqe=s(x8);ETe=n(yqe,"STRONG",{});var Vxt=s(ETe);z3r=r(Vxt,"camembert"),Vxt.forEach(t),W3r=r(yqe," \u2014 "),LU=n(yqe,"A",{href:!0});var Xxt=s(LU);Q3r=r(Xxt,"TFCamembertModel"),Xxt.forEach(t),H3r=r(yqe," (CamemBERT model)"),yqe.forEach(t),U3r=i(D),$8=n(D,"LI",{});var xqe=s($8);CTe=n(xqe,"STRONG",{});var zxt=s(CTe);J3r=r(zxt,"clip"),zxt.forEach(t),Y3r=r(xqe," \u2014 "),yU=n(xqe,"A",{href:!0});var Wxt=s(yU);K3r=r(Wxt,"TFCLIPModel"),Wxt.forEach(t),Z3r=r(xqe," (CLIP model)"),xqe.forEach(t),eFr=i(D),k8=n(D,"LI",{});var $qe=s(k8);wTe=n($qe,"STRONG",{});var Qxt=s(wTe);oFr=r(Qxt,"convbert"),Qxt.forEach(t),rFr=r($qe," \u2014 "),xU=n($qe,"A",{href:!0});var Hxt=s(xU);tFr=r(Hxt,"TFConvBertModel"),Hxt.forEach(t),aFr=r($qe," (ConvBERT model)"),$qe.forEach(t),nFr=i(D),S8=n(D,"LI",{});var kqe=s(S8);ATe=n(kqe,"STRONG",{});var Uxt=s(ATe);sFr=r(Uxt,"convnext"),Uxt.forEach(t),lFr=r(kqe," \u2014 "),$U=n(kqe,"A",{href:!0});var Jxt=s($U);iFr=r(Jxt,"TFConvNextModel"),Jxt.forEach(t),dFr=r(kqe," (ConvNeXT model)"),kqe.forEach(t),cFr=i(D),R8=n(D,"LI",{});var Sqe=s(R8);LTe=n(Sqe,"STRONG",{});var Yxt=s(LTe);fFr=r(Yxt,"ctrl"),Yxt.forEach(t),mFr=r(Sqe," \u2014 "),kU=n(Sqe,"A",{href:!0});var Kxt=s(kU);gFr=r(Kxt,"TFCTRLModel"),Kxt.forEach(t),hFr=r(Sqe," (CTRL model)"),Sqe.forEach(t),pFr=i(D),P8=n(D,"LI",{});var Rqe=s(P8);yTe=n(Rqe,"STRONG",{});var Zxt=s(yTe);_Fr=r(Zxt,"data2vec-vision"),Zxt.forEach(t),uFr=r(Rqe," \u2014 "),SU=n(Rqe,"A",{href:!0});var e$t=s(SU);bFr=r(e$t,"TFData2VecVisionModel"),e$t.forEach(t),vFr=r(Rqe," (Data2VecVision model)"),Rqe.forEach(t),FFr=i(D),B8=n(D,"LI",{});var Pqe=s(B8);xTe=n(Pqe,"STRONG",{});var o$t=s(xTe);TFr=r(o$t,"deberta"),o$t.forEach(t),MFr=r(Pqe," \u2014 "),RU=n(Pqe,"A",{href:!0});var r$t=s(RU);EFr=r(r$t,"TFDebertaModel"),r$t.forEach(t),CFr=r(Pqe," (DeBERTa model)"),Pqe.forEach(t),wFr=i(D),I8=n(D,"LI",{});var Bqe=s(I8);$Te=n(Bqe,"STRONG",{});var t$t=s($Te);AFr=r(t$t,"deberta-v2"),t$t.forEach(t),LFr=r(Bqe," \u2014 "),PU=n(Bqe,"A",{href:!0});var a$t=s(PU);yFr=r(a$t,"TFDebertaV2Model"),a$t.forEach(t),xFr=r(Bqe," (DeBERTa-v2 model)"),Bqe.forEach(t),$Fr=i(D),N8=n(D,"LI",{});var Iqe=s(N8);kTe=n(Iqe,"STRONG",{});var n$t=s(kTe);kFr=r(n$t,"deit"),n$t.forEach(t),SFr=r(Iqe," \u2014 "),BU=n(Iqe,"A",{href:!0});var s$t=s(BU);RFr=r(s$t,"TFDeiTModel"),s$t.forEach(t),PFr=r(Iqe," (DeiT model)"),Iqe.forEach(t),BFr=i(D),q8=n(D,"LI",{});var Nqe=s(q8);STe=n(Nqe,"STRONG",{});var l$t=s(STe);IFr=r(l$t,"distilbert"),l$t.forEach(t),NFr=r(Nqe," \u2014 "),IU=n(Nqe,"A",{href:!0});var i$t=s(IU);qFr=r(i$t,"TFDistilBertModel"),i$t.forEach(t),jFr=r(Nqe," (DistilBERT model)"),Nqe.forEach(t),DFr=i(D),j8=n(D,"LI",{});var qqe=s(j8);RTe=n(qqe,"STRONG",{});var d$t=s(RTe);GFr=r(d$t,"dpr"),d$t.forEach(t),OFr=r(qqe," \u2014 "),NU=n(qqe,"A",{href:!0});var c$t=s(NU);VFr=r(c$t,"TFDPRQuestionEncoder"),c$t.forEach(t),XFr=r(qqe," (DPR model)"),qqe.forEach(t),zFr=i(D),D8=n(D,"LI",{});var jqe=s(D8);PTe=n(jqe,"STRONG",{});var f$t=s(PTe);WFr=r(f$t,"electra"),f$t.forEach(t),QFr=r(jqe," \u2014 "),qU=n(jqe,"A",{href:!0});var m$t=s(qU);HFr=r(m$t,"TFElectraModel"),m$t.forEach(t),UFr=r(jqe," (ELECTRA model)"),jqe.forEach(t),JFr=i(D),G8=n(D,"LI",{});var Dqe=s(G8);BTe=n(Dqe,"STRONG",{});var g$t=s(BTe);YFr=r(g$t,"flaubert"),g$t.forEach(t),KFr=r(Dqe," \u2014 "),jU=n(Dqe,"A",{href:!0});var h$t=s(jU);ZFr=r(h$t,"TFFlaubertModel"),h$t.forEach(t),eTr=r(Dqe," (FlauBERT model)"),Dqe.forEach(t),oTr=i(D),Ys=n(D,"LI",{});var jS=s(Ys);ITe=n(jS,"STRONG",{});var p$t=s(ITe);rTr=r(p$t,"funnel"),p$t.forEach(t),tTr=r(jS," \u2014 "),DU=n(jS,"A",{href:!0});var _$t=s(DU);aTr=r(_$t,"TFFunnelModel"),_$t.forEach(t),nTr=r(jS," or "),GU=n(jS,"A",{href:!0});var u$t=s(GU);sTr=r(u$t,"TFFunnelBaseModel"),u$t.forEach(t),lTr=r(jS," (Funnel Transformer model)"),jS.forEach(t),iTr=i(D),O8=n(D,"LI",{});var Gqe=s(O8);NTe=n(Gqe,"STRONG",{});var b$t=s(NTe);dTr=r(b$t,"gpt2"),b$t.forEach(t),cTr=r(Gqe," \u2014 "),OU=n(Gqe,"A",{href:!0});var v$t=s(OU);fTr=r(v$t,"TFGPT2Model"),v$t.forEach(t),mTr=r(Gqe," (OpenAI GPT-2 model)"),Gqe.forEach(t),gTr=i(D),V8=n(D,"LI",{});var Oqe=s(V8);qTe=n(Oqe,"STRONG",{});var F$t=s(qTe);hTr=r(F$t,"gptj"),F$t.forEach(t),pTr=r(Oqe," \u2014 "),VU=n(Oqe,"A",{href:!0});var T$t=s(VU);_Tr=r(T$t,"TFGPTJModel"),T$t.forEach(t),uTr=r(Oqe," (GPT-J model)"),Oqe.forEach(t),bTr=i(D),X8=n(D,"LI",{});var Vqe=s(X8);jTe=n(Vqe,"STRONG",{});var M$t=s(jTe);vTr=r(M$t,"hubert"),M$t.forEach(t),FTr=r(Vqe," \u2014 "),XU=n(Vqe,"A",{href:!0});var E$t=s(XU);TTr=r(E$t,"TFHubertModel"),E$t.forEach(t),MTr=r(Vqe," (Hubert model)"),Vqe.forEach(t),ETr=i(D),z8=n(D,"LI",{});var Xqe=s(z8);DTe=n(Xqe,"STRONG",{});var C$t=s(DTe);CTr=r(C$t,"layoutlm"),C$t.forEach(t),wTr=r(Xqe," \u2014 "),zU=n(Xqe,"A",{href:!0});var w$t=s(zU);ATr=r(w$t,"TFLayoutLMModel"),w$t.forEach(t),LTr=r(Xqe," (LayoutLM model)"),Xqe.forEach(t),yTr=i(D),W8=n(D,"LI",{});var zqe=s(W8);GTe=n(zqe,"STRONG",{});var A$t=s(GTe);xTr=r(A$t,"led"),A$t.forEach(t),$Tr=r(zqe," \u2014 "),WU=n(zqe,"A",{href:!0});var L$t=s(WU);kTr=r(L$t,"TFLEDModel"),L$t.forEach(t),STr=r(zqe," (LED model)"),zqe.forEach(t),RTr=i(D),Q8=n(D,"LI",{});var Wqe=s(Q8);OTe=n(Wqe,"STRONG",{});var y$t=s(OTe);PTr=r(y$t,"longformer"),y$t.forEach(t),BTr=r(Wqe," \u2014 "),QU=n(Wqe,"A",{href:!0});var x$t=s(QU);ITr=r(x$t,"TFLongformerModel"),x$t.forEach(t),NTr=r(Wqe," (Longformer model)"),Wqe.forEach(t),qTr=i(D),H8=n(D,"LI",{});var Qqe=s(H8);VTe=n(Qqe,"STRONG",{});var $$t=s(VTe);jTr=r($$t,"lxmert"),$$t.forEach(t),DTr=r(Qqe," \u2014 "),HU=n(Qqe,"A",{href:!0});var k$t=s(HU);GTr=r(k$t,"TFLxmertModel"),k$t.forEach(t),OTr=r(Qqe," (LXMERT model)"),Qqe.forEach(t),VTr=i(D),U8=n(D,"LI",{});var Hqe=s(U8);XTe=n(Hqe,"STRONG",{});var S$t=s(XTe);XTr=r(S$t,"marian"),S$t.forEach(t),zTr=r(Hqe," \u2014 "),UU=n(Hqe,"A",{href:!0});var R$t=s(UU);WTr=r(R$t,"TFMarianModel"),R$t.forEach(t),QTr=r(Hqe," (Marian model)"),Hqe.forEach(t),HTr=i(D),J8=n(D,"LI",{});var Uqe=s(J8);zTe=n(Uqe,"STRONG",{});var P$t=s(zTe);UTr=r(P$t,"mbart"),P$t.forEach(t),JTr=r(Uqe," \u2014 "),JU=n(Uqe,"A",{href:!0});var B$t=s(JU);YTr=r(B$t,"TFMBartModel"),B$t.forEach(t),KTr=r(Uqe," (mBART model)"),Uqe.forEach(t),ZTr=i(D),Y8=n(D,"LI",{});var Jqe=s(Y8);WTe=n(Jqe,"STRONG",{});var I$t=s(WTe);e7r=r(I$t,"mobilebert"),I$t.forEach(t),o7r=r(Jqe," \u2014 "),YU=n(Jqe,"A",{href:!0});var N$t=s(YU);r7r=r(N$t,"TFMobileBertModel"),N$t.forEach(t),t7r=r(Jqe," (MobileBERT model)"),Jqe.forEach(t),a7r=i(D),K8=n(D,"LI",{});var Yqe=s(K8);QTe=n(Yqe,"STRONG",{});var q$t=s(QTe);n7r=r(q$t,"mpnet"),q$t.forEach(t),s7r=r(Yqe," \u2014 "),KU=n(Yqe,"A",{href:!0});var j$t=s(KU);l7r=r(j$t,"TFMPNetModel"),j$t.forEach(t),i7r=r(Yqe," (MPNet model)"),Yqe.forEach(t),d7r=i(D),Z8=n(D,"LI",{});var Kqe=s(Z8);HTe=n(Kqe,"STRONG",{});var D$t=s(HTe);c7r=r(D$t,"mt5"),D$t.forEach(t),f7r=r(Kqe," \u2014 "),ZU=n(Kqe,"A",{href:!0});var G$t=s(ZU);m7r=r(G$t,"TFMT5Model"),G$t.forEach(t),g7r=r(Kqe," (MT5 model)"),Kqe.forEach(t),h7r=i(D),e9=n(D,"LI",{});var Zqe=s(e9);UTe=n(Zqe,"STRONG",{});var O$t=s(UTe);p7r=r(O$t,"openai-gpt"),O$t.forEach(t),_7r=r(Zqe," \u2014 "),eJ=n(Zqe,"A",{href:!0});var V$t=s(eJ);u7r=r(V$t,"TFOpenAIGPTModel"),V$t.forEach(t),b7r=r(Zqe," (OpenAI GPT model)"),Zqe.forEach(t),v7r=i(D),o9=n(D,"LI",{});var eje=s(o9);JTe=n(eje,"STRONG",{});var X$t=s(JTe);F7r=r(X$t,"opt"),X$t.forEach(t),T7r=r(eje," \u2014 "),oJ=n(eje,"A",{href:!0});var z$t=s(oJ);M7r=r(z$t,"TFOPTModel"),z$t.forEach(t),E7r=r(eje," (OPT model)"),eje.forEach(t),C7r=i(D),r9=n(D,"LI",{});var oje=s(r9);YTe=n(oje,"STRONG",{});var W$t=s(YTe);w7r=r(W$t,"pegasus"),W$t.forEach(t),A7r=r(oje," \u2014 "),rJ=n(oje,"A",{href:!0});var Q$t=s(rJ);L7r=r(Q$t,"TFPegasusModel"),Q$t.forEach(t),y7r=r(oje," (Pegasus model)"),oje.forEach(t),x7r=i(D),t9=n(D,"LI",{});var rje=s(t9);KTe=n(rje,"STRONG",{});var H$t=s(KTe);$7r=r(H$t,"regnet"),H$t.forEach(t),k7r=r(rje," \u2014 "),tJ=n(rje,"A",{href:!0});var U$t=s(tJ);S7r=r(U$t,"TFRegNetModel"),U$t.forEach(t),R7r=r(rje," (RegNet model)"),rje.forEach(t),P7r=i(D),a9=n(D,"LI",{});var tje=s(a9);ZTe=n(tje,"STRONG",{});var J$t=s(ZTe);B7r=r(J$t,"rembert"),J$t.forEach(t),I7r=r(tje," \u2014 "),aJ=n(tje,"A",{href:!0});var Y$t=s(aJ);N7r=r(Y$t,"TFRemBertModel"),Y$t.forEach(t),q7r=r(tje," (RemBERT model)"),tje.forEach(t),j7r=i(D),n9=n(D,"LI",{});var aje=s(n9);e7e=n(aje,"STRONG",{});var K$t=s(e7e);D7r=r(K$t,"resnet"),K$t.forEach(t),G7r=r(aje," \u2014 "),nJ=n(aje,"A",{href:!0});var Z$t=s(nJ);O7r=r(Z$t,"TFResNetModel"),Z$t.forEach(t),V7r=r(aje," (ResNet model)"),aje.forEach(t),X7r=i(D),s9=n(D,"LI",{});var nje=s(s9);o7e=n(nje,"STRONG",{});var ekt=s(o7e);z7r=r(ekt,"roberta"),ekt.forEach(t),W7r=r(nje," \u2014 "),sJ=n(nje,"A",{href:!0});var okt=s(sJ);Q7r=r(okt,"TFRobertaModel"),okt.forEach(t),H7r=r(nje," (RoBERTa model)"),nje.forEach(t),U7r=i(D),l9=n(D,"LI",{});var sje=s(l9);r7e=n(sje,"STRONG",{});var rkt=s(r7e);J7r=r(rkt,"roformer"),rkt.forEach(t),Y7r=r(sje," \u2014 "),lJ=n(sje,"A",{href:!0});var tkt=s(lJ);K7r=r(tkt,"TFRoFormerModel"),tkt.forEach(t),Z7r=r(sje," (RoFormer model)"),sje.forEach(t),e8r=i(D),i9=n(D,"LI",{});var lje=s(i9);t7e=n(lje,"STRONG",{});var akt=s(t7e);o8r=r(akt,"speech_to_text"),akt.forEach(t),r8r=r(lje," \u2014 "),iJ=n(lje,"A",{href:!0});var nkt=s(iJ);t8r=r(nkt,"TFSpeech2TextModel"),nkt.forEach(t),a8r=r(lje," (Speech2Text model)"),lje.forEach(t),n8r=i(D),d9=n(D,"LI",{});var ije=s(d9);a7e=n(ije,"STRONG",{});var skt=s(a7e);s8r=r(skt,"swin"),skt.forEach(t),l8r=r(ije," \u2014 "),dJ=n(ije,"A",{href:!0});var lkt=s(dJ);i8r=r(lkt,"TFSwinModel"),lkt.forEach(t),d8r=r(ije," (Swin Transformer model)"),ije.forEach(t),c8r=i(D),c9=n(D,"LI",{});var dje=s(c9);n7e=n(dje,"STRONG",{});var ikt=s(n7e);f8r=r(ikt,"t5"),ikt.forEach(t),m8r=r(dje," \u2014 "),cJ=n(dje,"A",{href:!0});var dkt=s(cJ);g8r=r(dkt,"TFT5Model"),dkt.forEach(t),h8r=r(dje," (T5 model)"),dje.forEach(t),p8r=i(D),f9=n(D,"LI",{});var cje=s(f9);s7e=n(cje,"STRONG",{});var ckt=s(s7e);_8r=r(ckt,"tapas"),ckt.forEach(t),u8r=r(cje," \u2014 "),fJ=n(cje,"A",{href:!0});var fkt=s(fJ);b8r=r(fkt,"TFTapasModel"),fkt.forEach(t),v8r=r(cje," (TAPAS model)"),cje.forEach(t),F8r=i(D),m9=n(D,"LI",{});var fje=s(m9);l7e=n(fje,"STRONG",{});var mkt=s(l7e);T8r=r(mkt,"transfo-xl"),mkt.forEach(t),M8r=r(fje," \u2014 "),mJ=n(fje,"A",{href:!0});var gkt=s(mJ);E8r=r(gkt,"TFTransfoXLModel"),gkt.forEach(t),C8r=r(fje," (Transformer-XL model)"),fje.forEach(t),w8r=i(D),g9=n(D,"LI",{});var mje=s(g9);i7e=n(mje,"STRONG",{});var hkt=s(i7e);A8r=r(hkt,"vit"),hkt.forEach(t),L8r=r(mje," \u2014 "),gJ=n(mje,"A",{href:!0});var pkt=s(gJ);y8r=r(pkt,"TFViTModel"),pkt.forEach(t),x8r=r(mje," (ViT model)"),mje.forEach(t),$8r=i(D),h9=n(D,"LI",{});var gje=s(h9);d7e=n(gje,"STRONG",{});var _kt=s(d7e);k8r=r(_kt,"vit_mae"),_kt.forEach(t),S8r=r(gje," \u2014 "),hJ=n(gje,"A",{href:!0});var ukt=s(hJ);R8r=r(ukt,"TFViTMAEModel"),ukt.forEach(t),P8r=r(gje," (ViTMAE model)"),gje.forEach(t),B8r=i(D),p9=n(D,"LI",{});var hje=s(p9);c7e=n(hje,"STRONG",{});var bkt=s(c7e);I8r=r(bkt,"wav2vec2"),bkt.forEach(t),N8r=r(hje," \u2014 "),pJ=n(hje,"A",{href:!0});var vkt=s(pJ);q8r=r(vkt,"TFWav2Vec2Model"),vkt.forEach(t),j8r=r(hje," (Wav2Vec2 model)"),hje.forEach(t),D8r=i(D),_9=n(D,"LI",{});var pje=s(_9);f7e=n(pje,"STRONG",{});var Fkt=s(f7e);G8r=r(Fkt,"xlm"),Fkt.forEach(t),O8r=r(pje," \u2014 "),_J=n(pje,"A",{href:!0});var Tkt=s(_J);V8r=r(Tkt,"TFXLMModel"),Tkt.forEach(t),X8r=r(pje," (XLM model)"),pje.forEach(t),z8r=i(D),u9=n(D,"LI",{});var _je=s(u9);m7e=n(_je,"STRONG",{});var Mkt=s(m7e);W8r=r(Mkt,"xlm-roberta"),Mkt.forEach(t),Q8r=r(_je," \u2014 "),uJ=n(_je,"A",{href:!0});var Ekt=s(uJ);H8r=r(Ekt,"TFXLMRobertaModel"),Ekt.forEach(t),U8r=r(_je," (XLM-RoBERTa model)"),_je.forEach(t),J8r=i(D),b9=n(D,"LI",{});var uje=s(b9);g7e=n(uje,"STRONG",{});var Ckt=s(g7e);Y8r=r(Ckt,"xlnet"),Ckt.forEach(t),K8r=r(uje," \u2014 "),bJ=n(uje,"A",{href:!0});var wkt=s(bJ);Z8r=r(wkt,"TFXLNetModel"),wkt.forEach(t),e9r=r(uje," (XLNet model)"),uje.forEach(t),D.forEach(t),o9r=i(kl),T(v9.$$.fragment,kl),kl.forEach(t),$l.forEach(t),Lze=i(f),cc=n(f,"H2",{class:!0});var BQe=s(cc);F9=n(BQe,"A",{id:!0,class:!0,href:!0});var Akt=s(F9);h7e=n(Akt,"SPAN",{});var Lkt=s(h7e);T(ex.$$.fragment,Lkt),Lkt.forEach(t),Akt.forEach(t),r9r=i(BQe),p7e=n(BQe,"SPAN",{});var ykt=s(p7e);t9r=r(ykt,"TFAutoModelForPreTraining"),ykt.forEach(t),BQe.forEach(t),yze=i(f),rr=n(f,"DIV",{class:!0});var Sl=s(rr);T(ox.$$.fragment,Sl),a9r=i(Sl),fc=n(Sl,"P",{});var Dte=s(fc);n9r=r(Dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),vJ=n(Dte,"A",{href:!0});var xkt=s(vJ);s9r=r(xkt,"from_pretrained()"),xkt.forEach(t),l9r=r(Dte," class method or the "),FJ=n(Dte,"A",{href:!0});var $kt=s(FJ);i9r=r($kt,"from_config()"),$kt.forEach(t),d9r=r(Dte,` class
method.`),Dte.forEach(t),c9r=i(Sl),rx=n(Sl,"P",{});var IQe=s(rx);f9r=r(IQe,"This class cannot be instantiated directly using "),_7e=n(IQe,"CODE",{});var kkt=s(_7e);m9r=r(kkt,"__init__()"),kkt.forEach(t),g9r=r(IQe," (throws an error)."),IQe.forEach(t),h9r=i(Sl),Pt=n(Sl,"DIV",{class:!0});var dA=s(Pt);T(tx.$$.fragment,dA),p9r=i(dA),u7e=n(dA,"P",{});var Skt=s(u7e);_9r=r(Skt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Skt.forEach(t),u9r=i(dA),mc=n(dA,"P",{});var Gte=s(mc);b9r=r(Gte,`Note:
Loading a model from its configuration file does `),b7e=n(Gte,"STRONG",{});var Rkt=s(b7e);v9r=r(Rkt,"not"),Rkt.forEach(t),F9r=r(Gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),TJ=n(Gte,"A",{href:!0});var Pkt=s(TJ);T9r=r(Pkt,"from_pretrained()"),Pkt.forEach(t),M9r=r(Gte," to load the model weights."),Gte.forEach(t),E9r=i(dA),T(T9.$$.fragment,dA),dA.forEach(t),C9r=i(Sl),$r=n(Sl,"DIV",{class:!0});var Rl=s($r);T(ax.$$.fragment,Rl),w9r=i(Rl),v7e=n(Rl,"P",{});var Bkt=s(v7e);A9r=r(Bkt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Bkt.forEach(t),L9r=i(Rl),ln=n(Rl,"P",{});var cA=s(ln);y9r=r(cA,"The model class to instantiate is selected based on the "),F7e=n(cA,"CODE",{});var Ikt=s(F7e);x9r=r(Ikt,"model_type"),Ikt.forEach(t),$9r=r(cA,` property of the config object (either
passed as an argument or loaded from `),T7e=n(cA,"CODE",{});var Nkt=s(T7e);k9r=r(Nkt,"pretrained_model_name_or_path"),Nkt.forEach(t),S9r=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M7e=n(cA,"CODE",{});var qkt=s(M7e);R9r=r(qkt,"pretrained_model_name_or_path"),qkt.forEach(t),P9r=r(cA,":"),cA.forEach(t),B9r=i(Rl),se=n(Rl,"UL",{});var le=s(se);M9=n(le,"LI",{});var bje=s(M9);E7e=n(bje,"STRONG",{});var jkt=s(E7e);I9r=r(jkt,"albert"),jkt.forEach(t),N9r=r(bje," \u2014 "),MJ=n(bje,"A",{href:!0});var Dkt=s(MJ);q9r=r(Dkt,"TFAlbertForPreTraining"),Dkt.forEach(t),j9r=r(bje," (ALBERT model)"),bje.forEach(t),D9r=i(le),E9=n(le,"LI",{});var vje=s(E9);C7e=n(vje,"STRONG",{});var Gkt=s(C7e);G9r=r(Gkt,"bart"),Gkt.forEach(t),O9r=r(vje," \u2014 "),EJ=n(vje,"A",{href:!0});var Okt=s(EJ);V9r=r(Okt,"TFBartForConditionalGeneration"),Okt.forEach(t),X9r=r(vje," (BART model)"),vje.forEach(t),z9r=i(le),C9=n(le,"LI",{});var Fje=s(C9);w7e=n(Fje,"STRONG",{});var Vkt=s(w7e);W9r=r(Vkt,"bert"),Vkt.forEach(t),Q9r=r(Fje," \u2014 "),CJ=n(Fje,"A",{href:!0});var Xkt=s(CJ);H9r=r(Xkt,"TFBertForPreTraining"),Xkt.forEach(t),U9r=r(Fje," (BERT model)"),Fje.forEach(t),J9r=i(le),w9=n(le,"LI",{});var Tje=s(w9);A7e=n(Tje,"STRONG",{});var zkt=s(A7e);Y9r=r(zkt,"camembert"),zkt.forEach(t),K9r=r(Tje," \u2014 "),wJ=n(Tje,"A",{href:!0});var Wkt=s(wJ);Z9r=r(Wkt,"TFCamembertForMaskedLM"),Wkt.forEach(t),eMr=r(Tje," (CamemBERT model)"),Tje.forEach(t),oMr=i(le),A9=n(le,"LI",{});var Mje=s(A9);L7e=n(Mje,"STRONG",{});var Qkt=s(L7e);rMr=r(Qkt,"ctrl"),Qkt.forEach(t),tMr=r(Mje," \u2014 "),AJ=n(Mje,"A",{href:!0});var Hkt=s(AJ);aMr=r(Hkt,"TFCTRLLMHeadModel"),Hkt.forEach(t),nMr=r(Mje," (CTRL model)"),Mje.forEach(t),sMr=i(le),L9=n(le,"LI",{});var Eje=s(L9);y7e=n(Eje,"STRONG",{});var Ukt=s(y7e);lMr=r(Ukt,"distilbert"),Ukt.forEach(t),iMr=r(Eje," \u2014 "),LJ=n(Eje,"A",{href:!0});var Jkt=s(LJ);dMr=r(Jkt,"TFDistilBertForMaskedLM"),Jkt.forEach(t),cMr=r(Eje," (DistilBERT model)"),Eje.forEach(t),fMr=i(le),y9=n(le,"LI",{});var Cje=s(y9);x7e=n(Cje,"STRONG",{});var Ykt=s(x7e);mMr=r(Ykt,"electra"),Ykt.forEach(t),gMr=r(Cje," \u2014 "),yJ=n(Cje,"A",{href:!0});var Kkt=s(yJ);hMr=r(Kkt,"TFElectraForPreTraining"),Kkt.forEach(t),pMr=r(Cje," (ELECTRA model)"),Cje.forEach(t),_Mr=i(le),x9=n(le,"LI",{});var wje=s(x9);$7e=n(wje,"STRONG",{});var Zkt=s($7e);uMr=r(Zkt,"flaubert"),Zkt.forEach(t),bMr=r(wje," \u2014 "),xJ=n(wje,"A",{href:!0});var eSt=s(xJ);vMr=r(eSt,"TFFlaubertWithLMHeadModel"),eSt.forEach(t),FMr=r(wje," (FlauBERT model)"),wje.forEach(t),TMr=i(le),$9=n(le,"LI",{});var Aje=s($9);k7e=n(Aje,"STRONG",{});var oSt=s(k7e);MMr=r(oSt,"funnel"),oSt.forEach(t),EMr=r(Aje," \u2014 "),$J=n(Aje,"A",{href:!0});var rSt=s($J);CMr=r(rSt,"TFFunnelForPreTraining"),rSt.forEach(t),wMr=r(Aje," (Funnel Transformer model)"),Aje.forEach(t),AMr=i(le),k9=n(le,"LI",{});var Lje=s(k9);S7e=n(Lje,"STRONG",{});var tSt=s(S7e);LMr=r(tSt,"gpt2"),tSt.forEach(t),yMr=r(Lje," \u2014 "),kJ=n(Lje,"A",{href:!0});var aSt=s(kJ);xMr=r(aSt,"TFGPT2LMHeadModel"),aSt.forEach(t),$Mr=r(Lje," (OpenAI GPT-2 model)"),Lje.forEach(t),kMr=i(le),S9=n(le,"LI",{});var yje=s(S9);R7e=n(yje,"STRONG",{});var nSt=s(R7e);SMr=r(nSt,"layoutlm"),nSt.forEach(t),RMr=r(yje," \u2014 "),SJ=n(yje,"A",{href:!0});var sSt=s(SJ);PMr=r(sSt,"TFLayoutLMForMaskedLM"),sSt.forEach(t),BMr=r(yje," (LayoutLM model)"),yje.forEach(t),IMr=i(le),R9=n(le,"LI",{});var xje=s(R9);P7e=n(xje,"STRONG",{});var lSt=s(P7e);NMr=r(lSt,"lxmert"),lSt.forEach(t),qMr=r(xje," \u2014 "),RJ=n(xje,"A",{href:!0});var iSt=s(RJ);jMr=r(iSt,"TFLxmertForPreTraining"),iSt.forEach(t),DMr=r(xje," (LXMERT model)"),xje.forEach(t),GMr=i(le),P9=n(le,"LI",{});var $je=s(P9);B7e=n($je,"STRONG",{});var dSt=s(B7e);OMr=r(dSt,"mobilebert"),dSt.forEach(t),VMr=r($je," \u2014 "),PJ=n($je,"A",{href:!0});var cSt=s(PJ);XMr=r(cSt,"TFMobileBertForPreTraining"),cSt.forEach(t),zMr=r($je," (MobileBERT model)"),$je.forEach(t),WMr=i(le),B9=n(le,"LI",{});var kje=s(B9);I7e=n(kje,"STRONG",{});var fSt=s(I7e);QMr=r(fSt,"mpnet"),fSt.forEach(t),HMr=r(kje," \u2014 "),BJ=n(kje,"A",{href:!0});var mSt=s(BJ);UMr=r(mSt,"TFMPNetForMaskedLM"),mSt.forEach(t),JMr=r(kje," (MPNet model)"),kje.forEach(t),YMr=i(le),I9=n(le,"LI",{});var Sje=s(I9);N7e=n(Sje,"STRONG",{});var gSt=s(N7e);KMr=r(gSt,"openai-gpt"),gSt.forEach(t),ZMr=r(Sje," \u2014 "),IJ=n(Sje,"A",{href:!0});var hSt=s(IJ);e4r=r(hSt,"TFOpenAIGPTLMHeadModel"),hSt.forEach(t),o4r=r(Sje," (OpenAI GPT model)"),Sje.forEach(t),r4r=i(le),N9=n(le,"LI",{});var Rje=s(N9);q7e=n(Rje,"STRONG",{});var pSt=s(q7e);t4r=r(pSt,"roberta"),pSt.forEach(t),a4r=r(Rje," \u2014 "),NJ=n(Rje,"A",{href:!0});var _St=s(NJ);n4r=r(_St,"TFRobertaForMaskedLM"),_St.forEach(t),s4r=r(Rje," (RoBERTa model)"),Rje.forEach(t),l4r=i(le),q9=n(le,"LI",{});var Pje=s(q9);j7e=n(Pje,"STRONG",{});var uSt=s(j7e);i4r=r(uSt,"t5"),uSt.forEach(t),d4r=r(Pje," \u2014 "),qJ=n(Pje,"A",{href:!0});var bSt=s(qJ);c4r=r(bSt,"TFT5ForConditionalGeneration"),bSt.forEach(t),f4r=r(Pje," (T5 model)"),Pje.forEach(t),m4r=i(le),j9=n(le,"LI",{});var Bje=s(j9);D7e=n(Bje,"STRONG",{});var vSt=s(D7e);g4r=r(vSt,"tapas"),vSt.forEach(t),h4r=r(Bje," \u2014 "),jJ=n(Bje,"A",{href:!0});var FSt=s(jJ);p4r=r(FSt,"TFTapasForMaskedLM"),FSt.forEach(t),_4r=r(Bje," (TAPAS model)"),Bje.forEach(t),u4r=i(le),D9=n(le,"LI",{});var Ije=s(D9);G7e=n(Ije,"STRONG",{});var TSt=s(G7e);b4r=r(TSt,"transfo-xl"),TSt.forEach(t),v4r=r(Ije," \u2014 "),DJ=n(Ije,"A",{href:!0});var MSt=s(DJ);F4r=r(MSt,"TFTransfoXLLMHeadModel"),MSt.forEach(t),T4r=r(Ije," (Transformer-XL model)"),Ije.forEach(t),M4r=i(le),G9=n(le,"LI",{});var Nje=s(G9);O7e=n(Nje,"STRONG",{});var ESt=s(O7e);E4r=r(ESt,"vit_mae"),ESt.forEach(t),C4r=r(Nje," \u2014 "),GJ=n(Nje,"A",{href:!0});var CSt=s(GJ);w4r=r(CSt,"TFViTMAEForPreTraining"),CSt.forEach(t),A4r=r(Nje," (ViTMAE model)"),Nje.forEach(t),L4r=i(le),O9=n(le,"LI",{});var qje=s(O9);V7e=n(qje,"STRONG",{});var wSt=s(V7e);y4r=r(wSt,"xlm"),wSt.forEach(t),x4r=r(qje," \u2014 "),OJ=n(qje,"A",{href:!0});var ASt=s(OJ);$4r=r(ASt,"TFXLMWithLMHeadModel"),ASt.forEach(t),k4r=r(qje," (XLM model)"),qje.forEach(t),S4r=i(le),V9=n(le,"LI",{});var jje=s(V9);X7e=n(jje,"STRONG",{});var LSt=s(X7e);R4r=r(LSt,"xlm-roberta"),LSt.forEach(t),P4r=r(jje," \u2014 "),VJ=n(jje,"A",{href:!0});var ySt=s(VJ);B4r=r(ySt,"TFXLMRobertaForMaskedLM"),ySt.forEach(t),I4r=r(jje," (XLM-RoBERTa model)"),jje.forEach(t),N4r=i(le),X9=n(le,"LI",{});var Dje=s(X9);z7e=n(Dje,"STRONG",{});var xSt=s(z7e);q4r=r(xSt,"xlnet"),xSt.forEach(t),j4r=r(Dje," \u2014 "),XJ=n(Dje,"A",{href:!0});var $St=s(XJ);D4r=r($St,"TFXLNetLMHeadModel"),$St.forEach(t),G4r=r(Dje," (XLNet model)"),Dje.forEach(t),le.forEach(t),O4r=i(Rl),T(z9.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),xze=i(f),gc=n(f,"H2",{class:!0});var NQe=s(gc);W9=n(NQe,"A",{id:!0,class:!0,href:!0});var kSt=s(W9);W7e=n(kSt,"SPAN",{});var SSt=s(W7e);T(nx.$$.fragment,SSt),SSt.forEach(t),kSt.forEach(t),V4r=i(NQe),Q7e=n(NQe,"SPAN",{});var RSt=s(Q7e);X4r=r(RSt,"TFAutoModelForCausalLM"),RSt.forEach(t),NQe.forEach(t),$ze=i(f),tr=n(f,"DIV",{class:!0});var Pl=s(tr);T(sx.$$.fragment,Pl),z4r=i(Pl),hc=n(Pl,"P",{});var Ote=s(hc);W4r=r(Ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),zJ=n(Ote,"A",{href:!0});var PSt=s(zJ);Q4r=r(PSt,"from_pretrained()"),PSt.forEach(t),H4r=r(Ote," class method or the "),WJ=n(Ote,"A",{href:!0});var BSt=s(WJ);U4r=r(BSt,"from_config()"),BSt.forEach(t),J4r=r(Ote,` class
method.`),Ote.forEach(t),Y4r=i(Pl),lx=n(Pl,"P",{});var qQe=s(lx);K4r=r(qQe,"This class cannot be instantiated directly using "),H7e=n(qQe,"CODE",{});var ISt=s(H7e);Z4r=r(ISt,"__init__()"),ISt.forEach(t),eEr=r(qQe," (throws an error)."),qQe.forEach(t),oEr=i(Pl),Bt=n(Pl,"DIV",{class:!0});var fA=s(Bt);T(ix.$$.fragment,fA),rEr=i(fA),U7e=n(fA,"P",{});var NSt=s(U7e);tEr=r(NSt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),NSt.forEach(t),aEr=i(fA),pc=n(fA,"P",{});var Vte=s(pc);nEr=r(Vte,`Note:
Loading a model from its configuration file does `),J7e=n(Vte,"STRONG",{});var qSt=s(J7e);sEr=r(qSt,"not"),qSt.forEach(t),lEr=r(Vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=n(Vte,"A",{href:!0});var jSt=s(QJ);iEr=r(jSt,"from_pretrained()"),jSt.forEach(t),dEr=r(Vte," to load the model weights."),Vte.forEach(t),cEr=i(fA),T(Q9.$$.fragment,fA),fA.forEach(t),fEr=i(Pl),kr=n(Pl,"DIV",{class:!0});var Bl=s(kr);T(dx.$$.fragment,Bl),mEr=i(Bl),Y7e=n(Bl,"P",{});var DSt=s(Y7e);gEr=r(DSt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),DSt.forEach(t),hEr=i(Bl),dn=n(Bl,"P",{});var mA=s(dn);pEr=r(mA,"The model class to instantiate is selected based on the "),K7e=n(mA,"CODE",{});var GSt=s(K7e);_Er=r(GSt,"model_type"),GSt.forEach(t),uEr=r(mA,` property of the config object (either
passed as an argument or loaded from `),Z7e=n(mA,"CODE",{});var OSt=s(Z7e);bEr=r(OSt,"pretrained_model_name_or_path"),OSt.forEach(t),vEr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e8e=n(mA,"CODE",{});var VSt=s(e8e);FEr=r(VSt,"pretrained_model_name_or_path"),VSt.forEach(t),TEr=r(mA,":"),mA.forEach(t),MEr=i(Bl),Me=n(Bl,"UL",{});var Ce=s(Me);H9=n(Ce,"LI",{});var Gje=s(H9);o8e=n(Gje,"STRONG",{});var XSt=s(o8e);EEr=r(XSt,"bert"),XSt.forEach(t),CEr=r(Gje," \u2014 "),HJ=n(Gje,"A",{href:!0});var zSt=s(HJ);wEr=r(zSt,"TFBertLMHeadModel"),zSt.forEach(t),AEr=r(Gje," (BERT model)"),Gje.forEach(t),LEr=i(Ce),U9=n(Ce,"LI",{});var Oje=s(U9);r8e=n(Oje,"STRONG",{});var WSt=s(r8e);yEr=r(WSt,"camembert"),WSt.forEach(t),xEr=r(Oje," \u2014 "),UJ=n(Oje,"A",{href:!0});var QSt=s(UJ);$Er=r(QSt,"TFCamembertForCausalLM"),QSt.forEach(t),kEr=r(Oje," (CamemBERT model)"),Oje.forEach(t),SEr=i(Ce),J9=n(Ce,"LI",{});var Vje=s(J9);t8e=n(Vje,"STRONG",{});var HSt=s(t8e);REr=r(HSt,"ctrl"),HSt.forEach(t),PEr=r(Vje," \u2014 "),JJ=n(Vje,"A",{href:!0});var USt=s(JJ);BEr=r(USt,"TFCTRLLMHeadModel"),USt.forEach(t),IEr=r(Vje," (CTRL model)"),Vje.forEach(t),NEr=i(Ce),Y9=n(Ce,"LI",{});var Xje=s(Y9);a8e=n(Xje,"STRONG",{});var JSt=s(a8e);qEr=r(JSt,"gpt2"),JSt.forEach(t),jEr=r(Xje," \u2014 "),YJ=n(Xje,"A",{href:!0});var YSt=s(YJ);DEr=r(YSt,"TFGPT2LMHeadModel"),YSt.forEach(t),GEr=r(Xje," (OpenAI GPT-2 model)"),Xje.forEach(t),OEr=i(Ce),K9=n(Ce,"LI",{});var zje=s(K9);n8e=n(zje,"STRONG",{});var KSt=s(n8e);VEr=r(KSt,"gptj"),KSt.forEach(t),XEr=r(zje," \u2014 "),KJ=n(zje,"A",{href:!0});var ZSt=s(KJ);zEr=r(ZSt,"TFGPTJForCausalLM"),ZSt.forEach(t),WEr=r(zje," (GPT-J model)"),zje.forEach(t),QEr=i(Ce),Z9=n(Ce,"LI",{});var Wje=s(Z9);s8e=n(Wje,"STRONG",{});var eRt=s(s8e);HEr=r(eRt,"openai-gpt"),eRt.forEach(t),UEr=r(Wje," \u2014 "),ZJ=n(Wje,"A",{href:!0});var oRt=s(ZJ);JEr=r(oRt,"TFOpenAIGPTLMHeadModel"),oRt.forEach(t),YEr=r(Wje," (OpenAI GPT model)"),Wje.forEach(t),KEr=i(Ce),eM=n(Ce,"LI",{});var Qje=s(eM);l8e=n(Qje,"STRONG",{});var rRt=s(l8e);ZEr=r(rRt,"opt"),rRt.forEach(t),eCr=r(Qje," \u2014 "),eY=n(Qje,"A",{href:!0});var tRt=s(eY);oCr=r(tRt,"TFOPTForCausalLM"),tRt.forEach(t),rCr=r(Qje," (OPT model)"),Qje.forEach(t),tCr=i(Ce),oM=n(Ce,"LI",{});var Hje=s(oM);i8e=n(Hje,"STRONG",{});var aRt=s(i8e);aCr=r(aRt,"rembert"),aRt.forEach(t),nCr=r(Hje," \u2014 "),oY=n(Hje,"A",{href:!0});var nRt=s(oY);sCr=r(nRt,"TFRemBertForCausalLM"),nRt.forEach(t),lCr=r(Hje," (RemBERT model)"),Hje.forEach(t),iCr=i(Ce),rM=n(Ce,"LI",{});var Uje=s(rM);d8e=n(Uje,"STRONG",{});var sRt=s(d8e);dCr=r(sRt,"roberta"),sRt.forEach(t),cCr=r(Uje," \u2014 "),rY=n(Uje,"A",{href:!0});var lRt=s(rY);fCr=r(lRt,"TFRobertaForCausalLM"),lRt.forEach(t),mCr=r(Uje," (RoBERTa model)"),Uje.forEach(t),gCr=i(Ce),tM=n(Ce,"LI",{});var Jje=s(tM);c8e=n(Jje,"STRONG",{});var iRt=s(c8e);hCr=r(iRt,"roformer"),iRt.forEach(t),pCr=r(Jje," \u2014 "),tY=n(Jje,"A",{href:!0});var dRt=s(tY);_Cr=r(dRt,"TFRoFormerForCausalLM"),dRt.forEach(t),uCr=r(Jje," (RoFormer model)"),Jje.forEach(t),bCr=i(Ce),aM=n(Ce,"LI",{});var Yje=s(aM);f8e=n(Yje,"STRONG",{});var cRt=s(f8e);vCr=r(cRt,"transfo-xl"),cRt.forEach(t),FCr=r(Yje," \u2014 "),aY=n(Yje,"A",{href:!0});var fRt=s(aY);TCr=r(fRt,"TFTransfoXLLMHeadModel"),fRt.forEach(t),MCr=r(Yje," (Transformer-XL model)"),Yje.forEach(t),ECr=i(Ce),nM=n(Ce,"LI",{});var Kje=s(nM);m8e=n(Kje,"STRONG",{});var mRt=s(m8e);CCr=r(mRt,"xlm"),mRt.forEach(t),wCr=r(Kje," \u2014 "),nY=n(Kje,"A",{href:!0});var gRt=s(nY);ACr=r(gRt,"TFXLMWithLMHeadModel"),gRt.forEach(t),LCr=r(Kje," (XLM model)"),Kje.forEach(t),yCr=i(Ce),sM=n(Ce,"LI",{});var Zje=s(sM);g8e=n(Zje,"STRONG",{});var hRt=s(g8e);xCr=r(hRt,"xlnet"),hRt.forEach(t),$Cr=r(Zje," \u2014 "),sY=n(Zje,"A",{href:!0});var pRt=s(sY);kCr=r(pRt,"TFXLNetLMHeadModel"),pRt.forEach(t),SCr=r(Zje," (XLNet model)"),Zje.forEach(t),Ce.forEach(t),RCr=i(Bl),T(lM.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),kze=i(f),_c=n(f,"H2",{class:!0});var jQe=s(_c);iM=n(jQe,"A",{id:!0,class:!0,href:!0});var _Rt=s(iM);h8e=n(_Rt,"SPAN",{});var uRt=s(h8e);T(cx.$$.fragment,uRt),uRt.forEach(t),_Rt.forEach(t),PCr=i(jQe),p8e=n(jQe,"SPAN",{});var bRt=s(p8e);BCr=r(bRt,"TFAutoModelForImageClassification"),bRt.forEach(t),jQe.forEach(t),Sze=i(f),ar=n(f,"DIV",{class:!0});var Il=s(ar);T(fx.$$.fragment,Il),ICr=i(Il),uc=n(Il,"P",{});var Xte=s(uc);NCr=r(Xte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),lY=n(Xte,"A",{href:!0});var vRt=s(lY);qCr=r(vRt,"from_pretrained()"),vRt.forEach(t),jCr=r(Xte," class method or the "),iY=n(Xte,"A",{href:!0});var FRt=s(iY);DCr=r(FRt,"from_config()"),FRt.forEach(t),GCr=r(Xte,` class
method.`),Xte.forEach(t),OCr=i(Il),mx=n(Il,"P",{});var DQe=s(mx);VCr=r(DQe,"This class cannot be instantiated directly using "),_8e=n(DQe,"CODE",{});var TRt=s(_8e);XCr=r(TRt,"__init__()"),TRt.forEach(t),zCr=r(DQe," (throws an error)."),DQe.forEach(t),WCr=i(Il),It=n(Il,"DIV",{class:!0});var gA=s(It);T(gx.$$.fragment,gA),QCr=i(gA),u8e=n(gA,"P",{});var MRt=s(u8e);HCr=r(MRt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),MRt.forEach(t),UCr=i(gA),bc=n(gA,"P",{});var zte=s(bc);JCr=r(zte,`Note:
Loading a model from its configuration file does `),b8e=n(zte,"STRONG",{});var ERt=s(b8e);YCr=r(ERt,"not"),ERt.forEach(t),KCr=r(zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),dY=n(zte,"A",{href:!0});var CRt=s(dY);ZCr=r(CRt,"from_pretrained()"),CRt.forEach(t),e5r=r(zte," to load the model weights."),zte.forEach(t),o5r=i(gA),T(dM.$$.fragment,gA),gA.forEach(t),r5r=i(Il),Sr=n(Il,"DIV",{class:!0});var Nl=s(Sr);T(hx.$$.fragment,Nl),t5r=i(Nl),v8e=n(Nl,"P",{});var wRt=s(v8e);a5r=r(wRt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),wRt.forEach(t),n5r=i(Nl),cn=n(Nl,"P",{});var hA=s(cn);s5r=r(hA,"The model class to instantiate is selected based on the "),F8e=n(hA,"CODE",{});var ARt=s(F8e);l5r=r(ARt,"model_type"),ARt.forEach(t),i5r=r(hA,` property of the config object (either
passed as an argument or loaded from `),T8e=n(hA,"CODE",{});var LRt=s(T8e);d5r=r(LRt,"pretrained_model_name_or_path"),LRt.forEach(t),c5r=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M8e=n(hA,"CODE",{});var yRt=s(M8e);f5r=r(yRt,"pretrained_model_name_or_path"),yRt.forEach(t),m5r=r(hA,":"),hA.forEach(t),g5r=i(Nl),We=n(Nl,"UL",{});var ot=s(We);cM=n(ot,"LI",{});var eDe=s(cM);E8e=n(eDe,"STRONG",{});var xRt=s(E8e);h5r=r(xRt,"convnext"),xRt.forEach(t),p5r=r(eDe," \u2014 "),cY=n(eDe,"A",{href:!0});var $Rt=s(cY);_5r=r($Rt,"TFConvNextForImageClassification"),$Rt.forEach(t),u5r=r(eDe," (ConvNeXT model)"),eDe.forEach(t),b5r=i(ot),fM=n(ot,"LI",{});var oDe=s(fM);C8e=n(oDe,"STRONG",{});var kRt=s(C8e);v5r=r(kRt,"data2vec-vision"),kRt.forEach(t),F5r=r(oDe," \u2014 "),fY=n(oDe,"A",{href:!0});var SRt=s(fY);T5r=r(SRt,"TFData2VecVisionForImageClassification"),SRt.forEach(t),M5r=r(oDe," (Data2VecVision model)"),oDe.forEach(t),E5r=i(ot),Ks=n(ot,"LI",{});var DS=s(Ks);w8e=n(DS,"STRONG",{});var RRt=s(w8e);C5r=r(RRt,"deit"),RRt.forEach(t),w5r=r(DS," \u2014 "),mY=n(DS,"A",{href:!0});var PRt=s(mY);A5r=r(PRt,"TFDeiTForImageClassification"),PRt.forEach(t),L5r=r(DS," or "),gY=n(DS,"A",{href:!0});var BRt=s(gY);y5r=r(BRt,"TFDeiTForImageClassificationWithTeacher"),BRt.forEach(t),x5r=r(DS," (DeiT model)"),DS.forEach(t),$5r=i(ot),mM=n(ot,"LI",{});var rDe=s(mM);A8e=n(rDe,"STRONG",{});var IRt=s(A8e);k5r=r(IRt,"regnet"),IRt.forEach(t),S5r=r(rDe," \u2014 "),hY=n(rDe,"A",{href:!0});var NRt=s(hY);R5r=r(NRt,"TFRegNetForImageClassification"),NRt.forEach(t),P5r=r(rDe," (RegNet model)"),rDe.forEach(t),B5r=i(ot),gM=n(ot,"LI",{});var tDe=s(gM);L8e=n(tDe,"STRONG",{});var qRt=s(L8e);I5r=r(qRt,"resnet"),qRt.forEach(t),N5r=r(tDe," \u2014 "),pY=n(tDe,"A",{href:!0});var jRt=s(pY);q5r=r(jRt,"TFResNetForImageClassification"),jRt.forEach(t),j5r=r(tDe," (ResNet model)"),tDe.forEach(t),D5r=i(ot),hM=n(ot,"LI",{});var aDe=s(hM);y8e=n(aDe,"STRONG",{});var DRt=s(y8e);G5r=r(DRt,"swin"),DRt.forEach(t),O5r=r(aDe," \u2014 "),_Y=n(aDe,"A",{href:!0});var GRt=s(_Y);V5r=r(GRt,"TFSwinForImageClassification"),GRt.forEach(t),X5r=r(aDe," (Swin Transformer model)"),aDe.forEach(t),z5r=i(ot),pM=n(ot,"LI",{});var nDe=s(pM);x8e=n(nDe,"STRONG",{});var ORt=s(x8e);W5r=r(ORt,"vit"),ORt.forEach(t),Q5r=r(nDe," \u2014 "),uY=n(nDe,"A",{href:!0});var VRt=s(uY);H5r=r(VRt,"TFViTForImageClassification"),VRt.forEach(t),U5r=r(nDe," (ViT model)"),nDe.forEach(t),ot.forEach(t),J5r=i(Nl),T(_M.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),Rze=i(f),vc=n(f,"H2",{class:!0});var GQe=s(vc);uM=n(GQe,"A",{id:!0,class:!0,href:!0});var XRt=s(uM);$8e=n(XRt,"SPAN",{});var zRt=s($8e);T(px.$$.fragment,zRt),zRt.forEach(t),XRt.forEach(t),Y5r=i(GQe),k8e=n(GQe,"SPAN",{});var WRt=s(k8e);K5r=r(WRt,"TFAutoModelForMaskedLM"),WRt.forEach(t),GQe.forEach(t),Pze=i(f),nr=n(f,"DIV",{class:!0});var ql=s(nr);T(_x.$$.fragment,ql),Z5r=i(ql),Fc=n(ql,"P",{});var Wte=s(Fc);e0r=r(Wte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),bY=n(Wte,"A",{href:!0});var QRt=s(bY);o0r=r(QRt,"from_pretrained()"),QRt.forEach(t),r0r=r(Wte," class method or the "),vY=n(Wte,"A",{href:!0});var HRt=s(vY);t0r=r(HRt,"from_config()"),HRt.forEach(t),a0r=r(Wte,` class
method.`),Wte.forEach(t),n0r=i(ql),ux=n(ql,"P",{});var OQe=s(ux);s0r=r(OQe,"This class cannot be instantiated directly using "),S8e=n(OQe,"CODE",{});var URt=s(S8e);l0r=r(URt,"__init__()"),URt.forEach(t),i0r=r(OQe," (throws an error)."),OQe.forEach(t),d0r=i(ql),Nt=n(ql,"DIV",{class:!0});var pA=s(Nt);T(bx.$$.fragment,pA),c0r=i(pA),R8e=n(pA,"P",{});var JRt=s(R8e);f0r=r(JRt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),JRt.forEach(t),m0r=i(pA),Tc=n(pA,"P",{});var Qte=s(Tc);g0r=r(Qte,`Note:
Loading a model from its configuration file does `),P8e=n(Qte,"STRONG",{});var YRt=s(P8e);h0r=r(YRt,"not"),YRt.forEach(t),p0r=r(Qte,` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=n(Qte,"A",{href:!0});var KRt=s(FY);_0r=r(KRt,"from_pretrained()"),KRt.forEach(t),u0r=r(Qte," to load the model weights."),Qte.forEach(t),b0r=i(pA),T(bM.$$.fragment,pA),pA.forEach(t),v0r=i(ql),Rr=n(ql,"DIV",{class:!0});var jl=s(Rr);T(vx.$$.fragment,jl),F0r=i(jl),B8e=n(jl,"P",{});var ZRt=s(B8e);T0r=r(ZRt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ZRt.forEach(t),M0r=i(jl),fn=n(jl,"P",{});var _A=s(fn);E0r=r(_A,"The model class to instantiate is selected based on the "),I8e=n(_A,"CODE",{});var ePt=s(I8e);C0r=r(ePt,"model_type"),ePt.forEach(t),w0r=r(_A,` property of the config object (either
passed as an argument or loaded from `),N8e=n(_A,"CODE",{});var oPt=s(N8e);A0r=r(oPt,"pretrained_model_name_or_path"),oPt.forEach(t),L0r=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q8e=n(_A,"CODE",{});var rPt=s(q8e);y0r=r(rPt,"pretrained_model_name_or_path"),rPt.forEach(t),x0r=r(_A,":"),_A.forEach(t),$0r=i(jl),ie=n(jl,"UL",{});var me=s(ie);vM=n(me,"LI",{});var sDe=s(vM);j8e=n(sDe,"STRONG",{});var tPt=s(j8e);k0r=r(tPt,"albert"),tPt.forEach(t),S0r=r(sDe," \u2014 "),TY=n(sDe,"A",{href:!0});var aPt=s(TY);R0r=r(aPt,"TFAlbertForMaskedLM"),aPt.forEach(t),P0r=r(sDe," (ALBERT model)"),sDe.forEach(t),B0r=i(me),FM=n(me,"LI",{});var lDe=s(FM);D8e=n(lDe,"STRONG",{});var nPt=s(D8e);I0r=r(nPt,"bert"),nPt.forEach(t),N0r=r(lDe," \u2014 "),MY=n(lDe,"A",{href:!0});var sPt=s(MY);q0r=r(sPt,"TFBertForMaskedLM"),sPt.forEach(t),j0r=r(lDe," (BERT model)"),lDe.forEach(t),D0r=i(me),TM=n(me,"LI",{});var iDe=s(TM);G8e=n(iDe,"STRONG",{});var lPt=s(G8e);G0r=r(lPt,"camembert"),lPt.forEach(t),O0r=r(iDe," \u2014 "),EY=n(iDe,"A",{href:!0});var iPt=s(EY);V0r=r(iPt,"TFCamembertForMaskedLM"),iPt.forEach(t),X0r=r(iDe," (CamemBERT model)"),iDe.forEach(t),z0r=i(me),MM=n(me,"LI",{});var dDe=s(MM);O8e=n(dDe,"STRONG",{});var dPt=s(O8e);W0r=r(dPt,"convbert"),dPt.forEach(t),Q0r=r(dDe," \u2014 "),CY=n(dDe,"A",{href:!0});var cPt=s(CY);H0r=r(cPt,"TFConvBertForMaskedLM"),cPt.forEach(t),U0r=r(dDe," (ConvBERT model)"),dDe.forEach(t),J0r=i(me),EM=n(me,"LI",{});var cDe=s(EM);V8e=n(cDe,"STRONG",{});var fPt=s(V8e);Y0r=r(fPt,"deberta"),fPt.forEach(t),K0r=r(cDe," \u2014 "),wY=n(cDe,"A",{href:!0});var mPt=s(wY);Z0r=r(mPt,"TFDebertaForMaskedLM"),mPt.forEach(t),ewr=r(cDe," (DeBERTa model)"),cDe.forEach(t),owr=i(me),CM=n(me,"LI",{});var fDe=s(CM);X8e=n(fDe,"STRONG",{});var gPt=s(X8e);rwr=r(gPt,"deberta-v2"),gPt.forEach(t),twr=r(fDe," \u2014 "),AY=n(fDe,"A",{href:!0});var hPt=s(AY);awr=r(hPt,"TFDebertaV2ForMaskedLM"),hPt.forEach(t),nwr=r(fDe," (DeBERTa-v2 model)"),fDe.forEach(t),swr=i(me),wM=n(me,"LI",{});var mDe=s(wM);z8e=n(mDe,"STRONG",{});var pPt=s(z8e);lwr=r(pPt,"distilbert"),pPt.forEach(t),iwr=r(mDe," \u2014 "),LY=n(mDe,"A",{href:!0});var _Pt=s(LY);dwr=r(_Pt,"TFDistilBertForMaskedLM"),_Pt.forEach(t),cwr=r(mDe," (DistilBERT model)"),mDe.forEach(t),fwr=i(me),AM=n(me,"LI",{});var gDe=s(AM);W8e=n(gDe,"STRONG",{});var uPt=s(W8e);mwr=r(uPt,"electra"),uPt.forEach(t),gwr=r(gDe," \u2014 "),yY=n(gDe,"A",{href:!0});var bPt=s(yY);hwr=r(bPt,"TFElectraForMaskedLM"),bPt.forEach(t),pwr=r(gDe," (ELECTRA model)"),gDe.forEach(t),_wr=i(me),LM=n(me,"LI",{});var hDe=s(LM);Q8e=n(hDe,"STRONG",{});var vPt=s(Q8e);uwr=r(vPt,"flaubert"),vPt.forEach(t),bwr=r(hDe," \u2014 "),xY=n(hDe,"A",{href:!0});var FPt=s(xY);vwr=r(FPt,"TFFlaubertWithLMHeadModel"),FPt.forEach(t),Fwr=r(hDe," (FlauBERT model)"),hDe.forEach(t),Twr=i(me),yM=n(me,"LI",{});var pDe=s(yM);H8e=n(pDe,"STRONG",{});var TPt=s(H8e);Mwr=r(TPt,"funnel"),TPt.forEach(t),Ewr=r(pDe," \u2014 "),$Y=n(pDe,"A",{href:!0});var MPt=s($Y);Cwr=r(MPt,"TFFunnelForMaskedLM"),MPt.forEach(t),wwr=r(pDe," (Funnel Transformer model)"),pDe.forEach(t),Awr=i(me),xM=n(me,"LI",{});var _De=s(xM);U8e=n(_De,"STRONG",{});var EPt=s(U8e);Lwr=r(EPt,"layoutlm"),EPt.forEach(t),ywr=r(_De," \u2014 "),kY=n(_De,"A",{href:!0});var CPt=s(kY);xwr=r(CPt,"TFLayoutLMForMaskedLM"),CPt.forEach(t),$wr=r(_De," (LayoutLM model)"),_De.forEach(t),kwr=i(me),$M=n(me,"LI",{});var uDe=s($M);J8e=n(uDe,"STRONG",{});var wPt=s(J8e);Swr=r(wPt,"longformer"),wPt.forEach(t),Rwr=r(uDe," \u2014 "),SY=n(uDe,"A",{href:!0});var APt=s(SY);Pwr=r(APt,"TFLongformerForMaskedLM"),APt.forEach(t),Bwr=r(uDe," (Longformer model)"),uDe.forEach(t),Iwr=i(me),kM=n(me,"LI",{});var bDe=s(kM);Y8e=n(bDe,"STRONG",{});var LPt=s(Y8e);Nwr=r(LPt,"mobilebert"),LPt.forEach(t),qwr=r(bDe," \u2014 "),RY=n(bDe,"A",{href:!0});var yPt=s(RY);jwr=r(yPt,"TFMobileBertForMaskedLM"),yPt.forEach(t),Dwr=r(bDe," (MobileBERT model)"),bDe.forEach(t),Gwr=i(me),SM=n(me,"LI",{});var vDe=s(SM);K8e=n(vDe,"STRONG",{});var xPt=s(K8e);Owr=r(xPt,"mpnet"),xPt.forEach(t),Vwr=r(vDe," \u2014 "),PY=n(vDe,"A",{href:!0});var $Pt=s(PY);Xwr=r($Pt,"TFMPNetForMaskedLM"),$Pt.forEach(t),zwr=r(vDe," (MPNet model)"),vDe.forEach(t),Wwr=i(me),RM=n(me,"LI",{});var FDe=s(RM);Z8e=n(FDe,"STRONG",{});var kPt=s(Z8e);Qwr=r(kPt,"rembert"),kPt.forEach(t),Hwr=r(FDe," \u2014 "),BY=n(FDe,"A",{href:!0});var SPt=s(BY);Uwr=r(SPt,"TFRemBertForMaskedLM"),SPt.forEach(t),Jwr=r(FDe," (RemBERT model)"),FDe.forEach(t),Ywr=i(me),PM=n(me,"LI",{});var TDe=s(PM);e9e=n(TDe,"STRONG",{});var RPt=s(e9e);Kwr=r(RPt,"roberta"),RPt.forEach(t),Zwr=r(TDe," \u2014 "),IY=n(TDe,"A",{href:!0});var PPt=s(IY);eAr=r(PPt,"TFRobertaForMaskedLM"),PPt.forEach(t),oAr=r(TDe," (RoBERTa model)"),TDe.forEach(t),rAr=i(me),BM=n(me,"LI",{});var MDe=s(BM);o9e=n(MDe,"STRONG",{});var BPt=s(o9e);tAr=r(BPt,"roformer"),BPt.forEach(t),aAr=r(MDe," \u2014 "),NY=n(MDe,"A",{href:!0});var IPt=s(NY);nAr=r(IPt,"TFRoFormerForMaskedLM"),IPt.forEach(t),sAr=r(MDe," (RoFormer model)"),MDe.forEach(t),lAr=i(me),IM=n(me,"LI",{});var EDe=s(IM);r9e=n(EDe,"STRONG",{});var NPt=s(r9e);iAr=r(NPt,"tapas"),NPt.forEach(t),dAr=r(EDe," \u2014 "),qY=n(EDe,"A",{href:!0});var qPt=s(qY);cAr=r(qPt,"TFTapasForMaskedLM"),qPt.forEach(t),fAr=r(EDe," (TAPAS model)"),EDe.forEach(t),mAr=i(me),NM=n(me,"LI",{});var CDe=s(NM);t9e=n(CDe,"STRONG",{});var jPt=s(t9e);gAr=r(jPt,"xlm"),jPt.forEach(t),hAr=r(CDe," \u2014 "),jY=n(CDe,"A",{href:!0});var DPt=s(jY);pAr=r(DPt,"TFXLMWithLMHeadModel"),DPt.forEach(t),_Ar=r(CDe," (XLM model)"),CDe.forEach(t),uAr=i(me),qM=n(me,"LI",{});var wDe=s(qM);a9e=n(wDe,"STRONG",{});var GPt=s(a9e);bAr=r(GPt,"xlm-roberta"),GPt.forEach(t),vAr=r(wDe," \u2014 "),DY=n(wDe,"A",{href:!0});var OPt=s(DY);FAr=r(OPt,"TFXLMRobertaForMaskedLM"),OPt.forEach(t),TAr=r(wDe," (XLM-RoBERTa model)"),wDe.forEach(t),me.forEach(t),MAr=i(jl),T(jM.$$.fragment,jl),jl.forEach(t),ql.forEach(t),Bze=i(f),Mc=n(f,"H2",{class:!0});var VQe=s(Mc);DM=n(VQe,"A",{id:!0,class:!0,href:!0});var VPt=s(DM);n9e=n(VPt,"SPAN",{});var XPt=s(n9e);T(Fx.$$.fragment,XPt),XPt.forEach(t),VPt.forEach(t),EAr=i(VQe),s9e=n(VQe,"SPAN",{});var zPt=s(s9e);CAr=r(zPt,"TFAutoModelForSeq2SeqLM"),zPt.forEach(t),VQe.forEach(t),Ize=i(f),sr=n(f,"DIV",{class:!0});var Dl=s(sr);T(Tx.$$.fragment,Dl),wAr=i(Dl),Ec=n(Dl,"P",{});var Hte=s(Ec);AAr=r(Hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),GY=n(Hte,"A",{href:!0});var WPt=s(GY);LAr=r(WPt,"from_pretrained()"),WPt.forEach(t),yAr=r(Hte," class method or the "),OY=n(Hte,"A",{href:!0});var QPt=s(OY);xAr=r(QPt,"from_config()"),QPt.forEach(t),$Ar=r(Hte,` class
method.`),Hte.forEach(t),kAr=i(Dl),Mx=n(Dl,"P",{});var XQe=s(Mx);SAr=r(XQe,"This class cannot be instantiated directly using "),l9e=n(XQe,"CODE",{});var HPt=s(l9e);RAr=r(HPt,"__init__()"),HPt.forEach(t),PAr=r(XQe," (throws an error)."),XQe.forEach(t),BAr=i(Dl),qt=n(Dl,"DIV",{class:!0});var uA=s(qt);T(Ex.$$.fragment,uA),IAr=i(uA),i9e=n(uA,"P",{});var UPt=s(i9e);NAr=r(UPt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),UPt.forEach(t),qAr=i(uA),Cc=n(uA,"P",{});var Ute=s(Cc);jAr=r(Ute,`Note:
Loading a model from its configuration file does `),d9e=n(Ute,"STRONG",{});var JPt=s(d9e);DAr=r(JPt,"not"),JPt.forEach(t),GAr=r(Ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),VY=n(Ute,"A",{href:!0});var YPt=s(VY);OAr=r(YPt,"from_pretrained()"),YPt.forEach(t),VAr=r(Ute," to load the model weights."),Ute.forEach(t),XAr=i(uA),T(GM.$$.fragment,uA),uA.forEach(t),zAr=i(Dl),Pr=n(Dl,"DIV",{class:!0});var Gl=s(Pr);T(Cx.$$.fragment,Gl),WAr=i(Gl),c9e=n(Gl,"P",{});var KPt=s(c9e);QAr=r(KPt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),KPt.forEach(t),HAr=i(Gl),mn=n(Gl,"P",{});var bA=s(mn);UAr=r(bA,"The model class to instantiate is selected based on the "),f9e=n(bA,"CODE",{});var ZPt=s(f9e);JAr=r(ZPt,"model_type"),ZPt.forEach(t),YAr=r(bA,` property of the config object (either
passed as an argument or loaded from `),m9e=n(bA,"CODE",{});var eBt=s(m9e);KAr=r(eBt,"pretrained_model_name_or_path"),eBt.forEach(t),ZAr=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g9e=n(bA,"CODE",{});var oBt=s(g9e);e6r=r(oBt,"pretrained_model_name_or_path"),oBt.forEach(t),o6r=r(bA,":"),bA.forEach(t),r6r=i(Gl),ye=n(Gl,"UL",{});var Ie=s(ye);OM=n(Ie,"LI",{});var ADe=s(OM);h9e=n(ADe,"STRONG",{});var rBt=s(h9e);t6r=r(rBt,"bart"),rBt.forEach(t),a6r=r(ADe," \u2014 "),XY=n(ADe,"A",{href:!0});var tBt=s(XY);n6r=r(tBt,"TFBartForConditionalGeneration"),tBt.forEach(t),s6r=r(ADe," (BART model)"),ADe.forEach(t),l6r=i(Ie),VM=n(Ie,"LI",{});var LDe=s(VM);p9e=n(LDe,"STRONG",{});var aBt=s(p9e);i6r=r(aBt,"blenderbot"),aBt.forEach(t),d6r=r(LDe," \u2014 "),zY=n(LDe,"A",{href:!0});var nBt=s(zY);c6r=r(nBt,"TFBlenderbotForConditionalGeneration"),nBt.forEach(t),f6r=r(LDe," (Blenderbot model)"),LDe.forEach(t),m6r=i(Ie),XM=n(Ie,"LI",{});var yDe=s(XM);_9e=n(yDe,"STRONG",{});var sBt=s(_9e);g6r=r(sBt,"blenderbot-small"),sBt.forEach(t),h6r=r(yDe," \u2014 "),WY=n(yDe,"A",{href:!0});var lBt=s(WY);p6r=r(lBt,"TFBlenderbotSmallForConditionalGeneration"),lBt.forEach(t),_6r=r(yDe," (BlenderbotSmall model)"),yDe.forEach(t),u6r=i(Ie),zM=n(Ie,"LI",{});var xDe=s(zM);u9e=n(xDe,"STRONG",{});var iBt=s(u9e);b6r=r(iBt,"encoder-decoder"),iBt.forEach(t),v6r=r(xDe," \u2014 "),QY=n(xDe,"A",{href:!0});var dBt=s(QY);F6r=r(dBt,"TFEncoderDecoderModel"),dBt.forEach(t),T6r=r(xDe," (Encoder decoder model)"),xDe.forEach(t),M6r=i(Ie),WM=n(Ie,"LI",{});var $De=s(WM);b9e=n($De,"STRONG",{});var cBt=s(b9e);E6r=r(cBt,"led"),cBt.forEach(t),C6r=r($De," \u2014 "),HY=n($De,"A",{href:!0});var fBt=s(HY);w6r=r(fBt,"TFLEDForConditionalGeneration"),fBt.forEach(t),A6r=r($De," (LED model)"),$De.forEach(t),L6r=i(Ie),QM=n(Ie,"LI",{});var kDe=s(QM);v9e=n(kDe,"STRONG",{});var mBt=s(v9e);y6r=r(mBt,"marian"),mBt.forEach(t),x6r=r(kDe," \u2014 "),UY=n(kDe,"A",{href:!0});var gBt=s(UY);$6r=r(gBt,"TFMarianMTModel"),gBt.forEach(t),k6r=r(kDe," (Marian model)"),kDe.forEach(t),S6r=i(Ie),HM=n(Ie,"LI",{});var SDe=s(HM);F9e=n(SDe,"STRONG",{});var hBt=s(F9e);R6r=r(hBt,"mbart"),hBt.forEach(t),P6r=r(SDe," \u2014 "),JY=n(SDe,"A",{href:!0});var pBt=s(JY);B6r=r(pBt,"TFMBartForConditionalGeneration"),pBt.forEach(t),I6r=r(SDe," (mBART model)"),SDe.forEach(t),N6r=i(Ie),UM=n(Ie,"LI",{});var RDe=s(UM);T9e=n(RDe,"STRONG",{});var _Bt=s(T9e);q6r=r(_Bt,"mt5"),_Bt.forEach(t),j6r=r(RDe," \u2014 "),YY=n(RDe,"A",{href:!0});var uBt=s(YY);D6r=r(uBt,"TFMT5ForConditionalGeneration"),uBt.forEach(t),G6r=r(RDe," (MT5 model)"),RDe.forEach(t),O6r=i(Ie),JM=n(Ie,"LI",{});var PDe=s(JM);M9e=n(PDe,"STRONG",{});var bBt=s(M9e);V6r=r(bBt,"pegasus"),bBt.forEach(t),X6r=r(PDe," \u2014 "),KY=n(PDe,"A",{href:!0});var vBt=s(KY);z6r=r(vBt,"TFPegasusForConditionalGeneration"),vBt.forEach(t),W6r=r(PDe," (Pegasus model)"),PDe.forEach(t),Q6r=i(Ie),YM=n(Ie,"LI",{});var BDe=s(YM);E9e=n(BDe,"STRONG",{});var FBt=s(E9e);H6r=r(FBt,"t5"),FBt.forEach(t),U6r=r(BDe," \u2014 "),ZY=n(BDe,"A",{href:!0});var TBt=s(ZY);J6r=r(TBt,"TFT5ForConditionalGeneration"),TBt.forEach(t),Y6r=r(BDe," (T5 model)"),BDe.forEach(t),Ie.forEach(t),K6r=i(Gl),T(KM.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),Nze=i(f),wc=n(f,"H2",{class:!0});var zQe=s(wc);ZM=n(zQe,"A",{id:!0,class:!0,href:!0});var MBt=s(ZM);C9e=n(MBt,"SPAN",{});var EBt=s(C9e);T(wx.$$.fragment,EBt),EBt.forEach(t),MBt.forEach(t),Z6r=i(zQe),w9e=n(zQe,"SPAN",{});var CBt=s(w9e);eLr=r(CBt,"TFAutoModelForSequenceClassification"),CBt.forEach(t),zQe.forEach(t),qze=i(f),lr=n(f,"DIV",{class:!0});var Ol=s(lr);T(Ax.$$.fragment,Ol),oLr=i(Ol),Ac=n(Ol,"P",{});var Jte=s(Ac);rLr=r(Jte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),eK=n(Jte,"A",{href:!0});var wBt=s(eK);tLr=r(wBt,"from_pretrained()"),wBt.forEach(t),aLr=r(Jte," class method or the "),oK=n(Jte,"A",{href:!0});var ABt=s(oK);nLr=r(ABt,"from_config()"),ABt.forEach(t),sLr=r(Jte,` class
method.`),Jte.forEach(t),lLr=i(Ol),Lx=n(Ol,"P",{});var WQe=s(Lx);iLr=r(WQe,"This class cannot be instantiated directly using "),A9e=n(WQe,"CODE",{});var LBt=s(A9e);dLr=r(LBt,"__init__()"),LBt.forEach(t),cLr=r(WQe," (throws an error)."),WQe.forEach(t),fLr=i(Ol),jt=n(Ol,"DIV",{class:!0});var vA=s(jt);T(yx.$$.fragment,vA),mLr=i(vA),L9e=n(vA,"P",{});var yBt=s(L9e);gLr=r(yBt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),yBt.forEach(t),hLr=i(vA),Lc=n(vA,"P",{});var Yte=s(Lc);pLr=r(Yte,`Note:
Loading a model from its configuration file does `),y9e=n(Yte,"STRONG",{});var xBt=s(y9e);_Lr=r(xBt,"not"),xBt.forEach(t),uLr=r(Yte,` load the model weights. It only affects the
model\u2019s configuration. Use `),rK=n(Yte,"A",{href:!0});var $Bt=s(rK);bLr=r($Bt,"from_pretrained()"),$Bt.forEach(t),vLr=r(Yte," to load the model weights."),Yte.forEach(t),FLr=i(vA),T(e4.$$.fragment,vA),vA.forEach(t),TLr=i(Ol),Br=n(Ol,"DIV",{class:!0});var Vl=s(Br);T(xx.$$.fragment,Vl),MLr=i(Vl),x9e=n(Vl,"P",{});var kBt=s(x9e);ELr=r(kBt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),kBt.forEach(t),CLr=i(Vl),gn=n(Vl,"P",{});var FA=s(gn);wLr=r(FA,"The model class to instantiate is selected based on the "),$9e=n(FA,"CODE",{});var SBt=s($9e);ALr=r(SBt,"model_type"),SBt.forEach(t),LLr=r(FA,` property of the config object (either
passed as an argument or loaded from `),k9e=n(FA,"CODE",{});var RBt=s(k9e);yLr=r(RBt,"pretrained_model_name_or_path"),RBt.forEach(t),xLr=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S9e=n(FA,"CODE",{});var PBt=s(S9e);$Lr=r(PBt,"pretrained_model_name_or_path"),PBt.forEach(t),kLr=r(FA,":"),FA.forEach(t),SLr=i(Vl),te=n(Vl,"UL",{});var ne=s(te);o4=n(ne,"LI",{});var IDe=s(o4);R9e=n(IDe,"STRONG",{});var BBt=s(R9e);RLr=r(BBt,"albert"),BBt.forEach(t),PLr=r(IDe," \u2014 "),tK=n(IDe,"A",{href:!0});var IBt=s(tK);BLr=r(IBt,"TFAlbertForSequenceClassification"),IBt.forEach(t),ILr=r(IDe," (ALBERT model)"),IDe.forEach(t),NLr=i(ne),r4=n(ne,"LI",{});var NDe=s(r4);P9e=n(NDe,"STRONG",{});var NBt=s(P9e);qLr=r(NBt,"bert"),NBt.forEach(t),jLr=r(NDe," \u2014 "),aK=n(NDe,"A",{href:!0});var qBt=s(aK);DLr=r(qBt,"TFBertForSequenceClassification"),qBt.forEach(t),GLr=r(NDe," (BERT model)"),NDe.forEach(t),OLr=i(ne),t4=n(ne,"LI",{});var qDe=s(t4);B9e=n(qDe,"STRONG",{});var jBt=s(B9e);VLr=r(jBt,"camembert"),jBt.forEach(t),XLr=r(qDe," \u2014 "),nK=n(qDe,"A",{href:!0});var DBt=s(nK);zLr=r(DBt,"TFCamembertForSequenceClassification"),DBt.forEach(t),WLr=r(qDe," (CamemBERT model)"),qDe.forEach(t),QLr=i(ne),a4=n(ne,"LI",{});var jDe=s(a4);I9e=n(jDe,"STRONG",{});var GBt=s(I9e);HLr=r(GBt,"convbert"),GBt.forEach(t),ULr=r(jDe," \u2014 "),sK=n(jDe,"A",{href:!0});var OBt=s(sK);JLr=r(OBt,"TFConvBertForSequenceClassification"),OBt.forEach(t),YLr=r(jDe," (ConvBERT model)"),jDe.forEach(t),KLr=i(ne),n4=n(ne,"LI",{});var DDe=s(n4);N9e=n(DDe,"STRONG",{});var VBt=s(N9e);ZLr=r(VBt,"ctrl"),VBt.forEach(t),eyr=r(DDe," \u2014 "),lK=n(DDe,"A",{href:!0});var XBt=s(lK);oyr=r(XBt,"TFCTRLForSequenceClassification"),XBt.forEach(t),ryr=r(DDe," (CTRL model)"),DDe.forEach(t),tyr=i(ne),s4=n(ne,"LI",{});var GDe=s(s4);q9e=n(GDe,"STRONG",{});var zBt=s(q9e);ayr=r(zBt,"deberta"),zBt.forEach(t),nyr=r(GDe," \u2014 "),iK=n(GDe,"A",{href:!0});var WBt=s(iK);syr=r(WBt,"TFDebertaForSequenceClassification"),WBt.forEach(t),lyr=r(GDe," (DeBERTa model)"),GDe.forEach(t),iyr=i(ne),l4=n(ne,"LI",{});var ODe=s(l4);j9e=n(ODe,"STRONG",{});var QBt=s(j9e);dyr=r(QBt,"deberta-v2"),QBt.forEach(t),cyr=r(ODe," \u2014 "),dK=n(ODe,"A",{href:!0});var HBt=s(dK);fyr=r(HBt,"TFDebertaV2ForSequenceClassification"),HBt.forEach(t),myr=r(ODe," (DeBERTa-v2 model)"),ODe.forEach(t),gyr=i(ne),i4=n(ne,"LI",{});var VDe=s(i4);D9e=n(VDe,"STRONG",{});var UBt=s(D9e);hyr=r(UBt,"distilbert"),UBt.forEach(t),pyr=r(VDe," \u2014 "),cK=n(VDe,"A",{href:!0});var JBt=s(cK);_yr=r(JBt,"TFDistilBertForSequenceClassification"),JBt.forEach(t),uyr=r(VDe," (DistilBERT model)"),VDe.forEach(t),byr=i(ne),d4=n(ne,"LI",{});var XDe=s(d4);G9e=n(XDe,"STRONG",{});var YBt=s(G9e);vyr=r(YBt,"electra"),YBt.forEach(t),Fyr=r(XDe," \u2014 "),fK=n(XDe,"A",{href:!0});var KBt=s(fK);Tyr=r(KBt,"TFElectraForSequenceClassification"),KBt.forEach(t),Myr=r(XDe," (ELECTRA model)"),XDe.forEach(t),Eyr=i(ne),c4=n(ne,"LI",{});var zDe=s(c4);O9e=n(zDe,"STRONG",{});var ZBt=s(O9e);Cyr=r(ZBt,"flaubert"),ZBt.forEach(t),wyr=r(zDe," \u2014 "),mK=n(zDe,"A",{href:!0});var eIt=s(mK);Ayr=r(eIt,"TFFlaubertForSequenceClassification"),eIt.forEach(t),Lyr=r(zDe," (FlauBERT model)"),zDe.forEach(t),yyr=i(ne),f4=n(ne,"LI",{});var WDe=s(f4);V9e=n(WDe,"STRONG",{});var oIt=s(V9e);xyr=r(oIt,"funnel"),oIt.forEach(t),$yr=r(WDe," \u2014 "),gK=n(WDe,"A",{href:!0});var rIt=s(gK);kyr=r(rIt,"TFFunnelForSequenceClassification"),rIt.forEach(t),Syr=r(WDe," (Funnel Transformer model)"),WDe.forEach(t),Ryr=i(ne),m4=n(ne,"LI",{});var QDe=s(m4);X9e=n(QDe,"STRONG",{});var tIt=s(X9e);Pyr=r(tIt,"gpt2"),tIt.forEach(t),Byr=r(QDe," \u2014 "),hK=n(QDe,"A",{href:!0});var aIt=s(hK);Iyr=r(aIt,"TFGPT2ForSequenceClassification"),aIt.forEach(t),Nyr=r(QDe," (OpenAI GPT-2 model)"),QDe.forEach(t),qyr=i(ne),g4=n(ne,"LI",{});var HDe=s(g4);z9e=n(HDe,"STRONG",{});var nIt=s(z9e);jyr=r(nIt,"gptj"),nIt.forEach(t),Dyr=r(HDe," \u2014 "),pK=n(HDe,"A",{href:!0});var sIt=s(pK);Gyr=r(sIt,"TFGPTJForSequenceClassification"),sIt.forEach(t),Oyr=r(HDe," (GPT-J model)"),HDe.forEach(t),Vyr=i(ne),h4=n(ne,"LI",{});var UDe=s(h4);W9e=n(UDe,"STRONG",{});var lIt=s(W9e);Xyr=r(lIt,"layoutlm"),lIt.forEach(t),zyr=r(UDe," \u2014 "),_K=n(UDe,"A",{href:!0});var iIt=s(_K);Wyr=r(iIt,"TFLayoutLMForSequenceClassification"),iIt.forEach(t),Qyr=r(UDe," (LayoutLM model)"),UDe.forEach(t),Hyr=i(ne),p4=n(ne,"LI",{});var JDe=s(p4);Q9e=n(JDe,"STRONG",{});var dIt=s(Q9e);Uyr=r(dIt,"longformer"),dIt.forEach(t),Jyr=r(JDe," \u2014 "),uK=n(JDe,"A",{href:!0});var cIt=s(uK);Yyr=r(cIt,"TFLongformerForSequenceClassification"),cIt.forEach(t),Kyr=r(JDe," (Longformer model)"),JDe.forEach(t),Zyr=i(ne),_4=n(ne,"LI",{});var YDe=s(_4);H9e=n(YDe,"STRONG",{});var fIt=s(H9e);exr=r(fIt,"mobilebert"),fIt.forEach(t),oxr=r(YDe," \u2014 "),bK=n(YDe,"A",{href:!0});var mIt=s(bK);rxr=r(mIt,"TFMobileBertForSequenceClassification"),mIt.forEach(t),txr=r(YDe," (MobileBERT model)"),YDe.forEach(t),axr=i(ne),u4=n(ne,"LI",{});var KDe=s(u4);U9e=n(KDe,"STRONG",{});var gIt=s(U9e);nxr=r(gIt,"mpnet"),gIt.forEach(t),sxr=r(KDe," \u2014 "),vK=n(KDe,"A",{href:!0});var hIt=s(vK);lxr=r(hIt,"TFMPNetForSequenceClassification"),hIt.forEach(t),ixr=r(KDe," (MPNet model)"),KDe.forEach(t),dxr=i(ne),b4=n(ne,"LI",{});var ZDe=s(b4);J9e=n(ZDe,"STRONG",{});var pIt=s(J9e);cxr=r(pIt,"openai-gpt"),pIt.forEach(t),fxr=r(ZDe," \u2014 "),FK=n(ZDe,"A",{href:!0});var _It=s(FK);mxr=r(_It,"TFOpenAIGPTForSequenceClassification"),_It.forEach(t),gxr=r(ZDe," (OpenAI GPT model)"),ZDe.forEach(t),hxr=i(ne),v4=n(ne,"LI",{});var eGe=s(v4);Y9e=n(eGe,"STRONG",{});var uIt=s(Y9e);pxr=r(uIt,"rembert"),uIt.forEach(t),_xr=r(eGe," \u2014 "),TK=n(eGe,"A",{href:!0});var bIt=s(TK);uxr=r(bIt,"TFRemBertForSequenceClassification"),bIt.forEach(t),bxr=r(eGe," (RemBERT model)"),eGe.forEach(t),vxr=i(ne),F4=n(ne,"LI",{});var oGe=s(F4);K9e=n(oGe,"STRONG",{});var vIt=s(K9e);Fxr=r(vIt,"roberta"),vIt.forEach(t),Txr=r(oGe," \u2014 "),MK=n(oGe,"A",{href:!0});var FIt=s(MK);Mxr=r(FIt,"TFRobertaForSequenceClassification"),FIt.forEach(t),Exr=r(oGe," (RoBERTa model)"),oGe.forEach(t),Cxr=i(ne),T4=n(ne,"LI",{});var rGe=s(T4);Z9e=n(rGe,"STRONG",{});var TIt=s(Z9e);wxr=r(TIt,"roformer"),TIt.forEach(t),Axr=r(rGe," \u2014 "),EK=n(rGe,"A",{href:!0});var MIt=s(EK);Lxr=r(MIt,"TFRoFormerForSequenceClassification"),MIt.forEach(t),yxr=r(rGe," (RoFormer model)"),rGe.forEach(t),xxr=i(ne),M4=n(ne,"LI",{});var tGe=s(M4);eMe=n(tGe,"STRONG",{});var EIt=s(eMe);$xr=r(EIt,"tapas"),EIt.forEach(t),kxr=r(tGe," \u2014 "),CK=n(tGe,"A",{href:!0});var CIt=s(CK);Sxr=r(CIt,"TFTapasForSequenceClassification"),CIt.forEach(t),Rxr=r(tGe," (TAPAS model)"),tGe.forEach(t),Pxr=i(ne),E4=n(ne,"LI",{});var aGe=s(E4);oMe=n(aGe,"STRONG",{});var wIt=s(oMe);Bxr=r(wIt,"transfo-xl"),wIt.forEach(t),Ixr=r(aGe," \u2014 "),wK=n(aGe,"A",{href:!0});var AIt=s(wK);Nxr=r(AIt,"TFTransfoXLForSequenceClassification"),AIt.forEach(t),qxr=r(aGe," (Transformer-XL model)"),aGe.forEach(t),jxr=i(ne),C4=n(ne,"LI",{});var nGe=s(C4);rMe=n(nGe,"STRONG",{});var LIt=s(rMe);Dxr=r(LIt,"xlm"),LIt.forEach(t),Gxr=r(nGe," \u2014 "),AK=n(nGe,"A",{href:!0});var yIt=s(AK);Oxr=r(yIt,"TFXLMForSequenceClassification"),yIt.forEach(t),Vxr=r(nGe," (XLM model)"),nGe.forEach(t),Xxr=i(ne),w4=n(ne,"LI",{});var sGe=s(w4);tMe=n(sGe,"STRONG",{});var xIt=s(tMe);zxr=r(xIt,"xlm-roberta"),xIt.forEach(t),Wxr=r(sGe," \u2014 "),LK=n(sGe,"A",{href:!0});var $It=s(LK);Qxr=r($It,"TFXLMRobertaForSequenceClassification"),$It.forEach(t),Hxr=r(sGe," (XLM-RoBERTa model)"),sGe.forEach(t),Uxr=i(ne),A4=n(ne,"LI",{});var lGe=s(A4);aMe=n(lGe,"STRONG",{});var kIt=s(aMe);Jxr=r(kIt,"xlnet"),kIt.forEach(t),Yxr=r(lGe," \u2014 "),yK=n(lGe,"A",{href:!0});var SIt=s(yK);Kxr=r(SIt,"TFXLNetForSequenceClassification"),SIt.forEach(t),Zxr=r(lGe," (XLNet model)"),lGe.forEach(t),ne.forEach(t),e$r=i(Vl),T(L4.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),jze=i(f),yc=n(f,"H2",{class:!0});var QQe=s(yc);y4=n(QQe,"A",{id:!0,class:!0,href:!0});var RIt=s(y4);nMe=n(RIt,"SPAN",{});var PIt=s(nMe);T($x.$$.fragment,PIt),PIt.forEach(t),RIt.forEach(t),o$r=i(QQe),sMe=n(QQe,"SPAN",{});var BIt=s(sMe);r$r=r(BIt,"TFAutoModelForMultipleChoice"),BIt.forEach(t),QQe.forEach(t),Dze=i(f),ir=n(f,"DIV",{class:!0});var Xl=s(ir);T(kx.$$.fragment,Xl),t$r=i(Xl),xc=n(Xl,"P",{});var Kte=s(xc);a$r=r(Kte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),xK=n(Kte,"A",{href:!0});var IIt=s(xK);n$r=r(IIt,"from_pretrained()"),IIt.forEach(t),s$r=r(Kte," class method or the "),$K=n(Kte,"A",{href:!0});var NIt=s($K);l$r=r(NIt,"from_config()"),NIt.forEach(t),i$r=r(Kte,` class
method.`),Kte.forEach(t),d$r=i(Xl),Sx=n(Xl,"P",{});var HQe=s(Sx);c$r=r(HQe,"This class cannot be instantiated directly using "),lMe=n(HQe,"CODE",{});var qIt=s(lMe);f$r=r(qIt,"__init__()"),qIt.forEach(t),m$r=r(HQe," (throws an error)."),HQe.forEach(t),g$r=i(Xl),Dt=n(Xl,"DIV",{class:!0});var TA=s(Dt);T(Rx.$$.fragment,TA),h$r=i(TA),iMe=n(TA,"P",{});var jIt=s(iMe);p$r=r(jIt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),jIt.forEach(t),_$r=i(TA),$c=n(TA,"P",{});var Zte=s($c);u$r=r(Zte,`Note:
Loading a model from its configuration file does `),dMe=n(Zte,"STRONG",{});var DIt=s(dMe);b$r=r(DIt,"not"),DIt.forEach(t),v$r=r(Zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),kK=n(Zte,"A",{href:!0});var GIt=s(kK);F$r=r(GIt,"from_pretrained()"),GIt.forEach(t),T$r=r(Zte," to load the model weights."),Zte.forEach(t),M$r=i(TA),T(x4.$$.fragment,TA),TA.forEach(t),E$r=i(Xl),Ir=n(Xl,"DIV",{class:!0});var zl=s(Ir);T(Px.$$.fragment,zl),C$r=i(zl),cMe=n(zl,"P",{});var OIt=s(cMe);w$r=r(OIt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),OIt.forEach(t),A$r=i(zl),hn=n(zl,"P",{});var MA=s(hn);L$r=r(MA,"The model class to instantiate is selected based on the "),fMe=n(MA,"CODE",{});var VIt=s(fMe);y$r=r(VIt,"model_type"),VIt.forEach(t),x$r=r(MA,` property of the config object (either
passed as an argument or loaded from `),mMe=n(MA,"CODE",{});var XIt=s(mMe);$$r=r(XIt,"pretrained_model_name_or_path"),XIt.forEach(t),k$r=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gMe=n(MA,"CODE",{});var zIt=s(gMe);S$r=r(zIt,"pretrained_model_name_or_path"),zIt.forEach(t),R$r=r(MA,":"),MA.forEach(t),P$r=i(zl),ue=n(zl,"UL",{});var Fe=s(ue);$4=n(Fe,"LI",{});var iGe=s($4);hMe=n(iGe,"STRONG",{});var WIt=s(hMe);B$r=r(WIt,"albert"),WIt.forEach(t),I$r=r(iGe," \u2014 "),SK=n(iGe,"A",{href:!0});var QIt=s(SK);N$r=r(QIt,"TFAlbertForMultipleChoice"),QIt.forEach(t),q$r=r(iGe," (ALBERT model)"),iGe.forEach(t),j$r=i(Fe),k4=n(Fe,"LI",{});var dGe=s(k4);pMe=n(dGe,"STRONG",{});var HIt=s(pMe);D$r=r(HIt,"bert"),HIt.forEach(t),G$r=r(dGe," \u2014 "),RK=n(dGe,"A",{href:!0});var UIt=s(RK);O$r=r(UIt,"TFBertForMultipleChoice"),UIt.forEach(t),V$r=r(dGe," (BERT model)"),dGe.forEach(t),X$r=i(Fe),S4=n(Fe,"LI",{});var cGe=s(S4);_Me=n(cGe,"STRONG",{});var JIt=s(_Me);z$r=r(JIt,"camembert"),JIt.forEach(t),W$r=r(cGe," \u2014 "),PK=n(cGe,"A",{href:!0});var YIt=s(PK);Q$r=r(YIt,"TFCamembertForMultipleChoice"),YIt.forEach(t),H$r=r(cGe," (CamemBERT model)"),cGe.forEach(t),U$r=i(Fe),R4=n(Fe,"LI",{});var fGe=s(R4);uMe=n(fGe,"STRONG",{});var KIt=s(uMe);J$r=r(KIt,"convbert"),KIt.forEach(t),Y$r=r(fGe," \u2014 "),BK=n(fGe,"A",{href:!0});var ZIt=s(BK);K$r=r(ZIt,"TFConvBertForMultipleChoice"),ZIt.forEach(t),Z$r=r(fGe," (ConvBERT model)"),fGe.forEach(t),ekr=i(Fe),P4=n(Fe,"LI",{});var mGe=s(P4);bMe=n(mGe,"STRONG",{});var eNt=s(bMe);okr=r(eNt,"distilbert"),eNt.forEach(t),rkr=r(mGe," \u2014 "),IK=n(mGe,"A",{href:!0});var oNt=s(IK);tkr=r(oNt,"TFDistilBertForMultipleChoice"),oNt.forEach(t),akr=r(mGe," (DistilBERT model)"),mGe.forEach(t),nkr=i(Fe),B4=n(Fe,"LI",{});var gGe=s(B4);vMe=n(gGe,"STRONG",{});var rNt=s(vMe);skr=r(rNt,"electra"),rNt.forEach(t),lkr=r(gGe," \u2014 "),NK=n(gGe,"A",{href:!0});var tNt=s(NK);ikr=r(tNt,"TFElectraForMultipleChoice"),tNt.forEach(t),dkr=r(gGe," (ELECTRA model)"),gGe.forEach(t),ckr=i(Fe),I4=n(Fe,"LI",{});var hGe=s(I4);FMe=n(hGe,"STRONG",{});var aNt=s(FMe);fkr=r(aNt,"flaubert"),aNt.forEach(t),mkr=r(hGe," \u2014 "),qK=n(hGe,"A",{href:!0});var nNt=s(qK);gkr=r(nNt,"TFFlaubertForMultipleChoice"),nNt.forEach(t),hkr=r(hGe," (FlauBERT model)"),hGe.forEach(t),pkr=i(Fe),N4=n(Fe,"LI",{});var pGe=s(N4);TMe=n(pGe,"STRONG",{});var sNt=s(TMe);_kr=r(sNt,"funnel"),sNt.forEach(t),ukr=r(pGe," \u2014 "),jK=n(pGe,"A",{href:!0});var lNt=s(jK);bkr=r(lNt,"TFFunnelForMultipleChoice"),lNt.forEach(t),vkr=r(pGe," (Funnel Transformer model)"),pGe.forEach(t),Fkr=i(Fe),q4=n(Fe,"LI",{});var _Ge=s(q4);MMe=n(_Ge,"STRONG",{});var iNt=s(MMe);Tkr=r(iNt,"longformer"),iNt.forEach(t),Mkr=r(_Ge," \u2014 "),DK=n(_Ge,"A",{href:!0});var dNt=s(DK);Ekr=r(dNt,"TFLongformerForMultipleChoice"),dNt.forEach(t),Ckr=r(_Ge," (Longformer model)"),_Ge.forEach(t),wkr=i(Fe),j4=n(Fe,"LI",{});var uGe=s(j4);EMe=n(uGe,"STRONG",{});var cNt=s(EMe);Akr=r(cNt,"mobilebert"),cNt.forEach(t),Lkr=r(uGe," \u2014 "),GK=n(uGe,"A",{href:!0});var fNt=s(GK);ykr=r(fNt,"TFMobileBertForMultipleChoice"),fNt.forEach(t),xkr=r(uGe," (MobileBERT model)"),uGe.forEach(t),$kr=i(Fe),D4=n(Fe,"LI",{});var bGe=s(D4);CMe=n(bGe,"STRONG",{});var mNt=s(CMe);kkr=r(mNt,"mpnet"),mNt.forEach(t),Skr=r(bGe," \u2014 "),OK=n(bGe,"A",{href:!0});var gNt=s(OK);Rkr=r(gNt,"TFMPNetForMultipleChoice"),gNt.forEach(t),Pkr=r(bGe," (MPNet model)"),bGe.forEach(t),Bkr=i(Fe),G4=n(Fe,"LI",{});var vGe=s(G4);wMe=n(vGe,"STRONG",{});var hNt=s(wMe);Ikr=r(hNt,"rembert"),hNt.forEach(t),Nkr=r(vGe," \u2014 "),VK=n(vGe,"A",{href:!0});var pNt=s(VK);qkr=r(pNt,"TFRemBertForMultipleChoice"),pNt.forEach(t),jkr=r(vGe," (RemBERT model)"),vGe.forEach(t),Dkr=i(Fe),O4=n(Fe,"LI",{});var FGe=s(O4);AMe=n(FGe,"STRONG",{});var _Nt=s(AMe);Gkr=r(_Nt,"roberta"),_Nt.forEach(t),Okr=r(FGe," \u2014 "),XK=n(FGe,"A",{href:!0});var uNt=s(XK);Vkr=r(uNt,"TFRobertaForMultipleChoice"),uNt.forEach(t),Xkr=r(FGe," (RoBERTa model)"),FGe.forEach(t),zkr=i(Fe),V4=n(Fe,"LI",{});var TGe=s(V4);LMe=n(TGe,"STRONG",{});var bNt=s(LMe);Wkr=r(bNt,"roformer"),bNt.forEach(t),Qkr=r(TGe," \u2014 "),zK=n(TGe,"A",{href:!0});var vNt=s(zK);Hkr=r(vNt,"TFRoFormerForMultipleChoice"),vNt.forEach(t),Ukr=r(TGe," (RoFormer model)"),TGe.forEach(t),Jkr=i(Fe),X4=n(Fe,"LI",{});var MGe=s(X4);yMe=n(MGe,"STRONG",{});var FNt=s(yMe);Ykr=r(FNt,"xlm"),FNt.forEach(t),Kkr=r(MGe," \u2014 "),WK=n(MGe,"A",{href:!0});var TNt=s(WK);Zkr=r(TNt,"TFXLMForMultipleChoice"),TNt.forEach(t),eSr=r(MGe," (XLM model)"),MGe.forEach(t),oSr=i(Fe),z4=n(Fe,"LI",{});var EGe=s(z4);xMe=n(EGe,"STRONG",{});var MNt=s(xMe);rSr=r(MNt,"xlm-roberta"),MNt.forEach(t),tSr=r(EGe," \u2014 "),QK=n(EGe,"A",{href:!0});var ENt=s(QK);aSr=r(ENt,"TFXLMRobertaForMultipleChoice"),ENt.forEach(t),nSr=r(EGe," (XLM-RoBERTa model)"),EGe.forEach(t),sSr=i(Fe),W4=n(Fe,"LI",{});var CGe=s(W4);$Me=n(CGe,"STRONG",{});var CNt=s($Me);lSr=r(CNt,"xlnet"),CNt.forEach(t),iSr=r(CGe," \u2014 "),HK=n(CGe,"A",{href:!0});var wNt=s(HK);dSr=r(wNt,"TFXLNetForMultipleChoice"),wNt.forEach(t),cSr=r(CGe," (XLNet model)"),CGe.forEach(t),Fe.forEach(t),fSr=i(zl),T(Q4.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),Gze=i(f),kc=n(f,"H2",{class:!0});var UQe=s(kc);H4=n(UQe,"A",{id:!0,class:!0,href:!0});var ANt=s(H4);kMe=n(ANt,"SPAN",{});var LNt=s(kMe);T(Bx.$$.fragment,LNt),LNt.forEach(t),ANt.forEach(t),mSr=i(UQe),SMe=n(UQe,"SPAN",{});var yNt=s(SMe);gSr=r(yNt,"TFAutoModelForNextSentencePrediction"),yNt.forEach(t),UQe.forEach(t),Oze=i(f),dr=n(f,"DIV",{class:!0});var Wl=s(dr);T(Ix.$$.fragment,Wl),hSr=i(Wl),Sc=n(Wl,"P",{});var eae=s(Sc);pSr=r(eae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),UK=n(eae,"A",{href:!0});var xNt=s(UK);_Sr=r(xNt,"from_pretrained()"),xNt.forEach(t),uSr=r(eae," class method or the "),JK=n(eae,"A",{href:!0});var $Nt=s(JK);bSr=r($Nt,"from_config()"),$Nt.forEach(t),vSr=r(eae,` class
method.`),eae.forEach(t),FSr=i(Wl),Nx=n(Wl,"P",{});var JQe=s(Nx);TSr=r(JQe,"This class cannot be instantiated directly using "),RMe=n(JQe,"CODE",{});var kNt=s(RMe);MSr=r(kNt,"__init__()"),kNt.forEach(t),ESr=r(JQe," (throws an error)."),JQe.forEach(t),CSr=i(Wl),Gt=n(Wl,"DIV",{class:!0});var EA=s(Gt);T(qx.$$.fragment,EA),wSr=i(EA),PMe=n(EA,"P",{});var SNt=s(PMe);ASr=r(SNt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),SNt.forEach(t),LSr=i(EA),Rc=n(EA,"P",{});var oae=s(Rc);ySr=r(oae,`Note:
Loading a model from its configuration file does `),BMe=n(oae,"STRONG",{});var RNt=s(BMe);xSr=r(RNt,"not"),RNt.forEach(t),$Sr=r(oae,` load the model weights. It only affects the
model\u2019s configuration. Use `),YK=n(oae,"A",{href:!0});var PNt=s(YK);kSr=r(PNt,"from_pretrained()"),PNt.forEach(t),SSr=r(oae," to load the model weights."),oae.forEach(t),RSr=i(EA),T(U4.$$.fragment,EA),EA.forEach(t),PSr=i(Wl),Nr=n(Wl,"DIV",{class:!0});var Ql=s(Nr);T(jx.$$.fragment,Ql),BSr=i(Ql),IMe=n(Ql,"P",{});var BNt=s(IMe);ISr=r(BNt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),BNt.forEach(t),NSr=i(Ql),pn=n(Ql,"P",{});var CA=s(pn);qSr=r(CA,"The model class to instantiate is selected based on the "),NMe=n(CA,"CODE",{});var INt=s(NMe);jSr=r(INt,"model_type"),INt.forEach(t),DSr=r(CA,` property of the config object (either
passed as an argument or loaded from `),qMe=n(CA,"CODE",{});var NNt=s(qMe);GSr=r(NNt,"pretrained_model_name_or_path"),NNt.forEach(t),OSr=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jMe=n(CA,"CODE",{});var qNt=s(jMe);VSr=r(qNt,"pretrained_model_name_or_path"),qNt.forEach(t),XSr=r(CA,":"),CA.forEach(t),zSr=i(Ql),Dx=n(Ql,"UL",{});var YQe=s(Dx);J4=n(YQe,"LI",{});var wGe=s(J4);DMe=n(wGe,"STRONG",{});var jNt=s(DMe);WSr=r(jNt,"bert"),jNt.forEach(t),QSr=r(wGe," \u2014 "),KK=n(wGe,"A",{href:!0});var DNt=s(KK);HSr=r(DNt,"TFBertForNextSentencePrediction"),DNt.forEach(t),USr=r(wGe," (BERT model)"),wGe.forEach(t),JSr=i(YQe),Y4=n(YQe,"LI",{});var AGe=s(Y4);GMe=n(AGe,"STRONG",{});var GNt=s(GMe);YSr=r(GNt,"mobilebert"),GNt.forEach(t),KSr=r(AGe," \u2014 "),ZK=n(AGe,"A",{href:!0});var ONt=s(ZK);ZSr=r(ONt,"TFMobileBertForNextSentencePrediction"),ONt.forEach(t),eRr=r(AGe," (MobileBERT model)"),AGe.forEach(t),YQe.forEach(t),oRr=i(Ql),T(K4.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),Vze=i(f),Pc=n(f,"H2",{class:!0});var KQe=s(Pc);Z4=n(KQe,"A",{id:!0,class:!0,href:!0});var VNt=s(Z4);OMe=n(VNt,"SPAN",{});var XNt=s(OMe);T(Gx.$$.fragment,XNt),XNt.forEach(t),VNt.forEach(t),rRr=i(KQe),VMe=n(KQe,"SPAN",{});var zNt=s(VMe);tRr=r(zNt,"TFAutoModelForTableQuestionAnswering"),zNt.forEach(t),KQe.forEach(t),Xze=i(f),cr=n(f,"DIV",{class:!0});var Hl=s(cr);T(Ox.$$.fragment,Hl),aRr=i(Hl),Bc=n(Hl,"P",{});var rae=s(Bc);nRr=r(rae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),eZ=n(rae,"A",{href:!0});var WNt=s(eZ);sRr=r(WNt,"from_pretrained()"),WNt.forEach(t),lRr=r(rae," class method or the "),oZ=n(rae,"A",{href:!0});var QNt=s(oZ);iRr=r(QNt,"from_config()"),QNt.forEach(t),dRr=r(rae,` class
method.`),rae.forEach(t),cRr=i(Hl),Vx=n(Hl,"P",{});var ZQe=s(Vx);fRr=r(ZQe,"This class cannot be instantiated directly using "),XMe=n(ZQe,"CODE",{});var HNt=s(XMe);mRr=r(HNt,"__init__()"),HNt.forEach(t),gRr=r(ZQe," (throws an error)."),ZQe.forEach(t),hRr=i(Hl),Ot=n(Hl,"DIV",{class:!0});var wA=s(Ot);T(Xx.$$.fragment,wA),pRr=i(wA),zMe=n(wA,"P",{});var UNt=s(zMe);_Rr=r(UNt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),UNt.forEach(t),uRr=i(wA),Ic=n(wA,"P",{});var tae=s(Ic);bRr=r(tae,`Note:
Loading a model from its configuration file does `),WMe=n(tae,"STRONG",{});var JNt=s(WMe);vRr=r(JNt,"not"),JNt.forEach(t),FRr=r(tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),rZ=n(tae,"A",{href:!0});var YNt=s(rZ);TRr=r(YNt,"from_pretrained()"),YNt.forEach(t),MRr=r(tae," to load the model weights."),tae.forEach(t),ERr=i(wA),T(eE.$$.fragment,wA),wA.forEach(t),CRr=i(Hl),qr=n(Hl,"DIV",{class:!0});var Ul=s(qr);T(zx.$$.fragment,Ul),wRr=i(Ul),QMe=n(Ul,"P",{});var KNt=s(QMe);ARr=r(KNt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),KNt.forEach(t),LRr=i(Ul),_n=n(Ul,"P",{});var AA=s(_n);yRr=r(AA,"The model class to instantiate is selected based on the "),HMe=n(AA,"CODE",{});var ZNt=s(HMe);xRr=r(ZNt,"model_type"),ZNt.forEach(t),$Rr=r(AA,` property of the config object (either
passed as an argument or loaded from `),UMe=n(AA,"CODE",{});var eqt=s(UMe);kRr=r(eqt,"pretrained_model_name_or_path"),eqt.forEach(t),SRr=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JMe=n(AA,"CODE",{});var oqt=s(JMe);RRr=r(oqt,"pretrained_model_name_or_path"),oqt.forEach(t),PRr=r(AA,":"),AA.forEach(t),BRr=i(Ul),YMe=n(Ul,"UL",{});var rqt=s(YMe);oE=n(rqt,"LI",{});var LGe=s(oE);KMe=n(LGe,"STRONG",{});var tqt=s(KMe);IRr=r(tqt,"tapas"),tqt.forEach(t),NRr=r(LGe," \u2014 "),tZ=n(LGe,"A",{href:!0});var aqt=s(tZ);qRr=r(aqt,"TFTapasForQuestionAnswering"),aqt.forEach(t),jRr=r(LGe," (TAPAS model)"),LGe.forEach(t),rqt.forEach(t),DRr=i(Ul),T(rE.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),zze=i(f),Nc=n(f,"H2",{class:!0});var eHe=s(Nc);tE=n(eHe,"A",{id:!0,class:!0,href:!0});var nqt=s(tE);ZMe=n(nqt,"SPAN",{});var sqt=s(ZMe);T(Wx.$$.fragment,sqt),sqt.forEach(t),nqt.forEach(t),GRr=i(eHe),e4e=n(eHe,"SPAN",{});var lqt=s(e4e);ORr=r(lqt,"TFAutoModelForTokenClassification"),lqt.forEach(t),eHe.forEach(t),Wze=i(f),fr=n(f,"DIV",{class:!0});var Jl=s(fr);T(Qx.$$.fragment,Jl),VRr=i(Jl),qc=n(Jl,"P",{});var aae=s(qc);XRr=r(aae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),aZ=n(aae,"A",{href:!0});var iqt=s(aZ);zRr=r(iqt,"from_pretrained()"),iqt.forEach(t),WRr=r(aae," class method or the "),nZ=n(aae,"A",{href:!0});var dqt=s(nZ);QRr=r(dqt,"from_config()"),dqt.forEach(t),HRr=r(aae,` class
method.`),aae.forEach(t),URr=i(Jl),Hx=n(Jl,"P",{});var oHe=s(Hx);JRr=r(oHe,"This class cannot be instantiated directly using "),o4e=n(oHe,"CODE",{});var cqt=s(o4e);YRr=r(cqt,"__init__()"),cqt.forEach(t),KRr=r(oHe," (throws an error)."),oHe.forEach(t),ZRr=i(Jl),Vt=n(Jl,"DIV",{class:!0});var LA=s(Vt);T(Ux.$$.fragment,LA),ePr=i(LA),r4e=n(LA,"P",{});var fqt=s(r4e);oPr=r(fqt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),fqt.forEach(t),rPr=i(LA),jc=n(LA,"P",{});var nae=s(jc);tPr=r(nae,`Note:
Loading a model from its configuration file does `),t4e=n(nae,"STRONG",{});var mqt=s(t4e);aPr=r(mqt,"not"),mqt.forEach(t),nPr=r(nae,` load the model weights. It only affects the
model\u2019s configuration. Use `),sZ=n(nae,"A",{href:!0});var gqt=s(sZ);sPr=r(gqt,"from_pretrained()"),gqt.forEach(t),lPr=r(nae," to load the model weights."),nae.forEach(t),iPr=i(LA),T(aE.$$.fragment,LA),LA.forEach(t),dPr=i(Jl),jr=n(Jl,"DIV",{class:!0});var Yl=s(jr);T(Jx.$$.fragment,Yl),cPr=i(Yl),a4e=n(Yl,"P",{});var hqt=s(a4e);fPr=r(hqt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),hqt.forEach(t),mPr=i(Yl),un=n(Yl,"P",{});var yA=s(un);gPr=r(yA,"The model class to instantiate is selected based on the "),n4e=n(yA,"CODE",{});var pqt=s(n4e);hPr=r(pqt,"model_type"),pqt.forEach(t),pPr=r(yA,` property of the config object (either
passed as an argument or loaded from `),s4e=n(yA,"CODE",{});var _qt=s(s4e);_Pr=r(_qt,"pretrained_model_name_or_path"),_qt.forEach(t),uPr=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l4e=n(yA,"CODE",{});var uqt=s(l4e);bPr=r(uqt,"pretrained_model_name_or_path"),uqt.forEach(t),vPr=r(yA,":"),yA.forEach(t),FPr=i(Yl),de=n(Yl,"UL",{});var ge=s(de);nE=n(ge,"LI",{});var yGe=s(nE);i4e=n(yGe,"STRONG",{});var bqt=s(i4e);TPr=r(bqt,"albert"),bqt.forEach(t),MPr=r(yGe," \u2014 "),lZ=n(yGe,"A",{href:!0});var vqt=s(lZ);EPr=r(vqt,"TFAlbertForTokenClassification"),vqt.forEach(t),CPr=r(yGe," (ALBERT model)"),yGe.forEach(t),wPr=i(ge),sE=n(ge,"LI",{});var xGe=s(sE);d4e=n(xGe,"STRONG",{});var Fqt=s(d4e);APr=r(Fqt,"bert"),Fqt.forEach(t),LPr=r(xGe," \u2014 "),iZ=n(xGe,"A",{href:!0});var Tqt=s(iZ);yPr=r(Tqt,"TFBertForTokenClassification"),Tqt.forEach(t),xPr=r(xGe," (BERT model)"),xGe.forEach(t),$Pr=i(ge),lE=n(ge,"LI",{});var $Ge=s(lE);c4e=n($Ge,"STRONG",{});var Mqt=s(c4e);kPr=r(Mqt,"camembert"),Mqt.forEach(t),SPr=r($Ge," \u2014 "),dZ=n($Ge,"A",{href:!0});var Eqt=s(dZ);RPr=r(Eqt,"TFCamembertForTokenClassification"),Eqt.forEach(t),PPr=r($Ge," (CamemBERT model)"),$Ge.forEach(t),BPr=i(ge),iE=n(ge,"LI",{});var kGe=s(iE);f4e=n(kGe,"STRONG",{});var Cqt=s(f4e);IPr=r(Cqt,"convbert"),Cqt.forEach(t),NPr=r(kGe," \u2014 "),cZ=n(kGe,"A",{href:!0});var wqt=s(cZ);qPr=r(wqt,"TFConvBertForTokenClassification"),wqt.forEach(t),jPr=r(kGe," (ConvBERT model)"),kGe.forEach(t),DPr=i(ge),dE=n(ge,"LI",{});var SGe=s(dE);m4e=n(SGe,"STRONG",{});var Aqt=s(m4e);GPr=r(Aqt,"deberta"),Aqt.forEach(t),OPr=r(SGe," \u2014 "),fZ=n(SGe,"A",{href:!0});var Lqt=s(fZ);VPr=r(Lqt,"TFDebertaForTokenClassification"),Lqt.forEach(t),XPr=r(SGe," (DeBERTa model)"),SGe.forEach(t),zPr=i(ge),cE=n(ge,"LI",{});var RGe=s(cE);g4e=n(RGe,"STRONG",{});var yqt=s(g4e);WPr=r(yqt,"deberta-v2"),yqt.forEach(t),QPr=r(RGe," \u2014 "),mZ=n(RGe,"A",{href:!0});var xqt=s(mZ);HPr=r(xqt,"TFDebertaV2ForTokenClassification"),xqt.forEach(t),UPr=r(RGe," (DeBERTa-v2 model)"),RGe.forEach(t),JPr=i(ge),fE=n(ge,"LI",{});var PGe=s(fE);h4e=n(PGe,"STRONG",{});var $qt=s(h4e);YPr=r($qt,"distilbert"),$qt.forEach(t),KPr=r(PGe," \u2014 "),gZ=n(PGe,"A",{href:!0});var kqt=s(gZ);ZPr=r(kqt,"TFDistilBertForTokenClassification"),kqt.forEach(t),eBr=r(PGe," (DistilBERT model)"),PGe.forEach(t),oBr=i(ge),mE=n(ge,"LI",{});var BGe=s(mE);p4e=n(BGe,"STRONG",{});var Sqt=s(p4e);rBr=r(Sqt,"electra"),Sqt.forEach(t),tBr=r(BGe," \u2014 "),hZ=n(BGe,"A",{href:!0});var Rqt=s(hZ);aBr=r(Rqt,"TFElectraForTokenClassification"),Rqt.forEach(t),nBr=r(BGe," (ELECTRA model)"),BGe.forEach(t),sBr=i(ge),gE=n(ge,"LI",{});var IGe=s(gE);_4e=n(IGe,"STRONG",{});var Pqt=s(_4e);lBr=r(Pqt,"flaubert"),Pqt.forEach(t),iBr=r(IGe," \u2014 "),pZ=n(IGe,"A",{href:!0});var Bqt=s(pZ);dBr=r(Bqt,"TFFlaubertForTokenClassification"),Bqt.forEach(t),cBr=r(IGe," (FlauBERT model)"),IGe.forEach(t),fBr=i(ge),hE=n(ge,"LI",{});var NGe=s(hE);u4e=n(NGe,"STRONG",{});var Iqt=s(u4e);mBr=r(Iqt,"funnel"),Iqt.forEach(t),gBr=r(NGe," \u2014 "),_Z=n(NGe,"A",{href:!0});var Nqt=s(_Z);hBr=r(Nqt,"TFFunnelForTokenClassification"),Nqt.forEach(t),pBr=r(NGe," (Funnel Transformer model)"),NGe.forEach(t),_Br=i(ge),pE=n(ge,"LI",{});var qGe=s(pE);b4e=n(qGe,"STRONG",{});var qqt=s(b4e);uBr=r(qqt,"layoutlm"),qqt.forEach(t),bBr=r(qGe," \u2014 "),uZ=n(qGe,"A",{href:!0});var jqt=s(uZ);vBr=r(jqt,"TFLayoutLMForTokenClassification"),jqt.forEach(t),FBr=r(qGe," (LayoutLM model)"),qGe.forEach(t),TBr=i(ge),_E=n(ge,"LI",{});var jGe=s(_E);v4e=n(jGe,"STRONG",{});var Dqt=s(v4e);MBr=r(Dqt,"longformer"),Dqt.forEach(t),EBr=r(jGe," \u2014 "),bZ=n(jGe,"A",{href:!0});var Gqt=s(bZ);CBr=r(Gqt,"TFLongformerForTokenClassification"),Gqt.forEach(t),wBr=r(jGe," (Longformer model)"),jGe.forEach(t),ABr=i(ge),uE=n(ge,"LI",{});var DGe=s(uE);F4e=n(DGe,"STRONG",{});var Oqt=s(F4e);LBr=r(Oqt,"mobilebert"),Oqt.forEach(t),yBr=r(DGe," \u2014 "),vZ=n(DGe,"A",{href:!0});var Vqt=s(vZ);xBr=r(Vqt,"TFMobileBertForTokenClassification"),Vqt.forEach(t),$Br=r(DGe," (MobileBERT model)"),DGe.forEach(t),kBr=i(ge),bE=n(ge,"LI",{});var GGe=s(bE);T4e=n(GGe,"STRONG",{});var Xqt=s(T4e);SBr=r(Xqt,"mpnet"),Xqt.forEach(t),RBr=r(GGe," \u2014 "),FZ=n(GGe,"A",{href:!0});var zqt=s(FZ);PBr=r(zqt,"TFMPNetForTokenClassification"),zqt.forEach(t),BBr=r(GGe," (MPNet model)"),GGe.forEach(t),IBr=i(ge),vE=n(ge,"LI",{});var OGe=s(vE);M4e=n(OGe,"STRONG",{});var Wqt=s(M4e);NBr=r(Wqt,"rembert"),Wqt.forEach(t),qBr=r(OGe," \u2014 "),TZ=n(OGe,"A",{href:!0});var Qqt=s(TZ);jBr=r(Qqt,"TFRemBertForTokenClassification"),Qqt.forEach(t),DBr=r(OGe," (RemBERT model)"),OGe.forEach(t),GBr=i(ge),FE=n(ge,"LI",{});var VGe=s(FE);E4e=n(VGe,"STRONG",{});var Hqt=s(E4e);OBr=r(Hqt,"roberta"),Hqt.forEach(t),VBr=r(VGe," \u2014 "),MZ=n(VGe,"A",{href:!0});var Uqt=s(MZ);XBr=r(Uqt,"TFRobertaForTokenClassification"),Uqt.forEach(t),zBr=r(VGe," (RoBERTa model)"),VGe.forEach(t),WBr=i(ge),TE=n(ge,"LI",{});var XGe=s(TE);C4e=n(XGe,"STRONG",{});var Jqt=s(C4e);QBr=r(Jqt,"roformer"),Jqt.forEach(t),HBr=r(XGe," \u2014 "),EZ=n(XGe,"A",{href:!0});var Yqt=s(EZ);UBr=r(Yqt,"TFRoFormerForTokenClassification"),Yqt.forEach(t),JBr=r(XGe," (RoFormer model)"),XGe.forEach(t),YBr=i(ge),ME=n(ge,"LI",{});var zGe=s(ME);w4e=n(zGe,"STRONG",{});var Kqt=s(w4e);KBr=r(Kqt,"xlm"),Kqt.forEach(t),ZBr=r(zGe," \u2014 "),CZ=n(zGe,"A",{href:!0});var Zqt=s(CZ);eIr=r(Zqt,"TFXLMForTokenClassification"),Zqt.forEach(t),oIr=r(zGe," (XLM model)"),zGe.forEach(t),rIr=i(ge),EE=n(ge,"LI",{});var WGe=s(EE);A4e=n(WGe,"STRONG",{});var ejt=s(A4e);tIr=r(ejt,"xlm-roberta"),ejt.forEach(t),aIr=r(WGe," \u2014 "),wZ=n(WGe,"A",{href:!0});var ojt=s(wZ);nIr=r(ojt,"TFXLMRobertaForTokenClassification"),ojt.forEach(t),sIr=r(WGe," (XLM-RoBERTa model)"),WGe.forEach(t),lIr=i(ge),CE=n(ge,"LI",{});var QGe=s(CE);L4e=n(QGe,"STRONG",{});var rjt=s(L4e);iIr=r(rjt,"xlnet"),rjt.forEach(t),dIr=r(QGe," \u2014 "),AZ=n(QGe,"A",{href:!0});var tjt=s(AZ);cIr=r(tjt,"TFXLNetForTokenClassification"),tjt.forEach(t),fIr=r(QGe," (XLNet model)"),QGe.forEach(t),ge.forEach(t),mIr=i(Yl),T(wE.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),Qze=i(f),Dc=n(f,"H2",{class:!0});var rHe=s(Dc);AE=n(rHe,"A",{id:!0,class:!0,href:!0});var ajt=s(AE);y4e=n(ajt,"SPAN",{});var njt=s(y4e);T(Yx.$$.fragment,njt),njt.forEach(t),ajt.forEach(t),gIr=i(rHe),x4e=n(rHe,"SPAN",{});var sjt=s(x4e);hIr=r(sjt,"TFAutoModelForQuestionAnswering"),sjt.forEach(t),rHe.forEach(t),Hze=i(f),mr=n(f,"DIV",{class:!0});var Kl=s(mr);T(Kx.$$.fragment,Kl),pIr=i(Kl),Gc=n(Kl,"P",{});var sae=s(Gc);_Ir=r(sae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),LZ=n(sae,"A",{href:!0});var ljt=s(LZ);uIr=r(ljt,"from_pretrained()"),ljt.forEach(t),bIr=r(sae," class method or the "),yZ=n(sae,"A",{href:!0});var ijt=s(yZ);vIr=r(ijt,"from_config()"),ijt.forEach(t),FIr=r(sae,` class
method.`),sae.forEach(t),TIr=i(Kl),Zx=n(Kl,"P",{});var tHe=s(Zx);MIr=r(tHe,"This class cannot be instantiated directly using "),$4e=n(tHe,"CODE",{});var djt=s($4e);EIr=r(djt,"__init__()"),djt.forEach(t),CIr=r(tHe," (throws an error)."),tHe.forEach(t),wIr=i(Kl),Xt=n(Kl,"DIV",{class:!0});var xA=s(Xt);T(e$.$$.fragment,xA),AIr=i(xA),k4e=n(xA,"P",{});var cjt=s(k4e);LIr=r(cjt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),cjt.forEach(t),yIr=i(xA),Oc=n(xA,"P",{});var lae=s(Oc);xIr=r(lae,`Note:
Loading a model from its configuration file does `),S4e=n(lae,"STRONG",{});var fjt=s(S4e);$Ir=r(fjt,"not"),fjt.forEach(t),kIr=r(lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),xZ=n(lae,"A",{href:!0});var mjt=s(xZ);SIr=r(mjt,"from_pretrained()"),mjt.forEach(t),RIr=r(lae," to load the model weights."),lae.forEach(t),PIr=i(xA),T(LE.$$.fragment,xA),xA.forEach(t),BIr=i(Kl),Dr=n(Kl,"DIV",{class:!0});var Zl=s(Dr);T(o$.$$.fragment,Zl),IIr=i(Zl),R4e=n(Zl,"P",{});var gjt=s(R4e);NIr=r(gjt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),gjt.forEach(t),qIr=i(Zl),bn=n(Zl,"P",{});var $A=s(bn);jIr=r($A,"The model class to instantiate is selected based on the "),P4e=n($A,"CODE",{});var hjt=s(P4e);DIr=r(hjt,"model_type"),hjt.forEach(t),GIr=r($A,` property of the config object (either
passed as an argument or loaded from `),B4e=n($A,"CODE",{});var pjt=s(B4e);OIr=r(pjt,"pretrained_model_name_or_path"),pjt.forEach(t),VIr=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I4e=n($A,"CODE",{});var _jt=s(I4e);XIr=r(_jt,"pretrained_model_name_or_path"),_jt.forEach(t),zIr=r($A,":"),$A.forEach(t),WIr=i(Zl),ce=n(Zl,"UL",{});var he=s(ce);yE=n(he,"LI",{});var HGe=s(yE);N4e=n(HGe,"STRONG",{});var ujt=s(N4e);QIr=r(ujt,"albert"),ujt.forEach(t),HIr=r(HGe," \u2014 "),$Z=n(HGe,"A",{href:!0});var bjt=s($Z);UIr=r(bjt,"TFAlbertForQuestionAnswering"),bjt.forEach(t),JIr=r(HGe," (ALBERT model)"),HGe.forEach(t),YIr=i(he),xE=n(he,"LI",{});var UGe=s(xE);q4e=n(UGe,"STRONG",{});var vjt=s(q4e);KIr=r(vjt,"bert"),vjt.forEach(t),ZIr=r(UGe," \u2014 "),kZ=n(UGe,"A",{href:!0});var Fjt=s(kZ);eNr=r(Fjt,"TFBertForQuestionAnswering"),Fjt.forEach(t),oNr=r(UGe," (BERT model)"),UGe.forEach(t),rNr=i(he),$E=n(he,"LI",{});var JGe=s($E);j4e=n(JGe,"STRONG",{});var Tjt=s(j4e);tNr=r(Tjt,"camembert"),Tjt.forEach(t),aNr=r(JGe," \u2014 "),SZ=n(JGe,"A",{href:!0});var Mjt=s(SZ);nNr=r(Mjt,"TFCamembertForQuestionAnswering"),Mjt.forEach(t),sNr=r(JGe," (CamemBERT model)"),JGe.forEach(t),lNr=i(he),kE=n(he,"LI",{});var YGe=s(kE);D4e=n(YGe,"STRONG",{});var Ejt=s(D4e);iNr=r(Ejt,"convbert"),Ejt.forEach(t),dNr=r(YGe," \u2014 "),RZ=n(YGe,"A",{href:!0});var Cjt=s(RZ);cNr=r(Cjt,"TFConvBertForQuestionAnswering"),Cjt.forEach(t),fNr=r(YGe," (ConvBERT model)"),YGe.forEach(t),mNr=i(he),SE=n(he,"LI",{});var KGe=s(SE);G4e=n(KGe,"STRONG",{});var wjt=s(G4e);gNr=r(wjt,"deberta"),wjt.forEach(t),hNr=r(KGe," \u2014 "),PZ=n(KGe,"A",{href:!0});var Ajt=s(PZ);pNr=r(Ajt,"TFDebertaForQuestionAnswering"),Ajt.forEach(t),_Nr=r(KGe," (DeBERTa model)"),KGe.forEach(t),uNr=i(he),RE=n(he,"LI",{});var ZGe=s(RE);O4e=n(ZGe,"STRONG",{});var Ljt=s(O4e);bNr=r(Ljt,"deberta-v2"),Ljt.forEach(t),vNr=r(ZGe," \u2014 "),BZ=n(ZGe,"A",{href:!0});var yjt=s(BZ);FNr=r(yjt,"TFDebertaV2ForQuestionAnswering"),yjt.forEach(t),TNr=r(ZGe," (DeBERTa-v2 model)"),ZGe.forEach(t),MNr=i(he),PE=n(he,"LI",{});var eOe=s(PE);V4e=n(eOe,"STRONG",{});var xjt=s(V4e);ENr=r(xjt,"distilbert"),xjt.forEach(t),CNr=r(eOe," \u2014 "),IZ=n(eOe,"A",{href:!0});var $jt=s(IZ);wNr=r($jt,"TFDistilBertForQuestionAnswering"),$jt.forEach(t),ANr=r(eOe," (DistilBERT model)"),eOe.forEach(t),LNr=i(he),BE=n(he,"LI",{});var oOe=s(BE);X4e=n(oOe,"STRONG",{});var kjt=s(X4e);yNr=r(kjt,"electra"),kjt.forEach(t),xNr=r(oOe," \u2014 "),NZ=n(oOe,"A",{href:!0});var Sjt=s(NZ);$Nr=r(Sjt,"TFElectraForQuestionAnswering"),Sjt.forEach(t),kNr=r(oOe," (ELECTRA model)"),oOe.forEach(t),SNr=i(he),IE=n(he,"LI",{});var rOe=s(IE);z4e=n(rOe,"STRONG",{});var Rjt=s(z4e);RNr=r(Rjt,"flaubert"),Rjt.forEach(t),PNr=r(rOe," \u2014 "),qZ=n(rOe,"A",{href:!0});var Pjt=s(qZ);BNr=r(Pjt,"TFFlaubertForQuestionAnsweringSimple"),Pjt.forEach(t),INr=r(rOe," (FlauBERT model)"),rOe.forEach(t),NNr=i(he),NE=n(he,"LI",{});var tOe=s(NE);W4e=n(tOe,"STRONG",{});var Bjt=s(W4e);qNr=r(Bjt,"funnel"),Bjt.forEach(t),jNr=r(tOe," \u2014 "),jZ=n(tOe,"A",{href:!0});var Ijt=s(jZ);DNr=r(Ijt,"TFFunnelForQuestionAnswering"),Ijt.forEach(t),GNr=r(tOe," (Funnel Transformer model)"),tOe.forEach(t),ONr=i(he),qE=n(he,"LI",{});var aOe=s(qE);Q4e=n(aOe,"STRONG",{});var Njt=s(Q4e);VNr=r(Njt,"gptj"),Njt.forEach(t),XNr=r(aOe," \u2014 "),DZ=n(aOe,"A",{href:!0});var qjt=s(DZ);zNr=r(qjt,"TFGPTJForQuestionAnswering"),qjt.forEach(t),WNr=r(aOe," (GPT-J model)"),aOe.forEach(t),QNr=i(he),jE=n(he,"LI",{});var nOe=s(jE);H4e=n(nOe,"STRONG",{});var jjt=s(H4e);HNr=r(jjt,"longformer"),jjt.forEach(t),UNr=r(nOe," \u2014 "),GZ=n(nOe,"A",{href:!0});var Djt=s(GZ);JNr=r(Djt,"TFLongformerForQuestionAnswering"),Djt.forEach(t),YNr=r(nOe," (Longformer model)"),nOe.forEach(t),KNr=i(he),DE=n(he,"LI",{});var sOe=s(DE);U4e=n(sOe,"STRONG",{});var Gjt=s(U4e);ZNr=r(Gjt,"mobilebert"),Gjt.forEach(t),eqr=r(sOe," \u2014 "),OZ=n(sOe,"A",{href:!0});var Ojt=s(OZ);oqr=r(Ojt,"TFMobileBertForQuestionAnswering"),Ojt.forEach(t),rqr=r(sOe," (MobileBERT model)"),sOe.forEach(t),tqr=i(he),GE=n(he,"LI",{});var lOe=s(GE);J4e=n(lOe,"STRONG",{});var Vjt=s(J4e);aqr=r(Vjt,"mpnet"),Vjt.forEach(t),nqr=r(lOe," \u2014 "),VZ=n(lOe,"A",{href:!0});var Xjt=s(VZ);sqr=r(Xjt,"TFMPNetForQuestionAnswering"),Xjt.forEach(t),lqr=r(lOe," (MPNet model)"),lOe.forEach(t),iqr=i(he),OE=n(he,"LI",{});var iOe=s(OE);Y4e=n(iOe,"STRONG",{});var zjt=s(Y4e);dqr=r(zjt,"rembert"),zjt.forEach(t),cqr=r(iOe," \u2014 "),XZ=n(iOe,"A",{href:!0});var Wjt=s(XZ);fqr=r(Wjt,"TFRemBertForQuestionAnswering"),Wjt.forEach(t),mqr=r(iOe," (RemBERT model)"),iOe.forEach(t),gqr=i(he),VE=n(he,"LI",{});var dOe=s(VE);K4e=n(dOe,"STRONG",{});var Qjt=s(K4e);hqr=r(Qjt,"roberta"),Qjt.forEach(t),pqr=r(dOe," \u2014 "),zZ=n(dOe,"A",{href:!0});var Hjt=s(zZ);_qr=r(Hjt,"TFRobertaForQuestionAnswering"),Hjt.forEach(t),uqr=r(dOe," (RoBERTa model)"),dOe.forEach(t),bqr=i(he),XE=n(he,"LI",{});var cOe=s(XE);Z4e=n(cOe,"STRONG",{});var Ujt=s(Z4e);vqr=r(Ujt,"roformer"),Ujt.forEach(t),Fqr=r(cOe," \u2014 "),WZ=n(cOe,"A",{href:!0});var Jjt=s(WZ);Tqr=r(Jjt,"TFRoFormerForQuestionAnswering"),Jjt.forEach(t),Mqr=r(cOe," (RoFormer model)"),cOe.forEach(t),Eqr=i(he),zE=n(he,"LI",{});var fOe=s(zE);eEe=n(fOe,"STRONG",{});var Yjt=s(eEe);Cqr=r(Yjt,"xlm"),Yjt.forEach(t),wqr=r(fOe," \u2014 "),QZ=n(fOe,"A",{href:!0});var Kjt=s(QZ);Aqr=r(Kjt,"TFXLMForQuestionAnsweringSimple"),Kjt.forEach(t),Lqr=r(fOe," (XLM model)"),fOe.forEach(t),yqr=i(he),WE=n(he,"LI",{});var mOe=s(WE);oEe=n(mOe,"STRONG",{});var Zjt=s(oEe);xqr=r(Zjt,"xlm-roberta"),Zjt.forEach(t),$qr=r(mOe," \u2014 "),HZ=n(mOe,"A",{href:!0});var eDt=s(HZ);kqr=r(eDt,"TFXLMRobertaForQuestionAnswering"),eDt.forEach(t),Sqr=r(mOe," (XLM-RoBERTa model)"),mOe.forEach(t),Rqr=i(he),QE=n(he,"LI",{});var gOe=s(QE);rEe=n(gOe,"STRONG",{});var oDt=s(rEe);Pqr=r(oDt,"xlnet"),oDt.forEach(t),Bqr=r(gOe," \u2014 "),UZ=n(gOe,"A",{href:!0});var rDt=s(UZ);Iqr=r(rDt,"TFXLNetForQuestionAnsweringSimple"),rDt.forEach(t),Nqr=r(gOe," (XLNet model)"),gOe.forEach(t),he.forEach(t),qqr=i(Zl),T(HE.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),Uze=i(f),Vc=n(f,"H2",{class:!0});var aHe=s(Vc);UE=n(aHe,"A",{id:!0,class:!0,href:!0});var tDt=s(UE);tEe=n(tDt,"SPAN",{});var aDt=s(tEe);T(r$.$$.fragment,aDt),aDt.forEach(t),tDt.forEach(t),jqr=i(aHe),aEe=n(aHe,"SPAN",{});var nDt=s(aEe);Dqr=r(nDt,"TFAutoModelForVision2Seq"),nDt.forEach(t),aHe.forEach(t),Jze=i(f),gr=n(f,"DIV",{class:!0});var ei=s(gr);T(t$.$$.fragment,ei),Gqr=i(ei),Xc=n(ei,"P",{});var iae=s(Xc);Oqr=r(iae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),JZ=n(iae,"A",{href:!0});var sDt=s(JZ);Vqr=r(sDt,"from_pretrained()"),sDt.forEach(t),Xqr=r(iae," class method or the "),YZ=n(iae,"A",{href:!0});var lDt=s(YZ);zqr=r(lDt,"from_config()"),lDt.forEach(t),Wqr=r(iae,` class
method.`),iae.forEach(t),Qqr=i(ei),a$=n(ei,"P",{});var nHe=s(a$);Hqr=r(nHe,"This class cannot be instantiated directly using "),nEe=n(nHe,"CODE",{});var iDt=s(nEe);Uqr=r(iDt,"__init__()"),iDt.forEach(t),Jqr=r(nHe," (throws an error)."),nHe.forEach(t),Yqr=i(ei),zt=n(ei,"DIV",{class:!0});var kA=s(zt);T(n$.$$.fragment,kA),Kqr=i(kA),sEe=n(kA,"P",{});var dDt=s(sEe);Zqr=r(dDt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),dDt.forEach(t),ejr=i(kA),zc=n(kA,"P",{});var dae=s(zc);ojr=r(dae,`Note:
Loading a model from its configuration file does `),lEe=n(dae,"STRONG",{});var cDt=s(lEe);rjr=r(cDt,"not"),cDt.forEach(t),tjr=r(dae,` load the model weights. It only affects the
model\u2019s configuration. Use `),KZ=n(dae,"A",{href:!0});var fDt=s(KZ);ajr=r(fDt,"from_pretrained()"),fDt.forEach(t),njr=r(dae," to load the model weights."),dae.forEach(t),sjr=i(kA),T(JE.$$.fragment,kA),kA.forEach(t),ljr=i(ei),Gr=n(ei,"DIV",{class:!0});var oi=s(Gr);T(s$.$$.fragment,oi),ijr=i(oi),iEe=n(oi,"P",{});var mDt=s(iEe);djr=r(mDt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),mDt.forEach(t),cjr=i(oi),vn=n(oi,"P",{});var SA=s(vn);fjr=r(SA,"The model class to instantiate is selected based on the "),dEe=n(SA,"CODE",{});var gDt=s(dEe);mjr=r(gDt,"model_type"),gDt.forEach(t),gjr=r(SA,` property of the config object (either
passed as an argument or loaded from `),cEe=n(SA,"CODE",{});var hDt=s(cEe);hjr=r(hDt,"pretrained_model_name_or_path"),hDt.forEach(t),pjr=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fEe=n(SA,"CODE",{});var pDt=s(fEe);_jr=r(pDt,"pretrained_model_name_or_path"),pDt.forEach(t),ujr=r(SA,":"),SA.forEach(t),bjr=i(oi),mEe=n(oi,"UL",{});var _Dt=s(mEe);YE=n(_Dt,"LI",{});var hOe=s(YE);gEe=n(hOe,"STRONG",{});var uDt=s(gEe);vjr=r(uDt,"vision-encoder-decoder"),uDt.forEach(t),Fjr=r(hOe," \u2014 "),ZZ=n(hOe,"A",{href:!0});var bDt=s(ZZ);Tjr=r(bDt,"TFVisionEncoderDecoderModel"),bDt.forEach(t),Mjr=r(hOe," (Vision Encoder decoder model)"),hOe.forEach(t),_Dt.forEach(t),Ejr=i(oi),T(KE.$$.fragment,oi),oi.forEach(t),ei.forEach(t),Yze=i(f),Wc=n(f,"H2",{class:!0});var sHe=s(Wc);ZE=n(sHe,"A",{id:!0,class:!0,href:!0});var vDt=s(ZE);hEe=n(vDt,"SPAN",{});var FDt=s(hEe);T(l$.$$.fragment,FDt),FDt.forEach(t),vDt.forEach(t),Cjr=i(sHe),pEe=n(sHe,"SPAN",{});var TDt=s(pEe);wjr=r(TDt,"TFAutoModelForSpeechSeq2Seq"),TDt.forEach(t),sHe.forEach(t),Kze=i(f),hr=n(f,"DIV",{class:!0});var ri=s(hr);T(i$.$$.fragment,ri),Ajr=i(ri),Qc=n(ri,"P",{});var cae=s(Qc);Ljr=r(cae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),eee=n(cae,"A",{href:!0});var MDt=s(eee);yjr=r(MDt,"from_pretrained()"),MDt.forEach(t),xjr=r(cae," class method or the "),oee=n(cae,"A",{href:!0});var EDt=s(oee);$jr=r(EDt,"from_config()"),EDt.forEach(t),kjr=r(cae,` class
method.`),cae.forEach(t),Sjr=i(ri),d$=n(ri,"P",{});var lHe=s(d$);Rjr=r(lHe,"This class cannot be instantiated directly using "),_Ee=n(lHe,"CODE",{});var CDt=s(_Ee);Pjr=r(CDt,"__init__()"),CDt.forEach(t),Bjr=r(lHe," (throws an error)."),lHe.forEach(t),Ijr=i(ri),Wt=n(ri,"DIV",{class:!0});var RA=s(Wt);T(c$.$$.fragment,RA),Njr=i(RA),uEe=n(RA,"P",{});var wDt=s(uEe);qjr=r(wDt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),wDt.forEach(t),jjr=i(RA),Hc=n(RA,"P",{});var fae=s(Hc);Djr=r(fae,`Note:
Loading a model from its configuration file does `),bEe=n(fae,"STRONG",{});var ADt=s(bEe);Gjr=r(ADt,"not"),ADt.forEach(t),Ojr=r(fae,` load the model weights. It only affects the
model\u2019s configuration. Use `),ree=n(fae,"A",{href:!0});var LDt=s(ree);Vjr=r(LDt,"from_pretrained()"),LDt.forEach(t),Xjr=r(fae," to load the model weights."),fae.forEach(t),zjr=i(RA),T(eC.$$.fragment,RA),RA.forEach(t),Wjr=i(ri),Or=n(ri,"DIV",{class:!0});var ti=s(Or);T(f$.$$.fragment,ti),Qjr=i(ti),vEe=n(ti,"P",{});var yDt=s(vEe);Hjr=r(yDt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),yDt.forEach(t),Ujr=i(ti),Fn=n(ti,"P",{});var PA=s(Fn);Jjr=r(PA,"The model class to instantiate is selected based on the "),FEe=n(PA,"CODE",{});var xDt=s(FEe);Yjr=r(xDt,"model_type"),xDt.forEach(t),Kjr=r(PA,` property of the config object (either
passed as an argument or loaded from `),TEe=n(PA,"CODE",{});var $Dt=s(TEe);Zjr=r($Dt,"pretrained_model_name_or_path"),$Dt.forEach(t),eDr=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MEe=n(PA,"CODE",{});var kDt=s(MEe);oDr=r(kDt,"pretrained_model_name_or_path"),kDt.forEach(t),rDr=r(PA,":"),PA.forEach(t),tDr=i(ti),EEe=n(ti,"UL",{});var SDt=s(EEe);oC=n(SDt,"LI",{});var pOe=s(oC);CEe=n(pOe,"STRONG",{});var RDt=s(CEe);aDr=r(RDt,"speech_to_text"),RDt.forEach(t),nDr=r(pOe," \u2014 "),tee=n(pOe,"A",{href:!0});var PDt=s(tee);sDr=r(PDt,"TFSpeech2TextForConditionalGeneration"),PDt.forEach(t),lDr=r(pOe," (Speech2Text model)"),pOe.forEach(t),SDt.forEach(t),iDr=i(ti),T(rC.$$.fragment,ti),ti.forEach(t),ri.forEach(t),Zze=i(f),Uc=n(f,"H2",{class:!0});var iHe=s(Uc);tC=n(iHe,"A",{id:!0,class:!0,href:!0});var BDt=s(tC);wEe=n(BDt,"SPAN",{});var IDt=s(wEe);T(m$.$$.fragment,IDt),IDt.forEach(t),BDt.forEach(t),dDr=i(iHe),AEe=n(iHe,"SPAN",{});var NDt=s(AEe);cDr=r(NDt,"FlaxAutoModel"),NDt.forEach(t),iHe.forEach(t),eWe=i(f),pr=n(f,"DIV",{class:!0});var ai=s(pr);T(g$.$$.fragment,ai),fDr=i(ai),Jc=n(ai,"P",{});var mae=s(Jc);mDr=r(mae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),aee=n(mae,"A",{href:!0});var qDt=s(aee);gDr=r(qDt,"from_pretrained()"),qDt.forEach(t),hDr=r(mae," class method or the "),nee=n(mae,"A",{href:!0});var jDt=s(nee);pDr=r(jDt,"from_config()"),jDt.forEach(t),_Dr=r(mae,` class
method.`),mae.forEach(t),uDr=i(ai),h$=n(ai,"P",{});var dHe=s(h$);bDr=r(dHe,"This class cannot be instantiated directly using "),LEe=n(dHe,"CODE",{});var DDt=s(LEe);vDr=r(DDt,"__init__()"),DDt.forEach(t),FDr=r(dHe," (throws an error)."),dHe.forEach(t),TDr=i(ai),Qt=n(ai,"DIV",{class:!0});var BA=s(Qt);T(p$.$$.fragment,BA),MDr=i(BA),yEe=n(BA,"P",{});var GDt=s(yEe);EDr=r(GDt,"Instantiates one of the base model classes of the library from a configuration."),GDt.forEach(t),CDr=i(BA),Yc=n(BA,"P",{});var gae=s(Yc);wDr=r(gae,`Note:
Loading a model from its configuration file does `),xEe=n(gae,"STRONG",{});var ODt=s(xEe);ADr=r(ODt,"not"),ODt.forEach(t),LDr=r(gae,` load the model weights. It only affects the
model\u2019s configuration. Use `),see=n(gae,"A",{href:!0});var VDt=s(see);yDr=r(VDt,"from_pretrained()"),VDt.forEach(t),xDr=r(gae," to load the model weights."),gae.forEach(t),$Dr=i(BA),T(aC.$$.fragment,BA),BA.forEach(t),kDr=i(ai),Vr=n(ai,"DIV",{class:!0});var ni=s(Vr);T(_$.$$.fragment,ni),SDr=i(ni),$Ee=n(ni,"P",{});var XDt=s($Ee);RDr=r(XDt,"Instantiate one of the base model classes of the library from a pretrained model."),XDt.forEach(t),PDr=i(ni),Tn=n(ni,"P",{});var IA=s(Tn);BDr=r(IA,"The model class to instantiate is selected based on the "),kEe=n(IA,"CODE",{});var zDt=s(kEe);IDr=r(zDt,"model_type"),zDt.forEach(t),NDr=r(IA,` property of the config object (either
passed as an argument or loaded from `),SEe=n(IA,"CODE",{});var WDt=s(SEe);qDr=r(WDt,"pretrained_model_name_or_path"),WDt.forEach(t),jDr=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),REe=n(IA,"CODE",{});var QDt=s(REe);DDr=r(QDt,"pretrained_model_name_or_path"),QDt.forEach(t),GDr=r(IA,":"),IA.forEach(t),ODr=i(ni),oe=n(ni,"UL",{});var ae=s(oe);nC=n(ae,"LI",{});var _Oe=s(nC);PEe=n(_Oe,"STRONG",{});var HDt=s(PEe);VDr=r(HDt,"albert"),HDt.forEach(t),XDr=r(_Oe," \u2014 "),lee=n(_Oe,"A",{href:!0});var UDt=s(lee);zDr=r(UDt,"FlaxAlbertModel"),UDt.forEach(t),WDr=r(_Oe," (ALBERT model)"),_Oe.forEach(t),QDr=i(ae),sC=n(ae,"LI",{});var uOe=s(sC);BEe=n(uOe,"STRONG",{});var JDt=s(BEe);HDr=r(JDt,"bart"),JDt.forEach(t),UDr=r(uOe," \u2014 "),iee=n(uOe,"A",{href:!0});var YDt=s(iee);JDr=r(YDt,"FlaxBartModel"),YDt.forEach(t),YDr=r(uOe," (BART model)"),uOe.forEach(t),KDr=i(ae),lC=n(ae,"LI",{});var bOe=s(lC);IEe=n(bOe,"STRONG",{});var KDt=s(IEe);ZDr=r(KDt,"beit"),KDt.forEach(t),eGr=r(bOe," \u2014 "),dee=n(bOe,"A",{href:!0});var ZDt=s(dee);oGr=r(ZDt,"FlaxBeitModel"),ZDt.forEach(t),rGr=r(bOe," (BEiT model)"),bOe.forEach(t),tGr=i(ae),iC=n(ae,"LI",{});var vOe=s(iC);NEe=n(vOe,"STRONG",{});var eGt=s(NEe);aGr=r(eGt,"bert"),eGt.forEach(t),nGr=r(vOe," \u2014 "),cee=n(vOe,"A",{href:!0});var oGt=s(cee);sGr=r(oGt,"FlaxBertModel"),oGt.forEach(t),lGr=r(vOe," (BERT model)"),vOe.forEach(t),iGr=i(ae),dC=n(ae,"LI",{});var FOe=s(dC);qEe=n(FOe,"STRONG",{});var rGt=s(qEe);dGr=r(rGt,"big_bird"),rGt.forEach(t),cGr=r(FOe," \u2014 "),fee=n(FOe,"A",{href:!0});var tGt=s(fee);fGr=r(tGt,"FlaxBigBirdModel"),tGt.forEach(t),mGr=r(FOe," (BigBird model)"),FOe.forEach(t),gGr=i(ae),cC=n(ae,"LI",{});var TOe=s(cC);jEe=n(TOe,"STRONG",{});var aGt=s(jEe);hGr=r(aGt,"blenderbot"),aGt.forEach(t),pGr=r(TOe," \u2014 "),mee=n(TOe,"A",{href:!0});var nGt=s(mee);_Gr=r(nGt,"FlaxBlenderbotModel"),nGt.forEach(t),uGr=r(TOe," (Blenderbot model)"),TOe.forEach(t),bGr=i(ae),fC=n(ae,"LI",{});var MOe=s(fC);DEe=n(MOe,"STRONG",{});var sGt=s(DEe);vGr=r(sGt,"blenderbot-small"),sGt.forEach(t),FGr=r(MOe," \u2014 "),gee=n(MOe,"A",{href:!0});var lGt=s(gee);TGr=r(lGt,"FlaxBlenderbotSmallModel"),lGt.forEach(t),MGr=r(MOe," (BlenderbotSmall model)"),MOe.forEach(t),EGr=i(ae),mC=n(ae,"LI",{});var EOe=s(mC);GEe=n(EOe,"STRONG",{});var iGt=s(GEe);CGr=r(iGt,"clip"),iGt.forEach(t),wGr=r(EOe," \u2014 "),hee=n(EOe,"A",{href:!0});var dGt=s(hee);AGr=r(dGt,"FlaxCLIPModel"),dGt.forEach(t),LGr=r(EOe," (CLIP model)"),EOe.forEach(t),yGr=i(ae),gC=n(ae,"LI",{});var COe=s(gC);OEe=n(COe,"STRONG",{});var cGt=s(OEe);xGr=r(cGt,"distilbert"),cGt.forEach(t),$Gr=r(COe," \u2014 "),pee=n(COe,"A",{href:!0});var fGt=s(pee);kGr=r(fGt,"FlaxDistilBertModel"),fGt.forEach(t),SGr=r(COe," (DistilBERT model)"),COe.forEach(t),RGr=i(ae),hC=n(ae,"LI",{});var wOe=s(hC);VEe=n(wOe,"STRONG",{});var mGt=s(VEe);PGr=r(mGt,"electra"),mGt.forEach(t),BGr=r(wOe," \u2014 "),_ee=n(wOe,"A",{href:!0});var gGt=s(_ee);IGr=r(gGt,"FlaxElectraModel"),gGt.forEach(t),NGr=r(wOe," (ELECTRA model)"),wOe.forEach(t),qGr=i(ae),pC=n(ae,"LI",{});var AOe=s(pC);XEe=n(AOe,"STRONG",{});var hGt=s(XEe);jGr=r(hGt,"gpt2"),hGt.forEach(t),DGr=r(AOe," \u2014 "),uee=n(AOe,"A",{href:!0});var pGt=s(uee);GGr=r(pGt,"FlaxGPT2Model"),pGt.forEach(t),OGr=r(AOe," (OpenAI GPT-2 model)"),AOe.forEach(t),VGr=i(ae),_C=n(ae,"LI",{});var LOe=s(_C);zEe=n(LOe,"STRONG",{});var _Gt=s(zEe);XGr=r(_Gt,"gpt_neo"),_Gt.forEach(t),zGr=r(LOe," \u2014 "),bee=n(LOe,"A",{href:!0});var uGt=s(bee);WGr=r(uGt,"FlaxGPTNeoModel"),uGt.forEach(t),QGr=r(LOe," (GPT Neo model)"),LOe.forEach(t),HGr=i(ae),uC=n(ae,"LI",{});var yOe=s(uC);WEe=n(yOe,"STRONG",{});var bGt=s(WEe);UGr=r(bGt,"gptj"),bGt.forEach(t),JGr=r(yOe," \u2014 "),vee=n(yOe,"A",{href:!0});var vGt=s(vee);YGr=r(vGt,"FlaxGPTJModel"),vGt.forEach(t),KGr=r(yOe," (GPT-J model)"),yOe.forEach(t),ZGr=i(ae),bC=n(ae,"LI",{});var xOe=s(bC);QEe=n(xOe,"STRONG",{});var FGt=s(QEe);eOr=r(FGt,"longt5"),FGt.forEach(t),oOr=r(xOe," \u2014 "),Fee=n(xOe,"A",{href:!0});var TGt=s(Fee);rOr=r(TGt,"FlaxLongT5Model"),TGt.forEach(t),tOr=r(xOe," (LongT5 model)"),xOe.forEach(t),aOr=i(ae),vC=n(ae,"LI",{});var $Oe=s(vC);HEe=n($Oe,"STRONG",{});var MGt=s(HEe);nOr=r(MGt,"marian"),MGt.forEach(t),sOr=r($Oe," \u2014 "),Tee=n($Oe,"A",{href:!0});var EGt=s(Tee);lOr=r(EGt,"FlaxMarianModel"),EGt.forEach(t),iOr=r($Oe," (Marian model)"),$Oe.forEach(t),dOr=i(ae),FC=n(ae,"LI",{});var kOe=s(FC);UEe=n(kOe,"STRONG",{});var CGt=s(UEe);cOr=r(CGt,"mbart"),CGt.forEach(t),fOr=r(kOe," \u2014 "),Mee=n(kOe,"A",{href:!0});var wGt=s(Mee);mOr=r(wGt,"FlaxMBartModel"),wGt.forEach(t),gOr=r(kOe," (mBART model)"),kOe.forEach(t),hOr=i(ae),TC=n(ae,"LI",{});var SOe=s(TC);JEe=n(SOe,"STRONG",{});var AGt=s(JEe);pOr=r(AGt,"mt5"),AGt.forEach(t),_Or=r(SOe," \u2014 "),Eee=n(SOe,"A",{href:!0});var LGt=s(Eee);uOr=r(LGt,"FlaxMT5Model"),LGt.forEach(t),bOr=r(SOe," (MT5 model)"),SOe.forEach(t),vOr=i(ae),MC=n(ae,"LI",{});var ROe=s(MC);YEe=n(ROe,"STRONG",{});var yGt=s(YEe);FOr=r(yGt,"opt"),yGt.forEach(t),TOr=r(ROe," \u2014 "),Cee=n(ROe,"A",{href:!0});var xGt=s(Cee);MOr=r(xGt,"FlaxOPTModel"),xGt.forEach(t),EOr=r(ROe," (OPT model)"),ROe.forEach(t),COr=i(ae),EC=n(ae,"LI",{});var POe=s(EC);KEe=n(POe,"STRONG",{});var $Gt=s(KEe);wOr=r($Gt,"pegasus"),$Gt.forEach(t),AOr=r(POe," \u2014 "),wee=n(POe,"A",{href:!0});var kGt=s(wee);LOr=r(kGt,"FlaxPegasusModel"),kGt.forEach(t),yOr=r(POe," (Pegasus model)"),POe.forEach(t),xOr=i(ae),CC=n(ae,"LI",{});var BOe=s(CC);ZEe=n(BOe,"STRONG",{});var SGt=s(ZEe);$Or=r(SGt,"roberta"),SGt.forEach(t),kOr=r(BOe," \u2014 "),Aee=n(BOe,"A",{href:!0});var RGt=s(Aee);SOr=r(RGt,"FlaxRobertaModel"),RGt.forEach(t),ROr=r(BOe," (RoBERTa model)"),BOe.forEach(t),POr=i(ae),wC=n(ae,"LI",{});var IOe=s(wC);eCe=n(IOe,"STRONG",{});var PGt=s(eCe);BOr=r(PGt,"roformer"),PGt.forEach(t),IOr=r(IOe," \u2014 "),Lee=n(IOe,"A",{href:!0});var BGt=s(Lee);NOr=r(BGt,"FlaxRoFormerModel"),BGt.forEach(t),qOr=r(IOe," (RoFormer model)"),IOe.forEach(t),jOr=i(ae),AC=n(ae,"LI",{});var NOe=s(AC);oCe=n(NOe,"STRONG",{});var IGt=s(oCe);DOr=r(IGt,"t5"),IGt.forEach(t),GOr=r(NOe," \u2014 "),yee=n(NOe,"A",{href:!0});var NGt=s(yee);OOr=r(NGt,"FlaxT5Model"),NGt.forEach(t),VOr=r(NOe," (T5 model)"),NOe.forEach(t),XOr=i(ae),LC=n(ae,"LI",{});var qOe=s(LC);rCe=n(qOe,"STRONG",{});var qGt=s(rCe);zOr=r(qGt,"vision-text-dual-encoder"),qGt.forEach(t),WOr=r(qOe," \u2014 "),xee=n(qOe,"A",{href:!0});var jGt=s(xee);QOr=r(jGt,"FlaxVisionTextDualEncoderModel"),jGt.forEach(t),HOr=r(qOe," (VisionTextDualEncoder model)"),qOe.forEach(t),UOr=i(ae),yC=n(ae,"LI",{});var jOe=s(yC);tCe=n(jOe,"STRONG",{});var DGt=s(tCe);JOr=r(DGt,"vit"),DGt.forEach(t),YOr=r(jOe," \u2014 "),$ee=n(jOe,"A",{href:!0});var GGt=s($ee);KOr=r(GGt,"FlaxViTModel"),GGt.forEach(t),ZOr=r(jOe," (ViT model)"),jOe.forEach(t),eVr=i(ae),xC=n(ae,"LI",{});var DOe=s(xC);aCe=n(DOe,"STRONG",{});var OGt=s(aCe);oVr=r(OGt,"wav2vec2"),OGt.forEach(t),rVr=r(DOe," \u2014 "),kee=n(DOe,"A",{href:!0});var VGt=s(kee);tVr=r(VGt,"FlaxWav2Vec2Model"),VGt.forEach(t),aVr=r(DOe," (Wav2Vec2 model)"),DOe.forEach(t),nVr=i(ae),$C=n(ae,"LI",{});var GOe=s($C);nCe=n(GOe,"STRONG",{});var XGt=s(nCe);sVr=r(XGt,"xglm"),XGt.forEach(t),lVr=r(GOe," \u2014 "),See=n(GOe,"A",{href:!0});var zGt=s(See);iVr=r(zGt,"FlaxXGLMModel"),zGt.forEach(t),dVr=r(GOe," (XGLM model)"),GOe.forEach(t),cVr=i(ae),kC=n(ae,"LI",{});var OOe=s(kC);sCe=n(OOe,"STRONG",{});var WGt=s(sCe);fVr=r(WGt,"xlm-roberta"),WGt.forEach(t),mVr=r(OOe," \u2014 "),Ree=n(OOe,"A",{href:!0});var QGt=s(Ree);gVr=r(QGt,"FlaxXLMRobertaModel"),QGt.forEach(t),hVr=r(OOe," (XLM-RoBERTa model)"),OOe.forEach(t),ae.forEach(t),pVr=i(ni),T(SC.$$.fragment,ni),ni.forEach(t),ai.forEach(t),oWe=i(f),Kc=n(f,"H2",{class:!0});var cHe=s(Kc);RC=n(cHe,"A",{id:!0,class:!0,href:!0});var HGt=s(RC);lCe=n(HGt,"SPAN",{});var UGt=s(lCe);T(u$.$$.fragment,UGt),UGt.forEach(t),HGt.forEach(t),_Vr=i(cHe),iCe=n(cHe,"SPAN",{});var JGt=s(iCe);uVr=r(JGt,"FlaxAutoModelForCausalLM"),JGt.forEach(t),cHe.forEach(t),rWe=i(f),_r=n(f,"DIV",{class:!0});var si=s(_r);T(b$.$$.fragment,si),bVr=i(si),Zc=n(si,"P",{});var hae=s(Zc);vVr=r(hae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Pee=n(hae,"A",{href:!0});var YGt=s(Pee);FVr=r(YGt,"from_pretrained()"),YGt.forEach(t),TVr=r(hae," class method or the "),Bee=n(hae,"A",{href:!0});var KGt=s(Bee);MVr=r(KGt,"from_config()"),KGt.forEach(t),EVr=r(hae,` class
method.`),hae.forEach(t),CVr=i(si),v$=n(si,"P",{});var fHe=s(v$);wVr=r(fHe,"This class cannot be instantiated directly using "),dCe=n(fHe,"CODE",{});var ZGt=s(dCe);AVr=r(ZGt,"__init__()"),ZGt.forEach(t),LVr=r(fHe," (throws an error)."),fHe.forEach(t),yVr=i(si),Ht=n(si,"DIV",{class:!0});var NA=s(Ht);T(F$.$$.fragment,NA),xVr=i(NA),cCe=n(NA,"P",{});var eOt=s(cCe);$Vr=r(eOt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),eOt.forEach(t),kVr=i(NA),ef=n(NA,"P",{});var pae=s(ef);SVr=r(pae,`Note:
Loading a model from its configuration file does `),fCe=n(pae,"STRONG",{});var oOt=s(fCe);RVr=r(oOt,"not"),oOt.forEach(t),PVr=r(pae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Iee=n(pae,"A",{href:!0});var rOt=s(Iee);BVr=r(rOt,"from_pretrained()"),rOt.forEach(t),IVr=r(pae," to load the model weights."),pae.forEach(t),NVr=i(NA),T(PC.$$.fragment,NA),NA.forEach(t),qVr=i(si),Xr=n(si,"DIV",{class:!0});var li=s(Xr);T(T$.$$.fragment,li),jVr=i(li),mCe=n(li,"P",{});var tOt=s(mCe);DVr=r(tOt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),tOt.forEach(t),GVr=i(li),Mn=n(li,"P",{});var qA=s(Mn);OVr=r(qA,"The model class to instantiate is selected based on the "),gCe=n(qA,"CODE",{});var aOt=s(gCe);VVr=r(aOt,"model_type"),aOt.forEach(t),XVr=r(qA,` property of the config object (either
passed as an argument or loaded from `),hCe=n(qA,"CODE",{});var nOt=s(hCe);zVr=r(nOt,"pretrained_model_name_or_path"),nOt.forEach(t),WVr=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pCe=n(qA,"CODE",{});var sOt=s(pCe);QVr=r(sOt,"pretrained_model_name_or_path"),sOt.forEach(t),HVr=r(qA,":"),qA.forEach(t),UVr=i(li),xe=n(li,"UL",{});var Ne=s(xe);BC=n(Ne,"LI",{});var VOe=s(BC);_Ce=n(VOe,"STRONG",{});var lOt=s(_Ce);JVr=r(lOt,"bart"),lOt.forEach(t),YVr=r(VOe," \u2014 "),Nee=n(VOe,"A",{href:!0});var iOt=s(Nee);KVr=r(iOt,"FlaxBartForCausalLM"),iOt.forEach(t),ZVr=r(VOe," (BART model)"),VOe.forEach(t),eXr=i(Ne),IC=n(Ne,"LI",{});var XOe=s(IC);uCe=n(XOe,"STRONG",{});var dOt=s(uCe);oXr=r(dOt,"bert"),dOt.forEach(t),rXr=r(XOe," \u2014 "),qee=n(XOe,"A",{href:!0});var cOt=s(qee);tXr=r(cOt,"FlaxBertForCausalLM"),cOt.forEach(t),aXr=r(XOe," (BERT model)"),XOe.forEach(t),nXr=i(Ne),NC=n(Ne,"LI",{});var zOe=s(NC);bCe=n(zOe,"STRONG",{});var fOt=s(bCe);sXr=r(fOt,"big_bird"),fOt.forEach(t),lXr=r(zOe," \u2014 "),jee=n(zOe,"A",{href:!0});var mOt=s(jee);iXr=r(mOt,"FlaxBigBirdForCausalLM"),mOt.forEach(t),dXr=r(zOe," (BigBird model)"),zOe.forEach(t),cXr=i(Ne),qC=n(Ne,"LI",{});var WOe=s(qC);vCe=n(WOe,"STRONG",{});var gOt=s(vCe);fXr=r(gOt,"electra"),gOt.forEach(t),mXr=r(WOe," \u2014 "),Dee=n(WOe,"A",{href:!0});var hOt=s(Dee);gXr=r(hOt,"FlaxElectraForCausalLM"),hOt.forEach(t),hXr=r(WOe," (ELECTRA model)"),WOe.forEach(t),pXr=i(Ne),jC=n(Ne,"LI",{});var QOe=s(jC);FCe=n(QOe,"STRONG",{});var pOt=s(FCe);_Xr=r(pOt,"gpt2"),pOt.forEach(t),uXr=r(QOe," \u2014 "),Gee=n(QOe,"A",{href:!0});var _Ot=s(Gee);bXr=r(_Ot,"FlaxGPT2LMHeadModel"),_Ot.forEach(t),vXr=r(QOe," (OpenAI GPT-2 model)"),QOe.forEach(t),FXr=i(Ne),DC=n(Ne,"LI",{});var HOe=s(DC);TCe=n(HOe,"STRONG",{});var uOt=s(TCe);TXr=r(uOt,"gpt_neo"),uOt.forEach(t),MXr=r(HOe," \u2014 "),Oee=n(HOe,"A",{href:!0});var bOt=s(Oee);EXr=r(bOt,"FlaxGPTNeoForCausalLM"),bOt.forEach(t),CXr=r(HOe," (GPT Neo model)"),HOe.forEach(t),wXr=i(Ne),GC=n(Ne,"LI",{});var UOe=s(GC);MCe=n(UOe,"STRONG",{});var vOt=s(MCe);AXr=r(vOt,"gptj"),vOt.forEach(t),LXr=r(UOe," \u2014 "),Vee=n(UOe,"A",{href:!0});var FOt=s(Vee);yXr=r(FOt,"FlaxGPTJForCausalLM"),FOt.forEach(t),xXr=r(UOe," (GPT-J model)"),UOe.forEach(t),$Xr=i(Ne),OC=n(Ne,"LI",{});var JOe=s(OC);ECe=n(JOe,"STRONG",{});var TOt=s(ECe);kXr=r(TOt,"opt"),TOt.forEach(t),SXr=r(JOe," \u2014 "),Xee=n(JOe,"A",{href:!0});var MOt=s(Xee);RXr=r(MOt,"FlaxOPTForCausalLM"),MOt.forEach(t),PXr=r(JOe," (OPT model)"),JOe.forEach(t),BXr=i(Ne),VC=n(Ne,"LI",{});var YOe=s(VC);CCe=n(YOe,"STRONG",{});var EOt=s(CCe);IXr=r(EOt,"roberta"),EOt.forEach(t),NXr=r(YOe," \u2014 "),zee=n(YOe,"A",{href:!0});var COt=s(zee);qXr=r(COt,"FlaxRobertaForCausalLM"),COt.forEach(t),jXr=r(YOe," (RoBERTa model)"),YOe.forEach(t),DXr=i(Ne),XC=n(Ne,"LI",{});var KOe=s(XC);wCe=n(KOe,"STRONG",{});var wOt=s(wCe);GXr=r(wOt,"xglm"),wOt.forEach(t),OXr=r(KOe," \u2014 "),Wee=n(KOe,"A",{href:!0});var AOt=s(Wee);VXr=r(AOt,"FlaxXGLMForCausalLM"),AOt.forEach(t),XXr=r(KOe," (XGLM model)"),KOe.forEach(t),Ne.forEach(t),zXr=i(li),T(zC.$$.fragment,li),li.forEach(t),si.forEach(t),tWe=i(f),of=n(f,"H2",{class:!0});var mHe=s(of);WC=n(mHe,"A",{id:!0,class:!0,href:!0});var LOt=s(WC);ACe=n(LOt,"SPAN",{});var yOt=s(ACe);T(M$.$$.fragment,yOt),yOt.forEach(t),LOt.forEach(t),WXr=i(mHe),LCe=n(mHe,"SPAN",{});var xOt=s(LCe);QXr=r(xOt,"FlaxAutoModelForPreTraining"),xOt.forEach(t),mHe.forEach(t),aWe=i(f),ur=n(f,"DIV",{class:!0});var ii=s(ur);T(E$.$$.fragment,ii),HXr=i(ii),rf=n(ii,"P",{});var _ae=s(rf);UXr=r(_ae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Qee=n(_ae,"A",{href:!0});var $Ot=s(Qee);JXr=r($Ot,"from_pretrained()"),$Ot.forEach(t),YXr=r(_ae," class method or the "),Hee=n(_ae,"A",{href:!0});var kOt=s(Hee);KXr=r(kOt,"from_config()"),kOt.forEach(t),ZXr=r(_ae,` class
method.`),_ae.forEach(t),ezr=i(ii),C$=n(ii,"P",{});var gHe=s(C$);ozr=r(gHe,"This class cannot be instantiated directly using "),yCe=n(gHe,"CODE",{});var SOt=s(yCe);rzr=r(SOt,"__init__()"),SOt.forEach(t),tzr=r(gHe," (throws an error)."),gHe.forEach(t),azr=i(ii),Ut=n(ii,"DIV",{class:!0});var jA=s(Ut);T(w$.$$.fragment,jA),nzr=i(jA),xCe=n(jA,"P",{});var ROt=s(xCe);szr=r(ROt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ROt.forEach(t),lzr=i(jA),tf=n(jA,"P",{});var uae=s(tf);izr=r(uae,`Note:
Loading a model from its configuration file does `),$Ce=n(uae,"STRONG",{});var POt=s($Ce);dzr=r(POt,"not"),POt.forEach(t),czr=r(uae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uee=n(uae,"A",{href:!0});var BOt=s(Uee);fzr=r(BOt,"from_pretrained()"),BOt.forEach(t),mzr=r(uae," to load the model weights."),uae.forEach(t),gzr=i(jA),T(QC.$$.fragment,jA),jA.forEach(t),hzr=i(ii),zr=n(ii,"DIV",{class:!0});var di=s(zr);T(A$.$$.fragment,di),pzr=i(di),kCe=n(di,"P",{});var IOt=s(kCe);_zr=r(IOt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),IOt.forEach(t),uzr=i(di),En=n(di,"P",{});var DA=s(En);bzr=r(DA,"The model class to instantiate is selected based on the "),SCe=n(DA,"CODE",{});var NOt=s(SCe);vzr=r(NOt,"model_type"),NOt.forEach(t),Fzr=r(DA,` property of the config object (either
passed as an argument or loaded from `),RCe=n(DA,"CODE",{});var qOt=s(RCe);Tzr=r(qOt,"pretrained_model_name_or_path"),qOt.forEach(t),Mzr=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PCe=n(DA,"CODE",{});var jOt=s(PCe);Ezr=r(jOt,"pretrained_model_name_or_path"),jOt.forEach(t),Czr=r(DA,":"),DA.forEach(t),wzr=i(di),Ee=n(di,"UL",{});var we=s(Ee);HC=n(we,"LI",{});var ZOe=s(HC);BCe=n(ZOe,"STRONG",{});var DOt=s(BCe);Azr=r(DOt,"albert"),DOt.forEach(t),Lzr=r(ZOe," \u2014 "),Jee=n(ZOe,"A",{href:!0});var GOt=s(Jee);yzr=r(GOt,"FlaxAlbertForPreTraining"),GOt.forEach(t),xzr=r(ZOe," (ALBERT model)"),ZOe.forEach(t),$zr=i(we),UC=n(we,"LI",{});var eVe=s(UC);ICe=n(eVe,"STRONG",{});var OOt=s(ICe);kzr=r(OOt,"bart"),OOt.forEach(t),Szr=r(eVe," \u2014 "),Yee=n(eVe,"A",{href:!0});var VOt=s(Yee);Rzr=r(VOt,"FlaxBartForConditionalGeneration"),VOt.forEach(t),Pzr=r(eVe," (BART model)"),eVe.forEach(t),Bzr=i(we),JC=n(we,"LI",{});var oVe=s(JC);NCe=n(oVe,"STRONG",{});var XOt=s(NCe);Izr=r(XOt,"bert"),XOt.forEach(t),Nzr=r(oVe," \u2014 "),Kee=n(oVe,"A",{href:!0});var zOt=s(Kee);qzr=r(zOt,"FlaxBertForPreTraining"),zOt.forEach(t),jzr=r(oVe," (BERT model)"),oVe.forEach(t),Dzr=i(we),YC=n(we,"LI",{});var rVe=s(YC);qCe=n(rVe,"STRONG",{});var WOt=s(qCe);Gzr=r(WOt,"big_bird"),WOt.forEach(t),Ozr=r(rVe," \u2014 "),Zee=n(rVe,"A",{href:!0});var QOt=s(Zee);Vzr=r(QOt,"FlaxBigBirdForPreTraining"),QOt.forEach(t),Xzr=r(rVe," (BigBird model)"),rVe.forEach(t),zzr=i(we),KC=n(we,"LI",{});var tVe=s(KC);jCe=n(tVe,"STRONG",{});var HOt=s(jCe);Wzr=r(HOt,"electra"),HOt.forEach(t),Qzr=r(tVe," \u2014 "),eoe=n(tVe,"A",{href:!0});var UOt=s(eoe);Hzr=r(UOt,"FlaxElectraForPreTraining"),UOt.forEach(t),Uzr=r(tVe," (ELECTRA model)"),tVe.forEach(t),Jzr=i(we),ZC=n(we,"LI",{});var aVe=s(ZC);DCe=n(aVe,"STRONG",{});var JOt=s(DCe);Yzr=r(JOt,"longt5"),JOt.forEach(t),Kzr=r(aVe," \u2014 "),ooe=n(aVe,"A",{href:!0});var YOt=s(ooe);Zzr=r(YOt,"FlaxLongT5ForConditionalGeneration"),YOt.forEach(t),eWr=r(aVe," (LongT5 model)"),aVe.forEach(t),oWr=i(we),e5=n(we,"LI",{});var nVe=s(e5);GCe=n(nVe,"STRONG",{});var KOt=s(GCe);rWr=r(KOt,"mbart"),KOt.forEach(t),tWr=r(nVe," \u2014 "),roe=n(nVe,"A",{href:!0});var ZOt=s(roe);aWr=r(ZOt,"FlaxMBartForConditionalGeneration"),ZOt.forEach(t),nWr=r(nVe," (mBART model)"),nVe.forEach(t),sWr=i(we),o5=n(we,"LI",{});var sVe=s(o5);OCe=n(sVe,"STRONG",{});var eVt=s(OCe);lWr=r(eVt,"mt5"),eVt.forEach(t),iWr=r(sVe," \u2014 "),toe=n(sVe,"A",{href:!0});var oVt=s(toe);dWr=r(oVt,"FlaxMT5ForConditionalGeneration"),oVt.forEach(t),cWr=r(sVe," (MT5 model)"),sVe.forEach(t),fWr=i(we),r5=n(we,"LI",{});var lVe=s(r5);VCe=n(lVe,"STRONG",{});var rVt=s(VCe);mWr=r(rVt,"roberta"),rVt.forEach(t),gWr=r(lVe," \u2014 "),aoe=n(lVe,"A",{href:!0});var tVt=s(aoe);hWr=r(tVt,"FlaxRobertaForMaskedLM"),tVt.forEach(t),pWr=r(lVe," (RoBERTa model)"),lVe.forEach(t),_Wr=i(we),t5=n(we,"LI",{});var iVe=s(t5);XCe=n(iVe,"STRONG",{});var aVt=s(XCe);uWr=r(aVt,"roformer"),aVt.forEach(t),bWr=r(iVe," \u2014 "),noe=n(iVe,"A",{href:!0});var nVt=s(noe);vWr=r(nVt,"FlaxRoFormerForMaskedLM"),nVt.forEach(t),FWr=r(iVe," (RoFormer model)"),iVe.forEach(t),TWr=i(we),a5=n(we,"LI",{});var dVe=s(a5);zCe=n(dVe,"STRONG",{});var sVt=s(zCe);MWr=r(sVt,"t5"),sVt.forEach(t),EWr=r(dVe," \u2014 "),soe=n(dVe,"A",{href:!0});var lVt=s(soe);CWr=r(lVt,"FlaxT5ForConditionalGeneration"),lVt.forEach(t),wWr=r(dVe," (T5 model)"),dVe.forEach(t),AWr=i(we),n5=n(we,"LI",{});var cVe=s(n5);WCe=n(cVe,"STRONG",{});var iVt=s(WCe);LWr=r(iVt,"wav2vec2"),iVt.forEach(t),yWr=r(cVe," \u2014 "),loe=n(cVe,"A",{href:!0});var dVt=s(loe);xWr=r(dVt,"FlaxWav2Vec2ForPreTraining"),dVt.forEach(t),$Wr=r(cVe," (Wav2Vec2 model)"),cVe.forEach(t),kWr=i(we),s5=n(we,"LI",{});var fVe=s(s5);QCe=n(fVe,"STRONG",{});var cVt=s(QCe);SWr=r(cVt,"xlm-roberta"),cVt.forEach(t),RWr=r(fVe," \u2014 "),ioe=n(fVe,"A",{href:!0});var fVt=s(ioe);PWr=r(fVt,"FlaxXLMRobertaForMaskedLM"),fVt.forEach(t),BWr=r(fVe," (XLM-RoBERTa model)"),fVe.forEach(t),we.forEach(t),IWr=i(di),T(l5.$$.fragment,di),di.forEach(t),ii.forEach(t),nWe=i(f),af=n(f,"H2",{class:!0});var hHe=s(af);i5=n(hHe,"A",{id:!0,class:!0,href:!0});var mVt=s(i5);HCe=n(mVt,"SPAN",{});var gVt=s(HCe);T(L$.$$.fragment,gVt),gVt.forEach(t),mVt.forEach(t),NWr=i(hHe),UCe=n(hHe,"SPAN",{});var hVt=s(UCe);qWr=r(hVt,"FlaxAutoModelForMaskedLM"),hVt.forEach(t),hHe.forEach(t),sWe=i(f),br=n(f,"DIV",{class:!0});var ci=s(br);T(y$.$$.fragment,ci),jWr=i(ci),nf=n(ci,"P",{});var bae=s(nf);DWr=r(bae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),doe=n(bae,"A",{href:!0});var pVt=s(doe);GWr=r(pVt,"from_pretrained()"),pVt.forEach(t),OWr=r(bae," class method or the "),coe=n(bae,"A",{href:!0});var _Vt=s(coe);VWr=r(_Vt,"from_config()"),_Vt.forEach(t),XWr=r(bae,` class
method.`),bae.forEach(t),zWr=i(ci),x$=n(ci,"P",{});var pHe=s(x$);WWr=r(pHe,"This class cannot be instantiated directly using "),JCe=n(pHe,"CODE",{});var uVt=s(JCe);QWr=r(uVt,"__init__()"),uVt.forEach(t),HWr=r(pHe," (throws an error)."),pHe.forEach(t),UWr=i(ci),Jt=n(ci,"DIV",{class:!0});var GA=s(Jt);T($$.$$.fragment,GA),JWr=i(GA),YCe=n(GA,"P",{});var bVt=s(YCe);YWr=r(bVt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),bVt.forEach(t),KWr=i(GA),sf=n(GA,"P",{});var vae=s(sf);ZWr=r(vae,`Note:
Loading a model from its configuration file does `),KCe=n(vae,"STRONG",{});var vVt=s(KCe);eQr=r(vVt,"not"),vVt.forEach(t),oQr=r(vae,` load the model weights. It only affects the
model\u2019s configuration. Use `),foe=n(vae,"A",{href:!0});var FVt=s(foe);rQr=r(FVt,"from_pretrained()"),FVt.forEach(t),tQr=r(vae," to load the model weights."),vae.forEach(t),aQr=i(GA),T(d5.$$.fragment,GA),GA.forEach(t),nQr=i(ci),Wr=n(ci,"DIV",{class:!0});var fi=s(Wr);T(k$.$$.fragment,fi),sQr=i(fi),ZCe=n(fi,"P",{});var TVt=s(ZCe);lQr=r(TVt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),TVt.forEach(t),iQr=i(fi),Cn=n(fi,"P",{});var OA=s(Cn);dQr=r(OA,"The model class to instantiate is selected based on the "),e5e=n(OA,"CODE",{});var MVt=s(e5e);cQr=r(MVt,"model_type"),MVt.forEach(t),fQr=r(OA,` property of the config object (either
passed as an argument or loaded from `),o5e=n(OA,"CODE",{});var EVt=s(o5e);mQr=r(EVt,"pretrained_model_name_or_path"),EVt.forEach(t),gQr=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r5e=n(OA,"CODE",{});var CVt=s(r5e);hQr=r(CVt,"pretrained_model_name_or_path"),CVt.forEach(t),pQr=r(OA,":"),OA.forEach(t),_Qr=i(fi),$e=n(fi,"UL",{});var qe=s($e);c5=n(qe,"LI",{});var mVe=s(c5);t5e=n(mVe,"STRONG",{});var wVt=s(t5e);uQr=r(wVt,"albert"),wVt.forEach(t),bQr=r(mVe," \u2014 "),moe=n(mVe,"A",{href:!0});var AVt=s(moe);vQr=r(AVt,"FlaxAlbertForMaskedLM"),AVt.forEach(t),FQr=r(mVe," (ALBERT model)"),mVe.forEach(t),TQr=i(qe),f5=n(qe,"LI",{});var gVe=s(f5);a5e=n(gVe,"STRONG",{});var LVt=s(a5e);MQr=r(LVt,"bart"),LVt.forEach(t),EQr=r(gVe," \u2014 "),goe=n(gVe,"A",{href:!0});var yVt=s(goe);CQr=r(yVt,"FlaxBartForConditionalGeneration"),yVt.forEach(t),wQr=r(gVe," (BART model)"),gVe.forEach(t),AQr=i(qe),m5=n(qe,"LI",{});var hVe=s(m5);n5e=n(hVe,"STRONG",{});var xVt=s(n5e);LQr=r(xVt,"bert"),xVt.forEach(t),yQr=r(hVe," \u2014 "),hoe=n(hVe,"A",{href:!0});var $Vt=s(hoe);xQr=r($Vt,"FlaxBertForMaskedLM"),$Vt.forEach(t),$Qr=r(hVe," (BERT model)"),hVe.forEach(t),kQr=i(qe),g5=n(qe,"LI",{});var pVe=s(g5);s5e=n(pVe,"STRONG",{});var kVt=s(s5e);SQr=r(kVt,"big_bird"),kVt.forEach(t),RQr=r(pVe," \u2014 "),poe=n(pVe,"A",{href:!0});var SVt=s(poe);PQr=r(SVt,"FlaxBigBirdForMaskedLM"),SVt.forEach(t),BQr=r(pVe," (BigBird model)"),pVe.forEach(t),IQr=i(qe),h5=n(qe,"LI",{});var _Ve=s(h5);l5e=n(_Ve,"STRONG",{});var RVt=s(l5e);NQr=r(RVt,"distilbert"),RVt.forEach(t),qQr=r(_Ve," \u2014 "),_oe=n(_Ve,"A",{href:!0});var PVt=s(_oe);jQr=r(PVt,"FlaxDistilBertForMaskedLM"),PVt.forEach(t),DQr=r(_Ve," (DistilBERT model)"),_Ve.forEach(t),GQr=i(qe),p5=n(qe,"LI",{});var uVe=s(p5);i5e=n(uVe,"STRONG",{});var BVt=s(i5e);OQr=r(BVt,"electra"),BVt.forEach(t),VQr=r(uVe," \u2014 "),uoe=n(uVe,"A",{href:!0});var IVt=s(uoe);XQr=r(IVt,"FlaxElectraForMaskedLM"),IVt.forEach(t),zQr=r(uVe," (ELECTRA model)"),uVe.forEach(t),WQr=i(qe),_5=n(qe,"LI",{});var bVe=s(_5);d5e=n(bVe,"STRONG",{});var NVt=s(d5e);QQr=r(NVt,"mbart"),NVt.forEach(t),HQr=r(bVe," \u2014 "),boe=n(bVe,"A",{href:!0});var qVt=s(boe);UQr=r(qVt,"FlaxMBartForConditionalGeneration"),qVt.forEach(t),JQr=r(bVe," (mBART model)"),bVe.forEach(t),YQr=i(qe),u5=n(qe,"LI",{});var vVe=s(u5);c5e=n(vVe,"STRONG",{});var jVt=s(c5e);KQr=r(jVt,"roberta"),jVt.forEach(t),ZQr=r(vVe," \u2014 "),voe=n(vVe,"A",{href:!0});var DVt=s(voe);eHr=r(DVt,"FlaxRobertaForMaskedLM"),DVt.forEach(t),oHr=r(vVe," (RoBERTa model)"),vVe.forEach(t),rHr=i(qe),b5=n(qe,"LI",{});var FVe=s(b5);f5e=n(FVe,"STRONG",{});var GVt=s(f5e);tHr=r(GVt,"roformer"),GVt.forEach(t),aHr=r(FVe," \u2014 "),Foe=n(FVe,"A",{href:!0});var OVt=s(Foe);nHr=r(OVt,"FlaxRoFormerForMaskedLM"),OVt.forEach(t),sHr=r(FVe," (RoFormer model)"),FVe.forEach(t),lHr=i(qe),v5=n(qe,"LI",{});var TVe=s(v5);m5e=n(TVe,"STRONG",{});var VVt=s(m5e);iHr=r(VVt,"xlm-roberta"),VVt.forEach(t),dHr=r(TVe," \u2014 "),Toe=n(TVe,"A",{href:!0});var XVt=s(Toe);cHr=r(XVt,"FlaxXLMRobertaForMaskedLM"),XVt.forEach(t),fHr=r(TVe," (XLM-RoBERTa model)"),TVe.forEach(t),qe.forEach(t),mHr=i(fi),T(F5.$$.fragment,fi),fi.forEach(t),ci.forEach(t),lWe=i(f),lf=n(f,"H2",{class:!0});var _He=s(lf);T5=n(_He,"A",{id:!0,class:!0,href:!0});var zVt=s(T5);g5e=n(zVt,"SPAN",{});var WVt=s(g5e);T(S$.$$.fragment,WVt),WVt.forEach(t),zVt.forEach(t),gHr=i(_He),h5e=n(_He,"SPAN",{});var QVt=s(h5e);hHr=r(QVt,"FlaxAutoModelForSeq2SeqLM"),QVt.forEach(t),_He.forEach(t),iWe=i(f),vr=n(f,"DIV",{class:!0});var mi=s(vr);T(R$.$$.fragment,mi),pHr=i(mi),df=n(mi,"P",{});var Fae=s(df);_Hr=r(Fae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Moe=n(Fae,"A",{href:!0});var HVt=s(Moe);uHr=r(HVt,"from_pretrained()"),HVt.forEach(t),bHr=r(Fae," class method or the "),Eoe=n(Fae,"A",{href:!0});var UVt=s(Eoe);vHr=r(UVt,"from_config()"),UVt.forEach(t),FHr=r(Fae,` class
method.`),Fae.forEach(t),THr=i(mi),P$=n(mi,"P",{});var uHe=s(P$);MHr=r(uHe,"This class cannot be instantiated directly using "),p5e=n(uHe,"CODE",{});var JVt=s(p5e);EHr=r(JVt,"__init__()"),JVt.forEach(t),CHr=r(uHe," (throws an error)."),uHe.forEach(t),wHr=i(mi),Yt=n(mi,"DIV",{class:!0});var VA=s(Yt);T(B$.$$.fragment,VA),AHr=i(VA),_5e=n(VA,"P",{});var YVt=s(_5e);LHr=r(YVt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),YVt.forEach(t),yHr=i(VA),cf=n(VA,"P",{});var Tae=s(cf);xHr=r(Tae,`Note:
Loading a model from its configuration file does `),u5e=n(Tae,"STRONG",{});var KVt=s(u5e);$Hr=r(KVt,"not"),KVt.forEach(t),kHr=r(Tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Coe=n(Tae,"A",{href:!0});var ZVt=s(Coe);SHr=r(ZVt,"from_pretrained()"),ZVt.forEach(t),RHr=r(Tae," to load the model weights."),Tae.forEach(t),PHr=i(VA),T(M5.$$.fragment,VA),VA.forEach(t),BHr=i(mi),Qr=n(mi,"DIV",{class:!0});var gi=s(Qr);T(I$.$$.fragment,gi),IHr=i(gi),b5e=n(gi,"P",{});var eXt=s(b5e);NHr=r(eXt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),eXt.forEach(t),qHr=i(gi),wn=n(gi,"P",{});var XA=s(wn);jHr=r(XA,"The model class to instantiate is selected based on the "),v5e=n(XA,"CODE",{});var oXt=s(v5e);DHr=r(oXt,"model_type"),oXt.forEach(t),GHr=r(XA,` property of the config object (either
passed as an argument or loaded from `),F5e=n(XA,"CODE",{});var rXt=s(F5e);OHr=r(rXt,"pretrained_model_name_or_path"),rXt.forEach(t),VHr=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T5e=n(XA,"CODE",{});var tXt=s(T5e);XHr=r(tXt,"pretrained_model_name_or_path"),tXt.forEach(t),zHr=r(XA,":"),XA.forEach(t),WHr=i(gi),ke=n(gi,"UL",{});var je=s(ke);E5=n(je,"LI",{});var MVe=s(E5);M5e=n(MVe,"STRONG",{});var aXt=s(M5e);QHr=r(aXt,"bart"),aXt.forEach(t),HHr=r(MVe," \u2014 "),woe=n(MVe,"A",{href:!0});var nXt=s(woe);UHr=r(nXt,"FlaxBartForConditionalGeneration"),nXt.forEach(t),JHr=r(MVe," (BART model)"),MVe.forEach(t),YHr=i(je),C5=n(je,"LI",{});var EVe=s(C5);E5e=n(EVe,"STRONG",{});var sXt=s(E5e);KHr=r(sXt,"blenderbot"),sXt.forEach(t),ZHr=r(EVe," \u2014 "),Aoe=n(EVe,"A",{href:!0});var lXt=s(Aoe);eUr=r(lXt,"FlaxBlenderbotForConditionalGeneration"),lXt.forEach(t),oUr=r(EVe," (Blenderbot model)"),EVe.forEach(t),rUr=i(je),w5=n(je,"LI",{});var CVe=s(w5);C5e=n(CVe,"STRONG",{});var iXt=s(C5e);tUr=r(iXt,"blenderbot-small"),iXt.forEach(t),aUr=r(CVe," \u2014 "),Loe=n(CVe,"A",{href:!0});var dXt=s(Loe);nUr=r(dXt,"FlaxBlenderbotSmallForConditionalGeneration"),dXt.forEach(t),sUr=r(CVe," (BlenderbotSmall model)"),CVe.forEach(t),lUr=i(je),A5=n(je,"LI",{});var wVe=s(A5);w5e=n(wVe,"STRONG",{});var cXt=s(w5e);iUr=r(cXt,"encoder-decoder"),cXt.forEach(t),dUr=r(wVe," \u2014 "),yoe=n(wVe,"A",{href:!0});var fXt=s(yoe);cUr=r(fXt,"FlaxEncoderDecoderModel"),fXt.forEach(t),fUr=r(wVe," (Encoder decoder model)"),wVe.forEach(t),mUr=i(je),L5=n(je,"LI",{});var AVe=s(L5);A5e=n(AVe,"STRONG",{});var mXt=s(A5e);gUr=r(mXt,"longt5"),mXt.forEach(t),hUr=r(AVe," \u2014 "),xoe=n(AVe,"A",{href:!0});var gXt=s(xoe);pUr=r(gXt,"FlaxLongT5ForConditionalGeneration"),gXt.forEach(t),_Ur=r(AVe," (LongT5 model)"),AVe.forEach(t),uUr=i(je),y5=n(je,"LI",{});var LVe=s(y5);L5e=n(LVe,"STRONG",{});var hXt=s(L5e);bUr=r(hXt,"marian"),hXt.forEach(t),vUr=r(LVe," \u2014 "),$oe=n(LVe,"A",{href:!0});var pXt=s($oe);FUr=r(pXt,"FlaxMarianMTModel"),pXt.forEach(t),TUr=r(LVe," (Marian model)"),LVe.forEach(t),MUr=i(je),x5=n(je,"LI",{});var yVe=s(x5);y5e=n(yVe,"STRONG",{});var _Xt=s(y5e);EUr=r(_Xt,"mbart"),_Xt.forEach(t),CUr=r(yVe," \u2014 "),koe=n(yVe,"A",{href:!0});var uXt=s(koe);wUr=r(uXt,"FlaxMBartForConditionalGeneration"),uXt.forEach(t),AUr=r(yVe," (mBART model)"),yVe.forEach(t),LUr=i(je),$5=n(je,"LI",{});var xVe=s($5);x5e=n(xVe,"STRONG",{});var bXt=s(x5e);yUr=r(bXt,"mt5"),bXt.forEach(t),xUr=r(xVe," \u2014 "),Soe=n(xVe,"A",{href:!0});var vXt=s(Soe);$Ur=r(vXt,"FlaxMT5ForConditionalGeneration"),vXt.forEach(t),kUr=r(xVe," (MT5 model)"),xVe.forEach(t),SUr=i(je),k5=n(je,"LI",{});var $Ve=s(k5);$5e=n($Ve,"STRONG",{});var FXt=s($5e);RUr=r(FXt,"pegasus"),FXt.forEach(t),PUr=r($Ve," \u2014 "),Roe=n($Ve,"A",{href:!0});var TXt=s(Roe);BUr=r(TXt,"FlaxPegasusForConditionalGeneration"),TXt.forEach(t),IUr=r($Ve," (Pegasus model)"),$Ve.forEach(t),NUr=i(je),S5=n(je,"LI",{});var kVe=s(S5);k5e=n(kVe,"STRONG",{});var MXt=s(k5e);qUr=r(MXt,"t5"),MXt.forEach(t),jUr=r(kVe," \u2014 "),Poe=n(kVe,"A",{href:!0});var EXt=s(Poe);DUr=r(EXt,"FlaxT5ForConditionalGeneration"),EXt.forEach(t),GUr=r(kVe," (T5 model)"),kVe.forEach(t),je.forEach(t),OUr=i(gi),T(R5.$$.fragment,gi),gi.forEach(t),mi.forEach(t),dWe=i(f),ff=n(f,"H2",{class:!0});var bHe=s(ff);P5=n(bHe,"A",{id:!0,class:!0,href:!0});var CXt=s(P5);S5e=n(CXt,"SPAN",{});var wXt=s(S5e);T(N$.$$.fragment,wXt),wXt.forEach(t),CXt.forEach(t),VUr=i(bHe),R5e=n(bHe,"SPAN",{});var AXt=s(R5e);XUr=r(AXt,"FlaxAutoModelForSequenceClassification"),AXt.forEach(t),bHe.forEach(t),cWe=i(f),Fr=n(f,"DIV",{class:!0});var hi=s(Fr);T(q$.$$.fragment,hi),zUr=i(hi),mf=n(hi,"P",{});var Mae=s(mf);WUr=r(Mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Boe=n(Mae,"A",{href:!0});var LXt=s(Boe);QUr=r(LXt,"from_pretrained()"),LXt.forEach(t),HUr=r(Mae," class method or the "),Ioe=n(Mae,"A",{href:!0});var yXt=s(Ioe);UUr=r(yXt,"from_config()"),yXt.forEach(t),JUr=r(Mae,` class
method.`),Mae.forEach(t),YUr=i(hi),j$=n(hi,"P",{});var vHe=s(j$);KUr=r(vHe,"This class cannot be instantiated directly using "),P5e=n(vHe,"CODE",{});var xXt=s(P5e);ZUr=r(xXt,"__init__()"),xXt.forEach(t),eJr=r(vHe," (throws an error)."),vHe.forEach(t),oJr=i(hi),Kt=n(hi,"DIV",{class:!0});var zA=s(Kt);T(D$.$$.fragment,zA),rJr=i(zA),B5e=n(zA,"P",{});var $Xt=s(B5e);tJr=r($Xt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),$Xt.forEach(t),aJr=i(zA),gf=n(zA,"P",{});var Eae=s(gf);nJr=r(Eae,`Note:
Loading a model from its configuration file does `),I5e=n(Eae,"STRONG",{});var kXt=s(I5e);sJr=r(kXt,"not"),kXt.forEach(t),lJr=r(Eae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Noe=n(Eae,"A",{href:!0});var SXt=s(Noe);iJr=r(SXt,"from_pretrained()"),SXt.forEach(t),dJr=r(Eae," to load the model weights."),Eae.forEach(t),cJr=i(zA),T(B5.$$.fragment,zA),zA.forEach(t),fJr=i(hi),Hr=n(hi,"DIV",{class:!0});var pi=s(Hr);T(G$.$$.fragment,pi),mJr=i(pi),N5e=n(pi,"P",{});var RXt=s(N5e);gJr=r(RXt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),RXt.forEach(t),hJr=i(pi),An=n(pi,"P",{});var WA=s(An);pJr=r(WA,"The model class to instantiate is selected based on the "),q5e=n(WA,"CODE",{});var PXt=s(q5e);_Jr=r(PXt,"model_type"),PXt.forEach(t),uJr=r(WA,` property of the config object (either
passed as an argument or loaded from `),j5e=n(WA,"CODE",{});var BXt=s(j5e);bJr=r(BXt,"pretrained_model_name_or_path"),BXt.forEach(t),vJr=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D5e=n(WA,"CODE",{});var IXt=s(D5e);FJr=r(IXt,"pretrained_model_name_or_path"),IXt.forEach(t),TJr=r(WA,":"),WA.forEach(t),MJr=i(pi),Se=n(pi,"UL",{});var De=s(Se);I5=n(De,"LI",{});var SVe=s(I5);G5e=n(SVe,"STRONG",{});var NXt=s(G5e);EJr=r(NXt,"albert"),NXt.forEach(t),CJr=r(SVe," \u2014 "),qoe=n(SVe,"A",{href:!0});var qXt=s(qoe);wJr=r(qXt,"FlaxAlbertForSequenceClassification"),qXt.forEach(t),AJr=r(SVe," (ALBERT model)"),SVe.forEach(t),LJr=i(De),N5=n(De,"LI",{});var RVe=s(N5);O5e=n(RVe,"STRONG",{});var jXt=s(O5e);yJr=r(jXt,"bart"),jXt.forEach(t),xJr=r(RVe," \u2014 "),joe=n(RVe,"A",{href:!0});var DXt=s(joe);$Jr=r(DXt,"FlaxBartForSequenceClassification"),DXt.forEach(t),kJr=r(RVe," (BART model)"),RVe.forEach(t),SJr=i(De),q5=n(De,"LI",{});var PVe=s(q5);V5e=n(PVe,"STRONG",{});var GXt=s(V5e);RJr=r(GXt,"bert"),GXt.forEach(t),PJr=r(PVe," \u2014 "),Doe=n(PVe,"A",{href:!0});var OXt=s(Doe);BJr=r(OXt,"FlaxBertForSequenceClassification"),OXt.forEach(t),IJr=r(PVe," (BERT model)"),PVe.forEach(t),NJr=i(De),j5=n(De,"LI",{});var BVe=s(j5);X5e=n(BVe,"STRONG",{});var VXt=s(X5e);qJr=r(VXt,"big_bird"),VXt.forEach(t),jJr=r(BVe," \u2014 "),Goe=n(BVe,"A",{href:!0});var XXt=s(Goe);DJr=r(XXt,"FlaxBigBirdForSequenceClassification"),XXt.forEach(t),GJr=r(BVe," (BigBird model)"),BVe.forEach(t),OJr=i(De),D5=n(De,"LI",{});var IVe=s(D5);z5e=n(IVe,"STRONG",{});var zXt=s(z5e);VJr=r(zXt,"distilbert"),zXt.forEach(t),XJr=r(IVe," \u2014 "),Ooe=n(IVe,"A",{href:!0});var WXt=s(Ooe);zJr=r(WXt,"FlaxDistilBertForSequenceClassification"),WXt.forEach(t),WJr=r(IVe," (DistilBERT model)"),IVe.forEach(t),QJr=i(De),G5=n(De,"LI",{});var NVe=s(G5);W5e=n(NVe,"STRONG",{});var QXt=s(W5e);HJr=r(QXt,"electra"),QXt.forEach(t),UJr=r(NVe," \u2014 "),Voe=n(NVe,"A",{href:!0});var HXt=s(Voe);JJr=r(HXt,"FlaxElectraForSequenceClassification"),HXt.forEach(t),YJr=r(NVe," (ELECTRA model)"),NVe.forEach(t),KJr=i(De),O5=n(De,"LI",{});var qVe=s(O5);Q5e=n(qVe,"STRONG",{});var UXt=s(Q5e);ZJr=r(UXt,"mbart"),UXt.forEach(t),eYr=r(qVe," \u2014 "),Xoe=n(qVe,"A",{href:!0});var JXt=s(Xoe);oYr=r(JXt,"FlaxMBartForSequenceClassification"),JXt.forEach(t),rYr=r(qVe," (mBART model)"),qVe.forEach(t),tYr=i(De),V5=n(De,"LI",{});var jVe=s(V5);H5e=n(jVe,"STRONG",{});var YXt=s(H5e);aYr=r(YXt,"roberta"),YXt.forEach(t),nYr=r(jVe," \u2014 "),zoe=n(jVe,"A",{href:!0});var KXt=s(zoe);sYr=r(KXt,"FlaxRobertaForSequenceClassification"),KXt.forEach(t),lYr=r(jVe," (RoBERTa model)"),jVe.forEach(t),iYr=i(De),X5=n(De,"LI",{});var DVe=s(X5);U5e=n(DVe,"STRONG",{});var ZXt=s(U5e);dYr=r(ZXt,"roformer"),ZXt.forEach(t),cYr=r(DVe," \u2014 "),Woe=n(DVe,"A",{href:!0});var ezt=s(Woe);fYr=r(ezt,"FlaxRoFormerForSequenceClassification"),ezt.forEach(t),mYr=r(DVe," (RoFormer model)"),DVe.forEach(t),gYr=i(De),z5=n(De,"LI",{});var GVe=s(z5);J5e=n(GVe,"STRONG",{});var ozt=s(J5e);hYr=r(ozt,"xlm-roberta"),ozt.forEach(t),pYr=r(GVe," \u2014 "),Qoe=n(GVe,"A",{href:!0});var rzt=s(Qoe);_Yr=r(rzt,"FlaxXLMRobertaForSequenceClassification"),rzt.forEach(t),uYr=r(GVe," (XLM-RoBERTa model)"),GVe.forEach(t),De.forEach(t),bYr=i(pi),T(W5.$$.fragment,pi),pi.forEach(t),hi.forEach(t),fWe=i(f),hf=n(f,"H2",{class:!0});var FHe=s(hf);Q5=n(FHe,"A",{id:!0,class:!0,href:!0});var tzt=s(Q5);Y5e=n(tzt,"SPAN",{});var azt=s(Y5e);T(O$.$$.fragment,azt),azt.forEach(t),tzt.forEach(t),vYr=i(FHe),K5e=n(FHe,"SPAN",{});var nzt=s(K5e);FYr=r(nzt,"FlaxAutoModelForQuestionAnswering"),nzt.forEach(t),FHe.forEach(t),mWe=i(f),Tr=n(f,"DIV",{class:!0});var _i=s(Tr);T(V$.$$.fragment,_i),TYr=i(_i),pf=n(_i,"P",{});var Cae=s(pf);MYr=r(Cae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Hoe=n(Cae,"A",{href:!0});var szt=s(Hoe);EYr=r(szt,"from_pretrained()"),szt.forEach(t),CYr=r(Cae," class method or the "),Uoe=n(Cae,"A",{href:!0});var lzt=s(Uoe);wYr=r(lzt,"from_config()"),lzt.forEach(t),AYr=r(Cae,` class
method.`),Cae.forEach(t),LYr=i(_i),X$=n(_i,"P",{});var THe=s(X$);yYr=r(THe,"This class cannot be instantiated directly using "),Z5e=n(THe,"CODE",{});var izt=s(Z5e);xYr=r(izt,"__init__()"),izt.forEach(t),$Yr=r(THe," (throws an error)."),THe.forEach(t),kYr=i(_i),Zt=n(_i,"DIV",{class:!0});var QA=s(Zt);T(z$.$$.fragment,QA),SYr=i(QA),e0e=n(QA,"P",{});var dzt=s(e0e);RYr=r(dzt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),dzt.forEach(t),PYr=i(QA),_f=n(QA,"P",{});var wae=s(_f);BYr=r(wae,`Note:
Loading a model from its configuration file does `),o0e=n(wae,"STRONG",{});var czt=s(o0e);IYr=r(czt,"not"),czt.forEach(t),NYr=r(wae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Joe=n(wae,"A",{href:!0});var fzt=s(Joe);qYr=r(fzt,"from_pretrained()"),fzt.forEach(t),jYr=r(wae," to load the model weights."),wae.forEach(t),DYr=i(QA),T(H5.$$.fragment,QA),QA.forEach(t),GYr=i(_i),Ur=n(_i,"DIV",{class:!0});var ui=s(Ur);T(W$.$$.fragment,ui),OYr=i(ui),r0e=n(ui,"P",{});var mzt=s(r0e);VYr=r(mzt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),mzt.forEach(t),XYr=i(ui),Ln=n(ui,"P",{});var HA=s(Ln);zYr=r(HA,"The model class to instantiate is selected based on the "),t0e=n(HA,"CODE",{});var gzt=s(t0e);WYr=r(gzt,"model_type"),gzt.forEach(t),QYr=r(HA,` property of the config object (either
passed as an argument or loaded from `),a0e=n(HA,"CODE",{});var hzt=s(a0e);HYr=r(hzt,"pretrained_model_name_or_path"),hzt.forEach(t),UYr=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n0e=n(HA,"CODE",{});var pzt=s(n0e);JYr=r(pzt,"pretrained_model_name_or_path"),pzt.forEach(t),YYr=r(HA,":"),HA.forEach(t),KYr=i(ui),Re=n(ui,"UL",{});var Ge=s(Re);U5=n(Ge,"LI",{});var OVe=s(U5);s0e=n(OVe,"STRONG",{});var _zt=s(s0e);ZYr=r(_zt,"albert"),_zt.forEach(t),eKr=r(OVe," \u2014 "),Yoe=n(OVe,"A",{href:!0});var uzt=s(Yoe);oKr=r(uzt,"FlaxAlbertForQuestionAnswering"),uzt.forEach(t),rKr=r(OVe," (ALBERT model)"),OVe.forEach(t),tKr=i(Ge),J5=n(Ge,"LI",{});var VVe=s(J5);l0e=n(VVe,"STRONG",{});var bzt=s(l0e);aKr=r(bzt,"bart"),bzt.forEach(t),nKr=r(VVe," \u2014 "),Koe=n(VVe,"A",{href:!0});var vzt=s(Koe);sKr=r(vzt,"FlaxBartForQuestionAnswering"),vzt.forEach(t),lKr=r(VVe," (BART model)"),VVe.forEach(t),iKr=i(Ge),Y5=n(Ge,"LI",{});var XVe=s(Y5);i0e=n(XVe,"STRONG",{});var Fzt=s(i0e);dKr=r(Fzt,"bert"),Fzt.forEach(t),cKr=r(XVe," \u2014 "),Zoe=n(XVe,"A",{href:!0});var Tzt=s(Zoe);fKr=r(Tzt,"FlaxBertForQuestionAnswering"),Tzt.forEach(t),mKr=r(XVe," (BERT model)"),XVe.forEach(t),gKr=i(Ge),K5=n(Ge,"LI",{});var zVe=s(K5);d0e=n(zVe,"STRONG",{});var Mzt=s(d0e);hKr=r(Mzt,"big_bird"),Mzt.forEach(t),pKr=r(zVe," \u2014 "),ere=n(zVe,"A",{href:!0});var Ezt=s(ere);_Kr=r(Ezt,"FlaxBigBirdForQuestionAnswering"),Ezt.forEach(t),uKr=r(zVe," (BigBird model)"),zVe.forEach(t),bKr=i(Ge),Z5=n(Ge,"LI",{});var WVe=s(Z5);c0e=n(WVe,"STRONG",{});var Czt=s(c0e);vKr=r(Czt,"distilbert"),Czt.forEach(t),FKr=r(WVe," \u2014 "),ore=n(WVe,"A",{href:!0});var wzt=s(ore);TKr=r(wzt,"FlaxDistilBertForQuestionAnswering"),wzt.forEach(t),MKr=r(WVe," (DistilBERT model)"),WVe.forEach(t),EKr=i(Ge),e0=n(Ge,"LI",{});var QVe=s(e0);f0e=n(QVe,"STRONG",{});var Azt=s(f0e);CKr=r(Azt,"electra"),Azt.forEach(t),wKr=r(QVe," \u2014 "),rre=n(QVe,"A",{href:!0});var Lzt=s(rre);AKr=r(Lzt,"FlaxElectraForQuestionAnswering"),Lzt.forEach(t),LKr=r(QVe," (ELECTRA model)"),QVe.forEach(t),yKr=i(Ge),o0=n(Ge,"LI",{});var HVe=s(o0);m0e=n(HVe,"STRONG",{});var yzt=s(m0e);xKr=r(yzt,"mbart"),yzt.forEach(t),$Kr=r(HVe," \u2014 "),tre=n(HVe,"A",{href:!0});var xzt=s(tre);kKr=r(xzt,"FlaxMBartForQuestionAnswering"),xzt.forEach(t),SKr=r(HVe," (mBART model)"),HVe.forEach(t),RKr=i(Ge),r0=n(Ge,"LI",{});var UVe=s(r0);g0e=n(UVe,"STRONG",{});var $zt=s(g0e);PKr=r($zt,"roberta"),$zt.forEach(t),BKr=r(UVe," \u2014 "),are=n(UVe,"A",{href:!0});var kzt=s(are);IKr=r(kzt,"FlaxRobertaForQuestionAnswering"),kzt.forEach(t),NKr=r(UVe," (RoBERTa model)"),UVe.forEach(t),qKr=i(Ge),t0=n(Ge,"LI",{});var JVe=s(t0);h0e=n(JVe,"STRONG",{});var Szt=s(h0e);jKr=r(Szt,"roformer"),Szt.forEach(t),DKr=r(JVe," \u2014 "),nre=n(JVe,"A",{href:!0});var Rzt=s(nre);GKr=r(Rzt,"FlaxRoFormerForQuestionAnswering"),Rzt.forEach(t),OKr=r(JVe," (RoFormer model)"),JVe.forEach(t),VKr=i(Ge),a0=n(Ge,"LI",{});var YVe=s(a0);p0e=n(YVe,"STRONG",{});var Pzt=s(p0e);XKr=r(Pzt,"xlm-roberta"),Pzt.forEach(t),zKr=r(YVe," \u2014 "),sre=n(YVe,"A",{href:!0});var Bzt=s(sre);WKr=r(Bzt,"FlaxXLMRobertaForQuestionAnswering"),Bzt.forEach(t),QKr=r(YVe," (XLM-RoBERTa model)"),YVe.forEach(t),Ge.forEach(t),HKr=i(ui),T(n0.$$.fragment,ui),ui.forEach(t),_i.forEach(t),gWe=i(f),uf=n(f,"H2",{class:!0});var MHe=s(uf);s0=n(MHe,"A",{id:!0,class:!0,href:!0});var Izt=s(s0);_0e=n(Izt,"SPAN",{});var Nzt=s(_0e);T(Q$.$$.fragment,Nzt),Nzt.forEach(t),Izt.forEach(t),UKr=i(MHe),u0e=n(MHe,"SPAN",{});var qzt=s(u0e);JKr=r(qzt,"FlaxAutoModelForTokenClassification"),qzt.forEach(t),MHe.forEach(t),hWe=i(f),Mr=n(f,"DIV",{class:!0});var bi=s(Mr);T(H$.$$.fragment,bi),YKr=i(bi),bf=n(bi,"P",{});var Aae=s(bf);KKr=r(Aae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),lre=n(Aae,"A",{href:!0});var jzt=s(lre);ZKr=r(jzt,"from_pretrained()"),jzt.forEach(t),eZr=r(Aae," class method or the "),ire=n(Aae,"A",{href:!0});var Dzt=s(ire);oZr=r(Dzt,"from_config()"),Dzt.forEach(t),rZr=r(Aae,` class
method.`),Aae.forEach(t),tZr=i(bi),U$=n(bi,"P",{});var EHe=s(U$);aZr=r(EHe,"This class cannot be instantiated directly using "),b0e=n(EHe,"CODE",{});var Gzt=s(b0e);nZr=r(Gzt,"__init__()"),Gzt.forEach(t),sZr=r(EHe," (throws an error)."),EHe.forEach(t),lZr=i(bi),ea=n(bi,"DIV",{class:!0});var UA=s(ea);T(J$.$$.fragment,UA),iZr=i(UA),v0e=n(UA,"P",{});var Ozt=s(v0e);dZr=r(Ozt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Ozt.forEach(t),cZr=i(UA),vf=n(UA,"P",{});var Lae=s(vf);fZr=r(Lae,`Note:
Loading a model from its configuration file does `),F0e=n(Lae,"STRONG",{});var Vzt=s(F0e);mZr=r(Vzt,"not"),Vzt.forEach(t),gZr=r(Lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),dre=n(Lae,"A",{href:!0});var Xzt=s(dre);hZr=r(Xzt,"from_pretrained()"),Xzt.forEach(t),pZr=r(Lae," to load the model weights."),Lae.forEach(t),_Zr=i(UA),T(l0.$$.fragment,UA),UA.forEach(t),uZr=i(bi),Jr=n(bi,"DIV",{class:!0});var vi=s(Jr);T(Y$.$$.fragment,vi),bZr=i(vi),T0e=n(vi,"P",{});var zzt=s(T0e);vZr=r(zzt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),zzt.forEach(t),FZr=i(vi),yn=n(vi,"P",{});var JA=s(yn);TZr=r(JA,"The model class to instantiate is selected based on the "),M0e=n(JA,"CODE",{});var Wzt=s(M0e);MZr=r(Wzt,"model_type"),Wzt.forEach(t),EZr=r(JA,` property of the config object (either
passed as an argument or loaded from `),E0e=n(JA,"CODE",{});var Qzt=s(E0e);CZr=r(Qzt,"pretrained_model_name_or_path"),Qzt.forEach(t),wZr=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C0e=n(JA,"CODE",{});var Hzt=s(C0e);AZr=r(Hzt,"pretrained_model_name_or_path"),Hzt.forEach(t),LZr=r(JA,":"),JA.forEach(t),yZr=i(vi),Ve=n(vi,"UL",{});var Mo=s(Ve);i0=n(Mo,"LI",{});var KVe=s(i0);w0e=n(KVe,"STRONG",{});var Uzt=s(w0e);xZr=r(Uzt,"albert"),Uzt.forEach(t),$Zr=r(KVe," \u2014 "),cre=n(KVe,"A",{href:!0});var Jzt=s(cre);kZr=r(Jzt,"FlaxAlbertForTokenClassification"),Jzt.forEach(t),SZr=r(KVe," (ALBERT model)"),KVe.forEach(t),RZr=i(Mo),d0=n(Mo,"LI",{});var ZVe=s(d0);A0e=n(ZVe,"STRONG",{});var Yzt=s(A0e);PZr=r(Yzt,"bert"),Yzt.forEach(t),BZr=r(ZVe," \u2014 "),fre=n(ZVe,"A",{href:!0});var Kzt=s(fre);IZr=r(Kzt,"FlaxBertForTokenClassification"),Kzt.forEach(t),NZr=r(ZVe," (BERT model)"),ZVe.forEach(t),qZr=i(Mo),c0=n(Mo,"LI",{});var eXe=s(c0);L0e=n(eXe,"STRONG",{});var Zzt=s(L0e);jZr=r(Zzt,"big_bird"),Zzt.forEach(t),DZr=r(eXe," \u2014 "),mre=n(eXe,"A",{href:!0});var eWt=s(mre);GZr=r(eWt,"FlaxBigBirdForTokenClassification"),eWt.forEach(t),OZr=r(eXe," (BigBird model)"),eXe.forEach(t),VZr=i(Mo),f0=n(Mo,"LI",{});var oXe=s(f0);y0e=n(oXe,"STRONG",{});var oWt=s(y0e);XZr=r(oWt,"distilbert"),oWt.forEach(t),zZr=r(oXe," \u2014 "),gre=n(oXe,"A",{href:!0});var rWt=s(gre);WZr=r(rWt,"FlaxDistilBertForTokenClassification"),rWt.forEach(t),QZr=r(oXe," (DistilBERT model)"),oXe.forEach(t),HZr=i(Mo),m0=n(Mo,"LI",{});var rXe=s(m0);x0e=n(rXe,"STRONG",{});var tWt=s(x0e);UZr=r(tWt,"electra"),tWt.forEach(t),JZr=r(rXe," \u2014 "),hre=n(rXe,"A",{href:!0});var aWt=s(hre);YZr=r(aWt,"FlaxElectraForTokenClassification"),aWt.forEach(t),KZr=r(rXe," (ELECTRA model)"),rXe.forEach(t),ZZr=i(Mo),g0=n(Mo,"LI",{});var tXe=s(g0);$0e=n(tXe,"STRONG",{});var nWt=s($0e);eet=r(nWt,"roberta"),nWt.forEach(t),oet=r(tXe," \u2014 "),pre=n(tXe,"A",{href:!0});var sWt=s(pre);ret=r(sWt,"FlaxRobertaForTokenClassification"),sWt.forEach(t),tet=r(tXe," (RoBERTa model)"),tXe.forEach(t),aet=i(Mo),h0=n(Mo,"LI",{});var aXe=s(h0);k0e=n(aXe,"STRONG",{});var lWt=s(k0e);net=r(lWt,"roformer"),lWt.forEach(t),set=r(aXe," \u2014 "),_re=n(aXe,"A",{href:!0});var iWt=s(_re);iet=r(iWt,"FlaxRoFormerForTokenClassification"),iWt.forEach(t),det=r(aXe," (RoFormer model)"),aXe.forEach(t),cet=i(Mo),p0=n(Mo,"LI",{});var nXe=s(p0);S0e=n(nXe,"STRONG",{});var dWt=s(S0e);fet=r(dWt,"xlm-roberta"),dWt.forEach(t),met=r(nXe," \u2014 "),ure=n(nXe,"A",{href:!0});var cWt=s(ure);get=r(cWt,"FlaxXLMRobertaForTokenClassification"),cWt.forEach(t),het=r(nXe," (XLM-RoBERTa model)"),nXe.forEach(t),Mo.forEach(t),pet=i(vi),T(_0.$$.fragment,vi),vi.forEach(t),bi.forEach(t),pWe=i(f),Ff=n(f,"H2",{class:!0});var CHe=s(Ff);u0=n(CHe,"A",{id:!0,class:!0,href:!0});var fWt=s(u0);R0e=n(fWt,"SPAN",{});var mWt=s(R0e);T(K$.$$.fragment,mWt),mWt.forEach(t),fWt.forEach(t),_et=i(CHe),P0e=n(CHe,"SPAN",{});var gWt=s(P0e);uet=r(gWt,"FlaxAutoModelForMultipleChoice"),gWt.forEach(t),CHe.forEach(t),_We=i(f),Er=n(f,"DIV",{class:!0});var Fi=s(Er);T(Z$.$$.fragment,Fi),bet=i(Fi),Tf=n(Fi,"P",{});var yae=s(Tf);vet=r(yae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bre=n(yae,"A",{href:!0});var hWt=s(bre);Fet=r(hWt,"from_pretrained()"),hWt.forEach(t),Tet=r(yae," class method or the "),vre=n(yae,"A",{href:!0});var pWt=s(vre);Met=r(pWt,"from_config()"),pWt.forEach(t),Eet=r(yae,` class
method.`),yae.forEach(t),Cet=i(Fi),ek=n(Fi,"P",{});var wHe=s(ek);wet=r(wHe,"This class cannot be instantiated directly using "),B0e=n(wHe,"CODE",{});var _Wt=s(B0e);Aet=r(_Wt,"__init__()"),_Wt.forEach(t),Let=r(wHe," (throws an error)."),wHe.forEach(t),yet=i(Fi),oa=n(Fi,"DIV",{class:!0});var YA=s(oa);T(ok.$$.fragment,YA),xet=i(YA),I0e=n(YA,"P",{});var uWt=s(I0e);$et=r(uWt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),uWt.forEach(t),ket=i(YA),Mf=n(YA,"P",{});var xae=s(Mf);Set=r(xae,`Note:
Loading a model from its configuration file does `),N0e=n(xae,"STRONG",{});var bWt=s(N0e);Ret=r(bWt,"not"),bWt.forEach(t),Pet=r(xae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fre=n(xae,"A",{href:!0});var vWt=s(Fre);Bet=r(vWt,"from_pretrained()"),vWt.forEach(t),Iet=r(xae," to load the model weights."),xae.forEach(t),Net=i(YA),T(b0.$$.fragment,YA),YA.forEach(t),qet=i(Fi),Yr=n(Fi,"DIV",{class:!0});var Ti=s(Yr);T(rk.$$.fragment,Ti),jet=i(Ti),q0e=n(Ti,"P",{});var FWt=s(q0e);Det=r(FWt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),FWt.forEach(t),Get=i(Ti),xn=n(Ti,"P",{});var KA=s(xn);Oet=r(KA,"The model class to instantiate is selected based on the "),j0e=n(KA,"CODE",{});var TWt=s(j0e);Vet=r(TWt,"model_type"),TWt.forEach(t),Xet=r(KA,` property of the config object (either
passed as an argument or loaded from `),D0e=n(KA,"CODE",{});var MWt=s(D0e);zet=r(MWt,"pretrained_model_name_or_path"),MWt.forEach(t),Wet=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G0e=n(KA,"CODE",{});var EWt=s(G0e);Qet=r(EWt,"pretrained_model_name_or_path"),EWt.forEach(t),Het=r(KA,":"),KA.forEach(t),Uet=i(Ti),Xe=n(Ti,"UL",{});var Eo=s(Xe);v0=n(Eo,"LI",{});var sXe=s(v0);O0e=n(sXe,"STRONG",{});var CWt=s(O0e);Jet=r(CWt,"albert"),CWt.forEach(t),Yet=r(sXe," \u2014 "),Tre=n(sXe,"A",{href:!0});var wWt=s(Tre);Ket=r(wWt,"FlaxAlbertForMultipleChoice"),wWt.forEach(t),Zet=r(sXe," (ALBERT model)"),sXe.forEach(t),eot=i(Eo),F0=n(Eo,"LI",{});var lXe=s(F0);V0e=n(lXe,"STRONG",{});var AWt=s(V0e);oot=r(AWt,"bert"),AWt.forEach(t),rot=r(lXe," \u2014 "),Mre=n(lXe,"A",{href:!0});var LWt=s(Mre);tot=r(LWt,"FlaxBertForMultipleChoice"),LWt.forEach(t),aot=r(lXe," (BERT model)"),lXe.forEach(t),not=i(Eo),T0=n(Eo,"LI",{});var iXe=s(T0);X0e=n(iXe,"STRONG",{});var yWt=s(X0e);sot=r(yWt,"big_bird"),yWt.forEach(t),lot=r(iXe," \u2014 "),Ere=n(iXe,"A",{href:!0});var xWt=s(Ere);iot=r(xWt,"FlaxBigBirdForMultipleChoice"),xWt.forEach(t),dot=r(iXe," (BigBird model)"),iXe.forEach(t),cot=i(Eo),M0=n(Eo,"LI",{});var dXe=s(M0);z0e=n(dXe,"STRONG",{});var $Wt=s(z0e);fot=r($Wt,"distilbert"),$Wt.forEach(t),mot=r(dXe," \u2014 "),Cre=n(dXe,"A",{href:!0});var kWt=s(Cre);got=r(kWt,"FlaxDistilBertForMultipleChoice"),kWt.forEach(t),hot=r(dXe," (DistilBERT model)"),dXe.forEach(t),pot=i(Eo),E0=n(Eo,"LI",{});var cXe=s(E0);W0e=n(cXe,"STRONG",{});var SWt=s(W0e);_ot=r(SWt,"electra"),SWt.forEach(t),uot=r(cXe," \u2014 "),wre=n(cXe,"A",{href:!0});var RWt=s(wre);bot=r(RWt,"FlaxElectraForMultipleChoice"),RWt.forEach(t),vot=r(cXe," (ELECTRA model)"),cXe.forEach(t),Fot=i(Eo),C0=n(Eo,"LI",{});var fXe=s(C0);Q0e=n(fXe,"STRONG",{});var PWt=s(Q0e);Tot=r(PWt,"roberta"),PWt.forEach(t),Mot=r(fXe," \u2014 "),Are=n(fXe,"A",{href:!0});var BWt=s(Are);Eot=r(BWt,"FlaxRobertaForMultipleChoice"),BWt.forEach(t),Cot=r(fXe," (RoBERTa model)"),fXe.forEach(t),wot=i(Eo),w0=n(Eo,"LI",{});var mXe=s(w0);H0e=n(mXe,"STRONG",{});var IWt=s(H0e);Aot=r(IWt,"roformer"),IWt.forEach(t),Lot=r(mXe," \u2014 "),Lre=n(mXe,"A",{href:!0});var NWt=s(Lre);yot=r(NWt,"FlaxRoFormerForMultipleChoice"),NWt.forEach(t),xot=r(mXe," (RoFormer model)"),mXe.forEach(t),$ot=i(Eo),A0=n(Eo,"LI",{});var gXe=s(A0);U0e=n(gXe,"STRONG",{});var qWt=s(U0e);kot=r(qWt,"xlm-roberta"),qWt.forEach(t),Sot=r(gXe," \u2014 "),yre=n(gXe,"A",{href:!0});var jWt=s(yre);Rot=r(jWt,"FlaxXLMRobertaForMultipleChoice"),jWt.forEach(t),Pot=r(gXe," (XLM-RoBERTa model)"),gXe.forEach(t),Eo.forEach(t),Bot=i(Ti),T(L0.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),uWe=i(f),Ef=n(f,"H2",{class:!0});var AHe=s(Ef);y0=n(AHe,"A",{id:!0,class:!0,href:!0});var DWt=s(y0);J0e=n(DWt,"SPAN",{});var GWt=s(J0e);T(tk.$$.fragment,GWt),GWt.forEach(t),DWt.forEach(t),Iot=i(AHe),Y0e=n(AHe,"SPAN",{});var OWt=s(Y0e);Not=r(OWt,"FlaxAutoModelForNextSentencePrediction"),OWt.forEach(t),AHe.forEach(t),bWe=i(f),Cr=n(f,"DIV",{class:!0});var Mi=s(Cr);T(ak.$$.fragment,Mi),qot=i(Mi),Cf=n(Mi,"P",{});var $ae=s(Cf);jot=r($ae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),xre=n($ae,"A",{href:!0});var VWt=s(xre);Dot=r(VWt,"from_pretrained()"),VWt.forEach(t),Got=r($ae," class method or the "),$re=n($ae,"A",{href:!0});var XWt=s($re);Oot=r(XWt,"from_config()"),XWt.forEach(t),Vot=r($ae,` class
method.`),$ae.forEach(t),Xot=i(Mi),nk=n(Mi,"P",{});var LHe=s(nk);zot=r(LHe,"This class cannot be instantiated directly using "),K0e=n(LHe,"CODE",{});var zWt=s(K0e);Wot=r(zWt,"__init__()"),zWt.forEach(t),Qot=r(LHe," (throws an error)."),LHe.forEach(t),Hot=i(Mi),ra=n(Mi,"DIV",{class:!0});var ZA=s(ra);T(sk.$$.fragment,ZA),Uot=i(ZA),Z0e=n(ZA,"P",{});var WWt=s(Z0e);Jot=r(WWt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),WWt.forEach(t),Yot=i(ZA),wf=n(ZA,"P",{});var kae=s(wf);Kot=r(kae,`Note:
Loading a model from its configuration file does `),ewe=n(kae,"STRONG",{});var QWt=s(ewe);Zot=r(QWt,"not"),QWt.forEach(t),ert=r(kae,` load the model weights. It only affects the
model\u2019s configuration. Use `),kre=n(kae,"A",{href:!0});var HWt=s(kre);ort=r(HWt,"from_pretrained()"),HWt.forEach(t),rrt=r(kae," to load the model weights."),kae.forEach(t),trt=i(ZA),T(x0.$$.fragment,ZA),ZA.forEach(t),art=i(Mi),Kr=n(Mi,"DIV",{class:!0});var Ei=s(Kr);T(lk.$$.fragment,Ei),nrt=i(Ei),owe=n(Ei,"P",{});var UWt=s(owe);srt=r(UWt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),UWt.forEach(t),lrt=i(Ei),$n=n(Ei,"P",{});var e6=s($n);irt=r(e6,"The model class to instantiate is selected based on the "),rwe=n(e6,"CODE",{});var JWt=s(rwe);drt=r(JWt,"model_type"),JWt.forEach(t),crt=r(e6,` property of the config object (either
passed as an argument or loaded from `),twe=n(e6,"CODE",{});var YWt=s(twe);frt=r(YWt,"pretrained_model_name_or_path"),YWt.forEach(t),mrt=r(e6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),awe=n(e6,"CODE",{});var KWt=s(awe);grt=r(KWt,"pretrained_model_name_or_path"),KWt.forEach(t),hrt=r(e6,":"),e6.forEach(t),prt=i(Ei),nwe=n(Ei,"UL",{});var ZWt=s(nwe);$0=n(ZWt,"LI",{});var hXe=s($0);swe=n(hXe,"STRONG",{});var eQt=s(swe);_rt=r(eQt,"bert"),eQt.forEach(t),urt=r(hXe," \u2014 "),Sre=n(hXe,"A",{href:!0});var oQt=s(Sre);brt=r(oQt,"FlaxBertForNextSentencePrediction"),oQt.forEach(t),vrt=r(hXe," (BERT model)"),hXe.forEach(t),ZWt.forEach(t),Frt=i(Ei),T(k0.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),vWe=i(f),Af=n(f,"H2",{class:!0});var yHe=s(Af);S0=n(yHe,"A",{id:!0,class:!0,href:!0});var rQt=s(S0);lwe=n(rQt,"SPAN",{});var tQt=s(lwe);T(ik.$$.fragment,tQt),tQt.forEach(t),rQt.forEach(t),Trt=i(yHe),iwe=n(yHe,"SPAN",{});var aQt=s(iwe);Mrt=r(aQt,"FlaxAutoModelForImageClassification"),aQt.forEach(t),yHe.forEach(t),FWe=i(f),wr=n(f,"DIV",{class:!0});var Ci=s(wr);T(dk.$$.fragment,Ci),Ert=i(Ci),Lf=n(Ci,"P",{});var Sae=s(Lf);Crt=r(Sae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Rre=n(Sae,"A",{href:!0});var nQt=s(Rre);wrt=r(nQt,"from_pretrained()"),nQt.forEach(t),Art=r(Sae," class method or the "),Pre=n(Sae,"A",{href:!0});var sQt=s(Pre);Lrt=r(sQt,"from_config()"),sQt.forEach(t),yrt=r(Sae,` class
method.`),Sae.forEach(t),xrt=i(Ci),ck=n(Ci,"P",{});var xHe=s(ck);$rt=r(xHe,"This class cannot be instantiated directly using "),dwe=n(xHe,"CODE",{});var lQt=s(dwe);krt=r(lQt,"__init__()"),lQt.forEach(t),Srt=r(xHe," (throws an error)."),xHe.forEach(t),Rrt=i(Ci),ta=n(Ci,"DIV",{class:!0});var o6=s(ta);T(fk.$$.fragment,o6),Prt=i(o6),cwe=n(o6,"P",{});var iQt=s(cwe);Brt=r(iQt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),iQt.forEach(t),Irt=i(o6),yf=n(o6,"P",{});var Rae=s(yf);Nrt=r(Rae,`Note:
Loading a model from its configuration file does `),fwe=n(Rae,"STRONG",{});var dQt=s(fwe);qrt=r(dQt,"not"),dQt.forEach(t),jrt=r(Rae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bre=n(Rae,"A",{href:!0});var cQt=s(Bre);Drt=r(cQt,"from_pretrained()"),cQt.forEach(t),Grt=r(Rae," to load the model weights."),Rae.forEach(t),Ort=i(o6),T(R0.$$.fragment,o6),o6.forEach(t),Vrt=i(Ci),Zr=n(Ci,"DIV",{class:!0});var wi=s(Zr);T(mk.$$.fragment,wi),Xrt=i(wi),mwe=n(wi,"P",{});var fQt=s(mwe);zrt=r(fQt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),fQt.forEach(t),Wrt=i(wi),kn=n(wi,"P",{});var r6=s(kn);Qrt=r(r6,"The model class to instantiate is selected based on the "),gwe=n(r6,"CODE",{});var mQt=s(gwe);Hrt=r(mQt,"model_type"),mQt.forEach(t),Urt=r(r6,` property of the config object (either
passed as an argument or loaded from `),hwe=n(r6,"CODE",{});var gQt=s(hwe);Jrt=r(gQt,"pretrained_model_name_or_path"),gQt.forEach(t),Yrt=r(r6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pwe=n(r6,"CODE",{});var hQt=s(pwe);Krt=r(hQt,"pretrained_model_name_or_path"),hQt.forEach(t),Zrt=r(r6,":"),r6.forEach(t),ett=i(wi),gk=n(wi,"UL",{});var $He=s(gk);P0=n($He,"LI",{});var pXe=s(P0);_we=n(pXe,"STRONG",{});var pQt=s(_we);ott=r(pQt,"beit"),pQt.forEach(t),rtt=r(pXe," \u2014 "),Ire=n(pXe,"A",{href:!0});var _Qt=s(Ire);ttt=r(_Qt,"FlaxBeitForImageClassification"),_Qt.forEach(t),att=r(pXe," (BEiT model)"),pXe.forEach(t),ntt=i($He),B0=n($He,"LI",{});var _Xe=s(B0);uwe=n(_Xe,"STRONG",{});var uQt=s(uwe);stt=r(uQt,"vit"),uQt.forEach(t),ltt=r(_Xe," \u2014 "),Nre=n(_Xe,"A",{href:!0});var bQt=s(Nre);itt=r(bQt,"FlaxViTForImageClassification"),bQt.forEach(t),dtt=r(_Xe," (ViT model)"),_Xe.forEach(t),$He.forEach(t),ctt=i(wi),T(I0.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),TWe=i(f),xf=n(f,"H2",{class:!0});var kHe=s(xf);N0=n(kHe,"A",{id:!0,class:!0,href:!0});var vQt=s(N0);bwe=n(vQt,"SPAN",{});var FQt=s(bwe);T(hk.$$.fragment,FQt),FQt.forEach(t),vQt.forEach(t),ftt=i(kHe),vwe=n(kHe,"SPAN",{});var TQt=s(vwe);mtt=r(TQt,"FlaxAutoModelForVision2Seq"),TQt.forEach(t),kHe.forEach(t),MWe=i(f),Ar=n(f,"DIV",{class:!0});var Ai=s(Ar);T(pk.$$.fragment,Ai),gtt=i(Ai),$f=n(Ai,"P",{});var Pae=s($f);htt=r(Pae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),qre=n(Pae,"A",{href:!0});var MQt=s(qre);ptt=r(MQt,"from_pretrained()"),MQt.forEach(t),_tt=r(Pae," class method or the "),jre=n(Pae,"A",{href:!0});var EQt=s(jre);utt=r(EQt,"from_config()"),EQt.forEach(t),btt=r(Pae,` class
method.`),Pae.forEach(t),vtt=i(Ai),_k=n(Ai,"P",{});var SHe=s(_k);Ftt=r(SHe,"This class cannot be instantiated directly using "),Fwe=n(SHe,"CODE",{});var CQt=s(Fwe);Ttt=r(CQt,"__init__()"),CQt.forEach(t),Mtt=r(SHe," (throws an error)."),SHe.forEach(t),Ett=i(Ai),aa=n(Ai,"DIV",{class:!0});var t6=s(aa);T(uk.$$.fragment,t6),Ctt=i(t6),Twe=n(t6,"P",{});var wQt=s(Twe);wtt=r(wQt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),wQt.forEach(t),Att=i(t6),kf=n(t6,"P",{});var Bae=s(kf);Ltt=r(Bae,`Note:
Loading a model from its configuration file does `),Mwe=n(Bae,"STRONG",{});var AQt=s(Mwe);ytt=r(AQt,"not"),AQt.forEach(t),xtt=r(Bae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dre=n(Bae,"A",{href:!0});var LQt=s(Dre);$tt=r(LQt,"from_pretrained()"),LQt.forEach(t),ktt=r(Bae," to load the model weights."),Bae.forEach(t),Stt=i(t6),T(q0.$$.fragment,t6),t6.forEach(t),Rtt=i(Ai),et=n(Ai,"DIV",{class:!0});var Li=s(et);T(bk.$$.fragment,Li),Ptt=i(Li),Ewe=n(Li,"P",{});var yQt=s(Ewe);Btt=r(yQt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),yQt.forEach(t),Itt=i(Li),Sn=n(Li,"P",{});var a6=s(Sn);Ntt=r(a6,"The model class to instantiate is selected based on the "),Cwe=n(a6,"CODE",{});var xQt=s(Cwe);qtt=r(xQt,"model_type"),xQt.forEach(t),jtt=r(a6,` property of the config object (either
passed as an argument or loaded from `),wwe=n(a6,"CODE",{});var $Qt=s(wwe);Dtt=r($Qt,"pretrained_model_name_or_path"),$Qt.forEach(t),Gtt=r(a6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Awe=n(a6,"CODE",{});var kQt=s(Awe);Ott=r(kQt,"pretrained_model_name_or_path"),kQt.forEach(t),Vtt=r(a6,":"),a6.forEach(t),Xtt=i(Li),Lwe=n(Li,"UL",{});var SQt=s(Lwe);j0=n(SQt,"LI",{});var uXe=s(j0);ywe=n(uXe,"STRONG",{});var RQt=s(ywe);ztt=r(RQt,"vision-encoder-decoder"),RQt.forEach(t),Wtt=r(uXe," \u2014 "),Gre=n(uXe,"A",{href:!0});var PQt=s(Gre);Qtt=r(PQt,"FlaxVisionEncoderDecoderModel"),PQt.forEach(t),Htt=r(uXe," (Vision Encoder decoder model)"),uXe.forEach(t),SQt.forEach(t),Utt=i(Li),T(D0.$$.fragment,Li),Li.forEach(t),Ai.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(DUt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Pn,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.AutoConfig"),c(In,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.AutoModel"),c(Nn,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.AutoTokenizer"),c(Pi,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertModel"),c(jf,"id","extending-the-auto-classes"),c(jf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jf,"href","#extending-the-auto-classes"),c(Bi,"class","relative group"),c(Gf,"id","transformers.AutoConfig"),c(Gf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gf,"href","#transformers.AutoConfig"),c(Ii,"class","relative group"),c(QS,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(HS,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig"),c(US,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig"),c(JS,"href","/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitConfig"),c(YS,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig"),c(KS,"href","/docs/transformers/pr_17938/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(ZS,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig"),c(eR,"href","/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(oR,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(rR,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(tR,"href","/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomConfig"),c(aR,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig"),c(nR,"href","/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineConfig"),c(sR,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPConfig"),c(lR,"href","/docs/transformers/pr_17938/en/model_doc/codegen#transformers.CodeGenConfig"),c(iR,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig"),c(dR,"href","/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextConfig"),c(cR,"href","/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLConfig"),c(fR,"href","/docs/transformers/pr_17938/en/model_doc/cvt#transformers.CvtConfig"),c(mR,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(gR,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(hR,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(pR,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig"),c(_R,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(uR,"href","/docs/transformers/pr_17938/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(bR,"href","/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTConfig"),c(vR,"href","/docs/transformers/pr_17938/en/model_doc/detr#transformers.DetrConfig"),c(FR,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig"),c(TR,"href","/docs/transformers/pr_17938/en/model_doc/dpr#transformers.DPRConfig"),c(MR,"href","/docs/transformers/pr_17938/en/model_doc/dpt#transformers.DPTConfig"),c(ER,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig"),c(CR,"href","/docs/transformers/pr_17938/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(wR,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig"),c(AR,"href","/docs/transformers/pr_17938/en/model_doc/flava#transformers.FlavaConfig"),c(LR,"href","/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetConfig"),c(yR,"href","/docs/transformers/pr_17938/en/model_doc/fsmt#transformers.FSMTConfig"),c(xR,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig"),c($R,"href","/docs/transformers/pr_17938/en/model_doc/glpn#transformers.GLPNConfig"),c(kR,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config"),c(SR,"href","/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(RR,"href","/docs/transformers/pr_17938/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(PR,"href","/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJConfig"),c(BR,"href","/docs/transformers/pr_17938/en/model_doc/groupvit#transformers.GroupViTConfig"),c(IR,"href","/docs/transformers/pr_17938/en/model_doc/hubert#transformers.HubertConfig"),c(NR,"href","/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertConfig"),c(qR,"href","/docs/transformers/pr_17938/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(jR,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(DR,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(GR,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(OR,"href","/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDConfig"),c(VR,"href","/docs/transformers/pr_17938/en/model_doc/levit#transformers.LevitConfig"),c(XR,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig"),c(zR,"href","/docs/transformers/pr_17938/en/model_doc/longt5#transformers.LongT5Config"),c(WR,"href","/docs/transformers/pr_17938/en/model_doc/luke#transformers.LukeConfig"),c(QR,"href","/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertConfig"),c(HR,"href","/docs/transformers/pr_17938/en/model_doc/m2m_100#transformers.M2M100Config"),c(UR,"href","/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianConfig"),c(JR,"href","/docs/transformers/pr_17938/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(YR,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig"),c(KR,"href","/docs/transformers/pr_17938/en/model_doc/mctct#transformers.MCTCTConfig"),c(ZR,"href","/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(eP,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(oP,"href","/docs/transformers/pr_17938/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(rP,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig"),c(tP,"href","/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5Config"),c(aP,"href","/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpConfig"),c(nP,"href","/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaConfig"),c(sP,"href","/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(lP,"href","/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(iP,"href","/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTConfig"),c(dP,"href","/docs/transformers/pr_17938/en/model_doc/owlvit#transformers.OwlViTConfig"),c(cP,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusConfig"),c(fP,"href","/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverConfig"),c(mP,"href","/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartConfig"),c(gP,"href","/docs/transformers/pr_17938/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(hP,"href","/docs/transformers/pr_17938/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(pP,"href","/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(_P,"href","/docs/transformers/pr_17938/en/model_doc/rag#transformers.RagConfig"),c(uP,"href","/docs/transformers/pr_17938/en/model_doc/realm#transformers.RealmConfig"),c(bP,"href","/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerConfig"),c(vP,"href","/docs/transformers/pr_17938/en/model_doc/regnet#transformers.RegNetConfig"),c(FP,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig"),c(TP,"href","/docs/transformers/pr_17938/en/model_doc/resnet#transformers.ResNetConfig"),c(MP,"href","/docs/transformers/pr_17938/en/model_doc/retribert#transformers.RetriBertConfig"),c(EP,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig"),c(CP,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig"),c(wP,"href","/docs/transformers/pr_17938/en/model_doc/segformer#transformers.SegformerConfig"),c(AP,"href","/docs/transformers/pr_17938/en/model_doc/sew#transformers.SEWConfig"),c(LP,"href","/docs/transformers/pr_17938/en/model_doc/sew-d#transformers.SEWDConfig"),c(yP,"href","/docs/transformers/pr_17938/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(xP,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c($P,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(kP,"href","/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterConfig"),c(SP,"href","/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(RP,"href","/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinConfig"),c(PP,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Config"),c(BP,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasConfig"),c(IP,"href","/docs/transformers/pr_17938/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(NP,"href","/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(qP,"href","/docs/transformers/pr_17938/en/model_doc/trocr#transformers.TrOCRConfig"),c(jP,"href","/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(DP,"href","/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(GP,"href","/docs/transformers/pr_17938/en/model_doc/van#transformers.VanConfig"),c(OP,"href","/docs/transformers/pr_17938/en/model_doc/vilt#transformers.ViltConfig"),c(VP,"href","/docs/transformers/pr_17938/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(XP,"href","/docs/transformers/pr_17938/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(zP,"href","/docs/transformers/pr_17938/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(WP,"href","/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTConfig"),c(QP,"href","/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(HP,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(UP,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(JP,"href","/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMConfig"),c(YP,"href","/docs/transformers/pr_17938/en/model_doc/xglm#transformers.XGLMConfig"),c(KP,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig"),c(ZP,"href","/docs/transformers/pr_17938/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(eB,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(oB,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(rB,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig"),c(tB,"href","/docs/transformers/pr_17938/en/model_doc/yolos#transformers.YolosConfig"),c(aB,"href","/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoConfig"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oh,"id","transformers.AutoTokenizer"),c(oh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oh,"href","#transformers.AutoTokenizer"),c(qi,"class","relative group"),c(nB,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(sB,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertTokenizer"),c(lB,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(iB,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartTokenizer"),c(dB,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartTokenizerFast"),c(cB,"href","/docs/transformers/pr_17938/en/model_doc/barthez#transformers.BarthezTokenizer"),c(fB,"href","/docs/transformers/pr_17938/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(mB,"href","/docs/transformers/pr_17938/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(gB,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizer"),c(hB,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizerFast"),c(pB,"href","/docs/transformers/pr_17938/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(_B,"href","/docs/transformers/pr_17938/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(uB,"href","/docs/transformers/pr_17938/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(bB,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(vB,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(FB,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(TB,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(MB,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(EB,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(CB,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(wB,"href","/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(AB,"href","/docs/transformers/pr_17938/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(LB,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertTokenizer"),c(yB,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(xB,"href","/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineTokenizer"),c($B,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPTokenizer"),c(kB,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(SB,"href","/docs/transformers/pr_17938/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(RB,"href","/docs/transformers/pr_17938/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(PB,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(BB,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(IB,"href","/docs/transformers/pr_17938/en/model_doc/cpm#transformers.CpmTokenizer"),c(NB,"href","/docs/transformers/pr_17938/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(qB,"href","/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(jB,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaTokenizer"),c(DB,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(GB,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaTokenizer"),c(OB,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(VB,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(XB,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(zB,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(WB,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(QB,"href","/docs/transformers/pr_17938/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(HB,"href","/docs/transformers/pr_17938/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(UB,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraTokenizer"),c(JB,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(YB,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(KB,"href","/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetTokenizer"),c(ZB,"href","/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(eI,"href","/docs/transformers/pr_17938/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(oI,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelTokenizer"),c(rI,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(tI,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(aI,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(nI,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(sI,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(lI,"href","/docs/transformers/pr_17938/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(iI,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(dI,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(cI,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPTokenizer"),c(fI,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(mI,"href","/docs/transformers/pr_17938/en/model_doc/herbert#transformers.HerbertTokenizer"),c(gI,"href","/docs/transformers/pr_17938/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(hI,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(pI,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaTokenizer"),c(_I,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(uI,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(bI,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(vI,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(FI,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(TI,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(MI,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(EI,"href","/docs/transformers/pr_17938/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(CI,"href","/docs/transformers/pr_17938/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(wI,"href","/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDTokenizer"),c(AI,"href","/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDTokenizerFast"),c(LI,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerTokenizer"),c(yI,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(xI,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Tokenizer"),c($I,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5TokenizerFast"),c(kI,"href","/docs/transformers/pr_17938/en/model_doc/luke#transformers.LukeTokenizer"),c(SI,"href","/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(RI,"href","/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(PI,"href","/docs/transformers/pr_17938/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(BI,"href","/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianTokenizer"),c(II,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartTokenizer"),c(NI,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(qI,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(jI,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(DI,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizer"),c(GI,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizerFast"),c(OI,"href","/docs/transformers/pr_17938/en/model_doc/mluke#transformers.MLukeTokenizer"),c(VI,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(XI,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(zI,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(WI,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(QI,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Tokenizer"),c(HI,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5TokenizerFast"),c(UI,"href","/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpTokenizer"),c(JI,"href","/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(YI,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizer"),c(KI,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizerFast"),c(ZI,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertTokenizer"),c(eN,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(oN,"href","/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(rN,"href","/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(tN,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(aN,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPTokenizer"),c(nN,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(sN,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(lN,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(iN,"href","/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(dN,"href","/docs/transformers/pr_17938/en/model_doc/phobert#transformers.PhobertTokenizer"),c(cN,"href","/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartTokenizer"),c(fN,"href","/docs/transformers/pr_17938/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(mN,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizer"),c(gN,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizerFast"),c(hN,"href","/docs/transformers/pr_17938/en/model_doc/rag#transformers.RagTokenizer"),c(pN,"href","/docs/transformers/pr_17938/en/model_doc/realm#transformers.RealmTokenizer"),c(_N,"href","/docs/transformers/pr_17938/en/model_doc/realm#transformers.RealmTokenizerFast"),c(uN,"href","/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerTokenizer"),c(bN,"href","/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(vN,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertTokenizer"),c(FN,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(TN,"href","/docs/transformers/pr_17938/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(MN,"href","/docs/transformers/pr_17938/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(EN,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaTokenizer"),c(CN,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(wN,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(AN,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(LN,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(yN,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(xN,"href","/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterTokenizer"),c($N,"href","/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(kN,"href","/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(SN,"href","/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(RN,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Tokenizer"),c(PN,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5TokenizerFast"),c(BN,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasTokenizer"),c(IN,"href","/docs/transformers/pr_17938/en/model_doc/tapex#transformers.TapexTokenizer"),c(NN,"href","/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(qN,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizer"),c(jN,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizerFast"),c(DN,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizer"),c(GN,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizerFast"),c(ON,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(VN,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(XN,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(zN,"href","/docs/transformers/pr_17938/en/model_doc/xglm#transformers.XGLMTokenizer"),c(WN,"href","/docs/transformers/pr_17938/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(QN,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMTokenizer"),c(HN,"href","/docs/transformers/pr_17938/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(UN,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(JN,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(YN,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaTokenizer"),c(KN,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(ZN,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(eq,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(oq,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertTokenizer"),c(rq,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ih,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nh,"id","transformers.AutoFeatureExtractor"),c(Nh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nh,"href","#transformers.AutoFeatureExtractor"),c(ji,"class","relative group"),c(tq,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(aq,"href","/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(nq,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(sq,"href","/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(lq,"href","/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(iq,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(dq,"href","/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(cq,"href","/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(fq,"href","/docs/transformers/pr_17938/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(mq,"href","/docs/transformers/pr_17938/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(gq,"href","/docs/transformers/pr_17938/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(hq,"href","/docs/transformers/pr_17938/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(pq,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(_q,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(uq,"href","/docs/transformers/pr_17938/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(bq,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(vq,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(Fq,"href","/docs/transformers/pr_17938/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(Tq,"href","/docs/transformers/pr_17938/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(Mq,"href","/docs/transformers/pr_17938/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(Eq,"href","/docs/transformers/pr_17938/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(Cq,"href","/docs/transformers/pr_17938/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),c(wq,"href","/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(Aq,"href","/docs/transformers/pr_17938/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(Lq,"href","/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(yq,"href","/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(xq,"href","/docs/transformers/pr_17938/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c($q,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(kq,"href","/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Sq,"href","/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Rq,"href","/docs/transformers/pr_17938/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(Pq,"href","/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Bq,"href","/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Iq,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Nq,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(qq,"href","/docs/transformers/pr_17938/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mp,"id","transformers.AutoProcessor"),c(Mp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mp,"href","#transformers.AutoProcessor"),c(Di,"class","relative group"),c(jq,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(Dq,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPProcessor"),c(Gq,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPProcessor"),c(Oq,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(Vq,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(Xq,"href","/docs/transformers/pr_17938/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(zq,"href","/docs/transformers/pr_17938/en/model_doc/owlvit#transformers.OwlViTProcessor"),c(Wq,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Qq,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Hq,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(Uq,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(Jq,"href","/docs/transformers/pr_17938/en/model_doc/trocr#transformers.TrOCRProcessor"),c(Yq,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Kq,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Zq,"href","/docs/transformers/pr_17938/en/model_doc/vilt#transformers.ViltProcessor"),c(ej,"href","/docs/transformers/pr_17938/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(oj,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(rj,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(tj,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zp,"id","transformers.AutoModel"),c(zp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zp,"href","#transformers.AutoModel"),c(Oi,"class","relative group"),c(aj,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nj,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sj,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lj,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertModel"),c(ij,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartModel"),c(dj,"href","/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitModel"),c(cj,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertModel"),c(fj,"href","/docs/transformers/pr_17938/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(mj,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdModel"),c(gj,"href","/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(hj,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(pj,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(_j,"href","/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomModel"),c(uj,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertModel"),c(bj,"href","/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineModel"),c(vj,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPModel"),c(Fj,"href","/docs/transformers/pr_17938/en/model_doc/codegen#transformers.CodeGenModel"),c(Tj,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertModel"),c(Mj,"href","/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextModel"),c(Ej,"href","/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLModel"),c(Cj,"href","/docs/transformers/pr_17938/en/model_doc/cvt#transformers.CvtModel"),c(wj,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(Aj,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(Lj,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(yj,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaModel"),c(xj,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c($j,"href","/docs/transformers/pr_17938/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(kj,"href","/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTModel"),c(Sj,"href","/docs/transformers/pr_17938/en/model_doc/detr#transformers.DetrModel"),c(Rj,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertModel"),c(Pj,"href","/docs/transformers/pr_17938/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Bj,"href","/docs/transformers/pr_17938/en/model_doc/dpt#transformers.DPTModel"),c(Ij,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraModel"),c(Nj,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertModel"),c(qj,"href","/docs/transformers/pr_17938/en/model_doc/flava#transformers.FlavaModel"),c(jj,"href","/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetModel"),c(Dj,"href","/docs/transformers/pr_17938/en/model_doc/fsmt#transformers.FSMTModel"),c(Gj,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelModel"),c(Oj,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelBaseModel"),c(Vj,"href","/docs/transformers/pr_17938/en/model_doc/glpn#transformers.GLPNModel"),c(Xj,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Model"),c(zj,"href","/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Wj,"href","/docs/transformers/pr_17938/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(Qj,"href","/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJModel"),c(Hj,"href","/docs/transformers/pr_17938/en/model_doc/groupvit#transformers.GroupViTModel"),c(Uj,"href","/docs/transformers/pr_17938/en/model_doc/hubert#transformers.HubertModel"),c(Jj,"href","/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertModel"),c(Yj,"href","/docs/transformers/pr_17938/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Kj,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Zj,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(eD,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(oD,"href","/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDModel"),c(rD,"href","/docs/transformers/pr_17938/en/model_doc/levit#transformers.LevitModel"),c(tD,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerModel"),c(aD,"href","/docs/transformers/pr_17938/en/model_doc/longt5#transformers.LongT5Model"),c(nD,"href","/docs/transformers/pr_17938/en/model_doc/luke#transformers.LukeModel"),c(sD,"href","/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertModel"),c(lD,"href","/docs/transformers/pr_17938/en/model_doc/m2m_100#transformers.M2M100Model"),c(iD,"href","/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianModel"),c(dD,"href","/docs/transformers/pr_17938/en/model_doc/maskformer#transformers.MaskFormerModel"),c(cD,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartModel"),c(fD,"href","/docs/transformers/pr_17938/en/model_doc/mctct#transformers.MCTCTModel"),c(mD,"href","/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(gD,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertModel"),c(hD,"href","/docs/transformers/pr_17938/en/model_doc/mobilevit#transformers.MobileViTModel"),c(pD,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetModel"),c(_D,"href","/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5Model"),c(uD,"href","/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpModel"),c(bD,"href","/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaModel"),c(vD,"href","/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerModel"),c(FD,"href","/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(TD,"href","/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTModel"),c(MD,"href","/docs/transformers/pr_17938/en/model_doc/owlvit#transformers.OwlViTModel"),c(ED,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusModel"),c(CD,"href","/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverModel"),c(wD,"href","/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartModel"),c(AD,"href","/docs/transformers/pr_17938/en/model_doc/poolformer#transformers.PoolFormerModel"),c(LD,"href","/docs/transformers/pr_17938/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(yD,"href","/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertModel"),c(xD,"href","/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerModel"),c($D,"href","/docs/transformers/pr_17938/en/model_doc/regnet#transformers.RegNetModel"),c(kD,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertModel"),c(SD,"href","/docs/transformers/pr_17938/en/model_doc/resnet#transformers.ResNetModel"),c(RD,"href","/docs/transformers/pr_17938/en/model_doc/retribert#transformers.RetriBertModel"),c(PD,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaModel"),c(BD,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerModel"),c(ID,"href","/docs/transformers/pr_17938/en/model_doc/segformer#transformers.SegformerModel"),c(ND,"href","/docs/transformers/pr_17938/en/model_doc/sew#transformers.SEWModel"),c(qD,"href","/docs/transformers/pr_17938/en/model_doc/sew-d#transformers.SEWDModel"),c(jD,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(DD,"href","/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterModel"),c(GD,"href","/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(OD,"href","/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinModel"),c(VD,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Model"),c(XD,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasModel"),c(zD,"href","/docs/transformers/pr_17938/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(WD,"href","/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(QD,"href","/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechModel"),c(HD,"href","/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(UD,"href","/docs/transformers/pr_17938/en/model_doc/van#transformers.VanModel"),c(JD,"href","/docs/transformers/pr_17938/en/model_doc/vilt#transformers.ViltModel"),c(YD,"href","/docs/transformers/pr_17938/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(KD,"href","/docs/transformers/pr_17938/en/model_doc/visual_bert#transformers.VisualBertModel"),c(ZD,"href","/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTModel"),c(eG,"href","/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(oG,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(rG,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(tG,"href","/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMModel"),c(aG,"href","/docs/transformers/pr_17938/en/model_doc/xglm#transformers.XGLMModel"),c(nG,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMModel"),c(sG,"href","/docs/transformers/pr_17938/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(lG,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(iG,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(dG,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetModel"),c(cG,"href","/docs/transformers/pr_17938/en/model_doc/yolos#transformers.YolosModel"),c(fG,"href","/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ku,"id","transformers.AutoModelForPreTraining"),c(Ku,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ku,"href","#transformers.AutoModelForPreTraining"),c(zi,"class","relative group"),c(mG,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gG,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hG,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pG,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForPreTraining"),c(_G,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(uG,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForPreTraining"),c(bG,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(vG,"href","/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomForCausalLM"),c(FG,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(TG,"href","/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(MG,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(EG,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(CG,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(wG,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(AG,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForPreTraining"),c(LG,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(yG,"href","/docs/transformers/pr_17938/en/model_doc/flava#transformers.FlavaForPreTraining"),c(xG,"href","/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForPreTraining"),c($G,"href","/docs/transformers/pr_17938/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(kG,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(SG,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(RG,"href","/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(PG,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(BG,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(IG,"href","/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(NG,"href","/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(qG,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(jG,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(DG,"href","/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(GG,"href","/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(OG,"href","/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(VG,"href","/docs/transformers/pr_17938/en/model_doc/retribert#transformers.RetriBertModel"),c(XG,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(zG,"href","/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(WG,"href","/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(QG,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(HG,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(UG,"href","/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(JG,"href","/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(YG,"href","/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(KG,"href","/docs/transformers/pr_17938/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(ZG,"href","/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(eO,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(oO,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(rO,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(tO,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(aO,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(nO,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q1,"id","transformers.AutoModelForCausalLM"),c(Q1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q1,"href","#transformers.AutoModelForCausalLM"),c(Hi,"class","relative group"),c(sO,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lO,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iO,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dO,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForCausalLM"),c(cO,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertLMHeadModel"),c(fO,"href","/docs/transformers/pr_17938/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(mO,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(gO,"href","/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(hO,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(pO,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(_O,"href","/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomForCausalLM"),c(uO,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(bO,"href","/docs/transformers/pr_17938/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(vO,"href","/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(FO,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(TO,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForCausalLM"),c(MO,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(EO,"href","/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(CO,"href","/docs/transformers/pr_17938/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(wO,"href","/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(AO,"href","/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianForCausalLM"),c(LO,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartForCausalLM"),c(yO,"href","/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(xO,"href","/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForCausalLM"),c($O,"href","/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(kO,"href","/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTForCausalLM"),c(SO,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(RO,"href","/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(PO,"href","/docs/transformers/pr_17938/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(BO,"href","/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(IO,"href","/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(NO,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(qO,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(jO,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(DO,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(GO,"href","/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(OO,"href","/docs/transformers/pr_17938/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(VO,"href","/docs/transformers/pr_17938/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(XO,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(zO,"href","/docs/transformers/pr_17938/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(WO,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(QO,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(HO,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N2,"id","transformers.AutoModelForMaskedLM"),c(N2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N2,"href","#transformers.AutoModelForMaskedLM"),c(Yi,"class","relative group"),c(UO,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JO,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YO,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KO,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(ZO,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(eV,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForMaskedLM"),c(oV,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(rV,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(tV,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(aV,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(nV,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(sV,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(lV,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(iV,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(dV,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(cV,"href","/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(fV,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(mV,"href","/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(gV,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(hV,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(pV,"href","/docs/transformers/pr_17938/en/model_doc/luke#transformers.LukeForMaskedLM"),c(_V,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(uV,"href","/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(bV,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(vV,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(FV,"href","/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(TV,"href","/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(MV,"href","/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(EV,"href","/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(CV,"href","/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(wV,"href","/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(AV,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(LV,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(yV,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(xV,"href","/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c($V,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(kV,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(SV,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(RV,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(PV,"href","/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wb,"id","transformers.AutoModelForSeq2SeqLM"),c(wb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wb,"href","#transformers.AutoModelForSeq2SeqLM"),c(ed,"class","relative group"),c(BV,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IV,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NV,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qV,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(jV,"href","/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(DV,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(GV,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(OV,"href","/docs/transformers/pr_17938/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(VV,"href","/docs/transformers/pr_17938/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(XV,"href","/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(zV,"href","/docs/transformers/pr_17938/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(WV,"href","/docs/transformers/pr_17938/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(QV,"href","/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianMTModel"),c(HV,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(UV,"href","/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(JV,"href","/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(YV,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(KV,"href","/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(ZV,"href","/docs/transformers/pr_17938/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(eX,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(oX,"href","/docs/transformers/pr_17938/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qb,"id","transformers.AutoModelForSequenceClassification"),c(Qb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qb,"href","#transformers.AutoModelForSequenceClassification"),c(td,"class","relative group"),c(rX,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tX,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aX,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nX,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(sX,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForSequenceClassification"),c(lX,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForSequenceClassification"),c(iX,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(dX,"href","/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(cX,"href","/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(fX,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(mX,"href","/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(gX,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(hX,"href","/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(pX,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(_X,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(uX,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(bX,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(vX,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(FX,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(TX,"href","/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(MX,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(EX,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(CX,"href","/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(wX,"href","/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(AX,"href","/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(LX,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(yX,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(xX,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c($X,"href","/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDForSequenceClassification"),c(kX,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(SX,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(RX,"href","/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(PX,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(BX,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(IX,"href","/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(NX,"href","/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(qX,"href","/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(jX,"href","/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(DX,"href","/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(GX,"href","/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(OX,"href","/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(VX,"href","/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(XX,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(zX,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(WX,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(QX,"href","/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(HX,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(UX,"href","/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(JX,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(YX,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(KX,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(ZX,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(ez,"href","/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qv,"id","transformers.AutoModelForMultipleChoice"),c(Qv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qv,"href","#transformers.AutoModelForMultipleChoice"),c(sd,"class","relative group"),c(oz,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rz,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tz,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(az,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(nz,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForMultipleChoice"),c(sz,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(lz,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(iz,"href","/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(dz,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(cz,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(fz,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(mz,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(gz,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(hz,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(pz,"href","/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(_z,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(uz,"href","/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(bz,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(vz,"href","/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(Fz,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(Tz,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(Mz,"href","/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(Ez,"href","/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(Cz,"href","/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(wz,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(Az,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(Lz,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(yz,"href","/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(xz,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c($z,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(kz,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(Sz,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(Rz,"href","/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L3,"id","transformers.AutoModelForNextSentencePrediction"),c(L3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L3,"href","#transformers.AutoModelForNextSentencePrediction"),c(dd,"class","relative group"),c(Pz,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bz,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Iz,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nz,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(qz,"href","/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(jz,"href","/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(Dz,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(Gz,"href","/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(Oz,"href","/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N3,"id","transformers.AutoModelForTokenClassification"),c(N3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N3,"href","#transformers.AutoModelForTokenClassification"),c(md,"class","relative group"),c(Vz,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xz,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zz,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wz,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(Qz,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForTokenClassification"),c(Hz,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(Uz,"href","/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(Jz,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(Yz,"href","/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineForTokenClassification"),c(Kz,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(Zz,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(eW,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(oW,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(rW,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(tW,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(aW,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(nW,"href","/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(sW,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(lW,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(iW,"href","/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(dW,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(cW,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(fW,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(mW,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(gW,"href","/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(hW,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(pW,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(_W,"href","/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(uW,"href","/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(bW,"href","/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(vW,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(FW,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(TW,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(MW,"href","/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(EW,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(CW,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(wW,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(AW,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(LW,"href","/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EF,"id","transformers.AutoModelForQuestionAnswering"),c(EF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EF,"href","#transformers.AutoModelForQuestionAnswering"),c(pd,"class","relative group"),c(yW,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xW,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($W,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kW,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(SW,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(RW,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(PW,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(BW,"href","/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(IW,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(NW,"href","/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(qW,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(jW,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(DW,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(GW,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(OW,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(VW,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(XW,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(zW,"href","/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(WW,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(QW,"href","/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(HW,"href","/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(UW,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(JW,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(YW,"href","/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(KW,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(ZW,"href","/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(eQ,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(oQ,"href","/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(rQ,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(tQ,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(aQ,"href","/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(nQ,"href","/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(sQ,"href","/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(lQ,"href","/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(iQ,"href","/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(dQ,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(cQ,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(fQ,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(mQ,"href","/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(gQ,"href","/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(hQ,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(pQ,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(_Q,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(uQ,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(bQ,"href","/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pT,"id","transformers.AutoModelForTableQuestionAnswering"),c(pT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pT,"href","#transformers.AutoModelForTableQuestionAnswering"),c(bd,"class","relative group"),c(vQ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FQ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TQ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MQ,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FT,"id","transformers.AutoModelForImageClassification"),c(FT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FT,"href","#transformers.AutoModelForImageClassification"),c(Td,"class","relative group"),c(EQ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CQ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wQ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AQ,"href","/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitForImageClassification"),c(LQ,"href","/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(yQ,"href","/docs/transformers/pr_17938/en/model_doc/cvt#transformers.CvtForImageClassification"),c(xQ,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c($Q,"href","/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTForImageClassification"),c(kQ,"href","/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(SQ,"href","/docs/transformers/pr_17938/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(RQ,"href","/docs/transformers/pr_17938/en/model_doc/levit#transformers.LevitForImageClassification"),c(PQ,"href","/docs/transformers/pr_17938/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(BQ,"href","/docs/transformers/pr_17938/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(IQ,"href","/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(NQ,"href","/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(qQ,"href","/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(jQ,"href","/docs/transformers/pr_17938/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(DQ,"href","/docs/transformers/pr_17938/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(GQ,"href","/docs/transformers/pr_17938/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(OQ,"href","/docs/transformers/pr_17938/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(VQ,"href","/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinForImageClassification"),c(XQ,"href","/docs/transformers/pr_17938/en/model_doc/van#transformers.VanForImageClassification"),c(zQ,"href","/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTForImageClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NT,"id","transformers.AutoModelForVision2Seq"),c(NT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NT,"href","#transformers.AutoModelForVision2Seq"),c(Cd,"class","relative group"),c(WQ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QQ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HQ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UQ,"href","/docs/transformers/pr_17938/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OT,"id","transformers.AutoModelForVisualQuestionAnswering"),c(OT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OT,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Ld,"class","relative group"),c(JQ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YQ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KQ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZQ,"href","/docs/transformers/pr_17938/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QT,"id","transformers.AutoModelForAudioClassification"),c(QT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QT,"href","#transformers.AutoModelForAudioClassification"),c($d,"class","relative group"),c(eH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tH,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(aH,"href","/docs/transformers/pr_17938/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(nH,"href","/docs/transformers/pr_17938/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(sH,"href","/docs/transformers/pr_17938/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(lH,"href","/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(iH,"href","/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(dH,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(cH,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(fH,"href","/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s7,"id","transformers.AutoModelForAudioFrameClassification"),c(s7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s7,"href","#transformers.AutoModelForAudioFrameClassification"),c(Rd,"class","relative group"),c(mH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pH,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(_H,"href","/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(uH,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(bH,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(vH,"href","/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p7,"id","transformers.AutoModelForCTC"),c(p7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p7,"href","#transformers.AutoModelForCTC"),c(Id,"class","relative group"),c(FH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EH,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(CH,"href","/docs/transformers/pr_17938/en/model_doc/hubert#transformers.HubertForCTC"),c(wH,"href","/docs/transformers/pr_17938/en/model_doc/mctct#transformers.MCTCTForCTC"),c(AH,"href","/docs/transformers/pr_17938/en/model_doc/sew#transformers.SEWForCTC"),c(LH,"href","/docs/transformers/pr_17938/en/model_doc/sew-d#transformers.SEWDForCTC"),c(yH,"href","/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(xH,"href","/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c($H,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(kH,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(SH,"href","/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMForCTC"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x7,"id","transformers.AutoModelForSpeechSeq2Seq"),c(x7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x7,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(jd,"class","relative group"),c(RH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IH,"href","/docs/transformers/pr_17938/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(NH,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B7,"id","transformers.AutoModelForAudioXVector"),c(B7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B7,"href","#transformers.AutoModelForAudioXVector"),c(Od,"class","relative group"),c(qH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GH,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(OH,"href","/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(VH,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(XH,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(zH,"href","/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMForXVector"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X7,"id","transformers.AutoModelForMaskedImageModeling"),c(X7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X7,"href","#transformers.AutoModelForMaskedImageModeling"),c(zd,"class","relative group"),c(WH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UH,"href","/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(JH,"href","/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(YH,"href","/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y7,"id","transformers.AutoModelForObjectDetection"),c(Y7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y7,"href","#transformers.AutoModelForObjectDetection"),c(Ud,"class","relative group"),c(KH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oU,"href","/docs/transformers/pr_17938/en/model_doc/detr#transformers.DetrForObjectDetection"),c(rU,"href","/docs/transformers/pr_17938/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t8,"id","transformers.AutoModelForImageSegmentation"),c(t8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t8,"href","#transformers.AutoModelForImageSegmentation"),c(Kd,"class","relative group"),c(tU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sU,"href","/docs/transformers/pr_17938/en/model_doc/detr#transformers.DetrForSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i8,"id","transformers.AutoModelForSemanticSegmentation"),c(i8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i8,"href","#transformers.AutoModelForSemanticSegmentation"),c(oc,"class","relative group"),c(lU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cU,"href","/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(fU,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(mU,"href","/docs/transformers/pr_17938/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(gU,"href","/docs/transformers/pr_17938/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(hU,"href","/docs/transformers/pr_17938/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u8,"id","transformers.AutoModelForInstanceSegmentation"),c(u8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u8,"href","#transformers.AutoModelForInstanceSegmentation"),c(ac,"class","relative group"),c(pU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_U,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bU,"href","/docs/transformers/pr_17938/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M8,"id","transformers.TFAutoModel"),c(M8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M8,"href","#transformers.TFAutoModel"),c(lc,"class","relative group"),c(vU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MU,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertModel"),c(EU,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.TFBartModel"),c(CU,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertModel"),c(wU,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(AU,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(LU,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertModel"),c(yU,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.TFCLIPModel"),c(xU,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertModel"),c($U,"href","/docs/transformers/pr_17938/en/model_doc/convnext#transformers.TFConvNextModel"),c(kU,"href","/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.TFCTRLModel"),c(SU,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(RU,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.TFDebertaModel"),c(PU,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(BU,"href","/docs/transformers/pr_17938/en/model_doc/deit#transformers.TFDeiTModel"),c(IU,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(NU,"href","/docs/transformers/pr_17938/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(qU,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraModel"),c(jU,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(DU,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelModel"),c(GU,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(OU,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.TFGPT2Model"),c(VU,"href","/docs/transformers/pr_17938/en/model_doc/gptj#transformers.TFGPTJModel"),c(XU,"href","/docs/transformers/pr_17938/en/model_doc/hubert#transformers.TFHubertModel"),c(zU,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(WU,"href","/docs/transformers/pr_17938/en/model_doc/led#transformers.TFLEDModel"),c(QU,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerModel"),c(HU,"href","/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.TFLxmertModel"),c(UU,"href","/docs/transformers/pr_17938/en/model_doc/marian#transformers.TFMarianModel"),c(JU,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.TFMBartModel"),c(YU,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(KU,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetModel"),c(ZU,"href","/docs/transformers/pr_17938/en/model_doc/mt5#transformers.TFMT5Model"),c(eJ,"href","/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(oJ,"href","/docs/transformers/pr_17938/en/model_doc/opt#transformers.TFOPTModel"),c(rJ,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.TFPegasusModel"),c(tJ,"href","/docs/transformers/pr_17938/en/model_doc/regnet#transformers.TFRegNetModel"),c(aJ,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertModel"),c(nJ,"href","/docs/transformers/pr_17938/en/model_doc/resnet#transformers.TFResNetModel"),c(sJ,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaModel"),c(lJ,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerModel"),c(iJ,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(dJ,"href","/docs/transformers/pr_17938/en/model_doc/swin#transformers.TFSwinModel"),c(cJ,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.TFT5Model"),c(fJ,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TFTapasModel"),c(mJ,"href","/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(gJ,"href","/docs/transformers/pr_17938/en/model_doc/vit#transformers.TFViTModel"),c(hJ,"href","/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(pJ,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(_J,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMModel"),c(uJ,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(bJ,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F9,"id","transformers.TFAutoModelForPreTraining"),c(F9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F9,"href","#transformers.TFAutoModelForPreTraining"),c(cc,"class","relative group"),c(vJ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FJ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TJ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MJ,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(EJ,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(CJ,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForPreTraining"),c(wJ,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(AJ,"href","/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(LJ,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(yJ,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(xJ,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c($J,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(kJ,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(SJ,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(RJ,"href","/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(PJ,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(BJ,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(IJ,"href","/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(NJ,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(qJ,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(jJ,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(DJ,"href","/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(GJ,"href","/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(OJ,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(VJ,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(XJ,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W9,"id","transformers.TFAutoModelForCausalLM"),c(W9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W9,"href","#transformers.TFAutoModelForCausalLM"),c(gc,"class","relative group"),c(zJ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WJ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QJ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HJ,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(UJ,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(JJ,"href","/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(YJ,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(KJ,"href","/docs/transformers/pr_17938/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(ZJ,"href","/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(eY,"href","/docs/transformers/pr_17938/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(oY,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(rY,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(tY,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(aY,"href","/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(nY,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(sY,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iM,"id","transformers.TFAutoModelForImageClassification"),c(iM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iM,"href","#transformers.TFAutoModelForImageClassification"),c(_c,"class","relative group"),c(lY,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iY,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dY,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cY,"href","/docs/transformers/pr_17938/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(fY,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(mY,"href","/docs/transformers/pr_17938/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(gY,"href","/docs/transformers/pr_17938/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(hY,"href","/docs/transformers/pr_17938/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(pY,"href","/docs/transformers/pr_17938/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(_Y,"href","/docs/transformers/pr_17938/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(uY,"href","/docs/transformers/pr_17938/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uM,"id","transformers.TFAutoModelForMaskedLM"),c(uM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uM,"href","#transformers.TFAutoModelForMaskedLM"),c(vc,"class","relative group"),c(bY,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vY,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FY,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TY,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(MY,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(EY,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(CY,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(wY,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(AY,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(LY,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(yY,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(xY,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c($Y,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(kY,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(SY,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(RY,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(PY,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(BY,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(IY,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(NY,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(qY,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(jY,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(DY,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(DM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Mc,"class","relative group"),c(GY,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OY,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VY,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XY,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(zY,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(WY,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(QY,"href","/docs/transformers/pr_17938/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(HY,"href","/docs/transformers/pr_17938/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(UY,"href","/docs/transformers/pr_17938/en/model_doc/marian#transformers.TFMarianMTModel"),c(JY,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(YY,"href","/docs/transformers/pr_17938/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(KY,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(ZY,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZM,"id","transformers.TFAutoModelForSequenceClassification"),c(ZM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZM,"href","#transformers.TFAutoModelForSequenceClassification"),c(wc,"class","relative group"),c(eK,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oK,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rK,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tK,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(aK,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(nK,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(sK,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(lK,"href","/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(iK,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(dK,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(cK,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(fK,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(mK,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(gK,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(hK,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(pK,"href","/docs/transformers/pr_17938/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(_K,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(uK,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(bK,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(vK,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(FK,"href","/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(TK,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(MK,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(EK,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(CK,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(wK,"href","/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(AK,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(LK,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(yK,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y4,"id","transformers.TFAutoModelForMultipleChoice"),c(y4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y4,"href","#transformers.TFAutoModelForMultipleChoice"),c(yc,"class","relative group"),c(xK,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($K,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kK,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SK,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(RK,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(PK,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(BK,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(IK,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(NK,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(qK,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(jK,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(DK,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(GK,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(OK,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(VK,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(XK,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(zK,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(WK,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(QK,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(HK,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H4,"id","transformers.TFAutoModelForNextSentencePrediction"),c(H4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H4,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(kc,"class","relative group"),c(UK,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JK,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YK,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KK,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(ZK,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(Z4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Pc,"class","relative group"),c(eZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tZ,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tE,"id","transformers.TFAutoModelForTokenClassification"),c(tE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tE,"href","#transformers.TFAutoModelForTokenClassification"),c(Nc,"class","relative group"),c(aZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lZ,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(iZ,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(dZ,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(cZ,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(fZ,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(mZ,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(gZ,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(hZ,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(pZ,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(_Z,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(uZ,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(bZ,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(vZ,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(FZ,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(TZ,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(MZ,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(EZ,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(CZ,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(wZ,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(AZ,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AE,"id","transformers.TFAutoModelForQuestionAnswering"),c(AE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Dc,"class","relative group"),c(LZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($Z,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(kZ,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(SZ,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(RZ,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(PZ,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(BZ,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(IZ,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(NZ,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(qZ,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(jZ,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(DZ,"href","/docs/transformers/pr_17938/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(GZ,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(OZ,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(VZ,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(XZ,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(zZ,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(WZ,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(QZ,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(HZ,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(UZ,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UE,"id","transformers.TFAutoModelForVision2Seq"),c(UE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UE,"href","#transformers.TFAutoModelForVision2Seq"),c(Vc,"class","relative group"),c(JZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZZ,"href","/docs/transformers/pr_17938/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(ZE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Wc,"class","relative group"),c(eee,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oee,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ree,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tee,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tC,"id","transformers.FlaxAutoModel"),c(tC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tC,"href","#transformers.FlaxAutoModel"),c(Uc,"class","relative group"),c(aee,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nee,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(see,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lee,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertModel"),c(iee,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartModel"),c(dee,"href","/docs/transformers/pr_17938/en/model_doc/beit#transformers.FlaxBeitModel"),c(cee,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertModel"),c(fee,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(mee,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(gee,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(hee,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.FlaxCLIPModel"),c(pee,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(_ee,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraModel"),c(uee,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(bee,"href","/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(vee,"href","/docs/transformers/pr_17938/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(Fee,"href","/docs/transformers/pr_17938/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(Tee,"href","/docs/transformers/pr_17938/en/model_doc/marian#transformers.FlaxMarianModel"),c(Mee,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartModel"),c(Eee,"href","/docs/transformers/pr_17938/en/model_doc/mt5#transformers.FlaxMT5Model"),c(Cee,"href","/docs/transformers/pr_17938/en/model_doc/opt#transformers.FlaxOPTModel"),c(wee,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(Aee,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(Lee,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(yee,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.FlaxT5Model"),c(xee,"href","/docs/transformers/pr_17938/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c($ee,"href","/docs/transformers/pr_17938/en/model_doc/vit#transformers.FlaxViTModel"),c(kee,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(See,"href","/docs/transformers/pr_17938/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(Ree,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RC,"id","transformers.FlaxAutoModelForCausalLM"),c(RC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RC,"href","#transformers.FlaxAutoModelForCausalLM"),c(Kc,"class","relative group"),c(Pee,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bee,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Iee,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nee,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(qee,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(jee,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(Dee,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(Gee,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(Oee,"href","/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(Vee,"href","/docs/transformers/pr_17938/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(Xee,"href","/docs/transformers/pr_17938/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(zee,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(Wee,"href","/docs/transformers/pr_17938/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WC,"id","transformers.FlaxAutoModelForPreTraining"),c(WC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WC,"href","#transformers.FlaxAutoModelForPreTraining"),c(of,"class","relative group"),c(Qee,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hee,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Uee,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jee,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(Yee,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Kee,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(Zee,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(eoe,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(ooe,"href","/docs/transformers/pr_17938/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(roe,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(toe,"href","/docs/transformers/pr_17938/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(aoe,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(noe,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(soe,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(loe,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(ioe,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i5,"id","transformers.FlaxAutoModelForMaskedLM"),c(i5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(af,"class","relative group"),c(doe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(coe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(foe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(moe,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(goe,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(hoe,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(poe,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(_oe,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(uoe,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(boe,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(voe,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Foe,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Toe,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(T5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(lf,"class","relative group"),c(Moe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Eoe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Coe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(woe,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Aoe,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(Loe,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(yoe,"href","/docs/transformers/pr_17938/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(xoe,"href","/docs/transformers/pr_17938/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c($oe,"href","/docs/transformers/pr_17938/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(koe,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Soe,"href","/docs/transformers/pr_17938/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Roe,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Poe,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(P5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(ff,"class","relative group"),c(Boe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ioe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Noe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qoe,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(joe,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Doe,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Goe,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(Ooe,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(Voe,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Xoe,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(zoe,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Woe,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Qoe,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(Q5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(hf,"class","relative group"),c(Hoe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Uoe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Joe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yoe,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Koe,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(Zoe,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(ere,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(ore,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(rre,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(tre,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(are,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(nre,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(sre,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s0,"id","transformers.FlaxAutoModelForTokenClassification"),c(s0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s0,"href","#transformers.FlaxAutoModelForTokenClassification"),c(uf,"class","relative group"),c(lre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ire,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cre,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(fre,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(mre,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(gre,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(hre,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(pre,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(_re,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(ure,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u0,"id","transformers.FlaxAutoModelForMultipleChoice"),c(u0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u0,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Ff,"class","relative group"),c(bre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Fre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tre,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(Mre,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(Ere,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Cre,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(wre,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Are,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(Lre,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(yre,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y0,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(y0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y0,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Ef,"class","relative group"),c(xre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($re,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sre,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S0,"id","transformers.FlaxAutoModelForImageClassification"),c(S0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S0,"href","#transformers.FlaxAutoModelForImageClassification"),c(Af,"class","relative group"),c(Rre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ire,"href","/docs/transformers/pr_17938/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Nre,"href","/docs/transformers/pr_17938/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N0,"id","transformers.FlaxAutoModelForVision2Seq"),c(N0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N0,"href","#transformers.FlaxAutoModelForVision2Seq"),c(xf,"class","relative group"),c(qre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Dre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gre,"href","/docs/transformers/pr_17938/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Co),e(Co,yi),b(f,Bf,u),b(f,lt,u),e(lt,xi),e(lt,$i),e($i,n6),e(lt,If),b(f,Oe,u),b(f,Qe,u),e(Qe,ki),e(Qe,Pn),e(Pn,s6),e(Qe,Bn),e(Qe,In),e(In,l6),e(Qe,Si),e(Qe,Nn),e(Nn,i6),e(Qe,Ri),b(f,Nf,u),M(Sa,f,u),b(f,He,u),b(f,Ae,u),e(Ae,GS),e(Ae,Pi),e(Pi,OS),e(Ae,VS),b(f,wo,u),b(f,Ra,u),e(Ra,XS),e(Ra,qf),e(qf,zS),e(Ra,RHe),b(f,bXe,u),b(f,Bi,u),e(Bi,jf),e(jf,Iae),M(d6,Iae,null),e(Bi,PHe),e(Bi,Nae),e(Nae,BHe),b(f,vXe,u),b(f,qn,u),e(qn,IHe),e(qn,qae),e(qae,NHe),e(qn,qHe),e(qn,jae),e(jae,jHe),e(qn,DHe),b(f,FXe,u),M(c6,f,u),b(f,TXe,u),b(f,WS,u),e(WS,GHe),b(f,MXe,u),M(Df,f,u),b(f,EXe,u),b(f,Ii,u),e(Ii,Gf),e(Gf,Dae),M(f6,Dae,null),e(Ii,OHe),e(Ii,Gae),e(Gae,VHe),b(f,CXe,u),b(f,Ao,u),M(m6,Ao,null),e(Ao,XHe),e(Ao,g6),e(g6,zHe),e(g6,QS),e(QS,WHe),e(g6,QHe),e(Ao,HHe),e(Ao,h6),e(h6,UHe),e(h6,Oae),e(Oae,JHe),e(h6,YHe),e(Ao,KHe),e(Ao,Lr),M(p6,Lr,null),e(Lr,ZHe),e(Lr,Vae),e(Vae,eUe),e(Lr,oUe),e(Lr,Ni),e(Ni,rUe),e(Ni,Xae),e(Xae,tUe),e(Ni,aUe),e(Ni,zae),e(zae,nUe),e(Ni,sUe),e(Lr,lUe),e(Lr,A),e(A,Of),e(Of,Wae),e(Wae,iUe),e(Of,dUe),e(Of,HS),e(HS,cUe),e(Of,fUe),e(A,mUe),e(A,Vf),e(Vf,Qae),e(Qae,gUe),e(Vf,hUe),e(Vf,US),e(US,pUe),e(Vf,_Ue),e(A,uUe),e(A,Xf),e(Xf,Hae),e(Hae,bUe),e(Xf,vUe),e(Xf,JS),e(JS,FUe),e(Xf,TUe),e(A,MUe),e(A,zf),e(zf,Uae),e(Uae,EUe),e(zf,CUe),e(zf,YS),e(YS,wUe),e(zf,AUe),e(A,LUe),e(A,Wf),e(Wf,Jae),e(Jae,yUe),e(Wf,xUe),e(Wf,KS),e(KS,$Ue),e(Wf,kUe),e(A,SUe),e(A,Qf),e(Qf,Yae),e(Yae,RUe),e(Qf,PUe),e(Qf,ZS),e(ZS,BUe),e(Qf,IUe),e(A,NUe),e(A,Hf),e(Hf,Kae),e(Kae,qUe),e(Hf,jUe),e(Hf,eR),e(eR,DUe),e(Hf,GUe),e(A,OUe),e(A,Uf),e(Uf,Zae),e(Zae,VUe),e(Uf,XUe),e(Uf,oR),e(oR,zUe),e(Uf,WUe),e(A,QUe),e(A,Jf),e(Jf,ene),e(ene,HUe),e(Jf,UUe),e(Jf,rR),e(rR,JUe),e(Jf,YUe),e(A,KUe),e(A,Yf),e(Yf,one),e(one,ZUe),e(Yf,eJe),e(Yf,tR),e(tR,oJe),e(Yf,rJe),e(A,tJe),e(A,Kf),e(Kf,rne),e(rne,aJe),e(Kf,nJe),e(Kf,aR),e(aR,sJe),e(Kf,lJe),e(A,iJe),e(A,Zf),e(Zf,tne),e(tne,dJe),e(Zf,cJe),e(Zf,nR),e(nR,fJe),e(Zf,mJe),e(A,gJe),e(A,em),e(em,ane),e(ane,hJe),e(em,pJe),e(em,sR),e(sR,_Je),e(em,uJe),e(A,bJe),e(A,om),e(om,nne),e(nne,vJe),e(om,FJe),e(om,lR),e(lR,TJe),e(om,MJe),e(A,EJe),e(A,rm),e(rm,sne),e(sne,CJe),e(rm,wJe),e(rm,iR),e(iR,AJe),e(rm,LJe),e(A,yJe),e(A,tm),e(tm,lne),e(lne,xJe),e(tm,$Je),e(tm,dR),e(dR,kJe),e(tm,SJe),e(A,RJe),e(A,am),e(am,ine),e(ine,PJe),e(am,BJe),e(am,cR),e(cR,IJe),e(am,NJe),e(A,qJe),e(A,nm),e(nm,dne),e(dne,jJe),e(nm,DJe),e(nm,fR),e(fR,GJe),e(nm,OJe),e(A,VJe),e(A,sm),e(sm,cne),e(cne,XJe),e(sm,zJe),e(sm,mR),e(mR,WJe),e(sm,QJe),e(A,HJe),e(A,lm),e(lm,fne),e(fne,UJe),e(lm,JJe),e(lm,gR),e(gR,YJe),e(lm,KJe),e(A,ZJe),e(A,im),e(im,mne),e(mne,eYe),e(im,oYe),e(im,hR),e(hR,rYe),e(im,tYe),e(A,aYe),e(A,dm),e(dm,gne),e(gne,nYe),e(dm,sYe),e(dm,pR),e(pR,lYe),e(dm,iYe),e(A,dYe),e(A,cm),e(cm,hne),e(hne,cYe),e(cm,fYe),e(cm,_R),e(_R,mYe),e(cm,gYe),e(A,hYe),e(A,fm),e(fm,pne),e(pne,pYe),e(fm,_Ye),e(fm,uR),e(uR,uYe),e(fm,bYe),e(A,vYe),e(A,mm),e(mm,_ne),e(_ne,FYe),e(mm,TYe),e(mm,bR),e(bR,MYe),e(mm,EYe),e(A,CYe),e(A,gm),e(gm,une),e(une,wYe),e(gm,AYe),e(gm,vR),e(vR,LYe),e(gm,yYe),e(A,xYe),e(A,hm),e(hm,bne),e(bne,$Ye),e(hm,kYe),e(hm,FR),e(FR,SYe),e(hm,RYe),e(A,PYe),e(A,pm),e(pm,vne),e(vne,BYe),e(pm,IYe),e(pm,TR),e(TR,NYe),e(pm,qYe),e(A,jYe),e(A,_m),e(_m,Fne),e(Fne,DYe),e(_m,GYe),e(_m,MR),e(MR,OYe),e(_m,VYe),e(A,XYe),e(A,um),e(um,Tne),e(Tne,zYe),e(um,WYe),e(um,ER),e(ER,QYe),e(um,HYe),e(A,UYe),e(A,bm),e(bm,Mne),e(Mne,JYe),e(bm,YYe),e(bm,CR),e(CR,KYe),e(bm,ZYe),e(A,eKe),e(A,vm),e(vm,Ene),e(Ene,oKe),e(vm,rKe),e(vm,wR),e(wR,tKe),e(vm,aKe),e(A,nKe),e(A,Fm),e(Fm,Cne),e(Cne,sKe),e(Fm,lKe),e(Fm,AR),e(AR,iKe),e(Fm,dKe),e(A,cKe),e(A,Tm),e(Tm,wne),e(wne,fKe),e(Tm,mKe),e(Tm,LR),e(LR,gKe),e(Tm,hKe),e(A,pKe),e(A,Mm),e(Mm,Ane),e(Ane,_Ke),e(Mm,uKe),e(Mm,yR),e(yR,bKe),e(Mm,vKe),e(A,FKe),e(A,Em),e(Em,Lne),e(Lne,TKe),e(Em,MKe),e(Em,xR),e(xR,EKe),e(Em,CKe),e(A,wKe),e(A,Cm),e(Cm,yne),e(yne,AKe),e(Cm,LKe),e(Cm,$R),e($R,yKe),e(Cm,xKe),e(A,$Ke),e(A,wm),e(wm,xne),e(xne,kKe),e(wm,SKe),e(wm,kR),e(kR,RKe),e(wm,PKe),e(A,BKe),e(A,Am),e(Am,$ne),e($ne,IKe),e(Am,NKe),e(Am,SR),e(SR,qKe),e(Am,jKe),e(A,DKe),e(A,Lm),e(Lm,kne),e(kne,GKe),e(Lm,OKe),e(Lm,RR),e(RR,VKe),e(Lm,XKe),e(A,zKe),e(A,ym),e(ym,Sne),e(Sne,WKe),e(ym,QKe),e(ym,PR),e(PR,HKe),e(ym,UKe),e(A,JKe),e(A,xm),e(xm,Rne),e(Rne,YKe),e(xm,KKe),e(xm,BR),e(BR,ZKe),e(xm,eZe),e(A,oZe),e(A,$m),e($m,Pne),e(Pne,rZe),e($m,tZe),e($m,IR),e(IR,aZe),e($m,nZe),e(A,sZe),e(A,km),e(km,Bne),e(Bne,lZe),e(km,iZe),e(km,NR),e(NR,dZe),e(km,cZe),e(A,fZe),e(A,Sm),e(Sm,Ine),e(Ine,mZe),e(Sm,gZe),e(Sm,qR),e(qR,hZe),e(Sm,pZe),e(A,_Ze),e(A,Rm),e(Rm,Nne),e(Nne,uZe),e(Rm,bZe),e(Rm,jR),e(jR,vZe),e(Rm,FZe),e(A,TZe),e(A,Pm),e(Pm,qne),e(qne,MZe),e(Pm,EZe),e(Pm,DR),e(DR,CZe),e(Pm,wZe),e(A,AZe),e(A,Bm),e(Bm,jne),e(jne,LZe),e(Bm,yZe),e(Bm,GR),e(GR,xZe),e(Bm,$Ze),e(A,kZe),e(A,Im),e(Im,Dne),e(Dne,SZe),e(Im,RZe),e(Im,OR),e(OR,PZe),e(Im,BZe),e(A,IZe),e(A,Nm),e(Nm,Gne),e(Gne,NZe),e(Nm,qZe),e(Nm,VR),e(VR,jZe),e(Nm,DZe),e(A,GZe),e(A,qm),e(qm,One),e(One,OZe),e(qm,VZe),e(qm,XR),e(XR,XZe),e(qm,zZe),e(A,WZe),e(A,jm),e(jm,Vne),e(Vne,QZe),e(jm,HZe),e(jm,zR),e(zR,UZe),e(jm,JZe),e(A,YZe),e(A,Dm),e(Dm,Xne),e(Xne,KZe),e(Dm,ZZe),e(Dm,WR),e(WR,eeo),e(Dm,oeo),e(A,reo),e(A,Gm),e(Gm,zne),e(zne,teo),e(Gm,aeo),e(Gm,QR),e(QR,neo),e(Gm,seo),e(A,leo),e(A,Om),e(Om,Wne),e(Wne,ieo),e(Om,deo),e(Om,HR),e(HR,ceo),e(Om,feo),e(A,meo),e(A,Vm),e(Vm,Qne),e(Qne,geo),e(Vm,heo),e(Vm,UR),e(UR,peo),e(Vm,_eo),e(A,ueo),e(A,Xm),e(Xm,Hne),e(Hne,beo),e(Xm,veo),e(Xm,JR),e(JR,Feo),e(Xm,Teo),e(A,Meo),e(A,zm),e(zm,Une),e(Une,Eeo),e(zm,Ceo),e(zm,YR),e(YR,weo),e(zm,Aeo),e(A,Leo),e(A,Wm),e(Wm,Jne),e(Jne,yeo),e(Wm,xeo),e(Wm,KR),e(KR,$eo),e(Wm,keo),e(A,Seo),e(A,Qm),e(Qm,Yne),e(Yne,Reo),e(Qm,Peo),e(Qm,ZR),e(ZR,Beo),e(Qm,Ieo),e(A,Neo),e(A,Hm),e(Hm,Kne),e(Kne,qeo),e(Hm,jeo),e(Hm,eP),e(eP,Deo),e(Hm,Geo),e(A,Oeo),e(A,Um),e(Um,Zne),e(Zne,Veo),e(Um,Xeo),e(Um,oP),e(oP,zeo),e(Um,Weo),e(A,Qeo),e(A,Jm),e(Jm,ese),e(ese,Heo),e(Jm,Ueo),e(Jm,rP),e(rP,Jeo),e(Jm,Yeo),e(A,Keo),e(A,Ym),e(Ym,ose),e(ose,Zeo),e(Ym,eoo),e(Ym,tP),e(tP,ooo),e(Ym,roo),e(A,too),e(A,Km),e(Km,rse),e(rse,aoo),e(Km,noo),e(Km,aP),e(aP,soo),e(Km,loo),e(A,ioo),e(A,Zm),e(Zm,tse),e(tse,doo),e(Zm,coo),e(Zm,nP),e(nP,foo),e(Zm,moo),e(A,goo),e(A,eg),e(eg,ase),e(ase,hoo),e(eg,poo),e(eg,sP),e(sP,_oo),e(eg,uoo),e(A,boo),e(A,og),e(og,nse),e(nse,voo),e(og,Foo),e(og,lP),e(lP,Too),e(og,Moo),e(A,Eoo),e(A,rg),e(rg,sse),e(sse,Coo),e(rg,woo),e(rg,iP),e(iP,Aoo),e(rg,Loo),e(A,yoo),e(A,tg),e(tg,lse),e(lse,xoo),e(tg,$oo),e(tg,dP),e(dP,koo),e(tg,Soo),e(A,Roo),e(A,ag),e(ag,ise),e(ise,Poo),e(ag,Boo),e(ag,cP),e(cP,Ioo),e(ag,Noo),e(A,qoo),e(A,ng),e(ng,dse),e(dse,joo),e(ng,Doo),e(ng,fP),e(fP,Goo),e(ng,Ooo),e(A,Voo),e(A,sg),e(sg,cse),e(cse,Xoo),e(sg,zoo),e(sg,mP),e(mP,Woo),e(sg,Qoo),e(A,Hoo),e(A,lg),e(lg,fse),e(fse,Uoo),e(lg,Joo),e(lg,gP),e(gP,Yoo),e(lg,Koo),e(A,Zoo),e(A,ig),e(ig,mse),e(mse,ero),e(ig,oro),e(ig,hP),e(hP,rro),e(ig,tro),e(A,aro),e(A,dg),e(dg,gse),e(gse,nro),e(dg,sro),e(dg,pP),e(pP,lro),e(dg,iro),e(A,dro),e(A,cg),e(cg,hse),e(hse,cro),e(cg,fro),e(cg,_P),e(_P,mro),e(cg,gro),e(A,hro),e(A,fg),e(fg,pse),e(pse,pro),e(fg,_ro),e(fg,uP),e(uP,uro),e(fg,bro),e(A,vro),e(A,mg),e(mg,_se),e(_se,Fro),e(mg,Tro),e(mg,bP),e(bP,Mro),e(mg,Ero),e(A,Cro),e(A,gg),e(gg,use),e(use,wro),e(gg,Aro),e(gg,vP),e(vP,Lro),e(gg,yro),e(A,xro),e(A,hg),e(hg,bse),e(bse,$ro),e(hg,kro),e(hg,FP),e(FP,Sro),e(hg,Rro),e(A,Pro),e(A,pg),e(pg,vse),e(vse,Bro),e(pg,Iro),e(pg,TP),e(TP,Nro),e(pg,qro),e(A,jro),e(A,_g),e(_g,Fse),e(Fse,Dro),e(_g,Gro),e(_g,MP),e(MP,Oro),e(_g,Vro),e(A,Xro),e(A,ug),e(ug,Tse),e(Tse,zro),e(ug,Wro),e(ug,EP),e(EP,Qro),e(ug,Hro),e(A,Uro),e(A,bg),e(bg,Mse),e(Mse,Jro),e(bg,Yro),e(bg,CP),e(CP,Kro),e(bg,Zro),e(A,eto),e(A,vg),e(vg,Ese),e(Ese,oto),e(vg,rto),e(vg,wP),e(wP,tto),e(vg,ato),e(A,nto),e(A,Fg),e(Fg,Cse),e(Cse,sto),e(Fg,lto),e(Fg,AP),e(AP,ito),e(Fg,dto),e(A,cto),e(A,Tg),e(Tg,wse),e(wse,fto),e(Tg,mto),e(Tg,LP),e(LP,gto),e(Tg,hto),e(A,pto),e(A,Mg),e(Mg,Ase),e(Ase,_to),e(Mg,uto),e(Mg,yP),e(yP,bto),e(Mg,vto),e(A,Fto),e(A,Eg),e(Eg,Lse),e(Lse,Tto),e(Eg,Mto),e(Eg,xP),e(xP,Eto),e(Eg,Cto),e(A,wto),e(A,Cg),e(Cg,yse),e(yse,Ato),e(Cg,Lto),e(Cg,$P),e($P,yto),e(Cg,xto),e(A,$to),e(A,wg),e(wg,xse),e(xse,kto),e(wg,Sto),e(wg,kP),e(kP,Rto),e(wg,Pto),e(A,Bto),e(A,Ag),e(Ag,$se),e($se,Ito),e(Ag,Nto),e(Ag,SP),e(SP,qto),e(Ag,jto),e(A,Dto),e(A,Lg),e(Lg,kse),e(kse,Gto),e(Lg,Oto),e(Lg,RP),e(RP,Vto),e(Lg,Xto),e(A,zto),e(A,yg),e(yg,Sse),e(Sse,Wto),e(yg,Qto),e(yg,PP),e(PP,Hto),e(yg,Uto),e(A,Jto),e(A,xg),e(xg,Rse),e(Rse,Yto),e(xg,Kto),e(xg,BP),e(BP,Zto),e(xg,eao),e(A,oao),e(A,$g),e($g,Pse),e(Pse,rao),e($g,tao),e($g,IP),e(IP,aao),e($g,nao),e(A,sao),e(A,kg),e(kg,Bse),e(Bse,lao),e(kg,iao),e(kg,NP),e(NP,dao),e(kg,cao),e(A,fao),e(A,Sg),e(Sg,Ise),e(Ise,mao),e(Sg,gao),e(Sg,qP),e(qP,hao),e(Sg,pao),e(A,_ao),e(A,Rg),e(Rg,Nse),e(Nse,uao),e(Rg,bao),e(Rg,jP),e(jP,vao),e(Rg,Fao),e(A,Tao),e(A,Pg),e(Pg,qse),e(qse,Mao),e(Pg,Eao),e(Pg,DP),e(DP,Cao),e(Pg,wao),e(A,Aao),e(A,Bg),e(Bg,jse),e(jse,Lao),e(Bg,yao),e(Bg,GP),e(GP,xao),e(Bg,$ao),e(A,kao),e(A,Ig),e(Ig,Dse),e(Dse,Sao),e(Ig,Rao),e(Ig,OP),e(OP,Pao),e(Ig,Bao),e(A,Iao),e(A,Ng),e(Ng,Gse),e(Gse,Nao),e(Ng,qao),e(Ng,VP),e(VP,jao),e(Ng,Dao),e(A,Gao),e(A,qg),e(qg,Ose),e(Ose,Oao),e(qg,Vao),e(qg,XP),e(XP,Xao),e(qg,zao),e(A,Wao),e(A,jg),e(jg,Vse),e(Vse,Qao),e(jg,Hao),e(jg,zP),e(zP,Uao),e(jg,Jao),e(A,Yao),e(A,Dg),e(Dg,Xse),e(Xse,Kao),e(Dg,Zao),e(Dg,WP),e(WP,eno),e(Dg,ono),e(A,rno),e(A,Gg),e(Gg,zse),e(zse,tno),e(Gg,ano),e(Gg,QP),e(QP,nno),e(Gg,sno),e(A,lno),e(A,Og),e(Og,Wse),e(Wse,ino),e(Og,dno),e(Og,HP),e(HP,cno),e(Og,fno),e(A,mno),e(A,Vg),e(Vg,Qse),e(Qse,gno),e(Vg,hno),e(Vg,UP),e(UP,pno),e(Vg,_no),e(A,uno),e(A,Xg),e(Xg,Hse),e(Hse,bno),e(Xg,vno),e(Xg,JP),e(JP,Fno),e(Xg,Tno),e(A,Mno),e(A,zg),e(zg,Use),e(Use,Eno),e(zg,Cno),e(zg,YP),e(YP,wno),e(zg,Ano),e(A,Lno),e(A,Wg),e(Wg,Jse),e(Jse,yno),e(Wg,xno),e(Wg,KP),e(KP,$no),e(Wg,kno),e(A,Sno),e(A,Qg),e(Qg,Yse),e(Yse,Rno),e(Qg,Pno),e(Qg,ZP),e(ZP,Bno),e(Qg,Ino),e(A,Nno),e(A,Hg),e(Hg,Kse),e(Kse,qno),e(Hg,jno),e(Hg,eB),e(eB,Dno),e(Hg,Gno),e(A,Ono),e(A,Ug),e(Ug,Zse),e(Zse,Vno),e(Ug,Xno),e(Ug,oB),e(oB,zno),e(Ug,Wno),e(A,Qno),e(A,Jg),e(Jg,ele),e(ele,Hno),e(Jg,Uno),e(Jg,rB),e(rB,Jno),e(Jg,Yno),e(A,Kno),e(A,Yg),e(Yg,ole),e(ole,Zno),e(Yg,eso),e(Yg,tB),e(tB,oso),e(Yg,rso),e(A,tso),e(A,Kg),e(Kg,rle),e(rle,aso),e(Kg,nso),e(Kg,aB),e(aB,sso),e(Kg,lso),e(Lr,iso),M(Zg,Lr,null),e(Ao,dso),e(Ao,eh),M(_6,eh,null),e(eh,cso),e(eh,tle),e(tle,fso),b(f,wXe,u),b(f,qi,u),e(qi,oh),e(oh,ale),M(u6,ale,null),e(qi,mso),e(qi,nle),e(nle,gso),b(f,AXe,u),b(f,Lo,u),M(b6,Lo,null),e(Lo,hso),e(Lo,v6),e(v6,pso),e(v6,nB),e(nB,_so),e(v6,uso),e(Lo,bso),e(Lo,F6),e(F6,vso),e(F6,sle),e(sle,Fso),e(F6,Tso),e(Lo,Mso),e(Lo,yr),M(T6,yr,null),e(yr,Eso),e(yr,lle),e(lle,Cso),e(yr,wso),e(yr,Pa),e(Pa,Aso),e(Pa,ile),e(ile,Lso),e(Pa,yso),e(Pa,dle),e(dle,xso),e(Pa,$so),e(Pa,cle),e(cle,kso),e(Pa,Sso),e(yr,Rso),e(yr,k),e(k,jn),e(jn,fle),e(fle,Pso),e(jn,Bso),e(jn,sB),e(sB,Iso),e(jn,Nso),e(jn,lB),e(lB,qso),e(jn,jso),e(k,Dso),e(k,Dn),e(Dn,mle),e(mle,Gso),e(Dn,Oso),e(Dn,iB),e(iB,Vso),e(Dn,Xso),e(Dn,dB),e(dB,zso),e(Dn,Wso),e(k,Qso),e(k,Gn),e(Gn,gle),e(gle,Hso),e(Gn,Uso),e(Gn,cB),e(cB,Jso),e(Gn,Yso),e(Gn,fB),e(fB,Kso),e(Gn,Zso),e(k,elo),e(k,rh),e(rh,hle),e(hle,olo),e(rh,rlo),e(rh,mB),e(mB,tlo),e(rh,alo),e(k,nlo),e(k,On),e(On,ple),e(ple,slo),e(On,llo),e(On,gB),e(gB,ilo),e(On,dlo),e(On,hB),e(hB,clo),e(On,flo),e(k,mlo),e(k,th),e(th,_le),e(_le,glo),e(th,hlo),e(th,pB),e(pB,plo),e(th,_lo),e(k,ulo),e(k,ah),e(ah,ule),e(ule,blo),e(ah,vlo),e(ah,_B),e(_B,Flo),e(ah,Tlo),e(k,Mlo),e(k,nh),e(nh,ble),e(ble,Elo),e(nh,Clo),e(nh,uB),e(uB,wlo),e(nh,Alo),e(k,Llo),e(k,Vn),e(Vn,vle),e(vle,ylo),e(Vn,xlo),e(Vn,bB),e(bB,$lo),e(Vn,klo),e(Vn,vB),e(vB,Slo),e(Vn,Rlo),e(k,Plo),e(k,Xn),e(Xn,Fle),e(Fle,Blo),e(Xn,Ilo),e(Xn,FB),e(FB,Nlo),e(Xn,qlo),e(Xn,TB),e(TB,jlo),e(Xn,Dlo),e(k,Glo),e(k,zn),e(zn,Tle),e(Tle,Olo),e(zn,Vlo),e(zn,MB),e(MB,Xlo),e(zn,zlo),e(zn,EB),e(EB,Wlo),e(zn,Qlo),e(k,Hlo),e(k,sh),e(sh,Mle),e(Mle,Ulo),e(sh,Jlo),e(sh,CB),e(CB,Ylo),e(sh,Klo),e(k,Zlo),e(k,lh),e(lh,Ele),e(Ele,eio),e(lh,oio),e(lh,wB),e(wB,rio),e(lh,tio),e(k,aio),e(k,ih),e(ih,Cle),e(Cle,nio),e(ih,sio),e(ih,AB),e(AB,lio),e(ih,iio),e(k,dio),e(k,Wn),e(Wn,wle),e(wle,cio),e(Wn,fio),e(Wn,LB),e(LB,mio),e(Wn,gio),e(Wn,yB),e(yB,hio),e(Wn,pio),e(k,_io),e(k,dh),e(dh,Ale),e(Ale,uio),e(dh,bio),e(dh,xB),e(xB,vio),e(dh,Fio),e(k,Tio),e(k,Qn),e(Qn,Lle),e(Lle,Mio),e(Qn,Eio),e(Qn,$B),e($B,Cio),e(Qn,wio),e(Qn,kB),e(kB,Aio),e(Qn,Lio),e(k,yio),e(k,Hn),e(Hn,yle),e(yle,xio),e(Hn,$io),e(Hn,SB),e(SB,kio),e(Hn,Sio),e(Hn,RB),e(RB,Rio),e(Hn,Pio),e(k,Bio),e(k,Un),e(Un,xle),e(xle,Iio),e(Un,Nio),e(Un,PB),e(PB,qio),e(Un,jio),e(Un,BB),e(BB,Dio),e(Un,Gio),e(k,Oio),e(k,Jn),e(Jn,$le),e($le,Vio),e(Jn,Xio),e(Jn,IB),e(IB,zio),e(Jn,Wio),e(Jn,NB),e(NB,Qio),e(Jn,Hio),e(k,Uio),e(k,ch),e(ch,kle),e(kle,Jio),e(ch,Yio),e(ch,qB),e(qB,Kio),e(ch,Zio),e(k,edo),e(k,Yn),e(Yn,Sle),e(Sle,odo),e(Yn,rdo),e(Yn,jB),e(jB,tdo),e(Yn,ado),e(Yn,DB),e(DB,ndo),e(Yn,sdo),e(k,ldo),e(k,Kn),e(Kn,Rle),e(Rle,ido),e(Kn,ddo),e(Kn,GB),e(GB,cdo),e(Kn,fdo),e(Kn,OB),e(OB,mdo),e(Kn,gdo),e(k,hdo),e(k,Zn),e(Zn,Ple),e(Ple,pdo),e(Zn,_do),e(Zn,VB),e(VB,udo),e(Zn,bdo),e(Zn,XB),e(XB,vdo),e(Zn,Fdo),e(k,Tdo),e(k,es),e(es,Ble),e(Ble,Mdo),e(es,Edo),e(es,zB),e(zB,Cdo),e(es,wdo),e(es,WB),e(WB,Ado),e(es,Ldo),e(k,ydo),e(k,os),e(os,Ile),e(Ile,xdo),e(os,$do),e(os,QB),e(QB,kdo),e(os,Sdo),e(os,HB),e(HB,Rdo),e(os,Pdo),e(k,Bdo),e(k,rs),e(rs,Nle),e(Nle,Ido),e(rs,Ndo),e(rs,UB),e(UB,qdo),e(rs,jdo),e(rs,JB),e(JB,Ddo),e(rs,Gdo),e(k,Odo),e(k,fh),e(fh,qle),e(qle,Vdo),e(fh,Xdo),e(fh,YB),e(YB,zdo),e(fh,Wdo),e(k,Qdo),e(k,ts),e(ts,jle),e(jle,Hdo),e(ts,Udo),e(ts,KB),e(KB,Jdo),e(ts,Ydo),e(ts,ZB),e(ZB,Kdo),e(ts,Zdo),e(k,eco),e(k,mh),e(mh,Dle),e(Dle,oco),e(mh,rco),e(mh,eI),e(eI,tco),e(mh,aco),e(k,nco),e(k,as),e(as,Gle),e(Gle,sco),e(as,lco),e(as,oI),e(oI,ico),e(as,dco),e(as,rI),e(rI,cco),e(as,fco),e(k,mco),e(k,ns),e(ns,Ole),e(Ole,gco),e(ns,hco),e(ns,tI),e(tI,pco),e(ns,_co),e(ns,aI),e(aI,uco),e(ns,bco),e(k,vco),e(k,ss),e(ss,Vle),e(Vle,Fco),e(ss,Tco),e(ss,nI),e(nI,Mco),e(ss,Eco),e(ss,sI),e(sI,Cco),e(ss,wco),e(k,Aco),e(k,gh),e(gh,Xle),e(Xle,Lco),e(gh,yco),e(gh,lI),e(lI,xco),e(gh,$co),e(k,kco),e(k,ls),e(ls,zle),e(zle,Sco),e(ls,Rco),e(ls,iI),e(iI,Pco),e(ls,Bco),e(ls,dI),e(dI,Ico),e(ls,Nco),e(k,qco),e(k,is),e(is,Wle),e(Wle,jco),e(is,Dco),e(is,cI),e(cI,Gco),e(is,Oco),e(is,fI),e(fI,Vco),e(is,Xco),e(k,zco),e(k,ds),e(ds,Qle),e(Qle,Wco),e(ds,Qco),e(ds,mI),e(mI,Hco),e(ds,Uco),e(ds,gI),e(gI,Jco),e(ds,Yco),e(k,Kco),e(k,hh),e(hh,Hle),e(Hle,Zco),e(hh,efo),e(hh,hI),e(hI,ofo),e(hh,rfo),e(k,tfo),e(k,cs),e(cs,Ule),e(Ule,afo),e(cs,nfo),e(cs,pI),e(pI,sfo),e(cs,lfo),e(cs,_I),e(_I,ifo),e(cs,dfo),e(k,cfo),e(k,fs),e(fs,Jle),e(Jle,ffo),e(fs,mfo),e(fs,uI),e(uI,gfo),e(fs,hfo),e(fs,bI),e(bI,pfo),e(fs,_fo),e(k,ufo),e(k,ms),e(ms,Yle),e(Yle,bfo),e(ms,vfo),e(ms,vI),e(vI,Ffo),e(ms,Tfo),e(ms,FI),e(FI,Mfo),e(ms,Efo),e(k,Cfo),e(k,gs),e(gs,Kle),e(Kle,wfo),e(gs,Afo),e(gs,TI),e(TI,Lfo),e(gs,yfo),e(gs,MI),e(MI,xfo),e(gs,$fo),e(k,kfo),e(k,hs),e(hs,Zle),e(Zle,Sfo),e(hs,Rfo),e(hs,EI),e(EI,Pfo),e(hs,Bfo),e(hs,CI),e(CI,Ifo),e(hs,Nfo),e(k,qfo),e(k,ps),e(ps,eie),e(eie,jfo),e(ps,Dfo),e(ps,wI),e(wI,Gfo),e(ps,Ofo),e(ps,AI),e(AI,Vfo),e(ps,Xfo),e(k,zfo),e(k,_s),e(_s,oie),e(oie,Wfo),e(_s,Qfo),e(_s,LI),e(LI,Hfo),e(_s,Ufo),e(_s,yI),e(yI,Jfo),e(_s,Yfo),e(k,Kfo),e(k,us),e(us,rie),e(rie,Zfo),e(us,emo),e(us,xI),e(xI,omo),e(us,rmo),e(us,$I),e($I,tmo),e(us,amo),e(k,nmo),e(k,ph),e(ph,tie),e(tie,smo),e(ph,lmo),e(ph,kI),e(kI,imo),e(ph,dmo),e(k,cmo),e(k,bs),e(bs,aie),e(aie,fmo),e(bs,mmo),e(bs,SI),e(SI,gmo),e(bs,hmo),e(bs,RI),e(RI,pmo),e(bs,_mo),e(k,umo),e(k,_h),e(_h,nie),e(nie,bmo),e(_h,vmo),e(_h,PI),e(PI,Fmo),e(_h,Tmo),e(k,Mmo),e(k,uh),e(uh,sie),e(sie,Emo),e(uh,Cmo),e(uh,BI),e(BI,wmo),e(uh,Amo),e(k,Lmo),e(k,vs),e(vs,lie),e(lie,ymo),e(vs,xmo),e(vs,II),e(II,$mo),e(vs,kmo),e(vs,NI),e(NI,Smo),e(vs,Rmo),e(k,Pmo),e(k,Fs),e(Fs,iie),e(iie,Bmo),e(Fs,Imo),e(Fs,qI),e(qI,Nmo),e(Fs,qmo),e(Fs,jI),e(jI,jmo),e(Fs,Dmo),e(k,Gmo),e(k,Ts),e(Ts,die),e(die,Omo),e(Ts,Vmo),e(Ts,DI),e(DI,Xmo),e(Ts,zmo),e(Ts,GI),e(GI,Wmo),e(Ts,Qmo),e(k,Hmo),e(k,bh),e(bh,cie),e(cie,Umo),e(bh,Jmo),e(bh,OI),e(OI,Ymo),e(bh,Kmo),e(k,Zmo),e(k,Ms),e(Ms,fie),e(fie,ego),e(Ms,ogo),e(Ms,VI),e(VI,rgo),e(Ms,tgo),e(Ms,XI),e(XI,ago),e(Ms,ngo),e(k,sgo),e(k,Es),e(Es,mie),e(mie,lgo),e(Es,igo),e(Es,zI),e(zI,dgo),e(Es,cgo),e(Es,WI),e(WI,fgo),e(Es,mgo),e(k,ggo),e(k,Cs),e(Cs,gie),e(gie,hgo),e(Cs,pgo),e(Cs,QI),e(QI,_go),e(Cs,ugo),e(Cs,HI),e(HI,bgo),e(Cs,vgo),e(k,Fgo),e(k,ws),e(ws,hie),e(hie,Tgo),e(ws,Mgo),e(ws,UI),e(UI,Ego),e(ws,Cgo),e(ws,JI),e(JI,wgo),e(ws,Ago),e(k,Lgo),e(k,As),e(As,pie),e(pie,ygo),e(As,xgo),e(As,YI),e(YI,$go),e(As,kgo),e(As,KI),e(KI,Sgo),e(As,Rgo),e(k,Pgo),e(k,Ls),e(Ls,_ie),e(_ie,Bgo),e(Ls,Igo),e(Ls,ZI),e(ZI,Ngo),e(Ls,qgo),e(Ls,eN),e(eN,jgo),e(Ls,Dgo),e(k,Ggo),e(k,ys),e(ys,uie),e(uie,Ogo),e(ys,Vgo),e(ys,oN),e(oN,Xgo),e(ys,zgo),e(ys,rN),e(rN,Wgo),e(ys,Qgo),e(k,Hgo),e(k,vh),e(vh,bie),e(bie,Ugo),e(vh,Jgo),e(vh,tN),e(tN,Ygo),e(vh,Kgo),e(k,Zgo),e(k,xs),e(xs,vie),e(vie,eho),e(xs,oho),e(xs,aN),e(aN,rho),e(xs,tho),e(xs,nN),e(nN,aho),e(xs,nho),e(k,sho),e(k,$s),e($s,Fie),e(Fie,lho),e($s,iho),e($s,sN),e(sN,dho),e($s,cho),e($s,lN),e(lN,fho),e($s,mho),e(k,gho),e(k,Fh),e(Fh,Tie),e(Tie,hho),e(Fh,pho),e(Fh,iN),e(iN,_ho),e(Fh,uho),e(k,bho),e(k,Th),e(Th,Mie),e(Mie,vho),e(Th,Fho),e(Th,dN),e(dN,Tho),e(Th,Mho),e(k,Eho),e(k,Mh),e(Mh,Eie),e(Eie,Cho),e(Mh,who),e(Mh,cN),e(cN,Aho),e(Mh,Lho),e(k,yho),e(k,Eh),e(Eh,Cie),e(Cie,xho),e(Eh,$ho),e(Eh,fN),e(fN,kho),e(Eh,Sho),e(k,Rho),e(k,ks),e(ks,wie),e(wie,Pho),e(ks,Bho),e(ks,mN),e(mN,Iho),e(ks,Nho),e(ks,gN),e(gN,qho),e(ks,jho),e(k,Dho),e(k,Ch),e(Ch,Aie),e(Aie,Gho),e(Ch,Oho),e(Ch,hN),e(hN,Vho),e(Ch,Xho),e(k,zho),e(k,Ss),e(Ss,Lie),e(Lie,Who),e(Ss,Qho),e(Ss,pN),e(pN,Hho),e(Ss,Uho),e(Ss,_N),e(_N,Jho),e(Ss,Yho),e(k,Kho),e(k,Rs),e(Rs,yie),e(yie,Zho),e(Rs,epo),e(Rs,uN),e(uN,opo),e(Rs,rpo),e(Rs,bN),e(bN,tpo),e(Rs,apo),e(k,npo),e(k,Ps),e(Ps,xie),e(xie,spo),e(Ps,lpo),e(Ps,vN),e(vN,ipo),e(Ps,dpo),e(Ps,FN),e(FN,cpo),e(Ps,fpo),e(k,mpo),e(k,Bs),e(Bs,$ie),e($ie,gpo),e(Bs,hpo),e(Bs,TN),e(TN,ppo),e(Bs,_po),e(Bs,MN),e(MN,upo),e(Bs,bpo),e(k,vpo),e(k,Is),e(Is,kie),e(kie,Fpo),e(Is,Tpo),e(Is,EN),e(EN,Mpo),e(Is,Epo),e(Is,CN),e(CN,Cpo),e(Is,wpo),e(k,Apo),e(k,Ns),e(Ns,Sie),e(Sie,Lpo),e(Ns,ypo),e(Ns,wN),e(wN,xpo),e(Ns,$po),e(Ns,AN),e(AN,kpo),e(Ns,Spo),e(k,Rpo),e(k,wh),e(wh,Rie),e(Rie,Ppo),e(wh,Bpo),e(wh,LN),e(LN,Ipo),e(wh,Npo),e(k,qpo),e(k,Ah),e(Ah,Pie),e(Pie,jpo),e(Ah,Dpo),e(Ah,yN),e(yN,Gpo),e(Ah,Opo),e(k,Vpo),e(k,qs),e(qs,Bie),e(Bie,Xpo),e(qs,zpo),e(qs,xN),e(xN,Wpo),e(qs,Qpo),e(qs,$N),e($N,Hpo),e(qs,Upo),e(k,Jpo),e(k,js),e(js,Iie),e(Iie,Ypo),e(js,Kpo),e(js,kN),e(kN,Zpo),e(js,e_o),e(js,SN),e(SN,o_o),e(js,r_o),e(k,t_o),e(k,Ds),e(Ds,Nie),e(Nie,a_o),e(Ds,n_o),e(Ds,RN),e(RN,s_o),e(Ds,l_o),e(Ds,PN),e(PN,i_o),e(Ds,d_o),e(k,c_o),e(k,Lh),e(Lh,qie),e(qie,f_o),e(Lh,m_o),e(Lh,BN),e(BN,g_o),e(Lh,h_o),e(k,p_o),e(k,yh),e(yh,jie),e(jie,__o),e(yh,u_o),e(yh,IN),e(IN,b_o),e(yh,v_o),e(k,F_o),e(k,xh),e(xh,Die),e(Die,T_o),e(xh,M_o),e(xh,NN),e(NN,E_o),e(xh,C_o),e(k,w_o),e(k,Gs),e(Gs,Gie),e(Gie,A_o),e(Gs,L_o),e(Gs,qN),e(qN,y_o),e(Gs,x_o),e(Gs,jN),e(jN,$_o),e(Gs,k_o),e(k,S_o),e(k,Os),e(Os,Oie),e(Oie,R_o),e(Os,P_o),e(Os,DN),e(DN,B_o),e(Os,I_o),e(Os,GN),e(GN,N_o),e(Os,q_o),e(k,j_o),e(k,$h),e($h,Vie),e(Vie,D_o),e($h,G_o),e($h,ON),e(ON,O_o),e($h,V_o),e(k,X_o),e(k,kh),e(kh,Xie),e(Xie,z_o),e(kh,W_o),e(kh,VN),e(VN,Q_o),e(kh,H_o),e(k,U_o),e(k,Sh),e(Sh,zie),e(zie,J_o),e(Sh,Y_o),e(Sh,XN),e(XN,K_o),e(Sh,Z_o),e(k,euo),e(k,Vs),e(Vs,Wie),e(Wie,ouo),e(Vs,ruo),e(Vs,zN),e(zN,tuo),e(Vs,auo),e(Vs,WN),e(WN,nuo),e(Vs,suo),e(k,luo),e(k,Rh),e(Rh,Qie),e(Qie,iuo),e(Rh,duo),e(Rh,QN),e(QN,cuo),e(Rh,fuo),e(k,muo),e(k,Ph),e(Ph,Hie),e(Hie,guo),e(Ph,huo),e(Ph,HN),e(HN,puo),e(Ph,_uo),e(k,uuo),e(k,Xs),e(Xs,Uie),e(Uie,buo),e(Xs,vuo),e(Xs,UN),e(UN,Fuo),e(Xs,Tuo),e(Xs,JN),e(JN,Muo),e(Xs,Euo),e(k,Cuo),e(k,zs),e(zs,Jie),e(Jie,wuo),e(zs,Auo),e(zs,YN),e(YN,Luo),e(zs,yuo),e(zs,KN),e(KN,xuo),e(zs,$uo),e(k,kuo),e(k,Ws),e(Ws,Yie),e(Yie,Suo),e(Ws,Ruo),e(Ws,ZN),e(ZN,Puo),e(Ws,Buo),e(Ws,eq),e(eq,Iuo),e(Ws,Nuo),e(k,quo),e(k,Qs),e(Qs,Kie),e(Kie,juo),e(Qs,Duo),e(Qs,oq),e(oq,Guo),e(Qs,Ouo),e(Qs,rq),e(rq,Vuo),e(Qs,Xuo),e(yr,zuo),M(Bh,yr,null),e(Lo,Wuo),e(Lo,Ih),M(M6,Ih,null),e(Ih,Quo),e(Ih,Zie),e(Zie,Huo),b(f,LXe,u),b(f,ji,u),e(ji,Nh),e(Nh,ede),M(E6,ede,null),e(ji,Uuo),e(ji,ode),e(ode,Juo),b(f,yXe,u),b(f,yo,u),M(C6,yo,null),e(yo,Yuo),e(yo,w6),e(w6,Kuo),e(w6,tq),e(tq,Zuo),e(w6,e1o),e(yo,o1o),e(yo,A6),e(A6,r1o),e(A6,rde),e(rde,t1o),e(A6,a1o),e(yo,n1o),e(yo,Ue),M(L6,Ue,null),e(Ue,s1o),e(Ue,tde),e(tde,l1o),e(Ue,i1o),e(Ue,Ba),e(Ba,d1o),e(Ba,ade),e(ade,c1o),e(Ba,f1o),e(Ba,nde),e(nde,m1o),e(Ba,g1o),e(Ba,sde),e(sde,h1o),e(Ba,p1o),e(Ue,_1o),e(Ue,J),e(J,qh),e(qh,lde),e(lde,u1o),e(qh,b1o),e(qh,aq),e(aq,v1o),e(qh,F1o),e(J,T1o),e(J,jh),e(jh,ide),e(ide,M1o),e(jh,E1o),e(jh,nq),e(nq,C1o),e(jh,w1o),e(J,A1o),e(J,Dh),e(Dh,dde),e(dde,L1o),e(Dh,y1o),e(Dh,sq),e(sq,x1o),e(Dh,$1o),e(J,k1o),e(J,Gh),e(Gh,cde),e(cde,S1o),e(Gh,R1o),e(Gh,lq),e(lq,P1o),e(Gh,B1o),e(J,I1o),e(J,Oh),e(Oh,fde),e(fde,N1o),e(Oh,q1o),e(Oh,iq),e(iq,j1o),e(Oh,D1o),e(J,G1o),e(J,Vh),e(Vh,mde),e(mde,O1o),e(Vh,V1o),e(Vh,dq),e(dq,X1o),e(Vh,z1o),e(J,W1o),e(J,Xh),e(Xh,gde),e(gde,Q1o),e(Xh,H1o),e(Xh,cq),e(cq,U1o),e(Xh,J1o),e(J,Y1o),e(J,zh),e(zh,hde),e(hde,K1o),e(zh,Z1o),e(zh,fq),e(fq,e2o),e(zh,o2o),e(J,r2o),e(J,Wh),e(Wh,pde),e(pde,t2o),e(Wh,a2o),e(Wh,mq),e(mq,n2o),e(Wh,s2o),e(J,l2o),e(J,Qh),e(Qh,_de),e(_de,i2o),e(Qh,d2o),e(Qh,gq),e(gq,c2o),e(Qh,f2o),e(J,m2o),e(J,Hh),e(Hh,ude),e(ude,g2o),e(Hh,h2o),e(Hh,hq),e(hq,p2o),e(Hh,_2o),e(J,u2o),e(J,Uh),e(Uh,bde),e(bde,b2o),e(Uh,v2o),e(Uh,pq),e(pq,F2o),e(Uh,T2o),e(J,M2o),e(J,Jh),e(Jh,vde),e(vde,E2o),e(Jh,C2o),e(Jh,_q),e(_q,w2o),e(Jh,A2o),e(J,L2o),e(J,Yh),e(Yh,Fde),e(Fde,y2o),e(Yh,x2o),e(Yh,uq),e(uq,$2o),e(Yh,k2o),e(J,S2o),e(J,Kh),e(Kh,Tde),e(Tde,R2o),e(Kh,P2o),e(Kh,bq),e(bq,B2o),e(Kh,I2o),e(J,N2o),e(J,Zh),e(Zh,Mde),e(Mde,q2o),e(Zh,j2o),e(Zh,vq),e(vq,D2o),e(Zh,G2o),e(J,O2o),e(J,ep),e(ep,Ede),e(Ede,V2o),e(ep,X2o),e(ep,Fq),e(Fq,z2o),e(ep,W2o),e(J,Q2o),e(J,op),e(op,Cde),e(Cde,H2o),e(op,U2o),e(op,Tq),e(Tq,J2o),e(op,Y2o),e(J,K2o),e(J,rp),e(rp,wde),e(wde,Z2o),e(rp,ebo),e(rp,Mq),e(Mq,obo),e(rp,rbo),e(J,tbo),e(J,tp),e(tp,Ade),e(Ade,abo),e(tp,nbo),e(tp,Eq),e(Eq,sbo),e(tp,lbo),e(J,ibo),e(J,ap),e(ap,Lde),e(Lde,dbo),e(ap,cbo),e(ap,Cq),e(Cq,fbo),e(ap,mbo),e(J,gbo),e(J,np),e(np,yde),e(yde,hbo),e(np,pbo),e(np,wq),e(wq,_bo),e(np,ubo),e(J,bbo),e(J,sp),e(sp,xde),e(xde,vbo),e(sp,Fbo),e(sp,Aq),e(Aq,Tbo),e(sp,Mbo),e(J,Ebo),e(J,lp),e(lp,$de),e($de,Cbo),e(lp,wbo),e(lp,Lq),e(Lq,Abo),e(lp,Lbo),e(J,ybo),e(J,ip),e(ip,kde),e(kde,xbo),e(ip,$bo),e(ip,yq),e(yq,kbo),e(ip,Sbo),e(J,Rbo),e(J,dp),e(dp,Sde),e(Sde,Pbo),e(dp,Bbo),e(dp,xq),e(xq,Ibo),e(dp,Nbo),e(J,qbo),e(J,cp),e(cp,Rde),e(Rde,jbo),e(cp,Dbo),e(cp,$q),e($q,Gbo),e(cp,Obo),e(J,Vbo),e(J,fp),e(fp,Pde),e(Pde,Xbo),e(fp,zbo),e(fp,kq),e(kq,Wbo),e(fp,Qbo),e(J,Hbo),e(J,mp),e(mp,Bde),e(Bde,Ubo),e(mp,Jbo),e(mp,Sq),e(Sq,Ybo),e(mp,Kbo),e(J,Zbo),e(J,gp),e(gp,Ide),e(Ide,evo),e(gp,ovo),e(gp,Rq),e(Rq,rvo),e(gp,tvo),e(J,avo),e(J,hp),e(hp,Nde),e(Nde,nvo),e(hp,svo),e(hp,Pq),e(Pq,lvo),e(hp,ivo),e(J,dvo),e(J,pp),e(pp,qde),e(qde,cvo),e(pp,fvo),e(pp,Bq),e(Bq,mvo),e(pp,gvo),e(J,hvo),e(J,_p),e(_p,jde),e(jde,pvo),e(_p,_vo),e(_p,Iq),e(Iq,uvo),e(_p,bvo),e(J,vvo),e(J,up),e(up,Dde),e(Dde,Fvo),e(up,Tvo),e(up,Nq),e(Nq,Mvo),e(up,Evo),e(J,Cvo),e(J,bp),e(bp,Gde),e(Gde,wvo),e(bp,Avo),e(bp,qq),e(qq,Lvo),e(bp,yvo),e(Ue,xvo),M(vp,Ue,null),e(Ue,$vo),M(Fp,Ue,null),e(yo,kvo),e(yo,Tp),M(y6,Tp,null),e(Tp,Svo),e(Tp,Ode),e(Ode,Rvo),b(f,xXe,u),b(f,Di,u),e(Di,Mp),e(Mp,Vde),M(x6,Vde,null),e(Di,Pvo),e(Di,Xde),e(Xde,Bvo),b(f,$Xe,u),b(f,xo,u),M($6,xo,null),e(xo,Ivo),e(xo,k6),e(k6,Nvo),e(k6,jq),e(jq,qvo),e(k6,jvo),e(xo,Dvo),e(xo,S6),e(S6,Gvo),e(S6,zde),e(zde,Ovo),e(S6,Vvo),e(xo,Xvo),e(xo,Je),M(R6,Je,null),e(Je,zvo),e(Je,Wde),e(Wde,Wvo),e(Je,Qvo),e(Je,Gi),e(Gi,Hvo),e(Gi,Qde),e(Qde,Uvo),e(Gi,Jvo),e(Gi,Hde),e(Hde,Yvo),e(Gi,Kvo),e(Je,Zvo),e(Je,fe),e(fe,Ep),e(Ep,Ude),e(Ude,e3o),e(Ep,o3o),e(Ep,Dq),e(Dq,r3o),e(Ep,t3o),e(fe,a3o),e(fe,Cp),e(Cp,Jde),e(Jde,n3o),e(Cp,s3o),e(Cp,Yde),e(Yde,l3o),e(Cp,i3o),e(fe,d3o),e(fe,wp),e(wp,Kde),e(Kde,c3o),e(wp,f3o),e(wp,Gq),e(Gq,m3o),e(wp,g3o),e(fe,h3o),e(fe,Ap),e(Ap,Zde),e(Zde,p3o),e(Ap,_3o),e(Ap,Oq),e(Oq,u3o),e(Ap,b3o),e(fe,v3o),e(fe,Lp),e(Lp,ece),e(ece,F3o),e(Lp,T3o),e(Lp,Vq),e(Vq,M3o),e(Lp,E3o),e(fe,C3o),e(fe,yp),e(yp,oce),e(oce,w3o),e(yp,A3o),e(yp,Xq),e(Xq,L3o),e(yp,y3o),e(fe,x3o),e(fe,xp),e(xp,rce),e(rce,$3o),e(xp,k3o),e(xp,zq),e(zq,S3o),e(xp,R3o),e(fe,P3o),e(fe,$p),e($p,tce),e(tce,B3o),e($p,I3o),e($p,Wq),e(Wq,N3o),e($p,q3o),e(fe,j3o),e(fe,kp),e(kp,ace),e(ace,D3o),e(kp,G3o),e(kp,Qq),e(Qq,O3o),e(kp,V3o),e(fe,X3o),e(fe,Sp),e(Sp,nce),e(nce,z3o),e(Sp,W3o),e(Sp,Hq),e(Hq,Q3o),e(Sp,H3o),e(fe,U3o),e(fe,Rp),e(Rp,sce),e(sce,J3o),e(Rp,Y3o),e(Rp,Uq),e(Uq,K3o),e(Rp,Z3o),e(fe,eFo),e(fe,Pp),e(Pp,lce),e(lce,oFo),e(Pp,rFo),e(Pp,Jq),e(Jq,tFo),e(Pp,aFo),e(fe,nFo),e(fe,Bp),e(Bp,ice),e(ice,sFo),e(Bp,lFo),e(Bp,Yq),e(Yq,iFo),e(Bp,dFo),e(fe,cFo),e(fe,Ip),e(Ip,dce),e(dce,fFo),e(Ip,mFo),e(Ip,Kq),e(Kq,gFo),e(Ip,hFo),e(fe,pFo),e(fe,Np),e(Np,cce),e(cce,_Fo),e(Np,uFo),e(Np,Zq),e(Zq,bFo),e(Np,vFo),e(fe,FFo),e(fe,qp),e(qp,fce),e(fce,TFo),e(qp,MFo),e(qp,ej),e(ej,EFo),e(qp,CFo),e(fe,wFo),e(fe,jp),e(jp,mce),e(mce,AFo),e(jp,LFo),e(jp,oj),e(oj,yFo),e(jp,xFo),e(fe,$Fo),e(fe,Dp),e(Dp,gce),e(gce,kFo),e(Dp,SFo),e(Dp,rj),e(rj,RFo),e(Dp,PFo),e(fe,BFo),e(fe,Gp),e(Gp,hce),e(hce,IFo),e(Gp,NFo),e(Gp,tj),e(tj,qFo),e(Gp,jFo),e(Je,DFo),M(Op,Je,null),e(Je,GFo),M(Vp,Je,null),e(xo,OFo),e(xo,Xp),M(P6,Xp,null),e(Xp,VFo),e(Xp,pce),e(pce,XFo),b(f,kXe,u),b(f,Oi,u),e(Oi,zp),e(zp,_ce),M(B6,_ce,null),e(Oi,zFo),e(Oi,uce),e(uce,WFo),b(f,SXe,u),b(f,$o,u),M(I6,$o,null),e($o,QFo),e($o,Vi),e(Vi,HFo),e(Vi,aj),e(aj,UFo),e(Vi,JFo),e(Vi,nj),e(nj,YFo),e(Vi,KFo),e($o,ZFo),e($o,N6),e(N6,eTo),e(N6,bce),e(bce,oTo),e(N6,rTo),e($o,tTo),e($o,it),M(q6,it,null),e(it,aTo),e(it,vce),e(vce,nTo),e(it,sTo),e(it,Xi),e(Xi,lTo),e(Xi,Fce),e(Fce,iTo),e(Xi,dTo),e(Xi,sj),e(sj,cTo),e(Xi,fTo),e(it,mTo),M(Wp,it,null),e($o,gTo),e($o,Ye),M(j6,Ye,null),e(Ye,hTo),e(Ye,Tce),e(Tce,pTo),e(Ye,_To),e(Ye,Ia),e(Ia,uTo),e(Ia,Mce),e(Mce,bTo),e(Ia,vTo),e(Ia,Ece),e(Ece,FTo),e(Ia,TTo),e(Ia,Cce),e(Cce,MTo),e(Ia,ETo),e(Ye,CTo),e(Ye,y),e(y,Qp),e(Qp,wce),e(wce,wTo),e(Qp,ATo),e(Qp,lj),e(lj,LTo),e(Qp,yTo),e(y,xTo),e(y,Hp),e(Hp,Ace),e(Ace,$To),e(Hp,kTo),e(Hp,ij),e(ij,STo),e(Hp,RTo),e(y,PTo),e(y,Up),e(Up,Lce),e(Lce,BTo),e(Up,ITo),e(Up,dj),e(dj,NTo),e(Up,qTo),e(y,jTo),e(y,Jp),e(Jp,yce),e(yce,DTo),e(Jp,GTo),e(Jp,cj),e(cj,OTo),e(Jp,VTo),e(y,XTo),e(y,Yp),e(Yp,xce),e(xce,zTo),e(Yp,WTo),e(Yp,fj),e(fj,QTo),e(Yp,HTo),e(y,UTo),e(y,Kp),e(Kp,$ce),e($ce,JTo),e(Kp,YTo),e(Kp,mj),e(mj,KTo),e(Kp,ZTo),e(y,e7o),e(y,Zp),e(Zp,kce),e(kce,o7o),e(Zp,r7o),e(Zp,gj),e(gj,t7o),e(Zp,a7o),e(y,n7o),e(y,e_),e(e_,Sce),e(Sce,s7o),e(e_,l7o),e(e_,hj),e(hj,i7o),e(e_,d7o),e(y,c7o),e(y,o_),e(o_,Rce),e(Rce,f7o),e(o_,m7o),e(o_,pj),e(pj,g7o),e(o_,h7o),e(y,p7o),e(y,r_),e(r_,Pce),e(Pce,_7o),e(r_,u7o),e(r_,_j),e(_j,b7o),e(r_,v7o),e(y,F7o),e(y,t_),e(t_,Bce),e(Bce,T7o),e(t_,M7o),e(t_,uj),e(uj,E7o),e(t_,C7o),e(y,w7o),e(y,a_),e(a_,Ice),e(Ice,A7o),e(a_,L7o),e(a_,bj),e(bj,y7o),e(a_,x7o),e(y,$7o),e(y,n_),e(n_,Nce),e(Nce,k7o),e(n_,S7o),e(n_,vj),e(vj,R7o),e(n_,P7o),e(y,B7o),e(y,s_),e(s_,qce),e(qce,I7o),e(s_,N7o),e(s_,Fj),e(Fj,q7o),e(s_,j7o),e(y,D7o),e(y,l_),e(l_,jce),e(jce,G7o),e(l_,O7o),e(l_,Tj),e(Tj,V7o),e(l_,X7o),e(y,z7o),e(y,i_),e(i_,Dce),e(Dce,W7o),e(i_,Q7o),e(i_,Mj),e(Mj,H7o),e(i_,U7o),e(y,J7o),e(y,d_),e(d_,Gce),e(Gce,Y7o),e(d_,K7o),e(d_,Ej),e(Ej,Z7o),e(d_,e8o),e(y,o8o),e(y,c_),e(c_,Oce),e(Oce,r8o),e(c_,t8o),e(c_,Cj),e(Cj,a8o),e(c_,n8o),e(y,s8o),e(y,f_),e(f_,Vce),e(Vce,l8o),e(f_,i8o),e(f_,wj),e(wj,d8o),e(f_,c8o),e(y,f8o),e(y,m_),e(m_,Xce),e(Xce,m8o),e(m_,g8o),e(m_,Aj),e(Aj,h8o),e(m_,p8o),e(y,_8o),e(y,g_),e(g_,zce),e(zce,u8o),e(g_,b8o),e(g_,Lj),e(Lj,v8o),e(g_,F8o),e(y,T8o),e(y,h_),e(h_,Wce),e(Wce,M8o),e(h_,E8o),e(h_,yj),e(yj,C8o),e(h_,w8o),e(y,A8o),e(y,p_),e(p_,Qce),e(Qce,L8o),e(p_,y8o),e(p_,xj),e(xj,x8o),e(p_,$8o),e(y,k8o),e(y,__),e(__,Hce),e(Hce,S8o),e(__,R8o),e(__,$j),e($j,P8o),e(__,B8o),e(y,I8o),e(y,u_),e(u_,Uce),e(Uce,N8o),e(u_,q8o),e(u_,kj),e(kj,j8o),e(u_,D8o),e(y,G8o),e(y,b_),e(b_,Jce),e(Jce,O8o),e(b_,V8o),e(b_,Sj),e(Sj,X8o),e(b_,z8o),e(y,W8o),e(y,v_),e(v_,Yce),e(Yce,Q8o),e(v_,H8o),e(v_,Rj),e(Rj,U8o),e(v_,J8o),e(y,Y8o),e(y,F_),e(F_,Kce),e(Kce,K8o),e(F_,Z8o),e(F_,Pj),e(Pj,e9o),e(F_,o9o),e(y,r9o),e(y,T_),e(T_,Zce),e(Zce,t9o),e(T_,a9o),e(T_,Bj),e(Bj,n9o),e(T_,s9o),e(y,l9o),e(y,M_),e(M_,efe),e(efe,i9o),e(M_,d9o),e(M_,Ij),e(Ij,c9o),e(M_,f9o),e(y,m9o),e(y,E_),e(E_,ofe),e(ofe,g9o),e(E_,h9o),e(E_,Nj),e(Nj,p9o),e(E_,_9o),e(y,u9o),e(y,C_),e(C_,rfe),e(rfe,b9o),e(C_,v9o),e(C_,qj),e(qj,F9o),e(C_,T9o),e(y,M9o),e(y,w_),e(w_,tfe),e(tfe,E9o),e(w_,C9o),e(w_,jj),e(jj,w9o),e(w_,A9o),e(y,L9o),e(y,A_),e(A_,afe),e(afe,y9o),e(A_,x9o),e(A_,Dj),e(Dj,$9o),e(A_,k9o),e(y,S9o),e(y,Hs),e(Hs,nfe),e(nfe,R9o),e(Hs,P9o),e(Hs,Gj),e(Gj,B9o),e(Hs,I9o),e(Hs,Oj),e(Oj,N9o),e(Hs,q9o),e(y,j9o),e(y,L_),e(L_,sfe),e(sfe,D9o),e(L_,G9o),e(L_,Vj),e(Vj,O9o),e(L_,V9o),e(y,X9o),e(y,y_),e(y_,lfe),e(lfe,z9o),e(y_,W9o),e(y_,Xj),e(Xj,Q9o),e(y_,H9o),e(y,U9o),e(y,x_),e(x_,ife),e(ife,J9o),e(x_,Y9o),e(x_,zj),e(zj,K9o),e(x_,Z9o),e(y,eMo),e(y,$_),e($_,dfe),e(dfe,oMo),e($_,rMo),e($_,Wj),e(Wj,tMo),e($_,aMo),e(y,nMo),e(y,k_),e(k_,cfe),e(cfe,sMo),e(k_,lMo),e(k_,Qj),e(Qj,iMo),e(k_,dMo),e(y,cMo),e(y,S_),e(S_,ffe),e(ffe,fMo),e(S_,mMo),e(S_,Hj),e(Hj,gMo),e(S_,hMo),e(y,pMo),e(y,R_),e(R_,mfe),e(mfe,_Mo),e(R_,uMo),e(R_,Uj),e(Uj,bMo),e(R_,vMo),e(y,FMo),e(y,P_),e(P_,gfe),e(gfe,TMo),e(P_,MMo),e(P_,Jj),e(Jj,EMo),e(P_,CMo),e(y,wMo),e(y,B_),e(B_,hfe),e(hfe,AMo),e(B_,LMo),e(B_,Yj),e(Yj,yMo),e(B_,xMo),e(y,$Mo),e(y,I_),e(I_,pfe),e(pfe,kMo),e(I_,SMo),e(I_,Kj),e(Kj,RMo),e(I_,PMo),e(y,BMo),e(y,N_),e(N_,_fe),e(_fe,IMo),e(N_,NMo),e(N_,Zj),e(Zj,qMo),e(N_,jMo),e(y,DMo),e(y,q_),e(q_,ufe),e(ufe,GMo),e(q_,OMo),e(q_,eD),e(eD,VMo),e(q_,XMo),e(y,zMo),e(y,j_),e(j_,bfe),e(bfe,WMo),e(j_,QMo),e(j_,oD),e(oD,HMo),e(j_,UMo),e(y,JMo),e(y,D_),e(D_,vfe),e(vfe,YMo),e(D_,KMo),e(D_,rD),e(rD,ZMo),e(D_,e4o),e(y,o4o),e(y,G_),e(G_,Ffe),e(Ffe,r4o),e(G_,t4o),e(G_,tD),e(tD,a4o),e(G_,n4o),e(y,s4o),e(y,O_),e(O_,Tfe),e(Tfe,l4o),e(O_,i4o),e(O_,aD),e(aD,d4o),e(O_,c4o),e(y,f4o),e(y,V_),e(V_,Mfe),e(Mfe,m4o),e(V_,g4o),e(V_,nD),e(nD,h4o),e(V_,p4o),e(y,_4o),e(y,X_),e(X_,Efe),e(Efe,u4o),e(X_,b4o),e(X_,sD),e(sD,v4o),e(X_,F4o),e(y,T4o),e(y,z_),e(z_,Cfe),e(Cfe,M4o),e(z_,E4o),e(z_,lD),e(lD,C4o),e(z_,w4o),e(y,A4o),e(y,W_),e(W_,wfe),e(wfe,L4o),e(W_,y4o),e(W_,iD),e(iD,x4o),e(W_,$4o),e(y,k4o),e(y,Q_),e(Q_,Afe),e(Afe,S4o),e(Q_,R4o),e(Q_,dD),e(dD,P4o),e(Q_,B4o),e(y,I4o),e(y,H_),e(H_,Lfe),e(Lfe,N4o),e(H_,q4o),e(H_,cD),e(cD,j4o),e(H_,D4o),e(y,G4o),e(y,U_),e(U_,yfe),e(yfe,O4o),e(U_,V4o),e(U_,fD),e(fD,X4o),e(U_,z4o),e(y,W4o),e(y,J_),e(J_,xfe),e(xfe,Q4o),e(J_,H4o),e(J_,mD),e(mD,U4o),e(J_,J4o),e(y,Y4o),e(y,Y_),e(Y_,$fe),e($fe,K4o),e(Y_,Z4o),e(Y_,gD),e(gD,eEo),e(Y_,oEo),e(y,rEo),e(y,K_),e(K_,kfe),e(kfe,tEo),e(K_,aEo),e(K_,hD),e(hD,nEo),e(K_,sEo),e(y,lEo),e(y,Z_),e(Z_,Sfe),e(Sfe,iEo),e(Z_,dEo),e(Z_,pD),e(pD,cEo),e(Z_,fEo),e(y,mEo),e(y,eu),e(eu,Rfe),e(Rfe,gEo),e(eu,hEo),e(eu,_D),e(_D,pEo),e(eu,_Eo),e(y,uEo),e(y,ou),e(ou,Pfe),e(Pfe,bEo),e(ou,vEo),e(ou,uD),e(uD,FEo),e(ou,TEo),e(y,MEo),e(y,ru),e(ru,Bfe),e(Bfe,EEo),e(ru,CEo),e(ru,bD),e(bD,wEo),e(ru,AEo),e(y,LEo),e(y,tu),e(tu,Ife),e(Ife,yEo),e(tu,xEo),e(tu,vD),e(vD,$Eo),e(tu,kEo),e(y,SEo),e(y,au),e(au,Nfe),e(Nfe,REo),e(au,PEo),e(au,FD),e(FD,BEo),e(au,IEo),e(y,NEo),e(y,nu),e(nu,qfe),e(qfe,qEo),e(nu,jEo),e(nu,TD),e(TD,DEo),e(nu,GEo),e(y,OEo),e(y,su),e(su,jfe),e(jfe,VEo),e(su,XEo),e(su,MD),e(MD,zEo),e(su,WEo),e(y,QEo),e(y,lu),e(lu,Dfe),e(Dfe,HEo),e(lu,UEo),e(lu,ED),e(ED,JEo),e(lu,YEo),e(y,KEo),e(y,iu),e(iu,Gfe),e(Gfe,ZEo),e(iu,eCo),e(iu,CD),e(CD,oCo),e(iu,rCo),e(y,tCo),e(y,du),e(du,Ofe),e(Ofe,aCo),e(du,nCo),e(du,wD),e(wD,sCo),e(du,lCo),e(y,iCo),e(y,cu),e(cu,Vfe),e(Vfe,dCo),e(cu,cCo),e(cu,AD),e(AD,fCo),e(cu,mCo),e(y,gCo),e(y,fu),e(fu,Xfe),e(Xfe,hCo),e(fu,pCo),e(fu,LD),e(LD,_Co),e(fu,uCo),e(y,bCo),e(y,mu),e(mu,zfe),e(zfe,vCo),e(mu,FCo),e(mu,yD),e(yD,TCo),e(mu,MCo),e(y,ECo),e(y,gu),e(gu,Wfe),e(Wfe,CCo),e(gu,wCo),e(gu,xD),e(xD,ACo),e(gu,LCo),e(y,yCo),e(y,hu),e(hu,Qfe),e(Qfe,xCo),e(hu,$Co),e(hu,$D),e($D,kCo),e(hu,SCo),e(y,RCo),e(y,pu),e(pu,Hfe),e(Hfe,PCo),e(pu,BCo),e(pu,kD),e(kD,ICo),e(pu,NCo),e(y,qCo),e(y,_u),e(_u,Ufe),e(Ufe,jCo),e(_u,DCo),e(_u,SD),e(SD,GCo),e(_u,OCo),e(y,VCo),e(y,uu),e(uu,Jfe),e(Jfe,XCo),e(uu,zCo),e(uu,RD),e(RD,WCo),e(uu,QCo),e(y,HCo),e(y,bu),e(bu,Yfe),e(Yfe,UCo),e(bu,JCo),e(bu,PD),e(PD,YCo),e(bu,KCo),e(y,ZCo),e(y,vu),e(vu,Kfe),e(Kfe,e5o),e(vu,o5o),e(vu,BD),e(BD,r5o),e(vu,t5o),e(y,a5o),e(y,Fu),e(Fu,Zfe),e(Zfe,n5o),e(Fu,s5o),e(Fu,ID),e(ID,l5o),e(Fu,i5o),e(y,d5o),e(y,Tu),e(Tu,eme),e(eme,c5o),e(Tu,f5o),e(Tu,ND),e(ND,m5o),e(Tu,g5o),e(y,h5o),e(y,Mu),e(Mu,ome),e(ome,p5o),e(Mu,_5o),e(Mu,qD),e(qD,u5o),e(Mu,b5o),e(y,v5o),e(y,Eu),e(Eu,rme),e(rme,F5o),e(Eu,T5o),e(Eu,jD),e(jD,M5o),e(Eu,E5o),e(y,C5o),e(y,Cu),e(Cu,tme),e(tme,w5o),e(Cu,A5o),e(Cu,DD),e(DD,L5o),e(Cu,y5o),e(y,x5o),e(y,wu),e(wu,ame),e(ame,$5o),e(wu,k5o),e(wu,GD),e(GD,S5o),e(wu,R5o),e(y,P5o),e(y,Au),e(Au,nme),e(nme,B5o),e(Au,I5o),e(Au,OD),e(OD,N5o),e(Au,q5o),e(y,j5o),e(y,Lu),e(Lu,sme),e(sme,D5o),e(Lu,G5o),e(Lu,VD),e(VD,O5o),e(Lu,V5o),e(y,X5o),e(y,yu),e(yu,lme),e(lme,z5o),e(yu,W5o),e(yu,XD),e(XD,Q5o),e(yu,H5o),e(y,U5o),e(y,xu),e(xu,ime),e(ime,J5o),e(xu,Y5o),e(xu,zD),e(zD,K5o),e(xu,Z5o),e(y,e0o),e(y,$u),e($u,dme),e(dme,o0o),e($u,r0o),e($u,WD),e(WD,t0o),e($u,a0o),e(y,n0o),e(y,ku),e(ku,cme),e(cme,s0o),e(ku,l0o),e(ku,QD),e(QD,i0o),e(ku,d0o),e(y,c0o),e(y,Su),e(Su,fme),e(fme,f0o),e(Su,m0o),e(Su,HD),e(HD,g0o),e(Su,h0o),e(y,p0o),e(y,Ru),e(Ru,mme),e(mme,_0o),e(Ru,u0o),e(Ru,UD),e(UD,b0o),e(Ru,v0o),e(y,F0o),e(y,Pu),e(Pu,gme),e(gme,T0o),e(Pu,M0o),e(Pu,JD),e(JD,E0o),e(Pu,C0o),e(y,w0o),e(y,Bu),e(Bu,hme),e(hme,A0o),e(Bu,L0o),e(Bu,YD),e(YD,y0o),e(Bu,x0o),e(y,$0o),e(y,Iu),e(Iu,pme),e(pme,k0o),e(Iu,S0o),e(Iu,KD),e(KD,R0o),e(Iu,P0o),e(y,B0o),e(y,Nu),e(Nu,_me),e(_me,I0o),e(Nu,N0o),e(Nu,ZD),e(ZD,q0o),e(Nu,j0o),e(y,D0o),e(y,qu),e(qu,ume),e(ume,G0o),e(qu,O0o),e(qu,eG),e(eG,V0o),e(qu,X0o),e(y,z0o),e(y,ju),e(ju,bme),e(bme,W0o),e(ju,Q0o),e(ju,oG),e(oG,H0o),e(ju,U0o),e(y,J0o),e(y,Du),e(Du,vme),e(vme,Y0o),e(Du,K0o),e(Du,rG),e(rG,Z0o),e(Du,ewo),e(y,owo),e(y,Gu),e(Gu,Fme),e(Fme,rwo),e(Gu,two),e(Gu,tG),e(tG,awo),e(Gu,nwo),e(y,swo),e(y,Ou),e(Ou,Tme),e(Tme,lwo),e(Ou,iwo),e(Ou,aG),e(aG,dwo),e(Ou,cwo),e(y,fwo),e(y,Vu),e(Vu,Mme),e(Mme,mwo),e(Vu,gwo),e(Vu,nG),e(nG,hwo),e(Vu,pwo),e(y,_wo),e(y,Xu),e(Xu,Eme),e(Eme,uwo),e(Xu,bwo),e(Xu,sG),e(sG,vwo),e(Xu,Fwo),e(y,Two),e(y,zu),e(zu,Cme),e(Cme,Mwo),e(zu,Ewo),e(zu,lG),e(lG,Cwo),e(zu,wwo),e(y,Awo),e(y,Wu),e(Wu,wme),e(wme,Lwo),e(Wu,ywo),e(Wu,iG),e(iG,xwo),e(Wu,$wo),e(y,kwo),e(y,Qu),e(Qu,Ame),e(Ame,Swo),e(Qu,Rwo),e(Qu,dG),e(dG,Pwo),e(Qu,Bwo),e(y,Iwo),e(y,Hu),e(Hu,Lme),e(Lme,Nwo),e(Hu,qwo),e(Hu,cG),e(cG,jwo),e(Hu,Dwo),e(y,Gwo),e(y,Uu),e(Uu,yme),e(yme,Owo),e(Uu,Vwo),e(Uu,fG),e(fG,Xwo),e(Uu,zwo),e(Ye,Wwo),e(Ye,Ju),e(Ju,Qwo),e(Ju,xme),e(xme,Hwo),e(Ju,Uwo),e(Ju,$me),e($me,Jwo),e(Ye,Ywo),M(Yu,Ye,null),b(f,RXe,u),b(f,zi,u),e(zi,Ku),e(Ku,kme),M(D6,kme,null),e(zi,Kwo),e(zi,Sme),e(Sme,Zwo),b(f,PXe,u),b(f,ko,u),M(G6,ko,null),e(ko,eAo),e(ko,Wi),e(Wi,oAo),e(Wi,mG),e(mG,rAo),e(Wi,tAo),e(Wi,gG),e(gG,aAo),e(Wi,nAo),e(ko,sAo),e(ko,O6),e(O6,lAo),e(O6,Rme),e(Rme,iAo),e(O6,dAo),e(ko,cAo),e(ko,dt),M(V6,dt,null),e(dt,fAo),e(dt,Pme),e(Pme,mAo),e(dt,gAo),e(dt,Qi),e(Qi,hAo),e(Qi,Bme),e(Bme,pAo),e(Qi,_Ao),e(Qi,hG),e(hG,uAo),e(Qi,bAo),e(dt,vAo),M(Zu,dt,null),e(ko,FAo),e(ko,Ke),M(X6,Ke,null),e(Ke,TAo),e(Ke,Ime),e(Ime,MAo),e(Ke,EAo),e(Ke,Na),e(Na,CAo),e(Na,Nme),e(Nme,wAo),e(Na,AAo),e(Na,qme),e(qme,LAo),e(Na,yAo),e(Na,jme),e(jme,xAo),e(Na,$Ao),e(Ke,kAo),e(Ke,G),e(G,e1),e(e1,Dme),e(Dme,SAo),e(e1,RAo),e(e1,pG),e(pG,PAo),e(e1,BAo),e(G,IAo),e(G,o1),e(o1,Gme),e(Gme,NAo),e(o1,qAo),e(o1,_G),e(_G,jAo),e(o1,DAo),e(G,GAo),e(G,r1),e(r1,Ome),e(Ome,OAo),e(r1,VAo),e(r1,uG),e(uG,XAo),e(r1,zAo),e(G,WAo),e(G,t1),e(t1,Vme),e(Vme,QAo),e(t1,HAo),e(t1,bG),e(bG,UAo),e(t1,JAo),e(G,YAo),e(G,a1),e(a1,Xme),e(Xme,KAo),e(a1,ZAo),e(a1,vG),e(vG,e6o),e(a1,o6o),e(G,r6o),e(G,n1),e(n1,zme),e(zme,t6o),e(n1,a6o),e(n1,FG),e(FG,n6o),e(n1,s6o),e(G,l6o),e(G,s1),e(s1,Wme),e(Wme,i6o),e(s1,d6o),e(s1,TG),e(TG,c6o),e(s1,f6o),e(G,m6o),e(G,l1),e(l1,Qme),e(Qme,g6o),e(l1,h6o),e(l1,MG),e(MG,p6o),e(l1,_6o),e(G,u6o),e(G,i1),e(i1,Hme),e(Hme,b6o),e(i1,v6o),e(i1,EG),e(EG,F6o),e(i1,T6o),e(G,M6o),e(G,d1),e(d1,Ume),e(Ume,E6o),e(d1,C6o),e(d1,CG),e(CG,w6o),e(d1,A6o),e(G,L6o),e(G,c1),e(c1,Jme),e(Jme,y6o),e(c1,x6o),e(c1,wG),e(wG,$6o),e(c1,k6o),e(G,S6o),e(G,f1),e(f1,Yme),e(Yme,R6o),e(f1,P6o),e(f1,AG),e(AG,B6o),e(f1,I6o),e(G,N6o),e(G,m1),e(m1,Kme),e(Kme,q6o),e(m1,j6o),e(m1,LG),e(LG,D6o),e(m1,G6o),e(G,O6o),e(G,g1),e(g1,Zme),e(Zme,V6o),e(g1,X6o),e(g1,yG),e(yG,z6o),e(g1,W6o),e(G,Q6o),e(G,h1),e(h1,ege),e(ege,H6o),e(h1,U6o),e(h1,xG),e(xG,J6o),e(h1,Y6o),e(G,K6o),e(G,p1),e(p1,oge),e(oge,Z6o),e(p1,eLo),e(p1,$G),e($G,oLo),e(p1,rLo),e(G,tLo),e(G,_1),e(_1,rge),e(rge,aLo),e(_1,nLo),e(_1,kG),e(kG,sLo),e(_1,lLo),e(G,iLo),e(G,u1),e(u1,tge),e(tge,dLo),e(u1,cLo),e(u1,SG),e(SG,fLo),e(u1,mLo),e(G,gLo),e(G,b1),e(b1,age),e(age,hLo),e(b1,pLo),e(b1,RG),e(RG,_Lo),e(b1,uLo),e(G,bLo),e(G,v1),e(v1,nge),e(nge,vLo),e(v1,FLo),e(v1,PG),e(PG,TLo),e(v1,MLo),e(G,ELo),e(G,F1),e(F1,sge),e(sge,CLo),e(F1,wLo),e(F1,BG),e(BG,ALo),e(F1,LLo),e(G,yLo),e(G,T1),e(T1,lge),e(lge,xLo),e(T1,$Lo),e(T1,IG),e(IG,kLo),e(T1,SLo),e(G,RLo),e(G,M1),e(M1,ige),e(ige,PLo),e(M1,BLo),e(M1,NG),e(NG,ILo),e(M1,NLo),e(G,qLo),e(G,E1),e(E1,dge),e(dge,jLo),e(E1,DLo),e(E1,qG),e(qG,GLo),e(E1,OLo),e(G,VLo),e(G,C1),e(C1,cge),e(cge,XLo),e(C1,zLo),e(C1,jG),e(jG,WLo),e(C1,QLo),e(G,HLo),e(G,w1),e(w1,fge),e(fge,ULo),e(w1,JLo),e(w1,DG),e(DG,YLo),e(w1,KLo),e(G,ZLo),e(G,A1),e(A1,mge),e(mge,eyo),e(A1,oyo),e(A1,GG),e(GG,ryo),e(A1,tyo),e(G,ayo),e(G,L1),e(L1,gge),e(gge,nyo),e(L1,syo),e(L1,OG),e(OG,lyo),e(L1,iyo),e(G,dyo),e(G,y1),e(y1,hge),e(hge,cyo),e(y1,fyo),e(y1,VG),e(VG,myo),e(y1,gyo),e(G,hyo),e(G,x1),e(x1,pge),e(pge,pyo),e(x1,_yo),e(x1,XG),e(XG,uyo),e(x1,byo),e(G,vyo),e(G,$1),e($1,_ge),e(_ge,Fyo),e($1,Tyo),e($1,zG),e(zG,Myo),e($1,Eyo),e(G,Cyo),e(G,k1),e(k1,uge),e(uge,wyo),e(k1,Ayo),e(k1,WG),e(WG,Lyo),e(k1,yyo),e(G,xyo),e(G,S1),e(S1,bge),e(bge,$yo),e(S1,kyo),e(S1,QG),e(QG,Syo),e(S1,Ryo),e(G,Pyo),e(G,R1),e(R1,vge),e(vge,Byo),e(R1,Iyo),e(R1,HG),e(HG,Nyo),e(R1,qyo),e(G,jyo),e(G,P1),e(P1,Fge),e(Fge,Dyo),e(P1,Gyo),e(P1,UG),e(UG,Oyo),e(P1,Vyo),e(G,Xyo),e(G,B1),e(B1,Tge),e(Tge,zyo),e(B1,Wyo),e(B1,JG),e(JG,Qyo),e(B1,Hyo),e(G,Uyo),e(G,I1),e(I1,Mge),e(Mge,Jyo),e(I1,Yyo),e(I1,YG),e(YG,Kyo),e(I1,Zyo),e(G,exo),e(G,N1),e(N1,Ege),e(Ege,oxo),e(N1,rxo),e(N1,KG),e(KG,txo),e(N1,axo),e(G,nxo),e(G,q1),e(q1,Cge),e(Cge,sxo),e(q1,lxo),e(q1,ZG),e(ZG,ixo),e(q1,dxo),e(G,cxo),e(G,j1),e(j1,wge),e(wge,fxo),e(j1,mxo),e(j1,eO),e(eO,gxo),e(j1,hxo),e(G,pxo),e(G,D1),e(D1,Age),e(Age,_xo),e(D1,uxo),e(D1,oO),e(oO,bxo),e(D1,vxo),e(G,Fxo),e(G,G1),e(G1,Lge),e(Lge,Txo),e(G1,Mxo),e(G1,rO),e(rO,Exo),e(G1,Cxo),e(G,wxo),e(G,O1),e(O1,yge),e(yge,Axo),e(O1,Lxo),e(O1,tO),e(tO,yxo),e(O1,xxo),e(G,$xo),e(G,V1),e(V1,xge),e(xge,kxo),e(V1,Sxo),e(V1,aO),e(aO,Rxo),e(V1,Pxo),e(G,Bxo),e(G,X1),e(X1,$ge),e($ge,Ixo),e(X1,Nxo),e(X1,nO),e(nO,qxo),e(X1,jxo),e(Ke,Dxo),e(Ke,z1),e(z1,Gxo),e(z1,kge),e(kge,Oxo),e(z1,Vxo),e(z1,Sge),e(Sge,Xxo),e(Ke,zxo),M(W1,Ke,null),b(f,BXe,u),b(f,Hi,u),e(Hi,Q1),e(Q1,Rge),M(z6,Rge,null),e(Hi,Wxo),e(Hi,Pge),e(Pge,Qxo),b(f,IXe,u),b(f,So,u),M(W6,So,null),e(So,Hxo),e(So,Ui),e(Ui,Uxo),e(Ui,sO),e(sO,Jxo),e(Ui,Yxo),e(Ui,lO),e(lO,Kxo),e(Ui,Zxo),e(So,e$o),e(So,Q6),e(Q6,o$o),e(Q6,Bge),e(Bge,r$o),e(Q6,t$o),e(So,a$o),e(So,ct),M(H6,ct,null),e(ct,n$o),e(ct,Ige),e(Ige,s$o),e(ct,l$o),e(ct,Ji),e(Ji,i$o),e(Ji,Nge),e(Nge,d$o),e(Ji,c$o),e(Ji,iO),e(iO,f$o),e(Ji,m$o),e(ct,g$o),M(H1,ct,null),e(So,h$o),e(So,Ze),M(U6,Ze,null),e(Ze,p$o),e(Ze,qge),e(qge,_$o),e(Ze,u$o),e(Ze,qa),e(qa,b$o),e(qa,jge),e(jge,v$o),e(qa,F$o),e(qa,Dge),e(Dge,T$o),e(qa,M$o),e(qa,Gge),e(Gge,E$o),e(qa,C$o),e(Ze,w$o),e(Ze,z),e(z,U1),e(U1,Oge),e(Oge,A$o),e(U1,L$o),e(U1,dO),e(dO,y$o),e(U1,x$o),e(z,$$o),e(z,J1),e(J1,Vge),e(Vge,k$o),e(J1,S$o),e(J1,cO),e(cO,R$o),e(J1,P$o),e(z,B$o),e(z,Y1),e(Y1,Xge),e(Xge,I$o),e(Y1,N$o),e(Y1,fO),e(fO,q$o),e(Y1,j$o),e(z,D$o),e(z,K1),e(K1,zge),e(zge,G$o),e(K1,O$o),e(K1,mO),e(mO,V$o),e(K1,X$o),e(z,z$o),e(z,Z1),e(Z1,Wge),e(Wge,W$o),e(Z1,Q$o),e(Z1,gO),e(gO,H$o),e(Z1,U$o),e(z,J$o),e(z,e2),e(e2,Qge),e(Qge,Y$o),e(e2,K$o),e(e2,hO),e(hO,Z$o),e(e2,eko),e(z,oko),e(z,o2),e(o2,Hge),e(Hge,rko),e(o2,tko),e(o2,pO),e(pO,ako),e(o2,nko),e(z,sko),e(z,r2),e(r2,Uge),e(Uge,lko),e(r2,iko),e(r2,_O),e(_O,dko),e(r2,cko),e(z,fko),e(z,t2),e(t2,Jge),e(Jge,mko),e(t2,gko),e(t2,uO),e(uO,hko),e(t2,pko),e(z,_ko),e(z,a2),e(a2,Yge),e(Yge,uko),e(a2,bko),e(a2,bO),e(bO,vko),e(a2,Fko),e(z,Tko),e(z,n2),e(n2,Kge),e(Kge,Mko),e(n2,Eko),e(n2,vO),e(vO,Cko),e(n2,wko),e(z,Ako),e(z,s2),e(s2,Zge),e(Zge,Lko),e(s2,yko),e(s2,FO),e(FO,xko),e(s2,$ko),e(z,kko),e(z,l2),e(l2,ehe),e(ehe,Sko),e(l2,Rko),e(l2,TO),e(TO,Pko),e(l2,Bko),e(z,Iko),e(z,i2),e(i2,ohe),e(ohe,Nko),e(i2,qko),e(i2,MO),e(MO,jko),e(i2,Dko),e(z,Gko),e(z,d2),e(d2,rhe),e(rhe,Oko),e(d2,Vko),e(d2,EO),e(EO,Xko),e(d2,zko),e(z,Wko),e(z,c2),e(c2,the),e(the,Qko),e(c2,Hko),e(c2,CO),e(CO,Uko),e(c2,Jko),e(z,Yko),e(z,f2),e(f2,ahe),e(ahe,Kko),e(f2,Zko),e(f2,wO),e(wO,eSo),e(f2,oSo),e(z,rSo),e(z,m2),e(m2,nhe),e(nhe,tSo),e(m2,aSo),e(m2,AO),e(AO,nSo),e(m2,sSo),e(z,lSo),e(z,g2),e(g2,she),e(she,iSo),e(g2,dSo),e(g2,LO),e(LO,cSo),e(g2,fSo),e(z,mSo),e(z,h2),e(h2,lhe),e(lhe,gSo),e(h2,hSo),e(h2,yO),e(yO,pSo),e(h2,_So),e(z,uSo),e(z,p2),e(p2,ihe),e(ihe,bSo),e(p2,vSo),e(p2,xO),e(xO,FSo),e(p2,TSo),e(z,MSo),e(z,_2),e(_2,dhe),e(dhe,ESo),e(_2,CSo),e(_2,$O),e($O,wSo),e(_2,ASo),e(z,LSo),e(z,u2),e(u2,che),e(che,ySo),e(u2,xSo),e(u2,kO),e(kO,$So),e(u2,kSo),e(z,SSo),e(z,b2),e(b2,fhe),e(fhe,RSo),e(b2,PSo),e(b2,SO),e(SO,BSo),e(b2,ISo),e(z,NSo),e(z,v2),e(v2,mhe),e(mhe,qSo),e(v2,jSo),e(v2,RO),e(RO,DSo),e(v2,GSo),e(z,OSo),e(z,F2),e(F2,ghe),e(ghe,VSo),e(F2,XSo),e(F2,PO),e(PO,zSo),e(F2,WSo),e(z,QSo),e(z,T2),e(T2,hhe),e(hhe,HSo),e(T2,USo),e(T2,BO),e(BO,JSo),e(T2,YSo),e(z,KSo),e(z,M2),e(M2,phe),e(phe,ZSo),e(M2,eRo),e(M2,IO),e(IO,oRo),e(M2,rRo),e(z,tRo),e(z,E2),e(E2,_he),e(_he,aRo),e(E2,nRo),e(E2,NO),e(NO,sRo),e(E2,lRo),e(z,iRo),e(z,C2),e(C2,uhe),e(uhe,dRo),e(C2,cRo),e(C2,qO),e(qO,fRo),e(C2,mRo),e(z,gRo),e(z,w2),e(w2,bhe),e(bhe,hRo),e(w2,pRo),e(w2,jO),e(jO,_Ro),e(w2,uRo),e(z,bRo),e(z,A2),e(A2,vhe),e(vhe,vRo),e(A2,FRo),e(A2,DO),e(DO,TRo),e(A2,MRo),e(z,ERo),e(z,L2),e(L2,Fhe),e(Fhe,CRo),e(L2,wRo),e(L2,GO),e(GO,ARo),e(L2,LRo),e(z,yRo),e(z,y2),e(y2,The),e(The,xRo),e(y2,$Ro),e(y2,OO),e(OO,kRo),e(y2,SRo),e(z,RRo),e(z,x2),e(x2,Mhe),e(Mhe,PRo),e(x2,BRo),e(x2,VO),e(VO,IRo),e(x2,NRo),e(z,qRo),e(z,$2),e($2,Ehe),e(Ehe,jRo),e($2,DRo),e($2,XO),e(XO,GRo),e($2,ORo),e(z,VRo),e(z,k2),e(k2,Che),e(Che,XRo),e(k2,zRo),e(k2,zO),e(zO,WRo),e(k2,QRo),e(z,HRo),e(z,S2),e(S2,whe),e(whe,URo),e(S2,JRo),e(S2,WO),e(WO,YRo),e(S2,KRo),e(z,ZRo),e(z,R2),e(R2,Ahe),e(Ahe,ePo),e(R2,oPo),e(R2,QO),e(QO,rPo),e(R2,tPo),e(z,aPo),e(z,P2),e(P2,Lhe),e(Lhe,nPo),e(P2,sPo),e(P2,HO),e(HO,lPo),e(P2,iPo),e(Ze,dPo),e(Ze,B2),e(B2,cPo),e(B2,yhe),e(yhe,fPo),e(B2,mPo),e(B2,xhe),e(xhe,gPo),e(Ze,hPo),M(I2,Ze,null),b(f,NXe,u),b(f,Yi,u),e(Yi,N2),e(N2,$he),M(J6,$he,null),e(Yi,pPo),e(Yi,khe),e(khe,_Po),b(f,qXe,u),b(f,Ro,u),M(Y6,Ro,null),e(Ro,uPo),e(Ro,Ki),e(Ki,bPo),e(Ki,UO),e(UO,vPo),e(Ki,FPo),e(Ki,JO),e(JO,TPo),e(Ki,MPo),e(Ro,EPo),e(Ro,K6),e(K6,CPo),e(K6,She),e(She,wPo),e(K6,APo),e(Ro,LPo),e(Ro,ft),M(Z6,ft,null),e(ft,yPo),e(ft,Rhe),e(Rhe,xPo),e(ft,$Po),e(ft,Zi),e(Zi,kPo),e(Zi,Phe),e(Phe,SPo),e(Zi,RPo),e(Zi,YO),e(YO,PPo),e(Zi,BPo),e(ft,IPo),M(q2,ft,null),e(Ro,NPo),e(Ro,eo),M(eL,eo,null),e(eo,qPo),e(eo,Bhe),e(Bhe,jPo),e(eo,DPo),e(eo,ja),e(ja,GPo),e(ja,Ihe),e(Ihe,OPo),e(ja,VPo),e(ja,Nhe),e(Nhe,XPo),e(ja,zPo),e(ja,qhe),e(qhe,WPo),e(ja,QPo),e(eo,HPo),e(eo,Q),e(Q,j2),e(j2,jhe),e(jhe,UPo),e(j2,JPo),e(j2,KO),e(KO,YPo),e(j2,KPo),e(Q,ZPo),e(Q,D2),e(D2,Dhe),e(Dhe,eBo),e(D2,oBo),e(D2,ZO),e(ZO,rBo),e(D2,tBo),e(Q,aBo),e(Q,G2),e(G2,Ghe),e(Ghe,nBo),e(G2,sBo),e(G2,eV),e(eV,lBo),e(G2,iBo),e(Q,dBo),e(Q,O2),e(O2,Ohe),e(Ohe,cBo),e(O2,fBo),e(O2,oV),e(oV,mBo),e(O2,gBo),e(Q,hBo),e(Q,V2),e(V2,Vhe),e(Vhe,pBo),e(V2,_Bo),e(V2,rV),e(rV,uBo),e(V2,bBo),e(Q,vBo),e(Q,X2),e(X2,Xhe),e(Xhe,FBo),e(X2,TBo),e(X2,tV),e(tV,MBo),e(X2,EBo),e(Q,CBo),e(Q,z2),e(z2,zhe),e(zhe,wBo),e(z2,ABo),e(z2,aV),e(aV,LBo),e(z2,yBo),e(Q,xBo),e(Q,W2),e(W2,Whe),e(Whe,$Bo),e(W2,kBo),e(W2,nV),e(nV,SBo),e(W2,RBo),e(Q,PBo),e(Q,Q2),e(Q2,Qhe),e(Qhe,BBo),e(Q2,IBo),e(Q2,sV),e(sV,NBo),e(Q2,qBo),e(Q,jBo),e(Q,H2),e(H2,Hhe),e(Hhe,DBo),e(H2,GBo),e(H2,lV),e(lV,OBo),e(H2,VBo),e(Q,XBo),e(Q,U2),e(U2,Uhe),e(Uhe,zBo),e(U2,WBo),e(U2,iV),e(iV,QBo),e(U2,HBo),e(Q,UBo),e(Q,J2),e(J2,Jhe),e(Jhe,JBo),e(J2,YBo),e(J2,dV),e(dV,KBo),e(J2,ZBo),e(Q,eIo),e(Q,Y2),e(Y2,Yhe),e(Yhe,oIo),e(Y2,rIo),e(Y2,cV),e(cV,tIo),e(Y2,aIo),e(Q,nIo),e(Q,K2),e(K2,Khe),e(Khe,sIo),e(K2,lIo),e(K2,fV),e(fV,iIo),e(K2,dIo),e(Q,cIo),e(Q,Z2),e(Z2,Zhe),e(Zhe,fIo),e(Z2,mIo),e(Z2,mV),e(mV,gIo),e(Z2,hIo),e(Q,pIo),e(Q,eb),e(eb,epe),e(epe,_Io),e(eb,uIo),e(eb,gV),e(gV,bIo),e(eb,vIo),e(Q,FIo),e(Q,ob),e(ob,ope),e(ope,TIo),e(ob,MIo),e(ob,hV),e(hV,EIo),e(ob,CIo),e(Q,wIo),e(Q,rb),e(rb,rpe),e(rpe,AIo),e(rb,LIo),e(rb,pV),e(pV,yIo),e(rb,xIo),e(Q,$Io),e(Q,tb),e(tb,tpe),e(tpe,kIo),e(tb,SIo),e(tb,_V),e(_V,RIo),e(tb,PIo),e(Q,BIo),e(Q,ab),e(ab,ape),e(ape,IIo),e(ab,NIo),e(ab,uV),e(uV,qIo),e(ab,jIo),e(Q,DIo),e(Q,nb),e(nb,npe),e(npe,GIo),e(nb,OIo),e(nb,bV),e(bV,VIo),e(nb,XIo),e(Q,zIo),e(Q,sb),e(sb,spe),e(spe,WIo),e(sb,QIo),e(sb,vV),e(vV,HIo),e(sb,UIo),e(Q,JIo),e(Q,lb),e(lb,lpe),e(lpe,YIo),e(lb,KIo),e(lb,FV),e(FV,ZIo),e(lb,eNo),e(Q,oNo),e(Q,ib),e(ib,ipe),e(ipe,rNo),e(ib,tNo),e(ib,TV),e(TV,aNo),e(ib,nNo),e(Q,sNo),e(Q,db),e(db,dpe),e(dpe,lNo),e(db,iNo),e(db,MV),e(MV,dNo),e(db,cNo),e(Q,fNo),e(Q,cb),e(cb,cpe),e(cpe,mNo),e(cb,gNo),e(cb,EV),e(EV,hNo),e(cb,pNo),e(Q,_No),e(Q,fb),e(fb,fpe),e(fpe,uNo),e(fb,bNo),e(fb,CV),e(CV,vNo),e(fb,FNo),e(Q,TNo),e(Q,mb),e(mb,mpe),e(mpe,MNo),e(mb,ENo),e(mb,wV),e(wV,CNo),e(mb,wNo),e(Q,ANo),e(Q,gb),e(gb,gpe),e(gpe,LNo),e(gb,yNo),e(gb,AV),e(AV,xNo),e(gb,$No),e(Q,kNo),e(Q,hb),e(hb,hpe),e(hpe,SNo),e(hb,RNo),e(hb,LV),e(LV,PNo),e(hb,BNo),e(Q,INo),e(Q,pb),e(pb,ppe),e(ppe,NNo),e(pb,qNo),e(pb,yV),e(yV,jNo),e(pb,DNo),e(Q,GNo),e(Q,_b),e(_b,_pe),e(_pe,ONo),e(_b,VNo),e(_b,xV),e(xV,XNo),e(_b,zNo),e(Q,WNo),e(Q,ub),e(ub,upe),e(upe,QNo),e(ub,HNo),e(ub,$V),e($V,UNo),e(ub,JNo),e(Q,YNo),e(Q,bb),e(bb,bpe),e(bpe,KNo),e(bb,ZNo),e(bb,vpe),e(vpe,eqo),e(bb,oqo),e(Q,rqo),e(Q,vb),e(vb,Fpe),e(Fpe,tqo),e(vb,aqo),e(vb,kV),e(kV,nqo),e(vb,sqo),e(Q,lqo),e(Q,Fb),e(Fb,Tpe),e(Tpe,iqo),e(Fb,dqo),e(Fb,SV),e(SV,cqo),e(Fb,fqo),e(Q,mqo),e(Q,Tb),e(Tb,Mpe),e(Mpe,gqo),e(Tb,hqo),e(Tb,RV),e(RV,pqo),e(Tb,_qo),e(Q,uqo),e(Q,Mb),e(Mb,Epe),e(Epe,bqo),e(Mb,vqo),e(Mb,PV),e(PV,Fqo),e(Mb,Tqo),e(eo,Mqo),e(eo,Eb),e(Eb,Eqo),e(Eb,Cpe),e(Cpe,Cqo),e(Eb,wqo),e(Eb,wpe),e(wpe,Aqo),e(eo,Lqo),M(Cb,eo,null),b(f,jXe,u),b(f,ed,u),e(ed,wb),e(wb,Ape),M(oL,Ape,null),e(ed,yqo),e(ed,Lpe),e(Lpe,xqo),b(f,DXe,u),b(f,Po,u),M(rL,Po,null),e(Po,$qo),e(Po,od),e(od,kqo),e(od,BV),e(BV,Sqo),e(od,Rqo),e(od,IV),e(IV,Pqo),e(od,Bqo),e(Po,Iqo),e(Po,tL),e(tL,Nqo),e(tL,ype),e(ype,qqo),e(tL,jqo),e(Po,Dqo),e(Po,mt),M(aL,mt,null),e(mt,Gqo),e(mt,xpe),e(xpe,Oqo),e(mt,Vqo),e(mt,rd),e(rd,Xqo),e(rd,$pe),e($pe,zqo),e(rd,Wqo),e(rd,NV),e(NV,Qqo),e(rd,Hqo),e(mt,Uqo),M(Ab,mt,null),e(Po,Jqo),e(Po,oo),M(nL,oo,null),e(oo,Yqo),e(oo,kpe),e(kpe,Kqo),e(oo,Zqo),e(oo,Da),e(Da,ejo),e(Da,Spe),e(Spe,ojo),e(Da,rjo),e(Da,Rpe),e(Rpe,tjo),e(Da,ajo),e(Da,Ppe),e(Ppe,njo),e(Da,sjo),e(oo,ljo),e(oo,pe),e(pe,Lb),e(Lb,Bpe),e(Bpe,ijo),e(Lb,djo),e(Lb,qV),e(qV,cjo),e(Lb,fjo),e(pe,mjo),e(pe,yb),e(yb,Ipe),e(Ipe,gjo),e(yb,hjo),e(yb,jV),e(jV,pjo),e(yb,_jo),e(pe,ujo),e(pe,xb),e(xb,Npe),e(Npe,bjo),e(xb,vjo),e(xb,DV),e(DV,Fjo),e(xb,Tjo),e(pe,Mjo),e(pe,$b),e($b,qpe),e(qpe,Ejo),e($b,Cjo),e($b,GV),e(GV,wjo),e($b,Ajo),e(pe,Ljo),e(pe,kb),e(kb,jpe),e(jpe,yjo),e(kb,xjo),e(kb,OV),e(OV,$jo),e(kb,kjo),e(pe,Sjo),e(pe,Sb),e(Sb,Dpe),e(Dpe,Rjo),e(Sb,Pjo),e(Sb,VV),e(VV,Bjo),e(Sb,Ijo),e(pe,Njo),e(pe,Rb),e(Rb,Gpe),e(Gpe,qjo),e(Rb,jjo),e(Rb,XV),e(XV,Djo),e(Rb,Gjo),e(pe,Ojo),e(pe,Pb),e(Pb,Ope),e(Ope,Vjo),e(Pb,Xjo),e(Pb,zV),e(zV,zjo),e(Pb,Wjo),e(pe,Qjo),e(pe,Bb),e(Bb,Vpe),e(Vpe,Hjo),e(Bb,Ujo),e(Bb,WV),e(WV,Jjo),e(Bb,Yjo),e(pe,Kjo),e(pe,Ib),e(Ib,Xpe),e(Xpe,Zjo),e(Ib,eDo),e(Ib,QV),e(QV,oDo),e(Ib,rDo),e(pe,tDo),e(pe,Nb),e(Nb,zpe),e(zpe,aDo),e(Nb,nDo),e(Nb,HV),e(HV,sDo),e(Nb,lDo),e(pe,iDo),e(pe,qb),e(qb,Wpe),e(Wpe,dDo),e(qb,cDo),e(qb,UV),e(UV,fDo),e(qb,mDo),e(pe,gDo),e(pe,jb),e(jb,Qpe),e(Qpe,hDo),e(jb,pDo),e(jb,JV),e(JV,_Do),e(jb,uDo),e(pe,bDo),e(pe,Db),e(Db,Hpe),e(Hpe,vDo),e(Db,FDo),e(Db,YV),e(YV,TDo),e(Db,MDo),e(pe,EDo),e(pe,Gb),e(Gb,Upe),e(Upe,CDo),e(Gb,wDo),e(Gb,KV),e(KV,ADo),e(Gb,LDo),e(pe,yDo),e(pe,Ob),e(Ob,Jpe),e(Jpe,xDo),e(Ob,$Do),e(Ob,ZV),e(ZV,kDo),e(Ob,SDo),e(pe,RDo),e(pe,Vb),e(Vb,Ype),e(Ype,PDo),e(Vb,BDo),e(Vb,eX),e(eX,IDo),e(Vb,NDo),e(pe,qDo),e(pe,Xb),e(Xb,Kpe),e(Kpe,jDo),e(Xb,DDo),e(Xb,oX),e(oX,GDo),e(Xb,ODo),e(oo,VDo),e(oo,zb),e(zb,XDo),e(zb,Zpe),e(Zpe,zDo),e(zb,WDo),e(zb,e_e),e(e_e,QDo),e(oo,HDo),M(Wb,oo,null),b(f,GXe,u),b(f,td,u),e(td,Qb),e(Qb,o_e),M(sL,o_e,null),e(td,UDo),e(td,r_e),e(r_e,JDo),b(f,OXe,u),b(f,Bo,u),M(lL,Bo,null),e(Bo,YDo),e(Bo,ad),e(ad,KDo),e(ad,rX),e(rX,ZDo),e(ad,eGo),e(ad,tX),e(tX,oGo),e(ad,rGo),e(Bo,tGo),e(Bo,iL),e(iL,aGo),e(iL,t_e),e(t_e,nGo),e(iL,sGo),e(Bo,lGo),e(Bo,gt),M(dL,gt,null),e(gt,iGo),e(gt,a_e),e(a_e,dGo),e(gt,cGo),e(gt,nd),e(nd,fGo),e(nd,n_e),e(n_e,mGo),e(nd,gGo),e(nd,aX),e(aX,hGo),e(nd,pGo),e(gt,_Go),M(Hb,gt,null),e(Bo,uGo),e(Bo,ro),M(cL,ro,null),e(ro,bGo),e(ro,s_e),e(s_e,vGo),e(ro,FGo),e(ro,Ga),e(Ga,TGo),e(Ga,l_e),e(l_e,MGo),e(Ga,EGo),e(Ga,i_e),e(i_e,CGo),e(Ga,wGo),e(Ga,d_e),e(d_e,AGo),e(Ga,LGo),e(ro,yGo),e(ro,N),e(N,Ub),e(Ub,c_e),e(c_e,xGo),e(Ub,$Go),e(Ub,nX),e(nX,kGo),e(Ub,SGo),e(N,RGo),e(N,Jb),e(Jb,f_e),e(f_e,PGo),e(Jb,BGo),e(Jb,sX),e(sX,IGo),e(Jb,NGo),e(N,qGo),e(N,Yb),e(Yb,m_e),e(m_e,jGo),e(Yb,DGo),e(Yb,lX),e(lX,GGo),e(Yb,OGo),e(N,VGo),e(N,Kb),e(Kb,g_e),e(g_e,XGo),e(Kb,zGo),e(Kb,iX),e(iX,WGo),e(Kb,QGo),e(N,HGo),e(N,Zb),e(Zb,h_e),e(h_e,UGo),e(Zb,JGo),e(Zb,dX),e(dX,YGo),e(Zb,KGo),e(N,ZGo),e(N,ev),e(ev,p_e),e(p_e,eOo),e(ev,oOo),e(ev,cX),e(cX,rOo),e(ev,tOo),e(N,aOo),e(N,ov),e(ov,__e),e(__e,nOo),e(ov,sOo),e(ov,fX),e(fX,lOo),e(ov,iOo),e(N,dOo),e(N,rv),e(rv,u_e),e(u_e,cOo),e(rv,fOo),e(rv,mX),e(mX,mOo),e(rv,gOo),e(N,hOo),e(N,tv),e(tv,b_e),e(b_e,pOo),e(tv,_Oo),e(tv,gX),e(gX,uOo),e(tv,bOo),e(N,vOo),e(N,av),e(av,v_e),e(v_e,FOo),e(av,TOo),e(av,hX),e(hX,MOo),e(av,EOo),e(N,COo),e(N,nv),e(nv,F_e),e(F_e,wOo),e(nv,AOo),e(nv,pX),e(pX,LOo),e(nv,yOo),e(N,xOo),e(N,sv),e(sv,T_e),e(T_e,$Oo),e(sv,kOo),e(sv,_X),e(_X,SOo),e(sv,ROo),e(N,POo),e(N,lv),e(lv,M_e),e(M_e,BOo),e(lv,IOo),e(lv,uX),e(uX,NOo),e(lv,qOo),e(N,jOo),e(N,iv),e(iv,E_e),e(E_e,DOo),e(iv,GOo),e(iv,bX),e(bX,OOo),e(iv,VOo),e(N,XOo),e(N,dv),e(dv,C_e),e(C_e,zOo),e(dv,WOo),e(dv,vX),e(vX,QOo),e(dv,HOo),e(N,UOo),e(N,cv),e(cv,w_e),e(w_e,JOo),e(cv,YOo),e(cv,FX),e(FX,KOo),e(cv,ZOo),e(N,eVo),e(N,fv),e(fv,A_e),e(A_e,oVo),e(fv,rVo),e(fv,TX),e(TX,tVo),e(fv,aVo),e(N,nVo),e(N,mv),e(mv,L_e),e(L_e,sVo),e(mv,lVo),e(mv,MX),e(MX,iVo),e(mv,dVo),e(N,cVo),e(N,gv),e(gv,y_e),e(y_e,fVo),e(gv,mVo),e(gv,EX),e(EX,gVo),e(gv,hVo),e(N,pVo),e(N,hv),e(hv,x_e),e(x_e,_Vo),e(hv,uVo),e(hv,CX),e(CX,bVo),e(hv,vVo),e(N,FVo),e(N,pv),e(pv,$_e),e($_e,TVo),e(pv,MVo),e(pv,wX),e(wX,EVo),e(pv,CVo),e(N,wVo),e(N,_v),e(_v,k_e),e(k_e,AVo),e(_v,LVo),e(_v,AX),e(AX,yVo),e(_v,xVo),e(N,$Vo),e(N,uv),e(uv,S_e),e(S_e,kVo),e(uv,SVo),e(uv,LX),e(LX,RVo),e(uv,PVo),e(N,BVo),e(N,bv),e(bv,R_e),e(R_e,IVo),e(bv,NVo),e(bv,yX),e(yX,qVo),e(bv,jVo),e(N,DVo),e(N,vv),e(vv,P_e),e(P_e,GVo),e(vv,OVo),e(vv,xX),e(xX,VVo),e(vv,XVo),e(N,zVo),e(N,Fv),e(Fv,B_e),e(B_e,WVo),e(Fv,QVo),e(Fv,$X),e($X,HVo),e(Fv,UVo),e(N,JVo),e(N,Tv),e(Tv,I_e),e(I_e,YVo),e(Tv,KVo),e(Tv,kX),e(kX,ZVo),e(Tv,eXo),e(N,oXo),e(N,Mv),e(Mv,N_e),e(N_e,rXo),e(Mv,tXo),e(Mv,SX),e(SX,aXo),e(Mv,nXo),e(N,sXo),e(N,Ev),e(Ev,q_e),e(q_e,lXo),e(Ev,iXo),e(Ev,RX),e(RX,dXo),e(Ev,cXo),e(N,fXo),e(N,Cv),e(Cv,j_e),e(j_e,mXo),e(Cv,gXo),e(Cv,PX),e(PX,hXo),e(Cv,pXo),e(N,_Xo),e(N,wv),e(wv,D_e),e(D_e,uXo),e(wv,bXo),e(wv,BX),e(BX,vXo),e(wv,FXo),e(N,TXo),e(N,Av),e(Av,G_e),e(G_e,MXo),e(Av,EXo),e(Av,IX),e(IX,CXo),e(Av,wXo),e(N,AXo),e(N,Lv),e(Lv,O_e),e(O_e,LXo),e(Lv,yXo),e(Lv,NX),e(NX,xXo),e(Lv,$Xo),e(N,kXo),e(N,yv),e(yv,V_e),e(V_e,SXo),e(yv,RXo),e(yv,qX),e(qX,PXo),e(yv,BXo),e(N,IXo),e(N,xv),e(xv,X_e),e(X_e,NXo),e(xv,qXo),e(xv,jX),e(jX,jXo),e(xv,DXo),e(N,GXo),e(N,$v),e($v,z_e),e(z_e,OXo),e($v,VXo),e($v,DX),e(DX,XXo),e($v,zXo),e(N,WXo),e(N,kv),e(kv,W_e),e(W_e,QXo),e(kv,HXo),e(kv,GX),e(GX,UXo),e(kv,JXo),e(N,YXo),e(N,Sv),e(Sv,Q_e),e(Q_e,KXo),e(Sv,ZXo),e(Sv,OX),e(OX,ezo),e(Sv,ozo),e(N,rzo),e(N,Rv),e(Rv,H_e),e(H_e,tzo),e(Rv,azo),e(Rv,VX),e(VX,nzo),e(Rv,szo),e(N,lzo),e(N,Pv),e(Pv,U_e),e(U_e,izo),e(Pv,dzo),e(Pv,XX),e(XX,czo),e(Pv,fzo),e(N,mzo),e(N,Bv),e(Bv,J_e),e(J_e,gzo),e(Bv,hzo),e(Bv,zX),e(zX,pzo),e(Bv,_zo),e(N,uzo),e(N,Iv),e(Iv,Y_e),e(Y_e,bzo),e(Iv,vzo),e(Iv,WX),e(WX,Fzo),e(Iv,Tzo),e(N,Mzo),e(N,Nv),e(Nv,K_e),e(K_e,Ezo),e(Nv,Czo),e(Nv,QX),e(QX,wzo),e(Nv,Azo),e(N,Lzo),e(N,qv),e(qv,Z_e),e(Z_e,yzo),e(qv,xzo),e(qv,HX),e(HX,$zo),e(qv,kzo),e(N,Szo),e(N,jv),e(jv,eue),e(eue,Rzo),e(jv,Pzo),e(jv,UX),e(UX,Bzo),e(jv,Izo),e(N,Nzo),e(N,Dv),e(Dv,oue),e(oue,qzo),e(Dv,jzo),e(Dv,JX),e(JX,Dzo),e(Dv,Gzo),e(N,Ozo),e(N,Gv),e(Gv,rue),e(rue,Vzo),e(Gv,Xzo),e(Gv,YX),e(YX,zzo),e(Gv,Wzo),e(N,Qzo),e(N,Ov),e(Ov,tue),e(tue,Hzo),e(Ov,Uzo),e(Ov,KX),e(KX,Jzo),e(Ov,Yzo),e(N,Kzo),e(N,Vv),e(Vv,aue),e(aue,Zzo),e(Vv,eWo),e(Vv,ZX),e(ZX,oWo),e(Vv,rWo),e(N,tWo),e(N,Xv),e(Xv,nue),e(nue,aWo),e(Xv,nWo),e(Xv,ez),e(ez,sWo),e(Xv,lWo),e(ro,iWo),e(ro,zv),e(zv,dWo),e(zv,sue),e(sue,cWo),e(zv,fWo),e(zv,lue),e(lue,mWo),e(ro,gWo),M(Wv,ro,null),b(f,VXe,u),b(f,sd,u),e(sd,Qv),e(Qv,iue),M(fL,iue,null),e(sd,hWo),e(sd,due),e(due,pWo),b(f,XXe,u),b(f,Io,u),M(mL,Io,null),e(Io,_Wo),e(Io,ld),e(ld,uWo),e(ld,oz),e(oz,bWo),e(ld,vWo),e(ld,rz),e(rz,FWo),e(ld,TWo),e(Io,MWo),e(Io,gL),e(gL,EWo),e(gL,cue),e(cue,CWo),e(gL,wWo),e(Io,AWo),e(Io,ht),M(hL,ht,null),e(ht,LWo),e(ht,fue),e(fue,yWo),e(ht,xWo),e(ht,id),e(id,$Wo),e(id,mue),e(mue,kWo),e(id,SWo),e(id,tz),e(tz,RWo),e(id,PWo),e(ht,BWo),M(Hv,ht,null),e(Io,IWo),e(Io,to),M(pL,to,null),e(to,NWo),e(to,gue),e(gue,qWo),e(to,jWo),e(to,Oa),e(Oa,DWo),e(Oa,hue),e(hue,GWo),e(Oa,OWo),e(Oa,pue),e(pue,VWo),e(Oa,XWo),e(Oa,_ue),e(_ue,zWo),e(Oa,WWo),e(to,QWo),e(to,Z),e(Z,Uv),e(Uv,uue),e(uue,HWo),e(Uv,UWo),e(Uv,az),e(az,JWo),e(Uv,YWo),e(Z,KWo),e(Z,Jv),e(Jv,bue),e(bue,ZWo),e(Jv,eQo),e(Jv,nz),e(nz,oQo),e(Jv,rQo),e(Z,tQo),e(Z,Yv),e(Yv,vue),e(vue,aQo),e(Yv,nQo),e(Yv,sz),e(sz,sQo),e(Yv,lQo),e(Z,iQo),e(Z,Kv),e(Kv,Fue),e(Fue,dQo),e(Kv,cQo),e(Kv,lz),e(lz,fQo),e(Kv,mQo),e(Z,gQo),e(Z,Zv),e(Zv,Tue),e(Tue,hQo),e(Zv,pQo),e(Zv,iz),e(iz,_Qo),e(Zv,uQo),e(Z,bQo),e(Z,e3),e(e3,Mue),e(Mue,vQo),e(e3,FQo),e(e3,dz),e(dz,TQo),e(e3,MQo),e(Z,EQo),e(Z,o3),e(o3,Eue),e(Eue,CQo),e(o3,wQo),e(o3,cz),e(cz,AQo),e(o3,LQo),e(Z,yQo),e(Z,r3),e(r3,Cue),e(Cue,xQo),e(r3,$Qo),e(r3,fz),e(fz,kQo),e(r3,SQo),e(Z,RQo),e(Z,t3),e(t3,wue),e(wue,PQo),e(t3,BQo),e(t3,mz),e(mz,IQo),e(t3,NQo),e(Z,qQo),e(Z,a3),e(a3,Aue),e(Aue,jQo),e(a3,DQo),e(a3,gz),e(gz,GQo),e(a3,OQo),e(Z,VQo),e(Z,n3),e(n3,Lue),e(Lue,XQo),e(n3,zQo),e(n3,hz),e(hz,WQo),e(n3,QQo),e(Z,HQo),e(Z,s3),e(s3,yue),e(yue,UQo),e(s3,JQo),e(s3,pz),e(pz,YQo),e(s3,KQo),e(Z,ZQo),e(Z,l3),e(l3,xue),e(xue,eHo),e(l3,oHo),e(l3,_z),e(_z,rHo),e(l3,tHo),e(Z,aHo),e(Z,i3),e(i3,$ue),e($ue,nHo),e(i3,sHo),e(i3,uz),e(uz,lHo),e(i3,iHo),e(Z,dHo),e(Z,d3),e(d3,kue),e(kue,cHo),e(d3,fHo),e(d3,bz),e(bz,mHo),e(d3,gHo),e(Z,hHo),e(Z,c3),e(c3,Sue),e(Sue,pHo),e(c3,_Ho),e(c3,vz),e(vz,uHo),e(c3,bHo),e(Z,vHo),e(Z,f3),e(f3,Rue),e(Rue,FHo),e(f3,THo),e(f3,Fz),e(Fz,MHo),e(f3,EHo),e(Z,CHo),e(Z,m3),e(m3,Pue),e(Pue,wHo),e(m3,AHo),e(m3,Tz),e(Tz,LHo),e(m3,yHo),e(Z,xHo),e(Z,g3),e(g3,Bue),e(Bue,$Ho),e(g3,kHo),e(g3,Mz),e(Mz,SHo),e(g3,RHo),e(Z,PHo),e(Z,h3),e(h3,Iue),e(Iue,BHo),e(h3,IHo),e(h3,Ez),e(Ez,NHo),e(h3,qHo),e(Z,jHo),e(Z,p3),e(p3,Nue),e(Nue,DHo),e(p3,GHo),e(p3,Cz),e(Cz,OHo),e(p3,VHo),e(Z,XHo),e(Z,_3),e(_3,que),e(que,zHo),e(_3,WHo),e(_3,wz),e(wz,QHo),e(_3,HHo),e(Z,UHo),e(Z,u3),e(u3,jue),e(jue,JHo),e(u3,YHo),e(u3,Az),e(Az,KHo),e(u3,ZHo),e(Z,eUo),e(Z,b3),e(b3,Due),e(Due,oUo),e(b3,rUo),e(b3,Lz),e(Lz,tUo),e(b3,aUo),e(Z,nUo),e(Z,v3),e(v3,Gue),e(Gue,sUo),e(v3,lUo),e(v3,yz),e(yz,iUo),e(v3,dUo),e(Z,cUo),e(Z,F3),e(F3,Oue),e(Oue,fUo),e(F3,mUo),e(F3,xz),e(xz,gUo),e(F3,hUo),e(Z,pUo),e(Z,T3),e(T3,Vue),e(Vue,_Uo),e(T3,uUo),e(T3,$z),e($z,bUo),e(T3,vUo),e(Z,FUo),e(Z,M3),e(M3,Xue),e(Xue,TUo),e(M3,MUo),e(M3,kz),e(kz,EUo),e(M3,CUo),e(Z,wUo),e(Z,E3),e(E3,zue),e(zue,AUo),e(E3,LUo),e(E3,Sz),e(Sz,yUo),e(E3,xUo),e(Z,$Uo),e(Z,C3),e(C3,Wue),e(Wue,kUo),e(C3,SUo),e(C3,Rz),e(Rz,RUo),e(C3,PUo),e(to,BUo),e(to,w3),e(w3,IUo),e(w3,Que),e(Que,NUo),e(w3,qUo),e(w3,Hue),e(Hue,jUo),e(to,DUo),M(A3,to,null),b(f,zXe,u),b(f,dd,u),e(dd,L3),e(L3,Uue),M(_L,Uue,null),e(dd,GUo),e(dd,Jue),e(Jue,OUo),b(f,WXe,u),b(f,No,u),M(uL,No,null),e(No,VUo),e(No,cd),e(cd,XUo),e(cd,Pz),e(Pz,zUo),e(cd,WUo),e(cd,Bz),e(Bz,QUo),e(cd,HUo),e(No,UUo),e(No,bL),e(bL,JUo),e(bL,Yue),e(Yue,YUo),e(bL,KUo),e(No,ZUo),e(No,pt),M(vL,pt,null),e(pt,eJo),e(pt,Kue),e(Kue,oJo),e(pt,rJo),e(pt,fd),e(fd,tJo),e(fd,Zue),e(Zue,aJo),e(fd,nJo),e(fd,Iz),e(Iz,sJo),e(fd,lJo),e(pt,iJo),M(y3,pt,null),e(No,dJo),e(No,ao),M(FL,ao,null),e(ao,cJo),e(ao,e1e),e(e1e,fJo),e(ao,mJo),e(ao,Va),e(Va,gJo),e(Va,o1e),e(o1e,hJo),e(Va,pJo),e(Va,r1e),e(r1e,_Jo),e(Va,uJo),e(Va,t1e),e(t1e,bJo),e(Va,vJo),e(ao,FJo),e(ao,qo),e(qo,x3),e(x3,a1e),e(a1e,TJo),e(x3,MJo),e(x3,Nz),e(Nz,EJo),e(x3,CJo),e(qo,wJo),e(qo,$3),e($3,n1e),e(n1e,AJo),e($3,LJo),e($3,qz),e(qz,yJo),e($3,xJo),e(qo,$Jo),e(qo,k3),e(k3,s1e),e(s1e,kJo),e(k3,SJo),e(k3,jz),e(jz,RJo),e(k3,PJo),e(qo,BJo),e(qo,S3),e(S3,l1e),e(l1e,IJo),e(S3,NJo),e(S3,Dz),e(Dz,qJo),e(S3,jJo),e(qo,DJo),e(qo,R3),e(R3,i1e),e(i1e,GJo),e(R3,OJo),e(R3,Gz),e(Gz,VJo),e(R3,XJo),e(qo,zJo),e(qo,P3),e(P3,d1e),e(d1e,WJo),e(P3,QJo),e(P3,Oz),e(Oz,HJo),e(P3,UJo),e(ao,JJo),e(ao,B3),e(B3,YJo),e(B3,c1e),e(c1e,KJo),e(B3,ZJo),e(B3,f1e),e(f1e,eYo),e(ao,oYo),M(I3,ao,null),b(f,QXe,u),b(f,md,u),e(md,N3),e(N3,m1e),M(TL,m1e,null),e(md,rYo),e(md,g1e),e(g1e,tYo),b(f,HXe,u),b(f,jo,u),M(ML,jo,null),e(jo,aYo),e(jo,gd),e(gd,nYo),e(gd,Vz),e(Vz,sYo),e(gd,lYo),e(gd,Xz),e(Xz,iYo),e(gd,dYo),e(jo,cYo),e(jo,EL),e(EL,fYo),e(EL,h1e),e(h1e,mYo),e(EL,gYo),e(jo,hYo),e(jo,_t),M(CL,_t,null),e(_t,pYo),e(_t,p1e),e(p1e,_Yo),e(_t,uYo),e(_t,hd),e(hd,bYo),e(hd,_1e),e(_1e,vYo),e(hd,FYo),e(hd,zz),e(zz,TYo),e(hd,MYo),e(_t,EYo),M(q3,_t,null),e(jo,CYo),e(jo,no),M(wL,no,null),e(no,wYo),e(no,u1e),e(u1e,AYo),e(no,LYo),e(no,Xa),e(Xa,yYo),e(Xa,b1e),e(b1e,xYo),e(Xa,$Yo),e(Xa,v1e),e(v1e,kYo),e(Xa,SYo),e(Xa,F1e),e(F1e,RYo),e(Xa,PYo),e(no,BYo),e(no,U),e(U,j3),e(j3,T1e),e(T1e,IYo),e(j3,NYo),e(j3,Wz),e(Wz,qYo),e(j3,jYo),e(U,DYo),e(U,D3),e(D3,M1e),e(M1e,GYo),e(D3,OYo),e(D3,Qz),e(Qz,VYo),e(D3,XYo),e(U,zYo),e(U,G3),e(G3,E1e),e(E1e,WYo),e(G3,QYo),e(G3,Hz),e(Hz,HYo),e(G3,UYo),e(U,JYo),e(U,O3),e(O3,C1e),e(C1e,YYo),e(O3,KYo),e(O3,Uz),e(Uz,ZYo),e(O3,eKo),e(U,oKo),e(U,V3),e(V3,w1e),e(w1e,rKo),e(V3,tKo),e(V3,Jz),e(Jz,aKo),e(V3,nKo),e(U,sKo),e(U,X3),e(X3,A1e),e(A1e,lKo),e(X3,iKo),e(X3,Yz),e(Yz,dKo),e(X3,cKo),e(U,fKo),e(U,z3),e(z3,L1e),e(L1e,mKo),e(z3,gKo),e(z3,Kz),e(Kz,hKo),e(z3,pKo),e(U,_Ko),e(U,W3),e(W3,y1e),e(y1e,uKo),e(W3,bKo),e(W3,Zz),e(Zz,vKo),e(W3,FKo),e(U,TKo),e(U,Q3),e(Q3,x1e),e(x1e,MKo),e(Q3,EKo),e(Q3,eW),e(eW,CKo),e(Q3,wKo),e(U,AKo),e(U,H3),e(H3,$1e),e($1e,LKo),e(H3,yKo),e(H3,oW),e(oW,xKo),e(H3,$Ko),e(U,kKo),e(U,U3),e(U3,k1e),e(k1e,SKo),e(U3,RKo),e(U3,rW),e(rW,PKo),e(U3,BKo),e(U,IKo),e(U,J3),e(J3,S1e),e(S1e,NKo),e(J3,qKo),e(J3,tW),e(tW,jKo),e(J3,DKo),e(U,GKo),e(U,Y3),e(Y3,R1e),e(R1e,OKo),e(Y3,VKo),e(Y3,aW),e(aW,XKo),e(Y3,zKo),e(U,WKo),e(U,K3),e(K3,P1e),e(P1e,QKo),e(K3,HKo),e(K3,nW),e(nW,UKo),e(K3,JKo),e(U,YKo),e(U,Z3),e(Z3,B1e),e(B1e,KKo),e(Z3,ZKo),e(Z3,sW),e(sW,eZo),e(Z3,oZo),e(U,rZo),e(U,eF),e(eF,I1e),e(I1e,tZo),e(eF,aZo),e(eF,lW),e(lW,nZo),e(eF,sZo),e(U,lZo),e(U,oF),e(oF,N1e),e(N1e,iZo),e(oF,dZo),e(oF,iW),e(iW,cZo),e(oF,fZo),e(U,mZo),e(U,rF),e(rF,q1e),e(q1e,gZo),e(rF,hZo),e(rF,dW),e(dW,pZo),e(rF,_Zo),e(U,uZo),e(U,tF),e(tF,j1e),e(j1e,bZo),e(tF,vZo),e(tF,cW),e(cW,FZo),e(tF,TZo),e(U,MZo),e(U,aF),e(aF,D1e),e(D1e,EZo),e(aF,CZo),e(aF,fW),e(fW,wZo),e(aF,AZo),e(U,LZo),e(U,nF),e(nF,G1e),e(G1e,yZo),e(nF,xZo),e(nF,mW),e(mW,$Zo),e(nF,kZo),e(U,SZo),e(U,sF),e(sF,O1e),e(O1e,RZo),e(sF,PZo),e(sF,gW),e(gW,BZo),e(sF,IZo),e(U,NZo),e(U,lF),e(lF,V1e),e(V1e,qZo),e(lF,jZo),e(lF,hW),e(hW,DZo),e(lF,GZo),e(U,OZo),e(U,iF),e(iF,X1e),e(X1e,VZo),e(iF,XZo),e(iF,pW),e(pW,zZo),e(iF,WZo),e(U,QZo),e(U,dF),e(dF,z1e),e(z1e,HZo),e(dF,UZo),e(dF,_W),e(_W,JZo),e(dF,YZo),e(U,KZo),e(U,cF),e(cF,W1e),e(W1e,ZZo),e(cF,eer),e(cF,uW),e(uW,oer),e(cF,rer),e(U,ter),e(U,fF),e(fF,Q1e),e(Q1e,aer),e(fF,ner),e(fF,bW),e(bW,ser),e(fF,ler),e(U,ier),e(U,mF),e(mF,H1e),e(H1e,der),e(mF,cer),e(mF,vW),e(vW,fer),e(mF,mer),e(U,ger),e(U,gF),e(gF,U1e),e(U1e,her),e(gF,per),e(gF,FW),e(FW,_er),e(gF,uer),e(U,ber),e(U,hF),e(hF,J1e),e(J1e,ver),e(hF,Fer),e(hF,TW),e(TW,Ter),e(hF,Mer),e(U,Eer),e(U,pF),e(pF,Y1e),e(Y1e,Cer),e(pF,wer),e(pF,MW),e(MW,Aer),e(pF,Ler),e(U,yer),e(U,_F),e(_F,K1e),e(K1e,xer),e(_F,$er),e(_F,EW),e(EW,ker),e(_F,Ser),e(U,Rer),e(U,uF),e(uF,Z1e),e(Z1e,Per),e(uF,Ber),e(uF,CW),e(CW,Ier),e(uF,Ner),e(U,qer),e(U,bF),e(bF,e2e),e(e2e,jer),e(bF,Der),e(bF,wW),e(wW,Ger),e(bF,Oer),e(U,Ver),e(U,vF),e(vF,o2e),e(o2e,Xer),e(vF,zer),e(vF,AW),e(AW,Wer),e(vF,Qer),e(U,Her),e(U,FF),e(FF,r2e),e(r2e,Uer),e(FF,Jer),e(FF,LW),e(LW,Yer),e(FF,Ker),e(no,Zer),e(no,TF),e(TF,eor),e(TF,t2e),e(t2e,oor),e(TF,ror),e(TF,a2e),e(a2e,tor),e(no,aor),M(MF,no,null),b(f,UXe,u),b(f,pd,u),e(pd,EF),e(EF,n2e),M(AL,n2e,null),e(pd,nor),e(pd,s2e),e(s2e,sor),b(f,JXe,u),b(f,Do,u),M(LL,Do,null),e(Do,lor),e(Do,_d),e(_d,ior),e(_d,yW),e(yW,dor),e(_d,cor),e(_d,xW),e(xW,mor),e(_d,gor),e(Do,hor),e(Do,yL),e(yL,por),e(yL,l2e),e(l2e,_or),e(yL,uor),e(Do,bor),e(Do,ut),M(xL,ut,null),e(ut,vor),e(ut,i2e),e(i2e,For),e(ut,Tor),e(ut,ud),e(ud,Mor),e(ud,d2e),e(d2e,Eor),e(ud,Cor),e(ud,$W),e($W,wor),e(ud,Aor),e(ut,Lor),M(CF,ut,null),e(Do,yor),e(Do,so),M($L,so,null),e(so,xor),e(so,c2e),e(c2e,$or),e(so,kor),e(so,za),e(za,Sor),e(za,f2e),e(f2e,Ror),e(za,Por),e(za,m2e),e(m2e,Bor),e(za,Ior),e(za,g2e),e(g2e,Nor),e(za,qor),e(so,jor),e(so,V),e(V,wF),e(wF,h2e),e(h2e,Dor),e(wF,Gor),e(wF,kW),e(kW,Oor),e(wF,Vor),e(V,Xor),e(V,AF),e(AF,p2e),e(p2e,zor),e(AF,Wor),e(AF,SW),e(SW,Qor),e(AF,Hor),e(V,Uor),e(V,LF),e(LF,_2e),e(_2e,Jor),e(LF,Yor),e(LF,RW),e(RW,Kor),e(LF,Zor),e(V,err),e(V,yF),e(yF,u2e),e(u2e,orr),e(yF,rrr),e(yF,PW),e(PW,trr),e(yF,arr),e(V,nrr),e(V,xF),e(xF,b2e),e(b2e,srr),e(xF,lrr),e(xF,BW),e(BW,irr),e(xF,drr),e(V,crr),e(V,$F),e($F,v2e),e(v2e,frr),e($F,mrr),e($F,IW),e(IW,grr),e($F,hrr),e(V,prr),e(V,kF),e(kF,F2e),e(F2e,_rr),e(kF,urr),e(kF,NW),e(NW,brr),e(kF,vrr),e(V,Frr),e(V,SF),e(SF,T2e),e(T2e,Trr),e(SF,Mrr),e(SF,qW),e(qW,Err),e(SF,Crr),e(V,wrr),e(V,RF),e(RF,M2e),e(M2e,Arr),e(RF,Lrr),e(RF,jW),e(jW,yrr),e(RF,xrr),e(V,$rr),e(V,PF),e(PF,E2e),e(E2e,krr),e(PF,Srr),e(PF,DW),e(DW,Rrr),e(PF,Prr),e(V,Brr),e(V,BF),e(BF,C2e),e(C2e,Irr),e(BF,Nrr),e(BF,GW),e(GW,qrr),e(BF,jrr),e(V,Drr),e(V,IF),e(IF,w2e),e(w2e,Grr),e(IF,Orr),e(IF,OW),e(OW,Vrr),e(IF,Xrr),e(V,zrr),e(V,NF),e(NF,A2e),e(A2e,Wrr),e(NF,Qrr),e(NF,VW),e(VW,Hrr),e(NF,Urr),e(V,Jrr),e(V,qF),e(qF,L2e),e(L2e,Yrr),e(qF,Krr),e(qF,XW),e(XW,Zrr),e(qF,etr),e(V,otr),e(V,jF),e(jF,y2e),e(y2e,rtr),e(jF,ttr),e(jF,zW),e(zW,atr),e(jF,ntr),e(V,str),e(V,DF),e(DF,x2e),e(x2e,ltr),e(DF,itr),e(DF,WW),e(WW,dtr),e(DF,ctr),e(V,ftr),e(V,GF),e(GF,$2e),e($2e,mtr),e(GF,gtr),e(GF,QW),e(QW,htr),e(GF,ptr),e(V,_tr),e(V,OF),e(OF,k2e),e(k2e,utr),e(OF,btr),e(OF,HW),e(HW,vtr),e(OF,Ftr),e(V,Ttr),e(V,VF),e(VF,S2e),e(S2e,Mtr),e(VF,Etr),e(VF,UW),e(UW,Ctr),e(VF,wtr),e(V,Atr),e(V,XF),e(XF,R2e),e(R2e,Ltr),e(XF,ytr),e(XF,JW),e(JW,xtr),e(XF,$tr),e(V,ktr),e(V,zF),e(zF,P2e),e(P2e,Str),e(zF,Rtr),e(zF,YW),e(YW,Ptr),e(zF,Btr),e(V,Itr),e(V,WF),e(WF,B2e),e(B2e,Ntr),e(WF,qtr),e(WF,KW),e(KW,jtr),e(WF,Dtr),e(V,Gtr),e(V,QF),e(QF,I2e),e(I2e,Otr),e(QF,Vtr),e(QF,ZW),e(ZW,Xtr),e(QF,ztr),e(V,Wtr),e(V,HF),e(HF,N2e),e(N2e,Qtr),e(HF,Htr),e(HF,eQ),e(eQ,Utr),e(HF,Jtr),e(V,Ytr),e(V,UF),e(UF,q2e),e(q2e,Ktr),e(UF,Ztr),e(UF,oQ),e(oQ,ear),e(UF,oar),e(V,rar),e(V,JF),e(JF,j2e),e(j2e,tar),e(JF,aar),e(JF,rQ),e(rQ,nar),e(JF,sar),e(V,lar),e(V,YF),e(YF,D2e),e(D2e,iar),e(YF,dar),e(YF,tQ),e(tQ,car),e(YF,far),e(V,mar),e(V,KF),e(KF,G2e),e(G2e,gar),e(KF,har),e(KF,aQ),e(aQ,par),e(KF,_ar),e(V,uar),e(V,ZF),e(ZF,O2e),e(O2e,bar),e(ZF,Far),e(ZF,nQ),e(nQ,Tar),e(ZF,Mar),e(V,Ear),e(V,eT),e(eT,V2e),e(V2e,Car),e(eT,war),e(eT,sQ),e(sQ,Aar),e(eT,Lar),e(V,yar),e(V,oT),e(oT,X2e),e(X2e,xar),e(oT,$ar),e(oT,lQ),e(lQ,kar),e(oT,Sar),e(V,Rar),e(V,rT),e(rT,z2e),e(z2e,Par),e(rT,Bar),e(rT,iQ),e(iQ,Iar),e(rT,Nar),e(V,qar),e(V,tT),e(tT,W2e),e(W2e,jar),e(tT,Dar),e(tT,dQ),e(dQ,Gar),e(tT,Oar),e(V,Var),e(V,aT),e(aT,Q2e),e(Q2e,Xar),e(aT,zar),e(aT,cQ),e(cQ,War),e(aT,Qar),e(V,Har),e(V,nT),e(nT,H2e),e(H2e,Uar),e(nT,Jar),e(nT,fQ),e(fQ,Yar),e(nT,Kar),e(V,Zar),e(V,sT),e(sT,U2e),e(U2e,enr),e(sT,onr),e(sT,mQ),e(mQ,rnr),e(sT,tnr),e(V,anr),e(V,lT),e(lT,J2e),e(J2e,nnr),e(lT,snr),e(lT,gQ),e(gQ,lnr),e(lT,inr),e(V,dnr),e(V,iT),e(iT,Y2e),e(Y2e,cnr),e(iT,fnr),e(iT,hQ),e(hQ,mnr),e(iT,gnr),e(V,hnr),e(V,dT),e(dT,K2e),e(K2e,pnr),e(dT,_nr),e(dT,pQ),e(pQ,unr),e(dT,bnr),e(V,vnr),e(V,cT),e(cT,Z2e),e(Z2e,Fnr),e(cT,Tnr),e(cT,_Q),e(_Q,Mnr),e(cT,Enr),e(V,Cnr),e(V,fT),e(fT,ebe),e(ebe,wnr),e(fT,Anr),e(fT,uQ),e(uQ,Lnr),e(fT,ynr),e(V,xnr),e(V,mT),e(mT,obe),e(obe,$nr),e(mT,knr),e(mT,bQ),e(bQ,Snr),e(mT,Rnr),e(so,Pnr),e(so,gT),e(gT,Bnr),e(gT,rbe),e(rbe,Inr),e(gT,Nnr),e(gT,tbe),e(tbe,qnr),e(so,jnr),M(hT,so,null),b(f,YXe,u),b(f,bd,u),e(bd,pT),e(pT,abe),M(kL,abe,null),e(bd,Dnr),e(bd,nbe),e(nbe,Gnr),b(f,KXe,u),b(f,Go,u),M(SL,Go,null),e(Go,Onr),e(Go,vd),e(vd,Vnr),e(vd,vQ),e(vQ,Xnr),e(vd,znr),e(vd,FQ),e(FQ,Wnr),e(vd,Qnr),e(Go,Hnr),e(Go,RL),e(RL,Unr),e(RL,sbe),e(sbe,Jnr),e(RL,Ynr),e(Go,Knr),e(Go,bt),M(PL,bt,null),e(bt,Znr),e(bt,lbe),e(lbe,esr),e(bt,osr),e(bt,Fd),e(Fd,rsr),e(Fd,ibe),e(ibe,tsr),e(Fd,asr),e(Fd,TQ),e(TQ,nsr),e(Fd,ssr),e(bt,lsr),M(_T,bt,null),e(Go,isr),e(Go,lo),M(BL,lo,null),e(lo,dsr),e(lo,dbe),e(dbe,csr),e(lo,fsr),e(lo,Wa),e(Wa,msr),e(Wa,cbe),e(cbe,gsr),e(Wa,hsr),e(Wa,fbe),e(fbe,psr),e(Wa,_sr),e(Wa,mbe),e(mbe,usr),e(Wa,bsr),e(lo,vsr),e(lo,gbe),e(gbe,uT),e(uT,hbe),e(hbe,Fsr),e(uT,Tsr),e(uT,MQ),e(MQ,Msr),e(uT,Esr),e(lo,Csr),e(lo,bT),e(bT,wsr),e(bT,pbe),e(pbe,Asr),e(bT,Lsr),e(bT,_be),e(_be,ysr),e(lo,xsr),M(vT,lo,null),b(f,ZXe,u),b(f,Td,u),e(Td,FT),e(FT,ube),M(IL,ube,null),e(Td,$sr),e(Td,bbe),e(bbe,ksr),b(f,eze,u),b(f,Oo,u),M(NL,Oo,null),e(Oo,Ssr),e(Oo,Md),e(Md,Rsr),e(Md,EQ),e(EQ,Psr),e(Md,Bsr),e(Md,CQ),e(CQ,Isr),e(Md,Nsr),e(Oo,qsr),e(Oo,qL),e(qL,jsr),e(qL,vbe),e(vbe,Dsr),e(qL,Gsr),e(Oo,Osr),e(Oo,vt),M(jL,vt,null),e(vt,Vsr),e(vt,Fbe),e(Fbe,Xsr),e(vt,zsr),e(vt,Ed),e(Ed,Wsr),e(Ed,Tbe),e(Tbe,Qsr),e(Ed,Hsr),e(Ed,wQ),e(wQ,Usr),e(Ed,Jsr),e(vt,Ysr),M(TT,vt,null),e(Oo,Ksr),e(Oo,io),M(DL,io,null),e(io,Zsr),e(io,Mbe),e(Mbe,elr),e(io,olr),e(io,Qa),e(Qa,rlr),e(Qa,Ebe),e(Ebe,tlr),e(Qa,alr),e(Qa,Cbe),e(Cbe,nlr),e(Qa,slr),e(Qa,wbe),e(wbe,llr),e(Qa,ilr),e(io,dlr),e(io,ve),e(ve,MT),e(MT,Abe),e(Abe,clr),e(MT,flr),e(MT,AQ),e(AQ,mlr),e(MT,glr),e(ve,hlr),e(ve,ET),e(ET,Lbe),e(Lbe,plr),e(ET,_lr),e(ET,LQ),e(LQ,ulr),e(ET,blr),e(ve,vlr),e(ve,CT),e(CT,ybe),e(ybe,Flr),e(CT,Tlr),e(CT,yQ),e(yQ,Mlr),e(CT,Elr),e(ve,Clr),e(ve,wT),e(wT,xbe),e(xbe,wlr),e(wT,Alr),e(wT,xQ),e(xQ,Llr),e(wT,ylr),e(ve,xlr),e(ve,Us),e(Us,$be),e($be,$lr),e(Us,klr),e(Us,$Q),e($Q,Slr),e(Us,Rlr),e(Us,kQ),e(kQ,Plr),e(Us,Blr),e(ve,Ilr),e(ve,AT),e(AT,kbe),e(kbe,Nlr),e(AT,qlr),e(AT,SQ),e(SQ,jlr),e(AT,Dlr),e(ve,Glr),e(ve,Js),e(Js,Sbe),e(Sbe,Olr),e(Js,Vlr),e(Js,RQ),e(RQ,Xlr),e(Js,zlr),e(Js,PQ),e(PQ,Wlr),e(Js,Qlr),e(ve,Hlr),e(ve,LT),e(LT,Rbe),e(Rbe,Ulr),e(LT,Jlr),e(LT,BQ),e(BQ,Ylr),e(LT,Klr),e(ve,Zlr),e(ve,Ft),e(Ft,Pbe),e(Pbe,eir),e(Ft,oir),e(Ft,IQ),e(IQ,rir),e(Ft,tir),e(Ft,NQ),e(NQ,air),e(Ft,nir),e(Ft,qQ),e(qQ,sir),e(Ft,lir),e(ve,iir),e(ve,yT),e(yT,Bbe),e(Bbe,dir),e(yT,cir),e(yT,jQ),e(jQ,fir),e(yT,mir),e(ve,gir),e(ve,xT),e(xT,Ibe),e(Ibe,hir),e(xT,pir),e(xT,DQ),e(DQ,_ir),e(xT,uir),e(ve,bir),e(ve,$T),e($T,Nbe),e(Nbe,vir),e($T,Fir),e($T,GQ),e(GQ,Tir),e($T,Mir),e(ve,Eir),e(ve,kT),e(kT,qbe),e(qbe,Cir),e(kT,wir),e(kT,OQ),e(OQ,Air),e(kT,Lir),e(ve,yir),e(ve,ST),e(ST,jbe),e(jbe,xir),e(ST,$ir),e(ST,VQ),e(VQ,kir),e(ST,Sir),e(ve,Rir),e(ve,RT),e(RT,Dbe),e(Dbe,Pir),e(RT,Bir),e(RT,XQ),e(XQ,Iir),e(RT,Nir),e(ve,qir),e(ve,PT),e(PT,Gbe),e(Gbe,jir),e(PT,Dir),e(PT,zQ),e(zQ,Gir),e(PT,Oir),e(io,Vir),e(io,BT),e(BT,Xir),e(BT,Obe),e(Obe,zir),e(BT,Wir),e(BT,Vbe),e(Vbe,Qir),e(io,Hir),M(IT,io,null),b(f,oze,u),b(f,Cd,u),e(Cd,NT),e(NT,Xbe),M(GL,Xbe,null),e(Cd,Uir),e(Cd,zbe),e(zbe,Jir),b(f,rze,u),b(f,Vo,u),M(OL,Vo,null),e(Vo,Yir),e(Vo,wd),e(wd,Kir),e(wd,WQ),e(WQ,Zir),e(wd,edr),e(wd,QQ),e(QQ,odr),e(wd,rdr),e(Vo,tdr),e(Vo,VL),e(VL,adr),e(VL,Wbe),e(Wbe,ndr),e(VL,sdr),e(Vo,ldr),e(Vo,Tt),M(XL,Tt,null),e(Tt,idr),e(Tt,Qbe),e(Qbe,ddr),e(Tt,cdr),e(Tt,Ad),e(Ad,fdr),e(Ad,Hbe),e(Hbe,mdr),e(Ad,gdr),e(Ad,HQ),e(HQ,hdr),e(Ad,pdr),e(Tt,_dr),M(qT,Tt,null),e(Vo,udr),e(Vo,co),M(zL,co,null),e(co,bdr),e(co,Ube),e(Ube,vdr),e(co,Fdr),e(co,Ha),e(Ha,Tdr),e(Ha,Jbe),e(Jbe,Mdr),e(Ha,Edr),e(Ha,Ybe),e(Ybe,Cdr),e(Ha,wdr),e(Ha,Kbe),e(Kbe,Adr),e(Ha,Ldr),e(co,ydr),e(co,Zbe),e(Zbe,jT),e(jT,eve),e(eve,xdr),e(jT,$dr),e(jT,UQ),e(UQ,kdr),e(jT,Sdr),e(co,Rdr),e(co,DT),e(DT,Pdr),e(DT,ove),e(ove,Bdr),e(DT,Idr),e(DT,rve),e(rve,Ndr),e(co,qdr),M(GT,co,null),b(f,tze,u),b(f,Ld,u),e(Ld,OT),e(OT,tve),M(WL,tve,null),e(Ld,jdr),e(Ld,ave),e(ave,Ddr),b(f,aze,u),b(f,Xo,u),M(QL,Xo,null),e(Xo,Gdr),e(Xo,yd),e(yd,Odr),e(yd,JQ),e(JQ,Vdr),e(yd,Xdr),e(yd,YQ),e(YQ,zdr),e(yd,Wdr),e(Xo,Qdr),e(Xo,HL),e(HL,Hdr),e(HL,nve),e(nve,Udr),e(HL,Jdr),e(Xo,Ydr),e(Xo,Mt),M(UL,Mt,null),e(Mt,Kdr),e(Mt,sve),e(sve,Zdr),e(Mt,ecr),e(Mt,xd),e(xd,ocr),e(xd,lve),e(lve,rcr),e(xd,tcr),e(xd,KQ),e(KQ,acr),e(xd,ncr),e(Mt,scr),M(VT,Mt,null),e(Xo,lcr),e(Xo,fo),M(JL,fo,null),e(fo,icr),e(fo,ive),e(ive,dcr),e(fo,ccr),e(fo,Ua),e(Ua,fcr),e(Ua,dve),e(dve,mcr),e(Ua,gcr),e(Ua,cve),e(cve,hcr),e(Ua,pcr),e(Ua,fve),e(fve,_cr),e(Ua,ucr),e(fo,bcr),e(fo,mve),e(mve,XT),e(XT,gve),e(gve,vcr),e(XT,Fcr),e(XT,ZQ),e(ZQ,Tcr),e(XT,Mcr),e(fo,Ecr),e(fo,zT),e(zT,Ccr),e(zT,hve),e(hve,wcr),e(zT,Acr),e(zT,pve),e(pve,Lcr),e(fo,ycr),M(WT,fo,null),b(f,nze,u),b(f,$d,u),e($d,QT),e(QT,_ve),M(YL,_ve,null),e($d,xcr),e($d,uve),e(uve,$cr),b(f,sze,u),b(f,zo,u),M(KL,zo,null),e(zo,kcr),e(zo,kd),e(kd,Scr),e(kd,eH),e(eH,Rcr),e(kd,Pcr),e(kd,oH),e(oH,Bcr),e(kd,Icr),e(zo,Ncr),e(zo,ZL),e(ZL,qcr),e(ZL,bve),e(bve,jcr),e(ZL,Dcr),e(zo,Gcr),e(zo,Et),M(ey,Et,null),e(Et,Ocr),e(Et,vve),e(vve,Vcr),e(Et,Xcr),e(Et,Sd),e(Sd,zcr),e(Sd,Fve),e(Fve,Wcr),e(Sd,Qcr),e(Sd,rH),e(rH,Hcr),e(Sd,Ucr),e(Et,Jcr),M(HT,Et,null),e(zo,Ycr),e(zo,mo),M(oy,mo,null),e(mo,Kcr),e(mo,Tve),e(Tve,Zcr),e(mo,efr),e(mo,Ja),e(Ja,ofr),e(Ja,Mve),e(Mve,rfr),e(Ja,tfr),e(Ja,Eve),e(Eve,afr),e(Ja,nfr),e(Ja,Cve),e(Cve,sfr),e(Ja,lfr),e(mo,ifr),e(mo,Pe),e(Pe,UT),e(UT,wve),e(wve,dfr),e(UT,cfr),e(UT,tH),e(tH,ffr),e(UT,mfr),e(Pe,gfr),e(Pe,JT),e(JT,Ave),e(Ave,hfr),e(JT,pfr),e(JT,aH),e(aH,_fr),e(JT,ufr),e(Pe,bfr),e(Pe,YT),e(YT,Lve),e(Lve,vfr),e(YT,Ffr),e(YT,nH),e(nH,Tfr),e(YT,Mfr),e(Pe,Efr),e(Pe,KT),e(KT,yve),e(yve,Cfr),e(KT,wfr),e(KT,sH),e(sH,Afr),e(KT,Lfr),e(Pe,yfr),e(Pe,ZT),e(ZT,xve),e(xve,xfr),e(ZT,$fr),e(ZT,lH),e(lH,kfr),e(ZT,Sfr),e(Pe,Rfr),e(Pe,e7),e(e7,$ve),e($ve,Pfr),e(e7,Bfr),e(e7,iH),e(iH,Ifr),e(e7,Nfr),e(Pe,qfr),e(Pe,o7),e(o7,kve),e(kve,jfr),e(o7,Dfr),e(o7,dH),e(dH,Gfr),e(o7,Ofr),e(Pe,Vfr),e(Pe,r7),e(r7,Sve),e(Sve,Xfr),e(r7,zfr),e(r7,cH),e(cH,Wfr),e(r7,Qfr),e(Pe,Hfr),e(Pe,t7),e(t7,Rve),e(Rve,Ufr),e(t7,Jfr),e(t7,fH),e(fH,Yfr),e(t7,Kfr),e(mo,Zfr),e(mo,a7),e(a7,emr),e(a7,Pve),e(Pve,omr),e(a7,rmr),e(a7,Bve),e(Bve,tmr),e(mo,amr),M(n7,mo,null),b(f,lze,u),b(f,Rd,u),e(Rd,s7),e(s7,Ive),M(ry,Ive,null),e(Rd,nmr),e(Rd,Nve),e(Nve,smr),b(f,ize,u),b(f,Wo,u),M(ty,Wo,null),e(Wo,lmr),e(Wo,Pd),e(Pd,imr),e(Pd,mH),e(mH,dmr),e(Pd,cmr),e(Pd,gH),e(gH,fmr),e(Pd,mmr),e(Wo,gmr),e(Wo,ay),e(ay,hmr),e(ay,qve),e(qve,pmr),e(ay,_mr),e(Wo,umr),e(Wo,Ct),M(ny,Ct,null),e(Ct,bmr),e(Ct,jve),e(jve,vmr),e(Ct,Fmr),e(Ct,Bd),e(Bd,Tmr),e(Bd,Dve),e(Dve,Mmr),e(Bd,Emr),e(Bd,hH),e(hH,Cmr),e(Bd,wmr),e(Ct,Amr),M(l7,Ct,null),e(Wo,Lmr),e(Wo,go),M(sy,go,null),e(go,ymr),e(go,Gve),e(Gve,xmr),e(go,$mr),e(go,Ya),e(Ya,kmr),e(Ya,Ove),e(Ove,Smr),e(Ya,Rmr),e(Ya,Vve),e(Vve,Pmr),e(Ya,Bmr),e(Ya,Xve),e(Xve,Imr),e(Ya,Nmr),e(go,qmr),e(go,rt),e(rt,i7),e(i7,zve),e(zve,jmr),e(i7,Dmr),e(i7,pH),e(pH,Gmr),e(i7,Omr),e(rt,Vmr),e(rt,d7),e(d7,Wve),e(Wve,Xmr),e(d7,zmr),e(d7,_H),e(_H,Wmr),e(d7,Qmr),e(rt,Hmr),e(rt,c7),e(c7,Qve),e(Qve,Umr),e(c7,Jmr),e(c7,uH),e(uH,Ymr),e(c7,Kmr),e(rt,Zmr),e(rt,f7),e(f7,Hve),e(Hve,egr),e(f7,ogr),e(f7,bH),e(bH,rgr),e(f7,tgr),e(rt,agr),e(rt,m7),e(m7,Uve),e(Uve,ngr),e(m7,sgr),e(m7,vH),e(vH,lgr),e(m7,igr),e(go,dgr),e(go,g7),e(g7,cgr),e(g7,Jve),e(Jve,fgr),e(g7,mgr),e(g7,Yve),e(Yve,ggr),e(go,hgr),M(h7,go,null),b(f,dze,u),b(f,Id,u),e(Id,p7),e(p7,Kve),M(ly,Kve,null),e(Id,pgr),e(Id,Zve),e(Zve,_gr),b(f,cze,u),b(f,Qo,u),M(iy,Qo,null),e(Qo,ugr),e(Qo,Nd),e(Nd,bgr),e(Nd,FH),e(FH,vgr),e(Nd,Fgr),e(Nd,TH),e(TH,Tgr),e(Nd,Mgr),e(Qo,Egr),e(Qo,dy),e(dy,Cgr),e(dy,e3e),e(e3e,wgr),e(dy,Agr),e(Qo,Lgr),e(Qo,wt),M(cy,wt,null),e(wt,ygr),e(wt,o3e),e(o3e,xgr),e(wt,$gr),e(wt,qd),e(qd,kgr),e(qd,r3e),e(r3e,Sgr),e(qd,Rgr),e(qd,MH),e(MH,Pgr),e(qd,Bgr),e(wt,Igr),M(_7,wt,null),e(Qo,Ngr),e(Qo,ho),M(fy,ho,null),e(ho,qgr),e(ho,t3e),e(t3e,jgr),e(ho,Dgr),e(ho,Ka),e(Ka,Ggr),e(Ka,a3e),e(a3e,Ogr),e(Ka,Vgr),e(Ka,n3e),e(n3e,Xgr),e(Ka,zgr),e(Ka,s3e),e(s3e,Wgr),e(Ka,Qgr),e(ho,Hgr),e(ho,Le),e(Le,u7),e(u7,l3e),e(l3e,Ugr),e(u7,Jgr),e(u7,EH),e(EH,Ygr),e(u7,Kgr),e(Le,Zgr),e(Le,b7),e(b7,i3e),e(i3e,ehr),e(b7,ohr),e(b7,CH),e(CH,rhr),e(b7,thr),e(Le,ahr),e(Le,v7),e(v7,d3e),e(d3e,nhr),e(v7,shr),e(v7,wH),e(wH,lhr),e(v7,ihr),e(Le,dhr),e(Le,F7),e(F7,c3e),e(c3e,chr),e(F7,fhr),e(F7,AH),e(AH,mhr),e(F7,ghr),e(Le,hhr),e(Le,T7),e(T7,f3e),e(f3e,phr),e(T7,_hr),e(T7,LH),e(LH,uhr),e(T7,bhr),e(Le,vhr),e(Le,M7),e(M7,m3e),e(m3e,Fhr),e(M7,Thr),e(M7,yH),e(yH,Mhr),e(M7,Ehr),e(Le,Chr),e(Le,E7),e(E7,g3e),e(g3e,whr),e(E7,Ahr),e(E7,xH),e(xH,Lhr),e(E7,yhr),e(Le,xhr),e(Le,C7),e(C7,h3e),e(h3e,$hr),e(C7,khr),e(C7,$H),e($H,Shr),e(C7,Rhr),e(Le,Phr),e(Le,w7),e(w7,p3e),e(p3e,Bhr),e(w7,Ihr),e(w7,kH),e(kH,Nhr),e(w7,qhr),e(Le,jhr),e(Le,A7),e(A7,_3e),e(_3e,Dhr),e(A7,Ghr),e(A7,SH),e(SH,Ohr),e(A7,Vhr),e(ho,Xhr),e(ho,L7),e(L7,zhr),e(L7,u3e),e(u3e,Whr),e(L7,Qhr),e(L7,b3e),e(b3e,Hhr),e(ho,Uhr),M(y7,ho,null),b(f,fze,u),b(f,jd,u),e(jd,x7),e(x7,v3e),M(my,v3e,null),e(jd,Jhr),e(jd,F3e),e(F3e,Yhr),b(f,mze,u),b(f,Ho,u),M(gy,Ho,null),e(Ho,Khr),e(Ho,Dd),e(Dd,Zhr),e(Dd,RH),e(RH,epr),e(Dd,opr),e(Dd,PH),e(PH,rpr),e(Dd,tpr),e(Ho,apr),e(Ho,hy),e(hy,npr),e(hy,T3e),e(T3e,spr),e(hy,lpr),e(Ho,ipr),e(Ho,At),M(py,At,null),e(At,dpr),e(At,M3e),e(M3e,cpr),e(At,fpr),e(At,Gd),e(Gd,mpr),e(Gd,E3e),e(E3e,gpr),e(Gd,hpr),e(Gd,BH),e(BH,ppr),e(Gd,_pr),e(At,upr),M($7,At,null),e(Ho,bpr),e(Ho,po),M(_y,po,null),e(po,vpr),e(po,C3e),e(C3e,Fpr),e(po,Tpr),e(po,Za),e(Za,Mpr),e(Za,w3e),e(w3e,Epr),e(Za,Cpr),e(Za,A3e),e(A3e,wpr),e(Za,Apr),e(Za,L3e),e(L3e,Lpr),e(Za,ypr),e(po,xpr),e(po,uy),e(uy,k7),e(k7,y3e),e(y3e,$pr),e(k7,kpr),e(k7,IH),e(IH,Spr),e(k7,Rpr),e(uy,Ppr),e(uy,S7),e(S7,x3e),e(x3e,Bpr),e(S7,Ipr),e(S7,NH),e(NH,Npr),e(S7,qpr),e(po,jpr),e(po,R7),e(R7,Dpr),e(R7,$3e),e($3e,Gpr),e(R7,Opr),e(R7,k3e),e(k3e,Vpr),e(po,Xpr),M(P7,po,null),b(f,gze,u),b(f,Od,u),e(Od,B7),e(B7,S3e),M(by,S3e,null),e(Od,zpr),e(Od,R3e),e(R3e,Wpr),b(f,hze,u),b(f,Uo,u),M(vy,Uo,null),e(Uo,Qpr),e(Uo,Vd),e(Vd,Hpr),e(Vd,qH),e(qH,Upr),e(Vd,Jpr),e(Vd,jH),e(jH,Ypr),e(Vd,Kpr),e(Uo,Zpr),e(Uo,Fy),e(Fy,e_r),e(Fy,P3e),e(P3e,o_r),e(Fy,r_r),e(Uo,t_r),e(Uo,Lt),M(Ty,Lt,null),e(Lt,a_r),e(Lt,B3e),e(B3e,n_r),e(Lt,s_r),e(Lt,Xd),e(Xd,l_r),e(Xd,I3e),e(I3e,i_r),e(Xd,d_r),e(Xd,DH),e(DH,c_r),e(Xd,f_r),e(Lt,m_r),M(I7,Lt,null),e(Uo,g_r),e(Uo,_o),M(My,_o,null),e(_o,h_r),e(_o,N3e),e(N3e,p_r),e(_o,__r),e(_o,en),e(en,u_r),e(en,q3e),e(q3e,b_r),e(en,v_r),e(en,j3e),e(j3e,F_r),e(en,T_r),e(en,D3e),e(D3e,M_r),e(en,E_r),e(_o,C_r),e(_o,tt),e(tt,N7),e(N7,G3e),e(G3e,w_r),e(N7,A_r),e(N7,GH),e(GH,L_r),e(N7,y_r),e(tt,x_r),e(tt,q7),e(q7,O3e),e(O3e,$_r),e(q7,k_r),e(q7,OH),e(OH,S_r),e(q7,R_r),e(tt,P_r),e(tt,j7),e(j7,V3e),e(V3e,B_r),e(j7,I_r),e(j7,VH),e(VH,N_r),e(j7,q_r),e(tt,j_r),e(tt,D7),e(D7,X3e),e(X3e,D_r),e(D7,G_r),e(D7,XH),e(XH,O_r),e(D7,V_r),e(tt,X_r),e(tt,G7),e(G7,z3e),e(z3e,z_r),e(G7,W_r),e(G7,zH),e(zH,Q_r),e(G7,H_r),e(_o,U_r),e(_o,O7),e(O7,J_r),e(O7,W3e),e(W3e,Y_r),e(O7,K_r),e(O7,Q3e),e(Q3e,Z_r),e(_o,eur),M(V7,_o,null),b(f,pze,u),b(f,zd,u),e(zd,X7),e(X7,H3e),M(Ey,H3e,null),e(zd,our),e(zd,U3e),e(U3e,rur),b(f,_ze,u),b(f,Jo,u),M(Cy,Jo,null),e(Jo,tur),e(Jo,Wd),e(Wd,aur),e(Wd,WH),e(WH,nur),e(Wd,sur),e(Wd,QH),e(QH,lur),e(Wd,iur),e(Jo,dur),e(Jo,wy),e(wy,cur),e(wy,J3e),e(J3e,fur),e(wy,mur),e(Jo,gur),e(Jo,yt),M(Ay,yt,null),e(yt,hur),e(yt,Y3e),e(Y3e,pur),e(yt,_ur),e(yt,Qd),e(Qd,uur),e(Qd,K3e),e(K3e,bur),e(Qd,vur),e(Qd,HH),e(HH,Fur),e(Qd,Tur),e(yt,Mur),M(z7,yt,null),e(Jo,Eur),e(Jo,uo),M(Ly,uo,null),e(uo,Cur),e(uo,Z3e),e(Z3e,wur),e(uo,Aur),e(uo,on),e(on,Lur),e(on,eFe),e(eFe,yur),e(on,xur),e(on,oFe),e(oFe,$ur),e(on,kur),e(on,rFe),e(rFe,Sur),e(on,Rur),e(uo,Pur),e(uo,Hd),e(Hd,W7),e(W7,tFe),e(tFe,Bur),e(W7,Iur),e(W7,UH),e(UH,Nur),e(W7,qur),e(Hd,jur),e(Hd,Q7),e(Q7,aFe),e(aFe,Dur),e(Q7,Gur),e(Q7,JH),e(JH,Our),e(Q7,Vur),e(Hd,Xur),e(Hd,H7),e(H7,nFe),e(nFe,zur),e(H7,Wur),e(H7,YH),e(YH,Qur),e(H7,Hur),e(uo,Uur),e(uo,U7),e(U7,Jur),e(U7,sFe),e(sFe,Yur),e(U7,Kur),e(U7,lFe),e(lFe,Zur),e(uo,e1r),M(J7,uo,null),b(f,uze,u),b(f,Ud,u),e(Ud,Y7),e(Y7,iFe),M(yy,iFe,null),e(Ud,o1r),e(Ud,dFe),e(dFe,r1r),b(f,bze,u),b(f,Yo,u),M(xy,Yo,null),e(Yo,t1r),e(Yo,Jd),e(Jd,a1r),e(Jd,KH),e(KH,n1r),e(Jd,s1r),e(Jd,ZH),e(ZH,l1r),e(Jd,i1r),e(Yo,d1r),e(Yo,$y),e($y,c1r),e($y,cFe),e(cFe,f1r),e($y,m1r),e(Yo,g1r),e(Yo,xt),M(ky,xt,null),e(xt,h1r),e(xt,fFe),e(fFe,p1r),e(xt,_1r),e(xt,Yd),e(Yd,u1r),e(Yd,mFe),e(mFe,b1r),e(Yd,v1r),e(Yd,eU),e(eU,F1r),e(Yd,T1r),e(xt,M1r),M(K7,xt,null),e(Yo,E1r),e(Yo,bo),M(Sy,bo,null),e(bo,C1r),e(bo,gFe),e(gFe,w1r),e(bo,A1r),e(bo,rn),e(rn,L1r),e(rn,hFe),e(hFe,y1r),e(rn,x1r),e(rn,pFe),e(pFe,$1r),e(rn,k1r),e(rn,_Fe),e(_Fe,S1r),e(rn,R1r),e(bo,P1r),e(bo,Ry),e(Ry,Z7),e(Z7,uFe),e(uFe,B1r),e(Z7,I1r),e(Z7,oU),e(oU,N1r),e(Z7,q1r),e(Ry,j1r),e(Ry,e8),e(e8,bFe),e(bFe,D1r),e(e8,G1r),e(e8,rU),e(rU,O1r),e(e8,V1r),e(bo,X1r),e(bo,o8),e(o8,z1r),e(o8,vFe),e(vFe,W1r),e(o8,Q1r),e(o8,FFe),e(FFe,H1r),e(bo,U1r),M(r8,bo,null),b(f,vze,u),b(f,Kd,u),e(Kd,t8),e(t8,TFe),M(Py,TFe,null),e(Kd,J1r),e(Kd,MFe),e(MFe,Y1r),b(f,Fze,u),b(f,Ko,u),M(By,Ko,null),e(Ko,K1r),e(Ko,Zd),e(Zd,Z1r),e(Zd,tU),e(tU,e2r),e(Zd,o2r),e(Zd,aU),e(aU,r2r),e(Zd,t2r),e(Ko,a2r),e(Ko,Iy),e(Iy,n2r),e(Iy,EFe),e(EFe,s2r),e(Iy,l2r),e(Ko,i2r),e(Ko,$t),M(Ny,$t,null),e($t,d2r),e($t,CFe),e(CFe,c2r),e($t,f2r),e($t,ec),e(ec,m2r),e(ec,wFe),e(wFe,g2r),e(ec,h2r),e(ec,nU),e(nU,p2r),e(ec,_2r),e($t,u2r),M(a8,$t,null),e(Ko,b2r),e(Ko,vo),M(qy,vo,null),e(vo,v2r),e(vo,AFe),e(AFe,F2r),e(vo,T2r),e(vo,tn),e(tn,M2r),e(tn,LFe),e(LFe,E2r),e(tn,C2r),e(tn,yFe),e(yFe,w2r),e(tn,A2r),e(tn,xFe),e(xFe,L2r),e(tn,y2r),e(vo,x2r),e(vo,$Fe),e($Fe,n8),e(n8,kFe),e(kFe,$2r),e(n8,k2r),e(n8,sU),e(sU,S2r),e(n8,R2r),e(vo,P2r),e(vo,s8),e(s8,B2r),e(s8,SFe),e(SFe,I2r),e(s8,N2r),e(s8,RFe),e(RFe,q2r),e(vo,j2r),M(l8,vo,null),b(f,Tze,u),b(f,oc,u),e(oc,i8),e(i8,PFe),M(jy,PFe,null),e(oc,D2r),e(oc,BFe),e(BFe,G2r),b(f,Mze,u),b(f,Zo,u),M(Dy,Zo,null),e(Zo,O2r),e(Zo,rc),e(rc,V2r),e(rc,lU),e(lU,X2r),e(rc,z2r),e(rc,iU),e(iU,W2r),e(rc,Q2r),e(Zo,H2r),e(Zo,Gy),e(Gy,U2r),e(Gy,IFe),e(IFe,J2r),e(Gy,Y2r),e(Zo,K2r),e(Zo,kt),M(Oy,kt,null),e(kt,Z2r),e(kt,NFe),e(NFe,ebr),e(kt,obr),e(kt,tc),e(tc,rbr),e(tc,qFe),e(qFe,tbr),e(tc,abr),e(tc,dU),e(dU,nbr),e(tc,sbr),e(kt,lbr),M(d8,kt,null),e(Zo,ibr),e(Zo,Fo),M(Vy,Fo,null),e(Fo,dbr),e(Fo,jFe),e(jFe,cbr),e(Fo,fbr),e(Fo,an),e(an,mbr),e(an,DFe),e(DFe,gbr),e(an,hbr),e(an,GFe),e(GFe,pbr),e(an,_br),e(an,OFe),e(OFe,ubr),e(an,bbr),e(Fo,vbr),e(Fo,at),e(at,c8),e(c8,VFe),e(VFe,Fbr),e(c8,Tbr),e(c8,cU),e(cU,Mbr),e(c8,Ebr),e(at,Cbr),e(at,f8),e(f8,XFe),e(XFe,wbr),e(f8,Abr),e(f8,fU),e(fU,Lbr),e(f8,ybr),e(at,xbr),e(at,m8),e(m8,zFe),e(zFe,$br),e(m8,kbr),e(m8,mU),e(mU,Sbr),e(m8,Rbr),e(at,Pbr),e(at,g8),e(g8,WFe),e(WFe,Bbr),e(g8,Ibr),e(g8,gU),e(gU,Nbr),e(g8,qbr),e(at,jbr),e(at,h8),e(h8,QFe),e(QFe,Dbr),e(h8,Gbr),e(h8,hU),e(hU,Obr),e(h8,Vbr),e(Fo,Xbr),e(Fo,p8),e(p8,zbr),e(p8,HFe),e(HFe,Wbr),e(p8,Qbr),e(p8,UFe),e(UFe,Hbr),e(Fo,Ubr),M(_8,Fo,null),b(f,Eze,u),b(f,ac,u),e(ac,u8),e(u8,JFe),M(Xy,JFe,null),e(ac,Jbr),e(ac,YFe),e(YFe,Ybr),b(f,Cze,u),b(f,er,u),M(zy,er,null),e(er,Kbr),e(er,nc),e(nc,Zbr),e(nc,pU),e(pU,evr),e(nc,ovr),e(nc,_U),e(_U,rvr),e(nc,tvr),e(er,avr),e(er,Wy),e(Wy,nvr),e(Wy,KFe),e(KFe,svr),e(Wy,lvr),e(er,ivr),e(er,St),M(Qy,St,null),e(St,dvr),e(St,ZFe),e(ZFe,cvr),e(St,fvr),e(St,sc),e(sc,mvr),e(sc,eTe),e(eTe,gvr),e(sc,hvr),e(sc,uU),e(uU,pvr),e(sc,_vr),e(St,uvr),M(b8,St,null),e(er,bvr),e(er,To),M(Hy,To,null),e(To,vvr),e(To,oTe),e(oTe,Fvr),e(To,Tvr),e(To,nn),e(nn,Mvr),e(nn,rTe),e(rTe,Evr),e(nn,Cvr),e(nn,tTe),e(tTe,wvr),e(nn,Avr),e(nn,aTe),e(aTe,Lvr),e(nn,yvr),e(To,xvr),e(To,nTe),e(nTe,v8),e(v8,sTe),e(sTe,$vr),e(v8,kvr),e(v8,bU),e(bU,Svr),e(v8,Rvr),e(To,Pvr),e(To,F8),e(F8,Bvr),e(F8,lTe),e(lTe,Ivr),e(F8,Nvr),e(F8,iTe),e(iTe,qvr),e(To,jvr),M(T8,To,null),b(f,wze,u),b(f,lc,u),e(lc,M8),e(M8,dTe),M(Uy,dTe,null),e(lc,Dvr),e(lc,cTe),e(cTe,Gvr),b(f,Aze,u),b(f,or,u),M(Jy,or,null),e(or,Ovr),e(or,ic),e(ic,Vvr),e(ic,vU),e(vU,Xvr),e(ic,zvr),e(ic,FU),e(FU,Wvr),e(ic,Qvr),e(or,Hvr),e(or,Yy),e(Yy,Uvr),e(Yy,fTe),e(fTe,Jvr),e(Yy,Yvr),e(or,Kvr),e(or,Rt),M(Ky,Rt,null),e(Rt,Zvr),e(Rt,mTe),e(mTe,e3r),e(Rt,o3r),e(Rt,dc),e(dc,r3r),e(dc,gTe),e(gTe,t3r),e(dc,a3r),e(dc,TU),e(TU,n3r),e(dc,s3r),e(Rt,l3r),M(E8,Rt,null),e(or,i3r),e(or,xr),M(Zy,xr,null),e(xr,d3r),e(xr,hTe),e(hTe,c3r),e(xr,f3r),e(xr,sn),e(sn,m3r),e(sn,pTe),e(pTe,g3r),e(sn,h3r),e(sn,_Te),e(_Te,p3r),e(sn,_3r),e(sn,uTe),e(uTe,u3r),e(sn,b3r),e(xr,v3r),e(xr,q),e(q,C8),e(C8,bTe),e(bTe,F3r),e(C8,T3r),e(C8,MU),e(MU,M3r),e(C8,E3r),e(q,C3r),e(q,w8),e(w8,vTe),e(vTe,w3r),e(w8,A3r),e(w8,EU),e(EU,L3r),e(w8,y3r),e(q,x3r),e(q,A8),e(A8,FTe),e(FTe,$3r),e(A8,k3r),e(A8,CU),e(CU,S3r),e(A8,R3r),e(q,P3r),e(q,L8),e(L8,TTe),e(TTe,B3r),e(L8,I3r),e(L8,wU),e(wU,N3r),e(L8,q3r),e(q,j3r),e(q,y8),e(y8,MTe),e(MTe,D3r),e(y8,G3r),e(y8,AU),e(AU,O3r),e(y8,V3r),e(q,X3r),e(q,x8),e(x8,ETe),e(ETe,z3r),e(x8,W3r),e(x8,LU),e(LU,Q3r),e(x8,H3r),e(q,U3r),e(q,$8),e($8,CTe),e(CTe,J3r),e($8,Y3r),e($8,yU),e(yU,K3r),e($8,Z3r),e(q,eFr),e(q,k8),e(k8,wTe),e(wTe,oFr),e(k8,rFr),e(k8,xU),e(xU,tFr),e(k8,aFr),e(q,nFr),e(q,S8),e(S8,ATe),e(ATe,sFr),e(S8,lFr),e(S8,$U),e($U,iFr),e(S8,dFr),e(q,cFr),e(q,R8),e(R8,LTe),e(LTe,fFr),e(R8,mFr),e(R8,kU),e(kU,gFr),e(R8,hFr),e(q,pFr),e(q,P8),e(P8,yTe),e(yTe,_Fr),e(P8,uFr),e(P8,SU),e(SU,bFr),e(P8,vFr),e(q,FFr),e(q,B8),e(B8,xTe),e(xTe,TFr),e(B8,MFr),e(B8,RU),e(RU,EFr),e(B8,CFr),e(q,wFr),e(q,I8),e(I8,$Te),e($Te,AFr),e(I8,LFr),e(I8,PU),e(PU,yFr),e(I8,xFr),e(q,$Fr),e(q,N8),e(N8,kTe),e(kTe,kFr),e(N8,SFr),e(N8,BU),e(BU,RFr),e(N8,PFr),e(q,BFr),e(q,q8),e(q8,STe),e(STe,IFr),e(q8,NFr),e(q8,IU),e(IU,qFr),e(q8,jFr),e(q,DFr),e(q,j8),e(j8,RTe),e(RTe,GFr),e(j8,OFr),e(j8,NU),e(NU,VFr),e(j8,XFr),e(q,zFr),e(q,D8),e(D8,PTe),e(PTe,WFr),e(D8,QFr),e(D8,qU),e(qU,HFr),e(D8,UFr),e(q,JFr),e(q,G8),e(G8,BTe),e(BTe,YFr),e(G8,KFr),e(G8,jU),e(jU,ZFr),e(G8,eTr),e(q,oTr),e(q,Ys),e(Ys,ITe),e(ITe,rTr),e(Ys,tTr),e(Ys,DU),e(DU,aTr),e(Ys,nTr),e(Ys,GU),e(GU,sTr),e(Ys,lTr),e(q,iTr),e(q,O8),e(O8,NTe),e(NTe,dTr),e(O8,cTr),e(O8,OU),e(OU,fTr),e(O8,mTr),e(q,gTr),e(q,V8),e(V8,qTe),e(qTe,hTr),e(V8,pTr),e(V8,VU),e(VU,_Tr),e(V8,uTr),e(q,bTr),e(q,X8),e(X8,jTe),e(jTe,vTr),e(X8,FTr),e(X8,XU),e(XU,TTr),e(X8,MTr),e(q,ETr),e(q,z8),e(z8,DTe),e(DTe,CTr),e(z8,wTr),e(z8,zU),e(zU,ATr),e(z8,LTr),e(q,yTr),e(q,W8),e(W8,GTe),e(GTe,xTr),e(W8,$Tr),e(W8,WU),e(WU,kTr),e(W8,STr),e(q,RTr),e(q,Q8),e(Q8,OTe),e(OTe,PTr),e(Q8,BTr),e(Q8,QU),e(QU,ITr),e(Q8,NTr),e(q,qTr),e(q,H8),e(H8,VTe),e(VTe,jTr),e(H8,DTr),e(H8,HU),e(HU,GTr),e(H8,OTr),e(q,VTr),e(q,U8),e(U8,XTe),e(XTe,XTr),e(U8,zTr),e(U8,UU),e(UU,WTr),e(U8,QTr),e(q,HTr),e(q,J8),e(J8,zTe),e(zTe,UTr),e(J8,JTr),e(J8,JU),e(JU,YTr),e(J8,KTr),e(q,ZTr),e(q,Y8),e(Y8,WTe),e(WTe,e7r),e(Y8,o7r),e(Y8,YU),e(YU,r7r),e(Y8,t7r),e(q,a7r),e(q,K8),e(K8,QTe),e(QTe,n7r),e(K8,s7r),e(K8,KU),e(KU,l7r),e(K8,i7r),e(q,d7r),e(q,Z8),e(Z8,HTe),e(HTe,c7r),e(Z8,f7r),e(Z8,ZU),e(ZU,m7r),e(Z8,g7r),e(q,h7r),e(q,e9),e(e9,UTe),e(UTe,p7r),e(e9,_7r),e(e9,eJ),e(eJ,u7r),e(e9,b7r),e(q,v7r),e(q,o9),e(o9,JTe),e(JTe,F7r),e(o9,T7r),e(o9,oJ),e(oJ,M7r),e(o9,E7r),e(q,C7r),e(q,r9),e(r9,YTe),e(YTe,w7r),e(r9,A7r),e(r9,rJ),e(rJ,L7r),e(r9,y7r),e(q,x7r),e(q,t9),e(t9,KTe),e(KTe,$7r),e(t9,k7r),e(t9,tJ),e(tJ,S7r),e(t9,R7r),e(q,P7r),e(q,a9),e(a9,ZTe),e(ZTe,B7r),e(a9,I7r),e(a9,aJ),e(aJ,N7r),e(a9,q7r),e(q,j7r),e(q,n9),e(n9,e7e),e(e7e,D7r),e(n9,G7r),e(n9,nJ),e(nJ,O7r),e(n9,V7r),e(q,X7r),e(q,s9),e(s9,o7e),e(o7e,z7r),e(s9,W7r),e(s9,sJ),e(sJ,Q7r),e(s9,H7r),e(q,U7r),e(q,l9),e(l9,r7e),e(r7e,J7r),e(l9,Y7r),e(l9,lJ),e(lJ,K7r),e(l9,Z7r),e(q,e8r),e(q,i9),e(i9,t7e),e(t7e,o8r),e(i9,r8r),e(i9,iJ),e(iJ,t8r),e(i9,a8r),e(q,n8r),e(q,d9),e(d9,a7e),e(a7e,s8r),e(d9,l8r),e(d9,dJ),e(dJ,i8r),e(d9,d8r),e(q,c8r),e(q,c9),e(c9,n7e),e(n7e,f8r),e(c9,m8r),e(c9,cJ),e(cJ,g8r),e(c9,h8r),e(q,p8r),e(q,f9),e(f9,s7e),e(s7e,_8r),e(f9,u8r),e(f9,fJ),e(fJ,b8r),e(f9,v8r),e(q,F8r),e(q,m9),e(m9,l7e),e(l7e,T8r),e(m9,M8r),e(m9,mJ),e(mJ,E8r),e(m9,C8r),e(q,w8r),e(q,g9),e(g9,i7e),e(i7e,A8r),e(g9,L8r),e(g9,gJ),e(gJ,y8r),e(g9,x8r),e(q,$8r),e(q,h9),e(h9,d7e),e(d7e,k8r),e(h9,S8r),e(h9,hJ),e(hJ,R8r),e(h9,P8r),e(q,B8r),e(q,p9),e(p9,c7e),e(c7e,I8r),e(p9,N8r),e(p9,pJ),e(pJ,q8r),e(p9,j8r),e(q,D8r),e(q,_9),e(_9,f7e),e(f7e,G8r),e(_9,O8r),e(_9,_J),e(_J,V8r),e(_9,X8r),e(q,z8r),e(q,u9),e(u9,m7e),e(m7e,W8r),e(u9,Q8r),e(u9,uJ),e(uJ,H8r),e(u9,U8r),e(q,J8r),e(q,b9),e(b9,g7e),e(g7e,Y8r),e(b9,K8r),e(b9,bJ),e(bJ,Z8r),e(b9,e9r),e(xr,o9r),M(v9,xr,null),b(f,Lze,u),b(f,cc,u),e(cc,F9),e(F9,h7e),M(ex,h7e,null),e(cc,r9r),e(cc,p7e),e(p7e,t9r),b(f,yze,u),b(f,rr,u),M(ox,rr,null),e(rr,a9r),e(rr,fc),e(fc,n9r),e(fc,vJ),e(vJ,s9r),e(fc,l9r),e(fc,FJ),e(FJ,i9r),e(fc,d9r),e(rr,c9r),e(rr,rx),e(rx,f9r),e(rx,_7e),e(_7e,m9r),e(rx,g9r),e(rr,h9r),e(rr,Pt),M(tx,Pt,null),e(Pt,p9r),e(Pt,u7e),e(u7e,_9r),e(Pt,u9r),e(Pt,mc),e(mc,b9r),e(mc,b7e),e(b7e,v9r),e(mc,F9r),e(mc,TJ),e(TJ,T9r),e(mc,M9r),e(Pt,E9r),M(T9,Pt,null),e(rr,C9r),e(rr,$r),M(ax,$r,null),e($r,w9r),e($r,v7e),e(v7e,A9r),e($r,L9r),e($r,ln),e(ln,y9r),e(ln,F7e),e(F7e,x9r),e(ln,$9r),e(ln,T7e),e(T7e,k9r),e(ln,S9r),e(ln,M7e),e(M7e,R9r),e(ln,P9r),e($r,B9r),e($r,se),e(se,M9),e(M9,E7e),e(E7e,I9r),e(M9,N9r),e(M9,MJ),e(MJ,q9r),e(M9,j9r),e(se,D9r),e(se,E9),e(E9,C7e),e(C7e,G9r),e(E9,O9r),e(E9,EJ),e(EJ,V9r),e(E9,X9r),e(se,z9r),e(se,C9),e(C9,w7e),e(w7e,W9r),e(C9,Q9r),e(C9,CJ),e(CJ,H9r),e(C9,U9r),e(se,J9r),e(se,w9),e(w9,A7e),e(A7e,Y9r),e(w9,K9r),e(w9,wJ),e(wJ,Z9r),e(w9,eMr),e(se,oMr),e(se,A9),e(A9,L7e),e(L7e,rMr),e(A9,tMr),e(A9,AJ),e(AJ,aMr),e(A9,nMr),e(se,sMr),e(se,L9),e(L9,y7e),e(y7e,lMr),e(L9,iMr),e(L9,LJ),e(LJ,dMr),e(L9,cMr),e(se,fMr),e(se,y9),e(y9,x7e),e(x7e,mMr),e(y9,gMr),e(y9,yJ),e(yJ,hMr),e(y9,pMr),e(se,_Mr),e(se,x9),e(x9,$7e),e($7e,uMr),e(x9,bMr),e(x9,xJ),e(xJ,vMr),e(x9,FMr),e(se,TMr),e(se,$9),e($9,k7e),e(k7e,MMr),e($9,EMr),e($9,$J),e($J,CMr),e($9,wMr),e(se,AMr),e(se,k9),e(k9,S7e),e(S7e,LMr),e(k9,yMr),e(k9,kJ),e(kJ,xMr),e(k9,$Mr),e(se,kMr),e(se,S9),e(S9,R7e),e(R7e,SMr),e(S9,RMr),e(S9,SJ),e(SJ,PMr),e(S9,BMr),e(se,IMr),e(se,R9),e(R9,P7e),e(P7e,NMr),e(R9,qMr),e(R9,RJ),e(RJ,jMr),e(R9,DMr),e(se,GMr),e(se,P9),e(P9,B7e),e(B7e,OMr),e(P9,VMr),e(P9,PJ),e(PJ,XMr),e(P9,zMr),e(se,WMr),e(se,B9),e(B9,I7e),e(I7e,QMr),e(B9,HMr),e(B9,BJ),e(BJ,UMr),e(B9,JMr),e(se,YMr),e(se,I9),e(I9,N7e),e(N7e,KMr),e(I9,ZMr),e(I9,IJ),e(IJ,e4r),e(I9,o4r),e(se,r4r),e(se,N9),e(N9,q7e),e(q7e,t4r),e(N9,a4r),e(N9,NJ),e(NJ,n4r),e(N9,s4r),e(se,l4r),e(se,q9),e(q9,j7e),e(j7e,i4r),e(q9,d4r),e(q9,qJ),e(qJ,c4r),e(q9,f4r),e(se,m4r),e(se,j9),e(j9,D7e),e(D7e,g4r),e(j9,h4r),e(j9,jJ),e(jJ,p4r),e(j9,_4r),e(se,u4r),e(se,D9),e(D9,G7e),e(G7e,b4r),e(D9,v4r),e(D9,DJ),e(DJ,F4r),e(D9,T4r),e(se,M4r),e(se,G9),e(G9,O7e),e(O7e,E4r),e(G9,C4r),e(G9,GJ),e(GJ,w4r),e(G9,A4r),e(se,L4r),e(se,O9),e(O9,V7e),e(V7e,y4r),e(O9,x4r),e(O9,OJ),e(OJ,$4r),e(O9,k4r),e(se,S4r),e(se,V9),e(V9,X7e),e(X7e,R4r),e(V9,P4r),e(V9,VJ),e(VJ,B4r),e(V9,I4r),e(se,N4r),e(se,X9),e(X9,z7e),e(z7e,q4r),e(X9,j4r),e(X9,XJ),e(XJ,D4r),e(X9,G4r),e($r,O4r),M(z9,$r,null),b(f,xze,u),b(f,gc,u),e(gc,W9),e(W9,W7e),M(nx,W7e,null),e(gc,V4r),e(gc,Q7e),e(Q7e,X4r),b(f,$ze,u),b(f,tr,u),M(sx,tr,null),e(tr,z4r),e(tr,hc),e(hc,W4r),e(hc,zJ),e(zJ,Q4r),e(hc,H4r),e(hc,WJ),e(WJ,U4r),e(hc,J4r),e(tr,Y4r),e(tr,lx),e(lx,K4r),e(lx,H7e),e(H7e,Z4r),e(lx,eEr),e(tr,oEr),e(tr,Bt),M(ix,Bt,null),e(Bt,rEr),e(Bt,U7e),e(U7e,tEr),e(Bt,aEr),e(Bt,pc),e(pc,nEr),e(pc,J7e),e(J7e,sEr),e(pc,lEr),e(pc,QJ),e(QJ,iEr),e(pc,dEr),e(Bt,cEr),M(Q9,Bt,null),e(tr,fEr),e(tr,kr),M(dx,kr,null),e(kr,mEr),e(kr,Y7e),e(Y7e,gEr),e(kr,hEr),e(kr,dn),e(dn,pEr),e(dn,K7e),e(K7e,_Er),e(dn,uEr),e(dn,Z7e),e(Z7e,bEr),e(dn,vEr),e(dn,e8e),e(e8e,FEr),e(dn,TEr),e(kr,MEr),e(kr,Me),e(Me,H9),e(H9,o8e),e(o8e,EEr),e(H9,CEr),e(H9,HJ),e(HJ,wEr),e(H9,AEr),e(Me,LEr),e(Me,U9),e(U9,r8e),e(r8e,yEr),e(U9,xEr),e(U9,UJ),e(UJ,$Er),e(U9,kEr),e(Me,SEr),e(Me,J9),e(J9,t8e),e(t8e,REr),e(J9,PEr),e(J9,JJ),e(JJ,BEr),e(J9,IEr),e(Me,NEr),e(Me,Y9),e(Y9,a8e),e(a8e,qEr),e(Y9,jEr),e(Y9,YJ),e(YJ,DEr),e(Y9,GEr),e(Me,OEr),e(Me,K9),e(K9,n8e),e(n8e,VEr),e(K9,XEr),e(K9,KJ),e(KJ,zEr),e(K9,WEr),e(Me,QEr),e(Me,Z9),e(Z9,s8e),e(s8e,HEr),e(Z9,UEr),e(Z9,ZJ),e(ZJ,JEr),e(Z9,YEr),e(Me,KEr),e(Me,eM),e(eM,l8e),e(l8e,ZEr),e(eM,eCr),e(eM,eY),e(eY,oCr),e(eM,rCr),e(Me,tCr),e(Me,oM),e(oM,i8e),e(i8e,aCr),e(oM,nCr),e(oM,oY),e(oY,sCr),e(oM,lCr),e(Me,iCr),e(Me,rM),e(rM,d8e),e(d8e,dCr),e(rM,cCr),e(rM,rY),e(rY,fCr),e(rM,mCr),e(Me,gCr),e(Me,tM),e(tM,c8e),e(c8e,hCr),e(tM,pCr),e(tM,tY),e(tY,_Cr),e(tM,uCr),e(Me,bCr),e(Me,aM),e(aM,f8e),e(f8e,vCr),e(aM,FCr),e(aM,aY),e(aY,TCr),e(aM,MCr),e(Me,ECr),e(Me,nM),e(nM,m8e),e(m8e,CCr),e(nM,wCr),e(nM,nY),e(nY,ACr),e(nM,LCr),e(Me,yCr),e(Me,sM),e(sM,g8e),e(g8e,xCr),e(sM,$Cr),e(sM,sY),e(sY,kCr),e(sM,SCr),e(kr,RCr),M(lM,kr,null),b(f,kze,u),b(f,_c,u),e(_c,iM),e(iM,h8e),M(cx,h8e,null),e(_c,PCr),e(_c,p8e),e(p8e,BCr),b(f,Sze,u),b(f,ar,u),M(fx,ar,null),e(ar,ICr),e(ar,uc),e(uc,NCr),e(uc,lY),e(lY,qCr),e(uc,jCr),e(uc,iY),e(iY,DCr),e(uc,GCr),e(ar,OCr),e(ar,mx),e(mx,VCr),e(mx,_8e),e(_8e,XCr),e(mx,zCr),e(ar,WCr),e(ar,It),M(gx,It,null),e(It,QCr),e(It,u8e),e(u8e,HCr),e(It,UCr),e(It,bc),e(bc,JCr),e(bc,b8e),e(b8e,YCr),e(bc,KCr),e(bc,dY),e(dY,ZCr),e(bc,e5r),e(It,o5r),M(dM,It,null),e(ar,r5r),e(ar,Sr),M(hx,Sr,null),e(Sr,t5r),e(Sr,v8e),e(v8e,a5r),e(Sr,n5r),e(Sr,cn),e(cn,s5r),e(cn,F8e),e(F8e,l5r),e(cn,i5r),e(cn,T8e),e(T8e,d5r),e(cn,c5r),e(cn,M8e),e(M8e,f5r),e(cn,m5r),e(Sr,g5r),e(Sr,We),e(We,cM),e(cM,E8e),e(E8e,h5r),e(cM,p5r),e(cM,cY),e(cY,_5r),e(cM,u5r),e(We,b5r),e(We,fM),e(fM,C8e),e(C8e,v5r),e(fM,F5r),e(fM,fY),e(fY,T5r),e(fM,M5r),e(We,E5r),e(We,Ks),e(Ks,w8e),e(w8e,C5r),e(Ks,w5r),e(Ks,mY),e(mY,A5r),e(Ks,L5r),e(Ks,gY),e(gY,y5r),e(Ks,x5r),e(We,$5r),e(We,mM),e(mM,A8e),e(A8e,k5r),e(mM,S5r),e(mM,hY),e(hY,R5r),e(mM,P5r),e(We,B5r),e(We,gM),e(gM,L8e),e(L8e,I5r),e(gM,N5r),e(gM,pY),e(pY,q5r),e(gM,j5r),e(We,D5r),e(We,hM),e(hM,y8e),e(y8e,G5r),e(hM,O5r),e(hM,_Y),e(_Y,V5r),e(hM,X5r),e(We,z5r),e(We,pM),e(pM,x8e),e(x8e,W5r),e(pM,Q5r),e(pM,uY),e(uY,H5r),e(pM,U5r),e(Sr,J5r),M(_M,Sr,null),b(f,Rze,u),b(f,vc,u),e(vc,uM),e(uM,$8e),M(px,$8e,null),e(vc,Y5r),e(vc,k8e),e(k8e,K5r),b(f,Pze,u),b(f,nr,u),M(_x,nr,null),e(nr,Z5r),e(nr,Fc),e(Fc,e0r),e(Fc,bY),e(bY,o0r),e(Fc,r0r),e(Fc,vY),e(vY,t0r),e(Fc,a0r),e(nr,n0r),e(nr,ux),e(ux,s0r),e(ux,S8e),e(S8e,l0r),e(ux,i0r),e(nr,d0r),e(nr,Nt),M(bx,Nt,null),e(Nt,c0r),e(Nt,R8e),e(R8e,f0r),e(Nt,m0r),e(Nt,Tc),e(Tc,g0r),e(Tc,P8e),e(P8e,h0r),e(Tc,p0r),e(Tc,FY),e(FY,_0r),e(Tc,u0r),e(Nt,b0r),M(bM,Nt,null),e(nr,v0r),e(nr,Rr),M(vx,Rr,null),e(Rr,F0r),e(Rr,B8e),e(B8e,T0r),e(Rr,M0r),e(Rr,fn),e(fn,E0r),e(fn,I8e),e(I8e,C0r),e(fn,w0r),e(fn,N8e),e(N8e,A0r),e(fn,L0r),e(fn,q8e),e(q8e,y0r),e(fn,x0r),e(Rr,$0r),e(Rr,ie),e(ie,vM),e(vM,j8e),e(j8e,k0r),e(vM,S0r),e(vM,TY),e(TY,R0r),e(vM,P0r),e(ie,B0r),e(ie,FM),e(FM,D8e),e(D8e,I0r),e(FM,N0r),e(FM,MY),e(MY,q0r),e(FM,j0r),e(ie,D0r),e(ie,TM),e(TM,G8e),e(G8e,G0r),e(TM,O0r),e(TM,EY),e(EY,V0r),e(TM,X0r),e(ie,z0r),e(ie,MM),e(MM,O8e),e(O8e,W0r),e(MM,Q0r),e(MM,CY),e(CY,H0r),e(MM,U0r),e(ie,J0r),e(ie,EM),e(EM,V8e),e(V8e,Y0r),e(EM,K0r),e(EM,wY),e(wY,Z0r),e(EM,ewr),e(ie,owr),e(ie,CM),e(CM,X8e),e(X8e,rwr),e(CM,twr),e(CM,AY),e(AY,awr),e(CM,nwr),e(ie,swr),e(ie,wM),e(wM,z8e),e(z8e,lwr),e(wM,iwr),e(wM,LY),e(LY,dwr),e(wM,cwr),e(ie,fwr),e(ie,AM),e(AM,W8e),e(W8e,mwr),e(AM,gwr),e(AM,yY),e(yY,hwr),e(AM,pwr),e(ie,_wr),e(ie,LM),e(LM,Q8e),e(Q8e,uwr),e(LM,bwr),e(LM,xY),e(xY,vwr),e(LM,Fwr),e(ie,Twr),e(ie,yM),e(yM,H8e),e(H8e,Mwr),e(yM,Ewr),e(yM,$Y),e($Y,Cwr),e(yM,wwr),e(ie,Awr),e(ie,xM),e(xM,U8e),e(U8e,Lwr),e(xM,ywr),e(xM,kY),e(kY,xwr),e(xM,$wr),e(ie,kwr),e(ie,$M),e($M,J8e),e(J8e,Swr),e($M,Rwr),e($M,SY),e(SY,Pwr),e($M,Bwr),e(ie,Iwr),e(ie,kM),e(kM,Y8e),e(Y8e,Nwr),e(kM,qwr),e(kM,RY),e(RY,jwr),e(kM,Dwr),e(ie,Gwr),e(ie,SM),e(SM,K8e),e(K8e,Owr),e(SM,Vwr),e(SM,PY),e(PY,Xwr),e(SM,zwr),e(ie,Wwr),e(ie,RM),e(RM,Z8e),e(Z8e,Qwr),e(RM,Hwr),e(RM,BY),e(BY,Uwr),e(RM,Jwr),e(ie,Ywr),e(ie,PM),e(PM,e9e),e(e9e,Kwr),e(PM,Zwr),e(PM,IY),e(IY,eAr),e(PM,oAr),e(ie,rAr),e(ie,BM),e(BM,o9e),e(o9e,tAr),e(BM,aAr),e(BM,NY),e(NY,nAr),e(BM,sAr),e(ie,lAr),e(ie,IM),e(IM,r9e),e(r9e,iAr),e(IM,dAr),e(IM,qY),e(qY,cAr),e(IM,fAr),e(ie,mAr),e(ie,NM),e(NM,t9e),e(t9e,gAr),e(NM,hAr),e(NM,jY),e(jY,pAr),e(NM,_Ar),e(ie,uAr),e(ie,qM),e(qM,a9e),e(a9e,bAr),e(qM,vAr),e(qM,DY),e(DY,FAr),e(qM,TAr),e(Rr,MAr),M(jM,Rr,null),b(f,Bze,u),b(f,Mc,u),e(Mc,DM),e(DM,n9e),M(Fx,n9e,null),e(Mc,EAr),e(Mc,s9e),e(s9e,CAr),b(f,Ize,u),b(f,sr,u),M(Tx,sr,null),e(sr,wAr),e(sr,Ec),e(Ec,AAr),e(Ec,GY),e(GY,LAr),e(Ec,yAr),e(Ec,OY),e(OY,xAr),e(Ec,$Ar),e(sr,kAr),e(sr,Mx),e(Mx,SAr),e(Mx,l9e),e(l9e,RAr),e(Mx,PAr),e(sr,BAr),e(sr,qt),M(Ex,qt,null),e(qt,IAr),e(qt,i9e),e(i9e,NAr),e(qt,qAr),e(qt,Cc),e(Cc,jAr),e(Cc,d9e),e(d9e,DAr),e(Cc,GAr),e(Cc,VY),e(VY,OAr),e(Cc,VAr),e(qt,XAr),M(GM,qt,null),e(sr,zAr),e(sr,Pr),M(Cx,Pr,null),e(Pr,WAr),e(Pr,c9e),e(c9e,QAr),e(Pr,HAr),e(Pr,mn),e(mn,UAr),e(mn,f9e),e(f9e,JAr),e(mn,YAr),e(mn,m9e),e(m9e,KAr),e(mn,ZAr),e(mn,g9e),e(g9e,e6r),e(mn,o6r),e(Pr,r6r),e(Pr,ye),e(ye,OM),e(OM,h9e),e(h9e,t6r),e(OM,a6r),e(OM,XY),e(XY,n6r),e(OM,s6r),e(ye,l6r),e(ye,VM),e(VM,p9e),e(p9e,i6r),e(VM,d6r),e(VM,zY),e(zY,c6r),e(VM,f6r),e(ye,m6r),e(ye,XM),e(XM,_9e),e(_9e,g6r),e(XM,h6r),e(XM,WY),e(WY,p6r),e(XM,_6r),e(ye,u6r),e(ye,zM),e(zM,u9e),e(u9e,b6r),e(zM,v6r),e(zM,QY),e(QY,F6r),e(zM,T6r),e(ye,M6r),e(ye,WM),e(WM,b9e),e(b9e,E6r),e(WM,C6r),e(WM,HY),e(HY,w6r),e(WM,A6r),e(ye,L6r),e(ye,QM),e(QM,v9e),e(v9e,y6r),e(QM,x6r),e(QM,UY),e(UY,$6r),e(QM,k6r),e(ye,S6r),e(ye,HM),e(HM,F9e),e(F9e,R6r),e(HM,P6r),e(HM,JY),e(JY,B6r),e(HM,I6r),e(ye,N6r),e(ye,UM),e(UM,T9e),e(T9e,q6r),e(UM,j6r),e(UM,YY),e(YY,D6r),e(UM,G6r),e(ye,O6r),e(ye,JM),e(JM,M9e),e(M9e,V6r),e(JM,X6r),e(JM,KY),e(KY,z6r),e(JM,W6r),e(ye,Q6r),e(ye,YM),e(YM,E9e),e(E9e,H6r),e(YM,U6r),e(YM,ZY),e(ZY,J6r),e(YM,Y6r),e(Pr,K6r),M(KM,Pr,null),b(f,Nze,u),b(f,wc,u),e(wc,ZM),e(ZM,C9e),M(wx,C9e,null),e(wc,Z6r),e(wc,w9e),e(w9e,eLr),b(f,qze,u),b(f,lr,u),M(Ax,lr,null),e(lr,oLr),e(lr,Ac),e(Ac,rLr),e(Ac,eK),e(eK,tLr),e(Ac,aLr),e(Ac,oK),e(oK,nLr),e(Ac,sLr),e(lr,lLr),e(lr,Lx),e(Lx,iLr),e(Lx,A9e),e(A9e,dLr),e(Lx,cLr),e(lr,fLr),e(lr,jt),M(yx,jt,null),e(jt,mLr),e(jt,L9e),e(L9e,gLr),e(jt,hLr),e(jt,Lc),e(Lc,pLr),e(Lc,y9e),e(y9e,_Lr),e(Lc,uLr),e(Lc,rK),e(rK,bLr),e(Lc,vLr),e(jt,FLr),M(e4,jt,null),e(lr,TLr),e(lr,Br),M(xx,Br,null),e(Br,MLr),e(Br,x9e),e(x9e,ELr),e(Br,CLr),e(Br,gn),e(gn,wLr),e(gn,$9e),e($9e,ALr),e(gn,LLr),e(gn,k9e),e(k9e,yLr),e(gn,xLr),e(gn,S9e),e(S9e,$Lr),e(gn,kLr),e(Br,SLr),e(Br,te),e(te,o4),e(o4,R9e),e(R9e,RLr),e(o4,PLr),e(o4,tK),e(tK,BLr),e(o4,ILr),e(te,NLr),e(te,r4),e(r4,P9e),e(P9e,qLr),e(r4,jLr),e(r4,aK),e(aK,DLr),e(r4,GLr),e(te,OLr),e(te,t4),e(t4,B9e),e(B9e,VLr),e(t4,XLr),e(t4,nK),e(nK,zLr),e(t4,WLr),e(te,QLr),e(te,a4),e(a4,I9e),e(I9e,HLr),e(a4,ULr),e(a4,sK),e(sK,JLr),e(a4,YLr),e(te,KLr),e(te,n4),e(n4,N9e),e(N9e,ZLr),e(n4,eyr),e(n4,lK),e(lK,oyr),e(n4,ryr),e(te,tyr),e(te,s4),e(s4,q9e),e(q9e,ayr),e(s4,nyr),e(s4,iK),e(iK,syr),e(s4,lyr),e(te,iyr),e(te,l4),e(l4,j9e),e(j9e,dyr),e(l4,cyr),e(l4,dK),e(dK,fyr),e(l4,myr),e(te,gyr),e(te,i4),e(i4,D9e),e(D9e,hyr),e(i4,pyr),e(i4,cK),e(cK,_yr),e(i4,uyr),e(te,byr),e(te,d4),e(d4,G9e),e(G9e,vyr),e(d4,Fyr),e(d4,fK),e(fK,Tyr),e(d4,Myr),e(te,Eyr),e(te,c4),e(c4,O9e),e(O9e,Cyr),e(c4,wyr),e(c4,mK),e(mK,Ayr),e(c4,Lyr),e(te,yyr),e(te,f4),e(f4,V9e),e(V9e,xyr),e(f4,$yr),e(f4,gK),e(gK,kyr),e(f4,Syr),e(te,Ryr),e(te,m4),e(m4,X9e),e(X9e,Pyr),e(m4,Byr),e(m4,hK),e(hK,Iyr),e(m4,Nyr),e(te,qyr),e(te,g4),e(g4,z9e),e(z9e,jyr),e(g4,Dyr),e(g4,pK),e(pK,Gyr),e(g4,Oyr),e(te,Vyr),e(te,h4),e(h4,W9e),e(W9e,Xyr),e(h4,zyr),e(h4,_K),e(_K,Wyr),e(h4,Qyr),e(te,Hyr),e(te,p4),e(p4,Q9e),e(Q9e,Uyr),e(p4,Jyr),e(p4,uK),e(uK,Yyr),e(p4,Kyr),e(te,Zyr),e(te,_4),e(_4,H9e),e(H9e,exr),e(_4,oxr),e(_4,bK),e(bK,rxr),e(_4,txr),e(te,axr),e(te,u4),e(u4,U9e),e(U9e,nxr),e(u4,sxr),e(u4,vK),e(vK,lxr),e(u4,ixr),e(te,dxr),e(te,b4),e(b4,J9e),e(J9e,cxr),e(b4,fxr),e(b4,FK),e(FK,mxr),e(b4,gxr),e(te,hxr),e(te,v4),e(v4,Y9e),e(Y9e,pxr),e(v4,_xr),e(v4,TK),e(TK,uxr),e(v4,bxr),e(te,vxr),e(te,F4),e(F4,K9e),e(K9e,Fxr),e(F4,Txr),e(F4,MK),e(MK,Mxr),e(F4,Exr),e(te,Cxr),e(te,T4),e(T4,Z9e),e(Z9e,wxr),e(T4,Axr),e(T4,EK),e(EK,Lxr),e(T4,yxr),e(te,xxr),e(te,M4),e(M4,eMe),e(eMe,$xr),e(M4,kxr),e(M4,CK),e(CK,Sxr),e(M4,Rxr),e(te,Pxr),e(te,E4),e(E4,oMe),e(oMe,Bxr),e(E4,Ixr),e(E4,wK),e(wK,Nxr),e(E4,qxr),e(te,jxr),e(te,C4),e(C4,rMe),e(rMe,Dxr),e(C4,Gxr),e(C4,AK),e(AK,Oxr),e(C4,Vxr),e(te,Xxr),e(te,w4),e(w4,tMe),e(tMe,zxr),e(w4,Wxr),e(w4,LK),e(LK,Qxr),e(w4,Hxr),e(te,Uxr),e(te,A4),e(A4,aMe),e(aMe,Jxr),e(A4,Yxr),e(A4,yK),e(yK,Kxr),e(A4,Zxr),e(Br,e$r),M(L4,Br,null),b(f,jze,u),b(f,yc,u),e(yc,y4),e(y4,nMe),M($x,nMe,null),e(yc,o$r),e(yc,sMe),e(sMe,r$r),b(f,Dze,u),b(f,ir,u),M(kx,ir,null),e(ir,t$r),e(ir,xc),e(xc,a$r),e(xc,xK),e(xK,n$r),e(xc,s$r),e(xc,$K),e($K,l$r),e(xc,i$r),e(ir,d$r),e(ir,Sx),e(Sx,c$r),e(Sx,lMe),e(lMe,f$r),e(Sx,m$r),e(ir,g$r),e(ir,Dt),M(Rx,Dt,null),e(Dt,h$r),e(Dt,iMe),e(iMe,p$r),e(Dt,_$r),e(Dt,$c),e($c,u$r),e($c,dMe),e(dMe,b$r),e($c,v$r),e($c,kK),e(kK,F$r),e($c,T$r),e(Dt,M$r),M(x4,Dt,null),e(ir,E$r),e(ir,Ir),M(Px,Ir,null),e(Ir,C$r),e(Ir,cMe),e(cMe,w$r),e(Ir,A$r),e(Ir,hn),e(hn,L$r),e(hn,fMe),e(fMe,y$r),e(hn,x$r),e(hn,mMe),e(mMe,$$r),e(hn,k$r),e(hn,gMe),e(gMe,S$r),e(hn,R$r),e(Ir,P$r),e(Ir,ue),e(ue,$4),e($4,hMe),e(hMe,B$r),e($4,I$r),e($4,SK),e(SK,N$r),e($4,q$r),e(ue,j$r),e(ue,k4),e(k4,pMe),e(pMe,D$r),e(k4,G$r),e(k4,RK),e(RK,O$r),e(k4,V$r),e(ue,X$r),e(ue,S4),e(S4,_Me),e(_Me,z$r),e(S4,W$r),e(S4,PK),e(PK,Q$r),e(S4,H$r),e(ue,U$r),e(ue,R4),e(R4,uMe),e(uMe,J$r),e(R4,Y$r),e(R4,BK),e(BK,K$r),e(R4,Z$r),e(ue,ekr),e(ue,P4),e(P4,bMe),e(bMe,okr),e(P4,rkr),e(P4,IK),e(IK,tkr),e(P4,akr),e(ue,nkr),e(ue,B4),e(B4,vMe),e(vMe,skr),e(B4,lkr),e(B4,NK),e(NK,ikr),e(B4,dkr),e(ue,ckr),e(ue,I4),e(I4,FMe),e(FMe,fkr),e(I4,mkr),e(I4,qK),e(qK,gkr),e(I4,hkr),e(ue,pkr),e(ue,N4),e(N4,TMe),e(TMe,_kr),e(N4,ukr),e(N4,jK),e(jK,bkr),e(N4,vkr),e(ue,Fkr),e(ue,q4),e(q4,MMe),e(MMe,Tkr),e(q4,Mkr),e(q4,DK),e(DK,Ekr),e(q4,Ckr),e(ue,wkr),e(ue,j4),e(j4,EMe),e(EMe,Akr),e(j4,Lkr),e(j4,GK),e(GK,ykr),e(j4,xkr),e(ue,$kr),e(ue,D4),e(D4,CMe),e(CMe,kkr),e(D4,Skr),e(D4,OK),e(OK,Rkr),e(D4,Pkr),e(ue,Bkr),e(ue,G4),e(G4,wMe),e(wMe,Ikr),e(G4,Nkr),e(G4,VK),e(VK,qkr),e(G4,jkr),e(ue,Dkr),e(ue,O4),e(O4,AMe),e(AMe,Gkr),e(O4,Okr),e(O4,XK),e(XK,Vkr),e(O4,Xkr),e(ue,zkr),e(ue,V4),e(V4,LMe),e(LMe,Wkr),e(V4,Qkr),e(V4,zK),e(zK,Hkr),e(V4,Ukr),e(ue,Jkr),e(ue,X4),e(X4,yMe),e(yMe,Ykr),e(X4,Kkr),e(X4,WK),e(WK,Zkr),e(X4,eSr),e(ue,oSr),e(ue,z4),e(z4,xMe),e(xMe,rSr),e(z4,tSr),e(z4,QK),e(QK,aSr),e(z4,nSr),e(ue,sSr),e(ue,W4),e(W4,$Me),e($Me,lSr),e(W4,iSr),e(W4,HK),e(HK,dSr),e(W4,cSr),e(Ir,fSr),M(Q4,Ir,null),b(f,Gze,u),b(f,kc,u),e(kc,H4),e(H4,kMe),M(Bx,kMe,null),e(kc,mSr),e(kc,SMe),e(SMe,gSr),b(f,Oze,u),b(f,dr,u),M(Ix,dr,null),e(dr,hSr),e(dr,Sc),e(Sc,pSr),e(Sc,UK),e(UK,_Sr),e(Sc,uSr),e(Sc,JK),e(JK,bSr),e(Sc,vSr),e(dr,FSr),e(dr,Nx),e(Nx,TSr),e(Nx,RMe),e(RMe,MSr),e(Nx,ESr),e(dr,CSr),e(dr,Gt),M(qx,Gt,null),e(Gt,wSr),e(Gt,PMe),e(PMe,ASr),e(Gt,LSr),e(Gt,Rc),e(Rc,ySr),e(Rc,BMe),e(BMe,xSr),e(Rc,$Sr),e(Rc,YK),e(YK,kSr),e(Rc,SSr),e(Gt,RSr),M(U4,Gt,null),e(dr,PSr),e(dr,Nr),M(jx,Nr,null),e(Nr,BSr),e(Nr,IMe),e(IMe,ISr),e(Nr,NSr),e(Nr,pn),e(pn,qSr),e(pn,NMe),e(NMe,jSr),e(pn,DSr),e(pn,qMe),e(qMe,GSr),e(pn,OSr),e(pn,jMe),e(jMe,VSr),e(pn,XSr),e(Nr,zSr),e(Nr,Dx),e(Dx,J4),e(J4,DMe),e(DMe,WSr),e(J4,QSr),e(J4,KK),e(KK,HSr),e(J4,USr),e(Dx,JSr),e(Dx,Y4),e(Y4,GMe),e(GMe,YSr),e(Y4,KSr),e(Y4,ZK),e(ZK,ZSr),e(Y4,eRr),e(Nr,oRr),M(K4,Nr,null),b(f,Vze,u),b(f,Pc,u),e(Pc,Z4),e(Z4,OMe),M(Gx,OMe,null),e(Pc,rRr),e(Pc,VMe),e(VMe,tRr),b(f,Xze,u),b(f,cr,u),M(Ox,cr,null),e(cr,aRr),e(cr,Bc),e(Bc,nRr),e(Bc,eZ),e(eZ,sRr),e(Bc,lRr),e(Bc,oZ),e(oZ,iRr),e(Bc,dRr),e(cr,cRr),e(cr,Vx),e(Vx,fRr),e(Vx,XMe),e(XMe,mRr),e(Vx,gRr),e(cr,hRr),e(cr,Ot),M(Xx,Ot,null),e(Ot,pRr),e(Ot,zMe),e(zMe,_Rr),e(Ot,uRr),e(Ot,Ic),e(Ic,bRr),e(Ic,WMe),e(WMe,vRr),e(Ic,FRr),e(Ic,rZ),e(rZ,TRr),e(Ic,MRr),e(Ot,ERr),M(eE,Ot,null),e(cr,CRr),e(cr,qr),M(zx,qr,null),e(qr,wRr),e(qr,QMe),e(QMe,ARr),e(qr,LRr),e(qr,_n),e(_n,yRr),e(_n,HMe),e(HMe,xRr),e(_n,$Rr),e(_n,UMe),e(UMe,kRr),e(_n,SRr),e(_n,JMe),e(JMe,RRr),e(_n,PRr),e(qr,BRr),e(qr,YMe),e(YMe,oE),e(oE,KMe),e(KMe,IRr),e(oE,NRr),e(oE,tZ),e(tZ,qRr),e(oE,jRr),e(qr,DRr),M(rE,qr,null),b(f,zze,u),b(f,Nc,u),e(Nc,tE),e(tE,ZMe),M(Wx,ZMe,null),e(Nc,GRr),e(Nc,e4e),e(e4e,ORr),b(f,Wze,u),b(f,fr,u),M(Qx,fr,null),e(fr,VRr),e(fr,qc),e(qc,XRr),e(qc,aZ),e(aZ,zRr),e(qc,WRr),e(qc,nZ),e(nZ,QRr),e(qc,HRr),e(fr,URr),e(fr,Hx),e(Hx,JRr),e(Hx,o4e),e(o4e,YRr),e(Hx,KRr),e(fr,ZRr),e(fr,Vt),M(Ux,Vt,null),e(Vt,ePr),e(Vt,r4e),e(r4e,oPr),e(Vt,rPr),e(Vt,jc),e(jc,tPr),e(jc,t4e),e(t4e,aPr),e(jc,nPr),e(jc,sZ),e(sZ,sPr),e(jc,lPr),e(Vt,iPr),M(aE,Vt,null),e(fr,dPr),e(fr,jr),M(Jx,jr,null),e(jr,cPr),e(jr,a4e),e(a4e,fPr),e(jr,mPr),e(jr,un),e(un,gPr),e(un,n4e),e(n4e,hPr),e(un,pPr),e(un,s4e),e(s4e,_Pr),e(un,uPr),e(un,l4e),e(l4e,bPr),e(un,vPr),e(jr,FPr),e(jr,de),e(de,nE),e(nE,i4e),e(i4e,TPr),e(nE,MPr),e(nE,lZ),e(lZ,EPr),e(nE,CPr),e(de,wPr),e(de,sE),e(sE,d4e),e(d4e,APr),e(sE,LPr),e(sE,iZ),e(iZ,yPr),e(sE,xPr),e(de,$Pr),e(de,lE),e(lE,c4e),e(c4e,kPr),e(lE,SPr),e(lE,dZ),e(dZ,RPr),e(lE,PPr),e(de,BPr),e(de,iE),e(iE,f4e),e(f4e,IPr),e(iE,NPr),e(iE,cZ),e(cZ,qPr),e(iE,jPr),e(de,DPr),e(de,dE),e(dE,m4e),e(m4e,GPr),e(dE,OPr),e(dE,fZ),e(fZ,VPr),e(dE,XPr),e(de,zPr),e(de,cE),e(cE,g4e),e(g4e,WPr),e(cE,QPr),e(cE,mZ),e(mZ,HPr),e(cE,UPr),e(de,JPr),e(de,fE),e(fE,h4e),e(h4e,YPr),e(fE,KPr),e(fE,gZ),e(gZ,ZPr),e(fE,eBr),e(de,oBr),e(de,mE),e(mE,p4e),e(p4e,rBr),e(mE,tBr),e(mE,hZ),e(hZ,aBr),e(mE,nBr),e(de,sBr),e(de,gE),e(gE,_4e),e(_4e,lBr),e(gE,iBr),e(gE,pZ),e(pZ,dBr),e(gE,cBr),e(de,fBr),e(de,hE),e(hE,u4e),e(u4e,mBr),e(hE,gBr),e(hE,_Z),e(_Z,hBr),e(hE,pBr),e(de,_Br),e(de,pE),e(pE,b4e),e(b4e,uBr),e(pE,bBr),e(pE,uZ),e(uZ,vBr),e(pE,FBr),e(de,TBr),e(de,_E),e(_E,v4e),e(v4e,MBr),e(_E,EBr),e(_E,bZ),e(bZ,CBr),e(_E,wBr),e(de,ABr),e(de,uE),e(uE,F4e),e(F4e,LBr),e(uE,yBr),e(uE,vZ),e(vZ,xBr),e(uE,$Br),e(de,kBr),e(de,bE),e(bE,T4e),e(T4e,SBr),e(bE,RBr),e(bE,FZ),e(FZ,PBr),e(bE,BBr),e(de,IBr),e(de,vE),e(vE,M4e),e(M4e,NBr),e(vE,qBr),e(vE,TZ),e(TZ,jBr),e(vE,DBr),e(de,GBr),e(de,FE),e(FE,E4e),e(E4e,OBr),e(FE,VBr),e(FE,MZ),e(MZ,XBr),e(FE,zBr),e(de,WBr),e(de,TE),e(TE,C4e),e(C4e,QBr),e(TE,HBr),e(TE,EZ),e(EZ,UBr),e(TE,JBr),e(de,YBr),e(de,ME),e(ME,w4e),e(w4e,KBr),e(ME,ZBr),e(ME,CZ),e(CZ,eIr),e(ME,oIr),e(de,rIr),e(de,EE),e(EE,A4e),e(A4e,tIr),e(EE,aIr),e(EE,wZ),e(wZ,nIr),e(EE,sIr),e(de,lIr),e(de,CE),e(CE,L4e),e(L4e,iIr),e(CE,dIr),e(CE,AZ),e(AZ,cIr),e(CE,fIr),e(jr,mIr),M(wE,jr,null),b(f,Qze,u),b(f,Dc,u),e(Dc,AE),e(AE,y4e),M(Yx,y4e,null),e(Dc,gIr),e(Dc,x4e),e(x4e,hIr),b(f,Hze,u),b(f,mr,u),M(Kx,mr,null),e(mr,pIr),e(mr,Gc),e(Gc,_Ir),e(Gc,LZ),e(LZ,uIr),e(Gc,bIr),e(Gc,yZ),e(yZ,vIr),e(Gc,FIr),e(mr,TIr),e(mr,Zx),e(Zx,MIr),e(Zx,$4e),e($4e,EIr),e(Zx,CIr),e(mr,wIr),e(mr,Xt),M(e$,Xt,null),e(Xt,AIr),e(Xt,k4e),e(k4e,LIr),e(Xt,yIr),e(Xt,Oc),e(Oc,xIr),e(Oc,S4e),e(S4e,$Ir),e(Oc,kIr),e(Oc,xZ),e(xZ,SIr),e(Oc,RIr),e(Xt,PIr),M(LE,Xt,null),e(mr,BIr),e(mr,Dr),M(o$,Dr,null),e(Dr,IIr),e(Dr,R4e),e(R4e,NIr),e(Dr,qIr),e(Dr,bn),e(bn,jIr),e(bn,P4e),e(P4e,DIr),e(bn,GIr),e(bn,B4e),e(B4e,OIr),e(bn,VIr),e(bn,I4e),e(I4e,XIr),e(bn,zIr),e(Dr,WIr),e(Dr,ce),e(ce,yE),e(yE,N4e),e(N4e,QIr),e(yE,HIr),e(yE,$Z),e($Z,UIr),e(yE,JIr),e(ce,YIr),e(ce,xE),e(xE,q4e),e(q4e,KIr),e(xE,ZIr),e(xE,kZ),e(kZ,eNr),e(xE,oNr),e(ce,rNr),e(ce,$E),e($E,j4e),e(j4e,tNr),e($E,aNr),e($E,SZ),e(SZ,nNr),e($E,sNr),e(ce,lNr),e(ce,kE),e(kE,D4e),e(D4e,iNr),e(kE,dNr),e(kE,RZ),e(RZ,cNr),e(kE,fNr),e(ce,mNr),e(ce,SE),e(SE,G4e),e(G4e,gNr),e(SE,hNr),e(SE,PZ),e(PZ,pNr),e(SE,_Nr),e(ce,uNr),e(ce,RE),e(RE,O4e),e(O4e,bNr),e(RE,vNr),e(RE,BZ),e(BZ,FNr),e(RE,TNr),e(ce,MNr),e(ce,PE),e(PE,V4e),e(V4e,ENr),e(PE,CNr),e(PE,IZ),e(IZ,wNr),e(PE,ANr),e(ce,LNr),e(ce,BE),e(BE,X4e),e(X4e,yNr),e(BE,xNr),e(BE,NZ),e(NZ,$Nr),e(BE,kNr),e(ce,SNr),e(ce,IE),e(IE,z4e),e(z4e,RNr),e(IE,PNr),e(IE,qZ),e(qZ,BNr),e(IE,INr),e(ce,NNr),e(ce,NE),e(NE,W4e),e(W4e,qNr),e(NE,jNr),e(NE,jZ),e(jZ,DNr),e(NE,GNr),e(ce,ONr),e(ce,qE),e(qE,Q4e),e(Q4e,VNr),e(qE,XNr),e(qE,DZ),e(DZ,zNr),e(qE,WNr),e(ce,QNr),e(ce,jE),e(jE,H4e),e(H4e,HNr),e(jE,UNr),e(jE,GZ),e(GZ,JNr),e(jE,YNr),e(ce,KNr),e(ce,DE),e(DE,U4e),e(U4e,ZNr),e(DE,eqr),e(DE,OZ),e(OZ,oqr),e(DE,rqr),e(ce,tqr),e(ce,GE),e(GE,J4e),e(J4e,aqr),e(GE,nqr),e(GE,VZ),e(VZ,sqr),e(GE,lqr),e(ce,iqr),e(ce,OE),e(OE,Y4e),e(Y4e,dqr),e(OE,cqr),e(OE,XZ),e(XZ,fqr),e(OE,mqr),e(ce,gqr),e(ce,VE),e(VE,K4e),e(K4e,hqr),e(VE,pqr),e(VE,zZ),e(zZ,_qr),e(VE,uqr),e(ce,bqr),e(ce,XE),e(XE,Z4e),e(Z4e,vqr),e(XE,Fqr),e(XE,WZ),e(WZ,Tqr),e(XE,Mqr),e(ce,Eqr),e(ce,zE),e(zE,eEe),e(eEe,Cqr),e(zE,wqr),e(zE,QZ),e(QZ,Aqr),e(zE,Lqr),e(ce,yqr),e(ce,WE),e(WE,oEe),e(oEe,xqr),e(WE,$qr),e(WE,HZ),e(HZ,kqr),e(WE,Sqr),e(ce,Rqr),e(ce,QE),e(QE,rEe),e(rEe,Pqr),e(QE,Bqr),e(QE,UZ),e(UZ,Iqr),e(QE,Nqr),e(Dr,qqr),M(HE,Dr,null),b(f,Uze,u),b(f,Vc,u),e(Vc,UE),e(UE,tEe),M(r$,tEe,null),e(Vc,jqr),e(Vc,aEe),e(aEe,Dqr),b(f,Jze,u),b(f,gr,u),M(t$,gr,null),e(gr,Gqr),e(gr,Xc),e(Xc,Oqr),e(Xc,JZ),e(JZ,Vqr),e(Xc,Xqr),e(Xc,YZ),e(YZ,zqr),e(Xc,Wqr),e(gr,Qqr),e(gr,a$),e(a$,Hqr),e(a$,nEe),e(nEe,Uqr),e(a$,Jqr),e(gr,Yqr),e(gr,zt),M(n$,zt,null),e(zt,Kqr),e(zt,sEe),e(sEe,Zqr),e(zt,ejr),e(zt,zc),e(zc,ojr),e(zc,lEe),e(lEe,rjr),e(zc,tjr),e(zc,KZ),e(KZ,ajr),e(zc,njr),e(zt,sjr),M(JE,zt,null),e(gr,ljr),e(gr,Gr),M(s$,Gr,null),e(Gr,ijr),e(Gr,iEe),e(iEe,djr),e(Gr,cjr),e(Gr,vn),e(vn,fjr),e(vn,dEe),e(dEe,mjr),e(vn,gjr),e(vn,cEe),e(cEe,hjr),e(vn,pjr),e(vn,fEe),e(fEe,_jr),e(vn,ujr),e(Gr,bjr),e(Gr,mEe),e(mEe,YE),e(YE,gEe),e(gEe,vjr),e(YE,Fjr),e(YE,ZZ),e(ZZ,Tjr),e(YE,Mjr),e(Gr,Ejr),M(KE,Gr,null),b(f,Yze,u),b(f,Wc,u),e(Wc,ZE),e(ZE,hEe),M(l$,hEe,null),e(Wc,Cjr),e(Wc,pEe),e(pEe,wjr),b(f,Kze,u),b(f,hr,u),M(i$,hr,null),e(hr,Ajr),e(hr,Qc),e(Qc,Ljr),e(Qc,eee),e(eee,yjr),e(Qc,xjr),e(Qc,oee),e(oee,$jr),e(Qc,kjr),e(hr,Sjr),e(hr,d$),e(d$,Rjr),e(d$,_Ee),e(_Ee,Pjr),e(d$,Bjr),e(hr,Ijr),e(hr,Wt),M(c$,Wt,null),e(Wt,Njr),e(Wt,uEe),e(uEe,qjr),e(Wt,jjr),e(Wt,Hc),e(Hc,Djr),e(Hc,bEe),e(bEe,Gjr),e(Hc,Ojr),e(Hc,ree),e(ree,Vjr),e(Hc,Xjr),e(Wt,zjr),M(eC,Wt,null),e(hr,Wjr),e(hr,Or),M(f$,Or,null),e(Or,Qjr),e(Or,vEe),e(vEe,Hjr),e(Or,Ujr),e(Or,Fn),e(Fn,Jjr),e(Fn,FEe),e(FEe,Yjr),e(Fn,Kjr),e(Fn,TEe),e(TEe,Zjr),e(Fn,eDr),e(Fn,MEe),e(MEe,oDr),e(Fn,rDr),e(Or,tDr),e(Or,EEe),e(EEe,oC),e(oC,CEe),e(CEe,aDr),e(oC,nDr),e(oC,tee),e(tee,sDr),e(oC,lDr),e(Or,iDr),M(rC,Or,null),b(f,Zze,u),b(f,Uc,u),e(Uc,tC),e(tC,wEe),M(m$,wEe,null),e(Uc,dDr),e(Uc,AEe),e(AEe,cDr),b(f,eWe,u),b(f,pr,u),M(g$,pr,null),e(pr,fDr),e(pr,Jc),e(Jc,mDr),e(Jc,aee),e(aee,gDr),e(Jc,hDr),e(Jc,nee),e(nee,pDr),e(Jc,_Dr),e(pr,uDr),e(pr,h$),e(h$,bDr),e(h$,LEe),e(LEe,vDr),e(h$,FDr),e(pr,TDr),e(pr,Qt),M(p$,Qt,null),e(Qt,MDr),e(Qt,yEe),e(yEe,EDr),e(Qt,CDr),e(Qt,Yc),e(Yc,wDr),e(Yc,xEe),e(xEe,ADr),e(Yc,LDr),e(Yc,see),e(see,yDr),e(Yc,xDr),e(Qt,$Dr),M(aC,Qt,null),e(pr,kDr),e(pr,Vr),M(_$,Vr,null),e(Vr,SDr),e(Vr,$Ee),e($Ee,RDr),e(Vr,PDr),e(Vr,Tn),e(Tn,BDr),e(Tn,kEe),e(kEe,IDr),e(Tn,NDr),e(Tn,SEe),e(SEe,qDr),e(Tn,jDr),e(Tn,REe),e(REe,DDr),e(Tn,GDr),e(Vr,ODr),e(Vr,oe),e(oe,nC),e(nC,PEe),e(PEe,VDr),e(nC,XDr),e(nC,lee),e(lee,zDr),e(nC,WDr),e(oe,QDr),e(oe,sC),e(sC,BEe),e(BEe,HDr),e(sC,UDr),e(sC,iee),e(iee,JDr),e(sC,YDr),e(oe,KDr),e(oe,lC),e(lC,IEe),e(IEe,ZDr),e(lC,eGr),e(lC,dee),e(dee,oGr),e(lC,rGr),e(oe,tGr),e(oe,iC),e(iC,NEe),e(NEe,aGr),e(iC,nGr),e(iC,cee),e(cee,sGr),e(iC,lGr),e(oe,iGr),e(oe,dC),e(dC,qEe),e(qEe,dGr),e(dC,cGr),e(dC,fee),e(fee,fGr),e(dC,mGr),e(oe,gGr),e(oe,cC),e(cC,jEe),e(jEe,hGr),e(cC,pGr),e(cC,mee),e(mee,_Gr),e(cC,uGr),e(oe,bGr),e(oe,fC),e(fC,DEe),e(DEe,vGr),e(fC,FGr),e(fC,gee),e(gee,TGr),e(fC,MGr),e(oe,EGr),e(oe,mC),e(mC,GEe),e(GEe,CGr),e(mC,wGr),e(mC,hee),e(hee,AGr),e(mC,LGr),e(oe,yGr),e(oe,gC),e(gC,OEe),e(OEe,xGr),e(gC,$Gr),e(gC,pee),e(pee,kGr),e(gC,SGr),e(oe,RGr),e(oe,hC),e(hC,VEe),e(VEe,PGr),e(hC,BGr),e(hC,_ee),e(_ee,IGr),e(hC,NGr),e(oe,qGr),e(oe,pC),e(pC,XEe),e(XEe,jGr),e(pC,DGr),e(pC,uee),e(uee,GGr),e(pC,OGr),e(oe,VGr),e(oe,_C),e(_C,zEe),e(zEe,XGr),e(_C,zGr),e(_C,bee),e(bee,WGr),e(_C,QGr),e(oe,HGr),e(oe,uC),e(uC,WEe),e(WEe,UGr),e(uC,JGr),e(uC,vee),e(vee,YGr),e(uC,KGr),e(oe,ZGr),e(oe,bC),e(bC,QEe),e(QEe,eOr),e(bC,oOr),e(bC,Fee),e(Fee,rOr),e(bC,tOr),e(oe,aOr),e(oe,vC),e(vC,HEe),e(HEe,nOr),e(vC,sOr),e(vC,Tee),e(Tee,lOr),e(vC,iOr),e(oe,dOr),e(oe,FC),e(FC,UEe),e(UEe,cOr),e(FC,fOr),e(FC,Mee),e(Mee,mOr),e(FC,gOr),e(oe,hOr),e(oe,TC),e(TC,JEe),e(JEe,pOr),e(TC,_Or),e(TC,Eee),e(Eee,uOr),e(TC,bOr),e(oe,vOr),e(oe,MC),e(MC,YEe),e(YEe,FOr),e(MC,TOr),e(MC,Cee),e(Cee,MOr),e(MC,EOr),e(oe,COr),e(oe,EC),e(EC,KEe),e(KEe,wOr),e(EC,AOr),e(EC,wee),e(wee,LOr),e(EC,yOr),e(oe,xOr),e(oe,CC),e(CC,ZEe),e(ZEe,$Or),e(CC,kOr),e(CC,Aee),e(Aee,SOr),e(CC,ROr),e(oe,POr),e(oe,wC),e(wC,eCe),e(eCe,BOr),e(wC,IOr),e(wC,Lee),e(Lee,NOr),e(wC,qOr),e(oe,jOr),e(oe,AC),e(AC,oCe),e(oCe,DOr),e(AC,GOr),e(AC,yee),e(yee,OOr),e(AC,VOr),e(oe,XOr),e(oe,LC),e(LC,rCe),e(rCe,zOr),e(LC,WOr),e(LC,xee),e(xee,QOr),e(LC,HOr),e(oe,UOr),e(oe,yC),e(yC,tCe),e(tCe,JOr),e(yC,YOr),e(yC,$ee),e($ee,KOr),e(yC,ZOr),e(oe,eVr),e(oe,xC),e(xC,aCe),e(aCe,oVr),e(xC,rVr),e(xC,kee),e(kee,tVr),e(xC,aVr),e(oe,nVr),e(oe,$C),e($C,nCe),e(nCe,sVr),e($C,lVr),e($C,See),e(See,iVr),e($C,dVr),e(oe,cVr),e(oe,kC),e(kC,sCe),e(sCe,fVr),e(kC,mVr),e(kC,Ree),e(Ree,gVr),e(kC,hVr),e(Vr,pVr),M(SC,Vr,null),b(f,oWe,u),b(f,Kc,u),e(Kc,RC),e(RC,lCe),M(u$,lCe,null),e(Kc,_Vr),e(Kc,iCe),e(iCe,uVr),b(f,rWe,u),b(f,_r,u),M(b$,_r,null),e(_r,bVr),e(_r,Zc),e(Zc,vVr),e(Zc,Pee),e(Pee,FVr),e(Zc,TVr),e(Zc,Bee),e(Bee,MVr),e(Zc,EVr),e(_r,CVr),e(_r,v$),e(v$,wVr),e(v$,dCe),e(dCe,AVr),e(v$,LVr),e(_r,yVr),e(_r,Ht),M(F$,Ht,null),e(Ht,xVr),e(Ht,cCe),e(cCe,$Vr),e(Ht,kVr),e(Ht,ef),e(ef,SVr),e(ef,fCe),e(fCe,RVr),e(ef,PVr),e(ef,Iee),e(Iee,BVr),e(ef,IVr),e(Ht,NVr),M(PC,Ht,null),e(_r,qVr),e(_r,Xr),M(T$,Xr,null),e(Xr,jVr),e(Xr,mCe),e(mCe,DVr),e(Xr,GVr),e(Xr,Mn),e(Mn,OVr),e(Mn,gCe),e(gCe,VVr),e(Mn,XVr),e(Mn,hCe),e(hCe,zVr),e(Mn,WVr),e(Mn,pCe),e(pCe,QVr),e(Mn,HVr),e(Xr,UVr),e(Xr,xe),e(xe,BC),e(BC,_Ce),e(_Ce,JVr),e(BC,YVr),e(BC,Nee),e(Nee,KVr),e(BC,ZVr),e(xe,eXr),e(xe,IC),e(IC,uCe),e(uCe,oXr),e(IC,rXr),e(IC,qee),e(qee,tXr),e(IC,aXr),e(xe,nXr),e(xe,NC),e(NC,bCe),e(bCe,sXr),e(NC,lXr),e(NC,jee),e(jee,iXr),e(NC,dXr),e(xe,cXr),e(xe,qC),e(qC,vCe),e(vCe,fXr),e(qC,mXr),e(qC,Dee),e(Dee,gXr),e(qC,hXr),e(xe,pXr),e(xe,jC),e(jC,FCe),e(FCe,_Xr),e(jC,uXr),e(jC,Gee),e(Gee,bXr),e(jC,vXr),e(xe,FXr),e(xe,DC),e(DC,TCe),e(TCe,TXr),e(DC,MXr),e(DC,Oee),e(Oee,EXr),e(DC,CXr),e(xe,wXr),e(xe,GC),e(GC,MCe),e(MCe,AXr),e(GC,LXr),e(GC,Vee),e(Vee,yXr),e(GC,xXr),e(xe,$Xr),e(xe,OC),e(OC,ECe),e(ECe,kXr),e(OC,SXr),e(OC,Xee),e(Xee,RXr),e(OC,PXr),e(xe,BXr),e(xe,VC),e(VC,CCe),e(CCe,IXr),e(VC,NXr),e(VC,zee),e(zee,qXr),e(VC,jXr),e(xe,DXr),e(xe,XC),e(XC,wCe),e(wCe,GXr),e(XC,OXr),e(XC,Wee),e(Wee,VXr),e(XC,XXr),e(Xr,zXr),M(zC,Xr,null),b(f,tWe,u),b(f,of,u),e(of,WC),e(WC,ACe),M(M$,ACe,null),e(of,WXr),e(of,LCe),e(LCe,QXr),b(f,aWe,u),b(f,ur,u),M(E$,ur,null),e(ur,HXr),e(ur,rf),e(rf,UXr),e(rf,Qee),e(Qee,JXr),e(rf,YXr),e(rf,Hee),e(Hee,KXr),e(rf,ZXr),e(ur,ezr),e(ur,C$),e(C$,ozr),e(C$,yCe),e(yCe,rzr),e(C$,tzr),e(ur,azr),e(ur,Ut),M(w$,Ut,null),e(Ut,nzr),e(Ut,xCe),e(xCe,szr),e(Ut,lzr),e(Ut,tf),e(tf,izr),e(tf,$Ce),e($Ce,dzr),e(tf,czr),e(tf,Uee),e(Uee,fzr),e(tf,mzr),e(Ut,gzr),M(QC,Ut,null),e(ur,hzr),e(ur,zr),M(A$,zr,null),e(zr,pzr),e(zr,kCe),e(kCe,_zr),e(zr,uzr),e(zr,En),e(En,bzr),e(En,SCe),e(SCe,vzr),e(En,Fzr),e(En,RCe),e(RCe,Tzr),e(En,Mzr),e(En,PCe),e(PCe,Ezr),e(En,Czr),e(zr,wzr),e(zr,Ee),e(Ee,HC),e(HC,BCe),e(BCe,Azr),e(HC,Lzr),e(HC,Jee),e(Jee,yzr),e(HC,xzr),e(Ee,$zr),e(Ee,UC),e(UC,ICe),e(ICe,kzr),e(UC,Szr),e(UC,Yee),e(Yee,Rzr),e(UC,Pzr),e(Ee,Bzr),e(Ee,JC),e(JC,NCe),e(NCe,Izr),e(JC,Nzr),e(JC,Kee),e(Kee,qzr),e(JC,jzr),e(Ee,Dzr),e(Ee,YC),e(YC,qCe),e(qCe,Gzr),e(YC,Ozr),e(YC,Zee),e(Zee,Vzr),e(YC,Xzr),e(Ee,zzr),e(Ee,KC),e(KC,jCe),e(jCe,Wzr),e(KC,Qzr),e(KC,eoe),e(eoe,Hzr),e(KC,Uzr),e(Ee,Jzr),e(Ee,ZC),e(ZC,DCe),e(DCe,Yzr),e(ZC,Kzr),e(ZC,ooe),e(ooe,Zzr),e(ZC,eWr),e(Ee,oWr),e(Ee,e5),e(e5,GCe),e(GCe,rWr),e(e5,tWr),e(e5,roe),e(roe,aWr),e(e5,nWr),e(Ee,sWr),e(Ee,o5),e(o5,OCe),e(OCe,lWr),e(o5,iWr),e(o5,toe),e(toe,dWr),e(o5,cWr),e(Ee,fWr),e(Ee,r5),e(r5,VCe),e(VCe,mWr),e(r5,gWr),e(r5,aoe),e(aoe,hWr),e(r5,pWr),e(Ee,_Wr),e(Ee,t5),e(t5,XCe),e(XCe,uWr),e(t5,bWr),e(t5,noe),e(noe,vWr),e(t5,FWr),e(Ee,TWr),e(Ee,a5),e(a5,zCe),e(zCe,MWr),e(a5,EWr),e(a5,soe),e(soe,CWr),e(a5,wWr),e(Ee,AWr),e(Ee,n5),e(n5,WCe),e(WCe,LWr),e(n5,yWr),e(n5,loe),e(loe,xWr),e(n5,$Wr),e(Ee,kWr),e(Ee,s5),e(s5,QCe),e(QCe,SWr),e(s5,RWr),e(s5,ioe),e(ioe,PWr),e(s5,BWr),e(zr,IWr),M(l5,zr,null),b(f,nWe,u),b(f,af,u),e(af,i5),e(i5,HCe),M(L$,HCe,null),e(af,NWr),e(af,UCe),e(UCe,qWr),b(f,sWe,u),b(f,br,u),M(y$,br,null),e(br,jWr),e(br,nf),e(nf,DWr),e(nf,doe),e(doe,GWr),e(nf,OWr),e(nf,coe),e(coe,VWr),e(nf,XWr),e(br,zWr),e(br,x$),e(x$,WWr),e(x$,JCe),e(JCe,QWr),e(x$,HWr),e(br,UWr),e(br,Jt),M($$,Jt,null),e(Jt,JWr),e(Jt,YCe),e(YCe,YWr),e(Jt,KWr),e(Jt,sf),e(sf,ZWr),e(sf,KCe),e(KCe,eQr),e(sf,oQr),e(sf,foe),e(foe,rQr),e(sf,tQr),e(Jt,aQr),M(d5,Jt,null),e(br,nQr),e(br,Wr),M(k$,Wr,null),e(Wr,sQr),e(Wr,ZCe),e(ZCe,lQr),e(Wr,iQr),e(Wr,Cn),e(Cn,dQr),e(Cn,e5e),e(e5e,cQr),e(Cn,fQr),e(Cn,o5e),e(o5e,mQr),e(Cn,gQr),e(Cn,r5e),e(r5e,hQr),e(Cn,pQr),e(Wr,_Qr),e(Wr,$e),e($e,c5),e(c5,t5e),e(t5e,uQr),e(c5,bQr),e(c5,moe),e(moe,vQr),e(c5,FQr),e($e,TQr),e($e,f5),e(f5,a5e),e(a5e,MQr),e(f5,EQr),e(f5,goe),e(goe,CQr),e(f5,wQr),e($e,AQr),e($e,m5),e(m5,n5e),e(n5e,LQr),e(m5,yQr),e(m5,hoe),e(hoe,xQr),e(m5,$Qr),e($e,kQr),e($e,g5),e(g5,s5e),e(s5e,SQr),e(g5,RQr),e(g5,poe),e(poe,PQr),e(g5,BQr),e($e,IQr),e($e,h5),e(h5,l5e),e(l5e,NQr),e(h5,qQr),e(h5,_oe),e(_oe,jQr),e(h5,DQr),e($e,GQr),e($e,p5),e(p5,i5e),e(i5e,OQr),e(p5,VQr),e(p5,uoe),e(uoe,XQr),e(p5,zQr),e($e,WQr),e($e,_5),e(_5,d5e),e(d5e,QQr),e(_5,HQr),e(_5,boe),e(boe,UQr),e(_5,JQr),e($e,YQr),e($e,u5),e(u5,c5e),e(c5e,KQr),e(u5,ZQr),e(u5,voe),e(voe,eHr),e(u5,oHr),e($e,rHr),e($e,b5),e(b5,f5e),e(f5e,tHr),e(b5,aHr),e(b5,Foe),e(Foe,nHr),e(b5,sHr),e($e,lHr),e($e,v5),e(v5,m5e),e(m5e,iHr),e(v5,dHr),e(v5,Toe),e(Toe,cHr),e(v5,fHr),e(Wr,mHr),M(F5,Wr,null),b(f,lWe,u),b(f,lf,u),e(lf,T5),e(T5,g5e),M(S$,g5e,null),e(lf,gHr),e(lf,h5e),e(h5e,hHr),b(f,iWe,u),b(f,vr,u),M(R$,vr,null),e(vr,pHr),e(vr,df),e(df,_Hr),e(df,Moe),e(Moe,uHr),e(df,bHr),e(df,Eoe),e(Eoe,vHr),e(df,FHr),e(vr,THr),e(vr,P$),e(P$,MHr),e(P$,p5e),e(p5e,EHr),e(P$,CHr),e(vr,wHr),e(vr,Yt),M(B$,Yt,null),e(Yt,AHr),e(Yt,_5e),e(_5e,LHr),e(Yt,yHr),e(Yt,cf),e(cf,xHr),e(cf,u5e),e(u5e,$Hr),e(cf,kHr),e(cf,Coe),e(Coe,SHr),e(cf,RHr),e(Yt,PHr),M(M5,Yt,null),e(vr,BHr),e(vr,Qr),M(I$,Qr,null),e(Qr,IHr),e(Qr,b5e),e(b5e,NHr),e(Qr,qHr),e(Qr,wn),e(wn,jHr),e(wn,v5e),e(v5e,DHr),e(wn,GHr),e(wn,F5e),e(F5e,OHr),e(wn,VHr),e(wn,T5e),e(T5e,XHr),e(wn,zHr),e(Qr,WHr),e(Qr,ke),e(ke,E5),e(E5,M5e),e(M5e,QHr),e(E5,HHr),e(E5,woe),e(woe,UHr),e(E5,JHr),e(ke,YHr),e(ke,C5),e(C5,E5e),e(E5e,KHr),e(C5,ZHr),e(C5,Aoe),e(Aoe,eUr),e(C5,oUr),e(ke,rUr),e(ke,w5),e(w5,C5e),e(C5e,tUr),e(w5,aUr),e(w5,Loe),e(Loe,nUr),e(w5,sUr),e(ke,lUr),e(ke,A5),e(A5,w5e),e(w5e,iUr),e(A5,dUr),e(A5,yoe),e(yoe,cUr),e(A5,fUr),e(ke,mUr),e(ke,L5),e(L5,A5e),e(A5e,gUr),e(L5,hUr),e(L5,xoe),e(xoe,pUr),e(L5,_Ur),e(ke,uUr),e(ke,y5),e(y5,L5e),e(L5e,bUr),e(y5,vUr),e(y5,$oe),e($oe,FUr),e(y5,TUr),e(ke,MUr),e(ke,x5),e(x5,y5e),e(y5e,EUr),e(x5,CUr),e(x5,koe),e(koe,wUr),e(x5,AUr),e(ke,LUr),e(ke,$5),e($5,x5e),e(x5e,yUr),e($5,xUr),e($5,Soe),e(Soe,$Ur),e($5,kUr),e(ke,SUr),e(ke,k5),e(k5,$5e),e($5e,RUr),e(k5,PUr),e(k5,Roe),e(Roe,BUr),e(k5,IUr),e(ke,NUr),e(ke,S5),e(S5,k5e),e(k5e,qUr),e(S5,jUr),e(S5,Poe),e(Poe,DUr),e(S5,GUr),e(Qr,OUr),M(R5,Qr,null),b(f,dWe,u),b(f,ff,u),e(ff,P5),e(P5,S5e),M(N$,S5e,null),e(ff,VUr),e(ff,R5e),e(R5e,XUr),b(f,cWe,u),b(f,Fr,u),M(q$,Fr,null),e(Fr,zUr),e(Fr,mf),e(mf,WUr),e(mf,Boe),e(Boe,QUr),e(mf,HUr),e(mf,Ioe),e(Ioe,UUr),e(mf,JUr),e(Fr,YUr),e(Fr,j$),e(j$,KUr),e(j$,P5e),e(P5e,ZUr),e(j$,eJr),e(Fr,oJr),e(Fr,Kt),M(D$,Kt,null),e(Kt,rJr),e(Kt,B5e),e(B5e,tJr),e(Kt,aJr),e(Kt,gf),e(gf,nJr),e(gf,I5e),e(I5e,sJr),e(gf,lJr),e(gf,Noe),e(Noe,iJr),e(gf,dJr),e(Kt,cJr),M(B5,Kt,null),e(Fr,fJr),e(Fr,Hr),M(G$,Hr,null),e(Hr,mJr),e(Hr,N5e),e(N5e,gJr),e(Hr,hJr),e(Hr,An),e(An,pJr),e(An,q5e),e(q5e,_Jr),e(An,uJr),e(An,j5e),e(j5e,bJr),e(An,vJr),e(An,D5e),e(D5e,FJr),e(An,TJr),e(Hr,MJr),e(Hr,Se),e(Se,I5),e(I5,G5e),e(G5e,EJr),e(I5,CJr),e(I5,qoe),e(qoe,wJr),e(I5,AJr),e(Se,LJr),e(Se,N5),e(N5,O5e),e(O5e,yJr),e(N5,xJr),e(N5,joe),e(joe,$Jr),e(N5,kJr),e(Se,SJr),e(Se,q5),e(q5,V5e),e(V5e,RJr),e(q5,PJr),e(q5,Doe),e(Doe,BJr),e(q5,IJr),e(Se,NJr),e(Se,j5),e(j5,X5e),e(X5e,qJr),e(j5,jJr),e(j5,Goe),e(Goe,DJr),e(j5,GJr),e(Se,OJr),e(Se,D5),e(D5,z5e),e(z5e,VJr),e(D5,XJr),e(D5,Ooe),e(Ooe,zJr),e(D5,WJr),e(Se,QJr),e(Se,G5),e(G5,W5e),e(W5e,HJr),e(G5,UJr),e(G5,Voe),e(Voe,JJr),e(G5,YJr),e(Se,KJr),e(Se,O5),e(O5,Q5e),e(Q5e,ZJr),e(O5,eYr),e(O5,Xoe),e(Xoe,oYr),e(O5,rYr),e(Se,tYr),e(Se,V5),e(V5,H5e),e(H5e,aYr),e(V5,nYr),e(V5,zoe),e(zoe,sYr),e(V5,lYr),e(Se,iYr),e(Se,X5),e(X5,U5e),e(U5e,dYr),e(X5,cYr),e(X5,Woe),e(Woe,fYr),e(X5,mYr),e(Se,gYr),e(Se,z5),e(z5,J5e),e(J5e,hYr),e(z5,pYr),e(z5,Qoe),e(Qoe,_Yr),e(z5,uYr),e(Hr,bYr),M(W5,Hr,null),b(f,fWe,u),b(f,hf,u),e(hf,Q5),e(Q5,Y5e),M(O$,Y5e,null),e(hf,vYr),e(hf,K5e),e(K5e,FYr),b(f,mWe,u),b(f,Tr,u),M(V$,Tr,null),e(Tr,TYr),e(Tr,pf),e(pf,MYr),e(pf,Hoe),e(Hoe,EYr),e(pf,CYr),e(pf,Uoe),e(Uoe,wYr),e(pf,AYr),e(Tr,LYr),e(Tr,X$),e(X$,yYr),e(X$,Z5e),e(Z5e,xYr),e(X$,$Yr),e(Tr,kYr),e(Tr,Zt),M(z$,Zt,null),e(Zt,SYr),e(Zt,e0e),e(e0e,RYr),e(Zt,PYr),e(Zt,_f),e(_f,BYr),e(_f,o0e),e(o0e,IYr),e(_f,NYr),e(_f,Joe),e(Joe,qYr),e(_f,jYr),e(Zt,DYr),M(H5,Zt,null),e(Tr,GYr),e(Tr,Ur),M(W$,Ur,null),e(Ur,OYr),e(Ur,r0e),e(r0e,VYr),e(Ur,XYr),e(Ur,Ln),e(Ln,zYr),e(Ln,t0e),e(t0e,WYr),e(Ln,QYr),e(Ln,a0e),e(a0e,HYr),e(Ln,UYr),e(Ln,n0e),e(n0e,JYr),e(Ln,YYr),e(Ur,KYr),e(Ur,Re),e(Re,U5),e(U5,s0e),e(s0e,ZYr),e(U5,eKr),e(U5,Yoe),e(Yoe,oKr),e(U5,rKr),e(Re,tKr),e(Re,J5),e(J5,l0e),e(l0e,aKr),e(J5,nKr),e(J5,Koe),e(Koe,sKr),e(J5,lKr),e(Re,iKr),e(Re,Y5),e(Y5,i0e),e(i0e,dKr),e(Y5,cKr),e(Y5,Zoe),e(Zoe,fKr),e(Y5,mKr),e(Re,gKr),e(Re,K5),e(K5,d0e),e(d0e,hKr),e(K5,pKr),e(K5,ere),e(ere,_Kr),e(K5,uKr),e(Re,bKr),e(Re,Z5),e(Z5,c0e),e(c0e,vKr),e(Z5,FKr),e(Z5,ore),e(ore,TKr),e(Z5,MKr),e(Re,EKr),e(Re,e0),e(e0,f0e),e(f0e,CKr),e(e0,wKr),e(e0,rre),e(rre,AKr),e(e0,LKr),e(Re,yKr),e(Re,o0),e(o0,m0e),e(m0e,xKr),e(o0,$Kr),e(o0,tre),e(tre,kKr),e(o0,SKr),e(Re,RKr),e(Re,r0),e(r0,g0e),e(g0e,PKr),e(r0,BKr),e(r0,are),e(are,IKr),e(r0,NKr),e(Re,qKr),e(Re,t0),e(t0,h0e),e(h0e,jKr),e(t0,DKr),e(t0,nre),e(nre,GKr),e(t0,OKr),e(Re,VKr),e(Re,a0),e(a0,p0e),e(p0e,XKr),e(a0,zKr),e(a0,sre),e(sre,WKr),e(a0,QKr),e(Ur,HKr),M(n0,Ur,null),b(f,gWe,u),b(f,uf,u),e(uf,s0),e(s0,_0e),M(Q$,_0e,null),e(uf,UKr),e(uf,u0e),e(u0e,JKr),b(f,hWe,u),b(f,Mr,u),M(H$,Mr,null),e(Mr,YKr),e(Mr,bf),e(bf,KKr),e(bf,lre),e(lre,ZKr),e(bf,eZr),e(bf,ire),e(ire,oZr),e(bf,rZr),e(Mr,tZr),e(Mr,U$),e(U$,aZr),e(U$,b0e),e(b0e,nZr),e(U$,sZr),e(Mr,lZr),e(Mr,ea),M(J$,ea,null),e(ea,iZr),e(ea,v0e),e(v0e,dZr),e(ea,cZr),e(ea,vf),e(vf,fZr),e(vf,F0e),e(F0e,mZr),e(vf,gZr),e(vf,dre),e(dre,hZr),e(vf,pZr),e(ea,_Zr),M(l0,ea,null),e(Mr,uZr),e(Mr,Jr),M(Y$,Jr,null),e(Jr,bZr),e(Jr,T0e),e(T0e,vZr),e(Jr,FZr),e(Jr,yn),e(yn,TZr),e(yn,M0e),e(M0e,MZr),e(yn,EZr),e(yn,E0e),e(E0e,CZr),e(yn,wZr),e(yn,C0e),e(C0e,AZr),e(yn,LZr),e(Jr,yZr),e(Jr,Ve),e(Ve,i0),e(i0,w0e),e(w0e,xZr),e(i0,$Zr),e(i0,cre),e(cre,kZr),e(i0,SZr),e(Ve,RZr),e(Ve,d0),e(d0,A0e),e(A0e,PZr),e(d0,BZr),e(d0,fre),e(fre,IZr),e(d0,NZr),e(Ve,qZr),e(Ve,c0),e(c0,L0e),e(L0e,jZr),e(c0,DZr),e(c0,mre),e(mre,GZr),e(c0,OZr),e(Ve,VZr),e(Ve,f0),e(f0,y0e),e(y0e,XZr),e(f0,zZr),e(f0,gre),e(gre,WZr),e(f0,QZr),e(Ve,HZr),e(Ve,m0),e(m0,x0e),e(x0e,UZr),e(m0,JZr),e(m0,hre),e(hre,YZr),e(m0,KZr),e(Ve,ZZr),e(Ve,g0),e(g0,$0e),e($0e,eet),e(g0,oet),e(g0,pre),e(pre,ret),e(g0,tet),e(Ve,aet),e(Ve,h0),e(h0,k0e),e(k0e,net),e(h0,set),e(h0,_re),e(_re,iet),e(h0,det),e(Ve,cet),e(Ve,p0),e(p0,S0e),e(S0e,fet),e(p0,met),e(p0,ure),e(ure,get),e(p0,het),e(Jr,pet),M(_0,Jr,null),b(f,pWe,u),b(f,Ff,u),e(Ff,u0),e(u0,R0e),M(K$,R0e,null),e(Ff,_et),e(Ff,P0e),e(P0e,uet),b(f,_We,u),b(f,Er,u),M(Z$,Er,null),e(Er,bet),e(Er,Tf),e(Tf,vet),e(Tf,bre),e(bre,Fet),e(Tf,Tet),e(Tf,vre),e(vre,Met),e(Tf,Eet),e(Er,Cet),e(Er,ek),e(ek,wet),e(ek,B0e),e(B0e,Aet),e(ek,Let),e(Er,yet),e(Er,oa),M(ok,oa,null),e(oa,xet),e(oa,I0e),e(I0e,$et),e(oa,ket),e(oa,Mf),e(Mf,Set),e(Mf,N0e),e(N0e,Ret),e(Mf,Pet),e(Mf,Fre),e(Fre,Bet),e(Mf,Iet),e(oa,Net),M(b0,oa,null),e(Er,qet),e(Er,Yr),M(rk,Yr,null),e(Yr,jet),e(Yr,q0e),e(q0e,Det),e(Yr,Get),e(Yr,xn),e(xn,Oet),e(xn,j0e),e(j0e,Vet),e(xn,Xet),e(xn,D0e),e(D0e,zet),e(xn,Wet),e(xn,G0e),e(G0e,Qet),e(xn,Het),e(Yr,Uet),e(Yr,Xe),e(Xe,v0),e(v0,O0e),e(O0e,Jet),e(v0,Yet),e(v0,Tre),e(Tre,Ket),e(v0,Zet),e(Xe,eot),e(Xe,F0),e(F0,V0e),e(V0e,oot),e(F0,rot),e(F0,Mre),e(Mre,tot),e(F0,aot),e(Xe,not),e(Xe,T0),e(T0,X0e),e(X0e,sot),e(T0,lot),e(T0,Ere),e(Ere,iot),e(T0,dot),e(Xe,cot),e(Xe,M0),e(M0,z0e),e(z0e,fot),e(M0,mot),e(M0,Cre),e(Cre,got),e(M0,hot),e(Xe,pot),e(Xe,E0),e(E0,W0e),e(W0e,_ot),e(E0,uot),e(E0,wre),e(wre,bot),e(E0,vot),e(Xe,Fot),e(Xe,C0),e(C0,Q0e),e(Q0e,Tot),e(C0,Mot),e(C0,Are),e(Are,Eot),e(C0,Cot),e(Xe,wot),e(Xe,w0),e(w0,H0e),e(H0e,Aot),e(w0,Lot),e(w0,Lre),e(Lre,yot),e(w0,xot),e(Xe,$ot),e(Xe,A0),e(A0,U0e),e(U0e,kot),e(A0,Sot),e(A0,yre),e(yre,Rot),e(A0,Pot),e(Yr,Bot),M(L0,Yr,null),b(f,uWe,u),b(f,Ef,u),e(Ef,y0),e(y0,J0e),M(tk,J0e,null),e(Ef,Iot),e(Ef,Y0e),e(Y0e,Not),b(f,bWe,u),b(f,Cr,u),M(ak,Cr,null),e(Cr,qot),e(Cr,Cf),e(Cf,jot),e(Cf,xre),e(xre,Dot),e(Cf,Got),e(Cf,$re),e($re,Oot),e(Cf,Vot),e(Cr,Xot),e(Cr,nk),e(nk,zot),e(nk,K0e),e(K0e,Wot),e(nk,Qot),e(Cr,Hot),e(Cr,ra),M(sk,ra,null),e(ra,Uot),e(ra,Z0e),e(Z0e,Jot),e(ra,Yot),e(ra,wf),e(wf,Kot),e(wf,ewe),e(ewe,Zot),e(wf,ert),e(wf,kre),e(kre,ort),e(wf,rrt),e(ra,trt),M(x0,ra,null),e(Cr,art),e(Cr,Kr),M(lk,Kr,null),e(Kr,nrt),e(Kr,owe),e(owe,srt),e(Kr,lrt),e(Kr,$n),e($n,irt),e($n,rwe),e(rwe,drt),e($n,crt),e($n,twe),e(twe,frt),e($n,mrt),e($n,awe),e(awe,grt),e($n,hrt),e(Kr,prt),e(Kr,nwe),e(nwe,$0),e($0,swe),e(swe,_rt),e($0,urt),e($0,Sre),e(Sre,brt),e($0,vrt),e(Kr,Frt),M(k0,Kr,null),b(f,vWe,u),b(f,Af,u),e(Af,S0),e(S0,lwe),M(ik,lwe,null),e(Af,Trt),e(Af,iwe),e(iwe,Mrt),b(f,FWe,u),b(f,wr,u),M(dk,wr,null),e(wr,Ert),e(wr,Lf),e(Lf,Crt),e(Lf,Rre),e(Rre,wrt),e(Lf,Art),e(Lf,Pre),e(Pre,Lrt),e(Lf,yrt),e(wr,xrt),e(wr,ck),e(ck,$rt),e(ck,dwe),e(dwe,krt),e(ck,Srt),e(wr,Rrt),e(wr,ta),M(fk,ta,null),e(ta,Prt),e(ta,cwe),e(cwe,Brt),e(ta,Irt),e(ta,yf),e(yf,Nrt),e(yf,fwe),e(fwe,qrt),e(yf,jrt),e(yf,Bre),e(Bre,Drt),e(yf,Grt),e(ta,Ort),M(R0,ta,null),e(wr,Vrt),e(wr,Zr),M(mk,Zr,null),e(Zr,Xrt),e(Zr,mwe),e(mwe,zrt),e(Zr,Wrt),e(Zr,kn),e(kn,Qrt),e(kn,gwe),e(gwe,Hrt),e(kn,Urt),e(kn,hwe),e(hwe,Jrt),e(kn,Yrt),e(kn,pwe),e(pwe,Krt),e(kn,Zrt),e(Zr,ett),e(Zr,gk),e(gk,P0),e(P0,_we),e(_we,ott),e(P0,rtt),e(P0,Ire),e(Ire,ttt),e(P0,att),e(gk,ntt),e(gk,B0),e(B0,uwe),e(uwe,stt),e(B0,ltt),e(B0,Nre),e(Nre,itt),e(B0,dtt),e(Zr,ctt),M(I0,Zr,null),b(f,TWe,u),b(f,xf,u),e(xf,N0),e(N0,bwe),M(hk,bwe,null),e(xf,ftt),e(xf,vwe),e(vwe,mtt),b(f,MWe,u),b(f,Ar,u),M(pk,Ar,null),e(Ar,gtt),e(Ar,$f),e($f,htt),e($f,qre),e(qre,ptt),e($f,_tt),e($f,jre),e(jre,utt),e($f,btt),e(Ar,vtt),e(Ar,_k),e(_k,Ftt),e(_k,Fwe),e(Fwe,Ttt),e(_k,Mtt),e(Ar,Ett),e(Ar,aa),M(uk,aa,null),e(aa,Ctt),e(aa,Twe),e(Twe,wtt),e(aa,Att),e(aa,kf),e(kf,Ltt),e(kf,Mwe),e(Mwe,ytt),e(kf,xtt),e(kf,Dre),e(Dre,$tt),e(kf,ktt),e(aa,Stt),M(q0,aa,null),e(Ar,Rtt),e(Ar,et),M(bk,et,null),e(et,Ptt),e(et,Ewe),e(Ewe,Btt),e(et,Itt),e(et,Sn),e(Sn,Ntt),e(Sn,Cwe),e(Cwe,qtt),e(Sn,jtt),e(Sn,wwe),e(wwe,Dtt),e(Sn,Gtt),e(Sn,Awe),e(Awe,Ott),e(Sn,Vtt),e(et,Xtt),e(et,Lwe),e(Lwe,j0),e(j0,ywe),e(ywe,ztt),e(j0,Wtt),e(j0,Gre),e(Gre,Qtt),e(j0,Htt),e(et,Utt),M(D0,et,null),EWe=!0},p(f,[u]){const vk={};u&2&&(vk.$$scope={dirty:u,ctx:f}),Df.$set(vk);const xwe={};u&2&&(xwe.$$scope={dirty:u,ctx:f}),Zg.$set(xwe);const $we={};u&2&&($we.$$scope={dirty:u,ctx:f}),Bh.$set($we);const kwe={};u&2&&(kwe.$$scope={dirty:u,ctx:f}),vp.$set(kwe);const Fk={};u&2&&(Fk.$$scope={dirty:u,ctx:f}),Fp.$set(Fk);const Swe={};u&2&&(Swe.$$scope={dirty:u,ctx:f}),Op.$set(Swe);const Rn={};u&2&&(Rn.$$scope={dirty:u,ctx:f}),Vp.$set(Rn);const Rwe={};u&2&&(Rwe.$$scope={dirty:u,ctx:f}),Wp.$set(Rwe);const Pwe={};u&2&&(Pwe.$$scope={dirty:u,ctx:f}),Yu.$set(Pwe);const Bwe={};u&2&&(Bwe.$$scope={dirty:u,ctx:f}),Zu.$set(Bwe);const Tk={};u&2&&(Tk.$$scope={dirty:u,ctx:f}),W1.$set(Tk);const Iwe={};u&2&&(Iwe.$$scope={dirty:u,ctx:f}),H1.$set(Iwe);const Mk={};u&2&&(Mk.$$scope={dirty:u,ctx:f}),I2.$set(Mk);const Nwe={};u&2&&(Nwe.$$scope={dirty:u,ctx:f}),q2.$set(Nwe);const Ek={};u&2&&(Ek.$$scope={dirty:u,ctx:f}),Cb.$set(Ek);const qwe={};u&2&&(qwe.$$scope={dirty:u,ctx:f}),Ab.$set(qwe);const jwe={};u&2&&(jwe.$$scope={dirty:u,ctx:f}),Wb.$set(jwe);const Dwe={};u&2&&(Dwe.$$scope={dirty:u,ctx:f}),Hb.$set(Dwe);const Sf={};u&2&&(Sf.$$scope={dirty:u,ctx:f}),Wv.$set(Sf);const Gwe={};u&2&&(Gwe.$$scope={dirty:u,ctx:f}),Hv.$set(Gwe);const Owe={};u&2&&(Owe.$$scope={dirty:u,ctx:f}),A3.$set(Owe);const Vwe={};u&2&&(Vwe.$$scope={dirty:u,ctx:f}),y3.$set(Vwe);const Ck={};u&2&&(Ck.$$scope={dirty:u,ctx:f}),I3.$set(Ck);const Xwe={};u&2&&(Xwe.$$scope={dirty:u,ctx:f}),q3.$set(Xwe);const zwe={};u&2&&(zwe.$$scope={dirty:u,ctx:f}),MF.$set(zwe);const Wwe={};u&2&&(Wwe.$$scope={dirty:u,ctx:f}),CF.$set(Wwe);const nt={};u&2&&(nt.$$scope={dirty:u,ctx:f}),hT.$set(nt);const wk={};u&2&&(wk.$$scope={dirty:u,ctx:f}),_T.$set(wk);const Qwe={};u&2&&(Qwe.$$scope={dirty:u,ctx:f}),vT.$set(Qwe);const Ak={};u&2&&(Ak.$$scope={dirty:u,ctx:f}),TT.$set(Ak);const Hwe={};u&2&&(Hwe.$$scope={dirty:u,ctx:f}),IT.$set(Hwe);const st={};u&2&&(st.$$scope={dirty:u,ctx:f}),qT.$set(st);const Uwe={};u&2&&(Uwe.$$scope={dirty:u,ctx:f}),GT.$set(Uwe);const Rf={};u&2&&(Rf.$$scope={dirty:u,ctx:f}),VT.$set(Rf);const Jwe={};u&2&&(Jwe.$$scope={dirty:u,ctx:f}),WT.$set(Jwe);const Ywe={};u&2&&(Ywe.$$scope={dirty:u,ctx:f}),HT.$set(Ywe);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),n7.$set(L);const G0={};u&2&&(G0.$$scope={dirty:u,ctx:f}),l7.$set(G0);const Kwe={};u&2&&(Kwe.$$scope={dirty:u,ctx:f}),h7.$set(Kwe);const Zwe={};u&2&&(Zwe.$$scope={dirty:u,ctx:f}),_7.$set(Zwe);const O0={};u&2&&(O0.$$scope={dirty:u,ctx:f}),y7.$set(O0);const eAe={};u&2&&(eAe.$$scope={dirty:u,ctx:f}),$7.$set(eAe);const oAe={};u&2&&(oAe.$$scope={dirty:u,ctx:f}),P7.$set(oAe);const V0={};u&2&&(V0.$$scope={dirty:u,ctx:f}),I7.$set(V0);const rAe={};u&2&&(rAe.$$scope={dirty:u,ctx:f}),V7.$set(rAe);const tAe={};u&2&&(tAe.$$scope={dirty:u,ctx:f}),z7.$set(tAe);const X0={};u&2&&(X0.$$scope={dirty:u,ctx:f}),J7.$set(X0);const aAe={};u&2&&(aAe.$$scope={dirty:u,ctx:f}),K7.$set(aAe);const nAe={};u&2&&(nAe.$$scope={dirty:u,ctx:f}),r8.$set(nAe);const z0={};u&2&&(z0.$$scope={dirty:u,ctx:f}),a8.$set(z0);const sAe={};u&2&&(sAe.$$scope={dirty:u,ctx:f}),l8.$set(sAe);const lAe={};u&2&&(lAe.$$scope={dirty:u,ctx:f}),d8.$set(lAe);const W0={};u&2&&(W0.$$scope={dirty:u,ctx:f}),_8.$set(W0);const iAe={};u&2&&(iAe.$$scope={dirty:u,ctx:f}),b8.$set(iAe);const dAe={};u&2&&(dAe.$$scope={dirty:u,ctx:f}),T8.$set(dAe);const Q0={};u&2&&(Q0.$$scope={dirty:u,ctx:f}),E8.$set(Q0);const cAe={};u&2&&(cAe.$$scope={dirty:u,ctx:f}),v9.$set(cAe);const fAe={};u&2&&(fAe.$$scope={dirty:u,ctx:f}),T9.$set(fAe);const H0={};u&2&&(H0.$$scope={dirty:u,ctx:f}),z9.$set(H0);const mAe={};u&2&&(mAe.$$scope={dirty:u,ctx:f}),Q9.$set(mAe);const gAe={};u&2&&(gAe.$$scope={dirty:u,ctx:f}),lM.$set(gAe);const U0={};u&2&&(U0.$$scope={dirty:u,ctx:f}),dM.$set(U0);const hAe={};u&2&&(hAe.$$scope={dirty:u,ctx:f}),_M.$set(hAe);const pAe={};u&2&&(pAe.$$scope={dirty:u,ctx:f}),bM.$set(pAe);const J0={};u&2&&(J0.$$scope={dirty:u,ctx:f}),jM.$set(J0);const _Ae={};u&2&&(_Ae.$$scope={dirty:u,ctx:f}),GM.$set(_Ae);const uAe={};u&2&&(uAe.$$scope={dirty:u,ctx:f}),KM.$set(uAe);const Y0={};u&2&&(Y0.$$scope={dirty:u,ctx:f}),e4.$set(Y0);const bAe={};u&2&&(bAe.$$scope={dirty:u,ctx:f}),L4.$set(bAe);const vAe={};u&2&&(vAe.$$scope={dirty:u,ctx:f}),x4.$set(vAe);const K0={};u&2&&(K0.$$scope={dirty:u,ctx:f}),Q4.$set(K0);const FAe={};u&2&&(FAe.$$scope={dirty:u,ctx:f}),U4.$set(FAe);const TAe={};u&2&&(TAe.$$scope={dirty:u,ctx:f}),K4.$set(TAe);const Z0={};u&2&&(Z0.$$scope={dirty:u,ctx:f}),eE.$set(Z0);const MAe={};u&2&&(MAe.$$scope={dirty:u,ctx:f}),rE.$set(MAe);const EAe={};u&2&&(EAe.$$scope={dirty:u,ctx:f}),aE.$set(EAe);const ew={};u&2&&(ew.$$scope={dirty:u,ctx:f}),wE.$set(ew);const CAe={};u&2&&(CAe.$$scope={dirty:u,ctx:f}),LE.$set(CAe);const wAe={};u&2&&(wAe.$$scope={dirty:u,ctx:f}),HE.$set(wAe);const ow={};u&2&&(ow.$$scope={dirty:u,ctx:f}),JE.$set(ow);const AAe={};u&2&&(AAe.$$scope={dirty:u,ctx:f}),KE.$set(AAe);const LAe={};u&2&&(LAe.$$scope={dirty:u,ctx:f}),eC.$set(LAe);const rw={};u&2&&(rw.$$scope={dirty:u,ctx:f}),rC.$set(rw);const yAe={};u&2&&(yAe.$$scope={dirty:u,ctx:f}),aC.$set(yAe);const xAe={};u&2&&(xAe.$$scope={dirty:u,ctx:f}),SC.$set(xAe);const tw={};u&2&&(tw.$$scope={dirty:u,ctx:f}),PC.$set(tw);const $Ae={};u&2&&($Ae.$$scope={dirty:u,ctx:f}),zC.$set($Ae);const kAe={};u&2&&(kAe.$$scope={dirty:u,ctx:f}),QC.$set(kAe);const aw={};u&2&&(aw.$$scope={dirty:u,ctx:f}),l5.$set(aw);const SAe={};u&2&&(SAe.$$scope={dirty:u,ctx:f}),d5.$set(SAe);const RAe={};u&2&&(RAe.$$scope={dirty:u,ctx:f}),F5.$set(RAe);const nw={};u&2&&(nw.$$scope={dirty:u,ctx:f}),M5.$set(nw);const PAe={};u&2&&(PAe.$$scope={dirty:u,ctx:f}),R5.$set(PAe);const BAe={};u&2&&(BAe.$$scope={dirty:u,ctx:f}),B5.$set(BAe);const sw={};u&2&&(sw.$$scope={dirty:u,ctx:f}),W5.$set(sw);const IAe={};u&2&&(IAe.$$scope={dirty:u,ctx:f}),H5.$set(IAe);const NAe={};u&2&&(NAe.$$scope={dirty:u,ctx:f}),n0.$set(NAe);const lw={};u&2&&(lw.$$scope={dirty:u,ctx:f}),l0.$set(lw);const qAe={};u&2&&(qAe.$$scope={dirty:u,ctx:f}),_0.$set(qAe);const jAe={};u&2&&(jAe.$$scope={dirty:u,ctx:f}),b0.$set(jAe);const iw={};u&2&&(iw.$$scope={dirty:u,ctx:f}),L0.$set(iw);const DAe={};u&2&&(DAe.$$scope={dirty:u,ctx:f}),x0.$set(DAe);const GAe={};u&2&&(GAe.$$scope={dirty:u,ctx:f}),k0.$set(GAe);const dw={};u&2&&(dw.$$scope={dirty:u,ctx:f}),R0.$set(dw);const OAe={};u&2&&(OAe.$$scope={dirty:u,ctx:f}),I0.$set(OAe);const VAe={};u&2&&(VAe.$$scope={dirty:u,ctx:f}),q0.$set(VAe);const cw={};u&2&&(cw.$$scope={dirty:u,ctx:f}),D0.$set(cw)},i(f){EWe||(E(d.$$.fragment,f),E(Sa.$$.fragment,f),E(d6.$$.fragment,f),E(c6.$$.fragment,f),E(Df.$$.fragment,f),E(f6.$$.fragment,f),E(m6.$$.fragment,f),E(p6.$$.fragment,f),E(Zg.$$.fragment,f),E(_6.$$.fragment,f),E(u6.$$.fragment,f),E(b6.$$.fragment,f),E(T6.$$.fragment,f),E(Bh.$$.fragment,f),E(M6.$$.fragment,f),E(E6.$$.fragment,f),E(C6.$$.fragment,f),E(L6.$$.fragment,f),E(vp.$$.fragment,f),E(Fp.$$.fragment,f),E(y6.$$.fragment,f),E(x6.$$.fragment,f),E($6.$$.fragment,f),E(R6.$$.fragment,f),E(Op.$$.fragment,f),E(Vp.$$.fragment,f),E(P6.$$.fragment,f),E(B6.$$.fragment,f),E(I6.$$.fragment,f),E(q6.$$.fragment,f),E(Wp.$$.fragment,f),E(j6.$$.fragment,f),E(Yu.$$.fragment,f),E(D6.$$.fragment,f),E(G6.$$.fragment,f),E(V6.$$.fragment,f),E(Zu.$$.fragment,f),E(X6.$$.fragment,f),E(W1.$$.fragment,f),E(z6.$$.fragment,f),E(W6.$$.fragment,f),E(H6.$$.fragment,f),E(H1.$$.fragment,f),E(U6.$$.fragment,f),E(I2.$$.fragment,f),E(J6.$$.fragment,f),E(Y6.$$.fragment,f),E(Z6.$$.fragment,f),E(q2.$$.fragment,f),E(eL.$$.fragment,f),E(Cb.$$.fragment,f),E(oL.$$.fragment,f),E(rL.$$.fragment,f),E(aL.$$.fragment,f),E(Ab.$$.fragment,f),E(nL.$$.fragment,f),E(Wb.$$.fragment,f),E(sL.$$.fragment,f),E(lL.$$.fragment,f),E(dL.$$.fragment,f),E(Hb.$$.fragment,f),E(cL.$$.fragment,f),E(Wv.$$.fragment,f),E(fL.$$.fragment,f),E(mL.$$.fragment,f),E(hL.$$.fragment,f),E(Hv.$$.fragment,f),E(pL.$$.fragment,f),E(A3.$$.fragment,f),E(_L.$$.fragment,f),E(uL.$$.fragment,f),E(vL.$$.fragment,f),E(y3.$$.fragment,f),E(FL.$$.fragment,f),E(I3.$$.fragment,f),E(TL.$$.fragment,f),E(ML.$$.fragment,f),E(CL.$$.fragment,f),E(q3.$$.fragment,f),E(wL.$$.fragment,f),E(MF.$$.fragment,f),E(AL.$$.fragment,f),E(LL.$$.fragment,f),E(xL.$$.fragment,f),E(CF.$$.fragment,f),E($L.$$.fragment,f),E(hT.$$.fragment,f),E(kL.$$.fragment,f),E(SL.$$.fragment,f),E(PL.$$.fragment,f),E(_T.$$.fragment,f),E(BL.$$.fragment,f),E(vT.$$.fragment,f),E(IL.$$.fragment,f),E(NL.$$.fragment,f),E(jL.$$.fragment,f),E(TT.$$.fragment,f),E(DL.$$.fragment,f),E(IT.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(XL.$$.fragment,f),E(qT.$$.fragment,f),E(zL.$$.fragment,f),E(GT.$$.fragment,f),E(WL.$$.fragment,f),E(QL.$$.fragment,f),E(UL.$$.fragment,f),E(VT.$$.fragment,f),E(JL.$$.fragment,f),E(WT.$$.fragment,f),E(YL.$$.fragment,f),E(KL.$$.fragment,f),E(ey.$$.fragment,f),E(HT.$$.fragment,f),E(oy.$$.fragment,f),E(n7.$$.fragment,f),E(ry.$$.fragment,f),E(ty.$$.fragment,f),E(ny.$$.fragment,f),E(l7.$$.fragment,f),E(sy.$$.fragment,f),E(h7.$$.fragment,f),E(ly.$$.fragment,f),E(iy.$$.fragment,f),E(cy.$$.fragment,f),E(_7.$$.fragment,f),E(fy.$$.fragment,f),E(y7.$$.fragment,f),E(my.$$.fragment,f),E(gy.$$.fragment,f),E(py.$$.fragment,f),E($7.$$.fragment,f),E(_y.$$.fragment,f),E(P7.$$.fragment,f),E(by.$$.fragment,f),E(vy.$$.fragment,f),E(Ty.$$.fragment,f),E(I7.$$.fragment,f),E(My.$$.fragment,f),E(V7.$$.fragment,f),E(Ey.$$.fragment,f),E(Cy.$$.fragment,f),E(Ay.$$.fragment,f),E(z7.$$.fragment,f),E(Ly.$$.fragment,f),E(J7.$$.fragment,f),E(yy.$$.fragment,f),E(xy.$$.fragment,f),E(ky.$$.fragment,f),E(K7.$$.fragment,f),E(Sy.$$.fragment,f),E(r8.$$.fragment,f),E(Py.$$.fragment,f),E(By.$$.fragment,f),E(Ny.$$.fragment,f),E(a8.$$.fragment,f),E(qy.$$.fragment,f),E(l8.$$.fragment,f),E(jy.$$.fragment,f),E(Dy.$$.fragment,f),E(Oy.$$.fragment,f),E(d8.$$.fragment,f),E(Vy.$$.fragment,f),E(_8.$$.fragment,f),E(Xy.$$.fragment,f),E(zy.$$.fragment,f),E(Qy.$$.fragment,f),E(b8.$$.fragment,f),E(Hy.$$.fragment,f),E(T8.$$.fragment,f),E(Uy.$$.fragment,f),E(Jy.$$.fragment,f),E(Ky.$$.fragment,f),E(E8.$$.fragment,f),E(Zy.$$.fragment,f),E(v9.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(T9.$$.fragment,f),E(ax.$$.fragment,f),E(z9.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(Q9.$$.fragment,f),E(dx.$$.fragment,f),E(lM.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E(dM.$$.fragment,f),E(hx.$$.fragment,f),E(_M.$$.fragment,f),E(px.$$.fragment,f),E(_x.$$.fragment,f),E(bx.$$.fragment,f),E(bM.$$.fragment,f),E(vx.$$.fragment,f),E(jM.$$.fragment,f),E(Fx.$$.fragment,f),E(Tx.$$.fragment,f),E(Ex.$$.fragment,f),E(GM.$$.fragment,f),E(Cx.$$.fragment,f),E(KM.$$.fragment,f),E(wx.$$.fragment,f),E(Ax.$$.fragment,f),E(yx.$$.fragment,f),E(e4.$$.fragment,f),E(xx.$$.fragment,f),E(L4.$$.fragment,f),E($x.$$.fragment,f),E(kx.$$.fragment,f),E(Rx.$$.fragment,f),E(x4.$$.fragment,f),E(Px.$$.fragment,f),E(Q4.$$.fragment,f),E(Bx.$$.fragment,f),E(Ix.$$.fragment,f),E(qx.$$.fragment,f),E(U4.$$.fragment,f),E(jx.$$.fragment,f),E(K4.$$.fragment,f),E(Gx.$$.fragment,f),E(Ox.$$.fragment,f),E(Xx.$$.fragment,f),E(eE.$$.fragment,f),E(zx.$$.fragment,f),E(rE.$$.fragment,f),E(Wx.$$.fragment,f),E(Qx.$$.fragment,f),E(Ux.$$.fragment,f),E(aE.$$.fragment,f),E(Jx.$$.fragment,f),E(wE.$$.fragment,f),E(Yx.$$.fragment,f),E(Kx.$$.fragment,f),E(e$.$$.fragment,f),E(LE.$$.fragment,f),E(o$.$$.fragment,f),E(HE.$$.fragment,f),E(r$.$$.fragment,f),E(t$.$$.fragment,f),E(n$.$$.fragment,f),E(JE.$$.fragment,f),E(s$.$$.fragment,f),E(KE.$$.fragment,f),E(l$.$$.fragment,f),E(i$.$$.fragment,f),E(c$.$$.fragment,f),E(eC.$$.fragment,f),E(f$.$$.fragment,f),E(rC.$$.fragment,f),E(m$.$$.fragment,f),E(g$.$$.fragment,f),E(p$.$$.fragment,f),E(aC.$$.fragment,f),E(_$.$$.fragment,f),E(SC.$$.fragment,f),E(u$.$$.fragment,f),E(b$.$$.fragment,f),E(F$.$$.fragment,f),E(PC.$$.fragment,f),E(T$.$$.fragment,f),E(zC.$$.fragment,f),E(M$.$$.fragment,f),E(E$.$$.fragment,f),E(w$.$$.fragment,f),E(QC.$$.fragment,f),E(A$.$$.fragment,f),E(l5.$$.fragment,f),E(L$.$$.fragment,f),E(y$.$$.fragment,f),E($$.$$.fragment,f),E(d5.$$.fragment,f),E(k$.$$.fragment,f),E(F5.$$.fragment,f),E(S$.$$.fragment,f),E(R$.$$.fragment,f),E(B$.$$.fragment,f),E(M5.$$.fragment,f),E(I$.$$.fragment,f),E(R5.$$.fragment,f),E(N$.$$.fragment,f),E(q$.$$.fragment,f),E(D$.$$.fragment,f),E(B5.$$.fragment,f),E(G$.$$.fragment,f),E(W5.$$.fragment,f),E(O$.$$.fragment,f),E(V$.$$.fragment,f),E(z$.$$.fragment,f),E(H5.$$.fragment,f),E(W$.$$.fragment,f),E(n0.$$.fragment,f),E(Q$.$$.fragment,f),E(H$.$$.fragment,f),E(J$.$$.fragment,f),E(l0.$$.fragment,f),E(Y$.$$.fragment,f),E(_0.$$.fragment,f),E(K$.$$.fragment,f),E(Z$.$$.fragment,f),E(ok.$$.fragment,f),E(b0.$$.fragment,f),E(rk.$$.fragment,f),E(L0.$$.fragment,f),E(tk.$$.fragment,f),E(ak.$$.fragment,f),E(sk.$$.fragment,f),E(x0.$$.fragment,f),E(lk.$$.fragment,f),E(k0.$$.fragment,f),E(ik.$$.fragment,f),E(dk.$$.fragment,f),E(fk.$$.fragment,f),E(R0.$$.fragment,f),E(mk.$$.fragment,f),E(I0.$$.fragment,f),E(hk.$$.fragment,f),E(pk.$$.fragment,f),E(uk.$$.fragment,f),E(q0.$$.fragment,f),E(bk.$$.fragment,f),E(D0.$$.fragment,f),EWe=!0)},o(f){C(d.$$.fragment,f),C(Sa.$$.fragment,f),C(d6.$$.fragment,f),C(c6.$$.fragment,f),C(Df.$$.fragment,f),C(f6.$$.fragment,f),C(m6.$$.fragment,f),C(p6.$$.fragment,f),C(Zg.$$.fragment,f),C(_6.$$.fragment,f),C(u6.$$.fragment,f),C(b6.$$.fragment,f),C(T6.$$.fragment,f),C(Bh.$$.fragment,f),C(M6.$$.fragment,f),C(E6.$$.fragment,f),C(C6.$$.fragment,f),C(L6.$$.fragment,f),C(vp.$$.fragment,f),C(Fp.$$.fragment,f),C(y6.$$.fragment,f),C(x6.$$.fragment,f),C($6.$$.fragment,f),C(R6.$$.fragment,f),C(Op.$$.fragment,f),C(Vp.$$.fragment,f),C(P6.$$.fragment,f),C(B6.$$.fragment,f),C(I6.$$.fragment,f),C(q6.$$.fragment,f),C(Wp.$$.fragment,f),C(j6.$$.fragment,f),C(Yu.$$.fragment,f),C(D6.$$.fragment,f),C(G6.$$.fragment,f),C(V6.$$.fragment,f),C(Zu.$$.fragment,f),C(X6.$$.fragment,f),C(W1.$$.fragment,f),C(z6.$$.fragment,f),C(W6.$$.fragment,f),C(H6.$$.fragment,f),C(H1.$$.fragment,f),C(U6.$$.fragment,f),C(I2.$$.fragment,f),C(J6.$$.fragment,f),C(Y6.$$.fragment,f),C(Z6.$$.fragment,f),C(q2.$$.fragment,f),C(eL.$$.fragment,f),C(Cb.$$.fragment,f),C(oL.$$.fragment,f),C(rL.$$.fragment,f),C(aL.$$.fragment,f),C(Ab.$$.fragment,f),C(nL.$$.fragment,f),C(Wb.$$.fragment,f),C(sL.$$.fragment,f),C(lL.$$.fragment,f),C(dL.$$.fragment,f),C(Hb.$$.fragment,f),C(cL.$$.fragment,f),C(Wv.$$.fragment,f),C(fL.$$.fragment,f),C(mL.$$.fragment,f),C(hL.$$.fragment,f),C(Hv.$$.fragment,f),C(pL.$$.fragment,f),C(A3.$$.fragment,f),C(_L.$$.fragment,f),C(uL.$$.fragment,f),C(vL.$$.fragment,f),C(y3.$$.fragment,f),C(FL.$$.fragment,f),C(I3.$$.fragment,f),C(TL.$$.fragment,f),C(ML.$$.fragment,f),C(CL.$$.fragment,f),C(q3.$$.fragment,f),C(wL.$$.fragment,f),C(MF.$$.fragment,f),C(AL.$$.fragment,f),C(LL.$$.fragment,f),C(xL.$$.fragment,f),C(CF.$$.fragment,f),C($L.$$.fragment,f),C(hT.$$.fragment,f),C(kL.$$.fragment,f),C(SL.$$.fragment,f),C(PL.$$.fragment,f),C(_T.$$.fragment,f),C(BL.$$.fragment,f),C(vT.$$.fragment,f),C(IL.$$.fragment,f),C(NL.$$.fragment,f),C(jL.$$.fragment,f),C(TT.$$.fragment,f),C(DL.$$.fragment,f),C(IT.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(XL.$$.fragment,f),C(qT.$$.fragment,f),C(zL.$$.fragment,f),C(GT.$$.fragment,f),C(WL.$$.fragment,f),C(QL.$$.fragment,f),C(UL.$$.fragment,f),C(VT.$$.fragment,f),C(JL.$$.fragment,f),C(WT.$$.fragment,f),C(YL.$$.fragment,f),C(KL.$$.fragment,f),C(ey.$$.fragment,f),C(HT.$$.fragment,f),C(oy.$$.fragment,f),C(n7.$$.fragment,f),C(ry.$$.fragment,f),C(ty.$$.fragment,f),C(ny.$$.fragment,f),C(l7.$$.fragment,f),C(sy.$$.fragment,f),C(h7.$$.fragment,f),C(ly.$$.fragment,f),C(iy.$$.fragment,f),C(cy.$$.fragment,f),C(_7.$$.fragment,f),C(fy.$$.fragment,f),C(y7.$$.fragment,f),C(my.$$.fragment,f),C(gy.$$.fragment,f),C(py.$$.fragment,f),C($7.$$.fragment,f),C(_y.$$.fragment,f),C(P7.$$.fragment,f),C(by.$$.fragment,f),C(vy.$$.fragment,f),C(Ty.$$.fragment,f),C(I7.$$.fragment,f),C(My.$$.fragment,f),C(V7.$$.fragment,f),C(Ey.$$.fragment,f),C(Cy.$$.fragment,f),C(Ay.$$.fragment,f),C(z7.$$.fragment,f),C(Ly.$$.fragment,f),C(J7.$$.fragment,f),C(yy.$$.fragment,f),C(xy.$$.fragment,f),C(ky.$$.fragment,f),C(K7.$$.fragment,f),C(Sy.$$.fragment,f),C(r8.$$.fragment,f),C(Py.$$.fragment,f),C(By.$$.fragment,f),C(Ny.$$.fragment,f),C(a8.$$.fragment,f),C(qy.$$.fragment,f),C(l8.$$.fragment,f),C(jy.$$.fragment,f),C(Dy.$$.fragment,f),C(Oy.$$.fragment,f),C(d8.$$.fragment,f),C(Vy.$$.fragment,f),C(_8.$$.fragment,f),C(Xy.$$.fragment,f),C(zy.$$.fragment,f),C(Qy.$$.fragment,f),C(b8.$$.fragment,f),C(Hy.$$.fragment,f),C(T8.$$.fragment,f),C(Uy.$$.fragment,f),C(Jy.$$.fragment,f),C(Ky.$$.fragment,f),C(E8.$$.fragment,f),C(Zy.$$.fragment,f),C(v9.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(T9.$$.fragment,f),C(ax.$$.fragment,f),C(z9.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(Q9.$$.fragment,f),C(dx.$$.fragment,f),C(lM.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C(dM.$$.fragment,f),C(hx.$$.fragment,f),C(_M.$$.fragment,f),C(px.$$.fragment,f),C(_x.$$.fragment,f),C(bx.$$.fragment,f),C(bM.$$.fragment,f),C(vx.$$.fragment,f),C(jM.$$.fragment,f),C(Fx.$$.fragment,f),C(Tx.$$.fragment,f),C(Ex.$$.fragment,f),C(GM.$$.fragment,f),C(Cx.$$.fragment,f),C(KM.$$.fragment,f),C(wx.$$.fragment,f),C(Ax.$$.fragment,f),C(yx.$$.fragment,f),C(e4.$$.fragment,f),C(xx.$$.fragment,f),C(L4.$$.fragment,f),C($x.$$.fragment,f),C(kx.$$.fragment,f),C(Rx.$$.fragment,f),C(x4.$$.fragment,f),C(Px.$$.fragment,f),C(Q4.$$.fragment,f),C(Bx.$$.fragment,f),C(Ix.$$.fragment,f),C(qx.$$.fragment,f),C(U4.$$.fragment,f),C(jx.$$.fragment,f),C(K4.$$.fragment,f),C(Gx.$$.fragment,f),C(Ox.$$.fragment,f),C(Xx.$$.fragment,f),C(eE.$$.fragment,f),C(zx.$$.fragment,f),C(rE.$$.fragment,f),C(Wx.$$.fragment,f),C(Qx.$$.fragment,f),C(Ux.$$.fragment,f),C(aE.$$.fragment,f),C(Jx.$$.fragment,f),C(wE.$$.fragment,f),C(Yx.$$.fragment,f),C(Kx.$$.fragment,f),C(e$.$$.fragment,f),C(LE.$$.fragment,f),C(o$.$$.fragment,f),C(HE.$$.fragment,f),C(r$.$$.fragment,f),C(t$.$$.fragment,f),C(n$.$$.fragment,f),C(JE.$$.fragment,f),C(s$.$$.fragment,f),C(KE.$$.fragment,f),C(l$.$$.fragment,f),C(i$.$$.fragment,f),C(c$.$$.fragment,f),C(eC.$$.fragment,f),C(f$.$$.fragment,f),C(rC.$$.fragment,f),C(m$.$$.fragment,f),C(g$.$$.fragment,f),C(p$.$$.fragment,f),C(aC.$$.fragment,f),C(_$.$$.fragment,f),C(SC.$$.fragment,f),C(u$.$$.fragment,f),C(b$.$$.fragment,f),C(F$.$$.fragment,f),C(PC.$$.fragment,f),C(T$.$$.fragment,f),C(zC.$$.fragment,f),C(M$.$$.fragment,f),C(E$.$$.fragment,f),C(w$.$$.fragment,f),C(QC.$$.fragment,f),C(A$.$$.fragment,f),C(l5.$$.fragment,f),C(L$.$$.fragment,f),C(y$.$$.fragment,f),C($$.$$.fragment,f),C(d5.$$.fragment,f),C(k$.$$.fragment,f),C(F5.$$.fragment,f),C(S$.$$.fragment,f),C(R$.$$.fragment,f),C(B$.$$.fragment,f),C(M5.$$.fragment,f),C(I$.$$.fragment,f),C(R5.$$.fragment,f),C(N$.$$.fragment,f),C(q$.$$.fragment,f),C(D$.$$.fragment,f),C(B5.$$.fragment,f),C(G$.$$.fragment,f),C(W5.$$.fragment,f),C(O$.$$.fragment,f),C(V$.$$.fragment,f),C(z$.$$.fragment,f),C(H5.$$.fragment,f),C(W$.$$.fragment,f),C(n0.$$.fragment,f),C(Q$.$$.fragment,f),C(H$.$$.fragment,f),C(J$.$$.fragment,f),C(l0.$$.fragment,f),C(Y$.$$.fragment,f),C(_0.$$.fragment,f),C(K$.$$.fragment,f),C(Z$.$$.fragment,f),C(ok.$$.fragment,f),C(b0.$$.fragment,f),C(rk.$$.fragment,f),C(L0.$$.fragment,f),C(tk.$$.fragment,f),C(ak.$$.fragment,f),C(sk.$$.fragment,f),C(x0.$$.fragment,f),C(lk.$$.fragment,f),C(k0.$$.fragment,f),C(ik.$$.fragment,f),C(dk.$$.fragment,f),C(fk.$$.fragment,f),C(R0.$$.fragment,f),C(mk.$$.fragment,f),C(I0.$$.fragment,f),C(hk.$$.fragment,f),C(pk.$$.fragment,f),C(uk.$$.fragment,f),C(q0.$$.fragment,f),C(bk.$$.fragment,f),C(D0.$$.fragment,f),EWe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(Bf),f&&t(lt),f&&t(Oe),f&&t(Qe),f&&t(Nf),w(Sa,f),f&&t(He),f&&t(Ae),f&&t(wo),f&&t(Ra),f&&t(bXe),f&&t(Bi),w(d6),f&&t(vXe),f&&t(qn),f&&t(FXe),w(c6,f),f&&t(TXe),f&&t(WS),f&&t(MXe),w(Df,f),f&&t(EXe),f&&t(Ii),w(f6),f&&t(CXe),f&&t(Ao),w(m6),w(p6),w(Zg),w(_6),f&&t(wXe),f&&t(qi),w(u6),f&&t(AXe),f&&t(Lo),w(b6),w(T6),w(Bh),w(M6),f&&t(LXe),f&&t(ji),w(E6),f&&t(yXe),f&&t(yo),w(C6),w(L6),w(vp),w(Fp),w(y6),f&&t(xXe),f&&t(Di),w(x6),f&&t($Xe),f&&t(xo),w($6),w(R6),w(Op),w(Vp),w(P6),f&&t(kXe),f&&t(Oi),w(B6),f&&t(SXe),f&&t($o),w(I6),w(q6),w(Wp),w(j6),w(Yu),f&&t(RXe),f&&t(zi),w(D6),f&&t(PXe),f&&t(ko),w(G6),w(V6),w(Zu),w(X6),w(W1),f&&t(BXe),f&&t(Hi),w(z6),f&&t(IXe),f&&t(So),w(W6),w(H6),w(H1),w(U6),w(I2),f&&t(NXe),f&&t(Yi),w(J6),f&&t(qXe),f&&t(Ro),w(Y6),w(Z6),w(q2),w(eL),w(Cb),f&&t(jXe),f&&t(ed),w(oL),f&&t(DXe),f&&t(Po),w(rL),w(aL),w(Ab),w(nL),w(Wb),f&&t(GXe),f&&t(td),w(sL),f&&t(OXe),f&&t(Bo),w(lL),w(dL),w(Hb),w(cL),w(Wv),f&&t(VXe),f&&t(sd),w(fL),f&&t(XXe),f&&t(Io),w(mL),w(hL),w(Hv),w(pL),w(A3),f&&t(zXe),f&&t(dd),w(_L),f&&t(WXe),f&&t(No),w(uL),w(vL),w(y3),w(FL),w(I3),f&&t(QXe),f&&t(md),w(TL),f&&t(HXe),f&&t(jo),w(ML),w(CL),w(q3),w(wL),w(MF),f&&t(UXe),f&&t(pd),w(AL),f&&t(JXe),f&&t(Do),w(LL),w(xL),w(CF),w($L),w(hT),f&&t(YXe),f&&t(bd),w(kL),f&&t(KXe),f&&t(Go),w(SL),w(PL),w(_T),w(BL),w(vT),f&&t(ZXe),f&&t(Td),w(IL),f&&t(eze),f&&t(Oo),w(NL),w(jL),w(TT),w(DL),w(IT),f&&t(oze),f&&t(Cd),w(GL),f&&t(rze),f&&t(Vo),w(OL),w(XL),w(qT),w(zL),w(GT),f&&t(tze),f&&t(Ld),w(WL),f&&t(aze),f&&t(Xo),w(QL),w(UL),w(VT),w(JL),w(WT),f&&t(nze),f&&t($d),w(YL),f&&t(sze),f&&t(zo),w(KL),w(ey),w(HT),w(oy),w(n7),f&&t(lze),f&&t(Rd),w(ry),f&&t(ize),f&&t(Wo),w(ty),w(ny),w(l7),w(sy),w(h7),f&&t(dze),f&&t(Id),w(ly),f&&t(cze),f&&t(Qo),w(iy),w(cy),w(_7),w(fy),w(y7),f&&t(fze),f&&t(jd),w(my),f&&t(mze),f&&t(Ho),w(gy),w(py),w($7),w(_y),w(P7),f&&t(gze),f&&t(Od),w(by),f&&t(hze),f&&t(Uo),w(vy),w(Ty),w(I7),w(My),w(V7),f&&t(pze),f&&t(zd),w(Ey),f&&t(_ze),f&&t(Jo),w(Cy),w(Ay),w(z7),w(Ly),w(J7),f&&t(uze),f&&t(Ud),w(yy),f&&t(bze),f&&t(Yo),w(xy),w(ky),w(K7),w(Sy),w(r8),f&&t(vze),f&&t(Kd),w(Py),f&&t(Fze),f&&t(Ko),w(By),w(Ny),w(a8),w(qy),w(l8),f&&t(Tze),f&&t(oc),w(jy),f&&t(Mze),f&&t(Zo),w(Dy),w(Oy),w(d8),w(Vy),w(_8),f&&t(Eze),f&&t(ac),w(Xy),f&&t(Cze),f&&t(er),w(zy),w(Qy),w(b8),w(Hy),w(T8),f&&t(wze),f&&t(lc),w(Uy),f&&t(Aze),f&&t(or),w(Jy),w(Ky),w(E8),w(Zy),w(v9),f&&t(Lze),f&&t(cc),w(ex),f&&t(yze),f&&t(rr),w(ox),w(tx),w(T9),w(ax),w(z9),f&&t(xze),f&&t(gc),w(nx),f&&t($ze),f&&t(tr),w(sx),w(ix),w(Q9),w(dx),w(lM),f&&t(kze),f&&t(_c),w(cx),f&&t(Sze),f&&t(ar),w(fx),w(gx),w(dM),w(hx),w(_M),f&&t(Rze),f&&t(vc),w(px),f&&t(Pze),f&&t(nr),w(_x),w(bx),w(bM),w(vx),w(jM),f&&t(Bze),f&&t(Mc),w(Fx),f&&t(Ize),f&&t(sr),w(Tx),w(Ex),w(GM),w(Cx),w(KM),f&&t(Nze),f&&t(wc),w(wx),f&&t(qze),f&&t(lr),w(Ax),w(yx),w(e4),w(xx),w(L4),f&&t(jze),f&&t(yc),w($x),f&&t(Dze),f&&t(ir),w(kx),w(Rx),w(x4),w(Px),w(Q4),f&&t(Gze),f&&t(kc),w(Bx),f&&t(Oze),f&&t(dr),w(Ix),w(qx),w(U4),w(jx),w(K4),f&&t(Vze),f&&t(Pc),w(Gx),f&&t(Xze),f&&t(cr),w(Ox),w(Xx),w(eE),w(zx),w(rE),f&&t(zze),f&&t(Nc),w(Wx),f&&t(Wze),f&&t(fr),w(Qx),w(Ux),w(aE),w(Jx),w(wE),f&&t(Qze),f&&t(Dc),w(Yx),f&&t(Hze),f&&t(mr),w(Kx),w(e$),w(LE),w(o$),w(HE),f&&t(Uze),f&&t(Vc),w(r$),f&&t(Jze),f&&t(gr),w(t$),w(n$),w(JE),w(s$),w(KE),f&&t(Yze),f&&t(Wc),w(l$),f&&t(Kze),f&&t(hr),w(i$),w(c$),w(eC),w(f$),w(rC),f&&t(Zze),f&&t(Uc),w(m$),f&&t(eWe),f&&t(pr),w(g$),w(p$),w(aC),w(_$),w(SC),f&&t(oWe),f&&t(Kc),w(u$),f&&t(rWe),f&&t(_r),w(b$),w(F$),w(PC),w(T$),w(zC),f&&t(tWe),f&&t(of),w(M$),f&&t(aWe),f&&t(ur),w(E$),w(w$),w(QC),w(A$),w(l5),f&&t(nWe),f&&t(af),w(L$),f&&t(sWe),f&&t(br),w(y$),w($$),w(d5),w(k$),w(F5),f&&t(lWe),f&&t(lf),w(S$),f&&t(iWe),f&&t(vr),w(R$),w(B$),w(M5),w(I$),w(R5),f&&t(dWe),f&&t(ff),w(N$),f&&t(cWe),f&&t(Fr),w(q$),w(D$),w(B5),w(G$),w(W5),f&&t(fWe),f&&t(hf),w(O$),f&&t(mWe),f&&t(Tr),w(V$),w(z$),w(H5),w(W$),w(n0),f&&t(gWe),f&&t(uf),w(Q$),f&&t(hWe),f&&t(Mr),w(H$),w(J$),w(l0),w(Y$),w(_0),f&&t(pWe),f&&t(Ff),w(K$),f&&t(_We),f&&t(Er),w(Z$),w(ok),w(b0),w(rk),w(L0),f&&t(uWe),f&&t(Ef),w(tk),f&&t(bWe),f&&t(Cr),w(ak),w(sk),w(x0),w(lk),w(k0),f&&t(vWe),f&&t(Af),w(ik),f&&t(FWe),f&&t(wr),w(dk),w(fk),w(R0),w(mk),w(I0),f&&t(TWe),f&&t(xf),w(hk),f&&t(MWe),f&&t(Ar),w(pk),w(uk),w(q0),w(bk),w(D0)}}}const DUt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function GUt($){return jQt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class HUt extends BQt{constructor(g){super();IQt(this,g,GUt,jUt,NQt,{})}}export{HUt as default,DUt as metadata};
