import{S as dQt,i as cQt,s as fQt,e as a,k as l,w as F,t as o,M as mQt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as gQt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as xtt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function hQt($){let g,v,p,m,_,d,h,Eo,Li,Pf,st,yi,xi,t6,Bf,Oe,We,$i,Pn,a6,Bn,In,n6,ki,Nn,s6,Si,If,Sa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Li=a("code"),Pf=o("model_type"),st=o(" attribute is set to the same key you use when registering the config (here "),yi=a("code"),xi=o('"new-model"'),t6=o(")."),Bf=l(),Oe=a("p"),We=o("Likewise, if your "),$i=a("code"),Pn=o("NewModel"),a6=o(" is a subclass of "),Bn=a("a"),In=o("PreTrainedModel"),n6=o(`, make sure its
`),ki=a("code"),Nn=o("config_class"),s6=o(` attribute is set to the same class you use when registering the model (here
`),Si=a("code"),If=o("NewModelConfig"),Sa=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var qS=s(p);m=r(qS,"NewModelConfig"),qS.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Ri=s(d);h=r(Ri,"PretrainedConfig"),Ri.forEach(t),Eo=r(Ae,`, make sure its
`),Li=n(Ae,"CODE",{});var jS=s(Li);Pf=r(jS,"model_type"),jS.forEach(t),st=r(Ae," attribute is set to the same key you use when registering the config (here "),yi=n(Ae,"CODE",{});var DS=s(yi);xi=r(DS,'"new-model"'),DS.forEach(t),t6=r(Ae,")."),Ae.forEach(t),Bf=i(Qe),Oe=n(Qe,"P",{});var Co=s(Oe);We=r(Co,"Likewise, if your "),$i=n(Co,"CODE",{});var Ra=s($i);Pn=r(Ra,"NewModel"),Ra.forEach(t),a6=r(Co," is a subclass of "),Bn=n(Co,"A",{href:!0});var GS=s(Bn);In=r(GS,"PreTrainedModel"),GS.forEach(t),n6=r(Co,`, make sure its
`),ki=n(Co,"CODE",{});var Nf=s(ki);Nn=r(Nf,"config_class"),Nf.forEach(t),s6=r(Co,` attribute is set to the same class you use when registering the model (here
`),Si=n(Co,"CODE",{});var OS=s(Si);If=r(OS,"NewModelConfig"),OS.forEach(t),Sa=r(Co,")."),Co.forEach(t),this.h()},h(){c(Bn,"href","/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Eo),e(g,Li),e(Li,Pf),e(g,st),e(g,yi),e(yi,xi),e(g,t6),b(Qe,Bf,Ae),b(Qe,Oe,Ae),e(Oe,We),e(Oe,$i),e($i,Pn),e(Oe,a6),e(Oe,Bn),e(Bn,In),e(Oe,n6),e(Oe,ki),e(ki,Nn),e(Oe,s6),e(Oe,Si),e(Si,If),e(Oe,Sa)},d(Qe){Qe&&t(g),Qe&&t(Bf),Qe&&t(Oe)}}}function pQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Qt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uQt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function bQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vQt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function FQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Qt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ht($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function THt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ht($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gUt($){let g,v,p,m,_,d,h,Eo,Li,Pf,st,yi,xi,t6,Bf,Oe,We,$i,Pn,a6,Bn,In,n6,ki,Nn,s6,Si,If,Sa,Qe,Ae,qS,Ri,jS,DS,Co,Ra,GS,Nf,OS,CHe,dXe,Pi,qf,$ae,l6,wHe,kae,AHe,cXe,qn,LHe,Sae,yHe,xHe,Rae,$He,kHe,fXe,i6,mXe,VS,SHe,gXe,jf,hXe,Bi,Df,Pae,d6,RHe,Bae,PHe,pXe,wo,c6,BHe,f6,IHe,XS,NHe,qHe,jHe,m6,DHe,Iae,GHe,OHe,VHe,Lr,g6,XHe,Nae,zHe,WHe,Ii,QHe,qae,HHe,UHe,jae,JHe,YHe,KHe,A,Gf,Dae,ZHe,eUe,zS,oUe,rUe,tUe,Of,Gae,aUe,nUe,WS,sUe,lUe,iUe,Vf,Oae,dUe,cUe,QS,fUe,mUe,gUe,Xf,Vae,hUe,pUe,HS,_Ue,uUe,bUe,zf,Xae,vUe,FUe,US,TUe,MUe,EUe,Wf,zae,CUe,wUe,JS,AUe,LUe,yUe,Qf,Wae,xUe,$Ue,YS,kUe,SUe,RUe,Hf,Qae,PUe,BUe,KS,IUe,NUe,qUe,Uf,Hae,jUe,DUe,ZS,GUe,OUe,VUe,Jf,Uae,XUe,zUe,eR,WUe,QUe,HUe,Yf,Jae,UUe,JUe,oR,YUe,KUe,ZUe,Kf,Yae,eJe,oJe,rR,rJe,tJe,aJe,Zf,Kae,nJe,sJe,tR,lJe,iJe,dJe,em,Zae,cJe,fJe,aR,mJe,gJe,hJe,om,ene,pJe,_Je,nR,uJe,bJe,vJe,rm,one,FJe,TJe,sR,MJe,EJe,CJe,tm,rne,wJe,AJe,lR,LJe,yJe,xJe,am,tne,$Je,kJe,iR,SJe,RJe,PJe,nm,ane,BJe,IJe,dR,NJe,qJe,jJe,sm,nne,DJe,GJe,cR,OJe,VJe,XJe,lm,sne,zJe,WJe,fR,QJe,HJe,UJe,im,lne,JJe,YJe,mR,KJe,ZJe,eYe,dm,ine,oYe,rYe,gR,tYe,aYe,nYe,cm,dne,sYe,lYe,hR,iYe,dYe,cYe,fm,cne,fYe,mYe,pR,gYe,hYe,pYe,mm,fne,_Ye,uYe,_R,bYe,vYe,FYe,gm,mne,TYe,MYe,uR,EYe,CYe,wYe,hm,gne,AYe,LYe,bR,yYe,xYe,$Ye,pm,hne,kYe,SYe,vR,RYe,PYe,BYe,_m,pne,IYe,NYe,FR,qYe,jYe,DYe,um,_ne,GYe,OYe,TR,VYe,XYe,zYe,bm,une,WYe,QYe,MR,HYe,UYe,JYe,vm,bne,YYe,KYe,ER,ZYe,eKe,oKe,Fm,vne,rKe,tKe,CR,aKe,nKe,sKe,Tm,Fne,lKe,iKe,wR,dKe,cKe,fKe,Mm,Tne,mKe,gKe,AR,hKe,pKe,_Ke,Em,Mne,uKe,bKe,LR,vKe,FKe,TKe,Cm,Ene,MKe,EKe,yR,CKe,wKe,AKe,wm,Cne,LKe,yKe,xR,xKe,$Ke,kKe,Am,wne,SKe,RKe,$R,PKe,BKe,IKe,Lm,Ane,NKe,qKe,kR,jKe,DKe,GKe,ym,Lne,OKe,VKe,SR,XKe,zKe,WKe,xm,yne,QKe,HKe,RR,UKe,JKe,YKe,$m,xne,KKe,ZKe,PR,eZe,oZe,rZe,km,$ne,tZe,aZe,BR,nZe,sZe,lZe,Sm,kne,iZe,dZe,IR,cZe,fZe,mZe,Rm,Sne,gZe,hZe,NR,pZe,_Ze,uZe,Pm,Rne,bZe,vZe,qR,FZe,TZe,MZe,Bm,Pne,EZe,CZe,jR,wZe,AZe,LZe,Im,Bne,yZe,xZe,DR,$Ze,kZe,SZe,Nm,Ine,RZe,PZe,GR,BZe,IZe,NZe,qm,Nne,qZe,jZe,OR,DZe,GZe,OZe,jm,qne,VZe,XZe,VR,zZe,WZe,QZe,Dm,jne,HZe,UZe,XR,JZe,YZe,KZe,Gm,Dne,ZZe,eeo,zR,oeo,reo,teo,Om,Gne,aeo,neo,WR,seo,leo,ieo,Vm,One,deo,ceo,QR,feo,meo,geo,Xm,Vne,heo,peo,HR,_eo,ueo,beo,zm,Xne,veo,Feo,UR,Teo,Meo,Eeo,Wm,zne,Ceo,weo,JR,Aeo,Leo,yeo,Qm,Wne,xeo,$eo,YR,keo,Seo,Reo,Hm,Qne,Peo,Beo,KR,Ieo,Neo,qeo,Um,Hne,jeo,Deo,ZR,Geo,Oeo,Veo,Jm,Une,Xeo,zeo,eP,Weo,Qeo,Heo,Ym,Jne,Ueo,Jeo,oP,Yeo,Keo,Zeo,Km,Yne,eoo,ooo,rP,roo,too,aoo,Zm,Kne,noo,soo,tP,loo,ioo,doo,eg,Zne,coo,foo,aP,moo,goo,hoo,og,ese,poo,_oo,nP,uoo,boo,voo,rg,ose,Foo,Too,sP,Moo,Eoo,Coo,tg,rse,woo,Aoo,lP,Loo,yoo,xoo,ag,tse,$oo,koo,iP,Soo,Roo,Poo,ng,ase,Boo,Ioo,dP,Noo,qoo,joo,sg,nse,Doo,Goo,cP,Ooo,Voo,Xoo,lg,sse,zoo,Woo,fP,Qoo,Hoo,Uoo,ig,lse,Joo,Yoo,mP,Koo,Zoo,ero,dg,ise,oro,rro,gP,tro,aro,nro,cg,dse,sro,lro,hP,iro,dro,cro,fg,cse,fro,mro,pP,gro,hro,pro,mg,fse,_ro,uro,_P,bro,vro,Fro,gg,mse,Tro,Mro,uP,Ero,Cro,wro,hg,gse,Aro,Lro,bP,yro,xro,$ro,pg,hse,kro,Sro,vP,Rro,Pro,Bro,_g,pse,Iro,Nro,FP,qro,jro,Dro,ug,_se,Gro,Oro,TP,Vro,Xro,zro,bg,use,Wro,Qro,MP,Hro,Uro,Jro,vg,bse,Yro,Kro,EP,Zro,eto,oto,Fg,vse,rto,tto,CP,ato,nto,sto,Tg,Fse,lto,ito,wP,dto,cto,fto,Mg,Tse,mto,gto,AP,hto,pto,_to,Eg,Mse,uto,bto,LP,vto,Fto,Tto,Cg,Ese,Mto,Eto,yP,Cto,wto,Ato,wg,Cse,Lto,yto,xP,xto,$to,kto,Ag,wse,Sto,Rto,$P,Pto,Bto,Ito,Lg,Ase,Nto,qto,kP,jto,Dto,Gto,yg,Lse,Oto,Vto,SP,Xto,zto,Wto,xg,yse,Qto,Hto,RP,Uto,Jto,Yto,$g,xse,Kto,Zto,PP,eao,oao,rao,kg,$se,tao,aao,BP,nao,sao,lao,Sg,kse,iao,dao,IP,cao,fao,mao,Rg,Sse,gao,hao,NP,pao,_ao,uao,Pg,Rse,bao,vao,qP,Fao,Tao,Mao,Bg,Pse,Eao,Cao,jP,wao,Aao,Lao,Ig,Bse,yao,xao,DP,$ao,kao,Sao,Ng,Ise,Rao,Pao,GP,Bao,Iao,Nao,qg,Nse,qao,jao,OP,Dao,Gao,Oao,jg,qse,Vao,Xao,VP,zao,Wao,Qao,Dg,jse,Hao,Uao,XP,Jao,Yao,Kao,Gg,Dse,Zao,eno,zP,ono,rno,tno,Og,Gse,ano,nno,WP,sno,lno,ino,Vg,Ose,dno,cno,QP,fno,mno,gno,Xg,Vse,hno,pno,HP,_no,uno,bno,zg,Xse,vno,Fno,UP,Tno,Mno,Eno,Wg,zse,Cno,wno,JP,Ano,Lno,yno,Qg,Wse,xno,$no,YP,kno,Sno,Rno,Hg,Qse,Pno,Bno,KP,Ino,Nno,qno,Ug,Hse,jno,Dno,ZP,Gno,Ono,Vno,Jg,Use,Xno,zno,eB,Wno,Qno,Hno,Yg,Jse,Uno,Jno,oB,Yno,Kno,Zno,Kg,eso,Zg,h6,oso,Yse,rso,_Xe,Ni,eh,Kse,p6,tso,Zse,aso,uXe,Ao,_6,nso,u6,sso,rB,lso,iso,dso,b6,cso,ele,fso,mso,gso,yr,v6,hso,ole,pso,_so,Pa,uso,rle,bso,vso,tle,Fso,Tso,ale,Mso,Eso,Cso,k,jn,nle,wso,Aso,tB,Lso,yso,aB,xso,$so,kso,Dn,sle,Sso,Rso,nB,Pso,Bso,sB,Iso,Nso,qso,Gn,lle,jso,Dso,lB,Gso,Oso,iB,Vso,Xso,zso,oh,ile,Wso,Qso,dB,Hso,Uso,Jso,On,dle,Yso,Kso,cB,Zso,elo,fB,olo,rlo,tlo,rh,cle,alo,nlo,mB,slo,llo,ilo,th,fle,dlo,clo,gB,flo,mlo,glo,ah,mle,hlo,plo,hB,_lo,ulo,blo,Vn,gle,vlo,Flo,pB,Tlo,Mlo,_B,Elo,Clo,wlo,Xn,hle,Alo,Llo,uB,ylo,xlo,bB,$lo,klo,Slo,zn,ple,Rlo,Plo,vB,Blo,Ilo,FB,Nlo,qlo,jlo,nh,_le,Dlo,Glo,TB,Olo,Vlo,Xlo,sh,ule,zlo,Wlo,MB,Qlo,Hlo,Ulo,lh,ble,Jlo,Ylo,EB,Klo,Zlo,eio,Wn,vle,oio,rio,CB,tio,aio,wB,nio,sio,lio,ih,Fle,iio,dio,AB,cio,fio,mio,Qn,Tle,gio,hio,LB,pio,_io,yB,uio,bio,vio,Hn,Mle,Fio,Tio,xB,Mio,Eio,$B,Cio,wio,Aio,Un,Ele,Lio,yio,kB,xio,$io,SB,kio,Sio,Rio,Jn,Cle,Pio,Bio,RB,Iio,Nio,PB,qio,jio,Dio,dh,wle,Gio,Oio,BB,Vio,Xio,zio,Yn,Ale,Wio,Qio,IB,Hio,Uio,NB,Jio,Yio,Kio,Kn,Lle,Zio,edo,qB,odo,rdo,jB,tdo,ado,ndo,Zn,yle,sdo,ldo,DB,ido,ddo,GB,cdo,fdo,mdo,es,xle,gdo,hdo,OB,pdo,_do,VB,udo,bdo,vdo,os,$le,Fdo,Tdo,XB,Mdo,Edo,zB,Cdo,wdo,Ado,rs,kle,Ldo,ydo,WB,xdo,$do,QB,kdo,Sdo,Rdo,ch,Sle,Pdo,Bdo,HB,Ido,Ndo,qdo,ts,Rle,jdo,Ddo,UB,Gdo,Odo,JB,Vdo,Xdo,zdo,fh,Ple,Wdo,Qdo,YB,Hdo,Udo,Jdo,as,Ble,Ydo,Kdo,KB,Zdo,eco,ZB,oco,rco,tco,ns,Ile,aco,nco,eI,sco,lco,oI,ico,dco,cco,ss,Nle,fco,mco,rI,gco,hco,tI,pco,_co,uco,mh,qle,bco,vco,aI,Fco,Tco,Mco,ls,jle,Eco,Cco,nI,wco,Aco,sI,Lco,yco,xco,is,Dle,$co,kco,lI,Sco,Rco,iI,Pco,Bco,Ico,ds,Gle,Nco,qco,dI,jco,Dco,cI,Gco,Oco,Vco,gh,Ole,Xco,zco,fI,Wco,Qco,Hco,cs,Vle,Uco,Jco,mI,Yco,Kco,gI,Zco,efo,ofo,fs,Xle,rfo,tfo,hI,afo,nfo,pI,sfo,lfo,ifo,ms,zle,dfo,cfo,_I,ffo,mfo,uI,gfo,hfo,pfo,gs,Wle,_fo,ufo,bI,bfo,vfo,vI,Ffo,Tfo,Mfo,hs,Qle,Efo,Cfo,FI,wfo,Afo,TI,Lfo,yfo,xfo,ps,Hle,$fo,kfo,MI,Sfo,Rfo,EI,Pfo,Bfo,Ifo,_s,Ule,Nfo,qfo,CI,jfo,Dfo,wI,Gfo,Ofo,Vfo,us,Jle,Xfo,zfo,AI,Wfo,Qfo,LI,Hfo,Ufo,Jfo,hh,Yle,Yfo,Kfo,yI,Zfo,emo,omo,bs,Kle,rmo,tmo,xI,amo,nmo,$I,smo,lmo,imo,ph,Zle,dmo,cmo,kI,fmo,mmo,gmo,_h,eie,hmo,pmo,SI,_mo,umo,bmo,vs,oie,vmo,Fmo,RI,Tmo,Mmo,PI,Emo,Cmo,wmo,Fs,rie,Amo,Lmo,BI,ymo,xmo,II,$mo,kmo,Smo,Ts,tie,Rmo,Pmo,NI,Bmo,Imo,qI,Nmo,qmo,jmo,uh,aie,Dmo,Gmo,jI,Omo,Vmo,Xmo,Ms,nie,zmo,Wmo,DI,Qmo,Hmo,GI,Umo,Jmo,Ymo,Es,sie,Kmo,Zmo,OI,ego,ogo,VI,rgo,tgo,ago,Cs,lie,ngo,sgo,XI,lgo,igo,zI,dgo,cgo,fgo,ws,iie,mgo,ggo,WI,hgo,pgo,QI,_go,ugo,bgo,As,die,vgo,Fgo,HI,Tgo,Mgo,UI,Ego,Cgo,wgo,Ls,cie,Ago,Lgo,JI,ygo,xgo,YI,$go,kgo,Sgo,ys,fie,Rgo,Pgo,KI,Bgo,Igo,ZI,Ngo,qgo,jgo,bh,mie,Dgo,Ggo,eN,Ogo,Vgo,Xgo,xs,gie,zgo,Wgo,oN,Qgo,Hgo,rN,Ugo,Jgo,Ygo,$s,hie,Kgo,Zgo,tN,eho,oho,aN,rho,tho,aho,vh,pie,nho,sho,nN,lho,iho,dho,Fh,_ie,cho,fho,sN,mho,gho,hho,Th,uie,pho,_ho,lN,uho,bho,vho,Mh,bie,Fho,Tho,iN,Mho,Eho,Cho,ks,vie,who,Aho,dN,Lho,yho,cN,xho,$ho,kho,Eh,Fie,Sho,Rho,fN,Pho,Bho,Iho,Ss,Tie,Nho,qho,mN,jho,Dho,gN,Gho,Oho,Vho,Rs,Mie,Xho,zho,hN,Who,Qho,pN,Hho,Uho,Jho,Ps,Eie,Yho,Kho,_N,Zho,epo,uN,opo,rpo,tpo,Bs,Cie,apo,npo,bN,spo,lpo,vN,ipo,dpo,cpo,Is,wie,fpo,mpo,FN,gpo,hpo,TN,ppo,_po,upo,Ns,Aie,bpo,vpo,MN,Fpo,Tpo,EN,Mpo,Epo,Cpo,Ch,Lie,wpo,Apo,CN,Lpo,ypo,xpo,wh,yie,$po,kpo,wN,Spo,Rpo,Ppo,qs,xie,Bpo,Ipo,AN,Npo,qpo,LN,jpo,Dpo,Gpo,js,$ie,Opo,Vpo,yN,Xpo,zpo,xN,Wpo,Qpo,Hpo,Ds,kie,Upo,Jpo,$N,Ypo,Kpo,kN,Zpo,e_o,o_o,Ah,Sie,r_o,t_o,SN,a_o,n_o,s_o,Lh,Rie,l_o,i_o,RN,d_o,c_o,f_o,yh,Pie,m_o,g_o,PN,h_o,p_o,__o,Gs,Bie,u_o,b_o,BN,v_o,F_o,IN,T_o,M_o,E_o,Os,Iie,C_o,w_o,NN,A_o,L_o,qN,y_o,x_o,$_o,xh,Nie,k_o,S_o,jN,R_o,P_o,B_o,$h,qie,I_o,N_o,DN,q_o,j_o,D_o,kh,jie,G_o,O_o,GN,V_o,X_o,z_o,Vs,Die,W_o,Q_o,ON,H_o,U_o,VN,J_o,Y_o,K_o,Sh,Gie,Z_o,euo,XN,ouo,ruo,tuo,Rh,Oie,auo,nuo,zN,suo,luo,iuo,Xs,Vie,duo,cuo,WN,fuo,muo,QN,guo,huo,puo,zs,Xie,_uo,uuo,HN,buo,vuo,UN,Fuo,Tuo,Muo,Ws,zie,Euo,Cuo,JN,wuo,Auo,YN,Luo,yuo,xuo,Qs,Wie,$uo,kuo,KN,Suo,Ruo,ZN,Puo,Buo,Iuo,Ph,Nuo,Bh,F6,quo,Qie,juo,bXe,qi,Ih,Hie,T6,Duo,Uie,Guo,vXe,Lo,M6,Ouo,E6,Vuo,eq,Xuo,zuo,Wuo,C6,Quo,Jie,Huo,Uuo,Juo,He,w6,Yuo,Yie,Kuo,Zuo,Ba,e1o,Kie,o1o,r1o,Zie,t1o,a1o,ede,n1o,s1o,l1o,J,Nh,ode,i1o,d1o,oq,c1o,f1o,m1o,qh,rde,g1o,h1o,rq,p1o,_1o,u1o,jh,tde,b1o,v1o,tq,F1o,T1o,M1o,Dh,ade,E1o,C1o,aq,w1o,A1o,L1o,Gh,nde,y1o,x1o,nq,$1o,k1o,S1o,Oh,sde,R1o,P1o,sq,B1o,I1o,N1o,Vh,lde,q1o,j1o,lq,D1o,G1o,O1o,Xh,ide,V1o,X1o,iq,z1o,W1o,Q1o,zh,dde,H1o,U1o,dq,J1o,Y1o,K1o,Wh,cde,Z1o,e2o,cq,o2o,r2o,t2o,Qh,fde,a2o,n2o,fq,s2o,l2o,i2o,Hh,mde,d2o,c2o,mq,f2o,m2o,g2o,Uh,gde,h2o,p2o,gq,_2o,u2o,b2o,Jh,hde,v2o,F2o,hq,T2o,M2o,E2o,Yh,pde,C2o,w2o,pq,A2o,L2o,y2o,Kh,_de,x2o,$2o,_q,k2o,S2o,R2o,Zh,ude,P2o,B2o,uq,I2o,N2o,q2o,ep,bde,j2o,D2o,bq,G2o,O2o,V2o,op,vde,X2o,z2o,vq,W2o,Q2o,H2o,rp,Fde,U2o,J2o,Fq,Y2o,K2o,Z2o,tp,Tde,ebo,obo,Tq,rbo,tbo,abo,ap,Mde,nbo,sbo,Mq,lbo,ibo,dbo,np,Ede,cbo,fbo,Eq,mbo,gbo,hbo,sp,Cde,pbo,_bo,Cq,ubo,bbo,vbo,lp,wde,Fbo,Tbo,wq,Mbo,Ebo,Cbo,ip,Ade,wbo,Abo,Aq,Lbo,ybo,xbo,dp,Lde,$bo,kbo,Lq,Sbo,Rbo,Pbo,cp,yde,Bbo,Ibo,yq,Nbo,qbo,jbo,fp,xde,Dbo,Gbo,xq,Obo,Vbo,Xbo,mp,$de,zbo,Wbo,$q,Qbo,Hbo,Ubo,gp,kde,Jbo,Ybo,kq,Kbo,Zbo,evo,hp,Sde,ovo,rvo,Sq,tvo,avo,nvo,pp,Rde,svo,lvo,Rq,ivo,dvo,cvo,_p,Pde,fvo,mvo,Pq,gvo,hvo,pvo,up,Bde,_vo,uvo,Bq,bvo,vvo,Fvo,bp,Tvo,vp,Mvo,Fp,A6,Evo,Ide,Cvo,FXe,ji,Tp,Nde,L6,wvo,qde,Avo,TXe,yo,y6,Lvo,x6,yvo,Iq,xvo,$vo,kvo,$6,Svo,jde,Rvo,Pvo,Bvo,Ue,k6,Ivo,Dde,Nvo,qvo,Di,jvo,Gde,Dvo,Gvo,Ode,Ovo,Vvo,Xvo,fe,Mp,Vde,zvo,Wvo,Nq,Qvo,Hvo,Uvo,Ep,Xde,Jvo,Yvo,zde,Kvo,Zvo,e3o,Cp,Wde,o3o,r3o,qq,t3o,a3o,n3o,wp,Qde,s3o,l3o,jq,i3o,d3o,c3o,Ap,Hde,f3o,m3o,Dq,g3o,h3o,p3o,Lp,Ude,_3o,u3o,Gq,b3o,v3o,F3o,yp,Jde,T3o,M3o,Oq,E3o,C3o,w3o,xp,Yde,A3o,L3o,Vq,y3o,x3o,$3o,$p,Kde,k3o,S3o,Xq,R3o,P3o,B3o,kp,Zde,I3o,N3o,zq,q3o,j3o,D3o,Sp,ece,G3o,O3o,Wq,V3o,X3o,z3o,Rp,oce,W3o,Q3o,Qq,H3o,U3o,J3o,Pp,rce,Y3o,K3o,Hq,Z3o,eFo,oFo,Bp,tce,rFo,tFo,Uq,aFo,nFo,sFo,Ip,ace,lFo,iFo,Jq,dFo,cFo,fFo,Np,nce,mFo,gFo,Yq,hFo,pFo,_Fo,qp,sce,uFo,bFo,Kq,vFo,FFo,TFo,jp,lce,MFo,EFo,Zq,CFo,wFo,AFo,Dp,ice,LFo,yFo,ej,xFo,$Fo,kFo,Gp,SFo,Op,RFo,Vp,S6,PFo,dce,BFo,MXe,Gi,Xp,cce,R6,IFo,fce,NFo,EXe,xo,P6,qFo,Oi,jFo,oj,DFo,GFo,rj,OFo,VFo,XFo,B6,zFo,mce,WFo,QFo,HFo,lt,I6,UFo,gce,JFo,YFo,Vi,KFo,hce,ZFo,eTo,tj,oTo,rTo,tTo,zp,aTo,Je,N6,nTo,pce,sTo,lTo,Ia,iTo,_ce,dTo,cTo,uce,fTo,mTo,bce,gTo,hTo,pTo,y,Wp,vce,_To,uTo,aj,bTo,vTo,FTo,Qp,Fce,TTo,MTo,nj,ETo,CTo,wTo,Hp,Tce,ATo,LTo,sj,yTo,xTo,$To,Up,Mce,kTo,STo,lj,RTo,PTo,BTo,Jp,Ece,ITo,NTo,ij,qTo,jTo,DTo,Yp,Cce,GTo,OTo,dj,VTo,XTo,zTo,Kp,wce,WTo,QTo,cj,HTo,UTo,JTo,Zp,Ace,YTo,KTo,fj,ZTo,e7o,o7o,e_,Lce,r7o,t7o,mj,a7o,n7o,s7o,o_,yce,l7o,i7o,gj,d7o,c7o,f7o,r_,xce,m7o,g7o,hj,h7o,p7o,_7o,t_,$ce,u7o,b7o,pj,v7o,F7o,T7o,a_,kce,M7o,E7o,_j,C7o,w7o,A7o,n_,Sce,L7o,y7o,uj,x7o,$7o,k7o,s_,Rce,S7o,R7o,bj,P7o,B7o,I7o,l_,Pce,N7o,q7o,vj,j7o,D7o,G7o,i_,Bce,O7o,V7o,Fj,X7o,z7o,W7o,d_,Ice,Q7o,H7o,Tj,U7o,J7o,Y7o,c_,Nce,K7o,Z7o,Mj,e8o,o8o,r8o,f_,qce,t8o,a8o,Ej,n8o,s8o,l8o,m_,jce,i8o,d8o,Cj,c8o,f8o,m8o,g_,Dce,g8o,h8o,wj,p8o,_8o,u8o,h_,Gce,b8o,v8o,Aj,F8o,T8o,M8o,p_,Oce,E8o,C8o,Lj,w8o,A8o,L8o,__,Vce,y8o,x8o,yj,$8o,k8o,S8o,u_,Xce,R8o,P8o,xj,B8o,I8o,N8o,b_,zce,q8o,j8o,$j,D8o,G8o,O8o,v_,Wce,V8o,X8o,kj,z8o,W8o,Q8o,F_,Qce,H8o,U8o,Sj,J8o,Y8o,K8o,T_,Hce,Z8o,e9o,Rj,o9o,r9o,t9o,M_,Uce,a9o,n9o,Pj,s9o,l9o,i9o,E_,Jce,d9o,c9o,Bj,f9o,m9o,g9o,C_,Yce,h9o,p9o,Ij,_9o,u9o,b9o,w_,Kce,v9o,F9o,Nj,T9o,M9o,E9o,Hs,Zce,C9o,w9o,qj,A9o,L9o,jj,y9o,x9o,$9o,A_,efe,k9o,S9o,Dj,R9o,P9o,B9o,L_,ofe,I9o,N9o,Gj,q9o,j9o,D9o,y_,rfe,G9o,O9o,Oj,V9o,X9o,z9o,x_,tfe,W9o,Q9o,Vj,H9o,U9o,J9o,$_,afe,Y9o,K9o,Xj,Z9o,eMo,oMo,k_,nfe,rMo,tMo,zj,aMo,nMo,sMo,S_,sfe,lMo,iMo,Wj,dMo,cMo,fMo,R_,lfe,mMo,gMo,Qj,hMo,pMo,_Mo,P_,ife,uMo,bMo,Hj,vMo,FMo,TMo,B_,dfe,MMo,EMo,Uj,CMo,wMo,AMo,I_,cfe,LMo,yMo,Jj,xMo,$Mo,kMo,N_,ffe,SMo,RMo,Yj,PMo,BMo,IMo,q_,mfe,NMo,qMo,Kj,jMo,DMo,GMo,j_,gfe,OMo,VMo,Zj,XMo,zMo,WMo,D_,hfe,QMo,HMo,eD,UMo,JMo,YMo,G_,pfe,KMo,ZMo,oD,e4o,o4o,r4o,O_,_fe,t4o,a4o,rD,n4o,s4o,l4o,V_,ufe,i4o,d4o,tD,c4o,f4o,m4o,X_,bfe,g4o,h4o,aD,p4o,_4o,u4o,z_,vfe,b4o,v4o,nD,F4o,T4o,M4o,W_,Ffe,E4o,C4o,sD,w4o,A4o,L4o,Q_,Tfe,y4o,x4o,lD,$4o,k4o,S4o,H_,Mfe,R4o,P4o,iD,B4o,I4o,N4o,U_,Efe,q4o,j4o,dD,D4o,G4o,O4o,J_,Cfe,V4o,X4o,cD,z4o,W4o,Q4o,Y_,wfe,H4o,U4o,fD,J4o,Y4o,K4o,K_,Afe,Z4o,eEo,mD,oEo,rEo,tEo,Z_,Lfe,aEo,nEo,gD,sEo,lEo,iEo,eu,yfe,dEo,cEo,hD,fEo,mEo,gEo,ou,xfe,hEo,pEo,pD,_Eo,uEo,bEo,ru,$fe,vEo,FEo,_D,TEo,MEo,EEo,tu,kfe,CEo,wEo,uD,AEo,LEo,yEo,au,Sfe,xEo,$Eo,bD,kEo,SEo,REo,nu,Rfe,PEo,BEo,vD,IEo,NEo,qEo,su,Pfe,jEo,DEo,FD,GEo,OEo,VEo,lu,Bfe,XEo,zEo,TD,WEo,QEo,HEo,iu,Ife,UEo,JEo,MD,YEo,KEo,ZEo,du,Nfe,eCo,oCo,ED,rCo,tCo,aCo,cu,qfe,nCo,sCo,CD,lCo,iCo,dCo,fu,jfe,cCo,fCo,wD,mCo,gCo,hCo,mu,Dfe,pCo,_Co,AD,uCo,bCo,vCo,gu,Gfe,FCo,TCo,LD,MCo,ECo,CCo,hu,Ofe,wCo,ACo,yD,LCo,yCo,xCo,pu,Vfe,$Co,kCo,xD,SCo,RCo,PCo,_u,Xfe,BCo,ICo,$D,NCo,qCo,jCo,uu,zfe,DCo,GCo,kD,OCo,VCo,XCo,bu,Wfe,zCo,WCo,SD,QCo,HCo,UCo,vu,Qfe,JCo,YCo,RD,KCo,ZCo,e5o,Fu,Hfe,o5o,r5o,PD,t5o,a5o,n5o,Tu,Ufe,s5o,l5o,BD,i5o,d5o,c5o,Mu,Jfe,f5o,m5o,ID,g5o,h5o,p5o,Eu,Yfe,_5o,u5o,ND,b5o,v5o,F5o,Cu,Kfe,T5o,M5o,qD,E5o,C5o,w5o,wu,Zfe,A5o,L5o,jD,y5o,x5o,$5o,Au,eme,k5o,S5o,DD,R5o,P5o,B5o,Lu,ome,I5o,N5o,GD,q5o,j5o,D5o,yu,rme,G5o,O5o,OD,V5o,X5o,z5o,xu,tme,W5o,Q5o,VD,H5o,U5o,J5o,$u,ame,Y5o,K5o,XD,Z5o,e0o,o0o,ku,nme,r0o,t0o,zD,a0o,n0o,s0o,Su,sme,l0o,i0o,WD,d0o,c0o,f0o,Ru,lme,m0o,g0o,QD,h0o,p0o,_0o,Pu,ime,u0o,b0o,HD,v0o,F0o,T0o,Bu,dme,M0o,E0o,UD,C0o,w0o,A0o,Iu,cme,L0o,y0o,JD,x0o,$0o,k0o,Nu,fme,S0o,R0o,YD,P0o,B0o,I0o,qu,mme,N0o,q0o,KD,j0o,D0o,G0o,ju,gme,O0o,V0o,ZD,X0o,z0o,W0o,Du,hme,Q0o,H0o,eG,U0o,J0o,Y0o,Gu,pme,K0o,Z0o,oG,ewo,owo,rwo,Ou,_me,two,awo,rG,nwo,swo,lwo,Vu,ume,iwo,dwo,tG,cwo,fwo,mwo,Xu,bme,gwo,hwo,aG,pwo,_wo,uwo,zu,vme,bwo,vwo,nG,Fwo,Two,Mwo,Wu,Fme,Ewo,Cwo,sG,wwo,Awo,Lwo,Qu,Tme,ywo,xwo,lG,$wo,kwo,Swo,Hu,Mme,Rwo,Pwo,iG,Bwo,Iwo,Nwo,Uu,qwo,Eme,jwo,Dwo,Cme,Gwo,Owo,Ju,CXe,Xi,Yu,wme,q6,Vwo,Ame,Xwo,wXe,$o,j6,zwo,zi,Wwo,dG,Qwo,Hwo,cG,Uwo,Jwo,Ywo,D6,Kwo,Lme,Zwo,eAo,oAo,it,G6,rAo,yme,tAo,aAo,Wi,nAo,xme,sAo,lAo,fG,iAo,dAo,cAo,Ku,fAo,Ye,O6,mAo,$me,gAo,hAo,Na,pAo,kme,_Ao,uAo,Sme,bAo,vAo,Rme,FAo,TAo,MAo,G,Zu,Pme,EAo,CAo,mG,wAo,AAo,LAo,e1,Bme,yAo,xAo,gG,$Ao,kAo,SAo,o1,Ime,RAo,PAo,hG,BAo,IAo,NAo,r1,Nme,qAo,jAo,pG,DAo,GAo,OAo,t1,qme,VAo,XAo,_G,zAo,WAo,QAo,a1,jme,HAo,UAo,uG,JAo,YAo,KAo,n1,Dme,ZAo,e6o,bG,o6o,r6o,t6o,s1,Gme,a6o,n6o,vG,s6o,l6o,i6o,l1,Ome,d6o,c6o,FG,f6o,m6o,g6o,i1,Vme,h6o,p6o,TG,_6o,u6o,b6o,d1,Xme,v6o,F6o,MG,T6o,M6o,E6o,c1,zme,C6o,w6o,EG,A6o,L6o,y6o,f1,Wme,x6o,$6o,CG,k6o,S6o,R6o,m1,Qme,P6o,B6o,wG,I6o,N6o,q6o,g1,Hme,j6o,D6o,AG,G6o,O6o,V6o,h1,Ume,X6o,z6o,LG,W6o,Q6o,H6o,p1,Jme,U6o,J6o,yG,Y6o,K6o,Z6o,_1,Yme,eLo,oLo,xG,rLo,tLo,aLo,u1,Kme,nLo,sLo,$G,lLo,iLo,dLo,b1,Zme,cLo,fLo,kG,mLo,gLo,hLo,v1,ege,pLo,_Lo,SG,uLo,bLo,vLo,F1,oge,FLo,TLo,RG,MLo,ELo,CLo,T1,rge,wLo,ALo,PG,LLo,yLo,xLo,M1,tge,$Lo,kLo,BG,SLo,RLo,PLo,E1,age,BLo,ILo,IG,NLo,qLo,jLo,C1,nge,DLo,GLo,NG,OLo,VLo,XLo,w1,sge,zLo,WLo,qG,QLo,HLo,ULo,A1,lge,JLo,YLo,jG,KLo,ZLo,eyo,L1,ige,oyo,ryo,DG,tyo,ayo,nyo,y1,dge,syo,lyo,GG,iyo,dyo,cyo,x1,cge,fyo,myo,OG,gyo,hyo,pyo,$1,fge,_yo,uyo,VG,byo,vyo,Fyo,k1,mge,Tyo,Myo,XG,Eyo,Cyo,wyo,S1,gge,Ayo,Lyo,zG,yyo,xyo,$yo,R1,hge,kyo,Syo,WG,Ryo,Pyo,Byo,P1,pge,Iyo,Nyo,QG,qyo,jyo,Dyo,B1,_ge,Gyo,Oyo,HG,Vyo,Xyo,zyo,I1,uge,Wyo,Qyo,UG,Hyo,Uyo,Jyo,N1,bge,Yyo,Kyo,JG,Zyo,exo,oxo,q1,vge,rxo,txo,YG,axo,nxo,sxo,j1,Fge,lxo,ixo,KG,dxo,cxo,fxo,D1,Tge,mxo,gxo,ZG,hxo,pxo,_xo,G1,Mge,uxo,bxo,eO,vxo,Fxo,Txo,O1,Ege,Mxo,Exo,oO,Cxo,wxo,Axo,V1,Cge,Lxo,yxo,rO,xxo,$xo,kxo,X1,Sxo,wge,Rxo,Pxo,Age,Bxo,Ixo,z1,AXe,Qi,W1,Lge,V6,Nxo,yge,qxo,LXe,ko,X6,jxo,Hi,Dxo,tO,Gxo,Oxo,aO,Vxo,Xxo,zxo,z6,Wxo,xge,Qxo,Hxo,Uxo,dt,W6,Jxo,$ge,Yxo,Kxo,Ui,Zxo,kge,e$o,o$o,nO,r$o,t$o,a$o,Q1,n$o,Ke,Q6,s$o,Sge,l$o,i$o,qa,d$o,Rge,c$o,f$o,Pge,m$o,g$o,Bge,h$o,p$o,_$o,z,H1,Ige,u$o,b$o,sO,v$o,F$o,T$o,U1,Nge,M$o,E$o,lO,C$o,w$o,A$o,J1,qge,L$o,y$o,iO,x$o,$$o,k$o,Y1,jge,S$o,R$o,dO,P$o,B$o,I$o,K1,Dge,N$o,q$o,cO,j$o,D$o,G$o,Z1,Gge,O$o,V$o,fO,X$o,z$o,W$o,e2,Oge,Q$o,H$o,mO,U$o,J$o,Y$o,o2,Vge,K$o,Z$o,gO,eko,oko,rko,r2,Xge,tko,ako,hO,nko,sko,lko,t2,zge,iko,dko,pO,cko,fko,mko,a2,Wge,gko,hko,_O,pko,_ko,uko,n2,Qge,bko,vko,uO,Fko,Tko,Mko,s2,Hge,Eko,Cko,bO,wko,Ako,Lko,l2,Uge,yko,xko,vO,$ko,kko,Sko,i2,Jge,Rko,Pko,FO,Bko,Iko,Nko,d2,Yge,qko,jko,TO,Dko,Gko,Oko,c2,Kge,Vko,Xko,MO,zko,Wko,Qko,f2,Zge,Hko,Uko,EO,Jko,Yko,Kko,m2,ehe,Zko,eSo,CO,oSo,rSo,tSo,g2,ohe,aSo,nSo,wO,sSo,lSo,iSo,h2,rhe,dSo,cSo,AO,fSo,mSo,gSo,p2,the,hSo,pSo,LO,_So,uSo,bSo,_2,ahe,vSo,FSo,yO,TSo,MSo,ESo,u2,nhe,CSo,wSo,xO,ASo,LSo,ySo,b2,she,xSo,$So,$O,kSo,SSo,RSo,v2,lhe,PSo,BSo,kO,ISo,NSo,qSo,F2,ihe,jSo,DSo,SO,GSo,OSo,VSo,T2,dhe,XSo,zSo,RO,WSo,QSo,HSo,M2,che,USo,JSo,PO,YSo,KSo,ZSo,E2,fhe,eRo,oRo,BO,rRo,tRo,aRo,C2,mhe,nRo,sRo,IO,lRo,iRo,dRo,w2,ghe,cRo,fRo,NO,mRo,gRo,hRo,A2,hhe,pRo,_Ro,qO,uRo,bRo,vRo,L2,phe,FRo,TRo,jO,MRo,ERo,CRo,y2,_he,wRo,ARo,DO,LRo,yRo,xRo,x2,uhe,$Ro,kRo,GO,SRo,RRo,PRo,$2,bhe,BRo,IRo,OO,NRo,qRo,jRo,k2,vhe,DRo,GRo,VO,ORo,VRo,XRo,S2,Fhe,zRo,WRo,XO,QRo,HRo,URo,R2,The,JRo,YRo,zO,KRo,ZRo,ePo,P2,oPo,Mhe,rPo,tPo,Ehe,aPo,nPo,B2,yXe,Ji,I2,Che,H6,sPo,whe,lPo,xXe,So,U6,iPo,Yi,dPo,WO,cPo,fPo,QO,mPo,gPo,hPo,J6,pPo,Ahe,_Po,uPo,bPo,ct,Y6,vPo,Lhe,FPo,TPo,Ki,MPo,yhe,EPo,CPo,HO,wPo,APo,LPo,N2,yPo,Ze,K6,xPo,xhe,$Po,kPo,ja,SPo,$he,RPo,PPo,khe,BPo,IPo,She,NPo,qPo,jPo,Q,q2,Rhe,DPo,GPo,UO,OPo,VPo,XPo,j2,Phe,zPo,WPo,JO,QPo,HPo,UPo,D2,Bhe,JPo,YPo,YO,KPo,ZPo,eBo,G2,Ihe,oBo,rBo,KO,tBo,aBo,nBo,O2,Nhe,sBo,lBo,ZO,iBo,dBo,cBo,V2,qhe,fBo,mBo,eV,gBo,hBo,pBo,X2,jhe,_Bo,uBo,oV,bBo,vBo,FBo,z2,Dhe,TBo,MBo,rV,EBo,CBo,wBo,W2,Ghe,ABo,LBo,tV,yBo,xBo,$Bo,Q2,Ohe,kBo,SBo,aV,RBo,PBo,BBo,H2,Vhe,IBo,NBo,nV,qBo,jBo,DBo,U2,Xhe,GBo,OBo,sV,VBo,XBo,zBo,J2,zhe,WBo,QBo,lV,HBo,UBo,JBo,Y2,Whe,YBo,KBo,iV,ZBo,eIo,oIo,K2,Qhe,rIo,tIo,dV,aIo,nIo,sIo,Z2,Hhe,lIo,iIo,cV,dIo,cIo,fIo,eb,Uhe,mIo,gIo,fV,hIo,pIo,_Io,ob,Jhe,uIo,bIo,mV,vIo,FIo,TIo,rb,Yhe,MIo,EIo,gV,CIo,wIo,AIo,tb,Khe,LIo,yIo,hV,xIo,$Io,kIo,ab,Zhe,SIo,RIo,pV,PIo,BIo,IIo,nb,epe,NIo,qIo,_V,jIo,DIo,GIo,sb,ope,OIo,VIo,uV,XIo,zIo,WIo,lb,rpe,QIo,HIo,bV,UIo,JIo,YIo,ib,tpe,KIo,ZIo,vV,eNo,oNo,rNo,db,ape,tNo,aNo,FV,nNo,sNo,lNo,cb,npe,iNo,dNo,TV,cNo,fNo,mNo,fb,spe,gNo,hNo,MV,pNo,_No,uNo,mb,lpe,bNo,vNo,EV,FNo,TNo,MNo,gb,ipe,ENo,CNo,CV,wNo,ANo,LNo,hb,dpe,yNo,xNo,wV,$No,kNo,SNo,pb,cpe,RNo,PNo,AV,BNo,INo,NNo,_b,fpe,qNo,jNo,LV,DNo,GNo,ONo,ub,mpe,VNo,XNo,gpe,zNo,WNo,QNo,bb,hpe,HNo,UNo,yV,JNo,YNo,KNo,vb,ppe,ZNo,eqo,xV,oqo,rqo,tqo,Fb,_pe,aqo,nqo,$V,sqo,lqo,iqo,Tb,upe,dqo,cqo,kV,fqo,mqo,gqo,Mb,hqo,bpe,pqo,_qo,vpe,uqo,bqo,Eb,$Xe,Zi,Cb,Fpe,Z6,vqo,Tpe,Fqo,kXe,Ro,eL,Tqo,ed,Mqo,SV,Eqo,Cqo,RV,wqo,Aqo,Lqo,oL,yqo,Mpe,xqo,$qo,kqo,ft,rL,Sqo,Epe,Rqo,Pqo,od,Bqo,Cpe,Iqo,Nqo,PV,qqo,jqo,Dqo,wb,Gqo,eo,tL,Oqo,wpe,Vqo,Xqo,Da,zqo,Ape,Wqo,Qqo,Lpe,Hqo,Uqo,ype,Jqo,Yqo,Kqo,pe,Ab,xpe,Zqo,ejo,BV,ojo,rjo,tjo,Lb,$pe,ajo,njo,IV,sjo,ljo,ijo,yb,kpe,djo,cjo,NV,fjo,mjo,gjo,xb,Spe,hjo,pjo,qV,_jo,ujo,bjo,$b,Rpe,vjo,Fjo,jV,Tjo,Mjo,Ejo,kb,Ppe,Cjo,wjo,DV,Ajo,Ljo,yjo,Sb,Bpe,xjo,$jo,GV,kjo,Sjo,Rjo,Rb,Ipe,Pjo,Bjo,OV,Ijo,Njo,qjo,Pb,Npe,jjo,Djo,VV,Gjo,Ojo,Vjo,Bb,qpe,Xjo,zjo,XV,Wjo,Qjo,Hjo,Ib,jpe,Ujo,Jjo,zV,Yjo,Kjo,Zjo,Nb,Dpe,eDo,oDo,WV,rDo,tDo,aDo,qb,Gpe,nDo,sDo,QV,lDo,iDo,dDo,jb,Ope,cDo,fDo,HV,mDo,gDo,hDo,Db,Vpe,pDo,_Do,UV,uDo,bDo,vDo,Gb,Xpe,FDo,TDo,JV,MDo,EDo,CDo,Ob,zpe,wDo,ADo,YV,LDo,yDo,xDo,Vb,Wpe,$Do,kDo,KV,SDo,RDo,PDo,Xb,BDo,Qpe,IDo,NDo,Hpe,qDo,jDo,zb,SXe,rd,Wb,Upe,aL,DDo,Jpe,GDo,RXe,Po,nL,ODo,td,VDo,ZV,XDo,zDo,eX,WDo,QDo,HDo,sL,UDo,Ype,JDo,YDo,KDo,mt,lL,ZDo,Kpe,eGo,oGo,ad,rGo,Zpe,tGo,aGo,oX,nGo,sGo,lGo,Qb,iGo,oo,iL,dGo,e_e,cGo,fGo,Ga,mGo,o_e,gGo,hGo,r_e,pGo,_Go,t_e,uGo,bGo,vGo,N,Hb,a_e,FGo,TGo,rX,MGo,EGo,CGo,Ub,n_e,wGo,AGo,tX,LGo,yGo,xGo,Jb,s_e,$Go,kGo,aX,SGo,RGo,PGo,Yb,l_e,BGo,IGo,nX,NGo,qGo,jGo,Kb,i_e,DGo,GGo,sX,OGo,VGo,XGo,Zb,d_e,zGo,WGo,lX,QGo,HGo,UGo,ev,c_e,JGo,YGo,iX,KGo,ZGo,eOo,ov,f_e,oOo,rOo,dX,tOo,aOo,nOo,rv,m_e,sOo,lOo,cX,iOo,dOo,cOo,tv,g_e,fOo,mOo,fX,gOo,hOo,pOo,av,h_e,_Oo,uOo,mX,bOo,vOo,FOo,nv,p_e,TOo,MOo,gX,EOo,COo,wOo,sv,__e,AOo,LOo,hX,yOo,xOo,$Oo,lv,u_e,kOo,SOo,pX,ROo,POo,BOo,iv,b_e,IOo,NOo,_X,qOo,jOo,DOo,dv,v_e,GOo,OOo,uX,VOo,XOo,zOo,cv,F_e,WOo,QOo,bX,HOo,UOo,JOo,fv,T_e,YOo,KOo,vX,ZOo,eVo,oVo,mv,M_e,rVo,tVo,FX,aVo,nVo,sVo,gv,E_e,lVo,iVo,TX,dVo,cVo,fVo,hv,C_e,mVo,gVo,MX,hVo,pVo,_Vo,pv,w_e,uVo,bVo,EX,vVo,FVo,TVo,_v,A_e,MVo,EVo,CX,CVo,wVo,AVo,uv,L_e,LVo,yVo,wX,xVo,$Vo,kVo,bv,y_e,SVo,RVo,AX,PVo,BVo,IVo,vv,x_e,NVo,qVo,LX,jVo,DVo,GVo,Fv,$_e,OVo,VVo,yX,XVo,zVo,WVo,Tv,k_e,QVo,HVo,xX,UVo,JVo,YVo,Mv,S_e,KVo,ZVo,$X,eXo,oXo,rXo,Ev,R_e,tXo,aXo,kX,nXo,sXo,lXo,Cv,P_e,iXo,dXo,SX,cXo,fXo,mXo,wv,B_e,gXo,hXo,RX,pXo,_Xo,uXo,Av,I_e,bXo,vXo,PX,FXo,TXo,MXo,Lv,N_e,EXo,CXo,BX,wXo,AXo,LXo,yv,q_e,yXo,xXo,IX,$Xo,kXo,SXo,xv,j_e,RXo,PXo,NX,BXo,IXo,NXo,$v,D_e,qXo,jXo,qX,DXo,GXo,OXo,kv,G_e,VXo,XXo,jX,zXo,WXo,QXo,Sv,O_e,HXo,UXo,DX,JXo,YXo,KXo,Rv,V_e,ZXo,ezo,GX,ozo,rzo,tzo,Pv,X_e,azo,nzo,OX,szo,lzo,izo,Bv,z_e,dzo,czo,VX,fzo,mzo,gzo,Iv,W_e,hzo,pzo,XX,_zo,uzo,bzo,Nv,Q_e,vzo,Fzo,zX,Tzo,Mzo,Ezo,qv,H_e,Czo,wzo,WX,Azo,Lzo,yzo,jv,U_e,xzo,$zo,QX,kzo,Szo,Rzo,Dv,J_e,Pzo,Bzo,HX,Izo,Nzo,qzo,Gv,Y_e,jzo,Dzo,UX,Gzo,Ozo,Vzo,Ov,K_e,Xzo,zzo,JX,Wzo,Qzo,Hzo,Vv,Z_e,Uzo,Jzo,YX,Yzo,Kzo,Zzo,Xv,eWo,eue,oWo,rWo,oue,tWo,aWo,zv,PXe,nd,Wv,rue,dL,nWo,tue,sWo,BXe,Bo,cL,lWo,sd,iWo,KX,dWo,cWo,ZX,fWo,mWo,gWo,fL,hWo,aue,pWo,_Wo,uWo,gt,mL,bWo,nue,vWo,FWo,ld,TWo,sue,MWo,EWo,ez,CWo,wWo,AWo,Qv,LWo,ro,gL,yWo,lue,xWo,$Wo,Oa,kWo,iue,SWo,RWo,due,PWo,BWo,cue,IWo,NWo,qWo,Z,Hv,fue,jWo,DWo,oz,GWo,OWo,VWo,Uv,mue,XWo,zWo,rz,WWo,QWo,HWo,Jv,gue,UWo,JWo,tz,YWo,KWo,ZWo,Yv,hue,eQo,oQo,az,rQo,tQo,aQo,Kv,pue,nQo,sQo,nz,lQo,iQo,dQo,Zv,_ue,cQo,fQo,sz,mQo,gQo,hQo,e3,uue,pQo,_Qo,lz,uQo,bQo,vQo,o3,bue,FQo,TQo,iz,MQo,EQo,CQo,r3,vue,wQo,AQo,dz,LQo,yQo,xQo,t3,Fue,$Qo,kQo,cz,SQo,RQo,PQo,a3,Tue,BQo,IQo,fz,NQo,qQo,jQo,n3,Mue,DQo,GQo,mz,OQo,VQo,XQo,s3,Eue,zQo,WQo,gz,QQo,HQo,UQo,l3,Cue,JQo,YQo,hz,KQo,ZQo,eHo,i3,wue,oHo,rHo,pz,tHo,aHo,nHo,d3,Aue,sHo,lHo,_z,iHo,dHo,cHo,c3,Lue,fHo,mHo,uz,gHo,hHo,pHo,f3,yue,_Ho,uHo,bz,bHo,vHo,FHo,m3,xue,THo,MHo,vz,EHo,CHo,wHo,g3,$ue,AHo,LHo,Fz,yHo,xHo,$Ho,h3,kue,kHo,SHo,Tz,RHo,PHo,BHo,p3,Sue,IHo,NHo,Mz,qHo,jHo,DHo,_3,Rue,GHo,OHo,Ez,VHo,XHo,zHo,u3,Pue,WHo,QHo,Cz,HHo,UHo,JHo,b3,Bue,YHo,KHo,wz,ZHo,eUo,oUo,v3,Iue,rUo,tUo,Az,aUo,nUo,sUo,F3,Nue,lUo,iUo,Lz,dUo,cUo,fUo,T3,que,mUo,gUo,yz,hUo,pUo,_Uo,M3,jue,uUo,bUo,xz,vUo,FUo,TUo,E3,Due,MUo,EUo,$z,CUo,wUo,AUo,C3,LUo,Gue,yUo,xUo,Oue,$Uo,kUo,w3,IXe,id,A3,Vue,hL,SUo,Xue,RUo,NXe,Io,pL,PUo,dd,BUo,kz,IUo,NUo,Sz,qUo,jUo,DUo,_L,GUo,zue,OUo,VUo,XUo,ht,uL,zUo,Wue,WUo,QUo,cd,HUo,Que,UUo,JUo,Rz,YUo,KUo,ZUo,L3,eJo,to,bL,oJo,Hue,rJo,tJo,Va,aJo,Uue,nJo,sJo,Jue,lJo,iJo,Yue,dJo,cJo,fJo,No,y3,Kue,mJo,gJo,Pz,hJo,pJo,_Jo,x3,Zue,uJo,bJo,Bz,vJo,FJo,TJo,$3,e1e,MJo,EJo,Iz,CJo,wJo,AJo,k3,o1e,LJo,yJo,Nz,xJo,$Jo,kJo,S3,r1e,SJo,RJo,qz,PJo,BJo,IJo,R3,t1e,NJo,qJo,jz,jJo,DJo,GJo,P3,OJo,a1e,VJo,XJo,n1e,zJo,WJo,B3,qXe,fd,I3,s1e,vL,QJo,l1e,HJo,jXe,qo,FL,UJo,md,JJo,Dz,YJo,KJo,Gz,ZJo,eYo,oYo,TL,rYo,i1e,tYo,aYo,nYo,pt,ML,sYo,d1e,lYo,iYo,gd,dYo,c1e,cYo,fYo,Oz,mYo,gYo,hYo,N3,pYo,ao,EL,_Yo,f1e,uYo,bYo,Xa,vYo,m1e,FYo,TYo,g1e,MYo,EYo,h1e,CYo,wYo,AYo,U,q3,p1e,LYo,yYo,Vz,xYo,$Yo,kYo,j3,_1e,SYo,RYo,Xz,PYo,BYo,IYo,D3,u1e,NYo,qYo,zz,jYo,DYo,GYo,G3,b1e,OYo,VYo,Wz,XYo,zYo,WYo,O3,v1e,QYo,HYo,Qz,UYo,JYo,YYo,V3,F1e,KYo,ZYo,Hz,eKo,oKo,rKo,X3,T1e,tKo,aKo,Uz,nKo,sKo,lKo,z3,M1e,iKo,dKo,Jz,cKo,fKo,mKo,W3,E1e,gKo,hKo,Yz,pKo,_Ko,uKo,Q3,C1e,bKo,vKo,Kz,FKo,TKo,MKo,H3,w1e,EKo,CKo,Zz,wKo,AKo,LKo,U3,A1e,yKo,xKo,eW,$Ko,kKo,SKo,J3,L1e,RKo,PKo,oW,BKo,IKo,NKo,Y3,y1e,qKo,jKo,rW,DKo,GKo,OKo,K3,x1e,VKo,XKo,tW,zKo,WKo,QKo,Z3,$1e,HKo,UKo,aW,JKo,YKo,KKo,eF,k1e,ZKo,eZo,nW,oZo,rZo,tZo,oF,S1e,aZo,nZo,sW,sZo,lZo,iZo,rF,R1e,dZo,cZo,lW,fZo,mZo,gZo,tF,P1e,hZo,pZo,iW,_Zo,uZo,bZo,aF,B1e,vZo,FZo,dW,TZo,MZo,EZo,nF,I1e,CZo,wZo,cW,AZo,LZo,yZo,sF,N1e,xZo,$Zo,fW,kZo,SZo,RZo,lF,q1e,PZo,BZo,mW,IZo,NZo,qZo,iF,j1e,jZo,DZo,gW,GZo,OZo,VZo,dF,D1e,XZo,zZo,hW,WZo,QZo,HZo,cF,G1e,UZo,JZo,pW,YZo,KZo,ZZo,fF,O1e,eer,oer,_W,rer,ter,aer,mF,V1e,ner,ser,uW,ler,ier,der,gF,X1e,cer,fer,bW,mer,ger,her,hF,z1e,per,_er,vW,uer,ber,ver,pF,W1e,Fer,Ter,FW,Mer,Eer,Cer,_F,Q1e,wer,Aer,TW,Ler,yer,xer,uF,H1e,$er,ker,MW,Ser,Rer,Per,bF,U1e,Ber,Ier,EW,Ner,qer,jer,vF,J1e,Der,Ger,CW,Oer,Ver,Xer,FF,zer,Y1e,Wer,Qer,K1e,Her,Uer,TF,DXe,hd,MF,Z1e,CL,Jer,e2e,Yer,GXe,jo,wL,Ker,pd,Zer,wW,eor,oor,AW,ror,tor,aor,AL,nor,o2e,sor,lor,ior,_t,LL,dor,r2e,cor,mor,_d,gor,t2e,hor,por,LW,_or,uor,bor,EF,vor,no,yL,For,a2e,Tor,Mor,za,Eor,n2e,Cor,wor,s2e,Aor,Lor,l2e,yor,xor,$or,V,CF,i2e,kor,Sor,yW,Ror,Por,Bor,wF,d2e,Ior,Nor,xW,qor,jor,Dor,AF,c2e,Gor,Oor,$W,Vor,Xor,zor,LF,f2e,Wor,Qor,kW,Hor,Uor,Jor,yF,m2e,Yor,Kor,SW,Zor,err,orr,xF,g2e,rrr,trr,RW,arr,nrr,srr,$F,h2e,lrr,irr,PW,drr,crr,frr,kF,p2e,mrr,grr,BW,hrr,prr,_rr,SF,_2e,urr,brr,IW,vrr,Frr,Trr,RF,u2e,Mrr,Err,NW,Crr,wrr,Arr,PF,b2e,Lrr,yrr,qW,xrr,$rr,krr,BF,v2e,Srr,Rrr,jW,Prr,Brr,Irr,IF,F2e,Nrr,qrr,DW,jrr,Drr,Grr,NF,T2e,Orr,Vrr,GW,Xrr,zrr,Wrr,qF,M2e,Qrr,Hrr,OW,Urr,Jrr,Yrr,jF,E2e,Krr,Zrr,VW,etr,otr,rtr,DF,C2e,ttr,atr,XW,ntr,str,ltr,GF,w2e,itr,dtr,zW,ctr,ftr,mtr,OF,A2e,gtr,htr,WW,ptr,_tr,utr,VF,L2e,btr,vtr,QW,Ftr,Ttr,Mtr,XF,y2e,Etr,Ctr,HW,wtr,Atr,Ltr,zF,x2e,ytr,xtr,UW,$tr,ktr,Str,WF,$2e,Rtr,Ptr,JW,Btr,Itr,Ntr,QF,k2e,qtr,jtr,YW,Dtr,Gtr,Otr,HF,S2e,Vtr,Xtr,KW,ztr,Wtr,Qtr,UF,R2e,Htr,Utr,ZW,Jtr,Ytr,Ktr,JF,P2e,Ztr,ear,eQ,oar,rar,tar,YF,B2e,aar,nar,oQ,sar,lar,iar,KF,I2e,dar,car,rQ,far,mar,gar,ZF,N2e,har,par,tQ,_ar,uar,bar,eT,q2e,Far,Tar,aQ,Mar,Ear,Car,oT,j2e,war,Aar,nQ,Lar,yar,xar,rT,D2e,$ar,kar,sQ,Sar,Rar,Par,tT,G2e,Bar,Iar,lQ,Nar,qar,jar,aT,O2e,Dar,Gar,iQ,Oar,Var,Xar,nT,V2e,zar,War,dQ,Qar,Har,Uar,sT,X2e,Jar,Yar,cQ,Kar,Zar,enr,lT,z2e,onr,rnr,fQ,tnr,anr,nnr,iT,W2e,snr,lnr,mQ,inr,dnr,cnr,dT,Q2e,fnr,mnr,gQ,gnr,hnr,pnr,cT,H2e,_nr,unr,hQ,bnr,vnr,Fnr,fT,U2e,Tnr,Mnr,pQ,Enr,Cnr,wnr,mT,Anr,J2e,Lnr,ynr,Y2e,xnr,$nr,gT,OXe,ud,hT,K2e,xL,knr,Z2e,Snr,VXe,Do,$L,Rnr,bd,Pnr,_Q,Bnr,Inr,uQ,Nnr,qnr,jnr,kL,Dnr,ebe,Gnr,Onr,Vnr,ut,SL,Xnr,obe,znr,Wnr,vd,Qnr,rbe,Hnr,Unr,bQ,Jnr,Ynr,Knr,pT,Znr,so,RL,esr,tbe,osr,rsr,Wa,tsr,abe,asr,nsr,nbe,ssr,lsr,sbe,isr,dsr,csr,lbe,_T,ibe,fsr,msr,vQ,gsr,hsr,psr,uT,_sr,dbe,usr,bsr,cbe,vsr,Fsr,bT,XXe,Fd,vT,fbe,PL,Tsr,mbe,Msr,zXe,Go,BL,Esr,Td,Csr,FQ,wsr,Asr,TQ,Lsr,ysr,xsr,IL,$sr,gbe,ksr,Ssr,Rsr,bt,NL,Psr,hbe,Bsr,Isr,Md,Nsr,pbe,qsr,jsr,MQ,Dsr,Gsr,Osr,FT,Vsr,lo,qL,Xsr,_be,zsr,Wsr,Qa,Qsr,ube,Hsr,Usr,bbe,Jsr,Ysr,vbe,Ksr,Zsr,elr,ve,TT,Fbe,olr,rlr,EQ,tlr,alr,nlr,MT,Tbe,slr,llr,CQ,ilr,dlr,clr,ET,Mbe,flr,mlr,wQ,glr,hlr,plr,CT,Ebe,_lr,ulr,AQ,blr,vlr,Flr,Us,Cbe,Tlr,Mlr,LQ,Elr,Clr,yQ,wlr,Alr,Llr,wT,wbe,ylr,xlr,xQ,$lr,klr,Slr,Js,Abe,Rlr,Plr,$Q,Blr,Ilr,kQ,Nlr,qlr,jlr,AT,Lbe,Dlr,Glr,SQ,Olr,Vlr,Xlr,vt,ybe,zlr,Wlr,RQ,Qlr,Hlr,PQ,Ulr,Jlr,BQ,Ylr,Klr,Zlr,LT,xbe,eir,oir,IQ,rir,tir,air,yT,$be,nir,sir,NQ,lir,iir,dir,xT,kbe,cir,fir,qQ,mir,gir,hir,$T,Sbe,pir,_ir,jQ,uir,bir,vir,kT,Rbe,Fir,Tir,DQ,Mir,Eir,Cir,ST,Pbe,wir,Air,GQ,Lir,yir,xir,RT,Bbe,$ir,kir,OQ,Sir,Rir,Pir,PT,Bir,Ibe,Iir,Nir,Nbe,qir,jir,BT,WXe,Ed,IT,qbe,jL,Dir,jbe,Gir,QXe,Oo,DL,Oir,Cd,Vir,VQ,Xir,zir,XQ,Wir,Qir,Hir,GL,Uir,Dbe,Jir,Yir,Kir,Ft,OL,Zir,Gbe,edr,odr,wd,rdr,Obe,tdr,adr,zQ,ndr,sdr,ldr,NT,idr,io,VL,ddr,Vbe,cdr,fdr,Ha,mdr,Xbe,gdr,hdr,zbe,pdr,_dr,Wbe,udr,bdr,vdr,Qbe,qT,Hbe,Fdr,Tdr,WQ,Mdr,Edr,Cdr,jT,wdr,Ube,Adr,Ldr,Jbe,ydr,xdr,DT,HXe,Ad,GT,Ybe,XL,$dr,Kbe,kdr,UXe,Vo,zL,Sdr,Ld,Rdr,QQ,Pdr,Bdr,HQ,Idr,Ndr,qdr,WL,jdr,Zbe,Ddr,Gdr,Odr,Tt,QL,Vdr,eve,Xdr,zdr,yd,Wdr,ove,Qdr,Hdr,UQ,Udr,Jdr,Ydr,OT,Kdr,co,HL,Zdr,rve,ecr,ocr,Ua,rcr,tve,tcr,acr,ave,ncr,scr,nve,lcr,icr,dcr,sve,VT,lve,ccr,fcr,JQ,mcr,gcr,hcr,XT,pcr,ive,_cr,ucr,dve,bcr,vcr,zT,JXe,xd,WT,cve,UL,Fcr,fve,Tcr,YXe,Xo,JL,Mcr,$d,Ecr,YQ,Ccr,wcr,KQ,Acr,Lcr,ycr,YL,xcr,mve,$cr,kcr,Scr,Mt,KL,Rcr,gve,Pcr,Bcr,kd,Icr,hve,Ncr,qcr,ZQ,jcr,Dcr,Gcr,QT,Ocr,fo,ZL,Vcr,pve,Xcr,zcr,Ja,Wcr,_ve,Qcr,Hcr,uve,Ucr,Jcr,bve,Ycr,Kcr,Zcr,Pe,HT,vve,efr,ofr,eH,rfr,tfr,afr,UT,Fve,nfr,sfr,oH,lfr,ifr,dfr,JT,Tve,cfr,ffr,rH,mfr,gfr,hfr,YT,Mve,pfr,_fr,tH,ufr,bfr,vfr,KT,Eve,Ffr,Tfr,aH,Mfr,Efr,Cfr,ZT,Cve,wfr,Afr,nH,Lfr,yfr,xfr,e7,wve,$fr,kfr,sH,Sfr,Rfr,Pfr,o7,Ave,Bfr,Ifr,lH,Nfr,qfr,jfr,r7,Lve,Dfr,Gfr,iH,Ofr,Vfr,Xfr,t7,zfr,yve,Wfr,Qfr,xve,Hfr,Ufr,a7,KXe,Sd,n7,$ve,ey,Jfr,kve,Yfr,ZXe,zo,oy,Kfr,Rd,Zfr,dH,emr,omr,cH,rmr,tmr,amr,ry,nmr,Sve,smr,lmr,imr,Et,ty,dmr,Rve,cmr,fmr,Pd,mmr,Pve,gmr,hmr,fH,pmr,_mr,umr,s7,bmr,mo,ay,vmr,Bve,Fmr,Tmr,Ya,Mmr,Ive,Emr,Cmr,Nve,wmr,Amr,qve,Lmr,ymr,xmr,ot,l7,jve,$mr,kmr,mH,Smr,Rmr,Pmr,i7,Dve,Bmr,Imr,gH,Nmr,qmr,jmr,d7,Gve,Dmr,Gmr,hH,Omr,Vmr,Xmr,c7,Ove,zmr,Wmr,pH,Qmr,Hmr,Umr,f7,Vve,Jmr,Ymr,_H,Kmr,Zmr,egr,m7,ogr,Xve,rgr,tgr,zve,agr,ngr,g7,eze,Bd,h7,Wve,ny,sgr,Qve,lgr,oze,Wo,sy,igr,Id,dgr,uH,cgr,fgr,bH,mgr,ggr,hgr,ly,pgr,Hve,_gr,ugr,bgr,Ct,iy,vgr,Uve,Fgr,Tgr,Nd,Mgr,Jve,Egr,Cgr,vH,wgr,Agr,Lgr,p7,ygr,go,dy,xgr,Yve,$gr,kgr,Ka,Sgr,Kve,Rgr,Pgr,Zve,Bgr,Igr,e3e,Ngr,qgr,jgr,Le,_7,o3e,Dgr,Ggr,FH,Ogr,Vgr,Xgr,u7,r3e,zgr,Wgr,TH,Qgr,Hgr,Ugr,b7,t3e,Jgr,Ygr,MH,Kgr,Zgr,ehr,v7,a3e,ohr,rhr,EH,thr,ahr,nhr,F7,n3e,shr,lhr,CH,ihr,dhr,chr,T7,s3e,fhr,mhr,wH,ghr,hhr,phr,M7,l3e,_hr,uhr,AH,bhr,vhr,Fhr,E7,i3e,Thr,Mhr,LH,Ehr,Chr,whr,C7,d3e,Ahr,Lhr,yH,yhr,xhr,$hr,w7,c3e,khr,Shr,xH,Rhr,Phr,Bhr,A7,Ihr,f3e,Nhr,qhr,m3e,jhr,Dhr,L7,rze,qd,y7,g3e,cy,Ghr,h3e,Ohr,tze,Qo,fy,Vhr,jd,Xhr,$H,zhr,Whr,kH,Qhr,Hhr,Uhr,my,Jhr,p3e,Yhr,Khr,Zhr,wt,gy,epr,_3e,opr,rpr,Dd,tpr,u3e,apr,npr,SH,spr,lpr,ipr,x7,dpr,ho,hy,cpr,b3e,fpr,mpr,Za,gpr,v3e,hpr,ppr,F3e,_pr,upr,T3e,bpr,vpr,Fpr,py,$7,M3e,Tpr,Mpr,RH,Epr,Cpr,wpr,k7,E3e,Apr,Lpr,PH,ypr,xpr,$pr,S7,kpr,C3e,Spr,Rpr,w3e,Ppr,Bpr,R7,aze,Gd,P7,A3e,_y,Ipr,L3e,Npr,nze,Ho,uy,qpr,Od,jpr,BH,Dpr,Gpr,IH,Opr,Vpr,Xpr,by,zpr,y3e,Wpr,Qpr,Hpr,At,vy,Upr,x3e,Jpr,Ypr,Vd,Kpr,$3e,Zpr,e_r,NH,o_r,r_r,t_r,B7,a_r,po,Fy,n_r,k3e,s_r,l_r,en,i_r,S3e,d_r,c_r,R3e,f_r,m_r,P3e,g_r,h_r,p_r,rt,I7,B3e,__r,u_r,qH,b_r,v_r,F_r,N7,I3e,T_r,M_r,jH,E_r,C_r,w_r,q7,N3e,A_r,L_r,DH,y_r,x_r,$_r,j7,q3e,k_r,S_r,GH,R_r,P_r,B_r,D7,j3e,I_r,N_r,OH,q_r,j_r,D_r,G7,G_r,D3e,O_r,V_r,G3e,X_r,z_r,O7,sze,Xd,V7,O3e,Ty,W_r,V3e,Q_r,lze,Uo,My,H_r,zd,U_r,VH,J_r,Y_r,XH,K_r,Z_r,eur,Ey,our,X3e,rur,tur,aur,Lt,Cy,nur,z3e,sur,lur,Wd,iur,W3e,dur,cur,zH,fur,mur,gur,X7,hur,_o,wy,pur,Q3e,_ur,uur,on,bur,H3e,vur,Fur,U3e,Tur,Mur,J3e,Eur,Cur,wur,Qd,z7,Y3e,Aur,Lur,WH,yur,xur,$ur,W7,K3e,kur,Sur,QH,Rur,Pur,Bur,Q7,Z3e,Iur,Nur,HH,qur,jur,Dur,H7,Gur,eFe,Our,Vur,oFe,Xur,zur,U7,ize,Hd,J7,rFe,Ay,Wur,tFe,Qur,dze,Jo,Ly,Hur,Ud,Uur,UH,Jur,Yur,JH,Kur,Zur,e1r,yy,o1r,aFe,r1r,t1r,a1r,yt,xy,n1r,nFe,s1r,l1r,Jd,i1r,sFe,d1r,c1r,YH,f1r,m1r,g1r,Y7,h1r,uo,$y,p1r,lFe,_1r,u1r,rn,b1r,iFe,v1r,F1r,dFe,T1r,M1r,cFe,E1r,C1r,w1r,ky,K7,fFe,A1r,L1r,KH,y1r,x1r,$1r,Z7,mFe,k1r,S1r,ZH,R1r,P1r,B1r,e8,I1r,gFe,N1r,q1r,hFe,j1r,D1r,o8,cze,Yd,r8,pFe,Sy,G1r,_Fe,O1r,fze,Yo,Ry,V1r,Kd,X1r,eU,z1r,W1r,oU,Q1r,H1r,U1r,Py,J1r,uFe,Y1r,K1r,Z1r,xt,By,e2r,bFe,o2r,r2r,Zd,t2r,vFe,a2r,n2r,rU,s2r,l2r,i2r,t8,d2r,bo,Iy,c2r,FFe,f2r,m2r,tn,g2r,TFe,h2r,p2r,MFe,_2r,u2r,EFe,b2r,v2r,F2r,CFe,a8,wFe,T2r,M2r,tU,E2r,C2r,w2r,n8,A2r,AFe,L2r,y2r,LFe,x2r,$2r,s8,mze,ec,l8,yFe,Ny,k2r,xFe,S2r,gze,Ko,qy,R2r,oc,P2r,aU,B2r,I2r,nU,N2r,q2r,j2r,jy,D2r,$Fe,G2r,O2r,V2r,$t,Dy,X2r,kFe,z2r,W2r,rc,Q2r,SFe,H2r,U2r,sU,J2r,Y2r,K2r,i8,Z2r,vo,Gy,ebr,RFe,obr,rbr,an,tbr,PFe,abr,nbr,BFe,sbr,lbr,IFe,ibr,dbr,cbr,tt,d8,NFe,fbr,mbr,lU,gbr,hbr,pbr,c8,qFe,_br,ubr,iU,bbr,vbr,Fbr,f8,jFe,Tbr,Mbr,dU,Ebr,Cbr,wbr,m8,DFe,Abr,Lbr,cU,ybr,xbr,$br,g8,GFe,kbr,Sbr,fU,Rbr,Pbr,Bbr,h8,Ibr,OFe,Nbr,qbr,VFe,jbr,Dbr,p8,hze,tc,_8,XFe,Oy,Gbr,zFe,Obr,pze,Zo,Vy,Vbr,ac,Xbr,mU,zbr,Wbr,gU,Qbr,Hbr,Ubr,Xy,Jbr,WFe,Ybr,Kbr,Zbr,kt,zy,evr,QFe,ovr,rvr,nc,tvr,HFe,avr,nvr,hU,svr,lvr,ivr,u8,dvr,Fo,Wy,cvr,UFe,fvr,mvr,nn,gvr,JFe,hvr,pvr,YFe,_vr,uvr,KFe,bvr,vvr,Fvr,ZFe,b8,eTe,Tvr,Mvr,pU,Evr,Cvr,wvr,v8,Avr,oTe,Lvr,yvr,rTe,xvr,$vr,F8,_ze,sc,T8,tTe,Qy,kvr,aTe,Svr,uze,er,Hy,Rvr,lc,Pvr,_U,Bvr,Ivr,uU,Nvr,qvr,jvr,Uy,Dvr,nTe,Gvr,Ovr,Vvr,St,Jy,Xvr,sTe,zvr,Wvr,ic,Qvr,lTe,Hvr,Uvr,bU,Jvr,Yvr,Kvr,M8,Zvr,xr,Yy,e3r,iTe,o3r,r3r,sn,t3r,dTe,a3r,n3r,cTe,s3r,l3r,fTe,i3r,d3r,c3r,q,E8,mTe,f3r,m3r,vU,g3r,h3r,p3r,C8,gTe,_3r,u3r,FU,b3r,v3r,F3r,w8,hTe,T3r,M3r,TU,E3r,C3r,w3r,A8,pTe,A3r,L3r,MU,y3r,x3r,$3r,L8,_Te,k3r,S3r,EU,R3r,P3r,B3r,y8,uTe,I3r,N3r,CU,q3r,j3r,D3r,x8,bTe,G3r,O3r,wU,V3r,X3r,z3r,$8,vTe,W3r,Q3r,AU,H3r,U3r,J3r,k8,FTe,Y3r,K3r,LU,Z3r,eFr,oFr,S8,TTe,rFr,tFr,yU,aFr,nFr,sFr,R8,MTe,lFr,iFr,xU,dFr,cFr,fFr,P8,ETe,mFr,gFr,$U,hFr,pFr,_Fr,B8,CTe,uFr,bFr,kU,vFr,FFr,TFr,I8,wTe,MFr,EFr,SU,CFr,wFr,AFr,N8,ATe,LFr,yFr,RU,xFr,$Fr,kFr,q8,LTe,SFr,RFr,PU,PFr,BFr,IFr,j8,yTe,NFr,qFr,BU,jFr,DFr,GFr,Ys,xTe,OFr,VFr,IU,XFr,zFr,NU,WFr,QFr,HFr,D8,$Te,UFr,JFr,qU,YFr,KFr,ZFr,G8,kTe,eTr,oTr,jU,rTr,tTr,aTr,O8,STe,nTr,sTr,DU,lTr,iTr,dTr,V8,RTe,cTr,fTr,GU,mTr,gTr,hTr,X8,PTe,pTr,_Tr,OU,uTr,bTr,vTr,z8,BTe,FTr,TTr,VU,MTr,ETr,CTr,W8,ITe,wTr,ATr,XU,LTr,yTr,xTr,Q8,NTe,$Tr,kTr,zU,STr,RTr,PTr,H8,qTe,BTr,ITr,WU,NTr,qTr,jTr,U8,jTe,DTr,GTr,QU,OTr,VTr,XTr,J8,DTe,zTr,WTr,HU,QTr,HTr,UTr,Y8,GTe,JTr,YTr,UU,KTr,ZTr,e7r,K8,OTe,o7r,r7r,JU,t7r,a7r,n7r,Z8,VTe,s7r,l7r,YU,i7r,d7r,c7r,e9,XTe,f7r,m7r,KU,g7r,h7r,p7r,o9,zTe,_7r,u7r,ZU,b7r,v7r,F7r,r9,WTe,T7r,M7r,eJ,E7r,C7r,w7r,t9,QTe,A7r,L7r,oJ,y7r,x7r,$7r,a9,HTe,k7r,S7r,rJ,R7r,P7r,B7r,n9,UTe,I7r,N7r,tJ,q7r,j7r,D7r,s9,JTe,G7r,O7r,aJ,V7r,X7r,z7r,l9,YTe,W7r,Q7r,nJ,H7r,U7r,J7r,i9,KTe,Y7r,K7r,sJ,Z7r,e8r,o8r,d9,ZTe,r8r,t8r,lJ,a8r,n8r,s8r,c9,e7e,l8r,i8r,iJ,d8r,c8r,f8r,f9,o7e,m8r,g8r,dJ,h8r,p8r,_8r,m9,r7e,u8r,b8r,cJ,v8r,F8r,T8r,g9,t7e,M8r,E8r,fJ,C8r,w8r,A8r,h9,a7e,L8r,y8r,mJ,x8r,$8r,k8r,p9,n7e,S8r,R8r,gJ,P8r,B8r,I8r,_9,s7e,N8r,q8r,hJ,j8r,D8r,G8r,u9,bze,dc,b9,l7e,Ky,O8r,i7e,V8r,vze,or,Zy,X8r,cc,z8r,pJ,W8r,Q8r,_J,H8r,U8r,J8r,ex,Y8r,d7e,K8r,Z8r,e9r,Rt,ox,o9r,c7e,r9r,t9r,fc,a9r,f7e,n9r,s9r,uJ,l9r,i9r,d9r,v9,c9r,$r,rx,f9r,m7e,m9r,g9r,ln,h9r,g7e,p9r,_9r,h7e,u9r,b9r,p7e,v9r,F9r,T9r,se,F9,_7e,M9r,E9r,bJ,C9r,w9r,A9r,T9,u7e,L9r,y9r,vJ,x9r,$9r,k9r,M9,b7e,S9r,R9r,FJ,P9r,B9r,I9r,E9,v7e,N9r,q9r,TJ,j9r,D9r,G9r,C9,F7e,O9r,V9r,MJ,X9r,z9r,W9r,w9,T7e,Q9r,H9r,EJ,U9r,J9r,Y9r,A9,M7e,K9r,Z9r,CJ,eMr,oMr,rMr,L9,E7e,tMr,aMr,wJ,nMr,sMr,lMr,y9,C7e,iMr,dMr,AJ,cMr,fMr,mMr,x9,w7e,gMr,hMr,LJ,pMr,_Mr,uMr,$9,A7e,bMr,vMr,yJ,FMr,TMr,MMr,k9,L7e,EMr,CMr,xJ,wMr,AMr,LMr,S9,y7e,yMr,xMr,$J,$Mr,kMr,SMr,R9,x7e,RMr,PMr,kJ,BMr,IMr,NMr,P9,$7e,qMr,jMr,SJ,DMr,GMr,OMr,B9,k7e,VMr,XMr,RJ,zMr,WMr,QMr,I9,S7e,HMr,UMr,PJ,JMr,YMr,KMr,N9,R7e,ZMr,e4r,BJ,o4r,r4r,t4r,q9,P7e,a4r,n4r,IJ,s4r,l4r,i4r,j9,B7e,d4r,c4r,NJ,f4r,m4r,g4r,D9,I7e,h4r,p4r,qJ,_4r,u4r,b4r,G9,N7e,v4r,F4r,jJ,T4r,M4r,E4r,O9,q7e,C4r,w4r,DJ,A4r,L4r,y4r,V9,Fze,mc,X9,j7e,tx,x4r,D7e,$4r,Tze,rr,ax,k4r,gc,S4r,GJ,R4r,P4r,OJ,B4r,I4r,N4r,nx,q4r,G7e,j4r,D4r,G4r,Pt,sx,O4r,O7e,V4r,X4r,hc,z4r,V7e,W4r,Q4r,VJ,H4r,U4r,J4r,z9,Y4r,kr,lx,K4r,X7e,Z4r,eEr,dn,oEr,z7e,rEr,tEr,W7e,aEr,nEr,Q7e,sEr,lEr,iEr,Me,W9,H7e,dEr,cEr,XJ,fEr,mEr,gEr,Q9,U7e,hEr,pEr,zJ,_Er,uEr,bEr,H9,J7e,vEr,FEr,WJ,TEr,MEr,EEr,U9,Y7e,CEr,wEr,QJ,AEr,LEr,yEr,J9,K7e,xEr,$Er,HJ,kEr,SEr,REr,Y9,Z7e,PEr,BEr,UJ,IEr,NEr,qEr,K9,e8e,jEr,DEr,JJ,GEr,OEr,VEr,Z9,o8e,XEr,zEr,YJ,WEr,QEr,HEr,eM,r8e,UEr,JEr,KJ,YEr,KEr,ZEr,oM,t8e,eCr,oCr,ZJ,rCr,tCr,aCr,rM,a8e,nCr,sCr,eY,lCr,iCr,dCr,tM,n8e,cCr,fCr,oY,mCr,gCr,hCr,aM,s8e,pCr,_Cr,rY,uCr,bCr,vCr,nM,Mze,pc,sM,l8e,ix,FCr,i8e,TCr,Eze,tr,dx,MCr,_c,ECr,tY,CCr,wCr,aY,ACr,LCr,yCr,cx,xCr,d8e,$Cr,kCr,SCr,Bt,fx,RCr,c8e,PCr,BCr,uc,ICr,f8e,NCr,qCr,nY,jCr,DCr,GCr,lM,OCr,Sr,mx,VCr,m8e,XCr,zCr,cn,WCr,g8e,QCr,HCr,h8e,UCr,JCr,p8e,YCr,KCr,ZCr,ar,iM,_8e,e5r,o5r,sY,r5r,t5r,a5r,dM,u8e,n5r,s5r,lY,l5r,i5r,d5r,cM,b8e,c5r,f5r,iY,m5r,g5r,h5r,fM,v8e,p5r,_5r,dY,u5r,b5r,v5r,mM,F8e,F5r,T5r,cY,M5r,E5r,C5r,gM,T8e,w5r,A5r,fY,L5r,y5r,x5r,hM,Cze,bc,pM,M8e,gx,$5r,E8e,k5r,wze,nr,hx,S5r,vc,R5r,mY,P5r,B5r,gY,I5r,N5r,q5r,px,j5r,C8e,D5r,G5r,O5r,It,_x,V5r,w8e,X5r,z5r,Fc,W5r,A8e,Q5r,H5r,hY,U5r,J5r,Y5r,_M,K5r,Rr,ux,Z5r,L8e,e0r,o0r,fn,r0r,y8e,t0r,a0r,x8e,n0r,s0r,$8e,l0r,i0r,d0r,ie,uM,k8e,c0r,f0r,pY,m0r,g0r,h0r,bM,S8e,p0r,_0r,_Y,u0r,b0r,v0r,vM,R8e,F0r,T0r,uY,M0r,E0r,C0r,FM,P8e,w0r,A0r,bY,L0r,y0r,x0r,TM,B8e,$0r,k0r,vY,S0r,R0r,P0r,MM,I8e,B0r,I0r,FY,N0r,q0r,j0r,EM,N8e,D0r,G0r,TY,O0r,V0r,X0r,CM,q8e,z0r,W0r,MY,Q0r,H0r,U0r,wM,j8e,J0r,Y0r,EY,K0r,Z0r,ewr,AM,D8e,owr,rwr,CY,twr,awr,nwr,LM,G8e,swr,lwr,wY,iwr,dwr,cwr,yM,O8e,fwr,mwr,AY,gwr,hwr,pwr,xM,V8e,_wr,uwr,LY,bwr,vwr,Fwr,$M,X8e,Twr,Mwr,yY,Ewr,Cwr,wwr,kM,z8e,Awr,Lwr,xY,ywr,xwr,$wr,SM,W8e,kwr,Swr,$Y,Rwr,Pwr,Bwr,RM,Q8e,Iwr,Nwr,kY,qwr,jwr,Dwr,PM,H8e,Gwr,Owr,SY,Vwr,Xwr,zwr,BM,U8e,Wwr,Qwr,RY,Hwr,Uwr,Jwr,IM,J8e,Ywr,Kwr,PY,Zwr,eAr,oAr,NM,Aze,Tc,qM,Y8e,bx,rAr,K8e,tAr,Lze,sr,vx,aAr,Mc,nAr,BY,sAr,lAr,IY,iAr,dAr,cAr,Fx,fAr,Z8e,mAr,gAr,hAr,Nt,Tx,pAr,e9e,_Ar,uAr,Ec,bAr,o9e,vAr,FAr,NY,TAr,MAr,EAr,jM,CAr,Pr,Mx,wAr,r9e,AAr,LAr,mn,yAr,t9e,xAr,$Ar,a9e,kAr,SAr,n9e,RAr,PAr,BAr,ye,DM,s9e,IAr,NAr,qY,qAr,jAr,DAr,GM,l9e,GAr,OAr,jY,VAr,XAr,zAr,OM,i9e,WAr,QAr,DY,HAr,UAr,JAr,VM,d9e,YAr,KAr,GY,ZAr,e6r,o6r,XM,c9e,r6r,t6r,OY,a6r,n6r,s6r,zM,f9e,l6r,i6r,VY,d6r,c6r,f6r,WM,m9e,m6r,g6r,XY,h6r,p6r,_6r,QM,g9e,u6r,b6r,zY,v6r,F6r,T6r,HM,h9e,M6r,E6r,WY,C6r,w6r,A6r,UM,p9e,L6r,y6r,QY,x6r,$6r,k6r,JM,yze,Cc,YM,_9e,Ex,S6r,u9e,R6r,xze,lr,Cx,P6r,wc,B6r,HY,I6r,N6r,UY,q6r,j6r,D6r,wx,G6r,b9e,O6r,V6r,X6r,qt,Ax,z6r,v9e,W6r,Q6r,Ac,H6r,F9e,U6r,J6r,JY,Y6r,K6r,Z6r,KM,eLr,Br,Lx,oLr,T9e,rLr,tLr,gn,aLr,M9e,nLr,sLr,E9e,lLr,iLr,C9e,dLr,cLr,fLr,te,ZM,w9e,mLr,gLr,YY,hLr,pLr,_Lr,e4,A9e,uLr,bLr,KY,vLr,FLr,TLr,o4,L9e,MLr,ELr,ZY,CLr,wLr,ALr,r4,y9e,LLr,yLr,eK,xLr,$Lr,kLr,t4,x9e,SLr,RLr,oK,PLr,BLr,ILr,a4,$9e,NLr,qLr,rK,jLr,DLr,GLr,n4,k9e,OLr,VLr,tK,XLr,zLr,WLr,s4,S9e,QLr,HLr,aK,ULr,JLr,YLr,l4,R9e,KLr,ZLr,nK,eyr,oyr,ryr,i4,P9e,tyr,ayr,sK,nyr,syr,lyr,d4,B9e,iyr,dyr,lK,cyr,fyr,myr,c4,I9e,gyr,hyr,iK,pyr,_yr,uyr,f4,N9e,byr,vyr,dK,Fyr,Tyr,Myr,m4,q9e,Eyr,Cyr,cK,wyr,Ayr,Lyr,g4,j9e,yyr,xyr,fK,$yr,kyr,Syr,h4,D9e,Ryr,Pyr,mK,Byr,Iyr,Nyr,p4,G9e,qyr,jyr,gK,Dyr,Gyr,Oyr,_4,O9e,Vyr,Xyr,hK,zyr,Wyr,Qyr,u4,V9e,Hyr,Uyr,pK,Jyr,Yyr,Kyr,b4,X9e,Zyr,exr,_K,oxr,rxr,txr,v4,z9e,axr,nxr,uK,sxr,lxr,ixr,F4,W9e,dxr,cxr,bK,fxr,mxr,gxr,T4,Q9e,hxr,pxr,vK,_xr,uxr,bxr,M4,H9e,vxr,Fxr,FK,Txr,Mxr,Exr,E4,U9e,Cxr,wxr,TK,Axr,Lxr,yxr,C4,J9e,xxr,$xr,MK,kxr,Sxr,Rxr,w4,$ze,Lc,A4,Y9e,yx,Pxr,K9e,Bxr,kze,ir,xx,Ixr,yc,Nxr,EK,qxr,jxr,CK,Dxr,Gxr,Oxr,$x,Vxr,Z9e,Xxr,zxr,Wxr,jt,kx,Qxr,eMe,Hxr,Uxr,xc,Jxr,oMe,Yxr,Kxr,wK,Zxr,e$r,o$r,L4,r$r,Ir,Sx,t$r,rMe,a$r,n$r,hn,s$r,tMe,l$r,i$r,aMe,d$r,c$r,nMe,f$r,m$r,g$r,ue,y4,sMe,h$r,p$r,AK,_$r,u$r,b$r,x4,lMe,v$r,F$r,LK,T$r,M$r,E$r,$4,iMe,C$r,w$r,yK,A$r,L$r,y$r,k4,dMe,x$r,$$r,xK,k$r,S$r,R$r,S4,cMe,P$r,B$r,$K,I$r,N$r,q$r,R4,fMe,j$r,D$r,kK,G$r,O$r,V$r,P4,mMe,X$r,z$r,SK,W$r,Q$r,H$r,B4,gMe,U$r,J$r,RK,Y$r,K$r,Z$r,I4,hMe,ekr,okr,PK,rkr,tkr,akr,N4,pMe,nkr,skr,BK,lkr,ikr,dkr,q4,_Me,ckr,fkr,IK,mkr,gkr,hkr,j4,uMe,pkr,_kr,NK,ukr,bkr,vkr,D4,bMe,Fkr,Tkr,qK,Mkr,Ekr,Ckr,G4,vMe,wkr,Akr,jK,Lkr,ykr,xkr,O4,FMe,$kr,kkr,DK,Skr,Rkr,Pkr,V4,TMe,Bkr,Ikr,GK,Nkr,qkr,jkr,X4,MMe,Dkr,Gkr,OK,Okr,Vkr,Xkr,z4,Sze,$c,W4,EMe,Rx,zkr,CMe,Wkr,Rze,dr,Px,Qkr,kc,Hkr,VK,Ukr,Jkr,XK,Ykr,Kkr,Zkr,Bx,eSr,wMe,oSr,rSr,tSr,Dt,Ix,aSr,AMe,nSr,sSr,Sc,lSr,LMe,iSr,dSr,zK,cSr,fSr,mSr,Q4,gSr,Nr,Nx,hSr,yMe,pSr,_Sr,pn,uSr,xMe,bSr,vSr,$Me,FSr,TSr,kMe,MSr,ESr,CSr,qx,H4,SMe,wSr,ASr,WK,LSr,ySr,xSr,U4,RMe,$Sr,kSr,QK,SSr,RSr,PSr,J4,Pze,Rc,Y4,PMe,jx,BSr,BMe,ISr,Bze,cr,Dx,NSr,Pc,qSr,HK,jSr,DSr,UK,GSr,OSr,VSr,Gx,XSr,IMe,zSr,WSr,QSr,Gt,Ox,HSr,NMe,USr,JSr,Bc,YSr,qMe,KSr,ZSr,JK,eRr,oRr,rRr,K4,tRr,qr,Vx,aRr,jMe,nRr,sRr,_n,lRr,DMe,iRr,dRr,GMe,cRr,fRr,OMe,mRr,gRr,hRr,VMe,Z4,XMe,pRr,_Rr,YK,uRr,bRr,vRr,eE,Ize,Ic,oE,zMe,Xx,FRr,WMe,TRr,Nze,fr,zx,MRr,Nc,ERr,KK,CRr,wRr,ZK,ARr,LRr,yRr,Wx,xRr,QMe,$Rr,kRr,SRr,Ot,Qx,RRr,HMe,PRr,BRr,qc,IRr,UMe,NRr,qRr,eZ,jRr,DRr,GRr,rE,ORr,jr,Hx,VRr,JMe,XRr,zRr,un,WRr,YMe,QRr,HRr,KMe,URr,JRr,ZMe,YRr,KRr,ZRr,de,tE,e4e,ePr,oPr,oZ,rPr,tPr,aPr,aE,o4e,nPr,sPr,rZ,lPr,iPr,dPr,nE,r4e,cPr,fPr,tZ,mPr,gPr,hPr,sE,t4e,pPr,_Pr,aZ,uPr,bPr,vPr,lE,a4e,FPr,TPr,nZ,MPr,EPr,CPr,iE,n4e,wPr,APr,sZ,LPr,yPr,xPr,dE,s4e,$Pr,kPr,lZ,SPr,RPr,PPr,cE,l4e,BPr,IPr,iZ,NPr,qPr,jPr,fE,i4e,DPr,GPr,dZ,OPr,VPr,XPr,mE,d4e,zPr,WPr,cZ,QPr,HPr,UPr,gE,c4e,JPr,YPr,fZ,KPr,ZPr,eBr,hE,f4e,oBr,rBr,mZ,tBr,aBr,nBr,pE,m4e,sBr,lBr,gZ,iBr,dBr,cBr,_E,g4e,fBr,mBr,hZ,gBr,hBr,pBr,uE,h4e,_Br,uBr,pZ,bBr,vBr,FBr,bE,p4e,TBr,MBr,_Z,EBr,CBr,wBr,vE,_4e,ABr,LBr,uZ,yBr,xBr,$Br,FE,u4e,kBr,SBr,bZ,RBr,PBr,BBr,TE,b4e,IBr,NBr,vZ,qBr,jBr,DBr,ME,v4e,GBr,OBr,FZ,VBr,XBr,zBr,EE,qze,jc,CE,F4e,Ux,WBr,T4e,QBr,jze,mr,Jx,HBr,Dc,UBr,TZ,JBr,YBr,MZ,KBr,ZBr,eIr,Yx,oIr,M4e,rIr,tIr,aIr,Vt,Kx,nIr,E4e,sIr,lIr,Gc,iIr,C4e,dIr,cIr,EZ,fIr,mIr,gIr,wE,hIr,Dr,Zx,pIr,w4e,_Ir,uIr,bn,bIr,A4e,vIr,FIr,L4e,TIr,MIr,y4e,EIr,CIr,wIr,ce,AE,x4e,AIr,LIr,CZ,yIr,xIr,$Ir,LE,$4e,kIr,SIr,wZ,RIr,PIr,BIr,yE,k4e,IIr,NIr,AZ,qIr,jIr,DIr,xE,S4e,GIr,OIr,LZ,VIr,XIr,zIr,$E,R4e,WIr,QIr,yZ,HIr,UIr,JIr,kE,P4e,YIr,KIr,xZ,ZIr,eNr,oNr,SE,B4e,rNr,tNr,$Z,aNr,nNr,sNr,RE,I4e,lNr,iNr,kZ,dNr,cNr,fNr,PE,N4e,mNr,gNr,SZ,hNr,pNr,_Nr,BE,q4e,uNr,bNr,RZ,vNr,FNr,TNr,IE,j4e,MNr,ENr,PZ,CNr,wNr,ANr,NE,D4e,LNr,yNr,BZ,xNr,$Nr,kNr,qE,G4e,SNr,RNr,IZ,PNr,BNr,INr,jE,O4e,NNr,qNr,NZ,jNr,DNr,GNr,DE,V4e,ONr,VNr,qZ,XNr,zNr,WNr,GE,X4e,QNr,HNr,jZ,UNr,JNr,YNr,OE,z4e,KNr,ZNr,DZ,eqr,oqr,rqr,VE,W4e,tqr,aqr,GZ,nqr,sqr,lqr,XE,Q4e,iqr,dqr,OZ,cqr,fqr,mqr,zE,H4e,gqr,hqr,VZ,pqr,_qr,uqr,WE,Dze,Oc,QE,U4e,e$,bqr,J4e,vqr,Gze,gr,o$,Fqr,Vc,Tqr,XZ,Mqr,Eqr,zZ,Cqr,wqr,Aqr,r$,Lqr,Y4e,yqr,xqr,$qr,Xt,t$,kqr,K4e,Sqr,Rqr,Xc,Pqr,Z4e,Bqr,Iqr,WZ,Nqr,qqr,jqr,HE,Dqr,Gr,a$,Gqr,eEe,Oqr,Vqr,vn,Xqr,oEe,zqr,Wqr,rEe,Qqr,Hqr,tEe,Uqr,Jqr,Yqr,aEe,UE,nEe,Kqr,Zqr,QZ,ejr,ojr,rjr,JE,Oze,zc,YE,sEe,n$,tjr,lEe,ajr,Vze,hr,s$,njr,Wc,sjr,HZ,ljr,ijr,UZ,djr,cjr,fjr,l$,mjr,iEe,gjr,hjr,pjr,zt,i$,_jr,dEe,ujr,bjr,Qc,vjr,cEe,Fjr,Tjr,JZ,Mjr,Ejr,Cjr,KE,wjr,Or,d$,Ajr,fEe,Ljr,yjr,Fn,xjr,mEe,$jr,kjr,gEe,Sjr,Rjr,hEe,Pjr,Bjr,Ijr,pEe,ZE,_Ee,Njr,qjr,YZ,jjr,Djr,Gjr,eC,Xze,Hc,oC,uEe,c$,Ojr,bEe,Vjr,zze,pr,f$,Xjr,Uc,zjr,KZ,Wjr,Qjr,ZZ,Hjr,Ujr,Jjr,m$,Yjr,vEe,Kjr,Zjr,eDr,Wt,g$,oDr,FEe,rDr,tDr,Jc,aDr,TEe,nDr,sDr,eee,lDr,iDr,dDr,rC,cDr,Vr,h$,fDr,MEe,mDr,gDr,Tn,hDr,EEe,pDr,_Dr,CEe,uDr,bDr,wEe,vDr,FDr,TDr,oe,tC,AEe,MDr,EDr,oee,CDr,wDr,ADr,aC,LEe,LDr,yDr,ree,xDr,$Dr,kDr,nC,yEe,SDr,RDr,tee,PDr,BDr,IDr,sC,xEe,NDr,qDr,aee,jDr,DDr,GDr,lC,$Ee,ODr,VDr,nee,XDr,zDr,WDr,iC,kEe,QDr,HDr,see,UDr,JDr,YDr,dC,SEe,KDr,ZDr,lee,eGr,oGr,rGr,cC,REe,tGr,aGr,iee,nGr,sGr,lGr,fC,PEe,iGr,dGr,dee,cGr,fGr,mGr,mC,BEe,gGr,hGr,cee,pGr,_Gr,uGr,gC,IEe,bGr,vGr,fee,FGr,TGr,MGr,hC,NEe,EGr,CGr,mee,wGr,AGr,LGr,pC,qEe,yGr,xGr,gee,$Gr,kGr,SGr,_C,jEe,RGr,PGr,hee,BGr,IGr,NGr,uC,DEe,qGr,jGr,pee,DGr,GGr,OGr,bC,GEe,VGr,XGr,_ee,zGr,WGr,QGr,vC,OEe,HGr,UGr,uee,JGr,YGr,KGr,FC,VEe,ZGr,eOr,bee,oOr,rOr,tOr,TC,XEe,aOr,nOr,vee,sOr,lOr,iOr,MC,zEe,dOr,cOr,Fee,fOr,mOr,gOr,EC,WEe,hOr,pOr,Tee,_Or,uOr,bOr,CC,QEe,vOr,FOr,Mee,TOr,MOr,EOr,wC,HEe,COr,wOr,Eee,AOr,LOr,yOr,AC,UEe,xOr,$Or,Cee,kOr,SOr,ROr,LC,JEe,POr,BOr,wee,IOr,NOr,qOr,yC,YEe,jOr,DOr,Aee,GOr,OOr,VOr,xC,KEe,XOr,zOr,Lee,WOr,QOr,HOr,$C,Wze,Yc,kC,ZEe,p$,UOr,eCe,JOr,Qze,_r,_$,YOr,Kc,KOr,yee,ZOr,eVr,xee,oVr,rVr,tVr,u$,aVr,oCe,nVr,sVr,lVr,Qt,b$,iVr,rCe,dVr,cVr,Zc,fVr,tCe,mVr,gVr,$ee,hVr,pVr,_Vr,SC,uVr,Xr,v$,bVr,aCe,vVr,FVr,Mn,TVr,nCe,MVr,EVr,sCe,CVr,wVr,lCe,AVr,LVr,yVr,xe,RC,iCe,xVr,$Vr,kee,kVr,SVr,RVr,PC,dCe,PVr,BVr,See,IVr,NVr,qVr,BC,cCe,jVr,DVr,Ree,GVr,OVr,VVr,IC,fCe,XVr,zVr,Pee,WVr,QVr,HVr,NC,mCe,UVr,JVr,Bee,YVr,KVr,ZVr,qC,gCe,eXr,oXr,Iee,rXr,tXr,aXr,jC,hCe,nXr,sXr,Nee,lXr,iXr,dXr,DC,pCe,cXr,fXr,qee,mXr,gXr,hXr,GC,_Ce,pXr,_Xr,jee,uXr,bXr,vXr,OC,uCe,FXr,TXr,Dee,MXr,EXr,CXr,VC,Hze,ef,XC,bCe,F$,wXr,vCe,AXr,Uze,ur,T$,LXr,of,yXr,Gee,xXr,$Xr,Oee,kXr,SXr,RXr,M$,PXr,FCe,BXr,IXr,NXr,Ht,E$,qXr,TCe,jXr,DXr,rf,GXr,MCe,OXr,VXr,Vee,XXr,zXr,WXr,zC,QXr,zr,C$,HXr,ECe,UXr,JXr,En,YXr,CCe,KXr,ZXr,wCe,ezr,ozr,ACe,rzr,tzr,azr,Ee,WC,LCe,nzr,szr,Xee,lzr,izr,dzr,QC,yCe,czr,fzr,zee,mzr,gzr,hzr,HC,xCe,pzr,_zr,Wee,uzr,bzr,vzr,UC,$Ce,Fzr,Tzr,Qee,Mzr,Ezr,Czr,JC,kCe,wzr,Azr,Hee,Lzr,yzr,xzr,YC,SCe,$zr,kzr,Uee,Szr,Rzr,Pzr,KC,RCe,Bzr,Izr,Jee,Nzr,qzr,jzr,ZC,PCe,Dzr,Gzr,Yee,Ozr,Vzr,Xzr,e5,BCe,zzr,Wzr,Kee,Qzr,Hzr,Uzr,o5,ICe,Jzr,Yzr,Zee,Kzr,Zzr,eWr,r5,NCe,oWr,rWr,eoe,tWr,aWr,nWr,t5,qCe,sWr,lWr,ooe,iWr,dWr,cWr,a5,jCe,fWr,mWr,roe,gWr,hWr,pWr,n5,Jze,tf,s5,DCe,w$,_Wr,GCe,uWr,Yze,br,A$,bWr,af,vWr,toe,FWr,TWr,aoe,MWr,EWr,CWr,L$,wWr,OCe,AWr,LWr,yWr,Ut,y$,xWr,VCe,$Wr,kWr,nf,SWr,XCe,RWr,PWr,noe,BWr,IWr,NWr,l5,qWr,Wr,x$,jWr,zCe,DWr,GWr,Cn,OWr,WCe,VWr,XWr,QCe,zWr,WWr,HCe,QWr,HWr,UWr,$e,i5,UCe,JWr,YWr,soe,KWr,ZWr,eQr,d5,JCe,oQr,rQr,loe,tQr,aQr,nQr,c5,YCe,sQr,lQr,ioe,iQr,dQr,cQr,f5,KCe,fQr,mQr,doe,gQr,hQr,pQr,m5,ZCe,_Qr,uQr,coe,bQr,vQr,FQr,g5,e5e,TQr,MQr,foe,EQr,CQr,wQr,h5,o5e,AQr,LQr,moe,yQr,xQr,$Qr,p5,r5e,kQr,SQr,goe,RQr,PQr,BQr,_5,t5e,IQr,NQr,hoe,qQr,jQr,DQr,u5,a5e,GQr,OQr,poe,VQr,XQr,zQr,b5,Kze,sf,v5,n5e,$$,WQr,s5e,QQr,Zze,vr,k$,HQr,lf,UQr,_oe,JQr,YQr,uoe,KQr,ZQr,eHr,S$,oHr,l5e,rHr,tHr,aHr,Jt,R$,nHr,i5e,sHr,lHr,df,iHr,d5e,dHr,cHr,boe,fHr,mHr,gHr,F5,hHr,Qr,P$,pHr,c5e,_Hr,uHr,wn,bHr,f5e,vHr,FHr,m5e,THr,MHr,g5e,EHr,CHr,wHr,ke,T5,h5e,AHr,LHr,voe,yHr,xHr,$Hr,M5,p5e,kHr,SHr,Foe,RHr,PHr,BHr,E5,_5e,IHr,NHr,Toe,qHr,jHr,DHr,C5,u5e,GHr,OHr,Moe,VHr,XHr,zHr,w5,b5e,WHr,QHr,Eoe,HHr,UHr,JHr,A5,v5e,YHr,KHr,Coe,ZHr,eUr,oUr,L5,F5e,rUr,tUr,woe,aUr,nUr,sUr,y5,T5e,lUr,iUr,Aoe,dUr,cUr,fUr,x5,M5e,mUr,gUr,Loe,hUr,pUr,_Ur,$5,E5e,uUr,bUr,yoe,vUr,FUr,TUr,k5,eWe,cf,S5,C5e,B$,MUr,w5e,EUr,oWe,Fr,I$,CUr,ff,wUr,xoe,AUr,LUr,$oe,yUr,xUr,$Ur,N$,kUr,A5e,SUr,RUr,PUr,Yt,q$,BUr,L5e,IUr,NUr,mf,qUr,y5e,jUr,DUr,koe,GUr,OUr,VUr,R5,XUr,Hr,j$,zUr,x5e,WUr,QUr,An,HUr,$5e,UUr,JUr,k5e,YUr,KUr,S5e,ZUr,eJr,oJr,Se,P5,R5e,rJr,tJr,Soe,aJr,nJr,sJr,B5,P5e,lJr,iJr,Roe,dJr,cJr,fJr,I5,B5e,mJr,gJr,Poe,hJr,pJr,_Jr,N5,I5e,uJr,bJr,Boe,vJr,FJr,TJr,q5,N5e,MJr,EJr,Ioe,CJr,wJr,AJr,j5,q5e,LJr,yJr,Noe,xJr,$Jr,kJr,D5,j5e,SJr,RJr,qoe,PJr,BJr,IJr,G5,D5e,NJr,qJr,joe,jJr,DJr,GJr,O5,G5e,OJr,VJr,Doe,XJr,zJr,WJr,V5,O5e,QJr,HJr,Goe,UJr,JJr,YJr,X5,rWe,gf,z5,V5e,D$,KJr,X5e,ZJr,tWe,Tr,G$,eYr,hf,oYr,Ooe,rYr,tYr,Voe,aYr,nYr,sYr,O$,lYr,z5e,iYr,dYr,cYr,Kt,V$,fYr,W5e,mYr,gYr,pf,hYr,Q5e,pYr,_Yr,Xoe,uYr,bYr,vYr,W5,FYr,Ur,X$,TYr,H5e,MYr,EYr,Ln,CYr,U5e,wYr,AYr,J5e,LYr,yYr,Y5e,xYr,$Yr,kYr,Re,Q5,K5e,SYr,RYr,zoe,PYr,BYr,IYr,H5,Z5e,NYr,qYr,Woe,jYr,DYr,GYr,U5,e0e,OYr,VYr,Qoe,XYr,zYr,WYr,J5,o0e,QYr,HYr,Hoe,UYr,JYr,YYr,Y5,r0e,KYr,ZYr,Uoe,eKr,oKr,rKr,K5,t0e,tKr,aKr,Joe,nKr,sKr,lKr,Z5,a0e,iKr,dKr,Yoe,cKr,fKr,mKr,e0,n0e,gKr,hKr,Koe,pKr,_Kr,uKr,o0,s0e,bKr,vKr,Zoe,FKr,TKr,MKr,r0,l0e,EKr,CKr,ere,wKr,AKr,LKr,t0,aWe,_f,a0,i0e,z$,yKr,d0e,xKr,nWe,Mr,W$,$Kr,uf,kKr,ore,SKr,RKr,rre,PKr,BKr,IKr,Q$,NKr,c0e,qKr,jKr,DKr,Zt,H$,GKr,f0e,OKr,VKr,bf,XKr,m0e,zKr,WKr,tre,QKr,HKr,UKr,n0,JKr,Jr,U$,YKr,g0e,KKr,ZKr,yn,eZr,h0e,oZr,rZr,p0e,tZr,aZr,_0e,nZr,sZr,lZr,Ve,s0,u0e,iZr,dZr,are,cZr,fZr,mZr,l0,b0e,gZr,hZr,nre,pZr,_Zr,uZr,i0,v0e,bZr,vZr,sre,FZr,TZr,MZr,d0,F0e,EZr,CZr,lre,wZr,AZr,LZr,c0,T0e,yZr,xZr,ire,$Zr,kZr,SZr,f0,M0e,RZr,PZr,dre,BZr,IZr,NZr,m0,E0e,qZr,jZr,cre,DZr,GZr,OZr,g0,C0e,VZr,XZr,fre,zZr,WZr,QZr,h0,sWe,vf,p0,w0e,J$,HZr,A0e,UZr,lWe,Er,Y$,JZr,Ff,YZr,mre,KZr,ZZr,gre,eet,oet,ret,K$,tet,L0e,aet,net,set,ea,Z$,iet,y0e,det,cet,Tf,fet,x0e,met,get,hre,het,pet,_et,_0,uet,Yr,ek,bet,$0e,vet,Fet,xn,Tet,k0e,Met,Eet,S0e,Cet,wet,R0e,Aet,Let,yet,Xe,u0,P0e,xet,$et,pre,ket,Set,Ret,b0,B0e,Pet,Bet,_re,Iet,Net,qet,v0,I0e,jet,Det,ure,Get,Oet,Vet,F0,N0e,Xet,zet,bre,Wet,Qet,Het,T0,q0e,Uet,Jet,vre,Yet,Ket,Zet,M0,j0e,eot,oot,Fre,rot,tot,aot,E0,D0e,not,sot,Tre,lot,iot,dot,C0,G0e,cot,fot,Mre,mot,got,hot,w0,iWe,Mf,A0,O0e,ok,pot,V0e,_ot,dWe,Cr,rk,uot,Ef,bot,Ere,vot,Fot,Cre,Tot,Mot,Eot,tk,Cot,X0e,wot,Aot,Lot,oa,ak,yot,z0e,xot,$ot,Cf,kot,W0e,Sot,Rot,wre,Pot,Bot,Iot,L0,Not,Kr,nk,qot,Q0e,jot,Dot,$n,Got,H0e,Oot,Vot,U0e,Xot,zot,J0e,Wot,Qot,Hot,Y0e,y0,K0e,Uot,Jot,Are,Yot,Kot,Zot,x0,cWe,wf,$0,Z0e,sk,ert,ewe,ort,fWe,wr,lk,rrt,Af,trt,Lre,art,nrt,yre,srt,lrt,irt,ik,drt,owe,crt,frt,mrt,ra,dk,grt,rwe,hrt,prt,Lf,_rt,twe,urt,brt,xre,vrt,Frt,Trt,k0,Mrt,Zr,ck,Ert,awe,Crt,wrt,kn,Art,nwe,Lrt,yrt,swe,xrt,$rt,lwe,krt,Srt,Rrt,fk,S0,iwe,Prt,Brt,$re,Irt,Nrt,qrt,R0,dwe,jrt,Drt,kre,Grt,Ort,Vrt,P0,mWe,yf,B0,cwe,mk,Xrt,fwe,zrt,gWe,Ar,gk,Wrt,xf,Qrt,Sre,Hrt,Urt,Rre,Jrt,Yrt,Krt,hk,Zrt,mwe,ett,ott,rtt,ta,pk,ttt,gwe,att,ntt,$f,stt,hwe,ltt,itt,Pre,dtt,ctt,ftt,I0,mtt,et,_k,gtt,pwe,htt,ptt,Sn,_tt,_we,utt,btt,uwe,vtt,Ftt,bwe,Ttt,Mtt,Ett,vwe,N0,Fwe,Ctt,wtt,Bre,Att,Ltt,ytt,q0,hWe;return d=new re({}),Sa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),l6=new re({}),i6=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),jf=new xtt({props:{warning:!0,$$slots:{default:[hQt]},$$scope:{ctx:$}}}),d6=new re({}),c6=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/configuration_auto.py#L613"}}),g6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/configuration_auto.py#L636"}}),Kg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[pQt]},$$scope:{ctx:$}}}),h6=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/configuration_auto.py#L759"}}),p6=new re({}),_6=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/tokenization_auto.py#L404"}}),v6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17938/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/tokenization_auto.py#L418"}}),Ph=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[_Qt]},$$scope:{ctx:$}}}),F6=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/tokenization_auto.py#L617"}}),T6=new re({}),M6=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/feature_extraction_auto.py#L196"}}),w6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17938/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/feature_extraction_auto.py#L210"}}),bp=new xtt({props:{$$slots:{default:[uQt]},$$scope:{ctx:$}}}),vp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[bQt]},$$scope:{ctx:$}}}),A6=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/feature_extraction_auto.py#L337"}}),L6=new re({}),y6=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/processing_auto.py#L90"}}),k6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/processing_auto.py#L104"}}),Gp=new xtt({props:{$$slots:{default:[vQt]},$$scope:{ctx:$}}}),Op=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[FQt]},$$scope:{ctx:$}}}),S6=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/processing_auto.py#L257"}}),R6=new re({}),P6=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L783"}}),I6=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),zp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[TQt]},$$scope:{ctx:$}}}),N6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),Ju=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[MQt]},$$scope:{ctx:$}}}),q6=new re({}),j6=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L790"}}),G6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),Ku=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[EQt]},$$scope:{ctx:$}}}),O6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),z1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[CQt]},$$scope:{ctx:$}}}),V6=new re({}),X6=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L805"}}),W6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),Q1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[wQt]},$$scope:{ctx:$}}}),Q6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),B2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[AQt]},$$scope:{ctx:$}}}),H6=new re({}),U6=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L812"}}),Y6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),N2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[LQt]},$$scope:{ctx:$}}}),K6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),Eb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[yQt]},$$scope:{ctx:$}}}),Z6=new re({}),eL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L819"}}),rL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),wb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[xQt]},$$scope:{ctx:$}}}),tL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),zb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[$Qt]},$$scope:{ctx:$}}}),aL=new re({}),nL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L828"}}),lL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),Qb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[kQt]},$$scope:{ctx:$}}}),iL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),zv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[SQt]},$$scope:{ctx:$}}}),dL=new re({}),cL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L873"}}),mL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),Qv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[RQt]},$$scope:{ctx:$}}}),gL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),w3=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[PQt]},$$scope:{ctx:$}}}),hL=new re({}),pL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L880"}}),uL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),L3=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[BQt]},$$scope:{ctx:$}}}),bL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),B3=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[IQt]},$$scope:{ctx:$}}}),vL=new re({}),FL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L866"}}),ML=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),N3=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[NQt]},$$scope:{ctx:$}}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),TF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[qQt]},$$scope:{ctx:$}}}),CL=new re({}),wL=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L837"}}),LL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),EF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[jQt]},$$scope:{ctx:$}}}),yL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),gT=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[DQt]},$$scope:{ctx:$}}}),xL=new re({}),$L=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L844"}}),SL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),pT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[GQt]},$$scope:{ctx:$}}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),bT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[OQt]},$$scope:{ctx:$}}}),PL=new re({}),BL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L889"}}),NL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17938/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),FT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[VQt]},$$scope:{ctx:$}}}),qL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),BT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[XQt]},$$scope:{ctx:$}}}),jL=new re({}),DL=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L928"}}),OL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),NT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[zQt]},$$scope:{ctx:$}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),DT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[WQt]},$$scope:{ctx:$}}}),XL=new re({}),zL=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L855"}}),QL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),OT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[QQt]},$$scope:{ctx:$}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),zT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[HQt]},$$scope:{ctx:$}}}),UL=new re({}),JL=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L935"}}),KL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),QT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[UQt]},$$scope:{ctx:$}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),a7=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[JQt]},$$scope:{ctx:$}}}),ey=new re({}),oy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L958"}}),ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),s7=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[YQt]},$$scope:{ctx:$}}}),ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),g7=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[KQt]},$$scope:{ctx:$}}}),ny=new re({}),sy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L942"}}),iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),p7=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[ZQt]},$$scope:{ctx:$}}}),dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),L7=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[eHt]},$$scope:{ctx:$}}}),cy=new re({}),fy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L949"}}),gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),x7=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[oHt]},$$scope:{ctx:$}}}),hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),R7=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[rHt]},$$scope:{ctx:$}}}),_y=new re({}),uy=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L967"}}),vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),B7=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[tHt]},$$scope:{ctx:$}}}),Fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),O7=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[aHt]},$$scope:{ctx:$}}}),Ty=new re({}),My=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L974"}}),Cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),X7=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[nHt]},$$scope:{ctx:$}}}),wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),U7=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[sHt]},$$scope:{ctx:$}}}),Ay=new re({}),Ly=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L921"}}),xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),Y7=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[lHt]},$$scope:{ctx:$}}}),$y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),o8=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[iHt]},$$scope:{ctx:$}}}),Sy=new re({}),Ry=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L896"}}),By=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),t8=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[dHt]},$$scope:{ctx:$}}}),Iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),s8=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[cHt]},$$scope:{ctx:$}}}),Ny=new re({}),qy=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L903"}}),Dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),i8=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[fHt]},$$scope:{ctx:$}}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),p8=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[mHt]},$$scope:{ctx:$}}}),Oy=new re({}),Vy=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_auto.py#L912"}}),zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),u8=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[gHt]},$$scope:{ctx:$}}}),Wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),F8=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[hHt]},$$scope:{ctx:$}}}),Qy=new re({}),Hy=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),M8=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[pHt]},$$scope:{ctx:$}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),u9=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[_Ht]},$$scope:{ctx:$}}}),Ky=new re({}),Zy=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),ox=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),v9=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[uHt]},$$scope:{ctx:$}}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),V9=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[bHt]},$$scope:{ctx:$}}}),tx=new re({}),ax=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),sx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),z9=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[vHt]},$$scope:{ctx:$}}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),nM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[FHt]},$$scope:{ctx:$}}}),ix=new re({}),dx=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),fx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),lM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[THt]},$$scope:{ctx:$}}}),mx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),hM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[MHt]},$$scope:{ctx:$}}}),gx=new re({}),hx=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),_x=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),_M=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[EHt]},$$scope:{ctx:$}}}),ux=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),NM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[CHt]},$$scope:{ctx:$}}}),bx=new re({}),vx=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),Tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),jM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[wHt]},$$scope:{ctx:$}}}),Mx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),JM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[AHt]},$$scope:{ctx:$}}}),Ex=new re({}),Cx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L489"}}),Ax=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),KM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[LHt]},$$scope:{ctx:$}}}),Lx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),w4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[yHt]},$$scope:{ctx:$}}}),yx=new re({}),xx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L525"}}),kx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),L4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[xHt]},$$scope:{ctx:$}}}),Sx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),z4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[$Ht]},$$scope:{ctx:$}}}),Rx=new re({}),Px=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L532"}}),Ix=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),Q4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[kHt]},$$scope:{ctx:$}}}),Nx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),J4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[SHt]},$$scope:{ctx:$}}}),jx=new re({}),Dx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L505"}}),Ox=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),K4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[RHt]},$$scope:{ctx:$}}}),Vx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),eE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[PHt]},$$scope:{ctx:$}}}),Xx=new re({}),zx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),Qx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),rE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[BHt]},$$scope:{ctx:$}}}),Hx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),EE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[IHt]},$$scope:{ctx:$}}}),Ux=new re({}),Jx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L498"}}),Kx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),wE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[NHt]},$$scope:{ctx:$}}}),Zx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),WE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[qHt]},$$scope:{ctx:$}}}),e$=new re({}),o$=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L466"}}),t$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),HE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[jHt]},$$scope:{ctx:$}}}),a$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),JE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[DHt]},$$scope:{ctx:$}}}),n$=new re({}),s$=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_tf_auto.py#L541"}}),i$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),KE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[GHt]},$$scope:{ctx:$}}}),d$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),eC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[OHt]},$$scope:{ctx:$}}}),c$=new re({}),f$=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),g$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),rC=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[VHt]},$$scope:{ctx:$}}}),h$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),$C=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[XHt]},$$scope:{ctx:$}}}),p$=new re({}),_$=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),b$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),SC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[zHt]},$$scope:{ctx:$}}}),v$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),VC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[WHt]},$$scope:{ctx:$}}}),F$=new re({}),T$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),E$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),zC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[QHt]},$$scope:{ctx:$}}}),C$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),n5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[HHt]},$$scope:{ctx:$}}}),w$=new re({}),A$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),y$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),l5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[UHt]},$$scope:{ctx:$}}}),x$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),b5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[JHt]},$$scope:{ctx:$}}}),$$=new re({}),k$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),R$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),F5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[YHt]},$$scope:{ctx:$}}}),P$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),k5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[KHt]},$$scope:{ctx:$}}}),B$=new re({}),I$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),q$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),R5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[ZHt]},$$scope:{ctx:$}}}),j$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),X5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[eUt]},$$scope:{ctx:$}}}),D$=new re({}),G$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),V$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),W5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[oUt]},$$scope:{ctx:$}}}),X$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),t0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[rUt]},$$scope:{ctx:$}}}),z$=new re({}),W$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),H$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),n0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[tUt]},$$scope:{ctx:$}}}),U$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),h0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[aUt]},$$scope:{ctx:$}}}),J$=new re({}),Y$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),Z$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),_0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[nUt]},$$scope:{ctx:$}}}),ek=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),w0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[sUt]},$$scope:{ctx:$}}}),ok=new re({}),rk=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),ak=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),L0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[lUt]},$$scope:{ctx:$}}}),nk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),x0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[iUt]},$$scope:{ctx:$}}}),sk=new re({}),lk=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),dk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),k0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[dUt]},$$scope:{ctx:$}}}),ck=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),P0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[cUt]},$$scope:{ctx:$}}}),mk=new re({}),gk=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),pk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17938/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17938/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L389"}}),I0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[fUt]},$$scope:{ctx:$}}}),_k=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17938/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17938/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17938/src/transformers/models/auto/auto_factory.py#L417"}}),q0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[mUt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Li=o("Auto Classes"),Pf=l(),st=a("p"),yi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),xi=a("code"),t6=o("from_pretrained()"),Bf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),We=a("p"),$i=o("Instantiating one of "),Pn=a("a"),a6=o("AutoConfig"),Bn=o(", "),In=a("a"),n6=o("AutoModel"),ki=o(`, and
`),Nn=a("a"),s6=o("AutoTokenizer"),Si=o(" will directly create a class of the relevant architecture. For instance"),If=l(),F(Sa.$$.fragment),Qe=l(),Ae=a("p"),qS=o("will create a model that is an instance of "),Ri=a("a"),jS=o("BertModel"),DS=o("."),Co=l(),Ra=a("p"),GS=o("There is one class of "),Nf=a("code"),OS=o("AutoModel"),CHe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),dXe=l(),Pi=a("h2"),qf=a("a"),$ae=a("span"),F(l6.$$.fragment),wHe=l(),kae=a("span"),AHe=o("Extending the Auto Classes"),cXe=l(),qn=a("p"),LHe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Sae=a("code"),yHe=o("NewModel"),xHe=o(", make sure you have a "),Rae=a("code"),$He=o("NewModelConfig"),kHe=o(` then you can add those to the auto
classes like this:`),fXe=l(),F(i6.$$.fragment),mXe=l(),VS=a("p"),SHe=o("You will then be able to use the auto classes like you would usually do!"),gXe=l(),F(jf.$$.fragment),hXe=l(),Bi=a("h2"),Df=a("a"),Pae=a("span"),F(d6.$$.fragment),RHe=l(),Bae=a("span"),PHe=o("AutoConfig"),pXe=l(),wo=a("div"),F(c6.$$.fragment),BHe=l(),f6=a("p"),IHe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),XS=a("a"),NHe=o("from_pretrained()"),qHe=o(" class method."),jHe=l(),m6=a("p"),DHe=o("This class cannot be instantiated directly using "),Iae=a("code"),GHe=o("__init__()"),OHe=o(" (throws an error)."),VHe=l(),Lr=a("div"),F(g6.$$.fragment),XHe=l(),Nae=a("p"),zHe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),WHe=l(),Ii=a("p"),QHe=o("The configuration class to instantiate is selected based on the "),qae=a("code"),HHe=o("model_type"),UHe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),jae=a("code"),JHe=o("pretrained_model_name_or_path"),YHe=o(":"),KHe=l(),A=a("ul"),Gf=a("li"),Dae=a("strong"),ZHe=o("albert"),eUe=o(" \u2014 "),zS=a("a"),oUe=o("AlbertConfig"),rUe=o(" (ALBERT model)"),tUe=l(),Of=a("li"),Gae=a("strong"),aUe=o("bart"),nUe=o(" \u2014 "),WS=a("a"),sUe=o("BartConfig"),lUe=o(" (BART model)"),iUe=l(),Vf=a("li"),Oae=a("strong"),dUe=o("beit"),cUe=o(" \u2014 "),QS=a("a"),fUe=o("BeitConfig"),mUe=o(" (BEiT model)"),gUe=l(),Xf=a("li"),Vae=a("strong"),hUe=o("bert"),pUe=o(" \u2014 "),HS=a("a"),_Ue=o("BertConfig"),uUe=o(" (BERT model)"),bUe=l(),zf=a("li"),Xae=a("strong"),vUe=o("bert-generation"),FUe=o(" \u2014 "),US=a("a"),TUe=o("BertGenerationConfig"),MUe=o(" (Bert Generation model)"),EUe=l(),Wf=a("li"),zae=a("strong"),CUe=o("big_bird"),wUe=o(" \u2014 "),JS=a("a"),AUe=o("BigBirdConfig"),LUe=o(" (BigBird model)"),yUe=l(),Qf=a("li"),Wae=a("strong"),xUe=o("bigbird_pegasus"),$Ue=o(" \u2014 "),YS=a("a"),kUe=o("BigBirdPegasusConfig"),SUe=o(" (BigBird-Pegasus model)"),RUe=l(),Hf=a("li"),Qae=a("strong"),PUe=o("blenderbot"),BUe=o(" \u2014 "),KS=a("a"),IUe=o("BlenderbotConfig"),NUe=o(" (Blenderbot model)"),qUe=l(),Uf=a("li"),Hae=a("strong"),jUe=o("blenderbot-small"),DUe=o(" \u2014 "),ZS=a("a"),GUe=o("BlenderbotSmallConfig"),OUe=o(" (BlenderbotSmall model)"),VUe=l(),Jf=a("li"),Uae=a("strong"),XUe=o("bloom"),zUe=o(" \u2014 "),eR=a("a"),WUe=o("BloomConfig"),QUe=o(" (BLOOM model)"),HUe=l(),Yf=a("li"),Jae=a("strong"),UUe=o("camembert"),JUe=o(" \u2014 "),oR=a("a"),YUe=o("CamembertConfig"),KUe=o(" (CamemBERT model)"),ZUe=l(),Kf=a("li"),Yae=a("strong"),eJe=o("canine"),oJe=o(" \u2014 "),rR=a("a"),rJe=o("CanineConfig"),tJe=o(" (CANINE model)"),aJe=l(),Zf=a("li"),Kae=a("strong"),nJe=o("clip"),sJe=o(" \u2014 "),tR=a("a"),lJe=o("CLIPConfig"),iJe=o(" (CLIP model)"),dJe=l(),em=a("li"),Zae=a("strong"),cJe=o("codegen"),fJe=o(" \u2014 "),aR=a("a"),mJe=o("CodeGenConfig"),gJe=o(" (CodeGen model)"),hJe=l(),om=a("li"),ene=a("strong"),pJe=o("convbert"),_Je=o(" \u2014 "),nR=a("a"),uJe=o("ConvBertConfig"),bJe=o(" (ConvBERT model)"),vJe=l(),rm=a("li"),one=a("strong"),FJe=o("convnext"),TJe=o(" \u2014 "),sR=a("a"),MJe=o("ConvNextConfig"),EJe=o(" (ConvNeXT model)"),CJe=l(),tm=a("li"),rne=a("strong"),wJe=o("ctrl"),AJe=o(" \u2014 "),lR=a("a"),LJe=o("CTRLConfig"),yJe=o(" (CTRL model)"),xJe=l(),am=a("li"),tne=a("strong"),$Je=o("cvt"),kJe=o(" \u2014 "),iR=a("a"),SJe=o("CvtConfig"),RJe=o(" (CvT model)"),PJe=l(),nm=a("li"),ane=a("strong"),BJe=o("data2vec-audio"),IJe=o(" \u2014 "),dR=a("a"),NJe=o("Data2VecAudioConfig"),qJe=o(" (Data2VecAudio model)"),jJe=l(),sm=a("li"),nne=a("strong"),DJe=o("data2vec-text"),GJe=o(" \u2014 "),cR=a("a"),OJe=o("Data2VecTextConfig"),VJe=o(" (Data2VecText model)"),XJe=l(),lm=a("li"),sne=a("strong"),zJe=o("data2vec-vision"),WJe=o(" \u2014 "),fR=a("a"),QJe=o("Data2VecVisionConfig"),HJe=o(" (Data2VecVision model)"),UJe=l(),im=a("li"),lne=a("strong"),JJe=o("deberta"),YJe=o(" \u2014 "),mR=a("a"),KJe=o("DebertaConfig"),ZJe=o(" (DeBERTa model)"),eYe=l(),dm=a("li"),ine=a("strong"),oYe=o("deberta-v2"),rYe=o(" \u2014 "),gR=a("a"),tYe=o("DebertaV2Config"),aYe=o(" (DeBERTa-v2 model)"),nYe=l(),cm=a("li"),dne=a("strong"),sYe=o("decision_transformer"),lYe=o(" \u2014 "),hR=a("a"),iYe=o("DecisionTransformerConfig"),dYe=o(" (Decision Transformer model)"),cYe=l(),fm=a("li"),cne=a("strong"),fYe=o("deit"),mYe=o(" \u2014 "),pR=a("a"),gYe=o("DeiTConfig"),hYe=o(" (DeiT model)"),pYe=l(),mm=a("li"),fne=a("strong"),_Ye=o("detr"),uYe=o(" \u2014 "),_R=a("a"),bYe=o("DetrConfig"),vYe=o(" (DETR model)"),FYe=l(),gm=a("li"),mne=a("strong"),TYe=o("distilbert"),MYe=o(" \u2014 "),uR=a("a"),EYe=o("DistilBertConfig"),CYe=o(" (DistilBERT model)"),wYe=l(),hm=a("li"),gne=a("strong"),AYe=o("dpr"),LYe=o(" \u2014 "),bR=a("a"),yYe=o("DPRConfig"),xYe=o(" (DPR model)"),$Ye=l(),pm=a("li"),hne=a("strong"),kYe=o("dpt"),SYe=o(" \u2014 "),vR=a("a"),RYe=o("DPTConfig"),PYe=o(" (DPT model)"),BYe=l(),_m=a("li"),pne=a("strong"),IYe=o("electra"),NYe=o(" \u2014 "),FR=a("a"),qYe=o("ElectraConfig"),jYe=o(" (ELECTRA model)"),DYe=l(),um=a("li"),_ne=a("strong"),GYe=o("encoder-decoder"),OYe=o(" \u2014 "),TR=a("a"),VYe=o("EncoderDecoderConfig"),XYe=o(" (Encoder decoder model)"),zYe=l(),bm=a("li"),une=a("strong"),WYe=o("flaubert"),QYe=o(" \u2014 "),MR=a("a"),HYe=o("FlaubertConfig"),UYe=o(" (FlauBERT model)"),JYe=l(),vm=a("li"),bne=a("strong"),YYe=o("flava"),KYe=o(" \u2014 "),ER=a("a"),ZYe=o("FlavaConfig"),eKe=o(" (FLAVA model)"),oKe=l(),Fm=a("li"),vne=a("strong"),rKe=o("fnet"),tKe=o(" \u2014 "),CR=a("a"),aKe=o("FNetConfig"),nKe=o(" (FNet model)"),sKe=l(),Tm=a("li"),Fne=a("strong"),lKe=o("fsmt"),iKe=o(" \u2014 "),wR=a("a"),dKe=o("FSMTConfig"),cKe=o(" (FairSeq Machine-Translation model)"),fKe=l(),Mm=a("li"),Tne=a("strong"),mKe=o("funnel"),gKe=o(" \u2014 "),AR=a("a"),hKe=o("FunnelConfig"),pKe=o(" (Funnel Transformer model)"),_Ke=l(),Em=a("li"),Mne=a("strong"),uKe=o("glpn"),bKe=o(" \u2014 "),LR=a("a"),vKe=o("GLPNConfig"),FKe=o(" (GLPN model)"),TKe=l(),Cm=a("li"),Ene=a("strong"),MKe=o("gpt2"),EKe=o(" \u2014 "),yR=a("a"),CKe=o("GPT2Config"),wKe=o(" (OpenAI GPT-2 model)"),AKe=l(),wm=a("li"),Cne=a("strong"),LKe=o("gpt_neo"),yKe=o(" \u2014 "),xR=a("a"),xKe=o("GPTNeoConfig"),$Ke=o(" (GPT Neo model)"),kKe=l(),Am=a("li"),wne=a("strong"),SKe=o("gpt_neox"),RKe=o(" \u2014 "),$R=a("a"),PKe=o("GPTNeoXConfig"),BKe=o(" (GPT NeoX model)"),IKe=l(),Lm=a("li"),Ane=a("strong"),NKe=o("gptj"),qKe=o(" \u2014 "),kR=a("a"),jKe=o("GPTJConfig"),DKe=o(" (GPT-J model)"),GKe=l(),ym=a("li"),Lne=a("strong"),OKe=o("groupvit"),VKe=o(" \u2014 "),SR=a("a"),XKe=o("GroupViTConfig"),zKe=o(" (GroupViT model)"),WKe=l(),xm=a("li"),yne=a("strong"),QKe=o("hubert"),HKe=o(" \u2014 "),RR=a("a"),UKe=o("HubertConfig"),JKe=o(" (Hubert model)"),YKe=l(),$m=a("li"),xne=a("strong"),KKe=o("ibert"),ZKe=o(" \u2014 "),PR=a("a"),eZe=o("IBertConfig"),oZe=o(" (I-BERT model)"),rZe=l(),km=a("li"),$ne=a("strong"),tZe=o("imagegpt"),aZe=o(" \u2014 "),BR=a("a"),nZe=o("ImageGPTConfig"),sZe=o(" (ImageGPT model)"),lZe=l(),Sm=a("li"),kne=a("strong"),iZe=o("layoutlm"),dZe=o(" \u2014 "),IR=a("a"),cZe=o("LayoutLMConfig"),fZe=o(" (LayoutLM model)"),mZe=l(),Rm=a("li"),Sne=a("strong"),gZe=o("layoutlmv2"),hZe=o(" \u2014 "),NR=a("a"),pZe=o("LayoutLMv2Config"),_Ze=o(" (LayoutLMv2 model)"),uZe=l(),Pm=a("li"),Rne=a("strong"),bZe=o("layoutlmv3"),vZe=o(" \u2014 "),qR=a("a"),FZe=o("LayoutLMv3Config"),TZe=o(" (LayoutLMv3 model)"),MZe=l(),Bm=a("li"),Pne=a("strong"),EZe=o("led"),CZe=o(" \u2014 "),jR=a("a"),wZe=o("LEDConfig"),AZe=o(" (LED model)"),LZe=l(),Im=a("li"),Bne=a("strong"),yZe=o("levit"),xZe=o(" \u2014 "),DR=a("a"),$Ze=o("LevitConfig"),kZe=o(" (LeViT model)"),SZe=l(),Nm=a("li"),Ine=a("strong"),RZe=o("longformer"),PZe=o(" \u2014 "),GR=a("a"),BZe=o("LongformerConfig"),IZe=o(" (Longformer model)"),NZe=l(),qm=a("li"),Nne=a("strong"),qZe=o("longt5"),jZe=o(" \u2014 "),OR=a("a"),DZe=o("LongT5Config"),GZe=o(" (LongT5 model)"),OZe=l(),jm=a("li"),qne=a("strong"),VZe=o("luke"),XZe=o(" \u2014 "),VR=a("a"),zZe=o("LukeConfig"),WZe=o(" (LUKE model)"),QZe=l(),Dm=a("li"),jne=a("strong"),HZe=o("lxmert"),UZe=o(" \u2014 "),XR=a("a"),JZe=o("LxmertConfig"),YZe=o(" (LXMERT model)"),KZe=l(),Gm=a("li"),Dne=a("strong"),ZZe=o("m2m_100"),eeo=o(" \u2014 "),zR=a("a"),oeo=o("M2M100Config"),reo=o(" (M2M100 model)"),teo=l(),Om=a("li"),Gne=a("strong"),aeo=o("marian"),neo=o(" \u2014 "),WR=a("a"),seo=o("MarianConfig"),leo=o(" (Marian model)"),ieo=l(),Vm=a("li"),One=a("strong"),deo=o("maskformer"),ceo=o(" \u2014 "),QR=a("a"),feo=o("MaskFormerConfig"),meo=o(" (MaskFormer model)"),geo=l(),Xm=a("li"),Vne=a("strong"),heo=o("mbart"),peo=o(" \u2014 "),HR=a("a"),_eo=o("MBartConfig"),ueo=o(" (mBART model)"),beo=l(),zm=a("li"),Xne=a("strong"),veo=o("mctct"),Feo=o(" \u2014 "),UR=a("a"),Teo=o("MCTCTConfig"),Meo=o(" (M-CTC-T model)"),Eeo=l(),Wm=a("li"),zne=a("strong"),Ceo=o("megatron-bert"),weo=o(" \u2014 "),JR=a("a"),Aeo=o("MegatronBertConfig"),Leo=o(" (Megatron-BERT model)"),yeo=l(),Qm=a("li"),Wne=a("strong"),xeo=o("mobilebert"),$eo=o(" \u2014 "),YR=a("a"),keo=o("MobileBertConfig"),Seo=o(" (MobileBERT model)"),Reo=l(),Hm=a("li"),Qne=a("strong"),Peo=o("mobilevit"),Beo=o(" \u2014 "),KR=a("a"),Ieo=o("MobileViTConfig"),Neo=o(" (MobileViT model)"),qeo=l(),Um=a("li"),Hne=a("strong"),jeo=o("mpnet"),Deo=o(" \u2014 "),ZR=a("a"),Geo=o("MPNetConfig"),Oeo=o(" (MPNet model)"),Veo=l(),Jm=a("li"),Une=a("strong"),Xeo=o("mt5"),zeo=o(" \u2014 "),eP=a("a"),Weo=o("MT5Config"),Qeo=o(" (MT5 model)"),Heo=l(),Ym=a("li"),Jne=a("strong"),Ueo=o("mvp"),Jeo=o(" \u2014 "),oP=a("a"),Yeo=o("MvpConfig"),Keo=o(" (MVP model)"),Zeo=l(),Km=a("li"),Yne=a("strong"),eoo=o("nezha"),ooo=o(" \u2014 "),rP=a("a"),roo=o("NezhaConfig"),too=o(" (Nezha model)"),aoo=l(),Zm=a("li"),Kne=a("strong"),noo=o("nystromformer"),soo=o(" \u2014 "),tP=a("a"),loo=o("NystromformerConfig"),ioo=o(" (Nystr\xF6mformer model)"),doo=l(),eg=a("li"),Zne=a("strong"),coo=o("openai-gpt"),foo=o(" \u2014 "),aP=a("a"),moo=o("OpenAIGPTConfig"),goo=o(" (OpenAI GPT model)"),hoo=l(),og=a("li"),ese=a("strong"),poo=o("opt"),_oo=o(" \u2014 "),nP=a("a"),uoo=o("OPTConfig"),boo=o(" (OPT model)"),voo=l(),rg=a("li"),ose=a("strong"),Foo=o("owlvit"),Too=o(" \u2014 "),sP=a("a"),Moo=o("OwlViTConfig"),Eoo=o(" (OWL-ViT model)"),Coo=l(),tg=a("li"),rse=a("strong"),woo=o("pegasus"),Aoo=o(" \u2014 "),lP=a("a"),Loo=o("PegasusConfig"),yoo=o(" (Pegasus model)"),xoo=l(),ag=a("li"),tse=a("strong"),$oo=o("perceiver"),koo=o(" \u2014 "),iP=a("a"),Soo=o("PerceiverConfig"),Roo=o(" (Perceiver model)"),Poo=l(),ng=a("li"),ase=a("strong"),Boo=o("plbart"),Ioo=o(" \u2014 "),dP=a("a"),Noo=o("PLBartConfig"),qoo=o(" (PLBart model)"),joo=l(),sg=a("li"),nse=a("strong"),Doo=o("poolformer"),Goo=o(" \u2014 "),cP=a("a"),Ooo=o("PoolFormerConfig"),Voo=o(" (PoolFormer model)"),Xoo=l(),lg=a("li"),sse=a("strong"),zoo=o("prophetnet"),Woo=o(" \u2014 "),fP=a("a"),Qoo=o("ProphetNetConfig"),Hoo=o(" (ProphetNet model)"),Uoo=l(),ig=a("li"),lse=a("strong"),Joo=o("qdqbert"),Yoo=o(" \u2014 "),mP=a("a"),Koo=o("QDQBertConfig"),Zoo=o(" (QDQBert model)"),ero=l(),dg=a("li"),ise=a("strong"),oro=o("rag"),rro=o(" \u2014 "),gP=a("a"),tro=o("RagConfig"),aro=o(" (RAG model)"),nro=l(),cg=a("li"),dse=a("strong"),sro=o("realm"),lro=o(" \u2014 "),hP=a("a"),iro=o("RealmConfig"),dro=o(" (REALM model)"),cro=l(),fg=a("li"),cse=a("strong"),fro=o("reformer"),mro=o(" \u2014 "),pP=a("a"),gro=o("ReformerConfig"),hro=o(" (Reformer model)"),pro=l(),mg=a("li"),fse=a("strong"),_ro=o("regnet"),uro=o(" \u2014 "),_P=a("a"),bro=o("RegNetConfig"),vro=o(" (RegNet model)"),Fro=l(),gg=a("li"),mse=a("strong"),Tro=o("rembert"),Mro=o(" \u2014 "),uP=a("a"),Ero=o("RemBertConfig"),Cro=o(" (RemBERT model)"),wro=l(),hg=a("li"),gse=a("strong"),Aro=o("resnet"),Lro=o(" \u2014 "),bP=a("a"),yro=o("ResNetConfig"),xro=o(" (ResNet model)"),$ro=l(),pg=a("li"),hse=a("strong"),kro=o("retribert"),Sro=o(" \u2014 "),vP=a("a"),Rro=o("RetriBertConfig"),Pro=o(" (RetriBERT model)"),Bro=l(),_g=a("li"),pse=a("strong"),Iro=o("roberta"),Nro=o(" \u2014 "),FP=a("a"),qro=o("RobertaConfig"),jro=o(" (RoBERTa model)"),Dro=l(),ug=a("li"),_se=a("strong"),Gro=o("roformer"),Oro=o(" \u2014 "),TP=a("a"),Vro=o("RoFormerConfig"),Xro=o(" (RoFormer model)"),zro=l(),bg=a("li"),use=a("strong"),Wro=o("segformer"),Qro=o(" \u2014 "),MP=a("a"),Hro=o("SegformerConfig"),Uro=o(" (SegFormer model)"),Jro=l(),vg=a("li"),bse=a("strong"),Yro=o("sew"),Kro=o(" \u2014 "),EP=a("a"),Zro=o("SEWConfig"),eto=o(" (SEW model)"),oto=l(),Fg=a("li"),vse=a("strong"),rto=o("sew-d"),tto=o(" \u2014 "),CP=a("a"),ato=o("SEWDConfig"),nto=o(" (SEW-D model)"),sto=l(),Tg=a("li"),Fse=a("strong"),lto=o("speech-encoder-decoder"),ito=o(" \u2014 "),wP=a("a"),dto=o("SpeechEncoderDecoderConfig"),cto=o(" (Speech Encoder decoder model)"),fto=l(),Mg=a("li"),Tse=a("strong"),mto=o("speech_to_text"),gto=o(" \u2014 "),AP=a("a"),hto=o("Speech2TextConfig"),pto=o(" (Speech2Text model)"),_to=l(),Eg=a("li"),Mse=a("strong"),uto=o("speech_to_text_2"),bto=o(" \u2014 "),LP=a("a"),vto=o("Speech2Text2Config"),Fto=o(" (Speech2Text2 model)"),Tto=l(),Cg=a("li"),Ese=a("strong"),Mto=o("splinter"),Eto=o(" \u2014 "),yP=a("a"),Cto=o("SplinterConfig"),wto=o(" (Splinter model)"),Ato=l(),wg=a("li"),Cse=a("strong"),Lto=o("squeezebert"),yto=o(" \u2014 "),xP=a("a"),xto=o("SqueezeBertConfig"),$to=o(" (SqueezeBERT model)"),kto=l(),Ag=a("li"),wse=a("strong"),Sto=o("swin"),Rto=o(" \u2014 "),$P=a("a"),Pto=o("SwinConfig"),Bto=o(" (Swin Transformer model)"),Ito=l(),Lg=a("li"),Ase=a("strong"),Nto=o("t5"),qto=o(" \u2014 "),kP=a("a"),jto=o("T5Config"),Dto=o(" (T5 model)"),Gto=l(),yg=a("li"),Lse=a("strong"),Oto=o("tapas"),Vto=o(" \u2014 "),SP=a("a"),Xto=o("TapasConfig"),zto=o(" (TAPAS model)"),Wto=l(),xg=a("li"),yse=a("strong"),Qto=o("trajectory_transformer"),Hto=o(" \u2014 "),RP=a("a"),Uto=o("TrajectoryTransformerConfig"),Jto=o(" (Trajectory Transformer model)"),Yto=l(),$g=a("li"),xse=a("strong"),Kto=o("transfo-xl"),Zto=o(" \u2014 "),PP=a("a"),eao=o("TransfoXLConfig"),oao=o(" (Transformer-XL model)"),rao=l(),kg=a("li"),$se=a("strong"),tao=o("trocr"),aao=o(" \u2014 "),BP=a("a"),nao=o("TrOCRConfig"),sao=o(" (TrOCR model)"),lao=l(),Sg=a("li"),kse=a("strong"),iao=o("unispeech"),dao=o(" \u2014 "),IP=a("a"),cao=o("UniSpeechConfig"),fao=o(" (UniSpeech model)"),mao=l(),Rg=a("li"),Sse=a("strong"),gao=o("unispeech-sat"),hao=o(" \u2014 "),NP=a("a"),pao=o("UniSpeechSatConfig"),_ao=o(" (UniSpeechSat model)"),uao=l(),Pg=a("li"),Rse=a("strong"),bao=o("van"),vao=o(" \u2014 "),qP=a("a"),Fao=o("VanConfig"),Tao=o(" (VAN model)"),Mao=l(),Bg=a("li"),Pse=a("strong"),Eao=o("vilt"),Cao=o(" \u2014 "),jP=a("a"),wao=o("ViltConfig"),Aao=o(" (ViLT model)"),Lao=l(),Ig=a("li"),Bse=a("strong"),yao=o("vision-encoder-decoder"),xao=o(" \u2014 "),DP=a("a"),$ao=o("VisionEncoderDecoderConfig"),kao=o(" (Vision Encoder decoder model)"),Sao=l(),Ng=a("li"),Ise=a("strong"),Rao=o("vision-text-dual-encoder"),Pao=o(" \u2014 "),GP=a("a"),Bao=o("VisionTextDualEncoderConfig"),Iao=o(" (VisionTextDualEncoder model)"),Nao=l(),qg=a("li"),Nse=a("strong"),qao=o("visual_bert"),jao=o(" \u2014 "),OP=a("a"),Dao=o("VisualBertConfig"),Gao=o(" (VisualBERT model)"),Oao=l(),jg=a("li"),qse=a("strong"),Vao=o("vit"),Xao=o(" \u2014 "),VP=a("a"),zao=o("ViTConfig"),Wao=o(" (ViT model)"),Qao=l(),Dg=a("li"),jse=a("strong"),Hao=o("vit_mae"),Uao=o(" \u2014 "),XP=a("a"),Jao=o("ViTMAEConfig"),Yao=o(" (ViTMAE model)"),Kao=l(),Gg=a("li"),Dse=a("strong"),Zao=o("wav2vec2"),eno=o(" \u2014 "),zP=a("a"),ono=o("Wav2Vec2Config"),rno=o(" (Wav2Vec2 model)"),tno=l(),Og=a("li"),Gse=a("strong"),ano=o("wav2vec2-conformer"),nno=o(" \u2014 "),WP=a("a"),sno=o("Wav2Vec2ConformerConfig"),lno=o(" (Wav2Vec2-Conformer model)"),ino=l(),Vg=a("li"),Ose=a("strong"),dno=o("wavlm"),cno=o(" \u2014 "),QP=a("a"),fno=o("WavLMConfig"),mno=o(" (WavLM model)"),gno=l(),Xg=a("li"),Vse=a("strong"),hno=o("xglm"),pno=o(" \u2014 "),HP=a("a"),_no=o("XGLMConfig"),uno=o(" (XGLM model)"),bno=l(),zg=a("li"),Xse=a("strong"),vno=o("xlm"),Fno=o(" \u2014 "),UP=a("a"),Tno=o("XLMConfig"),Mno=o(" (XLM model)"),Eno=l(),Wg=a("li"),zse=a("strong"),Cno=o("xlm-prophetnet"),wno=o(" \u2014 "),JP=a("a"),Ano=o("XLMProphetNetConfig"),Lno=o(" (XLM-ProphetNet model)"),yno=l(),Qg=a("li"),Wse=a("strong"),xno=o("xlm-roberta"),$no=o(" \u2014 "),YP=a("a"),kno=o("XLMRobertaConfig"),Sno=o(" (XLM-RoBERTa model)"),Rno=l(),Hg=a("li"),Qse=a("strong"),Pno=o("xlm-roberta-xl"),Bno=o(" \u2014 "),KP=a("a"),Ino=o("XLMRobertaXLConfig"),Nno=o(" (XLM-RoBERTa-XL model)"),qno=l(),Ug=a("li"),Hse=a("strong"),jno=o("xlnet"),Dno=o(" \u2014 "),ZP=a("a"),Gno=o("XLNetConfig"),Ono=o(" (XLNet model)"),Vno=l(),Jg=a("li"),Use=a("strong"),Xno=o("yolos"),zno=o(" \u2014 "),eB=a("a"),Wno=o("YolosConfig"),Qno=o(" (YOLOS model)"),Hno=l(),Yg=a("li"),Jse=a("strong"),Uno=o("yoso"),Jno=o(" \u2014 "),oB=a("a"),Yno=o("YosoConfig"),Kno=o(" (YOSO model)"),Zno=l(),F(Kg.$$.fragment),eso=l(),Zg=a("div"),F(h6.$$.fragment),oso=l(),Yse=a("p"),rso=o("Register a new configuration for this class."),_Xe=l(),Ni=a("h2"),eh=a("a"),Kse=a("span"),F(p6.$$.fragment),tso=l(),Zse=a("span"),aso=o("AutoTokenizer"),uXe=l(),Ao=a("div"),F(_6.$$.fragment),nso=l(),u6=a("p"),sso=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),rB=a("a"),lso=o("AutoTokenizer.from_pretrained()"),iso=o(" class method."),dso=l(),b6=a("p"),cso=o("This class cannot be instantiated directly using "),ele=a("code"),fso=o("__init__()"),mso=o(" (throws an error)."),gso=l(),yr=a("div"),F(v6.$$.fragment),hso=l(),ole=a("p"),pso=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),_so=l(),Pa=a("p"),uso=o("The tokenizer class to instantiate is selected based on the "),rle=a("code"),bso=o("model_type"),vso=o(` property of the config object (either
passed as an argument or loaded from `),tle=a("code"),Fso=o("pretrained_model_name_or_path"),Tso=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ale=a("code"),Mso=o("pretrained_model_name_or_path"),Eso=o(":"),Cso=l(),k=a("ul"),jn=a("li"),nle=a("strong"),wso=o("albert"),Aso=o(" \u2014 "),tB=a("a"),Lso=o("AlbertTokenizer"),yso=o(" or "),aB=a("a"),xso=o("AlbertTokenizerFast"),$so=o(" (ALBERT model)"),kso=l(),Dn=a("li"),sle=a("strong"),Sso=o("bart"),Rso=o(" \u2014 "),nB=a("a"),Pso=o("BartTokenizer"),Bso=o(" or "),sB=a("a"),Iso=o("BartTokenizerFast"),Nso=o(" (BART model)"),qso=l(),Gn=a("li"),lle=a("strong"),jso=o("barthez"),Dso=o(" \u2014 "),lB=a("a"),Gso=o("BarthezTokenizer"),Oso=o(" or "),iB=a("a"),Vso=o("BarthezTokenizerFast"),Xso=o(" (BARThez model)"),zso=l(),oh=a("li"),ile=a("strong"),Wso=o("bartpho"),Qso=o(" \u2014 "),dB=a("a"),Hso=o("BartphoTokenizer"),Uso=o(" (BARTpho model)"),Jso=l(),On=a("li"),dle=a("strong"),Yso=o("bert"),Kso=o(" \u2014 "),cB=a("a"),Zso=o("BertTokenizer"),elo=o(" or "),fB=a("a"),olo=o("BertTokenizerFast"),rlo=o(" (BERT model)"),tlo=l(),rh=a("li"),cle=a("strong"),alo=o("bert-generation"),nlo=o(" \u2014 "),mB=a("a"),slo=o("BertGenerationTokenizer"),llo=o(" (Bert Generation model)"),ilo=l(),th=a("li"),fle=a("strong"),dlo=o("bert-japanese"),clo=o(" \u2014 "),gB=a("a"),flo=o("BertJapaneseTokenizer"),mlo=o(" (BertJapanese model)"),glo=l(),ah=a("li"),mle=a("strong"),hlo=o("bertweet"),plo=o(" \u2014 "),hB=a("a"),_lo=o("BertweetTokenizer"),ulo=o(" (BERTweet model)"),blo=l(),Vn=a("li"),gle=a("strong"),vlo=o("big_bird"),Flo=o(" \u2014 "),pB=a("a"),Tlo=o("BigBirdTokenizer"),Mlo=o(" or "),_B=a("a"),Elo=o("BigBirdTokenizerFast"),Clo=o(" (BigBird model)"),wlo=l(),Xn=a("li"),hle=a("strong"),Alo=o("bigbird_pegasus"),Llo=o(" \u2014 "),uB=a("a"),ylo=o("PegasusTokenizer"),xlo=o(" or "),bB=a("a"),$lo=o("PegasusTokenizerFast"),klo=o(" (BigBird-Pegasus model)"),Slo=l(),zn=a("li"),ple=a("strong"),Rlo=o("blenderbot"),Plo=o(" \u2014 "),vB=a("a"),Blo=o("BlenderbotTokenizer"),Ilo=o(" or "),FB=a("a"),Nlo=o("BlenderbotTokenizerFast"),qlo=o(" (Blenderbot model)"),jlo=l(),nh=a("li"),_le=a("strong"),Dlo=o("blenderbot-small"),Glo=o(" \u2014 "),TB=a("a"),Olo=o("BlenderbotSmallTokenizer"),Vlo=o(" (BlenderbotSmall model)"),Xlo=l(),sh=a("li"),ule=a("strong"),zlo=o("bloom"),Wlo=o(" \u2014 "),MB=a("a"),Qlo=o("BloomTokenizerFast"),Hlo=o(" (BLOOM model)"),Ulo=l(),lh=a("li"),ble=a("strong"),Jlo=o("byt5"),Ylo=o(" \u2014 "),EB=a("a"),Klo=o("ByT5Tokenizer"),Zlo=o(" (ByT5 model)"),eio=l(),Wn=a("li"),vle=a("strong"),oio=o("camembert"),rio=o(" \u2014 "),CB=a("a"),tio=o("CamembertTokenizer"),aio=o(" or "),wB=a("a"),nio=o("CamembertTokenizerFast"),sio=o(" (CamemBERT model)"),lio=l(),ih=a("li"),Fle=a("strong"),iio=o("canine"),dio=o(" \u2014 "),AB=a("a"),cio=o("CanineTokenizer"),fio=o(" (CANINE model)"),mio=l(),Qn=a("li"),Tle=a("strong"),gio=o("clip"),hio=o(" \u2014 "),LB=a("a"),pio=o("CLIPTokenizer"),_io=o(" or "),yB=a("a"),uio=o("CLIPTokenizerFast"),bio=o(" (CLIP model)"),vio=l(),Hn=a("li"),Mle=a("strong"),Fio=o("codegen"),Tio=o(" \u2014 "),xB=a("a"),Mio=o("CodeGenTokenizer"),Eio=o(" or "),$B=a("a"),Cio=o("CodeGenTokenizerFast"),wio=o(" (CodeGen model)"),Aio=l(),Un=a("li"),Ele=a("strong"),Lio=o("convbert"),yio=o(" \u2014 "),kB=a("a"),xio=o("ConvBertTokenizer"),$io=o(" or "),SB=a("a"),kio=o("ConvBertTokenizerFast"),Sio=o(" (ConvBERT model)"),Rio=l(),Jn=a("li"),Cle=a("strong"),Pio=o("cpm"),Bio=o(" \u2014 "),RB=a("a"),Iio=o("CpmTokenizer"),Nio=o(" or "),PB=a("a"),qio=o("CpmTokenizerFast"),jio=o(" (CPM model)"),Dio=l(),dh=a("li"),wle=a("strong"),Gio=o("ctrl"),Oio=o(" \u2014 "),BB=a("a"),Vio=o("CTRLTokenizer"),Xio=o(" (CTRL model)"),zio=l(),Yn=a("li"),Ale=a("strong"),Wio=o("data2vec-text"),Qio=o(" \u2014 "),IB=a("a"),Hio=o("RobertaTokenizer"),Uio=o(" or "),NB=a("a"),Jio=o("RobertaTokenizerFast"),Yio=o(" (Data2VecText model)"),Kio=l(),Kn=a("li"),Lle=a("strong"),Zio=o("deberta"),edo=o(" \u2014 "),qB=a("a"),odo=o("DebertaTokenizer"),rdo=o(" or "),jB=a("a"),tdo=o("DebertaTokenizerFast"),ado=o(" (DeBERTa model)"),ndo=l(),Zn=a("li"),yle=a("strong"),sdo=o("deberta-v2"),ldo=o(" \u2014 "),DB=a("a"),ido=o("DebertaV2Tokenizer"),ddo=o(" or "),GB=a("a"),cdo=o("DebertaV2TokenizerFast"),fdo=o(" (DeBERTa-v2 model)"),mdo=l(),es=a("li"),xle=a("strong"),gdo=o("distilbert"),hdo=o(" \u2014 "),OB=a("a"),pdo=o("DistilBertTokenizer"),_do=o(" or "),VB=a("a"),udo=o("DistilBertTokenizerFast"),bdo=o(" (DistilBERT model)"),vdo=l(),os=a("li"),$le=a("strong"),Fdo=o("dpr"),Tdo=o(" \u2014 "),XB=a("a"),Mdo=o("DPRQuestionEncoderTokenizer"),Edo=o(" or "),zB=a("a"),Cdo=o("DPRQuestionEncoderTokenizerFast"),wdo=o(" (DPR model)"),Ado=l(),rs=a("li"),kle=a("strong"),Ldo=o("electra"),ydo=o(" \u2014 "),WB=a("a"),xdo=o("ElectraTokenizer"),$do=o(" or "),QB=a("a"),kdo=o("ElectraTokenizerFast"),Sdo=o(" (ELECTRA model)"),Rdo=l(),ch=a("li"),Sle=a("strong"),Pdo=o("flaubert"),Bdo=o(" \u2014 "),HB=a("a"),Ido=o("FlaubertTokenizer"),Ndo=o(" (FlauBERT model)"),qdo=l(),ts=a("li"),Rle=a("strong"),jdo=o("fnet"),Ddo=o(" \u2014 "),UB=a("a"),Gdo=o("FNetTokenizer"),Odo=o(" or "),JB=a("a"),Vdo=o("FNetTokenizerFast"),Xdo=o(" (FNet model)"),zdo=l(),fh=a("li"),Ple=a("strong"),Wdo=o("fsmt"),Qdo=o(" \u2014 "),YB=a("a"),Hdo=o("FSMTTokenizer"),Udo=o(" (FairSeq Machine-Translation model)"),Jdo=l(),as=a("li"),Ble=a("strong"),Ydo=o("funnel"),Kdo=o(" \u2014 "),KB=a("a"),Zdo=o("FunnelTokenizer"),eco=o(" or "),ZB=a("a"),oco=o("FunnelTokenizerFast"),rco=o(" (Funnel Transformer model)"),tco=l(),ns=a("li"),Ile=a("strong"),aco=o("gpt2"),nco=o(" \u2014 "),eI=a("a"),sco=o("GPT2Tokenizer"),lco=o(" or "),oI=a("a"),ico=o("GPT2TokenizerFast"),dco=o(" (OpenAI GPT-2 model)"),cco=l(),ss=a("li"),Nle=a("strong"),fco=o("gpt_neo"),mco=o(" \u2014 "),rI=a("a"),gco=o("GPT2Tokenizer"),hco=o(" or "),tI=a("a"),pco=o("GPT2TokenizerFast"),_co=o(" (GPT Neo model)"),uco=l(),mh=a("li"),qle=a("strong"),bco=o("gpt_neox"),vco=o(" \u2014 "),aI=a("a"),Fco=o("GPTNeoXTokenizerFast"),Tco=o(" (GPT NeoX model)"),Mco=l(),ls=a("li"),jle=a("strong"),Eco=o("gptj"),Cco=o(" \u2014 "),nI=a("a"),wco=o("GPT2Tokenizer"),Aco=o(" or "),sI=a("a"),Lco=o("GPT2TokenizerFast"),yco=o(" (GPT-J model)"),xco=l(),is=a("li"),Dle=a("strong"),$co=o("groupvit"),kco=o(" \u2014 "),lI=a("a"),Sco=o("CLIPTokenizer"),Rco=o(" or "),iI=a("a"),Pco=o("CLIPTokenizerFast"),Bco=o(" (GroupViT model)"),Ico=l(),ds=a("li"),Gle=a("strong"),Nco=o("herbert"),qco=o(" \u2014 "),dI=a("a"),jco=o("HerbertTokenizer"),Dco=o(" or "),cI=a("a"),Gco=o("HerbertTokenizerFast"),Oco=o(" (HerBERT model)"),Vco=l(),gh=a("li"),Ole=a("strong"),Xco=o("hubert"),zco=o(" \u2014 "),fI=a("a"),Wco=o("Wav2Vec2CTCTokenizer"),Qco=o(" (Hubert model)"),Hco=l(),cs=a("li"),Vle=a("strong"),Uco=o("ibert"),Jco=o(" \u2014 "),mI=a("a"),Yco=o("RobertaTokenizer"),Kco=o(" or "),gI=a("a"),Zco=o("RobertaTokenizerFast"),efo=o(" (I-BERT model)"),ofo=l(),fs=a("li"),Xle=a("strong"),rfo=o("layoutlm"),tfo=o(" \u2014 "),hI=a("a"),afo=o("LayoutLMTokenizer"),nfo=o(" or "),pI=a("a"),sfo=o("LayoutLMTokenizerFast"),lfo=o(" (LayoutLM model)"),ifo=l(),ms=a("li"),zle=a("strong"),dfo=o("layoutlmv2"),cfo=o(" \u2014 "),_I=a("a"),ffo=o("LayoutLMv2Tokenizer"),mfo=o(" or "),uI=a("a"),gfo=o("LayoutLMv2TokenizerFast"),hfo=o(" (LayoutLMv2 model)"),pfo=l(),gs=a("li"),Wle=a("strong"),_fo=o("layoutlmv3"),ufo=o(" \u2014 "),bI=a("a"),bfo=o("LayoutLMv3Tokenizer"),vfo=o(" or "),vI=a("a"),Ffo=o("LayoutLMv3TokenizerFast"),Tfo=o(" (LayoutLMv3 model)"),Mfo=l(),hs=a("li"),Qle=a("strong"),Efo=o("layoutxlm"),Cfo=o(" \u2014 "),FI=a("a"),wfo=o("LayoutXLMTokenizer"),Afo=o(" or "),TI=a("a"),Lfo=o("LayoutXLMTokenizerFast"),yfo=o(" (LayoutXLM model)"),xfo=l(),ps=a("li"),Hle=a("strong"),$fo=o("led"),kfo=o(" \u2014 "),MI=a("a"),Sfo=o("LEDTokenizer"),Rfo=o(" or "),EI=a("a"),Pfo=o("LEDTokenizerFast"),Bfo=o(" (LED model)"),Ifo=l(),_s=a("li"),Ule=a("strong"),Nfo=o("longformer"),qfo=o(" \u2014 "),CI=a("a"),jfo=o("LongformerTokenizer"),Dfo=o(" or "),wI=a("a"),Gfo=o("LongformerTokenizerFast"),Ofo=o(" (Longformer model)"),Vfo=l(),us=a("li"),Jle=a("strong"),Xfo=o("longt5"),zfo=o(" \u2014 "),AI=a("a"),Wfo=o("T5Tokenizer"),Qfo=o(" or "),LI=a("a"),Hfo=o("T5TokenizerFast"),Ufo=o(" (LongT5 model)"),Jfo=l(),hh=a("li"),Yle=a("strong"),Yfo=o("luke"),Kfo=o(" \u2014 "),yI=a("a"),Zfo=o("LukeTokenizer"),emo=o(" (LUKE model)"),omo=l(),bs=a("li"),Kle=a("strong"),rmo=o("lxmert"),tmo=o(" \u2014 "),xI=a("a"),amo=o("LxmertTokenizer"),nmo=o(" or "),$I=a("a"),smo=o("LxmertTokenizerFast"),lmo=o(" (LXMERT model)"),imo=l(),ph=a("li"),Zle=a("strong"),dmo=o("m2m_100"),cmo=o(" \u2014 "),kI=a("a"),fmo=o("M2M100Tokenizer"),mmo=o(" (M2M100 model)"),gmo=l(),_h=a("li"),eie=a("strong"),hmo=o("marian"),pmo=o(" \u2014 "),SI=a("a"),_mo=o("MarianTokenizer"),umo=o(" (Marian model)"),bmo=l(),vs=a("li"),oie=a("strong"),vmo=o("mbart"),Fmo=o(" \u2014 "),RI=a("a"),Tmo=o("MBartTokenizer"),Mmo=o(" or "),PI=a("a"),Emo=o("MBartTokenizerFast"),Cmo=o(" (mBART model)"),wmo=l(),Fs=a("li"),rie=a("strong"),Amo=o("mbart50"),Lmo=o(" \u2014 "),BI=a("a"),ymo=o("MBart50Tokenizer"),xmo=o(" or "),II=a("a"),$mo=o("MBart50TokenizerFast"),kmo=o(" (mBART-50 model)"),Smo=l(),Ts=a("li"),tie=a("strong"),Rmo=o("megatron-bert"),Pmo=o(" \u2014 "),NI=a("a"),Bmo=o("BertTokenizer"),Imo=o(" or "),qI=a("a"),Nmo=o("BertTokenizerFast"),qmo=o(" (Megatron-BERT model)"),jmo=l(),uh=a("li"),aie=a("strong"),Dmo=o("mluke"),Gmo=o(" \u2014 "),jI=a("a"),Omo=o("MLukeTokenizer"),Vmo=o(" (mLUKE model)"),Xmo=l(),Ms=a("li"),nie=a("strong"),zmo=o("mobilebert"),Wmo=o(" \u2014 "),DI=a("a"),Qmo=o("MobileBertTokenizer"),Hmo=o(" or "),GI=a("a"),Umo=o("MobileBertTokenizerFast"),Jmo=o(" (MobileBERT model)"),Ymo=l(),Es=a("li"),sie=a("strong"),Kmo=o("mpnet"),Zmo=o(" \u2014 "),OI=a("a"),ego=o("MPNetTokenizer"),ogo=o(" or "),VI=a("a"),rgo=o("MPNetTokenizerFast"),tgo=o(" (MPNet model)"),ago=l(),Cs=a("li"),lie=a("strong"),ngo=o("mt5"),sgo=o(" \u2014 "),XI=a("a"),lgo=o("MT5Tokenizer"),igo=o(" or "),zI=a("a"),dgo=o("MT5TokenizerFast"),cgo=o(" (MT5 model)"),fgo=l(),ws=a("li"),iie=a("strong"),mgo=o("mvp"),ggo=o(" \u2014 "),WI=a("a"),hgo=o("MvpTokenizer"),pgo=o(" or "),QI=a("a"),_go=o("MvpTokenizerFast"),ugo=o(" (MVP model)"),bgo=l(),As=a("li"),die=a("strong"),vgo=o("nezha"),Fgo=o(" \u2014 "),HI=a("a"),Tgo=o("BertTokenizer"),Mgo=o(" or "),UI=a("a"),Ego=o("BertTokenizerFast"),Cgo=o(" (Nezha model)"),wgo=l(),Ls=a("li"),cie=a("strong"),Ago=o("nystromformer"),Lgo=o(" \u2014 "),JI=a("a"),ygo=o("AlbertTokenizer"),xgo=o(" or "),YI=a("a"),$go=o("AlbertTokenizerFast"),kgo=o(" (Nystr\xF6mformer model)"),Sgo=l(),ys=a("li"),fie=a("strong"),Rgo=o("openai-gpt"),Pgo=o(" \u2014 "),KI=a("a"),Bgo=o("OpenAIGPTTokenizer"),Igo=o(" or "),ZI=a("a"),Ngo=o("OpenAIGPTTokenizerFast"),qgo=o(" (OpenAI GPT model)"),jgo=l(),bh=a("li"),mie=a("strong"),Dgo=o("opt"),Ggo=o(" \u2014 "),eN=a("a"),Ogo=o("GPT2Tokenizer"),Vgo=o(" (OPT model)"),Xgo=l(),xs=a("li"),gie=a("strong"),zgo=o("owlvit"),Wgo=o(" \u2014 "),oN=a("a"),Qgo=o("CLIPTokenizer"),Hgo=o(" or "),rN=a("a"),Ugo=o("CLIPTokenizerFast"),Jgo=o(" (OWL-ViT model)"),Ygo=l(),$s=a("li"),hie=a("strong"),Kgo=o("pegasus"),Zgo=o(" \u2014 "),tN=a("a"),eho=o("PegasusTokenizer"),oho=o(" or "),aN=a("a"),rho=o("PegasusTokenizerFast"),tho=o(" (Pegasus model)"),aho=l(),vh=a("li"),pie=a("strong"),nho=o("perceiver"),sho=o(" \u2014 "),nN=a("a"),lho=o("PerceiverTokenizer"),iho=o(" (Perceiver model)"),dho=l(),Fh=a("li"),_ie=a("strong"),cho=o("phobert"),fho=o(" \u2014 "),sN=a("a"),mho=o("PhobertTokenizer"),gho=o(" (PhoBERT model)"),hho=l(),Th=a("li"),uie=a("strong"),pho=o("plbart"),_ho=o(" \u2014 "),lN=a("a"),uho=o("PLBartTokenizer"),bho=o(" (PLBart model)"),vho=l(),Mh=a("li"),bie=a("strong"),Fho=o("prophetnet"),Tho=o(" \u2014 "),iN=a("a"),Mho=o("ProphetNetTokenizer"),Eho=o(" (ProphetNet model)"),Cho=l(),ks=a("li"),vie=a("strong"),who=o("qdqbert"),Aho=o(" \u2014 "),dN=a("a"),Lho=o("BertTokenizer"),yho=o(" or "),cN=a("a"),xho=o("BertTokenizerFast"),$ho=o(" (QDQBert model)"),kho=l(),Eh=a("li"),Fie=a("strong"),Sho=o("rag"),Rho=o(" \u2014 "),fN=a("a"),Pho=o("RagTokenizer"),Bho=o(" (RAG model)"),Iho=l(),Ss=a("li"),Tie=a("strong"),Nho=o("realm"),qho=o(" \u2014 "),mN=a("a"),jho=o("RealmTokenizer"),Dho=o(" or "),gN=a("a"),Gho=o("RealmTokenizerFast"),Oho=o(" (REALM model)"),Vho=l(),Rs=a("li"),Mie=a("strong"),Xho=o("reformer"),zho=o(" \u2014 "),hN=a("a"),Who=o("ReformerTokenizer"),Qho=o(" or "),pN=a("a"),Hho=o("ReformerTokenizerFast"),Uho=o(" (Reformer model)"),Jho=l(),Ps=a("li"),Eie=a("strong"),Yho=o("rembert"),Kho=o(" \u2014 "),_N=a("a"),Zho=o("RemBertTokenizer"),epo=o(" or "),uN=a("a"),opo=o("RemBertTokenizerFast"),rpo=o(" (RemBERT model)"),tpo=l(),Bs=a("li"),Cie=a("strong"),apo=o("retribert"),npo=o(" \u2014 "),bN=a("a"),spo=o("RetriBertTokenizer"),lpo=o(" or "),vN=a("a"),ipo=o("RetriBertTokenizerFast"),dpo=o(" (RetriBERT model)"),cpo=l(),Is=a("li"),wie=a("strong"),fpo=o("roberta"),mpo=o(" \u2014 "),FN=a("a"),gpo=o("RobertaTokenizer"),hpo=o(" or "),TN=a("a"),ppo=o("RobertaTokenizerFast"),_po=o(" (RoBERTa model)"),upo=l(),Ns=a("li"),Aie=a("strong"),bpo=o("roformer"),vpo=o(" \u2014 "),MN=a("a"),Fpo=o("RoFormerTokenizer"),Tpo=o(" or "),EN=a("a"),Mpo=o("RoFormerTokenizerFast"),Epo=o(" (RoFormer model)"),Cpo=l(),Ch=a("li"),Lie=a("strong"),wpo=o("speech_to_text"),Apo=o(" \u2014 "),CN=a("a"),Lpo=o("Speech2TextTokenizer"),ypo=o(" (Speech2Text model)"),xpo=l(),wh=a("li"),yie=a("strong"),$po=o("speech_to_text_2"),kpo=o(" \u2014 "),wN=a("a"),Spo=o("Speech2Text2Tokenizer"),Rpo=o(" (Speech2Text2 model)"),Ppo=l(),qs=a("li"),xie=a("strong"),Bpo=o("splinter"),Ipo=o(" \u2014 "),AN=a("a"),Npo=o("SplinterTokenizer"),qpo=o(" or "),LN=a("a"),jpo=o("SplinterTokenizerFast"),Dpo=o(" (Splinter model)"),Gpo=l(),js=a("li"),$ie=a("strong"),Opo=o("squeezebert"),Vpo=o(" \u2014 "),yN=a("a"),Xpo=o("SqueezeBertTokenizer"),zpo=o(" or "),xN=a("a"),Wpo=o("SqueezeBertTokenizerFast"),Qpo=o(" (SqueezeBERT model)"),Hpo=l(),Ds=a("li"),kie=a("strong"),Upo=o("t5"),Jpo=o(" \u2014 "),$N=a("a"),Ypo=o("T5Tokenizer"),Kpo=o(" or "),kN=a("a"),Zpo=o("T5TokenizerFast"),e_o=o(" (T5 model)"),o_o=l(),Ah=a("li"),Sie=a("strong"),r_o=o("tapas"),t_o=o(" \u2014 "),SN=a("a"),a_o=o("TapasTokenizer"),n_o=o(" (TAPAS model)"),s_o=l(),Lh=a("li"),Rie=a("strong"),l_o=o("tapex"),i_o=o(" \u2014 "),RN=a("a"),d_o=o("TapexTokenizer"),c_o=o(" (TAPEX model)"),f_o=l(),yh=a("li"),Pie=a("strong"),m_o=o("transfo-xl"),g_o=o(" \u2014 "),PN=a("a"),h_o=o("TransfoXLTokenizer"),p_o=o(" (Transformer-XL model)"),__o=l(),Gs=a("li"),Bie=a("strong"),u_o=o("vilt"),b_o=o(" \u2014 "),BN=a("a"),v_o=o("BertTokenizer"),F_o=o(" or "),IN=a("a"),T_o=o("BertTokenizerFast"),M_o=o(" (ViLT model)"),E_o=l(),Os=a("li"),Iie=a("strong"),C_o=o("visual_bert"),w_o=o(" \u2014 "),NN=a("a"),A_o=o("BertTokenizer"),L_o=o(" or "),qN=a("a"),y_o=o("BertTokenizerFast"),x_o=o(" (VisualBERT model)"),$_o=l(),xh=a("li"),Nie=a("strong"),k_o=o("wav2vec2"),S_o=o(" \u2014 "),jN=a("a"),R_o=o("Wav2Vec2CTCTokenizer"),P_o=o(" (Wav2Vec2 model)"),B_o=l(),$h=a("li"),qie=a("strong"),I_o=o("wav2vec2-conformer"),N_o=o(" \u2014 "),DN=a("a"),q_o=o("Wav2Vec2CTCTokenizer"),j_o=o(" (Wav2Vec2-Conformer model)"),D_o=l(),kh=a("li"),jie=a("strong"),G_o=o("wav2vec2_phoneme"),O_o=o(" \u2014 "),GN=a("a"),V_o=o("Wav2Vec2PhonemeCTCTokenizer"),X_o=o(" (Wav2Vec2Phoneme model)"),z_o=l(),Vs=a("li"),Die=a("strong"),W_o=o("xglm"),Q_o=o(" \u2014 "),ON=a("a"),H_o=o("XGLMTokenizer"),U_o=o(" or "),VN=a("a"),J_o=o("XGLMTokenizerFast"),Y_o=o(" (XGLM model)"),K_o=l(),Sh=a("li"),Gie=a("strong"),Z_o=o("xlm"),euo=o(" \u2014 "),XN=a("a"),ouo=o("XLMTokenizer"),ruo=o(" (XLM model)"),tuo=l(),Rh=a("li"),Oie=a("strong"),auo=o("xlm-prophetnet"),nuo=o(" \u2014 "),zN=a("a"),suo=o("XLMProphetNetTokenizer"),luo=o(" (XLM-ProphetNet model)"),iuo=l(),Xs=a("li"),Vie=a("strong"),duo=o("xlm-roberta"),cuo=o(" \u2014 "),WN=a("a"),fuo=o("XLMRobertaTokenizer"),muo=o(" or "),QN=a("a"),guo=o("XLMRobertaTokenizerFast"),huo=o(" (XLM-RoBERTa model)"),puo=l(),zs=a("li"),Xie=a("strong"),_uo=o("xlm-roberta-xl"),uuo=o(" \u2014 "),HN=a("a"),buo=o("RobertaTokenizer"),vuo=o(" or "),UN=a("a"),Fuo=o("RobertaTokenizerFast"),Tuo=o(" (XLM-RoBERTa-XL model)"),Muo=l(),Ws=a("li"),zie=a("strong"),Euo=o("xlnet"),Cuo=o(" \u2014 "),JN=a("a"),wuo=o("XLNetTokenizer"),Auo=o(" or "),YN=a("a"),Luo=o("XLNetTokenizerFast"),yuo=o(" (XLNet model)"),xuo=l(),Qs=a("li"),Wie=a("strong"),$uo=o("yoso"),kuo=o(" \u2014 "),KN=a("a"),Suo=o("AlbertTokenizer"),Ruo=o(" or "),ZN=a("a"),Puo=o("AlbertTokenizerFast"),Buo=o(" (YOSO model)"),Iuo=l(),F(Ph.$$.fragment),Nuo=l(),Bh=a("div"),F(F6.$$.fragment),quo=l(),Qie=a("p"),juo=o("Register a new tokenizer in this mapping."),bXe=l(),qi=a("h2"),Ih=a("a"),Hie=a("span"),F(T6.$$.fragment),Duo=l(),Uie=a("span"),Guo=o("AutoFeatureExtractor"),vXe=l(),Lo=a("div"),F(M6.$$.fragment),Ouo=l(),E6=a("p"),Vuo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),eq=a("a"),Xuo=o("AutoFeatureExtractor.from_pretrained()"),zuo=o(" class method."),Wuo=l(),C6=a("p"),Quo=o("This class cannot be instantiated directly using "),Jie=a("code"),Huo=o("__init__()"),Uuo=o(" (throws an error)."),Juo=l(),He=a("div"),F(w6.$$.fragment),Yuo=l(),Yie=a("p"),Kuo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Zuo=l(),Ba=a("p"),e1o=o("The feature extractor class to instantiate is selected based on the "),Kie=a("code"),o1o=o("model_type"),r1o=o(` property of the config object
(either passed as an argument or loaded from `),Zie=a("code"),t1o=o("pretrained_model_name_or_path"),a1o=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ede=a("code"),n1o=o("pretrained_model_name_or_path"),s1o=o(":"),l1o=l(),J=a("ul"),Nh=a("li"),ode=a("strong"),i1o=o("beit"),d1o=o(" \u2014 "),oq=a("a"),c1o=o("BeitFeatureExtractor"),f1o=o(" (BEiT model)"),m1o=l(),qh=a("li"),rde=a("strong"),g1o=o("clip"),h1o=o(" \u2014 "),rq=a("a"),p1o=o("CLIPFeatureExtractor"),_1o=o(" (CLIP model)"),u1o=l(),jh=a("li"),tde=a("strong"),b1o=o("convnext"),v1o=o(" \u2014 "),tq=a("a"),F1o=o("ConvNextFeatureExtractor"),T1o=o(" (ConvNeXT model)"),M1o=l(),Dh=a("li"),ade=a("strong"),E1o=o("cvt"),C1o=o(" \u2014 "),aq=a("a"),w1o=o("ConvNextFeatureExtractor"),A1o=o(" (CvT model)"),L1o=l(),Gh=a("li"),nde=a("strong"),y1o=o("data2vec-audio"),x1o=o(" \u2014 "),nq=a("a"),$1o=o("Wav2Vec2FeatureExtractor"),k1o=o(" (Data2VecAudio model)"),S1o=l(),Oh=a("li"),sde=a("strong"),R1o=o("data2vec-vision"),P1o=o(" \u2014 "),sq=a("a"),B1o=o("BeitFeatureExtractor"),I1o=o(" (Data2VecVision model)"),N1o=l(),Vh=a("li"),lde=a("strong"),q1o=o("deit"),j1o=o(" \u2014 "),lq=a("a"),D1o=o("DeiTFeatureExtractor"),G1o=o(" (DeiT model)"),O1o=l(),Xh=a("li"),ide=a("strong"),V1o=o("detr"),X1o=o(" \u2014 "),iq=a("a"),z1o=o("DetrFeatureExtractor"),W1o=o(" (DETR model)"),Q1o=l(),zh=a("li"),dde=a("strong"),H1o=o("dpt"),U1o=o(" \u2014 "),dq=a("a"),J1o=o("DPTFeatureExtractor"),Y1o=o(" (DPT model)"),K1o=l(),Wh=a("li"),cde=a("strong"),Z1o=o("flava"),e2o=o(" \u2014 "),cq=a("a"),o2o=o("FlavaFeatureExtractor"),r2o=o(" (FLAVA model)"),t2o=l(),Qh=a("li"),fde=a("strong"),a2o=o("glpn"),n2o=o(" \u2014 "),fq=a("a"),s2o=o("GLPNFeatureExtractor"),l2o=o(" (GLPN model)"),i2o=l(),Hh=a("li"),mde=a("strong"),d2o=o("groupvit"),c2o=o(" \u2014 "),mq=a("a"),f2o=o("CLIPFeatureExtractor"),m2o=o(" (GroupViT model)"),g2o=l(),Uh=a("li"),gde=a("strong"),h2o=o("hubert"),p2o=o(" \u2014 "),gq=a("a"),_2o=o("Wav2Vec2FeatureExtractor"),u2o=o(" (Hubert model)"),b2o=l(),Jh=a("li"),hde=a("strong"),v2o=o("imagegpt"),F2o=o(" \u2014 "),hq=a("a"),T2o=o("ImageGPTFeatureExtractor"),M2o=o(" (ImageGPT model)"),E2o=l(),Yh=a("li"),pde=a("strong"),C2o=o("layoutlmv2"),w2o=o(" \u2014 "),pq=a("a"),A2o=o("LayoutLMv2FeatureExtractor"),L2o=o(" (LayoutLMv2 model)"),y2o=l(),Kh=a("li"),_de=a("strong"),x2o=o("layoutlmv3"),$2o=o(" \u2014 "),_q=a("a"),k2o=o("LayoutLMv3FeatureExtractor"),S2o=o(" (LayoutLMv3 model)"),R2o=l(),Zh=a("li"),ude=a("strong"),P2o=o("levit"),B2o=o(" \u2014 "),uq=a("a"),I2o=o("LevitFeatureExtractor"),N2o=o(" (LeViT model)"),q2o=l(),ep=a("li"),bde=a("strong"),j2o=o("maskformer"),D2o=o(" \u2014 "),bq=a("a"),G2o=o("MaskFormerFeatureExtractor"),O2o=o(" (MaskFormer model)"),V2o=l(),op=a("li"),vde=a("strong"),X2o=o("mctct"),z2o=o(" \u2014 "),vq=a("a"),W2o=o("MCTCTFeatureExtractor"),Q2o=o(" (M-CTC-T model)"),H2o=l(),rp=a("li"),Fde=a("strong"),U2o=o("mobilevit"),J2o=o(" \u2014 "),Fq=a("a"),Y2o=o("MobileViTFeatureExtractor"),K2o=o(" (MobileViT model)"),Z2o=l(),tp=a("li"),Tde=a("strong"),ebo=o("owlvit"),obo=o(" \u2014 "),Tq=a("a"),rbo=o("OwlViTFeatureExtractor"),tbo=o(" (OWL-ViT model)"),abo=l(),ap=a("li"),Mde=a("strong"),nbo=o("perceiver"),sbo=o(" \u2014 "),Mq=a("a"),lbo=o("PerceiverFeatureExtractor"),ibo=o(" (Perceiver model)"),dbo=l(),np=a("li"),Ede=a("strong"),cbo=o("poolformer"),fbo=o(" \u2014 "),Eq=a("a"),mbo=o("PoolFormerFeatureExtractor"),gbo=o(" (PoolFormer model)"),hbo=l(),sp=a("li"),Cde=a("strong"),pbo=o("regnet"),_bo=o(" \u2014 "),Cq=a("a"),ubo=o("ConvNextFeatureExtractor"),bbo=o(" (RegNet model)"),vbo=l(),lp=a("li"),wde=a("strong"),Fbo=o("resnet"),Tbo=o(" \u2014 "),wq=a("a"),Mbo=o("ConvNextFeatureExtractor"),Ebo=o(" (ResNet model)"),Cbo=l(),ip=a("li"),Ade=a("strong"),wbo=o("segformer"),Abo=o(" \u2014 "),Aq=a("a"),Lbo=o("SegformerFeatureExtractor"),ybo=o(" (SegFormer model)"),xbo=l(),dp=a("li"),Lde=a("strong"),$bo=o("speech_to_text"),kbo=o(" \u2014 "),Lq=a("a"),Sbo=o("Speech2TextFeatureExtractor"),Rbo=o(" (Speech2Text model)"),Pbo=l(),cp=a("li"),yde=a("strong"),Bbo=o("swin"),Ibo=o(" \u2014 "),yq=a("a"),Nbo=o("ViTFeatureExtractor"),qbo=o(" (Swin Transformer model)"),jbo=l(),fp=a("li"),xde=a("strong"),Dbo=o("van"),Gbo=o(" \u2014 "),xq=a("a"),Obo=o("ConvNextFeatureExtractor"),Vbo=o(" (VAN model)"),Xbo=l(),mp=a("li"),$de=a("strong"),zbo=o("vilt"),Wbo=o(" \u2014 "),$q=a("a"),Qbo=o("ViltFeatureExtractor"),Hbo=o(" (ViLT model)"),Ubo=l(),gp=a("li"),kde=a("strong"),Jbo=o("vit"),Ybo=o(" \u2014 "),kq=a("a"),Kbo=o("ViTFeatureExtractor"),Zbo=o(" (ViT model)"),evo=l(),hp=a("li"),Sde=a("strong"),ovo=o("vit_mae"),rvo=o(" \u2014 "),Sq=a("a"),tvo=o("ViTFeatureExtractor"),avo=o(" (ViTMAE model)"),nvo=l(),pp=a("li"),Rde=a("strong"),svo=o("wav2vec2"),lvo=o(" \u2014 "),Rq=a("a"),ivo=o("Wav2Vec2FeatureExtractor"),dvo=o(" (Wav2Vec2 model)"),cvo=l(),_p=a("li"),Pde=a("strong"),fvo=o("wav2vec2-conformer"),mvo=o(" \u2014 "),Pq=a("a"),gvo=o("Wav2Vec2FeatureExtractor"),hvo=o(" (Wav2Vec2-Conformer model)"),pvo=l(),up=a("li"),Bde=a("strong"),_vo=o("yolos"),uvo=o(" \u2014 "),Bq=a("a"),bvo=o("YolosFeatureExtractor"),vvo=o(" (YOLOS model)"),Fvo=l(),F(bp.$$.fragment),Tvo=l(),F(vp.$$.fragment),Mvo=l(),Fp=a("div"),F(A6.$$.fragment),Evo=l(),Ide=a("p"),Cvo=o("Register a new feature extractor for this class."),FXe=l(),ji=a("h2"),Tp=a("a"),Nde=a("span"),F(L6.$$.fragment),wvo=l(),qde=a("span"),Avo=o("AutoProcessor"),TXe=l(),yo=a("div"),F(y6.$$.fragment),Lvo=l(),x6=a("p"),yvo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Iq=a("a"),xvo=o("AutoProcessor.from_pretrained()"),$vo=o(" class method."),kvo=l(),$6=a("p"),Svo=o("This class cannot be instantiated directly using "),jde=a("code"),Rvo=o("__init__()"),Pvo=o(" (throws an error)."),Bvo=l(),Ue=a("div"),F(k6.$$.fragment),Ivo=l(),Dde=a("p"),Nvo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),qvo=l(),Di=a("p"),jvo=o("The processor class to instantiate is selected based on the "),Gde=a("code"),Dvo=o("model_type"),Gvo=o(` property of the config object (either
passed as an argument or loaded from `),Ode=a("code"),Ovo=o("pretrained_model_name_or_path"),Vvo=o(" if possible):"),Xvo=l(),fe=a("ul"),Mp=a("li"),Vde=a("strong"),zvo=o("clip"),Wvo=o(" \u2014 "),Nq=a("a"),Qvo=o("CLIPProcessor"),Hvo=o(" (CLIP model)"),Uvo=l(),Ep=a("li"),Xde=a("strong"),Jvo=o("flava"),Yvo=o(" \u2014 "),zde=a("code"),Kvo=o("FLAVAProcessor"),Zvo=o(" (FLAVA model)"),e3o=l(),Cp=a("li"),Wde=a("strong"),o3o=o("groupvit"),r3o=o(" \u2014 "),qq=a("a"),t3o=o("CLIPProcessor"),a3o=o(" (GroupViT model)"),n3o=l(),wp=a("li"),Qde=a("strong"),s3o=o("layoutlmv2"),l3o=o(" \u2014 "),jq=a("a"),i3o=o("LayoutLMv2Processor"),d3o=o(" (LayoutLMv2 model)"),c3o=l(),Ap=a("li"),Hde=a("strong"),f3o=o("layoutlmv3"),m3o=o(" \u2014 "),Dq=a("a"),g3o=o("LayoutLMv3Processor"),h3o=o(" (LayoutLMv3 model)"),p3o=l(),Lp=a("li"),Ude=a("strong"),_3o=o("layoutxlm"),u3o=o(" \u2014 "),Gq=a("a"),b3o=o("LayoutXLMProcessor"),v3o=o(" (LayoutXLM model)"),F3o=l(),yp=a("li"),Jde=a("strong"),T3o=o("owlvit"),M3o=o(" \u2014 "),Oq=a("a"),E3o=o("OwlViTProcessor"),C3o=o(" (OWL-ViT model)"),w3o=l(),xp=a("li"),Yde=a("strong"),A3o=o("sew"),L3o=o(" \u2014 "),Vq=a("a"),y3o=o("Wav2Vec2Processor"),x3o=o(" (SEW model)"),$3o=l(),$p=a("li"),Kde=a("strong"),k3o=o("sew-d"),S3o=o(" \u2014 "),Xq=a("a"),R3o=o("Wav2Vec2Processor"),P3o=o(" (SEW-D model)"),B3o=l(),kp=a("li"),Zde=a("strong"),I3o=o("speech_to_text"),N3o=o(" \u2014 "),zq=a("a"),q3o=o("Speech2TextProcessor"),j3o=o(" (Speech2Text model)"),D3o=l(),Sp=a("li"),ece=a("strong"),G3o=o("speech_to_text_2"),O3o=o(" \u2014 "),Wq=a("a"),V3o=o("Speech2Text2Processor"),X3o=o(" (Speech2Text2 model)"),z3o=l(),Rp=a("li"),oce=a("strong"),W3o=o("trocr"),Q3o=o(" \u2014 "),Qq=a("a"),H3o=o("TrOCRProcessor"),U3o=o(" (TrOCR model)"),J3o=l(),Pp=a("li"),rce=a("strong"),Y3o=o("unispeech"),K3o=o(" \u2014 "),Hq=a("a"),Z3o=o("Wav2Vec2Processor"),eFo=o(" (UniSpeech model)"),oFo=l(),Bp=a("li"),tce=a("strong"),rFo=o("unispeech-sat"),tFo=o(" \u2014 "),Uq=a("a"),aFo=o("Wav2Vec2Processor"),nFo=o(" (UniSpeechSat model)"),sFo=l(),Ip=a("li"),ace=a("strong"),lFo=o("vilt"),iFo=o(" \u2014 "),Jq=a("a"),dFo=o("ViltProcessor"),cFo=o(" (ViLT model)"),fFo=l(),Np=a("li"),nce=a("strong"),mFo=o("vision-text-dual-encoder"),gFo=o(" \u2014 "),Yq=a("a"),hFo=o("VisionTextDualEncoderProcessor"),pFo=o(" (VisionTextDualEncoder model)"),_Fo=l(),qp=a("li"),sce=a("strong"),uFo=o("wav2vec2"),bFo=o(" \u2014 "),Kq=a("a"),vFo=o("Wav2Vec2Processor"),FFo=o(" (Wav2Vec2 model)"),TFo=l(),jp=a("li"),lce=a("strong"),MFo=o("wav2vec2-conformer"),EFo=o(" \u2014 "),Zq=a("a"),CFo=o("Wav2Vec2Processor"),wFo=o(" (Wav2Vec2-Conformer model)"),AFo=l(),Dp=a("li"),ice=a("strong"),LFo=o("wavlm"),yFo=o(" \u2014 "),ej=a("a"),xFo=o("Wav2Vec2Processor"),$Fo=o(" (WavLM model)"),kFo=l(),F(Gp.$$.fragment),SFo=l(),F(Op.$$.fragment),RFo=l(),Vp=a("div"),F(S6.$$.fragment),PFo=l(),dce=a("p"),BFo=o("Register a new processor for this class."),MXe=l(),Gi=a("h2"),Xp=a("a"),cce=a("span"),F(R6.$$.fragment),IFo=l(),fce=a("span"),NFo=o("AutoModel"),EXe=l(),xo=a("div"),F(P6.$$.fragment),qFo=l(),Oi=a("p"),jFo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),oj=a("a"),DFo=o("from_pretrained()"),GFo=o(" class method or the "),rj=a("a"),OFo=o("from_config()"),VFo=o(` class
method.`),XFo=l(),B6=a("p"),zFo=o("This class cannot be instantiated directly using "),mce=a("code"),WFo=o("__init__()"),QFo=o(" (throws an error)."),HFo=l(),lt=a("div"),F(I6.$$.fragment),UFo=l(),gce=a("p"),JFo=o("Instantiates one of the base model classes of the library from a configuration."),YFo=l(),Vi=a("p"),KFo=o(`Note:
Loading a model from its configuration file does `),hce=a("strong"),ZFo=o("not"),eTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tj=a("a"),oTo=o("from_pretrained()"),rTo=o(" to load the model weights."),tTo=l(),F(zp.$$.fragment),aTo=l(),Je=a("div"),F(N6.$$.fragment),nTo=l(),pce=a("p"),sTo=o("Instantiate one of the base model classes of the library from a pretrained model."),lTo=l(),Ia=a("p"),iTo=o("The model class to instantiate is selected based on the "),_ce=a("code"),dTo=o("model_type"),cTo=o(` property of the config object (either
passed as an argument or loaded from `),uce=a("code"),fTo=o("pretrained_model_name_or_path"),mTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bce=a("code"),gTo=o("pretrained_model_name_or_path"),hTo=o(":"),pTo=l(),y=a("ul"),Wp=a("li"),vce=a("strong"),_To=o("albert"),uTo=o(" \u2014 "),aj=a("a"),bTo=o("AlbertModel"),vTo=o(" (ALBERT model)"),FTo=l(),Qp=a("li"),Fce=a("strong"),TTo=o("bart"),MTo=o(" \u2014 "),nj=a("a"),ETo=o("BartModel"),CTo=o(" (BART model)"),wTo=l(),Hp=a("li"),Tce=a("strong"),ATo=o("beit"),LTo=o(" \u2014 "),sj=a("a"),yTo=o("BeitModel"),xTo=o(" (BEiT model)"),$To=l(),Up=a("li"),Mce=a("strong"),kTo=o("bert"),STo=o(" \u2014 "),lj=a("a"),RTo=o("BertModel"),PTo=o(" (BERT model)"),BTo=l(),Jp=a("li"),Ece=a("strong"),ITo=o("bert-generation"),NTo=o(" \u2014 "),ij=a("a"),qTo=o("BertGenerationEncoder"),jTo=o(" (Bert Generation model)"),DTo=l(),Yp=a("li"),Cce=a("strong"),GTo=o("big_bird"),OTo=o(" \u2014 "),dj=a("a"),VTo=o("BigBirdModel"),XTo=o(" (BigBird model)"),zTo=l(),Kp=a("li"),wce=a("strong"),WTo=o("bigbird_pegasus"),QTo=o(" \u2014 "),cj=a("a"),HTo=o("BigBirdPegasusModel"),UTo=o(" (BigBird-Pegasus model)"),JTo=l(),Zp=a("li"),Ace=a("strong"),YTo=o("blenderbot"),KTo=o(" \u2014 "),fj=a("a"),ZTo=o("BlenderbotModel"),e7o=o(" (Blenderbot model)"),o7o=l(),e_=a("li"),Lce=a("strong"),r7o=o("blenderbot-small"),t7o=o(" \u2014 "),mj=a("a"),a7o=o("BlenderbotSmallModel"),n7o=o(" (BlenderbotSmall model)"),s7o=l(),o_=a("li"),yce=a("strong"),l7o=o("bloom"),i7o=o(" \u2014 "),gj=a("a"),d7o=o("BloomModel"),c7o=o(" (BLOOM model)"),f7o=l(),r_=a("li"),xce=a("strong"),m7o=o("camembert"),g7o=o(" \u2014 "),hj=a("a"),h7o=o("CamembertModel"),p7o=o(" (CamemBERT model)"),_7o=l(),t_=a("li"),$ce=a("strong"),u7o=o("canine"),b7o=o(" \u2014 "),pj=a("a"),v7o=o("CanineModel"),F7o=o(" (CANINE model)"),T7o=l(),a_=a("li"),kce=a("strong"),M7o=o("clip"),E7o=o(" \u2014 "),_j=a("a"),C7o=o("CLIPModel"),w7o=o(" (CLIP model)"),A7o=l(),n_=a("li"),Sce=a("strong"),L7o=o("codegen"),y7o=o(" \u2014 "),uj=a("a"),x7o=o("CodeGenModel"),$7o=o(" (CodeGen model)"),k7o=l(),s_=a("li"),Rce=a("strong"),S7o=o("convbert"),R7o=o(" \u2014 "),bj=a("a"),P7o=o("ConvBertModel"),B7o=o(" (ConvBERT model)"),I7o=l(),l_=a("li"),Pce=a("strong"),N7o=o("convnext"),q7o=o(" \u2014 "),vj=a("a"),j7o=o("ConvNextModel"),D7o=o(" (ConvNeXT model)"),G7o=l(),i_=a("li"),Bce=a("strong"),O7o=o("ctrl"),V7o=o(" \u2014 "),Fj=a("a"),X7o=o("CTRLModel"),z7o=o(" (CTRL model)"),W7o=l(),d_=a("li"),Ice=a("strong"),Q7o=o("cvt"),H7o=o(" \u2014 "),Tj=a("a"),U7o=o("CvtModel"),J7o=o(" (CvT model)"),Y7o=l(),c_=a("li"),Nce=a("strong"),K7o=o("data2vec-audio"),Z7o=o(" \u2014 "),Mj=a("a"),e8o=o("Data2VecAudioModel"),o8o=o(" (Data2VecAudio model)"),r8o=l(),f_=a("li"),qce=a("strong"),t8o=o("data2vec-text"),a8o=o(" \u2014 "),Ej=a("a"),n8o=o("Data2VecTextModel"),s8o=o(" (Data2VecText model)"),l8o=l(),m_=a("li"),jce=a("strong"),i8o=o("data2vec-vision"),d8o=o(" \u2014 "),Cj=a("a"),c8o=o("Data2VecVisionModel"),f8o=o(" (Data2VecVision model)"),m8o=l(),g_=a("li"),Dce=a("strong"),g8o=o("deberta"),h8o=o(" \u2014 "),wj=a("a"),p8o=o("DebertaModel"),_8o=o(" (DeBERTa model)"),u8o=l(),h_=a("li"),Gce=a("strong"),b8o=o("deberta-v2"),v8o=o(" \u2014 "),Aj=a("a"),F8o=o("DebertaV2Model"),T8o=o(" (DeBERTa-v2 model)"),M8o=l(),p_=a("li"),Oce=a("strong"),E8o=o("decision_transformer"),C8o=o(" \u2014 "),Lj=a("a"),w8o=o("DecisionTransformerModel"),A8o=o(" (Decision Transformer model)"),L8o=l(),__=a("li"),Vce=a("strong"),y8o=o("deit"),x8o=o(" \u2014 "),yj=a("a"),$8o=o("DeiTModel"),k8o=o(" (DeiT model)"),S8o=l(),u_=a("li"),Xce=a("strong"),R8o=o("detr"),P8o=o(" \u2014 "),xj=a("a"),B8o=o("DetrModel"),I8o=o(" (DETR model)"),N8o=l(),b_=a("li"),zce=a("strong"),q8o=o("distilbert"),j8o=o(" \u2014 "),$j=a("a"),D8o=o("DistilBertModel"),G8o=o(" (DistilBERT model)"),O8o=l(),v_=a("li"),Wce=a("strong"),V8o=o("dpr"),X8o=o(" \u2014 "),kj=a("a"),z8o=o("DPRQuestionEncoder"),W8o=o(" (DPR model)"),Q8o=l(),F_=a("li"),Qce=a("strong"),H8o=o("dpt"),U8o=o(" \u2014 "),Sj=a("a"),J8o=o("DPTModel"),Y8o=o(" (DPT model)"),K8o=l(),T_=a("li"),Hce=a("strong"),Z8o=o("electra"),e9o=o(" \u2014 "),Rj=a("a"),o9o=o("ElectraModel"),r9o=o(" (ELECTRA model)"),t9o=l(),M_=a("li"),Uce=a("strong"),a9o=o("flaubert"),n9o=o(" \u2014 "),Pj=a("a"),s9o=o("FlaubertModel"),l9o=o(" (FlauBERT model)"),i9o=l(),E_=a("li"),Jce=a("strong"),d9o=o("flava"),c9o=o(" \u2014 "),Bj=a("a"),f9o=o("FlavaModel"),m9o=o(" (FLAVA model)"),g9o=l(),C_=a("li"),Yce=a("strong"),h9o=o("fnet"),p9o=o(" \u2014 "),Ij=a("a"),_9o=o("FNetModel"),u9o=o(" (FNet model)"),b9o=l(),w_=a("li"),Kce=a("strong"),v9o=o("fsmt"),F9o=o(" \u2014 "),Nj=a("a"),T9o=o("FSMTModel"),M9o=o(" (FairSeq Machine-Translation model)"),E9o=l(),Hs=a("li"),Zce=a("strong"),C9o=o("funnel"),w9o=o(" \u2014 "),qj=a("a"),A9o=o("FunnelModel"),L9o=o(" or "),jj=a("a"),y9o=o("FunnelBaseModel"),x9o=o(" (Funnel Transformer model)"),$9o=l(),A_=a("li"),efe=a("strong"),k9o=o("glpn"),S9o=o(" \u2014 "),Dj=a("a"),R9o=o("GLPNModel"),P9o=o(" (GLPN model)"),B9o=l(),L_=a("li"),ofe=a("strong"),I9o=o("gpt2"),N9o=o(" \u2014 "),Gj=a("a"),q9o=o("GPT2Model"),j9o=o(" (OpenAI GPT-2 model)"),D9o=l(),y_=a("li"),rfe=a("strong"),G9o=o("gpt_neo"),O9o=o(" \u2014 "),Oj=a("a"),V9o=o("GPTNeoModel"),X9o=o(" (GPT Neo model)"),z9o=l(),x_=a("li"),tfe=a("strong"),W9o=o("gpt_neox"),Q9o=o(" \u2014 "),Vj=a("a"),H9o=o("GPTNeoXModel"),U9o=o(" (GPT NeoX model)"),J9o=l(),$_=a("li"),afe=a("strong"),Y9o=o("gptj"),K9o=o(" \u2014 "),Xj=a("a"),Z9o=o("GPTJModel"),eMo=o(" (GPT-J model)"),oMo=l(),k_=a("li"),nfe=a("strong"),rMo=o("groupvit"),tMo=o(" \u2014 "),zj=a("a"),aMo=o("GroupViTModel"),nMo=o(" (GroupViT model)"),sMo=l(),S_=a("li"),sfe=a("strong"),lMo=o("hubert"),iMo=o(" \u2014 "),Wj=a("a"),dMo=o("HubertModel"),cMo=o(" (Hubert model)"),fMo=l(),R_=a("li"),lfe=a("strong"),mMo=o("ibert"),gMo=o(" \u2014 "),Qj=a("a"),hMo=o("IBertModel"),pMo=o(" (I-BERT model)"),_Mo=l(),P_=a("li"),ife=a("strong"),uMo=o("imagegpt"),bMo=o(" \u2014 "),Hj=a("a"),vMo=o("ImageGPTModel"),FMo=o(" (ImageGPT model)"),TMo=l(),B_=a("li"),dfe=a("strong"),MMo=o("layoutlm"),EMo=o(" \u2014 "),Uj=a("a"),CMo=o("LayoutLMModel"),wMo=o(" (LayoutLM model)"),AMo=l(),I_=a("li"),cfe=a("strong"),LMo=o("layoutlmv2"),yMo=o(" \u2014 "),Jj=a("a"),xMo=o("LayoutLMv2Model"),$Mo=o(" (LayoutLMv2 model)"),kMo=l(),N_=a("li"),ffe=a("strong"),SMo=o("layoutlmv3"),RMo=o(" \u2014 "),Yj=a("a"),PMo=o("LayoutLMv3Model"),BMo=o(" (LayoutLMv3 model)"),IMo=l(),q_=a("li"),mfe=a("strong"),NMo=o("led"),qMo=o(" \u2014 "),Kj=a("a"),jMo=o("LEDModel"),DMo=o(" (LED model)"),GMo=l(),j_=a("li"),gfe=a("strong"),OMo=o("levit"),VMo=o(" \u2014 "),Zj=a("a"),XMo=o("LevitModel"),zMo=o(" (LeViT model)"),WMo=l(),D_=a("li"),hfe=a("strong"),QMo=o("longformer"),HMo=o(" \u2014 "),eD=a("a"),UMo=o("LongformerModel"),JMo=o(" (Longformer model)"),YMo=l(),G_=a("li"),pfe=a("strong"),KMo=o("longt5"),ZMo=o(" \u2014 "),oD=a("a"),e4o=o("LongT5Model"),o4o=o(" (LongT5 model)"),r4o=l(),O_=a("li"),_fe=a("strong"),t4o=o("luke"),a4o=o(" \u2014 "),rD=a("a"),n4o=o("LukeModel"),s4o=o(" (LUKE model)"),l4o=l(),V_=a("li"),ufe=a("strong"),i4o=o("lxmert"),d4o=o(" \u2014 "),tD=a("a"),c4o=o("LxmertModel"),f4o=o(" (LXMERT model)"),m4o=l(),X_=a("li"),bfe=a("strong"),g4o=o("m2m_100"),h4o=o(" \u2014 "),aD=a("a"),p4o=o("M2M100Model"),_4o=o(" (M2M100 model)"),u4o=l(),z_=a("li"),vfe=a("strong"),b4o=o("marian"),v4o=o(" \u2014 "),nD=a("a"),F4o=o("MarianModel"),T4o=o(" (Marian model)"),M4o=l(),W_=a("li"),Ffe=a("strong"),E4o=o("maskformer"),C4o=o(" \u2014 "),sD=a("a"),w4o=o("MaskFormerModel"),A4o=o(" (MaskFormer model)"),L4o=l(),Q_=a("li"),Tfe=a("strong"),y4o=o("mbart"),x4o=o(" \u2014 "),lD=a("a"),$4o=o("MBartModel"),k4o=o(" (mBART model)"),S4o=l(),H_=a("li"),Mfe=a("strong"),R4o=o("mctct"),P4o=o(" \u2014 "),iD=a("a"),B4o=o("MCTCTModel"),I4o=o(" (M-CTC-T model)"),N4o=l(),U_=a("li"),Efe=a("strong"),q4o=o("megatron-bert"),j4o=o(" \u2014 "),dD=a("a"),D4o=o("MegatronBertModel"),G4o=o(" (Megatron-BERT model)"),O4o=l(),J_=a("li"),Cfe=a("strong"),V4o=o("mobilebert"),X4o=o(" \u2014 "),cD=a("a"),z4o=o("MobileBertModel"),W4o=o(" (MobileBERT model)"),Q4o=l(),Y_=a("li"),wfe=a("strong"),H4o=o("mobilevit"),U4o=o(" \u2014 "),fD=a("a"),J4o=o("MobileViTModel"),Y4o=o(" (MobileViT model)"),K4o=l(),K_=a("li"),Afe=a("strong"),Z4o=o("mpnet"),eEo=o(" \u2014 "),mD=a("a"),oEo=o("MPNetModel"),rEo=o(" (MPNet model)"),tEo=l(),Z_=a("li"),Lfe=a("strong"),aEo=o("mt5"),nEo=o(" \u2014 "),gD=a("a"),sEo=o("MT5Model"),lEo=o(" (MT5 model)"),iEo=l(),eu=a("li"),yfe=a("strong"),dEo=o("mvp"),cEo=o(" \u2014 "),hD=a("a"),fEo=o("MvpModel"),mEo=o(" (MVP model)"),gEo=l(),ou=a("li"),xfe=a("strong"),hEo=o("nezha"),pEo=o(" \u2014 "),pD=a("a"),_Eo=o("NezhaModel"),uEo=o(" (Nezha model)"),bEo=l(),ru=a("li"),$fe=a("strong"),vEo=o("nystromformer"),FEo=o(" \u2014 "),_D=a("a"),TEo=o("NystromformerModel"),MEo=o(" (Nystr\xF6mformer model)"),EEo=l(),tu=a("li"),kfe=a("strong"),CEo=o("openai-gpt"),wEo=o(" \u2014 "),uD=a("a"),AEo=o("OpenAIGPTModel"),LEo=o(" (OpenAI GPT model)"),yEo=l(),au=a("li"),Sfe=a("strong"),xEo=o("opt"),$Eo=o(" \u2014 "),bD=a("a"),kEo=o("OPTModel"),SEo=o(" (OPT model)"),REo=l(),nu=a("li"),Rfe=a("strong"),PEo=o("owlvit"),BEo=o(" \u2014 "),vD=a("a"),IEo=o("OwlViTModel"),NEo=o(" (OWL-ViT model)"),qEo=l(),su=a("li"),Pfe=a("strong"),jEo=o("pegasus"),DEo=o(" \u2014 "),FD=a("a"),GEo=o("PegasusModel"),OEo=o(" (Pegasus model)"),VEo=l(),lu=a("li"),Bfe=a("strong"),XEo=o("perceiver"),zEo=o(" \u2014 "),TD=a("a"),WEo=o("PerceiverModel"),QEo=o(" (Perceiver model)"),HEo=l(),iu=a("li"),Ife=a("strong"),UEo=o("plbart"),JEo=o(" \u2014 "),MD=a("a"),YEo=o("PLBartModel"),KEo=o(" (PLBart model)"),ZEo=l(),du=a("li"),Nfe=a("strong"),eCo=o("poolformer"),oCo=o(" \u2014 "),ED=a("a"),rCo=o("PoolFormerModel"),tCo=o(" (PoolFormer model)"),aCo=l(),cu=a("li"),qfe=a("strong"),nCo=o("prophetnet"),sCo=o(" \u2014 "),CD=a("a"),lCo=o("ProphetNetModel"),iCo=o(" (ProphetNet model)"),dCo=l(),fu=a("li"),jfe=a("strong"),cCo=o("qdqbert"),fCo=o(" \u2014 "),wD=a("a"),mCo=o("QDQBertModel"),gCo=o(" (QDQBert model)"),hCo=l(),mu=a("li"),Dfe=a("strong"),pCo=o("reformer"),_Co=o(" \u2014 "),AD=a("a"),uCo=o("ReformerModel"),bCo=o(" (Reformer model)"),vCo=l(),gu=a("li"),Gfe=a("strong"),FCo=o("regnet"),TCo=o(" \u2014 "),LD=a("a"),MCo=o("RegNetModel"),ECo=o(" (RegNet model)"),CCo=l(),hu=a("li"),Ofe=a("strong"),wCo=o("rembert"),ACo=o(" \u2014 "),yD=a("a"),LCo=o("RemBertModel"),yCo=o(" (RemBERT model)"),xCo=l(),pu=a("li"),Vfe=a("strong"),$Co=o("resnet"),kCo=o(" \u2014 "),xD=a("a"),SCo=o("ResNetModel"),RCo=o(" (ResNet model)"),PCo=l(),_u=a("li"),Xfe=a("strong"),BCo=o("retribert"),ICo=o(" \u2014 "),$D=a("a"),NCo=o("RetriBertModel"),qCo=o(" (RetriBERT model)"),jCo=l(),uu=a("li"),zfe=a("strong"),DCo=o("roberta"),GCo=o(" \u2014 "),kD=a("a"),OCo=o("RobertaModel"),VCo=o(" (RoBERTa model)"),XCo=l(),bu=a("li"),Wfe=a("strong"),zCo=o("roformer"),WCo=o(" \u2014 "),SD=a("a"),QCo=o("RoFormerModel"),HCo=o(" (RoFormer model)"),UCo=l(),vu=a("li"),Qfe=a("strong"),JCo=o("segformer"),YCo=o(" \u2014 "),RD=a("a"),KCo=o("SegformerModel"),ZCo=o(" (SegFormer model)"),e5o=l(),Fu=a("li"),Hfe=a("strong"),o5o=o("sew"),r5o=o(" \u2014 "),PD=a("a"),t5o=o("SEWModel"),a5o=o(" (SEW model)"),n5o=l(),Tu=a("li"),Ufe=a("strong"),s5o=o("sew-d"),l5o=o(" \u2014 "),BD=a("a"),i5o=o("SEWDModel"),d5o=o(" (SEW-D model)"),c5o=l(),Mu=a("li"),Jfe=a("strong"),f5o=o("speech_to_text"),m5o=o(" \u2014 "),ID=a("a"),g5o=o("Speech2TextModel"),h5o=o(" (Speech2Text model)"),p5o=l(),Eu=a("li"),Yfe=a("strong"),_5o=o("splinter"),u5o=o(" \u2014 "),ND=a("a"),b5o=o("SplinterModel"),v5o=o(" (Splinter model)"),F5o=l(),Cu=a("li"),Kfe=a("strong"),T5o=o("squeezebert"),M5o=o(" \u2014 "),qD=a("a"),E5o=o("SqueezeBertModel"),C5o=o(" (SqueezeBERT model)"),w5o=l(),wu=a("li"),Zfe=a("strong"),A5o=o("swin"),L5o=o(" \u2014 "),jD=a("a"),y5o=o("SwinModel"),x5o=o(" (Swin Transformer model)"),$5o=l(),Au=a("li"),eme=a("strong"),k5o=o("t5"),S5o=o(" \u2014 "),DD=a("a"),R5o=o("T5Model"),P5o=o(" (T5 model)"),B5o=l(),Lu=a("li"),ome=a("strong"),I5o=o("tapas"),N5o=o(" \u2014 "),GD=a("a"),q5o=o("TapasModel"),j5o=o(" (TAPAS model)"),D5o=l(),yu=a("li"),rme=a("strong"),G5o=o("trajectory_transformer"),O5o=o(" \u2014 "),OD=a("a"),V5o=o("TrajectoryTransformerModel"),X5o=o(" (Trajectory Transformer model)"),z5o=l(),xu=a("li"),tme=a("strong"),W5o=o("transfo-xl"),Q5o=o(" \u2014 "),VD=a("a"),H5o=o("TransfoXLModel"),U5o=o(" (Transformer-XL model)"),J5o=l(),$u=a("li"),ame=a("strong"),Y5o=o("unispeech"),K5o=o(" \u2014 "),XD=a("a"),Z5o=o("UniSpeechModel"),e0o=o(" (UniSpeech model)"),o0o=l(),ku=a("li"),nme=a("strong"),r0o=o("unispeech-sat"),t0o=o(" \u2014 "),zD=a("a"),a0o=o("UniSpeechSatModel"),n0o=o(" (UniSpeechSat model)"),s0o=l(),Su=a("li"),sme=a("strong"),l0o=o("van"),i0o=o(" \u2014 "),WD=a("a"),d0o=o("VanModel"),c0o=o(" (VAN model)"),f0o=l(),Ru=a("li"),lme=a("strong"),m0o=o("vilt"),g0o=o(" \u2014 "),QD=a("a"),h0o=o("ViltModel"),p0o=o(" (ViLT model)"),_0o=l(),Pu=a("li"),ime=a("strong"),u0o=o("vision-text-dual-encoder"),b0o=o(" \u2014 "),HD=a("a"),v0o=o("VisionTextDualEncoderModel"),F0o=o(" (VisionTextDualEncoder model)"),T0o=l(),Bu=a("li"),dme=a("strong"),M0o=o("visual_bert"),E0o=o(" \u2014 "),UD=a("a"),C0o=o("VisualBertModel"),w0o=o(" (VisualBERT model)"),A0o=l(),Iu=a("li"),cme=a("strong"),L0o=o("vit"),y0o=o(" \u2014 "),JD=a("a"),x0o=o("ViTModel"),$0o=o(" (ViT model)"),k0o=l(),Nu=a("li"),fme=a("strong"),S0o=o("vit_mae"),R0o=o(" \u2014 "),YD=a("a"),P0o=o("ViTMAEModel"),B0o=o(" (ViTMAE model)"),I0o=l(),qu=a("li"),mme=a("strong"),N0o=o("wav2vec2"),q0o=o(" \u2014 "),KD=a("a"),j0o=o("Wav2Vec2Model"),D0o=o(" (Wav2Vec2 model)"),G0o=l(),ju=a("li"),gme=a("strong"),O0o=o("wav2vec2-conformer"),V0o=o(" \u2014 "),ZD=a("a"),X0o=o("Wav2Vec2ConformerModel"),z0o=o(" (Wav2Vec2-Conformer model)"),W0o=l(),Du=a("li"),hme=a("strong"),Q0o=o("wavlm"),H0o=o(" \u2014 "),eG=a("a"),U0o=o("WavLMModel"),J0o=o(" (WavLM model)"),Y0o=l(),Gu=a("li"),pme=a("strong"),K0o=o("xglm"),Z0o=o(" \u2014 "),oG=a("a"),ewo=o("XGLMModel"),owo=o(" (XGLM model)"),rwo=l(),Ou=a("li"),_me=a("strong"),two=o("xlm"),awo=o(" \u2014 "),rG=a("a"),nwo=o("XLMModel"),swo=o(" (XLM model)"),lwo=l(),Vu=a("li"),ume=a("strong"),iwo=o("xlm-prophetnet"),dwo=o(" \u2014 "),tG=a("a"),cwo=o("XLMProphetNetModel"),fwo=o(" (XLM-ProphetNet model)"),mwo=l(),Xu=a("li"),bme=a("strong"),gwo=o("xlm-roberta"),hwo=o(" \u2014 "),aG=a("a"),pwo=o("XLMRobertaModel"),_wo=o(" (XLM-RoBERTa model)"),uwo=l(),zu=a("li"),vme=a("strong"),bwo=o("xlm-roberta-xl"),vwo=o(" \u2014 "),nG=a("a"),Fwo=o("XLMRobertaXLModel"),Two=o(" (XLM-RoBERTa-XL model)"),Mwo=l(),Wu=a("li"),Fme=a("strong"),Ewo=o("xlnet"),Cwo=o(" \u2014 "),sG=a("a"),wwo=o("XLNetModel"),Awo=o(" (XLNet model)"),Lwo=l(),Qu=a("li"),Tme=a("strong"),ywo=o("yolos"),xwo=o(" \u2014 "),lG=a("a"),$wo=o("YolosModel"),kwo=o(" (YOLOS model)"),Swo=l(),Hu=a("li"),Mme=a("strong"),Rwo=o("yoso"),Pwo=o(" \u2014 "),iG=a("a"),Bwo=o("YosoModel"),Iwo=o(" (YOSO model)"),Nwo=l(),Uu=a("p"),qwo=o("The model is set in evaluation mode by default using "),Eme=a("code"),jwo=o("model.eval()"),Dwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cme=a("code"),Gwo=o("model.train()"),Owo=l(),F(Ju.$$.fragment),CXe=l(),Xi=a("h2"),Yu=a("a"),wme=a("span"),F(q6.$$.fragment),Vwo=l(),Ame=a("span"),Xwo=o("AutoModelForPreTraining"),wXe=l(),$o=a("div"),F(j6.$$.fragment),zwo=l(),zi=a("p"),Wwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),dG=a("a"),Qwo=o("from_pretrained()"),Hwo=o(" class method or the "),cG=a("a"),Uwo=o("from_config()"),Jwo=o(` class
method.`),Ywo=l(),D6=a("p"),Kwo=o("This class cannot be instantiated directly using "),Lme=a("code"),Zwo=o("__init__()"),eAo=o(" (throws an error)."),oAo=l(),it=a("div"),F(G6.$$.fragment),rAo=l(),yme=a("p"),tAo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),aAo=l(),Wi=a("p"),nAo=o(`Note:
Loading a model from its configuration file does `),xme=a("strong"),sAo=o("not"),lAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fG=a("a"),iAo=o("from_pretrained()"),dAo=o(" to load the model weights."),cAo=l(),F(Ku.$$.fragment),fAo=l(),Ye=a("div"),F(O6.$$.fragment),mAo=l(),$me=a("p"),gAo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hAo=l(),Na=a("p"),pAo=o("The model class to instantiate is selected based on the "),kme=a("code"),_Ao=o("model_type"),uAo=o(` property of the config object (either
passed as an argument or loaded from `),Sme=a("code"),bAo=o("pretrained_model_name_or_path"),vAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rme=a("code"),FAo=o("pretrained_model_name_or_path"),TAo=o(":"),MAo=l(),G=a("ul"),Zu=a("li"),Pme=a("strong"),EAo=o("albert"),CAo=o(" \u2014 "),mG=a("a"),wAo=o("AlbertForPreTraining"),AAo=o(" (ALBERT model)"),LAo=l(),e1=a("li"),Bme=a("strong"),yAo=o("bart"),xAo=o(" \u2014 "),gG=a("a"),$Ao=o("BartForConditionalGeneration"),kAo=o(" (BART model)"),SAo=l(),o1=a("li"),Ime=a("strong"),RAo=o("bert"),PAo=o(" \u2014 "),hG=a("a"),BAo=o("BertForPreTraining"),IAo=o(" (BERT model)"),NAo=l(),r1=a("li"),Nme=a("strong"),qAo=o("big_bird"),jAo=o(" \u2014 "),pG=a("a"),DAo=o("BigBirdForPreTraining"),GAo=o(" (BigBird model)"),OAo=l(),t1=a("li"),qme=a("strong"),VAo=o("bloom"),XAo=o(" \u2014 "),_G=a("a"),zAo=o("BloomForCausalLM"),WAo=o(" (BLOOM model)"),QAo=l(),a1=a("li"),jme=a("strong"),HAo=o("camembert"),UAo=o(" \u2014 "),uG=a("a"),JAo=o("CamembertForMaskedLM"),YAo=o(" (CamemBERT model)"),KAo=l(),n1=a("li"),Dme=a("strong"),ZAo=o("ctrl"),e6o=o(" \u2014 "),bG=a("a"),o6o=o("CTRLLMHeadModel"),r6o=o(" (CTRL model)"),t6o=l(),s1=a("li"),Gme=a("strong"),a6o=o("data2vec-text"),n6o=o(" \u2014 "),vG=a("a"),s6o=o("Data2VecTextForMaskedLM"),l6o=o(" (Data2VecText model)"),i6o=l(),l1=a("li"),Ome=a("strong"),d6o=o("deberta"),c6o=o(" \u2014 "),FG=a("a"),f6o=o("DebertaForMaskedLM"),m6o=o(" (DeBERTa model)"),g6o=l(),i1=a("li"),Vme=a("strong"),h6o=o("deberta-v2"),p6o=o(" \u2014 "),TG=a("a"),_6o=o("DebertaV2ForMaskedLM"),u6o=o(" (DeBERTa-v2 model)"),b6o=l(),d1=a("li"),Xme=a("strong"),v6o=o("distilbert"),F6o=o(" \u2014 "),MG=a("a"),T6o=o("DistilBertForMaskedLM"),M6o=o(" (DistilBERT model)"),E6o=l(),c1=a("li"),zme=a("strong"),C6o=o("electra"),w6o=o(" \u2014 "),EG=a("a"),A6o=o("ElectraForPreTraining"),L6o=o(" (ELECTRA model)"),y6o=l(),f1=a("li"),Wme=a("strong"),x6o=o("flaubert"),$6o=o(" \u2014 "),CG=a("a"),k6o=o("FlaubertWithLMHeadModel"),S6o=o(" (FlauBERT model)"),R6o=l(),m1=a("li"),Qme=a("strong"),P6o=o("flava"),B6o=o(" \u2014 "),wG=a("a"),I6o=o("FlavaForPreTraining"),N6o=o(" (FLAVA model)"),q6o=l(),g1=a("li"),Hme=a("strong"),j6o=o("fnet"),D6o=o(" \u2014 "),AG=a("a"),G6o=o("FNetForPreTraining"),O6o=o(" (FNet model)"),V6o=l(),h1=a("li"),Ume=a("strong"),X6o=o("fsmt"),z6o=o(" \u2014 "),LG=a("a"),W6o=o("FSMTForConditionalGeneration"),Q6o=o(" (FairSeq Machine-Translation model)"),H6o=l(),p1=a("li"),Jme=a("strong"),U6o=o("funnel"),J6o=o(" \u2014 "),yG=a("a"),Y6o=o("FunnelForPreTraining"),K6o=o(" (Funnel Transformer model)"),Z6o=l(),_1=a("li"),Yme=a("strong"),eLo=o("gpt2"),oLo=o(" \u2014 "),xG=a("a"),rLo=o("GPT2LMHeadModel"),tLo=o(" (OpenAI GPT-2 model)"),aLo=l(),u1=a("li"),Kme=a("strong"),nLo=o("ibert"),sLo=o(" \u2014 "),$G=a("a"),lLo=o("IBertForMaskedLM"),iLo=o(" (I-BERT model)"),dLo=l(),b1=a("li"),Zme=a("strong"),cLo=o("layoutlm"),fLo=o(" \u2014 "),kG=a("a"),mLo=o("LayoutLMForMaskedLM"),gLo=o(" (LayoutLM model)"),hLo=l(),v1=a("li"),ege=a("strong"),pLo=o("longformer"),_Lo=o(" \u2014 "),SG=a("a"),uLo=o("LongformerForMaskedLM"),bLo=o(" (Longformer model)"),vLo=l(),F1=a("li"),oge=a("strong"),FLo=o("lxmert"),TLo=o(" \u2014 "),RG=a("a"),MLo=o("LxmertForPreTraining"),ELo=o(" (LXMERT model)"),CLo=l(),T1=a("li"),rge=a("strong"),wLo=o("megatron-bert"),ALo=o(" \u2014 "),PG=a("a"),LLo=o("MegatronBertForPreTraining"),yLo=o(" (Megatron-BERT model)"),xLo=l(),M1=a("li"),tge=a("strong"),$Lo=o("mobilebert"),kLo=o(" \u2014 "),BG=a("a"),SLo=o("MobileBertForPreTraining"),RLo=o(" (MobileBERT model)"),PLo=l(),E1=a("li"),age=a("strong"),BLo=o("mpnet"),ILo=o(" \u2014 "),IG=a("a"),NLo=o("MPNetForMaskedLM"),qLo=o(" (MPNet model)"),jLo=l(),C1=a("li"),nge=a("strong"),DLo=o("mvp"),GLo=o(" \u2014 "),NG=a("a"),OLo=o("MvpForConditionalGeneration"),VLo=o(" (MVP model)"),XLo=l(),w1=a("li"),sge=a("strong"),zLo=o("nezha"),WLo=o(" \u2014 "),qG=a("a"),QLo=o("NezhaForPreTraining"),HLo=o(" (Nezha model)"),ULo=l(),A1=a("li"),lge=a("strong"),JLo=o("openai-gpt"),YLo=o(" \u2014 "),jG=a("a"),KLo=o("OpenAIGPTLMHeadModel"),ZLo=o(" (OpenAI GPT model)"),eyo=l(),L1=a("li"),ige=a("strong"),oyo=o("retribert"),ryo=o(" \u2014 "),DG=a("a"),tyo=o("RetriBertModel"),ayo=o(" (RetriBERT model)"),nyo=l(),y1=a("li"),dge=a("strong"),syo=o("roberta"),lyo=o(" \u2014 "),GG=a("a"),iyo=o("RobertaForMaskedLM"),dyo=o(" (RoBERTa model)"),cyo=l(),x1=a("li"),cge=a("strong"),fyo=o("splinter"),myo=o(" \u2014 "),OG=a("a"),gyo=o("SplinterForPreTraining"),hyo=o(" (Splinter model)"),pyo=l(),$1=a("li"),fge=a("strong"),_yo=o("squeezebert"),uyo=o(" \u2014 "),VG=a("a"),byo=o("SqueezeBertForMaskedLM"),vyo=o(" (SqueezeBERT model)"),Fyo=l(),k1=a("li"),mge=a("strong"),Tyo=o("t5"),Myo=o(" \u2014 "),XG=a("a"),Eyo=o("T5ForConditionalGeneration"),Cyo=o(" (T5 model)"),wyo=l(),S1=a("li"),gge=a("strong"),Ayo=o("tapas"),Lyo=o(" \u2014 "),zG=a("a"),yyo=o("TapasForMaskedLM"),xyo=o(" (TAPAS model)"),$yo=l(),R1=a("li"),hge=a("strong"),kyo=o("transfo-xl"),Syo=o(" \u2014 "),WG=a("a"),Ryo=o("TransfoXLLMHeadModel"),Pyo=o(" (Transformer-XL model)"),Byo=l(),P1=a("li"),pge=a("strong"),Iyo=o("unispeech"),Nyo=o(" \u2014 "),QG=a("a"),qyo=o("UniSpeechForPreTraining"),jyo=o(" (UniSpeech model)"),Dyo=l(),B1=a("li"),_ge=a("strong"),Gyo=o("unispeech-sat"),Oyo=o(" \u2014 "),HG=a("a"),Vyo=o("UniSpeechSatForPreTraining"),Xyo=o(" (UniSpeechSat model)"),zyo=l(),I1=a("li"),uge=a("strong"),Wyo=o("visual_bert"),Qyo=o(" \u2014 "),UG=a("a"),Hyo=o("VisualBertForPreTraining"),Uyo=o(" (VisualBERT model)"),Jyo=l(),N1=a("li"),bge=a("strong"),Yyo=o("vit_mae"),Kyo=o(" \u2014 "),JG=a("a"),Zyo=o("ViTMAEForPreTraining"),exo=o(" (ViTMAE model)"),oxo=l(),q1=a("li"),vge=a("strong"),rxo=o("wav2vec2"),txo=o(" \u2014 "),YG=a("a"),axo=o("Wav2Vec2ForPreTraining"),nxo=o(" (Wav2Vec2 model)"),sxo=l(),j1=a("li"),Fge=a("strong"),lxo=o("wav2vec2-conformer"),ixo=o(" \u2014 "),KG=a("a"),dxo=o("Wav2Vec2ConformerForPreTraining"),cxo=o(" (Wav2Vec2-Conformer model)"),fxo=l(),D1=a("li"),Tge=a("strong"),mxo=o("xlm"),gxo=o(" \u2014 "),ZG=a("a"),hxo=o("XLMWithLMHeadModel"),pxo=o(" (XLM model)"),_xo=l(),G1=a("li"),Mge=a("strong"),uxo=o("xlm-roberta"),bxo=o(" \u2014 "),eO=a("a"),vxo=o("XLMRobertaForMaskedLM"),Fxo=o(" (XLM-RoBERTa model)"),Txo=l(),O1=a("li"),Ege=a("strong"),Mxo=o("xlm-roberta-xl"),Exo=o(" \u2014 "),oO=a("a"),Cxo=o("XLMRobertaXLForMaskedLM"),wxo=o(" (XLM-RoBERTa-XL model)"),Axo=l(),V1=a("li"),Cge=a("strong"),Lxo=o("xlnet"),yxo=o(" \u2014 "),rO=a("a"),xxo=o("XLNetLMHeadModel"),$xo=o(" (XLNet model)"),kxo=l(),X1=a("p"),Sxo=o("The model is set in evaluation mode by default using "),wge=a("code"),Rxo=o("model.eval()"),Pxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Age=a("code"),Bxo=o("model.train()"),Ixo=l(),F(z1.$$.fragment),AXe=l(),Qi=a("h2"),W1=a("a"),Lge=a("span"),F(V6.$$.fragment),Nxo=l(),yge=a("span"),qxo=o("AutoModelForCausalLM"),LXe=l(),ko=a("div"),F(X6.$$.fragment),jxo=l(),Hi=a("p"),Dxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),tO=a("a"),Gxo=o("from_pretrained()"),Oxo=o(" class method or the "),aO=a("a"),Vxo=o("from_config()"),Xxo=o(` class
method.`),zxo=l(),z6=a("p"),Wxo=o("This class cannot be instantiated directly using "),xge=a("code"),Qxo=o("__init__()"),Hxo=o(" (throws an error)."),Uxo=l(),dt=a("div"),F(W6.$$.fragment),Jxo=l(),$ge=a("p"),Yxo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Kxo=l(),Ui=a("p"),Zxo=o(`Note:
Loading a model from its configuration file does `),kge=a("strong"),e$o=o("not"),o$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nO=a("a"),r$o=o("from_pretrained()"),t$o=o(" to load the model weights."),a$o=l(),F(Q1.$$.fragment),n$o=l(),Ke=a("div"),F(Q6.$$.fragment),s$o=l(),Sge=a("p"),l$o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),i$o=l(),qa=a("p"),d$o=o("The model class to instantiate is selected based on the "),Rge=a("code"),c$o=o("model_type"),f$o=o(` property of the config object (either
passed as an argument or loaded from `),Pge=a("code"),m$o=o("pretrained_model_name_or_path"),g$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bge=a("code"),h$o=o("pretrained_model_name_or_path"),p$o=o(":"),_$o=l(),z=a("ul"),H1=a("li"),Ige=a("strong"),u$o=o("bart"),b$o=o(" \u2014 "),sO=a("a"),v$o=o("BartForCausalLM"),F$o=o(" (BART model)"),T$o=l(),U1=a("li"),Nge=a("strong"),M$o=o("bert"),E$o=o(" \u2014 "),lO=a("a"),C$o=o("BertLMHeadModel"),w$o=o(" (BERT model)"),A$o=l(),J1=a("li"),qge=a("strong"),L$o=o("bert-generation"),y$o=o(" \u2014 "),iO=a("a"),x$o=o("BertGenerationDecoder"),$$o=o(" (Bert Generation model)"),k$o=l(),Y1=a("li"),jge=a("strong"),S$o=o("big_bird"),R$o=o(" \u2014 "),dO=a("a"),P$o=o("BigBirdForCausalLM"),B$o=o(" (BigBird model)"),I$o=l(),K1=a("li"),Dge=a("strong"),N$o=o("bigbird_pegasus"),q$o=o(" \u2014 "),cO=a("a"),j$o=o("BigBirdPegasusForCausalLM"),D$o=o(" (BigBird-Pegasus model)"),G$o=l(),Z1=a("li"),Gge=a("strong"),O$o=o("blenderbot"),V$o=o(" \u2014 "),fO=a("a"),X$o=o("BlenderbotForCausalLM"),z$o=o(" (Blenderbot model)"),W$o=l(),e2=a("li"),Oge=a("strong"),Q$o=o("blenderbot-small"),H$o=o(" \u2014 "),mO=a("a"),U$o=o("BlenderbotSmallForCausalLM"),J$o=o(" (BlenderbotSmall model)"),Y$o=l(),o2=a("li"),Vge=a("strong"),K$o=o("bloom"),Z$o=o(" \u2014 "),gO=a("a"),eko=o("BloomForCausalLM"),oko=o(" (BLOOM model)"),rko=l(),r2=a("li"),Xge=a("strong"),tko=o("camembert"),ako=o(" \u2014 "),hO=a("a"),nko=o("CamembertForCausalLM"),sko=o(" (CamemBERT model)"),lko=l(),t2=a("li"),zge=a("strong"),iko=o("codegen"),dko=o(" \u2014 "),pO=a("a"),cko=o("CodeGenForCausalLM"),fko=o(" (CodeGen model)"),mko=l(),a2=a("li"),Wge=a("strong"),gko=o("ctrl"),hko=o(" \u2014 "),_O=a("a"),pko=o("CTRLLMHeadModel"),_ko=o(" (CTRL model)"),uko=l(),n2=a("li"),Qge=a("strong"),bko=o("data2vec-text"),vko=o(" \u2014 "),uO=a("a"),Fko=o("Data2VecTextForCausalLM"),Tko=o(" (Data2VecText model)"),Mko=l(),s2=a("li"),Hge=a("strong"),Eko=o("electra"),Cko=o(" \u2014 "),bO=a("a"),wko=o("ElectraForCausalLM"),Ako=o(" (ELECTRA model)"),Lko=l(),l2=a("li"),Uge=a("strong"),yko=o("gpt2"),xko=o(" \u2014 "),vO=a("a"),$ko=o("GPT2LMHeadModel"),kko=o(" (OpenAI GPT-2 model)"),Sko=l(),i2=a("li"),Jge=a("strong"),Rko=o("gpt_neo"),Pko=o(" \u2014 "),FO=a("a"),Bko=o("GPTNeoForCausalLM"),Iko=o(" (GPT Neo model)"),Nko=l(),d2=a("li"),Yge=a("strong"),qko=o("gpt_neox"),jko=o(" \u2014 "),TO=a("a"),Dko=o("GPTNeoXForCausalLM"),Gko=o(" (GPT NeoX model)"),Oko=l(),c2=a("li"),Kge=a("strong"),Vko=o("gptj"),Xko=o(" \u2014 "),MO=a("a"),zko=o("GPTJForCausalLM"),Wko=o(" (GPT-J model)"),Qko=l(),f2=a("li"),Zge=a("strong"),Hko=o("marian"),Uko=o(" \u2014 "),EO=a("a"),Jko=o("MarianForCausalLM"),Yko=o(" (Marian model)"),Kko=l(),m2=a("li"),ehe=a("strong"),Zko=o("mbart"),eSo=o(" \u2014 "),CO=a("a"),oSo=o("MBartForCausalLM"),rSo=o(" (mBART model)"),tSo=l(),g2=a("li"),ohe=a("strong"),aSo=o("megatron-bert"),nSo=o(" \u2014 "),wO=a("a"),sSo=o("MegatronBertForCausalLM"),lSo=o(" (Megatron-BERT model)"),iSo=l(),h2=a("li"),rhe=a("strong"),dSo=o("mvp"),cSo=o(" \u2014 "),AO=a("a"),fSo=o("MvpForCausalLM"),mSo=o(" (MVP model)"),gSo=l(),p2=a("li"),the=a("strong"),hSo=o("openai-gpt"),pSo=o(" \u2014 "),LO=a("a"),_So=o("OpenAIGPTLMHeadModel"),uSo=o(" (OpenAI GPT model)"),bSo=l(),_2=a("li"),ahe=a("strong"),vSo=o("opt"),FSo=o(" \u2014 "),yO=a("a"),TSo=o("OPTForCausalLM"),MSo=o(" (OPT model)"),ESo=l(),u2=a("li"),nhe=a("strong"),CSo=o("pegasus"),wSo=o(" \u2014 "),xO=a("a"),ASo=o("PegasusForCausalLM"),LSo=o(" (Pegasus model)"),ySo=l(),b2=a("li"),she=a("strong"),xSo=o("plbart"),$So=o(" \u2014 "),$O=a("a"),kSo=o("PLBartForCausalLM"),SSo=o(" (PLBart model)"),RSo=l(),v2=a("li"),lhe=a("strong"),PSo=o("prophetnet"),BSo=o(" \u2014 "),kO=a("a"),ISo=o("ProphetNetForCausalLM"),NSo=o(" (ProphetNet model)"),qSo=l(),F2=a("li"),ihe=a("strong"),jSo=o("qdqbert"),DSo=o(" \u2014 "),SO=a("a"),GSo=o("QDQBertLMHeadModel"),OSo=o(" (QDQBert model)"),VSo=l(),T2=a("li"),dhe=a("strong"),XSo=o("reformer"),zSo=o(" \u2014 "),RO=a("a"),WSo=o("ReformerModelWithLMHead"),QSo=o(" (Reformer model)"),HSo=l(),M2=a("li"),che=a("strong"),USo=o("rembert"),JSo=o(" \u2014 "),PO=a("a"),YSo=o("RemBertForCausalLM"),KSo=o(" (RemBERT model)"),ZSo=l(),E2=a("li"),fhe=a("strong"),eRo=o("roberta"),oRo=o(" \u2014 "),BO=a("a"),rRo=o("RobertaForCausalLM"),tRo=o(" (RoBERTa model)"),aRo=l(),C2=a("li"),mhe=a("strong"),nRo=o("roformer"),sRo=o(" \u2014 "),IO=a("a"),lRo=o("RoFormerForCausalLM"),iRo=o(" (RoFormer model)"),dRo=l(),w2=a("li"),ghe=a("strong"),cRo=o("speech_to_text_2"),fRo=o(" \u2014 "),NO=a("a"),mRo=o("Speech2Text2ForCausalLM"),gRo=o(" (Speech2Text2 model)"),hRo=l(),A2=a("li"),hhe=a("strong"),pRo=o("transfo-xl"),_Ro=o(" \u2014 "),qO=a("a"),uRo=o("TransfoXLLMHeadModel"),bRo=o(" (Transformer-XL model)"),vRo=l(),L2=a("li"),phe=a("strong"),FRo=o("trocr"),TRo=o(" \u2014 "),jO=a("a"),MRo=o("TrOCRForCausalLM"),ERo=o(" (TrOCR model)"),CRo=l(),y2=a("li"),_he=a("strong"),wRo=o("xglm"),ARo=o(" \u2014 "),DO=a("a"),LRo=o("XGLMForCausalLM"),yRo=o(" (XGLM model)"),xRo=l(),x2=a("li"),uhe=a("strong"),$Ro=o("xlm"),kRo=o(" \u2014 "),GO=a("a"),SRo=o("XLMWithLMHeadModel"),RRo=o(" (XLM model)"),PRo=l(),$2=a("li"),bhe=a("strong"),BRo=o("xlm-prophetnet"),IRo=o(" \u2014 "),OO=a("a"),NRo=o("XLMProphetNetForCausalLM"),qRo=o(" (XLM-ProphetNet model)"),jRo=l(),k2=a("li"),vhe=a("strong"),DRo=o("xlm-roberta"),GRo=o(" \u2014 "),VO=a("a"),ORo=o("XLMRobertaForCausalLM"),VRo=o(" (XLM-RoBERTa model)"),XRo=l(),S2=a("li"),Fhe=a("strong"),zRo=o("xlm-roberta-xl"),WRo=o(" \u2014 "),XO=a("a"),QRo=o("XLMRobertaXLForCausalLM"),HRo=o(" (XLM-RoBERTa-XL model)"),URo=l(),R2=a("li"),The=a("strong"),JRo=o("xlnet"),YRo=o(" \u2014 "),zO=a("a"),KRo=o("XLNetLMHeadModel"),ZRo=o(" (XLNet model)"),ePo=l(),P2=a("p"),oPo=o("The model is set in evaluation mode by default using "),Mhe=a("code"),rPo=o("model.eval()"),tPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ehe=a("code"),aPo=o("model.train()"),nPo=l(),F(B2.$$.fragment),yXe=l(),Ji=a("h2"),I2=a("a"),Che=a("span"),F(H6.$$.fragment),sPo=l(),whe=a("span"),lPo=o("AutoModelForMaskedLM"),xXe=l(),So=a("div"),F(U6.$$.fragment),iPo=l(),Yi=a("p"),dPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),WO=a("a"),cPo=o("from_pretrained()"),fPo=o(" class method or the "),QO=a("a"),mPo=o("from_config()"),gPo=o(` class
method.`),hPo=l(),J6=a("p"),pPo=o("This class cannot be instantiated directly using "),Ahe=a("code"),_Po=o("__init__()"),uPo=o(" (throws an error)."),bPo=l(),ct=a("div"),F(Y6.$$.fragment),vPo=l(),Lhe=a("p"),FPo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),TPo=l(),Ki=a("p"),MPo=o(`Note:
Loading a model from its configuration file does `),yhe=a("strong"),EPo=o("not"),CPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HO=a("a"),wPo=o("from_pretrained()"),APo=o(" to load the model weights."),LPo=l(),F(N2.$$.fragment),yPo=l(),Ze=a("div"),F(K6.$$.fragment),xPo=l(),xhe=a("p"),$Po=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),kPo=l(),ja=a("p"),SPo=o("The model class to instantiate is selected based on the "),$he=a("code"),RPo=o("model_type"),PPo=o(` property of the config object (either
passed as an argument or loaded from `),khe=a("code"),BPo=o("pretrained_model_name_or_path"),IPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),She=a("code"),NPo=o("pretrained_model_name_or_path"),qPo=o(":"),jPo=l(),Q=a("ul"),q2=a("li"),Rhe=a("strong"),DPo=o("albert"),GPo=o(" \u2014 "),UO=a("a"),OPo=o("AlbertForMaskedLM"),VPo=o(" (ALBERT model)"),XPo=l(),j2=a("li"),Phe=a("strong"),zPo=o("bart"),WPo=o(" \u2014 "),JO=a("a"),QPo=o("BartForConditionalGeneration"),HPo=o(" (BART model)"),UPo=l(),D2=a("li"),Bhe=a("strong"),JPo=o("bert"),YPo=o(" \u2014 "),YO=a("a"),KPo=o("BertForMaskedLM"),ZPo=o(" (BERT model)"),eBo=l(),G2=a("li"),Ihe=a("strong"),oBo=o("big_bird"),rBo=o(" \u2014 "),KO=a("a"),tBo=o("BigBirdForMaskedLM"),aBo=o(" (BigBird model)"),nBo=l(),O2=a("li"),Nhe=a("strong"),sBo=o("camembert"),lBo=o(" \u2014 "),ZO=a("a"),iBo=o("CamembertForMaskedLM"),dBo=o(" (CamemBERT model)"),cBo=l(),V2=a("li"),qhe=a("strong"),fBo=o("convbert"),mBo=o(" \u2014 "),eV=a("a"),gBo=o("ConvBertForMaskedLM"),hBo=o(" (ConvBERT model)"),pBo=l(),X2=a("li"),jhe=a("strong"),_Bo=o("data2vec-text"),uBo=o(" \u2014 "),oV=a("a"),bBo=o("Data2VecTextForMaskedLM"),vBo=o(" (Data2VecText model)"),FBo=l(),z2=a("li"),Dhe=a("strong"),TBo=o("deberta"),MBo=o(" \u2014 "),rV=a("a"),EBo=o("DebertaForMaskedLM"),CBo=o(" (DeBERTa model)"),wBo=l(),W2=a("li"),Ghe=a("strong"),ABo=o("deberta-v2"),LBo=o(" \u2014 "),tV=a("a"),yBo=o("DebertaV2ForMaskedLM"),xBo=o(" (DeBERTa-v2 model)"),$Bo=l(),Q2=a("li"),Ohe=a("strong"),kBo=o("distilbert"),SBo=o(" \u2014 "),aV=a("a"),RBo=o("DistilBertForMaskedLM"),PBo=o(" (DistilBERT model)"),BBo=l(),H2=a("li"),Vhe=a("strong"),IBo=o("electra"),NBo=o(" \u2014 "),nV=a("a"),qBo=o("ElectraForMaskedLM"),jBo=o(" (ELECTRA model)"),DBo=l(),U2=a("li"),Xhe=a("strong"),GBo=o("flaubert"),OBo=o(" \u2014 "),sV=a("a"),VBo=o("FlaubertWithLMHeadModel"),XBo=o(" (FlauBERT model)"),zBo=l(),J2=a("li"),zhe=a("strong"),WBo=o("fnet"),QBo=o(" \u2014 "),lV=a("a"),HBo=o("FNetForMaskedLM"),UBo=o(" (FNet model)"),JBo=l(),Y2=a("li"),Whe=a("strong"),YBo=o("funnel"),KBo=o(" \u2014 "),iV=a("a"),ZBo=o("FunnelForMaskedLM"),eIo=o(" (Funnel Transformer model)"),oIo=l(),K2=a("li"),Qhe=a("strong"),rIo=o("ibert"),tIo=o(" \u2014 "),dV=a("a"),aIo=o("IBertForMaskedLM"),nIo=o(" (I-BERT model)"),sIo=l(),Z2=a("li"),Hhe=a("strong"),lIo=o("layoutlm"),iIo=o(" \u2014 "),cV=a("a"),dIo=o("LayoutLMForMaskedLM"),cIo=o(" (LayoutLM model)"),fIo=l(),eb=a("li"),Uhe=a("strong"),mIo=o("longformer"),gIo=o(" \u2014 "),fV=a("a"),hIo=o("LongformerForMaskedLM"),pIo=o(" (Longformer model)"),_Io=l(),ob=a("li"),Jhe=a("strong"),uIo=o("luke"),bIo=o(" \u2014 "),mV=a("a"),vIo=o("LukeForMaskedLM"),FIo=o(" (LUKE model)"),TIo=l(),rb=a("li"),Yhe=a("strong"),MIo=o("mbart"),EIo=o(" \u2014 "),gV=a("a"),CIo=o("MBartForConditionalGeneration"),wIo=o(" (mBART model)"),AIo=l(),tb=a("li"),Khe=a("strong"),LIo=o("megatron-bert"),yIo=o(" \u2014 "),hV=a("a"),xIo=o("MegatronBertForMaskedLM"),$Io=o(" (Megatron-BERT model)"),kIo=l(),ab=a("li"),Zhe=a("strong"),SIo=o("mobilebert"),RIo=o(" \u2014 "),pV=a("a"),PIo=o("MobileBertForMaskedLM"),BIo=o(" (MobileBERT model)"),IIo=l(),nb=a("li"),epe=a("strong"),NIo=o("mpnet"),qIo=o(" \u2014 "),_V=a("a"),jIo=o("MPNetForMaskedLM"),DIo=o(" (MPNet model)"),GIo=l(),sb=a("li"),ope=a("strong"),OIo=o("mvp"),VIo=o(" \u2014 "),uV=a("a"),XIo=o("MvpForConditionalGeneration"),zIo=o(" (MVP model)"),WIo=l(),lb=a("li"),rpe=a("strong"),QIo=o("nezha"),HIo=o(" \u2014 "),bV=a("a"),UIo=o("NezhaForMaskedLM"),JIo=o(" (Nezha model)"),YIo=l(),ib=a("li"),tpe=a("strong"),KIo=o("nystromformer"),ZIo=o(" \u2014 "),vV=a("a"),eNo=o("NystromformerForMaskedLM"),oNo=o(" (Nystr\xF6mformer model)"),rNo=l(),db=a("li"),ape=a("strong"),tNo=o("perceiver"),aNo=o(" \u2014 "),FV=a("a"),nNo=o("PerceiverForMaskedLM"),sNo=o(" (Perceiver model)"),lNo=l(),cb=a("li"),npe=a("strong"),iNo=o("qdqbert"),dNo=o(" \u2014 "),TV=a("a"),cNo=o("QDQBertForMaskedLM"),fNo=o(" (QDQBert model)"),mNo=l(),fb=a("li"),spe=a("strong"),gNo=o("reformer"),hNo=o(" \u2014 "),MV=a("a"),pNo=o("ReformerForMaskedLM"),_No=o(" (Reformer model)"),uNo=l(),mb=a("li"),lpe=a("strong"),bNo=o("rembert"),vNo=o(" \u2014 "),EV=a("a"),FNo=o("RemBertForMaskedLM"),TNo=o(" (RemBERT model)"),MNo=l(),gb=a("li"),ipe=a("strong"),ENo=o("roberta"),CNo=o(" \u2014 "),CV=a("a"),wNo=o("RobertaForMaskedLM"),ANo=o(" (RoBERTa model)"),LNo=l(),hb=a("li"),dpe=a("strong"),yNo=o("roformer"),xNo=o(" \u2014 "),wV=a("a"),$No=o("RoFormerForMaskedLM"),kNo=o(" (RoFormer model)"),SNo=l(),pb=a("li"),cpe=a("strong"),RNo=o("squeezebert"),PNo=o(" \u2014 "),AV=a("a"),BNo=o("SqueezeBertForMaskedLM"),INo=o(" (SqueezeBERT model)"),NNo=l(),_b=a("li"),fpe=a("strong"),qNo=o("tapas"),jNo=o(" \u2014 "),LV=a("a"),DNo=o("TapasForMaskedLM"),GNo=o(" (TAPAS model)"),ONo=l(),ub=a("li"),mpe=a("strong"),VNo=o("wav2vec2"),XNo=o(" \u2014 "),gpe=a("code"),zNo=o("Wav2Vec2ForMaskedLM"),WNo=o(" (Wav2Vec2 model)"),QNo=l(),bb=a("li"),hpe=a("strong"),HNo=o("xlm"),UNo=o(" \u2014 "),yV=a("a"),JNo=o("XLMWithLMHeadModel"),YNo=o(" (XLM model)"),KNo=l(),vb=a("li"),ppe=a("strong"),ZNo=o("xlm-roberta"),eqo=o(" \u2014 "),xV=a("a"),oqo=o("XLMRobertaForMaskedLM"),rqo=o(" (XLM-RoBERTa model)"),tqo=l(),Fb=a("li"),_pe=a("strong"),aqo=o("xlm-roberta-xl"),nqo=o(" \u2014 "),$V=a("a"),sqo=o("XLMRobertaXLForMaskedLM"),lqo=o(" (XLM-RoBERTa-XL model)"),iqo=l(),Tb=a("li"),upe=a("strong"),dqo=o("yoso"),cqo=o(" \u2014 "),kV=a("a"),fqo=o("YosoForMaskedLM"),mqo=o(" (YOSO model)"),gqo=l(),Mb=a("p"),hqo=o("The model is set in evaluation mode by default using "),bpe=a("code"),pqo=o("model.eval()"),_qo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vpe=a("code"),uqo=o("model.train()"),bqo=l(),F(Eb.$$.fragment),$Xe=l(),Zi=a("h2"),Cb=a("a"),Fpe=a("span"),F(Z6.$$.fragment),vqo=l(),Tpe=a("span"),Fqo=o("AutoModelForSeq2SeqLM"),kXe=l(),Ro=a("div"),F(eL.$$.fragment),Tqo=l(),ed=a("p"),Mqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),SV=a("a"),Eqo=o("from_pretrained()"),Cqo=o(" class method or the "),RV=a("a"),wqo=o("from_config()"),Aqo=o(` class
method.`),Lqo=l(),oL=a("p"),yqo=o("This class cannot be instantiated directly using "),Mpe=a("code"),xqo=o("__init__()"),$qo=o(" (throws an error)."),kqo=l(),ft=a("div"),F(rL.$$.fragment),Sqo=l(),Epe=a("p"),Rqo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Pqo=l(),od=a("p"),Bqo=o(`Note:
Loading a model from its configuration file does `),Cpe=a("strong"),Iqo=o("not"),Nqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PV=a("a"),qqo=o("from_pretrained()"),jqo=o(" to load the model weights."),Dqo=l(),F(wb.$$.fragment),Gqo=l(),eo=a("div"),F(tL.$$.fragment),Oqo=l(),wpe=a("p"),Vqo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Xqo=l(),Da=a("p"),zqo=o("The model class to instantiate is selected based on the "),Ape=a("code"),Wqo=o("model_type"),Qqo=o(` property of the config object (either
passed as an argument or loaded from `),Lpe=a("code"),Hqo=o("pretrained_model_name_or_path"),Uqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ype=a("code"),Jqo=o("pretrained_model_name_or_path"),Yqo=o(":"),Kqo=l(),pe=a("ul"),Ab=a("li"),xpe=a("strong"),Zqo=o("bart"),ejo=o(" \u2014 "),BV=a("a"),ojo=o("BartForConditionalGeneration"),rjo=o(" (BART model)"),tjo=l(),Lb=a("li"),$pe=a("strong"),ajo=o("bigbird_pegasus"),njo=o(" \u2014 "),IV=a("a"),sjo=o("BigBirdPegasusForConditionalGeneration"),ljo=o(" (BigBird-Pegasus model)"),ijo=l(),yb=a("li"),kpe=a("strong"),djo=o("blenderbot"),cjo=o(" \u2014 "),NV=a("a"),fjo=o("BlenderbotForConditionalGeneration"),mjo=o(" (Blenderbot model)"),gjo=l(),xb=a("li"),Spe=a("strong"),hjo=o("blenderbot-small"),pjo=o(" \u2014 "),qV=a("a"),_jo=o("BlenderbotSmallForConditionalGeneration"),ujo=o(" (BlenderbotSmall model)"),bjo=l(),$b=a("li"),Rpe=a("strong"),vjo=o("encoder-decoder"),Fjo=o(" \u2014 "),jV=a("a"),Tjo=o("EncoderDecoderModel"),Mjo=o(" (Encoder decoder model)"),Ejo=l(),kb=a("li"),Ppe=a("strong"),Cjo=o("fsmt"),wjo=o(" \u2014 "),DV=a("a"),Ajo=o("FSMTForConditionalGeneration"),Ljo=o(" (FairSeq Machine-Translation model)"),yjo=l(),Sb=a("li"),Bpe=a("strong"),xjo=o("led"),$jo=o(" \u2014 "),GV=a("a"),kjo=o("LEDForConditionalGeneration"),Sjo=o(" (LED model)"),Rjo=l(),Rb=a("li"),Ipe=a("strong"),Pjo=o("longt5"),Bjo=o(" \u2014 "),OV=a("a"),Ijo=o("LongT5ForConditionalGeneration"),Njo=o(" (LongT5 model)"),qjo=l(),Pb=a("li"),Npe=a("strong"),jjo=o("m2m_100"),Djo=o(" \u2014 "),VV=a("a"),Gjo=o("M2M100ForConditionalGeneration"),Ojo=o(" (M2M100 model)"),Vjo=l(),Bb=a("li"),qpe=a("strong"),Xjo=o("marian"),zjo=o(" \u2014 "),XV=a("a"),Wjo=o("MarianMTModel"),Qjo=o(" (Marian model)"),Hjo=l(),Ib=a("li"),jpe=a("strong"),Ujo=o("mbart"),Jjo=o(" \u2014 "),zV=a("a"),Yjo=o("MBartForConditionalGeneration"),Kjo=o(" (mBART model)"),Zjo=l(),Nb=a("li"),Dpe=a("strong"),eDo=o("mt5"),oDo=o(" \u2014 "),WV=a("a"),rDo=o("MT5ForConditionalGeneration"),tDo=o(" (MT5 model)"),aDo=l(),qb=a("li"),Gpe=a("strong"),nDo=o("mvp"),sDo=o(" \u2014 "),QV=a("a"),lDo=o("MvpForConditionalGeneration"),iDo=o(" (MVP model)"),dDo=l(),jb=a("li"),Ope=a("strong"),cDo=o("pegasus"),fDo=o(" \u2014 "),HV=a("a"),mDo=o("PegasusForConditionalGeneration"),gDo=o(" (Pegasus model)"),hDo=l(),Db=a("li"),Vpe=a("strong"),pDo=o("plbart"),_Do=o(" \u2014 "),UV=a("a"),uDo=o("PLBartForConditionalGeneration"),bDo=o(" (PLBart model)"),vDo=l(),Gb=a("li"),Xpe=a("strong"),FDo=o("prophetnet"),TDo=o(" \u2014 "),JV=a("a"),MDo=o("ProphetNetForConditionalGeneration"),EDo=o(" (ProphetNet model)"),CDo=l(),Ob=a("li"),zpe=a("strong"),wDo=o("t5"),ADo=o(" \u2014 "),YV=a("a"),LDo=o("T5ForConditionalGeneration"),yDo=o(" (T5 model)"),xDo=l(),Vb=a("li"),Wpe=a("strong"),$Do=o("xlm-prophetnet"),kDo=o(" \u2014 "),KV=a("a"),SDo=o("XLMProphetNetForConditionalGeneration"),RDo=o(" (XLM-ProphetNet model)"),PDo=l(),Xb=a("p"),BDo=o("The model is set in evaluation mode by default using "),Qpe=a("code"),IDo=o("model.eval()"),NDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hpe=a("code"),qDo=o("model.train()"),jDo=l(),F(zb.$$.fragment),SXe=l(),rd=a("h2"),Wb=a("a"),Upe=a("span"),F(aL.$$.fragment),DDo=l(),Jpe=a("span"),GDo=o("AutoModelForSequenceClassification"),RXe=l(),Po=a("div"),F(nL.$$.fragment),ODo=l(),td=a("p"),VDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ZV=a("a"),XDo=o("from_pretrained()"),zDo=o(" class method or the "),eX=a("a"),WDo=o("from_config()"),QDo=o(` class
method.`),HDo=l(),sL=a("p"),UDo=o("This class cannot be instantiated directly using "),Ype=a("code"),JDo=o("__init__()"),YDo=o(" (throws an error)."),KDo=l(),mt=a("div"),F(lL.$$.fragment),ZDo=l(),Kpe=a("p"),eGo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),oGo=l(),ad=a("p"),rGo=o(`Note:
Loading a model from its configuration file does `),Zpe=a("strong"),tGo=o("not"),aGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oX=a("a"),nGo=o("from_pretrained()"),sGo=o(" to load the model weights."),lGo=l(),F(Qb.$$.fragment),iGo=l(),oo=a("div"),F(iL.$$.fragment),dGo=l(),e_e=a("p"),cGo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),fGo=l(),Ga=a("p"),mGo=o("The model class to instantiate is selected based on the "),o_e=a("code"),gGo=o("model_type"),hGo=o(` property of the config object (either
passed as an argument or loaded from `),r_e=a("code"),pGo=o("pretrained_model_name_or_path"),_Go=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t_e=a("code"),uGo=o("pretrained_model_name_or_path"),bGo=o(":"),vGo=l(),N=a("ul"),Hb=a("li"),a_e=a("strong"),FGo=o("albert"),TGo=o(" \u2014 "),rX=a("a"),MGo=o("AlbertForSequenceClassification"),EGo=o(" (ALBERT model)"),CGo=l(),Ub=a("li"),n_e=a("strong"),wGo=o("bart"),AGo=o(" \u2014 "),tX=a("a"),LGo=o("BartForSequenceClassification"),yGo=o(" (BART model)"),xGo=l(),Jb=a("li"),s_e=a("strong"),$Go=o("bert"),kGo=o(" \u2014 "),aX=a("a"),SGo=o("BertForSequenceClassification"),RGo=o(" (BERT model)"),PGo=l(),Yb=a("li"),l_e=a("strong"),BGo=o("big_bird"),IGo=o(" \u2014 "),nX=a("a"),NGo=o("BigBirdForSequenceClassification"),qGo=o(" (BigBird model)"),jGo=l(),Kb=a("li"),i_e=a("strong"),DGo=o("bigbird_pegasus"),GGo=o(" \u2014 "),sX=a("a"),OGo=o("BigBirdPegasusForSequenceClassification"),VGo=o(" (BigBird-Pegasus model)"),XGo=l(),Zb=a("li"),d_e=a("strong"),zGo=o("bloom"),WGo=o(" \u2014 "),lX=a("a"),QGo=o("BloomForSequenceClassification"),HGo=o(" (BLOOM model)"),UGo=l(),ev=a("li"),c_e=a("strong"),JGo=o("camembert"),YGo=o(" \u2014 "),iX=a("a"),KGo=o("CamembertForSequenceClassification"),ZGo=o(" (CamemBERT model)"),eOo=l(),ov=a("li"),f_e=a("strong"),oOo=o("canine"),rOo=o(" \u2014 "),dX=a("a"),tOo=o("CanineForSequenceClassification"),aOo=o(" (CANINE model)"),nOo=l(),rv=a("li"),m_e=a("strong"),sOo=o("convbert"),lOo=o(" \u2014 "),cX=a("a"),iOo=o("ConvBertForSequenceClassification"),dOo=o(" (ConvBERT model)"),cOo=l(),tv=a("li"),g_e=a("strong"),fOo=o("ctrl"),mOo=o(" \u2014 "),fX=a("a"),gOo=o("CTRLForSequenceClassification"),hOo=o(" (CTRL model)"),pOo=l(),av=a("li"),h_e=a("strong"),_Oo=o("data2vec-text"),uOo=o(" \u2014 "),mX=a("a"),bOo=o("Data2VecTextForSequenceClassification"),vOo=o(" (Data2VecText model)"),FOo=l(),nv=a("li"),p_e=a("strong"),TOo=o("deberta"),MOo=o(" \u2014 "),gX=a("a"),EOo=o("DebertaForSequenceClassification"),COo=o(" (DeBERTa model)"),wOo=l(),sv=a("li"),__e=a("strong"),AOo=o("deberta-v2"),LOo=o(" \u2014 "),hX=a("a"),yOo=o("DebertaV2ForSequenceClassification"),xOo=o(" (DeBERTa-v2 model)"),$Oo=l(),lv=a("li"),u_e=a("strong"),kOo=o("distilbert"),SOo=o(" \u2014 "),pX=a("a"),ROo=o("DistilBertForSequenceClassification"),POo=o(" (DistilBERT model)"),BOo=l(),iv=a("li"),b_e=a("strong"),IOo=o("electra"),NOo=o(" \u2014 "),_X=a("a"),qOo=o("ElectraForSequenceClassification"),jOo=o(" (ELECTRA model)"),DOo=l(),dv=a("li"),v_e=a("strong"),GOo=o("flaubert"),OOo=o(" \u2014 "),uX=a("a"),VOo=o("FlaubertForSequenceClassification"),XOo=o(" (FlauBERT model)"),zOo=l(),cv=a("li"),F_e=a("strong"),WOo=o("fnet"),QOo=o(" \u2014 "),bX=a("a"),HOo=o("FNetForSequenceClassification"),UOo=o(" (FNet model)"),JOo=l(),fv=a("li"),T_e=a("strong"),YOo=o("funnel"),KOo=o(" \u2014 "),vX=a("a"),ZOo=o("FunnelForSequenceClassification"),eVo=o(" (Funnel Transformer model)"),oVo=l(),mv=a("li"),M_e=a("strong"),rVo=o("gpt2"),tVo=o(" \u2014 "),FX=a("a"),aVo=o("GPT2ForSequenceClassification"),nVo=o(" (OpenAI GPT-2 model)"),sVo=l(),gv=a("li"),E_e=a("strong"),lVo=o("gpt_neo"),iVo=o(" \u2014 "),TX=a("a"),dVo=o("GPTNeoForSequenceClassification"),cVo=o(" (GPT Neo model)"),fVo=l(),hv=a("li"),C_e=a("strong"),mVo=o("gptj"),gVo=o(" \u2014 "),MX=a("a"),hVo=o("GPTJForSequenceClassification"),pVo=o(" (GPT-J model)"),_Vo=l(),pv=a("li"),w_e=a("strong"),uVo=o("ibert"),bVo=o(" \u2014 "),EX=a("a"),vVo=o("IBertForSequenceClassification"),FVo=o(" (I-BERT model)"),TVo=l(),_v=a("li"),A_e=a("strong"),MVo=o("layoutlm"),EVo=o(" \u2014 "),CX=a("a"),CVo=o("LayoutLMForSequenceClassification"),wVo=o(" (LayoutLM model)"),AVo=l(),uv=a("li"),L_e=a("strong"),LVo=o("layoutlmv2"),yVo=o(" \u2014 "),wX=a("a"),xVo=o("LayoutLMv2ForSequenceClassification"),$Vo=o(" (LayoutLMv2 model)"),kVo=l(),bv=a("li"),y_e=a("strong"),SVo=o("layoutlmv3"),RVo=o(" \u2014 "),AX=a("a"),PVo=o("LayoutLMv3ForSequenceClassification"),BVo=o(" (LayoutLMv3 model)"),IVo=l(),vv=a("li"),x_e=a("strong"),NVo=o("led"),qVo=o(" \u2014 "),LX=a("a"),jVo=o("LEDForSequenceClassification"),DVo=o(" (LED model)"),GVo=l(),Fv=a("li"),$_e=a("strong"),OVo=o("longformer"),VVo=o(" \u2014 "),yX=a("a"),XVo=o("LongformerForSequenceClassification"),zVo=o(" (Longformer model)"),WVo=l(),Tv=a("li"),k_e=a("strong"),QVo=o("mbart"),HVo=o(" \u2014 "),xX=a("a"),UVo=o("MBartForSequenceClassification"),JVo=o(" (mBART model)"),YVo=l(),Mv=a("li"),S_e=a("strong"),KVo=o("megatron-bert"),ZVo=o(" \u2014 "),$X=a("a"),eXo=o("MegatronBertForSequenceClassification"),oXo=o(" (Megatron-BERT model)"),rXo=l(),Ev=a("li"),R_e=a("strong"),tXo=o("mobilebert"),aXo=o(" \u2014 "),kX=a("a"),nXo=o("MobileBertForSequenceClassification"),sXo=o(" (MobileBERT model)"),lXo=l(),Cv=a("li"),P_e=a("strong"),iXo=o("mpnet"),dXo=o(" \u2014 "),SX=a("a"),cXo=o("MPNetForSequenceClassification"),fXo=o(" (MPNet model)"),mXo=l(),wv=a("li"),B_e=a("strong"),gXo=o("mvp"),hXo=o(" \u2014 "),RX=a("a"),pXo=o("MvpForSequenceClassification"),_Xo=o(" (MVP model)"),uXo=l(),Av=a("li"),I_e=a("strong"),bXo=o("nezha"),vXo=o(" \u2014 "),PX=a("a"),FXo=o("NezhaForSequenceClassification"),TXo=o(" (Nezha model)"),MXo=l(),Lv=a("li"),N_e=a("strong"),EXo=o("nystromformer"),CXo=o(" \u2014 "),BX=a("a"),wXo=o("NystromformerForSequenceClassification"),AXo=o(" (Nystr\xF6mformer model)"),LXo=l(),yv=a("li"),q_e=a("strong"),yXo=o("openai-gpt"),xXo=o(" \u2014 "),IX=a("a"),$Xo=o("OpenAIGPTForSequenceClassification"),kXo=o(" (OpenAI GPT model)"),SXo=l(),xv=a("li"),j_e=a("strong"),RXo=o("perceiver"),PXo=o(" \u2014 "),NX=a("a"),BXo=o("PerceiverForSequenceClassification"),IXo=o(" (Perceiver model)"),NXo=l(),$v=a("li"),D_e=a("strong"),qXo=o("plbart"),jXo=o(" \u2014 "),qX=a("a"),DXo=o("PLBartForSequenceClassification"),GXo=o(" (PLBart model)"),OXo=l(),kv=a("li"),G_e=a("strong"),VXo=o("qdqbert"),XXo=o(" \u2014 "),jX=a("a"),zXo=o("QDQBertForSequenceClassification"),WXo=o(" (QDQBert model)"),QXo=l(),Sv=a("li"),O_e=a("strong"),HXo=o("reformer"),UXo=o(" \u2014 "),DX=a("a"),JXo=o("ReformerForSequenceClassification"),YXo=o(" (Reformer model)"),KXo=l(),Rv=a("li"),V_e=a("strong"),ZXo=o("rembert"),ezo=o(" \u2014 "),GX=a("a"),ozo=o("RemBertForSequenceClassification"),rzo=o(" (RemBERT model)"),tzo=l(),Pv=a("li"),X_e=a("strong"),azo=o("roberta"),nzo=o(" \u2014 "),OX=a("a"),szo=o("RobertaForSequenceClassification"),lzo=o(" (RoBERTa model)"),izo=l(),Bv=a("li"),z_e=a("strong"),dzo=o("roformer"),czo=o(" \u2014 "),VX=a("a"),fzo=o("RoFormerForSequenceClassification"),mzo=o(" (RoFormer model)"),gzo=l(),Iv=a("li"),W_e=a("strong"),hzo=o("squeezebert"),pzo=o(" \u2014 "),XX=a("a"),_zo=o("SqueezeBertForSequenceClassification"),uzo=o(" (SqueezeBERT model)"),bzo=l(),Nv=a("li"),Q_e=a("strong"),vzo=o("tapas"),Fzo=o(" \u2014 "),zX=a("a"),Tzo=o("TapasForSequenceClassification"),Mzo=o(" (TAPAS model)"),Ezo=l(),qv=a("li"),H_e=a("strong"),Czo=o("transfo-xl"),wzo=o(" \u2014 "),WX=a("a"),Azo=o("TransfoXLForSequenceClassification"),Lzo=o(" (Transformer-XL model)"),yzo=l(),jv=a("li"),U_e=a("strong"),xzo=o("xlm"),$zo=o(" \u2014 "),QX=a("a"),kzo=o("XLMForSequenceClassification"),Szo=o(" (XLM model)"),Rzo=l(),Dv=a("li"),J_e=a("strong"),Pzo=o("xlm-roberta"),Bzo=o(" \u2014 "),HX=a("a"),Izo=o("XLMRobertaForSequenceClassification"),Nzo=o(" (XLM-RoBERTa model)"),qzo=l(),Gv=a("li"),Y_e=a("strong"),jzo=o("xlm-roberta-xl"),Dzo=o(" \u2014 "),UX=a("a"),Gzo=o("XLMRobertaXLForSequenceClassification"),Ozo=o(" (XLM-RoBERTa-XL model)"),Vzo=l(),Ov=a("li"),K_e=a("strong"),Xzo=o("xlnet"),zzo=o(" \u2014 "),JX=a("a"),Wzo=o("XLNetForSequenceClassification"),Qzo=o(" (XLNet model)"),Hzo=l(),Vv=a("li"),Z_e=a("strong"),Uzo=o("yoso"),Jzo=o(" \u2014 "),YX=a("a"),Yzo=o("YosoForSequenceClassification"),Kzo=o(" (YOSO model)"),Zzo=l(),Xv=a("p"),eWo=o("The model is set in evaluation mode by default using "),eue=a("code"),oWo=o("model.eval()"),rWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oue=a("code"),tWo=o("model.train()"),aWo=l(),F(zv.$$.fragment),PXe=l(),nd=a("h2"),Wv=a("a"),rue=a("span"),F(dL.$$.fragment),nWo=l(),tue=a("span"),sWo=o("AutoModelForMultipleChoice"),BXe=l(),Bo=a("div"),F(cL.$$.fragment),lWo=l(),sd=a("p"),iWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),KX=a("a"),dWo=o("from_pretrained()"),cWo=o(" class method or the "),ZX=a("a"),fWo=o("from_config()"),mWo=o(` class
method.`),gWo=l(),fL=a("p"),hWo=o("This class cannot be instantiated directly using "),aue=a("code"),pWo=o("__init__()"),_Wo=o(" (throws an error)."),uWo=l(),gt=a("div"),F(mL.$$.fragment),bWo=l(),nue=a("p"),vWo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),FWo=l(),ld=a("p"),TWo=o(`Note:
Loading a model from its configuration file does `),sue=a("strong"),MWo=o("not"),EWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ez=a("a"),CWo=o("from_pretrained()"),wWo=o(" to load the model weights."),AWo=l(),F(Qv.$$.fragment),LWo=l(),ro=a("div"),F(gL.$$.fragment),yWo=l(),lue=a("p"),xWo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),$Wo=l(),Oa=a("p"),kWo=o("The model class to instantiate is selected based on the "),iue=a("code"),SWo=o("model_type"),RWo=o(` property of the config object (either
passed as an argument or loaded from `),due=a("code"),PWo=o("pretrained_model_name_or_path"),BWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cue=a("code"),IWo=o("pretrained_model_name_or_path"),NWo=o(":"),qWo=l(),Z=a("ul"),Hv=a("li"),fue=a("strong"),jWo=o("albert"),DWo=o(" \u2014 "),oz=a("a"),GWo=o("AlbertForMultipleChoice"),OWo=o(" (ALBERT model)"),VWo=l(),Uv=a("li"),mue=a("strong"),XWo=o("bert"),zWo=o(" \u2014 "),rz=a("a"),WWo=o("BertForMultipleChoice"),QWo=o(" (BERT model)"),HWo=l(),Jv=a("li"),gue=a("strong"),UWo=o("big_bird"),JWo=o(" \u2014 "),tz=a("a"),YWo=o("BigBirdForMultipleChoice"),KWo=o(" (BigBird model)"),ZWo=l(),Yv=a("li"),hue=a("strong"),eQo=o("camembert"),oQo=o(" \u2014 "),az=a("a"),rQo=o("CamembertForMultipleChoice"),tQo=o(" (CamemBERT model)"),aQo=l(),Kv=a("li"),pue=a("strong"),nQo=o("canine"),sQo=o(" \u2014 "),nz=a("a"),lQo=o("CanineForMultipleChoice"),iQo=o(" (CANINE model)"),dQo=l(),Zv=a("li"),_ue=a("strong"),cQo=o("convbert"),fQo=o(" \u2014 "),sz=a("a"),mQo=o("ConvBertForMultipleChoice"),gQo=o(" (ConvBERT model)"),hQo=l(),e3=a("li"),uue=a("strong"),pQo=o("data2vec-text"),_Qo=o(" \u2014 "),lz=a("a"),uQo=o("Data2VecTextForMultipleChoice"),bQo=o(" (Data2VecText model)"),vQo=l(),o3=a("li"),bue=a("strong"),FQo=o("deberta-v2"),TQo=o(" \u2014 "),iz=a("a"),MQo=o("DebertaV2ForMultipleChoice"),EQo=o(" (DeBERTa-v2 model)"),CQo=l(),r3=a("li"),vue=a("strong"),wQo=o("distilbert"),AQo=o(" \u2014 "),dz=a("a"),LQo=o("DistilBertForMultipleChoice"),yQo=o(" (DistilBERT model)"),xQo=l(),t3=a("li"),Fue=a("strong"),$Qo=o("electra"),kQo=o(" \u2014 "),cz=a("a"),SQo=o("ElectraForMultipleChoice"),RQo=o(" (ELECTRA model)"),PQo=l(),a3=a("li"),Tue=a("strong"),BQo=o("flaubert"),IQo=o(" \u2014 "),fz=a("a"),NQo=o("FlaubertForMultipleChoice"),qQo=o(" (FlauBERT model)"),jQo=l(),n3=a("li"),Mue=a("strong"),DQo=o("fnet"),GQo=o(" \u2014 "),mz=a("a"),OQo=o("FNetForMultipleChoice"),VQo=o(" (FNet model)"),XQo=l(),s3=a("li"),Eue=a("strong"),zQo=o("funnel"),WQo=o(" \u2014 "),gz=a("a"),QQo=o("FunnelForMultipleChoice"),HQo=o(" (Funnel Transformer model)"),UQo=l(),l3=a("li"),Cue=a("strong"),JQo=o("ibert"),YQo=o(" \u2014 "),hz=a("a"),KQo=o("IBertForMultipleChoice"),ZQo=o(" (I-BERT model)"),eHo=l(),i3=a("li"),wue=a("strong"),oHo=o("longformer"),rHo=o(" \u2014 "),pz=a("a"),tHo=o("LongformerForMultipleChoice"),aHo=o(" (Longformer model)"),nHo=l(),d3=a("li"),Aue=a("strong"),sHo=o("megatron-bert"),lHo=o(" \u2014 "),_z=a("a"),iHo=o("MegatronBertForMultipleChoice"),dHo=o(" (Megatron-BERT model)"),cHo=l(),c3=a("li"),Lue=a("strong"),fHo=o("mobilebert"),mHo=o(" \u2014 "),uz=a("a"),gHo=o("MobileBertForMultipleChoice"),hHo=o(" (MobileBERT model)"),pHo=l(),f3=a("li"),yue=a("strong"),_Ho=o("mpnet"),uHo=o(" \u2014 "),bz=a("a"),bHo=o("MPNetForMultipleChoice"),vHo=o(" (MPNet model)"),FHo=l(),m3=a("li"),xue=a("strong"),THo=o("nezha"),MHo=o(" \u2014 "),vz=a("a"),EHo=o("NezhaForMultipleChoice"),CHo=o(" (Nezha model)"),wHo=l(),g3=a("li"),$ue=a("strong"),AHo=o("nystromformer"),LHo=o(" \u2014 "),Fz=a("a"),yHo=o("NystromformerForMultipleChoice"),xHo=o(" (Nystr\xF6mformer model)"),$Ho=l(),h3=a("li"),kue=a("strong"),kHo=o("qdqbert"),SHo=o(" \u2014 "),Tz=a("a"),RHo=o("QDQBertForMultipleChoice"),PHo=o(" (QDQBert model)"),BHo=l(),p3=a("li"),Sue=a("strong"),IHo=o("rembert"),NHo=o(" \u2014 "),Mz=a("a"),qHo=o("RemBertForMultipleChoice"),jHo=o(" (RemBERT model)"),DHo=l(),_3=a("li"),Rue=a("strong"),GHo=o("roberta"),OHo=o(" \u2014 "),Ez=a("a"),VHo=o("RobertaForMultipleChoice"),XHo=o(" (RoBERTa model)"),zHo=l(),u3=a("li"),Pue=a("strong"),WHo=o("roformer"),QHo=o(" \u2014 "),Cz=a("a"),HHo=o("RoFormerForMultipleChoice"),UHo=o(" (RoFormer model)"),JHo=l(),b3=a("li"),Bue=a("strong"),YHo=o("squeezebert"),KHo=o(" \u2014 "),wz=a("a"),ZHo=o("SqueezeBertForMultipleChoice"),eUo=o(" (SqueezeBERT model)"),oUo=l(),v3=a("li"),Iue=a("strong"),rUo=o("xlm"),tUo=o(" \u2014 "),Az=a("a"),aUo=o("XLMForMultipleChoice"),nUo=o(" (XLM model)"),sUo=l(),F3=a("li"),Nue=a("strong"),lUo=o("xlm-roberta"),iUo=o(" \u2014 "),Lz=a("a"),dUo=o("XLMRobertaForMultipleChoice"),cUo=o(" (XLM-RoBERTa model)"),fUo=l(),T3=a("li"),que=a("strong"),mUo=o("xlm-roberta-xl"),gUo=o(" \u2014 "),yz=a("a"),hUo=o("XLMRobertaXLForMultipleChoice"),pUo=o(" (XLM-RoBERTa-XL model)"),_Uo=l(),M3=a("li"),jue=a("strong"),uUo=o("xlnet"),bUo=o(" \u2014 "),xz=a("a"),vUo=o("XLNetForMultipleChoice"),FUo=o(" (XLNet model)"),TUo=l(),E3=a("li"),Due=a("strong"),MUo=o("yoso"),EUo=o(" \u2014 "),$z=a("a"),CUo=o("YosoForMultipleChoice"),wUo=o(" (YOSO model)"),AUo=l(),C3=a("p"),LUo=o("The model is set in evaluation mode by default using "),Gue=a("code"),yUo=o("model.eval()"),xUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oue=a("code"),$Uo=o("model.train()"),kUo=l(),F(w3.$$.fragment),IXe=l(),id=a("h2"),A3=a("a"),Vue=a("span"),F(hL.$$.fragment),SUo=l(),Xue=a("span"),RUo=o("AutoModelForNextSentencePrediction"),NXe=l(),Io=a("div"),F(pL.$$.fragment),PUo=l(),dd=a("p"),BUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kz=a("a"),IUo=o("from_pretrained()"),NUo=o(" class method or the "),Sz=a("a"),qUo=o("from_config()"),jUo=o(` class
method.`),DUo=l(),_L=a("p"),GUo=o("This class cannot be instantiated directly using "),zue=a("code"),OUo=o("__init__()"),VUo=o(" (throws an error)."),XUo=l(),ht=a("div"),F(uL.$$.fragment),zUo=l(),Wue=a("p"),WUo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),QUo=l(),cd=a("p"),HUo=o(`Note:
Loading a model from its configuration file does `),Que=a("strong"),UUo=o("not"),JUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rz=a("a"),YUo=o("from_pretrained()"),KUo=o(" to load the model weights."),ZUo=l(),F(L3.$$.fragment),eJo=l(),to=a("div"),F(bL.$$.fragment),oJo=l(),Hue=a("p"),rJo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),tJo=l(),Va=a("p"),aJo=o("The model class to instantiate is selected based on the "),Uue=a("code"),nJo=o("model_type"),sJo=o(` property of the config object (either
passed as an argument or loaded from `),Jue=a("code"),lJo=o("pretrained_model_name_or_path"),iJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yue=a("code"),dJo=o("pretrained_model_name_or_path"),cJo=o(":"),fJo=l(),No=a("ul"),y3=a("li"),Kue=a("strong"),mJo=o("bert"),gJo=o(" \u2014 "),Pz=a("a"),hJo=o("BertForNextSentencePrediction"),pJo=o(" (BERT model)"),_Jo=l(),x3=a("li"),Zue=a("strong"),uJo=o("fnet"),bJo=o(" \u2014 "),Bz=a("a"),vJo=o("FNetForNextSentencePrediction"),FJo=o(" (FNet model)"),TJo=l(),$3=a("li"),e1e=a("strong"),MJo=o("megatron-bert"),EJo=o(" \u2014 "),Iz=a("a"),CJo=o("MegatronBertForNextSentencePrediction"),wJo=o(" (Megatron-BERT model)"),AJo=l(),k3=a("li"),o1e=a("strong"),LJo=o("mobilebert"),yJo=o(" \u2014 "),Nz=a("a"),xJo=o("MobileBertForNextSentencePrediction"),$Jo=o(" (MobileBERT model)"),kJo=l(),S3=a("li"),r1e=a("strong"),SJo=o("nezha"),RJo=o(" \u2014 "),qz=a("a"),PJo=o("NezhaForNextSentencePrediction"),BJo=o(" (Nezha model)"),IJo=l(),R3=a("li"),t1e=a("strong"),NJo=o("qdqbert"),qJo=o(" \u2014 "),jz=a("a"),jJo=o("QDQBertForNextSentencePrediction"),DJo=o(" (QDQBert model)"),GJo=l(),P3=a("p"),OJo=o("The model is set in evaluation mode by default using "),a1e=a("code"),VJo=o("model.eval()"),XJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n1e=a("code"),zJo=o("model.train()"),WJo=l(),F(B3.$$.fragment),qXe=l(),fd=a("h2"),I3=a("a"),s1e=a("span"),F(vL.$$.fragment),QJo=l(),l1e=a("span"),HJo=o("AutoModelForTokenClassification"),jXe=l(),qo=a("div"),F(FL.$$.fragment),UJo=l(),md=a("p"),JJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Dz=a("a"),YJo=o("from_pretrained()"),KJo=o(" class method or the "),Gz=a("a"),ZJo=o("from_config()"),eYo=o(` class
method.`),oYo=l(),TL=a("p"),rYo=o("This class cannot be instantiated directly using "),i1e=a("code"),tYo=o("__init__()"),aYo=o(" (throws an error)."),nYo=l(),pt=a("div"),F(ML.$$.fragment),sYo=l(),d1e=a("p"),lYo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),iYo=l(),gd=a("p"),dYo=o(`Note:
Loading a model from its configuration file does `),c1e=a("strong"),cYo=o("not"),fYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oz=a("a"),mYo=o("from_pretrained()"),gYo=o(" to load the model weights."),hYo=l(),F(N3.$$.fragment),pYo=l(),ao=a("div"),F(EL.$$.fragment),_Yo=l(),f1e=a("p"),uYo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),bYo=l(),Xa=a("p"),vYo=o("The model class to instantiate is selected based on the "),m1e=a("code"),FYo=o("model_type"),TYo=o(` property of the config object (either
passed as an argument or loaded from `),g1e=a("code"),MYo=o("pretrained_model_name_or_path"),EYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h1e=a("code"),CYo=o("pretrained_model_name_or_path"),wYo=o(":"),AYo=l(),U=a("ul"),q3=a("li"),p1e=a("strong"),LYo=o("albert"),yYo=o(" \u2014 "),Vz=a("a"),xYo=o("AlbertForTokenClassification"),$Yo=o(" (ALBERT model)"),kYo=l(),j3=a("li"),_1e=a("strong"),SYo=o("bert"),RYo=o(" \u2014 "),Xz=a("a"),PYo=o("BertForTokenClassification"),BYo=o(" (BERT model)"),IYo=l(),D3=a("li"),u1e=a("strong"),NYo=o("big_bird"),qYo=o(" \u2014 "),zz=a("a"),jYo=o("BigBirdForTokenClassification"),DYo=o(" (BigBird model)"),GYo=l(),G3=a("li"),b1e=a("strong"),OYo=o("bloom"),VYo=o(" \u2014 "),Wz=a("a"),XYo=o("BloomForTokenClassification"),zYo=o(" (BLOOM model)"),WYo=l(),O3=a("li"),v1e=a("strong"),QYo=o("camembert"),HYo=o(" \u2014 "),Qz=a("a"),UYo=o("CamembertForTokenClassification"),JYo=o(" (CamemBERT model)"),YYo=l(),V3=a("li"),F1e=a("strong"),KYo=o("canine"),ZYo=o(" \u2014 "),Hz=a("a"),eKo=o("CanineForTokenClassification"),oKo=o(" (CANINE model)"),rKo=l(),X3=a("li"),T1e=a("strong"),tKo=o("convbert"),aKo=o(" \u2014 "),Uz=a("a"),nKo=o("ConvBertForTokenClassification"),sKo=o(" (ConvBERT model)"),lKo=l(),z3=a("li"),M1e=a("strong"),iKo=o("data2vec-text"),dKo=o(" \u2014 "),Jz=a("a"),cKo=o("Data2VecTextForTokenClassification"),fKo=o(" (Data2VecText model)"),mKo=l(),W3=a("li"),E1e=a("strong"),gKo=o("deberta"),hKo=o(" \u2014 "),Yz=a("a"),pKo=o("DebertaForTokenClassification"),_Ko=o(" (DeBERTa model)"),uKo=l(),Q3=a("li"),C1e=a("strong"),bKo=o("deberta-v2"),vKo=o(" \u2014 "),Kz=a("a"),FKo=o("DebertaV2ForTokenClassification"),TKo=o(" (DeBERTa-v2 model)"),MKo=l(),H3=a("li"),w1e=a("strong"),EKo=o("distilbert"),CKo=o(" \u2014 "),Zz=a("a"),wKo=o("DistilBertForTokenClassification"),AKo=o(" (DistilBERT model)"),LKo=l(),U3=a("li"),A1e=a("strong"),yKo=o("electra"),xKo=o(" \u2014 "),eW=a("a"),$Ko=o("ElectraForTokenClassification"),kKo=o(" (ELECTRA model)"),SKo=l(),J3=a("li"),L1e=a("strong"),RKo=o("flaubert"),PKo=o(" \u2014 "),oW=a("a"),BKo=o("FlaubertForTokenClassification"),IKo=o(" (FlauBERT model)"),NKo=l(),Y3=a("li"),y1e=a("strong"),qKo=o("fnet"),jKo=o(" \u2014 "),rW=a("a"),DKo=o("FNetForTokenClassification"),GKo=o(" (FNet model)"),OKo=l(),K3=a("li"),x1e=a("strong"),VKo=o("funnel"),XKo=o(" \u2014 "),tW=a("a"),zKo=o("FunnelForTokenClassification"),WKo=o(" (Funnel Transformer model)"),QKo=l(),Z3=a("li"),$1e=a("strong"),HKo=o("gpt2"),UKo=o(" \u2014 "),aW=a("a"),JKo=o("GPT2ForTokenClassification"),YKo=o(" (OpenAI GPT-2 model)"),KKo=l(),eF=a("li"),k1e=a("strong"),ZKo=o("ibert"),eZo=o(" \u2014 "),nW=a("a"),oZo=o("IBertForTokenClassification"),rZo=o(" (I-BERT model)"),tZo=l(),oF=a("li"),S1e=a("strong"),aZo=o("layoutlm"),nZo=o(" \u2014 "),sW=a("a"),sZo=o("LayoutLMForTokenClassification"),lZo=o(" (LayoutLM model)"),iZo=l(),rF=a("li"),R1e=a("strong"),dZo=o("layoutlmv2"),cZo=o(" \u2014 "),lW=a("a"),fZo=o("LayoutLMv2ForTokenClassification"),mZo=o(" (LayoutLMv2 model)"),gZo=l(),tF=a("li"),P1e=a("strong"),hZo=o("layoutlmv3"),pZo=o(" \u2014 "),iW=a("a"),_Zo=o("LayoutLMv3ForTokenClassification"),uZo=o(" (LayoutLMv3 model)"),bZo=l(),aF=a("li"),B1e=a("strong"),vZo=o("longformer"),FZo=o(" \u2014 "),dW=a("a"),TZo=o("LongformerForTokenClassification"),MZo=o(" (Longformer model)"),EZo=l(),nF=a("li"),I1e=a("strong"),CZo=o("megatron-bert"),wZo=o(" \u2014 "),cW=a("a"),AZo=o("MegatronBertForTokenClassification"),LZo=o(" (Megatron-BERT model)"),yZo=l(),sF=a("li"),N1e=a("strong"),xZo=o("mobilebert"),$Zo=o(" \u2014 "),fW=a("a"),kZo=o("MobileBertForTokenClassification"),SZo=o(" (MobileBERT model)"),RZo=l(),lF=a("li"),q1e=a("strong"),PZo=o("mpnet"),BZo=o(" \u2014 "),mW=a("a"),IZo=o("MPNetForTokenClassification"),NZo=o(" (MPNet model)"),qZo=l(),iF=a("li"),j1e=a("strong"),jZo=o("nezha"),DZo=o(" \u2014 "),gW=a("a"),GZo=o("NezhaForTokenClassification"),OZo=o(" (Nezha model)"),VZo=l(),dF=a("li"),D1e=a("strong"),XZo=o("nystromformer"),zZo=o(" \u2014 "),hW=a("a"),WZo=o("NystromformerForTokenClassification"),QZo=o(" (Nystr\xF6mformer model)"),HZo=l(),cF=a("li"),G1e=a("strong"),UZo=o("qdqbert"),JZo=o(" \u2014 "),pW=a("a"),YZo=o("QDQBertForTokenClassification"),KZo=o(" (QDQBert model)"),ZZo=l(),fF=a("li"),O1e=a("strong"),eer=o("rembert"),oer=o(" \u2014 "),_W=a("a"),rer=o("RemBertForTokenClassification"),ter=o(" (RemBERT model)"),aer=l(),mF=a("li"),V1e=a("strong"),ner=o("roberta"),ser=o(" \u2014 "),uW=a("a"),ler=o("RobertaForTokenClassification"),ier=o(" (RoBERTa model)"),der=l(),gF=a("li"),X1e=a("strong"),cer=o("roformer"),fer=o(" \u2014 "),bW=a("a"),mer=o("RoFormerForTokenClassification"),ger=o(" (RoFormer model)"),her=l(),hF=a("li"),z1e=a("strong"),per=o("squeezebert"),_er=o(" \u2014 "),vW=a("a"),uer=o("SqueezeBertForTokenClassification"),ber=o(" (SqueezeBERT model)"),ver=l(),pF=a("li"),W1e=a("strong"),Fer=o("xlm"),Ter=o(" \u2014 "),FW=a("a"),Mer=o("XLMForTokenClassification"),Eer=o(" (XLM model)"),Cer=l(),_F=a("li"),Q1e=a("strong"),wer=o("xlm-roberta"),Aer=o(" \u2014 "),TW=a("a"),Ler=o("XLMRobertaForTokenClassification"),yer=o(" (XLM-RoBERTa model)"),xer=l(),uF=a("li"),H1e=a("strong"),$er=o("xlm-roberta-xl"),ker=o(" \u2014 "),MW=a("a"),Ser=o("XLMRobertaXLForTokenClassification"),Rer=o(" (XLM-RoBERTa-XL model)"),Per=l(),bF=a("li"),U1e=a("strong"),Ber=o("xlnet"),Ier=o(" \u2014 "),EW=a("a"),Ner=o("XLNetForTokenClassification"),qer=o(" (XLNet model)"),jer=l(),vF=a("li"),J1e=a("strong"),Der=o("yoso"),Ger=o(" \u2014 "),CW=a("a"),Oer=o("YosoForTokenClassification"),Ver=o(" (YOSO model)"),Xer=l(),FF=a("p"),zer=o("The model is set in evaluation mode by default using "),Y1e=a("code"),Wer=o("model.eval()"),Qer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K1e=a("code"),Her=o("model.train()"),Uer=l(),F(TF.$$.fragment),DXe=l(),hd=a("h2"),MF=a("a"),Z1e=a("span"),F(CL.$$.fragment),Jer=l(),e2e=a("span"),Yer=o("AutoModelForQuestionAnswering"),GXe=l(),jo=a("div"),F(wL.$$.fragment),Ker=l(),pd=a("p"),Zer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),wW=a("a"),eor=o("from_pretrained()"),oor=o(" class method or the "),AW=a("a"),ror=o("from_config()"),tor=o(` class
method.`),aor=l(),AL=a("p"),nor=o("This class cannot be instantiated directly using "),o2e=a("code"),sor=o("__init__()"),lor=o(" (throws an error)."),ior=l(),_t=a("div"),F(LL.$$.fragment),dor=l(),r2e=a("p"),cor=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),mor=l(),_d=a("p"),gor=o(`Note:
Loading a model from its configuration file does `),t2e=a("strong"),hor=o("not"),por=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LW=a("a"),_or=o("from_pretrained()"),uor=o(" to load the model weights."),bor=l(),F(EF.$$.fragment),vor=l(),no=a("div"),F(yL.$$.fragment),For=l(),a2e=a("p"),Tor=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Mor=l(),za=a("p"),Eor=o("The model class to instantiate is selected based on the "),n2e=a("code"),Cor=o("model_type"),wor=o(` property of the config object (either
passed as an argument or loaded from `),s2e=a("code"),Aor=o("pretrained_model_name_or_path"),Lor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l2e=a("code"),yor=o("pretrained_model_name_or_path"),xor=o(":"),$or=l(),V=a("ul"),CF=a("li"),i2e=a("strong"),kor=o("albert"),Sor=o(" \u2014 "),yW=a("a"),Ror=o("AlbertForQuestionAnswering"),Por=o(" (ALBERT model)"),Bor=l(),wF=a("li"),d2e=a("strong"),Ior=o("bart"),Nor=o(" \u2014 "),xW=a("a"),qor=o("BartForQuestionAnswering"),jor=o(" (BART model)"),Dor=l(),AF=a("li"),c2e=a("strong"),Gor=o("bert"),Oor=o(" \u2014 "),$W=a("a"),Vor=o("BertForQuestionAnswering"),Xor=o(" (BERT model)"),zor=l(),LF=a("li"),f2e=a("strong"),Wor=o("big_bird"),Qor=o(" \u2014 "),kW=a("a"),Hor=o("BigBirdForQuestionAnswering"),Uor=o(" (BigBird model)"),Jor=l(),yF=a("li"),m2e=a("strong"),Yor=o("bigbird_pegasus"),Kor=o(" \u2014 "),SW=a("a"),Zor=o("BigBirdPegasusForQuestionAnswering"),err=o(" (BigBird-Pegasus model)"),orr=l(),xF=a("li"),g2e=a("strong"),rrr=o("camembert"),trr=o(" \u2014 "),RW=a("a"),arr=o("CamembertForQuestionAnswering"),nrr=o(" (CamemBERT model)"),srr=l(),$F=a("li"),h2e=a("strong"),lrr=o("canine"),irr=o(" \u2014 "),PW=a("a"),drr=o("CanineForQuestionAnswering"),crr=o(" (CANINE model)"),frr=l(),kF=a("li"),p2e=a("strong"),mrr=o("convbert"),grr=o(" \u2014 "),BW=a("a"),hrr=o("ConvBertForQuestionAnswering"),prr=o(" (ConvBERT model)"),_rr=l(),SF=a("li"),_2e=a("strong"),urr=o("data2vec-text"),brr=o(" \u2014 "),IW=a("a"),vrr=o("Data2VecTextForQuestionAnswering"),Frr=o(" (Data2VecText model)"),Trr=l(),RF=a("li"),u2e=a("strong"),Mrr=o("deberta"),Err=o(" \u2014 "),NW=a("a"),Crr=o("DebertaForQuestionAnswering"),wrr=o(" (DeBERTa model)"),Arr=l(),PF=a("li"),b2e=a("strong"),Lrr=o("deberta-v2"),yrr=o(" \u2014 "),qW=a("a"),xrr=o("DebertaV2ForQuestionAnswering"),$rr=o(" (DeBERTa-v2 model)"),krr=l(),BF=a("li"),v2e=a("strong"),Srr=o("distilbert"),Rrr=o(" \u2014 "),jW=a("a"),Prr=o("DistilBertForQuestionAnswering"),Brr=o(" (DistilBERT model)"),Irr=l(),IF=a("li"),F2e=a("strong"),Nrr=o("electra"),qrr=o(" \u2014 "),DW=a("a"),jrr=o("ElectraForQuestionAnswering"),Drr=o(" (ELECTRA model)"),Grr=l(),NF=a("li"),T2e=a("strong"),Orr=o("flaubert"),Vrr=o(" \u2014 "),GW=a("a"),Xrr=o("FlaubertForQuestionAnsweringSimple"),zrr=o(" (FlauBERT model)"),Wrr=l(),qF=a("li"),M2e=a("strong"),Qrr=o("fnet"),Hrr=o(" \u2014 "),OW=a("a"),Urr=o("FNetForQuestionAnswering"),Jrr=o(" (FNet model)"),Yrr=l(),jF=a("li"),E2e=a("strong"),Krr=o("funnel"),Zrr=o(" \u2014 "),VW=a("a"),etr=o("FunnelForQuestionAnswering"),otr=o(" (Funnel Transformer model)"),rtr=l(),DF=a("li"),C2e=a("strong"),ttr=o("gptj"),atr=o(" \u2014 "),XW=a("a"),ntr=o("GPTJForQuestionAnswering"),str=o(" (GPT-J model)"),ltr=l(),GF=a("li"),w2e=a("strong"),itr=o("ibert"),dtr=o(" \u2014 "),zW=a("a"),ctr=o("IBertForQuestionAnswering"),ftr=o(" (I-BERT model)"),mtr=l(),OF=a("li"),A2e=a("strong"),gtr=o("layoutlmv2"),htr=o(" \u2014 "),WW=a("a"),ptr=o("LayoutLMv2ForQuestionAnswering"),_tr=o(" (LayoutLMv2 model)"),utr=l(),VF=a("li"),L2e=a("strong"),btr=o("layoutlmv3"),vtr=o(" \u2014 "),QW=a("a"),Ftr=o("LayoutLMv3ForQuestionAnswering"),Ttr=o(" (LayoutLMv3 model)"),Mtr=l(),XF=a("li"),y2e=a("strong"),Etr=o("led"),Ctr=o(" \u2014 "),HW=a("a"),wtr=o("LEDForQuestionAnswering"),Atr=o(" (LED model)"),Ltr=l(),zF=a("li"),x2e=a("strong"),ytr=o("longformer"),xtr=o(" \u2014 "),UW=a("a"),$tr=o("LongformerForQuestionAnswering"),ktr=o(" (Longformer model)"),Str=l(),WF=a("li"),$2e=a("strong"),Rtr=o("lxmert"),Ptr=o(" \u2014 "),JW=a("a"),Btr=o("LxmertForQuestionAnswering"),Itr=o(" (LXMERT model)"),Ntr=l(),QF=a("li"),k2e=a("strong"),qtr=o("mbart"),jtr=o(" \u2014 "),YW=a("a"),Dtr=o("MBartForQuestionAnswering"),Gtr=o(" (mBART model)"),Otr=l(),HF=a("li"),S2e=a("strong"),Vtr=o("megatron-bert"),Xtr=o(" \u2014 "),KW=a("a"),ztr=o("MegatronBertForQuestionAnswering"),Wtr=o(" (Megatron-BERT model)"),Qtr=l(),UF=a("li"),R2e=a("strong"),Htr=o("mobilebert"),Utr=o(" \u2014 "),ZW=a("a"),Jtr=o("MobileBertForQuestionAnswering"),Ytr=o(" (MobileBERT model)"),Ktr=l(),JF=a("li"),P2e=a("strong"),Ztr=o("mpnet"),ear=o(" \u2014 "),eQ=a("a"),oar=o("MPNetForQuestionAnswering"),rar=o(" (MPNet model)"),tar=l(),YF=a("li"),B2e=a("strong"),aar=o("mvp"),nar=o(" \u2014 "),oQ=a("a"),sar=o("MvpForQuestionAnswering"),lar=o(" (MVP model)"),iar=l(),KF=a("li"),I2e=a("strong"),dar=o("nezha"),car=o(" \u2014 "),rQ=a("a"),far=o("NezhaForQuestionAnswering"),mar=o(" (Nezha model)"),gar=l(),ZF=a("li"),N2e=a("strong"),har=o("nystromformer"),par=o(" \u2014 "),tQ=a("a"),_ar=o("NystromformerForQuestionAnswering"),uar=o(" (Nystr\xF6mformer model)"),bar=l(),eT=a("li"),q2e=a("strong"),Far=o("qdqbert"),Tar=o(" \u2014 "),aQ=a("a"),Mar=o("QDQBertForQuestionAnswering"),Ear=o(" (QDQBert model)"),Car=l(),oT=a("li"),j2e=a("strong"),war=o("reformer"),Aar=o(" \u2014 "),nQ=a("a"),Lar=o("ReformerForQuestionAnswering"),yar=o(" (Reformer model)"),xar=l(),rT=a("li"),D2e=a("strong"),$ar=o("rembert"),kar=o(" \u2014 "),sQ=a("a"),Sar=o("RemBertForQuestionAnswering"),Rar=o(" (RemBERT model)"),Par=l(),tT=a("li"),G2e=a("strong"),Bar=o("roberta"),Iar=o(" \u2014 "),lQ=a("a"),Nar=o("RobertaForQuestionAnswering"),qar=o(" (RoBERTa model)"),jar=l(),aT=a("li"),O2e=a("strong"),Dar=o("roformer"),Gar=o(" \u2014 "),iQ=a("a"),Oar=o("RoFormerForQuestionAnswering"),Var=o(" (RoFormer model)"),Xar=l(),nT=a("li"),V2e=a("strong"),zar=o("splinter"),War=o(" \u2014 "),dQ=a("a"),Qar=o("SplinterForQuestionAnswering"),Har=o(" (Splinter model)"),Uar=l(),sT=a("li"),X2e=a("strong"),Jar=o("squeezebert"),Yar=o(" \u2014 "),cQ=a("a"),Kar=o("SqueezeBertForQuestionAnswering"),Zar=o(" (SqueezeBERT model)"),enr=l(),lT=a("li"),z2e=a("strong"),onr=o("xlm"),rnr=o(" \u2014 "),fQ=a("a"),tnr=o("XLMForQuestionAnsweringSimple"),anr=o(" (XLM model)"),nnr=l(),iT=a("li"),W2e=a("strong"),snr=o("xlm-roberta"),lnr=o(" \u2014 "),mQ=a("a"),inr=o("XLMRobertaForQuestionAnswering"),dnr=o(" (XLM-RoBERTa model)"),cnr=l(),dT=a("li"),Q2e=a("strong"),fnr=o("xlm-roberta-xl"),mnr=o(" \u2014 "),gQ=a("a"),gnr=o("XLMRobertaXLForQuestionAnswering"),hnr=o(" (XLM-RoBERTa-XL model)"),pnr=l(),cT=a("li"),H2e=a("strong"),_nr=o("xlnet"),unr=o(" \u2014 "),hQ=a("a"),bnr=o("XLNetForQuestionAnsweringSimple"),vnr=o(" (XLNet model)"),Fnr=l(),fT=a("li"),U2e=a("strong"),Tnr=o("yoso"),Mnr=o(" \u2014 "),pQ=a("a"),Enr=o("YosoForQuestionAnswering"),Cnr=o(" (YOSO model)"),wnr=l(),mT=a("p"),Anr=o("The model is set in evaluation mode by default using "),J2e=a("code"),Lnr=o("model.eval()"),ynr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y2e=a("code"),xnr=o("model.train()"),$nr=l(),F(gT.$$.fragment),OXe=l(),ud=a("h2"),hT=a("a"),K2e=a("span"),F(xL.$$.fragment),knr=l(),Z2e=a("span"),Snr=o("AutoModelForTableQuestionAnswering"),VXe=l(),Do=a("div"),F($L.$$.fragment),Rnr=l(),bd=a("p"),Pnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),_Q=a("a"),Bnr=o("from_pretrained()"),Inr=o(" class method or the "),uQ=a("a"),Nnr=o("from_config()"),qnr=o(` class
method.`),jnr=l(),kL=a("p"),Dnr=o("This class cannot be instantiated directly using "),ebe=a("code"),Gnr=o("__init__()"),Onr=o(" (throws an error)."),Vnr=l(),ut=a("div"),F(SL.$$.fragment),Xnr=l(),obe=a("p"),znr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Wnr=l(),vd=a("p"),Qnr=o(`Note:
Loading a model from its configuration file does `),rbe=a("strong"),Hnr=o("not"),Unr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bQ=a("a"),Jnr=o("from_pretrained()"),Ynr=o(" to load the model weights."),Knr=l(),F(pT.$$.fragment),Znr=l(),so=a("div"),F(RL.$$.fragment),esr=l(),tbe=a("p"),osr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),rsr=l(),Wa=a("p"),tsr=o("The model class to instantiate is selected based on the "),abe=a("code"),asr=o("model_type"),nsr=o(` property of the config object (either
passed as an argument or loaded from `),nbe=a("code"),ssr=o("pretrained_model_name_or_path"),lsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sbe=a("code"),isr=o("pretrained_model_name_or_path"),dsr=o(":"),csr=l(),lbe=a("ul"),_T=a("li"),ibe=a("strong"),fsr=o("tapas"),msr=o(" \u2014 "),vQ=a("a"),gsr=o("TapasForQuestionAnswering"),hsr=o(" (TAPAS model)"),psr=l(),uT=a("p"),_sr=o("The model is set in evaluation mode by default using "),dbe=a("code"),usr=o("model.eval()"),bsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cbe=a("code"),vsr=o("model.train()"),Fsr=l(),F(bT.$$.fragment),XXe=l(),Fd=a("h2"),vT=a("a"),fbe=a("span"),F(PL.$$.fragment),Tsr=l(),mbe=a("span"),Msr=o("AutoModelForImageClassification"),zXe=l(),Go=a("div"),F(BL.$$.fragment),Esr=l(),Td=a("p"),Csr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),FQ=a("a"),wsr=o("from_pretrained()"),Asr=o(" class method or the "),TQ=a("a"),Lsr=o("from_config()"),ysr=o(` class
method.`),xsr=l(),IL=a("p"),$sr=o("This class cannot be instantiated directly using "),gbe=a("code"),ksr=o("__init__()"),Ssr=o(" (throws an error)."),Rsr=l(),bt=a("div"),F(NL.$$.fragment),Psr=l(),hbe=a("p"),Bsr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Isr=l(),Md=a("p"),Nsr=o(`Note:
Loading a model from its configuration file does `),pbe=a("strong"),qsr=o("not"),jsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MQ=a("a"),Dsr=o("from_pretrained()"),Gsr=o(" to load the model weights."),Osr=l(),F(FT.$$.fragment),Vsr=l(),lo=a("div"),F(qL.$$.fragment),Xsr=l(),_be=a("p"),zsr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Wsr=l(),Qa=a("p"),Qsr=o("The model class to instantiate is selected based on the "),ube=a("code"),Hsr=o("model_type"),Usr=o(` property of the config object (either
passed as an argument or loaded from `),bbe=a("code"),Jsr=o("pretrained_model_name_or_path"),Ysr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vbe=a("code"),Ksr=o("pretrained_model_name_or_path"),Zsr=o(":"),elr=l(),ve=a("ul"),TT=a("li"),Fbe=a("strong"),olr=o("beit"),rlr=o(" \u2014 "),EQ=a("a"),tlr=o("BeitForImageClassification"),alr=o(" (BEiT model)"),nlr=l(),MT=a("li"),Tbe=a("strong"),slr=o("convnext"),llr=o(" \u2014 "),CQ=a("a"),ilr=o("ConvNextForImageClassification"),dlr=o(" (ConvNeXT model)"),clr=l(),ET=a("li"),Mbe=a("strong"),flr=o("cvt"),mlr=o(" \u2014 "),wQ=a("a"),glr=o("CvtForImageClassification"),hlr=o(" (CvT model)"),plr=l(),CT=a("li"),Ebe=a("strong"),_lr=o("data2vec-vision"),ulr=o(" \u2014 "),AQ=a("a"),blr=o("Data2VecVisionForImageClassification"),vlr=o(" (Data2VecVision model)"),Flr=l(),Us=a("li"),Cbe=a("strong"),Tlr=o("deit"),Mlr=o(" \u2014 "),LQ=a("a"),Elr=o("DeiTForImageClassification"),Clr=o(" or "),yQ=a("a"),wlr=o("DeiTForImageClassificationWithTeacher"),Alr=o(" (DeiT model)"),Llr=l(),wT=a("li"),wbe=a("strong"),ylr=o("imagegpt"),xlr=o(" \u2014 "),xQ=a("a"),$lr=o("ImageGPTForImageClassification"),klr=o(" (ImageGPT model)"),Slr=l(),Js=a("li"),Abe=a("strong"),Rlr=o("levit"),Plr=o(" \u2014 "),$Q=a("a"),Blr=o("LevitForImageClassification"),Ilr=o(" or "),kQ=a("a"),Nlr=o("LevitForImageClassificationWithTeacher"),qlr=o(" (LeViT model)"),jlr=l(),AT=a("li"),Lbe=a("strong"),Dlr=o("mobilevit"),Glr=o(" \u2014 "),SQ=a("a"),Olr=o("MobileViTForImageClassification"),Vlr=o(" (MobileViT model)"),Xlr=l(),vt=a("li"),ybe=a("strong"),zlr=o("perceiver"),Wlr=o(" \u2014 "),RQ=a("a"),Qlr=o("PerceiverForImageClassificationLearned"),Hlr=o(" or "),PQ=a("a"),Ulr=o("PerceiverForImageClassificationFourier"),Jlr=o(" or "),BQ=a("a"),Ylr=o("PerceiverForImageClassificationConvProcessing"),Klr=o(" (Perceiver model)"),Zlr=l(),LT=a("li"),xbe=a("strong"),eir=o("poolformer"),oir=o(" \u2014 "),IQ=a("a"),rir=o("PoolFormerForImageClassification"),tir=o(" (PoolFormer model)"),air=l(),yT=a("li"),$be=a("strong"),nir=o("regnet"),sir=o(" \u2014 "),NQ=a("a"),lir=o("RegNetForImageClassification"),iir=o(" (RegNet model)"),dir=l(),xT=a("li"),kbe=a("strong"),cir=o("resnet"),fir=o(" \u2014 "),qQ=a("a"),mir=o("ResNetForImageClassification"),gir=o(" (ResNet model)"),hir=l(),$T=a("li"),Sbe=a("strong"),pir=o("segformer"),_ir=o(" \u2014 "),jQ=a("a"),uir=o("SegformerForImageClassification"),bir=o(" (SegFormer model)"),vir=l(),kT=a("li"),Rbe=a("strong"),Fir=o("swin"),Tir=o(" \u2014 "),DQ=a("a"),Mir=o("SwinForImageClassification"),Eir=o(" (Swin Transformer model)"),Cir=l(),ST=a("li"),Pbe=a("strong"),wir=o("van"),Air=o(" \u2014 "),GQ=a("a"),Lir=o("VanForImageClassification"),yir=o(" (VAN model)"),xir=l(),RT=a("li"),Bbe=a("strong"),$ir=o("vit"),kir=o(" \u2014 "),OQ=a("a"),Sir=o("ViTForImageClassification"),Rir=o(" (ViT model)"),Pir=l(),PT=a("p"),Bir=o("The model is set in evaluation mode by default using "),Ibe=a("code"),Iir=o("model.eval()"),Nir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nbe=a("code"),qir=o("model.train()"),jir=l(),F(BT.$$.fragment),WXe=l(),Ed=a("h2"),IT=a("a"),qbe=a("span"),F(jL.$$.fragment),Dir=l(),jbe=a("span"),Gir=o("AutoModelForVision2Seq"),QXe=l(),Oo=a("div"),F(DL.$$.fragment),Oir=l(),Cd=a("p"),Vir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),VQ=a("a"),Xir=o("from_pretrained()"),zir=o(" class method or the "),XQ=a("a"),Wir=o("from_config()"),Qir=o(` class
method.`),Hir=l(),GL=a("p"),Uir=o("This class cannot be instantiated directly using "),Dbe=a("code"),Jir=o("__init__()"),Yir=o(" (throws an error)."),Kir=l(),Ft=a("div"),F(OL.$$.fragment),Zir=l(),Gbe=a("p"),edr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),odr=l(),wd=a("p"),rdr=o(`Note:
Loading a model from its configuration file does `),Obe=a("strong"),tdr=o("not"),adr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zQ=a("a"),ndr=o("from_pretrained()"),sdr=o(" to load the model weights."),ldr=l(),F(NT.$$.fragment),idr=l(),io=a("div"),F(VL.$$.fragment),ddr=l(),Vbe=a("p"),cdr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),fdr=l(),Ha=a("p"),mdr=o("The model class to instantiate is selected based on the "),Xbe=a("code"),gdr=o("model_type"),hdr=o(` property of the config object (either
passed as an argument or loaded from `),zbe=a("code"),pdr=o("pretrained_model_name_or_path"),_dr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wbe=a("code"),udr=o("pretrained_model_name_or_path"),bdr=o(":"),vdr=l(),Qbe=a("ul"),qT=a("li"),Hbe=a("strong"),Fdr=o("vision-encoder-decoder"),Tdr=o(" \u2014 "),WQ=a("a"),Mdr=o("VisionEncoderDecoderModel"),Edr=o(" (Vision Encoder decoder model)"),Cdr=l(),jT=a("p"),wdr=o("The model is set in evaluation mode by default using "),Ube=a("code"),Adr=o("model.eval()"),Ldr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jbe=a("code"),ydr=o("model.train()"),xdr=l(),F(DT.$$.fragment),HXe=l(),Ad=a("h2"),GT=a("a"),Ybe=a("span"),F(XL.$$.fragment),$dr=l(),Kbe=a("span"),kdr=o("AutoModelForVisualQuestionAnswering"),UXe=l(),Vo=a("div"),F(zL.$$.fragment),Sdr=l(),Ld=a("p"),Rdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),QQ=a("a"),Pdr=o("from_pretrained()"),Bdr=o(" class method or the "),HQ=a("a"),Idr=o("from_config()"),Ndr=o(` class
method.`),qdr=l(),WL=a("p"),jdr=o("This class cannot be instantiated directly using "),Zbe=a("code"),Ddr=o("__init__()"),Gdr=o(" (throws an error)."),Odr=l(),Tt=a("div"),F(QL.$$.fragment),Vdr=l(),eve=a("p"),Xdr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),zdr=l(),yd=a("p"),Wdr=o(`Note:
Loading a model from its configuration file does `),ove=a("strong"),Qdr=o("not"),Hdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UQ=a("a"),Udr=o("from_pretrained()"),Jdr=o(" to load the model weights."),Ydr=l(),F(OT.$$.fragment),Kdr=l(),co=a("div"),F(HL.$$.fragment),Zdr=l(),rve=a("p"),ecr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),ocr=l(),Ua=a("p"),rcr=o("The model class to instantiate is selected based on the "),tve=a("code"),tcr=o("model_type"),acr=o(` property of the config object (either
passed as an argument or loaded from `),ave=a("code"),ncr=o("pretrained_model_name_or_path"),scr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nve=a("code"),lcr=o("pretrained_model_name_or_path"),icr=o(":"),dcr=l(),sve=a("ul"),VT=a("li"),lve=a("strong"),ccr=o("vilt"),fcr=o(" \u2014 "),JQ=a("a"),mcr=o("ViltForQuestionAnswering"),gcr=o(" (ViLT model)"),hcr=l(),XT=a("p"),pcr=o("The model is set in evaluation mode by default using "),ive=a("code"),_cr=o("model.eval()"),ucr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dve=a("code"),bcr=o("model.train()"),vcr=l(),F(zT.$$.fragment),JXe=l(),xd=a("h2"),WT=a("a"),cve=a("span"),F(UL.$$.fragment),Fcr=l(),fve=a("span"),Tcr=o("AutoModelForAudioClassification"),YXe=l(),Xo=a("div"),F(JL.$$.fragment),Mcr=l(),$d=a("p"),Ecr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),YQ=a("a"),Ccr=o("from_pretrained()"),wcr=o(" class method or the "),KQ=a("a"),Acr=o("from_config()"),Lcr=o(` class
method.`),ycr=l(),YL=a("p"),xcr=o("This class cannot be instantiated directly using "),mve=a("code"),$cr=o("__init__()"),kcr=o(" (throws an error)."),Scr=l(),Mt=a("div"),F(KL.$$.fragment),Rcr=l(),gve=a("p"),Pcr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Bcr=l(),kd=a("p"),Icr=o(`Note:
Loading a model from its configuration file does `),hve=a("strong"),Ncr=o("not"),qcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZQ=a("a"),jcr=o("from_pretrained()"),Dcr=o(" to load the model weights."),Gcr=l(),F(QT.$$.fragment),Ocr=l(),fo=a("div"),F(ZL.$$.fragment),Vcr=l(),pve=a("p"),Xcr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),zcr=l(),Ja=a("p"),Wcr=o("The model class to instantiate is selected based on the "),_ve=a("code"),Qcr=o("model_type"),Hcr=o(` property of the config object (either
passed as an argument or loaded from `),uve=a("code"),Ucr=o("pretrained_model_name_or_path"),Jcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bve=a("code"),Ycr=o("pretrained_model_name_or_path"),Kcr=o(":"),Zcr=l(),Pe=a("ul"),HT=a("li"),vve=a("strong"),efr=o("data2vec-audio"),ofr=o(" \u2014 "),eH=a("a"),rfr=o("Data2VecAudioForSequenceClassification"),tfr=o(" (Data2VecAudio model)"),afr=l(),UT=a("li"),Fve=a("strong"),nfr=o("hubert"),sfr=o(" \u2014 "),oH=a("a"),lfr=o("HubertForSequenceClassification"),ifr=o(" (Hubert model)"),dfr=l(),JT=a("li"),Tve=a("strong"),cfr=o("sew"),ffr=o(" \u2014 "),rH=a("a"),mfr=o("SEWForSequenceClassification"),gfr=o(" (SEW model)"),hfr=l(),YT=a("li"),Mve=a("strong"),pfr=o("sew-d"),_fr=o(" \u2014 "),tH=a("a"),ufr=o("SEWDForSequenceClassification"),bfr=o(" (SEW-D model)"),vfr=l(),KT=a("li"),Eve=a("strong"),Ffr=o("unispeech"),Tfr=o(" \u2014 "),aH=a("a"),Mfr=o("UniSpeechForSequenceClassification"),Efr=o(" (UniSpeech model)"),Cfr=l(),ZT=a("li"),Cve=a("strong"),wfr=o("unispeech-sat"),Afr=o(" \u2014 "),nH=a("a"),Lfr=o("UniSpeechSatForSequenceClassification"),yfr=o(" (UniSpeechSat model)"),xfr=l(),e7=a("li"),wve=a("strong"),$fr=o("wav2vec2"),kfr=o(" \u2014 "),sH=a("a"),Sfr=o("Wav2Vec2ForSequenceClassification"),Rfr=o(" (Wav2Vec2 model)"),Pfr=l(),o7=a("li"),Ave=a("strong"),Bfr=o("wav2vec2-conformer"),Ifr=o(" \u2014 "),lH=a("a"),Nfr=o("Wav2Vec2ConformerForSequenceClassification"),qfr=o(" (Wav2Vec2-Conformer model)"),jfr=l(),r7=a("li"),Lve=a("strong"),Dfr=o("wavlm"),Gfr=o(" \u2014 "),iH=a("a"),Ofr=o("WavLMForSequenceClassification"),Vfr=o(" (WavLM model)"),Xfr=l(),t7=a("p"),zfr=o("The model is set in evaluation mode by default using "),yve=a("code"),Wfr=o("model.eval()"),Qfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xve=a("code"),Hfr=o("model.train()"),Ufr=l(),F(a7.$$.fragment),KXe=l(),Sd=a("h2"),n7=a("a"),$ve=a("span"),F(ey.$$.fragment),Jfr=l(),kve=a("span"),Yfr=o("AutoModelForAudioFrameClassification"),ZXe=l(),zo=a("div"),F(oy.$$.fragment),Kfr=l(),Rd=a("p"),Zfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),dH=a("a"),emr=o("from_pretrained()"),omr=o(" class method or the "),cH=a("a"),rmr=o("from_config()"),tmr=o(` class
method.`),amr=l(),ry=a("p"),nmr=o("This class cannot be instantiated directly using "),Sve=a("code"),smr=o("__init__()"),lmr=o(" (throws an error)."),imr=l(),Et=a("div"),F(ty.$$.fragment),dmr=l(),Rve=a("p"),cmr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),fmr=l(),Pd=a("p"),mmr=o(`Note:
Loading a model from its configuration file does `),Pve=a("strong"),gmr=o("not"),hmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=a("a"),pmr=o("from_pretrained()"),_mr=o(" to load the model weights."),umr=l(),F(s7.$$.fragment),bmr=l(),mo=a("div"),F(ay.$$.fragment),vmr=l(),Bve=a("p"),Fmr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Tmr=l(),Ya=a("p"),Mmr=o("The model class to instantiate is selected based on the "),Ive=a("code"),Emr=o("model_type"),Cmr=o(` property of the config object (either
passed as an argument or loaded from `),Nve=a("code"),wmr=o("pretrained_model_name_or_path"),Amr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qve=a("code"),Lmr=o("pretrained_model_name_or_path"),ymr=o(":"),xmr=l(),ot=a("ul"),l7=a("li"),jve=a("strong"),$mr=o("data2vec-audio"),kmr=o(" \u2014 "),mH=a("a"),Smr=o("Data2VecAudioForAudioFrameClassification"),Rmr=o(" (Data2VecAudio model)"),Pmr=l(),i7=a("li"),Dve=a("strong"),Bmr=o("unispeech-sat"),Imr=o(" \u2014 "),gH=a("a"),Nmr=o("UniSpeechSatForAudioFrameClassification"),qmr=o(" (UniSpeechSat model)"),jmr=l(),d7=a("li"),Gve=a("strong"),Dmr=o("wav2vec2"),Gmr=o(" \u2014 "),hH=a("a"),Omr=o("Wav2Vec2ForAudioFrameClassification"),Vmr=o(" (Wav2Vec2 model)"),Xmr=l(),c7=a("li"),Ove=a("strong"),zmr=o("wav2vec2-conformer"),Wmr=o(" \u2014 "),pH=a("a"),Qmr=o("Wav2Vec2ConformerForAudioFrameClassification"),Hmr=o(" (Wav2Vec2-Conformer model)"),Umr=l(),f7=a("li"),Vve=a("strong"),Jmr=o("wavlm"),Ymr=o(" \u2014 "),_H=a("a"),Kmr=o("WavLMForAudioFrameClassification"),Zmr=o(" (WavLM model)"),egr=l(),m7=a("p"),ogr=o("The model is set in evaluation mode by default using "),Xve=a("code"),rgr=o("model.eval()"),tgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zve=a("code"),agr=o("model.train()"),ngr=l(),F(g7.$$.fragment),eze=l(),Bd=a("h2"),h7=a("a"),Wve=a("span"),F(ny.$$.fragment),sgr=l(),Qve=a("span"),lgr=o("AutoModelForCTC"),oze=l(),Wo=a("div"),F(sy.$$.fragment),igr=l(),Id=a("p"),dgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),uH=a("a"),cgr=o("from_pretrained()"),fgr=o(" class method or the "),bH=a("a"),mgr=o("from_config()"),ggr=o(` class
method.`),hgr=l(),ly=a("p"),pgr=o("This class cannot be instantiated directly using "),Hve=a("code"),_gr=o("__init__()"),ugr=o(" (throws an error)."),bgr=l(),Ct=a("div"),F(iy.$$.fragment),vgr=l(),Uve=a("p"),Fgr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Tgr=l(),Nd=a("p"),Mgr=o(`Note:
Loading a model from its configuration file does `),Jve=a("strong"),Egr=o("not"),Cgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=a("a"),wgr=o("from_pretrained()"),Agr=o(" to load the model weights."),Lgr=l(),F(p7.$$.fragment),ygr=l(),go=a("div"),F(dy.$$.fragment),xgr=l(),Yve=a("p"),$gr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),kgr=l(),Ka=a("p"),Sgr=o("The model class to instantiate is selected based on the "),Kve=a("code"),Rgr=o("model_type"),Pgr=o(` property of the config object (either
passed as an argument or loaded from `),Zve=a("code"),Bgr=o("pretrained_model_name_or_path"),Igr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e3e=a("code"),Ngr=o("pretrained_model_name_or_path"),qgr=o(":"),jgr=l(),Le=a("ul"),_7=a("li"),o3e=a("strong"),Dgr=o("data2vec-audio"),Ggr=o(" \u2014 "),FH=a("a"),Ogr=o("Data2VecAudioForCTC"),Vgr=o(" (Data2VecAudio model)"),Xgr=l(),u7=a("li"),r3e=a("strong"),zgr=o("hubert"),Wgr=o(" \u2014 "),TH=a("a"),Qgr=o("HubertForCTC"),Hgr=o(" (Hubert model)"),Ugr=l(),b7=a("li"),t3e=a("strong"),Jgr=o("mctct"),Ygr=o(" \u2014 "),MH=a("a"),Kgr=o("MCTCTForCTC"),Zgr=o(" (M-CTC-T model)"),ehr=l(),v7=a("li"),a3e=a("strong"),ohr=o("sew"),rhr=o(" \u2014 "),EH=a("a"),thr=o("SEWForCTC"),ahr=o(" (SEW model)"),nhr=l(),F7=a("li"),n3e=a("strong"),shr=o("sew-d"),lhr=o(" \u2014 "),CH=a("a"),ihr=o("SEWDForCTC"),dhr=o(" (SEW-D model)"),chr=l(),T7=a("li"),s3e=a("strong"),fhr=o("unispeech"),mhr=o(" \u2014 "),wH=a("a"),ghr=o("UniSpeechForCTC"),hhr=o(" (UniSpeech model)"),phr=l(),M7=a("li"),l3e=a("strong"),_hr=o("unispeech-sat"),uhr=o(" \u2014 "),AH=a("a"),bhr=o("UniSpeechSatForCTC"),vhr=o(" (UniSpeechSat model)"),Fhr=l(),E7=a("li"),i3e=a("strong"),Thr=o("wav2vec2"),Mhr=o(" \u2014 "),LH=a("a"),Ehr=o("Wav2Vec2ForCTC"),Chr=o(" (Wav2Vec2 model)"),whr=l(),C7=a("li"),d3e=a("strong"),Ahr=o("wav2vec2-conformer"),Lhr=o(" \u2014 "),yH=a("a"),yhr=o("Wav2Vec2ConformerForCTC"),xhr=o(" (Wav2Vec2-Conformer model)"),$hr=l(),w7=a("li"),c3e=a("strong"),khr=o("wavlm"),Shr=o(" \u2014 "),xH=a("a"),Rhr=o("WavLMForCTC"),Phr=o(" (WavLM model)"),Bhr=l(),A7=a("p"),Ihr=o("The model is set in evaluation mode by default using "),f3e=a("code"),Nhr=o("model.eval()"),qhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m3e=a("code"),jhr=o("model.train()"),Dhr=l(),F(L7.$$.fragment),rze=l(),qd=a("h2"),y7=a("a"),g3e=a("span"),F(cy.$$.fragment),Ghr=l(),h3e=a("span"),Ohr=o("AutoModelForSpeechSeq2Seq"),tze=l(),Qo=a("div"),F(fy.$$.fragment),Vhr=l(),jd=a("p"),Xhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),$H=a("a"),zhr=o("from_pretrained()"),Whr=o(" class method or the "),kH=a("a"),Qhr=o("from_config()"),Hhr=o(` class
method.`),Uhr=l(),my=a("p"),Jhr=o("This class cannot be instantiated directly using "),p3e=a("code"),Yhr=o("__init__()"),Khr=o(" (throws an error)."),Zhr=l(),wt=a("div"),F(gy.$$.fragment),epr=l(),_3e=a("p"),opr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),rpr=l(),Dd=a("p"),tpr=o(`Note:
Loading a model from its configuration file does `),u3e=a("strong"),apr=o("not"),npr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SH=a("a"),spr=o("from_pretrained()"),lpr=o(" to load the model weights."),ipr=l(),F(x7.$$.fragment),dpr=l(),ho=a("div"),F(hy.$$.fragment),cpr=l(),b3e=a("p"),fpr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),mpr=l(),Za=a("p"),gpr=o("The model class to instantiate is selected based on the "),v3e=a("code"),hpr=o("model_type"),ppr=o(` property of the config object (either
passed as an argument or loaded from `),F3e=a("code"),_pr=o("pretrained_model_name_or_path"),upr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T3e=a("code"),bpr=o("pretrained_model_name_or_path"),vpr=o(":"),Fpr=l(),py=a("ul"),$7=a("li"),M3e=a("strong"),Tpr=o("speech-encoder-decoder"),Mpr=o(" \u2014 "),RH=a("a"),Epr=o("SpeechEncoderDecoderModel"),Cpr=o(" (Speech Encoder decoder model)"),wpr=l(),k7=a("li"),E3e=a("strong"),Apr=o("speech_to_text"),Lpr=o(" \u2014 "),PH=a("a"),ypr=o("Speech2TextForConditionalGeneration"),xpr=o(" (Speech2Text model)"),$pr=l(),S7=a("p"),kpr=o("The model is set in evaluation mode by default using "),C3e=a("code"),Spr=o("model.eval()"),Rpr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w3e=a("code"),Ppr=o("model.train()"),Bpr=l(),F(R7.$$.fragment),aze=l(),Gd=a("h2"),P7=a("a"),A3e=a("span"),F(_y.$$.fragment),Ipr=l(),L3e=a("span"),Npr=o("AutoModelForAudioXVector"),nze=l(),Ho=a("div"),F(uy.$$.fragment),qpr=l(),Od=a("p"),jpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),BH=a("a"),Dpr=o("from_pretrained()"),Gpr=o(" class method or the "),IH=a("a"),Opr=o("from_config()"),Vpr=o(` class
method.`),Xpr=l(),by=a("p"),zpr=o("This class cannot be instantiated directly using "),y3e=a("code"),Wpr=o("__init__()"),Qpr=o(" (throws an error)."),Hpr=l(),At=a("div"),F(vy.$$.fragment),Upr=l(),x3e=a("p"),Jpr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Ypr=l(),Vd=a("p"),Kpr=o(`Note:
Loading a model from its configuration file does `),$3e=a("strong"),Zpr=o("not"),e_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=a("a"),o_r=o("from_pretrained()"),r_r=o(" to load the model weights."),t_r=l(),F(B7.$$.fragment),a_r=l(),po=a("div"),F(Fy.$$.fragment),n_r=l(),k3e=a("p"),s_r=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),l_r=l(),en=a("p"),i_r=o("The model class to instantiate is selected based on the "),S3e=a("code"),d_r=o("model_type"),c_r=o(` property of the config object (either
passed as an argument or loaded from `),R3e=a("code"),f_r=o("pretrained_model_name_or_path"),m_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P3e=a("code"),g_r=o("pretrained_model_name_or_path"),h_r=o(":"),p_r=l(),rt=a("ul"),I7=a("li"),B3e=a("strong"),__r=o("data2vec-audio"),u_r=o(" \u2014 "),qH=a("a"),b_r=o("Data2VecAudioForXVector"),v_r=o(" (Data2VecAudio model)"),F_r=l(),N7=a("li"),I3e=a("strong"),T_r=o("unispeech-sat"),M_r=o(" \u2014 "),jH=a("a"),E_r=o("UniSpeechSatForXVector"),C_r=o(" (UniSpeechSat model)"),w_r=l(),q7=a("li"),N3e=a("strong"),A_r=o("wav2vec2"),L_r=o(" \u2014 "),DH=a("a"),y_r=o("Wav2Vec2ForXVector"),x_r=o(" (Wav2Vec2 model)"),$_r=l(),j7=a("li"),q3e=a("strong"),k_r=o("wav2vec2-conformer"),S_r=o(" \u2014 "),GH=a("a"),R_r=o("Wav2Vec2ConformerForXVector"),P_r=o(" (Wav2Vec2-Conformer model)"),B_r=l(),D7=a("li"),j3e=a("strong"),I_r=o("wavlm"),N_r=o(" \u2014 "),OH=a("a"),q_r=o("WavLMForXVector"),j_r=o(" (WavLM model)"),D_r=l(),G7=a("p"),G_r=o("The model is set in evaluation mode by default using "),D3e=a("code"),O_r=o("model.eval()"),V_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G3e=a("code"),X_r=o("model.train()"),z_r=l(),F(O7.$$.fragment),sze=l(),Xd=a("h2"),V7=a("a"),O3e=a("span"),F(Ty.$$.fragment),W_r=l(),V3e=a("span"),Q_r=o("AutoModelForMaskedImageModeling"),lze=l(),Uo=a("div"),F(My.$$.fragment),H_r=l(),zd=a("p"),U_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),VH=a("a"),J_r=o("from_pretrained()"),Y_r=o(" class method or the "),XH=a("a"),K_r=o("from_config()"),Z_r=o(` class
method.`),eur=l(),Ey=a("p"),our=o("This class cannot be instantiated directly using "),X3e=a("code"),rur=o("__init__()"),tur=o(" (throws an error)."),aur=l(),Lt=a("div"),F(Cy.$$.fragment),nur=l(),z3e=a("p"),sur=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),lur=l(),Wd=a("p"),iur=o(`Note:
Loading a model from its configuration file does `),W3e=a("strong"),dur=o("not"),cur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zH=a("a"),fur=o("from_pretrained()"),mur=o(" to load the model weights."),gur=l(),F(X7.$$.fragment),hur=l(),_o=a("div"),F(wy.$$.fragment),pur=l(),Q3e=a("p"),_ur=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),uur=l(),on=a("p"),bur=o("The model class to instantiate is selected based on the "),H3e=a("code"),vur=o("model_type"),Fur=o(` property of the config object (either
passed as an argument or loaded from `),U3e=a("code"),Tur=o("pretrained_model_name_or_path"),Mur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J3e=a("code"),Eur=o("pretrained_model_name_or_path"),Cur=o(":"),wur=l(),Qd=a("ul"),z7=a("li"),Y3e=a("strong"),Aur=o("deit"),Lur=o(" \u2014 "),WH=a("a"),yur=o("DeiTForMaskedImageModeling"),xur=o(" (DeiT model)"),$ur=l(),W7=a("li"),K3e=a("strong"),kur=o("swin"),Sur=o(" \u2014 "),QH=a("a"),Rur=o("SwinForMaskedImageModeling"),Pur=o(" (Swin Transformer model)"),Bur=l(),Q7=a("li"),Z3e=a("strong"),Iur=o("vit"),Nur=o(" \u2014 "),HH=a("a"),qur=o("ViTForMaskedImageModeling"),jur=o(" (ViT model)"),Dur=l(),H7=a("p"),Gur=o("The model is set in evaluation mode by default using "),eFe=a("code"),Our=o("model.eval()"),Vur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oFe=a("code"),Xur=o("model.train()"),zur=l(),F(U7.$$.fragment),ize=l(),Hd=a("h2"),J7=a("a"),rFe=a("span"),F(Ay.$$.fragment),Wur=l(),tFe=a("span"),Qur=o("AutoModelForObjectDetection"),dze=l(),Jo=a("div"),F(Ly.$$.fragment),Hur=l(),Ud=a("p"),Uur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),UH=a("a"),Jur=o("from_pretrained()"),Yur=o(" class method or the "),JH=a("a"),Kur=o("from_config()"),Zur=o(` class
method.`),e1r=l(),yy=a("p"),o1r=o("This class cannot be instantiated directly using "),aFe=a("code"),r1r=o("__init__()"),t1r=o(" (throws an error)."),a1r=l(),yt=a("div"),F(xy.$$.fragment),n1r=l(),nFe=a("p"),s1r=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),l1r=l(),Jd=a("p"),i1r=o(`Note:
Loading a model from its configuration file does `),sFe=a("strong"),d1r=o("not"),c1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=a("a"),f1r=o("from_pretrained()"),m1r=o(" to load the model weights."),g1r=l(),F(Y7.$$.fragment),h1r=l(),uo=a("div"),F($y.$$.fragment),p1r=l(),lFe=a("p"),_1r=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),u1r=l(),rn=a("p"),b1r=o("The model class to instantiate is selected based on the "),iFe=a("code"),v1r=o("model_type"),F1r=o(` property of the config object (either
passed as an argument or loaded from `),dFe=a("code"),T1r=o("pretrained_model_name_or_path"),M1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cFe=a("code"),E1r=o("pretrained_model_name_or_path"),C1r=o(":"),w1r=l(),ky=a("ul"),K7=a("li"),fFe=a("strong"),A1r=o("detr"),L1r=o(" \u2014 "),KH=a("a"),y1r=o("DetrForObjectDetection"),x1r=o(" (DETR model)"),$1r=l(),Z7=a("li"),mFe=a("strong"),k1r=o("yolos"),S1r=o(" \u2014 "),ZH=a("a"),R1r=o("YolosForObjectDetection"),P1r=o(" (YOLOS model)"),B1r=l(),e8=a("p"),I1r=o("The model is set in evaluation mode by default using "),gFe=a("code"),N1r=o("model.eval()"),q1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hFe=a("code"),j1r=o("model.train()"),D1r=l(),F(o8.$$.fragment),cze=l(),Yd=a("h2"),r8=a("a"),pFe=a("span"),F(Sy.$$.fragment),G1r=l(),_Fe=a("span"),O1r=o("AutoModelForImageSegmentation"),fze=l(),Yo=a("div"),F(Ry.$$.fragment),V1r=l(),Kd=a("p"),X1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),eU=a("a"),z1r=o("from_pretrained()"),W1r=o(" class method or the "),oU=a("a"),Q1r=o("from_config()"),H1r=o(` class
method.`),U1r=l(),Py=a("p"),J1r=o("This class cannot be instantiated directly using "),uFe=a("code"),Y1r=o("__init__()"),K1r=o(" (throws an error)."),Z1r=l(),xt=a("div"),F(By.$$.fragment),e2r=l(),bFe=a("p"),o2r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),r2r=l(),Zd=a("p"),t2r=o(`Note:
Loading a model from its configuration file does `),vFe=a("strong"),a2r=o("not"),n2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rU=a("a"),s2r=o("from_pretrained()"),l2r=o(" to load the model weights."),i2r=l(),F(t8.$$.fragment),d2r=l(),bo=a("div"),F(Iy.$$.fragment),c2r=l(),FFe=a("p"),f2r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),m2r=l(),tn=a("p"),g2r=o("The model class to instantiate is selected based on the "),TFe=a("code"),h2r=o("model_type"),p2r=o(` property of the config object (either
passed as an argument or loaded from `),MFe=a("code"),_2r=o("pretrained_model_name_or_path"),u2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EFe=a("code"),b2r=o("pretrained_model_name_or_path"),v2r=o(":"),F2r=l(),CFe=a("ul"),a8=a("li"),wFe=a("strong"),T2r=o("detr"),M2r=o(" \u2014 "),tU=a("a"),E2r=o("DetrForSegmentation"),C2r=o(" (DETR model)"),w2r=l(),n8=a("p"),A2r=o("The model is set in evaluation mode by default using "),AFe=a("code"),L2r=o("model.eval()"),y2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),LFe=a("code"),x2r=o("model.train()"),$2r=l(),F(s8.$$.fragment),mze=l(),ec=a("h2"),l8=a("a"),yFe=a("span"),F(Ny.$$.fragment),k2r=l(),xFe=a("span"),S2r=o("AutoModelForSemanticSegmentation"),gze=l(),Ko=a("div"),F(qy.$$.fragment),R2r=l(),oc=a("p"),P2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),aU=a("a"),B2r=o("from_pretrained()"),I2r=o(" class method or the "),nU=a("a"),N2r=o("from_config()"),q2r=o(` class
method.`),j2r=l(),jy=a("p"),D2r=o("This class cannot be instantiated directly using "),$Fe=a("code"),G2r=o("__init__()"),O2r=o(" (throws an error)."),V2r=l(),$t=a("div"),F(Dy.$$.fragment),X2r=l(),kFe=a("p"),z2r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),W2r=l(),rc=a("p"),Q2r=o(`Note:
Loading a model from its configuration file does `),SFe=a("strong"),H2r=o("not"),U2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=a("a"),J2r=o("from_pretrained()"),Y2r=o(" to load the model weights."),K2r=l(),F(i8.$$.fragment),Z2r=l(),vo=a("div"),F(Gy.$$.fragment),ebr=l(),RFe=a("p"),obr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),rbr=l(),an=a("p"),tbr=o("The model class to instantiate is selected based on the "),PFe=a("code"),abr=o("model_type"),nbr=o(` property of the config object (either
passed as an argument or loaded from `),BFe=a("code"),sbr=o("pretrained_model_name_or_path"),lbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IFe=a("code"),ibr=o("pretrained_model_name_or_path"),dbr=o(":"),cbr=l(),tt=a("ul"),d8=a("li"),NFe=a("strong"),fbr=o("beit"),mbr=o(" \u2014 "),lU=a("a"),gbr=o("BeitForSemanticSegmentation"),hbr=o(" (BEiT model)"),pbr=l(),c8=a("li"),qFe=a("strong"),_br=o("data2vec-vision"),ubr=o(" \u2014 "),iU=a("a"),bbr=o("Data2VecVisionForSemanticSegmentation"),vbr=o(" (Data2VecVision model)"),Fbr=l(),f8=a("li"),jFe=a("strong"),Tbr=o("dpt"),Mbr=o(" \u2014 "),dU=a("a"),Ebr=o("DPTForSemanticSegmentation"),Cbr=o(" (DPT model)"),wbr=l(),m8=a("li"),DFe=a("strong"),Abr=o("mobilevit"),Lbr=o(" \u2014 "),cU=a("a"),ybr=o("MobileViTForSemanticSegmentation"),xbr=o(" (MobileViT model)"),$br=l(),g8=a("li"),GFe=a("strong"),kbr=o("segformer"),Sbr=o(" \u2014 "),fU=a("a"),Rbr=o("SegformerForSemanticSegmentation"),Pbr=o(" (SegFormer model)"),Bbr=l(),h8=a("p"),Ibr=o("The model is set in evaluation mode by default using "),OFe=a("code"),Nbr=o("model.eval()"),qbr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),VFe=a("code"),jbr=o("model.train()"),Dbr=l(),F(p8.$$.fragment),hze=l(),tc=a("h2"),_8=a("a"),XFe=a("span"),F(Oy.$$.fragment),Gbr=l(),zFe=a("span"),Obr=o("AutoModelForInstanceSegmentation"),pze=l(),Zo=a("div"),F(Vy.$$.fragment),Vbr=l(),ac=a("p"),Xbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),mU=a("a"),zbr=o("from_pretrained()"),Wbr=o(" class method or the "),gU=a("a"),Qbr=o("from_config()"),Hbr=o(` class
method.`),Ubr=l(),Xy=a("p"),Jbr=o("This class cannot be instantiated directly using "),WFe=a("code"),Ybr=o("__init__()"),Kbr=o(" (throws an error)."),Zbr=l(),kt=a("div"),F(zy.$$.fragment),evr=l(),QFe=a("p"),ovr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),rvr=l(),nc=a("p"),tvr=o(`Note:
Loading a model from its configuration file does `),HFe=a("strong"),avr=o("not"),nvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hU=a("a"),svr=o("from_pretrained()"),lvr=o(" to load the model weights."),ivr=l(),F(u8.$$.fragment),dvr=l(),Fo=a("div"),F(Wy.$$.fragment),cvr=l(),UFe=a("p"),fvr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),mvr=l(),nn=a("p"),gvr=o("The model class to instantiate is selected based on the "),JFe=a("code"),hvr=o("model_type"),pvr=o(` property of the config object (either
passed as an argument or loaded from `),YFe=a("code"),_vr=o("pretrained_model_name_or_path"),uvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KFe=a("code"),bvr=o("pretrained_model_name_or_path"),vvr=o(":"),Fvr=l(),ZFe=a("ul"),b8=a("li"),eTe=a("strong"),Tvr=o("maskformer"),Mvr=o(" \u2014 "),pU=a("a"),Evr=o("MaskFormerForInstanceSegmentation"),Cvr=o(" (MaskFormer model)"),wvr=l(),v8=a("p"),Avr=o("The model is set in evaluation mode by default using "),oTe=a("code"),Lvr=o("model.eval()"),yvr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rTe=a("code"),xvr=o("model.train()"),$vr=l(),F(F8.$$.fragment),_ze=l(),sc=a("h2"),T8=a("a"),tTe=a("span"),F(Qy.$$.fragment),kvr=l(),aTe=a("span"),Svr=o("TFAutoModel"),uze=l(),er=a("div"),F(Hy.$$.fragment),Rvr=l(),lc=a("p"),Pvr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_U=a("a"),Bvr=o("from_pretrained()"),Ivr=o(" class method or the "),uU=a("a"),Nvr=o("from_config()"),qvr=o(` class
method.`),jvr=l(),Uy=a("p"),Dvr=o("This class cannot be instantiated directly using "),nTe=a("code"),Gvr=o("__init__()"),Ovr=o(" (throws an error)."),Vvr=l(),St=a("div"),F(Jy.$$.fragment),Xvr=l(),sTe=a("p"),zvr=o("Instantiates one of the base model classes of the library from a configuration."),Wvr=l(),ic=a("p"),Qvr=o(`Note:
Loading a model from its configuration file does `),lTe=a("strong"),Hvr=o("not"),Uvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bU=a("a"),Jvr=o("from_pretrained()"),Yvr=o(" to load the model weights."),Kvr=l(),F(M8.$$.fragment),Zvr=l(),xr=a("div"),F(Yy.$$.fragment),e3r=l(),iTe=a("p"),o3r=o("Instantiate one of the base model classes of the library from a pretrained model."),r3r=l(),sn=a("p"),t3r=o("The model class to instantiate is selected based on the "),dTe=a("code"),a3r=o("model_type"),n3r=o(` property of the config object (either
passed as an argument or loaded from `),cTe=a("code"),s3r=o("pretrained_model_name_or_path"),l3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fTe=a("code"),i3r=o("pretrained_model_name_or_path"),d3r=o(":"),c3r=l(),q=a("ul"),E8=a("li"),mTe=a("strong"),f3r=o("albert"),m3r=o(" \u2014 "),vU=a("a"),g3r=o("TFAlbertModel"),h3r=o(" (ALBERT model)"),p3r=l(),C8=a("li"),gTe=a("strong"),_3r=o("bart"),u3r=o(" \u2014 "),FU=a("a"),b3r=o("TFBartModel"),v3r=o(" (BART model)"),F3r=l(),w8=a("li"),hTe=a("strong"),T3r=o("bert"),M3r=o(" \u2014 "),TU=a("a"),E3r=o("TFBertModel"),C3r=o(" (BERT model)"),w3r=l(),A8=a("li"),pTe=a("strong"),A3r=o("blenderbot"),L3r=o(" \u2014 "),MU=a("a"),y3r=o("TFBlenderbotModel"),x3r=o(" (Blenderbot model)"),$3r=l(),L8=a("li"),_Te=a("strong"),k3r=o("blenderbot-small"),S3r=o(" \u2014 "),EU=a("a"),R3r=o("TFBlenderbotSmallModel"),P3r=o(" (BlenderbotSmall model)"),B3r=l(),y8=a("li"),uTe=a("strong"),I3r=o("camembert"),N3r=o(" \u2014 "),CU=a("a"),q3r=o("TFCamembertModel"),j3r=o(" (CamemBERT model)"),D3r=l(),x8=a("li"),bTe=a("strong"),G3r=o("clip"),O3r=o(" \u2014 "),wU=a("a"),V3r=o("TFCLIPModel"),X3r=o(" (CLIP model)"),z3r=l(),$8=a("li"),vTe=a("strong"),W3r=o("convbert"),Q3r=o(" \u2014 "),AU=a("a"),H3r=o("TFConvBertModel"),U3r=o(" (ConvBERT model)"),J3r=l(),k8=a("li"),FTe=a("strong"),Y3r=o("convnext"),K3r=o(" \u2014 "),LU=a("a"),Z3r=o("TFConvNextModel"),eFr=o(" (ConvNeXT model)"),oFr=l(),S8=a("li"),TTe=a("strong"),rFr=o("ctrl"),tFr=o(" \u2014 "),yU=a("a"),aFr=o("TFCTRLModel"),nFr=o(" (CTRL model)"),sFr=l(),R8=a("li"),MTe=a("strong"),lFr=o("data2vec-vision"),iFr=o(" \u2014 "),xU=a("a"),dFr=o("TFData2VecVisionModel"),cFr=o(" (Data2VecVision model)"),fFr=l(),P8=a("li"),ETe=a("strong"),mFr=o("deberta"),gFr=o(" \u2014 "),$U=a("a"),hFr=o("TFDebertaModel"),pFr=o(" (DeBERTa model)"),_Fr=l(),B8=a("li"),CTe=a("strong"),uFr=o("deberta-v2"),bFr=o(" \u2014 "),kU=a("a"),vFr=o("TFDebertaV2Model"),FFr=o(" (DeBERTa-v2 model)"),TFr=l(),I8=a("li"),wTe=a("strong"),MFr=o("distilbert"),EFr=o(" \u2014 "),SU=a("a"),CFr=o("TFDistilBertModel"),wFr=o(" (DistilBERT model)"),AFr=l(),N8=a("li"),ATe=a("strong"),LFr=o("dpr"),yFr=o(" \u2014 "),RU=a("a"),xFr=o("TFDPRQuestionEncoder"),$Fr=o(" (DPR model)"),kFr=l(),q8=a("li"),LTe=a("strong"),SFr=o("electra"),RFr=o(" \u2014 "),PU=a("a"),PFr=o("TFElectraModel"),BFr=o(" (ELECTRA model)"),IFr=l(),j8=a("li"),yTe=a("strong"),NFr=o("flaubert"),qFr=o(" \u2014 "),BU=a("a"),jFr=o("TFFlaubertModel"),DFr=o(" (FlauBERT model)"),GFr=l(),Ys=a("li"),xTe=a("strong"),OFr=o("funnel"),VFr=o(" \u2014 "),IU=a("a"),XFr=o("TFFunnelModel"),zFr=o(" or "),NU=a("a"),WFr=o("TFFunnelBaseModel"),QFr=o(" (Funnel Transformer model)"),HFr=l(),D8=a("li"),$Te=a("strong"),UFr=o("gpt2"),JFr=o(" \u2014 "),qU=a("a"),YFr=o("TFGPT2Model"),KFr=o(" (OpenAI GPT-2 model)"),ZFr=l(),G8=a("li"),kTe=a("strong"),eTr=o("gptj"),oTr=o(" \u2014 "),jU=a("a"),rTr=o("TFGPTJModel"),tTr=o(" (GPT-J model)"),aTr=l(),O8=a("li"),STe=a("strong"),nTr=o("hubert"),sTr=o(" \u2014 "),DU=a("a"),lTr=o("TFHubertModel"),iTr=o(" (Hubert model)"),dTr=l(),V8=a("li"),RTe=a("strong"),cTr=o("layoutlm"),fTr=o(" \u2014 "),GU=a("a"),mTr=o("TFLayoutLMModel"),gTr=o(" (LayoutLM model)"),hTr=l(),X8=a("li"),PTe=a("strong"),pTr=o("led"),_Tr=o(" \u2014 "),OU=a("a"),uTr=o("TFLEDModel"),bTr=o(" (LED model)"),vTr=l(),z8=a("li"),BTe=a("strong"),FTr=o("longformer"),TTr=o(" \u2014 "),VU=a("a"),MTr=o("TFLongformerModel"),ETr=o(" (Longformer model)"),CTr=l(),W8=a("li"),ITe=a("strong"),wTr=o("lxmert"),ATr=o(" \u2014 "),XU=a("a"),LTr=o("TFLxmertModel"),yTr=o(" (LXMERT model)"),xTr=l(),Q8=a("li"),NTe=a("strong"),$Tr=o("marian"),kTr=o(" \u2014 "),zU=a("a"),STr=o("TFMarianModel"),RTr=o(" (Marian model)"),PTr=l(),H8=a("li"),qTe=a("strong"),BTr=o("mbart"),ITr=o(" \u2014 "),WU=a("a"),NTr=o("TFMBartModel"),qTr=o(" (mBART model)"),jTr=l(),U8=a("li"),jTe=a("strong"),DTr=o("mobilebert"),GTr=o(" \u2014 "),QU=a("a"),OTr=o("TFMobileBertModel"),VTr=o(" (MobileBERT model)"),XTr=l(),J8=a("li"),DTe=a("strong"),zTr=o("mpnet"),WTr=o(" \u2014 "),HU=a("a"),QTr=o("TFMPNetModel"),HTr=o(" (MPNet model)"),UTr=l(),Y8=a("li"),GTe=a("strong"),JTr=o("mt5"),YTr=o(" \u2014 "),UU=a("a"),KTr=o("TFMT5Model"),ZTr=o(" (MT5 model)"),e7r=l(),K8=a("li"),OTe=a("strong"),o7r=o("openai-gpt"),r7r=o(" \u2014 "),JU=a("a"),t7r=o("TFOpenAIGPTModel"),a7r=o(" (OpenAI GPT model)"),n7r=l(),Z8=a("li"),VTe=a("strong"),s7r=o("opt"),l7r=o(" \u2014 "),YU=a("a"),i7r=o("TFOPTModel"),d7r=o(" (OPT model)"),c7r=l(),e9=a("li"),XTe=a("strong"),f7r=o("pegasus"),m7r=o(" \u2014 "),KU=a("a"),g7r=o("TFPegasusModel"),h7r=o(" (Pegasus model)"),p7r=l(),o9=a("li"),zTe=a("strong"),_7r=o("regnet"),u7r=o(" \u2014 "),ZU=a("a"),b7r=o("TFRegNetModel"),v7r=o(" (RegNet model)"),F7r=l(),r9=a("li"),WTe=a("strong"),T7r=o("rembert"),M7r=o(" \u2014 "),eJ=a("a"),E7r=o("TFRemBertModel"),C7r=o(" (RemBERT model)"),w7r=l(),t9=a("li"),QTe=a("strong"),A7r=o("resnet"),L7r=o(" \u2014 "),oJ=a("a"),y7r=o("TFResNetModel"),x7r=o(" (ResNet model)"),$7r=l(),a9=a("li"),HTe=a("strong"),k7r=o("roberta"),S7r=o(" \u2014 "),rJ=a("a"),R7r=o("TFRobertaModel"),P7r=o(" (RoBERTa model)"),B7r=l(),n9=a("li"),UTe=a("strong"),I7r=o("roformer"),N7r=o(" \u2014 "),tJ=a("a"),q7r=o("TFRoFormerModel"),j7r=o(" (RoFormer model)"),D7r=l(),s9=a("li"),JTe=a("strong"),G7r=o("speech_to_text"),O7r=o(" \u2014 "),aJ=a("a"),V7r=o("TFSpeech2TextModel"),X7r=o(" (Speech2Text model)"),z7r=l(),l9=a("li"),YTe=a("strong"),W7r=o("swin"),Q7r=o(" \u2014 "),nJ=a("a"),H7r=o("TFSwinModel"),U7r=o(" (Swin Transformer model)"),J7r=l(),i9=a("li"),KTe=a("strong"),Y7r=o("t5"),K7r=o(" \u2014 "),sJ=a("a"),Z7r=o("TFT5Model"),e8r=o(" (T5 model)"),o8r=l(),d9=a("li"),ZTe=a("strong"),r8r=o("tapas"),t8r=o(" \u2014 "),lJ=a("a"),a8r=o("TFTapasModel"),n8r=o(" (TAPAS model)"),s8r=l(),c9=a("li"),e7e=a("strong"),l8r=o("transfo-xl"),i8r=o(" \u2014 "),iJ=a("a"),d8r=o("TFTransfoXLModel"),c8r=o(" (Transformer-XL model)"),f8r=l(),f9=a("li"),o7e=a("strong"),m8r=o("vit"),g8r=o(" \u2014 "),dJ=a("a"),h8r=o("TFViTModel"),p8r=o(" (ViT model)"),_8r=l(),m9=a("li"),r7e=a("strong"),u8r=o("vit_mae"),b8r=o(" \u2014 "),cJ=a("a"),v8r=o("TFViTMAEModel"),F8r=o(" (ViTMAE model)"),T8r=l(),g9=a("li"),t7e=a("strong"),M8r=o("wav2vec2"),E8r=o(" \u2014 "),fJ=a("a"),C8r=o("TFWav2Vec2Model"),w8r=o(" (Wav2Vec2 model)"),A8r=l(),h9=a("li"),a7e=a("strong"),L8r=o("xlm"),y8r=o(" \u2014 "),mJ=a("a"),x8r=o("TFXLMModel"),$8r=o(" (XLM model)"),k8r=l(),p9=a("li"),n7e=a("strong"),S8r=o("xlm-roberta"),R8r=o(" \u2014 "),gJ=a("a"),P8r=o("TFXLMRobertaModel"),B8r=o(" (XLM-RoBERTa model)"),I8r=l(),_9=a("li"),s7e=a("strong"),N8r=o("xlnet"),q8r=o(" \u2014 "),hJ=a("a"),j8r=o("TFXLNetModel"),D8r=o(" (XLNet model)"),G8r=l(),F(u9.$$.fragment),bze=l(),dc=a("h2"),b9=a("a"),l7e=a("span"),F(Ky.$$.fragment),O8r=l(),i7e=a("span"),V8r=o("TFAutoModelForPreTraining"),vze=l(),or=a("div"),F(Zy.$$.fragment),X8r=l(),cc=a("p"),z8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pJ=a("a"),W8r=o("from_pretrained()"),Q8r=o(" class method or the "),_J=a("a"),H8r=o("from_config()"),U8r=o(` class
method.`),J8r=l(),ex=a("p"),Y8r=o("This class cannot be instantiated directly using "),d7e=a("code"),K8r=o("__init__()"),Z8r=o(" (throws an error)."),e9r=l(),Rt=a("div"),F(ox.$$.fragment),o9r=l(),c7e=a("p"),r9r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),t9r=l(),fc=a("p"),a9r=o(`Note:
Loading a model from its configuration file does `),f7e=a("strong"),n9r=o("not"),s9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uJ=a("a"),l9r=o("from_pretrained()"),i9r=o(" to load the model weights."),d9r=l(),F(v9.$$.fragment),c9r=l(),$r=a("div"),F(rx.$$.fragment),f9r=l(),m7e=a("p"),m9r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),g9r=l(),ln=a("p"),h9r=o("The model class to instantiate is selected based on the "),g7e=a("code"),p9r=o("model_type"),_9r=o(` property of the config object (either
passed as an argument or loaded from `),h7e=a("code"),u9r=o("pretrained_model_name_or_path"),b9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p7e=a("code"),v9r=o("pretrained_model_name_or_path"),F9r=o(":"),T9r=l(),se=a("ul"),F9=a("li"),_7e=a("strong"),M9r=o("albert"),E9r=o(" \u2014 "),bJ=a("a"),C9r=o("TFAlbertForPreTraining"),w9r=o(" (ALBERT model)"),A9r=l(),T9=a("li"),u7e=a("strong"),L9r=o("bart"),y9r=o(" \u2014 "),vJ=a("a"),x9r=o("TFBartForConditionalGeneration"),$9r=o(" (BART model)"),k9r=l(),M9=a("li"),b7e=a("strong"),S9r=o("bert"),R9r=o(" \u2014 "),FJ=a("a"),P9r=o("TFBertForPreTraining"),B9r=o(" (BERT model)"),I9r=l(),E9=a("li"),v7e=a("strong"),N9r=o("camembert"),q9r=o(" \u2014 "),TJ=a("a"),j9r=o("TFCamembertForMaskedLM"),D9r=o(" (CamemBERT model)"),G9r=l(),C9=a("li"),F7e=a("strong"),O9r=o("ctrl"),V9r=o(" \u2014 "),MJ=a("a"),X9r=o("TFCTRLLMHeadModel"),z9r=o(" (CTRL model)"),W9r=l(),w9=a("li"),T7e=a("strong"),Q9r=o("distilbert"),H9r=o(" \u2014 "),EJ=a("a"),U9r=o("TFDistilBertForMaskedLM"),J9r=o(" (DistilBERT model)"),Y9r=l(),A9=a("li"),M7e=a("strong"),K9r=o("electra"),Z9r=o(" \u2014 "),CJ=a("a"),eMr=o("TFElectraForPreTraining"),oMr=o(" (ELECTRA model)"),rMr=l(),L9=a("li"),E7e=a("strong"),tMr=o("flaubert"),aMr=o(" \u2014 "),wJ=a("a"),nMr=o("TFFlaubertWithLMHeadModel"),sMr=o(" (FlauBERT model)"),lMr=l(),y9=a("li"),C7e=a("strong"),iMr=o("funnel"),dMr=o(" \u2014 "),AJ=a("a"),cMr=o("TFFunnelForPreTraining"),fMr=o(" (Funnel Transformer model)"),mMr=l(),x9=a("li"),w7e=a("strong"),gMr=o("gpt2"),hMr=o(" \u2014 "),LJ=a("a"),pMr=o("TFGPT2LMHeadModel"),_Mr=o(" (OpenAI GPT-2 model)"),uMr=l(),$9=a("li"),A7e=a("strong"),bMr=o("layoutlm"),vMr=o(" \u2014 "),yJ=a("a"),FMr=o("TFLayoutLMForMaskedLM"),TMr=o(" (LayoutLM model)"),MMr=l(),k9=a("li"),L7e=a("strong"),EMr=o("lxmert"),CMr=o(" \u2014 "),xJ=a("a"),wMr=o("TFLxmertForPreTraining"),AMr=o(" (LXMERT model)"),LMr=l(),S9=a("li"),y7e=a("strong"),yMr=o("mobilebert"),xMr=o(" \u2014 "),$J=a("a"),$Mr=o("TFMobileBertForPreTraining"),kMr=o(" (MobileBERT model)"),SMr=l(),R9=a("li"),x7e=a("strong"),RMr=o("mpnet"),PMr=o(" \u2014 "),kJ=a("a"),BMr=o("TFMPNetForMaskedLM"),IMr=o(" (MPNet model)"),NMr=l(),P9=a("li"),$7e=a("strong"),qMr=o("openai-gpt"),jMr=o(" \u2014 "),SJ=a("a"),DMr=o("TFOpenAIGPTLMHeadModel"),GMr=o(" (OpenAI GPT model)"),OMr=l(),B9=a("li"),k7e=a("strong"),VMr=o("roberta"),XMr=o(" \u2014 "),RJ=a("a"),zMr=o("TFRobertaForMaskedLM"),WMr=o(" (RoBERTa model)"),QMr=l(),I9=a("li"),S7e=a("strong"),HMr=o("t5"),UMr=o(" \u2014 "),PJ=a("a"),JMr=o("TFT5ForConditionalGeneration"),YMr=o(" (T5 model)"),KMr=l(),N9=a("li"),R7e=a("strong"),ZMr=o("tapas"),e4r=o(" \u2014 "),BJ=a("a"),o4r=o("TFTapasForMaskedLM"),r4r=o(" (TAPAS model)"),t4r=l(),q9=a("li"),P7e=a("strong"),a4r=o("transfo-xl"),n4r=o(" \u2014 "),IJ=a("a"),s4r=o("TFTransfoXLLMHeadModel"),l4r=o(" (Transformer-XL model)"),i4r=l(),j9=a("li"),B7e=a("strong"),d4r=o("vit_mae"),c4r=o(" \u2014 "),NJ=a("a"),f4r=o("TFViTMAEForPreTraining"),m4r=o(" (ViTMAE model)"),g4r=l(),D9=a("li"),I7e=a("strong"),h4r=o("xlm"),p4r=o(" \u2014 "),qJ=a("a"),_4r=o("TFXLMWithLMHeadModel"),u4r=o(" (XLM model)"),b4r=l(),G9=a("li"),N7e=a("strong"),v4r=o("xlm-roberta"),F4r=o(" \u2014 "),jJ=a("a"),T4r=o("TFXLMRobertaForMaskedLM"),M4r=o(" (XLM-RoBERTa model)"),E4r=l(),O9=a("li"),q7e=a("strong"),C4r=o("xlnet"),w4r=o(" \u2014 "),DJ=a("a"),A4r=o("TFXLNetLMHeadModel"),L4r=o(" (XLNet model)"),y4r=l(),F(V9.$$.fragment),Fze=l(),mc=a("h2"),X9=a("a"),j7e=a("span"),F(tx.$$.fragment),x4r=l(),D7e=a("span"),$4r=o("TFAutoModelForCausalLM"),Tze=l(),rr=a("div"),F(ax.$$.fragment),k4r=l(),gc=a("p"),S4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),GJ=a("a"),R4r=o("from_pretrained()"),P4r=o(" class method or the "),OJ=a("a"),B4r=o("from_config()"),I4r=o(` class
method.`),N4r=l(),nx=a("p"),q4r=o("This class cannot be instantiated directly using "),G7e=a("code"),j4r=o("__init__()"),D4r=o(" (throws an error)."),G4r=l(),Pt=a("div"),F(sx.$$.fragment),O4r=l(),O7e=a("p"),V4r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),X4r=l(),hc=a("p"),z4r=o(`Note:
Loading a model from its configuration file does `),V7e=a("strong"),W4r=o("not"),Q4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=a("a"),H4r=o("from_pretrained()"),U4r=o(" to load the model weights."),J4r=l(),F(z9.$$.fragment),Y4r=l(),kr=a("div"),F(lx.$$.fragment),K4r=l(),X7e=a("p"),Z4r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),eEr=l(),dn=a("p"),oEr=o("The model class to instantiate is selected based on the "),z7e=a("code"),rEr=o("model_type"),tEr=o(` property of the config object (either
passed as an argument or loaded from `),W7e=a("code"),aEr=o("pretrained_model_name_or_path"),nEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q7e=a("code"),sEr=o("pretrained_model_name_or_path"),lEr=o(":"),iEr=l(),Me=a("ul"),W9=a("li"),H7e=a("strong"),dEr=o("bert"),cEr=o(" \u2014 "),XJ=a("a"),fEr=o("TFBertLMHeadModel"),mEr=o(" (BERT model)"),gEr=l(),Q9=a("li"),U7e=a("strong"),hEr=o("camembert"),pEr=o(" \u2014 "),zJ=a("a"),_Er=o("TFCamembertForCausalLM"),uEr=o(" (CamemBERT model)"),bEr=l(),H9=a("li"),J7e=a("strong"),vEr=o("ctrl"),FEr=o(" \u2014 "),WJ=a("a"),TEr=o("TFCTRLLMHeadModel"),MEr=o(" (CTRL model)"),EEr=l(),U9=a("li"),Y7e=a("strong"),CEr=o("gpt2"),wEr=o(" \u2014 "),QJ=a("a"),AEr=o("TFGPT2LMHeadModel"),LEr=o(" (OpenAI GPT-2 model)"),yEr=l(),J9=a("li"),K7e=a("strong"),xEr=o("gptj"),$Er=o(" \u2014 "),HJ=a("a"),kEr=o("TFGPTJForCausalLM"),SEr=o(" (GPT-J model)"),REr=l(),Y9=a("li"),Z7e=a("strong"),PEr=o("openai-gpt"),BEr=o(" \u2014 "),UJ=a("a"),IEr=o("TFOpenAIGPTLMHeadModel"),NEr=o(" (OpenAI GPT model)"),qEr=l(),K9=a("li"),e8e=a("strong"),jEr=o("opt"),DEr=o(" \u2014 "),JJ=a("a"),GEr=o("TFOPTForCausalLM"),OEr=o(" (OPT model)"),VEr=l(),Z9=a("li"),o8e=a("strong"),XEr=o("rembert"),zEr=o(" \u2014 "),YJ=a("a"),WEr=o("TFRemBertForCausalLM"),QEr=o(" (RemBERT model)"),HEr=l(),eM=a("li"),r8e=a("strong"),UEr=o("roberta"),JEr=o(" \u2014 "),KJ=a("a"),YEr=o("TFRobertaForCausalLM"),KEr=o(" (RoBERTa model)"),ZEr=l(),oM=a("li"),t8e=a("strong"),eCr=o("roformer"),oCr=o(" \u2014 "),ZJ=a("a"),rCr=o("TFRoFormerForCausalLM"),tCr=o(" (RoFormer model)"),aCr=l(),rM=a("li"),a8e=a("strong"),nCr=o("transfo-xl"),sCr=o(" \u2014 "),eY=a("a"),lCr=o("TFTransfoXLLMHeadModel"),iCr=o(" (Transformer-XL model)"),dCr=l(),tM=a("li"),n8e=a("strong"),cCr=o("xlm"),fCr=o(" \u2014 "),oY=a("a"),mCr=o("TFXLMWithLMHeadModel"),gCr=o(" (XLM model)"),hCr=l(),aM=a("li"),s8e=a("strong"),pCr=o("xlnet"),_Cr=o(" \u2014 "),rY=a("a"),uCr=o("TFXLNetLMHeadModel"),bCr=o(" (XLNet model)"),vCr=l(),F(nM.$$.fragment),Mze=l(),pc=a("h2"),sM=a("a"),l8e=a("span"),F(ix.$$.fragment),FCr=l(),i8e=a("span"),TCr=o("TFAutoModelForImageClassification"),Eze=l(),tr=a("div"),F(dx.$$.fragment),MCr=l(),_c=a("p"),ECr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),tY=a("a"),CCr=o("from_pretrained()"),wCr=o(" class method or the "),aY=a("a"),ACr=o("from_config()"),LCr=o(` class
method.`),yCr=l(),cx=a("p"),xCr=o("This class cannot be instantiated directly using "),d8e=a("code"),$Cr=o("__init__()"),kCr=o(" (throws an error)."),SCr=l(),Bt=a("div"),F(fx.$$.fragment),RCr=l(),c8e=a("p"),PCr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),BCr=l(),uc=a("p"),ICr=o(`Note:
Loading a model from its configuration file does `),f8e=a("strong"),NCr=o("not"),qCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nY=a("a"),jCr=o("from_pretrained()"),DCr=o(" to load the model weights."),GCr=l(),F(lM.$$.fragment),OCr=l(),Sr=a("div"),F(mx.$$.fragment),VCr=l(),m8e=a("p"),XCr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),zCr=l(),cn=a("p"),WCr=o("The model class to instantiate is selected based on the "),g8e=a("code"),QCr=o("model_type"),HCr=o(` property of the config object (either
passed as an argument or loaded from `),h8e=a("code"),UCr=o("pretrained_model_name_or_path"),JCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p8e=a("code"),YCr=o("pretrained_model_name_or_path"),KCr=o(":"),ZCr=l(),ar=a("ul"),iM=a("li"),_8e=a("strong"),e5r=o("convnext"),o5r=o(" \u2014 "),sY=a("a"),r5r=o("TFConvNextForImageClassification"),t5r=o(" (ConvNeXT model)"),a5r=l(),dM=a("li"),u8e=a("strong"),n5r=o("data2vec-vision"),s5r=o(" \u2014 "),lY=a("a"),l5r=o("TFData2VecVisionForImageClassification"),i5r=o(" (Data2VecVision model)"),d5r=l(),cM=a("li"),b8e=a("strong"),c5r=o("regnet"),f5r=o(" \u2014 "),iY=a("a"),m5r=o("TFRegNetForImageClassification"),g5r=o(" (RegNet model)"),h5r=l(),fM=a("li"),v8e=a("strong"),p5r=o("resnet"),_5r=o(" \u2014 "),dY=a("a"),u5r=o("TFResNetForImageClassification"),b5r=o(" (ResNet model)"),v5r=l(),mM=a("li"),F8e=a("strong"),F5r=o("swin"),T5r=o(" \u2014 "),cY=a("a"),M5r=o("TFSwinForImageClassification"),E5r=o(" (Swin Transformer model)"),C5r=l(),gM=a("li"),T8e=a("strong"),w5r=o("vit"),A5r=o(" \u2014 "),fY=a("a"),L5r=o("TFViTForImageClassification"),y5r=o(" (ViT model)"),x5r=l(),F(hM.$$.fragment),Cze=l(),bc=a("h2"),pM=a("a"),M8e=a("span"),F(gx.$$.fragment),$5r=l(),E8e=a("span"),k5r=o("TFAutoModelForMaskedLM"),wze=l(),nr=a("div"),F(hx.$$.fragment),S5r=l(),vc=a("p"),R5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mY=a("a"),P5r=o("from_pretrained()"),B5r=o(" class method or the "),gY=a("a"),I5r=o("from_config()"),N5r=o(` class
method.`),q5r=l(),px=a("p"),j5r=o("This class cannot be instantiated directly using "),C8e=a("code"),D5r=o("__init__()"),G5r=o(" (throws an error)."),O5r=l(),It=a("div"),F(_x.$$.fragment),V5r=l(),w8e=a("p"),X5r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),z5r=l(),Fc=a("p"),W5r=o(`Note:
Loading a model from its configuration file does `),A8e=a("strong"),Q5r=o("not"),H5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hY=a("a"),U5r=o("from_pretrained()"),J5r=o(" to load the model weights."),Y5r=l(),F(_M.$$.fragment),K5r=l(),Rr=a("div"),F(ux.$$.fragment),Z5r=l(),L8e=a("p"),e0r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),o0r=l(),fn=a("p"),r0r=o("The model class to instantiate is selected based on the "),y8e=a("code"),t0r=o("model_type"),a0r=o(` property of the config object (either
passed as an argument or loaded from `),x8e=a("code"),n0r=o("pretrained_model_name_or_path"),s0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$8e=a("code"),l0r=o("pretrained_model_name_or_path"),i0r=o(":"),d0r=l(),ie=a("ul"),uM=a("li"),k8e=a("strong"),c0r=o("albert"),f0r=o(" \u2014 "),pY=a("a"),m0r=o("TFAlbertForMaskedLM"),g0r=o(" (ALBERT model)"),h0r=l(),bM=a("li"),S8e=a("strong"),p0r=o("bert"),_0r=o(" \u2014 "),_Y=a("a"),u0r=o("TFBertForMaskedLM"),b0r=o(" (BERT model)"),v0r=l(),vM=a("li"),R8e=a("strong"),F0r=o("camembert"),T0r=o(" \u2014 "),uY=a("a"),M0r=o("TFCamembertForMaskedLM"),E0r=o(" (CamemBERT model)"),C0r=l(),FM=a("li"),P8e=a("strong"),w0r=o("convbert"),A0r=o(" \u2014 "),bY=a("a"),L0r=o("TFConvBertForMaskedLM"),y0r=o(" (ConvBERT model)"),x0r=l(),TM=a("li"),B8e=a("strong"),$0r=o("deberta"),k0r=o(" \u2014 "),vY=a("a"),S0r=o("TFDebertaForMaskedLM"),R0r=o(" (DeBERTa model)"),P0r=l(),MM=a("li"),I8e=a("strong"),B0r=o("deberta-v2"),I0r=o(" \u2014 "),FY=a("a"),N0r=o("TFDebertaV2ForMaskedLM"),q0r=o(" (DeBERTa-v2 model)"),j0r=l(),EM=a("li"),N8e=a("strong"),D0r=o("distilbert"),G0r=o(" \u2014 "),TY=a("a"),O0r=o("TFDistilBertForMaskedLM"),V0r=o(" (DistilBERT model)"),X0r=l(),CM=a("li"),q8e=a("strong"),z0r=o("electra"),W0r=o(" \u2014 "),MY=a("a"),Q0r=o("TFElectraForMaskedLM"),H0r=o(" (ELECTRA model)"),U0r=l(),wM=a("li"),j8e=a("strong"),J0r=o("flaubert"),Y0r=o(" \u2014 "),EY=a("a"),K0r=o("TFFlaubertWithLMHeadModel"),Z0r=o(" (FlauBERT model)"),ewr=l(),AM=a("li"),D8e=a("strong"),owr=o("funnel"),rwr=o(" \u2014 "),CY=a("a"),twr=o("TFFunnelForMaskedLM"),awr=o(" (Funnel Transformer model)"),nwr=l(),LM=a("li"),G8e=a("strong"),swr=o("layoutlm"),lwr=o(" \u2014 "),wY=a("a"),iwr=o("TFLayoutLMForMaskedLM"),dwr=o(" (LayoutLM model)"),cwr=l(),yM=a("li"),O8e=a("strong"),fwr=o("longformer"),mwr=o(" \u2014 "),AY=a("a"),gwr=o("TFLongformerForMaskedLM"),hwr=o(" (Longformer model)"),pwr=l(),xM=a("li"),V8e=a("strong"),_wr=o("mobilebert"),uwr=o(" \u2014 "),LY=a("a"),bwr=o("TFMobileBertForMaskedLM"),vwr=o(" (MobileBERT model)"),Fwr=l(),$M=a("li"),X8e=a("strong"),Twr=o("mpnet"),Mwr=o(" \u2014 "),yY=a("a"),Ewr=o("TFMPNetForMaskedLM"),Cwr=o(" (MPNet model)"),wwr=l(),kM=a("li"),z8e=a("strong"),Awr=o("rembert"),Lwr=o(" \u2014 "),xY=a("a"),ywr=o("TFRemBertForMaskedLM"),xwr=o(" (RemBERT model)"),$wr=l(),SM=a("li"),W8e=a("strong"),kwr=o("roberta"),Swr=o(" \u2014 "),$Y=a("a"),Rwr=o("TFRobertaForMaskedLM"),Pwr=o(" (RoBERTa model)"),Bwr=l(),RM=a("li"),Q8e=a("strong"),Iwr=o("roformer"),Nwr=o(" \u2014 "),kY=a("a"),qwr=o("TFRoFormerForMaskedLM"),jwr=o(" (RoFormer model)"),Dwr=l(),PM=a("li"),H8e=a("strong"),Gwr=o("tapas"),Owr=o(" \u2014 "),SY=a("a"),Vwr=o("TFTapasForMaskedLM"),Xwr=o(" (TAPAS model)"),zwr=l(),BM=a("li"),U8e=a("strong"),Wwr=o("xlm"),Qwr=o(" \u2014 "),RY=a("a"),Hwr=o("TFXLMWithLMHeadModel"),Uwr=o(" (XLM model)"),Jwr=l(),IM=a("li"),J8e=a("strong"),Ywr=o("xlm-roberta"),Kwr=o(" \u2014 "),PY=a("a"),Zwr=o("TFXLMRobertaForMaskedLM"),eAr=o(" (XLM-RoBERTa model)"),oAr=l(),F(NM.$$.fragment),Aze=l(),Tc=a("h2"),qM=a("a"),Y8e=a("span"),F(bx.$$.fragment),rAr=l(),K8e=a("span"),tAr=o("TFAutoModelForSeq2SeqLM"),Lze=l(),sr=a("div"),F(vx.$$.fragment),aAr=l(),Mc=a("p"),nAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),BY=a("a"),sAr=o("from_pretrained()"),lAr=o(" class method or the "),IY=a("a"),iAr=o("from_config()"),dAr=o(` class
method.`),cAr=l(),Fx=a("p"),fAr=o("This class cannot be instantiated directly using "),Z8e=a("code"),mAr=o("__init__()"),gAr=o(" (throws an error)."),hAr=l(),Nt=a("div"),F(Tx.$$.fragment),pAr=l(),e9e=a("p"),_Ar=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),uAr=l(),Ec=a("p"),bAr=o(`Note:
Loading a model from its configuration file does `),o9e=a("strong"),vAr=o("not"),FAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NY=a("a"),TAr=o("from_pretrained()"),MAr=o(" to load the model weights."),EAr=l(),F(jM.$$.fragment),CAr=l(),Pr=a("div"),F(Mx.$$.fragment),wAr=l(),r9e=a("p"),AAr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),LAr=l(),mn=a("p"),yAr=o("The model class to instantiate is selected based on the "),t9e=a("code"),xAr=o("model_type"),$Ar=o(` property of the config object (either
passed as an argument or loaded from `),a9e=a("code"),kAr=o("pretrained_model_name_or_path"),SAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n9e=a("code"),RAr=o("pretrained_model_name_or_path"),PAr=o(":"),BAr=l(),ye=a("ul"),DM=a("li"),s9e=a("strong"),IAr=o("bart"),NAr=o(" \u2014 "),qY=a("a"),qAr=o("TFBartForConditionalGeneration"),jAr=o(" (BART model)"),DAr=l(),GM=a("li"),l9e=a("strong"),GAr=o("blenderbot"),OAr=o(" \u2014 "),jY=a("a"),VAr=o("TFBlenderbotForConditionalGeneration"),XAr=o(" (Blenderbot model)"),zAr=l(),OM=a("li"),i9e=a("strong"),WAr=o("blenderbot-small"),QAr=o(" \u2014 "),DY=a("a"),HAr=o("TFBlenderbotSmallForConditionalGeneration"),UAr=o(" (BlenderbotSmall model)"),JAr=l(),VM=a("li"),d9e=a("strong"),YAr=o("encoder-decoder"),KAr=o(" \u2014 "),GY=a("a"),ZAr=o("TFEncoderDecoderModel"),e6r=o(" (Encoder decoder model)"),o6r=l(),XM=a("li"),c9e=a("strong"),r6r=o("led"),t6r=o(" \u2014 "),OY=a("a"),a6r=o("TFLEDForConditionalGeneration"),n6r=o(" (LED model)"),s6r=l(),zM=a("li"),f9e=a("strong"),l6r=o("marian"),i6r=o(" \u2014 "),VY=a("a"),d6r=o("TFMarianMTModel"),c6r=o(" (Marian model)"),f6r=l(),WM=a("li"),m9e=a("strong"),m6r=o("mbart"),g6r=o(" \u2014 "),XY=a("a"),h6r=o("TFMBartForConditionalGeneration"),p6r=o(" (mBART model)"),_6r=l(),QM=a("li"),g9e=a("strong"),u6r=o("mt5"),b6r=o(" \u2014 "),zY=a("a"),v6r=o("TFMT5ForConditionalGeneration"),F6r=o(" (MT5 model)"),T6r=l(),HM=a("li"),h9e=a("strong"),M6r=o("pegasus"),E6r=o(" \u2014 "),WY=a("a"),C6r=o("TFPegasusForConditionalGeneration"),w6r=o(" (Pegasus model)"),A6r=l(),UM=a("li"),p9e=a("strong"),L6r=o("t5"),y6r=o(" \u2014 "),QY=a("a"),x6r=o("TFT5ForConditionalGeneration"),$6r=o(" (T5 model)"),k6r=l(),F(JM.$$.fragment),yze=l(),Cc=a("h2"),YM=a("a"),_9e=a("span"),F(Ex.$$.fragment),S6r=l(),u9e=a("span"),R6r=o("TFAutoModelForSequenceClassification"),xze=l(),lr=a("div"),F(Cx.$$.fragment),P6r=l(),wc=a("p"),B6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),HY=a("a"),I6r=o("from_pretrained()"),N6r=o(" class method or the "),UY=a("a"),q6r=o("from_config()"),j6r=o(` class
method.`),D6r=l(),wx=a("p"),G6r=o("This class cannot be instantiated directly using "),b9e=a("code"),O6r=o("__init__()"),V6r=o(" (throws an error)."),X6r=l(),qt=a("div"),F(Ax.$$.fragment),z6r=l(),v9e=a("p"),W6r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Q6r=l(),Ac=a("p"),H6r=o(`Note:
Loading a model from its configuration file does `),F9e=a("strong"),U6r=o("not"),J6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JY=a("a"),Y6r=o("from_pretrained()"),K6r=o(" to load the model weights."),Z6r=l(),F(KM.$$.fragment),eLr=l(),Br=a("div"),F(Lx.$$.fragment),oLr=l(),T9e=a("p"),rLr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),tLr=l(),gn=a("p"),aLr=o("The model class to instantiate is selected based on the "),M9e=a("code"),nLr=o("model_type"),sLr=o(` property of the config object (either
passed as an argument or loaded from `),E9e=a("code"),lLr=o("pretrained_model_name_or_path"),iLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C9e=a("code"),dLr=o("pretrained_model_name_or_path"),cLr=o(":"),fLr=l(),te=a("ul"),ZM=a("li"),w9e=a("strong"),mLr=o("albert"),gLr=o(" \u2014 "),YY=a("a"),hLr=o("TFAlbertForSequenceClassification"),pLr=o(" (ALBERT model)"),_Lr=l(),e4=a("li"),A9e=a("strong"),uLr=o("bert"),bLr=o(" \u2014 "),KY=a("a"),vLr=o("TFBertForSequenceClassification"),FLr=o(" (BERT model)"),TLr=l(),o4=a("li"),L9e=a("strong"),MLr=o("camembert"),ELr=o(" \u2014 "),ZY=a("a"),CLr=o("TFCamembertForSequenceClassification"),wLr=o(" (CamemBERT model)"),ALr=l(),r4=a("li"),y9e=a("strong"),LLr=o("convbert"),yLr=o(" \u2014 "),eK=a("a"),xLr=o("TFConvBertForSequenceClassification"),$Lr=o(" (ConvBERT model)"),kLr=l(),t4=a("li"),x9e=a("strong"),SLr=o("ctrl"),RLr=o(" \u2014 "),oK=a("a"),PLr=o("TFCTRLForSequenceClassification"),BLr=o(" (CTRL model)"),ILr=l(),a4=a("li"),$9e=a("strong"),NLr=o("deberta"),qLr=o(" \u2014 "),rK=a("a"),jLr=o("TFDebertaForSequenceClassification"),DLr=o(" (DeBERTa model)"),GLr=l(),n4=a("li"),k9e=a("strong"),OLr=o("deberta-v2"),VLr=o(" \u2014 "),tK=a("a"),XLr=o("TFDebertaV2ForSequenceClassification"),zLr=o(" (DeBERTa-v2 model)"),WLr=l(),s4=a("li"),S9e=a("strong"),QLr=o("distilbert"),HLr=o(" \u2014 "),aK=a("a"),ULr=o("TFDistilBertForSequenceClassification"),JLr=o(" (DistilBERT model)"),YLr=l(),l4=a("li"),R9e=a("strong"),KLr=o("electra"),ZLr=o(" \u2014 "),nK=a("a"),eyr=o("TFElectraForSequenceClassification"),oyr=o(" (ELECTRA model)"),ryr=l(),i4=a("li"),P9e=a("strong"),tyr=o("flaubert"),ayr=o(" \u2014 "),sK=a("a"),nyr=o("TFFlaubertForSequenceClassification"),syr=o(" (FlauBERT model)"),lyr=l(),d4=a("li"),B9e=a("strong"),iyr=o("funnel"),dyr=o(" \u2014 "),lK=a("a"),cyr=o("TFFunnelForSequenceClassification"),fyr=o(" (Funnel Transformer model)"),myr=l(),c4=a("li"),I9e=a("strong"),gyr=o("gpt2"),hyr=o(" \u2014 "),iK=a("a"),pyr=o("TFGPT2ForSequenceClassification"),_yr=o(" (OpenAI GPT-2 model)"),uyr=l(),f4=a("li"),N9e=a("strong"),byr=o("gptj"),vyr=o(" \u2014 "),dK=a("a"),Fyr=o("TFGPTJForSequenceClassification"),Tyr=o(" (GPT-J model)"),Myr=l(),m4=a("li"),q9e=a("strong"),Eyr=o("layoutlm"),Cyr=o(" \u2014 "),cK=a("a"),wyr=o("TFLayoutLMForSequenceClassification"),Ayr=o(" (LayoutLM model)"),Lyr=l(),g4=a("li"),j9e=a("strong"),yyr=o("longformer"),xyr=o(" \u2014 "),fK=a("a"),$yr=o("TFLongformerForSequenceClassification"),kyr=o(" (Longformer model)"),Syr=l(),h4=a("li"),D9e=a("strong"),Ryr=o("mobilebert"),Pyr=o(" \u2014 "),mK=a("a"),Byr=o("TFMobileBertForSequenceClassification"),Iyr=o(" (MobileBERT model)"),Nyr=l(),p4=a("li"),G9e=a("strong"),qyr=o("mpnet"),jyr=o(" \u2014 "),gK=a("a"),Dyr=o("TFMPNetForSequenceClassification"),Gyr=o(" (MPNet model)"),Oyr=l(),_4=a("li"),O9e=a("strong"),Vyr=o("openai-gpt"),Xyr=o(" \u2014 "),hK=a("a"),zyr=o("TFOpenAIGPTForSequenceClassification"),Wyr=o(" (OpenAI GPT model)"),Qyr=l(),u4=a("li"),V9e=a("strong"),Hyr=o("rembert"),Uyr=o(" \u2014 "),pK=a("a"),Jyr=o("TFRemBertForSequenceClassification"),Yyr=o(" (RemBERT model)"),Kyr=l(),b4=a("li"),X9e=a("strong"),Zyr=o("roberta"),exr=o(" \u2014 "),_K=a("a"),oxr=o("TFRobertaForSequenceClassification"),rxr=o(" (RoBERTa model)"),txr=l(),v4=a("li"),z9e=a("strong"),axr=o("roformer"),nxr=o(" \u2014 "),uK=a("a"),sxr=o("TFRoFormerForSequenceClassification"),lxr=o(" (RoFormer model)"),ixr=l(),F4=a("li"),W9e=a("strong"),dxr=o("tapas"),cxr=o(" \u2014 "),bK=a("a"),fxr=o("TFTapasForSequenceClassification"),mxr=o(" (TAPAS model)"),gxr=l(),T4=a("li"),Q9e=a("strong"),hxr=o("transfo-xl"),pxr=o(" \u2014 "),vK=a("a"),_xr=o("TFTransfoXLForSequenceClassification"),uxr=o(" (Transformer-XL model)"),bxr=l(),M4=a("li"),H9e=a("strong"),vxr=o("xlm"),Fxr=o(" \u2014 "),FK=a("a"),Txr=o("TFXLMForSequenceClassification"),Mxr=o(" (XLM model)"),Exr=l(),E4=a("li"),U9e=a("strong"),Cxr=o("xlm-roberta"),wxr=o(" \u2014 "),TK=a("a"),Axr=o("TFXLMRobertaForSequenceClassification"),Lxr=o(" (XLM-RoBERTa model)"),yxr=l(),C4=a("li"),J9e=a("strong"),xxr=o("xlnet"),$xr=o(" \u2014 "),MK=a("a"),kxr=o("TFXLNetForSequenceClassification"),Sxr=o(" (XLNet model)"),Rxr=l(),F(w4.$$.fragment),$ze=l(),Lc=a("h2"),A4=a("a"),Y9e=a("span"),F(yx.$$.fragment),Pxr=l(),K9e=a("span"),Bxr=o("TFAutoModelForMultipleChoice"),kze=l(),ir=a("div"),F(xx.$$.fragment),Ixr=l(),yc=a("p"),Nxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),EK=a("a"),qxr=o("from_pretrained()"),jxr=o(" class method or the "),CK=a("a"),Dxr=o("from_config()"),Gxr=o(` class
method.`),Oxr=l(),$x=a("p"),Vxr=o("This class cannot be instantiated directly using "),Z9e=a("code"),Xxr=o("__init__()"),zxr=o(" (throws an error)."),Wxr=l(),jt=a("div"),F(kx.$$.fragment),Qxr=l(),eMe=a("p"),Hxr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Uxr=l(),xc=a("p"),Jxr=o(`Note:
Loading a model from its configuration file does `),oMe=a("strong"),Yxr=o("not"),Kxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wK=a("a"),Zxr=o("from_pretrained()"),e$r=o(" to load the model weights."),o$r=l(),F(L4.$$.fragment),r$r=l(),Ir=a("div"),F(Sx.$$.fragment),t$r=l(),rMe=a("p"),a$r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),n$r=l(),hn=a("p"),s$r=o("The model class to instantiate is selected based on the "),tMe=a("code"),l$r=o("model_type"),i$r=o(` property of the config object (either
passed as an argument or loaded from `),aMe=a("code"),d$r=o("pretrained_model_name_or_path"),c$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nMe=a("code"),f$r=o("pretrained_model_name_or_path"),m$r=o(":"),g$r=l(),ue=a("ul"),y4=a("li"),sMe=a("strong"),h$r=o("albert"),p$r=o(" \u2014 "),AK=a("a"),_$r=o("TFAlbertForMultipleChoice"),u$r=o(" (ALBERT model)"),b$r=l(),x4=a("li"),lMe=a("strong"),v$r=o("bert"),F$r=o(" \u2014 "),LK=a("a"),T$r=o("TFBertForMultipleChoice"),M$r=o(" (BERT model)"),E$r=l(),$4=a("li"),iMe=a("strong"),C$r=o("camembert"),w$r=o(" \u2014 "),yK=a("a"),A$r=o("TFCamembertForMultipleChoice"),L$r=o(" (CamemBERT model)"),y$r=l(),k4=a("li"),dMe=a("strong"),x$r=o("convbert"),$$r=o(" \u2014 "),xK=a("a"),k$r=o("TFConvBertForMultipleChoice"),S$r=o(" (ConvBERT model)"),R$r=l(),S4=a("li"),cMe=a("strong"),P$r=o("distilbert"),B$r=o(" \u2014 "),$K=a("a"),I$r=o("TFDistilBertForMultipleChoice"),N$r=o(" (DistilBERT model)"),q$r=l(),R4=a("li"),fMe=a("strong"),j$r=o("electra"),D$r=o(" \u2014 "),kK=a("a"),G$r=o("TFElectraForMultipleChoice"),O$r=o(" (ELECTRA model)"),V$r=l(),P4=a("li"),mMe=a("strong"),X$r=o("flaubert"),z$r=o(" \u2014 "),SK=a("a"),W$r=o("TFFlaubertForMultipleChoice"),Q$r=o(" (FlauBERT model)"),H$r=l(),B4=a("li"),gMe=a("strong"),U$r=o("funnel"),J$r=o(" \u2014 "),RK=a("a"),Y$r=o("TFFunnelForMultipleChoice"),K$r=o(" (Funnel Transformer model)"),Z$r=l(),I4=a("li"),hMe=a("strong"),ekr=o("longformer"),okr=o(" \u2014 "),PK=a("a"),rkr=o("TFLongformerForMultipleChoice"),tkr=o(" (Longformer model)"),akr=l(),N4=a("li"),pMe=a("strong"),nkr=o("mobilebert"),skr=o(" \u2014 "),BK=a("a"),lkr=o("TFMobileBertForMultipleChoice"),ikr=o(" (MobileBERT model)"),dkr=l(),q4=a("li"),_Me=a("strong"),ckr=o("mpnet"),fkr=o(" \u2014 "),IK=a("a"),mkr=o("TFMPNetForMultipleChoice"),gkr=o(" (MPNet model)"),hkr=l(),j4=a("li"),uMe=a("strong"),pkr=o("rembert"),_kr=o(" \u2014 "),NK=a("a"),ukr=o("TFRemBertForMultipleChoice"),bkr=o(" (RemBERT model)"),vkr=l(),D4=a("li"),bMe=a("strong"),Fkr=o("roberta"),Tkr=o(" \u2014 "),qK=a("a"),Mkr=o("TFRobertaForMultipleChoice"),Ekr=o(" (RoBERTa model)"),Ckr=l(),G4=a("li"),vMe=a("strong"),wkr=o("roformer"),Akr=o(" \u2014 "),jK=a("a"),Lkr=o("TFRoFormerForMultipleChoice"),ykr=o(" (RoFormer model)"),xkr=l(),O4=a("li"),FMe=a("strong"),$kr=o("xlm"),kkr=o(" \u2014 "),DK=a("a"),Skr=o("TFXLMForMultipleChoice"),Rkr=o(" (XLM model)"),Pkr=l(),V4=a("li"),TMe=a("strong"),Bkr=o("xlm-roberta"),Ikr=o(" \u2014 "),GK=a("a"),Nkr=o("TFXLMRobertaForMultipleChoice"),qkr=o(" (XLM-RoBERTa model)"),jkr=l(),X4=a("li"),MMe=a("strong"),Dkr=o("xlnet"),Gkr=o(" \u2014 "),OK=a("a"),Okr=o("TFXLNetForMultipleChoice"),Vkr=o(" (XLNet model)"),Xkr=l(),F(z4.$$.fragment),Sze=l(),$c=a("h2"),W4=a("a"),EMe=a("span"),F(Rx.$$.fragment),zkr=l(),CMe=a("span"),Wkr=o("TFAutoModelForNextSentencePrediction"),Rze=l(),dr=a("div"),F(Px.$$.fragment),Qkr=l(),kc=a("p"),Hkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),VK=a("a"),Ukr=o("from_pretrained()"),Jkr=o(" class method or the "),XK=a("a"),Ykr=o("from_config()"),Kkr=o(` class
method.`),Zkr=l(),Bx=a("p"),eSr=o("This class cannot be instantiated directly using "),wMe=a("code"),oSr=o("__init__()"),rSr=o(" (throws an error)."),tSr=l(),Dt=a("div"),F(Ix.$$.fragment),aSr=l(),AMe=a("p"),nSr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),sSr=l(),Sc=a("p"),lSr=o(`Note:
Loading a model from its configuration file does `),LMe=a("strong"),iSr=o("not"),dSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zK=a("a"),cSr=o("from_pretrained()"),fSr=o(" to load the model weights."),mSr=l(),F(Q4.$$.fragment),gSr=l(),Nr=a("div"),F(Nx.$$.fragment),hSr=l(),yMe=a("p"),pSr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),_Sr=l(),pn=a("p"),uSr=o("The model class to instantiate is selected based on the "),xMe=a("code"),bSr=o("model_type"),vSr=o(` property of the config object (either
passed as an argument or loaded from `),$Me=a("code"),FSr=o("pretrained_model_name_or_path"),TSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kMe=a("code"),MSr=o("pretrained_model_name_or_path"),ESr=o(":"),CSr=l(),qx=a("ul"),H4=a("li"),SMe=a("strong"),wSr=o("bert"),ASr=o(" \u2014 "),WK=a("a"),LSr=o("TFBertForNextSentencePrediction"),ySr=o(" (BERT model)"),xSr=l(),U4=a("li"),RMe=a("strong"),$Sr=o("mobilebert"),kSr=o(" \u2014 "),QK=a("a"),SSr=o("TFMobileBertForNextSentencePrediction"),RSr=o(" (MobileBERT model)"),PSr=l(),F(J4.$$.fragment),Pze=l(),Rc=a("h2"),Y4=a("a"),PMe=a("span"),F(jx.$$.fragment),BSr=l(),BMe=a("span"),ISr=o("TFAutoModelForTableQuestionAnswering"),Bze=l(),cr=a("div"),F(Dx.$$.fragment),NSr=l(),Pc=a("p"),qSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),HK=a("a"),jSr=o("from_pretrained()"),DSr=o(" class method or the "),UK=a("a"),GSr=o("from_config()"),OSr=o(` class
method.`),VSr=l(),Gx=a("p"),XSr=o("This class cannot be instantiated directly using "),IMe=a("code"),zSr=o("__init__()"),WSr=o(" (throws an error)."),QSr=l(),Gt=a("div"),F(Ox.$$.fragment),HSr=l(),NMe=a("p"),USr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),JSr=l(),Bc=a("p"),YSr=o(`Note:
Loading a model from its configuration file does `),qMe=a("strong"),KSr=o("not"),ZSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JK=a("a"),eRr=o("from_pretrained()"),oRr=o(" to load the model weights."),rRr=l(),F(K4.$$.fragment),tRr=l(),qr=a("div"),F(Vx.$$.fragment),aRr=l(),jMe=a("p"),nRr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),sRr=l(),_n=a("p"),lRr=o("The model class to instantiate is selected based on the "),DMe=a("code"),iRr=o("model_type"),dRr=o(` property of the config object (either
passed as an argument or loaded from `),GMe=a("code"),cRr=o("pretrained_model_name_or_path"),fRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OMe=a("code"),mRr=o("pretrained_model_name_or_path"),gRr=o(":"),hRr=l(),VMe=a("ul"),Z4=a("li"),XMe=a("strong"),pRr=o("tapas"),_Rr=o(" \u2014 "),YK=a("a"),uRr=o("TFTapasForQuestionAnswering"),bRr=o(" (TAPAS model)"),vRr=l(),F(eE.$$.fragment),Ize=l(),Ic=a("h2"),oE=a("a"),zMe=a("span"),F(Xx.$$.fragment),FRr=l(),WMe=a("span"),TRr=o("TFAutoModelForTokenClassification"),Nze=l(),fr=a("div"),F(zx.$$.fragment),MRr=l(),Nc=a("p"),ERr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),KK=a("a"),CRr=o("from_pretrained()"),wRr=o(" class method or the "),ZK=a("a"),ARr=o("from_config()"),LRr=o(` class
method.`),yRr=l(),Wx=a("p"),xRr=o("This class cannot be instantiated directly using "),QMe=a("code"),$Rr=o("__init__()"),kRr=o(" (throws an error)."),SRr=l(),Ot=a("div"),F(Qx.$$.fragment),RRr=l(),HMe=a("p"),PRr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),BRr=l(),qc=a("p"),IRr=o(`Note:
Loading a model from its configuration file does `),UMe=a("strong"),NRr=o("not"),qRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=a("a"),jRr=o("from_pretrained()"),DRr=o(" to load the model weights."),GRr=l(),F(rE.$$.fragment),ORr=l(),jr=a("div"),F(Hx.$$.fragment),VRr=l(),JMe=a("p"),XRr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),zRr=l(),un=a("p"),WRr=o("The model class to instantiate is selected based on the "),YMe=a("code"),QRr=o("model_type"),HRr=o(` property of the config object (either
passed as an argument or loaded from `),KMe=a("code"),URr=o("pretrained_model_name_or_path"),JRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZMe=a("code"),YRr=o("pretrained_model_name_or_path"),KRr=o(":"),ZRr=l(),de=a("ul"),tE=a("li"),e4e=a("strong"),ePr=o("albert"),oPr=o(" \u2014 "),oZ=a("a"),rPr=o("TFAlbertForTokenClassification"),tPr=o(" (ALBERT model)"),aPr=l(),aE=a("li"),o4e=a("strong"),nPr=o("bert"),sPr=o(" \u2014 "),rZ=a("a"),lPr=o("TFBertForTokenClassification"),iPr=o(" (BERT model)"),dPr=l(),nE=a("li"),r4e=a("strong"),cPr=o("camembert"),fPr=o(" \u2014 "),tZ=a("a"),mPr=o("TFCamembertForTokenClassification"),gPr=o(" (CamemBERT model)"),hPr=l(),sE=a("li"),t4e=a("strong"),pPr=o("convbert"),_Pr=o(" \u2014 "),aZ=a("a"),uPr=o("TFConvBertForTokenClassification"),bPr=o(" (ConvBERT model)"),vPr=l(),lE=a("li"),a4e=a("strong"),FPr=o("deberta"),TPr=o(" \u2014 "),nZ=a("a"),MPr=o("TFDebertaForTokenClassification"),EPr=o(" (DeBERTa model)"),CPr=l(),iE=a("li"),n4e=a("strong"),wPr=o("deberta-v2"),APr=o(" \u2014 "),sZ=a("a"),LPr=o("TFDebertaV2ForTokenClassification"),yPr=o(" (DeBERTa-v2 model)"),xPr=l(),dE=a("li"),s4e=a("strong"),$Pr=o("distilbert"),kPr=o(" \u2014 "),lZ=a("a"),SPr=o("TFDistilBertForTokenClassification"),RPr=o(" (DistilBERT model)"),PPr=l(),cE=a("li"),l4e=a("strong"),BPr=o("electra"),IPr=o(" \u2014 "),iZ=a("a"),NPr=o("TFElectraForTokenClassification"),qPr=o(" (ELECTRA model)"),jPr=l(),fE=a("li"),i4e=a("strong"),DPr=o("flaubert"),GPr=o(" \u2014 "),dZ=a("a"),OPr=o("TFFlaubertForTokenClassification"),VPr=o(" (FlauBERT model)"),XPr=l(),mE=a("li"),d4e=a("strong"),zPr=o("funnel"),WPr=o(" \u2014 "),cZ=a("a"),QPr=o("TFFunnelForTokenClassification"),HPr=o(" (Funnel Transformer model)"),UPr=l(),gE=a("li"),c4e=a("strong"),JPr=o("layoutlm"),YPr=o(" \u2014 "),fZ=a("a"),KPr=o("TFLayoutLMForTokenClassification"),ZPr=o(" (LayoutLM model)"),eBr=l(),hE=a("li"),f4e=a("strong"),oBr=o("longformer"),rBr=o(" \u2014 "),mZ=a("a"),tBr=o("TFLongformerForTokenClassification"),aBr=o(" (Longformer model)"),nBr=l(),pE=a("li"),m4e=a("strong"),sBr=o("mobilebert"),lBr=o(" \u2014 "),gZ=a("a"),iBr=o("TFMobileBertForTokenClassification"),dBr=o(" (MobileBERT model)"),cBr=l(),_E=a("li"),g4e=a("strong"),fBr=o("mpnet"),mBr=o(" \u2014 "),hZ=a("a"),gBr=o("TFMPNetForTokenClassification"),hBr=o(" (MPNet model)"),pBr=l(),uE=a("li"),h4e=a("strong"),_Br=o("rembert"),uBr=o(" \u2014 "),pZ=a("a"),bBr=o("TFRemBertForTokenClassification"),vBr=o(" (RemBERT model)"),FBr=l(),bE=a("li"),p4e=a("strong"),TBr=o("roberta"),MBr=o(" \u2014 "),_Z=a("a"),EBr=o("TFRobertaForTokenClassification"),CBr=o(" (RoBERTa model)"),wBr=l(),vE=a("li"),_4e=a("strong"),ABr=o("roformer"),LBr=o(" \u2014 "),uZ=a("a"),yBr=o("TFRoFormerForTokenClassification"),xBr=o(" (RoFormer model)"),$Br=l(),FE=a("li"),u4e=a("strong"),kBr=o("xlm"),SBr=o(" \u2014 "),bZ=a("a"),RBr=o("TFXLMForTokenClassification"),PBr=o(" (XLM model)"),BBr=l(),TE=a("li"),b4e=a("strong"),IBr=o("xlm-roberta"),NBr=o(" \u2014 "),vZ=a("a"),qBr=o("TFXLMRobertaForTokenClassification"),jBr=o(" (XLM-RoBERTa model)"),DBr=l(),ME=a("li"),v4e=a("strong"),GBr=o("xlnet"),OBr=o(" \u2014 "),FZ=a("a"),VBr=o("TFXLNetForTokenClassification"),XBr=o(" (XLNet model)"),zBr=l(),F(EE.$$.fragment),qze=l(),jc=a("h2"),CE=a("a"),F4e=a("span"),F(Ux.$$.fragment),WBr=l(),T4e=a("span"),QBr=o("TFAutoModelForQuestionAnswering"),jze=l(),mr=a("div"),F(Jx.$$.fragment),HBr=l(),Dc=a("p"),UBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),TZ=a("a"),JBr=o("from_pretrained()"),YBr=o(" class method or the "),MZ=a("a"),KBr=o("from_config()"),ZBr=o(` class
method.`),eIr=l(),Yx=a("p"),oIr=o("This class cannot be instantiated directly using "),M4e=a("code"),rIr=o("__init__()"),tIr=o(" (throws an error)."),aIr=l(),Vt=a("div"),F(Kx.$$.fragment),nIr=l(),E4e=a("p"),sIr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),lIr=l(),Gc=a("p"),iIr=o(`Note:
Loading a model from its configuration file does `),C4e=a("strong"),dIr=o("not"),cIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EZ=a("a"),fIr=o("from_pretrained()"),mIr=o(" to load the model weights."),gIr=l(),F(wE.$$.fragment),hIr=l(),Dr=a("div"),F(Zx.$$.fragment),pIr=l(),w4e=a("p"),_Ir=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),uIr=l(),bn=a("p"),bIr=o("The model class to instantiate is selected based on the "),A4e=a("code"),vIr=o("model_type"),FIr=o(` property of the config object (either
passed as an argument or loaded from `),L4e=a("code"),TIr=o("pretrained_model_name_or_path"),MIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y4e=a("code"),EIr=o("pretrained_model_name_or_path"),CIr=o(":"),wIr=l(),ce=a("ul"),AE=a("li"),x4e=a("strong"),AIr=o("albert"),LIr=o(" \u2014 "),CZ=a("a"),yIr=o("TFAlbertForQuestionAnswering"),xIr=o(" (ALBERT model)"),$Ir=l(),LE=a("li"),$4e=a("strong"),kIr=o("bert"),SIr=o(" \u2014 "),wZ=a("a"),RIr=o("TFBertForQuestionAnswering"),PIr=o(" (BERT model)"),BIr=l(),yE=a("li"),k4e=a("strong"),IIr=o("camembert"),NIr=o(" \u2014 "),AZ=a("a"),qIr=o("TFCamembertForQuestionAnswering"),jIr=o(" (CamemBERT model)"),DIr=l(),xE=a("li"),S4e=a("strong"),GIr=o("convbert"),OIr=o(" \u2014 "),LZ=a("a"),VIr=o("TFConvBertForQuestionAnswering"),XIr=o(" (ConvBERT model)"),zIr=l(),$E=a("li"),R4e=a("strong"),WIr=o("deberta"),QIr=o(" \u2014 "),yZ=a("a"),HIr=o("TFDebertaForQuestionAnswering"),UIr=o(" (DeBERTa model)"),JIr=l(),kE=a("li"),P4e=a("strong"),YIr=o("deberta-v2"),KIr=o(" \u2014 "),xZ=a("a"),ZIr=o("TFDebertaV2ForQuestionAnswering"),eNr=o(" (DeBERTa-v2 model)"),oNr=l(),SE=a("li"),B4e=a("strong"),rNr=o("distilbert"),tNr=o(" \u2014 "),$Z=a("a"),aNr=o("TFDistilBertForQuestionAnswering"),nNr=o(" (DistilBERT model)"),sNr=l(),RE=a("li"),I4e=a("strong"),lNr=o("electra"),iNr=o(" \u2014 "),kZ=a("a"),dNr=o("TFElectraForQuestionAnswering"),cNr=o(" (ELECTRA model)"),fNr=l(),PE=a("li"),N4e=a("strong"),mNr=o("flaubert"),gNr=o(" \u2014 "),SZ=a("a"),hNr=o("TFFlaubertForQuestionAnsweringSimple"),pNr=o(" (FlauBERT model)"),_Nr=l(),BE=a("li"),q4e=a("strong"),uNr=o("funnel"),bNr=o(" \u2014 "),RZ=a("a"),vNr=o("TFFunnelForQuestionAnswering"),FNr=o(" (Funnel Transformer model)"),TNr=l(),IE=a("li"),j4e=a("strong"),MNr=o("gptj"),ENr=o(" \u2014 "),PZ=a("a"),CNr=o("TFGPTJForQuestionAnswering"),wNr=o(" (GPT-J model)"),ANr=l(),NE=a("li"),D4e=a("strong"),LNr=o("longformer"),yNr=o(" \u2014 "),BZ=a("a"),xNr=o("TFLongformerForQuestionAnswering"),$Nr=o(" (Longformer model)"),kNr=l(),qE=a("li"),G4e=a("strong"),SNr=o("mobilebert"),RNr=o(" \u2014 "),IZ=a("a"),PNr=o("TFMobileBertForQuestionAnswering"),BNr=o(" (MobileBERT model)"),INr=l(),jE=a("li"),O4e=a("strong"),NNr=o("mpnet"),qNr=o(" \u2014 "),NZ=a("a"),jNr=o("TFMPNetForQuestionAnswering"),DNr=o(" (MPNet model)"),GNr=l(),DE=a("li"),V4e=a("strong"),ONr=o("rembert"),VNr=o(" \u2014 "),qZ=a("a"),XNr=o("TFRemBertForQuestionAnswering"),zNr=o(" (RemBERT model)"),WNr=l(),GE=a("li"),X4e=a("strong"),QNr=o("roberta"),HNr=o(" \u2014 "),jZ=a("a"),UNr=o("TFRobertaForQuestionAnswering"),JNr=o(" (RoBERTa model)"),YNr=l(),OE=a("li"),z4e=a("strong"),KNr=o("roformer"),ZNr=o(" \u2014 "),DZ=a("a"),eqr=o("TFRoFormerForQuestionAnswering"),oqr=o(" (RoFormer model)"),rqr=l(),VE=a("li"),W4e=a("strong"),tqr=o("xlm"),aqr=o(" \u2014 "),GZ=a("a"),nqr=o("TFXLMForQuestionAnsweringSimple"),sqr=o(" (XLM model)"),lqr=l(),XE=a("li"),Q4e=a("strong"),iqr=o("xlm-roberta"),dqr=o(" \u2014 "),OZ=a("a"),cqr=o("TFXLMRobertaForQuestionAnswering"),fqr=o(" (XLM-RoBERTa model)"),mqr=l(),zE=a("li"),H4e=a("strong"),gqr=o("xlnet"),hqr=o(" \u2014 "),VZ=a("a"),pqr=o("TFXLNetForQuestionAnsweringSimple"),_qr=o(" (XLNet model)"),uqr=l(),F(WE.$$.fragment),Dze=l(),Oc=a("h2"),QE=a("a"),U4e=a("span"),F(e$.$$.fragment),bqr=l(),J4e=a("span"),vqr=o("TFAutoModelForVision2Seq"),Gze=l(),gr=a("div"),F(o$.$$.fragment),Fqr=l(),Vc=a("p"),Tqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),XZ=a("a"),Mqr=o("from_pretrained()"),Eqr=o(" class method or the "),zZ=a("a"),Cqr=o("from_config()"),wqr=o(` class
method.`),Aqr=l(),r$=a("p"),Lqr=o("This class cannot be instantiated directly using "),Y4e=a("code"),yqr=o("__init__()"),xqr=o(" (throws an error)."),$qr=l(),Xt=a("div"),F(t$.$$.fragment),kqr=l(),K4e=a("p"),Sqr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Rqr=l(),Xc=a("p"),Pqr=o(`Note:
Loading a model from its configuration file does `),Z4e=a("strong"),Bqr=o("not"),Iqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WZ=a("a"),Nqr=o("from_pretrained()"),qqr=o(" to load the model weights."),jqr=l(),F(HE.$$.fragment),Dqr=l(),Gr=a("div"),F(a$.$$.fragment),Gqr=l(),eEe=a("p"),Oqr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Vqr=l(),vn=a("p"),Xqr=o("The model class to instantiate is selected based on the "),oEe=a("code"),zqr=o("model_type"),Wqr=o(` property of the config object (either
passed as an argument or loaded from `),rEe=a("code"),Qqr=o("pretrained_model_name_or_path"),Hqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tEe=a("code"),Uqr=o("pretrained_model_name_or_path"),Jqr=o(":"),Yqr=l(),aEe=a("ul"),UE=a("li"),nEe=a("strong"),Kqr=o("vision-encoder-decoder"),Zqr=o(" \u2014 "),QZ=a("a"),ejr=o("TFVisionEncoderDecoderModel"),ojr=o(" (Vision Encoder decoder model)"),rjr=l(),F(JE.$$.fragment),Oze=l(),zc=a("h2"),YE=a("a"),sEe=a("span"),F(n$.$$.fragment),tjr=l(),lEe=a("span"),ajr=o("TFAutoModelForSpeechSeq2Seq"),Vze=l(),hr=a("div"),F(s$.$$.fragment),njr=l(),Wc=a("p"),sjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),HZ=a("a"),ljr=o("from_pretrained()"),ijr=o(" class method or the "),UZ=a("a"),djr=o("from_config()"),cjr=o(` class
method.`),fjr=l(),l$=a("p"),mjr=o("This class cannot be instantiated directly using "),iEe=a("code"),gjr=o("__init__()"),hjr=o(" (throws an error)."),pjr=l(),zt=a("div"),F(i$.$$.fragment),_jr=l(),dEe=a("p"),ujr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),bjr=l(),Qc=a("p"),vjr=o(`Note:
Loading a model from its configuration file does `),cEe=a("strong"),Fjr=o("not"),Tjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JZ=a("a"),Mjr=o("from_pretrained()"),Ejr=o(" to load the model weights."),Cjr=l(),F(KE.$$.fragment),wjr=l(),Or=a("div"),F(d$.$$.fragment),Ajr=l(),fEe=a("p"),Ljr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),yjr=l(),Fn=a("p"),xjr=o("The model class to instantiate is selected based on the "),mEe=a("code"),$jr=o("model_type"),kjr=o(` property of the config object (either
passed as an argument or loaded from `),gEe=a("code"),Sjr=o("pretrained_model_name_or_path"),Rjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hEe=a("code"),Pjr=o("pretrained_model_name_or_path"),Bjr=o(":"),Ijr=l(),pEe=a("ul"),ZE=a("li"),_Ee=a("strong"),Njr=o("speech_to_text"),qjr=o(" \u2014 "),YZ=a("a"),jjr=o("TFSpeech2TextForConditionalGeneration"),Djr=o(" (Speech2Text model)"),Gjr=l(),F(eC.$$.fragment),Xze=l(),Hc=a("h2"),oC=a("a"),uEe=a("span"),F(c$.$$.fragment),Ojr=l(),bEe=a("span"),Vjr=o("FlaxAutoModel"),zze=l(),pr=a("div"),F(f$.$$.fragment),Xjr=l(),Uc=a("p"),zjr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),KZ=a("a"),Wjr=o("from_pretrained()"),Qjr=o(" class method or the "),ZZ=a("a"),Hjr=o("from_config()"),Ujr=o(` class
method.`),Jjr=l(),m$=a("p"),Yjr=o("This class cannot be instantiated directly using "),vEe=a("code"),Kjr=o("__init__()"),Zjr=o(" (throws an error)."),eDr=l(),Wt=a("div"),F(g$.$$.fragment),oDr=l(),FEe=a("p"),rDr=o("Instantiates one of the base model classes of the library from a configuration."),tDr=l(),Jc=a("p"),aDr=o(`Note:
Loading a model from its configuration file does `),TEe=a("strong"),nDr=o("not"),sDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eee=a("a"),lDr=o("from_pretrained()"),iDr=o(" to load the model weights."),dDr=l(),F(rC.$$.fragment),cDr=l(),Vr=a("div"),F(h$.$$.fragment),fDr=l(),MEe=a("p"),mDr=o("Instantiate one of the base model classes of the library from a pretrained model."),gDr=l(),Tn=a("p"),hDr=o("The model class to instantiate is selected based on the "),EEe=a("code"),pDr=o("model_type"),_Dr=o(` property of the config object (either
passed as an argument or loaded from `),CEe=a("code"),uDr=o("pretrained_model_name_or_path"),bDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wEe=a("code"),vDr=o("pretrained_model_name_or_path"),FDr=o(":"),TDr=l(),oe=a("ul"),tC=a("li"),AEe=a("strong"),MDr=o("albert"),EDr=o(" \u2014 "),oee=a("a"),CDr=o("FlaxAlbertModel"),wDr=o(" (ALBERT model)"),ADr=l(),aC=a("li"),LEe=a("strong"),LDr=o("bart"),yDr=o(" \u2014 "),ree=a("a"),xDr=o("FlaxBartModel"),$Dr=o(" (BART model)"),kDr=l(),nC=a("li"),yEe=a("strong"),SDr=o("beit"),RDr=o(" \u2014 "),tee=a("a"),PDr=o("FlaxBeitModel"),BDr=o(" (BEiT model)"),IDr=l(),sC=a("li"),xEe=a("strong"),NDr=o("bert"),qDr=o(" \u2014 "),aee=a("a"),jDr=o("FlaxBertModel"),DDr=o(" (BERT model)"),GDr=l(),lC=a("li"),$Ee=a("strong"),ODr=o("big_bird"),VDr=o(" \u2014 "),nee=a("a"),XDr=o("FlaxBigBirdModel"),zDr=o(" (BigBird model)"),WDr=l(),iC=a("li"),kEe=a("strong"),QDr=o("blenderbot"),HDr=o(" \u2014 "),see=a("a"),UDr=o("FlaxBlenderbotModel"),JDr=o(" (Blenderbot model)"),YDr=l(),dC=a("li"),SEe=a("strong"),KDr=o("blenderbot-small"),ZDr=o(" \u2014 "),lee=a("a"),eGr=o("FlaxBlenderbotSmallModel"),oGr=o(" (BlenderbotSmall model)"),rGr=l(),cC=a("li"),REe=a("strong"),tGr=o("clip"),aGr=o(" \u2014 "),iee=a("a"),nGr=o("FlaxCLIPModel"),sGr=o(" (CLIP model)"),lGr=l(),fC=a("li"),PEe=a("strong"),iGr=o("distilbert"),dGr=o(" \u2014 "),dee=a("a"),cGr=o("FlaxDistilBertModel"),fGr=o(" (DistilBERT model)"),mGr=l(),mC=a("li"),BEe=a("strong"),gGr=o("electra"),hGr=o(" \u2014 "),cee=a("a"),pGr=o("FlaxElectraModel"),_Gr=o(" (ELECTRA model)"),uGr=l(),gC=a("li"),IEe=a("strong"),bGr=o("gpt2"),vGr=o(" \u2014 "),fee=a("a"),FGr=o("FlaxGPT2Model"),TGr=o(" (OpenAI GPT-2 model)"),MGr=l(),hC=a("li"),NEe=a("strong"),EGr=o("gpt_neo"),CGr=o(" \u2014 "),mee=a("a"),wGr=o("FlaxGPTNeoModel"),AGr=o(" (GPT Neo model)"),LGr=l(),pC=a("li"),qEe=a("strong"),yGr=o("gptj"),xGr=o(" \u2014 "),gee=a("a"),$Gr=o("FlaxGPTJModel"),kGr=o(" (GPT-J model)"),SGr=l(),_C=a("li"),jEe=a("strong"),RGr=o("longt5"),PGr=o(" \u2014 "),hee=a("a"),BGr=o("FlaxLongT5Model"),IGr=o(" (LongT5 model)"),NGr=l(),uC=a("li"),DEe=a("strong"),qGr=o("marian"),jGr=o(" \u2014 "),pee=a("a"),DGr=o("FlaxMarianModel"),GGr=o(" (Marian model)"),OGr=l(),bC=a("li"),GEe=a("strong"),VGr=o("mbart"),XGr=o(" \u2014 "),_ee=a("a"),zGr=o("FlaxMBartModel"),WGr=o(" (mBART model)"),QGr=l(),vC=a("li"),OEe=a("strong"),HGr=o("mt5"),UGr=o(" \u2014 "),uee=a("a"),JGr=o("FlaxMT5Model"),YGr=o(" (MT5 model)"),KGr=l(),FC=a("li"),VEe=a("strong"),ZGr=o("opt"),eOr=o(" \u2014 "),bee=a("a"),oOr=o("FlaxOPTModel"),rOr=o(" (OPT model)"),tOr=l(),TC=a("li"),XEe=a("strong"),aOr=o("pegasus"),nOr=o(" \u2014 "),vee=a("a"),sOr=o("FlaxPegasusModel"),lOr=o(" (Pegasus model)"),iOr=l(),MC=a("li"),zEe=a("strong"),dOr=o("roberta"),cOr=o(" \u2014 "),Fee=a("a"),fOr=o("FlaxRobertaModel"),mOr=o(" (RoBERTa model)"),gOr=l(),EC=a("li"),WEe=a("strong"),hOr=o("roformer"),pOr=o(" \u2014 "),Tee=a("a"),_Or=o("FlaxRoFormerModel"),uOr=o(" (RoFormer model)"),bOr=l(),CC=a("li"),QEe=a("strong"),vOr=o("t5"),FOr=o(" \u2014 "),Mee=a("a"),TOr=o("FlaxT5Model"),MOr=o(" (T5 model)"),EOr=l(),wC=a("li"),HEe=a("strong"),COr=o("vision-text-dual-encoder"),wOr=o(" \u2014 "),Eee=a("a"),AOr=o("FlaxVisionTextDualEncoderModel"),LOr=o(" (VisionTextDualEncoder model)"),yOr=l(),AC=a("li"),UEe=a("strong"),xOr=o("vit"),$Or=o(" \u2014 "),Cee=a("a"),kOr=o("FlaxViTModel"),SOr=o(" (ViT model)"),ROr=l(),LC=a("li"),JEe=a("strong"),POr=o("wav2vec2"),BOr=o(" \u2014 "),wee=a("a"),IOr=o("FlaxWav2Vec2Model"),NOr=o(" (Wav2Vec2 model)"),qOr=l(),yC=a("li"),YEe=a("strong"),jOr=o("xglm"),DOr=o(" \u2014 "),Aee=a("a"),GOr=o("FlaxXGLMModel"),OOr=o(" (XGLM model)"),VOr=l(),xC=a("li"),KEe=a("strong"),XOr=o("xlm-roberta"),zOr=o(" \u2014 "),Lee=a("a"),WOr=o("FlaxXLMRobertaModel"),QOr=o(" (XLM-RoBERTa model)"),HOr=l(),F($C.$$.fragment),Wze=l(),Yc=a("h2"),kC=a("a"),ZEe=a("span"),F(p$.$$.fragment),UOr=l(),eCe=a("span"),JOr=o("FlaxAutoModelForCausalLM"),Qze=l(),_r=a("div"),F(_$.$$.fragment),YOr=l(),Kc=a("p"),KOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),yee=a("a"),ZOr=o("from_pretrained()"),eVr=o(" class method or the "),xee=a("a"),oVr=o("from_config()"),rVr=o(` class
method.`),tVr=l(),u$=a("p"),aVr=o("This class cannot be instantiated directly using "),oCe=a("code"),nVr=o("__init__()"),sVr=o(" (throws an error)."),lVr=l(),Qt=a("div"),F(b$.$$.fragment),iVr=l(),rCe=a("p"),dVr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),cVr=l(),Zc=a("p"),fVr=o(`Note:
Loading a model from its configuration file does `),tCe=a("strong"),mVr=o("not"),gVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$ee=a("a"),hVr=o("from_pretrained()"),pVr=o(" to load the model weights."),_Vr=l(),F(SC.$$.fragment),uVr=l(),Xr=a("div"),F(v$.$$.fragment),bVr=l(),aCe=a("p"),vVr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),FVr=l(),Mn=a("p"),TVr=o("The model class to instantiate is selected based on the "),nCe=a("code"),MVr=o("model_type"),EVr=o(` property of the config object (either
passed as an argument or loaded from `),sCe=a("code"),CVr=o("pretrained_model_name_or_path"),wVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lCe=a("code"),AVr=o("pretrained_model_name_or_path"),LVr=o(":"),yVr=l(),xe=a("ul"),RC=a("li"),iCe=a("strong"),xVr=o("bart"),$Vr=o(" \u2014 "),kee=a("a"),kVr=o("FlaxBartForCausalLM"),SVr=o(" (BART model)"),RVr=l(),PC=a("li"),dCe=a("strong"),PVr=o("bert"),BVr=o(" \u2014 "),See=a("a"),IVr=o("FlaxBertForCausalLM"),NVr=o(" (BERT model)"),qVr=l(),BC=a("li"),cCe=a("strong"),jVr=o("big_bird"),DVr=o(" \u2014 "),Ree=a("a"),GVr=o("FlaxBigBirdForCausalLM"),OVr=o(" (BigBird model)"),VVr=l(),IC=a("li"),fCe=a("strong"),XVr=o("electra"),zVr=o(" \u2014 "),Pee=a("a"),WVr=o("FlaxElectraForCausalLM"),QVr=o(" (ELECTRA model)"),HVr=l(),NC=a("li"),mCe=a("strong"),UVr=o("gpt2"),JVr=o(" \u2014 "),Bee=a("a"),YVr=o("FlaxGPT2LMHeadModel"),KVr=o(" (OpenAI GPT-2 model)"),ZVr=l(),qC=a("li"),gCe=a("strong"),eXr=o("gpt_neo"),oXr=o(" \u2014 "),Iee=a("a"),rXr=o("FlaxGPTNeoForCausalLM"),tXr=o(" (GPT Neo model)"),aXr=l(),jC=a("li"),hCe=a("strong"),nXr=o("gptj"),sXr=o(" \u2014 "),Nee=a("a"),lXr=o("FlaxGPTJForCausalLM"),iXr=o(" (GPT-J model)"),dXr=l(),DC=a("li"),pCe=a("strong"),cXr=o("opt"),fXr=o(" \u2014 "),qee=a("a"),mXr=o("FlaxOPTForCausalLM"),gXr=o(" (OPT model)"),hXr=l(),GC=a("li"),_Ce=a("strong"),pXr=o("roberta"),_Xr=o(" \u2014 "),jee=a("a"),uXr=o("FlaxRobertaForCausalLM"),bXr=o(" (RoBERTa model)"),vXr=l(),OC=a("li"),uCe=a("strong"),FXr=o("xglm"),TXr=o(" \u2014 "),Dee=a("a"),MXr=o("FlaxXGLMForCausalLM"),EXr=o(" (XGLM model)"),CXr=l(),F(VC.$$.fragment),Hze=l(),ef=a("h2"),XC=a("a"),bCe=a("span"),F(F$.$$.fragment),wXr=l(),vCe=a("span"),AXr=o("FlaxAutoModelForPreTraining"),Uze=l(),ur=a("div"),F(T$.$$.fragment),LXr=l(),of=a("p"),yXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Gee=a("a"),xXr=o("from_pretrained()"),$Xr=o(" class method or the "),Oee=a("a"),kXr=o("from_config()"),SXr=o(` class
method.`),RXr=l(),M$=a("p"),PXr=o("This class cannot be instantiated directly using "),FCe=a("code"),BXr=o("__init__()"),IXr=o(" (throws an error)."),NXr=l(),Ht=a("div"),F(E$.$$.fragment),qXr=l(),TCe=a("p"),jXr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),DXr=l(),rf=a("p"),GXr=o(`Note:
Loading a model from its configuration file does `),MCe=a("strong"),OXr=o("not"),VXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vee=a("a"),XXr=o("from_pretrained()"),zXr=o(" to load the model weights."),WXr=l(),F(zC.$$.fragment),QXr=l(),zr=a("div"),F(C$.$$.fragment),HXr=l(),ECe=a("p"),UXr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),JXr=l(),En=a("p"),YXr=o("The model class to instantiate is selected based on the "),CCe=a("code"),KXr=o("model_type"),ZXr=o(` property of the config object (either
passed as an argument or loaded from `),wCe=a("code"),ezr=o("pretrained_model_name_or_path"),ozr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ACe=a("code"),rzr=o("pretrained_model_name_or_path"),tzr=o(":"),azr=l(),Ee=a("ul"),WC=a("li"),LCe=a("strong"),nzr=o("albert"),szr=o(" \u2014 "),Xee=a("a"),lzr=o("FlaxAlbertForPreTraining"),izr=o(" (ALBERT model)"),dzr=l(),QC=a("li"),yCe=a("strong"),czr=o("bart"),fzr=o(" \u2014 "),zee=a("a"),mzr=o("FlaxBartForConditionalGeneration"),gzr=o(" (BART model)"),hzr=l(),HC=a("li"),xCe=a("strong"),pzr=o("bert"),_zr=o(" \u2014 "),Wee=a("a"),uzr=o("FlaxBertForPreTraining"),bzr=o(" (BERT model)"),vzr=l(),UC=a("li"),$Ce=a("strong"),Fzr=o("big_bird"),Tzr=o(" \u2014 "),Qee=a("a"),Mzr=o("FlaxBigBirdForPreTraining"),Ezr=o(" (BigBird model)"),Czr=l(),JC=a("li"),kCe=a("strong"),wzr=o("electra"),Azr=o(" \u2014 "),Hee=a("a"),Lzr=o("FlaxElectraForPreTraining"),yzr=o(" (ELECTRA model)"),xzr=l(),YC=a("li"),SCe=a("strong"),$zr=o("longt5"),kzr=o(" \u2014 "),Uee=a("a"),Szr=o("FlaxLongT5ForConditionalGeneration"),Rzr=o(" (LongT5 model)"),Pzr=l(),KC=a("li"),RCe=a("strong"),Bzr=o("mbart"),Izr=o(" \u2014 "),Jee=a("a"),Nzr=o("FlaxMBartForConditionalGeneration"),qzr=o(" (mBART model)"),jzr=l(),ZC=a("li"),PCe=a("strong"),Dzr=o("mt5"),Gzr=o(" \u2014 "),Yee=a("a"),Ozr=o("FlaxMT5ForConditionalGeneration"),Vzr=o(" (MT5 model)"),Xzr=l(),e5=a("li"),BCe=a("strong"),zzr=o("roberta"),Wzr=o(" \u2014 "),Kee=a("a"),Qzr=o("FlaxRobertaForMaskedLM"),Hzr=o(" (RoBERTa model)"),Uzr=l(),o5=a("li"),ICe=a("strong"),Jzr=o("roformer"),Yzr=o(" \u2014 "),Zee=a("a"),Kzr=o("FlaxRoFormerForMaskedLM"),Zzr=o(" (RoFormer model)"),eWr=l(),r5=a("li"),NCe=a("strong"),oWr=o("t5"),rWr=o(" \u2014 "),eoe=a("a"),tWr=o("FlaxT5ForConditionalGeneration"),aWr=o(" (T5 model)"),nWr=l(),t5=a("li"),qCe=a("strong"),sWr=o("wav2vec2"),lWr=o(" \u2014 "),ooe=a("a"),iWr=o("FlaxWav2Vec2ForPreTraining"),dWr=o(" (Wav2Vec2 model)"),cWr=l(),a5=a("li"),jCe=a("strong"),fWr=o("xlm-roberta"),mWr=o(" \u2014 "),roe=a("a"),gWr=o("FlaxXLMRobertaForMaskedLM"),hWr=o(" (XLM-RoBERTa model)"),pWr=l(),F(n5.$$.fragment),Jze=l(),tf=a("h2"),s5=a("a"),DCe=a("span"),F(w$.$$.fragment),_Wr=l(),GCe=a("span"),uWr=o("FlaxAutoModelForMaskedLM"),Yze=l(),br=a("div"),F(A$.$$.fragment),bWr=l(),af=a("p"),vWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),toe=a("a"),FWr=o("from_pretrained()"),TWr=o(" class method or the "),aoe=a("a"),MWr=o("from_config()"),EWr=o(` class
method.`),CWr=l(),L$=a("p"),wWr=o("This class cannot be instantiated directly using "),OCe=a("code"),AWr=o("__init__()"),LWr=o(" (throws an error)."),yWr=l(),Ut=a("div"),F(y$.$$.fragment),xWr=l(),VCe=a("p"),$Wr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),kWr=l(),nf=a("p"),SWr=o(`Note:
Loading a model from its configuration file does `),XCe=a("strong"),RWr=o("not"),PWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),noe=a("a"),BWr=o("from_pretrained()"),IWr=o(" to load the model weights."),NWr=l(),F(l5.$$.fragment),qWr=l(),Wr=a("div"),F(x$.$$.fragment),jWr=l(),zCe=a("p"),DWr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),GWr=l(),Cn=a("p"),OWr=o("The model class to instantiate is selected based on the "),WCe=a("code"),VWr=o("model_type"),XWr=o(` property of the config object (either
passed as an argument or loaded from `),QCe=a("code"),zWr=o("pretrained_model_name_or_path"),WWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HCe=a("code"),QWr=o("pretrained_model_name_or_path"),HWr=o(":"),UWr=l(),$e=a("ul"),i5=a("li"),UCe=a("strong"),JWr=o("albert"),YWr=o(" \u2014 "),soe=a("a"),KWr=o("FlaxAlbertForMaskedLM"),ZWr=o(" (ALBERT model)"),eQr=l(),d5=a("li"),JCe=a("strong"),oQr=o("bart"),rQr=o(" \u2014 "),loe=a("a"),tQr=o("FlaxBartForConditionalGeneration"),aQr=o(" (BART model)"),nQr=l(),c5=a("li"),YCe=a("strong"),sQr=o("bert"),lQr=o(" \u2014 "),ioe=a("a"),iQr=o("FlaxBertForMaskedLM"),dQr=o(" (BERT model)"),cQr=l(),f5=a("li"),KCe=a("strong"),fQr=o("big_bird"),mQr=o(" \u2014 "),doe=a("a"),gQr=o("FlaxBigBirdForMaskedLM"),hQr=o(" (BigBird model)"),pQr=l(),m5=a("li"),ZCe=a("strong"),_Qr=o("distilbert"),uQr=o(" \u2014 "),coe=a("a"),bQr=o("FlaxDistilBertForMaskedLM"),vQr=o(" (DistilBERT model)"),FQr=l(),g5=a("li"),e5e=a("strong"),TQr=o("electra"),MQr=o(" \u2014 "),foe=a("a"),EQr=o("FlaxElectraForMaskedLM"),CQr=o(" (ELECTRA model)"),wQr=l(),h5=a("li"),o5e=a("strong"),AQr=o("mbart"),LQr=o(" \u2014 "),moe=a("a"),yQr=o("FlaxMBartForConditionalGeneration"),xQr=o(" (mBART model)"),$Qr=l(),p5=a("li"),r5e=a("strong"),kQr=o("roberta"),SQr=o(" \u2014 "),goe=a("a"),RQr=o("FlaxRobertaForMaskedLM"),PQr=o(" (RoBERTa model)"),BQr=l(),_5=a("li"),t5e=a("strong"),IQr=o("roformer"),NQr=o(" \u2014 "),hoe=a("a"),qQr=o("FlaxRoFormerForMaskedLM"),jQr=o(" (RoFormer model)"),DQr=l(),u5=a("li"),a5e=a("strong"),GQr=o("xlm-roberta"),OQr=o(" \u2014 "),poe=a("a"),VQr=o("FlaxXLMRobertaForMaskedLM"),XQr=o(" (XLM-RoBERTa model)"),zQr=l(),F(b5.$$.fragment),Kze=l(),sf=a("h2"),v5=a("a"),n5e=a("span"),F($$.$$.fragment),WQr=l(),s5e=a("span"),QQr=o("FlaxAutoModelForSeq2SeqLM"),Zze=l(),vr=a("div"),F(k$.$$.fragment),HQr=l(),lf=a("p"),UQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),_oe=a("a"),JQr=o("from_pretrained()"),YQr=o(" class method or the "),uoe=a("a"),KQr=o("from_config()"),ZQr=o(` class
method.`),eHr=l(),S$=a("p"),oHr=o("This class cannot be instantiated directly using "),l5e=a("code"),rHr=o("__init__()"),tHr=o(" (throws an error)."),aHr=l(),Jt=a("div"),F(R$.$$.fragment),nHr=l(),i5e=a("p"),sHr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),lHr=l(),df=a("p"),iHr=o(`Note:
Loading a model from its configuration file does `),d5e=a("strong"),dHr=o("not"),cHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),boe=a("a"),fHr=o("from_pretrained()"),mHr=o(" to load the model weights."),gHr=l(),F(F5.$$.fragment),hHr=l(),Qr=a("div"),F(P$.$$.fragment),pHr=l(),c5e=a("p"),_Hr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),uHr=l(),wn=a("p"),bHr=o("The model class to instantiate is selected based on the "),f5e=a("code"),vHr=o("model_type"),FHr=o(` property of the config object (either
passed as an argument or loaded from `),m5e=a("code"),THr=o("pretrained_model_name_or_path"),MHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g5e=a("code"),EHr=o("pretrained_model_name_or_path"),CHr=o(":"),wHr=l(),ke=a("ul"),T5=a("li"),h5e=a("strong"),AHr=o("bart"),LHr=o(" \u2014 "),voe=a("a"),yHr=o("FlaxBartForConditionalGeneration"),xHr=o(" (BART model)"),$Hr=l(),M5=a("li"),p5e=a("strong"),kHr=o("blenderbot"),SHr=o(" \u2014 "),Foe=a("a"),RHr=o("FlaxBlenderbotForConditionalGeneration"),PHr=o(" (Blenderbot model)"),BHr=l(),E5=a("li"),_5e=a("strong"),IHr=o("blenderbot-small"),NHr=o(" \u2014 "),Toe=a("a"),qHr=o("FlaxBlenderbotSmallForConditionalGeneration"),jHr=o(" (BlenderbotSmall model)"),DHr=l(),C5=a("li"),u5e=a("strong"),GHr=o("encoder-decoder"),OHr=o(" \u2014 "),Moe=a("a"),VHr=o("FlaxEncoderDecoderModel"),XHr=o(" (Encoder decoder model)"),zHr=l(),w5=a("li"),b5e=a("strong"),WHr=o("longt5"),QHr=o(" \u2014 "),Eoe=a("a"),HHr=o("FlaxLongT5ForConditionalGeneration"),UHr=o(" (LongT5 model)"),JHr=l(),A5=a("li"),v5e=a("strong"),YHr=o("marian"),KHr=o(" \u2014 "),Coe=a("a"),ZHr=o("FlaxMarianMTModel"),eUr=o(" (Marian model)"),oUr=l(),L5=a("li"),F5e=a("strong"),rUr=o("mbart"),tUr=o(" \u2014 "),woe=a("a"),aUr=o("FlaxMBartForConditionalGeneration"),nUr=o(" (mBART model)"),sUr=l(),y5=a("li"),T5e=a("strong"),lUr=o("mt5"),iUr=o(" \u2014 "),Aoe=a("a"),dUr=o("FlaxMT5ForConditionalGeneration"),cUr=o(" (MT5 model)"),fUr=l(),x5=a("li"),M5e=a("strong"),mUr=o("pegasus"),gUr=o(" \u2014 "),Loe=a("a"),hUr=o("FlaxPegasusForConditionalGeneration"),pUr=o(" (Pegasus model)"),_Ur=l(),$5=a("li"),E5e=a("strong"),uUr=o("t5"),bUr=o(" \u2014 "),yoe=a("a"),vUr=o("FlaxT5ForConditionalGeneration"),FUr=o(" (T5 model)"),TUr=l(),F(k5.$$.fragment),eWe=l(),cf=a("h2"),S5=a("a"),C5e=a("span"),F(B$.$$.fragment),MUr=l(),w5e=a("span"),EUr=o("FlaxAutoModelForSequenceClassification"),oWe=l(),Fr=a("div"),F(I$.$$.fragment),CUr=l(),ff=a("p"),wUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),xoe=a("a"),AUr=o("from_pretrained()"),LUr=o(" class method or the "),$oe=a("a"),yUr=o("from_config()"),xUr=o(` class
method.`),$Ur=l(),N$=a("p"),kUr=o("This class cannot be instantiated directly using "),A5e=a("code"),SUr=o("__init__()"),RUr=o(" (throws an error)."),PUr=l(),Yt=a("div"),F(q$.$$.fragment),BUr=l(),L5e=a("p"),IUr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),NUr=l(),mf=a("p"),qUr=o(`Note:
Loading a model from its configuration file does `),y5e=a("strong"),jUr=o("not"),DUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),koe=a("a"),GUr=o("from_pretrained()"),OUr=o(" to load the model weights."),VUr=l(),F(R5.$$.fragment),XUr=l(),Hr=a("div"),F(j$.$$.fragment),zUr=l(),x5e=a("p"),WUr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),QUr=l(),An=a("p"),HUr=o("The model class to instantiate is selected based on the "),$5e=a("code"),UUr=o("model_type"),JUr=o(` property of the config object (either
passed as an argument or loaded from `),k5e=a("code"),YUr=o("pretrained_model_name_or_path"),KUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S5e=a("code"),ZUr=o("pretrained_model_name_or_path"),eJr=o(":"),oJr=l(),Se=a("ul"),P5=a("li"),R5e=a("strong"),rJr=o("albert"),tJr=o(" \u2014 "),Soe=a("a"),aJr=o("FlaxAlbertForSequenceClassification"),nJr=o(" (ALBERT model)"),sJr=l(),B5=a("li"),P5e=a("strong"),lJr=o("bart"),iJr=o(" \u2014 "),Roe=a("a"),dJr=o("FlaxBartForSequenceClassification"),cJr=o(" (BART model)"),fJr=l(),I5=a("li"),B5e=a("strong"),mJr=o("bert"),gJr=o(" \u2014 "),Poe=a("a"),hJr=o("FlaxBertForSequenceClassification"),pJr=o(" (BERT model)"),_Jr=l(),N5=a("li"),I5e=a("strong"),uJr=o("big_bird"),bJr=o(" \u2014 "),Boe=a("a"),vJr=o("FlaxBigBirdForSequenceClassification"),FJr=o(" (BigBird model)"),TJr=l(),q5=a("li"),N5e=a("strong"),MJr=o("distilbert"),EJr=o(" \u2014 "),Ioe=a("a"),CJr=o("FlaxDistilBertForSequenceClassification"),wJr=o(" (DistilBERT model)"),AJr=l(),j5=a("li"),q5e=a("strong"),LJr=o("electra"),yJr=o(" \u2014 "),Noe=a("a"),xJr=o("FlaxElectraForSequenceClassification"),$Jr=o(" (ELECTRA model)"),kJr=l(),D5=a("li"),j5e=a("strong"),SJr=o("mbart"),RJr=o(" \u2014 "),qoe=a("a"),PJr=o("FlaxMBartForSequenceClassification"),BJr=o(" (mBART model)"),IJr=l(),G5=a("li"),D5e=a("strong"),NJr=o("roberta"),qJr=o(" \u2014 "),joe=a("a"),jJr=o("FlaxRobertaForSequenceClassification"),DJr=o(" (RoBERTa model)"),GJr=l(),O5=a("li"),G5e=a("strong"),OJr=o("roformer"),VJr=o(" \u2014 "),Doe=a("a"),XJr=o("FlaxRoFormerForSequenceClassification"),zJr=o(" (RoFormer model)"),WJr=l(),V5=a("li"),O5e=a("strong"),QJr=o("xlm-roberta"),HJr=o(" \u2014 "),Goe=a("a"),UJr=o("FlaxXLMRobertaForSequenceClassification"),JJr=o(" (XLM-RoBERTa model)"),YJr=l(),F(X5.$$.fragment),rWe=l(),gf=a("h2"),z5=a("a"),V5e=a("span"),F(D$.$$.fragment),KJr=l(),X5e=a("span"),ZJr=o("FlaxAutoModelForQuestionAnswering"),tWe=l(),Tr=a("div"),F(G$.$$.fragment),eYr=l(),hf=a("p"),oYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Ooe=a("a"),rYr=o("from_pretrained()"),tYr=o(" class method or the "),Voe=a("a"),aYr=o("from_config()"),nYr=o(` class
method.`),sYr=l(),O$=a("p"),lYr=o("This class cannot be instantiated directly using "),z5e=a("code"),iYr=o("__init__()"),dYr=o(" (throws an error)."),cYr=l(),Kt=a("div"),F(V$.$$.fragment),fYr=l(),W5e=a("p"),mYr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),gYr=l(),pf=a("p"),hYr=o(`Note:
Loading a model from its configuration file does `),Q5e=a("strong"),pYr=o("not"),_Yr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xoe=a("a"),uYr=o("from_pretrained()"),bYr=o(" to load the model weights."),vYr=l(),F(W5.$$.fragment),FYr=l(),Ur=a("div"),F(X$.$$.fragment),TYr=l(),H5e=a("p"),MYr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),EYr=l(),Ln=a("p"),CYr=o("The model class to instantiate is selected based on the "),U5e=a("code"),wYr=o("model_type"),AYr=o(` property of the config object (either
passed as an argument or loaded from `),J5e=a("code"),LYr=o("pretrained_model_name_or_path"),yYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y5e=a("code"),xYr=o("pretrained_model_name_or_path"),$Yr=o(":"),kYr=l(),Re=a("ul"),Q5=a("li"),K5e=a("strong"),SYr=o("albert"),RYr=o(" \u2014 "),zoe=a("a"),PYr=o("FlaxAlbertForQuestionAnswering"),BYr=o(" (ALBERT model)"),IYr=l(),H5=a("li"),Z5e=a("strong"),NYr=o("bart"),qYr=o(" \u2014 "),Woe=a("a"),jYr=o("FlaxBartForQuestionAnswering"),DYr=o(" (BART model)"),GYr=l(),U5=a("li"),e0e=a("strong"),OYr=o("bert"),VYr=o(" \u2014 "),Qoe=a("a"),XYr=o("FlaxBertForQuestionAnswering"),zYr=o(" (BERT model)"),WYr=l(),J5=a("li"),o0e=a("strong"),QYr=o("big_bird"),HYr=o(" \u2014 "),Hoe=a("a"),UYr=o("FlaxBigBirdForQuestionAnswering"),JYr=o(" (BigBird model)"),YYr=l(),Y5=a("li"),r0e=a("strong"),KYr=o("distilbert"),ZYr=o(" \u2014 "),Uoe=a("a"),eKr=o("FlaxDistilBertForQuestionAnswering"),oKr=o(" (DistilBERT model)"),rKr=l(),K5=a("li"),t0e=a("strong"),tKr=o("electra"),aKr=o(" \u2014 "),Joe=a("a"),nKr=o("FlaxElectraForQuestionAnswering"),sKr=o(" (ELECTRA model)"),lKr=l(),Z5=a("li"),a0e=a("strong"),iKr=o("mbart"),dKr=o(" \u2014 "),Yoe=a("a"),cKr=o("FlaxMBartForQuestionAnswering"),fKr=o(" (mBART model)"),mKr=l(),e0=a("li"),n0e=a("strong"),gKr=o("roberta"),hKr=o(" \u2014 "),Koe=a("a"),pKr=o("FlaxRobertaForQuestionAnswering"),_Kr=o(" (RoBERTa model)"),uKr=l(),o0=a("li"),s0e=a("strong"),bKr=o("roformer"),vKr=o(" \u2014 "),Zoe=a("a"),FKr=o("FlaxRoFormerForQuestionAnswering"),TKr=o(" (RoFormer model)"),MKr=l(),r0=a("li"),l0e=a("strong"),EKr=o("xlm-roberta"),CKr=o(" \u2014 "),ere=a("a"),wKr=o("FlaxXLMRobertaForQuestionAnswering"),AKr=o(" (XLM-RoBERTa model)"),LKr=l(),F(t0.$$.fragment),aWe=l(),_f=a("h2"),a0=a("a"),i0e=a("span"),F(z$.$$.fragment),yKr=l(),d0e=a("span"),xKr=o("FlaxAutoModelForTokenClassification"),nWe=l(),Mr=a("div"),F(W$.$$.fragment),$Kr=l(),uf=a("p"),kKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ore=a("a"),SKr=o("from_pretrained()"),RKr=o(" class method or the "),rre=a("a"),PKr=o("from_config()"),BKr=o(` class
method.`),IKr=l(),Q$=a("p"),NKr=o("This class cannot be instantiated directly using "),c0e=a("code"),qKr=o("__init__()"),jKr=o(" (throws an error)."),DKr=l(),Zt=a("div"),F(H$.$$.fragment),GKr=l(),f0e=a("p"),OKr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),VKr=l(),bf=a("p"),XKr=o(`Note:
Loading a model from its configuration file does `),m0e=a("strong"),zKr=o("not"),WKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tre=a("a"),QKr=o("from_pretrained()"),HKr=o(" to load the model weights."),UKr=l(),F(n0.$$.fragment),JKr=l(),Jr=a("div"),F(U$.$$.fragment),YKr=l(),g0e=a("p"),KKr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ZKr=l(),yn=a("p"),eZr=o("The model class to instantiate is selected based on the "),h0e=a("code"),oZr=o("model_type"),rZr=o(` property of the config object (either
passed as an argument or loaded from `),p0e=a("code"),tZr=o("pretrained_model_name_or_path"),aZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_0e=a("code"),nZr=o("pretrained_model_name_or_path"),sZr=o(":"),lZr=l(),Ve=a("ul"),s0=a("li"),u0e=a("strong"),iZr=o("albert"),dZr=o(" \u2014 "),are=a("a"),cZr=o("FlaxAlbertForTokenClassification"),fZr=o(" (ALBERT model)"),mZr=l(),l0=a("li"),b0e=a("strong"),gZr=o("bert"),hZr=o(" \u2014 "),nre=a("a"),pZr=o("FlaxBertForTokenClassification"),_Zr=o(" (BERT model)"),uZr=l(),i0=a("li"),v0e=a("strong"),bZr=o("big_bird"),vZr=o(" \u2014 "),sre=a("a"),FZr=o("FlaxBigBirdForTokenClassification"),TZr=o(" (BigBird model)"),MZr=l(),d0=a("li"),F0e=a("strong"),EZr=o("distilbert"),CZr=o(" \u2014 "),lre=a("a"),wZr=o("FlaxDistilBertForTokenClassification"),AZr=o(" (DistilBERT model)"),LZr=l(),c0=a("li"),T0e=a("strong"),yZr=o("electra"),xZr=o(" \u2014 "),ire=a("a"),$Zr=o("FlaxElectraForTokenClassification"),kZr=o(" (ELECTRA model)"),SZr=l(),f0=a("li"),M0e=a("strong"),RZr=o("roberta"),PZr=o(" \u2014 "),dre=a("a"),BZr=o("FlaxRobertaForTokenClassification"),IZr=o(" (RoBERTa model)"),NZr=l(),m0=a("li"),E0e=a("strong"),qZr=o("roformer"),jZr=o(" \u2014 "),cre=a("a"),DZr=o("FlaxRoFormerForTokenClassification"),GZr=o(" (RoFormer model)"),OZr=l(),g0=a("li"),C0e=a("strong"),VZr=o("xlm-roberta"),XZr=o(" \u2014 "),fre=a("a"),zZr=o("FlaxXLMRobertaForTokenClassification"),WZr=o(" (XLM-RoBERTa model)"),QZr=l(),F(h0.$$.fragment),sWe=l(),vf=a("h2"),p0=a("a"),w0e=a("span"),F(J$.$$.fragment),HZr=l(),A0e=a("span"),UZr=o("FlaxAutoModelForMultipleChoice"),lWe=l(),Er=a("div"),F(Y$.$$.fragment),JZr=l(),Ff=a("p"),YZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),mre=a("a"),KZr=o("from_pretrained()"),ZZr=o(" class method or the "),gre=a("a"),eet=o("from_config()"),oet=o(` class
method.`),ret=l(),K$=a("p"),tet=o("This class cannot be instantiated directly using "),L0e=a("code"),aet=o("__init__()"),net=o(" (throws an error)."),set=l(),ea=a("div"),F(Z$.$$.fragment),iet=l(),y0e=a("p"),det=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),cet=l(),Tf=a("p"),fet=o(`Note:
Loading a model from its configuration file does `),x0e=a("strong"),met=o("not"),get=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hre=a("a"),het=o("from_pretrained()"),pet=o(" to load the model weights."),_et=l(),F(_0.$$.fragment),uet=l(),Yr=a("div"),F(ek.$$.fragment),bet=l(),$0e=a("p"),vet=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Fet=l(),xn=a("p"),Tet=o("The model class to instantiate is selected based on the "),k0e=a("code"),Met=o("model_type"),Eet=o(` property of the config object (either
passed as an argument or loaded from `),S0e=a("code"),Cet=o("pretrained_model_name_or_path"),wet=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R0e=a("code"),Aet=o("pretrained_model_name_or_path"),Let=o(":"),yet=l(),Xe=a("ul"),u0=a("li"),P0e=a("strong"),xet=o("albert"),$et=o(" \u2014 "),pre=a("a"),ket=o("FlaxAlbertForMultipleChoice"),Set=o(" (ALBERT model)"),Ret=l(),b0=a("li"),B0e=a("strong"),Pet=o("bert"),Bet=o(" \u2014 "),_re=a("a"),Iet=o("FlaxBertForMultipleChoice"),Net=o(" (BERT model)"),qet=l(),v0=a("li"),I0e=a("strong"),jet=o("big_bird"),Det=o(" \u2014 "),ure=a("a"),Get=o("FlaxBigBirdForMultipleChoice"),Oet=o(" (BigBird model)"),Vet=l(),F0=a("li"),N0e=a("strong"),Xet=o("distilbert"),zet=o(" \u2014 "),bre=a("a"),Wet=o("FlaxDistilBertForMultipleChoice"),Qet=o(" (DistilBERT model)"),Het=l(),T0=a("li"),q0e=a("strong"),Uet=o("electra"),Jet=o(" \u2014 "),vre=a("a"),Yet=o("FlaxElectraForMultipleChoice"),Ket=o(" (ELECTRA model)"),Zet=l(),M0=a("li"),j0e=a("strong"),eot=o("roberta"),oot=o(" \u2014 "),Fre=a("a"),rot=o("FlaxRobertaForMultipleChoice"),tot=o(" (RoBERTa model)"),aot=l(),E0=a("li"),D0e=a("strong"),not=o("roformer"),sot=o(" \u2014 "),Tre=a("a"),lot=o("FlaxRoFormerForMultipleChoice"),iot=o(" (RoFormer model)"),dot=l(),C0=a("li"),G0e=a("strong"),cot=o("xlm-roberta"),fot=o(" \u2014 "),Mre=a("a"),mot=o("FlaxXLMRobertaForMultipleChoice"),got=o(" (XLM-RoBERTa model)"),hot=l(),F(w0.$$.fragment),iWe=l(),Mf=a("h2"),A0=a("a"),O0e=a("span"),F(ok.$$.fragment),pot=l(),V0e=a("span"),_ot=o("FlaxAutoModelForNextSentencePrediction"),dWe=l(),Cr=a("div"),F(rk.$$.fragment),uot=l(),Ef=a("p"),bot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Ere=a("a"),vot=o("from_pretrained()"),Fot=o(" class method or the "),Cre=a("a"),Tot=o("from_config()"),Mot=o(` class
method.`),Eot=l(),tk=a("p"),Cot=o("This class cannot be instantiated directly using "),X0e=a("code"),wot=o("__init__()"),Aot=o(" (throws an error)."),Lot=l(),oa=a("div"),F(ak.$$.fragment),yot=l(),z0e=a("p"),xot=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$ot=l(),Cf=a("p"),kot=o(`Note:
Loading a model from its configuration file does `),W0e=a("strong"),Sot=o("not"),Rot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wre=a("a"),Pot=o("from_pretrained()"),Bot=o(" to load the model weights."),Iot=l(),F(L0.$$.fragment),Not=l(),Kr=a("div"),F(nk.$$.fragment),qot=l(),Q0e=a("p"),jot=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Dot=l(),$n=a("p"),Got=o("The model class to instantiate is selected based on the "),H0e=a("code"),Oot=o("model_type"),Vot=o(` property of the config object (either
passed as an argument or loaded from `),U0e=a("code"),Xot=o("pretrained_model_name_or_path"),zot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J0e=a("code"),Wot=o("pretrained_model_name_or_path"),Qot=o(":"),Hot=l(),Y0e=a("ul"),y0=a("li"),K0e=a("strong"),Uot=o("bert"),Jot=o(" \u2014 "),Are=a("a"),Yot=o("FlaxBertForNextSentencePrediction"),Kot=o(" (BERT model)"),Zot=l(),F(x0.$$.fragment),cWe=l(),wf=a("h2"),$0=a("a"),Z0e=a("span"),F(sk.$$.fragment),ert=l(),ewe=a("span"),ort=o("FlaxAutoModelForImageClassification"),fWe=l(),wr=a("div"),F(lk.$$.fragment),rrt=l(),Af=a("p"),trt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Lre=a("a"),art=o("from_pretrained()"),nrt=o(" class method or the "),yre=a("a"),srt=o("from_config()"),lrt=o(` class
method.`),irt=l(),ik=a("p"),drt=o("This class cannot be instantiated directly using "),owe=a("code"),crt=o("__init__()"),frt=o(" (throws an error)."),mrt=l(),ra=a("div"),F(dk.$$.fragment),grt=l(),rwe=a("p"),hrt=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),prt=l(),Lf=a("p"),_rt=o(`Note:
Loading a model from its configuration file does `),twe=a("strong"),urt=o("not"),brt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xre=a("a"),vrt=o("from_pretrained()"),Frt=o(" to load the model weights."),Trt=l(),F(k0.$$.fragment),Mrt=l(),Zr=a("div"),F(ck.$$.fragment),Ert=l(),awe=a("p"),Crt=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),wrt=l(),kn=a("p"),Art=o("The model class to instantiate is selected based on the "),nwe=a("code"),Lrt=o("model_type"),yrt=o(` property of the config object (either
passed as an argument or loaded from `),swe=a("code"),xrt=o("pretrained_model_name_or_path"),$rt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lwe=a("code"),krt=o("pretrained_model_name_or_path"),Srt=o(":"),Rrt=l(),fk=a("ul"),S0=a("li"),iwe=a("strong"),Prt=o("beit"),Brt=o(" \u2014 "),$re=a("a"),Irt=o("FlaxBeitForImageClassification"),Nrt=o(" (BEiT model)"),qrt=l(),R0=a("li"),dwe=a("strong"),jrt=o("vit"),Drt=o(" \u2014 "),kre=a("a"),Grt=o("FlaxViTForImageClassification"),Ort=o(" (ViT model)"),Vrt=l(),F(P0.$$.fragment),mWe=l(),yf=a("h2"),B0=a("a"),cwe=a("span"),F(mk.$$.fragment),Xrt=l(),fwe=a("span"),zrt=o("FlaxAutoModelForVision2Seq"),gWe=l(),Ar=a("div"),F(gk.$$.fragment),Wrt=l(),xf=a("p"),Qrt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Sre=a("a"),Hrt=o("from_pretrained()"),Urt=o(" class method or the "),Rre=a("a"),Jrt=o("from_config()"),Yrt=o(` class
method.`),Krt=l(),hk=a("p"),Zrt=o("This class cannot be instantiated directly using "),mwe=a("code"),ett=o("__init__()"),ott=o(" (throws an error)."),rtt=l(),ta=a("div"),F(pk.$$.fragment),ttt=l(),gwe=a("p"),att=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ntt=l(),$f=a("p"),stt=o(`Note:
Loading a model from its configuration file does `),hwe=a("strong"),ltt=o("not"),itt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pre=a("a"),dtt=o("from_pretrained()"),ctt=o(" to load the model weights."),ftt=l(),F(I0.$$.fragment),mtt=l(),et=a("div"),F(_k.$$.fragment),gtt=l(),pwe=a("p"),htt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ptt=l(),Sn=a("p"),_tt=o("The model class to instantiate is selected based on the "),_we=a("code"),utt=o("model_type"),btt=o(` property of the config object (either
passed as an argument or loaded from `),uwe=a("code"),vtt=o("pretrained_model_name_or_path"),Ftt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bwe=a("code"),Ttt=o("pretrained_model_name_or_path"),Mtt=o(":"),Ett=l(),vwe=a("ul"),N0=a("li"),Fwe=a("strong"),Ctt=o("vision-encoder-decoder"),wtt=o(" \u2014 "),Bre=a("a"),Att=o("FlaxVisionEncoderDecoderModel"),Ltt=o(" (Vision Encoder decoder model)"),ytt=l(),F(q0.$$.fragment),this.h()},l(f){const u=mQt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var uk=s(p);m=n(uk,"A",{id:!0,class:!0,href:!0});var Twe=s(m);_=n(Twe,"SPAN",{});var Mwe=s(_);T(d.$$.fragment,Mwe),Mwe.forEach(t),Twe.forEach(t),h=i(uk),Eo=n(uk,"SPAN",{});var Ewe=s(Eo);Li=r(Ewe,"Auto Classes"),Ewe.forEach(t),uk.forEach(t),Pf=i(f),st=n(f,"P",{});var bk=s(st);yi=r(bk,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),xi=n(bk,"CODE",{});var Cwe=s(xi);t6=r(Cwe,"from_pretrained()"),Cwe.forEach(t),Bf=r(bk,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),bk.forEach(t),Oe=i(f),We=n(f,"P",{});var Rn=s(We);$i=r(Rn,"Instantiating one of "),Pn=n(Rn,"A",{href:!0});var wwe=s(Pn);a6=r(wwe,"AutoConfig"),wwe.forEach(t),Bn=r(Rn,", "),In=n(Rn,"A",{href:!0});var Awe=s(In);n6=r(Awe,"AutoModel"),Awe.forEach(t),ki=r(Rn,`, and
`),Nn=n(Rn,"A",{href:!0});var Lwe=s(Nn);s6=r(Lwe,"AutoTokenizer"),Lwe.forEach(t),Si=r(Rn," will directly create a class of the relevant architecture. For instance"),Rn.forEach(t),If=i(f),T(Sa.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var vk=s(Ae);qS=r(vk,"will create a model that is an instance of "),Ri=n(vk,"A",{href:!0});var ywe=s(Ri);jS=r(ywe,"BertModel"),ywe.forEach(t),DS=r(vk,"."),vk.forEach(t),Co=i(f),Ra=n(f,"P",{});var Fk=s(Ra);GS=r(Fk,"There is one class of "),Nf=n(Fk,"CODE",{});var xwe=s(Nf);OS=r(xwe,"AutoModel"),xwe.forEach(t),CHe=r(Fk," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Fk.forEach(t),dXe=i(f),Pi=n(f,"H2",{class:!0});var Tk=s(Pi);qf=n(Tk,"A",{id:!0,class:!0,href:!0});var $we=s(qf);$ae=n($we,"SPAN",{});var kwe=s($ae);T(l6.$$.fragment,kwe),kwe.forEach(t),$we.forEach(t),wHe=i(Tk),kae=n(Tk,"SPAN",{});var Swe=s(kae);AHe=r(Swe,"Extending the Auto Classes"),Swe.forEach(t),Tk.forEach(t),cXe=i(f),qn=n(f,"P",{});var kf=s(qn);LHe=r(kf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Sae=n(kf,"CODE",{});var Rwe=s(Sae);yHe=r(Rwe,"NewModel"),Rwe.forEach(t),xHe=r(kf,", make sure you have a "),Rae=n(kf,"CODE",{});var Pwe=s(Rae);$He=r(Pwe,"NewModelConfig"),Pwe.forEach(t),kHe=r(kf,` then you can add those to the auto
classes like this:`),kf.forEach(t),fXe=i(f),T(i6.$$.fragment,f),mXe=i(f),VS=n(f,"P",{});var Bwe=s(VS);SHe=r(Bwe,"You will then be able to use the auto classes like you would usually do!"),Bwe.forEach(t),gXe=i(f),T(jf.$$.fragment,f),hXe=i(f),Bi=n(f,"H2",{class:!0});var Mk=s(Bi);Df=n(Mk,"A",{id:!0,class:!0,href:!0});var Iwe=s(Df);Pae=n(Iwe,"SPAN",{});var Nwe=s(Pae);T(d6.$$.fragment,Nwe),Nwe.forEach(t),Iwe.forEach(t),RHe=i(Mk),Bae=n(Mk,"SPAN",{});var qwe=s(Bae);PHe=r(qwe,"AutoConfig"),qwe.forEach(t),Mk.forEach(t),pXe=i(f),wo=n(f,"DIV",{class:!0});var at=s(wo);T(c6.$$.fragment,at),BHe=i(at),f6=n(at,"P",{});var Ek=s(f6);IHe=r(Ek,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),XS=n(Ek,"A",{href:!0});var jwe=s(XS);NHe=r(jwe,"from_pretrained()"),jwe.forEach(t),qHe=r(Ek," class method."),Ek.forEach(t),jHe=i(at),m6=n(at,"P",{});var Ck=s(m6);DHe=r(Ck,"This class cannot be instantiated directly using "),Iae=n(Ck,"CODE",{});var Dwe=s(Iae);GHe=r(Dwe,"__init__()"),Dwe.forEach(t),OHe=r(Ck," (throws an error)."),Ck.forEach(t),VHe=i(at),Lr=n(at,"DIV",{class:!0});var nt=s(Lr);T(g6.$$.fragment,nt),XHe=i(nt),Nae=n(nt,"P",{});var Gwe=s(Nae);zHe=r(Gwe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),Gwe.forEach(t),WHe=i(nt),Ii=n(nt,"P",{});var Sf=s(Ii);QHe=r(Sf,"The configuration class to instantiate is selected based on the "),qae=n(Sf,"CODE",{});var Owe=s(qae);HHe=r(Owe,"model_type"),Owe.forEach(t),UHe=r(Sf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),jae=n(Sf,"CODE",{});var Vwe=s(jae);JHe=r(Vwe,"pretrained_model_name_or_path"),Vwe.forEach(t),YHe=r(Sf,":"),Sf.forEach(t),KHe=i(nt),A=n(nt,"UL",{});var L=s(A);Gf=n(L,"LI",{});var j0=s(Gf);Dae=n(j0,"STRONG",{});var Xwe=s(Dae);ZHe=r(Xwe,"albert"),Xwe.forEach(t),eUe=r(j0," \u2014 "),zS=n(j0,"A",{href:!0});var zwe=s(zS);oUe=r(zwe,"AlbertConfig"),zwe.forEach(t),rUe=r(j0," (ALBERT model)"),j0.forEach(t),tUe=i(L),Of=n(L,"LI",{});var D0=s(Of);Gae=n(D0,"STRONG",{});var Wwe=s(Gae);aUe=r(Wwe,"bart"),Wwe.forEach(t),nUe=r(D0," \u2014 "),WS=n(D0,"A",{href:!0});var Qwe=s(WS);sUe=r(Qwe,"BartConfig"),Qwe.forEach(t),lUe=r(D0," (BART model)"),D0.forEach(t),iUe=i(L),Vf=n(L,"LI",{});var G0=s(Vf);Oae=n(G0,"STRONG",{});var Hwe=s(Oae);dUe=r(Hwe,"beit"),Hwe.forEach(t),cUe=r(G0," \u2014 "),QS=n(G0,"A",{href:!0});var Uwe=s(QS);fUe=r(Uwe,"BeitConfig"),Uwe.forEach(t),mUe=r(G0," (BEiT model)"),G0.forEach(t),gUe=i(L),Xf=n(L,"LI",{});var O0=s(Xf);Vae=n(O0,"STRONG",{});var Jwe=s(Vae);hUe=r(Jwe,"bert"),Jwe.forEach(t),pUe=r(O0," \u2014 "),HS=n(O0,"A",{href:!0});var Ywe=s(HS);_Ue=r(Ywe,"BertConfig"),Ywe.forEach(t),uUe=r(O0," (BERT model)"),O0.forEach(t),bUe=i(L),zf=n(L,"LI",{});var V0=s(zf);Xae=n(V0,"STRONG",{});var Kwe=s(Xae);vUe=r(Kwe,"bert-generation"),Kwe.forEach(t),FUe=r(V0," \u2014 "),US=n(V0,"A",{href:!0});var Zwe=s(US);TUe=r(Zwe,"BertGenerationConfig"),Zwe.forEach(t),MUe=r(V0," (Bert Generation model)"),V0.forEach(t),EUe=i(L),Wf=n(L,"LI",{});var X0=s(Wf);zae=n(X0,"STRONG",{});var eAe=s(zae);CUe=r(eAe,"big_bird"),eAe.forEach(t),wUe=r(X0," \u2014 "),JS=n(X0,"A",{href:!0});var oAe=s(JS);AUe=r(oAe,"BigBirdConfig"),oAe.forEach(t),LUe=r(X0," (BigBird model)"),X0.forEach(t),yUe=i(L),Qf=n(L,"LI",{});var z0=s(Qf);Wae=n(z0,"STRONG",{});var rAe=s(Wae);xUe=r(rAe,"bigbird_pegasus"),rAe.forEach(t),$Ue=r(z0," \u2014 "),YS=n(z0,"A",{href:!0});var tAe=s(YS);kUe=r(tAe,"BigBirdPegasusConfig"),tAe.forEach(t),SUe=r(z0," (BigBird-Pegasus model)"),z0.forEach(t),RUe=i(L),Hf=n(L,"LI",{});var W0=s(Hf);Qae=n(W0,"STRONG",{});var aAe=s(Qae);PUe=r(aAe,"blenderbot"),aAe.forEach(t),BUe=r(W0," \u2014 "),KS=n(W0,"A",{href:!0});var nAe=s(KS);IUe=r(nAe,"BlenderbotConfig"),nAe.forEach(t),NUe=r(W0," (Blenderbot model)"),W0.forEach(t),qUe=i(L),Uf=n(L,"LI",{});var Q0=s(Uf);Hae=n(Q0,"STRONG",{});var sAe=s(Hae);jUe=r(sAe,"blenderbot-small"),sAe.forEach(t),DUe=r(Q0," \u2014 "),ZS=n(Q0,"A",{href:!0});var lAe=s(ZS);GUe=r(lAe,"BlenderbotSmallConfig"),lAe.forEach(t),OUe=r(Q0," (BlenderbotSmall model)"),Q0.forEach(t),VUe=i(L),Jf=n(L,"LI",{});var H0=s(Jf);Uae=n(H0,"STRONG",{});var iAe=s(Uae);XUe=r(iAe,"bloom"),iAe.forEach(t),zUe=r(H0," \u2014 "),eR=n(H0,"A",{href:!0});var dAe=s(eR);WUe=r(dAe,"BloomConfig"),dAe.forEach(t),QUe=r(H0," (BLOOM model)"),H0.forEach(t),HUe=i(L),Yf=n(L,"LI",{});var U0=s(Yf);Jae=n(U0,"STRONG",{});var cAe=s(Jae);UUe=r(cAe,"camembert"),cAe.forEach(t),JUe=r(U0," \u2014 "),oR=n(U0,"A",{href:!0});var fAe=s(oR);YUe=r(fAe,"CamembertConfig"),fAe.forEach(t),KUe=r(U0," (CamemBERT model)"),U0.forEach(t),ZUe=i(L),Kf=n(L,"LI",{});var J0=s(Kf);Yae=n(J0,"STRONG",{});var mAe=s(Yae);eJe=r(mAe,"canine"),mAe.forEach(t),oJe=r(J0," \u2014 "),rR=n(J0,"A",{href:!0});var gAe=s(rR);rJe=r(gAe,"CanineConfig"),gAe.forEach(t),tJe=r(J0," (CANINE model)"),J0.forEach(t),aJe=i(L),Zf=n(L,"LI",{});var Y0=s(Zf);Kae=n(Y0,"STRONG",{});var hAe=s(Kae);nJe=r(hAe,"clip"),hAe.forEach(t),sJe=r(Y0," \u2014 "),tR=n(Y0,"A",{href:!0});var pAe=s(tR);lJe=r(pAe,"CLIPConfig"),pAe.forEach(t),iJe=r(Y0," (CLIP model)"),Y0.forEach(t),dJe=i(L),em=n(L,"LI",{});var K0=s(em);Zae=n(K0,"STRONG",{});var _Ae=s(Zae);cJe=r(_Ae,"codegen"),_Ae.forEach(t),fJe=r(K0," \u2014 "),aR=n(K0,"A",{href:!0});var uAe=s(aR);mJe=r(uAe,"CodeGenConfig"),uAe.forEach(t),gJe=r(K0," (CodeGen model)"),K0.forEach(t),hJe=i(L),om=n(L,"LI",{});var Z0=s(om);ene=n(Z0,"STRONG",{});var bAe=s(ene);pJe=r(bAe,"convbert"),bAe.forEach(t),_Je=r(Z0," \u2014 "),nR=n(Z0,"A",{href:!0});var vAe=s(nR);uJe=r(vAe,"ConvBertConfig"),vAe.forEach(t),bJe=r(Z0," (ConvBERT model)"),Z0.forEach(t),vJe=i(L),rm=n(L,"LI",{});var ew=s(rm);one=n(ew,"STRONG",{});var FAe=s(one);FJe=r(FAe,"convnext"),FAe.forEach(t),TJe=r(ew," \u2014 "),sR=n(ew,"A",{href:!0});var TAe=s(sR);MJe=r(TAe,"ConvNextConfig"),TAe.forEach(t),EJe=r(ew," (ConvNeXT model)"),ew.forEach(t),CJe=i(L),tm=n(L,"LI",{});var ow=s(tm);rne=n(ow,"STRONG",{});var MAe=s(rne);wJe=r(MAe,"ctrl"),MAe.forEach(t),AJe=r(ow," \u2014 "),lR=n(ow,"A",{href:!0});var EAe=s(lR);LJe=r(EAe,"CTRLConfig"),EAe.forEach(t),yJe=r(ow," (CTRL model)"),ow.forEach(t),xJe=i(L),am=n(L,"LI",{});var rw=s(am);tne=n(rw,"STRONG",{});var CAe=s(tne);$Je=r(CAe,"cvt"),CAe.forEach(t),kJe=r(rw," \u2014 "),iR=n(rw,"A",{href:!0});var wAe=s(iR);SJe=r(wAe,"CvtConfig"),wAe.forEach(t),RJe=r(rw," (CvT model)"),rw.forEach(t),PJe=i(L),nm=n(L,"LI",{});var tw=s(nm);ane=n(tw,"STRONG",{});var AAe=s(ane);BJe=r(AAe,"data2vec-audio"),AAe.forEach(t),IJe=r(tw," \u2014 "),dR=n(tw,"A",{href:!0});var LAe=s(dR);NJe=r(LAe,"Data2VecAudioConfig"),LAe.forEach(t),qJe=r(tw," (Data2VecAudio model)"),tw.forEach(t),jJe=i(L),sm=n(L,"LI",{});var aw=s(sm);nne=n(aw,"STRONG",{});var yAe=s(nne);DJe=r(yAe,"data2vec-text"),yAe.forEach(t),GJe=r(aw," \u2014 "),cR=n(aw,"A",{href:!0});var xAe=s(cR);OJe=r(xAe,"Data2VecTextConfig"),xAe.forEach(t),VJe=r(aw," (Data2VecText model)"),aw.forEach(t),XJe=i(L),lm=n(L,"LI",{});var nw=s(lm);sne=n(nw,"STRONG",{});var $Ae=s(sne);zJe=r($Ae,"data2vec-vision"),$Ae.forEach(t),WJe=r(nw," \u2014 "),fR=n(nw,"A",{href:!0});var kAe=s(fR);QJe=r(kAe,"Data2VecVisionConfig"),kAe.forEach(t),HJe=r(nw," (Data2VecVision model)"),nw.forEach(t),UJe=i(L),im=n(L,"LI",{});var sw=s(im);lne=n(sw,"STRONG",{});var SAe=s(lne);JJe=r(SAe,"deberta"),SAe.forEach(t),YJe=r(sw," \u2014 "),mR=n(sw,"A",{href:!0});var RAe=s(mR);KJe=r(RAe,"DebertaConfig"),RAe.forEach(t),ZJe=r(sw," (DeBERTa model)"),sw.forEach(t),eYe=i(L),dm=n(L,"LI",{});var lw=s(dm);ine=n(lw,"STRONG",{});var PAe=s(ine);oYe=r(PAe,"deberta-v2"),PAe.forEach(t),rYe=r(lw," \u2014 "),gR=n(lw,"A",{href:!0});var BAe=s(gR);tYe=r(BAe,"DebertaV2Config"),BAe.forEach(t),aYe=r(lw," (DeBERTa-v2 model)"),lw.forEach(t),nYe=i(L),cm=n(L,"LI",{});var iw=s(cm);dne=n(iw,"STRONG",{});var $tt=s(dne);sYe=r($tt,"decision_transformer"),$tt.forEach(t),lYe=r(iw," \u2014 "),hR=n(iw,"A",{href:!0});var ktt=s(hR);iYe=r(ktt,"DecisionTransformerConfig"),ktt.forEach(t),dYe=r(iw," (Decision Transformer model)"),iw.forEach(t),cYe=i(L),fm=n(L,"LI",{});var IAe=s(fm);cne=n(IAe,"STRONG",{});var Stt=s(cne);fYe=r(Stt,"deit"),Stt.forEach(t),mYe=r(IAe," \u2014 "),pR=n(IAe,"A",{href:!0});var Rtt=s(pR);gYe=r(Rtt,"DeiTConfig"),Rtt.forEach(t),hYe=r(IAe," (DeiT model)"),IAe.forEach(t),pYe=i(L),mm=n(L,"LI",{});var NAe=s(mm);fne=n(NAe,"STRONG",{});var Ptt=s(fne);_Ye=r(Ptt,"detr"),Ptt.forEach(t),uYe=r(NAe," \u2014 "),_R=n(NAe,"A",{href:!0});var Btt=s(_R);bYe=r(Btt,"DetrConfig"),Btt.forEach(t),vYe=r(NAe," (DETR model)"),NAe.forEach(t),FYe=i(L),gm=n(L,"LI",{});var qAe=s(gm);mne=n(qAe,"STRONG",{});var Itt=s(mne);TYe=r(Itt,"distilbert"),Itt.forEach(t),MYe=r(qAe," \u2014 "),uR=n(qAe,"A",{href:!0});var Ntt=s(uR);EYe=r(Ntt,"DistilBertConfig"),Ntt.forEach(t),CYe=r(qAe," (DistilBERT model)"),qAe.forEach(t),wYe=i(L),hm=n(L,"LI",{});var jAe=s(hm);gne=n(jAe,"STRONG",{});var qtt=s(gne);AYe=r(qtt,"dpr"),qtt.forEach(t),LYe=r(jAe," \u2014 "),bR=n(jAe,"A",{href:!0});var jtt=s(bR);yYe=r(jtt,"DPRConfig"),jtt.forEach(t),xYe=r(jAe," (DPR model)"),jAe.forEach(t),$Ye=i(L),pm=n(L,"LI",{});var DAe=s(pm);hne=n(DAe,"STRONG",{});var Dtt=s(hne);kYe=r(Dtt,"dpt"),Dtt.forEach(t),SYe=r(DAe," \u2014 "),vR=n(DAe,"A",{href:!0});var Gtt=s(vR);RYe=r(Gtt,"DPTConfig"),Gtt.forEach(t),PYe=r(DAe," (DPT model)"),DAe.forEach(t),BYe=i(L),_m=n(L,"LI",{});var GAe=s(_m);pne=n(GAe,"STRONG",{});var Ott=s(pne);IYe=r(Ott,"electra"),Ott.forEach(t),NYe=r(GAe," \u2014 "),FR=n(GAe,"A",{href:!0});var Vtt=s(FR);qYe=r(Vtt,"ElectraConfig"),Vtt.forEach(t),jYe=r(GAe," (ELECTRA model)"),GAe.forEach(t),DYe=i(L),um=n(L,"LI",{});var OAe=s(um);_ne=n(OAe,"STRONG",{});var Xtt=s(_ne);GYe=r(Xtt,"encoder-decoder"),Xtt.forEach(t),OYe=r(OAe," \u2014 "),TR=n(OAe,"A",{href:!0});var ztt=s(TR);VYe=r(ztt,"EncoderDecoderConfig"),ztt.forEach(t),XYe=r(OAe," (Encoder decoder model)"),OAe.forEach(t),zYe=i(L),bm=n(L,"LI",{});var VAe=s(bm);une=n(VAe,"STRONG",{});var Wtt=s(une);WYe=r(Wtt,"flaubert"),Wtt.forEach(t),QYe=r(VAe," \u2014 "),MR=n(VAe,"A",{href:!0});var Qtt=s(MR);HYe=r(Qtt,"FlaubertConfig"),Qtt.forEach(t),UYe=r(VAe," (FlauBERT model)"),VAe.forEach(t),JYe=i(L),vm=n(L,"LI",{});var XAe=s(vm);bne=n(XAe,"STRONG",{});var Htt=s(bne);YYe=r(Htt,"flava"),Htt.forEach(t),KYe=r(XAe," \u2014 "),ER=n(XAe,"A",{href:!0});var Utt=s(ER);ZYe=r(Utt,"FlavaConfig"),Utt.forEach(t),eKe=r(XAe," (FLAVA model)"),XAe.forEach(t),oKe=i(L),Fm=n(L,"LI",{});var zAe=s(Fm);vne=n(zAe,"STRONG",{});var Jtt=s(vne);rKe=r(Jtt,"fnet"),Jtt.forEach(t),tKe=r(zAe," \u2014 "),CR=n(zAe,"A",{href:!0});var Ytt=s(CR);aKe=r(Ytt,"FNetConfig"),Ytt.forEach(t),nKe=r(zAe," (FNet model)"),zAe.forEach(t),sKe=i(L),Tm=n(L,"LI",{});var WAe=s(Tm);Fne=n(WAe,"STRONG",{});var Ktt=s(Fne);lKe=r(Ktt,"fsmt"),Ktt.forEach(t),iKe=r(WAe," \u2014 "),wR=n(WAe,"A",{href:!0});var Ztt=s(wR);dKe=r(Ztt,"FSMTConfig"),Ztt.forEach(t),cKe=r(WAe," (FairSeq Machine-Translation model)"),WAe.forEach(t),fKe=i(L),Mm=n(L,"LI",{});var QAe=s(Mm);Tne=n(QAe,"STRONG",{});var eat=s(Tne);mKe=r(eat,"funnel"),eat.forEach(t),gKe=r(QAe," \u2014 "),AR=n(QAe,"A",{href:!0});var oat=s(AR);hKe=r(oat,"FunnelConfig"),oat.forEach(t),pKe=r(QAe," (Funnel Transformer model)"),QAe.forEach(t),_Ke=i(L),Em=n(L,"LI",{});var HAe=s(Em);Mne=n(HAe,"STRONG",{});var rat=s(Mne);uKe=r(rat,"glpn"),rat.forEach(t),bKe=r(HAe," \u2014 "),LR=n(HAe,"A",{href:!0});var tat=s(LR);vKe=r(tat,"GLPNConfig"),tat.forEach(t),FKe=r(HAe," (GLPN model)"),HAe.forEach(t),TKe=i(L),Cm=n(L,"LI",{});var UAe=s(Cm);Ene=n(UAe,"STRONG",{});var aat=s(Ene);MKe=r(aat,"gpt2"),aat.forEach(t),EKe=r(UAe," \u2014 "),yR=n(UAe,"A",{href:!0});var nat=s(yR);CKe=r(nat,"GPT2Config"),nat.forEach(t),wKe=r(UAe," (OpenAI GPT-2 model)"),UAe.forEach(t),AKe=i(L),wm=n(L,"LI",{});var JAe=s(wm);Cne=n(JAe,"STRONG",{});var sat=s(Cne);LKe=r(sat,"gpt_neo"),sat.forEach(t),yKe=r(JAe," \u2014 "),xR=n(JAe,"A",{href:!0});var lat=s(xR);xKe=r(lat,"GPTNeoConfig"),lat.forEach(t),$Ke=r(JAe," (GPT Neo model)"),JAe.forEach(t),kKe=i(L),Am=n(L,"LI",{});var YAe=s(Am);wne=n(YAe,"STRONG",{});var iat=s(wne);SKe=r(iat,"gpt_neox"),iat.forEach(t),RKe=r(YAe," \u2014 "),$R=n(YAe,"A",{href:!0});var dat=s($R);PKe=r(dat,"GPTNeoXConfig"),dat.forEach(t),BKe=r(YAe," (GPT NeoX model)"),YAe.forEach(t),IKe=i(L),Lm=n(L,"LI",{});var KAe=s(Lm);Ane=n(KAe,"STRONG",{});var cat=s(Ane);NKe=r(cat,"gptj"),cat.forEach(t),qKe=r(KAe," \u2014 "),kR=n(KAe,"A",{href:!0});var fat=s(kR);jKe=r(fat,"GPTJConfig"),fat.forEach(t),DKe=r(KAe," (GPT-J model)"),KAe.forEach(t),GKe=i(L),ym=n(L,"LI",{});var ZAe=s(ym);Lne=n(ZAe,"STRONG",{});var mat=s(Lne);OKe=r(mat,"groupvit"),mat.forEach(t),VKe=r(ZAe," \u2014 "),SR=n(ZAe,"A",{href:!0});var gat=s(SR);XKe=r(gat,"GroupViTConfig"),gat.forEach(t),zKe=r(ZAe," (GroupViT model)"),ZAe.forEach(t),WKe=i(L),xm=n(L,"LI",{});var e6e=s(xm);yne=n(e6e,"STRONG",{});var hat=s(yne);QKe=r(hat,"hubert"),hat.forEach(t),HKe=r(e6e," \u2014 "),RR=n(e6e,"A",{href:!0});var pat=s(RR);UKe=r(pat,"HubertConfig"),pat.forEach(t),JKe=r(e6e," (Hubert model)"),e6e.forEach(t),YKe=i(L),$m=n(L,"LI",{});var o6e=s($m);xne=n(o6e,"STRONG",{});var _at=s(xne);KKe=r(_at,"ibert"),_at.forEach(t),ZKe=r(o6e," \u2014 "),PR=n(o6e,"A",{href:!0});var uat=s(PR);eZe=r(uat,"IBertConfig"),uat.forEach(t),oZe=r(o6e," (I-BERT model)"),o6e.forEach(t),rZe=i(L),km=n(L,"LI",{});var r6e=s(km);$ne=n(r6e,"STRONG",{});var bat=s($ne);tZe=r(bat,"imagegpt"),bat.forEach(t),aZe=r(r6e," \u2014 "),BR=n(r6e,"A",{href:!0});var vat=s(BR);nZe=r(vat,"ImageGPTConfig"),vat.forEach(t),sZe=r(r6e," (ImageGPT model)"),r6e.forEach(t),lZe=i(L),Sm=n(L,"LI",{});var t6e=s(Sm);kne=n(t6e,"STRONG",{});var Fat=s(kne);iZe=r(Fat,"layoutlm"),Fat.forEach(t),dZe=r(t6e," \u2014 "),IR=n(t6e,"A",{href:!0});var Tat=s(IR);cZe=r(Tat,"LayoutLMConfig"),Tat.forEach(t),fZe=r(t6e," (LayoutLM model)"),t6e.forEach(t),mZe=i(L),Rm=n(L,"LI",{});var a6e=s(Rm);Sne=n(a6e,"STRONG",{});var Mat=s(Sne);gZe=r(Mat,"layoutlmv2"),Mat.forEach(t),hZe=r(a6e," \u2014 "),NR=n(a6e,"A",{href:!0});var Eat=s(NR);pZe=r(Eat,"LayoutLMv2Config"),Eat.forEach(t),_Ze=r(a6e," (LayoutLMv2 model)"),a6e.forEach(t),uZe=i(L),Pm=n(L,"LI",{});var n6e=s(Pm);Rne=n(n6e,"STRONG",{});var Cat=s(Rne);bZe=r(Cat,"layoutlmv3"),Cat.forEach(t),vZe=r(n6e," \u2014 "),qR=n(n6e,"A",{href:!0});var wat=s(qR);FZe=r(wat,"LayoutLMv3Config"),wat.forEach(t),TZe=r(n6e," (LayoutLMv3 model)"),n6e.forEach(t),MZe=i(L),Bm=n(L,"LI",{});var s6e=s(Bm);Pne=n(s6e,"STRONG",{});var Aat=s(Pne);EZe=r(Aat,"led"),Aat.forEach(t),CZe=r(s6e," \u2014 "),jR=n(s6e,"A",{href:!0});var Lat=s(jR);wZe=r(Lat,"LEDConfig"),Lat.forEach(t),AZe=r(s6e," (LED model)"),s6e.forEach(t),LZe=i(L),Im=n(L,"LI",{});var l6e=s(Im);Bne=n(l6e,"STRONG",{});var yat=s(Bne);yZe=r(yat,"levit"),yat.forEach(t),xZe=r(l6e," \u2014 "),DR=n(l6e,"A",{href:!0});var xat=s(DR);$Ze=r(xat,"LevitConfig"),xat.forEach(t),kZe=r(l6e," (LeViT model)"),l6e.forEach(t),SZe=i(L),Nm=n(L,"LI",{});var i6e=s(Nm);Ine=n(i6e,"STRONG",{});var $at=s(Ine);RZe=r($at,"longformer"),$at.forEach(t),PZe=r(i6e," \u2014 "),GR=n(i6e,"A",{href:!0});var kat=s(GR);BZe=r(kat,"LongformerConfig"),kat.forEach(t),IZe=r(i6e," (Longformer model)"),i6e.forEach(t),NZe=i(L),qm=n(L,"LI",{});var d6e=s(qm);Nne=n(d6e,"STRONG",{});var Sat=s(Nne);qZe=r(Sat,"longt5"),Sat.forEach(t),jZe=r(d6e," \u2014 "),OR=n(d6e,"A",{href:!0});var Rat=s(OR);DZe=r(Rat,"LongT5Config"),Rat.forEach(t),GZe=r(d6e," (LongT5 model)"),d6e.forEach(t),OZe=i(L),jm=n(L,"LI",{});var c6e=s(jm);qne=n(c6e,"STRONG",{});var Pat=s(qne);VZe=r(Pat,"luke"),Pat.forEach(t),XZe=r(c6e," \u2014 "),VR=n(c6e,"A",{href:!0});var Bat=s(VR);zZe=r(Bat,"LukeConfig"),Bat.forEach(t),WZe=r(c6e," (LUKE model)"),c6e.forEach(t),QZe=i(L),Dm=n(L,"LI",{});var f6e=s(Dm);jne=n(f6e,"STRONG",{});var Iat=s(jne);HZe=r(Iat,"lxmert"),Iat.forEach(t),UZe=r(f6e," \u2014 "),XR=n(f6e,"A",{href:!0});var Nat=s(XR);JZe=r(Nat,"LxmertConfig"),Nat.forEach(t),YZe=r(f6e," (LXMERT model)"),f6e.forEach(t),KZe=i(L),Gm=n(L,"LI",{});var m6e=s(Gm);Dne=n(m6e,"STRONG",{});var qat=s(Dne);ZZe=r(qat,"m2m_100"),qat.forEach(t),eeo=r(m6e," \u2014 "),zR=n(m6e,"A",{href:!0});var jat=s(zR);oeo=r(jat,"M2M100Config"),jat.forEach(t),reo=r(m6e," (M2M100 model)"),m6e.forEach(t),teo=i(L),Om=n(L,"LI",{});var g6e=s(Om);Gne=n(g6e,"STRONG",{});var Dat=s(Gne);aeo=r(Dat,"marian"),Dat.forEach(t),neo=r(g6e," \u2014 "),WR=n(g6e,"A",{href:!0});var Gat=s(WR);seo=r(Gat,"MarianConfig"),Gat.forEach(t),leo=r(g6e," (Marian model)"),g6e.forEach(t),ieo=i(L),Vm=n(L,"LI",{});var h6e=s(Vm);One=n(h6e,"STRONG",{});var Oat=s(One);deo=r(Oat,"maskformer"),Oat.forEach(t),ceo=r(h6e," \u2014 "),QR=n(h6e,"A",{href:!0});var Vat=s(QR);feo=r(Vat,"MaskFormerConfig"),Vat.forEach(t),meo=r(h6e," (MaskFormer model)"),h6e.forEach(t),geo=i(L),Xm=n(L,"LI",{});var p6e=s(Xm);Vne=n(p6e,"STRONG",{});var Xat=s(Vne);heo=r(Xat,"mbart"),Xat.forEach(t),peo=r(p6e," \u2014 "),HR=n(p6e,"A",{href:!0});var zat=s(HR);_eo=r(zat,"MBartConfig"),zat.forEach(t),ueo=r(p6e," (mBART model)"),p6e.forEach(t),beo=i(L),zm=n(L,"LI",{});var _6e=s(zm);Xne=n(_6e,"STRONG",{});var Wat=s(Xne);veo=r(Wat,"mctct"),Wat.forEach(t),Feo=r(_6e," \u2014 "),UR=n(_6e,"A",{href:!0});var Qat=s(UR);Teo=r(Qat,"MCTCTConfig"),Qat.forEach(t),Meo=r(_6e," (M-CTC-T model)"),_6e.forEach(t),Eeo=i(L),Wm=n(L,"LI",{});var u6e=s(Wm);zne=n(u6e,"STRONG",{});var Hat=s(zne);Ceo=r(Hat,"megatron-bert"),Hat.forEach(t),weo=r(u6e," \u2014 "),JR=n(u6e,"A",{href:!0});var Uat=s(JR);Aeo=r(Uat,"MegatronBertConfig"),Uat.forEach(t),Leo=r(u6e," (Megatron-BERT model)"),u6e.forEach(t),yeo=i(L),Qm=n(L,"LI",{});var b6e=s(Qm);Wne=n(b6e,"STRONG",{});var Jat=s(Wne);xeo=r(Jat,"mobilebert"),Jat.forEach(t),$eo=r(b6e," \u2014 "),YR=n(b6e,"A",{href:!0});var Yat=s(YR);keo=r(Yat,"MobileBertConfig"),Yat.forEach(t),Seo=r(b6e," (MobileBERT model)"),b6e.forEach(t),Reo=i(L),Hm=n(L,"LI",{});var v6e=s(Hm);Qne=n(v6e,"STRONG",{});var Kat=s(Qne);Peo=r(Kat,"mobilevit"),Kat.forEach(t),Beo=r(v6e," \u2014 "),KR=n(v6e,"A",{href:!0});var Zat=s(KR);Ieo=r(Zat,"MobileViTConfig"),Zat.forEach(t),Neo=r(v6e," (MobileViT model)"),v6e.forEach(t),qeo=i(L),Um=n(L,"LI",{});var F6e=s(Um);Hne=n(F6e,"STRONG",{});var ent=s(Hne);jeo=r(ent,"mpnet"),ent.forEach(t),Deo=r(F6e," \u2014 "),ZR=n(F6e,"A",{href:!0});var ont=s(ZR);Geo=r(ont,"MPNetConfig"),ont.forEach(t),Oeo=r(F6e," (MPNet model)"),F6e.forEach(t),Veo=i(L),Jm=n(L,"LI",{});var T6e=s(Jm);Une=n(T6e,"STRONG",{});var rnt=s(Une);Xeo=r(rnt,"mt5"),rnt.forEach(t),zeo=r(T6e," \u2014 "),eP=n(T6e,"A",{href:!0});var tnt=s(eP);Weo=r(tnt,"MT5Config"),tnt.forEach(t),Qeo=r(T6e," (MT5 model)"),T6e.forEach(t),Heo=i(L),Ym=n(L,"LI",{});var M6e=s(Ym);Jne=n(M6e,"STRONG",{});var ant=s(Jne);Ueo=r(ant,"mvp"),ant.forEach(t),Jeo=r(M6e," \u2014 "),oP=n(M6e,"A",{href:!0});var nnt=s(oP);Yeo=r(nnt,"MvpConfig"),nnt.forEach(t),Keo=r(M6e," (MVP model)"),M6e.forEach(t),Zeo=i(L),Km=n(L,"LI",{});var E6e=s(Km);Yne=n(E6e,"STRONG",{});var snt=s(Yne);eoo=r(snt,"nezha"),snt.forEach(t),ooo=r(E6e," \u2014 "),rP=n(E6e,"A",{href:!0});var lnt=s(rP);roo=r(lnt,"NezhaConfig"),lnt.forEach(t),too=r(E6e," (Nezha model)"),E6e.forEach(t),aoo=i(L),Zm=n(L,"LI",{});var C6e=s(Zm);Kne=n(C6e,"STRONG",{});var int=s(Kne);noo=r(int,"nystromformer"),int.forEach(t),soo=r(C6e," \u2014 "),tP=n(C6e,"A",{href:!0});var dnt=s(tP);loo=r(dnt,"NystromformerConfig"),dnt.forEach(t),ioo=r(C6e," (Nystr\xF6mformer model)"),C6e.forEach(t),doo=i(L),eg=n(L,"LI",{});var w6e=s(eg);Zne=n(w6e,"STRONG",{});var cnt=s(Zne);coo=r(cnt,"openai-gpt"),cnt.forEach(t),foo=r(w6e," \u2014 "),aP=n(w6e,"A",{href:!0});var fnt=s(aP);moo=r(fnt,"OpenAIGPTConfig"),fnt.forEach(t),goo=r(w6e," (OpenAI GPT model)"),w6e.forEach(t),hoo=i(L),og=n(L,"LI",{});var A6e=s(og);ese=n(A6e,"STRONG",{});var mnt=s(ese);poo=r(mnt,"opt"),mnt.forEach(t),_oo=r(A6e," \u2014 "),nP=n(A6e,"A",{href:!0});var gnt=s(nP);uoo=r(gnt,"OPTConfig"),gnt.forEach(t),boo=r(A6e," (OPT model)"),A6e.forEach(t),voo=i(L),rg=n(L,"LI",{});var L6e=s(rg);ose=n(L6e,"STRONG",{});var hnt=s(ose);Foo=r(hnt,"owlvit"),hnt.forEach(t),Too=r(L6e," \u2014 "),sP=n(L6e,"A",{href:!0});var pnt=s(sP);Moo=r(pnt,"OwlViTConfig"),pnt.forEach(t),Eoo=r(L6e," (OWL-ViT model)"),L6e.forEach(t),Coo=i(L),tg=n(L,"LI",{});var y6e=s(tg);rse=n(y6e,"STRONG",{});var _nt=s(rse);woo=r(_nt,"pegasus"),_nt.forEach(t),Aoo=r(y6e," \u2014 "),lP=n(y6e,"A",{href:!0});var unt=s(lP);Loo=r(unt,"PegasusConfig"),unt.forEach(t),yoo=r(y6e," (Pegasus model)"),y6e.forEach(t),xoo=i(L),ag=n(L,"LI",{});var x6e=s(ag);tse=n(x6e,"STRONG",{});var bnt=s(tse);$oo=r(bnt,"perceiver"),bnt.forEach(t),koo=r(x6e," \u2014 "),iP=n(x6e,"A",{href:!0});var vnt=s(iP);Soo=r(vnt,"PerceiverConfig"),vnt.forEach(t),Roo=r(x6e," (Perceiver model)"),x6e.forEach(t),Poo=i(L),ng=n(L,"LI",{});var $6e=s(ng);ase=n($6e,"STRONG",{});var Fnt=s(ase);Boo=r(Fnt,"plbart"),Fnt.forEach(t),Ioo=r($6e," \u2014 "),dP=n($6e,"A",{href:!0});var Tnt=s(dP);Noo=r(Tnt,"PLBartConfig"),Tnt.forEach(t),qoo=r($6e," (PLBart model)"),$6e.forEach(t),joo=i(L),sg=n(L,"LI",{});var k6e=s(sg);nse=n(k6e,"STRONG",{});var Mnt=s(nse);Doo=r(Mnt,"poolformer"),Mnt.forEach(t),Goo=r(k6e," \u2014 "),cP=n(k6e,"A",{href:!0});var Ent=s(cP);Ooo=r(Ent,"PoolFormerConfig"),Ent.forEach(t),Voo=r(k6e," (PoolFormer model)"),k6e.forEach(t),Xoo=i(L),lg=n(L,"LI",{});var S6e=s(lg);sse=n(S6e,"STRONG",{});var Cnt=s(sse);zoo=r(Cnt,"prophetnet"),Cnt.forEach(t),Woo=r(S6e," \u2014 "),fP=n(S6e,"A",{href:!0});var wnt=s(fP);Qoo=r(wnt,"ProphetNetConfig"),wnt.forEach(t),Hoo=r(S6e," (ProphetNet model)"),S6e.forEach(t),Uoo=i(L),ig=n(L,"LI",{});var R6e=s(ig);lse=n(R6e,"STRONG",{});var Ant=s(lse);Joo=r(Ant,"qdqbert"),Ant.forEach(t),Yoo=r(R6e," \u2014 "),mP=n(R6e,"A",{href:!0});var Lnt=s(mP);Koo=r(Lnt,"QDQBertConfig"),Lnt.forEach(t),Zoo=r(R6e," (QDQBert model)"),R6e.forEach(t),ero=i(L),dg=n(L,"LI",{});var P6e=s(dg);ise=n(P6e,"STRONG",{});var ynt=s(ise);oro=r(ynt,"rag"),ynt.forEach(t),rro=r(P6e," \u2014 "),gP=n(P6e,"A",{href:!0});var xnt=s(gP);tro=r(xnt,"RagConfig"),xnt.forEach(t),aro=r(P6e," (RAG model)"),P6e.forEach(t),nro=i(L),cg=n(L,"LI",{});var B6e=s(cg);dse=n(B6e,"STRONG",{});var $nt=s(dse);sro=r($nt,"realm"),$nt.forEach(t),lro=r(B6e," \u2014 "),hP=n(B6e,"A",{href:!0});var knt=s(hP);iro=r(knt,"RealmConfig"),knt.forEach(t),dro=r(B6e," (REALM model)"),B6e.forEach(t),cro=i(L),fg=n(L,"LI",{});var I6e=s(fg);cse=n(I6e,"STRONG",{});var Snt=s(cse);fro=r(Snt,"reformer"),Snt.forEach(t),mro=r(I6e," \u2014 "),pP=n(I6e,"A",{href:!0});var Rnt=s(pP);gro=r(Rnt,"ReformerConfig"),Rnt.forEach(t),hro=r(I6e," (Reformer model)"),I6e.forEach(t),pro=i(L),mg=n(L,"LI",{});var N6e=s(mg);fse=n(N6e,"STRONG",{});var Pnt=s(fse);_ro=r(Pnt,"regnet"),Pnt.forEach(t),uro=r(N6e," \u2014 "),_P=n(N6e,"A",{href:!0});var Bnt=s(_P);bro=r(Bnt,"RegNetConfig"),Bnt.forEach(t),vro=r(N6e," (RegNet model)"),N6e.forEach(t),Fro=i(L),gg=n(L,"LI",{});var q6e=s(gg);mse=n(q6e,"STRONG",{});var Int=s(mse);Tro=r(Int,"rembert"),Int.forEach(t),Mro=r(q6e," \u2014 "),uP=n(q6e,"A",{href:!0});var Nnt=s(uP);Ero=r(Nnt,"RemBertConfig"),Nnt.forEach(t),Cro=r(q6e," (RemBERT model)"),q6e.forEach(t),wro=i(L),hg=n(L,"LI",{});var j6e=s(hg);gse=n(j6e,"STRONG",{});var qnt=s(gse);Aro=r(qnt,"resnet"),qnt.forEach(t),Lro=r(j6e," \u2014 "),bP=n(j6e,"A",{href:!0});var jnt=s(bP);yro=r(jnt,"ResNetConfig"),jnt.forEach(t),xro=r(j6e," (ResNet model)"),j6e.forEach(t),$ro=i(L),pg=n(L,"LI",{});var D6e=s(pg);hse=n(D6e,"STRONG",{});var Dnt=s(hse);kro=r(Dnt,"retribert"),Dnt.forEach(t),Sro=r(D6e," \u2014 "),vP=n(D6e,"A",{href:!0});var Gnt=s(vP);Rro=r(Gnt,"RetriBertConfig"),Gnt.forEach(t),Pro=r(D6e," (RetriBERT model)"),D6e.forEach(t),Bro=i(L),_g=n(L,"LI",{});var G6e=s(_g);pse=n(G6e,"STRONG",{});var Ont=s(pse);Iro=r(Ont,"roberta"),Ont.forEach(t),Nro=r(G6e," \u2014 "),FP=n(G6e,"A",{href:!0});var Vnt=s(FP);qro=r(Vnt,"RobertaConfig"),Vnt.forEach(t),jro=r(G6e," (RoBERTa model)"),G6e.forEach(t),Dro=i(L),ug=n(L,"LI",{});var O6e=s(ug);_se=n(O6e,"STRONG",{});var Xnt=s(_se);Gro=r(Xnt,"roformer"),Xnt.forEach(t),Oro=r(O6e," \u2014 "),TP=n(O6e,"A",{href:!0});var znt=s(TP);Vro=r(znt,"RoFormerConfig"),znt.forEach(t),Xro=r(O6e," (RoFormer model)"),O6e.forEach(t),zro=i(L),bg=n(L,"LI",{});var V6e=s(bg);use=n(V6e,"STRONG",{});var Wnt=s(use);Wro=r(Wnt,"segformer"),Wnt.forEach(t),Qro=r(V6e," \u2014 "),MP=n(V6e,"A",{href:!0});var Qnt=s(MP);Hro=r(Qnt,"SegformerConfig"),Qnt.forEach(t),Uro=r(V6e," (SegFormer model)"),V6e.forEach(t),Jro=i(L),vg=n(L,"LI",{});var X6e=s(vg);bse=n(X6e,"STRONG",{});var Hnt=s(bse);Yro=r(Hnt,"sew"),Hnt.forEach(t),Kro=r(X6e," \u2014 "),EP=n(X6e,"A",{href:!0});var Unt=s(EP);Zro=r(Unt,"SEWConfig"),Unt.forEach(t),eto=r(X6e," (SEW model)"),X6e.forEach(t),oto=i(L),Fg=n(L,"LI",{});var z6e=s(Fg);vse=n(z6e,"STRONG",{});var Jnt=s(vse);rto=r(Jnt,"sew-d"),Jnt.forEach(t),tto=r(z6e," \u2014 "),CP=n(z6e,"A",{href:!0});var Ynt=s(CP);ato=r(Ynt,"SEWDConfig"),Ynt.forEach(t),nto=r(z6e," (SEW-D model)"),z6e.forEach(t),sto=i(L),Tg=n(L,"LI",{});var W6e=s(Tg);Fse=n(W6e,"STRONG",{});var Knt=s(Fse);lto=r(Knt,"speech-encoder-decoder"),Knt.forEach(t),ito=r(W6e," \u2014 "),wP=n(W6e,"A",{href:!0});var Znt=s(wP);dto=r(Znt,"SpeechEncoderDecoderConfig"),Znt.forEach(t),cto=r(W6e," (Speech Encoder decoder model)"),W6e.forEach(t),fto=i(L),Mg=n(L,"LI",{});var Q6e=s(Mg);Tse=n(Q6e,"STRONG",{});var est=s(Tse);mto=r(est,"speech_to_text"),est.forEach(t),gto=r(Q6e," \u2014 "),AP=n(Q6e,"A",{href:!0});var ost=s(AP);hto=r(ost,"Speech2TextConfig"),ost.forEach(t),pto=r(Q6e," (Speech2Text model)"),Q6e.forEach(t),_to=i(L),Eg=n(L,"LI",{});var H6e=s(Eg);Mse=n(H6e,"STRONG",{});var rst=s(Mse);uto=r(rst,"speech_to_text_2"),rst.forEach(t),bto=r(H6e," \u2014 "),LP=n(H6e,"A",{href:!0});var tst=s(LP);vto=r(tst,"Speech2Text2Config"),tst.forEach(t),Fto=r(H6e," (Speech2Text2 model)"),H6e.forEach(t),Tto=i(L),Cg=n(L,"LI",{});var U6e=s(Cg);Ese=n(U6e,"STRONG",{});var ast=s(Ese);Mto=r(ast,"splinter"),ast.forEach(t),Eto=r(U6e," \u2014 "),yP=n(U6e,"A",{href:!0});var nst=s(yP);Cto=r(nst,"SplinterConfig"),nst.forEach(t),wto=r(U6e," (Splinter model)"),U6e.forEach(t),Ato=i(L),wg=n(L,"LI",{});var J6e=s(wg);Cse=n(J6e,"STRONG",{});var sst=s(Cse);Lto=r(sst,"squeezebert"),sst.forEach(t),yto=r(J6e," \u2014 "),xP=n(J6e,"A",{href:!0});var lst=s(xP);xto=r(lst,"SqueezeBertConfig"),lst.forEach(t),$to=r(J6e," (SqueezeBERT model)"),J6e.forEach(t),kto=i(L),Ag=n(L,"LI",{});var Y6e=s(Ag);wse=n(Y6e,"STRONG",{});var ist=s(wse);Sto=r(ist,"swin"),ist.forEach(t),Rto=r(Y6e," \u2014 "),$P=n(Y6e,"A",{href:!0});var dst=s($P);Pto=r(dst,"SwinConfig"),dst.forEach(t),Bto=r(Y6e," (Swin Transformer model)"),Y6e.forEach(t),Ito=i(L),Lg=n(L,"LI",{});var K6e=s(Lg);Ase=n(K6e,"STRONG",{});var cst=s(Ase);Nto=r(cst,"t5"),cst.forEach(t),qto=r(K6e," \u2014 "),kP=n(K6e,"A",{href:!0});var fst=s(kP);jto=r(fst,"T5Config"),fst.forEach(t),Dto=r(K6e," (T5 model)"),K6e.forEach(t),Gto=i(L),yg=n(L,"LI",{});var Z6e=s(yg);Lse=n(Z6e,"STRONG",{});var mst=s(Lse);Oto=r(mst,"tapas"),mst.forEach(t),Vto=r(Z6e," \u2014 "),SP=n(Z6e,"A",{href:!0});var gst=s(SP);Xto=r(gst,"TapasConfig"),gst.forEach(t),zto=r(Z6e," (TAPAS model)"),Z6e.forEach(t),Wto=i(L),xg=n(L,"LI",{});var eLe=s(xg);yse=n(eLe,"STRONG",{});var hst=s(yse);Qto=r(hst,"trajectory_transformer"),hst.forEach(t),Hto=r(eLe," \u2014 "),RP=n(eLe,"A",{href:!0});var pst=s(RP);Uto=r(pst,"TrajectoryTransformerConfig"),pst.forEach(t),Jto=r(eLe," (Trajectory Transformer model)"),eLe.forEach(t),Yto=i(L),$g=n(L,"LI",{});var oLe=s($g);xse=n(oLe,"STRONG",{});var _st=s(xse);Kto=r(_st,"transfo-xl"),_st.forEach(t),Zto=r(oLe," \u2014 "),PP=n(oLe,"A",{href:!0});var ust=s(PP);eao=r(ust,"TransfoXLConfig"),ust.forEach(t),oao=r(oLe," (Transformer-XL model)"),oLe.forEach(t),rao=i(L),kg=n(L,"LI",{});var rLe=s(kg);$se=n(rLe,"STRONG",{});var bst=s($se);tao=r(bst,"trocr"),bst.forEach(t),aao=r(rLe," \u2014 "),BP=n(rLe,"A",{href:!0});var vst=s(BP);nao=r(vst,"TrOCRConfig"),vst.forEach(t),sao=r(rLe," (TrOCR model)"),rLe.forEach(t),lao=i(L),Sg=n(L,"LI",{});var tLe=s(Sg);kse=n(tLe,"STRONG",{});var Fst=s(kse);iao=r(Fst,"unispeech"),Fst.forEach(t),dao=r(tLe," \u2014 "),IP=n(tLe,"A",{href:!0});var Tst=s(IP);cao=r(Tst,"UniSpeechConfig"),Tst.forEach(t),fao=r(tLe," (UniSpeech model)"),tLe.forEach(t),mao=i(L),Rg=n(L,"LI",{});var aLe=s(Rg);Sse=n(aLe,"STRONG",{});var Mst=s(Sse);gao=r(Mst,"unispeech-sat"),Mst.forEach(t),hao=r(aLe," \u2014 "),NP=n(aLe,"A",{href:!0});var Est=s(NP);pao=r(Est,"UniSpeechSatConfig"),Est.forEach(t),_ao=r(aLe," (UniSpeechSat model)"),aLe.forEach(t),uao=i(L),Pg=n(L,"LI",{});var nLe=s(Pg);Rse=n(nLe,"STRONG",{});var Cst=s(Rse);bao=r(Cst,"van"),Cst.forEach(t),vao=r(nLe," \u2014 "),qP=n(nLe,"A",{href:!0});var wst=s(qP);Fao=r(wst,"VanConfig"),wst.forEach(t),Tao=r(nLe," (VAN model)"),nLe.forEach(t),Mao=i(L),Bg=n(L,"LI",{});var sLe=s(Bg);Pse=n(sLe,"STRONG",{});var Ast=s(Pse);Eao=r(Ast,"vilt"),Ast.forEach(t),Cao=r(sLe," \u2014 "),jP=n(sLe,"A",{href:!0});var Lst=s(jP);wao=r(Lst,"ViltConfig"),Lst.forEach(t),Aao=r(sLe," (ViLT model)"),sLe.forEach(t),Lao=i(L),Ig=n(L,"LI",{});var lLe=s(Ig);Bse=n(lLe,"STRONG",{});var yst=s(Bse);yao=r(yst,"vision-encoder-decoder"),yst.forEach(t),xao=r(lLe," \u2014 "),DP=n(lLe,"A",{href:!0});var xst=s(DP);$ao=r(xst,"VisionEncoderDecoderConfig"),xst.forEach(t),kao=r(lLe," (Vision Encoder decoder model)"),lLe.forEach(t),Sao=i(L),Ng=n(L,"LI",{});var iLe=s(Ng);Ise=n(iLe,"STRONG",{});var $st=s(Ise);Rao=r($st,"vision-text-dual-encoder"),$st.forEach(t),Pao=r(iLe," \u2014 "),GP=n(iLe,"A",{href:!0});var kst=s(GP);Bao=r(kst,"VisionTextDualEncoderConfig"),kst.forEach(t),Iao=r(iLe," (VisionTextDualEncoder model)"),iLe.forEach(t),Nao=i(L),qg=n(L,"LI",{});var dLe=s(qg);Nse=n(dLe,"STRONG",{});var Sst=s(Nse);qao=r(Sst,"visual_bert"),Sst.forEach(t),jao=r(dLe," \u2014 "),OP=n(dLe,"A",{href:!0});var Rst=s(OP);Dao=r(Rst,"VisualBertConfig"),Rst.forEach(t),Gao=r(dLe," (VisualBERT model)"),dLe.forEach(t),Oao=i(L),jg=n(L,"LI",{});var cLe=s(jg);qse=n(cLe,"STRONG",{});var Pst=s(qse);Vao=r(Pst,"vit"),Pst.forEach(t),Xao=r(cLe," \u2014 "),VP=n(cLe,"A",{href:!0});var Bst=s(VP);zao=r(Bst,"ViTConfig"),Bst.forEach(t),Wao=r(cLe," (ViT model)"),cLe.forEach(t),Qao=i(L),Dg=n(L,"LI",{});var fLe=s(Dg);jse=n(fLe,"STRONG",{});var Ist=s(jse);Hao=r(Ist,"vit_mae"),Ist.forEach(t),Uao=r(fLe," \u2014 "),XP=n(fLe,"A",{href:!0});var Nst=s(XP);Jao=r(Nst,"ViTMAEConfig"),Nst.forEach(t),Yao=r(fLe," (ViTMAE model)"),fLe.forEach(t),Kao=i(L),Gg=n(L,"LI",{});var mLe=s(Gg);Dse=n(mLe,"STRONG",{});var qst=s(Dse);Zao=r(qst,"wav2vec2"),qst.forEach(t),eno=r(mLe," \u2014 "),zP=n(mLe,"A",{href:!0});var jst=s(zP);ono=r(jst,"Wav2Vec2Config"),jst.forEach(t),rno=r(mLe," (Wav2Vec2 model)"),mLe.forEach(t),tno=i(L),Og=n(L,"LI",{});var gLe=s(Og);Gse=n(gLe,"STRONG",{});var Dst=s(Gse);ano=r(Dst,"wav2vec2-conformer"),Dst.forEach(t),nno=r(gLe," \u2014 "),WP=n(gLe,"A",{href:!0});var Gst=s(WP);sno=r(Gst,"Wav2Vec2ConformerConfig"),Gst.forEach(t),lno=r(gLe," (Wav2Vec2-Conformer model)"),gLe.forEach(t),ino=i(L),Vg=n(L,"LI",{});var hLe=s(Vg);Ose=n(hLe,"STRONG",{});var Ost=s(Ose);dno=r(Ost,"wavlm"),Ost.forEach(t),cno=r(hLe," \u2014 "),QP=n(hLe,"A",{href:!0});var Vst=s(QP);fno=r(Vst,"WavLMConfig"),Vst.forEach(t),mno=r(hLe," (WavLM model)"),hLe.forEach(t),gno=i(L),Xg=n(L,"LI",{});var pLe=s(Xg);Vse=n(pLe,"STRONG",{});var Xst=s(Vse);hno=r(Xst,"xglm"),Xst.forEach(t),pno=r(pLe," \u2014 "),HP=n(pLe,"A",{href:!0});var zst=s(HP);_no=r(zst,"XGLMConfig"),zst.forEach(t),uno=r(pLe," (XGLM model)"),pLe.forEach(t),bno=i(L),zg=n(L,"LI",{});var _Le=s(zg);Xse=n(_Le,"STRONG",{});var Wst=s(Xse);vno=r(Wst,"xlm"),Wst.forEach(t),Fno=r(_Le," \u2014 "),UP=n(_Le,"A",{href:!0});var Qst=s(UP);Tno=r(Qst,"XLMConfig"),Qst.forEach(t),Mno=r(_Le," (XLM model)"),_Le.forEach(t),Eno=i(L),Wg=n(L,"LI",{});var uLe=s(Wg);zse=n(uLe,"STRONG",{});var Hst=s(zse);Cno=r(Hst,"xlm-prophetnet"),Hst.forEach(t),wno=r(uLe," \u2014 "),JP=n(uLe,"A",{href:!0});var Ust=s(JP);Ano=r(Ust,"XLMProphetNetConfig"),Ust.forEach(t),Lno=r(uLe," (XLM-ProphetNet model)"),uLe.forEach(t),yno=i(L),Qg=n(L,"LI",{});var bLe=s(Qg);Wse=n(bLe,"STRONG",{});var Jst=s(Wse);xno=r(Jst,"xlm-roberta"),Jst.forEach(t),$no=r(bLe," \u2014 "),YP=n(bLe,"A",{href:!0});var Yst=s(YP);kno=r(Yst,"XLMRobertaConfig"),Yst.forEach(t),Sno=r(bLe," (XLM-RoBERTa model)"),bLe.forEach(t),Rno=i(L),Hg=n(L,"LI",{});var vLe=s(Hg);Qse=n(vLe,"STRONG",{});var Kst=s(Qse);Pno=r(Kst,"xlm-roberta-xl"),Kst.forEach(t),Bno=r(vLe," \u2014 "),KP=n(vLe,"A",{href:!0});var Zst=s(KP);Ino=r(Zst,"XLMRobertaXLConfig"),Zst.forEach(t),Nno=r(vLe," (XLM-RoBERTa-XL model)"),vLe.forEach(t),qno=i(L),Ug=n(L,"LI",{});var FLe=s(Ug);Hse=n(FLe,"STRONG",{});var elt=s(Hse);jno=r(elt,"xlnet"),elt.forEach(t),Dno=r(FLe," \u2014 "),ZP=n(FLe,"A",{href:!0});var olt=s(ZP);Gno=r(olt,"XLNetConfig"),olt.forEach(t),Ono=r(FLe," (XLNet model)"),FLe.forEach(t),Vno=i(L),Jg=n(L,"LI",{});var TLe=s(Jg);Use=n(TLe,"STRONG",{});var rlt=s(Use);Xno=r(rlt,"yolos"),rlt.forEach(t),zno=r(TLe," \u2014 "),eB=n(TLe,"A",{href:!0});var tlt=s(eB);Wno=r(tlt,"YolosConfig"),tlt.forEach(t),Qno=r(TLe," (YOLOS model)"),TLe.forEach(t),Hno=i(L),Yg=n(L,"LI",{});var MLe=s(Yg);Jse=n(MLe,"STRONG",{});var alt=s(Jse);Uno=r(alt,"yoso"),alt.forEach(t),Jno=r(MLe," \u2014 "),oB=n(MLe,"A",{href:!0});var nlt=s(oB);Yno=r(nlt,"YosoConfig"),nlt.forEach(t),Kno=r(MLe," (YOSO model)"),MLe.forEach(t),L.forEach(t),Zno=i(nt),T(Kg.$$.fragment,nt),nt.forEach(t),eso=i(at),Zg=n(at,"DIV",{class:!0});var pWe=s(Zg);T(h6.$$.fragment,pWe),oso=i(pWe),Yse=n(pWe,"P",{});var slt=s(Yse);rso=r(slt,"Register a new configuration for this class."),slt.forEach(t),pWe.forEach(t),at.forEach(t),_Xe=i(f),Ni=n(f,"H2",{class:!0});var _We=s(Ni);eh=n(_We,"A",{id:!0,class:!0,href:!0});var llt=s(eh);Kse=n(llt,"SPAN",{});var ilt=s(Kse);T(p6.$$.fragment,ilt),ilt.forEach(t),llt.forEach(t),tso=i(_We),Zse=n(_We,"SPAN",{});var dlt=s(Zse);aso=r(dlt,"AutoTokenizer"),dlt.forEach(t),_We.forEach(t),uXe=i(f),Ao=n(f,"DIV",{class:!0});var Ks=s(Ao);T(_6.$$.fragment,Ks),nso=i(Ks),u6=n(Ks,"P",{});var uWe=s(u6);sso=r(uWe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),rB=n(uWe,"A",{href:!0});var clt=s(rB);lso=r(clt,"AutoTokenizer.from_pretrained()"),clt.forEach(t),iso=r(uWe," class method."),uWe.forEach(t),dso=i(Ks),b6=n(Ks,"P",{});var bWe=s(b6);cso=r(bWe,"This class cannot be instantiated directly using "),ele=n(bWe,"CODE",{});var flt=s(ele);fso=r(flt,"__init__()"),flt.forEach(t),mso=r(bWe," (throws an error)."),bWe.forEach(t),gso=i(Ks),yr=n(Ks,"DIV",{class:!0});var Zs=s(yr);T(v6.$$.fragment,Zs),hso=i(Zs),ole=n(Zs,"P",{});var mlt=s(ole);pso=r(mlt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),mlt.forEach(t),_so=i(Zs),Pa=n(Zs,"P",{});var dw=s(Pa);uso=r(dw,"The tokenizer class to instantiate is selected based on the "),rle=n(dw,"CODE",{});var glt=s(rle);bso=r(glt,"model_type"),glt.forEach(t),vso=r(dw,` property of the config object (either
passed as an argument or loaded from `),tle=n(dw,"CODE",{});var hlt=s(tle);Fso=r(hlt,"pretrained_model_name_or_path"),hlt.forEach(t),Tso=r(dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ale=n(dw,"CODE",{});var plt=s(ale);Mso=r(plt,"pretrained_model_name_or_path"),plt.forEach(t),Eso=r(dw,":"),dw.forEach(t),Cso=i(Zs),k=n(Zs,"UL",{});var S=s(k);jn=n(S,"LI",{});var wk=s(jn);nle=n(wk,"STRONG",{});var _lt=s(nle);wso=r(_lt,"albert"),_lt.forEach(t),Aso=r(wk," \u2014 "),tB=n(wk,"A",{href:!0});var ult=s(tB);Lso=r(ult,"AlbertTokenizer"),ult.forEach(t),yso=r(wk," or "),aB=n(wk,"A",{href:!0});var blt=s(aB);xso=r(blt,"AlbertTokenizerFast"),blt.forEach(t),$so=r(wk," (ALBERT model)"),wk.forEach(t),kso=i(S),Dn=n(S,"LI",{});var Ak=s(Dn);sle=n(Ak,"STRONG",{});var vlt=s(sle);Sso=r(vlt,"bart"),vlt.forEach(t),Rso=r(Ak," \u2014 "),nB=n(Ak,"A",{href:!0});var Flt=s(nB);Pso=r(Flt,"BartTokenizer"),Flt.forEach(t),Bso=r(Ak," or "),sB=n(Ak,"A",{href:!0});var Tlt=s(sB);Iso=r(Tlt,"BartTokenizerFast"),Tlt.forEach(t),Nso=r(Ak," (BART model)"),Ak.forEach(t),qso=i(S),Gn=n(S,"LI",{});var Lk=s(Gn);lle=n(Lk,"STRONG",{});var Mlt=s(lle);jso=r(Mlt,"barthez"),Mlt.forEach(t),Dso=r(Lk," \u2014 "),lB=n(Lk,"A",{href:!0});var Elt=s(lB);Gso=r(Elt,"BarthezTokenizer"),Elt.forEach(t),Oso=r(Lk," or "),iB=n(Lk,"A",{href:!0});var Clt=s(iB);Vso=r(Clt,"BarthezTokenizerFast"),Clt.forEach(t),Xso=r(Lk," (BARThez model)"),Lk.forEach(t),zso=i(S),oh=n(S,"LI",{});var ELe=s(oh);ile=n(ELe,"STRONG",{});var wlt=s(ile);Wso=r(wlt,"bartpho"),wlt.forEach(t),Qso=r(ELe," \u2014 "),dB=n(ELe,"A",{href:!0});var Alt=s(dB);Hso=r(Alt,"BartphoTokenizer"),Alt.forEach(t),Uso=r(ELe," (BARTpho model)"),ELe.forEach(t),Jso=i(S),On=n(S,"LI",{});var yk=s(On);dle=n(yk,"STRONG",{});var Llt=s(dle);Yso=r(Llt,"bert"),Llt.forEach(t),Kso=r(yk," \u2014 "),cB=n(yk,"A",{href:!0});var ylt=s(cB);Zso=r(ylt,"BertTokenizer"),ylt.forEach(t),elo=r(yk," or "),fB=n(yk,"A",{href:!0});var xlt=s(fB);olo=r(xlt,"BertTokenizerFast"),xlt.forEach(t),rlo=r(yk," (BERT model)"),yk.forEach(t),tlo=i(S),rh=n(S,"LI",{});var CLe=s(rh);cle=n(CLe,"STRONG",{});var $lt=s(cle);alo=r($lt,"bert-generation"),$lt.forEach(t),nlo=r(CLe," \u2014 "),mB=n(CLe,"A",{href:!0});var klt=s(mB);slo=r(klt,"BertGenerationTokenizer"),klt.forEach(t),llo=r(CLe," (Bert Generation model)"),CLe.forEach(t),ilo=i(S),th=n(S,"LI",{});var wLe=s(th);fle=n(wLe,"STRONG",{});var Slt=s(fle);dlo=r(Slt,"bert-japanese"),Slt.forEach(t),clo=r(wLe," \u2014 "),gB=n(wLe,"A",{href:!0});var Rlt=s(gB);flo=r(Rlt,"BertJapaneseTokenizer"),Rlt.forEach(t),mlo=r(wLe," (BertJapanese model)"),wLe.forEach(t),glo=i(S),ah=n(S,"LI",{});var ALe=s(ah);mle=n(ALe,"STRONG",{});var Plt=s(mle);hlo=r(Plt,"bertweet"),Plt.forEach(t),plo=r(ALe," \u2014 "),hB=n(ALe,"A",{href:!0});var Blt=s(hB);_lo=r(Blt,"BertweetTokenizer"),Blt.forEach(t),ulo=r(ALe," (BERTweet model)"),ALe.forEach(t),blo=i(S),Vn=n(S,"LI",{});var xk=s(Vn);gle=n(xk,"STRONG",{});var Ilt=s(gle);vlo=r(Ilt,"big_bird"),Ilt.forEach(t),Flo=r(xk," \u2014 "),pB=n(xk,"A",{href:!0});var Nlt=s(pB);Tlo=r(Nlt,"BigBirdTokenizer"),Nlt.forEach(t),Mlo=r(xk," or "),_B=n(xk,"A",{href:!0});var qlt=s(_B);Elo=r(qlt,"BigBirdTokenizerFast"),qlt.forEach(t),Clo=r(xk," (BigBird model)"),xk.forEach(t),wlo=i(S),Xn=n(S,"LI",{});var $k=s(Xn);hle=n($k,"STRONG",{});var jlt=s(hle);Alo=r(jlt,"bigbird_pegasus"),jlt.forEach(t),Llo=r($k," \u2014 "),uB=n($k,"A",{href:!0});var Dlt=s(uB);ylo=r(Dlt,"PegasusTokenizer"),Dlt.forEach(t),xlo=r($k," or "),bB=n($k,"A",{href:!0});var Glt=s(bB);$lo=r(Glt,"PegasusTokenizerFast"),Glt.forEach(t),klo=r($k," (BigBird-Pegasus model)"),$k.forEach(t),Slo=i(S),zn=n(S,"LI",{});var kk=s(zn);ple=n(kk,"STRONG",{});var Olt=s(ple);Rlo=r(Olt,"blenderbot"),Olt.forEach(t),Plo=r(kk," \u2014 "),vB=n(kk,"A",{href:!0});var Vlt=s(vB);Blo=r(Vlt,"BlenderbotTokenizer"),Vlt.forEach(t),Ilo=r(kk," or "),FB=n(kk,"A",{href:!0});var Xlt=s(FB);Nlo=r(Xlt,"BlenderbotTokenizerFast"),Xlt.forEach(t),qlo=r(kk," (Blenderbot model)"),kk.forEach(t),jlo=i(S),nh=n(S,"LI",{});var LLe=s(nh);_le=n(LLe,"STRONG",{});var zlt=s(_le);Dlo=r(zlt,"blenderbot-small"),zlt.forEach(t),Glo=r(LLe," \u2014 "),TB=n(LLe,"A",{href:!0});var Wlt=s(TB);Olo=r(Wlt,"BlenderbotSmallTokenizer"),Wlt.forEach(t),Vlo=r(LLe," (BlenderbotSmall model)"),LLe.forEach(t),Xlo=i(S),sh=n(S,"LI",{});var yLe=s(sh);ule=n(yLe,"STRONG",{});var Qlt=s(ule);zlo=r(Qlt,"bloom"),Qlt.forEach(t),Wlo=r(yLe," \u2014 "),MB=n(yLe,"A",{href:!0});var Hlt=s(MB);Qlo=r(Hlt,"BloomTokenizerFast"),Hlt.forEach(t),Hlo=r(yLe," (BLOOM model)"),yLe.forEach(t),Ulo=i(S),lh=n(S,"LI",{});var xLe=s(lh);ble=n(xLe,"STRONG",{});var Ult=s(ble);Jlo=r(Ult,"byt5"),Ult.forEach(t),Ylo=r(xLe," \u2014 "),EB=n(xLe,"A",{href:!0});var Jlt=s(EB);Klo=r(Jlt,"ByT5Tokenizer"),Jlt.forEach(t),Zlo=r(xLe," (ByT5 model)"),xLe.forEach(t),eio=i(S),Wn=n(S,"LI",{});var Sk=s(Wn);vle=n(Sk,"STRONG",{});var Ylt=s(vle);oio=r(Ylt,"camembert"),Ylt.forEach(t),rio=r(Sk," \u2014 "),CB=n(Sk,"A",{href:!0});var Klt=s(CB);tio=r(Klt,"CamembertTokenizer"),Klt.forEach(t),aio=r(Sk," or "),wB=n(Sk,"A",{href:!0});var Zlt=s(wB);nio=r(Zlt,"CamembertTokenizerFast"),Zlt.forEach(t),sio=r(Sk," (CamemBERT model)"),Sk.forEach(t),lio=i(S),ih=n(S,"LI",{});var $Le=s(ih);Fle=n($Le,"STRONG",{});var eit=s(Fle);iio=r(eit,"canine"),eit.forEach(t),dio=r($Le," \u2014 "),AB=n($Le,"A",{href:!0});var oit=s(AB);cio=r(oit,"CanineTokenizer"),oit.forEach(t),fio=r($Le," (CANINE model)"),$Le.forEach(t),mio=i(S),Qn=n(S,"LI",{});var Rk=s(Qn);Tle=n(Rk,"STRONG",{});var rit=s(Tle);gio=r(rit,"clip"),rit.forEach(t),hio=r(Rk," \u2014 "),LB=n(Rk,"A",{href:!0});var tit=s(LB);pio=r(tit,"CLIPTokenizer"),tit.forEach(t),_io=r(Rk," or "),yB=n(Rk,"A",{href:!0});var ait=s(yB);uio=r(ait,"CLIPTokenizerFast"),ait.forEach(t),bio=r(Rk," (CLIP model)"),Rk.forEach(t),vio=i(S),Hn=n(S,"LI",{});var Pk=s(Hn);Mle=n(Pk,"STRONG",{});var nit=s(Mle);Fio=r(nit,"codegen"),nit.forEach(t),Tio=r(Pk," \u2014 "),xB=n(Pk,"A",{href:!0});var sit=s(xB);Mio=r(sit,"CodeGenTokenizer"),sit.forEach(t),Eio=r(Pk," or "),$B=n(Pk,"A",{href:!0});var lit=s($B);Cio=r(lit,"CodeGenTokenizerFast"),lit.forEach(t),wio=r(Pk," (CodeGen model)"),Pk.forEach(t),Aio=i(S),Un=n(S,"LI",{});var Bk=s(Un);Ele=n(Bk,"STRONG",{});var iit=s(Ele);Lio=r(iit,"convbert"),iit.forEach(t),yio=r(Bk," \u2014 "),kB=n(Bk,"A",{href:!0});var dit=s(kB);xio=r(dit,"ConvBertTokenizer"),dit.forEach(t),$io=r(Bk," or "),SB=n(Bk,"A",{href:!0});var cit=s(SB);kio=r(cit,"ConvBertTokenizerFast"),cit.forEach(t),Sio=r(Bk," (ConvBERT model)"),Bk.forEach(t),Rio=i(S),Jn=n(S,"LI",{});var Ik=s(Jn);Cle=n(Ik,"STRONG",{});var fit=s(Cle);Pio=r(fit,"cpm"),fit.forEach(t),Bio=r(Ik," \u2014 "),RB=n(Ik,"A",{href:!0});var mit=s(RB);Iio=r(mit,"CpmTokenizer"),mit.forEach(t),Nio=r(Ik," or "),PB=n(Ik,"A",{href:!0});var git=s(PB);qio=r(git,"CpmTokenizerFast"),git.forEach(t),jio=r(Ik," (CPM model)"),Ik.forEach(t),Dio=i(S),dh=n(S,"LI",{});var kLe=s(dh);wle=n(kLe,"STRONG",{});var hit=s(wle);Gio=r(hit,"ctrl"),hit.forEach(t),Oio=r(kLe," \u2014 "),BB=n(kLe,"A",{href:!0});var pit=s(BB);Vio=r(pit,"CTRLTokenizer"),pit.forEach(t),Xio=r(kLe," (CTRL model)"),kLe.forEach(t),zio=i(S),Yn=n(S,"LI",{});var Nk=s(Yn);Ale=n(Nk,"STRONG",{});var _it=s(Ale);Wio=r(_it,"data2vec-text"),_it.forEach(t),Qio=r(Nk," \u2014 "),IB=n(Nk,"A",{href:!0});var uit=s(IB);Hio=r(uit,"RobertaTokenizer"),uit.forEach(t),Uio=r(Nk," or "),NB=n(Nk,"A",{href:!0});var bit=s(NB);Jio=r(bit,"RobertaTokenizerFast"),bit.forEach(t),Yio=r(Nk," (Data2VecText model)"),Nk.forEach(t),Kio=i(S),Kn=n(S,"LI",{});var qk=s(Kn);Lle=n(qk,"STRONG",{});var vit=s(Lle);Zio=r(vit,"deberta"),vit.forEach(t),edo=r(qk," \u2014 "),qB=n(qk,"A",{href:!0});var Fit=s(qB);odo=r(Fit,"DebertaTokenizer"),Fit.forEach(t),rdo=r(qk," or "),jB=n(qk,"A",{href:!0});var Tit=s(jB);tdo=r(Tit,"DebertaTokenizerFast"),Tit.forEach(t),ado=r(qk," (DeBERTa model)"),qk.forEach(t),ndo=i(S),Zn=n(S,"LI",{});var jk=s(Zn);yle=n(jk,"STRONG",{});var Mit=s(yle);sdo=r(Mit,"deberta-v2"),Mit.forEach(t),ldo=r(jk," \u2014 "),DB=n(jk,"A",{href:!0});var Eit=s(DB);ido=r(Eit,"DebertaV2Tokenizer"),Eit.forEach(t),ddo=r(jk," or "),GB=n(jk,"A",{href:!0});var Cit=s(GB);cdo=r(Cit,"DebertaV2TokenizerFast"),Cit.forEach(t),fdo=r(jk," (DeBERTa-v2 model)"),jk.forEach(t),mdo=i(S),es=n(S,"LI",{});var Dk=s(es);xle=n(Dk,"STRONG",{});var wit=s(xle);gdo=r(wit,"distilbert"),wit.forEach(t),hdo=r(Dk," \u2014 "),OB=n(Dk,"A",{href:!0});var Ait=s(OB);pdo=r(Ait,"DistilBertTokenizer"),Ait.forEach(t),_do=r(Dk," or "),VB=n(Dk,"A",{href:!0});var Lit=s(VB);udo=r(Lit,"DistilBertTokenizerFast"),Lit.forEach(t),bdo=r(Dk," (DistilBERT model)"),Dk.forEach(t),vdo=i(S),os=n(S,"LI",{});var Gk=s(os);$le=n(Gk,"STRONG",{});var yit=s($le);Fdo=r(yit,"dpr"),yit.forEach(t),Tdo=r(Gk," \u2014 "),XB=n(Gk,"A",{href:!0});var xit=s(XB);Mdo=r(xit,"DPRQuestionEncoderTokenizer"),xit.forEach(t),Edo=r(Gk," or "),zB=n(Gk,"A",{href:!0});var $it=s(zB);Cdo=r($it,"DPRQuestionEncoderTokenizerFast"),$it.forEach(t),wdo=r(Gk," (DPR model)"),Gk.forEach(t),Ado=i(S),rs=n(S,"LI",{});var Ok=s(rs);kle=n(Ok,"STRONG",{});var kit=s(kle);Ldo=r(kit,"electra"),kit.forEach(t),ydo=r(Ok," \u2014 "),WB=n(Ok,"A",{href:!0});var Sit=s(WB);xdo=r(Sit,"ElectraTokenizer"),Sit.forEach(t),$do=r(Ok," or "),QB=n(Ok,"A",{href:!0});var Rit=s(QB);kdo=r(Rit,"ElectraTokenizerFast"),Rit.forEach(t),Sdo=r(Ok," (ELECTRA model)"),Ok.forEach(t),Rdo=i(S),ch=n(S,"LI",{});var SLe=s(ch);Sle=n(SLe,"STRONG",{});var Pit=s(Sle);Pdo=r(Pit,"flaubert"),Pit.forEach(t),Bdo=r(SLe," \u2014 "),HB=n(SLe,"A",{href:!0});var Bit=s(HB);Ido=r(Bit,"FlaubertTokenizer"),Bit.forEach(t),Ndo=r(SLe," (FlauBERT model)"),SLe.forEach(t),qdo=i(S),ts=n(S,"LI",{});var Vk=s(ts);Rle=n(Vk,"STRONG",{});var Iit=s(Rle);jdo=r(Iit,"fnet"),Iit.forEach(t),Ddo=r(Vk," \u2014 "),UB=n(Vk,"A",{href:!0});var Nit=s(UB);Gdo=r(Nit,"FNetTokenizer"),Nit.forEach(t),Odo=r(Vk," or "),JB=n(Vk,"A",{href:!0});var qit=s(JB);Vdo=r(qit,"FNetTokenizerFast"),qit.forEach(t),Xdo=r(Vk," (FNet model)"),Vk.forEach(t),zdo=i(S),fh=n(S,"LI",{});var RLe=s(fh);Ple=n(RLe,"STRONG",{});var jit=s(Ple);Wdo=r(jit,"fsmt"),jit.forEach(t),Qdo=r(RLe," \u2014 "),YB=n(RLe,"A",{href:!0});var Dit=s(YB);Hdo=r(Dit,"FSMTTokenizer"),Dit.forEach(t),Udo=r(RLe," (FairSeq Machine-Translation model)"),RLe.forEach(t),Jdo=i(S),as=n(S,"LI",{});var Xk=s(as);Ble=n(Xk,"STRONG",{});var Git=s(Ble);Ydo=r(Git,"funnel"),Git.forEach(t),Kdo=r(Xk," \u2014 "),KB=n(Xk,"A",{href:!0});var Oit=s(KB);Zdo=r(Oit,"FunnelTokenizer"),Oit.forEach(t),eco=r(Xk," or "),ZB=n(Xk,"A",{href:!0});var Vit=s(ZB);oco=r(Vit,"FunnelTokenizerFast"),Vit.forEach(t),rco=r(Xk," (Funnel Transformer model)"),Xk.forEach(t),tco=i(S),ns=n(S,"LI",{});var zk=s(ns);Ile=n(zk,"STRONG",{});var Xit=s(Ile);aco=r(Xit,"gpt2"),Xit.forEach(t),nco=r(zk," \u2014 "),eI=n(zk,"A",{href:!0});var zit=s(eI);sco=r(zit,"GPT2Tokenizer"),zit.forEach(t),lco=r(zk," or "),oI=n(zk,"A",{href:!0});var Wit=s(oI);ico=r(Wit,"GPT2TokenizerFast"),Wit.forEach(t),dco=r(zk," (OpenAI GPT-2 model)"),zk.forEach(t),cco=i(S),ss=n(S,"LI",{});var Wk=s(ss);Nle=n(Wk,"STRONG",{});var Qit=s(Nle);fco=r(Qit,"gpt_neo"),Qit.forEach(t),mco=r(Wk," \u2014 "),rI=n(Wk,"A",{href:!0});var Hit=s(rI);gco=r(Hit,"GPT2Tokenizer"),Hit.forEach(t),hco=r(Wk," or "),tI=n(Wk,"A",{href:!0});var Uit=s(tI);pco=r(Uit,"GPT2TokenizerFast"),Uit.forEach(t),_co=r(Wk," (GPT Neo model)"),Wk.forEach(t),uco=i(S),mh=n(S,"LI",{});var PLe=s(mh);qle=n(PLe,"STRONG",{});var Jit=s(qle);bco=r(Jit,"gpt_neox"),Jit.forEach(t),vco=r(PLe," \u2014 "),aI=n(PLe,"A",{href:!0});var Yit=s(aI);Fco=r(Yit,"GPTNeoXTokenizerFast"),Yit.forEach(t),Tco=r(PLe," (GPT NeoX model)"),PLe.forEach(t),Mco=i(S),ls=n(S,"LI",{});var Qk=s(ls);jle=n(Qk,"STRONG",{});var Kit=s(jle);Eco=r(Kit,"gptj"),Kit.forEach(t),Cco=r(Qk," \u2014 "),nI=n(Qk,"A",{href:!0});var Zit=s(nI);wco=r(Zit,"GPT2Tokenizer"),Zit.forEach(t),Aco=r(Qk," or "),sI=n(Qk,"A",{href:!0});var edt=s(sI);Lco=r(edt,"GPT2TokenizerFast"),edt.forEach(t),yco=r(Qk," (GPT-J model)"),Qk.forEach(t),xco=i(S),is=n(S,"LI",{});var Hk=s(is);Dle=n(Hk,"STRONG",{});var odt=s(Dle);$co=r(odt,"groupvit"),odt.forEach(t),kco=r(Hk," \u2014 "),lI=n(Hk,"A",{href:!0});var rdt=s(lI);Sco=r(rdt,"CLIPTokenizer"),rdt.forEach(t),Rco=r(Hk," or "),iI=n(Hk,"A",{href:!0});var tdt=s(iI);Pco=r(tdt,"CLIPTokenizerFast"),tdt.forEach(t),Bco=r(Hk," (GroupViT model)"),Hk.forEach(t),Ico=i(S),ds=n(S,"LI",{});var Uk=s(ds);Gle=n(Uk,"STRONG",{});var adt=s(Gle);Nco=r(adt,"herbert"),adt.forEach(t),qco=r(Uk," \u2014 "),dI=n(Uk,"A",{href:!0});var ndt=s(dI);jco=r(ndt,"HerbertTokenizer"),ndt.forEach(t),Dco=r(Uk," or "),cI=n(Uk,"A",{href:!0});var sdt=s(cI);Gco=r(sdt,"HerbertTokenizerFast"),sdt.forEach(t),Oco=r(Uk," (HerBERT model)"),Uk.forEach(t),Vco=i(S),gh=n(S,"LI",{});var BLe=s(gh);Ole=n(BLe,"STRONG",{});var ldt=s(Ole);Xco=r(ldt,"hubert"),ldt.forEach(t),zco=r(BLe," \u2014 "),fI=n(BLe,"A",{href:!0});var idt=s(fI);Wco=r(idt,"Wav2Vec2CTCTokenizer"),idt.forEach(t),Qco=r(BLe," (Hubert model)"),BLe.forEach(t),Hco=i(S),cs=n(S,"LI",{});var Jk=s(cs);Vle=n(Jk,"STRONG",{});var ddt=s(Vle);Uco=r(ddt,"ibert"),ddt.forEach(t),Jco=r(Jk," \u2014 "),mI=n(Jk,"A",{href:!0});var cdt=s(mI);Yco=r(cdt,"RobertaTokenizer"),cdt.forEach(t),Kco=r(Jk," or "),gI=n(Jk,"A",{href:!0});var fdt=s(gI);Zco=r(fdt,"RobertaTokenizerFast"),fdt.forEach(t),efo=r(Jk," (I-BERT model)"),Jk.forEach(t),ofo=i(S),fs=n(S,"LI",{});var Yk=s(fs);Xle=n(Yk,"STRONG",{});var mdt=s(Xle);rfo=r(mdt,"layoutlm"),mdt.forEach(t),tfo=r(Yk," \u2014 "),hI=n(Yk,"A",{href:!0});var gdt=s(hI);afo=r(gdt,"LayoutLMTokenizer"),gdt.forEach(t),nfo=r(Yk," or "),pI=n(Yk,"A",{href:!0});var hdt=s(pI);sfo=r(hdt,"LayoutLMTokenizerFast"),hdt.forEach(t),lfo=r(Yk," (LayoutLM model)"),Yk.forEach(t),ifo=i(S),ms=n(S,"LI",{});var Kk=s(ms);zle=n(Kk,"STRONG",{});var pdt=s(zle);dfo=r(pdt,"layoutlmv2"),pdt.forEach(t),cfo=r(Kk," \u2014 "),_I=n(Kk,"A",{href:!0});var _dt=s(_I);ffo=r(_dt,"LayoutLMv2Tokenizer"),_dt.forEach(t),mfo=r(Kk," or "),uI=n(Kk,"A",{href:!0});var udt=s(uI);gfo=r(udt,"LayoutLMv2TokenizerFast"),udt.forEach(t),hfo=r(Kk," (LayoutLMv2 model)"),Kk.forEach(t),pfo=i(S),gs=n(S,"LI",{});var Zk=s(gs);Wle=n(Zk,"STRONG",{});var bdt=s(Wle);_fo=r(bdt,"layoutlmv3"),bdt.forEach(t),ufo=r(Zk," \u2014 "),bI=n(Zk,"A",{href:!0});var vdt=s(bI);bfo=r(vdt,"LayoutLMv3Tokenizer"),vdt.forEach(t),vfo=r(Zk," or "),vI=n(Zk,"A",{href:!0});var Fdt=s(vI);Ffo=r(Fdt,"LayoutLMv3TokenizerFast"),Fdt.forEach(t),Tfo=r(Zk," (LayoutLMv3 model)"),Zk.forEach(t),Mfo=i(S),hs=n(S,"LI",{});var eS=s(hs);Qle=n(eS,"STRONG",{});var Tdt=s(Qle);Efo=r(Tdt,"layoutxlm"),Tdt.forEach(t),Cfo=r(eS," \u2014 "),FI=n(eS,"A",{href:!0});var Mdt=s(FI);wfo=r(Mdt,"LayoutXLMTokenizer"),Mdt.forEach(t),Afo=r(eS," or "),TI=n(eS,"A",{href:!0});var Edt=s(TI);Lfo=r(Edt,"LayoutXLMTokenizerFast"),Edt.forEach(t),yfo=r(eS," (LayoutXLM model)"),eS.forEach(t),xfo=i(S),ps=n(S,"LI",{});var oS=s(ps);Hle=n(oS,"STRONG",{});var Cdt=s(Hle);$fo=r(Cdt,"led"),Cdt.forEach(t),kfo=r(oS," \u2014 "),MI=n(oS,"A",{href:!0});var wdt=s(MI);Sfo=r(wdt,"LEDTokenizer"),wdt.forEach(t),Rfo=r(oS," or "),EI=n(oS,"A",{href:!0});var Adt=s(EI);Pfo=r(Adt,"LEDTokenizerFast"),Adt.forEach(t),Bfo=r(oS," (LED model)"),oS.forEach(t),Ifo=i(S),_s=n(S,"LI",{});var rS=s(_s);Ule=n(rS,"STRONG",{});var Ldt=s(Ule);Nfo=r(Ldt,"longformer"),Ldt.forEach(t),qfo=r(rS," \u2014 "),CI=n(rS,"A",{href:!0});var ydt=s(CI);jfo=r(ydt,"LongformerTokenizer"),ydt.forEach(t),Dfo=r(rS," or "),wI=n(rS,"A",{href:!0});var xdt=s(wI);Gfo=r(xdt,"LongformerTokenizerFast"),xdt.forEach(t),Ofo=r(rS," (Longformer model)"),rS.forEach(t),Vfo=i(S),us=n(S,"LI",{});var tS=s(us);Jle=n(tS,"STRONG",{});var $dt=s(Jle);Xfo=r($dt,"longt5"),$dt.forEach(t),zfo=r(tS," \u2014 "),AI=n(tS,"A",{href:!0});var kdt=s(AI);Wfo=r(kdt,"T5Tokenizer"),kdt.forEach(t),Qfo=r(tS," or "),LI=n(tS,"A",{href:!0});var Sdt=s(LI);Hfo=r(Sdt,"T5TokenizerFast"),Sdt.forEach(t),Ufo=r(tS," (LongT5 model)"),tS.forEach(t),Jfo=i(S),hh=n(S,"LI",{});var ILe=s(hh);Yle=n(ILe,"STRONG",{});var Rdt=s(Yle);Yfo=r(Rdt,"luke"),Rdt.forEach(t),Kfo=r(ILe," \u2014 "),yI=n(ILe,"A",{href:!0});var Pdt=s(yI);Zfo=r(Pdt,"LukeTokenizer"),Pdt.forEach(t),emo=r(ILe," (LUKE model)"),ILe.forEach(t),omo=i(S),bs=n(S,"LI",{});var aS=s(bs);Kle=n(aS,"STRONG",{});var Bdt=s(Kle);rmo=r(Bdt,"lxmert"),Bdt.forEach(t),tmo=r(aS," \u2014 "),xI=n(aS,"A",{href:!0});var Idt=s(xI);amo=r(Idt,"LxmertTokenizer"),Idt.forEach(t),nmo=r(aS," or "),$I=n(aS,"A",{href:!0});var Ndt=s($I);smo=r(Ndt,"LxmertTokenizerFast"),Ndt.forEach(t),lmo=r(aS," (LXMERT model)"),aS.forEach(t),imo=i(S),ph=n(S,"LI",{});var NLe=s(ph);Zle=n(NLe,"STRONG",{});var qdt=s(Zle);dmo=r(qdt,"m2m_100"),qdt.forEach(t),cmo=r(NLe," \u2014 "),kI=n(NLe,"A",{href:!0});var jdt=s(kI);fmo=r(jdt,"M2M100Tokenizer"),jdt.forEach(t),mmo=r(NLe," (M2M100 model)"),NLe.forEach(t),gmo=i(S),_h=n(S,"LI",{});var qLe=s(_h);eie=n(qLe,"STRONG",{});var Ddt=s(eie);hmo=r(Ddt,"marian"),Ddt.forEach(t),pmo=r(qLe," \u2014 "),SI=n(qLe,"A",{href:!0});var Gdt=s(SI);_mo=r(Gdt,"MarianTokenizer"),Gdt.forEach(t),umo=r(qLe," (Marian model)"),qLe.forEach(t),bmo=i(S),vs=n(S,"LI",{});var nS=s(vs);oie=n(nS,"STRONG",{});var Odt=s(oie);vmo=r(Odt,"mbart"),Odt.forEach(t),Fmo=r(nS," \u2014 "),RI=n(nS,"A",{href:!0});var Vdt=s(RI);Tmo=r(Vdt,"MBartTokenizer"),Vdt.forEach(t),Mmo=r(nS," or "),PI=n(nS,"A",{href:!0});var Xdt=s(PI);Emo=r(Xdt,"MBartTokenizerFast"),Xdt.forEach(t),Cmo=r(nS," (mBART model)"),nS.forEach(t),wmo=i(S),Fs=n(S,"LI",{});var sS=s(Fs);rie=n(sS,"STRONG",{});var zdt=s(rie);Amo=r(zdt,"mbart50"),zdt.forEach(t),Lmo=r(sS," \u2014 "),BI=n(sS,"A",{href:!0});var Wdt=s(BI);ymo=r(Wdt,"MBart50Tokenizer"),Wdt.forEach(t),xmo=r(sS," or "),II=n(sS,"A",{href:!0});var Qdt=s(II);$mo=r(Qdt,"MBart50TokenizerFast"),Qdt.forEach(t),kmo=r(sS," (mBART-50 model)"),sS.forEach(t),Smo=i(S),Ts=n(S,"LI",{});var lS=s(Ts);tie=n(lS,"STRONG",{});var Hdt=s(tie);Rmo=r(Hdt,"megatron-bert"),Hdt.forEach(t),Pmo=r(lS," \u2014 "),NI=n(lS,"A",{href:!0});var Udt=s(NI);Bmo=r(Udt,"BertTokenizer"),Udt.forEach(t),Imo=r(lS," or "),qI=n(lS,"A",{href:!0});var Jdt=s(qI);Nmo=r(Jdt,"BertTokenizerFast"),Jdt.forEach(t),qmo=r(lS," (Megatron-BERT model)"),lS.forEach(t),jmo=i(S),uh=n(S,"LI",{});var jLe=s(uh);aie=n(jLe,"STRONG",{});var Ydt=s(aie);Dmo=r(Ydt,"mluke"),Ydt.forEach(t),Gmo=r(jLe," \u2014 "),jI=n(jLe,"A",{href:!0});var Kdt=s(jI);Omo=r(Kdt,"MLukeTokenizer"),Kdt.forEach(t),Vmo=r(jLe," (mLUKE model)"),jLe.forEach(t),Xmo=i(S),Ms=n(S,"LI",{});var iS=s(Ms);nie=n(iS,"STRONG",{});var Zdt=s(nie);zmo=r(Zdt,"mobilebert"),Zdt.forEach(t),Wmo=r(iS," \u2014 "),DI=n(iS,"A",{href:!0});var ect=s(DI);Qmo=r(ect,"MobileBertTokenizer"),ect.forEach(t),Hmo=r(iS," or "),GI=n(iS,"A",{href:!0});var oct=s(GI);Umo=r(oct,"MobileBertTokenizerFast"),oct.forEach(t),Jmo=r(iS," (MobileBERT model)"),iS.forEach(t),Ymo=i(S),Es=n(S,"LI",{});var dS=s(Es);sie=n(dS,"STRONG",{});var rct=s(sie);Kmo=r(rct,"mpnet"),rct.forEach(t),Zmo=r(dS," \u2014 "),OI=n(dS,"A",{href:!0});var tct=s(OI);ego=r(tct,"MPNetTokenizer"),tct.forEach(t),ogo=r(dS," or "),VI=n(dS,"A",{href:!0});var act=s(VI);rgo=r(act,"MPNetTokenizerFast"),act.forEach(t),tgo=r(dS," (MPNet model)"),dS.forEach(t),ago=i(S),Cs=n(S,"LI",{});var cS=s(Cs);lie=n(cS,"STRONG",{});var nct=s(lie);ngo=r(nct,"mt5"),nct.forEach(t),sgo=r(cS," \u2014 "),XI=n(cS,"A",{href:!0});var sct=s(XI);lgo=r(sct,"MT5Tokenizer"),sct.forEach(t),igo=r(cS," or "),zI=n(cS,"A",{href:!0});var lct=s(zI);dgo=r(lct,"MT5TokenizerFast"),lct.forEach(t),cgo=r(cS," (MT5 model)"),cS.forEach(t),fgo=i(S),ws=n(S,"LI",{});var fS=s(ws);iie=n(fS,"STRONG",{});var ict=s(iie);mgo=r(ict,"mvp"),ict.forEach(t),ggo=r(fS," \u2014 "),WI=n(fS,"A",{href:!0});var dct=s(WI);hgo=r(dct,"MvpTokenizer"),dct.forEach(t),pgo=r(fS," or "),QI=n(fS,"A",{href:!0});var cct=s(QI);_go=r(cct,"MvpTokenizerFast"),cct.forEach(t),ugo=r(fS," (MVP model)"),fS.forEach(t),bgo=i(S),As=n(S,"LI",{});var mS=s(As);die=n(mS,"STRONG",{});var fct=s(die);vgo=r(fct,"nezha"),fct.forEach(t),Fgo=r(mS," \u2014 "),HI=n(mS,"A",{href:!0});var mct=s(HI);Tgo=r(mct,"BertTokenizer"),mct.forEach(t),Mgo=r(mS," or "),UI=n(mS,"A",{href:!0});var gct=s(UI);Ego=r(gct,"BertTokenizerFast"),gct.forEach(t),Cgo=r(mS," (Nezha model)"),mS.forEach(t),wgo=i(S),Ls=n(S,"LI",{});var gS=s(Ls);cie=n(gS,"STRONG",{});var hct=s(cie);Ago=r(hct,"nystromformer"),hct.forEach(t),Lgo=r(gS," \u2014 "),JI=n(gS,"A",{href:!0});var pct=s(JI);ygo=r(pct,"AlbertTokenizer"),pct.forEach(t),xgo=r(gS," or "),YI=n(gS,"A",{href:!0});var _ct=s(YI);$go=r(_ct,"AlbertTokenizerFast"),_ct.forEach(t),kgo=r(gS," (Nystr\xF6mformer model)"),gS.forEach(t),Sgo=i(S),ys=n(S,"LI",{});var hS=s(ys);fie=n(hS,"STRONG",{});var uct=s(fie);Rgo=r(uct,"openai-gpt"),uct.forEach(t),Pgo=r(hS," \u2014 "),KI=n(hS,"A",{href:!0});var bct=s(KI);Bgo=r(bct,"OpenAIGPTTokenizer"),bct.forEach(t),Igo=r(hS," or "),ZI=n(hS,"A",{href:!0});var vct=s(ZI);Ngo=r(vct,"OpenAIGPTTokenizerFast"),vct.forEach(t),qgo=r(hS," (OpenAI GPT model)"),hS.forEach(t),jgo=i(S),bh=n(S,"LI",{});var DLe=s(bh);mie=n(DLe,"STRONG",{});var Fct=s(mie);Dgo=r(Fct,"opt"),Fct.forEach(t),Ggo=r(DLe," \u2014 "),eN=n(DLe,"A",{href:!0});var Tct=s(eN);Ogo=r(Tct,"GPT2Tokenizer"),Tct.forEach(t),Vgo=r(DLe," (OPT model)"),DLe.forEach(t),Xgo=i(S),xs=n(S,"LI",{});var pS=s(xs);gie=n(pS,"STRONG",{});var Mct=s(gie);zgo=r(Mct,"owlvit"),Mct.forEach(t),Wgo=r(pS," \u2014 "),oN=n(pS,"A",{href:!0});var Ect=s(oN);Qgo=r(Ect,"CLIPTokenizer"),Ect.forEach(t),Hgo=r(pS," or "),rN=n(pS,"A",{href:!0});var Cct=s(rN);Ugo=r(Cct,"CLIPTokenizerFast"),Cct.forEach(t),Jgo=r(pS," (OWL-ViT model)"),pS.forEach(t),Ygo=i(S),$s=n(S,"LI",{});var _S=s($s);hie=n(_S,"STRONG",{});var wct=s(hie);Kgo=r(wct,"pegasus"),wct.forEach(t),Zgo=r(_S," \u2014 "),tN=n(_S,"A",{href:!0});var Act=s(tN);eho=r(Act,"PegasusTokenizer"),Act.forEach(t),oho=r(_S," or "),aN=n(_S,"A",{href:!0});var Lct=s(aN);rho=r(Lct,"PegasusTokenizerFast"),Lct.forEach(t),tho=r(_S," (Pegasus model)"),_S.forEach(t),aho=i(S),vh=n(S,"LI",{});var GLe=s(vh);pie=n(GLe,"STRONG",{});var yct=s(pie);nho=r(yct,"perceiver"),yct.forEach(t),sho=r(GLe," \u2014 "),nN=n(GLe,"A",{href:!0});var xct=s(nN);lho=r(xct,"PerceiverTokenizer"),xct.forEach(t),iho=r(GLe," (Perceiver model)"),GLe.forEach(t),dho=i(S),Fh=n(S,"LI",{});var OLe=s(Fh);_ie=n(OLe,"STRONG",{});var $ct=s(_ie);cho=r($ct,"phobert"),$ct.forEach(t),fho=r(OLe," \u2014 "),sN=n(OLe,"A",{href:!0});var kct=s(sN);mho=r(kct,"PhobertTokenizer"),kct.forEach(t),gho=r(OLe," (PhoBERT model)"),OLe.forEach(t),hho=i(S),Th=n(S,"LI",{});var VLe=s(Th);uie=n(VLe,"STRONG",{});var Sct=s(uie);pho=r(Sct,"plbart"),Sct.forEach(t),_ho=r(VLe," \u2014 "),lN=n(VLe,"A",{href:!0});var Rct=s(lN);uho=r(Rct,"PLBartTokenizer"),Rct.forEach(t),bho=r(VLe," (PLBart model)"),VLe.forEach(t),vho=i(S),Mh=n(S,"LI",{});var XLe=s(Mh);bie=n(XLe,"STRONG",{});var Pct=s(bie);Fho=r(Pct,"prophetnet"),Pct.forEach(t),Tho=r(XLe," \u2014 "),iN=n(XLe,"A",{href:!0});var Bct=s(iN);Mho=r(Bct,"ProphetNetTokenizer"),Bct.forEach(t),Eho=r(XLe," (ProphetNet model)"),XLe.forEach(t),Cho=i(S),ks=n(S,"LI",{});var uS=s(ks);vie=n(uS,"STRONG",{});var Ict=s(vie);who=r(Ict,"qdqbert"),Ict.forEach(t),Aho=r(uS," \u2014 "),dN=n(uS,"A",{href:!0});var Nct=s(dN);Lho=r(Nct,"BertTokenizer"),Nct.forEach(t),yho=r(uS," or "),cN=n(uS,"A",{href:!0});var qct=s(cN);xho=r(qct,"BertTokenizerFast"),qct.forEach(t),$ho=r(uS," (QDQBert model)"),uS.forEach(t),kho=i(S),Eh=n(S,"LI",{});var zLe=s(Eh);Fie=n(zLe,"STRONG",{});var jct=s(Fie);Sho=r(jct,"rag"),jct.forEach(t),Rho=r(zLe," \u2014 "),fN=n(zLe,"A",{href:!0});var Dct=s(fN);Pho=r(Dct,"RagTokenizer"),Dct.forEach(t),Bho=r(zLe," (RAG model)"),zLe.forEach(t),Iho=i(S),Ss=n(S,"LI",{});var bS=s(Ss);Tie=n(bS,"STRONG",{});var Gct=s(Tie);Nho=r(Gct,"realm"),Gct.forEach(t),qho=r(bS," \u2014 "),mN=n(bS,"A",{href:!0});var Oct=s(mN);jho=r(Oct,"RealmTokenizer"),Oct.forEach(t),Dho=r(bS," or "),gN=n(bS,"A",{href:!0});var Vct=s(gN);Gho=r(Vct,"RealmTokenizerFast"),Vct.forEach(t),Oho=r(bS," (REALM model)"),bS.forEach(t),Vho=i(S),Rs=n(S,"LI",{});var vS=s(Rs);Mie=n(vS,"STRONG",{});var Xct=s(Mie);Xho=r(Xct,"reformer"),Xct.forEach(t),zho=r(vS," \u2014 "),hN=n(vS,"A",{href:!0});var zct=s(hN);Who=r(zct,"ReformerTokenizer"),zct.forEach(t),Qho=r(vS," or "),pN=n(vS,"A",{href:!0});var Wct=s(pN);Hho=r(Wct,"ReformerTokenizerFast"),Wct.forEach(t),Uho=r(vS," (Reformer model)"),vS.forEach(t),Jho=i(S),Ps=n(S,"LI",{});var FS=s(Ps);Eie=n(FS,"STRONG",{});var Qct=s(Eie);Yho=r(Qct,"rembert"),Qct.forEach(t),Kho=r(FS," \u2014 "),_N=n(FS,"A",{href:!0});var Hct=s(_N);Zho=r(Hct,"RemBertTokenizer"),Hct.forEach(t),epo=r(FS," or "),uN=n(FS,"A",{href:!0});var Uct=s(uN);opo=r(Uct,"RemBertTokenizerFast"),Uct.forEach(t),rpo=r(FS," (RemBERT model)"),FS.forEach(t),tpo=i(S),Bs=n(S,"LI",{});var TS=s(Bs);Cie=n(TS,"STRONG",{});var Jct=s(Cie);apo=r(Jct,"retribert"),Jct.forEach(t),npo=r(TS," \u2014 "),bN=n(TS,"A",{href:!0});var Yct=s(bN);spo=r(Yct,"RetriBertTokenizer"),Yct.forEach(t),lpo=r(TS," or "),vN=n(TS,"A",{href:!0});var Kct=s(vN);ipo=r(Kct,"RetriBertTokenizerFast"),Kct.forEach(t),dpo=r(TS," (RetriBERT model)"),TS.forEach(t),cpo=i(S),Is=n(S,"LI",{});var MS=s(Is);wie=n(MS,"STRONG",{});var Zct=s(wie);fpo=r(Zct,"roberta"),Zct.forEach(t),mpo=r(MS," \u2014 "),FN=n(MS,"A",{href:!0});var eft=s(FN);gpo=r(eft,"RobertaTokenizer"),eft.forEach(t),hpo=r(MS," or "),TN=n(MS,"A",{href:!0});var oft=s(TN);ppo=r(oft,"RobertaTokenizerFast"),oft.forEach(t),_po=r(MS," (RoBERTa model)"),MS.forEach(t),upo=i(S),Ns=n(S,"LI",{});var ES=s(Ns);Aie=n(ES,"STRONG",{});var rft=s(Aie);bpo=r(rft,"roformer"),rft.forEach(t),vpo=r(ES," \u2014 "),MN=n(ES,"A",{href:!0});var tft=s(MN);Fpo=r(tft,"RoFormerTokenizer"),tft.forEach(t),Tpo=r(ES," or "),EN=n(ES,"A",{href:!0});var aft=s(EN);Mpo=r(aft,"RoFormerTokenizerFast"),aft.forEach(t),Epo=r(ES," (RoFormer model)"),ES.forEach(t),Cpo=i(S),Ch=n(S,"LI",{});var WLe=s(Ch);Lie=n(WLe,"STRONG",{});var nft=s(Lie);wpo=r(nft,"speech_to_text"),nft.forEach(t),Apo=r(WLe," \u2014 "),CN=n(WLe,"A",{href:!0});var sft=s(CN);Lpo=r(sft,"Speech2TextTokenizer"),sft.forEach(t),ypo=r(WLe," (Speech2Text model)"),WLe.forEach(t),xpo=i(S),wh=n(S,"LI",{});var QLe=s(wh);yie=n(QLe,"STRONG",{});var lft=s(yie);$po=r(lft,"speech_to_text_2"),lft.forEach(t),kpo=r(QLe," \u2014 "),wN=n(QLe,"A",{href:!0});var ift=s(wN);Spo=r(ift,"Speech2Text2Tokenizer"),ift.forEach(t),Rpo=r(QLe," (Speech2Text2 model)"),QLe.forEach(t),Ppo=i(S),qs=n(S,"LI",{});var CS=s(qs);xie=n(CS,"STRONG",{});var dft=s(xie);Bpo=r(dft,"splinter"),dft.forEach(t),Ipo=r(CS," \u2014 "),AN=n(CS,"A",{href:!0});var cft=s(AN);Npo=r(cft,"SplinterTokenizer"),cft.forEach(t),qpo=r(CS," or "),LN=n(CS,"A",{href:!0});var fft=s(LN);jpo=r(fft,"SplinterTokenizerFast"),fft.forEach(t),Dpo=r(CS," (Splinter model)"),CS.forEach(t),Gpo=i(S),js=n(S,"LI",{});var wS=s(js);$ie=n(wS,"STRONG",{});var mft=s($ie);Opo=r(mft,"squeezebert"),mft.forEach(t),Vpo=r(wS," \u2014 "),yN=n(wS,"A",{href:!0});var gft=s(yN);Xpo=r(gft,"SqueezeBertTokenizer"),gft.forEach(t),zpo=r(wS," or "),xN=n(wS,"A",{href:!0});var hft=s(xN);Wpo=r(hft,"SqueezeBertTokenizerFast"),hft.forEach(t),Qpo=r(wS," (SqueezeBERT model)"),wS.forEach(t),Hpo=i(S),Ds=n(S,"LI",{});var AS=s(Ds);kie=n(AS,"STRONG",{});var pft=s(kie);Upo=r(pft,"t5"),pft.forEach(t),Jpo=r(AS," \u2014 "),$N=n(AS,"A",{href:!0});var _ft=s($N);Ypo=r(_ft,"T5Tokenizer"),_ft.forEach(t),Kpo=r(AS," or "),kN=n(AS,"A",{href:!0});var uft=s(kN);Zpo=r(uft,"T5TokenizerFast"),uft.forEach(t),e_o=r(AS," (T5 model)"),AS.forEach(t),o_o=i(S),Ah=n(S,"LI",{});var HLe=s(Ah);Sie=n(HLe,"STRONG",{});var bft=s(Sie);r_o=r(bft,"tapas"),bft.forEach(t),t_o=r(HLe," \u2014 "),SN=n(HLe,"A",{href:!0});var vft=s(SN);a_o=r(vft,"TapasTokenizer"),vft.forEach(t),n_o=r(HLe," (TAPAS model)"),HLe.forEach(t),s_o=i(S),Lh=n(S,"LI",{});var ULe=s(Lh);Rie=n(ULe,"STRONG",{});var Fft=s(Rie);l_o=r(Fft,"tapex"),Fft.forEach(t),i_o=r(ULe," \u2014 "),RN=n(ULe,"A",{href:!0});var Tft=s(RN);d_o=r(Tft,"TapexTokenizer"),Tft.forEach(t),c_o=r(ULe," (TAPEX model)"),ULe.forEach(t),f_o=i(S),yh=n(S,"LI",{});var JLe=s(yh);Pie=n(JLe,"STRONG",{});var Mft=s(Pie);m_o=r(Mft,"transfo-xl"),Mft.forEach(t),g_o=r(JLe," \u2014 "),PN=n(JLe,"A",{href:!0});var Eft=s(PN);h_o=r(Eft,"TransfoXLTokenizer"),Eft.forEach(t),p_o=r(JLe," (Transformer-XL model)"),JLe.forEach(t),__o=i(S),Gs=n(S,"LI",{});var LS=s(Gs);Bie=n(LS,"STRONG",{});var Cft=s(Bie);u_o=r(Cft,"vilt"),Cft.forEach(t),b_o=r(LS," \u2014 "),BN=n(LS,"A",{href:!0});var wft=s(BN);v_o=r(wft,"BertTokenizer"),wft.forEach(t),F_o=r(LS," or "),IN=n(LS,"A",{href:!0});var Aft=s(IN);T_o=r(Aft,"BertTokenizerFast"),Aft.forEach(t),M_o=r(LS," (ViLT model)"),LS.forEach(t),E_o=i(S),Os=n(S,"LI",{});var yS=s(Os);Iie=n(yS,"STRONG",{});var Lft=s(Iie);C_o=r(Lft,"visual_bert"),Lft.forEach(t),w_o=r(yS," \u2014 "),NN=n(yS,"A",{href:!0});var yft=s(NN);A_o=r(yft,"BertTokenizer"),yft.forEach(t),L_o=r(yS," or "),qN=n(yS,"A",{href:!0});var xft=s(qN);y_o=r(xft,"BertTokenizerFast"),xft.forEach(t),x_o=r(yS," (VisualBERT model)"),yS.forEach(t),$_o=i(S),xh=n(S,"LI",{});var YLe=s(xh);Nie=n(YLe,"STRONG",{});var $ft=s(Nie);k_o=r($ft,"wav2vec2"),$ft.forEach(t),S_o=r(YLe," \u2014 "),jN=n(YLe,"A",{href:!0});var kft=s(jN);R_o=r(kft,"Wav2Vec2CTCTokenizer"),kft.forEach(t),P_o=r(YLe," (Wav2Vec2 model)"),YLe.forEach(t),B_o=i(S),$h=n(S,"LI",{});var KLe=s($h);qie=n(KLe,"STRONG",{});var Sft=s(qie);I_o=r(Sft,"wav2vec2-conformer"),Sft.forEach(t),N_o=r(KLe," \u2014 "),DN=n(KLe,"A",{href:!0});var Rft=s(DN);q_o=r(Rft,"Wav2Vec2CTCTokenizer"),Rft.forEach(t),j_o=r(KLe," (Wav2Vec2-Conformer model)"),KLe.forEach(t),D_o=i(S),kh=n(S,"LI",{});var ZLe=s(kh);jie=n(ZLe,"STRONG",{});var Pft=s(jie);G_o=r(Pft,"wav2vec2_phoneme"),Pft.forEach(t),O_o=r(ZLe," \u2014 "),GN=n(ZLe,"A",{href:!0});var Bft=s(GN);V_o=r(Bft,"Wav2Vec2PhonemeCTCTokenizer"),Bft.forEach(t),X_o=r(ZLe," (Wav2Vec2Phoneme model)"),ZLe.forEach(t),z_o=i(S),Vs=n(S,"LI",{});var xS=s(Vs);Die=n(xS,"STRONG",{});var Ift=s(Die);W_o=r(Ift,"xglm"),Ift.forEach(t),Q_o=r(xS," \u2014 "),ON=n(xS,"A",{href:!0});var Nft=s(ON);H_o=r(Nft,"XGLMTokenizer"),Nft.forEach(t),U_o=r(xS," or "),VN=n(xS,"A",{href:!0});var qft=s(VN);J_o=r(qft,"XGLMTokenizerFast"),qft.forEach(t),Y_o=r(xS," (XGLM model)"),xS.forEach(t),K_o=i(S),Sh=n(S,"LI",{});var eye=s(Sh);Gie=n(eye,"STRONG",{});var jft=s(Gie);Z_o=r(jft,"xlm"),jft.forEach(t),euo=r(eye," \u2014 "),XN=n(eye,"A",{href:!0});var Dft=s(XN);ouo=r(Dft,"XLMTokenizer"),Dft.forEach(t),ruo=r(eye," (XLM model)"),eye.forEach(t),tuo=i(S),Rh=n(S,"LI",{});var oye=s(Rh);Oie=n(oye,"STRONG",{});var Gft=s(Oie);auo=r(Gft,"xlm-prophetnet"),Gft.forEach(t),nuo=r(oye," \u2014 "),zN=n(oye,"A",{href:!0});var Oft=s(zN);suo=r(Oft,"XLMProphetNetTokenizer"),Oft.forEach(t),luo=r(oye," (XLM-ProphetNet model)"),oye.forEach(t),iuo=i(S),Xs=n(S,"LI",{});var $S=s(Xs);Vie=n($S,"STRONG",{});var Vft=s(Vie);duo=r(Vft,"xlm-roberta"),Vft.forEach(t),cuo=r($S," \u2014 "),WN=n($S,"A",{href:!0});var Xft=s(WN);fuo=r(Xft,"XLMRobertaTokenizer"),Xft.forEach(t),muo=r($S," or "),QN=n($S,"A",{href:!0});var zft=s(QN);guo=r(zft,"XLMRobertaTokenizerFast"),zft.forEach(t),huo=r($S," (XLM-RoBERTa model)"),$S.forEach(t),puo=i(S),zs=n(S,"LI",{});var kS=s(zs);Xie=n(kS,"STRONG",{});var Wft=s(Xie);_uo=r(Wft,"xlm-roberta-xl"),Wft.forEach(t),uuo=r(kS," \u2014 "),HN=n(kS,"A",{href:!0});var Qft=s(HN);buo=r(Qft,"RobertaTokenizer"),Qft.forEach(t),vuo=r(kS," or "),UN=n(kS,"A",{href:!0});var Hft=s(UN);Fuo=r(Hft,"RobertaTokenizerFast"),Hft.forEach(t),Tuo=r(kS," (XLM-RoBERTa-XL model)"),kS.forEach(t),Muo=i(S),Ws=n(S,"LI",{});var SS=s(Ws);zie=n(SS,"STRONG",{});var Uft=s(zie);Euo=r(Uft,"xlnet"),Uft.forEach(t),Cuo=r(SS," \u2014 "),JN=n(SS,"A",{href:!0});var Jft=s(JN);wuo=r(Jft,"XLNetTokenizer"),Jft.forEach(t),Auo=r(SS," or "),YN=n(SS,"A",{href:!0});var Yft=s(YN);Luo=r(Yft,"XLNetTokenizerFast"),Yft.forEach(t),yuo=r(SS," (XLNet model)"),SS.forEach(t),xuo=i(S),Qs=n(S,"LI",{});var RS=s(Qs);Wie=n(RS,"STRONG",{});var Kft=s(Wie);$uo=r(Kft,"yoso"),Kft.forEach(t),kuo=r(RS," \u2014 "),KN=n(RS,"A",{href:!0});var Zft=s(KN);Suo=r(Zft,"AlbertTokenizer"),Zft.forEach(t),Ruo=r(RS," or "),ZN=n(RS,"A",{href:!0});var emt=s(ZN);Puo=r(emt,"AlbertTokenizerFast"),emt.forEach(t),Buo=r(RS," (YOSO model)"),RS.forEach(t),S.forEach(t),Iuo=i(Zs),T(Ph.$$.fragment,Zs),Zs.forEach(t),Nuo=i(Ks),Bh=n(Ks,"DIV",{class:!0});var vWe=s(Bh);T(F6.$$.fragment,vWe),quo=i(vWe),Qie=n(vWe,"P",{});var omt=s(Qie);juo=r(omt,"Register a new tokenizer in this mapping."),omt.forEach(t),vWe.forEach(t),Ks.forEach(t),bXe=i(f),qi=n(f,"H2",{class:!0});var FWe=s(qi);Ih=n(FWe,"A",{id:!0,class:!0,href:!0});var rmt=s(Ih);Hie=n(rmt,"SPAN",{});var tmt=s(Hie);T(T6.$$.fragment,tmt),tmt.forEach(t),rmt.forEach(t),Duo=i(FWe),Uie=n(FWe,"SPAN",{});var amt=s(Uie);Guo=r(amt,"AutoFeatureExtractor"),amt.forEach(t),FWe.forEach(t),vXe=i(f),Lo=n(f,"DIV",{class:!0});var el=s(Lo);T(M6.$$.fragment,el),Ouo=i(el),E6=n(el,"P",{});var TWe=s(E6);Vuo=r(TWe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),eq=n(TWe,"A",{href:!0});var nmt=s(eq);Xuo=r(nmt,"AutoFeatureExtractor.from_pretrained()"),nmt.forEach(t),zuo=r(TWe," class method."),TWe.forEach(t),Wuo=i(el),C6=n(el,"P",{});var MWe=s(C6);Quo=r(MWe,"This class cannot be instantiated directly using "),Jie=n(MWe,"CODE",{});var smt=s(Jie);Huo=r(smt,"__init__()"),smt.forEach(t),Uuo=r(MWe," (throws an error)."),MWe.forEach(t),Juo=i(el),He=n(el,"DIV",{class:!0});var aa=s(He);T(w6.$$.fragment,aa),Yuo=i(aa),Yie=n(aa,"P",{});var lmt=s(Yie);Kuo=r(lmt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),lmt.forEach(t),Zuo=i(aa),Ba=n(aa,"P",{});var cw=s(Ba);e1o=r(cw,"The feature extractor class to instantiate is selected based on the "),Kie=n(cw,"CODE",{});var imt=s(Kie);o1o=r(imt,"model_type"),imt.forEach(t),r1o=r(cw,` property of the config object
(either passed as an argument or loaded from `),Zie=n(cw,"CODE",{});var dmt=s(Zie);t1o=r(dmt,"pretrained_model_name_or_path"),dmt.forEach(t),a1o=r(cw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ede=n(cw,"CODE",{});var cmt=s(ede);n1o=r(cmt,"pretrained_model_name_or_path"),cmt.forEach(t),s1o=r(cw,":"),cw.forEach(t),l1o=i(aa),J=n(aa,"UL",{});var K=s(J);Nh=n(K,"LI",{});var rye=s(Nh);ode=n(rye,"STRONG",{});var fmt=s(ode);i1o=r(fmt,"beit"),fmt.forEach(t),d1o=r(rye," \u2014 "),oq=n(rye,"A",{href:!0});var mmt=s(oq);c1o=r(mmt,"BeitFeatureExtractor"),mmt.forEach(t),f1o=r(rye," (BEiT model)"),rye.forEach(t),m1o=i(K),qh=n(K,"LI",{});var tye=s(qh);rde=n(tye,"STRONG",{});var gmt=s(rde);g1o=r(gmt,"clip"),gmt.forEach(t),h1o=r(tye," \u2014 "),rq=n(tye,"A",{href:!0});var hmt=s(rq);p1o=r(hmt,"CLIPFeatureExtractor"),hmt.forEach(t),_1o=r(tye," (CLIP model)"),tye.forEach(t),u1o=i(K),jh=n(K,"LI",{});var aye=s(jh);tde=n(aye,"STRONG",{});var pmt=s(tde);b1o=r(pmt,"convnext"),pmt.forEach(t),v1o=r(aye," \u2014 "),tq=n(aye,"A",{href:!0});var _mt=s(tq);F1o=r(_mt,"ConvNextFeatureExtractor"),_mt.forEach(t),T1o=r(aye," (ConvNeXT model)"),aye.forEach(t),M1o=i(K),Dh=n(K,"LI",{});var nye=s(Dh);ade=n(nye,"STRONG",{});var umt=s(ade);E1o=r(umt,"cvt"),umt.forEach(t),C1o=r(nye," \u2014 "),aq=n(nye,"A",{href:!0});var bmt=s(aq);w1o=r(bmt,"ConvNextFeatureExtractor"),bmt.forEach(t),A1o=r(nye," (CvT model)"),nye.forEach(t),L1o=i(K),Gh=n(K,"LI",{});var sye=s(Gh);nde=n(sye,"STRONG",{});var vmt=s(nde);y1o=r(vmt,"data2vec-audio"),vmt.forEach(t),x1o=r(sye," \u2014 "),nq=n(sye,"A",{href:!0});var Fmt=s(nq);$1o=r(Fmt,"Wav2Vec2FeatureExtractor"),Fmt.forEach(t),k1o=r(sye," (Data2VecAudio model)"),sye.forEach(t),S1o=i(K),Oh=n(K,"LI",{});var lye=s(Oh);sde=n(lye,"STRONG",{});var Tmt=s(sde);R1o=r(Tmt,"data2vec-vision"),Tmt.forEach(t),P1o=r(lye," \u2014 "),sq=n(lye,"A",{href:!0});var Mmt=s(sq);B1o=r(Mmt,"BeitFeatureExtractor"),Mmt.forEach(t),I1o=r(lye," (Data2VecVision model)"),lye.forEach(t),N1o=i(K),Vh=n(K,"LI",{});var iye=s(Vh);lde=n(iye,"STRONG",{});var Emt=s(lde);q1o=r(Emt,"deit"),Emt.forEach(t),j1o=r(iye," \u2014 "),lq=n(iye,"A",{href:!0});var Cmt=s(lq);D1o=r(Cmt,"DeiTFeatureExtractor"),Cmt.forEach(t),G1o=r(iye," (DeiT model)"),iye.forEach(t),O1o=i(K),Xh=n(K,"LI",{});var dye=s(Xh);ide=n(dye,"STRONG",{});var wmt=s(ide);V1o=r(wmt,"detr"),wmt.forEach(t),X1o=r(dye," \u2014 "),iq=n(dye,"A",{href:!0});var Amt=s(iq);z1o=r(Amt,"DetrFeatureExtractor"),Amt.forEach(t),W1o=r(dye," (DETR model)"),dye.forEach(t),Q1o=i(K),zh=n(K,"LI",{});var cye=s(zh);dde=n(cye,"STRONG",{});var Lmt=s(dde);H1o=r(Lmt,"dpt"),Lmt.forEach(t),U1o=r(cye," \u2014 "),dq=n(cye,"A",{href:!0});var ymt=s(dq);J1o=r(ymt,"DPTFeatureExtractor"),ymt.forEach(t),Y1o=r(cye," (DPT model)"),cye.forEach(t),K1o=i(K),Wh=n(K,"LI",{});var fye=s(Wh);cde=n(fye,"STRONG",{});var xmt=s(cde);Z1o=r(xmt,"flava"),xmt.forEach(t),e2o=r(fye," \u2014 "),cq=n(fye,"A",{href:!0});var $mt=s(cq);o2o=r($mt,"FlavaFeatureExtractor"),$mt.forEach(t),r2o=r(fye," (FLAVA model)"),fye.forEach(t),t2o=i(K),Qh=n(K,"LI",{});var mye=s(Qh);fde=n(mye,"STRONG",{});var kmt=s(fde);a2o=r(kmt,"glpn"),kmt.forEach(t),n2o=r(mye," \u2014 "),fq=n(mye,"A",{href:!0});var Smt=s(fq);s2o=r(Smt,"GLPNFeatureExtractor"),Smt.forEach(t),l2o=r(mye," (GLPN model)"),mye.forEach(t),i2o=i(K),Hh=n(K,"LI",{});var gye=s(Hh);mde=n(gye,"STRONG",{});var Rmt=s(mde);d2o=r(Rmt,"groupvit"),Rmt.forEach(t),c2o=r(gye," \u2014 "),mq=n(gye,"A",{href:!0});var Pmt=s(mq);f2o=r(Pmt,"CLIPFeatureExtractor"),Pmt.forEach(t),m2o=r(gye," (GroupViT model)"),gye.forEach(t),g2o=i(K),Uh=n(K,"LI",{});var hye=s(Uh);gde=n(hye,"STRONG",{});var Bmt=s(gde);h2o=r(Bmt,"hubert"),Bmt.forEach(t),p2o=r(hye," \u2014 "),gq=n(hye,"A",{href:!0});var Imt=s(gq);_2o=r(Imt,"Wav2Vec2FeatureExtractor"),Imt.forEach(t),u2o=r(hye," (Hubert model)"),hye.forEach(t),b2o=i(K),Jh=n(K,"LI",{});var pye=s(Jh);hde=n(pye,"STRONG",{});var Nmt=s(hde);v2o=r(Nmt,"imagegpt"),Nmt.forEach(t),F2o=r(pye," \u2014 "),hq=n(pye,"A",{href:!0});var qmt=s(hq);T2o=r(qmt,"ImageGPTFeatureExtractor"),qmt.forEach(t),M2o=r(pye," (ImageGPT model)"),pye.forEach(t),E2o=i(K),Yh=n(K,"LI",{});var _ye=s(Yh);pde=n(_ye,"STRONG",{});var jmt=s(pde);C2o=r(jmt,"layoutlmv2"),jmt.forEach(t),w2o=r(_ye," \u2014 "),pq=n(_ye,"A",{href:!0});var Dmt=s(pq);A2o=r(Dmt,"LayoutLMv2FeatureExtractor"),Dmt.forEach(t),L2o=r(_ye," (LayoutLMv2 model)"),_ye.forEach(t),y2o=i(K),Kh=n(K,"LI",{});var uye=s(Kh);_de=n(uye,"STRONG",{});var Gmt=s(_de);x2o=r(Gmt,"layoutlmv3"),Gmt.forEach(t),$2o=r(uye," \u2014 "),_q=n(uye,"A",{href:!0});var Omt=s(_q);k2o=r(Omt,"LayoutLMv3FeatureExtractor"),Omt.forEach(t),S2o=r(uye," (LayoutLMv3 model)"),uye.forEach(t),R2o=i(K),Zh=n(K,"LI",{});var bye=s(Zh);ude=n(bye,"STRONG",{});var Vmt=s(ude);P2o=r(Vmt,"levit"),Vmt.forEach(t),B2o=r(bye," \u2014 "),uq=n(bye,"A",{href:!0});var Xmt=s(uq);I2o=r(Xmt,"LevitFeatureExtractor"),Xmt.forEach(t),N2o=r(bye," (LeViT model)"),bye.forEach(t),q2o=i(K),ep=n(K,"LI",{});var vye=s(ep);bde=n(vye,"STRONG",{});var zmt=s(bde);j2o=r(zmt,"maskformer"),zmt.forEach(t),D2o=r(vye," \u2014 "),bq=n(vye,"A",{href:!0});var Wmt=s(bq);G2o=r(Wmt,"MaskFormerFeatureExtractor"),Wmt.forEach(t),O2o=r(vye," (MaskFormer model)"),vye.forEach(t),V2o=i(K),op=n(K,"LI",{});var Fye=s(op);vde=n(Fye,"STRONG",{});var Qmt=s(vde);X2o=r(Qmt,"mctct"),Qmt.forEach(t),z2o=r(Fye," \u2014 "),vq=n(Fye,"A",{href:!0});var Hmt=s(vq);W2o=r(Hmt,"MCTCTFeatureExtractor"),Hmt.forEach(t),Q2o=r(Fye," (M-CTC-T model)"),Fye.forEach(t),H2o=i(K),rp=n(K,"LI",{});var Tye=s(rp);Fde=n(Tye,"STRONG",{});var Umt=s(Fde);U2o=r(Umt,"mobilevit"),Umt.forEach(t),J2o=r(Tye," \u2014 "),Fq=n(Tye,"A",{href:!0});var Jmt=s(Fq);Y2o=r(Jmt,"MobileViTFeatureExtractor"),Jmt.forEach(t),K2o=r(Tye," (MobileViT model)"),Tye.forEach(t),Z2o=i(K),tp=n(K,"LI",{});var Mye=s(tp);Tde=n(Mye,"STRONG",{});var Ymt=s(Tde);ebo=r(Ymt,"owlvit"),Ymt.forEach(t),obo=r(Mye," \u2014 "),Tq=n(Mye,"A",{href:!0});var Kmt=s(Tq);rbo=r(Kmt,"OwlViTFeatureExtractor"),Kmt.forEach(t),tbo=r(Mye," (OWL-ViT model)"),Mye.forEach(t),abo=i(K),ap=n(K,"LI",{});var Eye=s(ap);Mde=n(Eye,"STRONG",{});var Zmt=s(Mde);nbo=r(Zmt,"perceiver"),Zmt.forEach(t),sbo=r(Eye," \u2014 "),Mq=n(Eye,"A",{href:!0});var egt=s(Mq);lbo=r(egt,"PerceiverFeatureExtractor"),egt.forEach(t),ibo=r(Eye," (Perceiver model)"),Eye.forEach(t),dbo=i(K),np=n(K,"LI",{});var Cye=s(np);Ede=n(Cye,"STRONG",{});var ogt=s(Ede);cbo=r(ogt,"poolformer"),ogt.forEach(t),fbo=r(Cye," \u2014 "),Eq=n(Cye,"A",{href:!0});var rgt=s(Eq);mbo=r(rgt,"PoolFormerFeatureExtractor"),rgt.forEach(t),gbo=r(Cye," (PoolFormer model)"),Cye.forEach(t),hbo=i(K),sp=n(K,"LI",{});var wye=s(sp);Cde=n(wye,"STRONG",{});var tgt=s(Cde);pbo=r(tgt,"regnet"),tgt.forEach(t),_bo=r(wye," \u2014 "),Cq=n(wye,"A",{href:!0});var agt=s(Cq);ubo=r(agt,"ConvNextFeatureExtractor"),agt.forEach(t),bbo=r(wye," (RegNet model)"),wye.forEach(t),vbo=i(K),lp=n(K,"LI",{});var Aye=s(lp);wde=n(Aye,"STRONG",{});var ngt=s(wde);Fbo=r(ngt,"resnet"),ngt.forEach(t),Tbo=r(Aye," \u2014 "),wq=n(Aye,"A",{href:!0});var sgt=s(wq);Mbo=r(sgt,"ConvNextFeatureExtractor"),sgt.forEach(t),Ebo=r(Aye," (ResNet model)"),Aye.forEach(t),Cbo=i(K),ip=n(K,"LI",{});var Lye=s(ip);Ade=n(Lye,"STRONG",{});var lgt=s(Ade);wbo=r(lgt,"segformer"),lgt.forEach(t),Abo=r(Lye," \u2014 "),Aq=n(Lye,"A",{href:!0});var igt=s(Aq);Lbo=r(igt,"SegformerFeatureExtractor"),igt.forEach(t),ybo=r(Lye," (SegFormer model)"),Lye.forEach(t),xbo=i(K),dp=n(K,"LI",{});var yye=s(dp);Lde=n(yye,"STRONG",{});var dgt=s(Lde);$bo=r(dgt,"speech_to_text"),dgt.forEach(t),kbo=r(yye," \u2014 "),Lq=n(yye,"A",{href:!0});var cgt=s(Lq);Sbo=r(cgt,"Speech2TextFeatureExtractor"),cgt.forEach(t),Rbo=r(yye," (Speech2Text model)"),yye.forEach(t),Pbo=i(K),cp=n(K,"LI",{});var xye=s(cp);yde=n(xye,"STRONG",{});var fgt=s(yde);Bbo=r(fgt,"swin"),fgt.forEach(t),Ibo=r(xye," \u2014 "),yq=n(xye,"A",{href:!0});var mgt=s(yq);Nbo=r(mgt,"ViTFeatureExtractor"),mgt.forEach(t),qbo=r(xye," (Swin Transformer model)"),xye.forEach(t),jbo=i(K),fp=n(K,"LI",{});var $ye=s(fp);xde=n($ye,"STRONG",{});var ggt=s(xde);Dbo=r(ggt,"van"),ggt.forEach(t),Gbo=r($ye," \u2014 "),xq=n($ye,"A",{href:!0});var hgt=s(xq);Obo=r(hgt,"ConvNextFeatureExtractor"),hgt.forEach(t),Vbo=r($ye," (VAN model)"),$ye.forEach(t),Xbo=i(K),mp=n(K,"LI",{});var kye=s(mp);$de=n(kye,"STRONG",{});var pgt=s($de);zbo=r(pgt,"vilt"),pgt.forEach(t),Wbo=r(kye," \u2014 "),$q=n(kye,"A",{href:!0});var _gt=s($q);Qbo=r(_gt,"ViltFeatureExtractor"),_gt.forEach(t),Hbo=r(kye," (ViLT model)"),kye.forEach(t),Ubo=i(K),gp=n(K,"LI",{});var Sye=s(gp);kde=n(Sye,"STRONG",{});var ugt=s(kde);Jbo=r(ugt,"vit"),ugt.forEach(t),Ybo=r(Sye," \u2014 "),kq=n(Sye,"A",{href:!0});var bgt=s(kq);Kbo=r(bgt,"ViTFeatureExtractor"),bgt.forEach(t),Zbo=r(Sye," (ViT model)"),Sye.forEach(t),evo=i(K),hp=n(K,"LI",{});var Rye=s(hp);Sde=n(Rye,"STRONG",{});var vgt=s(Sde);ovo=r(vgt,"vit_mae"),vgt.forEach(t),rvo=r(Rye," \u2014 "),Sq=n(Rye,"A",{href:!0});var Fgt=s(Sq);tvo=r(Fgt,"ViTFeatureExtractor"),Fgt.forEach(t),avo=r(Rye," (ViTMAE model)"),Rye.forEach(t),nvo=i(K),pp=n(K,"LI",{});var Pye=s(pp);Rde=n(Pye,"STRONG",{});var Tgt=s(Rde);svo=r(Tgt,"wav2vec2"),Tgt.forEach(t),lvo=r(Pye," \u2014 "),Rq=n(Pye,"A",{href:!0});var Mgt=s(Rq);ivo=r(Mgt,"Wav2Vec2FeatureExtractor"),Mgt.forEach(t),dvo=r(Pye," (Wav2Vec2 model)"),Pye.forEach(t),cvo=i(K),_p=n(K,"LI",{});var Bye=s(_p);Pde=n(Bye,"STRONG",{});var Egt=s(Pde);fvo=r(Egt,"wav2vec2-conformer"),Egt.forEach(t),mvo=r(Bye," \u2014 "),Pq=n(Bye,"A",{href:!0});var Cgt=s(Pq);gvo=r(Cgt,"Wav2Vec2FeatureExtractor"),Cgt.forEach(t),hvo=r(Bye," (Wav2Vec2-Conformer model)"),Bye.forEach(t),pvo=i(K),up=n(K,"LI",{});var Iye=s(up);Bde=n(Iye,"STRONG",{});var wgt=s(Bde);_vo=r(wgt,"yolos"),wgt.forEach(t),uvo=r(Iye," \u2014 "),Bq=n(Iye,"A",{href:!0});var Agt=s(Bq);bvo=r(Agt,"YolosFeatureExtractor"),Agt.forEach(t),vvo=r(Iye," (YOLOS model)"),Iye.forEach(t),K.forEach(t),Fvo=i(aa),T(bp.$$.fragment,aa),Tvo=i(aa),T(vp.$$.fragment,aa),aa.forEach(t),Mvo=i(el),Fp=n(el,"DIV",{class:!0});var EWe=s(Fp);T(A6.$$.fragment,EWe),Evo=i(EWe),Ide=n(EWe,"P",{});var Lgt=s(Ide);Cvo=r(Lgt,"Register a new feature extractor for this class."),Lgt.forEach(t),EWe.forEach(t),el.forEach(t),FXe=i(f),ji=n(f,"H2",{class:!0});var CWe=s(ji);Tp=n(CWe,"A",{id:!0,class:!0,href:!0});var ygt=s(Tp);Nde=n(ygt,"SPAN",{});var xgt=s(Nde);T(L6.$$.fragment,xgt),xgt.forEach(t),ygt.forEach(t),wvo=i(CWe),qde=n(CWe,"SPAN",{});var $gt=s(qde);Avo=r($gt,"AutoProcessor"),$gt.forEach(t),CWe.forEach(t),TXe=i(f),yo=n(f,"DIV",{class:!0});var ol=s(yo);T(y6.$$.fragment,ol),Lvo=i(ol),x6=n(ol,"P",{});var wWe=s(x6);yvo=r(wWe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Iq=n(wWe,"A",{href:!0});var kgt=s(Iq);xvo=r(kgt,"AutoProcessor.from_pretrained()"),kgt.forEach(t),$vo=r(wWe," class method."),wWe.forEach(t),kvo=i(ol),$6=n(ol,"P",{});var AWe=s($6);Svo=r(AWe,"This class cannot be instantiated directly using "),jde=n(AWe,"CODE",{});var Sgt=s(jde);Rvo=r(Sgt,"__init__()"),Sgt.forEach(t),Pvo=r(AWe," (throws an error)."),AWe.forEach(t),Bvo=i(ol),Ue=n(ol,"DIV",{class:!0});var na=s(Ue);T(k6.$$.fragment,na),Ivo=i(na),Dde=n(na,"P",{});var Rgt=s(Dde);Nvo=r(Rgt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Rgt.forEach(t),qvo=i(na),Di=n(na,"P",{});var Ire=s(Di);jvo=r(Ire,"The processor class to instantiate is selected based on the "),Gde=n(Ire,"CODE",{});var Pgt=s(Gde);Dvo=r(Pgt,"model_type"),Pgt.forEach(t),Gvo=r(Ire,` property of the config object (either
passed as an argument or loaded from `),Ode=n(Ire,"CODE",{});var Bgt=s(Ode);Ovo=r(Bgt,"pretrained_model_name_or_path"),Bgt.forEach(t),Vvo=r(Ire," if possible):"),Ire.forEach(t),Xvo=i(na),fe=n(na,"UL",{});var _e=s(fe);Mp=n(_e,"LI",{});var Nye=s(Mp);Vde=n(Nye,"STRONG",{});var Igt=s(Vde);zvo=r(Igt,"clip"),Igt.forEach(t),Wvo=r(Nye," \u2014 "),Nq=n(Nye,"A",{href:!0});var Ngt=s(Nq);Qvo=r(Ngt,"CLIPProcessor"),Ngt.forEach(t),Hvo=r(Nye," (CLIP model)"),Nye.forEach(t),Uvo=i(_e),Ep=n(_e,"LI",{});var qye=s(Ep);Xde=n(qye,"STRONG",{});var qgt=s(Xde);Jvo=r(qgt,"flava"),qgt.forEach(t),Yvo=r(qye," \u2014 "),zde=n(qye,"CODE",{});var jgt=s(zde);Kvo=r(jgt,"FLAVAProcessor"),jgt.forEach(t),Zvo=r(qye," (FLAVA model)"),qye.forEach(t),e3o=i(_e),Cp=n(_e,"LI",{});var jye=s(Cp);Wde=n(jye,"STRONG",{});var Dgt=s(Wde);o3o=r(Dgt,"groupvit"),Dgt.forEach(t),r3o=r(jye," \u2014 "),qq=n(jye,"A",{href:!0});var Ggt=s(qq);t3o=r(Ggt,"CLIPProcessor"),Ggt.forEach(t),a3o=r(jye," (GroupViT model)"),jye.forEach(t),n3o=i(_e),wp=n(_e,"LI",{});var Dye=s(wp);Qde=n(Dye,"STRONG",{});var Ogt=s(Qde);s3o=r(Ogt,"layoutlmv2"),Ogt.forEach(t),l3o=r(Dye," \u2014 "),jq=n(Dye,"A",{href:!0});var Vgt=s(jq);i3o=r(Vgt,"LayoutLMv2Processor"),Vgt.forEach(t),d3o=r(Dye," (LayoutLMv2 model)"),Dye.forEach(t),c3o=i(_e),Ap=n(_e,"LI",{});var Gye=s(Ap);Hde=n(Gye,"STRONG",{});var Xgt=s(Hde);f3o=r(Xgt,"layoutlmv3"),Xgt.forEach(t),m3o=r(Gye," \u2014 "),Dq=n(Gye,"A",{href:!0});var zgt=s(Dq);g3o=r(zgt,"LayoutLMv3Processor"),zgt.forEach(t),h3o=r(Gye," (LayoutLMv3 model)"),Gye.forEach(t),p3o=i(_e),Lp=n(_e,"LI",{});var Oye=s(Lp);Ude=n(Oye,"STRONG",{});var Wgt=s(Ude);_3o=r(Wgt,"layoutxlm"),Wgt.forEach(t),u3o=r(Oye," \u2014 "),Gq=n(Oye,"A",{href:!0});var Qgt=s(Gq);b3o=r(Qgt,"LayoutXLMProcessor"),Qgt.forEach(t),v3o=r(Oye," (LayoutXLM model)"),Oye.forEach(t),F3o=i(_e),yp=n(_e,"LI",{});var Vye=s(yp);Jde=n(Vye,"STRONG",{});var Hgt=s(Jde);T3o=r(Hgt,"owlvit"),Hgt.forEach(t),M3o=r(Vye," \u2014 "),Oq=n(Vye,"A",{href:!0});var Ugt=s(Oq);E3o=r(Ugt,"OwlViTProcessor"),Ugt.forEach(t),C3o=r(Vye," (OWL-ViT model)"),Vye.forEach(t),w3o=i(_e),xp=n(_e,"LI",{});var Xye=s(xp);Yde=n(Xye,"STRONG",{});var Jgt=s(Yde);A3o=r(Jgt,"sew"),Jgt.forEach(t),L3o=r(Xye," \u2014 "),Vq=n(Xye,"A",{href:!0});var Ygt=s(Vq);y3o=r(Ygt,"Wav2Vec2Processor"),Ygt.forEach(t),x3o=r(Xye," (SEW model)"),Xye.forEach(t),$3o=i(_e),$p=n(_e,"LI",{});var zye=s($p);Kde=n(zye,"STRONG",{});var Kgt=s(Kde);k3o=r(Kgt,"sew-d"),Kgt.forEach(t),S3o=r(zye," \u2014 "),Xq=n(zye,"A",{href:!0});var Zgt=s(Xq);R3o=r(Zgt,"Wav2Vec2Processor"),Zgt.forEach(t),P3o=r(zye," (SEW-D model)"),zye.forEach(t),B3o=i(_e),kp=n(_e,"LI",{});var Wye=s(kp);Zde=n(Wye,"STRONG",{});var eht=s(Zde);I3o=r(eht,"speech_to_text"),eht.forEach(t),N3o=r(Wye," \u2014 "),zq=n(Wye,"A",{href:!0});var oht=s(zq);q3o=r(oht,"Speech2TextProcessor"),oht.forEach(t),j3o=r(Wye," (Speech2Text model)"),Wye.forEach(t),D3o=i(_e),Sp=n(_e,"LI",{});var Qye=s(Sp);ece=n(Qye,"STRONG",{});var rht=s(ece);G3o=r(rht,"speech_to_text_2"),rht.forEach(t),O3o=r(Qye," \u2014 "),Wq=n(Qye,"A",{href:!0});var tht=s(Wq);V3o=r(tht,"Speech2Text2Processor"),tht.forEach(t),X3o=r(Qye," (Speech2Text2 model)"),Qye.forEach(t),z3o=i(_e),Rp=n(_e,"LI",{});var Hye=s(Rp);oce=n(Hye,"STRONG",{});var aht=s(oce);W3o=r(aht,"trocr"),aht.forEach(t),Q3o=r(Hye," \u2014 "),Qq=n(Hye,"A",{href:!0});var nht=s(Qq);H3o=r(nht,"TrOCRProcessor"),nht.forEach(t),U3o=r(Hye," (TrOCR model)"),Hye.forEach(t),J3o=i(_e),Pp=n(_e,"LI",{});var Uye=s(Pp);rce=n(Uye,"STRONG",{});var sht=s(rce);Y3o=r(sht,"unispeech"),sht.forEach(t),K3o=r(Uye," \u2014 "),Hq=n(Uye,"A",{href:!0});var lht=s(Hq);Z3o=r(lht,"Wav2Vec2Processor"),lht.forEach(t),eFo=r(Uye," (UniSpeech model)"),Uye.forEach(t),oFo=i(_e),Bp=n(_e,"LI",{});var Jye=s(Bp);tce=n(Jye,"STRONG",{});var iht=s(tce);rFo=r(iht,"unispeech-sat"),iht.forEach(t),tFo=r(Jye," \u2014 "),Uq=n(Jye,"A",{href:!0});var dht=s(Uq);aFo=r(dht,"Wav2Vec2Processor"),dht.forEach(t),nFo=r(Jye," (UniSpeechSat model)"),Jye.forEach(t),sFo=i(_e),Ip=n(_e,"LI",{});var Yye=s(Ip);ace=n(Yye,"STRONG",{});var cht=s(ace);lFo=r(cht,"vilt"),cht.forEach(t),iFo=r(Yye," \u2014 "),Jq=n(Yye,"A",{href:!0});var fht=s(Jq);dFo=r(fht,"ViltProcessor"),fht.forEach(t),cFo=r(Yye," (ViLT model)"),Yye.forEach(t),fFo=i(_e),Np=n(_e,"LI",{});var Kye=s(Np);nce=n(Kye,"STRONG",{});var mht=s(nce);mFo=r(mht,"vision-text-dual-encoder"),mht.forEach(t),gFo=r(Kye," \u2014 "),Yq=n(Kye,"A",{href:!0});var ght=s(Yq);hFo=r(ght,"VisionTextDualEncoderProcessor"),ght.forEach(t),pFo=r(Kye," (VisionTextDualEncoder model)"),Kye.forEach(t),_Fo=i(_e),qp=n(_e,"LI",{});var Zye=s(qp);sce=n(Zye,"STRONG",{});var hht=s(sce);uFo=r(hht,"wav2vec2"),hht.forEach(t),bFo=r(Zye," \u2014 "),Kq=n(Zye,"A",{href:!0});var pht=s(Kq);vFo=r(pht,"Wav2Vec2Processor"),pht.forEach(t),FFo=r(Zye," (Wav2Vec2 model)"),Zye.forEach(t),TFo=i(_e),jp=n(_e,"LI",{});var exe=s(jp);lce=n(exe,"STRONG",{});var _ht=s(lce);MFo=r(_ht,"wav2vec2-conformer"),_ht.forEach(t),EFo=r(exe," \u2014 "),Zq=n(exe,"A",{href:!0});var uht=s(Zq);CFo=r(uht,"Wav2Vec2Processor"),uht.forEach(t),wFo=r(exe," (Wav2Vec2-Conformer model)"),exe.forEach(t),AFo=i(_e),Dp=n(_e,"LI",{});var oxe=s(Dp);ice=n(oxe,"STRONG",{});var bht=s(ice);LFo=r(bht,"wavlm"),bht.forEach(t),yFo=r(oxe," \u2014 "),ej=n(oxe,"A",{href:!0});var vht=s(ej);xFo=r(vht,"Wav2Vec2Processor"),vht.forEach(t),$Fo=r(oxe," (WavLM model)"),oxe.forEach(t),_e.forEach(t),kFo=i(na),T(Gp.$$.fragment,na),SFo=i(na),T(Op.$$.fragment,na),na.forEach(t),RFo=i(ol),Vp=n(ol,"DIV",{class:!0});var LWe=s(Vp);T(S6.$$.fragment,LWe),PFo=i(LWe),dce=n(LWe,"P",{});var Fht=s(dce);BFo=r(Fht,"Register a new processor for this class."),Fht.forEach(t),LWe.forEach(t),ol.forEach(t),MXe=i(f),Gi=n(f,"H2",{class:!0});var yWe=s(Gi);Xp=n(yWe,"A",{id:!0,class:!0,href:!0});var Tht=s(Xp);cce=n(Tht,"SPAN",{});var Mht=s(cce);T(R6.$$.fragment,Mht),Mht.forEach(t),Tht.forEach(t),IFo=i(yWe),fce=n(yWe,"SPAN",{});var Eht=s(fce);NFo=r(Eht,"AutoModel"),Eht.forEach(t),yWe.forEach(t),EXe=i(f),xo=n(f,"DIV",{class:!0});var rl=s(xo);T(P6.$$.fragment,rl),qFo=i(rl),Oi=n(rl,"P",{});var Nre=s(Oi);jFo=r(Nre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),oj=n(Nre,"A",{href:!0});var Cht=s(oj);DFo=r(Cht,"from_pretrained()"),Cht.forEach(t),GFo=r(Nre," class method or the "),rj=n(Nre,"A",{href:!0});var wht=s(rj);OFo=r(wht,"from_config()"),wht.forEach(t),VFo=r(Nre,` class
method.`),Nre.forEach(t),XFo=i(rl),B6=n(rl,"P",{});var xWe=s(B6);zFo=r(xWe,"This class cannot be instantiated directly using "),mce=n(xWe,"CODE",{});var Aht=s(mce);WFo=r(Aht,"__init__()"),Aht.forEach(t),QFo=r(xWe," (throws an error)."),xWe.forEach(t),HFo=i(rl),lt=n(rl,"DIV",{class:!0});var fw=s(lt);T(I6.$$.fragment,fw),UFo=i(fw),gce=n(fw,"P",{});var Lht=s(gce);JFo=r(Lht,"Instantiates one of the base model classes of the library from a configuration."),Lht.forEach(t),YFo=i(fw),Vi=n(fw,"P",{});var qre=s(Vi);KFo=r(qre,`Note:
Loading a model from its configuration file does `),hce=n(qre,"STRONG",{});var yht=s(hce);ZFo=r(yht,"not"),yht.forEach(t),eTo=r(qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),tj=n(qre,"A",{href:!0});var xht=s(tj);oTo=r(xht,"from_pretrained()"),xht.forEach(t),rTo=r(qre," to load the model weights."),qre.forEach(t),tTo=i(fw),T(zp.$$.fragment,fw),fw.forEach(t),aTo=i(rl),Je=n(rl,"DIV",{class:!0});var sa=s(Je);T(N6.$$.fragment,sa),nTo=i(sa),pce=n(sa,"P",{});var $ht=s(pce);sTo=r($ht,"Instantiate one of the base model classes of the library from a pretrained model."),$ht.forEach(t),lTo=i(sa),Ia=n(sa,"P",{});var mw=s(Ia);iTo=r(mw,"The model class to instantiate is selected based on the "),_ce=n(mw,"CODE",{});var kht=s(_ce);dTo=r(kht,"model_type"),kht.forEach(t),cTo=r(mw,` property of the config object (either
passed as an argument or loaded from `),uce=n(mw,"CODE",{});var Sht=s(uce);fTo=r(Sht,"pretrained_model_name_or_path"),Sht.forEach(t),mTo=r(mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bce=n(mw,"CODE",{});var Rht=s(bce);gTo=r(Rht,"pretrained_model_name_or_path"),Rht.forEach(t),hTo=r(mw,":"),mw.forEach(t),pTo=i(sa),y=n(sa,"UL",{});var x=s(y);Wp=n(x,"LI",{});var rxe=s(Wp);vce=n(rxe,"STRONG",{});var Pht=s(vce);_To=r(Pht,"albert"),Pht.forEach(t),uTo=r(rxe," \u2014 "),aj=n(rxe,"A",{href:!0});var Bht=s(aj);bTo=r(Bht,"AlbertModel"),Bht.forEach(t),vTo=r(rxe," (ALBERT model)"),rxe.forEach(t),FTo=i(x),Qp=n(x,"LI",{});var txe=s(Qp);Fce=n(txe,"STRONG",{});var Iht=s(Fce);TTo=r(Iht,"bart"),Iht.forEach(t),MTo=r(txe," \u2014 "),nj=n(txe,"A",{href:!0});var Nht=s(nj);ETo=r(Nht,"BartModel"),Nht.forEach(t),CTo=r(txe," (BART model)"),txe.forEach(t),wTo=i(x),Hp=n(x,"LI",{});var axe=s(Hp);Tce=n(axe,"STRONG",{});var qht=s(Tce);ATo=r(qht,"beit"),qht.forEach(t),LTo=r(axe," \u2014 "),sj=n(axe,"A",{href:!0});var jht=s(sj);yTo=r(jht,"BeitModel"),jht.forEach(t),xTo=r(axe," (BEiT model)"),axe.forEach(t),$To=i(x),Up=n(x,"LI",{});var nxe=s(Up);Mce=n(nxe,"STRONG",{});var Dht=s(Mce);kTo=r(Dht,"bert"),Dht.forEach(t),STo=r(nxe," \u2014 "),lj=n(nxe,"A",{href:!0});var Ght=s(lj);RTo=r(Ght,"BertModel"),Ght.forEach(t),PTo=r(nxe," (BERT model)"),nxe.forEach(t),BTo=i(x),Jp=n(x,"LI",{});var sxe=s(Jp);Ece=n(sxe,"STRONG",{});var Oht=s(Ece);ITo=r(Oht,"bert-generation"),Oht.forEach(t),NTo=r(sxe," \u2014 "),ij=n(sxe,"A",{href:!0});var Vht=s(ij);qTo=r(Vht,"BertGenerationEncoder"),Vht.forEach(t),jTo=r(sxe," (Bert Generation model)"),sxe.forEach(t),DTo=i(x),Yp=n(x,"LI",{});var lxe=s(Yp);Cce=n(lxe,"STRONG",{});var Xht=s(Cce);GTo=r(Xht,"big_bird"),Xht.forEach(t),OTo=r(lxe," \u2014 "),dj=n(lxe,"A",{href:!0});var zht=s(dj);VTo=r(zht,"BigBirdModel"),zht.forEach(t),XTo=r(lxe," (BigBird model)"),lxe.forEach(t),zTo=i(x),Kp=n(x,"LI",{});var ixe=s(Kp);wce=n(ixe,"STRONG",{});var Wht=s(wce);WTo=r(Wht,"bigbird_pegasus"),Wht.forEach(t),QTo=r(ixe," \u2014 "),cj=n(ixe,"A",{href:!0});var Qht=s(cj);HTo=r(Qht,"BigBirdPegasusModel"),Qht.forEach(t),UTo=r(ixe," (BigBird-Pegasus model)"),ixe.forEach(t),JTo=i(x),Zp=n(x,"LI",{});var dxe=s(Zp);Ace=n(dxe,"STRONG",{});var Hht=s(Ace);YTo=r(Hht,"blenderbot"),Hht.forEach(t),KTo=r(dxe," \u2014 "),fj=n(dxe,"A",{href:!0});var Uht=s(fj);ZTo=r(Uht,"BlenderbotModel"),Uht.forEach(t),e7o=r(dxe," (Blenderbot model)"),dxe.forEach(t),o7o=i(x),e_=n(x,"LI",{});var cxe=s(e_);Lce=n(cxe,"STRONG",{});var Jht=s(Lce);r7o=r(Jht,"blenderbot-small"),Jht.forEach(t),t7o=r(cxe," \u2014 "),mj=n(cxe,"A",{href:!0});var Yht=s(mj);a7o=r(Yht,"BlenderbotSmallModel"),Yht.forEach(t),n7o=r(cxe," (BlenderbotSmall model)"),cxe.forEach(t),s7o=i(x),o_=n(x,"LI",{});var fxe=s(o_);yce=n(fxe,"STRONG",{});var Kht=s(yce);l7o=r(Kht,"bloom"),Kht.forEach(t),i7o=r(fxe," \u2014 "),gj=n(fxe,"A",{href:!0});var Zht=s(gj);d7o=r(Zht,"BloomModel"),Zht.forEach(t),c7o=r(fxe," (BLOOM model)"),fxe.forEach(t),f7o=i(x),r_=n(x,"LI",{});var mxe=s(r_);xce=n(mxe,"STRONG",{});var ept=s(xce);m7o=r(ept,"camembert"),ept.forEach(t),g7o=r(mxe," \u2014 "),hj=n(mxe,"A",{href:!0});var opt=s(hj);h7o=r(opt,"CamembertModel"),opt.forEach(t),p7o=r(mxe," (CamemBERT model)"),mxe.forEach(t),_7o=i(x),t_=n(x,"LI",{});var gxe=s(t_);$ce=n(gxe,"STRONG",{});var rpt=s($ce);u7o=r(rpt,"canine"),rpt.forEach(t),b7o=r(gxe," \u2014 "),pj=n(gxe,"A",{href:!0});var tpt=s(pj);v7o=r(tpt,"CanineModel"),tpt.forEach(t),F7o=r(gxe," (CANINE model)"),gxe.forEach(t),T7o=i(x),a_=n(x,"LI",{});var hxe=s(a_);kce=n(hxe,"STRONG",{});var apt=s(kce);M7o=r(apt,"clip"),apt.forEach(t),E7o=r(hxe," \u2014 "),_j=n(hxe,"A",{href:!0});var npt=s(_j);C7o=r(npt,"CLIPModel"),npt.forEach(t),w7o=r(hxe," (CLIP model)"),hxe.forEach(t),A7o=i(x),n_=n(x,"LI",{});var pxe=s(n_);Sce=n(pxe,"STRONG",{});var spt=s(Sce);L7o=r(spt,"codegen"),spt.forEach(t),y7o=r(pxe," \u2014 "),uj=n(pxe,"A",{href:!0});var lpt=s(uj);x7o=r(lpt,"CodeGenModel"),lpt.forEach(t),$7o=r(pxe," (CodeGen model)"),pxe.forEach(t),k7o=i(x),s_=n(x,"LI",{});var _xe=s(s_);Rce=n(_xe,"STRONG",{});var ipt=s(Rce);S7o=r(ipt,"convbert"),ipt.forEach(t),R7o=r(_xe," \u2014 "),bj=n(_xe,"A",{href:!0});var dpt=s(bj);P7o=r(dpt,"ConvBertModel"),dpt.forEach(t),B7o=r(_xe," (ConvBERT model)"),_xe.forEach(t),I7o=i(x),l_=n(x,"LI",{});var uxe=s(l_);Pce=n(uxe,"STRONG",{});var cpt=s(Pce);N7o=r(cpt,"convnext"),cpt.forEach(t),q7o=r(uxe," \u2014 "),vj=n(uxe,"A",{href:!0});var fpt=s(vj);j7o=r(fpt,"ConvNextModel"),fpt.forEach(t),D7o=r(uxe," (ConvNeXT model)"),uxe.forEach(t),G7o=i(x),i_=n(x,"LI",{});var bxe=s(i_);Bce=n(bxe,"STRONG",{});var mpt=s(Bce);O7o=r(mpt,"ctrl"),mpt.forEach(t),V7o=r(bxe," \u2014 "),Fj=n(bxe,"A",{href:!0});var gpt=s(Fj);X7o=r(gpt,"CTRLModel"),gpt.forEach(t),z7o=r(bxe," (CTRL model)"),bxe.forEach(t),W7o=i(x),d_=n(x,"LI",{});var vxe=s(d_);Ice=n(vxe,"STRONG",{});var hpt=s(Ice);Q7o=r(hpt,"cvt"),hpt.forEach(t),H7o=r(vxe," \u2014 "),Tj=n(vxe,"A",{href:!0});var ppt=s(Tj);U7o=r(ppt,"CvtModel"),ppt.forEach(t),J7o=r(vxe," (CvT model)"),vxe.forEach(t),Y7o=i(x),c_=n(x,"LI",{});var Fxe=s(c_);Nce=n(Fxe,"STRONG",{});var _pt=s(Nce);K7o=r(_pt,"data2vec-audio"),_pt.forEach(t),Z7o=r(Fxe," \u2014 "),Mj=n(Fxe,"A",{href:!0});var upt=s(Mj);e8o=r(upt,"Data2VecAudioModel"),upt.forEach(t),o8o=r(Fxe," (Data2VecAudio model)"),Fxe.forEach(t),r8o=i(x),f_=n(x,"LI",{});var Txe=s(f_);qce=n(Txe,"STRONG",{});var bpt=s(qce);t8o=r(bpt,"data2vec-text"),bpt.forEach(t),a8o=r(Txe," \u2014 "),Ej=n(Txe,"A",{href:!0});var vpt=s(Ej);n8o=r(vpt,"Data2VecTextModel"),vpt.forEach(t),s8o=r(Txe," (Data2VecText model)"),Txe.forEach(t),l8o=i(x),m_=n(x,"LI",{});var Mxe=s(m_);jce=n(Mxe,"STRONG",{});var Fpt=s(jce);i8o=r(Fpt,"data2vec-vision"),Fpt.forEach(t),d8o=r(Mxe," \u2014 "),Cj=n(Mxe,"A",{href:!0});var Tpt=s(Cj);c8o=r(Tpt,"Data2VecVisionModel"),Tpt.forEach(t),f8o=r(Mxe," (Data2VecVision model)"),Mxe.forEach(t),m8o=i(x),g_=n(x,"LI",{});var Exe=s(g_);Dce=n(Exe,"STRONG",{});var Mpt=s(Dce);g8o=r(Mpt,"deberta"),Mpt.forEach(t),h8o=r(Exe," \u2014 "),wj=n(Exe,"A",{href:!0});var Ept=s(wj);p8o=r(Ept,"DebertaModel"),Ept.forEach(t),_8o=r(Exe," (DeBERTa model)"),Exe.forEach(t),u8o=i(x),h_=n(x,"LI",{});var Cxe=s(h_);Gce=n(Cxe,"STRONG",{});var Cpt=s(Gce);b8o=r(Cpt,"deberta-v2"),Cpt.forEach(t),v8o=r(Cxe," \u2014 "),Aj=n(Cxe,"A",{href:!0});var wpt=s(Aj);F8o=r(wpt,"DebertaV2Model"),wpt.forEach(t),T8o=r(Cxe," (DeBERTa-v2 model)"),Cxe.forEach(t),M8o=i(x),p_=n(x,"LI",{});var wxe=s(p_);Oce=n(wxe,"STRONG",{});var Apt=s(Oce);E8o=r(Apt,"decision_transformer"),Apt.forEach(t),C8o=r(wxe," \u2014 "),Lj=n(wxe,"A",{href:!0});var Lpt=s(Lj);w8o=r(Lpt,"DecisionTransformerModel"),Lpt.forEach(t),A8o=r(wxe," (Decision Transformer model)"),wxe.forEach(t),L8o=i(x),__=n(x,"LI",{});var Axe=s(__);Vce=n(Axe,"STRONG",{});var ypt=s(Vce);y8o=r(ypt,"deit"),ypt.forEach(t),x8o=r(Axe," \u2014 "),yj=n(Axe,"A",{href:!0});var xpt=s(yj);$8o=r(xpt,"DeiTModel"),xpt.forEach(t),k8o=r(Axe," (DeiT model)"),Axe.forEach(t),S8o=i(x),u_=n(x,"LI",{});var Lxe=s(u_);Xce=n(Lxe,"STRONG",{});var $pt=s(Xce);R8o=r($pt,"detr"),$pt.forEach(t),P8o=r(Lxe," \u2014 "),xj=n(Lxe,"A",{href:!0});var kpt=s(xj);B8o=r(kpt,"DetrModel"),kpt.forEach(t),I8o=r(Lxe," (DETR model)"),Lxe.forEach(t),N8o=i(x),b_=n(x,"LI",{});var yxe=s(b_);zce=n(yxe,"STRONG",{});var Spt=s(zce);q8o=r(Spt,"distilbert"),Spt.forEach(t),j8o=r(yxe," \u2014 "),$j=n(yxe,"A",{href:!0});var Rpt=s($j);D8o=r(Rpt,"DistilBertModel"),Rpt.forEach(t),G8o=r(yxe," (DistilBERT model)"),yxe.forEach(t),O8o=i(x),v_=n(x,"LI",{});var xxe=s(v_);Wce=n(xxe,"STRONG",{});var Ppt=s(Wce);V8o=r(Ppt,"dpr"),Ppt.forEach(t),X8o=r(xxe," \u2014 "),kj=n(xxe,"A",{href:!0});var Bpt=s(kj);z8o=r(Bpt,"DPRQuestionEncoder"),Bpt.forEach(t),W8o=r(xxe," (DPR model)"),xxe.forEach(t),Q8o=i(x),F_=n(x,"LI",{});var $xe=s(F_);Qce=n($xe,"STRONG",{});var Ipt=s(Qce);H8o=r(Ipt,"dpt"),Ipt.forEach(t),U8o=r($xe," \u2014 "),Sj=n($xe,"A",{href:!0});var Npt=s(Sj);J8o=r(Npt,"DPTModel"),Npt.forEach(t),Y8o=r($xe," (DPT model)"),$xe.forEach(t),K8o=i(x),T_=n(x,"LI",{});var kxe=s(T_);Hce=n(kxe,"STRONG",{});var qpt=s(Hce);Z8o=r(qpt,"electra"),qpt.forEach(t),e9o=r(kxe," \u2014 "),Rj=n(kxe,"A",{href:!0});var jpt=s(Rj);o9o=r(jpt,"ElectraModel"),jpt.forEach(t),r9o=r(kxe," (ELECTRA model)"),kxe.forEach(t),t9o=i(x),M_=n(x,"LI",{});var Sxe=s(M_);Uce=n(Sxe,"STRONG",{});var Dpt=s(Uce);a9o=r(Dpt,"flaubert"),Dpt.forEach(t),n9o=r(Sxe," \u2014 "),Pj=n(Sxe,"A",{href:!0});var Gpt=s(Pj);s9o=r(Gpt,"FlaubertModel"),Gpt.forEach(t),l9o=r(Sxe," (FlauBERT model)"),Sxe.forEach(t),i9o=i(x),E_=n(x,"LI",{});var Rxe=s(E_);Jce=n(Rxe,"STRONG",{});var Opt=s(Jce);d9o=r(Opt,"flava"),Opt.forEach(t),c9o=r(Rxe," \u2014 "),Bj=n(Rxe,"A",{href:!0});var Vpt=s(Bj);f9o=r(Vpt,"FlavaModel"),Vpt.forEach(t),m9o=r(Rxe," (FLAVA model)"),Rxe.forEach(t),g9o=i(x),C_=n(x,"LI",{});var Pxe=s(C_);Yce=n(Pxe,"STRONG",{});var Xpt=s(Yce);h9o=r(Xpt,"fnet"),Xpt.forEach(t),p9o=r(Pxe," \u2014 "),Ij=n(Pxe,"A",{href:!0});var zpt=s(Ij);_9o=r(zpt,"FNetModel"),zpt.forEach(t),u9o=r(Pxe," (FNet model)"),Pxe.forEach(t),b9o=i(x),w_=n(x,"LI",{});var Bxe=s(w_);Kce=n(Bxe,"STRONG",{});var Wpt=s(Kce);v9o=r(Wpt,"fsmt"),Wpt.forEach(t),F9o=r(Bxe," \u2014 "),Nj=n(Bxe,"A",{href:!0});var Qpt=s(Nj);T9o=r(Qpt,"FSMTModel"),Qpt.forEach(t),M9o=r(Bxe," (FairSeq Machine-Translation model)"),Bxe.forEach(t),E9o=i(x),Hs=n(x,"LI",{});var PS=s(Hs);Zce=n(PS,"STRONG",{});var Hpt=s(Zce);C9o=r(Hpt,"funnel"),Hpt.forEach(t),w9o=r(PS," \u2014 "),qj=n(PS,"A",{href:!0});var Upt=s(qj);A9o=r(Upt,"FunnelModel"),Upt.forEach(t),L9o=r(PS," or "),jj=n(PS,"A",{href:!0});var Jpt=s(jj);y9o=r(Jpt,"FunnelBaseModel"),Jpt.forEach(t),x9o=r(PS," (Funnel Transformer model)"),PS.forEach(t),$9o=i(x),A_=n(x,"LI",{});var Ixe=s(A_);efe=n(Ixe,"STRONG",{});var Ypt=s(efe);k9o=r(Ypt,"glpn"),Ypt.forEach(t),S9o=r(Ixe," \u2014 "),Dj=n(Ixe,"A",{href:!0});var Kpt=s(Dj);R9o=r(Kpt,"GLPNModel"),Kpt.forEach(t),P9o=r(Ixe," (GLPN model)"),Ixe.forEach(t),B9o=i(x),L_=n(x,"LI",{});var Nxe=s(L_);ofe=n(Nxe,"STRONG",{});var Zpt=s(ofe);I9o=r(Zpt,"gpt2"),Zpt.forEach(t),N9o=r(Nxe," \u2014 "),Gj=n(Nxe,"A",{href:!0});var e_t=s(Gj);q9o=r(e_t,"GPT2Model"),e_t.forEach(t),j9o=r(Nxe," (OpenAI GPT-2 model)"),Nxe.forEach(t),D9o=i(x),y_=n(x,"LI",{});var qxe=s(y_);rfe=n(qxe,"STRONG",{});var o_t=s(rfe);G9o=r(o_t,"gpt_neo"),o_t.forEach(t),O9o=r(qxe," \u2014 "),Oj=n(qxe,"A",{href:!0});var r_t=s(Oj);V9o=r(r_t,"GPTNeoModel"),r_t.forEach(t),X9o=r(qxe," (GPT Neo model)"),qxe.forEach(t),z9o=i(x),x_=n(x,"LI",{});var jxe=s(x_);tfe=n(jxe,"STRONG",{});var t_t=s(tfe);W9o=r(t_t,"gpt_neox"),t_t.forEach(t),Q9o=r(jxe," \u2014 "),Vj=n(jxe,"A",{href:!0});var a_t=s(Vj);H9o=r(a_t,"GPTNeoXModel"),a_t.forEach(t),U9o=r(jxe," (GPT NeoX model)"),jxe.forEach(t),J9o=i(x),$_=n(x,"LI",{});var Dxe=s($_);afe=n(Dxe,"STRONG",{});var n_t=s(afe);Y9o=r(n_t,"gptj"),n_t.forEach(t),K9o=r(Dxe," \u2014 "),Xj=n(Dxe,"A",{href:!0});var s_t=s(Xj);Z9o=r(s_t,"GPTJModel"),s_t.forEach(t),eMo=r(Dxe," (GPT-J model)"),Dxe.forEach(t),oMo=i(x),k_=n(x,"LI",{});var Gxe=s(k_);nfe=n(Gxe,"STRONG",{});var l_t=s(nfe);rMo=r(l_t,"groupvit"),l_t.forEach(t),tMo=r(Gxe," \u2014 "),zj=n(Gxe,"A",{href:!0});var i_t=s(zj);aMo=r(i_t,"GroupViTModel"),i_t.forEach(t),nMo=r(Gxe," (GroupViT model)"),Gxe.forEach(t),sMo=i(x),S_=n(x,"LI",{});var Oxe=s(S_);sfe=n(Oxe,"STRONG",{});var d_t=s(sfe);lMo=r(d_t,"hubert"),d_t.forEach(t),iMo=r(Oxe," \u2014 "),Wj=n(Oxe,"A",{href:!0});var c_t=s(Wj);dMo=r(c_t,"HubertModel"),c_t.forEach(t),cMo=r(Oxe," (Hubert model)"),Oxe.forEach(t),fMo=i(x),R_=n(x,"LI",{});var Vxe=s(R_);lfe=n(Vxe,"STRONG",{});var f_t=s(lfe);mMo=r(f_t,"ibert"),f_t.forEach(t),gMo=r(Vxe," \u2014 "),Qj=n(Vxe,"A",{href:!0});var m_t=s(Qj);hMo=r(m_t,"IBertModel"),m_t.forEach(t),pMo=r(Vxe," (I-BERT model)"),Vxe.forEach(t),_Mo=i(x),P_=n(x,"LI",{});var Xxe=s(P_);ife=n(Xxe,"STRONG",{});var g_t=s(ife);uMo=r(g_t,"imagegpt"),g_t.forEach(t),bMo=r(Xxe," \u2014 "),Hj=n(Xxe,"A",{href:!0});var h_t=s(Hj);vMo=r(h_t,"ImageGPTModel"),h_t.forEach(t),FMo=r(Xxe," (ImageGPT model)"),Xxe.forEach(t),TMo=i(x),B_=n(x,"LI",{});var zxe=s(B_);dfe=n(zxe,"STRONG",{});var p_t=s(dfe);MMo=r(p_t,"layoutlm"),p_t.forEach(t),EMo=r(zxe," \u2014 "),Uj=n(zxe,"A",{href:!0});var __t=s(Uj);CMo=r(__t,"LayoutLMModel"),__t.forEach(t),wMo=r(zxe," (LayoutLM model)"),zxe.forEach(t),AMo=i(x),I_=n(x,"LI",{});var Wxe=s(I_);cfe=n(Wxe,"STRONG",{});var u_t=s(cfe);LMo=r(u_t,"layoutlmv2"),u_t.forEach(t),yMo=r(Wxe," \u2014 "),Jj=n(Wxe,"A",{href:!0});var b_t=s(Jj);xMo=r(b_t,"LayoutLMv2Model"),b_t.forEach(t),$Mo=r(Wxe," (LayoutLMv2 model)"),Wxe.forEach(t),kMo=i(x),N_=n(x,"LI",{});var Qxe=s(N_);ffe=n(Qxe,"STRONG",{});var v_t=s(ffe);SMo=r(v_t,"layoutlmv3"),v_t.forEach(t),RMo=r(Qxe," \u2014 "),Yj=n(Qxe,"A",{href:!0});var F_t=s(Yj);PMo=r(F_t,"LayoutLMv3Model"),F_t.forEach(t),BMo=r(Qxe," (LayoutLMv3 model)"),Qxe.forEach(t),IMo=i(x),q_=n(x,"LI",{});var Hxe=s(q_);mfe=n(Hxe,"STRONG",{});var T_t=s(mfe);NMo=r(T_t,"led"),T_t.forEach(t),qMo=r(Hxe," \u2014 "),Kj=n(Hxe,"A",{href:!0});var M_t=s(Kj);jMo=r(M_t,"LEDModel"),M_t.forEach(t),DMo=r(Hxe," (LED model)"),Hxe.forEach(t),GMo=i(x),j_=n(x,"LI",{});var Uxe=s(j_);gfe=n(Uxe,"STRONG",{});var E_t=s(gfe);OMo=r(E_t,"levit"),E_t.forEach(t),VMo=r(Uxe," \u2014 "),Zj=n(Uxe,"A",{href:!0});var C_t=s(Zj);XMo=r(C_t,"LevitModel"),C_t.forEach(t),zMo=r(Uxe," (LeViT model)"),Uxe.forEach(t),WMo=i(x),D_=n(x,"LI",{});var Jxe=s(D_);hfe=n(Jxe,"STRONG",{});var w_t=s(hfe);QMo=r(w_t,"longformer"),w_t.forEach(t),HMo=r(Jxe," \u2014 "),eD=n(Jxe,"A",{href:!0});var A_t=s(eD);UMo=r(A_t,"LongformerModel"),A_t.forEach(t),JMo=r(Jxe," (Longformer model)"),Jxe.forEach(t),YMo=i(x),G_=n(x,"LI",{});var Yxe=s(G_);pfe=n(Yxe,"STRONG",{});var L_t=s(pfe);KMo=r(L_t,"longt5"),L_t.forEach(t),ZMo=r(Yxe," \u2014 "),oD=n(Yxe,"A",{href:!0});var y_t=s(oD);e4o=r(y_t,"LongT5Model"),y_t.forEach(t),o4o=r(Yxe," (LongT5 model)"),Yxe.forEach(t),r4o=i(x),O_=n(x,"LI",{});var Kxe=s(O_);_fe=n(Kxe,"STRONG",{});var x_t=s(_fe);t4o=r(x_t,"luke"),x_t.forEach(t),a4o=r(Kxe," \u2014 "),rD=n(Kxe,"A",{href:!0});var $_t=s(rD);n4o=r($_t,"LukeModel"),$_t.forEach(t),s4o=r(Kxe," (LUKE model)"),Kxe.forEach(t),l4o=i(x),V_=n(x,"LI",{});var Zxe=s(V_);ufe=n(Zxe,"STRONG",{});var k_t=s(ufe);i4o=r(k_t,"lxmert"),k_t.forEach(t),d4o=r(Zxe," \u2014 "),tD=n(Zxe,"A",{href:!0});var S_t=s(tD);c4o=r(S_t,"LxmertModel"),S_t.forEach(t),f4o=r(Zxe," (LXMERT model)"),Zxe.forEach(t),m4o=i(x),X_=n(x,"LI",{});var e$e=s(X_);bfe=n(e$e,"STRONG",{});var R_t=s(bfe);g4o=r(R_t,"m2m_100"),R_t.forEach(t),h4o=r(e$e," \u2014 "),aD=n(e$e,"A",{href:!0});var P_t=s(aD);p4o=r(P_t,"M2M100Model"),P_t.forEach(t),_4o=r(e$e," (M2M100 model)"),e$e.forEach(t),u4o=i(x),z_=n(x,"LI",{});var o$e=s(z_);vfe=n(o$e,"STRONG",{});var B_t=s(vfe);b4o=r(B_t,"marian"),B_t.forEach(t),v4o=r(o$e," \u2014 "),nD=n(o$e,"A",{href:!0});var I_t=s(nD);F4o=r(I_t,"MarianModel"),I_t.forEach(t),T4o=r(o$e," (Marian model)"),o$e.forEach(t),M4o=i(x),W_=n(x,"LI",{});var r$e=s(W_);Ffe=n(r$e,"STRONG",{});var N_t=s(Ffe);E4o=r(N_t,"maskformer"),N_t.forEach(t),C4o=r(r$e," \u2014 "),sD=n(r$e,"A",{href:!0});var q_t=s(sD);w4o=r(q_t,"MaskFormerModel"),q_t.forEach(t),A4o=r(r$e," (MaskFormer model)"),r$e.forEach(t),L4o=i(x),Q_=n(x,"LI",{});var t$e=s(Q_);Tfe=n(t$e,"STRONG",{});var j_t=s(Tfe);y4o=r(j_t,"mbart"),j_t.forEach(t),x4o=r(t$e," \u2014 "),lD=n(t$e,"A",{href:!0});var D_t=s(lD);$4o=r(D_t,"MBartModel"),D_t.forEach(t),k4o=r(t$e," (mBART model)"),t$e.forEach(t),S4o=i(x),H_=n(x,"LI",{});var a$e=s(H_);Mfe=n(a$e,"STRONG",{});var G_t=s(Mfe);R4o=r(G_t,"mctct"),G_t.forEach(t),P4o=r(a$e," \u2014 "),iD=n(a$e,"A",{href:!0});var O_t=s(iD);B4o=r(O_t,"MCTCTModel"),O_t.forEach(t),I4o=r(a$e," (M-CTC-T model)"),a$e.forEach(t),N4o=i(x),U_=n(x,"LI",{});var n$e=s(U_);Efe=n(n$e,"STRONG",{});var V_t=s(Efe);q4o=r(V_t,"megatron-bert"),V_t.forEach(t),j4o=r(n$e," \u2014 "),dD=n(n$e,"A",{href:!0});var X_t=s(dD);D4o=r(X_t,"MegatronBertModel"),X_t.forEach(t),G4o=r(n$e," (Megatron-BERT model)"),n$e.forEach(t),O4o=i(x),J_=n(x,"LI",{});var s$e=s(J_);Cfe=n(s$e,"STRONG",{});var z_t=s(Cfe);V4o=r(z_t,"mobilebert"),z_t.forEach(t),X4o=r(s$e," \u2014 "),cD=n(s$e,"A",{href:!0});var W_t=s(cD);z4o=r(W_t,"MobileBertModel"),W_t.forEach(t),W4o=r(s$e," (MobileBERT model)"),s$e.forEach(t),Q4o=i(x),Y_=n(x,"LI",{});var l$e=s(Y_);wfe=n(l$e,"STRONG",{});var Q_t=s(wfe);H4o=r(Q_t,"mobilevit"),Q_t.forEach(t),U4o=r(l$e," \u2014 "),fD=n(l$e,"A",{href:!0});var H_t=s(fD);J4o=r(H_t,"MobileViTModel"),H_t.forEach(t),Y4o=r(l$e," (MobileViT model)"),l$e.forEach(t),K4o=i(x),K_=n(x,"LI",{});var i$e=s(K_);Afe=n(i$e,"STRONG",{});var U_t=s(Afe);Z4o=r(U_t,"mpnet"),U_t.forEach(t),eEo=r(i$e," \u2014 "),mD=n(i$e,"A",{href:!0});var J_t=s(mD);oEo=r(J_t,"MPNetModel"),J_t.forEach(t),rEo=r(i$e," (MPNet model)"),i$e.forEach(t),tEo=i(x),Z_=n(x,"LI",{});var d$e=s(Z_);Lfe=n(d$e,"STRONG",{});var Y_t=s(Lfe);aEo=r(Y_t,"mt5"),Y_t.forEach(t),nEo=r(d$e," \u2014 "),gD=n(d$e,"A",{href:!0});var K_t=s(gD);sEo=r(K_t,"MT5Model"),K_t.forEach(t),lEo=r(d$e," (MT5 model)"),d$e.forEach(t),iEo=i(x),eu=n(x,"LI",{});var c$e=s(eu);yfe=n(c$e,"STRONG",{});var Z_t=s(yfe);dEo=r(Z_t,"mvp"),Z_t.forEach(t),cEo=r(c$e," \u2014 "),hD=n(c$e,"A",{href:!0});var eut=s(hD);fEo=r(eut,"MvpModel"),eut.forEach(t),mEo=r(c$e," (MVP model)"),c$e.forEach(t),gEo=i(x),ou=n(x,"LI",{});var f$e=s(ou);xfe=n(f$e,"STRONG",{});var out=s(xfe);hEo=r(out,"nezha"),out.forEach(t),pEo=r(f$e," \u2014 "),pD=n(f$e,"A",{href:!0});var rut=s(pD);_Eo=r(rut,"NezhaModel"),rut.forEach(t),uEo=r(f$e," (Nezha model)"),f$e.forEach(t),bEo=i(x),ru=n(x,"LI",{});var m$e=s(ru);$fe=n(m$e,"STRONG",{});var tut=s($fe);vEo=r(tut,"nystromformer"),tut.forEach(t),FEo=r(m$e," \u2014 "),_D=n(m$e,"A",{href:!0});var aut=s(_D);TEo=r(aut,"NystromformerModel"),aut.forEach(t),MEo=r(m$e," (Nystr\xF6mformer model)"),m$e.forEach(t),EEo=i(x),tu=n(x,"LI",{});var g$e=s(tu);kfe=n(g$e,"STRONG",{});var nut=s(kfe);CEo=r(nut,"openai-gpt"),nut.forEach(t),wEo=r(g$e," \u2014 "),uD=n(g$e,"A",{href:!0});var sut=s(uD);AEo=r(sut,"OpenAIGPTModel"),sut.forEach(t),LEo=r(g$e," (OpenAI GPT model)"),g$e.forEach(t),yEo=i(x),au=n(x,"LI",{});var h$e=s(au);Sfe=n(h$e,"STRONG",{});var lut=s(Sfe);xEo=r(lut,"opt"),lut.forEach(t),$Eo=r(h$e," \u2014 "),bD=n(h$e,"A",{href:!0});var iut=s(bD);kEo=r(iut,"OPTModel"),iut.forEach(t),SEo=r(h$e," (OPT model)"),h$e.forEach(t),REo=i(x),nu=n(x,"LI",{});var p$e=s(nu);Rfe=n(p$e,"STRONG",{});var dut=s(Rfe);PEo=r(dut,"owlvit"),dut.forEach(t),BEo=r(p$e," \u2014 "),vD=n(p$e,"A",{href:!0});var cut=s(vD);IEo=r(cut,"OwlViTModel"),cut.forEach(t),NEo=r(p$e," (OWL-ViT model)"),p$e.forEach(t),qEo=i(x),su=n(x,"LI",{});var _$e=s(su);Pfe=n(_$e,"STRONG",{});var fut=s(Pfe);jEo=r(fut,"pegasus"),fut.forEach(t),DEo=r(_$e," \u2014 "),FD=n(_$e,"A",{href:!0});var mut=s(FD);GEo=r(mut,"PegasusModel"),mut.forEach(t),OEo=r(_$e," (Pegasus model)"),_$e.forEach(t),VEo=i(x),lu=n(x,"LI",{});var u$e=s(lu);Bfe=n(u$e,"STRONG",{});var gut=s(Bfe);XEo=r(gut,"perceiver"),gut.forEach(t),zEo=r(u$e," \u2014 "),TD=n(u$e,"A",{href:!0});var hut=s(TD);WEo=r(hut,"PerceiverModel"),hut.forEach(t),QEo=r(u$e," (Perceiver model)"),u$e.forEach(t),HEo=i(x),iu=n(x,"LI",{});var b$e=s(iu);Ife=n(b$e,"STRONG",{});var put=s(Ife);UEo=r(put,"plbart"),put.forEach(t),JEo=r(b$e," \u2014 "),MD=n(b$e,"A",{href:!0});var _ut=s(MD);YEo=r(_ut,"PLBartModel"),_ut.forEach(t),KEo=r(b$e," (PLBart model)"),b$e.forEach(t),ZEo=i(x),du=n(x,"LI",{});var v$e=s(du);Nfe=n(v$e,"STRONG",{});var uut=s(Nfe);eCo=r(uut,"poolformer"),uut.forEach(t),oCo=r(v$e," \u2014 "),ED=n(v$e,"A",{href:!0});var but=s(ED);rCo=r(but,"PoolFormerModel"),but.forEach(t),tCo=r(v$e," (PoolFormer model)"),v$e.forEach(t),aCo=i(x),cu=n(x,"LI",{});var F$e=s(cu);qfe=n(F$e,"STRONG",{});var vut=s(qfe);nCo=r(vut,"prophetnet"),vut.forEach(t),sCo=r(F$e," \u2014 "),CD=n(F$e,"A",{href:!0});var Fut=s(CD);lCo=r(Fut,"ProphetNetModel"),Fut.forEach(t),iCo=r(F$e," (ProphetNet model)"),F$e.forEach(t),dCo=i(x),fu=n(x,"LI",{});var T$e=s(fu);jfe=n(T$e,"STRONG",{});var Tut=s(jfe);cCo=r(Tut,"qdqbert"),Tut.forEach(t),fCo=r(T$e," \u2014 "),wD=n(T$e,"A",{href:!0});var Mut=s(wD);mCo=r(Mut,"QDQBertModel"),Mut.forEach(t),gCo=r(T$e," (QDQBert model)"),T$e.forEach(t),hCo=i(x),mu=n(x,"LI",{});var M$e=s(mu);Dfe=n(M$e,"STRONG",{});var Eut=s(Dfe);pCo=r(Eut,"reformer"),Eut.forEach(t),_Co=r(M$e," \u2014 "),AD=n(M$e,"A",{href:!0});var Cut=s(AD);uCo=r(Cut,"ReformerModel"),Cut.forEach(t),bCo=r(M$e," (Reformer model)"),M$e.forEach(t),vCo=i(x),gu=n(x,"LI",{});var E$e=s(gu);Gfe=n(E$e,"STRONG",{});var wut=s(Gfe);FCo=r(wut,"regnet"),wut.forEach(t),TCo=r(E$e," \u2014 "),LD=n(E$e,"A",{href:!0});var Aut=s(LD);MCo=r(Aut,"RegNetModel"),Aut.forEach(t),ECo=r(E$e," (RegNet model)"),E$e.forEach(t),CCo=i(x),hu=n(x,"LI",{});var C$e=s(hu);Ofe=n(C$e,"STRONG",{});var Lut=s(Ofe);wCo=r(Lut,"rembert"),Lut.forEach(t),ACo=r(C$e," \u2014 "),yD=n(C$e,"A",{href:!0});var yut=s(yD);LCo=r(yut,"RemBertModel"),yut.forEach(t),yCo=r(C$e," (RemBERT model)"),C$e.forEach(t),xCo=i(x),pu=n(x,"LI",{});var w$e=s(pu);Vfe=n(w$e,"STRONG",{});var xut=s(Vfe);$Co=r(xut,"resnet"),xut.forEach(t),kCo=r(w$e," \u2014 "),xD=n(w$e,"A",{href:!0});var $ut=s(xD);SCo=r($ut,"ResNetModel"),$ut.forEach(t),RCo=r(w$e," (ResNet model)"),w$e.forEach(t),PCo=i(x),_u=n(x,"LI",{});var A$e=s(_u);Xfe=n(A$e,"STRONG",{});var kut=s(Xfe);BCo=r(kut,"retribert"),kut.forEach(t),ICo=r(A$e," \u2014 "),$D=n(A$e,"A",{href:!0});var Sut=s($D);NCo=r(Sut,"RetriBertModel"),Sut.forEach(t),qCo=r(A$e," (RetriBERT model)"),A$e.forEach(t),jCo=i(x),uu=n(x,"LI",{});var L$e=s(uu);zfe=n(L$e,"STRONG",{});var Rut=s(zfe);DCo=r(Rut,"roberta"),Rut.forEach(t),GCo=r(L$e," \u2014 "),kD=n(L$e,"A",{href:!0});var Put=s(kD);OCo=r(Put,"RobertaModel"),Put.forEach(t),VCo=r(L$e," (RoBERTa model)"),L$e.forEach(t),XCo=i(x),bu=n(x,"LI",{});var y$e=s(bu);Wfe=n(y$e,"STRONG",{});var But=s(Wfe);zCo=r(But,"roformer"),But.forEach(t),WCo=r(y$e," \u2014 "),SD=n(y$e,"A",{href:!0});var Iut=s(SD);QCo=r(Iut,"RoFormerModel"),Iut.forEach(t),HCo=r(y$e," (RoFormer model)"),y$e.forEach(t),UCo=i(x),vu=n(x,"LI",{});var x$e=s(vu);Qfe=n(x$e,"STRONG",{});var Nut=s(Qfe);JCo=r(Nut,"segformer"),Nut.forEach(t),YCo=r(x$e," \u2014 "),RD=n(x$e,"A",{href:!0});var qut=s(RD);KCo=r(qut,"SegformerModel"),qut.forEach(t),ZCo=r(x$e," (SegFormer model)"),x$e.forEach(t),e5o=i(x),Fu=n(x,"LI",{});var $$e=s(Fu);Hfe=n($$e,"STRONG",{});var jut=s(Hfe);o5o=r(jut,"sew"),jut.forEach(t),r5o=r($$e," \u2014 "),PD=n($$e,"A",{href:!0});var Dut=s(PD);t5o=r(Dut,"SEWModel"),Dut.forEach(t),a5o=r($$e," (SEW model)"),$$e.forEach(t),n5o=i(x),Tu=n(x,"LI",{});var k$e=s(Tu);Ufe=n(k$e,"STRONG",{});var Gut=s(Ufe);s5o=r(Gut,"sew-d"),Gut.forEach(t),l5o=r(k$e," \u2014 "),BD=n(k$e,"A",{href:!0});var Out=s(BD);i5o=r(Out,"SEWDModel"),Out.forEach(t),d5o=r(k$e," (SEW-D model)"),k$e.forEach(t),c5o=i(x),Mu=n(x,"LI",{});var S$e=s(Mu);Jfe=n(S$e,"STRONG",{});var Vut=s(Jfe);f5o=r(Vut,"speech_to_text"),Vut.forEach(t),m5o=r(S$e," \u2014 "),ID=n(S$e,"A",{href:!0});var Xut=s(ID);g5o=r(Xut,"Speech2TextModel"),Xut.forEach(t),h5o=r(S$e," (Speech2Text model)"),S$e.forEach(t),p5o=i(x),Eu=n(x,"LI",{});var R$e=s(Eu);Yfe=n(R$e,"STRONG",{});var zut=s(Yfe);_5o=r(zut,"splinter"),zut.forEach(t),u5o=r(R$e," \u2014 "),ND=n(R$e,"A",{href:!0});var Wut=s(ND);b5o=r(Wut,"SplinterModel"),Wut.forEach(t),v5o=r(R$e," (Splinter model)"),R$e.forEach(t),F5o=i(x),Cu=n(x,"LI",{});var P$e=s(Cu);Kfe=n(P$e,"STRONG",{});var Qut=s(Kfe);T5o=r(Qut,"squeezebert"),Qut.forEach(t),M5o=r(P$e," \u2014 "),qD=n(P$e,"A",{href:!0});var Hut=s(qD);E5o=r(Hut,"SqueezeBertModel"),Hut.forEach(t),C5o=r(P$e," (SqueezeBERT model)"),P$e.forEach(t),w5o=i(x),wu=n(x,"LI",{});var B$e=s(wu);Zfe=n(B$e,"STRONG",{});var Uut=s(Zfe);A5o=r(Uut,"swin"),Uut.forEach(t),L5o=r(B$e," \u2014 "),jD=n(B$e,"A",{href:!0});var Jut=s(jD);y5o=r(Jut,"SwinModel"),Jut.forEach(t),x5o=r(B$e," (Swin Transformer model)"),B$e.forEach(t),$5o=i(x),Au=n(x,"LI",{});var I$e=s(Au);eme=n(I$e,"STRONG",{});var Yut=s(eme);k5o=r(Yut,"t5"),Yut.forEach(t),S5o=r(I$e," \u2014 "),DD=n(I$e,"A",{href:!0});var Kut=s(DD);R5o=r(Kut,"T5Model"),Kut.forEach(t),P5o=r(I$e," (T5 model)"),I$e.forEach(t),B5o=i(x),Lu=n(x,"LI",{});var N$e=s(Lu);ome=n(N$e,"STRONG",{});var Zut=s(ome);I5o=r(Zut,"tapas"),Zut.forEach(t),N5o=r(N$e," \u2014 "),GD=n(N$e,"A",{href:!0});var e1t=s(GD);q5o=r(e1t,"TapasModel"),e1t.forEach(t),j5o=r(N$e," (TAPAS model)"),N$e.forEach(t),D5o=i(x),yu=n(x,"LI",{});var q$e=s(yu);rme=n(q$e,"STRONG",{});var o1t=s(rme);G5o=r(o1t,"trajectory_transformer"),o1t.forEach(t),O5o=r(q$e," \u2014 "),OD=n(q$e,"A",{href:!0});var r1t=s(OD);V5o=r(r1t,"TrajectoryTransformerModel"),r1t.forEach(t),X5o=r(q$e," (Trajectory Transformer model)"),q$e.forEach(t),z5o=i(x),xu=n(x,"LI",{});var j$e=s(xu);tme=n(j$e,"STRONG",{});var t1t=s(tme);W5o=r(t1t,"transfo-xl"),t1t.forEach(t),Q5o=r(j$e," \u2014 "),VD=n(j$e,"A",{href:!0});var a1t=s(VD);H5o=r(a1t,"TransfoXLModel"),a1t.forEach(t),U5o=r(j$e," (Transformer-XL model)"),j$e.forEach(t),J5o=i(x),$u=n(x,"LI",{});var D$e=s($u);ame=n(D$e,"STRONG",{});var n1t=s(ame);Y5o=r(n1t,"unispeech"),n1t.forEach(t),K5o=r(D$e," \u2014 "),XD=n(D$e,"A",{href:!0});var s1t=s(XD);Z5o=r(s1t,"UniSpeechModel"),s1t.forEach(t),e0o=r(D$e," (UniSpeech model)"),D$e.forEach(t),o0o=i(x),ku=n(x,"LI",{});var G$e=s(ku);nme=n(G$e,"STRONG",{});var l1t=s(nme);r0o=r(l1t,"unispeech-sat"),l1t.forEach(t),t0o=r(G$e," \u2014 "),zD=n(G$e,"A",{href:!0});var i1t=s(zD);a0o=r(i1t,"UniSpeechSatModel"),i1t.forEach(t),n0o=r(G$e," (UniSpeechSat model)"),G$e.forEach(t),s0o=i(x),Su=n(x,"LI",{});var O$e=s(Su);sme=n(O$e,"STRONG",{});var d1t=s(sme);l0o=r(d1t,"van"),d1t.forEach(t),i0o=r(O$e," \u2014 "),WD=n(O$e,"A",{href:!0});var c1t=s(WD);d0o=r(c1t,"VanModel"),c1t.forEach(t),c0o=r(O$e," (VAN model)"),O$e.forEach(t),f0o=i(x),Ru=n(x,"LI",{});var V$e=s(Ru);lme=n(V$e,"STRONG",{});var f1t=s(lme);m0o=r(f1t,"vilt"),f1t.forEach(t),g0o=r(V$e," \u2014 "),QD=n(V$e,"A",{href:!0});var m1t=s(QD);h0o=r(m1t,"ViltModel"),m1t.forEach(t),p0o=r(V$e," (ViLT model)"),V$e.forEach(t),_0o=i(x),Pu=n(x,"LI",{});var X$e=s(Pu);ime=n(X$e,"STRONG",{});var g1t=s(ime);u0o=r(g1t,"vision-text-dual-encoder"),g1t.forEach(t),b0o=r(X$e," \u2014 "),HD=n(X$e,"A",{href:!0});var h1t=s(HD);v0o=r(h1t,"VisionTextDualEncoderModel"),h1t.forEach(t),F0o=r(X$e," (VisionTextDualEncoder model)"),X$e.forEach(t),T0o=i(x),Bu=n(x,"LI",{});var z$e=s(Bu);dme=n(z$e,"STRONG",{});var p1t=s(dme);M0o=r(p1t,"visual_bert"),p1t.forEach(t),E0o=r(z$e," \u2014 "),UD=n(z$e,"A",{href:!0});var _1t=s(UD);C0o=r(_1t,"VisualBertModel"),_1t.forEach(t),w0o=r(z$e," (VisualBERT model)"),z$e.forEach(t),A0o=i(x),Iu=n(x,"LI",{});var W$e=s(Iu);cme=n(W$e,"STRONG",{});var u1t=s(cme);L0o=r(u1t,"vit"),u1t.forEach(t),y0o=r(W$e," \u2014 "),JD=n(W$e,"A",{href:!0});var b1t=s(JD);x0o=r(b1t,"ViTModel"),b1t.forEach(t),$0o=r(W$e," (ViT model)"),W$e.forEach(t),k0o=i(x),Nu=n(x,"LI",{});var Q$e=s(Nu);fme=n(Q$e,"STRONG",{});var v1t=s(fme);S0o=r(v1t,"vit_mae"),v1t.forEach(t),R0o=r(Q$e," \u2014 "),YD=n(Q$e,"A",{href:!0});var F1t=s(YD);P0o=r(F1t,"ViTMAEModel"),F1t.forEach(t),B0o=r(Q$e," (ViTMAE model)"),Q$e.forEach(t),I0o=i(x),qu=n(x,"LI",{});var H$e=s(qu);mme=n(H$e,"STRONG",{});var T1t=s(mme);N0o=r(T1t,"wav2vec2"),T1t.forEach(t),q0o=r(H$e," \u2014 "),KD=n(H$e,"A",{href:!0});var M1t=s(KD);j0o=r(M1t,"Wav2Vec2Model"),M1t.forEach(t),D0o=r(H$e," (Wav2Vec2 model)"),H$e.forEach(t),G0o=i(x),ju=n(x,"LI",{});var U$e=s(ju);gme=n(U$e,"STRONG",{});var E1t=s(gme);O0o=r(E1t,"wav2vec2-conformer"),E1t.forEach(t),V0o=r(U$e," \u2014 "),ZD=n(U$e,"A",{href:!0});var C1t=s(ZD);X0o=r(C1t,"Wav2Vec2ConformerModel"),C1t.forEach(t),z0o=r(U$e," (Wav2Vec2-Conformer model)"),U$e.forEach(t),W0o=i(x),Du=n(x,"LI",{});var J$e=s(Du);hme=n(J$e,"STRONG",{});var w1t=s(hme);Q0o=r(w1t,"wavlm"),w1t.forEach(t),H0o=r(J$e," \u2014 "),eG=n(J$e,"A",{href:!0});var A1t=s(eG);U0o=r(A1t,"WavLMModel"),A1t.forEach(t),J0o=r(J$e," (WavLM model)"),J$e.forEach(t),Y0o=i(x),Gu=n(x,"LI",{});var Y$e=s(Gu);pme=n(Y$e,"STRONG",{});var L1t=s(pme);K0o=r(L1t,"xglm"),L1t.forEach(t),Z0o=r(Y$e," \u2014 "),oG=n(Y$e,"A",{href:!0});var y1t=s(oG);ewo=r(y1t,"XGLMModel"),y1t.forEach(t),owo=r(Y$e," (XGLM model)"),Y$e.forEach(t),rwo=i(x),Ou=n(x,"LI",{});var K$e=s(Ou);_me=n(K$e,"STRONG",{});var x1t=s(_me);two=r(x1t,"xlm"),x1t.forEach(t),awo=r(K$e," \u2014 "),rG=n(K$e,"A",{href:!0});var $1t=s(rG);nwo=r($1t,"XLMModel"),$1t.forEach(t),swo=r(K$e," (XLM model)"),K$e.forEach(t),lwo=i(x),Vu=n(x,"LI",{});var Z$e=s(Vu);ume=n(Z$e,"STRONG",{});var k1t=s(ume);iwo=r(k1t,"xlm-prophetnet"),k1t.forEach(t),dwo=r(Z$e," \u2014 "),tG=n(Z$e,"A",{href:!0});var S1t=s(tG);cwo=r(S1t,"XLMProphetNetModel"),S1t.forEach(t),fwo=r(Z$e," (XLM-ProphetNet model)"),Z$e.forEach(t),mwo=i(x),Xu=n(x,"LI",{});var eke=s(Xu);bme=n(eke,"STRONG",{});var R1t=s(bme);gwo=r(R1t,"xlm-roberta"),R1t.forEach(t),hwo=r(eke," \u2014 "),aG=n(eke,"A",{href:!0});var P1t=s(aG);pwo=r(P1t,"XLMRobertaModel"),P1t.forEach(t),_wo=r(eke," (XLM-RoBERTa model)"),eke.forEach(t),uwo=i(x),zu=n(x,"LI",{});var oke=s(zu);vme=n(oke,"STRONG",{});var B1t=s(vme);bwo=r(B1t,"xlm-roberta-xl"),B1t.forEach(t),vwo=r(oke," \u2014 "),nG=n(oke,"A",{href:!0});var I1t=s(nG);Fwo=r(I1t,"XLMRobertaXLModel"),I1t.forEach(t),Two=r(oke," (XLM-RoBERTa-XL model)"),oke.forEach(t),Mwo=i(x),Wu=n(x,"LI",{});var rke=s(Wu);Fme=n(rke,"STRONG",{});var N1t=s(Fme);Ewo=r(N1t,"xlnet"),N1t.forEach(t),Cwo=r(rke," \u2014 "),sG=n(rke,"A",{href:!0});var q1t=s(sG);wwo=r(q1t,"XLNetModel"),q1t.forEach(t),Awo=r(rke," (XLNet model)"),rke.forEach(t),Lwo=i(x),Qu=n(x,"LI",{});var tke=s(Qu);Tme=n(tke,"STRONG",{});var j1t=s(Tme);ywo=r(j1t,"yolos"),j1t.forEach(t),xwo=r(tke," \u2014 "),lG=n(tke,"A",{href:!0});var D1t=s(lG);$wo=r(D1t,"YolosModel"),D1t.forEach(t),kwo=r(tke," (YOLOS model)"),tke.forEach(t),Swo=i(x),Hu=n(x,"LI",{});var ake=s(Hu);Mme=n(ake,"STRONG",{});var G1t=s(Mme);Rwo=r(G1t,"yoso"),G1t.forEach(t),Pwo=r(ake," \u2014 "),iG=n(ake,"A",{href:!0});var O1t=s(iG);Bwo=r(O1t,"YosoModel"),O1t.forEach(t),Iwo=r(ake," (YOSO model)"),ake.forEach(t),x.forEach(t),Nwo=i(sa),Uu=n(sa,"P",{});var nke=s(Uu);qwo=r(nke,"The model is set in evaluation mode by default using "),Eme=n(nke,"CODE",{});var V1t=s(Eme);jwo=r(V1t,"model.eval()"),V1t.forEach(t),Dwo=r(nke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cme=n(nke,"CODE",{});var X1t=s(Cme);Gwo=r(X1t,"model.train()"),X1t.forEach(t),nke.forEach(t),Owo=i(sa),T(Ju.$$.fragment,sa),sa.forEach(t),rl.forEach(t),CXe=i(f),Xi=n(f,"H2",{class:!0});var $We=s(Xi);Yu=n($We,"A",{id:!0,class:!0,href:!0});var z1t=s(Yu);wme=n(z1t,"SPAN",{});var W1t=s(wme);T(q6.$$.fragment,W1t),W1t.forEach(t),z1t.forEach(t),Vwo=i($We),Ame=n($We,"SPAN",{});var Q1t=s(Ame);Xwo=r(Q1t,"AutoModelForPreTraining"),Q1t.forEach(t),$We.forEach(t),wXe=i(f),$o=n(f,"DIV",{class:!0});var tl=s($o);T(j6.$$.fragment,tl),zwo=i(tl),zi=n(tl,"P",{});var jre=s(zi);Wwo=r(jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),dG=n(jre,"A",{href:!0});var H1t=s(dG);Qwo=r(H1t,"from_pretrained()"),H1t.forEach(t),Hwo=r(jre," class method or the "),cG=n(jre,"A",{href:!0});var U1t=s(cG);Uwo=r(U1t,"from_config()"),U1t.forEach(t),Jwo=r(jre,` class
method.`),jre.forEach(t),Ywo=i(tl),D6=n(tl,"P",{});var kWe=s(D6);Kwo=r(kWe,"This class cannot be instantiated directly using "),Lme=n(kWe,"CODE",{});var J1t=s(Lme);Zwo=r(J1t,"__init__()"),J1t.forEach(t),eAo=r(kWe," (throws an error)."),kWe.forEach(t),oAo=i(tl),it=n(tl,"DIV",{class:!0});var gw=s(it);T(G6.$$.fragment,gw),rAo=i(gw),yme=n(gw,"P",{});var Y1t=s(yme);tAo=r(Y1t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Y1t.forEach(t),aAo=i(gw),Wi=n(gw,"P",{});var Dre=s(Wi);nAo=r(Dre,`Note:
Loading a model from its configuration file does `),xme=n(Dre,"STRONG",{});var K1t=s(xme);sAo=r(K1t,"not"),K1t.forEach(t),lAo=r(Dre,` load the model weights. It only affects the
model\u2019s configuration. Use `),fG=n(Dre,"A",{href:!0});var Z1t=s(fG);iAo=r(Z1t,"from_pretrained()"),Z1t.forEach(t),dAo=r(Dre," to load the model weights."),Dre.forEach(t),cAo=i(gw),T(Ku.$$.fragment,gw),gw.forEach(t),fAo=i(tl),Ye=n(tl,"DIV",{class:!0});var la=s(Ye);T(O6.$$.fragment,la),mAo=i(la),$me=n(la,"P",{});var e2t=s($me);gAo=r(e2t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),e2t.forEach(t),hAo=i(la),Na=n(la,"P",{});var hw=s(Na);pAo=r(hw,"The model class to instantiate is selected based on the "),kme=n(hw,"CODE",{});var o2t=s(kme);_Ao=r(o2t,"model_type"),o2t.forEach(t),uAo=r(hw,` property of the config object (either
passed as an argument or loaded from `),Sme=n(hw,"CODE",{});var r2t=s(Sme);bAo=r(r2t,"pretrained_model_name_or_path"),r2t.forEach(t),vAo=r(hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rme=n(hw,"CODE",{});var t2t=s(Rme);FAo=r(t2t,"pretrained_model_name_or_path"),t2t.forEach(t),TAo=r(hw,":"),hw.forEach(t),MAo=i(la),G=n(la,"UL",{});var O=s(G);Zu=n(O,"LI",{});var ske=s(Zu);Pme=n(ske,"STRONG",{});var a2t=s(Pme);EAo=r(a2t,"albert"),a2t.forEach(t),CAo=r(ske," \u2014 "),mG=n(ske,"A",{href:!0});var n2t=s(mG);wAo=r(n2t,"AlbertForPreTraining"),n2t.forEach(t),AAo=r(ske," (ALBERT model)"),ske.forEach(t),LAo=i(O),e1=n(O,"LI",{});var lke=s(e1);Bme=n(lke,"STRONG",{});var s2t=s(Bme);yAo=r(s2t,"bart"),s2t.forEach(t),xAo=r(lke," \u2014 "),gG=n(lke,"A",{href:!0});var l2t=s(gG);$Ao=r(l2t,"BartForConditionalGeneration"),l2t.forEach(t),kAo=r(lke," (BART model)"),lke.forEach(t),SAo=i(O),o1=n(O,"LI",{});var ike=s(o1);Ime=n(ike,"STRONG",{});var i2t=s(Ime);RAo=r(i2t,"bert"),i2t.forEach(t),PAo=r(ike," \u2014 "),hG=n(ike,"A",{href:!0});var d2t=s(hG);BAo=r(d2t,"BertForPreTraining"),d2t.forEach(t),IAo=r(ike," (BERT model)"),ike.forEach(t),NAo=i(O),r1=n(O,"LI",{});var dke=s(r1);Nme=n(dke,"STRONG",{});var c2t=s(Nme);qAo=r(c2t,"big_bird"),c2t.forEach(t),jAo=r(dke," \u2014 "),pG=n(dke,"A",{href:!0});var f2t=s(pG);DAo=r(f2t,"BigBirdForPreTraining"),f2t.forEach(t),GAo=r(dke," (BigBird model)"),dke.forEach(t),OAo=i(O),t1=n(O,"LI",{});var cke=s(t1);qme=n(cke,"STRONG",{});var m2t=s(qme);VAo=r(m2t,"bloom"),m2t.forEach(t),XAo=r(cke," \u2014 "),_G=n(cke,"A",{href:!0});var g2t=s(_G);zAo=r(g2t,"BloomForCausalLM"),g2t.forEach(t),WAo=r(cke," (BLOOM model)"),cke.forEach(t),QAo=i(O),a1=n(O,"LI",{});var fke=s(a1);jme=n(fke,"STRONG",{});var h2t=s(jme);HAo=r(h2t,"camembert"),h2t.forEach(t),UAo=r(fke," \u2014 "),uG=n(fke,"A",{href:!0});var p2t=s(uG);JAo=r(p2t,"CamembertForMaskedLM"),p2t.forEach(t),YAo=r(fke," (CamemBERT model)"),fke.forEach(t),KAo=i(O),n1=n(O,"LI",{});var mke=s(n1);Dme=n(mke,"STRONG",{});var _2t=s(Dme);ZAo=r(_2t,"ctrl"),_2t.forEach(t),e6o=r(mke," \u2014 "),bG=n(mke,"A",{href:!0});var u2t=s(bG);o6o=r(u2t,"CTRLLMHeadModel"),u2t.forEach(t),r6o=r(mke," (CTRL model)"),mke.forEach(t),t6o=i(O),s1=n(O,"LI",{});var gke=s(s1);Gme=n(gke,"STRONG",{});var b2t=s(Gme);a6o=r(b2t,"data2vec-text"),b2t.forEach(t),n6o=r(gke," \u2014 "),vG=n(gke,"A",{href:!0});var v2t=s(vG);s6o=r(v2t,"Data2VecTextForMaskedLM"),v2t.forEach(t),l6o=r(gke," (Data2VecText model)"),gke.forEach(t),i6o=i(O),l1=n(O,"LI",{});var hke=s(l1);Ome=n(hke,"STRONG",{});var F2t=s(Ome);d6o=r(F2t,"deberta"),F2t.forEach(t),c6o=r(hke," \u2014 "),FG=n(hke,"A",{href:!0});var T2t=s(FG);f6o=r(T2t,"DebertaForMaskedLM"),T2t.forEach(t),m6o=r(hke," (DeBERTa model)"),hke.forEach(t),g6o=i(O),i1=n(O,"LI",{});var pke=s(i1);Vme=n(pke,"STRONG",{});var M2t=s(Vme);h6o=r(M2t,"deberta-v2"),M2t.forEach(t),p6o=r(pke," \u2014 "),TG=n(pke,"A",{href:!0});var E2t=s(TG);_6o=r(E2t,"DebertaV2ForMaskedLM"),E2t.forEach(t),u6o=r(pke," (DeBERTa-v2 model)"),pke.forEach(t),b6o=i(O),d1=n(O,"LI",{});var _ke=s(d1);Xme=n(_ke,"STRONG",{});var C2t=s(Xme);v6o=r(C2t,"distilbert"),C2t.forEach(t),F6o=r(_ke," \u2014 "),MG=n(_ke,"A",{href:!0});var w2t=s(MG);T6o=r(w2t,"DistilBertForMaskedLM"),w2t.forEach(t),M6o=r(_ke," (DistilBERT model)"),_ke.forEach(t),E6o=i(O),c1=n(O,"LI",{});var uke=s(c1);zme=n(uke,"STRONG",{});var A2t=s(zme);C6o=r(A2t,"electra"),A2t.forEach(t),w6o=r(uke," \u2014 "),EG=n(uke,"A",{href:!0});var L2t=s(EG);A6o=r(L2t,"ElectraForPreTraining"),L2t.forEach(t),L6o=r(uke," (ELECTRA model)"),uke.forEach(t),y6o=i(O),f1=n(O,"LI",{});var bke=s(f1);Wme=n(bke,"STRONG",{});var y2t=s(Wme);x6o=r(y2t,"flaubert"),y2t.forEach(t),$6o=r(bke," \u2014 "),CG=n(bke,"A",{href:!0});var x2t=s(CG);k6o=r(x2t,"FlaubertWithLMHeadModel"),x2t.forEach(t),S6o=r(bke," (FlauBERT model)"),bke.forEach(t),R6o=i(O),m1=n(O,"LI",{});var vke=s(m1);Qme=n(vke,"STRONG",{});var $2t=s(Qme);P6o=r($2t,"flava"),$2t.forEach(t),B6o=r(vke," \u2014 "),wG=n(vke,"A",{href:!0});var k2t=s(wG);I6o=r(k2t,"FlavaForPreTraining"),k2t.forEach(t),N6o=r(vke," (FLAVA model)"),vke.forEach(t),q6o=i(O),g1=n(O,"LI",{});var Fke=s(g1);Hme=n(Fke,"STRONG",{});var S2t=s(Hme);j6o=r(S2t,"fnet"),S2t.forEach(t),D6o=r(Fke," \u2014 "),AG=n(Fke,"A",{href:!0});var R2t=s(AG);G6o=r(R2t,"FNetForPreTraining"),R2t.forEach(t),O6o=r(Fke," (FNet model)"),Fke.forEach(t),V6o=i(O),h1=n(O,"LI",{});var Tke=s(h1);Ume=n(Tke,"STRONG",{});var P2t=s(Ume);X6o=r(P2t,"fsmt"),P2t.forEach(t),z6o=r(Tke," \u2014 "),LG=n(Tke,"A",{href:!0});var B2t=s(LG);W6o=r(B2t,"FSMTForConditionalGeneration"),B2t.forEach(t),Q6o=r(Tke," (FairSeq Machine-Translation model)"),Tke.forEach(t),H6o=i(O),p1=n(O,"LI",{});var Mke=s(p1);Jme=n(Mke,"STRONG",{});var I2t=s(Jme);U6o=r(I2t,"funnel"),I2t.forEach(t),J6o=r(Mke," \u2014 "),yG=n(Mke,"A",{href:!0});var N2t=s(yG);Y6o=r(N2t,"FunnelForPreTraining"),N2t.forEach(t),K6o=r(Mke," (Funnel Transformer model)"),Mke.forEach(t),Z6o=i(O),_1=n(O,"LI",{});var Eke=s(_1);Yme=n(Eke,"STRONG",{});var q2t=s(Yme);eLo=r(q2t,"gpt2"),q2t.forEach(t),oLo=r(Eke," \u2014 "),xG=n(Eke,"A",{href:!0});var j2t=s(xG);rLo=r(j2t,"GPT2LMHeadModel"),j2t.forEach(t),tLo=r(Eke," (OpenAI GPT-2 model)"),Eke.forEach(t),aLo=i(O),u1=n(O,"LI",{});var Cke=s(u1);Kme=n(Cke,"STRONG",{});var D2t=s(Kme);nLo=r(D2t,"ibert"),D2t.forEach(t),sLo=r(Cke," \u2014 "),$G=n(Cke,"A",{href:!0});var G2t=s($G);lLo=r(G2t,"IBertForMaskedLM"),G2t.forEach(t),iLo=r(Cke," (I-BERT model)"),Cke.forEach(t),dLo=i(O),b1=n(O,"LI",{});var wke=s(b1);Zme=n(wke,"STRONG",{});var O2t=s(Zme);cLo=r(O2t,"layoutlm"),O2t.forEach(t),fLo=r(wke," \u2014 "),kG=n(wke,"A",{href:!0});var V2t=s(kG);mLo=r(V2t,"LayoutLMForMaskedLM"),V2t.forEach(t),gLo=r(wke," (LayoutLM model)"),wke.forEach(t),hLo=i(O),v1=n(O,"LI",{});var Ake=s(v1);ege=n(Ake,"STRONG",{});var X2t=s(ege);pLo=r(X2t,"longformer"),X2t.forEach(t),_Lo=r(Ake," \u2014 "),SG=n(Ake,"A",{href:!0});var z2t=s(SG);uLo=r(z2t,"LongformerForMaskedLM"),z2t.forEach(t),bLo=r(Ake," (Longformer model)"),Ake.forEach(t),vLo=i(O),F1=n(O,"LI",{});var Lke=s(F1);oge=n(Lke,"STRONG",{});var W2t=s(oge);FLo=r(W2t,"lxmert"),W2t.forEach(t),TLo=r(Lke," \u2014 "),RG=n(Lke,"A",{href:!0});var Q2t=s(RG);MLo=r(Q2t,"LxmertForPreTraining"),Q2t.forEach(t),ELo=r(Lke," (LXMERT model)"),Lke.forEach(t),CLo=i(O),T1=n(O,"LI",{});var yke=s(T1);rge=n(yke,"STRONG",{});var H2t=s(rge);wLo=r(H2t,"megatron-bert"),H2t.forEach(t),ALo=r(yke," \u2014 "),PG=n(yke,"A",{href:!0});var U2t=s(PG);LLo=r(U2t,"MegatronBertForPreTraining"),U2t.forEach(t),yLo=r(yke," (Megatron-BERT model)"),yke.forEach(t),xLo=i(O),M1=n(O,"LI",{});var xke=s(M1);tge=n(xke,"STRONG",{});var J2t=s(tge);$Lo=r(J2t,"mobilebert"),J2t.forEach(t),kLo=r(xke," \u2014 "),BG=n(xke,"A",{href:!0});var Y2t=s(BG);SLo=r(Y2t,"MobileBertForPreTraining"),Y2t.forEach(t),RLo=r(xke," (MobileBERT model)"),xke.forEach(t),PLo=i(O),E1=n(O,"LI",{});var $ke=s(E1);age=n($ke,"STRONG",{});var K2t=s(age);BLo=r(K2t,"mpnet"),K2t.forEach(t),ILo=r($ke," \u2014 "),IG=n($ke,"A",{href:!0});var Z2t=s(IG);NLo=r(Z2t,"MPNetForMaskedLM"),Z2t.forEach(t),qLo=r($ke," (MPNet model)"),$ke.forEach(t),jLo=i(O),C1=n(O,"LI",{});var kke=s(C1);nge=n(kke,"STRONG",{});var ebt=s(nge);DLo=r(ebt,"mvp"),ebt.forEach(t),GLo=r(kke," \u2014 "),NG=n(kke,"A",{href:!0});var obt=s(NG);OLo=r(obt,"MvpForConditionalGeneration"),obt.forEach(t),VLo=r(kke," (MVP model)"),kke.forEach(t),XLo=i(O),w1=n(O,"LI",{});var Ske=s(w1);sge=n(Ske,"STRONG",{});var rbt=s(sge);zLo=r(rbt,"nezha"),rbt.forEach(t),WLo=r(Ske," \u2014 "),qG=n(Ske,"A",{href:!0});var tbt=s(qG);QLo=r(tbt,"NezhaForPreTraining"),tbt.forEach(t),HLo=r(Ske," (Nezha model)"),Ske.forEach(t),ULo=i(O),A1=n(O,"LI",{});var Rke=s(A1);lge=n(Rke,"STRONG",{});var abt=s(lge);JLo=r(abt,"openai-gpt"),abt.forEach(t),YLo=r(Rke," \u2014 "),jG=n(Rke,"A",{href:!0});var nbt=s(jG);KLo=r(nbt,"OpenAIGPTLMHeadModel"),nbt.forEach(t),ZLo=r(Rke," (OpenAI GPT model)"),Rke.forEach(t),eyo=i(O),L1=n(O,"LI",{});var Pke=s(L1);ige=n(Pke,"STRONG",{});var sbt=s(ige);oyo=r(sbt,"retribert"),sbt.forEach(t),ryo=r(Pke," \u2014 "),DG=n(Pke,"A",{href:!0});var lbt=s(DG);tyo=r(lbt,"RetriBertModel"),lbt.forEach(t),ayo=r(Pke," (RetriBERT model)"),Pke.forEach(t),nyo=i(O),y1=n(O,"LI",{});var Bke=s(y1);dge=n(Bke,"STRONG",{});var ibt=s(dge);syo=r(ibt,"roberta"),ibt.forEach(t),lyo=r(Bke," \u2014 "),GG=n(Bke,"A",{href:!0});var dbt=s(GG);iyo=r(dbt,"RobertaForMaskedLM"),dbt.forEach(t),dyo=r(Bke," (RoBERTa model)"),Bke.forEach(t),cyo=i(O),x1=n(O,"LI",{});var Ike=s(x1);cge=n(Ike,"STRONG",{});var cbt=s(cge);fyo=r(cbt,"splinter"),cbt.forEach(t),myo=r(Ike," \u2014 "),OG=n(Ike,"A",{href:!0});var fbt=s(OG);gyo=r(fbt,"SplinterForPreTraining"),fbt.forEach(t),hyo=r(Ike," (Splinter model)"),Ike.forEach(t),pyo=i(O),$1=n(O,"LI",{});var Nke=s($1);fge=n(Nke,"STRONG",{});var mbt=s(fge);_yo=r(mbt,"squeezebert"),mbt.forEach(t),uyo=r(Nke," \u2014 "),VG=n(Nke,"A",{href:!0});var gbt=s(VG);byo=r(gbt,"SqueezeBertForMaskedLM"),gbt.forEach(t),vyo=r(Nke," (SqueezeBERT model)"),Nke.forEach(t),Fyo=i(O),k1=n(O,"LI",{});var qke=s(k1);mge=n(qke,"STRONG",{});var hbt=s(mge);Tyo=r(hbt,"t5"),hbt.forEach(t),Myo=r(qke," \u2014 "),XG=n(qke,"A",{href:!0});var pbt=s(XG);Eyo=r(pbt,"T5ForConditionalGeneration"),pbt.forEach(t),Cyo=r(qke," (T5 model)"),qke.forEach(t),wyo=i(O),S1=n(O,"LI",{});var jke=s(S1);gge=n(jke,"STRONG",{});var _bt=s(gge);Ayo=r(_bt,"tapas"),_bt.forEach(t),Lyo=r(jke," \u2014 "),zG=n(jke,"A",{href:!0});var ubt=s(zG);yyo=r(ubt,"TapasForMaskedLM"),ubt.forEach(t),xyo=r(jke," (TAPAS model)"),jke.forEach(t),$yo=i(O),R1=n(O,"LI",{});var Dke=s(R1);hge=n(Dke,"STRONG",{});var bbt=s(hge);kyo=r(bbt,"transfo-xl"),bbt.forEach(t),Syo=r(Dke," \u2014 "),WG=n(Dke,"A",{href:!0});var vbt=s(WG);Ryo=r(vbt,"TransfoXLLMHeadModel"),vbt.forEach(t),Pyo=r(Dke," (Transformer-XL model)"),Dke.forEach(t),Byo=i(O),P1=n(O,"LI",{});var Gke=s(P1);pge=n(Gke,"STRONG",{});var Fbt=s(pge);Iyo=r(Fbt,"unispeech"),Fbt.forEach(t),Nyo=r(Gke," \u2014 "),QG=n(Gke,"A",{href:!0});var Tbt=s(QG);qyo=r(Tbt,"UniSpeechForPreTraining"),Tbt.forEach(t),jyo=r(Gke," (UniSpeech model)"),Gke.forEach(t),Dyo=i(O),B1=n(O,"LI",{});var Oke=s(B1);_ge=n(Oke,"STRONG",{});var Mbt=s(_ge);Gyo=r(Mbt,"unispeech-sat"),Mbt.forEach(t),Oyo=r(Oke," \u2014 "),HG=n(Oke,"A",{href:!0});var Ebt=s(HG);Vyo=r(Ebt,"UniSpeechSatForPreTraining"),Ebt.forEach(t),Xyo=r(Oke," (UniSpeechSat model)"),Oke.forEach(t),zyo=i(O),I1=n(O,"LI",{});var Vke=s(I1);uge=n(Vke,"STRONG",{});var Cbt=s(uge);Wyo=r(Cbt,"visual_bert"),Cbt.forEach(t),Qyo=r(Vke," \u2014 "),UG=n(Vke,"A",{href:!0});var wbt=s(UG);Hyo=r(wbt,"VisualBertForPreTraining"),wbt.forEach(t),Uyo=r(Vke," (VisualBERT model)"),Vke.forEach(t),Jyo=i(O),N1=n(O,"LI",{});var Xke=s(N1);bge=n(Xke,"STRONG",{});var Abt=s(bge);Yyo=r(Abt,"vit_mae"),Abt.forEach(t),Kyo=r(Xke," \u2014 "),JG=n(Xke,"A",{href:!0});var Lbt=s(JG);Zyo=r(Lbt,"ViTMAEForPreTraining"),Lbt.forEach(t),exo=r(Xke," (ViTMAE model)"),Xke.forEach(t),oxo=i(O),q1=n(O,"LI",{});var zke=s(q1);vge=n(zke,"STRONG",{});var ybt=s(vge);rxo=r(ybt,"wav2vec2"),ybt.forEach(t),txo=r(zke," \u2014 "),YG=n(zke,"A",{href:!0});var xbt=s(YG);axo=r(xbt,"Wav2Vec2ForPreTraining"),xbt.forEach(t),nxo=r(zke," (Wav2Vec2 model)"),zke.forEach(t),sxo=i(O),j1=n(O,"LI",{});var Wke=s(j1);Fge=n(Wke,"STRONG",{});var $bt=s(Fge);lxo=r($bt,"wav2vec2-conformer"),$bt.forEach(t),ixo=r(Wke," \u2014 "),KG=n(Wke,"A",{href:!0});var kbt=s(KG);dxo=r(kbt,"Wav2Vec2ConformerForPreTraining"),kbt.forEach(t),cxo=r(Wke," (Wav2Vec2-Conformer model)"),Wke.forEach(t),fxo=i(O),D1=n(O,"LI",{});var Qke=s(D1);Tge=n(Qke,"STRONG",{});var Sbt=s(Tge);mxo=r(Sbt,"xlm"),Sbt.forEach(t),gxo=r(Qke," \u2014 "),ZG=n(Qke,"A",{href:!0});var Rbt=s(ZG);hxo=r(Rbt,"XLMWithLMHeadModel"),Rbt.forEach(t),pxo=r(Qke," (XLM model)"),Qke.forEach(t),_xo=i(O),G1=n(O,"LI",{});var Hke=s(G1);Mge=n(Hke,"STRONG",{});var Pbt=s(Mge);uxo=r(Pbt,"xlm-roberta"),Pbt.forEach(t),bxo=r(Hke," \u2014 "),eO=n(Hke,"A",{href:!0});var Bbt=s(eO);vxo=r(Bbt,"XLMRobertaForMaskedLM"),Bbt.forEach(t),Fxo=r(Hke," (XLM-RoBERTa model)"),Hke.forEach(t),Txo=i(O),O1=n(O,"LI",{});var Uke=s(O1);Ege=n(Uke,"STRONG",{});var Ibt=s(Ege);Mxo=r(Ibt,"xlm-roberta-xl"),Ibt.forEach(t),Exo=r(Uke," \u2014 "),oO=n(Uke,"A",{href:!0});var Nbt=s(oO);Cxo=r(Nbt,"XLMRobertaXLForMaskedLM"),Nbt.forEach(t),wxo=r(Uke," (XLM-RoBERTa-XL model)"),Uke.forEach(t),Axo=i(O),V1=n(O,"LI",{});var Jke=s(V1);Cge=n(Jke,"STRONG",{});var qbt=s(Cge);Lxo=r(qbt,"xlnet"),qbt.forEach(t),yxo=r(Jke," \u2014 "),rO=n(Jke,"A",{href:!0});var jbt=s(rO);xxo=r(jbt,"XLNetLMHeadModel"),jbt.forEach(t),$xo=r(Jke," (XLNet model)"),Jke.forEach(t),O.forEach(t),kxo=i(la),X1=n(la,"P",{});var Yke=s(X1);Sxo=r(Yke,"The model is set in evaluation mode by default using "),wge=n(Yke,"CODE",{});var Dbt=s(wge);Rxo=r(Dbt,"model.eval()"),Dbt.forEach(t),Pxo=r(Yke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Age=n(Yke,"CODE",{});var Gbt=s(Age);Bxo=r(Gbt,"model.train()"),Gbt.forEach(t),Yke.forEach(t),Ixo=i(la),T(z1.$$.fragment,la),la.forEach(t),tl.forEach(t),AXe=i(f),Qi=n(f,"H2",{class:!0});var SWe=s(Qi);W1=n(SWe,"A",{id:!0,class:!0,href:!0});var Obt=s(W1);Lge=n(Obt,"SPAN",{});var Vbt=s(Lge);T(V6.$$.fragment,Vbt),Vbt.forEach(t),Obt.forEach(t),Nxo=i(SWe),yge=n(SWe,"SPAN",{});var Xbt=s(yge);qxo=r(Xbt,"AutoModelForCausalLM"),Xbt.forEach(t),SWe.forEach(t),LXe=i(f),ko=n(f,"DIV",{class:!0});var al=s(ko);T(X6.$$.fragment,al),jxo=i(al),Hi=n(al,"P",{});var Gre=s(Hi);Dxo=r(Gre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),tO=n(Gre,"A",{href:!0});var zbt=s(tO);Gxo=r(zbt,"from_pretrained()"),zbt.forEach(t),Oxo=r(Gre," class method or the "),aO=n(Gre,"A",{href:!0});var Wbt=s(aO);Vxo=r(Wbt,"from_config()"),Wbt.forEach(t),Xxo=r(Gre,` class
method.`),Gre.forEach(t),zxo=i(al),z6=n(al,"P",{});var RWe=s(z6);Wxo=r(RWe,"This class cannot be instantiated directly using "),xge=n(RWe,"CODE",{});var Qbt=s(xge);Qxo=r(Qbt,"__init__()"),Qbt.forEach(t),Hxo=r(RWe," (throws an error)."),RWe.forEach(t),Uxo=i(al),dt=n(al,"DIV",{class:!0});var pw=s(dt);T(W6.$$.fragment,pw),Jxo=i(pw),$ge=n(pw,"P",{});var Hbt=s($ge);Yxo=r(Hbt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Hbt.forEach(t),Kxo=i(pw),Ui=n(pw,"P",{});var Ore=s(Ui);Zxo=r(Ore,`Note:
Loading a model from its configuration file does `),kge=n(Ore,"STRONG",{});var Ubt=s(kge);e$o=r(Ubt,"not"),Ubt.forEach(t),o$o=r(Ore,` load the model weights. It only affects the
model\u2019s configuration. Use `),nO=n(Ore,"A",{href:!0});var Jbt=s(nO);r$o=r(Jbt,"from_pretrained()"),Jbt.forEach(t),t$o=r(Ore," to load the model weights."),Ore.forEach(t),a$o=i(pw),T(Q1.$$.fragment,pw),pw.forEach(t),n$o=i(al),Ke=n(al,"DIV",{class:!0});var ia=s(Ke);T(Q6.$$.fragment,ia),s$o=i(ia),Sge=n(ia,"P",{});var Ybt=s(Sge);l$o=r(Ybt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Ybt.forEach(t),i$o=i(ia),qa=n(ia,"P",{});var _w=s(qa);d$o=r(_w,"The model class to instantiate is selected based on the "),Rge=n(_w,"CODE",{});var Kbt=s(Rge);c$o=r(Kbt,"model_type"),Kbt.forEach(t),f$o=r(_w,` property of the config object (either
passed as an argument or loaded from `),Pge=n(_w,"CODE",{});var Zbt=s(Pge);m$o=r(Zbt,"pretrained_model_name_or_path"),Zbt.forEach(t),g$o=r(_w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bge=n(_w,"CODE",{});var evt=s(Bge);h$o=r(evt,"pretrained_model_name_or_path"),evt.forEach(t),p$o=r(_w,":"),_w.forEach(t),_$o=i(ia),z=n(ia,"UL",{});var W=s(z);H1=n(W,"LI",{});var Kke=s(H1);Ige=n(Kke,"STRONG",{});var ovt=s(Ige);u$o=r(ovt,"bart"),ovt.forEach(t),b$o=r(Kke," \u2014 "),sO=n(Kke,"A",{href:!0});var rvt=s(sO);v$o=r(rvt,"BartForCausalLM"),rvt.forEach(t),F$o=r(Kke," (BART model)"),Kke.forEach(t),T$o=i(W),U1=n(W,"LI",{});var Zke=s(U1);Nge=n(Zke,"STRONG",{});var tvt=s(Nge);M$o=r(tvt,"bert"),tvt.forEach(t),E$o=r(Zke," \u2014 "),lO=n(Zke,"A",{href:!0});var avt=s(lO);C$o=r(avt,"BertLMHeadModel"),avt.forEach(t),w$o=r(Zke," (BERT model)"),Zke.forEach(t),A$o=i(W),J1=n(W,"LI",{});var eSe=s(J1);qge=n(eSe,"STRONG",{});var nvt=s(qge);L$o=r(nvt,"bert-generation"),nvt.forEach(t),y$o=r(eSe," \u2014 "),iO=n(eSe,"A",{href:!0});var svt=s(iO);x$o=r(svt,"BertGenerationDecoder"),svt.forEach(t),$$o=r(eSe," (Bert Generation model)"),eSe.forEach(t),k$o=i(W),Y1=n(W,"LI",{});var oSe=s(Y1);jge=n(oSe,"STRONG",{});var lvt=s(jge);S$o=r(lvt,"big_bird"),lvt.forEach(t),R$o=r(oSe," \u2014 "),dO=n(oSe,"A",{href:!0});var ivt=s(dO);P$o=r(ivt,"BigBirdForCausalLM"),ivt.forEach(t),B$o=r(oSe," (BigBird model)"),oSe.forEach(t),I$o=i(W),K1=n(W,"LI",{});var rSe=s(K1);Dge=n(rSe,"STRONG",{});var dvt=s(Dge);N$o=r(dvt,"bigbird_pegasus"),dvt.forEach(t),q$o=r(rSe," \u2014 "),cO=n(rSe,"A",{href:!0});var cvt=s(cO);j$o=r(cvt,"BigBirdPegasusForCausalLM"),cvt.forEach(t),D$o=r(rSe," (BigBird-Pegasus model)"),rSe.forEach(t),G$o=i(W),Z1=n(W,"LI",{});var tSe=s(Z1);Gge=n(tSe,"STRONG",{});var fvt=s(Gge);O$o=r(fvt,"blenderbot"),fvt.forEach(t),V$o=r(tSe," \u2014 "),fO=n(tSe,"A",{href:!0});var mvt=s(fO);X$o=r(mvt,"BlenderbotForCausalLM"),mvt.forEach(t),z$o=r(tSe," (Blenderbot model)"),tSe.forEach(t),W$o=i(W),e2=n(W,"LI",{});var aSe=s(e2);Oge=n(aSe,"STRONG",{});var gvt=s(Oge);Q$o=r(gvt,"blenderbot-small"),gvt.forEach(t),H$o=r(aSe," \u2014 "),mO=n(aSe,"A",{href:!0});var hvt=s(mO);U$o=r(hvt,"BlenderbotSmallForCausalLM"),hvt.forEach(t),J$o=r(aSe," (BlenderbotSmall model)"),aSe.forEach(t),Y$o=i(W),o2=n(W,"LI",{});var nSe=s(o2);Vge=n(nSe,"STRONG",{});var pvt=s(Vge);K$o=r(pvt,"bloom"),pvt.forEach(t),Z$o=r(nSe," \u2014 "),gO=n(nSe,"A",{href:!0});var _vt=s(gO);eko=r(_vt,"BloomForCausalLM"),_vt.forEach(t),oko=r(nSe," (BLOOM model)"),nSe.forEach(t),rko=i(W),r2=n(W,"LI",{});var sSe=s(r2);Xge=n(sSe,"STRONG",{});var uvt=s(Xge);tko=r(uvt,"camembert"),uvt.forEach(t),ako=r(sSe," \u2014 "),hO=n(sSe,"A",{href:!0});var bvt=s(hO);nko=r(bvt,"CamembertForCausalLM"),bvt.forEach(t),sko=r(sSe," (CamemBERT model)"),sSe.forEach(t),lko=i(W),t2=n(W,"LI",{});var lSe=s(t2);zge=n(lSe,"STRONG",{});var vvt=s(zge);iko=r(vvt,"codegen"),vvt.forEach(t),dko=r(lSe," \u2014 "),pO=n(lSe,"A",{href:!0});var Fvt=s(pO);cko=r(Fvt,"CodeGenForCausalLM"),Fvt.forEach(t),fko=r(lSe," (CodeGen model)"),lSe.forEach(t),mko=i(W),a2=n(W,"LI",{});var iSe=s(a2);Wge=n(iSe,"STRONG",{});var Tvt=s(Wge);gko=r(Tvt,"ctrl"),Tvt.forEach(t),hko=r(iSe," \u2014 "),_O=n(iSe,"A",{href:!0});var Mvt=s(_O);pko=r(Mvt,"CTRLLMHeadModel"),Mvt.forEach(t),_ko=r(iSe," (CTRL model)"),iSe.forEach(t),uko=i(W),n2=n(W,"LI",{});var dSe=s(n2);Qge=n(dSe,"STRONG",{});var Evt=s(Qge);bko=r(Evt,"data2vec-text"),Evt.forEach(t),vko=r(dSe," \u2014 "),uO=n(dSe,"A",{href:!0});var Cvt=s(uO);Fko=r(Cvt,"Data2VecTextForCausalLM"),Cvt.forEach(t),Tko=r(dSe," (Data2VecText model)"),dSe.forEach(t),Mko=i(W),s2=n(W,"LI",{});var cSe=s(s2);Hge=n(cSe,"STRONG",{});var wvt=s(Hge);Eko=r(wvt,"electra"),wvt.forEach(t),Cko=r(cSe," \u2014 "),bO=n(cSe,"A",{href:!0});var Avt=s(bO);wko=r(Avt,"ElectraForCausalLM"),Avt.forEach(t),Ako=r(cSe," (ELECTRA model)"),cSe.forEach(t),Lko=i(W),l2=n(W,"LI",{});var fSe=s(l2);Uge=n(fSe,"STRONG",{});var Lvt=s(Uge);yko=r(Lvt,"gpt2"),Lvt.forEach(t),xko=r(fSe," \u2014 "),vO=n(fSe,"A",{href:!0});var yvt=s(vO);$ko=r(yvt,"GPT2LMHeadModel"),yvt.forEach(t),kko=r(fSe," (OpenAI GPT-2 model)"),fSe.forEach(t),Sko=i(W),i2=n(W,"LI",{});var mSe=s(i2);Jge=n(mSe,"STRONG",{});var xvt=s(Jge);Rko=r(xvt,"gpt_neo"),xvt.forEach(t),Pko=r(mSe," \u2014 "),FO=n(mSe,"A",{href:!0});var $vt=s(FO);Bko=r($vt,"GPTNeoForCausalLM"),$vt.forEach(t),Iko=r(mSe," (GPT Neo model)"),mSe.forEach(t),Nko=i(W),d2=n(W,"LI",{});var gSe=s(d2);Yge=n(gSe,"STRONG",{});var kvt=s(Yge);qko=r(kvt,"gpt_neox"),kvt.forEach(t),jko=r(gSe," \u2014 "),TO=n(gSe,"A",{href:!0});var Svt=s(TO);Dko=r(Svt,"GPTNeoXForCausalLM"),Svt.forEach(t),Gko=r(gSe," (GPT NeoX model)"),gSe.forEach(t),Oko=i(W),c2=n(W,"LI",{});var hSe=s(c2);Kge=n(hSe,"STRONG",{});var Rvt=s(Kge);Vko=r(Rvt,"gptj"),Rvt.forEach(t),Xko=r(hSe," \u2014 "),MO=n(hSe,"A",{href:!0});var Pvt=s(MO);zko=r(Pvt,"GPTJForCausalLM"),Pvt.forEach(t),Wko=r(hSe," (GPT-J model)"),hSe.forEach(t),Qko=i(W),f2=n(W,"LI",{});var pSe=s(f2);Zge=n(pSe,"STRONG",{});var Bvt=s(Zge);Hko=r(Bvt,"marian"),Bvt.forEach(t),Uko=r(pSe," \u2014 "),EO=n(pSe,"A",{href:!0});var Ivt=s(EO);Jko=r(Ivt,"MarianForCausalLM"),Ivt.forEach(t),Yko=r(pSe," (Marian model)"),pSe.forEach(t),Kko=i(W),m2=n(W,"LI",{});var _Se=s(m2);ehe=n(_Se,"STRONG",{});var Nvt=s(ehe);Zko=r(Nvt,"mbart"),Nvt.forEach(t),eSo=r(_Se," \u2014 "),CO=n(_Se,"A",{href:!0});var qvt=s(CO);oSo=r(qvt,"MBartForCausalLM"),qvt.forEach(t),rSo=r(_Se," (mBART model)"),_Se.forEach(t),tSo=i(W),g2=n(W,"LI",{});var uSe=s(g2);ohe=n(uSe,"STRONG",{});var jvt=s(ohe);aSo=r(jvt,"megatron-bert"),jvt.forEach(t),nSo=r(uSe," \u2014 "),wO=n(uSe,"A",{href:!0});var Dvt=s(wO);sSo=r(Dvt,"MegatronBertForCausalLM"),Dvt.forEach(t),lSo=r(uSe," (Megatron-BERT model)"),uSe.forEach(t),iSo=i(W),h2=n(W,"LI",{});var bSe=s(h2);rhe=n(bSe,"STRONG",{});var Gvt=s(rhe);dSo=r(Gvt,"mvp"),Gvt.forEach(t),cSo=r(bSe," \u2014 "),AO=n(bSe,"A",{href:!0});var Ovt=s(AO);fSo=r(Ovt,"MvpForCausalLM"),Ovt.forEach(t),mSo=r(bSe," (MVP model)"),bSe.forEach(t),gSo=i(W),p2=n(W,"LI",{});var vSe=s(p2);the=n(vSe,"STRONG",{});var Vvt=s(the);hSo=r(Vvt,"openai-gpt"),Vvt.forEach(t),pSo=r(vSe," \u2014 "),LO=n(vSe,"A",{href:!0});var Xvt=s(LO);_So=r(Xvt,"OpenAIGPTLMHeadModel"),Xvt.forEach(t),uSo=r(vSe," (OpenAI GPT model)"),vSe.forEach(t),bSo=i(W),_2=n(W,"LI",{});var FSe=s(_2);ahe=n(FSe,"STRONG",{});var zvt=s(ahe);vSo=r(zvt,"opt"),zvt.forEach(t),FSo=r(FSe," \u2014 "),yO=n(FSe,"A",{href:!0});var Wvt=s(yO);TSo=r(Wvt,"OPTForCausalLM"),Wvt.forEach(t),MSo=r(FSe," (OPT model)"),FSe.forEach(t),ESo=i(W),u2=n(W,"LI",{});var TSe=s(u2);nhe=n(TSe,"STRONG",{});var Qvt=s(nhe);CSo=r(Qvt,"pegasus"),Qvt.forEach(t),wSo=r(TSe," \u2014 "),xO=n(TSe,"A",{href:!0});var Hvt=s(xO);ASo=r(Hvt,"PegasusForCausalLM"),Hvt.forEach(t),LSo=r(TSe," (Pegasus model)"),TSe.forEach(t),ySo=i(W),b2=n(W,"LI",{});var MSe=s(b2);she=n(MSe,"STRONG",{});var Uvt=s(she);xSo=r(Uvt,"plbart"),Uvt.forEach(t),$So=r(MSe," \u2014 "),$O=n(MSe,"A",{href:!0});var Jvt=s($O);kSo=r(Jvt,"PLBartForCausalLM"),Jvt.forEach(t),SSo=r(MSe," (PLBart model)"),MSe.forEach(t),RSo=i(W),v2=n(W,"LI",{});var ESe=s(v2);lhe=n(ESe,"STRONG",{});var Yvt=s(lhe);PSo=r(Yvt,"prophetnet"),Yvt.forEach(t),BSo=r(ESe," \u2014 "),kO=n(ESe,"A",{href:!0});var Kvt=s(kO);ISo=r(Kvt,"ProphetNetForCausalLM"),Kvt.forEach(t),NSo=r(ESe," (ProphetNet model)"),ESe.forEach(t),qSo=i(W),F2=n(W,"LI",{});var CSe=s(F2);ihe=n(CSe,"STRONG",{});var Zvt=s(ihe);jSo=r(Zvt,"qdqbert"),Zvt.forEach(t),DSo=r(CSe," \u2014 "),SO=n(CSe,"A",{href:!0});var e3t=s(SO);GSo=r(e3t,"QDQBertLMHeadModel"),e3t.forEach(t),OSo=r(CSe," (QDQBert model)"),CSe.forEach(t),VSo=i(W),T2=n(W,"LI",{});var wSe=s(T2);dhe=n(wSe,"STRONG",{});var o3t=s(dhe);XSo=r(o3t,"reformer"),o3t.forEach(t),zSo=r(wSe," \u2014 "),RO=n(wSe,"A",{href:!0});var r3t=s(RO);WSo=r(r3t,"ReformerModelWithLMHead"),r3t.forEach(t),QSo=r(wSe," (Reformer model)"),wSe.forEach(t),HSo=i(W),M2=n(W,"LI",{});var ASe=s(M2);che=n(ASe,"STRONG",{});var t3t=s(che);USo=r(t3t,"rembert"),t3t.forEach(t),JSo=r(ASe," \u2014 "),PO=n(ASe,"A",{href:!0});var a3t=s(PO);YSo=r(a3t,"RemBertForCausalLM"),a3t.forEach(t),KSo=r(ASe," (RemBERT model)"),ASe.forEach(t),ZSo=i(W),E2=n(W,"LI",{});var LSe=s(E2);fhe=n(LSe,"STRONG",{});var n3t=s(fhe);eRo=r(n3t,"roberta"),n3t.forEach(t),oRo=r(LSe," \u2014 "),BO=n(LSe,"A",{href:!0});var s3t=s(BO);rRo=r(s3t,"RobertaForCausalLM"),s3t.forEach(t),tRo=r(LSe," (RoBERTa model)"),LSe.forEach(t),aRo=i(W),C2=n(W,"LI",{});var ySe=s(C2);mhe=n(ySe,"STRONG",{});var l3t=s(mhe);nRo=r(l3t,"roformer"),l3t.forEach(t),sRo=r(ySe," \u2014 "),IO=n(ySe,"A",{href:!0});var i3t=s(IO);lRo=r(i3t,"RoFormerForCausalLM"),i3t.forEach(t),iRo=r(ySe," (RoFormer model)"),ySe.forEach(t),dRo=i(W),w2=n(W,"LI",{});var xSe=s(w2);ghe=n(xSe,"STRONG",{});var d3t=s(ghe);cRo=r(d3t,"speech_to_text_2"),d3t.forEach(t),fRo=r(xSe," \u2014 "),NO=n(xSe,"A",{href:!0});var c3t=s(NO);mRo=r(c3t,"Speech2Text2ForCausalLM"),c3t.forEach(t),gRo=r(xSe," (Speech2Text2 model)"),xSe.forEach(t),hRo=i(W),A2=n(W,"LI",{});var $Se=s(A2);hhe=n($Se,"STRONG",{});var f3t=s(hhe);pRo=r(f3t,"transfo-xl"),f3t.forEach(t),_Ro=r($Se," \u2014 "),qO=n($Se,"A",{href:!0});var m3t=s(qO);uRo=r(m3t,"TransfoXLLMHeadModel"),m3t.forEach(t),bRo=r($Se," (Transformer-XL model)"),$Se.forEach(t),vRo=i(W),L2=n(W,"LI",{});var kSe=s(L2);phe=n(kSe,"STRONG",{});var g3t=s(phe);FRo=r(g3t,"trocr"),g3t.forEach(t),TRo=r(kSe," \u2014 "),jO=n(kSe,"A",{href:!0});var h3t=s(jO);MRo=r(h3t,"TrOCRForCausalLM"),h3t.forEach(t),ERo=r(kSe," (TrOCR model)"),kSe.forEach(t),CRo=i(W),y2=n(W,"LI",{});var SSe=s(y2);_he=n(SSe,"STRONG",{});var p3t=s(_he);wRo=r(p3t,"xglm"),p3t.forEach(t),ARo=r(SSe," \u2014 "),DO=n(SSe,"A",{href:!0});var _3t=s(DO);LRo=r(_3t,"XGLMForCausalLM"),_3t.forEach(t),yRo=r(SSe," (XGLM model)"),SSe.forEach(t),xRo=i(W),x2=n(W,"LI",{});var RSe=s(x2);uhe=n(RSe,"STRONG",{});var u3t=s(uhe);$Ro=r(u3t,"xlm"),u3t.forEach(t),kRo=r(RSe," \u2014 "),GO=n(RSe,"A",{href:!0});var b3t=s(GO);SRo=r(b3t,"XLMWithLMHeadModel"),b3t.forEach(t),RRo=r(RSe," (XLM model)"),RSe.forEach(t),PRo=i(W),$2=n(W,"LI",{});var PSe=s($2);bhe=n(PSe,"STRONG",{});var v3t=s(bhe);BRo=r(v3t,"xlm-prophetnet"),v3t.forEach(t),IRo=r(PSe," \u2014 "),OO=n(PSe,"A",{href:!0});var F3t=s(OO);NRo=r(F3t,"XLMProphetNetForCausalLM"),F3t.forEach(t),qRo=r(PSe," (XLM-ProphetNet model)"),PSe.forEach(t),jRo=i(W),k2=n(W,"LI",{});var BSe=s(k2);vhe=n(BSe,"STRONG",{});var T3t=s(vhe);DRo=r(T3t,"xlm-roberta"),T3t.forEach(t),GRo=r(BSe," \u2014 "),VO=n(BSe,"A",{href:!0});var M3t=s(VO);ORo=r(M3t,"XLMRobertaForCausalLM"),M3t.forEach(t),VRo=r(BSe," (XLM-RoBERTa model)"),BSe.forEach(t),XRo=i(W),S2=n(W,"LI",{});var ISe=s(S2);Fhe=n(ISe,"STRONG",{});var E3t=s(Fhe);zRo=r(E3t,"xlm-roberta-xl"),E3t.forEach(t),WRo=r(ISe," \u2014 "),XO=n(ISe,"A",{href:!0});var C3t=s(XO);QRo=r(C3t,"XLMRobertaXLForCausalLM"),C3t.forEach(t),HRo=r(ISe," (XLM-RoBERTa-XL model)"),ISe.forEach(t),URo=i(W),R2=n(W,"LI",{});var NSe=s(R2);The=n(NSe,"STRONG",{});var w3t=s(The);JRo=r(w3t,"xlnet"),w3t.forEach(t),YRo=r(NSe," \u2014 "),zO=n(NSe,"A",{href:!0});var A3t=s(zO);KRo=r(A3t,"XLNetLMHeadModel"),A3t.forEach(t),ZRo=r(NSe," (XLNet model)"),NSe.forEach(t),W.forEach(t),ePo=i(ia),P2=n(ia,"P",{});var qSe=s(P2);oPo=r(qSe,"The model is set in evaluation mode by default using "),Mhe=n(qSe,"CODE",{});var L3t=s(Mhe);rPo=r(L3t,"model.eval()"),L3t.forEach(t),tPo=r(qSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ehe=n(qSe,"CODE",{});var y3t=s(Ehe);aPo=r(y3t,"model.train()"),y3t.forEach(t),qSe.forEach(t),nPo=i(ia),T(B2.$$.fragment,ia),ia.forEach(t),al.forEach(t),yXe=i(f),Ji=n(f,"H2",{class:!0});var PWe=s(Ji);I2=n(PWe,"A",{id:!0,class:!0,href:!0});var x3t=s(I2);Che=n(x3t,"SPAN",{});var $3t=s(Che);T(H6.$$.fragment,$3t),$3t.forEach(t),x3t.forEach(t),sPo=i(PWe),whe=n(PWe,"SPAN",{});var k3t=s(whe);lPo=r(k3t,"AutoModelForMaskedLM"),k3t.forEach(t),PWe.forEach(t),xXe=i(f),So=n(f,"DIV",{class:!0});var nl=s(So);T(U6.$$.fragment,nl),iPo=i(nl),Yi=n(nl,"P",{});var Vre=s(Yi);dPo=r(Vre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),WO=n(Vre,"A",{href:!0});var S3t=s(WO);cPo=r(S3t,"from_pretrained()"),S3t.forEach(t),fPo=r(Vre," class method or the "),QO=n(Vre,"A",{href:!0});var R3t=s(QO);mPo=r(R3t,"from_config()"),R3t.forEach(t),gPo=r(Vre,` class
method.`),Vre.forEach(t),hPo=i(nl),J6=n(nl,"P",{});var BWe=s(J6);pPo=r(BWe,"This class cannot be instantiated directly using "),Ahe=n(BWe,"CODE",{});var P3t=s(Ahe);_Po=r(P3t,"__init__()"),P3t.forEach(t),uPo=r(BWe," (throws an error)."),BWe.forEach(t),bPo=i(nl),ct=n(nl,"DIV",{class:!0});var uw=s(ct);T(Y6.$$.fragment,uw),vPo=i(uw),Lhe=n(uw,"P",{});var B3t=s(Lhe);FPo=r(B3t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),B3t.forEach(t),TPo=i(uw),Ki=n(uw,"P",{});var Xre=s(Ki);MPo=r(Xre,`Note:
Loading a model from its configuration file does `),yhe=n(Xre,"STRONG",{});var I3t=s(yhe);EPo=r(I3t,"not"),I3t.forEach(t),CPo=r(Xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),HO=n(Xre,"A",{href:!0});var N3t=s(HO);wPo=r(N3t,"from_pretrained()"),N3t.forEach(t),APo=r(Xre," to load the model weights."),Xre.forEach(t),LPo=i(uw),T(N2.$$.fragment,uw),uw.forEach(t),yPo=i(nl),Ze=n(nl,"DIV",{class:!0});var da=s(Ze);T(K6.$$.fragment,da),xPo=i(da),xhe=n(da,"P",{});var q3t=s(xhe);$Po=r(q3t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),q3t.forEach(t),kPo=i(da),ja=n(da,"P",{});var bw=s(ja);SPo=r(bw,"The model class to instantiate is selected based on the "),$he=n(bw,"CODE",{});var j3t=s($he);RPo=r(j3t,"model_type"),j3t.forEach(t),PPo=r(bw,` property of the config object (either
passed as an argument or loaded from `),khe=n(bw,"CODE",{});var D3t=s(khe);BPo=r(D3t,"pretrained_model_name_or_path"),D3t.forEach(t),IPo=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),She=n(bw,"CODE",{});var G3t=s(She);NPo=r(G3t,"pretrained_model_name_or_path"),G3t.forEach(t),qPo=r(bw,":"),bw.forEach(t),jPo=i(da),Q=n(da,"UL",{});var H=s(Q);q2=n(H,"LI",{});var jSe=s(q2);Rhe=n(jSe,"STRONG",{});var O3t=s(Rhe);DPo=r(O3t,"albert"),O3t.forEach(t),GPo=r(jSe," \u2014 "),UO=n(jSe,"A",{href:!0});var V3t=s(UO);OPo=r(V3t,"AlbertForMaskedLM"),V3t.forEach(t),VPo=r(jSe," (ALBERT model)"),jSe.forEach(t),XPo=i(H),j2=n(H,"LI",{});var DSe=s(j2);Phe=n(DSe,"STRONG",{});var X3t=s(Phe);zPo=r(X3t,"bart"),X3t.forEach(t),WPo=r(DSe," \u2014 "),JO=n(DSe,"A",{href:!0});var z3t=s(JO);QPo=r(z3t,"BartForConditionalGeneration"),z3t.forEach(t),HPo=r(DSe," (BART model)"),DSe.forEach(t),UPo=i(H),D2=n(H,"LI",{});var GSe=s(D2);Bhe=n(GSe,"STRONG",{});var W3t=s(Bhe);JPo=r(W3t,"bert"),W3t.forEach(t),YPo=r(GSe," \u2014 "),YO=n(GSe,"A",{href:!0});var Q3t=s(YO);KPo=r(Q3t,"BertForMaskedLM"),Q3t.forEach(t),ZPo=r(GSe," (BERT model)"),GSe.forEach(t),eBo=i(H),G2=n(H,"LI",{});var OSe=s(G2);Ihe=n(OSe,"STRONG",{});var H3t=s(Ihe);oBo=r(H3t,"big_bird"),H3t.forEach(t),rBo=r(OSe," \u2014 "),KO=n(OSe,"A",{href:!0});var U3t=s(KO);tBo=r(U3t,"BigBirdForMaskedLM"),U3t.forEach(t),aBo=r(OSe," (BigBird model)"),OSe.forEach(t),nBo=i(H),O2=n(H,"LI",{});var VSe=s(O2);Nhe=n(VSe,"STRONG",{});var J3t=s(Nhe);sBo=r(J3t,"camembert"),J3t.forEach(t),lBo=r(VSe," \u2014 "),ZO=n(VSe,"A",{href:!0});var Y3t=s(ZO);iBo=r(Y3t,"CamembertForMaskedLM"),Y3t.forEach(t),dBo=r(VSe," (CamemBERT model)"),VSe.forEach(t),cBo=i(H),V2=n(H,"LI",{});var XSe=s(V2);qhe=n(XSe,"STRONG",{});var K3t=s(qhe);fBo=r(K3t,"convbert"),K3t.forEach(t),mBo=r(XSe," \u2014 "),eV=n(XSe,"A",{href:!0});var Z3t=s(eV);gBo=r(Z3t,"ConvBertForMaskedLM"),Z3t.forEach(t),hBo=r(XSe," (ConvBERT model)"),XSe.forEach(t),pBo=i(H),X2=n(H,"LI",{});var zSe=s(X2);jhe=n(zSe,"STRONG",{});var eFt=s(jhe);_Bo=r(eFt,"data2vec-text"),eFt.forEach(t),uBo=r(zSe," \u2014 "),oV=n(zSe,"A",{href:!0});var oFt=s(oV);bBo=r(oFt,"Data2VecTextForMaskedLM"),oFt.forEach(t),vBo=r(zSe," (Data2VecText model)"),zSe.forEach(t),FBo=i(H),z2=n(H,"LI",{});var WSe=s(z2);Dhe=n(WSe,"STRONG",{});var rFt=s(Dhe);TBo=r(rFt,"deberta"),rFt.forEach(t),MBo=r(WSe," \u2014 "),rV=n(WSe,"A",{href:!0});var tFt=s(rV);EBo=r(tFt,"DebertaForMaskedLM"),tFt.forEach(t),CBo=r(WSe," (DeBERTa model)"),WSe.forEach(t),wBo=i(H),W2=n(H,"LI",{});var QSe=s(W2);Ghe=n(QSe,"STRONG",{});var aFt=s(Ghe);ABo=r(aFt,"deberta-v2"),aFt.forEach(t),LBo=r(QSe," \u2014 "),tV=n(QSe,"A",{href:!0});var nFt=s(tV);yBo=r(nFt,"DebertaV2ForMaskedLM"),nFt.forEach(t),xBo=r(QSe," (DeBERTa-v2 model)"),QSe.forEach(t),$Bo=i(H),Q2=n(H,"LI",{});var HSe=s(Q2);Ohe=n(HSe,"STRONG",{});var sFt=s(Ohe);kBo=r(sFt,"distilbert"),sFt.forEach(t),SBo=r(HSe," \u2014 "),aV=n(HSe,"A",{href:!0});var lFt=s(aV);RBo=r(lFt,"DistilBertForMaskedLM"),lFt.forEach(t),PBo=r(HSe," (DistilBERT model)"),HSe.forEach(t),BBo=i(H),H2=n(H,"LI",{});var USe=s(H2);Vhe=n(USe,"STRONG",{});var iFt=s(Vhe);IBo=r(iFt,"electra"),iFt.forEach(t),NBo=r(USe," \u2014 "),nV=n(USe,"A",{href:!0});var dFt=s(nV);qBo=r(dFt,"ElectraForMaskedLM"),dFt.forEach(t),jBo=r(USe," (ELECTRA model)"),USe.forEach(t),DBo=i(H),U2=n(H,"LI",{});var JSe=s(U2);Xhe=n(JSe,"STRONG",{});var cFt=s(Xhe);GBo=r(cFt,"flaubert"),cFt.forEach(t),OBo=r(JSe," \u2014 "),sV=n(JSe,"A",{href:!0});var fFt=s(sV);VBo=r(fFt,"FlaubertWithLMHeadModel"),fFt.forEach(t),XBo=r(JSe," (FlauBERT model)"),JSe.forEach(t),zBo=i(H),J2=n(H,"LI",{});var YSe=s(J2);zhe=n(YSe,"STRONG",{});var mFt=s(zhe);WBo=r(mFt,"fnet"),mFt.forEach(t),QBo=r(YSe," \u2014 "),lV=n(YSe,"A",{href:!0});var gFt=s(lV);HBo=r(gFt,"FNetForMaskedLM"),gFt.forEach(t),UBo=r(YSe," (FNet model)"),YSe.forEach(t),JBo=i(H),Y2=n(H,"LI",{});var KSe=s(Y2);Whe=n(KSe,"STRONG",{});var hFt=s(Whe);YBo=r(hFt,"funnel"),hFt.forEach(t),KBo=r(KSe," \u2014 "),iV=n(KSe,"A",{href:!0});var pFt=s(iV);ZBo=r(pFt,"FunnelForMaskedLM"),pFt.forEach(t),eIo=r(KSe," (Funnel Transformer model)"),KSe.forEach(t),oIo=i(H),K2=n(H,"LI",{});var ZSe=s(K2);Qhe=n(ZSe,"STRONG",{});var _Ft=s(Qhe);rIo=r(_Ft,"ibert"),_Ft.forEach(t),tIo=r(ZSe," \u2014 "),dV=n(ZSe,"A",{href:!0});var uFt=s(dV);aIo=r(uFt,"IBertForMaskedLM"),uFt.forEach(t),nIo=r(ZSe," (I-BERT model)"),ZSe.forEach(t),sIo=i(H),Z2=n(H,"LI",{});var eRe=s(Z2);Hhe=n(eRe,"STRONG",{});var bFt=s(Hhe);lIo=r(bFt,"layoutlm"),bFt.forEach(t),iIo=r(eRe," \u2014 "),cV=n(eRe,"A",{href:!0});var vFt=s(cV);dIo=r(vFt,"LayoutLMForMaskedLM"),vFt.forEach(t),cIo=r(eRe," (LayoutLM model)"),eRe.forEach(t),fIo=i(H),eb=n(H,"LI",{});var oRe=s(eb);Uhe=n(oRe,"STRONG",{});var FFt=s(Uhe);mIo=r(FFt,"longformer"),FFt.forEach(t),gIo=r(oRe," \u2014 "),fV=n(oRe,"A",{href:!0});var TFt=s(fV);hIo=r(TFt,"LongformerForMaskedLM"),TFt.forEach(t),pIo=r(oRe," (Longformer model)"),oRe.forEach(t),_Io=i(H),ob=n(H,"LI",{});var rRe=s(ob);Jhe=n(rRe,"STRONG",{});var MFt=s(Jhe);uIo=r(MFt,"luke"),MFt.forEach(t),bIo=r(rRe," \u2014 "),mV=n(rRe,"A",{href:!0});var EFt=s(mV);vIo=r(EFt,"LukeForMaskedLM"),EFt.forEach(t),FIo=r(rRe," (LUKE model)"),rRe.forEach(t),TIo=i(H),rb=n(H,"LI",{});var tRe=s(rb);Yhe=n(tRe,"STRONG",{});var CFt=s(Yhe);MIo=r(CFt,"mbart"),CFt.forEach(t),EIo=r(tRe," \u2014 "),gV=n(tRe,"A",{href:!0});var wFt=s(gV);CIo=r(wFt,"MBartForConditionalGeneration"),wFt.forEach(t),wIo=r(tRe," (mBART model)"),tRe.forEach(t),AIo=i(H),tb=n(H,"LI",{});var aRe=s(tb);Khe=n(aRe,"STRONG",{});var AFt=s(Khe);LIo=r(AFt,"megatron-bert"),AFt.forEach(t),yIo=r(aRe," \u2014 "),hV=n(aRe,"A",{href:!0});var LFt=s(hV);xIo=r(LFt,"MegatronBertForMaskedLM"),LFt.forEach(t),$Io=r(aRe," (Megatron-BERT model)"),aRe.forEach(t),kIo=i(H),ab=n(H,"LI",{});var nRe=s(ab);Zhe=n(nRe,"STRONG",{});var yFt=s(Zhe);SIo=r(yFt,"mobilebert"),yFt.forEach(t),RIo=r(nRe," \u2014 "),pV=n(nRe,"A",{href:!0});var xFt=s(pV);PIo=r(xFt,"MobileBertForMaskedLM"),xFt.forEach(t),BIo=r(nRe," (MobileBERT model)"),nRe.forEach(t),IIo=i(H),nb=n(H,"LI",{});var sRe=s(nb);epe=n(sRe,"STRONG",{});var $Ft=s(epe);NIo=r($Ft,"mpnet"),$Ft.forEach(t),qIo=r(sRe," \u2014 "),_V=n(sRe,"A",{href:!0});var kFt=s(_V);jIo=r(kFt,"MPNetForMaskedLM"),kFt.forEach(t),DIo=r(sRe," (MPNet model)"),sRe.forEach(t),GIo=i(H),sb=n(H,"LI",{});var lRe=s(sb);ope=n(lRe,"STRONG",{});var SFt=s(ope);OIo=r(SFt,"mvp"),SFt.forEach(t),VIo=r(lRe," \u2014 "),uV=n(lRe,"A",{href:!0});var RFt=s(uV);XIo=r(RFt,"MvpForConditionalGeneration"),RFt.forEach(t),zIo=r(lRe," (MVP model)"),lRe.forEach(t),WIo=i(H),lb=n(H,"LI",{});var iRe=s(lb);rpe=n(iRe,"STRONG",{});var PFt=s(rpe);QIo=r(PFt,"nezha"),PFt.forEach(t),HIo=r(iRe," \u2014 "),bV=n(iRe,"A",{href:!0});var BFt=s(bV);UIo=r(BFt,"NezhaForMaskedLM"),BFt.forEach(t),JIo=r(iRe," (Nezha model)"),iRe.forEach(t),YIo=i(H),ib=n(H,"LI",{});var dRe=s(ib);tpe=n(dRe,"STRONG",{});var IFt=s(tpe);KIo=r(IFt,"nystromformer"),IFt.forEach(t),ZIo=r(dRe," \u2014 "),vV=n(dRe,"A",{href:!0});var NFt=s(vV);eNo=r(NFt,"NystromformerForMaskedLM"),NFt.forEach(t),oNo=r(dRe," (Nystr\xF6mformer model)"),dRe.forEach(t),rNo=i(H),db=n(H,"LI",{});var cRe=s(db);ape=n(cRe,"STRONG",{});var qFt=s(ape);tNo=r(qFt,"perceiver"),qFt.forEach(t),aNo=r(cRe," \u2014 "),FV=n(cRe,"A",{href:!0});var jFt=s(FV);nNo=r(jFt,"PerceiverForMaskedLM"),jFt.forEach(t),sNo=r(cRe," (Perceiver model)"),cRe.forEach(t),lNo=i(H),cb=n(H,"LI",{});var fRe=s(cb);npe=n(fRe,"STRONG",{});var DFt=s(npe);iNo=r(DFt,"qdqbert"),DFt.forEach(t),dNo=r(fRe," \u2014 "),TV=n(fRe,"A",{href:!0});var GFt=s(TV);cNo=r(GFt,"QDQBertForMaskedLM"),GFt.forEach(t),fNo=r(fRe," (QDQBert model)"),fRe.forEach(t),mNo=i(H),fb=n(H,"LI",{});var mRe=s(fb);spe=n(mRe,"STRONG",{});var OFt=s(spe);gNo=r(OFt,"reformer"),OFt.forEach(t),hNo=r(mRe," \u2014 "),MV=n(mRe,"A",{href:!0});var VFt=s(MV);pNo=r(VFt,"ReformerForMaskedLM"),VFt.forEach(t),_No=r(mRe," (Reformer model)"),mRe.forEach(t),uNo=i(H),mb=n(H,"LI",{});var gRe=s(mb);lpe=n(gRe,"STRONG",{});var XFt=s(lpe);bNo=r(XFt,"rembert"),XFt.forEach(t),vNo=r(gRe," \u2014 "),EV=n(gRe,"A",{href:!0});var zFt=s(EV);FNo=r(zFt,"RemBertForMaskedLM"),zFt.forEach(t),TNo=r(gRe," (RemBERT model)"),gRe.forEach(t),MNo=i(H),gb=n(H,"LI",{});var hRe=s(gb);ipe=n(hRe,"STRONG",{});var WFt=s(ipe);ENo=r(WFt,"roberta"),WFt.forEach(t),CNo=r(hRe," \u2014 "),CV=n(hRe,"A",{href:!0});var QFt=s(CV);wNo=r(QFt,"RobertaForMaskedLM"),QFt.forEach(t),ANo=r(hRe," (RoBERTa model)"),hRe.forEach(t),LNo=i(H),hb=n(H,"LI",{});var pRe=s(hb);dpe=n(pRe,"STRONG",{});var HFt=s(dpe);yNo=r(HFt,"roformer"),HFt.forEach(t),xNo=r(pRe," \u2014 "),wV=n(pRe,"A",{href:!0});var UFt=s(wV);$No=r(UFt,"RoFormerForMaskedLM"),UFt.forEach(t),kNo=r(pRe," (RoFormer model)"),pRe.forEach(t),SNo=i(H),pb=n(H,"LI",{});var _Re=s(pb);cpe=n(_Re,"STRONG",{});var JFt=s(cpe);RNo=r(JFt,"squeezebert"),JFt.forEach(t),PNo=r(_Re," \u2014 "),AV=n(_Re,"A",{href:!0});var YFt=s(AV);BNo=r(YFt,"SqueezeBertForMaskedLM"),YFt.forEach(t),INo=r(_Re," (SqueezeBERT model)"),_Re.forEach(t),NNo=i(H),_b=n(H,"LI",{});var uRe=s(_b);fpe=n(uRe,"STRONG",{});var KFt=s(fpe);qNo=r(KFt,"tapas"),KFt.forEach(t),jNo=r(uRe," \u2014 "),LV=n(uRe,"A",{href:!0});var ZFt=s(LV);DNo=r(ZFt,"TapasForMaskedLM"),ZFt.forEach(t),GNo=r(uRe," (TAPAS model)"),uRe.forEach(t),ONo=i(H),ub=n(H,"LI",{});var bRe=s(ub);mpe=n(bRe,"STRONG",{});var eTt=s(mpe);VNo=r(eTt,"wav2vec2"),eTt.forEach(t),XNo=r(bRe," \u2014 "),gpe=n(bRe,"CODE",{});var oTt=s(gpe);zNo=r(oTt,"Wav2Vec2ForMaskedLM"),oTt.forEach(t),WNo=r(bRe," (Wav2Vec2 model)"),bRe.forEach(t),QNo=i(H),bb=n(H,"LI",{});var vRe=s(bb);hpe=n(vRe,"STRONG",{});var rTt=s(hpe);HNo=r(rTt,"xlm"),rTt.forEach(t),UNo=r(vRe," \u2014 "),yV=n(vRe,"A",{href:!0});var tTt=s(yV);JNo=r(tTt,"XLMWithLMHeadModel"),tTt.forEach(t),YNo=r(vRe," (XLM model)"),vRe.forEach(t),KNo=i(H),vb=n(H,"LI",{});var FRe=s(vb);ppe=n(FRe,"STRONG",{});var aTt=s(ppe);ZNo=r(aTt,"xlm-roberta"),aTt.forEach(t),eqo=r(FRe," \u2014 "),xV=n(FRe,"A",{href:!0});var nTt=s(xV);oqo=r(nTt,"XLMRobertaForMaskedLM"),nTt.forEach(t),rqo=r(FRe," (XLM-RoBERTa model)"),FRe.forEach(t),tqo=i(H),Fb=n(H,"LI",{});var TRe=s(Fb);_pe=n(TRe,"STRONG",{});var sTt=s(_pe);aqo=r(sTt,"xlm-roberta-xl"),sTt.forEach(t),nqo=r(TRe," \u2014 "),$V=n(TRe,"A",{href:!0});var lTt=s($V);sqo=r(lTt,"XLMRobertaXLForMaskedLM"),lTt.forEach(t),lqo=r(TRe," (XLM-RoBERTa-XL model)"),TRe.forEach(t),iqo=i(H),Tb=n(H,"LI",{});var MRe=s(Tb);upe=n(MRe,"STRONG",{});var iTt=s(upe);dqo=r(iTt,"yoso"),iTt.forEach(t),cqo=r(MRe," \u2014 "),kV=n(MRe,"A",{href:!0});var dTt=s(kV);fqo=r(dTt,"YosoForMaskedLM"),dTt.forEach(t),mqo=r(MRe," (YOSO model)"),MRe.forEach(t),H.forEach(t),gqo=i(da),Mb=n(da,"P",{});var ERe=s(Mb);hqo=r(ERe,"The model is set in evaluation mode by default using "),bpe=n(ERe,"CODE",{});var cTt=s(bpe);pqo=r(cTt,"model.eval()"),cTt.forEach(t),_qo=r(ERe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vpe=n(ERe,"CODE",{});var fTt=s(vpe);uqo=r(fTt,"model.train()"),fTt.forEach(t),ERe.forEach(t),bqo=i(da),T(Eb.$$.fragment,da),da.forEach(t),nl.forEach(t),$Xe=i(f),Zi=n(f,"H2",{class:!0});var IWe=s(Zi);Cb=n(IWe,"A",{id:!0,class:!0,href:!0});var mTt=s(Cb);Fpe=n(mTt,"SPAN",{});var gTt=s(Fpe);T(Z6.$$.fragment,gTt),gTt.forEach(t),mTt.forEach(t),vqo=i(IWe),Tpe=n(IWe,"SPAN",{});var hTt=s(Tpe);Fqo=r(hTt,"AutoModelForSeq2SeqLM"),hTt.forEach(t),IWe.forEach(t),kXe=i(f),Ro=n(f,"DIV",{class:!0});var sl=s(Ro);T(eL.$$.fragment,sl),Tqo=i(sl),ed=n(sl,"P",{});var zre=s(ed);Mqo=r(zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),SV=n(zre,"A",{href:!0});var pTt=s(SV);Eqo=r(pTt,"from_pretrained()"),pTt.forEach(t),Cqo=r(zre," class method or the "),RV=n(zre,"A",{href:!0});var _Tt=s(RV);wqo=r(_Tt,"from_config()"),_Tt.forEach(t),Aqo=r(zre,` class
method.`),zre.forEach(t),Lqo=i(sl),oL=n(sl,"P",{});var NWe=s(oL);yqo=r(NWe,"This class cannot be instantiated directly using "),Mpe=n(NWe,"CODE",{});var uTt=s(Mpe);xqo=r(uTt,"__init__()"),uTt.forEach(t),$qo=r(NWe," (throws an error)."),NWe.forEach(t),kqo=i(sl),ft=n(sl,"DIV",{class:!0});var vw=s(ft);T(rL.$$.fragment,vw),Sqo=i(vw),Epe=n(vw,"P",{});var bTt=s(Epe);Rqo=r(bTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),bTt.forEach(t),Pqo=i(vw),od=n(vw,"P",{});var Wre=s(od);Bqo=r(Wre,`Note:
Loading a model from its configuration file does `),Cpe=n(Wre,"STRONG",{});var vTt=s(Cpe);Iqo=r(vTt,"not"),vTt.forEach(t),Nqo=r(Wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),PV=n(Wre,"A",{href:!0});var FTt=s(PV);qqo=r(FTt,"from_pretrained()"),FTt.forEach(t),jqo=r(Wre," to load the model weights."),Wre.forEach(t),Dqo=i(vw),T(wb.$$.fragment,vw),vw.forEach(t),Gqo=i(sl),eo=n(sl,"DIV",{class:!0});var ca=s(eo);T(tL.$$.fragment,ca),Oqo=i(ca),wpe=n(ca,"P",{});var TTt=s(wpe);Vqo=r(TTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),TTt.forEach(t),Xqo=i(ca),Da=n(ca,"P",{});var Fw=s(Da);zqo=r(Fw,"The model class to instantiate is selected based on the "),Ape=n(Fw,"CODE",{});var MTt=s(Ape);Wqo=r(MTt,"model_type"),MTt.forEach(t),Qqo=r(Fw,` property of the config object (either
passed as an argument or loaded from `),Lpe=n(Fw,"CODE",{});var ETt=s(Lpe);Hqo=r(ETt,"pretrained_model_name_or_path"),ETt.forEach(t),Uqo=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ype=n(Fw,"CODE",{});var CTt=s(ype);Jqo=r(CTt,"pretrained_model_name_or_path"),CTt.forEach(t),Yqo=r(Fw,":"),Fw.forEach(t),Kqo=i(ca),pe=n(ca,"UL",{});var be=s(pe);Ab=n(be,"LI",{});var CRe=s(Ab);xpe=n(CRe,"STRONG",{});var wTt=s(xpe);Zqo=r(wTt,"bart"),wTt.forEach(t),ejo=r(CRe," \u2014 "),BV=n(CRe,"A",{href:!0});var ATt=s(BV);ojo=r(ATt,"BartForConditionalGeneration"),ATt.forEach(t),rjo=r(CRe," (BART model)"),CRe.forEach(t),tjo=i(be),Lb=n(be,"LI",{});var wRe=s(Lb);$pe=n(wRe,"STRONG",{});var LTt=s($pe);ajo=r(LTt,"bigbird_pegasus"),LTt.forEach(t),njo=r(wRe," \u2014 "),IV=n(wRe,"A",{href:!0});var yTt=s(IV);sjo=r(yTt,"BigBirdPegasusForConditionalGeneration"),yTt.forEach(t),ljo=r(wRe," (BigBird-Pegasus model)"),wRe.forEach(t),ijo=i(be),yb=n(be,"LI",{});var ARe=s(yb);kpe=n(ARe,"STRONG",{});var xTt=s(kpe);djo=r(xTt,"blenderbot"),xTt.forEach(t),cjo=r(ARe," \u2014 "),NV=n(ARe,"A",{href:!0});var $Tt=s(NV);fjo=r($Tt,"BlenderbotForConditionalGeneration"),$Tt.forEach(t),mjo=r(ARe," (Blenderbot model)"),ARe.forEach(t),gjo=i(be),xb=n(be,"LI",{});var LRe=s(xb);Spe=n(LRe,"STRONG",{});var kTt=s(Spe);hjo=r(kTt,"blenderbot-small"),kTt.forEach(t),pjo=r(LRe," \u2014 "),qV=n(LRe,"A",{href:!0});var STt=s(qV);_jo=r(STt,"BlenderbotSmallForConditionalGeneration"),STt.forEach(t),ujo=r(LRe," (BlenderbotSmall model)"),LRe.forEach(t),bjo=i(be),$b=n(be,"LI",{});var yRe=s($b);Rpe=n(yRe,"STRONG",{});var RTt=s(Rpe);vjo=r(RTt,"encoder-decoder"),RTt.forEach(t),Fjo=r(yRe," \u2014 "),jV=n(yRe,"A",{href:!0});var PTt=s(jV);Tjo=r(PTt,"EncoderDecoderModel"),PTt.forEach(t),Mjo=r(yRe," (Encoder decoder model)"),yRe.forEach(t),Ejo=i(be),kb=n(be,"LI",{});var xRe=s(kb);Ppe=n(xRe,"STRONG",{});var BTt=s(Ppe);Cjo=r(BTt,"fsmt"),BTt.forEach(t),wjo=r(xRe," \u2014 "),DV=n(xRe,"A",{href:!0});var ITt=s(DV);Ajo=r(ITt,"FSMTForConditionalGeneration"),ITt.forEach(t),Ljo=r(xRe," (FairSeq Machine-Translation model)"),xRe.forEach(t),yjo=i(be),Sb=n(be,"LI",{});var $Re=s(Sb);Bpe=n($Re,"STRONG",{});var NTt=s(Bpe);xjo=r(NTt,"led"),NTt.forEach(t),$jo=r($Re," \u2014 "),GV=n($Re,"A",{href:!0});var qTt=s(GV);kjo=r(qTt,"LEDForConditionalGeneration"),qTt.forEach(t),Sjo=r($Re," (LED model)"),$Re.forEach(t),Rjo=i(be),Rb=n(be,"LI",{});var kRe=s(Rb);Ipe=n(kRe,"STRONG",{});var jTt=s(Ipe);Pjo=r(jTt,"longt5"),jTt.forEach(t),Bjo=r(kRe," \u2014 "),OV=n(kRe,"A",{href:!0});var DTt=s(OV);Ijo=r(DTt,"LongT5ForConditionalGeneration"),DTt.forEach(t),Njo=r(kRe," (LongT5 model)"),kRe.forEach(t),qjo=i(be),Pb=n(be,"LI",{});var SRe=s(Pb);Npe=n(SRe,"STRONG",{});var GTt=s(Npe);jjo=r(GTt,"m2m_100"),GTt.forEach(t),Djo=r(SRe," \u2014 "),VV=n(SRe,"A",{href:!0});var OTt=s(VV);Gjo=r(OTt,"M2M100ForConditionalGeneration"),OTt.forEach(t),Ojo=r(SRe," (M2M100 model)"),SRe.forEach(t),Vjo=i(be),Bb=n(be,"LI",{});var RRe=s(Bb);qpe=n(RRe,"STRONG",{});var VTt=s(qpe);Xjo=r(VTt,"marian"),VTt.forEach(t),zjo=r(RRe," \u2014 "),XV=n(RRe,"A",{href:!0});var XTt=s(XV);Wjo=r(XTt,"MarianMTModel"),XTt.forEach(t),Qjo=r(RRe," (Marian model)"),RRe.forEach(t),Hjo=i(be),Ib=n(be,"LI",{});var PRe=s(Ib);jpe=n(PRe,"STRONG",{});var zTt=s(jpe);Ujo=r(zTt,"mbart"),zTt.forEach(t),Jjo=r(PRe," \u2014 "),zV=n(PRe,"A",{href:!0});var WTt=s(zV);Yjo=r(WTt,"MBartForConditionalGeneration"),WTt.forEach(t),Kjo=r(PRe," (mBART model)"),PRe.forEach(t),Zjo=i(be),Nb=n(be,"LI",{});var BRe=s(Nb);Dpe=n(BRe,"STRONG",{});var QTt=s(Dpe);eDo=r(QTt,"mt5"),QTt.forEach(t),oDo=r(BRe," \u2014 "),WV=n(BRe,"A",{href:!0});var HTt=s(WV);rDo=r(HTt,"MT5ForConditionalGeneration"),HTt.forEach(t),tDo=r(BRe," (MT5 model)"),BRe.forEach(t),aDo=i(be),qb=n(be,"LI",{});var IRe=s(qb);Gpe=n(IRe,"STRONG",{});var UTt=s(Gpe);nDo=r(UTt,"mvp"),UTt.forEach(t),sDo=r(IRe," \u2014 "),QV=n(IRe,"A",{href:!0});var JTt=s(QV);lDo=r(JTt,"MvpForConditionalGeneration"),JTt.forEach(t),iDo=r(IRe," (MVP model)"),IRe.forEach(t),dDo=i(be),jb=n(be,"LI",{});var NRe=s(jb);Ope=n(NRe,"STRONG",{});var YTt=s(Ope);cDo=r(YTt,"pegasus"),YTt.forEach(t),fDo=r(NRe," \u2014 "),HV=n(NRe,"A",{href:!0});var KTt=s(HV);mDo=r(KTt,"PegasusForConditionalGeneration"),KTt.forEach(t),gDo=r(NRe," (Pegasus model)"),NRe.forEach(t),hDo=i(be),Db=n(be,"LI",{});var qRe=s(Db);Vpe=n(qRe,"STRONG",{});var ZTt=s(Vpe);pDo=r(ZTt,"plbart"),ZTt.forEach(t),_Do=r(qRe," \u2014 "),UV=n(qRe,"A",{href:!0});var e7t=s(UV);uDo=r(e7t,"PLBartForConditionalGeneration"),e7t.forEach(t),bDo=r(qRe," (PLBart model)"),qRe.forEach(t),vDo=i(be),Gb=n(be,"LI",{});var jRe=s(Gb);Xpe=n(jRe,"STRONG",{});var o7t=s(Xpe);FDo=r(o7t,"prophetnet"),o7t.forEach(t),TDo=r(jRe," \u2014 "),JV=n(jRe,"A",{href:!0});var r7t=s(JV);MDo=r(r7t,"ProphetNetForConditionalGeneration"),r7t.forEach(t),EDo=r(jRe," (ProphetNet model)"),jRe.forEach(t),CDo=i(be),Ob=n(be,"LI",{});var DRe=s(Ob);zpe=n(DRe,"STRONG",{});var t7t=s(zpe);wDo=r(t7t,"t5"),t7t.forEach(t),ADo=r(DRe," \u2014 "),YV=n(DRe,"A",{href:!0});var a7t=s(YV);LDo=r(a7t,"T5ForConditionalGeneration"),a7t.forEach(t),yDo=r(DRe," (T5 model)"),DRe.forEach(t),xDo=i(be),Vb=n(be,"LI",{});var GRe=s(Vb);Wpe=n(GRe,"STRONG",{});var n7t=s(Wpe);$Do=r(n7t,"xlm-prophetnet"),n7t.forEach(t),kDo=r(GRe," \u2014 "),KV=n(GRe,"A",{href:!0});var s7t=s(KV);SDo=r(s7t,"XLMProphetNetForConditionalGeneration"),s7t.forEach(t),RDo=r(GRe," (XLM-ProphetNet model)"),GRe.forEach(t),be.forEach(t),PDo=i(ca),Xb=n(ca,"P",{});var ORe=s(Xb);BDo=r(ORe,"The model is set in evaluation mode by default using "),Qpe=n(ORe,"CODE",{});var l7t=s(Qpe);IDo=r(l7t,"model.eval()"),l7t.forEach(t),NDo=r(ORe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hpe=n(ORe,"CODE",{});var i7t=s(Hpe);qDo=r(i7t,"model.train()"),i7t.forEach(t),ORe.forEach(t),jDo=i(ca),T(zb.$$.fragment,ca),ca.forEach(t),sl.forEach(t),SXe=i(f),rd=n(f,"H2",{class:!0});var qWe=s(rd);Wb=n(qWe,"A",{id:!0,class:!0,href:!0});var d7t=s(Wb);Upe=n(d7t,"SPAN",{});var c7t=s(Upe);T(aL.$$.fragment,c7t),c7t.forEach(t),d7t.forEach(t),DDo=i(qWe),Jpe=n(qWe,"SPAN",{});var f7t=s(Jpe);GDo=r(f7t,"AutoModelForSequenceClassification"),f7t.forEach(t),qWe.forEach(t),RXe=i(f),Po=n(f,"DIV",{class:!0});var ll=s(Po);T(nL.$$.fragment,ll),ODo=i(ll),td=n(ll,"P",{});var Qre=s(td);VDo=r(Qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ZV=n(Qre,"A",{href:!0});var m7t=s(ZV);XDo=r(m7t,"from_pretrained()"),m7t.forEach(t),zDo=r(Qre," class method or the "),eX=n(Qre,"A",{href:!0});var g7t=s(eX);WDo=r(g7t,"from_config()"),g7t.forEach(t),QDo=r(Qre,` class
method.`),Qre.forEach(t),HDo=i(ll),sL=n(ll,"P",{});var jWe=s(sL);UDo=r(jWe,"This class cannot be instantiated directly using "),Ype=n(jWe,"CODE",{});var h7t=s(Ype);JDo=r(h7t,"__init__()"),h7t.forEach(t),YDo=r(jWe," (throws an error)."),jWe.forEach(t),KDo=i(ll),mt=n(ll,"DIV",{class:!0});var Tw=s(mt);T(lL.$$.fragment,Tw),ZDo=i(Tw),Kpe=n(Tw,"P",{});var p7t=s(Kpe);eGo=r(p7t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),p7t.forEach(t),oGo=i(Tw),ad=n(Tw,"P",{});var Hre=s(ad);rGo=r(Hre,`Note:
Loading a model from its configuration file does `),Zpe=n(Hre,"STRONG",{});var _7t=s(Zpe);tGo=r(_7t,"not"),_7t.forEach(t),aGo=r(Hre,` load the model weights. It only affects the
model\u2019s configuration. Use `),oX=n(Hre,"A",{href:!0});var u7t=s(oX);nGo=r(u7t,"from_pretrained()"),u7t.forEach(t),sGo=r(Hre," to load the model weights."),Hre.forEach(t),lGo=i(Tw),T(Qb.$$.fragment,Tw),Tw.forEach(t),iGo=i(ll),oo=n(ll,"DIV",{class:!0});var fa=s(oo);T(iL.$$.fragment,fa),dGo=i(fa),e_e=n(fa,"P",{});var b7t=s(e_e);cGo=r(b7t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),b7t.forEach(t),fGo=i(fa),Ga=n(fa,"P",{});var Mw=s(Ga);mGo=r(Mw,"The model class to instantiate is selected based on the "),o_e=n(Mw,"CODE",{});var v7t=s(o_e);gGo=r(v7t,"model_type"),v7t.forEach(t),hGo=r(Mw,` property of the config object (either
passed as an argument or loaded from `),r_e=n(Mw,"CODE",{});var F7t=s(r_e);pGo=r(F7t,"pretrained_model_name_or_path"),F7t.forEach(t),_Go=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t_e=n(Mw,"CODE",{});var T7t=s(t_e);uGo=r(T7t,"pretrained_model_name_or_path"),T7t.forEach(t),bGo=r(Mw,":"),Mw.forEach(t),vGo=i(fa),N=n(fa,"UL",{});var j=s(N);Hb=n(j,"LI",{});var VRe=s(Hb);a_e=n(VRe,"STRONG",{});var M7t=s(a_e);FGo=r(M7t,"albert"),M7t.forEach(t),TGo=r(VRe," \u2014 "),rX=n(VRe,"A",{href:!0});var E7t=s(rX);MGo=r(E7t,"AlbertForSequenceClassification"),E7t.forEach(t),EGo=r(VRe," (ALBERT model)"),VRe.forEach(t),CGo=i(j),Ub=n(j,"LI",{});var XRe=s(Ub);n_e=n(XRe,"STRONG",{});var C7t=s(n_e);wGo=r(C7t,"bart"),C7t.forEach(t),AGo=r(XRe," \u2014 "),tX=n(XRe,"A",{href:!0});var w7t=s(tX);LGo=r(w7t,"BartForSequenceClassification"),w7t.forEach(t),yGo=r(XRe," (BART model)"),XRe.forEach(t),xGo=i(j),Jb=n(j,"LI",{});var zRe=s(Jb);s_e=n(zRe,"STRONG",{});var A7t=s(s_e);$Go=r(A7t,"bert"),A7t.forEach(t),kGo=r(zRe," \u2014 "),aX=n(zRe,"A",{href:!0});var L7t=s(aX);SGo=r(L7t,"BertForSequenceClassification"),L7t.forEach(t),RGo=r(zRe," (BERT model)"),zRe.forEach(t),PGo=i(j),Yb=n(j,"LI",{});var WRe=s(Yb);l_e=n(WRe,"STRONG",{});var y7t=s(l_e);BGo=r(y7t,"big_bird"),y7t.forEach(t),IGo=r(WRe," \u2014 "),nX=n(WRe,"A",{href:!0});var x7t=s(nX);NGo=r(x7t,"BigBirdForSequenceClassification"),x7t.forEach(t),qGo=r(WRe," (BigBird model)"),WRe.forEach(t),jGo=i(j),Kb=n(j,"LI",{});var QRe=s(Kb);i_e=n(QRe,"STRONG",{});var $7t=s(i_e);DGo=r($7t,"bigbird_pegasus"),$7t.forEach(t),GGo=r(QRe," \u2014 "),sX=n(QRe,"A",{href:!0});var k7t=s(sX);OGo=r(k7t,"BigBirdPegasusForSequenceClassification"),k7t.forEach(t),VGo=r(QRe," (BigBird-Pegasus model)"),QRe.forEach(t),XGo=i(j),Zb=n(j,"LI",{});var HRe=s(Zb);d_e=n(HRe,"STRONG",{});var S7t=s(d_e);zGo=r(S7t,"bloom"),S7t.forEach(t),WGo=r(HRe," \u2014 "),lX=n(HRe,"A",{href:!0});var R7t=s(lX);QGo=r(R7t,"BloomForSequenceClassification"),R7t.forEach(t),HGo=r(HRe," (BLOOM model)"),HRe.forEach(t),UGo=i(j),ev=n(j,"LI",{});var URe=s(ev);c_e=n(URe,"STRONG",{});var P7t=s(c_e);JGo=r(P7t,"camembert"),P7t.forEach(t),YGo=r(URe," \u2014 "),iX=n(URe,"A",{href:!0});var B7t=s(iX);KGo=r(B7t,"CamembertForSequenceClassification"),B7t.forEach(t),ZGo=r(URe," (CamemBERT model)"),URe.forEach(t),eOo=i(j),ov=n(j,"LI",{});var JRe=s(ov);f_e=n(JRe,"STRONG",{});var I7t=s(f_e);oOo=r(I7t,"canine"),I7t.forEach(t),rOo=r(JRe," \u2014 "),dX=n(JRe,"A",{href:!0});var N7t=s(dX);tOo=r(N7t,"CanineForSequenceClassification"),N7t.forEach(t),aOo=r(JRe," (CANINE model)"),JRe.forEach(t),nOo=i(j),rv=n(j,"LI",{});var YRe=s(rv);m_e=n(YRe,"STRONG",{});var q7t=s(m_e);sOo=r(q7t,"convbert"),q7t.forEach(t),lOo=r(YRe," \u2014 "),cX=n(YRe,"A",{href:!0});var j7t=s(cX);iOo=r(j7t,"ConvBertForSequenceClassification"),j7t.forEach(t),dOo=r(YRe," (ConvBERT model)"),YRe.forEach(t),cOo=i(j),tv=n(j,"LI",{});var KRe=s(tv);g_e=n(KRe,"STRONG",{});var D7t=s(g_e);fOo=r(D7t,"ctrl"),D7t.forEach(t),mOo=r(KRe," \u2014 "),fX=n(KRe,"A",{href:!0});var G7t=s(fX);gOo=r(G7t,"CTRLForSequenceClassification"),G7t.forEach(t),hOo=r(KRe," (CTRL model)"),KRe.forEach(t),pOo=i(j),av=n(j,"LI",{});var ZRe=s(av);h_e=n(ZRe,"STRONG",{});var O7t=s(h_e);_Oo=r(O7t,"data2vec-text"),O7t.forEach(t),uOo=r(ZRe," \u2014 "),mX=n(ZRe,"A",{href:!0});var V7t=s(mX);bOo=r(V7t,"Data2VecTextForSequenceClassification"),V7t.forEach(t),vOo=r(ZRe," (Data2VecText model)"),ZRe.forEach(t),FOo=i(j),nv=n(j,"LI",{});var ePe=s(nv);p_e=n(ePe,"STRONG",{});var X7t=s(p_e);TOo=r(X7t,"deberta"),X7t.forEach(t),MOo=r(ePe," \u2014 "),gX=n(ePe,"A",{href:!0});var z7t=s(gX);EOo=r(z7t,"DebertaForSequenceClassification"),z7t.forEach(t),COo=r(ePe," (DeBERTa model)"),ePe.forEach(t),wOo=i(j),sv=n(j,"LI",{});var oPe=s(sv);__e=n(oPe,"STRONG",{});var W7t=s(__e);AOo=r(W7t,"deberta-v2"),W7t.forEach(t),LOo=r(oPe," \u2014 "),hX=n(oPe,"A",{href:!0});var Q7t=s(hX);yOo=r(Q7t,"DebertaV2ForSequenceClassification"),Q7t.forEach(t),xOo=r(oPe," (DeBERTa-v2 model)"),oPe.forEach(t),$Oo=i(j),lv=n(j,"LI",{});var rPe=s(lv);u_e=n(rPe,"STRONG",{});var H7t=s(u_e);kOo=r(H7t,"distilbert"),H7t.forEach(t),SOo=r(rPe," \u2014 "),pX=n(rPe,"A",{href:!0});var U7t=s(pX);ROo=r(U7t,"DistilBertForSequenceClassification"),U7t.forEach(t),POo=r(rPe," (DistilBERT model)"),rPe.forEach(t),BOo=i(j),iv=n(j,"LI",{});var tPe=s(iv);b_e=n(tPe,"STRONG",{});var J7t=s(b_e);IOo=r(J7t,"electra"),J7t.forEach(t),NOo=r(tPe," \u2014 "),_X=n(tPe,"A",{href:!0});var Y7t=s(_X);qOo=r(Y7t,"ElectraForSequenceClassification"),Y7t.forEach(t),jOo=r(tPe," (ELECTRA model)"),tPe.forEach(t),DOo=i(j),dv=n(j,"LI",{});var aPe=s(dv);v_e=n(aPe,"STRONG",{});var K7t=s(v_e);GOo=r(K7t,"flaubert"),K7t.forEach(t),OOo=r(aPe," \u2014 "),uX=n(aPe,"A",{href:!0});var Z7t=s(uX);VOo=r(Z7t,"FlaubertForSequenceClassification"),Z7t.forEach(t),XOo=r(aPe," (FlauBERT model)"),aPe.forEach(t),zOo=i(j),cv=n(j,"LI",{});var nPe=s(cv);F_e=n(nPe,"STRONG",{});var e8t=s(F_e);WOo=r(e8t,"fnet"),e8t.forEach(t),QOo=r(nPe," \u2014 "),bX=n(nPe,"A",{href:!0});var o8t=s(bX);HOo=r(o8t,"FNetForSequenceClassification"),o8t.forEach(t),UOo=r(nPe," (FNet model)"),nPe.forEach(t),JOo=i(j),fv=n(j,"LI",{});var sPe=s(fv);T_e=n(sPe,"STRONG",{});var r8t=s(T_e);YOo=r(r8t,"funnel"),r8t.forEach(t),KOo=r(sPe," \u2014 "),vX=n(sPe,"A",{href:!0});var t8t=s(vX);ZOo=r(t8t,"FunnelForSequenceClassification"),t8t.forEach(t),eVo=r(sPe," (Funnel Transformer model)"),sPe.forEach(t),oVo=i(j),mv=n(j,"LI",{});var lPe=s(mv);M_e=n(lPe,"STRONG",{});var a8t=s(M_e);rVo=r(a8t,"gpt2"),a8t.forEach(t),tVo=r(lPe," \u2014 "),FX=n(lPe,"A",{href:!0});var n8t=s(FX);aVo=r(n8t,"GPT2ForSequenceClassification"),n8t.forEach(t),nVo=r(lPe," (OpenAI GPT-2 model)"),lPe.forEach(t),sVo=i(j),gv=n(j,"LI",{});var iPe=s(gv);E_e=n(iPe,"STRONG",{});var s8t=s(E_e);lVo=r(s8t,"gpt_neo"),s8t.forEach(t),iVo=r(iPe," \u2014 "),TX=n(iPe,"A",{href:!0});var l8t=s(TX);dVo=r(l8t,"GPTNeoForSequenceClassification"),l8t.forEach(t),cVo=r(iPe," (GPT Neo model)"),iPe.forEach(t),fVo=i(j),hv=n(j,"LI",{});var dPe=s(hv);C_e=n(dPe,"STRONG",{});var i8t=s(C_e);mVo=r(i8t,"gptj"),i8t.forEach(t),gVo=r(dPe," \u2014 "),MX=n(dPe,"A",{href:!0});var d8t=s(MX);hVo=r(d8t,"GPTJForSequenceClassification"),d8t.forEach(t),pVo=r(dPe," (GPT-J model)"),dPe.forEach(t),_Vo=i(j),pv=n(j,"LI",{});var cPe=s(pv);w_e=n(cPe,"STRONG",{});var c8t=s(w_e);uVo=r(c8t,"ibert"),c8t.forEach(t),bVo=r(cPe," \u2014 "),EX=n(cPe,"A",{href:!0});var f8t=s(EX);vVo=r(f8t,"IBertForSequenceClassification"),f8t.forEach(t),FVo=r(cPe," (I-BERT model)"),cPe.forEach(t),TVo=i(j),_v=n(j,"LI",{});var fPe=s(_v);A_e=n(fPe,"STRONG",{});var m8t=s(A_e);MVo=r(m8t,"layoutlm"),m8t.forEach(t),EVo=r(fPe," \u2014 "),CX=n(fPe,"A",{href:!0});var g8t=s(CX);CVo=r(g8t,"LayoutLMForSequenceClassification"),g8t.forEach(t),wVo=r(fPe," (LayoutLM model)"),fPe.forEach(t),AVo=i(j),uv=n(j,"LI",{});var mPe=s(uv);L_e=n(mPe,"STRONG",{});var h8t=s(L_e);LVo=r(h8t,"layoutlmv2"),h8t.forEach(t),yVo=r(mPe," \u2014 "),wX=n(mPe,"A",{href:!0});var p8t=s(wX);xVo=r(p8t,"LayoutLMv2ForSequenceClassification"),p8t.forEach(t),$Vo=r(mPe," (LayoutLMv2 model)"),mPe.forEach(t),kVo=i(j),bv=n(j,"LI",{});var gPe=s(bv);y_e=n(gPe,"STRONG",{});var _8t=s(y_e);SVo=r(_8t,"layoutlmv3"),_8t.forEach(t),RVo=r(gPe," \u2014 "),AX=n(gPe,"A",{href:!0});var u8t=s(AX);PVo=r(u8t,"LayoutLMv3ForSequenceClassification"),u8t.forEach(t),BVo=r(gPe," (LayoutLMv3 model)"),gPe.forEach(t),IVo=i(j),vv=n(j,"LI",{});var hPe=s(vv);x_e=n(hPe,"STRONG",{});var b8t=s(x_e);NVo=r(b8t,"led"),b8t.forEach(t),qVo=r(hPe," \u2014 "),LX=n(hPe,"A",{href:!0});var v8t=s(LX);jVo=r(v8t,"LEDForSequenceClassification"),v8t.forEach(t),DVo=r(hPe," (LED model)"),hPe.forEach(t),GVo=i(j),Fv=n(j,"LI",{});var pPe=s(Fv);$_e=n(pPe,"STRONG",{});var F8t=s($_e);OVo=r(F8t,"longformer"),F8t.forEach(t),VVo=r(pPe," \u2014 "),yX=n(pPe,"A",{href:!0});var T8t=s(yX);XVo=r(T8t,"LongformerForSequenceClassification"),T8t.forEach(t),zVo=r(pPe," (Longformer model)"),pPe.forEach(t),WVo=i(j),Tv=n(j,"LI",{});var _Pe=s(Tv);k_e=n(_Pe,"STRONG",{});var M8t=s(k_e);QVo=r(M8t,"mbart"),M8t.forEach(t),HVo=r(_Pe," \u2014 "),xX=n(_Pe,"A",{href:!0});var E8t=s(xX);UVo=r(E8t,"MBartForSequenceClassification"),E8t.forEach(t),JVo=r(_Pe," (mBART model)"),_Pe.forEach(t),YVo=i(j),Mv=n(j,"LI",{});var uPe=s(Mv);S_e=n(uPe,"STRONG",{});var C8t=s(S_e);KVo=r(C8t,"megatron-bert"),C8t.forEach(t),ZVo=r(uPe," \u2014 "),$X=n(uPe,"A",{href:!0});var w8t=s($X);eXo=r(w8t,"MegatronBertForSequenceClassification"),w8t.forEach(t),oXo=r(uPe," (Megatron-BERT model)"),uPe.forEach(t),rXo=i(j),Ev=n(j,"LI",{});var bPe=s(Ev);R_e=n(bPe,"STRONG",{});var A8t=s(R_e);tXo=r(A8t,"mobilebert"),A8t.forEach(t),aXo=r(bPe," \u2014 "),kX=n(bPe,"A",{href:!0});var L8t=s(kX);nXo=r(L8t,"MobileBertForSequenceClassification"),L8t.forEach(t),sXo=r(bPe," (MobileBERT model)"),bPe.forEach(t),lXo=i(j),Cv=n(j,"LI",{});var vPe=s(Cv);P_e=n(vPe,"STRONG",{});var y8t=s(P_e);iXo=r(y8t,"mpnet"),y8t.forEach(t),dXo=r(vPe," \u2014 "),SX=n(vPe,"A",{href:!0});var x8t=s(SX);cXo=r(x8t,"MPNetForSequenceClassification"),x8t.forEach(t),fXo=r(vPe," (MPNet model)"),vPe.forEach(t),mXo=i(j),wv=n(j,"LI",{});var FPe=s(wv);B_e=n(FPe,"STRONG",{});var $8t=s(B_e);gXo=r($8t,"mvp"),$8t.forEach(t),hXo=r(FPe," \u2014 "),RX=n(FPe,"A",{href:!0});var k8t=s(RX);pXo=r(k8t,"MvpForSequenceClassification"),k8t.forEach(t),_Xo=r(FPe," (MVP model)"),FPe.forEach(t),uXo=i(j),Av=n(j,"LI",{});var TPe=s(Av);I_e=n(TPe,"STRONG",{});var S8t=s(I_e);bXo=r(S8t,"nezha"),S8t.forEach(t),vXo=r(TPe," \u2014 "),PX=n(TPe,"A",{href:!0});var R8t=s(PX);FXo=r(R8t,"NezhaForSequenceClassification"),R8t.forEach(t),TXo=r(TPe," (Nezha model)"),TPe.forEach(t),MXo=i(j),Lv=n(j,"LI",{});var MPe=s(Lv);N_e=n(MPe,"STRONG",{});var P8t=s(N_e);EXo=r(P8t,"nystromformer"),P8t.forEach(t),CXo=r(MPe," \u2014 "),BX=n(MPe,"A",{href:!0});var B8t=s(BX);wXo=r(B8t,"NystromformerForSequenceClassification"),B8t.forEach(t),AXo=r(MPe," (Nystr\xF6mformer model)"),MPe.forEach(t),LXo=i(j),yv=n(j,"LI",{});var EPe=s(yv);q_e=n(EPe,"STRONG",{});var I8t=s(q_e);yXo=r(I8t,"openai-gpt"),I8t.forEach(t),xXo=r(EPe," \u2014 "),IX=n(EPe,"A",{href:!0});var N8t=s(IX);$Xo=r(N8t,"OpenAIGPTForSequenceClassification"),N8t.forEach(t),kXo=r(EPe," (OpenAI GPT model)"),EPe.forEach(t),SXo=i(j),xv=n(j,"LI",{});var CPe=s(xv);j_e=n(CPe,"STRONG",{});var q8t=s(j_e);RXo=r(q8t,"perceiver"),q8t.forEach(t),PXo=r(CPe," \u2014 "),NX=n(CPe,"A",{href:!0});var j8t=s(NX);BXo=r(j8t,"PerceiverForSequenceClassification"),j8t.forEach(t),IXo=r(CPe," (Perceiver model)"),CPe.forEach(t),NXo=i(j),$v=n(j,"LI",{});var wPe=s($v);D_e=n(wPe,"STRONG",{});var D8t=s(D_e);qXo=r(D8t,"plbart"),D8t.forEach(t),jXo=r(wPe," \u2014 "),qX=n(wPe,"A",{href:!0});var G8t=s(qX);DXo=r(G8t,"PLBartForSequenceClassification"),G8t.forEach(t),GXo=r(wPe," (PLBart model)"),wPe.forEach(t),OXo=i(j),kv=n(j,"LI",{});var APe=s(kv);G_e=n(APe,"STRONG",{});var O8t=s(G_e);VXo=r(O8t,"qdqbert"),O8t.forEach(t),XXo=r(APe," \u2014 "),jX=n(APe,"A",{href:!0});var V8t=s(jX);zXo=r(V8t,"QDQBertForSequenceClassification"),V8t.forEach(t),WXo=r(APe," (QDQBert model)"),APe.forEach(t),QXo=i(j),Sv=n(j,"LI",{});var LPe=s(Sv);O_e=n(LPe,"STRONG",{});var X8t=s(O_e);HXo=r(X8t,"reformer"),X8t.forEach(t),UXo=r(LPe," \u2014 "),DX=n(LPe,"A",{href:!0});var z8t=s(DX);JXo=r(z8t,"ReformerForSequenceClassification"),z8t.forEach(t),YXo=r(LPe," (Reformer model)"),LPe.forEach(t),KXo=i(j),Rv=n(j,"LI",{});var yPe=s(Rv);V_e=n(yPe,"STRONG",{});var W8t=s(V_e);ZXo=r(W8t,"rembert"),W8t.forEach(t),ezo=r(yPe," \u2014 "),GX=n(yPe,"A",{href:!0});var Q8t=s(GX);ozo=r(Q8t,"RemBertForSequenceClassification"),Q8t.forEach(t),rzo=r(yPe," (RemBERT model)"),yPe.forEach(t),tzo=i(j),Pv=n(j,"LI",{});var xPe=s(Pv);X_e=n(xPe,"STRONG",{});var H8t=s(X_e);azo=r(H8t,"roberta"),H8t.forEach(t),nzo=r(xPe," \u2014 "),OX=n(xPe,"A",{href:!0});var U8t=s(OX);szo=r(U8t,"RobertaForSequenceClassification"),U8t.forEach(t),lzo=r(xPe," (RoBERTa model)"),xPe.forEach(t),izo=i(j),Bv=n(j,"LI",{});var $Pe=s(Bv);z_e=n($Pe,"STRONG",{});var J8t=s(z_e);dzo=r(J8t,"roformer"),J8t.forEach(t),czo=r($Pe," \u2014 "),VX=n($Pe,"A",{href:!0});var Y8t=s(VX);fzo=r(Y8t,"RoFormerForSequenceClassification"),Y8t.forEach(t),mzo=r($Pe," (RoFormer model)"),$Pe.forEach(t),gzo=i(j),Iv=n(j,"LI",{});var kPe=s(Iv);W_e=n(kPe,"STRONG",{});var K8t=s(W_e);hzo=r(K8t,"squeezebert"),K8t.forEach(t),pzo=r(kPe," \u2014 "),XX=n(kPe,"A",{href:!0});var Z8t=s(XX);_zo=r(Z8t,"SqueezeBertForSequenceClassification"),Z8t.forEach(t),uzo=r(kPe," (SqueezeBERT model)"),kPe.forEach(t),bzo=i(j),Nv=n(j,"LI",{});var SPe=s(Nv);Q_e=n(SPe,"STRONG",{});var e9t=s(Q_e);vzo=r(e9t,"tapas"),e9t.forEach(t),Fzo=r(SPe," \u2014 "),zX=n(SPe,"A",{href:!0});var o9t=s(zX);Tzo=r(o9t,"TapasForSequenceClassification"),o9t.forEach(t),Mzo=r(SPe," (TAPAS model)"),SPe.forEach(t),Ezo=i(j),qv=n(j,"LI",{});var RPe=s(qv);H_e=n(RPe,"STRONG",{});var r9t=s(H_e);Czo=r(r9t,"transfo-xl"),r9t.forEach(t),wzo=r(RPe," \u2014 "),WX=n(RPe,"A",{href:!0});var t9t=s(WX);Azo=r(t9t,"TransfoXLForSequenceClassification"),t9t.forEach(t),Lzo=r(RPe," (Transformer-XL model)"),RPe.forEach(t),yzo=i(j),jv=n(j,"LI",{});var PPe=s(jv);U_e=n(PPe,"STRONG",{});var a9t=s(U_e);xzo=r(a9t,"xlm"),a9t.forEach(t),$zo=r(PPe," \u2014 "),QX=n(PPe,"A",{href:!0});var n9t=s(QX);kzo=r(n9t,"XLMForSequenceClassification"),n9t.forEach(t),Szo=r(PPe," (XLM model)"),PPe.forEach(t),Rzo=i(j),Dv=n(j,"LI",{});var BPe=s(Dv);J_e=n(BPe,"STRONG",{});var s9t=s(J_e);Pzo=r(s9t,"xlm-roberta"),s9t.forEach(t),Bzo=r(BPe," \u2014 "),HX=n(BPe,"A",{href:!0});var l9t=s(HX);Izo=r(l9t,"XLMRobertaForSequenceClassification"),l9t.forEach(t),Nzo=r(BPe," (XLM-RoBERTa model)"),BPe.forEach(t),qzo=i(j),Gv=n(j,"LI",{});var IPe=s(Gv);Y_e=n(IPe,"STRONG",{});var i9t=s(Y_e);jzo=r(i9t,"xlm-roberta-xl"),i9t.forEach(t),Dzo=r(IPe," \u2014 "),UX=n(IPe,"A",{href:!0});var d9t=s(UX);Gzo=r(d9t,"XLMRobertaXLForSequenceClassification"),d9t.forEach(t),Ozo=r(IPe," (XLM-RoBERTa-XL model)"),IPe.forEach(t),Vzo=i(j),Ov=n(j,"LI",{});var NPe=s(Ov);K_e=n(NPe,"STRONG",{});var c9t=s(K_e);Xzo=r(c9t,"xlnet"),c9t.forEach(t),zzo=r(NPe," \u2014 "),JX=n(NPe,"A",{href:!0});var f9t=s(JX);Wzo=r(f9t,"XLNetForSequenceClassification"),f9t.forEach(t),Qzo=r(NPe," (XLNet model)"),NPe.forEach(t),Hzo=i(j),Vv=n(j,"LI",{});var qPe=s(Vv);Z_e=n(qPe,"STRONG",{});var m9t=s(Z_e);Uzo=r(m9t,"yoso"),m9t.forEach(t),Jzo=r(qPe," \u2014 "),YX=n(qPe,"A",{href:!0});var g9t=s(YX);Yzo=r(g9t,"YosoForSequenceClassification"),g9t.forEach(t),Kzo=r(qPe," (YOSO model)"),qPe.forEach(t),j.forEach(t),Zzo=i(fa),Xv=n(fa,"P",{});var jPe=s(Xv);eWo=r(jPe,"The model is set in evaluation mode by default using "),eue=n(jPe,"CODE",{});var h9t=s(eue);oWo=r(h9t,"model.eval()"),h9t.forEach(t),rWo=r(jPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oue=n(jPe,"CODE",{});var p9t=s(oue);tWo=r(p9t,"model.train()"),p9t.forEach(t),jPe.forEach(t),aWo=i(fa),T(zv.$$.fragment,fa),fa.forEach(t),ll.forEach(t),PXe=i(f),nd=n(f,"H2",{class:!0});var DWe=s(nd);Wv=n(DWe,"A",{id:!0,class:!0,href:!0});var _9t=s(Wv);rue=n(_9t,"SPAN",{});var u9t=s(rue);T(dL.$$.fragment,u9t),u9t.forEach(t),_9t.forEach(t),nWo=i(DWe),tue=n(DWe,"SPAN",{});var b9t=s(tue);sWo=r(b9t,"AutoModelForMultipleChoice"),b9t.forEach(t),DWe.forEach(t),BXe=i(f),Bo=n(f,"DIV",{class:!0});var il=s(Bo);T(cL.$$.fragment,il),lWo=i(il),sd=n(il,"P",{});var Ure=s(sd);iWo=r(Ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),KX=n(Ure,"A",{href:!0});var v9t=s(KX);dWo=r(v9t,"from_pretrained()"),v9t.forEach(t),cWo=r(Ure," class method or the "),ZX=n(Ure,"A",{href:!0});var F9t=s(ZX);fWo=r(F9t,"from_config()"),F9t.forEach(t),mWo=r(Ure,` class
method.`),Ure.forEach(t),gWo=i(il),fL=n(il,"P",{});var GWe=s(fL);hWo=r(GWe,"This class cannot be instantiated directly using "),aue=n(GWe,"CODE",{});var T9t=s(aue);pWo=r(T9t,"__init__()"),T9t.forEach(t),_Wo=r(GWe," (throws an error)."),GWe.forEach(t),uWo=i(il),gt=n(il,"DIV",{class:!0});var Ew=s(gt);T(mL.$$.fragment,Ew),bWo=i(Ew),nue=n(Ew,"P",{});var M9t=s(nue);vWo=r(M9t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),M9t.forEach(t),FWo=i(Ew),ld=n(Ew,"P",{});var Jre=s(ld);TWo=r(Jre,`Note:
Loading a model from its configuration file does `),sue=n(Jre,"STRONG",{});var E9t=s(sue);MWo=r(E9t,"not"),E9t.forEach(t),EWo=r(Jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),ez=n(Jre,"A",{href:!0});var C9t=s(ez);CWo=r(C9t,"from_pretrained()"),C9t.forEach(t),wWo=r(Jre," to load the model weights."),Jre.forEach(t),AWo=i(Ew),T(Qv.$$.fragment,Ew),Ew.forEach(t),LWo=i(il),ro=n(il,"DIV",{class:!0});var ma=s(ro);T(gL.$$.fragment,ma),yWo=i(ma),lue=n(ma,"P",{});var w9t=s(lue);xWo=r(w9t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),w9t.forEach(t),$Wo=i(ma),Oa=n(ma,"P",{});var Cw=s(Oa);kWo=r(Cw,"The model class to instantiate is selected based on the "),iue=n(Cw,"CODE",{});var A9t=s(iue);SWo=r(A9t,"model_type"),A9t.forEach(t),RWo=r(Cw,` property of the config object (either
passed as an argument or loaded from `),due=n(Cw,"CODE",{});var L9t=s(due);PWo=r(L9t,"pretrained_model_name_or_path"),L9t.forEach(t),BWo=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cue=n(Cw,"CODE",{});var y9t=s(cue);IWo=r(y9t,"pretrained_model_name_or_path"),y9t.forEach(t),NWo=r(Cw,":"),Cw.forEach(t),qWo=i(ma),Z=n(ma,"UL",{});var ee=s(Z);Hv=n(ee,"LI",{});var DPe=s(Hv);fue=n(DPe,"STRONG",{});var x9t=s(fue);jWo=r(x9t,"albert"),x9t.forEach(t),DWo=r(DPe," \u2014 "),oz=n(DPe,"A",{href:!0});var $9t=s(oz);GWo=r($9t,"AlbertForMultipleChoice"),$9t.forEach(t),OWo=r(DPe," (ALBERT model)"),DPe.forEach(t),VWo=i(ee),Uv=n(ee,"LI",{});var GPe=s(Uv);mue=n(GPe,"STRONG",{});var k9t=s(mue);XWo=r(k9t,"bert"),k9t.forEach(t),zWo=r(GPe," \u2014 "),rz=n(GPe,"A",{href:!0});var S9t=s(rz);WWo=r(S9t,"BertForMultipleChoice"),S9t.forEach(t),QWo=r(GPe," (BERT model)"),GPe.forEach(t),HWo=i(ee),Jv=n(ee,"LI",{});var OPe=s(Jv);gue=n(OPe,"STRONG",{});var R9t=s(gue);UWo=r(R9t,"big_bird"),R9t.forEach(t),JWo=r(OPe," \u2014 "),tz=n(OPe,"A",{href:!0});var P9t=s(tz);YWo=r(P9t,"BigBirdForMultipleChoice"),P9t.forEach(t),KWo=r(OPe," (BigBird model)"),OPe.forEach(t),ZWo=i(ee),Yv=n(ee,"LI",{});var VPe=s(Yv);hue=n(VPe,"STRONG",{});var B9t=s(hue);eQo=r(B9t,"camembert"),B9t.forEach(t),oQo=r(VPe," \u2014 "),az=n(VPe,"A",{href:!0});var I9t=s(az);rQo=r(I9t,"CamembertForMultipleChoice"),I9t.forEach(t),tQo=r(VPe," (CamemBERT model)"),VPe.forEach(t),aQo=i(ee),Kv=n(ee,"LI",{});var XPe=s(Kv);pue=n(XPe,"STRONG",{});var N9t=s(pue);nQo=r(N9t,"canine"),N9t.forEach(t),sQo=r(XPe," \u2014 "),nz=n(XPe,"A",{href:!0});var q9t=s(nz);lQo=r(q9t,"CanineForMultipleChoice"),q9t.forEach(t),iQo=r(XPe," (CANINE model)"),XPe.forEach(t),dQo=i(ee),Zv=n(ee,"LI",{});var zPe=s(Zv);_ue=n(zPe,"STRONG",{});var j9t=s(_ue);cQo=r(j9t,"convbert"),j9t.forEach(t),fQo=r(zPe," \u2014 "),sz=n(zPe,"A",{href:!0});var D9t=s(sz);mQo=r(D9t,"ConvBertForMultipleChoice"),D9t.forEach(t),gQo=r(zPe," (ConvBERT model)"),zPe.forEach(t),hQo=i(ee),e3=n(ee,"LI",{});var WPe=s(e3);uue=n(WPe,"STRONG",{});var G9t=s(uue);pQo=r(G9t,"data2vec-text"),G9t.forEach(t),_Qo=r(WPe," \u2014 "),lz=n(WPe,"A",{href:!0});var O9t=s(lz);uQo=r(O9t,"Data2VecTextForMultipleChoice"),O9t.forEach(t),bQo=r(WPe," (Data2VecText model)"),WPe.forEach(t),vQo=i(ee),o3=n(ee,"LI",{});var QPe=s(o3);bue=n(QPe,"STRONG",{});var V9t=s(bue);FQo=r(V9t,"deberta-v2"),V9t.forEach(t),TQo=r(QPe," \u2014 "),iz=n(QPe,"A",{href:!0});var X9t=s(iz);MQo=r(X9t,"DebertaV2ForMultipleChoice"),X9t.forEach(t),EQo=r(QPe," (DeBERTa-v2 model)"),QPe.forEach(t),CQo=i(ee),r3=n(ee,"LI",{});var HPe=s(r3);vue=n(HPe,"STRONG",{});var z9t=s(vue);wQo=r(z9t,"distilbert"),z9t.forEach(t),AQo=r(HPe," \u2014 "),dz=n(HPe,"A",{href:!0});var W9t=s(dz);LQo=r(W9t,"DistilBertForMultipleChoice"),W9t.forEach(t),yQo=r(HPe," (DistilBERT model)"),HPe.forEach(t),xQo=i(ee),t3=n(ee,"LI",{});var UPe=s(t3);Fue=n(UPe,"STRONG",{});var Q9t=s(Fue);$Qo=r(Q9t,"electra"),Q9t.forEach(t),kQo=r(UPe," \u2014 "),cz=n(UPe,"A",{href:!0});var H9t=s(cz);SQo=r(H9t,"ElectraForMultipleChoice"),H9t.forEach(t),RQo=r(UPe," (ELECTRA model)"),UPe.forEach(t),PQo=i(ee),a3=n(ee,"LI",{});var JPe=s(a3);Tue=n(JPe,"STRONG",{});var U9t=s(Tue);BQo=r(U9t,"flaubert"),U9t.forEach(t),IQo=r(JPe," \u2014 "),fz=n(JPe,"A",{href:!0});var J9t=s(fz);NQo=r(J9t,"FlaubertForMultipleChoice"),J9t.forEach(t),qQo=r(JPe," (FlauBERT model)"),JPe.forEach(t),jQo=i(ee),n3=n(ee,"LI",{});var YPe=s(n3);Mue=n(YPe,"STRONG",{});var Y9t=s(Mue);DQo=r(Y9t,"fnet"),Y9t.forEach(t),GQo=r(YPe," \u2014 "),mz=n(YPe,"A",{href:!0});var K9t=s(mz);OQo=r(K9t,"FNetForMultipleChoice"),K9t.forEach(t),VQo=r(YPe," (FNet model)"),YPe.forEach(t),XQo=i(ee),s3=n(ee,"LI",{});var KPe=s(s3);Eue=n(KPe,"STRONG",{});var Z9t=s(Eue);zQo=r(Z9t,"funnel"),Z9t.forEach(t),WQo=r(KPe," \u2014 "),gz=n(KPe,"A",{href:!0});var eMt=s(gz);QQo=r(eMt,"FunnelForMultipleChoice"),eMt.forEach(t),HQo=r(KPe," (Funnel Transformer model)"),KPe.forEach(t),UQo=i(ee),l3=n(ee,"LI",{});var ZPe=s(l3);Cue=n(ZPe,"STRONG",{});var oMt=s(Cue);JQo=r(oMt,"ibert"),oMt.forEach(t),YQo=r(ZPe," \u2014 "),hz=n(ZPe,"A",{href:!0});var rMt=s(hz);KQo=r(rMt,"IBertForMultipleChoice"),rMt.forEach(t),ZQo=r(ZPe," (I-BERT model)"),ZPe.forEach(t),eHo=i(ee),i3=n(ee,"LI",{});var eBe=s(i3);wue=n(eBe,"STRONG",{});var tMt=s(wue);oHo=r(tMt,"longformer"),tMt.forEach(t),rHo=r(eBe," \u2014 "),pz=n(eBe,"A",{href:!0});var aMt=s(pz);tHo=r(aMt,"LongformerForMultipleChoice"),aMt.forEach(t),aHo=r(eBe," (Longformer model)"),eBe.forEach(t),nHo=i(ee),d3=n(ee,"LI",{});var oBe=s(d3);Aue=n(oBe,"STRONG",{});var nMt=s(Aue);sHo=r(nMt,"megatron-bert"),nMt.forEach(t),lHo=r(oBe," \u2014 "),_z=n(oBe,"A",{href:!0});var sMt=s(_z);iHo=r(sMt,"MegatronBertForMultipleChoice"),sMt.forEach(t),dHo=r(oBe," (Megatron-BERT model)"),oBe.forEach(t),cHo=i(ee),c3=n(ee,"LI",{});var rBe=s(c3);Lue=n(rBe,"STRONG",{});var lMt=s(Lue);fHo=r(lMt,"mobilebert"),lMt.forEach(t),mHo=r(rBe," \u2014 "),uz=n(rBe,"A",{href:!0});var iMt=s(uz);gHo=r(iMt,"MobileBertForMultipleChoice"),iMt.forEach(t),hHo=r(rBe," (MobileBERT model)"),rBe.forEach(t),pHo=i(ee),f3=n(ee,"LI",{});var tBe=s(f3);yue=n(tBe,"STRONG",{});var dMt=s(yue);_Ho=r(dMt,"mpnet"),dMt.forEach(t),uHo=r(tBe," \u2014 "),bz=n(tBe,"A",{href:!0});var cMt=s(bz);bHo=r(cMt,"MPNetForMultipleChoice"),cMt.forEach(t),vHo=r(tBe," (MPNet model)"),tBe.forEach(t),FHo=i(ee),m3=n(ee,"LI",{});var aBe=s(m3);xue=n(aBe,"STRONG",{});var fMt=s(xue);THo=r(fMt,"nezha"),fMt.forEach(t),MHo=r(aBe," \u2014 "),vz=n(aBe,"A",{href:!0});var mMt=s(vz);EHo=r(mMt,"NezhaForMultipleChoice"),mMt.forEach(t),CHo=r(aBe," (Nezha model)"),aBe.forEach(t),wHo=i(ee),g3=n(ee,"LI",{});var nBe=s(g3);$ue=n(nBe,"STRONG",{});var gMt=s($ue);AHo=r(gMt,"nystromformer"),gMt.forEach(t),LHo=r(nBe," \u2014 "),Fz=n(nBe,"A",{href:!0});var hMt=s(Fz);yHo=r(hMt,"NystromformerForMultipleChoice"),hMt.forEach(t),xHo=r(nBe," (Nystr\xF6mformer model)"),nBe.forEach(t),$Ho=i(ee),h3=n(ee,"LI",{});var sBe=s(h3);kue=n(sBe,"STRONG",{});var pMt=s(kue);kHo=r(pMt,"qdqbert"),pMt.forEach(t),SHo=r(sBe," \u2014 "),Tz=n(sBe,"A",{href:!0});var _Mt=s(Tz);RHo=r(_Mt,"QDQBertForMultipleChoice"),_Mt.forEach(t),PHo=r(sBe," (QDQBert model)"),sBe.forEach(t),BHo=i(ee),p3=n(ee,"LI",{});var lBe=s(p3);Sue=n(lBe,"STRONG",{});var uMt=s(Sue);IHo=r(uMt,"rembert"),uMt.forEach(t),NHo=r(lBe," \u2014 "),Mz=n(lBe,"A",{href:!0});var bMt=s(Mz);qHo=r(bMt,"RemBertForMultipleChoice"),bMt.forEach(t),jHo=r(lBe," (RemBERT model)"),lBe.forEach(t),DHo=i(ee),_3=n(ee,"LI",{});var iBe=s(_3);Rue=n(iBe,"STRONG",{});var vMt=s(Rue);GHo=r(vMt,"roberta"),vMt.forEach(t),OHo=r(iBe," \u2014 "),Ez=n(iBe,"A",{href:!0});var FMt=s(Ez);VHo=r(FMt,"RobertaForMultipleChoice"),FMt.forEach(t),XHo=r(iBe," (RoBERTa model)"),iBe.forEach(t),zHo=i(ee),u3=n(ee,"LI",{});var dBe=s(u3);Pue=n(dBe,"STRONG",{});var TMt=s(Pue);WHo=r(TMt,"roformer"),TMt.forEach(t),QHo=r(dBe," \u2014 "),Cz=n(dBe,"A",{href:!0});var MMt=s(Cz);HHo=r(MMt,"RoFormerForMultipleChoice"),MMt.forEach(t),UHo=r(dBe," (RoFormer model)"),dBe.forEach(t),JHo=i(ee),b3=n(ee,"LI",{});var cBe=s(b3);Bue=n(cBe,"STRONG",{});var EMt=s(Bue);YHo=r(EMt,"squeezebert"),EMt.forEach(t),KHo=r(cBe," \u2014 "),wz=n(cBe,"A",{href:!0});var CMt=s(wz);ZHo=r(CMt,"SqueezeBertForMultipleChoice"),CMt.forEach(t),eUo=r(cBe," (SqueezeBERT model)"),cBe.forEach(t),oUo=i(ee),v3=n(ee,"LI",{});var fBe=s(v3);Iue=n(fBe,"STRONG",{});var wMt=s(Iue);rUo=r(wMt,"xlm"),wMt.forEach(t),tUo=r(fBe," \u2014 "),Az=n(fBe,"A",{href:!0});var AMt=s(Az);aUo=r(AMt,"XLMForMultipleChoice"),AMt.forEach(t),nUo=r(fBe," (XLM model)"),fBe.forEach(t),sUo=i(ee),F3=n(ee,"LI",{});var mBe=s(F3);Nue=n(mBe,"STRONG",{});var LMt=s(Nue);lUo=r(LMt,"xlm-roberta"),LMt.forEach(t),iUo=r(mBe," \u2014 "),Lz=n(mBe,"A",{href:!0});var yMt=s(Lz);dUo=r(yMt,"XLMRobertaForMultipleChoice"),yMt.forEach(t),cUo=r(mBe," (XLM-RoBERTa model)"),mBe.forEach(t),fUo=i(ee),T3=n(ee,"LI",{});var gBe=s(T3);que=n(gBe,"STRONG",{});var xMt=s(que);mUo=r(xMt,"xlm-roberta-xl"),xMt.forEach(t),gUo=r(gBe," \u2014 "),yz=n(gBe,"A",{href:!0});var $Mt=s(yz);hUo=r($Mt,"XLMRobertaXLForMultipleChoice"),$Mt.forEach(t),pUo=r(gBe," (XLM-RoBERTa-XL model)"),gBe.forEach(t),_Uo=i(ee),M3=n(ee,"LI",{});var hBe=s(M3);jue=n(hBe,"STRONG",{});var kMt=s(jue);uUo=r(kMt,"xlnet"),kMt.forEach(t),bUo=r(hBe," \u2014 "),xz=n(hBe,"A",{href:!0});var SMt=s(xz);vUo=r(SMt,"XLNetForMultipleChoice"),SMt.forEach(t),FUo=r(hBe," (XLNet model)"),hBe.forEach(t),TUo=i(ee),E3=n(ee,"LI",{});var pBe=s(E3);Due=n(pBe,"STRONG",{});var RMt=s(Due);MUo=r(RMt,"yoso"),RMt.forEach(t),EUo=r(pBe," \u2014 "),$z=n(pBe,"A",{href:!0});var PMt=s($z);CUo=r(PMt,"YosoForMultipleChoice"),PMt.forEach(t),wUo=r(pBe," (YOSO model)"),pBe.forEach(t),ee.forEach(t),AUo=i(ma),C3=n(ma,"P",{});var _Be=s(C3);LUo=r(_Be,"The model is set in evaluation mode by default using "),Gue=n(_Be,"CODE",{});var BMt=s(Gue);yUo=r(BMt,"model.eval()"),BMt.forEach(t),xUo=r(_Be,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oue=n(_Be,"CODE",{});var IMt=s(Oue);$Uo=r(IMt,"model.train()"),IMt.forEach(t),_Be.forEach(t),kUo=i(ma),T(w3.$$.fragment,ma),ma.forEach(t),il.forEach(t),IXe=i(f),id=n(f,"H2",{class:!0});var OWe=s(id);A3=n(OWe,"A",{id:!0,class:!0,href:!0});var NMt=s(A3);Vue=n(NMt,"SPAN",{});var qMt=s(Vue);T(hL.$$.fragment,qMt),qMt.forEach(t),NMt.forEach(t),SUo=i(OWe),Xue=n(OWe,"SPAN",{});var jMt=s(Xue);RUo=r(jMt,"AutoModelForNextSentencePrediction"),jMt.forEach(t),OWe.forEach(t),NXe=i(f),Io=n(f,"DIV",{class:!0});var dl=s(Io);T(pL.$$.fragment,dl),PUo=i(dl),dd=n(dl,"P",{});var Yre=s(dd);BUo=r(Yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kz=n(Yre,"A",{href:!0});var DMt=s(kz);IUo=r(DMt,"from_pretrained()"),DMt.forEach(t),NUo=r(Yre," class method or the "),Sz=n(Yre,"A",{href:!0});var GMt=s(Sz);qUo=r(GMt,"from_config()"),GMt.forEach(t),jUo=r(Yre,` class
method.`),Yre.forEach(t),DUo=i(dl),_L=n(dl,"P",{});var VWe=s(_L);GUo=r(VWe,"This class cannot be instantiated directly using "),zue=n(VWe,"CODE",{});var OMt=s(zue);OUo=r(OMt,"__init__()"),OMt.forEach(t),VUo=r(VWe," (throws an error)."),VWe.forEach(t),XUo=i(dl),ht=n(dl,"DIV",{class:!0});var ww=s(ht);T(uL.$$.fragment,ww),zUo=i(ww),Wue=n(ww,"P",{});var VMt=s(Wue);WUo=r(VMt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),VMt.forEach(t),QUo=i(ww),cd=n(ww,"P",{});var Kre=s(cd);HUo=r(Kre,`Note:
Loading a model from its configuration file does `),Que=n(Kre,"STRONG",{});var XMt=s(Que);UUo=r(XMt,"not"),XMt.forEach(t),JUo=r(Kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rz=n(Kre,"A",{href:!0});var zMt=s(Rz);YUo=r(zMt,"from_pretrained()"),zMt.forEach(t),KUo=r(Kre," to load the model weights."),Kre.forEach(t),ZUo=i(ww),T(L3.$$.fragment,ww),ww.forEach(t),eJo=i(dl),to=n(dl,"DIV",{class:!0});var ga=s(to);T(bL.$$.fragment,ga),oJo=i(ga),Hue=n(ga,"P",{});var WMt=s(Hue);rJo=r(WMt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),WMt.forEach(t),tJo=i(ga),Va=n(ga,"P",{});var Aw=s(Va);aJo=r(Aw,"The model class to instantiate is selected based on the "),Uue=n(Aw,"CODE",{});var QMt=s(Uue);nJo=r(QMt,"model_type"),QMt.forEach(t),sJo=r(Aw,` property of the config object (either
passed as an argument or loaded from `),Jue=n(Aw,"CODE",{});var HMt=s(Jue);lJo=r(HMt,"pretrained_model_name_or_path"),HMt.forEach(t),iJo=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yue=n(Aw,"CODE",{});var UMt=s(Yue);dJo=r(UMt,"pretrained_model_name_or_path"),UMt.forEach(t),cJo=r(Aw,":"),Aw.forEach(t),fJo=i(ga),No=n(ga,"UL",{});var ha=s(No);y3=n(ha,"LI",{});var uBe=s(y3);Kue=n(uBe,"STRONG",{});var JMt=s(Kue);mJo=r(JMt,"bert"),JMt.forEach(t),gJo=r(uBe," \u2014 "),Pz=n(uBe,"A",{href:!0});var YMt=s(Pz);hJo=r(YMt,"BertForNextSentencePrediction"),YMt.forEach(t),pJo=r(uBe," (BERT model)"),uBe.forEach(t),_Jo=i(ha),x3=n(ha,"LI",{});var bBe=s(x3);Zue=n(bBe,"STRONG",{});var KMt=s(Zue);uJo=r(KMt,"fnet"),KMt.forEach(t),bJo=r(bBe," \u2014 "),Bz=n(bBe,"A",{href:!0});var ZMt=s(Bz);vJo=r(ZMt,"FNetForNextSentencePrediction"),ZMt.forEach(t),FJo=r(bBe," (FNet model)"),bBe.forEach(t),TJo=i(ha),$3=n(ha,"LI",{});var vBe=s($3);e1e=n(vBe,"STRONG",{});var e4t=s(e1e);MJo=r(e4t,"megatron-bert"),e4t.forEach(t),EJo=r(vBe," \u2014 "),Iz=n(vBe,"A",{href:!0});var o4t=s(Iz);CJo=r(o4t,"MegatronBertForNextSentencePrediction"),o4t.forEach(t),wJo=r(vBe," (Megatron-BERT model)"),vBe.forEach(t),AJo=i(ha),k3=n(ha,"LI",{});var FBe=s(k3);o1e=n(FBe,"STRONG",{});var r4t=s(o1e);LJo=r(r4t,"mobilebert"),r4t.forEach(t),yJo=r(FBe," \u2014 "),Nz=n(FBe,"A",{href:!0});var t4t=s(Nz);xJo=r(t4t,"MobileBertForNextSentencePrediction"),t4t.forEach(t),$Jo=r(FBe," (MobileBERT model)"),FBe.forEach(t),kJo=i(ha),S3=n(ha,"LI",{});var TBe=s(S3);r1e=n(TBe,"STRONG",{});var a4t=s(r1e);SJo=r(a4t,"nezha"),a4t.forEach(t),RJo=r(TBe," \u2014 "),qz=n(TBe,"A",{href:!0});var n4t=s(qz);PJo=r(n4t,"NezhaForNextSentencePrediction"),n4t.forEach(t),BJo=r(TBe," (Nezha model)"),TBe.forEach(t),IJo=i(ha),R3=n(ha,"LI",{});var MBe=s(R3);t1e=n(MBe,"STRONG",{});var s4t=s(t1e);NJo=r(s4t,"qdqbert"),s4t.forEach(t),qJo=r(MBe," \u2014 "),jz=n(MBe,"A",{href:!0});var l4t=s(jz);jJo=r(l4t,"QDQBertForNextSentencePrediction"),l4t.forEach(t),DJo=r(MBe," (QDQBert model)"),MBe.forEach(t),ha.forEach(t),GJo=i(ga),P3=n(ga,"P",{});var EBe=s(P3);OJo=r(EBe,"The model is set in evaluation mode by default using "),a1e=n(EBe,"CODE",{});var i4t=s(a1e);VJo=r(i4t,"model.eval()"),i4t.forEach(t),XJo=r(EBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n1e=n(EBe,"CODE",{});var d4t=s(n1e);zJo=r(d4t,"model.train()"),d4t.forEach(t),EBe.forEach(t),WJo=i(ga),T(B3.$$.fragment,ga),ga.forEach(t),dl.forEach(t),qXe=i(f),fd=n(f,"H2",{class:!0});var XWe=s(fd);I3=n(XWe,"A",{id:!0,class:!0,href:!0});var c4t=s(I3);s1e=n(c4t,"SPAN",{});var f4t=s(s1e);T(vL.$$.fragment,f4t),f4t.forEach(t),c4t.forEach(t),QJo=i(XWe),l1e=n(XWe,"SPAN",{});var m4t=s(l1e);HJo=r(m4t,"AutoModelForTokenClassification"),m4t.forEach(t),XWe.forEach(t),jXe=i(f),qo=n(f,"DIV",{class:!0});var cl=s(qo);T(FL.$$.fragment,cl),UJo=i(cl),md=n(cl,"P",{});var Zre=s(md);JJo=r(Zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Dz=n(Zre,"A",{href:!0});var g4t=s(Dz);YJo=r(g4t,"from_pretrained()"),g4t.forEach(t),KJo=r(Zre," class method or the "),Gz=n(Zre,"A",{href:!0});var h4t=s(Gz);ZJo=r(h4t,"from_config()"),h4t.forEach(t),eYo=r(Zre,` class
method.`),Zre.forEach(t),oYo=i(cl),TL=n(cl,"P",{});var zWe=s(TL);rYo=r(zWe,"This class cannot be instantiated directly using "),i1e=n(zWe,"CODE",{});var p4t=s(i1e);tYo=r(p4t,"__init__()"),p4t.forEach(t),aYo=r(zWe," (throws an error)."),zWe.forEach(t),nYo=i(cl),pt=n(cl,"DIV",{class:!0});var Lw=s(pt);T(ML.$$.fragment,Lw),sYo=i(Lw),d1e=n(Lw,"P",{});var _4t=s(d1e);lYo=r(_4t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),_4t.forEach(t),iYo=i(Lw),gd=n(Lw,"P",{});var ete=s(gd);dYo=r(ete,`Note:
Loading a model from its configuration file does `),c1e=n(ete,"STRONG",{});var u4t=s(c1e);cYo=r(u4t,"not"),u4t.forEach(t),fYo=r(ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oz=n(ete,"A",{href:!0});var b4t=s(Oz);mYo=r(b4t,"from_pretrained()"),b4t.forEach(t),gYo=r(ete," to load the model weights."),ete.forEach(t),hYo=i(Lw),T(N3.$$.fragment,Lw),Lw.forEach(t),pYo=i(cl),ao=n(cl,"DIV",{class:!0});var pa=s(ao);T(EL.$$.fragment,pa),_Yo=i(pa),f1e=n(pa,"P",{});var v4t=s(f1e);uYo=r(v4t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),v4t.forEach(t),bYo=i(pa),Xa=n(pa,"P",{});var yw=s(Xa);vYo=r(yw,"The model class to instantiate is selected based on the "),m1e=n(yw,"CODE",{});var F4t=s(m1e);FYo=r(F4t,"model_type"),F4t.forEach(t),TYo=r(yw,` property of the config object (either
passed as an argument or loaded from `),g1e=n(yw,"CODE",{});var T4t=s(g1e);MYo=r(T4t,"pretrained_model_name_or_path"),T4t.forEach(t),EYo=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h1e=n(yw,"CODE",{});var M4t=s(h1e);CYo=r(M4t,"pretrained_model_name_or_path"),M4t.forEach(t),wYo=r(yw,":"),yw.forEach(t),AYo=i(pa),U=n(pa,"UL",{});var Y=s(U);q3=n(Y,"LI",{});var CBe=s(q3);p1e=n(CBe,"STRONG",{});var E4t=s(p1e);LYo=r(E4t,"albert"),E4t.forEach(t),yYo=r(CBe," \u2014 "),Vz=n(CBe,"A",{href:!0});var C4t=s(Vz);xYo=r(C4t,"AlbertForTokenClassification"),C4t.forEach(t),$Yo=r(CBe," (ALBERT model)"),CBe.forEach(t),kYo=i(Y),j3=n(Y,"LI",{});var wBe=s(j3);_1e=n(wBe,"STRONG",{});var w4t=s(_1e);SYo=r(w4t,"bert"),w4t.forEach(t),RYo=r(wBe," \u2014 "),Xz=n(wBe,"A",{href:!0});var A4t=s(Xz);PYo=r(A4t,"BertForTokenClassification"),A4t.forEach(t),BYo=r(wBe," (BERT model)"),wBe.forEach(t),IYo=i(Y),D3=n(Y,"LI",{});var ABe=s(D3);u1e=n(ABe,"STRONG",{});var L4t=s(u1e);NYo=r(L4t,"big_bird"),L4t.forEach(t),qYo=r(ABe," \u2014 "),zz=n(ABe,"A",{href:!0});var y4t=s(zz);jYo=r(y4t,"BigBirdForTokenClassification"),y4t.forEach(t),DYo=r(ABe," (BigBird model)"),ABe.forEach(t),GYo=i(Y),G3=n(Y,"LI",{});var LBe=s(G3);b1e=n(LBe,"STRONG",{});var x4t=s(b1e);OYo=r(x4t,"bloom"),x4t.forEach(t),VYo=r(LBe," \u2014 "),Wz=n(LBe,"A",{href:!0});var $4t=s(Wz);XYo=r($4t,"BloomForTokenClassification"),$4t.forEach(t),zYo=r(LBe," (BLOOM model)"),LBe.forEach(t),WYo=i(Y),O3=n(Y,"LI",{});var yBe=s(O3);v1e=n(yBe,"STRONG",{});var k4t=s(v1e);QYo=r(k4t,"camembert"),k4t.forEach(t),HYo=r(yBe," \u2014 "),Qz=n(yBe,"A",{href:!0});var S4t=s(Qz);UYo=r(S4t,"CamembertForTokenClassification"),S4t.forEach(t),JYo=r(yBe," (CamemBERT model)"),yBe.forEach(t),YYo=i(Y),V3=n(Y,"LI",{});var xBe=s(V3);F1e=n(xBe,"STRONG",{});var R4t=s(F1e);KYo=r(R4t,"canine"),R4t.forEach(t),ZYo=r(xBe," \u2014 "),Hz=n(xBe,"A",{href:!0});var P4t=s(Hz);eKo=r(P4t,"CanineForTokenClassification"),P4t.forEach(t),oKo=r(xBe," (CANINE model)"),xBe.forEach(t),rKo=i(Y),X3=n(Y,"LI",{});var $Be=s(X3);T1e=n($Be,"STRONG",{});var B4t=s(T1e);tKo=r(B4t,"convbert"),B4t.forEach(t),aKo=r($Be," \u2014 "),Uz=n($Be,"A",{href:!0});var I4t=s(Uz);nKo=r(I4t,"ConvBertForTokenClassification"),I4t.forEach(t),sKo=r($Be," (ConvBERT model)"),$Be.forEach(t),lKo=i(Y),z3=n(Y,"LI",{});var kBe=s(z3);M1e=n(kBe,"STRONG",{});var N4t=s(M1e);iKo=r(N4t,"data2vec-text"),N4t.forEach(t),dKo=r(kBe," \u2014 "),Jz=n(kBe,"A",{href:!0});var q4t=s(Jz);cKo=r(q4t,"Data2VecTextForTokenClassification"),q4t.forEach(t),fKo=r(kBe," (Data2VecText model)"),kBe.forEach(t),mKo=i(Y),W3=n(Y,"LI",{});var SBe=s(W3);E1e=n(SBe,"STRONG",{});var j4t=s(E1e);gKo=r(j4t,"deberta"),j4t.forEach(t),hKo=r(SBe," \u2014 "),Yz=n(SBe,"A",{href:!0});var D4t=s(Yz);pKo=r(D4t,"DebertaForTokenClassification"),D4t.forEach(t),_Ko=r(SBe," (DeBERTa model)"),SBe.forEach(t),uKo=i(Y),Q3=n(Y,"LI",{});var RBe=s(Q3);C1e=n(RBe,"STRONG",{});var G4t=s(C1e);bKo=r(G4t,"deberta-v2"),G4t.forEach(t),vKo=r(RBe," \u2014 "),Kz=n(RBe,"A",{href:!0});var O4t=s(Kz);FKo=r(O4t,"DebertaV2ForTokenClassification"),O4t.forEach(t),TKo=r(RBe," (DeBERTa-v2 model)"),RBe.forEach(t),MKo=i(Y),H3=n(Y,"LI",{});var PBe=s(H3);w1e=n(PBe,"STRONG",{});var V4t=s(w1e);EKo=r(V4t,"distilbert"),V4t.forEach(t),CKo=r(PBe," \u2014 "),Zz=n(PBe,"A",{href:!0});var X4t=s(Zz);wKo=r(X4t,"DistilBertForTokenClassification"),X4t.forEach(t),AKo=r(PBe," (DistilBERT model)"),PBe.forEach(t),LKo=i(Y),U3=n(Y,"LI",{});var BBe=s(U3);A1e=n(BBe,"STRONG",{});var z4t=s(A1e);yKo=r(z4t,"electra"),z4t.forEach(t),xKo=r(BBe," \u2014 "),eW=n(BBe,"A",{href:!0});var W4t=s(eW);$Ko=r(W4t,"ElectraForTokenClassification"),W4t.forEach(t),kKo=r(BBe," (ELECTRA model)"),BBe.forEach(t),SKo=i(Y),J3=n(Y,"LI",{});var IBe=s(J3);L1e=n(IBe,"STRONG",{});var Q4t=s(L1e);RKo=r(Q4t,"flaubert"),Q4t.forEach(t),PKo=r(IBe," \u2014 "),oW=n(IBe,"A",{href:!0});var H4t=s(oW);BKo=r(H4t,"FlaubertForTokenClassification"),H4t.forEach(t),IKo=r(IBe," (FlauBERT model)"),IBe.forEach(t),NKo=i(Y),Y3=n(Y,"LI",{});var NBe=s(Y3);y1e=n(NBe,"STRONG",{});var U4t=s(y1e);qKo=r(U4t,"fnet"),U4t.forEach(t),jKo=r(NBe," \u2014 "),rW=n(NBe,"A",{href:!0});var J4t=s(rW);DKo=r(J4t,"FNetForTokenClassification"),J4t.forEach(t),GKo=r(NBe," (FNet model)"),NBe.forEach(t),OKo=i(Y),K3=n(Y,"LI",{});var qBe=s(K3);x1e=n(qBe,"STRONG",{});var Y4t=s(x1e);VKo=r(Y4t,"funnel"),Y4t.forEach(t),XKo=r(qBe," \u2014 "),tW=n(qBe,"A",{href:!0});var K4t=s(tW);zKo=r(K4t,"FunnelForTokenClassification"),K4t.forEach(t),WKo=r(qBe," (Funnel Transformer model)"),qBe.forEach(t),QKo=i(Y),Z3=n(Y,"LI",{});var jBe=s(Z3);$1e=n(jBe,"STRONG",{});var Z4t=s($1e);HKo=r(Z4t,"gpt2"),Z4t.forEach(t),UKo=r(jBe," \u2014 "),aW=n(jBe,"A",{href:!0});var eEt=s(aW);JKo=r(eEt,"GPT2ForTokenClassification"),eEt.forEach(t),YKo=r(jBe," (OpenAI GPT-2 model)"),jBe.forEach(t),KKo=i(Y),eF=n(Y,"LI",{});var DBe=s(eF);k1e=n(DBe,"STRONG",{});var oEt=s(k1e);ZKo=r(oEt,"ibert"),oEt.forEach(t),eZo=r(DBe," \u2014 "),nW=n(DBe,"A",{href:!0});var rEt=s(nW);oZo=r(rEt,"IBertForTokenClassification"),rEt.forEach(t),rZo=r(DBe," (I-BERT model)"),DBe.forEach(t),tZo=i(Y),oF=n(Y,"LI",{});var GBe=s(oF);S1e=n(GBe,"STRONG",{});var tEt=s(S1e);aZo=r(tEt,"layoutlm"),tEt.forEach(t),nZo=r(GBe," \u2014 "),sW=n(GBe,"A",{href:!0});var aEt=s(sW);sZo=r(aEt,"LayoutLMForTokenClassification"),aEt.forEach(t),lZo=r(GBe," (LayoutLM model)"),GBe.forEach(t),iZo=i(Y),rF=n(Y,"LI",{});var OBe=s(rF);R1e=n(OBe,"STRONG",{});var nEt=s(R1e);dZo=r(nEt,"layoutlmv2"),nEt.forEach(t),cZo=r(OBe," \u2014 "),lW=n(OBe,"A",{href:!0});var sEt=s(lW);fZo=r(sEt,"LayoutLMv2ForTokenClassification"),sEt.forEach(t),mZo=r(OBe," (LayoutLMv2 model)"),OBe.forEach(t),gZo=i(Y),tF=n(Y,"LI",{});var VBe=s(tF);P1e=n(VBe,"STRONG",{});var lEt=s(P1e);hZo=r(lEt,"layoutlmv3"),lEt.forEach(t),pZo=r(VBe," \u2014 "),iW=n(VBe,"A",{href:!0});var iEt=s(iW);_Zo=r(iEt,"LayoutLMv3ForTokenClassification"),iEt.forEach(t),uZo=r(VBe," (LayoutLMv3 model)"),VBe.forEach(t),bZo=i(Y),aF=n(Y,"LI",{});var XBe=s(aF);B1e=n(XBe,"STRONG",{});var dEt=s(B1e);vZo=r(dEt,"longformer"),dEt.forEach(t),FZo=r(XBe," \u2014 "),dW=n(XBe,"A",{href:!0});var cEt=s(dW);TZo=r(cEt,"LongformerForTokenClassification"),cEt.forEach(t),MZo=r(XBe," (Longformer model)"),XBe.forEach(t),EZo=i(Y),nF=n(Y,"LI",{});var zBe=s(nF);I1e=n(zBe,"STRONG",{});var fEt=s(I1e);CZo=r(fEt,"megatron-bert"),fEt.forEach(t),wZo=r(zBe," \u2014 "),cW=n(zBe,"A",{href:!0});var mEt=s(cW);AZo=r(mEt,"MegatronBertForTokenClassification"),mEt.forEach(t),LZo=r(zBe," (Megatron-BERT model)"),zBe.forEach(t),yZo=i(Y),sF=n(Y,"LI",{});var WBe=s(sF);N1e=n(WBe,"STRONG",{});var gEt=s(N1e);xZo=r(gEt,"mobilebert"),gEt.forEach(t),$Zo=r(WBe," \u2014 "),fW=n(WBe,"A",{href:!0});var hEt=s(fW);kZo=r(hEt,"MobileBertForTokenClassification"),hEt.forEach(t),SZo=r(WBe," (MobileBERT model)"),WBe.forEach(t),RZo=i(Y),lF=n(Y,"LI",{});var QBe=s(lF);q1e=n(QBe,"STRONG",{});var pEt=s(q1e);PZo=r(pEt,"mpnet"),pEt.forEach(t),BZo=r(QBe," \u2014 "),mW=n(QBe,"A",{href:!0});var _Et=s(mW);IZo=r(_Et,"MPNetForTokenClassification"),_Et.forEach(t),NZo=r(QBe," (MPNet model)"),QBe.forEach(t),qZo=i(Y),iF=n(Y,"LI",{});var HBe=s(iF);j1e=n(HBe,"STRONG",{});var uEt=s(j1e);jZo=r(uEt,"nezha"),uEt.forEach(t),DZo=r(HBe," \u2014 "),gW=n(HBe,"A",{href:!0});var bEt=s(gW);GZo=r(bEt,"NezhaForTokenClassification"),bEt.forEach(t),OZo=r(HBe," (Nezha model)"),HBe.forEach(t),VZo=i(Y),dF=n(Y,"LI",{});var UBe=s(dF);D1e=n(UBe,"STRONG",{});var vEt=s(D1e);XZo=r(vEt,"nystromformer"),vEt.forEach(t),zZo=r(UBe," \u2014 "),hW=n(UBe,"A",{href:!0});var FEt=s(hW);WZo=r(FEt,"NystromformerForTokenClassification"),FEt.forEach(t),QZo=r(UBe," (Nystr\xF6mformer model)"),UBe.forEach(t),HZo=i(Y),cF=n(Y,"LI",{});var JBe=s(cF);G1e=n(JBe,"STRONG",{});var TEt=s(G1e);UZo=r(TEt,"qdqbert"),TEt.forEach(t),JZo=r(JBe," \u2014 "),pW=n(JBe,"A",{href:!0});var MEt=s(pW);YZo=r(MEt,"QDQBertForTokenClassification"),MEt.forEach(t),KZo=r(JBe," (QDQBert model)"),JBe.forEach(t),ZZo=i(Y),fF=n(Y,"LI",{});var YBe=s(fF);O1e=n(YBe,"STRONG",{});var EEt=s(O1e);eer=r(EEt,"rembert"),EEt.forEach(t),oer=r(YBe," \u2014 "),_W=n(YBe,"A",{href:!0});var CEt=s(_W);rer=r(CEt,"RemBertForTokenClassification"),CEt.forEach(t),ter=r(YBe," (RemBERT model)"),YBe.forEach(t),aer=i(Y),mF=n(Y,"LI",{});var KBe=s(mF);V1e=n(KBe,"STRONG",{});var wEt=s(V1e);ner=r(wEt,"roberta"),wEt.forEach(t),ser=r(KBe," \u2014 "),uW=n(KBe,"A",{href:!0});var AEt=s(uW);ler=r(AEt,"RobertaForTokenClassification"),AEt.forEach(t),ier=r(KBe," (RoBERTa model)"),KBe.forEach(t),der=i(Y),gF=n(Y,"LI",{});var ZBe=s(gF);X1e=n(ZBe,"STRONG",{});var LEt=s(X1e);cer=r(LEt,"roformer"),LEt.forEach(t),fer=r(ZBe," \u2014 "),bW=n(ZBe,"A",{href:!0});var yEt=s(bW);mer=r(yEt,"RoFormerForTokenClassification"),yEt.forEach(t),ger=r(ZBe," (RoFormer model)"),ZBe.forEach(t),her=i(Y),hF=n(Y,"LI",{});var eIe=s(hF);z1e=n(eIe,"STRONG",{});var xEt=s(z1e);per=r(xEt,"squeezebert"),xEt.forEach(t),_er=r(eIe," \u2014 "),vW=n(eIe,"A",{href:!0});var $Et=s(vW);uer=r($Et,"SqueezeBertForTokenClassification"),$Et.forEach(t),ber=r(eIe," (SqueezeBERT model)"),eIe.forEach(t),ver=i(Y),pF=n(Y,"LI",{});var oIe=s(pF);W1e=n(oIe,"STRONG",{});var kEt=s(W1e);Fer=r(kEt,"xlm"),kEt.forEach(t),Ter=r(oIe," \u2014 "),FW=n(oIe,"A",{href:!0});var SEt=s(FW);Mer=r(SEt,"XLMForTokenClassification"),SEt.forEach(t),Eer=r(oIe," (XLM model)"),oIe.forEach(t),Cer=i(Y),_F=n(Y,"LI",{});var rIe=s(_F);Q1e=n(rIe,"STRONG",{});var REt=s(Q1e);wer=r(REt,"xlm-roberta"),REt.forEach(t),Aer=r(rIe," \u2014 "),TW=n(rIe,"A",{href:!0});var PEt=s(TW);Ler=r(PEt,"XLMRobertaForTokenClassification"),PEt.forEach(t),yer=r(rIe," (XLM-RoBERTa model)"),rIe.forEach(t),xer=i(Y),uF=n(Y,"LI",{});var tIe=s(uF);H1e=n(tIe,"STRONG",{});var BEt=s(H1e);$er=r(BEt,"xlm-roberta-xl"),BEt.forEach(t),ker=r(tIe," \u2014 "),MW=n(tIe,"A",{href:!0});var IEt=s(MW);Ser=r(IEt,"XLMRobertaXLForTokenClassification"),IEt.forEach(t),Rer=r(tIe," (XLM-RoBERTa-XL model)"),tIe.forEach(t),Per=i(Y),bF=n(Y,"LI",{});var aIe=s(bF);U1e=n(aIe,"STRONG",{});var NEt=s(U1e);Ber=r(NEt,"xlnet"),NEt.forEach(t),Ier=r(aIe," \u2014 "),EW=n(aIe,"A",{href:!0});var qEt=s(EW);Ner=r(qEt,"XLNetForTokenClassification"),qEt.forEach(t),qer=r(aIe," (XLNet model)"),aIe.forEach(t),jer=i(Y),vF=n(Y,"LI",{});var nIe=s(vF);J1e=n(nIe,"STRONG",{});var jEt=s(J1e);Der=r(jEt,"yoso"),jEt.forEach(t),Ger=r(nIe," \u2014 "),CW=n(nIe,"A",{href:!0});var DEt=s(CW);Oer=r(DEt,"YosoForTokenClassification"),DEt.forEach(t),Ver=r(nIe," (YOSO model)"),nIe.forEach(t),Y.forEach(t),Xer=i(pa),FF=n(pa,"P",{});var sIe=s(FF);zer=r(sIe,"The model is set in evaluation mode by default using "),Y1e=n(sIe,"CODE",{});var GEt=s(Y1e);Wer=r(GEt,"model.eval()"),GEt.forEach(t),Qer=r(sIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K1e=n(sIe,"CODE",{});var OEt=s(K1e);Her=r(OEt,"model.train()"),OEt.forEach(t),sIe.forEach(t),Uer=i(pa),T(TF.$$.fragment,pa),pa.forEach(t),cl.forEach(t),DXe=i(f),hd=n(f,"H2",{class:!0});var WWe=s(hd);MF=n(WWe,"A",{id:!0,class:!0,href:!0});var VEt=s(MF);Z1e=n(VEt,"SPAN",{});var XEt=s(Z1e);T(CL.$$.fragment,XEt),XEt.forEach(t),VEt.forEach(t),Jer=i(WWe),e2e=n(WWe,"SPAN",{});var zEt=s(e2e);Yer=r(zEt,"AutoModelForQuestionAnswering"),zEt.forEach(t),WWe.forEach(t),GXe=i(f),jo=n(f,"DIV",{class:!0});var fl=s(jo);T(wL.$$.fragment,fl),Ker=i(fl),pd=n(fl,"P",{});var ote=s(pd);Zer=r(ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),wW=n(ote,"A",{href:!0});var WEt=s(wW);eor=r(WEt,"from_pretrained()"),WEt.forEach(t),oor=r(ote," class method or the "),AW=n(ote,"A",{href:!0});var QEt=s(AW);ror=r(QEt,"from_config()"),QEt.forEach(t),tor=r(ote,` class
method.`),ote.forEach(t),aor=i(fl),AL=n(fl,"P",{});var QWe=s(AL);nor=r(QWe,"This class cannot be instantiated directly using "),o2e=n(QWe,"CODE",{});var HEt=s(o2e);sor=r(HEt,"__init__()"),HEt.forEach(t),lor=r(QWe," (throws an error)."),QWe.forEach(t),ior=i(fl),_t=n(fl,"DIV",{class:!0});var xw=s(_t);T(LL.$$.fragment,xw),dor=i(xw),r2e=n(xw,"P",{});var UEt=s(r2e);cor=r(UEt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),UEt.forEach(t),mor=i(xw),_d=n(xw,"P",{});var rte=s(_d);gor=r(rte,`Note:
Loading a model from its configuration file does `),t2e=n(rte,"STRONG",{});var JEt=s(t2e);hor=r(JEt,"not"),JEt.forEach(t),por=r(rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),LW=n(rte,"A",{href:!0});var YEt=s(LW);_or=r(YEt,"from_pretrained()"),YEt.forEach(t),uor=r(rte," to load the model weights."),rte.forEach(t),bor=i(xw),T(EF.$$.fragment,xw),xw.forEach(t),vor=i(fl),no=n(fl,"DIV",{class:!0});var _a=s(no);T(yL.$$.fragment,_a),For=i(_a),a2e=n(_a,"P",{});var KEt=s(a2e);Tor=r(KEt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),KEt.forEach(t),Mor=i(_a),za=n(_a,"P",{});var $w=s(za);Eor=r($w,"The model class to instantiate is selected based on the "),n2e=n($w,"CODE",{});var ZEt=s(n2e);Cor=r(ZEt,"model_type"),ZEt.forEach(t),wor=r($w,` property of the config object (either
passed as an argument or loaded from `),s2e=n($w,"CODE",{});var eCt=s(s2e);Aor=r(eCt,"pretrained_model_name_or_path"),eCt.forEach(t),Lor=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l2e=n($w,"CODE",{});var oCt=s(l2e);yor=r(oCt,"pretrained_model_name_or_path"),oCt.forEach(t),xor=r($w,":"),$w.forEach(t),$or=i(_a),V=n(_a,"UL",{});var X=s(V);CF=n(X,"LI",{});var lIe=s(CF);i2e=n(lIe,"STRONG",{});var rCt=s(i2e);kor=r(rCt,"albert"),rCt.forEach(t),Sor=r(lIe," \u2014 "),yW=n(lIe,"A",{href:!0});var tCt=s(yW);Ror=r(tCt,"AlbertForQuestionAnswering"),tCt.forEach(t),Por=r(lIe," (ALBERT model)"),lIe.forEach(t),Bor=i(X),wF=n(X,"LI",{});var iIe=s(wF);d2e=n(iIe,"STRONG",{});var aCt=s(d2e);Ior=r(aCt,"bart"),aCt.forEach(t),Nor=r(iIe," \u2014 "),xW=n(iIe,"A",{href:!0});var nCt=s(xW);qor=r(nCt,"BartForQuestionAnswering"),nCt.forEach(t),jor=r(iIe," (BART model)"),iIe.forEach(t),Dor=i(X),AF=n(X,"LI",{});var dIe=s(AF);c2e=n(dIe,"STRONG",{});var sCt=s(c2e);Gor=r(sCt,"bert"),sCt.forEach(t),Oor=r(dIe," \u2014 "),$W=n(dIe,"A",{href:!0});var lCt=s($W);Vor=r(lCt,"BertForQuestionAnswering"),lCt.forEach(t),Xor=r(dIe," (BERT model)"),dIe.forEach(t),zor=i(X),LF=n(X,"LI",{});var cIe=s(LF);f2e=n(cIe,"STRONG",{});var iCt=s(f2e);Wor=r(iCt,"big_bird"),iCt.forEach(t),Qor=r(cIe," \u2014 "),kW=n(cIe,"A",{href:!0});var dCt=s(kW);Hor=r(dCt,"BigBirdForQuestionAnswering"),dCt.forEach(t),Uor=r(cIe," (BigBird model)"),cIe.forEach(t),Jor=i(X),yF=n(X,"LI",{});var fIe=s(yF);m2e=n(fIe,"STRONG",{});var cCt=s(m2e);Yor=r(cCt,"bigbird_pegasus"),cCt.forEach(t),Kor=r(fIe," \u2014 "),SW=n(fIe,"A",{href:!0});var fCt=s(SW);Zor=r(fCt,"BigBirdPegasusForQuestionAnswering"),fCt.forEach(t),err=r(fIe," (BigBird-Pegasus model)"),fIe.forEach(t),orr=i(X),xF=n(X,"LI",{});var mIe=s(xF);g2e=n(mIe,"STRONG",{});var mCt=s(g2e);rrr=r(mCt,"camembert"),mCt.forEach(t),trr=r(mIe," \u2014 "),RW=n(mIe,"A",{href:!0});var gCt=s(RW);arr=r(gCt,"CamembertForQuestionAnswering"),gCt.forEach(t),nrr=r(mIe," (CamemBERT model)"),mIe.forEach(t),srr=i(X),$F=n(X,"LI",{});var gIe=s($F);h2e=n(gIe,"STRONG",{});var hCt=s(h2e);lrr=r(hCt,"canine"),hCt.forEach(t),irr=r(gIe," \u2014 "),PW=n(gIe,"A",{href:!0});var pCt=s(PW);drr=r(pCt,"CanineForQuestionAnswering"),pCt.forEach(t),crr=r(gIe," (CANINE model)"),gIe.forEach(t),frr=i(X),kF=n(X,"LI",{});var hIe=s(kF);p2e=n(hIe,"STRONG",{});var _Ct=s(p2e);mrr=r(_Ct,"convbert"),_Ct.forEach(t),grr=r(hIe," \u2014 "),BW=n(hIe,"A",{href:!0});var uCt=s(BW);hrr=r(uCt,"ConvBertForQuestionAnswering"),uCt.forEach(t),prr=r(hIe," (ConvBERT model)"),hIe.forEach(t),_rr=i(X),SF=n(X,"LI",{});var pIe=s(SF);_2e=n(pIe,"STRONG",{});var bCt=s(_2e);urr=r(bCt,"data2vec-text"),bCt.forEach(t),brr=r(pIe," \u2014 "),IW=n(pIe,"A",{href:!0});var vCt=s(IW);vrr=r(vCt,"Data2VecTextForQuestionAnswering"),vCt.forEach(t),Frr=r(pIe," (Data2VecText model)"),pIe.forEach(t),Trr=i(X),RF=n(X,"LI",{});var _Ie=s(RF);u2e=n(_Ie,"STRONG",{});var FCt=s(u2e);Mrr=r(FCt,"deberta"),FCt.forEach(t),Err=r(_Ie," \u2014 "),NW=n(_Ie,"A",{href:!0});var TCt=s(NW);Crr=r(TCt,"DebertaForQuestionAnswering"),TCt.forEach(t),wrr=r(_Ie," (DeBERTa model)"),_Ie.forEach(t),Arr=i(X),PF=n(X,"LI",{});var uIe=s(PF);b2e=n(uIe,"STRONG",{});var MCt=s(b2e);Lrr=r(MCt,"deberta-v2"),MCt.forEach(t),yrr=r(uIe," \u2014 "),qW=n(uIe,"A",{href:!0});var ECt=s(qW);xrr=r(ECt,"DebertaV2ForQuestionAnswering"),ECt.forEach(t),$rr=r(uIe," (DeBERTa-v2 model)"),uIe.forEach(t),krr=i(X),BF=n(X,"LI",{});var bIe=s(BF);v2e=n(bIe,"STRONG",{});var CCt=s(v2e);Srr=r(CCt,"distilbert"),CCt.forEach(t),Rrr=r(bIe," \u2014 "),jW=n(bIe,"A",{href:!0});var wCt=s(jW);Prr=r(wCt,"DistilBertForQuestionAnswering"),wCt.forEach(t),Brr=r(bIe," (DistilBERT model)"),bIe.forEach(t),Irr=i(X),IF=n(X,"LI",{});var vIe=s(IF);F2e=n(vIe,"STRONG",{});var ACt=s(F2e);Nrr=r(ACt,"electra"),ACt.forEach(t),qrr=r(vIe," \u2014 "),DW=n(vIe,"A",{href:!0});var LCt=s(DW);jrr=r(LCt,"ElectraForQuestionAnswering"),LCt.forEach(t),Drr=r(vIe," (ELECTRA model)"),vIe.forEach(t),Grr=i(X),NF=n(X,"LI",{});var FIe=s(NF);T2e=n(FIe,"STRONG",{});var yCt=s(T2e);Orr=r(yCt,"flaubert"),yCt.forEach(t),Vrr=r(FIe," \u2014 "),GW=n(FIe,"A",{href:!0});var xCt=s(GW);Xrr=r(xCt,"FlaubertForQuestionAnsweringSimple"),xCt.forEach(t),zrr=r(FIe," (FlauBERT model)"),FIe.forEach(t),Wrr=i(X),qF=n(X,"LI",{});var TIe=s(qF);M2e=n(TIe,"STRONG",{});var $Ct=s(M2e);Qrr=r($Ct,"fnet"),$Ct.forEach(t),Hrr=r(TIe," \u2014 "),OW=n(TIe,"A",{href:!0});var kCt=s(OW);Urr=r(kCt,"FNetForQuestionAnswering"),kCt.forEach(t),Jrr=r(TIe," (FNet model)"),TIe.forEach(t),Yrr=i(X),jF=n(X,"LI",{});var MIe=s(jF);E2e=n(MIe,"STRONG",{});var SCt=s(E2e);Krr=r(SCt,"funnel"),SCt.forEach(t),Zrr=r(MIe," \u2014 "),VW=n(MIe,"A",{href:!0});var RCt=s(VW);etr=r(RCt,"FunnelForQuestionAnswering"),RCt.forEach(t),otr=r(MIe," (Funnel Transformer model)"),MIe.forEach(t),rtr=i(X),DF=n(X,"LI",{});var EIe=s(DF);C2e=n(EIe,"STRONG",{});var PCt=s(C2e);ttr=r(PCt,"gptj"),PCt.forEach(t),atr=r(EIe," \u2014 "),XW=n(EIe,"A",{href:!0});var BCt=s(XW);ntr=r(BCt,"GPTJForQuestionAnswering"),BCt.forEach(t),str=r(EIe," (GPT-J model)"),EIe.forEach(t),ltr=i(X),GF=n(X,"LI",{});var CIe=s(GF);w2e=n(CIe,"STRONG",{});var ICt=s(w2e);itr=r(ICt,"ibert"),ICt.forEach(t),dtr=r(CIe," \u2014 "),zW=n(CIe,"A",{href:!0});var NCt=s(zW);ctr=r(NCt,"IBertForQuestionAnswering"),NCt.forEach(t),ftr=r(CIe," (I-BERT model)"),CIe.forEach(t),mtr=i(X),OF=n(X,"LI",{});var wIe=s(OF);A2e=n(wIe,"STRONG",{});var qCt=s(A2e);gtr=r(qCt,"layoutlmv2"),qCt.forEach(t),htr=r(wIe," \u2014 "),WW=n(wIe,"A",{href:!0});var jCt=s(WW);ptr=r(jCt,"LayoutLMv2ForQuestionAnswering"),jCt.forEach(t),_tr=r(wIe," (LayoutLMv2 model)"),wIe.forEach(t),utr=i(X),VF=n(X,"LI",{});var AIe=s(VF);L2e=n(AIe,"STRONG",{});var DCt=s(L2e);btr=r(DCt,"layoutlmv3"),DCt.forEach(t),vtr=r(AIe," \u2014 "),QW=n(AIe,"A",{href:!0});var GCt=s(QW);Ftr=r(GCt,"LayoutLMv3ForQuestionAnswering"),GCt.forEach(t),Ttr=r(AIe," (LayoutLMv3 model)"),AIe.forEach(t),Mtr=i(X),XF=n(X,"LI",{});var LIe=s(XF);y2e=n(LIe,"STRONG",{});var OCt=s(y2e);Etr=r(OCt,"led"),OCt.forEach(t),Ctr=r(LIe," \u2014 "),HW=n(LIe,"A",{href:!0});var VCt=s(HW);wtr=r(VCt,"LEDForQuestionAnswering"),VCt.forEach(t),Atr=r(LIe," (LED model)"),LIe.forEach(t),Ltr=i(X),zF=n(X,"LI",{});var yIe=s(zF);x2e=n(yIe,"STRONG",{});var XCt=s(x2e);ytr=r(XCt,"longformer"),XCt.forEach(t),xtr=r(yIe," \u2014 "),UW=n(yIe,"A",{href:!0});var zCt=s(UW);$tr=r(zCt,"LongformerForQuestionAnswering"),zCt.forEach(t),ktr=r(yIe," (Longformer model)"),yIe.forEach(t),Str=i(X),WF=n(X,"LI",{});var xIe=s(WF);$2e=n(xIe,"STRONG",{});var WCt=s($2e);Rtr=r(WCt,"lxmert"),WCt.forEach(t),Ptr=r(xIe," \u2014 "),JW=n(xIe,"A",{href:!0});var QCt=s(JW);Btr=r(QCt,"LxmertForQuestionAnswering"),QCt.forEach(t),Itr=r(xIe," (LXMERT model)"),xIe.forEach(t),Ntr=i(X),QF=n(X,"LI",{});var $Ie=s(QF);k2e=n($Ie,"STRONG",{});var HCt=s(k2e);qtr=r(HCt,"mbart"),HCt.forEach(t),jtr=r($Ie," \u2014 "),YW=n($Ie,"A",{href:!0});var UCt=s(YW);Dtr=r(UCt,"MBartForQuestionAnswering"),UCt.forEach(t),Gtr=r($Ie," (mBART model)"),$Ie.forEach(t),Otr=i(X),HF=n(X,"LI",{});var kIe=s(HF);S2e=n(kIe,"STRONG",{});var JCt=s(S2e);Vtr=r(JCt,"megatron-bert"),JCt.forEach(t),Xtr=r(kIe," \u2014 "),KW=n(kIe,"A",{href:!0});var YCt=s(KW);ztr=r(YCt,"MegatronBertForQuestionAnswering"),YCt.forEach(t),Wtr=r(kIe," (Megatron-BERT model)"),kIe.forEach(t),Qtr=i(X),UF=n(X,"LI",{});var SIe=s(UF);R2e=n(SIe,"STRONG",{});var KCt=s(R2e);Htr=r(KCt,"mobilebert"),KCt.forEach(t),Utr=r(SIe," \u2014 "),ZW=n(SIe,"A",{href:!0});var ZCt=s(ZW);Jtr=r(ZCt,"MobileBertForQuestionAnswering"),ZCt.forEach(t),Ytr=r(SIe," (MobileBERT model)"),SIe.forEach(t),Ktr=i(X),JF=n(X,"LI",{});var RIe=s(JF);P2e=n(RIe,"STRONG",{});var e5t=s(P2e);Ztr=r(e5t,"mpnet"),e5t.forEach(t),ear=r(RIe," \u2014 "),eQ=n(RIe,"A",{href:!0});var o5t=s(eQ);oar=r(o5t,"MPNetForQuestionAnswering"),o5t.forEach(t),rar=r(RIe," (MPNet model)"),RIe.forEach(t),tar=i(X),YF=n(X,"LI",{});var PIe=s(YF);B2e=n(PIe,"STRONG",{});var r5t=s(B2e);aar=r(r5t,"mvp"),r5t.forEach(t),nar=r(PIe," \u2014 "),oQ=n(PIe,"A",{href:!0});var t5t=s(oQ);sar=r(t5t,"MvpForQuestionAnswering"),t5t.forEach(t),lar=r(PIe," (MVP model)"),PIe.forEach(t),iar=i(X),KF=n(X,"LI",{});var BIe=s(KF);I2e=n(BIe,"STRONG",{});var a5t=s(I2e);dar=r(a5t,"nezha"),a5t.forEach(t),car=r(BIe," \u2014 "),rQ=n(BIe,"A",{href:!0});var n5t=s(rQ);far=r(n5t,"NezhaForQuestionAnswering"),n5t.forEach(t),mar=r(BIe," (Nezha model)"),BIe.forEach(t),gar=i(X),ZF=n(X,"LI",{});var IIe=s(ZF);N2e=n(IIe,"STRONG",{});var s5t=s(N2e);har=r(s5t,"nystromformer"),s5t.forEach(t),par=r(IIe," \u2014 "),tQ=n(IIe,"A",{href:!0});var l5t=s(tQ);_ar=r(l5t,"NystromformerForQuestionAnswering"),l5t.forEach(t),uar=r(IIe," (Nystr\xF6mformer model)"),IIe.forEach(t),bar=i(X),eT=n(X,"LI",{});var NIe=s(eT);q2e=n(NIe,"STRONG",{});var i5t=s(q2e);Far=r(i5t,"qdqbert"),i5t.forEach(t),Tar=r(NIe," \u2014 "),aQ=n(NIe,"A",{href:!0});var d5t=s(aQ);Mar=r(d5t,"QDQBertForQuestionAnswering"),d5t.forEach(t),Ear=r(NIe," (QDQBert model)"),NIe.forEach(t),Car=i(X),oT=n(X,"LI",{});var qIe=s(oT);j2e=n(qIe,"STRONG",{});var c5t=s(j2e);war=r(c5t,"reformer"),c5t.forEach(t),Aar=r(qIe," \u2014 "),nQ=n(qIe,"A",{href:!0});var f5t=s(nQ);Lar=r(f5t,"ReformerForQuestionAnswering"),f5t.forEach(t),yar=r(qIe," (Reformer model)"),qIe.forEach(t),xar=i(X),rT=n(X,"LI",{});var jIe=s(rT);D2e=n(jIe,"STRONG",{});var m5t=s(D2e);$ar=r(m5t,"rembert"),m5t.forEach(t),kar=r(jIe," \u2014 "),sQ=n(jIe,"A",{href:!0});var g5t=s(sQ);Sar=r(g5t,"RemBertForQuestionAnswering"),g5t.forEach(t),Rar=r(jIe," (RemBERT model)"),jIe.forEach(t),Par=i(X),tT=n(X,"LI",{});var DIe=s(tT);G2e=n(DIe,"STRONG",{});var h5t=s(G2e);Bar=r(h5t,"roberta"),h5t.forEach(t),Iar=r(DIe," \u2014 "),lQ=n(DIe,"A",{href:!0});var p5t=s(lQ);Nar=r(p5t,"RobertaForQuestionAnswering"),p5t.forEach(t),qar=r(DIe," (RoBERTa model)"),DIe.forEach(t),jar=i(X),aT=n(X,"LI",{});var GIe=s(aT);O2e=n(GIe,"STRONG",{});var _5t=s(O2e);Dar=r(_5t,"roformer"),_5t.forEach(t),Gar=r(GIe," \u2014 "),iQ=n(GIe,"A",{href:!0});var u5t=s(iQ);Oar=r(u5t,"RoFormerForQuestionAnswering"),u5t.forEach(t),Var=r(GIe," (RoFormer model)"),GIe.forEach(t),Xar=i(X),nT=n(X,"LI",{});var OIe=s(nT);V2e=n(OIe,"STRONG",{});var b5t=s(V2e);zar=r(b5t,"splinter"),b5t.forEach(t),War=r(OIe," \u2014 "),dQ=n(OIe,"A",{href:!0});var v5t=s(dQ);Qar=r(v5t,"SplinterForQuestionAnswering"),v5t.forEach(t),Har=r(OIe," (Splinter model)"),OIe.forEach(t),Uar=i(X),sT=n(X,"LI",{});var VIe=s(sT);X2e=n(VIe,"STRONG",{});var F5t=s(X2e);Jar=r(F5t,"squeezebert"),F5t.forEach(t),Yar=r(VIe," \u2014 "),cQ=n(VIe,"A",{href:!0});var T5t=s(cQ);Kar=r(T5t,"SqueezeBertForQuestionAnswering"),T5t.forEach(t),Zar=r(VIe," (SqueezeBERT model)"),VIe.forEach(t),enr=i(X),lT=n(X,"LI",{});var XIe=s(lT);z2e=n(XIe,"STRONG",{});var M5t=s(z2e);onr=r(M5t,"xlm"),M5t.forEach(t),rnr=r(XIe," \u2014 "),fQ=n(XIe,"A",{href:!0});var E5t=s(fQ);tnr=r(E5t,"XLMForQuestionAnsweringSimple"),E5t.forEach(t),anr=r(XIe," (XLM model)"),XIe.forEach(t),nnr=i(X),iT=n(X,"LI",{});var zIe=s(iT);W2e=n(zIe,"STRONG",{});var C5t=s(W2e);snr=r(C5t,"xlm-roberta"),C5t.forEach(t),lnr=r(zIe," \u2014 "),mQ=n(zIe,"A",{href:!0});var w5t=s(mQ);inr=r(w5t,"XLMRobertaForQuestionAnswering"),w5t.forEach(t),dnr=r(zIe," (XLM-RoBERTa model)"),zIe.forEach(t),cnr=i(X),dT=n(X,"LI",{});var WIe=s(dT);Q2e=n(WIe,"STRONG",{});var A5t=s(Q2e);fnr=r(A5t,"xlm-roberta-xl"),A5t.forEach(t),mnr=r(WIe," \u2014 "),gQ=n(WIe,"A",{href:!0});var L5t=s(gQ);gnr=r(L5t,"XLMRobertaXLForQuestionAnswering"),L5t.forEach(t),hnr=r(WIe," (XLM-RoBERTa-XL model)"),WIe.forEach(t),pnr=i(X),cT=n(X,"LI",{});var QIe=s(cT);H2e=n(QIe,"STRONG",{});var y5t=s(H2e);_nr=r(y5t,"xlnet"),y5t.forEach(t),unr=r(QIe," \u2014 "),hQ=n(QIe,"A",{href:!0});var x5t=s(hQ);bnr=r(x5t,"XLNetForQuestionAnsweringSimple"),x5t.forEach(t),vnr=r(QIe," (XLNet model)"),QIe.forEach(t),Fnr=i(X),fT=n(X,"LI",{});var HIe=s(fT);U2e=n(HIe,"STRONG",{});var $5t=s(U2e);Tnr=r($5t,"yoso"),$5t.forEach(t),Mnr=r(HIe," \u2014 "),pQ=n(HIe,"A",{href:!0});var k5t=s(pQ);Enr=r(k5t,"YosoForQuestionAnswering"),k5t.forEach(t),Cnr=r(HIe," (YOSO model)"),HIe.forEach(t),X.forEach(t),wnr=i(_a),mT=n(_a,"P",{});var UIe=s(mT);Anr=r(UIe,"The model is set in evaluation mode by default using "),J2e=n(UIe,"CODE",{});var S5t=s(J2e);Lnr=r(S5t,"model.eval()"),S5t.forEach(t),ynr=r(UIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y2e=n(UIe,"CODE",{});var R5t=s(Y2e);xnr=r(R5t,"model.train()"),R5t.forEach(t),UIe.forEach(t),$nr=i(_a),T(gT.$$.fragment,_a),_a.forEach(t),fl.forEach(t),OXe=i(f),ud=n(f,"H2",{class:!0});var HWe=s(ud);hT=n(HWe,"A",{id:!0,class:!0,href:!0});var P5t=s(hT);K2e=n(P5t,"SPAN",{});var B5t=s(K2e);T(xL.$$.fragment,B5t),B5t.forEach(t),P5t.forEach(t),knr=i(HWe),Z2e=n(HWe,"SPAN",{});var I5t=s(Z2e);Snr=r(I5t,"AutoModelForTableQuestionAnswering"),I5t.forEach(t),HWe.forEach(t),VXe=i(f),Do=n(f,"DIV",{class:!0});var ml=s(Do);T($L.$$.fragment,ml),Rnr=i(ml),bd=n(ml,"P",{});var tte=s(bd);Pnr=r(tte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),_Q=n(tte,"A",{href:!0});var N5t=s(_Q);Bnr=r(N5t,"from_pretrained()"),N5t.forEach(t),Inr=r(tte," class method or the "),uQ=n(tte,"A",{href:!0});var q5t=s(uQ);Nnr=r(q5t,"from_config()"),q5t.forEach(t),qnr=r(tte,` class
method.`),tte.forEach(t),jnr=i(ml),kL=n(ml,"P",{});var UWe=s(kL);Dnr=r(UWe,"This class cannot be instantiated directly using "),ebe=n(UWe,"CODE",{});var j5t=s(ebe);Gnr=r(j5t,"__init__()"),j5t.forEach(t),Onr=r(UWe," (throws an error)."),UWe.forEach(t),Vnr=i(ml),ut=n(ml,"DIV",{class:!0});var kw=s(ut);T(SL.$$.fragment,kw),Xnr=i(kw),obe=n(kw,"P",{});var D5t=s(obe);znr=r(D5t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),D5t.forEach(t),Wnr=i(kw),vd=n(kw,"P",{});var ate=s(vd);Qnr=r(ate,`Note:
Loading a model from its configuration file does `),rbe=n(ate,"STRONG",{});var G5t=s(rbe);Hnr=r(G5t,"not"),G5t.forEach(t),Unr=r(ate,` load the model weights. It only affects the
model\u2019s configuration. Use `),bQ=n(ate,"A",{href:!0});var O5t=s(bQ);Jnr=r(O5t,"from_pretrained()"),O5t.forEach(t),Ynr=r(ate," to load the model weights."),ate.forEach(t),Knr=i(kw),T(pT.$$.fragment,kw),kw.forEach(t),Znr=i(ml),so=n(ml,"DIV",{class:!0});var ua=s(so);T(RL.$$.fragment,ua),esr=i(ua),tbe=n(ua,"P",{});var V5t=s(tbe);osr=r(V5t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),V5t.forEach(t),rsr=i(ua),Wa=n(ua,"P",{});var Sw=s(Wa);tsr=r(Sw,"The model class to instantiate is selected based on the "),abe=n(Sw,"CODE",{});var X5t=s(abe);asr=r(X5t,"model_type"),X5t.forEach(t),nsr=r(Sw,` property of the config object (either
passed as an argument or loaded from `),nbe=n(Sw,"CODE",{});var z5t=s(nbe);ssr=r(z5t,"pretrained_model_name_or_path"),z5t.forEach(t),lsr=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sbe=n(Sw,"CODE",{});var W5t=s(sbe);isr=r(W5t,"pretrained_model_name_or_path"),W5t.forEach(t),dsr=r(Sw,":"),Sw.forEach(t),csr=i(ua),lbe=n(ua,"UL",{});var Q5t=s(lbe);_T=n(Q5t,"LI",{});var JIe=s(_T);ibe=n(JIe,"STRONG",{});var H5t=s(ibe);fsr=r(H5t,"tapas"),H5t.forEach(t),msr=r(JIe," \u2014 "),vQ=n(JIe,"A",{href:!0});var U5t=s(vQ);gsr=r(U5t,"TapasForQuestionAnswering"),U5t.forEach(t),hsr=r(JIe," (TAPAS model)"),JIe.forEach(t),Q5t.forEach(t),psr=i(ua),uT=n(ua,"P",{});var YIe=s(uT);_sr=r(YIe,"The model is set in evaluation mode by default using "),dbe=n(YIe,"CODE",{});var J5t=s(dbe);usr=r(J5t,"model.eval()"),J5t.forEach(t),bsr=r(YIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cbe=n(YIe,"CODE",{});var Y5t=s(cbe);vsr=r(Y5t,"model.train()"),Y5t.forEach(t),YIe.forEach(t),Fsr=i(ua),T(bT.$$.fragment,ua),ua.forEach(t),ml.forEach(t),XXe=i(f),Fd=n(f,"H2",{class:!0});var JWe=s(Fd);vT=n(JWe,"A",{id:!0,class:!0,href:!0});var K5t=s(vT);fbe=n(K5t,"SPAN",{});var Z5t=s(fbe);T(PL.$$.fragment,Z5t),Z5t.forEach(t),K5t.forEach(t),Tsr=i(JWe),mbe=n(JWe,"SPAN",{});var e0t=s(mbe);Msr=r(e0t,"AutoModelForImageClassification"),e0t.forEach(t),JWe.forEach(t),zXe=i(f),Go=n(f,"DIV",{class:!0});var gl=s(Go);T(BL.$$.fragment,gl),Esr=i(gl),Td=n(gl,"P",{});var nte=s(Td);Csr=r(nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),FQ=n(nte,"A",{href:!0});var o0t=s(FQ);wsr=r(o0t,"from_pretrained()"),o0t.forEach(t),Asr=r(nte," class method or the "),TQ=n(nte,"A",{href:!0});var r0t=s(TQ);Lsr=r(r0t,"from_config()"),r0t.forEach(t),ysr=r(nte,` class
method.`),nte.forEach(t),xsr=i(gl),IL=n(gl,"P",{});var YWe=s(IL);$sr=r(YWe,"This class cannot be instantiated directly using "),gbe=n(YWe,"CODE",{});var t0t=s(gbe);ksr=r(t0t,"__init__()"),t0t.forEach(t),Ssr=r(YWe," (throws an error)."),YWe.forEach(t),Rsr=i(gl),bt=n(gl,"DIV",{class:!0});var Rw=s(bt);T(NL.$$.fragment,Rw),Psr=i(Rw),hbe=n(Rw,"P",{});var a0t=s(hbe);Bsr=r(a0t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),a0t.forEach(t),Isr=i(Rw),Md=n(Rw,"P",{});var ste=s(Md);Nsr=r(ste,`Note:
Loading a model from its configuration file does `),pbe=n(ste,"STRONG",{});var n0t=s(pbe);qsr=r(n0t,"not"),n0t.forEach(t),jsr=r(ste,` load the model weights. It only affects the
model\u2019s configuration. Use `),MQ=n(ste,"A",{href:!0});var s0t=s(MQ);Dsr=r(s0t,"from_pretrained()"),s0t.forEach(t),Gsr=r(ste," to load the model weights."),ste.forEach(t),Osr=i(Rw),T(FT.$$.fragment,Rw),Rw.forEach(t),Vsr=i(gl),lo=n(gl,"DIV",{class:!0});var ba=s(lo);T(qL.$$.fragment,ba),Xsr=i(ba),_be=n(ba,"P",{});var l0t=s(_be);zsr=r(l0t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),l0t.forEach(t),Wsr=i(ba),Qa=n(ba,"P",{});var Pw=s(Qa);Qsr=r(Pw,"The model class to instantiate is selected based on the "),ube=n(Pw,"CODE",{});var i0t=s(ube);Hsr=r(i0t,"model_type"),i0t.forEach(t),Usr=r(Pw,` property of the config object (either
passed as an argument or loaded from `),bbe=n(Pw,"CODE",{});var d0t=s(bbe);Jsr=r(d0t,"pretrained_model_name_or_path"),d0t.forEach(t),Ysr=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vbe=n(Pw,"CODE",{});var c0t=s(vbe);Ksr=r(c0t,"pretrained_model_name_or_path"),c0t.forEach(t),Zsr=r(Pw,":"),Pw.forEach(t),elr=i(ba),ve=n(ba,"UL",{});var Te=s(ve);TT=n(Te,"LI",{});var KIe=s(TT);Fbe=n(KIe,"STRONG",{});var f0t=s(Fbe);olr=r(f0t,"beit"),f0t.forEach(t),rlr=r(KIe," \u2014 "),EQ=n(KIe,"A",{href:!0});var m0t=s(EQ);tlr=r(m0t,"BeitForImageClassification"),m0t.forEach(t),alr=r(KIe," (BEiT model)"),KIe.forEach(t),nlr=i(Te),MT=n(Te,"LI",{});var ZIe=s(MT);Tbe=n(ZIe,"STRONG",{});var g0t=s(Tbe);slr=r(g0t,"convnext"),g0t.forEach(t),llr=r(ZIe," \u2014 "),CQ=n(ZIe,"A",{href:!0});var h0t=s(CQ);ilr=r(h0t,"ConvNextForImageClassification"),h0t.forEach(t),dlr=r(ZIe," (ConvNeXT model)"),ZIe.forEach(t),clr=i(Te),ET=n(Te,"LI",{});var eNe=s(ET);Mbe=n(eNe,"STRONG",{});var p0t=s(Mbe);flr=r(p0t,"cvt"),p0t.forEach(t),mlr=r(eNe," \u2014 "),wQ=n(eNe,"A",{href:!0});var _0t=s(wQ);glr=r(_0t,"CvtForImageClassification"),_0t.forEach(t),hlr=r(eNe," (CvT model)"),eNe.forEach(t),plr=i(Te),CT=n(Te,"LI",{});var oNe=s(CT);Ebe=n(oNe,"STRONG",{});var u0t=s(Ebe);_lr=r(u0t,"data2vec-vision"),u0t.forEach(t),ulr=r(oNe," \u2014 "),AQ=n(oNe,"A",{href:!0});var b0t=s(AQ);blr=r(b0t,"Data2VecVisionForImageClassification"),b0t.forEach(t),vlr=r(oNe," (Data2VecVision model)"),oNe.forEach(t),Flr=i(Te),Us=n(Te,"LI",{});var BS=s(Us);Cbe=n(BS,"STRONG",{});var v0t=s(Cbe);Tlr=r(v0t,"deit"),v0t.forEach(t),Mlr=r(BS," \u2014 "),LQ=n(BS,"A",{href:!0});var F0t=s(LQ);Elr=r(F0t,"DeiTForImageClassification"),F0t.forEach(t),Clr=r(BS," or "),yQ=n(BS,"A",{href:!0});var T0t=s(yQ);wlr=r(T0t,"DeiTForImageClassificationWithTeacher"),T0t.forEach(t),Alr=r(BS," (DeiT model)"),BS.forEach(t),Llr=i(Te),wT=n(Te,"LI",{});var rNe=s(wT);wbe=n(rNe,"STRONG",{});var M0t=s(wbe);ylr=r(M0t,"imagegpt"),M0t.forEach(t),xlr=r(rNe," \u2014 "),xQ=n(rNe,"A",{href:!0});var E0t=s(xQ);$lr=r(E0t,"ImageGPTForImageClassification"),E0t.forEach(t),klr=r(rNe," (ImageGPT model)"),rNe.forEach(t),Slr=i(Te),Js=n(Te,"LI",{});var IS=s(Js);Abe=n(IS,"STRONG",{});var C0t=s(Abe);Rlr=r(C0t,"levit"),C0t.forEach(t),Plr=r(IS," \u2014 "),$Q=n(IS,"A",{href:!0});var w0t=s($Q);Blr=r(w0t,"LevitForImageClassification"),w0t.forEach(t),Ilr=r(IS," or "),kQ=n(IS,"A",{href:!0});var A0t=s(kQ);Nlr=r(A0t,"LevitForImageClassificationWithTeacher"),A0t.forEach(t),qlr=r(IS," (LeViT model)"),IS.forEach(t),jlr=i(Te),AT=n(Te,"LI",{});var tNe=s(AT);Lbe=n(tNe,"STRONG",{});var L0t=s(Lbe);Dlr=r(L0t,"mobilevit"),L0t.forEach(t),Glr=r(tNe," \u2014 "),SQ=n(tNe,"A",{href:!0});var y0t=s(SQ);Olr=r(y0t,"MobileViTForImageClassification"),y0t.forEach(t),Vlr=r(tNe," (MobileViT model)"),tNe.forEach(t),Xlr=i(Te),vt=n(Te,"LI",{});var Rf=s(vt);ybe=n(Rf,"STRONG",{});var x0t=s(ybe);zlr=r(x0t,"perceiver"),x0t.forEach(t),Wlr=r(Rf," \u2014 "),RQ=n(Rf,"A",{href:!0});var $0t=s(RQ);Qlr=r($0t,"PerceiverForImageClassificationLearned"),$0t.forEach(t),Hlr=r(Rf," or "),PQ=n(Rf,"A",{href:!0});var k0t=s(PQ);Ulr=r(k0t,"PerceiverForImageClassificationFourier"),k0t.forEach(t),Jlr=r(Rf," or "),BQ=n(Rf,"A",{href:!0});var S0t=s(BQ);Ylr=r(S0t,"PerceiverForImageClassificationConvProcessing"),S0t.forEach(t),Klr=r(Rf," (Perceiver model)"),Rf.forEach(t),Zlr=i(Te),LT=n(Te,"LI",{});var aNe=s(LT);xbe=n(aNe,"STRONG",{});var R0t=s(xbe);eir=r(R0t,"poolformer"),R0t.forEach(t),oir=r(aNe," \u2014 "),IQ=n(aNe,"A",{href:!0});var P0t=s(IQ);rir=r(P0t,"PoolFormerForImageClassification"),P0t.forEach(t),tir=r(aNe," (PoolFormer model)"),aNe.forEach(t),air=i(Te),yT=n(Te,"LI",{});var nNe=s(yT);$be=n(nNe,"STRONG",{});var B0t=s($be);nir=r(B0t,"regnet"),B0t.forEach(t),sir=r(nNe," \u2014 "),NQ=n(nNe,"A",{href:!0});var I0t=s(NQ);lir=r(I0t,"RegNetForImageClassification"),I0t.forEach(t),iir=r(nNe," (RegNet model)"),nNe.forEach(t),dir=i(Te),xT=n(Te,"LI",{});var sNe=s(xT);kbe=n(sNe,"STRONG",{});var N0t=s(kbe);cir=r(N0t,"resnet"),N0t.forEach(t),fir=r(sNe," \u2014 "),qQ=n(sNe,"A",{href:!0});var q0t=s(qQ);mir=r(q0t,"ResNetForImageClassification"),q0t.forEach(t),gir=r(sNe," (ResNet model)"),sNe.forEach(t),hir=i(Te),$T=n(Te,"LI",{});var lNe=s($T);Sbe=n(lNe,"STRONG",{});var j0t=s(Sbe);pir=r(j0t,"segformer"),j0t.forEach(t),_ir=r(lNe," \u2014 "),jQ=n(lNe,"A",{href:!0});var D0t=s(jQ);uir=r(D0t,"SegformerForImageClassification"),D0t.forEach(t),bir=r(lNe," (SegFormer model)"),lNe.forEach(t),vir=i(Te),kT=n(Te,"LI",{});var iNe=s(kT);Rbe=n(iNe,"STRONG",{});var G0t=s(Rbe);Fir=r(G0t,"swin"),G0t.forEach(t),Tir=r(iNe," \u2014 "),DQ=n(iNe,"A",{href:!0});var O0t=s(DQ);Mir=r(O0t,"SwinForImageClassification"),O0t.forEach(t),Eir=r(iNe," (Swin Transformer model)"),iNe.forEach(t),Cir=i(Te),ST=n(Te,"LI",{});var dNe=s(ST);Pbe=n(dNe,"STRONG",{});var V0t=s(Pbe);wir=r(V0t,"van"),V0t.forEach(t),Air=r(dNe," \u2014 "),GQ=n(dNe,"A",{href:!0});var X0t=s(GQ);Lir=r(X0t,"VanForImageClassification"),X0t.forEach(t),yir=r(dNe," (VAN model)"),dNe.forEach(t),xir=i(Te),RT=n(Te,"LI",{});var cNe=s(RT);Bbe=n(cNe,"STRONG",{});var z0t=s(Bbe);$ir=r(z0t,"vit"),z0t.forEach(t),kir=r(cNe," \u2014 "),OQ=n(cNe,"A",{href:!0});var W0t=s(OQ);Sir=r(W0t,"ViTForImageClassification"),W0t.forEach(t),Rir=r(cNe," (ViT model)"),cNe.forEach(t),Te.forEach(t),Pir=i(ba),PT=n(ba,"P",{});var fNe=s(PT);Bir=r(fNe,"The model is set in evaluation mode by default using "),Ibe=n(fNe,"CODE",{});var Q0t=s(Ibe);Iir=r(Q0t,"model.eval()"),Q0t.forEach(t),Nir=r(fNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nbe=n(fNe,"CODE",{});var H0t=s(Nbe);qir=r(H0t,"model.train()"),H0t.forEach(t),fNe.forEach(t),jir=i(ba),T(BT.$$.fragment,ba),ba.forEach(t),gl.forEach(t),WXe=i(f),Ed=n(f,"H2",{class:!0});var KWe=s(Ed);IT=n(KWe,"A",{id:!0,class:!0,href:!0});var U0t=s(IT);qbe=n(U0t,"SPAN",{});var J0t=s(qbe);T(jL.$$.fragment,J0t),J0t.forEach(t),U0t.forEach(t),Dir=i(KWe),jbe=n(KWe,"SPAN",{});var Y0t=s(jbe);Gir=r(Y0t,"AutoModelForVision2Seq"),Y0t.forEach(t),KWe.forEach(t),QXe=i(f),Oo=n(f,"DIV",{class:!0});var hl=s(Oo);T(DL.$$.fragment,hl),Oir=i(hl),Cd=n(hl,"P",{});var lte=s(Cd);Vir=r(lte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),VQ=n(lte,"A",{href:!0});var K0t=s(VQ);Xir=r(K0t,"from_pretrained()"),K0t.forEach(t),zir=r(lte," class method or the "),XQ=n(lte,"A",{href:!0});var Z0t=s(XQ);Wir=r(Z0t,"from_config()"),Z0t.forEach(t),Qir=r(lte,` class
method.`),lte.forEach(t),Hir=i(hl),GL=n(hl,"P",{});var ZWe=s(GL);Uir=r(ZWe,"This class cannot be instantiated directly using "),Dbe=n(ZWe,"CODE",{});var ewt=s(Dbe);Jir=r(ewt,"__init__()"),ewt.forEach(t),Yir=r(ZWe," (throws an error)."),ZWe.forEach(t),Kir=i(hl),Ft=n(hl,"DIV",{class:!0});var Bw=s(Ft);T(OL.$$.fragment,Bw),Zir=i(Bw),Gbe=n(Bw,"P",{});var owt=s(Gbe);edr=r(owt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),owt.forEach(t),odr=i(Bw),wd=n(Bw,"P",{});var ite=s(wd);rdr=r(ite,`Note:
Loading a model from its configuration file does `),Obe=n(ite,"STRONG",{});var rwt=s(Obe);tdr=r(rwt,"not"),rwt.forEach(t),adr=r(ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),zQ=n(ite,"A",{href:!0});var twt=s(zQ);ndr=r(twt,"from_pretrained()"),twt.forEach(t),sdr=r(ite," to load the model weights."),ite.forEach(t),ldr=i(Bw),T(NT.$$.fragment,Bw),Bw.forEach(t),idr=i(hl),io=n(hl,"DIV",{class:!0});var va=s(io);T(VL.$$.fragment,va),ddr=i(va),Vbe=n(va,"P",{});var awt=s(Vbe);cdr=r(awt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),awt.forEach(t),fdr=i(va),Ha=n(va,"P",{});var Iw=s(Ha);mdr=r(Iw,"The model class to instantiate is selected based on the "),Xbe=n(Iw,"CODE",{});var nwt=s(Xbe);gdr=r(nwt,"model_type"),nwt.forEach(t),hdr=r(Iw,` property of the config object (either
passed as an argument or loaded from `),zbe=n(Iw,"CODE",{});var swt=s(zbe);pdr=r(swt,"pretrained_model_name_or_path"),swt.forEach(t),_dr=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wbe=n(Iw,"CODE",{});var lwt=s(Wbe);udr=r(lwt,"pretrained_model_name_or_path"),lwt.forEach(t),bdr=r(Iw,":"),Iw.forEach(t),vdr=i(va),Qbe=n(va,"UL",{});var iwt=s(Qbe);qT=n(iwt,"LI",{});var mNe=s(qT);Hbe=n(mNe,"STRONG",{});var dwt=s(Hbe);Fdr=r(dwt,"vision-encoder-decoder"),dwt.forEach(t),Tdr=r(mNe," \u2014 "),WQ=n(mNe,"A",{href:!0});var cwt=s(WQ);Mdr=r(cwt,"VisionEncoderDecoderModel"),cwt.forEach(t),Edr=r(mNe," (Vision Encoder decoder model)"),mNe.forEach(t),iwt.forEach(t),Cdr=i(va),jT=n(va,"P",{});var gNe=s(jT);wdr=r(gNe,"The model is set in evaluation mode by default using "),Ube=n(gNe,"CODE",{});var fwt=s(Ube);Adr=r(fwt,"model.eval()"),fwt.forEach(t),Ldr=r(gNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jbe=n(gNe,"CODE",{});var mwt=s(Jbe);ydr=r(mwt,"model.train()"),mwt.forEach(t),gNe.forEach(t),xdr=i(va),T(DT.$$.fragment,va),va.forEach(t),hl.forEach(t),HXe=i(f),Ad=n(f,"H2",{class:!0});var eQe=s(Ad);GT=n(eQe,"A",{id:!0,class:!0,href:!0});var gwt=s(GT);Ybe=n(gwt,"SPAN",{});var hwt=s(Ybe);T(XL.$$.fragment,hwt),hwt.forEach(t),gwt.forEach(t),$dr=i(eQe),Kbe=n(eQe,"SPAN",{});var pwt=s(Kbe);kdr=r(pwt,"AutoModelForVisualQuestionAnswering"),pwt.forEach(t),eQe.forEach(t),UXe=i(f),Vo=n(f,"DIV",{class:!0});var pl=s(Vo);T(zL.$$.fragment,pl),Sdr=i(pl),Ld=n(pl,"P",{});var dte=s(Ld);Rdr=r(dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),QQ=n(dte,"A",{href:!0});var _wt=s(QQ);Pdr=r(_wt,"from_pretrained()"),_wt.forEach(t),Bdr=r(dte," class method or the "),HQ=n(dte,"A",{href:!0});var uwt=s(HQ);Idr=r(uwt,"from_config()"),uwt.forEach(t),Ndr=r(dte,` class
method.`),dte.forEach(t),qdr=i(pl),WL=n(pl,"P",{});var oQe=s(WL);jdr=r(oQe,"This class cannot be instantiated directly using "),Zbe=n(oQe,"CODE",{});var bwt=s(Zbe);Ddr=r(bwt,"__init__()"),bwt.forEach(t),Gdr=r(oQe," (throws an error)."),oQe.forEach(t),Odr=i(pl),Tt=n(pl,"DIV",{class:!0});var Nw=s(Tt);T(QL.$$.fragment,Nw),Vdr=i(Nw),eve=n(Nw,"P",{});var vwt=s(eve);Xdr=r(vwt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),vwt.forEach(t),zdr=i(Nw),yd=n(Nw,"P",{});var cte=s(yd);Wdr=r(cte,`Note:
Loading a model from its configuration file does `),ove=n(cte,"STRONG",{});var Fwt=s(ove);Qdr=r(Fwt,"not"),Fwt.forEach(t),Hdr=r(cte,` load the model weights. It only affects the
model\u2019s configuration. Use `),UQ=n(cte,"A",{href:!0});var Twt=s(UQ);Udr=r(Twt,"from_pretrained()"),Twt.forEach(t),Jdr=r(cte," to load the model weights."),cte.forEach(t),Ydr=i(Nw),T(OT.$$.fragment,Nw),Nw.forEach(t),Kdr=i(pl),co=n(pl,"DIV",{class:!0});var Fa=s(co);T(HL.$$.fragment,Fa),Zdr=i(Fa),rve=n(Fa,"P",{});var Mwt=s(rve);ecr=r(Mwt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Mwt.forEach(t),ocr=i(Fa),Ua=n(Fa,"P",{});var qw=s(Ua);rcr=r(qw,"The model class to instantiate is selected based on the "),tve=n(qw,"CODE",{});var Ewt=s(tve);tcr=r(Ewt,"model_type"),Ewt.forEach(t),acr=r(qw,` property of the config object (either
passed as an argument or loaded from `),ave=n(qw,"CODE",{});var Cwt=s(ave);ncr=r(Cwt,"pretrained_model_name_or_path"),Cwt.forEach(t),scr=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nve=n(qw,"CODE",{});var wwt=s(nve);lcr=r(wwt,"pretrained_model_name_or_path"),wwt.forEach(t),icr=r(qw,":"),qw.forEach(t),dcr=i(Fa),sve=n(Fa,"UL",{});var Awt=s(sve);VT=n(Awt,"LI",{});var hNe=s(VT);lve=n(hNe,"STRONG",{});var Lwt=s(lve);ccr=r(Lwt,"vilt"),Lwt.forEach(t),fcr=r(hNe," \u2014 "),JQ=n(hNe,"A",{href:!0});var ywt=s(JQ);mcr=r(ywt,"ViltForQuestionAnswering"),ywt.forEach(t),gcr=r(hNe," (ViLT model)"),hNe.forEach(t),Awt.forEach(t),hcr=i(Fa),XT=n(Fa,"P",{});var pNe=s(XT);pcr=r(pNe,"The model is set in evaluation mode by default using "),ive=n(pNe,"CODE",{});var xwt=s(ive);_cr=r(xwt,"model.eval()"),xwt.forEach(t),ucr=r(pNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dve=n(pNe,"CODE",{});var $wt=s(dve);bcr=r($wt,"model.train()"),$wt.forEach(t),pNe.forEach(t),vcr=i(Fa),T(zT.$$.fragment,Fa),Fa.forEach(t),pl.forEach(t),JXe=i(f),xd=n(f,"H2",{class:!0});var rQe=s(xd);WT=n(rQe,"A",{id:!0,class:!0,href:!0});var kwt=s(WT);cve=n(kwt,"SPAN",{});var Swt=s(cve);T(UL.$$.fragment,Swt),Swt.forEach(t),kwt.forEach(t),Fcr=i(rQe),fve=n(rQe,"SPAN",{});var Rwt=s(fve);Tcr=r(Rwt,"AutoModelForAudioClassification"),Rwt.forEach(t),rQe.forEach(t),YXe=i(f),Xo=n(f,"DIV",{class:!0});var _l=s(Xo);T(JL.$$.fragment,_l),Mcr=i(_l),$d=n(_l,"P",{});var fte=s($d);Ecr=r(fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),YQ=n(fte,"A",{href:!0});var Pwt=s(YQ);Ccr=r(Pwt,"from_pretrained()"),Pwt.forEach(t),wcr=r(fte," class method or the "),KQ=n(fte,"A",{href:!0});var Bwt=s(KQ);Acr=r(Bwt,"from_config()"),Bwt.forEach(t),Lcr=r(fte,` class
method.`),fte.forEach(t),ycr=i(_l),YL=n(_l,"P",{});var tQe=s(YL);xcr=r(tQe,"This class cannot be instantiated directly using "),mve=n(tQe,"CODE",{});var Iwt=s(mve);$cr=r(Iwt,"__init__()"),Iwt.forEach(t),kcr=r(tQe," (throws an error)."),tQe.forEach(t),Scr=i(_l),Mt=n(_l,"DIV",{class:!0});var jw=s(Mt);T(KL.$$.fragment,jw),Rcr=i(jw),gve=n(jw,"P",{});var Nwt=s(gve);Pcr=r(Nwt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Nwt.forEach(t),Bcr=i(jw),kd=n(jw,"P",{});var mte=s(kd);Icr=r(mte,`Note:
Loading a model from its configuration file does `),hve=n(mte,"STRONG",{});var qwt=s(hve);Ncr=r(qwt,"not"),qwt.forEach(t),qcr=r(mte,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZQ=n(mte,"A",{href:!0});var jwt=s(ZQ);jcr=r(jwt,"from_pretrained()"),jwt.forEach(t),Dcr=r(mte," to load the model weights."),mte.forEach(t),Gcr=i(jw),T(QT.$$.fragment,jw),jw.forEach(t),Ocr=i(_l),fo=n(_l,"DIV",{class:!0});var Ta=s(fo);T(ZL.$$.fragment,Ta),Vcr=i(Ta),pve=n(Ta,"P",{});var Dwt=s(pve);Xcr=r(Dwt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Dwt.forEach(t),zcr=i(Ta),Ja=n(Ta,"P",{});var Dw=s(Ja);Wcr=r(Dw,"The model class to instantiate is selected based on the "),_ve=n(Dw,"CODE",{});var Gwt=s(_ve);Qcr=r(Gwt,"model_type"),Gwt.forEach(t),Hcr=r(Dw,` property of the config object (either
passed as an argument or loaded from `),uve=n(Dw,"CODE",{});var Owt=s(uve);Ucr=r(Owt,"pretrained_model_name_or_path"),Owt.forEach(t),Jcr=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bve=n(Dw,"CODE",{});var Vwt=s(bve);Ycr=r(Vwt,"pretrained_model_name_or_path"),Vwt.forEach(t),Kcr=r(Dw,":"),Dw.forEach(t),Zcr=i(Ta),Pe=n(Ta,"UL",{});var ze=s(Pe);HT=n(ze,"LI",{});var _Ne=s(HT);vve=n(_Ne,"STRONG",{});var Xwt=s(vve);efr=r(Xwt,"data2vec-audio"),Xwt.forEach(t),ofr=r(_Ne," \u2014 "),eH=n(_Ne,"A",{href:!0});var zwt=s(eH);rfr=r(zwt,"Data2VecAudioForSequenceClassification"),zwt.forEach(t),tfr=r(_Ne," (Data2VecAudio model)"),_Ne.forEach(t),afr=i(ze),UT=n(ze,"LI",{});var uNe=s(UT);Fve=n(uNe,"STRONG",{});var Wwt=s(Fve);nfr=r(Wwt,"hubert"),Wwt.forEach(t),sfr=r(uNe," \u2014 "),oH=n(uNe,"A",{href:!0});var Qwt=s(oH);lfr=r(Qwt,"HubertForSequenceClassification"),Qwt.forEach(t),ifr=r(uNe," (Hubert model)"),uNe.forEach(t),dfr=i(ze),JT=n(ze,"LI",{});var bNe=s(JT);Tve=n(bNe,"STRONG",{});var Hwt=s(Tve);cfr=r(Hwt,"sew"),Hwt.forEach(t),ffr=r(bNe," \u2014 "),rH=n(bNe,"A",{href:!0});var Uwt=s(rH);mfr=r(Uwt,"SEWForSequenceClassification"),Uwt.forEach(t),gfr=r(bNe," (SEW model)"),bNe.forEach(t),hfr=i(ze),YT=n(ze,"LI",{});var vNe=s(YT);Mve=n(vNe,"STRONG",{});var Jwt=s(Mve);pfr=r(Jwt,"sew-d"),Jwt.forEach(t),_fr=r(vNe," \u2014 "),tH=n(vNe,"A",{href:!0});var Ywt=s(tH);ufr=r(Ywt,"SEWDForSequenceClassification"),Ywt.forEach(t),bfr=r(vNe," (SEW-D model)"),vNe.forEach(t),vfr=i(ze),KT=n(ze,"LI",{});var FNe=s(KT);Eve=n(FNe,"STRONG",{});var Kwt=s(Eve);Ffr=r(Kwt,"unispeech"),Kwt.forEach(t),Tfr=r(FNe," \u2014 "),aH=n(FNe,"A",{href:!0});var Zwt=s(aH);Mfr=r(Zwt,"UniSpeechForSequenceClassification"),Zwt.forEach(t),Efr=r(FNe," (UniSpeech model)"),FNe.forEach(t),Cfr=i(ze),ZT=n(ze,"LI",{});var TNe=s(ZT);Cve=n(TNe,"STRONG",{});var eAt=s(Cve);wfr=r(eAt,"unispeech-sat"),eAt.forEach(t),Afr=r(TNe," \u2014 "),nH=n(TNe,"A",{href:!0});var oAt=s(nH);Lfr=r(oAt,"UniSpeechSatForSequenceClassification"),oAt.forEach(t),yfr=r(TNe," (UniSpeechSat model)"),TNe.forEach(t),xfr=i(ze),e7=n(ze,"LI",{});var MNe=s(e7);wve=n(MNe,"STRONG",{});var rAt=s(wve);$fr=r(rAt,"wav2vec2"),rAt.forEach(t),kfr=r(MNe," \u2014 "),sH=n(MNe,"A",{href:!0});var tAt=s(sH);Sfr=r(tAt,"Wav2Vec2ForSequenceClassification"),tAt.forEach(t),Rfr=r(MNe," (Wav2Vec2 model)"),MNe.forEach(t),Pfr=i(ze),o7=n(ze,"LI",{});var ENe=s(o7);Ave=n(ENe,"STRONG",{});var aAt=s(Ave);Bfr=r(aAt,"wav2vec2-conformer"),aAt.forEach(t),Ifr=r(ENe," \u2014 "),lH=n(ENe,"A",{href:!0});var nAt=s(lH);Nfr=r(nAt,"Wav2Vec2ConformerForSequenceClassification"),nAt.forEach(t),qfr=r(ENe," (Wav2Vec2-Conformer model)"),ENe.forEach(t),jfr=i(ze),r7=n(ze,"LI",{});var CNe=s(r7);Lve=n(CNe,"STRONG",{});var sAt=s(Lve);Dfr=r(sAt,"wavlm"),sAt.forEach(t),Gfr=r(CNe," \u2014 "),iH=n(CNe,"A",{href:!0});var lAt=s(iH);Ofr=r(lAt,"WavLMForSequenceClassification"),lAt.forEach(t),Vfr=r(CNe," (WavLM model)"),CNe.forEach(t),ze.forEach(t),Xfr=i(Ta),t7=n(Ta,"P",{});var wNe=s(t7);zfr=r(wNe,"The model is set in evaluation mode by default using "),yve=n(wNe,"CODE",{});var iAt=s(yve);Wfr=r(iAt,"model.eval()"),iAt.forEach(t),Qfr=r(wNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xve=n(wNe,"CODE",{});var dAt=s(xve);Hfr=r(dAt,"model.train()"),dAt.forEach(t),wNe.forEach(t),Ufr=i(Ta),T(a7.$$.fragment,Ta),Ta.forEach(t),_l.forEach(t),KXe=i(f),Sd=n(f,"H2",{class:!0});var aQe=s(Sd);n7=n(aQe,"A",{id:!0,class:!0,href:!0});var cAt=s(n7);$ve=n(cAt,"SPAN",{});var fAt=s($ve);T(ey.$$.fragment,fAt),fAt.forEach(t),cAt.forEach(t),Jfr=i(aQe),kve=n(aQe,"SPAN",{});var mAt=s(kve);Yfr=r(mAt,"AutoModelForAudioFrameClassification"),mAt.forEach(t),aQe.forEach(t),ZXe=i(f),zo=n(f,"DIV",{class:!0});var ul=s(zo);T(oy.$$.fragment,ul),Kfr=i(ul),Rd=n(ul,"P",{});var gte=s(Rd);Zfr=r(gte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),dH=n(gte,"A",{href:!0});var gAt=s(dH);emr=r(gAt,"from_pretrained()"),gAt.forEach(t),omr=r(gte," class method or the "),cH=n(gte,"A",{href:!0});var hAt=s(cH);rmr=r(hAt,"from_config()"),hAt.forEach(t),tmr=r(gte,` class
method.`),gte.forEach(t),amr=i(ul),ry=n(ul,"P",{});var nQe=s(ry);nmr=r(nQe,"This class cannot be instantiated directly using "),Sve=n(nQe,"CODE",{});var pAt=s(Sve);smr=r(pAt,"__init__()"),pAt.forEach(t),lmr=r(nQe," (throws an error)."),nQe.forEach(t),imr=i(ul),Et=n(ul,"DIV",{class:!0});var Gw=s(Et);T(ty.$$.fragment,Gw),dmr=i(Gw),Rve=n(Gw,"P",{});var _At=s(Rve);cmr=r(_At,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),_At.forEach(t),fmr=i(Gw),Pd=n(Gw,"P",{});var hte=s(Pd);mmr=r(hte,`Note:
Loading a model from its configuration file does `),Pve=n(hte,"STRONG",{});var uAt=s(Pve);gmr=r(uAt,"not"),uAt.forEach(t),hmr=r(hte,` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=n(hte,"A",{href:!0});var bAt=s(fH);pmr=r(bAt,"from_pretrained()"),bAt.forEach(t),_mr=r(hte," to load the model weights."),hte.forEach(t),umr=i(Gw),T(s7.$$.fragment,Gw),Gw.forEach(t),bmr=i(ul),mo=n(ul,"DIV",{class:!0});var Ma=s(mo);T(ay.$$.fragment,Ma),vmr=i(Ma),Bve=n(Ma,"P",{});var vAt=s(Bve);Fmr=r(vAt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),vAt.forEach(t),Tmr=i(Ma),Ya=n(Ma,"P",{});var Ow=s(Ya);Mmr=r(Ow,"The model class to instantiate is selected based on the "),Ive=n(Ow,"CODE",{});var FAt=s(Ive);Emr=r(FAt,"model_type"),FAt.forEach(t),Cmr=r(Ow,` property of the config object (either
passed as an argument or loaded from `),Nve=n(Ow,"CODE",{});var TAt=s(Nve);wmr=r(TAt,"pretrained_model_name_or_path"),TAt.forEach(t),Amr=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qve=n(Ow,"CODE",{});var MAt=s(qve);Lmr=r(MAt,"pretrained_model_name_or_path"),MAt.forEach(t),ymr=r(Ow,":"),Ow.forEach(t),xmr=i(Ma),ot=n(Ma,"UL",{});var bl=s(ot);l7=n(bl,"LI",{});var ANe=s(l7);jve=n(ANe,"STRONG",{});var EAt=s(jve);$mr=r(EAt,"data2vec-audio"),EAt.forEach(t),kmr=r(ANe," \u2014 "),mH=n(ANe,"A",{href:!0});var CAt=s(mH);Smr=r(CAt,"Data2VecAudioForAudioFrameClassification"),CAt.forEach(t),Rmr=r(ANe," (Data2VecAudio model)"),ANe.forEach(t),Pmr=i(bl),i7=n(bl,"LI",{});var LNe=s(i7);Dve=n(LNe,"STRONG",{});var wAt=s(Dve);Bmr=r(wAt,"unispeech-sat"),wAt.forEach(t),Imr=r(LNe," \u2014 "),gH=n(LNe,"A",{href:!0});var AAt=s(gH);Nmr=r(AAt,"UniSpeechSatForAudioFrameClassification"),AAt.forEach(t),qmr=r(LNe," (UniSpeechSat model)"),LNe.forEach(t),jmr=i(bl),d7=n(bl,"LI",{});var yNe=s(d7);Gve=n(yNe,"STRONG",{});var LAt=s(Gve);Dmr=r(LAt,"wav2vec2"),LAt.forEach(t),Gmr=r(yNe," \u2014 "),hH=n(yNe,"A",{href:!0});var yAt=s(hH);Omr=r(yAt,"Wav2Vec2ForAudioFrameClassification"),yAt.forEach(t),Vmr=r(yNe," (Wav2Vec2 model)"),yNe.forEach(t),Xmr=i(bl),c7=n(bl,"LI",{});var xNe=s(c7);Ove=n(xNe,"STRONG",{});var xAt=s(Ove);zmr=r(xAt,"wav2vec2-conformer"),xAt.forEach(t),Wmr=r(xNe," \u2014 "),pH=n(xNe,"A",{href:!0});var $At=s(pH);Qmr=r($At,"Wav2Vec2ConformerForAudioFrameClassification"),$At.forEach(t),Hmr=r(xNe," (Wav2Vec2-Conformer model)"),xNe.forEach(t),Umr=i(bl),f7=n(bl,"LI",{});var $Ne=s(f7);Vve=n($Ne,"STRONG",{});var kAt=s(Vve);Jmr=r(kAt,"wavlm"),kAt.forEach(t),Ymr=r($Ne," \u2014 "),_H=n($Ne,"A",{href:!0});var SAt=s(_H);Kmr=r(SAt,"WavLMForAudioFrameClassification"),SAt.forEach(t),Zmr=r($Ne," (WavLM model)"),$Ne.forEach(t),bl.forEach(t),egr=i(Ma),m7=n(Ma,"P",{});var kNe=s(m7);ogr=r(kNe,"The model is set in evaluation mode by default using "),Xve=n(kNe,"CODE",{});var RAt=s(Xve);rgr=r(RAt,"model.eval()"),RAt.forEach(t),tgr=r(kNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zve=n(kNe,"CODE",{});var PAt=s(zve);agr=r(PAt,"model.train()"),PAt.forEach(t),kNe.forEach(t),ngr=i(Ma),T(g7.$$.fragment,Ma),Ma.forEach(t),ul.forEach(t),eze=i(f),Bd=n(f,"H2",{class:!0});var sQe=s(Bd);h7=n(sQe,"A",{id:!0,class:!0,href:!0});var BAt=s(h7);Wve=n(BAt,"SPAN",{});var IAt=s(Wve);T(ny.$$.fragment,IAt),IAt.forEach(t),BAt.forEach(t),sgr=i(sQe),Qve=n(sQe,"SPAN",{});var NAt=s(Qve);lgr=r(NAt,"AutoModelForCTC"),NAt.forEach(t),sQe.forEach(t),oze=i(f),Wo=n(f,"DIV",{class:!0});var vl=s(Wo);T(sy.$$.fragment,vl),igr=i(vl),Id=n(vl,"P",{});var pte=s(Id);dgr=r(pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),uH=n(pte,"A",{href:!0});var qAt=s(uH);cgr=r(qAt,"from_pretrained()"),qAt.forEach(t),fgr=r(pte," class method or the "),bH=n(pte,"A",{href:!0});var jAt=s(bH);mgr=r(jAt,"from_config()"),jAt.forEach(t),ggr=r(pte,` class
method.`),pte.forEach(t),hgr=i(vl),ly=n(vl,"P",{});var lQe=s(ly);pgr=r(lQe,"This class cannot be instantiated directly using "),Hve=n(lQe,"CODE",{});var DAt=s(Hve);_gr=r(DAt,"__init__()"),DAt.forEach(t),ugr=r(lQe," (throws an error)."),lQe.forEach(t),bgr=i(vl),Ct=n(vl,"DIV",{class:!0});var Vw=s(Ct);T(iy.$$.fragment,Vw),vgr=i(Vw),Uve=n(Vw,"P",{});var GAt=s(Uve);Fgr=r(GAt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),GAt.forEach(t),Tgr=i(Vw),Nd=n(Vw,"P",{});var _te=s(Nd);Mgr=r(_te,`Note:
Loading a model from its configuration file does `),Jve=n(_te,"STRONG",{});var OAt=s(Jve);Egr=r(OAt,"not"),OAt.forEach(t),Cgr=r(_te,` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=n(_te,"A",{href:!0});var VAt=s(vH);wgr=r(VAt,"from_pretrained()"),VAt.forEach(t),Agr=r(_te," to load the model weights."),_te.forEach(t),Lgr=i(Vw),T(p7.$$.fragment,Vw),Vw.forEach(t),ygr=i(vl),go=n(vl,"DIV",{class:!0});var Ea=s(go);T(dy.$$.fragment,Ea),xgr=i(Ea),Yve=n(Ea,"P",{});var XAt=s(Yve);$gr=r(XAt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),XAt.forEach(t),kgr=i(Ea),Ka=n(Ea,"P",{});var Xw=s(Ka);Sgr=r(Xw,"The model class to instantiate is selected based on the "),Kve=n(Xw,"CODE",{});var zAt=s(Kve);Rgr=r(zAt,"model_type"),zAt.forEach(t),Pgr=r(Xw,` property of the config object (either
passed as an argument or loaded from `),Zve=n(Xw,"CODE",{});var WAt=s(Zve);Bgr=r(WAt,"pretrained_model_name_or_path"),WAt.forEach(t),Igr=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e3e=n(Xw,"CODE",{});var QAt=s(e3e);Ngr=r(QAt,"pretrained_model_name_or_path"),QAt.forEach(t),qgr=r(Xw,":"),Xw.forEach(t),jgr=i(Ea),Le=n(Ea,"UL",{});var Be=s(Le);_7=n(Be,"LI",{});var SNe=s(_7);o3e=n(SNe,"STRONG",{});var HAt=s(o3e);Dgr=r(HAt,"data2vec-audio"),HAt.forEach(t),Ggr=r(SNe," \u2014 "),FH=n(SNe,"A",{href:!0});var UAt=s(FH);Ogr=r(UAt,"Data2VecAudioForCTC"),UAt.forEach(t),Vgr=r(SNe," (Data2VecAudio model)"),SNe.forEach(t),Xgr=i(Be),u7=n(Be,"LI",{});var RNe=s(u7);r3e=n(RNe,"STRONG",{});var JAt=s(r3e);zgr=r(JAt,"hubert"),JAt.forEach(t),Wgr=r(RNe," \u2014 "),TH=n(RNe,"A",{href:!0});var YAt=s(TH);Qgr=r(YAt,"HubertForCTC"),YAt.forEach(t),Hgr=r(RNe," (Hubert model)"),RNe.forEach(t),Ugr=i(Be),b7=n(Be,"LI",{});var PNe=s(b7);t3e=n(PNe,"STRONG",{});var KAt=s(t3e);Jgr=r(KAt,"mctct"),KAt.forEach(t),Ygr=r(PNe," \u2014 "),MH=n(PNe,"A",{href:!0});var ZAt=s(MH);Kgr=r(ZAt,"MCTCTForCTC"),ZAt.forEach(t),Zgr=r(PNe," (M-CTC-T model)"),PNe.forEach(t),ehr=i(Be),v7=n(Be,"LI",{});var BNe=s(v7);a3e=n(BNe,"STRONG",{});var e6t=s(a3e);ohr=r(e6t,"sew"),e6t.forEach(t),rhr=r(BNe," \u2014 "),EH=n(BNe,"A",{href:!0});var o6t=s(EH);thr=r(o6t,"SEWForCTC"),o6t.forEach(t),ahr=r(BNe," (SEW model)"),BNe.forEach(t),nhr=i(Be),F7=n(Be,"LI",{});var INe=s(F7);n3e=n(INe,"STRONG",{});var r6t=s(n3e);shr=r(r6t,"sew-d"),r6t.forEach(t),lhr=r(INe," \u2014 "),CH=n(INe,"A",{href:!0});var t6t=s(CH);ihr=r(t6t,"SEWDForCTC"),t6t.forEach(t),dhr=r(INe," (SEW-D model)"),INe.forEach(t),chr=i(Be),T7=n(Be,"LI",{});var NNe=s(T7);s3e=n(NNe,"STRONG",{});var a6t=s(s3e);fhr=r(a6t,"unispeech"),a6t.forEach(t),mhr=r(NNe," \u2014 "),wH=n(NNe,"A",{href:!0});var n6t=s(wH);ghr=r(n6t,"UniSpeechForCTC"),n6t.forEach(t),hhr=r(NNe," (UniSpeech model)"),NNe.forEach(t),phr=i(Be),M7=n(Be,"LI",{});var qNe=s(M7);l3e=n(qNe,"STRONG",{});var s6t=s(l3e);_hr=r(s6t,"unispeech-sat"),s6t.forEach(t),uhr=r(qNe," \u2014 "),AH=n(qNe,"A",{href:!0});var l6t=s(AH);bhr=r(l6t,"UniSpeechSatForCTC"),l6t.forEach(t),vhr=r(qNe," (UniSpeechSat model)"),qNe.forEach(t),Fhr=i(Be),E7=n(Be,"LI",{});var jNe=s(E7);i3e=n(jNe,"STRONG",{});var i6t=s(i3e);Thr=r(i6t,"wav2vec2"),i6t.forEach(t),Mhr=r(jNe," \u2014 "),LH=n(jNe,"A",{href:!0});var d6t=s(LH);Ehr=r(d6t,"Wav2Vec2ForCTC"),d6t.forEach(t),Chr=r(jNe," (Wav2Vec2 model)"),jNe.forEach(t),whr=i(Be),C7=n(Be,"LI",{});var DNe=s(C7);d3e=n(DNe,"STRONG",{});var c6t=s(d3e);Ahr=r(c6t,"wav2vec2-conformer"),c6t.forEach(t),Lhr=r(DNe," \u2014 "),yH=n(DNe,"A",{href:!0});var f6t=s(yH);yhr=r(f6t,"Wav2Vec2ConformerForCTC"),f6t.forEach(t),xhr=r(DNe," (Wav2Vec2-Conformer model)"),DNe.forEach(t),$hr=i(Be),w7=n(Be,"LI",{});var GNe=s(w7);c3e=n(GNe,"STRONG",{});var m6t=s(c3e);khr=r(m6t,"wavlm"),m6t.forEach(t),Shr=r(GNe," \u2014 "),xH=n(GNe,"A",{href:!0});var g6t=s(xH);Rhr=r(g6t,"WavLMForCTC"),g6t.forEach(t),Phr=r(GNe," (WavLM model)"),GNe.forEach(t),Be.forEach(t),Bhr=i(Ea),A7=n(Ea,"P",{});var ONe=s(A7);Ihr=r(ONe,"The model is set in evaluation mode by default using "),f3e=n(ONe,"CODE",{});var h6t=s(f3e);Nhr=r(h6t,"model.eval()"),h6t.forEach(t),qhr=r(ONe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m3e=n(ONe,"CODE",{});var p6t=s(m3e);jhr=r(p6t,"model.train()"),p6t.forEach(t),ONe.forEach(t),Dhr=i(Ea),T(L7.$$.fragment,Ea),Ea.forEach(t),vl.forEach(t),rze=i(f),qd=n(f,"H2",{class:!0});var iQe=s(qd);y7=n(iQe,"A",{id:!0,class:!0,href:!0});var _6t=s(y7);g3e=n(_6t,"SPAN",{});var u6t=s(g3e);T(cy.$$.fragment,u6t),u6t.forEach(t),_6t.forEach(t),Ghr=i(iQe),h3e=n(iQe,"SPAN",{});var b6t=s(h3e);Ohr=r(b6t,"AutoModelForSpeechSeq2Seq"),b6t.forEach(t),iQe.forEach(t),tze=i(f),Qo=n(f,"DIV",{class:!0});var Fl=s(Qo);T(fy.$$.fragment,Fl),Vhr=i(Fl),jd=n(Fl,"P",{});var ute=s(jd);Xhr=r(ute,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),$H=n(ute,"A",{href:!0});var v6t=s($H);zhr=r(v6t,"from_pretrained()"),v6t.forEach(t),Whr=r(ute," class method or the "),kH=n(ute,"A",{href:!0});var F6t=s(kH);Qhr=r(F6t,"from_config()"),F6t.forEach(t),Hhr=r(ute,` class
method.`),ute.forEach(t),Uhr=i(Fl),my=n(Fl,"P",{});var dQe=s(my);Jhr=r(dQe,"This class cannot be instantiated directly using "),p3e=n(dQe,"CODE",{});var T6t=s(p3e);Yhr=r(T6t,"__init__()"),T6t.forEach(t),Khr=r(dQe," (throws an error)."),dQe.forEach(t),Zhr=i(Fl),wt=n(Fl,"DIV",{class:!0});var zw=s(wt);T(gy.$$.fragment,zw),epr=i(zw),_3e=n(zw,"P",{});var M6t=s(_3e);opr=r(M6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),M6t.forEach(t),rpr=i(zw),Dd=n(zw,"P",{});var bte=s(Dd);tpr=r(bte,`Note:
Loading a model from its configuration file does `),u3e=n(bte,"STRONG",{});var E6t=s(u3e);apr=r(E6t,"not"),E6t.forEach(t),npr=r(bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),SH=n(bte,"A",{href:!0});var C6t=s(SH);spr=r(C6t,"from_pretrained()"),C6t.forEach(t),lpr=r(bte," to load the model weights."),bte.forEach(t),ipr=i(zw),T(x7.$$.fragment,zw),zw.forEach(t),dpr=i(Fl),ho=n(Fl,"DIV",{class:!0});var Ca=s(ho);T(hy.$$.fragment,Ca),cpr=i(Ca),b3e=n(Ca,"P",{});var w6t=s(b3e);fpr=r(w6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),w6t.forEach(t),mpr=i(Ca),Za=n(Ca,"P",{});var Ww=s(Za);gpr=r(Ww,"The model class to instantiate is selected based on the "),v3e=n(Ww,"CODE",{});var A6t=s(v3e);hpr=r(A6t,"model_type"),A6t.forEach(t),ppr=r(Ww,` property of the config object (either
passed as an argument or loaded from `),F3e=n(Ww,"CODE",{});var L6t=s(F3e);_pr=r(L6t,"pretrained_model_name_or_path"),L6t.forEach(t),upr=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T3e=n(Ww,"CODE",{});var y6t=s(T3e);bpr=r(y6t,"pretrained_model_name_or_path"),y6t.forEach(t),vpr=r(Ww,":"),Ww.forEach(t),Fpr=i(Ca),py=n(Ca,"UL",{});var cQe=s(py);$7=n(cQe,"LI",{});var VNe=s($7);M3e=n(VNe,"STRONG",{});var x6t=s(M3e);Tpr=r(x6t,"speech-encoder-decoder"),x6t.forEach(t),Mpr=r(VNe," \u2014 "),RH=n(VNe,"A",{href:!0});var $6t=s(RH);Epr=r($6t,"SpeechEncoderDecoderModel"),$6t.forEach(t),Cpr=r(VNe," (Speech Encoder decoder model)"),VNe.forEach(t),wpr=i(cQe),k7=n(cQe,"LI",{});var XNe=s(k7);E3e=n(XNe,"STRONG",{});var k6t=s(E3e);Apr=r(k6t,"speech_to_text"),k6t.forEach(t),Lpr=r(XNe," \u2014 "),PH=n(XNe,"A",{href:!0});var S6t=s(PH);ypr=r(S6t,"Speech2TextForConditionalGeneration"),S6t.forEach(t),xpr=r(XNe," (Speech2Text model)"),XNe.forEach(t),cQe.forEach(t),$pr=i(Ca),S7=n(Ca,"P",{});var zNe=s(S7);kpr=r(zNe,"The model is set in evaluation mode by default using "),C3e=n(zNe,"CODE",{});var R6t=s(C3e);Spr=r(R6t,"model.eval()"),R6t.forEach(t),Rpr=r(zNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w3e=n(zNe,"CODE",{});var P6t=s(w3e);Ppr=r(P6t,"model.train()"),P6t.forEach(t),zNe.forEach(t),Bpr=i(Ca),T(R7.$$.fragment,Ca),Ca.forEach(t),Fl.forEach(t),aze=i(f),Gd=n(f,"H2",{class:!0});var fQe=s(Gd);P7=n(fQe,"A",{id:!0,class:!0,href:!0});var B6t=s(P7);A3e=n(B6t,"SPAN",{});var I6t=s(A3e);T(_y.$$.fragment,I6t),I6t.forEach(t),B6t.forEach(t),Ipr=i(fQe),L3e=n(fQe,"SPAN",{});var N6t=s(L3e);Npr=r(N6t,"AutoModelForAudioXVector"),N6t.forEach(t),fQe.forEach(t),nze=i(f),Ho=n(f,"DIV",{class:!0});var Tl=s(Ho);T(uy.$$.fragment,Tl),qpr=i(Tl),Od=n(Tl,"P",{});var vte=s(Od);jpr=r(vte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),BH=n(vte,"A",{href:!0});var q6t=s(BH);Dpr=r(q6t,"from_pretrained()"),q6t.forEach(t),Gpr=r(vte," class method or the "),IH=n(vte,"A",{href:!0});var j6t=s(IH);Opr=r(j6t,"from_config()"),j6t.forEach(t),Vpr=r(vte,` class
method.`),vte.forEach(t),Xpr=i(Tl),by=n(Tl,"P",{});var mQe=s(by);zpr=r(mQe,"This class cannot be instantiated directly using "),y3e=n(mQe,"CODE",{});var D6t=s(y3e);Wpr=r(D6t,"__init__()"),D6t.forEach(t),Qpr=r(mQe," (throws an error)."),mQe.forEach(t),Hpr=i(Tl),At=n(Tl,"DIV",{class:!0});var Qw=s(At);T(vy.$$.fragment,Qw),Upr=i(Qw),x3e=n(Qw,"P",{});var G6t=s(x3e);Jpr=r(G6t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),G6t.forEach(t),Ypr=i(Qw),Vd=n(Qw,"P",{});var Fte=s(Vd);Kpr=r(Fte,`Note:
Loading a model from its configuration file does `),$3e=n(Fte,"STRONG",{});var O6t=s($3e);Zpr=r(O6t,"not"),O6t.forEach(t),e_r=r(Fte,` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=n(Fte,"A",{href:!0});var V6t=s(NH);o_r=r(V6t,"from_pretrained()"),V6t.forEach(t),r_r=r(Fte," to load the model weights."),Fte.forEach(t),t_r=i(Qw),T(B7.$$.fragment,Qw),Qw.forEach(t),a_r=i(Tl),po=n(Tl,"DIV",{class:!0});var wa=s(po);T(Fy.$$.fragment,wa),n_r=i(wa),k3e=n(wa,"P",{});var X6t=s(k3e);s_r=r(X6t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),X6t.forEach(t),l_r=i(wa),en=n(wa,"P",{});var Hw=s(en);i_r=r(Hw,"The model class to instantiate is selected based on the "),S3e=n(Hw,"CODE",{});var z6t=s(S3e);d_r=r(z6t,"model_type"),z6t.forEach(t),c_r=r(Hw,` property of the config object (either
passed as an argument or loaded from `),R3e=n(Hw,"CODE",{});var W6t=s(R3e);f_r=r(W6t,"pretrained_model_name_or_path"),W6t.forEach(t),m_r=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P3e=n(Hw,"CODE",{});var Q6t=s(P3e);g_r=r(Q6t,"pretrained_model_name_or_path"),Q6t.forEach(t),h_r=r(Hw,":"),Hw.forEach(t),p_r=i(wa),rt=n(wa,"UL",{});var Ml=s(rt);I7=n(Ml,"LI",{});var WNe=s(I7);B3e=n(WNe,"STRONG",{});var H6t=s(B3e);__r=r(H6t,"data2vec-audio"),H6t.forEach(t),u_r=r(WNe," \u2014 "),qH=n(WNe,"A",{href:!0});var U6t=s(qH);b_r=r(U6t,"Data2VecAudioForXVector"),U6t.forEach(t),v_r=r(WNe," (Data2VecAudio model)"),WNe.forEach(t),F_r=i(Ml),N7=n(Ml,"LI",{});var QNe=s(N7);I3e=n(QNe,"STRONG",{});var J6t=s(I3e);T_r=r(J6t,"unispeech-sat"),J6t.forEach(t),M_r=r(QNe," \u2014 "),jH=n(QNe,"A",{href:!0});var Y6t=s(jH);E_r=r(Y6t,"UniSpeechSatForXVector"),Y6t.forEach(t),C_r=r(QNe," (UniSpeechSat model)"),QNe.forEach(t),w_r=i(Ml),q7=n(Ml,"LI",{});var HNe=s(q7);N3e=n(HNe,"STRONG",{});var K6t=s(N3e);A_r=r(K6t,"wav2vec2"),K6t.forEach(t),L_r=r(HNe," \u2014 "),DH=n(HNe,"A",{href:!0});var Z6t=s(DH);y_r=r(Z6t,"Wav2Vec2ForXVector"),Z6t.forEach(t),x_r=r(HNe," (Wav2Vec2 model)"),HNe.forEach(t),$_r=i(Ml),j7=n(Ml,"LI",{});var UNe=s(j7);q3e=n(UNe,"STRONG",{});var eLt=s(q3e);k_r=r(eLt,"wav2vec2-conformer"),eLt.forEach(t),S_r=r(UNe," \u2014 "),GH=n(UNe,"A",{href:!0});var oLt=s(GH);R_r=r(oLt,"Wav2Vec2ConformerForXVector"),oLt.forEach(t),P_r=r(UNe," (Wav2Vec2-Conformer model)"),UNe.forEach(t),B_r=i(Ml),D7=n(Ml,"LI",{});var JNe=s(D7);j3e=n(JNe,"STRONG",{});var rLt=s(j3e);I_r=r(rLt,"wavlm"),rLt.forEach(t),N_r=r(JNe," \u2014 "),OH=n(JNe,"A",{href:!0});var tLt=s(OH);q_r=r(tLt,"WavLMForXVector"),tLt.forEach(t),j_r=r(JNe," (WavLM model)"),JNe.forEach(t),Ml.forEach(t),D_r=i(wa),G7=n(wa,"P",{});var YNe=s(G7);G_r=r(YNe,"The model is set in evaluation mode by default using "),D3e=n(YNe,"CODE",{});var aLt=s(D3e);O_r=r(aLt,"model.eval()"),aLt.forEach(t),V_r=r(YNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G3e=n(YNe,"CODE",{});var nLt=s(G3e);X_r=r(nLt,"model.train()"),nLt.forEach(t),YNe.forEach(t),z_r=i(wa),T(O7.$$.fragment,wa),wa.forEach(t),Tl.forEach(t),sze=i(f),Xd=n(f,"H2",{class:!0});var gQe=s(Xd);V7=n(gQe,"A",{id:!0,class:!0,href:!0});var sLt=s(V7);O3e=n(sLt,"SPAN",{});var lLt=s(O3e);T(Ty.$$.fragment,lLt),lLt.forEach(t),sLt.forEach(t),W_r=i(gQe),V3e=n(gQe,"SPAN",{});var iLt=s(V3e);Q_r=r(iLt,"AutoModelForMaskedImageModeling"),iLt.forEach(t),gQe.forEach(t),lze=i(f),Uo=n(f,"DIV",{class:!0});var El=s(Uo);T(My.$$.fragment,El),H_r=i(El),zd=n(El,"P",{});var Tte=s(zd);U_r=r(Tte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),VH=n(Tte,"A",{href:!0});var dLt=s(VH);J_r=r(dLt,"from_pretrained()"),dLt.forEach(t),Y_r=r(Tte," class method or the "),XH=n(Tte,"A",{href:!0});var cLt=s(XH);K_r=r(cLt,"from_config()"),cLt.forEach(t),Z_r=r(Tte,` class
method.`),Tte.forEach(t),eur=i(El),Ey=n(El,"P",{});var hQe=s(Ey);our=r(hQe,"This class cannot be instantiated directly using "),X3e=n(hQe,"CODE",{});var fLt=s(X3e);rur=r(fLt,"__init__()"),fLt.forEach(t),tur=r(hQe," (throws an error)."),hQe.forEach(t),aur=i(El),Lt=n(El,"DIV",{class:!0});var Uw=s(Lt);T(Cy.$$.fragment,Uw),nur=i(Uw),z3e=n(Uw,"P",{});var mLt=s(z3e);sur=r(mLt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),mLt.forEach(t),lur=i(Uw),Wd=n(Uw,"P",{});var Mte=s(Wd);iur=r(Mte,`Note:
Loading a model from its configuration file does `),W3e=n(Mte,"STRONG",{});var gLt=s(W3e);dur=r(gLt,"not"),gLt.forEach(t),cur=r(Mte,` load the model weights. It only affects the
model\u2019s configuration. Use `),zH=n(Mte,"A",{href:!0});var hLt=s(zH);fur=r(hLt,"from_pretrained()"),hLt.forEach(t),mur=r(Mte," to load the model weights."),Mte.forEach(t),gur=i(Uw),T(X7.$$.fragment,Uw),Uw.forEach(t),hur=i(El),_o=n(El,"DIV",{class:!0});var Aa=s(_o);T(wy.$$.fragment,Aa),pur=i(Aa),Q3e=n(Aa,"P",{});var pLt=s(Q3e);_ur=r(pLt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),pLt.forEach(t),uur=i(Aa),on=n(Aa,"P",{});var Jw=s(on);bur=r(Jw,"The model class to instantiate is selected based on the "),H3e=n(Jw,"CODE",{});var _Lt=s(H3e);vur=r(_Lt,"model_type"),_Lt.forEach(t),Fur=r(Jw,` property of the config object (either
passed as an argument or loaded from `),U3e=n(Jw,"CODE",{});var uLt=s(U3e);Tur=r(uLt,"pretrained_model_name_or_path"),uLt.forEach(t),Mur=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J3e=n(Jw,"CODE",{});var bLt=s(J3e);Eur=r(bLt,"pretrained_model_name_or_path"),bLt.forEach(t),Cur=r(Jw,":"),Jw.forEach(t),wur=i(Aa),Qd=n(Aa,"UL",{});var Ete=s(Qd);z7=n(Ete,"LI",{});var KNe=s(z7);Y3e=n(KNe,"STRONG",{});var vLt=s(Y3e);Aur=r(vLt,"deit"),vLt.forEach(t),Lur=r(KNe," \u2014 "),WH=n(KNe,"A",{href:!0});var FLt=s(WH);yur=r(FLt,"DeiTForMaskedImageModeling"),FLt.forEach(t),xur=r(KNe," (DeiT model)"),KNe.forEach(t),$ur=i(Ete),W7=n(Ete,"LI",{});var ZNe=s(W7);K3e=n(ZNe,"STRONG",{});var TLt=s(K3e);kur=r(TLt,"swin"),TLt.forEach(t),Sur=r(ZNe," \u2014 "),QH=n(ZNe,"A",{href:!0});var MLt=s(QH);Rur=r(MLt,"SwinForMaskedImageModeling"),MLt.forEach(t),Pur=r(ZNe," (Swin Transformer model)"),ZNe.forEach(t),Bur=i(Ete),Q7=n(Ete,"LI",{});var eqe=s(Q7);Z3e=n(eqe,"STRONG",{});var ELt=s(Z3e);Iur=r(ELt,"vit"),ELt.forEach(t),Nur=r(eqe," \u2014 "),HH=n(eqe,"A",{href:!0});var CLt=s(HH);qur=r(CLt,"ViTForMaskedImageModeling"),CLt.forEach(t),jur=r(eqe," (ViT model)"),eqe.forEach(t),Ete.forEach(t),Dur=i(Aa),H7=n(Aa,"P",{});var oqe=s(H7);Gur=r(oqe,"The model is set in evaluation mode by default using "),eFe=n(oqe,"CODE",{});var wLt=s(eFe);Our=r(wLt,"model.eval()"),wLt.forEach(t),Vur=r(oqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oFe=n(oqe,"CODE",{});var ALt=s(oFe);Xur=r(ALt,"model.train()"),ALt.forEach(t),oqe.forEach(t),zur=i(Aa),T(U7.$$.fragment,Aa),Aa.forEach(t),El.forEach(t),ize=i(f),Hd=n(f,"H2",{class:!0});var pQe=s(Hd);J7=n(pQe,"A",{id:!0,class:!0,href:!0});var LLt=s(J7);rFe=n(LLt,"SPAN",{});var yLt=s(rFe);T(Ay.$$.fragment,yLt),yLt.forEach(t),LLt.forEach(t),Wur=i(pQe),tFe=n(pQe,"SPAN",{});var xLt=s(tFe);Qur=r(xLt,"AutoModelForObjectDetection"),xLt.forEach(t),pQe.forEach(t),dze=i(f),Jo=n(f,"DIV",{class:!0});var Cl=s(Jo);T(Ly.$$.fragment,Cl),Hur=i(Cl),Ud=n(Cl,"P",{});var Cte=s(Ud);Uur=r(Cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),UH=n(Cte,"A",{href:!0});var $Lt=s(UH);Jur=r($Lt,"from_pretrained()"),$Lt.forEach(t),Yur=r(Cte," class method or the "),JH=n(Cte,"A",{href:!0});var kLt=s(JH);Kur=r(kLt,"from_config()"),kLt.forEach(t),Zur=r(Cte,` class
method.`),Cte.forEach(t),e1r=i(Cl),yy=n(Cl,"P",{});var _Qe=s(yy);o1r=r(_Qe,"This class cannot be instantiated directly using "),aFe=n(_Qe,"CODE",{});var SLt=s(aFe);r1r=r(SLt,"__init__()"),SLt.forEach(t),t1r=r(_Qe," (throws an error)."),_Qe.forEach(t),a1r=i(Cl),yt=n(Cl,"DIV",{class:!0});var Yw=s(yt);T(xy.$$.fragment,Yw),n1r=i(Yw),nFe=n(Yw,"P",{});var RLt=s(nFe);s1r=r(RLt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),RLt.forEach(t),l1r=i(Yw),Jd=n(Yw,"P",{});var wte=s(Jd);i1r=r(wte,`Note:
Loading a model from its configuration file does `),sFe=n(wte,"STRONG",{});var PLt=s(sFe);d1r=r(PLt,"not"),PLt.forEach(t),c1r=r(wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=n(wte,"A",{href:!0});var BLt=s(YH);f1r=r(BLt,"from_pretrained()"),BLt.forEach(t),m1r=r(wte," to load the model weights."),wte.forEach(t),g1r=i(Yw),T(Y7.$$.fragment,Yw),Yw.forEach(t),h1r=i(Cl),uo=n(Cl,"DIV",{class:!0});var La=s(uo);T($y.$$.fragment,La),p1r=i(La),lFe=n(La,"P",{});var ILt=s(lFe);_1r=r(ILt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),ILt.forEach(t),u1r=i(La),rn=n(La,"P",{});var Kw=s(rn);b1r=r(Kw,"The model class to instantiate is selected based on the "),iFe=n(Kw,"CODE",{});var NLt=s(iFe);v1r=r(NLt,"model_type"),NLt.forEach(t),F1r=r(Kw,` property of the config object (either
passed as an argument or loaded from `),dFe=n(Kw,"CODE",{});var qLt=s(dFe);T1r=r(qLt,"pretrained_model_name_or_path"),qLt.forEach(t),M1r=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cFe=n(Kw,"CODE",{});var jLt=s(cFe);E1r=r(jLt,"pretrained_model_name_or_path"),jLt.forEach(t),C1r=r(Kw,":"),Kw.forEach(t),w1r=i(La),ky=n(La,"UL",{});var uQe=s(ky);K7=n(uQe,"LI",{});var rqe=s(K7);fFe=n(rqe,"STRONG",{});var DLt=s(fFe);A1r=r(DLt,"detr"),DLt.forEach(t),L1r=r(rqe," \u2014 "),KH=n(rqe,"A",{href:!0});var GLt=s(KH);y1r=r(GLt,"DetrForObjectDetection"),GLt.forEach(t),x1r=r(rqe," (DETR model)"),rqe.forEach(t),$1r=i(uQe),Z7=n(uQe,"LI",{});var tqe=s(Z7);mFe=n(tqe,"STRONG",{});var OLt=s(mFe);k1r=r(OLt,"yolos"),OLt.forEach(t),S1r=r(tqe," \u2014 "),ZH=n(tqe,"A",{href:!0});var VLt=s(ZH);R1r=r(VLt,"YolosForObjectDetection"),VLt.forEach(t),P1r=r(tqe," (YOLOS model)"),tqe.forEach(t),uQe.forEach(t),B1r=i(La),e8=n(La,"P",{});var aqe=s(e8);I1r=r(aqe,"The model is set in evaluation mode by default using "),gFe=n(aqe,"CODE",{});var XLt=s(gFe);N1r=r(XLt,"model.eval()"),XLt.forEach(t),q1r=r(aqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hFe=n(aqe,"CODE",{});var zLt=s(hFe);j1r=r(zLt,"model.train()"),zLt.forEach(t),aqe.forEach(t),D1r=i(La),T(o8.$$.fragment,La),La.forEach(t),Cl.forEach(t),cze=i(f),Yd=n(f,"H2",{class:!0});var bQe=s(Yd);r8=n(bQe,"A",{id:!0,class:!0,href:!0});var WLt=s(r8);pFe=n(WLt,"SPAN",{});var QLt=s(pFe);T(Sy.$$.fragment,QLt),QLt.forEach(t),WLt.forEach(t),G1r=i(bQe),_Fe=n(bQe,"SPAN",{});var HLt=s(_Fe);O1r=r(HLt,"AutoModelForImageSegmentation"),HLt.forEach(t),bQe.forEach(t),fze=i(f),Yo=n(f,"DIV",{class:!0});var wl=s(Yo);T(Ry.$$.fragment,wl),V1r=i(wl),Kd=n(wl,"P",{});var Ate=s(Kd);X1r=r(Ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),eU=n(Ate,"A",{href:!0});var ULt=s(eU);z1r=r(ULt,"from_pretrained()"),ULt.forEach(t),W1r=r(Ate," class method or the "),oU=n(Ate,"A",{href:!0});var JLt=s(oU);Q1r=r(JLt,"from_config()"),JLt.forEach(t),H1r=r(Ate,` class
method.`),Ate.forEach(t),U1r=i(wl),Py=n(wl,"P",{});var vQe=s(Py);J1r=r(vQe,"This class cannot be instantiated directly using "),uFe=n(vQe,"CODE",{});var YLt=s(uFe);Y1r=r(YLt,"__init__()"),YLt.forEach(t),K1r=r(vQe," (throws an error)."),vQe.forEach(t),Z1r=i(wl),xt=n(wl,"DIV",{class:!0});var Zw=s(xt);T(By.$$.fragment,Zw),e2r=i(Zw),bFe=n(Zw,"P",{});var KLt=s(bFe);o2r=r(KLt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),KLt.forEach(t),r2r=i(Zw),Zd=n(Zw,"P",{});var Lte=s(Zd);t2r=r(Lte,`Note:
Loading a model from its configuration file does `),vFe=n(Lte,"STRONG",{});var ZLt=s(vFe);a2r=r(ZLt,"not"),ZLt.forEach(t),n2r=r(Lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),rU=n(Lte,"A",{href:!0});var eyt=s(rU);s2r=r(eyt,"from_pretrained()"),eyt.forEach(t),l2r=r(Lte," to load the model weights."),Lte.forEach(t),i2r=i(Zw),T(t8.$$.fragment,Zw),Zw.forEach(t),d2r=i(wl),bo=n(wl,"DIV",{class:!0});var ya=s(bo);T(Iy.$$.fragment,ya),c2r=i(ya),FFe=n(ya,"P",{});var oyt=s(FFe);f2r=r(oyt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),oyt.forEach(t),m2r=i(ya),tn=n(ya,"P",{});var eA=s(tn);g2r=r(eA,"The model class to instantiate is selected based on the "),TFe=n(eA,"CODE",{});var ryt=s(TFe);h2r=r(ryt,"model_type"),ryt.forEach(t),p2r=r(eA,` property of the config object (either
passed as an argument or loaded from `),MFe=n(eA,"CODE",{});var tyt=s(MFe);_2r=r(tyt,"pretrained_model_name_or_path"),tyt.forEach(t),u2r=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EFe=n(eA,"CODE",{});var ayt=s(EFe);b2r=r(ayt,"pretrained_model_name_or_path"),ayt.forEach(t),v2r=r(eA,":"),eA.forEach(t),F2r=i(ya),CFe=n(ya,"UL",{});var nyt=s(CFe);a8=n(nyt,"LI",{});var nqe=s(a8);wFe=n(nqe,"STRONG",{});var syt=s(wFe);T2r=r(syt,"detr"),syt.forEach(t),M2r=r(nqe," \u2014 "),tU=n(nqe,"A",{href:!0});var lyt=s(tU);E2r=r(lyt,"DetrForSegmentation"),lyt.forEach(t),C2r=r(nqe," (DETR model)"),nqe.forEach(t),nyt.forEach(t),w2r=i(ya),n8=n(ya,"P",{});var sqe=s(n8);A2r=r(sqe,"The model is set in evaluation mode by default using "),AFe=n(sqe,"CODE",{});var iyt=s(AFe);L2r=r(iyt,"model.eval()"),iyt.forEach(t),y2r=r(sqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),LFe=n(sqe,"CODE",{});var dyt=s(LFe);x2r=r(dyt,"model.train()"),dyt.forEach(t),sqe.forEach(t),$2r=i(ya),T(s8.$$.fragment,ya),ya.forEach(t),wl.forEach(t),mze=i(f),ec=n(f,"H2",{class:!0});var FQe=s(ec);l8=n(FQe,"A",{id:!0,class:!0,href:!0});var cyt=s(l8);yFe=n(cyt,"SPAN",{});var fyt=s(yFe);T(Ny.$$.fragment,fyt),fyt.forEach(t),cyt.forEach(t),k2r=i(FQe),xFe=n(FQe,"SPAN",{});var myt=s(xFe);S2r=r(myt,"AutoModelForSemanticSegmentation"),myt.forEach(t),FQe.forEach(t),gze=i(f),Ko=n(f,"DIV",{class:!0});var Al=s(Ko);T(qy.$$.fragment,Al),R2r=i(Al),oc=n(Al,"P",{});var yte=s(oc);P2r=r(yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),aU=n(yte,"A",{href:!0});var gyt=s(aU);B2r=r(gyt,"from_pretrained()"),gyt.forEach(t),I2r=r(yte," class method or the "),nU=n(yte,"A",{href:!0});var hyt=s(nU);N2r=r(hyt,"from_config()"),hyt.forEach(t),q2r=r(yte,` class
method.`),yte.forEach(t),j2r=i(Al),jy=n(Al,"P",{});var TQe=s(jy);D2r=r(TQe,"This class cannot be instantiated directly using "),$Fe=n(TQe,"CODE",{});var pyt=s($Fe);G2r=r(pyt,"__init__()"),pyt.forEach(t),O2r=r(TQe," (throws an error)."),TQe.forEach(t),V2r=i(Al),$t=n(Al,"DIV",{class:!0});var oA=s($t);T(Dy.$$.fragment,oA),X2r=i(oA),kFe=n(oA,"P",{});var _yt=s(kFe);z2r=r(_yt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),_yt.forEach(t),W2r=i(oA),rc=n(oA,"P",{});var xte=s(rc);Q2r=r(xte,`Note:
Loading a model from its configuration file does `),SFe=n(xte,"STRONG",{});var uyt=s(SFe);H2r=r(uyt,"not"),uyt.forEach(t),U2r=r(xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=n(xte,"A",{href:!0});var byt=s(sU);J2r=r(byt,"from_pretrained()"),byt.forEach(t),Y2r=r(xte," to load the model weights."),xte.forEach(t),K2r=i(oA),T(i8.$$.fragment,oA),oA.forEach(t),Z2r=i(Al),vo=n(Al,"DIV",{class:!0});var xa=s(vo);T(Gy.$$.fragment,xa),ebr=i(xa),RFe=n(xa,"P",{});var vyt=s(RFe);obr=r(vyt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),vyt.forEach(t),rbr=i(xa),an=n(xa,"P",{});var rA=s(an);tbr=r(rA,"The model class to instantiate is selected based on the "),PFe=n(rA,"CODE",{});var Fyt=s(PFe);abr=r(Fyt,"model_type"),Fyt.forEach(t),nbr=r(rA,` property of the config object (either
passed as an argument or loaded from `),BFe=n(rA,"CODE",{});var Tyt=s(BFe);sbr=r(Tyt,"pretrained_model_name_or_path"),Tyt.forEach(t),lbr=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IFe=n(rA,"CODE",{});var Myt=s(IFe);ibr=r(Myt,"pretrained_model_name_or_path"),Myt.forEach(t),dbr=r(rA,":"),rA.forEach(t),cbr=i(xa),tt=n(xa,"UL",{});var Ll=s(tt);d8=n(Ll,"LI",{});var lqe=s(d8);NFe=n(lqe,"STRONG",{});var Eyt=s(NFe);fbr=r(Eyt,"beit"),Eyt.forEach(t),mbr=r(lqe," \u2014 "),lU=n(lqe,"A",{href:!0});var Cyt=s(lU);gbr=r(Cyt,"BeitForSemanticSegmentation"),Cyt.forEach(t),hbr=r(lqe," (BEiT model)"),lqe.forEach(t),pbr=i(Ll),c8=n(Ll,"LI",{});var iqe=s(c8);qFe=n(iqe,"STRONG",{});var wyt=s(qFe);_br=r(wyt,"data2vec-vision"),wyt.forEach(t),ubr=r(iqe," \u2014 "),iU=n(iqe,"A",{href:!0});var Ayt=s(iU);bbr=r(Ayt,"Data2VecVisionForSemanticSegmentation"),Ayt.forEach(t),vbr=r(iqe," (Data2VecVision model)"),iqe.forEach(t),Fbr=i(Ll),f8=n(Ll,"LI",{});var dqe=s(f8);jFe=n(dqe,"STRONG",{});var Lyt=s(jFe);Tbr=r(Lyt,"dpt"),Lyt.forEach(t),Mbr=r(dqe," \u2014 "),dU=n(dqe,"A",{href:!0});var yyt=s(dU);Ebr=r(yyt,"DPTForSemanticSegmentation"),yyt.forEach(t),Cbr=r(dqe," (DPT model)"),dqe.forEach(t),wbr=i(Ll),m8=n(Ll,"LI",{});var cqe=s(m8);DFe=n(cqe,"STRONG",{});var xyt=s(DFe);Abr=r(xyt,"mobilevit"),xyt.forEach(t),Lbr=r(cqe," \u2014 "),cU=n(cqe,"A",{href:!0});var $yt=s(cU);ybr=r($yt,"MobileViTForSemanticSegmentation"),$yt.forEach(t),xbr=r(cqe," (MobileViT model)"),cqe.forEach(t),$br=i(Ll),g8=n(Ll,"LI",{});var fqe=s(g8);GFe=n(fqe,"STRONG",{});var kyt=s(GFe);kbr=r(kyt,"segformer"),kyt.forEach(t),Sbr=r(fqe," \u2014 "),fU=n(fqe,"A",{href:!0});var Syt=s(fU);Rbr=r(Syt,"SegformerForSemanticSegmentation"),Syt.forEach(t),Pbr=r(fqe," (SegFormer model)"),fqe.forEach(t),Ll.forEach(t),Bbr=i(xa),h8=n(xa,"P",{});var mqe=s(h8);Ibr=r(mqe,"The model is set in evaluation mode by default using "),OFe=n(mqe,"CODE",{});var Ryt=s(OFe);Nbr=r(Ryt,"model.eval()"),Ryt.forEach(t),qbr=r(mqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),VFe=n(mqe,"CODE",{});var Pyt=s(VFe);jbr=r(Pyt,"model.train()"),Pyt.forEach(t),mqe.forEach(t),Dbr=i(xa),T(p8.$$.fragment,xa),xa.forEach(t),Al.forEach(t),hze=i(f),tc=n(f,"H2",{class:!0});var MQe=s(tc);_8=n(MQe,"A",{id:!0,class:!0,href:!0});var Byt=s(_8);XFe=n(Byt,"SPAN",{});var Iyt=s(XFe);T(Oy.$$.fragment,Iyt),Iyt.forEach(t),Byt.forEach(t),Gbr=i(MQe),zFe=n(MQe,"SPAN",{});var Nyt=s(zFe);Obr=r(Nyt,"AutoModelForInstanceSegmentation"),Nyt.forEach(t),MQe.forEach(t),pze=i(f),Zo=n(f,"DIV",{class:!0});var yl=s(Zo);T(Vy.$$.fragment,yl),Vbr=i(yl),ac=n(yl,"P",{});var $te=s(ac);Xbr=r($te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),mU=n($te,"A",{href:!0});var qyt=s(mU);zbr=r(qyt,"from_pretrained()"),qyt.forEach(t),Wbr=r($te," class method or the "),gU=n($te,"A",{href:!0});var jyt=s(gU);Qbr=r(jyt,"from_config()"),jyt.forEach(t),Hbr=r($te,` class
method.`),$te.forEach(t),Ubr=i(yl),Xy=n(yl,"P",{});var EQe=s(Xy);Jbr=r(EQe,"This class cannot be instantiated directly using "),WFe=n(EQe,"CODE",{});var Dyt=s(WFe);Ybr=r(Dyt,"__init__()"),Dyt.forEach(t),Kbr=r(EQe," (throws an error)."),EQe.forEach(t),Zbr=i(yl),kt=n(yl,"DIV",{class:!0});var tA=s(kt);T(zy.$$.fragment,tA),evr=i(tA),QFe=n(tA,"P",{});var Gyt=s(QFe);ovr=r(Gyt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Gyt.forEach(t),rvr=i(tA),nc=n(tA,"P",{});var kte=s(nc);tvr=r(kte,`Note:
Loading a model from its configuration file does `),HFe=n(kte,"STRONG",{});var Oyt=s(HFe);avr=r(Oyt,"not"),Oyt.forEach(t),nvr=r(kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),hU=n(kte,"A",{href:!0});var Vyt=s(hU);svr=r(Vyt,"from_pretrained()"),Vyt.forEach(t),lvr=r(kte," to load the model weights."),kte.forEach(t),ivr=i(tA),T(u8.$$.fragment,tA),tA.forEach(t),dvr=i(yl),Fo=n(yl,"DIV",{class:!0});var $a=s(Fo);T(Wy.$$.fragment,$a),cvr=i($a),UFe=n($a,"P",{});var Xyt=s(UFe);fvr=r(Xyt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Xyt.forEach(t),mvr=i($a),nn=n($a,"P",{});var aA=s(nn);gvr=r(aA,"The model class to instantiate is selected based on the "),JFe=n(aA,"CODE",{});var zyt=s(JFe);hvr=r(zyt,"model_type"),zyt.forEach(t),pvr=r(aA,` property of the config object (either
passed as an argument or loaded from `),YFe=n(aA,"CODE",{});var Wyt=s(YFe);_vr=r(Wyt,"pretrained_model_name_or_path"),Wyt.forEach(t),uvr=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KFe=n(aA,"CODE",{});var Qyt=s(KFe);bvr=r(Qyt,"pretrained_model_name_or_path"),Qyt.forEach(t),vvr=r(aA,":"),aA.forEach(t),Fvr=i($a),ZFe=n($a,"UL",{});var Hyt=s(ZFe);b8=n(Hyt,"LI",{});var gqe=s(b8);eTe=n(gqe,"STRONG",{});var Uyt=s(eTe);Tvr=r(Uyt,"maskformer"),Uyt.forEach(t),Mvr=r(gqe," \u2014 "),pU=n(gqe,"A",{href:!0});var Jyt=s(pU);Evr=r(Jyt,"MaskFormerForInstanceSegmentation"),Jyt.forEach(t),Cvr=r(gqe," (MaskFormer model)"),gqe.forEach(t),Hyt.forEach(t),wvr=i($a),v8=n($a,"P",{});var hqe=s(v8);Avr=r(hqe,"The model is set in evaluation mode by default using "),oTe=n(hqe,"CODE",{});var Yyt=s(oTe);Lvr=r(Yyt,"model.eval()"),Yyt.forEach(t),yvr=r(hqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rTe=n(hqe,"CODE",{});var Kyt=s(rTe);xvr=r(Kyt,"model.train()"),Kyt.forEach(t),hqe.forEach(t),$vr=i($a),T(F8.$$.fragment,$a),$a.forEach(t),yl.forEach(t),_ze=i(f),sc=n(f,"H2",{class:!0});var CQe=s(sc);T8=n(CQe,"A",{id:!0,class:!0,href:!0});var Zyt=s(T8);tTe=n(Zyt,"SPAN",{});var ext=s(tTe);T(Qy.$$.fragment,ext),ext.forEach(t),Zyt.forEach(t),kvr=i(CQe),aTe=n(CQe,"SPAN",{});var oxt=s(aTe);Svr=r(oxt,"TFAutoModel"),oxt.forEach(t),CQe.forEach(t),uze=i(f),er=n(f,"DIV",{class:!0});var xl=s(er);T(Hy.$$.fragment,xl),Rvr=i(xl),lc=n(xl,"P",{});var Ste=s(lc);Pvr=r(Ste,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_U=n(Ste,"A",{href:!0});var rxt=s(_U);Bvr=r(rxt,"from_pretrained()"),rxt.forEach(t),Ivr=r(Ste," class method or the "),uU=n(Ste,"A",{href:!0});var txt=s(uU);Nvr=r(txt,"from_config()"),txt.forEach(t),qvr=r(Ste,` class
method.`),Ste.forEach(t),jvr=i(xl),Uy=n(xl,"P",{});var wQe=s(Uy);Dvr=r(wQe,"This class cannot be instantiated directly using "),nTe=n(wQe,"CODE",{});var axt=s(nTe);Gvr=r(axt,"__init__()"),axt.forEach(t),Ovr=r(wQe," (throws an error)."),wQe.forEach(t),Vvr=i(xl),St=n(xl,"DIV",{class:!0});var nA=s(St);T(Jy.$$.fragment,nA),Xvr=i(nA),sTe=n(nA,"P",{});var nxt=s(sTe);zvr=r(nxt,"Instantiates one of the base model classes of the library from a configuration."),nxt.forEach(t),Wvr=i(nA),ic=n(nA,"P",{});var Rte=s(ic);Qvr=r(Rte,`Note:
Loading a model from its configuration file does `),lTe=n(Rte,"STRONG",{});var sxt=s(lTe);Hvr=r(sxt,"not"),sxt.forEach(t),Uvr=r(Rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),bU=n(Rte,"A",{href:!0});var lxt=s(bU);Jvr=r(lxt,"from_pretrained()"),lxt.forEach(t),Yvr=r(Rte," to load the model weights."),Rte.forEach(t),Kvr=i(nA),T(M8.$$.fragment,nA),nA.forEach(t),Zvr=i(xl),xr=n(xl,"DIV",{class:!0});var $l=s(xr);T(Yy.$$.fragment,$l),e3r=i($l),iTe=n($l,"P",{});var ixt=s(iTe);o3r=r(ixt,"Instantiate one of the base model classes of the library from a pretrained model."),ixt.forEach(t),r3r=i($l),sn=n($l,"P",{});var sA=s(sn);t3r=r(sA,"The model class to instantiate is selected based on the "),dTe=n(sA,"CODE",{});var dxt=s(dTe);a3r=r(dxt,"model_type"),dxt.forEach(t),n3r=r(sA,` property of the config object (either
passed as an argument or loaded from `),cTe=n(sA,"CODE",{});var cxt=s(cTe);s3r=r(cxt,"pretrained_model_name_or_path"),cxt.forEach(t),l3r=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fTe=n(sA,"CODE",{});var fxt=s(fTe);i3r=r(fxt,"pretrained_model_name_or_path"),fxt.forEach(t),d3r=r(sA,":"),sA.forEach(t),c3r=i($l),q=n($l,"UL",{});var D=s(q);E8=n(D,"LI",{});var pqe=s(E8);mTe=n(pqe,"STRONG",{});var mxt=s(mTe);f3r=r(mxt,"albert"),mxt.forEach(t),m3r=r(pqe," \u2014 "),vU=n(pqe,"A",{href:!0});var gxt=s(vU);g3r=r(gxt,"TFAlbertModel"),gxt.forEach(t),h3r=r(pqe," (ALBERT model)"),pqe.forEach(t),p3r=i(D),C8=n(D,"LI",{});var _qe=s(C8);gTe=n(_qe,"STRONG",{});var hxt=s(gTe);_3r=r(hxt,"bart"),hxt.forEach(t),u3r=r(_qe," \u2014 "),FU=n(_qe,"A",{href:!0});var pxt=s(FU);b3r=r(pxt,"TFBartModel"),pxt.forEach(t),v3r=r(_qe," (BART model)"),_qe.forEach(t),F3r=i(D),w8=n(D,"LI",{});var uqe=s(w8);hTe=n(uqe,"STRONG",{});var _xt=s(hTe);T3r=r(_xt,"bert"),_xt.forEach(t),M3r=r(uqe," \u2014 "),TU=n(uqe,"A",{href:!0});var uxt=s(TU);E3r=r(uxt,"TFBertModel"),uxt.forEach(t),C3r=r(uqe," (BERT model)"),uqe.forEach(t),w3r=i(D),A8=n(D,"LI",{});var bqe=s(A8);pTe=n(bqe,"STRONG",{});var bxt=s(pTe);A3r=r(bxt,"blenderbot"),bxt.forEach(t),L3r=r(bqe," \u2014 "),MU=n(bqe,"A",{href:!0});var vxt=s(MU);y3r=r(vxt,"TFBlenderbotModel"),vxt.forEach(t),x3r=r(bqe," (Blenderbot model)"),bqe.forEach(t),$3r=i(D),L8=n(D,"LI",{});var vqe=s(L8);_Te=n(vqe,"STRONG",{});var Fxt=s(_Te);k3r=r(Fxt,"blenderbot-small"),Fxt.forEach(t),S3r=r(vqe," \u2014 "),EU=n(vqe,"A",{href:!0});var Txt=s(EU);R3r=r(Txt,"TFBlenderbotSmallModel"),Txt.forEach(t),P3r=r(vqe," (BlenderbotSmall model)"),vqe.forEach(t),B3r=i(D),y8=n(D,"LI",{});var Fqe=s(y8);uTe=n(Fqe,"STRONG",{});var Mxt=s(uTe);I3r=r(Mxt,"camembert"),Mxt.forEach(t),N3r=r(Fqe," \u2014 "),CU=n(Fqe,"A",{href:!0});var Ext=s(CU);q3r=r(Ext,"TFCamembertModel"),Ext.forEach(t),j3r=r(Fqe," (CamemBERT model)"),Fqe.forEach(t),D3r=i(D),x8=n(D,"LI",{});var Tqe=s(x8);bTe=n(Tqe,"STRONG",{});var Cxt=s(bTe);G3r=r(Cxt,"clip"),Cxt.forEach(t),O3r=r(Tqe," \u2014 "),wU=n(Tqe,"A",{href:!0});var wxt=s(wU);V3r=r(wxt,"TFCLIPModel"),wxt.forEach(t),X3r=r(Tqe," (CLIP model)"),Tqe.forEach(t),z3r=i(D),$8=n(D,"LI",{});var Mqe=s($8);vTe=n(Mqe,"STRONG",{});var Axt=s(vTe);W3r=r(Axt,"convbert"),Axt.forEach(t),Q3r=r(Mqe," \u2014 "),AU=n(Mqe,"A",{href:!0});var Lxt=s(AU);H3r=r(Lxt,"TFConvBertModel"),Lxt.forEach(t),U3r=r(Mqe," (ConvBERT model)"),Mqe.forEach(t),J3r=i(D),k8=n(D,"LI",{});var Eqe=s(k8);FTe=n(Eqe,"STRONG",{});var yxt=s(FTe);Y3r=r(yxt,"convnext"),yxt.forEach(t),K3r=r(Eqe," \u2014 "),LU=n(Eqe,"A",{href:!0});var xxt=s(LU);Z3r=r(xxt,"TFConvNextModel"),xxt.forEach(t),eFr=r(Eqe," (ConvNeXT model)"),Eqe.forEach(t),oFr=i(D),S8=n(D,"LI",{});var Cqe=s(S8);TTe=n(Cqe,"STRONG",{});var $xt=s(TTe);rFr=r($xt,"ctrl"),$xt.forEach(t),tFr=r(Cqe," \u2014 "),yU=n(Cqe,"A",{href:!0});var kxt=s(yU);aFr=r(kxt,"TFCTRLModel"),kxt.forEach(t),nFr=r(Cqe," (CTRL model)"),Cqe.forEach(t),sFr=i(D),R8=n(D,"LI",{});var wqe=s(R8);MTe=n(wqe,"STRONG",{});var Sxt=s(MTe);lFr=r(Sxt,"data2vec-vision"),Sxt.forEach(t),iFr=r(wqe," \u2014 "),xU=n(wqe,"A",{href:!0});var Rxt=s(xU);dFr=r(Rxt,"TFData2VecVisionModel"),Rxt.forEach(t),cFr=r(wqe," (Data2VecVision model)"),wqe.forEach(t),fFr=i(D),P8=n(D,"LI",{});var Aqe=s(P8);ETe=n(Aqe,"STRONG",{});var Pxt=s(ETe);mFr=r(Pxt,"deberta"),Pxt.forEach(t),gFr=r(Aqe," \u2014 "),$U=n(Aqe,"A",{href:!0});var Bxt=s($U);hFr=r(Bxt,"TFDebertaModel"),Bxt.forEach(t),pFr=r(Aqe," (DeBERTa model)"),Aqe.forEach(t),_Fr=i(D),B8=n(D,"LI",{});var Lqe=s(B8);CTe=n(Lqe,"STRONG",{});var Ixt=s(CTe);uFr=r(Ixt,"deberta-v2"),Ixt.forEach(t),bFr=r(Lqe," \u2014 "),kU=n(Lqe,"A",{href:!0});var Nxt=s(kU);vFr=r(Nxt,"TFDebertaV2Model"),Nxt.forEach(t),FFr=r(Lqe," (DeBERTa-v2 model)"),Lqe.forEach(t),TFr=i(D),I8=n(D,"LI",{});var yqe=s(I8);wTe=n(yqe,"STRONG",{});var qxt=s(wTe);MFr=r(qxt,"distilbert"),qxt.forEach(t),EFr=r(yqe," \u2014 "),SU=n(yqe,"A",{href:!0});var jxt=s(SU);CFr=r(jxt,"TFDistilBertModel"),jxt.forEach(t),wFr=r(yqe," (DistilBERT model)"),yqe.forEach(t),AFr=i(D),N8=n(D,"LI",{});var xqe=s(N8);ATe=n(xqe,"STRONG",{});var Dxt=s(ATe);LFr=r(Dxt,"dpr"),Dxt.forEach(t),yFr=r(xqe," \u2014 "),RU=n(xqe,"A",{href:!0});var Gxt=s(RU);xFr=r(Gxt,"TFDPRQuestionEncoder"),Gxt.forEach(t),$Fr=r(xqe," (DPR model)"),xqe.forEach(t),kFr=i(D),q8=n(D,"LI",{});var $qe=s(q8);LTe=n($qe,"STRONG",{});var Oxt=s(LTe);SFr=r(Oxt,"electra"),Oxt.forEach(t),RFr=r($qe," \u2014 "),PU=n($qe,"A",{href:!0});var Vxt=s(PU);PFr=r(Vxt,"TFElectraModel"),Vxt.forEach(t),BFr=r($qe," (ELECTRA model)"),$qe.forEach(t),IFr=i(D),j8=n(D,"LI",{});var kqe=s(j8);yTe=n(kqe,"STRONG",{});var Xxt=s(yTe);NFr=r(Xxt,"flaubert"),Xxt.forEach(t),qFr=r(kqe," \u2014 "),BU=n(kqe,"A",{href:!0});var zxt=s(BU);jFr=r(zxt,"TFFlaubertModel"),zxt.forEach(t),DFr=r(kqe," (FlauBERT model)"),kqe.forEach(t),GFr=i(D),Ys=n(D,"LI",{});var NS=s(Ys);xTe=n(NS,"STRONG",{});var Wxt=s(xTe);OFr=r(Wxt,"funnel"),Wxt.forEach(t),VFr=r(NS," \u2014 "),IU=n(NS,"A",{href:!0});var Qxt=s(IU);XFr=r(Qxt,"TFFunnelModel"),Qxt.forEach(t),zFr=r(NS," or "),NU=n(NS,"A",{href:!0});var Hxt=s(NU);WFr=r(Hxt,"TFFunnelBaseModel"),Hxt.forEach(t),QFr=r(NS," (Funnel Transformer model)"),NS.forEach(t),HFr=i(D),D8=n(D,"LI",{});var Sqe=s(D8);$Te=n(Sqe,"STRONG",{});var Uxt=s($Te);UFr=r(Uxt,"gpt2"),Uxt.forEach(t),JFr=r(Sqe," \u2014 "),qU=n(Sqe,"A",{href:!0});var Jxt=s(qU);YFr=r(Jxt,"TFGPT2Model"),Jxt.forEach(t),KFr=r(Sqe," (OpenAI GPT-2 model)"),Sqe.forEach(t),ZFr=i(D),G8=n(D,"LI",{});var Rqe=s(G8);kTe=n(Rqe,"STRONG",{});var Yxt=s(kTe);eTr=r(Yxt,"gptj"),Yxt.forEach(t),oTr=r(Rqe," \u2014 "),jU=n(Rqe,"A",{href:!0});var Kxt=s(jU);rTr=r(Kxt,"TFGPTJModel"),Kxt.forEach(t),tTr=r(Rqe," (GPT-J model)"),Rqe.forEach(t),aTr=i(D),O8=n(D,"LI",{});var Pqe=s(O8);STe=n(Pqe,"STRONG",{});var Zxt=s(STe);nTr=r(Zxt,"hubert"),Zxt.forEach(t),sTr=r(Pqe," \u2014 "),DU=n(Pqe,"A",{href:!0});var e$t=s(DU);lTr=r(e$t,"TFHubertModel"),e$t.forEach(t),iTr=r(Pqe," (Hubert model)"),Pqe.forEach(t),dTr=i(D),V8=n(D,"LI",{});var Bqe=s(V8);RTe=n(Bqe,"STRONG",{});var o$t=s(RTe);cTr=r(o$t,"layoutlm"),o$t.forEach(t),fTr=r(Bqe," \u2014 "),GU=n(Bqe,"A",{href:!0});var r$t=s(GU);mTr=r(r$t,"TFLayoutLMModel"),r$t.forEach(t),gTr=r(Bqe," (LayoutLM model)"),Bqe.forEach(t),hTr=i(D),X8=n(D,"LI",{});var Iqe=s(X8);PTe=n(Iqe,"STRONG",{});var t$t=s(PTe);pTr=r(t$t,"led"),t$t.forEach(t),_Tr=r(Iqe," \u2014 "),OU=n(Iqe,"A",{href:!0});var a$t=s(OU);uTr=r(a$t,"TFLEDModel"),a$t.forEach(t),bTr=r(Iqe," (LED model)"),Iqe.forEach(t),vTr=i(D),z8=n(D,"LI",{});var Nqe=s(z8);BTe=n(Nqe,"STRONG",{});var n$t=s(BTe);FTr=r(n$t,"longformer"),n$t.forEach(t),TTr=r(Nqe," \u2014 "),VU=n(Nqe,"A",{href:!0});var s$t=s(VU);MTr=r(s$t,"TFLongformerModel"),s$t.forEach(t),ETr=r(Nqe," (Longformer model)"),Nqe.forEach(t),CTr=i(D),W8=n(D,"LI",{});var qqe=s(W8);ITe=n(qqe,"STRONG",{});var l$t=s(ITe);wTr=r(l$t,"lxmert"),l$t.forEach(t),ATr=r(qqe," \u2014 "),XU=n(qqe,"A",{href:!0});var i$t=s(XU);LTr=r(i$t,"TFLxmertModel"),i$t.forEach(t),yTr=r(qqe," (LXMERT model)"),qqe.forEach(t),xTr=i(D),Q8=n(D,"LI",{});var jqe=s(Q8);NTe=n(jqe,"STRONG",{});var d$t=s(NTe);$Tr=r(d$t,"marian"),d$t.forEach(t),kTr=r(jqe," \u2014 "),zU=n(jqe,"A",{href:!0});var c$t=s(zU);STr=r(c$t,"TFMarianModel"),c$t.forEach(t),RTr=r(jqe," (Marian model)"),jqe.forEach(t),PTr=i(D),H8=n(D,"LI",{});var Dqe=s(H8);qTe=n(Dqe,"STRONG",{});var f$t=s(qTe);BTr=r(f$t,"mbart"),f$t.forEach(t),ITr=r(Dqe," \u2014 "),WU=n(Dqe,"A",{href:!0});var m$t=s(WU);NTr=r(m$t,"TFMBartModel"),m$t.forEach(t),qTr=r(Dqe," (mBART model)"),Dqe.forEach(t),jTr=i(D),U8=n(D,"LI",{});var Gqe=s(U8);jTe=n(Gqe,"STRONG",{});var g$t=s(jTe);DTr=r(g$t,"mobilebert"),g$t.forEach(t),GTr=r(Gqe," \u2014 "),QU=n(Gqe,"A",{href:!0});var h$t=s(QU);OTr=r(h$t,"TFMobileBertModel"),h$t.forEach(t),VTr=r(Gqe," (MobileBERT model)"),Gqe.forEach(t),XTr=i(D),J8=n(D,"LI",{});var Oqe=s(J8);DTe=n(Oqe,"STRONG",{});var p$t=s(DTe);zTr=r(p$t,"mpnet"),p$t.forEach(t),WTr=r(Oqe," \u2014 "),HU=n(Oqe,"A",{href:!0});var _$t=s(HU);QTr=r(_$t,"TFMPNetModel"),_$t.forEach(t),HTr=r(Oqe," (MPNet model)"),Oqe.forEach(t),UTr=i(D),Y8=n(D,"LI",{});var Vqe=s(Y8);GTe=n(Vqe,"STRONG",{});var u$t=s(GTe);JTr=r(u$t,"mt5"),u$t.forEach(t),YTr=r(Vqe," \u2014 "),UU=n(Vqe,"A",{href:!0});var b$t=s(UU);KTr=r(b$t,"TFMT5Model"),b$t.forEach(t),ZTr=r(Vqe," (MT5 model)"),Vqe.forEach(t),e7r=i(D),K8=n(D,"LI",{});var Xqe=s(K8);OTe=n(Xqe,"STRONG",{});var v$t=s(OTe);o7r=r(v$t,"openai-gpt"),v$t.forEach(t),r7r=r(Xqe," \u2014 "),JU=n(Xqe,"A",{href:!0});var F$t=s(JU);t7r=r(F$t,"TFOpenAIGPTModel"),F$t.forEach(t),a7r=r(Xqe," (OpenAI GPT model)"),Xqe.forEach(t),n7r=i(D),Z8=n(D,"LI",{});var zqe=s(Z8);VTe=n(zqe,"STRONG",{});var T$t=s(VTe);s7r=r(T$t,"opt"),T$t.forEach(t),l7r=r(zqe," \u2014 "),YU=n(zqe,"A",{href:!0});var M$t=s(YU);i7r=r(M$t,"TFOPTModel"),M$t.forEach(t),d7r=r(zqe," (OPT model)"),zqe.forEach(t),c7r=i(D),e9=n(D,"LI",{});var Wqe=s(e9);XTe=n(Wqe,"STRONG",{});var E$t=s(XTe);f7r=r(E$t,"pegasus"),E$t.forEach(t),m7r=r(Wqe," \u2014 "),KU=n(Wqe,"A",{href:!0});var C$t=s(KU);g7r=r(C$t,"TFPegasusModel"),C$t.forEach(t),h7r=r(Wqe," (Pegasus model)"),Wqe.forEach(t),p7r=i(D),o9=n(D,"LI",{});var Qqe=s(o9);zTe=n(Qqe,"STRONG",{});var w$t=s(zTe);_7r=r(w$t,"regnet"),w$t.forEach(t),u7r=r(Qqe," \u2014 "),ZU=n(Qqe,"A",{href:!0});var A$t=s(ZU);b7r=r(A$t,"TFRegNetModel"),A$t.forEach(t),v7r=r(Qqe," (RegNet model)"),Qqe.forEach(t),F7r=i(D),r9=n(D,"LI",{});var Hqe=s(r9);WTe=n(Hqe,"STRONG",{});var L$t=s(WTe);T7r=r(L$t,"rembert"),L$t.forEach(t),M7r=r(Hqe," \u2014 "),eJ=n(Hqe,"A",{href:!0});var y$t=s(eJ);E7r=r(y$t,"TFRemBertModel"),y$t.forEach(t),C7r=r(Hqe," (RemBERT model)"),Hqe.forEach(t),w7r=i(D),t9=n(D,"LI",{});var Uqe=s(t9);QTe=n(Uqe,"STRONG",{});var x$t=s(QTe);A7r=r(x$t,"resnet"),x$t.forEach(t),L7r=r(Uqe," \u2014 "),oJ=n(Uqe,"A",{href:!0});var $$t=s(oJ);y7r=r($$t,"TFResNetModel"),$$t.forEach(t),x7r=r(Uqe," (ResNet model)"),Uqe.forEach(t),$7r=i(D),a9=n(D,"LI",{});var Jqe=s(a9);HTe=n(Jqe,"STRONG",{});var k$t=s(HTe);k7r=r(k$t,"roberta"),k$t.forEach(t),S7r=r(Jqe," \u2014 "),rJ=n(Jqe,"A",{href:!0});var S$t=s(rJ);R7r=r(S$t,"TFRobertaModel"),S$t.forEach(t),P7r=r(Jqe," (RoBERTa model)"),Jqe.forEach(t),B7r=i(D),n9=n(D,"LI",{});var Yqe=s(n9);UTe=n(Yqe,"STRONG",{});var R$t=s(UTe);I7r=r(R$t,"roformer"),R$t.forEach(t),N7r=r(Yqe," \u2014 "),tJ=n(Yqe,"A",{href:!0});var P$t=s(tJ);q7r=r(P$t,"TFRoFormerModel"),P$t.forEach(t),j7r=r(Yqe," (RoFormer model)"),Yqe.forEach(t),D7r=i(D),s9=n(D,"LI",{});var Kqe=s(s9);JTe=n(Kqe,"STRONG",{});var B$t=s(JTe);G7r=r(B$t,"speech_to_text"),B$t.forEach(t),O7r=r(Kqe," \u2014 "),aJ=n(Kqe,"A",{href:!0});var I$t=s(aJ);V7r=r(I$t,"TFSpeech2TextModel"),I$t.forEach(t),X7r=r(Kqe," (Speech2Text model)"),Kqe.forEach(t),z7r=i(D),l9=n(D,"LI",{});var Zqe=s(l9);YTe=n(Zqe,"STRONG",{});var N$t=s(YTe);W7r=r(N$t,"swin"),N$t.forEach(t),Q7r=r(Zqe," \u2014 "),nJ=n(Zqe,"A",{href:!0});var q$t=s(nJ);H7r=r(q$t,"TFSwinModel"),q$t.forEach(t),U7r=r(Zqe," (Swin Transformer model)"),Zqe.forEach(t),J7r=i(D),i9=n(D,"LI",{});var eje=s(i9);KTe=n(eje,"STRONG",{});var j$t=s(KTe);Y7r=r(j$t,"t5"),j$t.forEach(t),K7r=r(eje," \u2014 "),sJ=n(eje,"A",{href:!0});var D$t=s(sJ);Z7r=r(D$t,"TFT5Model"),D$t.forEach(t),e8r=r(eje," (T5 model)"),eje.forEach(t),o8r=i(D),d9=n(D,"LI",{});var oje=s(d9);ZTe=n(oje,"STRONG",{});var G$t=s(ZTe);r8r=r(G$t,"tapas"),G$t.forEach(t),t8r=r(oje," \u2014 "),lJ=n(oje,"A",{href:!0});var O$t=s(lJ);a8r=r(O$t,"TFTapasModel"),O$t.forEach(t),n8r=r(oje," (TAPAS model)"),oje.forEach(t),s8r=i(D),c9=n(D,"LI",{});var rje=s(c9);e7e=n(rje,"STRONG",{});var V$t=s(e7e);l8r=r(V$t,"transfo-xl"),V$t.forEach(t),i8r=r(rje," \u2014 "),iJ=n(rje,"A",{href:!0});var X$t=s(iJ);d8r=r(X$t,"TFTransfoXLModel"),X$t.forEach(t),c8r=r(rje," (Transformer-XL model)"),rje.forEach(t),f8r=i(D),f9=n(D,"LI",{});var tje=s(f9);o7e=n(tje,"STRONG",{});var z$t=s(o7e);m8r=r(z$t,"vit"),z$t.forEach(t),g8r=r(tje," \u2014 "),dJ=n(tje,"A",{href:!0});var W$t=s(dJ);h8r=r(W$t,"TFViTModel"),W$t.forEach(t),p8r=r(tje," (ViT model)"),tje.forEach(t),_8r=i(D),m9=n(D,"LI",{});var aje=s(m9);r7e=n(aje,"STRONG",{});var Q$t=s(r7e);u8r=r(Q$t,"vit_mae"),Q$t.forEach(t),b8r=r(aje," \u2014 "),cJ=n(aje,"A",{href:!0});var H$t=s(cJ);v8r=r(H$t,"TFViTMAEModel"),H$t.forEach(t),F8r=r(aje," (ViTMAE model)"),aje.forEach(t),T8r=i(D),g9=n(D,"LI",{});var nje=s(g9);t7e=n(nje,"STRONG",{});var U$t=s(t7e);M8r=r(U$t,"wav2vec2"),U$t.forEach(t),E8r=r(nje," \u2014 "),fJ=n(nje,"A",{href:!0});var J$t=s(fJ);C8r=r(J$t,"TFWav2Vec2Model"),J$t.forEach(t),w8r=r(nje," (Wav2Vec2 model)"),nje.forEach(t),A8r=i(D),h9=n(D,"LI",{});var sje=s(h9);a7e=n(sje,"STRONG",{});var Y$t=s(a7e);L8r=r(Y$t,"xlm"),Y$t.forEach(t),y8r=r(sje," \u2014 "),mJ=n(sje,"A",{href:!0});var K$t=s(mJ);x8r=r(K$t,"TFXLMModel"),K$t.forEach(t),$8r=r(sje," (XLM model)"),sje.forEach(t),k8r=i(D),p9=n(D,"LI",{});var lje=s(p9);n7e=n(lje,"STRONG",{});var Z$t=s(n7e);S8r=r(Z$t,"xlm-roberta"),Z$t.forEach(t),R8r=r(lje," \u2014 "),gJ=n(lje,"A",{href:!0});var ekt=s(gJ);P8r=r(ekt,"TFXLMRobertaModel"),ekt.forEach(t),B8r=r(lje," (XLM-RoBERTa model)"),lje.forEach(t),I8r=i(D),_9=n(D,"LI",{});var ije=s(_9);s7e=n(ije,"STRONG",{});var okt=s(s7e);N8r=r(okt,"xlnet"),okt.forEach(t),q8r=r(ije," \u2014 "),hJ=n(ije,"A",{href:!0});var rkt=s(hJ);j8r=r(rkt,"TFXLNetModel"),rkt.forEach(t),D8r=r(ije," (XLNet model)"),ije.forEach(t),D.forEach(t),G8r=i($l),T(u9.$$.fragment,$l),$l.forEach(t),xl.forEach(t),bze=i(f),dc=n(f,"H2",{class:!0});var AQe=s(dc);b9=n(AQe,"A",{id:!0,class:!0,href:!0});var tkt=s(b9);l7e=n(tkt,"SPAN",{});var akt=s(l7e);T(Ky.$$.fragment,akt),akt.forEach(t),tkt.forEach(t),O8r=i(AQe),i7e=n(AQe,"SPAN",{});var nkt=s(i7e);V8r=r(nkt,"TFAutoModelForPreTraining"),nkt.forEach(t),AQe.forEach(t),vze=i(f),or=n(f,"DIV",{class:!0});var kl=s(or);T(Zy.$$.fragment,kl),X8r=i(kl),cc=n(kl,"P",{});var Pte=s(cc);z8r=r(Pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pJ=n(Pte,"A",{href:!0});var skt=s(pJ);W8r=r(skt,"from_pretrained()"),skt.forEach(t),Q8r=r(Pte," class method or the "),_J=n(Pte,"A",{href:!0});var lkt=s(_J);H8r=r(lkt,"from_config()"),lkt.forEach(t),U8r=r(Pte,` class
method.`),Pte.forEach(t),J8r=i(kl),ex=n(kl,"P",{});var LQe=s(ex);Y8r=r(LQe,"This class cannot be instantiated directly using "),d7e=n(LQe,"CODE",{});var ikt=s(d7e);K8r=r(ikt,"__init__()"),ikt.forEach(t),Z8r=r(LQe," (throws an error)."),LQe.forEach(t),e9r=i(kl),Rt=n(kl,"DIV",{class:!0});var lA=s(Rt);T(ox.$$.fragment,lA),o9r=i(lA),c7e=n(lA,"P",{});var dkt=s(c7e);r9r=r(dkt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),dkt.forEach(t),t9r=i(lA),fc=n(lA,"P",{});var Bte=s(fc);a9r=r(Bte,`Note:
Loading a model from its configuration file does `),f7e=n(Bte,"STRONG",{});var ckt=s(f7e);n9r=r(ckt,"not"),ckt.forEach(t),s9r=r(Bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),uJ=n(Bte,"A",{href:!0});var fkt=s(uJ);l9r=r(fkt,"from_pretrained()"),fkt.forEach(t),i9r=r(Bte," to load the model weights."),Bte.forEach(t),d9r=i(lA),T(v9.$$.fragment,lA),lA.forEach(t),c9r=i(kl),$r=n(kl,"DIV",{class:!0});var Sl=s($r);T(rx.$$.fragment,Sl),f9r=i(Sl),m7e=n(Sl,"P",{});var mkt=s(m7e);m9r=r(mkt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),mkt.forEach(t),g9r=i(Sl),ln=n(Sl,"P",{});var iA=s(ln);h9r=r(iA,"The model class to instantiate is selected based on the "),g7e=n(iA,"CODE",{});var gkt=s(g7e);p9r=r(gkt,"model_type"),gkt.forEach(t),_9r=r(iA,` property of the config object (either
passed as an argument or loaded from `),h7e=n(iA,"CODE",{});var hkt=s(h7e);u9r=r(hkt,"pretrained_model_name_or_path"),hkt.forEach(t),b9r=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p7e=n(iA,"CODE",{});var pkt=s(p7e);v9r=r(pkt,"pretrained_model_name_or_path"),pkt.forEach(t),F9r=r(iA,":"),iA.forEach(t),T9r=i(Sl),se=n(Sl,"UL",{});var le=s(se);F9=n(le,"LI",{});var dje=s(F9);_7e=n(dje,"STRONG",{});var _kt=s(_7e);M9r=r(_kt,"albert"),_kt.forEach(t),E9r=r(dje," \u2014 "),bJ=n(dje,"A",{href:!0});var ukt=s(bJ);C9r=r(ukt,"TFAlbertForPreTraining"),ukt.forEach(t),w9r=r(dje," (ALBERT model)"),dje.forEach(t),A9r=i(le),T9=n(le,"LI",{});var cje=s(T9);u7e=n(cje,"STRONG",{});var bkt=s(u7e);L9r=r(bkt,"bart"),bkt.forEach(t),y9r=r(cje," \u2014 "),vJ=n(cje,"A",{href:!0});var vkt=s(vJ);x9r=r(vkt,"TFBartForConditionalGeneration"),vkt.forEach(t),$9r=r(cje," (BART model)"),cje.forEach(t),k9r=i(le),M9=n(le,"LI",{});var fje=s(M9);b7e=n(fje,"STRONG",{});var Fkt=s(b7e);S9r=r(Fkt,"bert"),Fkt.forEach(t),R9r=r(fje," \u2014 "),FJ=n(fje,"A",{href:!0});var Tkt=s(FJ);P9r=r(Tkt,"TFBertForPreTraining"),Tkt.forEach(t),B9r=r(fje," (BERT model)"),fje.forEach(t),I9r=i(le),E9=n(le,"LI",{});var mje=s(E9);v7e=n(mje,"STRONG",{});var Mkt=s(v7e);N9r=r(Mkt,"camembert"),Mkt.forEach(t),q9r=r(mje," \u2014 "),TJ=n(mje,"A",{href:!0});var Ekt=s(TJ);j9r=r(Ekt,"TFCamembertForMaskedLM"),Ekt.forEach(t),D9r=r(mje," (CamemBERT model)"),mje.forEach(t),G9r=i(le),C9=n(le,"LI",{});var gje=s(C9);F7e=n(gje,"STRONG",{});var Ckt=s(F7e);O9r=r(Ckt,"ctrl"),Ckt.forEach(t),V9r=r(gje," \u2014 "),MJ=n(gje,"A",{href:!0});var wkt=s(MJ);X9r=r(wkt,"TFCTRLLMHeadModel"),wkt.forEach(t),z9r=r(gje," (CTRL model)"),gje.forEach(t),W9r=i(le),w9=n(le,"LI",{});var hje=s(w9);T7e=n(hje,"STRONG",{});var Akt=s(T7e);Q9r=r(Akt,"distilbert"),Akt.forEach(t),H9r=r(hje," \u2014 "),EJ=n(hje,"A",{href:!0});var Lkt=s(EJ);U9r=r(Lkt,"TFDistilBertForMaskedLM"),Lkt.forEach(t),J9r=r(hje," (DistilBERT model)"),hje.forEach(t),Y9r=i(le),A9=n(le,"LI",{});var pje=s(A9);M7e=n(pje,"STRONG",{});var ykt=s(M7e);K9r=r(ykt,"electra"),ykt.forEach(t),Z9r=r(pje," \u2014 "),CJ=n(pje,"A",{href:!0});var xkt=s(CJ);eMr=r(xkt,"TFElectraForPreTraining"),xkt.forEach(t),oMr=r(pje," (ELECTRA model)"),pje.forEach(t),rMr=i(le),L9=n(le,"LI",{});var _je=s(L9);E7e=n(_je,"STRONG",{});var $kt=s(E7e);tMr=r($kt,"flaubert"),$kt.forEach(t),aMr=r(_je," \u2014 "),wJ=n(_je,"A",{href:!0});var kkt=s(wJ);nMr=r(kkt,"TFFlaubertWithLMHeadModel"),kkt.forEach(t),sMr=r(_je," (FlauBERT model)"),_je.forEach(t),lMr=i(le),y9=n(le,"LI",{});var uje=s(y9);C7e=n(uje,"STRONG",{});var Skt=s(C7e);iMr=r(Skt,"funnel"),Skt.forEach(t),dMr=r(uje," \u2014 "),AJ=n(uje,"A",{href:!0});var Rkt=s(AJ);cMr=r(Rkt,"TFFunnelForPreTraining"),Rkt.forEach(t),fMr=r(uje," (Funnel Transformer model)"),uje.forEach(t),mMr=i(le),x9=n(le,"LI",{});var bje=s(x9);w7e=n(bje,"STRONG",{});var Pkt=s(w7e);gMr=r(Pkt,"gpt2"),Pkt.forEach(t),hMr=r(bje," \u2014 "),LJ=n(bje,"A",{href:!0});var Bkt=s(LJ);pMr=r(Bkt,"TFGPT2LMHeadModel"),Bkt.forEach(t),_Mr=r(bje," (OpenAI GPT-2 model)"),bje.forEach(t),uMr=i(le),$9=n(le,"LI",{});var vje=s($9);A7e=n(vje,"STRONG",{});var Ikt=s(A7e);bMr=r(Ikt,"layoutlm"),Ikt.forEach(t),vMr=r(vje," \u2014 "),yJ=n(vje,"A",{href:!0});var Nkt=s(yJ);FMr=r(Nkt,"TFLayoutLMForMaskedLM"),Nkt.forEach(t),TMr=r(vje," (LayoutLM model)"),vje.forEach(t),MMr=i(le),k9=n(le,"LI",{});var Fje=s(k9);L7e=n(Fje,"STRONG",{});var qkt=s(L7e);EMr=r(qkt,"lxmert"),qkt.forEach(t),CMr=r(Fje," \u2014 "),xJ=n(Fje,"A",{href:!0});var jkt=s(xJ);wMr=r(jkt,"TFLxmertForPreTraining"),jkt.forEach(t),AMr=r(Fje," (LXMERT model)"),Fje.forEach(t),LMr=i(le),S9=n(le,"LI",{});var Tje=s(S9);y7e=n(Tje,"STRONG",{});var Dkt=s(y7e);yMr=r(Dkt,"mobilebert"),Dkt.forEach(t),xMr=r(Tje," \u2014 "),$J=n(Tje,"A",{href:!0});var Gkt=s($J);$Mr=r(Gkt,"TFMobileBertForPreTraining"),Gkt.forEach(t),kMr=r(Tje," (MobileBERT model)"),Tje.forEach(t),SMr=i(le),R9=n(le,"LI",{});var Mje=s(R9);x7e=n(Mje,"STRONG",{});var Okt=s(x7e);RMr=r(Okt,"mpnet"),Okt.forEach(t),PMr=r(Mje," \u2014 "),kJ=n(Mje,"A",{href:!0});var Vkt=s(kJ);BMr=r(Vkt,"TFMPNetForMaskedLM"),Vkt.forEach(t),IMr=r(Mje," (MPNet model)"),Mje.forEach(t),NMr=i(le),P9=n(le,"LI",{});var Eje=s(P9);$7e=n(Eje,"STRONG",{});var Xkt=s($7e);qMr=r(Xkt,"openai-gpt"),Xkt.forEach(t),jMr=r(Eje," \u2014 "),SJ=n(Eje,"A",{href:!0});var zkt=s(SJ);DMr=r(zkt,"TFOpenAIGPTLMHeadModel"),zkt.forEach(t),GMr=r(Eje," (OpenAI GPT model)"),Eje.forEach(t),OMr=i(le),B9=n(le,"LI",{});var Cje=s(B9);k7e=n(Cje,"STRONG",{});var Wkt=s(k7e);VMr=r(Wkt,"roberta"),Wkt.forEach(t),XMr=r(Cje," \u2014 "),RJ=n(Cje,"A",{href:!0});var Qkt=s(RJ);zMr=r(Qkt,"TFRobertaForMaskedLM"),Qkt.forEach(t),WMr=r(Cje," (RoBERTa model)"),Cje.forEach(t),QMr=i(le),I9=n(le,"LI",{});var wje=s(I9);S7e=n(wje,"STRONG",{});var Hkt=s(S7e);HMr=r(Hkt,"t5"),Hkt.forEach(t),UMr=r(wje," \u2014 "),PJ=n(wje,"A",{href:!0});var Ukt=s(PJ);JMr=r(Ukt,"TFT5ForConditionalGeneration"),Ukt.forEach(t),YMr=r(wje," (T5 model)"),wje.forEach(t),KMr=i(le),N9=n(le,"LI",{});var Aje=s(N9);R7e=n(Aje,"STRONG",{});var Jkt=s(R7e);ZMr=r(Jkt,"tapas"),Jkt.forEach(t),e4r=r(Aje," \u2014 "),BJ=n(Aje,"A",{href:!0});var Ykt=s(BJ);o4r=r(Ykt,"TFTapasForMaskedLM"),Ykt.forEach(t),r4r=r(Aje," (TAPAS model)"),Aje.forEach(t),t4r=i(le),q9=n(le,"LI",{});var Lje=s(q9);P7e=n(Lje,"STRONG",{});var Kkt=s(P7e);a4r=r(Kkt,"transfo-xl"),Kkt.forEach(t),n4r=r(Lje," \u2014 "),IJ=n(Lje,"A",{href:!0});var Zkt=s(IJ);s4r=r(Zkt,"TFTransfoXLLMHeadModel"),Zkt.forEach(t),l4r=r(Lje," (Transformer-XL model)"),Lje.forEach(t),i4r=i(le),j9=n(le,"LI",{});var yje=s(j9);B7e=n(yje,"STRONG",{});var eSt=s(B7e);d4r=r(eSt,"vit_mae"),eSt.forEach(t),c4r=r(yje," \u2014 "),NJ=n(yje,"A",{href:!0});var oSt=s(NJ);f4r=r(oSt,"TFViTMAEForPreTraining"),oSt.forEach(t),m4r=r(yje," (ViTMAE model)"),yje.forEach(t),g4r=i(le),D9=n(le,"LI",{});var xje=s(D9);I7e=n(xje,"STRONG",{});var rSt=s(I7e);h4r=r(rSt,"xlm"),rSt.forEach(t),p4r=r(xje," \u2014 "),qJ=n(xje,"A",{href:!0});var tSt=s(qJ);_4r=r(tSt,"TFXLMWithLMHeadModel"),tSt.forEach(t),u4r=r(xje," (XLM model)"),xje.forEach(t),b4r=i(le),G9=n(le,"LI",{});var $je=s(G9);N7e=n($je,"STRONG",{});var aSt=s(N7e);v4r=r(aSt,"xlm-roberta"),aSt.forEach(t),F4r=r($je," \u2014 "),jJ=n($je,"A",{href:!0});var nSt=s(jJ);T4r=r(nSt,"TFXLMRobertaForMaskedLM"),nSt.forEach(t),M4r=r($je," (XLM-RoBERTa model)"),$je.forEach(t),E4r=i(le),O9=n(le,"LI",{});var kje=s(O9);q7e=n(kje,"STRONG",{});var sSt=s(q7e);C4r=r(sSt,"xlnet"),sSt.forEach(t),w4r=r(kje," \u2014 "),DJ=n(kje,"A",{href:!0});var lSt=s(DJ);A4r=r(lSt,"TFXLNetLMHeadModel"),lSt.forEach(t),L4r=r(kje," (XLNet model)"),kje.forEach(t),le.forEach(t),y4r=i(Sl),T(V9.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),Fze=i(f),mc=n(f,"H2",{class:!0});var yQe=s(mc);X9=n(yQe,"A",{id:!0,class:!0,href:!0});var iSt=s(X9);j7e=n(iSt,"SPAN",{});var dSt=s(j7e);T(tx.$$.fragment,dSt),dSt.forEach(t),iSt.forEach(t),x4r=i(yQe),D7e=n(yQe,"SPAN",{});var cSt=s(D7e);$4r=r(cSt,"TFAutoModelForCausalLM"),cSt.forEach(t),yQe.forEach(t),Tze=i(f),rr=n(f,"DIV",{class:!0});var Rl=s(rr);T(ax.$$.fragment,Rl),k4r=i(Rl),gc=n(Rl,"P",{});var Ite=s(gc);S4r=r(Ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),GJ=n(Ite,"A",{href:!0});var fSt=s(GJ);R4r=r(fSt,"from_pretrained()"),fSt.forEach(t),P4r=r(Ite," class method or the "),OJ=n(Ite,"A",{href:!0});var mSt=s(OJ);B4r=r(mSt,"from_config()"),mSt.forEach(t),I4r=r(Ite,` class
method.`),Ite.forEach(t),N4r=i(Rl),nx=n(Rl,"P",{});var xQe=s(nx);q4r=r(xQe,"This class cannot be instantiated directly using "),G7e=n(xQe,"CODE",{});var gSt=s(G7e);j4r=r(gSt,"__init__()"),gSt.forEach(t),D4r=r(xQe," (throws an error)."),xQe.forEach(t),G4r=i(Rl),Pt=n(Rl,"DIV",{class:!0});var dA=s(Pt);T(sx.$$.fragment,dA),O4r=i(dA),O7e=n(dA,"P",{});var hSt=s(O7e);V4r=r(hSt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),hSt.forEach(t),X4r=i(dA),hc=n(dA,"P",{});var Nte=s(hc);z4r=r(Nte,`Note:
Loading a model from its configuration file does `),V7e=n(Nte,"STRONG",{});var pSt=s(V7e);W4r=r(pSt,"not"),pSt.forEach(t),Q4r=r(Nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=n(Nte,"A",{href:!0});var _St=s(VJ);H4r=r(_St,"from_pretrained()"),_St.forEach(t),U4r=r(Nte," to load the model weights."),Nte.forEach(t),J4r=i(dA),T(z9.$$.fragment,dA),dA.forEach(t),Y4r=i(Rl),kr=n(Rl,"DIV",{class:!0});var Pl=s(kr);T(lx.$$.fragment,Pl),K4r=i(Pl),X7e=n(Pl,"P",{});var uSt=s(X7e);Z4r=r(uSt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),uSt.forEach(t),eEr=i(Pl),dn=n(Pl,"P",{});var cA=s(dn);oEr=r(cA,"The model class to instantiate is selected based on the "),z7e=n(cA,"CODE",{});var bSt=s(z7e);rEr=r(bSt,"model_type"),bSt.forEach(t),tEr=r(cA,` property of the config object (either
passed as an argument or loaded from `),W7e=n(cA,"CODE",{});var vSt=s(W7e);aEr=r(vSt,"pretrained_model_name_or_path"),vSt.forEach(t),nEr=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q7e=n(cA,"CODE",{});var FSt=s(Q7e);sEr=r(FSt,"pretrained_model_name_or_path"),FSt.forEach(t),lEr=r(cA,":"),cA.forEach(t),iEr=i(Pl),Me=n(Pl,"UL",{});var Ce=s(Me);W9=n(Ce,"LI",{});var Sje=s(W9);H7e=n(Sje,"STRONG",{});var TSt=s(H7e);dEr=r(TSt,"bert"),TSt.forEach(t),cEr=r(Sje," \u2014 "),XJ=n(Sje,"A",{href:!0});var MSt=s(XJ);fEr=r(MSt,"TFBertLMHeadModel"),MSt.forEach(t),mEr=r(Sje," (BERT model)"),Sje.forEach(t),gEr=i(Ce),Q9=n(Ce,"LI",{});var Rje=s(Q9);U7e=n(Rje,"STRONG",{});var ESt=s(U7e);hEr=r(ESt,"camembert"),ESt.forEach(t),pEr=r(Rje," \u2014 "),zJ=n(Rje,"A",{href:!0});var CSt=s(zJ);_Er=r(CSt,"TFCamembertForCausalLM"),CSt.forEach(t),uEr=r(Rje," (CamemBERT model)"),Rje.forEach(t),bEr=i(Ce),H9=n(Ce,"LI",{});var Pje=s(H9);J7e=n(Pje,"STRONG",{});var wSt=s(J7e);vEr=r(wSt,"ctrl"),wSt.forEach(t),FEr=r(Pje," \u2014 "),WJ=n(Pje,"A",{href:!0});var ASt=s(WJ);TEr=r(ASt,"TFCTRLLMHeadModel"),ASt.forEach(t),MEr=r(Pje," (CTRL model)"),Pje.forEach(t),EEr=i(Ce),U9=n(Ce,"LI",{});var Bje=s(U9);Y7e=n(Bje,"STRONG",{});var LSt=s(Y7e);CEr=r(LSt,"gpt2"),LSt.forEach(t),wEr=r(Bje," \u2014 "),QJ=n(Bje,"A",{href:!0});var ySt=s(QJ);AEr=r(ySt,"TFGPT2LMHeadModel"),ySt.forEach(t),LEr=r(Bje," (OpenAI GPT-2 model)"),Bje.forEach(t),yEr=i(Ce),J9=n(Ce,"LI",{});var Ije=s(J9);K7e=n(Ije,"STRONG",{});var xSt=s(K7e);xEr=r(xSt,"gptj"),xSt.forEach(t),$Er=r(Ije," \u2014 "),HJ=n(Ije,"A",{href:!0});var $St=s(HJ);kEr=r($St,"TFGPTJForCausalLM"),$St.forEach(t),SEr=r(Ije," (GPT-J model)"),Ije.forEach(t),REr=i(Ce),Y9=n(Ce,"LI",{});var Nje=s(Y9);Z7e=n(Nje,"STRONG",{});var kSt=s(Z7e);PEr=r(kSt,"openai-gpt"),kSt.forEach(t),BEr=r(Nje," \u2014 "),UJ=n(Nje,"A",{href:!0});var SSt=s(UJ);IEr=r(SSt,"TFOpenAIGPTLMHeadModel"),SSt.forEach(t),NEr=r(Nje," (OpenAI GPT model)"),Nje.forEach(t),qEr=i(Ce),K9=n(Ce,"LI",{});var qje=s(K9);e8e=n(qje,"STRONG",{});var RSt=s(e8e);jEr=r(RSt,"opt"),RSt.forEach(t),DEr=r(qje," \u2014 "),JJ=n(qje,"A",{href:!0});var PSt=s(JJ);GEr=r(PSt,"TFOPTForCausalLM"),PSt.forEach(t),OEr=r(qje," (OPT model)"),qje.forEach(t),VEr=i(Ce),Z9=n(Ce,"LI",{});var jje=s(Z9);o8e=n(jje,"STRONG",{});var BSt=s(o8e);XEr=r(BSt,"rembert"),BSt.forEach(t),zEr=r(jje," \u2014 "),YJ=n(jje,"A",{href:!0});var ISt=s(YJ);WEr=r(ISt,"TFRemBertForCausalLM"),ISt.forEach(t),QEr=r(jje," (RemBERT model)"),jje.forEach(t),HEr=i(Ce),eM=n(Ce,"LI",{});var Dje=s(eM);r8e=n(Dje,"STRONG",{});var NSt=s(r8e);UEr=r(NSt,"roberta"),NSt.forEach(t),JEr=r(Dje," \u2014 "),KJ=n(Dje,"A",{href:!0});var qSt=s(KJ);YEr=r(qSt,"TFRobertaForCausalLM"),qSt.forEach(t),KEr=r(Dje," (RoBERTa model)"),Dje.forEach(t),ZEr=i(Ce),oM=n(Ce,"LI",{});var Gje=s(oM);t8e=n(Gje,"STRONG",{});var jSt=s(t8e);eCr=r(jSt,"roformer"),jSt.forEach(t),oCr=r(Gje," \u2014 "),ZJ=n(Gje,"A",{href:!0});var DSt=s(ZJ);rCr=r(DSt,"TFRoFormerForCausalLM"),DSt.forEach(t),tCr=r(Gje," (RoFormer model)"),Gje.forEach(t),aCr=i(Ce),rM=n(Ce,"LI",{});var Oje=s(rM);a8e=n(Oje,"STRONG",{});var GSt=s(a8e);nCr=r(GSt,"transfo-xl"),GSt.forEach(t),sCr=r(Oje," \u2014 "),eY=n(Oje,"A",{href:!0});var OSt=s(eY);lCr=r(OSt,"TFTransfoXLLMHeadModel"),OSt.forEach(t),iCr=r(Oje," (Transformer-XL model)"),Oje.forEach(t),dCr=i(Ce),tM=n(Ce,"LI",{});var Vje=s(tM);n8e=n(Vje,"STRONG",{});var VSt=s(n8e);cCr=r(VSt,"xlm"),VSt.forEach(t),fCr=r(Vje," \u2014 "),oY=n(Vje,"A",{href:!0});var XSt=s(oY);mCr=r(XSt,"TFXLMWithLMHeadModel"),XSt.forEach(t),gCr=r(Vje," (XLM model)"),Vje.forEach(t),hCr=i(Ce),aM=n(Ce,"LI",{});var Xje=s(aM);s8e=n(Xje,"STRONG",{});var zSt=s(s8e);pCr=r(zSt,"xlnet"),zSt.forEach(t),_Cr=r(Xje," \u2014 "),rY=n(Xje,"A",{href:!0});var WSt=s(rY);uCr=r(WSt,"TFXLNetLMHeadModel"),WSt.forEach(t),bCr=r(Xje," (XLNet model)"),Xje.forEach(t),Ce.forEach(t),vCr=i(Pl),T(nM.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),Mze=i(f),pc=n(f,"H2",{class:!0});var $Qe=s(pc);sM=n($Qe,"A",{id:!0,class:!0,href:!0});var QSt=s(sM);l8e=n(QSt,"SPAN",{});var HSt=s(l8e);T(ix.$$.fragment,HSt),HSt.forEach(t),QSt.forEach(t),FCr=i($Qe),i8e=n($Qe,"SPAN",{});var USt=s(i8e);TCr=r(USt,"TFAutoModelForImageClassification"),USt.forEach(t),$Qe.forEach(t),Eze=i(f),tr=n(f,"DIV",{class:!0});var Bl=s(tr);T(dx.$$.fragment,Bl),MCr=i(Bl),_c=n(Bl,"P",{});var qte=s(_c);ECr=r(qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),tY=n(qte,"A",{href:!0});var JSt=s(tY);CCr=r(JSt,"from_pretrained()"),JSt.forEach(t),wCr=r(qte," class method or the "),aY=n(qte,"A",{href:!0});var YSt=s(aY);ACr=r(YSt,"from_config()"),YSt.forEach(t),LCr=r(qte,` class
method.`),qte.forEach(t),yCr=i(Bl),cx=n(Bl,"P",{});var kQe=s(cx);xCr=r(kQe,"This class cannot be instantiated directly using "),d8e=n(kQe,"CODE",{});var KSt=s(d8e);$Cr=r(KSt,"__init__()"),KSt.forEach(t),kCr=r(kQe," (throws an error)."),kQe.forEach(t),SCr=i(Bl),Bt=n(Bl,"DIV",{class:!0});var fA=s(Bt);T(fx.$$.fragment,fA),RCr=i(fA),c8e=n(fA,"P",{});var ZSt=s(c8e);PCr=r(ZSt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ZSt.forEach(t),BCr=i(fA),uc=n(fA,"P",{});var jte=s(uc);ICr=r(jte,`Note:
Loading a model from its configuration file does `),f8e=n(jte,"STRONG",{});var eRt=s(f8e);NCr=r(eRt,"not"),eRt.forEach(t),qCr=r(jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),nY=n(jte,"A",{href:!0});var oRt=s(nY);jCr=r(oRt,"from_pretrained()"),oRt.forEach(t),DCr=r(jte," to load the model weights."),jte.forEach(t),GCr=i(fA),T(lM.$$.fragment,fA),fA.forEach(t),OCr=i(Bl),Sr=n(Bl,"DIV",{class:!0});var Il=s(Sr);T(mx.$$.fragment,Il),VCr=i(Il),m8e=n(Il,"P",{});var rRt=s(m8e);XCr=r(rRt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),rRt.forEach(t),zCr=i(Il),cn=n(Il,"P",{});var mA=s(cn);WCr=r(mA,"The model class to instantiate is selected based on the "),g8e=n(mA,"CODE",{});var tRt=s(g8e);QCr=r(tRt,"model_type"),tRt.forEach(t),HCr=r(mA,` property of the config object (either
passed as an argument or loaded from `),h8e=n(mA,"CODE",{});var aRt=s(h8e);UCr=r(aRt,"pretrained_model_name_or_path"),aRt.forEach(t),JCr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p8e=n(mA,"CODE",{});var nRt=s(p8e);YCr=r(nRt,"pretrained_model_name_or_path"),nRt.forEach(t),KCr=r(mA,":"),mA.forEach(t),ZCr=i(Il),ar=n(Il,"UL",{});var ka=s(ar);iM=n(ka,"LI",{});var zje=s(iM);_8e=n(zje,"STRONG",{});var sRt=s(_8e);e5r=r(sRt,"convnext"),sRt.forEach(t),o5r=r(zje," \u2014 "),sY=n(zje,"A",{href:!0});var lRt=s(sY);r5r=r(lRt,"TFConvNextForImageClassification"),lRt.forEach(t),t5r=r(zje," (ConvNeXT model)"),zje.forEach(t),a5r=i(ka),dM=n(ka,"LI",{});var Wje=s(dM);u8e=n(Wje,"STRONG",{});var iRt=s(u8e);n5r=r(iRt,"data2vec-vision"),iRt.forEach(t),s5r=r(Wje," \u2014 "),lY=n(Wje,"A",{href:!0});var dRt=s(lY);l5r=r(dRt,"TFData2VecVisionForImageClassification"),dRt.forEach(t),i5r=r(Wje," (Data2VecVision model)"),Wje.forEach(t),d5r=i(ka),cM=n(ka,"LI",{});var Qje=s(cM);b8e=n(Qje,"STRONG",{});var cRt=s(b8e);c5r=r(cRt,"regnet"),cRt.forEach(t),f5r=r(Qje," \u2014 "),iY=n(Qje,"A",{href:!0});var fRt=s(iY);m5r=r(fRt,"TFRegNetForImageClassification"),fRt.forEach(t),g5r=r(Qje," (RegNet model)"),Qje.forEach(t),h5r=i(ka),fM=n(ka,"LI",{});var Hje=s(fM);v8e=n(Hje,"STRONG",{});var mRt=s(v8e);p5r=r(mRt,"resnet"),mRt.forEach(t),_5r=r(Hje," \u2014 "),dY=n(Hje,"A",{href:!0});var gRt=s(dY);u5r=r(gRt,"TFResNetForImageClassification"),gRt.forEach(t),b5r=r(Hje," (ResNet model)"),Hje.forEach(t),v5r=i(ka),mM=n(ka,"LI",{});var Uje=s(mM);F8e=n(Uje,"STRONG",{});var hRt=s(F8e);F5r=r(hRt,"swin"),hRt.forEach(t),T5r=r(Uje," \u2014 "),cY=n(Uje,"A",{href:!0});var pRt=s(cY);M5r=r(pRt,"TFSwinForImageClassification"),pRt.forEach(t),E5r=r(Uje," (Swin Transformer model)"),Uje.forEach(t),C5r=i(ka),gM=n(ka,"LI",{});var Jje=s(gM);T8e=n(Jje,"STRONG",{});var _Rt=s(T8e);w5r=r(_Rt,"vit"),_Rt.forEach(t),A5r=r(Jje," \u2014 "),fY=n(Jje,"A",{href:!0});var uRt=s(fY);L5r=r(uRt,"TFViTForImageClassification"),uRt.forEach(t),y5r=r(Jje," (ViT model)"),Jje.forEach(t),ka.forEach(t),x5r=i(Il),T(hM.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),Cze=i(f),bc=n(f,"H2",{class:!0});var SQe=s(bc);pM=n(SQe,"A",{id:!0,class:!0,href:!0});var bRt=s(pM);M8e=n(bRt,"SPAN",{});var vRt=s(M8e);T(gx.$$.fragment,vRt),vRt.forEach(t),bRt.forEach(t),$5r=i(SQe),E8e=n(SQe,"SPAN",{});var FRt=s(E8e);k5r=r(FRt,"TFAutoModelForMaskedLM"),FRt.forEach(t),SQe.forEach(t),wze=i(f),nr=n(f,"DIV",{class:!0});var Nl=s(nr);T(hx.$$.fragment,Nl),S5r=i(Nl),vc=n(Nl,"P",{});var Dte=s(vc);R5r=r(Dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mY=n(Dte,"A",{href:!0});var TRt=s(mY);P5r=r(TRt,"from_pretrained()"),TRt.forEach(t),B5r=r(Dte," class method or the "),gY=n(Dte,"A",{href:!0});var MRt=s(gY);I5r=r(MRt,"from_config()"),MRt.forEach(t),N5r=r(Dte,` class
method.`),Dte.forEach(t),q5r=i(Nl),px=n(Nl,"P",{});var RQe=s(px);j5r=r(RQe,"This class cannot be instantiated directly using "),C8e=n(RQe,"CODE",{});var ERt=s(C8e);D5r=r(ERt,"__init__()"),ERt.forEach(t),G5r=r(RQe," (throws an error)."),RQe.forEach(t),O5r=i(Nl),It=n(Nl,"DIV",{class:!0});var gA=s(It);T(_x.$$.fragment,gA),V5r=i(gA),w8e=n(gA,"P",{});var CRt=s(w8e);X5r=r(CRt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),CRt.forEach(t),z5r=i(gA),Fc=n(gA,"P",{});var Gte=s(Fc);W5r=r(Gte,`Note:
Loading a model from its configuration file does `),A8e=n(Gte,"STRONG",{});var wRt=s(A8e);Q5r=r(wRt,"not"),wRt.forEach(t),H5r=r(Gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),hY=n(Gte,"A",{href:!0});var ARt=s(hY);U5r=r(ARt,"from_pretrained()"),ARt.forEach(t),J5r=r(Gte," to load the model weights."),Gte.forEach(t),Y5r=i(gA),T(_M.$$.fragment,gA),gA.forEach(t),K5r=i(Nl),Rr=n(Nl,"DIV",{class:!0});var ql=s(Rr);T(ux.$$.fragment,ql),Z5r=i(ql),L8e=n(ql,"P",{});var LRt=s(L8e);e0r=r(LRt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),LRt.forEach(t),o0r=i(ql),fn=n(ql,"P",{});var hA=s(fn);r0r=r(hA,"The model class to instantiate is selected based on the "),y8e=n(hA,"CODE",{});var yRt=s(y8e);t0r=r(yRt,"model_type"),yRt.forEach(t),a0r=r(hA,` property of the config object (either
passed as an argument or loaded from `),x8e=n(hA,"CODE",{});var xRt=s(x8e);n0r=r(xRt,"pretrained_model_name_or_path"),xRt.forEach(t),s0r=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$8e=n(hA,"CODE",{});var $Rt=s($8e);l0r=r($Rt,"pretrained_model_name_or_path"),$Rt.forEach(t),i0r=r(hA,":"),hA.forEach(t),d0r=i(ql),ie=n(ql,"UL",{});var me=s(ie);uM=n(me,"LI",{});var Yje=s(uM);k8e=n(Yje,"STRONG",{});var kRt=s(k8e);c0r=r(kRt,"albert"),kRt.forEach(t),f0r=r(Yje," \u2014 "),pY=n(Yje,"A",{href:!0});var SRt=s(pY);m0r=r(SRt,"TFAlbertForMaskedLM"),SRt.forEach(t),g0r=r(Yje," (ALBERT model)"),Yje.forEach(t),h0r=i(me),bM=n(me,"LI",{});var Kje=s(bM);S8e=n(Kje,"STRONG",{});var RRt=s(S8e);p0r=r(RRt,"bert"),RRt.forEach(t),_0r=r(Kje," \u2014 "),_Y=n(Kje,"A",{href:!0});var PRt=s(_Y);u0r=r(PRt,"TFBertForMaskedLM"),PRt.forEach(t),b0r=r(Kje," (BERT model)"),Kje.forEach(t),v0r=i(me),vM=n(me,"LI",{});var Zje=s(vM);R8e=n(Zje,"STRONG",{});var BRt=s(R8e);F0r=r(BRt,"camembert"),BRt.forEach(t),T0r=r(Zje," \u2014 "),uY=n(Zje,"A",{href:!0});var IRt=s(uY);M0r=r(IRt,"TFCamembertForMaskedLM"),IRt.forEach(t),E0r=r(Zje," (CamemBERT model)"),Zje.forEach(t),C0r=i(me),FM=n(me,"LI",{});var eDe=s(FM);P8e=n(eDe,"STRONG",{});var NRt=s(P8e);w0r=r(NRt,"convbert"),NRt.forEach(t),A0r=r(eDe," \u2014 "),bY=n(eDe,"A",{href:!0});var qRt=s(bY);L0r=r(qRt,"TFConvBertForMaskedLM"),qRt.forEach(t),y0r=r(eDe," (ConvBERT model)"),eDe.forEach(t),x0r=i(me),TM=n(me,"LI",{});var oDe=s(TM);B8e=n(oDe,"STRONG",{});var jRt=s(B8e);$0r=r(jRt,"deberta"),jRt.forEach(t),k0r=r(oDe," \u2014 "),vY=n(oDe,"A",{href:!0});var DRt=s(vY);S0r=r(DRt,"TFDebertaForMaskedLM"),DRt.forEach(t),R0r=r(oDe," (DeBERTa model)"),oDe.forEach(t),P0r=i(me),MM=n(me,"LI",{});var rDe=s(MM);I8e=n(rDe,"STRONG",{});var GRt=s(I8e);B0r=r(GRt,"deberta-v2"),GRt.forEach(t),I0r=r(rDe," \u2014 "),FY=n(rDe,"A",{href:!0});var ORt=s(FY);N0r=r(ORt,"TFDebertaV2ForMaskedLM"),ORt.forEach(t),q0r=r(rDe," (DeBERTa-v2 model)"),rDe.forEach(t),j0r=i(me),EM=n(me,"LI",{});var tDe=s(EM);N8e=n(tDe,"STRONG",{});var VRt=s(N8e);D0r=r(VRt,"distilbert"),VRt.forEach(t),G0r=r(tDe," \u2014 "),TY=n(tDe,"A",{href:!0});var XRt=s(TY);O0r=r(XRt,"TFDistilBertForMaskedLM"),XRt.forEach(t),V0r=r(tDe," (DistilBERT model)"),tDe.forEach(t),X0r=i(me),CM=n(me,"LI",{});var aDe=s(CM);q8e=n(aDe,"STRONG",{});var zRt=s(q8e);z0r=r(zRt,"electra"),zRt.forEach(t),W0r=r(aDe," \u2014 "),MY=n(aDe,"A",{href:!0});var WRt=s(MY);Q0r=r(WRt,"TFElectraForMaskedLM"),WRt.forEach(t),H0r=r(aDe," (ELECTRA model)"),aDe.forEach(t),U0r=i(me),wM=n(me,"LI",{});var nDe=s(wM);j8e=n(nDe,"STRONG",{});var QRt=s(j8e);J0r=r(QRt,"flaubert"),QRt.forEach(t),Y0r=r(nDe," \u2014 "),EY=n(nDe,"A",{href:!0});var HRt=s(EY);K0r=r(HRt,"TFFlaubertWithLMHeadModel"),HRt.forEach(t),Z0r=r(nDe," (FlauBERT model)"),nDe.forEach(t),ewr=i(me),AM=n(me,"LI",{});var sDe=s(AM);D8e=n(sDe,"STRONG",{});var URt=s(D8e);owr=r(URt,"funnel"),URt.forEach(t),rwr=r(sDe," \u2014 "),CY=n(sDe,"A",{href:!0});var JRt=s(CY);twr=r(JRt,"TFFunnelForMaskedLM"),JRt.forEach(t),awr=r(sDe," (Funnel Transformer model)"),sDe.forEach(t),nwr=i(me),LM=n(me,"LI",{});var lDe=s(LM);G8e=n(lDe,"STRONG",{});var YRt=s(G8e);swr=r(YRt,"layoutlm"),YRt.forEach(t),lwr=r(lDe," \u2014 "),wY=n(lDe,"A",{href:!0});var KRt=s(wY);iwr=r(KRt,"TFLayoutLMForMaskedLM"),KRt.forEach(t),dwr=r(lDe," (LayoutLM model)"),lDe.forEach(t),cwr=i(me),yM=n(me,"LI",{});var iDe=s(yM);O8e=n(iDe,"STRONG",{});var ZRt=s(O8e);fwr=r(ZRt,"longformer"),ZRt.forEach(t),mwr=r(iDe," \u2014 "),AY=n(iDe,"A",{href:!0});var ePt=s(AY);gwr=r(ePt,"TFLongformerForMaskedLM"),ePt.forEach(t),hwr=r(iDe," (Longformer model)"),iDe.forEach(t),pwr=i(me),xM=n(me,"LI",{});var dDe=s(xM);V8e=n(dDe,"STRONG",{});var oPt=s(V8e);_wr=r(oPt,"mobilebert"),oPt.forEach(t),uwr=r(dDe," \u2014 "),LY=n(dDe,"A",{href:!0});var rPt=s(LY);bwr=r(rPt,"TFMobileBertForMaskedLM"),rPt.forEach(t),vwr=r(dDe," (MobileBERT model)"),dDe.forEach(t),Fwr=i(me),$M=n(me,"LI",{});var cDe=s($M);X8e=n(cDe,"STRONG",{});var tPt=s(X8e);Twr=r(tPt,"mpnet"),tPt.forEach(t),Mwr=r(cDe," \u2014 "),yY=n(cDe,"A",{href:!0});var aPt=s(yY);Ewr=r(aPt,"TFMPNetForMaskedLM"),aPt.forEach(t),Cwr=r(cDe," (MPNet model)"),cDe.forEach(t),wwr=i(me),kM=n(me,"LI",{});var fDe=s(kM);z8e=n(fDe,"STRONG",{});var nPt=s(z8e);Awr=r(nPt,"rembert"),nPt.forEach(t),Lwr=r(fDe," \u2014 "),xY=n(fDe,"A",{href:!0});var sPt=s(xY);ywr=r(sPt,"TFRemBertForMaskedLM"),sPt.forEach(t),xwr=r(fDe," (RemBERT model)"),fDe.forEach(t),$wr=i(me),SM=n(me,"LI",{});var mDe=s(SM);W8e=n(mDe,"STRONG",{});var lPt=s(W8e);kwr=r(lPt,"roberta"),lPt.forEach(t),Swr=r(mDe," \u2014 "),$Y=n(mDe,"A",{href:!0});var iPt=s($Y);Rwr=r(iPt,"TFRobertaForMaskedLM"),iPt.forEach(t),Pwr=r(mDe," (RoBERTa model)"),mDe.forEach(t),Bwr=i(me),RM=n(me,"LI",{});var gDe=s(RM);Q8e=n(gDe,"STRONG",{});var dPt=s(Q8e);Iwr=r(dPt,"roformer"),dPt.forEach(t),Nwr=r(gDe," \u2014 "),kY=n(gDe,"A",{href:!0});var cPt=s(kY);qwr=r(cPt,"TFRoFormerForMaskedLM"),cPt.forEach(t),jwr=r(gDe," (RoFormer model)"),gDe.forEach(t),Dwr=i(me),PM=n(me,"LI",{});var hDe=s(PM);H8e=n(hDe,"STRONG",{});var fPt=s(H8e);Gwr=r(fPt,"tapas"),fPt.forEach(t),Owr=r(hDe," \u2014 "),SY=n(hDe,"A",{href:!0});var mPt=s(SY);Vwr=r(mPt,"TFTapasForMaskedLM"),mPt.forEach(t),Xwr=r(hDe," (TAPAS model)"),hDe.forEach(t),zwr=i(me),BM=n(me,"LI",{});var pDe=s(BM);U8e=n(pDe,"STRONG",{});var gPt=s(U8e);Wwr=r(gPt,"xlm"),gPt.forEach(t),Qwr=r(pDe," \u2014 "),RY=n(pDe,"A",{href:!0});var hPt=s(RY);Hwr=r(hPt,"TFXLMWithLMHeadModel"),hPt.forEach(t),Uwr=r(pDe," (XLM model)"),pDe.forEach(t),Jwr=i(me),IM=n(me,"LI",{});var _De=s(IM);J8e=n(_De,"STRONG",{});var pPt=s(J8e);Ywr=r(pPt,"xlm-roberta"),pPt.forEach(t),Kwr=r(_De," \u2014 "),PY=n(_De,"A",{href:!0});var _Pt=s(PY);Zwr=r(_Pt,"TFXLMRobertaForMaskedLM"),_Pt.forEach(t),eAr=r(_De," (XLM-RoBERTa model)"),_De.forEach(t),me.forEach(t),oAr=i(ql),T(NM.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),Aze=i(f),Tc=n(f,"H2",{class:!0});var PQe=s(Tc);qM=n(PQe,"A",{id:!0,class:!0,href:!0});var uPt=s(qM);Y8e=n(uPt,"SPAN",{});var bPt=s(Y8e);T(bx.$$.fragment,bPt),bPt.forEach(t),uPt.forEach(t),rAr=i(PQe),K8e=n(PQe,"SPAN",{});var vPt=s(K8e);tAr=r(vPt,"TFAutoModelForSeq2SeqLM"),vPt.forEach(t),PQe.forEach(t),Lze=i(f),sr=n(f,"DIV",{class:!0});var jl=s(sr);T(vx.$$.fragment,jl),aAr=i(jl),Mc=n(jl,"P",{});var Ote=s(Mc);nAr=r(Ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),BY=n(Ote,"A",{href:!0});var FPt=s(BY);sAr=r(FPt,"from_pretrained()"),FPt.forEach(t),lAr=r(Ote," class method or the "),IY=n(Ote,"A",{href:!0});var TPt=s(IY);iAr=r(TPt,"from_config()"),TPt.forEach(t),dAr=r(Ote,` class
method.`),Ote.forEach(t),cAr=i(jl),Fx=n(jl,"P",{});var BQe=s(Fx);fAr=r(BQe,"This class cannot be instantiated directly using "),Z8e=n(BQe,"CODE",{});var MPt=s(Z8e);mAr=r(MPt,"__init__()"),MPt.forEach(t),gAr=r(BQe," (throws an error)."),BQe.forEach(t),hAr=i(jl),Nt=n(jl,"DIV",{class:!0});var pA=s(Nt);T(Tx.$$.fragment,pA),pAr=i(pA),e9e=n(pA,"P",{});var EPt=s(e9e);_Ar=r(EPt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),EPt.forEach(t),uAr=i(pA),Ec=n(pA,"P",{});var Vte=s(Ec);bAr=r(Vte,`Note:
Loading a model from its configuration file does `),o9e=n(Vte,"STRONG",{});var CPt=s(o9e);vAr=r(CPt,"not"),CPt.forEach(t),FAr=r(Vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),NY=n(Vte,"A",{href:!0});var wPt=s(NY);TAr=r(wPt,"from_pretrained()"),wPt.forEach(t),MAr=r(Vte," to load the model weights."),Vte.forEach(t),EAr=i(pA),T(jM.$$.fragment,pA),pA.forEach(t),CAr=i(jl),Pr=n(jl,"DIV",{class:!0});var Dl=s(Pr);T(Mx.$$.fragment,Dl),wAr=i(Dl),r9e=n(Dl,"P",{});var APt=s(r9e);AAr=r(APt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),APt.forEach(t),LAr=i(Dl),mn=n(Dl,"P",{});var _A=s(mn);yAr=r(_A,"The model class to instantiate is selected based on the "),t9e=n(_A,"CODE",{});var LPt=s(t9e);xAr=r(LPt,"model_type"),LPt.forEach(t),$Ar=r(_A,` property of the config object (either
passed as an argument or loaded from `),a9e=n(_A,"CODE",{});var yPt=s(a9e);kAr=r(yPt,"pretrained_model_name_or_path"),yPt.forEach(t),SAr=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n9e=n(_A,"CODE",{});var xPt=s(n9e);RAr=r(xPt,"pretrained_model_name_or_path"),xPt.forEach(t),PAr=r(_A,":"),_A.forEach(t),BAr=i(Dl),ye=n(Dl,"UL",{});var Ie=s(ye);DM=n(Ie,"LI",{});var uDe=s(DM);s9e=n(uDe,"STRONG",{});var $Pt=s(s9e);IAr=r($Pt,"bart"),$Pt.forEach(t),NAr=r(uDe," \u2014 "),qY=n(uDe,"A",{href:!0});var kPt=s(qY);qAr=r(kPt,"TFBartForConditionalGeneration"),kPt.forEach(t),jAr=r(uDe," (BART model)"),uDe.forEach(t),DAr=i(Ie),GM=n(Ie,"LI",{});var bDe=s(GM);l9e=n(bDe,"STRONG",{});var SPt=s(l9e);GAr=r(SPt,"blenderbot"),SPt.forEach(t),OAr=r(bDe," \u2014 "),jY=n(bDe,"A",{href:!0});var RPt=s(jY);VAr=r(RPt,"TFBlenderbotForConditionalGeneration"),RPt.forEach(t),XAr=r(bDe," (Blenderbot model)"),bDe.forEach(t),zAr=i(Ie),OM=n(Ie,"LI",{});var vDe=s(OM);i9e=n(vDe,"STRONG",{});var PPt=s(i9e);WAr=r(PPt,"blenderbot-small"),PPt.forEach(t),QAr=r(vDe," \u2014 "),DY=n(vDe,"A",{href:!0});var BPt=s(DY);HAr=r(BPt,"TFBlenderbotSmallForConditionalGeneration"),BPt.forEach(t),UAr=r(vDe," (BlenderbotSmall model)"),vDe.forEach(t),JAr=i(Ie),VM=n(Ie,"LI",{});var FDe=s(VM);d9e=n(FDe,"STRONG",{});var IPt=s(d9e);YAr=r(IPt,"encoder-decoder"),IPt.forEach(t),KAr=r(FDe," \u2014 "),GY=n(FDe,"A",{href:!0});var NPt=s(GY);ZAr=r(NPt,"TFEncoderDecoderModel"),NPt.forEach(t),e6r=r(FDe," (Encoder decoder model)"),FDe.forEach(t),o6r=i(Ie),XM=n(Ie,"LI",{});var TDe=s(XM);c9e=n(TDe,"STRONG",{});var qPt=s(c9e);r6r=r(qPt,"led"),qPt.forEach(t),t6r=r(TDe," \u2014 "),OY=n(TDe,"A",{href:!0});var jPt=s(OY);a6r=r(jPt,"TFLEDForConditionalGeneration"),jPt.forEach(t),n6r=r(TDe," (LED model)"),TDe.forEach(t),s6r=i(Ie),zM=n(Ie,"LI",{});var MDe=s(zM);f9e=n(MDe,"STRONG",{});var DPt=s(f9e);l6r=r(DPt,"marian"),DPt.forEach(t),i6r=r(MDe," \u2014 "),VY=n(MDe,"A",{href:!0});var GPt=s(VY);d6r=r(GPt,"TFMarianMTModel"),GPt.forEach(t),c6r=r(MDe," (Marian model)"),MDe.forEach(t),f6r=i(Ie),WM=n(Ie,"LI",{});var EDe=s(WM);m9e=n(EDe,"STRONG",{});var OPt=s(m9e);m6r=r(OPt,"mbart"),OPt.forEach(t),g6r=r(EDe," \u2014 "),XY=n(EDe,"A",{href:!0});var VPt=s(XY);h6r=r(VPt,"TFMBartForConditionalGeneration"),VPt.forEach(t),p6r=r(EDe," (mBART model)"),EDe.forEach(t),_6r=i(Ie),QM=n(Ie,"LI",{});var CDe=s(QM);g9e=n(CDe,"STRONG",{});var XPt=s(g9e);u6r=r(XPt,"mt5"),XPt.forEach(t),b6r=r(CDe," \u2014 "),zY=n(CDe,"A",{href:!0});var zPt=s(zY);v6r=r(zPt,"TFMT5ForConditionalGeneration"),zPt.forEach(t),F6r=r(CDe," (MT5 model)"),CDe.forEach(t),T6r=i(Ie),HM=n(Ie,"LI",{});var wDe=s(HM);h9e=n(wDe,"STRONG",{});var WPt=s(h9e);M6r=r(WPt,"pegasus"),WPt.forEach(t),E6r=r(wDe," \u2014 "),WY=n(wDe,"A",{href:!0});var QPt=s(WY);C6r=r(QPt,"TFPegasusForConditionalGeneration"),QPt.forEach(t),w6r=r(wDe," (Pegasus model)"),wDe.forEach(t),A6r=i(Ie),UM=n(Ie,"LI",{});var ADe=s(UM);p9e=n(ADe,"STRONG",{});var HPt=s(p9e);L6r=r(HPt,"t5"),HPt.forEach(t),y6r=r(ADe," \u2014 "),QY=n(ADe,"A",{href:!0});var UPt=s(QY);x6r=r(UPt,"TFT5ForConditionalGeneration"),UPt.forEach(t),$6r=r(ADe," (T5 model)"),ADe.forEach(t),Ie.forEach(t),k6r=i(Dl),T(JM.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),yze=i(f),Cc=n(f,"H2",{class:!0});var IQe=s(Cc);YM=n(IQe,"A",{id:!0,class:!0,href:!0});var JPt=s(YM);_9e=n(JPt,"SPAN",{});var YPt=s(_9e);T(Ex.$$.fragment,YPt),YPt.forEach(t),JPt.forEach(t),S6r=i(IQe),u9e=n(IQe,"SPAN",{});var KPt=s(u9e);R6r=r(KPt,"TFAutoModelForSequenceClassification"),KPt.forEach(t),IQe.forEach(t),xze=i(f),lr=n(f,"DIV",{class:!0});var Gl=s(lr);T(Cx.$$.fragment,Gl),P6r=i(Gl),wc=n(Gl,"P",{});var Xte=s(wc);B6r=r(Xte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),HY=n(Xte,"A",{href:!0});var ZPt=s(HY);I6r=r(ZPt,"from_pretrained()"),ZPt.forEach(t),N6r=r(Xte," class method or the "),UY=n(Xte,"A",{href:!0});var eBt=s(UY);q6r=r(eBt,"from_config()"),eBt.forEach(t),j6r=r(Xte,` class
method.`),Xte.forEach(t),D6r=i(Gl),wx=n(Gl,"P",{});var NQe=s(wx);G6r=r(NQe,"This class cannot be instantiated directly using "),b9e=n(NQe,"CODE",{});var oBt=s(b9e);O6r=r(oBt,"__init__()"),oBt.forEach(t),V6r=r(NQe," (throws an error)."),NQe.forEach(t),X6r=i(Gl),qt=n(Gl,"DIV",{class:!0});var uA=s(qt);T(Ax.$$.fragment,uA),z6r=i(uA),v9e=n(uA,"P",{});var rBt=s(v9e);W6r=r(rBt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),rBt.forEach(t),Q6r=i(uA),Ac=n(uA,"P",{});var zte=s(Ac);H6r=r(zte,`Note:
Loading a model from its configuration file does `),F9e=n(zte,"STRONG",{});var tBt=s(F9e);U6r=r(tBt,"not"),tBt.forEach(t),J6r=r(zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),JY=n(zte,"A",{href:!0});var aBt=s(JY);Y6r=r(aBt,"from_pretrained()"),aBt.forEach(t),K6r=r(zte," to load the model weights."),zte.forEach(t),Z6r=i(uA),T(KM.$$.fragment,uA),uA.forEach(t),eLr=i(Gl),Br=n(Gl,"DIV",{class:!0});var Ol=s(Br);T(Lx.$$.fragment,Ol),oLr=i(Ol),T9e=n(Ol,"P",{});var nBt=s(T9e);rLr=r(nBt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),nBt.forEach(t),tLr=i(Ol),gn=n(Ol,"P",{});var bA=s(gn);aLr=r(bA,"The model class to instantiate is selected based on the "),M9e=n(bA,"CODE",{});var sBt=s(M9e);nLr=r(sBt,"model_type"),sBt.forEach(t),sLr=r(bA,` property of the config object (either
passed as an argument or loaded from `),E9e=n(bA,"CODE",{});var lBt=s(E9e);lLr=r(lBt,"pretrained_model_name_or_path"),lBt.forEach(t),iLr=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C9e=n(bA,"CODE",{});var iBt=s(C9e);dLr=r(iBt,"pretrained_model_name_or_path"),iBt.forEach(t),cLr=r(bA,":"),bA.forEach(t),fLr=i(Ol),te=n(Ol,"UL",{});var ne=s(te);ZM=n(ne,"LI",{});var LDe=s(ZM);w9e=n(LDe,"STRONG",{});var dBt=s(w9e);mLr=r(dBt,"albert"),dBt.forEach(t),gLr=r(LDe," \u2014 "),YY=n(LDe,"A",{href:!0});var cBt=s(YY);hLr=r(cBt,"TFAlbertForSequenceClassification"),cBt.forEach(t),pLr=r(LDe," (ALBERT model)"),LDe.forEach(t),_Lr=i(ne),e4=n(ne,"LI",{});var yDe=s(e4);A9e=n(yDe,"STRONG",{});var fBt=s(A9e);uLr=r(fBt,"bert"),fBt.forEach(t),bLr=r(yDe," \u2014 "),KY=n(yDe,"A",{href:!0});var mBt=s(KY);vLr=r(mBt,"TFBertForSequenceClassification"),mBt.forEach(t),FLr=r(yDe," (BERT model)"),yDe.forEach(t),TLr=i(ne),o4=n(ne,"LI",{});var xDe=s(o4);L9e=n(xDe,"STRONG",{});var gBt=s(L9e);MLr=r(gBt,"camembert"),gBt.forEach(t),ELr=r(xDe," \u2014 "),ZY=n(xDe,"A",{href:!0});var hBt=s(ZY);CLr=r(hBt,"TFCamembertForSequenceClassification"),hBt.forEach(t),wLr=r(xDe," (CamemBERT model)"),xDe.forEach(t),ALr=i(ne),r4=n(ne,"LI",{});var $De=s(r4);y9e=n($De,"STRONG",{});var pBt=s(y9e);LLr=r(pBt,"convbert"),pBt.forEach(t),yLr=r($De," \u2014 "),eK=n($De,"A",{href:!0});var _Bt=s(eK);xLr=r(_Bt,"TFConvBertForSequenceClassification"),_Bt.forEach(t),$Lr=r($De," (ConvBERT model)"),$De.forEach(t),kLr=i(ne),t4=n(ne,"LI",{});var kDe=s(t4);x9e=n(kDe,"STRONG",{});var uBt=s(x9e);SLr=r(uBt,"ctrl"),uBt.forEach(t),RLr=r(kDe," \u2014 "),oK=n(kDe,"A",{href:!0});var bBt=s(oK);PLr=r(bBt,"TFCTRLForSequenceClassification"),bBt.forEach(t),BLr=r(kDe," (CTRL model)"),kDe.forEach(t),ILr=i(ne),a4=n(ne,"LI",{});var SDe=s(a4);$9e=n(SDe,"STRONG",{});var vBt=s($9e);NLr=r(vBt,"deberta"),vBt.forEach(t),qLr=r(SDe," \u2014 "),rK=n(SDe,"A",{href:!0});var FBt=s(rK);jLr=r(FBt,"TFDebertaForSequenceClassification"),FBt.forEach(t),DLr=r(SDe," (DeBERTa model)"),SDe.forEach(t),GLr=i(ne),n4=n(ne,"LI",{});var RDe=s(n4);k9e=n(RDe,"STRONG",{});var TBt=s(k9e);OLr=r(TBt,"deberta-v2"),TBt.forEach(t),VLr=r(RDe," \u2014 "),tK=n(RDe,"A",{href:!0});var MBt=s(tK);XLr=r(MBt,"TFDebertaV2ForSequenceClassification"),MBt.forEach(t),zLr=r(RDe," (DeBERTa-v2 model)"),RDe.forEach(t),WLr=i(ne),s4=n(ne,"LI",{});var PDe=s(s4);S9e=n(PDe,"STRONG",{});var EBt=s(S9e);QLr=r(EBt,"distilbert"),EBt.forEach(t),HLr=r(PDe," \u2014 "),aK=n(PDe,"A",{href:!0});var CBt=s(aK);ULr=r(CBt,"TFDistilBertForSequenceClassification"),CBt.forEach(t),JLr=r(PDe," (DistilBERT model)"),PDe.forEach(t),YLr=i(ne),l4=n(ne,"LI",{});var BDe=s(l4);R9e=n(BDe,"STRONG",{});var wBt=s(R9e);KLr=r(wBt,"electra"),wBt.forEach(t),ZLr=r(BDe," \u2014 "),nK=n(BDe,"A",{href:!0});var ABt=s(nK);eyr=r(ABt,"TFElectraForSequenceClassification"),ABt.forEach(t),oyr=r(BDe," (ELECTRA model)"),BDe.forEach(t),ryr=i(ne),i4=n(ne,"LI",{});var IDe=s(i4);P9e=n(IDe,"STRONG",{});var LBt=s(P9e);tyr=r(LBt,"flaubert"),LBt.forEach(t),ayr=r(IDe," \u2014 "),sK=n(IDe,"A",{href:!0});var yBt=s(sK);nyr=r(yBt,"TFFlaubertForSequenceClassification"),yBt.forEach(t),syr=r(IDe," (FlauBERT model)"),IDe.forEach(t),lyr=i(ne),d4=n(ne,"LI",{});var NDe=s(d4);B9e=n(NDe,"STRONG",{});var xBt=s(B9e);iyr=r(xBt,"funnel"),xBt.forEach(t),dyr=r(NDe," \u2014 "),lK=n(NDe,"A",{href:!0});var $Bt=s(lK);cyr=r($Bt,"TFFunnelForSequenceClassification"),$Bt.forEach(t),fyr=r(NDe," (Funnel Transformer model)"),NDe.forEach(t),myr=i(ne),c4=n(ne,"LI",{});var qDe=s(c4);I9e=n(qDe,"STRONG",{});var kBt=s(I9e);gyr=r(kBt,"gpt2"),kBt.forEach(t),hyr=r(qDe," \u2014 "),iK=n(qDe,"A",{href:!0});var SBt=s(iK);pyr=r(SBt,"TFGPT2ForSequenceClassification"),SBt.forEach(t),_yr=r(qDe," (OpenAI GPT-2 model)"),qDe.forEach(t),uyr=i(ne),f4=n(ne,"LI",{});var jDe=s(f4);N9e=n(jDe,"STRONG",{});var RBt=s(N9e);byr=r(RBt,"gptj"),RBt.forEach(t),vyr=r(jDe," \u2014 "),dK=n(jDe,"A",{href:!0});var PBt=s(dK);Fyr=r(PBt,"TFGPTJForSequenceClassification"),PBt.forEach(t),Tyr=r(jDe," (GPT-J model)"),jDe.forEach(t),Myr=i(ne),m4=n(ne,"LI",{});var DDe=s(m4);q9e=n(DDe,"STRONG",{});var BBt=s(q9e);Eyr=r(BBt,"layoutlm"),BBt.forEach(t),Cyr=r(DDe," \u2014 "),cK=n(DDe,"A",{href:!0});var IBt=s(cK);wyr=r(IBt,"TFLayoutLMForSequenceClassification"),IBt.forEach(t),Ayr=r(DDe," (LayoutLM model)"),DDe.forEach(t),Lyr=i(ne),g4=n(ne,"LI",{});var GDe=s(g4);j9e=n(GDe,"STRONG",{});var NBt=s(j9e);yyr=r(NBt,"longformer"),NBt.forEach(t),xyr=r(GDe," \u2014 "),fK=n(GDe,"A",{href:!0});var qBt=s(fK);$yr=r(qBt,"TFLongformerForSequenceClassification"),qBt.forEach(t),kyr=r(GDe," (Longformer model)"),GDe.forEach(t),Syr=i(ne),h4=n(ne,"LI",{});var ODe=s(h4);D9e=n(ODe,"STRONG",{});var jBt=s(D9e);Ryr=r(jBt,"mobilebert"),jBt.forEach(t),Pyr=r(ODe," \u2014 "),mK=n(ODe,"A",{href:!0});var DBt=s(mK);Byr=r(DBt,"TFMobileBertForSequenceClassification"),DBt.forEach(t),Iyr=r(ODe," (MobileBERT model)"),ODe.forEach(t),Nyr=i(ne),p4=n(ne,"LI",{});var VDe=s(p4);G9e=n(VDe,"STRONG",{});var GBt=s(G9e);qyr=r(GBt,"mpnet"),GBt.forEach(t),jyr=r(VDe," \u2014 "),gK=n(VDe,"A",{href:!0});var OBt=s(gK);Dyr=r(OBt,"TFMPNetForSequenceClassification"),OBt.forEach(t),Gyr=r(VDe," (MPNet model)"),VDe.forEach(t),Oyr=i(ne),_4=n(ne,"LI",{});var XDe=s(_4);O9e=n(XDe,"STRONG",{});var VBt=s(O9e);Vyr=r(VBt,"openai-gpt"),VBt.forEach(t),Xyr=r(XDe," \u2014 "),hK=n(XDe,"A",{href:!0});var XBt=s(hK);zyr=r(XBt,"TFOpenAIGPTForSequenceClassification"),XBt.forEach(t),Wyr=r(XDe," (OpenAI GPT model)"),XDe.forEach(t),Qyr=i(ne),u4=n(ne,"LI",{});var zDe=s(u4);V9e=n(zDe,"STRONG",{});var zBt=s(V9e);Hyr=r(zBt,"rembert"),zBt.forEach(t),Uyr=r(zDe," \u2014 "),pK=n(zDe,"A",{href:!0});var WBt=s(pK);Jyr=r(WBt,"TFRemBertForSequenceClassification"),WBt.forEach(t),Yyr=r(zDe," (RemBERT model)"),zDe.forEach(t),Kyr=i(ne),b4=n(ne,"LI",{});var WDe=s(b4);X9e=n(WDe,"STRONG",{});var QBt=s(X9e);Zyr=r(QBt,"roberta"),QBt.forEach(t),exr=r(WDe," \u2014 "),_K=n(WDe,"A",{href:!0});var HBt=s(_K);oxr=r(HBt,"TFRobertaForSequenceClassification"),HBt.forEach(t),rxr=r(WDe," (RoBERTa model)"),WDe.forEach(t),txr=i(ne),v4=n(ne,"LI",{});var QDe=s(v4);z9e=n(QDe,"STRONG",{});var UBt=s(z9e);axr=r(UBt,"roformer"),UBt.forEach(t),nxr=r(QDe," \u2014 "),uK=n(QDe,"A",{href:!0});var JBt=s(uK);sxr=r(JBt,"TFRoFormerForSequenceClassification"),JBt.forEach(t),lxr=r(QDe," (RoFormer model)"),QDe.forEach(t),ixr=i(ne),F4=n(ne,"LI",{});var HDe=s(F4);W9e=n(HDe,"STRONG",{});var YBt=s(W9e);dxr=r(YBt,"tapas"),YBt.forEach(t),cxr=r(HDe," \u2014 "),bK=n(HDe,"A",{href:!0});var KBt=s(bK);fxr=r(KBt,"TFTapasForSequenceClassification"),KBt.forEach(t),mxr=r(HDe," (TAPAS model)"),HDe.forEach(t),gxr=i(ne),T4=n(ne,"LI",{});var UDe=s(T4);Q9e=n(UDe,"STRONG",{});var ZBt=s(Q9e);hxr=r(ZBt,"transfo-xl"),ZBt.forEach(t),pxr=r(UDe," \u2014 "),vK=n(UDe,"A",{href:!0});var eIt=s(vK);_xr=r(eIt,"TFTransfoXLForSequenceClassification"),eIt.forEach(t),uxr=r(UDe," (Transformer-XL model)"),UDe.forEach(t),bxr=i(ne),M4=n(ne,"LI",{});var JDe=s(M4);H9e=n(JDe,"STRONG",{});var oIt=s(H9e);vxr=r(oIt,"xlm"),oIt.forEach(t),Fxr=r(JDe," \u2014 "),FK=n(JDe,"A",{href:!0});var rIt=s(FK);Txr=r(rIt,"TFXLMForSequenceClassification"),rIt.forEach(t),Mxr=r(JDe," (XLM model)"),JDe.forEach(t),Exr=i(ne),E4=n(ne,"LI",{});var YDe=s(E4);U9e=n(YDe,"STRONG",{});var tIt=s(U9e);Cxr=r(tIt,"xlm-roberta"),tIt.forEach(t),wxr=r(YDe," \u2014 "),TK=n(YDe,"A",{href:!0});var aIt=s(TK);Axr=r(aIt,"TFXLMRobertaForSequenceClassification"),aIt.forEach(t),Lxr=r(YDe," (XLM-RoBERTa model)"),YDe.forEach(t),yxr=i(ne),C4=n(ne,"LI",{});var KDe=s(C4);J9e=n(KDe,"STRONG",{});var nIt=s(J9e);xxr=r(nIt,"xlnet"),nIt.forEach(t),$xr=r(KDe," \u2014 "),MK=n(KDe,"A",{href:!0});var sIt=s(MK);kxr=r(sIt,"TFXLNetForSequenceClassification"),sIt.forEach(t),Sxr=r(KDe," (XLNet model)"),KDe.forEach(t),ne.forEach(t),Rxr=i(Ol),T(w4.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),$ze=i(f),Lc=n(f,"H2",{class:!0});var qQe=s(Lc);A4=n(qQe,"A",{id:!0,class:!0,href:!0});var lIt=s(A4);Y9e=n(lIt,"SPAN",{});var iIt=s(Y9e);T(yx.$$.fragment,iIt),iIt.forEach(t),lIt.forEach(t),Pxr=i(qQe),K9e=n(qQe,"SPAN",{});var dIt=s(K9e);Bxr=r(dIt,"TFAutoModelForMultipleChoice"),dIt.forEach(t),qQe.forEach(t),kze=i(f),ir=n(f,"DIV",{class:!0});var Vl=s(ir);T(xx.$$.fragment,Vl),Ixr=i(Vl),yc=n(Vl,"P",{});var Wte=s(yc);Nxr=r(Wte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),EK=n(Wte,"A",{href:!0});var cIt=s(EK);qxr=r(cIt,"from_pretrained()"),cIt.forEach(t),jxr=r(Wte," class method or the "),CK=n(Wte,"A",{href:!0});var fIt=s(CK);Dxr=r(fIt,"from_config()"),fIt.forEach(t),Gxr=r(Wte,` class
method.`),Wte.forEach(t),Oxr=i(Vl),$x=n(Vl,"P",{});var jQe=s($x);Vxr=r(jQe,"This class cannot be instantiated directly using "),Z9e=n(jQe,"CODE",{});var mIt=s(Z9e);Xxr=r(mIt,"__init__()"),mIt.forEach(t),zxr=r(jQe," (throws an error)."),jQe.forEach(t),Wxr=i(Vl),jt=n(Vl,"DIV",{class:!0});var vA=s(jt);T(kx.$$.fragment,vA),Qxr=i(vA),eMe=n(vA,"P",{});var gIt=s(eMe);Hxr=r(gIt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),gIt.forEach(t),Uxr=i(vA),xc=n(vA,"P",{});var Qte=s(xc);Jxr=r(Qte,`Note:
Loading a model from its configuration file does `),oMe=n(Qte,"STRONG",{});var hIt=s(oMe);Yxr=r(hIt,"not"),hIt.forEach(t),Kxr=r(Qte,` load the model weights. It only affects the
model\u2019s configuration. Use `),wK=n(Qte,"A",{href:!0});var pIt=s(wK);Zxr=r(pIt,"from_pretrained()"),pIt.forEach(t),e$r=r(Qte," to load the model weights."),Qte.forEach(t),o$r=i(vA),T(L4.$$.fragment,vA),vA.forEach(t),r$r=i(Vl),Ir=n(Vl,"DIV",{class:!0});var Xl=s(Ir);T(Sx.$$.fragment,Xl),t$r=i(Xl),rMe=n(Xl,"P",{});var _It=s(rMe);a$r=r(_It,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),_It.forEach(t),n$r=i(Xl),hn=n(Xl,"P",{});var FA=s(hn);s$r=r(FA,"The model class to instantiate is selected based on the "),tMe=n(FA,"CODE",{});var uIt=s(tMe);l$r=r(uIt,"model_type"),uIt.forEach(t),i$r=r(FA,` property of the config object (either
passed as an argument or loaded from `),aMe=n(FA,"CODE",{});var bIt=s(aMe);d$r=r(bIt,"pretrained_model_name_or_path"),bIt.forEach(t),c$r=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nMe=n(FA,"CODE",{});var vIt=s(nMe);f$r=r(vIt,"pretrained_model_name_or_path"),vIt.forEach(t),m$r=r(FA,":"),FA.forEach(t),g$r=i(Xl),ue=n(Xl,"UL",{});var Fe=s(ue);y4=n(Fe,"LI",{});var ZDe=s(y4);sMe=n(ZDe,"STRONG",{});var FIt=s(sMe);h$r=r(FIt,"albert"),FIt.forEach(t),p$r=r(ZDe," \u2014 "),AK=n(ZDe,"A",{href:!0});var TIt=s(AK);_$r=r(TIt,"TFAlbertForMultipleChoice"),TIt.forEach(t),u$r=r(ZDe," (ALBERT model)"),ZDe.forEach(t),b$r=i(Fe),x4=n(Fe,"LI",{});var eGe=s(x4);lMe=n(eGe,"STRONG",{});var MIt=s(lMe);v$r=r(MIt,"bert"),MIt.forEach(t),F$r=r(eGe," \u2014 "),LK=n(eGe,"A",{href:!0});var EIt=s(LK);T$r=r(EIt,"TFBertForMultipleChoice"),EIt.forEach(t),M$r=r(eGe," (BERT model)"),eGe.forEach(t),E$r=i(Fe),$4=n(Fe,"LI",{});var oGe=s($4);iMe=n(oGe,"STRONG",{});var CIt=s(iMe);C$r=r(CIt,"camembert"),CIt.forEach(t),w$r=r(oGe," \u2014 "),yK=n(oGe,"A",{href:!0});var wIt=s(yK);A$r=r(wIt,"TFCamembertForMultipleChoice"),wIt.forEach(t),L$r=r(oGe," (CamemBERT model)"),oGe.forEach(t),y$r=i(Fe),k4=n(Fe,"LI",{});var rGe=s(k4);dMe=n(rGe,"STRONG",{});var AIt=s(dMe);x$r=r(AIt,"convbert"),AIt.forEach(t),$$r=r(rGe," \u2014 "),xK=n(rGe,"A",{href:!0});var LIt=s(xK);k$r=r(LIt,"TFConvBertForMultipleChoice"),LIt.forEach(t),S$r=r(rGe," (ConvBERT model)"),rGe.forEach(t),R$r=i(Fe),S4=n(Fe,"LI",{});var tGe=s(S4);cMe=n(tGe,"STRONG",{});var yIt=s(cMe);P$r=r(yIt,"distilbert"),yIt.forEach(t),B$r=r(tGe," \u2014 "),$K=n(tGe,"A",{href:!0});var xIt=s($K);I$r=r(xIt,"TFDistilBertForMultipleChoice"),xIt.forEach(t),N$r=r(tGe," (DistilBERT model)"),tGe.forEach(t),q$r=i(Fe),R4=n(Fe,"LI",{});var aGe=s(R4);fMe=n(aGe,"STRONG",{});var $It=s(fMe);j$r=r($It,"electra"),$It.forEach(t),D$r=r(aGe," \u2014 "),kK=n(aGe,"A",{href:!0});var kIt=s(kK);G$r=r(kIt,"TFElectraForMultipleChoice"),kIt.forEach(t),O$r=r(aGe," (ELECTRA model)"),aGe.forEach(t),V$r=i(Fe),P4=n(Fe,"LI",{});var nGe=s(P4);mMe=n(nGe,"STRONG",{});var SIt=s(mMe);X$r=r(SIt,"flaubert"),SIt.forEach(t),z$r=r(nGe," \u2014 "),SK=n(nGe,"A",{href:!0});var RIt=s(SK);W$r=r(RIt,"TFFlaubertForMultipleChoice"),RIt.forEach(t),Q$r=r(nGe," (FlauBERT model)"),nGe.forEach(t),H$r=i(Fe),B4=n(Fe,"LI",{});var sGe=s(B4);gMe=n(sGe,"STRONG",{});var PIt=s(gMe);U$r=r(PIt,"funnel"),PIt.forEach(t),J$r=r(sGe," \u2014 "),RK=n(sGe,"A",{href:!0});var BIt=s(RK);Y$r=r(BIt,"TFFunnelForMultipleChoice"),BIt.forEach(t),K$r=r(sGe," (Funnel Transformer model)"),sGe.forEach(t),Z$r=i(Fe),I4=n(Fe,"LI",{});var lGe=s(I4);hMe=n(lGe,"STRONG",{});var IIt=s(hMe);ekr=r(IIt,"longformer"),IIt.forEach(t),okr=r(lGe," \u2014 "),PK=n(lGe,"A",{href:!0});var NIt=s(PK);rkr=r(NIt,"TFLongformerForMultipleChoice"),NIt.forEach(t),tkr=r(lGe," (Longformer model)"),lGe.forEach(t),akr=i(Fe),N4=n(Fe,"LI",{});var iGe=s(N4);pMe=n(iGe,"STRONG",{});var qIt=s(pMe);nkr=r(qIt,"mobilebert"),qIt.forEach(t),skr=r(iGe," \u2014 "),BK=n(iGe,"A",{href:!0});var jIt=s(BK);lkr=r(jIt,"TFMobileBertForMultipleChoice"),jIt.forEach(t),ikr=r(iGe," (MobileBERT model)"),iGe.forEach(t),dkr=i(Fe),q4=n(Fe,"LI",{});var dGe=s(q4);_Me=n(dGe,"STRONG",{});var DIt=s(_Me);ckr=r(DIt,"mpnet"),DIt.forEach(t),fkr=r(dGe," \u2014 "),IK=n(dGe,"A",{href:!0});var GIt=s(IK);mkr=r(GIt,"TFMPNetForMultipleChoice"),GIt.forEach(t),gkr=r(dGe," (MPNet model)"),dGe.forEach(t),hkr=i(Fe),j4=n(Fe,"LI",{});var cGe=s(j4);uMe=n(cGe,"STRONG",{});var OIt=s(uMe);pkr=r(OIt,"rembert"),OIt.forEach(t),_kr=r(cGe," \u2014 "),NK=n(cGe,"A",{href:!0});var VIt=s(NK);ukr=r(VIt,"TFRemBertForMultipleChoice"),VIt.forEach(t),bkr=r(cGe," (RemBERT model)"),cGe.forEach(t),vkr=i(Fe),D4=n(Fe,"LI",{});var fGe=s(D4);bMe=n(fGe,"STRONG",{});var XIt=s(bMe);Fkr=r(XIt,"roberta"),XIt.forEach(t),Tkr=r(fGe," \u2014 "),qK=n(fGe,"A",{href:!0});var zIt=s(qK);Mkr=r(zIt,"TFRobertaForMultipleChoice"),zIt.forEach(t),Ekr=r(fGe," (RoBERTa model)"),fGe.forEach(t),Ckr=i(Fe),G4=n(Fe,"LI",{});var mGe=s(G4);vMe=n(mGe,"STRONG",{});var WIt=s(vMe);wkr=r(WIt,"roformer"),WIt.forEach(t),Akr=r(mGe," \u2014 "),jK=n(mGe,"A",{href:!0});var QIt=s(jK);Lkr=r(QIt,"TFRoFormerForMultipleChoice"),QIt.forEach(t),ykr=r(mGe," (RoFormer model)"),mGe.forEach(t),xkr=i(Fe),O4=n(Fe,"LI",{});var gGe=s(O4);FMe=n(gGe,"STRONG",{});var HIt=s(FMe);$kr=r(HIt,"xlm"),HIt.forEach(t),kkr=r(gGe," \u2014 "),DK=n(gGe,"A",{href:!0});var UIt=s(DK);Skr=r(UIt,"TFXLMForMultipleChoice"),UIt.forEach(t),Rkr=r(gGe," (XLM model)"),gGe.forEach(t),Pkr=i(Fe),V4=n(Fe,"LI",{});var hGe=s(V4);TMe=n(hGe,"STRONG",{});var JIt=s(TMe);Bkr=r(JIt,"xlm-roberta"),JIt.forEach(t),Ikr=r(hGe," \u2014 "),GK=n(hGe,"A",{href:!0});var YIt=s(GK);Nkr=r(YIt,"TFXLMRobertaForMultipleChoice"),YIt.forEach(t),qkr=r(hGe," (XLM-RoBERTa model)"),hGe.forEach(t),jkr=i(Fe),X4=n(Fe,"LI",{});var pGe=s(X4);MMe=n(pGe,"STRONG",{});var KIt=s(MMe);Dkr=r(KIt,"xlnet"),KIt.forEach(t),Gkr=r(pGe," \u2014 "),OK=n(pGe,"A",{href:!0});var ZIt=s(OK);Okr=r(ZIt,"TFXLNetForMultipleChoice"),ZIt.forEach(t),Vkr=r(pGe," (XLNet model)"),pGe.forEach(t),Fe.forEach(t),Xkr=i(Xl),T(z4.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),Sze=i(f),$c=n(f,"H2",{class:!0});var DQe=s($c);W4=n(DQe,"A",{id:!0,class:!0,href:!0});var eNt=s(W4);EMe=n(eNt,"SPAN",{});var oNt=s(EMe);T(Rx.$$.fragment,oNt),oNt.forEach(t),eNt.forEach(t),zkr=i(DQe),CMe=n(DQe,"SPAN",{});var rNt=s(CMe);Wkr=r(rNt,"TFAutoModelForNextSentencePrediction"),rNt.forEach(t),DQe.forEach(t),Rze=i(f),dr=n(f,"DIV",{class:!0});var zl=s(dr);T(Px.$$.fragment,zl),Qkr=i(zl),kc=n(zl,"P",{});var Hte=s(kc);Hkr=r(Hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),VK=n(Hte,"A",{href:!0});var tNt=s(VK);Ukr=r(tNt,"from_pretrained()"),tNt.forEach(t),Jkr=r(Hte," class method or the "),XK=n(Hte,"A",{href:!0});var aNt=s(XK);Ykr=r(aNt,"from_config()"),aNt.forEach(t),Kkr=r(Hte,` class
method.`),Hte.forEach(t),Zkr=i(zl),Bx=n(zl,"P",{});var GQe=s(Bx);eSr=r(GQe,"This class cannot be instantiated directly using "),wMe=n(GQe,"CODE",{});var nNt=s(wMe);oSr=r(nNt,"__init__()"),nNt.forEach(t),rSr=r(GQe," (throws an error)."),GQe.forEach(t),tSr=i(zl),Dt=n(zl,"DIV",{class:!0});var TA=s(Dt);T(Ix.$$.fragment,TA),aSr=i(TA),AMe=n(TA,"P",{});var sNt=s(AMe);nSr=r(sNt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),sNt.forEach(t),sSr=i(TA),Sc=n(TA,"P",{});var Ute=s(Sc);lSr=r(Ute,`Note:
Loading a model from its configuration file does `),LMe=n(Ute,"STRONG",{});var lNt=s(LMe);iSr=r(lNt,"not"),lNt.forEach(t),dSr=r(Ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),zK=n(Ute,"A",{href:!0});var iNt=s(zK);cSr=r(iNt,"from_pretrained()"),iNt.forEach(t),fSr=r(Ute," to load the model weights."),Ute.forEach(t),mSr=i(TA),T(Q4.$$.fragment,TA),TA.forEach(t),gSr=i(zl),Nr=n(zl,"DIV",{class:!0});var Wl=s(Nr);T(Nx.$$.fragment,Wl),hSr=i(Wl),yMe=n(Wl,"P",{});var dNt=s(yMe);pSr=r(dNt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),dNt.forEach(t),_Sr=i(Wl),pn=n(Wl,"P",{});var MA=s(pn);uSr=r(MA,"The model class to instantiate is selected based on the "),xMe=n(MA,"CODE",{});var cNt=s(xMe);bSr=r(cNt,"model_type"),cNt.forEach(t),vSr=r(MA,` property of the config object (either
passed as an argument or loaded from `),$Me=n(MA,"CODE",{});var fNt=s($Me);FSr=r(fNt,"pretrained_model_name_or_path"),fNt.forEach(t),TSr=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kMe=n(MA,"CODE",{});var mNt=s(kMe);MSr=r(mNt,"pretrained_model_name_or_path"),mNt.forEach(t),ESr=r(MA,":"),MA.forEach(t),CSr=i(Wl),qx=n(Wl,"UL",{});var OQe=s(qx);H4=n(OQe,"LI",{});var _Ge=s(H4);SMe=n(_Ge,"STRONG",{});var gNt=s(SMe);wSr=r(gNt,"bert"),gNt.forEach(t),ASr=r(_Ge," \u2014 "),WK=n(_Ge,"A",{href:!0});var hNt=s(WK);LSr=r(hNt,"TFBertForNextSentencePrediction"),hNt.forEach(t),ySr=r(_Ge," (BERT model)"),_Ge.forEach(t),xSr=i(OQe),U4=n(OQe,"LI",{});var uGe=s(U4);RMe=n(uGe,"STRONG",{});var pNt=s(RMe);$Sr=r(pNt,"mobilebert"),pNt.forEach(t),kSr=r(uGe," \u2014 "),QK=n(uGe,"A",{href:!0});var _Nt=s(QK);SSr=r(_Nt,"TFMobileBertForNextSentencePrediction"),_Nt.forEach(t),RSr=r(uGe," (MobileBERT model)"),uGe.forEach(t),OQe.forEach(t),PSr=i(Wl),T(J4.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),Pze=i(f),Rc=n(f,"H2",{class:!0});var VQe=s(Rc);Y4=n(VQe,"A",{id:!0,class:!0,href:!0});var uNt=s(Y4);PMe=n(uNt,"SPAN",{});var bNt=s(PMe);T(jx.$$.fragment,bNt),bNt.forEach(t),uNt.forEach(t),BSr=i(VQe),BMe=n(VQe,"SPAN",{});var vNt=s(BMe);ISr=r(vNt,"TFAutoModelForTableQuestionAnswering"),vNt.forEach(t),VQe.forEach(t),Bze=i(f),cr=n(f,"DIV",{class:!0});var Ql=s(cr);T(Dx.$$.fragment,Ql),NSr=i(Ql),Pc=n(Ql,"P",{});var Jte=s(Pc);qSr=r(Jte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),HK=n(Jte,"A",{href:!0});var FNt=s(HK);jSr=r(FNt,"from_pretrained()"),FNt.forEach(t),DSr=r(Jte," class method or the "),UK=n(Jte,"A",{href:!0});var TNt=s(UK);GSr=r(TNt,"from_config()"),TNt.forEach(t),OSr=r(Jte,` class
method.`),Jte.forEach(t),VSr=i(Ql),Gx=n(Ql,"P",{});var XQe=s(Gx);XSr=r(XQe,"This class cannot be instantiated directly using "),IMe=n(XQe,"CODE",{});var MNt=s(IMe);zSr=r(MNt,"__init__()"),MNt.forEach(t),WSr=r(XQe," (throws an error)."),XQe.forEach(t),QSr=i(Ql),Gt=n(Ql,"DIV",{class:!0});var EA=s(Gt);T(Ox.$$.fragment,EA),HSr=i(EA),NMe=n(EA,"P",{});var ENt=s(NMe);USr=r(ENt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ENt.forEach(t),JSr=i(EA),Bc=n(EA,"P",{});var Yte=s(Bc);YSr=r(Yte,`Note:
Loading a model from its configuration file does `),qMe=n(Yte,"STRONG",{});var CNt=s(qMe);KSr=r(CNt,"not"),CNt.forEach(t),ZSr=r(Yte,` load the model weights. It only affects the
model\u2019s configuration. Use `),JK=n(Yte,"A",{href:!0});var wNt=s(JK);eRr=r(wNt,"from_pretrained()"),wNt.forEach(t),oRr=r(Yte," to load the model weights."),Yte.forEach(t),rRr=i(EA),T(K4.$$.fragment,EA),EA.forEach(t),tRr=i(Ql),qr=n(Ql,"DIV",{class:!0});var Hl=s(qr);T(Vx.$$.fragment,Hl),aRr=i(Hl),jMe=n(Hl,"P",{});var ANt=s(jMe);nRr=r(ANt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ANt.forEach(t),sRr=i(Hl),_n=n(Hl,"P",{});var CA=s(_n);lRr=r(CA,"The model class to instantiate is selected based on the "),DMe=n(CA,"CODE",{});var LNt=s(DMe);iRr=r(LNt,"model_type"),LNt.forEach(t),dRr=r(CA,` property of the config object (either
passed as an argument or loaded from `),GMe=n(CA,"CODE",{});var yNt=s(GMe);cRr=r(yNt,"pretrained_model_name_or_path"),yNt.forEach(t),fRr=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OMe=n(CA,"CODE",{});var xNt=s(OMe);mRr=r(xNt,"pretrained_model_name_or_path"),xNt.forEach(t),gRr=r(CA,":"),CA.forEach(t),hRr=i(Hl),VMe=n(Hl,"UL",{});var $Nt=s(VMe);Z4=n($Nt,"LI",{});var bGe=s(Z4);XMe=n(bGe,"STRONG",{});var kNt=s(XMe);pRr=r(kNt,"tapas"),kNt.forEach(t),_Rr=r(bGe," \u2014 "),YK=n(bGe,"A",{href:!0});var SNt=s(YK);uRr=r(SNt,"TFTapasForQuestionAnswering"),SNt.forEach(t),bRr=r(bGe," (TAPAS model)"),bGe.forEach(t),$Nt.forEach(t),vRr=i(Hl),T(eE.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),Ize=i(f),Ic=n(f,"H2",{class:!0});var zQe=s(Ic);oE=n(zQe,"A",{id:!0,class:!0,href:!0});var RNt=s(oE);zMe=n(RNt,"SPAN",{});var PNt=s(zMe);T(Xx.$$.fragment,PNt),PNt.forEach(t),RNt.forEach(t),FRr=i(zQe),WMe=n(zQe,"SPAN",{});var BNt=s(WMe);TRr=r(BNt,"TFAutoModelForTokenClassification"),BNt.forEach(t),zQe.forEach(t),Nze=i(f),fr=n(f,"DIV",{class:!0});var Ul=s(fr);T(zx.$$.fragment,Ul),MRr=i(Ul),Nc=n(Ul,"P",{});var Kte=s(Nc);ERr=r(Kte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),KK=n(Kte,"A",{href:!0});var INt=s(KK);CRr=r(INt,"from_pretrained()"),INt.forEach(t),wRr=r(Kte," class method or the "),ZK=n(Kte,"A",{href:!0});var NNt=s(ZK);ARr=r(NNt,"from_config()"),NNt.forEach(t),LRr=r(Kte,` class
method.`),Kte.forEach(t),yRr=i(Ul),Wx=n(Ul,"P",{});var WQe=s(Wx);xRr=r(WQe,"This class cannot be instantiated directly using "),QMe=n(WQe,"CODE",{});var qNt=s(QMe);$Rr=r(qNt,"__init__()"),qNt.forEach(t),kRr=r(WQe," (throws an error)."),WQe.forEach(t),SRr=i(Ul),Ot=n(Ul,"DIV",{class:!0});var wA=s(Ot);T(Qx.$$.fragment,wA),RRr=i(wA),HMe=n(wA,"P",{});var jNt=s(HMe);PRr=r(jNt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),jNt.forEach(t),BRr=i(wA),qc=n(wA,"P",{});var Zte=s(qc);IRr=r(Zte,`Note:
Loading a model from its configuration file does `),UMe=n(Zte,"STRONG",{});var DNt=s(UMe);NRr=r(DNt,"not"),DNt.forEach(t),qRr=r(Zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=n(Zte,"A",{href:!0});var GNt=s(eZ);jRr=r(GNt,"from_pretrained()"),GNt.forEach(t),DRr=r(Zte," to load the model weights."),Zte.forEach(t),GRr=i(wA),T(rE.$$.fragment,wA),wA.forEach(t),ORr=i(Ul),jr=n(Ul,"DIV",{class:!0});var Jl=s(jr);T(Hx.$$.fragment,Jl),VRr=i(Jl),JMe=n(Jl,"P",{});var ONt=s(JMe);XRr=r(ONt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ONt.forEach(t),zRr=i(Jl),un=n(Jl,"P",{});var AA=s(un);WRr=r(AA,"The model class to instantiate is selected based on the "),YMe=n(AA,"CODE",{});var VNt=s(YMe);QRr=r(VNt,"model_type"),VNt.forEach(t),HRr=r(AA,` property of the config object (either
passed as an argument or loaded from `),KMe=n(AA,"CODE",{});var XNt=s(KMe);URr=r(XNt,"pretrained_model_name_or_path"),XNt.forEach(t),JRr=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZMe=n(AA,"CODE",{});var zNt=s(ZMe);YRr=r(zNt,"pretrained_model_name_or_path"),zNt.forEach(t),KRr=r(AA,":"),AA.forEach(t),ZRr=i(Jl),de=n(Jl,"UL",{});var ge=s(de);tE=n(ge,"LI",{});var vGe=s(tE);e4e=n(vGe,"STRONG",{});var WNt=s(e4e);ePr=r(WNt,"albert"),WNt.forEach(t),oPr=r(vGe," \u2014 "),oZ=n(vGe,"A",{href:!0});var QNt=s(oZ);rPr=r(QNt,"TFAlbertForTokenClassification"),QNt.forEach(t),tPr=r(vGe," (ALBERT model)"),vGe.forEach(t),aPr=i(ge),aE=n(ge,"LI",{});var FGe=s(aE);o4e=n(FGe,"STRONG",{});var HNt=s(o4e);nPr=r(HNt,"bert"),HNt.forEach(t),sPr=r(FGe," \u2014 "),rZ=n(FGe,"A",{href:!0});var UNt=s(rZ);lPr=r(UNt,"TFBertForTokenClassification"),UNt.forEach(t),iPr=r(FGe," (BERT model)"),FGe.forEach(t),dPr=i(ge),nE=n(ge,"LI",{});var TGe=s(nE);r4e=n(TGe,"STRONG",{});var JNt=s(r4e);cPr=r(JNt,"camembert"),JNt.forEach(t),fPr=r(TGe," \u2014 "),tZ=n(TGe,"A",{href:!0});var YNt=s(tZ);mPr=r(YNt,"TFCamembertForTokenClassification"),YNt.forEach(t),gPr=r(TGe," (CamemBERT model)"),TGe.forEach(t),hPr=i(ge),sE=n(ge,"LI",{});var MGe=s(sE);t4e=n(MGe,"STRONG",{});var KNt=s(t4e);pPr=r(KNt,"convbert"),KNt.forEach(t),_Pr=r(MGe," \u2014 "),aZ=n(MGe,"A",{href:!0});var ZNt=s(aZ);uPr=r(ZNt,"TFConvBertForTokenClassification"),ZNt.forEach(t),bPr=r(MGe," (ConvBERT model)"),MGe.forEach(t),vPr=i(ge),lE=n(ge,"LI",{});var EGe=s(lE);a4e=n(EGe,"STRONG",{});var eqt=s(a4e);FPr=r(eqt,"deberta"),eqt.forEach(t),TPr=r(EGe," \u2014 "),nZ=n(EGe,"A",{href:!0});var oqt=s(nZ);MPr=r(oqt,"TFDebertaForTokenClassification"),oqt.forEach(t),EPr=r(EGe," (DeBERTa model)"),EGe.forEach(t),CPr=i(ge),iE=n(ge,"LI",{});var CGe=s(iE);n4e=n(CGe,"STRONG",{});var rqt=s(n4e);wPr=r(rqt,"deberta-v2"),rqt.forEach(t),APr=r(CGe," \u2014 "),sZ=n(CGe,"A",{href:!0});var tqt=s(sZ);LPr=r(tqt,"TFDebertaV2ForTokenClassification"),tqt.forEach(t),yPr=r(CGe," (DeBERTa-v2 model)"),CGe.forEach(t),xPr=i(ge),dE=n(ge,"LI",{});var wGe=s(dE);s4e=n(wGe,"STRONG",{});var aqt=s(s4e);$Pr=r(aqt,"distilbert"),aqt.forEach(t),kPr=r(wGe," \u2014 "),lZ=n(wGe,"A",{href:!0});var nqt=s(lZ);SPr=r(nqt,"TFDistilBertForTokenClassification"),nqt.forEach(t),RPr=r(wGe," (DistilBERT model)"),wGe.forEach(t),PPr=i(ge),cE=n(ge,"LI",{});var AGe=s(cE);l4e=n(AGe,"STRONG",{});var sqt=s(l4e);BPr=r(sqt,"electra"),sqt.forEach(t),IPr=r(AGe," \u2014 "),iZ=n(AGe,"A",{href:!0});var lqt=s(iZ);NPr=r(lqt,"TFElectraForTokenClassification"),lqt.forEach(t),qPr=r(AGe," (ELECTRA model)"),AGe.forEach(t),jPr=i(ge),fE=n(ge,"LI",{});var LGe=s(fE);i4e=n(LGe,"STRONG",{});var iqt=s(i4e);DPr=r(iqt,"flaubert"),iqt.forEach(t),GPr=r(LGe," \u2014 "),dZ=n(LGe,"A",{href:!0});var dqt=s(dZ);OPr=r(dqt,"TFFlaubertForTokenClassification"),dqt.forEach(t),VPr=r(LGe," (FlauBERT model)"),LGe.forEach(t),XPr=i(ge),mE=n(ge,"LI",{});var yGe=s(mE);d4e=n(yGe,"STRONG",{});var cqt=s(d4e);zPr=r(cqt,"funnel"),cqt.forEach(t),WPr=r(yGe," \u2014 "),cZ=n(yGe,"A",{href:!0});var fqt=s(cZ);QPr=r(fqt,"TFFunnelForTokenClassification"),fqt.forEach(t),HPr=r(yGe," (Funnel Transformer model)"),yGe.forEach(t),UPr=i(ge),gE=n(ge,"LI",{});var xGe=s(gE);c4e=n(xGe,"STRONG",{});var mqt=s(c4e);JPr=r(mqt,"layoutlm"),mqt.forEach(t),YPr=r(xGe," \u2014 "),fZ=n(xGe,"A",{href:!0});var gqt=s(fZ);KPr=r(gqt,"TFLayoutLMForTokenClassification"),gqt.forEach(t),ZPr=r(xGe," (LayoutLM model)"),xGe.forEach(t),eBr=i(ge),hE=n(ge,"LI",{});var $Ge=s(hE);f4e=n($Ge,"STRONG",{});var hqt=s(f4e);oBr=r(hqt,"longformer"),hqt.forEach(t),rBr=r($Ge," \u2014 "),mZ=n($Ge,"A",{href:!0});var pqt=s(mZ);tBr=r(pqt,"TFLongformerForTokenClassification"),pqt.forEach(t),aBr=r($Ge," (Longformer model)"),$Ge.forEach(t),nBr=i(ge),pE=n(ge,"LI",{});var kGe=s(pE);m4e=n(kGe,"STRONG",{});var _qt=s(m4e);sBr=r(_qt,"mobilebert"),_qt.forEach(t),lBr=r(kGe," \u2014 "),gZ=n(kGe,"A",{href:!0});var uqt=s(gZ);iBr=r(uqt,"TFMobileBertForTokenClassification"),uqt.forEach(t),dBr=r(kGe," (MobileBERT model)"),kGe.forEach(t),cBr=i(ge),_E=n(ge,"LI",{});var SGe=s(_E);g4e=n(SGe,"STRONG",{});var bqt=s(g4e);fBr=r(bqt,"mpnet"),bqt.forEach(t),mBr=r(SGe," \u2014 "),hZ=n(SGe,"A",{href:!0});var vqt=s(hZ);gBr=r(vqt,"TFMPNetForTokenClassification"),vqt.forEach(t),hBr=r(SGe," (MPNet model)"),SGe.forEach(t),pBr=i(ge),uE=n(ge,"LI",{});var RGe=s(uE);h4e=n(RGe,"STRONG",{});var Fqt=s(h4e);_Br=r(Fqt,"rembert"),Fqt.forEach(t),uBr=r(RGe," \u2014 "),pZ=n(RGe,"A",{href:!0});var Tqt=s(pZ);bBr=r(Tqt,"TFRemBertForTokenClassification"),Tqt.forEach(t),vBr=r(RGe," (RemBERT model)"),RGe.forEach(t),FBr=i(ge),bE=n(ge,"LI",{});var PGe=s(bE);p4e=n(PGe,"STRONG",{});var Mqt=s(p4e);TBr=r(Mqt,"roberta"),Mqt.forEach(t),MBr=r(PGe," \u2014 "),_Z=n(PGe,"A",{href:!0});var Eqt=s(_Z);EBr=r(Eqt,"TFRobertaForTokenClassification"),Eqt.forEach(t),CBr=r(PGe," (RoBERTa model)"),PGe.forEach(t),wBr=i(ge),vE=n(ge,"LI",{});var BGe=s(vE);_4e=n(BGe,"STRONG",{});var Cqt=s(_4e);ABr=r(Cqt,"roformer"),Cqt.forEach(t),LBr=r(BGe," \u2014 "),uZ=n(BGe,"A",{href:!0});var wqt=s(uZ);yBr=r(wqt,"TFRoFormerForTokenClassification"),wqt.forEach(t),xBr=r(BGe," (RoFormer model)"),BGe.forEach(t),$Br=i(ge),FE=n(ge,"LI",{});var IGe=s(FE);u4e=n(IGe,"STRONG",{});var Aqt=s(u4e);kBr=r(Aqt,"xlm"),Aqt.forEach(t),SBr=r(IGe," \u2014 "),bZ=n(IGe,"A",{href:!0});var Lqt=s(bZ);RBr=r(Lqt,"TFXLMForTokenClassification"),Lqt.forEach(t),PBr=r(IGe," (XLM model)"),IGe.forEach(t),BBr=i(ge),TE=n(ge,"LI",{});var NGe=s(TE);b4e=n(NGe,"STRONG",{});var yqt=s(b4e);IBr=r(yqt,"xlm-roberta"),yqt.forEach(t),NBr=r(NGe," \u2014 "),vZ=n(NGe,"A",{href:!0});var xqt=s(vZ);qBr=r(xqt,"TFXLMRobertaForTokenClassification"),xqt.forEach(t),jBr=r(NGe," (XLM-RoBERTa model)"),NGe.forEach(t),DBr=i(ge),ME=n(ge,"LI",{});var qGe=s(ME);v4e=n(qGe,"STRONG",{});var $qt=s(v4e);GBr=r($qt,"xlnet"),$qt.forEach(t),OBr=r(qGe," \u2014 "),FZ=n(qGe,"A",{href:!0});var kqt=s(FZ);VBr=r(kqt,"TFXLNetForTokenClassification"),kqt.forEach(t),XBr=r(qGe," (XLNet model)"),qGe.forEach(t),ge.forEach(t),zBr=i(Jl),T(EE.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),qze=i(f),jc=n(f,"H2",{class:!0});var QQe=s(jc);CE=n(QQe,"A",{id:!0,class:!0,href:!0});var Sqt=s(CE);F4e=n(Sqt,"SPAN",{});var Rqt=s(F4e);T(Ux.$$.fragment,Rqt),Rqt.forEach(t),Sqt.forEach(t),WBr=i(QQe),T4e=n(QQe,"SPAN",{});var Pqt=s(T4e);QBr=r(Pqt,"TFAutoModelForQuestionAnswering"),Pqt.forEach(t),QQe.forEach(t),jze=i(f),mr=n(f,"DIV",{class:!0});var Yl=s(mr);T(Jx.$$.fragment,Yl),HBr=i(Yl),Dc=n(Yl,"P",{});var eae=s(Dc);UBr=r(eae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),TZ=n(eae,"A",{href:!0});var Bqt=s(TZ);JBr=r(Bqt,"from_pretrained()"),Bqt.forEach(t),YBr=r(eae," class method or the "),MZ=n(eae,"A",{href:!0});var Iqt=s(MZ);KBr=r(Iqt,"from_config()"),Iqt.forEach(t),ZBr=r(eae,` class
method.`),eae.forEach(t),eIr=i(Yl),Yx=n(Yl,"P",{});var HQe=s(Yx);oIr=r(HQe,"This class cannot be instantiated directly using "),M4e=n(HQe,"CODE",{});var Nqt=s(M4e);rIr=r(Nqt,"__init__()"),Nqt.forEach(t),tIr=r(HQe," (throws an error)."),HQe.forEach(t),aIr=i(Yl),Vt=n(Yl,"DIV",{class:!0});var LA=s(Vt);T(Kx.$$.fragment,LA),nIr=i(LA),E4e=n(LA,"P",{});var qqt=s(E4e);sIr=r(qqt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),qqt.forEach(t),lIr=i(LA),Gc=n(LA,"P",{});var oae=s(Gc);iIr=r(oae,`Note:
Loading a model from its configuration file does `),C4e=n(oae,"STRONG",{});var jqt=s(C4e);dIr=r(jqt,"not"),jqt.forEach(t),cIr=r(oae,` load the model weights. It only affects the
model\u2019s configuration. Use `),EZ=n(oae,"A",{href:!0});var Dqt=s(EZ);fIr=r(Dqt,"from_pretrained()"),Dqt.forEach(t),mIr=r(oae," to load the model weights."),oae.forEach(t),gIr=i(LA),T(wE.$$.fragment,LA),LA.forEach(t),hIr=i(Yl),Dr=n(Yl,"DIV",{class:!0});var Kl=s(Dr);T(Zx.$$.fragment,Kl),pIr=i(Kl),w4e=n(Kl,"P",{});var Gqt=s(w4e);_Ir=r(Gqt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Gqt.forEach(t),uIr=i(Kl),bn=n(Kl,"P",{});var yA=s(bn);bIr=r(yA,"The model class to instantiate is selected based on the "),A4e=n(yA,"CODE",{});var Oqt=s(A4e);vIr=r(Oqt,"model_type"),Oqt.forEach(t),FIr=r(yA,` property of the config object (either
passed as an argument or loaded from `),L4e=n(yA,"CODE",{});var Vqt=s(L4e);TIr=r(Vqt,"pretrained_model_name_or_path"),Vqt.forEach(t),MIr=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y4e=n(yA,"CODE",{});var Xqt=s(y4e);EIr=r(Xqt,"pretrained_model_name_or_path"),Xqt.forEach(t),CIr=r(yA,":"),yA.forEach(t),wIr=i(Kl),ce=n(Kl,"UL",{});var he=s(ce);AE=n(he,"LI",{});var jGe=s(AE);x4e=n(jGe,"STRONG",{});var zqt=s(x4e);AIr=r(zqt,"albert"),zqt.forEach(t),LIr=r(jGe," \u2014 "),CZ=n(jGe,"A",{href:!0});var Wqt=s(CZ);yIr=r(Wqt,"TFAlbertForQuestionAnswering"),Wqt.forEach(t),xIr=r(jGe," (ALBERT model)"),jGe.forEach(t),$Ir=i(he),LE=n(he,"LI",{});var DGe=s(LE);$4e=n(DGe,"STRONG",{});var Qqt=s($4e);kIr=r(Qqt,"bert"),Qqt.forEach(t),SIr=r(DGe," \u2014 "),wZ=n(DGe,"A",{href:!0});var Hqt=s(wZ);RIr=r(Hqt,"TFBertForQuestionAnswering"),Hqt.forEach(t),PIr=r(DGe," (BERT model)"),DGe.forEach(t),BIr=i(he),yE=n(he,"LI",{});var GGe=s(yE);k4e=n(GGe,"STRONG",{});var Uqt=s(k4e);IIr=r(Uqt,"camembert"),Uqt.forEach(t),NIr=r(GGe," \u2014 "),AZ=n(GGe,"A",{href:!0});var Jqt=s(AZ);qIr=r(Jqt,"TFCamembertForQuestionAnswering"),Jqt.forEach(t),jIr=r(GGe," (CamemBERT model)"),GGe.forEach(t),DIr=i(he),xE=n(he,"LI",{});var OGe=s(xE);S4e=n(OGe,"STRONG",{});var Yqt=s(S4e);GIr=r(Yqt,"convbert"),Yqt.forEach(t),OIr=r(OGe," \u2014 "),LZ=n(OGe,"A",{href:!0});var Kqt=s(LZ);VIr=r(Kqt,"TFConvBertForQuestionAnswering"),Kqt.forEach(t),XIr=r(OGe," (ConvBERT model)"),OGe.forEach(t),zIr=i(he),$E=n(he,"LI",{});var VGe=s($E);R4e=n(VGe,"STRONG",{});var Zqt=s(R4e);WIr=r(Zqt,"deberta"),Zqt.forEach(t),QIr=r(VGe," \u2014 "),yZ=n(VGe,"A",{href:!0});var ejt=s(yZ);HIr=r(ejt,"TFDebertaForQuestionAnswering"),ejt.forEach(t),UIr=r(VGe," (DeBERTa model)"),VGe.forEach(t),JIr=i(he),kE=n(he,"LI",{});var XGe=s(kE);P4e=n(XGe,"STRONG",{});var ojt=s(P4e);YIr=r(ojt,"deberta-v2"),ojt.forEach(t),KIr=r(XGe," \u2014 "),xZ=n(XGe,"A",{href:!0});var rjt=s(xZ);ZIr=r(rjt,"TFDebertaV2ForQuestionAnswering"),rjt.forEach(t),eNr=r(XGe," (DeBERTa-v2 model)"),XGe.forEach(t),oNr=i(he),SE=n(he,"LI",{});var zGe=s(SE);B4e=n(zGe,"STRONG",{});var tjt=s(B4e);rNr=r(tjt,"distilbert"),tjt.forEach(t),tNr=r(zGe," \u2014 "),$Z=n(zGe,"A",{href:!0});var ajt=s($Z);aNr=r(ajt,"TFDistilBertForQuestionAnswering"),ajt.forEach(t),nNr=r(zGe," (DistilBERT model)"),zGe.forEach(t),sNr=i(he),RE=n(he,"LI",{});var WGe=s(RE);I4e=n(WGe,"STRONG",{});var njt=s(I4e);lNr=r(njt,"electra"),njt.forEach(t),iNr=r(WGe," \u2014 "),kZ=n(WGe,"A",{href:!0});var sjt=s(kZ);dNr=r(sjt,"TFElectraForQuestionAnswering"),sjt.forEach(t),cNr=r(WGe," (ELECTRA model)"),WGe.forEach(t),fNr=i(he),PE=n(he,"LI",{});var QGe=s(PE);N4e=n(QGe,"STRONG",{});var ljt=s(N4e);mNr=r(ljt,"flaubert"),ljt.forEach(t),gNr=r(QGe," \u2014 "),SZ=n(QGe,"A",{href:!0});var ijt=s(SZ);hNr=r(ijt,"TFFlaubertForQuestionAnsweringSimple"),ijt.forEach(t),pNr=r(QGe," (FlauBERT model)"),QGe.forEach(t),_Nr=i(he),BE=n(he,"LI",{});var HGe=s(BE);q4e=n(HGe,"STRONG",{});var djt=s(q4e);uNr=r(djt,"funnel"),djt.forEach(t),bNr=r(HGe," \u2014 "),RZ=n(HGe,"A",{href:!0});var cjt=s(RZ);vNr=r(cjt,"TFFunnelForQuestionAnswering"),cjt.forEach(t),FNr=r(HGe," (Funnel Transformer model)"),HGe.forEach(t),TNr=i(he),IE=n(he,"LI",{});var UGe=s(IE);j4e=n(UGe,"STRONG",{});var fjt=s(j4e);MNr=r(fjt,"gptj"),fjt.forEach(t),ENr=r(UGe," \u2014 "),PZ=n(UGe,"A",{href:!0});var mjt=s(PZ);CNr=r(mjt,"TFGPTJForQuestionAnswering"),mjt.forEach(t),wNr=r(UGe," (GPT-J model)"),UGe.forEach(t),ANr=i(he),NE=n(he,"LI",{});var JGe=s(NE);D4e=n(JGe,"STRONG",{});var gjt=s(D4e);LNr=r(gjt,"longformer"),gjt.forEach(t),yNr=r(JGe," \u2014 "),BZ=n(JGe,"A",{href:!0});var hjt=s(BZ);xNr=r(hjt,"TFLongformerForQuestionAnswering"),hjt.forEach(t),$Nr=r(JGe," (Longformer model)"),JGe.forEach(t),kNr=i(he),qE=n(he,"LI",{});var YGe=s(qE);G4e=n(YGe,"STRONG",{});var pjt=s(G4e);SNr=r(pjt,"mobilebert"),pjt.forEach(t),RNr=r(YGe," \u2014 "),IZ=n(YGe,"A",{href:!0});var _jt=s(IZ);PNr=r(_jt,"TFMobileBertForQuestionAnswering"),_jt.forEach(t),BNr=r(YGe," (MobileBERT model)"),YGe.forEach(t),INr=i(he),jE=n(he,"LI",{});var KGe=s(jE);O4e=n(KGe,"STRONG",{});var ujt=s(O4e);NNr=r(ujt,"mpnet"),ujt.forEach(t),qNr=r(KGe," \u2014 "),NZ=n(KGe,"A",{href:!0});var bjt=s(NZ);jNr=r(bjt,"TFMPNetForQuestionAnswering"),bjt.forEach(t),DNr=r(KGe," (MPNet model)"),KGe.forEach(t),GNr=i(he),DE=n(he,"LI",{});var ZGe=s(DE);V4e=n(ZGe,"STRONG",{});var vjt=s(V4e);ONr=r(vjt,"rembert"),vjt.forEach(t),VNr=r(ZGe," \u2014 "),qZ=n(ZGe,"A",{href:!0});var Fjt=s(qZ);XNr=r(Fjt,"TFRemBertForQuestionAnswering"),Fjt.forEach(t),zNr=r(ZGe," (RemBERT model)"),ZGe.forEach(t),WNr=i(he),GE=n(he,"LI",{});var eOe=s(GE);X4e=n(eOe,"STRONG",{});var Tjt=s(X4e);QNr=r(Tjt,"roberta"),Tjt.forEach(t),HNr=r(eOe," \u2014 "),jZ=n(eOe,"A",{href:!0});var Mjt=s(jZ);UNr=r(Mjt,"TFRobertaForQuestionAnswering"),Mjt.forEach(t),JNr=r(eOe," (RoBERTa model)"),eOe.forEach(t),YNr=i(he),OE=n(he,"LI",{});var oOe=s(OE);z4e=n(oOe,"STRONG",{});var Ejt=s(z4e);KNr=r(Ejt,"roformer"),Ejt.forEach(t),ZNr=r(oOe," \u2014 "),DZ=n(oOe,"A",{href:!0});var Cjt=s(DZ);eqr=r(Cjt,"TFRoFormerForQuestionAnswering"),Cjt.forEach(t),oqr=r(oOe," (RoFormer model)"),oOe.forEach(t),rqr=i(he),VE=n(he,"LI",{});var rOe=s(VE);W4e=n(rOe,"STRONG",{});var wjt=s(W4e);tqr=r(wjt,"xlm"),wjt.forEach(t),aqr=r(rOe," \u2014 "),GZ=n(rOe,"A",{href:!0});var Ajt=s(GZ);nqr=r(Ajt,"TFXLMForQuestionAnsweringSimple"),Ajt.forEach(t),sqr=r(rOe," (XLM model)"),rOe.forEach(t),lqr=i(he),XE=n(he,"LI",{});var tOe=s(XE);Q4e=n(tOe,"STRONG",{});var Ljt=s(Q4e);iqr=r(Ljt,"xlm-roberta"),Ljt.forEach(t),dqr=r(tOe," \u2014 "),OZ=n(tOe,"A",{href:!0});var yjt=s(OZ);cqr=r(yjt,"TFXLMRobertaForQuestionAnswering"),yjt.forEach(t),fqr=r(tOe," (XLM-RoBERTa model)"),tOe.forEach(t),mqr=i(he),zE=n(he,"LI",{});var aOe=s(zE);H4e=n(aOe,"STRONG",{});var xjt=s(H4e);gqr=r(xjt,"xlnet"),xjt.forEach(t),hqr=r(aOe," \u2014 "),VZ=n(aOe,"A",{href:!0});var $jt=s(VZ);pqr=r($jt,"TFXLNetForQuestionAnsweringSimple"),$jt.forEach(t),_qr=r(aOe," (XLNet model)"),aOe.forEach(t),he.forEach(t),uqr=i(Kl),T(WE.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),Dze=i(f),Oc=n(f,"H2",{class:!0});var UQe=s(Oc);QE=n(UQe,"A",{id:!0,class:!0,href:!0});var kjt=s(QE);U4e=n(kjt,"SPAN",{});var Sjt=s(U4e);T(e$.$$.fragment,Sjt),Sjt.forEach(t),kjt.forEach(t),bqr=i(UQe),J4e=n(UQe,"SPAN",{});var Rjt=s(J4e);vqr=r(Rjt,"TFAutoModelForVision2Seq"),Rjt.forEach(t),UQe.forEach(t),Gze=i(f),gr=n(f,"DIV",{class:!0});var Zl=s(gr);T(o$.$$.fragment,Zl),Fqr=i(Zl),Vc=n(Zl,"P",{});var rae=s(Vc);Tqr=r(rae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),XZ=n(rae,"A",{href:!0});var Pjt=s(XZ);Mqr=r(Pjt,"from_pretrained()"),Pjt.forEach(t),Eqr=r(rae," class method or the "),zZ=n(rae,"A",{href:!0});var Bjt=s(zZ);Cqr=r(Bjt,"from_config()"),Bjt.forEach(t),wqr=r(rae,` class
method.`),rae.forEach(t),Aqr=i(Zl),r$=n(Zl,"P",{});var JQe=s(r$);Lqr=r(JQe,"This class cannot be instantiated directly using "),Y4e=n(JQe,"CODE",{});var Ijt=s(Y4e);yqr=r(Ijt,"__init__()"),Ijt.forEach(t),xqr=r(JQe," (throws an error)."),JQe.forEach(t),$qr=i(Zl),Xt=n(Zl,"DIV",{class:!0});var xA=s(Xt);T(t$.$$.fragment,xA),kqr=i(xA),K4e=n(xA,"P",{});var Njt=s(K4e);Sqr=r(Njt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Njt.forEach(t),Rqr=i(xA),Xc=n(xA,"P",{});var tae=s(Xc);Pqr=r(tae,`Note:
Loading a model from its configuration file does `),Z4e=n(tae,"STRONG",{});var qjt=s(Z4e);Bqr=r(qjt,"not"),qjt.forEach(t),Iqr=r(tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),WZ=n(tae,"A",{href:!0});var jjt=s(WZ);Nqr=r(jjt,"from_pretrained()"),jjt.forEach(t),qqr=r(tae," to load the model weights."),tae.forEach(t),jqr=i(xA),T(HE.$$.fragment,xA),xA.forEach(t),Dqr=i(Zl),Gr=n(Zl,"DIV",{class:!0});var ei=s(Gr);T(a$.$$.fragment,ei),Gqr=i(ei),eEe=n(ei,"P",{});var Djt=s(eEe);Oqr=r(Djt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Djt.forEach(t),Vqr=i(ei),vn=n(ei,"P",{});var $A=s(vn);Xqr=r($A,"The model class to instantiate is selected based on the "),oEe=n($A,"CODE",{});var Gjt=s(oEe);zqr=r(Gjt,"model_type"),Gjt.forEach(t),Wqr=r($A,` property of the config object (either
passed as an argument or loaded from `),rEe=n($A,"CODE",{});var Ojt=s(rEe);Qqr=r(Ojt,"pretrained_model_name_or_path"),Ojt.forEach(t),Hqr=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tEe=n($A,"CODE",{});var Vjt=s(tEe);Uqr=r(Vjt,"pretrained_model_name_or_path"),Vjt.forEach(t),Jqr=r($A,":"),$A.forEach(t),Yqr=i(ei),aEe=n(ei,"UL",{});var Xjt=s(aEe);UE=n(Xjt,"LI",{});var nOe=s(UE);nEe=n(nOe,"STRONG",{});var zjt=s(nEe);Kqr=r(zjt,"vision-encoder-decoder"),zjt.forEach(t),Zqr=r(nOe," \u2014 "),QZ=n(nOe,"A",{href:!0});var Wjt=s(QZ);ejr=r(Wjt,"TFVisionEncoderDecoderModel"),Wjt.forEach(t),ojr=r(nOe," (Vision Encoder decoder model)"),nOe.forEach(t),Xjt.forEach(t),rjr=i(ei),T(JE.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),Oze=i(f),zc=n(f,"H2",{class:!0});var YQe=s(zc);YE=n(YQe,"A",{id:!0,class:!0,href:!0});var Qjt=s(YE);sEe=n(Qjt,"SPAN",{});var Hjt=s(sEe);T(n$.$$.fragment,Hjt),Hjt.forEach(t),Qjt.forEach(t),tjr=i(YQe),lEe=n(YQe,"SPAN",{});var Ujt=s(lEe);ajr=r(Ujt,"TFAutoModelForSpeechSeq2Seq"),Ujt.forEach(t),YQe.forEach(t),Vze=i(f),hr=n(f,"DIV",{class:!0});var oi=s(hr);T(s$.$$.fragment,oi),njr=i(oi),Wc=n(oi,"P",{});var aae=s(Wc);sjr=r(aae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),HZ=n(aae,"A",{href:!0});var Jjt=s(HZ);ljr=r(Jjt,"from_pretrained()"),Jjt.forEach(t),ijr=r(aae," class method or the "),UZ=n(aae,"A",{href:!0});var Yjt=s(UZ);djr=r(Yjt,"from_config()"),Yjt.forEach(t),cjr=r(aae,` class
method.`),aae.forEach(t),fjr=i(oi),l$=n(oi,"P",{});var KQe=s(l$);mjr=r(KQe,"This class cannot be instantiated directly using "),iEe=n(KQe,"CODE",{});var Kjt=s(iEe);gjr=r(Kjt,"__init__()"),Kjt.forEach(t),hjr=r(KQe," (throws an error)."),KQe.forEach(t),pjr=i(oi),zt=n(oi,"DIV",{class:!0});var kA=s(zt);T(i$.$$.fragment,kA),_jr=i(kA),dEe=n(kA,"P",{});var Zjt=s(dEe);ujr=r(Zjt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Zjt.forEach(t),bjr=i(kA),Qc=n(kA,"P",{});var nae=s(Qc);vjr=r(nae,`Note:
Loading a model from its configuration file does `),cEe=n(nae,"STRONG",{});var eDt=s(cEe);Fjr=r(eDt,"not"),eDt.forEach(t),Tjr=r(nae,` load the model weights. It only affects the
model\u2019s configuration. Use `),JZ=n(nae,"A",{href:!0});var oDt=s(JZ);Mjr=r(oDt,"from_pretrained()"),oDt.forEach(t),Ejr=r(nae," to load the model weights."),nae.forEach(t),Cjr=i(kA),T(KE.$$.fragment,kA),kA.forEach(t),wjr=i(oi),Or=n(oi,"DIV",{class:!0});var ri=s(Or);T(d$.$$.fragment,ri),Ajr=i(ri),fEe=n(ri,"P",{});var rDt=s(fEe);Ljr=r(rDt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),rDt.forEach(t),yjr=i(ri),Fn=n(ri,"P",{});var SA=s(Fn);xjr=r(SA,"The model class to instantiate is selected based on the "),mEe=n(SA,"CODE",{});var tDt=s(mEe);$jr=r(tDt,"model_type"),tDt.forEach(t),kjr=r(SA,` property of the config object (either
passed as an argument or loaded from `),gEe=n(SA,"CODE",{});var aDt=s(gEe);Sjr=r(aDt,"pretrained_model_name_or_path"),aDt.forEach(t),Rjr=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hEe=n(SA,"CODE",{});var nDt=s(hEe);Pjr=r(nDt,"pretrained_model_name_or_path"),nDt.forEach(t),Bjr=r(SA,":"),SA.forEach(t),Ijr=i(ri),pEe=n(ri,"UL",{});var sDt=s(pEe);ZE=n(sDt,"LI",{});var sOe=s(ZE);_Ee=n(sOe,"STRONG",{});var lDt=s(_Ee);Njr=r(lDt,"speech_to_text"),lDt.forEach(t),qjr=r(sOe," \u2014 "),YZ=n(sOe,"A",{href:!0});var iDt=s(YZ);jjr=r(iDt,"TFSpeech2TextForConditionalGeneration"),iDt.forEach(t),Djr=r(sOe," (Speech2Text model)"),sOe.forEach(t),sDt.forEach(t),Gjr=i(ri),T(eC.$$.fragment,ri),ri.forEach(t),oi.forEach(t),Xze=i(f),Hc=n(f,"H2",{class:!0});var ZQe=s(Hc);oC=n(ZQe,"A",{id:!0,class:!0,href:!0});var dDt=s(oC);uEe=n(dDt,"SPAN",{});var cDt=s(uEe);T(c$.$$.fragment,cDt),cDt.forEach(t),dDt.forEach(t),Ojr=i(ZQe),bEe=n(ZQe,"SPAN",{});var fDt=s(bEe);Vjr=r(fDt,"FlaxAutoModel"),fDt.forEach(t),ZQe.forEach(t),zze=i(f),pr=n(f,"DIV",{class:!0});var ti=s(pr);T(f$.$$.fragment,ti),Xjr=i(ti),Uc=n(ti,"P",{});var sae=s(Uc);zjr=r(sae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),KZ=n(sae,"A",{href:!0});var mDt=s(KZ);Wjr=r(mDt,"from_pretrained()"),mDt.forEach(t),Qjr=r(sae," class method or the "),ZZ=n(sae,"A",{href:!0});var gDt=s(ZZ);Hjr=r(gDt,"from_config()"),gDt.forEach(t),Ujr=r(sae,` class
method.`),sae.forEach(t),Jjr=i(ti),m$=n(ti,"P",{});var eHe=s(m$);Yjr=r(eHe,"This class cannot be instantiated directly using "),vEe=n(eHe,"CODE",{});var hDt=s(vEe);Kjr=r(hDt,"__init__()"),hDt.forEach(t),Zjr=r(eHe," (throws an error)."),eHe.forEach(t),eDr=i(ti),Wt=n(ti,"DIV",{class:!0});var RA=s(Wt);T(g$.$$.fragment,RA),oDr=i(RA),FEe=n(RA,"P",{});var pDt=s(FEe);rDr=r(pDt,"Instantiates one of the base model classes of the library from a configuration."),pDt.forEach(t),tDr=i(RA),Jc=n(RA,"P",{});var lae=s(Jc);aDr=r(lae,`Note:
Loading a model from its configuration file does `),TEe=n(lae,"STRONG",{});var _Dt=s(TEe);nDr=r(_Dt,"not"),_Dt.forEach(t),sDr=r(lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),eee=n(lae,"A",{href:!0});var uDt=s(eee);lDr=r(uDt,"from_pretrained()"),uDt.forEach(t),iDr=r(lae," to load the model weights."),lae.forEach(t),dDr=i(RA),T(rC.$$.fragment,RA),RA.forEach(t),cDr=i(ti),Vr=n(ti,"DIV",{class:!0});var ai=s(Vr);T(h$.$$.fragment,ai),fDr=i(ai),MEe=n(ai,"P",{});var bDt=s(MEe);mDr=r(bDt,"Instantiate one of the base model classes of the library from a pretrained model."),bDt.forEach(t),gDr=i(ai),Tn=n(ai,"P",{});var PA=s(Tn);hDr=r(PA,"The model class to instantiate is selected based on the "),EEe=n(PA,"CODE",{});var vDt=s(EEe);pDr=r(vDt,"model_type"),vDt.forEach(t),_Dr=r(PA,` property of the config object (either
passed as an argument or loaded from `),CEe=n(PA,"CODE",{});var FDt=s(CEe);uDr=r(FDt,"pretrained_model_name_or_path"),FDt.forEach(t),bDr=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wEe=n(PA,"CODE",{});var TDt=s(wEe);vDr=r(TDt,"pretrained_model_name_or_path"),TDt.forEach(t),FDr=r(PA,":"),PA.forEach(t),TDr=i(ai),oe=n(ai,"UL",{});var ae=s(oe);tC=n(ae,"LI",{});var lOe=s(tC);AEe=n(lOe,"STRONG",{});var MDt=s(AEe);MDr=r(MDt,"albert"),MDt.forEach(t),EDr=r(lOe," \u2014 "),oee=n(lOe,"A",{href:!0});var EDt=s(oee);CDr=r(EDt,"FlaxAlbertModel"),EDt.forEach(t),wDr=r(lOe," (ALBERT model)"),lOe.forEach(t),ADr=i(ae),aC=n(ae,"LI",{});var iOe=s(aC);LEe=n(iOe,"STRONG",{});var CDt=s(LEe);LDr=r(CDt,"bart"),CDt.forEach(t),yDr=r(iOe," \u2014 "),ree=n(iOe,"A",{href:!0});var wDt=s(ree);xDr=r(wDt,"FlaxBartModel"),wDt.forEach(t),$Dr=r(iOe," (BART model)"),iOe.forEach(t),kDr=i(ae),nC=n(ae,"LI",{});var dOe=s(nC);yEe=n(dOe,"STRONG",{});var ADt=s(yEe);SDr=r(ADt,"beit"),ADt.forEach(t),RDr=r(dOe," \u2014 "),tee=n(dOe,"A",{href:!0});var LDt=s(tee);PDr=r(LDt,"FlaxBeitModel"),LDt.forEach(t),BDr=r(dOe," (BEiT model)"),dOe.forEach(t),IDr=i(ae),sC=n(ae,"LI",{});var cOe=s(sC);xEe=n(cOe,"STRONG",{});var yDt=s(xEe);NDr=r(yDt,"bert"),yDt.forEach(t),qDr=r(cOe," \u2014 "),aee=n(cOe,"A",{href:!0});var xDt=s(aee);jDr=r(xDt,"FlaxBertModel"),xDt.forEach(t),DDr=r(cOe," (BERT model)"),cOe.forEach(t),GDr=i(ae),lC=n(ae,"LI",{});var fOe=s(lC);$Ee=n(fOe,"STRONG",{});var $Dt=s($Ee);ODr=r($Dt,"big_bird"),$Dt.forEach(t),VDr=r(fOe," \u2014 "),nee=n(fOe,"A",{href:!0});var kDt=s(nee);XDr=r(kDt,"FlaxBigBirdModel"),kDt.forEach(t),zDr=r(fOe," (BigBird model)"),fOe.forEach(t),WDr=i(ae),iC=n(ae,"LI",{});var mOe=s(iC);kEe=n(mOe,"STRONG",{});var SDt=s(kEe);QDr=r(SDt,"blenderbot"),SDt.forEach(t),HDr=r(mOe," \u2014 "),see=n(mOe,"A",{href:!0});var RDt=s(see);UDr=r(RDt,"FlaxBlenderbotModel"),RDt.forEach(t),JDr=r(mOe," (Blenderbot model)"),mOe.forEach(t),YDr=i(ae),dC=n(ae,"LI",{});var gOe=s(dC);SEe=n(gOe,"STRONG",{});var PDt=s(SEe);KDr=r(PDt,"blenderbot-small"),PDt.forEach(t),ZDr=r(gOe," \u2014 "),lee=n(gOe,"A",{href:!0});var BDt=s(lee);eGr=r(BDt,"FlaxBlenderbotSmallModel"),BDt.forEach(t),oGr=r(gOe," (BlenderbotSmall model)"),gOe.forEach(t),rGr=i(ae),cC=n(ae,"LI",{});var hOe=s(cC);REe=n(hOe,"STRONG",{});var IDt=s(REe);tGr=r(IDt,"clip"),IDt.forEach(t),aGr=r(hOe," \u2014 "),iee=n(hOe,"A",{href:!0});var NDt=s(iee);nGr=r(NDt,"FlaxCLIPModel"),NDt.forEach(t),sGr=r(hOe," (CLIP model)"),hOe.forEach(t),lGr=i(ae),fC=n(ae,"LI",{});var pOe=s(fC);PEe=n(pOe,"STRONG",{});var qDt=s(PEe);iGr=r(qDt,"distilbert"),qDt.forEach(t),dGr=r(pOe," \u2014 "),dee=n(pOe,"A",{href:!0});var jDt=s(dee);cGr=r(jDt,"FlaxDistilBertModel"),jDt.forEach(t),fGr=r(pOe," (DistilBERT model)"),pOe.forEach(t),mGr=i(ae),mC=n(ae,"LI",{});var _Oe=s(mC);BEe=n(_Oe,"STRONG",{});var DDt=s(BEe);gGr=r(DDt,"electra"),DDt.forEach(t),hGr=r(_Oe," \u2014 "),cee=n(_Oe,"A",{href:!0});var GDt=s(cee);pGr=r(GDt,"FlaxElectraModel"),GDt.forEach(t),_Gr=r(_Oe," (ELECTRA model)"),_Oe.forEach(t),uGr=i(ae),gC=n(ae,"LI",{});var uOe=s(gC);IEe=n(uOe,"STRONG",{});var ODt=s(IEe);bGr=r(ODt,"gpt2"),ODt.forEach(t),vGr=r(uOe," \u2014 "),fee=n(uOe,"A",{href:!0});var VDt=s(fee);FGr=r(VDt,"FlaxGPT2Model"),VDt.forEach(t),TGr=r(uOe," (OpenAI GPT-2 model)"),uOe.forEach(t),MGr=i(ae),hC=n(ae,"LI",{});var bOe=s(hC);NEe=n(bOe,"STRONG",{});var XDt=s(NEe);EGr=r(XDt,"gpt_neo"),XDt.forEach(t),CGr=r(bOe," \u2014 "),mee=n(bOe,"A",{href:!0});var zDt=s(mee);wGr=r(zDt,"FlaxGPTNeoModel"),zDt.forEach(t),AGr=r(bOe," (GPT Neo model)"),bOe.forEach(t),LGr=i(ae),pC=n(ae,"LI",{});var vOe=s(pC);qEe=n(vOe,"STRONG",{});var WDt=s(qEe);yGr=r(WDt,"gptj"),WDt.forEach(t),xGr=r(vOe," \u2014 "),gee=n(vOe,"A",{href:!0});var QDt=s(gee);$Gr=r(QDt,"FlaxGPTJModel"),QDt.forEach(t),kGr=r(vOe," (GPT-J model)"),vOe.forEach(t),SGr=i(ae),_C=n(ae,"LI",{});var FOe=s(_C);jEe=n(FOe,"STRONG",{});var HDt=s(jEe);RGr=r(HDt,"longt5"),HDt.forEach(t),PGr=r(FOe," \u2014 "),hee=n(FOe,"A",{href:!0});var UDt=s(hee);BGr=r(UDt,"FlaxLongT5Model"),UDt.forEach(t),IGr=r(FOe," (LongT5 model)"),FOe.forEach(t),NGr=i(ae),uC=n(ae,"LI",{});var TOe=s(uC);DEe=n(TOe,"STRONG",{});var JDt=s(DEe);qGr=r(JDt,"marian"),JDt.forEach(t),jGr=r(TOe," \u2014 "),pee=n(TOe,"A",{href:!0});var YDt=s(pee);DGr=r(YDt,"FlaxMarianModel"),YDt.forEach(t),GGr=r(TOe," (Marian model)"),TOe.forEach(t),OGr=i(ae),bC=n(ae,"LI",{});var MOe=s(bC);GEe=n(MOe,"STRONG",{});var KDt=s(GEe);VGr=r(KDt,"mbart"),KDt.forEach(t),XGr=r(MOe," \u2014 "),_ee=n(MOe,"A",{href:!0});var ZDt=s(_ee);zGr=r(ZDt,"FlaxMBartModel"),ZDt.forEach(t),WGr=r(MOe," (mBART model)"),MOe.forEach(t),QGr=i(ae),vC=n(ae,"LI",{});var EOe=s(vC);OEe=n(EOe,"STRONG",{});var eGt=s(OEe);HGr=r(eGt,"mt5"),eGt.forEach(t),UGr=r(EOe," \u2014 "),uee=n(EOe,"A",{href:!0});var oGt=s(uee);JGr=r(oGt,"FlaxMT5Model"),oGt.forEach(t),YGr=r(EOe," (MT5 model)"),EOe.forEach(t),KGr=i(ae),FC=n(ae,"LI",{});var COe=s(FC);VEe=n(COe,"STRONG",{});var rGt=s(VEe);ZGr=r(rGt,"opt"),rGt.forEach(t),eOr=r(COe," \u2014 "),bee=n(COe,"A",{href:!0});var tGt=s(bee);oOr=r(tGt,"FlaxOPTModel"),tGt.forEach(t),rOr=r(COe," (OPT model)"),COe.forEach(t),tOr=i(ae),TC=n(ae,"LI",{});var wOe=s(TC);XEe=n(wOe,"STRONG",{});var aGt=s(XEe);aOr=r(aGt,"pegasus"),aGt.forEach(t),nOr=r(wOe," \u2014 "),vee=n(wOe,"A",{href:!0});var nGt=s(vee);sOr=r(nGt,"FlaxPegasusModel"),nGt.forEach(t),lOr=r(wOe," (Pegasus model)"),wOe.forEach(t),iOr=i(ae),MC=n(ae,"LI",{});var AOe=s(MC);zEe=n(AOe,"STRONG",{});var sGt=s(zEe);dOr=r(sGt,"roberta"),sGt.forEach(t),cOr=r(AOe," \u2014 "),Fee=n(AOe,"A",{href:!0});var lGt=s(Fee);fOr=r(lGt,"FlaxRobertaModel"),lGt.forEach(t),mOr=r(AOe," (RoBERTa model)"),AOe.forEach(t),gOr=i(ae),EC=n(ae,"LI",{});var LOe=s(EC);WEe=n(LOe,"STRONG",{});var iGt=s(WEe);hOr=r(iGt,"roformer"),iGt.forEach(t),pOr=r(LOe," \u2014 "),Tee=n(LOe,"A",{href:!0});var dGt=s(Tee);_Or=r(dGt,"FlaxRoFormerModel"),dGt.forEach(t),uOr=r(LOe," (RoFormer model)"),LOe.forEach(t),bOr=i(ae),CC=n(ae,"LI",{});var yOe=s(CC);QEe=n(yOe,"STRONG",{});var cGt=s(QEe);vOr=r(cGt,"t5"),cGt.forEach(t),FOr=r(yOe," \u2014 "),Mee=n(yOe,"A",{href:!0});var fGt=s(Mee);TOr=r(fGt,"FlaxT5Model"),fGt.forEach(t),MOr=r(yOe," (T5 model)"),yOe.forEach(t),EOr=i(ae),wC=n(ae,"LI",{});var xOe=s(wC);HEe=n(xOe,"STRONG",{});var mGt=s(HEe);COr=r(mGt,"vision-text-dual-encoder"),mGt.forEach(t),wOr=r(xOe," \u2014 "),Eee=n(xOe,"A",{href:!0});var gGt=s(Eee);AOr=r(gGt,"FlaxVisionTextDualEncoderModel"),gGt.forEach(t),LOr=r(xOe," (VisionTextDualEncoder model)"),xOe.forEach(t),yOr=i(ae),AC=n(ae,"LI",{});var $Oe=s(AC);UEe=n($Oe,"STRONG",{});var hGt=s(UEe);xOr=r(hGt,"vit"),hGt.forEach(t),$Or=r($Oe," \u2014 "),Cee=n($Oe,"A",{href:!0});var pGt=s(Cee);kOr=r(pGt,"FlaxViTModel"),pGt.forEach(t),SOr=r($Oe," (ViT model)"),$Oe.forEach(t),ROr=i(ae),LC=n(ae,"LI",{});var kOe=s(LC);JEe=n(kOe,"STRONG",{});var _Gt=s(JEe);POr=r(_Gt,"wav2vec2"),_Gt.forEach(t),BOr=r(kOe," \u2014 "),wee=n(kOe,"A",{href:!0});var uGt=s(wee);IOr=r(uGt,"FlaxWav2Vec2Model"),uGt.forEach(t),NOr=r(kOe," (Wav2Vec2 model)"),kOe.forEach(t),qOr=i(ae),yC=n(ae,"LI",{});var SOe=s(yC);YEe=n(SOe,"STRONG",{});var bGt=s(YEe);jOr=r(bGt,"xglm"),bGt.forEach(t),DOr=r(SOe," \u2014 "),Aee=n(SOe,"A",{href:!0});var vGt=s(Aee);GOr=r(vGt,"FlaxXGLMModel"),vGt.forEach(t),OOr=r(SOe," (XGLM model)"),SOe.forEach(t),VOr=i(ae),xC=n(ae,"LI",{});var ROe=s(xC);KEe=n(ROe,"STRONG",{});var FGt=s(KEe);XOr=r(FGt,"xlm-roberta"),FGt.forEach(t),zOr=r(ROe," \u2014 "),Lee=n(ROe,"A",{href:!0});var TGt=s(Lee);WOr=r(TGt,"FlaxXLMRobertaModel"),TGt.forEach(t),QOr=r(ROe," (XLM-RoBERTa model)"),ROe.forEach(t),ae.forEach(t),HOr=i(ai),T($C.$$.fragment,ai),ai.forEach(t),ti.forEach(t),Wze=i(f),Yc=n(f,"H2",{class:!0});var oHe=s(Yc);kC=n(oHe,"A",{id:!0,class:!0,href:!0});var MGt=s(kC);ZEe=n(MGt,"SPAN",{});var EGt=s(ZEe);T(p$.$$.fragment,EGt),EGt.forEach(t),MGt.forEach(t),UOr=i(oHe),eCe=n(oHe,"SPAN",{});var CGt=s(eCe);JOr=r(CGt,"FlaxAutoModelForCausalLM"),CGt.forEach(t),oHe.forEach(t),Qze=i(f),_r=n(f,"DIV",{class:!0});var ni=s(_r);T(_$.$$.fragment,ni),YOr=i(ni),Kc=n(ni,"P",{});var iae=s(Kc);KOr=r(iae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),yee=n(iae,"A",{href:!0});var wGt=s(yee);ZOr=r(wGt,"from_pretrained()"),wGt.forEach(t),eVr=r(iae," class method or the "),xee=n(iae,"A",{href:!0});var AGt=s(xee);oVr=r(AGt,"from_config()"),AGt.forEach(t),rVr=r(iae,` class
method.`),iae.forEach(t),tVr=i(ni),u$=n(ni,"P",{});var rHe=s(u$);aVr=r(rHe,"This class cannot be instantiated directly using "),oCe=n(rHe,"CODE",{});var LGt=s(oCe);nVr=r(LGt,"__init__()"),LGt.forEach(t),sVr=r(rHe," (throws an error)."),rHe.forEach(t),lVr=i(ni),Qt=n(ni,"DIV",{class:!0});var BA=s(Qt);T(b$.$$.fragment,BA),iVr=i(BA),rCe=n(BA,"P",{});var yGt=s(rCe);dVr=r(yGt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),yGt.forEach(t),cVr=i(BA),Zc=n(BA,"P",{});var dae=s(Zc);fVr=r(dae,`Note:
Loading a model from its configuration file does `),tCe=n(dae,"STRONG",{});var xGt=s(tCe);mVr=r(xGt,"not"),xGt.forEach(t),gVr=r(dae,` load the model weights. It only affects the
model\u2019s configuration. Use `),$ee=n(dae,"A",{href:!0});var $Gt=s($ee);hVr=r($Gt,"from_pretrained()"),$Gt.forEach(t),pVr=r(dae," to load the model weights."),dae.forEach(t),_Vr=i(BA),T(SC.$$.fragment,BA),BA.forEach(t),uVr=i(ni),Xr=n(ni,"DIV",{class:!0});var si=s(Xr);T(v$.$$.fragment,si),bVr=i(si),aCe=n(si,"P",{});var kGt=s(aCe);vVr=r(kGt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),kGt.forEach(t),FVr=i(si),Mn=n(si,"P",{});var IA=s(Mn);TVr=r(IA,"The model class to instantiate is selected based on the "),nCe=n(IA,"CODE",{});var SGt=s(nCe);MVr=r(SGt,"model_type"),SGt.forEach(t),EVr=r(IA,` property of the config object (either
passed as an argument or loaded from `),sCe=n(IA,"CODE",{});var RGt=s(sCe);CVr=r(RGt,"pretrained_model_name_or_path"),RGt.forEach(t),wVr=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lCe=n(IA,"CODE",{});var PGt=s(lCe);AVr=r(PGt,"pretrained_model_name_or_path"),PGt.forEach(t),LVr=r(IA,":"),IA.forEach(t),yVr=i(si),xe=n(si,"UL",{});var Ne=s(xe);RC=n(Ne,"LI",{});var POe=s(RC);iCe=n(POe,"STRONG",{});var BGt=s(iCe);xVr=r(BGt,"bart"),BGt.forEach(t),$Vr=r(POe," \u2014 "),kee=n(POe,"A",{href:!0});var IGt=s(kee);kVr=r(IGt,"FlaxBartForCausalLM"),IGt.forEach(t),SVr=r(POe," (BART model)"),POe.forEach(t),RVr=i(Ne),PC=n(Ne,"LI",{});var BOe=s(PC);dCe=n(BOe,"STRONG",{});var NGt=s(dCe);PVr=r(NGt,"bert"),NGt.forEach(t),BVr=r(BOe," \u2014 "),See=n(BOe,"A",{href:!0});var qGt=s(See);IVr=r(qGt,"FlaxBertForCausalLM"),qGt.forEach(t),NVr=r(BOe," (BERT model)"),BOe.forEach(t),qVr=i(Ne),BC=n(Ne,"LI",{});var IOe=s(BC);cCe=n(IOe,"STRONG",{});var jGt=s(cCe);jVr=r(jGt,"big_bird"),jGt.forEach(t),DVr=r(IOe," \u2014 "),Ree=n(IOe,"A",{href:!0});var DGt=s(Ree);GVr=r(DGt,"FlaxBigBirdForCausalLM"),DGt.forEach(t),OVr=r(IOe," (BigBird model)"),IOe.forEach(t),VVr=i(Ne),IC=n(Ne,"LI",{});var NOe=s(IC);fCe=n(NOe,"STRONG",{});var GGt=s(fCe);XVr=r(GGt,"electra"),GGt.forEach(t),zVr=r(NOe," \u2014 "),Pee=n(NOe,"A",{href:!0});var OGt=s(Pee);WVr=r(OGt,"FlaxElectraForCausalLM"),OGt.forEach(t),QVr=r(NOe," (ELECTRA model)"),NOe.forEach(t),HVr=i(Ne),NC=n(Ne,"LI",{});var qOe=s(NC);mCe=n(qOe,"STRONG",{});var VGt=s(mCe);UVr=r(VGt,"gpt2"),VGt.forEach(t),JVr=r(qOe," \u2014 "),Bee=n(qOe,"A",{href:!0});var XGt=s(Bee);YVr=r(XGt,"FlaxGPT2LMHeadModel"),XGt.forEach(t),KVr=r(qOe," (OpenAI GPT-2 model)"),qOe.forEach(t),ZVr=i(Ne),qC=n(Ne,"LI",{});var jOe=s(qC);gCe=n(jOe,"STRONG",{});var zGt=s(gCe);eXr=r(zGt,"gpt_neo"),zGt.forEach(t),oXr=r(jOe," \u2014 "),Iee=n(jOe,"A",{href:!0});var WGt=s(Iee);rXr=r(WGt,"FlaxGPTNeoForCausalLM"),WGt.forEach(t),tXr=r(jOe," (GPT Neo model)"),jOe.forEach(t),aXr=i(Ne),jC=n(Ne,"LI",{});var DOe=s(jC);hCe=n(DOe,"STRONG",{});var QGt=s(hCe);nXr=r(QGt,"gptj"),QGt.forEach(t),sXr=r(DOe," \u2014 "),Nee=n(DOe,"A",{href:!0});var HGt=s(Nee);lXr=r(HGt,"FlaxGPTJForCausalLM"),HGt.forEach(t),iXr=r(DOe," (GPT-J model)"),DOe.forEach(t),dXr=i(Ne),DC=n(Ne,"LI",{});var GOe=s(DC);pCe=n(GOe,"STRONG",{});var UGt=s(pCe);cXr=r(UGt,"opt"),UGt.forEach(t),fXr=r(GOe," \u2014 "),qee=n(GOe,"A",{href:!0});var JGt=s(qee);mXr=r(JGt,"FlaxOPTForCausalLM"),JGt.forEach(t),gXr=r(GOe," (OPT model)"),GOe.forEach(t),hXr=i(Ne),GC=n(Ne,"LI",{});var OOe=s(GC);_Ce=n(OOe,"STRONG",{});var YGt=s(_Ce);pXr=r(YGt,"roberta"),YGt.forEach(t),_Xr=r(OOe," \u2014 "),jee=n(OOe,"A",{href:!0});var KGt=s(jee);uXr=r(KGt,"FlaxRobertaForCausalLM"),KGt.forEach(t),bXr=r(OOe," (RoBERTa model)"),OOe.forEach(t),vXr=i(Ne),OC=n(Ne,"LI",{});var VOe=s(OC);uCe=n(VOe,"STRONG",{});var ZGt=s(uCe);FXr=r(ZGt,"xglm"),ZGt.forEach(t),TXr=r(VOe," \u2014 "),Dee=n(VOe,"A",{href:!0});var eOt=s(Dee);MXr=r(eOt,"FlaxXGLMForCausalLM"),eOt.forEach(t),EXr=r(VOe," (XGLM model)"),VOe.forEach(t),Ne.forEach(t),CXr=i(si),T(VC.$$.fragment,si),si.forEach(t),ni.forEach(t),Hze=i(f),ef=n(f,"H2",{class:!0});var tHe=s(ef);XC=n(tHe,"A",{id:!0,class:!0,href:!0});var oOt=s(XC);bCe=n(oOt,"SPAN",{});var rOt=s(bCe);T(F$.$$.fragment,rOt),rOt.forEach(t),oOt.forEach(t),wXr=i(tHe),vCe=n(tHe,"SPAN",{});var tOt=s(vCe);AXr=r(tOt,"FlaxAutoModelForPreTraining"),tOt.forEach(t),tHe.forEach(t),Uze=i(f),ur=n(f,"DIV",{class:!0});var li=s(ur);T(T$.$$.fragment,li),LXr=i(li),of=n(li,"P",{});var cae=s(of);yXr=r(cae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Gee=n(cae,"A",{href:!0});var aOt=s(Gee);xXr=r(aOt,"from_pretrained()"),aOt.forEach(t),$Xr=r(cae," class method or the "),Oee=n(cae,"A",{href:!0});var nOt=s(Oee);kXr=r(nOt,"from_config()"),nOt.forEach(t),SXr=r(cae,` class
method.`),cae.forEach(t),RXr=i(li),M$=n(li,"P",{});var aHe=s(M$);PXr=r(aHe,"This class cannot be instantiated directly using "),FCe=n(aHe,"CODE",{});var sOt=s(FCe);BXr=r(sOt,"__init__()"),sOt.forEach(t),IXr=r(aHe," (throws an error)."),aHe.forEach(t),NXr=i(li),Ht=n(li,"DIV",{class:!0});var NA=s(Ht);T(E$.$$.fragment,NA),qXr=i(NA),TCe=n(NA,"P",{});var lOt=s(TCe);jXr=r(lOt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),lOt.forEach(t),DXr=i(NA),rf=n(NA,"P",{});var fae=s(rf);GXr=r(fae,`Note:
Loading a model from its configuration file does `),MCe=n(fae,"STRONG",{});var iOt=s(MCe);OXr=r(iOt,"not"),iOt.forEach(t),VXr=r(fae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vee=n(fae,"A",{href:!0});var dOt=s(Vee);XXr=r(dOt,"from_pretrained()"),dOt.forEach(t),zXr=r(fae," to load the model weights."),fae.forEach(t),WXr=i(NA),T(zC.$$.fragment,NA),NA.forEach(t),QXr=i(li),zr=n(li,"DIV",{class:!0});var ii=s(zr);T(C$.$$.fragment,ii),HXr=i(ii),ECe=n(ii,"P",{});var cOt=s(ECe);UXr=r(cOt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),cOt.forEach(t),JXr=i(ii),En=n(ii,"P",{});var qA=s(En);YXr=r(qA,"The model class to instantiate is selected based on the "),CCe=n(qA,"CODE",{});var fOt=s(CCe);KXr=r(fOt,"model_type"),fOt.forEach(t),ZXr=r(qA,` property of the config object (either
passed as an argument or loaded from `),wCe=n(qA,"CODE",{});var mOt=s(wCe);ezr=r(mOt,"pretrained_model_name_or_path"),mOt.forEach(t),ozr=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ACe=n(qA,"CODE",{});var gOt=s(ACe);rzr=r(gOt,"pretrained_model_name_or_path"),gOt.forEach(t),tzr=r(qA,":"),qA.forEach(t),azr=i(ii),Ee=n(ii,"UL",{});var we=s(Ee);WC=n(we,"LI",{});var XOe=s(WC);LCe=n(XOe,"STRONG",{});var hOt=s(LCe);nzr=r(hOt,"albert"),hOt.forEach(t),szr=r(XOe," \u2014 "),Xee=n(XOe,"A",{href:!0});var pOt=s(Xee);lzr=r(pOt,"FlaxAlbertForPreTraining"),pOt.forEach(t),izr=r(XOe," (ALBERT model)"),XOe.forEach(t),dzr=i(we),QC=n(we,"LI",{});var zOe=s(QC);yCe=n(zOe,"STRONG",{});var _Ot=s(yCe);czr=r(_Ot,"bart"),_Ot.forEach(t),fzr=r(zOe," \u2014 "),zee=n(zOe,"A",{href:!0});var uOt=s(zee);mzr=r(uOt,"FlaxBartForConditionalGeneration"),uOt.forEach(t),gzr=r(zOe," (BART model)"),zOe.forEach(t),hzr=i(we),HC=n(we,"LI",{});var WOe=s(HC);xCe=n(WOe,"STRONG",{});var bOt=s(xCe);pzr=r(bOt,"bert"),bOt.forEach(t),_zr=r(WOe," \u2014 "),Wee=n(WOe,"A",{href:!0});var vOt=s(Wee);uzr=r(vOt,"FlaxBertForPreTraining"),vOt.forEach(t),bzr=r(WOe," (BERT model)"),WOe.forEach(t),vzr=i(we),UC=n(we,"LI",{});var QOe=s(UC);$Ce=n(QOe,"STRONG",{});var FOt=s($Ce);Fzr=r(FOt,"big_bird"),FOt.forEach(t),Tzr=r(QOe," \u2014 "),Qee=n(QOe,"A",{href:!0});var TOt=s(Qee);Mzr=r(TOt,"FlaxBigBirdForPreTraining"),TOt.forEach(t),Ezr=r(QOe," (BigBird model)"),QOe.forEach(t),Czr=i(we),JC=n(we,"LI",{});var HOe=s(JC);kCe=n(HOe,"STRONG",{});var MOt=s(kCe);wzr=r(MOt,"electra"),MOt.forEach(t),Azr=r(HOe," \u2014 "),Hee=n(HOe,"A",{href:!0});var EOt=s(Hee);Lzr=r(EOt,"FlaxElectraForPreTraining"),EOt.forEach(t),yzr=r(HOe," (ELECTRA model)"),HOe.forEach(t),xzr=i(we),YC=n(we,"LI",{});var UOe=s(YC);SCe=n(UOe,"STRONG",{});var COt=s(SCe);$zr=r(COt,"longt5"),COt.forEach(t),kzr=r(UOe," \u2014 "),Uee=n(UOe,"A",{href:!0});var wOt=s(Uee);Szr=r(wOt,"FlaxLongT5ForConditionalGeneration"),wOt.forEach(t),Rzr=r(UOe," (LongT5 model)"),UOe.forEach(t),Pzr=i(we),KC=n(we,"LI",{});var JOe=s(KC);RCe=n(JOe,"STRONG",{});var AOt=s(RCe);Bzr=r(AOt,"mbart"),AOt.forEach(t),Izr=r(JOe," \u2014 "),Jee=n(JOe,"A",{href:!0});var LOt=s(Jee);Nzr=r(LOt,"FlaxMBartForConditionalGeneration"),LOt.forEach(t),qzr=r(JOe," (mBART model)"),JOe.forEach(t),jzr=i(we),ZC=n(we,"LI",{});var YOe=s(ZC);PCe=n(YOe,"STRONG",{});var yOt=s(PCe);Dzr=r(yOt,"mt5"),yOt.forEach(t),Gzr=r(YOe," \u2014 "),Yee=n(YOe,"A",{href:!0});var xOt=s(Yee);Ozr=r(xOt,"FlaxMT5ForConditionalGeneration"),xOt.forEach(t),Vzr=r(YOe," (MT5 model)"),YOe.forEach(t),Xzr=i(we),e5=n(we,"LI",{});var KOe=s(e5);BCe=n(KOe,"STRONG",{});var $Ot=s(BCe);zzr=r($Ot,"roberta"),$Ot.forEach(t),Wzr=r(KOe," \u2014 "),Kee=n(KOe,"A",{href:!0});var kOt=s(Kee);Qzr=r(kOt,"FlaxRobertaForMaskedLM"),kOt.forEach(t),Hzr=r(KOe," (RoBERTa model)"),KOe.forEach(t),Uzr=i(we),o5=n(we,"LI",{});var ZOe=s(o5);ICe=n(ZOe,"STRONG",{});var SOt=s(ICe);Jzr=r(SOt,"roformer"),SOt.forEach(t),Yzr=r(ZOe," \u2014 "),Zee=n(ZOe,"A",{href:!0});var ROt=s(Zee);Kzr=r(ROt,"FlaxRoFormerForMaskedLM"),ROt.forEach(t),Zzr=r(ZOe," (RoFormer model)"),ZOe.forEach(t),eWr=i(we),r5=n(we,"LI",{});var eVe=s(r5);NCe=n(eVe,"STRONG",{});var POt=s(NCe);oWr=r(POt,"t5"),POt.forEach(t),rWr=r(eVe," \u2014 "),eoe=n(eVe,"A",{href:!0});var BOt=s(eoe);tWr=r(BOt,"FlaxT5ForConditionalGeneration"),BOt.forEach(t),aWr=r(eVe," (T5 model)"),eVe.forEach(t),nWr=i(we),t5=n(we,"LI",{});var oVe=s(t5);qCe=n(oVe,"STRONG",{});var IOt=s(qCe);sWr=r(IOt,"wav2vec2"),IOt.forEach(t),lWr=r(oVe," \u2014 "),ooe=n(oVe,"A",{href:!0});var NOt=s(ooe);iWr=r(NOt,"FlaxWav2Vec2ForPreTraining"),NOt.forEach(t),dWr=r(oVe," (Wav2Vec2 model)"),oVe.forEach(t),cWr=i(we),a5=n(we,"LI",{});var rVe=s(a5);jCe=n(rVe,"STRONG",{});var qOt=s(jCe);fWr=r(qOt,"xlm-roberta"),qOt.forEach(t),mWr=r(rVe," \u2014 "),roe=n(rVe,"A",{href:!0});var jOt=s(roe);gWr=r(jOt,"FlaxXLMRobertaForMaskedLM"),jOt.forEach(t),hWr=r(rVe," (XLM-RoBERTa model)"),rVe.forEach(t),we.forEach(t),pWr=i(ii),T(n5.$$.fragment,ii),ii.forEach(t),li.forEach(t),Jze=i(f),tf=n(f,"H2",{class:!0});var nHe=s(tf);s5=n(nHe,"A",{id:!0,class:!0,href:!0});var DOt=s(s5);DCe=n(DOt,"SPAN",{});var GOt=s(DCe);T(w$.$$.fragment,GOt),GOt.forEach(t),DOt.forEach(t),_Wr=i(nHe),GCe=n(nHe,"SPAN",{});var OOt=s(GCe);uWr=r(OOt,"FlaxAutoModelForMaskedLM"),OOt.forEach(t),nHe.forEach(t),Yze=i(f),br=n(f,"DIV",{class:!0});var di=s(br);T(A$.$$.fragment,di),bWr=i(di),af=n(di,"P",{});var mae=s(af);vWr=r(mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),toe=n(mae,"A",{href:!0});var VOt=s(toe);FWr=r(VOt,"from_pretrained()"),VOt.forEach(t),TWr=r(mae," class method or the "),aoe=n(mae,"A",{href:!0});var XOt=s(aoe);MWr=r(XOt,"from_config()"),XOt.forEach(t),EWr=r(mae,` class
method.`),mae.forEach(t),CWr=i(di),L$=n(di,"P",{});var sHe=s(L$);wWr=r(sHe,"This class cannot be instantiated directly using "),OCe=n(sHe,"CODE",{});var zOt=s(OCe);AWr=r(zOt,"__init__()"),zOt.forEach(t),LWr=r(sHe," (throws an error)."),sHe.forEach(t),yWr=i(di),Ut=n(di,"DIV",{class:!0});var jA=s(Ut);T(y$.$$.fragment,jA),xWr=i(jA),VCe=n(jA,"P",{});var WOt=s(VCe);$Wr=r(WOt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),WOt.forEach(t),kWr=i(jA),nf=n(jA,"P",{});var gae=s(nf);SWr=r(gae,`Note:
Loading a model from its configuration file does `),XCe=n(gae,"STRONG",{});var QOt=s(XCe);RWr=r(QOt,"not"),QOt.forEach(t),PWr=r(gae,` load the model weights. It only affects the
model\u2019s configuration. Use `),noe=n(gae,"A",{href:!0});var HOt=s(noe);BWr=r(HOt,"from_pretrained()"),HOt.forEach(t),IWr=r(gae," to load the model weights."),gae.forEach(t),NWr=i(jA),T(l5.$$.fragment,jA),jA.forEach(t),qWr=i(di),Wr=n(di,"DIV",{class:!0});var ci=s(Wr);T(x$.$$.fragment,ci),jWr=i(ci),zCe=n(ci,"P",{});var UOt=s(zCe);DWr=r(UOt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),UOt.forEach(t),GWr=i(ci),Cn=n(ci,"P",{});var DA=s(Cn);OWr=r(DA,"The model class to instantiate is selected based on the "),WCe=n(DA,"CODE",{});var JOt=s(WCe);VWr=r(JOt,"model_type"),JOt.forEach(t),XWr=r(DA,` property of the config object (either
passed as an argument or loaded from `),QCe=n(DA,"CODE",{});var YOt=s(QCe);zWr=r(YOt,"pretrained_model_name_or_path"),YOt.forEach(t),WWr=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HCe=n(DA,"CODE",{});var KOt=s(HCe);QWr=r(KOt,"pretrained_model_name_or_path"),KOt.forEach(t),HWr=r(DA,":"),DA.forEach(t),UWr=i(ci),$e=n(ci,"UL",{});var qe=s($e);i5=n(qe,"LI",{});var tVe=s(i5);UCe=n(tVe,"STRONG",{});var ZOt=s(UCe);JWr=r(ZOt,"albert"),ZOt.forEach(t),YWr=r(tVe," \u2014 "),soe=n(tVe,"A",{href:!0});var eVt=s(soe);KWr=r(eVt,"FlaxAlbertForMaskedLM"),eVt.forEach(t),ZWr=r(tVe," (ALBERT model)"),tVe.forEach(t),eQr=i(qe),d5=n(qe,"LI",{});var aVe=s(d5);JCe=n(aVe,"STRONG",{});var oVt=s(JCe);oQr=r(oVt,"bart"),oVt.forEach(t),rQr=r(aVe," \u2014 "),loe=n(aVe,"A",{href:!0});var rVt=s(loe);tQr=r(rVt,"FlaxBartForConditionalGeneration"),rVt.forEach(t),aQr=r(aVe," (BART model)"),aVe.forEach(t),nQr=i(qe),c5=n(qe,"LI",{});var nVe=s(c5);YCe=n(nVe,"STRONG",{});var tVt=s(YCe);sQr=r(tVt,"bert"),tVt.forEach(t),lQr=r(nVe," \u2014 "),ioe=n(nVe,"A",{href:!0});var aVt=s(ioe);iQr=r(aVt,"FlaxBertForMaskedLM"),aVt.forEach(t),dQr=r(nVe," (BERT model)"),nVe.forEach(t),cQr=i(qe),f5=n(qe,"LI",{});var sVe=s(f5);KCe=n(sVe,"STRONG",{});var nVt=s(KCe);fQr=r(nVt,"big_bird"),nVt.forEach(t),mQr=r(sVe," \u2014 "),doe=n(sVe,"A",{href:!0});var sVt=s(doe);gQr=r(sVt,"FlaxBigBirdForMaskedLM"),sVt.forEach(t),hQr=r(sVe," (BigBird model)"),sVe.forEach(t),pQr=i(qe),m5=n(qe,"LI",{});var lVe=s(m5);ZCe=n(lVe,"STRONG",{});var lVt=s(ZCe);_Qr=r(lVt,"distilbert"),lVt.forEach(t),uQr=r(lVe," \u2014 "),coe=n(lVe,"A",{href:!0});var iVt=s(coe);bQr=r(iVt,"FlaxDistilBertForMaskedLM"),iVt.forEach(t),vQr=r(lVe," (DistilBERT model)"),lVe.forEach(t),FQr=i(qe),g5=n(qe,"LI",{});var iVe=s(g5);e5e=n(iVe,"STRONG",{});var dVt=s(e5e);TQr=r(dVt,"electra"),dVt.forEach(t),MQr=r(iVe," \u2014 "),foe=n(iVe,"A",{href:!0});var cVt=s(foe);EQr=r(cVt,"FlaxElectraForMaskedLM"),cVt.forEach(t),CQr=r(iVe," (ELECTRA model)"),iVe.forEach(t),wQr=i(qe),h5=n(qe,"LI",{});var dVe=s(h5);o5e=n(dVe,"STRONG",{});var fVt=s(o5e);AQr=r(fVt,"mbart"),fVt.forEach(t),LQr=r(dVe," \u2014 "),moe=n(dVe,"A",{href:!0});var mVt=s(moe);yQr=r(mVt,"FlaxMBartForConditionalGeneration"),mVt.forEach(t),xQr=r(dVe," (mBART model)"),dVe.forEach(t),$Qr=i(qe),p5=n(qe,"LI",{});var cVe=s(p5);r5e=n(cVe,"STRONG",{});var gVt=s(r5e);kQr=r(gVt,"roberta"),gVt.forEach(t),SQr=r(cVe," \u2014 "),goe=n(cVe,"A",{href:!0});var hVt=s(goe);RQr=r(hVt,"FlaxRobertaForMaskedLM"),hVt.forEach(t),PQr=r(cVe," (RoBERTa model)"),cVe.forEach(t),BQr=i(qe),_5=n(qe,"LI",{});var fVe=s(_5);t5e=n(fVe,"STRONG",{});var pVt=s(t5e);IQr=r(pVt,"roformer"),pVt.forEach(t),NQr=r(fVe," \u2014 "),hoe=n(fVe,"A",{href:!0});var _Vt=s(hoe);qQr=r(_Vt,"FlaxRoFormerForMaskedLM"),_Vt.forEach(t),jQr=r(fVe," (RoFormer model)"),fVe.forEach(t),DQr=i(qe),u5=n(qe,"LI",{});var mVe=s(u5);a5e=n(mVe,"STRONG",{});var uVt=s(a5e);GQr=r(uVt,"xlm-roberta"),uVt.forEach(t),OQr=r(mVe," \u2014 "),poe=n(mVe,"A",{href:!0});var bVt=s(poe);VQr=r(bVt,"FlaxXLMRobertaForMaskedLM"),bVt.forEach(t),XQr=r(mVe," (XLM-RoBERTa model)"),mVe.forEach(t),qe.forEach(t),zQr=i(ci),T(b5.$$.fragment,ci),ci.forEach(t),di.forEach(t),Kze=i(f),sf=n(f,"H2",{class:!0});var lHe=s(sf);v5=n(lHe,"A",{id:!0,class:!0,href:!0});var vVt=s(v5);n5e=n(vVt,"SPAN",{});var FVt=s(n5e);T($$.$$.fragment,FVt),FVt.forEach(t),vVt.forEach(t),WQr=i(lHe),s5e=n(lHe,"SPAN",{});var TVt=s(s5e);QQr=r(TVt,"FlaxAutoModelForSeq2SeqLM"),TVt.forEach(t),lHe.forEach(t),Zze=i(f),vr=n(f,"DIV",{class:!0});var fi=s(vr);T(k$.$$.fragment,fi),HQr=i(fi),lf=n(fi,"P",{});var hae=s(lf);UQr=r(hae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),_oe=n(hae,"A",{href:!0});var MVt=s(_oe);JQr=r(MVt,"from_pretrained()"),MVt.forEach(t),YQr=r(hae," class method or the "),uoe=n(hae,"A",{href:!0});var EVt=s(uoe);KQr=r(EVt,"from_config()"),EVt.forEach(t),ZQr=r(hae,` class
method.`),hae.forEach(t),eHr=i(fi),S$=n(fi,"P",{});var iHe=s(S$);oHr=r(iHe,"This class cannot be instantiated directly using "),l5e=n(iHe,"CODE",{});var CVt=s(l5e);rHr=r(CVt,"__init__()"),CVt.forEach(t),tHr=r(iHe," (throws an error)."),iHe.forEach(t),aHr=i(fi),Jt=n(fi,"DIV",{class:!0});var GA=s(Jt);T(R$.$$.fragment,GA),nHr=i(GA),i5e=n(GA,"P",{});var wVt=s(i5e);sHr=r(wVt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),wVt.forEach(t),lHr=i(GA),df=n(GA,"P",{});var pae=s(df);iHr=r(pae,`Note:
Loading a model from its configuration file does `),d5e=n(pae,"STRONG",{});var AVt=s(d5e);dHr=r(AVt,"not"),AVt.forEach(t),cHr=r(pae,` load the model weights. It only affects the
model\u2019s configuration. Use `),boe=n(pae,"A",{href:!0});var LVt=s(boe);fHr=r(LVt,"from_pretrained()"),LVt.forEach(t),mHr=r(pae," to load the model weights."),pae.forEach(t),gHr=i(GA),T(F5.$$.fragment,GA),GA.forEach(t),hHr=i(fi),Qr=n(fi,"DIV",{class:!0});var mi=s(Qr);T(P$.$$.fragment,mi),pHr=i(mi),c5e=n(mi,"P",{});var yVt=s(c5e);_Hr=r(yVt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),yVt.forEach(t),uHr=i(mi),wn=n(mi,"P",{});var OA=s(wn);bHr=r(OA,"The model class to instantiate is selected based on the "),f5e=n(OA,"CODE",{});var xVt=s(f5e);vHr=r(xVt,"model_type"),xVt.forEach(t),FHr=r(OA,` property of the config object (either
passed as an argument or loaded from `),m5e=n(OA,"CODE",{});var $Vt=s(m5e);THr=r($Vt,"pretrained_model_name_or_path"),$Vt.forEach(t),MHr=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g5e=n(OA,"CODE",{});var kVt=s(g5e);EHr=r(kVt,"pretrained_model_name_or_path"),kVt.forEach(t),CHr=r(OA,":"),OA.forEach(t),wHr=i(mi),ke=n(mi,"UL",{});var je=s(ke);T5=n(je,"LI",{});var gVe=s(T5);h5e=n(gVe,"STRONG",{});var SVt=s(h5e);AHr=r(SVt,"bart"),SVt.forEach(t),LHr=r(gVe," \u2014 "),voe=n(gVe,"A",{href:!0});var RVt=s(voe);yHr=r(RVt,"FlaxBartForConditionalGeneration"),RVt.forEach(t),xHr=r(gVe," (BART model)"),gVe.forEach(t),$Hr=i(je),M5=n(je,"LI",{});var hVe=s(M5);p5e=n(hVe,"STRONG",{});var PVt=s(p5e);kHr=r(PVt,"blenderbot"),PVt.forEach(t),SHr=r(hVe," \u2014 "),Foe=n(hVe,"A",{href:!0});var BVt=s(Foe);RHr=r(BVt,"FlaxBlenderbotForConditionalGeneration"),BVt.forEach(t),PHr=r(hVe," (Blenderbot model)"),hVe.forEach(t),BHr=i(je),E5=n(je,"LI",{});var pVe=s(E5);_5e=n(pVe,"STRONG",{});var IVt=s(_5e);IHr=r(IVt,"blenderbot-small"),IVt.forEach(t),NHr=r(pVe," \u2014 "),Toe=n(pVe,"A",{href:!0});var NVt=s(Toe);qHr=r(NVt,"FlaxBlenderbotSmallForConditionalGeneration"),NVt.forEach(t),jHr=r(pVe," (BlenderbotSmall model)"),pVe.forEach(t),DHr=i(je),C5=n(je,"LI",{});var _Ve=s(C5);u5e=n(_Ve,"STRONG",{});var qVt=s(u5e);GHr=r(qVt,"encoder-decoder"),qVt.forEach(t),OHr=r(_Ve," \u2014 "),Moe=n(_Ve,"A",{href:!0});var jVt=s(Moe);VHr=r(jVt,"FlaxEncoderDecoderModel"),jVt.forEach(t),XHr=r(_Ve," (Encoder decoder model)"),_Ve.forEach(t),zHr=i(je),w5=n(je,"LI",{});var uVe=s(w5);b5e=n(uVe,"STRONG",{});var DVt=s(b5e);WHr=r(DVt,"longt5"),DVt.forEach(t),QHr=r(uVe," \u2014 "),Eoe=n(uVe,"A",{href:!0});var GVt=s(Eoe);HHr=r(GVt,"FlaxLongT5ForConditionalGeneration"),GVt.forEach(t),UHr=r(uVe," (LongT5 model)"),uVe.forEach(t),JHr=i(je),A5=n(je,"LI",{});var bVe=s(A5);v5e=n(bVe,"STRONG",{});var OVt=s(v5e);YHr=r(OVt,"marian"),OVt.forEach(t),KHr=r(bVe," \u2014 "),Coe=n(bVe,"A",{href:!0});var VVt=s(Coe);ZHr=r(VVt,"FlaxMarianMTModel"),VVt.forEach(t),eUr=r(bVe," (Marian model)"),bVe.forEach(t),oUr=i(je),L5=n(je,"LI",{});var vVe=s(L5);F5e=n(vVe,"STRONG",{});var XVt=s(F5e);rUr=r(XVt,"mbart"),XVt.forEach(t),tUr=r(vVe," \u2014 "),woe=n(vVe,"A",{href:!0});var zVt=s(woe);aUr=r(zVt,"FlaxMBartForConditionalGeneration"),zVt.forEach(t),nUr=r(vVe," (mBART model)"),vVe.forEach(t),sUr=i(je),y5=n(je,"LI",{});var FVe=s(y5);T5e=n(FVe,"STRONG",{});var WVt=s(T5e);lUr=r(WVt,"mt5"),WVt.forEach(t),iUr=r(FVe," \u2014 "),Aoe=n(FVe,"A",{href:!0});var QVt=s(Aoe);dUr=r(QVt,"FlaxMT5ForConditionalGeneration"),QVt.forEach(t),cUr=r(FVe," (MT5 model)"),FVe.forEach(t),fUr=i(je),x5=n(je,"LI",{});var TVe=s(x5);M5e=n(TVe,"STRONG",{});var HVt=s(M5e);mUr=r(HVt,"pegasus"),HVt.forEach(t),gUr=r(TVe," \u2014 "),Loe=n(TVe,"A",{href:!0});var UVt=s(Loe);hUr=r(UVt,"FlaxPegasusForConditionalGeneration"),UVt.forEach(t),pUr=r(TVe," (Pegasus model)"),TVe.forEach(t),_Ur=i(je),$5=n(je,"LI",{});var MVe=s($5);E5e=n(MVe,"STRONG",{});var JVt=s(E5e);uUr=r(JVt,"t5"),JVt.forEach(t),bUr=r(MVe," \u2014 "),yoe=n(MVe,"A",{href:!0});var YVt=s(yoe);vUr=r(YVt,"FlaxT5ForConditionalGeneration"),YVt.forEach(t),FUr=r(MVe," (T5 model)"),MVe.forEach(t),je.forEach(t),TUr=i(mi),T(k5.$$.fragment,mi),mi.forEach(t),fi.forEach(t),eWe=i(f),cf=n(f,"H2",{class:!0});var dHe=s(cf);S5=n(dHe,"A",{id:!0,class:!0,href:!0});var KVt=s(S5);C5e=n(KVt,"SPAN",{});var ZVt=s(C5e);T(B$.$$.fragment,ZVt),ZVt.forEach(t),KVt.forEach(t),MUr=i(dHe),w5e=n(dHe,"SPAN",{});var eXt=s(w5e);EUr=r(eXt,"FlaxAutoModelForSequenceClassification"),eXt.forEach(t),dHe.forEach(t),oWe=i(f),Fr=n(f,"DIV",{class:!0});var gi=s(Fr);T(I$.$$.fragment,gi),CUr=i(gi),ff=n(gi,"P",{});var _ae=s(ff);wUr=r(_ae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),xoe=n(_ae,"A",{href:!0});var oXt=s(xoe);AUr=r(oXt,"from_pretrained()"),oXt.forEach(t),LUr=r(_ae," class method or the "),$oe=n(_ae,"A",{href:!0});var rXt=s($oe);yUr=r(rXt,"from_config()"),rXt.forEach(t),xUr=r(_ae,` class
method.`),_ae.forEach(t),$Ur=i(gi),N$=n(gi,"P",{});var cHe=s(N$);kUr=r(cHe,"This class cannot be instantiated directly using "),A5e=n(cHe,"CODE",{});var tXt=s(A5e);SUr=r(tXt,"__init__()"),tXt.forEach(t),RUr=r(cHe," (throws an error)."),cHe.forEach(t),PUr=i(gi),Yt=n(gi,"DIV",{class:!0});var VA=s(Yt);T(q$.$$.fragment,VA),BUr=i(VA),L5e=n(VA,"P",{});var aXt=s(L5e);IUr=r(aXt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),aXt.forEach(t),NUr=i(VA),mf=n(VA,"P",{});var uae=s(mf);qUr=r(uae,`Note:
Loading a model from its configuration file does `),y5e=n(uae,"STRONG",{});var nXt=s(y5e);jUr=r(nXt,"not"),nXt.forEach(t),DUr=r(uae,` load the model weights. It only affects the
model\u2019s configuration. Use `),koe=n(uae,"A",{href:!0});var sXt=s(koe);GUr=r(sXt,"from_pretrained()"),sXt.forEach(t),OUr=r(uae," to load the model weights."),uae.forEach(t),VUr=i(VA),T(R5.$$.fragment,VA),VA.forEach(t),XUr=i(gi),Hr=n(gi,"DIV",{class:!0});var hi=s(Hr);T(j$.$$.fragment,hi),zUr=i(hi),x5e=n(hi,"P",{});var lXt=s(x5e);WUr=r(lXt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),lXt.forEach(t),QUr=i(hi),An=n(hi,"P",{});var XA=s(An);HUr=r(XA,"The model class to instantiate is selected based on the "),$5e=n(XA,"CODE",{});var iXt=s($5e);UUr=r(iXt,"model_type"),iXt.forEach(t),JUr=r(XA,` property of the config object (either
passed as an argument or loaded from `),k5e=n(XA,"CODE",{});var dXt=s(k5e);YUr=r(dXt,"pretrained_model_name_or_path"),dXt.forEach(t),KUr=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S5e=n(XA,"CODE",{});var cXt=s(S5e);ZUr=r(cXt,"pretrained_model_name_or_path"),cXt.forEach(t),eJr=r(XA,":"),XA.forEach(t),oJr=i(hi),Se=n(hi,"UL",{});var De=s(Se);P5=n(De,"LI",{});var EVe=s(P5);R5e=n(EVe,"STRONG",{});var fXt=s(R5e);rJr=r(fXt,"albert"),fXt.forEach(t),tJr=r(EVe," \u2014 "),Soe=n(EVe,"A",{href:!0});var mXt=s(Soe);aJr=r(mXt,"FlaxAlbertForSequenceClassification"),mXt.forEach(t),nJr=r(EVe," (ALBERT model)"),EVe.forEach(t),sJr=i(De),B5=n(De,"LI",{});var CVe=s(B5);P5e=n(CVe,"STRONG",{});var gXt=s(P5e);lJr=r(gXt,"bart"),gXt.forEach(t),iJr=r(CVe," \u2014 "),Roe=n(CVe,"A",{href:!0});var hXt=s(Roe);dJr=r(hXt,"FlaxBartForSequenceClassification"),hXt.forEach(t),cJr=r(CVe," (BART model)"),CVe.forEach(t),fJr=i(De),I5=n(De,"LI",{});var wVe=s(I5);B5e=n(wVe,"STRONG",{});var pXt=s(B5e);mJr=r(pXt,"bert"),pXt.forEach(t),gJr=r(wVe," \u2014 "),Poe=n(wVe,"A",{href:!0});var _Xt=s(Poe);hJr=r(_Xt,"FlaxBertForSequenceClassification"),_Xt.forEach(t),pJr=r(wVe," (BERT model)"),wVe.forEach(t),_Jr=i(De),N5=n(De,"LI",{});var AVe=s(N5);I5e=n(AVe,"STRONG",{});var uXt=s(I5e);uJr=r(uXt,"big_bird"),uXt.forEach(t),bJr=r(AVe," \u2014 "),Boe=n(AVe,"A",{href:!0});var bXt=s(Boe);vJr=r(bXt,"FlaxBigBirdForSequenceClassification"),bXt.forEach(t),FJr=r(AVe," (BigBird model)"),AVe.forEach(t),TJr=i(De),q5=n(De,"LI",{});var LVe=s(q5);N5e=n(LVe,"STRONG",{});var vXt=s(N5e);MJr=r(vXt,"distilbert"),vXt.forEach(t),EJr=r(LVe," \u2014 "),Ioe=n(LVe,"A",{href:!0});var FXt=s(Ioe);CJr=r(FXt,"FlaxDistilBertForSequenceClassification"),FXt.forEach(t),wJr=r(LVe," (DistilBERT model)"),LVe.forEach(t),AJr=i(De),j5=n(De,"LI",{});var yVe=s(j5);q5e=n(yVe,"STRONG",{});var TXt=s(q5e);LJr=r(TXt,"electra"),TXt.forEach(t),yJr=r(yVe," \u2014 "),Noe=n(yVe,"A",{href:!0});var MXt=s(Noe);xJr=r(MXt,"FlaxElectraForSequenceClassification"),MXt.forEach(t),$Jr=r(yVe," (ELECTRA model)"),yVe.forEach(t),kJr=i(De),D5=n(De,"LI",{});var xVe=s(D5);j5e=n(xVe,"STRONG",{});var EXt=s(j5e);SJr=r(EXt,"mbart"),EXt.forEach(t),RJr=r(xVe," \u2014 "),qoe=n(xVe,"A",{href:!0});var CXt=s(qoe);PJr=r(CXt,"FlaxMBartForSequenceClassification"),CXt.forEach(t),BJr=r(xVe," (mBART model)"),xVe.forEach(t),IJr=i(De),G5=n(De,"LI",{});var $Ve=s(G5);D5e=n($Ve,"STRONG",{});var wXt=s(D5e);NJr=r(wXt,"roberta"),wXt.forEach(t),qJr=r($Ve," \u2014 "),joe=n($Ve,"A",{href:!0});var AXt=s(joe);jJr=r(AXt,"FlaxRobertaForSequenceClassification"),AXt.forEach(t),DJr=r($Ve," (RoBERTa model)"),$Ve.forEach(t),GJr=i(De),O5=n(De,"LI",{});var kVe=s(O5);G5e=n(kVe,"STRONG",{});var LXt=s(G5e);OJr=r(LXt,"roformer"),LXt.forEach(t),VJr=r(kVe," \u2014 "),Doe=n(kVe,"A",{href:!0});var yXt=s(Doe);XJr=r(yXt,"FlaxRoFormerForSequenceClassification"),yXt.forEach(t),zJr=r(kVe," (RoFormer model)"),kVe.forEach(t),WJr=i(De),V5=n(De,"LI",{});var SVe=s(V5);O5e=n(SVe,"STRONG",{});var xXt=s(O5e);QJr=r(xXt,"xlm-roberta"),xXt.forEach(t),HJr=r(SVe," \u2014 "),Goe=n(SVe,"A",{href:!0});var $Xt=s(Goe);UJr=r($Xt,"FlaxXLMRobertaForSequenceClassification"),$Xt.forEach(t),JJr=r(SVe," (XLM-RoBERTa model)"),SVe.forEach(t),De.forEach(t),YJr=i(hi),T(X5.$$.fragment,hi),hi.forEach(t),gi.forEach(t),rWe=i(f),gf=n(f,"H2",{class:!0});var fHe=s(gf);z5=n(fHe,"A",{id:!0,class:!0,href:!0});var kXt=s(z5);V5e=n(kXt,"SPAN",{});var SXt=s(V5e);T(D$.$$.fragment,SXt),SXt.forEach(t),kXt.forEach(t),KJr=i(fHe),X5e=n(fHe,"SPAN",{});var RXt=s(X5e);ZJr=r(RXt,"FlaxAutoModelForQuestionAnswering"),RXt.forEach(t),fHe.forEach(t),tWe=i(f),Tr=n(f,"DIV",{class:!0});var pi=s(Tr);T(G$.$$.fragment,pi),eYr=i(pi),hf=n(pi,"P",{});var bae=s(hf);oYr=r(bae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Ooe=n(bae,"A",{href:!0});var PXt=s(Ooe);rYr=r(PXt,"from_pretrained()"),PXt.forEach(t),tYr=r(bae," class method or the "),Voe=n(bae,"A",{href:!0});var BXt=s(Voe);aYr=r(BXt,"from_config()"),BXt.forEach(t),nYr=r(bae,` class
method.`),bae.forEach(t),sYr=i(pi),O$=n(pi,"P",{});var mHe=s(O$);lYr=r(mHe,"This class cannot be instantiated directly using "),z5e=n(mHe,"CODE",{});var IXt=s(z5e);iYr=r(IXt,"__init__()"),IXt.forEach(t),dYr=r(mHe," (throws an error)."),mHe.forEach(t),cYr=i(pi),Kt=n(pi,"DIV",{class:!0});var zA=s(Kt);T(V$.$$.fragment,zA),fYr=i(zA),W5e=n(zA,"P",{});var NXt=s(W5e);mYr=r(NXt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),NXt.forEach(t),gYr=i(zA),pf=n(zA,"P",{});var vae=s(pf);hYr=r(vae,`Note:
Loading a model from its configuration file does `),Q5e=n(vae,"STRONG",{});var qXt=s(Q5e);pYr=r(qXt,"not"),qXt.forEach(t),_Yr=r(vae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xoe=n(vae,"A",{href:!0});var jXt=s(Xoe);uYr=r(jXt,"from_pretrained()"),jXt.forEach(t),bYr=r(vae," to load the model weights."),vae.forEach(t),vYr=i(zA),T(W5.$$.fragment,zA),zA.forEach(t),FYr=i(pi),Ur=n(pi,"DIV",{class:!0});var _i=s(Ur);T(X$.$$.fragment,_i),TYr=i(_i),H5e=n(_i,"P",{});var DXt=s(H5e);MYr=r(DXt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),DXt.forEach(t),EYr=i(_i),Ln=n(_i,"P",{});var WA=s(Ln);CYr=r(WA,"The model class to instantiate is selected based on the "),U5e=n(WA,"CODE",{});var GXt=s(U5e);wYr=r(GXt,"model_type"),GXt.forEach(t),AYr=r(WA,` property of the config object (either
passed as an argument or loaded from `),J5e=n(WA,"CODE",{});var OXt=s(J5e);LYr=r(OXt,"pretrained_model_name_or_path"),OXt.forEach(t),yYr=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y5e=n(WA,"CODE",{});var VXt=s(Y5e);xYr=r(VXt,"pretrained_model_name_or_path"),VXt.forEach(t),$Yr=r(WA,":"),WA.forEach(t),kYr=i(_i),Re=n(_i,"UL",{});var Ge=s(Re);Q5=n(Ge,"LI",{});var RVe=s(Q5);K5e=n(RVe,"STRONG",{});var XXt=s(K5e);SYr=r(XXt,"albert"),XXt.forEach(t),RYr=r(RVe," \u2014 "),zoe=n(RVe,"A",{href:!0});var zXt=s(zoe);PYr=r(zXt,"FlaxAlbertForQuestionAnswering"),zXt.forEach(t),BYr=r(RVe," (ALBERT model)"),RVe.forEach(t),IYr=i(Ge),H5=n(Ge,"LI",{});var PVe=s(H5);Z5e=n(PVe,"STRONG",{});var WXt=s(Z5e);NYr=r(WXt,"bart"),WXt.forEach(t),qYr=r(PVe," \u2014 "),Woe=n(PVe,"A",{href:!0});var QXt=s(Woe);jYr=r(QXt,"FlaxBartForQuestionAnswering"),QXt.forEach(t),DYr=r(PVe," (BART model)"),PVe.forEach(t),GYr=i(Ge),U5=n(Ge,"LI",{});var BVe=s(U5);e0e=n(BVe,"STRONG",{});var HXt=s(e0e);OYr=r(HXt,"bert"),HXt.forEach(t),VYr=r(BVe," \u2014 "),Qoe=n(BVe,"A",{href:!0});var UXt=s(Qoe);XYr=r(UXt,"FlaxBertForQuestionAnswering"),UXt.forEach(t),zYr=r(BVe," (BERT model)"),BVe.forEach(t),WYr=i(Ge),J5=n(Ge,"LI",{});var IVe=s(J5);o0e=n(IVe,"STRONG",{});var JXt=s(o0e);QYr=r(JXt,"big_bird"),JXt.forEach(t),HYr=r(IVe," \u2014 "),Hoe=n(IVe,"A",{href:!0});var YXt=s(Hoe);UYr=r(YXt,"FlaxBigBirdForQuestionAnswering"),YXt.forEach(t),JYr=r(IVe," (BigBird model)"),IVe.forEach(t),YYr=i(Ge),Y5=n(Ge,"LI",{});var NVe=s(Y5);r0e=n(NVe,"STRONG",{});var KXt=s(r0e);KYr=r(KXt,"distilbert"),KXt.forEach(t),ZYr=r(NVe," \u2014 "),Uoe=n(NVe,"A",{href:!0});var ZXt=s(Uoe);eKr=r(ZXt,"FlaxDistilBertForQuestionAnswering"),ZXt.forEach(t),oKr=r(NVe," (DistilBERT model)"),NVe.forEach(t),rKr=i(Ge),K5=n(Ge,"LI",{});var qVe=s(K5);t0e=n(qVe,"STRONG",{});var ezt=s(t0e);tKr=r(ezt,"electra"),ezt.forEach(t),aKr=r(qVe," \u2014 "),Joe=n(qVe,"A",{href:!0});var ozt=s(Joe);nKr=r(ozt,"FlaxElectraForQuestionAnswering"),ozt.forEach(t),sKr=r(qVe," (ELECTRA model)"),qVe.forEach(t),lKr=i(Ge),Z5=n(Ge,"LI",{});var jVe=s(Z5);a0e=n(jVe,"STRONG",{});var rzt=s(a0e);iKr=r(rzt,"mbart"),rzt.forEach(t),dKr=r(jVe," \u2014 "),Yoe=n(jVe,"A",{href:!0});var tzt=s(Yoe);cKr=r(tzt,"FlaxMBartForQuestionAnswering"),tzt.forEach(t),fKr=r(jVe," (mBART model)"),jVe.forEach(t),mKr=i(Ge),e0=n(Ge,"LI",{});var DVe=s(e0);n0e=n(DVe,"STRONG",{});var azt=s(n0e);gKr=r(azt,"roberta"),azt.forEach(t),hKr=r(DVe," \u2014 "),Koe=n(DVe,"A",{href:!0});var nzt=s(Koe);pKr=r(nzt,"FlaxRobertaForQuestionAnswering"),nzt.forEach(t),_Kr=r(DVe," (RoBERTa model)"),DVe.forEach(t),uKr=i(Ge),o0=n(Ge,"LI",{});var GVe=s(o0);s0e=n(GVe,"STRONG",{});var szt=s(s0e);bKr=r(szt,"roformer"),szt.forEach(t),vKr=r(GVe," \u2014 "),Zoe=n(GVe,"A",{href:!0});var lzt=s(Zoe);FKr=r(lzt,"FlaxRoFormerForQuestionAnswering"),lzt.forEach(t),TKr=r(GVe," (RoFormer model)"),GVe.forEach(t),MKr=i(Ge),r0=n(Ge,"LI",{});var OVe=s(r0);l0e=n(OVe,"STRONG",{});var izt=s(l0e);EKr=r(izt,"xlm-roberta"),izt.forEach(t),CKr=r(OVe," \u2014 "),ere=n(OVe,"A",{href:!0});var dzt=s(ere);wKr=r(dzt,"FlaxXLMRobertaForQuestionAnswering"),dzt.forEach(t),AKr=r(OVe," (XLM-RoBERTa model)"),OVe.forEach(t),Ge.forEach(t),LKr=i(_i),T(t0.$$.fragment,_i),_i.forEach(t),pi.forEach(t),aWe=i(f),_f=n(f,"H2",{class:!0});var gHe=s(_f);a0=n(gHe,"A",{id:!0,class:!0,href:!0});var czt=s(a0);i0e=n(czt,"SPAN",{});var fzt=s(i0e);T(z$.$$.fragment,fzt),fzt.forEach(t),czt.forEach(t),yKr=i(gHe),d0e=n(gHe,"SPAN",{});var mzt=s(d0e);xKr=r(mzt,"FlaxAutoModelForTokenClassification"),mzt.forEach(t),gHe.forEach(t),nWe=i(f),Mr=n(f,"DIV",{class:!0});var ui=s(Mr);T(W$.$$.fragment,ui),$Kr=i(ui),uf=n(ui,"P",{});var Fae=s(uf);kKr=r(Fae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ore=n(Fae,"A",{href:!0});var gzt=s(ore);SKr=r(gzt,"from_pretrained()"),gzt.forEach(t),RKr=r(Fae," class method or the "),rre=n(Fae,"A",{href:!0});var hzt=s(rre);PKr=r(hzt,"from_config()"),hzt.forEach(t),BKr=r(Fae,` class
method.`),Fae.forEach(t),IKr=i(ui),Q$=n(ui,"P",{});var hHe=s(Q$);NKr=r(hHe,"This class cannot be instantiated directly using "),c0e=n(hHe,"CODE",{});var pzt=s(c0e);qKr=r(pzt,"__init__()"),pzt.forEach(t),jKr=r(hHe," (throws an error)."),hHe.forEach(t),DKr=i(ui),Zt=n(ui,"DIV",{class:!0});var QA=s(Zt);T(H$.$$.fragment,QA),GKr=i(QA),f0e=n(QA,"P",{});var _zt=s(f0e);OKr=r(_zt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),_zt.forEach(t),VKr=i(QA),bf=n(QA,"P",{});var Tae=s(bf);XKr=r(Tae,`Note:
Loading a model from its configuration file does `),m0e=n(Tae,"STRONG",{});var uzt=s(m0e);zKr=r(uzt,"not"),uzt.forEach(t),WKr=r(Tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),tre=n(Tae,"A",{href:!0});var bzt=s(tre);QKr=r(bzt,"from_pretrained()"),bzt.forEach(t),HKr=r(Tae," to load the model weights."),Tae.forEach(t),UKr=i(QA),T(n0.$$.fragment,QA),QA.forEach(t),JKr=i(ui),Jr=n(ui,"DIV",{class:!0});var bi=s(Jr);T(U$.$$.fragment,bi),YKr=i(bi),g0e=n(bi,"P",{});var vzt=s(g0e);KKr=r(vzt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),vzt.forEach(t),ZKr=i(bi),yn=n(bi,"P",{});var HA=s(yn);eZr=r(HA,"The model class to instantiate is selected based on the "),h0e=n(HA,"CODE",{});var Fzt=s(h0e);oZr=r(Fzt,"model_type"),Fzt.forEach(t),rZr=r(HA,` property of the config object (either
passed as an argument or loaded from `),p0e=n(HA,"CODE",{});var Tzt=s(p0e);tZr=r(Tzt,"pretrained_model_name_or_path"),Tzt.forEach(t),aZr=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_0e=n(HA,"CODE",{});var Mzt=s(_0e);nZr=r(Mzt,"pretrained_model_name_or_path"),Mzt.forEach(t),sZr=r(HA,":"),HA.forEach(t),lZr=i(bi),Ve=n(bi,"UL",{});var To=s(Ve);s0=n(To,"LI",{});var VVe=s(s0);u0e=n(VVe,"STRONG",{});var Ezt=s(u0e);iZr=r(Ezt,"albert"),Ezt.forEach(t),dZr=r(VVe," \u2014 "),are=n(VVe,"A",{href:!0});var Czt=s(are);cZr=r(Czt,"FlaxAlbertForTokenClassification"),Czt.forEach(t),fZr=r(VVe," (ALBERT model)"),VVe.forEach(t),mZr=i(To),l0=n(To,"LI",{});var XVe=s(l0);b0e=n(XVe,"STRONG",{});var wzt=s(b0e);gZr=r(wzt,"bert"),wzt.forEach(t),hZr=r(XVe," \u2014 "),nre=n(XVe,"A",{href:!0});var Azt=s(nre);pZr=r(Azt,"FlaxBertForTokenClassification"),Azt.forEach(t),_Zr=r(XVe," (BERT model)"),XVe.forEach(t),uZr=i(To),i0=n(To,"LI",{});var zVe=s(i0);v0e=n(zVe,"STRONG",{});var Lzt=s(v0e);bZr=r(Lzt,"big_bird"),Lzt.forEach(t),vZr=r(zVe," \u2014 "),sre=n(zVe,"A",{href:!0});var yzt=s(sre);FZr=r(yzt,"FlaxBigBirdForTokenClassification"),yzt.forEach(t),TZr=r(zVe," (BigBird model)"),zVe.forEach(t),MZr=i(To),d0=n(To,"LI",{});var WVe=s(d0);F0e=n(WVe,"STRONG",{});var xzt=s(F0e);EZr=r(xzt,"distilbert"),xzt.forEach(t),CZr=r(WVe," \u2014 "),lre=n(WVe,"A",{href:!0});var $zt=s(lre);wZr=r($zt,"FlaxDistilBertForTokenClassification"),$zt.forEach(t),AZr=r(WVe," (DistilBERT model)"),WVe.forEach(t),LZr=i(To),c0=n(To,"LI",{});var QVe=s(c0);T0e=n(QVe,"STRONG",{});var kzt=s(T0e);yZr=r(kzt,"electra"),kzt.forEach(t),xZr=r(QVe," \u2014 "),ire=n(QVe,"A",{href:!0});var Szt=s(ire);$Zr=r(Szt,"FlaxElectraForTokenClassification"),Szt.forEach(t),kZr=r(QVe," (ELECTRA model)"),QVe.forEach(t),SZr=i(To),f0=n(To,"LI",{});var HVe=s(f0);M0e=n(HVe,"STRONG",{});var Rzt=s(M0e);RZr=r(Rzt,"roberta"),Rzt.forEach(t),PZr=r(HVe," \u2014 "),dre=n(HVe,"A",{href:!0});var Pzt=s(dre);BZr=r(Pzt,"FlaxRobertaForTokenClassification"),Pzt.forEach(t),IZr=r(HVe," (RoBERTa model)"),HVe.forEach(t),NZr=i(To),m0=n(To,"LI",{});var UVe=s(m0);E0e=n(UVe,"STRONG",{});var Bzt=s(E0e);qZr=r(Bzt,"roformer"),Bzt.forEach(t),jZr=r(UVe," \u2014 "),cre=n(UVe,"A",{href:!0});var Izt=s(cre);DZr=r(Izt,"FlaxRoFormerForTokenClassification"),Izt.forEach(t),GZr=r(UVe," (RoFormer model)"),UVe.forEach(t),OZr=i(To),g0=n(To,"LI",{});var JVe=s(g0);C0e=n(JVe,"STRONG",{});var Nzt=s(C0e);VZr=r(Nzt,"xlm-roberta"),Nzt.forEach(t),XZr=r(JVe," \u2014 "),fre=n(JVe,"A",{href:!0});var qzt=s(fre);zZr=r(qzt,"FlaxXLMRobertaForTokenClassification"),qzt.forEach(t),WZr=r(JVe," (XLM-RoBERTa model)"),JVe.forEach(t),To.forEach(t),QZr=i(bi),T(h0.$$.fragment,bi),bi.forEach(t),ui.forEach(t),sWe=i(f),vf=n(f,"H2",{class:!0});var pHe=s(vf);p0=n(pHe,"A",{id:!0,class:!0,href:!0});var jzt=s(p0);w0e=n(jzt,"SPAN",{});var Dzt=s(w0e);T(J$.$$.fragment,Dzt),Dzt.forEach(t),jzt.forEach(t),HZr=i(pHe),A0e=n(pHe,"SPAN",{});var Gzt=s(A0e);UZr=r(Gzt,"FlaxAutoModelForMultipleChoice"),Gzt.forEach(t),pHe.forEach(t),lWe=i(f),Er=n(f,"DIV",{class:!0});var vi=s(Er);T(Y$.$$.fragment,vi),JZr=i(vi),Ff=n(vi,"P",{});var Mae=s(Ff);YZr=r(Mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),mre=n(Mae,"A",{href:!0});var Ozt=s(mre);KZr=r(Ozt,"from_pretrained()"),Ozt.forEach(t),ZZr=r(Mae," class method or the "),gre=n(Mae,"A",{href:!0});var Vzt=s(gre);eet=r(Vzt,"from_config()"),Vzt.forEach(t),oet=r(Mae,` class
method.`),Mae.forEach(t),ret=i(vi),K$=n(vi,"P",{});var _He=s(K$);tet=r(_He,"This class cannot be instantiated directly using "),L0e=n(_He,"CODE",{});var Xzt=s(L0e);aet=r(Xzt,"__init__()"),Xzt.forEach(t),net=r(_He," (throws an error)."),_He.forEach(t),set=i(vi),ea=n(vi,"DIV",{class:!0});var UA=s(ea);T(Z$.$$.fragment,UA),iet=i(UA),y0e=n(UA,"P",{});var zzt=s(y0e);det=r(zzt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),zzt.forEach(t),cet=i(UA),Tf=n(UA,"P",{});var Eae=s(Tf);fet=r(Eae,`Note:
Loading a model from its configuration file does `),x0e=n(Eae,"STRONG",{});var Wzt=s(x0e);met=r(Wzt,"not"),Wzt.forEach(t),get=r(Eae,` load the model weights. It only affects the
model\u2019s configuration. Use `),hre=n(Eae,"A",{href:!0});var Qzt=s(hre);het=r(Qzt,"from_pretrained()"),Qzt.forEach(t),pet=r(Eae," to load the model weights."),Eae.forEach(t),_et=i(UA),T(_0.$$.fragment,UA),UA.forEach(t),uet=i(vi),Yr=n(vi,"DIV",{class:!0});var Fi=s(Yr);T(ek.$$.fragment,Fi),bet=i(Fi),$0e=n(Fi,"P",{});var Hzt=s($0e);vet=r(Hzt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Hzt.forEach(t),Fet=i(Fi),xn=n(Fi,"P",{});var JA=s(xn);Tet=r(JA,"The model class to instantiate is selected based on the "),k0e=n(JA,"CODE",{});var Uzt=s(k0e);Met=r(Uzt,"model_type"),Uzt.forEach(t),Eet=r(JA,` property of the config object (either
passed as an argument or loaded from `),S0e=n(JA,"CODE",{});var Jzt=s(S0e);Cet=r(Jzt,"pretrained_model_name_or_path"),Jzt.forEach(t),wet=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R0e=n(JA,"CODE",{});var Yzt=s(R0e);Aet=r(Yzt,"pretrained_model_name_or_path"),Yzt.forEach(t),Let=r(JA,":"),JA.forEach(t),yet=i(Fi),Xe=n(Fi,"UL",{});var Mo=s(Xe);u0=n(Mo,"LI",{});var YVe=s(u0);P0e=n(YVe,"STRONG",{});var Kzt=s(P0e);xet=r(Kzt,"albert"),Kzt.forEach(t),$et=r(YVe," \u2014 "),pre=n(YVe,"A",{href:!0});var Zzt=s(pre);ket=r(Zzt,"FlaxAlbertForMultipleChoice"),Zzt.forEach(t),Set=r(YVe," (ALBERT model)"),YVe.forEach(t),Ret=i(Mo),b0=n(Mo,"LI",{});var KVe=s(b0);B0e=n(KVe,"STRONG",{});var eWt=s(B0e);Pet=r(eWt,"bert"),eWt.forEach(t),Bet=r(KVe," \u2014 "),_re=n(KVe,"A",{href:!0});var oWt=s(_re);Iet=r(oWt,"FlaxBertForMultipleChoice"),oWt.forEach(t),Net=r(KVe," (BERT model)"),KVe.forEach(t),qet=i(Mo),v0=n(Mo,"LI",{});var ZVe=s(v0);I0e=n(ZVe,"STRONG",{});var rWt=s(I0e);jet=r(rWt,"big_bird"),rWt.forEach(t),Det=r(ZVe," \u2014 "),ure=n(ZVe,"A",{href:!0});var tWt=s(ure);Get=r(tWt,"FlaxBigBirdForMultipleChoice"),tWt.forEach(t),Oet=r(ZVe," (BigBird model)"),ZVe.forEach(t),Vet=i(Mo),F0=n(Mo,"LI",{});var eXe=s(F0);N0e=n(eXe,"STRONG",{});var aWt=s(N0e);Xet=r(aWt,"distilbert"),aWt.forEach(t),zet=r(eXe," \u2014 "),bre=n(eXe,"A",{href:!0});var nWt=s(bre);Wet=r(nWt,"FlaxDistilBertForMultipleChoice"),nWt.forEach(t),Qet=r(eXe," (DistilBERT model)"),eXe.forEach(t),Het=i(Mo),T0=n(Mo,"LI",{});var oXe=s(T0);q0e=n(oXe,"STRONG",{});var sWt=s(q0e);Uet=r(sWt,"electra"),sWt.forEach(t),Jet=r(oXe," \u2014 "),vre=n(oXe,"A",{href:!0});var lWt=s(vre);Yet=r(lWt,"FlaxElectraForMultipleChoice"),lWt.forEach(t),Ket=r(oXe," (ELECTRA model)"),oXe.forEach(t),Zet=i(Mo),M0=n(Mo,"LI",{});var rXe=s(M0);j0e=n(rXe,"STRONG",{});var iWt=s(j0e);eot=r(iWt,"roberta"),iWt.forEach(t),oot=r(rXe," \u2014 "),Fre=n(rXe,"A",{href:!0});var dWt=s(Fre);rot=r(dWt,"FlaxRobertaForMultipleChoice"),dWt.forEach(t),tot=r(rXe," (RoBERTa model)"),rXe.forEach(t),aot=i(Mo),E0=n(Mo,"LI",{});var tXe=s(E0);D0e=n(tXe,"STRONG",{});var cWt=s(D0e);not=r(cWt,"roformer"),cWt.forEach(t),sot=r(tXe," \u2014 "),Tre=n(tXe,"A",{href:!0});var fWt=s(Tre);lot=r(fWt,"FlaxRoFormerForMultipleChoice"),fWt.forEach(t),iot=r(tXe," (RoFormer model)"),tXe.forEach(t),dot=i(Mo),C0=n(Mo,"LI",{});var aXe=s(C0);G0e=n(aXe,"STRONG",{});var mWt=s(G0e);cot=r(mWt,"xlm-roberta"),mWt.forEach(t),fot=r(aXe," \u2014 "),Mre=n(aXe,"A",{href:!0});var gWt=s(Mre);mot=r(gWt,"FlaxXLMRobertaForMultipleChoice"),gWt.forEach(t),got=r(aXe," (XLM-RoBERTa model)"),aXe.forEach(t),Mo.forEach(t),hot=i(Fi),T(w0.$$.fragment,Fi),Fi.forEach(t),vi.forEach(t),iWe=i(f),Mf=n(f,"H2",{class:!0});var uHe=s(Mf);A0=n(uHe,"A",{id:!0,class:!0,href:!0});var hWt=s(A0);O0e=n(hWt,"SPAN",{});var pWt=s(O0e);T(ok.$$.fragment,pWt),pWt.forEach(t),hWt.forEach(t),pot=i(uHe),V0e=n(uHe,"SPAN",{});var _Wt=s(V0e);_ot=r(_Wt,"FlaxAutoModelForNextSentencePrediction"),_Wt.forEach(t),uHe.forEach(t),dWe=i(f),Cr=n(f,"DIV",{class:!0});var Ti=s(Cr);T(rk.$$.fragment,Ti),uot=i(Ti),Ef=n(Ti,"P",{});var Cae=s(Ef);bot=r(Cae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Ere=n(Cae,"A",{href:!0});var uWt=s(Ere);vot=r(uWt,"from_pretrained()"),uWt.forEach(t),Fot=r(Cae," class method or the "),Cre=n(Cae,"A",{href:!0});var bWt=s(Cre);Tot=r(bWt,"from_config()"),bWt.forEach(t),Mot=r(Cae,` class
method.`),Cae.forEach(t),Eot=i(Ti),tk=n(Ti,"P",{});var bHe=s(tk);Cot=r(bHe,"This class cannot be instantiated directly using "),X0e=n(bHe,"CODE",{});var vWt=s(X0e);wot=r(vWt,"__init__()"),vWt.forEach(t),Aot=r(bHe," (throws an error)."),bHe.forEach(t),Lot=i(Ti),oa=n(Ti,"DIV",{class:!0});var YA=s(oa);T(ak.$$.fragment,YA),yot=i(YA),z0e=n(YA,"P",{});var FWt=s(z0e);xot=r(FWt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),FWt.forEach(t),$ot=i(YA),Cf=n(YA,"P",{});var wae=s(Cf);kot=r(wae,`Note:
Loading a model from its configuration file does `),W0e=n(wae,"STRONG",{});var TWt=s(W0e);Sot=r(TWt,"not"),TWt.forEach(t),Rot=r(wae,` load the model weights. It only affects the
model\u2019s configuration. Use `),wre=n(wae,"A",{href:!0});var MWt=s(wre);Pot=r(MWt,"from_pretrained()"),MWt.forEach(t),Bot=r(wae," to load the model weights."),wae.forEach(t),Iot=i(YA),T(L0.$$.fragment,YA),YA.forEach(t),Not=i(Ti),Kr=n(Ti,"DIV",{class:!0});var Mi=s(Kr);T(nk.$$.fragment,Mi),qot=i(Mi),Q0e=n(Mi,"P",{});var EWt=s(Q0e);jot=r(EWt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),EWt.forEach(t),Dot=i(Mi),$n=n(Mi,"P",{});var KA=s($n);Got=r(KA,"The model class to instantiate is selected based on the "),H0e=n(KA,"CODE",{});var CWt=s(H0e);Oot=r(CWt,"model_type"),CWt.forEach(t),Vot=r(KA,` property of the config object (either
passed as an argument or loaded from `),U0e=n(KA,"CODE",{});var wWt=s(U0e);Xot=r(wWt,"pretrained_model_name_or_path"),wWt.forEach(t),zot=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J0e=n(KA,"CODE",{});var AWt=s(J0e);Wot=r(AWt,"pretrained_model_name_or_path"),AWt.forEach(t),Qot=r(KA,":"),KA.forEach(t),Hot=i(Mi),Y0e=n(Mi,"UL",{});var LWt=s(Y0e);y0=n(LWt,"LI",{});var nXe=s(y0);K0e=n(nXe,"STRONG",{});var yWt=s(K0e);Uot=r(yWt,"bert"),yWt.forEach(t),Jot=r(nXe," \u2014 "),Are=n(nXe,"A",{href:!0});var xWt=s(Are);Yot=r(xWt,"FlaxBertForNextSentencePrediction"),xWt.forEach(t),Kot=r(nXe," (BERT model)"),nXe.forEach(t),LWt.forEach(t),Zot=i(Mi),T(x0.$$.fragment,Mi),Mi.forEach(t),Ti.forEach(t),cWe=i(f),wf=n(f,"H2",{class:!0});var vHe=s(wf);$0=n(vHe,"A",{id:!0,class:!0,href:!0});var $Wt=s($0);Z0e=n($Wt,"SPAN",{});var kWt=s(Z0e);T(sk.$$.fragment,kWt),kWt.forEach(t),$Wt.forEach(t),ert=i(vHe),ewe=n(vHe,"SPAN",{});var SWt=s(ewe);ort=r(SWt,"FlaxAutoModelForImageClassification"),SWt.forEach(t),vHe.forEach(t),fWe=i(f),wr=n(f,"DIV",{class:!0});var Ei=s(wr);T(lk.$$.fragment,Ei),rrt=i(Ei),Af=n(Ei,"P",{});var Aae=s(Af);trt=r(Aae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Lre=n(Aae,"A",{href:!0});var RWt=s(Lre);art=r(RWt,"from_pretrained()"),RWt.forEach(t),nrt=r(Aae," class method or the "),yre=n(Aae,"A",{href:!0});var PWt=s(yre);srt=r(PWt,"from_config()"),PWt.forEach(t),lrt=r(Aae,` class
method.`),Aae.forEach(t),irt=i(Ei),ik=n(Ei,"P",{});var FHe=s(ik);drt=r(FHe,"This class cannot be instantiated directly using "),owe=n(FHe,"CODE",{});var BWt=s(owe);crt=r(BWt,"__init__()"),BWt.forEach(t),frt=r(FHe," (throws an error)."),FHe.forEach(t),mrt=i(Ei),ra=n(Ei,"DIV",{class:!0});var ZA=s(ra);T(dk.$$.fragment,ZA),grt=i(ZA),rwe=n(ZA,"P",{});var IWt=s(rwe);hrt=r(IWt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),IWt.forEach(t),prt=i(ZA),Lf=n(ZA,"P",{});var Lae=s(Lf);_rt=r(Lae,`Note:
Loading a model from its configuration file does `),twe=n(Lae,"STRONG",{});var NWt=s(twe);urt=r(NWt,"not"),NWt.forEach(t),brt=r(Lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),xre=n(Lae,"A",{href:!0});var qWt=s(xre);vrt=r(qWt,"from_pretrained()"),qWt.forEach(t),Frt=r(Lae," to load the model weights."),Lae.forEach(t),Trt=i(ZA),T(k0.$$.fragment,ZA),ZA.forEach(t),Mrt=i(Ei),Zr=n(Ei,"DIV",{class:!0});var Ci=s(Zr);T(ck.$$.fragment,Ci),Ert=i(Ci),awe=n(Ci,"P",{});var jWt=s(awe);Crt=r(jWt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),jWt.forEach(t),wrt=i(Ci),kn=n(Ci,"P",{});var e6=s(kn);Art=r(e6,"The model class to instantiate is selected based on the "),nwe=n(e6,"CODE",{});var DWt=s(nwe);Lrt=r(DWt,"model_type"),DWt.forEach(t),yrt=r(e6,` property of the config object (either
passed as an argument or loaded from `),swe=n(e6,"CODE",{});var GWt=s(swe);xrt=r(GWt,"pretrained_model_name_or_path"),GWt.forEach(t),$rt=r(e6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lwe=n(e6,"CODE",{});var OWt=s(lwe);krt=r(OWt,"pretrained_model_name_or_path"),OWt.forEach(t),Srt=r(e6,":"),e6.forEach(t),Rrt=i(Ci),fk=n(Ci,"UL",{});var THe=s(fk);S0=n(THe,"LI",{});var sXe=s(S0);iwe=n(sXe,"STRONG",{});var VWt=s(iwe);Prt=r(VWt,"beit"),VWt.forEach(t),Brt=r(sXe," \u2014 "),$re=n(sXe,"A",{href:!0});var XWt=s($re);Irt=r(XWt,"FlaxBeitForImageClassification"),XWt.forEach(t),Nrt=r(sXe," (BEiT model)"),sXe.forEach(t),qrt=i(THe),R0=n(THe,"LI",{});var lXe=s(R0);dwe=n(lXe,"STRONG",{});var zWt=s(dwe);jrt=r(zWt,"vit"),zWt.forEach(t),Drt=r(lXe," \u2014 "),kre=n(lXe,"A",{href:!0});var WWt=s(kre);Grt=r(WWt,"FlaxViTForImageClassification"),WWt.forEach(t),Ort=r(lXe," (ViT model)"),lXe.forEach(t),THe.forEach(t),Vrt=i(Ci),T(P0.$$.fragment,Ci),Ci.forEach(t),Ei.forEach(t),mWe=i(f),yf=n(f,"H2",{class:!0});var MHe=s(yf);B0=n(MHe,"A",{id:!0,class:!0,href:!0});var QWt=s(B0);cwe=n(QWt,"SPAN",{});var HWt=s(cwe);T(mk.$$.fragment,HWt),HWt.forEach(t),QWt.forEach(t),Xrt=i(MHe),fwe=n(MHe,"SPAN",{});var UWt=s(fwe);zrt=r(UWt,"FlaxAutoModelForVision2Seq"),UWt.forEach(t),MHe.forEach(t),gWe=i(f),Ar=n(f,"DIV",{class:!0});var wi=s(Ar);T(gk.$$.fragment,wi),Wrt=i(wi),xf=n(wi,"P",{});var yae=s(xf);Qrt=r(yae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Sre=n(yae,"A",{href:!0});var JWt=s(Sre);Hrt=r(JWt,"from_pretrained()"),JWt.forEach(t),Urt=r(yae," class method or the "),Rre=n(yae,"A",{href:!0});var YWt=s(Rre);Jrt=r(YWt,"from_config()"),YWt.forEach(t),Yrt=r(yae,` class
method.`),yae.forEach(t),Krt=i(wi),hk=n(wi,"P",{});var EHe=s(hk);Zrt=r(EHe,"This class cannot be instantiated directly using "),mwe=n(EHe,"CODE",{});var KWt=s(mwe);ett=r(KWt,"__init__()"),KWt.forEach(t),ott=r(EHe," (throws an error)."),EHe.forEach(t),rtt=i(wi),ta=n(wi,"DIV",{class:!0});var o6=s(ta);T(pk.$$.fragment,o6),ttt=i(o6),gwe=n(o6,"P",{});var ZWt=s(gwe);att=r(ZWt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ZWt.forEach(t),ntt=i(o6),$f=n(o6,"P",{});var xae=s($f);stt=r(xae,`Note:
Loading a model from its configuration file does `),hwe=n(xae,"STRONG",{});var eQt=s(hwe);ltt=r(eQt,"not"),eQt.forEach(t),itt=r(xae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pre=n(xae,"A",{href:!0});var oQt=s(Pre);dtt=r(oQt,"from_pretrained()"),oQt.forEach(t),ctt=r(xae," to load the model weights."),xae.forEach(t),ftt=i(o6),T(I0.$$.fragment,o6),o6.forEach(t),mtt=i(wi),et=n(wi,"DIV",{class:!0});var Ai=s(et);T(_k.$$.fragment,Ai),gtt=i(Ai),pwe=n(Ai,"P",{});var rQt=s(pwe);htt=r(rQt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),rQt.forEach(t),ptt=i(Ai),Sn=n(Ai,"P",{});var r6=s(Sn);_tt=r(r6,"The model class to instantiate is selected based on the "),_we=n(r6,"CODE",{});var tQt=s(_we);utt=r(tQt,"model_type"),tQt.forEach(t),btt=r(r6,` property of the config object (either
passed as an argument or loaded from `),uwe=n(r6,"CODE",{});var aQt=s(uwe);vtt=r(aQt,"pretrained_model_name_or_path"),aQt.forEach(t),Ftt=r(r6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bwe=n(r6,"CODE",{});var nQt=s(bwe);Ttt=r(nQt,"pretrained_model_name_or_path"),nQt.forEach(t),Mtt=r(r6,":"),r6.forEach(t),Ett=i(Ai),vwe=n(Ai,"UL",{});var sQt=s(vwe);N0=n(sQt,"LI",{});var iXe=s(N0);Fwe=n(iXe,"STRONG",{});var lQt=s(Fwe);Ctt=r(lQt,"vision-encoder-decoder"),lQt.forEach(t),wtt=r(iXe," \u2014 "),Bre=n(iXe,"A",{href:!0});var iQt=s(Bre);Att=r(iQt,"FlaxVisionEncoderDecoderModel"),iQt.forEach(t),Ltt=r(iXe," (Vision Encoder decoder model)"),iXe.forEach(t),sQt.forEach(t),ytt=i(Ai),T(q0.$$.fragment,Ai),Ai.forEach(t),wi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(hUt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Pn,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.AutoConfig"),c(In,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.AutoModel"),c(Nn,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.AutoTokenizer"),c(Ri,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertModel"),c(qf,"id","extending-the-auto-classes"),c(qf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qf,"href","#extending-the-auto-classes"),c(Pi,"class","relative group"),c(Df,"id","transformers.AutoConfig"),c(Df,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Df,"href","#transformers.AutoConfig"),c(Bi,"class","relative group"),c(XS,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(zS,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertConfig"),c(WS,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartConfig"),c(QS,"href","/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitConfig"),c(HS,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertConfig"),c(US,"href","/docs/transformers/pr_17938/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(JS,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdConfig"),c(YS,"href","/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(KS,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(ZS,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(eR,"href","/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomConfig"),c(oR,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertConfig"),c(rR,"href","/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineConfig"),c(tR,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPConfig"),c(aR,"href","/docs/transformers/pr_17938/en/model_doc/codegen#transformers.CodeGenConfig"),c(nR,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertConfig"),c(sR,"href","/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextConfig"),c(lR,"href","/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLConfig"),c(iR,"href","/docs/transformers/pr_17938/en/model_doc/cvt#transformers.CvtConfig"),c(dR,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(cR,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(fR,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(mR,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaConfig"),c(gR,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(hR,"href","/docs/transformers/pr_17938/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(pR,"href","/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTConfig"),c(_R,"href","/docs/transformers/pr_17938/en/model_doc/detr#transformers.DetrConfig"),c(uR,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertConfig"),c(bR,"href","/docs/transformers/pr_17938/en/model_doc/dpr#transformers.DPRConfig"),c(vR,"href","/docs/transformers/pr_17938/en/model_doc/dpt#transformers.DPTConfig"),c(FR,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraConfig"),c(TR,"href","/docs/transformers/pr_17938/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(MR,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertConfig"),c(ER,"href","/docs/transformers/pr_17938/en/model_doc/flava#transformers.FlavaConfig"),c(CR,"href","/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetConfig"),c(wR,"href","/docs/transformers/pr_17938/en/model_doc/fsmt#transformers.FSMTConfig"),c(AR,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelConfig"),c(LR,"href","/docs/transformers/pr_17938/en/model_doc/glpn#transformers.GLPNConfig"),c(yR,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Config"),c(xR,"href","/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c($R,"href","/docs/transformers/pr_17938/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(kR,"href","/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJConfig"),c(SR,"href","/docs/transformers/pr_17938/en/model_doc/groupvit#transformers.GroupViTConfig"),c(RR,"href","/docs/transformers/pr_17938/en/model_doc/hubert#transformers.HubertConfig"),c(PR,"href","/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertConfig"),c(BR,"href","/docs/transformers/pr_17938/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(IR,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(NR,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(qR,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(jR,"href","/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDConfig"),c(DR,"href","/docs/transformers/pr_17938/en/model_doc/levit#transformers.LevitConfig"),c(GR,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerConfig"),c(OR,"href","/docs/transformers/pr_17938/en/model_doc/longt5#transformers.LongT5Config"),c(VR,"href","/docs/transformers/pr_17938/en/model_doc/luke#transformers.LukeConfig"),c(XR,"href","/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertConfig"),c(zR,"href","/docs/transformers/pr_17938/en/model_doc/m2m_100#transformers.M2M100Config"),c(WR,"href","/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianConfig"),c(QR,"href","/docs/transformers/pr_17938/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(HR,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartConfig"),c(UR,"href","/docs/transformers/pr_17938/en/model_doc/mctct#transformers.MCTCTConfig"),c(JR,"href","/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(YR,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(KR,"href","/docs/transformers/pr_17938/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(ZR,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetConfig"),c(eP,"href","/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5Config"),c(oP,"href","/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpConfig"),c(rP,"href","/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaConfig"),c(tP,"href","/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(aP,"href","/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(nP,"href","/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTConfig"),c(sP,"href","/docs/transformers/pr_17938/en/model_doc/owlvit#transformers.OwlViTConfig"),c(lP,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusConfig"),c(iP,"href","/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverConfig"),c(dP,"href","/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartConfig"),c(cP,"href","/docs/transformers/pr_17938/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(fP,"href","/docs/transformers/pr_17938/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(mP,"href","/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(gP,"href","/docs/transformers/pr_17938/en/model_doc/rag#transformers.RagConfig"),c(hP,"href","/docs/transformers/pr_17938/en/model_doc/realm#transformers.RealmConfig"),c(pP,"href","/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerConfig"),c(_P,"href","/docs/transformers/pr_17938/en/model_doc/regnet#transformers.RegNetConfig"),c(uP,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertConfig"),c(bP,"href","/docs/transformers/pr_17938/en/model_doc/resnet#transformers.ResNetConfig"),c(vP,"href","/docs/transformers/pr_17938/en/model_doc/retribert#transformers.RetriBertConfig"),c(FP,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaConfig"),c(TP,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerConfig"),c(MP,"href","/docs/transformers/pr_17938/en/model_doc/segformer#transformers.SegformerConfig"),c(EP,"href","/docs/transformers/pr_17938/en/model_doc/sew#transformers.SEWConfig"),c(CP,"href","/docs/transformers/pr_17938/en/model_doc/sew-d#transformers.SEWDConfig"),c(wP,"href","/docs/transformers/pr_17938/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(AP,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(LP,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(yP,"href","/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterConfig"),c(xP,"href","/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c($P,"href","/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinConfig"),c(kP,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Config"),c(SP,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasConfig"),c(RP,"href","/docs/transformers/pr_17938/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(PP,"href","/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(BP,"href","/docs/transformers/pr_17938/en/model_doc/trocr#transformers.TrOCRConfig"),c(IP,"href","/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(NP,"href","/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(qP,"href","/docs/transformers/pr_17938/en/model_doc/van#transformers.VanConfig"),c(jP,"href","/docs/transformers/pr_17938/en/model_doc/vilt#transformers.ViltConfig"),c(DP,"href","/docs/transformers/pr_17938/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(GP,"href","/docs/transformers/pr_17938/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(OP,"href","/docs/transformers/pr_17938/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(VP,"href","/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTConfig"),c(XP,"href","/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(zP,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(WP,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(QP,"href","/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMConfig"),c(HP,"href","/docs/transformers/pr_17938/en/model_doc/xglm#transformers.XGLMConfig"),c(UP,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMConfig"),c(JP,"href","/docs/transformers/pr_17938/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(YP,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(KP,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(ZP,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetConfig"),c(eB,"href","/docs/transformers/pr_17938/en/model_doc/yolos#transformers.YolosConfig"),c(oB,"href","/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoConfig"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eh,"id","transformers.AutoTokenizer"),c(eh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eh,"href","#transformers.AutoTokenizer"),c(Ni,"class","relative group"),c(rB,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(tB,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertTokenizer"),c(aB,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(nB,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartTokenizer"),c(sB,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartTokenizerFast"),c(lB,"href","/docs/transformers/pr_17938/en/model_doc/barthez#transformers.BarthezTokenizer"),c(iB,"href","/docs/transformers/pr_17938/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(dB,"href","/docs/transformers/pr_17938/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(cB,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizer"),c(fB,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizerFast"),c(mB,"href","/docs/transformers/pr_17938/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(gB,"href","/docs/transformers/pr_17938/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(hB,"href","/docs/transformers/pr_17938/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(pB,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(_B,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(uB,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(bB,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(vB,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(FB,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(TB,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(MB,"href","/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(EB,"href","/docs/transformers/pr_17938/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(CB,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertTokenizer"),c(wB,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(AB,"href","/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineTokenizer"),c(LB,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPTokenizer"),c(yB,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(xB,"href","/docs/transformers/pr_17938/en/model_doc/codegen#transformers.CodeGenTokenizer"),c($B,"href","/docs/transformers/pr_17938/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(kB,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(SB,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(RB,"href","/docs/transformers/pr_17938/en/model_doc/cpm#transformers.CpmTokenizer"),c(PB,"href","/docs/transformers/pr_17938/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(BB,"href","/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(IB,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaTokenizer"),c(NB,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(qB,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaTokenizer"),c(jB,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(DB,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(GB,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(OB,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(VB,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(XB,"href","/docs/transformers/pr_17938/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(zB,"href","/docs/transformers/pr_17938/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(WB,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraTokenizer"),c(QB,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(HB,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(UB,"href","/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetTokenizer"),c(JB,"href","/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(YB,"href","/docs/transformers/pr_17938/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(KB,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelTokenizer"),c(ZB,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(eI,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(oI,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(rI,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(tI,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(aI,"href","/docs/transformers/pr_17938/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(nI,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(sI,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(lI,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPTokenizer"),c(iI,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(dI,"href","/docs/transformers/pr_17938/en/model_doc/herbert#transformers.HerbertTokenizer"),c(cI,"href","/docs/transformers/pr_17938/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(fI,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(mI,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaTokenizer"),c(gI,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(hI,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(pI,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(_I,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(uI,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(bI,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(vI,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(FI,"href","/docs/transformers/pr_17938/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(TI,"href","/docs/transformers/pr_17938/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(MI,"href","/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDTokenizer"),c(EI,"href","/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDTokenizerFast"),c(CI,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerTokenizer"),c(wI,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(AI,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Tokenizer"),c(LI,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5TokenizerFast"),c(yI,"href","/docs/transformers/pr_17938/en/model_doc/luke#transformers.LukeTokenizer"),c(xI,"href","/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertTokenizer"),c($I,"href","/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(kI,"href","/docs/transformers/pr_17938/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(SI,"href","/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianTokenizer"),c(RI,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartTokenizer"),c(PI,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(BI,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(II,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(NI,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizer"),c(qI,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizerFast"),c(jI,"href","/docs/transformers/pr_17938/en/model_doc/mluke#transformers.MLukeTokenizer"),c(DI,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(GI,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(OI,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(VI,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(XI,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Tokenizer"),c(zI,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5TokenizerFast"),c(WI,"href","/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpTokenizer"),c(QI,"href","/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(HI,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizer"),c(UI,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizerFast"),c(JI,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertTokenizer"),c(YI,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(KI,"href","/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(ZI,"href","/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(eN,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(oN,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPTokenizer"),c(rN,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(tN,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(aN,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(nN,"href","/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(sN,"href","/docs/transformers/pr_17938/en/model_doc/phobert#transformers.PhobertTokenizer"),c(lN,"href","/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartTokenizer"),c(iN,"href","/docs/transformers/pr_17938/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(dN,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizer"),c(cN,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizerFast"),c(fN,"href","/docs/transformers/pr_17938/en/model_doc/rag#transformers.RagTokenizer"),c(mN,"href","/docs/transformers/pr_17938/en/model_doc/realm#transformers.RealmTokenizer"),c(gN,"href","/docs/transformers/pr_17938/en/model_doc/realm#transformers.RealmTokenizerFast"),c(hN,"href","/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerTokenizer"),c(pN,"href","/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(_N,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertTokenizer"),c(uN,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(bN,"href","/docs/transformers/pr_17938/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(vN,"href","/docs/transformers/pr_17938/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(FN,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaTokenizer"),c(TN,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(MN,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(EN,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(CN,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(wN,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(AN,"href","/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterTokenizer"),c(LN,"href","/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(yN,"href","/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(xN,"href","/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c($N,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Tokenizer"),c(kN,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5TokenizerFast"),c(SN,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasTokenizer"),c(RN,"href","/docs/transformers/pr_17938/en/model_doc/tapex#transformers.TapexTokenizer"),c(PN,"href","/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(BN,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizer"),c(IN,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizerFast"),c(NN,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizer"),c(qN,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertTokenizerFast"),c(jN,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(DN,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(GN,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(ON,"href","/docs/transformers/pr_17938/en/model_doc/xglm#transformers.XGLMTokenizer"),c(VN,"href","/docs/transformers/pr_17938/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(XN,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMTokenizer"),c(zN,"href","/docs/transformers/pr_17938/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(WN,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(QN,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(HN,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaTokenizer"),c(UN,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(JN,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(YN,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(KN,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertTokenizer"),c(ZN,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ih,"id","transformers.AutoFeatureExtractor"),c(Ih,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ih,"href","#transformers.AutoFeatureExtractor"),c(qi,"class","relative group"),c(eq,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(oq,"href","/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(rq,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(tq,"href","/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(aq,"href","/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(nq,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(sq,"href","/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(lq,"href","/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(iq,"href","/docs/transformers/pr_17938/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(dq,"href","/docs/transformers/pr_17938/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(cq,"href","/docs/transformers/pr_17938/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(fq,"href","/docs/transformers/pr_17938/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(mq,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(gq,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(hq,"href","/docs/transformers/pr_17938/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(pq,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(_q,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(uq,"href","/docs/transformers/pr_17938/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(bq,"href","/docs/transformers/pr_17938/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(vq,"href","/docs/transformers/pr_17938/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(Fq,"href","/docs/transformers/pr_17938/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(Tq,"href","/docs/transformers/pr_17938/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),c(Mq,"href","/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(Eq,"href","/docs/transformers/pr_17938/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(Cq,"href","/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(wq,"href","/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Aq,"href","/docs/transformers/pr_17938/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(Lq,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(yq,"href","/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(xq,"href","/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c($q,"href","/docs/transformers/pr_17938/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(kq,"href","/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Sq,"href","/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Rq,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Pq,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Bq,"href","/docs/transformers/pr_17938/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tp,"id","transformers.AutoProcessor"),c(Tp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tp,"href","#transformers.AutoProcessor"),c(ji,"class","relative group"),c(Iq,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(Nq,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPProcessor"),c(qq,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPProcessor"),c(jq,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(Dq,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(Gq,"href","/docs/transformers/pr_17938/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(Oq,"href","/docs/transformers/pr_17938/en/model_doc/owlvit#transformers.OwlViTProcessor"),c(Vq,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Xq,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(zq,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(Wq,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(Qq,"href","/docs/transformers/pr_17938/en/model_doc/trocr#transformers.TrOCRProcessor"),c(Hq,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Uq,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Jq,"href","/docs/transformers/pr_17938/en/model_doc/vilt#transformers.ViltProcessor"),c(Yq,"href","/docs/transformers/pr_17938/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(Kq,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Zq,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(ej,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xp,"id","transformers.AutoModel"),c(Xp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xp,"href","#transformers.AutoModel"),c(Gi,"class","relative group"),c(oj,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rj,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tj,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aj,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertModel"),c(nj,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartModel"),c(sj,"href","/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitModel"),c(lj,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertModel"),c(ij,"href","/docs/transformers/pr_17938/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(dj,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdModel"),c(cj,"href","/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(fj,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(mj,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(gj,"href","/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomModel"),c(hj,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertModel"),c(pj,"href","/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineModel"),c(_j,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.CLIPModel"),c(uj,"href","/docs/transformers/pr_17938/en/model_doc/codegen#transformers.CodeGenModel"),c(bj,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertModel"),c(vj,"href","/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextModel"),c(Fj,"href","/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLModel"),c(Tj,"href","/docs/transformers/pr_17938/en/model_doc/cvt#transformers.CvtModel"),c(Mj,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(Ej,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(Cj,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(wj,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaModel"),c(Aj,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(Lj,"href","/docs/transformers/pr_17938/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(yj,"href","/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTModel"),c(xj,"href","/docs/transformers/pr_17938/en/model_doc/detr#transformers.DetrModel"),c($j,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertModel"),c(kj,"href","/docs/transformers/pr_17938/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Sj,"href","/docs/transformers/pr_17938/en/model_doc/dpt#transformers.DPTModel"),c(Rj,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraModel"),c(Pj,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertModel"),c(Bj,"href","/docs/transformers/pr_17938/en/model_doc/flava#transformers.FlavaModel"),c(Ij,"href","/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetModel"),c(Nj,"href","/docs/transformers/pr_17938/en/model_doc/fsmt#transformers.FSMTModel"),c(qj,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelModel"),c(jj,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelBaseModel"),c(Dj,"href","/docs/transformers/pr_17938/en/model_doc/glpn#transformers.GLPNModel"),c(Gj,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2Model"),c(Oj,"href","/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Vj,"href","/docs/transformers/pr_17938/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(Xj,"href","/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJModel"),c(zj,"href","/docs/transformers/pr_17938/en/model_doc/groupvit#transformers.GroupViTModel"),c(Wj,"href","/docs/transformers/pr_17938/en/model_doc/hubert#transformers.HubertModel"),c(Qj,"href","/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertModel"),c(Hj,"href","/docs/transformers/pr_17938/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Uj,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Jj,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Yj,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(Kj,"href","/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDModel"),c(Zj,"href","/docs/transformers/pr_17938/en/model_doc/levit#transformers.LevitModel"),c(eD,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerModel"),c(oD,"href","/docs/transformers/pr_17938/en/model_doc/longt5#transformers.LongT5Model"),c(rD,"href","/docs/transformers/pr_17938/en/model_doc/luke#transformers.LukeModel"),c(tD,"href","/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertModel"),c(aD,"href","/docs/transformers/pr_17938/en/model_doc/m2m_100#transformers.M2M100Model"),c(nD,"href","/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianModel"),c(sD,"href","/docs/transformers/pr_17938/en/model_doc/maskformer#transformers.MaskFormerModel"),c(lD,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartModel"),c(iD,"href","/docs/transformers/pr_17938/en/model_doc/mctct#transformers.MCTCTModel"),c(dD,"href","/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(cD,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertModel"),c(fD,"href","/docs/transformers/pr_17938/en/model_doc/mobilevit#transformers.MobileViTModel"),c(mD,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetModel"),c(gD,"href","/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5Model"),c(hD,"href","/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpModel"),c(pD,"href","/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaModel"),c(_D,"href","/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerModel"),c(uD,"href","/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(bD,"href","/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTModel"),c(vD,"href","/docs/transformers/pr_17938/en/model_doc/owlvit#transformers.OwlViTModel"),c(FD,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusModel"),c(TD,"href","/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverModel"),c(MD,"href","/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartModel"),c(ED,"href","/docs/transformers/pr_17938/en/model_doc/poolformer#transformers.PoolFormerModel"),c(CD,"href","/docs/transformers/pr_17938/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(wD,"href","/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertModel"),c(AD,"href","/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerModel"),c(LD,"href","/docs/transformers/pr_17938/en/model_doc/regnet#transformers.RegNetModel"),c(yD,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertModel"),c(xD,"href","/docs/transformers/pr_17938/en/model_doc/resnet#transformers.ResNetModel"),c($D,"href","/docs/transformers/pr_17938/en/model_doc/retribert#transformers.RetriBertModel"),c(kD,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaModel"),c(SD,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerModel"),c(RD,"href","/docs/transformers/pr_17938/en/model_doc/segformer#transformers.SegformerModel"),c(PD,"href","/docs/transformers/pr_17938/en/model_doc/sew#transformers.SEWModel"),c(BD,"href","/docs/transformers/pr_17938/en/model_doc/sew-d#transformers.SEWDModel"),c(ID,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(ND,"href","/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterModel"),c(qD,"href","/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(jD,"href","/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinModel"),c(DD,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5Model"),c(GD,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasModel"),c(OD,"href","/docs/transformers/pr_17938/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(VD,"href","/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(XD,"href","/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechModel"),c(zD,"href","/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(WD,"href","/docs/transformers/pr_17938/en/model_doc/van#transformers.VanModel"),c(QD,"href","/docs/transformers/pr_17938/en/model_doc/vilt#transformers.ViltModel"),c(HD,"href","/docs/transformers/pr_17938/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(UD,"href","/docs/transformers/pr_17938/en/model_doc/visual_bert#transformers.VisualBertModel"),c(JD,"href","/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTModel"),c(YD,"href","/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(KD,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(ZD,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(eG,"href","/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMModel"),c(oG,"href","/docs/transformers/pr_17938/en/model_doc/xglm#transformers.XGLMModel"),c(rG,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMModel"),c(tG,"href","/docs/transformers/pr_17938/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(aG,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(nG,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(sG,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetModel"),c(lG,"href","/docs/transformers/pr_17938/en/model_doc/yolos#transformers.YolosModel"),c(iG,"href","/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yu,"id","transformers.AutoModelForPreTraining"),c(Yu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yu,"href","#transformers.AutoModelForPreTraining"),c(Xi,"class","relative group"),c(dG,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cG,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fG,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mG,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForPreTraining"),c(gG,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(hG,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForPreTraining"),c(pG,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(_G,"href","/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomForCausalLM"),c(uG,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(bG,"href","/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(vG,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(FG,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(TG,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(MG,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(EG,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForPreTraining"),c(CG,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(wG,"href","/docs/transformers/pr_17938/en/model_doc/flava#transformers.FlavaForPreTraining"),c(AG,"href","/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForPreTraining"),c(LG,"href","/docs/transformers/pr_17938/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(yG,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(xG,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c($G,"href","/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(kG,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(SG,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(RG,"href","/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(PG,"href","/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(BG,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(IG,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(NG,"href","/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(qG,"href","/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(jG,"href","/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(DG,"href","/docs/transformers/pr_17938/en/model_doc/retribert#transformers.RetriBertModel"),c(GG,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(OG,"href","/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(VG,"href","/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(XG,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(zG,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(WG,"href","/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(QG,"href","/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(HG,"href","/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(UG,"href","/docs/transformers/pr_17938/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(JG,"href","/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(YG,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(KG,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(ZG,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(eO,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(oO,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(rO,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W1,"id","transformers.AutoModelForCausalLM"),c(W1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W1,"href","#transformers.AutoModelForCausalLM"),c(Qi,"class","relative group"),c(tO,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aO,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nO,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sO,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForCausalLM"),c(lO,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertLMHeadModel"),c(iO,"href","/docs/transformers/pr_17938/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(dO,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(cO,"href","/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(fO,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(mO,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(gO,"href","/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomForCausalLM"),c(hO,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(pO,"href","/docs/transformers/pr_17938/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(_O,"href","/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(uO,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(bO,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForCausalLM"),c(vO,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(FO,"href","/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(TO,"href","/docs/transformers/pr_17938/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(MO,"href","/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(EO,"href","/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianForCausalLM"),c(CO,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartForCausalLM"),c(wO,"href","/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(AO,"href","/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForCausalLM"),c(LO,"href","/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(yO,"href","/docs/transformers/pr_17938/en/model_doc/opt#transformers.OPTForCausalLM"),c(xO,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c($O,"href","/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(kO,"href","/docs/transformers/pr_17938/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(SO,"href","/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(RO,"href","/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(PO,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(BO,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(IO,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(NO,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(qO,"href","/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(jO,"href","/docs/transformers/pr_17938/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(DO,"href","/docs/transformers/pr_17938/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(GO,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(OO,"href","/docs/transformers/pr_17938/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(VO,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(XO,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(zO,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I2,"id","transformers.AutoModelForMaskedLM"),c(I2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I2,"href","#transformers.AutoModelForMaskedLM"),c(Ji,"class","relative group"),c(WO,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QO,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HO,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UO,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(JO,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(YO,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForMaskedLM"),c(KO,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(ZO,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(eV,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(oV,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(rV,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(tV,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(aV,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(nV,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(sV,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(lV,"href","/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(iV,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(dV,"href","/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(cV,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(fV,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(mV,"href","/docs/transformers/pr_17938/en/model_doc/luke#transformers.LukeForMaskedLM"),c(gV,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(hV,"href","/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(pV,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(_V,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(uV,"href","/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(bV,"href","/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(vV,"href","/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(FV,"href","/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(TV,"href","/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(MV,"href","/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(EV,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(CV,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(wV,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(AV,"href","/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(LV,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(yV,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(xV,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c($V,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(kV,"href","/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cb,"id","transformers.AutoModelForSeq2SeqLM"),c(Cb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cb,"href","#transformers.AutoModelForSeq2SeqLM"),c(Zi,"class","relative group"),c(SV,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RV,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PV,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BV,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(IV,"href","/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(NV,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(qV,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(jV,"href","/docs/transformers/pr_17938/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(DV,"href","/docs/transformers/pr_17938/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(GV,"href","/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(OV,"href","/docs/transformers/pr_17938/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(VV,"href","/docs/transformers/pr_17938/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(XV,"href","/docs/transformers/pr_17938/en/model_doc/marian#transformers.MarianMTModel"),c(zV,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(WV,"href","/docs/transformers/pr_17938/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(QV,"href","/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(HV,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(UV,"href","/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(JV,"href","/docs/transformers/pr_17938/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(YV,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(KV,"href","/docs/transformers/pr_17938/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wb,"id","transformers.AutoModelForSequenceClassification"),c(Wb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wb,"href","#transformers.AutoModelForSequenceClassification"),c(rd,"class","relative group"),c(ZV,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eX,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oX,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rX,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(tX,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForSequenceClassification"),c(aX,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForSequenceClassification"),c(nX,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(sX,"href","/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(lX,"href","/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(iX,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(dX,"href","/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(cX,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(fX,"href","/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(mX,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(gX,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(hX,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(pX,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(_X,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(uX,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(bX,"href","/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(vX,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(FX,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(TX,"href","/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(MX,"href","/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(EX,"href","/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(CX,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(wX,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(AX,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(LX,"href","/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDForSequenceClassification"),c(yX,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(xX,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c($X,"href","/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(kX,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(SX,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(RX,"href","/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(PX,"href","/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(BX,"href","/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(IX,"href","/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(NX,"href","/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(qX,"href","/docs/transformers/pr_17938/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(jX,"href","/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(DX,"href","/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(GX,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(OX,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(VX,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(XX,"href","/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(zX,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(WX,"href","/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(QX,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(HX,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(UX,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(JX,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(YX,"href","/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wv,"id","transformers.AutoModelForMultipleChoice"),c(Wv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wv,"href","#transformers.AutoModelForMultipleChoice"),c(nd,"class","relative group"),c(KX,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZX,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ez,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oz,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(rz,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForMultipleChoice"),c(tz,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(az,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(nz,"href","/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(sz,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(lz,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(iz,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(dz,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(cz,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(fz,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(mz,"href","/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(gz,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(hz,"href","/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(pz,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(_z,"href","/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(uz,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(bz,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(vz,"href","/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(Fz,"href","/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(Tz,"href","/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(Mz,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(Ez,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(Cz,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(wz,"href","/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(Az,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(Lz,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(yz,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(xz,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c($z,"href","/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A3,"id","transformers.AutoModelForNextSentencePrediction"),c(A3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A3,"href","#transformers.AutoModelForNextSentencePrediction"),c(id,"class","relative group"),c(kz,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Sz,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Rz,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pz,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(Bz,"href","/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(Iz,"href","/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(Nz,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(qz,"href","/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(jz,"href","/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I3,"id","transformers.AutoModelForTokenClassification"),c(I3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I3,"href","#transformers.AutoModelForTokenClassification"),c(fd,"class","relative group"),c(Dz,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gz,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Oz,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vz,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(Xz,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForTokenClassification"),c(zz,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(Wz,"href","/docs/transformers/pr_17938/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(Qz,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(Hz,"href","/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineForTokenClassification"),c(Uz,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(Jz,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(Yz,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(Kz,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(Zz,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(eW,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(oW,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(rW,"href","/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(tW,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(aW,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(nW,"href","/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(sW,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(lW,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(iW,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(dW,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(cW,"href","/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(fW,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(mW,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(gW,"href","/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(hW,"href","/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(pW,"href","/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(_W,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(uW,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(bW,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(vW,"href","/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(FW,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(TW,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(MW,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(EW,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(CW,"href","/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MF,"id","transformers.AutoModelForQuestionAnswering"),c(MF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MF,"href","#transformers.AutoModelForQuestionAnswering"),c(hd,"class","relative group"),c(wW,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AW,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LW,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yW,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(xW,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.BartForQuestionAnswering"),c($W,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(kW,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(SW,"href","/docs/transformers/pr_17938/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(RW,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(PW,"href","/docs/transformers/pr_17938/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(BW,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(IW,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(NW,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(qW,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(jW,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(DW,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(GW,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(OW,"href","/docs/transformers/pr_17938/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(VW,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(XW,"href","/docs/transformers/pr_17938/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(zW,"href","/docs/transformers/pr_17938/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(WW,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(QW,"href","/docs/transformers/pr_17938/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(HW,"href","/docs/transformers/pr_17938/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(UW,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(JW,"href","/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(YW,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(KW,"href","/docs/transformers/pr_17938/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(ZW,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(eQ,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(oQ,"href","/docs/transformers/pr_17938/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(rQ,"href","/docs/transformers/pr_17938/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(tQ,"href","/docs/transformers/pr_17938/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(aQ,"href","/docs/transformers/pr_17938/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(nQ,"href","/docs/transformers/pr_17938/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(sQ,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(lQ,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(iQ,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(dQ,"href","/docs/transformers/pr_17938/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(cQ,"href","/docs/transformers/pr_17938/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(fQ,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(mQ,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(gQ,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(hQ,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(pQ,"href","/docs/transformers/pr_17938/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hT,"id","transformers.AutoModelForTableQuestionAnswering"),c(hT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hT,"href","#transformers.AutoModelForTableQuestionAnswering"),c(ud,"class","relative group"),c(_Q,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uQ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bQ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vQ,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vT,"id","transformers.AutoModelForImageClassification"),c(vT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vT,"href","#transformers.AutoModelForImageClassification"),c(Fd,"class","relative group"),c(FQ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TQ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MQ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EQ,"href","/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitForImageClassification"),c(CQ,"href","/docs/transformers/pr_17938/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(wQ,"href","/docs/transformers/pr_17938/en/model_doc/cvt#transformers.CvtForImageClassification"),c(AQ,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(LQ,"href","/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTForImageClassification"),c(yQ,"href","/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(xQ,"href","/docs/transformers/pr_17938/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c($Q,"href","/docs/transformers/pr_17938/en/model_doc/levit#transformers.LevitForImageClassification"),c(kQ,"href","/docs/transformers/pr_17938/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(SQ,"href","/docs/transformers/pr_17938/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(RQ,"href","/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(PQ,"href","/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(BQ,"href","/docs/transformers/pr_17938/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(IQ,"href","/docs/transformers/pr_17938/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(NQ,"href","/docs/transformers/pr_17938/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(qQ,"href","/docs/transformers/pr_17938/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(jQ,"href","/docs/transformers/pr_17938/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(DQ,"href","/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinForImageClassification"),c(GQ,"href","/docs/transformers/pr_17938/en/model_doc/van#transformers.VanForImageClassification"),c(OQ,"href","/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IT,"id","transformers.AutoModelForVision2Seq"),c(IT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IT,"href","#transformers.AutoModelForVision2Seq"),c(Ed,"class","relative group"),c(VQ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XQ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zQ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WQ,"href","/docs/transformers/pr_17938/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GT,"id","transformers.AutoModelForVisualQuestionAnswering"),c(GT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GT,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Ad,"class","relative group"),c(QQ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HQ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UQ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JQ,"href","/docs/transformers/pr_17938/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WT,"id","transformers.AutoModelForAudioClassification"),c(WT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WT,"href","#transformers.AutoModelForAudioClassification"),c(xd,"class","relative group"),c(YQ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KQ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZQ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eH,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(oH,"href","/docs/transformers/pr_17938/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(rH,"href","/docs/transformers/pr_17938/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(tH,"href","/docs/transformers/pr_17938/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(aH,"href","/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(nH,"href","/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(sH,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(lH,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(iH,"href","/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n7,"id","transformers.AutoModelForAudioFrameClassification"),c(n7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n7,"href","#transformers.AutoModelForAudioFrameClassification"),c(Sd,"class","relative group"),c(dH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mH,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(gH,"href","/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(hH,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(pH,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(_H,"href","/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h7,"id","transformers.AutoModelForCTC"),c(h7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h7,"href","#transformers.AutoModelForCTC"),c(Bd,"class","relative group"),c(uH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FH,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(TH,"href","/docs/transformers/pr_17938/en/model_doc/hubert#transformers.HubertForCTC"),c(MH,"href","/docs/transformers/pr_17938/en/model_doc/mctct#transformers.MCTCTForCTC"),c(EH,"href","/docs/transformers/pr_17938/en/model_doc/sew#transformers.SEWForCTC"),c(CH,"href","/docs/transformers/pr_17938/en/model_doc/sew-d#transformers.SEWDForCTC"),c(wH,"href","/docs/transformers/pr_17938/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(AH,"href","/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(LH,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(yH,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(xH,"href","/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y7,"id","transformers.AutoModelForSpeechSeq2Seq"),c(y7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y7,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(qd,"class","relative group"),c($H,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RH,"href","/docs/transformers/pr_17938/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(PH,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P7,"id","transformers.AutoModelForAudioXVector"),c(P7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P7,"href","#transformers.AutoModelForAudioXVector"),c(Gd,"class","relative group"),c(BH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qH,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(jH,"href","/docs/transformers/pr_17938/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(DH,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(GH,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(OH,"href","/docs/transformers/pr_17938/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V7,"id","transformers.AutoModelForMaskedImageModeling"),c(V7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V7,"href","#transformers.AutoModelForMaskedImageModeling"),c(Xd,"class","relative group"),c(VH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WH,"href","/docs/transformers/pr_17938/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(QH,"href","/docs/transformers/pr_17938/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(HH,"href","/docs/transformers/pr_17938/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J7,"id","transformers.AutoModelForObjectDetection"),c(J7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J7,"href","#transformers.AutoModelForObjectDetection"),c(Hd,"class","relative group"),c(UH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YH,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KH,"href","/docs/transformers/pr_17938/en/model_doc/detr#transformers.DetrForObjectDetection"),c(ZH,"href","/docs/transformers/pr_17938/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r8,"id","transformers.AutoModelForImageSegmentation"),c(r8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r8,"href","#transformers.AutoModelForImageSegmentation"),c(Yd,"class","relative group"),c(eU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tU,"href","/docs/transformers/pr_17938/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l8,"id","transformers.AutoModelForSemanticSegmentation"),c(l8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l8,"href","#transformers.AutoModelForSemanticSegmentation"),c(ec,"class","relative group"),c(aU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lU,"href","/docs/transformers/pr_17938/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(iU,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(dU,"href","/docs/transformers/pr_17938/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(cU,"href","/docs/transformers/pr_17938/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(fU,"href","/docs/transformers/pr_17938/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_8,"id","transformers.AutoModelForInstanceSegmentation"),c(_8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_8,"href","#transformers.AutoModelForInstanceSegmentation"),c(tc,"class","relative group"),c(mU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pU,"href","/docs/transformers/pr_17938/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T8,"id","transformers.TFAutoModel"),c(T8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T8,"href","#transformers.TFAutoModel"),c(sc,"class","relative group"),c(_U,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bU,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vU,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertModel"),c(FU,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.TFBartModel"),c(TU,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertModel"),c(MU,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(EU,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(CU,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertModel"),c(wU,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.TFCLIPModel"),c(AU,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertModel"),c(LU,"href","/docs/transformers/pr_17938/en/model_doc/convnext#transformers.TFConvNextModel"),c(yU,"href","/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.TFCTRLModel"),c(xU,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c($U,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.TFDebertaModel"),c(kU,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(SU,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(RU,"href","/docs/transformers/pr_17938/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(PU,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraModel"),c(BU,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(IU,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelModel"),c(NU,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(qU,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.TFGPT2Model"),c(jU,"href","/docs/transformers/pr_17938/en/model_doc/gptj#transformers.TFGPTJModel"),c(DU,"href","/docs/transformers/pr_17938/en/model_doc/hubert#transformers.TFHubertModel"),c(GU,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(OU,"href","/docs/transformers/pr_17938/en/model_doc/led#transformers.TFLEDModel"),c(VU,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerModel"),c(XU,"href","/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.TFLxmertModel"),c(zU,"href","/docs/transformers/pr_17938/en/model_doc/marian#transformers.TFMarianModel"),c(WU,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.TFMBartModel"),c(QU,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(HU,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetModel"),c(UU,"href","/docs/transformers/pr_17938/en/model_doc/mt5#transformers.TFMT5Model"),c(JU,"href","/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(YU,"href","/docs/transformers/pr_17938/en/model_doc/opt#transformers.TFOPTModel"),c(KU,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.TFPegasusModel"),c(ZU,"href","/docs/transformers/pr_17938/en/model_doc/regnet#transformers.TFRegNetModel"),c(eJ,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertModel"),c(oJ,"href","/docs/transformers/pr_17938/en/model_doc/resnet#transformers.TFResNetModel"),c(rJ,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaModel"),c(tJ,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerModel"),c(aJ,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(nJ,"href","/docs/transformers/pr_17938/en/model_doc/swin#transformers.TFSwinModel"),c(sJ,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.TFT5Model"),c(lJ,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TFTapasModel"),c(iJ,"href","/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(dJ,"href","/docs/transformers/pr_17938/en/model_doc/vit#transformers.TFViTModel"),c(cJ,"href","/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(fJ,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(mJ,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMModel"),c(gJ,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(hJ,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b9,"id","transformers.TFAutoModelForPreTraining"),c(b9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b9,"href","#transformers.TFAutoModelForPreTraining"),c(dc,"class","relative group"),c(pJ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_J,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uJ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bJ,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(vJ,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(FJ,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForPreTraining"),c(TJ,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(MJ,"href","/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(EJ,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(CJ,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(wJ,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(AJ,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(LJ,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(yJ,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(xJ,"href","/docs/transformers/pr_17938/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c($J,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(kJ,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(SJ,"href","/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(RJ,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(PJ,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(BJ,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(IJ,"href","/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(NJ,"href","/docs/transformers/pr_17938/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(qJ,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(jJ,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(DJ,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X9,"id","transformers.TFAutoModelForCausalLM"),c(X9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X9,"href","#transformers.TFAutoModelForCausalLM"),c(mc,"class","relative group"),c(GJ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OJ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VJ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XJ,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(zJ,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(WJ,"href","/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(QJ,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(HJ,"href","/docs/transformers/pr_17938/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(UJ,"href","/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(JJ,"href","/docs/transformers/pr_17938/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(YJ,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(KJ,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(ZJ,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(eY,"href","/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(oY,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(rY,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sM,"id","transformers.TFAutoModelForImageClassification"),c(sM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sM,"href","#transformers.TFAutoModelForImageClassification"),c(pc,"class","relative group"),c(tY,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aY,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nY,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sY,"href","/docs/transformers/pr_17938/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(lY,"href","/docs/transformers/pr_17938/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(iY,"href","/docs/transformers/pr_17938/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(dY,"href","/docs/transformers/pr_17938/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(cY,"href","/docs/transformers/pr_17938/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(fY,"href","/docs/transformers/pr_17938/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pM,"id","transformers.TFAutoModelForMaskedLM"),c(pM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pM,"href","#transformers.TFAutoModelForMaskedLM"),c(bc,"class","relative group"),c(mY,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gY,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hY,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pY,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(_Y,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(uY,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(bY,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(vY,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(FY,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(TY,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(MY,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(EY,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(CY,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(wY,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(AY,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(LY,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(yY,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(xY,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c($Y,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(kY,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(SY,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(RY,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(PY,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(qM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Tc,"class","relative group"),c(BY,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IY,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NY,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qY,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(jY,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(DY,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(GY,"href","/docs/transformers/pr_17938/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(OY,"href","/docs/transformers/pr_17938/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(VY,"href","/docs/transformers/pr_17938/en/model_doc/marian#transformers.TFMarianMTModel"),c(XY,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(zY,"href","/docs/transformers/pr_17938/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(WY,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(QY,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YM,"id","transformers.TFAutoModelForSequenceClassification"),c(YM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YM,"href","#transformers.TFAutoModelForSequenceClassification"),c(Cc,"class","relative group"),c(HY,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UY,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JY,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YY,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(KY,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(ZY,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(eK,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(oK,"href","/docs/transformers/pr_17938/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(rK,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(tK,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(aK,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(nK,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(sK,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(lK,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(iK,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(dK,"href","/docs/transformers/pr_17938/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(cK,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(fK,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(mK,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(gK,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(hK,"href","/docs/transformers/pr_17938/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(pK,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(_K,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(uK,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(bK,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(vK,"href","/docs/transformers/pr_17938/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(FK,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(TK,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(MK,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A4,"id","transformers.TFAutoModelForMultipleChoice"),c(A4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A4,"href","#transformers.TFAutoModelForMultipleChoice"),c(Lc,"class","relative group"),c(EK,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CK,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wK,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AK,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(LK,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(yK,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(xK,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c($K,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(kK,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(SK,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(RK,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(PK,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(BK,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(IK,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(NK,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(qK,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(jK,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(DK,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(GK,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(OK,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W4,"id","transformers.TFAutoModelForNextSentencePrediction"),c(W4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W4,"href","#transformers.TFAutoModelForNextSentencePrediction"),c($c,"class","relative group"),c(VK,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XK,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zK,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WK,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(QK,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(Y4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Rc,"class","relative group"),c(HK,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UK,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JK,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YK,"href","/docs/transformers/pr_17938/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oE,"id","transformers.TFAutoModelForTokenClassification"),c(oE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oE,"href","#transformers.TFAutoModelForTokenClassification"),c(Ic,"class","relative group"),c(KK,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZK,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oZ,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(rZ,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(tZ,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(aZ,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(nZ,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(sZ,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(lZ,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(iZ,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(dZ,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(cZ,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(fZ,"href","/docs/transformers/pr_17938/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(mZ,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(gZ,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(hZ,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(pZ,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(_Z,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(uZ,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(bZ,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(vZ,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(FZ,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CE,"id","transformers.TFAutoModelForQuestionAnswering"),c(CE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(jc,"class","relative group"),c(TZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CZ,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(wZ,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(AZ,"href","/docs/transformers/pr_17938/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(LZ,"href","/docs/transformers/pr_17938/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(yZ,"href","/docs/transformers/pr_17938/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(xZ,"href","/docs/transformers/pr_17938/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c($Z,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(kZ,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(SZ,"href","/docs/transformers/pr_17938/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(RZ,"href","/docs/transformers/pr_17938/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(PZ,"href","/docs/transformers/pr_17938/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(BZ,"href","/docs/transformers/pr_17938/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(IZ,"href","/docs/transformers/pr_17938/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(NZ,"href","/docs/transformers/pr_17938/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(qZ,"href","/docs/transformers/pr_17938/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(jZ,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(DZ,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(GZ,"href","/docs/transformers/pr_17938/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(OZ,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(VZ,"href","/docs/transformers/pr_17938/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QE,"id","transformers.TFAutoModelForVision2Seq"),c(QE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QE,"href","#transformers.TFAutoModelForVision2Seq"),c(Oc,"class","relative group"),c(XZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QZ,"href","/docs/transformers/pr_17938/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(YE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(zc,"class","relative group"),c(HZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YZ,"href","/docs/transformers/pr_17938/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oC,"id","transformers.FlaxAutoModel"),c(oC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oC,"href","#transformers.FlaxAutoModel"),c(Hc,"class","relative group"),c(KZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZZ,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eee,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oee,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertModel"),c(ree,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartModel"),c(tee,"href","/docs/transformers/pr_17938/en/model_doc/beit#transformers.FlaxBeitModel"),c(aee,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertModel"),c(nee,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(see,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(lee,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(iee,"href","/docs/transformers/pr_17938/en/model_doc/clip#transformers.FlaxCLIPModel"),c(dee,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(cee,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraModel"),c(fee,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(mee,"href","/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(gee,"href","/docs/transformers/pr_17938/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(hee,"href","/docs/transformers/pr_17938/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(pee,"href","/docs/transformers/pr_17938/en/model_doc/marian#transformers.FlaxMarianModel"),c(_ee,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartModel"),c(uee,"href","/docs/transformers/pr_17938/en/model_doc/mt5#transformers.FlaxMT5Model"),c(bee,"href","/docs/transformers/pr_17938/en/model_doc/opt#transformers.FlaxOPTModel"),c(vee,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(Fee,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(Tee,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(Mee,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.FlaxT5Model"),c(Eee,"href","/docs/transformers/pr_17938/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(Cee,"href","/docs/transformers/pr_17938/en/model_doc/vit#transformers.FlaxViTModel"),c(wee,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(Aee,"href","/docs/transformers/pr_17938/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(Lee,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kC,"id","transformers.FlaxAutoModelForCausalLM"),c(kC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kC,"href","#transformers.FlaxAutoModelForCausalLM"),c(Yc,"class","relative group"),c(yee,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xee,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($ee,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kee,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(See,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(Ree,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(Pee,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(Bee,"href","/docs/transformers/pr_17938/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(Iee,"href","/docs/transformers/pr_17938/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(Nee,"href","/docs/transformers/pr_17938/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(qee,"href","/docs/transformers/pr_17938/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(jee,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(Dee,"href","/docs/transformers/pr_17938/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XC,"id","transformers.FlaxAutoModelForPreTraining"),c(XC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XC,"href","#transformers.FlaxAutoModelForPreTraining"),c(ef,"class","relative group"),c(Gee,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oee,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vee,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xee,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(zee,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Wee,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(Qee,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(Hee,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(Uee,"href","/docs/transformers/pr_17938/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Jee,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Yee,"href","/docs/transformers/pr_17938/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Kee,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Zee,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(eoe,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(ooe,"href","/docs/transformers/pr_17938/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(roe,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s5,"id","transformers.FlaxAutoModelForMaskedLM"),c(s5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(tf,"class","relative group"),c(toe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aoe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(noe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(soe,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(loe,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(ioe,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(doe,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(coe,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(foe,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(moe,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(goe,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(hoe,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(poe,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(v5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(sf,"class","relative group"),c(_oe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uoe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(boe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(voe,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Foe,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(Toe,"href","/docs/transformers/pr_17938/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(Moe,"href","/docs/transformers/pr_17938/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(Eoe,"href","/docs/transformers/pr_17938/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Coe,"href","/docs/transformers/pr_17938/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(woe,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Aoe,"href","/docs/transformers/pr_17938/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Loe,"href","/docs/transformers/pr_17938/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(yoe,"href","/docs/transformers/pr_17938/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(S5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(cf,"class","relative group"),c(xoe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($oe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(koe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Soe,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Roe,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Poe,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Boe,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(Ioe,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(Noe,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(qoe,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(joe,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Doe,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Goe,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(gf,"class","relative group"),c(Ooe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Voe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Xoe,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zoe,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Woe,"href","/docs/transformers/pr_17938/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(Qoe,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Hoe,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Uoe,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(Joe,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(Yoe,"href","/docs/transformers/pr_17938/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Koe,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(Zoe,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(ere,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a0,"id","transformers.FlaxAutoModelForTokenClassification"),c(a0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a0,"href","#transformers.FlaxAutoModelForTokenClassification"),c(_f,"class","relative group"),c(ore,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(are,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(nre,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(sre,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(lre,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(ire,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(dre,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(cre,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(fre,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p0,"id","transformers.FlaxAutoModelForMultipleChoice"),c(p0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p0,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(vf,"class","relative group"),c(mre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pre,"href","/docs/transformers/pr_17938/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(_re,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(ure,"href","/docs/transformers/pr_17938/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(bre,"href","/docs/transformers/pr_17938/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(vre,"href","/docs/transformers/pr_17938/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Fre,"href","/docs/transformers/pr_17938/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(Tre,"href","/docs/transformers/pr_17938/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Mre,"href","/docs/transformers/pr_17938/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A0,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(A0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A0,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Mf,"class","relative group"),c(Ere,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Cre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Are,"href","/docs/transformers/pr_17938/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($0,"id","transformers.FlaxAutoModelForImageClassification"),c($0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($0,"href","#transformers.FlaxAutoModelForImageClassification"),c(wf,"class","relative group"),c(Lre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($re,"href","/docs/transformers/pr_17938/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(kre,"href","/docs/transformers/pr_17938/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B0,"id","transformers.FlaxAutoModelForVision2Seq"),c(B0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B0,"href","#transformers.FlaxAutoModelForVision2Seq"),c(yf,"class","relative group"),c(Sre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Pre,"href","/docs/transformers/pr_17938/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bre,"href","/docs/transformers/pr_17938/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Eo),e(Eo,Li),b(f,Pf,u),b(f,st,u),e(st,yi),e(st,xi),e(xi,t6),e(st,Bf),b(f,Oe,u),b(f,We,u),e(We,$i),e(We,Pn),e(Pn,a6),e(We,Bn),e(We,In),e(In,n6),e(We,ki),e(We,Nn),e(Nn,s6),e(We,Si),b(f,If,u),M(Sa,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,qS),e(Ae,Ri),e(Ri,jS),e(Ae,DS),b(f,Co,u),b(f,Ra,u),e(Ra,GS),e(Ra,Nf),e(Nf,OS),e(Ra,CHe),b(f,dXe,u),b(f,Pi,u),e(Pi,qf),e(qf,$ae),M(l6,$ae,null),e(Pi,wHe),e(Pi,kae),e(kae,AHe),b(f,cXe,u),b(f,qn,u),e(qn,LHe),e(qn,Sae),e(Sae,yHe),e(qn,xHe),e(qn,Rae),e(Rae,$He),e(qn,kHe),b(f,fXe,u),M(i6,f,u),b(f,mXe,u),b(f,VS,u),e(VS,SHe),b(f,gXe,u),M(jf,f,u),b(f,hXe,u),b(f,Bi,u),e(Bi,Df),e(Df,Pae),M(d6,Pae,null),e(Bi,RHe),e(Bi,Bae),e(Bae,PHe),b(f,pXe,u),b(f,wo,u),M(c6,wo,null),e(wo,BHe),e(wo,f6),e(f6,IHe),e(f6,XS),e(XS,NHe),e(f6,qHe),e(wo,jHe),e(wo,m6),e(m6,DHe),e(m6,Iae),e(Iae,GHe),e(m6,OHe),e(wo,VHe),e(wo,Lr),M(g6,Lr,null),e(Lr,XHe),e(Lr,Nae),e(Nae,zHe),e(Lr,WHe),e(Lr,Ii),e(Ii,QHe),e(Ii,qae),e(qae,HHe),e(Ii,UHe),e(Ii,jae),e(jae,JHe),e(Ii,YHe),e(Lr,KHe),e(Lr,A),e(A,Gf),e(Gf,Dae),e(Dae,ZHe),e(Gf,eUe),e(Gf,zS),e(zS,oUe),e(Gf,rUe),e(A,tUe),e(A,Of),e(Of,Gae),e(Gae,aUe),e(Of,nUe),e(Of,WS),e(WS,sUe),e(Of,lUe),e(A,iUe),e(A,Vf),e(Vf,Oae),e(Oae,dUe),e(Vf,cUe),e(Vf,QS),e(QS,fUe),e(Vf,mUe),e(A,gUe),e(A,Xf),e(Xf,Vae),e(Vae,hUe),e(Xf,pUe),e(Xf,HS),e(HS,_Ue),e(Xf,uUe),e(A,bUe),e(A,zf),e(zf,Xae),e(Xae,vUe),e(zf,FUe),e(zf,US),e(US,TUe),e(zf,MUe),e(A,EUe),e(A,Wf),e(Wf,zae),e(zae,CUe),e(Wf,wUe),e(Wf,JS),e(JS,AUe),e(Wf,LUe),e(A,yUe),e(A,Qf),e(Qf,Wae),e(Wae,xUe),e(Qf,$Ue),e(Qf,YS),e(YS,kUe),e(Qf,SUe),e(A,RUe),e(A,Hf),e(Hf,Qae),e(Qae,PUe),e(Hf,BUe),e(Hf,KS),e(KS,IUe),e(Hf,NUe),e(A,qUe),e(A,Uf),e(Uf,Hae),e(Hae,jUe),e(Uf,DUe),e(Uf,ZS),e(ZS,GUe),e(Uf,OUe),e(A,VUe),e(A,Jf),e(Jf,Uae),e(Uae,XUe),e(Jf,zUe),e(Jf,eR),e(eR,WUe),e(Jf,QUe),e(A,HUe),e(A,Yf),e(Yf,Jae),e(Jae,UUe),e(Yf,JUe),e(Yf,oR),e(oR,YUe),e(Yf,KUe),e(A,ZUe),e(A,Kf),e(Kf,Yae),e(Yae,eJe),e(Kf,oJe),e(Kf,rR),e(rR,rJe),e(Kf,tJe),e(A,aJe),e(A,Zf),e(Zf,Kae),e(Kae,nJe),e(Zf,sJe),e(Zf,tR),e(tR,lJe),e(Zf,iJe),e(A,dJe),e(A,em),e(em,Zae),e(Zae,cJe),e(em,fJe),e(em,aR),e(aR,mJe),e(em,gJe),e(A,hJe),e(A,om),e(om,ene),e(ene,pJe),e(om,_Je),e(om,nR),e(nR,uJe),e(om,bJe),e(A,vJe),e(A,rm),e(rm,one),e(one,FJe),e(rm,TJe),e(rm,sR),e(sR,MJe),e(rm,EJe),e(A,CJe),e(A,tm),e(tm,rne),e(rne,wJe),e(tm,AJe),e(tm,lR),e(lR,LJe),e(tm,yJe),e(A,xJe),e(A,am),e(am,tne),e(tne,$Je),e(am,kJe),e(am,iR),e(iR,SJe),e(am,RJe),e(A,PJe),e(A,nm),e(nm,ane),e(ane,BJe),e(nm,IJe),e(nm,dR),e(dR,NJe),e(nm,qJe),e(A,jJe),e(A,sm),e(sm,nne),e(nne,DJe),e(sm,GJe),e(sm,cR),e(cR,OJe),e(sm,VJe),e(A,XJe),e(A,lm),e(lm,sne),e(sne,zJe),e(lm,WJe),e(lm,fR),e(fR,QJe),e(lm,HJe),e(A,UJe),e(A,im),e(im,lne),e(lne,JJe),e(im,YJe),e(im,mR),e(mR,KJe),e(im,ZJe),e(A,eYe),e(A,dm),e(dm,ine),e(ine,oYe),e(dm,rYe),e(dm,gR),e(gR,tYe),e(dm,aYe),e(A,nYe),e(A,cm),e(cm,dne),e(dne,sYe),e(cm,lYe),e(cm,hR),e(hR,iYe),e(cm,dYe),e(A,cYe),e(A,fm),e(fm,cne),e(cne,fYe),e(fm,mYe),e(fm,pR),e(pR,gYe),e(fm,hYe),e(A,pYe),e(A,mm),e(mm,fne),e(fne,_Ye),e(mm,uYe),e(mm,_R),e(_R,bYe),e(mm,vYe),e(A,FYe),e(A,gm),e(gm,mne),e(mne,TYe),e(gm,MYe),e(gm,uR),e(uR,EYe),e(gm,CYe),e(A,wYe),e(A,hm),e(hm,gne),e(gne,AYe),e(hm,LYe),e(hm,bR),e(bR,yYe),e(hm,xYe),e(A,$Ye),e(A,pm),e(pm,hne),e(hne,kYe),e(pm,SYe),e(pm,vR),e(vR,RYe),e(pm,PYe),e(A,BYe),e(A,_m),e(_m,pne),e(pne,IYe),e(_m,NYe),e(_m,FR),e(FR,qYe),e(_m,jYe),e(A,DYe),e(A,um),e(um,_ne),e(_ne,GYe),e(um,OYe),e(um,TR),e(TR,VYe),e(um,XYe),e(A,zYe),e(A,bm),e(bm,une),e(une,WYe),e(bm,QYe),e(bm,MR),e(MR,HYe),e(bm,UYe),e(A,JYe),e(A,vm),e(vm,bne),e(bne,YYe),e(vm,KYe),e(vm,ER),e(ER,ZYe),e(vm,eKe),e(A,oKe),e(A,Fm),e(Fm,vne),e(vne,rKe),e(Fm,tKe),e(Fm,CR),e(CR,aKe),e(Fm,nKe),e(A,sKe),e(A,Tm),e(Tm,Fne),e(Fne,lKe),e(Tm,iKe),e(Tm,wR),e(wR,dKe),e(Tm,cKe),e(A,fKe),e(A,Mm),e(Mm,Tne),e(Tne,mKe),e(Mm,gKe),e(Mm,AR),e(AR,hKe),e(Mm,pKe),e(A,_Ke),e(A,Em),e(Em,Mne),e(Mne,uKe),e(Em,bKe),e(Em,LR),e(LR,vKe),e(Em,FKe),e(A,TKe),e(A,Cm),e(Cm,Ene),e(Ene,MKe),e(Cm,EKe),e(Cm,yR),e(yR,CKe),e(Cm,wKe),e(A,AKe),e(A,wm),e(wm,Cne),e(Cne,LKe),e(wm,yKe),e(wm,xR),e(xR,xKe),e(wm,$Ke),e(A,kKe),e(A,Am),e(Am,wne),e(wne,SKe),e(Am,RKe),e(Am,$R),e($R,PKe),e(Am,BKe),e(A,IKe),e(A,Lm),e(Lm,Ane),e(Ane,NKe),e(Lm,qKe),e(Lm,kR),e(kR,jKe),e(Lm,DKe),e(A,GKe),e(A,ym),e(ym,Lne),e(Lne,OKe),e(ym,VKe),e(ym,SR),e(SR,XKe),e(ym,zKe),e(A,WKe),e(A,xm),e(xm,yne),e(yne,QKe),e(xm,HKe),e(xm,RR),e(RR,UKe),e(xm,JKe),e(A,YKe),e(A,$m),e($m,xne),e(xne,KKe),e($m,ZKe),e($m,PR),e(PR,eZe),e($m,oZe),e(A,rZe),e(A,km),e(km,$ne),e($ne,tZe),e(km,aZe),e(km,BR),e(BR,nZe),e(km,sZe),e(A,lZe),e(A,Sm),e(Sm,kne),e(kne,iZe),e(Sm,dZe),e(Sm,IR),e(IR,cZe),e(Sm,fZe),e(A,mZe),e(A,Rm),e(Rm,Sne),e(Sne,gZe),e(Rm,hZe),e(Rm,NR),e(NR,pZe),e(Rm,_Ze),e(A,uZe),e(A,Pm),e(Pm,Rne),e(Rne,bZe),e(Pm,vZe),e(Pm,qR),e(qR,FZe),e(Pm,TZe),e(A,MZe),e(A,Bm),e(Bm,Pne),e(Pne,EZe),e(Bm,CZe),e(Bm,jR),e(jR,wZe),e(Bm,AZe),e(A,LZe),e(A,Im),e(Im,Bne),e(Bne,yZe),e(Im,xZe),e(Im,DR),e(DR,$Ze),e(Im,kZe),e(A,SZe),e(A,Nm),e(Nm,Ine),e(Ine,RZe),e(Nm,PZe),e(Nm,GR),e(GR,BZe),e(Nm,IZe),e(A,NZe),e(A,qm),e(qm,Nne),e(Nne,qZe),e(qm,jZe),e(qm,OR),e(OR,DZe),e(qm,GZe),e(A,OZe),e(A,jm),e(jm,qne),e(qne,VZe),e(jm,XZe),e(jm,VR),e(VR,zZe),e(jm,WZe),e(A,QZe),e(A,Dm),e(Dm,jne),e(jne,HZe),e(Dm,UZe),e(Dm,XR),e(XR,JZe),e(Dm,YZe),e(A,KZe),e(A,Gm),e(Gm,Dne),e(Dne,ZZe),e(Gm,eeo),e(Gm,zR),e(zR,oeo),e(Gm,reo),e(A,teo),e(A,Om),e(Om,Gne),e(Gne,aeo),e(Om,neo),e(Om,WR),e(WR,seo),e(Om,leo),e(A,ieo),e(A,Vm),e(Vm,One),e(One,deo),e(Vm,ceo),e(Vm,QR),e(QR,feo),e(Vm,meo),e(A,geo),e(A,Xm),e(Xm,Vne),e(Vne,heo),e(Xm,peo),e(Xm,HR),e(HR,_eo),e(Xm,ueo),e(A,beo),e(A,zm),e(zm,Xne),e(Xne,veo),e(zm,Feo),e(zm,UR),e(UR,Teo),e(zm,Meo),e(A,Eeo),e(A,Wm),e(Wm,zne),e(zne,Ceo),e(Wm,weo),e(Wm,JR),e(JR,Aeo),e(Wm,Leo),e(A,yeo),e(A,Qm),e(Qm,Wne),e(Wne,xeo),e(Qm,$eo),e(Qm,YR),e(YR,keo),e(Qm,Seo),e(A,Reo),e(A,Hm),e(Hm,Qne),e(Qne,Peo),e(Hm,Beo),e(Hm,KR),e(KR,Ieo),e(Hm,Neo),e(A,qeo),e(A,Um),e(Um,Hne),e(Hne,jeo),e(Um,Deo),e(Um,ZR),e(ZR,Geo),e(Um,Oeo),e(A,Veo),e(A,Jm),e(Jm,Une),e(Une,Xeo),e(Jm,zeo),e(Jm,eP),e(eP,Weo),e(Jm,Qeo),e(A,Heo),e(A,Ym),e(Ym,Jne),e(Jne,Ueo),e(Ym,Jeo),e(Ym,oP),e(oP,Yeo),e(Ym,Keo),e(A,Zeo),e(A,Km),e(Km,Yne),e(Yne,eoo),e(Km,ooo),e(Km,rP),e(rP,roo),e(Km,too),e(A,aoo),e(A,Zm),e(Zm,Kne),e(Kne,noo),e(Zm,soo),e(Zm,tP),e(tP,loo),e(Zm,ioo),e(A,doo),e(A,eg),e(eg,Zne),e(Zne,coo),e(eg,foo),e(eg,aP),e(aP,moo),e(eg,goo),e(A,hoo),e(A,og),e(og,ese),e(ese,poo),e(og,_oo),e(og,nP),e(nP,uoo),e(og,boo),e(A,voo),e(A,rg),e(rg,ose),e(ose,Foo),e(rg,Too),e(rg,sP),e(sP,Moo),e(rg,Eoo),e(A,Coo),e(A,tg),e(tg,rse),e(rse,woo),e(tg,Aoo),e(tg,lP),e(lP,Loo),e(tg,yoo),e(A,xoo),e(A,ag),e(ag,tse),e(tse,$oo),e(ag,koo),e(ag,iP),e(iP,Soo),e(ag,Roo),e(A,Poo),e(A,ng),e(ng,ase),e(ase,Boo),e(ng,Ioo),e(ng,dP),e(dP,Noo),e(ng,qoo),e(A,joo),e(A,sg),e(sg,nse),e(nse,Doo),e(sg,Goo),e(sg,cP),e(cP,Ooo),e(sg,Voo),e(A,Xoo),e(A,lg),e(lg,sse),e(sse,zoo),e(lg,Woo),e(lg,fP),e(fP,Qoo),e(lg,Hoo),e(A,Uoo),e(A,ig),e(ig,lse),e(lse,Joo),e(ig,Yoo),e(ig,mP),e(mP,Koo),e(ig,Zoo),e(A,ero),e(A,dg),e(dg,ise),e(ise,oro),e(dg,rro),e(dg,gP),e(gP,tro),e(dg,aro),e(A,nro),e(A,cg),e(cg,dse),e(dse,sro),e(cg,lro),e(cg,hP),e(hP,iro),e(cg,dro),e(A,cro),e(A,fg),e(fg,cse),e(cse,fro),e(fg,mro),e(fg,pP),e(pP,gro),e(fg,hro),e(A,pro),e(A,mg),e(mg,fse),e(fse,_ro),e(mg,uro),e(mg,_P),e(_P,bro),e(mg,vro),e(A,Fro),e(A,gg),e(gg,mse),e(mse,Tro),e(gg,Mro),e(gg,uP),e(uP,Ero),e(gg,Cro),e(A,wro),e(A,hg),e(hg,gse),e(gse,Aro),e(hg,Lro),e(hg,bP),e(bP,yro),e(hg,xro),e(A,$ro),e(A,pg),e(pg,hse),e(hse,kro),e(pg,Sro),e(pg,vP),e(vP,Rro),e(pg,Pro),e(A,Bro),e(A,_g),e(_g,pse),e(pse,Iro),e(_g,Nro),e(_g,FP),e(FP,qro),e(_g,jro),e(A,Dro),e(A,ug),e(ug,_se),e(_se,Gro),e(ug,Oro),e(ug,TP),e(TP,Vro),e(ug,Xro),e(A,zro),e(A,bg),e(bg,use),e(use,Wro),e(bg,Qro),e(bg,MP),e(MP,Hro),e(bg,Uro),e(A,Jro),e(A,vg),e(vg,bse),e(bse,Yro),e(vg,Kro),e(vg,EP),e(EP,Zro),e(vg,eto),e(A,oto),e(A,Fg),e(Fg,vse),e(vse,rto),e(Fg,tto),e(Fg,CP),e(CP,ato),e(Fg,nto),e(A,sto),e(A,Tg),e(Tg,Fse),e(Fse,lto),e(Tg,ito),e(Tg,wP),e(wP,dto),e(Tg,cto),e(A,fto),e(A,Mg),e(Mg,Tse),e(Tse,mto),e(Mg,gto),e(Mg,AP),e(AP,hto),e(Mg,pto),e(A,_to),e(A,Eg),e(Eg,Mse),e(Mse,uto),e(Eg,bto),e(Eg,LP),e(LP,vto),e(Eg,Fto),e(A,Tto),e(A,Cg),e(Cg,Ese),e(Ese,Mto),e(Cg,Eto),e(Cg,yP),e(yP,Cto),e(Cg,wto),e(A,Ato),e(A,wg),e(wg,Cse),e(Cse,Lto),e(wg,yto),e(wg,xP),e(xP,xto),e(wg,$to),e(A,kto),e(A,Ag),e(Ag,wse),e(wse,Sto),e(Ag,Rto),e(Ag,$P),e($P,Pto),e(Ag,Bto),e(A,Ito),e(A,Lg),e(Lg,Ase),e(Ase,Nto),e(Lg,qto),e(Lg,kP),e(kP,jto),e(Lg,Dto),e(A,Gto),e(A,yg),e(yg,Lse),e(Lse,Oto),e(yg,Vto),e(yg,SP),e(SP,Xto),e(yg,zto),e(A,Wto),e(A,xg),e(xg,yse),e(yse,Qto),e(xg,Hto),e(xg,RP),e(RP,Uto),e(xg,Jto),e(A,Yto),e(A,$g),e($g,xse),e(xse,Kto),e($g,Zto),e($g,PP),e(PP,eao),e($g,oao),e(A,rao),e(A,kg),e(kg,$se),e($se,tao),e(kg,aao),e(kg,BP),e(BP,nao),e(kg,sao),e(A,lao),e(A,Sg),e(Sg,kse),e(kse,iao),e(Sg,dao),e(Sg,IP),e(IP,cao),e(Sg,fao),e(A,mao),e(A,Rg),e(Rg,Sse),e(Sse,gao),e(Rg,hao),e(Rg,NP),e(NP,pao),e(Rg,_ao),e(A,uao),e(A,Pg),e(Pg,Rse),e(Rse,bao),e(Pg,vao),e(Pg,qP),e(qP,Fao),e(Pg,Tao),e(A,Mao),e(A,Bg),e(Bg,Pse),e(Pse,Eao),e(Bg,Cao),e(Bg,jP),e(jP,wao),e(Bg,Aao),e(A,Lao),e(A,Ig),e(Ig,Bse),e(Bse,yao),e(Ig,xao),e(Ig,DP),e(DP,$ao),e(Ig,kao),e(A,Sao),e(A,Ng),e(Ng,Ise),e(Ise,Rao),e(Ng,Pao),e(Ng,GP),e(GP,Bao),e(Ng,Iao),e(A,Nao),e(A,qg),e(qg,Nse),e(Nse,qao),e(qg,jao),e(qg,OP),e(OP,Dao),e(qg,Gao),e(A,Oao),e(A,jg),e(jg,qse),e(qse,Vao),e(jg,Xao),e(jg,VP),e(VP,zao),e(jg,Wao),e(A,Qao),e(A,Dg),e(Dg,jse),e(jse,Hao),e(Dg,Uao),e(Dg,XP),e(XP,Jao),e(Dg,Yao),e(A,Kao),e(A,Gg),e(Gg,Dse),e(Dse,Zao),e(Gg,eno),e(Gg,zP),e(zP,ono),e(Gg,rno),e(A,tno),e(A,Og),e(Og,Gse),e(Gse,ano),e(Og,nno),e(Og,WP),e(WP,sno),e(Og,lno),e(A,ino),e(A,Vg),e(Vg,Ose),e(Ose,dno),e(Vg,cno),e(Vg,QP),e(QP,fno),e(Vg,mno),e(A,gno),e(A,Xg),e(Xg,Vse),e(Vse,hno),e(Xg,pno),e(Xg,HP),e(HP,_no),e(Xg,uno),e(A,bno),e(A,zg),e(zg,Xse),e(Xse,vno),e(zg,Fno),e(zg,UP),e(UP,Tno),e(zg,Mno),e(A,Eno),e(A,Wg),e(Wg,zse),e(zse,Cno),e(Wg,wno),e(Wg,JP),e(JP,Ano),e(Wg,Lno),e(A,yno),e(A,Qg),e(Qg,Wse),e(Wse,xno),e(Qg,$no),e(Qg,YP),e(YP,kno),e(Qg,Sno),e(A,Rno),e(A,Hg),e(Hg,Qse),e(Qse,Pno),e(Hg,Bno),e(Hg,KP),e(KP,Ino),e(Hg,Nno),e(A,qno),e(A,Ug),e(Ug,Hse),e(Hse,jno),e(Ug,Dno),e(Ug,ZP),e(ZP,Gno),e(Ug,Ono),e(A,Vno),e(A,Jg),e(Jg,Use),e(Use,Xno),e(Jg,zno),e(Jg,eB),e(eB,Wno),e(Jg,Qno),e(A,Hno),e(A,Yg),e(Yg,Jse),e(Jse,Uno),e(Yg,Jno),e(Yg,oB),e(oB,Yno),e(Yg,Kno),e(Lr,Zno),M(Kg,Lr,null),e(wo,eso),e(wo,Zg),M(h6,Zg,null),e(Zg,oso),e(Zg,Yse),e(Yse,rso),b(f,_Xe,u),b(f,Ni,u),e(Ni,eh),e(eh,Kse),M(p6,Kse,null),e(Ni,tso),e(Ni,Zse),e(Zse,aso),b(f,uXe,u),b(f,Ao,u),M(_6,Ao,null),e(Ao,nso),e(Ao,u6),e(u6,sso),e(u6,rB),e(rB,lso),e(u6,iso),e(Ao,dso),e(Ao,b6),e(b6,cso),e(b6,ele),e(ele,fso),e(b6,mso),e(Ao,gso),e(Ao,yr),M(v6,yr,null),e(yr,hso),e(yr,ole),e(ole,pso),e(yr,_so),e(yr,Pa),e(Pa,uso),e(Pa,rle),e(rle,bso),e(Pa,vso),e(Pa,tle),e(tle,Fso),e(Pa,Tso),e(Pa,ale),e(ale,Mso),e(Pa,Eso),e(yr,Cso),e(yr,k),e(k,jn),e(jn,nle),e(nle,wso),e(jn,Aso),e(jn,tB),e(tB,Lso),e(jn,yso),e(jn,aB),e(aB,xso),e(jn,$so),e(k,kso),e(k,Dn),e(Dn,sle),e(sle,Sso),e(Dn,Rso),e(Dn,nB),e(nB,Pso),e(Dn,Bso),e(Dn,sB),e(sB,Iso),e(Dn,Nso),e(k,qso),e(k,Gn),e(Gn,lle),e(lle,jso),e(Gn,Dso),e(Gn,lB),e(lB,Gso),e(Gn,Oso),e(Gn,iB),e(iB,Vso),e(Gn,Xso),e(k,zso),e(k,oh),e(oh,ile),e(ile,Wso),e(oh,Qso),e(oh,dB),e(dB,Hso),e(oh,Uso),e(k,Jso),e(k,On),e(On,dle),e(dle,Yso),e(On,Kso),e(On,cB),e(cB,Zso),e(On,elo),e(On,fB),e(fB,olo),e(On,rlo),e(k,tlo),e(k,rh),e(rh,cle),e(cle,alo),e(rh,nlo),e(rh,mB),e(mB,slo),e(rh,llo),e(k,ilo),e(k,th),e(th,fle),e(fle,dlo),e(th,clo),e(th,gB),e(gB,flo),e(th,mlo),e(k,glo),e(k,ah),e(ah,mle),e(mle,hlo),e(ah,plo),e(ah,hB),e(hB,_lo),e(ah,ulo),e(k,blo),e(k,Vn),e(Vn,gle),e(gle,vlo),e(Vn,Flo),e(Vn,pB),e(pB,Tlo),e(Vn,Mlo),e(Vn,_B),e(_B,Elo),e(Vn,Clo),e(k,wlo),e(k,Xn),e(Xn,hle),e(hle,Alo),e(Xn,Llo),e(Xn,uB),e(uB,ylo),e(Xn,xlo),e(Xn,bB),e(bB,$lo),e(Xn,klo),e(k,Slo),e(k,zn),e(zn,ple),e(ple,Rlo),e(zn,Plo),e(zn,vB),e(vB,Blo),e(zn,Ilo),e(zn,FB),e(FB,Nlo),e(zn,qlo),e(k,jlo),e(k,nh),e(nh,_le),e(_le,Dlo),e(nh,Glo),e(nh,TB),e(TB,Olo),e(nh,Vlo),e(k,Xlo),e(k,sh),e(sh,ule),e(ule,zlo),e(sh,Wlo),e(sh,MB),e(MB,Qlo),e(sh,Hlo),e(k,Ulo),e(k,lh),e(lh,ble),e(ble,Jlo),e(lh,Ylo),e(lh,EB),e(EB,Klo),e(lh,Zlo),e(k,eio),e(k,Wn),e(Wn,vle),e(vle,oio),e(Wn,rio),e(Wn,CB),e(CB,tio),e(Wn,aio),e(Wn,wB),e(wB,nio),e(Wn,sio),e(k,lio),e(k,ih),e(ih,Fle),e(Fle,iio),e(ih,dio),e(ih,AB),e(AB,cio),e(ih,fio),e(k,mio),e(k,Qn),e(Qn,Tle),e(Tle,gio),e(Qn,hio),e(Qn,LB),e(LB,pio),e(Qn,_io),e(Qn,yB),e(yB,uio),e(Qn,bio),e(k,vio),e(k,Hn),e(Hn,Mle),e(Mle,Fio),e(Hn,Tio),e(Hn,xB),e(xB,Mio),e(Hn,Eio),e(Hn,$B),e($B,Cio),e(Hn,wio),e(k,Aio),e(k,Un),e(Un,Ele),e(Ele,Lio),e(Un,yio),e(Un,kB),e(kB,xio),e(Un,$io),e(Un,SB),e(SB,kio),e(Un,Sio),e(k,Rio),e(k,Jn),e(Jn,Cle),e(Cle,Pio),e(Jn,Bio),e(Jn,RB),e(RB,Iio),e(Jn,Nio),e(Jn,PB),e(PB,qio),e(Jn,jio),e(k,Dio),e(k,dh),e(dh,wle),e(wle,Gio),e(dh,Oio),e(dh,BB),e(BB,Vio),e(dh,Xio),e(k,zio),e(k,Yn),e(Yn,Ale),e(Ale,Wio),e(Yn,Qio),e(Yn,IB),e(IB,Hio),e(Yn,Uio),e(Yn,NB),e(NB,Jio),e(Yn,Yio),e(k,Kio),e(k,Kn),e(Kn,Lle),e(Lle,Zio),e(Kn,edo),e(Kn,qB),e(qB,odo),e(Kn,rdo),e(Kn,jB),e(jB,tdo),e(Kn,ado),e(k,ndo),e(k,Zn),e(Zn,yle),e(yle,sdo),e(Zn,ldo),e(Zn,DB),e(DB,ido),e(Zn,ddo),e(Zn,GB),e(GB,cdo),e(Zn,fdo),e(k,mdo),e(k,es),e(es,xle),e(xle,gdo),e(es,hdo),e(es,OB),e(OB,pdo),e(es,_do),e(es,VB),e(VB,udo),e(es,bdo),e(k,vdo),e(k,os),e(os,$le),e($le,Fdo),e(os,Tdo),e(os,XB),e(XB,Mdo),e(os,Edo),e(os,zB),e(zB,Cdo),e(os,wdo),e(k,Ado),e(k,rs),e(rs,kle),e(kle,Ldo),e(rs,ydo),e(rs,WB),e(WB,xdo),e(rs,$do),e(rs,QB),e(QB,kdo),e(rs,Sdo),e(k,Rdo),e(k,ch),e(ch,Sle),e(Sle,Pdo),e(ch,Bdo),e(ch,HB),e(HB,Ido),e(ch,Ndo),e(k,qdo),e(k,ts),e(ts,Rle),e(Rle,jdo),e(ts,Ddo),e(ts,UB),e(UB,Gdo),e(ts,Odo),e(ts,JB),e(JB,Vdo),e(ts,Xdo),e(k,zdo),e(k,fh),e(fh,Ple),e(Ple,Wdo),e(fh,Qdo),e(fh,YB),e(YB,Hdo),e(fh,Udo),e(k,Jdo),e(k,as),e(as,Ble),e(Ble,Ydo),e(as,Kdo),e(as,KB),e(KB,Zdo),e(as,eco),e(as,ZB),e(ZB,oco),e(as,rco),e(k,tco),e(k,ns),e(ns,Ile),e(Ile,aco),e(ns,nco),e(ns,eI),e(eI,sco),e(ns,lco),e(ns,oI),e(oI,ico),e(ns,dco),e(k,cco),e(k,ss),e(ss,Nle),e(Nle,fco),e(ss,mco),e(ss,rI),e(rI,gco),e(ss,hco),e(ss,tI),e(tI,pco),e(ss,_co),e(k,uco),e(k,mh),e(mh,qle),e(qle,bco),e(mh,vco),e(mh,aI),e(aI,Fco),e(mh,Tco),e(k,Mco),e(k,ls),e(ls,jle),e(jle,Eco),e(ls,Cco),e(ls,nI),e(nI,wco),e(ls,Aco),e(ls,sI),e(sI,Lco),e(ls,yco),e(k,xco),e(k,is),e(is,Dle),e(Dle,$co),e(is,kco),e(is,lI),e(lI,Sco),e(is,Rco),e(is,iI),e(iI,Pco),e(is,Bco),e(k,Ico),e(k,ds),e(ds,Gle),e(Gle,Nco),e(ds,qco),e(ds,dI),e(dI,jco),e(ds,Dco),e(ds,cI),e(cI,Gco),e(ds,Oco),e(k,Vco),e(k,gh),e(gh,Ole),e(Ole,Xco),e(gh,zco),e(gh,fI),e(fI,Wco),e(gh,Qco),e(k,Hco),e(k,cs),e(cs,Vle),e(Vle,Uco),e(cs,Jco),e(cs,mI),e(mI,Yco),e(cs,Kco),e(cs,gI),e(gI,Zco),e(cs,efo),e(k,ofo),e(k,fs),e(fs,Xle),e(Xle,rfo),e(fs,tfo),e(fs,hI),e(hI,afo),e(fs,nfo),e(fs,pI),e(pI,sfo),e(fs,lfo),e(k,ifo),e(k,ms),e(ms,zle),e(zle,dfo),e(ms,cfo),e(ms,_I),e(_I,ffo),e(ms,mfo),e(ms,uI),e(uI,gfo),e(ms,hfo),e(k,pfo),e(k,gs),e(gs,Wle),e(Wle,_fo),e(gs,ufo),e(gs,bI),e(bI,bfo),e(gs,vfo),e(gs,vI),e(vI,Ffo),e(gs,Tfo),e(k,Mfo),e(k,hs),e(hs,Qle),e(Qle,Efo),e(hs,Cfo),e(hs,FI),e(FI,wfo),e(hs,Afo),e(hs,TI),e(TI,Lfo),e(hs,yfo),e(k,xfo),e(k,ps),e(ps,Hle),e(Hle,$fo),e(ps,kfo),e(ps,MI),e(MI,Sfo),e(ps,Rfo),e(ps,EI),e(EI,Pfo),e(ps,Bfo),e(k,Ifo),e(k,_s),e(_s,Ule),e(Ule,Nfo),e(_s,qfo),e(_s,CI),e(CI,jfo),e(_s,Dfo),e(_s,wI),e(wI,Gfo),e(_s,Ofo),e(k,Vfo),e(k,us),e(us,Jle),e(Jle,Xfo),e(us,zfo),e(us,AI),e(AI,Wfo),e(us,Qfo),e(us,LI),e(LI,Hfo),e(us,Ufo),e(k,Jfo),e(k,hh),e(hh,Yle),e(Yle,Yfo),e(hh,Kfo),e(hh,yI),e(yI,Zfo),e(hh,emo),e(k,omo),e(k,bs),e(bs,Kle),e(Kle,rmo),e(bs,tmo),e(bs,xI),e(xI,amo),e(bs,nmo),e(bs,$I),e($I,smo),e(bs,lmo),e(k,imo),e(k,ph),e(ph,Zle),e(Zle,dmo),e(ph,cmo),e(ph,kI),e(kI,fmo),e(ph,mmo),e(k,gmo),e(k,_h),e(_h,eie),e(eie,hmo),e(_h,pmo),e(_h,SI),e(SI,_mo),e(_h,umo),e(k,bmo),e(k,vs),e(vs,oie),e(oie,vmo),e(vs,Fmo),e(vs,RI),e(RI,Tmo),e(vs,Mmo),e(vs,PI),e(PI,Emo),e(vs,Cmo),e(k,wmo),e(k,Fs),e(Fs,rie),e(rie,Amo),e(Fs,Lmo),e(Fs,BI),e(BI,ymo),e(Fs,xmo),e(Fs,II),e(II,$mo),e(Fs,kmo),e(k,Smo),e(k,Ts),e(Ts,tie),e(tie,Rmo),e(Ts,Pmo),e(Ts,NI),e(NI,Bmo),e(Ts,Imo),e(Ts,qI),e(qI,Nmo),e(Ts,qmo),e(k,jmo),e(k,uh),e(uh,aie),e(aie,Dmo),e(uh,Gmo),e(uh,jI),e(jI,Omo),e(uh,Vmo),e(k,Xmo),e(k,Ms),e(Ms,nie),e(nie,zmo),e(Ms,Wmo),e(Ms,DI),e(DI,Qmo),e(Ms,Hmo),e(Ms,GI),e(GI,Umo),e(Ms,Jmo),e(k,Ymo),e(k,Es),e(Es,sie),e(sie,Kmo),e(Es,Zmo),e(Es,OI),e(OI,ego),e(Es,ogo),e(Es,VI),e(VI,rgo),e(Es,tgo),e(k,ago),e(k,Cs),e(Cs,lie),e(lie,ngo),e(Cs,sgo),e(Cs,XI),e(XI,lgo),e(Cs,igo),e(Cs,zI),e(zI,dgo),e(Cs,cgo),e(k,fgo),e(k,ws),e(ws,iie),e(iie,mgo),e(ws,ggo),e(ws,WI),e(WI,hgo),e(ws,pgo),e(ws,QI),e(QI,_go),e(ws,ugo),e(k,bgo),e(k,As),e(As,die),e(die,vgo),e(As,Fgo),e(As,HI),e(HI,Tgo),e(As,Mgo),e(As,UI),e(UI,Ego),e(As,Cgo),e(k,wgo),e(k,Ls),e(Ls,cie),e(cie,Ago),e(Ls,Lgo),e(Ls,JI),e(JI,ygo),e(Ls,xgo),e(Ls,YI),e(YI,$go),e(Ls,kgo),e(k,Sgo),e(k,ys),e(ys,fie),e(fie,Rgo),e(ys,Pgo),e(ys,KI),e(KI,Bgo),e(ys,Igo),e(ys,ZI),e(ZI,Ngo),e(ys,qgo),e(k,jgo),e(k,bh),e(bh,mie),e(mie,Dgo),e(bh,Ggo),e(bh,eN),e(eN,Ogo),e(bh,Vgo),e(k,Xgo),e(k,xs),e(xs,gie),e(gie,zgo),e(xs,Wgo),e(xs,oN),e(oN,Qgo),e(xs,Hgo),e(xs,rN),e(rN,Ugo),e(xs,Jgo),e(k,Ygo),e(k,$s),e($s,hie),e(hie,Kgo),e($s,Zgo),e($s,tN),e(tN,eho),e($s,oho),e($s,aN),e(aN,rho),e($s,tho),e(k,aho),e(k,vh),e(vh,pie),e(pie,nho),e(vh,sho),e(vh,nN),e(nN,lho),e(vh,iho),e(k,dho),e(k,Fh),e(Fh,_ie),e(_ie,cho),e(Fh,fho),e(Fh,sN),e(sN,mho),e(Fh,gho),e(k,hho),e(k,Th),e(Th,uie),e(uie,pho),e(Th,_ho),e(Th,lN),e(lN,uho),e(Th,bho),e(k,vho),e(k,Mh),e(Mh,bie),e(bie,Fho),e(Mh,Tho),e(Mh,iN),e(iN,Mho),e(Mh,Eho),e(k,Cho),e(k,ks),e(ks,vie),e(vie,who),e(ks,Aho),e(ks,dN),e(dN,Lho),e(ks,yho),e(ks,cN),e(cN,xho),e(ks,$ho),e(k,kho),e(k,Eh),e(Eh,Fie),e(Fie,Sho),e(Eh,Rho),e(Eh,fN),e(fN,Pho),e(Eh,Bho),e(k,Iho),e(k,Ss),e(Ss,Tie),e(Tie,Nho),e(Ss,qho),e(Ss,mN),e(mN,jho),e(Ss,Dho),e(Ss,gN),e(gN,Gho),e(Ss,Oho),e(k,Vho),e(k,Rs),e(Rs,Mie),e(Mie,Xho),e(Rs,zho),e(Rs,hN),e(hN,Who),e(Rs,Qho),e(Rs,pN),e(pN,Hho),e(Rs,Uho),e(k,Jho),e(k,Ps),e(Ps,Eie),e(Eie,Yho),e(Ps,Kho),e(Ps,_N),e(_N,Zho),e(Ps,epo),e(Ps,uN),e(uN,opo),e(Ps,rpo),e(k,tpo),e(k,Bs),e(Bs,Cie),e(Cie,apo),e(Bs,npo),e(Bs,bN),e(bN,spo),e(Bs,lpo),e(Bs,vN),e(vN,ipo),e(Bs,dpo),e(k,cpo),e(k,Is),e(Is,wie),e(wie,fpo),e(Is,mpo),e(Is,FN),e(FN,gpo),e(Is,hpo),e(Is,TN),e(TN,ppo),e(Is,_po),e(k,upo),e(k,Ns),e(Ns,Aie),e(Aie,bpo),e(Ns,vpo),e(Ns,MN),e(MN,Fpo),e(Ns,Tpo),e(Ns,EN),e(EN,Mpo),e(Ns,Epo),e(k,Cpo),e(k,Ch),e(Ch,Lie),e(Lie,wpo),e(Ch,Apo),e(Ch,CN),e(CN,Lpo),e(Ch,ypo),e(k,xpo),e(k,wh),e(wh,yie),e(yie,$po),e(wh,kpo),e(wh,wN),e(wN,Spo),e(wh,Rpo),e(k,Ppo),e(k,qs),e(qs,xie),e(xie,Bpo),e(qs,Ipo),e(qs,AN),e(AN,Npo),e(qs,qpo),e(qs,LN),e(LN,jpo),e(qs,Dpo),e(k,Gpo),e(k,js),e(js,$ie),e($ie,Opo),e(js,Vpo),e(js,yN),e(yN,Xpo),e(js,zpo),e(js,xN),e(xN,Wpo),e(js,Qpo),e(k,Hpo),e(k,Ds),e(Ds,kie),e(kie,Upo),e(Ds,Jpo),e(Ds,$N),e($N,Ypo),e(Ds,Kpo),e(Ds,kN),e(kN,Zpo),e(Ds,e_o),e(k,o_o),e(k,Ah),e(Ah,Sie),e(Sie,r_o),e(Ah,t_o),e(Ah,SN),e(SN,a_o),e(Ah,n_o),e(k,s_o),e(k,Lh),e(Lh,Rie),e(Rie,l_o),e(Lh,i_o),e(Lh,RN),e(RN,d_o),e(Lh,c_o),e(k,f_o),e(k,yh),e(yh,Pie),e(Pie,m_o),e(yh,g_o),e(yh,PN),e(PN,h_o),e(yh,p_o),e(k,__o),e(k,Gs),e(Gs,Bie),e(Bie,u_o),e(Gs,b_o),e(Gs,BN),e(BN,v_o),e(Gs,F_o),e(Gs,IN),e(IN,T_o),e(Gs,M_o),e(k,E_o),e(k,Os),e(Os,Iie),e(Iie,C_o),e(Os,w_o),e(Os,NN),e(NN,A_o),e(Os,L_o),e(Os,qN),e(qN,y_o),e(Os,x_o),e(k,$_o),e(k,xh),e(xh,Nie),e(Nie,k_o),e(xh,S_o),e(xh,jN),e(jN,R_o),e(xh,P_o),e(k,B_o),e(k,$h),e($h,qie),e(qie,I_o),e($h,N_o),e($h,DN),e(DN,q_o),e($h,j_o),e(k,D_o),e(k,kh),e(kh,jie),e(jie,G_o),e(kh,O_o),e(kh,GN),e(GN,V_o),e(kh,X_o),e(k,z_o),e(k,Vs),e(Vs,Die),e(Die,W_o),e(Vs,Q_o),e(Vs,ON),e(ON,H_o),e(Vs,U_o),e(Vs,VN),e(VN,J_o),e(Vs,Y_o),e(k,K_o),e(k,Sh),e(Sh,Gie),e(Gie,Z_o),e(Sh,euo),e(Sh,XN),e(XN,ouo),e(Sh,ruo),e(k,tuo),e(k,Rh),e(Rh,Oie),e(Oie,auo),e(Rh,nuo),e(Rh,zN),e(zN,suo),e(Rh,luo),e(k,iuo),e(k,Xs),e(Xs,Vie),e(Vie,duo),e(Xs,cuo),e(Xs,WN),e(WN,fuo),e(Xs,muo),e(Xs,QN),e(QN,guo),e(Xs,huo),e(k,puo),e(k,zs),e(zs,Xie),e(Xie,_uo),e(zs,uuo),e(zs,HN),e(HN,buo),e(zs,vuo),e(zs,UN),e(UN,Fuo),e(zs,Tuo),e(k,Muo),e(k,Ws),e(Ws,zie),e(zie,Euo),e(Ws,Cuo),e(Ws,JN),e(JN,wuo),e(Ws,Auo),e(Ws,YN),e(YN,Luo),e(Ws,yuo),e(k,xuo),e(k,Qs),e(Qs,Wie),e(Wie,$uo),e(Qs,kuo),e(Qs,KN),e(KN,Suo),e(Qs,Ruo),e(Qs,ZN),e(ZN,Puo),e(Qs,Buo),e(yr,Iuo),M(Ph,yr,null),e(Ao,Nuo),e(Ao,Bh),M(F6,Bh,null),e(Bh,quo),e(Bh,Qie),e(Qie,juo),b(f,bXe,u),b(f,qi,u),e(qi,Ih),e(Ih,Hie),M(T6,Hie,null),e(qi,Duo),e(qi,Uie),e(Uie,Guo),b(f,vXe,u),b(f,Lo,u),M(M6,Lo,null),e(Lo,Ouo),e(Lo,E6),e(E6,Vuo),e(E6,eq),e(eq,Xuo),e(E6,zuo),e(Lo,Wuo),e(Lo,C6),e(C6,Quo),e(C6,Jie),e(Jie,Huo),e(C6,Uuo),e(Lo,Juo),e(Lo,He),M(w6,He,null),e(He,Yuo),e(He,Yie),e(Yie,Kuo),e(He,Zuo),e(He,Ba),e(Ba,e1o),e(Ba,Kie),e(Kie,o1o),e(Ba,r1o),e(Ba,Zie),e(Zie,t1o),e(Ba,a1o),e(Ba,ede),e(ede,n1o),e(Ba,s1o),e(He,l1o),e(He,J),e(J,Nh),e(Nh,ode),e(ode,i1o),e(Nh,d1o),e(Nh,oq),e(oq,c1o),e(Nh,f1o),e(J,m1o),e(J,qh),e(qh,rde),e(rde,g1o),e(qh,h1o),e(qh,rq),e(rq,p1o),e(qh,_1o),e(J,u1o),e(J,jh),e(jh,tde),e(tde,b1o),e(jh,v1o),e(jh,tq),e(tq,F1o),e(jh,T1o),e(J,M1o),e(J,Dh),e(Dh,ade),e(ade,E1o),e(Dh,C1o),e(Dh,aq),e(aq,w1o),e(Dh,A1o),e(J,L1o),e(J,Gh),e(Gh,nde),e(nde,y1o),e(Gh,x1o),e(Gh,nq),e(nq,$1o),e(Gh,k1o),e(J,S1o),e(J,Oh),e(Oh,sde),e(sde,R1o),e(Oh,P1o),e(Oh,sq),e(sq,B1o),e(Oh,I1o),e(J,N1o),e(J,Vh),e(Vh,lde),e(lde,q1o),e(Vh,j1o),e(Vh,lq),e(lq,D1o),e(Vh,G1o),e(J,O1o),e(J,Xh),e(Xh,ide),e(ide,V1o),e(Xh,X1o),e(Xh,iq),e(iq,z1o),e(Xh,W1o),e(J,Q1o),e(J,zh),e(zh,dde),e(dde,H1o),e(zh,U1o),e(zh,dq),e(dq,J1o),e(zh,Y1o),e(J,K1o),e(J,Wh),e(Wh,cde),e(cde,Z1o),e(Wh,e2o),e(Wh,cq),e(cq,o2o),e(Wh,r2o),e(J,t2o),e(J,Qh),e(Qh,fde),e(fde,a2o),e(Qh,n2o),e(Qh,fq),e(fq,s2o),e(Qh,l2o),e(J,i2o),e(J,Hh),e(Hh,mde),e(mde,d2o),e(Hh,c2o),e(Hh,mq),e(mq,f2o),e(Hh,m2o),e(J,g2o),e(J,Uh),e(Uh,gde),e(gde,h2o),e(Uh,p2o),e(Uh,gq),e(gq,_2o),e(Uh,u2o),e(J,b2o),e(J,Jh),e(Jh,hde),e(hde,v2o),e(Jh,F2o),e(Jh,hq),e(hq,T2o),e(Jh,M2o),e(J,E2o),e(J,Yh),e(Yh,pde),e(pde,C2o),e(Yh,w2o),e(Yh,pq),e(pq,A2o),e(Yh,L2o),e(J,y2o),e(J,Kh),e(Kh,_de),e(_de,x2o),e(Kh,$2o),e(Kh,_q),e(_q,k2o),e(Kh,S2o),e(J,R2o),e(J,Zh),e(Zh,ude),e(ude,P2o),e(Zh,B2o),e(Zh,uq),e(uq,I2o),e(Zh,N2o),e(J,q2o),e(J,ep),e(ep,bde),e(bde,j2o),e(ep,D2o),e(ep,bq),e(bq,G2o),e(ep,O2o),e(J,V2o),e(J,op),e(op,vde),e(vde,X2o),e(op,z2o),e(op,vq),e(vq,W2o),e(op,Q2o),e(J,H2o),e(J,rp),e(rp,Fde),e(Fde,U2o),e(rp,J2o),e(rp,Fq),e(Fq,Y2o),e(rp,K2o),e(J,Z2o),e(J,tp),e(tp,Tde),e(Tde,ebo),e(tp,obo),e(tp,Tq),e(Tq,rbo),e(tp,tbo),e(J,abo),e(J,ap),e(ap,Mde),e(Mde,nbo),e(ap,sbo),e(ap,Mq),e(Mq,lbo),e(ap,ibo),e(J,dbo),e(J,np),e(np,Ede),e(Ede,cbo),e(np,fbo),e(np,Eq),e(Eq,mbo),e(np,gbo),e(J,hbo),e(J,sp),e(sp,Cde),e(Cde,pbo),e(sp,_bo),e(sp,Cq),e(Cq,ubo),e(sp,bbo),e(J,vbo),e(J,lp),e(lp,wde),e(wde,Fbo),e(lp,Tbo),e(lp,wq),e(wq,Mbo),e(lp,Ebo),e(J,Cbo),e(J,ip),e(ip,Ade),e(Ade,wbo),e(ip,Abo),e(ip,Aq),e(Aq,Lbo),e(ip,ybo),e(J,xbo),e(J,dp),e(dp,Lde),e(Lde,$bo),e(dp,kbo),e(dp,Lq),e(Lq,Sbo),e(dp,Rbo),e(J,Pbo),e(J,cp),e(cp,yde),e(yde,Bbo),e(cp,Ibo),e(cp,yq),e(yq,Nbo),e(cp,qbo),e(J,jbo),e(J,fp),e(fp,xde),e(xde,Dbo),e(fp,Gbo),e(fp,xq),e(xq,Obo),e(fp,Vbo),e(J,Xbo),e(J,mp),e(mp,$de),e($de,zbo),e(mp,Wbo),e(mp,$q),e($q,Qbo),e(mp,Hbo),e(J,Ubo),e(J,gp),e(gp,kde),e(kde,Jbo),e(gp,Ybo),e(gp,kq),e(kq,Kbo),e(gp,Zbo),e(J,evo),e(J,hp),e(hp,Sde),e(Sde,ovo),e(hp,rvo),e(hp,Sq),e(Sq,tvo),e(hp,avo),e(J,nvo),e(J,pp),e(pp,Rde),e(Rde,svo),e(pp,lvo),e(pp,Rq),e(Rq,ivo),e(pp,dvo),e(J,cvo),e(J,_p),e(_p,Pde),e(Pde,fvo),e(_p,mvo),e(_p,Pq),e(Pq,gvo),e(_p,hvo),e(J,pvo),e(J,up),e(up,Bde),e(Bde,_vo),e(up,uvo),e(up,Bq),e(Bq,bvo),e(up,vvo),e(He,Fvo),M(bp,He,null),e(He,Tvo),M(vp,He,null),e(Lo,Mvo),e(Lo,Fp),M(A6,Fp,null),e(Fp,Evo),e(Fp,Ide),e(Ide,Cvo),b(f,FXe,u),b(f,ji,u),e(ji,Tp),e(Tp,Nde),M(L6,Nde,null),e(ji,wvo),e(ji,qde),e(qde,Avo),b(f,TXe,u),b(f,yo,u),M(y6,yo,null),e(yo,Lvo),e(yo,x6),e(x6,yvo),e(x6,Iq),e(Iq,xvo),e(x6,$vo),e(yo,kvo),e(yo,$6),e($6,Svo),e($6,jde),e(jde,Rvo),e($6,Pvo),e(yo,Bvo),e(yo,Ue),M(k6,Ue,null),e(Ue,Ivo),e(Ue,Dde),e(Dde,Nvo),e(Ue,qvo),e(Ue,Di),e(Di,jvo),e(Di,Gde),e(Gde,Dvo),e(Di,Gvo),e(Di,Ode),e(Ode,Ovo),e(Di,Vvo),e(Ue,Xvo),e(Ue,fe),e(fe,Mp),e(Mp,Vde),e(Vde,zvo),e(Mp,Wvo),e(Mp,Nq),e(Nq,Qvo),e(Mp,Hvo),e(fe,Uvo),e(fe,Ep),e(Ep,Xde),e(Xde,Jvo),e(Ep,Yvo),e(Ep,zde),e(zde,Kvo),e(Ep,Zvo),e(fe,e3o),e(fe,Cp),e(Cp,Wde),e(Wde,o3o),e(Cp,r3o),e(Cp,qq),e(qq,t3o),e(Cp,a3o),e(fe,n3o),e(fe,wp),e(wp,Qde),e(Qde,s3o),e(wp,l3o),e(wp,jq),e(jq,i3o),e(wp,d3o),e(fe,c3o),e(fe,Ap),e(Ap,Hde),e(Hde,f3o),e(Ap,m3o),e(Ap,Dq),e(Dq,g3o),e(Ap,h3o),e(fe,p3o),e(fe,Lp),e(Lp,Ude),e(Ude,_3o),e(Lp,u3o),e(Lp,Gq),e(Gq,b3o),e(Lp,v3o),e(fe,F3o),e(fe,yp),e(yp,Jde),e(Jde,T3o),e(yp,M3o),e(yp,Oq),e(Oq,E3o),e(yp,C3o),e(fe,w3o),e(fe,xp),e(xp,Yde),e(Yde,A3o),e(xp,L3o),e(xp,Vq),e(Vq,y3o),e(xp,x3o),e(fe,$3o),e(fe,$p),e($p,Kde),e(Kde,k3o),e($p,S3o),e($p,Xq),e(Xq,R3o),e($p,P3o),e(fe,B3o),e(fe,kp),e(kp,Zde),e(Zde,I3o),e(kp,N3o),e(kp,zq),e(zq,q3o),e(kp,j3o),e(fe,D3o),e(fe,Sp),e(Sp,ece),e(ece,G3o),e(Sp,O3o),e(Sp,Wq),e(Wq,V3o),e(Sp,X3o),e(fe,z3o),e(fe,Rp),e(Rp,oce),e(oce,W3o),e(Rp,Q3o),e(Rp,Qq),e(Qq,H3o),e(Rp,U3o),e(fe,J3o),e(fe,Pp),e(Pp,rce),e(rce,Y3o),e(Pp,K3o),e(Pp,Hq),e(Hq,Z3o),e(Pp,eFo),e(fe,oFo),e(fe,Bp),e(Bp,tce),e(tce,rFo),e(Bp,tFo),e(Bp,Uq),e(Uq,aFo),e(Bp,nFo),e(fe,sFo),e(fe,Ip),e(Ip,ace),e(ace,lFo),e(Ip,iFo),e(Ip,Jq),e(Jq,dFo),e(Ip,cFo),e(fe,fFo),e(fe,Np),e(Np,nce),e(nce,mFo),e(Np,gFo),e(Np,Yq),e(Yq,hFo),e(Np,pFo),e(fe,_Fo),e(fe,qp),e(qp,sce),e(sce,uFo),e(qp,bFo),e(qp,Kq),e(Kq,vFo),e(qp,FFo),e(fe,TFo),e(fe,jp),e(jp,lce),e(lce,MFo),e(jp,EFo),e(jp,Zq),e(Zq,CFo),e(jp,wFo),e(fe,AFo),e(fe,Dp),e(Dp,ice),e(ice,LFo),e(Dp,yFo),e(Dp,ej),e(ej,xFo),e(Dp,$Fo),e(Ue,kFo),M(Gp,Ue,null),e(Ue,SFo),M(Op,Ue,null),e(yo,RFo),e(yo,Vp),M(S6,Vp,null),e(Vp,PFo),e(Vp,dce),e(dce,BFo),b(f,MXe,u),b(f,Gi,u),e(Gi,Xp),e(Xp,cce),M(R6,cce,null),e(Gi,IFo),e(Gi,fce),e(fce,NFo),b(f,EXe,u),b(f,xo,u),M(P6,xo,null),e(xo,qFo),e(xo,Oi),e(Oi,jFo),e(Oi,oj),e(oj,DFo),e(Oi,GFo),e(Oi,rj),e(rj,OFo),e(Oi,VFo),e(xo,XFo),e(xo,B6),e(B6,zFo),e(B6,mce),e(mce,WFo),e(B6,QFo),e(xo,HFo),e(xo,lt),M(I6,lt,null),e(lt,UFo),e(lt,gce),e(gce,JFo),e(lt,YFo),e(lt,Vi),e(Vi,KFo),e(Vi,hce),e(hce,ZFo),e(Vi,eTo),e(Vi,tj),e(tj,oTo),e(Vi,rTo),e(lt,tTo),M(zp,lt,null),e(xo,aTo),e(xo,Je),M(N6,Je,null),e(Je,nTo),e(Je,pce),e(pce,sTo),e(Je,lTo),e(Je,Ia),e(Ia,iTo),e(Ia,_ce),e(_ce,dTo),e(Ia,cTo),e(Ia,uce),e(uce,fTo),e(Ia,mTo),e(Ia,bce),e(bce,gTo),e(Ia,hTo),e(Je,pTo),e(Je,y),e(y,Wp),e(Wp,vce),e(vce,_To),e(Wp,uTo),e(Wp,aj),e(aj,bTo),e(Wp,vTo),e(y,FTo),e(y,Qp),e(Qp,Fce),e(Fce,TTo),e(Qp,MTo),e(Qp,nj),e(nj,ETo),e(Qp,CTo),e(y,wTo),e(y,Hp),e(Hp,Tce),e(Tce,ATo),e(Hp,LTo),e(Hp,sj),e(sj,yTo),e(Hp,xTo),e(y,$To),e(y,Up),e(Up,Mce),e(Mce,kTo),e(Up,STo),e(Up,lj),e(lj,RTo),e(Up,PTo),e(y,BTo),e(y,Jp),e(Jp,Ece),e(Ece,ITo),e(Jp,NTo),e(Jp,ij),e(ij,qTo),e(Jp,jTo),e(y,DTo),e(y,Yp),e(Yp,Cce),e(Cce,GTo),e(Yp,OTo),e(Yp,dj),e(dj,VTo),e(Yp,XTo),e(y,zTo),e(y,Kp),e(Kp,wce),e(wce,WTo),e(Kp,QTo),e(Kp,cj),e(cj,HTo),e(Kp,UTo),e(y,JTo),e(y,Zp),e(Zp,Ace),e(Ace,YTo),e(Zp,KTo),e(Zp,fj),e(fj,ZTo),e(Zp,e7o),e(y,o7o),e(y,e_),e(e_,Lce),e(Lce,r7o),e(e_,t7o),e(e_,mj),e(mj,a7o),e(e_,n7o),e(y,s7o),e(y,o_),e(o_,yce),e(yce,l7o),e(o_,i7o),e(o_,gj),e(gj,d7o),e(o_,c7o),e(y,f7o),e(y,r_),e(r_,xce),e(xce,m7o),e(r_,g7o),e(r_,hj),e(hj,h7o),e(r_,p7o),e(y,_7o),e(y,t_),e(t_,$ce),e($ce,u7o),e(t_,b7o),e(t_,pj),e(pj,v7o),e(t_,F7o),e(y,T7o),e(y,a_),e(a_,kce),e(kce,M7o),e(a_,E7o),e(a_,_j),e(_j,C7o),e(a_,w7o),e(y,A7o),e(y,n_),e(n_,Sce),e(Sce,L7o),e(n_,y7o),e(n_,uj),e(uj,x7o),e(n_,$7o),e(y,k7o),e(y,s_),e(s_,Rce),e(Rce,S7o),e(s_,R7o),e(s_,bj),e(bj,P7o),e(s_,B7o),e(y,I7o),e(y,l_),e(l_,Pce),e(Pce,N7o),e(l_,q7o),e(l_,vj),e(vj,j7o),e(l_,D7o),e(y,G7o),e(y,i_),e(i_,Bce),e(Bce,O7o),e(i_,V7o),e(i_,Fj),e(Fj,X7o),e(i_,z7o),e(y,W7o),e(y,d_),e(d_,Ice),e(Ice,Q7o),e(d_,H7o),e(d_,Tj),e(Tj,U7o),e(d_,J7o),e(y,Y7o),e(y,c_),e(c_,Nce),e(Nce,K7o),e(c_,Z7o),e(c_,Mj),e(Mj,e8o),e(c_,o8o),e(y,r8o),e(y,f_),e(f_,qce),e(qce,t8o),e(f_,a8o),e(f_,Ej),e(Ej,n8o),e(f_,s8o),e(y,l8o),e(y,m_),e(m_,jce),e(jce,i8o),e(m_,d8o),e(m_,Cj),e(Cj,c8o),e(m_,f8o),e(y,m8o),e(y,g_),e(g_,Dce),e(Dce,g8o),e(g_,h8o),e(g_,wj),e(wj,p8o),e(g_,_8o),e(y,u8o),e(y,h_),e(h_,Gce),e(Gce,b8o),e(h_,v8o),e(h_,Aj),e(Aj,F8o),e(h_,T8o),e(y,M8o),e(y,p_),e(p_,Oce),e(Oce,E8o),e(p_,C8o),e(p_,Lj),e(Lj,w8o),e(p_,A8o),e(y,L8o),e(y,__),e(__,Vce),e(Vce,y8o),e(__,x8o),e(__,yj),e(yj,$8o),e(__,k8o),e(y,S8o),e(y,u_),e(u_,Xce),e(Xce,R8o),e(u_,P8o),e(u_,xj),e(xj,B8o),e(u_,I8o),e(y,N8o),e(y,b_),e(b_,zce),e(zce,q8o),e(b_,j8o),e(b_,$j),e($j,D8o),e(b_,G8o),e(y,O8o),e(y,v_),e(v_,Wce),e(Wce,V8o),e(v_,X8o),e(v_,kj),e(kj,z8o),e(v_,W8o),e(y,Q8o),e(y,F_),e(F_,Qce),e(Qce,H8o),e(F_,U8o),e(F_,Sj),e(Sj,J8o),e(F_,Y8o),e(y,K8o),e(y,T_),e(T_,Hce),e(Hce,Z8o),e(T_,e9o),e(T_,Rj),e(Rj,o9o),e(T_,r9o),e(y,t9o),e(y,M_),e(M_,Uce),e(Uce,a9o),e(M_,n9o),e(M_,Pj),e(Pj,s9o),e(M_,l9o),e(y,i9o),e(y,E_),e(E_,Jce),e(Jce,d9o),e(E_,c9o),e(E_,Bj),e(Bj,f9o),e(E_,m9o),e(y,g9o),e(y,C_),e(C_,Yce),e(Yce,h9o),e(C_,p9o),e(C_,Ij),e(Ij,_9o),e(C_,u9o),e(y,b9o),e(y,w_),e(w_,Kce),e(Kce,v9o),e(w_,F9o),e(w_,Nj),e(Nj,T9o),e(w_,M9o),e(y,E9o),e(y,Hs),e(Hs,Zce),e(Zce,C9o),e(Hs,w9o),e(Hs,qj),e(qj,A9o),e(Hs,L9o),e(Hs,jj),e(jj,y9o),e(Hs,x9o),e(y,$9o),e(y,A_),e(A_,efe),e(efe,k9o),e(A_,S9o),e(A_,Dj),e(Dj,R9o),e(A_,P9o),e(y,B9o),e(y,L_),e(L_,ofe),e(ofe,I9o),e(L_,N9o),e(L_,Gj),e(Gj,q9o),e(L_,j9o),e(y,D9o),e(y,y_),e(y_,rfe),e(rfe,G9o),e(y_,O9o),e(y_,Oj),e(Oj,V9o),e(y_,X9o),e(y,z9o),e(y,x_),e(x_,tfe),e(tfe,W9o),e(x_,Q9o),e(x_,Vj),e(Vj,H9o),e(x_,U9o),e(y,J9o),e(y,$_),e($_,afe),e(afe,Y9o),e($_,K9o),e($_,Xj),e(Xj,Z9o),e($_,eMo),e(y,oMo),e(y,k_),e(k_,nfe),e(nfe,rMo),e(k_,tMo),e(k_,zj),e(zj,aMo),e(k_,nMo),e(y,sMo),e(y,S_),e(S_,sfe),e(sfe,lMo),e(S_,iMo),e(S_,Wj),e(Wj,dMo),e(S_,cMo),e(y,fMo),e(y,R_),e(R_,lfe),e(lfe,mMo),e(R_,gMo),e(R_,Qj),e(Qj,hMo),e(R_,pMo),e(y,_Mo),e(y,P_),e(P_,ife),e(ife,uMo),e(P_,bMo),e(P_,Hj),e(Hj,vMo),e(P_,FMo),e(y,TMo),e(y,B_),e(B_,dfe),e(dfe,MMo),e(B_,EMo),e(B_,Uj),e(Uj,CMo),e(B_,wMo),e(y,AMo),e(y,I_),e(I_,cfe),e(cfe,LMo),e(I_,yMo),e(I_,Jj),e(Jj,xMo),e(I_,$Mo),e(y,kMo),e(y,N_),e(N_,ffe),e(ffe,SMo),e(N_,RMo),e(N_,Yj),e(Yj,PMo),e(N_,BMo),e(y,IMo),e(y,q_),e(q_,mfe),e(mfe,NMo),e(q_,qMo),e(q_,Kj),e(Kj,jMo),e(q_,DMo),e(y,GMo),e(y,j_),e(j_,gfe),e(gfe,OMo),e(j_,VMo),e(j_,Zj),e(Zj,XMo),e(j_,zMo),e(y,WMo),e(y,D_),e(D_,hfe),e(hfe,QMo),e(D_,HMo),e(D_,eD),e(eD,UMo),e(D_,JMo),e(y,YMo),e(y,G_),e(G_,pfe),e(pfe,KMo),e(G_,ZMo),e(G_,oD),e(oD,e4o),e(G_,o4o),e(y,r4o),e(y,O_),e(O_,_fe),e(_fe,t4o),e(O_,a4o),e(O_,rD),e(rD,n4o),e(O_,s4o),e(y,l4o),e(y,V_),e(V_,ufe),e(ufe,i4o),e(V_,d4o),e(V_,tD),e(tD,c4o),e(V_,f4o),e(y,m4o),e(y,X_),e(X_,bfe),e(bfe,g4o),e(X_,h4o),e(X_,aD),e(aD,p4o),e(X_,_4o),e(y,u4o),e(y,z_),e(z_,vfe),e(vfe,b4o),e(z_,v4o),e(z_,nD),e(nD,F4o),e(z_,T4o),e(y,M4o),e(y,W_),e(W_,Ffe),e(Ffe,E4o),e(W_,C4o),e(W_,sD),e(sD,w4o),e(W_,A4o),e(y,L4o),e(y,Q_),e(Q_,Tfe),e(Tfe,y4o),e(Q_,x4o),e(Q_,lD),e(lD,$4o),e(Q_,k4o),e(y,S4o),e(y,H_),e(H_,Mfe),e(Mfe,R4o),e(H_,P4o),e(H_,iD),e(iD,B4o),e(H_,I4o),e(y,N4o),e(y,U_),e(U_,Efe),e(Efe,q4o),e(U_,j4o),e(U_,dD),e(dD,D4o),e(U_,G4o),e(y,O4o),e(y,J_),e(J_,Cfe),e(Cfe,V4o),e(J_,X4o),e(J_,cD),e(cD,z4o),e(J_,W4o),e(y,Q4o),e(y,Y_),e(Y_,wfe),e(wfe,H4o),e(Y_,U4o),e(Y_,fD),e(fD,J4o),e(Y_,Y4o),e(y,K4o),e(y,K_),e(K_,Afe),e(Afe,Z4o),e(K_,eEo),e(K_,mD),e(mD,oEo),e(K_,rEo),e(y,tEo),e(y,Z_),e(Z_,Lfe),e(Lfe,aEo),e(Z_,nEo),e(Z_,gD),e(gD,sEo),e(Z_,lEo),e(y,iEo),e(y,eu),e(eu,yfe),e(yfe,dEo),e(eu,cEo),e(eu,hD),e(hD,fEo),e(eu,mEo),e(y,gEo),e(y,ou),e(ou,xfe),e(xfe,hEo),e(ou,pEo),e(ou,pD),e(pD,_Eo),e(ou,uEo),e(y,bEo),e(y,ru),e(ru,$fe),e($fe,vEo),e(ru,FEo),e(ru,_D),e(_D,TEo),e(ru,MEo),e(y,EEo),e(y,tu),e(tu,kfe),e(kfe,CEo),e(tu,wEo),e(tu,uD),e(uD,AEo),e(tu,LEo),e(y,yEo),e(y,au),e(au,Sfe),e(Sfe,xEo),e(au,$Eo),e(au,bD),e(bD,kEo),e(au,SEo),e(y,REo),e(y,nu),e(nu,Rfe),e(Rfe,PEo),e(nu,BEo),e(nu,vD),e(vD,IEo),e(nu,NEo),e(y,qEo),e(y,su),e(su,Pfe),e(Pfe,jEo),e(su,DEo),e(su,FD),e(FD,GEo),e(su,OEo),e(y,VEo),e(y,lu),e(lu,Bfe),e(Bfe,XEo),e(lu,zEo),e(lu,TD),e(TD,WEo),e(lu,QEo),e(y,HEo),e(y,iu),e(iu,Ife),e(Ife,UEo),e(iu,JEo),e(iu,MD),e(MD,YEo),e(iu,KEo),e(y,ZEo),e(y,du),e(du,Nfe),e(Nfe,eCo),e(du,oCo),e(du,ED),e(ED,rCo),e(du,tCo),e(y,aCo),e(y,cu),e(cu,qfe),e(qfe,nCo),e(cu,sCo),e(cu,CD),e(CD,lCo),e(cu,iCo),e(y,dCo),e(y,fu),e(fu,jfe),e(jfe,cCo),e(fu,fCo),e(fu,wD),e(wD,mCo),e(fu,gCo),e(y,hCo),e(y,mu),e(mu,Dfe),e(Dfe,pCo),e(mu,_Co),e(mu,AD),e(AD,uCo),e(mu,bCo),e(y,vCo),e(y,gu),e(gu,Gfe),e(Gfe,FCo),e(gu,TCo),e(gu,LD),e(LD,MCo),e(gu,ECo),e(y,CCo),e(y,hu),e(hu,Ofe),e(Ofe,wCo),e(hu,ACo),e(hu,yD),e(yD,LCo),e(hu,yCo),e(y,xCo),e(y,pu),e(pu,Vfe),e(Vfe,$Co),e(pu,kCo),e(pu,xD),e(xD,SCo),e(pu,RCo),e(y,PCo),e(y,_u),e(_u,Xfe),e(Xfe,BCo),e(_u,ICo),e(_u,$D),e($D,NCo),e(_u,qCo),e(y,jCo),e(y,uu),e(uu,zfe),e(zfe,DCo),e(uu,GCo),e(uu,kD),e(kD,OCo),e(uu,VCo),e(y,XCo),e(y,bu),e(bu,Wfe),e(Wfe,zCo),e(bu,WCo),e(bu,SD),e(SD,QCo),e(bu,HCo),e(y,UCo),e(y,vu),e(vu,Qfe),e(Qfe,JCo),e(vu,YCo),e(vu,RD),e(RD,KCo),e(vu,ZCo),e(y,e5o),e(y,Fu),e(Fu,Hfe),e(Hfe,o5o),e(Fu,r5o),e(Fu,PD),e(PD,t5o),e(Fu,a5o),e(y,n5o),e(y,Tu),e(Tu,Ufe),e(Ufe,s5o),e(Tu,l5o),e(Tu,BD),e(BD,i5o),e(Tu,d5o),e(y,c5o),e(y,Mu),e(Mu,Jfe),e(Jfe,f5o),e(Mu,m5o),e(Mu,ID),e(ID,g5o),e(Mu,h5o),e(y,p5o),e(y,Eu),e(Eu,Yfe),e(Yfe,_5o),e(Eu,u5o),e(Eu,ND),e(ND,b5o),e(Eu,v5o),e(y,F5o),e(y,Cu),e(Cu,Kfe),e(Kfe,T5o),e(Cu,M5o),e(Cu,qD),e(qD,E5o),e(Cu,C5o),e(y,w5o),e(y,wu),e(wu,Zfe),e(Zfe,A5o),e(wu,L5o),e(wu,jD),e(jD,y5o),e(wu,x5o),e(y,$5o),e(y,Au),e(Au,eme),e(eme,k5o),e(Au,S5o),e(Au,DD),e(DD,R5o),e(Au,P5o),e(y,B5o),e(y,Lu),e(Lu,ome),e(ome,I5o),e(Lu,N5o),e(Lu,GD),e(GD,q5o),e(Lu,j5o),e(y,D5o),e(y,yu),e(yu,rme),e(rme,G5o),e(yu,O5o),e(yu,OD),e(OD,V5o),e(yu,X5o),e(y,z5o),e(y,xu),e(xu,tme),e(tme,W5o),e(xu,Q5o),e(xu,VD),e(VD,H5o),e(xu,U5o),e(y,J5o),e(y,$u),e($u,ame),e(ame,Y5o),e($u,K5o),e($u,XD),e(XD,Z5o),e($u,e0o),e(y,o0o),e(y,ku),e(ku,nme),e(nme,r0o),e(ku,t0o),e(ku,zD),e(zD,a0o),e(ku,n0o),e(y,s0o),e(y,Su),e(Su,sme),e(sme,l0o),e(Su,i0o),e(Su,WD),e(WD,d0o),e(Su,c0o),e(y,f0o),e(y,Ru),e(Ru,lme),e(lme,m0o),e(Ru,g0o),e(Ru,QD),e(QD,h0o),e(Ru,p0o),e(y,_0o),e(y,Pu),e(Pu,ime),e(ime,u0o),e(Pu,b0o),e(Pu,HD),e(HD,v0o),e(Pu,F0o),e(y,T0o),e(y,Bu),e(Bu,dme),e(dme,M0o),e(Bu,E0o),e(Bu,UD),e(UD,C0o),e(Bu,w0o),e(y,A0o),e(y,Iu),e(Iu,cme),e(cme,L0o),e(Iu,y0o),e(Iu,JD),e(JD,x0o),e(Iu,$0o),e(y,k0o),e(y,Nu),e(Nu,fme),e(fme,S0o),e(Nu,R0o),e(Nu,YD),e(YD,P0o),e(Nu,B0o),e(y,I0o),e(y,qu),e(qu,mme),e(mme,N0o),e(qu,q0o),e(qu,KD),e(KD,j0o),e(qu,D0o),e(y,G0o),e(y,ju),e(ju,gme),e(gme,O0o),e(ju,V0o),e(ju,ZD),e(ZD,X0o),e(ju,z0o),e(y,W0o),e(y,Du),e(Du,hme),e(hme,Q0o),e(Du,H0o),e(Du,eG),e(eG,U0o),e(Du,J0o),e(y,Y0o),e(y,Gu),e(Gu,pme),e(pme,K0o),e(Gu,Z0o),e(Gu,oG),e(oG,ewo),e(Gu,owo),e(y,rwo),e(y,Ou),e(Ou,_me),e(_me,two),e(Ou,awo),e(Ou,rG),e(rG,nwo),e(Ou,swo),e(y,lwo),e(y,Vu),e(Vu,ume),e(ume,iwo),e(Vu,dwo),e(Vu,tG),e(tG,cwo),e(Vu,fwo),e(y,mwo),e(y,Xu),e(Xu,bme),e(bme,gwo),e(Xu,hwo),e(Xu,aG),e(aG,pwo),e(Xu,_wo),e(y,uwo),e(y,zu),e(zu,vme),e(vme,bwo),e(zu,vwo),e(zu,nG),e(nG,Fwo),e(zu,Two),e(y,Mwo),e(y,Wu),e(Wu,Fme),e(Fme,Ewo),e(Wu,Cwo),e(Wu,sG),e(sG,wwo),e(Wu,Awo),e(y,Lwo),e(y,Qu),e(Qu,Tme),e(Tme,ywo),e(Qu,xwo),e(Qu,lG),e(lG,$wo),e(Qu,kwo),e(y,Swo),e(y,Hu),e(Hu,Mme),e(Mme,Rwo),e(Hu,Pwo),e(Hu,iG),e(iG,Bwo),e(Hu,Iwo),e(Je,Nwo),e(Je,Uu),e(Uu,qwo),e(Uu,Eme),e(Eme,jwo),e(Uu,Dwo),e(Uu,Cme),e(Cme,Gwo),e(Je,Owo),M(Ju,Je,null),b(f,CXe,u),b(f,Xi,u),e(Xi,Yu),e(Yu,wme),M(q6,wme,null),e(Xi,Vwo),e(Xi,Ame),e(Ame,Xwo),b(f,wXe,u),b(f,$o,u),M(j6,$o,null),e($o,zwo),e($o,zi),e(zi,Wwo),e(zi,dG),e(dG,Qwo),e(zi,Hwo),e(zi,cG),e(cG,Uwo),e(zi,Jwo),e($o,Ywo),e($o,D6),e(D6,Kwo),e(D6,Lme),e(Lme,Zwo),e(D6,eAo),e($o,oAo),e($o,it),M(G6,it,null),e(it,rAo),e(it,yme),e(yme,tAo),e(it,aAo),e(it,Wi),e(Wi,nAo),e(Wi,xme),e(xme,sAo),e(Wi,lAo),e(Wi,fG),e(fG,iAo),e(Wi,dAo),e(it,cAo),M(Ku,it,null),e($o,fAo),e($o,Ye),M(O6,Ye,null),e(Ye,mAo),e(Ye,$me),e($me,gAo),e(Ye,hAo),e(Ye,Na),e(Na,pAo),e(Na,kme),e(kme,_Ao),e(Na,uAo),e(Na,Sme),e(Sme,bAo),e(Na,vAo),e(Na,Rme),e(Rme,FAo),e(Na,TAo),e(Ye,MAo),e(Ye,G),e(G,Zu),e(Zu,Pme),e(Pme,EAo),e(Zu,CAo),e(Zu,mG),e(mG,wAo),e(Zu,AAo),e(G,LAo),e(G,e1),e(e1,Bme),e(Bme,yAo),e(e1,xAo),e(e1,gG),e(gG,$Ao),e(e1,kAo),e(G,SAo),e(G,o1),e(o1,Ime),e(Ime,RAo),e(o1,PAo),e(o1,hG),e(hG,BAo),e(o1,IAo),e(G,NAo),e(G,r1),e(r1,Nme),e(Nme,qAo),e(r1,jAo),e(r1,pG),e(pG,DAo),e(r1,GAo),e(G,OAo),e(G,t1),e(t1,qme),e(qme,VAo),e(t1,XAo),e(t1,_G),e(_G,zAo),e(t1,WAo),e(G,QAo),e(G,a1),e(a1,jme),e(jme,HAo),e(a1,UAo),e(a1,uG),e(uG,JAo),e(a1,YAo),e(G,KAo),e(G,n1),e(n1,Dme),e(Dme,ZAo),e(n1,e6o),e(n1,bG),e(bG,o6o),e(n1,r6o),e(G,t6o),e(G,s1),e(s1,Gme),e(Gme,a6o),e(s1,n6o),e(s1,vG),e(vG,s6o),e(s1,l6o),e(G,i6o),e(G,l1),e(l1,Ome),e(Ome,d6o),e(l1,c6o),e(l1,FG),e(FG,f6o),e(l1,m6o),e(G,g6o),e(G,i1),e(i1,Vme),e(Vme,h6o),e(i1,p6o),e(i1,TG),e(TG,_6o),e(i1,u6o),e(G,b6o),e(G,d1),e(d1,Xme),e(Xme,v6o),e(d1,F6o),e(d1,MG),e(MG,T6o),e(d1,M6o),e(G,E6o),e(G,c1),e(c1,zme),e(zme,C6o),e(c1,w6o),e(c1,EG),e(EG,A6o),e(c1,L6o),e(G,y6o),e(G,f1),e(f1,Wme),e(Wme,x6o),e(f1,$6o),e(f1,CG),e(CG,k6o),e(f1,S6o),e(G,R6o),e(G,m1),e(m1,Qme),e(Qme,P6o),e(m1,B6o),e(m1,wG),e(wG,I6o),e(m1,N6o),e(G,q6o),e(G,g1),e(g1,Hme),e(Hme,j6o),e(g1,D6o),e(g1,AG),e(AG,G6o),e(g1,O6o),e(G,V6o),e(G,h1),e(h1,Ume),e(Ume,X6o),e(h1,z6o),e(h1,LG),e(LG,W6o),e(h1,Q6o),e(G,H6o),e(G,p1),e(p1,Jme),e(Jme,U6o),e(p1,J6o),e(p1,yG),e(yG,Y6o),e(p1,K6o),e(G,Z6o),e(G,_1),e(_1,Yme),e(Yme,eLo),e(_1,oLo),e(_1,xG),e(xG,rLo),e(_1,tLo),e(G,aLo),e(G,u1),e(u1,Kme),e(Kme,nLo),e(u1,sLo),e(u1,$G),e($G,lLo),e(u1,iLo),e(G,dLo),e(G,b1),e(b1,Zme),e(Zme,cLo),e(b1,fLo),e(b1,kG),e(kG,mLo),e(b1,gLo),e(G,hLo),e(G,v1),e(v1,ege),e(ege,pLo),e(v1,_Lo),e(v1,SG),e(SG,uLo),e(v1,bLo),e(G,vLo),e(G,F1),e(F1,oge),e(oge,FLo),e(F1,TLo),e(F1,RG),e(RG,MLo),e(F1,ELo),e(G,CLo),e(G,T1),e(T1,rge),e(rge,wLo),e(T1,ALo),e(T1,PG),e(PG,LLo),e(T1,yLo),e(G,xLo),e(G,M1),e(M1,tge),e(tge,$Lo),e(M1,kLo),e(M1,BG),e(BG,SLo),e(M1,RLo),e(G,PLo),e(G,E1),e(E1,age),e(age,BLo),e(E1,ILo),e(E1,IG),e(IG,NLo),e(E1,qLo),e(G,jLo),e(G,C1),e(C1,nge),e(nge,DLo),e(C1,GLo),e(C1,NG),e(NG,OLo),e(C1,VLo),e(G,XLo),e(G,w1),e(w1,sge),e(sge,zLo),e(w1,WLo),e(w1,qG),e(qG,QLo),e(w1,HLo),e(G,ULo),e(G,A1),e(A1,lge),e(lge,JLo),e(A1,YLo),e(A1,jG),e(jG,KLo),e(A1,ZLo),e(G,eyo),e(G,L1),e(L1,ige),e(ige,oyo),e(L1,ryo),e(L1,DG),e(DG,tyo),e(L1,ayo),e(G,nyo),e(G,y1),e(y1,dge),e(dge,syo),e(y1,lyo),e(y1,GG),e(GG,iyo),e(y1,dyo),e(G,cyo),e(G,x1),e(x1,cge),e(cge,fyo),e(x1,myo),e(x1,OG),e(OG,gyo),e(x1,hyo),e(G,pyo),e(G,$1),e($1,fge),e(fge,_yo),e($1,uyo),e($1,VG),e(VG,byo),e($1,vyo),e(G,Fyo),e(G,k1),e(k1,mge),e(mge,Tyo),e(k1,Myo),e(k1,XG),e(XG,Eyo),e(k1,Cyo),e(G,wyo),e(G,S1),e(S1,gge),e(gge,Ayo),e(S1,Lyo),e(S1,zG),e(zG,yyo),e(S1,xyo),e(G,$yo),e(G,R1),e(R1,hge),e(hge,kyo),e(R1,Syo),e(R1,WG),e(WG,Ryo),e(R1,Pyo),e(G,Byo),e(G,P1),e(P1,pge),e(pge,Iyo),e(P1,Nyo),e(P1,QG),e(QG,qyo),e(P1,jyo),e(G,Dyo),e(G,B1),e(B1,_ge),e(_ge,Gyo),e(B1,Oyo),e(B1,HG),e(HG,Vyo),e(B1,Xyo),e(G,zyo),e(G,I1),e(I1,uge),e(uge,Wyo),e(I1,Qyo),e(I1,UG),e(UG,Hyo),e(I1,Uyo),e(G,Jyo),e(G,N1),e(N1,bge),e(bge,Yyo),e(N1,Kyo),e(N1,JG),e(JG,Zyo),e(N1,exo),e(G,oxo),e(G,q1),e(q1,vge),e(vge,rxo),e(q1,txo),e(q1,YG),e(YG,axo),e(q1,nxo),e(G,sxo),e(G,j1),e(j1,Fge),e(Fge,lxo),e(j1,ixo),e(j1,KG),e(KG,dxo),e(j1,cxo),e(G,fxo),e(G,D1),e(D1,Tge),e(Tge,mxo),e(D1,gxo),e(D1,ZG),e(ZG,hxo),e(D1,pxo),e(G,_xo),e(G,G1),e(G1,Mge),e(Mge,uxo),e(G1,bxo),e(G1,eO),e(eO,vxo),e(G1,Fxo),e(G,Txo),e(G,O1),e(O1,Ege),e(Ege,Mxo),e(O1,Exo),e(O1,oO),e(oO,Cxo),e(O1,wxo),e(G,Axo),e(G,V1),e(V1,Cge),e(Cge,Lxo),e(V1,yxo),e(V1,rO),e(rO,xxo),e(V1,$xo),e(Ye,kxo),e(Ye,X1),e(X1,Sxo),e(X1,wge),e(wge,Rxo),e(X1,Pxo),e(X1,Age),e(Age,Bxo),e(Ye,Ixo),M(z1,Ye,null),b(f,AXe,u),b(f,Qi,u),e(Qi,W1),e(W1,Lge),M(V6,Lge,null),e(Qi,Nxo),e(Qi,yge),e(yge,qxo),b(f,LXe,u),b(f,ko,u),M(X6,ko,null),e(ko,jxo),e(ko,Hi),e(Hi,Dxo),e(Hi,tO),e(tO,Gxo),e(Hi,Oxo),e(Hi,aO),e(aO,Vxo),e(Hi,Xxo),e(ko,zxo),e(ko,z6),e(z6,Wxo),e(z6,xge),e(xge,Qxo),e(z6,Hxo),e(ko,Uxo),e(ko,dt),M(W6,dt,null),e(dt,Jxo),e(dt,$ge),e($ge,Yxo),e(dt,Kxo),e(dt,Ui),e(Ui,Zxo),e(Ui,kge),e(kge,e$o),e(Ui,o$o),e(Ui,nO),e(nO,r$o),e(Ui,t$o),e(dt,a$o),M(Q1,dt,null),e(ko,n$o),e(ko,Ke),M(Q6,Ke,null),e(Ke,s$o),e(Ke,Sge),e(Sge,l$o),e(Ke,i$o),e(Ke,qa),e(qa,d$o),e(qa,Rge),e(Rge,c$o),e(qa,f$o),e(qa,Pge),e(Pge,m$o),e(qa,g$o),e(qa,Bge),e(Bge,h$o),e(qa,p$o),e(Ke,_$o),e(Ke,z),e(z,H1),e(H1,Ige),e(Ige,u$o),e(H1,b$o),e(H1,sO),e(sO,v$o),e(H1,F$o),e(z,T$o),e(z,U1),e(U1,Nge),e(Nge,M$o),e(U1,E$o),e(U1,lO),e(lO,C$o),e(U1,w$o),e(z,A$o),e(z,J1),e(J1,qge),e(qge,L$o),e(J1,y$o),e(J1,iO),e(iO,x$o),e(J1,$$o),e(z,k$o),e(z,Y1),e(Y1,jge),e(jge,S$o),e(Y1,R$o),e(Y1,dO),e(dO,P$o),e(Y1,B$o),e(z,I$o),e(z,K1),e(K1,Dge),e(Dge,N$o),e(K1,q$o),e(K1,cO),e(cO,j$o),e(K1,D$o),e(z,G$o),e(z,Z1),e(Z1,Gge),e(Gge,O$o),e(Z1,V$o),e(Z1,fO),e(fO,X$o),e(Z1,z$o),e(z,W$o),e(z,e2),e(e2,Oge),e(Oge,Q$o),e(e2,H$o),e(e2,mO),e(mO,U$o),e(e2,J$o),e(z,Y$o),e(z,o2),e(o2,Vge),e(Vge,K$o),e(o2,Z$o),e(o2,gO),e(gO,eko),e(o2,oko),e(z,rko),e(z,r2),e(r2,Xge),e(Xge,tko),e(r2,ako),e(r2,hO),e(hO,nko),e(r2,sko),e(z,lko),e(z,t2),e(t2,zge),e(zge,iko),e(t2,dko),e(t2,pO),e(pO,cko),e(t2,fko),e(z,mko),e(z,a2),e(a2,Wge),e(Wge,gko),e(a2,hko),e(a2,_O),e(_O,pko),e(a2,_ko),e(z,uko),e(z,n2),e(n2,Qge),e(Qge,bko),e(n2,vko),e(n2,uO),e(uO,Fko),e(n2,Tko),e(z,Mko),e(z,s2),e(s2,Hge),e(Hge,Eko),e(s2,Cko),e(s2,bO),e(bO,wko),e(s2,Ako),e(z,Lko),e(z,l2),e(l2,Uge),e(Uge,yko),e(l2,xko),e(l2,vO),e(vO,$ko),e(l2,kko),e(z,Sko),e(z,i2),e(i2,Jge),e(Jge,Rko),e(i2,Pko),e(i2,FO),e(FO,Bko),e(i2,Iko),e(z,Nko),e(z,d2),e(d2,Yge),e(Yge,qko),e(d2,jko),e(d2,TO),e(TO,Dko),e(d2,Gko),e(z,Oko),e(z,c2),e(c2,Kge),e(Kge,Vko),e(c2,Xko),e(c2,MO),e(MO,zko),e(c2,Wko),e(z,Qko),e(z,f2),e(f2,Zge),e(Zge,Hko),e(f2,Uko),e(f2,EO),e(EO,Jko),e(f2,Yko),e(z,Kko),e(z,m2),e(m2,ehe),e(ehe,Zko),e(m2,eSo),e(m2,CO),e(CO,oSo),e(m2,rSo),e(z,tSo),e(z,g2),e(g2,ohe),e(ohe,aSo),e(g2,nSo),e(g2,wO),e(wO,sSo),e(g2,lSo),e(z,iSo),e(z,h2),e(h2,rhe),e(rhe,dSo),e(h2,cSo),e(h2,AO),e(AO,fSo),e(h2,mSo),e(z,gSo),e(z,p2),e(p2,the),e(the,hSo),e(p2,pSo),e(p2,LO),e(LO,_So),e(p2,uSo),e(z,bSo),e(z,_2),e(_2,ahe),e(ahe,vSo),e(_2,FSo),e(_2,yO),e(yO,TSo),e(_2,MSo),e(z,ESo),e(z,u2),e(u2,nhe),e(nhe,CSo),e(u2,wSo),e(u2,xO),e(xO,ASo),e(u2,LSo),e(z,ySo),e(z,b2),e(b2,she),e(she,xSo),e(b2,$So),e(b2,$O),e($O,kSo),e(b2,SSo),e(z,RSo),e(z,v2),e(v2,lhe),e(lhe,PSo),e(v2,BSo),e(v2,kO),e(kO,ISo),e(v2,NSo),e(z,qSo),e(z,F2),e(F2,ihe),e(ihe,jSo),e(F2,DSo),e(F2,SO),e(SO,GSo),e(F2,OSo),e(z,VSo),e(z,T2),e(T2,dhe),e(dhe,XSo),e(T2,zSo),e(T2,RO),e(RO,WSo),e(T2,QSo),e(z,HSo),e(z,M2),e(M2,che),e(che,USo),e(M2,JSo),e(M2,PO),e(PO,YSo),e(M2,KSo),e(z,ZSo),e(z,E2),e(E2,fhe),e(fhe,eRo),e(E2,oRo),e(E2,BO),e(BO,rRo),e(E2,tRo),e(z,aRo),e(z,C2),e(C2,mhe),e(mhe,nRo),e(C2,sRo),e(C2,IO),e(IO,lRo),e(C2,iRo),e(z,dRo),e(z,w2),e(w2,ghe),e(ghe,cRo),e(w2,fRo),e(w2,NO),e(NO,mRo),e(w2,gRo),e(z,hRo),e(z,A2),e(A2,hhe),e(hhe,pRo),e(A2,_Ro),e(A2,qO),e(qO,uRo),e(A2,bRo),e(z,vRo),e(z,L2),e(L2,phe),e(phe,FRo),e(L2,TRo),e(L2,jO),e(jO,MRo),e(L2,ERo),e(z,CRo),e(z,y2),e(y2,_he),e(_he,wRo),e(y2,ARo),e(y2,DO),e(DO,LRo),e(y2,yRo),e(z,xRo),e(z,x2),e(x2,uhe),e(uhe,$Ro),e(x2,kRo),e(x2,GO),e(GO,SRo),e(x2,RRo),e(z,PRo),e(z,$2),e($2,bhe),e(bhe,BRo),e($2,IRo),e($2,OO),e(OO,NRo),e($2,qRo),e(z,jRo),e(z,k2),e(k2,vhe),e(vhe,DRo),e(k2,GRo),e(k2,VO),e(VO,ORo),e(k2,VRo),e(z,XRo),e(z,S2),e(S2,Fhe),e(Fhe,zRo),e(S2,WRo),e(S2,XO),e(XO,QRo),e(S2,HRo),e(z,URo),e(z,R2),e(R2,The),e(The,JRo),e(R2,YRo),e(R2,zO),e(zO,KRo),e(R2,ZRo),e(Ke,ePo),e(Ke,P2),e(P2,oPo),e(P2,Mhe),e(Mhe,rPo),e(P2,tPo),e(P2,Ehe),e(Ehe,aPo),e(Ke,nPo),M(B2,Ke,null),b(f,yXe,u),b(f,Ji,u),e(Ji,I2),e(I2,Che),M(H6,Che,null),e(Ji,sPo),e(Ji,whe),e(whe,lPo),b(f,xXe,u),b(f,So,u),M(U6,So,null),e(So,iPo),e(So,Yi),e(Yi,dPo),e(Yi,WO),e(WO,cPo),e(Yi,fPo),e(Yi,QO),e(QO,mPo),e(Yi,gPo),e(So,hPo),e(So,J6),e(J6,pPo),e(J6,Ahe),e(Ahe,_Po),e(J6,uPo),e(So,bPo),e(So,ct),M(Y6,ct,null),e(ct,vPo),e(ct,Lhe),e(Lhe,FPo),e(ct,TPo),e(ct,Ki),e(Ki,MPo),e(Ki,yhe),e(yhe,EPo),e(Ki,CPo),e(Ki,HO),e(HO,wPo),e(Ki,APo),e(ct,LPo),M(N2,ct,null),e(So,yPo),e(So,Ze),M(K6,Ze,null),e(Ze,xPo),e(Ze,xhe),e(xhe,$Po),e(Ze,kPo),e(Ze,ja),e(ja,SPo),e(ja,$he),e($he,RPo),e(ja,PPo),e(ja,khe),e(khe,BPo),e(ja,IPo),e(ja,She),e(She,NPo),e(ja,qPo),e(Ze,jPo),e(Ze,Q),e(Q,q2),e(q2,Rhe),e(Rhe,DPo),e(q2,GPo),e(q2,UO),e(UO,OPo),e(q2,VPo),e(Q,XPo),e(Q,j2),e(j2,Phe),e(Phe,zPo),e(j2,WPo),e(j2,JO),e(JO,QPo),e(j2,HPo),e(Q,UPo),e(Q,D2),e(D2,Bhe),e(Bhe,JPo),e(D2,YPo),e(D2,YO),e(YO,KPo),e(D2,ZPo),e(Q,eBo),e(Q,G2),e(G2,Ihe),e(Ihe,oBo),e(G2,rBo),e(G2,KO),e(KO,tBo),e(G2,aBo),e(Q,nBo),e(Q,O2),e(O2,Nhe),e(Nhe,sBo),e(O2,lBo),e(O2,ZO),e(ZO,iBo),e(O2,dBo),e(Q,cBo),e(Q,V2),e(V2,qhe),e(qhe,fBo),e(V2,mBo),e(V2,eV),e(eV,gBo),e(V2,hBo),e(Q,pBo),e(Q,X2),e(X2,jhe),e(jhe,_Bo),e(X2,uBo),e(X2,oV),e(oV,bBo),e(X2,vBo),e(Q,FBo),e(Q,z2),e(z2,Dhe),e(Dhe,TBo),e(z2,MBo),e(z2,rV),e(rV,EBo),e(z2,CBo),e(Q,wBo),e(Q,W2),e(W2,Ghe),e(Ghe,ABo),e(W2,LBo),e(W2,tV),e(tV,yBo),e(W2,xBo),e(Q,$Bo),e(Q,Q2),e(Q2,Ohe),e(Ohe,kBo),e(Q2,SBo),e(Q2,aV),e(aV,RBo),e(Q2,PBo),e(Q,BBo),e(Q,H2),e(H2,Vhe),e(Vhe,IBo),e(H2,NBo),e(H2,nV),e(nV,qBo),e(H2,jBo),e(Q,DBo),e(Q,U2),e(U2,Xhe),e(Xhe,GBo),e(U2,OBo),e(U2,sV),e(sV,VBo),e(U2,XBo),e(Q,zBo),e(Q,J2),e(J2,zhe),e(zhe,WBo),e(J2,QBo),e(J2,lV),e(lV,HBo),e(J2,UBo),e(Q,JBo),e(Q,Y2),e(Y2,Whe),e(Whe,YBo),e(Y2,KBo),e(Y2,iV),e(iV,ZBo),e(Y2,eIo),e(Q,oIo),e(Q,K2),e(K2,Qhe),e(Qhe,rIo),e(K2,tIo),e(K2,dV),e(dV,aIo),e(K2,nIo),e(Q,sIo),e(Q,Z2),e(Z2,Hhe),e(Hhe,lIo),e(Z2,iIo),e(Z2,cV),e(cV,dIo),e(Z2,cIo),e(Q,fIo),e(Q,eb),e(eb,Uhe),e(Uhe,mIo),e(eb,gIo),e(eb,fV),e(fV,hIo),e(eb,pIo),e(Q,_Io),e(Q,ob),e(ob,Jhe),e(Jhe,uIo),e(ob,bIo),e(ob,mV),e(mV,vIo),e(ob,FIo),e(Q,TIo),e(Q,rb),e(rb,Yhe),e(Yhe,MIo),e(rb,EIo),e(rb,gV),e(gV,CIo),e(rb,wIo),e(Q,AIo),e(Q,tb),e(tb,Khe),e(Khe,LIo),e(tb,yIo),e(tb,hV),e(hV,xIo),e(tb,$Io),e(Q,kIo),e(Q,ab),e(ab,Zhe),e(Zhe,SIo),e(ab,RIo),e(ab,pV),e(pV,PIo),e(ab,BIo),e(Q,IIo),e(Q,nb),e(nb,epe),e(epe,NIo),e(nb,qIo),e(nb,_V),e(_V,jIo),e(nb,DIo),e(Q,GIo),e(Q,sb),e(sb,ope),e(ope,OIo),e(sb,VIo),e(sb,uV),e(uV,XIo),e(sb,zIo),e(Q,WIo),e(Q,lb),e(lb,rpe),e(rpe,QIo),e(lb,HIo),e(lb,bV),e(bV,UIo),e(lb,JIo),e(Q,YIo),e(Q,ib),e(ib,tpe),e(tpe,KIo),e(ib,ZIo),e(ib,vV),e(vV,eNo),e(ib,oNo),e(Q,rNo),e(Q,db),e(db,ape),e(ape,tNo),e(db,aNo),e(db,FV),e(FV,nNo),e(db,sNo),e(Q,lNo),e(Q,cb),e(cb,npe),e(npe,iNo),e(cb,dNo),e(cb,TV),e(TV,cNo),e(cb,fNo),e(Q,mNo),e(Q,fb),e(fb,spe),e(spe,gNo),e(fb,hNo),e(fb,MV),e(MV,pNo),e(fb,_No),e(Q,uNo),e(Q,mb),e(mb,lpe),e(lpe,bNo),e(mb,vNo),e(mb,EV),e(EV,FNo),e(mb,TNo),e(Q,MNo),e(Q,gb),e(gb,ipe),e(ipe,ENo),e(gb,CNo),e(gb,CV),e(CV,wNo),e(gb,ANo),e(Q,LNo),e(Q,hb),e(hb,dpe),e(dpe,yNo),e(hb,xNo),e(hb,wV),e(wV,$No),e(hb,kNo),e(Q,SNo),e(Q,pb),e(pb,cpe),e(cpe,RNo),e(pb,PNo),e(pb,AV),e(AV,BNo),e(pb,INo),e(Q,NNo),e(Q,_b),e(_b,fpe),e(fpe,qNo),e(_b,jNo),e(_b,LV),e(LV,DNo),e(_b,GNo),e(Q,ONo),e(Q,ub),e(ub,mpe),e(mpe,VNo),e(ub,XNo),e(ub,gpe),e(gpe,zNo),e(ub,WNo),e(Q,QNo),e(Q,bb),e(bb,hpe),e(hpe,HNo),e(bb,UNo),e(bb,yV),e(yV,JNo),e(bb,YNo),e(Q,KNo),e(Q,vb),e(vb,ppe),e(ppe,ZNo),e(vb,eqo),e(vb,xV),e(xV,oqo),e(vb,rqo),e(Q,tqo),e(Q,Fb),e(Fb,_pe),e(_pe,aqo),e(Fb,nqo),e(Fb,$V),e($V,sqo),e(Fb,lqo),e(Q,iqo),e(Q,Tb),e(Tb,upe),e(upe,dqo),e(Tb,cqo),e(Tb,kV),e(kV,fqo),e(Tb,mqo),e(Ze,gqo),e(Ze,Mb),e(Mb,hqo),e(Mb,bpe),e(bpe,pqo),e(Mb,_qo),e(Mb,vpe),e(vpe,uqo),e(Ze,bqo),M(Eb,Ze,null),b(f,$Xe,u),b(f,Zi,u),e(Zi,Cb),e(Cb,Fpe),M(Z6,Fpe,null),e(Zi,vqo),e(Zi,Tpe),e(Tpe,Fqo),b(f,kXe,u),b(f,Ro,u),M(eL,Ro,null),e(Ro,Tqo),e(Ro,ed),e(ed,Mqo),e(ed,SV),e(SV,Eqo),e(ed,Cqo),e(ed,RV),e(RV,wqo),e(ed,Aqo),e(Ro,Lqo),e(Ro,oL),e(oL,yqo),e(oL,Mpe),e(Mpe,xqo),e(oL,$qo),e(Ro,kqo),e(Ro,ft),M(rL,ft,null),e(ft,Sqo),e(ft,Epe),e(Epe,Rqo),e(ft,Pqo),e(ft,od),e(od,Bqo),e(od,Cpe),e(Cpe,Iqo),e(od,Nqo),e(od,PV),e(PV,qqo),e(od,jqo),e(ft,Dqo),M(wb,ft,null),e(Ro,Gqo),e(Ro,eo),M(tL,eo,null),e(eo,Oqo),e(eo,wpe),e(wpe,Vqo),e(eo,Xqo),e(eo,Da),e(Da,zqo),e(Da,Ape),e(Ape,Wqo),e(Da,Qqo),e(Da,Lpe),e(Lpe,Hqo),e(Da,Uqo),e(Da,ype),e(ype,Jqo),e(Da,Yqo),e(eo,Kqo),e(eo,pe),e(pe,Ab),e(Ab,xpe),e(xpe,Zqo),e(Ab,ejo),e(Ab,BV),e(BV,ojo),e(Ab,rjo),e(pe,tjo),e(pe,Lb),e(Lb,$pe),e($pe,ajo),e(Lb,njo),e(Lb,IV),e(IV,sjo),e(Lb,ljo),e(pe,ijo),e(pe,yb),e(yb,kpe),e(kpe,djo),e(yb,cjo),e(yb,NV),e(NV,fjo),e(yb,mjo),e(pe,gjo),e(pe,xb),e(xb,Spe),e(Spe,hjo),e(xb,pjo),e(xb,qV),e(qV,_jo),e(xb,ujo),e(pe,bjo),e(pe,$b),e($b,Rpe),e(Rpe,vjo),e($b,Fjo),e($b,jV),e(jV,Tjo),e($b,Mjo),e(pe,Ejo),e(pe,kb),e(kb,Ppe),e(Ppe,Cjo),e(kb,wjo),e(kb,DV),e(DV,Ajo),e(kb,Ljo),e(pe,yjo),e(pe,Sb),e(Sb,Bpe),e(Bpe,xjo),e(Sb,$jo),e(Sb,GV),e(GV,kjo),e(Sb,Sjo),e(pe,Rjo),e(pe,Rb),e(Rb,Ipe),e(Ipe,Pjo),e(Rb,Bjo),e(Rb,OV),e(OV,Ijo),e(Rb,Njo),e(pe,qjo),e(pe,Pb),e(Pb,Npe),e(Npe,jjo),e(Pb,Djo),e(Pb,VV),e(VV,Gjo),e(Pb,Ojo),e(pe,Vjo),e(pe,Bb),e(Bb,qpe),e(qpe,Xjo),e(Bb,zjo),e(Bb,XV),e(XV,Wjo),e(Bb,Qjo),e(pe,Hjo),e(pe,Ib),e(Ib,jpe),e(jpe,Ujo),e(Ib,Jjo),e(Ib,zV),e(zV,Yjo),e(Ib,Kjo),e(pe,Zjo),e(pe,Nb),e(Nb,Dpe),e(Dpe,eDo),e(Nb,oDo),e(Nb,WV),e(WV,rDo),e(Nb,tDo),e(pe,aDo),e(pe,qb),e(qb,Gpe),e(Gpe,nDo),e(qb,sDo),e(qb,QV),e(QV,lDo),e(qb,iDo),e(pe,dDo),e(pe,jb),e(jb,Ope),e(Ope,cDo),e(jb,fDo),e(jb,HV),e(HV,mDo),e(jb,gDo),e(pe,hDo),e(pe,Db),e(Db,Vpe),e(Vpe,pDo),e(Db,_Do),e(Db,UV),e(UV,uDo),e(Db,bDo),e(pe,vDo),e(pe,Gb),e(Gb,Xpe),e(Xpe,FDo),e(Gb,TDo),e(Gb,JV),e(JV,MDo),e(Gb,EDo),e(pe,CDo),e(pe,Ob),e(Ob,zpe),e(zpe,wDo),e(Ob,ADo),e(Ob,YV),e(YV,LDo),e(Ob,yDo),e(pe,xDo),e(pe,Vb),e(Vb,Wpe),e(Wpe,$Do),e(Vb,kDo),e(Vb,KV),e(KV,SDo),e(Vb,RDo),e(eo,PDo),e(eo,Xb),e(Xb,BDo),e(Xb,Qpe),e(Qpe,IDo),e(Xb,NDo),e(Xb,Hpe),e(Hpe,qDo),e(eo,jDo),M(zb,eo,null),b(f,SXe,u),b(f,rd,u),e(rd,Wb),e(Wb,Upe),M(aL,Upe,null),e(rd,DDo),e(rd,Jpe),e(Jpe,GDo),b(f,RXe,u),b(f,Po,u),M(nL,Po,null),e(Po,ODo),e(Po,td),e(td,VDo),e(td,ZV),e(ZV,XDo),e(td,zDo),e(td,eX),e(eX,WDo),e(td,QDo),e(Po,HDo),e(Po,sL),e(sL,UDo),e(sL,Ype),e(Ype,JDo),e(sL,YDo),e(Po,KDo),e(Po,mt),M(lL,mt,null),e(mt,ZDo),e(mt,Kpe),e(Kpe,eGo),e(mt,oGo),e(mt,ad),e(ad,rGo),e(ad,Zpe),e(Zpe,tGo),e(ad,aGo),e(ad,oX),e(oX,nGo),e(ad,sGo),e(mt,lGo),M(Qb,mt,null),e(Po,iGo),e(Po,oo),M(iL,oo,null),e(oo,dGo),e(oo,e_e),e(e_e,cGo),e(oo,fGo),e(oo,Ga),e(Ga,mGo),e(Ga,o_e),e(o_e,gGo),e(Ga,hGo),e(Ga,r_e),e(r_e,pGo),e(Ga,_Go),e(Ga,t_e),e(t_e,uGo),e(Ga,bGo),e(oo,vGo),e(oo,N),e(N,Hb),e(Hb,a_e),e(a_e,FGo),e(Hb,TGo),e(Hb,rX),e(rX,MGo),e(Hb,EGo),e(N,CGo),e(N,Ub),e(Ub,n_e),e(n_e,wGo),e(Ub,AGo),e(Ub,tX),e(tX,LGo),e(Ub,yGo),e(N,xGo),e(N,Jb),e(Jb,s_e),e(s_e,$Go),e(Jb,kGo),e(Jb,aX),e(aX,SGo),e(Jb,RGo),e(N,PGo),e(N,Yb),e(Yb,l_e),e(l_e,BGo),e(Yb,IGo),e(Yb,nX),e(nX,NGo),e(Yb,qGo),e(N,jGo),e(N,Kb),e(Kb,i_e),e(i_e,DGo),e(Kb,GGo),e(Kb,sX),e(sX,OGo),e(Kb,VGo),e(N,XGo),e(N,Zb),e(Zb,d_e),e(d_e,zGo),e(Zb,WGo),e(Zb,lX),e(lX,QGo),e(Zb,HGo),e(N,UGo),e(N,ev),e(ev,c_e),e(c_e,JGo),e(ev,YGo),e(ev,iX),e(iX,KGo),e(ev,ZGo),e(N,eOo),e(N,ov),e(ov,f_e),e(f_e,oOo),e(ov,rOo),e(ov,dX),e(dX,tOo),e(ov,aOo),e(N,nOo),e(N,rv),e(rv,m_e),e(m_e,sOo),e(rv,lOo),e(rv,cX),e(cX,iOo),e(rv,dOo),e(N,cOo),e(N,tv),e(tv,g_e),e(g_e,fOo),e(tv,mOo),e(tv,fX),e(fX,gOo),e(tv,hOo),e(N,pOo),e(N,av),e(av,h_e),e(h_e,_Oo),e(av,uOo),e(av,mX),e(mX,bOo),e(av,vOo),e(N,FOo),e(N,nv),e(nv,p_e),e(p_e,TOo),e(nv,MOo),e(nv,gX),e(gX,EOo),e(nv,COo),e(N,wOo),e(N,sv),e(sv,__e),e(__e,AOo),e(sv,LOo),e(sv,hX),e(hX,yOo),e(sv,xOo),e(N,$Oo),e(N,lv),e(lv,u_e),e(u_e,kOo),e(lv,SOo),e(lv,pX),e(pX,ROo),e(lv,POo),e(N,BOo),e(N,iv),e(iv,b_e),e(b_e,IOo),e(iv,NOo),e(iv,_X),e(_X,qOo),e(iv,jOo),e(N,DOo),e(N,dv),e(dv,v_e),e(v_e,GOo),e(dv,OOo),e(dv,uX),e(uX,VOo),e(dv,XOo),e(N,zOo),e(N,cv),e(cv,F_e),e(F_e,WOo),e(cv,QOo),e(cv,bX),e(bX,HOo),e(cv,UOo),e(N,JOo),e(N,fv),e(fv,T_e),e(T_e,YOo),e(fv,KOo),e(fv,vX),e(vX,ZOo),e(fv,eVo),e(N,oVo),e(N,mv),e(mv,M_e),e(M_e,rVo),e(mv,tVo),e(mv,FX),e(FX,aVo),e(mv,nVo),e(N,sVo),e(N,gv),e(gv,E_e),e(E_e,lVo),e(gv,iVo),e(gv,TX),e(TX,dVo),e(gv,cVo),e(N,fVo),e(N,hv),e(hv,C_e),e(C_e,mVo),e(hv,gVo),e(hv,MX),e(MX,hVo),e(hv,pVo),e(N,_Vo),e(N,pv),e(pv,w_e),e(w_e,uVo),e(pv,bVo),e(pv,EX),e(EX,vVo),e(pv,FVo),e(N,TVo),e(N,_v),e(_v,A_e),e(A_e,MVo),e(_v,EVo),e(_v,CX),e(CX,CVo),e(_v,wVo),e(N,AVo),e(N,uv),e(uv,L_e),e(L_e,LVo),e(uv,yVo),e(uv,wX),e(wX,xVo),e(uv,$Vo),e(N,kVo),e(N,bv),e(bv,y_e),e(y_e,SVo),e(bv,RVo),e(bv,AX),e(AX,PVo),e(bv,BVo),e(N,IVo),e(N,vv),e(vv,x_e),e(x_e,NVo),e(vv,qVo),e(vv,LX),e(LX,jVo),e(vv,DVo),e(N,GVo),e(N,Fv),e(Fv,$_e),e($_e,OVo),e(Fv,VVo),e(Fv,yX),e(yX,XVo),e(Fv,zVo),e(N,WVo),e(N,Tv),e(Tv,k_e),e(k_e,QVo),e(Tv,HVo),e(Tv,xX),e(xX,UVo),e(Tv,JVo),e(N,YVo),e(N,Mv),e(Mv,S_e),e(S_e,KVo),e(Mv,ZVo),e(Mv,$X),e($X,eXo),e(Mv,oXo),e(N,rXo),e(N,Ev),e(Ev,R_e),e(R_e,tXo),e(Ev,aXo),e(Ev,kX),e(kX,nXo),e(Ev,sXo),e(N,lXo),e(N,Cv),e(Cv,P_e),e(P_e,iXo),e(Cv,dXo),e(Cv,SX),e(SX,cXo),e(Cv,fXo),e(N,mXo),e(N,wv),e(wv,B_e),e(B_e,gXo),e(wv,hXo),e(wv,RX),e(RX,pXo),e(wv,_Xo),e(N,uXo),e(N,Av),e(Av,I_e),e(I_e,bXo),e(Av,vXo),e(Av,PX),e(PX,FXo),e(Av,TXo),e(N,MXo),e(N,Lv),e(Lv,N_e),e(N_e,EXo),e(Lv,CXo),e(Lv,BX),e(BX,wXo),e(Lv,AXo),e(N,LXo),e(N,yv),e(yv,q_e),e(q_e,yXo),e(yv,xXo),e(yv,IX),e(IX,$Xo),e(yv,kXo),e(N,SXo),e(N,xv),e(xv,j_e),e(j_e,RXo),e(xv,PXo),e(xv,NX),e(NX,BXo),e(xv,IXo),e(N,NXo),e(N,$v),e($v,D_e),e(D_e,qXo),e($v,jXo),e($v,qX),e(qX,DXo),e($v,GXo),e(N,OXo),e(N,kv),e(kv,G_e),e(G_e,VXo),e(kv,XXo),e(kv,jX),e(jX,zXo),e(kv,WXo),e(N,QXo),e(N,Sv),e(Sv,O_e),e(O_e,HXo),e(Sv,UXo),e(Sv,DX),e(DX,JXo),e(Sv,YXo),e(N,KXo),e(N,Rv),e(Rv,V_e),e(V_e,ZXo),e(Rv,ezo),e(Rv,GX),e(GX,ozo),e(Rv,rzo),e(N,tzo),e(N,Pv),e(Pv,X_e),e(X_e,azo),e(Pv,nzo),e(Pv,OX),e(OX,szo),e(Pv,lzo),e(N,izo),e(N,Bv),e(Bv,z_e),e(z_e,dzo),e(Bv,czo),e(Bv,VX),e(VX,fzo),e(Bv,mzo),e(N,gzo),e(N,Iv),e(Iv,W_e),e(W_e,hzo),e(Iv,pzo),e(Iv,XX),e(XX,_zo),e(Iv,uzo),e(N,bzo),e(N,Nv),e(Nv,Q_e),e(Q_e,vzo),e(Nv,Fzo),e(Nv,zX),e(zX,Tzo),e(Nv,Mzo),e(N,Ezo),e(N,qv),e(qv,H_e),e(H_e,Czo),e(qv,wzo),e(qv,WX),e(WX,Azo),e(qv,Lzo),e(N,yzo),e(N,jv),e(jv,U_e),e(U_e,xzo),e(jv,$zo),e(jv,QX),e(QX,kzo),e(jv,Szo),e(N,Rzo),e(N,Dv),e(Dv,J_e),e(J_e,Pzo),e(Dv,Bzo),e(Dv,HX),e(HX,Izo),e(Dv,Nzo),e(N,qzo),e(N,Gv),e(Gv,Y_e),e(Y_e,jzo),e(Gv,Dzo),e(Gv,UX),e(UX,Gzo),e(Gv,Ozo),e(N,Vzo),e(N,Ov),e(Ov,K_e),e(K_e,Xzo),e(Ov,zzo),e(Ov,JX),e(JX,Wzo),e(Ov,Qzo),e(N,Hzo),e(N,Vv),e(Vv,Z_e),e(Z_e,Uzo),e(Vv,Jzo),e(Vv,YX),e(YX,Yzo),e(Vv,Kzo),e(oo,Zzo),e(oo,Xv),e(Xv,eWo),e(Xv,eue),e(eue,oWo),e(Xv,rWo),e(Xv,oue),e(oue,tWo),e(oo,aWo),M(zv,oo,null),b(f,PXe,u),b(f,nd,u),e(nd,Wv),e(Wv,rue),M(dL,rue,null),e(nd,nWo),e(nd,tue),e(tue,sWo),b(f,BXe,u),b(f,Bo,u),M(cL,Bo,null),e(Bo,lWo),e(Bo,sd),e(sd,iWo),e(sd,KX),e(KX,dWo),e(sd,cWo),e(sd,ZX),e(ZX,fWo),e(sd,mWo),e(Bo,gWo),e(Bo,fL),e(fL,hWo),e(fL,aue),e(aue,pWo),e(fL,_Wo),e(Bo,uWo),e(Bo,gt),M(mL,gt,null),e(gt,bWo),e(gt,nue),e(nue,vWo),e(gt,FWo),e(gt,ld),e(ld,TWo),e(ld,sue),e(sue,MWo),e(ld,EWo),e(ld,ez),e(ez,CWo),e(ld,wWo),e(gt,AWo),M(Qv,gt,null),e(Bo,LWo),e(Bo,ro),M(gL,ro,null),e(ro,yWo),e(ro,lue),e(lue,xWo),e(ro,$Wo),e(ro,Oa),e(Oa,kWo),e(Oa,iue),e(iue,SWo),e(Oa,RWo),e(Oa,due),e(due,PWo),e(Oa,BWo),e(Oa,cue),e(cue,IWo),e(Oa,NWo),e(ro,qWo),e(ro,Z),e(Z,Hv),e(Hv,fue),e(fue,jWo),e(Hv,DWo),e(Hv,oz),e(oz,GWo),e(Hv,OWo),e(Z,VWo),e(Z,Uv),e(Uv,mue),e(mue,XWo),e(Uv,zWo),e(Uv,rz),e(rz,WWo),e(Uv,QWo),e(Z,HWo),e(Z,Jv),e(Jv,gue),e(gue,UWo),e(Jv,JWo),e(Jv,tz),e(tz,YWo),e(Jv,KWo),e(Z,ZWo),e(Z,Yv),e(Yv,hue),e(hue,eQo),e(Yv,oQo),e(Yv,az),e(az,rQo),e(Yv,tQo),e(Z,aQo),e(Z,Kv),e(Kv,pue),e(pue,nQo),e(Kv,sQo),e(Kv,nz),e(nz,lQo),e(Kv,iQo),e(Z,dQo),e(Z,Zv),e(Zv,_ue),e(_ue,cQo),e(Zv,fQo),e(Zv,sz),e(sz,mQo),e(Zv,gQo),e(Z,hQo),e(Z,e3),e(e3,uue),e(uue,pQo),e(e3,_Qo),e(e3,lz),e(lz,uQo),e(e3,bQo),e(Z,vQo),e(Z,o3),e(o3,bue),e(bue,FQo),e(o3,TQo),e(o3,iz),e(iz,MQo),e(o3,EQo),e(Z,CQo),e(Z,r3),e(r3,vue),e(vue,wQo),e(r3,AQo),e(r3,dz),e(dz,LQo),e(r3,yQo),e(Z,xQo),e(Z,t3),e(t3,Fue),e(Fue,$Qo),e(t3,kQo),e(t3,cz),e(cz,SQo),e(t3,RQo),e(Z,PQo),e(Z,a3),e(a3,Tue),e(Tue,BQo),e(a3,IQo),e(a3,fz),e(fz,NQo),e(a3,qQo),e(Z,jQo),e(Z,n3),e(n3,Mue),e(Mue,DQo),e(n3,GQo),e(n3,mz),e(mz,OQo),e(n3,VQo),e(Z,XQo),e(Z,s3),e(s3,Eue),e(Eue,zQo),e(s3,WQo),e(s3,gz),e(gz,QQo),e(s3,HQo),e(Z,UQo),e(Z,l3),e(l3,Cue),e(Cue,JQo),e(l3,YQo),e(l3,hz),e(hz,KQo),e(l3,ZQo),e(Z,eHo),e(Z,i3),e(i3,wue),e(wue,oHo),e(i3,rHo),e(i3,pz),e(pz,tHo),e(i3,aHo),e(Z,nHo),e(Z,d3),e(d3,Aue),e(Aue,sHo),e(d3,lHo),e(d3,_z),e(_z,iHo),e(d3,dHo),e(Z,cHo),e(Z,c3),e(c3,Lue),e(Lue,fHo),e(c3,mHo),e(c3,uz),e(uz,gHo),e(c3,hHo),e(Z,pHo),e(Z,f3),e(f3,yue),e(yue,_Ho),e(f3,uHo),e(f3,bz),e(bz,bHo),e(f3,vHo),e(Z,FHo),e(Z,m3),e(m3,xue),e(xue,THo),e(m3,MHo),e(m3,vz),e(vz,EHo),e(m3,CHo),e(Z,wHo),e(Z,g3),e(g3,$ue),e($ue,AHo),e(g3,LHo),e(g3,Fz),e(Fz,yHo),e(g3,xHo),e(Z,$Ho),e(Z,h3),e(h3,kue),e(kue,kHo),e(h3,SHo),e(h3,Tz),e(Tz,RHo),e(h3,PHo),e(Z,BHo),e(Z,p3),e(p3,Sue),e(Sue,IHo),e(p3,NHo),e(p3,Mz),e(Mz,qHo),e(p3,jHo),e(Z,DHo),e(Z,_3),e(_3,Rue),e(Rue,GHo),e(_3,OHo),e(_3,Ez),e(Ez,VHo),e(_3,XHo),e(Z,zHo),e(Z,u3),e(u3,Pue),e(Pue,WHo),e(u3,QHo),e(u3,Cz),e(Cz,HHo),e(u3,UHo),e(Z,JHo),e(Z,b3),e(b3,Bue),e(Bue,YHo),e(b3,KHo),e(b3,wz),e(wz,ZHo),e(b3,eUo),e(Z,oUo),e(Z,v3),e(v3,Iue),e(Iue,rUo),e(v3,tUo),e(v3,Az),e(Az,aUo),e(v3,nUo),e(Z,sUo),e(Z,F3),e(F3,Nue),e(Nue,lUo),e(F3,iUo),e(F3,Lz),e(Lz,dUo),e(F3,cUo),e(Z,fUo),e(Z,T3),e(T3,que),e(que,mUo),e(T3,gUo),e(T3,yz),e(yz,hUo),e(T3,pUo),e(Z,_Uo),e(Z,M3),e(M3,jue),e(jue,uUo),e(M3,bUo),e(M3,xz),e(xz,vUo),e(M3,FUo),e(Z,TUo),e(Z,E3),e(E3,Due),e(Due,MUo),e(E3,EUo),e(E3,$z),e($z,CUo),e(E3,wUo),e(ro,AUo),e(ro,C3),e(C3,LUo),e(C3,Gue),e(Gue,yUo),e(C3,xUo),e(C3,Oue),e(Oue,$Uo),e(ro,kUo),M(w3,ro,null),b(f,IXe,u),b(f,id,u),e(id,A3),e(A3,Vue),M(hL,Vue,null),e(id,SUo),e(id,Xue),e(Xue,RUo),b(f,NXe,u),b(f,Io,u),M(pL,Io,null),e(Io,PUo),e(Io,dd),e(dd,BUo),e(dd,kz),e(kz,IUo),e(dd,NUo),e(dd,Sz),e(Sz,qUo),e(dd,jUo),e(Io,DUo),e(Io,_L),e(_L,GUo),e(_L,zue),e(zue,OUo),e(_L,VUo),e(Io,XUo),e(Io,ht),M(uL,ht,null),e(ht,zUo),e(ht,Wue),e(Wue,WUo),e(ht,QUo),e(ht,cd),e(cd,HUo),e(cd,Que),e(Que,UUo),e(cd,JUo),e(cd,Rz),e(Rz,YUo),e(cd,KUo),e(ht,ZUo),M(L3,ht,null),e(Io,eJo),e(Io,to),M(bL,to,null),e(to,oJo),e(to,Hue),e(Hue,rJo),e(to,tJo),e(to,Va),e(Va,aJo),e(Va,Uue),e(Uue,nJo),e(Va,sJo),e(Va,Jue),e(Jue,lJo),e(Va,iJo),e(Va,Yue),e(Yue,dJo),e(Va,cJo),e(to,fJo),e(to,No),e(No,y3),e(y3,Kue),e(Kue,mJo),e(y3,gJo),e(y3,Pz),e(Pz,hJo),e(y3,pJo),e(No,_Jo),e(No,x3),e(x3,Zue),e(Zue,uJo),e(x3,bJo),e(x3,Bz),e(Bz,vJo),e(x3,FJo),e(No,TJo),e(No,$3),e($3,e1e),e(e1e,MJo),e($3,EJo),e($3,Iz),e(Iz,CJo),e($3,wJo),e(No,AJo),e(No,k3),e(k3,o1e),e(o1e,LJo),e(k3,yJo),e(k3,Nz),e(Nz,xJo),e(k3,$Jo),e(No,kJo),e(No,S3),e(S3,r1e),e(r1e,SJo),e(S3,RJo),e(S3,qz),e(qz,PJo),e(S3,BJo),e(No,IJo),e(No,R3),e(R3,t1e),e(t1e,NJo),e(R3,qJo),e(R3,jz),e(jz,jJo),e(R3,DJo),e(to,GJo),e(to,P3),e(P3,OJo),e(P3,a1e),e(a1e,VJo),e(P3,XJo),e(P3,n1e),e(n1e,zJo),e(to,WJo),M(B3,to,null),b(f,qXe,u),b(f,fd,u),e(fd,I3),e(I3,s1e),M(vL,s1e,null),e(fd,QJo),e(fd,l1e),e(l1e,HJo),b(f,jXe,u),b(f,qo,u),M(FL,qo,null),e(qo,UJo),e(qo,md),e(md,JJo),e(md,Dz),e(Dz,YJo),e(md,KJo),e(md,Gz),e(Gz,ZJo),e(md,eYo),e(qo,oYo),e(qo,TL),e(TL,rYo),e(TL,i1e),e(i1e,tYo),e(TL,aYo),e(qo,nYo),e(qo,pt),M(ML,pt,null),e(pt,sYo),e(pt,d1e),e(d1e,lYo),e(pt,iYo),e(pt,gd),e(gd,dYo),e(gd,c1e),e(c1e,cYo),e(gd,fYo),e(gd,Oz),e(Oz,mYo),e(gd,gYo),e(pt,hYo),M(N3,pt,null),e(qo,pYo),e(qo,ao),M(EL,ao,null),e(ao,_Yo),e(ao,f1e),e(f1e,uYo),e(ao,bYo),e(ao,Xa),e(Xa,vYo),e(Xa,m1e),e(m1e,FYo),e(Xa,TYo),e(Xa,g1e),e(g1e,MYo),e(Xa,EYo),e(Xa,h1e),e(h1e,CYo),e(Xa,wYo),e(ao,AYo),e(ao,U),e(U,q3),e(q3,p1e),e(p1e,LYo),e(q3,yYo),e(q3,Vz),e(Vz,xYo),e(q3,$Yo),e(U,kYo),e(U,j3),e(j3,_1e),e(_1e,SYo),e(j3,RYo),e(j3,Xz),e(Xz,PYo),e(j3,BYo),e(U,IYo),e(U,D3),e(D3,u1e),e(u1e,NYo),e(D3,qYo),e(D3,zz),e(zz,jYo),e(D3,DYo),e(U,GYo),e(U,G3),e(G3,b1e),e(b1e,OYo),e(G3,VYo),e(G3,Wz),e(Wz,XYo),e(G3,zYo),e(U,WYo),e(U,O3),e(O3,v1e),e(v1e,QYo),e(O3,HYo),e(O3,Qz),e(Qz,UYo),e(O3,JYo),e(U,YYo),e(U,V3),e(V3,F1e),e(F1e,KYo),e(V3,ZYo),e(V3,Hz),e(Hz,eKo),e(V3,oKo),e(U,rKo),e(U,X3),e(X3,T1e),e(T1e,tKo),e(X3,aKo),e(X3,Uz),e(Uz,nKo),e(X3,sKo),e(U,lKo),e(U,z3),e(z3,M1e),e(M1e,iKo),e(z3,dKo),e(z3,Jz),e(Jz,cKo),e(z3,fKo),e(U,mKo),e(U,W3),e(W3,E1e),e(E1e,gKo),e(W3,hKo),e(W3,Yz),e(Yz,pKo),e(W3,_Ko),e(U,uKo),e(U,Q3),e(Q3,C1e),e(C1e,bKo),e(Q3,vKo),e(Q3,Kz),e(Kz,FKo),e(Q3,TKo),e(U,MKo),e(U,H3),e(H3,w1e),e(w1e,EKo),e(H3,CKo),e(H3,Zz),e(Zz,wKo),e(H3,AKo),e(U,LKo),e(U,U3),e(U3,A1e),e(A1e,yKo),e(U3,xKo),e(U3,eW),e(eW,$Ko),e(U3,kKo),e(U,SKo),e(U,J3),e(J3,L1e),e(L1e,RKo),e(J3,PKo),e(J3,oW),e(oW,BKo),e(J3,IKo),e(U,NKo),e(U,Y3),e(Y3,y1e),e(y1e,qKo),e(Y3,jKo),e(Y3,rW),e(rW,DKo),e(Y3,GKo),e(U,OKo),e(U,K3),e(K3,x1e),e(x1e,VKo),e(K3,XKo),e(K3,tW),e(tW,zKo),e(K3,WKo),e(U,QKo),e(U,Z3),e(Z3,$1e),e($1e,HKo),e(Z3,UKo),e(Z3,aW),e(aW,JKo),e(Z3,YKo),e(U,KKo),e(U,eF),e(eF,k1e),e(k1e,ZKo),e(eF,eZo),e(eF,nW),e(nW,oZo),e(eF,rZo),e(U,tZo),e(U,oF),e(oF,S1e),e(S1e,aZo),e(oF,nZo),e(oF,sW),e(sW,sZo),e(oF,lZo),e(U,iZo),e(U,rF),e(rF,R1e),e(R1e,dZo),e(rF,cZo),e(rF,lW),e(lW,fZo),e(rF,mZo),e(U,gZo),e(U,tF),e(tF,P1e),e(P1e,hZo),e(tF,pZo),e(tF,iW),e(iW,_Zo),e(tF,uZo),e(U,bZo),e(U,aF),e(aF,B1e),e(B1e,vZo),e(aF,FZo),e(aF,dW),e(dW,TZo),e(aF,MZo),e(U,EZo),e(U,nF),e(nF,I1e),e(I1e,CZo),e(nF,wZo),e(nF,cW),e(cW,AZo),e(nF,LZo),e(U,yZo),e(U,sF),e(sF,N1e),e(N1e,xZo),e(sF,$Zo),e(sF,fW),e(fW,kZo),e(sF,SZo),e(U,RZo),e(U,lF),e(lF,q1e),e(q1e,PZo),e(lF,BZo),e(lF,mW),e(mW,IZo),e(lF,NZo),e(U,qZo),e(U,iF),e(iF,j1e),e(j1e,jZo),e(iF,DZo),e(iF,gW),e(gW,GZo),e(iF,OZo),e(U,VZo),e(U,dF),e(dF,D1e),e(D1e,XZo),e(dF,zZo),e(dF,hW),e(hW,WZo),e(dF,QZo),e(U,HZo),e(U,cF),e(cF,G1e),e(G1e,UZo),e(cF,JZo),e(cF,pW),e(pW,YZo),e(cF,KZo),e(U,ZZo),e(U,fF),e(fF,O1e),e(O1e,eer),e(fF,oer),e(fF,_W),e(_W,rer),e(fF,ter),e(U,aer),e(U,mF),e(mF,V1e),e(V1e,ner),e(mF,ser),e(mF,uW),e(uW,ler),e(mF,ier),e(U,der),e(U,gF),e(gF,X1e),e(X1e,cer),e(gF,fer),e(gF,bW),e(bW,mer),e(gF,ger),e(U,her),e(U,hF),e(hF,z1e),e(z1e,per),e(hF,_er),e(hF,vW),e(vW,uer),e(hF,ber),e(U,ver),e(U,pF),e(pF,W1e),e(W1e,Fer),e(pF,Ter),e(pF,FW),e(FW,Mer),e(pF,Eer),e(U,Cer),e(U,_F),e(_F,Q1e),e(Q1e,wer),e(_F,Aer),e(_F,TW),e(TW,Ler),e(_F,yer),e(U,xer),e(U,uF),e(uF,H1e),e(H1e,$er),e(uF,ker),e(uF,MW),e(MW,Ser),e(uF,Rer),e(U,Per),e(U,bF),e(bF,U1e),e(U1e,Ber),e(bF,Ier),e(bF,EW),e(EW,Ner),e(bF,qer),e(U,jer),e(U,vF),e(vF,J1e),e(J1e,Der),e(vF,Ger),e(vF,CW),e(CW,Oer),e(vF,Ver),e(ao,Xer),e(ao,FF),e(FF,zer),e(FF,Y1e),e(Y1e,Wer),e(FF,Qer),e(FF,K1e),e(K1e,Her),e(ao,Uer),M(TF,ao,null),b(f,DXe,u),b(f,hd,u),e(hd,MF),e(MF,Z1e),M(CL,Z1e,null),e(hd,Jer),e(hd,e2e),e(e2e,Yer),b(f,GXe,u),b(f,jo,u),M(wL,jo,null),e(jo,Ker),e(jo,pd),e(pd,Zer),e(pd,wW),e(wW,eor),e(pd,oor),e(pd,AW),e(AW,ror),e(pd,tor),e(jo,aor),e(jo,AL),e(AL,nor),e(AL,o2e),e(o2e,sor),e(AL,lor),e(jo,ior),e(jo,_t),M(LL,_t,null),e(_t,dor),e(_t,r2e),e(r2e,cor),e(_t,mor),e(_t,_d),e(_d,gor),e(_d,t2e),e(t2e,hor),e(_d,por),e(_d,LW),e(LW,_or),e(_d,uor),e(_t,bor),M(EF,_t,null),e(jo,vor),e(jo,no),M(yL,no,null),e(no,For),e(no,a2e),e(a2e,Tor),e(no,Mor),e(no,za),e(za,Eor),e(za,n2e),e(n2e,Cor),e(za,wor),e(za,s2e),e(s2e,Aor),e(za,Lor),e(za,l2e),e(l2e,yor),e(za,xor),e(no,$or),e(no,V),e(V,CF),e(CF,i2e),e(i2e,kor),e(CF,Sor),e(CF,yW),e(yW,Ror),e(CF,Por),e(V,Bor),e(V,wF),e(wF,d2e),e(d2e,Ior),e(wF,Nor),e(wF,xW),e(xW,qor),e(wF,jor),e(V,Dor),e(V,AF),e(AF,c2e),e(c2e,Gor),e(AF,Oor),e(AF,$W),e($W,Vor),e(AF,Xor),e(V,zor),e(V,LF),e(LF,f2e),e(f2e,Wor),e(LF,Qor),e(LF,kW),e(kW,Hor),e(LF,Uor),e(V,Jor),e(V,yF),e(yF,m2e),e(m2e,Yor),e(yF,Kor),e(yF,SW),e(SW,Zor),e(yF,err),e(V,orr),e(V,xF),e(xF,g2e),e(g2e,rrr),e(xF,trr),e(xF,RW),e(RW,arr),e(xF,nrr),e(V,srr),e(V,$F),e($F,h2e),e(h2e,lrr),e($F,irr),e($F,PW),e(PW,drr),e($F,crr),e(V,frr),e(V,kF),e(kF,p2e),e(p2e,mrr),e(kF,grr),e(kF,BW),e(BW,hrr),e(kF,prr),e(V,_rr),e(V,SF),e(SF,_2e),e(_2e,urr),e(SF,brr),e(SF,IW),e(IW,vrr),e(SF,Frr),e(V,Trr),e(V,RF),e(RF,u2e),e(u2e,Mrr),e(RF,Err),e(RF,NW),e(NW,Crr),e(RF,wrr),e(V,Arr),e(V,PF),e(PF,b2e),e(b2e,Lrr),e(PF,yrr),e(PF,qW),e(qW,xrr),e(PF,$rr),e(V,krr),e(V,BF),e(BF,v2e),e(v2e,Srr),e(BF,Rrr),e(BF,jW),e(jW,Prr),e(BF,Brr),e(V,Irr),e(V,IF),e(IF,F2e),e(F2e,Nrr),e(IF,qrr),e(IF,DW),e(DW,jrr),e(IF,Drr),e(V,Grr),e(V,NF),e(NF,T2e),e(T2e,Orr),e(NF,Vrr),e(NF,GW),e(GW,Xrr),e(NF,zrr),e(V,Wrr),e(V,qF),e(qF,M2e),e(M2e,Qrr),e(qF,Hrr),e(qF,OW),e(OW,Urr),e(qF,Jrr),e(V,Yrr),e(V,jF),e(jF,E2e),e(E2e,Krr),e(jF,Zrr),e(jF,VW),e(VW,etr),e(jF,otr),e(V,rtr),e(V,DF),e(DF,C2e),e(C2e,ttr),e(DF,atr),e(DF,XW),e(XW,ntr),e(DF,str),e(V,ltr),e(V,GF),e(GF,w2e),e(w2e,itr),e(GF,dtr),e(GF,zW),e(zW,ctr),e(GF,ftr),e(V,mtr),e(V,OF),e(OF,A2e),e(A2e,gtr),e(OF,htr),e(OF,WW),e(WW,ptr),e(OF,_tr),e(V,utr),e(V,VF),e(VF,L2e),e(L2e,btr),e(VF,vtr),e(VF,QW),e(QW,Ftr),e(VF,Ttr),e(V,Mtr),e(V,XF),e(XF,y2e),e(y2e,Etr),e(XF,Ctr),e(XF,HW),e(HW,wtr),e(XF,Atr),e(V,Ltr),e(V,zF),e(zF,x2e),e(x2e,ytr),e(zF,xtr),e(zF,UW),e(UW,$tr),e(zF,ktr),e(V,Str),e(V,WF),e(WF,$2e),e($2e,Rtr),e(WF,Ptr),e(WF,JW),e(JW,Btr),e(WF,Itr),e(V,Ntr),e(V,QF),e(QF,k2e),e(k2e,qtr),e(QF,jtr),e(QF,YW),e(YW,Dtr),e(QF,Gtr),e(V,Otr),e(V,HF),e(HF,S2e),e(S2e,Vtr),e(HF,Xtr),e(HF,KW),e(KW,ztr),e(HF,Wtr),e(V,Qtr),e(V,UF),e(UF,R2e),e(R2e,Htr),e(UF,Utr),e(UF,ZW),e(ZW,Jtr),e(UF,Ytr),e(V,Ktr),e(V,JF),e(JF,P2e),e(P2e,Ztr),e(JF,ear),e(JF,eQ),e(eQ,oar),e(JF,rar),e(V,tar),e(V,YF),e(YF,B2e),e(B2e,aar),e(YF,nar),e(YF,oQ),e(oQ,sar),e(YF,lar),e(V,iar),e(V,KF),e(KF,I2e),e(I2e,dar),e(KF,car),e(KF,rQ),e(rQ,far),e(KF,mar),e(V,gar),e(V,ZF),e(ZF,N2e),e(N2e,har),e(ZF,par),e(ZF,tQ),e(tQ,_ar),e(ZF,uar),e(V,bar),e(V,eT),e(eT,q2e),e(q2e,Far),e(eT,Tar),e(eT,aQ),e(aQ,Mar),e(eT,Ear),e(V,Car),e(V,oT),e(oT,j2e),e(j2e,war),e(oT,Aar),e(oT,nQ),e(nQ,Lar),e(oT,yar),e(V,xar),e(V,rT),e(rT,D2e),e(D2e,$ar),e(rT,kar),e(rT,sQ),e(sQ,Sar),e(rT,Rar),e(V,Par),e(V,tT),e(tT,G2e),e(G2e,Bar),e(tT,Iar),e(tT,lQ),e(lQ,Nar),e(tT,qar),e(V,jar),e(V,aT),e(aT,O2e),e(O2e,Dar),e(aT,Gar),e(aT,iQ),e(iQ,Oar),e(aT,Var),e(V,Xar),e(V,nT),e(nT,V2e),e(V2e,zar),e(nT,War),e(nT,dQ),e(dQ,Qar),e(nT,Har),e(V,Uar),e(V,sT),e(sT,X2e),e(X2e,Jar),e(sT,Yar),e(sT,cQ),e(cQ,Kar),e(sT,Zar),e(V,enr),e(V,lT),e(lT,z2e),e(z2e,onr),e(lT,rnr),e(lT,fQ),e(fQ,tnr),e(lT,anr),e(V,nnr),e(V,iT),e(iT,W2e),e(W2e,snr),e(iT,lnr),e(iT,mQ),e(mQ,inr),e(iT,dnr),e(V,cnr),e(V,dT),e(dT,Q2e),e(Q2e,fnr),e(dT,mnr),e(dT,gQ),e(gQ,gnr),e(dT,hnr),e(V,pnr),e(V,cT),e(cT,H2e),e(H2e,_nr),e(cT,unr),e(cT,hQ),e(hQ,bnr),e(cT,vnr),e(V,Fnr),e(V,fT),e(fT,U2e),e(U2e,Tnr),e(fT,Mnr),e(fT,pQ),e(pQ,Enr),e(fT,Cnr),e(no,wnr),e(no,mT),e(mT,Anr),e(mT,J2e),e(J2e,Lnr),e(mT,ynr),e(mT,Y2e),e(Y2e,xnr),e(no,$nr),M(gT,no,null),b(f,OXe,u),b(f,ud,u),e(ud,hT),e(hT,K2e),M(xL,K2e,null),e(ud,knr),e(ud,Z2e),e(Z2e,Snr),b(f,VXe,u),b(f,Do,u),M($L,Do,null),e(Do,Rnr),e(Do,bd),e(bd,Pnr),e(bd,_Q),e(_Q,Bnr),e(bd,Inr),e(bd,uQ),e(uQ,Nnr),e(bd,qnr),e(Do,jnr),e(Do,kL),e(kL,Dnr),e(kL,ebe),e(ebe,Gnr),e(kL,Onr),e(Do,Vnr),e(Do,ut),M(SL,ut,null),e(ut,Xnr),e(ut,obe),e(obe,znr),e(ut,Wnr),e(ut,vd),e(vd,Qnr),e(vd,rbe),e(rbe,Hnr),e(vd,Unr),e(vd,bQ),e(bQ,Jnr),e(vd,Ynr),e(ut,Knr),M(pT,ut,null),e(Do,Znr),e(Do,so),M(RL,so,null),e(so,esr),e(so,tbe),e(tbe,osr),e(so,rsr),e(so,Wa),e(Wa,tsr),e(Wa,abe),e(abe,asr),e(Wa,nsr),e(Wa,nbe),e(nbe,ssr),e(Wa,lsr),e(Wa,sbe),e(sbe,isr),e(Wa,dsr),e(so,csr),e(so,lbe),e(lbe,_T),e(_T,ibe),e(ibe,fsr),e(_T,msr),e(_T,vQ),e(vQ,gsr),e(_T,hsr),e(so,psr),e(so,uT),e(uT,_sr),e(uT,dbe),e(dbe,usr),e(uT,bsr),e(uT,cbe),e(cbe,vsr),e(so,Fsr),M(bT,so,null),b(f,XXe,u),b(f,Fd,u),e(Fd,vT),e(vT,fbe),M(PL,fbe,null),e(Fd,Tsr),e(Fd,mbe),e(mbe,Msr),b(f,zXe,u),b(f,Go,u),M(BL,Go,null),e(Go,Esr),e(Go,Td),e(Td,Csr),e(Td,FQ),e(FQ,wsr),e(Td,Asr),e(Td,TQ),e(TQ,Lsr),e(Td,ysr),e(Go,xsr),e(Go,IL),e(IL,$sr),e(IL,gbe),e(gbe,ksr),e(IL,Ssr),e(Go,Rsr),e(Go,bt),M(NL,bt,null),e(bt,Psr),e(bt,hbe),e(hbe,Bsr),e(bt,Isr),e(bt,Md),e(Md,Nsr),e(Md,pbe),e(pbe,qsr),e(Md,jsr),e(Md,MQ),e(MQ,Dsr),e(Md,Gsr),e(bt,Osr),M(FT,bt,null),e(Go,Vsr),e(Go,lo),M(qL,lo,null),e(lo,Xsr),e(lo,_be),e(_be,zsr),e(lo,Wsr),e(lo,Qa),e(Qa,Qsr),e(Qa,ube),e(ube,Hsr),e(Qa,Usr),e(Qa,bbe),e(bbe,Jsr),e(Qa,Ysr),e(Qa,vbe),e(vbe,Ksr),e(Qa,Zsr),e(lo,elr),e(lo,ve),e(ve,TT),e(TT,Fbe),e(Fbe,olr),e(TT,rlr),e(TT,EQ),e(EQ,tlr),e(TT,alr),e(ve,nlr),e(ve,MT),e(MT,Tbe),e(Tbe,slr),e(MT,llr),e(MT,CQ),e(CQ,ilr),e(MT,dlr),e(ve,clr),e(ve,ET),e(ET,Mbe),e(Mbe,flr),e(ET,mlr),e(ET,wQ),e(wQ,glr),e(ET,hlr),e(ve,plr),e(ve,CT),e(CT,Ebe),e(Ebe,_lr),e(CT,ulr),e(CT,AQ),e(AQ,blr),e(CT,vlr),e(ve,Flr),e(ve,Us),e(Us,Cbe),e(Cbe,Tlr),e(Us,Mlr),e(Us,LQ),e(LQ,Elr),e(Us,Clr),e(Us,yQ),e(yQ,wlr),e(Us,Alr),e(ve,Llr),e(ve,wT),e(wT,wbe),e(wbe,ylr),e(wT,xlr),e(wT,xQ),e(xQ,$lr),e(wT,klr),e(ve,Slr),e(ve,Js),e(Js,Abe),e(Abe,Rlr),e(Js,Plr),e(Js,$Q),e($Q,Blr),e(Js,Ilr),e(Js,kQ),e(kQ,Nlr),e(Js,qlr),e(ve,jlr),e(ve,AT),e(AT,Lbe),e(Lbe,Dlr),e(AT,Glr),e(AT,SQ),e(SQ,Olr),e(AT,Vlr),e(ve,Xlr),e(ve,vt),e(vt,ybe),e(ybe,zlr),e(vt,Wlr),e(vt,RQ),e(RQ,Qlr),e(vt,Hlr),e(vt,PQ),e(PQ,Ulr),e(vt,Jlr),e(vt,BQ),e(BQ,Ylr),e(vt,Klr),e(ve,Zlr),e(ve,LT),e(LT,xbe),e(xbe,eir),e(LT,oir),e(LT,IQ),e(IQ,rir),e(LT,tir),e(ve,air),e(ve,yT),e(yT,$be),e($be,nir),e(yT,sir),e(yT,NQ),e(NQ,lir),e(yT,iir),e(ve,dir),e(ve,xT),e(xT,kbe),e(kbe,cir),e(xT,fir),e(xT,qQ),e(qQ,mir),e(xT,gir),e(ve,hir),e(ve,$T),e($T,Sbe),e(Sbe,pir),e($T,_ir),e($T,jQ),e(jQ,uir),e($T,bir),e(ve,vir),e(ve,kT),e(kT,Rbe),e(Rbe,Fir),e(kT,Tir),e(kT,DQ),e(DQ,Mir),e(kT,Eir),e(ve,Cir),e(ve,ST),e(ST,Pbe),e(Pbe,wir),e(ST,Air),e(ST,GQ),e(GQ,Lir),e(ST,yir),e(ve,xir),e(ve,RT),e(RT,Bbe),e(Bbe,$ir),e(RT,kir),e(RT,OQ),e(OQ,Sir),e(RT,Rir),e(lo,Pir),e(lo,PT),e(PT,Bir),e(PT,Ibe),e(Ibe,Iir),e(PT,Nir),e(PT,Nbe),e(Nbe,qir),e(lo,jir),M(BT,lo,null),b(f,WXe,u),b(f,Ed,u),e(Ed,IT),e(IT,qbe),M(jL,qbe,null),e(Ed,Dir),e(Ed,jbe),e(jbe,Gir),b(f,QXe,u),b(f,Oo,u),M(DL,Oo,null),e(Oo,Oir),e(Oo,Cd),e(Cd,Vir),e(Cd,VQ),e(VQ,Xir),e(Cd,zir),e(Cd,XQ),e(XQ,Wir),e(Cd,Qir),e(Oo,Hir),e(Oo,GL),e(GL,Uir),e(GL,Dbe),e(Dbe,Jir),e(GL,Yir),e(Oo,Kir),e(Oo,Ft),M(OL,Ft,null),e(Ft,Zir),e(Ft,Gbe),e(Gbe,edr),e(Ft,odr),e(Ft,wd),e(wd,rdr),e(wd,Obe),e(Obe,tdr),e(wd,adr),e(wd,zQ),e(zQ,ndr),e(wd,sdr),e(Ft,ldr),M(NT,Ft,null),e(Oo,idr),e(Oo,io),M(VL,io,null),e(io,ddr),e(io,Vbe),e(Vbe,cdr),e(io,fdr),e(io,Ha),e(Ha,mdr),e(Ha,Xbe),e(Xbe,gdr),e(Ha,hdr),e(Ha,zbe),e(zbe,pdr),e(Ha,_dr),e(Ha,Wbe),e(Wbe,udr),e(Ha,bdr),e(io,vdr),e(io,Qbe),e(Qbe,qT),e(qT,Hbe),e(Hbe,Fdr),e(qT,Tdr),e(qT,WQ),e(WQ,Mdr),e(qT,Edr),e(io,Cdr),e(io,jT),e(jT,wdr),e(jT,Ube),e(Ube,Adr),e(jT,Ldr),e(jT,Jbe),e(Jbe,ydr),e(io,xdr),M(DT,io,null),b(f,HXe,u),b(f,Ad,u),e(Ad,GT),e(GT,Ybe),M(XL,Ybe,null),e(Ad,$dr),e(Ad,Kbe),e(Kbe,kdr),b(f,UXe,u),b(f,Vo,u),M(zL,Vo,null),e(Vo,Sdr),e(Vo,Ld),e(Ld,Rdr),e(Ld,QQ),e(QQ,Pdr),e(Ld,Bdr),e(Ld,HQ),e(HQ,Idr),e(Ld,Ndr),e(Vo,qdr),e(Vo,WL),e(WL,jdr),e(WL,Zbe),e(Zbe,Ddr),e(WL,Gdr),e(Vo,Odr),e(Vo,Tt),M(QL,Tt,null),e(Tt,Vdr),e(Tt,eve),e(eve,Xdr),e(Tt,zdr),e(Tt,yd),e(yd,Wdr),e(yd,ove),e(ove,Qdr),e(yd,Hdr),e(yd,UQ),e(UQ,Udr),e(yd,Jdr),e(Tt,Ydr),M(OT,Tt,null),e(Vo,Kdr),e(Vo,co),M(HL,co,null),e(co,Zdr),e(co,rve),e(rve,ecr),e(co,ocr),e(co,Ua),e(Ua,rcr),e(Ua,tve),e(tve,tcr),e(Ua,acr),e(Ua,ave),e(ave,ncr),e(Ua,scr),e(Ua,nve),e(nve,lcr),e(Ua,icr),e(co,dcr),e(co,sve),e(sve,VT),e(VT,lve),e(lve,ccr),e(VT,fcr),e(VT,JQ),e(JQ,mcr),e(VT,gcr),e(co,hcr),e(co,XT),e(XT,pcr),e(XT,ive),e(ive,_cr),e(XT,ucr),e(XT,dve),e(dve,bcr),e(co,vcr),M(zT,co,null),b(f,JXe,u),b(f,xd,u),e(xd,WT),e(WT,cve),M(UL,cve,null),e(xd,Fcr),e(xd,fve),e(fve,Tcr),b(f,YXe,u),b(f,Xo,u),M(JL,Xo,null),e(Xo,Mcr),e(Xo,$d),e($d,Ecr),e($d,YQ),e(YQ,Ccr),e($d,wcr),e($d,KQ),e(KQ,Acr),e($d,Lcr),e(Xo,ycr),e(Xo,YL),e(YL,xcr),e(YL,mve),e(mve,$cr),e(YL,kcr),e(Xo,Scr),e(Xo,Mt),M(KL,Mt,null),e(Mt,Rcr),e(Mt,gve),e(gve,Pcr),e(Mt,Bcr),e(Mt,kd),e(kd,Icr),e(kd,hve),e(hve,Ncr),e(kd,qcr),e(kd,ZQ),e(ZQ,jcr),e(kd,Dcr),e(Mt,Gcr),M(QT,Mt,null),e(Xo,Ocr),e(Xo,fo),M(ZL,fo,null),e(fo,Vcr),e(fo,pve),e(pve,Xcr),e(fo,zcr),e(fo,Ja),e(Ja,Wcr),e(Ja,_ve),e(_ve,Qcr),e(Ja,Hcr),e(Ja,uve),e(uve,Ucr),e(Ja,Jcr),e(Ja,bve),e(bve,Ycr),e(Ja,Kcr),e(fo,Zcr),e(fo,Pe),e(Pe,HT),e(HT,vve),e(vve,efr),e(HT,ofr),e(HT,eH),e(eH,rfr),e(HT,tfr),e(Pe,afr),e(Pe,UT),e(UT,Fve),e(Fve,nfr),e(UT,sfr),e(UT,oH),e(oH,lfr),e(UT,ifr),e(Pe,dfr),e(Pe,JT),e(JT,Tve),e(Tve,cfr),e(JT,ffr),e(JT,rH),e(rH,mfr),e(JT,gfr),e(Pe,hfr),e(Pe,YT),e(YT,Mve),e(Mve,pfr),e(YT,_fr),e(YT,tH),e(tH,ufr),e(YT,bfr),e(Pe,vfr),e(Pe,KT),e(KT,Eve),e(Eve,Ffr),e(KT,Tfr),e(KT,aH),e(aH,Mfr),e(KT,Efr),e(Pe,Cfr),e(Pe,ZT),e(ZT,Cve),e(Cve,wfr),e(ZT,Afr),e(ZT,nH),e(nH,Lfr),e(ZT,yfr),e(Pe,xfr),e(Pe,e7),e(e7,wve),e(wve,$fr),e(e7,kfr),e(e7,sH),e(sH,Sfr),e(e7,Rfr),e(Pe,Pfr),e(Pe,o7),e(o7,Ave),e(Ave,Bfr),e(o7,Ifr),e(o7,lH),e(lH,Nfr),e(o7,qfr),e(Pe,jfr),e(Pe,r7),e(r7,Lve),e(Lve,Dfr),e(r7,Gfr),e(r7,iH),e(iH,Ofr),e(r7,Vfr),e(fo,Xfr),e(fo,t7),e(t7,zfr),e(t7,yve),e(yve,Wfr),e(t7,Qfr),e(t7,xve),e(xve,Hfr),e(fo,Ufr),M(a7,fo,null),b(f,KXe,u),b(f,Sd,u),e(Sd,n7),e(n7,$ve),M(ey,$ve,null),e(Sd,Jfr),e(Sd,kve),e(kve,Yfr),b(f,ZXe,u),b(f,zo,u),M(oy,zo,null),e(zo,Kfr),e(zo,Rd),e(Rd,Zfr),e(Rd,dH),e(dH,emr),e(Rd,omr),e(Rd,cH),e(cH,rmr),e(Rd,tmr),e(zo,amr),e(zo,ry),e(ry,nmr),e(ry,Sve),e(Sve,smr),e(ry,lmr),e(zo,imr),e(zo,Et),M(ty,Et,null),e(Et,dmr),e(Et,Rve),e(Rve,cmr),e(Et,fmr),e(Et,Pd),e(Pd,mmr),e(Pd,Pve),e(Pve,gmr),e(Pd,hmr),e(Pd,fH),e(fH,pmr),e(Pd,_mr),e(Et,umr),M(s7,Et,null),e(zo,bmr),e(zo,mo),M(ay,mo,null),e(mo,vmr),e(mo,Bve),e(Bve,Fmr),e(mo,Tmr),e(mo,Ya),e(Ya,Mmr),e(Ya,Ive),e(Ive,Emr),e(Ya,Cmr),e(Ya,Nve),e(Nve,wmr),e(Ya,Amr),e(Ya,qve),e(qve,Lmr),e(Ya,ymr),e(mo,xmr),e(mo,ot),e(ot,l7),e(l7,jve),e(jve,$mr),e(l7,kmr),e(l7,mH),e(mH,Smr),e(l7,Rmr),e(ot,Pmr),e(ot,i7),e(i7,Dve),e(Dve,Bmr),e(i7,Imr),e(i7,gH),e(gH,Nmr),e(i7,qmr),e(ot,jmr),e(ot,d7),e(d7,Gve),e(Gve,Dmr),e(d7,Gmr),e(d7,hH),e(hH,Omr),e(d7,Vmr),e(ot,Xmr),e(ot,c7),e(c7,Ove),e(Ove,zmr),e(c7,Wmr),e(c7,pH),e(pH,Qmr),e(c7,Hmr),e(ot,Umr),e(ot,f7),e(f7,Vve),e(Vve,Jmr),e(f7,Ymr),e(f7,_H),e(_H,Kmr),e(f7,Zmr),e(mo,egr),e(mo,m7),e(m7,ogr),e(m7,Xve),e(Xve,rgr),e(m7,tgr),e(m7,zve),e(zve,agr),e(mo,ngr),M(g7,mo,null),b(f,eze,u),b(f,Bd,u),e(Bd,h7),e(h7,Wve),M(ny,Wve,null),e(Bd,sgr),e(Bd,Qve),e(Qve,lgr),b(f,oze,u),b(f,Wo,u),M(sy,Wo,null),e(Wo,igr),e(Wo,Id),e(Id,dgr),e(Id,uH),e(uH,cgr),e(Id,fgr),e(Id,bH),e(bH,mgr),e(Id,ggr),e(Wo,hgr),e(Wo,ly),e(ly,pgr),e(ly,Hve),e(Hve,_gr),e(ly,ugr),e(Wo,bgr),e(Wo,Ct),M(iy,Ct,null),e(Ct,vgr),e(Ct,Uve),e(Uve,Fgr),e(Ct,Tgr),e(Ct,Nd),e(Nd,Mgr),e(Nd,Jve),e(Jve,Egr),e(Nd,Cgr),e(Nd,vH),e(vH,wgr),e(Nd,Agr),e(Ct,Lgr),M(p7,Ct,null),e(Wo,ygr),e(Wo,go),M(dy,go,null),e(go,xgr),e(go,Yve),e(Yve,$gr),e(go,kgr),e(go,Ka),e(Ka,Sgr),e(Ka,Kve),e(Kve,Rgr),e(Ka,Pgr),e(Ka,Zve),e(Zve,Bgr),e(Ka,Igr),e(Ka,e3e),e(e3e,Ngr),e(Ka,qgr),e(go,jgr),e(go,Le),e(Le,_7),e(_7,o3e),e(o3e,Dgr),e(_7,Ggr),e(_7,FH),e(FH,Ogr),e(_7,Vgr),e(Le,Xgr),e(Le,u7),e(u7,r3e),e(r3e,zgr),e(u7,Wgr),e(u7,TH),e(TH,Qgr),e(u7,Hgr),e(Le,Ugr),e(Le,b7),e(b7,t3e),e(t3e,Jgr),e(b7,Ygr),e(b7,MH),e(MH,Kgr),e(b7,Zgr),e(Le,ehr),e(Le,v7),e(v7,a3e),e(a3e,ohr),e(v7,rhr),e(v7,EH),e(EH,thr),e(v7,ahr),e(Le,nhr),e(Le,F7),e(F7,n3e),e(n3e,shr),e(F7,lhr),e(F7,CH),e(CH,ihr),e(F7,dhr),e(Le,chr),e(Le,T7),e(T7,s3e),e(s3e,fhr),e(T7,mhr),e(T7,wH),e(wH,ghr),e(T7,hhr),e(Le,phr),e(Le,M7),e(M7,l3e),e(l3e,_hr),e(M7,uhr),e(M7,AH),e(AH,bhr),e(M7,vhr),e(Le,Fhr),e(Le,E7),e(E7,i3e),e(i3e,Thr),e(E7,Mhr),e(E7,LH),e(LH,Ehr),e(E7,Chr),e(Le,whr),e(Le,C7),e(C7,d3e),e(d3e,Ahr),e(C7,Lhr),e(C7,yH),e(yH,yhr),e(C7,xhr),e(Le,$hr),e(Le,w7),e(w7,c3e),e(c3e,khr),e(w7,Shr),e(w7,xH),e(xH,Rhr),e(w7,Phr),e(go,Bhr),e(go,A7),e(A7,Ihr),e(A7,f3e),e(f3e,Nhr),e(A7,qhr),e(A7,m3e),e(m3e,jhr),e(go,Dhr),M(L7,go,null),b(f,rze,u),b(f,qd,u),e(qd,y7),e(y7,g3e),M(cy,g3e,null),e(qd,Ghr),e(qd,h3e),e(h3e,Ohr),b(f,tze,u),b(f,Qo,u),M(fy,Qo,null),e(Qo,Vhr),e(Qo,jd),e(jd,Xhr),e(jd,$H),e($H,zhr),e(jd,Whr),e(jd,kH),e(kH,Qhr),e(jd,Hhr),e(Qo,Uhr),e(Qo,my),e(my,Jhr),e(my,p3e),e(p3e,Yhr),e(my,Khr),e(Qo,Zhr),e(Qo,wt),M(gy,wt,null),e(wt,epr),e(wt,_3e),e(_3e,opr),e(wt,rpr),e(wt,Dd),e(Dd,tpr),e(Dd,u3e),e(u3e,apr),e(Dd,npr),e(Dd,SH),e(SH,spr),e(Dd,lpr),e(wt,ipr),M(x7,wt,null),e(Qo,dpr),e(Qo,ho),M(hy,ho,null),e(ho,cpr),e(ho,b3e),e(b3e,fpr),e(ho,mpr),e(ho,Za),e(Za,gpr),e(Za,v3e),e(v3e,hpr),e(Za,ppr),e(Za,F3e),e(F3e,_pr),e(Za,upr),e(Za,T3e),e(T3e,bpr),e(Za,vpr),e(ho,Fpr),e(ho,py),e(py,$7),e($7,M3e),e(M3e,Tpr),e($7,Mpr),e($7,RH),e(RH,Epr),e($7,Cpr),e(py,wpr),e(py,k7),e(k7,E3e),e(E3e,Apr),e(k7,Lpr),e(k7,PH),e(PH,ypr),e(k7,xpr),e(ho,$pr),e(ho,S7),e(S7,kpr),e(S7,C3e),e(C3e,Spr),e(S7,Rpr),e(S7,w3e),e(w3e,Ppr),e(ho,Bpr),M(R7,ho,null),b(f,aze,u),b(f,Gd,u),e(Gd,P7),e(P7,A3e),M(_y,A3e,null),e(Gd,Ipr),e(Gd,L3e),e(L3e,Npr),b(f,nze,u),b(f,Ho,u),M(uy,Ho,null),e(Ho,qpr),e(Ho,Od),e(Od,jpr),e(Od,BH),e(BH,Dpr),e(Od,Gpr),e(Od,IH),e(IH,Opr),e(Od,Vpr),e(Ho,Xpr),e(Ho,by),e(by,zpr),e(by,y3e),e(y3e,Wpr),e(by,Qpr),e(Ho,Hpr),e(Ho,At),M(vy,At,null),e(At,Upr),e(At,x3e),e(x3e,Jpr),e(At,Ypr),e(At,Vd),e(Vd,Kpr),e(Vd,$3e),e($3e,Zpr),e(Vd,e_r),e(Vd,NH),e(NH,o_r),e(Vd,r_r),e(At,t_r),M(B7,At,null),e(Ho,a_r),e(Ho,po),M(Fy,po,null),e(po,n_r),e(po,k3e),e(k3e,s_r),e(po,l_r),e(po,en),e(en,i_r),e(en,S3e),e(S3e,d_r),e(en,c_r),e(en,R3e),e(R3e,f_r),e(en,m_r),e(en,P3e),e(P3e,g_r),e(en,h_r),e(po,p_r),e(po,rt),e(rt,I7),e(I7,B3e),e(B3e,__r),e(I7,u_r),e(I7,qH),e(qH,b_r),e(I7,v_r),e(rt,F_r),e(rt,N7),e(N7,I3e),e(I3e,T_r),e(N7,M_r),e(N7,jH),e(jH,E_r),e(N7,C_r),e(rt,w_r),e(rt,q7),e(q7,N3e),e(N3e,A_r),e(q7,L_r),e(q7,DH),e(DH,y_r),e(q7,x_r),e(rt,$_r),e(rt,j7),e(j7,q3e),e(q3e,k_r),e(j7,S_r),e(j7,GH),e(GH,R_r),e(j7,P_r),e(rt,B_r),e(rt,D7),e(D7,j3e),e(j3e,I_r),e(D7,N_r),e(D7,OH),e(OH,q_r),e(D7,j_r),e(po,D_r),e(po,G7),e(G7,G_r),e(G7,D3e),e(D3e,O_r),e(G7,V_r),e(G7,G3e),e(G3e,X_r),e(po,z_r),M(O7,po,null),b(f,sze,u),b(f,Xd,u),e(Xd,V7),e(V7,O3e),M(Ty,O3e,null),e(Xd,W_r),e(Xd,V3e),e(V3e,Q_r),b(f,lze,u),b(f,Uo,u),M(My,Uo,null),e(Uo,H_r),e(Uo,zd),e(zd,U_r),e(zd,VH),e(VH,J_r),e(zd,Y_r),e(zd,XH),e(XH,K_r),e(zd,Z_r),e(Uo,eur),e(Uo,Ey),e(Ey,our),e(Ey,X3e),e(X3e,rur),e(Ey,tur),e(Uo,aur),e(Uo,Lt),M(Cy,Lt,null),e(Lt,nur),e(Lt,z3e),e(z3e,sur),e(Lt,lur),e(Lt,Wd),e(Wd,iur),e(Wd,W3e),e(W3e,dur),e(Wd,cur),e(Wd,zH),e(zH,fur),e(Wd,mur),e(Lt,gur),M(X7,Lt,null),e(Uo,hur),e(Uo,_o),M(wy,_o,null),e(_o,pur),e(_o,Q3e),e(Q3e,_ur),e(_o,uur),e(_o,on),e(on,bur),e(on,H3e),e(H3e,vur),e(on,Fur),e(on,U3e),e(U3e,Tur),e(on,Mur),e(on,J3e),e(J3e,Eur),e(on,Cur),e(_o,wur),e(_o,Qd),e(Qd,z7),e(z7,Y3e),e(Y3e,Aur),e(z7,Lur),e(z7,WH),e(WH,yur),e(z7,xur),e(Qd,$ur),e(Qd,W7),e(W7,K3e),e(K3e,kur),e(W7,Sur),e(W7,QH),e(QH,Rur),e(W7,Pur),e(Qd,Bur),e(Qd,Q7),e(Q7,Z3e),e(Z3e,Iur),e(Q7,Nur),e(Q7,HH),e(HH,qur),e(Q7,jur),e(_o,Dur),e(_o,H7),e(H7,Gur),e(H7,eFe),e(eFe,Our),e(H7,Vur),e(H7,oFe),e(oFe,Xur),e(_o,zur),M(U7,_o,null),b(f,ize,u),b(f,Hd,u),e(Hd,J7),e(J7,rFe),M(Ay,rFe,null),e(Hd,Wur),e(Hd,tFe),e(tFe,Qur),b(f,dze,u),b(f,Jo,u),M(Ly,Jo,null),e(Jo,Hur),e(Jo,Ud),e(Ud,Uur),e(Ud,UH),e(UH,Jur),e(Ud,Yur),e(Ud,JH),e(JH,Kur),e(Ud,Zur),e(Jo,e1r),e(Jo,yy),e(yy,o1r),e(yy,aFe),e(aFe,r1r),e(yy,t1r),e(Jo,a1r),e(Jo,yt),M(xy,yt,null),e(yt,n1r),e(yt,nFe),e(nFe,s1r),e(yt,l1r),e(yt,Jd),e(Jd,i1r),e(Jd,sFe),e(sFe,d1r),e(Jd,c1r),e(Jd,YH),e(YH,f1r),e(Jd,m1r),e(yt,g1r),M(Y7,yt,null),e(Jo,h1r),e(Jo,uo),M($y,uo,null),e(uo,p1r),e(uo,lFe),e(lFe,_1r),e(uo,u1r),e(uo,rn),e(rn,b1r),e(rn,iFe),e(iFe,v1r),e(rn,F1r),e(rn,dFe),e(dFe,T1r),e(rn,M1r),e(rn,cFe),e(cFe,E1r),e(rn,C1r),e(uo,w1r),e(uo,ky),e(ky,K7),e(K7,fFe),e(fFe,A1r),e(K7,L1r),e(K7,KH),e(KH,y1r),e(K7,x1r),e(ky,$1r),e(ky,Z7),e(Z7,mFe),e(mFe,k1r),e(Z7,S1r),e(Z7,ZH),e(ZH,R1r),e(Z7,P1r),e(uo,B1r),e(uo,e8),e(e8,I1r),e(e8,gFe),e(gFe,N1r),e(e8,q1r),e(e8,hFe),e(hFe,j1r),e(uo,D1r),M(o8,uo,null),b(f,cze,u),b(f,Yd,u),e(Yd,r8),e(r8,pFe),M(Sy,pFe,null),e(Yd,G1r),e(Yd,_Fe),e(_Fe,O1r),b(f,fze,u),b(f,Yo,u),M(Ry,Yo,null),e(Yo,V1r),e(Yo,Kd),e(Kd,X1r),e(Kd,eU),e(eU,z1r),e(Kd,W1r),e(Kd,oU),e(oU,Q1r),e(Kd,H1r),e(Yo,U1r),e(Yo,Py),e(Py,J1r),e(Py,uFe),e(uFe,Y1r),e(Py,K1r),e(Yo,Z1r),e(Yo,xt),M(By,xt,null),e(xt,e2r),e(xt,bFe),e(bFe,o2r),e(xt,r2r),e(xt,Zd),e(Zd,t2r),e(Zd,vFe),e(vFe,a2r),e(Zd,n2r),e(Zd,rU),e(rU,s2r),e(Zd,l2r),e(xt,i2r),M(t8,xt,null),e(Yo,d2r),e(Yo,bo),M(Iy,bo,null),e(bo,c2r),e(bo,FFe),e(FFe,f2r),e(bo,m2r),e(bo,tn),e(tn,g2r),e(tn,TFe),e(TFe,h2r),e(tn,p2r),e(tn,MFe),e(MFe,_2r),e(tn,u2r),e(tn,EFe),e(EFe,b2r),e(tn,v2r),e(bo,F2r),e(bo,CFe),e(CFe,a8),e(a8,wFe),e(wFe,T2r),e(a8,M2r),e(a8,tU),e(tU,E2r),e(a8,C2r),e(bo,w2r),e(bo,n8),e(n8,A2r),e(n8,AFe),e(AFe,L2r),e(n8,y2r),e(n8,LFe),e(LFe,x2r),e(bo,$2r),M(s8,bo,null),b(f,mze,u),b(f,ec,u),e(ec,l8),e(l8,yFe),M(Ny,yFe,null),e(ec,k2r),e(ec,xFe),e(xFe,S2r),b(f,gze,u),b(f,Ko,u),M(qy,Ko,null),e(Ko,R2r),e(Ko,oc),e(oc,P2r),e(oc,aU),e(aU,B2r),e(oc,I2r),e(oc,nU),e(nU,N2r),e(oc,q2r),e(Ko,j2r),e(Ko,jy),e(jy,D2r),e(jy,$Fe),e($Fe,G2r),e(jy,O2r),e(Ko,V2r),e(Ko,$t),M(Dy,$t,null),e($t,X2r),e($t,kFe),e(kFe,z2r),e($t,W2r),e($t,rc),e(rc,Q2r),e(rc,SFe),e(SFe,H2r),e(rc,U2r),e(rc,sU),e(sU,J2r),e(rc,Y2r),e($t,K2r),M(i8,$t,null),e(Ko,Z2r),e(Ko,vo),M(Gy,vo,null),e(vo,ebr),e(vo,RFe),e(RFe,obr),e(vo,rbr),e(vo,an),e(an,tbr),e(an,PFe),e(PFe,abr),e(an,nbr),e(an,BFe),e(BFe,sbr),e(an,lbr),e(an,IFe),e(IFe,ibr),e(an,dbr),e(vo,cbr),e(vo,tt),e(tt,d8),e(d8,NFe),e(NFe,fbr),e(d8,mbr),e(d8,lU),e(lU,gbr),e(d8,hbr),e(tt,pbr),e(tt,c8),e(c8,qFe),e(qFe,_br),e(c8,ubr),e(c8,iU),e(iU,bbr),e(c8,vbr),e(tt,Fbr),e(tt,f8),e(f8,jFe),e(jFe,Tbr),e(f8,Mbr),e(f8,dU),e(dU,Ebr),e(f8,Cbr),e(tt,wbr),e(tt,m8),e(m8,DFe),e(DFe,Abr),e(m8,Lbr),e(m8,cU),e(cU,ybr),e(m8,xbr),e(tt,$br),e(tt,g8),e(g8,GFe),e(GFe,kbr),e(g8,Sbr),e(g8,fU),e(fU,Rbr),e(g8,Pbr),e(vo,Bbr),e(vo,h8),e(h8,Ibr),e(h8,OFe),e(OFe,Nbr),e(h8,qbr),e(h8,VFe),e(VFe,jbr),e(vo,Dbr),M(p8,vo,null),b(f,hze,u),b(f,tc,u),e(tc,_8),e(_8,XFe),M(Oy,XFe,null),e(tc,Gbr),e(tc,zFe),e(zFe,Obr),b(f,pze,u),b(f,Zo,u),M(Vy,Zo,null),e(Zo,Vbr),e(Zo,ac),e(ac,Xbr),e(ac,mU),e(mU,zbr),e(ac,Wbr),e(ac,gU),e(gU,Qbr),e(ac,Hbr),e(Zo,Ubr),e(Zo,Xy),e(Xy,Jbr),e(Xy,WFe),e(WFe,Ybr),e(Xy,Kbr),e(Zo,Zbr),e(Zo,kt),M(zy,kt,null),e(kt,evr),e(kt,QFe),e(QFe,ovr),e(kt,rvr),e(kt,nc),e(nc,tvr),e(nc,HFe),e(HFe,avr),e(nc,nvr),e(nc,hU),e(hU,svr),e(nc,lvr),e(kt,ivr),M(u8,kt,null),e(Zo,dvr),e(Zo,Fo),M(Wy,Fo,null),e(Fo,cvr),e(Fo,UFe),e(UFe,fvr),e(Fo,mvr),e(Fo,nn),e(nn,gvr),e(nn,JFe),e(JFe,hvr),e(nn,pvr),e(nn,YFe),e(YFe,_vr),e(nn,uvr),e(nn,KFe),e(KFe,bvr),e(nn,vvr),e(Fo,Fvr),e(Fo,ZFe),e(ZFe,b8),e(b8,eTe),e(eTe,Tvr),e(b8,Mvr),e(b8,pU),e(pU,Evr),e(b8,Cvr),e(Fo,wvr),e(Fo,v8),e(v8,Avr),e(v8,oTe),e(oTe,Lvr),e(v8,yvr),e(v8,rTe),e(rTe,xvr),e(Fo,$vr),M(F8,Fo,null),b(f,_ze,u),b(f,sc,u),e(sc,T8),e(T8,tTe),M(Qy,tTe,null),e(sc,kvr),e(sc,aTe),e(aTe,Svr),b(f,uze,u),b(f,er,u),M(Hy,er,null),e(er,Rvr),e(er,lc),e(lc,Pvr),e(lc,_U),e(_U,Bvr),e(lc,Ivr),e(lc,uU),e(uU,Nvr),e(lc,qvr),e(er,jvr),e(er,Uy),e(Uy,Dvr),e(Uy,nTe),e(nTe,Gvr),e(Uy,Ovr),e(er,Vvr),e(er,St),M(Jy,St,null),e(St,Xvr),e(St,sTe),e(sTe,zvr),e(St,Wvr),e(St,ic),e(ic,Qvr),e(ic,lTe),e(lTe,Hvr),e(ic,Uvr),e(ic,bU),e(bU,Jvr),e(ic,Yvr),e(St,Kvr),M(M8,St,null),e(er,Zvr),e(er,xr),M(Yy,xr,null),e(xr,e3r),e(xr,iTe),e(iTe,o3r),e(xr,r3r),e(xr,sn),e(sn,t3r),e(sn,dTe),e(dTe,a3r),e(sn,n3r),e(sn,cTe),e(cTe,s3r),e(sn,l3r),e(sn,fTe),e(fTe,i3r),e(sn,d3r),e(xr,c3r),e(xr,q),e(q,E8),e(E8,mTe),e(mTe,f3r),e(E8,m3r),e(E8,vU),e(vU,g3r),e(E8,h3r),e(q,p3r),e(q,C8),e(C8,gTe),e(gTe,_3r),e(C8,u3r),e(C8,FU),e(FU,b3r),e(C8,v3r),e(q,F3r),e(q,w8),e(w8,hTe),e(hTe,T3r),e(w8,M3r),e(w8,TU),e(TU,E3r),e(w8,C3r),e(q,w3r),e(q,A8),e(A8,pTe),e(pTe,A3r),e(A8,L3r),e(A8,MU),e(MU,y3r),e(A8,x3r),e(q,$3r),e(q,L8),e(L8,_Te),e(_Te,k3r),e(L8,S3r),e(L8,EU),e(EU,R3r),e(L8,P3r),e(q,B3r),e(q,y8),e(y8,uTe),e(uTe,I3r),e(y8,N3r),e(y8,CU),e(CU,q3r),e(y8,j3r),e(q,D3r),e(q,x8),e(x8,bTe),e(bTe,G3r),e(x8,O3r),e(x8,wU),e(wU,V3r),e(x8,X3r),e(q,z3r),e(q,$8),e($8,vTe),e(vTe,W3r),e($8,Q3r),e($8,AU),e(AU,H3r),e($8,U3r),e(q,J3r),e(q,k8),e(k8,FTe),e(FTe,Y3r),e(k8,K3r),e(k8,LU),e(LU,Z3r),e(k8,eFr),e(q,oFr),e(q,S8),e(S8,TTe),e(TTe,rFr),e(S8,tFr),e(S8,yU),e(yU,aFr),e(S8,nFr),e(q,sFr),e(q,R8),e(R8,MTe),e(MTe,lFr),e(R8,iFr),e(R8,xU),e(xU,dFr),e(R8,cFr),e(q,fFr),e(q,P8),e(P8,ETe),e(ETe,mFr),e(P8,gFr),e(P8,$U),e($U,hFr),e(P8,pFr),e(q,_Fr),e(q,B8),e(B8,CTe),e(CTe,uFr),e(B8,bFr),e(B8,kU),e(kU,vFr),e(B8,FFr),e(q,TFr),e(q,I8),e(I8,wTe),e(wTe,MFr),e(I8,EFr),e(I8,SU),e(SU,CFr),e(I8,wFr),e(q,AFr),e(q,N8),e(N8,ATe),e(ATe,LFr),e(N8,yFr),e(N8,RU),e(RU,xFr),e(N8,$Fr),e(q,kFr),e(q,q8),e(q8,LTe),e(LTe,SFr),e(q8,RFr),e(q8,PU),e(PU,PFr),e(q8,BFr),e(q,IFr),e(q,j8),e(j8,yTe),e(yTe,NFr),e(j8,qFr),e(j8,BU),e(BU,jFr),e(j8,DFr),e(q,GFr),e(q,Ys),e(Ys,xTe),e(xTe,OFr),e(Ys,VFr),e(Ys,IU),e(IU,XFr),e(Ys,zFr),e(Ys,NU),e(NU,WFr),e(Ys,QFr),e(q,HFr),e(q,D8),e(D8,$Te),e($Te,UFr),e(D8,JFr),e(D8,qU),e(qU,YFr),e(D8,KFr),e(q,ZFr),e(q,G8),e(G8,kTe),e(kTe,eTr),e(G8,oTr),e(G8,jU),e(jU,rTr),e(G8,tTr),e(q,aTr),e(q,O8),e(O8,STe),e(STe,nTr),e(O8,sTr),e(O8,DU),e(DU,lTr),e(O8,iTr),e(q,dTr),e(q,V8),e(V8,RTe),e(RTe,cTr),e(V8,fTr),e(V8,GU),e(GU,mTr),e(V8,gTr),e(q,hTr),e(q,X8),e(X8,PTe),e(PTe,pTr),e(X8,_Tr),e(X8,OU),e(OU,uTr),e(X8,bTr),e(q,vTr),e(q,z8),e(z8,BTe),e(BTe,FTr),e(z8,TTr),e(z8,VU),e(VU,MTr),e(z8,ETr),e(q,CTr),e(q,W8),e(W8,ITe),e(ITe,wTr),e(W8,ATr),e(W8,XU),e(XU,LTr),e(W8,yTr),e(q,xTr),e(q,Q8),e(Q8,NTe),e(NTe,$Tr),e(Q8,kTr),e(Q8,zU),e(zU,STr),e(Q8,RTr),e(q,PTr),e(q,H8),e(H8,qTe),e(qTe,BTr),e(H8,ITr),e(H8,WU),e(WU,NTr),e(H8,qTr),e(q,jTr),e(q,U8),e(U8,jTe),e(jTe,DTr),e(U8,GTr),e(U8,QU),e(QU,OTr),e(U8,VTr),e(q,XTr),e(q,J8),e(J8,DTe),e(DTe,zTr),e(J8,WTr),e(J8,HU),e(HU,QTr),e(J8,HTr),e(q,UTr),e(q,Y8),e(Y8,GTe),e(GTe,JTr),e(Y8,YTr),e(Y8,UU),e(UU,KTr),e(Y8,ZTr),e(q,e7r),e(q,K8),e(K8,OTe),e(OTe,o7r),e(K8,r7r),e(K8,JU),e(JU,t7r),e(K8,a7r),e(q,n7r),e(q,Z8),e(Z8,VTe),e(VTe,s7r),e(Z8,l7r),e(Z8,YU),e(YU,i7r),e(Z8,d7r),e(q,c7r),e(q,e9),e(e9,XTe),e(XTe,f7r),e(e9,m7r),e(e9,KU),e(KU,g7r),e(e9,h7r),e(q,p7r),e(q,o9),e(o9,zTe),e(zTe,_7r),e(o9,u7r),e(o9,ZU),e(ZU,b7r),e(o9,v7r),e(q,F7r),e(q,r9),e(r9,WTe),e(WTe,T7r),e(r9,M7r),e(r9,eJ),e(eJ,E7r),e(r9,C7r),e(q,w7r),e(q,t9),e(t9,QTe),e(QTe,A7r),e(t9,L7r),e(t9,oJ),e(oJ,y7r),e(t9,x7r),e(q,$7r),e(q,a9),e(a9,HTe),e(HTe,k7r),e(a9,S7r),e(a9,rJ),e(rJ,R7r),e(a9,P7r),e(q,B7r),e(q,n9),e(n9,UTe),e(UTe,I7r),e(n9,N7r),e(n9,tJ),e(tJ,q7r),e(n9,j7r),e(q,D7r),e(q,s9),e(s9,JTe),e(JTe,G7r),e(s9,O7r),e(s9,aJ),e(aJ,V7r),e(s9,X7r),e(q,z7r),e(q,l9),e(l9,YTe),e(YTe,W7r),e(l9,Q7r),e(l9,nJ),e(nJ,H7r),e(l9,U7r),e(q,J7r),e(q,i9),e(i9,KTe),e(KTe,Y7r),e(i9,K7r),e(i9,sJ),e(sJ,Z7r),e(i9,e8r),e(q,o8r),e(q,d9),e(d9,ZTe),e(ZTe,r8r),e(d9,t8r),e(d9,lJ),e(lJ,a8r),e(d9,n8r),e(q,s8r),e(q,c9),e(c9,e7e),e(e7e,l8r),e(c9,i8r),e(c9,iJ),e(iJ,d8r),e(c9,c8r),e(q,f8r),e(q,f9),e(f9,o7e),e(o7e,m8r),e(f9,g8r),e(f9,dJ),e(dJ,h8r),e(f9,p8r),e(q,_8r),e(q,m9),e(m9,r7e),e(r7e,u8r),e(m9,b8r),e(m9,cJ),e(cJ,v8r),e(m9,F8r),e(q,T8r),e(q,g9),e(g9,t7e),e(t7e,M8r),e(g9,E8r),e(g9,fJ),e(fJ,C8r),e(g9,w8r),e(q,A8r),e(q,h9),e(h9,a7e),e(a7e,L8r),e(h9,y8r),e(h9,mJ),e(mJ,x8r),e(h9,$8r),e(q,k8r),e(q,p9),e(p9,n7e),e(n7e,S8r),e(p9,R8r),e(p9,gJ),e(gJ,P8r),e(p9,B8r),e(q,I8r),e(q,_9),e(_9,s7e),e(s7e,N8r),e(_9,q8r),e(_9,hJ),e(hJ,j8r),e(_9,D8r),e(xr,G8r),M(u9,xr,null),b(f,bze,u),b(f,dc,u),e(dc,b9),e(b9,l7e),M(Ky,l7e,null),e(dc,O8r),e(dc,i7e),e(i7e,V8r),b(f,vze,u),b(f,or,u),M(Zy,or,null),e(or,X8r),e(or,cc),e(cc,z8r),e(cc,pJ),e(pJ,W8r),e(cc,Q8r),e(cc,_J),e(_J,H8r),e(cc,U8r),e(or,J8r),e(or,ex),e(ex,Y8r),e(ex,d7e),e(d7e,K8r),e(ex,Z8r),e(or,e9r),e(or,Rt),M(ox,Rt,null),e(Rt,o9r),e(Rt,c7e),e(c7e,r9r),e(Rt,t9r),e(Rt,fc),e(fc,a9r),e(fc,f7e),e(f7e,n9r),e(fc,s9r),e(fc,uJ),e(uJ,l9r),e(fc,i9r),e(Rt,d9r),M(v9,Rt,null),e(or,c9r),e(or,$r),M(rx,$r,null),e($r,f9r),e($r,m7e),e(m7e,m9r),e($r,g9r),e($r,ln),e(ln,h9r),e(ln,g7e),e(g7e,p9r),e(ln,_9r),e(ln,h7e),e(h7e,u9r),e(ln,b9r),e(ln,p7e),e(p7e,v9r),e(ln,F9r),e($r,T9r),e($r,se),e(se,F9),e(F9,_7e),e(_7e,M9r),e(F9,E9r),e(F9,bJ),e(bJ,C9r),e(F9,w9r),e(se,A9r),e(se,T9),e(T9,u7e),e(u7e,L9r),e(T9,y9r),e(T9,vJ),e(vJ,x9r),e(T9,$9r),e(se,k9r),e(se,M9),e(M9,b7e),e(b7e,S9r),e(M9,R9r),e(M9,FJ),e(FJ,P9r),e(M9,B9r),e(se,I9r),e(se,E9),e(E9,v7e),e(v7e,N9r),e(E9,q9r),e(E9,TJ),e(TJ,j9r),e(E9,D9r),e(se,G9r),e(se,C9),e(C9,F7e),e(F7e,O9r),e(C9,V9r),e(C9,MJ),e(MJ,X9r),e(C9,z9r),e(se,W9r),e(se,w9),e(w9,T7e),e(T7e,Q9r),e(w9,H9r),e(w9,EJ),e(EJ,U9r),e(w9,J9r),e(se,Y9r),e(se,A9),e(A9,M7e),e(M7e,K9r),e(A9,Z9r),e(A9,CJ),e(CJ,eMr),e(A9,oMr),e(se,rMr),e(se,L9),e(L9,E7e),e(E7e,tMr),e(L9,aMr),e(L9,wJ),e(wJ,nMr),e(L9,sMr),e(se,lMr),e(se,y9),e(y9,C7e),e(C7e,iMr),e(y9,dMr),e(y9,AJ),e(AJ,cMr),e(y9,fMr),e(se,mMr),e(se,x9),e(x9,w7e),e(w7e,gMr),e(x9,hMr),e(x9,LJ),e(LJ,pMr),e(x9,_Mr),e(se,uMr),e(se,$9),e($9,A7e),e(A7e,bMr),e($9,vMr),e($9,yJ),e(yJ,FMr),e($9,TMr),e(se,MMr),e(se,k9),e(k9,L7e),e(L7e,EMr),e(k9,CMr),e(k9,xJ),e(xJ,wMr),e(k9,AMr),e(se,LMr),e(se,S9),e(S9,y7e),e(y7e,yMr),e(S9,xMr),e(S9,$J),e($J,$Mr),e(S9,kMr),e(se,SMr),e(se,R9),e(R9,x7e),e(x7e,RMr),e(R9,PMr),e(R9,kJ),e(kJ,BMr),e(R9,IMr),e(se,NMr),e(se,P9),e(P9,$7e),e($7e,qMr),e(P9,jMr),e(P9,SJ),e(SJ,DMr),e(P9,GMr),e(se,OMr),e(se,B9),e(B9,k7e),e(k7e,VMr),e(B9,XMr),e(B9,RJ),e(RJ,zMr),e(B9,WMr),e(se,QMr),e(se,I9),e(I9,S7e),e(S7e,HMr),e(I9,UMr),e(I9,PJ),e(PJ,JMr),e(I9,YMr),e(se,KMr),e(se,N9),e(N9,R7e),e(R7e,ZMr),e(N9,e4r),e(N9,BJ),e(BJ,o4r),e(N9,r4r),e(se,t4r),e(se,q9),e(q9,P7e),e(P7e,a4r),e(q9,n4r),e(q9,IJ),e(IJ,s4r),e(q9,l4r),e(se,i4r),e(se,j9),e(j9,B7e),e(B7e,d4r),e(j9,c4r),e(j9,NJ),e(NJ,f4r),e(j9,m4r),e(se,g4r),e(se,D9),e(D9,I7e),e(I7e,h4r),e(D9,p4r),e(D9,qJ),e(qJ,_4r),e(D9,u4r),e(se,b4r),e(se,G9),e(G9,N7e),e(N7e,v4r),e(G9,F4r),e(G9,jJ),e(jJ,T4r),e(G9,M4r),e(se,E4r),e(se,O9),e(O9,q7e),e(q7e,C4r),e(O9,w4r),e(O9,DJ),e(DJ,A4r),e(O9,L4r),e($r,y4r),M(V9,$r,null),b(f,Fze,u),b(f,mc,u),e(mc,X9),e(X9,j7e),M(tx,j7e,null),e(mc,x4r),e(mc,D7e),e(D7e,$4r),b(f,Tze,u),b(f,rr,u),M(ax,rr,null),e(rr,k4r),e(rr,gc),e(gc,S4r),e(gc,GJ),e(GJ,R4r),e(gc,P4r),e(gc,OJ),e(OJ,B4r),e(gc,I4r),e(rr,N4r),e(rr,nx),e(nx,q4r),e(nx,G7e),e(G7e,j4r),e(nx,D4r),e(rr,G4r),e(rr,Pt),M(sx,Pt,null),e(Pt,O4r),e(Pt,O7e),e(O7e,V4r),e(Pt,X4r),e(Pt,hc),e(hc,z4r),e(hc,V7e),e(V7e,W4r),e(hc,Q4r),e(hc,VJ),e(VJ,H4r),e(hc,U4r),e(Pt,J4r),M(z9,Pt,null),e(rr,Y4r),e(rr,kr),M(lx,kr,null),e(kr,K4r),e(kr,X7e),e(X7e,Z4r),e(kr,eEr),e(kr,dn),e(dn,oEr),e(dn,z7e),e(z7e,rEr),e(dn,tEr),e(dn,W7e),e(W7e,aEr),e(dn,nEr),e(dn,Q7e),e(Q7e,sEr),e(dn,lEr),e(kr,iEr),e(kr,Me),e(Me,W9),e(W9,H7e),e(H7e,dEr),e(W9,cEr),e(W9,XJ),e(XJ,fEr),e(W9,mEr),e(Me,gEr),e(Me,Q9),e(Q9,U7e),e(U7e,hEr),e(Q9,pEr),e(Q9,zJ),e(zJ,_Er),e(Q9,uEr),e(Me,bEr),e(Me,H9),e(H9,J7e),e(J7e,vEr),e(H9,FEr),e(H9,WJ),e(WJ,TEr),e(H9,MEr),e(Me,EEr),e(Me,U9),e(U9,Y7e),e(Y7e,CEr),e(U9,wEr),e(U9,QJ),e(QJ,AEr),e(U9,LEr),e(Me,yEr),e(Me,J9),e(J9,K7e),e(K7e,xEr),e(J9,$Er),e(J9,HJ),e(HJ,kEr),e(J9,SEr),e(Me,REr),e(Me,Y9),e(Y9,Z7e),e(Z7e,PEr),e(Y9,BEr),e(Y9,UJ),e(UJ,IEr),e(Y9,NEr),e(Me,qEr),e(Me,K9),e(K9,e8e),e(e8e,jEr),e(K9,DEr),e(K9,JJ),e(JJ,GEr),e(K9,OEr),e(Me,VEr),e(Me,Z9),e(Z9,o8e),e(o8e,XEr),e(Z9,zEr),e(Z9,YJ),e(YJ,WEr),e(Z9,QEr),e(Me,HEr),e(Me,eM),e(eM,r8e),e(r8e,UEr),e(eM,JEr),e(eM,KJ),e(KJ,YEr),e(eM,KEr),e(Me,ZEr),e(Me,oM),e(oM,t8e),e(t8e,eCr),e(oM,oCr),e(oM,ZJ),e(ZJ,rCr),e(oM,tCr),e(Me,aCr),e(Me,rM),e(rM,a8e),e(a8e,nCr),e(rM,sCr),e(rM,eY),e(eY,lCr),e(rM,iCr),e(Me,dCr),e(Me,tM),e(tM,n8e),e(n8e,cCr),e(tM,fCr),e(tM,oY),e(oY,mCr),e(tM,gCr),e(Me,hCr),e(Me,aM),e(aM,s8e),e(s8e,pCr),e(aM,_Cr),e(aM,rY),e(rY,uCr),e(aM,bCr),e(kr,vCr),M(nM,kr,null),b(f,Mze,u),b(f,pc,u),e(pc,sM),e(sM,l8e),M(ix,l8e,null),e(pc,FCr),e(pc,i8e),e(i8e,TCr),b(f,Eze,u),b(f,tr,u),M(dx,tr,null),e(tr,MCr),e(tr,_c),e(_c,ECr),e(_c,tY),e(tY,CCr),e(_c,wCr),e(_c,aY),e(aY,ACr),e(_c,LCr),e(tr,yCr),e(tr,cx),e(cx,xCr),e(cx,d8e),e(d8e,$Cr),e(cx,kCr),e(tr,SCr),e(tr,Bt),M(fx,Bt,null),e(Bt,RCr),e(Bt,c8e),e(c8e,PCr),e(Bt,BCr),e(Bt,uc),e(uc,ICr),e(uc,f8e),e(f8e,NCr),e(uc,qCr),e(uc,nY),e(nY,jCr),e(uc,DCr),e(Bt,GCr),M(lM,Bt,null),e(tr,OCr),e(tr,Sr),M(mx,Sr,null),e(Sr,VCr),e(Sr,m8e),e(m8e,XCr),e(Sr,zCr),e(Sr,cn),e(cn,WCr),e(cn,g8e),e(g8e,QCr),e(cn,HCr),e(cn,h8e),e(h8e,UCr),e(cn,JCr),e(cn,p8e),e(p8e,YCr),e(cn,KCr),e(Sr,ZCr),e(Sr,ar),e(ar,iM),e(iM,_8e),e(_8e,e5r),e(iM,o5r),e(iM,sY),e(sY,r5r),e(iM,t5r),e(ar,a5r),e(ar,dM),e(dM,u8e),e(u8e,n5r),e(dM,s5r),e(dM,lY),e(lY,l5r),e(dM,i5r),e(ar,d5r),e(ar,cM),e(cM,b8e),e(b8e,c5r),e(cM,f5r),e(cM,iY),e(iY,m5r),e(cM,g5r),e(ar,h5r),e(ar,fM),e(fM,v8e),e(v8e,p5r),e(fM,_5r),e(fM,dY),e(dY,u5r),e(fM,b5r),e(ar,v5r),e(ar,mM),e(mM,F8e),e(F8e,F5r),e(mM,T5r),e(mM,cY),e(cY,M5r),e(mM,E5r),e(ar,C5r),e(ar,gM),e(gM,T8e),e(T8e,w5r),e(gM,A5r),e(gM,fY),e(fY,L5r),e(gM,y5r),e(Sr,x5r),M(hM,Sr,null),b(f,Cze,u),b(f,bc,u),e(bc,pM),e(pM,M8e),M(gx,M8e,null),e(bc,$5r),e(bc,E8e),e(E8e,k5r),b(f,wze,u),b(f,nr,u),M(hx,nr,null),e(nr,S5r),e(nr,vc),e(vc,R5r),e(vc,mY),e(mY,P5r),e(vc,B5r),e(vc,gY),e(gY,I5r),e(vc,N5r),e(nr,q5r),e(nr,px),e(px,j5r),e(px,C8e),e(C8e,D5r),e(px,G5r),e(nr,O5r),e(nr,It),M(_x,It,null),e(It,V5r),e(It,w8e),e(w8e,X5r),e(It,z5r),e(It,Fc),e(Fc,W5r),e(Fc,A8e),e(A8e,Q5r),e(Fc,H5r),e(Fc,hY),e(hY,U5r),e(Fc,J5r),e(It,Y5r),M(_M,It,null),e(nr,K5r),e(nr,Rr),M(ux,Rr,null),e(Rr,Z5r),e(Rr,L8e),e(L8e,e0r),e(Rr,o0r),e(Rr,fn),e(fn,r0r),e(fn,y8e),e(y8e,t0r),e(fn,a0r),e(fn,x8e),e(x8e,n0r),e(fn,s0r),e(fn,$8e),e($8e,l0r),e(fn,i0r),e(Rr,d0r),e(Rr,ie),e(ie,uM),e(uM,k8e),e(k8e,c0r),e(uM,f0r),e(uM,pY),e(pY,m0r),e(uM,g0r),e(ie,h0r),e(ie,bM),e(bM,S8e),e(S8e,p0r),e(bM,_0r),e(bM,_Y),e(_Y,u0r),e(bM,b0r),e(ie,v0r),e(ie,vM),e(vM,R8e),e(R8e,F0r),e(vM,T0r),e(vM,uY),e(uY,M0r),e(vM,E0r),e(ie,C0r),e(ie,FM),e(FM,P8e),e(P8e,w0r),e(FM,A0r),e(FM,bY),e(bY,L0r),e(FM,y0r),e(ie,x0r),e(ie,TM),e(TM,B8e),e(B8e,$0r),e(TM,k0r),e(TM,vY),e(vY,S0r),e(TM,R0r),e(ie,P0r),e(ie,MM),e(MM,I8e),e(I8e,B0r),e(MM,I0r),e(MM,FY),e(FY,N0r),e(MM,q0r),e(ie,j0r),e(ie,EM),e(EM,N8e),e(N8e,D0r),e(EM,G0r),e(EM,TY),e(TY,O0r),e(EM,V0r),e(ie,X0r),e(ie,CM),e(CM,q8e),e(q8e,z0r),e(CM,W0r),e(CM,MY),e(MY,Q0r),e(CM,H0r),e(ie,U0r),e(ie,wM),e(wM,j8e),e(j8e,J0r),e(wM,Y0r),e(wM,EY),e(EY,K0r),e(wM,Z0r),e(ie,ewr),e(ie,AM),e(AM,D8e),e(D8e,owr),e(AM,rwr),e(AM,CY),e(CY,twr),e(AM,awr),e(ie,nwr),e(ie,LM),e(LM,G8e),e(G8e,swr),e(LM,lwr),e(LM,wY),e(wY,iwr),e(LM,dwr),e(ie,cwr),e(ie,yM),e(yM,O8e),e(O8e,fwr),e(yM,mwr),e(yM,AY),e(AY,gwr),e(yM,hwr),e(ie,pwr),e(ie,xM),e(xM,V8e),e(V8e,_wr),e(xM,uwr),e(xM,LY),e(LY,bwr),e(xM,vwr),e(ie,Fwr),e(ie,$M),e($M,X8e),e(X8e,Twr),e($M,Mwr),e($M,yY),e(yY,Ewr),e($M,Cwr),e(ie,wwr),e(ie,kM),e(kM,z8e),e(z8e,Awr),e(kM,Lwr),e(kM,xY),e(xY,ywr),e(kM,xwr),e(ie,$wr),e(ie,SM),e(SM,W8e),e(W8e,kwr),e(SM,Swr),e(SM,$Y),e($Y,Rwr),e(SM,Pwr),e(ie,Bwr),e(ie,RM),e(RM,Q8e),e(Q8e,Iwr),e(RM,Nwr),e(RM,kY),e(kY,qwr),e(RM,jwr),e(ie,Dwr),e(ie,PM),e(PM,H8e),e(H8e,Gwr),e(PM,Owr),e(PM,SY),e(SY,Vwr),e(PM,Xwr),e(ie,zwr),e(ie,BM),e(BM,U8e),e(U8e,Wwr),e(BM,Qwr),e(BM,RY),e(RY,Hwr),e(BM,Uwr),e(ie,Jwr),e(ie,IM),e(IM,J8e),e(J8e,Ywr),e(IM,Kwr),e(IM,PY),e(PY,Zwr),e(IM,eAr),e(Rr,oAr),M(NM,Rr,null),b(f,Aze,u),b(f,Tc,u),e(Tc,qM),e(qM,Y8e),M(bx,Y8e,null),e(Tc,rAr),e(Tc,K8e),e(K8e,tAr),b(f,Lze,u),b(f,sr,u),M(vx,sr,null),e(sr,aAr),e(sr,Mc),e(Mc,nAr),e(Mc,BY),e(BY,sAr),e(Mc,lAr),e(Mc,IY),e(IY,iAr),e(Mc,dAr),e(sr,cAr),e(sr,Fx),e(Fx,fAr),e(Fx,Z8e),e(Z8e,mAr),e(Fx,gAr),e(sr,hAr),e(sr,Nt),M(Tx,Nt,null),e(Nt,pAr),e(Nt,e9e),e(e9e,_Ar),e(Nt,uAr),e(Nt,Ec),e(Ec,bAr),e(Ec,o9e),e(o9e,vAr),e(Ec,FAr),e(Ec,NY),e(NY,TAr),e(Ec,MAr),e(Nt,EAr),M(jM,Nt,null),e(sr,CAr),e(sr,Pr),M(Mx,Pr,null),e(Pr,wAr),e(Pr,r9e),e(r9e,AAr),e(Pr,LAr),e(Pr,mn),e(mn,yAr),e(mn,t9e),e(t9e,xAr),e(mn,$Ar),e(mn,a9e),e(a9e,kAr),e(mn,SAr),e(mn,n9e),e(n9e,RAr),e(mn,PAr),e(Pr,BAr),e(Pr,ye),e(ye,DM),e(DM,s9e),e(s9e,IAr),e(DM,NAr),e(DM,qY),e(qY,qAr),e(DM,jAr),e(ye,DAr),e(ye,GM),e(GM,l9e),e(l9e,GAr),e(GM,OAr),e(GM,jY),e(jY,VAr),e(GM,XAr),e(ye,zAr),e(ye,OM),e(OM,i9e),e(i9e,WAr),e(OM,QAr),e(OM,DY),e(DY,HAr),e(OM,UAr),e(ye,JAr),e(ye,VM),e(VM,d9e),e(d9e,YAr),e(VM,KAr),e(VM,GY),e(GY,ZAr),e(VM,e6r),e(ye,o6r),e(ye,XM),e(XM,c9e),e(c9e,r6r),e(XM,t6r),e(XM,OY),e(OY,a6r),e(XM,n6r),e(ye,s6r),e(ye,zM),e(zM,f9e),e(f9e,l6r),e(zM,i6r),e(zM,VY),e(VY,d6r),e(zM,c6r),e(ye,f6r),e(ye,WM),e(WM,m9e),e(m9e,m6r),e(WM,g6r),e(WM,XY),e(XY,h6r),e(WM,p6r),e(ye,_6r),e(ye,QM),e(QM,g9e),e(g9e,u6r),e(QM,b6r),e(QM,zY),e(zY,v6r),e(QM,F6r),e(ye,T6r),e(ye,HM),e(HM,h9e),e(h9e,M6r),e(HM,E6r),e(HM,WY),e(WY,C6r),e(HM,w6r),e(ye,A6r),e(ye,UM),e(UM,p9e),e(p9e,L6r),e(UM,y6r),e(UM,QY),e(QY,x6r),e(UM,$6r),e(Pr,k6r),M(JM,Pr,null),b(f,yze,u),b(f,Cc,u),e(Cc,YM),e(YM,_9e),M(Ex,_9e,null),e(Cc,S6r),e(Cc,u9e),e(u9e,R6r),b(f,xze,u),b(f,lr,u),M(Cx,lr,null),e(lr,P6r),e(lr,wc),e(wc,B6r),e(wc,HY),e(HY,I6r),e(wc,N6r),e(wc,UY),e(UY,q6r),e(wc,j6r),e(lr,D6r),e(lr,wx),e(wx,G6r),e(wx,b9e),e(b9e,O6r),e(wx,V6r),e(lr,X6r),e(lr,qt),M(Ax,qt,null),e(qt,z6r),e(qt,v9e),e(v9e,W6r),e(qt,Q6r),e(qt,Ac),e(Ac,H6r),e(Ac,F9e),e(F9e,U6r),e(Ac,J6r),e(Ac,JY),e(JY,Y6r),e(Ac,K6r),e(qt,Z6r),M(KM,qt,null),e(lr,eLr),e(lr,Br),M(Lx,Br,null),e(Br,oLr),e(Br,T9e),e(T9e,rLr),e(Br,tLr),e(Br,gn),e(gn,aLr),e(gn,M9e),e(M9e,nLr),e(gn,sLr),e(gn,E9e),e(E9e,lLr),e(gn,iLr),e(gn,C9e),e(C9e,dLr),e(gn,cLr),e(Br,fLr),e(Br,te),e(te,ZM),e(ZM,w9e),e(w9e,mLr),e(ZM,gLr),e(ZM,YY),e(YY,hLr),e(ZM,pLr),e(te,_Lr),e(te,e4),e(e4,A9e),e(A9e,uLr),e(e4,bLr),e(e4,KY),e(KY,vLr),e(e4,FLr),e(te,TLr),e(te,o4),e(o4,L9e),e(L9e,MLr),e(o4,ELr),e(o4,ZY),e(ZY,CLr),e(o4,wLr),e(te,ALr),e(te,r4),e(r4,y9e),e(y9e,LLr),e(r4,yLr),e(r4,eK),e(eK,xLr),e(r4,$Lr),e(te,kLr),e(te,t4),e(t4,x9e),e(x9e,SLr),e(t4,RLr),e(t4,oK),e(oK,PLr),e(t4,BLr),e(te,ILr),e(te,a4),e(a4,$9e),e($9e,NLr),e(a4,qLr),e(a4,rK),e(rK,jLr),e(a4,DLr),e(te,GLr),e(te,n4),e(n4,k9e),e(k9e,OLr),e(n4,VLr),e(n4,tK),e(tK,XLr),e(n4,zLr),e(te,WLr),e(te,s4),e(s4,S9e),e(S9e,QLr),e(s4,HLr),e(s4,aK),e(aK,ULr),e(s4,JLr),e(te,YLr),e(te,l4),e(l4,R9e),e(R9e,KLr),e(l4,ZLr),e(l4,nK),e(nK,eyr),e(l4,oyr),e(te,ryr),e(te,i4),e(i4,P9e),e(P9e,tyr),e(i4,ayr),e(i4,sK),e(sK,nyr),e(i4,syr),e(te,lyr),e(te,d4),e(d4,B9e),e(B9e,iyr),e(d4,dyr),e(d4,lK),e(lK,cyr),e(d4,fyr),e(te,myr),e(te,c4),e(c4,I9e),e(I9e,gyr),e(c4,hyr),e(c4,iK),e(iK,pyr),e(c4,_yr),e(te,uyr),e(te,f4),e(f4,N9e),e(N9e,byr),e(f4,vyr),e(f4,dK),e(dK,Fyr),e(f4,Tyr),e(te,Myr),e(te,m4),e(m4,q9e),e(q9e,Eyr),e(m4,Cyr),e(m4,cK),e(cK,wyr),e(m4,Ayr),e(te,Lyr),e(te,g4),e(g4,j9e),e(j9e,yyr),e(g4,xyr),e(g4,fK),e(fK,$yr),e(g4,kyr),e(te,Syr),e(te,h4),e(h4,D9e),e(D9e,Ryr),e(h4,Pyr),e(h4,mK),e(mK,Byr),e(h4,Iyr),e(te,Nyr),e(te,p4),e(p4,G9e),e(G9e,qyr),e(p4,jyr),e(p4,gK),e(gK,Dyr),e(p4,Gyr),e(te,Oyr),e(te,_4),e(_4,O9e),e(O9e,Vyr),e(_4,Xyr),e(_4,hK),e(hK,zyr),e(_4,Wyr),e(te,Qyr),e(te,u4),e(u4,V9e),e(V9e,Hyr),e(u4,Uyr),e(u4,pK),e(pK,Jyr),e(u4,Yyr),e(te,Kyr),e(te,b4),e(b4,X9e),e(X9e,Zyr),e(b4,exr),e(b4,_K),e(_K,oxr),e(b4,rxr),e(te,txr),e(te,v4),e(v4,z9e),e(z9e,axr),e(v4,nxr),e(v4,uK),e(uK,sxr),e(v4,lxr),e(te,ixr),e(te,F4),e(F4,W9e),e(W9e,dxr),e(F4,cxr),e(F4,bK),e(bK,fxr),e(F4,mxr),e(te,gxr),e(te,T4),e(T4,Q9e),e(Q9e,hxr),e(T4,pxr),e(T4,vK),e(vK,_xr),e(T4,uxr),e(te,bxr),e(te,M4),e(M4,H9e),e(H9e,vxr),e(M4,Fxr),e(M4,FK),e(FK,Txr),e(M4,Mxr),e(te,Exr),e(te,E4),e(E4,U9e),e(U9e,Cxr),e(E4,wxr),e(E4,TK),e(TK,Axr),e(E4,Lxr),e(te,yxr),e(te,C4),e(C4,J9e),e(J9e,xxr),e(C4,$xr),e(C4,MK),e(MK,kxr),e(C4,Sxr),e(Br,Rxr),M(w4,Br,null),b(f,$ze,u),b(f,Lc,u),e(Lc,A4),e(A4,Y9e),M(yx,Y9e,null),e(Lc,Pxr),e(Lc,K9e),e(K9e,Bxr),b(f,kze,u),b(f,ir,u),M(xx,ir,null),e(ir,Ixr),e(ir,yc),e(yc,Nxr),e(yc,EK),e(EK,qxr),e(yc,jxr),e(yc,CK),e(CK,Dxr),e(yc,Gxr),e(ir,Oxr),e(ir,$x),e($x,Vxr),e($x,Z9e),e(Z9e,Xxr),e($x,zxr),e(ir,Wxr),e(ir,jt),M(kx,jt,null),e(jt,Qxr),e(jt,eMe),e(eMe,Hxr),e(jt,Uxr),e(jt,xc),e(xc,Jxr),e(xc,oMe),e(oMe,Yxr),e(xc,Kxr),e(xc,wK),e(wK,Zxr),e(xc,e$r),e(jt,o$r),M(L4,jt,null),e(ir,r$r),e(ir,Ir),M(Sx,Ir,null),e(Ir,t$r),e(Ir,rMe),e(rMe,a$r),e(Ir,n$r),e(Ir,hn),e(hn,s$r),e(hn,tMe),e(tMe,l$r),e(hn,i$r),e(hn,aMe),e(aMe,d$r),e(hn,c$r),e(hn,nMe),e(nMe,f$r),e(hn,m$r),e(Ir,g$r),e(Ir,ue),e(ue,y4),e(y4,sMe),e(sMe,h$r),e(y4,p$r),e(y4,AK),e(AK,_$r),e(y4,u$r),e(ue,b$r),e(ue,x4),e(x4,lMe),e(lMe,v$r),e(x4,F$r),e(x4,LK),e(LK,T$r),e(x4,M$r),e(ue,E$r),e(ue,$4),e($4,iMe),e(iMe,C$r),e($4,w$r),e($4,yK),e(yK,A$r),e($4,L$r),e(ue,y$r),e(ue,k4),e(k4,dMe),e(dMe,x$r),e(k4,$$r),e(k4,xK),e(xK,k$r),e(k4,S$r),e(ue,R$r),e(ue,S4),e(S4,cMe),e(cMe,P$r),e(S4,B$r),e(S4,$K),e($K,I$r),e(S4,N$r),e(ue,q$r),e(ue,R4),e(R4,fMe),e(fMe,j$r),e(R4,D$r),e(R4,kK),e(kK,G$r),e(R4,O$r),e(ue,V$r),e(ue,P4),e(P4,mMe),e(mMe,X$r),e(P4,z$r),e(P4,SK),e(SK,W$r),e(P4,Q$r),e(ue,H$r),e(ue,B4),e(B4,gMe),e(gMe,U$r),e(B4,J$r),e(B4,RK),e(RK,Y$r),e(B4,K$r),e(ue,Z$r),e(ue,I4),e(I4,hMe),e(hMe,ekr),e(I4,okr),e(I4,PK),e(PK,rkr),e(I4,tkr),e(ue,akr),e(ue,N4),e(N4,pMe),e(pMe,nkr),e(N4,skr),e(N4,BK),e(BK,lkr),e(N4,ikr),e(ue,dkr),e(ue,q4),e(q4,_Me),e(_Me,ckr),e(q4,fkr),e(q4,IK),e(IK,mkr),e(q4,gkr),e(ue,hkr),e(ue,j4),e(j4,uMe),e(uMe,pkr),e(j4,_kr),e(j4,NK),e(NK,ukr),e(j4,bkr),e(ue,vkr),e(ue,D4),e(D4,bMe),e(bMe,Fkr),e(D4,Tkr),e(D4,qK),e(qK,Mkr),e(D4,Ekr),e(ue,Ckr),e(ue,G4),e(G4,vMe),e(vMe,wkr),e(G4,Akr),e(G4,jK),e(jK,Lkr),e(G4,ykr),e(ue,xkr),e(ue,O4),e(O4,FMe),e(FMe,$kr),e(O4,kkr),e(O4,DK),e(DK,Skr),e(O4,Rkr),e(ue,Pkr),e(ue,V4),e(V4,TMe),e(TMe,Bkr),e(V4,Ikr),e(V4,GK),e(GK,Nkr),e(V4,qkr),e(ue,jkr),e(ue,X4),e(X4,MMe),e(MMe,Dkr),e(X4,Gkr),e(X4,OK),e(OK,Okr),e(X4,Vkr),e(Ir,Xkr),M(z4,Ir,null),b(f,Sze,u),b(f,$c,u),e($c,W4),e(W4,EMe),M(Rx,EMe,null),e($c,zkr),e($c,CMe),e(CMe,Wkr),b(f,Rze,u),b(f,dr,u),M(Px,dr,null),e(dr,Qkr),e(dr,kc),e(kc,Hkr),e(kc,VK),e(VK,Ukr),e(kc,Jkr),e(kc,XK),e(XK,Ykr),e(kc,Kkr),e(dr,Zkr),e(dr,Bx),e(Bx,eSr),e(Bx,wMe),e(wMe,oSr),e(Bx,rSr),e(dr,tSr),e(dr,Dt),M(Ix,Dt,null),e(Dt,aSr),e(Dt,AMe),e(AMe,nSr),e(Dt,sSr),e(Dt,Sc),e(Sc,lSr),e(Sc,LMe),e(LMe,iSr),e(Sc,dSr),e(Sc,zK),e(zK,cSr),e(Sc,fSr),e(Dt,mSr),M(Q4,Dt,null),e(dr,gSr),e(dr,Nr),M(Nx,Nr,null),e(Nr,hSr),e(Nr,yMe),e(yMe,pSr),e(Nr,_Sr),e(Nr,pn),e(pn,uSr),e(pn,xMe),e(xMe,bSr),e(pn,vSr),e(pn,$Me),e($Me,FSr),e(pn,TSr),e(pn,kMe),e(kMe,MSr),e(pn,ESr),e(Nr,CSr),e(Nr,qx),e(qx,H4),e(H4,SMe),e(SMe,wSr),e(H4,ASr),e(H4,WK),e(WK,LSr),e(H4,ySr),e(qx,xSr),e(qx,U4),e(U4,RMe),e(RMe,$Sr),e(U4,kSr),e(U4,QK),e(QK,SSr),e(U4,RSr),e(Nr,PSr),M(J4,Nr,null),b(f,Pze,u),b(f,Rc,u),e(Rc,Y4),e(Y4,PMe),M(jx,PMe,null),e(Rc,BSr),e(Rc,BMe),e(BMe,ISr),b(f,Bze,u),b(f,cr,u),M(Dx,cr,null),e(cr,NSr),e(cr,Pc),e(Pc,qSr),e(Pc,HK),e(HK,jSr),e(Pc,DSr),e(Pc,UK),e(UK,GSr),e(Pc,OSr),e(cr,VSr),e(cr,Gx),e(Gx,XSr),e(Gx,IMe),e(IMe,zSr),e(Gx,WSr),e(cr,QSr),e(cr,Gt),M(Ox,Gt,null),e(Gt,HSr),e(Gt,NMe),e(NMe,USr),e(Gt,JSr),e(Gt,Bc),e(Bc,YSr),e(Bc,qMe),e(qMe,KSr),e(Bc,ZSr),e(Bc,JK),e(JK,eRr),e(Bc,oRr),e(Gt,rRr),M(K4,Gt,null),e(cr,tRr),e(cr,qr),M(Vx,qr,null),e(qr,aRr),e(qr,jMe),e(jMe,nRr),e(qr,sRr),e(qr,_n),e(_n,lRr),e(_n,DMe),e(DMe,iRr),e(_n,dRr),e(_n,GMe),e(GMe,cRr),e(_n,fRr),e(_n,OMe),e(OMe,mRr),e(_n,gRr),e(qr,hRr),e(qr,VMe),e(VMe,Z4),e(Z4,XMe),e(XMe,pRr),e(Z4,_Rr),e(Z4,YK),e(YK,uRr),e(Z4,bRr),e(qr,vRr),M(eE,qr,null),b(f,Ize,u),b(f,Ic,u),e(Ic,oE),e(oE,zMe),M(Xx,zMe,null),e(Ic,FRr),e(Ic,WMe),e(WMe,TRr),b(f,Nze,u),b(f,fr,u),M(zx,fr,null),e(fr,MRr),e(fr,Nc),e(Nc,ERr),e(Nc,KK),e(KK,CRr),e(Nc,wRr),e(Nc,ZK),e(ZK,ARr),e(Nc,LRr),e(fr,yRr),e(fr,Wx),e(Wx,xRr),e(Wx,QMe),e(QMe,$Rr),e(Wx,kRr),e(fr,SRr),e(fr,Ot),M(Qx,Ot,null),e(Ot,RRr),e(Ot,HMe),e(HMe,PRr),e(Ot,BRr),e(Ot,qc),e(qc,IRr),e(qc,UMe),e(UMe,NRr),e(qc,qRr),e(qc,eZ),e(eZ,jRr),e(qc,DRr),e(Ot,GRr),M(rE,Ot,null),e(fr,ORr),e(fr,jr),M(Hx,jr,null),e(jr,VRr),e(jr,JMe),e(JMe,XRr),e(jr,zRr),e(jr,un),e(un,WRr),e(un,YMe),e(YMe,QRr),e(un,HRr),e(un,KMe),e(KMe,URr),e(un,JRr),e(un,ZMe),e(ZMe,YRr),e(un,KRr),e(jr,ZRr),e(jr,de),e(de,tE),e(tE,e4e),e(e4e,ePr),e(tE,oPr),e(tE,oZ),e(oZ,rPr),e(tE,tPr),e(de,aPr),e(de,aE),e(aE,o4e),e(o4e,nPr),e(aE,sPr),e(aE,rZ),e(rZ,lPr),e(aE,iPr),e(de,dPr),e(de,nE),e(nE,r4e),e(r4e,cPr),e(nE,fPr),e(nE,tZ),e(tZ,mPr),e(nE,gPr),e(de,hPr),e(de,sE),e(sE,t4e),e(t4e,pPr),e(sE,_Pr),e(sE,aZ),e(aZ,uPr),e(sE,bPr),e(de,vPr),e(de,lE),e(lE,a4e),e(a4e,FPr),e(lE,TPr),e(lE,nZ),e(nZ,MPr),e(lE,EPr),e(de,CPr),e(de,iE),e(iE,n4e),e(n4e,wPr),e(iE,APr),e(iE,sZ),e(sZ,LPr),e(iE,yPr),e(de,xPr),e(de,dE),e(dE,s4e),e(s4e,$Pr),e(dE,kPr),e(dE,lZ),e(lZ,SPr),e(dE,RPr),e(de,PPr),e(de,cE),e(cE,l4e),e(l4e,BPr),e(cE,IPr),e(cE,iZ),e(iZ,NPr),e(cE,qPr),e(de,jPr),e(de,fE),e(fE,i4e),e(i4e,DPr),e(fE,GPr),e(fE,dZ),e(dZ,OPr),e(fE,VPr),e(de,XPr),e(de,mE),e(mE,d4e),e(d4e,zPr),e(mE,WPr),e(mE,cZ),e(cZ,QPr),e(mE,HPr),e(de,UPr),e(de,gE),e(gE,c4e),e(c4e,JPr),e(gE,YPr),e(gE,fZ),e(fZ,KPr),e(gE,ZPr),e(de,eBr),e(de,hE),e(hE,f4e),e(f4e,oBr),e(hE,rBr),e(hE,mZ),e(mZ,tBr),e(hE,aBr),e(de,nBr),e(de,pE),e(pE,m4e),e(m4e,sBr),e(pE,lBr),e(pE,gZ),e(gZ,iBr),e(pE,dBr),e(de,cBr),e(de,_E),e(_E,g4e),e(g4e,fBr),e(_E,mBr),e(_E,hZ),e(hZ,gBr),e(_E,hBr),e(de,pBr),e(de,uE),e(uE,h4e),e(h4e,_Br),e(uE,uBr),e(uE,pZ),e(pZ,bBr),e(uE,vBr),e(de,FBr),e(de,bE),e(bE,p4e),e(p4e,TBr),e(bE,MBr),e(bE,_Z),e(_Z,EBr),e(bE,CBr),e(de,wBr),e(de,vE),e(vE,_4e),e(_4e,ABr),e(vE,LBr),e(vE,uZ),e(uZ,yBr),e(vE,xBr),e(de,$Br),e(de,FE),e(FE,u4e),e(u4e,kBr),e(FE,SBr),e(FE,bZ),e(bZ,RBr),e(FE,PBr),e(de,BBr),e(de,TE),e(TE,b4e),e(b4e,IBr),e(TE,NBr),e(TE,vZ),e(vZ,qBr),e(TE,jBr),e(de,DBr),e(de,ME),e(ME,v4e),e(v4e,GBr),e(ME,OBr),e(ME,FZ),e(FZ,VBr),e(ME,XBr),e(jr,zBr),M(EE,jr,null),b(f,qze,u),b(f,jc,u),e(jc,CE),e(CE,F4e),M(Ux,F4e,null),e(jc,WBr),e(jc,T4e),e(T4e,QBr),b(f,jze,u),b(f,mr,u),M(Jx,mr,null),e(mr,HBr),e(mr,Dc),e(Dc,UBr),e(Dc,TZ),e(TZ,JBr),e(Dc,YBr),e(Dc,MZ),e(MZ,KBr),e(Dc,ZBr),e(mr,eIr),e(mr,Yx),e(Yx,oIr),e(Yx,M4e),e(M4e,rIr),e(Yx,tIr),e(mr,aIr),e(mr,Vt),M(Kx,Vt,null),e(Vt,nIr),e(Vt,E4e),e(E4e,sIr),e(Vt,lIr),e(Vt,Gc),e(Gc,iIr),e(Gc,C4e),e(C4e,dIr),e(Gc,cIr),e(Gc,EZ),e(EZ,fIr),e(Gc,mIr),e(Vt,gIr),M(wE,Vt,null),e(mr,hIr),e(mr,Dr),M(Zx,Dr,null),e(Dr,pIr),e(Dr,w4e),e(w4e,_Ir),e(Dr,uIr),e(Dr,bn),e(bn,bIr),e(bn,A4e),e(A4e,vIr),e(bn,FIr),e(bn,L4e),e(L4e,TIr),e(bn,MIr),e(bn,y4e),e(y4e,EIr),e(bn,CIr),e(Dr,wIr),e(Dr,ce),e(ce,AE),e(AE,x4e),e(x4e,AIr),e(AE,LIr),e(AE,CZ),e(CZ,yIr),e(AE,xIr),e(ce,$Ir),e(ce,LE),e(LE,$4e),e($4e,kIr),e(LE,SIr),e(LE,wZ),e(wZ,RIr),e(LE,PIr),e(ce,BIr),e(ce,yE),e(yE,k4e),e(k4e,IIr),e(yE,NIr),e(yE,AZ),e(AZ,qIr),e(yE,jIr),e(ce,DIr),e(ce,xE),e(xE,S4e),e(S4e,GIr),e(xE,OIr),e(xE,LZ),e(LZ,VIr),e(xE,XIr),e(ce,zIr),e(ce,$E),e($E,R4e),e(R4e,WIr),e($E,QIr),e($E,yZ),e(yZ,HIr),e($E,UIr),e(ce,JIr),e(ce,kE),e(kE,P4e),e(P4e,YIr),e(kE,KIr),e(kE,xZ),e(xZ,ZIr),e(kE,eNr),e(ce,oNr),e(ce,SE),e(SE,B4e),e(B4e,rNr),e(SE,tNr),e(SE,$Z),e($Z,aNr),e(SE,nNr),e(ce,sNr),e(ce,RE),e(RE,I4e),e(I4e,lNr),e(RE,iNr),e(RE,kZ),e(kZ,dNr),e(RE,cNr),e(ce,fNr),e(ce,PE),e(PE,N4e),e(N4e,mNr),e(PE,gNr),e(PE,SZ),e(SZ,hNr),e(PE,pNr),e(ce,_Nr),e(ce,BE),e(BE,q4e),e(q4e,uNr),e(BE,bNr),e(BE,RZ),e(RZ,vNr),e(BE,FNr),e(ce,TNr),e(ce,IE),e(IE,j4e),e(j4e,MNr),e(IE,ENr),e(IE,PZ),e(PZ,CNr),e(IE,wNr),e(ce,ANr),e(ce,NE),e(NE,D4e),e(D4e,LNr),e(NE,yNr),e(NE,BZ),e(BZ,xNr),e(NE,$Nr),e(ce,kNr),e(ce,qE),e(qE,G4e),e(G4e,SNr),e(qE,RNr),e(qE,IZ),e(IZ,PNr),e(qE,BNr),e(ce,INr),e(ce,jE),e(jE,O4e),e(O4e,NNr),e(jE,qNr),e(jE,NZ),e(NZ,jNr),e(jE,DNr),e(ce,GNr),e(ce,DE),e(DE,V4e),e(V4e,ONr),e(DE,VNr),e(DE,qZ),e(qZ,XNr),e(DE,zNr),e(ce,WNr),e(ce,GE),e(GE,X4e),e(X4e,QNr),e(GE,HNr),e(GE,jZ),e(jZ,UNr),e(GE,JNr),e(ce,YNr),e(ce,OE),e(OE,z4e),e(z4e,KNr),e(OE,ZNr),e(OE,DZ),e(DZ,eqr),e(OE,oqr),e(ce,rqr),e(ce,VE),e(VE,W4e),e(W4e,tqr),e(VE,aqr),e(VE,GZ),e(GZ,nqr),e(VE,sqr),e(ce,lqr),e(ce,XE),e(XE,Q4e),e(Q4e,iqr),e(XE,dqr),e(XE,OZ),e(OZ,cqr),e(XE,fqr),e(ce,mqr),e(ce,zE),e(zE,H4e),e(H4e,gqr),e(zE,hqr),e(zE,VZ),e(VZ,pqr),e(zE,_qr),e(Dr,uqr),M(WE,Dr,null),b(f,Dze,u),b(f,Oc,u),e(Oc,QE),e(QE,U4e),M(e$,U4e,null),e(Oc,bqr),e(Oc,J4e),e(J4e,vqr),b(f,Gze,u),b(f,gr,u),M(o$,gr,null),e(gr,Fqr),e(gr,Vc),e(Vc,Tqr),e(Vc,XZ),e(XZ,Mqr),e(Vc,Eqr),e(Vc,zZ),e(zZ,Cqr),e(Vc,wqr),e(gr,Aqr),e(gr,r$),e(r$,Lqr),e(r$,Y4e),e(Y4e,yqr),e(r$,xqr),e(gr,$qr),e(gr,Xt),M(t$,Xt,null),e(Xt,kqr),e(Xt,K4e),e(K4e,Sqr),e(Xt,Rqr),e(Xt,Xc),e(Xc,Pqr),e(Xc,Z4e),e(Z4e,Bqr),e(Xc,Iqr),e(Xc,WZ),e(WZ,Nqr),e(Xc,qqr),e(Xt,jqr),M(HE,Xt,null),e(gr,Dqr),e(gr,Gr),M(a$,Gr,null),e(Gr,Gqr),e(Gr,eEe),e(eEe,Oqr),e(Gr,Vqr),e(Gr,vn),e(vn,Xqr),e(vn,oEe),e(oEe,zqr),e(vn,Wqr),e(vn,rEe),e(rEe,Qqr),e(vn,Hqr),e(vn,tEe),e(tEe,Uqr),e(vn,Jqr),e(Gr,Yqr),e(Gr,aEe),e(aEe,UE),e(UE,nEe),e(nEe,Kqr),e(UE,Zqr),e(UE,QZ),e(QZ,ejr),e(UE,ojr),e(Gr,rjr),M(JE,Gr,null),b(f,Oze,u),b(f,zc,u),e(zc,YE),e(YE,sEe),M(n$,sEe,null),e(zc,tjr),e(zc,lEe),e(lEe,ajr),b(f,Vze,u),b(f,hr,u),M(s$,hr,null),e(hr,njr),e(hr,Wc),e(Wc,sjr),e(Wc,HZ),e(HZ,ljr),e(Wc,ijr),e(Wc,UZ),e(UZ,djr),e(Wc,cjr),e(hr,fjr),e(hr,l$),e(l$,mjr),e(l$,iEe),e(iEe,gjr),e(l$,hjr),e(hr,pjr),e(hr,zt),M(i$,zt,null),e(zt,_jr),e(zt,dEe),e(dEe,ujr),e(zt,bjr),e(zt,Qc),e(Qc,vjr),e(Qc,cEe),e(cEe,Fjr),e(Qc,Tjr),e(Qc,JZ),e(JZ,Mjr),e(Qc,Ejr),e(zt,Cjr),M(KE,zt,null),e(hr,wjr),e(hr,Or),M(d$,Or,null),e(Or,Ajr),e(Or,fEe),e(fEe,Ljr),e(Or,yjr),e(Or,Fn),e(Fn,xjr),e(Fn,mEe),e(mEe,$jr),e(Fn,kjr),e(Fn,gEe),e(gEe,Sjr),e(Fn,Rjr),e(Fn,hEe),e(hEe,Pjr),e(Fn,Bjr),e(Or,Ijr),e(Or,pEe),e(pEe,ZE),e(ZE,_Ee),e(_Ee,Njr),e(ZE,qjr),e(ZE,YZ),e(YZ,jjr),e(ZE,Djr),e(Or,Gjr),M(eC,Or,null),b(f,Xze,u),b(f,Hc,u),e(Hc,oC),e(oC,uEe),M(c$,uEe,null),e(Hc,Ojr),e(Hc,bEe),e(bEe,Vjr),b(f,zze,u),b(f,pr,u),M(f$,pr,null),e(pr,Xjr),e(pr,Uc),e(Uc,zjr),e(Uc,KZ),e(KZ,Wjr),e(Uc,Qjr),e(Uc,ZZ),e(ZZ,Hjr),e(Uc,Ujr),e(pr,Jjr),e(pr,m$),e(m$,Yjr),e(m$,vEe),e(vEe,Kjr),e(m$,Zjr),e(pr,eDr),e(pr,Wt),M(g$,Wt,null),e(Wt,oDr),e(Wt,FEe),e(FEe,rDr),e(Wt,tDr),e(Wt,Jc),e(Jc,aDr),e(Jc,TEe),e(TEe,nDr),e(Jc,sDr),e(Jc,eee),e(eee,lDr),e(Jc,iDr),e(Wt,dDr),M(rC,Wt,null),e(pr,cDr),e(pr,Vr),M(h$,Vr,null),e(Vr,fDr),e(Vr,MEe),e(MEe,mDr),e(Vr,gDr),e(Vr,Tn),e(Tn,hDr),e(Tn,EEe),e(EEe,pDr),e(Tn,_Dr),e(Tn,CEe),e(CEe,uDr),e(Tn,bDr),e(Tn,wEe),e(wEe,vDr),e(Tn,FDr),e(Vr,TDr),e(Vr,oe),e(oe,tC),e(tC,AEe),e(AEe,MDr),e(tC,EDr),e(tC,oee),e(oee,CDr),e(tC,wDr),e(oe,ADr),e(oe,aC),e(aC,LEe),e(LEe,LDr),e(aC,yDr),e(aC,ree),e(ree,xDr),e(aC,$Dr),e(oe,kDr),e(oe,nC),e(nC,yEe),e(yEe,SDr),e(nC,RDr),e(nC,tee),e(tee,PDr),e(nC,BDr),e(oe,IDr),e(oe,sC),e(sC,xEe),e(xEe,NDr),e(sC,qDr),e(sC,aee),e(aee,jDr),e(sC,DDr),e(oe,GDr),e(oe,lC),e(lC,$Ee),e($Ee,ODr),e(lC,VDr),e(lC,nee),e(nee,XDr),e(lC,zDr),e(oe,WDr),e(oe,iC),e(iC,kEe),e(kEe,QDr),e(iC,HDr),e(iC,see),e(see,UDr),e(iC,JDr),e(oe,YDr),e(oe,dC),e(dC,SEe),e(SEe,KDr),e(dC,ZDr),e(dC,lee),e(lee,eGr),e(dC,oGr),e(oe,rGr),e(oe,cC),e(cC,REe),e(REe,tGr),e(cC,aGr),e(cC,iee),e(iee,nGr),e(cC,sGr),e(oe,lGr),e(oe,fC),e(fC,PEe),e(PEe,iGr),e(fC,dGr),e(fC,dee),e(dee,cGr),e(fC,fGr),e(oe,mGr),e(oe,mC),e(mC,BEe),e(BEe,gGr),e(mC,hGr),e(mC,cee),e(cee,pGr),e(mC,_Gr),e(oe,uGr),e(oe,gC),e(gC,IEe),e(IEe,bGr),e(gC,vGr),e(gC,fee),e(fee,FGr),e(gC,TGr),e(oe,MGr),e(oe,hC),e(hC,NEe),e(NEe,EGr),e(hC,CGr),e(hC,mee),e(mee,wGr),e(hC,AGr),e(oe,LGr),e(oe,pC),e(pC,qEe),e(qEe,yGr),e(pC,xGr),e(pC,gee),e(gee,$Gr),e(pC,kGr),e(oe,SGr),e(oe,_C),e(_C,jEe),e(jEe,RGr),e(_C,PGr),e(_C,hee),e(hee,BGr),e(_C,IGr),e(oe,NGr),e(oe,uC),e(uC,DEe),e(DEe,qGr),e(uC,jGr),e(uC,pee),e(pee,DGr),e(uC,GGr),e(oe,OGr),e(oe,bC),e(bC,GEe),e(GEe,VGr),e(bC,XGr),e(bC,_ee),e(_ee,zGr),e(bC,WGr),e(oe,QGr),e(oe,vC),e(vC,OEe),e(OEe,HGr),e(vC,UGr),e(vC,uee),e(uee,JGr),e(vC,YGr),e(oe,KGr),e(oe,FC),e(FC,VEe),e(VEe,ZGr),e(FC,eOr),e(FC,bee),e(bee,oOr),e(FC,rOr),e(oe,tOr),e(oe,TC),e(TC,XEe),e(XEe,aOr),e(TC,nOr),e(TC,vee),e(vee,sOr),e(TC,lOr),e(oe,iOr),e(oe,MC),e(MC,zEe),e(zEe,dOr),e(MC,cOr),e(MC,Fee),e(Fee,fOr),e(MC,mOr),e(oe,gOr),e(oe,EC),e(EC,WEe),e(WEe,hOr),e(EC,pOr),e(EC,Tee),e(Tee,_Or),e(EC,uOr),e(oe,bOr),e(oe,CC),e(CC,QEe),e(QEe,vOr),e(CC,FOr),e(CC,Mee),e(Mee,TOr),e(CC,MOr),e(oe,EOr),e(oe,wC),e(wC,HEe),e(HEe,COr),e(wC,wOr),e(wC,Eee),e(Eee,AOr),e(wC,LOr),e(oe,yOr),e(oe,AC),e(AC,UEe),e(UEe,xOr),e(AC,$Or),e(AC,Cee),e(Cee,kOr),e(AC,SOr),e(oe,ROr),e(oe,LC),e(LC,JEe),e(JEe,POr),e(LC,BOr),e(LC,wee),e(wee,IOr),e(LC,NOr),e(oe,qOr),e(oe,yC),e(yC,YEe),e(YEe,jOr),e(yC,DOr),e(yC,Aee),e(Aee,GOr),e(yC,OOr),e(oe,VOr),e(oe,xC),e(xC,KEe),e(KEe,XOr),e(xC,zOr),e(xC,Lee),e(Lee,WOr),e(xC,QOr),e(Vr,HOr),M($C,Vr,null),b(f,Wze,u),b(f,Yc,u),e(Yc,kC),e(kC,ZEe),M(p$,ZEe,null),e(Yc,UOr),e(Yc,eCe),e(eCe,JOr),b(f,Qze,u),b(f,_r,u),M(_$,_r,null),e(_r,YOr),e(_r,Kc),e(Kc,KOr),e(Kc,yee),e(yee,ZOr),e(Kc,eVr),e(Kc,xee),e(xee,oVr),e(Kc,rVr),e(_r,tVr),e(_r,u$),e(u$,aVr),e(u$,oCe),e(oCe,nVr),e(u$,sVr),e(_r,lVr),e(_r,Qt),M(b$,Qt,null),e(Qt,iVr),e(Qt,rCe),e(rCe,dVr),e(Qt,cVr),e(Qt,Zc),e(Zc,fVr),e(Zc,tCe),e(tCe,mVr),e(Zc,gVr),e(Zc,$ee),e($ee,hVr),e(Zc,pVr),e(Qt,_Vr),M(SC,Qt,null),e(_r,uVr),e(_r,Xr),M(v$,Xr,null),e(Xr,bVr),e(Xr,aCe),e(aCe,vVr),e(Xr,FVr),e(Xr,Mn),e(Mn,TVr),e(Mn,nCe),e(nCe,MVr),e(Mn,EVr),e(Mn,sCe),e(sCe,CVr),e(Mn,wVr),e(Mn,lCe),e(lCe,AVr),e(Mn,LVr),e(Xr,yVr),e(Xr,xe),e(xe,RC),e(RC,iCe),e(iCe,xVr),e(RC,$Vr),e(RC,kee),e(kee,kVr),e(RC,SVr),e(xe,RVr),e(xe,PC),e(PC,dCe),e(dCe,PVr),e(PC,BVr),e(PC,See),e(See,IVr),e(PC,NVr),e(xe,qVr),e(xe,BC),e(BC,cCe),e(cCe,jVr),e(BC,DVr),e(BC,Ree),e(Ree,GVr),e(BC,OVr),e(xe,VVr),e(xe,IC),e(IC,fCe),e(fCe,XVr),e(IC,zVr),e(IC,Pee),e(Pee,WVr),e(IC,QVr),e(xe,HVr),e(xe,NC),e(NC,mCe),e(mCe,UVr),e(NC,JVr),e(NC,Bee),e(Bee,YVr),e(NC,KVr),e(xe,ZVr),e(xe,qC),e(qC,gCe),e(gCe,eXr),e(qC,oXr),e(qC,Iee),e(Iee,rXr),e(qC,tXr),e(xe,aXr),e(xe,jC),e(jC,hCe),e(hCe,nXr),e(jC,sXr),e(jC,Nee),e(Nee,lXr),e(jC,iXr),e(xe,dXr),e(xe,DC),e(DC,pCe),e(pCe,cXr),e(DC,fXr),e(DC,qee),e(qee,mXr),e(DC,gXr),e(xe,hXr),e(xe,GC),e(GC,_Ce),e(_Ce,pXr),e(GC,_Xr),e(GC,jee),e(jee,uXr),e(GC,bXr),e(xe,vXr),e(xe,OC),e(OC,uCe),e(uCe,FXr),e(OC,TXr),e(OC,Dee),e(Dee,MXr),e(OC,EXr),e(Xr,CXr),M(VC,Xr,null),b(f,Hze,u),b(f,ef,u),e(ef,XC),e(XC,bCe),M(F$,bCe,null),e(ef,wXr),e(ef,vCe),e(vCe,AXr),b(f,Uze,u),b(f,ur,u),M(T$,ur,null),e(ur,LXr),e(ur,of),e(of,yXr),e(of,Gee),e(Gee,xXr),e(of,$Xr),e(of,Oee),e(Oee,kXr),e(of,SXr),e(ur,RXr),e(ur,M$),e(M$,PXr),e(M$,FCe),e(FCe,BXr),e(M$,IXr),e(ur,NXr),e(ur,Ht),M(E$,Ht,null),e(Ht,qXr),e(Ht,TCe),e(TCe,jXr),e(Ht,DXr),e(Ht,rf),e(rf,GXr),e(rf,MCe),e(MCe,OXr),e(rf,VXr),e(rf,Vee),e(Vee,XXr),e(rf,zXr),e(Ht,WXr),M(zC,Ht,null),e(ur,QXr),e(ur,zr),M(C$,zr,null),e(zr,HXr),e(zr,ECe),e(ECe,UXr),e(zr,JXr),e(zr,En),e(En,YXr),e(En,CCe),e(CCe,KXr),e(En,ZXr),e(En,wCe),e(wCe,ezr),e(En,ozr),e(En,ACe),e(ACe,rzr),e(En,tzr),e(zr,azr),e(zr,Ee),e(Ee,WC),e(WC,LCe),e(LCe,nzr),e(WC,szr),e(WC,Xee),e(Xee,lzr),e(WC,izr),e(Ee,dzr),e(Ee,QC),e(QC,yCe),e(yCe,czr),e(QC,fzr),e(QC,zee),e(zee,mzr),e(QC,gzr),e(Ee,hzr),e(Ee,HC),e(HC,xCe),e(xCe,pzr),e(HC,_zr),e(HC,Wee),e(Wee,uzr),e(HC,bzr),e(Ee,vzr),e(Ee,UC),e(UC,$Ce),e($Ce,Fzr),e(UC,Tzr),e(UC,Qee),e(Qee,Mzr),e(UC,Ezr),e(Ee,Czr),e(Ee,JC),e(JC,kCe),e(kCe,wzr),e(JC,Azr),e(JC,Hee),e(Hee,Lzr),e(JC,yzr),e(Ee,xzr),e(Ee,YC),e(YC,SCe),e(SCe,$zr),e(YC,kzr),e(YC,Uee),e(Uee,Szr),e(YC,Rzr),e(Ee,Pzr),e(Ee,KC),e(KC,RCe),e(RCe,Bzr),e(KC,Izr),e(KC,Jee),e(Jee,Nzr),e(KC,qzr),e(Ee,jzr),e(Ee,ZC),e(ZC,PCe),e(PCe,Dzr),e(ZC,Gzr),e(ZC,Yee),e(Yee,Ozr),e(ZC,Vzr),e(Ee,Xzr),e(Ee,e5),e(e5,BCe),e(BCe,zzr),e(e5,Wzr),e(e5,Kee),e(Kee,Qzr),e(e5,Hzr),e(Ee,Uzr),e(Ee,o5),e(o5,ICe),e(ICe,Jzr),e(o5,Yzr),e(o5,Zee),e(Zee,Kzr),e(o5,Zzr),e(Ee,eWr),e(Ee,r5),e(r5,NCe),e(NCe,oWr),e(r5,rWr),e(r5,eoe),e(eoe,tWr),e(r5,aWr),e(Ee,nWr),e(Ee,t5),e(t5,qCe),e(qCe,sWr),e(t5,lWr),e(t5,ooe),e(ooe,iWr),e(t5,dWr),e(Ee,cWr),e(Ee,a5),e(a5,jCe),e(jCe,fWr),e(a5,mWr),e(a5,roe),e(roe,gWr),e(a5,hWr),e(zr,pWr),M(n5,zr,null),b(f,Jze,u),b(f,tf,u),e(tf,s5),e(s5,DCe),M(w$,DCe,null),e(tf,_Wr),e(tf,GCe),e(GCe,uWr),b(f,Yze,u),b(f,br,u),M(A$,br,null),e(br,bWr),e(br,af),e(af,vWr),e(af,toe),e(toe,FWr),e(af,TWr),e(af,aoe),e(aoe,MWr),e(af,EWr),e(br,CWr),e(br,L$),e(L$,wWr),e(L$,OCe),e(OCe,AWr),e(L$,LWr),e(br,yWr),e(br,Ut),M(y$,Ut,null),e(Ut,xWr),e(Ut,VCe),e(VCe,$Wr),e(Ut,kWr),e(Ut,nf),e(nf,SWr),e(nf,XCe),e(XCe,RWr),e(nf,PWr),e(nf,noe),e(noe,BWr),e(nf,IWr),e(Ut,NWr),M(l5,Ut,null),e(br,qWr),e(br,Wr),M(x$,Wr,null),e(Wr,jWr),e(Wr,zCe),e(zCe,DWr),e(Wr,GWr),e(Wr,Cn),e(Cn,OWr),e(Cn,WCe),e(WCe,VWr),e(Cn,XWr),e(Cn,QCe),e(QCe,zWr),e(Cn,WWr),e(Cn,HCe),e(HCe,QWr),e(Cn,HWr),e(Wr,UWr),e(Wr,$e),e($e,i5),e(i5,UCe),e(UCe,JWr),e(i5,YWr),e(i5,soe),e(soe,KWr),e(i5,ZWr),e($e,eQr),e($e,d5),e(d5,JCe),e(JCe,oQr),e(d5,rQr),e(d5,loe),e(loe,tQr),e(d5,aQr),e($e,nQr),e($e,c5),e(c5,YCe),e(YCe,sQr),e(c5,lQr),e(c5,ioe),e(ioe,iQr),e(c5,dQr),e($e,cQr),e($e,f5),e(f5,KCe),e(KCe,fQr),e(f5,mQr),e(f5,doe),e(doe,gQr),e(f5,hQr),e($e,pQr),e($e,m5),e(m5,ZCe),e(ZCe,_Qr),e(m5,uQr),e(m5,coe),e(coe,bQr),e(m5,vQr),e($e,FQr),e($e,g5),e(g5,e5e),e(e5e,TQr),e(g5,MQr),e(g5,foe),e(foe,EQr),e(g5,CQr),e($e,wQr),e($e,h5),e(h5,o5e),e(o5e,AQr),e(h5,LQr),e(h5,moe),e(moe,yQr),e(h5,xQr),e($e,$Qr),e($e,p5),e(p5,r5e),e(r5e,kQr),e(p5,SQr),e(p5,goe),e(goe,RQr),e(p5,PQr),e($e,BQr),e($e,_5),e(_5,t5e),e(t5e,IQr),e(_5,NQr),e(_5,hoe),e(hoe,qQr),e(_5,jQr),e($e,DQr),e($e,u5),e(u5,a5e),e(a5e,GQr),e(u5,OQr),e(u5,poe),e(poe,VQr),e(u5,XQr),e(Wr,zQr),M(b5,Wr,null),b(f,Kze,u),b(f,sf,u),e(sf,v5),e(v5,n5e),M($$,n5e,null),e(sf,WQr),e(sf,s5e),e(s5e,QQr),b(f,Zze,u),b(f,vr,u),M(k$,vr,null),e(vr,HQr),e(vr,lf),e(lf,UQr),e(lf,_oe),e(_oe,JQr),e(lf,YQr),e(lf,uoe),e(uoe,KQr),e(lf,ZQr),e(vr,eHr),e(vr,S$),e(S$,oHr),e(S$,l5e),e(l5e,rHr),e(S$,tHr),e(vr,aHr),e(vr,Jt),M(R$,Jt,null),e(Jt,nHr),e(Jt,i5e),e(i5e,sHr),e(Jt,lHr),e(Jt,df),e(df,iHr),e(df,d5e),e(d5e,dHr),e(df,cHr),e(df,boe),e(boe,fHr),e(df,mHr),e(Jt,gHr),M(F5,Jt,null),e(vr,hHr),e(vr,Qr),M(P$,Qr,null),e(Qr,pHr),e(Qr,c5e),e(c5e,_Hr),e(Qr,uHr),e(Qr,wn),e(wn,bHr),e(wn,f5e),e(f5e,vHr),e(wn,FHr),e(wn,m5e),e(m5e,THr),e(wn,MHr),e(wn,g5e),e(g5e,EHr),e(wn,CHr),e(Qr,wHr),e(Qr,ke),e(ke,T5),e(T5,h5e),e(h5e,AHr),e(T5,LHr),e(T5,voe),e(voe,yHr),e(T5,xHr),e(ke,$Hr),e(ke,M5),e(M5,p5e),e(p5e,kHr),e(M5,SHr),e(M5,Foe),e(Foe,RHr),e(M5,PHr),e(ke,BHr),e(ke,E5),e(E5,_5e),e(_5e,IHr),e(E5,NHr),e(E5,Toe),e(Toe,qHr),e(E5,jHr),e(ke,DHr),e(ke,C5),e(C5,u5e),e(u5e,GHr),e(C5,OHr),e(C5,Moe),e(Moe,VHr),e(C5,XHr),e(ke,zHr),e(ke,w5),e(w5,b5e),e(b5e,WHr),e(w5,QHr),e(w5,Eoe),e(Eoe,HHr),e(w5,UHr),e(ke,JHr),e(ke,A5),e(A5,v5e),e(v5e,YHr),e(A5,KHr),e(A5,Coe),e(Coe,ZHr),e(A5,eUr),e(ke,oUr),e(ke,L5),e(L5,F5e),e(F5e,rUr),e(L5,tUr),e(L5,woe),e(woe,aUr),e(L5,nUr),e(ke,sUr),e(ke,y5),e(y5,T5e),e(T5e,lUr),e(y5,iUr),e(y5,Aoe),e(Aoe,dUr),e(y5,cUr),e(ke,fUr),e(ke,x5),e(x5,M5e),e(M5e,mUr),e(x5,gUr),e(x5,Loe),e(Loe,hUr),e(x5,pUr),e(ke,_Ur),e(ke,$5),e($5,E5e),e(E5e,uUr),e($5,bUr),e($5,yoe),e(yoe,vUr),e($5,FUr),e(Qr,TUr),M(k5,Qr,null),b(f,eWe,u),b(f,cf,u),e(cf,S5),e(S5,C5e),M(B$,C5e,null),e(cf,MUr),e(cf,w5e),e(w5e,EUr),b(f,oWe,u),b(f,Fr,u),M(I$,Fr,null),e(Fr,CUr),e(Fr,ff),e(ff,wUr),e(ff,xoe),e(xoe,AUr),e(ff,LUr),e(ff,$oe),e($oe,yUr),e(ff,xUr),e(Fr,$Ur),e(Fr,N$),e(N$,kUr),e(N$,A5e),e(A5e,SUr),e(N$,RUr),e(Fr,PUr),e(Fr,Yt),M(q$,Yt,null),e(Yt,BUr),e(Yt,L5e),e(L5e,IUr),e(Yt,NUr),e(Yt,mf),e(mf,qUr),e(mf,y5e),e(y5e,jUr),e(mf,DUr),e(mf,koe),e(koe,GUr),e(mf,OUr),e(Yt,VUr),M(R5,Yt,null),e(Fr,XUr),e(Fr,Hr),M(j$,Hr,null),e(Hr,zUr),e(Hr,x5e),e(x5e,WUr),e(Hr,QUr),e(Hr,An),e(An,HUr),e(An,$5e),e($5e,UUr),e(An,JUr),e(An,k5e),e(k5e,YUr),e(An,KUr),e(An,S5e),e(S5e,ZUr),e(An,eJr),e(Hr,oJr),e(Hr,Se),e(Se,P5),e(P5,R5e),e(R5e,rJr),e(P5,tJr),e(P5,Soe),e(Soe,aJr),e(P5,nJr),e(Se,sJr),e(Se,B5),e(B5,P5e),e(P5e,lJr),e(B5,iJr),e(B5,Roe),e(Roe,dJr),e(B5,cJr),e(Se,fJr),e(Se,I5),e(I5,B5e),e(B5e,mJr),e(I5,gJr),e(I5,Poe),e(Poe,hJr),e(I5,pJr),e(Se,_Jr),e(Se,N5),e(N5,I5e),e(I5e,uJr),e(N5,bJr),e(N5,Boe),e(Boe,vJr),e(N5,FJr),e(Se,TJr),e(Se,q5),e(q5,N5e),e(N5e,MJr),e(q5,EJr),e(q5,Ioe),e(Ioe,CJr),e(q5,wJr),e(Se,AJr),e(Se,j5),e(j5,q5e),e(q5e,LJr),e(j5,yJr),e(j5,Noe),e(Noe,xJr),e(j5,$Jr),e(Se,kJr),e(Se,D5),e(D5,j5e),e(j5e,SJr),e(D5,RJr),e(D5,qoe),e(qoe,PJr),e(D5,BJr),e(Se,IJr),e(Se,G5),e(G5,D5e),e(D5e,NJr),e(G5,qJr),e(G5,joe),e(joe,jJr),e(G5,DJr),e(Se,GJr),e(Se,O5),e(O5,G5e),e(G5e,OJr),e(O5,VJr),e(O5,Doe),e(Doe,XJr),e(O5,zJr),e(Se,WJr),e(Se,V5),e(V5,O5e),e(O5e,QJr),e(V5,HJr),e(V5,Goe),e(Goe,UJr),e(V5,JJr),e(Hr,YJr),M(X5,Hr,null),b(f,rWe,u),b(f,gf,u),e(gf,z5),e(z5,V5e),M(D$,V5e,null),e(gf,KJr),e(gf,X5e),e(X5e,ZJr),b(f,tWe,u),b(f,Tr,u),M(G$,Tr,null),e(Tr,eYr),e(Tr,hf),e(hf,oYr),e(hf,Ooe),e(Ooe,rYr),e(hf,tYr),e(hf,Voe),e(Voe,aYr),e(hf,nYr),e(Tr,sYr),e(Tr,O$),e(O$,lYr),e(O$,z5e),e(z5e,iYr),e(O$,dYr),e(Tr,cYr),e(Tr,Kt),M(V$,Kt,null),e(Kt,fYr),e(Kt,W5e),e(W5e,mYr),e(Kt,gYr),e(Kt,pf),e(pf,hYr),e(pf,Q5e),e(Q5e,pYr),e(pf,_Yr),e(pf,Xoe),e(Xoe,uYr),e(pf,bYr),e(Kt,vYr),M(W5,Kt,null),e(Tr,FYr),e(Tr,Ur),M(X$,Ur,null),e(Ur,TYr),e(Ur,H5e),e(H5e,MYr),e(Ur,EYr),e(Ur,Ln),e(Ln,CYr),e(Ln,U5e),e(U5e,wYr),e(Ln,AYr),e(Ln,J5e),e(J5e,LYr),e(Ln,yYr),e(Ln,Y5e),e(Y5e,xYr),e(Ln,$Yr),e(Ur,kYr),e(Ur,Re),e(Re,Q5),e(Q5,K5e),e(K5e,SYr),e(Q5,RYr),e(Q5,zoe),e(zoe,PYr),e(Q5,BYr),e(Re,IYr),e(Re,H5),e(H5,Z5e),e(Z5e,NYr),e(H5,qYr),e(H5,Woe),e(Woe,jYr),e(H5,DYr),e(Re,GYr),e(Re,U5),e(U5,e0e),e(e0e,OYr),e(U5,VYr),e(U5,Qoe),e(Qoe,XYr),e(U5,zYr),e(Re,WYr),e(Re,J5),e(J5,o0e),e(o0e,QYr),e(J5,HYr),e(J5,Hoe),e(Hoe,UYr),e(J5,JYr),e(Re,YYr),e(Re,Y5),e(Y5,r0e),e(r0e,KYr),e(Y5,ZYr),e(Y5,Uoe),e(Uoe,eKr),e(Y5,oKr),e(Re,rKr),e(Re,K5),e(K5,t0e),e(t0e,tKr),e(K5,aKr),e(K5,Joe),e(Joe,nKr),e(K5,sKr),e(Re,lKr),e(Re,Z5),e(Z5,a0e),e(a0e,iKr),e(Z5,dKr),e(Z5,Yoe),e(Yoe,cKr),e(Z5,fKr),e(Re,mKr),e(Re,e0),e(e0,n0e),e(n0e,gKr),e(e0,hKr),e(e0,Koe),e(Koe,pKr),e(e0,_Kr),e(Re,uKr),e(Re,o0),e(o0,s0e),e(s0e,bKr),e(o0,vKr),e(o0,Zoe),e(Zoe,FKr),e(o0,TKr),e(Re,MKr),e(Re,r0),e(r0,l0e),e(l0e,EKr),e(r0,CKr),e(r0,ere),e(ere,wKr),e(r0,AKr),e(Ur,LKr),M(t0,Ur,null),b(f,aWe,u),b(f,_f,u),e(_f,a0),e(a0,i0e),M(z$,i0e,null),e(_f,yKr),e(_f,d0e),e(d0e,xKr),b(f,nWe,u),b(f,Mr,u),M(W$,Mr,null),e(Mr,$Kr),e(Mr,uf),e(uf,kKr),e(uf,ore),e(ore,SKr),e(uf,RKr),e(uf,rre),e(rre,PKr),e(uf,BKr),e(Mr,IKr),e(Mr,Q$),e(Q$,NKr),e(Q$,c0e),e(c0e,qKr),e(Q$,jKr),e(Mr,DKr),e(Mr,Zt),M(H$,Zt,null),e(Zt,GKr),e(Zt,f0e),e(f0e,OKr),e(Zt,VKr),e(Zt,bf),e(bf,XKr),e(bf,m0e),e(m0e,zKr),e(bf,WKr),e(bf,tre),e(tre,QKr),e(bf,HKr),e(Zt,UKr),M(n0,Zt,null),e(Mr,JKr),e(Mr,Jr),M(U$,Jr,null),e(Jr,YKr),e(Jr,g0e),e(g0e,KKr),e(Jr,ZKr),e(Jr,yn),e(yn,eZr),e(yn,h0e),e(h0e,oZr),e(yn,rZr),e(yn,p0e),e(p0e,tZr),e(yn,aZr),e(yn,_0e),e(_0e,nZr),e(yn,sZr),e(Jr,lZr),e(Jr,Ve),e(Ve,s0),e(s0,u0e),e(u0e,iZr),e(s0,dZr),e(s0,are),e(are,cZr),e(s0,fZr),e(Ve,mZr),e(Ve,l0),e(l0,b0e),e(b0e,gZr),e(l0,hZr),e(l0,nre),e(nre,pZr),e(l0,_Zr),e(Ve,uZr),e(Ve,i0),e(i0,v0e),e(v0e,bZr),e(i0,vZr),e(i0,sre),e(sre,FZr),e(i0,TZr),e(Ve,MZr),e(Ve,d0),e(d0,F0e),e(F0e,EZr),e(d0,CZr),e(d0,lre),e(lre,wZr),e(d0,AZr),e(Ve,LZr),e(Ve,c0),e(c0,T0e),e(T0e,yZr),e(c0,xZr),e(c0,ire),e(ire,$Zr),e(c0,kZr),e(Ve,SZr),e(Ve,f0),e(f0,M0e),e(M0e,RZr),e(f0,PZr),e(f0,dre),e(dre,BZr),e(f0,IZr),e(Ve,NZr),e(Ve,m0),e(m0,E0e),e(E0e,qZr),e(m0,jZr),e(m0,cre),e(cre,DZr),e(m0,GZr),e(Ve,OZr),e(Ve,g0),e(g0,C0e),e(C0e,VZr),e(g0,XZr),e(g0,fre),e(fre,zZr),e(g0,WZr),e(Jr,QZr),M(h0,Jr,null),b(f,sWe,u),b(f,vf,u),e(vf,p0),e(p0,w0e),M(J$,w0e,null),e(vf,HZr),e(vf,A0e),e(A0e,UZr),b(f,lWe,u),b(f,Er,u),M(Y$,Er,null),e(Er,JZr),e(Er,Ff),e(Ff,YZr),e(Ff,mre),e(mre,KZr),e(Ff,ZZr),e(Ff,gre),e(gre,eet),e(Ff,oet),e(Er,ret),e(Er,K$),e(K$,tet),e(K$,L0e),e(L0e,aet),e(K$,net),e(Er,set),e(Er,ea),M(Z$,ea,null),e(ea,iet),e(ea,y0e),e(y0e,det),e(ea,cet),e(ea,Tf),e(Tf,fet),e(Tf,x0e),e(x0e,met),e(Tf,get),e(Tf,hre),e(hre,het),e(Tf,pet),e(ea,_et),M(_0,ea,null),e(Er,uet),e(Er,Yr),M(ek,Yr,null),e(Yr,bet),e(Yr,$0e),e($0e,vet),e(Yr,Fet),e(Yr,xn),e(xn,Tet),e(xn,k0e),e(k0e,Met),e(xn,Eet),e(xn,S0e),e(S0e,Cet),e(xn,wet),e(xn,R0e),e(R0e,Aet),e(xn,Let),e(Yr,yet),e(Yr,Xe),e(Xe,u0),e(u0,P0e),e(P0e,xet),e(u0,$et),e(u0,pre),e(pre,ket),e(u0,Set),e(Xe,Ret),e(Xe,b0),e(b0,B0e),e(B0e,Pet),e(b0,Bet),e(b0,_re),e(_re,Iet),e(b0,Net),e(Xe,qet),e(Xe,v0),e(v0,I0e),e(I0e,jet),e(v0,Det),e(v0,ure),e(ure,Get),e(v0,Oet),e(Xe,Vet),e(Xe,F0),e(F0,N0e),e(N0e,Xet),e(F0,zet),e(F0,bre),e(bre,Wet),e(F0,Qet),e(Xe,Het),e(Xe,T0),e(T0,q0e),e(q0e,Uet),e(T0,Jet),e(T0,vre),e(vre,Yet),e(T0,Ket),e(Xe,Zet),e(Xe,M0),e(M0,j0e),e(j0e,eot),e(M0,oot),e(M0,Fre),e(Fre,rot),e(M0,tot),e(Xe,aot),e(Xe,E0),e(E0,D0e),e(D0e,not),e(E0,sot),e(E0,Tre),e(Tre,lot),e(E0,iot),e(Xe,dot),e(Xe,C0),e(C0,G0e),e(G0e,cot),e(C0,fot),e(C0,Mre),e(Mre,mot),e(C0,got),e(Yr,hot),M(w0,Yr,null),b(f,iWe,u),b(f,Mf,u),e(Mf,A0),e(A0,O0e),M(ok,O0e,null),e(Mf,pot),e(Mf,V0e),e(V0e,_ot),b(f,dWe,u),b(f,Cr,u),M(rk,Cr,null),e(Cr,uot),e(Cr,Ef),e(Ef,bot),e(Ef,Ere),e(Ere,vot),e(Ef,Fot),e(Ef,Cre),e(Cre,Tot),e(Ef,Mot),e(Cr,Eot),e(Cr,tk),e(tk,Cot),e(tk,X0e),e(X0e,wot),e(tk,Aot),e(Cr,Lot),e(Cr,oa),M(ak,oa,null),e(oa,yot),e(oa,z0e),e(z0e,xot),e(oa,$ot),e(oa,Cf),e(Cf,kot),e(Cf,W0e),e(W0e,Sot),e(Cf,Rot),e(Cf,wre),e(wre,Pot),e(Cf,Bot),e(oa,Iot),M(L0,oa,null),e(Cr,Not),e(Cr,Kr),M(nk,Kr,null),e(Kr,qot),e(Kr,Q0e),e(Q0e,jot),e(Kr,Dot),e(Kr,$n),e($n,Got),e($n,H0e),e(H0e,Oot),e($n,Vot),e($n,U0e),e(U0e,Xot),e($n,zot),e($n,J0e),e(J0e,Wot),e($n,Qot),e(Kr,Hot),e(Kr,Y0e),e(Y0e,y0),e(y0,K0e),e(K0e,Uot),e(y0,Jot),e(y0,Are),e(Are,Yot),e(y0,Kot),e(Kr,Zot),M(x0,Kr,null),b(f,cWe,u),b(f,wf,u),e(wf,$0),e($0,Z0e),M(sk,Z0e,null),e(wf,ert),e(wf,ewe),e(ewe,ort),b(f,fWe,u),b(f,wr,u),M(lk,wr,null),e(wr,rrt),e(wr,Af),e(Af,trt),e(Af,Lre),e(Lre,art),e(Af,nrt),e(Af,yre),e(yre,srt),e(Af,lrt),e(wr,irt),e(wr,ik),e(ik,drt),e(ik,owe),e(owe,crt),e(ik,frt),e(wr,mrt),e(wr,ra),M(dk,ra,null),e(ra,grt),e(ra,rwe),e(rwe,hrt),e(ra,prt),e(ra,Lf),e(Lf,_rt),e(Lf,twe),e(twe,urt),e(Lf,brt),e(Lf,xre),e(xre,vrt),e(Lf,Frt),e(ra,Trt),M(k0,ra,null),e(wr,Mrt),e(wr,Zr),M(ck,Zr,null),e(Zr,Ert),e(Zr,awe),e(awe,Crt),e(Zr,wrt),e(Zr,kn),e(kn,Art),e(kn,nwe),e(nwe,Lrt),e(kn,yrt),e(kn,swe),e(swe,xrt),e(kn,$rt),e(kn,lwe),e(lwe,krt),e(kn,Srt),e(Zr,Rrt),e(Zr,fk),e(fk,S0),e(S0,iwe),e(iwe,Prt),e(S0,Brt),e(S0,$re),e($re,Irt),e(S0,Nrt),e(fk,qrt),e(fk,R0),e(R0,dwe),e(dwe,jrt),e(R0,Drt),e(R0,kre),e(kre,Grt),e(R0,Ort),e(Zr,Vrt),M(P0,Zr,null),b(f,mWe,u),b(f,yf,u),e(yf,B0),e(B0,cwe),M(mk,cwe,null),e(yf,Xrt),e(yf,fwe),e(fwe,zrt),b(f,gWe,u),b(f,Ar,u),M(gk,Ar,null),e(Ar,Wrt),e(Ar,xf),e(xf,Qrt),e(xf,Sre),e(Sre,Hrt),e(xf,Urt),e(xf,Rre),e(Rre,Jrt),e(xf,Yrt),e(Ar,Krt),e(Ar,hk),e(hk,Zrt),e(hk,mwe),e(mwe,ett),e(hk,ott),e(Ar,rtt),e(Ar,ta),M(pk,ta,null),e(ta,ttt),e(ta,gwe),e(gwe,att),e(ta,ntt),e(ta,$f),e($f,stt),e($f,hwe),e(hwe,ltt),e($f,itt),e($f,Pre),e(Pre,dtt),e($f,ctt),e(ta,ftt),M(I0,ta,null),e(Ar,mtt),e(Ar,et),M(_k,et,null),e(et,gtt),e(et,pwe),e(pwe,htt),e(et,ptt),e(et,Sn),e(Sn,_tt),e(Sn,_we),e(_we,utt),e(Sn,btt),e(Sn,uwe),e(uwe,vtt),e(Sn,Ftt),e(Sn,bwe),e(bwe,Ttt),e(Sn,Mtt),e(et,Ett),e(et,vwe),e(vwe,N0),e(N0,Fwe),e(Fwe,Ctt),e(N0,wtt),e(N0,Bre),e(Bre,Att),e(N0,Ltt),e(et,ytt),M(q0,et,null),hWe=!0},p(f,[u]){const uk={};u&2&&(uk.$$scope={dirty:u,ctx:f}),jf.$set(uk);const Twe={};u&2&&(Twe.$$scope={dirty:u,ctx:f}),Kg.$set(Twe);const Mwe={};u&2&&(Mwe.$$scope={dirty:u,ctx:f}),Ph.$set(Mwe);const Ewe={};u&2&&(Ewe.$$scope={dirty:u,ctx:f}),bp.$set(Ewe);const bk={};u&2&&(bk.$$scope={dirty:u,ctx:f}),vp.$set(bk);const Cwe={};u&2&&(Cwe.$$scope={dirty:u,ctx:f}),Gp.$set(Cwe);const Rn={};u&2&&(Rn.$$scope={dirty:u,ctx:f}),Op.$set(Rn);const wwe={};u&2&&(wwe.$$scope={dirty:u,ctx:f}),zp.$set(wwe);const Awe={};u&2&&(Awe.$$scope={dirty:u,ctx:f}),Ju.$set(Awe);const Lwe={};u&2&&(Lwe.$$scope={dirty:u,ctx:f}),Ku.$set(Lwe);const vk={};u&2&&(vk.$$scope={dirty:u,ctx:f}),z1.$set(vk);const ywe={};u&2&&(ywe.$$scope={dirty:u,ctx:f}),Q1.$set(ywe);const Fk={};u&2&&(Fk.$$scope={dirty:u,ctx:f}),B2.$set(Fk);const xwe={};u&2&&(xwe.$$scope={dirty:u,ctx:f}),N2.$set(xwe);const Tk={};u&2&&(Tk.$$scope={dirty:u,ctx:f}),Eb.$set(Tk);const $we={};u&2&&($we.$$scope={dirty:u,ctx:f}),wb.$set($we);const kwe={};u&2&&(kwe.$$scope={dirty:u,ctx:f}),zb.$set(kwe);const Swe={};u&2&&(Swe.$$scope={dirty:u,ctx:f}),Qb.$set(Swe);const kf={};u&2&&(kf.$$scope={dirty:u,ctx:f}),zv.$set(kf);const Rwe={};u&2&&(Rwe.$$scope={dirty:u,ctx:f}),Qv.$set(Rwe);const Pwe={};u&2&&(Pwe.$$scope={dirty:u,ctx:f}),w3.$set(Pwe);const Bwe={};u&2&&(Bwe.$$scope={dirty:u,ctx:f}),L3.$set(Bwe);const Mk={};u&2&&(Mk.$$scope={dirty:u,ctx:f}),B3.$set(Mk);const Iwe={};u&2&&(Iwe.$$scope={dirty:u,ctx:f}),N3.$set(Iwe);const Nwe={};u&2&&(Nwe.$$scope={dirty:u,ctx:f}),TF.$set(Nwe);const qwe={};u&2&&(qwe.$$scope={dirty:u,ctx:f}),EF.$set(qwe);const at={};u&2&&(at.$$scope={dirty:u,ctx:f}),gT.$set(at);const Ek={};u&2&&(Ek.$$scope={dirty:u,ctx:f}),pT.$set(Ek);const jwe={};u&2&&(jwe.$$scope={dirty:u,ctx:f}),bT.$set(jwe);const Ck={};u&2&&(Ck.$$scope={dirty:u,ctx:f}),FT.$set(Ck);const Dwe={};u&2&&(Dwe.$$scope={dirty:u,ctx:f}),BT.$set(Dwe);const nt={};u&2&&(nt.$$scope={dirty:u,ctx:f}),NT.$set(nt);const Gwe={};u&2&&(Gwe.$$scope={dirty:u,ctx:f}),DT.$set(Gwe);const Sf={};u&2&&(Sf.$$scope={dirty:u,ctx:f}),OT.$set(Sf);const Owe={};u&2&&(Owe.$$scope={dirty:u,ctx:f}),zT.$set(Owe);const Vwe={};u&2&&(Vwe.$$scope={dirty:u,ctx:f}),QT.$set(Vwe);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),a7.$set(L);const j0={};u&2&&(j0.$$scope={dirty:u,ctx:f}),s7.$set(j0);const Xwe={};u&2&&(Xwe.$$scope={dirty:u,ctx:f}),g7.$set(Xwe);const zwe={};u&2&&(zwe.$$scope={dirty:u,ctx:f}),p7.$set(zwe);const D0={};u&2&&(D0.$$scope={dirty:u,ctx:f}),L7.$set(D0);const Wwe={};u&2&&(Wwe.$$scope={dirty:u,ctx:f}),x7.$set(Wwe);const Qwe={};u&2&&(Qwe.$$scope={dirty:u,ctx:f}),R7.$set(Qwe);const G0={};u&2&&(G0.$$scope={dirty:u,ctx:f}),B7.$set(G0);const Hwe={};u&2&&(Hwe.$$scope={dirty:u,ctx:f}),O7.$set(Hwe);const Uwe={};u&2&&(Uwe.$$scope={dirty:u,ctx:f}),X7.$set(Uwe);const O0={};u&2&&(O0.$$scope={dirty:u,ctx:f}),U7.$set(O0);const Jwe={};u&2&&(Jwe.$$scope={dirty:u,ctx:f}),Y7.$set(Jwe);const Ywe={};u&2&&(Ywe.$$scope={dirty:u,ctx:f}),o8.$set(Ywe);const V0={};u&2&&(V0.$$scope={dirty:u,ctx:f}),t8.$set(V0);const Kwe={};u&2&&(Kwe.$$scope={dirty:u,ctx:f}),s8.$set(Kwe);const Zwe={};u&2&&(Zwe.$$scope={dirty:u,ctx:f}),i8.$set(Zwe);const X0={};u&2&&(X0.$$scope={dirty:u,ctx:f}),p8.$set(X0);const eAe={};u&2&&(eAe.$$scope={dirty:u,ctx:f}),u8.$set(eAe);const oAe={};u&2&&(oAe.$$scope={dirty:u,ctx:f}),F8.$set(oAe);const z0={};u&2&&(z0.$$scope={dirty:u,ctx:f}),M8.$set(z0);const rAe={};u&2&&(rAe.$$scope={dirty:u,ctx:f}),u9.$set(rAe);const tAe={};u&2&&(tAe.$$scope={dirty:u,ctx:f}),v9.$set(tAe);const W0={};u&2&&(W0.$$scope={dirty:u,ctx:f}),V9.$set(W0);const aAe={};u&2&&(aAe.$$scope={dirty:u,ctx:f}),z9.$set(aAe);const nAe={};u&2&&(nAe.$$scope={dirty:u,ctx:f}),nM.$set(nAe);const Q0={};u&2&&(Q0.$$scope={dirty:u,ctx:f}),lM.$set(Q0);const sAe={};u&2&&(sAe.$$scope={dirty:u,ctx:f}),hM.$set(sAe);const lAe={};u&2&&(lAe.$$scope={dirty:u,ctx:f}),_M.$set(lAe);const H0={};u&2&&(H0.$$scope={dirty:u,ctx:f}),NM.$set(H0);const iAe={};u&2&&(iAe.$$scope={dirty:u,ctx:f}),jM.$set(iAe);const dAe={};u&2&&(dAe.$$scope={dirty:u,ctx:f}),JM.$set(dAe);const U0={};u&2&&(U0.$$scope={dirty:u,ctx:f}),KM.$set(U0);const cAe={};u&2&&(cAe.$$scope={dirty:u,ctx:f}),w4.$set(cAe);const fAe={};u&2&&(fAe.$$scope={dirty:u,ctx:f}),L4.$set(fAe);const J0={};u&2&&(J0.$$scope={dirty:u,ctx:f}),z4.$set(J0);const mAe={};u&2&&(mAe.$$scope={dirty:u,ctx:f}),Q4.$set(mAe);const gAe={};u&2&&(gAe.$$scope={dirty:u,ctx:f}),J4.$set(gAe);const Y0={};u&2&&(Y0.$$scope={dirty:u,ctx:f}),K4.$set(Y0);const hAe={};u&2&&(hAe.$$scope={dirty:u,ctx:f}),eE.$set(hAe);const pAe={};u&2&&(pAe.$$scope={dirty:u,ctx:f}),rE.$set(pAe);const K0={};u&2&&(K0.$$scope={dirty:u,ctx:f}),EE.$set(K0);const _Ae={};u&2&&(_Ae.$$scope={dirty:u,ctx:f}),wE.$set(_Ae);const uAe={};u&2&&(uAe.$$scope={dirty:u,ctx:f}),WE.$set(uAe);const Z0={};u&2&&(Z0.$$scope={dirty:u,ctx:f}),HE.$set(Z0);const bAe={};u&2&&(bAe.$$scope={dirty:u,ctx:f}),JE.$set(bAe);const vAe={};u&2&&(vAe.$$scope={dirty:u,ctx:f}),KE.$set(vAe);const ew={};u&2&&(ew.$$scope={dirty:u,ctx:f}),eC.$set(ew);const FAe={};u&2&&(FAe.$$scope={dirty:u,ctx:f}),rC.$set(FAe);const TAe={};u&2&&(TAe.$$scope={dirty:u,ctx:f}),$C.$set(TAe);const ow={};u&2&&(ow.$$scope={dirty:u,ctx:f}),SC.$set(ow);const MAe={};u&2&&(MAe.$$scope={dirty:u,ctx:f}),VC.$set(MAe);const EAe={};u&2&&(EAe.$$scope={dirty:u,ctx:f}),zC.$set(EAe);const rw={};u&2&&(rw.$$scope={dirty:u,ctx:f}),n5.$set(rw);const CAe={};u&2&&(CAe.$$scope={dirty:u,ctx:f}),l5.$set(CAe);const wAe={};u&2&&(wAe.$$scope={dirty:u,ctx:f}),b5.$set(wAe);const tw={};u&2&&(tw.$$scope={dirty:u,ctx:f}),F5.$set(tw);const AAe={};u&2&&(AAe.$$scope={dirty:u,ctx:f}),k5.$set(AAe);const LAe={};u&2&&(LAe.$$scope={dirty:u,ctx:f}),R5.$set(LAe);const aw={};u&2&&(aw.$$scope={dirty:u,ctx:f}),X5.$set(aw);const yAe={};u&2&&(yAe.$$scope={dirty:u,ctx:f}),W5.$set(yAe);const xAe={};u&2&&(xAe.$$scope={dirty:u,ctx:f}),t0.$set(xAe);const nw={};u&2&&(nw.$$scope={dirty:u,ctx:f}),n0.$set(nw);const $Ae={};u&2&&($Ae.$$scope={dirty:u,ctx:f}),h0.$set($Ae);const kAe={};u&2&&(kAe.$$scope={dirty:u,ctx:f}),_0.$set(kAe);const sw={};u&2&&(sw.$$scope={dirty:u,ctx:f}),w0.$set(sw);const SAe={};u&2&&(SAe.$$scope={dirty:u,ctx:f}),L0.$set(SAe);const RAe={};u&2&&(RAe.$$scope={dirty:u,ctx:f}),x0.$set(RAe);const lw={};u&2&&(lw.$$scope={dirty:u,ctx:f}),k0.$set(lw);const PAe={};u&2&&(PAe.$$scope={dirty:u,ctx:f}),P0.$set(PAe);const BAe={};u&2&&(BAe.$$scope={dirty:u,ctx:f}),I0.$set(BAe);const iw={};u&2&&(iw.$$scope={dirty:u,ctx:f}),q0.$set(iw)},i(f){hWe||(E(d.$$.fragment,f),E(Sa.$$.fragment,f),E(l6.$$.fragment,f),E(i6.$$.fragment,f),E(jf.$$.fragment,f),E(d6.$$.fragment,f),E(c6.$$.fragment,f),E(g6.$$.fragment,f),E(Kg.$$.fragment,f),E(h6.$$.fragment,f),E(p6.$$.fragment,f),E(_6.$$.fragment,f),E(v6.$$.fragment,f),E(Ph.$$.fragment,f),E(F6.$$.fragment,f),E(T6.$$.fragment,f),E(M6.$$.fragment,f),E(w6.$$.fragment,f),E(bp.$$.fragment,f),E(vp.$$.fragment,f),E(A6.$$.fragment,f),E(L6.$$.fragment,f),E(y6.$$.fragment,f),E(k6.$$.fragment,f),E(Gp.$$.fragment,f),E(Op.$$.fragment,f),E(S6.$$.fragment,f),E(R6.$$.fragment,f),E(P6.$$.fragment,f),E(I6.$$.fragment,f),E(zp.$$.fragment,f),E(N6.$$.fragment,f),E(Ju.$$.fragment,f),E(q6.$$.fragment,f),E(j6.$$.fragment,f),E(G6.$$.fragment,f),E(Ku.$$.fragment,f),E(O6.$$.fragment,f),E(z1.$$.fragment,f),E(V6.$$.fragment,f),E(X6.$$.fragment,f),E(W6.$$.fragment,f),E(Q1.$$.fragment,f),E(Q6.$$.fragment,f),E(B2.$$.fragment,f),E(H6.$$.fragment,f),E(U6.$$.fragment,f),E(Y6.$$.fragment,f),E(N2.$$.fragment,f),E(K6.$$.fragment,f),E(Eb.$$.fragment,f),E(Z6.$$.fragment,f),E(eL.$$.fragment,f),E(rL.$$.fragment,f),E(wb.$$.fragment,f),E(tL.$$.fragment,f),E(zb.$$.fragment,f),E(aL.$$.fragment,f),E(nL.$$.fragment,f),E(lL.$$.fragment,f),E(Qb.$$.fragment,f),E(iL.$$.fragment,f),E(zv.$$.fragment,f),E(dL.$$.fragment,f),E(cL.$$.fragment,f),E(mL.$$.fragment,f),E(Qv.$$.fragment,f),E(gL.$$.fragment,f),E(w3.$$.fragment,f),E(hL.$$.fragment,f),E(pL.$$.fragment,f),E(uL.$$.fragment,f),E(L3.$$.fragment,f),E(bL.$$.fragment,f),E(B3.$$.fragment,f),E(vL.$$.fragment,f),E(FL.$$.fragment,f),E(ML.$$.fragment,f),E(N3.$$.fragment,f),E(EL.$$.fragment,f),E(TF.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(LL.$$.fragment,f),E(EF.$$.fragment,f),E(yL.$$.fragment,f),E(gT.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(SL.$$.fragment,f),E(pT.$$.fragment,f),E(RL.$$.fragment,f),E(bT.$$.fragment,f),E(PL.$$.fragment,f),E(BL.$$.fragment,f),E(NL.$$.fragment,f),E(FT.$$.fragment,f),E(qL.$$.fragment,f),E(BT.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(OL.$$.fragment,f),E(NT.$$.fragment,f),E(VL.$$.fragment,f),E(DT.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(QL.$$.fragment,f),E(OT.$$.fragment,f),E(HL.$$.fragment,f),E(zT.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(QT.$$.fragment,f),E(ZL.$$.fragment,f),E(a7.$$.fragment,f),E(ey.$$.fragment,f),E(oy.$$.fragment,f),E(ty.$$.fragment,f),E(s7.$$.fragment,f),E(ay.$$.fragment,f),E(g7.$$.fragment,f),E(ny.$$.fragment,f),E(sy.$$.fragment,f),E(iy.$$.fragment,f),E(p7.$$.fragment,f),E(dy.$$.fragment,f),E(L7.$$.fragment,f),E(cy.$$.fragment,f),E(fy.$$.fragment,f),E(gy.$$.fragment,f),E(x7.$$.fragment,f),E(hy.$$.fragment,f),E(R7.$$.fragment,f),E(_y.$$.fragment,f),E(uy.$$.fragment,f),E(vy.$$.fragment,f),E(B7.$$.fragment,f),E(Fy.$$.fragment,f),E(O7.$$.fragment,f),E(Ty.$$.fragment,f),E(My.$$.fragment,f),E(Cy.$$.fragment,f),E(X7.$$.fragment,f),E(wy.$$.fragment,f),E(U7.$$.fragment,f),E(Ay.$$.fragment,f),E(Ly.$$.fragment,f),E(xy.$$.fragment,f),E(Y7.$$.fragment,f),E($y.$$.fragment,f),E(o8.$$.fragment,f),E(Sy.$$.fragment,f),E(Ry.$$.fragment,f),E(By.$$.fragment,f),E(t8.$$.fragment,f),E(Iy.$$.fragment,f),E(s8.$$.fragment,f),E(Ny.$$.fragment,f),E(qy.$$.fragment,f),E(Dy.$$.fragment,f),E(i8.$$.fragment,f),E(Gy.$$.fragment,f),E(p8.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(zy.$$.fragment,f),E(u8.$$.fragment,f),E(Wy.$$.fragment,f),E(F8.$$.fragment,f),E(Qy.$$.fragment,f),E(Hy.$$.fragment,f),E(Jy.$$.fragment,f),E(M8.$$.fragment,f),E(Yy.$$.fragment,f),E(u9.$$.fragment,f),E(Ky.$$.fragment,f),E(Zy.$$.fragment,f),E(ox.$$.fragment,f),E(v9.$$.fragment,f),E(rx.$$.fragment,f),E(V9.$$.fragment,f),E(tx.$$.fragment,f),E(ax.$$.fragment,f),E(sx.$$.fragment,f),E(z9.$$.fragment,f),E(lx.$$.fragment,f),E(nM.$$.fragment,f),E(ix.$$.fragment,f),E(dx.$$.fragment,f),E(fx.$$.fragment,f),E(lM.$$.fragment,f),E(mx.$$.fragment,f),E(hM.$$.fragment,f),E(gx.$$.fragment,f),E(hx.$$.fragment,f),E(_x.$$.fragment,f),E(_M.$$.fragment,f),E(ux.$$.fragment,f),E(NM.$$.fragment,f),E(bx.$$.fragment,f),E(vx.$$.fragment,f),E(Tx.$$.fragment,f),E(jM.$$.fragment,f),E(Mx.$$.fragment,f),E(JM.$$.fragment,f),E(Ex.$$.fragment,f),E(Cx.$$.fragment,f),E(Ax.$$.fragment,f),E(KM.$$.fragment,f),E(Lx.$$.fragment,f),E(w4.$$.fragment,f),E(yx.$$.fragment,f),E(xx.$$.fragment,f),E(kx.$$.fragment,f),E(L4.$$.fragment,f),E(Sx.$$.fragment,f),E(z4.$$.fragment,f),E(Rx.$$.fragment,f),E(Px.$$.fragment,f),E(Ix.$$.fragment,f),E(Q4.$$.fragment,f),E(Nx.$$.fragment,f),E(J4.$$.fragment,f),E(jx.$$.fragment,f),E(Dx.$$.fragment,f),E(Ox.$$.fragment,f),E(K4.$$.fragment,f),E(Vx.$$.fragment,f),E(eE.$$.fragment,f),E(Xx.$$.fragment,f),E(zx.$$.fragment,f),E(Qx.$$.fragment,f),E(rE.$$.fragment,f),E(Hx.$$.fragment,f),E(EE.$$.fragment,f),E(Ux.$$.fragment,f),E(Jx.$$.fragment,f),E(Kx.$$.fragment,f),E(wE.$$.fragment,f),E(Zx.$$.fragment,f),E(WE.$$.fragment,f),E(e$.$$.fragment,f),E(o$.$$.fragment,f),E(t$.$$.fragment,f),E(HE.$$.fragment,f),E(a$.$$.fragment,f),E(JE.$$.fragment,f),E(n$.$$.fragment,f),E(s$.$$.fragment,f),E(i$.$$.fragment,f),E(KE.$$.fragment,f),E(d$.$$.fragment,f),E(eC.$$.fragment,f),E(c$.$$.fragment,f),E(f$.$$.fragment,f),E(g$.$$.fragment,f),E(rC.$$.fragment,f),E(h$.$$.fragment,f),E($C.$$.fragment,f),E(p$.$$.fragment,f),E(_$.$$.fragment,f),E(b$.$$.fragment,f),E(SC.$$.fragment,f),E(v$.$$.fragment,f),E(VC.$$.fragment,f),E(F$.$$.fragment,f),E(T$.$$.fragment,f),E(E$.$$.fragment,f),E(zC.$$.fragment,f),E(C$.$$.fragment,f),E(n5.$$.fragment,f),E(w$.$$.fragment,f),E(A$.$$.fragment,f),E(y$.$$.fragment,f),E(l5.$$.fragment,f),E(x$.$$.fragment,f),E(b5.$$.fragment,f),E($$.$$.fragment,f),E(k$.$$.fragment,f),E(R$.$$.fragment,f),E(F5.$$.fragment,f),E(P$.$$.fragment,f),E(k5.$$.fragment,f),E(B$.$$.fragment,f),E(I$.$$.fragment,f),E(q$.$$.fragment,f),E(R5.$$.fragment,f),E(j$.$$.fragment,f),E(X5.$$.fragment,f),E(D$.$$.fragment,f),E(G$.$$.fragment,f),E(V$.$$.fragment,f),E(W5.$$.fragment,f),E(X$.$$.fragment,f),E(t0.$$.fragment,f),E(z$.$$.fragment,f),E(W$.$$.fragment,f),E(H$.$$.fragment,f),E(n0.$$.fragment,f),E(U$.$$.fragment,f),E(h0.$$.fragment,f),E(J$.$$.fragment,f),E(Y$.$$.fragment,f),E(Z$.$$.fragment,f),E(_0.$$.fragment,f),E(ek.$$.fragment,f),E(w0.$$.fragment,f),E(ok.$$.fragment,f),E(rk.$$.fragment,f),E(ak.$$.fragment,f),E(L0.$$.fragment,f),E(nk.$$.fragment,f),E(x0.$$.fragment,f),E(sk.$$.fragment,f),E(lk.$$.fragment,f),E(dk.$$.fragment,f),E(k0.$$.fragment,f),E(ck.$$.fragment,f),E(P0.$$.fragment,f),E(mk.$$.fragment,f),E(gk.$$.fragment,f),E(pk.$$.fragment,f),E(I0.$$.fragment,f),E(_k.$$.fragment,f),E(q0.$$.fragment,f),hWe=!0)},o(f){C(d.$$.fragment,f),C(Sa.$$.fragment,f),C(l6.$$.fragment,f),C(i6.$$.fragment,f),C(jf.$$.fragment,f),C(d6.$$.fragment,f),C(c6.$$.fragment,f),C(g6.$$.fragment,f),C(Kg.$$.fragment,f),C(h6.$$.fragment,f),C(p6.$$.fragment,f),C(_6.$$.fragment,f),C(v6.$$.fragment,f),C(Ph.$$.fragment,f),C(F6.$$.fragment,f),C(T6.$$.fragment,f),C(M6.$$.fragment,f),C(w6.$$.fragment,f),C(bp.$$.fragment,f),C(vp.$$.fragment,f),C(A6.$$.fragment,f),C(L6.$$.fragment,f),C(y6.$$.fragment,f),C(k6.$$.fragment,f),C(Gp.$$.fragment,f),C(Op.$$.fragment,f),C(S6.$$.fragment,f),C(R6.$$.fragment,f),C(P6.$$.fragment,f),C(I6.$$.fragment,f),C(zp.$$.fragment,f),C(N6.$$.fragment,f),C(Ju.$$.fragment,f),C(q6.$$.fragment,f),C(j6.$$.fragment,f),C(G6.$$.fragment,f),C(Ku.$$.fragment,f),C(O6.$$.fragment,f),C(z1.$$.fragment,f),C(V6.$$.fragment,f),C(X6.$$.fragment,f),C(W6.$$.fragment,f),C(Q1.$$.fragment,f),C(Q6.$$.fragment,f),C(B2.$$.fragment,f),C(H6.$$.fragment,f),C(U6.$$.fragment,f),C(Y6.$$.fragment,f),C(N2.$$.fragment,f),C(K6.$$.fragment,f),C(Eb.$$.fragment,f),C(Z6.$$.fragment,f),C(eL.$$.fragment,f),C(rL.$$.fragment,f),C(wb.$$.fragment,f),C(tL.$$.fragment,f),C(zb.$$.fragment,f),C(aL.$$.fragment,f),C(nL.$$.fragment,f),C(lL.$$.fragment,f),C(Qb.$$.fragment,f),C(iL.$$.fragment,f),C(zv.$$.fragment,f),C(dL.$$.fragment,f),C(cL.$$.fragment,f),C(mL.$$.fragment,f),C(Qv.$$.fragment,f),C(gL.$$.fragment,f),C(w3.$$.fragment,f),C(hL.$$.fragment,f),C(pL.$$.fragment,f),C(uL.$$.fragment,f),C(L3.$$.fragment,f),C(bL.$$.fragment,f),C(B3.$$.fragment,f),C(vL.$$.fragment,f),C(FL.$$.fragment,f),C(ML.$$.fragment,f),C(N3.$$.fragment,f),C(EL.$$.fragment,f),C(TF.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(LL.$$.fragment,f),C(EF.$$.fragment,f),C(yL.$$.fragment,f),C(gT.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(SL.$$.fragment,f),C(pT.$$.fragment,f),C(RL.$$.fragment,f),C(bT.$$.fragment,f),C(PL.$$.fragment,f),C(BL.$$.fragment,f),C(NL.$$.fragment,f),C(FT.$$.fragment,f),C(qL.$$.fragment,f),C(BT.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(OL.$$.fragment,f),C(NT.$$.fragment,f),C(VL.$$.fragment,f),C(DT.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(QL.$$.fragment,f),C(OT.$$.fragment,f),C(HL.$$.fragment,f),C(zT.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(QT.$$.fragment,f),C(ZL.$$.fragment,f),C(a7.$$.fragment,f),C(ey.$$.fragment,f),C(oy.$$.fragment,f),C(ty.$$.fragment,f),C(s7.$$.fragment,f),C(ay.$$.fragment,f),C(g7.$$.fragment,f),C(ny.$$.fragment,f),C(sy.$$.fragment,f),C(iy.$$.fragment,f),C(p7.$$.fragment,f),C(dy.$$.fragment,f),C(L7.$$.fragment,f),C(cy.$$.fragment,f),C(fy.$$.fragment,f),C(gy.$$.fragment,f),C(x7.$$.fragment,f),C(hy.$$.fragment,f),C(R7.$$.fragment,f),C(_y.$$.fragment,f),C(uy.$$.fragment,f),C(vy.$$.fragment,f),C(B7.$$.fragment,f),C(Fy.$$.fragment,f),C(O7.$$.fragment,f),C(Ty.$$.fragment,f),C(My.$$.fragment,f),C(Cy.$$.fragment,f),C(X7.$$.fragment,f),C(wy.$$.fragment,f),C(U7.$$.fragment,f),C(Ay.$$.fragment,f),C(Ly.$$.fragment,f),C(xy.$$.fragment,f),C(Y7.$$.fragment,f),C($y.$$.fragment,f),C(o8.$$.fragment,f),C(Sy.$$.fragment,f),C(Ry.$$.fragment,f),C(By.$$.fragment,f),C(t8.$$.fragment,f),C(Iy.$$.fragment,f),C(s8.$$.fragment,f),C(Ny.$$.fragment,f),C(qy.$$.fragment,f),C(Dy.$$.fragment,f),C(i8.$$.fragment,f),C(Gy.$$.fragment,f),C(p8.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(zy.$$.fragment,f),C(u8.$$.fragment,f),C(Wy.$$.fragment,f),C(F8.$$.fragment,f),C(Qy.$$.fragment,f),C(Hy.$$.fragment,f),C(Jy.$$.fragment,f),C(M8.$$.fragment,f),C(Yy.$$.fragment,f),C(u9.$$.fragment,f),C(Ky.$$.fragment,f),C(Zy.$$.fragment,f),C(ox.$$.fragment,f),C(v9.$$.fragment,f),C(rx.$$.fragment,f),C(V9.$$.fragment,f),C(tx.$$.fragment,f),C(ax.$$.fragment,f),C(sx.$$.fragment,f),C(z9.$$.fragment,f),C(lx.$$.fragment,f),C(nM.$$.fragment,f),C(ix.$$.fragment,f),C(dx.$$.fragment,f),C(fx.$$.fragment,f),C(lM.$$.fragment,f),C(mx.$$.fragment,f),C(hM.$$.fragment,f),C(gx.$$.fragment,f),C(hx.$$.fragment,f),C(_x.$$.fragment,f),C(_M.$$.fragment,f),C(ux.$$.fragment,f),C(NM.$$.fragment,f),C(bx.$$.fragment,f),C(vx.$$.fragment,f),C(Tx.$$.fragment,f),C(jM.$$.fragment,f),C(Mx.$$.fragment,f),C(JM.$$.fragment,f),C(Ex.$$.fragment,f),C(Cx.$$.fragment,f),C(Ax.$$.fragment,f),C(KM.$$.fragment,f),C(Lx.$$.fragment,f),C(w4.$$.fragment,f),C(yx.$$.fragment,f),C(xx.$$.fragment,f),C(kx.$$.fragment,f),C(L4.$$.fragment,f),C(Sx.$$.fragment,f),C(z4.$$.fragment,f),C(Rx.$$.fragment,f),C(Px.$$.fragment,f),C(Ix.$$.fragment,f),C(Q4.$$.fragment,f),C(Nx.$$.fragment,f),C(J4.$$.fragment,f),C(jx.$$.fragment,f),C(Dx.$$.fragment,f),C(Ox.$$.fragment,f),C(K4.$$.fragment,f),C(Vx.$$.fragment,f),C(eE.$$.fragment,f),C(Xx.$$.fragment,f),C(zx.$$.fragment,f),C(Qx.$$.fragment,f),C(rE.$$.fragment,f),C(Hx.$$.fragment,f),C(EE.$$.fragment,f),C(Ux.$$.fragment,f),C(Jx.$$.fragment,f),C(Kx.$$.fragment,f),C(wE.$$.fragment,f),C(Zx.$$.fragment,f),C(WE.$$.fragment,f),C(e$.$$.fragment,f),C(o$.$$.fragment,f),C(t$.$$.fragment,f),C(HE.$$.fragment,f),C(a$.$$.fragment,f),C(JE.$$.fragment,f),C(n$.$$.fragment,f),C(s$.$$.fragment,f),C(i$.$$.fragment,f),C(KE.$$.fragment,f),C(d$.$$.fragment,f),C(eC.$$.fragment,f),C(c$.$$.fragment,f),C(f$.$$.fragment,f),C(g$.$$.fragment,f),C(rC.$$.fragment,f),C(h$.$$.fragment,f),C($C.$$.fragment,f),C(p$.$$.fragment,f),C(_$.$$.fragment,f),C(b$.$$.fragment,f),C(SC.$$.fragment,f),C(v$.$$.fragment,f),C(VC.$$.fragment,f),C(F$.$$.fragment,f),C(T$.$$.fragment,f),C(E$.$$.fragment,f),C(zC.$$.fragment,f),C(C$.$$.fragment,f),C(n5.$$.fragment,f),C(w$.$$.fragment,f),C(A$.$$.fragment,f),C(y$.$$.fragment,f),C(l5.$$.fragment,f),C(x$.$$.fragment,f),C(b5.$$.fragment,f),C($$.$$.fragment,f),C(k$.$$.fragment,f),C(R$.$$.fragment,f),C(F5.$$.fragment,f),C(P$.$$.fragment,f),C(k5.$$.fragment,f),C(B$.$$.fragment,f),C(I$.$$.fragment,f),C(q$.$$.fragment,f),C(R5.$$.fragment,f),C(j$.$$.fragment,f),C(X5.$$.fragment,f),C(D$.$$.fragment,f),C(G$.$$.fragment,f),C(V$.$$.fragment,f),C(W5.$$.fragment,f),C(X$.$$.fragment,f),C(t0.$$.fragment,f),C(z$.$$.fragment,f),C(W$.$$.fragment,f),C(H$.$$.fragment,f),C(n0.$$.fragment,f),C(U$.$$.fragment,f),C(h0.$$.fragment,f),C(J$.$$.fragment,f),C(Y$.$$.fragment,f),C(Z$.$$.fragment,f),C(_0.$$.fragment,f),C(ek.$$.fragment,f),C(w0.$$.fragment,f),C(ok.$$.fragment,f),C(rk.$$.fragment,f),C(ak.$$.fragment,f),C(L0.$$.fragment,f),C(nk.$$.fragment,f),C(x0.$$.fragment,f),C(sk.$$.fragment,f),C(lk.$$.fragment,f),C(dk.$$.fragment,f),C(k0.$$.fragment,f),C(ck.$$.fragment,f),C(P0.$$.fragment,f),C(mk.$$.fragment,f),C(gk.$$.fragment,f),C(pk.$$.fragment,f),C(I0.$$.fragment,f),C(_k.$$.fragment,f),C(q0.$$.fragment,f),hWe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(Pf),f&&t(st),f&&t(Oe),f&&t(We),f&&t(If),w(Sa,f),f&&t(Qe),f&&t(Ae),f&&t(Co),f&&t(Ra),f&&t(dXe),f&&t(Pi),w(l6),f&&t(cXe),f&&t(qn),f&&t(fXe),w(i6,f),f&&t(mXe),f&&t(VS),f&&t(gXe),w(jf,f),f&&t(hXe),f&&t(Bi),w(d6),f&&t(pXe),f&&t(wo),w(c6),w(g6),w(Kg),w(h6),f&&t(_Xe),f&&t(Ni),w(p6),f&&t(uXe),f&&t(Ao),w(_6),w(v6),w(Ph),w(F6),f&&t(bXe),f&&t(qi),w(T6),f&&t(vXe),f&&t(Lo),w(M6),w(w6),w(bp),w(vp),w(A6),f&&t(FXe),f&&t(ji),w(L6),f&&t(TXe),f&&t(yo),w(y6),w(k6),w(Gp),w(Op),w(S6),f&&t(MXe),f&&t(Gi),w(R6),f&&t(EXe),f&&t(xo),w(P6),w(I6),w(zp),w(N6),w(Ju),f&&t(CXe),f&&t(Xi),w(q6),f&&t(wXe),f&&t($o),w(j6),w(G6),w(Ku),w(O6),w(z1),f&&t(AXe),f&&t(Qi),w(V6),f&&t(LXe),f&&t(ko),w(X6),w(W6),w(Q1),w(Q6),w(B2),f&&t(yXe),f&&t(Ji),w(H6),f&&t(xXe),f&&t(So),w(U6),w(Y6),w(N2),w(K6),w(Eb),f&&t($Xe),f&&t(Zi),w(Z6),f&&t(kXe),f&&t(Ro),w(eL),w(rL),w(wb),w(tL),w(zb),f&&t(SXe),f&&t(rd),w(aL),f&&t(RXe),f&&t(Po),w(nL),w(lL),w(Qb),w(iL),w(zv),f&&t(PXe),f&&t(nd),w(dL),f&&t(BXe),f&&t(Bo),w(cL),w(mL),w(Qv),w(gL),w(w3),f&&t(IXe),f&&t(id),w(hL),f&&t(NXe),f&&t(Io),w(pL),w(uL),w(L3),w(bL),w(B3),f&&t(qXe),f&&t(fd),w(vL),f&&t(jXe),f&&t(qo),w(FL),w(ML),w(N3),w(EL),w(TF),f&&t(DXe),f&&t(hd),w(CL),f&&t(GXe),f&&t(jo),w(wL),w(LL),w(EF),w(yL),w(gT),f&&t(OXe),f&&t(ud),w(xL),f&&t(VXe),f&&t(Do),w($L),w(SL),w(pT),w(RL),w(bT),f&&t(XXe),f&&t(Fd),w(PL),f&&t(zXe),f&&t(Go),w(BL),w(NL),w(FT),w(qL),w(BT),f&&t(WXe),f&&t(Ed),w(jL),f&&t(QXe),f&&t(Oo),w(DL),w(OL),w(NT),w(VL),w(DT),f&&t(HXe),f&&t(Ad),w(XL),f&&t(UXe),f&&t(Vo),w(zL),w(QL),w(OT),w(HL),w(zT),f&&t(JXe),f&&t(xd),w(UL),f&&t(YXe),f&&t(Xo),w(JL),w(KL),w(QT),w(ZL),w(a7),f&&t(KXe),f&&t(Sd),w(ey),f&&t(ZXe),f&&t(zo),w(oy),w(ty),w(s7),w(ay),w(g7),f&&t(eze),f&&t(Bd),w(ny),f&&t(oze),f&&t(Wo),w(sy),w(iy),w(p7),w(dy),w(L7),f&&t(rze),f&&t(qd),w(cy),f&&t(tze),f&&t(Qo),w(fy),w(gy),w(x7),w(hy),w(R7),f&&t(aze),f&&t(Gd),w(_y),f&&t(nze),f&&t(Ho),w(uy),w(vy),w(B7),w(Fy),w(O7),f&&t(sze),f&&t(Xd),w(Ty),f&&t(lze),f&&t(Uo),w(My),w(Cy),w(X7),w(wy),w(U7),f&&t(ize),f&&t(Hd),w(Ay),f&&t(dze),f&&t(Jo),w(Ly),w(xy),w(Y7),w($y),w(o8),f&&t(cze),f&&t(Yd),w(Sy),f&&t(fze),f&&t(Yo),w(Ry),w(By),w(t8),w(Iy),w(s8),f&&t(mze),f&&t(ec),w(Ny),f&&t(gze),f&&t(Ko),w(qy),w(Dy),w(i8),w(Gy),w(p8),f&&t(hze),f&&t(tc),w(Oy),f&&t(pze),f&&t(Zo),w(Vy),w(zy),w(u8),w(Wy),w(F8),f&&t(_ze),f&&t(sc),w(Qy),f&&t(uze),f&&t(er),w(Hy),w(Jy),w(M8),w(Yy),w(u9),f&&t(bze),f&&t(dc),w(Ky),f&&t(vze),f&&t(or),w(Zy),w(ox),w(v9),w(rx),w(V9),f&&t(Fze),f&&t(mc),w(tx),f&&t(Tze),f&&t(rr),w(ax),w(sx),w(z9),w(lx),w(nM),f&&t(Mze),f&&t(pc),w(ix),f&&t(Eze),f&&t(tr),w(dx),w(fx),w(lM),w(mx),w(hM),f&&t(Cze),f&&t(bc),w(gx),f&&t(wze),f&&t(nr),w(hx),w(_x),w(_M),w(ux),w(NM),f&&t(Aze),f&&t(Tc),w(bx),f&&t(Lze),f&&t(sr),w(vx),w(Tx),w(jM),w(Mx),w(JM),f&&t(yze),f&&t(Cc),w(Ex),f&&t(xze),f&&t(lr),w(Cx),w(Ax),w(KM),w(Lx),w(w4),f&&t($ze),f&&t(Lc),w(yx),f&&t(kze),f&&t(ir),w(xx),w(kx),w(L4),w(Sx),w(z4),f&&t(Sze),f&&t($c),w(Rx),f&&t(Rze),f&&t(dr),w(Px),w(Ix),w(Q4),w(Nx),w(J4),f&&t(Pze),f&&t(Rc),w(jx),f&&t(Bze),f&&t(cr),w(Dx),w(Ox),w(K4),w(Vx),w(eE),f&&t(Ize),f&&t(Ic),w(Xx),f&&t(Nze),f&&t(fr),w(zx),w(Qx),w(rE),w(Hx),w(EE),f&&t(qze),f&&t(jc),w(Ux),f&&t(jze),f&&t(mr),w(Jx),w(Kx),w(wE),w(Zx),w(WE),f&&t(Dze),f&&t(Oc),w(e$),f&&t(Gze),f&&t(gr),w(o$),w(t$),w(HE),w(a$),w(JE),f&&t(Oze),f&&t(zc),w(n$),f&&t(Vze),f&&t(hr),w(s$),w(i$),w(KE),w(d$),w(eC),f&&t(Xze),f&&t(Hc),w(c$),f&&t(zze),f&&t(pr),w(f$),w(g$),w(rC),w(h$),w($C),f&&t(Wze),f&&t(Yc),w(p$),f&&t(Qze),f&&t(_r),w(_$),w(b$),w(SC),w(v$),w(VC),f&&t(Hze),f&&t(ef),w(F$),f&&t(Uze),f&&t(ur),w(T$),w(E$),w(zC),w(C$),w(n5),f&&t(Jze),f&&t(tf),w(w$),f&&t(Yze),f&&t(br),w(A$),w(y$),w(l5),w(x$),w(b5),f&&t(Kze),f&&t(sf),w($$),f&&t(Zze),f&&t(vr),w(k$),w(R$),w(F5),w(P$),w(k5),f&&t(eWe),f&&t(cf),w(B$),f&&t(oWe),f&&t(Fr),w(I$),w(q$),w(R5),w(j$),w(X5),f&&t(rWe),f&&t(gf),w(D$),f&&t(tWe),f&&t(Tr),w(G$),w(V$),w(W5),w(X$),w(t0),f&&t(aWe),f&&t(_f),w(z$),f&&t(nWe),f&&t(Mr),w(W$),w(H$),w(n0),w(U$),w(h0),f&&t(sWe),f&&t(vf),w(J$),f&&t(lWe),f&&t(Er),w(Y$),w(Z$),w(_0),w(ek),w(w0),f&&t(iWe),f&&t(Mf),w(ok),f&&t(dWe),f&&t(Cr),w(rk),w(ak),w(L0),w(nk),w(x0),f&&t(cWe),f&&t(wf),w(sk),f&&t(fWe),f&&t(wr),w(lk),w(dk),w(k0),w(ck),w(P0),f&&t(mWe),f&&t(yf),w(mk),f&&t(gWe),f&&t(Ar),w(gk),w(pk),w(I0),w(_k),w(q0)}}}const hUt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function pUt($){return gQt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class MUt extends dQt{constructor(g){super();cQt(this,g,pUt,gUt,fQt,{})}}export{MUt as default,hUt as metadata};
