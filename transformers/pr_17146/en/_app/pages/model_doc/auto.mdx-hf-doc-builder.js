import{S as Mkt,i as Ekt,s as Ckt,e as a,k as l,w as F,t as o,M as wkt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as Akt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as RXr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function ykt(L){let g,v,p,m,_,d,h,Mo,mi,_f,rt,gi,hi,xA,uf,je,We,pi,yn,$A,Ln,xn,kA,_i,$n,SA,ui,bf,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),mi=a("code"),_f=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),gi=a("code"),hi=o('"new-model"'),xA=o(")."),uf=l(),je=a("p"),We=o("Likewise, if your "),pi=a("code"),yn=o("NewModel"),$A=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),kA=o(`, make sure its
`),_i=a("code"),$n=o("config_class"),SA=o(` attribute is set to the same class you use when registering the model (here
`),ui=a("code"),bf=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var K$=s(p);m=r(K$,"NewModelConfig"),K$.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var bi=s(d);h=r(bi,"PretrainedConfig"),bi.forEach(t),Mo=r(Ae,`, make sure its
`),mi=n(Ae,"CODE",{});var Z$=s(mi);_f=r(Z$,"model_type"),Z$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),gi=n(Ae,"CODE",{});var ek=s(gi);hi=r(ek,'"new-model"'),ek.forEach(t),xA=r(Ae,")."),Ae.forEach(t),uf=i(Qe),je=n(Qe,"P",{});var Eo=s(je);We=r(Eo,"Likewise, if your "),pi=n(Eo,"CODE",{});var wa=s(pi);yn=r(wa,"NewModel"),wa.forEach(t),$A=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var ok=s(Ln);xn=r(ok,"PreTrainedModel"),ok.forEach(t),kA=r(Eo,`, make sure its
`),_i=n(Eo,"CODE",{});var vf=s(_i);$n=r(vf,"config_class"),vf.forEach(t),SA=r(Eo,` attribute is set to the same class you use when registering the model (here
`),ui=n(Eo,"CODE",{});var rk=s(ui);bf=r(rk,"NewModelConfig"),rk.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,mi),e(mi,_f),e(g,rt),e(g,gi),e(gi,hi),e(g,xA),b(Qe,uf,Ae),b(Qe,je,Ae),e(je,We),e(je,pi),e(pi,yn),e(je,$A),e(je,Ln),e(Ln,xn),e(je,kA),e(je,_i),e(_i,$n),e(je,SA),e(je,ui),e(ui,bf),e(je,Ca)},d(Qe){Qe&&t(g),Qe&&t(uf),Qe&&t(je)}}}function Lkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $kt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function kkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Skt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function Rkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ikt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Okt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ukt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ykt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _St(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ESt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ASt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ySt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $St(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ISt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function USt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Rt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ERt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CRt(L){let g,v,p,m,_,d,h,Mo,mi,_f,rt,gi,hi,xA,uf,je,We,pi,yn,$A,Ln,xn,kA,_i,$n,SA,ui,bf,Ca,Qe,Ae,K$,bi,Z$,ek,Eo,wa,ok,vf,rk,POe,Eqe,vi,Ff,Foe,RA,BOe,Toe,IOe,Cqe,kn,NOe,Moe,qOe,jOe,Eoe,DOe,GOe,wqe,PA,Aqe,tk,OOe,yqe,Tf,Lqe,Fi,Mf,Coe,BA,VOe,woe,XOe,xqe,Co,IA,zOe,NA,WOe,ak,QOe,HOe,UOe,qA,JOe,Aoe,YOe,KOe,ZOe,Er,jA,eVe,yoe,oVe,rVe,Ti,tVe,Loe,aVe,nVe,xoe,sVe,lVe,iVe,A,Ef,$oe,dVe,cVe,nk,fVe,mVe,gVe,Cf,koe,hVe,pVe,sk,_Ve,uVe,bVe,wf,Soe,vVe,FVe,lk,TVe,MVe,EVe,Af,Roe,CVe,wVe,ik,AVe,yVe,LVe,yf,Poe,xVe,$Ve,dk,kVe,SVe,RVe,Lf,Boe,PVe,BVe,ck,IVe,NVe,qVe,xf,Ioe,jVe,DVe,fk,GVe,OVe,VVe,$f,Noe,XVe,zVe,mk,WVe,QVe,HVe,kf,qoe,UVe,JVe,gk,YVe,KVe,ZVe,Sf,joe,eXe,oXe,hk,rXe,tXe,aXe,Rf,Doe,nXe,sXe,pk,lXe,iXe,dXe,Pf,Goe,cXe,fXe,_k,mXe,gXe,hXe,Bf,Ooe,pXe,_Xe,uk,uXe,bXe,vXe,If,Voe,FXe,TXe,bk,MXe,EXe,CXe,Nf,Xoe,wXe,AXe,vk,yXe,LXe,xXe,qf,zoe,$Xe,kXe,Fk,SXe,RXe,PXe,jf,Woe,BXe,IXe,Tk,NXe,qXe,jXe,Df,Qoe,DXe,GXe,Mk,OXe,VXe,XXe,Gf,Hoe,zXe,WXe,Ek,QXe,HXe,UXe,Of,Uoe,JXe,YXe,Ck,KXe,ZXe,eze,Vf,Joe,oze,rze,wk,tze,aze,nze,Xf,Yoe,sze,lze,Ak,ize,dze,cze,zf,Koe,fze,mze,yk,gze,hze,pze,Wf,Zoe,_ze,uze,Lk,bze,vze,Fze,Qf,ere,Tze,Mze,xk,Eze,Cze,wze,Hf,ore,Aze,yze,$k,Lze,xze,$ze,Uf,rre,kze,Sze,kk,Rze,Pze,Bze,Jf,tre,Ize,Nze,Sk,qze,jze,Dze,Yf,are,Gze,Oze,Rk,Vze,Xze,zze,Kf,nre,Wze,Qze,Pk,Hze,Uze,Jze,Zf,sre,Yze,Kze,Bk,Zze,eWe,oWe,em,lre,rWe,tWe,Ik,aWe,nWe,sWe,om,ire,lWe,iWe,Nk,dWe,cWe,fWe,rm,dre,mWe,gWe,qk,hWe,pWe,_We,tm,cre,uWe,bWe,jk,vWe,FWe,TWe,am,fre,MWe,EWe,Dk,CWe,wWe,AWe,nm,mre,yWe,LWe,Gk,xWe,$We,kWe,sm,gre,SWe,RWe,Ok,PWe,BWe,IWe,lm,hre,NWe,qWe,Vk,jWe,DWe,GWe,im,pre,OWe,VWe,Xk,XWe,zWe,WWe,dm,_re,QWe,HWe,zk,UWe,JWe,YWe,cm,ure,KWe,ZWe,Wk,eQe,oQe,rQe,fm,bre,tQe,aQe,Qk,nQe,sQe,lQe,mm,vre,iQe,dQe,Hk,cQe,fQe,mQe,gm,Fre,gQe,hQe,Uk,pQe,_Qe,uQe,hm,Tre,bQe,vQe,Jk,FQe,TQe,MQe,pm,Mre,EQe,CQe,Yk,wQe,AQe,yQe,_m,Ere,LQe,xQe,Kk,$Qe,kQe,SQe,um,Cre,RQe,PQe,Zk,BQe,IQe,NQe,bm,wre,qQe,jQe,eS,DQe,GQe,OQe,vm,Are,VQe,XQe,oS,zQe,WQe,QQe,Fm,yre,HQe,UQe,rS,JQe,YQe,KQe,Tm,Lre,ZQe,eHe,tS,oHe,rHe,tHe,Mm,xre,aHe,nHe,aS,sHe,lHe,iHe,Em,$re,dHe,cHe,nS,fHe,mHe,gHe,Cm,kre,hHe,pHe,sS,_He,uHe,bHe,wm,Sre,vHe,FHe,lS,THe,MHe,EHe,Am,Rre,CHe,wHe,iS,AHe,yHe,LHe,ym,Pre,xHe,$He,dS,kHe,SHe,RHe,Lm,Bre,PHe,BHe,cS,IHe,NHe,qHe,xm,Ire,jHe,DHe,fS,GHe,OHe,VHe,$m,Nre,XHe,zHe,mS,WHe,QHe,HHe,km,qre,UHe,JHe,gS,YHe,KHe,ZHe,Sm,jre,eUe,oUe,hS,rUe,tUe,aUe,Rm,Dre,nUe,sUe,pS,lUe,iUe,dUe,Pm,Gre,cUe,fUe,_S,mUe,gUe,hUe,Bm,Ore,pUe,_Ue,uS,uUe,bUe,vUe,Im,Vre,FUe,TUe,bS,MUe,EUe,CUe,Nm,Xre,wUe,AUe,vS,yUe,LUe,xUe,qm,zre,$Ue,kUe,FS,SUe,RUe,PUe,jm,Wre,BUe,IUe,TS,NUe,qUe,jUe,Dm,Qre,DUe,GUe,MS,OUe,VUe,XUe,Gm,Hre,zUe,WUe,ES,QUe,HUe,UUe,Om,Ure,JUe,YUe,CS,KUe,ZUe,eJe,Vm,Jre,oJe,rJe,wS,tJe,aJe,nJe,Xm,Yre,sJe,lJe,AS,iJe,dJe,cJe,zm,Kre,fJe,mJe,yS,gJe,hJe,pJe,Wm,Zre,_Je,uJe,LS,bJe,vJe,FJe,Qm,ete,TJe,MJe,xS,EJe,CJe,wJe,Hm,ote,AJe,yJe,$S,LJe,xJe,$Je,Um,rte,kJe,SJe,kS,RJe,PJe,BJe,Jm,tte,IJe,NJe,SS,qJe,jJe,DJe,Ym,ate,GJe,OJe,RS,VJe,XJe,zJe,Km,nte,WJe,QJe,PS,HJe,UJe,JJe,Zm,ste,YJe,KJe,BS,ZJe,eYe,oYe,eg,lte,rYe,tYe,IS,aYe,nYe,sYe,og,ite,lYe,iYe,NS,dYe,cYe,fYe,rg,dte,mYe,gYe,qS,hYe,pYe,_Ye,tg,cte,uYe,bYe,jS,vYe,FYe,TYe,ag,fte,MYe,EYe,DS,CYe,wYe,AYe,ng,mte,yYe,LYe,GS,xYe,$Ye,kYe,sg,gte,SYe,RYe,OS,PYe,BYe,IYe,lg,hte,NYe,qYe,VS,jYe,DYe,GYe,ig,pte,OYe,VYe,XS,XYe,zYe,WYe,dg,_te,QYe,HYe,zS,UYe,JYe,YYe,cg,ute,KYe,ZYe,WS,eKe,oKe,rKe,fg,bte,tKe,aKe,QS,nKe,sKe,lKe,mg,vte,iKe,dKe,HS,cKe,fKe,mKe,gg,Fte,gKe,hKe,US,pKe,_Ke,uKe,hg,Tte,bKe,vKe,JS,FKe,TKe,MKe,pg,Mte,EKe,CKe,YS,wKe,AKe,yKe,_g,Ete,LKe,xKe,KS,$Ke,kKe,SKe,ug,Cte,RKe,PKe,ZS,BKe,IKe,NKe,bg,wte,qKe,jKe,eR,DKe,GKe,OKe,vg,Ate,VKe,XKe,oR,zKe,WKe,QKe,Fg,yte,HKe,UKe,rR,JKe,YKe,KKe,Tg,Lte,ZKe,eZe,tR,oZe,rZe,tZe,Mg,xte,aZe,nZe,aR,sZe,lZe,iZe,Eg,$te,dZe,cZe,nR,fZe,mZe,gZe,Cg,kte,hZe,pZe,sR,_Ze,uZe,bZe,wg,vZe,Ag,DA,FZe,Ste,TZe,$qe,Mi,yg,Rte,GA,MZe,Pte,EZe,kqe,wo,OA,CZe,VA,wZe,lR,AZe,yZe,LZe,XA,xZe,Bte,$Ze,kZe,SZe,Cr,zA,RZe,Ite,PZe,BZe,Aa,IZe,Nte,NZe,qZe,qte,jZe,DZe,jte,GZe,OZe,VZe,k,Sn,Dte,XZe,zZe,iR,WZe,QZe,dR,HZe,UZe,JZe,Rn,Gte,YZe,KZe,cR,ZZe,eeo,fR,oeo,reo,teo,Pn,Ote,aeo,neo,mR,seo,leo,gR,ieo,deo,ceo,Lg,Vte,feo,meo,hR,geo,heo,peo,Bn,Xte,_eo,ueo,pR,beo,veo,_R,Feo,Teo,Meo,xg,zte,Eeo,Ceo,uR,weo,Aeo,yeo,$g,Wte,Leo,xeo,bR,$eo,keo,Seo,kg,Qte,Reo,Peo,vR,Beo,Ieo,Neo,In,Hte,qeo,jeo,FR,Deo,Geo,TR,Oeo,Veo,Xeo,Nn,Ute,zeo,Weo,MR,Qeo,Heo,ER,Ueo,Jeo,Yeo,qn,Jte,Keo,Zeo,CR,eoo,ooo,wR,roo,too,aoo,Sg,Yte,noo,soo,AR,loo,ioo,doo,Rg,Kte,coo,foo,yR,moo,goo,hoo,jn,Zte,poo,_oo,LR,uoo,boo,xR,voo,Foo,Too,Pg,eae,Moo,Eoo,$R,Coo,woo,Aoo,Dn,oae,yoo,Loo,kR,xoo,$oo,SR,koo,Soo,Roo,Gn,rae,Poo,Boo,RR,Ioo,Noo,PR,qoo,joo,Doo,On,tae,Goo,Ooo,BR,Voo,Xoo,IR,zoo,Woo,Qoo,Bg,aae,Hoo,Uoo,NR,Joo,Yoo,Koo,Vn,nae,Zoo,ero,qR,oro,rro,jR,tro,aro,nro,Xn,sae,sro,lro,DR,iro,dro,GR,cro,fro,mro,zn,lae,gro,hro,OR,pro,_ro,VR,uro,bro,vro,Wn,iae,Fro,Tro,XR,Mro,Ero,zR,Cro,wro,Aro,Qn,dae,yro,Lro,WR,xro,$ro,QR,kro,Sro,Rro,Hn,cae,Pro,Bro,HR,Iro,Nro,UR,qro,jro,Dro,Ig,fae,Gro,Oro,JR,Vro,Xro,zro,Un,mae,Wro,Qro,YR,Hro,Uro,KR,Jro,Yro,Kro,Ng,gae,Zro,eto,ZR,oto,rto,tto,Jn,hae,ato,nto,eP,sto,lto,oP,ito,dto,cto,Yn,pae,fto,mto,rP,gto,hto,tP,pto,_to,uto,Kn,_ae,bto,vto,aP,Fto,Tto,nP,Mto,Eto,Cto,qg,uae,wto,Ato,sP,yto,Lto,xto,Zn,bae,$to,kto,lP,Sto,Rto,iP,Pto,Bto,Ito,es,vae,Nto,qto,dP,jto,Dto,cP,Gto,Oto,Vto,os,Fae,Xto,zto,fP,Wto,Qto,mP,Hto,Uto,Jto,jg,Tae,Yto,Kto,gP,Zto,eao,oao,rs,Mae,rao,tao,hP,aao,nao,pP,sao,lao,iao,ts,Eae,dao,cao,_P,fao,mao,uP,gao,hao,pao,as,Cae,_ao,uao,bP,bao,vao,vP,Fao,Tao,Mao,ns,wae,Eao,Cao,FP,wao,Aao,TP,yao,Lao,xao,ss,Aae,$ao,kao,MP,Sao,Rao,EP,Pao,Bao,Iao,ls,yae,Nao,qao,CP,jao,Dao,wP,Gao,Oao,Vao,is,Lae,Xao,zao,AP,Wao,Qao,yP,Hao,Uao,Jao,Dg,xae,Yao,Kao,LP,Zao,eno,ono,ds,$ae,rno,tno,xP,ano,nno,$P,sno,lno,ino,Gg,kae,dno,cno,kP,fno,mno,gno,Og,Sae,hno,pno,SP,_no,uno,bno,cs,Rae,vno,Fno,RP,Tno,Mno,PP,Eno,Cno,wno,fs,Pae,Ano,yno,BP,Lno,xno,IP,$no,kno,Sno,ms,Bae,Rno,Pno,NP,Bno,Ino,qP,Nno,qno,jno,Vg,Iae,Dno,Gno,jP,Ono,Vno,Xno,gs,Nae,zno,Wno,DP,Qno,Hno,GP,Uno,Jno,Yno,hs,qae,Kno,Zno,OP,eso,oso,VP,rso,tso,aso,ps,jae,nso,sso,XP,lso,iso,zP,dso,cso,fso,_s,Dae,mso,gso,WP,hso,pso,QP,_so,uso,bso,us,Gae,vso,Fso,HP,Tso,Mso,UP,Eso,Cso,wso,Xg,Oae,Aso,yso,JP,Lso,xso,$so,bs,Vae,kso,Sso,YP,Rso,Pso,KP,Bso,Iso,Nso,zg,Xae,qso,jso,ZP,Dso,Gso,Oso,Wg,zae,Vso,Xso,eB,zso,Wso,Qso,Qg,Wae,Hso,Uso,oB,Jso,Yso,Kso,Hg,Qae,Zso,elo,rB,olo,rlo,tlo,vs,Hae,alo,nlo,tB,slo,llo,aB,ilo,dlo,clo,Ug,Uae,flo,mlo,nB,glo,hlo,plo,Fs,Jae,_lo,ulo,sB,blo,vlo,lB,Flo,Tlo,Mlo,Ts,Yae,Elo,Clo,iB,wlo,Alo,dB,ylo,Llo,xlo,Ms,Kae,$lo,klo,cB,Slo,Rlo,fB,Plo,Blo,Ilo,Es,Zae,Nlo,qlo,mB,jlo,Dlo,gB,Glo,Olo,Vlo,Cs,ene,Xlo,zlo,hB,Wlo,Qlo,pB,Hlo,Ulo,Jlo,ws,one,Ylo,Klo,_B,Zlo,eio,uB,oio,rio,tio,Jg,rne,aio,nio,bB,sio,lio,iio,Yg,tne,dio,cio,vB,fio,mio,gio,As,ane,hio,pio,FB,_io,uio,TB,bio,vio,Fio,ys,nne,Tio,Mio,MB,Eio,Cio,EB,wio,Aio,yio,Ls,sne,Lio,xio,CB,$io,kio,wB,Sio,Rio,Pio,Kg,lne,Bio,Iio,AB,Nio,qio,jio,Zg,ine,Dio,Gio,yB,Oio,Vio,Xio,eh,dne,zio,Wio,LB,Qio,Hio,Uio,xs,cne,Jio,Yio,xB,Kio,Zio,$B,edo,odo,rdo,oh,fne,tdo,ado,kB,ndo,sdo,ldo,rh,mne,ido,ddo,SB,cdo,fdo,mdo,th,gne,gdo,hdo,RB,pdo,_do,udo,$s,hne,bdo,vdo,PB,Fdo,Tdo,BB,Mdo,Edo,Cdo,ah,pne,wdo,Ado,IB,ydo,Ldo,xdo,nh,_ne,$do,kdo,NB,Sdo,Rdo,Pdo,ks,une,Bdo,Ido,qB,Ndo,qdo,jB,jdo,Ddo,Gdo,Ss,bne,Odo,Vdo,DB,Xdo,zdo,GB,Wdo,Qdo,Hdo,Rs,vne,Udo,Jdo,OB,Ydo,Kdo,VB,Zdo,eco,oco,Ps,Fne,rco,tco,XB,aco,nco,zB,sco,lco,ico,sh,dco,lh,WA,cco,Tne,fco,Sqe,Ei,ih,Mne,QA,mco,Ene,gco,Rqe,Ao,HA,hco,UA,pco,WB,_co,uco,bco,JA,vco,Cne,Fco,Tco,Mco,He,YA,Eco,wne,Cco,wco,ya,Aco,Ane,yco,Lco,yne,xco,$co,Lne,kco,Sco,Rco,Y,dh,xne,Pco,Bco,QB,Ico,Nco,qco,ch,$ne,jco,Dco,HB,Gco,Oco,Vco,fh,kne,Xco,zco,UB,Wco,Qco,Hco,mh,Sne,Uco,Jco,JB,Yco,Kco,Zco,gh,Rne,efo,ofo,YB,rfo,tfo,afo,hh,Pne,nfo,sfo,KB,lfo,ifo,dfo,ph,Bne,cfo,ffo,ZB,mfo,gfo,hfo,_h,Ine,pfo,_fo,eI,ufo,bfo,vfo,uh,Nne,Ffo,Tfo,oI,Mfo,Efo,Cfo,bh,qne,wfo,Afo,rI,yfo,Lfo,xfo,vh,jne,$fo,kfo,tI,Sfo,Rfo,Pfo,Fh,Dne,Bfo,Ifo,aI,Nfo,qfo,jfo,Th,Gne,Dfo,Gfo,nI,Ofo,Vfo,Xfo,Mh,One,zfo,Wfo,sI,Qfo,Hfo,Ufo,Eh,Vne,Jfo,Yfo,lI,Kfo,Zfo,emo,Ch,Xne,omo,rmo,iI,tmo,amo,nmo,wh,zne,smo,lmo,dI,imo,dmo,cmo,Ah,Wne,fmo,mmo,cI,gmo,hmo,pmo,yh,Qne,_mo,umo,fI,bmo,vmo,Fmo,Lh,Hne,Tmo,Mmo,mI,Emo,Cmo,wmo,xh,Une,Amo,ymo,gI,Lmo,xmo,$mo,$h,Jne,kmo,Smo,hI,Rmo,Pmo,Bmo,kh,Yne,Imo,Nmo,pI,qmo,jmo,Dmo,Sh,Kne,Gmo,Omo,_I,Vmo,Xmo,zmo,Rh,Zne,Wmo,Qmo,uI,Hmo,Umo,Jmo,Ph,ese,Ymo,Kmo,bI,Zmo,ego,ogo,Bh,ose,rgo,tgo,vI,ago,ngo,sgo,Ih,rse,lgo,igo,FI,dgo,cgo,fgo,Nh,tse,mgo,ggo,TI,hgo,pgo,_go,qh,ase,ugo,bgo,MI,vgo,Fgo,Tgo,jh,Mgo,Dh,Ego,Gh,KA,Cgo,nse,wgo,Pqe,Ci,Oh,sse,ZA,Ago,lse,ygo,Bqe,yo,ey,Lgo,oy,xgo,EI,$go,kgo,Sgo,ry,Rgo,ise,Pgo,Bgo,Igo,Ue,ty,Ngo,dse,qgo,jgo,wi,Dgo,cse,Ggo,Ogo,fse,Vgo,Xgo,zgo,he,Vh,mse,Wgo,Qgo,CI,Hgo,Ugo,Jgo,Xh,gse,Ygo,Kgo,hse,Zgo,eho,oho,zh,pse,rho,tho,wI,aho,nho,sho,Wh,_se,lho,iho,AI,dho,cho,fho,Qh,use,mho,gho,yI,hho,pho,_ho,Hh,bse,uho,bho,LI,vho,Fho,Tho,Uh,vse,Mho,Eho,xI,Cho,who,Aho,Jh,Fse,yho,Lho,$I,xho,$ho,kho,Yh,Tse,Sho,Rho,kI,Pho,Bho,Iho,Kh,Mse,Nho,qho,SI,jho,Dho,Gho,Zh,Ese,Oho,Vho,RI,Xho,zho,Who,ep,Cse,Qho,Hho,PI,Uho,Jho,Yho,op,wse,Kho,Zho,BI,epo,opo,rpo,rp,Ase,tpo,apo,II,npo,spo,lpo,tp,yse,ipo,dpo,NI,cpo,fpo,mpo,ap,Lse,gpo,hpo,qI,ppo,_po,upo,np,xse,bpo,vpo,jI,Fpo,Tpo,Mpo,sp,$se,Epo,Cpo,DI,wpo,Apo,ypo,lp,Lpo,ip,xpo,dp,ay,$po,kse,kpo,Iqe,Ai,cp,Sse,ny,Spo,Rse,Rpo,Nqe,Lo,sy,Ppo,yi,Bpo,GI,Ipo,Npo,OI,qpo,jpo,Dpo,ly,Gpo,Pse,Opo,Vpo,Xpo,tt,iy,zpo,Bse,Wpo,Qpo,Li,Hpo,Ise,Upo,Jpo,VI,Ypo,Kpo,Zpo,fp,e_o,Je,dy,o_o,Nse,r_o,t_o,La,a_o,qse,n_o,s_o,jse,l_o,i_o,Dse,d_o,c_o,f_o,x,mp,Gse,m_o,g_o,XI,h_o,p_o,__o,gp,Ose,u_o,b_o,zI,v_o,F_o,T_o,hp,Vse,M_o,E_o,WI,C_o,w_o,A_o,pp,Xse,y_o,L_o,QI,x_o,$_o,k_o,_p,zse,S_o,R_o,HI,P_o,B_o,I_o,up,Wse,N_o,q_o,UI,j_o,D_o,G_o,bp,Qse,O_o,V_o,JI,X_o,z_o,W_o,vp,Hse,Q_o,H_o,YI,U_o,J_o,Y_o,Fp,Use,K_o,Z_o,KI,euo,ouo,ruo,Tp,Jse,tuo,auo,ZI,nuo,suo,luo,Mp,Yse,iuo,duo,eN,cuo,fuo,muo,Ep,Kse,guo,huo,oN,puo,_uo,uuo,Cp,Zse,buo,vuo,rN,Fuo,Tuo,Muo,wp,ele,Euo,Cuo,tN,wuo,Auo,yuo,Ap,ole,Luo,xuo,aN,$uo,kuo,Suo,yp,rle,Ruo,Puo,nN,Buo,Iuo,Nuo,Lp,tle,quo,juo,sN,Duo,Guo,Ouo,xp,ale,Vuo,Xuo,lN,zuo,Wuo,Quo,$p,nle,Huo,Uuo,iN,Juo,Yuo,Kuo,kp,sle,Zuo,e1o,dN,o1o,r1o,t1o,Sp,lle,a1o,n1o,cN,s1o,l1o,i1o,Rp,ile,d1o,c1o,fN,f1o,m1o,g1o,Pp,dle,h1o,p1o,mN,_1o,u1o,b1o,Bp,cle,v1o,F1o,gN,T1o,M1o,E1o,Ip,fle,C1o,w1o,hN,A1o,y1o,L1o,Np,mle,x1o,$1o,pN,k1o,S1o,R1o,qp,gle,P1o,B1o,_N,I1o,N1o,q1o,jp,hle,j1o,D1o,uN,G1o,O1o,V1o,Dp,ple,X1o,z1o,bN,W1o,Q1o,H1o,Gp,_le,U1o,J1o,vN,Y1o,K1o,Z1o,Op,ule,ebo,obo,FN,rbo,tbo,abo,Vp,ble,nbo,sbo,TN,lbo,ibo,dbo,Bs,vle,cbo,fbo,MN,mbo,gbo,EN,hbo,pbo,_bo,Xp,Fle,ubo,bbo,CN,vbo,Fbo,Tbo,zp,Tle,Mbo,Ebo,wN,Cbo,wbo,Abo,Wp,Mle,ybo,Lbo,AN,xbo,$bo,kbo,Qp,Ele,Sbo,Rbo,yN,Pbo,Bbo,Ibo,Hp,Cle,Nbo,qbo,LN,jbo,Dbo,Gbo,Up,wle,Obo,Vbo,xN,Xbo,zbo,Wbo,Jp,Ale,Qbo,Hbo,$N,Ubo,Jbo,Ybo,Yp,yle,Kbo,Zbo,kN,e2o,o2o,r2o,Kp,Lle,t2o,a2o,SN,n2o,s2o,l2o,Zp,xle,i2o,d2o,RN,c2o,f2o,m2o,e_,$le,g2o,h2o,PN,p2o,_2o,u2o,o_,kle,b2o,v2o,BN,F2o,T2o,M2o,r_,Sle,E2o,C2o,IN,w2o,A2o,y2o,t_,Rle,L2o,x2o,NN,$2o,k2o,S2o,a_,Ple,R2o,P2o,qN,B2o,I2o,N2o,n_,Ble,q2o,j2o,jN,D2o,G2o,O2o,s_,Ile,V2o,X2o,DN,z2o,W2o,Q2o,l_,Nle,H2o,U2o,GN,J2o,Y2o,K2o,i_,qle,Z2o,e4o,ON,o4o,r4o,t4o,d_,jle,a4o,n4o,VN,s4o,l4o,i4o,c_,Dle,d4o,c4o,XN,f4o,m4o,g4o,f_,Gle,h4o,p4o,zN,_4o,u4o,b4o,m_,Ole,v4o,F4o,WN,T4o,M4o,E4o,g_,Vle,C4o,w4o,QN,A4o,y4o,L4o,h_,Xle,x4o,$4o,HN,k4o,S4o,R4o,p_,zle,P4o,B4o,UN,I4o,N4o,q4o,__,Wle,j4o,D4o,JN,G4o,O4o,V4o,u_,Qle,X4o,z4o,YN,W4o,Q4o,H4o,b_,Hle,U4o,J4o,KN,Y4o,K4o,Z4o,v_,Ule,evo,ovo,ZN,rvo,tvo,avo,F_,Jle,nvo,svo,eq,lvo,ivo,dvo,T_,Yle,cvo,fvo,oq,mvo,gvo,hvo,M_,Kle,pvo,_vo,rq,uvo,bvo,vvo,E_,Zle,Fvo,Tvo,tq,Mvo,Evo,Cvo,C_,eie,wvo,Avo,aq,yvo,Lvo,xvo,w_,oie,$vo,kvo,nq,Svo,Rvo,Pvo,A_,rie,Bvo,Ivo,sq,Nvo,qvo,jvo,y_,tie,Dvo,Gvo,lq,Ovo,Vvo,Xvo,L_,aie,zvo,Wvo,iq,Qvo,Hvo,Uvo,x_,nie,Jvo,Yvo,dq,Kvo,Zvo,eFo,$_,sie,oFo,rFo,cq,tFo,aFo,nFo,k_,lie,sFo,lFo,fq,iFo,dFo,cFo,S_,iie,fFo,mFo,mq,gFo,hFo,pFo,R_,die,_Fo,uFo,gq,bFo,vFo,FFo,P_,cie,TFo,MFo,hq,EFo,CFo,wFo,B_,fie,AFo,yFo,pq,LFo,xFo,$Fo,I_,mie,kFo,SFo,_q,RFo,PFo,BFo,N_,gie,IFo,NFo,uq,qFo,jFo,DFo,q_,hie,GFo,OFo,bq,VFo,XFo,zFo,j_,pie,WFo,QFo,vq,HFo,UFo,JFo,D_,_ie,YFo,KFo,Fq,ZFo,e6o,o6o,G_,uie,r6o,t6o,Tq,a6o,n6o,s6o,O_,bie,l6o,i6o,Mq,d6o,c6o,f6o,V_,vie,m6o,g6o,Eq,h6o,p6o,_6o,X_,Fie,u6o,b6o,Cq,v6o,F6o,T6o,z_,Tie,M6o,E6o,wq,C6o,w6o,A6o,W_,Mie,y6o,L6o,Aq,x6o,$6o,k6o,Q_,Eie,S6o,R6o,yq,P6o,B6o,I6o,H_,Cie,N6o,q6o,Lq,j6o,D6o,G6o,U_,wie,O6o,V6o,xq,X6o,z6o,W6o,J_,Aie,Q6o,H6o,$q,U6o,J6o,Y6o,Y_,yie,K6o,Z6o,kq,eTo,oTo,rTo,K_,Lie,tTo,aTo,Sq,nTo,sTo,lTo,Z_,xie,iTo,dTo,Rq,cTo,fTo,mTo,eu,$ie,gTo,hTo,Pq,pTo,_To,uTo,ou,kie,bTo,vTo,Bq,FTo,TTo,MTo,ru,Sie,ETo,CTo,Iq,wTo,ATo,yTo,tu,Rie,LTo,xTo,Nq,$To,kTo,STo,au,Pie,RTo,PTo,qq,BTo,ITo,NTo,nu,Bie,qTo,jTo,jq,DTo,GTo,OTo,su,VTo,Iie,XTo,zTo,Nie,WTo,QTo,lu,qqe,xi,iu,qie,cy,HTo,jie,UTo,jqe,xo,fy,JTo,$i,YTo,Dq,KTo,ZTo,Gq,e7o,o7o,r7o,my,t7o,Die,a7o,n7o,s7o,at,gy,l7o,Gie,i7o,d7o,ki,c7o,Oie,f7o,m7o,Oq,g7o,h7o,p7o,du,_7o,Ye,hy,u7o,Vie,b7o,v7o,xa,F7o,Xie,T7o,M7o,zie,E7o,C7o,Wie,w7o,A7o,y7o,G,cu,Qie,L7o,x7o,Vq,$7o,k7o,S7o,fu,Hie,R7o,P7o,Xq,B7o,I7o,N7o,mu,Uie,q7o,j7o,zq,D7o,G7o,O7o,gu,Jie,V7o,X7o,Wq,z7o,W7o,Q7o,hu,Yie,H7o,U7o,Qq,J7o,Y7o,K7o,pu,Kie,Z7o,eMo,Hq,oMo,rMo,tMo,_u,Zie,aMo,nMo,Uq,sMo,lMo,iMo,uu,ede,dMo,cMo,Jq,fMo,mMo,gMo,bu,ode,hMo,pMo,Yq,_Mo,uMo,bMo,vu,rde,vMo,FMo,Kq,TMo,MMo,EMo,Fu,tde,CMo,wMo,Zq,AMo,yMo,LMo,Tu,ade,xMo,$Mo,ej,kMo,SMo,RMo,Mu,nde,PMo,BMo,oj,IMo,NMo,qMo,Eu,sde,jMo,DMo,rj,GMo,OMo,VMo,Cu,lde,XMo,zMo,tj,WMo,QMo,HMo,wu,ide,UMo,JMo,aj,YMo,KMo,ZMo,Au,dde,eEo,oEo,nj,rEo,tEo,aEo,yu,cde,nEo,sEo,sj,lEo,iEo,dEo,Lu,fde,cEo,fEo,lj,mEo,gEo,hEo,xu,mde,pEo,_Eo,ij,uEo,bEo,vEo,$u,gde,FEo,TEo,dj,MEo,EEo,CEo,ku,hde,wEo,AEo,cj,yEo,LEo,xEo,Su,pde,$Eo,kEo,fj,SEo,REo,PEo,Ru,_de,BEo,IEo,mj,NEo,qEo,jEo,Pu,ude,DEo,GEo,gj,OEo,VEo,XEo,Bu,bde,zEo,WEo,hj,QEo,HEo,UEo,Iu,vde,JEo,YEo,pj,KEo,ZEo,eCo,Nu,Fde,oCo,rCo,_j,tCo,aCo,nCo,qu,Tde,sCo,lCo,uj,iCo,dCo,cCo,ju,Mde,fCo,mCo,bj,gCo,hCo,pCo,Du,Ede,_Co,uCo,vj,bCo,vCo,FCo,Gu,Cde,TCo,MCo,Fj,ECo,CCo,wCo,Ou,wde,ACo,yCo,Tj,LCo,xCo,$Co,Vu,Ade,kCo,SCo,Mj,RCo,PCo,BCo,Xu,yde,ICo,NCo,Ej,qCo,jCo,DCo,zu,Lde,GCo,OCo,Cj,VCo,XCo,zCo,Wu,xde,WCo,QCo,wj,HCo,UCo,JCo,Qu,$de,YCo,KCo,Aj,ZCo,e5o,o5o,Hu,kde,r5o,t5o,yj,a5o,n5o,s5o,Uu,Sde,l5o,i5o,Lj,d5o,c5o,f5o,Ju,Rde,m5o,g5o,xj,h5o,p5o,_5o,Yu,Pde,u5o,b5o,$j,v5o,F5o,T5o,Ku,M5o,Bde,E5o,C5o,Ide,w5o,A5o,Zu,Dqe,Si,e1,Nde,py,y5o,qde,L5o,Gqe,$o,_y,x5o,Ri,$5o,kj,k5o,S5o,Sj,R5o,P5o,B5o,uy,I5o,jde,N5o,q5o,j5o,nt,by,D5o,Dde,G5o,O5o,Pi,V5o,Gde,X5o,z5o,Rj,W5o,Q5o,H5o,o1,U5o,Ke,vy,J5o,Ode,Y5o,K5o,$a,Z5o,Vde,e3o,o3o,Xde,r3o,t3o,zde,a3o,n3o,s3o,z,r1,Wde,l3o,i3o,Pj,d3o,c3o,f3o,t1,Qde,m3o,g3o,Bj,h3o,p3o,_3o,a1,Hde,u3o,b3o,Ij,v3o,F3o,T3o,n1,Ude,M3o,E3o,Nj,C3o,w3o,A3o,s1,Jde,y3o,L3o,qj,x3o,$3o,k3o,l1,Yde,S3o,R3o,jj,P3o,B3o,I3o,i1,Kde,N3o,q3o,Dj,j3o,D3o,G3o,d1,Zde,O3o,V3o,Gj,X3o,z3o,W3o,c1,ece,Q3o,H3o,Oj,U3o,J3o,Y3o,f1,oce,K3o,Z3o,Vj,ewo,owo,rwo,m1,rce,two,awo,Xj,nwo,swo,lwo,g1,tce,iwo,dwo,zj,cwo,fwo,mwo,h1,ace,gwo,hwo,Wj,pwo,_wo,uwo,p1,nce,bwo,vwo,Qj,Fwo,Two,Mwo,_1,sce,Ewo,Cwo,Hj,wwo,Awo,ywo,u1,lce,Lwo,xwo,Uj,$wo,kwo,Swo,b1,ice,Rwo,Pwo,Jj,Bwo,Iwo,Nwo,v1,dce,qwo,jwo,Yj,Dwo,Gwo,Owo,F1,cce,Vwo,Xwo,Kj,zwo,Wwo,Qwo,T1,fce,Hwo,Uwo,Zj,Jwo,Ywo,Kwo,M1,mce,Zwo,e0o,eD,o0o,r0o,t0o,E1,gce,a0o,n0o,oD,s0o,l0o,i0o,C1,hce,d0o,c0o,rD,f0o,m0o,g0o,w1,pce,h0o,p0o,tD,_0o,u0o,b0o,A1,_ce,v0o,F0o,aD,T0o,M0o,E0o,y1,uce,C0o,w0o,nD,A0o,y0o,L0o,L1,bce,x0o,$0o,sD,k0o,S0o,R0o,x1,vce,P0o,B0o,lD,I0o,N0o,q0o,$1,Fce,j0o,D0o,iD,G0o,O0o,V0o,k1,Tce,X0o,z0o,dD,W0o,Q0o,H0o,S1,Mce,U0o,J0o,cD,Y0o,K0o,Z0o,R1,Ece,eAo,oAo,fD,rAo,tAo,aAo,P1,Cce,nAo,sAo,mD,lAo,iAo,dAo,B1,wce,cAo,fAo,gD,mAo,gAo,hAo,I1,Ace,pAo,_Ao,hD,uAo,bAo,vAo,N1,yce,FAo,TAo,pD,MAo,EAo,CAo,q1,Lce,wAo,AAo,_D,yAo,LAo,xAo,j1,$Ao,xce,kAo,SAo,$ce,RAo,PAo,D1,Oqe,Bi,G1,kce,Fy,BAo,Sce,IAo,Vqe,ko,Ty,NAo,Ii,qAo,uD,jAo,DAo,bD,GAo,OAo,VAo,My,XAo,Rce,zAo,WAo,QAo,st,Ey,HAo,Pce,UAo,JAo,Ni,YAo,Bce,KAo,ZAo,vD,eyo,oyo,ryo,O1,tyo,Ze,Cy,ayo,Ice,nyo,syo,ka,lyo,Nce,iyo,dyo,qce,cyo,fyo,jce,myo,gyo,hyo,Q,V1,Dce,pyo,_yo,FD,uyo,byo,vyo,X1,Gce,Fyo,Tyo,TD,Myo,Eyo,Cyo,z1,Oce,wyo,Ayo,MD,yyo,Lyo,xyo,W1,Vce,$yo,kyo,ED,Syo,Ryo,Pyo,Q1,Xce,Byo,Iyo,CD,Nyo,qyo,jyo,H1,zce,Dyo,Gyo,wD,Oyo,Vyo,Xyo,U1,Wce,zyo,Wyo,AD,Qyo,Hyo,Uyo,J1,Qce,Jyo,Yyo,yD,Kyo,Zyo,eLo,Y1,Hce,oLo,rLo,LD,tLo,aLo,nLo,K1,Uce,sLo,lLo,xD,iLo,dLo,cLo,Z1,Jce,fLo,mLo,$D,gLo,hLo,pLo,eb,Yce,_Lo,uLo,kD,bLo,vLo,FLo,ob,Kce,TLo,MLo,SD,ELo,CLo,wLo,rb,Zce,ALo,yLo,RD,LLo,xLo,$Lo,tb,efe,kLo,SLo,PD,RLo,PLo,BLo,ab,ofe,ILo,NLo,BD,qLo,jLo,DLo,nb,rfe,GLo,OLo,ID,VLo,XLo,zLo,sb,tfe,WLo,QLo,ND,HLo,ULo,JLo,lb,afe,YLo,KLo,qD,ZLo,e8o,o8o,ib,nfe,r8o,t8o,jD,a8o,n8o,s8o,db,sfe,l8o,i8o,DD,d8o,c8o,f8o,cb,lfe,m8o,g8o,GD,h8o,p8o,_8o,fb,ife,u8o,b8o,OD,v8o,F8o,T8o,mb,dfe,M8o,E8o,VD,C8o,w8o,A8o,gb,cfe,y8o,L8o,XD,x8o,$8o,k8o,hb,ffe,S8o,R8o,zD,P8o,B8o,I8o,pb,mfe,N8o,q8o,WD,j8o,D8o,G8o,_b,gfe,O8o,V8o,QD,X8o,z8o,W8o,ub,hfe,Q8o,H8o,HD,U8o,J8o,Y8o,bb,pfe,K8o,Z8o,UD,e9o,o9o,r9o,vb,_fe,t9o,a9o,ufe,n9o,s9o,l9o,Fb,bfe,i9o,d9o,JD,c9o,f9o,m9o,Tb,vfe,g9o,h9o,YD,p9o,_9o,u9o,Mb,Ffe,b9o,v9o,KD,F9o,T9o,M9o,Eb,Tfe,E9o,C9o,ZD,w9o,A9o,y9o,Cb,L9o,Mfe,x9o,$9o,Efe,k9o,S9o,wb,Xqe,qi,Ab,Cfe,wy,R9o,wfe,P9o,zqe,So,Ay,B9o,ji,I9o,eG,N9o,q9o,oG,j9o,D9o,G9o,yy,O9o,Afe,V9o,X9o,z9o,lt,Ly,W9o,yfe,Q9o,H9o,Di,U9o,Lfe,J9o,Y9o,rG,K9o,Z9o,exo,yb,oxo,eo,xy,rxo,xfe,txo,axo,Sa,nxo,$fe,sxo,lxo,kfe,ixo,dxo,Sfe,cxo,fxo,mxo,ue,Lb,Rfe,gxo,hxo,tG,pxo,_xo,uxo,xb,Pfe,bxo,vxo,aG,Fxo,Txo,Mxo,$b,Bfe,Exo,Cxo,nG,wxo,Axo,yxo,kb,Ife,Lxo,xxo,sG,$xo,kxo,Sxo,Sb,Nfe,Rxo,Pxo,lG,Bxo,Ixo,Nxo,Rb,qfe,qxo,jxo,iG,Dxo,Gxo,Oxo,Pb,jfe,Vxo,Xxo,dG,zxo,Wxo,Qxo,Bb,Dfe,Hxo,Uxo,cG,Jxo,Yxo,Kxo,Ib,Gfe,Zxo,e$o,fG,o$o,r$o,t$o,Nb,Ofe,a$o,n$o,mG,s$o,l$o,i$o,qb,Vfe,d$o,c$o,gG,f$o,m$o,g$o,jb,Xfe,h$o,p$o,hG,_$o,u$o,b$o,Db,zfe,v$o,F$o,pG,T$o,M$o,E$o,Gb,Wfe,C$o,w$o,_G,A$o,y$o,L$o,Ob,Qfe,x$o,$$o,uG,k$o,S$o,R$o,Vb,Hfe,P$o,B$o,bG,I$o,N$o,q$o,Xb,j$o,Ufe,D$o,G$o,Jfe,O$o,V$o,zb,Wqe,Gi,Wb,Yfe,$y,X$o,Kfe,z$o,Qqe,Ro,ky,W$o,Oi,Q$o,vG,H$o,U$o,FG,J$o,Y$o,K$o,Sy,Z$o,Zfe,eko,oko,rko,it,Ry,tko,eme,ako,nko,Vi,sko,ome,lko,iko,TG,dko,cko,fko,Qb,mko,oo,Py,gko,rme,hko,pko,Ra,_ko,tme,uko,bko,ame,vko,Fko,nme,Tko,Mko,Eko,N,Hb,sme,Cko,wko,MG,Ako,yko,Lko,Ub,lme,xko,$ko,EG,kko,Sko,Rko,Jb,ime,Pko,Bko,CG,Iko,Nko,qko,Yb,dme,jko,Dko,wG,Gko,Oko,Vko,Kb,cme,Xko,zko,AG,Wko,Qko,Hko,Zb,fme,Uko,Jko,yG,Yko,Kko,Zko,e2,mme,eSo,oSo,LG,rSo,tSo,aSo,o2,gme,nSo,sSo,xG,lSo,iSo,dSo,r2,hme,cSo,fSo,$G,mSo,gSo,hSo,t2,pme,pSo,_So,kG,uSo,bSo,vSo,a2,_me,FSo,TSo,SG,MSo,ESo,CSo,n2,ume,wSo,ASo,RG,ySo,LSo,xSo,s2,bme,$So,kSo,PG,SSo,RSo,PSo,l2,vme,BSo,ISo,BG,NSo,qSo,jSo,i2,Fme,DSo,GSo,IG,OSo,VSo,XSo,d2,Tme,zSo,WSo,NG,QSo,HSo,USo,c2,Mme,JSo,YSo,qG,KSo,ZSo,eRo,f2,Eme,oRo,rRo,jG,tRo,aRo,nRo,m2,Cme,sRo,lRo,DG,iRo,dRo,cRo,g2,wme,fRo,mRo,GG,gRo,hRo,pRo,h2,Ame,_Ro,uRo,OG,bRo,vRo,FRo,p2,yme,TRo,MRo,VG,ERo,CRo,wRo,_2,Lme,ARo,yRo,XG,LRo,xRo,$Ro,u2,xme,kRo,SRo,zG,RRo,PRo,BRo,b2,$me,IRo,NRo,WG,qRo,jRo,DRo,v2,kme,GRo,ORo,QG,VRo,XRo,zRo,F2,Sme,WRo,QRo,HG,HRo,URo,JRo,T2,Rme,YRo,KRo,UG,ZRo,ePo,oPo,M2,Pme,rPo,tPo,JG,aPo,nPo,sPo,E2,Bme,lPo,iPo,YG,dPo,cPo,fPo,C2,Ime,mPo,gPo,KG,hPo,pPo,_Po,w2,Nme,uPo,bPo,ZG,vPo,FPo,TPo,A2,qme,MPo,EPo,eO,CPo,wPo,APo,y2,jme,yPo,LPo,oO,xPo,$Po,kPo,L2,Dme,SPo,RPo,rO,PPo,BPo,IPo,x2,Gme,NPo,qPo,tO,jPo,DPo,GPo,$2,Ome,OPo,VPo,aO,XPo,zPo,WPo,k2,Vme,QPo,HPo,nO,UPo,JPo,YPo,S2,Xme,KPo,ZPo,sO,eBo,oBo,rBo,R2,zme,tBo,aBo,lO,nBo,sBo,lBo,P2,Wme,iBo,dBo,iO,cBo,fBo,mBo,B2,Qme,gBo,hBo,dO,pBo,_Bo,uBo,I2,Hme,bBo,vBo,cO,FBo,TBo,MBo,N2,Ume,EBo,CBo,fO,wBo,ABo,yBo,q2,Jme,LBo,xBo,mO,$Bo,kBo,SBo,j2,Yme,RBo,PBo,gO,BBo,IBo,NBo,D2,Kme,qBo,jBo,hO,DBo,GBo,OBo,G2,VBo,Zme,XBo,zBo,ege,WBo,QBo,O2,Hqe,Xi,V2,oge,By,HBo,rge,UBo,Uqe,Po,Iy,JBo,zi,YBo,pO,KBo,ZBo,_O,eIo,oIo,rIo,Ny,tIo,tge,aIo,nIo,sIo,dt,qy,lIo,age,iIo,dIo,Wi,cIo,nge,fIo,mIo,uO,gIo,hIo,pIo,X2,_Io,ro,jy,uIo,sge,bIo,vIo,Pa,FIo,lge,TIo,MIo,ige,EIo,CIo,dge,wIo,AIo,yIo,K,z2,cge,LIo,xIo,bO,$Io,kIo,SIo,W2,fge,RIo,PIo,vO,BIo,IIo,NIo,Q2,mge,qIo,jIo,FO,DIo,GIo,OIo,H2,gge,VIo,XIo,TO,zIo,WIo,QIo,U2,hge,HIo,UIo,MO,JIo,YIo,KIo,J2,pge,ZIo,eNo,EO,oNo,rNo,tNo,Y2,_ge,aNo,nNo,CO,sNo,lNo,iNo,K2,uge,dNo,cNo,wO,fNo,mNo,gNo,Z2,bge,hNo,pNo,AO,_No,uNo,bNo,e4,vge,vNo,FNo,yO,TNo,MNo,ENo,o4,Fge,CNo,wNo,LO,ANo,yNo,LNo,r4,Tge,xNo,$No,xO,kNo,SNo,RNo,t4,Mge,PNo,BNo,$O,INo,NNo,qNo,a4,Ege,jNo,DNo,kO,GNo,ONo,VNo,n4,Cge,XNo,zNo,SO,WNo,QNo,HNo,s4,wge,UNo,JNo,RO,YNo,KNo,ZNo,l4,Age,eqo,oqo,PO,rqo,tqo,aqo,i4,yge,nqo,sqo,BO,lqo,iqo,dqo,d4,Lge,cqo,fqo,IO,mqo,gqo,hqo,c4,xge,pqo,_qo,NO,uqo,bqo,vqo,f4,$ge,Fqo,Tqo,qO,Mqo,Eqo,Cqo,m4,kge,wqo,Aqo,jO,yqo,Lqo,xqo,g4,Sge,$qo,kqo,DO,Sqo,Rqo,Pqo,h4,Rge,Bqo,Iqo,GO,Nqo,qqo,jqo,p4,Pge,Dqo,Gqo,OO,Oqo,Vqo,Xqo,_4,Bge,zqo,Wqo,VO,Qqo,Hqo,Uqo,u4,Ige,Jqo,Yqo,XO,Kqo,Zqo,ejo,b4,Nge,ojo,rjo,zO,tjo,ajo,njo,v4,qge,sjo,ljo,WO,ijo,djo,cjo,F4,jge,fjo,mjo,QO,gjo,hjo,pjo,T4,_jo,Dge,ujo,bjo,Gge,vjo,Fjo,M4,Jqe,Qi,E4,Oge,Dy,Tjo,Vge,Mjo,Yqe,Bo,Gy,Ejo,Hi,Cjo,HO,wjo,Ajo,UO,yjo,Ljo,xjo,Oy,$jo,Xge,kjo,Sjo,Rjo,ct,Vy,Pjo,zge,Bjo,Ijo,Ui,Njo,Wge,qjo,jjo,JO,Djo,Gjo,Ojo,C4,Vjo,to,Xy,Xjo,Qge,zjo,Wjo,Ba,Qjo,Hge,Hjo,Ujo,Uge,Jjo,Yjo,Jge,Kjo,Zjo,eDo,Yr,w4,Yge,oDo,rDo,YO,tDo,aDo,nDo,A4,Kge,sDo,lDo,KO,iDo,dDo,cDo,y4,Zge,fDo,mDo,ZO,gDo,hDo,pDo,L4,ehe,_Do,uDo,eV,bDo,vDo,FDo,x4,ohe,TDo,MDo,oV,EDo,CDo,wDo,$4,ADo,rhe,yDo,LDo,the,xDo,$Do,k4,Kqe,Ji,S4,ahe,zy,kDo,nhe,SDo,Zqe,Io,Wy,RDo,Yi,PDo,rV,BDo,IDo,tV,NDo,qDo,jDo,Qy,DDo,she,GDo,ODo,VDo,ft,Hy,XDo,lhe,zDo,WDo,Ki,QDo,ihe,HDo,UDo,aV,JDo,YDo,KDo,R4,ZDo,ao,Uy,eGo,dhe,oGo,rGo,Ia,tGo,che,aGo,nGo,fhe,sGo,lGo,mhe,iGo,dGo,cGo,H,P4,ghe,fGo,mGo,nV,gGo,hGo,pGo,B4,hhe,_Go,uGo,sV,bGo,vGo,FGo,I4,phe,TGo,MGo,lV,EGo,CGo,wGo,N4,_he,AGo,yGo,iV,LGo,xGo,$Go,q4,uhe,kGo,SGo,dV,RGo,PGo,BGo,j4,bhe,IGo,NGo,cV,qGo,jGo,DGo,D4,vhe,GGo,OGo,fV,VGo,XGo,zGo,G4,Fhe,WGo,QGo,mV,HGo,UGo,JGo,O4,The,YGo,KGo,gV,ZGo,eOo,oOo,V4,Mhe,rOo,tOo,hV,aOo,nOo,sOo,X4,Ehe,lOo,iOo,pV,dOo,cOo,fOo,z4,Che,mOo,gOo,_V,hOo,pOo,_Oo,W4,whe,uOo,bOo,uV,vOo,FOo,TOo,Q4,Ahe,MOo,EOo,bV,COo,wOo,AOo,H4,yhe,yOo,LOo,vV,xOo,$Oo,kOo,U4,Lhe,SOo,ROo,FV,POo,BOo,IOo,J4,xhe,NOo,qOo,TV,jOo,DOo,GOo,Y4,$he,OOo,VOo,MV,XOo,zOo,WOo,K4,khe,QOo,HOo,EV,UOo,JOo,YOo,Z4,She,KOo,ZOo,CV,eVo,oVo,rVo,ev,Rhe,tVo,aVo,wV,nVo,sVo,lVo,ov,Phe,iVo,dVo,AV,cVo,fVo,mVo,rv,Bhe,gVo,hVo,yV,pVo,_Vo,uVo,tv,Ihe,bVo,vVo,LV,FVo,TVo,MVo,av,Nhe,EVo,CVo,xV,wVo,AVo,yVo,nv,qhe,LVo,xVo,$V,$Vo,kVo,SVo,sv,jhe,RVo,PVo,kV,BVo,IVo,NVo,lv,Dhe,qVo,jVo,SV,DVo,GVo,OVo,iv,Ghe,VVo,XVo,RV,zVo,WVo,QVo,dv,Ohe,HVo,UVo,PV,JVo,YVo,KVo,cv,Vhe,ZVo,eXo,BV,oXo,rXo,tXo,fv,Xhe,aXo,nXo,IV,sXo,lXo,iXo,mv,zhe,dXo,cXo,NV,fXo,mXo,gXo,gv,Whe,hXo,pXo,qV,_Xo,uXo,bXo,hv,vXo,Qhe,FXo,TXo,Hhe,MXo,EXo,pv,eje,Zi,_v,Uhe,Jy,CXo,Jhe,wXo,oje,No,Yy,AXo,ed,yXo,jV,LXo,xXo,DV,$Xo,kXo,SXo,Ky,RXo,Yhe,PXo,BXo,IXo,mt,Zy,NXo,Khe,qXo,jXo,od,DXo,Zhe,GXo,OXo,GV,VXo,XXo,zXo,uv,WXo,no,eL,QXo,epe,HXo,UXo,Na,JXo,ope,YXo,KXo,rpe,ZXo,ezo,tpe,ozo,rzo,tzo,V,bv,ape,azo,nzo,OV,szo,lzo,izo,vv,npe,dzo,czo,VV,fzo,mzo,gzo,Fv,spe,hzo,pzo,XV,_zo,uzo,bzo,Tv,lpe,vzo,Fzo,zV,Tzo,Mzo,Ezo,Mv,ipe,Czo,wzo,WV,Azo,yzo,Lzo,Ev,dpe,xzo,$zo,QV,kzo,Szo,Rzo,Cv,cpe,Pzo,Bzo,HV,Izo,Nzo,qzo,wv,fpe,jzo,Dzo,UV,Gzo,Ozo,Vzo,Av,mpe,Xzo,zzo,JV,Wzo,Qzo,Hzo,yv,gpe,Uzo,Jzo,YV,Yzo,Kzo,Zzo,Lv,hpe,eWo,oWo,KV,rWo,tWo,aWo,xv,ppe,nWo,sWo,ZV,lWo,iWo,dWo,$v,_pe,cWo,fWo,eX,mWo,gWo,hWo,kv,upe,pWo,_Wo,oX,uWo,bWo,vWo,Sv,bpe,FWo,TWo,rX,MWo,EWo,CWo,Rv,vpe,wWo,AWo,tX,yWo,LWo,xWo,Pv,Fpe,$Wo,kWo,aX,SWo,RWo,PWo,Bv,Tpe,BWo,IWo,nX,NWo,qWo,jWo,Iv,Mpe,DWo,GWo,sX,OWo,VWo,XWo,Nv,Epe,zWo,WWo,lX,QWo,HWo,UWo,qv,Cpe,JWo,YWo,iX,KWo,ZWo,eQo,jv,wpe,oQo,rQo,dX,tQo,aQo,nQo,Dv,Ape,sQo,lQo,cX,iQo,dQo,cQo,Gv,ype,fQo,mQo,fX,gQo,hQo,pQo,Ov,Lpe,_Qo,uQo,mX,bQo,vQo,FQo,Vv,xpe,TQo,MQo,gX,EQo,CQo,wQo,Xv,$pe,AQo,yQo,hX,LQo,xQo,$Qo,zv,kpe,kQo,SQo,pX,RQo,PQo,BQo,Wv,Spe,IQo,NQo,_X,qQo,jQo,DQo,Qv,Rpe,GQo,OQo,uX,VQo,XQo,zQo,Hv,Ppe,WQo,QQo,bX,HQo,UQo,JQo,Uv,Bpe,YQo,KQo,vX,ZQo,eHo,oHo,Jv,Ipe,rHo,tHo,FX,aHo,nHo,sHo,Yv,Npe,lHo,iHo,TX,dHo,cHo,fHo,Kv,qpe,mHo,gHo,MX,hHo,pHo,_Ho,Zv,jpe,uHo,bHo,EX,vHo,FHo,THo,eF,Dpe,MHo,EHo,CX,CHo,wHo,AHo,oF,Gpe,yHo,LHo,wX,xHo,$Ho,kHo,rF,Ope,SHo,RHo,AX,PHo,BHo,IHo,tF,Vpe,NHo,qHo,yX,jHo,DHo,GHo,aF,OHo,Xpe,VHo,XHo,zpe,zHo,WHo,nF,rje,rd,sF,Wpe,oL,QHo,Qpe,HHo,tje,qo,rL,UHo,td,JHo,LX,YHo,KHo,xX,ZHo,eUo,oUo,tL,rUo,Hpe,tUo,aUo,nUo,gt,aL,sUo,Upe,lUo,iUo,ad,dUo,Jpe,cUo,fUo,$X,mUo,gUo,hUo,lF,pUo,so,nL,_Uo,Ype,uUo,bUo,qa,vUo,Kpe,FUo,TUo,Zpe,MUo,EUo,e_e,CUo,wUo,AUo,o_e,iF,r_e,yUo,LUo,kX,xUo,$Uo,kUo,dF,SUo,t_e,RUo,PUo,a_e,BUo,IUo,cF,aje,nd,fF,n_e,sL,NUo,s_e,qUo,nje,jo,lL,jUo,sd,DUo,SX,GUo,OUo,RX,VUo,XUo,zUo,iL,WUo,l_e,QUo,HUo,UUo,ht,dL,JUo,i_e,YUo,KUo,ld,ZUo,d_e,eJo,oJo,PX,rJo,tJo,aJo,mF,nJo,lo,cL,sJo,c_e,lJo,iJo,ja,dJo,f_e,cJo,fJo,m_e,mJo,gJo,g_e,hJo,pJo,_Jo,Fe,gF,h_e,uJo,bJo,BX,vJo,FJo,TJo,hF,p_e,MJo,EJo,IX,CJo,wJo,AJo,pF,__e,yJo,LJo,NX,xJo,$Jo,kJo,_F,u_e,SJo,RJo,qX,PJo,BJo,IJo,Is,b_e,NJo,qJo,jX,jJo,DJo,DX,GJo,OJo,VJo,uF,v_e,XJo,zJo,GX,WJo,QJo,HJo,pt,F_e,UJo,JJo,OX,YJo,KJo,VX,ZJo,eYo,XX,oYo,rYo,tYo,bF,T_e,aYo,nYo,zX,sYo,lYo,iYo,vF,M_e,dYo,cYo,WX,fYo,mYo,gYo,FF,E_e,hYo,pYo,QX,_Yo,uYo,bYo,TF,C_e,vYo,FYo,HX,TYo,MYo,EYo,MF,w_e,CYo,wYo,UX,AYo,yYo,LYo,EF,A_e,xYo,$Yo,JX,kYo,SYo,RYo,CF,y_e,PYo,BYo,YX,IYo,NYo,qYo,wF,jYo,L_e,DYo,GYo,x_e,OYo,VYo,AF,sje,id,yF,$_e,fL,XYo,k_e,zYo,lje,Do,mL,WYo,dd,QYo,KX,HYo,UYo,ZX,JYo,YYo,KYo,gL,ZYo,S_e,eKo,oKo,rKo,_t,hL,tKo,R_e,aKo,nKo,cd,sKo,P_e,lKo,iKo,ez,dKo,cKo,fKo,LF,mKo,io,pL,gKo,B_e,hKo,pKo,Da,_Ko,I_e,uKo,bKo,N_e,vKo,FKo,q_e,TKo,MKo,EKo,j_e,xF,D_e,CKo,wKo,oz,AKo,yKo,LKo,$F,xKo,G_e,$Ko,kKo,O_e,SKo,RKo,kF,ije,fd,SF,V_e,_L,PKo,X_e,BKo,dje,Go,uL,IKo,md,NKo,rz,qKo,jKo,tz,DKo,GKo,OKo,bL,VKo,z_e,XKo,zKo,WKo,ut,vL,QKo,W_e,HKo,UKo,gd,JKo,Q_e,YKo,KKo,az,ZKo,eZo,oZo,RF,rZo,co,FL,tZo,H_e,aZo,nZo,Ga,sZo,U_e,lZo,iZo,J_e,dZo,cZo,Y_e,fZo,mZo,gZo,ke,PF,K_e,hZo,pZo,nz,_Zo,uZo,bZo,BF,Z_e,vZo,FZo,sz,TZo,MZo,EZo,IF,eue,CZo,wZo,lz,AZo,yZo,LZo,NF,oue,xZo,$Zo,iz,kZo,SZo,RZo,qF,rue,PZo,BZo,dz,IZo,NZo,qZo,jF,tue,jZo,DZo,cz,GZo,OZo,VZo,DF,aue,XZo,zZo,fz,WZo,QZo,HZo,GF,nue,UZo,JZo,mz,YZo,KZo,ZZo,OF,sue,eer,oer,gz,rer,ter,aer,VF,ner,lue,ser,ler,iue,ier,der,XF,cje,hd,zF,due,TL,cer,cue,fer,fje,Oo,ML,mer,pd,ger,hz,her,per,pz,_er,uer,ber,EL,ver,fue,Fer,Ter,Mer,bt,CL,Eer,mue,Cer,wer,_d,Aer,gue,yer,Ler,_z,xer,$er,ker,WF,Ser,fo,wL,Rer,hue,Per,Ber,Oa,Ier,pue,Ner,qer,_ue,jer,Der,uue,Ger,Oer,Ver,Kr,QF,bue,Xer,zer,uz,Wer,Qer,Her,HF,vue,Uer,Jer,bz,Yer,Ker,Zer,UF,Fue,eor,oor,vz,ror,tor,aor,JF,Tue,nor,sor,Fz,lor,ior,dor,YF,Mue,cor,mor,Tz,gor,hor,por,KF,_or,Eue,uor,bor,Cue,vor,For,ZF,mje,ud,e6,wue,AL,Tor,Aue,Mor,gje,Vo,yL,Eor,bd,Cor,Mz,wor,Aor,Ez,yor,Lor,xor,LL,$or,yue,kor,Sor,Ror,vt,xL,Por,Lue,Bor,Ior,vd,Nor,xue,qor,jor,Cz,Dor,Gor,Oor,o6,Vor,mo,$L,Xor,$ue,zor,Wor,Va,Qor,kue,Hor,Uor,Sue,Jor,Yor,Rue,Kor,Zor,err,Se,r6,Pue,orr,rrr,wz,trr,arr,nrr,t6,Bue,srr,lrr,Az,irr,drr,crr,a6,Iue,frr,mrr,yz,grr,hrr,prr,n6,Nue,_rr,urr,Lz,brr,vrr,Frr,s6,que,Trr,Mrr,xz,Err,Crr,wrr,l6,jue,Arr,yrr,$z,Lrr,xrr,$rr,i6,Due,krr,Srr,kz,Rrr,Prr,Brr,d6,Gue,Irr,Nrr,Sz,qrr,jrr,Drr,c6,Oue,Grr,Orr,Rz,Vrr,Xrr,zrr,f6,Wrr,Vue,Qrr,Hrr,Xue,Urr,Jrr,m6,hje,Fd,g6,zue,kL,Yrr,Wue,Krr,pje,Xo,SL,Zrr,Td,etr,Pz,otr,rtr,Bz,ttr,atr,ntr,RL,str,Que,ltr,itr,dtr,Ft,PL,ctr,Hue,ftr,mtr,Md,gtr,Uue,htr,ptr,Iz,_tr,utr,btr,h6,vtr,go,BL,Ftr,Jue,Ttr,Mtr,Xa,Etr,Yue,Ctr,wtr,Kue,Atr,ytr,Zue,Ltr,xtr,$tr,IL,p6,e1e,ktr,Str,Nz,Rtr,Ptr,Btr,_6,o1e,Itr,Ntr,qz,qtr,jtr,Dtr,u6,Gtr,r1e,Otr,Vtr,t1e,Xtr,ztr,b6,_je,Ed,v6,a1e,NL,Wtr,n1e,Qtr,uje,zo,qL,Htr,Cd,Utr,jz,Jtr,Ytr,Dz,Ktr,Ztr,ear,jL,oar,s1e,rar,tar,aar,Tt,DL,nar,l1e,sar,lar,wd,iar,i1e,dar,car,Gz,far,mar,gar,F6,har,ho,GL,par,d1e,_ar,uar,za,bar,c1e,Far,Tar,f1e,Mar,Ear,m1e,Car,war,Aar,Zr,T6,g1e,yar,Lar,Oz,xar,$ar,kar,M6,h1e,Sar,Rar,Vz,Par,Bar,Iar,E6,p1e,Nar,qar,Xz,jar,Dar,Gar,C6,_1e,Oar,Var,zz,Xar,zar,War,w6,u1e,Qar,Har,Wz,Uar,Jar,Yar,A6,Kar,b1e,Zar,enr,v1e,onr,rnr,y6,bje,Ad,L6,F1e,OL,tnr,T1e,anr,vje,Wo,VL,nnr,yd,snr,Qz,lnr,inr,Hz,dnr,cnr,fnr,XL,mnr,M1e,gnr,hnr,pnr,Mt,zL,_nr,E1e,unr,bnr,Ld,vnr,C1e,Fnr,Tnr,Uz,Mnr,Enr,Cnr,x6,wnr,po,WL,Anr,w1e,ynr,Lnr,Wa,xnr,A1e,$nr,knr,y1e,Snr,Rnr,L1e,Pnr,Bnr,Inr,xd,$6,x1e,Nnr,qnr,Jz,jnr,Dnr,Gnr,k6,$1e,Onr,Vnr,Yz,Xnr,znr,Wnr,S6,k1e,Qnr,Hnr,Kz,Unr,Jnr,Ynr,R6,Knr,S1e,Znr,esr,R1e,osr,rsr,P6,Fje,$d,B6,P1e,QL,tsr,B1e,asr,Tje,Qo,HL,nsr,kd,ssr,Zz,lsr,isr,eW,dsr,csr,fsr,UL,msr,I1e,gsr,hsr,psr,Et,JL,_sr,N1e,usr,bsr,Sd,vsr,q1e,Fsr,Tsr,oW,Msr,Esr,Csr,I6,wsr,_o,YL,Asr,j1e,ysr,Lsr,Qa,xsr,D1e,$sr,ksr,G1e,Ssr,Rsr,O1e,Psr,Bsr,Isr,KL,N6,V1e,Nsr,qsr,rW,jsr,Dsr,Gsr,q6,X1e,Osr,Vsr,tW,Xsr,zsr,Wsr,j6,Qsr,z1e,Hsr,Usr,W1e,Jsr,Ysr,D6,Mje,Rd,G6,Q1e,ZL,Ksr,H1e,Zsr,Eje,Ho,e8,elr,Pd,olr,aW,rlr,tlr,nW,alr,nlr,slr,o8,llr,U1e,ilr,dlr,clr,Ct,r8,flr,J1e,mlr,glr,Bd,hlr,Y1e,plr,_lr,sW,ulr,blr,vlr,O6,Flr,uo,t8,Tlr,K1e,Mlr,Elr,Ha,Clr,Z1e,wlr,Alr,ebe,ylr,Llr,obe,xlr,$lr,klr,rbe,V6,tbe,Slr,Rlr,lW,Plr,Blr,Ilr,X6,Nlr,abe,qlr,jlr,nbe,Dlr,Glr,z6,Cje,Id,W6,sbe,a8,Olr,lbe,Vlr,wje,Uo,n8,Xlr,Nd,zlr,iW,Wlr,Qlr,dW,Hlr,Ulr,Jlr,s8,Ylr,ibe,Klr,Zlr,eir,wt,l8,oir,dbe,rir,tir,qd,air,cbe,nir,sir,cW,lir,iir,dir,Q6,cir,bo,i8,fir,fbe,mir,gir,Ua,hir,mbe,pir,_ir,gbe,uir,bir,hbe,vir,Fir,Tir,Ja,H6,pbe,Mir,Eir,fW,Cir,wir,Air,U6,_be,yir,Lir,mW,xir,$ir,kir,J6,ube,Sir,Rir,gW,Pir,Bir,Iir,Y6,bbe,Nir,qir,hW,jir,Dir,Gir,K6,Oir,vbe,Vir,Xir,Fbe,zir,Wir,Z6,Aje,jd,eT,Tbe,d8,Qir,Mbe,Hir,yje,Jo,c8,Uir,Dd,Jir,pW,Yir,Kir,_W,Zir,edr,odr,f8,rdr,Ebe,tdr,adr,ndr,At,m8,sdr,Cbe,ldr,idr,Gd,ddr,wbe,cdr,fdr,uW,mdr,gdr,hdr,oT,pdr,vo,g8,_dr,Abe,udr,bdr,Ya,vdr,ybe,Fdr,Tdr,Lbe,Mdr,Edr,xbe,Cdr,wdr,Adr,$be,rT,kbe,ydr,Ldr,bW,xdr,$dr,kdr,tT,Sdr,Sbe,Rdr,Pdr,Rbe,Bdr,Idr,aT,Lje,Od,nT,Pbe,h8,Ndr,Bbe,qdr,xje,Yo,p8,jdr,Vd,Ddr,vW,Gdr,Odr,FW,Vdr,Xdr,zdr,_8,Wdr,Ibe,Qdr,Hdr,Udr,yt,u8,Jdr,Nbe,Ydr,Kdr,Xd,Zdr,qbe,ecr,ocr,TW,rcr,tcr,acr,sT,ncr,wr,b8,scr,jbe,lcr,icr,Ka,dcr,Dbe,ccr,fcr,Gbe,mcr,gcr,Obe,hcr,pcr,_cr,q,lT,Vbe,ucr,bcr,MW,vcr,Fcr,Tcr,iT,Xbe,Mcr,Ecr,EW,Ccr,wcr,Acr,dT,zbe,ycr,Lcr,CW,xcr,$cr,kcr,cT,Wbe,Scr,Rcr,wW,Pcr,Bcr,Icr,fT,Qbe,Ncr,qcr,AW,jcr,Dcr,Gcr,mT,Hbe,Ocr,Vcr,yW,Xcr,zcr,Wcr,gT,Ube,Qcr,Hcr,LW,Ucr,Jcr,Ycr,hT,Jbe,Kcr,Zcr,xW,efr,ofr,rfr,pT,Ybe,tfr,afr,$W,nfr,sfr,lfr,_T,Kbe,ifr,dfr,kW,cfr,ffr,mfr,uT,Zbe,gfr,hfr,SW,pfr,_fr,ufr,bT,e2e,bfr,vfr,RW,Ffr,Tfr,Mfr,vT,o2e,Efr,Cfr,PW,wfr,Afr,yfr,FT,r2e,Lfr,xfr,BW,$fr,kfr,Sfr,TT,t2e,Rfr,Pfr,IW,Bfr,Ifr,Nfr,MT,a2e,qfr,jfr,NW,Dfr,Gfr,Ofr,ET,n2e,Vfr,Xfr,qW,zfr,Wfr,Qfr,Ns,s2e,Hfr,Ufr,jW,Jfr,Yfr,DW,Kfr,Zfr,emr,CT,l2e,omr,rmr,GW,tmr,amr,nmr,wT,i2e,smr,lmr,OW,imr,dmr,cmr,AT,d2e,fmr,mmr,VW,gmr,hmr,pmr,yT,c2e,_mr,umr,XW,bmr,vmr,Fmr,LT,f2e,Tmr,Mmr,zW,Emr,Cmr,wmr,xT,m2e,Amr,ymr,WW,Lmr,xmr,$mr,$T,g2e,kmr,Smr,QW,Rmr,Pmr,Bmr,kT,h2e,Imr,Nmr,HW,qmr,jmr,Dmr,ST,p2e,Gmr,Omr,UW,Vmr,Xmr,zmr,RT,_2e,Wmr,Qmr,JW,Hmr,Umr,Jmr,PT,u2e,Ymr,Kmr,YW,Zmr,egr,ogr,BT,b2e,rgr,tgr,KW,agr,ngr,sgr,IT,v2e,lgr,igr,ZW,dgr,cgr,fgr,NT,F2e,mgr,ggr,eQ,hgr,pgr,_gr,qT,T2e,ugr,bgr,oQ,vgr,Fgr,Tgr,jT,M2e,Mgr,Egr,rQ,Cgr,wgr,Agr,DT,E2e,ygr,Lgr,tQ,xgr,$gr,kgr,GT,C2e,Sgr,Rgr,aQ,Pgr,Bgr,Igr,OT,w2e,Ngr,qgr,nQ,jgr,Dgr,Ggr,VT,A2e,Ogr,Vgr,sQ,Xgr,zgr,Wgr,XT,y2e,Qgr,Hgr,lQ,Ugr,Jgr,Ygr,zT,L2e,Kgr,Zgr,iQ,ehr,ohr,rhr,WT,x2e,thr,ahr,dQ,nhr,shr,lhr,QT,$2e,ihr,dhr,cQ,chr,fhr,mhr,HT,k2e,ghr,hhr,fQ,phr,_hr,uhr,UT,S2e,bhr,vhr,mQ,Fhr,Thr,Mhr,JT,R2e,Ehr,Chr,gQ,whr,Ahr,yhr,YT,P2e,Lhr,xhr,hQ,$hr,khr,Shr,KT,$je,zd,ZT,B2e,v8,Rhr,I2e,Phr,kje,Ko,F8,Bhr,Wd,Ihr,pQ,Nhr,qhr,_Q,jhr,Dhr,Ghr,T8,Ohr,N2e,Vhr,Xhr,zhr,Lt,M8,Whr,q2e,Qhr,Hhr,Qd,Uhr,j2e,Jhr,Yhr,uQ,Khr,Zhr,epr,e7,opr,Ar,E8,rpr,D2e,tpr,apr,Za,npr,G2e,spr,lpr,O2e,ipr,dpr,V2e,cpr,fpr,mpr,se,o7,X2e,gpr,hpr,bQ,ppr,_pr,upr,r7,z2e,bpr,vpr,vQ,Fpr,Tpr,Mpr,t7,W2e,Epr,Cpr,FQ,wpr,Apr,ypr,a7,Q2e,Lpr,xpr,TQ,$pr,kpr,Spr,n7,H2e,Rpr,Ppr,MQ,Bpr,Ipr,Npr,s7,U2e,qpr,jpr,EQ,Dpr,Gpr,Opr,l7,J2e,Vpr,Xpr,CQ,zpr,Wpr,Qpr,i7,Y2e,Hpr,Upr,wQ,Jpr,Ypr,Kpr,d7,K2e,Zpr,e_r,AQ,o_r,r_r,t_r,c7,Z2e,a_r,n_r,yQ,s_r,l_r,i_r,f7,e4e,d_r,c_r,LQ,f_r,m_r,g_r,m7,o4e,h_r,p_r,xQ,__r,u_r,b_r,g7,r4e,v_r,F_r,$Q,T_r,M_r,E_r,h7,t4e,C_r,w_r,kQ,A_r,y_r,L_r,p7,a4e,x_r,$_r,SQ,k_r,S_r,R_r,_7,n4e,P_r,B_r,RQ,I_r,N_r,q_r,u7,s4e,j_r,D_r,PQ,G_r,O_r,V_r,b7,l4e,X_r,z_r,BQ,W_r,Q_r,H_r,v7,i4e,U_r,J_r,IQ,Y_r,K_r,Z_r,F7,d4e,eur,our,NQ,rur,tur,aur,T7,c4e,nur,sur,qQ,lur,iur,dur,M7,f4e,cur,fur,jQ,mur,gur,hur,E7,m4e,pur,_ur,DQ,uur,bur,vur,C7,Sje,Hd,w7,g4e,C8,Fur,h4e,Tur,Rje,Zo,w8,Mur,Ud,Eur,GQ,Cur,wur,OQ,Aur,yur,Lur,A8,xur,p4e,$ur,kur,Sur,xt,y8,Rur,_4e,Pur,Bur,Jd,Iur,u4e,Nur,qur,VQ,jur,Dur,Gur,A7,Our,yr,L8,Vur,b4e,Xur,zur,en,Wur,v4e,Qur,Hur,F4e,Uur,Jur,T4e,Yur,Kur,Zur,Me,y7,M4e,e1r,o1r,XQ,r1r,t1r,a1r,L7,E4e,n1r,s1r,zQ,l1r,i1r,d1r,x7,C4e,c1r,f1r,WQ,m1r,g1r,h1r,$7,w4e,p1r,_1r,QQ,u1r,b1r,v1r,k7,A4e,F1r,T1r,HQ,M1r,E1r,C1r,S7,y4e,w1r,A1r,UQ,y1r,L1r,x1r,R7,L4e,$1r,k1r,JQ,S1r,R1r,P1r,P7,x4e,B1r,I1r,YQ,N1r,q1r,j1r,B7,$4e,D1r,G1r,KQ,O1r,V1r,X1r,I7,k4e,z1r,W1r,ZQ,Q1r,H1r,U1r,N7,S4e,J1r,Y1r,eH,K1r,Z1r,ebr,q7,R4e,obr,rbr,oH,tbr,abr,nbr,j7,Pje,Yd,D7,P4e,x8,sbr,B4e,lbr,Bje,er,$8,ibr,Kd,dbr,rH,cbr,fbr,tH,mbr,gbr,hbr,k8,pbr,I4e,_br,ubr,bbr,$t,S8,vbr,N4e,Fbr,Tbr,Zd,Mbr,q4e,Ebr,Cbr,aH,wbr,Abr,ybr,G7,Lbr,Lr,R8,xbr,j4e,$br,kbr,on,Sbr,D4e,Rbr,Pbr,G4e,Bbr,Ibr,O4e,Nbr,qbr,jbr,rn,O7,V4e,Dbr,Gbr,nH,Obr,Vbr,Xbr,V7,X4e,zbr,Wbr,sH,Qbr,Hbr,Ubr,X7,z4e,Jbr,Ybr,lH,Kbr,Zbr,e2r,z7,W4e,o2r,r2r,iH,t2r,a2r,n2r,W7,Ije,ec,Q7,Q4e,P8,s2r,H4e,l2r,Nje,or,B8,i2r,oc,d2r,dH,c2r,f2r,cH,m2r,g2r,h2r,I8,p2r,U4e,_2r,u2r,b2r,kt,N8,v2r,J4e,F2r,T2r,rc,M2r,Y4e,E2r,C2r,fH,w2r,A2r,y2r,H7,L2r,xr,q8,x2r,K4e,$2r,k2r,tn,S2r,Z4e,R2r,P2r,eve,B2r,I2r,ove,N2r,q2r,j2r,ie,U7,rve,D2r,G2r,mH,O2r,V2r,X2r,J7,tve,z2r,W2r,gH,Q2r,H2r,U2r,Y7,ave,J2r,Y2r,hH,K2r,Z2r,e4r,K7,nve,o4r,r4r,pH,t4r,a4r,n4r,Z7,sve,s4r,l4r,_H,i4r,d4r,c4r,eM,lve,f4r,m4r,uH,g4r,h4r,p4r,oM,ive,_4r,u4r,bH,b4r,v4r,F4r,rM,dve,T4r,M4r,vH,E4r,C4r,w4r,tM,cve,A4r,y4r,FH,L4r,x4r,$4r,aM,fve,k4r,S4r,TH,R4r,P4r,B4r,nM,mve,I4r,N4r,MH,q4r,j4r,D4r,sM,gve,G4r,O4r,EH,V4r,X4r,z4r,lM,hve,W4r,Q4r,CH,H4r,U4r,J4r,iM,pve,Y4r,K4r,wH,Z4r,evr,ovr,dM,_ve,rvr,tvr,AH,avr,nvr,svr,cM,uve,lvr,ivr,yH,dvr,cvr,fvr,fM,bve,mvr,gvr,LH,hvr,pvr,_vr,mM,vve,uvr,bvr,xH,vvr,Fvr,Tvr,gM,Fve,Mvr,Evr,$H,Cvr,wvr,Avr,hM,Tve,yvr,Lvr,kH,xvr,$vr,kvr,pM,qje,tc,_M,Mve,j8,Svr,Eve,Rvr,jje,rr,D8,Pvr,ac,Bvr,SH,Ivr,Nvr,RH,qvr,jvr,Dvr,G8,Gvr,Cve,Ovr,Vvr,Xvr,St,O8,zvr,wve,Wvr,Qvr,nc,Hvr,Ave,Uvr,Jvr,PH,Yvr,Kvr,Zvr,uM,eFr,$r,V8,oFr,yve,rFr,tFr,an,aFr,Lve,nFr,sFr,xve,lFr,iFr,$ve,dFr,cFr,fFr,ye,bM,kve,mFr,gFr,BH,hFr,pFr,_Fr,vM,Sve,uFr,bFr,IH,vFr,FFr,TFr,FM,Rve,MFr,EFr,NH,CFr,wFr,AFr,TM,Pve,yFr,LFr,qH,xFr,$Fr,kFr,MM,Bve,SFr,RFr,jH,PFr,BFr,IFr,EM,Ive,NFr,qFr,DH,jFr,DFr,GFr,CM,Nve,OFr,VFr,GH,XFr,zFr,WFr,wM,qve,QFr,HFr,OH,UFr,JFr,YFr,AM,jve,KFr,ZFr,VH,e6r,o6r,r6r,yM,Dve,t6r,a6r,XH,n6r,s6r,l6r,LM,Dje,sc,xM,Gve,X8,i6r,Ove,d6r,Gje,tr,z8,c6r,lc,f6r,zH,m6r,g6r,WH,h6r,p6r,_6r,W8,u6r,Vve,b6r,v6r,F6r,Rt,Q8,T6r,Xve,M6r,E6r,ic,C6r,zve,w6r,A6r,QH,y6r,L6r,x6r,$M,$6r,kr,H8,k6r,Wve,S6r,R6r,nn,P6r,Qve,B6r,I6r,Hve,N6r,q6r,Uve,j6r,D6r,G6r,oe,kM,Jve,O6r,V6r,HH,X6r,z6r,W6r,SM,Yve,Q6r,H6r,UH,U6r,J6r,Y6r,RM,Kve,K6r,Z6r,JH,eTr,oTr,rTr,PM,Zve,tTr,aTr,YH,nTr,sTr,lTr,BM,eFe,iTr,dTr,KH,cTr,fTr,mTr,IM,oFe,gTr,hTr,ZH,pTr,_Tr,uTr,NM,rFe,bTr,vTr,eU,FTr,TTr,MTr,qM,tFe,ETr,CTr,oU,wTr,ATr,yTr,jM,aFe,LTr,xTr,rU,$Tr,kTr,STr,DM,nFe,RTr,PTr,tU,BTr,ITr,NTr,GM,sFe,qTr,jTr,aU,DTr,GTr,OTr,OM,lFe,VTr,XTr,nU,zTr,WTr,QTr,VM,iFe,HTr,UTr,sU,JTr,YTr,KTr,XM,dFe,ZTr,e7r,lU,o7r,r7r,t7r,zM,cFe,a7r,n7r,iU,s7r,l7r,i7r,WM,fFe,d7r,c7r,dU,f7r,m7r,g7r,QM,mFe,h7r,p7r,cU,_7r,u7r,b7r,HM,gFe,v7r,F7r,fU,T7r,M7r,E7r,UM,hFe,C7r,w7r,mU,A7r,y7r,L7r,JM,pFe,x7r,$7r,gU,k7r,S7r,R7r,YM,_Fe,P7r,B7r,hU,I7r,N7r,q7r,KM,uFe,j7r,D7r,pU,G7r,O7r,V7r,ZM,bFe,X7r,z7r,_U,W7r,Q7r,H7r,eE,vFe,U7r,J7r,uU,Y7r,K7r,Z7r,oE,FFe,eMr,oMr,bU,rMr,tMr,aMr,rE,TFe,nMr,sMr,vU,lMr,iMr,dMr,tE,Oje,dc,aE,MFe,U8,cMr,EFe,fMr,Vje,ar,J8,mMr,cc,gMr,FU,hMr,pMr,TU,_Mr,uMr,bMr,Y8,vMr,CFe,FMr,TMr,MMr,Pt,K8,EMr,wFe,CMr,wMr,fc,AMr,AFe,yMr,LMr,MU,xMr,$Mr,kMr,nE,SMr,Sr,Z8,RMr,yFe,PMr,BMr,sn,IMr,LFe,NMr,qMr,xFe,jMr,DMr,$Fe,GMr,OMr,VMr,pe,sE,kFe,XMr,zMr,EU,WMr,QMr,HMr,lE,SFe,UMr,JMr,CU,YMr,KMr,ZMr,iE,RFe,eEr,oEr,wU,rEr,tEr,aEr,dE,PFe,nEr,sEr,AU,lEr,iEr,dEr,cE,BFe,cEr,fEr,yU,mEr,gEr,hEr,fE,IFe,pEr,_Er,LU,uEr,bEr,vEr,mE,NFe,FEr,TEr,xU,MEr,EEr,CEr,gE,qFe,wEr,AEr,$U,yEr,LEr,xEr,hE,jFe,$Er,kEr,kU,SEr,REr,PEr,pE,DFe,BEr,IEr,SU,NEr,qEr,jEr,_E,GFe,DEr,GEr,RU,OEr,VEr,XEr,uE,OFe,zEr,WEr,PU,QEr,HEr,UEr,bE,VFe,JEr,YEr,BU,KEr,ZEr,eCr,vE,XFe,oCr,rCr,IU,tCr,aCr,nCr,FE,zFe,sCr,lCr,NU,iCr,dCr,cCr,TE,WFe,fCr,mCr,qU,gCr,hCr,pCr,ME,QFe,_Cr,uCr,jU,bCr,vCr,FCr,EE,Xje,mc,CE,HFe,e9,TCr,UFe,MCr,zje,nr,o9,ECr,gc,CCr,DU,wCr,ACr,GU,yCr,LCr,xCr,r9,$Cr,JFe,kCr,SCr,RCr,Bt,t9,PCr,YFe,BCr,ICr,hc,NCr,KFe,qCr,jCr,OU,DCr,GCr,OCr,wE,VCr,Rr,a9,XCr,ZFe,zCr,WCr,ln,QCr,e6e,HCr,UCr,o6e,JCr,YCr,r6e,KCr,ZCr,e5r,n9,AE,t6e,o5r,r5r,VU,t5r,a5r,n5r,yE,a6e,s5r,l5r,XU,i5r,d5r,c5r,LE,Wje,pc,xE,n6e,s9,f5r,s6e,m5r,Qje,sr,l9,g5r,_c,h5r,zU,p5r,_5r,WU,u5r,b5r,v5r,i9,F5r,l6e,T5r,M5r,E5r,It,d9,C5r,i6e,w5r,A5r,uc,y5r,d6e,L5r,x5r,QU,$5r,k5r,S5r,$E,R5r,Pr,c9,P5r,c6e,B5r,I5r,dn,N5r,f6e,q5r,j5r,m6e,D5r,G5r,g6e,O5r,V5r,X5r,h6e,kE,p6e,z5r,W5r,HU,Q5r,H5r,U5r,SE,Hje,bc,RE,_6e,f9,J5r,u6e,Y5r,Uje,lr,m9,K5r,vc,Z5r,UU,e3r,o3r,JU,r3r,t3r,a3r,g9,n3r,b6e,s3r,l3r,i3r,Nt,h9,d3r,v6e,c3r,f3r,Fc,m3r,F6e,g3r,h3r,YU,p3r,_3r,u3r,PE,b3r,Br,p9,v3r,T6e,F3r,T3r,cn,M3r,M6e,E3r,C3r,E6e,w3r,A3r,C6e,y3r,L3r,x3r,de,BE,w6e,$3r,k3r,KU,S3r,R3r,P3r,IE,A6e,B3r,I3r,ZU,N3r,q3r,j3r,NE,y6e,D3r,G3r,eJ,O3r,V3r,X3r,qE,L6e,z3r,W3r,oJ,Q3r,H3r,U3r,jE,x6e,J3r,Y3r,rJ,K3r,Z3r,ewr,DE,$6e,owr,rwr,tJ,twr,awr,nwr,GE,k6e,swr,lwr,aJ,iwr,dwr,cwr,OE,S6e,fwr,mwr,nJ,gwr,hwr,pwr,VE,R6e,_wr,uwr,sJ,bwr,vwr,Fwr,XE,P6e,Twr,Mwr,lJ,Ewr,Cwr,wwr,zE,B6e,Awr,ywr,iJ,Lwr,xwr,$wr,WE,I6e,kwr,Swr,dJ,Rwr,Pwr,Bwr,QE,N6e,Iwr,Nwr,cJ,qwr,jwr,Dwr,HE,q6e,Gwr,Owr,fJ,Vwr,Xwr,zwr,UE,j6e,Wwr,Qwr,mJ,Hwr,Uwr,Jwr,JE,D6e,Ywr,Kwr,gJ,Zwr,e0r,o0r,YE,G6e,r0r,t0r,hJ,a0r,n0r,s0r,KE,O6e,l0r,i0r,pJ,d0r,c0r,f0r,ZE,V6e,m0r,g0r,_J,h0r,p0r,_0r,eC,X6e,u0r,b0r,uJ,v0r,F0r,T0r,oC,Jje,Tc,rC,z6e,_9,M0r,W6e,E0r,Yje,ir,u9,C0r,Mc,w0r,bJ,A0r,y0r,vJ,L0r,x0r,$0r,b9,k0r,Q6e,S0r,R0r,P0r,qt,v9,B0r,H6e,I0r,N0r,Ec,q0r,U6e,j0r,D0r,FJ,G0r,O0r,V0r,tC,X0r,Ir,F9,z0r,J6e,W0r,Q0r,fn,H0r,Y6e,U0r,J0r,K6e,Y0r,K0r,Z6e,Z0r,eAr,oAr,ce,aC,eTe,rAr,tAr,TJ,aAr,nAr,sAr,nC,oTe,lAr,iAr,MJ,dAr,cAr,fAr,sC,rTe,mAr,gAr,EJ,hAr,pAr,_Ar,lC,tTe,uAr,bAr,CJ,vAr,FAr,TAr,iC,aTe,MAr,EAr,wJ,CAr,wAr,AAr,dC,nTe,yAr,LAr,AJ,xAr,$Ar,kAr,cC,sTe,SAr,RAr,yJ,PAr,BAr,IAr,fC,lTe,NAr,qAr,LJ,jAr,DAr,GAr,mC,iTe,OAr,VAr,xJ,XAr,zAr,WAr,gC,dTe,QAr,HAr,$J,UAr,JAr,YAr,hC,cTe,KAr,ZAr,kJ,eyr,oyr,ryr,pC,fTe,tyr,ayr,SJ,nyr,syr,lyr,_C,mTe,iyr,dyr,RJ,cyr,fyr,myr,uC,gTe,gyr,hyr,PJ,pyr,_yr,uyr,bC,hTe,byr,vyr,BJ,Fyr,Tyr,Myr,vC,pTe,Eyr,Cyr,IJ,wyr,Ayr,yyr,FC,_Te,Lyr,xyr,NJ,$yr,kyr,Syr,TC,uTe,Ryr,Pyr,qJ,Byr,Iyr,Nyr,MC,bTe,qyr,jyr,jJ,Dyr,Gyr,Oyr,EC,vTe,Vyr,Xyr,DJ,zyr,Wyr,Qyr,CC,Kje,Cc,wC,FTe,T9,Hyr,TTe,Uyr,Zje,dr,M9,Jyr,wc,Yyr,GJ,Kyr,Zyr,OJ,eLr,oLr,rLr,E9,tLr,MTe,aLr,nLr,sLr,jt,C9,lLr,ETe,iLr,dLr,Ac,cLr,CTe,fLr,mLr,VJ,gLr,hLr,pLr,AC,_Lr,Nr,w9,uLr,wTe,bLr,vLr,mn,FLr,ATe,TLr,MLr,yTe,ELr,CLr,LTe,wLr,ALr,yLr,xTe,yC,$Te,LLr,xLr,XJ,$Lr,kLr,SLr,LC,eDe,yc,xC,kTe,A9,RLr,STe,PLr,oDe,cr,y9,BLr,Lc,ILr,zJ,NLr,qLr,WJ,jLr,DLr,GLr,L9,OLr,RTe,VLr,XLr,zLr,Dt,x9,WLr,PTe,QLr,HLr,xc,ULr,BTe,JLr,YLr,QJ,KLr,ZLr,e8r,$C,o8r,qr,$9,r8r,ITe,t8r,a8r,gn,n8r,NTe,s8r,l8r,qTe,i8r,d8r,jTe,c8r,f8r,m8r,DTe,kC,GTe,g8r,h8r,HJ,p8r,_8r,u8r,SC,rDe,$c,RC,OTe,k9,b8r,VTe,v8r,tDe,fr,S9,F8r,kc,T8r,UJ,M8r,E8r,JJ,C8r,w8r,A8r,R9,y8r,XTe,L8r,x8r,$8r,Gt,P9,k8r,zTe,S8r,R8r,Sc,P8r,WTe,B8r,I8r,YJ,N8r,q8r,j8r,PC,D8r,jr,B9,G8r,QTe,O8r,V8r,hn,X8r,HTe,z8r,W8r,UTe,Q8r,H8r,JTe,U8r,J8r,Y8r,te,BC,YTe,K8r,Z8r,KJ,e9r,o9r,r9r,IC,KTe,t9r,a9r,ZJ,n9r,s9r,l9r,NC,ZTe,i9r,d9r,eY,c9r,f9r,m9r,qC,e7e,g9r,h9r,oY,p9r,_9r,u9r,jC,o7e,b9r,v9r,rY,F9r,T9r,M9r,DC,r7e,E9r,C9r,tY,w9r,A9r,y9r,GC,t7e,L9r,x9r,aY,$9r,k9r,S9r,OC,a7e,R9r,P9r,nY,B9r,I9r,N9r,VC,n7e,q9r,j9r,sY,D9r,G9r,O9r,XC,s7e,V9r,X9r,lY,z9r,W9r,Q9r,zC,l7e,H9r,U9r,iY,J9r,Y9r,K9r,WC,i7e,Z9r,exr,dY,oxr,rxr,txr,QC,d7e,axr,nxr,cY,sxr,lxr,ixr,HC,c7e,dxr,cxr,fY,fxr,mxr,gxr,UC,f7e,hxr,pxr,mY,_xr,uxr,bxr,JC,m7e,vxr,Fxr,gY,Txr,Mxr,Exr,YC,g7e,Cxr,wxr,hY,Axr,yxr,Lxr,KC,h7e,xxr,$xr,pY,kxr,Sxr,Rxr,ZC,p7e,Pxr,Bxr,_Y,Ixr,Nxr,qxr,e5,_7e,jxr,Dxr,uY,Gxr,Oxr,Vxr,o5,u7e,Xxr,zxr,bY,Wxr,Qxr,Hxr,r5,b7e,Uxr,Jxr,vY,Yxr,Kxr,Zxr,t5,v7e,e$r,o$r,FY,r$r,t$r,a$r,a5,F7e,n$r,s$r,TY,l$r,i$r,d$r,n5,T7e,c$r,f$r,MY,m$r,g$r,h$r,s5,aDe,Rc,l5,M7e,I9,p$r,E7e,_$r,nDe,mr,N9,u$r,Pc,b$r,EY,v$r,F$r,CY,T$r,M$r,E$r,q9,C$r,C7e,w$r,A$r,y$r,Ot,j9,L$r,w7e,x$r,$$r,Bc,k$r,A7e,S$r,R$r,wY,P$r,B$r,I$r,i5,N$r,Dr,D9,q$r,y7e,j$r,D$r,pn,G$r,L7e,O$r,V$r,x7e,X$r,z$r,$7e,W$r,Q$r,H$r,Re,d5,k7e,U$r,J$r,AY,Y$r,K$r,Z$r,c5,S7e,ekr,okr,yY,rkr,tkr,akr,f5,R7e,nkr,skr,LY,lkr,ikr,dkr,m5,P7e,ckr,fkr,xY,mkr,gkr,hkr,g5,B7e,pkr,_kr,$Y,ukr,bkr,vkr,h5,I7e,Fkr,Tkr,kY,Mkr,Ekr,Ckr,p5,N7e,wkr,Akr,SY,ykr,Lkr,xkr,_5,q7e,$kr,kkr,RY,Skr,Rkr,Pkr,u5,j7e,Bkr,Ikr,PY,Nkr,qkr,jkr,b5,sDe,Ic,v5,D7e,G9,Dkr,G7e,Gkr,lDe,gr,O9,Okr,Nc,Vkr,BY,Xkr,zkr,IY,Wkr,Qkr,Hkr,V9,Ukr,O7e,Jkr,Ykr,Kkr,Vt,X9,Zkr,V7e,eSr,oSr,qc,rSr,X7e,tSr,aSr,NY,nSr,sSr,lSr,F5,iSr,Gr,z9,dSr,z7e,cSr,fSr,_n,mSr,W7e,gSr,hSr,Q7e,pSr,_Sr,H7e,uSr,bSr,vSr,Ee,T5,U7e,FSr,TSr,qY,MSr,ESr,CSr,M5,J7e,wSr,ASr,jY,ySr,LSr,xSr,E5,Y7e,$Sr,kSr,DY,SSr,RSr,PSr,C5,K7e,BSr,ISr,GY,NSr,qSr,jSr,w5,Z7e,DSr,GSr,OY,OSr,VSr,XSr,A5,eMe,zSr,WSr,VY,QSr,HSr,USr,y5,oMe,JSr,YSr,XY,KSr,ZSr,eRr,L5,rMe,oRr,rRr,zY,tRr,aRr,nRr,x5,tMe,sRr,lRr,WY,iRr,dRr,cRr,$5,aMe,fRr,mRr,QY,gRr,hRr,pRr,k5,nMe,_Rr,uRr,HY,bRr,vRr,FRr,S5,sMe,TRr,MRr,UY,ERr,CRr,wRr,R5,iDe,jc,P5,lMe,W9,ARr,iMe,yRr,dDe,hr,Q9,LRr,Dc,xRr,JY,$Rr,kRr,YY,SRr,RRr,PRr,H9,BRr,dMe,IRr,NRr,qRr,Xt,U9,jRr,cMe,DRr,GRr,Gc,ORr,fMe,VRr,XRr,KY,zRr,WRr,QRr,B5,HRr,Or,J9,URr,mMe,JRr,YRr,un,KRr,gMe,ZRr,ePr,hMe,oPr,rPr,pMe,tPr,aPr,nPr,Le,I5,_Me,sPr,lPr,ZY,iPr,dPr,cPr,N5,uMe,fPr,mPr,eK,gPr,hPr,pPr,q5,bMe,_Pr,uPr,oK,bPr,vPr,FPr,j5,vMe,TPr,MPr,rK,EPr,CPr,wPr,D5,FMe,APr,yPr,tK,LPr,xPr,$Pr,G5,TMe,kPr,SPr,aK,RPr,PPr,BPr,O5,MMe,IPr,NPr,nK,qPr,jPr,DPr,V5,EMe,GPr,OPr,sK,VPr,XPr,zPr,X5,CMe,WPr,QPr,lK,HPr,UPr,JPr,z5,wMe,YPr,KPr,iK,ZPr,eBr,oBr,W5,cDe,Oc,Q5,AMe,Y9,rBr,yMe,tBr,fDe,pr,K9,aBr,Vc,nBr,dK,sBr,lBr,cK,iBr,dBr,cBr,Z9,fBr,LMe,mBr,gBr,hBr,zt,ex,pBr,xMe,_Br,uBr,Xc,bBr,$Me,vBr,FBr,fK,TBr,MBr,EBr,H5,CBr,Vr,ox,wBr,kMe,ABr,yBr,bn,LBr,SMe,xBr,$Br,RMe,kBr,SBr,PMe,RBr,PBr,BBr,Pe,U5,BMe,IBr,NBr,mK,qBr,jBr,DBr,J5,IMe,GBr,OBr,gK,VBr,XBr,zBr,Y5,NMe,WBr,QBr,hK,HBr,UBr,JBr,K5,qMe,YBr,KBr,pK,ZBr,eIr,oIr,Z5,jMe,rIr,tIr,_K,aIr,nIr,sIr,e3,DMe,lIr,iIr,uK,dIr,cIr,fIr,o3,GMe,mIr,gIr,bK,hIr,pIr,_Ir,r3,OMe,uIr,bIr,vK,vIr,FIr,TIr,t3,VMe,MIr,EIr,FK,CIr,wIr,AIr,a3,mDe,zc,n3,XMe,rx,yIr,zMe,LIr,gDe,_r,tx,xIr,Wc,$Ir,TK,kIr,SIr,MK,RIr,PIr,BIr,ax,IIr,WMe,NIr,qIr,jIr,Wt,nx,DIr,QMe,GIr,OIr,Qc,VIr,HMe,XIr,zIr,EK,WIr,QIr,HIr,s3,UIr,Xr,sx,JIr,UMe,YIr,KIr,vn,ZIr,JMe,eNr,oNr,YMe,rNr,tNr,KMe,aNr,nNr,sNr,xe,l3,ZMe,lNr,iNr,CK,dNr,cNr,fNr,i3,eEe,mNr,gNr,wK,hNr,pNr,_Nr,d3,oEe,uNr,bNr,AK,vNr,FNr,TNr,c3,rEe,MNr,ENr,yK,CNr,wNr,ANr,f3,tEe,yNr,LNr,LK,xNr,$Nr,kNr,m3,aEe,SNr,RNr,xK,PNr,BNr,INr,g3,nEe,NNr,qNr,$K,jNr,DNr,GNr,h3,sEe,ONr,VNr,kK,XNr,zNr,WNr,p3,lEe,QNr,HNr,SK,UNr,JNr,YNr,_3,iEe,KNr,ZNr,RK,eqr,oqr,rqr,u3,hDe,Hc,b3,dEe,lx,tqr,cEe,aqr,pDe,ur,ix,nqr,Uc,sqr,PK,lqr,iqr,BK,dqr,cqr,fqr,dx,mqr,fEe,gqr,hqr,pqr,Qt,cx,_qr,mEe,uqr,bqr,Jc,vqr,gEe,Fqr,Tqr,IK,Mqr,Eqr,Cqr,v3,wqr,zr,fx,Aqr,hEe,yqr,Lqr,Fn,xqr,pEe,$qr,kqr,_Ee,Sqr,Rqr,uEe,Pqr,Bqr,Iqr,$e,F3,bEe,Nqr,qqr,NK,jqr,Dqr,Gqr,T3,vEe,Oqr,Vqr,qK,Xqr,zqr,Wqr,M3,FEe,Qqr,Hqr,jK,Uqr,Jqr,Yqr,E3,TEe,Kqr,Zqr,DK,ejr,ojr,rjr,C3,MEe,tjr,ajr,GK,njr,sjr,ljr,w3,EEe,ijr,djr,OK,cjr,fjr,mjr,A3,CEe,gjr,hjr,VK,pjr,_jr,ujr,y3,wEe,bjr,vjr,XK,Fjr,Tjr,Mjr,L3,AEe,Ejr,Cjr,zK,wjr,Ajr,yjr,x3,yEe,Ljr,xjr,WK,$jr,kjr,Sjr,$3,_De,Yc,k3,LEe,mx,Rjr,xEe,Pjr,uDe,br,gx,Bjr,Kc,Ijr,QK,Njr,qjr,HK,jjr,Djr,Gjr,hx,Ojr,$Ee,Vjr,Xjr,zjr,Ht,px,Wjr,kEe,Qjr,Hjr,Zc,Ujr,SEe,Jjr,Yjr,UK,Kjr,Zjr,eDr,S3,oDr,Wr,_x,rDr,REe,tDr,aDr,Tn,nDr,PEe,sDr,lDr,BEe,iDr,dDr,IEe,cDr,fDr,mDr,De,R3,NEe,gDr,hDr,JK,pDr,_Dr,uDr,P3,qEe,bDr,vDr,YK,FDr,TDr,MDr,B3,jEe,EDr,CDr,KK,wDr,ADr,yDr,I3,DEe,LDr,xDr,ZK,$Dr,kDr,SDr,N3,GEe,RDr,PDr,eZ,BDr,IDr,NDr,q3,OEe,qDr,jDr,oZ,DDr,GDr,ODr,j3,VEe,VDr,XDr,rZ,zDr,WDr,QDr,D3,XEe,HDr,UDr,tZ,JDr,YDr,KDr,G3,bDe,ef,O3,zEe,ux,ZDr,WEe,eGr,vDe,vr,bx,oGr,of,rGr,aZ,tGr,aGr,nZ,nGr,sGr,lGr,vx,iGr,QEe,dGr,cGr,fGr,Ut,Fx,mGr,HEe,gGr,hGr,rf,pGr,UEe,_Gr,uGr,sZ,bGr,vGr,FGr,V3,TGr,Qr,Tx,MGr,JEe,EGr,CGr,Mn,wGr,YEe,AGr,yGr,KEe,LGr,xGr,ZEe,$Gr,kGr,SGr,Ge,X3,eCe,RGr,PGr,lZ,BGr,IGr,NGr,z3,oCe,qGr,jGr,iZ,DGr,GGr,OGr,W3,rCe,VGr,XGr,dZ,zGr,WGr,QGr,Q3,tCe,HGr,UGr,cZ,JGr,YGr,KGr,H3,aCe,ZGr,eOr,fZ,oOr,rOr,tOr,U3,nCe,aOr,nOr,mZ,sOr,lOr,iOr,J3,sCe,dOr,cOr,gZ,fOr,mOr,gOr,Y3,lCe,hOr,pOr,hZ,_Or,uOr,bOr,K3,FDe,tf,Z3,iCe,Mx,vOr,dCe,FOr,TDe,Fr,Ex,TOr,af,MOr,pZ,EOr,COr,_Z,wOr,AOr,yOr,Cx,LOr,cCe,xOr,$Or,kOr,Jt,wx,SOr,fCe,ROr,POr,nf,BOr,mCe,IOr,NOr,uZ,qOr,jOr,DOr,ew,GOr,Hr,Ax,OOr,gCe,VOr,XOr,En,zOr,hCe,WOr,QOr,pCe,HOr,UOr,_Ce,JOr,YOr,KOr,uCe,ow,bCe,ZOr,eVr,bZ,oVr,rVr,tVr,rw,MDe,sf,tw,vCe,yx,aVr,FCe,nVr,EDe,Tr,Lx,sVr,lf,lVr,vZ,iVr,dVr,FZ,cVr,fVr,mVr,xx,gVr,TCe,hVr,pVr,_Vr,Yt,$x,uVr,MCe,bVr,vVr,df,FVr,ECe,TVr,MVr,TZ,EVr,CVr,wVr,aw,AVr,Ur,kx,yVr,CCe,LVr,xVr,Cn,$Vr,wCe,kVr,SVr,ACe,RVr,PVr,yCe,BVr,IVr,NVr,Sx,nw,LCe,qVr,jVr,MZ,DVr,GVr,OVr,sw,xCe,VVr,XVr,EZ,zVr,WVr,QVr,lw,CDe,cf,iw,$Ce,Rx,HVr,kCe,UVr,wDe,Mr,Px,JVr,ff,YVr,CZ,KVr,ZVr,wZ,eXr,oXr,rXr,Bx,tXr,SCe,aXr,nXr,sXr,Kt,Ix,lXr,RCe,iXr,dXr,mf,cXr,PCe,fXr,mXr,AZ,gXr,hXr,pXr,dw,_Xr,Jr,Nx,uXr,BCe,bXr,vXr,wn,FXr,ICe,TXr,MXr,NCe,EXr,CXr,qCe,wXr,AXr,yXr,jCe,cw,DCe,LXr,xXr,yZ,$Xr,kXr,SXr,fw,ADe;return d=new re({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),RA=new re({}),PA=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Tf=new RXr({props:{warning:!0,$$slots:{default:[ykt]},$$scope:{ctx:L}}}),BA=new re({}),IA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/configuration_auto.py#L587"}}),jA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/configuration_auto.py#L610"}}),wg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[Lkt]},$$scope:{ctx:L}}}),DA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/configuration_auto.py#L733"}}),GA=new re({}),OA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/tokenization_auto.py#L391"}}),zA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17146/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/tokenization_auto.py#L405"}}),sh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[xkt]},$$scope:{ctx:L}}}),WA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/tokenization_auto.py#L604"}}),QA=new re({}),HA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/feature_extraction_auto.py#L191"}}),YA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17146/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/feature_extraction_auto.py#L205"}}),jh=new RXr({props:{$$slots:{default:[$kt]},$$scope:{ctx:L}}}),Dh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[kkt]},$$scope:{ctx:L}}}),KA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/feature_extraction_auto.py#L332"}}),ZA=new re({}),ey=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/processing_auto.py#L89"}}),ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/processing_auto.py#L103"}}),lp=new RXr({props:{$$slots:{default:[Skt]},$$scope:{ctx:L}}}),ip=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[Rkt]},$$scope:{ctx:L}}}),ay=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/processing_auto.py#L256"}}),ny=new re({}),sy=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L738"}}),iy=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/greaselm#transformers.GreaseLMConfig">GreaseLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/greaselm#transformers.GreaseLMModel">GreaseLMModel</a> (GreaseLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),fp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[Pkt]},$$scope:{ctx:L}}}),dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),lu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[Bkt]},$$scope:{ctx:L}}}),cy=new re({}),fy=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L745"}}),gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),du=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[Ikt]},$$scope:{ctx:L}}}),hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),Zu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Nkt]},$$scope:{ctx:L}}}),py=new re({}),_y=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L760"}}),by=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),o1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[qkt]},$$scope:{ctx:L}}}),vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),D1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[jkt]},$$scope:{ctx:L}}}),Fy=new re({}),Ty=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L767"}}),Ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),O1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[Dkt]},$$scope:{ctx:L}}}),Cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),wb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Gkt]},$$scope:{ctx:L}}}),wy=new re({}),Ay=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L774"}}),Ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),yb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Okt]},$$scope:{ctx:L}}}),xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),zb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Vkt]},$$scope:{ctx:L}}}),$y=new re({}),ky=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L783"}}),Ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),Qb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[Xkt]},$$scope:{ctx:L}}}),Py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),O2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[zkt]},$$scope:{ctx:L}}}),By=new re({}),Iy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L817"}}),qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/greaselm#transformers.GreaseLMConfig">GreaseLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/greaselm#transformers.GreaseLMForMultipleChoice">GreaseLMForMultipleChoice</a> (GreaseLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),X2=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[Wkt]},$$scope:{ctx:L}}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),M4=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Qkt]},$$scope:{ctx:L}}}),Dy=new re({}),Gy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L824"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),C4=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Hkt]},$$scope:{ctx:L}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),k4=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Ukt]},$$scope:{ctx:L}}}),zy=new re({}),Wy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L810"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),R4=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Jkt]},$$scope:{ctx:L}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),pv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Ykt]},$$scope:{ctx:L}}}),Jy=new re({}),Yy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L792"}}),Zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),uv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Kkt]},$$scope:{ctx:L}}}),eL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),nF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Zkt]},$$scope:{ctx:L}}}),oL=new re({}),rL=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L799"}}),aL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),lF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[eSt]},$$scope:{ctx:L}}}),nL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),cF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[oSt]},$$scope:{ctx:L}}}),sL=new re({}),lL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L833"}}),dL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17146/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17146/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17146/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),mF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[rSt]},$$scope:{ctx:L}}}),cL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),AF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[tSt]},$$scope:{ctx:L}}}),fL=new re({}),mL=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L872"}}),hL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),LF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[aSt]},$$scope:{ctx:L}}}),pL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),kF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[nSt]},$$scope:{ctx:L}}}),_L=new re({}),uL=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L879"}}),vL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),RF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[sSt]},$$scope:{ctx:L}}}),FL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),XF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[lSt]},$$scope:{ctx:L}}}),TL=new re({}),ML=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L902"}}),CL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),WF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[iSt]},$$scope:{ctx:L}}}),wL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),ZF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[dSt]},$$scope:{ctx:L}}}),AL=new re({}),yL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L886"}}),xL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),o6=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[cSt]},$$scope:{ctx:L}}}),$L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),m6=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[fSt]},$$scope:{ctx:L}}}),kL=new re({}),SL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L893"}}),PL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),h6=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[mSt]},$$scope:{ctx:L}}}),BL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),b6=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[gSt]},$$scope:{ctx:L}}}),NL=new re({}),qL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L911"}}),DL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),F6=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[hSt]},$$scope:{ctx:L}}}),GL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),y6=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[pSt]},$$scope:{ctx:L}}}),OL=new re({}),VL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L918"}}),zL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),x6=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[_St]},$$scope:{ctx:L}}}),WL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),P6=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[uSt]},$$scope:{ctx:L}}}),QL=new re({}),HL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L865"}}),JL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),I6=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[bSt]},$$scope:{ctx:L}}}),YL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),D6=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[vSt]},$$scope:{ctx:L}}}),ZL=new re({}),e8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L840"}}),r8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),O6=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[FSt]},$$scope:{ctx:L}}}),t8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),z6=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[TSt]},$$scope:{ctx:L}}}),a8=new re({}),n8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L847"}}),l8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),Q6=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[MSt]},$$scope:{ctx:L}}}),i8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),Z6=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[ESt]},$$scope:{ctx:L}}}),d8=new re({}),c8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L856"}}),m8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),oT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[CSt]},$$scope:{ctx:L}}}),g8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),aT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[wSt]},$$scope:{ctx:L}}}),h8=new re({}),p8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),u8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),sT=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[ASt]},$$scope:{ctx:L}}}),b8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),KT=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[ySt]},$$scope:{ctx:L}}}),v8=new re({}),F8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),M8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),e7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[LSt]},$$scope:{ctx:L}}}),E8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),C7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[xSt]},$$scope:{ctx:L}}}),C8=new re({}),w8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),y8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),A7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[$St]},$$scope:{ctx:L}}}),L8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),j7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[kSt]},$$scope:{ctx:L}}}),x8=new re({}),$8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),S8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),G7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[SSt]},$$scope:{ctx:L}}}),R8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),W7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[RSt]},$$scope:{ctx:L}}}),P8=new re({}),B8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),N8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),H7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[PSt]},$$scope:{ctx:L}}}),q8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),pM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[BSt]},$$scope:{ctx:L}}}),j8=new re({}),D8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),O8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),uM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[ISt]},$$scope:{ctx:L}}}),V8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),LM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[NSt]},$$scope:{ctx:L}}}),X8=new re({}),z8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),Q8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),$M=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[qSt]},$$scope:{ctx:L}}}),H8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),tE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[jSt]},$$scope:{ctx:L}}}),U8=new re({}),J8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),K8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),nE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[DSt]},$$scope:{ctx:L}}}),Z8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),EE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[GSt]},$$scope:{ctx:L}}}),e9=new re({}),o9=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),t9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),wE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[OSt]},$$scope:{ctx:L}}}),a9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),LE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[VSt]},$$scope:{ctx:L}}}),s9=new re({}),l9=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),d9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),$E=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[XSt]},$$scope:{ctx:L}}}),c9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),SE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[zSt]},$$scope:{ctx:L}}}),f9=new re({}),m9=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),h9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),PE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[WSt]},$$scope:{ctx:L}}}),p9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),oC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[QSt]},$$scope:{ctx:L}}}),_9=new re({}),u9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),v9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),tC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[HSt]},$$scope:{ctx:L}}}),F9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),CC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[USt]},$$scope:{ctx:L}}}),T9=new re({}),M9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),C9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),AC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[JSt]},$$scope:{ctx:L}}}),w9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),LC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[YSt]},$$scope:{ctx:L}}}),A9=new re({}),y9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),x9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),$C=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[KSt]},$$scope:{ctx:L}}}),$9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),SC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[ZSt]},$$scope:{ctx:L}}}),k9=new re({}),S9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),P9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),PC=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[eRt]},$$scope:{ctx:L}}}),B9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),s5=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[oRt]},$$scope:{ctx:L}}}),I9=new re({}),N9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),j9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),i5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[rRt]},$$scope:{ctx:L}}}),D9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),b5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[tRt]},$$scope:{ctx:L}}}),G9=new re({}),O9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),X9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),F5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[aRt]},$$scope:{ctx:L}}}),z9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),R5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[nRt]},$$scope:{ctx:L}}}),W9=new re({}),Q9=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),U9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),B5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[sRt]},$$scope:{ctx:L}}}),J9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),W5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[lRt]},$$scope:{ctx:L}}}),Y9=new re({}),K9=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),ex=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),H5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[iRt]},$$scope:{ctx:L}}}),ox=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),a3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[dRt]},$$scope:{ctx:L}}}),rx=new re({}),tx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),nx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),s3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[cRt]},$$scope:{ctx:L}}}),sx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),u3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[fRt]},$$scope:{ctx:L}}}),lx=new re({}),ix=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),cx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),v3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[mRt]},$$scope:{ctx:L}}}),fx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),$3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[gRt]},$$scope:{ctx:L}}}),mx=new re({}),gx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),px=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),S3=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[hRt]},$$scope:{ctx:L}}}),_x=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),G3=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[pRt]},$$scope:{ctx:L}}}),ux=new re({}),bx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),Fx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),V3=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[_Rt]},$$scope:{ctx:L}}}),Tx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),K3=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[uRt]},$$scope:{ctx:L}}}),Mx=new re({}),Ex=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),wx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),ew=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[bRt]},$$scope:{ctx:L}}}),Ax=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),rw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[vRt]},$$scope:{ctx:L}}}),yx=new re({}),Lx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),$x=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),aw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[FRt]},$$scope:{ctx:L}}}),kx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),lw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[TRt]},$$scope:{ctx:L}}}),Rx=new re({}),Px=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),Ix=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),dw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[MRt]},$$scope:{ctx:L}}}),Nx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),fw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[ERt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),mi=o("Auto Classes"),_f=l(),rt=a("p"),gi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),hi=a("code"),xA=o("from_pretrained()"),uf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),pi=o("Instantiating one of "),yn=a("a"),$A=o("AutoConfig"),Ln=o(", "),xn=a("a"),kA=o("AutoModel"),_i=o(`, and
`),$n=a("a"),SA=o("AutoTokenizer"),ui=o(" will directly create a class of the relevant architecture. For instance"),bf=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),K$=o("will create a model that is an instance of "),bi=a("a"),Z$=o("BertModel"),ek=o("."),Eo=l(),wa=a("p"),ok=o("There is one class of "),vf=a("code"),rk=o("AutoModel"),POe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Eqe=l(),vi=a("h2"),Ff=a("a"),Foe=a("span"),F(RA.$$.fragment),BOe=l(),Toe=a("span"),IOe=o("Extending the Auto Classes"),Cqe=l(),kn=a("p"),NOe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Moe=a("code"),qOe=o("NewModel"),jOe=o(", make sure you have a "),Eoe=a("code"),DOe=o("NewModelConfig"),GOe=o(` then you can add those to the auto
classes like this:`),wqe=l(),F(PA.$$.fragment),Aqe=l(),tk=a("p"),OOe=o("You will then be able to use the auto classes like you would usually do!"),yqe=l(),F(Tf.$$.fragment),Lqe=l(),Fi=a("h2"),Mf=a("a"),Coe=a("span"),F(BA.$$.fragment),VOe=l(),woe=a("span"),XOe=o("AutoConfig"),xqe=l(),Co=a("div"),F(IA.$$.fragment),zOe=l(),NA=a("p"),WOe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),ak=a("a"),QOe=o("from_pretrained()"),HOe=o(" class method."),UOe=l(),qA=a("p"),JOe=o("This class cannot be instantiated directly using "),Aoe=a("code"),YOe=o("__init__()"),KOe=o(" (throws an error)."),ZOe=l(),Er=a("div"),F(jA.$$.fragment),eVe=l(),yoe=a("p"),oVe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),rVe=l(),Ti=a("p"),tVe=o("The configuration class to instantiate is selected based on the "),Loe=a("code"),aVe=o("model_type"),nVe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),xoe=a("code"),sVe=o("pretrained_model_name_or_path"),lVe=o(":"),iVe=l(),A=a("ul"),Ef=a("li"),$oe=a("strong"),dVe=o("albert"),cVe=o(" \u2014 "),nk=a("a"),fVe=o("AlbertConfig"),mVe=o(" (ALBERT model)"),gVe=l(),Cf=a("li"),koe=a("strong"),hVe=o("bart"),pVe=o(" \u2014 "),sk=a("a"),_Ve=o("BartConfig"),uVe=o(" (BART model)"),bVe=l(),wf=a("li"),Soe=a("strong"),vVe=o("beit"),FVe=o(" \u2014 "),lk=a("a"),TVe=o("BeitConfig"),MVe=o(" (BEiT model)"),EVe=l(),Af=a("li"),Roe=a("strong"),CVe=o("bert"),wVe=o(" \u2014 "),ik=a("a"),AVe=o("BertConfig"),yVe=o(" (BERT model)"),LVe=l(),yf=a("li"),Poe=a("strong"),xVe=o("bert-generation"),$Ve=o(" \u2014 "),dk=a("a"),kVe=o("BertGenerationConfig"),SVe=o(" (Bert Generation model)"),RVe=l(),Lf=a("li"),Boe=a("strong"),PVe=o("big_bird"),BVe=o(" \u2014 "),ck=a("a"),IVe=o("BigBirdConfig"),NVe=o(" (BigBird model)"),qVe=l(),xf=a("li"),Ioe=a("strong"),jVe=o("bigbird_pegasus"),DVe=o(" \u2014 "),fk=a("a"),GVe=o("BigBirdPegasusConfig"),OVe=o(" (BigBirdPegasus model)"),VVe=l(),$f=a("li"),Noe=a("strong"),XVe=o("blenderbot"),zVe=o(" \u2014 "),mk=a("a"),WVe=o("BlenderbotConfig"),QVe=o(" (Blenderbot model)"),HVe=l(),kf=a("li"),qoe=a("strong"),UVe=o("blenderbot-small"),JVe=o(" \u2014 "),gk=a("a"),YVe=o("BlenderbotSmallConfig"),KVe=o(" (BlenderbotSmall model)"),ZVe=l(),Sf=a("li"),joe=a("strong"),eXe=o("camembert"),oXe=o(" \u2014 "),hk=a("a"),rXe=o("CamembertConfig"),tXe=o(" (CamemBERT model)"),aXe=l(),Rf=a("li"),Doe=a("strong"),nXe=o("canine"),sXe=o(" \u2014 "),pk=a("a"),lXe=o("CanineConfig"),iXe=o(" (Canine model)"),dXe=l(),Pf=a("li"),Goe=a("strong"),cXe=o("clip"),fXe=o(" \u2014 "),_k=a("a"),mXe=o("CLIPConfig"),gXe=o(" (CLIP model)"),hXe=l(),Bf=a("li"),Ooe=a("strong"),pXe=o("convbert"),_Xe=o(" \u2014 "),uk=a("a"),uXe=o("ConvBertConfig"),bXe=o(" (ConvBERT model)"),vXe=l(),If=a("li"),Voe=a("strong"),FXe=o("convnext"),TXe=o(" \u2014 "),bk=a("a"),MXe=o("ConvNextConfig"),EXe=o(" (ConvNext model)"),CXe=l(),Nf=a("li"),Xoe=a("strong"),wXe=o("ctrl"),AXe=o(" \u2014 "),vk=a("a"),yXe=o("CTRLConfig"),LXe=o(" (CTRL model)"),xXe=l(),qf=a("li"),zoe=a("strong"),$Xe=o("cvt"),kXe=o(" \u2014 "),Fk=a("a"),SXe=o("CvtConfig"),RXe=o(" (CvT model)"),PXe=l(),jf=a("li"),Woe=a("strong"),BXe=o("data2vec-audio"),IXe=o(" \u2014 "),Tk=a("a"),NXe=o("Data2VecAudioConfig"),qXe=o(" (Data2VecAudio model)"),jXe=l(),Df=a("li"),Qoe=a("strong"),DXe=o("data2vec-text"),GXe=o(" \u2014 "),Mk=a("a"),OXe=o("Data2VecTextConfig"),VXe=o(" (Data2VecText model)"),XXe=l(),Gf=a("li"),Hoe=a("strong"),zXe=o("data2vec-vision"),WXe=o(" \u2014 "),Ek=a("a"),QXe=o("Data2VecVisionConfig"),HXe=o(" (Data2VecVision model)"),UXe=l(),Of=a("li"),Uoe=a("strong"),JXe=o("deberta"),YXe=o(" \u2014 "),Ck=a("a"),KXe=o("DebertaConfig"),ZXe=o(" (DeBERTa model)"),eze=l(),Vf=a("li"),Joe=a("strong"),oze=o("deberta-v2"),rze=o(" \u2014 "),wk=a("a"),tze=o("DebertaV2Config"),aze=o(" (DeBERTa-v2 model)"),nze=l(),Xf=a("li"),Yoe=a("strong"),sze=o("decision_transformer"),lze=o(" \u2014 "),Ak=a("a"),ize=o("DecisionTransformerConfig"),dze=o(" (Decision Transformer model)"),cze=l(),zf=a("li"),Koe=a("strong"),fze=o("deit"),mze=o(" \u2014 "),yk=a("a"),gze=o("DeiTConfig"),hze=o(" (DeiT model)"),pze=l(),Wf=a("li"),Zoe=a("strong"),_ze=o("detr"),uze=o(" \u2014 "),Lk=a("a"),bze=o("DetrConfig"),vze=o(" (DETR model)"),Fze=l(),Qf=a("li"),ere=a("strong"),Tze=o("distilbert"),Mze=o(" \u2014 "),xk=a("a"),Eze=o("DistilBertConfig"),Cze=o(" (DistilBERT model)"),wze=l(),Hf=a("li"),ore=a("strong"),Aze=o("dpr"),yze=o(" \u2014 "),$k=a("a"),Lze=o("DPRConfig"),xze=o(" (DPR model)"),$ze=l(),Uf=a("li"),rre=a("strong"),kze=o("dpt"),Sze=o(" \u2014 "),kk=a("a"),Rze=o("DPTConfig"),Pze=o(" (DPT model)"),Bze=l(),Jf=a("li"),tre=a("strong"),Ize=o("electra"),Nze=o(" \u2014 "),Sk=a("a"),qze=o("ElectraConfig"),jze=o(" (ELECTRA model)"),Dze=l(),Yf=a("li"),are=a("strong"),Gze=o("encoder-decoder"),Oze=o(" \u2014 "),Rk=a("a"),Vze=o("EncoderDecoderConfig"),Xze=o(" (Encoder decoder model)"),zze=l(),Kf=a("li"),nre=a("strong"),Wze=o("flaubert"),Qze=o(" \u2014 "),Pk=a("a"),Hze=o("FlaubertConfig"),Uze=o(" (FlauBERT model)"),Jze=l(),Zf=a("li"),sre=a("strong"),Yze=o("flava"),Kze=o(" \u2014 "),Bk=a("a"),Zze=o("FlavaConfig"),eWe=o(" (Flava model)"),oWe=l(),em=a("li"),lre=a("strong"),rWe=o("fnet"),tWe=o(" \u2014 "),Ik=a("a"),aWe=o("FNetConfig"),nWe=o(" (FNet model)"),sWe=l(),om=a("li"),ire=a("strong"),lWe=o("fsmt"),iWe=o(" \u2014 "),Nk=a("a"),dWe=o("FSMTConfig"),cWe=o(" (FairSeq Machine-Translation model)"),fWe=l(),rm=a("li"),dre=a("strong"),mWe=o("funnel"),gWe=o(" \u2014 "),qk=a("a"),hWe=o("FunnelConfig"),pWe=o(" (Funnel Transformer model)"),_We=l(),tm=a("li"),cre=a("strong"),uWe=o("glpn"),bWe=o(" \u2014 "),jk=a("a"),vWe=o("GLPNConfig"),FWe=o(" (GLPN model)"),TWe=l(),am=a("li"),fre=a("strong"),MWe=o("gpt2"),EWe=o(" \u2014 "),Dk=a("a"),CWe=o("GPT2Config"),wWe=o(" (OpenAI GPT-2 model)"),AWe=l(),nm=a("li"),mre=a("strong"),yWe=o("gpt_neo"),LWe=o(" \u2014 "),Gk=a("a"),xWe=o("GPTNeoConfig"),$We=o(" (GPT Neo model)"),kWe=l(),sm=a("li"),gre=a("strong"),SWe=o("gpt_neox"),RWe=o(" \u2014 "),Ok=a("a"),PWe=o("GPTNeoXConfig"),BWe=o(" (GPT NeoX model)"),IWe=l(),lm=a("li"),hre=a("strong"),NWe=o("gptj"),qWe=o(" \u2014 "),Vk=a("a"),jWe=o("GPTJConfig"),DWe=o(" (GPT-J model)"),GWe=l(),im=a("li"),pre=a("strong"),OWe=o("greaselm"),VWe=o(" \u2014 "),Xk=a("a"),XWe=o("GreaseLMConfig"),zWe=o(" (GreaseLM model)"),WWe=l(),dm=a("li"),_re=a("strong"),QWe=o("hubert"),HWe=o(" \u2014 "),zk=a("a"),UWe=o("HubertConfig"),JWe=o(" (Hubert model)"),YWe=l(),cm=a("li"),ure=a("strong"),KWe=o("ibert"),ZWe=o(" \u2014 "),Wk=a("a"),eQe=o("IBertConfig"),oQe=o(" (I-BERT model)"),rQe=l(),fm=a("li"),bre=a("strong"),tQe=o("imagegpt"),aQe=o(" \u2014 "),Qk=a("a"),nQe=o("ImageGPTConfig"),sQe=o(" (ImageGPT model)"),lQe=l(),mm=a("li"),vre=a("strong"),iQe=o("layoutlm"),dQe=o(" \u2014 "),Hk=a("a"),cQe=o("LayoutLMConfig"),fQe=o(" (LayoutLM model)"),mQe=l(),gm=a("li"),Fre=a("strong"),gQe=o("layoutlmv2"),hQe=o(" \u2014 "),Uk=a("a"),pQe=o("LayoutLMv2Config"),_Qe=o(" (LayoutLMv2 model)"),uQe=l(),hm=a("li"),Tre=a("strong"),bQe=o("layoutlmv3"),vQe=o(" \u2014 "),Jk=a("a"),FQe=o("LayoutLMv3Config"),TQe=o(" (LayoutLMv3 model)"),MQe=l(),pm=a("li"),Mre=a("strong"),EQe=o("led"),CQe=o(" \u2014 "),Yk=a("a"),wQe=o("LEDConfig"),AQe=o(" (LED model)"),yQe=l(),_m=a("li"),Ere=a("strong"),LQe=o("longformer"),xQe=o(" \u2014 "),Kk=a("a"),$Qe=o("LongformerConfig"),kQe=o(" (Longformer model)"),SQe=l(),um=a("li"),Cre=a("strong"),RQe=o("luke"),PQe=o(" \u2014 "),Zk=a("a"),BQe=o("LukeConfig"),IQe=o(" (LUKE model)"),NQe=l(),bm=a("li"),wre=a("strong"),qQe=o("lxmert"),jQe=o(" \u2014 "),eS=a("a"),DQe=o("LxmertConfig"),GQe=o(" (LXMERT model)"),OQe=l(),vm=a("li"),Are=a("strong"),VQe=o("m2m_100"),XQe=o(" \u2014 "),oS=a("a"),zQe=o("M2M100Config"),WQe=o(" (M2M100 model)"),QQe=l(),Fm=a("li"),yre=a("strong"),HQe=o("marian"),UQe=o(" \u2014 "),rS=a("a"),JQe=o("MarianConfig"),YQe=o(" (Marian model)"),KQe=l(),Tm=a("li"),Lre=a("strong"),ZQe=o("maskformer"),eHe=o(" \u2014 "),tS=a("a"),oHe=o("MaskFormerConfig"),rHe=o(" (MaskFormer model)"),tHe=l(),Mm=a("li"),xre=a("strong"),aHe=o("mbart"),nHe=o(" \u2014 "),aS=a("a"),sHe=o("MBartConfig"),lHe=o(" (mBART model)"),iHe=l(),Em=a("li"),$re=a("strong"),dHe=o("megatron-bert"),cHe=o(" \u2014 "),nS=a("a"),fHe=o("MegatronBertConfig"),mHe=o(" (MegatronBert model)"),gHe=l(),Cm=a("li"),kre=a("strong"),hHe=o("mobilebert"),pHe=o(" \u2014 "),sS=a("a"),_He=o("MobileBertConfig"),uHe=o(" (MobileBERT model)"),bHe=l(),wm=a("li"),Sre=a("strong"),vHe=o("mpnet"),FHe=o(" \u2014 "),lS=a("a"),THe=o("MPNetConfig"),MHe=o(" (MPNet model)"),EHe=l(),Am=a("li"),Rre=a("strong"),CHe=o("mt5"),wHe=o(" \u2014 "),iS=a("a"),AHe=o("MT5Config"),yHe=o(" (mT5 model)"),LHe=l(),ym=a("li"),Pre=a("strong"),xHe=o("nystromformer"),$He=o(" \u2014 "),dS=a("a"),kHe=o("NystromformerConfig"),SHe=o(" (Nystromformer model)"),RHe=l(),Lm=a("li"),Bre=a("strong"),PHe=o("openai-gpt"),BHe=o(" \u2014 "),cS=a("a"),IHe=o("OpenAIGPTConfig"),NHe=o(" (OpenAI GPT model)"),qHe=l(),xm=a("li"),Ire=a("strong"),jHe=o("opt"),DHe=o(" \u2014 "),fS=a("a"),GHe=o("OPTConfig"),OHe=o(" (OPT model)"),VHe=l(),$m=a("li"),Nre=a("strong"),XHe=o("pegasus"),zHe=o(" \u2014 "),mS=a("a"),WHe=o("PegasusConfig"),QHe=o(" (Pegasus model)"),HHe=l(),km=a("li"),qre=a("strong"),UHe=o("perceiver"),JHe=o(" \u2014 "),gS=a("a"),YHe=o("PerceiverConfig"),KHe=o(" (Perceiver model)"),ZHe=l(),Sm=a("li"),jre=a("strong"),eUe=o("plbart"),oUe=o(" \u2014 "),hS=a("a"),rUe=o("PLBartConfig"),tUe=o(" (PLBart model)"),aUe=l(),Rm=a("li"),Dre=a("strong"),nUe=o("poolformer"),sUe=o(" \u2014 "),pS=a("a"),lUe=o("PoolFormerConfig"),iUe=o(" (PoolFormer model)"),dUe=l(),Pm=a("li"),Gre=a("strong"),cUe=o("prophetnet"),fUe=o(" \u2014 "),_S=a("a"),mUe=o("ProphetNetConfig"),gUe=o(" (ProphetNet model)"),hUe=l(),Bm=a("li"),Ore=a("strong"),pUe=o("qdqbert"),_Ue=o(" \u2014 "),uS=a("a"),uUe=o("QDQBertConfig"),bUe=o(" (QDQBert model)"),vUe=l(),Im=a("li"),Vre=a("strong"),FUe=o("rag"),TUe=o(" \u2014 "),bS=a("a"),MUe=o("RagConfig"),EUe=o(" (RAG model)"),CUe=l(),Nm=a("li"),Xre=a("strong"),wUe=o("realm"),AUe=o(" \u2014 "),vS=a("a"),yUe=o("RealmConfig"),LUe=o(" (Realm model)"),xUe=l(),qm=a("li"),zre=a("strong"),$Ue=o("reformer"),kUe=o(" \u2014 "),FS=a("a"),SUe=o("ReformerConfig"),RUe=o(" (Reformer model)"),PUe=l(),jm=a("li"),Wre=a("strong"),BUe=o("regnet"),IUe=o(" \u2014 "),TS=a("a"),NUe=o("RegNetConfig"),qUe=o(" (RegNet model)"),jUe=l(),Dm=a("li"),Qre=a("strong"),DUe=o("rembert"),GUe=o(" \u2014 "),MS=a("a"),OUe=o("RemBertConfig"),VUe=o(" (RemBERT model)"),XUe=l(),Gm=a("li"),Hre=a("strong"),zUe=o("resnet"),WUe=o(" \u2014 "),ES=a("a"),QUe=o("ResNetConfig"),HUe=o(" (ResNet model)"),UUe=l(),Om=a("li"),Ure=a("strong"),JUe=o("retribert"),YUe=o(" \u2014 "),CS=a("a"),KUe=o("RetriBertConfig"),ZUe=o(" (RetriBERT model)"),eJe=l(),Vm=a("li"),Jre=a("strong"),oJe=o("roberta"),rJe=o(" \u2014 "),wS=a("a"),tJe=o("RobertaConfig"),aJe=o(" (RoBERTa model)"),nJe=l(),Xm=a("li"),Yre=a("strong"),sJe=o("roformer"),lJe=o(" \u2014 "),AS=a("a"),iJe=o("RoFormerConfig"),dJe=o(" (RoFormer model)"),cJe=l(),zm=a("li"),Kre=a("strong"),fJe=o("segformer"),mJe=o(" \u2014 "),yS=a("a"),gJe=o("SegformerConfig"),hJe=o(" (SegFormer model)"),pJe=l(),Wm=a("li"),Zre=a("strong"),_Je=o("sew"),uJe=o(" \u2014 "),LS=a("a"),bJe=o("SEWConfig"),vJe=o(" (SEW model)"),FJe=l(),Qm=a("li"),ete=a("strong"),TJe=o("sew-d"),MJe=o(" \u2014 "),xS=a("a"),EJe=o("SEWDConfig"),CJe=o(" (SEW-D model)"),wJe=l(),Hm=a("li"),ote=a("strong"),AJe=o("speech-encoder-decoder"),yJe=o(" \u2014 "),$S=a("a"),LJe=o("SpeechEncoderDecoderConfig"),xJe=o(" (Speech Encoder decoder model)"),$Je=l(),Um=a("li"),rte=a("strong"),kJe=o("speech_to_text"),SJe=o(" \u2014 "),kS=a("a"),RJe=o("Speech2TextConfig"),PJe=o(" (Speech2Text model)"),BJe=l(),Jm=a("li"),tte=a("strong"),IJe=o("speech_to_text_2"),NJe=o(" \u2014 "),SS=a("a"),qJe=o("Speech2Text2Config"),jJe=o(" (Speech2Text2 model)"),DJe=l(),Ym=a("li"),ate=a("strong"),GJe=o("splinter"),OJe=o(" \u2014 "),RS=a("a"),VJe=o("SplinterConfig"),XJe=o(" (Splinter model)"),zJe=l(),Km=a("li"),nte=a("strong"),WJe=o("squeezebert"),QJe=o(" \u2014 "),PS=a("a"),HJe=o("SqueezeBertConfig"),UJe=o(" (SqueezeBERT model)"),JJe=l(),Zm=a("li"),ste=a("strong"),YJe=o("swin"),KJe=o(" \u2014 "),BS=a("a"),ZJe=o("SwinConfig"),eYe=o(" (Swin model)"),oYe=l(),eg=a("li"),lte=a("strong"),rYe=o("t5"),tYe=o(" \u2014 "),IS=a("a"),aYe=o("T5Config"),nYe=o(" (T5 model)"),sYe=l(),og=a("li"),ite=a("strong"),lYe=o("tapas"),iYe=o(" \u2014 "),NS=a("a"),dYe=o("TapasConfig"),cYe=o(" (TAPAS model)"),fYe=l(),rg=a("li"),dte=a("strong"),mYe=o("trajectory_transformer"),gYe=o(" \u2014 "),qS=a("a"),hYe=o("TrajectoryTransformerConfig"),pYe=o(" (Trajectory Transformer model)"),_Ye=l(),tg=a("li"),cte=a("strong"),uYe=o("transfo-xl"),bYe=o(" \u2014 "),jS=a("a"),vYe=o("TransfoXLConfig"),FYe=o(" (Transformer-XL model)"),TYe=l(),ag=a("li"),fte=a("strong"),MYe=o("trocr"),EYe=o(" \u2014 "),DS=a("a"),CYe=o("TrOCRConfig"),wYe=o(" (TrOCR model)"),AYe=l(),ng=a("li"),mte=a("strong"),yYe=o("unispeech"),LYe=o(" \u2014 "),GS=a("a"),xYe=o("UniSpeechConfig"),$Ye=o(" (UniSpeech model)"),kYe=l(),sg=a("li"),gte=a("strong"),SYe=o("unispeech-sat"),RYe=o(" \u2014 "),OS=a("a"),PYe=o("UniSpeechSatConfig"),BYe=o(" (UniSpeechSat model)"),IYe=l(),lg=a("li"),hte=a("strong"),NYe=o("van"),qYe=o(" \u2014 "),VS=a("a"),jYe=o("VanConfig"),DYe=o(" (VAN model)"),GYe=l(),ig=a("li"),pte=a("strong"),OYe=o("vilt"),VYe=o(" \u2014 "),XS=a("a"),XYe=o("ViltConfig"),zYe=o(" (ViLT model)"),WYe=l(),dg=a("li"),_te=a("strong"),QYe=o("vision-encoder-decoder"),HYe=o(" \u2014 "),zS=a("a"),UYe=o("VisionEncoderDecoderConfig"),JYe=o(" (Vision Encoder decoder model)"),YYe=l(),cg=a("li"),ute=a("strong"),KYe=o("vision-text-dual-encoder"),ZYe=o(" \u2014 "),WS=a("a"),eKe=o("VisionTextDualEncoderConfig"),oKe=o(" (VisionTextDualEncoder model)"),rKe=l(),fg=a("li"),bte=a("strong"),tKe=o("visual_bert"),aKe=o(" \u2014 "),QS=a("a"),nKe=o("VisualBertConfig"),sKe=o(" (VisualBert model)"),lKe=l(),mg=a("li"),vte=a("strong"),iKe=o("vit"),dKe=o(" \u2014 "),HS=a("a"),cKe=o("ViTConfig"),fKe=o(" (ViT model)"),mKe=l(),gg=a("li"),Fte=a("strong"),gKe=o("vit_mae"),hKe=o(" \u2014 "),US=a("a"),pKe=o("ViTMAEConfig"),_Ke=o(" (ViTMAE model)"),uKe=l(),hg=a("li"),Tte=a("strong"),bKe=o("wav2vec2"),vKe=o(" \u2014 "),JS=a("a"),FKe=o("Wav2Vec2Config"),TKe=o(" (Wav2Vec2 model)"),MKe=l(),pg=a("li"),Mte=a("strong"),EKe=o("wav2vec2-conformer"),CKe=o(" \u2014 "),YS=a("a"),wKe=o("Wav2Vec2ConformerConfig"),AKe=o(" (Wav2Vec2-Conformer model)"),yKe=l(),_g=a("li"),Ete=a("strong"),LKe=o("wavlm"),xKe=o(" \u2014 "),KS=a("a"),$Ke=o("WavLMConfig"),kKe=o(" (WavLM model)"),SKe=l(),ug=a("li"),Cte=a("strong"),RKe=o("xglm"),PKe=o(" \u2014 "),ZS=a("a"),BKe=o("XGLMConfig"),IKe=o(" (XGLM model)"),NKe=l(),bg=a("li"),wte=a("strong"),qKe=o("xlm"),jKe=o(" \u2014 "),eR=a("a"),DKe=o("XLMConfig"),GKe=o(" (XLM model)"),OKe=l(),vg=a("li"),Ate=a("strong"),VKe=o("xlm-prophetnet"),XKe=o(" \u2014 "),oR=a("a"),zKe=o("XLMProphetNetConfig"),WKe=o(" (XLMProphetNet model)"),QKe=l(),Fg=a("li"),yte=a("strong"),HKe=o("xlm-roberta"),UKe=o(" \u2014 "),rR=a("a"),JKe=o("XLMRobertaConfig"),YKe=o(" (XLM-RoBERTa model)"),KKe=l(),Tg=a("li"),Lte=a("strong"),ZKe=o("xlm-roberta-xl"),eZe=o(" \u2014 "),tR=a("a"),oZe=o("XLMRobertaXLConfig"),rZe=o(" (XLM-RoBERTa-XL model)"),tZe=l(),Mg=a("li"),xte=a("strong"),aZe=o("xlnet"),nZe=o(" \u2014 "),aR=a("a"),sZe=o("XLNetConfig"),lZe=o(" (XLNet model)"),iZe=l(),Eg=a("li"),$te=a("strong"),dZe=o("yolos"),cZe=o(" \u2014 "),nR=a("a"),fZe=o("YolosConfig"),mZe=o(" (YOLOS model)"),gZe=l(),Cg=a("li"),kte=a("strong"),hZe=o("yoso"),pZe=o(" \u2014 "),sR=a("a"),_Ze=o("YosoConfig"),uZe=o(" (YOSO model)"),bZe=l(),F(wg.$$.fragment),vZe=l(),Ag=a("div"),F(DA.$$.fragment),FZe=l(),Ste=a("p"),TZe=o("Register a new configuration for this class."),$qe=l(),Mi=a("h2"),yg=a("a"),Rte=a("span"),F(GA.$$.fragment),MZe=l(),Pte=a("span"),EZe=o("AutoTokenizer"),kqe=l(),wo=a("div"),F(OA.$$.fragment),CZe=l(),VA=a("p"),wZe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),lR=a("a"),AZe=o("AutoTokenizer.from_pretrained()"),yZe=o(" class method."),LZe=l(),XA=a("p"),xZe=o("This class cannot be instantiated directly using "),Bte=a("code"),$Ze=o("__init__()"),kZe=o(" (throws an error)."),SZe=l(),Cr=a("div"),F(zA.$$.fragment),RZe=l(),Ite=a("p"),PZe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),BZe=l(),Aa=a("p"),IZe=o("The tokenizer class to instantiate is selected based on the "),Nte=a("code"),NZe=o("model_type"),qZe=o(` property of the config object (either
passed as an argument or loaded from `),qte=a("code"),jZe=o("pretrained_model_name_or_path"),DZe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jte=a("code"),GZe=o("pretrained_model_name_or_path"),OZe=o(":"),VZe=l(),k=a("ul"),Sn=a("li"),Dte=a("strong"),XZe=o("albert"),zZe=o(" \u2014 "),iR=a("a"),WZe=o("AlbertTokenizer"),QZe=o(" or "),dR=a("a"),HZe=o("AlbertTokenizerFast"),UZe=o(" (ALBERT model)"),JZe=l(),Rn=a("li"),Gte=a("strong"),YZe=o("bart"),KZe=o(" \u2014 "),cR=a("a"),ZZe=o("BartTokenizer"),eeo=o(" or "),fR=a("a"),oeo=o("BartTokenizerFast"),reo=o(" (BART model)"),teo=l(),Pn=a("li"),Ote=a("strong"),aeo=o("barthez"),neo=o(" \u2014 "),mR=a("a"),seo=o("BarthezTokenizer"),leo=o(" or "),gR=a("a"),ieo=o("BarthezTokenizerFast"),deo=o(" (BARThez model)"),ceo=l(),Lg=a("li"),Vte=a("strong"),feo=o("bartpho"),meo=o(" \u2014 "),hR=a("a"),geo=o("BartphoTokenizer"),heo=o(" (BARTpho model)"),peo=l(),Bn=a("li"),Xte=a("strong"),_eo=o("bert"),ueo=o(" \u2014 "),pR=a("a"),beo=o("BertTokenizer"),veo=o(" or "),_R=a("a"),Feo=o("BertTokenizerFast"),Teo=o(" (BERT model)"),Meo=l(),xg=a("li"),zte=a("strong"),Eeo=o("bert-generation"),Ceo=o(" \u2014 "),uR=a("a"),weo=o("BertGenerationTokenizer"),Aeo=o(" (Bert Generation model)"),yeo=l(),$g=a("li"),Wte=a("strong"),Leo=o("bert-japanese"),xeo=o(" \u2014 "),bR=a("a"),$eo=o("BertJapaneseTokenizer"),keo=o(" (BertJapanese model)"),Seo=l(),kg=a("li"),Qte=a("strong"),Reo=o("bertweet"),Peo=o(" \u2014 "),vR=a("a"),Beo=o("BertweetTokenizer"),Ieo=o(" (Bertweet model)"),Neo=l(),In=a("li"),Hte=a("strong"),qeo=o("big_bird"),jeo=o(" \u2014 "),FR=a("a"),Deo=o("BigBirdTokenizer"),Geo=o(" or "),TR=a("a"),Oeo=o("BigBirdTokenizerFast"),Veo=o(" (BigBird model)"),Xeo=l(),Nn=a("li"),Ute=a("strong"),zeo=o("bigbird_pegasus"),Weo=o(" \u2014 "),MR=a("a"),Qeo=o("PegasusTokenizer"),Heo=o(" or "),ER=a("a"),Ueo=o("PegasusTokenizerFast"),Jeo=o(" (BigBirdPegasus model)"),Yeo=l(),qn=a("li"),Jte=a("strong"),Keo=o("blenderbot"),Zeo=o(" \u2014 "),CR=a("a"),eoo=o("BlenderbotTokenizer"),ooo=o(" or "),wR=a("a"),roo=o("BlenderbotTokenizerFast"),too=o(" (Blenderbot model)"),aoo=l(),Sg=a("li"),Yte=a("strong"),noo=o("blenderbot-small"),soo=o(" \u2014 "),AR=a("a"),loo=o("BlenderbotSmallTokenizer"),ioo=o(" (BlenderbotSmall model)"),doo=l(),Rg=a("li"),Kte=a("strong"),coo=o("byt5"),foo=o(" \u2014 "),yR=a("a"),moo=o("ByT5Tokenizer"),goo=o(" (ByT5 model)"),hoo=l(),jn=a("li"),Zte=a("strong"),poo=o("camembert"),_oo=o(" \u2014 "),LR=a("a"),uoo=o("CamembertTokenizer"),boo=o(" or "),xR=a("a"),voo=o("CamembertTokenizerFast"),Foo=o(" (CamemBERT model)"),Too=l(),Pg=a("li"),eae=a("strong"),Moo=o("canine"),Eoo=o(" \u2014 "),$R=a("a"),Coo=o("CanineTokenizer"),woo=o(" (Canine model)"),Aoo=l(),Dn=a("li"),oae=a("strong"),yoo=o("clip"),Loo=o(" \u2014 "),kR=a("a"),xoo=o("CLIPTokenizer"),$oo=o(" or "),SR=a("a"),koo=o("CLIPTokenizerFast"),Soo=o(" (CLIP model)"),Roo=l(),Gn=a("li"),rae=a("strong"),Poo=o("convbert"),Boo=o(" \u2014 "),RR=a("a"),Ioo=o("ConvBertTokenizer"),Noo=o(" or "),PR=a("a"),qoo=o("ConvBertTokenizerFast"),joo=o(" (ConvBERT model)"),Doo=l(),On=a("li"),tae=a("strong"),Goo=o("cpm"),Ooo=o(" \u2014 "),BR=a("a"),Voo=o("CpmTokenizer"),Xoo=o(" or "),IR=a("a"),zoo=o("CpmTokenizerFast"),Woo=o(" (CPM model)"),Qoo=l(),Bg=a("li"),aae=a("strong"),Hoo=o("ctrl"),Uoo=o(" \u2014 "),NR=a("a"),Joo=o("CTRLTokenizer"),Yoo=o(" (CTRL model)"),Koo=l(),Vn=a("li"),nae=a("strong"),Zoo=o("data2vec-text"),ero=o(" \u2014 "),qR=a("a"),oro=o("RobertaTokenizer"),rro=o(" or "),jR=a("a"),tro=o("RobertaTokenizerFast"),aro=o(" (Data2VecText model)"),nro=l(),Xn=a("li"),sae=a("strong"),sro=o("deberta"),lro=o(" \u2014 "),DR=a("a"),iro=o("DebertaTokenizer"),dro=o(" or "),GR=a("a"),cro=o("DebertaTokenizerFast"),fro=o(" (DeBERTa model)"),mro=l(),zn=a("li"),lae=a("strong"),gro=o("deberta-v2"),hro=o(" \u2014 "),OR=a("a"),pro=o("DebertaV2Tokenizer"),_ro=o(" or "),VR=a("a"),uro=o("DebertaV2TokenizerFast"),bro=o(" (DeBERTa-v2 model)"),vro=l(),Wn=a("li"),iae=a("strong"),Fro=o("distilbert"),Tro=o(" \u2014 "),XR=a("a"),Mro=o("DistilBertTokenizer"),Ero=o(" or "),zR=a("a"),Cro=o("DistilBertTokenizerFast"),wro=o(" (DistilBERT model)"),Aro=l(),Qn=a("li"),dae=a("strong"),yro=o("dpr"),Lro=o(" \u2014 "),WR=a("a"),xro=o("DPRQuestionEncoderTokenizer"),$ro=o(" or "),QR=a("a"),kro=o("DPRQuestionEncoderTokenizerFast"),Sro=o(" (DPR model)"),Rro=l(),Hn=a("li"),cae=a("strong"),Pro=o("electra"),Bro=o(" \u2014 "),HR=a("a"),Iro=o("ElectraTokenizer"),Nro=o(" or "),UR=a("a"),qro=o("ElectraTokenizerFast"),jro=o(" (ELECTRA model)"),Dro=l(),Ig=a("li"),fae=a("strong"),Gro=o("flaubert"),Oro=o(" \u2014 "),JR=a("a"),Vro=o("FlaubertTokenizer"),Xro=o(" (FlauBERT model)"),zro=l(),Un=a("li"),mae=a("strong"),Wro=o("fnet"),Qro=o(" \u2014 "),YR=a("a"),Hro=o("FNetTokenizer"),Uro=o(" or "),KR=a("a"),Jro=o("FNetTokenizerFast"),Yro=o(" (FNet model)"),Kro=l(),Ng=a("li"),gae=a("strong"),Zro=o("fsmt"),eto=o(" \u2014 "),ZR=a("a"),oto=o("FSMTTokenizer"),rto=o(" (FairSeq Machine-Translation model)"),tto=l(),Jn=a("li"),hae=a("strong"),ato=o("funnel"),nto=o(" \u2014 "),eP=a("a"),sto=o("FunnelTokenizer"),lto=o(" or "),oP=a("a"),ito=o("FunnelTokenizerFast"),dto=o(" (Funnel Transformer model)"),cto=l(),Yn=a("li"),pae=a("strong"),fto=o("gpt2"),mto=o(" \u2014 "),rP=a("a"),gto=o("GPT2Tokenizer"),hto=o(" or "),tP=a("a"),pto=o("GPT2TokenizerFast"),_to=o(" (OpenAI GPT-2 model)"),uto=l(),Kn=a("li"),_ae=a("strong"),bto=o("gpt_neo"),vto=o(" \u2014 "),aP=a("a"),Fto=o("GPT2Tokenizer"),Tto=o(" or "),nP=a("a"),Mto=o("GPT2TokenizerFast"),Eto=o(" (GPT Neo model)"),Cto=l(),qg=a("li"),uae=a("strong"),wto=o("gpt_neox"),Ato=o(" \u2014 "),sP=a("a"),yto=o("GPTNeoXTokenizerFast"),Lto=o(" (GPT NeoX model)"),xto=l(),Zn=a("li"),bae=a("strong"),$to=o("gptj"),kto=o(" \u2014 "),lP=a("a"),Sto=o("GPT2Tokenizer"),Rto=o(" or "),iP=a("a"),Pto=o("GPT2TokenizerFast"),Bto=o(" (GPT-J model)"),Ito=l(),es=a("li"),vae=a("strong"),Nto=o("greaselm"),qto=o(" \u2014 "),dP=a("a"),jto=o("RobertaTokenizer"),Dto=o(" or "),cP=a("a"),Gto=o("RobertaTokenizerFast"),Oto=o(" (GreaseLM model)"),Vto=l(),os=a("li"),Fae=a("strong"),Xto=o("herbert"),zto=o(" \u2014 "),fP=a("a"),Wto=o("HerbertTokenizer"),Qto=o(" or "),mP=a("a"),Hto=o("HerbertTokenizerFast"),Uto=o(" (HerBERT model)"),Jto=l(),jg=a("li"),Tae=a("strong"),Yto=o("hubert"),Kto=o(" \u2014 "),gP=a("a"),Zto=o("Wav2Vec2CTCTokenizer"),eao=o(" (Hubert model)"),oao=l(),rs=a("li"),Mae=a("strong"),rao=o("ibert"),tao=o(" \u2014 "),hP=a("a"),aao=o("RobertaTokenizer"),nao=o(" or "),pP=a("a"),sao=o("RobertaTokenizerFast"),lao=o(" (I-BERT model)"),iao=l(),ts=a("li"),Eae=a("strong"),dao=o("layoutlm"),cao=o(" \u2014 "),_P=a("a"),fao=o("LayoutLMTokenizer"),mao=o(" or "),uP=a("a"),gao=o("LayoutLMTokenizerFast"),hao=o(" (LayoutLM model)"),pao=l(),as=a("li"),Cae=a("strong"),_ao=o("layoutlmv2"),uao=o(" \u2014 "),bP=a("a"),bao=o("LayoutLMv2Tokenizer"),vao=o(" or "),vP=a("a"),Fao=o("LayoutLMv2TokenizerFast"),Tao=o(" (LayoutLMv2 model)"),Mao=l(),ns=a("li"),wae=a("strong"),Eao=o("layoutlmv3"),Cao=o(" \u2014 "),FP=a("a"),wao=o("LayoutLMv3Tokenizer"),Aao=o(" or "),TP=a("a"),yao=o("LayoutLMv3TokenizerFast"),Lao=o(" (LayoutLMv3 model)"),xao=l(),ss=a("li"),Aae=a("strong"),$ao=o("layoutxlm"),kao=o(" \u2014 "),MP=a("a"),Sao=o("LayoutXLMTokenizer"),Rao=o(" or "),EP=a("a"),Pao=o("LayoutXLMTokenizerFast"),Bao=o(" (LayoutXLM model)"),Iao=l(),ls=a("li"),yae=a("strong"),Nao=o("led"),qao=o(" \u2014 "),CP=a("a"),jao=o("LEDTokenizer"),Dao=o(" or "),wP=a("a"),Gao=o("LEDTokenizerFast"),Oao=o(" (LED model)"),Vao=l(),is=a("li"),Lae=a("strong"),Xao=o("longformer"),zao=o(" \u2014 "),AP=a("a"),Wao=o("LongformerTokenizer"),Qao=o(" or "),yP=a("a"),Hao=o("LongformerTokenizerFast"),Uao=o(" (Longformer model)"),Jao=l(),Dg=a("li"),xae=a("strong"),Yao=o("luke"),Kao=o(" \u2014 "),LP=a("a"),Zao=o("LukeTokenizer"),eno=o(" (LUKE model)"),ono=l(),ds=a("li"),$ae=a("strong"),rno=o("lxmert"),tno=o(" \u2014 "),xP=a("a"),ano=o("LxmertTokenizer"),nno=o(" or "),$P=a("a"),sno=o("LxmertTokenizerFast"),lno=o(" (LXMERT model)"),ino=l(),Gg=a("li"),kae=a("strong"),dno=o("m2m_100"),cno=o(" \u2014 "),kP=a("a"),fno=o("M2M100Tokenizer"),mno=o(" (M2M100 model)"),gno=l(),Og=a("li"),Sae=a("strong"),hno=o("marian"),pno=o(" \u2014 "),SP=a("a"),_no=o("MarianTokenizer"),uno=o(" (Marian model)"),bno=l(),cs=a("li"),Rae=a("strong"),vno=o("mbart"),Fno=o(" \u2014 "),RP=a("a"),Tno=o("MBartTokenizer"),Mno=o(" or "),PP=a("a"),Eno=o("MBartTokenizerFast"),Cno=o(" (mBART model)"),wno=l(),fs=a("li"),Pae=a("strong"),Ano=o("mbart50"),yno=o(" \u2014 "),BP=a("a"),Lno=o("MBart50Tokenizer"),xno=o(" or "),IP=a("a"),$no=o("MBart50TokenizerFast"),kno=o(" (mBART-50 model)"),Sno=l(),ms=a("li"),Bae=a("strong"),Rno=o("megatron-bert"),Pno=o(" \u2014 "),NP=a("a"),Bno=o("BertTokenizer"),Ino=o(" or "),qP=a("a"),Nno=o("BertTokenizerFast"),qno=o(" (MegatronBert model)"),jno=l(),Vg=a("li"),Iae=a("strong"),Dno=o("mluke"),Gno=o(" \u2014 "),jP=a("a"),Ono=o("MLukeTokenizer"),Vno=o(" (mLUKE model)"),Xno=l(),gs=a("li"),Nae=a("strong"),zno=o("mobilebert"),Wno=o(" \u2014 "),DP=a("a"),Qno=o("MobileBertTokenizer"),Hno=o(" or "),GP=a("a"),Uno=o("MobileBertTokenizerFast"),Jno=o(" (MobileBERT model)"),Yno=l(),hs=a("li"),qae=a("strong"),Kno=o("mpnet"),Zno=o(" \u2014 "),OP=a("a"),eso=o("MPNetTokenizer"),oso=o(" or "),VP=a("a"),rso=o("MPNetTokenizerFast"),tso=o(" (MPNet model)"),aso=l(),ps=a("li"),jae=a("strong"),nso=o("mt5"),sso=o(" \u2014 "),XP=a("a"),lso=o("MT5Tokenizer"),iso=o(" or "),zP=a("a"),dso=o("MT5TokenizerFast"),cso=o(" (mT5 model)"),fso=l(),_s=a("li"),Dae=a("strong"),mso=o("nystromformer"),gso=o(" \u2014 "),WP=a("a"),hso=o("AlbertTokenizer"),pso=o(" or "),QP=a("a"),_so=o("AlbertTokenizerFast"),uso=o(" (Nystromformer model)"),bso=l(),us=a("li"),Gae=a("strong"),vso=o("openai-gpt"),Fso=o(" \u2014 "),HP=a("a"),Tso=o("OpenAIGPTTokenizer"),Mso=o(" or "),UP=a("a"),Eso=o("OpenAIGPTTokenizerFast"),Cso=o(" (OpenAI GPT model)"),wso=l(),Xg=a("li"),Oae=a("strong"),Aso=o("opt"),yso=o(" \u2014 "),JP=a("a"),Lso=o("GPT2Tokenizer"),xso=o(" (OPT model)"),$so=l(),bs=a("li"),Vae=a("strong"),kso=o("pegasus"),Sso=o(" \u2014 "),YP=a("a"),Rso=o("PegasusTokenizer"),Pso=o(" or "),KP=a("a"),Bso=o("PegasusTokenizerFast"),Iso=o(" (Pegasus model)"),Nso=l(),zg=a("li"),Xae=a("strong"),qso=o("perceiver"),jso=o(" \u2014 "),ZP=a("a"),Dso=o("PerceiverTokenizer"),Gso=o(" (Perceiver model)"),Oso=l(),Wg=a("li"),zae=a("strong"),Vso=o("phobert"),Xso=o(" \u2014 "),eB=a("a"),zso=o("PhobertTokenizer"),Wso=o(" (PhoBERT model)"),Qso=l(),Qg=a("li"),Wae=a("strong"),Hso=o("plbart"),Uso=o(" \u2014 "),oB=a("a"),Jso=o("PLBartTokenizer"),Yso=o(" (PLBart model)"),Kso=l(),Hg=a("li"),Qae=a("strong"),Zso=o("prophetnet"),elo=o(" \u2014 "),rB=a("a"),olo=o("ProphetNetTokenizer"),rlo=o(" (ProphetNet model)"),tlo=l(),vs=a("li"),Hae=a("strong"),alo=o("qdqbert"),nlo=o(" \u2014 "),tB=a("a"),slo=o("BertTokenizer"),llo=o(" or "),aB=a("a"),ilo=o("BertTokenizerFast"),dlo=o(" (QDQBert model)"),clo=l(),Ug=a("li"),Uae=a("strong"),flo=o("rag"),mlo=o(" \u2014 "),nB=a("a"),glo=o("RagTokenizer"),hlo=o(" (RAG model)"),plo=l(),Fs=a("li"),Jae=a("strong"),_lo=o("realm"),ulo=o(" \u2014 "),sB=a("a"),blo=o("RealmTokenizer"),vlo=o(" or "),lB=a("a"),Flo=o("RealmTokenizerFast"),Tlo=o(" (Realm model)"),Mlo=l(),Ts=a("li"),Yae=a("strong"),Elo=o("reformer"),Clo=o(" \u2014 "),iB=a("a"),wlo=o("ReformerTokenizer"),Alo=o(" or "),dB=a("a"),ylo=o("ReformerTokenizerFast"),Llo=o(" (Reformer model)"),xlo=l(),Ms=a("li"),Kae=a("strong"),$lo=o("rembert"),klo=o(" \u2014 "),cB=a("a"),Slo=o("RemBertTokenizer"),Rlo=o(" or "),fB=a("a"),Plo=o("RemBertTokenizerFast"),Blo=o(" (RemBERT model)"),Ilo=l(),Es=a("li"),Zae=a("strong"),Nlo=o("retribert"),qlo=o(" \u2014 "),mB=a("a"),jlo=o("RetriBertTokenizer"),Dlo=o(" or "),gB=a("a"),Glo=o("RetriBertTokenizerFast"),Olo=o(" (RetriBERT model)"),Vlo=l(),Cs=a("li"),ene=a("strong"),Xlo=o("roberta"),zlo=o(" \u2014 "),hB=a("a"),Wlo=o("RobertaTokenizer"),Qlo=o(" or "),pB=a("a"),Hlo=o("RobertaTokenizerFast"),Ulo=o(" (RoBERTa model)"),Jlo=l(),ws=a("li"),one=a("strong"),Ylo=o("roformer"),Klo=o(" \u2014 "),_B=a("a"),Zlo=o("RoFormerTokenizer"),eio=o(" or "),uB=a("a"),oio=o("RoFormerTokenizerFast"),rio=o(" (RoFormer model)"),tio=l(),Jg=a("li"),rne=a("strong"),aio=o("speech_to_text"),nio=o(" \u2014 "),bB=a("a"),sio=o("Speech2TextTokenizer"),lio=o(" (Speech2Text model)"),iio=l(),Yg=a("li"),tne=a("strong"),dio=o("speech_to_text_2"),cio=o(" \u2014 "),vB=a("a"),fio=o("Speech2Text2Tokenizer"),mio=o(" (Speech2Text2 model)"),gio=l(),As=a("li"),ane=a("strong"),hio=o("splinter"),pio=o(" \u2014 "),FB=a("a"),_io=o("SplinterTokenizer"),uio=o(" or "),TB=a("a"),bio=o("SplinterTokenizerFast"),vio=o(" (Splinter model)"),Fio=l(),ys=a("li"),nne=a("strong"),Tio=o("squeezebert"),Mio=o(" \u2014 "),MB=a("a"),Eio=o("SqueezeBertTokenizer"),Cio=o(" or "),EB=a("a"),wio=o("SqueezeBertTokenizerFast"),Aio=o(" (SqueezeBERT model)"),yio=l(),Ls=a("li"),sne=a("strong"),Lio=o("t5"),xio=o(" \u2014 "),CB=a("a"),$io=o("T5Tokenizer"),kio=o(" or "),wB=a("a"),Sio=o("T5TokenizerFast"),Rio=o(" (T5 model)"),Pio=l(),Kg=a("li"),lne=a("strong"),Bio=o("tapas"),Iio=o(" \u2014 "),AB=a("a"),Nio=o("TapasTokenizer"),qio=o(" (TAPAS model)"),jio=l(),Zg=a("li"),ine=a("strong"),Dio=o("tapex"),Gio=o(" \u2014 "),yB=a("a"),Oio=o("TapexTokenizer"),Vio=o(" (TAPEX model)"),Xio=l(),eh=a("li"),dne=a("strong"),zio=o("transfo-xl"),Wio=o(" \u2014 "),LB=a("a"),Qio=o("TransfoXLTokenizer"),Hio=o(" (Transformer-XL model)"),Uio=l(),xs=a("li"),cne=a("strong"),Jio=o("visual_bert"),Yio=o(" \u2014 "),xB=a("a"),Kio=o("BertTokenizer"),Zio=o(" or "),$B=a("a"),edo=o("BertTokenizerFast"),odo=o(" (VisualBert model)"),rdo=l(),oh=a("li"),fne=a("strong"),tdo=o("wav2vec2"),ado=o(" \u2014 "),kB=a("a"),ndo=o("Wav2Vec2CTCTokenizer"),sdo=o(" (Wav2Vec2 model)"),ldo=l(),rh=a("li"),mne=a("strong"),ido=o("wav2vec2-conformer"),ddo=o(" \u2014 "),SB=a("a"),cdo=o("Wav2Vec2CTCTokenizer"),fdo=o(" (Wav2Vec2-Conformer model)"),mdo=l(),th=a("li"),gne=a("strong"),gdo=o("wav2vec2_phoneme"),hdo=o(" \u2014 "),RB=a("a"),pdo=o("Wav2Vec2PhonemeCTCTokenizer"),_do=o(" (Wav2Vec2Phoneme model)"),udo=l(),$s=a("li"),hne=a("strong"),bdo=o("xglm"),vdo=o(" \u2014 "),PB=a("a"),Fdo=o("XGLMTokenizer"),Tdo=o(" or "),BB=a("a"),Mdo=o("XGLMTokenizerFast"),Edo=o(" (XGLM model)"),Cdo=l(),ah=a("li"),pne=a("strong"),wdo=o("xlm"),Ado=o(" \u2014 "),IB=a("a"),ydo=o("XLMTokenizer"),Ldo=o(" (XLM model)"),xdo=l(),nh=a("li"),_ne=a("strong"),$do=o("xlm-prophetnet"),kdo=o(" \u2014 "),NB=a("a"),Sdo=o("XLMProphetNetTokenizer"),Rdo=o(" (XLMProphetNet model)"),Pdo=l(),ks=a("li"),une=a("strong"),Bdo=o("xlm-roberta"),Ido=o(" \u2014 "),qB=a("a"),Ndo=o("XLMRobertaTokenizer"),qdo=o(" or "),jB=a("a"),jdo=o("XLMRobertaTokenizerFast"),Ddo=o(" (XLM-RoBERTa model)"),Gdo=l(),Ss=a("li"),bne=a("strong"),Odo=o("xlm-roberta-xl"),Vdo=o(" \u2014 "),DB=a("a"),Xdo=o("RobertaTokenizer"),zdo=o(" or "),GB=a("a"),Wdo=o("RobertaTokenizerFast"),Qdo=o(" (XLM-RoBERTa-XL model)"),Hdo=l(),Rs=a("li"),vne=a("strong"),Udo=o("xlnet"),Jdo=o(" \u2014 "),OB=a("a"),Ydo=o("XLNetTokenizer"),Kdo=o(" or "),VB=a("a"),Zdo=o("XLNetTokenizerFast"),eco=o(" (XLNet model)"),oco=l(),Ps=a("li"),Fne=a("strong"),rco=o("yoso"),tco=o(" \u2014 "),XB=a("a"),aco=o("AlbertTokenizer"),nco=o(" or "),zB=a("a"),sco=o("AlbertTokenizerFast"),lco=o(" (YOSO model)"),ico=l(),F(sh.$$.fragment),dco=l(),lh=a("div"),F(WA.$$.fragment),cco=l(),Tne=a("p"),fco=o("Register a new tokenizer in this mapping."),Sqe=l(),Ei=a("h2"),ih=a("a"),Mne=a("span"),F(QA.$$.fragment),mco=l(),Ene=a("span"),gco=o("AutoFeatureExtractor"),Rqe=l(),Ao=a("div"),F(HA.$$.fragment),hco=l(),UA=a("p"),pco=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),WB=a("a"),_co=o("AutoFeatureExtractor.from_pretrained()"),uco=o(" class method."),bco=l(),JA=a("p"),vco=o("This class cannot be instantiated directly using "),Cne=a("code"),Fco=o("__init__()"),Tco=o(" (throws an error)."),Mco=l(),He=a("div"),F(YA.$$.fragment),Eco=l(),wne=a("p"),Cco=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),wco=l(),ya=a("p"),Aco=o("The feature extractor class to instantiate is selected based on the "),Ane=a("code"),yco=o("model_type"),Lco=o(` property of the config object
(either passed as an argument or loaded from `),yne=a("code"),xco=o("pretrained_model_name_or_path"),$co=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Lne=a("code"),kco=o("pretrained_model_name_or_path"),Sco=o(":"),Rco=l(),Y=a("ul"),dh=a("li"),xne=a("strong"),Pco=o("beit"),Bco=o(" \u2014 "),QB=a("a"),Ico=o("BeitFeatureExtractor"),Nco=o(" (BEiT model)"),qco=l(),ch=a("li"),$ne=a("strong"),jco=o("clip"),Dco=o(" \u2014 "),HB=a("a"),Gco=o("CLIPFeatureExtractor"),Oco=o(" (CLIP model)"),Vco=l(),fh=a("li"),kne=a("strong"),Xco=o("convnext"),zco=o(" \u2014 "),UB=a("a"),Wco=o("ConvNextFeatureExtractor"),Qco=o(" (ConvNext model)"),Hco=l(),mh=a("li"),Sne=a("strong"),Uco=o("cvt"),Jco=o(" \u2014 "),JB=a("a"),Yco=o("ConvNextFeatureExtractor"),Kco=o(" (CvT model)"),Zco=l(),gh=a("li"),Rne=a("strong"),efo=o("data2vec-audio"),ofo=o(" \u2014 "),YB=a("a"),rfo=o("Wav2Vec2FeatureExtractor"),tfo=o(" (Data2VecAudio model)"),afo=l(),hh=a("li"),Pne=a("strong"),nfo=o("data2vec-vision"),sfo=o(" \u2014 "),KB=a("a"),lfo=o("BeitFeatureExtractor"),ifo=o(" (Data2VecVision model)"),dfo=l(),ph=a("li"),Bne=a("strong"),cfo=o("deit"),ffo=o(" \u2014 "),ZB=a("a"),mfo=o("DeiTFeatureExtractor"),gfo=o(" (DeiT model)"),hfo=l(),_h=a("li"),Ine=a("strong"),pfo=o("detr"),_fo=o(" \u2014 "),eI=a("a"),ufo=o("DetrFeatureExtractor"),bfo=o(" (DETR model)"),vfo=l(),uh=a("li"),Nne=a("strong"),Ffo=o("dpt"),Tfo=o(" \u2014 "),oI=a("a"),Mfo=o("DPTFeatureExtractor"),Efo=o(" (DPT model)"),Cfo=l(),bh=a("li"),qne=a("strong"),wfo=o("flava"),Afo=o(" \u2014 "),rI=a("a"),yfo=o("FlavaFeatureExtractor"),Lfo=o(" (Flava model)"),xfo=l(),vh=a("li"),jne=a("strong"),$fo=o("glpn"),kfo=o(" \u2014 "),tI=a("a"),Sfo=o("GLPNFeatureExtractor"),Rfo=o(" (GLPN model)"),Pfo=l(),Fh=a("li"),Dne=a("strong"),Bfo=o("greaselm"),Ifo=o(" \u2014 "),aI=a("a"),Nfo=o("GreaseLMFeatureExtractor"),qfo=o(" (GreaseLM model)"),jfo=l(),Th=a("li"),Gne=a("strong"),Dfo=o("hubert"),Gfo=o(" \u2014 "),nI=a("a"),Ofo=o("Wav2Vec2FeatureExtractor"),Vfo=o(" (Hubert model)"),Xfo=l(),Mh=a("li"),One=a("strong"),zfo=o("imagegpt"),Wfo=o(" \u2014 "),sI=a("a"),Qfo=o("ImageGPTFeatureExtractor"),Hfo=o(" (ImageGPT model)"),Ufo=l(),Eh=a("li"),Vne=a("strong"),Jfo=o("layoutlmv2"),Yfo=o(" \u2014 "),lI=a("a"),Kfo=o("LayoutLMv2FeatureExtractor"),Zfo=o(" (LayoutLMv2 model)"),emo=l(),Ch=a("li"),Xne=a("strong"),omo=o("layoutlmv3"),rmo=o(" \u2014 "),iI=a("a"),tmo=o("LayoutLMv3FeatureExtractor"),amo=o(" (LayoutLMv3 model)"),nmo=l(),wh=a("li"),zne=a("strong"),smo=o("maskformer"),lmo=o(" \u2014 "),dI=a("a"),imo=o("MaskFormerFeatureExtractor"),dmo=o(" (MaskFormer model)"),cmo=l(),Ah=a("li"),Wne=a("strong"),fmo=o("perceiver"),mmo=o(" \u2014 "),cI=a("a"),gmo=o("PerceiverFeatureExtractor"),hmo=o(" (Perceiver model)"),pmo=l(),yh=a("li"),Qne=a("strong"),_mo=o("poolformer"),umo=o(" \u2014 "),fI=a("a"),bmo=o("PoolFormerFeatureExtractor"),vmo=o(" (PoolFormer model)"),Fmo=l(),Lh=a("li"),Hne=a("strong"),Tmo=o("regnet"),Mmo=o(" \u2014 "),mI=a("a"),Emo=o("ConvNextFeatureExtractor"),Cmo=o(" (RegNet model)"),wmo=l(),xh=a("li"),Une=a("strong"),Amo=o("resnet"),ymo=o(" \u2014 "),gI=a("a"),Lmo=o("ConvNextFeatureExtractor"),xmo=o(" (ResNet model)"),$mo=l(),$h=a("li"),Jne=a("strong"),kmo=o("segformer"),Smo=o(" \u2014 "),hI=a("a"),Rmo=o("SegformerFeatureExtractor"),Pmo=o(" (SegFormer model)"),Bmo=l(),kh=a("li"),Yne=a("strong"),Imo=o("speech_to_text"),Nmo=o(" \u2014 "),pI=a("a"),qmo=o("Speech2TextFeatureExtractor"),jmo=o(" (Speech2Text model)"),Dmo=l(),Sh=a("li"),Kne=a("strong"),Gmo=o("swin"),Omo=o(" \u2014 "),_I=a("a"),Vmo=o("ViTFeatureExtractor"),Xmo=o(" (Swin model)"),zmo=l(),Rh=a("li"),Zne=a("strong"),Wmo=o("van"),Qmo=o(" \u2014 "),uI=a("a"),Hmo=o("ConvNextFeatureExtractor"),Umo=o(" (VAN model)"),Jmo=l(),Ph=a("li"),ese=a("strong"),Ymo=o("vit"),Kmo=o(" \u2014 "),bI=a("a"),Zmo=o("ViTFeatureExtractor"),ego=o(" (ViT model)"),ogo=l(),Bh=a("li"),ose=a("strong"),rgo=o("vit_mae"),tgo=o(" \u2014 "),vI=a("a"),ago=o("ViTFeatureExtractor"),ngo=o(" (ViTMAE model)"),sgo=l(),Ih=a("li"),rse=a("strong"),lgo=o("wav2vec2"),igo=o(" \u2014 "),FI=a("a"),dgo=o("Wav2Vec2FeatureExtractor"),cgo=o(" (Wav2Vec2 model)"),fgo=l(),Nh=a("li"),tse=a("strong"),mgo=o("wav2vec2-conformer"),ggo=o(" \u2014 "),TI=a("a"),hgo=o("Wav2Vec2FeatureExtractor"),pgo=o(" (Wav2Vec2-Conformer model)"),_go=l(),qh=a("li"),ase=a("strong"),ugo=o("yolos"),bgo=o(" \u2014 "),MI=a("a"),vgo=o("YolosFeatureExtractor"),Fgo=o(" (YOLOS model)"),Tgo=l(),F(jh.$$.fragment),Mgo=l(),F(Dh.$$.fragment),Ego=l(),Gh=a("div"),F(KA.$$.fragment),Cgo=l(),nse=a("p"),wgo=o("Register a new feature extractor for this class."),Pqe=l(),Ci=a("h2"),Oh=a("a"),sse=a("span"),F(ZA.$$.fragment),Ago=l(),lse=a("span"),ygo=o("AutoProcessor"),Bqe=l(),yo=a("div"),F(ey.$$.fragment),Lgo=l(),oy=a("p"),xgo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),EI=a("a"),$go=o("AutoProcessor.from_pretrained()"),kgo=o(" class method."),Sgo=l(),ry=a("p"),Rgo=o("This class cannot be instantiated directly using "),ise=a("code"),Pgo=o("__init__()"),Bgo=o(" (throws an error)."),Igo=l(),Ue=a("div"),F(ty.$$.fragment),Ngo=l(),dse=a("p"),qgo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),jgo=l(),wi=a("p"),Dgo=o("The processor class to instantiate is selected based on the "),cse=a("code"),Ggo=o("model_type"),Ogo=o(` property of the config object (either
passed as an argument or loaded from `),fse=a("code"),Vgo=o("pretrained_model_name_or_path"),Xgo=o(" if possible):"),zgo=l(),he=a("ul"),Vh=a("li"),mse=a("strong"),Wgo=o("clip"),Qgo=o(" \u2014 "),CI=a("a"),Hgo=o("CLIPProcessor"),Ugo=o(" (CLIP model)"),Jgo=l(),Xh=a("li"),gse=a("strong"),Ygo=o("flava"),Kgo=o(" \u2014 "),hse=a("code"),Zgo=o("FLAVAProcessor"),eho=o(" (Flava model)"),oho=l(),zh=a("li"),pse=a("strong"),rho=o("greaselm"),tho=o(" \u2014 "),wI=a("a"),aho=o("GreaseLMProcessor"),nho=o(" (GreaseLM model)"),sho=l(),Wh=a("li"),_se=a("strong"),lho=o("layoutlmv2"),iho=o(" \u2014 "),AI=a("a"),dho=o("LayoutLMv2Processor"),cho=o(" (LayoutLMv2 model)"),fho=l(),Qh=a("li"),use=a("strong"),mho=o("layoutlmv3"),gho=o(" \u2014 "),yI=a("a"),hho=o("LayoutLMv3Processor"),pho=o(" (LayoutLMv3 model)"),_ho=l(),Hh=a("li"),bse=a("strong"),uho=o("layoutxlm"),bho=o(" \u2014 "),LI=a("a"),vho=o("LayoutXLMProcessor"),Fho=o(" (LayoutXLM model)"),Tho=l(),Uh=a("li"),vse=a("strong"),Mho=o("sew"),Eho=o(" \u2014 "),xI=a("a"),Cho=o("Wav2Vec2Processor"),who=o(" (SEW model)"),Aho=l(),Jh=a("li"),Fse=a("strong"),yho=o("sew-d"),Lho=o(" \u2014 "),$I=a("a"),xho=o("Wav2Vec2Processor"),$ho=o(" (SEW-D model)"),kho=l(),Yh=a("li"),Tse=a("strong"),Sho=o("speech_to_text"),Rho=o(" \u2014 "),kI=a("a"),Pho=o("Speech2TextProcessor"),Bho=o(" (Speech2Text model)"),Iho=l(),Kh=a("li"),Mse=a("strong"),Nho=o("speech_to_text_2"),qho=o(" \u2014 "),SI=a("a"),jho=o("Speech2Text2Processor"),Dho=o(" (Speech2Text2 model)"),Gho=l(),Zh=a("li"),Ese=a("strong"),Oho=o("trocr"),Vho=o(" \u2014 "),RI=a("a"),Xho=o("TrOCRProcessor"),zho=o(" (TrOCR model)"),Who=l(),ep=a("li"),Cse=a("strong"),Qho=o("unispeech"),Hho=o(" \u2014 "),PI=a("a"),Uho=o("Wav2Vec2Processor"),Jho=o(" (UniSpeech model)"),Yho=l(),op=a("li"),wse=a("strong"),Kho=o("unispeech-sat"),Zho=o(" \u2014 "),BI=a("a"),epo=o("Wav2Vec2Processor"),opo=o(" (UniSpeechSat model)"),rpo=l(),rp=a("li"),Ase=a("strong"),tpo=o("vilt"),apo=o(" \u2014 "),II=a("a"),npo=o("ViltProcessor"),spo=o(" (ViLT model)"),lpo=l(),tp=a("li"),yse=a("strong"),ipo=o("vision-text-dual-encoder"),dpo=o(" \u2014 "),NI=a("a"),cpo=o("VisionTextDualEncoderProcessor"),fpo=o(" (VisionTextDualEncoder model)"),mpo=l(),ap=a("li"),Lse=a("strong"),gpo=o("wav2vec2"),hpo=o(" \u2014 "),qI=a("a"),ppo=o("Wav2Vec2Processor"),_po=o(" (Wav2Vec2 model)"),upo=l(),np=a("li"),xse=a("strong"),bpo=o("wav2vec2-conformer"),vpo=o(" \u2014 "),jI=a("a"),Fpo=o("Wav2Vec2Processor"),Tpo=o(" (Wav2Vec2-Conformer model)"),Mpo=l(),sp=a("li"),$se=a("strong"),Epo=o("wavlm"),Cpo=o(" \u2014 "),DI=a("a"),wpo=o("Wav2Vec2Processor"),Apo=o(" (WavLM model)"),ypo=l(),F(lp.$$.fragment),Lpo=l(),F(ip.$$.fragment),xpo=l(),dp=a("div"),F(ay.$$.fragment),$po=l(),kse=a("p"),kpo=o("Register a new processor for this class."),Iqe=l(),Ai=a("h2"),cp=a("a"),Sse=a("span"),F(ny.$$.fragment),Spo=l(),Rse=a("span"),Rpo=o("AutoModel"),Nqe=l(),Lo=a("div"),F(sy.$$.fragment),Ppo=l(),yi=a("p"),Bpo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),GI=a("a"),Ipo=o("from_pretrained()"),Npo=o(" class method or the "),OI=a("a"),qpo=o("from_config()"),jpo=o(` class
method.`),Dpo=l(),ly=a("p"),Gpo=o("This class cannot be instantiated directly using "),Pse=a("code"),Opo=o("__init__()"),Vpo=o(" (throws an error)."),Xpo=l(),tt=a("div"),F(iy.$$.fragment),zpo=l(),Bse=a("p"),Wpo=o("Instantiates one of the base model classes of the library from a configuration."),Qpo=l(),Li=a("p"),Hpo=o(`Note:
Loading a model from its configuration file does `),Ise=a("strong"),Upo=o("not"),Jpo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VI=a("a"),Ypo=o("from_pretrained()"),Kpo=o(" to load the model weights."),Zpo=l(),F(fp.$$.fragment),e_o=l(),Je=a("div"),F(dy.$$.fragment),o_o=l(),Nse=a("p"),r_o=o("Instantiate one of the base model classes of the library from a pretrained model."),t_o=l(),La=a("p"),a_o=o("The model class to instantiate is selected based on the "),qse=a("code"),n_o=o("model_type"),s_o=o(` property of the config object (either
passed as an argument or loaded from `),jse=a("code"),l_o=o("pretrained_model_name_or_path"),i_o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dse=a("code"),d_o=o("pretrained_model_name_or_path"),c_o=o(":"),f_o=l(),x=a("ul"),mp=a("li"),Gse=a("strong"),m_o=o("albert"),g_o=o(" \u2014 "),XI=a("a"),h_o=o("AlbertModel"),p_o=o(" (ALBERT model)"),__o=l(),gp=a("li"),Ose=a("strong"),u_o=o("bart"),b_o=o(" \u2014 "),zI=a("a"),v_o=o("BartModel"),F_o=o(" (BART model)"),T_o=l(),hp=a("li"),Vse=a("strong"),M_o=o("beit"),E_o=o(" \u2014 "),WI=a("a"),C_o=o("BeitModel"),w_o=o(" (BEiT model)"),A_o=l(),pp=a("li"),Xse=a("strong"),y_o=o("bert"),L_o=o(" \u2014 "),QI=a("a"),x_o=o("BertModel"),$_o=o(" (BERT model)"),k_o=l(),_p=a("li"),zse=a("strong"),S_o=o("bert-generation"),R_o=o(" \u2014 "),HI=a("a"),P_o=o("BertGenerationEncoder"),B_o=o(" (Bert Generation model)"),I_o=l(),up=a("li"),Wse=a("strong"),N_o=o("big_bird"),q_o=o(" \u2014 "),UI=a("a"),j_o=o("BigBirdModel"),D_o=o(" (BigBird model)"),G_o=l(),bp=a("li"),Qse=a("strong"),O_o=o("bigbird_pegasus"),V_o=o(" \u2014 "),JI=a("a"),X_o=o("BigBirdPegasusModel"),z_o=o(" (BigBirdPegasus model)"),W_o=l(),vp=a("li"),Hse=a("strong"),Q_o=o("blenderbot"),H_o=o(" \u2014 "),YI=a("a"),U_o=o("BlenderbotModel"),J_o=o(" (Blenderbot model)"),Y_o=l(),Fp=a("li"),Use=a("strong"),K_o=o("blenderbot-small"),Z_o=o(" \u2014 "),KI=a("a"),euo=o("BlenderbotSmallModel"),ouo=o(" (BlenderbotSmall model)"),ruo=l(),Tp=a("li"),Jse=a("strong"),tuo=o("camembert"),auo=o(" \u2014 "),ZI=a("a"),nuo=o("CamembertModel"),suo=o(" (CamemBERT model)"),luo=l(),Mp=a("li"),Yse=a("strong"),iuo=o("canine"),duo=o(" \u2014 "),eN=a("a"),cuo=o("CanineModel"),fuo=o(" (Canine model)"),muo=l(),Ep=a("li"),Kse=a("strong"),guo=o("clip"),huo=o(" \u2014 "),oN=a("a"),puo=o("CLIPModel"),_uo=o(" (CLIP model)"),uuo=l(),Cp=a("li"),Zse=a("strong"),buo=o("convbert"),vuo=o(" \u2014 "),rN=a("a"),Fuo=o("ConvBertModel"),Tuo=o(" (ConvBERT model)"),Muo=l(),wp=a("li"),ele=a("strong"),Euo=o("convnext"),Cuo=o(" \u2014 "),tN=a("a"),wuo=o("ConvNextModel"),Auo=o(" (ConvNext model)"),yuo=l(),Ap=a("li"),ole=a("strong"),Luo=o("ctrl"),xuo=o(" \u2014 "),aN=a("a"),$uo=o("CTRLModel"),kuo=o(" (CTRL model)"),Suo=l(),yp=a("li"),rle=a("strong"),Ruo=o("cvt"),Puo=o(" \u2014 "),nN=a("a"),Buo=o("CvtModel"),Iuo=o(" (CvT model)"),Nuo=l(),Lp=a("li"),tle=a("strong"),quo=o("data2vec-audio"),juo=o(" \u2014 "),sN=a("a"),Duo=o("Data2VecAudioModel"),Guo=o(" (Data2VecAudio model)"),Ouo=l(),xp=a("li"),ale=a("strong"),Vuo=o("data2vec-text"),Xuo=o(" \u2014 "),lN=a("a"),zuo=o("Data2VecTextModel"),Wuo=o(" (Data2VecText model)"),Quo=l(),$p=a("li"),nle=a("strong"),Huo=o("data2vec-vision"),Uuo=o(" \u2014 "),iN=a("a"),Juo=o("Data2VecVisionModel"),Yuo=o(" (Data2VecVision model)"),Kuo=l(),kp=a("li"),sle=a("strong"),Zuo=o("deberta"),e1o=o(" \u2014 "),dN=a("a"),o1o=o("DebertaModel"),r1o=o(" (DeBERTa model)"),t1o=l(),Sp=a("li"),lle=a("strong"),a1o=o("deberta-v2"),n1o=o(" \u2014 "),cN=a("a"),s1o=o("DebertaV2Model"),l1o=o(" (DeBERTa-v2 model)"),i1o=l(),Rp=a("li"),ile=a("strong"),d1o=o("decision_transformer"),c1o=o(" \u2014 "),fN=a("a"),f1o=o("DecisionTransformerModel"),m1o=o(" (Decision Transformer model)"),g1o=l(),Pp=a("li"),dle=a("strong"),h1o=o("deit"),p1o=o(" \u2014 "),mN=a("a"),_1o=o("DeiTModel"),u1o=o(" (DeiT model)"),b1o=l(),Bp=a("li"),cle=a("strong"),v1o=o("detr"),F1o=o(" \u2014 "),gN=a("a"),T1o=o("DetrModel"),M1o=o(" (DETR model)"),E1o=l(),Ip=a("li"),fle=a("strong"),C1o=o("distilbert"),w1o=o(" \u2014 "),hN=a("a"),A1o=o("DistilBertModel"),y1o=o(" (DistilBERT model)"),L1o=l(),Np=a("li"),mle=a("strong"),x1o=o("dpr"),$1o=o(" \u2014 "),pN=a("a"),k1o=o("DPRQuestionEncoder"),S1o=o(" (DPR model)"),R1o=l(),qp=a("li"),gle=a("strong"),P1o=o("dpt"),B1o=o(" \u2014 "),_N=a("a"),I1o=o("DPTModel"),N1o=o(" (DPT model)"),q1o=l(),jp=a("li"),hle=a("strong"),j1o=o("electra"),D1o=o(" \u2014 "),uN=a("a"),G1o=o("ElectraModel"),O1o=o(" (ELECTRA model)"),V1o=l(),Dp=a("li"),ple=a("strong"),X1o=o("flaubert"),z1o=o(" \u2014 "),bN=a("a"),W1o=o("FlaubertModel"),Q1o=o(" (FlauBERT model)"),H1o=l(),Gp=a("li"),_le=a("strong"),U1o=o("flava"),J1o=o(" \u2014 "),vN=a("a"),Y1o=o("FlavaModel"),K1o=o(" (Flava model)"),Z1o=l(),Op=a("li"),ule=a("strong"),ebo=o("fnet"),obo=o(" \u2014 "),FN=a("a"),rbo=o("FNetModel"),tbo=o(" (FNet model)"),abo=l(),Vp=a("li"),ble=a("strong"),nbo=o("fsmt"),sbo=o(" \u2014 "),TN=a("a"),lbo=o("FSMTModel"),ibo=o(" (FairSeq Machine-Translation model)"),dbo=l(),Bs=a("li"),vle=a("strong"),cbo=o("funnel"),fbo=o(" \u2014 "),MN=a("a"),mbo=o("FunnelModel"),gbo=o(" or "),EN=a("a"),hbo=o("FunnelBaseModel"),pbo=o(" (Funnel Transformer model)"),_bo=l(),Xp=a("li"),Fle=a("strong"),ubo=o("glpn"),bbo=o(" \u2014 "),CN=a("a"),vbo=o("GLPNModel"),Fbo=o(" (GLPN model)"),Tbo=l(),zp=a("li"),Tle=a("strong"),Mbo=o("gpt2"),Ebo=o(" \u2014 "),wN=a("a"),Cbo=o("GPT2Model"),wbo=o(" (OpenAI GPT-2 model)"),Abo=l(),Wp=a("li"),Mle=a("strong"),ybo=o("gpt_neo"),Lbo=o(" \u2014 "),AN=a("a"),xbo=o("GPTNeoModel"),$bo=o(" (GPT Neo model)"),kbo=l(),Qp=a("li"),Ele=a("strong"),Sbo=o("gpt_neox"),Rbo=o(" \u2014 "),yN=a("a"),Pbo=o("GPTNeoXModel"),Bbo=o(" (GPT NeoX model)"),Ibo=l(),Hp=a("li"),Cle=a("strong"),Nbo=o("gptj"),qbo=o(" \u2014 "),LN=a("a"),jbo=o("GPTJModel"),Dbo=o(" (GPT-J model)"),Gbo=l(),Up=a("li"),wle=a("strong"),Obo=o("greaselm"),Vbo=o(" \u2014 "),xN=a("a"),Xbo=o("GreaseLMModel"),zbo=o(" (GreaseLM model)"),Wbo=l(),Jp=a("li"),Ale=a("strong"),Qbo=o("hubert"),Hbo=o(" \u2014 "),$N=a("a"),Ubo=o("HubertModel"),Jbo=o(" (Hubert model)"),Ybo=l(),Yp=a("li"),yle=a("strong"),Kbo=o("ibert"),Zbo=o(" \u2014 "),kN=a("a"),e2o=o("IBertModel"),o2o=o(" (I-BERT model)"),r2o=l(),Kp=a("li"),Lle=a("strong"),t2o=o("imagegpt"),a2o=o(" \u2014 "),SN=a("a"),n2o=o("ImageGPTModel"),s2o=o(" (ImageGPT model)"),l2o=l(),Zp=a("li"),xle=a("strong"),i2o=o("layoutlm"),d2o=o(" \u2014 "),RN=a("a"),c2o=o("LayoutLMModel"),f2o=o(" (LayoutLM model)"),m2o=l(),e_=a("li"),$le=a("strong"),g2o=o("layoutlmv2"),h2o=o(" \u2014 "),PN=a("a"),p2o=o("LayoutLMv2Model"),_2o=o(" (LayoutLMv2 model)"),u2o=l(),o_=a("li"),kle=a("strong"),b2o=o("layoutlmv3"),v2o=o(" \u2014 "),BN=a("a"),F2o=o("LayoutLMv3Model"),T2o=o(" (LayoutLMv3 model)"),M2o=l(),r_=a("li"),Sle=a("strong"),E2o=o("led"),C2o=o(" \u2014 "),IN=a("a"),w2o=o("LEDModel"),A2o=o(" (LED model)"),y2o=l(),t_=a("li"),Rle=a("strong"),L2o=o("longformer"),x2o=o(" \u2014 "),NN=a("a"),$2o=o("LongformerModel"),k2o=o(" (Longformer model)"),S2o=l(),a_=a("li"),Ple=a("strong"),R2o=o("luke"),P2o=o(" \u2014 "),qN=a("a"),B2o=o("LukeModel"),I2o=o(" (LUKE model)"),N2o=l(),n_=a("li"),Ble=a("strong"),q2o=o("lxmert"),j2o=o(" \u2014 "),jN=a("a"),D2o=o("LxmertModel"),G2o=o(" (LXMERT model)"),O2o=l(),s_=a("li"),Ile=a("strong"),V2o=o("m2m_100"),X2o=o(" \u2014 "),DN=a("a"),z2o=o("M2M100Model"),W2o=o(" (M2M100 model)"),Q2o=l(),l_=a("li"),Nle=a("strong"),H2o=o("marian"),U2o=o(" \u2014 "),GN=a("a"),J2o=o("MarianModel"),Y2o=o(" (Marian model)"),K2o=l(),i_=a("li"),qle=a("strong"),Z2o=o("maskformer"),e4o=o(" \u2014 "),ON=a("a"),o4o=o("MaskFormerModel"),r4o=o(" (MaskFormer model)"),t4o=l(),d_=a("li"),jle=a("strong"),a4o=o("mbart"),n4o=o(" \u2014 "),VN=a("a"),s4o=o("MBartModel"),l4o=o(" (mBART model)"),i4o=l(),c_=a("li"),Dle=a("strong"),d4o=o("megatron-bert"),c4o=o(" \u2014 "),XN=a("a"),f4o=o("MegatronBertModel"),m4o=o(" (MegatronBert model)"),g4o=l(),f_=a("li"),Gle=a("strong"),h4o=o("mobilebert"),p4o=o(" \u2014 "),zN=a("a"),_4o=o("MobileBertModel"),u4o=o(" (MobileBERT model)"),b4o=l(),m_=a("li"),Ole=a("strong"),v4o=o("mpnet"),F4o=o(" \u2014 "),WN=a("a"),T4o=o("MPNetModel"),M4o=o(" (MPNet model)"),E4o=l(),g_=a("li"),Vle=a("strong"),C4o=o("mt5"),w4o=o(" \u2014 "),QN=a("a"),A4o=o("MT5Model"),y4o=o(" (mT5 model)"),L4o=l(),h_=a("li"),Xle=a("strong"),x4o=o("nystromformer"),$4o=o(" \u2014 "),HN=a("a"),k4o=o("NystromformerModel"),S4o=o(" (Nystromformer model)"),R4o=l(),p_=a("li"),zle=a("strong"),P4o=o("openai-gpt"),B4o=o(" \u2014 "),UN=a("a"),I4o=o("OpenAIGPTModel"),N4o=o(" (OpenAI GPT model)"),q4o=l(),__=a("li"),Wle=a("strong"),j4o=o("opt"),D4o=o(" \u2014 "),JN=a("a"),G4o=o("OPTModel"),O4o=o(" (OPT model)"),V4o=l(),u_=a("li"),Qle=a("strong"),X4o=o("pegasus"),z4o=o(" \u2014 "),YN=a("a"),W4o=o("PegasusModel"),Q4o=o(" (Pegasus model)"),H4o=l(),b_=a("li"),Hle=a("strong"),U4o=o("perceiver"),J4o=o(" \u2014 "),KN=a("a"),Y4o=o("PerceiverModel"),K4o=o(" (Perceiver model)"),Z4o=l(),v_=a("li"),Ule=a("strong"),evo=o("plbart"),ovo=o(" \u2014 "),ZN=a("a"),rvo=o("PLBartModel"),tvo=o(" (PLBart model)"),avo=l(),F_=a("li"),Jle=a("strong"),nvo=o("poolformer"),svo=o(" \u2014 "),eq=a("a"),lvo=o("PoolFormerModel"),ivo=o(" (PoolFormer model)"),dvo=l(),T_=a("li"),Yle=a("strong"),cvo=o("prophetnet"),fvo=o(" \u2014 "),oq=a("a"),mvo=o("ProphetNetModel"),gvo=o(" (ProphetNet model)"),hvo=l(),M_=a("li"),Kle=a("strong"),pvo=o("qdqbert"),_vo=o(" \u2014 "),rq=a("a"),uvo=o("QDQBertModel"),bvo=o(" (QDQBert model)"),vvo=l(),E_=a("li"),Zle=a("strong"),Fvo=o("reformer"),Tvo=o(" \u2014 "),tq=a("a"),Mvo=o("ReformerModel"),Evo=o(" (Reformer model)"),Cvo=l(),C_=a("li"),eie=a("strong"),wvo=o("regnet"),Avo=o(" \u2014 "),aq=a("a"),yvo=o("RegNetModel"),Lvo=o(" (RegNet model)"),xvo=l(),w_=a("li"),oie=a("strong"),$vo=o("rembert"),kvo=o(" \u2014 "),nq=a("a"),Svo=o("RemBertModel"),Rvo=o(" (RemBERT model)"),Pvo=l(),A_=a("li"),rie=a("strong"),Bvo=o("resnet"),Ivo=o(" \u2014 "),sq=a("a"),Nvo=o("ResNetModel"),qvo=o(" (ResNet model)"),jvo=l(),y_=a("li"),tie=a("strong"),Dvo=o("retribert"),Gvo=o(" \u2014 "),lq=a("a"),Ovo=o("RetriBertModel"),Vvo=o(" (RetriBERT model)"),Xvo=l(),L_=a("li"),aie=a("strong"),zvo=o("roberta"),Wvo=o(" \u2014 "),iq=a("a"),Qvo=o("RobertaModel"),Hvo=o(" (RoBERTa model)"),Uvo=l(),x_=a("li"),nie=a("strong"),Jvo=o("roformer"),Yvo=o(" \u2014 "),dq=a("a"),Kvo=o("RoFormerModel"),Zvo=o(" (RoFormer model)"),eFo=l(),$_=a("li"),sie=a("strong"),oFo=o("segformer"),rFo=o(" \u2014 "),cq=a("a"),tFo=o("SegformerModel"),aFo=o(" (SegFormer model)"),nFo=l(),k_=a("li"),lie=a("strong"),sFo=o("sew"),lFo=o(" \u2014 "),fq=a("a"),iFo=o("SEWModel"),dFo=o(" (SEW model)"),cFo=l(),S_=a("li"),iie=a("strong"),fFo=o("sew-d"),mFo=o(" \u2014 "),mq=a("a"),gFo=o("SEWDModel"),hFo=o(" (SEW-D model)"),pFo=l(),R_=a("li"),die=a("strong"),_Fo=o("speech_to_text"),uFo=o(" \u2014 "),gq=a("a"),bFo=o("Speech2TextModel"),vFo=o(" (Speech2Text model)"),FFo=l(),P_=a("li"),cie=a("strong"),TFo=o("splinter"),MFo=o(" \u2014 "),hq=a("a"),EFo=o("SplinterModel"),CFo=o(" (Splinter model)"),wFo=l(),B_=a("li"),fie=a("strong"),AFo=o("squeezebert"),yFo=o(" \u2014 "),pq=a("a"),LFo=o("SqueezeBertModel"),xFo=o(" (SqueezeBERT model)"),$Fo=l(),I_=a("li"),mie=a("strong"),kFo=o("swin"),SFo=o(" \u2014 "),_q=a("a"),RFo=o("SwinModel"),PFo=o(" (Swin model)"),BFo=l(),N_=a("li"),gie=a("strong"),IFo=o("t5"),NFo=o(" \u2014 "),uq=a("a"),qFo=o("T5Model"),jFo=o(" (T5 model)"),DFo=l(),q_=a("li"),hie=a("strong"),GFo=o("tapas"),OFo=o(" \u2014 "),bq=a("a"),VFo=o("TapasModel"),XFo=o(" (TAPAS model)"),zFo=l(),j_=a("li"),pie=a("strong"),WFo=o("trajectory_transformer"),QFo=o(" \u2014 "),vq=a("a"),HFo=o("TrajectoryTransformerModel"),UFo=o(" (Trajectory Transformer model)"),JFo=l(),D_=a("li"),_ie=a("strong"),YFo=o("transfo-xl"),KFo=o(" \u2014 "),Fq=a("a"),ZFo=o("TransfoXLModel"),e6o=o(" (Transformer-XL model)"),o6o=l(),G_=a("li"),uie=a("strong"),r6o=o("unispeech"),t6o=o(" \u2014 "),Tq=a("a"),a6o=o("UniSpeechModel"),n6o=o(" (UniSpeech model)"),s6o=l(),O_=a("li"),bie=a("strong"),l6o=o("unispeech-sat"),i6o=o(" \u2014 "),Mq=a("a"),d6o=o("UniSpeechSatModel"),c6o=o(" (UniSpeechSat model)"),f6o=l(),V_=a("li"),vie=a("strong"),m6o=o("van"),g6o=o(" \u2014 "),Eq=a("a"),h6o=o("VanModel"),p6o=o(" (VAN model)"),_6o=l(),X_=a("li"),Fie=a("strong"),u6o=o("vilt"),b6o=o(" \u2014 "),Cq=a("a"),v6o=o("ViltModel"),F6o=o(" (ViLT model)"),T6o=l(),z_=a("li"),Tie=a("strong"),M6o=o("vision-text-dual-encoder"),E6o=o(" \u2014 "),wq=a("a"),C6o=o("VisionTextDualEncoderModel"),w6o=o(" (VisionTextDualEncoder model)"),A6o=l(),W_=a("li"),Mie=a("strong"),y6o=o("visual_bert"),L6o=o(" \u2014 "),Aq=a("a"),x6o=o("VisualBertModel"),$6o=o(" (VisualBert model)"),k6o=l(),Q_=a("li"),Eie=a("strong"),S6o=o("vit"),R6o=o(" \u2014 "),yq=a("a"),P6o=o("ViTModel"),B6o=o(" (ViT model)"),I6o=l(),H_=a("li"),Cie=a("strong"),N6o=o("vit_mae"),q6o=o(" \u2014 "),Lq=a("a"),j6o=o("ViTMAEModel"),D6o=o(" (ViTMAE model)"),G6o=l(),U_=a("li"),wie=a("strong"),O6o=o("wav2vec2"),V6o=o(" \u2014 "),xq=a("a"),X6o=o("Wav2Vec2Model"),z6o=o(" (Wav2Vec2 model)"),W6o=l(),J_=a("li"),Aie=a("strong"),Q6o=o("wav2vec2-conformer"),H6o=o(" \u2014 "),$q=a("a"),U6o=o("Wav2Vec2ConformerModel"),J6o=o(" (Wav2Vec2-Conformer model)"),Y6o=l(),Y_=a("li"),yie=a("strong"),K6o=o("wavlm"),Z6o=o(" \u2014 "),kq=a("a"),eTo=o("WavLMModel"),oTo=o(" (WavLM model)"),rTo=l(),K_=a("li"),Lie=a("strong"),tTo=o("xglm"),aTo=o(" \u2014 "),Sq=a("a"),nTo=o("XGLMModel"),sTo=o(" (XGLM model)"),lTo=l(),Z_=a("li"),xie=a("strong"),iTo=o("xlm"),dTo=o(" \u2014 "),Rq=a("a"),cTo=o("XLMModel"),fTo=o(" (XLM model)"),mTo=l(),eu=a("li"),$ie=a("strong"),gTo=o("xlm-prophetnet"),hTo=o(" \u2014 "),Pq=a("a"),pTo=o("XLMProphetNetModel"),_To=o(" (XLMProphetNet model)"),uTo=l(),ou=a("li"),kie=a("strong"),bTo=o("xlm-roberta"),vTo=o(" \u2014 "),Bq=a("a"),FTo=o("XLMRobertaModel"),TTo=o(" (XLM-RoBERTa model)"),MTo=l(),ru=a("li"),Sie=a("strong"),ETo=o("xlm-roberta-xl"),CTo=o(" \u2014 "),Iq=a("a"),wTo=o("XLMRobertaXLModel"),ATo=o(" (XLM-RoBERTa-XL model)"),yTo=l(),tu=a("li"),Rie=a("strong"),LTo=o("xlnet"),xTo=o(" \u2014 "),Nq=a("a"),$To=o("XLNetModel"),kTo=o(" (XLNet model)"),STo=l(),au=a("li"),Pie=a("strong"),RTo=o("yolos"),PTo=o(" \u2014 "),qq=a("a"),BTo=o("YolosModel"),ITo=o(" (YOLOS model)"),NTo=l(),nu=a("li"),Bie=a("strong"),qTo=o("yoso"),jTo=o(" \u2014 "),jq=a("a"),DTo=o("YosoModel"),GTo=o(" (YOSO model)"),OTo=l(),su=a("p"),VTo=o("The model is set in evaluation mode by default using "),Iie=a("code"),XTo=o("model.eval()"),zTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nie=a("code"),WTo=o("model.train()"),QTo=l(),F(lu.$$.fragment),qqe=l(),xi=a("h2"),iu=a("a"),qie=a("span"),F(cy.$$.fragment),HTo=l(),jie=a("span"),UTo=o("AutoModelForPreTraining"),jqe=l(),xo=a("div"),F(fy.$$.fragment),JTo=l(),$i=a("p"),YTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Dq=a("a"),KTo=o("from_pretrained()"),ZTo=o(" class method or the "),Gq=a("a"),e7o=o("from_config()"),o7o=o(` class
method.`),r7o=l(),my=a("p"),t7o=o("This class cannot be instantiated directly using "),Die=a("code"),a7o=o("__init__()"),n7o=o(" (throws an error)."),s7o=l(),at=a("div"),F(gy.$$.fragment),l7o=l(),Gie=a("p"),i7o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),d7o=l(),ki=a("p"),c7o=o(`Note:
Loading a model from its configuration file does `),Oie=a("strong"),f7o=o("not"),m7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oq=a("a"),g7o=o("from_pretrained()"),h7o=o(" to load the model weights."),p7o=l(),F(du.$$.fragment),_7o=l(),Ye=a("div"),F(hy.$$.fragment),u7o=l(),Vie=a("p"),b7o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),v7o=l(),xa=a("p"),F7o=o("The model class to instantiate is selected based on the "),Xie=a("code"),T7o=o("model_type"),M7o=o(` property of the config object (either
passed as an argument or loaded from `),zie=a("code"),E7o=o("pretrained_model_name_or_path"),C7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wie=a("code"),w7o=o("pretrained_model_name_or_path"),A7o=o(":"),y7o=l(),G=a("ul"),cu=a("li"),Qie=a("strong"),L7o=o("albert"),x7o=o(" \u2014 "),Vq=a("a"),$7o=o("AlbertForPreTraining"),k7o=o(" (ALBERT model)"),S7o=l(),fu=a("li"),Hie=a("strong"),R7o=o("bart"),P7o=o(" \u2014 "),Xq=a("a"),B7o=o("BartForConditionalGeneration"),I7o=o(" (BART model)"),N7o=l(),mu=a("li"),Uie=a("strong"),q7o=o("bert"),j7o=o(" \u2014 "),zq=a("a"),D7o=o("BertForPreTraining"),G7o=o(" (BERT model)"),O7o=l(),gu=a("li"),Jie=a("strong"),V7o=o("big_bird"),X7o=o(" \u2014 "),Wq=a("a"),z7o=o("BigBirdForPreTraining"),W7o=o(" (BigBird model)"),Q7o=l(),hu=a("li"),Yie=a("strong"),H7o=o("camembert"),U7o=o(" \u2014 "),Qq=a("a"),J7o=o("CamembertForMaskedLM"),Y7o=o(" (CamemBERT model)"),K7o=l(),pu=a("li"),Kie=a("strong"),Z7o=o("ctrl"),eMo=o(" \u2014 "),Hq=a("a"),oMo=o("CTRLLMHeadModel"),rMo=o(" (CTRL model)"),tMo=l(),_u=a("li"),Zie=a("strong"),aMo=o("data2vec-text"),nMo=o(" \u2014 "),Uq=a("a"),sMo=o("Data2VecTextForMaskedLM"),lMo=o(" (Data2VecText model)"),iMo=l(),uu=a("li"),ede=a("strong"),dMo=o("deberta"),cMo=o(" \u2014 "),Jq=a("a"),fMo=o("DebertaForMaskedLM"),mMo=o(" (DeBERTa model)"),gMo=l(),bu=a("li"),ode=a("strong"),hMo=o("deberta-v2"),pMo=o(" \u2014 "),Yq=a("a"),_Mo=o("DebertaV2ForMaskedLM"),uMo=o(" (DeBERTa-v2 model)"),bMo=l(),vu=a("li"),rde=a("strong"),vMo=o("distilbert"),FMo=o(" \u2014 "),Kq=a("a"),TMo=o("DistilBertForMaskedLM"),MMo=o(" (DistilBERT model)"),EMo=l(),Fu=a("li"),tde=a("strong"),CMo=o("electra"),wMo=o(" \u2014 "),Zq=a("a"),AMo=o("ElectraForPreTraining"),yMo=o(" (ELECTRA model)"),LMo=l(),Tu=a("li"),ade=a("strong"),xMo=o("flaubert"),$Mo=o(" \u2014 "),ej=a("a"),kMo=o("FlaubertWithLMHeadModel"),SMo=o(" (FlauBERT model)"),RMo=l(),Mu=a("li"),nde=a("strong"),PMo=o("flava"),BMo=o(" \u2014 "),oj=a("a"),IMo=o("FlavaForPreTraining"),NMo=o(" (Flava model)"),qMo=l(),Eu=a("li"),sde=a("strong"),jMo=o("fnet"),DMo=o(" \u2014 "),rj=a("a"),GMo=o("FNetForPreTraining"),OMo=o(" (FNet model)"),VMo=l(),Cu=a("li"),lde=a("strong"),XMo=o("fsmt"),zMo=o(" \u2014 "),tj=a("a"),WMo=o("FSMTForConditionalGeneration"),QMo=o(" (FairSeq Machine-Translation model)"),HMo=l(),wu=a("li"),ide=a("strong"),UMo=o("funnel"),JMo=o(" \u2014 "),aj=a("a"),YMo=o("FunnelForPreTraining"),KMo=o(" (Funnel Transformer model)"),ZMo=l(),Au=a("li"),dde=a("strong"),eEo=o("gpt2"),oEo=o(" \u2014 "),nj=a("a"),rEo=o("GPT2LMHeadModel"),tEo=o(" (OpenAI GPT-2 model)"),aEo=l(),yu=a("li"),cde=a("strong"),nEo=o("ibert"),sEo=o(" \u2014 "),sj=a("a"),lEo=o("IBertForMaskedLM"),iEo=o(" (I-BERT model)"),dEo=l(),Lu=a("li"),fde=a("strong"),cEo=o("layoutlm"),fEo=o(" \u2014 "),lj=a("a"),mEo=o("LayoutLMForMaskedLM"),gEo=o(" (LayoutLM model)"),hEo=l(),xu=a("li"),mde=a("strong"),pEo=o("longformer"),_Eo=o(" \u2014 "),ij=a("a"),uEo=o("LongformerForMaskedLM"),bEo=o(" (Longformer model)"),vEo=l(),$u=a("li"),gde=a("strong"),FEo=o("lxmert"),TEo=o(" \u2014 "),dj=a("a"),MEo=o("LxmertForPreTraining"),EEo=o(" (LXMERT model)"),CEo=l(),ku=a("li"),hde=a("strong"),wEo=o("megatron-bert"),AEo=o(" \u2014 "),cj=a("a"),yEo=o("MegatronBertForPreTraining"),LEo=o(" (MegatronBert model)"),xEo=l(),Su=a("li"),pde=a("strong"),$Eo=o("mobilebert"),kEo=o(" \u2014 "),fj=a("a"),SEo=o("MobileBertForPreTraining"),REo=o(" (MobileBERT model)"),PEo=l(),Ru=a("li"),_de=a("strong"),BEo=o("mpnet"),IEo=o(" \u2014 "),mj=a("a"),NEo=o("MPNetForMaskedLM"),qEo=o(" (MPNet model)"),jEo=l(),Pu=a("li"),ude=a("strong"),DEo=o("openai-gpt"),GEo=o(" \u2014 "),gj=a("a"),OEo=o("OpenAIGPTLMHeadModel"),VEo=o(" (OpenAI GPT model)"),XEo=l(),Bu=a("li"),bde=a("strong"),zEo=o("retribert"),WEo=o(" \u2014 "),hj=a("a"),QEo=o("RetriBertModel"),HEo=o(" (RetriBERT model)"),UEo=l(),Iu=a("li"),vde=a("strong"),JEo=o("roberta"),YEo=o(" \u2014 "),pj=a("a"),KEo=o("RobertaForMaskedLM"),ZEo=o(" (RoBERTa model)"),eCo=l(),Nu=a("li"),Fde=a("strong"),oCo=o("splinter"),rCo=o(" \u2014 "),_j=a("a"),tCo=o("SplinterForPreTraining"),aCo=o(" (Splinter model)"),nCo=l(),qu=a("li"),Tde=a("strong"),sCo=o("squeezebert"),lCo=o(" \u2014 "),uj=a("a"),iCo=o("SqueezeBertForMaskedLM"),dCo=o(" (SqueezeBERT model)"),cCo=l(),ju=a("li"),Mde=a("strong"),fCo=o("t5"),mCo=o(" \u2014 "),bj=a("a"),gCo=o("T5ForConditionalGeneration"),hCo=o(" (T5 model)"),pCo=l(),Du=a("li"),Ede=a("strong"),_Co=o("tapas"),uCo=o(" \u2014 "),vj=a("a"),bCo=o("TapasForMaskedLM"),vCo=o(" (TAPAS model)"),FCo=l(),Gu=a("li"),Cde=a("strong"),TCo=o("transfo-xl"),MCo=o(" \u2014 "),Fj=a("a"),ECo=o("TransfoXLLMHeadModel"),CCo=o(" (Transformer-XL model)"),wCo=l(),Ou=a("li"),wde=a("strong"),ACo=o("unispeech"),yCo=o(" \u2014 "),Tj=a("a"),LCo=o("UniSpeechForPreTraining"),xCo=o(" (UniSpeech model)"),$Co=l(),Vu=a("li"),Ade=a("strong"),kCo=o("unispeech-sat"),SCo=o(" \u2014 "),Mj=a("a"),RCo=o("UniSpeechSatForPreTraining"),PCo=o(" (UniSpeechSat model)"),BCo=l(),Xu=a("li"),yde=a("strong"),ICo=o("visual_bert"),NCo=o(" \u2014 "),Ej=a("a"),qCo=o("VisualBertForPreTraining"),jCo=o(" (VisualBert model)"),DCo=l(),zu=a("li"),Lde=a("strong"),GCo=o("vit_mae"),OCo=o(" \u2014 "),Cj=a("a"),VCo=o("ViTMAEForPreTraining"),XCo=o(" (ViTMAE model)"),zCo=l(),Wu=a("li"),xde=a("strong"),WCo=o("wav2vec2"),QCo=o(" \u2014 "),wj=a("a"),HCo=o("Wav2Vec2ForPreTraining"),UCo=o(" (Wav2Vec2 model)"),JCo=l(),Qu=a("li"),$de=a("strong"),YCo=o("wav2vec2-conformer"),KCo=o(" \u2014 "),Aj=a("a"),ZCo=o("Wav2Vec2ConformerForPreTraining"),e5o=o(" (Wav2Vec2-Conformer model)"),o5o=l(),Hu=a("li"),kde=a("strong"),r5o=o("xlm"),t5o=o(" \u2014 "),yj=a("a"),a5o=o("XLMWithLMHeadModel"),n5o=o(" (XLM model)"),s5o=l(),Uu=a("li"),Sde=a("strong"),l5o=o("xlm-roberta"),i5o=o(" \u2014 "),Lj=a("a"),d5o=o("XLMRobertaForMaskedLM"),c5o=o(" (XLM-RoBERTa model)"),f5o=l(),Ju=a("li"),Rde=a("strong"),m5o=o("xlm-roberta-xl"),g5o=o(" \u2014 "),xj=a("a"),h5o=o("XLMRobertaXLForMaskedLM"),p5o=o(" (XLM-RoBERTa-XL model)"),_5o=l(),Yu=a("li"),Pde=a("strong"),u5o=o("xlnet"),b5o=o(" \u2014 "),$j=a("a"),v5o=o("XLNetLMHeadModel"),F5o=o(" (XLNet model)"),T5o=l(),Ku=a("p"),M5o=o("The model is set in evaluation mode by default using "),Bde=a("code"),E5o=o("model.eval()"),C5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ide=a("code"),w5o=o("model.train()"),A5o=l(),F(Zu.$$.fragment),Dqe=l(),Si=a("h2"),e1=a("a"),Nde=a("span"),F(py.$$.fragment),y5o=l(),qde=a("span"),L5o=o("AutoModelForCausalLM"),Gqe=l(),$o=a("div"),F(_y.$$.fragment),x5o=l(),Ri=a("p"),$5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),kj=a("a"),k5o=o("from_pretrained()"),S5o=o(" class method or the "),Sj=a("a"),R5o=o("from_config()"),P5o=o(` class
method.`),B5o=l(),uy=a("p"),I5o=o("This class cannot be instantiated directly using "),jde=a("code"),N5o=o("__init__()"),q5o=o(" (throws an error)."),j5o=l(),nt=a("div"),F(by.$$.fragment),D5o=l(),Dde=a("p"),G5o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),O5o=l(),Pi=a("p"),V5o=o(`Note:
Loading a model from its configuration file does `),Gde=a("strong"),X5o=o("not"),z5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rj=a("a"),W5o=o("from_pretrained()"),Q5o=o(" to load the model weights."),H5o=l(),F(o1.$$.fragment),U5o=l(),Ke=a("div"),F(vy.$$.fragment),J5o=l(),Ode=a("p"),Y5o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),K5o=l(),$a=a("p"),Z5o=o("The model class to instantiate is selected based on the "),Vde=a("code"),e3o=o("model_type"),o3o=o(` property of the config object (either
passed as an argument or loaded from `),Xde=a("code"),r3o=o("pretrained_model_name_or_path"),t3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zde=a("code"),a3o=o("pretrained_model_name_or_path"),n3o=o(":"),s3o=l(),z=a("ul"),r1=a("li"),Wde=a("strong"),l3o=o("bart"),i3o=o(" \u2014 "),Pj=a("a"),d3o=o("BartForCausalLM"),c3o=o(" (BART model)"),f3o=l(),t1=a("li"),Qde=a("strong"),m3o=o("bert"),g3o=o(" \u2014 "),Bj=a("a"),h3o=o("BertLMHeadModel"),p3o=o(" (BERT model)"),_3o=l(),a1=a("li"),Hde=a("strong"),u3o=o("bert-generation"),b3o=o(" \u2014 "),Ij=a("a"),v3o=o("BertGenerationDecoder"),F3o=o(" (Bert Generation model)"),T3o=l(),n1=a("li"),Ude=a("strong"),M3o=o("big_bird"),E3o=o(" \u2014 "),Nj=a("a"),C3o=o("BigBirdForCausalLM"),w3o=o(" (BigBird model)"),A3o=l(),s1=a("li"),Jde=a("strong"),y3o=o("bigbird_pegasus"),L3o=o(" \u2014 "),qj=a("a"),x3o=o("BigBirdPegasusForCausalLM"),$3o=o(" (BigBirdPegasus model)"),k3o=l(),l1=a("li"),Yde=a("strong"),S3o=o("blenderbot"),R3o=o(" \u2014 "),jj=a("a"),P3o=o("BlenderbotForCausalLM"),B3o=o(" (Blenderbot model)"),I3o=l(),i1=a("li"),Kde=a("strong"),N3o=o("blenderbot-small"),q3o=o(" \u2014 "),Dj=a("a"),j3o=o("BlenderbotSmallForCausalLM"),D3o=o(" (BlenderbotSmall model)"),G3o=l(),d1=a("li"),Zde=a("strong"),O3o=o("camembert"),V3o=o(" \u2014 "),Gj=a("a"),X3o=o("CamembertForCausalLM"),z3o=o(" (CamemBERT model)"),W3o=l(),c1=a("li"),ece=a("strong"),Q3o=o("ctrl"),H3o=o(" \u2014 "),Oj=a("a"),U3o=o("CTRLLMHeadModel"),J3o=o(" (CTRL model)"),Y3o=l(),f1=a("li"),oce=a("strong"),K3o=o("data2vec-text"),Z3o=o(" \u2014 "),Vj=a("a"),ewo=o("Data2VecTextForCausalLM"),owo=o(" (Data2VecText model)"),rwo=l(),m1=a("li"),rce=a("strong"),two=o("electra"),awo=o(" \u2014 "),Xj=a("a"),nwo=o("ElectraForCausalLM"),swo=o(" (ELECTRA model)"),lwo=l(),g1=a("li"),tce=a("strong"),iwo=o("gpt2"),dwo=o(" \u2014 "),zj=a("a"),cwo=o("GPT2LMHeadModel"),fwo=o(" (OpenAI GPT-2 model)"),mwo=l(),h1=a("li"),ace=a("strong"),gwo=o("gpt_neo"),hwo=o(" \u2014 "),Wj=a("a"),pwo=o("GPTNeoForCausalLM"),_wo=o(" (GPT Neo model)"),uwo=l(),p1=a("li"),nce=a("strong"),bwo=o("gpt_neox"),vwo=o(" \u2014 "),Qj=a("a"),Fwo=o("GPTNeoXForCausalLM"),Two=o(" (GPT NeoX model)"),Mwo=l(),_1=a("li"),sce=a("strong"),Ewo=o("gptj"),Cwo=o(" \u2014 "),Hj=a("a"),wwo=o("GPTJForCausalLM"),Awo=o(" (GPT-J model)"),ywo=l(),u1=a("li"),lce=a("strong"),Lwo=o("marian"),xwo=o(" \u2014 "),Uj=a("a"),$wo=o("MarianForCausalLM"),kwo=o(" (Marian model)"),Swo=l(),b1=a("li"),ice=a("strong"),Rwo=o("mbart"),Pwo=o(" \u2014 "),Jj=a("a"),Bwo=o("MBartForCausalLM"),Iwo=o(" (mBART model)"),Nwo=l(),v1=a("li"),dce=a("strong"),qwo=o("megatron-bert"),jwo=o(" \u2014 "),Yj=a("a"),Dwo=o("MegatronBertForCausalLM"),Gwo=o(" (MegatronBert model)"),Owo=l(),F1=a("li"),cce=a("strong"),Vwo=o("openai-gpt"),Xwo=o(" \u2014 "),Kj=a("a"),zwo=o("OpenAIGPTLMHeadModel"),Wwo=o(" (OpenAI GPT model)"),Qwo=l(),T1=a("li"),fce=a("strong"),Hwo=o("opt"),Uwo=o(" \u2014 "),Zj=a("a"),Jwo=o("OPTForCausalLM"),Ywo=o(" (OPT model)"),Kwo=l(),M1=a("li"),mce=a("strong"),Zwo=o("pegasus"),e0o=o(" \u2014 "),eD=a("a"),o0o=o("PegasusForCausalLM"),r0o=o(" (Pegasus model)"),t0o=l(),E1=a("li"),gce=a("strong"),a0o=o("plbart"),n0o=o(" \u2014 "),oD=a("a"),s0o=o("PLBartForCausalLM"),l0o=o(" (PLBart model)"),i0o=l(),C1=a("li"),hce=a("strong"),d0o=o("prophetnet"),c0o=o(" \u2014 "),rD=a("a"),f0o=o("ProphetNetForCausalLM"),m0o=o(" (ProphetNet model)"),g0o=l(),w1=a("li"),pce=a("strong"),h0o=o("qdqbert"),p0o=o(" \u2014 "),tD=a("a"),_0o=o("QDQBertLMHeadModel"),u0o=o(" (QDQBert model)"),b0o=l(),A1=a("li"),_ce=a("strong"),v0o=o("reformer"),F0o=o(" \u2014 "),aD=a("a"),T0o=o("ReformerModelWithLMHead"),M0o=o(" (Reformer model)"),E0o=l(),y1=a("li"),uce=a("strong"),C0o=o("rembert"),w0o=o(" \u2014 "),nD=a("a"),A0o=o("RemBertForCausalLM"),y0o=o(" (RemBERT model)"),L0o=l(),L1=a("li"),bce=a("strong"),x0o=o("roberta"),$0o=o(" \u2014 "),sD=a("a"),k0o=o("RobertaForCausalLM"),S0o=o(" (RoBERTa model)"),R0o=l(),x1=a("li"),vce=a("strong"),P0o=o("roformer"),B0o=o(" \u2014 "),lD=a("a"),I0o=o("RoFormerForCausalLM"),N0o=o(" (RoFormer model)"),q0o=l(),$1=a("li"),Fce=a("strong"),j0o=o("speech_to_text_2"),D0o=o(" \u2014 "),iD=a("a"),G0o=o("Speech2Text2ForCausalLM"),O0o=o(" (Speech2Text2 model)"),V0o=l(),k1=a("li"),Tce=a("strong"),X0o=o("transfo-xl"),z0o=o(" \u2014 "),dD=a("a"),W0o=o("TransfoXLLMHeadModel"),Q0o=o(" (Transformer-XL model)"),H0o=l(),S1=a("li"),Mce=a("strong"),U0o=o("trocr"),J0o=o(" \u2014 "),cD=a("a"),Y0o=o("TrOCRForCausalLM"),K0o=o(" (TrOCR model)"),Z0o=l(),R1=a("li"),Ece=a("strong"),eAo=o("xglm"),oAo=o(" \u2014 "),fD=a("a"),rAo=o("XGLMForCausalLM"),tAo=o(" (XGLM model)"),aAo=l(),P1=a("li"),Cce=a("strong"),nAo=o("xlm"),sAo=o(" \u2014 "),mD=a("a"),lAo=o("XLMWithLMHeadModel"),iAo=o(" (XLM model)"),dAo=l(),B1=a("li"),wce=a("strong"),cAo=o("xlm-prophetnet"),fAo=o(" \u2014 "),gD=a("a"),mAo=o("XLMProphetNetForCausalLM"),gAo=o(" (XLMProphetNet model)"),hAo=l(),I1=a("li"),Ace=a("strong"),pAo=o("xlm-roberta"),_Ao=o(" \u2014 "),hD=a("a"),uAo=o("XLMRobertaForCausalLM"),bAo=o(" (XLM-RoBERTa model)"),vAo=l(),N1=a("li"),yce=a("strong"),FAo=o("xlm-roberta-xl"),TAo=o(" \u2014 "),pD=a("a"),MAo=o("XLMRobertaXLForCausalLM"),EAo=o(" (XLM-RoBERTa-XL model)"),CAo=l(),q1=a("li"),Lce=a("strong"),wAo=o("xlnet"),AAo=o(" \u2014 "),_D=a("a"),yAo=o("XLNetLMHeadModel"),LAo=o(" (XLNet model)"),xAo=l(),j1=a("p"),$Ao=o("The model is set in evaluation mode by default using "),xce=a("code"),kAo=o("model.eval()"),SAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ce=a("code"),RAo=o("model.train()"),PAo=l(),F(D1.$$.fragment),Oqe=l(),Bi=a("h2"),G1=a("a"),kce=a("span"),F(Fy.$$.fragment),BAo=l(),Sce=a("span"),IAo=o("AutoModelForMaskedLM"),Vqe=l(),ko=a("div"),F(Ty.$$.fragment),NAo=l(),Ii=a("p"),qAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uD=a("a"),jAo=o("from_pretrained()"),DAo=o(" class method or the "),bD=a("a"),GAo=o("from_config()"),OAo=o(` class
method.`),VAo=l(),My=a("p"),XAo=o("This class cannot be instantiated directly using "),Rce=a("code"),zAo=o("__init__()"),WAo=o(" (throws an error)."),QAo=l(),st=a("div"),F(Ey.$$.fragment),HAo=l(),Pce=a("p"),UAo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),JAo=l(),Ni=a("p"),YAo=o(`Note:
Loading a model from its configuration file does `),Bce=a("strong"),KAo=o("not"),ZAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vD=a("a"),eyo=o("from_pretrained()"),oyo=o(" to load the model weights."),ryo=l(),F(O1.$$.fragment),tyo=l(),Ze=a("div"),F(Cy.$$.fragment),ayo=l(),Ice=a("p"),nyo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),syo=l(),ka=a("p"),lyo=o("The model class to instantiate is selected based on the "),Nce=a("code"),iyo=o("model_type"),dyo=o(` property of the config object (either
passed as an argument or loaded from `),qce=a("code"),cyo=o("pretrained_model_name_or_path"),fyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jce=a("code"),myo=o("pretrained_model_name_or_path"),gyo=o(":"),hyo=l(),Q=a("ul"),V1=a("li"),Dce=a("strong"),pyo=o("albert"),_yo=o(" \u2014 "),FD=a("a"),uyo=o("AlbertForMaskedLM"),byo=o(" (ALBERT model)"),vyo=l(),X1=a("li"),Gce=a("strong"),Fyo=o("bart"),Tyo=o(" \u2014 "),TD=a("a"),Myo=o("BartForConditionalGeneration"),Eyo=o(" (BART model)"),Cyo=l(),z1=a("li"),Oce=a("strong"),wyo=o("bert"),Ayo=o(" \u2014 "),MD=a("a"),yyo=o("BertForMaskedLM"),Lyo=o(" (BERT model)"),xyo=l(),W1=a("li"),Vce=a("strong"),$yo=o("big_bird"),kyo=o(" \u2014 "),ED=a("a"),Syo=o("BigBirdForMaskedLM"),Ryo=o(" (BigBird model)"),Pyo=l(),Q1=a("li"),Xce=a("strong"),Byo=o("camembert"),Iyo=o(" \u2014 "),CD=a("a"),Nyo=o("CamembertForMaskedLM"),qyo=o(" (CamemBERT model)"),jyo=l(),H1=a("li"),zce=a("strong"),Dyo=o("convbert"),Gyo=o(" \u2014 "),wD=a("a"),Oyo=o("ConvBertForMaskedLM"),Vyo=o(" (ConvBERT model)"),Xyo=l(),U1=a("li"),Wce=a("strong"),zyo=o("data2vec-text"),Wyo=o(" \u2014 "),AD=a("a"),Qyo=o("Data2VecTextForMaskedLM"),Hyo=o(" (Data2VecText model)"),Uyo=l(),J1=a("li"),Qce=a("strong"),Jyo=o("deberta"),Yyo=o(" \u2014 "),yD=a("a"),Kyo=o("DebertaForMaskedLM"),Zyo=o(" (DeBERTa model)"),eLo=l(),Y1=a("li"),Hce=a("strong"),oLo=o("deberta-v2"),rLo=o(" \u2014 "),LD=a("a"),tLo=o("DebertaV2ForMaskedLM"),aLo=o(" (DeBERTa-v2 model)"),nLo=l(),K1=a("li"),Uce=a("strong"),sLo=o("distilbert"),lLo=o(" \u2014 "),xD=a("a"),iLo=o("DistilBertForMaskedLM"),dLo=o(" (DistilBERT model)"),cLo=l(),Z1=a("li"),Jce=a("strong"),fLo=o("electra"),mLo=o(" \u2014 "),$D=a("a"),gLo=o("ElectraForMaskedLM"),hLo=o(" (ELECTRA model)"),pLo=l(),eb=a("li"),Yce=a("strong"),_Lo=o("flaubert"),uLo=o(" \u2014 "),kD=a("a"),bLo=o("FlaubertWithLMHeadModel"),vLo=o(" (FlauBERT model)"),FLo=l(),ob=a("li"),Kce=a("strong"),TLo=o("fnet"),MLo=o(" \u2014 "),SD=a("a"),ELo=o("FNetForMaskedLM"),CLo=o(" (FNet model)"),wLo=l(),rb=a("li"),Zce=a("strong"),ALo=o("funnel"),yLo=o(" \u2014 "),RD=a("a"),LLo=o("FunnelForMaskedLM"),xLo=o(" (Funnel Transformer model)"),$Lo=l(),tb=a("li"),efe=a("strong"),kLo=o("ibert"),SLo=o(" \u2014 "),PD=a("a"),RLo=o("IBertForMaskedLM"),PLo=o(" (I-BERT model)"),BLo=l(),ab=a("li"),ofe=a("strong"),ILo=o("layoutlm"),NLo=o(" \u2014 "),BD=a("a"),qLo=o("LayoutLMForMaskedLM"),jLo=o(" (LayoutLM model)"),DLo=l(),nb=a("li"),rfe=a("strong"),GLo=o("longformer"),OLo=o(" \u2014 "),ID=a("a"),VLo=o("LongformerForMaskedLM"),XLo=o(" (Longformer model)"),zLo=l(),sb=a("li"),tfe=a("strong"),WLo=o("mbart"),QLo=o(" \u2014 "),ND=a("a"),HLo=o("MBartForConditionalGeneration"),ULo=o(" (mBART model)"),JLo=l(),lb=a("li"),afe=a("strong"),YLo=o("megatron-bert"),KLo=o(" \u2014 "),qD=a("a"),ZLo=o("MegatronBertForMaskedLM"),e8o=o(" (MegatronBert model)"),o8o=l(),ib=a("li"),nfe=a("strong"),r8o=o("mobilebert"),t8o=o(" \u2014 "),jD=a("a"),a8o=o("MobileBertForMaskedLM"),n8o=o(" (MobileBERT model)"),s8o=l(),db=a("li"),sfe=a("strong"),l8o=o("mpnet"),i8o=o(" \u2014 "),DD=a("a"),d8o=o("MPNetForMaskedLM"),c8o=o(" (MPNet model)"),f8o=l(),cb=a("li"),lfe=a("strong"),m8o=o("nystromformer"),g8o=o(" \u2014 "),GD=a("a"),h8o=o("NystromformerForMaskedLM"),p8o=o(" (Nystromformer model)"),_8o=l(),fb=a("li"),ife=a("strong"),u8o=o("perceiver"),b8o=o(" \u2014 "),OD=a("a"),v8o=o("PerceiverForMaskedLM"),F8o=o(" (Perceiver model)"),T8o=l(),mb=a("li"),dfe=a("strong"),M8o=o("qdqbert"),E8o=o(" \u2014 "),VD=a("a"),C8o=o("QDQBertForMaskedLM"),w8o=o(" (QDQBert model)"),A8o=l(),gb=a("li"),cfe=a("strong"),y8o=o("reformer"),L8o=o(" \u2014 "),XD=a("a"),x8o=o("ReformerForMaskedLM"),$8o=o(" (Reformer model)"),k8o=l(),hb=a("li"),ffe=a("strong"),S8o=o("rembert"),R8o=o(" \u2014 "),zD=a("a"),P8o=o("RemBertForMaskedLM"),B8o=o(" (RemBERT model)"),I8o=l(),pb=a("li"),mfe=a("strong"),N8o=o("roberta"),q8o=o(" \u2014 "),WD=a("a"),j8o=o("RobertaForMaskedLM"),D8o=o(" (RoBERTa model)"),G8o=l(),_b=a("li"),gfe=a("strong"),O8o=o("roformer"),V8o=o(" \u2014 "),QD=a("a"),X8o=o("RoFormerForMaskedLM"),z8o=o(" (RoFormer model)"),W8o=l(),ub=a("li"),hfe=a("strong"),Q8o=o("squeezebert"),H8o=o(" \u2014 "),HD=a("a"),U8o=o("SqueezeBertForMaskedLM"),J8o=o(" (SqueezeBERT model)"),Y8o=l(),bb=a("li"),pfe=a("strong"),K8o=o("tapas"),Z8o=o(" \u2014 "),UD=a("a"),e9o=o("TapasForMaskedLM"),o9o=o(" (TAPAS model)"),r9o=l(),vb=a("li"),_fe=a("strong"),t9o=o("wav2vec2"),a9o=o(" \u2014 "),ufe=a("code"),n9o=o("Wav2Vec2ForMaskedLM"),s9o=o(" (Wav2Vec2 model)"),l9o=l(),Fb=a("li"),bfe=a("strong"),i9o=o("xlm"),d9o=o(" \u2014 "),JD=a("a"),c9o=o("XLMWithLMHeadModel"),f9o=o(" (XLM model)"),m9o=l(),Tb=a("li"),vfe=a("strong"),g9o=o("xlm-roberta"),h9o=o(" \u2014 "),YD=a("a"),p9o=o("XLMRobertaForMaskedLM"),_9o=o(" (XLM-RoBERTa model)"),u9o=l(),Mb=a("li"),Ffe=a("strong"),b9o=o("xlm-roberta-xl"),v9o=o(" \u2014 "),KD=a("a"),F9o=o("XLMRobertaXLForMaskedLM"),T9o=o(" (XLM-RoBERTa-XL model)"),M9o=l(),Eb=a("li"),Tfe=a("strong"),E9o=o("yoso"),C9o=o(" \u2014 "),ZD=a("a"),w9o=o("YosoForMaskedLM"),A9o=o(" (YOSO model)"),y9o=l(),Cb=a("p"),L9o=o("The model is set in evaluation mode by default using "),Mfe=a("code"),x9o=o("model.eval()"),$9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Efe=a("code"),k9o=o("model.train()"),S9o=l(),F(wb.$$.fragment),Xqe=l(),qi=a("h2"),Ab=a("a"),Cfe=a("span"),F(wy.$$.fragment),R9o=l(),wfe=a("span"),P9o=o("AutoModelForSeq2SeqLM"),zqe=l(),So=a("div"),F(Ay.$$.fragment),B9o=l(),ji=a("p"),I9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),eG=a("a"),N9o=o("from_pretrained()"),q9o=o(" class method or the "),oG=a("a"),j9o=o("from_config()"),D9o=o(` class
method.`),G9o=l(),yy=a("p"),O9o=o("This class cannot be instantiated directly using "),Afe=a("code"),V9o=o("__init__()"),X9o=o(" (throws an error)."),z9o=l(),lt=a("div"),F(Ly.$$.fragment),W9o=l(),yfe=a("p"),Q9o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),H9o=l(),Di=a("p"),U9o=o(`Note:
Loading a model from its configuration file does `),Lfe=a("strong"),J9o=o("not"),Y9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rG=a("a"),K9o=o("from_pretrained()"),Z9o=o(" to load the model weights."),exo=l(),F(yb.$$.fragment),oxo=l(),eo=a("div"),F(xy.$$.fragment),rxo=l(),xfe=a("p"),txo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),axo=l(),Sa=a("p"),nxo=o("The model class to instantiate is selected based on the "),$fe=a("code"),sxo=o("model_type"),lxo=o(` property of the config object (either
passed as an argument or loaded from `),kfe=a("code"),ixo=o("pretrained_model_name_or_path"),dxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sfe=a("code"),cxo=o("pretrained_model_name_or_path"),fxo=o(":"),mxo=l(),ue=a("ul"),Lb=a("li"),Rfe=a("strong"),gxo=o("bart"),hxo=o(" \u2014 "),tG=a("a"),pxo=o("BartForConditionalGeneration"),_xo=o(" (BART model)"),uxo=l(),xb=a("li"),Pfe=a("strong"),bxo=o("bigbird_pegasus"),vxo=o(" \u2014 "),aG=a("a"),Fxo=o("BigBirdPegasusForConditionalGeneration"),Txo=o(" (BigBirdPegasus model)"),Mxo=l(),$b=a("li"),Bfe=a("strong"),Exo=o("blenderbot"),Cxo=o(" \u2014 "),nG=a("a"),wxo=o("BlenderbotForConditionalGeneration"),Axo=o(" (Blenderbot model)"),yxo=l(),kb=a("li"),Ife=a("strong"),Lxo=o("blenderbot-small"),xxo=o(" \u2014 "),sG=a("a"),$xo=o("BlenderbotSmallForConditionalGeneration"),kxo=o(" (BlenderbotSmall model)"),Sxo=l(),Sb=a("li"),Nfe=a("strong"),Rxo=o("encoder-decoder"),Pxo=o(" \u2014 "),lG=a("a"),Bxo=o("EncoderDecoderModel"),Ixo=o(" (Encoder decoder model)"),Nxo=l(),Rb=a("li"),qfe=a("strong"),qxo=o("fsmt"),jxo=o(" \u2014 "),iG=a("a"),Dxo=o("FSMTForConditionalGeneration"),Gxo=o(" (FairSeq Machine-Translation model)"),Oxo=l(),Pb=a("li"),jfe=a("strong"),Vxo=o("led"),Xxo=o(" \u2014 "),dG=a("a"),zxo=o("LEDForConditionalGeneration"),Wxo=o(" (LED model)"),Qxo=l(),Bb=a("li"),Dfe=a("strong"),Hxo=o("m2m_100"),Uxo=o(" \u2014 "),cG=a("a"),Jxo=o("M2M100ForConditionalGeneration"),Yxo=o(" (M2M100 model)"),Kxo=l(),Ib=a("li"),Gfe=a("strong"),Zxo=o("marian"),e$o=o(" \u2014 "),fG=a("a"),o$o=o("MarianMTModel"),r$o=o(" (Marian model)"),t$o=l(),Nb=a("li"),Ofe=a("strong"),a$o=o("mbart"),n$o=o(" \u2014 "),mG=a("a"),s$o=o("MBartForConditionalGeneration"),l$o=o(" (mBART model)"),i$o=l(),qb=a("li"),Vfe=a("strong"),d$o=o("mt5"),c$o=o(" \u2014 "),gG=a("a"),f$o=o("MT5ForConditionalGeneration"),m$o=o(" (mT5 model)"),g$o=l(),jb=a("li"),Xfe=a("strong"),h$o=o("pegasus"),p$o=o(" \u2014 "),hG=a("a"),_$o=o("PegasusForConditionalGeneration"),u$o=o(" (Pegasus model)"),b$o=l(),Db=a("li"),zfe=a("strong"),v$o=o("plbart"),F$o=o(" \u2014 "),pG=a("a"),T$o=o("PLBartForConditionalGeneration"),M$o=o(" (PLBart model)"),E$o=l(),Gb=a("li"),Wfe=a("strong"),C$o=o("prophetnet"),w$o=o(" \u2014 "),_G=a("a"),A$o=o("ProphetNetForConditionalGeneration"),y$o=o(" (ProphetNet model)"),L$o=l(),Ob=a("li"),Qfe=a("strong"),x$o=o("t5"),$$o=o(" \u2014 "),uG=a("a"),k$o=o("T5ForConditionalGeneration"),S$o=o(" (T5 model)"),R$o=l(),Vb=a("li"),Hfe=a("strong"),P$o=o("xlm-prophetnet"),B$o=o(" \u2014 "),bG=a("a"),I$o=o("XLMProphetNetForConditionalGeneration"),N$o=o(" (XLMProphetNet model)"),q$o=l(),Xb=a("p"),j$o=o("The model is set in evaluation mode by default using "),Ufe=a("code"),D$o=o("model.eval()"),G$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jfe=a("code"),O$o=o("model.train()"),V$o=l(),F(zb.$$.fragment),Wqe=l(),Gi=a("h2"),Wb=a("a"),Yfe=a("span"),F($y.$$.fragment),X$o=l(),Kfe=a("span"),z$o=o("AutoModelForSequenceClassification"),Qqe=l(),Ro=a("div"),F(ky.$$.fragment),W$o=l(),Oi=a("p"),Q$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),vG=a("a"),H$o=o("from_pretrained()"),U$o=o(" class method or the "),FG=a("a"),J$o=o("from_config()"),Y$o=o(` class
method.`),K$o=l(),Sy=a("p"),Z$o=o("This class cannot be instantiated directly using "),Zfe=a("code"),eko=o("__init__()"),oko=o(" (throws an error)."),rko=l(),it=a("div"),F(Ry.$$.fragment),tko=l(),eme=a("p"),ako=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),nko=l(),Vi=a("p"),sko=o(`Note:
Loading a model from its configuration file does `),ome=a("strong"),lko=o("not"),iko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TG=a("a"),dko=o("from_pretrained()"),cko=o(" to load the model weights."),fko=l(),F(Qb.$$.fragment),mko=l(),oo=a("div"),F(Py.$$.fragment),gko=l(),rme=a("p"),hko=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),pko=l(),Ra=a("p"),_ko=o("The model class to instantiate is selected based on the "),tme=a("code"),uko=o("model_type"),bko=o(` property of the config object (either
passed as an argument or loaded from `),ame=a("code"),vko=o("pretrained_model_name_or_path"),Fko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nme=a("code"),Tko=o("pretrained_model_name_or_path"),Mko=o(":"),Eko=l(),N=a("ul"),Hb=a("li"),sme=a("strong"),Cko=o("albert"),wko=o(" \u2014 "),MG=a("a"),Ako=o("AlbertForSequenceClassification"),yko=o(" (ALBERT model)"),Lko=l(),Ub=a("li"),lme=a("strong"),xko=o("bart"),$ko=o(" \u2014 "),EG=a("a"),kko=o("BartForSequenceClassification"),Sko=o(" (BART model)"),Rko=l(),Jb=a("li"),ime=a("strong"),Pko=o("bert"),Bko=o(" \u2014 "),CG=a("a"),Iko=o("BertForSequenceClassification"),Nko=o(" (BERT model)"),qko=l(),Yb=a("li"),dme=a("strong"),jko=o("big_bird"),Dko=o(" \u2014 "),wG=a("a"),Gko=o("BigBirdForSequenceClassification"),Oko=o(" (BigBird model)"),Vko=l(),Kb=a("li"),cme=a("strong"),Xko=o("bigbird_pegasus"),zko=o(" \u2014 "),AG=a("a"),Wko=o("BigBirdPegasusForSequenceClassification"),Qko=o(" (BigBirdPegasus model)"),Hko=l(),Zb=a("li"),fme=a("strong"),Uko=o("camembert"),Jko=o(" \u2014 "),yG=a("a"),Yko=o("CamembertForSequenceClassification"),Kko=o(" (CamemBERT model)"),Zko=l(),e2=a("li"),mme=a("strong"),eSo=o("canine"),oSo=o(" \u2014 "),LG=a("a"),rSo=o("CanineForSequenceClassification"),tSo=o(" (Canine model)"),aSo=l(),o2=a("li"),gme=a("strong"),nSo=o("convbert"),sSo=o(" \u2014 "),xG=a("a"),lSo=o("ConvBertForSequenceClassification"),iSo=o(" (ConvBERT model)"),dSo=l(),r2=a("li"),hme=a("strong"),cSo=o("ctrl"),fSo=o(" \u2014 "),$G=a("a"),mSo=o("CTRLForSequenceClassification"),gSo=o(" (CTRL model)"),hSo=l(),t2=a("li"),pme=a("strong"),pSo=o("data2vec-text"),_So=o(" \u2014 "),kG=a("a"),uSo=o("Data2VecTextForSequenceClassification"),bSo=o(" (Data2VecText model)"),vSo=l(),a2=a("li"),_me=a("strong"),FSo=o("deberta"),TSo=o(" \u2014 "),SG=a("a"),MSo=o("DebertaForSequenceClassification"),ESo=o(" (DeBERTa model)"),CSo=l(),n2=a("li"),ume=a("strong"),wSo=o("deberta-v2"),ASo=o(" \u2014 "),RG=a("a"),ySo=o("DebertaV2ForSequenceClassification"),LSo=o(" (DeBERTa-v2 model)"),xSo=l(),s2=a("li"),bme=a("strong"),$So=o("distilbert"),kSo=o(" \u2014 "),PG=a("a"),SSo=o("DistilBertForSequenceClassification"),RSo=o(" (DistilBERT model)"),PSo=l(),l2=a("li"),vme=a("strong"),BSo=o("electra"),ISo=o(" \u2014 "),BG=a("a"),NSo=o("ElectraForSequenceClassification"),qSo=o(" (ELECTRA model)"),jSo=l(),i2=a("li"),Fme=a("strong"),DSo=o("flaubert"),GSo=o(" \u2014 "),IG=a("a"),OSo=o("FlaubertForSequenceClassification"),VSo=o(" (FlauBERT model)"),XSo=l(),d2=a("li"),Tme=a("strong"),zSo=o("fnet"),WSo=o(" \u2014 "),NG=a("a"),QSo=o("FNetForSequenceClassification"),HSo=o(" (FNet model)"),USo=l(),c2=a("li"),Mme=a("strong"),JSo=o("funnel"),YSo=o(" \u2014 "),qG=a("a"),KSo=o("FunnelForSequenceClassification"),ZSo=o(" (Funnel Transformer model)"),eRo=l(),f2=a("li"),Eme=a("strong"),oRo=o("gpt2"),rRo=o(" \u2014 "),jG=a("a"),tRo=o("GPT2ForSequenceClassification"),aRo=o(" (OpenAI GPT-2 model)"),nRo=l(),m2=a("li"),Cme=a("strong"),sRo=o("gpt_neo"),lRo=o(" \u2014 "),DG=a("a"),iRo=o("GPTNeoForSequenceClassification"),dRo=o(" (GPT Neo model)"),cRo=l(),g2=a("li"),wme=a("strong"),fRo=o("gptj"),mRo=o(" \u2014 "),GG=a("a"),gRo=o("GPTJForSequenceClassification"),hRo=o(" (GPT-J model)"),pRo=l(),h2=a("li"),Ame=a("strong"),_Ro=o("ibert"),uRo=o(" \u2014 "),OG=a("a"),bRo=o("IBertForSequenceClassification"),vRo=o(" (I-BERT model)"),FRo=l(),p2=a("li"),yme=a("strong"),TRo=o("layoutlm"),MRo=o(" \u2014 "),VG=a("a"),ERo=o("LayoutLMForSequenceClassification"),CRo=o(" (LayoutLM model)"),wRo=l(),_2=a("li"),Lme=a("strong"),ARo=o("layoutlmv2"),yRo=o(" \u2014 "),XG=a("a"),LRo=o("LayoutLMv2ForSequenceClassification"),xRo=o(" (LayoutLMv2 model)"),$Ro=l(),u2=a("li"),xme=a("strong"),kRo=o("layoutlmv3"),SRo=o(" \u2014 "),zG=a("a"),RRo=o("LayoutLMv3ForSequenceClassification"),PRo=o(" (LayoutLMv3 model)"),BRo=l(),b2=a("li"),$me=a("strong"),IRo=o("led"),NRo=o(" \u2014 "),WG=a("a"),qRo=o("LEDForSequenceClassification"),jRo=o(" (LED model)"),DRo=l(),v2=a("li"),kme=a("strong"),GRo=o("longformer"),ORo=o(" \u2014 "),QG=a("a"),VRo=o("LongformerForSequenceClassification"),XRo=o(" (Longformer model)"),zRo=l(),F2=a("li"),Sme=a("strong"),WRo=o("mbart"),QRo=o(" \u2014 "),HG=a("a"),HRo=o("MBartForSequenceClassification"),URo=o(" (mBART model)"),JRo=l(),T2=a("li"),Rme=a("strong"),YRo=o("megatron-bert"),KRo=o(" \u2014 "),UG=a("a"),ZRo=o("MegatronBertForSequenceClassification"),ePo=o(" (MegatronBert model)"),oPo=l(),M2=a("li"),Pme=a("strong"),rPo=o("mobilebert"),tPo=o(" \u2014 "),JG=a("a"),aPo=o("MobileBertForSequenceClassification"),nPo=o(" (MobileBERT model)"),sPo=l(),E2=a("li"),Bme=a("strong"),lPo=o("mpnet"),iPo=o(" \u2014 "),YG=a("a"),dPo=o("MPNetForSequenceClassification"),cPo=o(" (MPNet model)"),fPo=l(),C2=a("li"),Ime=a("strong"),mPo=o("nystromformer"),gPo=o(" \u2014 "),KG=a("a"),hPo=o("NystromformerForSequenceClassification"),pPo=o(" (Nystromformer model)"),_Po=l(),w2=a("li"),Nme=a("strong"),uPo=o("openai-gpt"),bPo=o(" \u2014 "),ZG=a("a"),vPo=o("OpenAIGPTForSequenceClassification"),FPo=o(" (OpenAI GPT model)"),TPo=l(),A2=a("li"),qme=a("strong"),MPo=o("perceiver"),EPo=o(" \u2014 "),eO=a("a"),CPo=o("PerceiverForSequenceClassification"),wPo=o(" (Perceiver model)"),APo=l(),y2=a("li"),jme=a("strong"),yPo=o("plbart"),LPo=o(" \u2014 "),oO=a("a"),xPo=o("PLBartForSequenceClassification"),$Po=o(" (PLBart model)"),kPo=l(),L2=a("li"),Dme=a("strong"),SPo=o("qdqbert"),RPo=o(" \u2014 "),rO=a("a"),PPo=o("QDQBertForSequenceClassification"),BPo=o(" (QDQBert model)"),IPo=l(),x2=a("li"),Gme=a("strong"),NPo=o("reformer"),qPo=o(" \u2014 "),tO=a("a"),jPo=o("ReformerForSequenceClassification"),DPo=o(" (Reformer model)"),GPo=l(),$2=a("li"),Ome=a("strong"),OPo=o("rembert"),VPo=o(" \u2014 "),aO=a("a"),XPo=o("RemBertForSequenceClassification"),zPo=o(" (RemBERT model)"),WPo=l(),k2=a("li"),Vme=a("strong"),QPo=o("roberta"),HPo=o(" \u2014 "),nO=a("a"),UPo=o("RobertaForSequenceClassification"),JPo=o(" (RoBERTa model)"),YPo=l(),S2=a("li"),Xme=a("strong"),KPo=o("roformer"),ZPo=o(" \u2014 "),sO=a("a"),eBo=o("RoFormerForSequenceClassification"),oBo=o(" (RoFormer model)"),rBo=l(),R2=a("li"),zme=a("strong"),tBo=o("squeezebert"),aBo=o(" \u2014 "),lO=a("a"),nBo=o("SqueezeBertForSequenceClassification"),sBo=o(" (SqueezeBERT model)"),lBo=l(),P2=a("li"),Wme=a("strong"),iBo=o("tapas"),dBo=o(" \u2014 "),iO=a("a"),cBo=o("TapasForSequenceClassification"),fBo=o(" (TAPAS model)"),mBo=l(),B2=a("li"),Qme=a("strong"),gBo=o("transfo-xl"),hBo=o(" \u2014 "),dO=a("a"),pBo=o("TransfoXLForSequenceClassification"),_Bo=o(" (Transformer-XL model)"),uBo=l(),I2=a("li"),Hme=a("strong"),bBo=o("xlm"),vBo=o(" \u2014 "),cO=a("a"),FBo=o("XLMForSequenceClassification"),TBo=o(" (XLM model)"),MBo=l(),N2=a("li"),Ume=a("strong"),EBo=o("xlm-roberta"),CBo=o(" \u2014 "),fO=a("a"),wBo=o("XLMRobertaForSequenceClassification"),ABo=o(" (XLM-RoBERTa model)"),yBo=l(),q2=a("li"),Jme=a("strong"),LBo=o("xlm-roberta-xl"),xBo=o(" \u2014 "),mO=a("a"),$Bo=o("XLMRobertaXLForSequenceClassification"),kBo=o(" (XLM-RoBERTa-XL model)"),SBo=l(),j2=a("li"),Yme=a("strong"),RBo=o("xlnet"),PBo=o(" \u2014 "),gO=a("a"),BBo=o("XLNetForSequenceClassification"),IBo=o(" (XLNet model)"),NBo=l(),D2=a("li"),Kme=a("strong"),qBo=o("yoso"),jBo=o(" \u2014 "),hO=a("a"),DBo=o("YosoForSequenceClassification"),GBo=o(" (YOSO model)"),OBo=l(),G2=a("p"),VBo=o("The model is set in evaluation mode by default using "),Zme=a("code"),XBo=o("model.eval()"),zBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ege=a("code"),WBo=o("model.train()"),QBo=l(),F(O2.$$.fragment),Hqe=l(),Xi=a("h2"),V2=a("a"),oge=a("span"),F(By.$$.fragment),HBo=l(),rge=a("span"),UBo=o("AutoModelForMultipleChoice"),Uqe=l(),Po=a("div"),F(Iy.$$.fragment),JBo=l(),zi=a("p"),YBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),pO=a("a"),KBo=o("from_pretrained()"),ZBo=o(" class method or the "),_O=a("a"),eIo=o("from_config()"),oIo=o(` class
method.`),rIo=l(),Ny=a("p"),tIo=o("This class cannot be instantiated directly using "),tge=a("code"),aIo=o("__init__()"),nIo=o(" (throws an error)."),sIo=l(),dt=a("div"),F(qy.$$.fragment),lIo=l(),age=a("p"),iIo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),dIo=l(),Wi=a("p"),cIo=o(`Note:
Loading a model from its configuration file does `),nge=a("strong"),fIo=o("not"),mIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uO=a("a"),gIo=o("from_pretrained()"),hIo=o(" to load the model weights."),pIo=l(),F(X2.$$.fragment),_Io=l(),ro=a("div"),F(jy.$$.fragment),uIo=l(),sge=a("p"),bIo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),vIo=l(),Pa=a("p"),FIo=o("The model class to instantiate is selected based on the "),lge=a("code"),TIo=o("model_type"),MIo=o(` property of the config object (either
passed as an argument or loaded from `),ige=a("code"),EIo=o("pretrained_model_name_or_path"),CIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dge=a("code"),wIo=o("pretrained_model_name_or_path"),AIo=o(":"),yIo=l(),K=a("ul"),z2=a("li"),cge=a("strong"),LIo=o("albert"),xIo=o(" \u2014 "),bO=a("a"),$Io=o("AlbertForMultipleChoice"),kIo=o(" (ALBERT model)"),SIo=l(),W2=a("li"),fge=a("strong"),RIo=o("bert"),PIo=o(" \u2014 "),vO=a("a"),BIo=o("BertForMultipleChoice"),IIo=o(" (BERT model)"),NIo=l(),Q2=a("li"),mge=a("strong"),qIo=o("big_bird"),jIo=o(" \u2014 "),FO=a("a"),DIo=o("BigBirdForMultipleChoice"),GIo=o(" (BigBird model)"),OIo=l(),H2=a("li"),gge=a("strong"),VIo=o("camembert"),XIo=o(" \u2014 "),TO=a("a"),zIo=o("CamembertForMultipleChoice"),WIo=o(" (CamemBERT model)"),QIo=l(),U2=a("li"),hge=a("strong"),HIo=o("canine"),UIo=o(" \u2014 "),MO=a("a"),JIo=o("CanineForMultipleChoice"),YIo=o(" (Canine model)"),KIo=l(),J2=a("li"),pge=a("strong"),ZIo=o("convbert"),eNo=o(" \u2014 "),EO=a("a"),oNo=o("ConvBertForMultipleChoice"),rNo=o(" (ConvBERT model)"),tNo=l(),Y2=a("li"),_ge=a("strong"),aNo=o("data2vec-text"),nNo=o(" \u2014 "),CO=a("a"),sNo=o("Data2VecTextForMultipleChoice"),lNo=o(" (Data2VecText model)"),iNo=l(),K2=a("li"),uge=a("strong"),dNo=o("deberta-v2"),cNo=o(" \u2014 "),wO=a("a"),fNo=o("DebertaV2ForMultipleChoice"),mNo=o(" (DeBERTa-v2 model)"),gNo=l(),Z2=a("li"),bge=a("strong"),hNo=o("distilbert"),pNo=o(" \u2014 "),AO=a("a"),_No=o("DistilBertForMultipleChoice"),uNo=o(" (DistilBERT model)"),bNo=l(),e4=a("li"),vge=a("strong"),vNo=o("electra"),FNo=o(" \u2014 "),yO=a("a"),TNo=o("ElectraForMultipleChoice"),MNo=o(" (ELECTRA model)"),ENo=l(),o4=a("li"),Fge=a("strong"),CNo=o("flaubert"),wNo=o(" \u2014 "),LO=a("a"),ANo=o("FlaubertForMultipleChoice"),yNo=o(" (FlauBERT model)"),LNo=l(),r4=a("li"),Tge=a("strong"),xNo=o("fnet"),$No=o(" \u2014 "),xO=a("a"),kNo=o("FNetForMultipleChoice"),SNo=o(" (FNet model)"),RNo=l(),t4=a("li"),Mge=a("strong"),PNo=o("funnel"),BNo=o(" \u2014 "),$O=a("a"),INo=o("FunnelForMultipleChoice"),NNo=o(" (Funnel Transformer model)"),qNo=l(),a4=a("li"),Ege=a("strong"),jNo=o("greaselm"),DNo=o(" \u2014 "),kO=a("a"),GNo=o("GreaseLMForMultipleChoice"),ONo=o(" (GreaseLM model)"),VNo=l(),n4=a("li"),Cge=a("strong"),XNo=o("ibert"),zNo=o(" \u2014 "),SO=a("a"),WNo=o("IBertForMultipleChoice"),QNo=o(" (I-BERT model)"),HNo=l(),s4=a("li"),wge=a("strong"),UNo=o("longformer"),JNo=o(" \u2014 "),RO=a("a"),YNo=o("LongformerForMultipleChoice"),KNo=o(" (Longformer model)"),ZNo=l(),l4=a("li"),Age=a("strong"),eqo=o("megatron-bert"),oqo=o(" \u2014 "),PO=a("a"),rqo=o("MegatronBertForMultipleChoice"),tqo=o(" (MegatronBert model)"),aqo=l(),i4=a("li"),yge=a("strong"),nqo=o("mobilebert"),sqo=o(" \u2014 "),BO=a("a"),lqo=o("MobileBertForMultipleChoice"),iqo=o(" (MobileBERT model)"),dqo=l(),d4=a("li"),Lge=a("strong"),cqo=o("mpnet"),fqo=o(" \u2014 "),IO=a("a"),mqo=o("MPNetForMultipleChoice"),gqo=o(" (MPNet model)"),hqo=l(),c4=a("li"),xge=a("strong"),pqo=o("nystromformer"),_qo=o(" \u2014 "),NO=a("a"),uqo=o("NystromformerForMultipleChoice"),bqo=o(" (Nystromformer model)"),vqo=l(),f4=a("li"),$ge=a("strong"),Fqo=o("qdqbert"),Tqo=o(" \u2014 "),qO=a("a"),Mqo=o("QDQBertForMultipleChoice"),Eqo=o(" (QDQBert model)"),Cqo=l(),m4=a("li"),kge=a("strong"),wqo=o("rembert"),Aqo=o(" \u2014 "),jO=a("a"),yqo=o("RemBertForMultipleChoice"),Lqo=o(" (RemBERT model)"),xqo=l(),g4=a("li"),Sge=a("strong"),$qo=o("roberta"),kqo=o(" \u2014 "),DO=a("a"),Sqo=o("RobertaForMultipleChoice"),Rqo=o(" (RoBERTa model)"),Pqo=l(),h4=a("li"),Rge=a("strong"),Bqo=o("roformer"),Iqo=o(" \u2014 "),GO=a("a"),Nqo=o("RoFormerForMultipleChoice"),qqo=o(" (RoFormer model)"),jqo=l(),p4=a("li"),Pge=a("strong"),Dqo=o("squeezebert"),Gqo=o(" \u2014 "),OO=a("a"),Oqo=o("SqueezeBertForMultipleChoice"),Vqo=o(" (SqueezeBERT model)"),Xqo=l(),_4=a("li"),Bge=a("strong"),zqo=o("xlm"),Wqo=o(" \u2014 "),VO=a("a"),Qqo=o("XLMForMultipleChoice"),Hqo=o(" (XLM model)"),Uqo=l(),u4=a("li"),Ige=a("strong"),Jqo=o("xlm-roberta"),Yqo=o(" \u2014 "),XO=a("a"),Kqo=o("XLMRobertaForMultipleChoice"),Zqo=o(" (XLM-RoBERTa model)"),ejo=l(),b4=a("li"),Nge=a("strong"),ojo=o("xlm-roberta-xl"),rjo=o(" \u2014 "),zO=a("a"),tjo=o("XLMRobertaXLForMultipleChoice"),ajo=o(" (XLM-RoBERTa-XL model)"),njo=l(),v4=a("li"),qge=a("strong"),sjo=o("xlnet"),ljo=o(" \u2014 "),WO=a("a"),ijo=o("XLNetForMultipleChoice"),djo=o(" (XLNet model)"),cjo=l(),F4=a("li"),jge=a("strong"),fjo=o("yoso"),mjo=o(" \u2014 "),QO=a("a"),gjo=o("YosoForMultipleChoice"),hjo=o(" (YOSO model)"),pjo=l(),T4=a("p"),_jo=o("The model is set in evaluation mode by default using "),Dge=a("code"),ujo=o("model.eval()"),bjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gge=a("code"),vjo=o("model.train()"),Fjo=l(),F(M4.$$.fragment),Jqe=l(),Qi=a("h2"),E4=a("a"),Oge=a("span"),F(Dy.$$.fragment),Tjo=l(),Vge=a("span"),Mjo=o("AutoModelForNextSentencePrediction"),Yqe=l(),Bo=a("div"),F(Gy.$$.fragment),Ejo=l(),Hi=a("p"),Cjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),HO=a("a"),wjo=o("from_pretrained()"),Ajo=o(" class method or the "),UO=a("a"),yjo=o("from_config()"),Ljo=o(` class
method.`),xjo=l(),Oy=a("p"),$jo=o("This class cannot be instantiated directly using "),Xge=a("code"),kjo=o("__init__()"),Sjo=o(" (throws an error)."),Rjo=l(),ct=a("div"),F(Vy.$$.fragment),Pjo=l(),zge=a("p"),Bjo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Ijo=l(),Ui=a("p"),Njo=o(`Note:
Loading a model from its configuration file does `),Wge=a("strong"),qjo=o("not"),jjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JO=a("a"),Djo=o("from_pretrained()"),Gjo=o(" to load the model weights."),Ojo=l(),F(C4.$$.fragment),Vjo=l(),to=a("div"),F(Xy.$$.fragment),Xjo=l(),Qge=a("p"),zjo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Wjo=l(),Ba=a("p"),Qjo=o("The model class to instantiate is selected based on the "),Hge=a("code"),Hjo=o("model_type"),Ujo=o(` property of the config object (either
passed as an argument or loaded from `),Uge=a("code"),Jjo=o("pretrained_model_name_or_path"),Yjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jge=a("code"),Kjo=o("pretrained_model_name_or_path"),Zjo=o(":"),eDo=l(),Yr=a("ul"),w4=a("li"),Yge=a("strong"),oDo=o("bert"),rDo=o(" \u2014 "),YO=a("a"),tDo=o("BertForNextSentencePrediction"),aDo=o(" (BERT model)"),nDo=l(),A4=a("li"),Kge=a("strong"),sDo=o("fnet"),lDo=o(" \u2014 "),KO=a("a"),iDo=o("FNetForNextSentencePrediction"),dDo=o(" (FNet model)"),cDo=l(),y4=a("li"),Zge=a("strong"),fDo=o("megatron-bert"),mDo=o(" \u2014 "),ZO=a("a"),gDo=o("MegatronBertForNextSentencePrediction"),hDo=o(" (MegatronBert model)"),pDo=l(),L4=a("li"),ehe=a("strong"),_Do=o("mobilebert"),uDo=o(" \u2014 "),eV=a("a"),bDo=o("MobileBertForNextSentencePrediction"),vDo=o(" (MobileBERT model)"),FDo=l(),x4=a("li"),ohe=a("strong"),TDo=o("qdqbert"),MDo=o(" \u2014 "),oV=a("a"),EDo=o("QDQBertForNextSentencePrediction"),CDo=o(" (QDQBert model)"),wDo=l(),$4=a("p"),ADo=o("The model is set in evaluation mode by default using "),rhe=a("code"),yDo=o("model.eval()"),LDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),the=a("code"),xDo=o("model.train()"),$Do=l(),F(k4.$$.fragment),Kqe=l(),Ji=a("h2"),S4=a("a"),ahe=a("span"),F(zy.$$.fragment),kDo=l(),nhe=a("span"),SDo=o("AutoModelForTokenClassification"),Zqe=l(),Io=a("div"),F(Wy.$$.fragment),RDo=l(),Yi=a("p"),PDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rV=a("a"),BDo=o("from_pretrained()"),IDo=o(" class method or the "),tV=a("a"),NDo=o("from_config()"),qDo=o(` class
method.`),jDo=l(),Qy=a("p"),DDo=o("This class cannot be instantiated directly using "),she=a("code"),GDo=o("__init__()"),ODo=o(" (throws an error)."),VDo=l(),ft=a("div"),F(Hy.$$.fragment),XDo=l(),lhe=a("p"),zDo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),WDo=l(),Ki=a("p"),QDo=o(`Note:
Loading a model from its configuration file does `),ihe=a("strong"),HDo=o("not"),UDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aV=a("a"),JDo=o("from_pretrained()"),YDo=o(" to load the model weights."),KDo=l(),F(R4.$$.fragment),ZDo=l(),ao=a("div"),F(Uy.$$.fragment),eGo=l(),dhe=a("p"),oGo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),rGo=l(),Ia=a("p"),tGo=o("The model class to instantiate is selected based on the "),che=a("code"),aGo=o("model_type"),nGo=o(` property of the config object (either
passed as an argument or loaded from `),fhe=a("code"),sGo=o("pretrained_model_name_or_path"),lGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mhe=a("code"),iGo=o("pretrained_model_name_or_path"),dGo=o(":"),cGo=l(),H=a("ul"),P4=a("li"),ghe=a("strong"),fGo=o("albert"),mGo=o(" \u2014 "),nV=a("a"),gGo=o("AlbertForTokenClassification"),hGo=o(" (ALBERT model)"),pGo=l(),B4=a("li"),hhe=a("strong"),_Go=o("bert"),uGo=o(" \u2014 "),sV=a("a"),bGo=o("BertForTokenClassification"),vGo=o(" (BERT model)"),FGo=l(),I4=a("li"),phe=a("strong"),TGo=o("big_bird"),MGo=o(" \u2014 "),lV=a("a"),EGo=o("BigBirdForTokenClassification"),CGo=o(" (BigBird model)"),wGo=l(),N4=a("li"),_he=a("strong"),AGo=o("camembert"),yGo=o(" \u2014 "),iV=a("a"),LGo=o("CamembertForTokenClassification"),xGo=o(" (CamemBERT model)"),$Go=l(),q4=a("li"),uhe=a("strong"),kGo=o("canine"),SGo=o(" \u2014 "),dV=a("a"),RGo=o("CanineForTokenClassification"),PGo=o(" (Canine model)"),BGo=l(),j4=a("li"),bhe=a("strong"),IGo=o("convbert"),NGo=o(" \u2014 "),cV=a("a"),qGo=o("ConvBertForTokenClassification"),jGo=o(" (ConvBERT model)"),DGo=l(),D4=a("li"),vhe=a("strong"),GGo=o("data2vec-text"),OGo=o(" \u2014 "),fV=a("a"),VGo=o("Data2VecTextForTokenClassification"),XGo=o(" (Data2VecText model)"),zGo=l(),G4=a("li"),Fhe=a("strong"),WGo=o("deberta"),QGo=o(" \u2014 "),mV=a("a"),HGo=o("DebertaForTokenClassification"),UGo=o(" (DeBERTa model)"),JGo=l(),O4=a("li"),The=a("strong"),YGo=o("deberta-v2"),KGo=o(" \u2014 "),gV=a("a"),ZGo=o("DebertaV2ForTokenClassification"),eOo=o(" (DeBERTa-v2 model)"),oOo=l(),V4=a("li"),Mhe=a("strong"),rOo=o("distilbert"),tOo=o(" \u2014 "),hV=a("a"),aOo=o("DistilBertForTokenClassification"),nOo=o(" (DistilBERT model)"),sOo=l(),X4=a("li"),Ehe=a("strong"),lOo=o("electra"),iOo=o(" \u2014 "),pV=a("a"),dOo=o("ElectraForTokenClassification"),cOo=o(" (ELECTRA model)"),fOo=l(),z4=a("li"),Che=a("strong"),mOo=o("flaubert"),gOo=o(" \u2014 "),_V=a("a"),hOo=o("FlaubertForTokenClassification"),pOo=o(" (FlauBERT model)"),_Oo=l(),W4=a("li"),whe=a("strong"),uOo=o("fnet"),bOo=o(" \u2014 "),uV=a("a"),vOo=o("FNetForTokenClassification"),FOo=o(" (FNet model)"),TOo=l(),Q4=a("li"),Ahe=a("strong"),MOo=o("funnel"),EOo=o(" \u2014 "),bV=a("a"),COo=o("FunnelForTokenClassification"),wOo=o(" (Funnel Transformer model)"),AOo=l(),H4=a("li"),yhe=a("strong"),yOo=o("gpt2"),LOo=o(" \u2014 "),vV=a("a"),xOo=o("GPT2ForTokenClassification"),$Oo=o(" (OpenAI GPT-2 model)"),kOo=l(),U4=a("li"),Lhe=a("strong"),SOo=o("ibert"),ROo=o(" \u2014 "),FV=a("a"),POo=o("IBertForTokenClassification"),BOo=o(" (I-BERT model)"),IOo=l(),J4=a("li"),xhe=a("strong"),NOo=o("layoutlm"),qOo=o(" \u2014 "),TV=a("a"),jOo=o("LayoutLMForTokenClassification"),DOo=o(" (LayoutLM model)"),GOo=l(),Y4=a("li"),$he=a("strong"),OOo=o("layoutlmv2"),VOo=o(" \u2014 "),MV=a("a"),XOo=o("LayoutLMv2ForTokenClassification"),zOo=o(" (LayoutLMv2 model)"),WOo=l(),K4=a("li"),khe=a("strong"),QOo=o("layoutlmv3"),HOo=o(" \u2014 "),EV=a("a"),UOo=o("LayoutLMv3ForTokenClassification"),JOo=o(" (LayoutLMv3 model)"),YOo=l(),Z4=a("li"),She=a("strong"),KOo=o("longformer"),ZOo=o(" \u2014 "),CV=a("a"),eVo=o("LongformerForTokenClassification"),oVo=o(" (Longformer model)"),rVo=l(),ev=a("li"),Rhe=a("strong"),tVo=o("megatron-bert"),aVo=o(" \u2014 "),wV=a("a"),nVo=o("MegatronBertForTokenClassification"),sVo=o(" (MegatronBert model)"),lVo=l(),ov=a("li"),Phe=a("strong"),iVo=o("mobilebert"),dVo=o(" \u2014 "),AV=a("a"),cVo=o("MobileBertForTokenClassification"),fVo=o(" (MobileBERT model)"),mVo=l(),rv=a("li"),Bhe=a("strong"),gVo=o("mpnet"),hVo=o(" \u2014 "),yV=a("a"),pVo=o("MPNetForTokenClassification"),_Vo=o(" (MPNet model)"),uVo=l(),tv=a("li"),Ihe=a("strong"),bVo=o("nystromformer"),vVo=o(" \u2014 "),LV=a("a"),FVo=o("NystromformerForTokenClassification"),TVo=o(" (Nystromformer model)"),MVo=l(),av=a("li"),Nhe=a("strong"),EVo=o("qdqbert"),CVo=o(" \u2014 "),xV=a("a"),wVo=o("QDQBertForTokenClassification"),AVo=o(" (QDQBert model)"),yVo=l(),nv=a("li"),qhe=a("strong"),LVo=o("rembert"),xVo=o(" \u2014 "),$V=a("a"),$Vo=o("RemBertForTokenClassification"),kVo=o(" (RemBERT model)"),SVo=l(),sv=a("li"),jhe=a("strong"),RVo=o("roberta"),PVo=o(" \u2014 "),kV=a("a"),BVo=o("RobertaForTokenClassification"),IVo=o(" (RoBERTa model)"),NVo=l(),lv=a("li"),Dhe=a("strong"),qVo=o("roformer"),jVo=o(" \u2014 "),SV=a("a"),DVo=o("RoFormerForTokenClassification"),GVo=o(" (RoFormer model)"),OVo=l(),iv=a("li"),Ghe=a("strong"),VVo=o("squeezebert"),XVo=o(" \u2014 "),RV=a("a"),zVo=o("SqueezeBertForTokenClassification"),WVo=o(" (SqueezeBERT model)"),QVo=l(),dv=a("li"),Ohe=a("strong"),HVo=o("xlm"),UVo=o(" \u2014 "),PV=a("a"),JVo=o("XLMForTokenClassification"),YVo=o(" (XLM model)"),KVo=l(),cv=a("li"),Vhe=a("strong"),ZVo=o("xlm-roberta"),eXo=o(" \u2014 "),BV=a("a"),oXo=o("XLMRobertaForTokenClassification"),rXo=o(" (XLM-RoBERTa model)"),tXo=l(),fv=a("li"),Xhe=a("strong"),aXo=o("xlm-roberta-xl"),nXo=o(" \u2014 "),IV=a("a"),sXo=o("XLMRobertaXLForTokenClassification"),lXo=o(" (XLM-RoBERTa-XL model)"),iXo=l(),mv=a("li"),zhe=a("strong"),dXo=o("xlnet"),cXo=o(" \u2014 "),NV=a("a"),fXo=o("XLNetForTokenClassification"),mXo=o(" (XLNet model)"),gXo=l(),gv=a("li"),Whe=a("strong"),hXo=o("yoso"),pXo=o(" \u2014 "),qV=a("a"),_Xo=o("YosoForTokenClassification"),uXo=o(" (YOSO model)"),bXo=l(),hv=a("p"),vXo=o("The model is set in evaluation mode by default using "),Qhe=a("code"),FXo=o("model.eval()"),TXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hhe=a("code"),MXo=o("model.train()"),EXo=l(),F(pv.$$.fragment),eje=l(),Zi=a("h2"),_v=a("a"),Uhe=a("span"),F(Jy.$$.fragment),CXo=l(),Jhe=a("span"),wXo=o("AutoModelForQuestionAnswering"),oje=l(),No=a("div"),F(Yy.$$.fragment),AXo=l(),ed=a("p"),yXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),jV=a("a"),LXo=o("from_pretrained()"),xXo=o(" class method or the "),DV=a("a"),$Xo=o("from_config()"),kXo=o(` class
method.`),SXo=l(),Ky=a("p"),RXo=o("This class cannot be instantiated directly using "),Yhe=a("code"),PXo=o("__init__()"),BXo=o(" (throws an error)."),IXo=l(),mt=a("div"),F(Zy.$$.fragment),NXo=l(),Khe=a("p"),qXo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),jXo=l(),od=a("p"),DXo=o(`Note:
Loading a model from its configuration file does `),Zhe=a("strong"),GXo=o("not"),OXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GV=a("a"),VXo=o("from_pretrained()"),XXo=o(" to load the model weights."),zXo=l(),F(uv.$$.fragment),WXo=l(),no=a("div"),F(eL.$$.fragment),QXo=l(),epe=a("p"),HXo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),UXo=l(),Na=a("p"),JXo=o("The model class to instantiate is selected based on the "),ope=a("code"),YXo=o("model_type"),KXo=o(` property of the config object (either
passed as an argument or loaded from `),rpe=a("code"),ZXo=o("pretrained_model_name_or_path"),ezo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tpe=a("code"),ozo=o("pretrained_model_name_or_path"),rzo=o(":"),tzo=l(),V=a("ul"),bv=a("li"),ape=a("strong"),azo=o("albert"),nzo=o(" \u2014 "),OV=a("a"),szo=o("AlbertForQuestionAnswering"),lzo=o(" (ALBERT model)"),izo=l(),vv=a("li"),npe=a("strong"),dzo=o("bart"),czo=o(" \u2014 "),VV=a("a"),fzo=o("BartForQuestionAnswering"),mzo=o(" (BART model)"),gzo=l(),Fv=a("li"),spe=a("strong"),hzo=o("bert"),pzo=o(" \u2014 "),XV=a("a"),_zo=o("BertForQuestionAnswering"),uzo=o(" (BERT model)"),bzo=l(),Tv=a("li"),lpe=a("strong"),vzo=o("big_bird"),Fzo=o(" \u2014 "),zV=a("a"),Tzo=o("BigBirdForQuestionAnswering"),Mzo=o(" (BigBird model)"),Ezo=l(),Mv=a("li"),ipe=a("strong"),Czo=o("bigbird_pegasus"),wzo=o(" \u2014 "),WV=a("a"),Azo=o("BigBirdPegasusForQuestionAnswering"),yzo=o(" (BigBirdPegasus model)"),Lzo=l(),Ev=a("li"),dpe=a("strong"),xzo=o("camembert"),$zo=o(" \u2014 "),QV=a("a"),kzo=o("CamembertForQuestionAnswering"),Szo=o(" (CamemBERT model)"),Rzo=l(),Cv=a("li"),cpe=a("strong"),Pzo=o("canine"),Bzo=o(" \u2014 "),HV=a("a"),Izo=o("CanineForQuestionAnswering"),Nzo=o(" (Canine model)"),qzo=l(),wv=a("li"),fpe=a("strong"),jzo=o("convbert"),Dzo=o(" \u2014 "),UV=a("a"),Gzo=o("ConvBertForQuestionAnswering"),Ozo=o(" (ConvBERT model)"),Vzo=l(),Av=a("li"),mpe=a("strong"),Xzo=o("data2vec-text"),zzo=o(" \u2014 "),JV=a("a"),Wzo=o("Data2VecTextForQuestionAnswering"),Qzo=o(" (Data2VecText model)"),Hzo=l(),yv=a("li"),gpe=a("strong"),Uzo=o("deberta"),Jzo=o(" \u2014 "),YV=a("a"),Yzo=o("DebertaForQuestionAnswering"),Kzo=o(" (DeBERTa model)"),Zzo=l(),Lv=a("li"),hpe=a("strong"),eWo=o("deberta-v2"),oWo=o(" \u2014 "),KV=a("a"),rWo=o("DebertaV2ForQuestionAnswering"),tWo=o(" (DeBERTa-v2 model)"),aWo=l(),xv=a("li"),ppe=a("strong"),nWo=o("distilbert"),sWo=o(" \u2014 "),ZV=a("a"),lWo=o("DistilBertForQuestionAnswering"),iWo=o(" (DistilBERT model)"),dWo=l(),$v=a("li"),_pe=a("strong"),cWo=o("electra"),fWo=o(" \u2014 "),eX=a("a"),mWo=o("ElectraForQuestionAnswering"),gWo=o(" (ELECTRA model)"),hWo=l(),kv=a("li"),upe=a("strong"),pWo=o("flaubert"),_Wo=o(" \u2014 "),oX=a("a"),uWo=o("FlaubertForQuestionAnsweringSimple"),bWo=o(" (FlauBERT model)"),vWo=l(),Sv=a("li"),bpe=a("strong"),FWo=o("fnet"),TWo=o(" \u2014 "),rX=a("a"),MWo=o("FNetForQuestionAnswering"),EWo=o(" (FNet model)"),CWo=l(),Rv=a("li"),vpe=a("strong"),wWo=o("funnel"),AWo=o(" \u2014 "),tX=a("a"),yWo=o("FunnelForQuestionAnswering"),LWo=o(" (Funnel Transformer model)"),xWo=l(),Pv=a("li"),Fpe=a("strong"),$Wo=o("gptj"),kWo=o(" \u2014 "),aX=a("a"),SWo=o("GPTJForQuestionAnswering"),RWo=o(" (GPT-J model)"),PWo=l(),Bv=a("li"),Tpe=a("strong"),BWo=o("ibert"),IWo=o(" \u2014 "),nX=a("a"),NWo=o("IBertForQuestionAnswering"),qWo=o(" (I-BERT model)"),jWo=l(),Iv=a("li"),Mpe=a("strong"),DWo=o("layoutlmv2"),GWo=o(" \u2014 "),sX=a("a"),OWo=o("LayoutLMv2ForQuestionAnswering"),VWo=o(" (LayoutLMv2 model)"),XWo=l(),Nv=a("li"),Epe=a("strong"),zWo=o("layoutlmv3"),WWo=o(" \u2014 "),lX=a("a"),QWo=o("LayoutLMv3ForQuestionAnswering"),HWo=o(" (LayoutLMv3 model)"),UWo=l(),qv=a("li"),Cpe=a("strong"),JWo=o("led"),YWo=o(" \u2014 "),iX=a("a"),KWo=o("LEDForQuestionAnswering"),ZWo=o(" (LED model)"),eQo=l(),jv=a("li"),wpe=a("strong"),oQo=o("longformer"),rQo=o(" \u2014 "),dX=a("a"),tQo=o("LongformerForQuestionAnswering"),aQo=o(" (Longformer model)"),nQo=l(),Dv=a("li"),Ape=a("strong"),sQo=o("lxmert"),lQo=o(" \u2014 "),cX=a("a"),iQo=o("LxmertForQuestionAnswering"),dQo=o(" (LXMERT model)"),cQo=l(),Gv=a("li"),ype=a("strong"),fQo=o("mbart"),mQo=o(" \u2014 "),fX=a("a"),gQo=o("MBartForQuestionAnswering"),hQo=o(" (mBART model)"),pQo=l(),Ov=a("li"),Lpe=a("strong"),_Qo=o("megatron-bert"),uQo=o(" \u2014 "),mX=a("a"),bQo=o("MegatronBertForQuestionAnswering"),vQo=o(" (MegatronBert model)"),FQo=l(),Vv=a("li"),xpe=a("strong"),TQo=o("mobilebert"),MQo=o(" \u2014 "),gX=a("a"),EQo=o("MobileBertForQuestionAnswering"),CQo=o(" (MobileBERT model)"),wQo=l(),Xv=a("li"),$pe=a("strong"),AQo=o("mpnet"),yQo=o(" \u2014 "),hX=a("a"),LQo=o("MPNetForQuestionAnswering"),xQo=o(" (MPNet model)"),$Qo=l(),zv=a("li"),kpe=a("strong"),kQo=o("nystromformer"),SQo=o(" \u2014 "),pX=a("a"),RQo=o("NystromformerForQuestionAnswering"),PQo=o(" (Nystromformer model)"),BQo=l(),Wv=a("li"),Spe=a("strong"),IQo=o("qdqbert"),NQo=o(" \u2014 "),_X=a("a"),qQo=o("QDQBertForQuestionAnswering"),jQo=o(" (QDQBert model)"),DQo=l(),Qv=a("li"),Rpe=a("strong"),GQo=o("reformer"),OQo=o(" \u2014 "),uX=a("a"),VQo=o("ReformerForQuestionAnswering"),XQo=o(" (Reformer model)"),zQo=l(),Hv=a("li"),Ppe=a("strong"),WQo=o("rembert"),QQo=o(" \u2014 "),bX=a("a"),HQo=o("RemBertForQuestionAnswering"),UQo=o(" (RemBERT model)"),JQo=l(),Uv=a("li"),Bpe=a("strong"),YQo=o("roberta"),KQo=o(" \u2014 "),vX=a("a"),ZQo=o("RobertaForQuestionAnswering"),eHo=o(" (RoBERTa model)"),oHo=l(),Jv=a("li"),Ipe=a("strong"),rHo=o("roformer"),tHo=o(" \u2014 "),FX=a("a"),aHo=o("RoFormerForQuestionAnswering"),nHo=o(" (RoFormer model)"),sHo=l(),Yv=a("li"),Npe=a("strong"),lHo=o("splinter"),iHo=o(" \u2014 "),TX=a("a"),dHo=o("SplinterForQuestionAnswering"),cHo=o(" (Splinter model)"),fHo=l(),Kv=a("li"),qpe=a("strong"),mHo=o("squeezebert"),gHo=o(" \u2014 "),MX=a("a"),hHo=o("SqueezeBertForQuestionAnswering"),pHo=o(" (SqueezeBERT model)"),_Ho=l(),Zv=a("li"),jpe=a("strong"),uHo=o("xlm"),bHo=o(" \u2014 "),EX=a("a"),vHo=o("XLMForQuestionAnsweringSimple"),FHo=o(" (XLM model)"),THo=l(),eF=a("li"),Dpe=a("strong"),MHo=o("xlm-roberta"),EHo=o(" \u2014 "),CX=a("a"),CHo=o("XLMRobertaForQuestionAnswering"),wHo=o(" (XLM-RoBERTa model)"),AHo=l(),oF=a("li"),Gpe=a("strong"),yHo=o("xlm-roberta-xl"),LHo=o(" \u2014 "),wX=a("a"),xHo=o("XLMRobertaXLForQuestionAnswering"),$Ho=o(" (XLM-RoBERTa-XL model)"),kHo=l(),rF=a("li"),Ope=a("strong"),SHo=o("xlnet"),RHo=o(" \u2014 "),AX=a("a"),PHo=o("XLNetForQuestionAnsweringSimple"),BHo=o(" (XLNet model)"),IHo=l(),tF=a("li"),Vpe=a("strong"),NHo=o("yoso"),qHo=o(" \u2014 "),yX=a("a"),jHo=o("YosoForQuestionAnswering"),DHo=o(" (YOSO model)"),GHo=l(),aF=a("p"),OHo=o("The model is set in evaluation mode by default using "),Xpe=a("code"),VHo=o("model.eval()"),XHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zpe=a("code"),zHo=o("model.train()"),WHo=l(),F(nF.$$.fragment),rje=l(),rd=a("h2"),sF=a("a"),Wpe=a("span"),F(oL.$$.fragment),QHo=l(),Qpe=a("span"),HHo=o("AutoModelForTableQuestionAnswering"),tje=l(),qo=a("div"),F(rL.$$.fragment),UHo=l(),td=a("p"),JHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),LX=a("a"),YHo=o("from_pretrained()"),KHo=o(" class method or the "),xX=a("a"),ZHo=o("from_config()"),eUo=o(` class
method.`),oUo=l(),tL=a("p"),rUo=o("This class cannot be instantiated directly using "),Hpe=a("code"),tUo=o("__init__()"),aUo=o(" (throws an error)."),nUo=l(),gt=a("div"),F(aL.$$.fragment),sUo=l(),Upe=a("p"),lUo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),iUo=l(),ad=a("p"),dUo=o(`Note:
Loading a model from its configuration file does `),Jpe=a("strong"),cUo=o("not"),fUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=a("a"),mUo=o("from_pretrained()"),gUo=o(" to load the model weights."),hUo=l(),F(lF.$$.fragment),pUo=l(),so=a("div"),F(nL.$$.fragment),_Uo=l(),Ype=a("p"),uUo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),bUo=l(),qa=a("p"),vUo=o("The model class to instantiate is selected based on the "),Kpe=a("code"),FUo=o("model_type"),TUo=o(` property of the config object (either
passed as an argument or loaded from `),Zpe=a("code"),MUo=o("pretrained_model_name_or_path"),EUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e_e=a("code"),CUo=o("pretrained_model_name_or_path"),wUo=o(":"),AUo=l(),o_e=a("ul"),iF=a("li"),r_e=a("strong"),yUo=o("tapas"),LUo=o(" \u2014 "),kX=a("a"),xUo=o("TapasForQuestionAnswering"),$Uo=o(" (TAPAS model)"),kUo=l(),dF=a("p"),SUo=o("The model is set in evaluation mode by default using "),t_e=a("code"),RUo=o("model.eval()"),PUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a_e=a("code"),BUo=o("model.train()"),IUo=l(),F(cF.$$.fragment),aje=l(),nd=a("h2"),fF=a("a"),n_e=a("span"),F(sL.$$.fragment),NUo=l(),s_e=a("span"),qUo=o("AutoModelForImageClassification"),nje=l(),jo=a("div"),F(lL.$$.fragment),jUo=l(),sd=a("p"),DUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),SX=a("a"),GUo=o("from_pretrained()"),OUo=o(" class method or the "),RX=a("a"),VUo=o("from_config()"),XUo=o(` class
method.`),zUo=l(),iL=a("p"),WUo=o("This class cannot be instantiated directly using "),l_e=a("code"),QUo=o("__init__()"),HUo=o(" (throws an error)."),UUo=l(),ht=a("div"),F(dL.$$.fragment),JUo=l(),i_e=a("p"),YUo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),KUo=l(),ld=a("p"),ZUo=o(`Note:
Loading a model from its configuration file does `),d_e=a("strong"),eJo=o("not"),oJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=a("a"),rJo=o("from_pretrained()"),tJo=o(" to load the model weights."),aJo=l(),F(mF.$$.fragment),nJo=l(),lo=a("div"),F(cL.$$.fragment),sJo=l(),c_e=a("p"),lJo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),iJo=l(),ja=a("p"),dJo=o("The model class to instantiate is selected based on the "),f_e=a("code"),cJo=o("model_type"),fJo=o(` property of the config object (either
passed as an argument or loaded from `),m_e=a("code"),mJo=o("pretrained_model_name_or_path"),gJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g_e=a("code"),hJo=o("pretrained_model_name_or_path"),pJo=o(":"),_Jo=l(),Fe=a("ul"),gF=a("li"),h_e=a("strong"),uJo=o("beit"),bJo=o(" \u2014 "),BX=a("a"),vJo=o("BeitForImageClassification"),FJo=o(" (BEiT model)"),TJo=l(),hF=a("li"),p_e=a("strong"),MJo=o("convnext"),EJo=o(" \u2014 "),IX=a("a"),CJo=o("ConvNextForImageClassification"),wJo=o(" (ConvNext model)"),AJo=l(),pF=a("li"),__e=a("strong"),yJo=o("cvt"),LJo=o(" \u2014 "),NX=a("a"),xJo=o("CvtForImageClassification"),$Jo=o(" (CvT model)"),kJo=l(),_F=a("li"),u_e=a("strong"),SJo=o("data2vec-vision"),RJo=o(" \u2014 "),qX=a("a"),PJo=o("Data2VecVisionForImageClassification"),BJo=o(" (Data2VecVision model)"),IJo=l(),Is=a("li"),b_e=a("strong"),NJo=o("deit"),qJo=o(" \u2014 "),jX=a("a"),jJo=o("DeiTForImageClassification"),DJo=o(" or "),DX=a("a"),GJo=o("DeiTForImageClassificationWithTeacher"),OJo=o(" (DeiT model)"),VJo=l(),uF=a("li"),v_e=a("strong"),XJo=o("imagegpt"),zJo=o(" \u2014 "),GX=a("a"),WJo=o("ImageGPTForImageClassification"),QJo=o(" (ImageGPT model)"),HJo=l(),pt=a("li"),F_e=a("strong"),UJo=o("perceiver"),JJo=o(" \u2014 "),OX=a("a"),YJo=o("PerceiverForImageClassificationLearned"),KJo=o(" or "),VX=a("a"),ZJo=o("PerceiverForImageClassificationFourier"),eYo=o(" or "),XX=a("a"),oYo=o("PerceiverForImageClassificationConvProcessing"),rYo=o(" (Perceiver model)"),tYo=l(),bF=a("li"),T_e=a("strong"),aYo=o("poolformer"),nYo=o(" \u2014 "),zX=a("a"),sYo=o("PoolFormerForImageClassification"),lYo=o(" (PoolFormer model)"),iYo=l(),vF=a("li"),M_e=a("strong"),dYo=o("regnet"),cYo=o(" \u2014 "),WX=a("a"),fYo=o("RegNetForImageClassification"),mYo=o(" (RegNet model)"),gYo=l(),FF=a("li"),E_e=a("strong"),hYo=o("resnet"),pYo=o(" \u2014 "),QX=a("a"),_Yo=o("ResNetForImageClassification"),uYo=o(" (ResNet model)"),bYo=l(),TF=a("li"),C_e=a("strong"),vYo=o("segformer"),FYo=o(" \u2014 "),HX=a("a"),TYo=o("SegformerForImageClassification"),MYo=o(" (SegFormer model)"),EYo=l(),MF=a("li"),w_e=a("strong"),CYo=o("swin"),wYo=o(" \u2014 "),UX=a("a"),AYo=o("SwinForImageClassification"),yYo=o(" (Swin model)"),LYo=l(),EF=a("li"),A_e=a("strong"),xYo=o("van"),$Yo=o(" \u2014 "),JX=a("a"),kYo=o("VanForImageClassification"),SYo=o(" (VAN model)"),RYo=l(),CF=a("li"),y_e=a("strong"),PYo=o("vit"),BYo=o(" \u2014 "),YX=a("a"),IYo=o("ViTForImageClassification"),NYo=o(" (ViT model)"),qYo=l(),wF=a("p"),jYo=o("The model is set in evaluation mode by default using "),L_e=a("code"),DYo=o("model.eval()"),GYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x_e=a("code"),OYo=o("model.train()"),VYo=l(),F(AF.$$.fragment),sje=l(),id=a("h2"),yF=a("a"),$_e=a("span"),F(fL.$$.fragment),XYo=l(),k_e=a("span"),zYo=o("AutoModelForVision2Seq"),lje=l(),Do=a("div"),F(mL.$$.fragment),WYo=l(),dd=a("p"),QYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),KX=a("a"),HYo=o("from_pretrained()"),UYo=o(" class method or the "),ZX=a("a"),JYo=o("from_config()"),YYo=o(` class
method.`),KYo=l(),gL=a("p"),ZYo=o("This class cannot be instantiated directly using "),S_e=a("code"),eKo=o("__init__()"),oKo=o(" (throws an error)."),rKo=l(),_t=a("div"),F(hL.$$.fragment),tKo=l(),R_e=a("p"),aKo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),nKo=l(),cd=a("p"),sKo=o(`Note:
Loading a model from its configuration file does `),P_e=a("strong"),lKo=o("not"),iKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ez=a("a"),dKo=o("from_pretrained()"),cKo=o(" to load the model weights."),fKo=l(),F(LF.$$.fragment),mKo=l(),io=a("div"),F(pL.$$.fragment),gKo=l(),B_e=a("p"),hKo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),pKo=l(),Da=a("p"),_Ko=o("The model class to instantiate is selected based on the "),I_e=a("code"),uKo=o("model_type"),bKo=o(` property of the config object (either
passed as an argument or loaded from `),N_e=a("code"),vKo=o("pretrained_model_name_or_path"),FKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q_e=a("code"),TKo=o("pretrained_model_name_or_path"),MKo=o(":"),EKo=l(),j_e=a("ul"),xF=a("li"),D_e=a("strong"),CKo=o("vision-encoder-decoder"),wKo=o(" \u2014 "),oz=a("a"),AKo=o("VisionEncoderDecoderModel"),yKo=o(" (Vision Encoder decoder model)"),LKo=l(),$F=a("p"),xKo=o("The model is set in evaluation mode by default using "),G_e=a("code"),$Ko=o("model.eval()"),kKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O_e=a("code"),SKo=o("model.train()"),RKo=l(),F(kF.$$.fragment),ije=l(),fd=a("h2"),SF=a("a"),V_e=a("span"),F(_L.$$.fragment),PKo=l(),X_e=a("span"),BKo=o("AutoModelForAudioClassification"),dje=l(),Go=a("div"),F(uL.$$.fragment),IKo=l(),md=a("p"),NKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),rz=a("a"),qKo=o("from_pretrained()"),jKo=o(" class method or the "),tz=a("a"),DKo=o("from_config()"),GKo=o(` class
method.`),OKo=l(),bL=a("p"),VKo=o("This class cannot be instantiated directly using "),z_e=a("code"),XKo=o("__init__()"),zKo=o(" (throws an error)."),WKo=l(),ut=a("div"),F(vL.$$.fragment),QKo=l(),W_e=a("p"),HKo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),UKo=l(),gd=a("p"),JKo=o(`Note:
Loading a model from its configuration file does `),Q_e=a("strong"),YKo=o("not"),KKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),az=a("a"),ZKo=o("from_pretrained()"),eZo=o(" to load the model weights."),oZo=l(),F(RF.$$.fragment),rZo=l(),co=a("div"),F(FL.$$.fragment),tZo=l(),H_e=a("p"),aZo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),nZo=l(),Ga=a("p"),sZo=o("The model class to instantiate is selected based on the "),U_e=a("code"),lZo=o("model_type"),iZo=o(` property of the config object (either
passed as an argument or loaded from `),J_e=a("code"),dZo=o("pretrained_model_name_or_path"),cZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y_e=a("code"),fZo=o("pretrained_model_name_or_path"),mZo=o(":"),gZo=l(),ke=a("ul"),PF=a("li"),K_e=a("strong"),hZo=o("data2vec-audio"),pZo=o(" \u2014 "),nz=a("a"),_Zo=o("Data2VecAudioForSequenceClassification"),uZo=o(" (Data2VecAudio model)"),bZo=l(),BF=a("li"),Z_e=a("strong"),vZo=o("hubert"),FZo=o(" \u2014 "),sz=a("a"),TZo=o("HubertForSequenceClassification"),MZo=o(" (Hubert model)"),EZo=l(),IF=a("li"),eue=a("strong"),CZo=o("sew"),wZo=o(" \u2014 "),lz=a("a"),AZo=o("SEWForSequenceClassification"),yZo=o(" (SEW model)"),LZo=l(),NF=a("li"),oue=a("strong"),xZo=o("sew-d"),$Zo=o(" \u2014 "),iz=a("a"),kZo=o("SEWDForSequenceClassification"),SZo=o(" (SEW-D model)"),RZo=l(),qF=a("li"),rue=a("strong"),PZo=o("unispeech"),BZo=o(" \u2014 "),dz=a("a"),IZo=o("UniSpeechForSequenceClassification"),NZo=o(" (UniSpeech model)"),qZo=l(),jF=a("li"),tue=a("strong"),jZo=o("unispeech-sat"),DZo=o(" \u2014 "),cz=a("a"),GZo=o("UniSpeechSatForSequenceClassification"),OZo=o(" (UniSpeechSat model)"),VZo=l(),DF=a("li"),aue=a("strong"),XZo=o("wav2vec2"),zZo=o(" \u2014 "),fz=a("a"),WZo=o("Wav2Vec2ForSequenceClassification"),QZo=o(" (Wav2Vec2 model)"),HZo=l(),GF=a("li"),nue=a("strong"),UZo=o("wav2vec2-conformer"),JZo=o(" \u2014 "),mz=a("a"),YZo=o("Wav2Vec2ConformerForSequenceClassification"),KZo=o(" (Wav2Vec2-Conformer model)"),ZZo=l(),OF=a("li"),sue=a("strong"),eer=o("wavlm"),oer=o(" \u2014 "),gz=a("a"),rer=o("WavLMForSequenceClassification"),ter=o(" (WavLM model)"),aer=l(),VF=a("p"),ner=o("The model is set in evaluation mode by default using "),lue=a("code"),ser=o("model.eval()"),ler=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iue=a("code"),ier=o("model.train()"),der=l(),F(XF.$$.fragment),cje=l(),hd=a("h2"),zF=a("a"),due=a("span"),F(TL.$$.fragment),cer=l(),cue=a("span"),fer=o("AutoModelForAudioFrameClassification"),fje=l(),Oo=a("div"),F(ML.$$.fragment),mer=l(),pd=a("p"),ger=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),hz=a("a"),her=o("from_pretrained()"),per=o(" class method or the "),pz=a("a"),_er=o("from_config()"),uer=o(` class
method.`),ber=l(),EL=a("p"),ver=o("This class cannot be instantiated directly using "),fue=a("code"),Fer=o("__init__()"),Ter=o(" (throws an error)."),Mer=l(),bt=a("div"),F(CL.$$.fragment),Eer=l(),mue=a("p"),Cer=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),wer=l(),_d=a("p"),Aer=o(`Note:
Loading a model from its configuration file does `),gue=a("strong"),yer=o("not"),Ler=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=a("a"),xer=o("from_pretrained()"),$er=o(" to load the model weights."),ker=l(),F(WF.$$.fragment),Ser=l(),fo=a("div"),F(wL.$$.fragment),Rer=l(),hue=a("p"),Per=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Ber=l(),Oa=a("p"),Ier=o("The model class to instantiate is selected based on the "),pue=a("code"),Ner=o("model_type"),qer=o(` property of the config object (either
passed as an argument or loaded from `),_ue=a("code"),jer=o("pretrained_model_name_or_path"),Der=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=a("code"),Ger=o("pretrained_model_name_or_path"),Oer=o(":"),Ver=l(),Kr=a("ul"),QF=a("li"),bue=a("strong"),Xer=o("data2vec-audio"),zer=o(" \u2014 "),uz=a("a"),Wer=o("Data2VecAudioForAudioFrameClassification"),Qer=o(" (Data2VecAudio model)"),Her=l(),HF=a("li"),vue=a("strong"),Uer=o("unispeech-sat"),Jer=o(" \u2014 "),bz=a("a"),Yer=o("UniSpeechSatForAudioFrameClassification"),Ker=o(" (UniSpeechSat model)"),Zer=l(),UF=a("li"),Fue=a("strong"),eor=o("wav2vec2"),oor=o(" \u2014 "),vz=a("a"),ror=o("Wav2Vec2ForAudioFrameClassification"),tor=o(" (Wav2Vec2 model)"),aor=l(),JF=a("li"),Tue=a("strong"),nor=o("wav2vec2-conformer"),sor=o(" \u2014 "),Fz=a("a"),lor=o("Wav2Vec2ConformerForAudioFrameClassification"),ior=o(" (Wav2Vec2-Conformer model)"),dor=l(),YF=a("li"),Mue=a("strong"),cor=o("wavlm"),mor=o(" \u2014 "),Tz=a("a"),gor=o("WavLMForAudioFrameClassification"),hor=o(" (WavLM model)"),por=l(),KF=a("p"),_or=o("The model is set in evaluation mode by default using "),Eue=a("code"),uor=o("model.eval()"),bor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cue=a("code"),vor=o("model.train()"),For=l(),F(ZF.$$.fragment),mje=l(),ud=a("h2"),e6=a("a"),wue=a("span"),F(AL.$$.fragment),Tor=l(),Aue=a("span"),Mor=o("AutoModelForCTC"),gje=l(),Vo=a("div"),F(yL.$$.fragment),Eor=l(),bd=a("p"),Cor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Mz=a("a"),wor=o("from_pretrained()"),Aor=o(" class method or the "),Ez=a("a"),yor=o("from_config()"),Lor=o(` class
method.`),xor=l(),LL=a("p"),$or=o("This class cannot be instantiated directly using "),yue=a("code"),kor=o("__init__()"),Sor=o(" (throws an error)."),Ror=l(),vt=a("div"),F(xL.$$.fragment),Por=l(),Lue=a("p"),Bor=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Ior=l(),vd=a("p"),Nor=o(`Note:
Loading a model from its configuration file does `),xue=a("strong"),qor=o("not"),jor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cz=a("a"),Dor=o("from_pretrained()"),Gor=o(" to load the model weights."),Oor=l(),F(o6.$$.fragment),Vor=l(),mo=a("div"),F($L.$$.fragment),Xor=l(),$ue=a("p"),zor=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Wor=l(),Va=a("p"),Qor=o("The model class to instantiate is selected based on the "),kue=a("code"),Hor=o("model_type"),Uor=o(` property of the config object (either
passed as an argument or loaded from `),Sue=a("code"),Jor=o("pretrained_model_name_or_path"),Yor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rue=a("code"),Kor=o("pretrained_model_name_or_path"),Zor=o(":"),err=l(),Se=a("ul"),r6=a("li"),Pue=a("strong"),orr=o("data2vec-audio"),rrr=o(" \u2014 "),wz=a("a"),trr=o("Data2VecAudioForCTC"),arr=o(" (Data2VecAudio model)"),nrr=l(),t6=a("li"),Bue=a("strong"),srr=o("hubert"),lrr=o(" \u2014 "),Az=a("a"),irr=o("HubertForCTC"),drr=o(" (Hubert model)"),crr=l(),a6=a("li"),Iue=a("strong"),frr=o("sew"),mrr=o(" \u2014 "),yz=a("a"),grr=o("SEWForCTC"),hrr=o(" (SEW model)"),prr=l(),n6=a("li"),Nue=a("strong"),_rr=o("sew-d"),urr=o(" \u2014 "),Lz=a("a"),brr=o("SEWDForCTC"),vrr=o(" (SEW-D model)"),Frr=l(),s6=a("li"),que=a("strong"),Trr=o("unispeech"),Mrr=o(" \u2014 "),xz=a("a"),Err=o("UniSpeechForCTC"),Crr=o(" (UniSpeech model)"),wrr=l(),l6=a("li"),jue=a("strong"),Arr=o("unispeech-sat"),yrr=o(" \u2014 "),$z=a("a"),Lrr=o("UniSpeechSatForCTC"),xrr=o(" (UniSpeechSat model)"),$rr=l(),i6=a("li"),Due=a("strong"),krr=o("wav2vec2"),Srr=o(" \u2014 "),kz=a("a"),Rrr=o("Wav2Vec2ForCTC"),Prr=o(" (Wav2Vec2 model)"),Brr=l(),d6=a("li"),Gue=a("strong"),Irr=o("wav2vec2-conformer"),Nrr=o(" \u2014 "),Sz=a("a"),qrr=o("Wav2Vec2ConformerForCTC"),jrr=o(" (Wav2Vec2-Conformer model)"),Drr=l(),c6=a("li"),Oue=a("strong"),Grr=o("wavlm"),Orr=o(" \u2014 "),Rz=a("a"),Vrr=o("WavLMForCTC"),Xrr=o(" (WavLM model)"),zrr=l(),f6=a("p"),Wrr=o("The model is set in evaluation mode by default using "),Vue=a("code"),Qrr=o("model.eval()"),Hrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xue=a("code"),Urr=o("model.train()"),Jrr=l(),F(m6.$$.fragment),hje=l(),Fd=a("h2"),g6=a("a"),zue=a("span"),F(kL.$$.fragment),Yrr=l(),Wue=a("span"),Krr=o("AutoModelForSpeechSeq2Seq"),pje=l(),Xo=a("div"),F(SL.$$.fragment),Zrr=l(),Td=a("p"),etr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Pz=a("a"),otr=o("from_pretrained()"),rtr=o(" class method or the "),Bz=a("a"),ttr=o("from_config()"),atr=o(` class
method.`),ntr=l(),RL=a("p"),str=o("This class cannot be instantiated directly using "),Que=a("code"),ltr=o("__init__()"),itr=o(" (throws an error)."),dtr=l(),Ft=a("div"),F(PL.$$.fragment),ctr=l(),Hue=a("p"),ftr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),mtr=l(),Md=a("p"),gtr=o(`Note:
Loading a model from its configuration file does `),Uue=a("strong"),htr=o("not"),ptr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Iz=a("a"),_tr=o("from_pretrained()"),utr=o(" to load the model weights."),btr=l(),F(h6.$$.fragment),vtr=l(),go=a("div"),F(BL.$$.fragment),Ftr=l(),Jue=a("p"),Ttr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Mtr=l(),Xa=a("p"),Etr=o("The model class to instantiate is selected based on the "),Yue=a("code"),Ctr=o("model_type"),wtr=o(` property of the config object (either
passed as an argument or loaded from `),Kue=a("code"),Atr=o("pretrained_model_name_or_path"),ytr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zue=a("code"),Ltr=o("pretrained_model_name_or_path"),xtr=o(":"),$tr=l(),IL=a("ul"),p6=a("li"),e1e=a("strong"),ktr=o("speech-encoder-decoder"),Str=o(" \u2014 "),Nz=a("a"),Rtr=o("SpeechEncoderDecoderModel"),Ptr=o(" (Speech Encoder decoder model)"),Btr=l(),_6=a("li"),o1e=a("strong"),Itr=o("speech_to_text"),Ntr=o(" \u2014 "),qz=a("a"),qtr=o("Speech2TextForConditionalGeneration"),jtr=o(" (Speech2Text model)"),Dtr=l(),u6=a("p"),Gtr=o("The model is set in evaluation mode by default using "),r1e=a("code"),Otr=o("model.eval()"),Vtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t1e=a("code"),Xtr=o("model.train()"),ztr=l(),F(b6.$$.fragment),_je=l(),Ed=a("h2"),v6=a("a"),a1e=a("span"),F(NL.$$.fragment),Wtr=l(),n1e=a("span"),Qtr=o("AutoModelForAudioXVector"),uje=l(),zo=a("div"),F(qL.$$.fragment),Htr=l(),Cd=a("p"),Utr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),jz=a("a"),Jtr=o("from_pretrained()"),Ytr=o(" class method or the "),Dz=a("a"),Ktr=o("from_config()"),Ztr=o(` class
method.`),ear=l(),jL=a("p"),oar=o("This class cannot be instantiated directly using "),s1e=a("code"),rar=o("__init__()"),tar=o(" (throws an error)."),aar=l(),Tt=a("div"),F(DL.$$.fragment),nar=l(),l1e=a("p"),sar=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),lar=l(),wd=a("p"),iar=o(`Note:
Loading a model from its configuration file does `),i1e=a("strong"),dar=o("not"),car=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=a("a"),far=o("from_pretrained()"),mar=o(" to load the model weights."),gar=l(),F(F6.$$.fragment),har=l(),ho=a("div"),F(GL.$$.fragment),par=l(),d1e=a("p"),_ar=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),uar=l(),za=a("p"),bar=o("The model class to instantiate is selected based on the "),c1e=a("code"),Far=o("model_type"),Tar=o(` property of the config object (either
passed as an argument or loaded from `),f1e=a("code"),Mar=o("pretrained_model_name_or_path"),Ear=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m1e=a("code"),Car=o("pretrained_model_name_or_path"),war=o(":"),Aar=l(),Zr=a("ul"),T6=a("li"),g1e=a("strong"),yar=o("data2vec-audio"),Lar=o(" \u2014 "),Oz=a("a"),xar=o("Data2VecAudioForXVector"),$ar=o(" (Data2VecAudio model)"),kar=l(),M6=a("li"),h1e=a("strong"),Sar=o("unispeech-sat"),Rar=o(" \u2014 "),Vz=a("a"),Par=o("UniSpeechSatForXVector"),Bar=o(" (UniSpeechSat model)"),Iar=l(),E6=a("li"),p1e=a("strong"),Nar=o("wav2vec2"),qar=o(" \u2014 "),Xz=a("a"),jar=o("Wav2Vec2ForXVector"),Dar=o(" (Wav2Vec2 model)"),Gar=l(),C6=a("li"),_1e=a("strong"),Oar=o("wav2vec2-conformer"),Var=o(" \u2014 "),zz=a("a"),Xar=o("Wav2Vec2ConformerForXVector"),zar=o(" (Wav2Vec2-Conformer model)"),War=l(),w6=a("li"),u1e=a("strong"),Qar=o("wavlm"),Har=o(" \u2014 "),Wz=a("a"),Uar=o("WavLMForXVector"),Jar=o(" (WavLM model)"),Yar=l(),A6=a("p"),Kar=o("The model is set in evaluation mode by default using "),b1e=a("code"),Zar=o("model.eval()"),enr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v1e=a("code"),onr=o("model.train()"),rnr=l(),F(y6.$$.fragment),bje=l(),Ad=a("h2"),L6=a("a"),F1e=a("span"),F(OL.$$.fragment),tnr=l(),T1e=a("span"),anr=o("AutoModelForMaskedImageModeling"),vje=l(),Wo=a("div"),F(VL.$$.fragment),nnr=l(),yd=a("p"),snr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Qz=a("a"),lnr=o("from_pretrained()"),inr=o(" class method or the "),Hz=a("a"),dnr=o("from_config()"),cnr=o(` class
method.`),fnr=l(),XL=a("p"),mnr=o("This class cannot be instantiated directly using "),M1e=a("code"),gnr=o("__init__()"),hnr=o(" (throws an error)."),pnr=l(),Mt=a("div"),F(zL.$$.fragment),_nr=l(),E1e=a("p"),unr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),bnr=l(),Ld=a("p"),vnr=o(`Note:
Loading a model from its configuration file does `),C1e=a("strong"),Fnr=o("not"),Tnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uz=a("a"),Mnr=o("from_pretrained()"),Enr=o(" to load the model weights."),Cnr=l(),F(x6.$$.fragment),wnr=l(),po=a("div"),F(WL.$$.fragment),Anr=l(),w1e=a("p"),ynr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Lnr=l(),Wa=a("p"),xnr=o("The model class to instantiate is selected based on the "),A1e=a("code"),$nr=o("model_type"),knr=o(` property of the config object (either
passed as an argument or loaded from `),y1e=a("code"),Snr=o("pretrained_model_name_or_path"),Rnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L1e=a("code"),Pnr=o("pretrained_model_name_or_path"),Bnr=o(":"),Inr=l(),xd=a("ul"),$6=a("li"),x1e=a("strong"),Nnr=o("deit"),qnr=o(" \u2014 "),Jz=a("a"),jnr=o("DeiTForMaskedImageModeling"),Dnr=o(" (DeiT model)"),Gnr=l(),k6=a("li"),$1e=a("strong"),Onr=o("swin"),Vnr=o(" \u2014 "),Yz=a("a"),Xnr=o("SwinForMaskedImageModeling"),znr=o(" (Swin model)"),Wnr=l(),S6=a("li"),k1e=a("strong"),Qnr=o("vit"),Hnr=o(" \u2014 "),Kz=a("a"),Unr=o("ViTForMaskedImageModeling"),Jnr=o(" (ViT model)"),Ynr=l(),R6=a("p"),Knr=o("The model is set in evaluation mode by default using "),S1e=a("code"),Znr=o("model.eval()"),esr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R1e=a("code"),osr=o("model.train()"),rsr=l(),F(P6.$$.fragment),Fje=l(),$d=a("h2"),B6=a("a"),P1e=a("span"),F(QL.$$.fragment),tsr=l(),B1e=a("span"),asr=o("AutoModelForObjectDetection"),Tje=l(),Qo=a("div"),F(HL.$$.fragment),nsr=l(),kd=a("p"),ssr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Zz=a("a"),lsr=o("from_pretrained()"),isr=o(" class method or the "),eW=a("a"),dsr=o("from_config()"),csr=o(` class
method.`),fsr=l(),UL=a("p"),msr=o("This class cannot be instantiated directly using "),I1e=a("code"),gsr=o("__init__()"),hsr=o(" (throws an error)."),psr=l(),Et=a("div"),F(JL.$$.fragment),_sr=l(),N1e=a("p"),usr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),bsr=l(),Sd=a("p"),vsr=o(`Note:
Loading a model from its configuration file does `),q1e=a("strong"),Fsr=o("not"),Tsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oW=a("a"),Msr=o("from_pretrained()"),Esr=o(" to load the model weights."),Csr=l(),F(I6.$$.fragment),wsr=l(),_o=a("div"),F(YL.$$.fragment),Asr=l(),j1e=a("p"),ysr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Lsr=l(),Qa=a("p"),xsr=o("The model class to instantiate is selected based on the "),D1e=a("code"),$sr=o("model_type"),ksr=o(` property of the config object (either
passed as an argument or loaded from `),G1e=a("code"),Ssr=o("pretrained_model_name_or_path"),Rsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O1e=a("code"),Psr=o("pretrained_model_name_or_path"),Bsr=o(":"),Isr=l(),KL=a("ul"),N6=a("li"),V1e=a("strong"),Nsr=o("detr"),qsr=o(" \u2014 "),rW=a("a"),jsr=o("DetrForObjectDetection"),Dsr=o(" (DETR model)"),Gsr=l(),q6=a("li"),X1e=a("strong"),Osr=o("yolos"),Vsr=o(" \u2014 "),tW=a("a"),Xsr=o("YolosForObjectDetection"),zsr=o(" (YOLOS model)"),Wsr=l(),j6=a("p"),Qsr=o("The model is set in evaluation mode by default using "),z1e=a("code"),Hsr=o("model.eval()"),Usr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W1e=a("code"),Jsr=o("model.train()"),Ysr=l(),F(D6.$$.fragment),Mje=l(),Rd=a("h2"),G6=a("a"),Q1e=a("span"),F(ZL.$$.fragment),Ksr=l(),H1e=a("span"),Zsr=o("AutoModelForImageSegmentation"),Eje=l(),Ho=a("div"),F(e8.$$.fragment),elr=l(),Pd=a("p"),olr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),aW=a("a"),rlr=o("from_pretrained()"),tlr=o(" class method or the "),nW=a("a"),alr=o("from_config()"),nlr=o(` class
method.`),slr=l(),o8=a("p"),llr=o("This class cannot be instantiated directly using "),U1e=a("code"),ilr=o("__init__()"),dlr=o(" (throws an error)."),clr=l(),Ct=a("div"),F(r8.$$.fragment),flr=l(),J1e=a("p"),mlr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),glr=l(),Bd=a("p"),hlr=o(`Note:
Loading a model from its configuration file does `),Y1e=a("strong"),plr=o("not"),_lr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sW=a("a"),ulr=o("from_pretrained()"),blr=o(" to load the model weights."),vlr=l(),F(O6.$$.fragment),Flr=l(),uo=a("div"),F(t8.$$.fragment),Tlr=l(),K1e=a("p"),Mlr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Elr=l(),Ha=a("p"),Clr=o("The model class to instantiate is selected based on the "),Z1e=a("code"),wlr=o("model_type"),Alr=o(` property of the config object (either
passed as an argument or loaded from `),ebe=a("code"),ylr=o("pretrained_model_name_or_path"),Llr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),obe=a("code"),xlr=o("pretrained_model_name_or_path"),$lr=o(":"),klr=l(),rbe=a("ul"),V6=a("li"),tbe=a("strong"),Slr=o("detr"),Rlr=o(" \u2014 "),lW=a("a"),Plr=o("DetrForSegmentation"),Blr=o(" (DETR model)"),Ilr=l(),X6=a("p"),Nlr=o("The model is set in evaluation mode by default using "),abe=a("code"),qlr=o("model.eval()"),jlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nbe=a("code"),Dlr=o("model.train()"),Glr=l(),F(z6.$$.fragment),Cje=l(),Id=a("h2"),W6=a("a"),sbe=a("span"),F(a8.$$.fragment),Olr=l(),lbe=a("span"),Vlr=o("AutoModelForSemanticSegmentation"),wje=l(),Uo=a("div"),F(n8.$$.fragment),Xlr=l(),Nd=a("p"),zlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),iW=a("a"),Wlr=o("from_pretrained()"),Qlr=o(" class method or the "),dW=a("a"),Hlr=o("from_config()"),Ulr=o(` class
method.`),Jlr=l(),s8=a("p"),Ylr=o("This class cannot be instantiated directly using "),ibe=a("code"),Klr=o("__init__()"),Zlr=o(" (throws an error)."),eir=l(),wt=a("div"),F(l8.$$.fragment),oir=l(),dbe=a("p"),rir=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),tir=l(),qd=a("p"),air=o(`Note:
Loading a model from its configuration file does `),cbe=a("strong"),nir=o("not"),sir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cW=a("a"),lir=o("from_pretrained()"),iir=o(" to load the model weights."),dir=l(),F(Q6.$$.fragment),cir=l(),bo=a("div"),F(i8.$$.fragment),fir=l(),fbe=a("p"),mir=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),gir=l(),Ua=a("p"),hir=o("The model class to instantiate is selected based on the "),mbe=a("code"),pir=o("model_type"),_ir=o(` property of the config object (either
passed as an argument or loaded from `),gbe=a("code"),uir=o("pretrained_model_name_or_path"),bir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hbe=a("code"),vir=o("pretrained_model_name_or_path"),Fir=o(":"),Tir=l(),Ja=a("ul"),H6=a("li"),pbe=a("strong"),Mir=o("beit"),Eir=o(" \u2014 "),fW=a("a"),Cir=o("BeitForSemanticSegmentation"),wir=o(" (BEiT model)"),Air=l(),U6=a("li"),_be=a("strong"),yir=o("data2vec-vision"),Lir=o(" \u2014 "),mW=a("a"),xir=o("Data2VecVisionForSemanticSegmentation"),$ir=o(" (Data2VecVision model)"),kir=l(),J6=a("li"),ube=a("strong"),Sir=o("dpt"),Rir=o(" \u2014 "),gW=a("a"),Pir=o("DPTForSemanticSegmentation"),Bir=o(" (DPT model)"),Iir=l(),Y6=a("li"),bbe=a("strong"),Nir=o("segformer"),qir=o(" \u2014 "),hW=a("a"),jir=o("SegformerForSemanticSegmentation"),Dir=o(" (SegFormer model)"),Gir=l(),K6=a("p"),Oir=o("The model is set in evaluation mode by default using "),vbe=a("code"),Vir=o("model.eval()"),Xir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fbe=a("code"),zir=o("model.train()"),Wir=l(),F(Z6.$$.fragment),Aje=l(),jd=a("h2"),eT=a("a"),Tbe=a("span"),F(d8.$$.fragment),Qir=l(),Mbe=a("span"),Hir=o("AutoModelForInstanceSegmentation"),yje=l(),Jo=a("div"),F(c8.$$.fragment),Uir=l(),Dd=a("p"),Jir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),pW=a("a"),Yir=o("from_pretrained()"),Kir=o(" class method or the "),_W=a("a"),Zir=o("from_config()"),edr=o(` class
method.`),odr=l(),f8=a("p"),rdr=o("This class cannot be instantiated directly using "),Ebe=a("code"),tdr=o("__init__()"),adr=o(" (throws an error)."),ndr=l(),At=a("div"),F(m8.$$.fragment),sdr=l(),Cbe=a("p"),ldr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),idr=l(),Gd=a("p"),ddr=o(`Note:
Loading a model from its configuration file does `),wbe=a("strong"),cdr=o("not"),fdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=a("a"),mdr=o("from_pretrained()"),gdr=o(" to load the model weights."),hdr=l(),F(oT.$$.fragment),pdr=l(),vo=a("div"),F(g8.$$.fragment),_dr=l(),Abe=a("p"),udr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),bdr=l(),Ya=a("p"),vdr=o("The model class to instantiate is selected based on the "),ybe=a("code"),Fdr=o("model_type"),Tdr=o(` property of the config object (either
passed as an argument or loaded from `),Lbe=a("code"),Mdr=o("pretrained_model_name_or_path"),Edr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=a("code"),Cdr=o("pretrained_model_name_or_path"),wdr=o(":"),Adr=l(),$be=a("ul"),rT=a("li"),kbe=a("strong"),ydr=o("maskformer"),Ldr=o(" \u2014 "),bW=a("a"),xdr=o("MaskFormerForInstanceSegmentation"),$dr=o(" (MaskFormer model)"),kdr=l(),tT=a("p"),Sdr=o("The model is set in evaluation mode by default using "),Sbe=a("code"),Rdr=o("model.eval()"),Pdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rbe=a("code"),Bdr=o("model.train()"),Idr=l(),F(aT.$$.fragment),Lje=l(),Od=a("h2"),nT=a("a"),Pbe=a("span"),F(h8.$$.fragment),Ndr=l(),Bbe=a("span"),qdr=o("TFAutoModel"),xje=l(),Yo=a("div"),F(p8.$$.fragment),jdr=l(),Vd=a("p"),Ddr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vW=a("a"),Gdr=o("from_pretrained()"),Odr=o(" class method or the "),FW=a("a"),Vdr=o("from_config()"),Xdr=o(` class
method.`),zdr=l(),_8=a("p"),Wdr=o("This class cannot be instantiated directly using "),Ibe=a("code"),Qdr=o("__init__()"),Hdr=o(" (throws an error)."),Udr=l(),yt=a("div"),F(u8.$$.fragment),Jdr=l(),Nbe=a("p"),Ydr=o("Instantiates one of the base model classes of the library from a configuration."),Kdr=l(),Xd=a("p"),Zdr=o(`Note:
Loading a model from its configuration file does `),qbe=a("strong"),ecr=o("not"),ocr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=a("a"),rcr=o("from_pretrained()"),tcr=o(" to load the model weights."),acr=l(),F(sT.$$.fragment),ncr=l(),wr=a("div"),F(b8.$$.fragment),scr=l(),jbe=a("p"),lcr=o("Instantiate one of the base model classes of the library from a pretrained model."),icr=l(),Ka=a("p"),dcr=o("The model class to instantiate is selected based on the "),Dbe=a("code"),ccr=o("model_type"),fcr=o(` property of the config object (either
passed as an argument or loaded from `),Gbe=a("code"),mcr=o("pretrained_model_name_or_path"),gcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Obe=a("code"),hcr=o("pretrained_model_name_or_path"),pcr=o(":"),_cr=l(),q=a("ul"),lT=a("li"),Vbe=a("strong"),ucr=o("albert"),bcr=o(" \u2014 "),MW=a("a"),vcr=o("TFAlbertModel"),Fcr=o(" (ALBERT model)"),Tcr=l(),iT=a("li"),Xbe=a("strong"),Mcr=o("bart"),Ecr=o(" \u2014 "),EW=a("a"),Ccr=o("TFBartModel"),wcr=o(" (BART model)"),Acr=l(),dT=a("li"),zbe=a("strong"),ycr=o("bert"),Lcr=o(" \u2014 "),CW=a("a"),xcr=o("TFBertModel"),$cr=o(" (BERT model)"),kcr=l(),cT=a("li"),Wbe=a("strong"),Scr=o("blenderbot"),Rcr=o(" \u2014 "),wW=a("a"),Pcr=o("TFBlenderbotModel"),Bcr=o(" (Blenderbot model)"),Icr=l(),fT=a("li"),Qbe=a("strong"),Ncr=o("blenderbot-small"),qcr=o(" \u2014 "),AW=a("a"),jcr=o("TFBlenderbotSmallModel"),Dcr=o(" (BlenderbotSmall model)"),Gcr=l(),mT=a("li"),Hbe=a("strong"),Ocr=o("camembert"),Vcr=o(" \u2014 "),yW=a("a"),Xcr=o("TFCamembertModel"),zcr=o(" (CamemBERT model)"),Wcr=l(),gT=a("li"),Ube=a("strong"),Qcr=o("clip"),Hcr=o(" \u2014 "),LW=a("a"),Ucr=o("TFCLIPModel"),Jcr=o(" (CLIP model)"),Ycr=l(),hT=a("li"),Jbe=a("strong"),Kcr=o("convbert"),Zcr=o(" \u2014 "),xW=a("a"),efr=o("TFConvBertModel"),ofr=o(" (ConvBERT model)"),rfr=l(),pT=a("li"),Ybe=a("strong"),tfr=o("convnext"),afr=o(" \u2014 "),$W=a("a"),nfr=o("TFConvNextModel"),sfr=o(" (ConvNext model)"),lfr=l(),_T=a("li"),Kbe=a("strong"),ifr=o("ctrl"),dfr=o(" \u2014 "),kW=a("a"),cfr=o("TFCTRLModel"),ffr=o(" (CTRL model)"),mfr=l(),uT=a("li"),Zbe=a("strong"),gfr=o("data2vec-vision"),hfr=o(" \u2014 "),SW=a("a"),pfr=o("TFData2VecVisionModel"),_fr=o(" (Data2VecVision model)"),ufr=l(),bT=a("li"),e2e=a("strong"),bfr=o("deberta"),vfr=o(" \u2014 "),RW=a("a"),Ffr=o("TFDebertaModel"),Tfr=o(" (DeBERTa model)"),Mfr=l(),vT=a("li"),o2e=a("strong"),Efr=o("deberta-v2"),Cfr=o(" \u2014 "),PW=a("a"),wfr=o("TFDebertaV2Model"),Afr=o(" (DeBERTa-v2 model)"),yfr=l(),FT=a("li"),r2e=a("strong"),Lfr=o("distilbert"),xfr=o(" \u2014 "),BW=a("a"),$fr=o("TFDistilBertModel"),kfr=o(" (DistilBERT model)"),Sfr=l(),TT=a("li"),t2e=a("strong"),Rfr=o("dpr"),Pfr=o(" \u2014 "),IW=a("a"),Bfr=o("TFDPRQuestionEncoder"),Ifr=o(" (DPR model)"),Nfr=l(),MT=a("li"),a2e=a("strong"),qfr=o("electra"),jfr=o(" \u2014 "),NW=a("a"),Dfr=o("TFElectraModel"),Gfr=o(" (ELECTRA model)"),Ofr=l(),ET=a("li"),n2e=a("strong"),Vfr=o("flaubert"),Xfr=o(" \u2014 "),qW=a("a"),zfr=o("TFFlaubertModel"),Wfr=o(" (FlauBERT model)"),Qfr=l(),Ns=a("li"),s2e=a("strong"),Hfr=o("funnel"),Ufr=o(" \u2014 "),jW=a("a"),Jfr=o("TFFunnelModel"),Yfr=o(" or "),DW=a("a"),Kfr=o("TFFunnelBaseModel"),Zfr=o(" (Funnel Transformer model)"),emr=l(),CT=a("li"),l2e=a("strong"),omr=o("gpt2"),rmr=o(" \u2014 "),GW=a("a"),tmr=o("TFGPT2Model"),amr=o(" (OpenAI GPT-2 model)"),nmr=l(),wT=a("li"),i2e=a("strong"),smr=o("gptj"),lmr=o(" \u2014 "),OW=a("a"),imr=o("TFGPTJModel"),dmr=o(" (GPT-J model)"),cmr=l(),AT=a("li"),d2e=a("strong"),fmr=o("hubert"),mmr=o(" \u2014 "),VW=a("a"),gmr=o("TFHubertModel"),hmr=o(" (Hubert model)"),pmr=l(),yT=a("li"),c2e=a("strong"),_mr=o("layoutlm"),umr=o(" \u2014 "),XW=a("a"),bmr=o("TFLayoutLMModel"),vmr=o(" (LayoutLM model)"),Fmr=l(),LT=a("li"),f2e=a("strong"),Tmr=o("led"),Mmr=o(" \u2014 "),zW=a("a"),Emr=o("TFLEDModel"),Cmr=o(" (LED model)"),wmr=l(),xT=a("li"),m2e=a("strong"),Amr=o("longformer"),ymr=o(" \u2014 "),WW=a("a"),Lmr=o("TFLongformerModel"),xmr=o(" (Longformer model)"),$mr=l(),$T=a("li"),g2e=a("strong"),kmr=o("lxmert"),Smr=o(" \u2014 "),QW=a("a"),Rmr=o("TFLxmertModel"),Pmr=o(" (LXMERT model)"),Bmr=l(),kT=a("li"),h2e=a("strong"),Imr=o("marian"),Nmr=o(" \u2014 "),HW=a("a"),qmr=o("TFMarianModel"),jmr=o(" (Marian model)"),Dmr=l(),ST=a("li"),p2e=a("strong"),Gmr=o("mbart"),Omr=o(" \u2014 "),UW=a("a"),Vmr=o("TFMBartModel"),Xmr=o(" (mBART model)"),zmr=l(),RT=a("li"),_2e=a("strong"),Wmr=o("mobilebert"),Qmr=o(" \u2014 "),JW=a("a"),Hmr=o("TFMobileBertModel"),Umr=o(" (MobileBERT model)"),Jmr=l(),PT=a("li"),u2e=a("strong"),Ymr=o("mpnet"),Kmr=o(" \u2014 "),YW=a("a"),Zmr=o("TFMPNetModel"),egr=o(" (MPNet model)"),ogr=l(),BT=a("li"),b2e=a("strong"),rgr=o("mt5"),tgr=o(" \u2014 "),KW=a("a"),agr=o("TFMT5Model"),ngr=o(" (mT5 model)"),sgr=l(),IT=a("li"),v2e=a("strong"),lgr=o("openai-gpt"),igr=o(" \u2014 "),ZW=a("a"),dgr=o("TFOpenAIGPTModel"),cgr=o(" (OpenAI GPT model)"),fgr=l(),NT=a("li"),F2e=a("strong"),mgr=o("pegasus"),ggr=o(" \u2014 "),eQ=a("a"),hgr=o("TFPegasusModel"),pgr=o(" (Pegasus model)"),_gr=l(),qT=a("li"),T2e=a("strong"),ugr=o("rembert"),bgr=o(" \u2014 "),oQ=a("a"),vgr=o("TFRemBertModel"),Fgr=o(" (RemBERT model)"),Tgr=l(),jT=a("li"),M2e=a("strong"),Mgr=o("roberta"),Egr=o(" \u2014 "),rQ=a("a"),Cgr=o("TFRobertaModel"),wgr=o(" (RoBERTa model)"),Agr=l(),DT=a("li"),E2e=a("strong"),ygr=o("roformer"),Lgr=o(" \u2014 "),tQ=a("a"),xgr=o("TFRoFormerModel"),$gr=o(" (RoFormer model)"),kgr=l(),GT=a("li"),C2e=a("strong"),Sgr=o("speech_to_text"),Rgr=o(" \u2014 "),aQ=a("a"),Pgr=o("TFSpeech2TextModel"),Bgr=o(" (Speech2Text model)"),Igr=l(),OT=a("li"),w2e=a("strong"),Ngr=o("swin"),qgr=o(" \u2014 "),nQ=a("a"),jgr=o("TFSwinModel"),Dgr=o(" (Swin model)"),Ggr=l(),VT=a("li"),A2e=a("strong"),Ogr=o("t5"),Vgr=o(" \u2014 "),sQ=a("a"),Xgr=o("TFT5Model"),zgr=o(" (T5 model)"),Wgr=l(),XT=a("li"),y2e=a("strong"),Qgr=o("tapas"),Hgr=o(" \u2014 "),lQ=a("a"),Ugr=o("TFTapasModel"),Jgr=o(" (TAPAS model)"),Ygr=l(),zT=a("li"),L2e=a("strong"),Kgr=o("transfo-xl"),Zgr=o(" \u2014 "),iQ=a("a"),ehr=o("TFTransfoXLModel"),ohr=o(" (Transformer-XL model)"),rhr=l(),WT=a("li"),x2e=a("strong"),thr=o("vit"),ahr=o(" \u2014 "),dQ=a("a"),nhr=o("TFViTModel"),shr=o(" (ViT model)"),lhr=l(),QT=a("li"),$2e=a("strong"),ihr=o("vit_mae"),dhr=o(" \u2014 "),cQ=a("a"),chr=o("TFViTMAEModel"),fhr=o(" (ViTMAE model)"),mhr=l(),HT=a("li"),k2e=a("strong"),ghr=o("wav2vec2"),hhr=o(" \u2014 "),fQ=a("a"),phr=o("TFWav2Vec2Model"),_hr=o(" (Wav2Vec2 model)"),uhr=l(),UT=a("li"),S2e=a("strong"),bhr=o("xlm"),vhr=o(" \u2014 "),mQ=a("a"),Fhr=o("TFXLMModel"),Thr=o(" (XLM model)"),Mhr=l(),JT=a("li"),R2e=a("strong"),Ehr=o("xlm-roberta"),Chr=o(" \u2014 "),gQ=a("a"),whr=o("TFXLMRobertaModel"),Ahr=o(" (XLM-RoBERTa model)"),yhr=l(),YT=a("li"),P2e=a("strong"),Lhr=o("xlnet"),xhr=o(" \u2014 "),hQ=a("a"),$hr=o("TFXLNetModel"),khr=o(" (XLNet model)"),Shr=l(),F(KT.$$.fragment),$je=l(),zd=a("h2"),ZT=a("a"),B2e=a("span"),F(v8.$$.fragment),Rhr=l(),I2e=a("span"),Phr=o("TFAutoModelForPreTraining"),kje=l(),Ko=a("div"),F(F8.$$.fragment),Bhr=l(),Wd=a("p"),Ihr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pQ=a("a"),Nhr=o("from_pretrained()"),qhr=o(" class method or the "),_Q=a("a"),jhr=o("from_config()"),Dhr=o(` class
method.`),Ghr=l(),T8=a("p"),Ohr=o("This class cannot be instantiated directly using "),N2e=a("code"),Vhr=o("__init__()"),Xhr=o(" (throws an error)."),zhr=l(),Lt=a("div"),F(M8.$$.fragment),Whr=l(),q2e=a("p"),Qhr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Hhr=l(),Qd=a("p"),Uhr=o(`Note:
Loading a model from its configuration file does `),j2e=a("strong"),Jhr=o("not"),Yhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=a("a"),Khr=o("from_pretrained()"),Zhr=o(" to load the model weights."),epr=l(),F(e7.$$.fragment),opr=l(),Ar=a("div"),F(E8.$$.fragment),rpr=l(),D2e=a("p"),tpr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),apr=l(),Za=a("p"),npr=o("The model class to instantiate is selected based on the "),G2e=a("code"),spr=o("model_type"),lpr=o(` property of the config object (either
passed as an argument or loaded from `),O2e=a("code"),ipr=o("pretrained_model_name_or_path"),dpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V2e=a("code"),cpr=o("pretrained_model_name_or_path"),fpr=o(":"),mpr=l(),se=a("ul"),o7=a("li"),X2e=a("strong"),gpr=o("albert"),hpr=o(" \u2014 "),bQ=a("a"),ppr=o("TFAlbertForPreTraining"),_pr=o(" (ALBERT model)"),upr=l(),r7=a("li"),z2e=a("strong"),bpr=o("bart"),vpr=o(" \u2014 "),vQ=a("a"),Fpr=o("TFBartForConditionalGeneration"),Tpr=o(" (BART model)"),Mpr=l(),t7=a("li"),W2e=a("strong"),Epr=o("bert"),Cpr=o(" \u2014 "),FQ=a("a"),wpr=o("TFBertForPreTraining"),Apr=o(" (BERT model)"),ypr=l(),a7=a("li"),Q2e=a("strong"),Lpr=o("camembert"),xpr=o(" \u2014 "),TQ=a("a"),$pr=o("TFCamembertForMaskedLM"),kpr=o(" (CamemBERT model)"),Spr=l(),n7=a("li"),H2e=a("strong"),Rpr=o("ctrl"),Ppr=o(" \u2014 "),MQ=a("a"),Bpr=o("TFCTRLLMHeadModel"),Ipr=o(" (CTRL model)"),Npr=l(),s7=a("li"),U2e=a("strong"),qpr=o("distilbert"),jpr=o(" \u2014 "),EQ=a("a"),Dpr=o("TFDistilBertForMaskedLM"),Gpr=o(" (DistilBERT model)"),Opr=l(),l7=a("li"),J2e=a("strong"),Vpr=o("electra"),Xpr=o(" \u2014 "),CQ=a("a"),zpr=o("TFElectraForPreTraining"),Wpr=o(" (ELECTRA model)"),Qpr=l(),i7=a("li"),Y2e=a("strong"),Hpr=o("flaubert"),Upr=o(" \u2014 "),wQ=a("a"),Jpr=o("TFFlaubertWithLMHeadModel"),Ypr=o(" (FlauBERT model)"),Kpr=l(),d7=a("li"),K2e=a("strong"),Zpr=o("funnel"),e_r=o(" \u2014 "),AQ=a("a"),o_r=o("TFFunnelForPreTraining"),r_r=o(" (Funnel Transformer model)"),t_r=l(),c7=a("li"),Z2e=a("strong"),a_r=o("gpt2"),n_r=o(" \u2014 "),yQ=a("a"),s_r=o("TFGPT2LMHeadModel"),l_r=o(" (OpenAI GPT-2 model)"),i_r=l(),f7=a("li"),e4e=a("strong"),d_r=o("layoutlm"),c_r=o(" \u2014 "),LQ=a("a"),f_r=o("TFLayoutLMForMaskedLM"),m_r=o(" (LayoutLM model)"),g_r=l(),m7=a("li"),o4e=a("strong"),h_r=o("lxmert"),p_r=o(" \u2014 "),xQ=a("a"),__r=o("TFLxmertForPreTraining"),u_r=o(" (LXMERT model)"),b_r=l(),g7=a("li"),r4e=a("strong"),v_r=o("mobilebert"),F_r=o(" \u2014 "),$Q=a("a"),T_r=o("TFMobileBertForPreTraining"),M_r=o(" (MobileBERT model)"),E_r=l(),h7=a("li"),t4e=a("strong"),C_r=o("mpnet"),w_r=o(" \u2014 "),kQ=a("a"),A_r=o("TFMPNetForMaskedLM"),y_r=o(" (MPNet model)"),L_r=l(),p7=a("li"),a4e=a("strong"),x_r=o("openai-gpt"),$_r=o(" \u2014 "),SQ=a("a"),k_r=o("TFOpenAIGPTLMHeadModel"),S_r=o(" (OpenAI GPT model)"),R_r=l(),_7=a("li"),n4e=a("strong"),P_r=o("roberta"),B_r=o(" \u2014 "),RQ=a("a"),I_r=o("TFRobertaForMaskedLM"),N_r=o(" (RoBERTa model)"),q_r=l(),u7=a("li"),s4e=a("strong"),j_r=o("t5"),D_r=o(" \u2014 "),PQ=a("a"),G_r=o("TFT5ForConditionalGeneration"),O_r=o(" (T5 model)"),V_r=l(),b7=a("li"),l4e=a("strong"),X_r=o("tapas"),z_r=o(" \u2014 "),BQ=a("a"),W_r=o("TFTapasForMaskedLM"),Q_r=o(" (TAPAS model)"),H_r=l(),v7=a("li"),i4e=a("strong"),U_r=o("transfo-xl"),J_r=o(" \u2014 "),IQ=a("a"),Y_r=o("TFTransfoXLLMHeadModel"),K_r=o(" (Transformer-XL model)"),Z_r=l(),F7=a("li"),d4e=a("strong"),eur=o("vit_mae"),our=o(" \u2014 "),NQ=a("a"),rur=o("TFViTMAEForPreTraining"),tur=o(" (ViTMAE model)"),aur=l(),T7=a("li"),c4e=a("strong"),nur=o("xlm"),sur=o(" \u2014 "),qQ=a("a"),lur=o("TFXLMWithLMHeadModel"),iur=o(" (XLM model)"),dur=l(),M7=a("li"),f4e=a("strong"),cur=o("xlm-roberta"),fur=o(" \u2014 "),jQ=a("a"),mur=o("TFXLMRobertaForMaskedLM"),gur=o(" (XLM-RoBERTa model)"),hur=l(),E7=a("li"),m4e=a("strong"),pur=o("xlnet"),_ur=o(" \u2014 "),DQ=a("a"),uur=o("TFXLNetLMHeadModel"),bur=o(" (XLNet model)"),vur=l(),F(C7.$$.fragment),Sje=l(),Hd=a("h2"),w7=a("a"),g4e=a("span"),F(C8.$$.fragment),Fur=l(),h4e=a("span"),Tur=o("TFAutoModelForCausalLM"),Rje=l(),Zo=a("div"),F(w8.$$.fragment),Mur=l(),Ud=a("p"),Eur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),GQ=a("a"),Cur=o("from_pretrained()"),wur=o(" class method or the "),OQ=a("a"),Aur=o("from_config()"),yur=o(` class
method.`),Lur=l(),A8=a("p"),xur=o("This class cannot be instantiated directly using "),p4e=a("code"),$ur=o("__init__()"),kur=o(" (throws an error)."),Sur=l(),xt=a("div"),F(y8.$$.fragment),Rur=l(),_4e=a("p"),Pur=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Bur=l(),Jd=a("p"),Iur=o(`Note:
Loading a model from its configuration file does `),u4e=a("strong"),Nur=o("not"),qur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VQ=a("a"),jur=o("from_pretrained()"),Dur=o(" to load the model weights."),Gur=l(),F(A7.$$.fragment),Our=l(),yr=a("div"),F(L8.$$.fragment),Vur=l(),b4e=a("p"),Xur=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),zur=l(),en=a("p"),Wur=o("The model class to instantiate is selected based on the "),v4e=a("code"),Qur=o("model_type"),Hur=o(` property of the config object (either
passed as an argument or loaded from `),F4e=a("code"),Uur=o("pretrained_model_name_or_path"),Jur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T4e=a("code"),Yur=o("pretrained_model_name_or_path"),Kur=o(":"),Zur=l(),Me=a("ul"),y7=a("li"),M4e=a("strong"),e1r=o("bert"),o1r=o(" \u2014 "),XQ=a("a"),r1r=o("TFBertLMHeadModel"),t1r=o(" (BERT model)"),a1r=l(),L7=a("li"),E4e=a("strong"),n1r=o("camembert"),s1r=o(" \u2014 "),zQ=a("a"),l1r=o("TFCamembertForCausalLM"),i1r=o(" (CamemBERT model)"),d1r=l(),x7=a("li"),C4e=a("strong"),c1r=o("ctrl"),f1r=o(" \u2014 "),WQ=a("a"),m1r=o("TFCTRLLMHeadModel"),g1r=o(" (CTRL model)"),h1r=l(),$7=a("li"),w4e=a("strong"),p1r=o("gpt2"),_1r=o(" \u2014 "),QQ=a("a"),u1r=o("TFGPT2LMHeadModel"),b1r=o(" (OpenAI GPT-2 model)"),v1r=l(),k7=a("li"),A4e=a("strong"),F1r=o("gptj"),T1r=o(" \u2014 "),HQ=a("a"),M1r=o("TFGPTJForCausalLM"),E1r=o(" (GPT-J model)"),C1r=l(),S7=a("li"),y4e=a("strong"),w1r=o("openai-gpt"),A1r=o(" \u2014 "),UQ=a("a"),y1r=o("TFOpenAIGPTLMHeadModel"),L1r=o(" (OpenAI GPT model)"),x1r=l(),R7=a("li"),L4e=a("strong"),$1r=o("rembert"),k1r=o(" \u2014 "),JQ=a("a"),S1r=o("TFRemBertForCausalLM"),R1r=o(" (RemBERT model)"),P1r=l(),P7=a("li"),x4e=a("strong"),B1r=o("roberta"),I1r=o(" \u2014 "),YQ=a("a"),N1r=o("TFRobertaForCausalLM"),q1r=o(" (RoBERTa model)"),j1r=l(),B7=a("li"),$4e=a("strong"),D1r=o("roformer"),G1r=o(" \u2014 "),KQ=a("a"),O1r=o("TFRoFormerForCausalLM"),V1r=o(" (RoFormer model)"),X1r=l(),I7=a("li"),k4e=a("strong"),z1r=o("transfo-xl"),W1r=o(" \u2014 "),ZQ=a("a"),Q1r=o("TFTransfoXLLMHeadModel"),H1r=o(" (Transformer-XL model)"),U1r=l(),N7=a("li"),S4e=a("strong"),J1r=o("xlm"),Y1r=o(" \u2014 "),eH=a("a"),K1r=o("TFXLMWithLMHeadModel"),Z1r=o(" (XLM model)"),ebr=l(),q7=a("li"),R4e=a("strong"),obr=o("xlnet"),rbr=o(" \u2014 "),oH=a("a"),tbr=o("TFXLNetLMHeadModel"),abr=o(" (XLNet model)"),nbr=l(),F(j7.$$.fragment),Pje=l(),Yd=a("h2"),D7=a("a"),P4e=a("span"),F(x8.$$.fragment),sbr=l(),B4e=a("span"),lbr=o("TFAutoModelForImageClassification"),Bje=l(),er=a("div"),F($8.$$.fragment),ibr=l(),Kd=a("p"),dbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rH=a("a"),cbr=o("from_pretrained()"),fbr=o(" class method or the "),tH=a("a"),mbr=o("from_config()"),gbr=o(` class
method.`),hbr=l(),k8=a("p"),pbr=o("This class cannot be instantiated directly using "),I4e=a("code"),_br=o("__init__()"),ubr=o(" (throws an error)."),bbr=l(),$t=a("div"),F(S8.$$.fragment),vbr=l(),N4e=a("p"),Fbr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Tbr=l(),Zd=a("p"),Mbr=o(`Note:
Loading a model from its configuration file does `),q4e=a("strong"),Ebr=o("not"),Cbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aH=a("a"),wbr=o("from_pretrained()"),Abr=o(" to load the model weights."),ybr=l(),F(G7.$$.fragment),Lbr=l(),Lr=a("div"),F(R8.$$.fragment),xbr=l(),j4e=a("p"),$br=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),kbr=l(),on=a("p"),Sbr=o("The model class to instantiate is selected based on the "),D4e=a("code"),Rbr=o("model_type"),Pbr=o(` property of the config object (either
passed as an argument or loaded from `),G4e=a("code"),Bbr=o("pretrained_model_name_or_path"),Ibr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O4e=a("code"),Nbr=o("pretrained_model_name_or_path"),qbr=o(":"),jbr=l(),rn=a("ul"),O7=a("li"),V4e=a("strong"),Dbr=o("convnext"),Gbr=o(" \u2014 "),nH=a("a"),Obr=o("TFConvNextForImageClassification"),Vbr=o(" (ConvNext model)"),Xbr=l(),V7=a("li"),X4e=a("strong"),zbr=o("data2vec-vision"),Wbr=o(" \u2014 "),sH=a("a"),Qbr=o("TFData2VecVisionForImageClassification"),Hbr=o(" (Data2VecVision model)"),Ubr=l(),X7=a("li"),z4e=a("strong"),Jbr=o("swin"),Ybr=o(" \u2014 "),lH=a("a"),Kbr=o("TFSwinForImageClassification"),Zbr=o(" (Swin model)"),e2r=l(),z7=a("li"),W4e=a("strong"),o2r=o("vit"),r2r=o(" \u2014 "),iH=a("a"),t2r=o("TFViTForImageClassification"),a2r=o(" (ViT model)"),n2r=l(),F(W7.$$.fragment),Ije=l(),ec=a("h2"),Q7=a("a"),Q4e=a("span"),F(P8.$$.fragment),s2r=l(),H4e=a("span"),l2r=o("TFAutoModelForMaskedLM"),Nje=l(),or=a("div"),F(B8.$$.fragment),i2r=l(),oc=a("p"),d2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),dH=a("a"),c2r=o("from_pretrained()"),f2r=o(" class method or the "),cH=a("a"),m2r=o("from_config()"),g2r=o(` class
method.`),h2r=l(),I8=a("p"),p2r=o("This class cannot be instantiated directly using "),U4e=a("code"),_2r=o("__init__()"),u2r=o(" (throws an error)."),b2r=l(),kt=a("div"),F(N8.$$.fragment),v2r=l(),J4e=a("p"),F2r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),T2r=l(),rc=a("p"),M2r=o(`Note:
Loading a model from its configuration file does `),Y4e=a("strong"),E2r=o("not"),C2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=a("a"),w2r=o("from_pretrained()"),A2r=o(" to load the model weights."),y2r=l(),F(H7.$$.fragment),L2r=l(),xr=a("div"),F(q8.$$.fragment),x2r=l(),K4e=a("p"),$2r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),k2r=l(),tn=a("p"),S2r=o("The model class to instantiate is selected based on the "),Z4e=a("code"),R2r=o("model_type"),P2r=o(` property of the config object (either
passed as an argument or loaded from `),eve=a("code"),B2r=o("pretrained_model_name_or_path"),I2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ove=a("code"),N2r=o("pretrained_model_name_or_path"),q2r=o(":"),j2r=l(),ie=a("ul"),U7=a("li"),rve=a("strong"),D2r=o("albert"),G2r=o(" \u2014 "),mH=a("a"),O2r=o("TFAlbertForMaskedLM"),V2r=o(" (ALBERT model)"),X2r=l(),J7=a("li"),tve=a("strong"),z2r=o("bert"),W2r=o(" \u2014 "),gH=a("a"),Q2r=o("TFBertForMaskedLM"),H2r=o(" (BERT model)"),U2r=l(),Y7=a("li"),ave=a("strong"),J2r=o("camembert"),Y2r=o(" \u2014 "),hH=a("a"),K2r=o("TFCamembertForMaskedLM"),Z2r=o(" (CamemBERT model)"),e4r=l(),K7=a("li"),nve=a("strong"),o4r=o("convbert"),r4r=o(" \u2014 "),pH=a("a"),t4r=o("TFConvBertForMaskedLM"),a4r=o(" (ConvBERT model)"),n4r=l(),Z7=a("li"),sve=a("strong"),s4r=o("deberta"),l4r=o(" \u2014 "),_H=a("a"),i4r=o("TFDebertaForMaskedLM"),d4r=o(" (DeBERTa model)"),c4r=l(),eM=a("li"),lve=a("strong"),f4r=o("deberta-v2"),m4r=o(" \u2014 "),uH=a("a"),g4r=o("TFDebertaV2ForMaskedLM"),h4r=o(" (DeBERTa-v2 model)"),p4r=l(),oM=a("li"),ive=a("strong"),_4r=o("distilbert"),u4r=o(" \u2014 "),bH=a("a"),b4r=o("TFDistilBertForMaskedLM"),v4r=o(" (DistilBERT model)"),F4r=l(),rM=a("li"),dve=a("strong"),T4r=o("electra"),M4r=o(" \u2014 "),vH=a("a"),E4r=o("TFElectraForMaskedLM"),C4r=o(" (ELECTRA model)"),w4r=l(),tM=a("li"),cve=a("strong"),A4r=o("flaubert"),y4r=o(" \u2014 "),FH=a("a"),L4r=o("TFFlaubertWithLMHeadModel"),x4r=o(" (FlauBERT model)"),$4r=l(),aM=a("li"),fve=a("strong"),k4r=o("funnel"),S4r=o(" \u2014 "),TH=a("a"),R4r=o("TFFunnelForMaskedLM"),P4r=o(" (Funnel Transformer model)"),B4r=l(),nM=a("li"),mve=a("strong"),I4r=o("layoutlm"),N4r=o(" \u2014 "),MH=a("a"),q4r=o("TFLayoutLMForMaskedLM"),j4r=o(" (LayoutLM model)"),D4r=l(),sM=a("li"),gve=a("strong"),G4r=o("longformer"),O4r=o(" \u2014 "),EH=a("a"),V4r=o("TFLongformerForMaskedLM"),X4r=o(" (Longformer model)"),z4r=l(),lM=a("li"),hve=a("strong"),W4r=o("mobilebert"),Q4r=o(" \u2014 "),CH=a("a"),H4r=o("TFMobileBertForMaskedLM"),U4r=o(" (MobileBERT model)"),J4r=l(),iM=a("li"),pve=a("strong"),Y4r=o("mpnet"),K4r=o(" \u2014 "),wH=a("a"),Z4r=o("TFMPNetForMaskedLM"),evr=o(" (MPNet model)"),ovr=l(),dM=a("li"),_ve=a("strong"),rvr=o("rembert"),tvr=o(" \u2014 "),AH=a("a"),avr=o("TFRemBertForMaskedLM"),nvr=o(" (RemBERT model)"),svr=l(),cM=a("li"),uve=a("strong"),lvr=o("roberta"),ivr=o(" \u2014 "),yH=a("a"),dvr=o("TFRobertaForMaskedLM"),cvr=o(" (RoBERTa model)"),fvr=l(),fM=a("li"),bve=a("strong"),mvr=o("roformer"),gvr=o(" \u2014 "),LH=a("a"),hvr=o("TFRoFormerForMaskedLM"),pvr=o(" (RoFormer model)"),_vr=l(),mM=a("li"),vve=a("strong"),uvr=o("tapas"),bvr=o(" \u2014 "),xH=a("a"),vvr=o("TFTapasForMaskedLM"),Fvr=o(" (TAPAS model)"),Tvr=l(),gM=a("li"),Fve=a("strong"),Mvr=o("xlm"),Evr=o(" \u2014 "),$H=a("a"),Cvr=o("TFXLMWithLMHeadModel"),wvr=o(" (XLM model)"),Avr=l(),hM=a("li"),Tve=a("strong"),yvr=o("xlm-roberta"),Lvr=o(" \u2014 "),kH=a("a"),xvr=o("TFXLMRobertaForMaskedLM"),$vr=o(" (XLM-RoBERTa model)"),kvr=l(),F(pM.$$.fragment),qje=l(),tc=a("h2"),_M=a("a"),Mve=a("span"),F(j8.$$.fragment),Svr=l(),Eve=a("span"),Rvr=o("TFAutoModelForSeq2SeqLM"),jje=l(),rr=a("div"),F(D8.$$.fragment),Pvr=l(),ac=a("p"),Bvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),SH=a("a"),Ivr=o("from_pretrained()"),Nvr=o(" class method or the "),RH=a("a"),qvr=o("from_config()"),jvr=o(` class
method.`),Dvr=l(),G8=a("p"),Gvr=o("This class cannot be instantiated directly using "),Cve=a("code"),Ovr=o("__init__()"),Vvr=o(" (throws an error)."),Xvr=l(),St=a("div"),F(O8.$$.fragment),zvr=l(),wve=a("p"),Wvr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Qvr=l(),nc=a("p"),Hvr=o(`Note:
Loading a model from its configuration file does `),Ave=a("strong"),Uvr=o("not"),Jvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PH=a("a"),Yvr=o("from_pretrained()"),Kvr=o(" to load the model weights."),Zvr=l(),F(uM.$$.fragment),eFr=l(),$r=a("div"),F(V8.$$.fragment),oFr=l(),yve=a("p"),rFr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),tFr=l(),an=a("p"),aFr=o("The model class to instantiate is selected based on the "),Lve=a("code"),nFr=o("model_type"),sFr=o(` property of the config object (either
passed as an argument or loaded from `),xve=a("code"),lFr=o("pretrained_model_name_or_path"),iFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ve=a("code"),dFr=o("pretrained_model_name_or_path"),cFr=o(":"),fFr=l(),ye=a("ul"),bM=a("li"),kve=a("strong"),mFr=o("bart"),gFr=o(" \u2014 "),BH=a("a"),hFr=o("TFBartForConditionalGeneration"),pFr=o(" (BART model)"),_Fr=l(),vM=a("li"),Sve=a("strong"),uFr=o("blenderbot"),bFr=o(" \u2014 "),IH=a("a"),vFr=o("TFBlenderbotForConditionalGeneration"),FFr=o(" (Blenderbot model)"),TFr=l(),FM=a("li"),Rve=a("strong"),MFr=o("blenderbot-small"),EFr=o(" \u2014 "),NH=a("a"),CFr=o("TFBlenderbotSmallForConditionalGeneration"),wFr=o(" (BlenderbotSmall model)"),AFr=l(),TM=a("li"),Pve=a("strong"),yFr=o("encoder-decoder"),LFr=o(" \u2014 "),qH=a("a"),xFr=o("TFEncoderDecoderModel"),$Fr=o(" (Encoder decoder model)"),kFr=l(),MM=a("li"),Bve=a("strong"),SFr=o("led"),RFr=o(" \u2014 "),jH=a("a"),PFr=o("TFLEDForConditionalGeneration"),BFr=o(" (LED model)"),IFr=l(),EM=a("li"),Ive=a("strong"),NFr=o("marian"),qFr=o(" \u2014 "),DH=a("a"),jFr=o("TFMarianMTModel"),DFr=o(" (Marian model)"),GFr=l(),CM=a("li"),Nve=a("strong"),OFr=o("mbart"),VFr=o(" \u2014 "),GH=a("a"),XFr=o("TFMBartForConditionalGeneration"),zFr=o(" (mBART model)"),WFr=l(),wM=a("li"),qve=a("strong"),QFr=o("mt5"),HFr=o(" \u2014 "),OH=a("a"),UFr=o("TFMT5ForConditionalGeneration"),JFr=o(" (mT5 model)"),YFr=l(),AM=a("li"),jve=a("strong"),KFr=o("pegasus"),ZFr=o(" \u2014 "),VH=a("a"),e6r=o("TFPegasusForConditionalGeneration"),o6r=o(" (Pegasus model)"),r6r=l(),yM=a("li"),Dve=a("strong"),t6r=o("t5"),a6r=o(" \u2014 "),XH=a("a"),n6r=o("TFT5ForConditionalGeneration"),s6r=o(" (T5 model)"),l6r=l(),F(LM.$$.fragment),Dje=l(),sc=a("h2"),xM=a("a"),Gve=a("span"),F(X8.$$.fragment),i6r=l(),Ove=a("span"),d6r=o("TFAutoModelForSequenceClassification"),Gje=l(),tr=a("div"),F(z8.$$.fragment),c6r=l(),lc=a("p"),f6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zH=a("a"),m6r=o("from_pretrained()"),g6r=o(" class method or the "),WH=a("a"),h6r=o("from_config()"),p6r=o(` class
method.`),_6r=l(),W8=a("p"),u6r=o("This class cannot be instantiated directly using "),Vve=a("code"),b6r=o("__init__()"),v6r=o(" (throws an error)."),F6r=l(),Rt=a("div"),F(Q8.$$.fragment),T6r=l(),Xve=a("p"),M6r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),E6r=l(),ic=a("p"),C6r=o(`Note:
Loading a model from its configuration file does `),zve=a("strong"),w6r=o("not"),A6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=a("a"),y6r=o("from_pretrained()"),L6r=o(" to load the model weights."),x6r=l(),F($M.$$.fragment),$6r=l(),kr=a("div"),F(H8.$$.fragment),k6r=l(),Wve=a("p"),S6r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),R6r=l(),nn=a("p"),P6r=o("The model class to instantiate is selected based on the "),Qve=a("code"),B6r=o("model_type"),I6r=o(` property of the config object (either
passed as an argument or loaded from `),Hve=a("code"),N6r=o("pretrained_model_name_or_path"),q6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uve=a("code"),j6r=o("pretrained_model_name_or_path"),D6r=o(":"),G6r=l(),oe=a("ul"),kM=a("li"),Jve=a("strong"),O6r=o("albert"),V6r=o(" \u2014 "),HH=a("a"),X6r=o("TFAlbertForSequenceClassification"),z6r=o(" (ALBERT model)"),W6r=l(),SM=a("li"),Yve=a("strong"),Q6r=o("bert"),H6r=o(" \u2014 "),UH=a("a"),U6r=o("TFBertForSequenceClassification"),J6r=o(" (BERT model)"),Y6r=l(),RM=a("li"),Kve=a("strong"),K6r=o("camembert"),Z6r=o(" \u2014 "),JH=a("a"),eTr=o("TFCamembertForSequenceClassification"),oTr=o(" (CamemBERT model)"),rTr=l(),PM=a("li"),Zve=a("strong"),tTr=o("convbert"),aTr=o(" \u2014 "),YH=a("a"),nTr=o("TFConvBertForSequenceClassification"),sTr=o(" (ConvBERT model)"),lTr=l(),BM=a("li"),eFe=a("strong"),iTr=o("ctrl"),dTr=o(" \u2014 "),KH=a("a"),cTr=o("TFCTRLForSequenceClassification"),fTr=o(" (CTRL model)"),mTr=l(),IM=a("li"),oFe=a("strong"),gTr=o("deberta"),hTr=o(" \u2014 "),ZH=a("a"),pTr=o("TFDebertaForSequenceClassification"),_Tr=o(" (DeBERTa model)"),uTr=l(),NM=a("li"),rFe=a("strong"),bTr=o("deberta-v2"),vTr=o(" \u2014 "),eU=a("a"),FTr=o("TFDebertaV2ForSequenceClassification"),TTr=o(" (DeBERTa-v2 model)"),MTr=l(),qM=a("li"),tFe=a("strong"),ETr=o("distilbert"),CTr=o(" \u2014 "),oU=a("a"),wTr=o("TFDistilBertForSequenceClassification"),ATr=o(" (DistilBERT model)"),yTr=l(),jM=a("li"),aFe=a("strong"),LTr=o("electra"),xTr=o(" \u2014 "),rU=a("a"),$Tr=o("TFElectraForSequenceClassification"),kTr=o(" (ELECTRA model)"),STr=l(),DM=a("li"),nFe=a("strong"),RTr=o("flaubert"),PTr=o(" \u2014 "),tU=a("a"),BTr=o("TFFlaubertForSequenceClassification"),ITr=o(" (FlauBERT model)"),NTr=l(),GM=a("li"),sFe=a("strong"),qTr=o("funnel"),jTr=o(" \u2014 "),aU=a("a"),DTr=o("TFFunnelForSequenceClassification"),GTr=o(" (Funnel Transformer model)"),OTr=l(),OM=a("li"),lFe=a("strong"),VTr=o("gpt2"),XTr=o(" \u2014 "),nU=a("a"),zTr=o("TFGPT2ForSequenceClassification"),WTr=o(" (OpenAI GPT-2 model)"),QTr=l(),VM=a("li"),iFe=a("strong"),HTr=o("gptj"),UTr=o(" \u2014 "),sU=a("a"),JTr=o("TFGPTJForSequenceClassification"),YTr=o(" (GPT-J model)"),KTr=l(),XM=a("li"),dFe=a("strong"),ZTr=o("layoutlm"),e7r=o(" \u2014 "),lU=a("a"),o7r=o("TFLayoutLMForSequenceClassification"),r7r=o(" (LayoutLM model)"),t7r=l(),zM=a("li"),cFe=a("strong"),a7r=o("longformer"),n7r=o(" \u2014 "),iU=a("a"),s7r=o("TFLongformerForSequenceClassification"),l7r=o(" (Longformer model)"),i7r=l(),WM=a("li"),fFe=a("strong"),d7r=o("mobilebert"),c7r=o(" \u2014 "),dU=a("a"),f7r=o("TFMobileBertForSequenceClassification"),m7r=o(" (MobileBERT model)"),g7r=l(),QM=a("li"),mFe=a("strong"),h7r=o("mpnet"),p7r=o(" \u2014 "),cU=a("a"),_7r=o("TFMPNetForSequenceClassification"),u7r=o(" (MPNet model)"),b7r=l(),HM=a("li"),gFe=a("strong"),v7r=o("openai-gpt"),F7r=o(" \u2014 "),fU=a("a"),T7r=o("TFOpenAIGPTForSequenceClassification"),M7r=o(" (OpenAI GPT model)"),E7r=l(),UM=a("li"),hFe=a("strong"),C7r=o("rembert"),w7r=o(" \u2014 "),mU=a("a"),A7r=o("TFRemBertForSequenceClassification"),y7r=o(" (RemBERT model)"),L7r=l(),JM=a("li"),pFe=a("strong"),x7r=o("roberta"),$7r=o(" \u2014 "),gU=a("a"),k7r=o("TFRobertaForSequenceClassification"),S7r=o(" (RoBERTa model)"),R7r=l(),YM=a("li"),_Fe=a("strong"),P7r=o("roformer"),B7r=o(" \u2014 "),hU=a("a"),I7r=o("TFRoFormerForSequenceClassification"),N7r=o(" (RoFormer model)"),q7r=l(),KM=a("li"),uFe=a("strong"),j7r=o("tapas"),D7r=o(" \u2014 "),pU=a("a"),G7r=o("TFTapasForSequenceClassification"),O7r=o(" (TAPAS model)"),V7r=l(),ZM=a("li"),bFe=a("strong"),X7r=o("transfo-xl"),z7r=o(" \u2014 "),_U=a("a"),W7r=o("TFTransfoXLForSequenceClassification"),Q7r=o(" (Transformer-XL model)"),H7r=l(),eE=a("li"),vFe=a("strong"),U7r=o("xlm"),J7r=o(" \u2014 "),uU=a("a"),Y7r=o("TFXLMForSequenceClassification"),K7r=o(" (XLM model)"),Z7r=l(),oE=a("li"),FFe=a("strong"),eMr=o("xlm-roberta"),oMr=o(" \u2014 "),bU=a("a"),rMr=o("TFXLMRobertaForSequenceClassification"),tMr=o(" (XLM-RoBERTa model)"),aMr=l(),rE=a("li"),TFe=a("strong"),nMr=o("xlnet"),sMr=o(" \u2014 "),vU=a("a"),lMr=o("TFXLNetForSequenceClassification"),iMr=o(" (XLNet model)"),dMr=l(),F(tE.$$.fragment),Oje=l(),dc=a("h2"),aE=a("a"),MFe=a("span"),F(U8.$$.fragment),cMr=l(),EFe=a("span"),fMr=o("TFAutoModelForMultipleChoice"),Vje=l(),ar=a("div"),F(J8.$$.fragment),mMr=l(),cc=a("p"),gMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),FU=a("a"),hMr=o("from_pretrained()"),pMr=o(" class method or the "),TU=a("a"),_Mr=o("from_config()"),uMr=o(` class
method.`),bMr=l(),Y8=a("p"),vMr=o("This class cannot be instantiated directly using "),CFe=a("code"),FMr=o("__init__()"),TMr=o(" (throws an error)."),MMr=l(),Pt=a("div"),F(K8.$$.fragment),EMr=l(),wFe=a("p"),CMr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),wMr=l(),fc=a("p"),AMr=o(`Note:
Loading a model from its configuration file does `),AFe=a("strong"),yMr=o("not"),LMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MU=a("a"),xMr=o("from_pretrained()"),$Mr=o(" to load the model weights."),kMr=l(),F(nE.$$.fragment),SMr=l(),Sr=a("div"),F(Z8.$$.fragment),RMr=l(),yFe=a("p"),PMr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),BMr=l(),sn=a("p"),IMr=o("The model class to instantiate is selected based on the "),LFe=a("code"),NMr=o("model_type"),qMr=o(` property of the config object (either
passed as an argument or loaded from `),xFe=a("code"),jMr=o("pretrained_model_name_or_path"),DMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Fe=a("code"),GMr=o("pretrained_model_name_or_path"),OMr=o(":"),VMr=l(),pe=a("ul"),sE=a("li"),kFe=a("strong"),XMr=o("albert"),zMr=o(" \u2014 "),EU=a("a"),WMr=o("TFAlbertForMultipleChoice"),QMr=o(" (ALBERT model)"),HMr=l(),lE=a("li"),SFe=a("strong"),UMr=o("bert"),JMr=o(" \u2014 "),CU=a("a"),YMr=o("TFBertForMultipleChoice"),KMr=o(" (BERT model)"),ZMr=l(),iE=a("li"),RFe=a("strong"),eEr=o("camembert"),oEr=o(" \u2014 "),wU=a("a"),rEr=o("TFCamembertForMultipleChoice"),tEr=o(" (CamemBERT model)"),aEr=l(),dE=a("li"),PFe=a("strong"),nEr=o("convbert"),sEr=o(" \u2014 "),AU=a("a"),lEr=o("TFConvBertForMultipleChoice"),iEr=o(" (ConvBERT model)"),dEr=l(),cE=a("li"),BFe=a("strong"),cEr=o("distilbert"),fEr=o(" \u2014 "),yU=a("a"),mEr=o("TFDistilBertForMultipleChoice"),gEr=o(" (DistilBERT model)"),hEr=l(),fE=a("li"),IFe=a("strong"),pEr=o("electra"),_Er=o(" \u2014 "),LU=a("a"),uEr=o("TFElectraForMultipleChoice"),bEr=o(" (ELECTRA model)"),vEr=l(),mE=a("li"),NFe=a("strong"),FEr=o("flaubert"),TEr=o(" \u2014 "),xU=a("a"),MEr=o("TFFlaubertForMultipleChoice"),EEr=o(" (FlauBERT model)"),CEr=l(),gE=a("li"),qFe=a("strong"),wEr=o("funnel"),AEr=o(" \u2014 "),$U=a("a"),yEr=o("TFFunnelForMultipleChoice"),LEr=o(" (Funnel Transformer model)"),xEr=l(),hE=a("li"),jFe=a("strong"),$Er=o("longformer"),kEr=o(" \u2014 "),kU=a("a"),SEr=o("TFLongformerForMultipleChoice"),REr=o(" (Longformer model)"),PEr=l(),pE=a("li"),DFe=a("strong"),BEr=o("mobilebert"),IEr=o(" \u2014 "),SU=a("a"),NEr=o("TFMobileBertForMultipleChoice"),qEr=o(" (MobileBERT model)"),jEr=l(),_E=a("li"),GFe=a("strong"),DEr=o("mpnet"),GEr=o(" \u2014 "),RU=a("a"),OEr=o("TFMPNetForMultipleChoice"),VEr=o(" (MPNet model)"),XEr=l(),uE=a("li"),OFe=a("strong"),zEr=o("rembert"),WEr=o(" \u2014 "),PU=a("a"),QEr=o("TFRemBertForMultipleChoice"),HEr=o(" (RemBERT model)"),UEr=l(),bE=a("li"),VFe=a("strong"),JEr=o("roberta"),YEr=o(" \u2014 "),BU=a("a"),KEr=o("TFRobertaForMultipleChoice"),ZEr=o(" (RoBERTa model)"),eCr=l(),vE=a("li"),XFe=a("strong"),oCr=o("roformer"),rCr=o(" \u2014 "),IU=a("a"),tCr=o("TFRoFormerForMultipleChoice"),aCr=o(" (RoFormer model)"),nCr=l(),FE=a("li"),zFe=a("strong"),sCr=o("xlm"),lCr=o(" \u2014 "),NU=a("a"),iCr=o("TFXLMForMultipleChoice"),dCr=o(" (XLM model)"),cCr=l(),TE=a("li"),WFe=a("strong"),fCr=o("xlm-roberta"),mCr=o(" \u2014 "),qU=a("a"),gCr=o("TFXLMRobertaForMultipleChoice"),hCr=o(" (XLM-RoBERTa model)"),pCr=l(),ME=a("li"),QFe=a("strong"),_Cr=o("xlnet"),uCr=o(" \u2014 "),jU=a("a"),bCr=o("TFXLNetForMultipleChoice"),vCr=o(" (XLNet model)"),FCr=l(),F(EE.$$.fragment),Xje=l(),mc=a("h2"),CE=a("a"),HFe=a("span"),F(e9.$$.fragment),TCr=l(),UFe=a("span"),MCr=o("TFAutoModelForNextSentencePrediction"),zje=l(),nr=a("div"),F(o9.$$.fragment),ECr=l(),gc=a("p"),CCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),DU=a("a"),wCr=o("from_pretrained()"),ACr=o(" class method or the "),GU=a("a"),yCr=o("from_config()"),LCr=o(` class
method.`),xCr=l(),r9=a("p"),$Cr=o("This class cannot be instantiated directly using "),JFe=a("code"),kCr=o("__init__()"),SCr=o(" (throws an error)."),RCr=l(),Bt=a("div"),F(t9.$$.fragment),PCr=l(),YFe=a("p"),BCr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ICr=l(),hc=a("p"),NCr=o(`Note:
Loading a model from its configuration file does `),KFe=a("strong"),qCr=o("not"),jCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OU=a("a"),DCr=o("from_pretrained()"),GCr=o(" to load the model weights."),OCr=l(),F(wE.$$.fragment),VCr=l(),Rr=a("div"),F(a9.$$.fragment),XCr=l(),ZFe=a("p"),zCr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),WCr=l(),ln=a("p"),QCr=o("The model class to instantiate is selected based on the "),e6e=a("code"),HCr=o("model_type"),UCr=o(` property of the config object (either
passed as an argument or loaded from `),o6e=a("code"),JCr=o("pretrained_model_name_or_path"),YCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r6e=a("code"),KCr=o("pretrained_model_name_or_path"),ZCr=o(":"),e5r=l(),n9=a("ul"),AE=a("li"),t6e=a("strong"),o5r=o("bert"),r5r=o(" \u2014 "),VU=a("a"),t5r=o("TFBertForNextSentencePrediction"),a5r=o(" (BERT model)"),n5r=l(),yE=a("li"),a6e=a("strong"),s5r=o("mobilebert"),l5r=o(" \u2014 "),XU=a("a"),i5r=o("TFMobileBertForNextSentencePrediction"),d5r=o(" (MobileBERT model)"),c5r=l(),F(LE.$$.fragment),Wje=l(),pc=a("h2"),xE=a("a"),n6e=a("span"),F(s9.$$.fragment),f5r=l(),s6e=a("span"),m5r=o("TFAutoModelForTableQuestionAnswering"),Qje=l(),sr=a("div"),F(l9.$$.fragment),g5r=l(),_c=a("p"),h5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),zU=a("a"),p5r=o("from_pretrained()"),_5r=o(" class method or the "),WU=a("a"),u5r=o("from_config()"),b5r=o(` class
method.`),v5r=l(),i9=a("p"),F5r=o("This class cannot be instantiated directly using "),l6e=a("code"),T5r=o("__init__()"),M5r=o(" (throws an error)."),E5r=l(),It=a("div"),F(d9.$$.fragment),C5r=l(),i6e=a("p"),w5r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),A5r=l(),uc=a("p"),y5r=o(`Note:
Loading a model from its configuration file does `),d6e=a("strong"),L5r=o("not"),x5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=a("a"),$5r=o("from_pretrained()"),k5r=o(" to load the model weights."),S5r=l(),F($E.$$.fragment),R5r=l(),Pr=a("div"),F(c9.$$.fragment),P5r=l(),c6e=a("p"),B5r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),I5r=l(),dn=a("p"),N5r=o("The model class to instantiate is selected based on the "),f6e=a("code"),q5r=o("model_type"),j5r=o(` property of the config object (either
passed as an argument or loaded from `),m6e=a("code"),D5r=o("pretrained_model_name_or_path"),G5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g6e=a("code"),O5r=o("pretrained_model_name_or_path"),V5r=o(":"),X5r=l(),h6e=a("ul"),kE=a("li"),p6e=a("strong"),z5r=o("tapas"),W5r=o(" \u2014 "),HU=a("a"),Q5r=o("TFTapasForQuestionAnswering"),H5r=o(" (TAPAS model)"),U5r=l(),F(SE.$$.fragment),Hje=l(),bc=a("h2"),RE=a("a"),_6e=a("span"),F(f9.$$.fragment),J5r=l(),u6e=a("span"),Y5r=o("TFAutoModelForTokenClassification"),Uje=l(),lr=a("div"),F(m9.$$.fragment),K5r=l(),vc=a("p"),Z5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),UU=a("a"),e3r=o("from_pretrained()"),o3r=o(" class method or the "),JU=a("a"),r3r=o("from_config()"),t3r=o(` class
method.`),a3r=l(),g9=a("p"),n3r=o("This class cannot be instantiated directly using "),b6e=a("code"),s3r=o("__init__()"),l3r=o(" (throws an error)."),i3r=l(),Nt=a("div"),F(h9.$$.fragment),d3r=l(),v6e=a("p"),c3r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),f3r=l(),Fc=a("p"),m3r=o(`Note:
Loading a model from its configuration file does `),F6e=a("strong"),g3r=o("not"),h3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=a("a"),p3r=o("from_pretrained()"),_3r=o(" to load the model weights."),u3r=l(),F(PE.$$.fragment),b3r=l(),Br=a("div"),F(p9.$$.fragment),v3r=l(),T6e=a("p"),F3r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),T3r=l(),cn=a("p"),M3r=o("The model class to instantiate is selected based on the "),M6e=a("code"),E3r=o("model_type"),C3r=o(` property of the config object (either
passed as an argument or loaded from `),E6e=a("code"),w3r=o("pretrained_model_name_or_path"),A3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C6e=a("code"),y3r=o("pretrained_model_name_or_path"),L3r=o(":"),x3r=l(),de=a("ul"),BE=a("li"),w6e=a("strong"),$3r=o("albert"),k3r=o(" \u2014 "),KU=a("a"),S3r=o("TFAlbertForTokenClassification"),R3r=o(" (ALBERT model)"),P3r=l(),IE=a("li"),A6e=a("strong"),B3r=o("bert"),I3r=o(" \u2014 "),ZU=a("a"),N3r=o("TFBertForTokenClassification"),q3r=o(" (BERT model)"),j3r=l(),NE=a("li"),y6e=a("strong"),D3r=o("camembert"),G3r=o(" \u2014 "),eJ=a("a"),O3r=o("TFCamembertForTokenClassification"),V3r=o(" (CamemBERT model)"),X3r=l(),qE=a("li"),L6e=a("strong"),z3r=o("convbert"),W3r=o(" \u2014 "),oJ=a("a"),Q3r=o("TFConvBertForTokenClassification"),H3r=o(" (ConvBERT model)"),U3r=l(),jE=a("li"),x6e=a("strong"),J3r=o("deberta"),Y3r=o(" \u2014 "),rJ=a("a"),K3r=o("TFDebertaForTokenClassification"),Z3r=o(" (DeBERTa model)"),ewr=l(),DE=a("li"),$6e=a("strong"),owr=o("deberta-v2"),rwr=o(" \u2014 "),tJ=a("a"),twr=o("TFDebertaV2ForTokenClassification"),awr=o(" (DeBERTa-v2 model)"),nwr=l(),GE=a("li"),k6e=a("strong"),swr=o("distilbert"),lwr=o(" \u2014 "),aJ=a("a"),iwr=o("TFDistilBertForTokenClassification"),dwr=o(" (DistilBERT model)"),cwr=l(),OE=a("li"),S6e=a("strong"),fwr=o("electra"),mwr=o(" \u2014 "),nJ=a("a"),gwr=o("TFElectraForTokenClassification"),hwr=o(" (ELECTRA model)"),pwr=l(),VE=a("li"),R6e=a("strong"),_wr=o("flaubert"),uwr=o(" \u2014 "),sJ=a("a"),bwr=o("TFFlaubertForTokenClassification"),vwr=o(" (FlauBERT model)"),Fwr=l(),XE=a("li"),P6e=a("strong"),Twr=o("funnel"),Mwr=o(" \u2014 "),lJ=a("a"),Ewr=o("TFFunnelForTokenClassification"),Cwr=o(" (Funnel Transformer model)"),wwr=l(),zE=a("li"),B6e=a("strong"),Awr=o("layoutlm"),ywr=o(" \u2014 "),iJ=a("a"),Lwr=o("TFLayoutLMForTokenClassification"),xwr=o(" (LayoutLM model)"),$wr=l(),WE=a("li"),I6e=a("strong"),kwr=o("longformer"),Swr=o(" \u2014 "),dJ=a("a"),Rwr=o("TFLongformerForTokenClassification"),Pwr=o(" (Longformer model)"),Bwr=l(),QE=a("li"),N6e=a("strong"),Iwr=o("mobilebert"),Nwr=o(" \u2014 "),cJ=a("a"),qwr=o("TFMobileBertForTokenClassification"),jwr=o(" (MobileBERT model)"),Dwr=l(),HE=a("li"),q6e=a("strong"),Gwr=o("mpnet"),Owr=o(" \u2014 "),fJ=a("a"),Vwr=o("TFMPNetForTokenClassification"),Xwr=o(" (MPNet model)"),zwr=l(),UE=a("li"),j6e=a("strong"),Wwr=o("rembert"),Qwr=o(" \u2014 "),mJ=a("a"),Hwr=o("TFRemBertForTokenClassification"),Uwr=o(" (RemBERT model)"),Jwr=l(),JE=a("li"),D6e=a("strong"),Ywr=o("roberta"),Kwr=o(" \u2014 "),gJ=a("a"),Zwr=o("TFRobertaForTokenClassification"),e0r=o(" (RoBERTa model)"),o0r=l(),YE=a("li"),G6e=a("strong"),r0r=o("roformer"),t0r=o(" \u2014 "),hJ=a("a"),a0r=o("TFRoFormerForTokenClassification"),n0r=o(" (RoFormer model)"),s0r=l(),KE=a("li"),O6e=a("strong"),l0r=o("xlm"),i0r=o(" \u2014 "),pJ=a("a"),d0r=o("TFXLMForTokenClassification"),c0r=o(" (XLM model)"),f0r=l(),ZE=a("li"),V6e=a("strong"),m0r=o("xlm-roberta"),g0r=o(" \u2014 "),_J=a("a"),h0r=o("TFXLMRobertaForTokenClassification"),p0r=o(" (XLM-RoBERTa model)"),_0r=l(),eC=a("li"),X6e=a("strong"),u0r=o("xlnet"),b0r=o(" \u2014 "),uJ=a("a"),v0r=o("TFXLNetForTokenClassification"),F0r=o(" (XLNet model)"),T0r=l(),F(oC.$$.fragment),Jje=l(),Tc=a("h2"),rC=a("a"),z6e=a("span"),F(_9.$$.fragment),M0r=l(),W6e=a("span"),E0r=o("TFAutoModelForQuestionAnswering"),Yje=l(),ir=a("div"),F(u9.$$.fragment),C0r=l(),Mc=a("p"),w0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bJ=a("a"),A0r=o("from_pretrained()"),y0r=o(" class method or the "),vJ=a("a"),L0r=o("from_config()"),x0r=o(` class
method.`),$0r=l(),b9=a("p"),k0r=o("This class cannot be instantiated directly using "),Q6e=a("code"),S0r=o("__init__()"),R0r=o(" (throws an error)."),P0r=l(),qt=a("div"),F(v9.$$.fragment),B0r=l(),H6e=a("p"),I0r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),N0r=l(),Ec=a("p"),q0r=o(`Note:
Loading a model from its configuration file does `),U6e=a("strong"),j0r=o("not"),D0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FJ=a("a"),G0r=o("from_pretrained()"),O0r=o(" to load the model weights."),V0r=l(),F(tC.$$.fragment),X0r=l(),Ir=a("div"),F(F9.$$.fragment),z0r=l(),J6e=a("p"),W0r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Q0r=l(),fn=a("p"),H0r=o("The model class to instantiate is selected based on the "),Y6e=a("code"),U0r=o("model_type"),J0r=o(` property of the config object (either
passed as an argument or loaded from `),K6e=a("code"),Y0r=o("pretrained_model_name_or_path"),K0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z6e=a("code"),Z0r=o("pretrained_model_name_or_path"),eAr=o(":"),oAr=l(),ce=a("ul"),aC=a("li"),eTe=a("strong"),rAr=o("albert"),tAr=o(" \u2014 "),TJ=a("a"),aAr=o("TFAlbertForQuestionAnswering"),nAr=o(" (ALBERT model)"),sAr=l(),nC=a("li"),oTe=a("strong"),lAr=o("bert"),iAr=o(" \u2014 "),MJ=a("a"),dAr=o("TFBertForQuestionAnswering"),cAr=o(" (BERT model)"),fAr=l(),sC=a("li"),rTe=a("strong"),mAr=o("camembert"),gAr=o(" \u2014 "),EJ=a("a"),hAr=o("TFCamembertForQuestionAnswering"),pAr=o(" (CamemBERT model)"),_Ar=l(),lC=a("li"),tTe=a("strong"),uAr=o("convbert"),bAr=o(" \u2014 "),CJ=a("a"),vAr=o("TFConvBertForQuestionAnswering"),FAr=o(" (ConvBERT model)"),TAr=l(),iC=a("li"),aTe=a("strong"),MAr=o("deberta"),EAr=o(" \u2014 "),wJ=a("a"),CAr=o("TFDebertaForQuestionAnswering"),wAr=o(" (DeBERTa model)"),AAr=l(),dC=a("li"),nTe=a("strong"),yAr=o("deberta-v2"),LAr=o(" \u2014 "),AJ=a("a"),xAr=o("TFDebertaV2ForQuestionAnswering"),$Ar=o(" (DeBERTa-v2 model)"),kAr=l(),cC=a("li"),sTe=a("strong"),SAr=o("distilbert"),RAr=o(" \u2014 "),yJ=a("a"),PAr=o("TFDistilBertForQuestionAnswering"),BAr=o(" (DistilBERT model)"),IAr=l(),fC=a("li"),lTe=a("strong"),NAr=o("electra"),qAr=o(" \u2014 "),LJ=a("a"),jAr=o("TFElectraForQuestionAnswering"),DAr=o(" (ELECTRA model)"),GAr=l(),mC=a("li"),iTe=a("strong"),OAr=o("flaubert"),VAr=o(" \u2014 "),xJ=a("a"),XAr=o("TFFlaubertForQuestionAnsweringSimple"),zAr=o(" (FlauBERT model)"),WAr=l(),gC=a("li"),dTe=a("strong"),QAr=o("funnel"),HAr=o(" \u2014 "),$J=a("a"),UAr=o("TFFunnelForQuestionAnswering"),JAr=o(" (Funnel Transformer model)"),YAr=l(),hC=a("li"),cTe=a("strong"),KAr=o("gptj"),ZAr=o(" \u2014 "),kJ=a("a"),eyr=o("TFGPTJForQuestionAnswering"),oyr=o(" (GPT-J model)"),ryr=l(),pC=a("li"),fTe=a("strong"),tyr=o("longformer"),ayr=o(" \u2014 "),SJ=a("a"),nyr=o("TFLongformerForQuestionAnswering"),syr=o(" (Longformer model)"),lyr=l(),_C=a("li"),mTe=a("strong"),iyr=o("mobilebert"),dyr=o(" \u2014 "),RJ=a("a"),cyr=o("TFMobileBertForQuestionAnswering"),fyr=o(" (MobileBERT model)"),myr=l(),uC=a("li"),gTe=a("strong"),gyr=o("mpnet"),hyr=o(" \u2014 "),PJ=a("a"),pyr=o("TFMPNetForQuestionAnswering"),_yr=o(" (MPNet model)"),uyr=l(),bC=a("li"),hTe=a("strong"),byr=o("rembert"),vyr=o(" \u2014 "),BJ=a("a"),Fyr=o("TFRemBertForQuestionAnswering"),Tyr=o(" (RemBERT model)"),Myr=l(),vC=a("li"),pTe=a("strong"),Eyr=o("roberta"),Cyr=o(" \u2014 "),IJ=a("a"),wyr=o("TFRobertaForQuestionAnswering"),Ayr=o(" (RoBERTa model)"),yyr=l(),FC=a("li"),_Te=a("strong"),Lyr=o("roformer"),xyr=o(" \u2014 "),NJ=a("a"),$yr=o("TFRoFormerForQuestionAnswering"),kyr=o(" (RoFormer model)"),Syr=l(),TC=a("li"),uTe=a("strong"),Ryr=o("xlm"),Pyr=o(" \u2014 "),qJ=a("a"),Byr=o("TFXLMForQuestionAnsweringSimple"),Iyr=o(" (XLM model)"),Nyr=l(),MC=a("li"),bTe=a("strong"),qyr=o("xlm-roberta"),jyr=o(" \u2014 "),jJ=a("a"),Dyr=o("TFXLMRobertaForQuestionAnswering"),Gyr=o(" (XLM-RoBERTa model)"),Oyr=l(),EC=a("li"),vTe=a("strong"),Vyr=o("xlnet"),Xyr=o(" \u2014 "),DJ=a("a"),zyr=o("TFXLNetForQuestionAnsweringSimple"),Wyr=o(" (XLNet model)"),Qyr=l(),F(CC.$$.fragment),Kje=l(),Cc=a("h2"),wC=a("a"),FTe=a("span"),F(T9.$$.fragment),Hyr=l(),TTe=a("span"),Uyr=o("TFAutoModelForVision2Seq"),Zje=l(),dr=a("div"),F(M9.$$.fragment),Jyr=l(),wc=a("p"),Yyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),GJ=a("a"),Kyr=o("from_pretrained()"),Zyr=o(" class method or the "),OJ=a("a"),eLr=o("from_config()"),oLr=o(` class
method.`),rLr=l(),E9=a("p"),tLr=o("This class cannot be instantiated directly using "),MTe=a("code"),aLr=o("__init__()"),nLr=o(" (throws an error)."),sLr=l(),jt=a("div"),F(C9.$$.fragment),lLr=l(),ETe=a("p"),iLr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),dLr=l(),Ac=a("p"),cLr=o(`Note:
Loading a model from its configuration file does `),CTe=a("strong"),fLr=o("not"),mLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=a("a"),gLr=o("from_pretrained()"),hLr=o(" to load the model weights."),pLr=l(),F(AC.$$.fragment),_Lr=l(),Nr=a("div"),F(w9.$$.fragment),uLr=l(),wTe=a("p"),bLr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),vLr=l(),mn=a("p"),FLr=o("The model class to instantiate is selected based on the "),ATe=a("code"),TLr=o("model_type"),MLr=o(` property of the config object (either
passed as an argument or loaded from `),yTe=a("code"),ELr=o("pretrained_model_name_or_path"),CLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LTe=a("code"),wLr=o("pretrained_model_name_or_path"),ALr=o(":"),yLr=l(),xTe=a("ul"),yC=a("li"),$Te=a("strong"),LLr=o("vision-encoder-decoder"),xLr=o(" \u2014 "),XJ=a("a"),$Lr=o("TFVisionEncoderDecoderModel"),kLr=o(" (Vision Encoder decoder model)"),SLr=l(),F(LC.$$.fragment),eDe=l(),yc=a("h2"),xC=a("a"),kTe=a("span"),F(A9.$$.fragment),RLr=l(),STe=a("span"),PLr=o("TFAutoModelForSpeechSeq2Seq"),oDe=l(),cr=a("div"),F(y9.$$.fragment),BLr=l(),Lc=a("p"),ILr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),zJ=a("a"),NLr=o("from_pretrained()"),qLr=o(" class method or the "),WJ=a("a"),jLr=o("from_config()"),DLr=o(` class
method.`),GLr=l(),L9=a("p"),OLr=o("This class cannot be instantiated directly using "),RTe=a("code"),VLr=o("__init__()"),XLr=o(" (throws an error)."),zLr=l(),Dt=a("div"),F(x9.$$.fragment),WLr=l(),PTe=a("p"),QLr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),HLr=l(),xc=a("p"),ULr=o(`Note:
Loading a model from its configuration file does `),BTe=a("strong"),JLr=o("not"),YLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=a("a"),KLr=o("from_pretrained()"),ZLr=o(" to load the model weights."),e8r=l(),F($C.$$.fragment),o8r=l(),qr=a("div"),F($9.$$.fragment),r8r=l(),ITe=a("p"),t8r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),a8r=l(),gn=a("p"),n8r=o("The model class to instantiate is selected based on the "),NTe=a("code"),s8r=o("model_type"),l8r=o(` property of the config object (either
passed as an argument or loaded from `),qTe=a("code"),i8r=o("pretrained_model_name_or_path"),d8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jTe=a("code"),c8r=o("pretrained_model_name_or_path"),f8r=o(":"),m8r=l(),DTe=a("ul"),kC=a("li"),GTe=a("strong"),g8r=o("speech_to_text"),h8r=o(" \u2014 "),HJ=a("a"),p8r=o("TFSpeech2TextForConditionalGeneration"),_8r=o(" (Speech2Text model)"),u8r=l(),F(SC.$$.fragment),rDe=l(),$c=a("h2"),RC=a("a"),OTe=a("span"),F(k9.$$.fragment),b8r=l(),VTe=a("span"),v8r=o("FlaxAutoModel"),tDe=l(),fr=a("div"),F(S9.$$.fragment),F8r=l(),kc=a("p"),T8r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),UJ=a("a"),M8r=o("from_pretrained()"),E8r=o(" class method or the "),JJ=a("a"),C8r=o("from_config()"),w8r=o(` class
method.`),A8r=l(),R9=a("p"),y8r=o("This class cannot be instantiated directly using "),XTe=a("code"),L8r=o("__init__()"),x8r=o(" (throws an error)."),$8r=l(),Gt=a("div"),F(P9.$$.fragment),k8r=l(),zTe=a("p"),S8r=o("Instantiates one of the base model classes of the library from a configuration."),R8r=l(),Sc=a("p"),P8r=o(`Note:
Loading a model from its configuration file does `),WTe=a("strong"),B8r=o("not"),I8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YJ=a("a"),N8r=o("from_pretrained()"),q8r=o(" to load the model weights."),j8r=l(),F(PC.$$.fragment),D8r=l(),jr=a("div"),F(B9.$$.fragment),G8r=l(),QTe=a("p"),O8r=o("Instantiate one of the base model classes of the library from a pretrained model."),V8r=l(),hn=a("p"),X8r=o("The model class to instantiate is selected based on the "),HTe=a("code"),z8r=o("model_type"),W8r=o(` property of the config object (either
passed as an argument or loaded from `),UTe=a("code"),Q8r=o("pretrained_model_name_or_path"),H8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JTe=a("code"),U8r=o("pretrained_model_name_or_path"),J8r=o(":"),Y8r=l(),te=a("ul"),BC=a("li"),YTe=a("strong"),K8r=o("albert"),Z8r=o(" \u2014 "),KJ=a("a"),e9r=o("FlaxAlbertModel"),o9r=o(" (ALBERT model)"),r9r=l(),IC=a("li"),KTe=a("strong"),t9r=o("bart"),a9r=o(" \u2014 "),ZJ=a("a"),n9r=o("FlaxBartModel"),s9r=o(" (BART model)"),l9r=l(),NC=a("li"),ZTe=a("strong"),i9r=o("beit"),d9r=o(" \u2014 "),eY=a("a"),c9r=o("FlaxBeitModel"),f9r=o(" (BEiT model)"),m9r=l(),qC=a("li"),e7e=a("strong"),g9r=o("bert"),h9r=o(" \u2014 "),oY=a("a"),p9r=o("FlaxBertModel"),_9r=o(" (BERT model)"),u9r=l(),jC=a("li"),o7e=a("strong"),b9r=o("big_bird"),v9r=o(" \u2014 "),rY=a("a"),F9r=o("FlaxBigBirdModel"),T9r=o(" (BigBird model)"),M9r=l(),DC=a("li"),r7e=a("strong"),E9r=o("blenderbot"),C9r=o(" \u2014 "),tY=a("a"),w9r=o("FlaxBlenderbotModel"),A9r=o(" (Blenderbot model)"),y9r=l(),GC=a("li"),t7e=a("strong"),L9r=o("blenderbot-small"),x9r=o(" \u2014 "),aY=a("a"),$9r=o("FlaxBlenderbotSmallModel"),k9r=o(" (BlenderbotSmall model)"),S9r=l(),OC=a("li"),a7e=a("strong"),R9r=o("clip"),P9r=o(" \u2014 "),nY=a("a"),B9r=o("FlaxCLIPModel"),I9r=o(" (CLIP model)"),N9r=l(),VC=a("li"),n7e=a("strong"),q9r=o("distilbert"),j9r=o(" \u2014 "),sY=a("a"),D9r=o("FlaxDistilBertModel"),G9r=o(" (DistilBERT model)"),O9r=l(),XC=a("li"),s7e=a("strong"),V9r=o("electra"),X9r=o(" \u2014 "),lY=a("a"),z9r=o("FlaxElectraModel"),W9r=o(" (ELECTRA model)"),Q9r=l(),zC=a("li"),l7e=a("strong"),H9r=o("gpt2"),U9r=o(" \u2014 "),iY=a("a"),J9r=o("FlaxGPT2Model"),Y9r=o(" (OpenAI GPT-2 model)"),K9r=l(),WC=a("li"),i7e=a("strong"),Z9r=o("gpt_neo"),exr=o(" \u2014 "),dY=a("a"),oxr=o("FlaxGPTNeoModel"),rxr=o(" (GPT Neo model)"),txr=l(),QC=a("li"),d7e=a("strong"),axr=o("gptj"),nxr=o(" \u2014 "),cY=a("a"),sxr=o("FlaxGPTJModel"),lxr=o(" (GPT-J model)"),ixr=l(),HC=a("li"),c7e=a("strong"),dxr=o("marian"),cxr=o(" \u2014 "),fY=a("a"),fxr=o("FlaxMarianModel"),mxr=o(" (Marian model)"),gxr=l(),UC=a("li"),f7e=a("strong"),hxr=o("mbart"),pxr=o(" \u2014 "),mY=a("a"),_xr=o("FlaxMBartModel"),uxr=o(" (mBART model)"),bxr=l(),JC=a("li"),m7e=a("strong"),vxr=o("mt5"),Fxr=o(" \u2014 "),gY=a("a"),Txr=o("FlaxMT5Model"),Mxr=o(" (mT5 model)"),Exr=l(),YC=a("li"),g7e=a("strong"),Cxr=o("pegasus"),wxr=o(" \u2014 "),hY=a("a"),Axr=o("FlaxPegasusModel"),yxr=o(" (Pegasus model)"),Lxr=l(),KC=a("li"),h7e=a("strong"),xxr=o("roberta"),$xr=o(" \u2014 "),pY=a("a"),kxr=o("FlaxRobertaModel"),Sxr=o(" (RoBERTa model)"),Rxr=l(),ZC=a("li"),p7e=a("strong"),Pxr=o("roformer"),Bxr=o(" \u2014 "),_Y=a("a"),Ixr=o("FlaxRoFormerModel"),Nxr=o(" (RoFormer model)"),qxr=l(),e5=a("li"),_7e=a("strong"),jxr=o("t5"),Dxr=o(" \u2014 "),uY=a("a"),Gxr=o("FlaxT5Model"),Oxr=o(" (T5 model)"),Vxr=l(),o5=a("li"),u7e=a("strong"),Xxr=o("vision-text-dual-encoder"),zxr=o(" \u2014 "),bY=a("a"),Wxr=o("FlaxVisionTextDualEncoderModel"),Qxr=o(" (VisionTextDualEncoder model)"),Hxr=l(),r5=a("li"),b7e=a("strong"),Uxr=o("vit"),Jxr=o(" \u2014 "),vY=a("a"),Yxr=o("FlaxViTModel"),Kxr=o(" (ViT model)"),Zxr=l(),t5=a("li"),v7e=a("strong"),e$r=o("wav2vec2"),o$r=o(" \u2014 "),FY=a("a"),r$r=o("FlaxWav2Vec2Model"),t$r=o(" (Wav2Vec2 model)"),a$r=l(),a5=a("li"),F7e=a("strong"),n$r=o("xglm"),s$r=o(" \u2014 "),TY=a("a"),l$r=o("FlaxXGLMModel"),i$r=o(" (XGLM model)"),d$r=l(),n5=a("li"),T7e=a("strong"),c$r=o("xlm-roberta"),f$r=o(" \u2014 "),MY=a("a"),m$r=o("FlaxXLMRobertaModel"),g$r=o(" (XLM-RoBERTa model)"),h$r=l(),F(s5.$$.fragment),aDe=l(),Rc=a("h2"),l5=a("a"),M7e=a("span"),F(I9.$$.fragment),p$r=l(),E7e=a("span"),_$r=o("FlaxAutoModelForCausalLM"),nDe=l(),mr=a("div"),F(N9.$$.fragment),u$r=l(),Pc=a("p"),b$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),EY=a("a"),v$r=o("from_pretrained()"),F$r=o(" class method or the "),CY=a("a"),T$r=o("from_config()"),M$r=o(` class
method.`),E$r=l(),q9=a("p"),C$r=o("This class cannot be instantiated directly using "),C7e=a("code"),w$r=o("__init__()"),A$r=o(" (throws an error)."),y$r=l(),Ot=a("div"),F(j9.$$.fragment),L$r=l(),w7e=a("p"),x$r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),$$r=l(),Bc=a("p"),k$r=o(`Note:
Loading a model from its configuration file does `),A7e=a("strong"),S$r=o("not"),R$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=a("a"),P$r=o("from_pretrained()"),B$r=o(" to load the model weights."),I$r=l(),F(i5.$$.fragment),N$r=l(),Dr=a("div"),F(D9.$$.fragment),q$r=l(),y7e=a("p"),j$r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),D$r=l(),pn=a("p"),G$r=o("The model class to instantiate is selected based on the "),L7e=a("code"),O$r=o("model_type"),V$r=o(` property of the config object (either
passed as an argument or loaded from `),x7e=a("code"),X$r=o("pretrained_model_name_or_path"),z$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$7e=a("code"),W$r=o("pretrained_model_name_or_path"),Q$r=o(":"),H$r=l(),Re=a("ul"),d5=a("li"),k7e=a("strong"),U$r=o("bart"),J$r=o(" \u2014 "),AY=a("a"),Y$r=o("FlaxBartForCausalLM"),K$r=o(" (BART model)"),Z$r=l(),c5=a("li"),S7e=a("strong"),ekr=o("bert"),okr=o(" \u2014 "),yY=a("a"),rkr=o("FlaxBertForCausalLM"),tkr=o(" (BERT model)"),akr=l(),f5=a("li"),R7e=a("strong"),nkr=o("big_bird"),skr=o(" \u2014 "),LY=a("a"),lkr=o("FlaxBigBirdForCausalLM"),ikr=o(" (BigBird model)"),dkr=l(),m5=a("li"),P7e=a("strong"),ckr=o("electra"),fkr=o(" \u2014 "),xY=a("a"),mkr=o("FlaxElectraForCausalLM"),gkr=o(" (ELECTRA model)"),hkr=l(),g5=a("li"),B7e=a("strong"),pkr=o("gpt2"),_kr=o(" \u2014 "),$Y=a("a"),ukr=o("FlaxGPT2LMHeadModel"),bkr=o(" (OpenAI GPT-2 model)"),vkr=l(),h5=a("li"),I7e=a("strong"),Fkr=o("gpt_neo"),Tkr=o(" \u2014 "),kY=a("a"),Mkr=o("FlaxGPTNeoForCausalLM"),Ekr=o(" (GPT Neo model)"),Ckr=l(),p5=a("li"),N7e=a("strong"),wkr=o("gptj"),Akr=o(" \u2014 "),SY=a("a"),ykr=o("FlaxGPTJForCausalLM"),Lkr=o(" (GPT-J model)"),xkr=l(),_5=a("li"),q7e=a("strong"),$kr=o("roberta"),kkr=o(" \u2014 "),RY=a("a"),Skr=o("FlaxRobertaForCausalLM"),Rkr=o(" (RoBERTa model)"),Pkr=l(),u5=a("li"),j7e=a("strong"),Bkr=o("xglm"),Ikr=o(" \u2014 "),PY=a("a"),Nkr=o("FlaxXGLMForCausalLM"),qkr=o(" (XGLM model)"),jkr=l(),F(b5.$$.fragment),sDe=l(),Ic=a("h2"),v5=a("a"),D7e=a("span"),F(G9.$$.fragment),Dkr=l(),G7e=a("span"),Gkr=o("FlaxAutoModelForPreTraining"),lDe=l(),gr=a("div"),F(O9.$$.fragment),Okr=l(),Nc=a("p"),Vkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),BY=a("a"),Xkr=o("from_pretrained()"),zkr=o(" class method or the "),IY=a("a"),Wkr=o("from_config()"),Qkr=o(` class
method.`),Hkr=l(),V9=a("p"),Ukr=o("This class cannot be instantiated directly using "),O7e=a("code"),Jkr=o("__init__()"),Ykr=o(" (throws an error)."),Kkr=l(),Vt=a("div"),F(X9.$$.fragment),Zkr=l(),V7e=a("p"),eSr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),oSr=l(),qc=a("p"),rSr=o(`Note:
Loading a model from its configuration file does `),X7e=a("strong"),tSr=o("not"),aSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NY=a("a"),nSr=o("from_pretrained()"),sSr=o(" to load the model weights."),lSr=l(),F(F5.$$.fragment),iSr=l(),Gr=a("div"),F(z9.$$.fragment),dSr=l(),z7e=a("p"),cSr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),fSr=l(),_n=a("p"),mSr=o("The model class to instantiate is selected based on the "),W7e=a("code"),gSr=o("model_type"),hSr=o(` property of the config object (either
passed as an argument or loaded from `),Q7e=a("code"),pSr=o("pretrained_model_name_or_path"),_Sr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H7e=a("code"),uSr=o("pretrained_model_name_or_path"),bSr=o(":"),vSr=l(),Ee=a("ul"),T5=a("li"),U7e=a("strong"),FSr=o("albert"),TSr=o(" \u2014 "),qY=a("a"),MSr=o("FlaxAlbertForPreTraining"),ESr=o(" (ALBERT model)"),CSr=l(),M5=a("li"),J7e=a("strong"),wSr=o("bart"),ASr=o(" \u2014 "),jY=a("a"),ySr=o("FlaxBartForConditionalGeneration"),LSr=o(" (BART model)"),xSr=l(),E5=a("li"),Y7e=a("strong"),$Sr=o("bert"),kSr=o(" \u2014 "),DY=a("a"),SSr=o("FlaxBertForPreTraining"),RSr=o(" (BERT model)"),PSr=l(),C5=a("li"),K7e=a("strong"),BSr=o("big_bird"),ISr=o(" \u2014 "),GY=a("a"),NSr=o("FlaxBigBirdForPreTraining"),qSr=o(" (BigBird model)"),jSr=l(),w5=a("li"),Z7e=a("strong"),DSr=o("electra"),GSr=o(" \u2014 "),OY=a("a"),OSr=o("FlaxElectraForPreTraining"),VSr=o(" (ELECTRA model)"),XSr=l(),A5=a("li"),eMe=a("strong"),zSr=o("mbart"),WSr=o(" \u2014 "),VY=a("a"),QSr=o("FlaxMBartForConditionalGeneration"),HSr=o(" (mBART model)"),USr=l(),y5=a("li"),oMe=a("strong"),JSr=o("mt5"),YSr=o(" \u2014 "),XY=a("a"),KSr=o("FlaxMT5ForConditionalGeneration"),ZSr=o(" (mT5 model)"),eRr=l(),L5=a("li"),rMe=a("strong"),oRr=o("roberta"),rRr=o(" \u2014 "),zY=a("a"),tRr=o("FlaxRobertaForMaskedLM"),aRr=o(" (RoBERTa model)"),nRr=l(),x5=a("li"),tMe=a("strong"),sRr=o("roformer"),lRr=o(" \u2014 "),WY=a("a"),iRr=o("FlaxRoFormerForMaskedLM"),dRr=o(" (RoFormer model)"),cRr=l(),$5=a("li"),aMe=a("strong"),fRr=o("t5"),mRr=o(" \u2014 "),QY=a("a"),gRr=o("FlaxT5ForConditionalGeneration"),hRr=o(" (T5 model)"),pRr=l(),k5=a("li"),nMe=a("strong"),_Rr=o("wav2vec2"),uRr=o(" \u2014 "),HY=a("a"),bRr=o("FlaxWav2Vec2ForPreTraining"),vRr=o(" (Wav2Vec2 model)"),FRr=l(),S5=a("li"),sMe=a("strong"),TRr=o("xlm-roberta"),MRr=o(" \u2014 "),UY=a("a"),ERr=o("FlaxXLMRobertaForMaskedLM"),CRr=o(" (XLM-RoBERTa model)"),wRr=l(),F(R5.$$.fragment),iDe=l(),jc=a("h2"),P5=a("a"),lMe=a("span"),F(W9.$$.fragment),ARr=l(),iMe=a("span"),yRr=o("FlaxAutoModelForMaskedLM"),dDe=l(),hr=a("div"),F(Q9.$$.fragment),LRr=l(),Dc=a("p"),xRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),JY=a("a"),$Rr=o("from_pretrained()"),kRr=o(" class method or the "),YY=a("a"),SRr=o("from_config()"),RRr=o(` class
method.`),PRr=l(),H9=a("p"),BRr=o("This class cannot be instantiated directly using "),dMe=a("code"),IRr=o("__init__()"),NRr=o(" (throws an error)."),qRr=l(),Xt=a("div"),F(U9.$$.fragment),jRr=l(),cMe=a("p"),DRr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),GRr=l(),Gc=a("p"),ORr=o(`Note:
Loading a model from its configuration file does `),fMe=a("strong"),VRr=o("not"),XRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KY=a("a"),zRr=o("from_pretrained()"),WRr=o(" to load the model weights."),QRr=l(),F(B5.$$.fragment),HRr=l(),Or=a("div"),F(J9.$$.fragment),URr=l(),mMe=a("p"),JRr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),YRr=l(),un=a("p"),KRr=o("The model class to instantiate is selected based on the "),gMe=a("code"),ZRr=o("model_type"),ePr=o(` property of the config object (either
passed as an argument or loaded from `),hMe=a("code"),oPr=o("pretrained_model_name_or_path"),rPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pMe=a("code"),tPr=o("pretrained_model_name_or_path"),aPr=o(":"),nPr=l(),Le=a("ul"),I5=a("li"),_Me=a("strong"),sPr=o("albert"),lPr=o(" \u2014 "),ZY=a("a"),iPr=o("FlaxAlbertForMaskedLM"),dPr=o(" (ALBERT model)"),cPr=l(),N5=a("li"),uMe=a("strong"),fPr=o("bart"),mPr=o(" \u2014 "),eK=a("a"),gPr=o("FlaxBartForConditionalGeneration"),hPr=o(" (BART model)"),pPr=l(),q5=a("li"),bMe=a("strong"),_Pr=o("bert"),uPr=o(" \u2014 "),oK=a("a"),bPr=o("FlaxBertForMaskedLM"),vPr=o(" (BERT model)"),FPr=l(),j5=a("li"),vMe=a("strong"),TPr=o("big_bird"),MPr=o(" \u2014 "),rK=a("a"),EPr=o("FlaxBigBirdForMaskedLM"),CPr=o(" (BigBird model)"),wPr=l(),D5=a("li"),FMe=a("strong"),APr=o("distilbert"),yPr=o(" \u2014 "),tK=a("a"),LPr=o("FlaxDistilBertForMaskedLM"),xPr=o(" (DistilBERT model)"),$Pr=l(),G5=a("li"),TMe=a("strong"),kPr=o("electra"),SPr=o(" \u2014 "),aK=a("a"),RPr=o("FlaxElectraForMaskedLM"),PPr=o(" (ELECTRA model)"),BPr=l(),O5=a("li"),MMe=a("strong"),IPr=o("mbart"),NPr=o(" \u2014 "),nK=a("a"),qPr=o("FlaxMBartForConditionalGeneration"),jPr=o(" (mBART model)"),DPr=l(),V5=a("li"),EMe=a("strong"),GPr=o("roberta"),OPr=o(" \u2014 "),sK=a("a"),VPr=o("FlaxRobertaForMaskedLM"),XPr=o(" (RoBERTa model)"),zPr=l(),X5=a("li"),CMe=a("strong"),WPr=o("roformer"),QPr=o(" \u2014 "),lK=a("a"),HPr=o("FlaxRoFormerForMaskedLM"),UPr=o(" (RoFormer model)"),JPr=l(),z5=a("li"),wMe=a("strong"),YPr=o("xlm-roberta"),KPr=o(" \u2014 "),iK=a("a"),ZPr=o("FlaxXLMRobertaForMaskedLM"),eBr=o(" (XLM-RoBERTa model)"),oBr=l(),F(W5.$$.fragment),cDe=l(),Oc=a("h2"),Q5=a("a"),AMe=a("span"),F(Y9.$$.fragment),rBr=l(),yMe=a("span"),tBr=o("FlaxAutoModelForSeq2SeqLM"),fDe=l(),pr=a("div"),F(K9.$$.fragment),aBr=l(),Vc=a("p"),nBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),dK=a("a"),sBr=o("from_pretrained()"),lBr=o(" class method or the "),cK=a("a"),iBr=o("from_config()"),dBr=o(` class
method.`),cBr=l(),Z9=a("p"),fBr=o("This class cannot be instantiated directly using "),LMe=a("code"),mBr=o("__init__()"),gBr=o(" (throws an error)."),hBr=l(),zt=a("div"),F(ex.$$.fragment),pBr=l(),xMe=a("p"),_Br=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),uBr=l(),Xc=a("p"),bBr=o(`Note:
Loading a model from its configuration file does `),$Me=a("strong"),vBr=o("not"),FBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fK=a("a"),TBr=o("from_pretrained()"),MBr=o(" to load the model weights."),EBr=l(),F(H5.$$.fragment),CBr=l(),Vr=a("div"),F(ox.$$.fragment),wBr=l(),kMe=a("p"),ABr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),yBr=l(),bn=a("p"),LBr=o("The model class to instantiate is selected based on the "),SMe=a("code"),xBr=o("model_type"),$Br=o(` property of the config object (either
passed as an argument or loaded from `),RMe=a("code"),kBr=o("pretrained_model_name_or_path"),SBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PMe=a("code"),RBr=o("pretrained_model_name_or_path"),PBr=o(":"),BBr=l(),Pe=a("ul"),U5=a("li"),BMe=a("strong"),IBr=o("bart"),NBr=o(" \u2014 "),mK=a("a"),qBr=o("FlaxBartForConditionalGeneration"),jBr=o(" (BART model)"),DBr=l(),J5=a("li"),IMe=a("strong"),GBr=o("blenderbot"),OBr=o(" \u2014 "),gK=a("a"),VBr=o("FlaxBlenderbotForConditionalGeneration"),XBr=o(" (Blenderbot model)"),zBr=l(),Y5=a("li"),NMe=a("strong"),WBr=o("blenderbot-small"),QBr=o(" \u2014 "),hK=a("a"),HBr=o("FlaxBlenderbotSmallForConditionalGeneration"),UBr=o(" (BlenderbotSmall model)"),JBr=l(),K5=a("li"),qMe=a("strong"),YBr=o("encoder-decoder"),KBr=o(" \u2014 "),pK=a("a"),ZBr=o("FlaxEncoderDecoderModel"),eIr=o(" (Encoder decoder model)"),oIr=l(),Z5=a("li"),jMe=a("strong"),rIr=o("marian"),tIr=o(" \u2014 "),_K=a("a"),aIr=o("FlaxMarianMTModel"),nIr=o(" (Marian model)"),sIr=l(),e3=a("li"),DMe=a("strong"),lIr=o("mbart"),iIr=o(" \u2014 "),uK=a("a"),dIr=o("FlaxMBartForConditionalGeneration"),cIr=o(" (mBART model)"),fIr=l(),o3=a("li"),GMe=a("strong"),mIr=o("mt5"),gIr=o(" \u2014 "),bK=a("a"),hIr=o("FlaxMT5ForConditionalGeneration"),pIr=o(" (mT5 model)"),_Ir=l(),r3=a("li"),OMe=a("strong"),uIr=o("pegasus"),bIr=o(" \u2014 "),vK=a("a"),vIr=o("FlaxPegasusForConditionalGeneration"),FIr=o(" (Pegasus model)"),TIr=l(),t3=a("li"),VMe=a("strong"),MIr=o("t5"),EIr=o(" \u2014 "),FK=a("a"),CIr=o("FlaxT5ForConditionalGeneration"),wIr=o(" (T5 model)"),AIr=l(),F(a3.$$.fragment),mDe=l(),zc=a("h2"),n3=a("a"),XMe=a("span"),F(rx.$$.fragment),yIr=l(),zMe=a("span"),LIr=o("FlaxAutoModelForSequenceClassification"),gDe=l(),_r=a("div"),F(tx.$$.fragment),xIr=l(),Wc=a("p"),$Ir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),TK=a("a"),kIr=o("from_pretrained()"),SIr=o(" class method or the "),MK=a("a"),RIr=o("from_config()"),PIr=o(` class
method.`),BIr=l(),ax=a("p"),IIr=o("This class cannot be instantiated directly using "),WMe=a("code"),NIr=o("__init__()"),qIr=o(" (throws an error)."),jIr=l(),Wt=a("div"),F(nx.$$.fragment),DIr=l(),QMe=a("p"),GIr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),OIr=l(),Qc=a("p"),VIr=o(`Note:
Loading a model from its configuration file does `),HMe=a("strong"),XIr=o("not"),zIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EK=a("a"),WIr=o("from_pretrained()"),QIr=o(" to load the model weights."),HIr=l(),F(s3.$$.fragment),UIr=l(),Xr=a("div"),F(sx.$$.fragment),JIr=l(),UMe=a("p"),YIr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),KIr=l(),vn=a("p"),ZIr=o("The model class to instantiate is selected based on the "),JMe=a("code"),eNr=o("model_type"),oNr=o(` property of the config object (either
passed as an argument or loaded from `),YMe=a("code"),rNr=o("pretrained_model_name_or_path"),tNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KMe=a("code"),aNr=o("pretrained_model_name_or_path"),nNr=o(":"),sNr=l(),xe=a("ul"),l3=a("li"),ZMe=a("strong"),lNr=o("albert"),iNr=o(" \u2014 "),CK=a("a"),dNr=o("FlaxAlbertForSequenceClassification"),cNr=o(" (ALBERT model)"),fNr=l(),i3=a("li"),eEe=a("strong"),mNr=o("bart"),gNr=o(" \u2014 "),wK=a("a"),hNr=o("FlaxBartForSequenceClassification"),pNr=o(" (BART model)"),_Nr=l(),d3=a("li"),oEe=a("strong"),uNr=o("bert"),bNr=o(" \u2014 "),AK=a("a"),vNr=o("FlaxBertForSequenceClassification"),FNr=o(" (BERT model)"),TNr=l(),c3=a("li"),rEe=a("strong"),MNr=o("big_bird"),ENr=o(" \u2014 "),yK=a("a"),CNr=o("FlaxBigBirdForSequenceClassification"),wNr=o(" (BigBird model)"),ANr=l(),f3=a("li"),tEe=a("strong"),yNr=o("distilbert"),LNr=o(" \u2014 "),LK=a("a"),xNr=o("FlaxDistilBertForSequenceClassification"),$Nr=o(" (DistilBERT model)"),kNr=l(),m3=a("li"),aEe=a("strong"),SNr=o("electra"),RNr=o(" \u2014 "),xK=a("a"),PNr=o("FlaxElectraForSequenceClassification"),BNr=o(" (ELECTRA model)"),INr=l(),g3=a("li"),nEe=a("strong"),NNr=o("mbart"),qNr=o(" \u2014 "),$K=a("a"),jNr=o("FlaxMBartForSequenceClassification"),DNr=o(" (mBART model)"),GNr=l(),h3=a("li"),sEe=a("strong"),ONr=o("roberta"),VNr=o(" \u2014 "),kK=a("a"),XNr=o("FlaxRobertaForSequenceClassification"),zNr=o(" (RoBERTa model)"),WNr=l(),p3=a("li"),lEe=a("strong"),QNr=o("roformer"),HNr=o(" \u2014 "),SK=a("a"),UNr=o("FlaxRoFormerForSequenceClassification"),JNr=o(" (RoFormer model)"),YNr=l(),_3=a("li"),iEe=a("strong"),KNr=o("xlm-roberta"),ZNr=o(" \u2014 "),RK=a("a"),eqr=o("FlaxXLMRobertaForSequenceClassification"),oqr=o(" (XLM-RoBERTa model)"),rqr=l(),F(u3.$$.fragment),hDe=l(),Hc=a("h2"),b3=a("a"),dEe=a("span"),F(lx.$$.fragment),tqr=l(),cEe=a("span"),aqr=o("FlaxAutoModelForQuestionAnswering"),pDe=l(),ur=a("div"),F(ix.$$.fragment),nqr=l(),Uc=a("p"),sqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),PK=a("a"),lqr=o("from_pretrained()"),iqr=o(" class method or the "),BK=a("a"),dqr=o("from_config()"),cqr=o(` class
method.`),fqr=l(),dx=a("p"),mqr=o("This class cannot be instantiated directly using "),fEe=a("code"),gqr=o("__init__()"),hqr=o(" (throws an error)."),pqr=l(),Qt=a("div"),F(cx.$$.fragment),_qr=l(),mEe=a("p"),uqr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),bqr=l(),Jc=a("p"),vqr=o(`Note:
Loading a model from its configuration file does `),gEe=a("strong"),Fqr=o("not"),Tqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IK=a("a"),Mqr=o("from_pretrained()"),Eqr=o(" to load the model weights."),Cqr=l(),F(v3.$$.fragment),wqr=l(),zr=a("div"),F(fx.$$.fragment),Aqr=l(),hEe=a("p"),yqr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Lqr=l(),Fn=a("p"),xqr=o("The model class to instantiate is selected based on the "),pEe=a("code"),$qr=o("model_type"),kqr=o(` property of the config object (either
passed as an argument or loaded from `),_Ee=a("code"),Sqr=o("pretrained_model_name_or_path"),Rqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uEe=a("code"),Pqr=o("pretrained_model_name_or_path"),Bqr=o(":"),Iqr=l(),$e=a("ul"),F3=a("li"),bEe=a("strong"),Nqr=o("albert"),qqr=o(" \u2014 "),NK=a("a"),jqr=o("FlaxAlbertForQuestionAnswering"),Dqr=o(" (ALBERT model)"),Gqr=l(),T3=a("li"),vEe=a("strong"),Oqr=o("bart"),Vqr=o(" \u2014 "),qK=a("a"),Xqr=o("FlaxBartForQuestionAnswering"),zqr=o(" (BART model)"),Wqr=l(),M3=a("li"),FEe=a("strong"),Qqr=o("bert"),Hqr=o(" \u2014 "),jK=a("a"),Uqr=o("FlaxBertForQuestionAnswering"),Jqr=o(" (BERT model)"),Yqr=l(),E3=a("li"),TEe=a("strong"),Kqr=o("big_bird"),Zqr=o(" \u2014 "),DK=a("a"),ejr=o("FlaxBigBirdForQuestionAnswering"),ojr=o(" (BigBird model)"),rjr=l(),C3=a("li"),MEe=a("strong"),tjr=o("distilbert"),ajr=o(" \u2014 "),GK=a("a"),njr=o("FlaxDistilBertForQuestionAnswering"),sjr=o(" (DistilBERT model)"),ljr=l(),w3=a("li"),EEe=a("strong"),ijr=o("electra"),djr=o(" \u2014 "),OK=a("a"),cjr=o("FlaxElectraForQuestionAnswering"),fjr=o(" (ELECTRA model)"),mjr=l(),A3=a("li"),CEe=a("strong"),gjr=o("mbart"),hjr=o(" \u2014 "),VK=a("a"),pjr=o("FlaxMBartForQuestionAnswering"),_jr=o(" (mBART model)"),ujr=l(),y3=a("li"),wEe=a("strong"),bjr=o("roberta"),vjr=o(" \u2014 "),XK=a("a"),Fjr=o("FlaxRobertaForQuestionAnswering"),Tjr=o(" (RoBERTa model)"),Mjr=l(),L3=a("li"),AEe=a("strong"),Ejr=o("roformer"),Cjr=o(" \u2014 "),zK=a("a"),wjr=o("FlaxRoFormerForQuestionAnswering"),Ajr=o(" (RoFormer model)"),yjr=l(),x3=a("li"),yEe=a("strong"),Ljr=o("xlm-roberta"),xjr=o(" \u2014 "),WK=a("a"),$jr=o("FlaxXLMRobertaForQuestionAnswering"),kjr=o(" (XLM-RoBERTa model)"),Sjr=l(),F($3.$$.fragment),_De=l(),Yc=a("h2"),k3=a("a"),LEe=a("span"),F(mx.$$.fragment),Rjr=l(),xEe=a("span"),Pjr=o("FlaxAutoModelForTokenClassification"),uDe=l(),br=a("div"),F(gx.$$.fragment),Bjr=l(),Kc=a("p"),Ijr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),QK=a("a"),Njr=o("from_pretrained()"),qjr=o(" class method or the "),HK=a("a"),jjr=o("from_config()"),Djr=o(` class
method.`),Gjr=l(),hx=a("p"),Ojr=o("This class cannot be instantiated directly using "),$Ee=a("code"),Vjr=o("__init__()"),Xjr=o(" (throws an error)."),zjr=l(),Ht=a("div"),F(px.$$.fragment),Wjr=l(),kEe=a("p"),Qjr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Hjr=l(),Zc=a("p"),Ujr=o(`Note:
Loading a model from its configuration file does `),SEe=a("strong"),Jjr=o("not"),Yjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UK=a("a"),Kjr=o("from_pretrained()"),Zjr=o(" to load the model weights."),eDr=l(),F(S3.$$.fragment),oDr=l(),Wr=a("div"),F(_x.$$.fragment),rDr=l(),REe=a("p"),tDr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),aDr=l(),Tn=a("p"),nDr=o("The model class to instantiate is selected based on the "),PEe=a("code"),sDr=o("model_type"),lDr=o(` property of the config object (either
passed as an argument or loaded from `),BEe=a("code"),iDr=o("pretrained_model_name_or_path"),dDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IEe=a("code"),cDr=o("pretrained_model_name_or_path"),fDr=o(":"),mDr=l(),De=a("ul"),R3=a("li"),NEe=a("strong"),gDr=o("albert"),hDr=o(" \u2014 "),JK=a("a"),pDr=o("FlaxAlbertForTokenClassification"),_Dr=o(" (ALBERT model)"),uDr=l(),P3=a("li"),qEe=a("strong"),bDr=o("bert"),vDr=o(" \u2014 "),YK=a("a"),FDr=o("FlaxBertForTokenClassification"),TDr=o(" (BERT model)"),MDr=l(),B3=a("li"),jEe=a("strong"),EDr=o("big_bird"),CDr=o(" \u2014 "),KK=a("a"),wDr=o("FlaxBigBirdForTokenClassification"),ADr=o(" (BigBird model)"),yDr=l(),I3=a("li"),DEe=a("strong"),LDr=o("distilbert"),xDr=o(" \u2014 "),ZK=a("a"),$Dr=o("FlaxDistilBertForTokenClassification"),kDr=o(" (DistilBERT model)"),SDr=l(),N3=a("li"),GEe=a("strong"),RDr=o("electra"),PDr=o(" \u2014 "),eZ=a("a"),BDr=o("FlaxElectraForTokenClassification"),IDr=o(" (ELECTRA model)"),NDr=l(),q3=a("li"),OEe=a("strong"),qDr=o("roberta"),jDr=o(" \u2014 "),oZ=a("a"),DDr=o("FlaxRobertaForTokenClassification"),GDr=o(" (RoBERTa model)"),ODr=l(),j3=a("li"),VEe=a("strong"),VDr=o("roformer"),XDr=o(" \u2014 "),rZ=a("a"),zDr=o("FlaxRoFormerForTokenClassification"),WDr=o(" (RoFormer model)"),QDr=l(),D3=a("li"),XEe=a("strong"),HDr=o("xlm-roberta"),UDr=o(" \u2014 "),tZ=a("a"),JDr=o("FlaxXLMRobertaForTokenClassification"),YDr=o(" (XLM-RoBERTa model)"),KDr=l(),F(G3.$$.fragment),bDe=l(),ef=a("h2"),O3=a("a"),zEe=a("span"),F(ux.$$.fragment),ZDr=l(),WEe=a("span"),eGr=o("FlaxAutoModelForMultipleChoice"),vDe=l(),vr=a("div"),F(bx.$$.fragment),oGr=l(),of=a("p"),rGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),aZ=a("a"),tGr=o("from_pretrained()"),aGr=o(" class method or the "),nZ=a("a"),nGr=o("from_config()"),sGr=o(` class
method.`),lGr=l(),vx=a("p"),iGr=o("This class cannot be instantiated directly using "),QEe=a("code"),dGr=o("__init__()"),cGr=o(" (throws an error)."),fGr=l(),Ut=a("div"),F(Fx.$$.fragment),mGr=l(),HEe=a("p"),gGr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),hGr=l(),rf=a("p"),pGr=o(`Note:
Loading a model from its configuration file does `),UEe=a("strong"),_Gr=o("not"),uGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sZ=a("a"),bGr=o("from_pretrained()"),vGr=o(" to load the model weights."),FGr=l(),F(V3.$$.fragment),TGr=l(),Qr=a("div"),F(Tx.$$.fragment),MGr=l(),JEe=a("p"),EGr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),CGr=l(),Mn=a("p"),wGr=o("The model class to instantiate is selected based on the "),YEe=a("code"),AGr=o("model_type"),yGr=o(` property of the config object (either
passed as an argument or loaded from `),KEe=a("code"),LGr=o("pretrained_model_name_or_path"),xGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZEe=a("code"),$Gr=o("pretrained_model_name_or_path"),kGr=o(":"),SGr=l(),Ge=a("ul"),X3=a("li"),eCe=a("strong"),RGr=o("albert"),PGr=o(" \u2014 "),lZ=a("a"),BGr=o("FlaxAlbertForMultipleChoice"),IGr=o(" (ALBERT model)"),NGr=l(),z3=a("li"),oCe=a("strong"),qGr=o("bert"),jGr=o(" \u2014 "),iZ=a("a"),DGr=o("FlaxBertForMultipleChoice"),GGr=o(" (BERT model)"),OGr=l(),W3=a("li"),rCe=a("strong"),VGr=o("big_bird"),XGr=o(" \u2014 "),dZ=a("a"),zGr=o("FlaxBigBirdForMultipleChoice"),WGr=o(" (BigBird model)"),QGr=l(),Q3=a("li"),tCe=a("strong"),HGr=o("distilbert"),UGr=o(" \u2014 "),cZ=a("a"),JGr=o("FlaxDistilBertForMultipleChoice"),YGr=o(" (DistilBERT model)"),KGr=l(),H3=a("li"),aCe=a("strong"),ZGr=o("electra"),eOr=o(" \u2014 "),fZ=a("a"),oOr=o("FlaxElectraForMultipleChoice"),rOr=o(" (ELECTRA model)"),tOr=l(),U3=a("li"),nCe=a("strong"),aOr=o("roberta"),nOr=o(" \u2014 "),mZ=a("a"),sOr=o("FlaxRobertaForMultipleChoice"),lOr=o(" (RoBERTa model)"),iOr=l(),J3=a("li"),sCe=a("strong"),dOr=o("roformer"),cOr=o(" \u2014 "),gZ=a("a"),fOr=o("FlaxRoFormerForMultipleChoice"),mOr=o(" (RoFormer model)"),gOr=l(),Y3=a("li"),lCe=a("strong"),hOr=o("xlm-roberta"),pOr=o(" \u2014 "),hZ=a("a"),_Or=o("FlaxXLMRobertaForMultipleChoice"),uOr=o(" (XLM-RoBERTa model)"),bOr=l(),F(K3.$$.fragment),FDe=l(),tf=a("h2"),Z3=a("a"),iCe=a("span"),F(Mx.$$.fragment),vOr=l(),dCe=a("span"),FOr=o("FlaxAutoModelForNextSentencePrediction"),TDe=l(),Fr=a("div"),F(Ex.$$.fragment),TOr=l(),af=a("p"),MOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),pZ=a("a"),EOr=o("from_pretrained()"),COr=o(" class method or the "),_Z=a("a"),wOr=o("from_config()"),AOr=o(` class
method.`),yOr=l(),Cx=a("p"),LOr=o("This class cannot be instantiated directly using "),cCe=a("code"),xOr=o("__init__()"),$Or=o(" (throws an error)."),kOr=l(),Jt=a("div"),F(wx.$$.fragment),SOr=l(),fCe=a("p"),ROr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),POr=l(),nf=a("p"),BOr=o(`Note:
Loading a model from its configuration file does `),mCe=a("strong"),IOr=o("not"),NOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uZ=a("a"),qOr=o("from_pretrained()"),jOr=o(" to load the model weights."),DOr=l(),F(ew.$$.fragment),GOr=l(),Hr=a("div"),F(Ax.$$.fragment),OOr=l(),gCe=a("p"),VOr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),XOr=l(),En=a("p"),zOr=o("The model class to instantiate is selected based on the "),hCe=a("code"),WOr=o("model_type"),QOr=o(` property of the config object (either
passed as an argument or loaded from `),pCe=a("code"),HOr=o("pretrained_model_name_or_path"),UOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Ce=a("code"),JOr=o("pretrained_model_name_or_path"),YOr=o(":"),KOr=l(),uCe=a("ul"),ow=a("li"),bCe=a("strong"),ZOr=o("bert"),eVr=o(" \u2014 "),bZ=a("a"),oVr=o("FlaxBertForNextSentencePrediction"),rVr=o(" (BERT model)"),tVr=l(),F(rw.$$.fragment),MDe=l(),sf=a("h2"),tw=a("a"),vCe=a("span"),F(yx.$$.fragment),aVr=l(),FCe=a("span"),nVr=o("FlaxAutoModelForImageClassification"),EDe=l(),Tr=a("div"),F(Lx.$$.fragment),sVr=l(),lf=a("p"),lVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vZ=a("a"),iVr=o("from_pretrained()"),dVr=o(" class method or the "),FZ=a("a"),cVr=o("from_config()"),fVr=o(` class
method.`),mVr=l(),xx=a("p"),gVr=o("This class cannot be instantiated directly using "),TCe=a("code"),hVr=o("__init__()"),pVr=o(" (throws an error)."),_Vr=l(),Yt=a("div"),F($x.$$.fragment),uVr=l(),MCe=a("p"),bVr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),vVr=l(),df=a("p"),FVr=o(`Note:
Loading a model from its configuration file does `),ECe=a("strong"),TVr=o("not"),MVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TZ=a("a"),EVr=o("from_pretrained()"),CVr=o(" to load the model weights."),wVr=l(),F(aw.$$.fragment),AVr=l(),Ur=a("div"),F(kx.$$.fragment),yVr=l(),CCe=a("p"),LVr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),xVr=l(),Cn=a("p"),$Vr=o("The model class to instantiate is selected based on the "),wCe=a("code"),kVr=o("model_type"),SVr=o(` property of the config object (either
passed as an argument or loaded from `),ACe=a("code"),RVr=o("pretrained_model_name_or_path"),PVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yCe=a("code"),BVr=o("pretrained_model_name_or_path"),IVr=o(":"),NVr=l(),Sx=a("ul"),nw=a("li"),LCe=a("strong"),qVr=o("beit"),jVr=o(" \u2014 "),MZ=a("a"),DVr=o("FlaxBeitForImageClassification"),GVr=o(" (BEiT model)"),OVr=l(),sw=a("li"),xCe=a("strong"),VVr=o("vit"),XVr=o(" \u2014 "),EZ=a("a"),zVr=o("FlaxViTForImageClassification"),WVr=o(" (ViT model)"),QVr=l(),F(lw.$$.fragment),CDe=l(),cf=a("h2"),iw=a("a"),$Ce=a("span"),F(Rx.$$.fragment),HVr=l(),kCe=a("span"),UVr=o("FlaxAutoModelForVision2Seq"),wDe=l(),Mr=a("div"),F(Px.$$.fragment),JVr=l(),ff=a("p"),YVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),CZ=a("a"),KVr=o("from_pretrained()"),ZVr=o(" class method or the "),wZ=a("a"),eXr=o("from_config()"),oXr=o(` class
method.`),rXr=l(),Bx=a("p"),tXr=o("This class cannot be instantiated directly using "),SCe=a("code"),aXr=o("__init__()"),nXr=o(" (throws an error)."),sXr=l(),Kt=a("div"),F(Ix.$$.fragment),lXr=l(),RCe=a("p"),iXr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),dXr=l(),mf=a("p"),cXr=o(`Note:
Loading a model from its configuration file does `),PCe=a("strong"),fXr=o("not"),mXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AZ=a("a"),gXr=o("from_pretrained()"),hXr=o(" to load the model weights."),pXr=l(),F(dw.$$.fragment),_Xr=l(),Jr=a("div"),F(Nx.$$.fragment),uXr=l(),BCe=a("p"),bXr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),vXr=l(),wn=a("p"),FXr=o("The model class to instantiate is selected based on the "),ICe=a("code"),TXr=o("model_type"),MXr=o(` property of the config object (either
passed as an argument or loaded from `),NCe=a("code"),EXr=o("pretrained_model_name_or_path"),CXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qCe=a("code"),wXr=o("pretrained_model_name_or_path"),AXr=o(":"),yXr=l(),jCe=a("ul"),cw=a("li"),DCe=a("strong"),LXr=o("vision-encoder-decoder"),xXr=o(" \u2014 "),yZ=a("a"),$Xr=o("FlaxVisionEncoderDecoderModel"),kXr=o(" (Vision Encoder decoder model)"),SXr=l(),F(fw.$$.fragment),this.h()},l(f){const u=wkt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var qx=s(p);m=n(qx,"A",{id:!0,class:!0,href:!0});var GCe=s(m);_=n(GCe,"SPAN",{});var OCe=s(_);T(d.$$.fragment,OCe),OCe.forEach(t),GCe.forEach(t),h=i(qx),Mo=n(qx,"SPAN",{});var VCe=s(Mo);mi=r(VCe,"Auto Classes"),VCe.forEach(t),qx.forEach(t),_f=i(f),rt=n(f,"P",{});var jx=s(rt);gi=r(jx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),hi=n(jx,"CODE",{});var XCe=s(hi);xA=r(XCe,"from_pretrained()"),XCe.forEach(t),uf=r(jx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),jx.forEach(t),je=i(f),We=n(f,"P",{});var An=s(We);pi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var zCe=s(yn);$A=r(zCe,"AutoConfig"),zCe.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var WCe=s(xn);kA=r(WCe,"AutoModel"),WCe.forEach(t),_i=r(An,`, and
`),$n=n(An,"A",{href:!0});var QCe=s($n);SA=r(QCe,"AutoTokenizer"),QCe.forEach(t),ui=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),bf=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var Dx=s(Ae);K$=r(Dx,"will create a model that is an instance of "),bi=n(Dx,"A",{href:!0});var HCe=s(bi);Z$=r(HCe,"BertModel"),HCe.forEach(t),ek=r(Dx,"."),Dx.forEach(t),Eo=i(f),wa=n(f,"P",{});var Gx=s(wa);ok=r(Gx,"There is one class of "),vf=n(Gx,"CODE",{});var UCe=s(vf);rk=r(UCe,"AutoModel"),UCe.forEach(t),POe=r(Gx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Gx.forEach(t),Eqe=i(f),vi=n(f,"H2",{class:!0});var Ox=s(vi);Ff=n(Ox,"A",{id:!0,class:!0,href:!0});var JCe=s(Ff);Foe=n(JCe,"SPAN",{});var YCe=s(Foe);T(RA.$$.fragment,YCe),YCe.forEach(t),JCe.forEach(t),BOe=i(Ox),Toe=n(Ox,"SPAN",{});var KCe=s(Toe);IOe=r(KCe,"Extending the Auto Classes"),KCe.forEach(t),Ox.forEach(t),Cqe=i(f),kn=n(f,"P",{});var gf=s(kn);NOe=r(gf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Moe=n(gf,"CODE",{});var ZCe=s(Moe);qOe=r(ZCe,"NewModel"),ZCe.forEach(t),jOe=r(gf,", make sure you have a "),Eoe=n(gf,"CODE",{});var e5e=s(Eoe);DOe=r(e5e,"NewModelConfig"),e5e.forEach(t),GOe=r(gf,` then you can add those to the auto
classes like this:`),gf.forEach(t),wqe=i(f),T(PA.$$.fragment,f),Aqe=i(f),tk=n(f,"P",{});var o5e=s(tk);OOe=r(o5e,"You will then be able to use the auto classes like you would usually do!"),o5e.forEach(t),yqe=i(f),T(Tf.$$.fragment,f),Lqe=i(f),Fi=n(f,"H2",{class:!0});var Vx=s(Fi);Mf=n(Vx,"A",{id:!0,class:!0,href:!0});var r5e=s(Mf);Coe=n(r5e,"SPAN",{});var t5e=s(Coe);T(BA.$$.fragment,t5e),t5e.forEach(t),r5e.forEach(t),VOe=i(Vx),woe=n(Vx,"SPAN",{});var a5e=s(woe);XOe=r(a5e,"AutoConfig"),a5e.forEach(t),Vx.forEach(t),xqe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(IA.$$.fragment,et),zOe=i(et),NA=n(et,"P",{});var Xx=s(NA);WOe=r(Xx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),ak=n(Xx,"A",{href:!0});var n5e=s(ak);QOe=r(n5e,"from_pretrained()"),n5e.forEach(t),HOe=r(Xx," class method."),Xx.forEach(t),UOe=i(et),qA=n(et,"P",{});var zx=s(qA);JOe=r(zx,"This class cannot be instantiated directly using "),Aoe=n(zx,"CODE",{});var s5e=s(Aoe);YOe=r(s5e,"__init__()"),s5e.forEach(t),KOe=r(zx," (throws an error)."),zx.forEach(t),ZOe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(jA.$$.fragment,ot),eVe=i(ot),yoe=n(ot,"P",{});var l5e=s(yoe);oVe=r(l5e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),l5e.forEach(t),rVe=i(ot),Ti=n(ot,"P",{});var hf=s(Ti);tVe=r(hf,"The configuration class to instantiate is selected based on the "),Loe=n(hf,"CODE",{});var i5e=s(Loe);aVe=r(i5e,"model_type"),i5e.forEach(t),nVe=r(hf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),xoe=n(hf,"CODE",{});var d5e=s(xoe);sVe=r(d5e,"pretrained_model_name_or_path"),d5e.forEach(t),lVe=r(hf,":"),hf.forEach(t),iVe=i(ot),A=n(ot,"UL",{});var y=s(A);Ef=n(y,"LI",{});var mw=s(Ef);$oe=n(mw,"STRONG",{});var c5e=s($oe);dVe=r(c5e,"albert"),c5e.forEach(t),cVe=r(mw," \u2014 "),nk=n(mw,"A",{href:!0});var f5e=s(nk);fVe=r(f5e,"AlbertConfig"),f5e.forEach(t),mVe=r(mw," (ALBERT model)"),mw.forEach(t),gVe=i(y),Cf=n(y,"LI",{});var gw=s(Cf);koe=n(gw,"STRONG",{});var m5e=s(koe);hVe=r(m5e,"bart"),m5e.forEach(t),pVe=r(gw," \u2014 "),sk=n(gw,"A",{href:!0});var g5e=s(sk);_Ve=r(g5e,"BartConfig"),g5e.forEach(t),uVe=r(gw," (BART model)"),gw.forEach(t),bVe=i(y),wf=n(y,"LI",{});var hw=s(wf);Soe=n(hw,"STRONG",{});var h5e=s(Soe);vVe=r(h5e,"beit"),h5e.forEach(t),FVe=r(hw," \u2014 "),lk=n(hw,"A",{href:!0});var p5e=s(lk);TVe=r(p5e,"BeitConfig"),p5e.forEach(t),MVe=r(hw," (BEiT model)"),hw.forEach(t),EVe=i(y),Af=n(y,"LI",{});var pw=s(Af);Roe=n(pw,"STRONG",{});var _5e=s(Roe);CVe=r(_5e,"bert"),_5e.forEach(t),wVe=r(pw," \u2014 "),ik=n(pw,"A",{href:!0});var u5e=s(ik);AVe=r(u5e,"BertConfig"),u5e.forEach(t),yVe=r(pw," (BERT model)"),pw.forEach(t),LVe=i(y),yf=n(y,"LI",{});var _w=s(yf);Poe=n(_w,"STRONG",{});var b5e=s(Poe);xVe=r(b5e,"bert-generation"),b5e.forEach(t),$Ve=r(_w," \u2014 "),dk=n(_w,"A",{href:!0});var v5e=s(dk);kVe=r(v5e,"BertGenerationConfig"),v5e.forEach(t),SVe=r(_w," (Bert Generation model)"),_w.forEach(t),RVe=i(y),Lf=n(y,"LI",{});var uw=s(Lf);Boe=n(uw,"STRONG",{});var F5e=s(Boe);PVe=r(F5e,"big_bird"),F5e.forEach(t),BVe=r(uw," \u2014 "),ck=n(uw,"A",{href:!0});var T5e=s(ck);IVe=r(T5e,"BigBirdConfig"),T5e.forEach(t),NVe=r(uw," (BigBird model)"),uw.forEach(t),qVe=i(y),xf=n(y,"LI",{});var bw=s(xf);Ioe=n(bw,"STRONG",{});var M5e=s(Ioe);jVe=r(M5e,"bigbird_pegasus"),M5e.forEach(t),DVe=r(bw," \u2014 "),fk=n(bw,"A",{href:!0});var E5e=s(fk);GVe=r(E5e,"BigBirdPegasusConfig"),E5e.forEach(t),OVe=r(bw," (BigBirdPegasus model)"),bw.forEach(t),VVe=i(y),$f=n(y,"LI",{});var vw=s($f);Noe=n(vw,"STRONG",{});var C5e=s(Noe);XVe=r(C5e,"blenderbot"),C5e.forEach(t),zVe=r(vw," \u2014 "),mk=n(vw,"A",{href:!0});var w5e=s(mk);WVe=r(w5e,"BlenderbotConfig"),w5e.forEach(t),QVe=r(vw," (Blenderbot model)"),vw.forEach(t),HVe=i(y),kf=n(y,"LI",{});var Fw=s(kf);qoe=n(Fw,"STRONG",{});var A5e=s(qoe);UVe=r(A5e,"blenderbot-small"),A5e.forEach(t),JVe=r(Fw," \u2014 "),gk=n(Fw,"A",{href:!0});var y5e=s(gk);YVe=r(y5e,"BlenderbotSmallConfig"),y5e.forEach(t),KVe=r(Fw," (BlenderbotSmall model)"),Fw.forEach(t),ZVe=i(y),Sf=n(y,"LI",{});var Tw=s(Sf);joe=n(Tw,"STRONG",{});var L5e=s(joe);eXe=r(L5e,"camembert"),L5e.forEach(t),oXe=r(Tw," \u2014 "),hk=n(Tw,"A",{href:!0});var x5e=s(hk);rXe=r(x5e,"CamembertConfig"),x5e.forEach(t),tXe=r(Tw," (CamemBERT model)"),Tw.forEach(t),aXe=i(y),Rf=n(y,"LI",{});var Mw=s(Rf);Doe=n(Mw,"STRONG",{});var $5e=s(Doe);nXe=r($5e,"canine"),$5e.forEach(t),sXe=r(Mw," \u2014 "),pk=n(Mw,"A",{href:!0});var k5e=s(pk);lXe=r(k5e,"CanineConfig"),k5e.forEach(t),iXe=r(Mw," (Canine model)"),Mw.forEach(t),dXe=i(y),Pf=n(y,"LI",{});var Ew=s(Pf);Goe=n(Ew,"STRONG",{});var S5e=s(Goe);cXe=r(S5e,"clip"),S5e.forEach(t),fXe=r(Ew," \u2014 "),_k=n(Ew,"A",{href:!0});var R5e=s(_k);mXe=r(R5e,"CLIPConfig"),R5e.forEach(t),gXe=r(Ew," (CLIP model)"),Ew.forEach(t),hXe=i(y),Bf=n(y,"LI",{});var Cw=s(Bf);Ooe=n(Cw,"STRONG",{});var P5e=s(Ooe);pXe=r(P5e,"convbert"),P5e.forEach(t),_Xe=r(Cw," \u2014 "),uk=n(Cw,"A",{href:!0});var B5e=s(uk);uXe=r(B5e,"ConvBertConfig"),B5e.forEach(t),bXe=r(Cw," (ConvBERT model)"),Cw.forEach(t),vXe=i(y),If=n(y,"LI",{});var ww=s(If);Voe=n(ww,"STRONG",{});var I5e=s(Voe);FXe=r(I5e,"convnext"),I5e.forEach(t),TXe=r(ww," \u2014 "),bk=n(ww,"A",{href:!0});var N5e=s(bk);MXe=r(N5e,"ConvNextConfig"),N5e.forEach(t),EXe=r(ww," (ConvNext model)"),ww.forEach(t),CXe=i(y),Nf=n(y,"LI",{});var Aw=s(Nf);Xoe=n(Aw,"STRONG",{});var q5e=s(Xoe);wXe=r(q5e,"ctrl"),q5e.forEach(t),AXe=r(Aw," \u2014 "),vk=n(Aw,"A",{href:!0});var j5e=s(vk);yXe=r(j5e,"CTRLConfig"),j5e.forEach(t),LXe=r(Aw," (CTRL model)"),Aw.forEach(t),xXe=i(y),qf=n(y,"LI",{});var yw=s(qf);zoe=n(yw,"STRONG",{});var D5e=s(zoe);$Xe=r(D5e,"cvt"),D5e.forEach(t),kXe=r(yw," \u2014 "),Fk=n(yw,"A",{href:!0});var G5e=s(Fk);SXe=r(G5e,"CvtConfig"),G5e.forEach(t),RXe=r(yw," (CvT model)"),yw.forEach(t),PXe=i(y),jf=n(y,"LI",{});var Lw=s(jf);Woe=n(Lw,"STRONG",{});var O5e=s(Woe);BXe=r(O5e,"data2vec-audio"),O5e.forEach(t),IXe=r(Lw," \u2014 "),Tk=n(Lw,"A",{href:!0});var V5e=s(Tk);NXe=r(V5e,"Data2VecAudioConfig"),V5e.forEach(t),qXe=r(Lw," (Data2VecAudio model)"),Lw.forEach(t),jXe=i(y),Df=n(y,"LI",{});var xw=s(Df);Qoe=n(xw,"STRONG",{});var X5e=s(Qoe);DXe=r(X5e,"data2vec-text"),X5e.forEach(t),GXe=r(xw," \u2014 "),Mk=n(xw,"A",{href:!0});var z5e=s(Mk);OXe=r(z5e,"Data2VecTextConfig"),z5e.forEach(t),VXe=r(xw," (Data2VecText model)"),xw.forEach(t),XXe=i(y),Gf=n(y,"LI",{});var $w=s(Gf);Hoe=n($w,"STRONG",{});var W5e=s(Hoe);zXe=r(W5e,"data2vec-vision"),W5e.forEach(t),WXe=r($w," \u2014 "),Ek=n($w,"A",{href:!0});var Q5e=s(Ek);QXe=r(Q5e,"Data2VecVisionConfig"),Q5e.forEach(t),HXe=r($w," (Data2VecVision model)"),$w.forEach(t),UXe=i(y),Of=n(y,"LI",{});var kw=s(Of);Uoe=n(kw,"STRONG",{});var H5e=s(Uoe);JXe=r(H5e,"deberta"),H5e.forEach(t),YXe=r(kw," \u2014 "),Ck=n(kw,"A",{href:!0});var U5e=s(Ck);KXe=r(U5e,"DebertaConfig"),U5e.forEach(t),ZXe=r(kw," (DeBERTa model)"),kw.forEach(t),eze=i(y),Vf=n(y,"LI",{});var Sw=s(Vf);Joe=n(Sw,"STRONG",{});var J5e=s(Joe);oze=r(J5e,"deberta-v2"),J5e.forEach(t),rze=r(Sw," \u2014 "),wk=n(Sw,"A",{href:!0});var Y5e=s(wk);tze=r(Y5e,"DebertaV2Config"),Y5e.forEach(t),aze=r(Sw," (DeBERTa-v2 model)"),Sw.forEach(t),nze=i(y),Xf=n(y,"LI",{});var Rw=s(Xf);Yoe=n(Rw,"STRONG",{});var K5e=s(Yoe);sze=r(K5e,"decision_transformer"),K5e.forEach(t),lze=r(Rw," \u2014 "),Ak=n(Rw,"A",{href:!0});var Z5e=s(Ak);ize=r(Z5e,"DecisionTransformerConfig"),Z5e.forEach(t),dze=r(Rw," (Decision Transformer model)"),Rw.forEach(t),cze=i(y),zf=n(y,"LI",{});var Pw=s(zf);Koe=n(Pw,"STRONG",{});var e3e=s(Koe);fze=r(e3e,"deit"),e3e.forEach(t),mze=r(Pw," \u2014 "),yk=n(Pw,"A",{href:!0});var PXr=s(yk);gze=r(PXr,"DeiTConfig"),PXr.forEach(t),hze=r(Pw," (DeiT model)"),Pw.forEach(t),pze=i(y),Wf=n(y,"LI",{});var o3e=s(Wf);Zoe=n(o3e,"STRONG",{});var BXr=s(Zoe);_ze=r(BXr,"detr"),BXr.forEach(t),uze=r(o3e," \u2014 "),Lk=n(o3e,"A",{href:!0});var IXr=s(Lk);bze=r(IXr,"DetrConfig"),IXr.forEach(t),vze=r(o3e," (DETR model)"),o3e.forEach(t),Fze=i(y),Qf=n(y,"LI",{});var r3e=s(Qf);ere=n(r3e,"STRONG",{});var NXr=s(ere);Tze=r(NXr,"distilbert"),NXr.forEach(t),Mze=r(r3e," \u2014 "),xk=n(r3e,"A",{href:!0});var qXr=s(xk);Eze=r(qXr,"DistilBertConfig"),qXr.forEach(t),Cze=r(r3e," (DistilBERT model)"),r3e.forEach(t),wze=i(y),Hf=n(y,"LI",{});var t3e=s(Hf);ore=n(t3e,"STRONG",{});var jXr=s(ore);Aze=r(jXr,"dpr"),jXr.forEach(t),yze=r(t3e," \u2014 "),$k=n(t3e,"A",{href:!0});var DXr=s($k);Lze=r(DXr,"DPRConfig"),DXr.forEach(t),xze=r(t3e," (DPR model)"),t3e.forEach(t),$ze=i(y),Uf=n(y,"LI",{});var a3e=s(Uf);rre=n(a3e,"STRONG",{});var GXr=s(rre);kze=r(GXr,"dpt"),GXr.forEach(t),Sze=r(a3e," \u2014 "),kk=n(a3e,"A",{href:!0});var OXr=s(kk);Rze=r(OXr,"DPTConfig"),OXr.forEach(t),Pze=r(a3e," (DPT model)"),a3e.forEach(t),Bze=i(y),Jf=n(y,"LI",{});var n3e=s(Jf);tre=n(n3e,"STRONG",{});var VXr=s(tre);Ize=r(VXr,"electra"),VXr.forEach(t),Nze=r(n3e," \u2014 "),Sk=n(n3e,"A",{href:!0});var XXr=s(Sk);qze=r(XXr,"ElectraConfig"),XXr.forEach(t),jze=r(n3e," (ELECTRA model)"),n3e.forEach(t),Dze=i(y),Yf=n(y,"LI",{});var s3e=s(Yf);are=n(s3e,"STRONG",{});var zXr=s(are);Gze=r(zXr,"encoder-decoder"),zXr.forEach(t),Oze=r(s3e," \u2014 "),Rk=n(s3e,"A",{href:!0});var WXr=s(Rk);Vze=r(WXr,"EncoderDecoderConfig"),WXr.forEach(t),Xze=r(s3e," (Encoder decoder model)"),s3e.forEach(t),zze=i(y),Kf=n(y,"LI",{});var l3e=s(Kf);nre=n(l3e,"STRONG",{});var QXr=s(nre);Wze=r(QXr,"flaubert"),QXr.forEach(t),Qze=r(l3e," \u2014 "),Pk=n(l3e,"A",{href:!0});var HXr=s(Pk);Hze=r(HXr,"FlaubertConfig"),HXr.forEach(t),Uze=r(l3e," (FlauBERT model)"),l3e.forEach(t),Jze=i(y),Zf=n(y,"LI",{});var i3e=s(Zf);sre=n(i3e,"STRONG",{});var UXr=s(sre);Yze=r(UXr,"flava"),UXr.forEach(t),Kze=r(i3e," \u2014 "),Bk=n(i3e,"A",{href:!0});var JXr=s(Bk);Zze=r(JXr,"FlavaConfig"),JXr.forEach(t),eWe=r(i3e," (Flava model)"),i3e.forEach(t),oWe=i(y),em=n(y,"LI",{});var d3e=s(em);lre=n(d3e,"STRONG",{});var YXr=s(lre);rWe=r(YXr,"fnet"),YXr.forEach(t),tWe=r(d3e," \u2014 "),Ik=n(d3e,"A",{href:!0});var KXr=s(Ik);aWe=r(KXr,"FNetConfig"),KXr.forEach(t),nWe=r(d3e," (FNet model)"),d3e.forEach(t),sWe=i(y),om=n(y,"LI",{});var c3e=s(om);ire=n(c3e,"STRONG",{});var ZXr=s(ire);lWe=r(ZXr,"fsmt"),ZXr.forEach(t),iWe=r(c3e," \u2014 "),Nk=n(c3e,"A",{href:!0});var ezr=s(Nk);dWe=r(ezr,"FSMTConfig"),ezr.forEach(t),cWe=r(c3e," (FairSeq Machine-Translation model)"),c3e.forEach(t),fWe=i(y),rm=n(y,"LI",{});var f3e=s(rm);dre=n(f3e,"STRONG",{});var ozr=s(dre);mWe=r(ozr,"funnel"),ozr.forEach(t),gWe=r(f3e," \u2014 "),qk=n(f3e,"A",{href:!0});var rzr=s(qk);hWe=r(rzr,"FunnelConfig"),rzr.forEach(t),pWe=r(f3e," (Funnel Transformer model)"),f3e.forEach(t),_We=i(y),tm=n(y,"LI",{});var m3e=s(tm);cre=n(m3e,"STRONG",{});var tzr=s(cre);uWe=r(tzr,"glpn"),tzr.forEach(t),bWe=r(m3e," \u2014 "),jk=n(m3e,"A",{href:!0});var azr=s(jk);vWe=r(azr,"GLPNConfig"),azr.forEach(t),FWe=r(m3e," (GLPN model)"),m3e.forEach(t),TWe=i(y),am=n(y,"LI",{});var g3e=s(am);fre=n(g3e,"STRONG",{});var nzr=s(fre);MWe=r(nzr,"gpt2"),nzr.forEach(t),EWe=r(g3e," \u2014 "),Dk=n(g3e,"A",{href:!0});var szr=s(Dk);CWe=r(szr,"GPT2Config"),szr.forEach(t),wWe=r(g3e," (OpenAI GPT-2 model)"),g3e.forEach(t),AWe=i(y),nm=n(y,"LI",{});var h3e=s(nm);mre=n(h3e,"STRONG",{});var lzr=s(mre);yWe=r(lzr,"gpt_neo"),lzr.forEach(t),LWe=r(h3e," \u2014 "),Gk=n(h3e,"A",{href:!0});var izr=s(Gk);xWe=r(izr,"GPTNeoConfig"),izr.forEach(t),$We=r(h3e," (GPT Neo model)"),h3e.forEach(t),kWe=i(y),sm=n(y,"LI",{});var p3e=s(sm);gre=n(p3e,"STRONG",{});var dzr=s(gre);SWe=r(dzr,"gpt_neox"),dzr.forEach(t),RWe=r(p3e," \u2014 "),Ok=n(p3e,"A",{href:!0});var czr=s(Ok);PWe=r(czr,"GPTNeoXConfig"),czr.forEach(t),BWe=r(p3e," (GPT NeoX model)"),p3e.forEach(t),IWe=i(y),lm=n(y,"LI",{});var _3e=s(lm);hre=n(_3e,"STRONG",{});var fzr=s(hre);NWe=r(fzr,"gptj"),fzr.forEach(t),qWe=r(_3e," \u2014 "),Vk=n(_3e,"A",{href:!0});var mzr=s(Vk);jWe=r(mzr,"GPTJConfig"),mzr.forEach(t),DWe=r(_3e," (GPT-J model)"),_3e.forEach(t),GWe=i(y),im=n(y,"LI",{});var u3e=s(im);pre=n(u3e,"STRONG",{});var gzr=s(pre);OWe=r(gzr,"greaselm"),gzr.forEach(t),VWe=r(u3e," \u2014 "),Xk=n(u3e,"A",{href:!0});var hzr=s(Xk);XWe=r(hzr,"GreaseLMConfig"),hzr.forEach(t),zWe=r(u3e," (GreaseLM model)"),u3e.forEach(t),WWe=i(y),dm=n(y,"LI",{});var b3e=s(dm);_re=n(b3e,"STRONG",{});var pzr=s(_re);QWe=r(pzr,"hubert"),pzr.forEach(t),HWe=r(b3e," \u2014 "),zk=n(b3e,"A",{href:!0});var _zr=s(zk);UWe=r(_zr,"HubertConfig"),_zr.forEach(t),JWe=r(b3e," (Hubert model)"),b3e.forEach(t),YWe=i(y),cm=n(y,"LI",{});var v3e=s(cm);ure=n(v3e,"STRONG",{});var uzr=s(ure);KWe=r(uzr,"ibert"),uzr.forEach(t),ZWe=r(v3e," \u2014 "),Wk=n(v3e,"A",{href:!0});var bzr=s(Wk);eQe=r(bzr,"IBertConfig"),bzr.forEach(t),oQe=r(v3e," (I-BERT model)"),v3e.forEach(t),rQe=i(y),fm=n(y,"LI",{});var F3e=s(fm);bre=n(F3e,"STRONG",{});var vzr=s(bre);tQe=r(vzr,"imagegpt"),vzr.forEach(t),aQe=r(F3e," \u2014 "),Qk=n(F3e,"A",{href:!0});var Fzr=s(Qk);nQe=r(Fzr,"ImageGPTConfig"),Fzr.forEach(t),sQe=r(F3e," (ImageGPT model)"),F3e.forEach(t),lQe=i(y),mm=n(y,"LI",{});var T3e=s(mm);vre=n(T3e,"STRONG",{});var Tzr=s(vre);iQe=r(Tzr,"layoutlm"),Tzr.forEach(t),dQe=r(T3e," \u2014 "),Hk=n(T3e,"A",{href:!0});var Mzr=s(Hk);cQe=r(Mzr,"LayoutLMConfig"),Mzr.forEach(t),fQe=r(T3e," (LayoutLM model)"),T3e.forEach(t),mQe=i(y),gm=n(y,"LI",{});var M3e=s(gm);Fre=n(M3e,"STRONG",{});var Ezr=s(Fre);gQe=r(Ezr,"layoutlmv2"),Ezr.forEach(t),hQe=r(M3e," \u2014 "),Uk=n(M3e,"A",{href:!0});var Czr=s(Uk);pQe=r(Czr,"LayoutLMv2Config"),Czr.forEach(t),_Qe=r(M3e," (LayoutLMv2 model)"),M3e.forEach(t),uQe=i(y),hm=n(y,"LI",{});var E3e=s(hm);Tre=n(E3e,"STRONG",{});var wzr=s(Tre);bQe=r(wzr,"layoutlmv3"),wzr.forEach(t),vQe=r(E3e," \u2014 "),Jk=n(E3e,"A",{href:!0});var Azr=s(Jk);FQe=r(Azr,"LayoutLMv3Config"),Azr.forEach(t),TQe=r(E3e," (LayoutLMv3 model)"),E3e.forEach(t),MQe=i(y),pm=n(y,"LI",{});var C3e=s(pm);Mre=n(C3e,"STRONG",{});var yzr=s(Mre);EQe=r(yzr,"led"),yzr.forEach(t),CQe=r(C3e," \u2014 "),Yk=n(C3e,"A",{href:!0});var Lzr=s(Yk);wQe=r(Lzr,"LEDConfig"),Lzr.forEach(t),AQe=r(C3e," (LED model)"),C3e.forEach(t),yQe=i(y),_m=n(y,"LI",{});var w3e=s(_m);Ere=n(w3e,"STRONG",{});var xzr=s(Ere);LQe=r(xzr,"longformer"),xzr.forEach(t),xQe=r(w3e," \u2014 "),Kk=n(w3e,"A",{href:!0});var $zr=s(Kk);$Qe=r($zr,"LongformerConfig"),$zr.forEach(t),kQe=r(w3e," (Longformer model)"),w3e.forEach(t),SQe=i(y),um=n(y,"LI",{});var A3e=s(um);Cre=n(A3e,"STRONG",{});var kzr=s(Cre);RQe=r(kzr,"luke"),kzr.forEach(t),PQe=r(A3e," \u2014 "),Zk=n(A3e,"A",{href:!0});var Szr=s(Zk);BQe=r(Szr,"LukeConfig"),Szr.forEach(t),IQe=r(A3e," (LUKE model)"),A3e.forEach(t),NQe=i(y),bm=n(y,"LI",{});var y3e=s(bm);wre=n(y3e,"STRONG",{});var Rzr=s(wre);qQe=r(Rzr,"lxmert"),Rzr.forEach(t),jQe=r(y3e," \u2014 "),eS=n(y3e,"A",{href:!0});var Pzr=s(eS);DQe=r(Pzr,"LxmertConfig"),Pzr.forEach(t),GQe=r(y3e," (LXMERT model)"),y3e.forEach(t),OQe=i(y),vm=n(y,"LI",{});var L3e=s(vm);Are=n(L3e,"STRONG",{});var Bzr=s(Are);VQe=r(Bzr,"m2m_100"),Bzr.forEach(t),XQe=r(L3e," \u2014 "),oS=n(L3e,"A",{href:!0});var Izr=s(oS);zQe=r(Izr,"M2M100Config"),Izr.forEach(t),WQe=r(L3e," (M2M100 model)"),L3e.forEach(t),QQe=i(y),Fm=n(y,"LI",{});var x3e=s(Fm);yre=n(x3e,"STRONG",{});var Nzr=s(yre);HQe=r(Nzr,"marian"),Nzr.forEach(t),UQe=r(x3e," \u2014 "),rS=n(x3e,"A",{href:!0});var qzr=s(rS);JQe=r(qzr,"MarianConfig"),qzr.forEach(t),YQe=r(x3e," (Marian model)"),x3e.forEach(t),KQe=i(y),Tm=n(y,"LI",{});var $3e=s(Tm);Lre=n($3e,"STRONG",{});var jzr=s(Lre);ZQe=r(jzr,"maskformer"),jzr.forEach(t),eHe=r($3e," \u2014 "),tS=n($3e,"A",{href:!0});var Dzr=s(tS);oHe=r(Dzr,"MaskFormerConfig"),Dzr.forEach(t),rHe=r($3e," (MaskFormer model)"),$3e.forEach(t),tHe=i(y),Mm=n(y,"LI",{});var k3e=s(Mm);xre=n(k3e,"STRONG",{});var Gzr=s(xre);aHe=r(Gzr,"mbart"),Gzr.forEach(t),nHe=r(k3e," \u2014 "),aS=n(k3e,"A",{href:!0});var Ozr=s(aS);sHe=r(Ozr,"MBartConfig"),Ozr.forEach(t),lHe=r(k3e," (mBART model)"),k3e.forEach(t),iHe=i(y),Em=n(y,"LI",{});var S3e=s(Em);$re=n(S3e,"STRONG",{});var Vzr=s($re);dHe=r(Vzr,"megatron-bert"),Vzr.forEach(t),cHe=r(S3e," \u2014 "),nS=n(S3e,"A",{href:!0});var Xzr=s(nS);fHe=r(Xzr,"MegatronBertConfig"),Xzr.forEach(t),mHe=r(S3e," (MegatronBert model)"),S3e.forEach(t),gHe=i(y),Cm=n(y,"LI",{});var R3e=s(Cm);kre=n(R3e,"STRONG",{});var zzr=s(kre);hHe=r(zzr,"mobilebert"),zzr.forEach(t),pHe=r(R3e," \u2014 "),sS=n(R3e,"A",{href:!0});var Wzr=s(sS);_He=r(Wzr,"MobileBertConfig"),Wzr.forEach(t),uHe=r(R3e," (MobileBERT model)"),R3e.forEach(t),bHe=i(y),wm=n(y,"LI",{});var P3e=s(wm);Sre=n(P3e,"STRONG",{});var Qzr=s(Sre);vHe=r(Qzr,"mpnet"),Qzr.forEach(t),FHe=r(P3e," \u2014 "),lS=n(P3e,"A",{href:!0});var Hzr=s(lS);THe=r(Hzr,"MPNetConfig"),Hzr.forEach(t),MHe=r(P3e," (MPNet model)"),P3e.forEach(t),EHe=i(y),Am=n(y,"LI",{});var B3e=s(Am);Rre=n(B3e,"STRONG",{});var Uzr=s(Rre);CHe=r(Uzr,"mt5"),Uzr.forEach(t),wHe=r(B3e," \u2014 "),iS=n(B3e,"A",{href:!0});var Jzr=s(iS);AHe=r(Jzr,"MT5Config"),Jzr.forEach(t),yHe=r(B3e," (mT5 model)"),B3e.forEach(t),LHe=i(y),ym=n(y,"LI",{});var I3e=s(ym);Pre=n(I3e,"STRONG",{});var Yzr=s(Pre);xHe=r(Yzr,"nystromformer"),Yzr.forEach(t),$He=r(I3e," \u2014 "),dS=n(I3e,"A",{href:!0});var Kzr=s(dS);kHe=r(Kzr,"NystromformerConfig"),Kzr.forEach(t),SHe=r(I3e," (Nystromformer model)"),I3e.forEach(t),RHe=i(y),Lm=n(y,"LI",{});var N3e=s(Lm);Bre=n(N3e,"STRONG",{});var Zzr=s(Bre);PHe=r(Zzr,"openai-gpt"),Zzr.forEach(t),BHe=r(N3e," \u2014 "),cS=n(N3e,"A",{href:!0});var eWr=s(cS);IHe=r(eWr,"OpenAIGPTConfig"),eWr.forEach(t),NHe=r(N3e," (OpenAI GPT model)"),N3e.forEach(t),qHe=i(y),xm=n(y,"LI",{});var q3e=s(xm);Ire=n(q3e,"STRONG",{});var oWr=s(Ire);jHe=r(oWr,"opt"),oWr.forEach(t),DHe=r(q3e," \u2014 "),fS=n(q3e,"A",{href:!0});var rWr=s(fS);GHe=r(rWr,"OPTConfig"),rWr.forEach(t),OHe=r(q3e," (OPT model)"),q3e.forEach(t),VHe=i(y),$m=n(y,"LI",{});var j3e=s($m);Nre=n(j3e,"STRONG",{});var tWr=s(Nre);XHe=r(tWr,"pegasus"),tWr.forEach(t),zHe=r(j3e," \u2014 "),mS=n(j3e,"A",{href:!0});var aWr=s(mS);WHe=r(aWr,"PegasusConfig"),aWr.forEach(t),QHe=r(j3e," (Pegasus model)"),j3e.forEach(t),HHe=i(y),km=n(y,"LI",{});var D3e=s(km);qre=n(D3e,"STRONG",{});var nWr=s(qre);UHe=r(nWr,"perceiver"),nWr.forEach(t),JHe=r(D3e," \u2014 "),gS=n(D3e,"A",{href:!0});var sWr=s(gS);YHe=r(sWr,"PerceiverConfig"),sWr.forEach(t),KHe=r(D3e," (Perceiver model)"),D3e.forEach(t),ZHe=i(y),Sm=n(y,"LI",{});var G3e=s(Sm);jre=n(G3e,"STRONG",{});var lWr=s(jre);eUe=r(lWr,"plbart"),lWr.forEach(t),oUe=r(G3e," \u2014 "),hS=n(G3e,"A",{href:!0});var iWr=s(hS);rUe=r(iWr,"PLBartConfig"),iWr.forEach(t),tUe=r(G3e," (PLBart model)"),G3e.forEach(t),aUe=i(y),Rm=n(y,"LI",{});var O3e=s(Rm);Dre=n(O3e,"STRONG",{});var dWr=s(Dre);nUe=r(dWr,"poolformer"),dWr.forEach(t),sUe=r(O3e," \u2014 "),pS=n(O3e,"A",{href:!0});var cWr=s(pS);lUe=r(cWr,"PoolFormerConfig"),cWr.forEach(t),iUe=r(O3e," (PoolFormer model)"),O3e.forEach(t),dUe=i(y),Pm=n(y,"LI",{});var V3e=s(Pm);Gre=n(V3e,"STRONG",{});var fWr=s(Gre);cUe=r(fWr,"prophetnet"),fWr.forEach(t),fUe=r(V3e," \u2014 "),_S=n(V3e,"A",{href:!0});var mWr=s(_S);mUe=r(mWr,"ProphetNetConfig"),mWr.forEach(t),gUe=r(V3e," (ProphetNet model)"),V3e.forEach(t),hUe=i(y),Bm=n(y,"LI",{});var X3e=s(Bm);Ore=n(X3e,"STRONG",{});var gWr=s(Ore);pUe=r(gWr,"qdqbert"),gWr.forEach(t),_Ue=r(X3e," \u2014 "),uS=n(X3e,"A",{href:!0});var hWr=s(uS);uUe=r(hWr,"QDQBertConfig"),hWr.forEach(t),bUe=r(X3e," (QDQBert model)"),X3e.forEach(t),vUe=i(y),Im=n(y,"LI",{});var z3e=s(Im);Vre=n(z3e,"STRONG",{});var pWr=s(Vre);FUe=r(pWr,"rag"),pWr.forEach(t),TUe=r(z3e," \u2014 "),bS=n(z3e,"A",{href:!0});var _Wr=s(bS);MUe=r(_Wr,"RagConfig"),_Wr.forEach(t),EUe=r(z3e," (RAG model)"),z3e.forEach(t),CUe=i(y),Nm=n(y,"LI",{});var W3e=s(Nm);Xre=n(W3e,"STRONG",{});var uWr=s(Xre);wUe=r(uWr,"realm"),uWr.forEach(t),AUe=r(W3e," \u2014 "),vS=n(W3e,"A",{href:!0});var bWr=s(vS);yUe=r(bWr,"RealmConfig"),bWr.forEach(t),LUe=r(W3e," (Realm model)"),W3e.forEach(t),xUe=i(y),qm=n(y,"LI",{});var Q3e=s(qm);zre=n(Q3e,"STRONG",{});var vWr=s(zre);$Ue=r(vWr,"reformer"),vWr.forEach(t),kUe=r(Q3e," \u2014 "),FS=n(Q3e,"A",{href:!0});var FWr=s(FS);SUe=r(FWr,"ReformerConfig"),FWr.forEach(t),RUe=r(Q3e," (Reformer model)"),Q3e.forEach(t),PUe=i(y),jm=n(y,"LI",{});var H3e=s(jm);Wre=n(H3e,"STRONG",{});var TWr=s(Wre);BUe=r(TWr,"regnet"),TWr.forEach(t),IUe=r(H3e," \u2014 "),TS=n(H3e,"A",{href:!0});var MWr=s(TS);NUe=r(MWr,"RegNetConfig"),MWr.forEach(t),qUe=r(H3e," (RegNet model)"),H3e.forEach(t),jUe=i(y),Dm=n(y,"LI",{});var U3e=s(Dm);Qre=n(U3e,"STRONG",{});var EWr=s(Qre);DUe=r(EWr,"rembert"),EWr.forEach(t),GUe=r(U3e," \u2014 "),MS=n(U3e,"A",{href:!0});var CWr=s(MS);OUe=r(CWr,"RemBertConfig"),CWr.forEach(t),VUe=r(U3e," (RemBERT model)"),U3e.forEach(t),XUe=i(y),Gm=n(y,"LI",{});var J3e=s(Gm);Hre=n(J3e,"STRONG",{});var wWr=s(Hre);zUe=r(wWr,"resnet"),wWr.forEach(t),WUe=r(J3e," \u2014 "),ES=n(J3e,"A",{href:!0});var AWr=s(ES);QUe=r(AWr,"ResNetConfig"),AWr.forEach(t),HUe=r(J3e," (ResNet model)"),J3e.forEach(t),UUe=i(y),Om=n(y,"LI",{});var Y3e=s(Om);Ure=n(Y3e,"STRONG",{});var yWr=s(Ure);JUe=r(yWr,"retribert"),yWr.forEach(t),YUe=r(Y3e," \u2014 "),CS=n(Y3e,"A",{href:!0});var LWr=s(CS);KUe=r(LWr,"RetriBertConfig"),LWr.forEach(t),ZUe=r(Y3e," (RetriBERT model)"),Y3e.forEach(t),eJe=i(y),Vm=n(y,"LI",{});var K3e=s(Vm);Jre=n(K3e,"STRONG",{});var xWr=s(Jre);oJe=r(xWr,"roberta"),xWr.forEach(t),rJe=r(K3e," \u2014 "),wS=n(K3e,"A",{href:!0});var $Wr=s(wS);tJe=r($Wr,"RobertaConfig"),$Wr.forEach(t),aJe=r(K3e," (RoBERTa model)"),K3e.forEach(t),nJe=i(y),Xm=n(y,"LI",{});var Z3e=s(Xm);Yre=n(Z3e,"STRONG",{});var kWr=s(Yre);sJe=r(kWr,"roformer"),kWr.forEach(t),lJe=r(Z3e," \u2014 "),AS=n(Z3e,"A",{href:!0});var SWr=s(AS);iJe=r(SWr,"RoFormerConfig"),SWr.forEach(t),dJe=r(Z3e," (RoFormer model)"),Z3e.forEach(t),cJe=i(y),zm=n(y,"LI",{});var ewe=s(zm);Kre=n(ewe,"STRONG",{});var RWr=s(Kre);fJe=r(RWr,"segformer"),RWr.forEach(t),mJe=r(ewe," \u2014 "),yS=n(ewe,"A",{href:!0});var PWr=s(yS);gJe=r(PWr,"SegformerConfig"),PWr.forEach(t),hJe=r(ewe," (SegFormer model)"),ewe.forEach(t),pJe=i(y),Wm=n(y,"LI",{});var owe=s(Wm);Zre=n(owe,"STRONG",{});var BWr=s(Zre);_Je=r(BWr,"sew"),BWr.forEach(t),uJe=r(owe," \u2014 "),LS=n(owe,"A",{href:!0});var IWr=s(LS);bJe=r(IWr,"SEWConfig"),IWr.forEach(t),vJe=r(owe," (SEW model)"),owe.forEach(t),FJe=i(y),Qm=n(y,"LI",{});var rwe=s(Qm);ete=n(rwe,"STRONG",{});var NWr=s(ete);TJe=r(NWr,"sew-d"),NWr.forEach(t),MJe=r(rwe," \u2014 "),xS=n(rwe,"A",{href:!0});var qWr=s(xS);EJe=r(qWr,"SEWDConfig"),qWr.forEach(t),CJe=r(rwe," (SEW-D model)"),rwe.forEach(t),wJe=i(y),Hm=n(y,"LI",{});var twe=s(Hm);ote=n(twe,"STRONG",{});var jWr=s(ote);AJe=r(jWr,"speech-encoder-decoder"),jWr.forEach(t),yJe=r(twe," \u2014 "),$S=n(twe,"A",{href:!0});var DWr=s($S);LJe=r(DWr,"SpeechEncoderDecoderConfig"),DWr.forEach(t),xJe=r(twe," (Speech Encoder decoder model)"),twe.forEach(t),$Je=i(y),Um=n(y,"LI",{});var awe=s(Um);rte=n(awe,"STRONG",{});var GWr=s(rte);kJe=r(GWr,"speech_to_text"),GWr.forEach(t),SJe=r(awe," \u2014 "),kS=n(awe,"A",{href:!0});var OWr=s(kS);RJe=r(OWr,"Speech2TextConfig"),OWr.forEach(t),PJe=r(awe," (Speech2Text model)"),awe.forEach(t),BJe=i(y),Jm=n(y,"LI",{});var nwe=s(Jm);tte=n(nwe,"STRONG",{});var VWr=s(tte);IJe=r(VWr,"speech_to_text_2"),VWr.forEach(t),NJe=r(nwe," \u2014 "),SS=n(nwe,"A",{href:!0});var XWr=s(SS);qJe=r(XWr,"Speech2Text2Config"),XWr.forEach(t),jJe=r(nwe," (Speech2Text2 model)"),nwe.forEach(t),DJe=i(y),Ym=n(y,"LI",{});var swe=s(Ym);ate=n(swe,"STRONG",{});var zWr=s(ate);GJe=r(zWr,"splinter"),zWr.forEach(t),OJe=r(swe," \u2014 "),RS=n(swe,"A",{href:!0});var WWr=s(RS);VJe=r(WWr,"SplinterConfig"),WWr.forEach(t),XJe=r(swe," (Splinter model)"),swe.forEach(t),zJe=i(y),Km=n(y,"LI",{});var lwe=s(Km);nte=n(lwe,"STRONG",{});var QWr=s(nte);WJe=r(QWr,"squeezebert"),QWr.forEach(t),QJe=r(lwe," \u2014 "),PS=n(lwe,"A",{href:!0});var HWr=s(PS);HJe=r(HWr,"SqueezeBertConfig"),HWr.forEach(t),UJe=r(lwe," (SqueezeBERT model)"),lwe.forEach(t),JJe=i(y),Zm=n(y,"LI",{});var iwe=s(Zm);ste=n(iwe,"STRONG",{});var UWr=s(ste);YJe=r(UWr,"swin"),UWr.forEach(t),KJe=r(iwe," \u2014 "),BS=n(iwe,"A",{href:!0});var JWr=s(BS);ZJe=r(JWr,"SwinConfig"),JWr.forEach(t),eYe=r(iwe," (Swin model)"),iwe.forEach(t),oYe=i(y),eg=n(y,"LI",{});var dwe=s(eg);lte=n(dwe,"STRONG",{});var YWr=s(lte);rYe=r(YWr,"t5"),YWr.forEach(t),tYe=r(dwe," \u2014 "),IS=n(dwe,"A",{href:!0});var KWr=s(IS);aYe=r(KWr,"T5Config"),KWr.forEach(t),nYe=r(dwe," (T5 model)"),dwe.forEach(t),sYe=i(y),og=n(y,"LI",{});var cwe=s(og);ite=n(cwe,"STRONG",{});var ZWr=s(ite);lYe=r(ZWr,"tapas"),ZWr.forEach(t),iYe=r(cwe," \u2014 "),NS=n(cwe,"A",{href:!0});var eQr=s(NS);dYe=r(eQr,"TapasConfig"),eQr.forEach(t),cYe=r(cwe," (TAPAS model)"),cwe.forEach(t),fYe=i(y),rg=n(y,"LI",{});var fwe=s(rg);dte=n(fwe,"STRONG",{});var oQr=s(dte);mYe=r(oQr,"trajectory_transformer"),oQr.forEach(t),gYe=r(fwe," \u2014 "),qS=n(fwe,"A",{href:!0});var rQr=s(qS);hYe=r(rQr,"TrajectoryTransformerConfig"),rQr.forEach(t),pYe=r(fwe," (Trajectory Transformer model)"),fwe.forEach(t),_Ye=i(y),tg=n(y,"LI",{});var mwe=s(tg);cte=n(mwe,"STRONG",{});var tQr=s(cte);uYe=r(tQr,"transfo-xl"),tQr.forEach(t),bYe=r(mwe," \u2014 "),jS=n(mwe,"A",{href:!0});var aQr=s(jS);vYe=r(aQr,"TransfoXLConfig"),aQr.forEach(t),FYe=r(mwe," (Transformer-XL model)"),mwe.forEach(t),TYe=i(y),ag=n(y,"LI",{});var gwe=s(ag);fte=n(gwe,"STRONG",{});var nQr=s(fte);MYe=r(nQr,"trocr"),nQr.forEach(t),EYe=r(gwe," \u2014 "),DS=n(gwe,"A",{href:!0});var sQr=s(DS);CYe=r(sQr,"TrOCRConfig"),sQr.forEach(t),wYe=r(gwe," (TrOCR model)"),gwe.forEach(t),AYe=i(y),ng=n(y,"LI",{});var hwe=s(ng);mte=n(hwe,"STRONG",{});var lQr=s(mte);yYe=r(lQr,"unispeech"),lQr.forEach(t),LYe=r(hwe," \u2014 "),GS=n(hwe,"A",{href:!0});var iQr=s(GS);xYe=r(iQr,"UniSpeechConfig"),iQr.forEach(t),$Ye=r(hwe," (UniSpeech model)"),hwe.forEach(t),kYe=i(y),sg=n(y,"LI",{});var pwe=s(sg);gte=n(pwe,"STRONG",{});var dQr=s(gte);SYe=r(dQr,"unispeech-sat"),dQr.forEach(t),RYe=r(pwe," \u2014 "),OS=n(pwe,"A",{href:!0});var cQr=s(OS);PYe=r(cQr,"UniSpeechSatConfig"),cQr.forEach(t),BYe=r(pwe," (UniSpeechSat model)"),pwe.forEach(t),IYe=i(y),lg=n(y,"LI",{});var _we=s(lg);hte=n(_we,"STRONG",{});var fQr=s(hte);NYe=r(fQr,"van"),fQr.forEach(t),qYe=r(_we," \u2014 "),VS=n(_we,"A",{href:!0});var mQr=s(VS);jYe=r(mQr,"VanConfig"),mQr.forEach(t),DYe=r(_we," (VAN model)"),_we.forEach(t),GYe=i(y),ig=n(y,"LI",{});var uwe=s(ig);pte=n(uwe,"STRONG",{});var gQr=s(pte);OYe=r(gQr,"vilt"),gQr.forEach(t),VYe=r(uwe," \u2014 "),XS=n(uwe,"A",{href:!0});var hQr=s(XS);XYe=r(hQr,"ViltConfig"),hQr.forEach(t),zYe=r(uwe," (ViLT model)"),uwe.forEach(t),WYe=i(y),dg=n(y,"LI",{});var bwe=s(dg);_te=n(bwe,"STRONG",{});var pQr=s(_te);QYe=r(pQr,"vision-encoder-decoder"),pQr.forEach(t),HYe=r(bwe," \u2014 "),zS=n(bwe,"A",{href:!0});var _Qr=s(zS);UYe=r(_Qr,"VisionEncoderDecoderConfig"),_Qr.forEach(t),JYe=r(bwe," (Vision Encoder decoder model)"),bwe.forEach(t),YYe=i(y),cg=n(y,"LI",{});var vwe=s(cg);ute=n(vwe,"STRONG",{});var uQr=s(ute);KYe=r(uQr,"vision-text-dual-encoder"),uQr.forEach(t),ZYe=r(vwe," \u2014 "),WS=n(vwe,"A",{href:!0});var bQr=s(WS);eKe=r(bQr,"VisionTextDualEncoderConfig"),bQr.forEach(t),oKe=r(vwe," (VisionTextDualEncoder model)"),vwe.forEach(t),rKe=i(y),fg=n(y,"LI",{});var Fwe=s(fg);bte=n(Fwe,"STRONG",{});var vQr=s(bte);tKe=r(vQr,"visual_bert"),vQr.forEach(t),aKe=r(Fwe," \u2014 "),QS=n(Fwe,"A",{href:!0});var FQr=s(QS);nKe=r(FQr,"VisualBertConfig"),FQr.forEach(t),sKe=r(Fwe," (VisualBert model)"),Fwe.forEach(t),lKe=i(y),mg=n(y,"LI",{});var Twe=s(mg);vte=n(Twe,"STRONG",{});var TQr=s(vte);iKe=r(TQr,"vit"),TQr.forEach(t),dKe=r(Twe," \u2014 "),HS=n(Twe,"A",{href:!0});var MQr=s(HS);cKe=r(MQr,"ViTConfig"),MQr.forEach(t),fKe=r(Twe," (ViT model)"),Twe.forEach(t),mKe=i(y),gg=n(y,"LI",{});var Mwe=s(gg);Fte=n(Mwe,"STRONG",{});var EQr=s(Fte);gKe=r(EQr,"vit_mae"),EQr.forEach(t),hKe=r(Mwe," \u2014 "),US=n(Mwe,"A",{href:!0});var CQr=s(US);pKe=r(CQr,"ViTMAEConfig"),CQr.forEach(t),_Ke=r(Mwe," (ViTMAE model)"),Mwe.forEach(t),uKe=i(y),hg=n(y,"LI",{});var Ewe=s(hg);Tte=n(Ewe,"STRONG",{});var wQr=s(Tte);bKe=r(wQr,"wav2vec2"),wQr.forEach(t),vKe=r(Ewe," \u2014 "),JS=n(Ewe,"A",{href:!0});var AQr=s(JS);FKe=r(AQr,"Wav2Vec2Config"),AQr.forEach(t),TKe=r(Ewe," (Wav2Vec2 model)"),Ewe.forEach(t),MKe=i(y),pg=n(y,"LI",{});var Cwe=s(pg);Mte=n(Cwe,"STRONG",{});var yQr=s(Mte);EKe=r(yQr,"wav2vec2-conformer"),yQr.forEach(t),CKe=r(Cwe," \u2014 "),YS=n(Cwe,"A",{href:!0});var LQr=s(YS);wKe=r(LQr,"Wav2Vec2ConformerConfig"),LQr.forEach(t),AKe=r(Cwe," (Wav2Vec2-Conformer model)"),Cwe.forEach(t),yKe=i(y),_g=n(y,"LI",{});var wwe=s(_g);Ete=n(wwe,"STRONG",{});var xQr=s(Ete);LKe=r(xQr,"wavlm"),xQr.forEach(t),xKe=r(wwe," \u2014 "),KS=n(wwe,"A",{href:!0});var $Qr=s(KS);$Ke=r($Qr,"WavLMConfig"),$Qr.forEach(t),kKe=r(wwe," (WavLM model)"),wwe.forEach(t),SKe=i(y),ug=n(y,"LI",{});var Awe=s(ug);Cte=n(Awe,"STRONG",{});var kQr=s(Cte);RKe=r(kQr,"xglm"),kQr.forEach(t),PKe=r(Awe," \u2014 "),ZS=n(Awe,"A",{href:!0});var SQr=s(ZS);BKe=r(SQr,"XGLMConfig"),SQr.forEach(t),IKe=r(Awe," (XGLM model)"),Awe.forEach(t),NKe=i(y),bg=n(y,"LI",{});var ywe=s(bg);wte=n(ywe,"STRONG",{});var RQr=s(wte);qKe=r(RQr,"xlm"),RQr.forEach(t),jKe=r(ywe," \u2014 "),eR=n(ywe,"A",{href:!0});var PQr=s(eR);DKe=r(PQr,"XLMConfig"),PQr.forEach(t),GKe=r(ywe," (XLM model)"),ywe.forEach(t),OKe=i(y),vg=n(y,"LI",{});var Lwe=s(vg);Ate=n(Lwe,"STRONG",{});var BQr=s(Ate);VKe=r(BQr,"xlm-prophetnet"),BQr.forEach(t),XKe=r(Lwe," \u2014 "),oR=n(Lwe,"A",{href:!0});var IQr=s(oR);zKe=r(IQr,"XLMProphetNetConfig"),IQr.forEach(t),WKe=r(Lwe," (XLMProphetNet model)"),Lwe.forEach(t),QKe=i(y),Fg=n(y,"LI",{});var xwe=s(Fg);yte=n(xwe,"STRONG",{});var NQr=s(yte);HKe=r(NQr,"xlm-roberta"),NQr.forEach(t),UKe=r(xwe," \u2014 "),rR=n(xwe,"A",{href:!0});var qQr=s(rR);JKe=r(qQr,"XLMRobertaConfig"),qQr.forEach(t),YKe=r(xwe," (XLM-RoBERTa model)"),xwe.forEach(t),KKe=i(y),Tg=n(y,"LI",{});var $we=s(Tg);Lte=n($we,"STRONG",{});var jQr=s(Lte);ZKe=r(jQr,"xlm-roberta-xl"),jQr.forEach(t),eZe=r($we," \u2014 "),tR=n($we,"A",{href:!0});var DQr=s(tR);oZe=r(DQr,"XLMRobertaXLConfig"),DQr.forEach(t),rZe=r($we," (XLM-RoBERTa-XL model)"),$we.forEach(t),tZe=i(y),Mg=n(y,"LI",{});var kwe=s(Mg);xte=n(kwe,"STRONG",{});var GQr=s(xte);aZe=r(GQr,"xlnet"),GQr.forEach(t),nZe=r(kwe," \u2014 "),aR=n(kwe,"A",{href:!0});var OQr=s(aR);sZe=r(OQr,"XLNetConfig"),OQr.forEach(t),lZe=r(kwe," (XLNet model)"),kwe.forEach(t),iZe=i(y),Eg=n(y,"LI",{});var Swe=s(Eg);$te=n(Swe,"STRONG",{});var VQr=s($te);dZe=r(VQr,"yolos"),VQr.forEach(t),cZe=r(Swe," \u2014 "),nR=n(Swe,"A",{href:!0});var XQr=s(nR);fZe=r(XQr,"YolosConfig"),XQr.forEach(t),mZe=r(Swe," (YOLOS model)"),Swe.forEach(t),gZe=i(y),Cg=n(y,"LI",{});var Rwe=s(Cg);kte=n(Rwe,"STRONG",{});var zQr=s(kte);hZe=r(zQr,"yoso"),zQr.forEach(t),pZe=r(Rwe," \u2014 "),sR=n(Rwe,"A",{href:!0});var WQr=s(sR);_Ze=r(WQr,"YosoConfig"),WQr.forEach(t),uZe=r(Rwe," (YOSO model)"),Rwe.forEach(t),y.forEach(t),bZe=i(ot),T(wg.$$.fragment,ot),ot.forEach(t),vZe=i(et),Ag=n(et,"DIV",{class:!0});var yDe=s(Ag);T(DA.$$.fragment,yDe),FZe=i(yDe),Ste=n(yDe,"P",{});var QQr=s(Ste);TZe=r(QQr,"Register a new configuration for this class."),QQr.forEach(t),yDe.forEach(t),et.forEach(t),$qe=i(f),Mi=n(f,"H2",{class:!0});var LDe=s(Mi);yg=n(LDe,"A",{id:!0,class:!0,href:!0});var HQr=s(yg);Rte=n(HQr,"SPAN",{});var UQr=s(Rte);T(GA.$$.fragment,UQr),UQr.forEach(t),HQr.forEach(t),MZe=i(LDe),Pte=n(LDe,"SPAN",{});var JQr=s(Pte);EZe=r(JQr,"AutoTokenizer"),JQr.forEach(t),LDe.forEach(t),kqe=i(f),wo=n(f,"DIV",{class:!0});var qs=s(wo);T(OA.$$.fragment,qs),CZe=i(qs),VA=n(qs,"P",{});var xDe=s(VA);wZe=r(xDe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),lR=n(xDe,"A",{href:!0});var YQr=s(lR);AZe=r(YQr,"AutoTokenizer.from_pretrained()"),YQr.forEach(t),yZe=r(xDe," class method."),xDe.forEach(t),LZe=i(qs),XA=n(qs,"P",{});var $De=s(XA);xZe=r($De,"This class cannot be instantiated directly using "),Bte=n($De,"CODE",{});var KQr=s(Bte);$Ze=r(KQr,"__init__()"),KQr.forEach(t),kZe=r($De," (throws an error)."),$De.forEach(t),SZe=i(qs),Cr=n(qs,"DIV",{class:!0});var js=s(Cr);T(zA.$$.fragment,js),RZe=i(js),Ite=n(js,"P",{});var ZQr=s(Ite);PZe=r(ZQr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),ZQr.forEach(t),BZe=i(js),Aa=n(js,"P",{});var Bw=s(Aa);IZe=r(Bw,"The tokenizer class to instantiate is selected based on the "),Nte=n(Bw,"CODE",{});var eHr=s(Nte);NZe=r(eHr,"model_type"),eHr.forEach(t),qZe=r(Bw,` property of the config object (either
passed as an argument or loaded from `),qte=n(Bw,"CODE",{});var oHr=s(qte);jZe=r(oHr,"pretrained_model_name_or_path"),oHr.forEach(t),DZe=r(Bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jte=n(Bw,"CODE",{});var rHr=s(jte);GZe=r(rHr,"pretrained_model_name_or_path"),rHr.forEach(t),OZe=r(Bw,":"),Bw.forEach(t),VZe=i(js),k=n(js,"UL",{});var S=s(k);Sn=n(S,"LI",{});var Wx=s(Sn);Dte=n(Wx,"STRONG",{});var tHr=s(Dte);XZe=r(tHr,"albert"),tHr.forEach(t),zZe=r(Wx," \u2014 "),iR=n(Wx,"A",{href:!0});var aHr=s(iR);WZe=r(aHr,"AlbertTokenizer"),aHr.forEach(t),QZe=r(Wx," or "),dR=n(Wx,"A",{href:!0});var nHr=s(dR);HZe=r(nHr,"AlbertTokenizerFast"),nHr.forEach(t),UZe=r(Wx," (ALBERT model)"),Wx.forEach(t),JZe=i(S),Rn=n(S,"LI",{});var Qx=s(Rn);Gte=n(Qx,"STRONG",{});var sHr=s(Gte);YZe=r(sHr,"bart"),sHr.forEach(t),KZe=r(Qx," \u2014 "),cR=n(Qx,"A",{href:!0});var lHr=s(cR);ZZe=r(lHr,"BartTokenizer"),lHr.forEach(t),eeo=r(Qx," or "),fR=n(Qx,"A",{href:!0});var iHr=s(fR);oeo=r(iHr,"BartTokenizerFast"),iHr.forEach(t),reo=r(Qx," (BART model)"),Qx.forEach(t),teo=i(S),Pn=n(S,"LI",{});var Hx=s(Pn);Ote=n(Hx,"STRONG",{});var dHr=s(Ote);aeo=r(dHr,"barthez"),dHr.forEach(t),neo=r(Hx," \u2014 "),mR=n(Hx,"A",{href:!0});var cHr=s(mR);seo=r(cHr,"BarthezTokenizer"),cHr.forEach(t),leo=r(Hx," or "),gR=n(Hx,"A",{href:!0});var fHr=s(gR);ieo=r(fHr,"BarthezTokenizerFast"),fHr.forEach(t),deo=r(Hx," (BARThez model)"),Hx.forEach(t),ceo=i(S),Lg=n(S,"LI",{});var Pwe=s(Lg);Vte=n(Pwe,"STRONG",{});var mHr=s(Vte);feo=r(mHr,"bartpho"),mHr.forEach(t),meo=r(Pwe," \u2014 "),hR=n(Pwe,"A",{href:!0});var gHr=s(hR);geo=r(gHr,"BartphoTokenizer"),gHr.forEach(t),heo=r(Pwe," (BARTpho model)"),Pwe.forEach(t),peo=i(S),Bn=n(S,"LI",{});var Ux=s(Bn);Xte=n(Ux,"STRONG",{});var hHr=s(Xte);_eo=r(hHr,"bert"),hHr.forEach(t),ueo=r(Ux," \u2014 "),pR=n(Ux,"A",{href:!0});var pHr=s(pR);beo=r(pHr,"BertTokenizer"),pHr.forEach(t),veo=r(Ux," or "),_R=n(Ux,"A",{href:!0});var _Hr=s(_R);Feo=r(_Hr,"BertTokenizerFast"),_Hr.forEach(t),Teo=r(Ux," (BERT model)"),Ux.forEach(t),Meo=i(S),xg=n(S,"LI",{});var Bwe=s(xg);zte=n(Bwe,"STRONG",{});var uHr=s(zte);Eeo=r(uHr,"bert-generation"),uHr.forEach(t),Ceo=r(Bwe," \u2014 "),uR=n(Bwe,"A",{href:!0});var bHr=s(uR);weo=r(bHr,"BertGenerationTokenizer"),bHr.forEach(t),Aeo=r(Bwe," (Bert Generation model)"),Bwe.forEach(t),yeo=i(S),$g=n(S,"LI",{});var Iwe=s($g);Wte=n(Iwe,"STRONG",{});var vHr=s(Wte);Leo=r(vHr,"bert-japanese"),vHr.forEach(t),xeo=r(Iwe," \u2014 "),bR=n(Iwe,"A",{href:!0});var FHr=s(bR);$eo=r(FHr,"BertJapaneseTokenizer"),FHr.forEach(t),keo=r(Iwe," (BertJapanese model)"),Iwe.forEach(t),Seo=i(S),kg=n(S,"LI",{});var Nwe=s(kg);Qte=n(Nwe,"STRONG",{});var THr=s(Qte);Reo=r(THr,"bertweet"),THr.forEach(t),Peo=r(Nwe," \u2014 "),vR=n(Nwe,"A",{href:!0});var MHr=s(vR);Beo=r(MHr,"BertweetTokenizer"),MHr.forEach(t),Ieo=r(Nwe," (Bertweet model)"),Nwe.forEach(t),Neo=i(S),In=n(S,"LI",{});var Jx=s(In);Hte=n(Jx,"STRONG",{});var EHr=s(Hte);qeo=r(EHr,"big_bird"),EHr.forEach(t),jeo=r(Jx," \u2014 "),FR=n(Jx,"A",{href:!0});var CHr=s(FR);Deo=r(CHr,"BigBirdTokenizer"),CHr.forEach(t),Geo=r(Jx," or "),TR=n(Jx,"A",{href:!0});var wHr=s(TR);Oeo=r(wHr,"BigBirdTokenizerFast"),wHr.forEach(t),Veo=r(Jx," (BigBird model)"),Jx.forEach(t),Xeo=i(S),Nn=n(S,"LI",{});var Yx=s(Nn);Ute=n(Yx,"STRONG",{});var AHr=s(Ute);zeo=r(AHr,"bigbird_pegasus"),AHr.forEach(t),Weo=r(Yx," \u2014 "),MR=n(Yx,"A",{href:!0});var yHr=s(MR);Qeo=r(yHr,"PegasusTokenizer"),yHr.forEach(t),Heo=r(Yx," or "),ER=n(Yx,"A",{href:!0});var LHr=s(ER);Ueo=r(LHr,"PegasusTokenizerFast"),LHr.forEach(t),Jeo=r(Yx," (BigBirdPegasus model)"),Yx.forEach(t),Yeo=i(S),qn=n(S,"LI",{});var Kx=s(qn);Jte=n(Kx,"STRONG",{});var xHr=s(Jte);Keo=r(xHr,"blenderbot"),xHr.forEach(t),Zeo=r(Kx," \u2014 "),CR=n(Kx,"A",{href:!0});var $Hr=s(CR);eoo=r($Hr,"BlenderbotTokenizer"),$Hr.forEach(t),ooo=r(Kx," or "),wR=n(Kx,"A",{href:!0});var kHr=s(wR);roo=r(kHr,"BlenderbotTokenizerFast"),kHr.forEach(t),too=r(Kx," (Blenderbot model)"),Kx.forEach(t),aoo=i(S),Sg=n(S,"LI",{});var qwe=s(Sg);Yte=n(qwe,"STRONG",{});var SHr=s(Yte);noo=r(SHr,"blenderbot-small"),SHr.forEach(t),soo=r(qwe," \u2014 "),AR=n(qwe,"A",{href:!0});var RHr=s(AR);loo=r(RHr,"BlenderbotSmallTokenizer"),RHr.forEach(t),ioo=r(qwe," (BlenderbotSmall model)"),qwe.forEach(t),doo=i(S),Rg=n(S,"LI",{});var jwe=s(Rg);Kte=n(jwe,"STRONG",{});var PHr=s(Kte);coo=r(PHr,"byt5"),PHr.forEach(t),foo=r(jwe," \u2014 "),yR=n(jwe,"A",{href:!0});var BHr=s(yR);moo=r(BHr,"ByT5Tokenizer"),BHr.forEach(t),goo=r(jwe," (ByT5 model)"),jwe.forEach(t),hoo=i(S),jn=n(S,"LI",{});var Zx=s(jn);Zte=n(Zx,"STRONG",{});var IHr=s(Zte);poo=r(IHr,"camembert"),IHr.forEach(t),_oo=r(Zx," \u2014 "),LR=n(Zx,"A",{href:!0});var NHr=s(LR);uoo=r(NHr,"CamembertTokenizer"),NHr.forEach(t),boo=r(Zx," or "),xR=n(Zx,"A",{href:!0});var qHr=s(xR);voo=r(qHr,"CamembertTokenizerFast"),qHr.forEach(t),Foo=r(Zx," (CamemBERT model)"),Zx.forEach(t),Too=i(S),Pg=n(S,"LI",{});var Dwe=s(Pg);eae=n(Dwe,"STRONG",{});var jHr=s(eae);Moo=r(jHr,"canine"),jHr.forEach(t),Eoo=r(Dwe," \u2014 "),$R=n(Dwe,"A",{href:!0});var DHr=s($R);Coo=r(DHr,"CanineTokenizer"),DHr.forEach(t),woo=r(Dwe," (Canine model)"),Dwe.forEach(t),Aoo=i(S),Dn=n(S,"LI",{});var e$=s(Dn);oae=n(e$,"STRONG",{});var GHr=s(oae);yoo=r(GHr,"clip"),GHr.forEach(t),Loo=r(e$," \u2014 "),kR=n(e$,"A",{href:!0});var OHr=s(kR);xoo=r(OHr,"CLIPTokenizer"),OHr.forEach(t),$oo=r(e$," or "),SR=n(e$,"A",{href:!0});var VHr=s(SR);koo=r(VHr,"CLIPTokenizerFast"),VHr.forEach(t),Soo=r(e$," (CLIP model)"),e$.forEach(t),Roo=i(S),Gn=n(S,"LI",{});var o$=s(Gn);rae=n(o$,"STRONG",{});var XHr=s(rae);Poo=r(XHr,"convbert"),XHr.forEach(t),Boo=r(o$," \u2014 "),RR=n(o$,"A",{href:!0});var zHr=s(RR);Ioo=r(zHr,"ConvBertTokenizer"),zHr.forEach(t),Noo=r(o$," or "),PR=n(o$,"A",{href:!0});var WHr=s(PR);qoo=r(WHr,"ConvBertTokenizerFast"),WHr.forEach(t),joo=r(o$," (ConvBERT model)"),o$.forEach(t),Doo=i(S),On=n(S,"LI",{});var r$=s(On);tae=n(r$,"STRONG",{});var QHr=s(tae);Goo=r(QHr,"cpm"),QHr.forEach(t),Ooo=r(r$," \u2014 "),BR=n(r$,"A",{href:!0});var HHr=s(BR);Voo=r(HHr,"CpmTokenizer"),HHr.forEach(t),Xoo=r(r$," or "),IR=n(r$,"A",{href:!0});var UHr=s(IR);zoo=r(UHr,"CpmTokenizerFast"),UHr.forEach(t),Woo=r(r$," (CPM model)"),r$.forEach(t),Qoo=i(S),Bg=n(S,"LI",{});var Gwe=s(Bg);aae=n(Gwe,"STRONG",{});var JHr=s(aae);Hoo=r(JHr,"ctrl"),JHr.forEach(t),Uoo=r(Gwe," \u2014 "),NR=n(Gwe,"A",{href:!0});var YHr=s(NR);Joo=r(YHr,"CTRLTokenizer"),YHr.forEach(t),Yoo=r(Gwe," (CTRL model)"),Gwe.forEach(t),Koo=i(S),Vn=n(S,"LI",{});var t$=s(Vn);nae=n(t$,"STRONG",{});var KHr=s(nae);Zoo=r(KHr,"data2vec-text"),KHr.forEach(t),ero=r(t$," \u2014 "),qR=n(t$,"A",{href:!0});var ZHr=s(qR);oro=r(ZHr,"RobertaTokenizer"),ZHr.forEach(t),rro=r(t$," or "),jR=n(t$,"A",{href:!0});var eUr=s(jR);tro=r(eUr,"RobertaTokenizerFast"),eUr.forEach(t),aro=r(t$," (Data2VecText model)"),t$.forEach(t),nro=i(S),Xn=n(S,"LI",{});var a$=s(Xn);sae=n(a$,"STRONG",{});var oUr=s(sae);sro=r(oUr,"deberta"),oUr.forEach(t),lro=r(a$," \u2014 "),DR=n(a$,"A",{href:!0});var rUr=s(DR);iro=r(rUr,"DebertaTokenizer"),rUr.forEach(t),dro=r(a$," or "),GR=n(a$,"A",{href:!0});var tUr=s(GR);cro=r(tUr,"DebertaTokenizerFast"),tUr.forEach(t),fro=r(a$," (DeBERTa model)"),a$.forEach(t),mro=i(S),zn=n(S,"LI",{});var n$=s(zn);lae=n(n$,"STRONG",{});var aUr=s(lae);gro=r(aUr,"deberta-v2"),aUr.forEach(t),hro=r(n$," \u2014 "),OR=n(n$,"A",{href:!0});var nUr=s(OR);pro=r(nUr,"DebertaV2Tokenizer"),nUr.forEach(t),_ro=r(n$," or "),VR=n(n$,"A",{href:!0});var sUr=s(VR);uro=r(sUr,"DebertaV2TokenizerFast"),sUr.forEach(t),bro=r(n$," (DeBERTa-v2 model)"),n$.forEach(t),vro=i(S),Wn=n(S,"LI",{});var s$=s(Wn);iae=n(s$,"STRONG",{});var lUr=s(iae);Fro=r(lUr,"distilbert"),lUr.forEach(t),Tro=r(s$," \u2014 "),XR=n(s$,"A",{href:!0});var iUr=s(XR);Mro=r(iUr,"DistilBertTokenizer"),iUr.forEach(t),Ero=r(s$," or "),zR=n(s$,"A",{href:!0});var dUr=s(zR);Cro=r(dUr,"DistilBertTokenizerFast"),dUr.forEach(t),wro=r(s$," (DistilBERT model)"),s$.forEach(t),Aro=i(S),Qn=n(S,"LI",{});var l$=s(Qn);dae=n(l$,"STRONG",{});var cUr=s(dae);yro=r(cUr,"dpr"),cUr.forEach(t),Lro=r(l$," \u2014 "),WR=n(l$,"A",{href:!0});var fUr=s(WR);xro=r(fUr,"DPRQuestionEncoderTokenizer"),fUr.forEach(t),$ro=r(l$," or "),QR=n(l$,"A",{href:!0});var mUr=s(QR);kro=r(mUr,"DPRQuestionEncoderTokenizerFast"),mUr.forEach(t),Sro=r(l$," (DPR model)"),l$.forEach(t),Rro=i(S),Hn=n(S,"LI",{});var i$=s(Hn);cae=n(i$,"STRONG",{});var gUr=s(cae);Pro=r(gUr,"electra"),gUr.forEach(t),Bro=r(i$," \u2014 "),HR=n(i$,"A",{href:!0});var hUr=s(HR);Iro=r(hUr,"ElectraTokenizer"),hUr.forEach(t),Nro=r(i$," or "),UR=n(i$,"A",{href:!0});var pUr=s(UR);qro=r(pUr,"ElectraTokenizerFast"),pUr.forEach(t),jro=r(i$," (ELECTRA model)"),i$.forEach(t),Dro=i(S),Ig=n(S,"LI",{});var Owe=s(Ig);fae=n(Owe,"STRONG",{});var _Ur=s(fae);Gro=r(_Ur,"flaubert"),_Ur.forEach(t),Oro=r(Owe," \u2014 "),JR=n(Owe,"A",{href:!0});var uUr=s(JR);Vro=r(uUr,"FlaubertTokenizer"),uUr.forEach(t),Xro=r(Owe," (FlauBERT model)"),Owe.forEach(t),zro=i(S),Un=n(S,"LI",{});var d$=s(Un);mae=n(d$,"STRONG",{});var bUr=s(mae);Wro=r(bUr,"fnet"),bUr.forEach(t),Qro=r(d$," \u2014 "),YR=n(d$,"A",{href:!0});var vUr=s(YR);Hro=r(vUr,"FNetTokenizer"),vUr.forEach(t),Uro=r(d$," or "),KR=n(d$,"A",{href:!0});var FUr=s(KR);Jro=r(FUr,"FNetTokenizerFast"),FUr.forEach(t),Yro=r(d$," (FNet model)"),d$.forEach(t),Kro=i(S),Ng=n(S,"LI",{});var Vwe=s(Ng);gae=n(Vwe,"STRONG",{});var TUr=s(gae);Zro=r(TUr,"fsmt"),TUr.forEach(t),eto=r(Vwe," \u2014 "),ZR=n(Vwe,"A",{href:!0});var MUr=s(ZR);oto=r(MUr,"FSMTTokenizer"),MUr.forEach(t),rto=r(Vwe," (FairSeq Machine-Translation model)"),Vwe.forEach(t),tto=i(S),Jn=n(S,"LI",{});var c$=s(Jn);hae=n(c$,"STRONG",{});var EUr=s(hae);ato=r(EUr,"funnel"),EUr.forEach(t),nto=r(c$," \u2014 "),eP=n(c$,"A",{href:!0});var CUr=s(eP);sto=r(CUr,"FunnelTokenizer"),CUr.forEach(t),lto=r(c$," or "),oP=n(c$,"A",{href:!0});var wUr=s(oP);ito=r(wUr,"FunnelTokenizerFast"),wUr.forEach(t),dto=r(c$," (Funnel Transformer model)"),c$.forEach(t),cto=i(S),Yn=n(S,"LI",{});var f$=s(Yn);pae=n(f$,"STRONG",{});var AUr=s(pae);fto=r(AUr,"gpt2"),AUr.forEach(t),mto=r(f$," \u2014 "),rP=n(f$,"A",{href:!0});var yUr=s(rP);gto=r(yUr,"GPT2Tokenizer"),yUr.forEach(t),hto=r(f$," or "),tP=n(f$,"A",{href:!0});var LUr=s(tP);pto=r(LUr,"GPT2TokenizerFast"),LUr.forEach(t),_to=r(f$," (OpenAI GPT-2 model)"),f$.forEach(t),uto=i(S),Kn=n(S,"LI",{});var m$=s(Kn);_ae=n(m$,"STRONG",{});var xUr=s(_ae);bto=r(xUr,"gpt_neo"),xUr.forEach(t),vto=r(m$," \u2014 "),aP=n(m$,"A",{href:!0});var $Ur=s(aP);Fto=r($Ur,"GPT2Tokenizer"),$Ur.forEach(t),Tto=r(m$," or "),nP=n(m$,"A",{href:!0});var kUr=s(nP);Mto=r(kUr,"GPT2TokenizerFast"),kUr.forEach(t),Eto=r(m$," (GPT Neo model)"),m$.forEach(t),Cto=i(S),qg=n(S,"LI",{});var Xwe=s(qg);uae=n(Xwe,"STRONG",{});var SUr=s(uae);wto=r(SUr,"gpt_neox"),SUr.forEach(t),Ato=r(Xwe," \u2014 "),sP=n(Xwe,"A",{href:!0});var RUr=s(sP);yto=r(RUr,"GPTNeoXTokenizerFast"),RUr.forEach(t),Lto=r(Xwe," (GPT NeoX model)"),Xwe.forEach(t),xto=i(S),Zn=n(S,"LI",{});var g$=s(Zn);bae=n(g$,"STRONG",{});var PUr=s(bae);$to=r(PUr,"gptj"),PUr.forEach(t),kto=r(g$," \u2014 "),lP=n(g$,"A",{href:!0});var BUr=s(lP);Sto=r(BUr,"GPT2Tokenizer"),BUr.forEach(t),Rto=r(g$," or "),iP=n(g$,"A",{href:!0});var IUr=s(iP);Pto=r(IUr,"GPT2TokenizerFast"),IUr.forEach(t),Bto=r(g$," (GPT-J model)"),g$.forEach(t),Ito=i(S),es=n(S,"LI",{});var h$=s(es);vae=n(h$,"STRONG",{});var NUr=s(vae);Nto=r(NUr,"greaselm"),NUr.forEach(t),qto=r(h$," \u2014 "),dP=n(h$,"A",{href:!0});var qUr=s(dP);jto=r(qUr,"RobertaTokenizer"),qUr.forEach(t),Dto=r(h$," or "),cP=n(h$,"A",{href:!0});var jUr=s(cP);Gto=r(jUr,"RobertaTokenizerFast"),jUr.forEach(t),Oto=r(h$," (GreaseLM model)"),h$.forEach(t),Vto=i(S),os=n(S,"LI",{});var p$=s(os);Fae=n(p$,"STRONG",{});var DUr=s(Fae);Xto=r(DUr,"herbert"),DUr.forEach(t),zto=r(p$," \u2014 "),fP=n(p$,"A",{href:!0});var GUr=s(fP);Wto=r(GUr,"HerbertTokenizer"),GUr.forEach(t),Qto=r(p$," or "),mP=n(p$,"A",{href:!0});var OUr=s(mP);Hto=r(OUr,"HerbertTokenizerFast"),OUr.forEach(t),Uto=r(p$," (HerBERT model)"),p$.forEach(t),Jto=i(S),jg=n(S,"LI",{});var zwe=s(jg);Tae=n(zwe,"STRONG",{});var VUr=s(Tae);Yto=r(VUr,"hubert"),VUr.forEach(t),Kto=r(zwe," \u2014 "),gP=n(zwe,"A",{href:!0});var XUr=s(gP);Zto=r(XUr,"Wav2Vec2CTCTokenizer"),XUr.forEach(t),eao=r(zwe," (Hubert model)"),zwe.forEach(t),oao=i(S),rs=n(S,"LI",{});var _$=s(rs);Mae=n(_$,"STRONG",{});var zUr=s(Mae);rao=r(zUr,"ibert"),zUr.forEach(t),tao=r(_$," \u2014 "),hP=n(_$,"A",{href:!0});var WUr=s(hP);aao=r(WUr,"RobertaTokenizer"),WUr.forEach(t),nao=r(_$," or "),pP=n(_$,"A",{href:!0});var QUr=s(pP);sao=r(QUr,"RobertaTokenizerFast"),QUr.forEach(t),lao=r(_$," (I-BERT model)"),_$.forEach(t),iao=i(S),ts=n(S,"LI",{});var u$=s(ts);Eae=n(u$,"STRONG",{});var HUr=s(Eae);dao=r(HUr,"layoutlm"),HUr.forEach(t),cao=r(u$," \u2014 "),_P=n(u$,"A",{href:!0});var UUr=s(_P);fao=r(UUr,"LayoutLMTokenizer"),UUr.forEach(t),mao=r(u$," or "),uP=n(u$,"A",{href:!0});var JUr=s(uP);gao=r(JUr,"LayoutLMTokenizerFast"),JUr.forEach(t),hao=r(u$," (LayoutLM model)"),u$.forEach(t),pao=i(S),as=n(S,"LI",{});var b$=s(as);Cae=n(b$,"STRONG",{});var YUr=s(Cae);_ao=r(YUr,"layoutlmv2"),YUr.forEach(t),uao=r(b$," \u2014 "),bP=n(b$,"A",{href:!0});var KUr=s(bP);bao=r(KUr,"LayoutLMv2Tokenizer"),KUr.forEach(t),vao=r(b$," or "),vP=n(b$,"A",{href:!0});var ZUr=s(vP);Fao=r(ZUr,"LayoutLMv2TokenizerFast"),ZUr.forEach(t),Tao=r(b$," (LayoutLMv2 model)"),b$.forEach(t),Mao=i(S),ns=n(S,"LI",{});var v$=s(ns);wae=n(v$,"STRONG",{});var eJr=s(wae);Eao=r(eJr,"layoutlmv3"),eJr.forEach(t),Cao=r(v$," \u2014 "),FP=n(v$,"A",{href:!0});var oJr=s(FP);wao=r(oJr,"LayoutLMv3Tokenizer"),oJr.forEach(t),Aao=r(v$," or "),TP=n(v$,"A",{href:!0});var rJr=s(TP);yao=r(rJr,"LayoutLMv3TokenizerFast"),rJr.forEach(t),Lao=r(v$," (LayoutLMv3 model)"),v$.forEach(t),xao=i(S),ss=n(S,"LI",{});var F$=s(ss);Aae=n(F$,"STRONG",{});var tJr=s(Aae);$ao=r(tJr,"layoutxlm"),tJr.forEach(t),kao=r(F$," \u2014 "),MP=n(F$,"A",{href:!0});var aJr=s(MP);Sao=r(aJr,"LayoutXLMTokenizer"),aJr.forEach(t),Rao=r(F$," or "),EP=n(F$,"A",{href:!0});var nJr=s(EP);Pao=r(nJr,"LayoutXLMTokenizerFast"),nJr.forEach(t),Bao=r(F$," (LayoutXLM model)"),F$.forEach(t),Iao=i(S),ls=n(S,"LI",{});var T$=s(ls);yae=n(T$,"STRONG",{});var sJr=s(yae);Nao=r(sJr,"led"),sJr.forEach(t),qao=r(T$," \u2014 "),CP=n(T$,"A",{href:!0});var lJr=s(CP);jao=r(lJr,"LEDTokenizer"),lJr.forEach(t),Dao=r(T$," or "),wP=n(T$,"A",{href:!0});var iJr=s(wP);Gao=r(iJr,"LEDTokenizerFast"),iJr.forEach(t),Oao=r(T$," (LED model)"),T$.forEach(t),Vao=i(S),is=n(S,"LI",{});var M$=s(is);Lae=n(M$,"STRONG",{});var dJr=s(Lae);Xao=r(dJr,"longformer"),dJr.forEach(t),zao=r(M$," \u2014 "),AP=n(M$,"A",{href:!0});var cJr=s(AP);Wao=r(cJr,"LongformerTokenizer"),cJr.forEach(t),Qao=r(M$," or "),yP=n(M$,"A",{href:!0});var fJr=s(yP);Hao=r(fJr,"LongformerTokenizerFast"),fJr.forEach(t),Uao=r(M$," (Longformer model)"),M$.forEach(t),Jao=i(S),Dg=n(S,"LI",{});var Wwe=s(Dg);xae=n(Wwe,"STRONG",{});var mJr=s(xae);Yao=r(mJr,"luke"),mJr.forEach(t),Kao=r(Wwe," \u2014 "),LP=n(Wwe,"A",{href:!0});var gJr=s(LP);Zao=r(gJr,"LukeTokenizer"),gJr.forEach(t),eno=r(Wwe," (LUKE model)"),Wwe.forEach(t),ono=i(S),ds=n(S,"LI",{});var E$=s(ds);$ae=n(E$,"STRONG",{});var hJr=s($ae);rno=r(hJr,"lxmert"),hJr.forEach(t),tno=r(E$," \u2014 "),xP=n(E$,"A",{href:!0});var pJr=s(xP);ano=r(pJr,"LxmertTokenizer"),pJr.forEach(t),nno=r(E$," or "),$P=n(E$,"A",{href:!0});var _Jr=s($P);sno=r(_Jr,"LxmertTokenizerFast"),_Jr.forEach(t),lno=r(E$," (LXMERT model)"),E$.forEach(t),ino=i(S),Gg=n(S,"LI",{});var Qwe=s(Gg);kae=n(Qwe,"STRONG",{});var uJr=s(kae);dno=r(uJr,"m2m_100"),uJr.forEach(t),cno=r(Qwe," \u2014 "),kP=n(Qwe,"A",{href:!0});var bJr=s(kP);fno=r(bJr,"M2M100Tokenizer"),bJr.forEach(t),mno=r(Qwe," (M2M100 model)"),Qwe.forEach(t),gno=i(S),Og=n(S,"LI",{});var Hwe=s(Og);Sae=n(Hwe,"STRONG",{});var vJr=s(Sae);hno=r(vJr,"marian"),vJr.forEach(t),pno=r(Hwe," \u2014 "),SP=n(Hwe,"A",{href:!0});var FJr=s(SP);_no=r(FJr,"MarianTokenizer"),FJr.forEach(t),uno=r(Hwe," (Marian model)"),Hwe.forEach(t),bno=i(S),cs=n(S,"LI",{});var C$=s(cs);Rae=n(C$,"STRONG",{});var TJr=s(Rae);vno=r(TJr,"mbart"),TJr.forEach(t),Fno=r(C$," \u2014 "),RP=n(C$,"A",{href:!0});var MJr=s(RP);Tno=r(MJr,"MBartTokenizer"),MJr.forEach(t),Mno=r(C$," or "),PP=n(C$,"A",{href:!0});var EJr=s(PP);Eno=r(EJr,"MBartTokenizerFast"),EJr.forEach(t),Cno=r(C$," (mBART model)"),C$.forEach(t),wno=i(S),fs=n(S,"LI",{});var w$=s(fs);Pae=n(w$,"STRONG",{});var CJr=s(Pae);Ano=r(CJr,"mbart50"),CJr.forEach(t),yno=r(w$," \u2014 "),BP=n(w$,"A",{href:!0});var wJr=s(BP);Lno=r(wJr,"MBart50Tokenizer"),wJr.forEach(t),xno=r(w$," or "),IP=n(w$,"A",{href:!0});var AJr=s(IP);$no=r(AJr,"MBart50TokenizerFast"),AJr.forEach(t),kno=r(w$," (mBART-50 model)"),w$.forEach(t),Sno=i(S),ms=n(S,"LI",{});var A$=s(ms);Bae=n(A$,"STRONG",{});var yJr=s(Bae);Rno=r(yJr,"megatron-bert"),yJr.forEach(t),Pno=r(A$," \u2014 "),NP=n(A$,"A",{href:!0});var LJr=s(NP);Bno=r(LJr,"BertTokenizer"),LJr.forEach(t),Ino=r(A$," or "),qP=n(A$,"A",{href:!0});var xJr=s(qP);Nno=r(xJr,"BertTokenizerFast"),xJr.forEach(t),qno=r(A$," (MegatronBert model)"),A$.forEach(t),jno=i(S),Vg=n(S,"LI",{});var Uwe=s(Vg);Iae=n(Uwe,"STRONG",{});var $Jr=s(Iae);Dno=r($Jr,"mluke"),$Jr.forEach(t),Gno=r(Uwe," \u2014 "),jP=n(Uwe,"A",{href:!0});var kJr=s(jP);Ono=r(kJr,"MLukeTokenizer"),kJr.forEach(t),Vno=r(Uwe," (mLUKE model)"),Uwe.forEach(t),Xno=i(S),gs=n(S,"LI",{});var y$=s(gs);Nae=n(y$,"STRONG",{});var SJr=s(Nae);zno=r(SJr,"mobilebert"),SJr.forEach(t),Wno=r(y$," \u2014 "),DP=n(y$,"A",{href:!0});var RJr=s(DP);Qno=r(RJr,"MobileBertTokenizer"),RJr.forEach(t),Hno=r(y$," or "),GP=n(y$,"A",{href:!0});var PJr=s(GP);Uno=r(PJr,"MobileBertTokenizerFast"),PJr.forEach(t),Jno=r(y$," (MobileBERT model)"),y$.forEach(t),Yno=i(S),hs=n(S,"LI",{});var L$=s(hs);qae=n(L$,"STRONG",{});var BJr=s(qae);Kno=r(BJr,"mpnet"),BJr.forEach(t),Zno=r(L$," \u2014 "),OP=n(L$,"A",{href:!0});var IJr=s(OP);eso=r(IJr,"MPNetTokenizer"),IJr.forEach(t),oso=r(L$," or "),VP=n(L$,"A",{href:!0});var NJr=s(VP);rso=r(NJr,"MPNetTokenizerFast"),NJr.forEach(t),tso=r(L$," (MPNet model)"),L$.forEach(t),aso=i(S),ps=n(S,"LI",{});var x$=s(ps);jae=n(x$,"STRONG",{});var qJr=s(jae);nso=r(qJr,"mt5"),qJr.forEach(t),sso=r(x$," \u2014 "),XP=n(x$,"A",{href:!0});var jJr=s(XP);lso=r(jJr,"MT5Tokenizer"),jJr.forEach(t),iso=r(x$," or "),zP=n(x$,"A",{href:!0});var DJr=s(zP);dso=r(DJr,"MT5TokenizerFast"),DJr.forEach(t),cso=r(x$," (mT5 model)"),x$.forEach(t),fso=i(S),_s=n(S,"LI",{});var $$=s(_s);Dae=n($$,"STRONG",{});var GJr=s(Dae);mso=r(GJr,"nystromformer"),GJr.forEach(t),gso=r($$," \u2014 "),WP=n($$,"A",{href:!0});var OJr=s(WP);hso=r(OJr,"AlbertTokenizer"),OJr.forEach(t),pso=r($$," or "),QP=n($$,"A",{href:!0});var VJr=s(QP);_so=r(VJr,"AlbertTokenizerFast"),VJr.forEach(t),uso=r($$," (Nystromformer model)"),$$.forEach(t),bso=i(S),us=n(S,"LI",{});var k$=s(us);Gae=n(k$,"STRONG",{});var XJr=s(Gae);vso=r(XJr,"openai-gpt"),XJr.forEach(t),Fso=r(k$," \u2014 "),HP=n(k$,"A",{href:!0});var zJr=s(HP);Tso=r(zJr,"OpenAIGPTTokenizer"),zJr.forEach(t),Mso=r(k$," or "),UP=n(k$,"A",{href:!0});var WJr=s(UP);Eso=r(WJr,"OpenAIGPTTokenizerFast"),WJr.forEach(t),Cso=r(k$," (OpenAI GPT model)"),k$.forEach(t),wso=i(S),Xg=n(S,"LI",{});var Jwe=s(Xg);Oae=n(Jwe,"STRONG",{});var QJr=s(Oae);Aso=r(QJr,"opt"),QJr.forEach(t),yso=r(Jwe," \u2014 "),JP=n(Jwe,"A",{href:!0});var HJr=s(JP);Lso=r(HJr,"GPT2Tokenizer"),HJr.forEach(t),xso=r(Jwe," (OPT model)"),Jwe.forEach(t),$so=i(S),bs=n(S,"LI",{});var S$=s(bs);Vae=n(S$,"STRONG",{});var UJr=s(Vae);kso=r(UJr,"pegasus"),UJr.forEach(t),Sso=r(S$," \u2014 "),YP=n(S$,"A",{href:!0});var JJr=s(YP);Rso=r(JJr,"PegasusTokenizer"),JJr.forEach(t),Pso=r(S$," or "),KP=n(S$,"A",{href:!0});var YJr=s(KP);Bso=r(YJr,"PegasusTokenizerFast"),YJr.forEach(t),Iso=r(S$," (Pegasus model)"),S$.forEach(t),Nso=i(S),zg=n(S,"LI",{});var Ywe=s(zg);Xae=n(Ywe,"STRONG",{});var KJr=s(Xae);qso=r(KJr,"perceiver"),KJr.forEach(t),jso=r(Ywe," \u2014 "),ZP=n(Ywe,"A",{href:!0});var ZJr=s(ZP);Dso=r(ZJr,"PerceiverTokenizer"),ZJr.forEach(t),Gso=r(Ywe," (Perceiver model)"),Ywe.forEach(t),Oso=i(S),Wg=n(S,"LI",{});var Kwe=s(Wg);zae=n(Kwe,"STRONG",{});var eYr=s(zae);Vso=r(eYr,"phobert"),eYr.forEach(t),Xso=r(Kwe," \u2014 "),eB=n(Kwe,"A",{href:!0});var oYr=s(eB);zso=r(oYr,"PhobertTokenizer"),oYr.forEach(t),Wso=r(Kwe," (PhoBERT model)"),Kwe.forEach(t),Qso=i(S),Qg=n(S,"LI",{});var Zwe=s(Qg);Wae=n(Zwe,"STRONG",{});var rYr=s(Wae);Hso=r(rYr,"plbart"),rYr.forEach(t),Uso=r(Zwe," \u2014 "),oB=n(Zwe,"A",{href:!0});var tYr=s(oB);Jso=r(tYr,"PLBartTokenizer"),tYr.forEach(t),Yso=r(Zwe," (PLBart model)"),Zwe.forEach(t),Kso=i(S),Hg=n(S,"LI",{});var e0e=s(Hg);Qae=n(e0e,"STRONG",{});var aYr=s(Qae);Zso=r(aYr,"prophetnet"),aYr.forEach(t),elo=r(e0e," \u2014 "),rB=n(e0e,"A",{href:!0});var nYr=s(rB);olo=r(nYr,"ProphetNetTokenizer"),nYr.forEach(t),rlo=r(e0e," (ProphetNet model)"),e0e.forEach(t),tlo=i(S),vs=n(S,"LI",{});var R$=s(vs);Hae=n(R$,"STRONG",{});var sYr=s(Hae);alo=r(sYr,"qdqbert"),sYr.forEach(t),nlo=r(R$," \u2014 "),tB=n(R$,"A",{href:!0});var lYr=s(tB);slo=r(lYr,"BertTokenizer"),lYr.forEach(t),llo=r(R$," or "),aB=n(R$,"A",{href:!0});var iYr=s(aB);ilo=r(iYr,"BertTokenizerFast"),iYr.forEach(t),dlo=r(R$," (QDQBert model)"),R$.forEach(t),clo=i(S),Ug=n(S,"LI",{});var o0e=s(Ug);Uae=n(o0e,"STRONG",{});var dYr=s(Uae);flo=r(dYr,"rag"),dYr.forEach(t),mlo=r(o0e," \u2014 "),nB=n(o0e,"A",{href:!0});var cYr=s(nB);glo=r(cYr,"RagTokenizer"),cYr.forEach(t),hlo=r(o0e," (RAG model)"),o0e.forEach(t),plo=i(S),Fs=n(S,"LI",{});var P$=s(Fs);Jae=n(P$,"STRONG",{});var fYr=s(Jae);_lo=r(fYr,"realm"),fYr.forEach(t),ulo=r(P$," \u2014 "),sB=n(P$,"A",{href:!0});var mYr=s(sB);blo=r(mYr,"RealmTokenizer"),mYr.forEach(t),vlo=r(P$," or "),lB=n(P$,"A",{href:!0});var gYr=s(lB);Flo=r(gYr,"RealmTokenizerFast"),gYr.forEach(t),Tlo=r(P$," (Realm model)"),P$.forEach(t),Mlo=i(S),Ts=n(S,"LI",{});var B$=s(Ts);Yae=n(B$,"STRONG",{});var hYr=s(Yae);Elo=r(hYr,"reformer"),hYr.forEach(t),Clo=r(B$," \u2014 "),iB=n(B$,"A",{href:!0});var pYr=s(iB);wlo=r(pYr,"ReformerTokenizer"),pYr.forEach(t),Alo=r(B$," or "),dB=n(B$,"A",{href:!0});var _Yr=s(dB);ylo=r(_Yr,"ReformerTokenizerFast"),_Yr.forEach(t),Llo=r(B$," (Reformer model)"),B$.forEach(t),xlo=i(S),Ms=n(S,"LI",{});var I$=s(Ms);Kae=n(I$,"STRONG",{});var uYr=s(Kae);$lo=r(uYr,"rembert"),uYr.forEach(t),klo=r(I$," \u2014 "),cB=n(I$,"A",{href:!0});var bYr=s(cB);Slo=r(bYr,"RemBertTokenizer"),bYr.forEach(t),Rlo=r(I$," or "),fB=n(I$,"A",{href:!0});var vYr=s(fB);Plo=r(vYr,"RemBertTokenizerFast"),vYr.forEach(t),Blo=r(I$," (RemBERT model)"),I$.forEach(t),Ilo=i(S),Es=n(S,"LI",{});var N$=s(Es);Zae=n(N$,"STRONG",{});var FYr=s(Zae);Nlo=r(FYr,"retribert"),FYr.forEach(t),qlo=r(N$," \u2014 "),mB=n(N$,"A",{href:!0});var TYr=s(mB);jlo=r(TYr,"RetriBertTokenizer"),TYr.forEach(t),Dlo=r(N$," or "),gB=n(N$,"A",{href:!0});var MYr=s(gB);Glo=r(MYr,"RetriBertTokenizerFast"),MYr.forEach(t),Olo=r(N$," (RetriBERT model)"),N$.forEach(t),Vlo=i(S),Cs=n(S,"LI",{});var q$=s(Cs);ene=n(q$,"STRONG",{});var EYr=s(ene);Xlo=r(EYr,"roberta"),EYr.forEach(t),zlo=r(q$," \u2014 "),hB=n(q$,"A",{href:!0});var CYr=s(hB);Wlo=r(CYr,"RobertaTokenizer"),CYr.forEach(t),Qlo=r(q$," or "),pB=n(q$,"A",{href:!0});var wYr=s(pB);Hlo=r(wYr,"RobertaTokenizerFast"),wYr.forEach(t),Ulo=r(q$," (RoBERTa model)"),q$.forEach(t),Jlo=i(S),ws=n(S,"LI",{});var j$=s(ws);one=n(j$,"STRONG",{});var AYr=s(one);Ylo=r(AYr,"roformer"),AYr.forEach(t),Klo=r(j$," \u2014 "),_B=n(j$,"A",{href:!0});var yYr=s(_B);Zlo=r(yYr,"RoFormerTokenizer"),yYr.forEach(t),eio=r(j$," or "),uB=n(j$,"A",{href:!0});var LYr=s(uB);oio=r(LYr,"RoFormerTokenizerFast"),LYr.forEach(t),rio=r(j$," (RoFormer model)"),j$.forEach(t),tio=i(S),Jg=n(S,"LI",{});var r0e=s(Jg);rne=n(r0e,"STRONG",{});var xYr=s(rne);aio=r(xYr,"speech_to_text"),xYr.forEach(t),nio=r(r0e," \u2014 "),bB=n(r0e,"A",{href:!0});var $Yr=s(bB);sio=r($Yr,"Speech2TextTokenizer"),$Yr.forEach(t),lio=r(r0e," (Speech2Text model)"),r0e.forEach(t),iio=i(S),Yg=n(S,"LI",{});var t0e=s(Yg);tne=n(t0e,"STRONG",{});var kYr=s(tne);dio=r(kYr,"speech_to_text_2"),kYr.forEach(t),cio=r(t0e," \u2014 "),vB=n(t0e,"A",{href:!0});var SYr=s(vB);fio=r(SYr,"Speech2Text2Tokenizer"),SYr.forEach(t),mio=r(t0e," (Speech2Text2 model)"),t0e.forEach(t),gio=i(S),As=n(S,"LI",{});var D$=s(As);ane=n(D$,"STRONG",{});var RYr=s(ane);hio=r(RYr,"splinter"),RYr.forEach(t),pio=r(D$," \u2014 "),FB=n(D$,"A",{href:!0});var PYr=s(FB);_io=r(PYr,"SplinterTokenizer"),PYr.forEach(t),uio=r(D$," or "),TB=n(D$,"A",{href:!0});var BYr=s(TB);bio=r(BYr,"SplinterTokenizerFast"),BYr.forEach(t),vio=r(D$," (Splinter model)"),D$.forEach(t),Fio=i(S),ys=n(S,"LI",{});var G$=s(ys);nne=n(G$,"STRONG",{});var IYr=s(nne);Tio=r(IYr,"squeezebert"),IYr.forEach(t),Mio=r(G$," \u2014 "),MB=n(G$,"A",{href:!0});var NYr=s(MB);Eio=r(NYr,"SqueezeBertTokenizer"),NYr.forEach(t),Cio=r(G$," or "),EB=n(G$,"A",{href:!0});var qYr=s(EB);wio=r(qYr,"SqueezeBertTokenizerFast"),qYr.forEach(t),Aio=r(G$," (SqueezeBERT model)"),G$.forEach(t),yio=i(S),Ls=n(S,"LI",{});var O$=s(Ls);sne=n(O$,"STRONG",{});var jYr=s(sne);Lio=r(jYr,"t5"),jYr.forEach(t),xio=r(O$," \u2014 "),CB=n(O$,"A",{href:!0});var DYr=s(CB);$io=r(DYr,"T5Tokenizer"),DYr.forEach(t),kio=r(O$," or "),wB=n(O$,"A",{href:!0});var GYr=s(wB);Sio=r(GYr,"T5TokenizerFast"),GYr.forEach(t),Rio=r(O$," (T5 model)"),O$.forEach(t),Pio=i(S),Kg=n(S,"LI",{});var a0e=s(Kg);lne=n(a0e,"STRONG",{});var OYr=s(lne);Bio=r(OYr,"tapas"),OYr.forEach(t),Iio=r(a0e," \u2014 "),AB=n(a0e,"A",{href:!0});var VYr=s(AB);Nio=r(VYr,"TapasTokenizer"),VYr.forEach(t),qio=r(a0e," (TAPAS model)"),a0e.forEach(t),jio=i(S),Zg=n(S,"LI",{});var n0e=s(Zg);ine=n(n0e,"STRONG",{});var XYr=s(ine);Dio=r(XYr,"tapex"),XYr.forEach(t),Gio=r(n0e," \u2014 "),yB=n(n0e,"A",{href:!0});var zYr=s(yB);Oio=r(zYr,"TapexTokenizer"),zYr.forEach(t),Vio=r(n0e," (TAPEX model)"),n0e.forEach(t),Xio=i(S),eh=n(S,"LI",{});var s0e=s(eh);dne=n(s0e,"STRONG",{});var WYr=s(dne);zio=r(WYr,"transfo-xl"),WYr.forEach(t),Wio=r(s0e," \u2014 "),LB=n(s0e,"A",{href:!0});var QYr=s(LB);Qio=r(QYr,"TransfoXLTokenizer"),QYr.forEach(t),Hio=r(s0e," (Transformer-XL model)"),s0e.forEach(t),Uio=i(S),xs=n(S,"LI",{});var V$=s(xs);cne=n(V$,"STRONG",{});var HYr=s(cne);Jio=r(HYr,"visual_bert"),HYr.forEach(t),Yio=r(V$," \u2014 "),xB=n(V$,"A",{href:!0});var UYr=s(xB);Kio=r(UYr,"BertTokenizer"),UYr.forEach(t),Zio=r(V$," or "),$B=n(V$,"A",{href:!0});var JYr=s($B);edo=r(JYr,"BertTokenizerFast"),JYr.forEach(t),odo=r(V$," (VisualBert model)"),V$.forEach(t),rdo=i(S),oh=n(S,"LI",{});var l0e=s(oh);fne=n(l0e,"STRONG",{});var YYr=s(fne);tdo=r(YYr,"wav2vec2"),YYr.forEach(t),ado=r(l0e," \u2014 "),kB=n(l0e,"A",{href:!0});var KYr=s(kB);ndo=r(KYr,"Wav2Vec2CTCTokenizer"),KYr.forEach(t),sdo=r(l0e," (Wav2Vec2 model)"),l0e.forEach(t),ldo=i(S),rh=n(S,"LI",{});var i0e=s(rh);mne=n(i0e,"STRONG",{});var ZYr=s(mne);ido=r(ZYr,"wav2vec2-conformer"),ZYr.forEach(t),ddo=r(i0e," \u2014 "),SB=n(i0e,"A",{href:!0});var eKr=s(SB);cdo=r(eKr,"Wav2Vec2CTCTokenizer"),eKr.forEach(t),fdo=r(i0e," (Wav2Vec2-Conformer model)"),i0e.forEach(t),mdo=i(S),th=n(S,"LI",{});var d0e=s(th);gne=n(d0e,"STRONG",{});var oKr=s(gne);gdo=r(oKr,"wav2vec2_phoneme"),oKr.forEach(t),hdo=r(d0e," \u2014 "),RB=n(d0e,"A",{href:!0});var rKr=s(RB);pdo=r(rKr,"Wav2Vec2PhonemeCTCTokenizer"),rKr.forEach(t),_do=r(d0e," (Wav2Vec2Phoneme model)"),d0e.forEach(t),udo=i(S),$s=n(S,"LI",{});var X$=s($s);hne=n(X$,"STRONG",{});var tKr=s(hne);bdo=r(tKr,"xglm"),tKr.forEach(t),vdo=r(X$," \u2014 "),PB=n(X$,"A",{href:!0});var aKr=s(PB);Fdo=r(aKr,"XGLMTokenizer"),aKr.forEach(t),Tdo=r(X$," or "),BB=n(X$,"A",{href:!0});var nKr=s(BB);Mdo=r(nKr,"XGLMTokenizerFast"),nKr.forEach(t),Edo=r(X$," (XGLM model)"),X$.forEach(t),Cdo=i(S),ah=n(S,"LI",{});var c0e=s(ah);pne=n(c0e,"STRONG",{});var sKr=s(pne);wdo=r(sKr,"xlm"),sKr.forEach(t),Ado=r(c0e," \u2014 "),IB=n(c0e,"A",{href:!0});var lKr=s(IB);ydo=r(lKr,"XLMTokenizer"),lKr.forEach(t),Ldo=r(c0e," (XLM model)"),c0e.forEach(t),xdo=i(S),nh=n(S,"LI",{});var f0e=s(nh);_ne=n(f0e,"STRONG",{});var iKr=s(_ne);$do=r(iKr,"xlm-prophetnet"),iKr.forEach(t),kdo=r(f0e," \u2014 "),NB=n(f0e,"A",{href:!0});var dKr=s(NB);Sdo=r(dKr,"XLMProphetNetTokenizer"),dKr.forEach(t),Rdo=r(f0e," (XLMProphetNet model)"),f0e.forEach(t),Pdo=i(S),ks=n(S,"LI",{});var z$=s(ks);une=n(z$,"STRONG",{});var cKr=s(une);Bdo=r(cKr,"xlm-roberta"),cKr.forEach(t),Ido=r(z$," \u2014 "),qB=n(z$,"A",{href:!0});var fKr=s(qB);Ndo=r(fKr,"XLMRobertaTokenizer"),fKr.forEach(t),qdo=r(z$," or "),jB=n(z$,"A",{href:!0});var mKr=s(jB);jdo=r(mKr,"XLMRobertaTokenizerFast"),mKr.forEach(t),Ddo=r(z$," (XLM-RoBERTa model)"),z$.forEach(t),Gdo=i(S),Ss=n(S,"LI",{});var W$=s(Ss);bne=n(W$,"STRONG",{});var gKr=s(bne);Odo=r(gKr,"xlm-roberta-xl"),gKr.forEach(t),Vdo=r(W$," \u2014 "),DB=n(W$,"A",{href:!0});var hKr=s(DB);Xdo=r(hKr,"RobertaTokenizer"),hKr.forEach(t),zdo=r(W$," or "),GB=n(W$,"A",{href:!0});var pKr=s(GB);Wdo=r(pKr,"RobertaTokenizerFast"),pKr.forEach(t),Qdo=r(W$," (XLM-RoBERTa-XL model)"),W$.forEach(t),Hdo=i(S),Rs=n(S,"LI",{});var Q$=s(Rs);vne=n(Q$,"STRONG",{});var _Kr=s(vne);Udo=r(_Kr,"xlnet"),_Kr.forEach(t),Jdo=r(Q$," \u2014 "),OB=n(Q$,"A",{href:!0});var uKr=s(OB);Ydo=r(uKr,"XLNetTokenizer"),uKr.forEach(t),Kdo=r(Q$," or "),VB=n(Q$,"A",{href:!0});var bKr=s(VB);Zdo=r(bKr,"XLNetTokenizerFast"),bKr.forEach(t),eco=r(Q$," (XLNet model)"),Q$.forEach(t),oco=i(S),Ps=n(S,"LI",{});var H$=s(Ps);Fne=n(H$,"STRONG",{});var vKr=s(Fne);rco=r(vKr,"yoso"),vKr.forEach(t),tco=r(H$," \u2014 "),XB=n(H$,"A",{href:!0});var FKr=s(XB);aco=r(FKr,"AlbertTokenizer"),FKr.forEach(t),nco=r(H$," or "),zB=n(H$,"A",{href:!0});var TKr=s(zB);sco=r(TKr,"AlbertTokenizerFast"),TKr.forEach(t),lco=r(H$," (YOSO model)"),H$.forEach(t),S.forEach(t),ico=i(js),T(sh.$$.fragment,js),js.forEach(t),dco=i(qs),lh=n(qs,"DIV",{class:!0});var kDe=s(lh);T(WA.$$.fragment,kDe),cco=i(kDe),Tne=n(kDe,"P",{});var MKr=s(Tne);fco=r(MKr,"Register a new tokenizer in this mapping."),MKr.forEach(t),kDe.forEach(t),qs.forEach(t),Sqe=i(f),Ei=n(f,"H2",{class:!0});var SDe=s(Ei);ih=n(SDe,"A",{id:!0,class:!0,href:!0});var EKr=s(ih);Mne=n(EKr,"SPAN",{});var CKr=s(Mne);T(QA.$$.fragment,CKr),CKr.forEach(t),EKr.forEach(t),mco=i(SDe),Ene=n(SDe,"SPAN",{});var wKr=s(Ene);gco=r(wKr,"AutoFeatureExtractor"),wKr.forEach(t),SDe.forEach(t),Rqe=i(f),Ao=n(f,"DIV",{class:!0});var Ds=s(Ao);T(HA.$$.fragment,Ds),hco=i(Ds),UA=n(Ds,"P",{});var RDe=s(UA);pco=r(RDe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),WB=n(RDe,"A",{href:!0});var AKr=s(WB);_co=r(AKr,"AutoFeatureExtractor.from_pretrained()"),AKr.forEach(t),uco=r(RDe," class method."),RDe.forEach(t),bco=i(Ds),JA=n(Ds,"P",{});var PDe=s(JA);vco=r(PDe,"This class cannot be instantiated directly using "),Cne=n(PDe,"CODE",{});var yKr=s(Cne);Fco=r(yKr,"__init__()"),yKr.forEach(t),Tco=r(PDe," (throws an error)."),PDe.forEach(t),Mco=i(Ds),He=n(Ds,"DIV",{class:!0});var Zt=s(He);T(YA.$$.fragment,Zt),Eco=i(Zt),wne=n(Zt,"P",{});var LKr=s(wne);Cco=r(LKr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),LKr.forEach(t),wco=i(Zt),ya=n(Zt,"P",{});var Iw=s(ya);Aco=r(Iw,"The feature extractor class to instantiate is selected based on the "),Ane=n(Iw,"CODE",{});var xKr=s(Ane);yco=r(xKr,"model_type"),xKr.forEach(t),Lco=r(Iw,` property of the config object
(either passed as an argument or loaded from `),yne=n(Iw,"CODE",{});var $Kr=s(yne);xco=r($Kr,"pretrained_model_name_or_path"),$Kr.forEach(t),$co=r(Iw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Lne=n(Iw,"CODE",{});var kKr=s(Lne);kco=r(kKr,"pretrained_model_name_or_path"),kKr.forEach(t),Sco=r(Iw,":"),Iw.forEach(t),Rco=i(Zt),Y=n(Zt,"UL",{});var Z=s(Y);dh=n(Z,"LI",{});var m0e=s(dh);xne=n(m0e,"STRONG",{});var SKr=s(xne);Pco=r(SKr,"beit"),SKr.forEach(t),Bco=r(m0e," \u2014 "),QB=n(m0e,"A",{href:!0});var RKr=s(QB);Ico=r(RKr,"BeitFeatureExtractor"),RKr.forEach(t),Nco=r(m0e," (BEiT model)"),m0e.forEach(t),qco=i(Z),ch=n(Z,"LI",{});var g0e=s(ch);$ne=n(g0e,"STRONG",{});var PKr=s($ne);jco=r(PKr,"clip"),PKr.forEach(t),Dco=r(g0e," \u2014 "),HB=n(g0e,"A",{href:!0});var BKr=s(HB);Gco=r(BKr,"CLIPFeatureExtractor"),BKr.forEach(t),Oco=r(g0e," (CLIP model)"),g0e.forEach(t),Vco=i(Z),fh=n(Z,"LI",{});var h0e=s(fh);kne=n(h0e,"STRONG",{});var IKr=s(kne);Xco=r(IKr,"convnext"),IKr.forEach(t),zco=r(h0e," \u2014 "),UB=n(h0e,"A",{href:!0});var NKr=s(UB);Wco=r(NKr,"ConvNextFeatureExtractor"),NKr.forEach(t),Qco=r(h0e," (ConvNext model)"),h0e.forEach(t),Hco=i(Z),mh=n(Z,"LI",{});var p0e=s(mh);Sne=n(p0e,"STRONG",{});var qKr=s(Sne);Uco=r(qKr,"cvt"),qKr.forEach(t),Jco=r(p0e," \u2014 "),JB=n(p0e,"A",{href:!0});var jKr=s(JB);Yco=r(jKr,"ConvNextFeatureExtractor"),jKr.forEach(t),Kco=r(p0e," (CvT model)"),p0e.forEach(t),Zco=i(Z),gh=n(Z,"LI",{});var _0e=s(gh);Rne=n(_0e,"STRONG",{});var DKr=s(Rne);efo=r(DKr,"data2vec-audio"),DKr.forEach(t),ofo=r(_0e," \u2014 "),YB=n(_0e,"A",{href:!0});var GKr=s(YB);rfo=r(GKr,"Wav2Vec2FeatureExtractor"),GKr.forEach(t),tfo=r(_0e," (Data2VecAudio model)"),_0e.forEach(t),afo=i(Z),hh=n(Z,"LI",{});var u0e=s(hh);Pne=n(u0e,"STRONG",{});var OKr=s(Pne);nfo=r(OKr,"data2vec-vision"),OKr.forEach(t),sfo=r(u0e," \u2014 "),KB=n(u0e,"A",{href:!0});var VKr=s(KB);lfo=r(VKr,"BeitFeatureExtractor"),VKr.forEach(t),ifo=r(u0e," (Data2VecVision model)"),u0e.forEach(t),dfo=i(Z),ph=n(Z,"LI",{});var b0e=s(ph);Bne=n(b0e,"STRONG",{});var XKr=s(Bne);cfo=r(XKr,"deit"),XKr.forEach(t),ffo=r(b0e," \u2014 "),ZB=n(b0e,"A",{href:!0});var zKr=s(ZB);mfo=r(zKr,"DeiTFeatureExtractor"),zKr.forEach(t),gfo=r(b0e," (DeiT model)"),b0e.forEach(t),hfo=i(Z),_h=n(Z,"LI",{});var v0e=s(_h);Ine=n(v0e,"STRONG",{});var WKr=s(Ine);pfo=r(WKr,"detr"),WKr.forEach(t),_fo=r(v0e," \u2014 "),eI=n(v0e,"A",{href:!0});var QKr=s(eI);ufo=r(QKr,"DetrFeatureExtractor"),QKr.forEach(t),bfo=r(v0e," (DETR model)"),v0e.forEach(t),vfo=i(Z),uh=n(Z,"LI",{});var F0e=s(uh);Nne=n(F0e,"STRONG",{});var HKr=s(Nne);Ffo=r(HKr,"dpt"),HKr.forEach(t),Tfo=r(F0e," \u2014 "),oI=n(F0e,"A",{href:!0});var UKr=s(oI);Mfo=r(UKr,"DPTFeatureExtractor"),UKr.forEach(t),Efo=r(F0e," (DPT model)"),F0e.forEach(t),Cfo=i(Z),bh=n(Z,"LI",{});var T0e=s(bh);qne=n(T0e,"STRONG",{});var JKr=s(qne);wfo=r(JKr,"flava"),JKr.forEach(t),Afo=r(T0e," \u2014 "),rI=n(T0e,"A",{href:!0});var YKr=s(rI);yfo=r(YKr,"FlavaFeatureExtractor"),YKr.forEach(t),Lfo=r(T0e," (Flava model)"),T0e.forEach(t),xfo=i(Z),vh=n(Z,"LI",{});var M0e=s(vh);jne=n(M0e,"STRONG",{});var KKr=s(jne);$fo=r(KKr,"glpn"),KKr.forEach(t),kfo=r(M0e," \u2014 "),tI=n(M0e,"A",{href:!0});var ZKr=s(tI);Sfo=r(ZKr,"GLPNFeatureExtractor"),ZKr.forEach(t),Rfo=r(M0e," (GLPN model)"),M0e.forEach(t),Pfo=i(Z),Fh=n(Z,"LI",{});var E0e=s(Fh);Dne=n(E0e,"STRONG",{});var eZr=s(Dne);Bfo=r(eZr,"greaselm"),eZr.forEach(t),Ifo=r(E0e," \u2014 "),aI=n(E0e,"A",{href:!0});var oZr=s(aI);Nfo=r(oZr,"GreaseLMFeatureExtractor"),oZr.forEach(t),qfo=r(E0e," (GreaseLM model)"),E0e.forEach(t),jfo=i(Z),Th=n(Z,"LI",{});var C0e=s(Th);Gne=n(C0e,"STRONG",{});var rZr=s(Gne);Dfo=r(rZr,"hubert"),rZr.forEach(t),Gfo=r(C0e," \u2014 "),nI=n(C0e,"A",{href:!0});var tZr=s(nI);Ofo=r(tZr,"Wav2Vec2FeatureExtractor"),tZr.forEach(t),Vfo=r(C0e," (Hubert model)"),C0e.forEach(t),Xfo=i(Z),Mh=n(Z,"LI",{});var w0e=s(Mh);One=n(w0e,"STRONG",{});var aZr=s(One);zfo=r(aZr,"imagegpt"),aZr.forEach(t),Wfo=r(w0e," \u2014 "),sI=n(w0e,"A",{href:!0});var nZr=s(sI);Qfo=r(nZr,"ImageGPTFeatureExtractor"),nZr.forEach(t),Hfo=r(w0e," (ImageGPT model)"),w0e.forEach(t),Ufo=i(Z),Eh=n(Z,"LI",{});var A0e=s(Eh);Vne=n(A0e,"STRONG",{});var sZr=s(Vne);Jfo=r(sZr,"layoutlmv2"),sZr.forEach(t),Yfo=r(A0e," \u2014 "),lI=n(A0e,"A",{href:!0});var lZr=s(lI);Kfo=r(lZr,"LayoutLMv2FeatureExtractor"),lZr.forEach(t),Zfo=r(A0e," (LayoutLMv2 model)"),A0e.forEach(t),emo=i(Z),Ch=n(Z,"LI",{});var y0e=s(Ch);Xne=n(y0e,"STRONG",{});var iZr=s(Xne);omo=r(iZr,"layoutlmv3"),iZr.forEach(t),rmo=r(y0e," \u2014 "),iI=n(y0e,"A",{href:!0});var dZr=s(iI);tmo=r(dZr,"LayoutLMv3FeatureExtractor"),dZr.forEach(t),amo=r(y0e," (LayoutLMv3 model)"),y0e.forEach(t),nmo=i(Z),wh=n(Z,"LI",{});var L0e=s(wh);zne=n(L0e,"STRONG",{});var cZr=s(zne);smo=r(cZr,"maskformer"),cZr.forEach(t),lmo=r(L0e," \u2014 "),dI=n(L0e,"A",{href:!0});var fZr=s(dI);imo=r(fZr,"MaskFormerFeatureExtractor"),fZr.forEach(t),dmo=r(L0e," (MaskFormer model)"),L0e.forEach(t),cmo=i(Z),Ah=n(Z,"LI",{});var x0e=s(Ah);Wne=n(x0e,"STRONG",{});var mZr=s(Wne);fmo=r(mZr,"perceiver"),mZr.forEach(t),mmo=r(x0e," \u2014 "),cI=n(x0e,"A",{href:!0});var gZr=s(cI);gmo=r(gZr,"PerceiverFeatureExtractor"),gZr.forEach(t),hmo=r(x0e," (Perceiver model)"),x0e.forEach(t),pmo=i(Z),yh=n(Z,"LI",{});var $0e=s(yh);Qne=n($0e,"STRONG",{});var hZr=s(Qne);_mo=r(hZr,"poolformer"),hZr.forEach(t),umo=r($0e," \u2014 "),fI=n($0e,"A",{href:!0});var pZr=s(fI);bmo=r(pZr,"PoolFormerFeatureExtractor"),pZr.forEach(t),vmo=r($0e," (PoolFormer model)"),$0e.forEach(t),Fmo=i(Z),Lh=n(Z,"LI",{});var k0e=s(Lh);Hne=n(k0e,"STRONG",{});var _Zr=s(Hne);Tmo=r(_Zr,"regnet"),_Zr.forEach(t),Mmo=r(k0e," \u2014 "),mI=n(k0e,"A",{href:!0});var uZr=s(mI);Emo=r(uZr,"ConvNextFeatureExtractor"),uZr.forEach(t),Cmo=r(k0e," (RegNet model)"),k0e.forEach(t),wmo=i(Z),xh=n(Z,"LI",{});var S0e=s(xh);Une=n(S0e,"STRONG",{});var bZr=s(Une);Amo=r(bZr,"resnet"),bZr.forEach(t),ymo=r(S0e," \u2014 "),gI=n(S0e,"A",{href:!0});var vZr=s(gI);Lmo=r(vZr,"ConvNextFeatureExtractor"),vZr.forEach(t),xmo=r(S0e," (ResNet model)"),S0e.forEach(t),$mo=i(Z),$h=n(Z,"LI",{});var R0e=s($h);Jne=n(R0e,"STRONG",{});var FZr=s(Jne);kmo=r(FZr,"segformer"),FZr.forEach(t),Smo=r(R0e," \u2014 "),hI=n(R0e,"A",{href:!0});var TZr=s(hI);Rmo=r(TZr,"SegformerFeatureExtractor"),TZr.forEach(t),Pmo=r(R0e," (SegFormer model)"),R0e.forEach(t),Bmo=i(Z),kh=n(Z,"LI",{});var P0e=s(kh);Yne=n(P0e,"STRONG",{});var MZr=s(Yne);Imo=r(MZr,"speech_to_text"),MZr.forEach(t),Nmo=r(P0e," \u2014 "),pI=n(P0e,"A",{href:!0});var EZr=s(pI);qmo=r(EZr,"Speech2TextFeatureExtractor"),EZr.forEach(t),jmo=r(P0e," (Speech2Text model)"),P0e.forEach(t),Dmo=i(Z),Sh=n(Z,"LI",{});var B0e=s(Sh);Kne=n(B0e,"STRONG",{});var CZr=s(Kne);Gmo=r(CZr,"swin"),CZr.forEach(t),Omo=r(B0e," \u2014 "),_I=n(B0e,"A",{href:!0});var wZr=s(_I);Vmo=r(wZr,"ViTFeatureExtractor"),wZr.forEach(t),Xmo=r(B0e," (Swin model)"),B0e.forEach(t),zmo=i(Z),Rh=n(Z,"LI",{});var I0e=s(Rh);Zne=n(I0e,"STRONG",{});var AZr=s(Zne);Wmo=r(AZr,"van"),AZr.forEach(t),Qmo=r(I0e," \u2014 "),uI=n(I0e,"A",{href:!0});var yZr=s(uI);Hmo=r(yZr,"ConvNextFeatureExtractor"),yZr.forEach(t),Umo=r(I0e," (VAN model)"),I0e.forEach(t),Jmo=i(Z),Ph=n(Z,"LI",{});var N0e=s(Ph);ese=n(N0e,"STRONG",{});var LZr=s(ese);Ymo=r(LZr,"vit"),LZr.forEach(t),Kmo=r(N0e," \u2014 "),bI=n(N0e,"A",{href:!0});var xZr=s(bI);Zmo=r(xZr,"ViTFeatureExtractor"),xZr.forEach(t),ego=r(N0e," (ViT model)"),N0e.forEach(t),ogo=i(Z),Bh=n(Z,"LI",{});var q0e=s(Bh);ose=n(q0e,"STRONG",{});var $Zr=s(ose);rgo=r($Zr,"vit_mae"),$Zr.forEach(t),tgo=r(q0e," \u2014 "),vI=n(q0e,"A",{href:!0});var kZr=s(vI);ago=r(kZr,"ViTFeatureExtractor"),kZr.forEach(t),ngo=r(q0e," (ViTMAE model)"),q0e.forEach(t),sgo=i(Z),Ih=n(Z,"LI",{});var j0e=s(Ih);rse=n(j0e,"STRONG",{});var SZr=s(rse);lgo=r(SZr,"wav2vec2"),SZr.forEach(t),igo=r(j0e," \u2014 "),FI=n(j0e,"A",{href:!0});var RZr=s(FI);dgo=r(RZr,"Wav2Vec2FeatureExtractor"),RZr.forEach(t),cgo=r(j0e," (Wav2Vec2 model)"),j0e.forEach(t),fgo=i(Z),Nh=n(Z,"LI",{});var D0e=s(Nh);tse=n(D0e,"STRONG",{});var PZr=s(tse);mgo=r(PZr,"wav2vec2-conformer"),PZr.forEach(t),ggo=r(D0e," \u2014 "),TI=n(D0e,"A",{href:!0});var BZr=s(TI);hgo=r(BZr,"Wav2Vec2FeatureExtractor"),BZr.forEach(t),pgo=r(D0e," (Wav2Vec2-Conformer model)"),D0e.forEach(t),_go=i(Z),qh=n(Z,"LI",{});var G0e=s(qh);ase=n(G0e,"STRONG",{});var IZr=s(ase);ugo=r(IZr,"yolos"),IZr.forEach(t),bgo=r(G0e," \u2014 "),MI=n(G0e,"A",{href:!0});var NZr=s(MI);vgo=r(NZr,"YolosFeatureExtractor"),NZr.forEach(t),Fgo=r(G0e," (YOLOS model)"),G0e.forEach(t),Z.forEach(t),Tgo=i(Zt),T(jh.$$.fragment,Zt),Mgo=i(Zt),T(Dh.$$.fragment,Zt),Zt.forEach(t),Ego=i(Ds),Gh=n(Ds,"DIV",{class:!0});var BDe=s(Gh);T(KA.$$.fragment,BDe),Cgo=i(BDe),nse=n(BDe,"P",{});var qZr=s(nse);wgo=r(qZr,"Register a new feature extractor for this class."),qZr.forEach(t),BDe.forEach(t),Ds.forEach(t),Pqe=i(f),Ci=n(f,"H2",{class:!0});var IDe=s(Ci);Oh=n(IDe,"A",{id:!0,class:!0,href:!0});var jZr=s(Oh);sse=n(jZr,"SPAN",{});var DZr=s(sse);T(ZA.$$.fragment,DZr),DZr.forEach(t),jZr.forEach(t),Ago=i(IDe),lse=n(IDe,"SPAN",{});var GZr=s(lse);ygo=r(GZr,"AutoProcessor"),GZr.forEach(t),IDe.forEach(t),Bqe=i(f),yo=n(f,"DIV",{class:!0});var Gs=s(yo);T(ey.$$.fragment,Gs),Lgo=i(Gs),oy=n(Gs,"P",{});var NDe=s(oy);xgo=r(NDe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),EI=n(NDe,"A",{href:!0});var OZr=s(EI);$go=r(OZr,"AutoProcessor.from_pretrained()"),OZr.forEach(t),kgo=r(NDe," class method."),NDe.forEach(t),Sgo=i(Gs),ry=n(Gs,"P",{});var qDe=s(ry);Rgo=r(qDe,"This class cannot be instantiated directly using "),ise=n(qDe,"CODE",{});var VZr=s(ise);Pgo=r(VZr,"__init__()"),VZr.forEach(t),Bgo=r(qDe," (throws an error)."),qDe.forEach(t),Igo=i(Gs),Ue=n(Gs,"DIV",{class:!0});var ea=s(Ue);T(ty.$$.fragment,ea),Ngo=i(ea),dse=n(ea,"P",{});var XZr=s(dse);qgo=r(XZr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),XZr.forEach(t),jgo=i(ea),wi=n(ea,"P",{});var LZ=s(wi);Dgo=r(LZ,"The processor class to instantiate is selected based on the "),cse=n(LZ,"CODE",{});var zZr=s(cse);Ggo=r(zZr,"model_type"),zZr.forEach(t),Ogo=r(LZ,` property of the config object (either
passed as an argument or loaded from `),fse=n(LZ,"CODE",{});var WZr=s(fse);Vgo=r(WZr,"pretrained_model_name_or_path"),WZr.forEach(t),Xgo=r(LZ," if possible):"),LZ.forEach(t),zgo=i(ea),he=n(ea,"UL",{});var _e=s(he);Vh=n(_e,"LI",{});var O0e=s(Vh);mse=n(O0e,"STRONG",{});var QZr=s(mse);Wgo=r(QZr,"clip"),QZr.forEach(t),Qgo=r(O0e," \u2014 "),CI=n(O0e,"A",{href:!0});var HZr=s(CI);Hgo=r(HZr,"CLIPProcessor"),HZr.forEach(t),Ugo=r(O0e," (CLIP model)"),O0e.forEach(t),Jgo=i(_e),Xh=n(_e,"LI",{});var V0e=s(Xh);gse=n(V0e,"STRONG",{});var UZr=s(gse);Ygo=r(UZr,"flava"),UZr.forEach(t),Kgo=r(V0e," \u2014 "),hse=n(V0e,"CODE",{});var JZr=s(hse);Zgo=r(JZr,"FLAVAProcessor"),JZr.forEach(t),eho=r(V0e," (Flava model)"),V0e.forEach(t),oho=i(_e),zh=n(_e,"LI",{});var X0e=s(zh);pse=n(X0e,"STRONG",{});var YZr=s(pse);rho=r(YZr,"greaselm"),YZr.forEach(t),tho=r(X0e," \u2014 "),wI=n(X0e,"A",{href:!0});var KZr=s(wI);aho=r(KZr,"GreaseLMProcessor"),KZr.forEach(t),nho=r(X0e," (GreaseLM model)"),X0e.forEach(t),sho=i(_e),Wh=n(_e,"LI",{});var z0e=s(Wh);_se=n(z0e,"STRONG",{});var ZZr=s(_se);lho=r(ZZr,"layoutlmv2"),ZZr.forEach(t),iho=r(z0e," \u2014 "),AI=n(z0e,"A",{href:!0});var eet=s(AI);dho=r(eet,"LayoutLMv2Processor"),eet.forEach(t),cho=r(z0e," (LayoutLMv2 model)"),z0e.forEach(t),fho=i(_e),Qh=n(_e,"LI",{});var W0e=s(Qh);use=n(W0e,"STRONG",{});var oet=s(use);mho=r(oet,"layoutlmv3"),oet.forEach(t),gho=r(W0e," \u2014 "),yI=n(W0e,"A",{href:!0});var ret=s(yI);hho=r(ret,"LayoutLMv3Processor"),ret.forEach(t),pho=r(W0e," (LayoutLMv3 model)"),W0e.forEach(t),_ho=i(_e),Hh=n(_e,"LI",{});var Q0e=s(Hh);bse=n(Q0e,"STRONG",{});var tet=s(bse);uho=r(tet,"layoutxlm"),tet.forEach(t),bho=r(Q0e," \u2014 "),LI=n(Q0e,"A",{href:!0});var aet=s(LI);vho=r(aet,"LayoutXLMProcessor"),aet.forEach(t),Fho=r(Q0e," (LayoutXLM model)"),Q0e.forEach(t),Tho=i(_e),Uh=n(_e,"LI",{});var H0e=s(Uh);vse=n(H0e,"STRONG",{});var net=s(vse);Mho=r(net,"sew"),net.forEach(t),Eho=r(H0e," \u2014 "),xI=n(H0e,"A",{href:!0});var set=s(xI);Cho=r(set,"Wav2Vec2Processor"),set.forEach(t),who=r(H0e," (SEW model)"),H0e.forEach(t),Aho=i(_e),Jh=n(_e,"LI",{});var U0e=s(Jh);Fse=n(U0e,"STRONG",{});var iet=s(Fse);yho=r(iet,"sew-d"),iet.forEach(t),Lho=r(U0e," \u2014 "),$I=n(U0e,"A",{href:!0});var det=s($I);xho=r(det,"Wav2Vec2Processor"),det.forEach(t),$ho=r(U0e," (SEW-D model)"),U0e.forEach(t),kho=i(_e),Yh=n(_e,"LI",{});var J0e=s(Yh);Tse=n(J0e,"STRONG",{});var cet=s(Tse);Sho=r(cet,"speech_to_text"),cet.forEach(t),Rho=r(J0e," \u2014 "),kI=n(J0e,"A",{href:!0});var fet=s(kI);Pho=r(fet,"Speech2TextProcessor"),fet.forEach(t),Bho=r(J0e," (Speech2Text model)"),J0e.forEach(t),Iho=i(_e),Kh=n(_e,"LI",{});var Y0e=s(Kh);Mse=n(Y0e,"STRONG",{});var met=s(Mse);Nho=r(met,"speech_to_text_2"),met.forEach(t),qho=r(Y0e," \u2014 "),SI=n(Y0e,"A",{href:!0});var get=s(SI);jho=r(get,"Speech2Text2Processor"),get.forEach(t),Dho=r(Y0e," (Speech2Text2 model)"),Y0e.forEach(t),Gho=i(_e),Zh=n(_e,"LI",{});var K0e=s(Zh);Ese=n(K0e,"STRONG",{});var het=s(Ese);Oho=r(het,"trocr"),het.forEach(t),Vho=r(K0e," \u2014 "),RI=n(K0e,"A",{href:!0});var pet=s(RI);Xho=r(pet,"TrOCRProcessor"),pet.forEach(t),zho=r(K0e," (TrOCR model)"),K0e.forEach(t),Who=i(_e),ep=n(_e,"LI",{});var Z0e=s(ep);Cse=n(Z0e,"STRONG",{});var _et=s(Cse);Qho=r(_et,"unispeech"),_et.forEach(t),Hho=r(Z0e," \u2014 "),PI=n(Z0e,"A",{href:!0});var uet=s(PI);Uho=r(uet,"Wav2Vec2Processor"),uet.forEach(t),Jho=r(Z0e," (UniSpeech model)"),Z0e.forEach(t),Yho=i(_e),op=n(_e,"LI",{});var eAe=s(op);wse=n(eAe,"STRONG",{});var bet=s(wse);Kho=r(bet,"unispeech-sat"),bet.forEach(t),Zho=r(eAe," \u2014 "),BI=n(eAe,"A",{href:!0});var vet=s(BI);epo=r(vet,"Wav2Vec2Processor"),vet.forEach(t),opo=r(eAe," (UniSpeechSat model)"),eAe.forEach(t),rpo=i(_e),rp=n(_e,"LI",{});var oAe=s(rp);Ase=n(oAe,"STRONG",{});var Fet=s(Ase);tpo=r(Fet,"vilt"),Fet.forEach(t),apo=r(oAe," \u2014 "),II=n(oAe,"A",{href:!0});var Tet=s(II);npo=r(Tet,"ViltProcessor"),Tet.forEach(t),spo=r(oAe," (ViLT model)"),oAe.forEach(t),lpo=i(_e),tp=n(_e,"LI",{});var rAe=s(tp);yse=n(rAe,"STRONG",{});var Met=s(yse);ipo=r(Met,"vision-text-dual-encoder"),Met.forEach(t),dpo=r(rAe," \u2014 "),NI=n(rAe,"A",{href:!0});var Eet=s(NI);cpo=r(Eet,"VisionTextDualEncoderProcessor"),Eet.forEach(t),fpo=r(rAe," (VisionTextDualEncoder model)"),rAe.forEach(t),mpo=i(_e),ap=n(_e,"LI",{});var tAe=s(ap);Lse=n(tAe,"STRONG",{});var Cet=s(Lse);gpo=r(Cet,"wav2vec2"),Cet.forEach(t),hpo=r(tAe," \u2014 "),qI=n(tAe,"A",{href:!0});var wet=s(qI);ppo=r(wet,"Wav2Vec2Processor"),wet.forEach(t),_po=r(tAe," (Wav2Vec2 model)"),tAe.forEach(t),upo=i(_e),np=n(_e,"LI",{});var aAe=s(np);xse=n(aAe,"STRONG",{});var Aet=s(xse);bpo=r(Aet,"wav2vec2-conformer"),Aet.forEach(t),vpo=r(aAe," \u2014 "),jI=n(aAe,"A",{href:!0});var yet=s(jI);Fpo=r(yet,"Wav2Vec2Processor"),yet.forEach(t),Tpo=r(aAe," (Wav2Vec2-Conformer model)"),aAe.forEach(t),Mpo=i(_e),sp=n(_e,"LI",{});var nAe=s(sp);$se=n(nAe,"STRONG",{});var Let=s($se);Epo=r(Let,"wavlm"),Let.forEach(t),Cpo=r(nAe," \u2014 "),DI=n(nAe,"A",{href:!0});var xet=s(DI);wpo=r(xet,"Wav2Vec2Processor"),xet.forEach(t),Apo=r(nAe," (WavLM model)"),nAe.forEach(t),_e.forEach(t),ypo=i(ea),T(lp.$$.fragment,ea),Lpo=i(ea),T(ip.$$.fragment,ea),ea.forEach(t),xpo=i(Gs),dp=n(Gs,"DIV",{class:!0});var jDe=s(dp);T(ay.$$.fragment,jDe),$po=i(jDe),kse=n(jDe,"P",{});var $et=s(kse);kpo=r($et,"Register a new processor for this class."),$et.forEach(t),jDe.forEach(t),Gs.forEach(t),Iqe=i(f),Ai=n(f,"H2",{class:!0});var DDe=s(Ai);cp=n(DDe,"A",{id:!0,class:!0,href:!0});var ket=s(cp);Sse=n(ket,"SPAN",{});var Set=s(Sse);T(ny.$$.fragment,Set),Set.forEach(t),ket.forEach(t),Spo=i(DDe),Rse=n(DDe,"SPAN",{});var Ret=s(Rse);Rpo=r(Ret,"AutoModel"),Ret.forEach(t),DDe.forEach(t),Nqe=i(f),Lo=n(f,"DIV",{class:!0});var Os=s(Lo);T(sy.$$.fragment,Os),Ppo=i(Os),yi=n(Os,"P",{});var xZ=s(yi);Bpo=r(xZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),GI=n(xZ,"A",{href:!0});var Pet=s(GI);Ipo=r(Pet,"from_pretrained()"),Pet.forEach(t),Npo=r(xZ," class method or the "),OI=n(xZ,"A",{href:!0});var Bet=s(OI);qpo=r(Bet,"from_config()"),Bet.forEach(t),jpo=r(xZ,` class
method.`),xZ.forEach(t),Dpo=i(Os),ly=n(Os,"P",{});var GDe=s(ly);Gpo=r(GDe,"This class cannot be instantiated directly using "),Pse=n(GDe,"CODE",{});var Iet=s(Pse);Opo=r(Iet,"__init__()"),Iet.forEach(t),Vpo=r(GDe," (throws an error)."),GDe.forEach(t),Xpo=i(Os),tt=n(Os,"DIV",{class:!0});var Nw=s(tt);T(iy.$$.fragment,Nw),zpo=i(Nw),Bse=n(Nw,"P",{});var Net=s(Bse);Wpo=r(Net,"Instantiates one of the base model classes of the library from a configuration."),Net.forEach(t),Qpo=i(Nw),Li=n(Nw,"P",{});var $Z=s(Li);Hpo=r($Z,`Note:
Loading a model from its configuration file does `),Ise=n($Z,"STRONG",{});var qet=s(Ise);Upo=r(qet,"not"),qet.forEach(t),Jpo=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),VI=n($Z,"A",{href:!0});var jet=s(VI);Ypo=r(jet,"from_pretrained()"),jet.forEach(t),Kpo=r($Z," to load the model weights."),$Z.forEach(t),Zpo=i(Nw),T(fp.$$.fragment,Nw),Nw.forEach(t),e_o=i(Os),Je=n(Os,"DIV",{class:!0});var oa=s(Je);T(dy.$$.fragment,oa),o_o=i(oa),Nse=n(oa,"P",{});var Det=s(Nse);r_o=r(Det,"Instantiate one of the base model classes of the library from a pretrained model."),Det.forEach(t),t_o=i(oa),La=n(oa,"P",{});var qw=s(La);a_o=r(qw,"The model class to instantiate is selected based on the "),qse=n(qw,"CODE",{});var Get=s(qse);n_o=r(Get,"model_type"),Get.forEach(t),s_o=r(qw,` property of the config object (either
passed as an argument or loaded from `),jse=n(qw,"CODE",{});var Oet=s(jse);l_o=r(Oet,"pretrained_model_name_or_path"),Oet.forEach(t),i_o=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dse=n(qw,"CODE",{});var Vet=s(Dse);d_o=r(Vet,"pretrained_model_name_or_path"),Vet.forEach(t),c_o=r(qw,":"),qw.forEach(t),f_o=i(oa),x=n(oa,"UL",{});var $=s(x);mp=n($,"LI",{});var sAe=s(mp);Gse=n(sAe,"STRONG",{});var Xet=s(Gse);m_o=r(Xet,"albert"),Xet.forEach(t),g_o=r(sAe," \u2014 "),XI=n(sAe,"A",{href:!0});var zet=s(XI);h_o=r(zet,"AlbertModel"),zet.forEach(t),p_o=r(sAe," (ALBERT model)"),sAe.forEach(t),__o=i($),gp=n($,"LI",{});var lAe=s(gp);Ose=n(lAe,"STRONG",{});var Wet=s(Ose);u_o=r(Wet,"bart"),Wet.forEach(t),b_o=r(lAe," \u2014 "),zI=n(lAe,"A",{href:!0});var Qet=s(zI);v_o=r(Qet,"BartModel"),Qet.forEach(t),F_o=r(lAe," (BART model)"),lAe.forEach(t),T_o=i($),hp=n($,"LI",{});var iAe=s(hp);Vse=n(iAe,"STRONG",{});var Het=s(Vse);M_o=r(Het,"beit"),Het.forEach(t),E_o=r(iAe," \u2014 "),WI=n(iAe,"A",{href:!0});var Uet=s(WI);C_o=r(Uet,"BeitModel"),Uet.forEach(t),w_o=r(iAe," (BEiT model)"),iAe.forEach(t),A_o=i($),pp=n($,"LI",{});var dAe=s(pp);Xse=n(dAe,"STRONG",{});var Jet=s(Xse);y_o=r(Jet,"bert"),Jet.forEach(t),L_o=r(dAe," \u2014 "),QI=n(dAe,"A",{href:!0});var Yet=s(QI);x_o=r(Yet,"BertModel"),Yet.forEach(t),$_o=r(dAe," (BERT model)"),dAe.forEach(t),k_o=i($),_p=n($,"LI",{});var cAe=s(_p);zse=n(cAe,"STRONG",{});var Ket=s(zse);S_o=r(Ket,"bert-generation"),Ket.forEach(t),R_o=r(cAe," \u2014 "),HI=n(cAe,"A",{href:!0});var Zet=s(HI);P_o=r(Zet,"BertGenerationEncoder"),Zet.forEach(t),B_o=r(cAe," (Bert Generation model)"),cAe.forEach(t),I_o=i($),up=n($,"LI",{});var fAe=s(up);Wse=n(fAe,"STRONG",{});var eot=s(Wse);N_o=r(eot,"big_bird"),eot.forEach(t),q_o=r(fAe," \u2014 "),UI=n(fAe,"A",{href:!0});var oot=s(UI);j_o=r(oot,"BigBirdModel"),oot.forEach(t),D_o=r(fAe," (BigBird model)"),fAe.forEach(t),G_o=i($),bp=n($,"LI",{});var mAe=s(bp);Qse=n(mAe,"STRONG",{});var rot=s(Qse);O_o=r(rot,"bigbird_pegasus"),rot.forEach(t),V_o=r(mAe," \u2014 "),JI=n(mAe,"A",{href:!0});var tot=s(JI);X_o=r(tot,"BigBirdPegasusModel"),tot.forEach(t),z_o=r(mAe," (BigBirdPegasus model)"),mAe.forEach(t),W_o=i($),vp=n($,"LI",{});var gAe=s(vp);Hse=n(gAe,"STRONG",{});var aot=s(Hse);Q_o=r(aot,"blenderbot"),aot.forEach(t),H_o=r(gAe," \u2014 "),YI=n(gAe,"A",{href:!0});var not=s(YI);U_o=r(not,"BlenderbotModel"),not.forEach(t),J_o=r(gAe," (Blenderbot model)"),gAe.forEach(t),Y_o=i($),Fp=n($,"LI",{});var hAe=s(Fp);Use=n(hAe,"STRONG",{});var sot=s(Use);K_o=r(sot,"blenderbot-small"),sot.forEach(t),Z_o=r(hAe," \u2014 "),KI=n(hAe,"A",{href:!0});var lot=s(KI);euo=r(lot,"BlenderbotSmallModel"),lot.forEach(t),ouo=r(hAe," (BlenderbotSmall model)"),hAe.forEach(t),ruo=i($),Tp=n($,"LI",{});var pAe=s(Tp);Jse=n(pAe,"STRONG",{});var iot=s(Jse);tuo=r(iot,"camembert"),iot.forEach(t),auo=r(pAe," \u2014 "),ZI=n(pAe,"A",{href:!0});var dot=s(ZI);nuo=r(dot,"CamembertModel"),dot.forEach(t),suo=r(pAe," (CamemBERT model)"),pAe.forEach(t),luo=i($),Mp=n($,"LI",{});var _Ae=s(Mp);Yse=n(_Ae,"STRONG",{});var cot=s(Yse);iuo=r(cot,"canine"),cot.forEach(t),duo=r(_Ae," \u2014 "),eN=n(_Ae,"A",{href:!0});var fot=s(eN);cuo=r(fot,"CanineModel"),fot.forEach(t),fuo=r(_Ae," (Canine model)"),_Ae.forEach(t),muo=i($),Ep=n($,"LI",{});var uAe=s(Ep);Kse=n(uAe,"STRONG",{});var mot=s(Kse);guo=r(mot,"clip"),mot.forEach(t),huo=r(uAe," \u2014 "),oN=n(uAe,"A",{href:!0});var got=s(oN);puo=r(got,"CLIPModel"),got.forEach(t),_uo=r(uAe," (CLIP model)"),uAe.forEach(t),uuo=i($),Cp=n($,"LI",{});var bAe=s(Cp);Zse=n(bAe,"STRONG",{});var hot=s(Zse);buo=r(hot,"convbert"),hot.forEach(t),vuo=r(bAe," \u2014 "),rN=n(bAe,"A",{href:!0});var pot=s(rN);Fuo=r(pot,"ConvBertModel"),pot.forEach(t),Tuo=r(bAe," (ConvBERT model)"),bAe.forEach(t),Muo=i($),wp=n($,"LI",{});var vAe=s(wp);ele=n(vAe,"STRONG",{});var _ot=s(ele);Euo=r(_ot,"convnext"),_ot.forEach(t),Cuo=r(vAe," \u2014 "),tN=n(vAe,"A",{href:!0});var uot=s(tN);wuo=r(uot,"ConvNextModel"),uot.forEach(t),Auo=r(vAe," (ConvNext model)"),vAe.forEach(t),yuo=i($),Ap=n($,"LI",{});var FAe=s(Ap);ole=n(FAe,"STRONG",{});var bot=s(ole);Luo=r(bot,"ctrl"),bot.forEach(t),xuo=r(FAe," \u2014 "),aN=n(FAe,"A",{href:!0});var vot=s(aN);$uo=r(vot,"CTRLModel"),vot.forEach(t),kuo=r(FAe," (CTRL model)"),FAe.forEach(t),Suo=i($),yp=n($,"LI",{});var TAe=s(yp);rle=n(TAe,"STRONG",{});var Fot=s(rle);Ruo=r(Fot,"cvt"),Fot.forEach(t),Puo=r(TAe," \u2014 "),nN=n(TAe,"A",{href:!0});var Tot=s(nN);Buo=r(Tot,"CvtModel"),Tot.forEach(t),Iuo=r(TAe," (CvT model)"),TAe.forEach(t),Nuo=i($),Lp=n($,"LI",{});var MAe=s(Lp);tle=n(MAe,"STRONG",{});var Mot=s(tle);quo=r(Mot,"data2vec-audio"),Mot.forEach(t),juo=r(MAe," \u2014 "),sN=n(MAe,"A",{href:!0});var Eot=s(sN);Duo=r(Eot,"Data2VecAudioModel"),Eot.forEach(t),Guo=r(MAe," (Data2VecAudio model)"),MAe.forEach(t),Ouo=i($),xp=n($,"LI",{});var EAe=s(xp);ale=n(EAe,"STRONG",{});var Cot=s(ale);Vuo=r(Cot,"data2vec-text"),Cot.forEach(t),Xuo=r(EAe," \u2014 "),lN=n(EAe,"A",{href:!0});var wot=s(lN);zuo=r(wot,"Data2VecTextModel"),wot.forEach(t),Wuo=r(EAe," (Data2VecText model)"),EAe.forEach(t),Quo=i($),$p=n($,"LI",{});var CAe=s($p);nle=n(CAe,"STRONG",{});var Aot=s(nle);Huo=r(Aot,"data2vec-vision"),Aot.forEach(t),Uuo=r(CAe," \u2014 "),iN=n(CAe,"A",{href:!0});var yot=s(iN);Juo=r(yot,"Data2VecVisionModel"),yot.forEach(t),Yuo=r(CAe," (Data2VecVision model)"),CAe.forEach(t),Kuo=i($),kp=n($,"LI",{});var wAe=s(kp);sle=n(wAe,"STRONG",{});var Lot=s(sle);Zuo=r(Lot,"deberta"),Lot.forEach(t),e1o=r(wAe," \u2014 "),dN=n(wAe,"A",{href:!0});var xot=s(dN);o1o=r(xot,"DebertaModel"),xot.forEach(t),r1o=r(wAe," (DeBERTa model)"),wAe.forEach(t),t1o=i($),Sp=n($,"LI",{});var AAe=s(Sp);lle=n(AAe,"STRONG",{});var $ot=s(lle);a1o=r($ot,"deberta-v2"),$ot.forEach(t),n1o=r(AAe," \u2014 "),cN=n(AAe,"A",{href:!0});var kot=s(cN);s1o=r(kot,"DebertaV2Model"),kot.forEach(t),l1o=r(AAe," (DeBERTa-v2 model)"),AAe.forEach(t),i1o=i($),Rp=n($,"LI",{});var yAe=s(Rp);ile=n(yAe,"STRONG",{});var Sot=s(ile);d1o=r(Sot,"decision_transformer"),Sot.forEach(t),c1o=r(yAe," \u2014 "),fN=n(yAe,"A",{href:!0});var Rot=s(fN);f1o=r(Rot,"DecisionTransformerModel"),Rot.forEach(t),m1o=r(yAe," (Decision Transformer model)"),yAe.forEach(t),g1o=i($),Pp=n($,"LI",{});var LAe=s(Pp);dle=n(LAe,"STRONG",{});var Pot=s(dle);h1o=r(Pot,"deit"),Pot.forEach(t),p1o=r(LAe," \u2014 "),mN=n(LAe,"A",{href:!0});var Bot=s(mN);_1o=r(Bot,"DeiTModel"),Bot.forEach(t),u1o=r(LAe," (DeiT model)"),LAe.forEach(t),b1o=i($),Bp=n($,"LI",{});var xAe=s(Bp);cle=n(xAe,"STRONG",{});var Iot=s(cle);v1o=r(Iot,"detr"),Iot.forEach(t),F1o=r(xAe," \u2014 "),gN=n(xAe,"A",{href:!0});var Not=s(gN);T1o=r(Not,"DetrModel"),Not.forEach(t),M1o=r(xAe," (DETR model)"),xAe.forEach(t),E1o=i($),Ip=n($,"LI",{});var $Ae=s(Ip);fle=n($Ae,"STRONG",{});var qot=s(fle);C1o=r(qot,"distilbert"),qot.forEach(t),w1o=r($Ae," \u2014 "),hN=n($Ae,"A",{href:!0});var jot=s(hN);A1o=r(jot,"DistilBertModel"),jot.forEach(t),y1o=r($Ae," (DistilBERT model)"),$Ae.forEach(t),L1o=i($),Np=n($,"LI",{});var kAe=s(Np);mle=n(kAe,"STRONG",{});var Dot=s(mle);x1o=r(Dot,"dpr"),Dot.forEach(t),$1o=r(kAe," \u2014 "),pN=n(kAe,"A",{href:!0});var Got=s(pN);k1o=r(Got,"DPRQuestionEncoder"),Got.forEach(t),S1o=r(kAe," (DPR model)"),kAe.forEach(t),R1o=i($),qp=n($,"LI",{});var SAe=s(qp);gle=n(SAe,"STRONG",{});var Oot=s(gle);P1o=r(Oot,"dpt"),Oot.forEach(t),B1o=r(SAe," \u2014 "),_N=n(SAe,"A",{href:!0});var Vot=s(_N);I1o=r(Vot,"DPTModel"),Vot.forEach(t),N1o=r(SAe," (DPT model)"),SAe.forEach(t),q1o=i($),jp=n($,"LI",{});var RAe=s(jp);hle=n(RAe,"STRONG",{});var Xot=s(hle);j1o=r(Xot,"electra"),Xot.forEach(t),D1o=r(RAe," \u2014 "),uN=n(RAe,"A",{href:!0});var zot=s(uN);G1o=r(zot,"ElectraModel"),zot.forEach(t),O1o=r(RAe," (ELECTRA model)"),RAe.forEach(t),V1o=i($),Dp=n($,"LI",{});var PAe=s(Dp);ple=n(PAe,"STRONG",{});var Wot=s(ple);X1o=r(Wot,"flaubert"),Wot.forEach(t),z1o=r(PAe," \u2014 "),bN=n(PAe,"A",{href:!0});var Qot=s(bN);W1o=r(Qot,"FlaubertModel"),Qot.forEach(t),Q1o=r(PAe," (FlauBERT model)"),PAe.forEach(t),H1o=i($),Gp=n($,"LI",{});var BAe=s(Gp);_le=n(BAe,"STRONG",{});var Hot=s(_le);U1o=r(Hot,"flava"),Hot.forEach(t),J1o=r(BAe," \u2014 "),vN=n(BAe,"A",{href:!0});var Uot=s(vN);Y1o=r(Uot,"FlavaModel"),Uot.forEach(t),K1o=r(BAe," (Flava model)"),BAe.forEach(t),Z1o=i($),Op=n($,"LI",{});var IAe=s(Op);ule=n(IAe,"STRONG",{});var Jot=s(ule);ebo=r(Jot,"fnet"),Jot.forEach(t),obo=r(IAe," \u2014 "),FN=n(IAe,"A",{href:!0});var Yot=s(FN);rbo=r(Yot,"FNetModel"),Yot.forEach(t),tbo=r(IAe," (FNet model)"),IAe.forEach(t),abo=i($),Vp=n($,"LI",{});var NAe=s(Vp);ble=n(NAe,"STRONG",{});var Kot=s(ble);nbo=r(Kot,"fsmt"),Kot.forEach(t),sbo=r(NAe," \u2014 "),TN=n(NAe,"A",{href:!0});var Zot=s(TN);lbo=r(Zot,"FSMTModel"),Zot.forEach(t),ibo=r(NAe," (FairSeq Machine-Translation model)"),NAe.forEach(t),dbo=i($),Bs=n($,"LI",{});var U$=s(Bs);vle=n(U$,"STRONG",{});var ert=s(vle);cbo=r(ert,"funnel"),ert.forEach(t),fbo=r(U$," \u2014 "),MN=n(U$,"A",{href:!0});var ort=s(MN);mbo=r(ort,"FunnelModel"),ort.forEach(t),gbo=r(U$," or "),EN=n(U$,"A",{href:!0});var rrt=s(EN);hbo=r(rrt,"FunnelBaseModel"),rrt.forEach(t),pbo=r(U$," (Funnel Transformer model)"),U$.forEach(t),_bo=i($),Xp=n($,"LI",{});var qAe=s(Xp);Fle=n(qAe,"STRONG",{});var trt=s(Fle);ubo=r(trt,"glpn"),trt.forEach(t),bbo=r(qAe," \u2014 "),CN=n(qAe,"A",{href:!0});var art=s(CN);vbo=r(art,"GLPNModel"),art.forEach(t),Fbo=r(qAe," (GLPN model)"),qAe.forEach(t),Tbo=i($),zp=n($,"LI",{});var jAe=s(zp);Tle=n(jAe,"STRONG",{});var nrt=s(Tle);Mbo=r(nrt,"gpt2"),nrt.forEach(t),Ebo=r(jAe," \u2014 "),wN=n(jAe,"A",{href:!0});var srt=s(wN);Cbo=r(srt,"GPT2Model"),srt.forEach(t),wbo=r(jAe," (OpenAI GPT-2 model)"),jAe.forEach(t),Abo=i($),Wp=n($,"LI",{});var DAe=s(Wp);Mle=n(DAe,"STRONG",{});var lrt=s(Mle);ybo=r(lrt,"gpt_neo"),lrt.forEach(t),Lbo=r(DAe," \u2014 "),AN=n(DAe,"A",{href:!0});var irt=s(AN);xbo=r(irt,"GPTNeoModel"),irt.forEach(t),$bo=r(DAe," (GPT Neo model)"),DAe.forEach(t),kbo=i($),Qp=n($,"LI",{});var GAe=s(Qp);Ele=n(GAe,"STRONG",{});var drt=s(Ele);Sbo=r(drt,"gpt_neox"),drt.forEach(t),Rbo=r(GAe," \u2014 "),yN=n(GAe,"A",{href:!0});var crt=s(yN);Pbo=r(crt,"GPTNeoXModel"),crt.forEach(t),Bbo=r(GAe," (GPT NeoX model)"),GAe.forEach(t),Ibo=i($),Hp=n($,"LI",{});var OAe=s(Hp);Cle=n(OAe,"STRONG",{});var frt=s(Cle);Nbo=r(frt,"gptj"),frt.forEach(t),qbo=r(OAe," \u2014 "),LN=n(OAe,"A",{href:!0});var mrt=s(LN);jbo=r(mrt,"GPTJModel"),mrt.forEach(t),Dbo=r(OAe," (GPT-J model)"),OAe.forEach(t),Gbo=i($),Up=n($,"LI",{});var VAe=s(Up);wle=n(VAe,"STRONG",{});var grt=s(wle);Obo=r(grt,"greaselm"),grt.forEach(t),Vbo=r(VAe," \u2014 "),xN=n(VAe,"A",{href:!0});var hrt=s(xN);Xbo=r(hrt,"GreaseLMModel"),hrt.forEach(t),zbo=r(VAe," (GreaseLM model)"),VAe.forEach(t),Wbo=i($),Jp=n($,"LI",{});var XAe=s(Jp);Ale=n(XAe,"STRONG",{});var prt=s(Ale);Qbo=r(prt,"hubert"),prt.forEach(t),Hbo=r(XAe," \u2014 "),$N=n(XAe,"A",{href:!0});var _rt=s($N);Ubo=r(_rt,"HubertModel"),_rt.forEach(t),Jbo=r(XAe," (Hubert model)"),XAe.forEach(t),Ybo=i($),Yp=n($,"LI",{});var zAe=s(Yp);yle=n(zAe,"STRONG",{});var urt=s(yle);Kbo=r(urt,"ibert"),urt.forEach(t),Zbo=r(zAe," \u2014 "),kN=n(zAe,"A",{href:!0});var brt=s(kN);e2o=r(brt,"IBertModel"),brt.forEach(t),o2o=r(zAe," (I-BERT model)"),zAe.forEach(t),r2o=i($),Kp=n($,"LI",{});var WAe=s(Kp);Lle=n(WAe,"STRONG",{});var vrt=s(Lle);t2o=r(vrt,"imagegpt"),vrt.forEach(t),a2o=r(WAe," \u2014 "),SN=n(WAe,"A",{href:!0});var Frt=s(SN);n2o=r(Frt,"ImageGPTModel"),Frt.forEach(t),s2o=r(WAe," (ImageGPT model)"),WAe.forEach(t),l2o=i($),Zp=n($,"LI",{});var QAe=s(Zp);xle=n(QAe,"STRONG",{});var Trt=s(xle);i2o=r(Trt,"layoutlm"),Trt.forEach(t),d2o=r(QAe," \u2014 "),RN=n(QAe,"A",{href:!0});var Mrt=s(RN);c2o=r(Mrt,"LayoutLMModel"),Mrt.forEach(t),f2o=r(QAe," (LayoutLM model)"),QAe.forEach(t),m2o=i($),e_=n($,"LI",{});var HAe=s(e_);$le=n(HAe,"STRONG",{});var Ert=s($le);g2o=r(Ert,"layoutlmv2"),Ert.forEach(t),h2o=r(HAe," \u2014 "),PN=n(HAe,"A",{href:!0});var Crt=s(PN);p2o=r(Crt,"LayoutLMv2Model"),Crt.forEach(t),_2o=r(HAe," (LayoutLMv2 model)"),HAe.forEach(t),u2o=i($),o_=n($,"LI",{});var UAe=s(o_);kle=n(UAe,"STRONG",{});var wrt=s(kle);b2o=r(wrt,"layoutlmv3"),wrt.forEach(t),v2o=r(UAe," \u2014 "),BN=n(UAe,"A",{href:!0});var Art=s(BN);F2o=r(Art,"LayoutLMv3Model"),Art.forEach(t),T2o=r(UAe," (LayoutLMv3 model)"),UAe.forEach(t),M2o=i($),r_=n($,"LI",{});var JAe=s(r_);Sle=n(JAe,"STRONG",{});var yrt=s(Sle);E2o=r(yrt,"led"),yrt.forEach(t),C2o=r(JAe," \u2014 "),IN=n(JAe,"A",{href:!0});var Lrt=s(IN);w2o=r(Lrt,"LEDModel"),Lrt.forEach(t),A2o=r(JAe," (LED model)"),JAe.forEach(t),y2o=i($),t_=n($,"LI",{});var YAe=s(t_);Rle=n(YAe,"STRONG",{});var xrt=s(Rle);L2o=r(xrt,"longformer"),xrt.forEach(t),x2o=r(YAe," \u2014 "),NN=n(YAe,"A",{href:!0});var $rt=s(NN);$2o=r($rt,"LongformerModel"),$rt.forEach(t),k2o=r(YAe," (Longformer model)"),YAe.forEach(t),S2o=i($),a_=n($,"LI",{});var KAe=s(a_);Ple=n(KAe,"STRONG",{});var krt=s(Ple);R2o=r(krt,"luke"),krt.forEach(t),P2o=r(KAe," \u2014 "),qN=n(KAe,"A",{href:!0});var Srt=s(qN);B2o=r(Srt,"LukeModel"),Srt.forEach(t),I2o=r(KAe," (LUKE model)"),KAe.forEach(t),N2o=i($),n_=n($,"LI",{});var ZAe=s(n_);Ble=n(ZAe,"STRONG",{});var Rrt=s(Ble);q2o=r(Rrt,"lxmert"),Rrt.forEach(t),j2o=r(ZAe," \u2014 "),jN=n(ZAe,"A",{href:!0});var Prt=s(jN);D2o=r(Prt,"LxmertModel"),Prt.forEach(t),G2o=r(ZAe," (LXMERT model)"),ZAe.forEach(t),O2o=i($),s_=n($,"LI",{});var eye=s(s_);Ile=n(eye,"STRONG",{});var Brt=s(Ile);V2o=r(Brt,"m2m_100"),Brt.forEach(t),X2o=r(eye," \u2014 "),DN=n(eye,"A",{href:!0});var Irt=s(DN);z2o=r(Irt,"M2M100Model"),Irt.forEach(t),W2o=r(eye," (M2M100 model)"),eye.forEach(t),Q2o=i($),l_=n($,"LI",{});var oye=s(l_);Nle=n(oye,"STRONG",{});var Nrt=s(Nle);H2o=r(Nrt,"marian"),Nrt.forEach(t),U2o=r(oye," \u2014 "),GN=n(oye,"A",{href:!0});var qrt=s(GN);J2o=r(qrt,"MarianModel"),qrt.forEach(t),Y2o=r(oye," (Marian model)"),oye.forEach(t),K2o=i($),i_=n($,"LI",{});var rye=s(i_);qle=n(rye,"STRONG",{});var jrt=s(qle);Z2o=r(jrt,"maskformer"),jrt.forEach(t),e4o=r(rye," \u2014 "),ON=n(rye,"A",{href:!0});var Drt=s(ON);o4o=r(Drt,"MaskFormerModel"),Drt.forEach(t),r4o=r(rye," (MaskFormer model)"),rye.forEach(t),t4o=i($),d_=n($,"LI",{});var tye=s(d_);jle=n(tye,"STRONG",{});var Grt=s(jle);a4o=r(Grt,"mbart"),Grt.forEach(t),n4o=r(tye," \u2014 "),VN=n(tye,"A",{href:!0});var Ort=s(VN);s4o=r(Ort,"MBartModel"),Ort.forEach(t),l4o=r(tye," (mBART model)"),tye.forEach(t),i4o=i($),c_=n($,"LI",{});var aye=s(c_);Dle=n(aye,"STRONG",{});var Vrt=s(Dle);d4o=r(Vrt,"megatron-bert"),Vrt.forEach(t),c4o=r(aye," \u2014 "),XN=n(aye,"A",{href:!0});var Xrt=s(XN);f4o=r(Xrt,"MegatronBertModel"),Xrt.forEach(t),m4o=r(aye," (MegatronBert model)"),aye.forEach(t),g4o=i($),f_=n($,"LI",{});var nye=s(f_);Gle=n(nye,"STRONG",{});var zrt=s(Gle);h4o=r(zrt,"mobilebert"),zrt.forEach(t),p4o=r(nye," \u2014 "),zN=n(nye,"A",{href:!0});var Wrt=s(zN);_4o=r(Wrt,"MobileBertModel"),Wrt.forEach(t),u4o=r(nye," (MobileBERT model)"),nye.forEach(t),b4o=i($),m_=n($,"LI",{});var sye=s(m_);Ole=n(sye,"STRONG",{});var Qrt=s(Ole);v4o=r(Qrt,"mpnet"),Qrt.forEach(t),F4o=r(sye," \u2014 "),WN=n(sye,"A",{href:!0});var Hrt=s(WN);T4o=r(Hrt,"MPNetModel"),Hrt.forEach(t),M4o=r(sye," (MPNet model)"),sye.forEach(t),E4o=i($),g_=n($,"LI",{});var lye=s(g_);Vle=n(lye,"STRONG",{});var Urt=s(Vle);C4o=r(Urt,"mt5"),Urt.forEach(t),w4o=r(lye," \u2014 "),QN=n(lye,"A",{href:!0});var Jrt=s(QN);A4o=r(Jrt,"MT5Model"),Jrt.forEach(t),y4o=r(lye," (mT5 model)"),lye.forEach(t),L4o=i($),h_=n($,"LI",{});var iye=s(h_);Xle=n(iye,"STRONG",{});var Yrt=s(Xle);x4o=r(Yrt,"nystromformer"),Yrt.forEach(t),$4o=r(iye," \u2014 "),HN=n(iye,"A",{href:!0});var Krt=s(HN);k4o=r(Krt,"NystromformerModel"),Krt.forEach(t),S4o=r(iye," (Nystromformer model)"),iye.forEach(t),R4o=i($),p_=n($,"LI",{});var dye=s(p_);zle=n(dye,"STRONG",{});var Zrt=s(zle);P4o=r(Zrt,"openai-gpt"),Zrt.forEach(t),B4o=r(dye," \u2014 "),UN=n(dye,"A",{href:!0});var ett=s(UN);I4o=r(ett,"OpenAIGPTModel"),ett.forEach(t),N4o=r(dye," (OpenAI GPT model)"),dye.forEach(t),q4o=i($),__=n($,"LI",{});var cye=s(__);Wle=n(cye,"STRONG",{});var ott=s(Wle);j4o=r(ott,"opt"),ott.forEach(t),D4o=r(cye," \u2014 "),JN=n(cye,"A",{href:!0});var rtt=s(JN);G4o=r(rtt,"OPTModel"),rtt.forEach(t),O4o=r(cye," (OPT model)"),cye.forEach(t),V4o=i($),u_=n($,"LI",{});var fye=s(u_);Qle=n(fye,"STRONG",{});var ttt=s(Qle);X4o=r(ttt,"pegasus"),ttt.forEach(t),z4o=r(fye," \u2014 "),YN=n(fye,"A",{href:!0});var att=s(YN);W4o=r(att,"PegasusModel"),att.forEach(t),Q4o=r(fye," (Pegasus model)"),fye.forEach(t),H4o=i($),b_=n($,"LI",{});var mye=s(b_);Hle=n(mye,"STRONG",{});var ntt=s(Hle);U4o=r(ntt,"perceiver"),ntt.forEach(t),J4o=r(mye," \u2014 "),KN=n(mye,"A",{href:!0});var stt=s(KN);Y4o=r(stt,"PerceiverModel"),stt.forEach(t),K4o=r(mye," (Perceiver model)"),mye.forEach(t),Z4o=i($),v_=n($,"LI",{});var gye=s(v_);Ule=n(gye,"STRONG",{});var ltt=s(Ule);evo=r(ltt,"plbart"),ltt.forEach(t),ovo=r(gye," \u2014 "),ZN=n(gye,"A",{href:!0});var itt=s(ZN);rvo=r(itt,"PLBartModel"),itt.forEach(t),tvo=r(gye," (PLBart model)"),gye.forEach(t),avo=i($),F_=n($,"LI",{});var hye=s(F_);Jle=n(hye,"STRONG",{});var dtt=s(Jle);nvo=r(dtt,"poolformer"),dtt.forEach(t),svo=r(hye," \u2014 "),eq=n(hye,"A",{href:!0});var ctt=s(eq);lvo=r(ctt,"PoolFormerModel"),ctt.forEach(t),ivo=r(hye," (PoolFormer model)"),hye.forEach(t),dvo=i($),T_=n($,"LI",{});var pye=s(T_);Yle=n(pye,"STRONG",{});var ftt=s(Yle);cvo=r(ftt,"prophetnet"),ftt.forEach(t),fvo=r(pye," \u2014 "),oq=n(pye,"A",{href:!0});var mtt=s(oq);mvo=r(mtt,"ProphetNetModel"),mtt.forEach(t),gvo=r(pye," (ProphetNet model)"),pye.forEach(t),hvo=i($),M_=n($,"LI",{});var _ye=s(M_);Kle=n(_ye,"STRONG",{});var gtt=s(Kle);pvo=r(gtt,"qdqbert"),gtt.forEach(t),_vo=r(_ye," \u2014 "),rq=n(_ye,"A",{href:!0});var htt=s(rq);uvo=r(htt,"QDQBertModel"),htt.forEach(t),bvo=r(_ye," (QDQBert model)"),_ye.forEach(t),vvo=i($),E_=n($,"LI",{});var uye=s(E_);Zle=n(uye,"STRONG",{});var ptt=s(Zle);Fvo=r(ptt,"reformer"),ptt.forEach(t),Tvo=r(uye," \u2014 "),tq=n(uye,"A",{href:!0});var _tt=s(tq);Mvo=r(_tt,"ReformerModel"),_tt.forEach(t),Evo=r(uye," (Reformer model)"),uye.forEach(t),Cvo=i($),C_=n($,"LI",{});var bye=s(C_);eie=n(bye,"STRONG",{});var utt=s(eie);wvo=r(utt,"regnet"),utt.forEach(t),Avo=r(bye," \u2014 "),aq=n(bye,"A",{href:!0});var btt=s(aq);yvo=r(btt,"RegNetModel"),btt.forEach(t),Lvo=r(bye," (RegNet model)"),bye.forEach(t),xvo=i($),w_=n($,"LI",{});var vye=s(w_);oie=n(vye,"STRONG",{});var vtt=s(oie);$vo=r(vtt,"rembert"),vtt.forEach(t),kvo=r(vye," \u2014 "),nq=n(vye,"A",{href:!0});var Ftt=s(nq);Svo=r(Ftt,"RemBertModel"),Ftt.forEach(t),Rvo=r(vye," (RemBERT model)"),vye.forEach(t),Pvo=i($),A_=n($,"LI",{});var Fye=s(A_);rie=n(Fye,"STRONG",{});var Ttt=s(rie);Bvo=r(Ttt,"resnet"),Ttt.forEach(t),Ivo=r(Fye," \u2014 "),sq=n(Fye,"A",{href:!0});var Mtt=s(sq);Nvo=r(Mtt,"ResNetModel"),Mtt.forEach(t),qvo=r(Fye," (ResNet model)"),Fye.forEach(t),jvo=i($),y_=n($,"LI",{});var Tye=s(y_);tie=n(Tye,"STRONG",{});var Ett=s(tie);Dvo=r(Ett,"retribert"),Ett.forEach(t),Gvo=r(Tye," \u2014 "),lq=n(Tye,"A",{href:!0});var Ctt=s(lq);Ovo=r(Ctt,"RetriBertModel"),Ctt.forEach(t),Vvo=r(Tye," (RetriBERT model)"),Tye.forEach(t),Xvo=i($),L_=n($,"LI",{});var Mye=s(L_);aie=n(Mye,"STRONG",{});var wtt=s(aie);zvo=r(wtt,"roberta"),wtt.forEach(t),Wvo=r(Mye," \u2014 "),iq=n(Mye,"A",{href:!0});var Att=s(iq);Qvo=r(Att,"RobertaModel"),Att.forEach(t),Hvo=r(Mye," (RoBERTa model)"),Mye.forEach(t),Uvo=i($),x_=n($,"LI",{});var Eye=s(x_);nie=n(Eye,"STRONG",{});var ytt=s(nie);Jvo=r(ytt,"roformer"),ytt.forEach(t),Yvo=r(Eye," \u2014 "),dq=n(Eye,"A",{href:!0});var Ltt=s(dq);Kvo=r(Ltt,"RoFormerModel"),Ltt.forEach(t),Zvo=r(Eye," (RoFormer model)"),Eye.forEach(t),eFo=i($),$_=n($,"LI",{});var Cye=s($_);sie=n(Cye,"STRONG",{});var xtt=s(sie);oFo=r(xtt,"segformer"),xtt.forEach(t),rFo=r(Cye," \u2014 "),cq=n(Cye,"A",{href:!0});var $tt=s(cq);tFo=r($tt,"SegformerModel"),$tt.forEach(t),aFo=r(Cye," (SegFormer model)"),Cye.forEach(t),nFo=i($),k_=n($,"LI",{});var wye=s(k_);lie=n(wye,"STRONG",{});var ktt=s(lie);sFo=r(ktt,"sew"),ktt.forEach(t),lFo=r(wye," \u2014 "),fq=n(wye,"A",{href:!0});var Stt=s(fq);iFo=r(Stt,"SEWModel"),Stt.forEach(t),dFo=r(wye," (SEW model)"),wye.forEach(t),cFo=i($),S_=n($,"LI",{});var Aye=s(S_);iie=n(Aye,"STRONG",{});var Rtt=s(iie);fFo=r(Rtt,"sew-d"),Rtt.forEach(t),mFo=r(Aye," \u2014 "),mq=n(Aye,"A",{href:!0});var Ptt=s(mq);gFo=r(Ptt,"SEWDModel"),Ptt.forEach(t),hFo=r(Aye," (SEW-D model)"),Aye.forEach(t),pFo=i($),R_=n($,"LI",{});var yye=s(R_);die=n(yye,"STRONG",{});var Btt=s(die);_Fo=r(Btt,"speech_to_text"),Btt.forEach(t),uFo=r(yye," \u2014 "),gq=n(yye,"A",{href:!0});var Itt=s(gq);bFo=r(Itt,"Speech2TextModel"),Itt.forEach(t),vFo=r(yye," (Speech2Text model)"),yye.forEach(t),FFo=i($),P_=n($,"LI",{});var Lye=s(P_);cie=n(Lye,"STRONG",{});var Ntt=s(cie);TFo=r(Ntt,"splinter"),Ntt.forEach(t),MFo=r(Lye," \u2014 "),hq=n(Lye,"A",{href:!0});var qtt=s(hq);EFo=r(qtt,"SplinterModel"),qtt.forEach(t),CFo=r(Lye," (Splinter model)"),Lye.forEach(t),wFo=i($),B_=n($,"LI",{});var xye=s(B_);fie=n(xye,"STRONG",{});var jtt=s(fie);AFo=r(jtt,"squeezebert"),jtt.forEach(t),yFo=r(xye," \u2014 "),pq=n(xye,"A",{href:!0});var Dtt=s(pq);LFo=r(Dtt,"SqueezeBertModel"),Dtt.forEach(t),xFo=r(xye," (SqueezeBERT model)"),xye.forEach(t),$Fo=i($),I_=n($,"LI",{});var $ye=s(I_);mie=n($ye,"STRONG",{});var Gtt=s(mie);kFo=r(Gtt,"swin"),Gtt.forEach(t),SFo=r($ye," \u2014 "),_q=n($ye,"A",{href:!0});var Ott=s(_q);RFo=r(Ott,"SwinModel"),Ott.forEach(t),PFo=r($ye," (Swin model)"),$ye.forEach(t),BFo=i($),N_=n($,"LI",{});var kye=s(N_);gie=n(kye,"STRONG",{});var Vtt=s(gie);IFo=r(Vtt,"t5"),Vtt.forEach(t),NFo=r(kye," \u2014 "),uq=n(kye,"A",{href:!0});var Xtt=s(uq);qFo=r(Xtt,"T5Model"),Xtt.forEach(t),jFo=r(kye," (T5 model)"),kye.forEach(t),DFo=i($),q_=n($,"LI",{});var Sye=s(q_);hie=n(Sye,"STRONG",{});var ztt=s(hie);GFo=r(ztt,"tapas"),ztt.forEach(t),OFo=r(Sye," \u2014 "),bq=n(Sye,"A",{href:!0});var Wtt=s(bq);VFo=r(Wtt,"TapasModel"),Wtt.forEach(t),XFo=r(Sye," (TAPAS model)"),Sye.forEach(t),zFo=i($),j_=n($,"LI",{});var Rye=s(j_);pie=n(Rye,"STRONG",{});var Qtt=s(pie);WFo=r(Qtt,"trajectory_transformer"),Qtt.forEach(t),QFo=r(Rye," \u2014 "),vq=n(Rye,"A",{href:!0});var Htt=s(vq);HFo=r(Htt,"TrajectoryTransformerModel"),Htt.forEach(t),UFo=r(Rye," (Trajectory Transformer model)"),Rye.forEach(t),JFo=i($),D_=n($,"LI",{});var Pye=s(D_);_ie=n(Pye,"STRONG",{});var Utt=s(_ie);YFo=r(Utt,"transfo-xl"),Utt.forEach(t),KFo=r(Pye," \u2014 "),Fq=n(Pye,"A",{href:!0});var Jtt=s(Fq);ZFo=r(Jtt,"TransfoXLModel"),Jtt.forEach(t),e6o=r(Pye," (Transformer-XL model)"),Pye.forEach(t),o6o=i($),G_=n($,"LI",{});var Bye=s(G_);uie=n(Bye,"STRONG",{});var Ytt=s(uie);r6o=r(Ytt,"unispeech"),Ytt.forEach(t),t6o=r(Bye," \u2014 "),Tq=n(Bye,"A",{href:!0});var Ktt=s(Tq);a6o=r(Ktt,"UniSpeechModel"),Ktt.forEach(t),n6o=r(Bye," (UniSpeech model)"),Bye.forEach(t),s6o=i($),O_=n($,"LI",{});var Iye=s(O_);bie=n(Iye,"STRONG",{});var Ztt=s(bie);l6o=r(Ztt,"unispeech-sat"),Ztt.forEach(t),i6o=r(Iye," \u2014 "),Mq=n(Iye,"A",{href:!0});var eat=s(Mq);d6o=r(eat,"UniSpeechSatModel"),eat.forEach(t),c6o=r(Iye," (UniSpeechSat model)"),Iye.forEach(t),f6o=i($),V_=n($,"LI",{});var Nye=s(V_);vie=n(Nye,"STRONG",{});var oat=s(vie);m6o=r(oat,"van"),oat.forEach(t),g6o=r(Nye," \u2014 "),Eq=n(Nye,"A",{href:!0});var rat=s(Eq);h6o=r(rat,"VanModel"),rat.forEach(t),p6o=r(Nye," (VAN model)"),Nye.forEach(t),_6o=i($),X_=n($,"LI",{});var qye=s(X_);Fie=n(qye,"STRONG",{});var tat=s(Fie);u6o=r(tat,"vilt"),tat.forEach(t),b6o=r(qye," \u2014 "),Cq=n(qye,"A",{href:!0});var aat=s(Cq);v6o=r(aat,"ViltModel"),aat.forEach(t),F6o=r(qye," (ViLT model)"),qye.forEach(t),T6o=i($),z_=n($,"LI",{});var jye=s(z_);Tie=n(jye,"STRONG",{});var nat=s(Tie);M6o=r(nat,"vision-text-dual-encoder"),nat.forEach(t),E6o=r(jye," \u2014 "),wq=n(jye,"A",{href:!0});var sat=s(wq);C6o=r(sat,"VisionTextDualEncoderModel"),sat.forEach(t),w6o=r(jye," (VisionTextDualEncoder model)"),jye.forEach(t),A6o=i($),W_=n($,"LI",{});var Dye=s(W_);Mie=n(Dye,"STRONG",{});var lat=s(Mie);y6o=r(lat,"visual_bert"),lat.forEach(t),L6o=r(Dye," \u2014 "),Aq=n(Dye,"A",{href:!0});var iat=s(Aq);x6o=r(iat,"VisualBertModel"),iat.forEach(t),$6o=r(Dye," (VisualBert model)"),Dye.forEach(t),k6o=i($),Q_=n($,"LI",{});var Gye=s(Q_);Eie=n(Gye,"STRONG",{});var dat=s(Eie);S6o=r(dat,"vit"),dat.forEach(t),R6o=r(Gye," \u2014 "),yq=n(Gye,"A",{href:!0});var cat=s(yq);P6o=r(cat,"ViTModel"),cat.forEach(t),B6o=r(Gye," (ViT model)"),Gye.forEach(t),I6o=i($),H_=n($,"LI",{});var Oye=s(H_);Cie=n(Oye,"STRONG",{});var fat=s(Cie);N6o=r(fat,"vit_mae"),fat.forEach(t),q6o=r(Oye," \u2014 "),Lq=n(Oye,"A",{href:!0});var mat=s(Lq);j6o=r(mat,"ViTMAEModel"),mat.forEach(t),D6o=r(Oye," (ViTMAE model)"),Oye.forEach(t),G6o=i($),U_=n($,"LI",{});var Vye=s(U_);wie=n(Vye,"STRONG",{});var gat=s(wie);O6o=r(gat,"wav2vec2"),gat.forEach(t),V6o=r(Vye," \u2014 "),xq=n(Vye,"A",{href:!0});var hat=s(xq);X6o=r(hat,"Wav2Vec2Model"),hat.forEach(t),z6o=r(Vye," (Wav2Vec2 model)"),Vye.forEach(t),W6o=i($),J_=n($,"LI",{});var Xye=s(J_);Aie=n(Xye,"STRONG",{});var pat=s(Aie);Q6o=r(pat,"wav2vec2-conformer"),pat.forEach(t),H6o=r(Xye," \u2014 "),$q=n(Xye,"A",{href:!0});var _at=s($q);U6o=r(_at,"Wav2Vec2ConformerModel"),_at.forEach(t),J6o=r(Xye," (Wav2Vec2-Conformer model)"),Xye.forEach(t),Y6o=i($),Y_=n($,"LI",{});var zye=s(Y_);yie=n(zye,"STRONG",{});var uat=s(yie);K6o=r(uat,"wavlm"),uat.forEach(t),Z6o=r(zye," \u2014 "),kq=n(zye,"A",{href:!0});var bat=s(kq);eTo=r(bat,"WavLMModel"),bat.forEach(t),oTo=r(zye," (WavLM model)"),zye.forEach(t),rTo=i($),K_=n($,"LI",{});var Wye=s(K_);Lie=n(Wye,"STRONG",{});var vat=s(Lie);tTo=r(vat,"xglm"),vat.forEach(t),aTo=r(Wye," \u2014 "),Sq=n(Wye,"A",{href:!0});var Fat=s(Sq);nTo=r(Fat,"XGLMModel"),Fat.forEach(t),sTo=r(Wye," (XGLM model)"),Wye.forEach(t),lTo=i($),Z_=n($,"LI",{});var Qye=s(Z_);xie=n(Qye,"STRONG",{});var Tat=s(xie);iTo=r(Tat,"xlm"),Tat.forEach(t),dTo=r(Qye," \u2014 "),Rq=n(Qye,"A",{href:!0});var Mat=s(Rq);cTo=r(Mat,"XLMModel"),Mat.forEach(t),fTo=r(Qye," (XLM model)"),Qye.forEach(t),mTo=i($),eu=n($,"LI",{});var Hye=s(eu);$ie=n(Hye,"STRONG",{});var Eat=s($ie);gTo=r(Eat,"xlm-prophetnet"),Eat.forEach(t),hTo=r(Hye," \u2014 "),Pq=n(Hye,"A",{href:!0});var Cat=s(Pq);pTo=r(Cat,"XLMProphetNetModel"),Cat.forEach(t),_To=r(Hye," (XLMProphetNet model)"),Hye.forEach(t),uTo=i($),ou=n($,"LI",{});var Uye=s(ou);kie=n(Uye,"STRONG",{});var wat=s(kie);bTo=r(wat,"xlm-roberta"),wat.forEach(t),vTo=r(Uye," \u2014 "),Bq=n(Uye,"A",{href:!0});var Aat=s(Bq);FTo=r(Aat,"XLMRobertaModel"),Aat.forEach(t),TTo=r(Uye," (XLM-RoBERTa model)"),Uye.forEach(t),MTo=i($),ru=n($,"LI",{});var Jye=s(ru);Sie=n(Jye,"STRONG",{});var yat=s(Sie);ETo=r(yat,"xlm-roberta-xl"),yat.forEach(t),CTo=r(Jye," \u2014 "),Iq=n(Jye,"A",{href:!0});var Lat=s(Iq);wTo=r(Lat,"XLMRobertaXLModel"),Lat.forEach(t),ATo=r(Jye," (XLM-RoBERTa-XL model)"),Jye.forEach(t),yTo=i($),tu=n($,"LI",{});var Yye=s(tu);Rie=n(Yye,"STRONG",{});var xat=s(Rie);LTo=r(xat,"xlnet"),xat.forEach(t),xTo=r(Yye," \u2014 "),Nq=n(Yye,"A",{href:!0});var $at=s(Nq);$To=r($at,"XLNetModel"),$at.forEach(t),kTo=r(Yye," (XLNet model)"),Yye.forEach(t),STo=i($),au=n($,"LI",{});var Kye=s(au);Pie=n(Kye,"STRONG",{});var kat=s(Pie);RTo=r(kat,"yolos"),kat.forEach(t),PTo=r(Kye," \u2014 "),qq=n(Kye,"A",{href:!0});var Sat=s(qq);BTo=r(Sat,"YolosModel"),Sat.forEach(t),ITo=r(Kye," (YOLOS model)"),Kye.forEach(t),NTo=i($),nu=n($,"LI",{});var Zye=s(nu);Bie=n(Zye,"STRONG",{});var Rat=s(Bie);qTo=r(Rat,"yoso"),Rat.forEach(t),jTo=r(Zye," \u2014 "),jq=n(Zye,"A",{href:!0});var Pat=s(jq);DTo=r(Pat,"YosoModel"),Pat.forEach(t),GTo=r(Zye," (YOSO model)"),Zye.forEach(t),$.forEach(t),OTo=i(oa),su=n(oa,"P",{});var eLe=s(su);VTo=r(eLe,"The model is set in evaluation mode by default using "),Iie=n(eLe,"CODE",{});var Bat=s(Iie);XTo=r(Bat,"model.eval()"),Bat.forEach(t),zTo=r(eLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nie=n(eLe,"CODE",{});var Iat=s(Nie);WTo=r(Iat,"model.train()"),Iat.forEach(t),eLe.forEach(t),QTo=i(oa),T(lu.$$.fragment,oa),oa.forEach(t),Os.forEach(t),qqe=i(f),xi=n(f,"H2",{class:!0});var ODe=s(xi);iu=n(ODe,"A",{id:!0,class:!0,href:!0});var Nat=s(iu);qie=n(Nat,"SPAN",{});var qat=s(qie);T(cy.$$.fragment,qat),qat.forEach(t),Nat.forEach(t),HTo=i(ODe),jie=n(ODe,"SPAN",{});var jat=s(jie);UTo=r(jat,"AutoModelForPreTraining"),jat.forEach(t),ODe.forEach(t),jqe=i(f),xo=n(f,"DIV",{class:!0});var Vs=s(xo);T(fy.$$.fragment,Vs),JTo=i(Vs),$i=n(Vs,"P",{});var kZ=s($i);YTo=r(kZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Dq=n(kZ,"A",{href:!0});var Dat=s(Dq);KTo=r(Dat,"from_pretrained()"),Dat.forEach(t),ZTo=r(kZ," class method or the "),Gq=n(kZ,"A",{href:!0});var Gat=s(Gq);e7o=r(Gat,"from_config()"),Gat.forEach(t),o7o=r(kZ,` class
method.`),kZ.forEach(t),r7o=i(Vs),my=n(Vs,"P",{});var VDe=s(my);t7o=r(VDe,"This class cannot be instantiated directly using "),Die=n(VDe,"CODE",{});var Oat=s(Die);a7o=r(Oat,"__init__()"),Oat.forEach(t),n7o=r(VDe," (throws an error)."),VDe.forEach(t),s7o=i(Vs),at=n(Vs,"DIV",{class:!0});var jw=s(at);T(gy.$$.fragment,jw),l7o=i(jw),Gie=n(jw,"P",{});var Vat=s(Gie);i7o=r(Vat,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Vat.forEach(t),d7o=i(jw),ki=n(jw,"P",{});var SZ=s(ki);c7o=r(SZ,`Note:
Loading a model from its configuration file does `),Oie=n(SZ,"STRONG",{});var Xat=s(Oie);f7o=r(Xat,"not"),Xat.forEach(t),m7o=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oq=n(SZ,"A",{href:!0});var zat=s(Oq);g7o=r(zat,"from_pretrained()"),zat.forEach(t),h7o=r(SZ," to load the model weights."),SZ.forEach(t),p7o=i(jw),T(du.$$.fragment,jw),jw.forEach(t),_7o=i(Vs),Ye=n(Vs,"DIV",{class:!0});var ra=s(Ye);T(hy.$$.fragment,ra),u7o=i(ra),Vie=n(ra,"P",{});var Wat=s(Vie);b7o=r(Wat,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Wat.forEach(t),v7o=i(ra),xa=n(ra,"P",{});var Dw=s(xa);F7o=r(Dw,"The model class to instantiate is selected based on the "),Xie=n(Dw,"CODE",{});var Qat=s(Xie);T7o=r(Qat,"model_type"),Qat.forEach(t),M7o=r(Dw,` property of the config object (either
passed as an argument or loaded from `),zie=n(Dw,"CODE",{});var Hat=s(zie);E7o=r(Hat,"pretrained_model_name_or_path"),Hat.forEach(t),C7o=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wie=n(Dw,"CODE",{});var Uat=s(Wie);w7o=r(Uat,"pretrained_model_name_or_path"),Uat.forEach(t),A7o=r(Dw,":"),Dw.forEach(t),y7o=i(ra),G=n(ra,"UL",{});var O=s(G);cu=n(O,"LI",{});var oLe=s(cu);Qie=n(oLe,"STRONG",{});var Jat=s(Qie);L7o=r(Jat,"albert"),Jat.forEach(t),x7o=r(oLe," \u2014 "),Vq=n(oLe,"A",{href:!0});var Yat=s(Vq);$7o=r(Yat,"AlbertForPreTraining"),Yat.forEach(t),k7o=r(oLe," (ALBERT model)"),oLe.forEach(t),S7o=i(O),fu=n(O,"LI",{});var rLe=s(fu);Hie=n(rLe,"STRONG",{});var Kat=s(Hie);R7o=r(Kat,"bart"),Kat.forEach(t),P7o=r(rLe," \u2014 "),Xq=n(rLe,"A",{href:!0});var Zat=s(Xq);B7o=r(Zat,"BartForConditionalGeneration"),Zat.forEach(t),I7o=r(rLe," (BART model)"),rLe.forEach(t),N7o=i(O),mu=n(O,"LI",{});var tLe=s(mu);Uie=n(tLe,"STRONG",{});var ent=s(Uie);q7o=r(ent,"bert"),ent.forEach(t),j7o=r(tLe," \u2014 "),zq=n(tLe,"A",{href:!0});var ont=s(zq);D7o=r(ont,"BertForPreTraining"),ont.forEach(t),G7o=r(tLe," (BERT model)"),tLe.forEach(t),O7o=i(O),gu=n(O,"LI",{});var aLe=s(gu);Jie=n(aLe,"STRONG",{});var rnt=s(Jie);V7o=r(rnt,"big_bird"),rnt.forEach(t),X7o=r(aLe," \u2014 "),Wq=n(aLe,"A",{href:!0});var tnt=s(Wq);z7o=r(tnt,"BigBirdForPreTraining"),tnt.forEach(t),W7o=r(aLe," (BigBird model)"),aLe.forEach(t),Q7o=i(O),hu=n(O,"LI",{});var nLe=s(hu);Yie=n(nLe,"STRONG",{});var ant=s(Yie);H7o=r(ant,"camembert"),ant.forEach(t),U7o=r(nLe," \u2014 "),Qq=n(nLe,"A",{href:!0});var nnt=s(Qq);J7o=r(nnt,"CamembertForMaskedLM"),nnt.forEach(t),Y7o=r(nLe," (CamemBERT model)"),nLe.forEach(t),K7o=i(O),pu=n(O,"LI",{});var sLe=s(pu);Kie=n(sLe,"STRONG",{});var snt=s(Kie);Z7o=r(snt,"ctrl"),snt.forEach(t),eMo=r(sLe," \u2014 "),Hq=n(sLe,"A",{href:!0});var lnt=s(Hq);oMo=r(lnt,"CTRLLMHeadModel"),lnt.forEach(t),rMo=r(sLe," (CTRL model)"),sLe.forEach(t),tMo=i(O),_u=n(O,"LI",{});var lLe=s(_u);Zie=n(lLe,"STRONG",{});var int=s(Zie);aMo=r(int,"data2vec-text"),int.forEach(t),nMo=r(lLe," \u2014 "),Uq=n(lLe,"A",{href:!0});var dnt=s(Uq);sMo=r(dnt,"Data2VecTextForMaskedLM"),dnt.forEach(t),lMo=r(lLe," (Data2VecText model)"),lLe.forEach(t),iMo=i(O),uu=n(O,"LI",{});var iLe=s(uu);ede=n(iLe,"STRONG",{});var cnt=s(ede);dMo=r(cnt,"deberta"),cnt.forEach(t),cMo=r(iLe," \u2014 "),Jq=n(iLe,"A",{href:!0});var fnt=s(Jq);fMo=r(fnt,"DebertaForMaskedLM"),fnt.forEach(t),mMo=r(iLe," (DeBERTa model)"),iLe.forEach(t),gMo=i(O),bu=n(O,"LI",{});var dLe=s(bu);ode=n(dLe,"STRONG",{});var mnt=s(ode);hMo=r(mnt,"deberta-v2"),mnt.forEach(t),pMo=r(dLe," \u2014 "),Yq=n(dLe,"A",{href:!0});var gnt=s(Yq);_Mo=r(gnt,"DebertaV2ForMaskedLM"),gnt.forEach(t),uMo=r(dLe," (DeBERTa-v2 model)"),dLe.forEach(t),bMo=i(O),vu=n(O,"LI",{});var cLe=s(vu);rde=n(cLe,"STRONG",{});var hnt=s(rde);vMo=r(hnt,"distilbert"),hnt.forEach(t),FMo=r(cLe," \u2014 "),Kq=n(cLe,"A",{href:!0});var pnt=s(Kq);TMo=r(pnt,"DistilBertForMaskedLM"),pnt.forEach(t),MMo=r(cLe," (DistilBERT model)"),cLe.forEach(t),EMo=i(O),Fu=n(O,"LI",{});var fLe=s(Fu);tde=n(fLe,"STRONG",{});var _nt=s(tde);CMo=r(_nt,"electra"),_nt.forEach(t),wMo=r(fLe," \u2014 "),Zq=n(fLe,"A",{href:!0});var unt=s(Zq);AMo=r(unt,"ElectraForPreTraining"),unt.forEach(t),yMo=r(fLe," (ELECTRA model)"),fLe.forEach(t),LMo=i(O),Tu=n(O,"LI",{});var mLe=s(Tu);ade=n(mLe,"STRONG",{});var bnt=s(ade);xMo=r(bnt,"flaubert"),bnt.forEach(t),$Mo=r(mLe," \u2014 "),ej=n(mLe,"A",{href:!0});var vnt=s(ej);kMo=r(vnt,"FlaubertWithLMHeadModel"),vnt.forEach(t),SMo=r(mLe," (FlauBERT model)"),mLe.forEach(t),RMo=i(O),Mu=n(O,"LI",{});var gLe=s(Mu);nde=n(gLe,"STRONG",{});var Fnt=s(nde);PMo=r(Fnt,"flava"),Fnt.forEach(t),BMo=r(gLe," \u2014 "),oj=n(gLe,"A",{href:!0});var Tnt=s(oj);IMo=r(Tnt,"FlavaForPreTraining"),Tnt.forEach(t),NMo=r(gLe," (Flava model)"),gLe.forEach(t),qMo=i(O),Eu=n(O,"LI",{});var hLe=s(Eu);sde=n(hLe,"STRONG",{});var Mnt=s(sde);jMo=r(Mnt,"fnet"),Mnt.forEach(t),DMo=r(hLe," \u2014 "),rj=n(hLe,"A",{href:!0});var Ent=s(rj);GMo=r(Ent,"FNetForPreTraining"),Ent.forEach(t),OMo=r(hLe," (FNet model)"),hLe.forEach(t),VMo=i(O),Cu=n(O,"LI",{});var pLe=s(Cu);lde=n(pLe,"STRONG",{});var Cnt=s(lde);XMo=r(Cnt,"fsmt"),Cnt.forEach(t),zMo=r(pLe," \u2014 "),tj=n(pLe,"A",{href:!0});var wnt=s(tj);WMo=r(wnt,"FSMTForConditionalGeneration"),wnt.forEach(t),QMo=r(pLe," (FairSeq Machine-Translation model)"),pLe.forEach(t),HMo=i(O),wu=n(O,"LI",{});var _Le=s(wu);ide=n(_Le,"STRONG",{});var Ant=s(ide);UMo=r(Ant,"funnel"),Ant.forEach(t),JMo=r(_Le," \u2014 "),aj=n(_Le,"A",{href:!0});var ynt=s(aj);YMo=r(ynt,"FunnelForPreTraining"),ynt.forEach(t),KMo=r(_Le," (Funnel Transformer model)"),_Le.forEach(t),ZMo=i(O),Au=n(O,"LI",{});var uLe=s(Au);dde=n(uLe,"STRONG",{});var Lnt=s(dde);eEo=r(Lnt,"gpt2"),Lnt.forEach(t),oEo=r(uLe," \u2014 "),nj=n(uLe,"A",{href:!0});var xnt=s(nj);rEo=r(xnt,"GPT2LMHeadModel"),xnt.forEach(t),tEo=r(uLe," (OpenAI GPT-2 model)"),uLe.forEach(t),aEo=i(O),yu=n(O,"LI",{});var bLe=s(yu);cde=n(bLe,"STRONG",{});var $nt=s(cde);nEo=r($nt,"ibert"),$nt.forEach(t),sEo=r(bLe," \u2014 "),sj=n(bLe,"A",{href:!0});var knt=s(sj);lEo=r(knt,"IBertForMaskedLM"),knt.forEach(t),iEo=r(bLe," (I-BERT model)"),bLe.forEach(t),dEo=i(O),Lu=n(O,"LI",{});var vLe=s(Lu);fde=n(vLe,"STRONG",{});var Snt=s(fde);cEo=r(Snt,"layoutlm"),Snt.forEach(t),fEo=r(vLe," \u2014 "),lj=n(vLe,"A",{href:!0});var Rnt=s(lj);mEo=r(Rnt,"LayoutLMForMaskedLM"),Rnt.forEach(t),gEo=r(vLe," (LayoutLM model)"),vLe.forEach(t),hEo=i(O),xu=n(O,"LI",{});var FLe=s(xu);mde=n(FLe,"STRONG",{});var Pnt=s(mde);pEo=r(Pnt,"longformer"),Pnt.forEach(t),_Eo=r(FLe," \u2014 "),ij=n(FLe,"A",{href:!0});var Bnt=s(ij);uEo=r(Bnt,"LongformerForMaskedLM"),Bnt.forEach(t),bEo=r(FLe," (Longformer model)"),FLe.forEach(t),vEo=i(O),$u=n(O,"LI",{});var TLe=s($u);gde=n(TLe,"STRONG",{});var Int=s(gde);FEo=r(Int,"lxmert"),Int.forEach(t),TEo=r(TLe," \u2014 "),dj=n(TLe,"A",{href:!0});var Nnt=s(dj);MEo=r(Nnt,"LxmertForPreTraining"),Nnt.forEach(t),EEo=r(TLe," (LXMERT model)"),TLe.forEach(t),CEo=i(O),ku=n(O,"LI",{});var MLe=s(ku);hde=n(MLe,"STRONG",{});var qnt=s(hde);wEo=r(qnt,"megatron-bert"),qnt.forEach(t),AEo=r(MLe," \u2014 "),cj=n(MLe,"A",{href:!0});var jnt=s(cj);yEo=r(jnt,"MegatronBertForPreTraining"),jnt.forEach(t),LEo=r(MLe," (MegatronBert model)"),MLe.forEach(t),xEo=i(O),Su=n(O,"LI",{});var ELe=s(Su);pde=n(ELe,"STRONG",{});var Dnt=s(pde);$Eo=r(Dnt,"mobilebert"),Dnt.forEach(t),kEo=r(ELe," \u2014 "),fj=n(ELe,"A",{href:!0});var Gnt=s(fj);SEo=r(Gnt,"MobileBertForPreTraining"),Gnt.forEach(t),REo=r(ELe," (MobileBERT model)"),ELe.forEach(t),PEo=i(O),Ru=n(O,"LI",{});var CLe=s(Ru);_de=n(CLe,"STRONG",{});var Ont=s(_de);BEo=r(Ont,"mpnet"),Ont.forEach(t),IEo=r(CLe," \u2014 "),mj=n(CLe,"A",{href:!0});var Vnt=s(mj);NEo=r(Vnt,"MPNetForMaskedLM"),Vnt.forEach(t),qEo=r(CLe," (MPNet model)"),CLe.forEach(t),jEo=i(O),Pu=n(O,"LI",{});var wLe=s(Pu);ude=n(wLe,"STRONG",{});var Xnt=s(ude);DEo=r(Xnt,"openai-gpt"),Xnt.forEach(t),GEo=r(wLe," \u2014 "),gj=n(wLe,"A",{href:!0});var znt=s(gj);OEo=r(znt,"OpenAIGPTLMHeadModel"),znt.forEach(t),VEo=r(wLe," (OpenAI GPT model)"),wLe.forEach(t),XEo=i(O),Bu=n(O,"LI",{});var ALe=s(Bu);bde=n(ALe,"STRONG",{});var Wnt=s(bde);zEo=r(Wnt,"retribert"),Wnt.forEach(t),WEo=r(ALe," \u2014 "),hj=n(ALe,"A",{href:!0});var Qnt=s(hj);QEo=r(Qnt,"RetriBertModel"),Qnt.forEach(t),HEo=r(ALe," (RetriBERT model)"),ALe.forEach(t),UEo=i(O),Iu=n(O,"LI",{});var yLe=s(Iu);vde=n(yLe,"STRONG",{});var Hnt=s(vde);JEo=r(Hnt,"roberta"),Hnt.forEach(t),YEo=r(yLe," \u2014 "),pj=n(yLe,"A",{href:!0});var Unt=s(pj);KEo=r(Unt,"RobertaForMaskedLM"),Unt.forEach(t),ZEo=r(yLe," (RoBERTa model)"),yLe.forEach(t),eCo=i(O),Nu=n(O,"LI",{});var LLe=s(Nu);Fde=n(LLe,"STRONG",{});var Jnt=s(Fde);oCo=r(Jnt,"splinter"),Jnt.forEach(t),rCo=r(LLe," \u2014 "),_j=n(LLe,"A",{href:!0});var Ynt=s(_j);tCo=r(Ynt,"SplinterForPreTraining"),Ynt.forEach(t),aCo=r(LLe," (Splinter model)"),LLe.forEach(t),nCo=i(O),qu=n(O,"LI",{});var xLe=s(qu);Tde=n(xLe,"STRONG",{});var Knt=s(Tde);sCo=r(Knt,"squeezebert"),Knt.forEach(t),lCo=r(xLe," \u2014 "),uj=n(xLe,"A",{href:!0});var Znt=s(uj);iCo=r(Znt,"SqueezeBertForMaskedLM"),Znt.forEach(t),dCo=r(xLe," (SqueezeBERT model)"),xLe.forEach(t),cCo=i(O),ju=n(O,"LI",{});var $Le=s(ju);Mde=n($Le,"STRONG",{});var est=s(Mde);fCo=r(est,"t5"),est.forEach(t),mCo=r($Le," \u2014 "),bj=n($Le,"A",{href:!0});var ost=s(bj);gCo=r(ost,"T5ForConditionalGeneration"),ost.forEach(t),hCo=r($Le," (T5 model)"),$Le.forEach(t),pCo=i(O),Du=n(O,"LI",{});var kLe=s(Du);Ede=n(kLe,"STRONG",{});var rst=s(Ede);_Co=r(rst,"tapas"),rst.forEach(t),uCo=r(kLe," \u2014 "),vj=n(kLe,"A",{href:!0});var tst=s(vj);bCo=r(tst,"TapasForMaskedLM"),tst.forEach(t),vCo=r(kLe," (TAPAS model)"),kLe.forEach(t),FCo=i(O),Gu=n(O,"LI",{});var SLe=s(Gu);Cde=n(SLe,"STRONG",{});var ast=s(Cde);TCo=r(ast,"transfo-xl"),ast.forEach(t),MCo=r(SLe," \u2014 "),Fj=n(SLe,"A",{href:!0});var nst=s(Fj);ECo=r(nst,"TransfoXLLMHeadModel"),nst.forEach(t),CCo=r(SLe," (Transformer-XL model)"),SLe.forEach(t),wCo=i(O),Ou=n(O,"LI",{});var RLe=s(Ou);wde=n(RLe,"STRONG",{});var sst=s(wde);ACo=r(sst,"unispeech"),sst.forEach(t),yCo=r(RLe," \u2014 "),Tj=n(RLe,"A",{href:!0});var lst=s(Tj);LCo=r(lst,"UniSpeechForPreTraining"),lst.forEach(t),xCo=r(RLe," (UniSpeech model)"),RLe.forEach(t),$Co=i(O),Vu=n(O,"LI",{});var PLe=s(Vu);Ade=n(PLe,"STRONG",{});var ist=s(Ade);kCo=r(ist,"unispeech-sat"),ist.forEach(t),SCo=r(PLe," \u2014 "),Mj=n(PLe,"A",{href:!0});var dst=s(Mj);RCo=r(dst,"UniSpeechSatForPreTraining"),dst.forEach(t),PCo=r(PLe," (UniSpeechSat model)"),PLe.forEach(t),BCo=i(O),Xu=n(O,"LI",{});var BLe=s(Xu);yde=n(BLe,"STRONG",{});var cst=s(yde);ICo=r(cst,"visual_bert"),cst.forEach(t),NCo=r(BLe," \u2014 "),Ej=n(BLe,"A",{href:!0});var fst=s(Ej);qCo=r(fst,"VisualBertForPreTraining"),fst.forEach(t),jCo=r(BLe," (VisualBert model)"),BLe.forEach(t),DCo=i(O),zu=n(O,"LI",{});var ILe=s(zu);Lde=n(ILe,"STRONG",{});var mst=s(Lde);GCo=r(mst,"vit_mae"),mst.forEach(t),OCo=r(ILe," \u2014 "),Cj=n(ILe,"A",{href:!0});var gst=s(Cj);VCo=r(gst,"ViTMAEForPreTraining"),gst.forEach(t),XCo=r(ILe," (ViTMAE model)"),ILe.forEach(t),zCo=i(O),Wu=n(O,"LI",{});var NLe=s(Wu);xde=n(NLe,"STRONG",{});var hst=s(xde);WCo=r(hst,"wav2vec2"),hst.forEach(t),QCo=r(NLe," \u2014 "),wj=n(NLe,"A",{href:!0});var pst=s(wj);HCo=r(pst,"Wav2Vec2ForPreTraining"),pst.forEach(t),UCo=r(NLe," (Wav2Vec2 model)"),NLe.forEach(t),JCo=i(O),Qu=n(O,"LI",{});var qLe=s(Qu);$de=n(qLe,"STRONG",{});var _st=s($de);YCo=r(_st,"wav2vec2-conformer"),_st.forEach(t),KCo=r(qLe," \u2014 "),Aj=n(qLe,"A",{href:!0});var ust=s(Aj);ZCo=r(ust,"Wav2Vec2ConformerForPreTraining"),ust.forEach(t),e5o=r(qLe," (Wav2Vec2-Conformer model)"),qLe.forEach(t),o5o=i(O),Hu=n(O,"LI",{});var jLe=s(Hu);kde=n(jLe,"STRONG",{});var bst=s(kde);r5o=r(bst,"xlm"),bst.forEach(t),t5o=r(jLe," \u2014 "),yj=n(jLe,"A",{href:!0});var vst=s(yj);a5o=r(vst,"XLMWithLMHeadModel"),vst.forEach(t),n5o=r(jLe," (XLM model)"),jLe.forEach(t),s5o=i(O),Uu=n(O,"LI",{});var DLe=s(Uu);Sde=n(DLe,"STRONG",{});var Fst=s(Sde);l5o=r(Fst,"xlm-roberta"),Fst.forEach(t),i5o=r(DLe," \u2014 "),Lj=n(DLe,"A",{href:!0});var Tst=s(Lj);d5o=r(Tst,"XLMRobertaForMaskedLM"),Tst.forEach(t),c5o=r(DLe," (XLM-RoBERTa model)"),DLe.forEach(t),f5o=i(O),Ju=n(O,"LI",{});var GLe=s(Ju);Rde=n(GLe,"STRONG",{});var Mst=s(Rde);m5o=r(Mst,"xlm-roberta-xl"),Mst.forEach(t),g5o=r(GLe," \u2014 "),xj=n(GLe,"A",{href:!0});var Est=s(xj);h5o=r(Est,"XLMRobertaXLForMaskedLM"),Est.forEach(t),p5o=r(GLe," (XLM-RoBERTa-XL model)"),GLe.forEach(t),_5o=i(O),Yu=n(O,"LI",{});var OLe=s(Yu);Pde=n(OLe,"STRONG",{});var Cst=s(Pde);u5o=r(Cst,"xlnet"),Cst.forEach(t),b5o=r(OLe," \u2014 "),$j=n(OLe,"A",{href:!0});var wst=s($j);v5o=r(wst,"XLNetLMHeadModel"),wst.forEach(t),F5o=r(OLe," (XLNet model)"),OLe.forEach(t),O.forEach(t),T5o=i(ra),Ku=n(ra,"P",{});var VLe=s(Ku);M5o=r(VLe,"The model is set in evaluation mode by default using "),Bde=n(VLe,"CODE",{});var Ast=s(Bde);E5o=r(Ast,"model.eval()"),Ast.forEach(t),C5o=r(VLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ide=n(VLe,"CODE",{});var yst=s(Ide);w5o=r(yst,"model.train()"),yst.forEach(t),VLe.forEach(t),A5o=i(ra),T(Zu.$$.fragment,ra),ra.forEach(t),Vs.forEach(t),Dqe=i(f),Si=n(f,"H2",{class:!0});var XDe=s(Si);e1=n(XDe,"A",{id:!0,class:!0,href:!0});var Lst=s(e1);Nde=n(Lst,"SPAN",{});var xst=s(Nde);T(py.$$.fragment,xst),xst.forEach(t),Lst.forEach(t),y5o=i(XDe),qde=n(XDe,"SPAN",{});var $st=s(qde);L5o=r($st,"AutoModelForCausalLM"),$st.forEach(t),XDe.forEach(t),Gqe=i(f),$o=n(f,"DIV",{class:!0});var Xs=s($o);T(_y.$$.fragment,Xs),x5o=i(Xs),Ri=n(Xs,"P",{});var RZ=s(Ri);$5o=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),kj=n(RZ,"A",{href:!0});var kst=s(kj);k5o=r(kst,"from_pretrained()"),kst.forEach(t),S5o=r(RZ," class method or the "),Sj=n(RZ,"A",{href:!0});var Sst=s(Sj);R5o=r(Sst,"from_config()"),Sst.forEach(t),P5o=r(RZ,` class
method.`),RZ.forEach(t),B5o=i(Xs),uy=n(Xs,"P",{});var zDe=s(uy);I5o=r(zDe,"This class cannot be instantiated directly using "),jde=n(zDe,"CODE",{});var Rst=s(jde);N5o=r(Rst,"__init__()"),Rst.forEach(t),q5o=r(zDe," (throws an error)."),zDe.forEach(t),j5o=i(Xs),nt=n(Xs,"DIV",{class:!0});var Gw=s(nt);T(by.$$.fragment,Gw),D5o=i(Gw),Dde=n(Gw,"P",{});var Pst=s(Dde);G5o=r(Pst,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Pst.forEach(t),O5o=i(Gw),Pi=n(Gw,"P",{});var PZ=s(Pi);V5o=r(PZ,`Note:
Loading a model from its configuration file does `),Gde=n(PZ,"STRONG",{});var Bst=s(Gde);X5o=r(Bst,"not"),Bst.forEach(t),z5o=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rj=n(PZ,"A",{href:!0});var Ist=s(Rj);W5o=r(Ist,"from_pretrained()"),Ist.forEach(t),Q5o=r(PZ," to load the model weights."),PZ.forEach(t),H5o=i(Gw),T(o1.$$.fragment,Gw),Gw.forEach(t),U5o=i(Xs),Ke=n(Xs,"DIV",{class:!0});var ta=s(Ke);T(vy.$$.fragment,ta),J5o=i(ta),Ode=n(ta,"P",{});var Nst=s(Ode);Y5o=r(Nst,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Nst.forEach(t),K5o=i(ta),$a=n(ta,"P",{});var Ow=s($a);Z5o=r(Ow,"The model class to instantiate is selected based on the "),Vde=n(Ow,"CODE",{});var qst=s(Vde);e3o=r(qst,"model_type"),qst.forEach(t),o3o=r(Ow,` property of the config object (either
passed as an argument or loaded from `),Xde=n(Ow,"CODE",{});var jst=s(Xde);r3o=r(jst,"pretrained_model_name_or_path"),jst.forEach(t),t3o=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zde=n(Ow,"CODE",{});var Dst=s(zde);a3o=r(Dst,"pretrained_model_name_or_path"),Dst.forEach(t),n3o=r(Ow,":"),Ow.forEach(t),s3o=i(ta),z=n(ta,"UL",{});var W=s(z);r1=n(W,"LI",{});var XLe=s(r1);Wde=n(XLe,"STRONG",{});var Gst=s(Wde);l3o=r(Gst,"bart"),Gst.forEach(t),i3o=r(XLe," \u2014 "),Pj=n(XLe,"A",{href:!0});var Ost=s(Pj);d3o=r(Ost,"BartForCausalLM"),Ost.forEach(t),c3o=r(XLe," (BART model)"),XLe.forEach(t),f3o=i(W),t1=n(W,"LI",{});var zLe=s(t1);Qde=n(zLe,"STRONG",{});var Vst=s(Qde);m3o=r(Vst,"bert"),Vst.forEach(t),g3o=r(zLe," \u2014 "),Bj=n(zLe,"A",{href:!0});var Xst=s(Bj);h3o=r(Xst,"BertLMHeadModel"),Xst.forEach(t),p3o=r(zLe," (BERT model)"),zLe.forEach(t),_3o=i(W),a1=n(W,"LI",{});var WLe=s(a1);Hde=n(WLe,"STRONG",{});var zst=s(Hde);u3o=r(zst,"bert-generation"),zst.forEach(t),b3o=r(WLe," \u2014 "),Ij=n(WLe,"A",{href:!0});var Wst=s(Ij);v3o=r(Wst,"BertGenerationDecoder"),Wst.forEach(t),F3o=r(WLe," (Bert Generation model)"),WLe.forEach(t),T3o=i(W),n1=n(W,"LI",{});var QLe=s(n1);Ude=n(QLe,"STRONG",{});var Qst=s(Ude);M3o=r(Qst,"big_bird"),Qst.forEach(t),E3o=r(QLe," \u2014 "),Nj=n(QLe,"A",{href:!0});var Hst=s(Nj);C3o=r(Hst,"BigBirdForCausalLM"),Hst.forEach(t),w3o=r(QLe," (BigBird model)"),QLe.forEach(t),A3o=i(W),s1=n(W,"LI",{});var HLe=s(s1);Jde=n(HLe,"STRONG",{});var Ust=s(Jde);y3o=r(Ust,"bigbird_pegasus"),Ust.forEach(t),L3o=r(HLe," \u2014 "),qj=n(HLe,"A",{href:!0});var Jst=s(qj);x3o=r(Jst,"BigBirdPegasusForCausalLM"),Jst.forEach(t),$3o=r(HLe," (BigBirdPegasus model)"),HLe.forEach(t),k3o=i(W),l1=n(W,"LI",{});var ULe=s(l1);Yde=n(ULe,"STRONG",{});var Yst=s(Yde);S3o=r(Yst,"blenderbot"),Yst.forEach(t),R3o=r(ULe," \u2014 "),jj=n(ULe,"A",{href:!0});var Kst=s(jj);P3o=r(Kst,"BlenderbotForCausalLM"),Kst.forEach(t),B3o=r(ULe," (Blenderbot model)"),ULe.forEach(t),I3o=i(W),i1=n(W,"LI",{});var JLe=s(i1);Kde=n(JLe,"STRONG",{});var Zst=s(Kde);N3o=r(Zst,"blenderbot-small"),Zst.forEach(t),q3o=r(JLe," \u2014 "),Dj=n(JLe,"A",{href:!0});var elt=s(Dj);j3o=r(elt,"BlenderbotSmallForCausalLM"),elt.forEach(t),D3o=r(JLe," (BlenderbotSmall model)"),JLe.forEach(t),G3o=i(W),d1=n(W,"LI",{});var YLe=s(d1);Zde=n(YLe,"STRONG",{});var olt=s(Zde);O3o=r(olt,"camembert"),olt.forEach(t),V3o=r(YLe," \u2014 "),Gj=n(YLe,"A",{href:!0});var rlt=s(Gj);X3o=r(rlt,"CamembertForCausalLM"),rlt.forEach(t),z3o=r(YLe," (CamemBERT model)"),YLe.forEach(t),W3o=i(W),c1=n(W,"LI",{});var KLe=s(c1);ece=n(KLe,"STRONG",{});var tlt=s(ece);Q3o=r(tlt,"ctrl"),tlt.forEach(t),H3o=r(KLe," \u2014 "),Oj=n(KLe,"A",{href:!0});var alt=s(Oj);U3o=r(alt,"CTRLLMHeadModel"),alt.forEach(t),J3o=r(KLe," (CTRL model)"),KLe.forEach(t),Y3o=i(W),f1=n(W,"LI",{});var ZLe=s(f1);oce=n(ZLe,"STRONG",{});var nlt=s(oce);K3o=r(nlt,"data2vec-text"),nlt.forEach(t),Z3o=r(ZLe," \u2014 "),Vj=n(ZLe,"A",{href:!0});var slt=s(Vj);ewo=r(slt,"Data2VecTextForCausalLM"),slt.forEach(t),owo=r(ZLe," (Data2VecText model)"),ZLe.forEach(t),rwo=i(W),m1=n(W,"LI",{});var e8e=s(m1);rce=n(e8e,"STRONG",{});var llt=s(rce);two=r(llt,"electra"),llt.forEach(t),awo=r(e8e," \u2014 "),Xj=n(e8e,"A",{href:!0});var ilt=s(Xj);nwo=r(ilt,"ElectraForCausalLM"),ilt.forEach(t),swo=r(e8e," (ELECTRA model)"),e8e.forEach(t),lwo=i(W),g1=n(W,"LI",{});var o8e=s(g1);tce=n(o8e,"STRONG",{});var dlt=s(tce);iwo=r(dlt,"gpt2"),dlt.forEach(t),dwo=r(o8e," \u2014 "),zj=n(o8e,"A",{href:!0});var clt=s(zj);cwo=r(clt,"GPT2LMHeadModel"),clt.forEach(t),fwo=r(o8e," (OpenAI GPT-2 model)"),o8e.forEach(t),mwo=i(W),h1=n(W,"LI",{});var r8e=s(h1);ace=n(r8e,"STRONG",{});var flt=s(ace);gwo=r(flt,"gpt_neo"),flt.forEach(t),hwo=r(r8e," \u2014 "),Wj=n(r8e,"A",{href:!0});var mlt=s(Wj);pwo=r(mlt,"GPTNeoForCausalLM"),mlt.forEach(t),_wo=r(r8e," (GPT Neo model)"),r8e.forEach(t),uwo=i(W),p1=n(W,"LI",{});var t8e=s(p1);nce=n(t8e,"STRONG",{});var glt=s(nce);bwo=r(glt,"gpt_neox"),glt.forEach(t),vwo=r(t8e," \u2014 "),Qj=n(t8e,"A",{href:!0});var hlt=s(Qj);Fwo=r(hlt,"GPTNeoXForCausalLM"),hlt.forEach(t),Two=r(t8e," (GPT NeoX model)"),t8e.forEach(t),Mwo=i(W),_1=n(W,"LI",{});var a8e=s(_1);sce=n(a8e,"STRONG",{});var plt=s(sce);Ewo=r(plt,"gptj"),plt.forEach(t),Cwo=r(a8e," \u2014 "),Hj=n(a8e,"A",{href:!0});var _lt=s(Hj);wwo=r(_lt,"GPTJForCausalLM"),_lt.forEach(t),Awo=r(a8e," (GPT-J model)"),a8e.forEach(t),ywo=i(W),u1=n(W,"LI",{});var n8e=s(u1);lce=n(n8e,"STRONG",{});var ult=s(lce);Lwo=r(ult,"marian"),ult.forEach(t),xwo=r(n8e," \u2014 "),Uj=n(n8e,"A",{href:!0});var blt=s(Uj);$wo=r(blt,"MarianForCausalLM"),blt.forEach(t),kwo=r(n8e," (Marian model)"),n8e.forEach(t),Swo=i(W),b1=n(W,"LI",{});var s8e=s(b1);ice=n(s8e,"STRONG",{});var vlt=s(ice);Rwo=r(vlt,"mbart"),vlt.forEach(t),Pwo=r(s8e," \u2014 "),Jj=n(s8e,"A",{href:!0});var Flt=s(Jj);Bwo=r(Flt,"MBartForCausalLM"),Flt.forEach(t),Iwo=r(s8e," (mBART model)"),s8e.forEach(t),Nwo=i(W),v1=n(W,"LI",{});var l8e=s(v1);dce=n(l8e,"STRONG",{});var Tlt=s(dce);qwo=r(Tlt,"megatron-bert"),Tlt.forEach(t),jwo=r(l8e," \u2014 "),Yj=n(l8e,"A",{href:!0});var Mlt=s(Yj);Dwo=r(Mlt,"MegatronBertForCausalLM"),Mlt.forEach(t),Gwo=r(l8e," (MegatronBert model)"),l8e.forEach(t),Owo=i(W),F1=n(W,"LI",{});var i8e=s(F1);cce=n(i8e,"STRONG",{});var Elt=s(cce);Vwo=r(Elt,"openai-gpt"),Elt.forEach(t),Xwo=r(i8e," \u2014 "),Kj=n(i8e,"A",{href:!0});var Clt=s(Kj);zwo=r(Clt,"OpenAIGPTLMHeadModel"),Clt.forEach(t),Wwo=r(i8e," (OpenAI GPT model)"),i8e.forEach(t),Qwo=i(W),T1=n(W,"LI",{});var d8e=s(T1);fce=n(d8e,"STRONG",{});var wlt=s(fce);Hwo=r(wlt,"opt"),wlt.forEach(t),Uwo=r(d8e," \u2014 "),Zj=n(d8e,"A",{href:!0});var Alt=s(Zj);Jwo=r(Alt,"OPTForCausalLM"),Alt.forEach(t),Ywo=r(d8e," (OPT model)"),d8e.forEach(t),Kwo=i(W),M1=n(W,"LI",{});var c8e=s(M1);mce=n(c8e,"STRONG",{});var ylt=s(mce);Zwo=r(ylt,"pegasus"),ylt.forEach(t),e0o=r(c8e," \u2014 "),eD=n(c8e,"A",{href:!0});var Llt=s(eD);o0o=r(Llt,"PegasusForCausalLM"),Llt.forEach(t),r0o=r(c8e," (Pegasus model)"),c8e.forEach(t),t0o=i(W),E1=n(W,"LI",{});var f8e=s(E1);gce=n(f8e,"STRONG",{});var xlt=s(gce);a0o=r(xlt,"plbart"),xlt.forEach(t),n0o=r(f8e," \u2014 "),oD=n(f8e,"A",{href:!0});var $lt=s(oD);s0o=r($lt,"PLBartForCausalLM"),$lt.forEach(t),l0o=r(f8e," (PLBart model)"),f8e.forEach(t),i0o=i(W),C1=n(W,"LI",{});var m8e=s(C1);hce=n(m8e,"STRONG",{});var klt=s(hce);d0o=r(klt,"prophetnet"),klt.forEach(t),c0o=r(m8e," \u2014 "),rD=n(m8e,"A",{href:!0});var Slt=s(rD);f0o=r(Slt,"ProphetNetForCausalLM"),Slt.forEach(t),m0o=r(m8e," (ProphetNet model)"),m8e.forEach(t),g0o=i(W),w1=n(W,"LI",{});var g8e=s(w1);pce=n(g8e,"STRONG",{});var Rlt=s(pce);h0o=r(Rlt,"qdqbert"),Rlt.forEach(t),p0o=r(g8e," \u2014 "),tD=n(g8e,"A",{href:!0});var Plt=s(tD);_0o=r(Plt,"QDQBertLMHeadModel"),Plt.forEach(t),u0o=r(g8e," (QDQBert model)"),g8e.forEach(t),b0o=i(W),A1=n(W,"LI",{});var h8e=s(A1);_ce=n(h8e,"STRONG",{});var Blt=s(_ce);v0o=r(Blt,"reformer"),Blt.forEach(t),F0o=r(h8e," \u2014 "),aD=n(h8e,"A",{href:!0});var Ilt=s(aD);T0o=r(Ilt,"ReformerModelWithLMHead"),Ilt.forEach(t),M0o=r(h8e," (Reformer model)"),h8e.forEach(t),E0o=i(W),y1=n(W,"LI",{});var p8e=s(y1);uce=n(p8e,"STRONG",{});var Nlt=s(uce);C0o=r(Nlt,"rembert"),Nlt.forEach(t),w0o=r(p8e," \u2014 "),nD=n(p8e,"A",{href:!0});var qlt=s(nD);A0o=r(qlt,"RemBertForCausalLM"),qlt.forEach(t),y0o=r(p8e," (RemBERT model)"),p8e.forEach(t),L0o=i(W),L1=n(W,"LI",{});var _8e=s(L1);bce=n(_8e,"STRONG",{});var jlt=s(bce);x0o=r(jlt,"roberta"),jlt.forEach(t),$0o=r(_8e," \u2014 "),sD=n(_8e,"A",{href:!0});var Dlt=s(sD);k0o=r(Dlt,"RobertaForCausalLM"),Dlt.forEach(t),S0o=r(_8e," (RoBERTa model)"),_8e.forEach(t),R0o=i(W),x1=n(W,"LI",{});var u8e=s(x1);vce=n(u8e,"STRONG",{});var Glt=s(vce);P0o=r(Glt,"roformer"),Glt.forEach(t),B0o=r(u8e," \u2014 "),lD=n(u8e,"A",{href:!0});var Olt=s(lD);I0o=r(Olt,"RoFormerForCausalLM"),Olt.forEach(t),N0o=r(u8e," (RoFormer model)"),u8e.forEach(t),q0o=i(W),$1=n(W,"LI",{});var b8e=s($1);Fce=n(b8e,"STRONG",{});var Vlt=s(Fce);j0o=r(Vlt,"speech_to_text_2"),Vlt.forEach(t),D0o=r(b8e," \u2014 "),iD=n(b8e,"A",{href:!0});var Xlt=s(iD);G0o=r(Xlt,"Speech2Text2ForCausalLM"),Xlt.forEach(t),O0o=r(b8e," (Speech2Text2 model)"),b8e.forEach(t),V0o=i(W),k1=n(W,"LI",{});var v8e=s(k1);Tce=n(v8e,"STRONG",{});var zlt=s(Tce);X0o=r(zlt,"transfo-xl"),zlt.forEach(t),z0o=r(v8e," \u2014 "),dD=n(v8e,"A",{href:!0});var Wlt=s(dD);W0o=r(Wlt,"TransfoXLLMHeadModel"),Wlt.forEach(t),Q0o=r(v8e," (Transformer-XL model)"),v8e.forEach(t),H0o=i(W),S1=n(W,"LI",{});var F8e=s(S1);Mce=n(F8e,"STRONG",{});var Qlt=s(Mce);U0o=r(Qlt,"trocr"),Qlt.forEach(t),J0o=r(F8e," \u2014 "),cD=n(F8e,"A",{href:!0});var Hlt=s(cD);Y0o=r(Hlt,"TrOCRForCausalLM"),Hlt.forEach(t),K0o=r(F8e," (TrOCR model)"),F8e.forEach(t),Z0o=i(W),R1=n(W,"LI",{});var T8e=s(R1);Ece=n(T8e,"STRONG",{});var Ult=s(Ece);eAo=r(Ult,"xglm"),Ult.forEach(t),oAo=r(T8e," \u2014 "),fD=n(T8e,"A",{href:!0});var Jlt=s(fD);rAo=r(Jlt,"XGLMForCausalLM"),Jlt.forEach(t),tAo=r(T8e," (XGLM model)"),T8e.forEach(t),aAo=i(W),P1=n(W,"LI",{});var M8e=s(P1);Cce=n(M8e,"STRONG",{});var Ylt=s(Cce);nAo=r(Ylt,"xlm"),Ylt.forEach(t),sAo=r(M8e," \u2014 "),mD=n(M8e,"A",{href:!0});var Klt=s(mD);lAo=r(Klt,"XLMWithLMHeadModel"),Klt.forEach(t),iAo=r(M8e," (XLM model)"),M8e.forEach(t),dAo=i(W),B1=n(W,"LI",{});var E8e=s(B1);wce=n(E8e,"STRONG",{});var Zlt=s(wce);cAo=r(Zlt,"xlm-prophetnet"),Zlt.forEach(t),fAo=r(E8e," \u2014 "),gD=n(E8e,"A",{href:!0});var eit=s(gD);mAo=r(eit,"XLMProphetNetForCausalLM"),eit.forEach(t),gAo=r(E8e," (XLMProphetNet model)"),E8e.forEach(t),hAo=i(W),I1=n(W,"LI",{});var C8e=s(I1);Ace=n(C8e,"STRONG",{});var oit=s(Ace);pAo=r(oit,"xlm-roberta"),oit.forEach(t),_Ao=r(C8e," \u2014 "),hD=n(C8e,"A",{href:!0});var rit=s(hD);uAo=r(rit,"XLMRobertaForCausalLM"),rit.forEach(t),bAo=r(C8e," (XLM-RoBERTa model)"),C8e.forEach(t),vAo=i(W),N1=n(W,"LI",{});var w8e=s(N1);yce=n(w8e,"STRONG",{});var tit=s(yce);FAo=r(tit,"xlm-roberta-xl"),tit.forEach(t),TAo=r(w8e," \u2014 "),pD=n(w8e,"A",{href:!0});var ait=s(pD);MAo=r(ait,"XLMRobertaXLForCausalLM"),ait.forEach(t),EAo=r(w8e," (XLM-RoBERTa-XL model)"),w8e.forEach(t),CAo=i(W),q1=n(W,"LI",{});var A8e=s(q1);Lce=n(A8e,"STRONG",{});var nit=s(Lce);wAo=r(nit,"xlnet"),nit.forEach(t),AAo=r(A8e," \u2014 "),_D=n(A8e,"A",{href:!0});var sit=s(_D);yAo=r(sit,"XLNetLMHeadModel"),sit.forEach(t),LAo=r(A8e," (XLNet model)"),A8e.forEach(t),W.forEach(t),xAo=i(ta),j1=n(ta,"P",{});var y8e=s(j1);$Ao=r(y8e,"The model is set in evaluation mode by default using "),xce=n(y8e,"CODE",{});var lit=s(xce);kAo=r(lit,"model.eval()"),lit.forEach(t),SAo=r(y8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ce=n(y8e,"CODE",{});var iit=s($ce);RAo=r(iit,"model.train()"),iit.forEach(t),y8e.forEach(t),PAo=i(ta),T(D1.$$.fragment,ta),ta.forEach(t),Xs.forEach(t),Oqe=i(f),Bi=n(f,"H2",{class:!0});var WDe=s(Bi);G1=n(WDe,"A",{id:!0,class:!0,href:!0});var dit=s(G1);kce=n(dit,"SPAN",{});var cit=s(kce);T(Fy.$$.fragment,cit),cit.forEach(t),dit.forEach(t),BAo=i(WDe),Sce=n(WDe,"SPAN",{});var fit=s(Sce);IAo=r(fit,"AutoModelForMaskedLM"),fit.forEach(t),WDe.forEach(t),Vqe=i(f),ko=n(f,"DIV",{class:!0});var zs=s(ko);T(Ty.$$.fragment,zs),NAo=i(zs),Ii=n(zs,"P",{});var BZ=s(Ii);qAo=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uD=n(BZ,"A",{href:!0});var mit=s(uD);jAo=r(mit,"from_pretrained()"),mit.forEach(t),DAo=r(BZ," class method or the "),bD=n(BZ,"A",{href:!0});var git=s(bD);GAo=r(git,"from_config()"),git.forEach(t),OAo=r(BZ,` class
method.`),BZ.forEach(t),VAo=i(zs),My=n(zs,"P",{});var QDe=s(My);XAo=r(QDe,"This class cannot be instantiated directly using "),Rce=n(QDe,"CODE",{});var hit=s(Rce);zAo=r(hit,"__init__()"),hit.forEach(t),WAo=r(QDe," (throws an error)."),QDe.forEach(t),QAo=i(zs),st=n(zs,"DIV",{class:!0});var Vw=s(st);T(Ey.$$.fragment,Vw),HAo=i(Vw),Pce=n(Vw,"P",{});var pit=s(Pce);UAo=r(pit,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),pit.forEach(t),JAo=i(Vw),Ni=n(Vw,"P",{});var IZ=s(Ni);YAo=r(IZ,`Note:
Loading a model from its configuration file does `),Bce=n(IZ,"STRONG",{});var _it=s(Bce);KAo=r(_it,"not"),_it.forEach(t),ZAo=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vD=n(IZ,"A",{href:!0});var uit=s(vD);eyo=r(uit,"from_pretrained()"),uit.forEach(t),oyo=r(IZ," to load the model weights."),IZ.forEach(t),ryo=i(Vw),T(O1.$$.fragment,Vw),Vw.forEach(t),tyo=i(zs),Ze=n(zs,"DIV",{class:!0});var aa=s(Ze);T(Cy.$$.fragment,aa),ayo=i(aa),Ice=n(aa,"P",{});var bit=s(Ice);nyo=r(bit,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),bit.forEach(t),syo=i(aa),ka=n(aa,"P",{});var Xw=s(ka);lyo=r(Xw,"The model class to instantiate is selected based on the "),Nce=n(Xw,"CODE",{});var vit=s(Nce);iyo=r(vit,"model_type"),vit.forEach(t),dyo=r(Xw,` property of the config object (either
passed as an argument or loaded from `),qce=n(Xw,"CODE",{});var Fit=s(qce);cyo=r(Fit,"pretrained_model_name_or_path"),Fit.forEach(t),fyo=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jce=n(Xw,"CODE",{});var Tit=s(jce);myo=r(Tit,"pretrained_model_name_or_path"),Tit.forEach(t),gyo=r(Xw,":"),Xw.forEach(t),hyo=i(aa),Q=n(aa,"UL",{});var U=s(Q);V1=n(U,"LI",{});var L8e=s(V1);Dce=n(L8e,"STRONG",{});var Mit=s(Dce);pyo=r(Mit,"albert"),Mit.forEach(t),_yo=r(L8e," \u2014 "),FD=n(L8e,"A",{href:!0});var Eit=s(FD);uyo=r(Eit,"AlbertForMaskedLM"),Eit.forEach(t),byo=r(L8e," (ALBERT model)"),L8e.forEach(t),vyo=i(U),X1=n(U,"LI",{});var x8e=s(X1);Gce=n(x8e,"STRONG",{});var Cit=s(Gce);Fyo=r(Cit,"bart"),Cit.forEach(t),Tyo=r(x8e," \u2014 "),TD=n(x8e,"A",{href:!0});var wit=s(TD);Myo=r(wit,"BartForConditionalGeneration"),wit.forEach(t),Eyo=r(x8e," (BART model)"),x8e.forEach(t),Cyo=i(U),z1=n(U,"LI",{});var $8e=s(z1);Oce=n($8e,"STRONG",{});var Ait=s(Oce);wyo=r(Ait,"bert"),Ait.forEach(t),Ayo=r($8e," \u2014 "),MD=n($8e,"A",{href:!0});var yit=s(MD);yyo=r(yit,"BertForMaskedLM"),yit.forEach(t),Lyo=r($8e," (BERT model)"),$8e.forEach(t),xyo=i(U),W1=n(U,"LI",{});var k8e=s(W1);Vce=n(k8e,"STRONG",{});var Lit=s(Vce);$yo=r(Lit,"big_bird"),Lit.forEach(t),kyo=r(k8e," \u2014 "),ED=n(k8e,"A",{href:!0});var xit=s(ED);Syo=r(xit,"BigBirdForMaskedLM"),xit.forEach(t),Ryo=r(k8e," (BigBird model)"),k8e.forEach(t),Pyo=i(U),Q1=n(U,"LI",{});var S8e=s(Q1);Xce=n(S8e,"STRONG",{});var $it=s(Xce);Byo=r($it,"camembert"),$it.forEach(t),Iyo=r(S8e," \u2014 "),CD=n(S8e,"A",{href:!0});var kit=s(CD);Nyo=r(kit,"CamembertForMaskedLM"),kit.forEach(t),qyo=r(S8e," (CamemBERT model)"),S8e.forEach(t),jyo=i(U),H1=n(U,"LI",{});var R8e=s(H1);zce=n(R8e,"STRONG",{});var Sit=s(zce);Dyo=r(Sit,"convbert"),Sit.forEach(t),Gyo=r(R8e," \u2014 "),wD=n(R8e,"A",{href:!0});var Rit=s(wD);Oyo=r(Rit,"ConvBertForMaskedLM"),Rit.forEach(t),Vyo=r(R8e," (ConvBERT model)"),R8e.forEach(t),Xyo=i(U),U1=n(U,"LI",{});var P8e=s(U1);Wce=n(P8e,"STRONG",{});var Pit=s(Wce);zyo=r(Pit,"data2vec-text"),Pit.forEach(t),Wyo=r(P8e," \u2014 "),AD=n(P8e,"A",{href:!0});var Bit=s(AD);Qyo=r(Bit,"Data2VecTextForMaskedLM"),Bit.forEach(t),Hyo=r(P8e," (Data2VecText model)"),P8e.forEach(t),Uyo=i(U),J1=n(U,"LI",{});var B8e=s(J1);Qce=n(B8e,"STRONG",{});var Iit=s(Qce);Jyo=r(Iit,"deberta"),Iit.forEach(t),Yyo=r(B8e," \u2014 "),yD=n(B8e,"A",{href:!0});var Nit=s(yD);Kyo=r(Nit,"DebertaForMaskedLM"),Nit.forEach(t),Zyo=r(B8e," (DeBERTa model)"),B8e.forEach(t),eLo=i(U),Y1=n(U,"LI",{});var I8e=s(Y1);Hce=n(I8e,"STRONG",{});var qit=s(Hce);oLo=r(qit,"deberta-v2"),qit.forEach(t),rLo=r(I8e," \u2014 "),LD=n(I8e,"A",{href:!0});var jit=s(LD);tLo=r(jit,"DebertaV2ForMaskedLM"),jit.forEach(t),aLo=r(I8e," (DeBERTa-v2 model)"),I8e.forEach(t),nLo=i(U),K1=n(U,"LI",{});var N8e=s(K1);Uce=n(N8e,"STRONG",{});var Dit=s(Uce);sLo=r(Dit,"distilbert"),Dit.forEach(t),lLo=r(N8e," \u2014 "),xD=n(N8e,"A",{href:!0});var Git=s(xD);iLo=r(Git,"DistilBertForMaskedLM"),Git.forEach(t),dLo=r(N8e," (DistilBERT model)"),N8e.forEach(t),cLo=i(U),Z1=n(U,"LI",{});var q8e=s(Z1);Jce=n(q8e,"STRONG",{});var Oit=s(Jce);fLo=r(Oit,"electra"),Oit.forEach(t),mLo=r(q8e," \u2014 "),$D=n(q8e,"A",{href:!0});var Vit=s($D);gLo=r(Vit,"ElectraForMaskedLM"),Vit.forEach(t),hLo=r(q8e," (ELECTRA model)"),q8e.forEach(t),pLo=i(U),eb=n(U,"LI",{});var j8e=s(eb);Yce=n(j8e,"STRONG",{});var Xit=s(Yce);_Lo=r(Xit,"flaubert"),Xit.forEach(t),uLo=r(j8e," \u2014 "),kD=n(j8e,"A",{href:!0});var zit=s(kD);bLo=r(zit,"FlaubertWithLMHeadModel"),zit.forEach(t),vLo=r(j8e," (FlauBERT model)"),j8e.forEach(t),FLo=i(U),ob=n(U,"LI",{});var D8e=s(ob);Kce=n(D8e,"STRONG",{});var Wit=s(Kce);TLo=r(Wit,"fnet"),Wit.forEach(t),MLo=r(D8e," \u2014 "),SD=n(D8e,"A",{href:!0});var Qit=s(SD);ELo=r(Qit,"FNetForMaskedLM"),Qit.forEach(t),CLo=r(D8e," (FNet model)"),D8e.forEach(t),wLo=i(U),rb=n(U,"LI",{});var G8e=s(rb);Zce=n(G8e,"STRONG",{});var Hit=s(Zce);ALo=r(Hit,"funnel"),Hit.forEach(t),yLo=r(G8e," \u2014 "),RD=n(G8e,"A",{href:!0});var Uit=s(RD);LLo=r(Uit,"FunnelForMaskedLM"),Uit.forEach(t),xLo=r(G8e," (Funnel Transformer model)"),G8e.forEach(t),$Lo=i(U),tb=n(U,"LI",{});var O8e=s(tb);efe=n(O8e,"STRONG",{});var Jit=s(efe);kLo=r(Jit,"ibert"),Jit.forEach(t),SLo=r(O8e," \u2014 "),PD=n(O8e,"A",{href:!0});var Yit=s(PD);RLo=r(Yit,"IBertForMaskedLM"),Yit.forEach(t),PLo=r(O8e," (I-BERT model)"),O8e.forEach(t),BLo=i(U),ab=n(U,"LI",{});var V8e=s(ab);ofe=n(V8e,"STRONG",{});var Kit=s(ofe);ILo=r(Kit,"layoutlm"),Kit.forEach(t),NLo=r(V8e," \u2014 "),BD=n(V8e,"A",{href:!0});var Zit=s(BD);qLo=r(Zit,"LayoutLMForMaskedLM"),Zit.forEach(t),jLo=r(V8e," (LayoutLM model)"),V8e.forEach(t),DLo=i(U),nb=n(U,"LI",{});var X8e=s(nb);rfe=n(X8e,"STRONG",{});var edt=s(rfe);GLo=r(edt,"longformer"),edt.forEach(t),OLo=r(X8e," \u2014 "),ID=n(X8e,"A",{href:!0});var odt=s(ID);VLo=r(odt,"LongformerForMaskedLM"),odt.forEach(t),XLo=r(X8e," (Longformer model)"),X8e.forEach(t),zLo=i(U),sb=n(U,"LI",{});var z8e=s(sb);tfe=n(z8e,"STRONG",{});var rdt=s(tfe);WLo=r(rdt,"mbart"),rdt.forEach(t),QLo=r(z8e," \u2014 "),ND=n(z8e,"A",{href:!0});var tdt=s(ND);HLo=r(tdt,"MBartForConditionalGeneration"),tdt.forEach(t),ULo=r(z8e," (mBART model)"),z8e.forEach(t),JLo=i(U),lb=n(U,"LI",{});var W8e=s(lb);afe=n(W8e,"STRONG",{});var adt=s(afe);YLo=r(adt,"megatron-bert"),adt.forEach(t),KLo=r(W8e," \u2014 "),qD=n(W8e,"A",{href:!0});var ndt=s(qD);ZLo=r(ndt,"MegatronBertForMaskedLM"),ndt.forEach(t),e8o=r(W8e," (MegatronBert model)"),W8e.forEach(t),o8o=i(U),ib=n(U,"LI",{});var Q8e=s(ib);nfe=n(Q8e,"STRONG",{});var sdt=s(nfe);r8o=r(sdt,"mobilebert"),sdt.forEach(t),t8o=r(Q8e," \u2014 "),jD=n(Q8e,"A",{href:!0});var ldt=s(jD);a8o=r(ldt,"MobileBertForMaskedLM"),ldt.forEach(t),n8o=r(Q8e," (MobileBERT model)"),Q8e.forEach(t),s8o=i(U),db=n(U,"LI",{});var H8e=s(db);sfe=n(H8e,"STRONG",{});var idt=s(sfe);l8o=r(idt,"mpnet"),idt.forEach(t),i8o=r(H8e," \u2014 "),DD=n(H8e,"A",{href:!0});var ddt=s(DD);d8o=r(ddt,"MPNetForMaskedLM"),ddt.forEach(t),c8o=r(H8e," (MPNet model)"),H8e.forEach(t),f8o=i(U),cb=n(U,"LI",{});var U8e=s(cb);lfe=n(U8e,"STRONG",{});var cdt=s(lfe);m8o=r(cdt,"nystromformer"),cdt.forEach(t),g8o=r(U8e," \u2014 "),GD=n(U8e,"A",{href:!0});var fdt=s(GD);h8o=r(fdt,"NystromformerForMaskedLM"),fdt.forEach(t),p8o=r(U8e," (Nystromformer model)"),U8e.forEach(t),_8o=i(U),fb=n(U,"LI",{});var J8e=s(fb);ife=n(J8e,"STRONG",{});var mdt=s(ife);u8o=r(mdt,"perceiver"),mdt.forEach(t),b8o=r(J8e," \u2014 "),OD=n(J8e,"A",{href:!0});var gdt=s(OD);v8o=r(gdt,"PerceiverForMaskedLM"),gdt.forEach(t),F8o=r(J8e," (Perceiver model)"),J8e.forEach(t),T8o=i(U),mb=n(U,"LI",{});var Y8e=s(mb);dfe=n(Y8e,"STRONG",{});var hdt=s(dfe);M8o=r(hdt,"qdqbert"),hdt.forEach(t),E8o=r(Y8e," \u2014 "),VD=n(Y8e,"A",{href:!0});var pdt=s(VD);C8o=r(pdt,"QDQBertForMaskedLM"),pdt.forEach(t),w8o=r(Y8e," (QDQBert model)"),Y8e.forEach(t),A8o=i(U),gb=n(U,"LI",{});var K8e=s(gb);cfe=n(K8e,"STRONG",{});var _dt=s(cfe);y8o=r(_dt,"reformer"),_dt.forEach(t),L8o=r(K8e," \u2014 "),XD=n(K8e,"A",{href:!0});var udt=s(XD);x8o=r(udt,"ReformerForMaskedLM"),udt.forEach(t),$8o=r(K8e," (Reformer model)"),K8e.forEach(t),k8o=i(U),hb=n(U,"LI",{});var Z8e=s(hb);ffe=n(Z8e,"STRONG",{});var bdt=s(ffe);S8o=r(bdt,"rembert"),bdt.forEach(t),R8o=r(Z8e," \u2014 "),zD=n(Z8e,"A",{href:!0});var vdt=s(zD);P8o=r(vdt,"RemBertForMaskedLM"),vdt.forEach(t),B8o=r(Z8e," (RemBERT model)"),Z8e.forEach(t),I8o=i(U),pb=n(U,"LI",{});var e9e=s(pb);mfe=n(e9e,"STRONG",{});var Fdt=s(mfe);N8o=r(Fdt,"roberta"),Fdt.forEach(t),q8o=r(e9e," \u2014 "),WD=n(e9e,"A",{href:!0});var Tdt=s(WD);j8o=r(Tdt,"RobertaForMaskedLM"),Tdt.forEach(t),D8o=r(e9e," (RoBERTa model)"),e9e.forEach(t),G8o=i(U),_b=n(U,"LI",{});var o9e=s(_b);gfe=n(o9e,"STRONG",{});var Mdt=s(gfe);O8o=r(Mdt,"roformer"),Mdt.forEach(t),V8o=r(o9e," \u2014 "),QD=n(o9e,"A",{href:!0});var Edt=s(QD);X8o=r(Edt,"RoFormerForMaskedLM"),Edt.forEach(t),z8o=r(o9e," (RoFormer model)"),o9e.forEach(t),W8o=i(U),ub=n(U,"LI",{});var r9e=s(ub);hfe=n(r9e,"STRONG",{});var Cdt=s(hfe);Q8o=r(Cdt,"squeezebert"),Cdt.forEach(t),H8o=r(r9e," \u2014 "),HD=n(r9e,"A",{href:!0});var wdt=s(HD);U8o=r(wdt,"SqueezeBertForMaskedLM"),wdt.forEach(t),J8o=r(r9e," (SqueezeBERT model)"),r9e.forEach(t),Y8o=i(U),bb=n(U,"LI",{});var t9e=s(bb);pfe=n(t9e,"STRONG",{});var Adt=s(pfe);K8o=r(Adt,"tapas"),Adt.forEach(t),Z8o=r(t9e," \u2014 "),UD=n(t9e,"A",{href:!0});var ydt=s(UD);e9o=r(ydt,"TapasForMaskedLM"),ydt.forEach(t),o9o=r(t9e," (TAPAS model)"),t9e.forEach(t),r9o=i(U),vb=n(U,"LI",{});var a9e=s(vb);_fe=n(a9e,"STRONG",{});var Ldt=s(_fe);t9o=r(Ldt,"wav2vec2"),Ldt.forEach(t),a9o=r(a9e," \u2014 "),ufe=n(a9e,"CODE",{});var xdt=s(ufe);n9o=r(xdt,"Wav2Vec2ForMaskedLM"),xdt.forEach(t),s9o=r(a9e," (Wav2Vec2 model)"),a9e.forEach(t),l9o=i(U),Fb=n(U,"LI",{});var n9e=s(Fb);bfe=n(n9e,"STRONG",{});var $dt=s(bfe);i9o=r($dt,"xlm"),$dt.forEach(t),d9o=r(n9e," \u2014 "),JD=n(n9e,"A",{href:!0});var kdt=s(JD);c9o=r(kdt,"XLMWithLMHeadModel"),kdt.forEach(t),f9o=r(n9e," (XLM model)"),n9e.forEach(t),m9o=i(U),Tb=n(U,"LI",{});var s9e=s(Tb);vfe=n(s9e,"STRONG",{});var Sdt=s(vfe);g9o=r(Sdt,"xlm-roberta"),Sdt.forEach(t),h9o=r(s9e," \u2014 "),YD=n(s9e,"A",{href:!0});var Rdt=s(YD);p9o=r(Rdt,"XLMRobertaForMaskedLM"),Rdt.forEach(t),_9o=r(s9e," (XLM-RoBERTa model)"),s9e.forEach(t),u9o=i(U),Mb=n(U,"LI",{});var l9e=s(Mb);Ffe=n(l9e,"STRONG",{});var Pdt=s(Ffe);b9o=r(Pdt,"xlm-roberta-xl"),Pdt.forEach(t),v9o=r(l9e," \u2014 "),KD=n(l9e,"A",{href:!0});var Bdt=s(KD);F9o=r(Bdt,"XLMRobertaXLForMaskedLM"),Bdt.forEach(t),T9o=r(l9e," (XLM-RoBERTa-XL model)"),l9e.forEach(t),M9o=i(U),Eb=n(U,"LI",{});var i9e=s(Eb);Tfe=n(i9e,"STRONG",{});var Idt=s(Tfe);E9o=r(Idt,"yoso"),Idt.forEach(t),C9o=r(i9e," \u2014 "),ZD=n(i9e,"A",{href:!0});var Ndt=s(ZD);w9o=r(Ndt,"YosoForMaskedLM"),Ndt.forEach(t),A9o=r(i9e," (YOSO model)"),i9e.forEach(t),U.forEach(t),y9o=i(aa),Cb=n(aa,"P",{});var d9e=s(Cb);L9o=r(d9e,"The model is set in evaluation mode by default using "),Mfe=n(d9e,"CODE",{});var qdt=s(Mfe);x9o=r(qdt,"model.eval()"),qdt.forEach(t),$9o=r(d9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Efe=n(d9e,"CODE",{});var jdt=s(Efe);k9o=r(jdt,"model.train()"),jdt.forEach(t),d9e.forEach(t),S9o=i(aa),T(wb.$$.fragment,aa),aa.forEach(t),zs.forEach(t),Xqe=i(f),qi=n(f,"H2",{class:!0});var HDe=s(qi);Ab=n(HDe,"A",{id:!0,class:!0,href:!0});var Ddt=s(Ab);Cfe=n(Ddt,"SPAN",{});var Gdt=s(Cfe);T(wy.$$.fragment,Gdt),Gdt.forEach(t),Ddt.forEach(t),R9o=i(HDe),wfe=n(HDe,"SPAN",{});var Odt=s(wfe);P9o=r(Odt,"AutoModelForSeq2SeqLM"),Odt.forEach(t),HDe.forEach(t),zqe=i(f),So=n(f,"DIV",{class:!0});var Ws=s(So);T(Ay.$$.fragment,Ws),B9o=i(Ws),ji=n(Ws,"P",{});var NZ=s(ji);I9o=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),eG=n(NZ,"A",{href:!0});var Vdt=s(eG);N9o=r(Vdt,"from_pretrained()"),Vdt.forEach(t),q9o=r(NZ," class method or the "),oG=n(NZ,"A",{href:!0});var Xdt=s(oG);j9o=r(Xdt,"from_config()"),Xdt.forEach(t),D9o=r(NZ,` class
method.`),NZ.forEach(t),G9o=i(Ws),yy=n(Ws,"P",{});var UDe=s(yy);O9o=r(UDe,"This class cannot be instantiated directly using "),Afe=n(UDe,"CODE",{});var zdt=s(Afe);V9o=r(zdt,"__init__()"),zdt.forEach(t),X9o=r(UDe," (throws an error)."),UDe.forEach(t),z9o=i(Ws),lt=n(Ws,"DIV",{class:!0});var zw=s(lt);T(Ly.$$.fragment,zw),W9o=i(zw),yfe=n(zw,"P",{});var Wdt=s(yfe);Q9o=r(Wdt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Wdt.forEach(t),H9o=i(zw),Di=n(zw,"P",{});var qZ=s(Di);U9o=r(qZ,`Note:
Loading a model from its configuration file does `),Lfe=n(qZ,"STRONG",{});var Qdt=s(Lfe);J9o=r(Qdt,"not"),Qdt.forEach(t),Y9o=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rG=n(qZ,"A",{href:!0});var Hdt=s(rG);K9o=r(Hdt,"from_pretrained()"),Hdt.forEach(t),Z9o=r(qZ," to load the model weights."),qZ.forEach(t),exo=i(zw),T(yb.$$.fragment,zw),zw.forEach(t),oxo=i(Ws),eo=n(Ws,"DIV",{class:!0});var na=s(eo);T(xy.$$.fragment,na),rxo=i(na),xfe=n(na,"P",{});var Udt=s(xfe);txo=r(Udt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Udt.forEach(t),axo=i(na),Sa=n(na,"P",{});var Ww=s(Sa);nxo=r(Ww,"The model class to instantiate is selected based on the "),$fe=n(Ww,"CODE",{});var Jdt=s($fe);sxo=r(Jdt,"model_type"),Jdt.forEach(t),lxo=r(Ww,` property of the config object (either
passed as an argument or loaded from `),kfe=n(Ww,"CODE",{});var Ydt=s(kfe);ixo=r(Ydt,"pretrained_model_name_or_path"),Ydt.forEach(t),dxo=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sfe=n(Ww,"CODE",{});var Kdt=s(Sfe);cxo=r(Kdt,"pretrained_model_name_or_path"),Kdt.forEach(t),fxo=r(Ww,":"),Ww.forEach(t),mxo=i(na),ue=n(na,"UL",{});var ve=s(ue);Lb=n(ve,"LI",{});var c9e=s(Lb);Rfe=n(c9e,"STRONG",{});var Zdt=s(Rfe);gxo=r(Zdt,"bart"),Zdt.forEach(t),hxo=r(c9e," \u2014 "),tG=n(c9e,"A",{href:!0});var ect=s(tG);pxo=r(ect,"BartForConditionalGeneration"),ect.forEach(t),_xo=r(c9e," (BART model)"),c9e.forEach(t),uxo=i(ve),xb=n(ve,"LI",{});var f9e=s(xb);Pfe=n(f9e,"STRONG",{});var oct=s(Pfe);bxo=r(oct,"bigbird_pegasus"),oct.forEach(t),vxo=r(f9e," \u2014 "),aG=n(f9e,"A",{href:!0});var rct=s(aG);Fxo=r(rct,"BigBirdPegasusForConditionalGeneration"),rct.forEach(t),Txo=r(f9e," (BigBirdPegasus model)"),f9e.forEach(t),Mxo=i(ve),$b=n(ve,"LI",{});var m9e=s($b);Bfe=n(m9e,"STRONG",{});var tct=s(Bfe);Exo=r(tct,"blenderbot"),tct.forEach(t),Cxo=r(m9e," \u2014 "),nG=n(m9e,"A",{href:!0});var act=s(nG);wxo=r(act,"BlenderbotForConditionalGeneration"),act.forEach(t),Axo=r(m9e," (Blenderbot model)"),m9e.forEach(t),yxo=i(ve),kb=n(ve,"LI",{});var g9e=s(kb);Ife=n(g9e,"STRONG",{});var nct=s(Ife);Lxo=r(nct,"blenderbot-small"),nct.forEach(t),xxo=r(g9e," \u2014 "),sG=n(g9e,"A",{href:!0});var sct=s(sG);$xo=r(sct,"BlenderbotSmallForConditionalGeneration"),sct.forEach(t),kxo=r(g9e," (BlenderbotSmall model)"),g9e.forEach(t),Sxo=i(ve),Sb=n(ve,"LI",{});var h9e=s(Sb);Nfe=n(h9e,"STRONG",{});var lct=s(Nfe);Rxo=r(lct,"encoder-decoder"),lct.forEach(t),Pxo=r(h9e," \u2014 "),lG=n(h9e,"A",{href:!0});var ict=s(lG);Bxo=r(ict,"EncoderDecoderModel"),ict.forEach(t),Ixo=r(h9e," (Encoder decoder model)"),h9e.forEach(t),Nxo=i(ve),Rb=n(ve,"LI",{});var p9e=s(Rb);qfe=n(p9e,"STRONG",{});var dct=s(qfe);qxo=r(dct,"fsmt"),dct.forEach(t),jxo=r(p9e," \u2014 "),iG=n(p9e,"A",{href:!0});var cct=s(iG);Dxo=r(cct,"FSMTForConditionalGeneration"),cct.forEach(t),Gxo=r(p9e," (FairSeq Machine-Translation model)"),p9e.forEach(t),Oxo=i(ve),Pb=n(ve,"LI",{});var _9e=s(Pb);jfe=n(_9e,"STRONG",{});var fct=s(jfe);Vxo=r(fct,"led"),fct.forEach(t),Xxo=r(_9e," \u2014 "),dG=n(_9e,"A",{href:!0});var mct=s(dG);zxo=r(mct,"LEDForConditionalGeneration"),mct.forEach(t),Wxo=r(_9e," (LED model)"),_9e.forEach(t),Qxo=i(ve),Bb=n(ve,"LI",{});var u9e=s(Bb);Dfe=n(u9e,"STRONG",{});var gct=s(Dfe);Hxo=r(gct,"m2m_100"),gct.forEach(t),Uxo=r(u9e," \u2014 "),cG=n(u9e,"A",{href:!0});var hct=s(cG);Jxo=r(hct,"M2M100ForConditionalGeneration"),hct.forEach(t),Yxo=r(u9e," (M2M100 model)"),u9e.forEach(t),Kxo=i(ve),Ib=n(ve,"LI",{});var b9e=s(Ib);Gfe=n(b9e,"STRONG",{});var pct=s(Gfe);Zxo=r(pct,"marian"),pct.forEach(t),e$o=r(b9e," \u2014 "),fG=n(b9e,"A",{href:!0});var _ct=s(fG);o$o=r(_ct,"MarianMTModel"),_ct.forEach(t),r$o=r(b9e," (Marian model)"),b9e.forEach(t),t$o=i(ve),Nb=n(ve,"LI",{});var v9e=s(Nb);Ofe=n(v9e,"STRONG",{});var uct=s(Ofe);a$o=r(uct,"mbart"),uct.forEach(t),n$o=r(v9e," \u2014 "),mG=n(v9e,"A",{href:!0});var bct=s(mG);s$o=r(bct,"MBartForConditionalGeneration"),bct.forEach(t),l$o=r(v9e," (mBART model)"),v9e.forEach(t),i$o=i(ve),qb=n(ve,"LI",{});var F9e=s(qb);Vfe=n(F9e,"STRONG",{});var vct=s(Vfe);d$o=r(vct,"mt5"),vct.forEach(t),c$o=r(F9e," \u2014 "),gG=n(F9e,"A",{href:!0});var Fct=s(gG);f$o=r(Fct,"MT5ForConditionalGeneration"),Fct.forEach(t),m$o=r(F9e," (mT5 model)"),F9e.forEach(t),g$o=i(ve),jb=n(ve,"LI",{});var T9e=s(jb);Xfe=n(T9e,"STRONG",{});var Tct=s(Xfe);h$o=r(Tct,"pegasus"),Tct.forEach(t),p$o=r(T9e," \u2014 "),hG=n(T9e,"A",{href:!0});var Mct=s(hG);_$o=r(Mct,"PegasusForConditionalGeneration"),Mct.forEach(t),u$o=r(T9e," (Pegasus model)"),T9e.forEach(t),b$o=i(ve),Db=n(ve,"LI",{});var M9e=s(Db);zfe=n(M9e,"STRONG",{});var Ect=s(zfe);v$o=r(Ect,"plbart"),Ect.forEach(t),F$o=r(M9e," \u2014 "),pG=n(M9e,"A",{href:!0});var Cct=s(pG);T$o=r(Cct,"PLBartForConditionalGeneration"),Cct.forEach(t),M$o=r(M9e," (PLBart model)"),M9e.forEach(t),E$o=i(ve),Gb=n(ve,"LI",{});var E9e=s(Gb);Wfe=n(E9e,"STRONG",{});var wct=s(Wfe);C$o=r(wct,"prophetnet"),wct.forEach(t),w$o=r(E9e," \u2014 "),_G=n(E9e,"A",{href:!0});var Act=s(_G);A$o=r(Act,"ProphetNetForConditionalGeneration"),Act.forEach(t),y$o=r(E9e," (ProphetNet model)"),E9e.forEach(t),L$o=i(ve),Ob=n(ve,"LI",{});var C9e=s(Ob);Qfe=n(C9e,"STRONG",{});var yct=s(Qfe);x$o=r(yct,"t5"),yct.forEach(t),$$o=r(C9e," \u2014 "),uG=n(C9e,"A",{href:!0});var Lct=s(uG);k$o=r(Lct,"T5ForConditionalGeneration"),Lct.forEach(t),S$o=r(C9e," (T5 model)"),C9e.forEach(t),R$o=i(ve),Vb=n(ve,"LI",{});var w9e=s(Vb);Hfe=n(w9e,"STRONG",{});var xct=s(Hfe);P$o=r(xct,"xlm-prophetnet"),xct.forEach(t),B$o=r(w9e," \u2014 "),bG=n(w9e,"A",{href:!0});var $ct=s(bG);I$o=r($ct,"XLMProphetNetForConditionalGeneration"),$ct.forEach(t),N$o=r(w9e," (XLMProphetNet model)"),w9e.forEach(t),ve.forEach(t),q$o=i(na),Xb=n(na,"P",{});var A9e=s(Xb);j$o=r(A9e,"The model is set in evaluation mode by default using "),Ufe=n(A9e,"CODE",{});var kct=s(Ufe);D$o=r(kct,"model.eval()"),kct.forEach(t),G$o=r(A9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jfe=n(A9e,"CODE",{});var Sct=s(Jfe);O$o=r(Sct,"model.train()"),Sct.forEach(t),A9e.forEach(t),V$o=i(na),T(zb.$$.fragment,na),na.forEach(t),Ws.forEach(t),Wqe=i(f),Gi=n(f,"H2",{class:!0});var JDe=s(Gi);Wb=n(JDe,"A",{id:!0,class:!0,href:!0});var Rct=s(Wb);Yfe=n(Rct,"SPAN",{});var Pct=s(Yfe);T($y.$$.fragment,Pct),Pct.forEach(t),Rct.forEach(t),X$o=i(JDe),Kfe=n(JDe,"SPAN",{});var Bct=s(Kfe);z$o=r(Bct,"AutoModelForSequenceClassification"),Bct.forEach(t),JDe.forEach(t),Qqe=i(f),Ro=n(f,"DIV",{class:!0});var Qs=s(Ro);T(ky.$$.fragment,Qs),W$o=i(Qs),Oi=n(Qs,"P",{});var jZ=s(Oi);Q$o=r(jZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),vG=n(jZ,"A",{href:!0});var Ict=s(vG);H$o=r(Ict,"from_pretrained()"),Ict.forEach(t),U$o=r(jZ," class method or the "),FG=n(jZ,"A",{href:!0});var Nct=s(FG);J$o=r(Nct,"from_config()"),Nct.forEach(t),Y$o=r(jZ,` class
method.`),jZ.forEach(t),K$o=i(Qs),Sy=n(Qs,"P",{});var YDe=s(Sy);Z$o=r(YDe,"This class cannot be instantiated directly using "),Zfe=n(YDe,"CODE",{});var qct=s(Zfe);eko=r(qct,"__init__()"),qct.forEach(t),oko=r(YDe," (throws an error)."),YDe.forEach(t),rko=i(Qs),it=n(Qs,"DIV",{class:!0});var Qw=s(it);T(Ry.$$.fragment,Qw),tko=i(Qw),eme=n(Qw,"P",{});var jct=s(eme);ako=r(jct,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),jct.forEach(t),nko=i(Qw),Vi=n(Qw,"P",{});var DZ=s(Vi);sko=r(DZ,`Note:
Loading a model from its configuration file does `),ome=n(DZ,"STRONG",{});var Dct=s(ome);lko=r(Dct,"not"),Dct.forEach(t),iko=r(DZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TG=n(DZ,"A",{href:!0});var Gct=s(TG);dko=r(Gct,"from_pretrained()"),Gct.forEach(t),cko=r(DZ," to load the model weights."),DZ.forEach(t),fko=i(Qw),T(Qb.$$.fragment,Qw),Qw.forEach(t),mko=i(Qs),oo=n(Qs,"DIV",{class:!0});var sa=s(oo);T(Py.$$.fragment,sa),gko=i(sa),rme=n(sa,"P",{});var Oct=s(rme);hko=r(Oct,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Oct.forEach(t),pko=i(sa),Ra=n(sa,"P",{});var Hw=s(Ra);_ko=r(Hw,"The model class to instantiate is selected based on the "),tme=n(Hw,"CODE",{});var Vct=s(tme);uko=r(Vct,"model_type"),Vct.forEach(t),bko=r(Hw,` property of the config object (either
passed as an argument or loaded from `),ame=n(Hw,"CODE",{});var Xct=s(ame);vko=r(Xct,"pretrained_model_name_or_path"),Xct.forEach(t),Fko=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nme=n(Hw,"CODE",{});var zct=s(nme);Tko=r(zct,"pretrained_model_name_or_path"),zct.forEach(t),Mko=r(Hw,":"),Hw.forEach(t),Eko=i(sa),N=n(sa,"UL",{});var j=s(N);Hb=n(j,"LI",{});var y9e=s(Hb);sme=n(y9e,"STRONG",{});var Wct=s(sme);Cko=r(Wct,"albert"),Wct.forEach(t),wko=r(y9e," \u2014 "),MG=n(y9e,"A",{href:!0});var Qct=s(MG);Ako=r(Qct,"AlbertForSequenceClassification"),Qct.forEach(t),yko=r(y9e," (ALBERT model)"),y9e.forEach(t),Lko=i(j),Ub=n(j,"LI",{});var L9e=s(Ub);lme=n(L9e,"STRONG",{});var Hct=s(lme);xko=r(Hct,"bart"),Hct.forEach(t),$ko=r(L9e," \u2014 "),EG=n(L9e,"A",{href:!0});var Uct=s(EG);kko=r(Uct,"BartForSequenceClassification"),Uct.forEach(t),Sko=r(L9e," (BART model)"),L9e.forEach(t),Rko=i(j),Jb=n(j,"LI",{});var x9e=s(Jb);ime=n(x9e,"STRONG",{});var Jct=s(ime);Pko=r(Jct,"bert"),Jct.forEach(t),Bko=r(x9e," \u2014 "),CG=n(x9e,"A",{href:!0});var Yct=s(CG);Iko=r(Yct,"BertForSequenceClassification"),Yct.forEach(t),Nko=r(x9e," (BERT model)"),x9e.forEach(t),qko=i(j),Yb=n(j,"LI",{});var $9e=s(Yb);dme=n($9e,"STRONG",{});var Kct=s(dme);jko=r(Kct,"big_bird"),Kct.forEach(t),Dko=r($9e," \u2014 "),wG=n($9e,"A",{href:!0});var Zct=s(wG);Gko=r(Zct,"BigBirdForSequenceClassification"),Zct.forEach(t),Oko=r($9e," (BigBird model)"),$9e.forEach(t),Vko=i(j),Kb=n(j,"LI",{});var k9e=s(Kb);cme=n(k9e,"STRONG",{});var eft=s(cme);Xko=r(eft,"bigbird_pegasus"),eft.forEach(t),zko=r(k9e," \u2014 "),AG=n(k9e,"A",{href:!0});var oft=s(AG);Wko=r(oft,"BigBirdPegasusForSequenceClassification"),oft.forEach(t),Qko=r(k9e," (BigBirdPegasus model)"),k9e.forEach(t),Hko=i(j),Zb=n(j,"LI",{});var S9e=s(Zb);fme=n(S9e,"STRONG",{});var rft=s(fme);Uko=r(rft,"camembert"),rft.forEach(t),Jko=r(S9e," \u2014 "),yG=n(S9e,"A",{href:!0});var tft=s(yG);Yko=r(tft,"CamembertForSequenceClassification"),tft.forEach(t),Kko=r(S9e," (CamemBERT model)"),S9e.forEach(t),Zko=i(j),e2=n(j,"LI",{});var R9e=s(e2);mme=n(R9e,"STRONG",{});var aft=s(mme);eSo=r(aft,"canine"),aft.forEach(t),oSo=r(R9e," \u2014 "),LG=n(R9e,"A",{href:!0});var nft=s(LG);rSo=r(nft,"CanineForSequenceClassification"),nft.forEach(t),tSo=r(R9e," (Canine model)"),R9e.forEach(t),aSo=i(j),o2=n(j,"LI",{});var P9e=s(o2);gme=n(P9e,"STRONG",{});var sft=s(gme);nSo=r(sft,"convbert"),sft.forEach(t),sSo=r(P9e," \u2014 "),xG=n(P9e,"A",{href:!0});var lft=s(xG);lSo=r(lft,"ConvBertForSequenceClassification"),lft.forEach(t),iSo=r(P9e," (ConvBERT model)"),P9e.forEach(t),dSo=i(j),r2=n(j,"LI",{});var B9e=s(r2);hme=n(B9e,"STRONG",{});var ift=s(hme);cSo=r(ift,"ctrl"),ift.forEach(t),fSo=r(B9e," \u2014 "),$G=n(B9e,"A",{href:!0});var dft=s($G);mSo=r(dft,"CTRLForSequenceClassification"),dft.forEach(t),gSo=r(B9e," (CTRL model)"),B9e.forEach(t),hSo=i(j),t2=n(j,"LI",{});var I9e=s(t2);pme=n(I9e,"STRONG",{});var cft=s(pme);pSo=r(cft,"data2vec-text"),cft.forEach(t),_So=r(I9e," \u2014 "),kG=n(I9e,"A",{href:!0});var fft=s(kG);uSo=r(fft,"Data2VecTextForSequenceClassification"),fft.forEach(t),bSo=r(I9e," (Data2VecText model)"),I9e.forEach(t),vSo=i(j),a2=n(j,"LI",{});var N9e=s(a2);_me=n(N9e,"STRONG",{});var mft=s(_me);FSo=r(mft,"deberta"),mft.forEach(t),TSo=r(N9e," \u2014 "),SG=n(N9e,"A",{href:!0});var gft=s(SG);MSo=r(gft,"DebertaForSequenceClassification"),gft.forEach(t),ESo=r(N9e," (DeBERTa model)"),N9e.forEach(t),CSo=i(j),n2=n(j,"LI",{});var q9e=s(n2);ume=n(q9e,"STRONG",{});var hft=s(ume);wSo=r(hft,"deberta-v2"),hft.forEach(t),ASo=r(q9e," \u2014 "),RG=n(q9e,"A",{href:!0});var pft=s(RG);ySo=r(pft,"DebertaV2ForSequenceClassification"),pft.forEach(t),LSo=r(q9e," (DeBERTa-v2 model)"),q9e.forEach(t),xSo=i(j),s2=n(j,"LI",{});var j9e=s(s2);bme=n(j9e,"STRONG",{});var _ft=s(bme);$So=r(_ft,"distilbert"),_ft.forEach(t),kSo=r(j9e," \u2014 "),PG=n(j9e,"A",{href:!0});var uft=s(PG);SSo=r(uft,"DistilBertForSequenceClassification"),uft.forEach(t),RSo=r(j9e," (DistilBERT model)"),j9e.forEach(t),PSo=i(j),l2=n(j,"LI",{});var D9e=s(l2);vme=n(D9e,"STRONG",{});var bft=s(vme);BSo=r(bft,"electra"),bft.forEach(t),ISo=r(D9e," \u2014 "),BG=n(D9e,"A",{href:!0});var vft=s(BG);NSo=r(vft,"ElectraForSequenceClassification"),vft.forEach(t),qSo=r(D9e," (ELECTRA model)"),D9e.forEach(t),jSo=i(j),i2=n(j,"LI",{});var G9e=s(i2);Fme=n(G9e,"STRONG",{});var Fft=s(Fme);DSo=r(Fft,"flaubert"),Fft.forEach(t),GSo=r(G9e," \u2014 "),IG=n(G9e,"A",{href:!0});var Tft=s(IG);OSo=r(Tft,"FlaubertForSequenceClassification"),Tft.forEach(t),VSo=r(G9e," (FlauBERT model)"),G9e.forEach(t),XSo=i(j),d2=n(j,"LI",{});var O9e=s(d2);Tme=n(O9e,"STRONG",{});var Mft=s(Tme);zSo=r(Mft,"fnet"),Mft.forEach(t),WSo=r(O9e," \u2014 "),NG=n(O9e,"A",{href:!0});var Eft=s(NG);QSo=r(Eft,"FNetForSequenceClassification"),Eft.forEach(t),HSo=r(O9e," (FNet model)"),O9e.forEach(t),USo=i(j),c2=n(j,"LI",{});var V9e=s(c2);Mme=n(V9e,"STRONG",{});var Cft=s(Mme);JSo=r(Cft,"funnel"),Cft.forEach(t),YSo=r(V9e," \u2014 "),qG=n(V9e,"A",{href:!0});var wft=s(qG);KSo=r(wft,"FunnelForSequenceClassification"),wft.forEach(t),ZSo=r(V9e," (Funnel Transformer model)"),V9e.forEach(t),eRo=i(j),f2=n(j,"LI",{});var X9e=s(f2);Eme=n(X9e,"STRONG",{});var Aft=s(Eme);oRo=r(Aft,"gpt2"),Aft.forEach(t),rRo=r(X9e," \u2014 "),jG=n(X9e,"A",{href:!0});var yft=s(jG);tRo=r(yft,"GPT2ForSequenceClassification"),yft.forEach(t),aRo=r(X9e," (OpenAI GPT-2 model)"),X9e.forEach(t),nRo=i(j),m2=n(j,"LI",{});var z9e=s(m2);Cme=n(z9e,"STRONG",{});var Lft=s(Cme);sRo=r(Lft,"gpt_neo"),Lft.forEach(t),lRo=r(z9e," \u2014 "),DG=n(z9e,"A",{href:!0});var xft=s(DG);iRo=r(xft,"GPTNeoForSequenceClassification"),xft.forEach(t),dRo=r(z9e," (GPT Neo model)"),z9e.forEach(t),cRo=i(j),g2=n(j,"LI",{});var W9e=s(g2);wme=n(W9e,"STRONG",{});var $ft=s(wme);fRo=r($ft,"gptj"),$ft.forEach(t),mRo=r(W9e," \u2014 "),GG=n(W9e,"A",{href:!0});var kft=s(GG);gRo=r(kft,"GPTJForSequenceClassification"),kft.forEach(t),hRo=r(W9e," (GPT-J model)"),W9e.forEach(t),pRo=i(j),h2=n(j,"LI",{});var Q9e=s(h2);Ame=n(Q9e,"STRONG",{});var Sft=s(Ame);_Ro=r(Sft,"ibert"),Sft.forEach(t),uRo=r(Q9e," \u2014 "),OG=n(Q9e,"A",{href:!0});var Rft=s(OG);bRo=r(Rft,"IBertForSequenceClassification"),Rft.forEach(t),vRo=r(Q9e," (I-BERT model)"),Q9e.forEach(t),FRo=i(j),p2=n(j,"LI",{});var H9e=s(p2);yme=n(H9e,"STRONG",{});var Pft=s(yme);TRo=r(Pft,"layoutlm"),Pft.forEach(t),MRo=r(H9e," \u2014 "),VG=n(H9e,"A",{href:!0});var Bft=s(VG);ERo=r(Bft,"LayoutLMForSequenceClassification"),Bft.forEach(t),CRo=r(H9e," (LayoutLM model)"),H9e.forEach(t),wRo=i(j),_2=n(j,"LI",{});var U9e=s(_2);Lme=n(U9e,"STRONG",{});var Ift=s(Lme);ARo=r(Ift,"layoutlmv2"),Ift.forEach(t),yRo=r(U9e," \u2014 "),XG=n(U9e,"A",{href:!0});var Nft=s(XG);LRo=r(Nft,"LayoutLMv2ForSequenceClassification"),Nft.forEach(t),xRo=r(U9e," (LayoutLMv2 model)"),U9e.forEach(t),$Ro=i(j),u2=n(j,"LI",{});var J9e=s(u2);xme=n(J9e,"STRONG",{});var qft=s(xme);kRo=r(qft,"layoutlmv3"),qft.forEach(t),SRo=r(J9e," \u2014 "),zG=n(J9e,"A",{href:!0});var jft=s(zG);RRo=r(jft,"LayoutLMv3ForSequenceClassification"),jft.forEach(t),PRo=r(J9e," (LayoutLMv3 model)"),J9e.forEach(t),BRo=i(j),b2=n(j,"LI",{});var Y9e=s(b2);$me=n(Y9e,"STRONG",{});var Dft=s($me);IRo=r(Dft,"led"),Dft.forEach(t),NRo=r(Y9e," \u2014 "),WG=n(Y9e,"A",{href:!0});var Gft=s(WG);qRo=r(Gft,"LEDForSequenceClassification"),Gft.forEach(t),jRo=r(Y9e," (LED model)"),Y9e.forEach(t),DRo=i(j),v2=n(j,"LI",{});var K9e=s(v2);kme=n(K9e,"STRONG",{});var Oft=s(kme);GRo=r(Oft,"longformer"),Oft.forEach(t),ORo=r(K9e," \u2014 "),QG=n(K9e,"A",{href:!0});var Vft=s(QG);VRo=r(Vft,"LongformerForSequenceClassification"),Vft.forEach(t),XRo=r(K9e," (Longformer model)"),K9e.forEach(t),zRo=i(j),F2=n(j,"LI",{});var Z9e=s(F2);Sme=n(Z9e,"STRONG",{});var Xft=s(Sme);WRo=r(Xft,"mbart"),Xft.forEach(t),QRo=r(Z9e," \u2014 "),HG=n(Z9e,"A",{href:!0});var zft=s(HG);HRo=r(zft,"MBartForSequenceClassification"),zft.forEach(t),URo=r(Z9e," (mBART model)"),Z9e.forEach(t),JRo=i(j),T2=n(j,"LI",{});var exe=s(T2);Rme=n(exe,"STRONG",{});var Wft=s(Rme);YRo=r(Wft,"megatron-bert"),Wft.forEach(t),KRo=r(exe," \u2014 "),UG=n(exe,"A",{href:!0});var Qft=s(UG);ZRo=r(Qft,"MegatronBertForSequenceClassification"),Qft.forEach(t),ePo=r(exe," (MegatronBert model)"),exe.forEach(t),oPo=i(j),M2=n(j,"LI",{});var oxe=s(M2);Pme=n(oxe,"STRONG",{});var Hft=s(Pme);rPo=r(Hft,"mobilebert"),Hft.forEach(t),tPo=r(oxe," \u2014 "),JG=n(oxe,"A",{href:!0});var Uft=s(JG);aPo=r(Uft,"MobileBertForSequenceClassification"),Uft.forEach(t),nPo=r(oxe," (MobileBERT model)"),oxe.forEach(t),sPo=i(j),E2=n(j,"LI",{});var rxe=s(E2);Bme=n(rxe,"STRONG",{});var Jft=s(Bme);lPo=r(Jft,"mpnet"),Jft.forEach(t),iPo=r(rxe," \u2014 "),YG=n(rxe,"A",{href:!0});var Yft=s(YG);dPo=r(Yft,"MPNetForSequenceClassification"),Yft.forEach(t),cPo=r(rxe," (MPNet model)"),rxe.forEach(t),fPo=i(j),C2=n(j,"LI",{});var txe=s(C2);Ime=n(txe,"STRONG",{});var Kft=s(Ime);mPo=r(Kft,"nystromformer"),Kft.forEach(t),gPo=r(txe," \u2014 "),KG=n(txe,"A",{href:!0});var Zft=s(KG);hPo=r(Zft,"NystromformerForSequenceClassification"),Zft.forEach(t),pPo=r(txe," (Nystromformer model)"),txe.forEach(t),_Po=i(j),w2=n(j,"LI",{});var axe=s(w2);Nme=n(axe,"STRONG",{});var emt=s(Nme);uPo=r(emt,"openai-gpt"),emt.forEach(t),bPo=r(axe," \u2014 "),ZG=n(axe,"A",{href:!0});var omt=s(ZG);vPo=r(omt,"OpenAIGPTForSequenceClassification"),omt.forEach(t),FPo=r(axe," (OpenAI GPT model)"),axe.forEach(t),TPo=i(j),A2=n(j,"LI",{});var nxe=s(A2);qme=n(nxe,"STRONG",{});var rmt=s(qme);MPo=r(rmt,"perceiver"),rmt.forEach(t),EPo=r(nxe," \u2014 "),eO=n(nxe,"A",{href:!0});var tmt=s(eO);CPo=r(tmt,"PerceiverForSequenceClassification"),tmt.forEach(t),wPo=r(nxe," (Perceiver model)"),nxe.forEach(t),APo=i(j),y2=n(j,"LI",{});var sxe=s(y2);jme=n(sxe,"STRONG",{});var amt=s(jme);yPo=r(amt,"plbart"),amt.forEach(t),LPo=r(sxe," \u2014 "),oO=n(sxe,"A",{href:!0});var nmt=s(oO);xPo=r(nmt,"PLBartForSequenceClassification"),nmt.forEach(t),$Po=r(sxe," (PLBart model)"),sxe.forEach(t),kPo=i(j),L2=n(j,"LI",{});var lxe=s(L2);Dme=n(lxe,"STRONG",{});var smt=s(Dme);SPo=r(smt,"qdqbert"),smt.forEach(t),RPo=r(lxe," \u2014 "),rO=n(lxe,"A",{href:!0});var lmt=s(rO);PPo=r(lmt,"QDQBertForSequenceClassification"),lmt.forEach(t),BPo=r(lxe," (QDQBert model)"),lxe.forEach(t),IPo=i(j),x2=n(j,"LI",{});var ixe=s(x2);Gme=n(ixe,"STRONG",{});var imt=s(Gme);NPo=r(imt,"reformer"),imt.forEach(t),qPo=r(ixe," \u2014 "),tO=n(ixe,"A",{href:!0});var dmt=s(tO);jPo=r(dmt,"ReformerForSequenceClassification"),dmt.forEach(t),DPo=r(ixe," (Reformer model)"),ixe.forEach(t),GPo=i(j),$2=n(j,"LI",{});var dxe=s($2);Ome=n(dxe,"STRONG",{});var cmt=s(Ome);OPo=r(cmt,"rembert"),cmt.forEach(t),VPo=r(dxe," \u2014 "),aO=n(dxe,"A",{href:!0});var fmt=s(aO);XPo=r(fmt,"RemBertForSequenceClassification"),fmt.forEach(t),zPo=r(dxe," (RemBERT model)"),dxe.forEach(t),WPo=i(j),k2=n(j,"LI",{});var cxe=s(k2);Vme=n(cxe,"STRONG",{});var mmt=s(Vme);QPo=r(mmt,"roberta"),mmt.forEach(t),HPo=r(cxe," \u2014 "),nO=n(cxe,"A",{href:!0});var gmt=s(nO);UPo=r(gmt,"RobertaForSequenceClassification"),gmt.forEach(t),JPo=r(cxe," (RoBERTa model)"),cxe.forEach(t),YPo=i(j),S2=n(j,"LI",{});var fxe=s(S2);Xme=n(fxe,"STRONG",{});var hmt=s(Xme);KPo=r(hmt,"roformer"),hmt.forEach(t),ZPo=r(fxe," \u2014 "),sO=n(fxe,"A",{href:!0});var pmt=s(sO);eBo=r(pmt,"RoFormerForSequenceClassification"),pmt.forEach(t),oBo=r(fxe," (RoFormer model)"),fxe.forEach(t),rBo=i(j),R2=n(j,"LI",{});var mxe=s(R2);zme=n(mxe,"STRONG",{});var _mt=s(zme);tBo=r(_mt,"squeezebert"),_mt.forEach(t),aBo=r(mxe," \u2014 "),lO=n(mxe,"A",{href:!0});var umt=s(lO);nBo=r(umt,"SqueezeBertForSequenceClassification"),umt.forEach(t),sBo=r(mxe," (SqueezeBERT model)"),mxe.forEach(t),lBo=i(j),P2=n(j,"LI",{});var gxe=s(P2);Wme=n(gxe,"STRONG",{});var bmt=s(Wme);iBo=r(bmt,"tapas"),bmt.forEach(t),dBo=r(gxe," \u2014 "),iO=n(gxe,"A",{href:!0});var vmt=s(iO);cBo=r(vmt,"TapasForSequenceClassification"),vmt.forEach(t),fBo=r(gxe," (TAPAS model)"),gxe.forEach(t),mBo=i(j),B2=n(j,"LI",{});var hxe=s(B2);Qme=n(hxe,"STRONG",{});var Fmt=s(Qme);gBo=r(Fmt,"transfo-xl"),Fmt.forEach(t),hBo=r(hxe," \u2014 "),dO=n(hxe,"A",{href:!0});var Tmt=s(dO);pBo=r(Tmt,"TransfoXLForSequenceClassification"),Tmt.forEach(t),_Bo=r(hxe," (Transformer-XL model)"),hxe.forEach(t),uBo=i(j),I2=n(j,"LI",{});var pxe=s(I2);Hme=n(pxe,"STRONG",{});var Mmt=s(Hme);bBo=r(Mmt,"xlm"),Mmt.forEach(t),vBo=r(pxe," \u2014 "),cO=n(pxe,"A",{href:!0});var Emt=s(cO);FBo=r(Emt,"XLMForSequenceClassification"),Emt.forEach(t),TBo=r(pxe," (XLM model)"),pxe.forEach(t),MBo=i(j),N2=n(j,"LI",{});var _xe=s(N2);Ume=n(_xe,"STRONG",{});var Cmt=s(Ume);EBo=r(Cmt,"xlm-roberta"),Cmt.forEach(t),CBo=r(_xe," \u2014 "),fO=n(_xe,"A",{href:!0});var wmt=s(fO);wBo=r(wmt,"XLMRobertaForSequenceClassification"),wmt.forEach(t),ABo=r(_xe," (XLM-RoBERTa model)"),_xe.forEach(t),yBo=i(j),q2=n(j,"LI",{});var uxe=s(q2);Jme=n(uxe,"STRONG",{});var Amt=s(Jme);LBo=r(Amt,"xlm-roberta-xl"),Amt.forEach(t),xBo=r(uxe," \u2014 "),mO=n(uxe,"A",{href:!0});var ymt=s(mO);$Bo=r(ymt,"XLMRobertaXLForSequenceClassification"),ymt.forEach(t),kBo=r(uxe," (XLM-RoBERTa-XL model)"),uxe.forEach(t),SBo=i(j),j2=n(j,"LI",{});var bxe=s(j2);Yme=n(bxe,"STRONG",{});var Lmt=s(Yme);RBo=r(Lmt,"xlnet"),Lmt.forEach(t),PBo=r(bxe," \u2014 "),gO=n(bxe,"A",{href:!0});var xmt=s(gO);BBo=r(xmt,"XLNetForSequenceClassification"),xmt.forEach(t),IBo=r(bxe," (XLNet model)"),bxe.forEach(t),NBo=i(j),D2=n(j,"LI",{});var vxe=s(D2);Kme=n(vxe,"STRONG",{});var $mt=s(Kme);qBo=r($mt,"yoso"),$mt.forEach(t),jBo=r(vxe," \u2014 "),hO=n(vxe,"A",{href:!0});var kmt=s(hO);DBo=r(kmt,"YosoForSequenceClassification"),kmt.forEach(t),GBo=r(vxe," (YOSO model)"),vxe.forEach(t),j.forEach(t),OBo=i(sa),G2=n(sa,"P",{});var Fxe=s(G2);VBo=r(Fxe,"The model is set in evaluation mode by default using "),Zme=n(Fxe,"CODE",{});var Smt=s(Zme);XBo=r(Smt,"model.eval()"),Smt.forEach(t),zBo=r(Fxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ege=n(Fxe,"CODE",{});var Rmt=s(ege);WBo=r(Rmt,"model.train()"),Rmt.forEach(t),Fxe.forEach(t),QBo=i(sa),T(O2.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),Hqe=i(f),Xi=n(f,"H2",{class:!0});var KDe=s(Xi);V2=n(KDe,"A",{id:!0,class:!0,href:!0});var Pmt=s(V2);oge=n(Pmt,"SPAN",{});var Bmt=s(oge);T(By.$$.fragment,Bmt),Bmt.forEach(t),Pmt.forEach(t),HBo=i(KDe),rge=n(KDe,"SPAN",{});var Imt=s(rge);UBo=r(Imt,"AutoModelForMultipleChoice"),Imt.forEach(t),KDe.forEach(t),Uqe=i(f),Po=n(f,"DIV",{class:!0});var Hs=s(Po);T(Iy.$$.fragment,Hs),JBo=i(Hs),zi=n(Hs,"P",{});var GZ=s(zi);YBo=r(GZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),pO=n(GZ,"A",{href:!0});var Nmt=s(pO);KBo=r(Nmt,"from_pretrained()"),Nmt.forEach(t),ZBo=r(GZ," class method or the "),_O=n(GZ,"A",{href:!0});var qmt=s(_O);eIo=r(qmt,"from_config()"),qmt.forEach(t),oIo=r(GZ,` class
method.`),GZ.forEach(t),rIo=i(Hs),Ny=n(Hs,"P",{});var ZDe=s(Ny);tIo=r(ZDe,"This class cannot be instantiated directly using "),tge=n(ZDe,"CODE",{});var jmt=s(tge);aIo=r(jmt,"__init__()"),jmt.forEach(t),nIo=r(ZDe," (throws an error)."),ZDe.forEach(t),sIo=i(Hs),dt=n(Hs,"DIV",{class:!0});var Uw=s(dt);T(qy.$$.fragment,Uw),lIo=i(Uw),age=n(Uw,"P",{});var Dmt=s(age);iIo=r(Dmt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Dmt.forEach(t),dIo=i(Uw),Wi=n(Uw,"P",{});var OZ=s(Wi);cIo=r(OZ,`Note:
Loading a model from its configuration file does `),nge=n(OZ,"STRONG",{});var Gmt=s(nge);fIo=r(Gmt,"not"),Gmt.forEach(t),mIo=r(OZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uO=n(OZ,"A",{href:!0});var Omt=s(uO);gIo=r(Omt,"from_pretrained()"),Omt.forEach(t),hIo=r(OZ," to load the model weights."),OZ.forEach(t),pIo=i(Uw),T(X2.$$.fragment,Uw),Uw.forEach(t),_Io=i(Hs),ro=n(Hs,"DIV",{class:!0});var la=s(ro);T(jy.$$.fragment,la),uIo=i(la),sge=n(la,"P",{});var Vmt=s(sge);bIo=r(Vmt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Vmt.forEach(t),vIo=i(la),Pa=n(la,"P",{});var Jw=s(Pa);FIo=r(Jw,"The model class to instantiate is selected based on the "),lge=n(Jw,"CODE",{});var Xmt=s(lge);TIo=r(Xmt,"model_type"),Xmt.forEach(t),MIo=r(Jw,` property of the config object (either
passed as an argument or loaded from `),ige=n(Jw,"CODE",{});var zmt=s(ige);EIo=r(zmt,"pretrained_model_name_or_path"),zmt.forEach(t),CIo=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dge=n(Jw,"CODE",{});var Wmt=s(dge);wIo=r(Wmt,"pretrained_model_name_or_path"),Wmt.forEach(t),AIo=r(Jw,":"),Jw.forEach(t),yIo=i(la),K=n(la,"UL",{});var ee=s(K);z2=n(ee,"LI",{});var Txe=s(z2);cge=n(Txe,"STRONG",{});var Qmt=s(cge);LIo=r(Qmt,"albert"),Qmt.forEach(t),xIo=r(Txe," \u2014 "),bO=n(Txe,"A",{href:!0});var Hmt=s(bO);$Io=r(Hmt,"AlbertForMultipleChoice"),Hmt.forEach(t),kIo=r(Txe," (ALBERT model)"),Txe.forEach(t),SIo=i(ee),W2=n(ee,"LI",{});var Mxe=s(W2);fge=n(Mxe,"STRONG",{});var Umt=s(fge);RIo=r(Umt,"bert"),Umt.forEach(t),PIo=r(Mxe," \u2014 "),vO=n(Mxe,"A",{href:!0});var Jmt=s(vO);BIo=r(Jmt,"BertForMultipleChoice"),Jmt.forEach(t),IIo=r(Mxe," (BERT model)"),Mxe.forEach(t),NIo=i(ee),Q2=n(ee,"LI",{});var Exe=s(Q2);mge=n(Exe,"STRONG",{});var Ymt=s(mge);qIo=r(Ymt,"big_bird"),Ymt.forEach(t),jIo=r(Exe," \u2014 "),FO=n(Exe,"A",{href:!0});var Kmt=s(FO);DIo=r(Kmt,"BigBirdForMultipleChoice"),Kmt.forEach(t),GIo=r(Exe," (BigBird model)"),Exe.forEach(t),OIo=i(ee),H2=n(ee,"LI",{});var Cxe=s(H2);gge=n(Cxe,"STRONG",{});var Zmt=s(gge);VIo=r(Zmt,"camembert"),Zmt.forEach(t),XIo=r(Cxe," \u2014 "),TO=n(Cxe,"A",{href:!0});var egt=s(TO);zIo=r(egt,"CamembertForMultipleChoice"),egt.forEach(t),WIo=r(Cxe," (CamemBERT model)"),Cxe.forEach(t),QIo=i(ee),U2=n(ee,"LI",{});var wxe=s(U2);hge=n(wxe,"STRONG",{});var ogt=s(hge);HIo=r(ogt,"canine"),ogt.forEach(t),UIo=r(wxe," \u2014 "),MO=n(wxe,"A",{href:!0});var rgt=s(MO);JIo=r(rgt,"CanineForMultipleChoice"),rgt.forEach(t),YIo=r(wxe," (Canine model)"),wxe.forEach(t),KIo=i(ee),J2=n(ee,"LI",{});var Axe=s(J2);pge=n(Axe,"STRONG",{});var tgt=s(pge);ZIo=r(tgt,"convbert"),tgt.forEach(t),eNo=r(Axe," \u2014 "),EO=n(Axe,"A",{href:!0});var agt=s(EO);oNo=r(agt,"ConvBertForMultipleChoice"),agt.forEach(t),rNo=r(Axe," (ConvBERT model)"),Axe.forEach(t),tNo=i(ee),Y2=n(ee,"LI",{});var yxe=s(Y2);_ge=n(yxe,"STRONG",{});var ngt=s(_ge);aNo=r(ngt,"data2vec-text"),ngt.forEach(t),nNo=r(yxe," \u2014 "),CO=n(yxe,"A",{href:!0});var sgt=s(CO);sNo=r(sgt,"Data2VecTextForMultipleChoice"),sgt.forEach(t),lNo=r(yxe," (Data2VecText model)"),yxe.forEach(t),iNo=i(ee),K2=n(ee,"LI",{});var Lxe=s(K2);uge=n(Lxe,"STRONG",{});var lgt=s(uge);dNo=r(lgt,"deberta-v2"),lgt.forEach(t),cNo=r(Lxe," \u2014 "),wO=n(Lxe,"A",{href:!0});var igt=s(wO);fNo=r(igt,"DebertaV2ForMultipleChoice"),igt.forEach(t),mNo=r(Lxe," (DeBERTa-v2 model)"),Lxe.forEach(t),gNo=i(ee),Z2=n(ee,"LI",{});var xxe=s(Z2);bge=n(xxe,"STRONG",{});var dgt=s(bge);hNo=r(dgt,"distilbert"),dgt.forEach(t),pNo=r(xxe," \u2014 "),AO=n(xxe,"A",{href:!0});var cgt=s(AO);_No=r(cgt,"DistilBertForMultipleChoice"),cgt.forEach(t),uNo=r(xxe," (DistilBERT model)"),xxe.forEach(t),bNo=i(ee),e4=n(ee,"LI",{});var $xe=s(e4);vge=n($xe,"STRONG",{});var fgt=s(vge);vNo=r(fgt,"electra"),fgt.forEach(t),FNo=r($xe," \u2014 "),yO=n($xe,"A",{href:!0});var mgt=s(yO);TNo=r(mgt,"ElectraForMultipleChoice"),mgt.forEach(t),MNo=r($xe," (ELECTRA model)"),$xe.forEach(t),ENo=i(ee),o4=n(ee,"LI",{});var kxe=s(o4);Fge=n(kxe,"STRONG",{});var ggt=s(Fge);CNo=r(ggt,"flaubert"),ggt.forEach(t),wNo=r(kxe," \u2014 "),LO=n(kxe,"A",{href:!0});var hgt=s(LO);ANo=r(hgt,"FlaubertForMultipleChoice"),hgt.forEach(t),yNo=r(kxe," (FlauBERT model)"),kxe.forEach(t),LNo=i(ee),r4=n(ee,"LI",{});var Sxe=s(r4);Tge=n(Sxe,"STRONG",{});var pgt=s(Tge);xNo=r(pgt,"fnet"),pgt.forEach(t),$No=r(Sxe," \u2014 "),xO=n(Sxe,"A",{href:!0});var _gt=s(xO);kNo=r(_gt,"FNetForMultipleChoice"),_gt.forEach(t),SNo=r(Sxe," (FNet model)"),Sxe.forEach(t),RNo=i(ee),t4=n(ee,"LI",{});var Rxe=s(t4);Mge=n(Rxe,"STRONG",{});var ugt=s(Mge);PNo=r(ugt,"funnel"),ugt.forEach(t),BNo=r(Rxe," \u2014 "),$O=n(Rxe,"A",{href:!0});var bgt=s($O);INo=r(bgt,"FunnelForMultipleChoice"),bgt.forEach(t),NNo=r(Rxe," (Funnel Transformer model)"),Rxe.forEach(t),qNo=i(ee),a4=n(ee,"LI",{});var Pxe=s(a4);Ege=n(Pxe,"STRONG",{});var vgt=s(Ege);jNo=r(vgt,"greaselm"),vgt.forEach(t),DNo=r(Pxe," \u2014 "),kO=n(Pxe,"A",{href:!0});var Fgt=s(kO);GNo=r(Fgt,"GreaseLMForMultipleChoice"),Fgt.forEach(t),ONo=r(Pxe," (GreaseLM model)"),Pxe.forEach(t),VNo=i(ee),n4=n(ee,"LI",{});var Bxe=s(n4);Cge=n(Bxe,"STRONG",{});var Tgt=s(Cge);XNo=r(Tgt,"ibert"),Tgt.forEach(t),zNo=r(Bxe," \u2014 "),SO=n(Bxe,"A",{href:!0});var Mgt=s(SO);WNo=r(Mgt,"IBertForMultipleChoice"),Mgt.forEach(t),QNo=r(Bxe," (I-BERT model)"),Bxe.forEach(t),HNo=i(ee),s4=n(ee,"LI",{});var Ixe=s(s4);wge=n(Ixe,"STRONG",{});var Egt=s(wge);UNo=r(Egt,"longformer"),Egt.forEach(t),JNo=r(Ixe," \u2014 "),RO=n(Ixe,"A",{href:!0});var Cgt=s(RO);YNo=r(Cgt,"LongformerForMultipleChoice"),Cgt.forEach(t),KNo=r(Ixe," (Longformer model)"),Ixe.forEach(t),ZNo=i(ee),l4=n(ee,"LI",{});var Nxe=s(l4);Age=n(Nxe,"STRONG",{});var wgt=s(Age);eqo=r(wgt,"megatron-bert"),wgt.forEach(t),oqo=r(Nxe," \u2014 "),PO=n(Nxe,"A",{href:!0});var Agt=s(PO);rqo=r(Agt,"MegatronBertForMultipleChoice"),Agt.forEach(t),tqo=r(Nxe," (MegatronBert model)"),Nxe.forEach(t),aqo=i(ee),i4=n(ee,"LI",{});var qxe=s(i4);yge=n(qxe,"STRONG",{});var ygt=s(yge);nqo=r(ygt,"mobilebert"),ygt.forEach(t),sqo=r(qxe," \u2014 "),BO=n(qxe,"A",{href:!0});var Lgt=s(BO);lqo=r(Lgt,"MobileBertForMultipleChoice"),Lgt.forEach(t),iqo=r(qxe," (MobileBERT model)"),qxe.forEach(t),dqo=i(ee),d4=n(ee,"LI",{});var jxe=s(d4);Lge=n(jxe,"STRONG",{});var xgt=s(Lge);cqo=r(xgt,"mpnet"),xgt.forEach(t),fqo=r(jxe," \u2014 "),IO=n(jxe,"A",{href:!0});var $gt=s(IO);mqo=r($gt,"MPNetForMultipleChoice"),$gt.forEach(t),gqo=r(jxe," (MPNet model)"),jxe.forEach(t),hqo=i(ee),c4=n(ee,"LI",{});var Dxe=s(c4);xge=n(Dxe,"STRONG",{});var kgt=s(xge);pqo=r(kgt,"nystromformer"),kgt.forEach(t),_qo=r(Dxe," \u2014 "),NO=n(Dxe,"A",{href:!0});var Sgt=s(NO);uqo=r(Sgt,"NystromformerForMultipleChoice"),Sgt.forEach(t),bqo=r(Dxe," (Nystromformer model)"),Dxe.forEach(t),vqo=i(ee),f4=n(ee,"LI",{});var Gxe=s(f4);$ge=n(Gxe,"STRONG",{});var Rgt=s($ge);Fqo=r(Rgt,"qdqbert"),Rgt.forEach(t),Tqo=r(Gxe," \u2014 "),qO=n(Gxe,"A",{href:!0});var Pgt=s(qO);Mqo=r(Pgt,"QDQBertForMultipleChoice"),Pgt.forEach(t),Eqo=r(Gxe," (QDQBert model)"),Gxe.forEach(t),Cqo=i(ee),m4=n(ee,"LI",{});var Oxe=s(m4);kge=n(Oxe,"STRONG",{});var Bgt=s(kge);wqo=r(Bgt,"rembert"),Bgt.forEach(t),Aqo=r(Oxe," \u2014 "),jO=n(Oxe,"A",{href:!0});var Igt=s(jO);yqo=r(Igt,"RemBertForMultipleChoice"),Igt.forEach(t),Lqo=r(Oxe," (RemBERT model)"),Oxe.forEach(t),xqo=i(ee),g4=n(ee,"LI",{});var Vxe=s(g4);Sge=n(Vxe,"STRONG",{});var Ngt=s(Sge);$qo=r(Ngt,"roberta"),Ngt.forEach(t),kqo=r(Vxe," \u2014 "),DO=n(Vxe,"A",{href:!0});var qgt=s(DO);Sqo=r(qgt,"RobertaForMultipleChoice"),qgt.forEach(t),Rqo=r(Vxe," (RoBERTa model)"),Vxe.forEach(t),Pqo=i(ee),h4=n(ee,"LI",{});var Xxe=s(h4);Rge=n(Xxe,"STRONG",{});var jgt=s(Rge);Bqo=r(jgt,"roformer"),jgt.forEach(t),Iqo=r(Xxe," \u2014 "),GO=n(Xxe,"A",{href:!0});var Dgt=s(GO);Nqo=r(Dgt,"RoFormerForMultipleChoice"),Dgt.forEach(t),qqo=r(Xxe," (RoFormer model)"),Xxe.forEach(t),jqo=i(ee),p4=n(ee,"LI",{});var zxe=s(p4);Pge=n(zxe,"STRONG",{});var Ggt=s(Pge);Dqo=r(Ggt,"squeezebert"),Ggt.forEach(t),Gqo=r(zxe," \u2014 "),OO=n(zxe,"A",{href:!0});var Ogt=s(OO);Oqo=r(Ogt,"SqueezeBertForMultipleChoice"),Ogt.forEach(t),Vqo=r(zxe," (SqueezeBERT model)"),zxe.forEach(t),Xqo=i(ee),_4=n(ee,"LI",{});var Wxe=s(_4);Bge=n(Wxe,"STRONG",{});var Vgt=s(Bge);zqo=r(Vgt,"xlm"),Vgt.forEach(t),Wqo=r(Wxe," \u2014 "),VO=n(Wxe,"A",{href:!0});var Xgt=s(VO);Qqo=r(Xgt,"XLMForMultipleChoice"),Xgt.forEach(t),Hqo=r(Wxe," (XLM model)"),Wxe.forEach(t),Uqo=i(ee),u4=n(ee,"LI",{});var Qxe=s(u4);Ige=n(Qxe,"STRONG",{});var zgt=s(Ige);Jqo=r(zgt,"xlm-roberta"),zgt.forEach(t),Yqo=r(Qxe," \u2014 "),XO=n(Qxe,"A",{href:!0});var Wgt=s(XO);Kqo=r(Wgt,"XLMRobertaForMultipleChoice"),Wgt.forEach(t),Zqo=r(Qxe," (XLM-RoBERTa model)"),Qxe.forEach(t),ejo=i(ee),b4=n(ee,"LI",{});var Hxe=s(b4);Nge=n(Hxe,"STRONG",{});var Qgt=s(Nge);ojo=r(Qgt,"xlm-roberta-xl"),Qgt.forEach(t),rjo=r(Hxe," \u2014 "),zO=n(Hxe,"A",{href:!0});var Hgt=s(zO);tjo=r(Hgt,"XLMRobertaXLForMultipleChoice"),Hgt.forEach(t),ajo=r(Hxe," (XLM-RoBERTa-XL model)"),Hxe.forEach(t),njo=i(ee),v4=n(ee,"LI",{});var Uxe=s(v4);qge=n(Uxe,"STRONG",{});var Ugt=s(qge);sjo=r(Ugt,"xlnet"),Ugt.forEach(t),ljo=r(Uxe," \u2014 "),WO=n(Uxe,"A",{href:!0});var Jgt=s(WO);ijo=r(Jgt,"XLNetForMultipleChoice"),Jgt.forEach(t),djo=r(Uxe," (XLNet model)"),Uxe.forEach(t),cjo=i(ee),F4=n(ee,"LI",{});var Jxe=s(F4);jge=n(Jxe,"STRONG",{});var Ygt=s(jge);fjo=r(Ygt,"yoso"),Ygt.forEach(t),mjo=r(Jxe," \u2014 "),QO=n(Jxe,"A",{href:!0});var Kgt=s(QO);gjo=r(Kgt,"YosoForMultipleChoice"),Kgt.forEach(t),hjo=r(Jxe," (YOSO model)"),Jxe.forEach(t),ee.forEach(t),pjo=i(la),T4=n(la,"P",{});var Yxe=s(T4);_jo=r(Yxe,"The model is set in evaluation mode by default using "),Dge=n(Yxe,"CODE",{});var Zgt=s(Dge);ujo=r(Zgt,"model.eval()"),Zgt.forEach(t),bjo=r(Yxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gge=n(Yxe,"CODE",{});var eht=s(Gge);vjo=r(eht,"model.train()"),eht.forEach(t),Yxe.forEach(t),Fjo=i(la),T(M4.$$.fragment,la),la.forEach(t),Hs.forEach(t),Jqe=i(f),Qi=n(f,"H2",{class:!0});var eGe=s(Qi);E4=n(eGe,"A",{id:!0,class:!0,href:!0});var oht=s(E4);Oge=n(oht,"SPAN",{});var rht=s(Oge);T(Dy.$$.fragment,rht),rht.forEach(t),oht.forEach(t),Tjo=i(eGe),Vge=n(eGe,"SPAN",{});var tht=s(Vge);Mjo=r(tht,"AutoModelForNextSentencePrediction"),tht.forEach(t),eGe.forEach(t),Yqe=i(f),Bo=n(f,"DIV",{class:!0});var Us=s(Bo);T(Gy.$$.fragment,Us),Ejo=i(Us),Hi=n(Us,"P",{});var VZ=s(Hi);Cjo=r(VZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),HO=n(VZ,"A",{href:!0});var aht=s(HO);wjo=r(aht,"from_pretrained()"),aht.forEach(t),Ajo=r(VZ," class method or the "),UO=n(VZ,"A",{href:!0});var nht=s(UO);yjo=r(nht,"from_config()"),nht.forEach(t),Ljo=r(VZ,` class
method.`),VZ.forEach(t),xjo=i(Us),Oy=n(Us,"P",{});var oGe=s(Oy);$jo=r(oGe,"This class cannot be instantiated directly using "),Xge=n(oGe,"CODE",{});var sht=s(Xge);kjo=r(sht,"__init__()"),sht.forEach(t),Sjo=r(oGe," (throws an error)."),oGe.forEach(t),Rjo=i(Us),ct=n(Us,"DIV",{class:!0});var Yw=s(ct);T(Vy.$$.fragment,Yw),Pjo=i(Yw),zge=n(Yw,"P",{});var lht=s(zge);Bjo=r(lht,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),lht.forEach(t),Ijo=i(Yw),Ui=n(Yw,"P",{});var XZ=s(Ui);Njo=r(XZ,`Note:
Loading a model from its configuration file does `),Wge=n(XZ,"STRONG",{});var iht=s(Wge);qjo=r(iht,"not"),iht.forEach(t),jjo=r(XZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JO=n(XZ,"A",{href:!0});var dht=s(JO);Djo=r(dht,"from_pretrained()"),dht.forEach(t),Gjo=r(XZ," to load the model weights."),XZ.forEach(t),Ojo=i(Yw),T(C4.$$.fragment,Yw),Yw.forEach(t),Vjo=i(Us),to=n(Us,"DIV",{class:!0});var ia=s(to);T(Xy.$$.fragment,ia),Xjo=i(ia),Qge=n(ia,"P",{});var cht=s(Qge);zjo=r(cht,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),cht.forEach(t),Wjo=i(ia),Ba=n(ia,"P",{});var Kw=s(Ba);Qjo=r(Kw,"The model class to instantiate is selected based on the "),Hge=n(Kw,"CODE",{});var fht=s(Hge);Hjo=r(fht,"model_type"),fht.forEach(t),Ujo=r(Kw,` property of the config object (either
passed as an argument or loaded from `),Uge=n(Kw,"CODE",{});var mht=s(Uge);Jjo=r(mht,"pretrained_model_name_or_path"),mht.forEach(t),Yjo=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jge=n(Kw,"CODE",{});var ght=s(Jge);Kjo=r(ght,"pretrained_model_name_or_path"),ght.forEach(t),Zjo=r(Kw,":"),Kw.forEach(t),eDo=i(ia),Yr=n(ia,"UL",{});var Js=s(Yr);w4=n(Js,"LI",{});var Kxe=s(w4);Yge=n(Kxe,"STRONG",{});var hht=s(Yge);oDo=r(hht,"bert"),hht.forEach(t),rDo=r(Kxe," \u2014 "),YO=n(Kxe,"A",{href:!0});var pht=s(YO);tDo=r(pht,"BertForNextSentencePrediction"),pht.forEach(t),aDo=r(Kxe," (BERT model)"),Kxe.forEach(t),nDo=i(Js),A4=n(Js,"LI",{});var Zxe=s(A4);Kge=n(Zxe,"STRONG",{});var _ht=s(Kge);sDo=r(_ht,"fnet"),_ht.forEach(t),lDo=r(Zxe," \u2014 "),KO=n(Zxe,"A",{href:!0});var uht=s(KO);iDo=r(uht,"FNetForNextSentencePrediction"),uht.forEach(t),dDo=r(Zxe," (FNet model)"),Zxe.forEach(t),cDo=i(Js),y4=n(Js,"LI",{});var e$e=s(y4);Zge=n(e$e,"STRONG",{});var bht=s(Zge);fDo=r(bht,"megatron-bert"),bht.forEach(t),mDo=r(e$e," \u2014 "),ZO=n(e$e,"A",{href:!0});var vht=s(ZO);gDo=r(vht,"MegatronBertForNextSentencePrediction"),vht.forEach(t),hDo=r(e$e," (MegatronBert model)"),e$e.forEach(t),pDo=i(Js),L4=n(Js,"LI",{});var o$e=s(L4);ehe=n(o$e,"STRONG",{});var Fht=s(ehe);_Do=r(Fht,"mobilebert"),Fht.forEach(t),uDo=r(o$e," \u2014 "),eV=n(o$e,"A",{href:!0});var Tht=s(eV);bDo=r(Tht,"MobileBertForNextSentencePrediction"),Tht.forEach(t),vDo=r(o$e," (MobileBERT model)"),o$e.forEach(t),FDo=i(Js),x4=n(Js,"LI",{});var r$e=s(x4);ohe=n(r$e,"STRONG",{});var Mht=s(ohe);TDo=r(Mht,"qdqbert"),Mht.forEach(t),MDo=r(r$e," \u2014 "),oV=n(r$e,"A",{href:!0});var Eht=s(oV);EDo=r(Eht,"QDQBertForNextSentencePrediction"),Eht.forEach(t),CDo=r(r$e," (QDQBert model)"),r$e.forEach(t),Js.forEach(t),wDo=i(ia),$4=n(ia,"P",{});var t$e=s($4);ADo=r(t$e,"The model is set in evaluation mode by default using "),rhe=n(t$e,"CODE",{});var Cht=s(rhe);yDo=r(Cht,"model.eval()"),Cht.forEach(t),LDo=r(t$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),the=n(t$e,"CODE",{});var wht=s(the);xDo=r(wht,"model.train()"),wht.forEach(t),t$e.forEach(t),$Do=i(ia),T(k4.$$.fragment,ia),ia.forEach(t),Us.forEach(t),Kqe=i(f),Ji=n(f,"H2",{class:!0});var rGe=s(Ji);S4=n(rGe,"A",{id:!0,class:!0,href:!0});var Aht=s(S4);ahe=n(Aht,"SPAN",{});var yht=s(ahe);T(zy.$$.fragment,yht),yht.forEach(t),Aht.forEach(t),kDo=i(rGe),nhe=n(rGe,"SPAN",{});var Lht=s(nhe);SDo=r(Lht,"AutoModelForTokenClassification"),Lht.forEach(t),rGe.forEach(t),Zqe=i(f),Io=n(f,"DIV",{class:!0});var Ys=s(Io);T(Wy.$$.fragment,Ys),RDo=i(Ys),Yi=n(Ys,"P",{});var zZ=s(Yi);PDo=r(zZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rV=n(zZ,"A",{href:!0});var xht=s(rV);BDo=r(xht,"from_pretrained()"),xht.forEach(t),IDo=r(zZ," class method or the "),tV=n(zZ,"A",{href:!0});var $ht=s(tV);NDo=r($ht,"from_config()"),$ht.forEach(t),qDo=r(zZ,` class
method.`),zZ.forEach(t),jDo=i(Ys),Qy=n(Ys,"P",{});var tGe=s(Qy);DDo=r(tGe,"This class cannot be instantiated directly using "),she=n(tGe,"CODE",{});var kht=s(she);GDo=r(kht,"__init__()"),kht.forEach(t),ODo=r(tGe," (throws an error)."),tGe.forEach(t),VDo=i(Ys),ft=n(Ys,"DIV",{class:!0});var Zw=s(ft);T(Hy.$$.fragment,Zw),XDo=i(Zw),lhe=n(Zw,"P",{});var Sht=s(lhe);zDo=r(Sht,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Sht.forEach(t),WDo=i(Zw),Ki=n(Zw,"P",{});var WZ=s(Ki);QDo=r(WZ,`Note:
Loading a model from its configuration file does `),ihe=n(WZ,"STRONG",{});var Rht=s(ihe);HDo=r(Rht,"not"),Rht.forEach(t),UDo=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aV=n(WZ,"A",{href:!0});var Pht=s(aV);JDo=r(Pht,"from_pretrained()"),Pht.forEach(t),YDo=r(WZ," to load the model weights."),WZ.forEach(t),KDo=i(Zw),T(R4.$$.fragment,Zw),Zw.forEach(t),ZDo=i(Ys),ao=n(Ys,"DIV",{class:!0});var da=s(ao);T(Uy.$$.fragment,da),eGo=i(da),dhe=n(da,"P",{});var Bht=s(dhe);oGo=r(Bht,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Bht.forEach(t),rGo=i(da),Ia=n(da,"P",{});var e0=s(Ia);tGo=r(e0,"The model class to instantiate is selected based on the "),che=n(e0,"CODE",{});var Iht=s(che);aGo=r(Iht,"model_type"),Iht.forEach(t),nGo=r(e0,` property of the config object (either
passed as an argument or loaded from `),fhe=n(e0,"CODE",{});var Nht=s(fhe);sGo=r(Nht,"pretrained_model_name_or_path"),Nht.forEach(t),lGo=r(e0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mhe=n(e0,"CODE",{});var qht=s(mhe);iGo=r(qht,"pretrained_model_name_or_path"),qht.forEach(t),dGo=r(e0,":"),e0.forEach(t),cGo=i(da),H=n(da,"UL",{});var J=s(H);P4=n(J,"LI",{});var a$e=s(P4);ghe=n(a$e,"STRONG",{});var jht=s(ghe);fGo=r(jht,"albert"),jht.forEach(t),mGo=r(a$e," \u2014 "),nV=n(a$e,"A",{href:!0});var Dht=s(nV);gGo=r(Dht,"AlbertForTokenClassification"),Dht.forEach(t),hGo=r(a$e," (ALBERT model)"),a$e.forEach(t),pGo=i(J),B4=n(J,"LI",{});var n$e=s(B4);hhe=n(n$e,"STRONG",{});var Ght=s(hhe);_Go=r(Ght,"bert"),Ght.forEach(t),uGo=r(n$e," \u2014 "),sV=n(n$e,"A",{href:!0});var Oht=s(sV);bGo=r(Oht,"BertForTokenClassification"),Oht.forEach(t),vGo=r(n$e," (BERT model)"),n$e.forEach(t),FGo=i(J),I4=n(J,"LI",{});var s$e=s(I4);phe=n(s$e,"STRONG",{});var Vht=s(phe);TGo=r(Vht,"big_bird"),Vht.forEach(t),MGo=r(s$e," \u2014 "),lV=n(s$e,"A",{href:!0});var Xht=s(lV);EGo=r(Xht,"BigBirdForTokenClassification"),Xht.forEach(t),CGo=r(s$e," (BigBird model)"),s$e.forEach(t),wGo=i(J),N4=n(J,"LI",{});var l$e=s(N4);_he=n(l$e,"STRONG",{});var zht=s(_he);AGo=r(zht,"camembert"),zht.forEach(t),yGo=r(l$e," \u2014 "),iV=n(l$e,"A",{href:!0});var Wht=s(iV);LGo=r(Wht,"CamembertForTokenClassification"),Wht.forEach(t),xGo=r(l$e," (CamemBERT model)"),l$e.forEach(t),$Go=i(J),q4=n(J,"LI",{});var i$e=s(q4);uhe=n(i$e,"STRONG",{});var Qht=s(uhe);kGo=r(Qht,"canine"),Qht.forEach(t),SGo=r(i$e," \u2014 "),dV=n(i$e,"A",{href:!0});var Hht=s(dV);RGo=r(Hht,"CanineForTokenClassification"),Hht.forEach(t),PGo=r(i$e," (Canine model)"),i$e.forEach(t),BGo=i(J),j4=n(J,"LI",{});var d$e=s(j4);bhe=n(d$e,"STRONG",{});var Uht=s(bhe);IGo=r(Uht,"convbert"),Uht.forEach(t),NGo=r(d$e," \u2014 "),cV=n(d$e,"A",{href:!0});var Jht=s(cV);qGo=r(Jht,"ConvBertForTokenClassification"),Jht.forEach(t),jGo=r(d$e," (ConvBERT model)"),d$e.forEach(t),DGo=i(J),D4=n(J,"LI",{});var c$e=s(D4);vhe=n(c$e,"STRONG",{});var Yht=s(vhe);GGo=r(Yht,"data2vec-text"),Yht.forEach(t),OGo=r(c$e," \u2014 "),fV=n(c$e,"A",{href:!0});var Kht=s(fV);VGo=r(Kht,"Data2VecTextForTokenClassification"),Kht.forEach(t),XGo=r(c$e," (Data2VecText model)"),c$e.forEach(t),zGo=i(J),G4=n(J,"LI",{});var f$e=s(G4);Fhe=n(f$e,"STRONG",{});var Zht=s(Fhe);WGo=r(Zht,"deberta"),Zht.forEach(t),QGo=r(f$e," \u2014 "),mV=n(f$e,"A",{href:!0});var ept=s(mV);HGo=r(ept,"DebertaForTokenClassification"),ept.forEach(t),UGo=r(f$e," (DeBERTa model)"),f$e.forEach(t),JGo=i(J),O4=n(J,"LI",{});var m$e=s(O4);The=n(m$e,"STRONG",{});var opt=s(The);YGo=r(opt,"deberta-v2"),opt.forEach(t),KGo=r(m$e," \u2014 "),gV=n(m$e,"A",{href:!0});var rpt=s(gV);ZGo=r(rpt,"DebertaV2ForTokenClassification"),rpt.forEach(t),eOo=r(m$e," (DeBERTa-v2 model)"),m$e.forEach(t),oOo=i(J),V4=n(J,"LI",{});var g$e=s(V4);Mhe=n(g$e,"STRONG",{});var tpt=s(Mhe);rOo=r(tpt,"distilbert"),tpt.forEach(t),tOo=r(g$e," \u2014 "),hV=n(g$e,"A",{href:!0});var apt=s(hV);aOo=r(apt,"DistilBertForTokenClassification"),apt.forEach(t),nOo=r(g$e," (DistilBERT model)"),g$e.forEach(t),sOo=i(J),X4=n(J,"LI",{});var h$e=s(X4);Ehe=n(h$e,"STRONG",{});var npt=s(Ehe);lOo=r(npt,"electra"),npt.forEach(t),iOo=r(h$e," \u2014 "),pV=n(h$e,"A",{href:!0});var spt=s(pV);dOo=r(spt,"ElectraForTokenClassification"),spt.forEach(t),cOo=r(h$e," (ELECTRA model)"),h$e.forEach(t),fOo=i(J),z4=n(J,"LI",{});var p$e=s(z4);Che=n(p$e,"STRONG",{});var lpt=s(Che);mOo=r(lpt,"flaubert"),lpt.forEach(t),gOo=r(p$e," \u2014 "),_V=n(p$e,"A",{href:!0});var ipt=s(_V);hOo=r(ipt,"FlaubertForTokenClassification"),ipt.forEach(t),pOo=r(p$e," (FlauBERT model)"),p$e.forEach(t),_Oo=i(J),W4=n(J,"LI",{});var _$e=s(W4);whe=n(_$e,"STRONG",{});var dpt=s(whe);uOo=r(dpt,"fnet"),dpt.forEach(t),bOo=r(_$e," \u2014 "),uV=n(_$e,"A",{href:!0});var cpt=s(uV);vOo=r(cpt,"FNetForTokenClassification"),cpt.forEach(t),FOo=r(_$e," (FNet model)"),_$e.forEach(t),TOo=i(J),Q4=n(J,"LI",{});var u$e=s(Q4);Ahe=n(u$e,"STRONG",{});var fpt=s(Ahe);MOo=r(fpt,"funnel"),fpt.forEach(t),EOo=r(u$e," \u2014 "),bV=n(u$e,"A",{href:!0});var mpt=s(bV);COo=r(mpt,"FunnelForTokenClassification"),mpt.forEach(t),wOo=r(u$e," (Funnel Transformer model)"),u$e.forEach(t),AOo=i(J),H4=n(J,"LI",{});var b$e=s(H4);yhe=n(b$e,"STRONG",{});var gpt=s(yhe);yOo=r(gpt,"gpt2"),gpt.forEach(t),LOo=r(b$e," \u2014 "),vV=n(b$e,"A",{href:!0});var hpt=s(vV);xOo=r(hpt,"GPT2ForTokenClassification"),hpt.forEach(t),$Oo=r(b$e," (OpenAI GPT-2 model)"),b$e.forEach(t),kOo=i(J),U4=n(J,"LI",{});var v$e=s(U4);Lhe=n(v$e,"STRONG",{});var ppt=s(Lhe);SOo=r(ppt,"ibert"),ppt.forEach(t),ROo=r(v$e," \u2014 "),FV=n(v$e,"A",{href:!0});var _pt=s(FV);POo=r(_pt,"IBertForTokenClassification"),_pt.forEach(t),BOo=r(v$e," (I-BERT model)"),v$e.forEach(t),IOo=i(J),J4=n(J,"LI",{});var F$e=s(J4);xhe=n(F$e,"STRONG",{});var upt=s(xhe);NOo=r(upt,"layoutlm"),upt.forEach(t),qOo=r(F$e," \u2014 "),TV=n(F$e,"A",{href:!0});var bpt=s(TV);jOo=r(bpt,"LayoutLMForTokenClassification"),bpt.forEach(t),DOo=r(F$e," (LayoutLM model)"),F$e.forEach(t),GOo=i(J),Y4=n(J,"LI",{});var T$e=s(Y4);$he=n(T$e,"STRONG",{});var vpt=s($he);OOo=r(vpt,"layoutlmv2"),vpt.forEach(t),VOo=r(T$e," \u2014 "),MV=n(T$e,"A",{href:!0});var Fpt=s(MV);XOo=r(Fpt,"LayoutLMv2ForTokenClassification"),Fpt.forEach(t),zOo=r(T$e," (LayoutLMv2 model)"),T$e.forEach(t),WOo=i(J),K4=n(J,"LI",{});var M$e=s(K4);khe=n(M$e,"STRONG",{});var Tpt=s(khe);QOo=r(Tpt,"layoutlmv3"),Tpt.forEach(t),HOo=r(M$e," \u2014 "),EV=n(M$e,"A",{href:!0});var Mpt=s(EV);UOo=r(Mpt,"LayoutLMv3ForTokenClassification"),Mpt.forEach(t),JOo=r(M$e," (LayoutLMv3 model)"),M$e.forEach(t),YOo=i(J),Z4=n(J,"LI",{});var E$e=s(Z4);She=n(E$e,"STRONG",{});var Ept=s(She);KOo=r(Ept,"longformer"),Ept.forEach(t),ZOo=r(E$e," \u2014 "),CV=n(E$e,"A",{href:!0});var Cpt=s(CV);eVo=r(Cpt,"LongformerForTokenClassification"),Cpt.forEach(t),oVo=r(E$e," (Longformer model)"),E$e.forEach(t),rVo=i(J),ev=n(J,"LI",{});var C$e=s(ev);Rhe=n(C$e,"STRONG",{});var wpt=s(Rhe);tVo=r(wpt,"megatron-bert"),wpt.forEach(t),aVo=r(C$e," \u2014 "),wV=n(C$e,"A",{href:!0});var Apt=s(wV);nVo=r(Apt,"MegatronBertForTokenClassification"),Apt.forEach(t),sVo=r(C$e," (MegatronBert model)"),C$e.forEach(t),lVo=i(J),ov=n(J,"LI",{});var w$e=s(ov);Phe=n(w$e,"STRONG",{});var ypt=s(Phe);iVo=r(ypt,"mobilebert"),ypt.forEach(t),dVo=r(w$e," \u2014 "),AV=n(w$e,"A",{href:!0});var Lpt=s(AV);cVo=r(Lpt,"MobileBertForTokenClassification"),Lpt.forEach(t),fVo=r(w$e," (MobileBERT model)"),w$e.forEach(t),mVo=i(J),rv=n(J,"LI",{});var A$e=s(rv);Bhe=n(A$e,"STRONG",{});var xpt=s(Bhe);gVo=r(xpt,"mpnet"),xpt.forEach(t),hVo=r(A$e," \u2014 "),yV=n(A$e,"A",{href:!0});var $pt=s(yV);pVo=r($pt,"MPNetForTokenClassification"),$pt.forEach(t),_Vo=r(A$e," (MPNet model)"),A$e.forEach(t),uVo=i(J),tv=n(J,"LI",{});var y$e=s(tv);Ihe=n(y$e,"STRONG",{});var kpt=s(Ihe);bVo=r(kpt,"nystromformer"),kpt.forEach(t),vVo=r(y$e," \u2014 "),LV=n(y$e,"A",{href:!0});var Spt=s(LV);FVo=r(Spt,"NystromformerForTokenClassification"),Spt.forEach(t),TVo=r(y$e," (Nystromformer model)"),y$e.forEach(t),MVo=i(J),av=n(J,"LI",{});var L$e=s(av);Nhe=n(L$e,"STRONG",{});var Rpt=s(Nhe);EVo=r(Rpt,"qdqbert"),Rpt.forEach(t),CVo=r(L$e," \u2014 "),xV=n(L$e,"A",{href:!0});var Ppt=s(xV);wVo=r(Ppt,"QDQBertForTokenClassification"),Ppt.forEach(t),AVo=r(L$e," (QDQBert model)"),L$e.forEach(t),yVo=i(J),nv=n(J,"LI",{});var x$e=s(nv);qhe=n(x$e,"STRONG",{});var Bpt=s(qhe);LVo=r(Bpt,"rembert"),Bpt.forEach(t),xVo=r(x$e," \u2014 "),$V=n(x$e,"A",{href:!0});var Ipt=s($V);$Vo=r(Ipt,"RemBertForTokenClassification"),Ipt.forEach(t),kVo=r(x$e," (RemBERT model)"),x$e.forEach(t),SVo=i(J),sv=n(J,"LI",{});var $$e=s(sv);jhe=n($$e,"STRONG",{});var Npt=s(jhe);RVo=r(Npt,"roberta"),Npt.forEach(t),PVo=r($$e," \u2014 "),kV=n($$e,"A",{href:!0});var qpt=s(kV);BVo=r(qpt,"RobertaForTokenClassification"),qpt.forEach(t),IVo=r($$e," (RoBERTa model)"),$$e.forEach(t),NVo=i(J),lv=n(J,"LI",{});var k$e=s(lv);Dhe=n(k$e,"STRONG",{});var jpt=s(Dhe);qVo=r(jpt,"roformer"),jpt.forEach(t),jVo=r(k$e," \u2014 "),SV=n(k$e,"A",{href:!0});var Dpt=s(SV);DVo=r(Dpt,"RoFormerForTokenClassification"),Dpt.forEach(t),GVo=r(k$e," (RoFormer model)"),k$e.forEach(t),OVo=i(J),iv=n(J,"LI",{});var S$e=s(iv);Ghe=n(S$e,"STRONG",{});var Gpt=s(Ghe);VVo=r(Gpt,"squeezebert"),Gpt.forEach(t),XVo=r(S$e," \u2014 "),RV=n(S$e,"A",{href:!0});var Opt=s(RV);zVo=r(Opt,"SqueezeBertForTokenClassification"),Opt.forEach(t),WVo=r(S$e," (SqueezeBERT model)"),S$e.forEach(t),QVo=i(J),dv=n(J,"LI",{});var R$e=s(dv);Ohe=n(R$e,"STRONG",{});var Vpt=s(Ohe);HVo=r(Vpt,"xlm"),Vpt.forEach(t),UVo=r(R$e," \u2014 "),PV=n(R$e,"A",{href:!0});var Xpt=s(PV);JVo=r(Xpt,"XLMForTokenClassification"),Xpt.forEach(t),YVo=r(R$e," (XLM model)"),R$e.forEach(t),KVo=i(J),cv=n(J,"LI",{});var P$e=s(cv);Vhe=n(P$e,"STRONG",{});var zpt=s(Vhe);ZVo=r(zpt,"xlm-roberta"),zpt.forEach(t),eXo=r(P$e," \u2014 "),BV=n(P$e,"A",{href:!0});var Wpt=s(BV);oXo=r(Wpt,"XLMRobertaForTokenClassification"),Wpt.forEach(t),rXo=r(P$e," (XLM-RoBERTa model)"),P$e.forEach(t),tXo=i(J),fv=n(J,"LI",{});var B$e=s(fv);Xhe=n(B$e,"STRONG",{});var Qpt=s(Xhe);aXo=r(Qpt,"xlm-roberta-xl"),Qpt.forEach(t),nXo=r(B$e," \u2014 "),IV=n(B$e,"A",{href:!0});var Hpt=s(IV);sXo=r(Hpt,"XLMRobertaXLForTokenClassification"),Hpt.forEach(t),lXo=r(B$e," (XLM-RoBERTa-XL model)"),B$e.forEach(t),iXo=i(J),mv=n(J,"LI",{});var I$e=s(mv);zhe=n(I$e,"STRONG",{});var Upt=s(zhe);dXo=r(Upt,"xlnet"),Upt.forEach(t),cXo=r(I$e," \u2014 "),NV=n(I$e,"A",{href:!0});var Jpt=s(NV);fXo=r(Jpt,"XLNetForTokenClassification"),Jpt.forEach(t),mXo=r(I$e," (XLNet model)"),I$e.forEach(t),gXo=i(J),gv=n(J,"LI",{});var N$e=s(gv);Whe=n(N$e,"STRONG",{});var Ypt=s(Whe);hXo=r(Ypt,"yoso"),Ypt.forEach(t),pXo=r(N$e," \u2014 "),qV=n(N$e,"A",{href:!0});var Kpt=s(qV);_Xo=r(Kpt,"YosoForTokenClassification"),Kpt.forEach(t),uXo=r(N$e," (YOSO model)"),N$e.forEach(t),J.forEach(t),bXo=i(da),hv=n(da,"P",{});var q$e=s(hv);vXo=r(q$e,"The model is set in evaluation mode by default using "),Qhe=n(q$e,"CODE",{});var Zpt=s(Qhe);FXo=r(Zpt,"model.eval()"),Zpt.forEach(t),TXo=r(q$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hhe=n(q$e,"CODE",{});var e_t=s(Hhe);MXo=r(e_t,"model.train()"),e_t.forEach(t),q$e.forEach(t),EXo=i(da),T(pv.$$.fragment,da),da.forEach(t),Ys.forEach(t),eje=i(f),Zi=n(f,"H2",{class:!0});var aGe=s(Zi);_v=n(aGe,"A",{id:!0,class:!0,href:!0});var o_t=s(_v);Uhe=n(o_t,"SPAN",{});var r_t=s(Uhe);T(Jy.$$.fragment,r_t),r_t.forEach(t),o_t.forEach(t),CXo=i(aGe),Jhe=n(aGe,"SPAN",{});var t_t=s(Jhe);wXo=r(t_t,"AutoModelForQuestionAnswering"),t_t.forEach(t),aGe.forEach(t),oje=i(f),No=n(f,"DIV",{class:!0});var Ks=s(No);T(Yy.$$.fragment,Ks),AXo=i(Ks),ed=n(Ks,"P",{});var QZ=s(ed);yXo=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),jV=n(QZ,"A",{href:!0});var a_t=s(jV);LXo=r(a_t,"from_pretrained()"),a_t.forEach(t),xXo=r(QZ," class method or the "),DV=n(QZ,"A",{href:!0});var n_t=s(DV);$Xo=r(n_t,"from_config()"),n_t.forEach(t),kXo=r(QZ,` class
method.`),QZ.forEach(t),SXo=i(Ks),Ky=n(Ks,"P",{});var nGe=s(Ky);RXo=r(nGe,"This class cannot be instantiated directly using "),Yhe=n(nGe,"CODE",{});var s_t=s(Yhe);PXo=r(s_t,"__init__()"),s_t.forEach(t),BXo=r(nGe," (throws an error)."),nGe.forEach(t),IXo=i(Ks),mt=n(Ks,"DIV",{class:!0});var o0=s(mt);T(Zy.$$.fragment,o0),NXo=i(o0),Khe=n(o0,"P",{});var l_t=s(Khe);qXo=r(l_t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),l_t.forEach(t),jXo=i(o0),od=n(o0,"P",{});var HZ=s(od);DXo=r(HZ,`Note:
Loading a model from its configuration file does `),Zhe=n(HZ,"STRONG",{});var i_t=s(Zhe);GXo=r(i_t,"not"),i_t.forEach(t),OXo=r(HZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GV=n(HZ,"A",{href:!0});var d_t=s(GV);VXo=r(d_t,"from_pretrained()"),d_t.forEach(t),XXo=r(HZ," to load the model weights."),HZ.forEach(t),zXo=i(o0),T(uv.$$.fragment,o0),o0.forEach(t),WXo=i(Ks),no=n(Ks,"DIV",{class:!0});var ca=s(no);T(eL.$$.fragment,ca),QXo=i(ca),epe=n(ca,"P",{});var c_t=s(epe);HXo=r(c_t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),c_t.forEach(t),UXo=i(ca),Na=n(ca,"P",{});var r0=s(Na);JXo=r(r0,"The model class to instantiate is selected based on the "),ope=n(r0,"CODE",{});var f_t=s(ope);YXo=r(f_t,"model_type"),f_t.forEach(t),KXo=r(r0,` property of the config object (either
passed as an argument or loaded from `),rpe=n(r0,"CODE",{});var m_t=s(rpe);ZXo=r(m_t,"pretrained_model_name_or_path"),m_t.forEach(t),ezo=r(r0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tpe=n(r0,"CODE",{});var g_t=s(tpe);ozo=r(g_t,"pretrained_model_name_or_path"),g_t.forEach(t),rzo=r(r0,":"),r0.forEach(t),tzo=i(ca),V=n(ca,"UL",{});var X=s(V);bv=n(X,"LI",{});var j$e=s(bv);ape=n(j$e,"STRONG",{});var h_t=s(ape);azo=r(h_t,"albert"),h_t.forEach(t),nzo=r(j$e," \u2014 "),OV=n(j$e,"A",{href:!0});var p_t=s(OV);szo=r(p_t,"AlbertForQuestionAnswering"),p_t.forEach(t),lzo=r(j$e," (ALBERT model)"),j$e.forEach(t),izo=i(X),vv=n(X,"LI",{});var D$e=s(vv);npe=n(D$e,"STRONG",{});var __t=s(npe);dzo=r(__t,"bart"),__t.forEach(t),czo=r(D$e," \u2014 "),VV=n(D$e,"A",{href:!0});var u_t=s(VV);fzo=r(u_t,"BartForQuestionAnswering"),u_t.forEach(t),mzo=r(D$e," (BART model)"),D$e.forEach(t),gzo=i(X),Fv=n(X,"LI",{});var G$e=s(Fv);spe=n(G$e,"STRONG",{});var b_t=s(spe);hzo=r(b_t,"bert"),b_t.forEach(t),pzo=r(G$e," \u2014 "),XV=n(G$e,"A",{href:!0});var v_t=s(XV);_zo=r(v_t,"BertForQuestionAnswering"),v_t.forEach(t),uzo=r(G$e," (BERT model)"),G$e.forEach(t),bzo=i(X),Tv=n(X,"LI",{});var O$e=s(Tv);lpe=n(O$e,"STRONG",{});var F_t=s(lpe);vzo=r(F_t,"big_bird"),F_t.forEach(t),Fzo=r(O$e," \u2014 "),zV=n(O$e,"A",{href:!0});var T_t=s(zV);Tzo=r(T_t,"BigBirdForQuestionAnswering"),T_t.forEach(t),Mzo=r(O$e," (BigBird model)"),O$e.forEach(t),Ezo=i(X),Mv=n(X,"LI",{});var V$e=s(Mv);ipe=n(V$e,"STRONG",{});var M_t=s(ipe);Czo=r(M_t,"bigbird_pegasus"),M_t.forEach(t),wzo=r(V$e," \u2014 "),WV=n(V$e,"A",{href:!0});var E_t=s(WV);Azo=r(E_t,"BigBirdPegasusForQuestionAnswering"),E_t.forEach(t),yzo=r(V$e," (BigBirdPegasus model)"),V$e.forEach(t),Lzo=i(X),Ev=n(X,"LI",{});var X$e=s(Ev);dpe=n(X$e,"STRONG",{});var C_t=s(dpe);xzo=r(C_t,"camembert"),C_t.forEach(t),$zo=r(X$e," \u2014 "),QV=n(X$e,"A",{href:!0});var w_t=s(QV);kzo=r(w_t,"CamembertForQuestionAnswering"),w_t.forEach(t),Szo=r(X$e," (CamemBERT model)"),X$e.forEach(t),Rzo=i(X),Cv=n(X,"LI",{});var z$e=s(Cv);cpe=n(z$e,"STRONG",{});var A_t=s(cpe);Pzo=r(A_t,"canine"),A_t.forEach(t),Bzo=r(z$e," \u2014 "),HV=n(z$e,"A",{href:!0});var y_t=s(HV);Izo=r(y_t,"CanineForQuestionAnswering"),y_t.forEach(t),Nzo=r(z$e," (Canine model)"),z$e.forEach(t),qzo=i(X),wv=n(X,"LI",{});var W$e=s(wv);fpe=n(W$e,"STRONG",{});var L_t=s(fpe);jzo=r(L_t,"convbert"),L_t.forEach(t),Dzo=r(W$e," \u2014 "),UV=n(W$e,"A",{href:!0});var x_t=s(UV);Gzo=r(x_t,"ConvBertForQuestionAnswering"),x_t.forEach(t),Ozo=r(W$e," (ConvBERT model)"),W$e.forEach(t),Vzo=i(X),Av=n(X,"LI",{});var Q$e=s(Av);mpe=n(Q$e,"STRONG",{});var $_t=s(mpe);Xzo=r($_t,"data2vec-text"),$_t.forEach(t),zzo=r(Q$e," \u2014 "),JV=n(Q$e,"A",{href:!0});var k_t=s(JV);Wzo=r(k_t,"Data2VecTextForQuestionAnswering"),k_t.forEach(t),Qzo=r(Q$e," (Data2VecText model)"),Q$e.forEach(t),Hzo=i(X),yv=n(X,"LI",{});var H$e=s(yv);gpe=n(H$e,"STRONG",{});var S_t=s(gpe);Uzo=r(S_t,"deberta"),S_t.forEach(t),Jzo=r(H$e," \u2014 "),YV=n(H$e,"A",{href:!0});var R_t=s(YV);Yzo=r(R_t,"DebertaForQuestionAnswering"),R_t.forEach(t),Kzo=r(H$e," (DeBERTa model)"),H$e.forEach(t),Zzo=i(X),Lv=n(X,"LI",{});var U$e=s(Lv);hpe=n(U$e,"STRONG",{});var P_t=s(hpe);eWo=r(P_t,"deberta-v2"),P_t.forEach(t),oWo=r(U$e," \u2014 "),KV=n(U$e,"A",{href:!0});var B_t=s(KV);rWo=r(B_t,"DebertaV2ForQuestionAnswering"),B_t.forEach(t),tWo=r(U$e," (DeBERTa-v2 model)"),U$e.forEach(t),aWo=i(X),xv=n(X,"LI",{});var J$e=s(xv);ppe=n(J$e,"STRONG",{});var I_t=s(ppe);nWo=r(I_t,"distilbert"),I_t.forEach(t),sWo=r(J$e," \u2014 "),ZV=n(J$e,"A",{href:!0});var N_t=s(ZV);lWo=r(N_t,"DistilBertForQuestionAnswering"),N_t.forEach(t),iWo=r(J$e," (DistilBERT model)"),J$e.forEach(t),dWo=i(X),$v=n(X,"LI",{});var Y$e=s($v);_pe=n(Y$e,"STRONG",{});var q_t=s(_pe);cWo=r(q_t,"electra"),q_t.forEach(t),fWo=r(Y$e," \u2014 "),eX=n(Y$e,"A",{href:!0});var j_t=s(eX);mWo=r(j_t,"ElectraForQuestionAnswering"),j_t.forEach(t),gWo=r(Y$e," (ELECTRA model)"),Y$e.forEach(t),hWo=i(X),kv=n(X,"LI",{});var K$e=s(kv);upe=n(K$e,"STRONG",{});var D_t=s(upe);pWo=r(D_t,"flaubert"),D_t.forEach(t),_Wo=r(K$e," \u2014 "),oX=n(K$e,"A",{href:!0});var G_t=s(oX);uWo=r(G_t,"FlaubertForQuestionAnsweringSimple"),G_t.forEach(t),bWo=r(K$e," (FlauBERT model)"),K$e.forEach(t),vWo=i(X),Sv=n(X,"LI",{});var Z$e=s(Sv);bpe=n(Z$e,"STRONG",{});var O_t=s(bpe);FWo=r(O_t,"fnet"),O_t.forEach(t),TWo=r(Z$e," \u2014 "),rX=n(Z$e,"A",{href:!0});var V_t=s(rX);MWo=r(V_t,"FNetForQuestionAnswering"),V_t.forEach(t),EWo=r(Z$e," (FNet model)"),Z$e.forEach(t),CWo=i(X),Rv=n(X,"LI",{});var eke=s(Rv);vpe=n(eke,"STRONG",{});var X_t=s(vpe);wWo=r(X_t,"funnel"),X_t.forEach(t),AWo=r(eke," \u2014 "),tX=n(eke,"A",{href:!0});var z_t=s(tX);yWo=r(z_t,"FunnelForQuestionAnswering"),z_t.forEach(t),LWo=r(eke," (Funnel Transformer model)"),eke.forEach(t),xWo=i(X),Pv=n(X,"LI",{});var oke=s(Pv);Fpe=n(oke,"STRONG",{});var W_t=s(Fpe);$Wo=r(W_t,"gptj"),W_t.forEach(t),kWo=r(oke," \u2014 "),aX=n(oke,"A",{href:!0});var Q_t=s(aX);SWo=r(Q_t,"GPTJForQuestionAnswering"),Q_t.forEach(t),RWo=r(oke," (GPT-J model)"),oke.forEach(t),PWo=i(X),Bv=n(X,"LI",{});var rke=s(Bv);Tpe=n(rke,"STRONG",{});var H_t=s(Tpe);BWo=r(H_t,"ibert"),H_t.forEach(t),IWo=r(rke," \u2014 "),nX=n(rke,"A",{href:!0});var U_t=s(nX);NWo=r(U_t,"IBertForQuestionAnswering"),U_t.forEach(t),qWo=r(rke," (I-BERT model)"),rke.forEach(t),jWo=i(X),Iv=n(X,"LI",{});var tke=s(Iv);Mpe=n(tke,"STRONG",{});var J_t=s(Mpe);DWo=r(J_t,"layoutlmv2"),J_t.forEach(t),GWo=r(tke," \u2014 "),sX=n(tke,"A",{href:!0});var Y_t=s(sX);OWo=r(Y_t,"LayoutLMv2ForQuestionAnswering"),Y_t.forEach(t),VWo=r(tke," (LayoutLMv2 model)"),tke.forEach(t),XWo=i(X),Nv=n(X,"LI",{});var ake=s(Nv);Epe=n(ake,"STRONG",{});var K_t=s(Epe);zWo=r(K_t,"layoutlmv3"),K_t.forEach(t),WWo=r(ake," \u2014 "),lX=n(ake,"A",{href:!0});var Z_t=s(lX);QWo=r(Z_t,"LayoutLMv3ForQuestionAnswering"),Z_t.forEach(t),HWo=r(ake," (LayoutLMv3 model)"),ake.forEach(t),UWo=i(X),qv=n(X,"LI",{});var nke=s(qv);Cpe=n(nke,"STRONG",{});var eut=s(Cpe);JWo=r(eut,"led"),eut.forEach(t),YWo=r(nke," \u2014 "),iX=n(nke,"A",{href:!0});var out=s(iX);KWo=r(out,"LEDForQuestionAnswering"),out.forEach(t),ZWo=r(nke," (LED model)"),nke.forEach(t),eQo=i(X),jv=n(X,"LI",{});var ske=s(jv);wpe=n(ske,"STRONG",{});var rut=s(wpe);oQo=r(rut,"longformer"),rut.forEach(t),rQo=r(ske," \u2014 "),dX=n(ske,"A",{href:!0});var tut=s(dX);tQo=r(tut,"LongformerForQuestionAnswering"),tut.forEach(t),aQo=r(ske," (Longformer model)"),ske.forEach(t),nQo=i(X),Dv=n(X,"LI",{});var lke=s(Dv);Ape=n(lke,"STRONG",{});var aut=s(Ape);sQo=r(aut,"lxmert"),aut.forEach(t),lQo=r(lke," \u2014 "),cX=n(lke,"A",{href:!0});var nut=s(cX);iQo=r(nut,"LxmertForQuestionAnswering"),nut.forEach(t),dQo=r(lke," (LXMERT model)"),lke.forEach(t),cQo=i(X),Gv=n(X,"LI",{});var ike=s(Gv);ype=n(ike,"STRONG",{});var sut=s(ype);fQo=r(sut,"mbart"),sut.forEach(t),mQo=r(ike," \u2014 "),fX=n(ike,"A",{href:!0});var lut=s(fX);gQo=r(lut,"MBartForQuestionAnswering"),lut.forEach(t),hQo=r(ike," (mBART model)"),ike.forEach(t),pQo=i(X),Ov=n(X,"LI",{});var dke=s(Ov);Lpe=n(dke,"STRONG",{});var iut=s(Lpe);_Qo=r(iut,"megatron-bert"),iut.forEach(t),uQo=r(dke," \u2014 "),mX=n(dke,"A",{href:!0});var dut=s(mX);bQo=r(dut,"MegatronBertForQuestionAnswering"),dut.forEach(t),vQo=r(dke," (MegatronBert model)"),dke.forEach(t),FQo=i(X),Vv=n(X,"LI",{});var cke=s(Vv);xpe=n(cke,"STRONG",{});var cut=s(xpe);TQo=r(cut,"mobilebert"),cut.forEach(t),MQo=r(cke," \u2014 "),gX=n(cke,"A",{href:!0});var fut=s(gX);EQo=r(fut,"MobileBertForQuestionAnswering"),fut.forEach(t),CQo=r(cke," (MobileBERT model)"),cke.forEach(t),wQo=i(X),Xv=n(X,"LI",{});var fke=s(Xv);$pe=n(fke,"STRONG",{});var mut=s($pe);AQo=r(mut,"mpnet"),mut.forEach(t),yQo=r(fke," \u2014 "),hX=n(fke,"A",{href:!0});var gut=s(hX);LQo=r(gut,"MPNetForQuestionAnswering"),gut.forEach(t),xQo=r(fke," (MPNet model)"),fke.forEach(t),$Qo=i(X),zv=n(X,"LI",{});var mke=s(zv);kpe=n(mke,"STRONG",{});var hut=s(kpe);kQo=r(hut,"nystromformer"),hut.forEach(t),SQo=r(mke," \u2014 "),pX=n(mke,"A",{href:!0});var put=s(pX);RQo=r(put,"NystromformerForQuestionAnswering"),put.forEach(t),PQo=r(mke," (Nystromformer model)"),mke.forEach(t),BQo=i(X),Wv=n(X,"LI",{});var gke=s(Wv);Spe=n(gke,"STRONG",{});var _ut=s(Spe);IQo=r(_ut,"qdqbert"),_ut.forEach(t),NQo=r(gke," \u2014 "),_X=n(gke,"A",{href:!0});var uut=s(_X);qQo=r(uut,"QDQBertForQuestionAnswering"),uut.forEach(t),jQo=r(gke," (QDQBert model)"),gke.forEach(t),DQo=i(X),Qv=n(X,"LI",{});var hke=s(Qv);Rpe=n(hke,"STRONG",{});var but=s(Rpe);GQo=r(but,"reformer"),but.forEach(t),OQo=r(hke," \u2014 "),uX=n(hke,"A",{href:!0});var vut=s(uX);VQo=r(vut,"ReformerForQuestionAnswering"),vut.forEach(t),XQo=r(hke," (Reformer model)"),hke.forEach(t),zQo=i(X),Hv=n(X,"LI",{});var pke=s(Hv);Ppe=n(pke,"STRONG",{});var Fut=s(Ppe);WQo=r(Fut,"rembert"),Fut.forEach(t),QQo=r(pke," \u2014 "),bX=n(pke,"A",{href:!0});var Tut=s(bX);HQo=r(Tut,"RemBertForQuestionAnswering"),Tut.forEach(t),UQo=r(pke," (RemBERT model)"),pke.forEach(t),JQo=i(X),Uv=n(X,"LI",{});var _ke=s(Uv);Bpe=n(_ke,"STRONG",{});var Mut=s(Bpe);YQo=r(Mut,"roberta"),Mut.forEach(t),KQo=r(_ke," \u2014 "),vX=n(_ke,"A",{href:!0});var Eut=s(vX);ZQo=r(Eut,"RobertaForQuestionAnswering"),Eut.forEach(t),eHo=r(_ke," (RoBERTa model)"),_ke.forEach(t),oHo=i(X),Jv=n(X,"LI",{});var uke=s(Jv);Ipe=n(uke,"STRONG",{});var Cut=s(Ipe);rHo=r(Cut,"roformer"),Cut.forEach(t),tHo=r(uke," \u2014 "),FX=n(uke,"A",{href:!0});var wut=s(FX);aHo=r(wut,"RoFormerForQuestionAnswering"),wut.forEach(t),nHo=r(uke," (RoFormer model)"),uke.forEach(t),sHo=i(X),Yv=n(X,"LI",{});var bke=s(Yv);Npe=n(bke,"STRONG",{});var Aut=s(Npe);lHo=r(Aut,"splinter"),Aut.forEach(t),iHo=r(bke," \u2014 "),TX=n(bke,"A",{href:!0});var yut=s(TX);dHo=r(yut,"SplinterForQuestionAnswering"),yut.forEach(t),cHo=r(bke," (Splinter model)"),bke.forEach(t),fHo=i(X),Kv=n(X,"LI",{});var vke=s(Kv);qpe=n(vke,"STRONG",{});var Lut=s(qpe);mHo=r(Lut,"squeezebert"),Lut.forEach(t),gHo=r(vke," \u2014 "),MX=n(vke,"A",{href:!0});var xut=s(MX);hHo=r(xut,"SqueezeBertForQuestionAnswering"),xut.forEach(t),pHo=r(vke," (SqueezeBERT model)"),vke.forEach(t),_Ho=i(X),Zv=n(X,"LI",{});var Fke=s(Zv);jpe=n(Fke,"STRONG",{});var $ut=s(jpe);uHo=r($ut,"xlm"),$ut.forEach(t),bHo=r(Fke," \u2014 "),EX=n(Fke,"A",{href:!0});var kut=s(EX);vHo=r(kut,"XLMForQuestionAnsweringSimple"),kut.forEach(t),FHo=r(Fke," (XLM model)"),Fke.forEach(t),THo=i(X),eF=n(X,"LI",{});var Tke=s(eF);Dpe=n(Tke,"STRONG",{});var Sut=s(Dpe);MHo=r(Sut,"xlm-roberta"),Sut.forEach(t),EHo=r(Tke," \u2014 "),CX=n(Tke,"A",{href:!0});var Rut=s(CX);CHo=r(Rut,"XLMRobertaForQuestionAnswering"),Rut.forEach(t),wHo=r(Tke," (XLM-RoBERTa model)"),Tke.forEach(t),AHo=i(X),oF=n(X,"LI",{});var Mke=s(oF);Gpe=n(Mke,"STRONG",{});var Put=s(Gpe);yHo=r(Put,"xlm-roberta-xl"),Put.forEach(t),LHo=r(Mke," \u2014 "),wX=n(Mke,"A",{href:!0});var But=s(wX);xHo=r(But,"XLMRobertaXLForQuestionAnswering"),But.forEach(t),$Ho=r(Mke," (XLM-RoBERTa-XL model)"),Mke.forEach(t),kHo=i(X),rF=n(X,"LI",{});var Eke=s(rF);Ope=n(Eke,"STRONG",{});var Iut=s(Ope);SHo=r(Iut,"xlnet"),Iut.forEach(t),RHo=r(Eke," \u2014 "),AX=n(Eke,"A",{href:!0});var Nut=s(AX);PHo=r(Nut,"XLNetForQuestionAnsweringSimple"),Nut.forEach(t),BHo=r(Eke," (XLNet model)"),Eke.forEach(t),IHo=i(X),tF=n(X,"LI",{});var Cke=s(tF);Vpe=n(Cke,"STRONG",{});var qut=s(Vpe);NHo=r(qut,"yoso"),qut.forEach(t),qHo=r(Cke," \u2014 "),yX=n(Cke,"A",{href:!0});var jut=s(yX);jHo=r(jut,"YosoForQuestionAnswering"),jut.forEach(t),DHo=r(Cke," (YOSO model)"),Cke.forEach(t),X.forEach(t),GHo=i(ca),aF=n(ca,"P",{});var wke=s(aF);OHo=r(wke,"The model is set in evaluation mode by default using "),Xpe=n(wke,"CODE",{});var Dut=s(Xpe);VHo=r(Dut,"model.eval()"),Dut.forEach(t),XHo=r(wke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zpe=n(wke,"CODE",{});var Gut=s(zpe);zHo=r(Gut,"model.train()"),Gut.forEach(t),wke.forEach(t),WHo=i(ca),T(nF.$$.fragment,ca),ca.forEach(t),Ks.forEach(t),rje=i(f),rd=n(f,"H2",{class:!0});var sGe=s(rd);sF=n(sGe,"A",{id:!0,class:!0,href:!0});var Out=s(sF);Wpe=n(Out,"SPAN",{});var Vut=s(Wpe);T(oL.$$.fragment,Vut),Vut.forEach(t),Out.forEach(t),QHo=i(sGe),Qpe=n(sGe,"SPAN",{});var Xut=s(Qpe);HHo=r(Xut,"AutoModelForTableQuestionAnswering"),Xut.forEach(t),sGe.forEach(t),tje=i(f),qo=n(f,"DIV",{class:!0});var Zs=s(qo);T(rL.$$.fragment,Zs),UHo=i(Zs),td=n(Zs,"P",{});var UZ=s(td);JHo=r(UZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),LX=n(UZ,"A",{href:!0});var zut=s(LX);YHo=r(zut,"from_pretrained()"),zut.forEach(t),KHo=r(UZ," class method or the "),xX=n(UZ,"A",{href:!0});var Wut=s(xX);ZHo=r(Wut,"from_config()"),Wut.forEach(t),eUo=r(UZ,` class
method.`),UZ.forEach(t),oUo=i(Zs),tL=n(Zs,"P",{});var lGe=s(tL);rUo=r(lGe,"This class cannot be instantiated directly using "),Hpe=n(lGe,"CODE",{});var Qut=s(Hpe);tUo=r(Qut,"__init__()"),Qut.forEach(t),aUo=r(lGe," (throws an error)."),lGe.forEach(t),nUo=i(Zs),gt=n(Zs,"DIV",{class:!0});var t0=s(gt);T(aL.$$.fragment,t0),sUo=i(t0),Upe=n(t0,"P",{});var Hut=s(Upe);lUo=r(Hut,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Hut.forEach(t),iUo=i(t0),ad=n(t0,"P",{});var JZ=s(ad);dUo=r(JZ,`Note:
Loading a model from its configuration file does `),Jpe=n(JZ,"STRONG",{});var Uut=s(Jpe);cUo=r(Uut,"not"),Uut.forEach(t),fUo=r(JZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=n(JZ,"A",{href:!0});var Jut=s($X);mUo=r(Jut,"from_pretrained()"),Jut.forEach(t),gUo=r(JZ," to load the model weights."),JZ.forEach(t),hUo=i(t0),T(lF.$$.fragment,t0),t0.forEach(t),pUo=i(Zs),so=n(Zs,"DIV",{class:!0});var fa=s(so);T(nL.$$.fragment,fa),_Uo=i(fa),Ype=n(fa,"P",{});var Yut=s(Ype);uUo=r(Yut,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Yut.forEach(t),bUo=i(fa),qa=n(fa,"P",{});var a0=s(qa);vUo=r(a0,"The model class to instantiate is selected based on the "),Kpe=n(a0,"CODE",{});var Kut=s(Kpe);FUo=r(Kut,"model_type"),Kut.forEach(t),TUo=r(a0,` property of the config object (either
passed as an argument or loaded from `),Zpe=n(a0,"CODE",{});var Zut=s(Zpe);MUo=r(Zut,"pretrained_model_name_or_path"),Zut.forEach(t),EUo=r(a0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e_e=n(a0,"CODE",{});var e1t=s(e_e);CUo=r(e1t,"pretrained_model_name_or_path"),e1t.forEach(t),wUo=r(a0,":"),a0.forEach(t),AUo=i(fa),o_e=n(fa,"UL",{});var o1t=s(o_e);iF=n(o1t,"LI",{});var Ake=s(iF);r_e=n(Ake,"STRONG",{});var r1t=s(r_e);yUo=r(r1t,"tapas"),r1t.forEach(t),LUo=r(Ake," \u2014 "),kX=n(Ake,"A",{href:!0});var t1t=s(kX);xUo=r(t1t,"TapasForQuestionAnswering"),t1t.forEach(t),$Uo=r(Ake," (TAPAS model)"),Ake.forEach(t),o1t.forEach(t),kUo=i(fa),dF=n(fa,"P",{});var yke=s(dF);SUo=r(yke,"The model is set in evaluation mode by default using "),t_e=n(yke,"CODE",{});var a1t=s(t_e);RUo=r(a1t,"model.eval()"),a1t.forEach(t),PUo=r(yke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a_e=n(yke,"CODE",{});var n1t=s(a_e);BUo=r(n1t,"model.train()"),n1t.forEach(t),yke.forEach(t),IUo=i(fa),T(cF.$$.fragment,fa),fa.forEach(t),Zs.forEach(t),aje=i(f),nd=n(f,"H2",{class:!0});var iGe=s(nd);fF=n(iGe,"A",{id:!0,class:!0,href:!0});var s1t=s(fF);n_e=n(s1t,"SPAN",{});var l1t=s(n_e);T(sL.$$.fragment,l1t),l1t.forEach(t),s1t.forEach(t),NUo=i(iGe),s_e=n(iGe,"SPAN",{});var i1t=s(s_e);qUo=r(i1t,"AutoModelForImageClassification"),i1t.forEach(t),iGe.forEach(t),nje=i(f),jo=n(f,"DIV",{class:!0});var el=s(jo);T(lL.$$.fragment,el),jUo=i(el),sd=n(el,"P",{});var YZ=s(sd);DUo=r(YZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),SX=n(YZ,"A",{href:!0});var d1t=s(SX);GUo=r(d1t,"from_pretrained()"),d1t.forEach(t),OUo=r(YZ," class method or the "),RX=n(YZ,"A",{href:!0});var c1t=s(RX);VUo=r(c1t,"from_config()"),c1t.forEach(t),XUo=r(YZ,` class
method.`),YZ.forEach(t),zUo=i(el),iL=n(el,"P",{});var dGe=s(iL);WUo=r(dGe,"This class cannot be instantiated directly using "),l_e=n(dGe,"CODE",{});var f1t=s(l_e);QUo=r(f1t,"__init__()"),f1t.forEach(t),HUo=r(dGe," (throws an error)."),dGe.forEach(t),UUo=i(el),ht=n(el,"DIV",{class:!0});var n0=s(ht);T(dL.$$.fragment,n0),JUo=i(n0),i_e=n(n0,"P",{});var m1t=s(i_e);YUo=r(m1t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),m1t.forEach(t),KUo=i(n0),ld=n(n0,"P",{});var KZ=s(ld);ZUo=r(KZ,`Note:
Loading a model from its configuration file does `),d_e=n(KZ,"STRONG",{});var g1t=s(d_e);eJo=r(g1t,"not"),g1t.forEach(t),oJo=r(KZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=n(KZ,"A",{href:!0});var h1t=s(PX);rJo=r(h1t,"from_pretrained()"),h1t.forEach(t),tJo=r(KZ," to load the model weights."),KZ.forEach(t),aJo=i(n0),T(mF.$$.fragment,n0),n0.forEach(t),nJo=i(el),lo=n(el,"DIV",{class:!0});var ma=s(lo);T(cL.$$.fragment,ma),sJo=i(ma),c_e=n(ma,"P",{});var p1t=s(c_e);lJo=r(p1t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),p1t.forEach(t),iJo=i(ma),ja=n(ma,"P",{});var s0=s(ja);dJo=r(s0,"The model class to instantiate is selected based on the "),f_e=n(s0,"CODE",{});var _1t=s(f_e);cJo=r(_1t,"model_type"),_1t.forEach(t),fJo=r(s0,` property of the config object (either
passed as an argument or loaded from `),m_e=n(s0,"CODE",{});var u1t=s(m_e);mJo=r(u1t,"pretrained_model_name_or_path"),u1t.forEach(t),gJo=r(s0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g_e=n(s0,"CODE",{});var b1t=s(g_e);hJo=r(b1t,"pretrained_model_name_or_path"),b1t.forEach(t),pJo=r(s0,":"),s0.forEach(t),_Jo=i(ma),Fe=n(ma,"UL",{});var Te=s(Fe);gF=n(Te,"LI",{});var Lke=s(gF);h_e=n(Lke,"STRONG",{});var v1t=s(h_e);uJo=r(v1t,"beit"),v1t.forEach(t),bJo=r(Lke," \u2014 "),BX=n(Lke,"A",{href:!0});var F1t=s(BX);vJo=r(F1t,"BeitForImageClassification"),F1t.forEach(t),FJo=r(Lke," (BEiT model)"),Lke.forEach(t),TJo=i(Te),hF=n(Te,"LI",{});var xke=s(hF);p_e=n(xke,"STRONG",{});var T1t=s(p_e);MJo=r(T1t,"convnext"),T1t.forEach(t),EJo=r(xke," \u2014 "),IX=n(xke,"A",{href:!0});var M1t=s(IX);CJo=r(M1t,"ConvNextForImageClassification"),M1t.forEach(t),wJo=r(xke," (ConvNext model)"),xke.forEach(t),AJo=i(Te),pF=n(Te,"LI",{});var $ke=s(pF);__e=n($ke,"STRONG",{});var E1t=s(__e);yJo=r(E1t,"cvt"),E1t.forEach(t),LJo=r($ke," \u2014 "),NX=n($ke,"A",{href:!0});var C1t=s(NX);xJo=r(C1t,"CvtForImageClassification"),C1t.forEach(t),$Jo=r($ke," (CvT model)"),$ke.forEach(t),kJo=i(Te),_F=n(Te,"LI",{});var kke=s(_F);u_e=n(kke,"STRONG",{});var w1t=s(u_e);SJo=r(w1t,"data2vec-vision"),w1t.forEach(t),RJo=r(kke," \u2014 "),qX=n(kke,"A",{href:!0});var A1t=s(qX);PJo=r(A1t,"Data2VecVisionForImageClassification"),A1t.forEach(t),BJo=r(kke," (Data2VecVision model)"),kke.forEach(t),IJo=i(Te),Is=n(Te,"LI",{});var J$=s(Is);b_e=n(J$,"STRONG",{});var y1t=s(b_e);NJo=r(y1t,"deit"),y1t.forEach(t),qJo=r(J$," \u2014 "),jX=n(J$,"A",{href:!0});var L1t=s(jX);jJo=r(L1t,"DeiTForImageClassification"),L1t.forEach(t),DJo=r(J$," or "),DX=n(J$,"A",{href:!0});var x1t=s(DX);GJo=r(x1t,"DeiTForImageClassificationWithTeacher"),x1t.forEach(t),OJo=r(J$," (DeiT model)"),J$.forEach(t),VJo=i(Te),uF=n(Te,"LI",{});var Ske=s(uF);v_e=n(Ske,"STRONG",{});var $1t=s(v_e);XJo=r($1t,"imagegpt"),$1t.forEach(t),zJo=r(Ske," \u2014 "),GX=n(Ske,"A",{href:!0});var k1t=s(GX);WJo=r(k1t,"ImageGPTForImageClassification"),k1t.forEach(t),QJo=r(Ske," (ImageGPT model)"),Ske.forEach(t),HJo=i(Te),pt=n(Te,"LI",{});var pf=s(pt);F_e=n(pf,"STRONG",{});var S1t=s(F_e);UJo=r(S1t,"perceiver"),S1t.forEach(t),JJo=r(pf," \u2014 "),OX=n(pf,"A",{href:!0});var R1t=s(OX);YJo=r(R1t,"PerceiverForImageClassificationLearned"),R1t.forEach(t),KJo=r(pf," or "),VX=n(pf,"A",{href:!0});var P1t=s(VX);ZJo=r(P1t,"PerceiverForImageClassificationFourier"),P1t.forEach(t),eYo=r(pf," or "),XX=n(pf,"A",{href:!0});var B1t=s(XX);oYo=r(B1t,"PerceiverForImageClassificationConvProcessing"),B1t.forEach(t),rYo=r(pf," (Perceiver model)"),pf.forEach(t),tYo=i(Te),bF=n(Te,"LI",{});var Rke=s(bF);T_e=n(Rke,"STRONG",{});var I1t=s(T_e);aYo=r(I1t,"poolformer"),I1t.forEach(t),nYo=r(Rke," \u2014 "),zX=n(Rke,"A",{href:!0});var N1t=s(zX);sYo=r(N1t,"PoolFormerForImageClassification"),N1t.forEach(t),lYo=r(Rke," (PoolFormer model)"),Rke.forEach(t),iYo=i(Te),vF=n(Te,"LI",{});var Pke=s(vF);M_e=n(Pke,"STRONG",{});var q1t=s(M_e);dYo=r(q1t,"regnet"),q1t.forEach(t),cYo=r(Pke," \u2014 "),WX=n(Pke,"A",{href:!0});var j1t=s(WX);fYo=r(j1t,"RegNetForImageClassification"),j1t.forEach(t),mYo=r(Pke," (RegNet model)"),Pke.forEach(t),gYo=i(Te),FF=n(Te,"LI",{});var Bke=s(FF);E_e=n(Bke,"STRONG",{});var D1t=s(E_e);hYo=r(D1t,"resnet"),D1t.forEach(t),pYo=r(Bke," \u2014 "),QX=n(Bke,"A",{href:!0});var G1t=s(QX);_Yo=r(G1t,"ResNetForImageClassification"),G1t.forEach(t),uYo=r(Bke," (ResNet model)"),Bke.forEach(t),bYo=i(Te),TF=n(Te,"LI",{});var Ike=s(TF);C_e=n(Ike,"STRONG",{});var O1t=s(C_e);vYo=r(O1t,"segformer"),O1t.forEach(t),FYo=r(Ike," \u2014 "),HX=n(Ike,"A",{href:!0});var V1t=s(HX);TYo=r(V1t,"SegformerForImageClassification"),V1t.forEach(t),MYo=r(Ike," (SegFormer model)"),Ike.forEach(t),EYo=i(Te),MF=n(Te,"LI",{});var Nke=s(MF);w_e=n(Nke,"STRONG",{});var X1t=s(w_e);CYo=r(X1t,"swin"),X1t.forEach(t),wYo=r(Nke," \u2014 "),UX=n(Nke,"A",{href:!0});var z1t=s(UX);AYo=r(z1t,"SwinForImageClassification"),z1t.forEach(t),yYo=r(Nke," (Swin model)"),Nke.forEach(t),LYo=i(Te),EF=n(Te,"LI",{});var qke=s(EF);A_e=n(qke,"STRONG",{});var W1t=s(A_e);xYo=r(W1t,"van"),W1t.forEach(t),$Yo=r(qke," \u2014 "),JX=n(qke,"A",{href:!0});var Q1t=s(JX);kYo=r(Q1t,"VanForImageClassification"),Q1t.forEach(t),SYo=r(qke," (VAN model)"),qke.forEach(t),RYo=i(Te),CF=n(Te,"LI",{});var jke=s(CF);y_e=n(jke,"STRONG",{});var H1t=s(y_e);PYo=r(H1t,"vit"),H1t.forEach(t),BYo=r(jke," \u2014 "),YX=n(jke,"A",{href:!0});var U1t=s(YX);IYo=r(U1t,"ViTForImageClassification"),U1t.forEach(t),NYo=r(jke," (ViT model)"),jke.forEach(t),Te.forEach(t),qYo=i(ma),wF=n(ma,"P",{});var Dke=s(wF);jYo=r(Dke,"The model is set in evaluation mode by default using "),L_e=n(Dke,"CODE",{});var J1t=s(L_e);DYo=r(J1t,"model.eval()"),J1t.forEach(t),GYo=r(Dke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x_e=n(Dke,"CODE",{});var Y1t=s(x_e);OYo=r(Y1t,"model.train()"),Y1t.forEach(t),Dke.forEach(t),VYo=i(ma),T(AF.$$.fragment,ma),ma.forEach(t),el.forEach(t),sje=i(f),id=n(f,"H2",{class:!0});var cGe=s(id);yF=n(cGe,"A",{id:!0,class:!0,href:!0});var K1t=s(yF);$_e=n(K1t,"SPAN",{});var Z1t=s($_e);T(fL.$$.fragment,Z1t),Z1t.forEach(t),K1t.forEach(t),XYo=i(cGe),k_e=n(cGe,"SPAN",{});var ebt=s(k_e);zYo=r(ebt,"AutoModelForVision2Seq"),ebt.forEach(t),cGe.forEach(t),lje=i(f),Do=n(f,"DIV",{class:!0});var ol=s(Do);T(mL.$$.fragment,ol),WYo=i(ol),dd=n(ol,"P",{});var ZZ=s(dd);QYo=r(ZZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),KX=n(ZZ,"A",{href:!0});var obt=s(KX);HYo=r(obt,"from_pretrained()"),obt.forEach(t),UYo=r(ZZ," class method or the "),ZX=n(ZZ,"A",{href:!0});var rbt=s(ZX);JYo=r(rbt,"from_config()"),rbt.forEach(t),YYo=r(ZZ,` class
method.`),ZZ.forEach(t),KYo=i(ol),gL=n(ol,"P",{});var fGe=s(gL);ZYo=r(fGe,"This class cannot be instantiated directly using "),S_e=n(fGe,"CODE",{});var tbt=s(S_e);eKo=r(tbt,"__init__()"),tbt.forEach(t),oKo=r(fGe," (throws an error)."),fGe.forEach(t),rKo=i(ol),_t=n(ol,"DIV",{class:!0});var l0=s(_t);T(hL.$$.fragment,l0),tKo=i(l0),R_e=n(l0,"P",{});var abt=s(R_e);aKo=r(abt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),abt.forEach(t),nKo=i(l0),cd=n(l0,"P",{});var eee=s(cd);sKo=r(eee,`Note:
Loading a model from its configuration file does `),P_e=n(eee,"STRONG",{});var nbt=s(P_e);lKo=r(nbt,"not"),nbt.forEach(t),iKo=r(eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),ez=n(eee,"A",{href:!0});var sbt=s(ez);dKo=r(sbt,"from_pretrained()"),sbt.forEach(t),cKo=r(eee," to load the model weights."),eee.forEach(t),fKo=i(l0),T(LF.$$.fragment,l0),l0.forEach(t),mKo=i(ol),io=n(ol,"DIV",{class:!0});var ga=s(io);T(pL.$$.fragment,ga),gKo=i(ga),B_e=n(ga,"P",{});var lbt=s(B_e);hKo=r(lbt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),lbt.forEach(t),pKo=i(ga),Da=n(ga,"P",{});var i0=s(Da);_Ko=r(i0,"The model class to instantiate is selected based on the "),I_e=n(i0,"CODE",{});var ibt=s(I_e);uKo=r(ibt,"model_type"),ibt.forEach(t),bKo=r(i0,` property of the config object (either
passed as an argument or loaded from `),N_e=n(i0,"CODE",{});var dbt=s(N_e);vKo=r(dbt,"pretrained_model_name_or_path"),dbt.forEach(t),FKo=r(i0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q_e=n(i0,"CODE",{});var cbt=s(q_e);TKo=r(cbt,"pretrained_model_name_or_path"),cbt.forEach(t),MKo=r(i0,":"),i0.forEach(t),EKo=i(ga),j_e=n(ga,"UL",{});var fbt=s(j_e);xF=n(fbt,"LI",{});var Gke=s(xF);D_e=n(Gke,"STRONG",{});var mbt=s(D_e);CKo=r(mbt,"vision-encoder-decoder"),mbt.forEach(t),wKo=r(Gke," \u2014 "),oz=n(Gke,"A",{href:!0});var gbt=s(oz);AKo=r(gbt,"VisionEncoderDecoderModel"),gbt.forEach(t),yKo=r(Gke," (Vision Encoder decoder model)"),Gke.forEach(t),fbt.forEach(t),LKo=i(ga),$F=n(ga,"P",{});var Oke=s($F);xKo=r(Oke,"The model is set in evaluation mode by default using "),G_e=n(Oke,"CODE",{});var hbt=s(G_e);$Ko=r(hbt,"model.eval()"),hbt.forEach(t),kKo=r(Oke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O_e=n(Oke,"CODE",{});var pbt=s(O_e);SKo=r(pbt,"model.train()"),pbt.forEach(t),Oke.forEach(t),RKo=i(ga),T(kF.$$.fragment,ga),ga.forEach(t),ol.forEach(t),ije=i(f),fd=n(f,"H2",{class:!0});var mGe=s(fd);SF=n(mGe,"A",{id:!0,class:!0,href:!0});var _bt=s(SF);V_e=n(_bt,"SPAN",{});var ubt=s(V_e);T(_L.$$.fragment,ubt),ubt.forEach(t),_bt.forEach(t),PKo=i(mGe),X_e=n(mGe,"SPAN",{});var bbt=s(X_e);BKo=r(bbt,"AutoModelForAudioClassification"),bbt.forEach(t),mGe.forEach(t),dje=i(f),Go=n(f,"DIV",{class:!0});var rl=s(Go);T(uL.$$.fragment,rl),IKo=i(rl),md=n(rl,"P",{});var oee=s(md);NKo=r(oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),rz=n(oee,"A",{href:!0});var vbt=s(rz);qKo=r(vbt,"from_pretrained()"),vbt.forEach(t),jKo=r(oee," class method or the "),tz=n(oee,"A",{href:!0});var Fbt=s(tz);DKo=r(Fbt,"from_config()"),Fbt.forEach(t),GKo=r(oee,` class
method.`),oee.forEach(t),OKo=i(rl),bL=n(rl,"P",{});var gGe=s(bL);VKo=r(gGe,"This class cannot be instantiated directly using "),z_e=n(gGe,"CODE",{});var Tbt=s(z_e);XKo=r(Tbt,"__init__()"),Tbt.forEach(t),zKo=r(gGe," (throws an error)."),gGe.forEach(t),WKo=i(rl),ut=n(rl,"DIV",{class:!0});var d0=s(ut);T(vL.$$.fragment,d0),QKo=i(d0),W_e=n(d0,"P",{});var Mbt=s(W_e);HKo=r(Mbt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Mbt.forEach(t),UKo=i(d0),gd=n(d0,"P",{});var ree=s(gd);JKo=r(ree,`Note:
Loading a model from its configuration file does `),Q_e=n(ree,"STRONG",{});var Ebt=s(Q_e);YKo=r(Ebt,"not"),Ebt.forEach(t),KKo=r(ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),az=n(ree,"A",{href:!0});var Cbt=s(az);ZKo=r(Cbt,"from_pretrained()"),Cbt.forEach(t),eZo=r(ree," to load the model weights."),ree.forEach(t),oZo=i(d0),T(RF.$$.fragment,d0),d0.forEach(t),rZo=i(rl),co=n(rl,"DIV",{class:!0});var ha=s(co);T(FL.$$.fragment,ha),tZo=i(ha),H_e=n(ha,"P",{});var wbt=s(H_e);aZo=r(wbt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),wbt.forEach(t),nZo=i(ha),Ga=n(ha,"P",{});var c0=s(Ga);sZo=r(c0,"The model class to instantiate is selected based on the "),U_e=n(c0,"CODE",{});var Abt=s(U_e);lZo=r(Abt,"model_type"),Abt.forEach(t),iZo=r(c0,` property of the config object (either
passed as an argument or loaded from `),J_e=n(c0,"CODE",{});var ybt=s(J_e);dZo=r(ybt,"pretrained_model_name_or_path"),ybt.forEach(t),cZo=r(c0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y_e=n(c0,"CODE",{});var Lbt=s(Y_e);fZo=r(Lbt,"pretrained_model_name_or_path"),Lbt.forEach(t),mZo=r(c0,":"),c0.forEach(t),gZo=i(ha),ke=n(ha,"UL",{});var Oe=s(ke);PF=n(Oe,"LI",{});var Vke=s(PF);K_e=n(Vke,"STRONG",{});var xbt=s(K_e);hZo=r(xbt,"data2vec-audio"),xbt.forEach(t),pZo=r(Vke," \u2014 "),nz=n(Vke,"A",{href:!0});var $bt=s(nz);_Zo=r($bt,"Data2VecAudioForSequenceClassification"),$bt.forEach(t),uZo=r(Vke," (Data2VecAudio model)"),Vke.forEach(t),bZo=i(Oe),BF=n(Oe,"LI",{});var Xke=s(BF);Z_e=n(Xke,"STRONG",{});var kbt=s(Z_e);vZo=r(kbt,"hubert"),kbt.forEach(t),FZo=r(Xke," \u2014 "),sz=n(Xke,"A",{href:!0});var Sbt=s(sz);TZo=r(Sbt,"HubertForSequenceClassification"),Sbt.forEach(t),MZo=r(Xke," (Hubert model)"),Xke.forEach(t),EZo=i(Oe),IF=n(Oe,"LI",{});var zke=s(IF);eue=n(zke,"STRONG",{});var Rbt=s(eue);CZo=r(Rbt,"sew"),Rbt.forEach(t),wZo=r(zke," \u2014 "),lz=n(zke,"A",{href:!0});var Pbt=s(lz);AZo=r(Pbt,"SEWForSequenceClassification"),Pbt.forEach(t),yZo=r(zke," (SEW model)"),zke.forEach(t),LZo=i(Oe),NF=n(Oe,"LI",{});var Wke=s(NF);oue=n(Wke,"STRONG",{});var Bbt=s(oue);xZo=r(Bbt,"sew-d"),Bbt.forEach(t),$Zo=r(Wke," \u2014 "),iz=n(Wke,"A",{href:!0});var Ibt=s(iz);kZo=r(Ibt,"SEWDForSequenceClassification"),Ibt.forEach(t),SZo=r(Wke," (SEW-D model)"),Wke.forEach(t),RZo=i(Oe),qF=n(Oe,"LI",{});var Qke=s(qF);rue=n(Qke,"STRONG",{});var Nbt=s(rue);PZo=r(Nbt,"unispeech"),Nbt.forEach(t),BZo=r(Qke," \u2014 "),dz=n(Qke,"A",{href:!0});var qbt=s(dz);IZo=r(qbt,"UniSpeechForSequenceClassification"),qbt.forEach(t),NZo=r(Qke," (UniSpeech model)"),Qke.forEach(t),qZo=i(Oe),jF=n(Oe,"LI",{});var Hke=s(jF);tue=n(Hke,"STRONG",{});var jbt=s(tue);jZo=r(jbt,"unispeech-sat"),jbt.forEach(t),DZo=r(Hke," \u2014 "),cz=n(Hke,"A",{href:!0});var Dbt=s(cz);GZo=r(Dbt,"UniSpeechSatForSequenceClassification"),Dbt.forEach(t),OZo=r(Hke," (UniSpeechSat model)"),Hke.forEach(t),VZo=i(Oe),DF=n(Oe,"LI",{});var Uke=s(DF);aue=n(Uke,"STRONG",{});var Gbt=s(aue);XZo=r(Gbt,"wav2vec2"),Gbt.forEach(t),zZo=r(Uke," \u2014 "),fz=n(Uke,"A",{href:!0});var Obt=s(fz);WZo=r(Obt,"Wav2Vec2ForSequenceClassification"),Obt.forEach(t),QZo=r(Uke," (Wav2Vec2 model)"),Uke.forEach(t),HZo=i(Oe),GF=n(Oe,"LI",{});var Jke=s(GF);nue=n(Jke,"STRONG",{});var Vbt=s(nue);UZo=r(Vbt,"wav2vec2-conformer"),Vbt.forEach(t),JZo=r(Jke," \u2014 "),mz=n(Jke,"A",{href:!0});var Xbt=s(mz);YZo=r(Xbt,"Wav2Vec2ConformerForSequenceClassification"),Xbt.forEach(t),KZo=r(Jke," (Wav2Vec2-Conformer model)"),Jke.forEach(t),ZZo=i(Oe),OF=n(Oe,"LI",{});var Yke=s(OF);sue=n(Yke,"STRONG",{});var zbt=s(sue);eer=r(zbt,"wavlm"),zbt.forEach(t),oer=r(Yke," \u2014 "),gz=n(Yke,"A",{href:!0});var Wbt=s(gz);rer=r(Wbt,"WavLMForSequenceClassification"),Wbt.forEach(t),ter=r(Yke," (WavLM model)"),Yke.forEach(t),Oe.forEach(t),aer=i(ha),VF=n(ha,"P",{});var Kke=s(VF);ner=r(Kke,"The model is set in evaluation mode by default using "),lue=n(Kke,"CODE",{});var Qbt=s(lue);ser=r(Qbt,"model.eval()"),Qbt.forEach(t),ler=r(Kke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iue=n(Kke,"CODE",{});var Hbt=s(iue);ier=r(Hbt,"model.train()"),Hbt.forEach(t),Kke.forEach(t),der=i(ha),T(XF.$$.fragment,ha),ha.forEach(t),rl.forEach(t),cje=i(f),hd=n(f,"H2",{class:!0});var hGe=s(hd);zF=n(hGe,"A",{id:!0,class:!0,href:!0});var Ubt=s(zF);due=n(Ubt,"SPAN",{});var Jbt=s(due);T(TL.$$.fragment,Jbt),Jbt.forEach(t),Ubt.forEach(t),cer=i(hGe),cue=n(hGe,"SPAN",{});var Ybt=s(cue);fer=r(Ybt,"AutoModelForAudioFrameClassification"),Ybt.forEach(t),hGe.forEach(t),fje=i(f),Oo=n(f,"DIV",{class:!0});var tl=s(Oo);T(ML.$$.fragment,tl),mer=i(tl),pd=n(tl,"P",{});var tee=s(pd);ger=r(tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),hz=n(tee,"A",{href:!0});var Kbt=s(hz);her=r(Kbt,"from_pretrained()"),Kbt.forEach(t),per=r(tee," class method or the "),pz=n(tee,"A",{href:!0});var Zbt=s(pz);_er=r(Zbt,"from_config()"),Zbt.forEach(t),uer=r(tee,` class
method.`),tee.forEach(t),ber=i(tl),EL=n(tl,"P",{});var pGe=s(EL);ver=r(pGe,"This class cannot be instantiated directly using "),fue=n(pGe,"CODE",{});var e2t=s(fue);Fer=r(e2t,"__init__()"),e2t.forEach(t),Ter=r(pGe," (throws an error)."),pGe.forEach(t),Mer=i(tl),bt=n(tl,"DIV",{class:!0});var f0=s(bt);T(CL.$$.fragment,f0),Eer=i(f0),mue=n(f0,"P",{});var o2t=s(mue);Cer=r(o2t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),o2t.forEach(t),wer=i(f0),_d=n(f0,"P",{});var aee=s(_d);Aer=r(aee,`Note:
Loading a model from its configuration file does `),gue=n(aee,"STRONG",{});var r2t=s(gue);yer=r(r2t,"not"),r2t.forEach(t),Ler=r(aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=n(aee,"A",{href:!0});var t2t=s(_z);xer=r(t2t,"from_pretrained()"),t2t.forEach(t),$er=r(aee," to load the model weights."),aee.forEach(t),ker=i(f0),T(WF.$$.fragment,f0),f0.forEach(t),Ser=i(tl),fo=n(tl,"DIV",{class:!0});var pa=s(fo);T(wL.$$.fragment,pa),Rer=i(pa),hue=n(pa,"P",{});var a2t=s(hue);Per=r(a2t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),a2t.forEach(t),Ber=i(pa),Oa=n(pa,"P",{});var m0=s(Oa);Ier=r(m0,"The model class to instantiate is selected based on the "),pue=n(m0,"CODE",{});var n2t=s(pue);Ner=r(n2t,"model_type"),n2t.forEach(t),qer=r(m0,` property of the config object (either
passed as an argument or loaded from `),_ue=n(m0,"CODE",{});var s2t=s(_ue);jer=r(s2t,"pretrained_model_name_or_path"),s2t.forEach(t),Der=r(m0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=n(m0,"CODE",{});var l2t=s(uue);Ger=r(l2t,"pretrained_model_name_or_path"),l2t.forEach(t),Oer=r(m0,":"),m0.forEach(t),Ver=i(pa),Kr=n(pa,"UL",{});var al=s(Kr);QF=n(al,"LI",{});var Zke=s(QF);bue=n(Zke,"STRONG",{});var i2t=s(bue);Xer=r(i2t,"data2vec-audio"),i2t.forEach(t),zer=r(Zke," \u2014 "),uz=n(Zke,"A",{href:!0});var d2t=s(uz);Wer=r(d2t,"Data2VecAudioForAudioFrameClassification"),d2t.forEach(t),Qer=r(Zke," (Data2VecAudio model)"),Zke.forEach(t),Her=i(al),HF=n(al,"LI",{});var eSe=s(HF);vue=n(eSe,"STRONG",{});var c2t=s(vue);Uer=r(c2t,"unispeech-sat"),c2t.forEach(t),Jer=r(eSe," \u2014 "),bz=n(eSe,"A",{href:!0});var f2t=s(bz);Yer=r(f2t,"UniSpeechSatForAudioFrameClassification"),f2t.forEach(t),Ker=r(eSe," (UniSpeechSat model)"),eSe.forEach(t),Zer=i(al),UF=n(al,"LI",{});var oSe=s(UF);Fue=n(oSe,"STRONG",{});var m2t=s(Fue);eor=r(m2t,"wav2vec2"),m2t.forEach(t),oor=r(oSe," \u2014 "),vz=n(oSe,"A",{href:!0});var g2t=s(vz);ror=r(g2t,"Wav2Vec2ForAudioFrameClassification"),g2t.forEach(t),tor=r(oSe," (Wav2Vec2 model)"),oSe.forEach(t),aor=i(al),JF=n(al,"LI",{});var rSe=s(JF);Tue=n(rSe,"STRONG",{});var h2t=s(Tue);nor=r(h2t,"wav2vec2-conformer"),h2t.forEach(t),sor=r(rSe," \u2014 "),Fz=n(rSe,"A",{href:!0});var p2t=s(Fz);lor=r(p2t,"Wav2Vec2ConformerForAudioFrameClassification"),p2t.forEach(t),ior=r(rSe," (Wav2Vec2-Conformer model)"),rSe.forEach(t),dor=i(al),YF=n(al,"LI",{});var tSe=s(YF);Mue=n(tSe,"STRONG",{});var _2t=s(Mue);cor=r(_2t,"wavlm"),_2t.forEach(t),mor=r(tSe," \u2014 "),Tz=n(tSe,"A",{href:!0});var u2t=s(Tz);gor=r(u2t,"WavLMForAudioFrameClassification"),u2t.forEach(t),hor=r(tSe," (WavLM model)"),tSe.forEach(t),al.forEach(t),por=i(pa),KF=n(pa,"P",{});var aSe=s(KF);_or=r(aSe,"The model is set in evaluation mode by default using "),Eue=n(aSe,"CODE",{});var b2t=s(Eue);uor=r(b2t,"model.eval()"),b2t.forEach(t),bor=r(aSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cue=n(aSe,"CODE",{});var v2t=s(Cue);vor=r(v2t,"model.train()"),v2t.forEach(t),aSe.forEach(t),For=i(pa),T(ZF.$$.fragment,pa),pa.forEach(t),tl.forEach(t),mje=i(f),ud=n(f,"H2",{class:!0});var _Ge=s(ud);e6=n(_Ge,"A",{id:!0,class:!0,href:!0});var F2t=s(e6);wue=n(F2t,"SPAN",{});var T2t=s(wue);T(AL.$$.fragment,T2t),T2t.forEach(t),F2t.forEach(t),Tor=i(_Ge),Aue=n(_Ge,"SPAN",{});var M2t=s(Aue);Mor=r(M2t,"AutoModelForCTC"),M2t.forEach(t),_Ge.forEach(t),gje=i(f),Vo=n(f,"DIV",{class:!0});var nl=s(Vo);T(yL.$$.fragment,nl),Eor=i(nl),bd=n(nl,"P",{});var nee=s(bd);Cor=r(nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Mz=n(nee,"A",{href:!0});var E2t=s(Mz);wor=r(E2t,"from_pretrained()"),E2t.forEach(t),Aor=r(nee," class method or the "),Ez=n(nee,"A",{href:!0});var C2t=s(Ez);yor=r(C2t,"from_config()"),C2t.forEach(t),Lor=r(nee,` class
method.`),nee.forEach(t),xor=i(nl),LL=n(nl,"P",{});var uGe=s(LL);$or=r(uGe,"This class cannot be instantiated directly using "),yue=n(uGe,"CODE",{});var w2t=s(yue);kor=r(w2t,"__init__()"),w2t.forEach(t),Sor=r(uGe," (throws an error)."),uGe.forEach(t),Ror=i(nl),vt=n(nl,"DIV",{class:!0});var g0=s(vt);T(xL.$$.fragment,g0),Por=i(g0),Lue=n(g0,"P",{});var A2t=s(Lue);Bor=r(A2t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),A2t.forEach(t),Ior=i(g0),vd=n(g0,"P",{});var see=s(vd);Nor=r(see,`Note:
Loading a model from its configuration file does `),xue=n(see,"STRONG",{});var y2t=s(xue);qor=r(y2t,"not"),y2t.forEach(t),jor=r(see,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cz=n(see,"A",{href:!0});var L2t=s(Cz);Dor=r(L2t,"from_pretrained()"),L2t.forEach(t),Gor=r(see," to load the model weights."),see.forEach(t),Oor=i(g0),T(o6.$$.fragment,g0),g0.forEach(t),Vor=i(nl),mo=n(nl,"DIV",{class:!0});var _a=s(mo);T($L.$$.fragment,_a),Xor=i(_a),$ue=n(_a,"P",{});var x2t=s($ue);zor=r(x2t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),x2t.forEach(t),Wor=i(_a),Va=n(_a,"P",{});var h0=s(Va);Qor=r(h0,"The model class to instantiate is selected based on the "),kue=n(h0,"CODE",{});var $2t=s(kue);Hor=r($2t,"model_type"),$2t.forEach(t),Uor=r(h0,` property of the config object (either
passed as an argument or loaded from `),Sue=n(h0,"CODE",{});var k2t=s(Sue);Jor=r(k2t,"pretrained_model_name_or_path"),k2t.forEach(t),Yor=r(h0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rue=n(h0,"CODE",{});var S2t=s(Rue);Kor=r(S2t,"pretrained_model_name_or_path"),S2t.forEach(t),Zor=r(h0,":"),h0.forEach(t),err=i(_a),Se=n(_a,"UL",{});var Ve=s(Se);r6=n(Ve,"LI",{});var nSe=s(r6);Pue=n(nSe,"STRONG",{});var R2t=s(Pue);orr=r(R2t,"data2vec-audio"),R2t.forEach(t),rrr=r(nSe," \u2014 "),wz=n(nSe,"A",{href:!0});var P2t=s(wz);trr=r(P2t,"Data2VecAudioForCTC"),P2t.forEach(t),arr=r(nSe," (Data2VecAudio model)"),nSe.forEach(t),nrr=i(Ve),t6=n(Ve,"LI",{});var sSe=s(t6);Bue=n(sSe,"STRONG",{});var B2t=s(Bue);srr=r(B2t,"hubert"),B2t.forEach(t),lrr=r(sSe," \u2014 "),Az=n(sSe,"A",{href:!0});var I2t=s(Az);irr=r(I2t,"HubertForCTC"),I2t.forEach(t),drr=r(sSe," (Hubert model)"),sSe.forEach(t),crr=i(Ve),a6=n(Ve,"LI",{});var lSe=s(a6);Iue=n(lSe,"STRONG",{});var N2t=s(Iue);frr=r(N2t,"sew"),N2t.forEach(t),mrr=r(lSe," \u2014 "),yz=n(lSe,"A",{href:!0});var q2t=s(yz);grr=r(q2t,"SEWForCTC"),q2t.forEach(t),hrr=r(lSe," (SEW model)"),lSe.forEach(t),prr=i(Ve),n6=n(Ve,"LI",{});var iSe=s(n6);Nue=n(iSe,"STRONG",{});var j2t=s(Nue);_rr=r(j2t,"sew-d"),j2t.forEach(t),urr=r(iSe," \u2014 "),Lz=n(iSe,"A",{href:!0});var D2t=s(Lz);brr=r(D2t,"SEWDForCTC"),D2t.forEach(t),vrr=r(iSe," (SEW-D model)"),iSe.forEach(t),Frr=i(Ve),s6=n(Ve,"LI",{});var dSe=s(s6);que=n(dSe,"STRONG",{});var G2t=s(que);Trr=r(G2t,"unispeech"),G2t.forEach(t),Mrr=r(dSe," \u2014 "),xz=n(dSe,"A",{href:!0});var O2t=s(xz);Err=r(O2t,"UniSpeechForCTC"),O2t.forEach(t),Crr=r(dSe," (UniSpeech model)"),dSe.forEach(t),wrr=i(Ve),l6=n(Ve,"LI",{});var cSe=s(l6);jue=n(cSe,"STRONG",{});var V2t=s(jue);Arr=r(V2t,"unispeech-sat"),V2t.forEach(t),yrr=r(cSe," \u2014 "),$z=n(cSe,"A",{href:!0});var X2t=s($z);Lrr=r(X2t,"UniSpeechSatForCTC"),X2t.forEach(t),xrr=r(cSe," (UniSpeechSat model)"),cSe.forEach(t),$rr=i(Ve),i6=n(Ve,"LI",{});var fSe=s(i6);Due=n(fSe,"STRONG",{});var z2t=s(Due);krr=r(z2t,"wav2vec2"),z2t.forEach(t),Srr=r(fSe," \u2014 "),kz=n(fSe,"A",{href:!0});var W2t=s(kz);Rrr=r(W2t,"Wav2Vec2ForCTC"),W2t.forEach(t),Prr=r(fSe," (Wav2Vec2 model)"),fSe.forEach(t),Brr=i(Ve),d6=n(Ve,"LI",{});var mSe=s(d6);Gue=n(mSe,"STRONG",{});var Q2t=s(Gue);Irr=r(Q2t,"wav2vec2-conformer"),Q2t.forEach(t),Nrr=r(mSe," \u2014 "),Sz=n(mSe,"A",{href:!0});var H2t=s(Sz);qrr=r(H2t,"Wav2Vec2ConformerForCTC"),H2t.forEach(t),jrr=r(mSe," (Wav2Vec2-Conformer model)"),mSe.forEach(t),Drr=i(Ve),c6=n(Ve,"LI",{});var gSe=s(c6);Oue=n(gSe,"STRONG",{});var U2t=s(Oue);Grr=r(U2t,"wavlm"),U2t.forEach(t),Orr=r(gSe," \u2014 "),Rz=n(gSe,"A",{href:!0});var J2t=s(Rz);Vrr=r(J2t,"WavLMForCTC"),J2t.forEach(t),Xrr=r(gSe," (WavLM model)"),gSe.forEach(t),Ve.forEach(t),zrr=i(_a),f6=n(_a,"P",{});var hSe=s(f6);Wrr=r(hSe,"The model is set in evaluation mode by default using "),Vue=n(hSe,"CODE",{});var Y2t=s(Vue);Qrr=r(Y2t,"model.eval()"),Y2t.forEach(t),Hrr=r(hSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xue=n(hSe,"CODE",{});var K2t=s(Xue);Urr=r(K2t,"model.train()"),K2t.forEach(t),hSe.forEach(t),Jrr=i(_a),T(m6.$$.fragment,_a),_a.forEach(t),nl.forEach(t),hje=i(f),Fd=n(f,"H2",{class:!0});var bGe=s(Fd);g6=n(bGe,"A",{id:!0,class:!0,href:!0});var Z2t=s(g6);zue=n(Z2t,"SPAN",{});var e4t=s(zue);T(kL.$$.fragment,e4t),e4t.forEach(t),Z2t.forEach(t),Yrr=i(bGe),Wue=n(bGe,"SPAN",{});var o4t=s(Wue);Krr=r(o4t,"AutoModelForSpeechSeq2Seq"),o4t.forEach(t),bGe.forEach(t),pje=i(f),Xo=n(f,"DIV",{class:!0});var sl=s(Xo);T(SL.$$.fragment,sl),Zrr=i(sl),Td=n(sl,"P",{});var lee=s(Td);etr=r(lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Pz=n(lee,"A",{href:!0});var r4t=s(Pz);otr=r(r4t,"from_pretrained()"),r4t.forEach(t),rtr=r(lee," class method or the "),Bz=n(lee,"A",{href:!0});var t4t=s(Bz);ttr=r(t4t,"from_config()"),t4t.forEach(t),atr=r(lee,` class
method.`),lee.forEach(t),ntr=i(sl),RL=n(sl,"P",{});var vGe=s(RL);str=r(vGe,"This class cannot be instantiated directly using "),Que=n(vGe,"CODE",{});var a4t=s(Que);ltr=r(a4t,"__init__()"),a4t.forEach(t),itr=r(vGe," (throws an error)."),vGe.forEach(t),dtr=i(sl),Ft=n(sl,"DIV",{class:!0});var p0=s(Ft);T(PL.$$.fragment,p0),ctr=i(p0),Hue=n(p0,"P",{});var n4t=s(Hue);ftr=r(n4t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),n4t.forEach(t),mtr=i(p0),Md=n(p0,"P",{});var iee=s(Md);gtr=r(iee,`Note:
Loading a model from its configuration file does `),Uue=n(iee,"STRONG",{});var s4t=s(Uue);htr=r(s4t,"not"),s4t.forEach(t),ptr=r(iee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Iz=n(iee,"A",{href:!0});var l4t=s(Iz);_tr=r(l4t,"from_pretrained()"),l4t.forEach(t),utr=r(iee," to load the model weights."),iee.forEach(t),btr=i(p0),T(h6.$$.fragment,p0),p0.forEach(t),vtr=i(sl),go=n(sl,"DIV",{class:!0});var ua=s(go);T(BL.$$.fragment,ua),Ftr=i(ua),Jue=n(ua,"P",{});var i4t=s(Jue);Ttr=r(i4t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),i4t.forEach(t),Mtr=i(ua),Xa=n(ua,"P",{});var _0=s(Xa);Etr=r(_0,"The model class to instantiate is selected based on the "),Yue=n(_0,"CODE",{});var d4t=s(Yue);Ctr=r(d4t,"model_type"),d4t.forEach(t),wtr=r(_0,` property of the config object (either
passed as an argument or loaded from `),Kue=n(_0,"CODE",{});var c4t=s(Kue);Atr=r(c4t,"pretrained_model_name_or_path"),c4t.forEach(t),ytr=r(_0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zue=n(_0,"CODE",{});var f4t=s(Zue);Ltr=r(f4t,"pretrained_model_name_or_path"),f4t.forEach(t),xtr=r(_0,":"),_0.forEach(t),$tr=i(ua),IL=n(ua,"UL",{});var FGe=s(IL);p6=n(FGe,"LI",{});var pSe=s(p6);e1e=n(pSe,"STRONG",{});var m4t=s(e1e);ktr=r(m4t,"speech-encoder-decoder"),m4t.forEach(t),Str=r(pSe," \u2014 "),Nz=n(pSe,"A",{href:!0});var g4t=s(Nz);Rtr=r(g4t,"SpeechEncoderDecoderModel"),g4t.forEach(t),Ptr=r(pSe," (Speech Encoder decoder model)"),pSe.forEach(t),Btr=i(FGe),_6=n(FGe,"LI",{});var _Se=s(_6);o1e=n(_Se,"STRONG",{});var h4t=s(o1e);Itr=r(h4t,"speech_to_text"),h4t.forEach(t),Ntr=r(_Se," \u2014 "),qz=n(_Se,"A",{href:!0});var p4t=s(qz);qtr=r(p4t,"Speech2TextForConditionalGeneration"),p4t.forEach(t),jtr=r(_Se," (Speech2Text model)"),_Se.forEach(t),FGe.forEach(t),Dtr=i(ua),u6=n(ua,"P",{});var uSe=s(u6);Gtr=r(uSe,"The model is set in evaluation mode by default using "),r1e=n(uSe,"CODE",{});var _4t=s(r1e);Otr=r(_4t,"model.eval()"),_4t.forEach(t),Vtr=r(uSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t1e=n(uSe,"CODE",{});var u4t=s(t1e);Xtr=r(u4t,"model.train()"),u4t.forEach(t),uSe.forEach(t),ztr=i(ua),T(b6.$$.fragment,ua),ua.forEach(t),sl.forEach(t),_je=i(f),Ed=n(f,"H2",{class:!0});var TGe=s(Ed);v6=n(TGe,"A",{id:!0,class:!0,href:!0});var b4t=s(v6);a1e=n(b4t,"SPAN",{});var v4t=s(a1e);T(NL.$$.fragment,v4t),v4t.forEach(t),b4t.forEach(t),Wtr=i(TGe),n1e=n(TGe,"SPAN",{});var F4t=s(n1e);Qtr=r(F4t,"AutoModelForAudioXVector"),F4t.forEach(t),TGe.forEach(t),uje=i(f),zo=n(f,"DIV",{class:!0});var ll=s(zo);T(qL.$$.fragment,ll),Htr=i(ll),Cd=n(ll,"P",{});var dee=s(Cd);Utr=r(dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),jz=n(dee,"A",{href:!0});var T4t=s(jz);Jtr=r(T4t,"from_pretrained()"),T4t.forEach(t),Ytr=r(dee," class method or the "),Dz=n(dee,"A",{href:!0});var M4t=s(Dz);Ktr=r(M4t,"from_config()"),M4t.forEach(t),Ztr=r(dee,` class
method.`),dee.forEach(t),ear=i(ll),jL=n(ll,"P",{});var MGe=s(jL);oar=r(MGe,"This class cannot be instantiated directly using "),s1e=n(MGe,"CODE",{});var E4t=s(s1e);rar=r(E4t,"__init__()"),E4t.forEach(t),tar=r(MGe," (throws an error)."),MGe.forEach(t),aar=i(ll),Tt=n(ll,"DIV",{class:!0});var u0=s(Tt);T(DL.$$.fragment,u0),nar=i(u0),l1e=n(u0,"P",{});var C4t=s(l1e);sar=r(C4t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),C4t.forEach(t),lar=i(u0),wd=n(u0,"P",{});var cee=s(wd);iar=r(cee,`Note:
Loading a model from its configuration file does `),i1e=n(cee,"STRONG",{});var w4t=s(i1e);dar=r(w4t,"not"),w4t.forEach(t),car=r(cee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=n(cee,"A",{href:!0});var A4t=s(Gz);far=r(A4t,"from_pretrained()"),A4t.forEach(t),mar=r(cee," to load the model weights."),cee.forEach(t),gar=i(u0),T(F6.$$.fragment,u0),u0.forEach(t),har=i(ll),ho=n(ll,"DIV",{class:!0});var ba=s(ho);T(GL.$$.fragment,ba),par=i(ba),d1e=n(ba,"P",{});var y4t=s(d1e);_ar=r(y4t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),y4t.forEach(t),uar=i(ba),za=n(ba,"P",{});var b0=s(za);bar=r(b0,"The model class to instantiate is selected based on the "),c1e=n(b0,"CODE",{});var L4t=s(c1e);Far=r(L4t,"model_type"),L4t.forEach(t),Tar=r(b0,` property of the config object (either
passed as an argument or loaded from `),f1e=n(b0,"CODE",{});var x4t=s(f1e);Mar=r(x4t,"pretrained_model_name_or_path"),x4t.forEach(t),Ear=r(b0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m1e=n(b0,"CODE",{});var $4t=s(m1e);Car=r($4t,"pretrained_model_name_or_path"),$4t.forEach(t),war=r(b0,":"),b0.forEach(t),Aar=i(ba),Zr=n(ba,"UL",{});var il=s(Zr);T6=n(il,"LI",{});var bSe=s(T6);g1e=n(bSe,"STRONG",{});var k4t=s(g1e);yar=r(k4t,"data2vec-audio"),k4t.forEach(t),Lar=r(bSe," \u2014 "),Oz=n(bSe,"A",{href:!0});var S4t=s(Oz);xar=r(S4t,"Data2VecAudioForXVector"),S4t.forEach(t),$ar=r(bSe," (Data2VecAudio model)"),bSe.forEach(t),kar=i(il),M6=n(il,"LI",{});var vSe=s(M6);h1e=n(vSe,"STRONG",{});var R4t=s(h1e);Sar=r(R4t,"unispeech-sat"),R4t.forEach(t),Rar=r(vSe," \u2014 "),Vz=n(vSe,"A",{href:!0});var P4t=s(Vz);Par=r(P4t,"UniSpeechSatForXVector"),P4t.forEach(t),Bar=r(vSe," (UniSpeechSat model)"),vSe.forEach(t),Iar=i(il),E6=n(il,"LI",{});var FSe=s(E6);p1e=n(FSe,"STRONG",{});var B4t=s(p1e);Nar=r(B4t,"wav2vec2"),B4t.forEach(t),qar=r(FSe," \u2014 "),Xz=n(FSe,"A",{href:!0});var I4t=s(Xz);jar=r(I4t,"Wav2Vec2ForXVector"),I4t.forEach(t),Dar=r(FSe," (Wav2Vec2 model)"),FSe.forEach(t),Gar=i(il),C6=n(il,"LI",{});var TSe=s(C6);_1e=n(TSe,"STRONG",{});var N4t=s(_1e);Oar=r(N4t,"wav2vec2-conformer"),N4t.forEach(t),Var=r(TSe," \u2014 "),zz=n(TSe,"A",{href:!0});var q4t=s(zz);Xar=r(q4t,"Wav2Vec2ConformerForXVector"),q4t.forEach(t),zar=r(TSe," (Wav2Vec2-Conformer model)"),TSe.forEach(t),War=i(il),w6=n(il,"LI",{});var MSe=s(w6);u1e=n(MSe,"STRONG",{});var j4t=s(u1e);Qar=r(j4t,"wavlm"),j4t.forEach(t),Har=r(MSe," \u2014 "),Wz=n(MSe,"A",{href:!0});var D4t=s(Wz);Uar=r(D4t,"WavLMForXVector"),D4t.forEach(t),Jar=r(MSe," (WavLM model)"),MSe.forEach(t),il.forEach(t),Yar=i(ba),A6=n(ba,"P",{});var ESe=s(A6);Kar=r(ESe,"The model is set in evaluation mode by default using "),b1e=n(ESe,"CODE",{});var G4t=s(b1e);Zar=r(G4t,"model.eval()"),G4t.forEach(t),enr=r(ESe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v1e=n(ESe,"CODE",{});var O4t=s(v1e);onr=r(O4t,"model.train()"),O4t.forEach(t),ESe.forEach(t),rnr=i(ba),T(y6.$$.fragment,ba),ba.forEach(t),ll.forEach(t),bje=i(f),Ad=n(f,"H2",{class:!0});var EGe=s(Ad);L6=n(EGe,"A",{id:!0,class:!0,href:!0});var V4t=s(L6);F1e=n(V4t,"SPAN",{});var X4t=s(F1e);T(OL.$$.fragment,X4t),X4t.forEach(t),V4t.forEach(t),tnr=i(EGe),T1e=n(EGe,"SPAN",{});var z4t=s(T1e);anr=r(z4t,"AutoModelForMaskedImageModeling"),z4t.forEach(t),EGe.forEach(t),vje=i(f),Wo=n(f,"DIV",{class:!0});var dl=s(Wo);T(VL.$$.fragment,dl),nnr=i(dl),yd=n(dl,"P",{});var fee=s(yd);snr=r(fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Qz=n(fee,"A",{href:!0});var W4t=s(Qz);lnr=r(W4t,"from_pretrained()"),W4t.forEach(t),inr=r(fee," class method or the "),Hz=n(fee,"A",{href:!0});var Q4t=s(Hz);dnr=r(Q4t,"from_config()"),Q4t.forEach(t),cnr=r(fee,` class
method.`),fee.forEach(t),fnr=i(dl),XL=n(dl,"P",{});var CGe=s(XL);mnr=r(CGe,"This class cannot be instantiated directly using "),M1e=n(CGe,"CODE",{});var H4t=s(M1e);gnr=r(H4t,"__init__()"),H4t.forEach(t),hnr=r(CGe," (throws an error)."),CGe.forEach(t),pnr=i(dl),Mt=n(dl,"DIV",{class:!0});var v0=s(Mt);T(zL.$$.fragment,v0),_nr=i(v0),E1e=n(v0,"P",{});var U4t=s(E1e);unr=r(U4t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),U4t.forEach(t),bnr=i(v0),Ld=n(v0,"P",{});var mee=s(Ld);vnr=r(mee,`Note:
Loading a model from its configuration file does `),C1e=n(mee,"STRONG",{});var J4t=s(C1e);Fnr=r(J4t,"not"),J4t.forEach(t),Tnr=r(mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uz=n(mee,"A",{href:!0});var Y4t=s(Uz);Mnr=r(Y4t,"from_pretrained()"),Y4t.forEach(t),Enr=r(mee," to load the model weights."),mee.forEach(t),Cnr=i(v0),T(x6.$$.fragment,v0),v0.forEach(t),wnr=i(dl),po=n(dl,"DIV",{class:!0});var va=s(po);T(WL.$$.fragment,va),Anr=i(va),w1e=n(va,"P",{});var K4t=s(w1e);ynr=r(K4t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),K4t.forEach(t),Lnr=i(va),Wa=n(va,"P",{});var F0=s(Wa);xnr=r(F0,"The model class to instantiate is selected based on the "),A1e=n(F0,"CODE",{});var Z4t=s(A1e);$nr=r(Z4t,"model_type"),Z4t.forEach(t),knr=r(F0,` property of the config object (either
passed as an argument or loaded from `),y1e=n(F0,"CODE",{});var evt=s(y1e);Snr=r(evt,"pretrained_model_name_or_path"),evt.forEach(t),Rnr=r(F0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L1e=n(F0,"CODE",{});var ovt=s(L1e);Pnr=r(ovt,"pretrained_model_name_or_path"),ovt.forEach(t),Bnr=r(F0,":"),F0.forEach(t),Inr=i(va),xd=n(va,"UL",{});var gee=s(xd);$6=n(gee,"LI",{});var CSe=s($6);x1e=n(CSe,"STRONG",{});var rvt=s(x1e);Nnr=r(rvt,"deit"),rvt.forEach(t),qnr=r(CSe," \u2014 "),Jz=n(CSe,"A",{href:!0});var tvt=s(Jz);jnr=r(tvt,"DeiTForMaskedImageModeling"),tvt.forEach(t),Dnr=r(CSe," (DeiT model)"),CSe.forEach(t),Gnr=i(gee),k6=n(gee,"LI",{});var wSe=s(k6);$1e=n(wSe,"STRONG",{});var avt=s($1e);Onr=r(avt,"swin"),avt.forEach(t),Vnr=r(wSe," \u2014 "),Yz=n(wSe,"A",{href:!0});var nvt=s(Yz);Xnr=r(nvt,"SwinForMaskedImageModeling"),nvt.forEach(t),znr=r(wSe," (Swin model)"),wSe.forEach(t),Wnr=i(gee),S6=n(gee,"LI",{});var ASe=s(S6);k1e=n(ASe,"STRONG",{});var svt=s(k1e);Qnr=r(svt,"vit"),svt.forEach(t),Hnr=r(ASe," \u2014 "),Kz=n(ASe,"A",{href:!0});var lvt=s(Kz);Unr=r(lvt,"ViTForMaskedImageModeling"),lvt.forEach(t),Jnr=r(ASe," (ViT model)"),ASe.forEach(t),gee.forEach(t),Ynr=i(va),R6=n(va,"P",{});var ySe=s(R6);Knr=r(ySe,"The model is set in evaluation mode by default using "),S1e=n(ySe,"CODE",{});var ivt=s(S1e);Znr=r(ivt,"model.eval()"),ivt.forEach(t),esr=r(ySe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R1e=n(ySe,"CODE",{});var dvt=s(R1e);osr=r(dvt,"model.train()"),dvt.forEach(t),ySe.forEach(t),rsr=i(va),T(P6.$$.fragment,va),va.forEach(t),dl.forEach(t),Fje=i(f),$d=n(f,"H2",{class:!0});var wGe=s($d);B6=n(wGe,"A",{id:!0,class:!0,href:!0});var cvt=s(B6);P1e=n(cvt,"SPAN",{});var fvt=s(P1e);T(QL.$$.fragment,fvt),fvt.forEach(t),cvt.forEach(t),tsr=i(wGe),B1e=n(wGe,"SPAN",{});var mvt=s(B1e);asr=r(mvt,"AutoModelForObjectDetection"),mvt.forEach(t),wGe.forEach(t),Tje=i(f),Qo=n(f,"DIV",{class:!0});var cl=s(Qo);T(HL.$$.fragment,cl),nsr=i(cl),kd=n(cl,"P",{});var hee=s(kd);ssr=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Zz=n(hee,"A",{href:!0});var gvt=s(Zz);lsr=r(gvt,"from_pretrained()"),gvt.forEach(t),isr=r(hee," class method or the "),eW=n(hee,"A",{href:!0});var hvt=s(eW);dsr=r(hvt,"from_config()"),hvt.forEach(t),csr=r(hee,` class
method.`),hee.forEach(t),fsr=i(cl),UL=n(cl,"P",{});var AGe=s(UL);msr=r(AGe,"This class cannot be instantiated directly using "),I1e=n(AGe,"CODE",{});var pvt=s(I1e);gsr=r(pvt,"__init__()"),pvt.forEach(t),hsr=r(AGe," (throws an error)."),AGe.forEach(t),psr=i(cl),Et=n(cl,"DIV",{class:!0});var T0=s(Et);T(JL.$$.fragment,T0),_sr=i(T0),N1e=n(T0,"P",{});var _vt=s(N1e);usr=r(_vt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),_vt.forEach(t),bsr=i(T0),Sd=n(T0,"P",{});var pee=s(Sd);vsr=r(pee,`Note:
Loading a model from its configuration file does `),q1e=n(pee,"STRONG",{});var uvt=s(q1e);Fsr=r(uvt,"not"),uvt.forEach(t),Tsr=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),oW=n(pee,"A",{href:!0});var bvt=s(oW);Msr=r(bvt,"from_pretrained()"),bvt.forEach(t),Esr=r(pee," to load the model weights."),pee.forEach(t),Csr=i(T0),T(I6.$$.fragment,T0),T0.forEach(t),wsr=i(cl),_o=n(cl,"DIV",{class:!0});var Fa=s(_o);T(YL.$$.fragment,Fa),Asr=i(Fa),j1e=n(Fa,"P",{});var vvt=s(j1e);ysr=r(vvt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),vvt.forEach(t),Lsr=i(Fa),Qa=n(Fa,"P",{});var M0=s(Qa);xsr=r(M0,"The model class to instantiate is selected based on the "),D1e=n(M0,"CODE",{});var Fvt=s(D1e);$sr=r(Fvt,"model_type"),Fvt.forEach(t),ksr=r(M0,` property of the config object (either
passed as an argument or loaded from `),G1e=n(M0,"CODE",{});var Tvt=s(G1e);Ssr=r(Tvt,"pretrained_model_name_or_path"),Tvt.forEach(t),Rsr=r(M0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O1e=n(M0,"CODE",{});var Mvt=s(O1e);Psr=r(Mvt,"pretrained_model_name_or_path"),Mvt.forEach(t),Bsr=r(M0,":"),M0.forEach(t),Isr=i(Fa),KL=n(Fa,"UL",{});var yGe=s(KL);N6=n(yGe,"LI",{});var LSe=s(N6);V1e=n(LSe,"STRONG",{});var Evt=s(V1e);Nsr=r(Evt,"detr"),Evt.forEach(t),qsr=r(LSe," \u2014 "),rW=n(LSe,"A",{href:!0});var Cvt=s(rW);jsr=r(Cvt,"DetrForObjectDetection"),Cvt.forEach(t),Dsr=r(LSe," (DETR model)"),LSe.forEach(t),Gsr=i(yGe),q6=n(yGe,"LI",{});var xSe=s(q6);X1e=n(xSe,"STRONG",{});var wvt=s(X1e);Osr=r(wvt,"yolos"),wvt.forEach(t),Vsr=r(xSe," \u2014 "),tW=n(xSe,"A",{href:!0});var Avt=s(tW);Xsr=r(Avt,"YolosForObjectDetection"),Avt.forEach(t),zsr=r(xSe," (YOLOS model)"),xSe.forEach(t),yGe.forEach(t),Wsr=i(Fa),j6=n(Fa,"P",{});var $Se=s(j6);Qsr=r($Se,"The model is set in evaluation mode by default using "),z1e=n($Se,"CODE",{});var yvt=s(z1e);Hsr=r(yvt,"model.eval()"),yvt.forEach(t),Usr=r($Se,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W1e=n($Se,"CODE",{});var Lvt=s(W1e);Jsr=r(Lvt,"model.train()"),Lvt.forEach(t),$Se.forEach(t),Ysr=i(Fa),T(D6.$$.fragment,Fa),Fa.forEach(t),cl.forEach(t),Mje=i(f),Rd=n(f,"H2",{class:!0});var LGe=s(Rd);G6=n(LGe,"A",{id:!0,class:!0,href:!0});var xvt=s(G6);Q1e=n(xvt,"SPAN",{});var $vt=s(Q1e);T(ZL.$$.fragment,$vt),$vt.forEach(t),xvt.forEach(t),Ksr=i(LGe),H1e=n(LGe,"SPAN",{});var kvt=s(H1e);Zsr=r(kvt,"AutoModelForImageSegmentation"),kvt.forEach(t),LGe.forEach(t),Eje=i(f),Ho=n(f,"DIV",{class:!0});var fl=s(Ho);T(e8.$$.fragment,fl),elr=i(fl),Pd=n(fl,"P",{});var _ee=s(Pd);olr=r(_ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),aW=n(_ee,"A",{href:!0});var Svt=s(aW);rlr=r(Svt,"from_pretrained()"),Svt.forEach(t),tlr=r(_ee," class method or the "),nW=n(_ee,"A",{href:!0});var Rvt=s(nW);alr=r(Rvt,"from_config()"),Rvt.forEach(t),nlr=r(_ee,` class
method.`),_ee.forEach(t),slr=i(fl),o8=n(fl,"P",{});var xGe=s(o8);llr=r(xGe,"This class cannot be instantiated directly using "),U1e=n(xGe,"CODE",{});var Pvt=s(U1e);ilr=r(Pvt,"__init__()"),Pvt.forEach(t),dlr=r(xGe," (throws an error)."),xGe.forEach(t),clr=i(fl),Ct=n(fl,"DIV",{class:!0});var E0=s(Ct);T(r8.$$.fragment,E0),flr=i(E0),J1e=n(E0,"P",{});var Bvt=s(J1e);mlr=r(Bvt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Bvt.forEach(t),glr=i(E0),Bd=n(E0,"P",{});var uee=s(Bd);hlr=r(uee,`Note:
Loading a model from its configuration file does `),Y1e=n(uee,"STRONG",{});var Ivt=s(Y1e);plr=r(Ivt,"not"),Ivt.forEach(t),_lr=r(uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),sW=n(uee,"A",{href:!0});var Nvt=s(sW);ulr=r(Nvt,"from_pretrained()"),Nvt.forEach(t),blr=r(uee," to load the model weights."),uee.forEach(t),vlr=i(E0),T(O6.$$.fragment,E0),E0.forEach(t),Flr=i(fl),uo=n(fl,"DIV",{class:!0});var Ta=s(uo);T(t8.$$.fragment,Ta),Tlr=i(Ta),K1e=n(Ta,"P",{});var qvt=s(K1e);Mlr=r(qvt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),qvt.forEach(t),Elr=i(Ta),Ha=n(Ta,"P",{});var C0=s(Ha);Clr=r(C0,"The model class to instantiate is selected based on the "),Z1e=n(C0,"CODE",{});var jvt=s(Z1e);wlr=r(jvt,"model_type"),jvt.forEach(t),Alr=r(C0,` property of the config object (either
passed as an argument or loaded from `),ebe=n(C0,"CODE",{});var Dvt=s(ebe);ylr=r(Dvt,"pretrained_model_name_or_path"),Dvt.forEach(t),Llr=r(C0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),obe=n(C0,"CODE",{});var Gvt=s(obe);xlr=r(Gvt,"pretrained_model_name_or_path"),Gvt.forEach(t),$lr=r(C0,":"),C0.forEach(t),klr=i(Ta),rbe=n(Ta,"UL",{});var Ovt=s(rbe);V6=n(Ovt,"LI",{});var kSe=s(V6);tbe=n(kSe,"STRONG",{});var Vvt=s(tbe);Slr=r(Vvt,"detr"),Vvt.forEach(t),Rlr=r(kSe," \u2014 "),lW=n(kSe,"A",{href:!0});var Xvt=s(lW);Plr=r(Xvt,"DetrForSegmentation"),Xvt.forEach(t),Blr=r(kSe," (DETR model)"),kSe.forEach(t),Ovt.forEach(t),Ilr=i(Ta),X6=n(Ta,"P",{});var SSe=s(X6);Nlr=r(SSe,"The model is set in evaluation mode by default using "),abe=n(SSe,"CODE",{});var zvt=s(abe);qlr=r(zvt,"model.eval()"),zvt.forEach(t),jlr=r(SSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nbe=n(SSe,"CODE",{});var Wvt=s(nbe);Dlr=r(Wvt,"model.train()"),Wvt.forEach(t),SSe.forEach(t),Glr=i(Ta),T(z6.$$.fragment,Ta),Ta.forEach(t),fl.forEach(t),Cje=i(f),Id=n(f,"H2",{class:!0});var $Ge=s(Id);W6=n($Ge,"A",{id:!0,class:!0,href:!0});var Qvt=s(W6);sbe=n(Qvt,"SPAN",{});var Hvt=s(sbe);T(a8.$$.fragment,Hvt),Hvt.forEach(t),Qvt.forEach(t),Olr=i($Ge),lbe=n($Ge,"SPAN",{});var Uvt=s(lbe);Vlr=r(Uvt,"AutoModelForSemanticSegmentation"),Uvt.forEach(t),$Ge.forEach(t),wje=i(f),Uo=n(f,"DIV",{class:!0});var ml=s(Uo);T(n8.$$.fragment,ml),Xlr=i(ml),Nd=n(ml,"P",{});var bee=s(Nd);zlr=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),iW=n(bee,"A",{href:!0});var Jvt=s(iW);Wlr=r(Jvt,"from_pretrained()"),Jvt.forEach(t),Qlr=r(bee," class method or the "),dW=n(bee,"A",{href:!0});var Yvt=s(dW);Hlr=r(Yvt,"from_config()"),Yvt.forEach(t),Ulr=r(bee,` class
method.`),bee.forEach(t),Jlr=i(ml),s8=n(ml,"P",{});var kGe=s(s8);Ylr=r(kGe,"This class cannot be instantiated directly using "),ibe=n(kGe,"CODE",{});var Kvt=s(ibe);Klr=r(Kvt,"__init__()"),Kvt.forEach(t),Zlr=r(kGe," (throws an error)."),kGe.forEach(t),eir=i(ml),wt=n(ml,"DIV",{class:!0});var w0=s(wt);T(l8.$$.fragment,w0),oir=i(w0),dbe=n(w0,"P",{});var Zvt=s(dbe);rir=r(Zvt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Zvt.forEach(t),tir=i(w0),qd=n(w0,"P",{});var vee=s(qd);air=r(vee,`Note:
Loading a model from its configuration file does `),cbe=n(vee,"STRONG",{});var eFt=s(cbe);nir=r(eFt,"not"),eFt.forEach(t),sir=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),cW=n(vee,"A",{href:!0});var oFt=s(cW);lir=r(oFt,"from_pretrained()"),oFt.forEach(t),iir=r(vee," to load the model weights."),vee.forEach(t),dir=i(w0),T(Q6.$$.fragment,w0),w0.forEach(t),cir=i(ml),bo=n(ml,"DIV",{class:!0});var Ma=s(bo);T(i8.$$.fragment,Ma),fir=i(Ma),fbe=n(Ma,"P",{});var rFt=s(fbe);mir=r(rFt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),rFt.forEach(t),gir=i(Ma),Ua=n(Ma,"P",{});var A0=s(Ua);hir=r(A0,"The model class to instantiate is selected based on the "),mbe=n(A0,"CODE",{});var tFt=s(mbe);pir=r(tFt,"model_type"),tFt.forEach(t),_ir=r(A0,` property of the config object (either
passed as an argument or loaded from `),gbe=n(A0,"CODE",{});var aFt=s(gbe);uir=r(aFt,"pretrained_model_name_or_path"),aFt.forEach(t),bir=r(A0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hbe=n(A0,"CODE",{});var nFt=s(hbe);vir=r(nFt,"pretrained_model_name_or_path"),nFt.forEach(t),Fir=r(A0,":"),A0.forEach(t),Tir=i(Ma),Ja=n(Ma,"UL",{});var y0=s(Ja);H6=n(y0,"LI",{});var RSe=s(H6);pbe=n(RSe,"STRONG",{});var sFt=s(pbe);Mir=r(sFt,"beit"),sFt.forEach(t),Eir=r(RSe," \u2014 "),fW=n(RSe,"A",{href:!0});var lFt=s(fW);Cir=r(lFt,"BeitForSemanticSegmentation"),lFt.forEach(t),wir=r(RSe," (BEiT model)"),RSe.forEach(t),Air=i(y0),U6=n(y0,"LI",{});var PSe=s(U6);_be=n(PSe,"STRONG",{});var iFt=s(_be);yir=r(iFt,"data2vec-vision"),iFt.forEach(t),Lir=r(PSe," \u2014 "),mW=n(PSe,"A",{href:!0});var dFt=s(mW);xir=r(dFt,"Data2VecVisionForSemanticSegmentation"),dFt.forEach(t),$ir=r(PSe," (Data2VecVision model)"),PSe.forEach(t),kir=i(y0),J6=n(y0,"LI",{});var BSe=s(J6);ube=n(BSe,"STRONG",{});var cFt=s(ube);Sir=r(cFt,"dpt"),cFt.forEach(t),Rir=r(BSe," \u2014 "),gW=n(BSe,"A",{href:!0});var fFt=s(gW);Pir=r(fFt,"DPTForSemanticSegmentation"),fFt.forEach(t),Bir=r(BSe," (DPT model)"),BSe.forEach(t),Iir=i(y0),Y6=n(y0,"LI",{});var ISe=s(Y6);bbe=n(ISe,"STRONG",{});var mFt=s(bbe);Nir=r(mFt,"segformer"),mFt.forEach(t),qir=r(ISe," \u2014 "),hW=n(ISe,"A",{href:!0});var gFt=s(hW);jir=r(gFt,"SegformerForSemanticSegmentation"),gFt.forEach(t),Dir=r(ISe," (SegFormer model)"),ISe.forEach(t),y0.forEach(t),Gir=i(Ma),K6=n(Ma,"P",{});var NSe=s(K6);Oir=r(NSe,"The model is set in evaluation mode by default using "),vbe=n(NSe,"CODE",{});var hFt=s(vbe);Vir=r(hFt,"model.eval()"),hFt.forEach(t),Xir=r(NSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fbe=n(NSe,"CODE",{});var pFt=s(Fbe);zir=r(pFt,"model.train()"),pFt.forEach(t),NSe.forEach(t),Wir=i(Ma),T(Z6.$$.fragment,Ma),Ma.forEach(t),ml.forEach(t),Aje=i(f),jd=n(f,"H2",{class:!0});var SGe=s(jd);eT=n(SGe,"A",{id:!0,class:!0,href:!0});var _Ft=s(eT);Tbe=n(_Ft,"SPAN",{});var uFt=s(Tbe);T(d8.$$.fragment,uFt),uFt.forEach(t),_Ft.forEach(t),Qir=i(SGe),Mbe=n(SGe,"SPAN",{});var bFt=s(Mbe);Hir=r(bFt,"AutoModelForInstanceSegmentation"),bFt.forEach(t),SGe.forEach(t),yje=i(f),Jo=n(f,"DIV",{class:!0});var gl=s(Jo);T(c8.$$.fragment,gl),Uir=i(gl),Dd=n(gl,"P",{});var Fee=s(Dd);Jir=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),pW=n(Fee,"A",{href:!0});var vFt=s(pW);Yir=r(vFt,"from_pretrained()"),vFt.forEach(t),Kir=r(Fee," class method or the "),_W=n(Fee,"A",{href:!0});var FFt=s(_W);Zir=r(FFt,"from_config()"),FFt.forEach(t),edr=r(Fee,` class
method.`),Fee.forEach(t),odr=i(gl),f8=n(gl,"P",{});var RGe=s(f8);rdr=r(RGe,"This class cannot be instantiated directly using "),Ebe=n(RGe,"CODE",{});var TFt=s(Ebe);tdr=r(TFt,"__init__()"),TFt.forEach(t),adr=r(RGe," (throws an error)."),RGe.forEach(t),ndr=i(gl),At=n(gl,"DIV",{class:!0});var L0=s(At);T(m8.$$.fragment,L0),sdr=i(L0),Cbe=n(L0,"P",{});var MFt=s(Cbe);ldr=r(MFt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),MFt.forEach(t),idr=i(L0),Gd=n(L0,"P",{});var Tee=s(Gd);ddr=r(Tee,`Note:
Loading a model from its configuration file does `),wbe=n(Tee,"STRONG",{});var EFt=s(wbe);cdr=r(EFt,"not"),EFt.forEach(t),fdr=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=n(Tee,"A",{href:!0});var CFt=s(uW);mdr=r(CFt,"from_pretrained()"),CFt.forEach(t),gdr=r(Tee," to load the model weights."),Tee.forEach(t),hdr=i(L0),T(oT.$$.fragment,L0),L0.forEach(t),pdr=i(gl),vo=n(gl,"DIV",{class:!0});var Ea=s(vo);T(g8.$$.fragment,Ea),_dr=i(Ea),Abe=n(Ea,"P",{});var wFt=s(Abe);udr=r(wFt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),wFt.forEach(t),bdr=i(Ea),Ya=n(Ea,"P",{});var x0=s(Ya);vdr=r(x0,"The model class to instantiate is selected based on the "),ybe=n(x0,"CODE",{});var AFt=s(ybe);Fdr=r(AFt,"model_type"),AFt.forEach(t),Tdr=r(x0,` property of the config object (either
passed as an argument or loaded from `),Lbe=n(x0,"CODE",{});var yFt=s(Lbe);Mdr=r(yFt,"pretrained_model_name_or_path"),yFt.forEach(t),Edr=r(x0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=n(x0,"CODE",{});var LFt=s(xbe);Cdr=r(LFt,"pretrained_model_name_or_path"),LFt.forEach(t),wdr=r(x0,":"),x0.forEach(t),Adr=i(Ea),$be=n(Ea,"UL",{});var xFt=s($be);rT=n(xFt,"LI",{});var qSe=s(rT);kbe=n(qSe,"STRONG",{});var $Ft=s(kbe);ydr=r($Ft,"maskformer"),$Ft.forEach(t),Ldr=r(qSe," \u2014 "),bW=n(qSe,"A",{href:!0});var kFt=s(bW);xdr=r(kFt,"MaskFormerForInstanceSegmentation"),kFt.forEach(t),$dr=r(qSe," (MaskFormer model)"),qSe.forEach(t),xFt.forEach(t),kdr=i(Ea),tT=n(Ea,"P",{});var jSe=s(tT);Sdr=r(jSe,"The model is set in evaluation mode by default using "),Sbe=n(jSe,"CODE",{});var SFt=s(Sbe);Rdr=r(SFt,"model.eval()"),SFt.forEach(t),Pdr=r(jSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rbe=n(jSe,"CODE",{});var RFt=s(Rbe);Bdr=r(RFt,"model.train()"),RFt.forEach(t),jSe.forEach(t),Idr=i(Ea),T(aT.$$.fragment,Ea),Ea.forEach(t),gl.forEach(t),Lje=i(f),Od=n(f,"H2",{class:!0});var PGe=s(Od);nT=n(PGe,"A",{id:!0,class:!0,href:!0});var PFt=s(nT);Pbe=n(PFt,"SPAN",{});var BFt=s(Pbe);T(h8.$$.fragment,BFt),BFt.forEach(t),PFt.forEach(t),Ndr=i(PGe),Bbe=n(PGe,"SPAN",{});var IFt=s(Bbe);qdr=r(IFt,"TFAutoModel"),IFt.forEach(t),PGe.forEach(t),xje=i(f),Yo=n(f,"DIV",{class:!0});var hl=s(Yo);T(p8.$$.fragment,hl),jdr=i(hl),Vd=n(hl,"P",{});var Mee=s(Vd);Ddr=r(Mee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vW=n(Mee,"A",{href:!0});var NFt=s(vW);Gdr=r(NFt,"from_pretrained()"),NFt.forEach(t),Odr=r(Mee," class method or the "),FW=n(Mee,"A",{href:!0});var qFt=s(FW);Vdr=r(qFt,"from_config()"),qFt.forEach(t),Xdr=r(Mee,` class
method.`),Mee.forEach(t),zdr=i(hl),_8=n(hl,"P",{});var BGe=s(_8);Wdr=r(BGe,"This class cannot be instantiated directly using "),Ibe=n(BGe,"CODE",{});var jFt=s(Ibe);Qdr=r(jFt,"__init__()"),jFt.forEach(t),Hdr=r(BGe," (throws an error)."),BGe.forEach(t),Udr=i(hl),yt=n(hl,"DIV",{class:!0});var $0=s(yt);T(u8.$$.fragment,$0),Jdr=i($0),Nbe=n($0,"P",{});var DFt=s(Nbe);Ydr=r(DFt,"Instantiates one of the base model classes of the library from a configuration."),DFt.forEach(t),Kdr=i($0),Xd=n($0,"P",{});var Eee=s(Xd);Zdr=r(Eee,`Note:
Loading a model from its configuration file does `),qbe=n(Eee,"STRONG",{});var GFt=s(qbe);ecr=r(GFt,"not"),GFt.forEach(t),ocr=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=n(Eee,"A",{href:!0});var OFt=s(TW);rcr=r(OFt,"from_pretrained()"),OFt.forEach(t),tcr=r(Eee," to load the model weights."),Eee.forEach(t),acr=i($0),T(sT.$$.fragment,$0),$0.forEach(t),ncr=i(hl),wr=n(hl,"DIV",{class:!0});var pl=s(wr);T(b8.$$.fragment,pl),scr=i(pl),jbe=n(pl,"P",{});var VFt=s(jbe);lcr=r(VFt,"Instantiate one of the base model classes of the library from a pretrained model."),VFt.forEach(t),icr=i(pl),Ka=n(pl,"P",{});var k0=s(Ka);dcr=r(k0,"The model class to instantiate is selected based on the "),Dbe=n(k0,"CODE",{});var XFt=s(Dbe);ccr=r(XFt,"model_type"),XFt.forEach(t),fcr=r(k0,` property of the config object (either
passed as an argument or loaded from `),Gbe=n(k0,"CODE",{});var zFt=s(Gbe);mcr=r(zFt,"pretrained_model_name_or_path"),zFt.forEach(t),gcr=r(k0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Obe=n(k0,"CODE",{});var WFt=s(Obe);hcr=r(WFt,"pretrained_model_name_or_path"),WFt.forEach(t),pcr=r(k0,":"),k0.forEach(t),_cr=i(pl),q=n(pl,"UL",{});var D=s(q);lT=n(D,"LI",{});var DSe=s(lT);Vbe=n(DSe,"STRONG",{});var QFt=s(Vbe);ucr=r(QFt,"albert"),QFt.forEach(t),bcr=r(DSe," \u2014 "),MW=n(DSe,"A",{href:!0});var HFt=s(MW);vcr=r(HFt,"TFAlbertModel"),HFt.forEach(t),Fcr=r(DSe," (ALBERT model)"),DSe.forEach(t),Tcr=i(D),iT=n(D,"LI",{});var GSe=s(iT);Xbe=n(GSe,"STRONG",{});var UFt=s(Xbe);Mcr=r(UFt,"bart"),UFt.forEach(t),Ecr=r(GSe," \u2014 "),EW=n(GSe,"A",{href:!0});var JFt=s(EW);Ccr=r(JFt,"TFBartModel"),JFt.forEach(t),wcr=r(GSe," (BART model)"),GSe.forEach(t),Acr=i(D),dT=n(D,"LI",{});var OSe=s(dT);zbe=n(OSe,"STRONG",{});var YFt=s(zbe);ycr=r(YFt,"bert"),YFt.forEach(t),Lcr=r(OSe," \u2014 "),CW=n(OSe,"A",{href:!0});var KFt=s(CW);xcr=r(KFt,"TFBertModel"),KFt.forEach(t),$cr=r(OSe," (BERT model)"),OSe.forEach(t),kcr=i(D),cT=n(D,"LI",{});var VSe=s(cT);Wbe=n(VSe,"STRONG",{});var ZFt=s(Wbe);Scr=r(ZFt,"blenderbot"),ZFt.forEach(t),Rcr=r(VSe," \u2014 "),wW=n(VSe,"A",{href:!0});var e6t=s(wW);Pcr=r(e6t,"TFBlenderbotModel"),e6t.forEach(t),Bcr=r(VSe," (Blenderbot model)"),VSe.forEach(t),Icr=i(D),fT=n(D,"LI",{});var XSe=s(fT);Qbe=n(XSe,"STRONG",{});var o6t=s(Qbe);Ncr=r(o6t,"blenderbot-small"),o6t.forEach(t),qcr=r(XSe," \u2014 "),AW=n(XSe,"A",{href:!0});var r6t=s(AW);jcr=r(r6t,"TFBlenderbotSmallModel"),r6t.forEach(t),Dcr=r(XSe," (BlenderbotSmall model)"),XSe.forEach(t),Gcr=i(D),mT=n(D,"LI",{});var zSe=s(mT);Hbe=n(zSe,"STRONG",{});var t6t=s(Hbe);Ocr=r(t6t,"camembert"),t6t.forEach(t),Vcr=r(zSe," \u2014 "),yW=n(zSe,"A",{href:!0});var a6t=s(yW);Xcr=r(a6t,"TFCamembertModel"),a6t.forEach(t),zcr=r(zSe," (CamemBERT model)"),zSe.forEach(t),Wcr=i(D),gT=n(D,"LI",{});var WSe=s(gT);Ube=n(WSe,"STRONG",{});var n6t=s(Ube);Qcr=r(n6t,"clip"),n6t.forEach(t),Hcr=r(WSe," \u2014 "),LW=n(WSe,"A",{href:!0});var s6t=s(LW);Ucr=r(s6t,"TFCLIPModel"),s6t.forEach(t),Jcr=r(WSe," (CLIP model)"),WSe.forEach(t),Ycr=i(D),hT=n(D,"LI",{});var QSe=s(hT);Jbe=n(QSe,"STRONG",{});var l6t=s(Jbe);Kcr=r(l6t,"convbert"),l6t.forEach(t),Zcr=r(QSe," \u2014 "),xW=n(QSe,"A",{href:!0});var i6t=s(xW);efr=r(i6t,"TFConvBertModel"),i6t.forEach(t),ofr=r(QSe," (ConvBERT model)"),QSe.forEach(t),rfr=i(D),pT=n(D,"LI",{});var HSe=s(pT);Ybe=n(HSe,"STRONG",{});var d6t=s(Ybe);tfr=r(d6t,"convnext"),d6t.forEach(t),afr=r(HSe," \u2014 "),$W=n(HSe,"A",{href:!0});var c6t=s($W);nfr=r(c6t,"TFConvNextModel"),c6t.forEach(t),sfr=r(HSe," (ConvNext model)"),HSe.forEach(t),lfr=i(D),_T=n(D,"LI",{});var USe=s(_T);Kbe=n(USe,"STRONG",{});var f6t=s(Kbe);ifr=r(f6t,"ctrl"),f6t.forEach(t),dfr=r(USe," \u2014 "),kW=n(USe,"A",{href:!0});var m6t=s(kW);cfr=r(m6t,"TFCTRLModel"),m6t.forEach(t),ffr=r(USe," (CTRL model)"),USe.forEach(t),mfr=i(D),uT=n(D,"LI",{});var JSe=s(uT);Zbe=n(JSe,"STRONG",{});var g6t=s(Zbe);gfr=r(g6t,"data2vec-vision"),g6t.forEach(t),hfr=r(JSe," \u2014 "),SW=n(JSe,"A",{href:!0});var h6t=s(SW);pfr=r(h6t,"TFData2VecVisionModel"),h6t.forEach(t),_fr=r(JSe," (Data2VecVision model)"),JSe.forEach(t),ufr=i(D),bT=n(D,"LI",{});var YSe=s(bT);e2e=n(YSe,"STRONG",{});var p6t=s(e2e);bfr=r(p6t,"deberta"),p6t.forEach(t),vfr=r(YSe," \u2014 "),RW=n(YSe,"A",{href:!0});var _6t=s(RW);Ffr=r(_6t,"TFDebertaModel"),_6t.forEach(t),Tfr=r(YSe," (DeBERTa model)"),YSe.forEach(t),Mfr=i(D),vT=n(D,"LI",{});var KSe=s(vT);o2e=n(KSe,"STRONG",{});var u6t=s(o2e);Efr=r(u6t,"deberta-v2"),u6t.forEach(t),Cfr=r(KSe," \u2014 "),PW=n(KSe,"A",{href:!0});var b6t=s(PW);wfr=r(b6t,"TFDebertaV2Model"),b6t.forEach(t),Afr=r(KSe," (DeBERTa-v2 model)"),KSe.forEach(t),yfr=i(D),FT=n(D,"LI",{});var ZSe=s(FT);r2e=n(ZSe,"STRONG",{});var v6t=s(r2e);Lfr=r(v6t,"distilbert"),v6t.forEach(t),xfr=r(ZSe," \u2014 "),BW=n(ZSe,"A",{href:!0});var F6t=s(BW);$fr=r(F6t,"TFDistilBertModel"),F6t.forEach(t),kfr=r(ZSe," (DistilBERT model)"),ZSe.forEach(t),Sfr=i(D),TT=n(D,"LI",{});var eRe=s(TT);t2e=n(eRe,"STRONG",{});var T6t=s(t2e);Rfr=r(T6t,"dpr"),T6t.forEach(t),Pfr=r(eRe," \u2014 "),IW=n(eRe,"A",{href:!0});var M6t=s(IW);Bfr=r(M6t,"TFDPRQuestionEncoder"),M6t.forEach(t),Ifr=r(eRe," (DPR model)"),eRe.forEach(t),Nfr=i(D),MT=n(D,"LI",{});var oRe=s(MT);a2e=n(oRe,"STRONG",{});var E6t=s(a2e);qfr=r(E6t,"electra"),E6t.forEach(t),jfr=r(oRe," \u2014 "),NW=n(oRe,"A",{href:!0});var C6t=s(NW);Dfr=r(C6t,"TFElectraModel"),C6t.forEach(t),Gfr=r(oRe," (ELECTRA model)"),oRe.forEach(t),Ofr=i(D),ET=n(D,"LI",{});var rRe=s(ET);n2e=n(rRe,"STRONG",{});var w6t=s(n2e);Vfr=r(w6t,"flaubert"),w6t.forEach(t),Xfr=r(rRe," \u2014 "),qW=n(rRe,"A",{href:!0});var A6t=s(qW);zfr=r(A6t,"TFFlaubertModel"),A6t.forEach(t),Wfr=r(rRe," (FlauBERT model)"),rRe.forEach(t),Qfr=i(D),Ns=n(D,"LI",{});var Y$=s(Ns);s2e=n(Y$,"STRONG",{});var y6t=s(s2e);Hfr=r(y6t,"funnel"),y6t.forEach(t),Ufr=r(Y$," \u2014 "),jW=n(Y$,"A",{href:!0});var L6t=s(jW);Jfr=r(L6t,"TFFunnelModel"),L6t.forEach(t),Yfr=r(Y$," or "),DW=n(Y$,"A",{href:!0});var x6t=s(DW);Kfr=r(x6t,"TFFunnelBaseModel"),x6t.forEach(t),Zfr=r(Y$," (Funnel Transformer model)"),Y$.forEach(t),emr=i(D),CT=n(D,"LI",{});var tRe=s(CT);l2e=n(tRe,"STRONG",{});var $6t=s(l2e);omr=r($6t,"gpt2"),$6t.forEach(t),rmr=r(tRe," \u2014 "),GW=n(tRe,"A",{href:!0});var k6t=s(GW);tmr=r(k6t,"TFGPT2Model"),k6t.forEach(t),amr=r(tRe," (OpenAI GPT-2 model)"),tRe.forEach(t),nmr=i(D),wT=n(D,"LI",{});var aRe=s(wT);i2e=n(aRe,"STRONG",{});var S6t=s(i2e);smr=r(S6t,"gptj"),S6t.forEach(t),lmr=r(aRe," \u2014 "),OW=n(aRe,"A",{href:!0});var R6t=s(OW);imr=r(R6t,"TFGPTJModel"),R6t.forEach(t),dmr=r(aRe," (GPT-J model)"),aRe.forEach(t),cmr=i(D),AT=n(D,"LI",{});var nRe=s(AT);d2e=n(nRe,"STRONG",{});var P6t=s(d2e);fmr=r(P6t,"hubert"),P6t.forEach(t),mmr=r(nRe," \u2014 "),VW=n(nRe,"A",{href:!0});var B6t=s(VW);gmr=r(B6t,"TFHubertModel"),B6t.forEach(t),hmr=r(nRe," (Hubert model)"),nRe.forEach(t),pmr=i(D),yT=n(D,"LI",{});var sRe=s(yT);c2e=n(sRe,"STRONG",{});var I6t=s(c2e);_mr=r(I6t,"layoutlm"),I6t.forEach(t),umr=r(sRe," \u2014 "),XW=n(sRe,"A",{href:!0});var N6t=s(XW);bmr=r(N6t,"TFLayoutLMModel"),N6t.forEach(t),vmr=r(sRe," (LayoutLM model)"),sRe.forEach(t),Fmr=i(D),LT=n(D,"LI",{});var lRe=s(LT);f2e=n(lRe,"STRONG",{});var q6t=s(f2e);Tmr=r(q6t,"led"),q6t.forEach(t),Mmr=r(lRe," \u2014 "),zW=n(lRe,"A",{href:!0});var j6t=s(zW);Emr=r(j6t,"TFLEDModel"),j6t.forEach(t),Cmr=r(lRe," (LED model)"),lRe.forEach(t),wmr=i(D),xT=n(D,"LI",{});var iRe=s(xT);m2e=n(iRe,"STRONG",{});var D6t=s(m2e);Amr=r(D6t,"longformer"),D6t.forEach(t),ymr=r(iRe," \u2014 "),WW=n(iRe,"A",{href:!0});var G6t=s(WW);Lmr=r(G6t,"TFLongformerModel"),G6t.forEach(t),xmr=r(iRe," (Longformer model)"),iRe.forEach(t),$mr=i(D),$T=n(D,"LI",{});var dRe=s($T);g2e=n(dRe,"STRONG",{});var O6t=s(g2e);kmr=r(O6t,"lxmert"),O6t.forEach(t),Smr=r(dRe," \u2014 "),QW=n(dRe,"A",{href:!0});var V6t=s(QW);Rmr=r(V6t,"TFLxmertModel"),V6t.forEach(t),Pmr=r(dRe," (LXMERT model)"),dRe.forEach(t),Bmr=i(D),kT=n(D,"LI",{});var cRe=s(kT);h2e=n(cRe,"STRONG",{});var X6t=s(h2e);Imr=r(X6t,"marian"),X6t.forEach(t),Nmr=r(cRe," \u2014 "),HW=n(cRe,"A",{href:!0});var z6t=s(HW);qmr=r(z6t,"TFMarianModel"),z6t.forEach(t),jmr=r(cRe," (Marian model)"),cRe.forEach(t),Dmr=i(D),ST=n(D,"LI",{});var fRe=s(ST);p2e=n(fRe,"STRONG",{});var W6t=s(p2e);Gmr=r(W6t,"mbart"),W6t.forEach(t),Omr=r(fRe," \u2014 "),UW=n(fRe,"A",{href:!0});var Q6t=s(UW);Vmr=r(Q6t,"TFMBartModel"),Q6t.forEach(t),Xmr=r(fRe," (mBART model)"),fRe.forEach(t),zmr=i(D),RT=n(D,"LI",{});var mRe=s(RT);_2e=n(mRe,"STRONG",{});var H6t=s(_2e);Wmr=r(H6t,"mobilebert"),H6t.forEach(t),Qmr=r(mRe," \u2014 "),JW=n(mRe,"A",{href:!0});var U6t=s(JW);Hmr=r(U6t,"TFMobileBertModel"),U6t.forEach(t),Umr=r(mRe," (MobileBERT model)"),mRe.forEach(t),Jmr=i(D),PT=n(D,"LI",{});var gRe=s(PT);u2e=n(gRe,"STRONG",{});var J6t=s(u2e);Ymr=r(J6t,"mpnet"),J6t.forEach(t),Kmr=r(gRe," \u2014 "),YW=n(gRe,"A",{href:!0});var Y6t=s(YW);Zmr=r(Y6t,"TFMPNetModel"),Y6t.forEach(t),egr=r(gRe," (MPNet model)"),gRe.forEach(t),ogr=i(D),BT=n(D,"LI",{});var hRe=s(BT);b2e=n(hRe,"STRONG",{});var K6t=s(b2e);rgr=r(K6t,"mt5"),K6t.forEach(t),tgr=r(hRe," \u2014 "),KW=n(hRe,"A",{href:!0});var Z6t=s(KW);agr=r(Z6t,"TFMT5Model"),Z6t.forEach(t),ngr=r(hRe," (mT5 model)"),hRe.forEach(t),sgr=i(D),IT=n(D,"LI",{});var pRe=s(IT);v2e=n(pRe,"STRONG",{});var eTt=s(v2e);lgr=r(eTt,"openai-gpt"),eTt.forEach(t),igr=r(pRe," \u2014 "),ZW=n(pRe,"A",{href:!0});var oTt=s(ZW);dgr=r(oTt,"TFOpenAIGPTModel"),oTt.forEach(t),cgr=r(pRe," (OpenAI GPT model)"),pRe.forEach(t),fgr=i(D),NT=n(D,"LI",{});var _Re=s(NT);F2e=n(_Re,"STRONG",{});var rTt=s(F2e);mgr=r(rTt,"pegasus"),rTt.forEach(t),ggr=r(_Re," \u2014 "),eQ=n(_Re,"A",{href:!0});var tTt=s(eQ);hgr=r(tTt,"TFPegasusModel"),tTt.forEach(t),pgr=r(_Re," (Pegasus model)"),_Re.forEach(t),_gr=i(D),qT=n(D,"LI",{});var uRe=s(qT);T2e=n(uRe,"STRONG",{});var aTt=s(T2e);ugr=r(aTt,"rembert"),aTt.forEach(t),bgr=r(uRe," \u2014 "),oQ=n(uRe,"A",{href:!0});var nTt=s(oQ);vgr=r(nTt,"TFRemBertModel"),nTt.forEach(t),Fgr=r(uRe," (RemBERT model)"),uRe.forEach(t),Tgr=i(D),jT=n(D,"LI",{});var bRe=s(jT);M2e=n(bRe,"STRONG",{});var sTt=s(M2e);Mgr=r(sTt,"roberta"),sTt.forEach(t),Egr=r(bRe," \u2014 "),rQ=n(bRe,"A",{href:!0});var lTt=s(rQ);Cgr=r(lTt,"TFRobertaModel"),lTt.forEach(t),wgr=r(bRe," (RoBERTa model)"),bRe.forEach(t),Agr=i(D),DT=n(D,"LI",{});var vRe=s(DT);E2e=n(vRe,"STRONG",{});var iTt=s(E2e);ygr=r(iTt,"roformer"),iTt.forEach(t),Lgr=r(vRe," \u2014 "),tQ=n(vRe,"A",{href:!0});var dTt=s(tQ);xgr=r(dTt,"TFRoFormerModel"),dTt.forEach(t),$gr=r(vRe," (RoFormer model)"),vRe.forEach(t),kgr=i(D),GT=n(D,"LI",{});var FRe=s(GT);C2e=n(FRe,"STRONG",{});var cTt=s(C2e);Sgr=r(cTt,"speech_to_text"),cTt.forEach(t),Rgr=r(FRe," \u2014 "),aQ=n(FRe,"A",{href:!0});var fTt=s(aQ);Pgr=r(fTt,"TFSpeech2TextModel"),fTt.forEach(t),Bgr=r(FRe," (Speech2Text model)"),FRe.forEach(t),Igr=i(D),OT=n(D,"LI",{});var TRe=s(OT);w2e=n(TRe,"STRONG",{});var mTt=s(w2e);Ngr=r(mTt,"swin"),mTt.forEach(t),qgr=r(TRe," \u2014 "),nQ=n(TRe,"A",{href:!0});var gTt=s(nQ);jgr=r(gTt,"TFSwinModel"),gTt.forEach(t),Dgr=r(TRe," (Swin model)"),TRe.forEach(t),Ggr=i(D),VT=n(D,"LI",{});var MRe=s(VT);A2e=n(MRe,"STRONG",{});var hTt=s(A2e);Ogr=r(hTt,"t5"),hTt.forEach(t),Vgr=r(MRe," \u2014 "),sQ=n(MRe,"A",{href:!0});var pTt=s(sQ);Xgr=r(pTt,"TFT5Model"),pTt.forEach(t),zgr=r(MRe," (T5 model)"),MRe.forEach(t),Wgr=i(D),XT=n(D,"LI",{});var ERe=s(XT);y2e=n(ERe,"STRONG",{});var _Tt=s(y2e);Qgr=r(_Tt,"tapas"),_Tt.forEach(t),Hgr=r(ERe," \u2014 "),lQ=n(ERe,"A",{href:!0});var uTt=s(lQ);Ugr=r(uTt,"TFTapasModel"),uTt.forEach(t),Jgr=r(ERe," (TAPAS model)"),ERe.forEach(t),Ygr=i(D),zT=n(D,"LI",{});var CRe=s(zT);L2e=n(CRe,"STRONG",{});var bTt=s(L2e);Kgr=r(bTt,"transfo-xl"),bTt.forEach(t),Zgr=r(CRe," \u2014 "),iQ=n(CRe,"A",{href:!0});var vTt=s(iQ);ehr=r(vTt,"TFTransfoXLModel"),vTt.forEach(t),ohr=r(CRe," (Transformer-XL model)"),CRe.forEach(t),rhr=i(D),WT=n(D,"LI",{});var wRe=s(WT);x2e=n(wRe,"STRONG",{});var FTt=s(x2e);thr=r(FTt,"vit"),FTt.forEach(t),ahr=r(wRe," \u2014 "),dQ=n(wRe,"A",{href:!0});var TTt=s(dQ);nhr=r(TTt,"TFViTModel"),TTt.forEach(t),shr=r(wRe," (ViT model)"),wRe.forEach(t),lhr=i(D),QT=n(D,"LI",{});var ARe=s(QT);$2e=n(ARe,"STRONG",{});var MTt=s($2e);ihr=r(MTt,"vit_mae"),MTt.forEach(t),dhr=r(ARe," \u2014 "),cQ=n(ARe,"A",{href:!0});var ETt=s(cQ);chr=r(ETt,"TFViTMAEModel"),ETt.forEach(t),fhr=r(ARe," (ViTMAE model)"),ARe.forEach(t),mhr=i(D),HT=n(D,"LI",{});var yRe=s(HT);k2e=n(yRe,"STRONG",{});var CTt=s(k2e);ghr=r(CTt,"wav2vec2"),CTt.forEach(t),hhr=r(yRe," \u2014 "),fQ=n(yRe,"A",{href:!0});var wTt=s(fQ);phr=r(wTt,"TFWav2Vec2Model"),wTt.forEach(t),_hr=r(yRe," (Wav2Vec2 model)"),yRe.forEach(t),uhr=i(D),UT=n(D,"LI",{});var LRe=s(UT);S2e=n(LRe,"STRONG",{});var ATt=s(S2e);bhr=r(ATt,"xlm"),ATt.forEach(t),vhr=r(LRe," \u2014 "),mQ=n(LRe,"A",{href:!0});var yTt=s(mQ);Fhr=r(yTt,"TFXLMModel"),yTt.forEach(t),Thr=r(LRe," (XLM model)"),LRe.forEach(t),Mhr=i(D),JT=n(D,"LI",{});var xRe=s(JT);R2e=n(xRe,"STRONG",{});var LTt=s(R2e);Ehr=r(LTt,"xlm-roberta"),LTt.forEach(t),Chr=r(xRe," \u2014 "),gQ=n(xRe,"A",{href:!0});var xTt=s(gQ);whr=r(xTt,"TFXLMRobertaModel"),xTt.forEach(t),Ahr=r(xRe," (XLM-RoBERTa model)"),xRe.forEach(t),yhr=i(D),YT=n(D,"LI",{});var $Re=s(YT);P2e=n($Re,"STRONG",{});var $Tt=s(P2e);Lhr=r($Tt,"xlnet"),$Tt.forEach(t),xhr=r($Re," \u2014 "),hQ=n($Re,"A",{href:!0});var kTt=s(hQ);$hr=r(kTt,"TFXLNetModel"),kTt.forEach(t),khr=r($Re," (XLNet model)"),$Re.forEach(t),D.forEach(t),Shr=i(pl),T(KT.$$.fragment,pl),pl.forEach(t),hl.forEach(t),$je=i(f),zd=n(f,"H2",{class:!0});var IGe=s(zd);ZT=n(IGe,"A",{id:!0,class:!0,href:!0});var STt=s(ZT);B2e=n(STt,"SPAN",{});var RTt=s(B2e);T(v8.$$.fragment,RTt),RTt.forEach(t),STt.forEach(t),Rhr=i(IGe),I2e=n(IGe,"SPAN",{});var PTt=s(I2e);Phr=r(PTt,"TFAutoModelForPreTraining"),PTt.forEach(t),IGe.forEach(t),kje=i(f),Ko=n(f,"DIV",{class:!0});var _l=s(Ko);T(F8.$$.fragment,_l),Bhr=i(_l),Wd=n(_l,"P",{});var Cee=s(Wd);Ihr=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pQ=n(Cee,"A",{href:!0});var BTt=s(pQ);Nhr=r(BTt,"from_pretrained()"),BTt.forEach(t),qhr=r(Cee," class method or the "),_Q=n(Cee,"A",{href:!0});var ITt=s(_Q);jhr=r(ITt,"from_config()"),ITt.forEach(t),Dhr=r(Cee,` class
method.`),Cee.forEach(t),Ghr=i(_l),T8=n(_l,"P",{});var NGe=s(T8);Ohr=r(NGe,"This class cannot be instantiated directly using "),N2e=n(NGe,"CODE",{});var NTt=s(N2e);Vhr=r(NTt,"__init__()"),NTt.forEach(t),Xhr=r(NGe," (throws an error)."),NGe.forEach(t),zhr=i(_l),Lt=n(_l,"DIV",{class:!0});var S0=s(Lt);T(M8.$$.fragment,S0),Whr=i(S0),q2e=n(S0,"P",{});var qTt=s(q2e);Qhr=r(qTt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),qTt.forEach(t),Hhr=i(S0),Qd=n(S0,"P",{});var wee=s(Qd);Uhr=r(wee,`Note:
Loading a model from its configuration file does `),j2e=n(wee,"STRONG",{});var jTt=s(j2e);Jhr=r(jTt,"not"),jTt.forEach(t),Yhr=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=n(wee,"A",{href:!0});var DTt=s(uQ);Khr=r(DTt,"from_pretrained()"),DTt.forEach(t),Zhr=r(wee," to load the model weights."),wee.forEach(t),epr=i(S0),T(e7.$$.fragment,S0),S0.forEach(t),opr=i(_l),Ar=n(_l,"DIV",{class:!0});var ul=s(Ar);T(E8.$$.fragment,ul),rpr=i(ul),D2e=n(ul,"P",{});var GTt=s(D2e);tpr=r(GTt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),GTt.forEach(t),apr=i(ul),Za=n(ul,"P",{});var R0=s(Za);npr=r(R0,"The model class to instantiate is selected based on the "),G2e=n(R0,"CODE",{});var OTt=s(G2e);spr=r(OTt,"model_type"),OTt.forEach(t),lpr=r(R0,` property of the config object (either
passed as an argument or loaded from `),O2e=n(R0,"CODE",{});var VTt=s(O2e);ipr=r(VTt,"pretrained_model_name_or_path"),VTt.forEach(t),dpr=r(R0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V2e=n(R0,"CODE",{});var XTt=s(V2e);cpr=r(XTt,"pretrained_model_name_or_path"),XTt.forEach(t),fpr=r(R0,":"),R0.forEach(t),mpr=i(ul),se=n(ul,"UL",{});var le=s(se);o7=n(le,"LI",{});var kRe=s(o7);X2e=n(kRe,"STRONG",{});var zTt=s(X2e);gpr=r(zTt,"albert"),zTt.forEach(t),hpr=r(kRe," \u2014 "),bQ=n(kRe,"A",{href:!0});var WTt=s(bQ);ppr=r(WTt,"TFAlbertForPreTraining"),WTt.forEach(t),_pr=r(kRe," (ALBERT model)"),kRe.forEach(t),upr=i(le),r7=n(le,"LI",{});var SRe=s(r7);z2e=n(SRe,"STRONG",{});var QTt=s(z2e);bpr=r(QTt,"bart"),QTt.forEach(t),vpr=r(SRe," \u2014 "),vQ=n(SRe,"A",{href:!0});var HTt=s(vQ);Fpr=r(HTt,"TFBartForConditionalGeneration"),HTt.forEach(t),Tpr=r(SRe," (BART model)"),SRe.forEach(t),Mpr=i(le),t7=n(le,"LI",{});var RRe=s(t7);W2e=n(RRe,"STRONG",{});var UTt=s(W2e);Epr=r(UTt,"bert"),UTt.forEach(t),Cpr=r(RRe," \u2014 "),FQ=n(RRe,"A",{href:!0});var JTt=s(FQ);wpr=r(JTt,"TFBertForPreTraining"),JTt.forEach(t),Apr=r(RRe," (BERT model)"),RRe.forEach(t),ypr=i(le),a7=n(le,"LI",{});var PRe=s(a7);Q2e=n(PRe,"STRONG",{});var YTt=s(Q2e);Lpr=r(YTt,"camembert"),YTt.forEach(t),xpr=r(PRe," \u2014 "),TQ=n(PRe,"A",{href:!0});var KTt=s(TQ);$pr=r(KTt,"TFCamembertForMaskedLM"),KTt.forEach(t),kpr=r(PRe," (CamemBERT model)"),PRe.forEach(t),Spr=i(le),n7=n(le,"LI",{});var BRe=s(n7);H2e=n(BRe,"STRONG",{});var ZTt=s(H2e);Rpr=r(ZTt,"ctrl"),ZTt.forEach(t),Ppr=r(BRe," \u2014 "),MQ=n(BRe,"A",{href:!0});var e7t=s(MQ);Bpr=r(e7t,"TFCTRLLMHeadModel"),e7t.forEach(t),Ipr=r(BRe," (CTRL model)"),BRe.forEach(t),Npr=i(le),s7=n(le,"LI",{});var IRe=s(s7);U2e=n(IRe,"STRONG",{});var o7t=s(U2e);qpr=r(o7t,"distilbert"),o7t.forEach(t),jpr=r(IRe," \u2014 "),EQ=n(IRe,"A",{href:!0});var r7t=s(EQ);Dpr=r(r7t,"TFDistilBertForMaskedLM"),r7t.forEach(t),Gpr=r(IRe," (DistilBERT model)"),IRe.forEach(t),Opr=i(le),l7=n(le,"LI",{});var NRe=s(l7);J2e=n(NRe,"STRONG",{});var t7t=s(J2e);Vpr=r(t7t,"electra"),t7t.forEach(t),Xpr=r(NRe," \u2014 "),CQ=n(NRe,"A",{href:!0});var a7t=s(CQ);zpr=r(a7t,"TFElectraForPreTraining"),a7t.forEach(t),Wpr=r(NRe," (ELECTRA model)"),NRe.forEach(t),Qpr=i(le),i7=n(le,"LI",{});var qRe=s(i7);Y2e=n(qRe,"STRONG",{});var n7t=s(Y2e);Hpr=r(n7t,"flaubert"),n7t.forEach(t),Upr=r(qRe," \u2014 "),wQ=n(qRe,"A",{href:!0});var s7t=s(wQ);Jpr=r(s7t,"TFFlaubertWithLMHeadModel"),s7t.forEach(t),Ypr=r(qRe," (FlauBERT model)"),qRe.forEach(t),Kpr=i(le),d7=n(le,"LI",{});var jRe=s(d7);K2e=n(jRe,"STRONG",{});var l7t=s(K2e);Zpr=r(l7t,"funnel"),l7t.forEach(t),e_r=r(jRe," \u2014 "),AQ=n(jRe,"A",{href:!0});var i7t=s(AQ);o_r=r(i7t,"TFFunnelForPreTraining"),i7t.forEach(t),r_r=r(jRe," (Funnel Transformer model)"),jRe.forEach(t),t_r=i(le),c7=n(le,"LI",{});var DRe=s(c7);Z2e=n(DRe,"STRONG",{});var d7t=s(Z2e);a_r=r(d7t,"gpt2"),d7t.forEach(t),n_r=r(DRe," \u2014 "),yQ=n(DRe,"A",{href:!0});var c7t=s(yQ);s_r=r(c7t,"TFGPT2LMHeadModel"),c7t.forEach(t),l_r=r(DRe," (OpenAI GPT-2 model)"),DRe.forEach(t),i_r=i(le),f7=n(le,"LI",{});var GRe=s(f7);e4e=n(GRe,"STRONG",{});var f7t=s(e4e);d_r=r(f7t,"layoutlm"),f7t.forEach(t),c_r=r(GRe," \u2014 "),LQ=n(GRe,"A",{href:!0});var m7t=s(LQ);f_r=r(m7t,"TFLayoutLMForMaskedLM"),m7t.forEach(t),m_r=r(GRe," (LayoutLM model)"),GRe.forEach(t),g_r=i(le),m7=n(le,"LI",{});var ORe=s(m7);o4e=n(ORe,"STRONG",{});var g7t=s(o4e);h_r=r(g7t,"lxmert"),g7t.forEach(t),p_r=r(ORe," \u2014 "),xQ=n(ORe,"A",{href:!0});var h7t=s(xQ);__r=r(h7t,"TFLxmertForPreTraining"),h7t.forEach(t),u_r=r(ORe," (LXMERT model)"),ORe.forEach(t),b_r=i(le),g7=n(le,"LI",{});var VRe=s(g7);r4e=n(VRe,"STRONG",{});var p7t=s(r4e);v_r=r(p7t,"mobilebert"),p7t.forEach(t),F_r=r(VRe," \u2014 "),$Q=n(VRe,"A",{href:!0});var _7t=s($Q);T_r=r(_7t,"TFMobileBertForPreTraining"),_7t.forEach(t),M_r=r(VRe," (MobileBERT model)"),VRe.forEach(t),E_r=i(le),h7=n(le,"LI",{});var XRe=s(h7);t4e=n(XRe,"STRONG",{});var u7t=s(t4e);C_r=r(u7t,"mpnet"),u7t.forEach(t),w_r=r(XRe," \u2014 "),kQ=n(XRe,"A",{href:!0});var b7t=s(kQ);A_r=r(b7t,"TFMPNetForMaskedLM"),b7t.forEach(t),y_r=r(XRe," (MPNet model)"),XRe.forEach(t),L_r=i(le),p7=n(le,"LI",{});var zRe=s(p7);a4e=n(zRe,"STRONG",{});var v7t=s(a4e);x_r=r(v7t,"openai-gpt"),v7t.forEach(t),$_r=r(zRe," \u2014 "),SQ=n(zRe,"A",{href:!0});var F7t=s(SQ);k_r=r(F7t,"TFOpenAIGPTLMHeadModel"),F7t.forEach(t),S_r=r(zRe," (OpenAI GPT model)"),zRe.forEach(t),R_r=i(le),_7=n(le,"LI",{});var WRe=s(_7);n4e=n(WRe,"STRONG",{});var T7t=s(n4e);P_r=r(T7t,"roberta"),T7t.forEach(t),B_r=r(WRe," \u2014 "),RQ=n(WRe,"A",{href:!0});var M7t=s(RQ);I_r=r(M7t,"TFRobertaForMaskedLM"),M7t.forEach(t),N_r=r(WRe," (RoBERTa model)"),WRe.forEach(t),q_r=i(le),u7=n(le,"LI",{});var QRe=s(u7);s4e=n(QRe,"STRONG",{});var E7t=s(s4e);j_r=r(E7t,"t5"),E7t.forEach(t),D_r=r(QRe," \u2014 "),PQ=n(QRe,"A",{href:!0});var C7t=s(PQ);G_r=r(C7t,"TFT5ForConditionalGeneration"),C7t.forEach(t),O_r=r(QRe," (T5 model)"),QRe.forEach(t),V_r=i(le),b7=n(le,"LI",{});var HRe=s(b7);l4e=n(HRe,"STRONG",{});var w7t=s(l4e);X_r=r(w7t,"tapas"),w7t.forEach(t),z_r=r(HRe," \u2014 "),BQ=n(HRe,"A",{href:!0});var A7t=s(BQ);W_r=r(A7t,"TFTapasForMaskedLM"),A7t.forEach(t),Q_r=r(HRe," (TAPAS model)"),HRe.forEach(t),H_r=i(le),v7=n(le,"LI",{});var URe=s(v7);i4e=n(URe,"STRONG",{});var y7t=s(i4e);U_r=r(y7t,"transfo-xl"),y7t.forEach(t),J_r=r(URe," \u2014 "),IQ=n(URe,"A",{href:!0});var L7t=s(IQ);Y_r=r(L7t,"TFTransfoXLLMHeadModel"),L7t.forEach(t),K_r=r(URe," (Transformer-XL model)"),URe.forEach(t),Z_r=i(le),F7=n(le,"LI",{});var JRe=s(F7);d4e=n(JRe,"STRONG",{});var x7t=s(d4e);eur=r(x7t,"vit_mae"),x7t.forEach(t),our=r(JRe," \u2014 "),NQ=n(JRe,"A",{href:!0});var $7t=s(NQ);rur=r($7t,"TFViTMAEForPreTraining"),$7t.forEach(t),tur=r(JRe," (ViTMAE model)"),JRe.forEach(t),aur=i(le),T7=n(le,"LI",{});var YRe=s(T7);c4e=n(YRe,"STRONG",{});var k7t=s(c4e);nur=r(k7t,"xlm"),k7t.forEach(t),sur=r(YRe," \u2014 "),qQ=n(YRe,"A",{href:!0});var S7t=s(qQ);lur=r(S7t,"TFXLMWithLMHeadModel"),S7t.forEach(t),iur=r(YRe," (XLM model)"),YRe.forEach(t),dur=i(le),M7=n(le,"LI",{});var KRe=s(M7);f4e=n(KRe,"STRONG",{});var R7t=s(f4e);cur=r(R7t,"xlm-roberta"),R7t.forEach(t),fur=r(KRe," \u2014 "),jQ=n(KRe,"A",{href:!0});var P7t=s(jQ);mur=r(P7t,"TFXLMRobertaForMaskedLM"),P7t.forEach(t),gur=r(KRe," (XLM-RoBERTa model)"),KRe.forEach(t),hur=i(le),E7=n(le,"LI",{});var ZRe=s(E7);m4e=n(ZRe,"STRONG",{});var B7t=s(m4e);pur=r(B7t,"xlnet"),B7t.forEach(t),_ur=r(ZRe," \u2014 "),DQ=n(ZRe,"A",{href:!0});var I7t=s(DQ);uur=r(I7t,"TFXLNetLMHeadModel"),I7t.forEach(t),bur=r(ZRe," (XLNet model)"),ZRe.forEach(t),le.forEach(t),vur=i(ul),T(C7.$$.fragment,ul),ul.forEach(t),_l.forEach(t),Sje=i(f),Hd=n(f,"H2",{class:!0});var qGe=s(Hd);w7=n(qGe,"A",{id:!0,class:!0,href:!0});var N7t=s(w7);g4e=n(N7t,"SPAN",{});var q7t=s(g4e);T(C8.$$.fragment,q7t),q7t.forEach(t),N7t.forEach(t),Fur=i(qGe),h4e=n(qGe,"SPAN",{});var j7t=s(h4e);Tur=r(j7t,"TFAutoModelForCausalLM"),j7t.forEach(t),qGe.forEach(t),Rje=i(f),Zo=n(f,"DIV",{class:!0});var bl=s(Zo);T(w8.$$.fragment,bl),Mur=i(bl),Ud=n(bl,"P",{});var Aee=s(Ud);Eur=r(Aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),GQ=n(Aee,"A",{href:!0});var D7t=s(GQ);Cur=r(D7t,"from_pretrained()"),D7t.forEach(t),wur=r(Aee," class method or the "),OQ=n(Aee,"A",{href:!0});var G7t=s(OQ);Aur=r(G7t,"from_config()"),G7t.forEach(t),yur=r(Aee,` class
method.`),Aee.forEach(t),Lur=i(bl),A8=n(bl,"P",{});var jGe=s(A8);xur=r(jGe,"This class cannot be instantiated directly using "),p4e=n(jGe,"CODE",{});var O7t=s(p4e);$ur=r(O7t,"__init__()"),O7t.forEach(t),kur=r(jGe," (throws an error)."),jGe.forEach(t),Sur=i(bl),xt=n(bl,"DIV",{class:!0});var P0=s(xt);T(y8.$$.fragment,P0),Rur=i(P0),_4e=n(P0,"P",{});var V7t=s(_4e);Pur=r(V7t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),V7t.forEach(t),Bur=i(P0),Jd=n(P0,"P",{});var yee=s(Jd);Iur=r(yee,`Note:
Loading a model from its configuration file does `),u4e=n(yee,"STRONG",{});var X7t=s(u4e);Nur=r(X7t,"not"),X7t.forEach(t),qur=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),VQ=n(yee,"A",{href:!0});var z7t=s(VQ);jur=r(z7t,"from_pretrained()"),z7t.forEach(t),Dur=r(yee," to load the model weights."),yee.forEach(t),Gur=i(P0),T(A7.$$.fragment,P0),P0.forEach(t),Our=i(bl),yr=n(bl,"DIV",{class:!0});var vl=s(yr);T(L8.$$.fragment,vl),Vur=i(vl),b4e=n(vl,"P",{});var W7t=s(b4e);Xur=r(W7t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),W7t.forEach(t),zur=i(vl),en=n(vl,"P",{});var B0=s(en);Wur=r(B0,"The model class to instantiate is selected based on the "),v4e=n(B0,"CODE",{});var Q7t=s(v4e);Qur=r(Q7t,"model_type"),Q7t.forEach(t),Hur=r(B0,` property of the config object (either
passed as an argument or loaded from `),F4e=n(B0,"CODE",{});var H7t=s(F4e);Uur=r(H7t,"pretrained_model_name_or_path"),H7t.forEach(t),Jur=r(B0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T4e=n(B0,"CODE",{});var U7t=s(T4e);Yur=r(U7t,"pretrained_model_name_or_path"),U7t.forEach(t),Kur=r(B0,":"),B0.forEach(t),Zur=i(vl),Me=n(vl,"UL",{});var Ce=s(Me);y7=n(Ce,"LI",{});var ePe=s(y7);M4e=n(ePe,"STRONG",{});var J7t=s(M4e);e1r=r(J7t,"bert"),J7t.forEach(t),o1r=r(ePe," \u2014 "),XQ=n(ePe,"A",{href:!0});var Y7t=s(XQ);r1r=r(Y7t,"TFBertLMHeadModel"),Y7t.forEach(t),t1r=r(ePe," (BERT model)"),ePe.forEach(t),a1r=i(Ce),L7=n(Ce,"LI",{});var oPe=s(L7);E4e=n(oPe,"STRONG",{});var K7t=s(E4e);n1r=r(K7t,"camembert"),K7t.forEach(t),s1r=r(oPe," \u2014 "),zQ=n(oPe,"A",{href:!0});var Z7t=s(zQ);l1r=r(Z7t,"TFCamembertForCausalLM"),Z7t.forEach(t),i1r=r(oPe," (CamemBERT model)"),oPe.forEach(t),d1r=i(Ce),x7=n(Ce,"LI",{});var rPe=s(x7);C4e=n(rPe,"STRONG",{});var eMt=s(C4e);c1r=r(eMt,"ctrl"),eMt.forEach(t),f1r=r(rPe," \u2014 "),WQ=n(rPe,"A",{href:!0});var oMt=s(WQ);m1r=r(oMt,"TFCTRLLMHeadModel"),oMt.forEach(t),g1r=r(rPe," (CTRL model)"),rPe.forEach(t),h1r=i(Ce),$7=n(Ce,"LI",{});var tPe=s($7);w4e=n(tPe,"STRONG",{});var rMt=s(w4e);p1r=r(rMt,"gpt2"),rMt.forEach(t),_1r=r(tPe," \u2014 "),QQ=n(tPe,"A",{href:!0});var tMt=s(QQ);u1r=r(tMt,"TFGPT2LMHeadModel"),tMt.forEach(t),b1r=r(tPe," (OpenAI GPT-2 model)"),tPe.forEach(t),v1r=i(Ce),k7=n(Ce,"LI",{});var aPe=s(k7);A4e=n(aPe,"STRONG",{});var aMt=s(A4e);F1r=r(aMt,"gptj"),aMt.forEach(t),T1r=r(aPe," \u2014 "),HQ=n(aPe,"A",{href:!0});var nMt=s(HQ);M1r=r(nMt,"TFGPTJForCausalLM"),nMt.forEach(t),E1r=r(aPe," (GPT-J model)"),aPe.forEach(t),C1r=i(Ce),S7=n(Ce,"LI",{});var nPe=s(S7);y4e=n(nPe,"STRONG",{});var sMt=s(y4e);w1r=r(sMt,"openai-gpt"),sMt.forEach(t),A1r=r(nPe," \u2014 "),UQ=n(nPe,"A",{href:!0});var lMt=s(UQ);y1r=r(lMt,"TFOpenAIGPTLMHeadModel"),lMt.forEach(t),L1r=r(nPe," (OpenAI GPT model)"),nPe.forEach(t),x1r=i(Ce),R7=n(Ce,"LI",{});var sPe=s(R7);L4e=n(sPe,"STRONG",{});var iMt=s(L4e);$1r=r(iMt,"rembert"),iMt.forEach(t),k1r=r(sPe," \u2014 "),JQ=n(sPe,"A",{href:!0});var dMt=s(JQ);S1r=r(dMt,"TFRemBertForCausalLM"),dMt.forEach(t),R1r=r(sPe," (RemBERT model)"),sPe.forEach(t),P1r=i(Ce),P7=n(Ce,"LI",{});var lPe=s(P7);x4e=n(lPe,"STRONG",{});var cMt=s(x4e);B1r=r(cMt,"roberta"),cMt.forEach(t),I1r=r(lPe," \u2014 "),YQ=n(lPe,"A",{href:!0});var fMt=s(YQ);N1r=r(fMt,"TFRobertaForCausalLM"),fMt.forEach(t),q1r=r(lPe," (RoBERTa model)"),lPe.forEach(t),j1r=i(Ce),B7=n(Ce,"LI",{});var iPe=s(B7);$4e=n(iPe,"STRONG",{});var mMt=s($4e);D1r=r(mMt,"roformer"),mMt.forEach(t),G1r=r(iPe," \u2014 "),KQ=n(iPe,"A",{href:!0});var gMt=s(KQ);O1r=r(gMt,"TFRoFormerForCausalLM"),gMt.forEach(t),V1r=r(iPe," (RoFormer model)"),iPe.forEach(t),X1r=i(Ce),I7=n(Ce,"LI",{});var dPe=s(I7);k4e=n(dPe,"STRONG",{});var hMt=s(k4e);z1r=r(hMt,"transfo-xl"),hMt.forEach(t),W1r=r(dPe," \u2014 "),ZQ=n(dPe,"A",{href:!0});var pMt=s(ZQ);Q1r=r(pMt,"TFTransfoXLLMHeadModel"),pMt.forEach(t),H1r=r(dPe," (Transformer-XL model)"),dPe.forEach(t),U1r=i(Ce),N7=n(Ce,"LI",{});var cPe=s(N7);S4e=n(cPe,"STRONG",{});var _Mt=s(S4e);J1r=r(_Mt,"xlm"),_Mt.forEach(t),Y1r=r(cPe," \u2014 "),eH=n(cPe,"A",{href:!0});var uMt=s(eH);K1r=r(uMt,"TFXLMWithLMHeadModel"),uMt.forEach(t),Z1r=r(cPe," (XLM model)"),cPe.forEach(t),ebr=i(Ce),q7=n(Ce,"LI",{});var fPe=s(q7);R4e=n(fPe,"STRONG",{});var bMt=s(R4e);obr=r(bMt,"xlnet"),bMt.forEach(t),rbr=r(fPe," \u2014 "),oH=n(fPe,"A",{href:!0});var vMt=s(oH);tbr=r(vMt,"TFXLNetLMHeadModel"),vMt.forEach(t),abr=r(fPe," (XLNet model)"),fPe.forEach(t),Ce.forEach(t),nbr=i(vl),T(j7.$$.fragment,vl),vl.forEach(t),bl.forEach(t),Pje=i(f),Yd=n(f,"H2",{class:!0});var DGe=s(Yd);D7=n(DGe,"A",{id:!0,class:!0,href:!0});var FMt=s(D7);P4e=n(FMt,"SPAN",{});var TMt=s(P4e);T(x8.$$.fragment,TMt),TMt.forEach(t),FMt.forEach(t),sbr=i(DGe),B4e=n(DGe,"SPAN",{});var MMt=s(B4e);lbr=r(MMt,"TFAutoModelForImageClassification"),MMt.forEach(t),DGe.forEach(t),Bje=i(f),er=n(f,"DIV",{class:!0});var Fl=s(er);T($8.$$.fragment,Fl),ibr=i(Fl),Kd=n(Fl,"P",{});var Lee=s(Kd);dbr=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rH=n(Lee,"A",{href:!0});var EMt=s(rH);cbr=r(EMt,"from_pretrained()"),EMt.forEach(t),fbr=r(Lee," class method or the "),tH=n(Lee,"A",{href:!0});var CMt=s(tH);mbr=r(CMt,"from_config()"),CMt.forEach(t),gbr=r(Lee,` class
method.`),Lee.forEach(t),hbr=i(Fl),k8=n(Fl,"P",{});var GGe=s(k8);pbr=r(GGe,"This class cannot be instantiated directly using "),I4e=n(GGe,"CODE",{});var wMt=s(I4e);_br=r(wMt,"__init__()"),wMt.forEach(t),ubr=r(GGe," (throws an error)."),GGe.forEach(t),bbr=i(Fl),$t=n(Fl,"DIV",{class:!0});var I0=s($t);T(S8.$$.fragment,I0),vbr=i(I0),N4e=n(I0,"P",{});var AMt=s(N4e);Fbr=r(AMt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),AMt.forEach(t),Tbr=i(I0),Zd=n(I0,"P",{});var xee=s(Zd);Mbr=r(xee,`Note:
Loading a model from its configuration file does `),q4e=n(xee,"STRONG",{});var yMt=s(q4e);Ebr=r(yMt,"not"),yMt.forEach(t),Cbr=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),aH=n(xee,"A",{href:!0});var LMt=s(aH);wbr=r(LMt,"from_pretrained()"),LMt.forEach(t),Abr=r(xee," to load the model weights."),xee.forEach(t),ybr=i(I0),T(G7.$$.fragment,I0),I0.forEach(t),Lbr=i(Fl),Lr=n(Fl,"DIV",{class:!0});var Tl=s(Lr);T(R8.$$.fragment,Tl),xbr=i(Tl),j4e=n(Tl,"P",{});var xMt=s(j4e);$br=r(xMt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),xMt.forEach(t),kbr=i(Tl),on=n(Tl,"P",{});var N0=s(on);Sbr=r(N0,"The model class to instantiate is selected based on the "),D4e=n(N0,"CODE",{});var $Mt=s(D4e);Rbr=r($Mt,"model_type"),$Mt.forEach(t),Pbr=r(N0,` property of the config object (either
passed as an argument or loaded from `),G4e=n(N0,"CODE",{});var kMt=s(G4e);Bbr=r(kMt,"pretrained_model_name_or_path"),kMt.forEach(t),Ibr=r(N0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O4e=n(N0,"CODE",{});var SMt=s(O4e);Nbr=r(SMt,"pretrained_model_name_or_path"),SMt.forEach(t),qbr=r(N0,":"),N0.forEach(t),jbr=i(Tl),rn=n(Tl,"UL",{});var q0=s(rn);O7=n(q0,"LI",{});var mPe=s(O7);V4e=n(mPe,"STRONG",{});var RMt=s(V4e);Dbr=r(RMt,"convnext"),RMt.forEach(t),Gbr=r(mPe," \u2014 "),nH=n(mPe,"A",{href:!0});var PMt=s(nH);Obr=r(PMt,"TFConvNextForImageClassification"),PMt.forEach(t),Vbr=r(mPe," (ConvNext model)"),mPe.forEach(t),Xbr=i(q0),V7=n(q0,"LI",{});var gPe=s(V7);X4e=n(gPe,"STRONG",{});var BMt=s(X4e);zbr=r(BMt,"data2vec-vision"),BMt.forEach(t),Wbr=r(gPe," \u2014 "),sH=n(gPe,"A",{href:!0});var IMt=s(sH);Qbr=r(IMt,"TFData2VecVisionForImageClassification"),IMt.forEach(t),Hbr=r(gPe," (Data2VecVision model)"),gPe.forEach(t),Ubr=i(q0),X7=n(q0,"LI",{});var hPe=s(X7);z4e=n(hPe,"STRONG",{});var NMt=s(z4e);Jbr=r(NMt,"swin"),NMt.forEach(t),Ybr=r(hPe," \u2014 "),lH=n(hPe,"A",{href:!0});var qMt=s(lH);Kbr=r(qMt,"TFSwinForImageClassification"),qMt.forEach(t),Zbr=r(hPe," (Swin model)"),hPe.forEach(t),e2r=i(q0),z7=n(q0,"LI",{});var pPe=s(z7);W4e=n(pPe,"STRONG",{});var jMt=s(W4e);o2r=r(jMt,"vit"),jMt.forEach(t),r2r=r(pPe," \u2014 "),iH=n(pPe,"A",{href:!0});var DMt=s(iH);t2r=r(DMt,"TFViTForImageClassification"),DMt.forEach(t),a2r=r(pPe," (ViT model)"),pPe.forEach(t),q0.forEach(t),n2r=i(Tl),T(W7.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),Ije=i(f),ec=n(f,"H2",{class:!0});var OGe=s(ec);Q7=n(OGe,"A",{id:!0,class:!0,href:!0});var GMt=s(Q7);Q4e=n(GMt,"SPAN",{});var OMt=s(Q4e);T(P8.$$.fragment,OMt),OMt.forEach(t),GMt.forEach(t),s2r=i(OGe),H4e=n(OGe,"SPAN",{});var VMt=s(H4e);l2r=r(VMt,"TFAutoModelForMaskedLM"),VMt.forEach(t),OGe.forEach(t),Nje=i(f),or=n(f,"DIV",{class:!0});var Ml=s(or);T(B8.$$.fragment,Ml),i2r=i(Ml),oc=n(Ml,"P",{});var $ee=s(oc);d2r=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),dH=n($ee,"A",{href:!0});var XMt=s(dH);c2r=r(XMt,"from_pretrained()"),XMt.forEach(t),f2r=r($ee," class method or the "),cH=n($ee,"A",{href:!0});var zMt=s(cH);m2r=r(zMt,"from_config()"),zMt.forEach(t),g2r=r($ee,` class
method.`),$ee.forEach(t),h2r=i(Ml),I8=n(Ml,"P",{});var VGe=s(I8);p2r=r(VGe,"This class cannot be instantiated directly using "),U4e=n(VGe,"CODE",{});var WMt=s(U4e);_2r=r(WMt,"__init__()"),WMt.forEach(t),u2r=r(VGe," (throws an error)."),VGe.forEach(t),b2r=i(Ml),kt=n(Ml,"DIV",{class:!0});var j0=s(kt);T(N8.$$.fragment,j0),v2r=i(j0),J4e=n(j0,"P",{});var QMt=s(J4e);F2r=r(QMt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),QMt.forEach(t),T2r=i(j0),rc=n(j0,"P",{});var kee=s(rc);M2r=r(kee,`Note:
Loading a model from its configuration file does `),Y4e=n(kee,"STRONG",{});var HMt=s(Y4e);E2r=r(HMt,"not"),HMt.forEach(t),C2r=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=n(kee,"A",{href:!0});var UMt=s(fH);w2r=r(UMt,"from_pretrained()"),UMt.forEach(t),A2r=r(kee," to load the model weights."),kee.forEach(t),y2r=i(j0),T(H7.$$.fragment,j0),j0.forEach(t),L2r=i(Ml),xr=n(Ml,"DIV",{class:!0});var El=s(xr);T(q8.$$.fragment,El),x2r=i(El),K4e=n(El,"P",{});var JMt=s(K4e);$2r=r(JMt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),JMt.forEach(t),k2r=i(El),tn=n(El,"P",{});var D0=s(tn);S2r=r(D0,"The model class to instantiate is selected based on the "),Z4e=n(D0,"CODE",{});var YMt=s(Z4e);R2r=r(YMt,"model_type"),YMt.forEach(t),P2r=r(D0,` property of the config object (either
passed as an argument or loaded from `),eve=n(D0,"CODE",{});var KMt=s(eve);B2r=r(KMt,"pretrained_model_name_or_path"),KMt.forEach(t),I2r=r(D0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ove=n(D0,"CODE",{});var ZMt=s(ove);N2r=r(ZMt,"pretrained_model_name_or_path"),ZMt.forEach(t),q2r=r(D0,":"),D0.forEach(t),j2r=i(El),ie=n(El,"UL",{});var fe=s(ie);U7=n(fe,"LI",{});var _Pe=s(U7);rve=n(_Pe,"STRONG",{});var eEt=s(rve);D2r=r(eEt,"albert"),eEt.forEach(t),G2r=r(_Pe," \u2014 "),mH=n(_Pe,"A",{href:!0});var oEt=s(mH);O2r=r(oEt,"TFAlbertForMaskedLM"),oEt.forEach(t),V2r=r(_Pe," (ALBERT model)"),_Pe.forEach(t),X2r=i(fe),J7=n(fe,"LI",{});var uPe=s(J7);tve=n(uPe,"STRONG",{});var rEt=s(tve);z2r=r(rEt,"bert"),rEt.forEach(t),W2r=r(uPe," \u2014 "),gH=n(uPe,"A",{href:!0});var tEt=s(gH);Q2r=r(tEt,"TFBertForMaskedLM"),tEt.forEach(t),H2r=r(uPe," (BERT model)"),uPe.forEach(t),U2r=i(fe),Y7=n(fe,"LI",{});var bPe=s(Y7);ave=n(bPe,"STRONG",{});var aEt=s(ave);J2r=r(aEt,"camembert"),aEt.forEach(t),Y2r=r(bPe," \u2014 "),hH=n(bPe,"A",{href:!0});var nEt=s(hH);K2r=r(nEt,"TFCamembertForMaskedLM"),nEt.forEach(t),Z2r=r(bPe," (CamemBERT model)"),bPe.forEach(t),e4r=i(fe),K7=n(fe,"LI",{});var vPe=s(K7);nve=n(vPe,"STRONG",{});var sEt=s(nve);o4r=r(sEt,"convbert"),sEt.forEach(t),r4r=r(vPe," \u2014 "),pH=n(vPe,"A",{href:!0});var lEt=s(pH);t4r=r(lEt,"TFConvBertForMaskedLM"),lEt.forEach(t),a4r=r(vPe," (ConvBERT model)"),vPe.forEach(t),n4r=i(fe),Z7=n(fe,"LI",{});var FPe=s(Z7);sve=n(FPe,"STRONG",{});var iEt=s(sve);s4r=r(iEt,"deberta"),iEt.forEach(t),l4r=r(FPe," \u2014 "),_H=n(FPe,"A",{href:!0});var dEt=s(_H);i4r=r(dEt,"TFDebertaForMaskedLM"),dEt.forEach(t),d4r=r(FPe," (DeBERTa model)"),FPe.forEach(t),c4r=i(fe),eM=n(fe,"LI",{});var TPe=s(eM);lve=n(TPe,"STRONG",{});var cEt=s(lve);f4r=r(cEt,"deberta-v2"),cEt.forEach(t),m4r=r(TPe," \u2014 "),uH=n(TPe,"A",{href:!0});var fEt=s(uH);g4r=r(fEt,"TFDebertaV2ForMaskedLM"),fEt.forEach(t),h4r=r(TPe," (DeBERTa-v2 model)"),TPe.forEach(t),p4r=i(fe),oM=n(fe,"LI",{});var MPe=s(oM);ive=n(MPe,"STRONG",{});var mEt=s(ive);_4r=r(mEt,"distilbert"),mEt.forEach(t),u4r=r(MPe," \u2014 "),bH=n(MPe,"A",{href:!0});var gEt=s(bH);b4r=r(gEt,"TFDistilBertForMaskedLM"),gEt.forEach(t),v4r=r(MPe," (DistilBERT model)"),MPe.forEach(t),F4r=i(fe),rM=n(fe,"LI",{});var EPe=s(rM);dve=n(EPe,"STRONG",{});var hEt=s(dve);T4r=r(hEt,"electra"),hEt.forEach(t),M4r=r(EPe," \u2014 "),vH=n(EPe,"A",{href:!0});var pEt=s(vH);E4r=r(pEt,"TFElectraForMaskedLM"),pEt.forEach(t),C4r=r(EPe," (ELECTRA model)"),EPe.forEach(t),w4r=i(fe),tM=n(fe,"LI",{});var CPe=s(tM);cve=n(CPe,"STRONG",{});var _Et=s(cve);A4r=r(_Et,"flaubert"),_Et.forEach(t),y4r=r(CPe," \u2014 "),FH=n(CPe,"A",{href:!0});var uEt=s(FH);L4r=r(uEt,"TFFlaubertWithLMHeadModel"),uEt.forEach(t),x4r=r(CPe," (FlauBERT model)"),CPe.forEach(t),$4r=i(fe),aM=n(fe,"LI",{});var wPe=s(aM);fve=n(wPe,"STRONG",{});var bEt=s(fve);k4r=r(bEt,"funnel"),bEt.forEach(t),S4r=r(wPe," \u2014 "),TH=n(wPe,"A",{href:!0});var vEt=s(TH);R4r=r(vEt,"TFFunnelForMaskedLM"),vEt.forEach(t),P4r=r(wPe," (Funnel Transformer model)"),wPe.forEach(t),B4r=i(fe),nM=n(fe,"LI",{});var APe=s(nM);mve=n(APe,"STRONG",{});var FEt=s(mve);I4r=r(FEt,"layoutlm"),FEt.forEach(t),N4r=r(APe," \u2014 "),MH=n(APe,"A",{href:!0});var TEt=s(MH);q4r=r(TEt,"TFLayoutLMForMaskedLM"),TEt.forEach(t),j4r=r(APe," (LayoutLM model)"),APe.forEach(t),D4r=i(fe),sM=n(fe,"LI",{});var yPe=s(sM);gve=n(yPe,"STRONG",{});var MEt=s(gve);G4r=r(MEt,"longformer"),MEt.forEach(t),O4r=r(yPe," \u2014 "),EH=n(yPe,"A",{href:!0});var EEt=s(EH);V4r=r(EEt,"TFLongformerForMaskedLM"),EEt.forEach(t),X4r=r(yPe," (Longformer model)"),yPe.forEach(t),z4r=i(fe),lM=n(fe,"LI",{});var LPe=s(lM);hve=n(LPe,"STRONG",{});var CEt=s(hve);W4r=r(CEt,"mobilebert"),CEt.forEach(t),Q4r=r(LPe," \u2014 "),CH=n(LPe,"A",{href:!0});var wEt=s(CH);H4r=r(wEt,"TFMobileBertForMaskedLM"),wEt.forEach(t),U4r=r(LPe," (MobileBERT model)"),LPe.forEach(t),J4r=i(fe),iM=n(fe,"LI",{});var xPe=s(iM);pve=n(xPe,"STRONG",{});var AEt=s(pve);Y4r=r(AEt,"mpnet"),AEt.forEach(t),K4r=r(xPe," \u2014 "),wH=n(xPe,"A",{href:!0});var yEt=s(wH);Z4r=r(yEt,"TFMPNetForMaskedLM"),yEt.forEach(t),evr=r(xPe," (MPNet model)"),xPe.forEach(t),ovr=i(fe),dM=n(fe,"LI",{});var $Pe=s(dM);_ve=n($Pe,"STRONG",{});var LEt=s(_ve);rvr=r(LEt,"rembert"),LEt.forEach(t),tvr=r($Pe," \u2014 "),AH=n($Pe,"A",{href:!0});var xEt=s(AH);avr=r(xEt,"TFRemBertForMaskedLM"),xEt.forEach(t),nvr=r($Pe," (RemBERT model)"),$Pe.forEach(t),svr=i(fe),cM=n(fe,"LI",{});var kPe=s(cM);uve=n(kPe,"STRONG",{});var $Et=s(uve);lvr=r($Et,"roberta"),$Et.forEach(t),ivr=r(kPe," \u2014 "),yH=n(kPe,"A",{href:!0});var kEt=s(yH);dvr=r(kEt,"TFRobertaForMaskedLM"),kEt.forEach(t),cvr=r(kPe," (RoBERTa model)"),kPe.forEach(t),fvr=i(fe),fM=n(fe,"LI",{});var SPe=s(fM);bve=n(SPe,"STRONG",{});var SEt=s(bve);mvr=r(SEt,"roformer"),SEt.forEach(t),gvr=r(SPe," \u2014 "),LH=n(SPe,"A",{href:!0});var REt=s(LH);hvr=r(REt,"TFRoFormerForMaskedLM"),REt.forEach(t),pvr=r(SPe," (RoFormer model)"),SPe.forEach(t),_vr=i(fe),mM=n(fe,"LI",{});var RPe=s(mM);vve=n(RPe,"STRONG",{});var PEt=s(vve);uvr=r(PEt,"tapas"),PEt.forEach(t),bvr=r(RPe," \u2014 "),xH=n(RPe,"A",{href:!0});var BEt=s(xH);vvr=r(BEt,"TFTapasForMaskedLM"),BEt.forEach(t),Fvr=r(RPe," (TAPAS model)"),RPe.forEach(t),Tvr=i(fe),gM=n(fe,"LI",{});var PPe=s(gM);Fve=n(PPe,"STRONG",{});var IEt=s(Fve);Mvr=r(IEt,"xlm"),IEt.forEach(t),Evr=r(PPe," \u2014 "),$H=n(PPe,"A",{href:!0});var NEt=s($H);Cvr=r(NEt,"TFXLMWithLMHeadModel"),NEt.forEach(t),wvr=r(PPe," (XLM model)"),PPe.forEach(t),Avr=i(fe),hM=n(fe,"LI",{});var BPe=s(hM);Tve=n(BPe,"STRONG",{});var qEt=s(Tve);yvr=r(qEt,"xlm-roberta"),qEt.forEach(t),Lvr=r(BPe," \u2014 "),kH=n(BPe,"A",{href:!0});var jEt=s(kH);xvr=r(jEt,"TFXLMRobertaForMaskedLM"),jEt.forEach(t),$vr=r(BPe," (XLM-RoBERTa model)"),BPe.forEach(t),fe.forEach(t),kvr=i(El),T(pM.$$.fragment,El),El.forEach(t),Ml.forEach(t),qje=i(f),tc=n(f,"H2",{class:!0});var XGe=s(tc);_M=n(XGe,"A",{id:!0,class:!0,href:!0});var DEt=s(_M);Mve=n(DEt,"SPAN",{});var GEt=s(Mve);T(j8.$$.fragment,GEt),GEt.forEach(t),DEt.forEach(t),Svr=i(XGe),Eve=n(XGe,"SPAN",{});var OEt=s(Eve);Rvr=r(OEt,"TFAutoModelForSeq2SeqLM"),OEt.forEach(t),XGe.forEach(t),jje=i(f),rr=n(f,"DIV",{class:!0});var Cl=s(rr);T(D8.$$.fragment,Cl),Pvr=i(Cl),ac=n(Cl,"P",{});var See=s(ac);Bvr=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),SH=n(See,"A",{href:!0});var VEt=s(SH);Ivr=r(VEt,"from_pretrained()"),VEt.forEach(t),Nvr=r(See," class method or the "),RH=n(See,"A",{href:!0});var XEt=s(RH);qvr=r(XEt,"from_config()"),XEt.forEach(t),jvr=r(See,` class
method.`),See.forEach(t),Dvr=i(Cl),G8=n(Cl,"P",{});var zGe=s(G8);Gvr=r(zGe,"This class cannot be instantiated directly using "),Cve=n(zGe,"CODE",{});var zEt=s(Cve);Ovr=r(zEt,"__init__()"),zEt.forEach(t),Vvr=r(zGe," (throws an error)."),zGe.forEach(t),Xvr=i(Cl),St=n(Cl,"DIV",{class:!0});var G0=s(St);T(O8.$$.fragment,G0),zvr=i(G0),wve=n(G0,"P",{});var WEt=s(wve);Wvr=r(WEt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),WEt.forEach(t),Qvr=i(G0),nc=n(G0,"P",{});var Ree=s(nc);Hvr=r(Ree,`Note:
Loading a model from its configuration file does `),Ave=n(Ree,"STRONG",{});var QEt=s(Ave);Uvr=r(QEt,"not"),QEt.forEach(t),Jvr=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),PH=n(Ree,"A",{href:!0});var HEt=s(PH);Yvr=r(HEt,"from_pretrained()"),HEt.forEach(t),Kvr=r(Ree," to load the model weights."),Ree.forEach(t),Zvr=i(G0),T(uM.$$.fragment,G0),G0.forEach(t),eFr=i(Cl),$r=n(Cl,"DIV",{class:!0});var wl=s($r);T(V8.$$.fragment,wl),oFr=i(wl),yve=n(wl,"P",{});var UEt=s(yve);rFr=r(UEt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),UEt.forEach(t),tFr=i(wl),an=n(wl,"P",{});var O0=s(an);aFr=r(O0,"The model class to instantiate is selected based on the "),Lve=n(O0,"CODE",{});var JEt=s(Lve);nFr=r(JEt,"model_type"),JEt.forEach(t),sFr=r(O0,` property of the config object (either
passed as an argument or loaded from `),xve=n(O0,"CODE",{});var YEt=s(xve);lFr=r(YEt,"pretrained_model_name_or_path"),YEt.forEach(t),iFr=r(O0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ve=n(O0,"CODE",{});var KEt=s($ve);dFr=r(KEt,"pretrained_model_name_or_path"),KEt.forEach(t),cFr=r(O0,":"),O0.forEach(t),fFr=i(wl),ye=n(wl,"UL",{});var Be=s(ye);bM=n(Be,"LI",{});var IPe=s(bM);kve=n(IPe,"STRONG",{});var ZEt=s(kve);mFr=r(ZEt,"bart"),ZEt.forEach(t),gFr=r(IPe," \u2014 "),BH=n(IPe,"A",{href:!0});var eCt=s(BH);hFr=r(eCt,"TFBartForConditionalGeneration"),eCt.forEach(t),pFr=r(IPe," (BART model)"),IPe.forEach(t),_Fr=i(Be),vM=n(Be,"LI",{});var NPe=s(vM);Sve=n(NPe,"STRONG",{});var oCt=s(Sve);uFr=r(oCt,"blenderbot"),oCt.forEach(t),bFr=r(NPe," \u2014 "),IH=n(NPe,"A",{href:!0});var rCt=s(IH);vFr=r(rCt,"TFBlenderbotForConditionalGeneration"),rCt.forEach(t),FFr=r(NPe," (Blenderbot model)"),NPe.forEach(t),TFr=i(Be),FM=n(Be,"LI",{});var qPe=s(FM);Rve=n(qPe,"STRONG",{});var tCt=s(Rve);MFr=r(tCt,"blenderbot-small"),tCt.forEach(t),EFr=r(qPe," \u2014 "),NH=n(qPe,"A",{href:!0});var aCt=s(NH);CFr=r(aCt,"TFBlenderbotSmallForConditionalGeneration"),aCt.forEach(t),wFr=r(qPe," (BlenderbotSmall model)"),qPe.forEach(t),AFr=i(Be),TM=n(Be,"LI",{});var jPe=s(TM);Pve=n(jPe,"STRONG",{});var nCt=s(Pve);yFr=r(nCt,"encoder-decoder"),nCt.forEach(t),LFr=r(jPe," \u2014 "),qH=n(jPe,"A",{href:!0});var sCt=s(qH);xFr=r(sCt,"TFEncoderDecoderModel"),sCt.forEach(t),$Fr=r(jPe," (Encoder decoder model)"),jPe.forEach(t),kFr=i(Be),MM=n(Be,"LI",{});var DPe=s(MM);Bve=n(DPe,"STRONG",{});var lCt=s(Bve);SFr=r(lCt,"led"),lCt.forEach(t),RFr=r(DPe," \u2014 "),jH=n(DPe,"A",{href:!0});var iCt=s(jH);PFr=r(iCt,"TFLEDForConditionalGeneration"),iCt.forEach(t),BFr=r(DPe," (LED model)"),DPe.forEach(t),IFr=i(Be),EM=n(Be,"LI",{});var GPe=s(EM);Ive=n(GPe,"STRONG",{});var dCt=s(Ive);NFr=r(dCt,"marian"),dCt.forEach(t),qFr=r(GPe," \u2014 "),DH=n(GPe,"A",{href:!0});var cCt=s(DH);jFr=r(cCt,"TFMarianMTModel"),cCt.forEach(t),DFr=r(GPe," (Marian model)"),GPe.forEach(t),GFr=i(Be),CM=n(Be,"LI",{});var OPe=s(CM);Nve=n(OPe,"STRONG",{});var fCt=s(Nve);OFr=r(fCt,"mbart"),fCt.forEach(t),VFr=r(OPe," \u2014 "),GH=n(OPe,"A",{href:!0});var mCt=s(GH);XFr=r(mCt,"TFMBartForConditionalGeneration"),mCt.forEach(t),zFr=r(OPe," (mBART model)"),OPe.forEach(t),WFr=i(Be),wM=n(Be,"LI",{});var VPe=s(wM);qve=n(VPe,"STRONG",{});var gCt=s(qve);QFr=r(gCt,"mt5"),gCt.forEach(t),HFr=r(VPe," \u2014 "),OH=n(VPe,"A",{href:!0});var hCt=s(OH);UFr=r(hCt,"TFMT5ForConditionalGeneration"),hCt.forEach(t),JFr=r(VPe," (mT5 model)"),VPe.forEach(t),YFr=i(Be),AM=n(Be,"LI",{});var XPe=s(AM);jve=n(XPe,"STRONG",{});var pCt=s(jve);KFr=r(pCt,"pegasus"),pCt.forEach(t),ZFr=r(XPe," \u2014 "),VH=n(XPe,"A",{href:!0});var _Ct=s(VH);e6r=r(_Ct,"TFPegasusForConditionalGeneration"),_Ct.forEach(t),o6r=r(XPe," (Pegasus model)"),XPe.forEach(t),r6r=i(Be),yM=n(Be,"LI",{});var zPe=s(yM);Dve=n(zPe,"STRONG",{});var uCt=s(Dve);t6r=r(uCt,"t5"),uCt.forEach(t),a6r=r(zPe," \u2014 "),XH=n(zPe,"A",{href:!0});var bCt=s(XH);n6r=r(bCt,"TFT5ForConditionalGeneration"),bCt.forEach(t),s6r=r(zPe," (T5 model)"),zPe.forEach(t),Be.forEach(t),l6r=i(wl),T(LM.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),Dje=i(f),sc=n(f,"H2",{class:!0});var WGe=s(sc);xM=n(WGe,"A",{id:!0,class:!0,href:!0});var vCt=s(xM);Gve=n(vCt,"SPAN",{});var FCt=s(Gve);T(X8.$$.fragment,FCt),FCt.forEach(t),vCt.forEach(t),i6r=i(WGe),Ove=n(WGe,"SPAN",{});var TCt=s(Ove);d6r=r(TCt,"TFAutoModelForSequenceClassification"),TCt.forEach(t),WGe.forEach(t),Gje=i(f),tr=n(f,"DIV",{class:!0});var Al=s(tr);T(z8.$$.fragment,Al),c6r=i(Al),lc=n(Al,"P",{});var Pee=s(lc);f6r=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zH=n(Pee,"A",{href:!0});var MCt=s(zH);m6r=r(MCt,"from_pretrained()"),MCt.forEach(t),g6r=r(Pee," class method or the "),WH=n(Pee,"A",{href:!0});var ECt=s(WH);h6r=r(ECt,"from_config()"),ECt.forEach(t),p6r=r(Pee,` class
method.`),Pee.forEach(t),_6r=i(Al),W8=n(Al,"P",{});var QGe=s(W8);u6r=r(QGe,"This class cannot be instantiated directly using "),Vve=n(QGe,"CODE",{});var CCt=s(Vve);b6r=r(CCt,"__init__()"),CCt.forEach(t),v6r=r(QGe," (throws an error)."),QGe.forEach(t),F6r=i(Al),Rt=n(Al,"DIV",{class:!0});var V0=s(Rt);T(Q8.$$.fragment,V0),T6r=i(V0),Xve=n(V0,"P",{});var wCt=s(Xve);M6r=r(wCt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),wCt.forEach(t),E6r=i(V0),ic=n(V0,"P",{});var Bee=s(ic);C6r=r(Bee,`Note:
Loading a model from its configuration file does `),zve=n(Bee,"STRONG",{});var ACt=s(zve);w6r=r(ACt,"not"),ACt.forEach(t),A6r=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=n(Bee,"A",{href:!0});var yCt=s(QH);y6r=r(yCt,"from_pretrained()"),yCt.forEach(t),L6r=r(Bee," to load the model weights."),Bee.forEach(t),x6r=i(V0),T($M.$$.fragment,V0),V0.forEach(t),$6r=i(Al),kr=n(Al,"DIV",{class:!0});var yl=s(kr);T(H8.$$.fragment,yl),k6r=i(yl),Wve=n(yl,"P",{});var LCt=s(Wve);S6r=r(LCt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),LCt.forEach(t),R6r=i(yl),nn=n(yl,"P",{});var X0=s(nn);P6r=r(X0,"The model class to instantiate is selected based on the "),Qve=n(X0,"CODE",{});var xCt=s(Qve);B6r=r(xCt,"model_type"),xCt.forEach(t),I6r=r(X0,` property of the config object (either
passed as an argument or loaded from `),Hve=n(X0,"CODE",{});var $Ct=s(Hve);N6r=r($Ct,"pretrained_model_name_or_path"),$Ct.forEach(t),q6r=r(X0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uve=n(X0,"CODE",{});var kCt=s(Uve);j6r=r(kCt,"pretrained_model_name_or_path"),kCt.forEach(t),D6r=r(X0,":"),X0.forEach(t),G6r=i(yl),oe=n(yl,"UL",{});var ae=s(oe);kM=n(ae,"LI",{});var WPe=s(kM);Jve=n(WPe,"STRONG",{});var SCt=s(Jve);O6r=r(SCt,"albert"),SCt.forEach(t),V6r=r(WPe," \u2014 "),HH=n(WPe,"A",{href:!0});var RCt=s(HH);X6r=r(RCt,"TFAlbertForSequenceClassification"),RCt.forEach(t),z6r=r(WPe," (ALBERT model)"),WPe.forEach(t),W6r=i(ae),SM=n(ae,"LI",{});var QPe=s(SM);Yve=n(QPe,"STRONG",{});var PCt=s(Yve);Q6r=r(PCt,"bert"),PCt.forEach(t),H6r=r(QPe," \u2014 "),UH=n(QPe,"A",{href:!0});var BCt=s(UH);U6r=r(BCt,"TFBertForSequenceClassification"),BCt.forEach(t),J6r=r(QPe," (BERT model)"),QPe.forEach(t),Y6r=i(ae),RM=n(ae,"LI",{});var HPe=s(RM);Kve=n(HPe,"STRONG",{});var ICt=s(Kve);K6r=r(ICt,"camembert"),ICt.forEach(t),Z6r=r(HPe," \u2014 "),JH=n(HPe,"A",{href:!0});var NCt=s(JH);eTr=r(NCt,"TFCamembertForSequenceClassification"),NCt.forEach(t),oTr=r(HPe," (CamemBERT model)"),HPe.forEach(t),rTr=i(ae),PM=n(ae,"LI",{});var UPe=s(PM);Zve=n(UPe,"STRONG",{});var qCt=s(Zve);tTr=r(qCt,"convbert"),qCt.forEach(t),aTr=r(UPe," \u2014 "),YH=n(UPe,"A",{href:!0});var jCt=s(YH);nTr=r(jCt,"TFConvBertForSequenceClassification"),jCt.forEach(t),sTr=r(UPe," (ConvBERT model)"),UPe.forEach(t),lTr=i(ae),BM=n(ae,"LI",{});var JPe=s(BM);eFe=n(JPe,"STRONG",{});var DCt=s(eFe);iTr=r(DCt,"ctrl"),DCt.forEach(t),dTr=r(JPe," \u2014 "),KH=n(JPe,"A",{href:!0});var GCt=s(KH);cTr=r(GCt,"TFCTRLForSequenceClassification"),GCt.forEach(t),fTr=r(JPe," (CTRL model)"),JPe.forEach(t),mTr=i(ae),IM=n(ae,"LI",{});var YPe=s(IM);oFe=n(YPe,"STRONG",{});var OCt=s(oFe);gTr=r(OCt,"deberta"),OCt.forEach(t),hTr=r(YPe," \u2014 "),ZH=n(YPe,"A",{href:!0});var VCt=s(ZH);pTr=r(VCt,"TFDebertaForSequenceClassification"),VCt.forEach(t),_Tr=r(YPe," (DeBERTa model)"),YPe.forEach(t),uTr=i(ae),NM=n(ae,"LI",{});var KPe=s(NM);rFe=n(KPe,"STRONG",{});var XCt=s(rFe);bTr=r(XCt,"deberta-v2"),XCt.forEach(t),vTr=r(KPe," \u2014 "),eU=n(KPe,"A",{href:!0});var zCt=s(eU);FTr=r(zCt,"TFDebertaV2ForSequenceClassification"),zCt.forEach(t),TTr=r(KPe," (DeBERTa-v2 model)"),KPe.forEach(t),MTr=i(ae),qM=n(ae,"LI",{});var ZPe=s(qM);tFe=n(ZPe,"STRONG",{});var WCt=s(tFe);ETr=r(WCt,"distilbert"),WCt.forEach(t),CTr=r(ZPe," \u2014 "),oU=n(ZPe,"A",{href:!0});var QCt=s(oU);wTr=r(QCt,"TFDistilBertForSequenceClassification"),QCt.forEach(t),ATr=r(ZPe," (DistilBERT model)"),ZPe.forEach(t),yTr=i(ae),jM=n(ae,"LI",{});var eBe=s(jM);aFe=n(eBe,"STRONG",{});var HCt=s(aFe);LTr=r(HCt,"electra"),HCt.forEach(t),xTr=r(eBe," \u2014 "),rU=n(eBe,"A",{href:!0});var UCt=s(rU);$Tr=r(UCt,"TFElectraForSequenceClassification"),UCt.forEach(t),kTr=r(eBe," (ELECTRA model)"),eBe.forEach(t),STr=i(ae),DM=n(ae,"LI",{});var oBe=s(DM);nFe=n(oBe,"STRONG",{});var JCt=s(nFe);RTr=r(JCt,"flaubert"),JCt.forEach(t),PTr=r(oBe," \u2014 "),tU=n(oBe,"A",{href:!0});var YCt=s(tU);BTr=r(YCt,"TFFlaubertForSequenceClassification"),YCt.forEach(t),ITr=r(oBe," (FlauBERT model)"),oBe.forEach(t),NTr=i(ae),GM=n(ae,"LI",{});var rBe=s(GM);sFe=n(rBe,"STRONG",{});var KCt=s(sFe);qTr=r(KCt,"funnel"),KCt.forEach(t),jTr=r(rBe," \u2014 "),aU=n(rBe,"A",{href:!0});var ZCt=s(aU);DTr=r(ZCt,"TFFunnelForSequenceClassification"),ZCt.forEach(t),GTr=r(rBe," (Funnel Transformer model)"),rBe.forEach(t),OTr=i(ae),OM=n(ae,"LI",{});var tBe=s(OM);lFe=n(tBe,"STRONG",{});var e5t=s(lFe);VTr=r(e5t,"gpt2"),e5t.forEach(t),XTr=r(tBe," \u2014 "),nU=n(tBe,"A",{href:!0});var o5t=s(nU);zTr=r(o5t,"TFGPT2ForSequenceClassification"),o5t.forEach(t),WTr=r(tBe," (OpenAI GPT-2 model)"),tBe.forEach(t),QTr=i(ae),VM=n(ae,"LI",{});var aBe=s(VM);iFe=n(aBe,"STRONG",{});var r5t=s(iFe);HTr=r(r5t,"gptj"),r5t.forEach(t),UTr=r(aBe," \u2014 "),sU=n(aBe,"A",{href:!0});var t5t=s(sU);JTr=r(t5t,"TFGPTJForSequenceClassification"),t5t.forEach(t),YTr=r(aBe," (GPT-J model)"),aBe.forEach(t),KTr=i(ae),XM=n(ae,"LI",{});var nBe=s(XM);dFe=n(nBe,"STRONG",{});var a5t=s(dFe);ZTr=r(a5t,"layoutlm"),a5t.forEach(t),e7r=r(nBe," \u2014 "),lU=n(nBe,"A",{href:!0});var n5t=s(lU);o7r=r(n5t,"TFLayoutLMForSequenceClassification"),n5t.forEach(t),r7r=r(nBe," (LayoutLM model)"),nBe.forEach(t),t7r=i(ae),zM=n(ae,"LI",{});var sBe=s(zM);cFe=n(sBe,"STRONG",{});var s5t=s(cFe);a7r=r(s5t,"longformer"),s5t.forEach(t),n7r=r(sBe," \u2014 "),iU=n(sBe,"A",{href:!0});var l5t=s(iU);s7r=r(l5t,"TFLongformerForSequenceClassification"),l5t.forEach(t),l7r=r(sBe," (Longformer model)"),sBe.forEach(t),i7r=i(ae),WM=n(ae,"LI",{});var lBe=s(WM);fFe=n(lBe,"STRONG",{});var i5t=s(fFe);d7r=r(i5t,"mobilebert"),i5t.forEach(t),c7r=r(lBe," \u2014 "),dU=n(lBe,"A",{href:!0});var d5t=s(dU);f7r=r(d5t,"TFMobileBertForSequenceClassification"),d5t.forEach(t),m7r=r(lBe," (MobileBERT model)"),lBe.forEach(t),g7r=i(ae),QM=n(ae,"LI",{});var iBe=s(QM);mFe=n(iBe,"STRONG",{});var c5t=s(mFe);h7r=r(c5t,"mpnet"),c5t.forEach(t),p7r=r(iBe," \u2014 "),cU=n(iBe,"A",{href:!0});var f5t=s(cU);_7r=r(f5t,"TFMPNetForSequenceClassification"),f5t.forEach(t),u7r=r(iBe," (MPNet model)"),iBe.forEach(t),b7r=i(ae),HM=n(ae,"LI",{});var dBe=s(HM);gFe=n(dBe,"STRONG",{});var m5t=s(gFe);v7r=r(m5t,"openai-gpt"),m5t.forEach(t),F7r=r(dBe," \u2014 "),fU=n(dBe,"A",{href:!0});var g5t=s(fU);T7r=r(g5t,"TFOpenAIGPTForSequenceClassification"),g5t.forEach(t),M7r=r(dBe," (OpenAI GPT model)"),dBe.forEach(t),E7r=i(ae),UM=n(ae,"LI",{});var cBe=s(UM);hFe=n(cBe,"STRONG",{});var h5t=s(hFe);C7r=r(h5t,"rembert"),h5t.forEach(t),w7r=r(cBe," \u2014 "),mU=n(cBe,"A",{href:!0});var p5t=s(mU);A7r=r(p5t,"TFRemBertForSequenceClassification"),p5t.forEach(t),y7r=r(cBe," (RemBERT model)"),cBe.forEach(t),L7r=i(ae),JM=n(ae,"LI",{});var fBe=s(JM);pFe=n(fBe,"STRONG",{});var _5t=s(pFe);x7r=r(_5t,"roberta"),_5t.forEach(t),$7r=r(fBe," \u2014 "),gU=n(fBe,"A",{href:!0});var u5t=s(gU);k7r=r(u5t,"TFRobertaForSequenceClassification"),u5t.forEach(t),S7r=r(fBe," (RoBERTa model)"),fBe.forEach(t),R7r=i(ae),YM=n(ae,"LI",{});var mBe=s(YM);_Fe=n(mBe,"STRONG",{});var b5t=s(_Fe);P7r=r(b5t,"roformer"),b5t.forEach(t),B7r=r(mBe," \u2014 "),hU=n(mBe,"A",{href:!0});var v5t=s(hU);I7r=r(v5t,"TFRoFormerForSequenceClassification"),v5t.forEach(t),N7r=r(mBe," (RoFormer model)"),mBe.forEach(t),q7r=i(ae),KM=n(ae,"LI",{});var gBe=s(KM);uFe=n(gBe,"STRONG",{});var F5t=s(uFe);j7r=r(F5t,"tapas"),F5t.forEach(t),D7r=r(gBe," \u2014 "),pU=n(gBe,"A",{href:!0});var T5t=s(pU);G7r=r(T5t,"TFTapasForSequenceClassification"),T5t.forEach(t),O7r=r(gBe," (TAPAS model)"),gBe.forEach(t),V7r=i(ae),ZM=n(ae,"LI",{});var hBe=s(ZM);bFe=n(hBe,"STRONG",{});var M5t=s(bFe);X7r=r(M5t,"transfo-xl"),M5t.forEach(t),z7r=r(hBe," \u2014 "),_U=n(hBe,"A",{href:!0});var E5t=s(_U);W7r=r(E5t,"TFTransfoXLForSequenceClassification"),E5t.forEach(t),Q7r=r(hBe," (Transformer-XL model)"),hBe.forEach(t),H7r=i(ae),eE=n(ae,"LI",{});var pBe=s(eE);vFe=n(pBe,"STRONG",{});var C5t=s(vFe);U7r=r(C5t,"xlm"),C5t.forEach(t),J7r=r(pBe," \u2014 "),uU=n(pBe,"A",{href:!0});var w5t=s(uU);Y7r=r(w5t,"TFXLMForSequenceClassification"),w5t.forEach(t),K7r=r(pBe," (XLM model)"),pBe.forEach(t),Z7r=i(ae),oE=n(ae,"LI",{});var _Be=s(oE);FFe=n(_Be,"STRONG",{});var A5t=s(FFe);eMr=r(A5t,"xlm-roberta"),A5t.forEach(t),oMr=r(_Be," \u2014 "),bU=n(_Be,"A",{href:!0});var y5t=s(bU);rMr=r(y5t,"TFXLMRobertaForSequenceClassification"),y5t.forEach(t),tMr=r(_Be," (XLM-RoBERTa model)"),_Be.forEach(t),aMr=i(ae),rE=n(ae,"LI",{});var uBe=s(rE);TFe=n(uBe,"STRONG",{});var L5t=s(TFe);nMr=r(L5t,"xlnet"),L5t.forEach(t),sMr=r(uBe," \u2014 "),vU=n(uBe,"A",{href:!0});var x5t=s(vU);lMr=r(x5t,"TFXLNetForSequenceClassification"),x5t.forEach(t),iMr=r(uBe," (XLNet model)"),uBe.forEach(t),ae.forEach(t),dMr=i(yl),T(tE.$$.fragment,yl),yl.forEach(t),Al.forEach(t),Oje=i(f),dc=n(f,"H2",{class:!0});var HGe=s(dc);aE=n(HGe,"A",{id:!0,class:!0,href:!0});var $5t=s(aE);MFe=n($5t,"SPAN",{});var k5t=s(MFe);T(U8.$$.fragment,k5t),k5t.forEach(t),$5t.forEach(t),cMr=i(HGe),EFe=n(HGe,"SPAN",{});var S5t=s(EFe);fMr=r(S5t,"TFAutoModelForMultipleChoice"),S5t.forEach(t),HGe.forEach(t),Vje=i(f),ar=n(f,"DIV",{class:!0});var Ll=s(ar);T(J8.$$.fragment,Ll),mMr=i(Ll),cc=n(Ll,"P",{});var Iee=s(cc);gMr=r(Iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),FU=n(Iee,"A",{href:!0});var R5t=s(FU);hMr=r(R5t,"from_pretrained()"),R5t.forEach(t),pMr=r(Iee," class method or the "),TU=n(Iee,"A",{href:!0});var P5t=s(TU);_Mr=r(P5t,"from_config()"),P5t.forEach(t),uMr=r(Iee,` class
method.`),Iee.forEach(t),bMr=i(Ll),Y8=n(Ll,"P",{});var UGe=s(Y8);vMr=r(UGe,"This class cannot be instantiated directly using "),CFe=n(UGe,"CODE",{});var B5t=s(CFe);FMr=r(B5t,"__init__()"),B5t.forEach(t),TMr=r(UGe," (throws an error)."),UGe.forEach(t),MMr=i(Ll),Pt=n(Ll,"DIV",{class:!0});var z0=s(Pt);T(K8.$$.fragment,z0),EMr=i(z0),wFe=n(z0,"P",{});var I5t=s(wFe);CMr=r(I5t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),I5t.forEach(t),wMr=i(z0),fc=n(z0,"P",{});var Nee=s(fc);AMr=r(Nee,`Note:
Loading a model from its configuration file does `),AFe=n(Nee,"STRONG",{});var N5t=s(AFe);yMr=r(N5t,"not"),N5t.forEach(t),LMr=r(Nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),MU=n(Nee,"A",{href:!0});var q5t=s(MU);xMr=r(q5t,"from_pretrained()"),q5t.forEach(t),$Mr=r(Nee," to load the model weights."),Nee.forEach(t),kMr=i(z0),T(nE.$$.fragment,z0),z0.forEach(t),SMr=i(Ll),Sr=n(Ll,"DIV",{class:!0});var xl=s(Sr);T(Z8.$$.fragment,xl),RMr=i(xl),yFe=n(xl,"P",{});var j5t=s(yFe);PMr=r(j5t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),j5t.forEach(t),BMr=i(xl),sn=n(xl,"P",{});var W0=s(sn);IMr=r(W0,"The model class to instantiate is selected based on the "),LFe=n(W0,"CODE",{});var D5t=s(LFe);NMr=r(D5t,"model_type"),D5t.forEach(t),qMr=r(W0,` property of the config object (either
passed as an argument or loaded from `),xFe=n(W0,"CODE",{});var G5t=s(xFe);jMr=r(G5t,"pretrained_model_name_or_path"),G5t.forEach(t),DMr=r(W0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Fe=n(W0,"CODE",{});var O5t=s($Fe);GMr=r(O5t,"pretrained_model_name_or_path"),O5t.forEach(t),OMr=r(W0,":"),W0.forEach(t),VMr=i(xl),pe=n(xl,"UL",{});var be=s(pe);sE=n(be,"LI",{});var bBe=s(sE);kFe=n(bBe,"STRONG",{});var V5t=s(kFe);XMr=r(V5t,"albert"),V5t.forEach(t),zMr=r(bBe," \u2014 "),EU=n(bBe,"A",{href:!0});var X5t=s(EU);WMr=r(X5t,"TFAlbertForMultipleChoice"),X5t.forEach(t),QMr=r(bBe," (ALBERT model)"),bBe.forEach(t),HMr=i(be),lE=n(be,"LI",{});var vBe=s(lE);SFe=n(vBe,"STRONG",{});var z5t=s(SFe);UMr=r(z5t,"bert"),z5t.forEach(t),JMr=r(vBe," \u2014 "),CU=n(vBe,"A",{href:!0});var W5t=s(CU);YMr=r(W5t,"TFBertForMultipleChoice"),W5t.forEach(t),KMr=r(vBe," (BERT model)"),vBe.forEach(t),ZMr=i(be),iE=n(be,"LI",{});var FBe=s(iE);RFe=n(FBe,"STRONG",{});var Q5t=s(RFe);eEr=r(Q5t,"camembert"),Q5t.forEach(t),oEr=r(FBe," \u2014 "),wU=n(FBe,"A",{href:!0});var H5t=s(wU);rEr=r(H5t,"TFCamembertForMultipleChoice"),H5t.forEach(t),tEr=r(FBe," (CamemBERT model)"),FBe.forEach(t),aEr=i(be),dE=n(be,"LI",{});var TBe=s(dE);PFe=n(TBe,"STRONG",{});var U5t=s(PFe);nEr=r(U5t,"convbert"),U5t.forEach(t),sEr=r(TBe," \u2014 "),AU=n(TBe,"A",{href:!0});var J5t=s(AU);lEr=r(J5t,"TFConvBertForMultipleChoice"),J5t.forEach(t),iEr=r(TBe," (ConvBERT model)"),TBe.forEach(t),dEr=i(be),cE=n(be,"LI",{});var MBe=s(cE);BFe=n(MBe,"STRONG",{});var Y5t=s(BFe);cEr=r(Y5t,"distilbert"),Y5t.forEach(t),fEr=r(MBe," \u2014 "),yU=n(MBe,"A",{href:!0});var K5t=s(yU);mEr=r(K5t,"TFDistilBertForMultipleChoice"),K5t.forEach(t),gEr=r(MBe," (DistilBERT model)"),MBe.forEach(t),hEr=i(be),fE=n(be,"LI",{});var EBe=s(fE);IFe=n(EBe,"STRONG",{});var Z5t=s(IFe);pEr=r(Z5t,"electra"),Z5t.forEach(t),_Er=r(EBe," \u2014 "),LU=n(EBe,"A",{href:!0});var e3t=s(LU);uEr=r(e3t,"TFElectraForMultipleChoice"),e3t.forEach(t),bEr=r(EBe," (ELECTRA model)"),EBe.forEach(t),vEr=i(be),mE=n(be,"LI",{});var CBe=s(mE);NFe=n(CBe,"STRONG",{});var o3t=s(NFe);FEr=r(o3t,"flaubert"),o3t.forEach(t),TEr=r(CBe," \u2014 "),xU=n(CBe,"A",{href:!0});var r3t=s(xU);MEr=r(r3t,"TFFlaubertForMultipleChoice"),r3t.forEach(t),EEr=r(CBe," (FlauBERT model)"),CBe.forEach(t),CEr=i(be),gE=n(be,"LI",{});var wBe=s(gE);qFe=n(wBe,"STRONG",{});var t3t=s(qFe);wEr=r(t3t,"funnel"),t3t.forEach(t),AEr=r(wBe," \u2014 "),$U=n(wBe,"A",{href:!0});var a3t=s($U);yEr=r(a3t,"TFFunnelForMultipleChoice"),a3t.forEach(t),LEr=r(wBe," (Funnel Transformer model)"),wBe.forEach(t),xEr=i(be),hE=n(be,"LI",{});var ABe=s(hE);jFe=n(ABe,"STRONG",{});var n3t=s(jFe);$Er=r(n3t,"longformer"),n3t.forEach(t),kEr=r(ABe," \u2014 "),kU=n(ABe,"A",{href:!0});var s3t=s(kU);SEr=r(s3t,"TFLongformerForMultipleChoice"),s3t.forEach(t),REr=r(ABe," (Longformer model)"),ABe.forEach(t),PEr=i(be),pE=n(be,"LI",{});var yBe=s(pE);DFe=n(yBe,"STRONG",{});var l3t=s(DFe);BEr=r(l3t,"mobilebert"),l3t.forEach(t),IEr=r(yBe," \u2014 "),SU=n(yBe,"A",{href:!0});var i3t=s(SU);NEr=r(i3t,"TFMobileBertForMultipleChoice"),i3t.forEach(t),qEr=r(yBe," (MobileBERT model)"),yBe.forEach(t),jEr=i(be),_E=n(be,"LI",{});var LBe=s(_E);GFe=n(LBe,"STRONG",{});var d3t=s(GFe);DEr=r(d3t,"mpnet"),d3t.forEach(t),GEr=r(LBe," \u2014 "),RU=n(LBe,"A",{href:!0});var c3t=s(RU);OEr=r(c3t,"TFMPNetForMultipleChoice"),c3t.forEach(t),VEr=r(LBe," (MPNet model)"),LBe.forEach(t),XEr=i(be),uE=n(be,"LI",{});var xBe=s(uE);OFe=n(xBe,"STRONG",{});var f3t=s(OFe);zEr=r(f3t,"rembert"),f3t.forEach(t),WEr=r(xBe," \u2014 "),PU=n(xBe,"A",{href:!0});var m3t=s(PU);QEr=r(m3t,"TFRemBertForMultipleChoice"),m3t.forEach(t),HEr=r(xBe," (RemBERT model)"),xBe.forEach(t),UEr=i(be),bE=n(be,"LI",{});var $Be=s(bE);VFe=n($Be,"STRONG",{});var g3t=s(VFe);JEr=r(g3t,"roberta"),g3t.forEach(t),YEr=r($Be," \u2014 "),BU=n($Be,"A",{href:!0});var h3t=s(BU);KEr=r(h3t,"TFRobertaForMultipleChoice"),h3t.forEach(t),ZEr=r($Be," (RoBERTa model)"),$Be.forEach(t),eCr=i(be),vE=n(be,"LI",{});var kBe=s(vE);XFe=n(kBe,"STRONG",{});var p3t=s(XFe);oCr=r(p3t,"roformer"),p3t.forEach(t),rCr=r(kBe," \u2014 "),IU=n(kBe,"A",{href:!0});var _3t=s(IU);tCr=r(_3t,"TFRoFormerForMultipleChoice"),_3t.forEach(t),aCr=r(kBe," (RoFormer model)"),kBe.forEach(t),nCr=i(be),FE=n(be,"LI",{});var SBe=s(FE);zFe=n(SBe,"STRONG",{});var u3t=s(zFe);sCr=r(u3t,"xlm"),u3t.forEach(t),lCr=r(SBe," \u2014 "),NU=n(SBe,"A",{href:!0});var b3t=s(NU);iCr=r(b3t,"TFXLMForMultipleChoice"),b3t.forEach(t),dCr=r(SBe," (XLM model)"),SBe.forEach(t),cCr=i(be),TE=n(be,"LI",{});var RBe=s(TE);WFe=n(RBe,"STRONG",{});var v3t=s(WFe);fCr=r(v3t,"xlm-roberta"),v3t.forEach(t),mCr=r(RBe," \u2014 "),qU=n(RBe,"A",{href:!0});var F3t=s(qU);gCr=r(F3t,"TFXLMRobertaForMultipleChoice"),F3t.forEach(t),hCr=r(RBe," (XLM-RoBERTa model)"),RBe.forEach(t),pCr=i(be),ME=n(be,"LI",{});var PBe=s(ME);QFe=n(PBe,"STRONG",{});var T3t=s(QFe);_Cr=r(T3t,"xlnet"),T3t.forEach(t),uCr=r(PBe," \u2014 "),jU=n(PBe,"A",{href:!0});var M3t=s(jU);bCr=r(M3t,"TFXLNetForMultipleChoice"),M3t.forEach(t),vCr=r(PBe," (XLNet model)"),PBe.forEach(t),be.forEach(t),FCr=i(xl),T(EE.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),Xje=i(f),mc=n(f,"H2",{class:!0});var JGe=s(mc);CE=n(JGe,"A",{id:!0,class:!0,href:!0});var E3t=s(CE);HFe=n(E3t,"SPAN",{});var C3t=s(HFe);T(e9.$$.fragment,C3t),C3t.forEach(t),E3t.forEach(t),TCr=i(JGe),UFe=n(JGe,"SPAN",{});var w3t=s(UFe);MCr=r(w3t,"TFAutoModelForNextSentencePrediction"),w3t.forEach(t),JGe.forEach(t),zje=i(f),nr=n(f,"DIV",{class:!0});var $l=s(nr);T(o9.$$.fragment,$l),ECr=i($l),gc=n($l,"P",{});var qee=s(gc);CCr=r(qee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),DU=n(qee,"A",{href:!0});var A3t=s(DU);wCr=r(A3t,"from_pretrained()"),A3t.forEach(t),ACr=r(qee," class method or the "),GU=n(qee,"A",{href:!0});var y3t=s(GU);yCr=r(y3t,"from_config()"),y3t.forEach(t),LCr=r(qee,` class
method.`),qee.forEach(t),xCr=i($l),r9=n($l,"P",{});var YGe=s(r9);$Cr=r(YGe,"This class cannot be instantiated directly using "),JFe=n(YGe,"CODE",{});var L3t=s(JFe);kCr=r(L3t,"__init__()"),L3t.forEach(t),SCr=r(YGe," (throws an error)."),YGe.forEach(t),RCr=i($l),Bt=n($l,"DIV",{class:!0});var Q0=s(Bt);T(t9.$$.fragment,Q0),PCr=i(Q0),YFe=n(Q0,"P",{});var x3t=s(YFe);BCr=r(x3t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),x3t.forEach(t),ICr=i(Q0),hc=n(Q0,"P",{});var jee=s(hc);NCr=r(jee,`Note:
Loading a model from its configuration file does `),KFe=n(jee,"STRONG",{});var $3t=s(KFe);qCr=r($3t,"not"),$3t.forEach(t),jCr=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),OU=n(jee,"A",{href:!0});var k3t=s(OU);DCr=r(k3t,"from_pretrained()"),k3t.forEach(t),GCr=r(jee," to load the model weights."),jee.forEach(t),OCr=i(Q0),T(wE.$$.fragment,Q0),Q0.forEach(t),VCr=i($l),Rr=n($l,"DIV",{class:!0});var kl=s(Rr);T(a9.$$.fragment,kl),XCr=i(kl),ZFe=n(kl,"P",{});var S3t=s(ZFe);zCr=r(S3t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),S3t.forEach(t),WCr=i(kl),ln=n(kl,"P",{});var H0=s(ln);QCr=r(H0,"The model class to instantiate is selected based on the "),e6e=n(H0,"CODE",{});var R3t=s(e6e);HCr=r(R3t,"model_type"),R3t.forEach(t),UCr=r(H0,` property of the config object (either
passed as an argument or loaded from `),o6e=n(H0,"CODE",{});var P3t=s(o6e);JCr=r(P3t,"pretrained_model_name_or_path"),P3t.forEach(t),YCr=r(H0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r6e=n(H0,"CODE",{});var B3t=s(r6e);KCr=r(B3t,"pretrained_model_name_or_path"),B3t.forEach(t),ZCr=r(H0,":"),H0.forEach(t),e5r=i(kl),n9=n(kl,"UL",{});var KGe=s(n9);AE=n(KGe,"LI",{});var BBe=s(AE);t6e=n(BBe,"STRONG",{});var I3t=s(t6e);o5r=r(I3t,"bert"),I3t.forEach(t),r5r=r(BBe," \u2014 "),VU=n(BBe,"A",{href:!0});var N3t=s(VU);t5r=r(N3t,"TFBertForNextSentencePrediction"),N3t.forEach(t),a5r=r(BBe," (BERT model)"),BBe.forEach(t),n5r=i(KGe),yE=n(KGe,"LI",{});var IBe=s(yE);a6e=n(IBe,"STRONG",{});var q3t=s(a6e);s5r=r(q3t,"mobilebert"),q3t.forEach(t),l5r=r(IBe," \u2014 "),XU=n(IBe,"A",{href:!0});var j3t=s(XU);i5r=r(j3t,"TFMobileBertForNextSentencePrediction"),j3t.forEach(t),d5r=r(IBe," (MobileBERT model)"),IBe.forEach(t),KGe.forEach(t),c5r=i(kl),T(LE.$$.fragment,kl),kl.forEach(t),$l.forEach(t),Wje=i(f),pc=n(f,"H2",{class:!0});var ZGe=s(pc);xE=n(ZGe,"A",{id:!0,class:!0,href:!0});var D3t=s(xE);n6e=n(D3t,"SPAN",{});var G3t=s(n6e);T(s9.$$.fragment,G3t),G3t.forEach(t),D3t.forEach(t),f5r=i(ZGe),s6e=n(ZGe,"SPAN",{});var O3t=s(s6e);m5r=r(O3t,"TFAutoModelForTableQuestionAnswering"),O3t.forEach(t),ZGe.forEach(t),Qje=i(f),sr=n(f,"DIV",{class:!0});var Sl=s(sr);T(l9.$$.fragment,Sl),g5r=i(Sl),_c=n(Sl,"P",{});var Dee=s(_c);h5r=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),zU=n(Dee,"A",{href:!0});var V3t=s(zU);p5r=r(V3t,"from_pretrained()"),V3t.forEach(t),_5r=r(Dee," class method or the "),WU=n(Dee,"A",{href:!0});var X3t=s(WU);u5r=r(X3t,"from_config()"),X3t.forEach(t),b5r=r(Dee,` class
method.`),Dee.forEach(t),v5r=i(Sl),i9=n(Sl,"P",{});var eOe=s(i9);F5r=r(eOe,"This class cannot be instantiated directly using "),l6e=n(eOe,"CODE",{});var z3t=s(l6e);T5r=r(z3t,"__init__()"),z3t.forEach(t),M5r=r(eOe," (throws an error)."),eOe.forEach(t),E5r=i(Sl),It=n(Sl,"DIV",{class:!0});var U0=s(It);T(d9.$$.fragment,U0),C5r=i(U0),i6e=n(U0,"P",{});var W3t=s(i6e);w5r=r(W3t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),W3t.forEach(t),A5r=i(U0),uc=n(U0,"P",{});var Gee=s(uc);y5r=r(Gee,`Note:
Loading a model from its configuration file does `),d6e=n(Gee,"STRONG",{});var Q3t=s(d6e);L5r=r(Q3t,"not"),Q3t.forEach(t),x5r=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=n(Gee,"A",{href:!0});var H3t=s(QU);$5r=r(H3t,"from_pretrained()"),H3t.forEach(t),k5r=r(Gee," to load the model weights."),Gee.forEach(t),S5r=i(U0),T($E.$$.fragment,U0),U0.forEach(t),R5r=i(Sl),Pr=n(Sl,"DIV",{class:!0});var Rl=s(Pr);T(c9.$$.fragment,Rl),P5r=i(Rl),c6e=n(Rl,"P",{});var U3t=s(c6e);B5r=r(U3t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),U3t.forEach(t),I5r=i(Rl),dn=n(Rl,"P",{});var J0=s(dn);N5r=r(J0,"The model class to instantiate is selected based on the "),f6e=n(J0,"CODE",{});var J3t=s(f6e);q5r=r(J3t,"model_type"),J3t.forEach(t),j5r=r(J0,` property of the config object (either
passed as an argument or loaded from `),m6e=n(J0,"CODE",{});var Y3t=s(m6e);D5r=r(Y3t,"pretrained_model_name_or_path"),Y3t.forEach(t),G5r=r(J0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g6e=n(J0,"CODE",{});var K3t=s(g6e);O5r=r(K3t,"pretrained_model_name_or_path"),K3t.forEach(t),V5r=r(J0,":"),J0.forEach(t),X5r=i(Rl),h6e=n(Rl,"UL",{});var Z3t=s(h6e);kE=n(Z3t,"LI",{});var NBe=s(kE);p6e=n(NBe,"STRONG",{});var ewt=s(p6e);z5r=r(ewt,"tapas"),ewt.forEach(t),W5r=r(NBe," \u2014 "),HU=n(NBe,"A",{href:!0});var owt=s(HU);Q5r=r(owt,"TFTapasForQuestionAnswering"),owt.forEach(t),H5r=r(NBe," (TAPAS model)"),NBe.forEach(t),Z3t.forEach(t),U5r=i(Rl),T(SE.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),Hje=i(f),bc=n(f,"H2",{class:!0});var oOe=s(bc);RE=n(oOe,"A",{id:!0,class:!0,href:!0});var rwt=s(RE);_6e=n(rwt,"SPAN",{});var twt=s(_6e);T(f9.$$.fragment,twt),twt.forEach(t),rwt.forEach(t),J5r=i(oOe),u6e=n(oOe,"SPAN",{});var awt=s(u6e);Y5r=r(awt,"TFAutoModelForTokenClassification"),awt.forEach(t),oOe.forEach(t),Uje=i(f),lr=n(f,"DIV",{class:!0});var Pl=s(lr);T(m9.$$.fragment,Pl),K5r=i(Pl),vc=n(Pl,"P",{});var Oee=s(vc);Z5r=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),UU=n(Oee,"A",{href:!0});var nwt=s(UU);e3r=r(nwt,"from_pretrained()"),nwt.forEach(t),o3r=r(Oee," class method or the "),JU=n(Oee,"A",{href:!0});var swt=s(JU);r3r=r(swt,"from_config()"),swt.forEach(t),t3r=r(Oee,` class
method.`),Oee.forEach(t),a3r=i(Pl),g9=n(Pl,"P",{});var rOe=s(g9);n3r=r(rOe,"This class cannot be instantiated directly using "),b6e=n(rOe,"CODE",{});var lwt=s(b6e);s3r=r(lwt,"__init__()"),lwt.forEach(t),l3r=r(rOe," (throws an error)."),rOe.forEach(t),i3r=i(Pl),Nt=n(Pl,"DIV",{class:!0});var Y0=s(Nt);T(h9.$$.fragment,Y0),d3r=i(Y0),v6e=n(Y0,"P",{});var iwt=s(v6e);c3r=r(iwt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),iwt.forEach(t),f3r=i(Y0),Fc=n(Y0,"P",{});var Vee=s(Fc);m3r=r(Vee,`Note:
Loading a model from its configuration file does `),F6e=n(Vee,"STRONG",{});var dwt=s(F6e);g3r=r(dwt,"not"),dwt.forEach(t),h3r=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=n(Vee,"A",{href:!0});var cwt=s(YU);p3r=r(cwt,"from_pretrained()"),cwt.forEach(t),_3r=r(Vee," to load the model weights."),Vee.forEach(t),u3r=i(Y0),T(PE.$$.fragment,Y0),Y0.forEach(t),b3r=i(Pl),Br=n(Pl,"DIV",{class:!0});var Bl=s(Br);T(p9.$$.fragment,Bl),v3r=i(Bl),T6e=n(Bl,"P",{});var fwt=s(T6e);F3r=r(fwt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),fwt.forEach(t),T3r=i(Bl),cn=n(Bl,"P",{});var K0=s(cn);M3r=r(K0,"The model class to instantiate is selected based on the "),M6e=n(K0,"CODE",{});var mwt=s(M6e);E3r=r(mwt,"model_type"),mwt.forEach(t),C3r=r(K0,` property of the config object (either
passed as an argument or loaded from `),E6e=n(K0,"CODE",{});var gwt=s(E6e);w3r=r(gwt,"pretrained_model_name_or_path"),gwt.forEach(t),A3r=r(K0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C6e=n(K0,"CODE",{});var hwt=s(C6e);y3r=r(hwt,"pretrained_model_name_or_path"),hwt.forEach(t),L3r=r(K0,":"),K0.forEach(t),x3r=i(Bl),de=n(Bl,"UL",{});var me=s(de);BE=n(me,"LI",{});var qBe=s(BE);w6e=n(qBe,"STRONG",{});var pwt=s(w6e);$3r=r(pwt,"albert"),pwt.forEach(t),k3r=r(qBe," \u2014 "),KU=n(qBe,"A",{href:!0});var _wt=s(KU);S3r=r(_wt,"TFAlbertForTokenClassification"),_wt.forEach(t),R3r=r(qBe," (ALBERT model)"),qBe.forEach(t),P3r=i(me),IE=n(me,"LI",{});var jBe=s(IE);A6e=n(jBe,"STRONG",{});var uwt=s(A6e);B3r=r(uwt,"bert"),uwt.forEach(t),I3r=r(jBe," \u2014 "),ZU=n(jBe,"A",{href:!0});var bwt=s(ZU);N3r=r(bwt,"TFBertForTokenClassification"),bwt.forEach(t),q3r=r(jBe," (BERT model)"),jBe.forEach(t),j3r=i(me),NE=n(me,"LI",{});var DBe=s(NE);y6e=n(DBe,"STRONG",{});var vwt=s(y6e);D3r=r(vwt,"camembert"),vwt.forEach(t),G3r=r(DBe," \u2014 "),eJ=n(DBe,"A",{href:!0});var Fwt=s(eJ);O3r=r(Fwt,"TFCamembertForTokenClassification"),Fwt.forEach(t),V3r=r(DBe," (CamemBERT model)"),DBe.forEach(t),X3r=i(me),qE=n(me,"LI",{});var GBe=s(qE);L6e=n(GBe,"STRONG",{});var Twt=s(L6e);z3r=r(Twt,"convbert"),Twt.forEach(t),W3r=r(GBe," \u2014 "),oJ=n(GBe,"A",{href:!0});var Mwt=s(oJ);Q3r=r(Mwt,"TFConvBertForTokenClassification"),Mwt.forEach(t),H3r=r(GBe," (ConvBERT model)"),GBe.forEach(t),U3r=i(me),jE=n(me,"LI",{});var OBe=s(jE);x6e=n(OBe,"STRONG",{});var Ewt=s(x6e);J3r=r(Ewt,"deberta"),Ewt.forEach(t),Y3r=r(OBe," \u2014 "),rJ=n(OBe,"A",{href:!0});var Cwt=s(rJ);K3r=r(Cwt,"TFDebertaForTokenClassification"),Cwt.forEach(t),Z3r=r(OBe," (DeBERTa model)"),OBe.forEach(t),ewr=i(me),DE=n(me,"LI",{});var VBe=s(DE);$6e=n(VBe,"STRONG",{});var wwt=s($6e);owr=r(wwt,"deberta-v2"),wwt.forEach(t),rwr=r(VBe," \u2014 "),tJ=n(VBe,"A",{href:!0});var Awt=s(tJ);twr=r(Awt,"TFDebertaV2ForTokenClassification"),Awt.forEach(t),awr=r(VBe," (DeBERTa-v2 model)"),VBe.forEach(t),nwr=i(me),GE=n(me,"LI",{});var XBe=s(GE);k6e=n(XBe,"STRONG",{});var ywt=s(k6e);swr=r(ywt,"distilbert"),ywt.forEach(t),lwr=r(XBe," \u2014 "),aJ=n(XBe,"A",{href:!0});var Lwt=s(aJ);iwr=r(Lwt,"TFDistilBertForTokenClassification"),Lwt.forEach(t),dwr=r(XBe," (DistilBERT model)"),XBe.forEach(t),cwr=i(me),OE=n(me,"LI",{});var zBe=s(OE);S6e=n(zBe,"STRONG",{});var xwt=s(S6e);fwr=r(xwt,"electra"),xwt.forEach(t),mwr=r(zBe," \u2014 "),nJ=n(zBe,"A",{href:!0});var $wt=s(nJ);gwr=r($wt,"TFElectraForTokenClassification"),$wt.forEach(t),hwr=r(zBe," (ELECTRA model)"),zBe.forEach(t),pwr=i(me),VE=n(me,"LI",{});var WBe=s(VE);R6e=n(WBe,"STRONG",{});var kwt=s(R6e);_wr=r(kwt,"flaubert"),kwt.forEach(t),uwr=r(WBe," \u2014 "),sJ=n(WBe,"A",{href:!0});var Swt=s(sJ);bwr=r(Swt,"TFFlaubertForTokenClassification"),Swt.forEach(t),vwr=r(WBe," (FlauBERT model)"),WBe.forEach(t),Fwr=i(me),XE=n(me,"LI",{});var QBe=s(XE);P6e=n(QBe,"STRONG",{});var Rwt=s(P6e);Twr=r(Rwt,"funnel"),Rwt.forEach(t),Mwr=r(QBe," \u2014 "),lJ=n(QBe,"A",{href:!0});var Pwt=s(lJ);Ewr=r(Pwt,"TFFunnelForTokenClassification"),Pwt.forEach(t),Cwr=r(QBe," (Funnel Transformer model)"),QBe.forEach(t),wwr=i(me),zE=n(me,"LI",{});var HBe=s(zE);B6e=n(HBe,"STRONG",{});var Bwt=s(B6e);Awr=r(Bwt,"layoutlm"),Bwt.forEach(t),ywr=r(HBe," \u2014 "),iJ=n(HBe,"A",{href:!0});var Iwt=s(iJ);Lwr=r(Iwt,"TFLayoutLMForTokenClassification"),Iwt.forEach(t),xwr=r(HBe," (LayoutLM model)"),HBe.forEach(t),$wr=i(me),WE=n(me,"LI",{});var UBe=s(WE);I6e=n(UBe,"STRONG",{});var Nwt=s(I6e);kwr=r(Nwt,"longformer"),Nwt.forEach(t),Swr=r(UBe," \u2014 "),dJ=n(UBe,"A",{href:!0});var qwt=s(dJ);Rwr=r(qwt,"TFLongformerForTokenClassification"),qwt.forEach(t),Pwr=r(UBe," (Longformer model)"),UBe.forEach(t),Bwr=i(me),QE=n(me,"LI",{});var JBe=s(QE);N6e=n(JBe,"STRONG",{});var jwt=s(N6e);Iwr=r(jwt,"mobilebert"),jwt.forEach(t),Nwr=r(JBe," \u2014 "),cJ=n(JBe,"A",{href:!0});var Dwt=s(cJ);qwr=r(Dwt,"TFMobileBertForTokenClassification"),Dwt.forEach(t),jwr=r(JBe," (MobileBERT model)"),JBe.forEach(t),Dwr=i(me),HE=n(me,"LI",{});var YBe=s(HE);q6e=n(YBe,"STRONG",{});var Gwt=s(q6e);Gwr=r(Gwt,"mpnet"),Gwt.forEach(t),Owr=r(YBe," \u2014 "),fJ=n(YBe,"A",{href:!0});var Owt=s(fJ);Vwr=r(Owt,"TFMPNetForTokenClassification"),Owt.forEach(t),Xwr=r(YBe," (MPNet model)"),YBe.forEach(t),zwr=i(me),UE=n(me,"LI",{});var KBe=s(UE);j6e=n(KBe,"STRONG",{});var Vwt=s(j6e);Wwr=r(Vwt,"rembert"),Vwt.forEach(t),Qwr=r(KBe," \u2014 "),mJ=n(KBe,"A",{href:!0});var Xwt=s(mJ);Hwr=r(Xwt,"TFRemBertForTokenClassification"),Xwt.forEach(t),Uwr=r(KBe," (RemBERT model)"),KBe.forEach(t),Jwr=i(me),JE=n(me,"LI",{});var ZBe=s(JE);D6e=n(ZBe,"STRONG",{});var zwt=s(D6e);Ywr=r(zwt,"roberta"),zwt.forEach(t),Kwr=r(ZBe," \u2014 "),gJ=n(ZBe,"A",{href:!0});var Wwt=s(gJ);Zwr=r(Wwt,"TFRobertaForTokenClassification"),Wwt.forEach(t),e0r=r(ZBe," (RoBERTa model)"),ZBe.forEach(t),o0r=i(me),YE=n(me,"LI",{});var eIe=s(YE);G6e=n(eIe,"STRONG",{});var Qwt=s(G6e);r0r=r(Qwt,"roformer"),Qwt.forEach(t),t0r=r(eIe," \u2014 "),hJ=n(eIe,"A",{href:!0});var Hwt=s(hJ);a0r=r(Hwt,"TFRoFormerForTokenClassification"),Hwt.forEach(t),n0r=r(eIe," (RoFormer model)"),eIe.forEach(t),s0r=i(me),KE=n(me,"LI",{});var oIe=s(KE);O6e=n(oIe,"STRONG",{});var Uwt=s(O6e);l0r=r(Uwt,"xlm"),Uwt.forEach(t),i0r=r(oIe," \u2014 "),pJ=n(oIe,"A",{href:!0});var Jwt=s(pJ);d0r=r(Jwt,"TFXLMForTokenClassification"),Jwt.forEach(t),c0r=r(oIe," (XLM model)"),oIe.forEach(t),f0r=i(me),ZE=n(me,"LI",{});var rIe=s(ZE);V6e=n(rIe,"STRONG",{});var Ywt=s(V6e);m0r=r(Ywt,"xlm-roberta"),Ywt.forEach(t),g0r=r(rIe," \u2014 "),_J=n(rIe,"A",{href:!0});var Kwt=s(_J);h0r=r(Kwt,"TFXLMRobertaForTokenClassification"),Kwt.forEach(t),p0r=r(rIe," (XLM-RoBERTa model)"),rIe.forEach(t),_0r=i(me),eC=n(me,"LI",{});var tIe=s(eC);X6e=n(tIe,"STRONG",{});var Zwt=s(X6e);u0r=r(Zwt,"xlnet"),Zwt.forEach(t),b0r=r(tIe," \u2014 "),uJ=n(tIe,"A",{href:!0});var e0t=s(uJ);v0r=r(e0t,"TFXLNetForTokenClassification"),e0t.forEach(t),F0r=r(tIe," (XLNet model)"),tIe.forEach(t),me.forEach(t),T0r=i(Bl),T(oC.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),Jje=i(f),Tc=n(f,"H2",{class:!0});var tOe=s(Tc);rC=n(tOe,"A",{id:!0,class:!0,href:!0});var o0t=s(rC);z6e=n(o0t,"SPAN",{});var r0t=s(z6e);T(_9.$$.fragment,r0t),r0t.forEach(t),o0t.forEach(t),M0r=i(tOe),W6e=n(tOe,"SPAN",{});var t0t=s(W6e);E0r=r(t0t,"TFAutoModelForQuestionAnswering"),t0t.forEach(t),tOe.forEach(t),Yje=i(f),ir=n(f,"DIV",{class:!0});var Il=s(ir);T(u9.$$.fragment,Il),C0r=i(Il),Mc=n(Il,"P",{});var Xee=s(Mc);w0r=r(Xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bJ=n(Xee,"A",{href:!0});var a0t=s(bJ);A0r=r(a0t,"from_pretrained()"),a0t.forEach(t),y0r=r(Xee," class method or the "),vJ=n(Xee,"A",{href:!0});var n0t=s(vJ);L0r=r(n0t,"from_config()"),n0t.forEach(t),x0r=r(Xee,` class
method.`),Xee.forEach(t),$0r=i(Il),b9=n(Il,"P",{});var aOe=s(b9);k0r=r(aOe,"This class cannot be instantiated directly using "),Q6e=n(aOe,"CODE",{});var s0t=s(Q6e);S0r=r(s0t,"__init__()"),s0t.forEach(t),R0r=r(aOe," (throws an error)."),aOe.forEach(t),P0r=i(Il),qt=n(Il,"DIV",{class:!0});var Z0=s(qt);T(v9.$$.fragment,Z0),B0r=i(Z0),H6e=n(Z0,"P",{});var l0t=s(H6e);I0r=r(l0t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),l0t.forEach(t),N0r=i(Z0),Ec=n(Z0,"P",{});var zee=s(Ec);q0r=r(zee,`Note:
Loading a model from its configuration file does `),U6e=n(zee,"STRONG",{});var i0t=s(U6e);j0r=r(i0t,"not"),i0t.forEach(t),D0r=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),FJ=n(zee,"A",{href:!0});var d0t=s(FJ);G0r=r(d0t,"from_pretrained()"),d0t.forEach(t),O0r=r(zee," to load the model weights."),zee.forEach(t),V0r=i(Z0),T(tC.$$.fragment,Z0),Z0.forEach(t),X0r=i(Il),Ir=n(Il,"DIV",{class:!0});var Nl=s(Ir);T(F9.$$.fragment,Nl),z0r=i(Nl),J6e=n(Nl,"P",{});var c0t=s(J6e);W0r=r(c0t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),c0t.forEach(t),Q0r=i(Nl),fn=n(Nl,"P",{});var eA=s(fn);H0r=r(eA,"The model class to instantiate is selected based on the "),Y6e=n(eA,"CODE",{});var f0t=s(Y6e);U0r=r(f0t,"model_type"),f0t.forEach(t),J0r=r(eA,` property of the config object (either
passed as an argument or loaded from `),K6e=n(eA,"CODE",{});var m0t=s(K6e);Y0r=r(m0t,"pretrained_model_name_or_path"),m0t.forEach(t),K0r=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z6e=n(eA,"CODE",{});var g0t=s(Z6e);Z0r=r(g0t,"pretrained_model_name_or_path"),g0t.forEach(t),eAr=r(eA,":"),eA.forEach(t),oAr=i(Nl),ce=n(Nl,"UL",{});var ge=s(ce);aC=n(ge,"LI",{});var aIe=s(aC);eTe=n(aIe,"STRONG",{});var h0t=s(eTe);rAr=r(h0t,"albert"),h0t.forEach(t),tAr=r(aIe," \u2014 "),TJ=n(aIe,"A",{href:!0});var p0t=s(TJ);aAr=r(p0t,"TFAlbertForQuestionAnswering"),p0t.forEach(t),nAr=r(aIe," (ALBERT model)"),aIe.forEach(t),sAr=i(ge),nC=n(ge,"LI",{});var nIe=s(nC);oTe=n(nIe,"STRONG",{});var _0t=s(oTe);lAr=r(_0t,"bert"),_0t.forEach(t),iAr=r(nIe," \u2014 "),MJ=n(nIe,"A",{href:!0});var u0t=s(MJ);dAr=r(u0t,"TFBertForQuestionAnswering"),u0t.forEach(t),cAr=r(nIe," (BERT model)"),nIe.forEach(t),fAr=i(ge),sC=n(ge,"LI",{});var sIe=s(sC);rTe=n(sIe,"STRONG",{});var b0t=s(rTe);mAr=r(b0t,"camembert"),b0t.forEach(t),gAr=r(sIe," \u2014 "),EJ=n(sIe,"A",{href:!0});var v0t=s(EJ);hAr=r(v0t,"TFCamembertForQuestionAnswering"),v0t.forEach(t),pAr=r(sIe," (CamemBERT model)"),sIe.forEach(t),_Ar=i(ge),lC=n(ge,"LI",{});var lIe=s(lC);tTe=n(lIe,"STRONG",{});var F0t=s(tTe);uAr=r(F0t,"convbert"),F0t.forEach(t),bAr=r(lIe," \u2014 "),CJ=n(lIe,"A",{href:!0});var T0t=s(CJ);vAr=r(T0t,"TFConvBertForQuestionAnswering"),T0t.forEach(t),FAr=r(lIe," (ConvBERT model)"),lIe.forEach(t),TAr=i(ge),iC=n(ge,"LI",{});var iIe=s(iC);aTe=n(iIe,"STRONG",{});var M0t=s(aTe);MAr=r(M0t,"deberta"),M0t.forEach(t),EAr=r(iIe," \u2014 "),wJ=n(iIe,"A",{href:!0});var E0t=s(wJ);CAr=r(E0t,"TFDebertaForQuestionAnswering"),E0t.forEach(t),wAr=r(iIe," (DeBERTa model)"),iIe.forEach(t),AAr=i(ge),dC=n(ge,"LI",{});var dIe=s(dC);nTe=n(dIe,"STRONG",{});var C0t=s(nTe);yAr=r(C0t,"deberta-v2"),C0t.forEach(t),LAr=r(dIe," \u2014 "),AJ=n(dIe,"A",{href:!0});var w0t=s(AJ);xAr=r(w0t,"TFDebertaV2ForQuestionAnswering"),w0t.forEach(t),$Ar=r(dIe," (DeBERTa-v2 model)"),dIe.forEach(t),kAr=i(ge),cC=n(ge,"LI",{});var cIe=s(cC);sTe=n(cIe,"STRONG",{});var A0t=s(sTe);SAr=r(A0t,"distilbert"),A0t.forEach(t),RAr=r(cIe," \u2014 "),yJ=n(cIe,"A",{href:!0});var y0t=s(yJ);PAr=r(y0t,"TFDistilBertForQuestionAnswering"),y0t.forEach(t),BAr=r(cIe," (DistilBERT model)"),cIe.forEach(t),IAr=i(ge),fC=n(ge,"LI",{});var fIe=s(fC);lTe=n(fIe,"STRONG",{});var L0t=s(lTe);NAr=r(L0t,"electra"),L0t.forEach(t),qAr=r(fIe," \u2014 "),LJ=n(fIe,"A",{href:!0});var x0t=s(LJ);jAr=r(x0t,"TFElectraForQuestionAnswering"),x0t.forEach(t),DAr=r(fIe," (ELECTRA model)"),fIe.forEach(t),GAr=i(ge),mC=n(ge,"LI",{});var mIe=s(mC);iTe=n(mIe,"STRONG",{});var $0t=s(iTe);OAr=r($0t,"flaubert"),$0t.forEach(t),VAr=r(mIe," \u2014 "),xJ=n(mIe,"A",{href:!0});var k0t=s(xJ);XAr=r(k0t,"TFFlaubertForQuestionAnsweringSimple"),k0t.forEach(t),zAr=r(mIe," (FlauBERT model)"),mIe.forEach(t),WAr=i(ge),gC=n(ge,"LI",{});var gIe=s(gC);dTe=n(gIe,"STRONG",{});var S0t=s(dTe);QAr=r(S0t,"funnel"),S0t.forEach(t),HAr=r(gIe," \u2014 "),$J=n(gIe,"A",{href:!0});var R0t=s($J);UAr=r(R0t,"TFFunnelForQuestionAnswering"),R0t.forEach(t),JAr=r(gIe," (Funnel Transformer model)"),gIe.forEach(t),YAr=i(ge),hC=n(ge,"LI",{});var hIe=s(hC);cTe=n(hIe,"STRONG",{});var P0t=s(cTe);KAr=r(P0t,"gptj"),P0t.forEach(t),ZAr=r(hIe," \u2014 "),kJ=n(hIe,"A",{href:!0});var B0t=s(kJ);eyr=r(B0t,"TFGPTJForQuestionAnswering"),B0t.forEach(t),oyr=r(hIe," (GPT-J model)"),hIe.forEach(t),ryr=i(ge),pC=n(ge,"LI",{});var pIe=s(pC);fTe=n(pIe,"STRONG",{});var I0t=s(fTe);tyr=r(I0t,"longformer"),I0t.forEach(t),ayr=r(pIe," \u2014 "),SJ=n(pIe,"A",{href:!0});var N0t=s(SJ);nyr=r(N0t,"TFLongformerForQuestionAnswering"),N0t.forEach(t),syr=r(pIe," (Longformer model)"),pIe.forEach(t),lyr=i(ge),_C=n(ge,"LI",{});var _Ie=s(_C);mTe=n(_Ie,"STRONG",{});var q0t=s(mTe);iyr=r(q0t,"mobilebert"),q0t.forEach(t),dyr=r(_Ie," \u2014 "),RJ=n(_Ie,"A",{href:!0});var j0t=s(RJ);cyr=r(j0t,"TFMobileBertForQuestionAnswering"),j0t.forEach(t),fyr=r(_Ie," (MobileBERT model)"),_Ie.forEach(t),myr=i(ge),uC=n(ge,"LI",{});var uIe=s(uC);gTe=n(uIe,"STRONG",{});var D0t=s(gTe);gyr=r(D0t,"mpnet"),D0t.forEach(t),hyr=r(uIe," \u2014 "),PJ=n(uIe,"A",{href:!0});var G0t=s(PJ);pyr=r(G0t,"TFMPNetForQuestionAnswering"),G0t.forEach(t),_yr=r(uIe," (MPNet model)"),uIe.forEach(t),uyr=i(ge),bC=n(ge,"LI",{});var bIe=s(bC);hTe=n(bIe,"STRONG",{});var O0t=s(hTe);byr=r(O0t,"rembert"),O0t.forEach(t),vyr=r(bIe," \u2014 "),BJ=n(bIe,"A",{href:!0});var V0t=s(BJ);Fyr=r(V0t,"TFRemBertForQuestionAnswering"),V0t.forEach(t),Tyr=r(bIe," (RemBERT model)"),bIe.forEach(t),Myr=i(ge),vC=n(ge,"LI",{});var vIe=s(vC);pTe=n(vIe,"STRONG",{});var X0t=s(pTe);Eyr=r(X0t,"roberta"),X0t.forEach(t),Cyr=r(vIe," \u2014 "),IJ=n(vIe,"A",{href:!0});var z0t=s(IJ);wyr=r(z0t,"TFRobertaForQuestionAnswering"),z0t.forEach(t),Ayr=r(vIe," (RoBERTa model)"),vIe.forEach(t),yyr=i(ge),FC=n(ge,"LI",{});var FIe=s(FC);_Te=n(FIe,"STRONG",{});var W0t=s(_Te);Lyr=r(W0t,"roformer"),W0t.forEach(t),xyr=r(FIe," \u2014 "),NJ=n(FIe,"A",{href:!0});var Q0t=s(NJ);$yr=r(Q0t,"TFRoFormerForQuestionAnswering"),Q0t.forEach(t),kyr=r(FIe," (RoFormer model)"),FIe.forEach(t),Syr=i(ge),TC=n(ge,"LI",{});var TIe=s(TC);uTe=n(TIe,"STRONG",{});var H0t=s(uTe);Ryr=r(H0t,"xlm"),H0t.forEach(t),Pyr=r(TIe," \u2014 "),qJ=n(TIe,"A",{href:!0});var U0t=s(qJ);Byr=r(U0t,"TFXLMForQuestionAnsweringSimple"),U0t.forEach(t),Iyr=r(TIe," (XLM model)"),TIe.forEach(t),Nyr=i(ge),MC=n(ge,"LI",{});var MIe=s(MC);bTe=n(MIe,"STRONG",{});var J0t=s(bTe);qyr=r(J0t,"xlm-roberta"),J0t.forEach(t),jyr=r(MIe," \u2014 "),jJ=n(MIe,"A",{href:!0});var Y0t=s(jJ);Dyr=r(Y0t,"TFXLMRobertaForQuestionAnswering"),Y0t.forEach(t),Gyr=r(MIe," (XLM-RoBERTa model)"),MIe.forEach(t),Oyr=i(ge),EC=n(ge,"LI",{});var EIe=s(EC);vTe=n(EIe,"STRONG",{});var K0t=s(vTe);Vyr=r(K0t,"xlnet"),K0t.forEach(t),Xyr=r(EIe," \u2014 "),DJ=n(EIe,"A",{href:!0});var Z0t=s(DJ);zyr=r(Z0t,"TFXLNetForQuestionAnsweringSimple"),Z0t.forEach(t),Wyr=r(EIe," (XLNet model)"),EIe.forEach(t),ge.forEach(t),Qyr=i(Nl),T(CC.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),Kje=i(f),Cc=n(f,"H2",{class:!0});var nOe=s(Cc);wC=n(nOe,"A",{id:!0,class:!0,href:!0});var eAt=s(wC);FTe=n(eAt,"SPAN",{});var oAt=s(FTe);T(T9.$$.fragment,oAt),oAt.forEach(t),eAt.forEach(t),Hyr=i(nOe),TTe=n(nOe,"SPAN",{});var rAt=s(TTe);Uyr=r(rAt,"TFAutoModelForVision2Seq"),rAt.forEach(t),nOe.forEach(t),Zje=i(f),dr=n(f,"DIV",{class:!0});var ql=s(dr);T(M9.$$.fragment,ql),Jyr=i(ql),wc=n(ql,"P",{});var Wee=s(wc);Yyr=r(Wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),GJ=n(Wee,"A",{href:!0});var tAt=s(GJ);Kyr=r(tAt,"from_pretrained()"),tAt.forEach(t),Zyr=r(Wee," class method or the "),OJ=n(Wee,"A",{href:!0});var aAt=s(OJ);eLr=r(aAt,"from_config()"),aAt.forEach(t),oLr=r(Wee,` class
method.`),Wee.forEach(t),rLr=i(ql),E9=n(ql,"P",{});var sOe=s(E9);tLr=r(sOe,"This class cannot be instantiated directly using "),MTe=n(sOe,"CODE",{});var nAt=s(MTe);aLr=r(nAt,"__init__()"),nAt.forEach(t),nLr=r(sOe," (throws an error)."),sOe.forEach(t),sLr=i(ql),jt=n(ql,"DIV",{class:!0});var oA=s(jt);T(C9.$$.fragment,oA),lLr=i(oA),ETe=n(oA,"P",{});var sAt=s(ETe);iLr=r(sAt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),sAt.forEach(t),dLr=i(oA),Ac=n(oA,"P",{});var Qee=s(Ac);cLr=r(Qee,`Note:
Loading a model from its configuration file does `),CTe=n(Qee,"STRONG",{});var lAt=s(CTe);fLr=r(lAt,"not"),lAt.forEach(t),mLr=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=n(Qee,"A",{href:!0});var iAt=s(VJ);gLr=r(iAt,"from_pretrained()"),iAt.forEach(t),hLr=r(Qee," to load the model weights."),Qee.forEach(t),pLr=i(oA),T(AC.$$.fragment,oA),oA.forEach(t),_Lr=i(ql),Nr=n(ql,"DIV",{class:!0});var jl=s(Nr);T(w9.$$.fragment,jl),uLr=i(jl),wTe=n(jl,"P",{});var dAt=s(wTe);bLr=r(dAt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),dAt.forEach(t),vLr=i(jl),mn=n(jl,"P",{});var rA=s(mn);FLr=r(rA,"The model class to instantiate is selected based on the "),ATe=n(rA,"CODE",{});var cAt=s(ATe);TLr=r(cAt,"model_type"),cAt.forEach(t),MLr=r(rA,` property of the config object (either
passed as an argument or loaded from `),yTe=n(rA,"CODE",{});var fAt=s(yTe);ELr=r(fAt,"pretrained_model_name_or_path"),fAt.forEach(t),CLr=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LTe=n(rA,"CODE",{});var mAt=s(LTe);wLr=r(mAt,"pretrained_model_name_or_path"),mAt.forEach(t),ALr=r(rA,":"),rA.forEach(t),yLr=i(jl),xTe=n(jl,"UL",{});var gAt=s(xTe);yC=n(gAt,"LI",{});var CIe=s(yC);$Te=n(CIe,"STRONG",{});var hAt=s($Te);LLr=r(hAt,"vision-encoder-decoder"),hAt.forEach(t),xLr=r(CIe," \u2014 "),XJ=n(CIe,"A",{href:!0});var pAt=s(XJ);$Lr=r(pAt,"TFVisionEncoderDecoderModel"),pAt.forEach(t),kLr=r(CIe," (Vision Encoder decoder model)"),CIe.forEach(t),gAt.forEach(t),SLr=i(jl),T(LC.$$.fragment,jl),jl.forEach(t),ql.forEach(t),eDe=i(f),yc=n(f,"H2",{class:!0});var lOe=s(yc);xC=n(lOe,"A",{id:!0,class:!0,href:!0});var _At=s(xC);kTe=n(_At,"SPAN",{});var uAt=s(kTe);T(A9.$$.fragment,uAt),uAt.forEach(t),_At.forEach(t),RLr=i(lOe),STe=n(lOe,"SPAN",{});var bAt=s(STe);PLr=r(bAt,"TFAutoModelForSpeechSeq2Seq"),bAt.forEach(t),lOe.forEach(t),oDe=i(f),cr=n(f,"DIV",{class:!0});var Dl=s(cr);T(y9.$$.fragment,Dl),BLr=i(Dl),Lc=n(Dl,"P",{});var Hee=s(Lc);ILr=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),zJ=n(Hee,"A",{href:!0});var vAt=s(zJ);NLr=r(vAt,"from_pretrained()"),vAt.forEach(t),qLr=r(Hee," class method or the "),WJ=n(Hee,"A",{href:!0});var FAt=s(WJ);jLr=r(FAt,"from_config()"),FAt.forEach(t),DLr=r(Hee,` class
method.`),Hee.forEach(t),GLr=i(Dl),L9=n(Dl,"P",{});var iOe=s(L9);OLr=r(iOe,"This class cannot be instantiated directly using "),RTe=n(iOe,"CODE",{});var TAt=s(RTe);VLr=r(TAt,"__init__()"),TAt.forEach(t),XLr=r(iOe," (throws an error)."),iOe.forEach(t),zLr=i(Dl),Dt=n(Dl,"DIV",{class:!0});var tA=s(Dt);T(x9.$$.fragment,tA),WLr=i(tA),PTe=n(tA,"P",{});var MAt=s(PTe);QLr=r(MAt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),MAt.forEach(t),HLr=i(tA),xc=n(tA,"P",{});var Uee=s(xc);ULr=r(Uee,`Note:
Loading a model from its configuration file does `),BTe=n(Uee,"STRONG",{});var EAt=s(BTe);JLr=r(EAt,"not"),EAt.forEach(t),YLr=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=n(Uee,"A",{href:!0});var CAt=s(QJ);KLr=r(CAt,"from_pretrained()"),CAt.forEach(t),ZLr=r(Uee," to load the model weights."),Uee.forEach(t),e8r=i(tA),T($C.$$.fragment,tA),tA.forEach(t),o8r=i(Dl),qr=n(Dl,"DIV",{class:!0});var Gl=s(qr);T($9.$$.fragment,Gl),r8r=i(Gl),ITe=n(Gl,"P",{});var wAt=s(ITe);t8r=r(wAt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),wAt.forEach(t),a8r=i(Gl),gn=n(Gl,"P",{});var aA=s(gn);n8r=r(aA,"The model class to instantiate is selected based on the "),NTe=n(aA,"CODE",{});var AAt=s(NTe);s8r=r(AAt,"model_type"),AAt.forEach(t),l8r=r(aA,` property of the config object (either
passed as an argument or loaded from `),qTe=n(aA,"CODE",{});var yAt=s(qTe);i8r=r(yAt,"pretrained_model_name_or_path"),yAt.forEach(t),d8r=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jTe=n(aA,"CODE",{});var LAt=s(jTe);c8r=r(LAt,"pretrained_model_name_or_path"),LAt.forEach(t),f8r=r(aA,":"),aA.forEach(t),m8r=i(Gl),DTe=n(Gl,"UL",{});var xAt=s(DTe);kC=n(xAt,"LI",{});var wIe=s(kC);GTe=n(wIe,"STRONG",{});var $At=s(GTe);g8r=r($At,"speech_to_text"),$At.forEach(t),h8r=r(wIe," \u2014 "),HJ=n(wIe,"A",{href:!0});var kAt=s(HJ);p8r=r(kAt,"TFSpeech2TextForConditionalGeneration"),kAt.forEach(t),_8r=r(wIe," (Speech2Text model)"),wIe.forEach(t),xAt.forEach(t),u8r=i(Gl),T(SC.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),rDe=i(f),$c=n(f,"H2",{class:!0});var dOe=s($c);RC=n(dOe,"A",{id:!0,class:!0,href:!0});var SAt=s(RC);OTe=n(SAt,"SPAN",{});var RAt=s(OTe);T(k9.$$.fragment,RAt),RAt.forEach(t),SAt.forEach(t),b8r=i(dOe),VTe=n(dOe,"SPAN",{});var PAt=s(VTe);v8r=r(PAt,"FlaxAutoModel"),PAt.forEach(t),dOe.forEach(t),tDe=i(f),fr=n(f,"DIV",{class:!0});var Ol=s(fr);T(S9.$$.fragment,Ol),F8r=i(Ol),kc=n(Ol,"P",{});var Jee=s(kc);T8r=r(Jee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),UJ=n(Jee,"A",{href:!0});var BAt=s(UJ);M8r=r(BAt,"from_pretrained()"),BAt.forEach(t),E8r=r(Jee," class method or the "),JJ=n(Jee,"A",{href:!0});var IAt=s(JJ);C8r=r(IAt,"from_config()"),IAt.forEach(t),w8r=r(Jee,` class
method.`),Jee.forEach(t),A8r=i(Ol),R9=n(Ol,"P",{});var cOe=s(R9);y8r=r(cOe,"This class cannot be instantiated directly using "),XTe=n(cOe,"CODE",{});var NAt=s(XTe);L8r=r(NAt,"__init__()"),NAt.forEach(t),x8r=r(cOe," (throws an error)."),cOe.forEach(t),$8r=i(Ol),Gt=n(Ol,"DIV",{class:!0});var nA=s(Gt);T(P9.$$.fragment,nA),k8r=i(nA),zTe=n(nA,"P",{});var qAt=s(zTe);S8r=r(qAt,"Instantiates one of the base model classes of the library from a configuration."),qAt.forEach(t),R8r=i(nA),Sc=n(nA,"P",{});var Yee=s(Sc);P8r=r(Yee,`Note:
Loading a model from its configuration file does `),WTe=n(Yee,"STRONG",{});var jAt=s(WTe);B8r=r(jAt,"not"),jAt.forEach(t),I8r=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),YJ=n(Yee,"A",{href:!0});var DAt=s(YJ);N8r=r(DAt,"from_pretrained()"),DAt.forEach(t),q8r=r(Yee," to load the model weights."),Yee.forEach(t),j8r=i(nA),T(PC.$$.fragment,nA),nA.forEach(t),D8r=i(Ol),jr=n(Ol,"DIV",{class:!0});var Vl=s(jr);T(B9.$$.fragment,Vl),G8r=i(Vl),QTe=n(Vl,"P",{});var GAt=s(QTe);O8r=r(GAt,"Instantiate one of the base model classes of the library from a pretrained model."),GAt.forEach(t),V8r=i(Vl),hn=n(Vl,"P",{});var sA=s(hn);X8r=r(sA,"The model class to instantiate is selected based on the "),HTe=n(sA,"CODE",{});var OAt=s(HTe);z8r=r(OAt,"model_type"),OAt.forEach(t),W8r=r(sA,` property of the config object (either
passed as an argument or loaded from `),UTe=n(sA,"CODE",{});var VAt=s(UTe);Q8r=r(VAt,"pretrained_model_name_or_path"),VAt.forEach(t),H8r=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JTe=n(sA,"CODE",{});var XAt=s(JTe);U8r=r(XAt,"pretrained_model_name_or_path"),XAt.forEach(t),J8r=r(sA,":"),sA.forEach(t),Y8r=i(Vl),te=n(Vl,"UL",{});var ne=s(te);BC=n(ne,"LI",{});var AIe=s(BC);YTe=n(AIe,"STRONG",{});var zAt=s(YTe);K8r=r(zAt,"albert"),zAt.forEach(t),Z8r=r(AIe," \u2014 "),KJ=n(AIe,"A",{href:!0});var WAt=s(KJ);e9r=r(WAt,"FlaxAlbertModel"),WAt.forEach(t),o9r=r(AIe," (ALBERT model)"),AIe.forEach(t),r9r=i(ne),IC=n(ne,"LI",{});var yIe=s(IC);KTe=n(yIe,"STRONG",{});var QAt=s(KTe);t9r=r(QAt,"bart"),QAt.forEach(t),a9r=r(yIe," \u2014 "),ZJ=n(yIe,"A",{href:!0});var HAt=s(ZJ);n9r=r(HAt,"FlaxBartModel"),HAt.forEach(t),s9r=r(yIe," (BART model)"),yIe.forEach(t),l9r=i(ne),NC=n(ne,"LI",{});var LIe=s(NC);ZTe=n(LIe,"STRONG",{});var UAt=s(ZTe);i9r=r(UAt,"beit"),UAt.forEach(t),d9r=r(LIe," \u2014 "),eY=n(LIe,"A",{href:!0});var JAt=s(eY);c9r=r(JAt,"FlaxBeitModel"),JAt.forEach(t),f9r=r(LIe," (BEiT model)"),LIe.forEach(t),m9r=i(ne),qC=n(ne,"LI",{});var xIe=s(qC);e7e=n(xIe,"STRONG",{});var YAt=s(e7e);g9r=r(YAt,"bert"),YAt.forEach(t),h9r=r(xIe," \u2014 "),oY=n(xIe,"A",{href:!0});var KAt=s(oY);p9r=r(KAt,"FlaxBertModel"),KAt.forEach(t),_9r=r(xIe," (BERT model)"),xIe.forEach(t),u9r=i(ne),jC=n(ne,"LI",{});var $Ie=s(jC);o7e=n($Ie,"STRONG",{});var ZAt=s(o7e);b9r=r(ZAt,"big_bird"),ZAt.forEach(t),v9r=r($Ie," \u2014 "),rY=n($Ie,"A",{href:!0});var eyt=s(rY);F9r=r(eyt,"FlaxBigBirdModel"),eyt.forEach(t),T9r=r($Ie," (BigBird model)"),$Ie.forEach(t),M9r=i(ne),DC=n(ne,"LI",{});var kIe=s(DC);r7e=n(kIe,"STRONG",{});var oyt=s(r7e);E9r=r(oyt,"blenderbot"),oyt.forEach(t),C9r=r(kIe," \u2014 "),tY=n(kIe,"A",{href:!0});var ryt=s(tY);w9r=r(ryt,"FlaxBlenderbotModel"),ryt.forEach(t),A9r=r(kIe," (Blenderbot model)"),kIe.forEach(t),y9r=i(ne),GC=n(ne,"LI",{});var SIe=s(GC);t7e=n(SIe,"STRONG",{});var tyt=s(t7e);L9r=r(tyt,"blenderbot-small"),tyt.forEach(t),x9r=r(SIe," \u2014 "),aY=n(SIe,"A",{href:!0});var ayt=s(aY);$9r=r(ayt,"FlaxBlenderbotSmallModel"),ayt.forEach(t),k9r=r(SIe," (BlenderbotSmall model)"),SIe.forEach(t),S9r=i(ne),OC=n(ne,"LI",{});var RIe=s(OC);a7e=n(RIe,"STRONG",{});var nyt=s(a7e);R9r=r(nyt,"clip"),nyt.forEach(t),P9r=r(RIe," \u2014 "),nY=n(RIe,"A",{href:!0});var syt=s(nY);B9r=r(syt,"FlaxCLIPModel"),syt.forEach(t),I9r=r(RIe," (CLIP model)"),RIe.forEach(t),N9r=i(ne),VC=n(ne,"LI",{});var PIe=s(VC);n7e=n(PIe,"STRONG",{});var lyt=s(n7e);q9r=r(lyt,"distilbert"),lyt.forEach(t),j9r=r(PIe," \u2014 "),sY=n(PIe,"A",{href:!0});var iyt=s(sY);D9r=r(iyt,"FlaxDistilBertModel"),iyt.forEach(t),G9r=r(PIe," (DistilBERT model)"),PIe.forEach(t),O9r=i(ne),XC=n(ne,"LI",{});var BIe=s(XC);s7e=n(BIe,"STRONG",{});var dyt=s(s7e);V9r=r(dyt,"electra"),dyt.forEach(t),X9r=r(BIe," \u2014 "),lY=n(BIe,"A",{href:!0});var cyt=s(lY);z9r=r(cyt,"FlaxElectraModel"),cyt.forEach(t),W9r=r(BIe," (ELECTRA model)"),BIe.forEach(t),Q9r=i(ne),zC=n(ne,"LI",{});var IIe=s(zC);l7e=n(IIe,"STRONG",{});var fyt=s(l7e);H9r=r(fyt,"gpt2"),fyt.forEach(t),U9r=r(IIe," \u2014 "),iY=n(IIe,"A",{href:!0});var myt=s(iY);J9r=r(myt,"FlaxGPT2Model"),myt.forEach(t),Y9r=r(IIe," (OpenAI GPT-2 model)"),IIe.forEach(t),K9r=i(ne),WC=n(ne,"LI",{});var NIe=s(WC);i7e=n(NIe,"STRONG",{});var gyt=s(i7e);Z9r=r(gyt,"gpt_neo"),gyt.forEach(t),exr=r(NIe," \u2014 "),dY=n(NIe,"A",{href:!0});var hyt=s(dY);oxr=r(hyt,"FlaxGPTNeoModel"),hyt.forEach(t),rxr=r(NIe," (GPT Neo model)"),NIe.forEach(t),txr=i(ne),QC=n(ne,"LI",{});var qIe=s(QC);d7e=n(qIe,"STRONG",{});var pyt=s(d7e);axr=r(pyt,"gptj"),pyt.forEach(t),nxr=r(qIe," \u2014 "),cY=n(qIe,"A",{href:!0});var _yt=s(cY);sxr=r(_yt,"FlaxGPTJModel"),_yt.forEach(t),lxr=r(qIe," (GPT-J model)"),qIe.forEach(t),ixr=i(ne),HC=n(ne,"LI",{});var jIe=s(HC);c7e=n(jIe,"STRONG",{});var uyt=s(c7e);dxr=r(uyt,"marian"),uyt.forEach(t),cxr=r(jIe," \u2014 "),fY=n(jIe,"A",{href:!0});var byt=s(fY);fxr=r(byt,"FlaxMarianModel"),byt.forEach(t),mxr=r(jIe," (Marian model)"),jIe.forEach(t),gxr=i(ne),UC=n(ne,"LI",{});var DIe=s(UC);f7e=n(DIe,"STRONG",{});var vyt=s(f7e);hxr=r(vyt,"mbart"),vyt.forEach(t),pxr=r(DIe," \u2014 "),mY=n(DIe,"A",{href:!0});var Fyt=s(mY);_xr=r(Fyt,"FlaxMBartModel"),Fyt.forEach(t),uxr=r(DIe," (mBART model)"),DIe.forEach(t),bxr=i(ne),JC=n(ne,"LI",{});var GIe=s(JC);m7e=n(GIe,"STRONG",{});var Tyt=s(m7e);vxr=r(Tyt,"mt5"),Tyt.forEach(t),Fxr=r(GIe," \u2014 "),gY=n(GIe,"A",{href:!0});var Myt=s(gY);Txr=r(Myt,"FlaxMT5Model"),Myt.forEach(t),Mxr=r(GIe," (mT5 model)"),GIe.forEach(t),Exr=i(ne),YC=n(ne,"LI",{});var OIe=s(YC);g7e=n(OIe,"STRONG",{});var Eyt=s(g7e);Cxr=r(Eyt,"pegasus"),Eyt.forEach(t),wxr=r(OIe," \u2014 "),hY=n(OIe,"A",{href:!0});var Cyt=s(hY);Axr=r(Cyt,"FlaxPegasusModel"),Cyt.forEach(t),yxr=r(OIe," (Pegasus model)"),OIe.forEach(t),Lxr=i(ne),KC=n(ne,"LI",{});var VIe=s(KC);h7e=n(VIe,"STRONG",{});var wyt=s(h7e);xxr=r(wyt,"roberta"),wyt.forEach(t),$xr=r(VIe," \u2014 "),pY=n(VIe,"A",{href:!0});var Ayt=s(pY);kxr=r(Ayt,"FlaxRobertaModel"),Ayt.forEach(t),Sxr=r(VIe," (RoBERTa model)"),VIe.forEach(t),Rxr=i(ne),ZC=n(ne,"LI",{});var XIe=s(ZC);p7e=n(XIe,"STRONG",{});var yyt=s(p7e);Pxr=r(yyt,"roformer"),yyt.forEach(t),Bxr=r(XIe," \u2014 "),_Y=n(XIe,"A",{href:!0});var Lyt=s(_Y);Ixr=r(Lyt,"FlaxRoFormerModel"),Lyt.forEach(t),Nxr=r(XIe," (RoFormer model)"),XIe.forEach(t),qxr=i(ne),e5=n(ne,"LI",{});var zIe=s(e5);_7e=n(zIe,"STRONG",{});var xyt=s(_7e);jxr=r(xyt,"t5"),xyt.forEach(t),Dxr=r(zIe," \u2014 "),uY=n(zIe,"A",{href:!0});var $yt=s(uY);Gxr=r($yt,"FlaxT5Model"),$yt.forEach(t),Oxr=r(zIe," (T5 model)"),zIe.forEach(t),Vxr=i(ne),o5=n(ne,"LI",{});var WIe=s(o5);u7e=n(WIe,"STRONG",{});var kyt=s(u7e);Xxr=r(kyt,"vision-text-dual-encoder"),kyt.forEach(t),zxr=r(WIe," \u2014 "),bY=n(WIe,"A",{href:!0});var Syt=s(bY);Wxr=r(Syt,"FlaxVisionTextDualEncoderModel"),Syt.forEach(t),Qxr=r(WIe," (VisionTextDualEncoder model)"),WIe.forEach(t),Hxr=i(ne),r5=n(ne,"LI",{});var QIe=s(r5);b7e=n(QIe,"STRONG",{});var Ryt=s(b7e);Uxr=r(Ryt,"vit"),Ryt.forEach(t),Jxr=r(QIe," \u2014 "),vY=n(QIe,"A",{href:!0});var Pyt=s(vY);Yxr=r(Pyt,"FlaxViTModel"),Pyt.forEach(t),Kxr=r(QIe," (ViT model)"),QIe.forEach(t),Zxr=i(ne),t5=n(ne,"LI",{});var HIe=s(t5);v7e=n(HIe,"STRONG",{});var Byt=s(v7e);e$r=r(Byt,"wav2vec2"),Byt.forEach(t),o$r=r(HIe," \u2014 "),FY=n(HIe,"A",{href:!0});var Iyt=s(FY);r$r=r(Iyt,"FlaxWav2Vec2Model"),Iyt.forEach(t),t$r=r(HIe," (Wav2Vec2 model)"),HIe.forEach(t),a$r=i(ne),a5=n(ne,"LI",{});var UIe=s(a5);F7e=n(UIe,"STRONG",{});var Nyt=s(F7e);n$r=r(Nyt,"xglm"),Nyt.forEach(t),s$r=r(UIe," \u2014 "),TY=n(UIe,"A",{href:!0});var qyt=s(TY);l$r=r(qyt,"FlaxXGLMModel"),qyt.forEach(t),i$r=r(UIe," (XGLM model)"),UIe.forEach(t),d$r=i(ne),n5=n(ne,"LI",{});var JIe=s(n5);T7e=n(JIe,"STRONG",{});var jyt=s(T7e);c$r=r(jyt,"xlm-roberta"),jyt.forEach(t),f$r=r(JIe," \u2014 "),MY=n(JIe,"A",{href:!0});var Dyt=s(MY);m$r=r(Dyt,"FlaxXLMRobertaModel"),Dyt.forEach(t),g$r=r(JIe," (XLM-RoBERTa model)"),JIe.forEach(t),ne.forEach(t),h$r=i(Vl),T(s5.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),aDe=i(f),Rc=n(f,"H2",{class:!0});var fOe=s(Rc);l5=n(fOe,"A",{id:!0,class:!0,href:!0});var Gyt=s(l5);M7e=n(Gyt,"SPAN",{});var Oyt=s(M7e);T(I9.$$.fragment,Oyt),Oyt.forEach(t),Gyt.forEach(t),p$r=i(fOe),E7e=n(fOe,"SPAN",{});var Vyt=s(E7e);_$r=r(Vyt,"FlaxAutoModelForCausalLM"),Vyt.forEach(t),fOe.forEach(t),nDe=i(f),mr=n(f,"DIV",{class:!0});var Xl=s(mr);T(N9.$$.fragment,Xl),u$r=i(Xl),Pc=n(Xl,"P",{});var Kee=s(Pc);b$r=r(Kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),EY=n(Kee,"A",{href:!0});var Xyt=s(EY);v$r=r(Xyt,"from_pretrained()"),Xyt.forEach(t),F$r=r(Kee," class method or the "),CY=n(Kee,"A",{href:!0});var zyt=s(CY);T$r=r(zyt,"from_config()"),zyt.forEach(t),M$r=r(Kee,` class
method.`),Kee.forEach(t),E$r=i(Xl),q9=n(Xl,"P",{});var mOe=s(q9);C$r=r(mOe,"This class cannot be instantiated directly using "),C7e=n(mOe,"CODE",{});var Wyt=s(C7e);w$r=r(Wyt,"__init__()"),Wyt.forEach(t),A$r=r(mOe," (throws an error)."),mOe.forEach(t),y$r=i(Xl),Ot=n(Xl,"DIV",{class:!0});var lA=s(Ot);T(j9.$$.fragment,lA),L$r=i(lA),w7e=n(lA,"P",{});var Qyt=s(w7e);x$r=r(Qyt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Qyt.forEach(t),$$r=i(lA),Bc=n(lA,"P",{});var Zee=s(Bc);k$r=r(Zee,`Note:
Loading a model from its configuration file does `),A7e=n(Zee,"STRONG",{});var Hyt=s(A7e);S$r=r(Hyt,"not"),Hyt.forEach(t),R$r=r(Zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=n(Zee,"A",{href:!0});var Uyt=s(wY);P$r=r(Uyt,"from_pretrained()"),Uyt.forEach(t),B$r=r(Zee," to load the model weights."),Zee.forEach(t),I$r=i(lA),T(i5.$$.fragment,lA),lA.forEach(t),N$r=i(Xl),Dr=n(Xl,"DIV",{class:!0});var zl=s(Dr);T(D9.$$.fragment,zl),q$r=i(zl),y7e=n(zl,"P",{});var Jyt=s(y7e);j$r=r(Jyt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Jyt.forEach(t),D$r=i(zl),pn=n(zl,"P",{});var iA=s(pn);G$r=r(iA,"The model class to instantiate is selected based on the "),L7e=n(iA,"CODE",{});var Yyt=s(L7e);O$r=r(Yyt,"model_type"),Yyt.forEach(t),V$r=r(iA,` property of the config object (either
passed as an argument or loaded from `),x7e=n(iA,"CODE",{});var Kyt=s(x7e);X$r=r(Kyt,"pretrained_model_name_or_path"),Kyt.forEach(t),z$r=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$7e=n(iA,"CODE",{});var Zyt=s($7e);W$r=r(Zyt,"pretrained_model_name_or_path"),Zyt.forEach(t),Q$r=r(iA,":"),iA.forEach(t),H$r=i(zl),Re=n(zl,"UL",{});var Xe=s(Re);d5=n(Xe,"LI",{});var YIe=s(d5);k7e=n(YIe,"STRONG",{});var eLt=s(k7e);U$r=r(eLt,"bart"),eLt.forEach(t),J$r=r(YIe," \u2014 "),AY=n(YIe,"A",{href:!0});var oLt=s(AY);Y$r=r(oLt,"FlaxBartForCausalLM"),oLt.forEach(t),K$r=r(YIe," (BART model)"),YIe.forEach(t),Z$r=i(Xe),c5=n(Xe,"LI",{});var KIe=s(c5);S7e=n(KIe,"STRONG",{});var rLt=s(S7e);ekr=r(rLt,"bert"),rLt.forEach(t),okr=r(KIe," \u2014 "),yY=n(KIe,"A",{href:!0});var tLt=s(yY);rkr=r(tLt,"FlaxBertForCausalLM"),tLt.forEach(t),tkr=r(KIe," (BERT model)"),KIe.forEach(t),akr=i(Xe),f5=n(Xe,"LI",{});var ZIe=s(f5);R7e=n(ZIe,"STRONG",{});var aLt=s(R7e);nkr=r(aLt,"big_bird"),aLt.forEach(t),skr=r(ZIe," \u2014 "),LY=n(ZIe,"A",{href:!0});var nLt=s(LY);lkr=r(nLt,"FlaxBigBirdForCausalLM"),nLt.forEach(t),ikr=r(ZIe," (BigBird model)"),ZIe.forEach(t),dkr=i(Xe),m5=n(Xe,"LI",{});var eNe=s(m5);P7e=n(eNe,"STRONG",{});var sLt=s(P7e);ckr=r(sLt,"electra"),sLt.forEach(t),fkr=r(eNe," \u2014 "),xY=n(eNe,"A",{href:!0});var lLt=s(xY);mkr=r(lLt,"FlaxElectraForCausalLM"),lLt.forEach(t),gkr=r(eNe," (ELECTRA model)"),eNe.forEach(t),hkr=i(Xe),g5=n(Xe,"LI",{});var oNe=s(g5);B7e=n(oNe,"STRONG",{});var iLt=s(B7e);pkr=r(iLt,"gpt2"),iLt.forEach(t),_kr=r(oNe," \u2014 "),$Y=n(oNe,"A",{href:!0});var dLt=s($Y);ukr=r(dLt,"FlaxGPT2LMHeadModel"),dLt.forEach(t),bkr=r(oNe," (OpenAI GPT-2 model)"),oNe.forEach(t),vkr=i(Xe),h5=n(Xe,"LI",{});var rNe=s(h5);I7e=n(rNe,"STRONG",{});var cLt=s(I7e);Fkr=r(cLt,"gpt_neo"),cLt.forEach(t),Tkr=r(rNe," \u2014 "),kY=n(rNe,"A",{href:!0});var fLt=s(kY);Mkr=r(fLt,"FlaxGPTNeoForCausalLM"),fLt.forEach(t),Ekr=r(rNe," (GPT Neo model)"),rNe.forEach(t),Ckr=i(Xe),p5=n(Xe,"LI",{});var tNe=s(p5);N7e=n(tNe,"STRONG",{});var mLt=s(N7e);wkr=r(mLt,"gptj"),mLt.forEach(t),Akr=r(tNe," \u2014 "),SY=n(tNe,"A",{href:!0});var gLt=s(SY);ykr=r(gLt,"FlaxGPTJForCausalLM"),gLt.forEach(t),Lkr=r(tNe," (GPT-J model)"),tNe.forEach(t),xkr=i(Xe),_5=n(Xe,"LI",{});var aNe=s(_5);q7e=n(aNe,"STRONG",{});var hLt=s(q7e);$kr=r(hLt,"roberta"),hLt.forEach(t),kkr=r(aNe," \u2014 "),RY=n(aNe,"A",{href:!0});var pLt=s(RY);Skr=r(pLt,"FlaxRobertaForCausalLM"),pLt.forEach(t),Rkr=r(aNe," (RoBERTa model)"),aNe.forEach(t),Pkr=i(Xe),u5=n(Xe,"LI",{});var nNe=s(u5);j7e=n(nNe,"STRONG",{});var _Lt=s(j7e);Bkr=r(_Lt,"xglm"),_Lt.forEach(t),Ikr=r(nNe," \u2014 "),PY=n(nNe,"A",{href:!0});var uLt=s(PY);Nkr=r(uLt,"FlaxXGLMForCausalLM"),uLt.forEach(t),qkr=r(nNe," (XGLM model)"),nNe.forEach(t),Xe.forEach(t),jkr=i(zl),T(b5.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),sDe=i(f),Ic=n(f,"H2",{class:!0});var gOe=s(Ic);v5=n(gOe,"A",{id:!0,class:!0,href:!0});var bLt=s(v5);D7e=n(bLt,"SPAN",{});var vLt=s(D7e);T(G9.$$.fragment,vLt),vLt.forEach(t),bLt.forEach(t),Dkr=i(gOe),G7e=n(gOe,"SPAN",{});var FLt=s(G7e);Gkr=r(FLt,"FlaxAutoModelForPreTraining"),FLt.forEach(t),gOe.forEach(t),lDe=i(f),gr=n(f,"DIV",{class:!0});var Wl=s(gr);T(O9.$$.fragment,Wl),Okr=i(Wl),Nc=n(Wl,"P",{});var eoe=s(Nc);Vkr=r(eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),BY=n(eoe,"A",{href:!0});var TLt=s(BY);Xkr=r(TLt,"from_pretrained()"),TLt.forEach(t),zkr=r(eoe," class method or the "),IY=n(eoe,"A",{href:!0});var MLt=s(IY);Wkr=r(MLt,"from_config()"),MLt.forEach(t),Qkr=r(eoe,` class
method.`),eoe.forEach(t),Hkr=i(Wl),V9=n(Wl,"P",{});var hOe=s(V9);Ukr=r(hOe,"This class cannot be instantiated directly using "),O7e=n(hOe,"CODE",{});var ELt=s(O7e);Jkr=r(ELt,"__init__()"),ELt.forEach(t),Ykr=r(hOe," (throws an error)."),hOe.forEach(t),Kkr=i(Wl),Vt=n(Wl,"DIV",{class:!0});var dA=s(Vt);T(X9.$$.fragment,dA),Zkr=i(dA),V7e=n(dA,"P",{});var CLt=s(V7e);eSr=r(CLt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),CLt.forEach(t),oSr=i(dA),qc=n(dA,"P",{});var ooe=s(qc);rSr=r(ooe,`Note:
Loading a model from its configuration file does `),X7e=n(ooe,"STRONG",{});var wLt=s(X7e);tSr=r(wLt,"not"),wLt.forEach(t),aSr=r(ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),NY=n(ooe,"A",{href:!0});var ALt=s(NY);nSr=r(ALt,"from_pretrained()"),ALt.forEach(t),sSr=r(ooe," to load the model weights."),ooe.forEach(t),lSr=i(dA),T(F5.$$.fragment,dA),dA.forEach(t),iSr=i(Wl),Gr=n(Wl,"DIV",{class:!0});var Ql=s(Gr);T(z9.$$.fragment,Ql),dSr=i(Ql),z7e=n(Ql,"P",{});var yLt=s(z7e);cSr=r(yLt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),yLt.forEach(t),fSr=i(Ql),_n=n(Ql,"P",{});var cA=s(_n);mSr=r(cA,"The model class to instantiate is selected based on the "),W7e=n(cA,"CODE",{});var LLt=s(W7e);gSr=r(LLt,"model_type"),LLt.forEach(t),hSr=r(cA,` property of the config object (either
passed as an argument or loaded from `),Q7e=n(cA,"CODE",{});var xLt=s(Q7e);pSr=r(xLt,"pretrained_model_name_or_path"),xLt.forEach(t),_Sr=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H7e=n(cA,"CODE",{});var $Lt=s(H7e);uSr=r($Lt,"pretrained_model_name_or_path"),$Lt.forEach(t),bSr=r(cA,":"),cA.forEach(t),vSr=i(Ql),Ee=n(Ql,"UL",{});var we=s(Ee);T5=n(we,"LI",{});var sNe=s(T5);U7e=n(sNe,"STRONG",{});var kLt=s(U7e);FSr=r(kLt,"albert"),kLt.forEach(t),TSr=r(sNe," \u2014 "),qY=n(sNe,"A",{href:!0});var SLt=s(qY);MSr=r(SLt,"FlaxAlbertForPreTraining"),SLt.forEach(t),ESr=r(sNe," (ALBERT model)"),sNe.forEach(t),CSr=i(we),M5=n(we,"LI",{});var lNe=s(M5);J7e=n(lNe,"STRONG",{});var RLt=s(J7e);wSr=r(RLt,"bart"),RLt.forEach(t),ASr=r(lNe," \u2014 "),jY=n(lNe,"A",{href:!0});var PLt=s(jY);ySr=r(PLt,"FlaxBartForConditionalGeneration"),PLt.forEach(t),LSr=r(lNe," (BART model)"),lNe.forEach(t),xSr=i(we),E5=n(we,"LI",{});var iNe=s(E5);Y7e=n(iNe,"STRONG",{});var BLt=s(Y7e);$Sr=r(BLt,"bert"),BLt.forEach(t),kSr=r(iNe," \u2014 "),DY=n(iNe,"A",{href:!0});var ILt=s(DY);SSr=r(ILt,"FlaxBertForPreTraining"),ILt.forEach(t),RSr=r(iNe," (BERT model)"),iNe.forEach(t),PSr=i(we),C5=n(we,"LI",{});var dNe=s(C5);K7e=n(dNe,"STRONG",{});var NLt=s(K7e);BSr=r(NLt,"big_bird"),NLt.forEach(t),ISr=r(dNe," \u2014 "),GY=n(dNe,"A",{href:!0});var qLt=s(GY);NSr=r(qLt,"FlaxBigBirdForPreTraining"),qLt.forEach(t),qSr=r(dNe," (BigBird model)"),dNe.forEach(t),jSr=i(we),w5=n(we,"LI",{});var cNe=s(w5);Z7e=n(cNe,"STRONG",{});var jLt=s(Z7e);DSr=r(jLt,"electra"),jLt.forEach(t),GSr=r(cNe," \u2014 "),OY=n(cNe,"A",{href:!0});var DLt=s(OY);OSr=r(DLt,"FlaxElectraForPreTraining"),DLt.forEach(t),VSr=r(cNe," (ELECTRA model)"),cNe.forEach(t),XSr=i(we),A5=n(we,"LI",{});var fNe=s(A5);eMe=n(fNe,"STRONG",{});var GLt=s(eMe);zSr=r(GLt,"mbart"),GLt.forEach(t),WSr=r(fNe," \u2014 "),VY=n(fNe,"A",{href:!0});var OLt=s(VY);QSr=r(OLt,"FlaxMBartForConditionalGeneration"),OLt.forEach(t),HSr=r(fNe," (mBART model)"),fNe.forEach(t),USr=i(we),y5=n(we,"LI",{});var mNe=s(y5);oMe=n(mNe,"STRONG",{});var VLt=s(oMe);JSr=r(VLt,"mt5"),VLt.forEach(t),YSr=r(mNe," \u2014 "),XY=n(mNe,"A",{href:!0});var XLt=s(XY);KSr=r(XLt,"FlaxMT5ForConditionalGeneration"),XLt.forEach(t),ZSr=r(mNe," (mT5 model)"),mNe.forEach(t),eRr=i(we),L5=n(we,"LI",{});var gNe=s(L5);rMe=n(gNe,"STRONG",{});var zLt=s(rMe);oRr=r(zLt,"roberta"),zLt.forEach(t),rRr=r(gNe," \u2014 "),zY=n(gNe,"A",{href:!0});var WLt=s(zY);tRr=r(WLt,"FlaxRobertaForMaskedLM"),WLt.forEach(t),aRr=r(gNe," (RoBERTa model)"),gNe.forEach(t),nRr=i(we),x5=n(we,"LI",{});var hNe=s(x5);tMe=n(hNe,"STRONG",{});var QLt=s(tMe);sRr=r(QLt,"roformer"),QLt.forEach(t),lRr=r(hNe," \u2014 "),WY=n(hNe,"A",{href:!0});var HLt=s(WY);iRr=r(HLt,"FlaxRoFormerForMaskedLM"),HLt.forEach(t),dRr=r(hNe," (RoFormer model)"),hNe.forEach(t),cRr=i(we),$5=n(we,"LI",{});var pNe=s($5);aMe=n(pNe,"STRONG",{});var ULt=s(aMe);fRr=r(ULt,"t5"),ULt.forEach(t),mRr=r(pNe," \u2014 "),QY=n(pNe,"A",{href:!0});var JLt=s(QY);gRr=r(JLt,"FlaxT5ForConditionalGeneration"),JLt.forEach(t),hRr=r(pNe," (T5 model)"),pNe.forEach(t),pRr=i(we),k5=n(we,"LI",{});var _Ne=s(k5);nMe=n(_Ne,"STRONG",{});var YLt=s(nMe);_Rr=r(YLt,"wav2vec2"),YLt.forEach(t),uRr=r(_Ne," \u2014 "),HY=n(_Ne,"A",{href:!0});var KLt=s(HY);bRr=r(KLt,"FlaxWav2Vec2ForPreTraining"),KLt.forEach(t),vRr=r(_Ne," (Wav2Vec2 model)"),_Ne.forEach(t),FRr=i(we),S5=n(we,"LI",{});var uNe=s(S5);sMe=n(uNe,"STRONG",{});var ZLt=s(sMe);TRr=r(ZLt,"xlm-roberta"),ZLt.forEach(t),MRr=r(uNe," \u2014 "),UY=n(uNe,"A",{href:!0});var e8t=s(UY);ERr=r(e8t,"FlaxXLMRobertaForMaskedLM"),e8t.forEach(t),CRr=r(uNe," (XLM-RoBERTa model)"),uNe.forEach(t),we.forEach(t),wRr=i(Ql),T(R5.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),iDe=i(f),jc=n(f,"H2",{class:!0});var pOe=s(jc);P5=n(pOe,"A",{id:!0,class:!0,href:!0});var o8t=s(P5);lMe=n(o8t,"SPAN",{});var r8t=s(lMe);T(W9.$$.fragment,r8t),r8t.forEach(t),o8t.forEach(t),ARr=i(pOe),iMe=n(pOe,"SPAN",{});var t8t=s(iMe);yRr=r(t8t,"FlaxAutoModelForMaskedLM"),t8t.forEach(t),pOe.forEach(t),dDe=i(f),hr=n(f,"DIV",{class:!0});var Hl=s(hr);T(Q9.$$.fragment,Hl),LRr=i(Hl),Dc=n(Hl,"P",{});var roe=s(Dc);xRr=r(roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),JY=n(roe,"A",{href:!0});var a8t=s(JY);$Rr=r(a8t,"from_pretrained()"),a8t.forEach(t),kRr=r(roe," class method or the "),YY=n(roe,"A",{href:!0});var n8t=s(YY);SRr=r(n8t,"from_config()"),n8t.forEach(t),RRr=r(roe,` class
method.`),roe.forEach(t),PRr=i(Hl),H9=n(Hl,"P",{});var _Oe=s(H9);BRr=r(_Oe,"This class cannot be instantiated directly using "),dMe=n(_Oe,"CODE",{});var s8t=s(dMe);IRr=r(s8t,"__init__()"),s8t.forEach(t),NRr=r(_Oe," (throws an error)."),_Oe.forEach(t),qRr=i(Hl),Xt=n(Hl,"DIV",{class:!0});var fA=s(Xt);T(U9.$$.fragment,fA),jRr=i(fA),cMe=n(fA,"P",{});var l8t=s(cMe);DRr=r(l8t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),l8t.forEach(t),GRr=i(fA),Gc=n(fA,"P",{});var toe=s(Gc);ORr=r(toe,`Note:
Loading a model from its configuration file does `),fMe=n(toe,"STRONG",{});var i8t=s(fMe);VRr=r(i8t,"not"),i8t.forEach(t),XRr=r(toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),KY=n(toe,"A",{href:!0});var d8t=s(KY);zRr=r(d8t,"from_pretrained()"),d8t.forEach(t),WRr=r(toe," to load the model weights."),toe.forEach(t),QRr=i(fA),T(B5.$$.fragment,fA),fA.forEach(t),HRr=i(Hl),Or=n(Hl,"DIV",{class:!0});var Ul=s(Or);T(J9.$$.fragment,Ul),URr=i(Ul),mMe=n(Ul,"P",{});var c8t=s(mMe);JRr=r(c8t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),c8t.forEach(t),YRr=i(Ul),un=n(Ul,"P",{});var mA=s(un);KRr=r(mA,"The model class to instantiate is selected based on the "),gMe=n(mA,"CODE",{});var f8t=s(gMe);ZRr=r(f8t,"model_type"),f8t.forEach(t),ePr=r(mA,` property of the config object (either
passed as an argument or loaded from `),hMe=n(mA,"CODE",{});var m8t=s(hMe);oPr=r(m8t,"pretrained_model_name_or_path"),m8t.forEach(t),rPr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pMe=n(mA,"CODE",{});var g8t=s(pMe);tPr=r(g8t,"pretrained_model_name_or_path"),g8t.forEach(t),aPr=r(mA,":"),mA.forEach(t),nPr=i(Ul),Le=n(Ul,"UL",{});var Ie=s(Le);I5=n(Ie,"LI",{});var bNe=s(I5);_Me=n(bNe,"STRONG",{});var h8t=s(_Me);sPr=r(h8t,"albert"),h8t.forEach(t),lPr=r(bNe," \u2014 "),ZY=n(bNe,"A",{href:!0});var p8t=s(ZY);iPr=r(p8t,"FlaxAlbertForMaskedLM"),p8t.forEach(t),dPr=r(bNe," (ALBERT model)"),bNe.forEach(t),cPr=i(Ie),N5=n(Ie,"LI",{});var vNe=s(N5);uMe=n(vNe,"STRONG",{});var _8t=s(uMe);fPr=r(_8t,"bart"),_8t.forEach(t),mPr=r(vNe," \u2014 "),eK=n(vNe,"A",{href:!0});var u8t=s(eK);gPr=r(u8t,"FlaxBartForConditionalGeneration"),u8t.forEach(t),hPr=r(vNe," (BART model)"),vNe.forEach(t),pPr=i(Ie),q5=n(Ie,"LI",{});var FNe=s(q5);bMe=n(FNe,"STRONG",{});var b8t=s(bMe);_Pr=r(b8t,"bert"),b8t.forEach(t),uPr=r(FNe," \u2014 "),oK=n(FNe,"A",{href:!0});var v8t=s(oK);bPr=r(v8t,"FlaxBertForMaskedLM"),v8t.forEach(t),vPr=r(FNe," (BERT model)"),FNe.forEach(t),FPr=i(Ie),j5=n(Ie,"LI",{});var TNe=s(j5);vMe=n(TNe,"STRONG",{});var F8t=s(vMe);TPr=r(F8t,"big_bird"),F8t.forEach(t),MPr=r(TNe," \u2014 "),rK=n(TNe,"A",{href:!0});var T8t=s(rK);EPr=r(T8t,"FlaxBigBirdForMaskedLM"),T8t.forEach(t),CPr=r(TNe," (BigBird model)"),TNe.forEach(t),wPr=i(Ie),D5=n(Ie,"LI",{});var MNe=s(D5);FMe=n(MNe,"STRONG",{});var M8t=s(FMe);APr=r(M8t,"distilbert"),M8t.forEach(t),yPr=r(MNe," \u2014 "),tK=n(MNe,"A",{href:!0});var E8t=s(tK);LPr=r(E8t,"FlaxDistilBertForMaskedLM"),E8t.forEach(t),xPr=r(MNe," (DistilBERT model)"),MNe.forEach(t),$Pr=i(Ie),G5=n(Ie,"LI",{});var ENe=s(G5);TMe=n(ENe,"STRONG",{});var C8t=s(TMe);kPr=r(C8t,"electra"),C8t.forEach(t),SPr=r(ENe," \u2014 "),aK=n(ENe,"A",{href:!0});var w8t=s(aK);RPr=r(w8t,"FlaxElectraForMaskedLM"),w8t.forEach(t),PPr=r(ENe," (ELECTRA model)"),ENe.forEach(t),BPr=i(Ie),O5=n(Ie,"LI",{});var CNe=s(O5);MMe=n(CNe,"STRONG",{});var A8t=s(MMe);IPr=r(A8t,"mbart"),A8t.forEach(t),NPr=r(CNe," \u2014 "),nK=n(CNe,"A",{href:!0});var y8t=s(nK);qPr=r(y8t,"FlaxMBartForConditionalGeneration"),y8t.forEach(t),jPr=r(CNe," (mBART model)"),CNe.forEach(t),DPr=i(Ie),V5=n(Ie,"LI",{});var wNe=s(V5);EMe=n(wNe,"STRONG",{});var L8t=s(EMe);GPr=r(L8t,"roberta"),L8t.forEach(t),OPr=r(wNe," \u2014 "),sK=n(wNe,"A",{href:!0});var x8t=s(sK);VPr=r(x8t,"FlaxRobertaForMaskedLM"),x8t.forEach(t),XPr=r(wNe," (RoBERTa model)"),wNe.forEach(t),zPr=i(Ie),X5=n(Ie,"LI",{});var ANe=s(X5);CMe=n(ANe,"STRONG",{});var $8t=s(CMe);WPr=r($8t,"roformer"),$8t.forEach(t),QPr=r(ANe," \u2014 "),lK=n(ANe,"A",{href:!0});var k8t=s(lK);HPr=r(k8t,"FlaxRoFormerForMaskedLM"),k8t.forEach(t),UPr=r(ANe," (RoFormer model)"),ANe.forEach(t),JPr=i(Ie),z5=n(Ie,"LI",{});var yNe=s(z5);wMe=n(yNe,"STRONG",{});var S8t=s(wMe);YPr=r(S8t,"xlm-roberta"),S8t.forEach(t),KPr=r(yNe," \u2014 "),iK=n(yNe,"A",{href:!0});var R8t=s(iK);ZPr=r(R8t,"FlaxXLMRobertaForMaskedLM"),R8t.forEach(t),eBr=r(yNe," (XLM-RoBERTa model)"),yNe.forEach(t),Ie.forEach(t),oBr=i(Ul),T(W5.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),cDe=i(f),Oc=n(f,"H2",{class:!0});var uOe=s(Oc);Q5=n(uOe,"A",{id:!0,class:!0,href:!0});var P8t=s(Q5);AMe=n(P8t,"SPAN",{});var B8t=s(AMe);T(Y9.$$.fragment,B8t),B8t.forEach(t),P8t.forEach(t),rBr=i(uOe),yMe=n(uOe,"SPAN",{});var I8t=s(yMe);tBr=r(I8t,"FlaxAutoModelForSeq2SeqLM"),I8t.forEach(t),uOe.forEach(t),fDe=i(f),pr=n(f,"DIV",{class:!0});var Jl=s(pr);T(K9.$$.fragment,Jl),aBr=i(Jl),Vc=n(Jl,"P",{});var aoe=s(Vc);nBr=r(aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),dK=n(aoe,"A",{href:!0});var N8t=s(dK);sBr=r(N8t,"from_pretrained()"),N8t.forEach(t),lBr=r(aoe," class method or the "),cK=n(aoe,"A",{href:!0});var q8t=s(cK);iBr=r(q8t,"from_config()"),q8t.forEach(t),dBr=r(aoe,` class
method.`),aoe.forEach(t),cBr=i(Jl),Z9=n(Jl,"P",{});var bOe=s(Z9);fBr=r(bOe,"This class cannot be instantiated directly using "),LMe=n(bOe,"CODE",{});var j8t=s(LMe);mBr=r(j8t,"__init__()"),j8t.forEach(t),gBr=r(bOe," (throws an error)."),bOe.forEach(t),hBr=i(Jl),zt=n(Jl,"DIV",{class:!0});var gA=s(zt);T(ex.$$.fragment,gA),pBr=i(gA),xMe=n(gA,"P",{});var D8t=s(xMe);_Br=r(D8t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),D8t.forEach(t),uBr=i(gA),Xc=n(gA,"P",{});var noe=s(Xc);bBr=r(noe,`Note:
Loading a model from its configuration file does `),$Me=n(noe,"STRONG",{});var G8t=s($Me);vBr=r(G8t,"not"),G8t.forEach(t),FBr=r(noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),fK=n(noe,"A",{href:!0});var O8t=s(fK);TBr=r(O8t,"from_pretrained()"),O8t.forEach(t),MBr=r(noe," to load the model weights."),noe.forEach(t),EBr=i(gA),T(H5.$$.fragment,gA),gA.forEach(t),CBr=i(Jl),Vr=n(Jl,"DIV",{class:!0});var Yl=s(Vr);T(ox.$$.fragment,Yl),wBr=i(Yl),kMe=n(Yl,"P",{});var V8t=s(kMe);ABr=r(V8t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),V8t.forEach(t),yBr=i(Yl),bn=n(Yl,"P",{});var hA=s(bn);LBr=r(hA,"The model class to instantiate is selected based on the "),SMe=n(hA,"CODE",{});var X8t=s(SMe);xBr=r(X8t,"model_type"),X8t.forEach(t),$Br=r(hA,` property of the config object (either
passed as an argument or loaded from `),RMe=n(hA,"CODE",{});var z8t=s(RMe);kBr=r(z8t,"pretrained_model_name_or_path"),z8t.forEach(t),SBr=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PMe=n(hA,"CODE",{});var W8t=s(PMe);RBr=r(W8t,"pretrained_model_name_or_path"),W8t.forEach(t),PBr=r(hA,":"),hA.forEach(t),BBr=i(Yl),Pe=n(Yl,"UL",{});var ze=s(Pe);U5=n(ze,"LI",{});var LNe=s(U5);BMe=n(LNe,"STRONG",{});var Q8t=s(BMe);IBr=r(Q8t,"bart"),Q8t.forEach(t),NBr=r(LNe," \u2014 "),mK=n(LNe,"A",{href:!0});var H8t=s(mK);qBr=r(H8t,"FlaxBartForConditionalGeneration"),H8t.forEach(t),jBr=r(LNe," (BART model)"),LNe.forEach(t),DBr=i(ze),J5=n(ze,"LI",{});var xNe=s(J5);IMe=n(xNe,"STRONG",{});var U8t=s(IMe);GBr=r(U8t,"blenderbot"),U8t.forEach(t),OBr=r(xNe," \u2014 "),gK=n(xNe,"A",{href:!0});var J8t=s(gK);VBr=r(J8t,"FlaxBlenderbotForConditionalGeneration"),J8t.forEach(t),XBr=r(xNe," (Blenderbot model)"),xNe.forEach(t),zBr=i(ze),Y5=n(ze,"LI",{});var $Ne=s(Y5);NMe=n($Ne,"STRONG",{});var Y8t=s(NMe);WBr=r(Y8t,"blenderbot-small"),Y8t.forEach(t),QBr=r($Ne," \u2014 "),hK=n($Ne,"A",{href:!0});var K8t=s(hK);HBr=r(K8t,"FlaxBlenderbotSmallForConditionalGeneration"),K8t.forEach(t),UBr=r($Ne," (BlenderbotSmall model)"),$Ne.forEach(t),JBr=i(ze),K5=n(ze,"LI",{});var kNe=s(K5);qMe=n(kNe,"STRONG",{});var Z8t=s(qMe);YBr=r(Z8t,"encoder-decoder"),Z8t.forEach(t),KBr=r(kNe," \u2014 "),pK=n(kNe,"A",{href:!0});var e9t=s(pK);ZBr=r(e9t,"FlaxEncoderDecoderModel"),e9t.forEach(t),eIr=r(kNe," (Encoder decoder model)"),kNe.forEach(t),oIr=i(ze),Z5=n(ze,"LI",{});var SNe=s(Z5);jMe=n(SNe,"STRONG",{});var o9t=s(jMe);rIr=r(o9t,"marian"),o9t.forEach(t),tIr=r(SNe," \u2014 "),_K=n(SNe,"A",{href:!0});var r9t=s(_K);aIr=r(r9t,"FlaxMarianMTModel"),r9t.forEach(t),nIr=r(SNe," (Marian model)"),SNe.forEach(t),sIr=i(ze),e3=n(ze,"LI",{});var RNe=s(e3);DMe=n(RNe,"STRONG",{});var t9t=s(DMe);lIr=r(t9t,"mbart"),t9t.forEach(t),iIr=r(RNe," \u2014 "),uK=n(RNe,"A",{href:!0});var a9t=s(uK);dIr=r(a9t,"FlaxMBartForConditionalGeneration"),a9t.forEach(t),cIr=r(RNe," (mBART model)"),RNe.forEach(t),fIr=i(ze),o3=n(ze,"LI",{});var PNe=s(o3);GMe=n(PNe,"STRONG",{});var n9t=s(GMe);mIr=r(n9t,"mt5"),n9t.forEach(t),gIr=r(PNe," \u2014 "),bK=n(PNe,"A",{href:!0});var s9t=s(bK);hIr=r(s9t,"FlaxMT5ForConditionalGeneration"),s9t.forEach(t),pIr=r(PNe," (mT5 model)"),PNe.forEach(t),_Ir=i(ze),r3=n(ze,"LI",{});var BNe=s(r3);OMe=n(BNe,"STRONG",{});var l9t=s(OMe);uIr=r(l9t,"pegasus"),l9t.forEach(t),bIr=r(BNe," \u2014 "),vK=n(BNe,"A",{href:!0});var i9t=s(vK);vIr=r(i9t,"FlaxPegasusForConditionalGeneration"),i9t.forEach(t),FIr=r(BNe," (Pegasus model)"),BNe.forEach(t),TIr=i(ze),t3=n(ze,"LI",{});var INe=s(t3);VMe=n(INe,"STRONG",{});var d9t=s(VMe);MIr=r(d9t,"t5"),d9t.forEach(t),EIr=r(INe," \u2014 "),FK=n(INe,"A",{href:!0});var c9t=s(FK);CIr=r(c9t,"FlaxT5ForConditionalGeneration"),c9t.forEach(t),wIr=r(INe," (T5 model)"),INe.forEach(t),ze.forEach(t),AIr=i(Yl),T(a3.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),mDe=i(f),zc=n(f,"H2",{class:!0});var vOe=s(zc);n3=n(vOe,"A",{id:!0,class:!0,href:!0});var f9t=s(n3);XMe=n(f9t,"SPAN",{});var m9t=s(XMe);T(rx.$$.fragment,m9t),m9t.forEach(t),f9t.forEach(t),yIr=i(vOe),zMe=n(vOe,"SPAN",{});var g9t=s(zMe);LIr=r(g9t,"FlaxAutoModelForSequenceClassification"),g9t.forEach(t),vOe.forEach(t),gDe=i(f),_r=n(f,"DIV",{class:!0});var Kl=s(_r);T(tx.$$.fragment,Kl),xIr=i(Kl),Wc=n(Kl,"P",{});var soe=s(Wc);$Ir=r(soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),TK=n(soe,"A",{href:!0});var h9t=s(TK);kIr=r(h9t,"from_pretrained()"),h9t.forEach(t),SIr=r(soe," class method or the "),MK=n(soe,"A",{href:!0});var p9t=s(MK);RIr=r(p9t,"from_config()"),p9t.forEach(t),PIr=r(soe,` class
method.`),soe.forEach(t),BIr=i(Kl),ax=n(Kl,"P",{});var FOe=s(ax);IIr=r(FOe,"This class cannot be instantiated directly using "),WMe=n(FOe,"CODE",{});var _9t=s(WMe);NIr=r(_9t,"__init__()"),_9t.forEach(t),qIr=r(FOe," (throws an error)."),FOe.forEach(t),jIr=i(Kl),Wt=n(Kl,"DIV",{class:!0});var pA=s(Wt);T(nx.$$.fragment,pA),DIr=i(pA),QMe=n(pA,"P",{});var u9t=s(QMe);GIr=r(u9t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),u9t.forEach(t),OIr=i(pA),Qc=n(pA,"P",{});var loe=s(Qc);VIr=r(loe,`Note:
Loading a model from its configuration file does `),HMe=n(loe,"STRONG",{});var b9t=s(HMe);XIr=r(b9t,"not"),b9t.forEach(t),zIr=r(loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),EK=n(loe,"A",{href:!0});var v9t=s(EK);WIr=r(v9t,"from_pretrained()"),v9t.forEach(t),QIr=r(loe," to load the model weights."),loe.forEach(t),HIr=i(pA),T(s3.$$.fragment,pA),pA.forEach(t),UIr=i(Kl),Xr=n(Kl,"DIV",{class:!0});var Zl=s(Xr);T(sx.$$.fragment,Zl),JIr=i(Zl),UMe=n(Zl,"P",{});var F9t=s(UMe);YIr=r(F9t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),F9t.forEach(t),KIr=i(Zl),vn=n(Zl,"P",{});var _A=s(vn);ZIr=r(_A,"The model class to instantiate is selected based on the "),JMe=n(_A,"CODE",{});var T9t=s(JMe);eNr=r(T9t,"model_type"),T9t.forEach(t),oNr=r(_A,` property of the config object (either
passed as an argument or loaded from `),YMe=n(_A,"CODE",{});var M9t=s(YMe);rNr=r(M9t,"pretrained_model_name_or_path"),M9t.forEach(t),tNr=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KMe=n(_A,"CODE",{});var E9t=s(KMe);aNr=r(E9t,"pretrained_model_name_or_path"),E9t.forEach(t),nNr=r(_A,":"),_A.forEach(t),sNr=i(Zl),xe=n(Zl,"UL",{});var Ne=s(xe);l3=n(Ne,"LI",{});var NNe=s(l3);ZMe=n(NNe,"STRONG",{});var C9t=s(ZMe);lNr=r(C9t,"albert"),C9t.forEach(t),iNr=r(NNe," \u2014 "),CK=n(NNe,"A",{href:!0});var w9t=s(CK);dNr=r(w9t,"FlaxAlbertForSequenceClassification"),w9t.forEach(t),cNr=r(NNe," (ALBERT model)"),NNe.forEach(t),fNr=i(Ne),i3=n(Ne,"LI",{});var qNe=s(i3);eEe=n(qNe,"STRONG",{});var A9t=s(eEe);mNr=r(A9t,"bart"),A9t.forEach(t),gNr=r(qNe," \u2014 "),wK=n(qNe,"A",{href:!0});var y9t=s(wK);hNr=r(y9t,"FlaxBartForSequenceClassification"),y9t.forEach(t),pNr=r(qNe," (BART model)"),qNe.forEach(t),_Nr=i(Ne),d3=n(Ne,"LI",{});var jNe=s(d3);oEe=n(jNe,"STRONG",{});var L9t=s(oEe);uNr=r(L9t,"bert"),L9t.forEach(t),bNr=r(jNe," \u2014 "),AK=n(jNe,"A",{href:!0});var x9t=s(AK);vNr=r(x9t,"FlaxBertForSequenceClassification"),x9t.forEach(t),FNr=r(jNe," (BERT model)"),jNe.forEach(t),TNr=i(Ne),c3=n(Ne,"LI",{});var DNe=s(c3);rEe=n(DNe,"STRONG",{});var $9t=s(rEe);MNr=r($9t,"big_bird"),$9t.forEach(t),ENr=r(DNe," \u2014 "),yK=n(DNe,"A",{href:!0});var k9t=s(yK);CNr=r(k9t,"FlaxBigBirdForSequenceClassification"),k9t.forEach(t),wNr=r(DNe," (BigBird model)"),DNe.forEach(t),ANr=i(Ne),f3=n(Ne,"LI",{});var GNe=s(f3);tEe=n(GNe,"STRONG",{});var S9t=s(tEe);yNr=r(S9t,"distilbert"),S9t.forEach(t),LNr=r(GNe," \u2014 "),LK=n(GNe,"A",{href:!0});var R9t=s(LK);xNr=r(R9t,"FlaxDistilBertForSequenceClassification"),R9t.forEach(t),$Nr=r(GNe," (DistilBERT model)"),GNe.forEach(t),kNr=i(Ne),m3=n(Ne,"LI",{});var ONe=s(m3);aEe=n(ONe,"STRONG",{});var P9t=s(aEe);SNr=r(P9t,"electra"),P9t.forEach(t),RNr=r(ONe," \u2014 "),xK=n(ONe,"A",{href:!0});var B9t=s(xK);PNr=r(B9t,"FlaxElectraForSequenceClassification"),B9t.forEach(t),BNr=r(ONe," (ELECTRA model)"),ONe.forEach(t),INr=i(Ne),g3=n(Ne,"LI",{});var VNe=s(g3);nEe=n(VNe,"STRONG",{});var I9t=s(nEe);NNr=r(I9t,"mbart"),I9t.forEach(t),qNr=r(VNe," \u2014 "),$K=n(VNe,"A",{href:!0});var N9t=s($K);jNr=r(N9t,"FlaxMBartForSequenceClassification"),N9t.forEach(t),DNr=r(VNe," (mBART model)"),VNe.forEach(t),GNr=i(Ne),h3=n(Ne,"LI",{});var XNe=s(h3);sEe=n(XNe,"STRONG",{});var q9t=s(sEe);ONr=r(q9t,"roberta"),q9t.forEach(t),VNr=r(XNe," \u2014 "),kK=n(XNe,"A",{href:!0});var j9t=s(kK);XNr=r(j9t,"FlaxRobertaForSequenceClassification"),j9t.forEach(t),zNr=r(XNe," (RoBERTa model)"),XNe.forEach(t),WNr=i(Ne),p3=n(Ne,"LI",{});var zNe=s(p3);lEe=n(zNe,"STRONG",{});var D9t=s(lEe);QNr=r(D9t,"roformer"),D9t.forEach(t),HNr=r(zNe," \u2014 "),SK=n(zNe,"A",{href:!0});var G9t=s(SK);UNr=r(G9t,"FlaxRoFormerForSequenceClassification"),G9t.forEach(t),JNr=r(zNe," (RoFormer model)"),zNe.forEach(t),YNr=i(Ne),_3=n(Ne,"LI",{});var WNe=s(_3);iEe=n(WNe,"STRONG",{});var O9t=s(iEe);KNr=r(O9t,"xlm-roberta"),O9t.forEach(t),ZNr=r(WNe," \u2014 "),RK=n(WNe,"A",{href:!0});var V9t=s(RK);eqr=r(V9t,"FlaxXLMRobertaForSequenceClassification"),V9t.forEach(t),oqr=r(WNe," (XLM-RoBERTa model)"),WNe.forEach(t),Ne.forEach(t),rqr=i(Zl),T(u3.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),hDe=i(f),Hc=n(f,"H2",{class:!0});var TOe=s(Hc);b3=n(TOe,"A",{id:!0,class:!0,href:!0});var X9t=s(b3);dEe=n(X9t,"SPAN",{});var z9t=s(dEe);T(lx.$$.fragment,z9t),z9t.forEach(t),X9t.forEach(t),tqr=i(TOe),cEe=n(TOe,"SPAN",{});var W9t=s(cEe);aqr=r(W9t,"FlaxAutoModelForQuestionAnswering"),W9t.forEach(t),TOe.forEach(t),pDe=i(f),ur=n(f,"DIV",{class:!0});var ei=s(ur);T(ix.$$.fragment,ei),nqr=i(ei),Uc=n(ei,"P",{});var ioe=s(Uc);sqr=r(ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),PK=n(ioe,"A",{href:!0});var Q9t=s(PK);lqr=r(Q9t,"from_pretrained()"),Q9t.forEach(t),iqr=r(ioe," class method or the "),BK=n(ioe,"A",{href:!0});var H9t=s(BK);dqr=r(H9t,"from_config()"),H9t.forEach(t),cqr=r(ioe,` class
method.`),ioe.forEach(t),fqr=i(ei),dx=n(ei,"P",{});var MOe=s(dx);mqr=r(MOe,"This class cannot be instantiated directly using "),fEe=n(MOe,"CODE",{});var U9t=s(fEe);gqr=r(U9t,"__init__()"),U9t.forEach(t),hqr=r(MOe," (throws an error)."),MOe.forEach(t),pqr=i(ei),Qt=n(ei,"DIV",{class:!0});var uA=s(Qt);T(cx.$$.fragment,uA),_qr=i(uA),mEe=n(uA,"P",{});var J9t=s(mEe);uqr=r(J9t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),J9t.forEach(t),bqr=i(uA),Jc=n(uA,"P",{});var doe=s(Jc);vqr=r(doe,`Note:
Loading a model from its configuration file does `),gEe=n(doe,"STRONG",{});var Y9t=s(gEe);Fqr=r(Y9t,"not"),Y9t.forEach(t),Tqr=r(doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),IK=n(doe,"A",{href:!0});var K9t=s(IK);Mqr=r(K9t,"from_pretrained()"),K9t.forEach(t),Eqr=r(doe," to load the model weights."),doe.forEach(t),Cqr=i(uA),T(v3.$$.fragment,uA),uA.forEach(t),wqr=i(ei),zr=n(ei,"DIV",{class:!0});var oi=s(zr);T(fx.$$.fragment,oi),Aqr=i(oi),hEe=n(oi,"P",{});var Z9t=s(hEe);yqr=r(Z9t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Z9t.forEach(t),Lqr=i(oi),Fn=n(oi,"P",{});var bA=s(Fn);xqr=r(bA,"The model class to instantiate is selected based on the "),pEe=n(bA,"CODE",{});var ext=s(pEe);$qr=r(ext,"model_type"),ext.forEach(t),kqr=r(bA,` property of the config object (either
passed as an argument or loaded from `),_Ee=n(bA,"CODE",{});var oxt=s(_Ee);Sqr=r(oxt,"pretrained_model_name_or_path"),oxt.forEach(t),Rqr=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uEe=n(bA,"CODE",{});var rxt=s(uEe);Pqr=r(rxt,"pretrained_model_name_or_path"),rxt.forEach(t),Bqr=r(bA,":"),bA.forEach(t),Iqr=i(oi),$e=n(oi,"UL",{});var qe=s($e);F3=n(qe,"LI",{});var QNe=s(F3);bEe=n(QNe,"STRONG",{});var txt=s(bEe);Nqr=r(txt,"albert"),txt.forEach(t),qqr=r(QNe," \u2014 "),NK=n(QNe,"A",{href:!0});var axt=s(NK);jqr=r(axt,"FlaxAlbertForQuestionAnswering"),axt.forEach(t),Dqr=r(QNe," (ALBERT model)"),QNe.forEach(t),Gqr=i(qe),T3=n(qe,"LI",{});var HNe=s(T3);vEe=n(HNe,"STRONG",{});var nxt=s(vEe);Oqr=r(nxt,"bart"),nxt.forEach(t),Vqr=r(HNe," \u2014 "),qK=n(HNe,"A",{href:!0});var sxt=s(qK);Xqr=r(sxt,"FlaxBartForQuestionAnswering"),sxt.forEach(t),zqr=r(HNe," (BART model)"),HNe.forEach(t),Wqr=i(qe),M3=n(qe,"LI",{});var UNe=s(M3);FEe=n(UNe,"STRONG",{});var lxt=s(FEe);Qqr=r(lxt,"bert"),lxt.forEach(t),Hqr=r(UNe," \u2014 "),jK=n(UNe,"A",{href:!0});var ixt=s(jK);Uqr=r(ixt,"FlaxBertForQuestionAnswering"),ixt.forEach(t),Jqr=r(UNe," (BERT model)"),UNe.forEach(t),Yqr=i(qe),E3=n(qe,"LI",{});var JNe=s(E3);TEe=n(JNe,"STRONG",{});var dxt=s(TEe);Kqr=r(dxt,"big_bird"),dxt.forEach(t),Zqr=r(JNe," \u2014 "),DK=n(JNe,"A",{href:!0});var cxt=s(DK);ejr=r(cxt,"FlaxBigBirdForQuestionAnswering"),cxt.forEach(t),ojr=r(JNe," (BigBird model)"),JNe.forEach(t),rjr=i(qe),C3=n(qe,"LI",{});var YNe=s(C3);MEe=n(YNe,"STRONG",{});var fxt=s(MEe);tjr=r(fxt,"distilbert"),fxt.forEach(t),ajr=r(YNe," \u2014 "),GK=n(YNe,"A",{href:!0});var mxt=s(GK);njr=r(mxt,"FlaxDistilBertForQuestionAnswering"),mxt.forEach(t),sjr=r(YNe," (DistilBERT model)"),YNe.forEach(t),ljr=i(qe),w3=n(qe,"LI",{});var KNe=s(w3);EEe=n(KNe,"STRONG",{});var gxt=s(EEe);ijr=r(gxt,"electra"),gxt.forEach(t),djr=r(KNe," \u2014 "),OK=n(KNe,"A",{href:!0});var hxt=s(OK);cjr=r(hxt,"FlaxElectraForQuestionAnswering"),hxt.forEach(t),fjr=r(KNe," (ELECTRA model)"),KNe.forEach(t),mjr=i(qe),A3=n(qe,"LI",{});var ZNe=s(A3);CEe=n(ZNe,"STRONG",{});var pxt=s(CEe);gjr=r(pxt,"mbart"),pxt.forEach(t),hjr=r(ZNe," \u2014 "),VK=n(ZNe,"A",{href:!0});var _xt=s(VK);pjr=r(_xt,"FlaxMBartForQuestionAnswering"),_xt.forEach(t),_jr=r(ZNe," (mBART model)"),ZNe.forEach(t),ujr=i(qe),y3=n(qe,"LI",{});var eqe=s(y3);wEe=n(eqe,"STRONG",{});var uxt=s(wEe);bjr=r(uxt,"roberta"),uxt.forEach(t),vjr=r(eqe," \u2014 "),XK=n(eqe,"A",{href:!0});var bxt=s(XK);Fjr=r(bxt,"FlaxRobertaForQuestionAnswering"),bxt.forEach(t),Tjr=r(eqe," (RoBERTa model)"),eqe.forEach(t),Mjr=i(qe),L3=n(qe,"LI",{});var oqe=s(L3);AEe=n(oqe,"STRONG",{});var vxt=s(AEe);Ejr=r(vxt,"roformer"),vxt.forEach(t),Cjr=r(oqe," \u2014 "),zK=n(oqe,"A",{href:!0});var Fxt=s(zK);wjr=r(Fxt,"FlaxRoFormerForQuestionAnswering"),Fxt.forEach(t),Ajr=r(oqe," (RoFormer model)"),oqe.forEach(t),yjr=i(qe),x3=n(qe,"LI",{});var rqe=s(x3);yEe=n(rqe,"STRONG",{});var Txt=s(yEe);Ljr=r(Txt,"xlm-roberta"),Txt.forEach(t),xjr=r(rqe," \u2014 "),WK=n(rqe,"A",{href:!0});var Mxt=s(WK);$jr=r(Mxt,"FlaxXLMRobertaForQuestionAnswering"),Mxt.forEach(t),kjr=r(rqe," (XLM-RoBERTa model)"),rqe.forEach(t),qe.forEach(t),Sjr=i(oi),T($3.$$.fragment,oi),oi.forEach(t),ei.forEach(t),_De=i(f),Yc=n(f,"H2",{class:!0});var EOe=s(Yc);k3=n(EOe,"A",{id:!0,class:!0,href:!0});var Ext=s(k3);LEe=n(Ext,"SPAN",{});var Cxt=s(LEe);T(mx.$$.fragment,Cxt),Cxt.forEach(t),Ext.forEach(t),Rjr=i(EOe),xEe=n(EOe,"SPAN",{});var wxt=s(xEe);Pjr=r(wxt,"FlaxAutoModelForTokenClassification"),wxt.forEach(t),EOe.forEach(t),uDe=i(f),br=n(f,"DIV",{class:!0});var ri=s(br);T(gx.$$.fragment,ri),Bjr=i(ri),Kc=n(ri,"P",{});var coe=s(Kc);Ijr=r(coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),QK=n(coe,"A",{href:!0});var Axt=s(QK);Njr=r(Axt,"from_pretrained()"),Axt.forEach(t),qjr=r(coe," class method or the "),HK=n(coe,"A",{href:!0});var yxt=s(HK);jjr=r(yxt,"from_config()"),yxt.forEach(t),Djr=r(coe,` class
method.`),coe.forEach(t),Gjr=i(ri),hx=n(ri,"P",{});var COe=s(hx);Ojr=r(COe,"This class cannot be instantiated directly using "),$Ee=n(COe,"CODE",{});var Lxt=s($Ee);Vjr=r(Lxt,"__init__()"),Lxt.forEach(t),Xjr=r(COe," (throws an error)."),COe.forEach(t),zjr=i(ri),Ht=n(ri,"DIV",{class:!0});var vA=s(Ht);T(px.$$.fragment,vA),Wjr=i(vA),kEe=n(vA,"P",{});var xxt=s(kEe);Qjr=r(xxt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),xxt.forEach(t),Hjr=i(vA),Zc=n(vA,"P",{});var foe=s(Zc);Ujr=r(foe,`Note:
Loading a model from its configuration file does `),SEe=n(foe,"STRONG",{});var $xt=s(SEe);Jjr=r($xt,"not"),$xt.forEach(t),Yjr=r(foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),UK=n(foe,"A",{href:!0});var kxt=s(UK);Kjr=r(kxt,"from_pretrained()"),kxt.forEach(t),Zjr=r(foe," to load the model weights."),foe.forEach(t),eDr=i(vA),T(S3.$$.fragment,vA),vA.forEach(t),oDr=i(ri),Wr=n(ri,"DIV",{class:!0});var ti=s(Wr);T(_x.$$.fragment,ti),rDr=i(ti),REe=n(ti,"P",{});var Sxt=s(REe);tDr=r(Sxt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Sxt.forEach(t),aDr=i(ti),Tn=n(ti,"P",{});var FA=s(Tn);nDr=r(FA,"The model class to instantiate is selected based on the "),PEe=n(FA,"CODE",{});var Rxt=s(PEe);sDr=r(Rxt,"model_type"),Rxt.forEach(t),lDr=r(FA,` property of the config object (either
passed as an argument or loaded from `),BEe=n(FA,"CODE",{});var Pxt=s(BEe);iDr=r(Pxt,"pretrained_model_name_or_path"),Pxt.forEach(t),dDr=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IEe=n(FA,"CODE",{});var Bxt=s(IEe);cDr=r(Bxt,"pretrained_model_name_or_path"),Bxt.forEach(t),fDr=r(FA,":"),FA.forEach(t),mDr=i(ti),De=n(ti,"UL",{});var Fo=s(De);R3=n(Fo,"LI",{});var tqe=s(R3);NEe=n(tqe,"STRONG",{});var Ixt=s(NEe);gDr=r(Ixt,"albert"),Ixt.forEach(t),hDr=r(tqe," \u2014 "),JK=n(tqe,"A",{href:!0});var Nxt=s(JK);pDr=r(Nxt,"FlaxAlbertForTokenClassification"),Nxt.forEach(t),_Dr=r(tqe," (ALBERT model)"),tqe.forEach(t),uDr=i(Fo),P3=n(Fo,"LI",{});var aqe=s(P3);qEe=n(aqe,"STRONG",{});var qxt=s(qEe);bDr=r(qxt,"bert"),qxt.forEach(t),vDr=r(aqe," \u2014 "),YK=n(aqe,"A",{href:!0});var jxt=s(YK);FDr=r(jxt,"FlaxBertForTokenClassification"),jxt.forEach(t),TDr=r(aqe," (BERT model)"),aqe.forEach(t),MDr=i(Fo),B3=n(Fo,"LI",{});var nqe=s(B3);jEe=n(nqe,"STRONG",{});var Dxt=s(jEe);EDr=r(Dxt,"big_bird"),Dxt.forEach(t),CDr=r(nqe," \u2014 "),KK=n(nqe,"A",{href:!0});var Gxt=s(KK);wDr=r(Gxt,"FlaxBigBirdForTokenClassification"),Gxt.forEach(t),ADr=r(nqe," (BigBird model)"),nqe.forEach(t),yDr=i(Fo),I3=n(Fo,"LI",{});var sqe=s(I3);DEe=n(sqe,"STRONG",{});var Oxt=s(DEe);LDr=r(Oxt,"distilbert"),Oxt.forEach(t),xDr=r(sqe," \u2014 "),ZK=n(sqe,"A",{href:!0});var Vxt=s(ZK);$Dr=r(Vxt,"FlaxDistilBertForTokenClassification"),Vxt.forEach(t),kDr=r(sqe," (DistilBERT model)"),sqe.forEach(t),SDr=i(Fo),N3=n(Fo,"LI",{});var lqe=s(N3);GEe=n(lqe,"STRONG",{});var Xxt=s(GEe);RDr=r(Xxt,"electra"),Xxt.forEach(t),PDr=r(lqe," \u2014 "),eZ=n(lqe,"A",{href:!0});var zxt=s(eZ);BDr=r(zxt,"FlaxElectraForTokenClassification"),zxt.forEach(t),IDr=r(lqe," (ELECTRA model)"),lqe.forEach(t),NDr=i(Fo),q3=n(Fo,"LI",{});var iqe=s(q3);OEe=n(iqe,"STRONG",{});var Wxt=s(OEe);qDr=r(Wxt,"roberta"),Wxt.forEach(t),jDr=r(iqe," \u2014 "),oZ=n(iqe,"A",{href:!0});var Qxt=s(oZ);DDr=r(Qxt,"FlaxRobertaForTokenClassification"),Qxt.forEach(t),GDr=r(iqe," (RoBERTa model)"),iqe.forEach(t),ODr=i(Fo),j3=n(Fo,"LI",{});var dqe=s(j3);VEe=n(dqe,"STRONG",{});var Hxt=s(VEe);VDr=r(Hxt,"roformer"),Hxt.forEach(t),XDr=r(dqe," \u2014 "),rZ=n(dqe,"A",{href:!0});var Uxt=s(rZ);zDr=r(Uxt,"FlaxRoFormerForTokenClassification"),Uxt.forEach(t),WDr=r(dqe," (RoFormer model)"),dqe.forEach(t),QDr=i(Fo),D3=n(Fo,"LI",{});var cqe=s(D3);XEe=n(cqe,"STRONG",{});var Jxt=s(XEe);HDr=r(Jxt,"xlm-roberta"),Jxt.forEach(t),UDr=r(cqe," \u2014 "),tZ=n(cqe,"A",{href:!0});var Yxt=s(tZ);JDr=r(Yxt,"FlaxXLMRobertaForTokenClassification"),Yxt.forEach(t),YDr=r(cqe," (XLM-RoBERTa model)"),cqe.forEach(t),Fo.forEach(t),KDr=i(ti),T(G3.$$.fragment,ti),ti.forEach(t),ri.forEach(t),bDe=i(f),ef=n(f,"H2",{class:!0});var wOe=s(ef);O3=n(wOe,"A",{id:!0,class:!0,href:!0});var Kxt=s(O3);zEe=n(Kxt,"SPAN",{});var Zxt=s(zEe);T(ux.$$.fragment,Zxt),Zxt.forEach(t),Kxt.forEach(t),ZDr=i(wOe),WEe=n(wOe,"SPAN",{});var e$t=s(WEe);eGr=r(e$t,"FlaxAutoModelForMultipleChoice"),e$t.forEach(t),wOe.forEach(t),vDe=i(f),vr=n(f,"DIV",{class:!0});var ai=s(vr);T(bx.$$.fragment,ai),oGr=i(ai),of=n(ai,"P",{});var moe=s(of);rGr=r(moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),aZ=n(moe,"A",{href:!0});var o$t=s(aZ);tGr=r(o$t,"from_pretrained()"),o$t.forEach(t),aGr=r(moe," class method or the "),nZ=n(moe,"A",{href:!0});var r$t=s(nZ);nGr=r(r$t,"from_config()"),r$t.forEach(t),sGr=r(moe,` class
method.`),moe.forEach(t),lGr=i(ai),vx=n(ai,"P",{});var AOe=s(vx);iGr=r(AOe,"This class cannot be instantiated directly using "),QEe=n(AOe,"CODE",{});var t$t=s(QEe);dGr=r(t$t,"__init__()"),t$t.forEach(t),cGr=r(AOe," (throws an error)."),AOe.forEach(t),fGr=i(ai),Ut=n(ai,"DIV",{class:!0});var TA=s(Ut);T(Fx.$$.fragment,TA),mGr=i(TA),HEe=n(TA,"P",{});var a$t=s(HEe);gGr=r(a$t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),a$t.forEach(t),hGr=i(TA),rf=n(TA,"P",{});var goe=s(rf);pGr=r(goe,`Note:
Loading a model from its configuration file does `),UEe=n(goe,"STRONG",{});var n$t=s(UEe);_Gr=r(n$t,"not"),n$t.forEach(t),uGr=r(goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),sZ=n(goe,"A",{href:!0});var s$t=s(sZ);bGr=r(s$t,"from_pretrained()"),s$t.forEach(t),vGr=r(goe," to load the model weights."),goe.forEach(t),FGr=i(TA),T(V3.$$.fragment,TA),TA.forEach(t),TGr=i(ai),Qr=n(ai,"DIV",{class:!0});var ni=s(Qr);T(Tx.$$.fragment,ni),MGr=i(ni),JEe=n(ni,"P",{});var l$t=s(JEe);EGr=r(l$t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),l$t.forEach(t),CGr=i(ni),Mn=n(ni,"P",{});var MA=s(Mn);wGr=r(MA,"The model class to instantiate is selected based on the "),YEe=n(MA,"CODE",{});var i$t=s(YEe);AGr=r(i$t,"model_type"),i$t.forEach(t),yGr=r(MA,` property of the config object (either
passed as an argument or loaded from `),KEe=n(MA,"CODE",{});var d$t=s(KEe);LGr=r(d$t,"pretrained_model_name_or_path"),d$t.forEach(t),xGr=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZEe=n(MA,"CODE",{});var c$t=s(ZEe);$Gr=r(c$t,"pretrained_model_name_or_path"),c$t.forEach(t),kGr=r(MA,":"),MA.forEach(t),SGr=i(ni),Ge=n(ni,"UL",{});var To=s(Ge);X3=n(To,"LI",{});var fqe=s(X3);eCe=n(fqe,"STRONG",{});var f$t=s(eCe);RGr=r(f$t,"albert"),f$t.forEach(t),PGr=r(fqe," \u2014 "),lZ=n(fqe,"A",{href:!0});var m$t=s(lZ);BGr=r(m$t,"FlaxAlbertForMultipleChoice"),m$t.forEach(t),IGr=r(fqe," (ALBERT model)"),fqe.forEach(t),NGr=i(To),z3=n(To,"LI",{});var mqe=s(z3);oCe=n(mqe,"STRONG",{});var g$t=s(oCe);qGr=r(g$t,"bert"),g$t.forEach(t),jGr=r(mqe," \u2014 "),iZ=n(mqe,"A",{href:!0});var h$t=s(iZ);DGr=r(h$t,"FlaxBertForMultipleChoice"),h$t.forEach(t),GGr=r(mqe," (BERT model)"),mqe.forEach(t),OGr=i(To),W3=n(To,"LI",{});var gqe=s(W3);rCe=n(gqe,"STRONG",{});var p$t=s(rCe);VGr=r(p$t,"big_bird"),p$t.forEach(t),XGr=r(gqe," \u2014 "),dZ=n(gqe,"A",{href:!0});var _$t=s(dZ);zGr=r(_$t,"FlaxBigBirdForMultipleChoice"),_$t.forEach(t),WGr=r(gqe," (BigBird model)"),gqe.forEach(t),QGr=i(To),Q3=n(To,"LI",{});var hqe=s(Q3);tCe=n(hqe,"STRONG",{});var u$t=s(tCe);HGr=r(u$t,"distilbert"),u$t.forEach(t),UGr=r(hqe," \u2014 "),cZ=n(hqe,"A",{href:!0});var b$t=s(cZ);JGr=r(b$t,"FlaxDistilBertForMultipleChoice"),b$t.forEach(t),YGr=r(hqe," (DistilBERT model)"),hqe.forEach(t),KGr=i(To),H3=n(To,"LI",{});var pqe=s(H3);aCe=n(pqe,"STRONG",{});var v$t=s(aCe);ZGr=r(v$t,"electra"),v$t.forEach(t),eOr=r(pqe," \u2014 "),fZ=n(pqe,"A",{href:!0});var F$t=s(fZ);oOr=r(F$t,"FlaxElectraForMultipleChoice"),F$t.forEach(t),rOr=r(pqe," (ELECTRA model)"),pqe.forEach(t),tOr=i(To),U3=n(To,"LI",{});var _qe=s(U3);nCe=n(_qe,"STRONG",{});var T$t=s(nCe);aOr=r(T$t,"roberta"),T$t.forEach(t),nOr=r(_qe," \u2014 "),mZ=n(_qe,"A",{href:!0});var M$t=s(mZ);sOr=r(M$t,"FlaxRobertaForMultipleChoice"),M$t.forEach(t),lOr=r(_qe," (RoBERTa model)"),_qe.forEach(t),iOr=i(To),J3=n(To,"LI",{});var uqe=s(J3);sCe=n(uqe,"STRONG",{});var E$t=s(sCe);dOr=r(E$t,"roformer"),E$t.forEach(t),cOr=r(uqe," \u2014 "),gZ=n(uqe,"A",{href:!0});var C$t=s(gZ);fOr=r(C$t,"FlaxRoFormerForMultipleChoice"),C$t.forEach(t),mOr=r(uqe," (RoFormer model)"),uqe.forEach(t),gOr=i(To),Y3=n(To,"LI",{});var bqe=s(Y3);lCe=n(bqe,"STRONG",{});var w$t=s(lCe);hOr=r(w$t,"xlm-roberta"),w$t.forEach(t),pOr=r(bqe," \u2014 "),hZ=n(bqe,"A",{href:!0});var A$t=s(hZ);_Or=r(A$t,"FlaxXLMRobertaForMultipleChoice"),A$t.forEach(t),uOr=r(bqe," (XLM-RoBERTa model)"),bqe.forEach(t),To.forEach(t),bOr=i(ni),T(K3.$$.fragment,ni),ni.forEach(t),ai.forEach(t),FDe=i(f),tf=n(f,"H2",{class:!0});var yOe=s(tf);Z3=n(yOe,"A",{id:!0,class:!0,href:!0});var y$t=s(Z3);iCe=n(y$t,"SPAN",{});var L$t=s(iCe);T(Mx.$$.fragment,L$t),L$t.forEach(t),y$t.forEach(t),vOr=i(yOe),dCe=n(yOe,"SPAN",{});var x$t=s(dCe);FOr=r(x$t,"FlaxAutoModelForNextSentencePrediction"),x$t.forEach(t),yOe.forEach(t),TDe=i(f),Fr=n(f,"DIV",{class:!0});var si=s(Fr);T(Ex.$$.fragment,si),TOr=i(si),af=n(si,"P",{});var hoe=s(af);MOr=r(hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),pZ=n(hoe,"A",{href:!0});var $$t=s(pZ);EOr=r($$t,"from_pretrained()"),$$t.forEach(t),COr=r(hoe," class method or the "),_Z=n(hoe,"A",{href:!0});var k$t=s(_Z);wOr=r(k$t,"from_config()"),k$t.forEach(t),AOr=r(hoe,` class
method.`),hoe.forEach(t),yOr=i(si),Cx=n(si,"P",{});var LOe=s(Cx);LOr=r(LOe,"This class cannot be instantiated directly using "),cCe=n(LOe,"CODE",{});var S$t=s(cCe);xOr=r(S$t,"__init__()"),S$t.forEach(t),$Or=r(LOe," (throws an error)."),LOe.forEach(t),kOr=i(si),Jt=n(si,"DIV",{class:!0});var EA=s(Jt);T(wx.$$.fragment,EA),SOr=i(EA),fCe=n(EA,"P",{});var R$t=s(fCe);ROr=r(R$t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),R$t.forEach(t),POr=i(EA),nf=n(EA,"P",{});var poe=s(nf);BOr=r(poe,`Note:
Loading a model from its configuration file does `),mCe=n(poe,"STRONG",{});var P$t=s(mCe);IOr=r(P$t,"not"),P$t.forEach(t),NOr=r(poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),uZ=n(poe,"A",{href:!0});var B$t=s(uZ);qOr=r(B$t,"from_pretrained()"),B$t.forEach(t),jOr=r(poe," to load the model weights."),poe.forEach(t),DOr=i(EA),T(ew.$$.fragment,EA),EA.forEach(t),GOr=i(si),Hr=n(si,"DIV",{class:!0});var li=s(Hr);T(Ax.$$.fragment,li),OOr=i(li),gCe=n(li,"P",{});var I$t=s(gCe);VOr=r(I$t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),I$t.forEach(t),XOr=i(li),En=n(li,"P",{});var CA=s(En);zOr=r(CA,"The model class to instantiate is selected based on the "),hCe=n(CA,"CODE",{});var N$t=s(hCe);WOr=r(N$t,"model_type"),N$t.forEach(t),QOr=r(CA,` property of the config object (either
passed as an argument or loaded from `),pCe=n(CA,"CODE",{});var q$t=s(pCe);HOr=r(q$t,"pretrained_model_name_or_path"),q$t.forEach(t),UOr=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Ce=n(CA,"CODE",{});var j$t=s(_Ce);JOr=r(j$t,"pretrained_model_name_or_path"),j$t.forEach(t),YOr=r(CA,":"),CA.forEach(t),KOr=i(li),uCe=n(li,"UL",{});var D$t=s(uCe);ow=n(D$t,"LI",{});var vqe=s(ow);bCe=n(vqe,"STRONG",{});var G$t=s(bCe);ZOr=r(G$t,"bert"),G$t.forEach(t),eVr=r(vqe," \u2014 "),bZ=n(vqe,"A",{href:!0});var O$t=s(bZ);oVr=r(O$t,"FlaxBertForNextSentencePrediction"),O$t.forEach(t),rVr=r(vqe," (BERT model)"),vqe.forEach(t),D$t.forEach(t),tVr=i(li),T(rw.$$.fragment,li),li.forEach(t),si.forEach(t),MDe=i(f),sf=n(f,"H2",{class:!0});var xOe=s(sf);tw=n(xOe,"A",{id:!0,class:!0,href:!0});var V$t=s(tw);vCe=n(V$t,"SPAN",{});var X$t=s(vCe);T(yx.$$.fragment,X$t),X$t.forEach(t),V$t.forEach(t),aVr=i(xOe),FCe=n(xOe,"SPAN",{});var z$t=s(FCe);nVr=r(z$t,"FlaxAutoModelForImageClassification"),z$t.forEach(t),xOe.forEach(t),EDe=i(f),Tr=n(f,"DIV",{class:!0});var ii=s(Tr);T(Lx.$$.fragment,ii),sVr=i(ii),lf=n(ii,"P",{});var _oe=s(lf);lVr=r(_oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vZ=n(_oe,"A",{href:!0});var W$t=s(vZ);iVr=r(W$t,"from_pretrained()"),W$t.forEach(t),dVr=r(_oe," class method or the "),FZ=n(_oe,"A",{href:!0});var Q$t=s(FZ);cVr=r(Q$t,"from_config()"),Q$t.forEach(t),fVr=r(_oe,` class
method.`),_oe.forEach(t),mVr=i(ii),xx=n(ii,"P",{});var $Oe=s(xx);gVr=r($Oe,"This class cannot be instantiated directly using "),TCe=n($Oe,"CODE",{});var H$t=s(TCe);hVr=r(H$t,"__init__()"),H$t.forEach(t),pVr=r($Oe," (throws an error)."),$Oe.forEach(t),_Vr=i(ii),Yt=n(ii,"DIV",{class:!0});var wA=s(Yt);T($x.$$.fragment,wA),uVr=i(wA),MCe=n(wA,"P",{});var U$t=s(MCe);bVr=r(U$t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),U$t.forEach(t),vVr=i(wA),df=n(wA,"P",{});var uoe=s(df);FVr=r(uoe,`Note:
Loading a model from its configuration file does `),ECe=n(uoe,"STRONG",{});var J$t=s(ECe);TVr=r(J$t,"not"),J$t.forEach(t),MVr=r(uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),TZ=n(uoe,"A",{href:!0});var Y$t=s(TZ);EVr=r(Y$t,"from_pretrained()"),Y$t.forEach(t),CVr=r(uoe," to load the model weights."),uoe.forEach(t),wVr=i(wA),T(aw.$$.fragment,wA),wA.forEach(t),AVr=i(ii),Ur=n(ii,"DIV",{class:!0});var di=s(Ur);T(kx.$$.fragment,di),yVr=i(di),CCe=n(di,"P",{});var K$t=s(CCe);LVr=r(K$t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),K$t.forEach(t),xVr=i(di),Cn=n(di,"P",{});var AA=s(Cn);$Vr=r(AA,"The model class to instantiate is selected based on the "),wCe=n(AA,"CODE",{});var Z$t=s(wCe);kVr=r(Z$t,"model_type"),Z$t.forEach(t),SVr=r(AA,` property of the config object (either
passed as an argument or loaded from `),ACe=n(AA,"CODE",{});var ekt=s(ACe);RVr=r(ekt,"pretrained_model_name_or_path"),ekt.forEach(t),PVr=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yCe=n(AA,"CODE",{});var okt=s(yCe);BVr=r(okt,"pretrained_model_name_or_path"),okt.forEach(t),IVr=r(AA,":"),AA.forEach(t),NVr=i(di),Sx=n(di,"UL",{});var kOe=s(Sx);nw=n(kOe,"LI",{});var Fqe=s(nw);LCe=n(Fqe,"STRONG",{});var rkt=s(LCe);qVr=r(rkt,"beit"),rkt.forEach(t),jVr=r(Fqe," \u2014 "),MZ=n(Fqe,"A",{href:!0});var tkt=s(MZ);DVr=r(tkt,"FlaxBeitForImageClassification"),tkt.forEach(t),GVr=r(Fqe," (BEiT model)"),Fqe.forEach(t),OVr=i(kOe),sw=n(kOe,"LI",{});var Tqe=s(sw);xCe=n(Tqe,"STRONG",{});var akt=s(xCe);VVr=r(akt,"vit"),akt.forEach(t),XVr=r(Tqe," \u2014 "),EZ=n(Tqe,"A",{href:!0});var nkt=s(EZ);zVr=r(nkt,"FlaxViTForImageClassification"),nkt.forEach(t),WVr=r(Tqe," (ViT model)"),Tqe.forEach(t),kOe.forEach(t),QVr=i(di),T(lw.$$.fragment,di),di.forEach(t),ii.forEach(t),CDe=i(f),cf=n(f,"H2",{class:!0});var SOe=s(cf);iw=n(SOe,"A",{id:!0,class:!0,href:!0});var skt=s(iw);$Ce=n(skt,"SPAN",{});var lkt=s($Ce);T(Rx.$$.fragment,lkt),lkt.forEach(t),skt.forEach(t),HVr=i(SOe),kCe=n(SOe,"SPAN",{});var ikt=s(kCe);UVr=r(ikt,"FlaxAutoModelForVision2Seq"),ikt.forEach(t),SOe.forEach(t),wDe=i(f),Mr=n(f,"DIV",{class:!0});var ci=s(Mr);T(Px.$$.fragment,ci),JVr=i(ci),ff=n(ci,"P",{});var boe=s(ff);YVr=r(boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),CZ=n(boe,"A",{href:!0});var dkt=s(CZ);KVr=r(dkt,"from_pretrained()"),dkt.forEach(t),ZVr=r(boe," class method or the "),wZ=n(boe,"A",{href:!0});var ckt=s(wZ);eXr=r(ckt,"from_config()"),ckt.forEach(t),oXr=r(boe,` class
method.`),boe.forEach(t),rXr=i(ci),Bx=n(ci,"P",{});var ROe=s(Bx);tXr=r(ROe,"This class cannot be instantiated directly using "),SCe=n(ROe,"CODE",{});var fkt=s(SCe);aXr=r(fkt,"__init__()"),fkt.forEach(t),nXr=r(ROe," (throws an error)."),ROe.forEach(t),sXr=i(ci),Kt=n(ci,"DIV",{class:!0});var yA=s(Kt);T(Ix.$$.fragment,yA),lXr=i(yA),RCe=n(yA,"P",{});var mkt=s(RCe);iXr=r(mkt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),mkt.forEach(t),dXr=i(yA),mf=n(yA,"P",{});var voe=s(mf);cXr=r(voe,`Note:
Loading a model from its configuration file does `),PCe=n(voe,"STRONG",{});var gkt=s(PCe);fXr=r(gkt,"not"),gkt.forEach(t),mXr=r(voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),AZ=n(voe,"A",{href:!0});var hkt=s(AZ);gXr=r(hkt,"from_pretrained()"),hkt.forEach(t),hXr=r(voe," to load the model weights."),voe.forEach(t),pXr=i(yA),T(dw.$$.fragment,yA),yA.forEach(t),_Xr=i(ci),Jr=n(ci,"DIV",{class:!0});var fi=s(Jr);T(Nx.$$.fragment,fi),uXr=i(fi),BCe=n(fi,"P",{});var pkt=s(BCe);bXr=r(pkt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),pkt.forEach(t),vXr=i(fi),wn=n(fi,"P",{});var LA=s(wn);FXr=r(LA,"The model class to instantiate is selected based on the "),ICe=n(LA,"CODE",{});var _kt=s(ICe);TXr=r(_kt,"model_type"),_kt.forEach(t),MXr=r(LA,` property of the config object (either
passed as an argument or loaded from `),NCe=n(LA,"CODE",{});var ukt=s(NCe);EXr=r(ukt,"pretrained_model_name_or_path"),ukt.forEach(t),CXr=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qCe=n(LA,"CODE",{});var bkt=s(qCe);wXr=r(bkt,"pretrained_model_name_or_path"),bkt.forEach(t),AXr=r(LA,":"),LA.forEach(t),yXr=i(fi),jCe=n(fi,"UL",{});var vkt=s(jCe);cw=n(vkt,"LI",{});var Mqe=s(cw);DCe=n(Mqe,"STRONG",{});var Fkt=s(DCe);LXr=r(Fkt,"vision-encoder-decoder"),Fkt.forEach(t),xXr=r(Mqe," \u2014 "),yZ=n(Mqe,"A",{href:!0});var Tkt=s(yZ);$Xr=r(Tkt,"FlaxVisionEncoderDecoderModel"),Tkt.forEach(t),kXr=r(Mqe," (Vision Encoder decoder model)"),Mqe.forEach(t),vkt.forEach(t),SXr=i(fi),T(fw.$$.fragment,fi),fi.forEach(t),ci.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(wRt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.AutoTokenizer"),c(bi,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertModel"),c(Ff,"id","extending-the-auto-classes"),c(Ff,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ff,"href","#extending-the-auto-classes"),c(vi,"class","relative group"),c(Mf,"id","transformers.AutoConfig"),c(Mf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mf,"href","#transformers.AutoConfig"),c(Fi,"class","relative group"),c(ak,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(nk,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertConfig"),c(sk,"href","/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartConfig"),c(lk,"href","/docs/transformers/pr_17146/en/model_doc/beit#transformers.BeitConfig"),c(ik,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig"),c(dk,"href","/docs/transformers/pr_17146/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(ck,"href","/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdConfig"),c(fk,"href","/docs/transformers/pr_17146/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(mk,"href","/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(gk,"href","/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(hk,"href","/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertConfig"),c(pk,"href","/docs/transformers/pr_17146/en/model_doc/canine#transformers.CanineConfig"),c(_k,"href","/docs/transformers/pr_17146/en/model_doc/clip#transformers.CLIPConfig"),c(uk,"href","/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertConfig"),c(bk,"href","/docs/transformers/pr_17146/en/model_doc/convnext#transformers.ConvNextConfig"),c(vk,"href","/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.CTRLConfig"),c(Fk,"href","/docs/transformers/pr_17146/en/model_doc/cvt#transformers.CvtConfig"),c(Tk,"href","/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(Mk,"href","/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(Ek,"href","/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(Ck,"href","/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaConfig"),c(wk,"href","/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(Ak,"href","/docs/transformers/pr_17146/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(yk,"href","/docs/transformers/pr_17146/en/model_doc/deit#transformers.DeiTConfig"),c(Lk,"href","/docs/transformers/pr_17146/en/model_doc/detr#transformers.DetrConfig"),c(xk,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertConfig"),c($k,"href","/docs/transformers/pr_17146/en/model_doc/dpr#transformers.DPRConfig"),c(kk,"href","/docs/transformers/pr_17146/en/model_doc/dpt#transformers.DPTConfig"),c(Sk,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig"),c(Rk,"href","/docs/transformers/pr_17146/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(Pk,"href","/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertConfig"),c(Bk,"href","/docs/transformers/pr_17146/en/model_doc/flava#transformers.FlavaConfig"),c(Ik,"href","/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetConfig"),c(Nk,"href","/docs/transformers/pr_17146/en/model_doc/fsmt#transformers.FSMTConfig"),c(qk,"href","/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelConfig"),c(jk,"href","/docs/transformers/pr_17146/en/model_doc/glpn#transformers.GLPNConfig"),c(Dk,"href","/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2Config"),c(Gk,"href","/docs/transformers/pr_17146/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(Ok,"href","/docs/transformers/pr_17146/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(Vk,"href","/docs/transformers/pr_17146/en/model_doc/gptj#transformers.GPTJConfig"),c(Xk,"href","/docs/transformers/pr_17146/en/model_doc/greaselm#transformers.GreaseLMConfig"),c(zk,"href","/docs/transformers/pr_17146/en/model_doc/hubert#transformers.HubertConfig"),c(Wk,"href","/docs/transformers/pr_17146/en/model_doc/ibert#transformers.IBertConfig"),c(Qk,"href","/docs/transformers/pr_17146/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Hk,"href","/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Uk,"href","/docs/transformers/pr_17146/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Jk,"href","/docs/transformers/pr_17146/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(Yk,"href","/docs/transformers/pr_17146/en/model_doc/led#transformers.LEDConfig"),c(Kk,"href","/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerConfig"),c(Zk,"href","/docs/transformers/pr_17146/en/model_doc/luke#transformers.LukeConfig"),c(eS,"href","/docs/transformers/pr_17146/en/model_doc/lxmert#transformers.LxmertConfig"),c(oS,"href","/docs/transformers/pr_17146/en/model_doc/m2m_100#transformers.M2M100Config"),c(rS,"href","/docs/transformers/pr_17146/en/model_doc/marian#transformers.MarianConfig"),c(tS,"href","/docs/transformers/pr_17146/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(aS,"href","/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartConfig"),c(nS,"href","/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(sS,"href","/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(lS,"href","/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetConfig"),c(iS,"href","/docs/transformers/pr_17146/en/model_doc/mt5#transformers.MT5Config"),c(dS,"href","/docs/transformers/pr_17146/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(cS,"href","/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(fS,"href","/docs/transformers/pr_17146/en/model_doc/opt#transformers.OPTConfig"),c(mS,"href","/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.PegasusConfig"),c(gS,"href","/docs/transformers/pr_17146/en/model_doc/perceiver#transformers.PerceiverConfig"),c(hS,"href","/docs/transformers/pr_17146/en/model_doc/plbart#transformers.PLBartConfig"),c(pS,"href","/docs/transformers/pr_17146/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(_S,"href","/docs/transformers/pr_17146/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(uS,"href","/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(bS,"href","/docs/transformers/pr_17146/en/model_doc/rag#transformers.RagConfig"),c(vS,"href","/docs/transformers/pr_17146/en/model_doc/realm#transformers.RealmConfig"),c(FS,"href","/docs/transformers/pr_17146/en/model_doc/reformer#transformers.ReformerConfig"),c(TS,"href","/docs/transformers/pr_17146/en/model_doc/regnet#transformers.RegNetConfig"),c(MS,"href","/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertConfig"),c(ES,"href","/docs/transformers/pr_17146/en/model_doc/resnet#transformers.ResNetConfig"),c(CS,"href","/docs/transformers/pr_17146/en/model_doc/retribert#transformers.RetriBertConfig"),c(wS,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig"),c(AS,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerConfig"),c(yS,"href","/docs/transformers/pr_17146/en/model_doc/segformer#transformers.SegformerConfig"),c(LS,"href","/docs/transformers/pr_17146/en/model_doc/sew#transformers.SEWConfig"),c(xS,"href","/docs/transformers/pr_17146/en/model_doc/sew-d#transformers.SEWDConfig"),c($S,"href","/docs/transformers/pr_17146/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(kS,"href","/docs/transformers/pr_17146/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(SS,"href","/docs/transformers/pr_17146/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(RS,"href","/docs/transformers/pr_17146/en/model_doc/splinter#transformers.SplinterConfig"),c(PS,"href","/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(BS,"href","/docs/transformers/pr_17146/en/model_doc/swin#transformers.SwinConfig"),c(IS,"href","/docs/transformers/pr_17146/en/model_doc/t5#transformers.T5Config"),c(NS,"href","/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TapasConfig"),c(qS,"href","/docs/transformers/pr_17146/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(jS,"href","/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(DS,"href","/docs/transformers/pr_17146/en/model_doc/trocr#transformers.TrOCRConfig"),c(GS,"href","/docs/transformers/pr_17146/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(OS,"href","/docs/transformers/pr_17146/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(VS,"href","/docs/transformers/pr_17146/en/model_doc/van#transformers.VanConfig"),c(XS,"href","/docs/transformers/pr_17146/en/model_doc/vilt#transformers.ViltConfig"),c(zS,"href","/docs/transformers/pr_17146/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(WS,"href","/docs/transformers/pr_17146/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(QS,"href","/docs/transformers/pr_17146/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(HS,"href","/docs/transformers/pr_17146/en/model_doc/vit#transformers.ViTConfig"),c(US,"href","/docs/transformers/pr_17146/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(JS,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(YS,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(KS,"href","/docs/transformers/pr_17146/en/model_doc/wavlm#transformers.WavLMConfig"),c(ZS,"href","/docs/transformers/pr_17146/en/model_doc/xglm#transformers.XGLMConfig"),c(eR,"href","/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMConfig"),c(oR,"href","/docs/transformers/pr_17146/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(rR,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(tR,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(aR,"href","/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetConfig"),c(nR,"href","/docs/transformers/pr_17146/en/model_doc/yolos#transformers.YolosConfig"),c(sR,"href","/docs/transformers/pr_17146/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ag,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yg,"id","transformers.AutoTokenizer"),c(yg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yg,"href","#transformers.AutoTokenizer"),c(Mi,"class","relative group"),c(lR,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(iR,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertTokenizer"),c(dR,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(cR,"href","/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartTokenizer"),c(fR,"href","/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartTokenizerFast"),c(mR,"href","/docs/transformers/pr_17146/en/model_doc/barthez#transformers.BarthezTokenizer"),c(gR,"href","/docs/transformers/pr_17146/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(hR,"href","/docs/transformers/pr_17146/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(pR,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertTokenizer"),c(_R,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertTokenizerFast"),c(uR,"href","/docs/transformers/pr_17146/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(bR,"href","/docs/transformers/pr_17146/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(vR,"href","/docs/transformers/pr_17146/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(FR,"href","/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(TR,"href","/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(MR,"href","/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(ER,"href","/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(CR,"href","/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(wR,"href","/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(AR,"href","/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(yR,"href","/docs/transformers/pr_17146/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(LR,"href","/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertTokenizer"),c(xR,"href","/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c($R,"href","/docs/transformers/pr_17146/en/model_doc/canine#transformers.CanineTokenizer"),c(kR,"href","/docs/transformers/pr_17146/en/model_doc/clip#transformers.CLIPTokenizer"),c(SR,"href","/docs/transformers/pr_17146/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(RR,"href","/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(PR,"href","/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(BR,"href","/docs/transformers/pr_17146/en/model_doc/cpm#transformers.CpmTokenizer"),c(IR,"href","/docs/transformers/pr_17146/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(NR,"href","/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(qR,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaTokenizer"),c(jR,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(DR,"href","/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaTokenizer"),c(GR,"href","/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(OR,"href","/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(VR,"href","/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(XR,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(zR,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(WR,"href","/docs/transformers/pr_17146/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(QR,"href","/docs/transformers/pr_17146/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(HR,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraTokenizer"),c(UR,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(JR,"href","/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(YR,"href","/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetTokenizer"),c(KR,"href","/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(ZR,"href","/docs/transformers/pr_17146/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(eP,"href","/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelTokenizer"),c(oP,"href","/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(rP,"href","/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(tP,"href","/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(aP,"href","/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(nP,"href","/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(sP,"href","/docs/transformers/pr_17146/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(lP,"href","/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(iP,"href","/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(dP,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaTokenizer"),c(cP,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(fP,"href","/docs/transformers/pr_17146/en/model_doc/herbert#transformers.HerbertTokenizer"),c(mP,"href","/docs/transformers/pr_17146/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(gP,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(hP,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaTokenizer"),c(pP,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(_P,"href","/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(uP,"href","/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(bP,"href","/docs/transformers/pr_17146/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(vP,"href","/docs/transformers/pr_17146/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(FP,"href","/docs/transformers/pr_17146/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(TP,"href","/docs/transformers/pr_17146/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(MP,"href","/docs/transformers/pr_17146/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(EP,"href","/docs/transformers/pr_17146/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(CP,"href","/docs/transformers/pr_17146/en/model_doc/led#transformers.LEDTokenizer"),c(wP,"href","/docs/transformers/pr_17146/en/model_doc/led#transformers.LEDTokenizerFast"),c(AP,"href","/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerTokenizer"),c(yP,"href","/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(LP,"href","/docs/transformers/pr_17146/en/model_doc/luke#transformers.LukeTokenizer"),c(xP,"href","/docs/transformers/pr_17146/en/model_doc/lxmert#transformers.LxmertTokenizer"),c($P,"href","/docs/transformers/pr_17146/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(kP,"href","/docs/transformers/pr_17146/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(SP,"href","/docs/transformers/pr_17146/en/model_doc/marian#transformers.MarianTokenizer"),c(RP,"href","/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartTokenizer"),c(PP,"href","/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(BP,"href","/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(IP,"href","/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(NP,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertTokenizer"),c(qP,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertTokenizerFast"),c(jP,"href","/docs/transformers/pr_17146/en/model_doc/mluke#transformers.MLukeTokenizer"),c(DP,"href","/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(GP,"href","/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(OP,"href","/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(VP,"href","/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(XP,"href","/docs/transformers/pr_17146/en/model_doc/t5#transformers.T5Tokenizer"),c(zP,"href","/docs/transformers/pr_17146/en/model_doc/t5#transformers.T5TokenizerFast"),c(WP,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertTokenizer"),c(QP,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(HP,"href","/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(UP,"href","/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(JP,"href","/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(YP,"href","/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(KP,"href","/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(ZP,"href","/docs/transformers/pr_17146/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(eB,"href","/docs/transformers/pr_17146/en/model_doc/phobert#transformers.PhobertTokenizer"),c(oB,"href","/docs/transformers/pr_17146/en/model_doc/plbart#transformers.PLBartTokenizer"),c(rB,"href","/docs/transformers/pr_17146/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(tB,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertTokenizer"),c(aB,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertTokenizerFast"),c(nB,"href","/docs/transformers/pr_17146/en/model_doc/rag#transformers.RagTokenizer"),c(sB,"href","/docs/transformers/pr_17146/en/model_doc/realm#transformers.RealmTokenizer"),c(lB,"href","/docs/transformers/pr_17146/en/model_doc/realm#transformers.RealmTokenizerFast"),c(iB,"href","/docs/transformers/pr_17146/en/model_doc/reformer#transformers.ReformerTokenizer"),c(dB,"href","/docs/transformers/pr_17146/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(cB,"href","/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertTokenizer"),c(fB,"href","/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(mB,"href","/docs/transformers/pr_17146/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(gB,"href","/docs/transformers/pr_17146/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(hB,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaTokenizer"),c(pB,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(_B,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(uB,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(bB,"href","/docs/transformers/pr_17146/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(vB,"href","/docs/transformers/pr_17146/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(FB,"href","/docs/transformers/pr_17146/en/model_doc/splinter#transformers.SplinterTokenizer"),c(TB,"href","/docs/transformers/pr_17146/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(MB,"href","/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(EB,"href","/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(CB,"href","/docs/transformers/pr_17146/en/model_doc/t5#transformers.T5Tokenizer"),c(wB,"href","/docs/transformers/pr_17146/en/model_doc/t5#transformers.T5TokenizerFast"),c(AB,"href","/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TapasTokenizer"),c(yB,"href","/docs/transformers/pr_17146/en/model_doc/tapex#transformers.TapexTokenizer"),c(LB,"href","/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(xB,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertTokenizer"),c($B,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertTokenizerFast"),c(kB,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(SB,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(RB,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(PB,"href","/docs/transformers/pr_17146/en/model_doc/xglm#transformers.XGLMTokenizer"),c(BB,"href","/docs/transformers/pr_17146/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(IB,"href","/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMTokenizer"),c(NB,"href","/docs/transformers/pr_17146/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(qB,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(jB,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(DB,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaTokenizer"),c(GB,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(OB,"href","/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(VB,"href","/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(XB,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertTokenizer"),c(zB,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ih,"id","transformers.AutoFeatureExtractor"),c(ih,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ih,"href","#transformers.AutoFeatureExtractor"),c(Ei,"class","relative group"),c(WB,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(QB,"href","/docs/transformers/pr_17146/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(HB,"href","/docs/transformers/pr_17146/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(UB,"href","/docs/transformers/pr_17146/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(JB,"href","/docs/transformers/pr_17146/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(YB,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(KB,"href","/docs/transformers/pr_17146/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(ZB,"href","/docs/transformers/pr_17146/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(eI,"href","/docs/transformers/pr_17146/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(oI,"href","/docs/transformers/pr_17146/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(rI,"href","/docs/transformers/pr_17146/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(tI,"href","/docs/transformers/pr_17146/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(aI,"href","/docs/transformers/pr_17146/en/model_doc/greaselm#transformers.GreaseLMFeatureExtractor"),c(nI,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(sI,"href","/docs/transformers/pr_17146/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(lI,"href","/docs/transformers/pr_17146/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(iI,"href","/docs/transformers/pr_17146/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(dI,"href","/docs/transformers/pr_17146/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(cI,"href","/docs/transformers/pr_17146/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(fI,"href","/docs/transformers/pr_17146/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(mI,"href","/docs/transformers/pr_17146/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(gI,"href","/docs/transformers/pr_17146/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(hI,"href","/docs/transformers/pr_17146/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(pI,"href","/docs/transformers/pr_17146/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(_I,"href","/docs/transformers/pr_17146/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(uI,"href","/docs/transformers/pr_17146/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(bI,"href","/docs/transformers/pr_17146/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(vI,"href","/docs/transformers/pr_17146/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(FI,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(TI,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(MI,"href","/docs/transformers/pr_17146/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oh,"id","transformers.AutoProcessor"),c(Oh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Oh,"href","#transformers.AutoProcessor"),c(Ci,"class","relative group"),c(EI,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(CI,"href","/docs/transformers/pr_17146/en/model_doc/clip#transformers.CLIPProcessor"),c(wI,"href","/docs/transformers/pr_17146/en/model_doc/greaselm#transformers.GreaseLMProcessor"),c(AI,"href","/docs/transformers/pr_17146/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(yI,"href","/docs/transformers/pr_17146/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(LI,"href","/docs/transformers/pr_17146/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(xI,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c($I,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(kI,"href","/docs/transformers/pr_17146/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(SI,"href","/docs/transformers/pr_17146/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(RI,"href","/docs/transformers/pr_17146/en/model_doc/trocr#transformers.TrOCRProcessor"),c(PI,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(BI,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(II,"href","/docs/transformers/pr_17146/en/model_doc/vilt#transformers.ViltProcessor"),c(NI,"href","/docs/transformers/pr_17146/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(qI,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(jI,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(DI,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cp,"id","transformers.AutoModel"),c(cp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cp,"href","#transformers.AutoModel"),c(Ai,"class","relative group"),c(GI,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OI,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VI,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XI,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertModel"),c(zI,"href","/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartModel"),c(WI,"href","/docs/transformers/pr_17146/en/model_doc/beit#transformers.BeitModel"),c(QI,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertModel"),c(HI,"href","/docs/transformers/pr_17146/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(UI,"href","/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdModel"),c(JI,"href","/docs/transformers/pr_17146/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(YI,"href","/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(KI,"href","/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(ZI,"href","/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertModel"),c(eN,"href","/docs/transformers/pr_17146/en/model_doc/canine#transformers.CanineModel"),c(oN,"href","/docs/transformers/pr_17146/en/model_doc/clip#transformers.CLIPModel"),c(rN,"href","/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertModel"),c(tN,"href","/docs/transformers/pr_17146/en/model_doc/convnext#transformers.ConvNextModel"),c(aN,"href","/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.CTRLModel"),c(nN,"href","/docs/transformers/pr_17146/en/model_doc/cvt#transformers.CvtModel"),c(sN,"href","/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(lN,"href","/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(iN,"href","/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(dN,"href","/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaModel"),c(cN,"href","/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(fN,"href","/docs/transformers/pr_17146/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(mN,"href","/docs/transformers/pr_17146/en/model_doc/deit#transformers.DeiTModel"),c(gN,"href","/docs/transformers/pr_17146/en/model_doc/detr#transformers.DetrModel"),c(hN,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertModel"),c(pN,"href","/docs/transformers/pr_17146/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(_N,"href","/docs/transformers/pr_17146/en/model_doc/dpt#transformers.DPTModel"),c(uN,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraModel"),c(bN,"href","/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertModel"),c(vN,"href","/docs/transformers/pr_17146/en/model_doc/flava#transformers.FlavaModel"),c(FN,"href","/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetModel"),c(TN,"href","/docs/transformers/pr_17146/en/model_doc/fsmt#transformers.FSMTModel"),c(MN,"href","/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelModel"),c(EN,"href","/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelBaseModel"),c(CN,"href","/docs/transformers/pr_17146/en/model_doc/glpn#transformers.GLPNModel"),c(wN,"href","/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2Model"),c(AN,"href","/docs/transformers/pr_17146/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(yN,"href","/docs/transformers/pr_17146/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(LN,"href","/docs/transformers/pr_17146/en/model_doc/gptj#transformers.GPTJModel"),c(xN,"href","/docs/transformers/pr_17146/en/model_doc/greaselm#transformers.GreaseLMModel"),c($N,"href","/docs/transformers/pr_17146/en/model_doc/hubert#transformers.HubertModel"),c(kN,"href","/docs/transformers/pr_17146/en/model_doc/ibert#transformers.IBertModel"),c(SN,"href","/docs/transformers/pr_17146/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(RN,"href","/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(PN,"href","/docs/transformers/pr_17146/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(BN,"href","/docs/transformers/pr_17146/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(IN,"href","/docs/transformers/pr_17146/en/model_doc/led#transformers.LEDModel"),c(NN,"href","/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerModel"),c(qN,"href","/docs/transformers/pr_17146/en/model_doc/luke#transformers.LukeModel"),c(jN,"href","/docs/transformers/pr_17146/en/model_doc/lxmert#transformers.LxmertModel"),c(DN,"href","/docs/transformers/pr_17146/en/model_doc/m2m_100#transformers.M2M100Model"),c(GN,"href","/docs/transformers/pr_17146/en/model_doc/marian#transformers.MarianModel"),c(ON,"href","/docs/transformers/pr_17146/en/model_doc/maskformer#transformers.MaskFormerModel"),c(VN,"href","/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartModel"),c(XN,"href","/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(zN,"href","/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertModel"),c(WN,"href","/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetModel"),c(QN,"href","/docs/transformers/pr_17146/en/model_doc/mt5#transformers.MT5Model"),c(HN,"href","/docs/transformers/pr_17146/en/model_doc/nystromformer#transformers.NystromformerModel"),c(UN,"href","/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(JN,"href","/docs/transformers/pr_17146/en/model_doc/opt#transformers.OPTModel"),c(YN,"href","/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.PegasusModel"),c(KN,"href","/docs/transformers/pr_17146/en/model_doc/perceiver#transformers.PerceiverModel"),c(ZN,"href","/docs/transformers/pr_17146/en/model_doc/plbart#transformers.PLBartModel"),c(eq,"href","/docs/transformers/pr_17146/en/model_doc/poolformer#transformers.PoolFormerModel"),c(oq,"href","/docs/transformers/pr_17146/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(rq,"href","/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertModel"),c(tq,"href","/docs/transformers/pr_17146/en/model_doc/reformer#transformers.ReformerModel"),c(aq,"href","/docs/transformers/pr_17146/en/model_doc/regnet#transformers.RegNetModel"),c(nq,"href","/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertModel"),c(sq,"href","/docs/transformers/pr_17146/en/model_doc/resnet#transformers.ResNetModel"),c(lq,"href","/docs/transformers/pr_17146/en/model_doc/retribert#transformers.RetriBertModel"),c(iq,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaModel"),c(dq,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerModel"),c(cq,"href","/docs/transformers/pr_17146/en/model_doc/segformer#transformers.SegformerModel"),c(fq,"href","/docs/transformers/pr_17146/en/model_doc/sew#transformers.SEWModel"),c(mq,"href","/docs/transformers/pr_17146/en/model_doc/sew-d#transformers.SEWDModel"),c(gq,"href","/docs/transformers/pr_17146/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(hq,"href","/docs/transformers/pr_17146/en/model_doc/splinter#transformers.SplinterModel"),c(pq,"href","/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(_q,"href","/docs/transformers/pr_17146/en/model_doc/swin#transformers.SwinModel"),c(uq,"href","/docs/transformers/pr_17146/en/model_doc/t5#transformers.T5Model"),c(bq,"href","/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TapasModel"),c(vq,"href","/docs/transformers/pr_17146/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Fq,"href","/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Tq,"href","/docs/transformers/pr_17146/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Mq,"href","/docs/transformers/pr_17146/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Eq,"href","/docs/transformers/pr_17146/en/model_doc/van#transformers.VanModel"),c(Cq,"href","/docs/transformers/pr_17146/en/model_doc/vilt#transformers.ViltModel"),c(wq,"href","/docs/transformers/pr_17146/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Aq,"href","/docs/transformers/pr_17146/en/model_doc/visual_bert#transformers.VisualBertModel"),c(yq,"href","/docs/transformers/pr_17146/en/model_doc/vit#transformers.ViTModel"),c(Lq,"href","/docs/transformers/pr_17146/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(xq,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c($q,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(kq,"href","/docs/transformers/pr_17146/en/model_doc/wavlm#transformers.WavLMModel"),c(Sq,"href","/docs/transformers/pr_17146/en/model_doc/xglm#transformers.XGLMModel"),c(Rq,"href","/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMModel"),c(Pq,"href","/docs/transformers/pr_17146/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Bq,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Iq,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Nq,"href","/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetModel"),c(qq,"href","/docs/transformers/pr_17146/en/model_doc/yolos#transformers.YolosModel"),c(jq,"href","/docs/transformers/pr_17146/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iu,"id","transformers.AutoModelForPreTraining"),c(iu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iu,"href","#transformers.AutoModelForPreTraining"),c(xi,"class","relative group"),c(Dq,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gq,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Oq,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vq,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Xq,"href","/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(zq,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertForPreTraining"),c(Wq,"href","/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Qq,"href","/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Hq,"href","/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Uq,"href","/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Jq,"href","/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Yq,"href","/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Kq,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Zq,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraForPreTraining"),c(ej,"href","/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(oj,"href","/docs/transformers/pr_17146/en/model_doc/flava#transformers.FlavaForPreTraining"),c(rj,"href","/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetForPreTraining"),c(tj,"href","/docs/transformers/pr_17146/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(aj,"href","/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(nj,"href","/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(sj,"href","/docs/transformers/pr_17146/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(lj,"href","/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(ij,"href","/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(dj,"href","/docs/transformers/pr_17146/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(cj,"href","/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(fj,"href","/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(mj,"href","/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(gj,"href","/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(hj,"href","/docs/transformers/pr_17146/en/model_doc/retribert#transformers.RetriBertModel"),c(pj,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(_j,"href","/docs/transformers/pr_17146/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(uj,"href","/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(bj,"href","/docs/transformers/pr_17146/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(vj,"href","/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Fj,"href","/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Tj,"href","/docs/transformers/pr_17146/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(Mj,"href","/docs/transformers/pr_17146/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(Ej,"href","/docs/transformers/pr_17146/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Cj,"href","/docs/transformers/pr_17146/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(wj,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(Aj,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(yj,"href","/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Lj,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(xj,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c($j,"href","/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e1,"id","transformers.AutoModelForCausalLM"),c(e1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e1,"href","#transformers.AutoModelForCausalLM"),c(Si,"class","relative group"),c(kj,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Sj,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Rj,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pj,"href","/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartForCausalLM"),c(Bj,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertLMHeadModel"),c(Ij,"href","/docs/transformers/pr_17146/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Nj,"href","/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(qj,"href","/docs/transformers/pr_17146/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(jj,"href","/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(Dj,"href","/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Gj,"href","/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(Oj,"href","/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Vj,"href","/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(Xj,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraForCausalLM"),c(zj,"href","/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Wj,"href","/docs/transformers/pr_17146/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(Qj,"href","/docs/transformers/pr_17146/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(Hj,"href","/docs/transformers/pr_17146/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(Uj,"href","/docs/transformers/pr_17146/en/model_doc/marian#transformers.MarianForCausalLM"),c(Jj,"href","/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Yj,"href","/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(Kj,"href","/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Zj,"href","/docs/transformers/pr_17146/en/model_doc/opt#transformers.OPTForCausalLM"),c(eD,"href","/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(oD,"href","/docs/transformers/pr_17146/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(rD,"href","/docs/transformers/pr_17146/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(tD,"href","/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(aD,"href","/docs/transformers/pr_17146/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(nD,"href","/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(sD,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(lD,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(iD,"href","/docs/transformers/pr_17146/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(dD,"href","/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(cD,"href","/docs/transformers/pr_17146/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(fD,"href","/docs/transformers/pr_17146/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(mD,"href","/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(gD,"href","/docs/transformers/pr_17146/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(hD,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(pD,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(_D,"href","/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G1,"id","transformers.AutoModelForMaskedLM"),c(G1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G1,"href","#transformers.AutoModelForMaskedLM"),c(Bi,"class","relative group"),c(uD,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bD,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vD,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FD,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(TD,"href","/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(MD,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertForMaskedLM"),c(ED,"href","/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(CD,"href","/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(wD,"href","/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(AD,"href","/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(yD,"href","/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(LD,"href","/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(xD,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c($D,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(kD,"href","/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(SD,"href","/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(RD,"href","/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(PD,"href","/docs/transformers/pr_17146/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(BD,"href","/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(ID,"href","/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(ND,"href","/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(qD,"href","/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(jD,"href","/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(DD,"href","/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(GD,"href","/docs/transformers/pr_17146/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(OD,"href","/docs/transformers/pr_17146/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(VD,"href","/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(XD,"href","/docs/transformers/pr_17146/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(zD,"href","/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(WD,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(QD,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(HD,"href","/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(UD,"href","/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(JD,"href","/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(YD,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(KD,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(ZD,"href","/docs/transformers/pr_17146/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ab,"id","transformers.AutoModelForSeq2SeqLM"),c(Ab,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ab,"href","#transformers.AutoModelForSeq2SeqLM"),c(qi,"class","relative group"),c(eG,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oG,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rG,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tG,"href","/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(aG,"href","/docs/transformers/pr_17146/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(nG,"href","/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(sG,"href","/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(lG,"href","/docs/transformers/pr_17146/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(iG,"href","/docs/transformers/pr_17146/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(dG,"href","/docs/transformers/pr_17146/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(cG,"href","/docs/transformers/pr_17146/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(fG,"href","/docs/transformers/pr_17146/en/model_doc/marian#transformers.MarianMTModel"),c(mG,"href","/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(gG,"href","/docs/transformers/pr_17146/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(hG,"href","/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(pG,"href","/docs/transformers/pr_17146/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(_G,"href","/docs/transformers/pr_17146/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(uG,"href","/docs/transformers/pr_17146/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(bG,"href","/docs/transformers/pr_17146/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wb,"id","transformers.AutoModelForSequenceClassification"),c(Wb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wb,"href","#transformers.AutoModelForSequenceClassification"),c(Gi,"class","relative group"),c(vG,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FG,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TG,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MG,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(EG,"href","/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartForSequenceClassification"),c(CG,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertForSequenceClassification"),c(wG,"href","/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(AG,"href","/docs/transformers/pr_17146/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(yG,"href","/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(LG,"href","/docs/transformers/pr_17146/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(xG,"href","/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c($G,"href","/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(kG,"href","/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(SG,"href","/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(RG,"href","/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(PG,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(BG,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(IG,"href","/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(NG,"href","/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(qG,"href","/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(jG,"href","/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(DG,"href","/docs/transformers/pr_17146/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(GG,"href","/docs/transformers/pr_17146/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(OG,"href","/docs/transformers/pr_17146/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(VG,"href","/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(XG,"href","/docs/transformers/pr_17146/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(zG,"href","/docs/transformers/pr_17146/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(WG,"href","/docs/transformers/pr_17146/en/model_doc/led#transformers.LEDForSequenceClassification"),c(QG,"href","/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(HG,"href","/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(UG,"href","/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(JG,"href","/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(YG,"href","/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(KG,"href","/docs/transformers/pr_17146/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(ZG,"href","/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(eO,"href","/docs/transformers/pr_17146/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(oO,"href","/docs/transformers/pr_17146/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(rO,"href","/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(tO,"href","/docs/transformers/pr_17146/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(aO,"href","/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(nO,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(sO,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(lO,"href","/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(iO,"href","/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(dO,"href","/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(cO,"href","/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(fO,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(mO,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(gO,"href","/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(hO,"href","/docs/transformers/pr_17146/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V2,"id","transformers.AutoModelForMultipleChoice"),c(V2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V2,"href","#transformers.AutoModelForMultipleChoice"),c(Xi,"class","relative group"),c(pO,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_O,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uO,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bO,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(vO,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertForMultipleChoice"),c(FO,"href","/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(TO,"href","/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(MO,"href","/docs/transformers/pr_17146/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(EO,"href","/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(CO,"href","/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(wO,"href","/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(AO,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(yO,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(LO,"href","/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(xO,"href","/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c($O,"href","/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(kO,"href","/docs/transformers/pr_17146/en/model_doc/greaselm#transformers.GreaseLMForMultipleChoice"),c(SO,"href","/docs/transformers/pr_17146/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(RO,"href","/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(PO,"href","/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(BO,"href","/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(IO,"href","/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(NO,"href","/docs/transformers/pr_17146/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(qO,"href","/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(jO,"href","/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(DO,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(GO,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(OO,"href","/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(VO,"href","/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(XO,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(zO,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(WO,"href","/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(QO,"href","/docs/transformers/pr_17146/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E4,"id","transformers.AutoModelForNextSentencePrediction"),c(E4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E4,"href","#transformers.AutoModelForNextSentencePrediction"),c(Qi,"class","relative group"),c(HO,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UO,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JO,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YO,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(KO,"href","/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(ZO,"href","/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(eV,"href","/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(oV,"href","/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S4,"id","transformers.AutoModelForTokenClassification"),c(S4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S4,"href","#transformers.AutoModelForTokenClassification"),c(Ji,"class","relative group"),c(rV,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tV,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aV,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nV,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(sV,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertForTokenClassification"),c(lV,"href","/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(iV,"href","/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(dV,"href","/docs/transformers/pr_17146/en/model_doc/canine#transformers.CanineForTokenClassification"),c(cV,"href","/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(fV,"href","/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(mV,"href","/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(gV,"href","/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(hV,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(pV,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(_V,"href","/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(uV,"href","/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(bV,"href","/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(vV,"href","/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(FV,"href","/docs/transformers/pr_17146/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(TV,"href","/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(MV,"href","/docs/transformers/pr_17146/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(EV,"href","/docs/transformers/pr_17146/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(CV,"href","/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(wV,"href","/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(AV,"href","/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(yV,"href","/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(LV,"href","/docs/transformers/pr_17146/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(xV,"href","/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c($V,"href","/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(kV,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(SV,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(RV,"href","/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(PV,"href","/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(BV,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(IV,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(NV,"href","/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(qV,"href","/docs/transformers/pr_17146/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_v,"id","transformers.AutoModelForQuestionAnswering"),c(_v,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_v,"href","#transformers.AutoModelForQuestionAnswering"),c(Zi,"class","relative group"),c(jV,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DV,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GV,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OV,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(VV,"href","/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(XV,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(zV,"href","/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(WV,"href","/docs/transformers/pr_17146/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(QV,"href","/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(HV,"href","/docs/transformers/pr_17146/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(UV,"href","/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(JV,"href","/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(YV,"href","/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(KV,"href","/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(ZV,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(eX,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(oX,"href","/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(rX,"href","/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(tX,"href","/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(aX,"href","/docs/transformers/pr_17146/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(nX,"href","/docs/transformers/pr_17146/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(sX,"href","/docs/transformers/pr_17146/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(lX,"href","/docs/transformers/pr_17146/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(iX,"href","/docs/transformers/pr_17146/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(dX,"href","/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(cX,"href","/docs/transformers/pr_17146/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(fX,"href","/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(mX,"href","/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(gX,"href","/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(hX,"href","/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(pX,"href","/docs/transformers/pr_17146/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(_X,"href","/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(uX,"href","/docs/transformers/pr_17146/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(bX,"href","/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(vX,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(FX,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(TX,"href","/docs/transformers/pr_17146/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(MX,"href","/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(EX,"href","/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(CX,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(wX,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(AX,"href","/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(yX,"href","/docs/transformers/pr_17146/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sF,"id","transformers.AutoModelForTableQuestionAnswering"),c(sF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(rd,"class","relative group"),c(LX,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xX,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($X,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kX,"href","/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fF,"id","transformers.AutoModelForImageClassification"),c(fF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fF,"href","#transformers.AutoModelForImageClassification"),c(nd,"class","relative group"),c(SX,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RX,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PX,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BX,"href","/docs/transformers/pr_17146/en/model_doc/beit#transformers.BeitForImageClassification"),c(IX,"href","/docs/transformers/pr_17146/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(NX,"href","/docs/transformers/pr_17146/en/model_doc/cvt#transformers.CvtForImageClassification"),c(qX,"href","/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(jX,"href","/docs/transformers/pr_17146/en/model_doc/deit#transformers.DeiTForImageClassification"),c(DX,"href","/docs/transformers/pr_17146/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(GX,"href","/docs/transformers/pr_17146/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(OX,"href","/docs/transformers/pr_17146/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(VX,"href","/docs/transformers/pr_17146/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(XX,"href","/docs/transformers/pr_17146/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(zX,"href","/docs/transformers/pr_17146/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(WX,"href","/docs/transformers/pr_17146/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(QX,"href","/docs/transformers/pr_17146/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(HX,"href","/docs/transformers/pr_17146/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(UX,"href","/docs/transformers/pr_17146/en/model_doc/swin#transformers.SwinForImageClassification"),c(JX,"href","/docs/transformers/pr_17146/en/model_doc/van#transformers.VanForImageClassification"),c(YX,"href","/docs/transformers/pr_17146/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yF,"id","transformers.AutoModelForVision2Seq"),c(yF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yF,"href","#transformers.AutoModelForVision2Seq"),c(id,"class","relative group"),c(KX,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZX,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ez,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oz,"href","/docs/transformers/pr_17146/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SF,"id","transformers.AutoModelForAudioClassification"),c(SF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SF,"href","#transformers.AutoModelForAudioClassification"),c(fd,"class","relative group"),c(rz,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tz,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(az,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nz,"href","/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(sz,"href","/docs/transformers/pr_17146/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(lz,"href","/docs/transformers/pr_17146/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(iz,"href","/docs/transformers/pr_17146/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(dz,"href","/docs/transformers/pr_17146/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(cz,"href","/docs/transformers/pr_17146/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(fz,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(mz,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(gz,"href","/docs/transformers/pr_17146/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zF,"id","transformers.AutoModelForAudioFrameClassification"),c(zF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zF,"href","#transformers.AutoModelForAudioFrameClassification"),c(hd,"class","relative group"),c(hz,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pz,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_z,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uz,"href","/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(bz,"href","/docs/transformers/pr_17146/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(vz,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(Fz,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(Tz,"href","/docs/transformers/pr_17146/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e6,"id","transformers.AutoModelForCTC"),c(e6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e6,"href","#transformers.AutoModelForCTC"),c(ud,"class","relative group"),c(Mz,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ez,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cz,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wz,"href","/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(Az,"href","/docs/transformers/pr_17146/en/model_doc/hubert#transformers.HubertForCTC"),c(yz,"href","/docs/transformers/pr_17146/en/model_doc/sew#transformers.SEWForCTC"),c(Lz,"href","/docs/transformers/pr_17146/en/model_doc/sew-d#transformers.SEWDForCTC"),c(xz,"href","/docs/transformers/pr_17146/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c($z,"href","/docs/transformers/pr_17146/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(kz,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(Sz,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(Rz,"href","/docs/transformers/pr_17146/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g6,"id","transformers.AutoModelForSpeechSeq2Seq"),c(g6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g6,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Fd,"class","relative group"),c(Pz,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bz,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Iz,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nz,"href","/docs/transformers/pr_17146/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(qz,"href","/docs/transformers/pr_17146/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v6,"id","transformers.AutoModelForAudioXVector"),c(v6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v6,"href","#transformers.AutoModelForAudioXVector"),c(Ed,"class","relative group"),c(jz,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dz,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gz,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oz,"href","/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(Vz,"href","/docs/transformers/pr_17146/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(Xz,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(zz,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(Wz,"href","/docs/transformers/pr_17146/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L6,"id","transformers.AutoModelForMaskedImageModeling"),c(L6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L6,"href","#transformers.AutoModelForMaskedImageModeling"),c(Ad,"class","relative group"),c(Qz,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hz,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Uz,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jz,"href","/docs/transformers/pr_17146/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(Yz,"href","/docs/transformers/pr_17146/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(Kz,"href","/docs/transformers/pr_17146/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B6,"id","transformers.AutoModelForObjectDetection"),c(B6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B6,"href","#transformers.AutoModelForObjectDetection"),c($d,"class","relative group"),c(Zz,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eW,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oW,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rW,"href","/docs/transformers/pr_17146/en/model_doc/detr#transformers.DetrForObjectDetection"),c(tW,"href","/docs/transformers/pr_17146/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G6,"id","transformers.AutoModelForImageSegmentation"),c(G6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G6,"href","#transformers.AutoModelForImageSegmentation"),c(Rd,"class","relative group"),c(aW,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nW,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sW,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lW,"href","/docs/transformers/pr_17146/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W6,"id","transformers.AutoModelForSemanticSegmentation"),c(W6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W6,"href","#transformers.AutoModelForSemanticSegmentation"),c(Id,"class","relative group"),c(iW,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dW,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cW,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fW,"href","/docs/transformers/pr_17146/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(mW,"href","/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(gW,"href","/docs/transformers/pr_17146/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(hW,"href","/docs/transformers/pr_17146/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eT,"id","transformers.AutoModelForInstanceSegmentation"),c(eT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eT,"href","#transformers.AutoModelForInstanceSegmentation"),c(jd,"class","relative group"),c(pW,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_W,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uW,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bW,"href","/docs/transformers/pr_17146/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nT,"id","transformers.TFAutoModel"),c(nT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nT,"href","#transformers.TFAutoModel"),c(Od,"class","relative group"),c(vW,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FW,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TW,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MW,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.TFAlbertModel"),c(EW,"href","/docs/transformers/pr_17146/en/model_doc/bart#transformers.TFBartModel"),c(CW,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.TFBertModel"),c(wW,"href","/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(AW,"href","/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(yW,"href","/docs/transformers/pr_17146/en/model_doc/camembert#transformers.TFCamembertModel"),c(LW,"href","/docs/transformers/pr_17146/en/model_doc/clip#transformers.TFCLIPModel"),c(xW,"href","/docs/transformers/pr_17146/en/model_doc/convbert#transformers.TFConvBertModel"),c($W,"href","/docs/transformers/pr_17146/en/model_doc/convnext#transformers.TFConvNextModel"),c(kW,"href","/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.TFCTRLModel"),c(SW,"href","/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(RW,"href","/docs/transformers/pr_17146/en/model_doc/deberta#transformers.TFDebertaModel"),c(PW,"href","/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(BW,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(IW,"href","/docs/transformers/pr_17146/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(NW,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.TFElectraModel"),c(qW,"href","/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(jW,"href","/docs/transformers/pr_17146/en/model_doc/funnel#transformers.TFFunnelModel"),c(DW,"href","/docs/transformers/pr_17146/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(GW,"href","/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.TFGPT2Model"),c(OW,"href","/docs/transformers/pr_17146/en/model_doc/gptj#transformers.TFGPTJModel"),c(VW,"href","/docs/transformers/pr_17146/en/model_doc/hubert#transformers.TFHubertModel"),c(XW,"href","/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(zW,"href","/docs/transformers/pr_17146/en/model_doc/led#transformers.TFLEDModel"),c(WW,"href","/docs/transformers/pr_17146/en/model_doc/longformer#transformers.TFLongformerModel"),c(QW,"href","/docs/transformers/pr_17146/en/model_doc/lxmert#transformers.TFLxmertModel"),c(HW,"href","/docs/transformers/pr_17146/en/model_doc/marian#transformers.TFMarianModel"),c(UW,"href","/docs/transformers/pr_17146/en/model_doc/mbart#transformers.TFMBartModel"),c(JW,"href","/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(YW,"href","/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.TFMPNetModel"),c(KW,"href","/docs/transformers/pr_17146/en/model_doc/mt5#transformers.TFMT5Model"),c(ZW,"href","/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(eQ,"href","/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.TFPegasusModel"),c(oQ,"href","/docs/transformers/pr_17146/en/model_doc/rembert#transformers.TFRemBertModel"),c(rQ,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.TFRobertaModel"),c(tQ,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.TFRoFormerModel"),c(aQ,"href","/docs/transformers/pr_17146/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(nQ,"href","/docs/transformers/pr_17146/en/model_doc/swin#transformers.TFSwinModel"),c(sQ,"href","/docs/transformers/pr_17146/en/model_doc/t5#transformers.TFT5Model"),c(lQ,"href","/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TFTapasModel"),c(iQ,"href","/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(dQ,"href","/docs/transformers/pr_17146/en/model_doc/vit#transformers.TFViTModel"),c(cQ,"href","/docs/transformers/pr_17146/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(fQ,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(mQ,"href","/docs/transformers/pr_17146/en/model_doc/xlm#transformers.TFXLMModel"),c(gQ,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(hQ,"href","/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZT,"id","transformers.TFAutoModelForPreTraining"),c(ZT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZT,"href","#transformers.TFAutoModelForPreTraining"),c(zd,"class","relative group"),c(pQ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_Q,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uQ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bQ,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(vQ,"href","/docs/transformers/pr_17146/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(FQ,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.TFBertForPreTraining"),c(TQ,"href","/docs/transformers/pr_17146/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(MQ,"href","/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(EQ,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(CQ,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(wQ,"href","/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(AQ,"href","/docs/transformers/pr_17146/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(yQ,"href","/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(LQ,"href","/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(xQ,"href","/docs/transformers/pr_17146/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c($Q,"href","/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(kQ,"href","/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(SQ,"href","/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(RQ,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(PQ,"href","/docs/transformers/pr_17146/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(BQ,"href","/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(IQ,"href","/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(NQ,"href","/docs/transformers/pr_17146/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(qQ,"href","/docs/transformers/pr_17146/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(jQ,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(DQ,"href","/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w7,"id","transformers.TFAutoModelForCausalLM"),c(w7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w7,"href","#transformers.TFAutoModelForCausalLM"),c(Hd,"class","relative group"),c(GQ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OQ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VQ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XQ,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(zQ,"href","/docs/transformers/pr_17146/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(WQ,"href","/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(QQ,"href","/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(HQ,"href","/docs/transformers/pr_17146/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(UQ,"href","/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(JQ,"href","/docs/transformers/pr_17146/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(YQ,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(KQ,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(ZQ,"href","/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(eH,"href","/docs/transformers/pr_17146/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(oH,"href","/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D7,"id","transformers.TFAutoModelForImageClassification"),c(D7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D7,"href","#transformers.TFAutoModelForImageClassification"),c(Yd,"class","relative group"),c(rH,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tH,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aH,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nH,"href","/docs/transformers/pr_17146/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(sH,"href","/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(lH,"href","/docs/transformers/pr_17146/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(iH,"href","/docs/transformers/pr_17146/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q7,"id","transformers.TFAutoModelForMaskedLM"),c(Q7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q7,"href","#transformers.TFAutoModelForMaskedLM"),c(ec,"class","relative group"),c(dH,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cH,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fH,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mH,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(gH,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(hH,"href","/docs/transformers/pr_17146/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(pH,"href","/docs/transformers/pr_17146/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(_H,"href","/docs/transformers/pr_17146/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(uH,"href","/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(bH,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(vH,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(FH,"href","/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(TH,"href","/docs/transformers/pr_17146/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(MH,"href","/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(EH,"href","/docs/transformers/pr_17146/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(CH,"href","/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(wH,"href","/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(AH,"href","/docs/transformers/pr_17146/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(yH,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(LH,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(xH,"href","/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c($H,"href","/docs/transformers/pr_17146/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(kH,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_M,"id","transformers.TFAutoModelForSeq2SeqLM"),c(_M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_M,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(tc,"class","relative group"),c(SH,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RH,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PH,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BH,"href","/docs/transformers/pr_17146/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(IH,"href","/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(NH,"href","/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(qH,"href","/docs/transformers/pr_17146/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(jH,"href","/docs/transformers/pr_17146/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(DH,"href","/docs/transformers/pr_17146/en/model_doc/marian#transformers.TFMarianMTModel"),c(GH,"href","/docs/transformers/pr_17146/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(OH,"href","/docs/transformers/pr_17146/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(VH,"href","/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(XH,"href","/docs/transformers/pr_17146/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xM,"id","transformers.TFAutoModelForSequenceClassification"),c(xM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xM,"href","#transformers.TFAutoModelForSequenceClassification"),c(sc,"class","relative group"),c(zH,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WH,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QH,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HH,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(UH,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(JH,"href","/docs/transformers/pr_17146/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(YH,"href","/docs/transformers/pr_17146/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(KH,"href","/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(ZH,"href","/docs/transformers/pr_17146/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(eU,"href","/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(oU,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(rU,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(tU,"href","/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(aU,"href","/docs/transformers/pr_17146/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(nU,"href","/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(sU,"href","/docs/transformers/pr_17146/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(lU,"href","/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(iU,"href","/docs/transformers/pr_17146/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(dU,"href","/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(cU,"href","/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(fU,"href","/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(mU,"href","/docs/transformers/pr_17146/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(gU,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(hU,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(pU,"href","/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(_U,"href","/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(uU,"href","/docs/transformers/pr_17146/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(bU,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(vU,"href","/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aE,"id","transformers.TFAutoModelForMultipleChoice"),c(aE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aE,"href","#transformers.TFAutoModelForMultipleChoice"),c(dc,"class","relative group"),c(FU,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TU,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MU,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EU,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(CU,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(wU,"href","/docs/transformers/pr_17146/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(AU,"href","/docs/transformers/pr_17146/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(yU,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(LU,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(xU,"href","/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c($U,"href","/docs/transformers/pr_17146/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(kU,"href","/docs/transformers/pr_17146/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(SU,"href","/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(RU,"href","/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(PU,"href","/docs/transformers/pr_17146/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(BU,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(IU,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(NU,"href","/docs/transformers/pr_17146/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(qU,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(jU,"href","/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CE,"id","transformers.TFAutoModelForNextSentencePrediction"),c(CE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CE,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(mc,"class","relative group"),c(DU,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GU,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OU,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VU,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(XU,"href","/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(xE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(pc,"class","relative group"),c(zU,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WU,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QU,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HU,"href","/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RE,"id","transformers.TFAutoModelForTokenClassification"),c(RE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RE,"href","#transformers.TFAutoModelForTokenClassification"),c(bc,"class","relative group"),c(UU,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JU,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YU,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KU,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(ZU,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(eJ,"href","/docs/transformers/pr_17146/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(oJ,"href","/docs/transformers/pr_17146/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(rJ,"href","/docs/transformers/pr_17146/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(tJ,"href","/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(aJ,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(nJ,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(sJ,"href","/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(lJ,"href","/docs/transformers/pr_17146/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(iJ,"href","/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(dJ,"href","/docs/transformers/pr_17146/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(cJ,"href","/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(fJ,"href","/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(mJ,"href","/docs/transformers/pr_17146/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(gJ,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(hJ,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(pJ,"href","/docs/transformers/pr_17146/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(_J,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(uJ,"href","/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rC,"id","transformers.TFAutoModelForQuestionAnswering"),c(rC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rC,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Tc,"class","relative group"),c(bJ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vJ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FJ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TJ,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(MJ,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(EJ,"href","/docs/transformers/pr_17146/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(CJ,"href","/docs/transformers/pr_17146/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(wJ,"href","/docs/transformers/pr_17146/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(AJ,"href","/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(yJ,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(LJ,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(xJ,"href","/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c($J,"href","/docs/transformers/pr_17146/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(kJ,"href","/docs/transformers/pr_17146/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(SJ,"href","/docs/transformers/pr_17146/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(RJ,"href","/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(PJ,"href","/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(BJ,"href","/docs/transformers/pr_17146/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(IJ,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(NJ,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(qJ,"href","/docs/transformers/pr_17146/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(jJ,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(DJ,"href","/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wC,"id","transformers.TFAutoModelForVision2Seq"),c(wC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wC,"href","#transformers.TFAutoModelForVision2Seq"),c(Cc,"class","relative group"),c(GJ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OJ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VJ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XJ,"href","/docs/transformers/pr_17146/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(xC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(yc,"class","relative group"),c(zJ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WJ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QJ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HJ,"href","/docs/transformers/pr_17146/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RC,"id","transformers.FlaxAutoModel"),c(RC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RC,"href","#transformers.FlaxAutoModel"),c($c,"class","relative group"),c(UJ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JJ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YJ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KJ,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.FlaxAlbertModel"),c(ZJ,"href","/docs/transformers/pr_17146/en/model_doc/bart#transformers.FlaxBartModel"),c(eY,"href","/docs/transformers/pr_17146/en/model_doc/beit#transformers.FlaxBeitModel"),c(oY,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.FlaxBertModel"),c(rY,"href","/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(tY,"href","/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(aY,"href","/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(nY,"href","/docs/transformers/pr_17146/en/model_doc/clip#transformers.FlaxCLIPModel"),c(sY,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(lY,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.FlaxElectraModel"),c(iY,"href","/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(dY,"href","/docs/transformers/pr_17146/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(cY,"href","/docs/transformers/pr_17146/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(fY,"href","/docs/transformers/pr_17146/en/model_doc/marian#transformers.FlaxMarianModel"),c(mY,"href","/docs/transformers/pr_17146/en/model_doc/mbart#transformers.FlaxMBartModel"),c(gY,"href","/docs/transformers/pr_17146/en/model_doc/mt5#transformers.FlaxMT5Model"),c(hY,"href","/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(pY,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(_Y,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(uY,"href","/docs/transformers/pr_17146/en/model_doc/t5#transformers.FlaxT5Model"),c(bY,"href","/docs/transformers/pr_17146/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(vY,"href","/docs/transformers/pr_17146/en/model_doc/vit#transformers.FlaxViTModel"),c(FY,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(TY,"href","/docs/transformers/pr_17146/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(MY,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l5,"id","transformers.FlaxAutoModelForCausalLM"),c(l5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l5,"href","#transformers.FlaxAutoModelForCausalLM"),c(Rc,"class","relative group"),c(EY,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CY,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wY,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AY,"href","/docs/transformers/pr_17146/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(yY,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(LY,"href","/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(xY,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c($Y,"href","/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(kY,"href","/docs/transformers/pr_17146/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(SY,"href","/docs/transformers/pr_17146/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(RY,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(PY,"href","/docs/transformers/pr_17146/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v5,"id","transformers.FlaxAutoModelForPreTraining"),c(v5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v5,"href","#transformers.FlaxAutoModelForPreTraining"),c(Ic,"class","relative group"),c(BY,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IY,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NY,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qY,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(jY,"href","/docs/transformers/pr_17146/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(DY,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(GY,"href","/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(OY,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(VY,"href","/docs/transformers/pr_17146/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(XY,"href","/docs/transformers/pr_17146/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(zY,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(WY,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(QY,"href","/docs/transformers/pr_17146/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(HY,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(UY,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P5,"id","transformers.FlaxAutoModelForMaskedLM"),c(P5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(jc,"class","relative group"),c(JY,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YY,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KY,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZY,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(eK,"href","/docs/transformers/pr_17146/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(oK,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(rK,"href","/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(tK,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(aK,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(nK,"href","/docs/transformers/pr_17146/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(sK,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(lK,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(iK,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(Q5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Oc,"class","relative group"),c(dK,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cK,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fK,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mK,"href","/docs/transformers/pr_17146/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(gK,"href","/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(hK,"href","/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(pK,"href","/docs/transformers/pr_17146/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(_K,"href","/docs/transformers/pr_17146/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(uK,"href","/docs/transformers/pr_17146/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(bK,"href","/docs/transformers/pr_17146/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(vK,"href","/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(FK,"href","/docs/transformers/pr_17146/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n3,"id","transformers.FlaxAutoModelForSequenceClassification"),c(n3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n3,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(zc,"class","relative group"),c(TK,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MK,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EK,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CK,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(wK,"href","/docs/transformers/pr_17146/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(AK,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(yK,"href","/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(LK,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(xK,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c($K,"href","/docs/transformers/pr_17146/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(kK,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(SK,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(RK,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b3,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(b3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Hc,"class","relative group"),c(PK,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BK,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IK,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NK,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(qK,"href","/docs/transformers/pr_17146/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(jK,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(DK,"href","/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(GK,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(OK,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(VK,"href","/docs/transformers/pr_17146/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(XK,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(zK,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(WK,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k3,"id","transformers.FlaxAutoModelForTokenClassification"),c(k3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k3,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Yc,"class","relative group"),c(QK,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HK,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UK,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JK,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(YK,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(KK,"href","/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(ZK,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(eZ,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(oZ,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(rZ,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(tZ,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O3,"id","transformers.FlaxAutoModelForMultipleChoice"),c(O3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O3,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(ef,"class","relative group"),c(aZ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nZ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sZ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lZ,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(iZ,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(dZ,"href","/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(cZ,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(fZ,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(mZ,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(gZ,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(hZ,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(Z3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(tf,"class","relative group"),c(pZ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_Z,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uZ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bZ,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tw,"id","transformers.FlaxAutoModelForImageClassification"),c(tw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tw,"href","#transformers.FlaxAutoModelForImageClassification"),c(sf,"class","relative group"),c(vZ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FZ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TZ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MZ,"href","/docs/transformers/pr_17146/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(EZ,"href","/docs/transformers/pr_17146/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iw,"id","transformers.FlaxAutoModelForVision2Seq"),c(iw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(cf,"class","relative group"),c(CZ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wZ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AZ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yZ,"href","/docs/transformers/pr_17146/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,mi),b(f,_f,u),b(f,rt,u),e(rt,gi),e(rt,hi),e(hi,xA),e(rt,uf),b(f,je,u),b(f,We,u),e(We,pi),e(We,yn),e(yn,$A),e(We,Ln),e(We,xn),e(xn,kA),e(We,_i),e(We,$n),e($n,SA),e(We,ui),b(f,bf,u),M(Ca,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,K$),e(Ae,bi),e(bi,Z$),e(Ae,ek),b(f,Eo,u),b(f,wa,u),e(wa,ok),e(wa,vf),e(vf,rk),e(wa,POe),b(f,Eqe,u),b(f,vi,u),e(vi,Ff),e(Ff,Foe),M(RA,Foe,null),e(vi,BOe),e(vi,Toe),e(Toe,IOe),b(f,Cqe,u),b(f,kn,u),e(kn,NOe),e(kn,Moe),e(Moe,qOe),e(kn,jOe),e(kn,Eoe),e(Eoe,DOe),e(kn,GOe),b(f,wqe,u),M(PA,f,u),b(f,Aqe,u),b(f,tk,u),e(tk,OOe),b(f,yqe,u),M(Tf,f,u),b(f,Lqe,u),b(f,Fi,u),e(Fi,Mf),e(Mf,Coe),M(BA,Coe,null),e(Fi,VOe),e(Fi,woe),e(woe,XOe),b(f,xqe,u),b(f,Co,u),M(IA,Co,null),e(Co,zOe),e(Co,NA),e(NA,WOe),e(NA,ak),e(ak,QOe),e(NA,HOe),e(Co,UOe),e(Co,qA),e(qA,JOe),e(qA,Aoe),e(Aoe,YOe),e(qA,KOe),e(Co,ZOe),e(Co,Er),M(jA,Er,null),e(Er,eVe),e(Er,yoe),e(yoe,oVe),e(Er,rVe),e(Er,Ti),e(Ti,tVe),e(Ti,Loe),e(Loe,aVe),e(Ti,nVe),e(Ti,xoe),e(xoe,sVe),e(Ti,lVe),e(Er,iVe),e(Er,A),e(A,Ef),e(Ef,$oe),e($oe,dVe),e(Ef,cVe),e(Ef,nk),e(nk,fVe),e(Ef,mVe),e(A,gVe),e(A,Cf),e(Cf,koe),e(koe,hVe),e(Cf,pVe),e(Cf,sk),e(sk,_Ve),e(Cf,uVe),e(A,bVe),e(A,wf),e(wf,Soe),e(Soe,vVe),e(wf,FVe),e(wf,lk),e(lk,TVe),e(wf,MVe),e(A,EVe),e(A,Af),e(Af,Roe),e(Roe,CVe),e(Af,wVe),e(Af,ik),e(ik,AVe),e(Af,yVe),e(A,LVe),e(A,yf),e(yf,Poe),e(Poe,xVe),e(yf,$Ve),e(yf,dk),e(dk,kVe),e(yf,SVe),e(A,RVe),e(A,Lf),e(Lf,Boe),e(Boe,PVe),e(Lf,BVe),e(Lf,ck),e(ck,IVe),e(Lf,NVe),e(A,qVe),e(A,xf),e(xf,Ioe),e(Ioe,jVe),e(xf,DVe),e(xf,fk),e(fk,GVe),e(xf,OVe),e(A,VVe),e(A,$f),e($f,Noe),e(Noe,XVe),e($f,zVe),e($f,mk),e(mk,WVe),e($f,QVe),e(A,HVe),e(A,kf),e(kf,qoe),e(qoe,UVe),e(kf,JVe),e(kf,gk),e(gk,YVe),e(kf,KVe),e(A,ZVe),e(A,Sf),e(Sf,joe),e(joe,eXe),e(Sf,oXe),e(Sf,hk),e(hk,rXe),e(Sf,tXe),e(A,aXe),e(A,Rf),e(Rf,Doe),e(Doe,nXe),e(Rf,sXe),e(Rf,pk),e(pk,lXe),e(Rf,iXe),e(A,dXe),e(A,Pf),e(Pf,Goe),e(Goe,cXe),e(Pf,fXe),e(Pf,_k),e(_k,mXe),e(Pf,gXe),e(A,hXe),e(A,Bf),e(Bf,Ooe),e(Ooe,pXe),e(Bf,_Xe),e(Bf,uk),e(uk,uXe),e(Bf,bXe),e(A,vXe),e(A,If),e(If,Voe),e(Voe,FXe),e(If,TXe),e(If,bk),e(bk,MXe),e(If,EXe),e(A,CXe),e(A,Nf),e(Nf,Xoe),e(Xoe,wXe),e(Nf,AXe),e(Nf,vk),e(vk,yXe),e(Nf,LXe),e(A,xXe),e(A,qf),e(qf,zoe),e(zoe,$Xe),e(qf,kXe),e(qf,Fk),e(Fk,SXe),e(qf,RXe),e(A,PXe),e(A,jf),e(jf,Woe),e(Woe,BXe),e(jf,IXe),e(jf,Tk),e(Tk,NXe),e(jf,qXe),e(A,jXe),e(A,Df),e(Df,Qoe),e(Qoe,DXe),e(Df,GXe),e(Df,Mk),e(Mk,OXe),e(Df,VXe),e(A,XXe),e(A,Gf),e(Gf,Hoe),e(Hoe,zXe),e(Gf,WXe),e(Gf,Ek),e(Ek,QXe),e(Gf,HXe),e(A,UXe),e(A,Of),e(Of,Uoe),e(Uoe,JXe),e(Of,YXe),e(Of,Ck),e(Ck,KXe),e(Of,ZXe),e(A,eze),e(A,Vf),e(Vf,Joe),e(Joe,oze),e(Vf,rze),e(Vf,wk),e(wk,tze),e(Vf,aze),e(A,nze),e(A,Xf),e(Xf,Yoe),e(Yoe,sze),e(Xf,lze),e(Xf,Ak),e(Ak,ize),e(Xf,dze),e(A,cze),e(A,zf),e(zf,Koe),e(Koe,fze),e(zf,mze),e(zf,yk),e(yk,gze),e(zf,hze),e(A,pze),e(A,Wf),e(Wf,Zoe),e(Zoe,_ze),e(Wf,uze),e(Wf,Lk),e(Lk,bze),e(Wf,vze),e(A,Fze),e(A,Qf),e(Qf,ere),e(ere,Tze),e(Qf,Mze),e(Qf,xk),e(xk,Eze),e(Qf,Cze),e(A,wze),e(A,Hf),e(Hf,ore),e(ore,Aze),e(Hf,yze),e(Hf,$k),e($k,Lze),e(Hf,xze),e(A,$ze),e(A,Uf),e(Uf,rre),e(rre,kze),e(Uf,Sze),e(Uf,kk),e(kk,Rze),e(Uf,Pze),e(A,Bze),e(A,Jf),e(Jf,tre),e(tre,Ize),e(Jf,Nze),e(Jf,Sk),e(Sk,qze),e(Jf,jze),e(A,Dze),e(A,Yf),e(Yf,are),e(are,Gze),e(Yf,Oze),e(Yf,Rk),e(Rk,Vze),e(Yf,Xze),e(A,zze),e(A,Kf),e(Kf,nre),e(nre,Wze),e(Kf,Qze),e(Kf,Pk),e(Pk,Hze),e(Kf,Uze),e(A,Jze),e(A,Zf),e(Zf,sre),e(sre,Yze),e(Zf,Kze),e(Zf,Bk),e(Bk,Zze),e(Zf,eWe),e(A,oWe),e(A,em),e(em,lre),e(lre,rWe),e(em,tWe),e(em,Ik),e(Ik,aWe),e(em,nWe),e(A,sWe),e(A,om),e(om,ire),e(ire,lWe),e(om,iWe),e(om,Nk),e(Nk,dWe),e(om,cWe),e(A,fWe),e(A,rm),e(rm,dre),e(dre,mWe),e(rm,gWe),e(rm,qk),e(qk,hWe),e(rm,pWe),e(A,_We),e(A,tm),e(tm,cre),e(cre,uWe),e(tm,bWe),e(tm,jk),e(jk,vWe),e(tm,FWe),e(A,TWe),e(A,am),e(am,fre),e(fre,MWe),e(am,EWe),e(am,Dk),e(Dk,CWe),e(am,wWe),e(A,AWe),e(A,nm),e(nm,mre),e(mre,yWe),e(nm,LWe),e(nm,Gk),e(Gk,xWe),e(nm,$We),e(A,kWe),e(A,sm),e(sm,gre),e(gre,SWe),e(sm,RWe),e(sm,Ok),e(Ok,PWe),e(sm,BWe),e(A,IWe),e(A,lm),e(lm,hre),e(hre,NWe),e(lm,qWe),e(lm,Vk),e(Vk,jWe),e(lm,DWe),e(A,GWe),e(A,im),e(im,pre),e(pre,OWe),e(im,VWe),e(im,Xk),e(Xk,XWe),e(im,zWe),e(A,WWe),e(A,dm),e(dm,_re),e(_re,QWe),e(dm,HWe),e(dm,zk),e(zk,UWe),e(dm,JWe),e(A,YWe),e(A,cm),e(cm,ure),e(ure,KWe),e(cm,ZWe),e(cm,Wk),e(Wk,eQe),e(cm,oQe),e(A,rQe),e(A,fm),e(fm,bre),e(bre,tQe),e(fm,aQe),e(fm,Qk),e(Qk,nQe),e(fm,sQe),e(A,lQe),e(A,mm),e(mm,vre),e(vre,iQe),e(mm,dQe),e(mm,Hk),e(Hk,cQe),e(mm,fQe),e(A,mQe),e(A,gm),e(gm,Fre),e(Fre,gQe),e(gm,hQe),e(gm,Uk),e(Uk,pQe),e(gm,_Qe),e(A,uQe),e(A,hm),e(hm,Tre),e(Tre,bQe),e(hm,vQe),e(hm,Jk),e(Jk,FQe),e(hm,TQe),e(A,MQe),e(A,pm),e(pm,Mre),e(Mre,EQe),e(pm,CQe),e(pm,Yk),e(Yk,wQe),e(pm,AQe),e(A,yQe),e(A,_m),e(_m,Ere),e(Ere,LQe),e(_m,xQe),e(_m,Kk),e(Kk,$Qe),e(_m,kQe),e(A,SQe),e(A,um),e(um,Cre),e(Cre,RQe),e(um,PQe),e(um,Zk),e(Zk,BQe),e(um,IQe),e(A,NQe),e(A,bm),e(bm,wre),e(wre,qQe),e(bm,jQe),e(bm,eS),e(eS,DQe),e(bm,GQe),e(A,OQe),e(A,vm),e(vm,Are),e(Are,VQe),e(vm,XQe),e(vm,oS),e(oS,zQe),e(vm,WQe),e(A,QQe),e(A,Fm),e(Fm,yre),e(yre,HQe),e(Fm,UQe),e(Fm,rS),e(rS,JQe),e(Fm,YQe),e(A,KQe),e(A,Tm),e(Tm,Lre),e(Lre,ZQe),e(Tm,eHe),e(Tm,tS),e(tS,oHe),e(Tm,rHe),e(A,tHe),e(A,Mm),e(Mm,xre),e(xre,aHe),e(Mm,nHe),e(Mm,aS),e(aS,sHe),e(Mm,lHe),e(A,iHe),e(A,Em),e(Em,$re),e($re,dHe),e(Em,cHe),e(Em,nS),e(nS,fHe),e(Em,mHe),e(A,gHe),e(A,Cm),e(Cm,kre),e(kre,hHe),e(Cm,pHe),e(Cm,sS),e(sS,_He),e(Cm,uHe),e(A,bHe),e(A,wm),e(wm,Sre),e(Sre,vHe),e(wm,FHe),e(wm,lS),e(lS,THe),e(wm,MHe),e(A,EHe),e(A,Am),e(Am,Rre),e(Rre,CHe),e(Am,wHe),e(Am,iS),e(iS,AHe),e(Am,yHe),e(A,LHe),e(A,ym),e(ym,Pre),e(Pre,xHe),e(ym,$He),e(ym,dS),e(dS,kHe),e(ym,SHe),e(A,RHe),e(A,Lm),e(Lm,Bre),e(Bre,PHe),e(Lm,BHe),e(Lm,cS),e(cS,IHe),e(Lm,NHe),e(A,qHe),e(A,xm),e(xm,Ire),e(Ire,jHe),e(xm,DHe),e(xm,fS),e(fS,GHe),e(xm,OHe),e(A,VHe),e(A,$m),e($m,Nre),e(Nre,XHe),e($m,zHe),e($m,mS),e(mS,WHe),e($m,QHe),e(A,HHe),e(A,km),e(km,qre),e(qre,UHe),e(km,JHe),e(km,gS),e(gS,YHe),e(km,KHe),e(A,ZHe),e(A,Sm),e(Sm,jre),e(jre,eUe),e(Sm,oUe),e(Sm,hS),e(hS,rUe),e(Sm,tUe),e(A,aUe),e(A,Rm),e(Rm,Dre),e(Dre,nUe),e(Rm,sUe),e(Rm,pS),e(pS,lUe),e(Rm,iUe),e(A,dUe),e(A,Pm),e(Pm,Gre),e(Gre,cUe),e(Pm,fUe),e(Pm,_S),e(_S,mUe),e(Pm,gUe),e(A,hUe),e(A,Bm),e(Bm,Ore),e(Ore,pUe),e(Bm,_Ue),e(Bm,uS),e(uS,uUe),e(Bm,bUe),e(A,vUe),e(A,Im),e(Im,Vre),e(Vre,FUe),e(Im,TUe),e(Im,bS),e(bS,MUe),e(Im,EUe),e(A,CUe),e(A,Nm),e(Nm,Xre),e(Xre,wUe),e(Nm,AUe),e(Nm,vS),e(vS,yUe),e(Nm,LUe),e(A,xUe),e(A,qm),e(qm,zre),e(zre,$Ue),e(qm,kUe),e(qm,FS),e(FS,SUe),e(qm,RUe),e(A,PUe),e(A,jm),e(jm,Wre),e(Wre,BUe),e(jm,IUe),e(jm,TS),e(TS,NUe),e(jm,qUe),e(A,jUe),e(A,Dm),e(Dm,Qre),e(Qre,DUe),e(Dm,GUe),e(Dm,MS),e(MS,OUe),e(Dm,VUe),e(A,XUe),e(A,Gm),e(Gm,Hre),e(Hre,zUe),e(Gm,WUe),e(Gm,ES),e(ES,QUe),e(Gm,HUe),e(A,UUe),e(A,Om),e(Om,Ure),e(Ure,JUe),e(Om,YUe),e(Om,CS),e(CS,KUe),e(Om,ZUe),e(A,eJe),e(A,Vm),e(Vm,Jre),e(Jre,oJe),e(Vm,rJe),e(Vm,wS),e(wS,tJe),e(Vm,aJe),e(A,nJe),e(A,Xm),e(Xm,Yre),e(Yre,sJe),e(Xm,lJe),e(Xm,AS),e(AS,iJe),e(Xm,dJe),e(A,cJe),e(A,zm),e(zm,Kre),e(Kre,fJe),e(zm,mJe),e(zm,yS),e(yS,gJe),e(zm,hJe),e(A,pJe),e(A,Wm),e(Wm,Zre),e(Zre,_Je),e(Wm,uJe),e(Wm,LS),e(LS,bJe),e(Wm,vJe),e(A,FJe),e(A,Qm),e(Qm,ete),e(ete,TJe),e(Qm,MJe),e(Qm,xS),e(xS,EJe),e(Qm,CJe),e(A,wJe),e(A,Hm),e(Hm,ote),e(ote,AJe),e(Hm,yJe),e(Hm,$S),e($S,LJe),e(Hm,xJe),e(A,$Je),e(A,Um),e(Um,rte),e(rte,kJe),e(Um,SJe),e(Um,kS),e(kS,RJe),e(Um,PJe),e(A,BJe),e(A,Jm),e(Jm,tte),e(tte,IJe),e(Jm,NJe),e(Jm,SS),e(SS,qJe),e(Jm,jJe),e(A,DJe),e(A,Ym),e(Ym,ate),e(ate,GJe),e(Ym,OJe),e(Ym,RS),e(RS,VJe),e(Ym,XJe),e(A,zJe),e(A,Km),e(Km,nte),e(nte,WJe),e(Km,QJe),e(Km,PS),e(PS,HJe),e(Km,UJe),e(A,JJe),e(A,Zm),e(Zm,ste),e(ste,YJe),e(Zm,KJe),e(Zm,BS),e(BS,ZJe),e(Zm,eYe),e(A,oYe),e(A,eg),e(eg,lte),e(lte,rYe),e(eg,tYe),e(eg,IS),e(IS,aYe),e(eg,nYe),e(A,sYe),e(A,og),e(og,ite),e(ite,lYe),e(og,iYe),e(og,NS),e(NS,dYe),e(og,cYe),e(A,fYe),e(A,rg),e(rg,dte),e(dte,mYe),e(rg,gYe),e(rg,qS),e(qS,hYe),e(rg,pYe),e(A,_Ye),e(A,tg),e(tg,cte),e(cte,uYe),e(tg,bYe),e(tg,jS),e(jS,vYe),e(tg,FYe),e(A,TYe),e(A,ag),e(ag,fte),e(fte,MYe),e(ag,EYe),e(ag,DS),e(DS,CYe),e(ag,wYe),e(A,AYe),e(A,ng),e(ng,mte),e(mte,yYe),e(ng,LYe),e(ng,GS),e(GS,xYe),e(ng,$Ye),e(A,kYe),e(A,sg),e(sg,gte),e(gte,SYe),e(sg,RYe),e(sg,OS),e(OS,PYe),e(sg,BYe),e(A,IYe),e(A,lg),e(lg,hte),e(hte,NYe),e(lg,qYe),e(lg,VS),e(VS,jYe),e(lg,DYe),e(A,GYe),e(A,ig),e(ig,pte),e(pte,OYe),e(ig,VYe),e(ig,XS),e(XS,XYe),e(ig,zYe),e(A,WYe),e(A,dg),e(dg,_te),e(_te,QYe),e(dg,HYe),e(dg,zS),e(zS,UYe),e(dg,JYe),e(A,YYe),e(A,cg),e(cg,ute),e(ute,KYe),e(cg,ZYe),e(cg,WS),e(WS,eKe),e(cg,oKe),e(A,rKe),e(A,fg),e(fg,bte),e(bte,tKe),e(fg,aKe),e(fg,QS),e(QS,nKe),e(fg,sKe),e(A,lKe),e(A,mg),e(mg,vte),e(vte,iKe),e(mg,dKe),e(mg,HS),e(HS,cKe),e(mg,fKe),e(A,mKe),e(A,gg),e(gg,Fte),e(Fte,gKe),e(gg,hKe),e(gg,US),e(US,pKe),e(gg,_Ke),e(A,uKe),e(A,hg),e(hg,Tte),e(Tte,bKe),e(hg,vKe),e(hg,JS),e(JS,FKe),e(hg,TKe),e(A,MKe),e(A,pg),e(pg,Mte),e(Mte,EKe),e(pg,CKe),e(pg,YS),e(YS,wKe),e(pg,AKe),e(A,yKe),e(A,_g),e(_g,Ete),e(Ete,LKe),e(_g,xKe),e(_g,KS),e(KS,$Ke),e(_g,kKe),e(A,SKe),e(A,ug),e(ug,Cte),e(Cte,RKe),e(ug,PKe),e(ug,ZS),e(ZS,BKe),e(ug,IKe),e(A,NKe),e(A,bg),e(bg,wte),e(wte,qKe),e(bg,jKe),e(bg,eR),e(eR,DKe),e(bg,GKe),e(A,OKe),e(A,vg),e(vg,Ate),e(Ate,VKe),e(vg,XKe),e(vg,oR),e(oR,zKe),e(vg,WKe),e(A,QKe),e(A,Fg),e(Fg,yte),e(yte,HKe),e(Fg,UKe),e(Fg,rR),e(rR,JKe),e(Fg,YKe),e(A,KKe),e(A,Tg),e(Tg,Lte),e(Lte,ZKe),e(Tg,eZe),e(Tg,tR),e(tR,oZe),e(Tg,rZe),e(A,tZe),e(A,Mg),e(Mg,xte),e(xte,aZe),e(Mg,nZe),e(Mg,aR),e(aR,sZe),e(Mg,lZe),e(A,iZe),e(A,Eg),e(Eg,$te),e($te,dZe),e(Eg,cZe),e(Eg,nR),e(nR,fZe),e(Eg,mZe),e(A,gZe),e(A,Cg),e(Cg,kte),e(kte,hZe),e(Cg,pZe),e(Cg,sR),e(sR,_Ze),e(Cg,uZe),e(Er,bZe),M(wg,Er,null),e(Co,vZe),e(Co,Ag),M(DA,Ag,null),e(Ag,FZe),e(Ag,Ste),e(Ste,TZe),b(f,$qe,u),b(f,Mi,u),e(Mi,yg),e(yg,Rte),M(GA,Rte,null),e(Mi,MZe),e(Mi,Pte),e(Pte,EZe),b(f,kqe,u),b(f,wo,u),M(OA,wo,null),e(wo,CZe),e(wo,VA),e(VA,wZe),e(VA,lR),e(lR,AZe),e(VA,yZe),e(wo,LZe),e(wo,XA),e(XA,xZe),e(XA,Bte),e(Bte,$Ze),e(XA,kZe),e(wo,SZe),e(wo,Cr),M(zA,Cr,null),e(Cr,RZe),e(Cr,Ite),e(Ite,PZe),e(Cr,BZe),e(Cr,Aa),e(Aa,IZe),e(Aa,Nte),e(Nte,NZe),e(Aa,qZe),e(Aa,qte),e(qte,jZe),e(Aa,DZe),e(Aa,jte),e(jte,GZe),e(Aa,OZe),e(Cr,VZe),e(Cr,k),e(k,Sn),e(Sn,Dte),e(Dte,XZe),e(Sn,zZe),e(Sn,iR),e(iR,WZe),e(Sn,QZe),e(Sn,dR),e(dR,HZe),e(Sn,UZe),e(k,JZe),e(k,Rn),e(Rn,Gte),e(Gte,YZe),e(Rn,KZe),e(Rn,cR),e(cR,ZZe),e(Rn,eeo),e(Rn,fR),e(fR,oeo),e(Rn,reo),e(k,teo),e(k,Pn),e(Pn,Ote),e(Ote,aeo),e(Pn,neo),e(Pn,mR),e(mR,seo),e(Pn,leo),e(Pn,gR),e(gR,ieo),e(Pn,deo),e(k,ceo),e(k,Lg),e(Lg,Vte),e(Vte,feo),e(Lg,meo),e(Lg,hR),e(hR,geo),e(Lg,heo),e(k,peo),e(k,Bn),e(Bn,Xte),e(Xte,_eo),e(Bn,ueo),e(Bn,pR),e(pR,beo),e(Bn,veo),e(Bn,_R),e(_R,Feo),e(Bn,Teo),e(k,Meo),e(k,xg),e(xg,zte),e(zte,Eeo),e(xg,Ceo),e(xg,uR),e(uR,weo),e(xg,Aeo),e(k,yeo),e(k,$g),e($g,Wte),e(Wte,Leo),e($g,xeo),e($g,bR),e(bR,$eo),e($g,keo),e(k,Seo),e(k,kg),e(kg,Qte),e(Qte,Reo),e(kg,Peo),e(kg,vR),e(vR,Beo),e(kg,Ieo),e(k,Neo),e(k,In),e(In,Hte),e(Hte,qeo),e(In,jeo),e(In,FR),e(FR,Deo),e(In,Geo),e(In,TR),e(TR,Oeo),e(In,Veo),e(k,Xeo),e(k,Nn),e(Nn,Ute),e(Ute,zeo),e(Nn,Weo),e(Nn,MR),e(MR,Qeo),e(Nn,Heo),e(Nn,ER),e(ER,Ueo),e(Nn,Jeo),e(k,Yeo),e(k,qn),e(qn,Jte),e(Jte,Keo),e(qn,Zeo),e(qn,CR),e(CR,eoo),e(qn,ooo),e(qn,wR),e(wR,roo),e(qn,too),e(k,aoo),e(k,Sg),e(Sg,Yte),e(Yte,noo),e(Sg,soo),e(Sg,AR),e(AR,loo),e(Sg,ioo),e(k,doo),e(k,Rg),e(Rg,Kte),e(Kte,coo),e(Rg,foo),e(Rg,yR),e(yR,moo),e(Rg,goo),e(k,hoo),e(k,jn),e(jn,Zte),e(Zte,poo),e(jn,_oo),e(jn,LR),e(LR,uoo),e(jn,boo),e(jn,xR),e(xR,voo),e(jn,Foo),e(k,Too),e(k,Pg),e(Pg,eae),e(eae,Moo),e(Pg,Eoo),e(Pg,$R),e($R,Coo),e(Pg,woo),e(k,Aoo),e(k,Dn),e(Dn,oae),e(oae,yoo),e(Dn,Loo),e(Dn,kR),e(kR,xoo),e(Dn,$oo),e(Dn,SR),e(SR,koo),e(Dn,Soo),e(k,Roo),e(k,Gn),e(Gn,rae),e(rae,Poo),e(Gn,Boo),e(Gn,RR),e(RR,Ioo),e(Gn,Noo),e(Gn,PR),e(PR,qoo),e(Gn,joo),e(k,Doo),e(k,On),e(On,tae),e(tae,Goo),e(On,Ooo),e(On,BR),e(BR,Voo),e(On,Xoo),e(On,IR),e(IR,zoo),e(On,Woo),e(k,Qoo),e(k,Bg),e(Bg,aae),e(aae,Hoo),e(Bg,Uoo),e(Bg,NR),e(NR,Joo),e(Bg,Yoo),e(k,Koo),e(k,Vn),e(Vn,nae),e(nae,Zoo),e(Vn,ero),e(Vn,qR),e(qR,oro),e(Vn,rro),e(Vn,jR),e(jR,tro),e(Vn,aro),e(k,nro),e(k,Xn),e(Xn,sae),e(sae,sro),e(Xn,lro),e(Xn,DR),e(DR,iro),e(Xn,dro),e(Xn,GR),e(GR,cro),e(Xn,fro),e(k,mro),e(k,zn),e(zn,lae),e(lae,gro),e(zn,hro),e(zn,OR),e(OR,pro),e(zn,_ro),e(zn,VR),e(VR,uro),e(zn,bro),e(k,vro),e(k,Wn),e(Wn,iae),e(iae,Fro),e(Wn,Tro),e(Wn,XR),e(XR,Mro),e(Wn,Ero),e(Wn,zR),e(zR,Cro),e(Wn,wro),e(k,Aro),e(k,Qn),e(Qn,dae),e(dae,yro),e(Qn,Lro),e(Qn,WR),e(WR,xro),e(Qn,$ro),e(Qn,QR),e(QR,kro),e(Qn,Sro),e(k,Rro),e(k,Hn),e(Hn,cae),e(cae,Pro),e(Hn,Bro),e(Hn,HR),e(HR,Iro),e(Hn,Nro),e(Hn,UR),e(UR,qro),e(Hn,jro),e(k,Dro),e(k,Ig),e(Ig,fae),e(fae,Gro),e(Ig,Oro),e(Ig,JR),e(JR,Vro),e(Ig,Xro),e(k,zro),e(k,Un),e(Un,mae),e(mae,Wro),e(Un,Qro),e(Un,YR),e(YR,Hro),e(Un,Uro),e(Un,KR),e(KR,Jro),e(Un,Yro),e(k,Kro),e(k,Ng),e(Ng,gae),e(gae,Zro),e(Ng,eto),e(Ng,ZR),e(ZR,oto),e(Ng,rto),e(k,tto),e(k,Jn),e(Jn,hae),e(hae,ato),e(Jn,nto),e(Jn,eP),e(eP,sto),e(Jn,lto),e(Jn,oP),e(oP,ito),e(Jn,dto),e(k,cto),e(k,Yn),e(Yn,pae),e(pae,fto),e(Yn,mto),e(Yn,rP),e(rP,gto),e(Yn,hto),e(Yn,tP),e(tP,pto),e(Yn,_to),e(k,uto),e(k,Kn),e(Kn,_ae),e(_ae,bto),e(Kn,vto),e(Kn,aP),e(aP,Fto),e(Kn,Tto),e(Kn,nP),e(nP,Mto),e(Kn,Eto),e(k,Cto),e(k,qg),e(qg,uae),e(uae,wto),e(qg,Ato),e(qg,sP),e(sP,yto),e(qg,Lto),e(k,xto),e(k,Zn),e(Zn,bae),e(bae,$to),e(Zn,kto),e(Zn,lP),e(lP,Sto),e(Zn,Rto),e(Zn,iP),e(iP,Pto),e(Zn,Bto),e(k,Ito),e(k,es),e(es,vae),e(vae,Nto),e(es,qto),e(es,dP),e(dP,jto),e(es,Dto),e(es,cP),e(cP,Gto),e(es,Oto),e(k,Vto),e(k,os),e(os,Fae),e(Fae,Xto),e(os,zto),e(os,fP),e(fP,Wto),e(os,Qto),e(os,mP),e(mP,Hto),e(os,Uto),e(k,Jto),e(k,jg),e(jg,Tae),e(Tae,Yto),e(jg,Kto),e(jg,gP),e(gP,Zto),e(jg,eao),e(k,oao),e(k,rs),e(rs,Mae),e(Mae,rao),e(rs,tao),e(rs,hP),e(hP,aao),e(rs,nao),e(rs,pP),e(pP,sao),e(rs,lao),e(k,iao),e(k,ts),e(ts,Eae),e(Eae,dao),e(ts,cao),e(ts,_P),e(_P,fao),e(ts,mao),e(ts,uP),e(uP,gao),e(ts,hao),e(k,pao),e(k,as),e(as,Cae),e(Cae,_ao),e(as,uao),e(as,bP),e(bP,bao),e(as,vao),e(as,vP),e(vP,Fao),e(as,Tao),e(k,Mao),e(k,ns),e(ns,wae),e(wae,Eao),e(ns,Cao),e(ns,FP),e(FP,wao),e(ns,Aao),e(ns,TP),e(TP,yao),e(ns,Lao),e(k,xao),e(k,ss),e(ss,Aae),e(Aae,$ao),e(ss,kao),e(ss,MP),e(MP,Sao),e(ss,Rao),e(ss,EP),e(EP,Pao),e(ss,Bao),e(k,Iao),e(k,ls),e(ls,yae),e(yae,Nao),e(ls,qao),e(ls,CP),e(CP,jao),e(ls,Dao),e(ls,wP),e(wP,Gao),e(ls,Oao),e(k,Vao),e(k,is),e(is,Lae),e(Lae,Xao),e(is,zao),e(is,AP),e(AP,Wao),e(is,Qao),e(is,yP),e(yP,Hao),e(is,Uao),e(k,Jao),e(k,Dg),e(Dg,xae),e(xae,Yao),e(Dg,Kao),e(Dg,LP),e(LP,Zao),e(Dg,eno),e(k,ono),e(k,ds),e(ds,$ae),e($ae,rno),e(ds,tno),e(ds,xP),e(xP,ano),e(ds,nno),e(ds,$P),e($P,sno),e(ds,lno),e(k,ino),e(k,Gg),e(Gg,kae),e(kae,dno),e(Gg,cno),e(Gg,kP),e(kP,fno),e(Gg,mno),e(k,gno),e(k,Og),e(Og,Sae),e(Sae,hno),e(Og,pno),e(Og,SP),e(SP,_no),e(Og,uno),e(k,bno),e(k,cs),e(cs,Rae),e(Rae,vno),e(cs,Fno),e(cs,RP),e(RP,Tno),e(cs,Mno),e(cs,PP),e(PP,Eno),e(cs,Cno),e(k,wno),e(k,fs),e(fs,Pae),e(Pae,Ano),e(fs,yno),e(fs,BP),e(BP,Lno),e(fs,xno),e(fs,IP),e(IP,$no),e(fs,kno),e(k,Sno),e(k,ms),e(ms,Bae),e(Bae,Rno),e(ms,Pno),e(ms,NP),e(NP,Bno),e(ms,Ino),e(ms,qP),e(qP,Nno),e(ms,qno),e(k,jno),e(k,Vg),e(Vg,Iae),e(Iae,Dno),e(Vg,Gno),e(Vg,jP),e(jP,Ono),e(Vg,Vno),e(k,Xno),e(k,gs),e(gs,Nae),e(Nae,zno),e(gs,Wno),e(gs,DP),e(DP,Qno),e(gs,Hno),e(gs,GP),e(GP,Uno),e(gs,Jno),e(k,Yno),e(k,hs),e(hs,qae),e(qae,Kno),e(hs,Zno),e(hs,OP),e(OP,eso),e(hs,oso),e(hs,VP),e(VP,rso),e(hs,tso),e(k,aso),e(k,ps),e(ps,jae),e(jae,nso),e(ps,sso),e(ps,XP),e(XP,lso),e(ps,iso),e(ps,zP),e(zP,dso),e(ps,cso),e(k,fso),e(k,_s),e(_s,Dae),e(Dae,mso),e(_s,gso),e(_s,WP),e(WP,hso),e(_s,pso),e(_s,QP),e(QP,_so),e(_s,uso),e(k,bso),e(k,us),e(us,Gae),e(Gae,vso),e(us,Fso),e(us,HP),e(HP,Tso),e(us,Mso),e(us,UP),e(UP,Eso),e(us,Cso),e(k,wso),e(k,Xg),e(Xg,Oae),e(Oae,Aso),e(Xg,yso),e(Xg,JP),e(JP,Lso),e(Xg,xso),e(k,$so),e(k,bs),e(bs,Vae),e(Vae,kso),e(bs,Sso),e(bs,YP),e(YP,Rso),e(bs,Pso),e(bs,KP),e(KP,Bso),e(bs,Iso),e(k,Nso),e(k,zg),e(zg,Xae),e(Xae,qso),e(zg,jso),e(zg,ZP),e(ZP,Dso),e(zg,Gso),e(k,Oso),e(k,Wg),e(Wg,zae),e(zae,Vso),e(Wg,Xso),e(Wg,eB),e(eB,zso),e(Wg,Wso),e(k,Qso),e(k,Qg),e(Qg,Wae),e(Wae,Hso),e(Qg,Uso),e(Qg,oB),e(oB,Jso),e(Qg,Yso),e(k,Kso),e(k,Hg),e(Hg,Qae),e(Qae,Zso),e(Hg,elo),e(Hg,rB),e(rB,olo),e(Hg,rlo),e(k,tlo),e(k,vs),e(vs,Hae),e(Hae,alo),e(vs,nlo),e(vs,tB),e(tB,slo),e(vs,llo),e(vs,aB),e(aB,ilo),e(vs,dlo),e(k,clo),e(k,Ug),e(Ug,Uae),e(Uae,flo),e(Ug,mlo),e(Ug,nB),e(nB,glo),e(Ug,hlo),e(k,plo),e(k,Fs),e(Fs,Jae),e(Jae,_lo),e(Fs,ulo),e(Fs,sB),e(sB,blo),e(Fs,vlo),e(Fs,lB),e(lB,Flo),e(Fs,Tlo),e(k,Mlo),e(k,Ts),e(Ts,Yae),e(Yae,Elo),e(Ts,Clo),e(Ts,iB),e(iB,wlo),e(Ts,Alo),e(Ts,dB),e(dB,ylo),e(Ts,Llo),e(k,xlo),e(k,Ms),e(Ms,Kae),e(Kae,$lo),e(Ms,klo),e(Ms,cB),e(cB,Slo),e(Ms,Rlo),e(Ms,fB),e(fB,Plo),e(Ms,Blo),e(k,Ilo),e(k,Es),e(Es,Zae),e(Zae,Nlo),e(Es,qlo),e(Es,mB),e(mB,jlo),e(Es,Dlo),e(Es,gB),e(gB,Glo),e(Es,Olo),e(k,Vlo),e(k,Cs),e(Cs,ene),e(ene,Xlo),e(Cs,zlo),e(Cs,hB),e(hB,Wlo),e(Cs,Qlo),e(Cs,pB),e(pB,Hlo),e(Cs,Ulo),e(k,Jlo),e(k,ws),e(ws,one),e(one,Ylo),e(ws,Klo),e(ws,_B),e(_B,Zlo),e(ws,eio),e(ws,uB),e(uB,oio),e(ws,rio),e(k,tio),e(k,Jg),e(Jg,rne),e(rne,aio),e(Jg,nio),e(Jg,bB),e(bB,sio),e(Jg,lio),e(k,iio),e(k,Yg),e(Yg,tne),e(tne,dio),e(Yg,cio),e(Yg,vB),e(vB,fio),e(Yg,mio),e(k,gio),e(k,As),e(As,ane),e(ane,hio),e(As,pio),e(As,FB),e(FB,_io),e(As,uio),e(As,TB),e(TB,bio),e(As,vio),e(k,Fio),e(k,ys),e(ys,nne),e(nne,Tio),e(ys,Mio),e(ys,MB),e(MB,Eio),e(ys,Cio),e(ys,EB),e(EB,wio),e(ys,Aio),e(k,yio),e(k,Ls),e(Ls,sne),e(sne,Lio),e(Ls,xio),e(Ls,CB),e(CB,$io),e(Ls,kio),e(Ls,wB),e(wB,Sio),e(Ls,Rio),e(k,Pio),e(k,Kg),e(Kg,lne),e(lne,Bio),e(Kg,Iio),e(Kg,AB),e(AB,Nio),e(Kg,qio),e(k,jio),e(k,Zg),e(Zg,ine),e(ine,Dio),e(Zg,Gio),e(Zg,yB),e(yB,Oio),e(Zg,Vio),e(k,Xio),e(k,eh),e(eh,dne),e(dne,zio),e(eh,Wio),e(eh,LB),e(LB,Qio),e(eh,Hio),e(k,Uio),e(k,xs),e(xs,cne),e(cne,Jio),e(xs,Yio),e(xs,xB),e(xB,Kio),e(xs,Zio),e(xs,$B),e($B,edo),e(xs,odo),e(k,rdo),e(k,oh),e(oh,fne),e(fne,tdo),e(oh,ado),e(oh,kB),e(kB,ndo),e(oh,sdo),e(k,ldo),e(k,rh),e(rh,mne),e(mne,ido),e(rh,ddo),e(rh,SB),e(SB,cdo),e(rh,fdo),e(k,mdo),e(k,th),e(th,gne),e(gne,gdo),e(th,hdo),e(th,RB),e(RB,pdo),e(th,_do),e(k,udo),e(k,$s),e($s,hne),e(hne,bdo),e($s,vdo),e($s,PB),e(PB,Fdo),e($s,Tdo),e($s,BB),e(BB,Mdo),e($s,Edo),e(k,Cdo),e(k,ah),e(ah,pne),e(pne,wdo),e(ah,Ado),e(ah,IB),e(IB,ydo),e(ah,Ldo),e(k,xdo),e(k,nh),e(nh,_ne),e(_ne,$do),e(nh,kdo),e(nh,NB),e(NB,Sdo),e(nh,Rdo),e(k,Pdo),e(k,ks),e(ks,une),e(une,Bdo),e(ks,Ido),e(ks,qB),e(qB,Ndo),e(ks,qdo),e(ks,jB),e(jB,jdo),e(ks,Ddo),e(k,Gdo),e(k,Ss),e(Ss,bne),e(bne,Odo),e(Ss,Vdo),e(Ss,DB),e(DB,Xdo),e(Ss,zdo),e(Ss,GB),e(GB,Wdo),e(Ss,Qdo),e(k,Hdo),e(k,Rs),e(Rs,vne),e(vne,Udo),e(Rs,Jdo),e(Rs,OB),e(OB,Ydo),e(Rs,Kdo),e(Rs,VB),e(VB,Zdo),e(Rs,eco),e(k,oco),e(k,Ps),e(Ps,Fne),e(Fne,rco),e(Ps,tco),e(Ps,XB),e(XB,aco),e(Ps,nco),e(Ps,zB),e(zB,sco),e(Ps,lco),e(Cr,ico),M(sh,Cr,null),e(wo,dco),e(wo,lh),M(WA,lh,null),e(lh,cco),e(lh,Tne),e(Tne,fco),b(f,Sqe,u),b(f,Ei,u),e(Ei,ih),e(ih,Mne),M(QA,Mne,null),e(Ei,mco),e(Ei,Ene),e(Ene,gco),b(f,Rqe,u),b(f,Ao,u),M(HA,Ao,null),e(Ao,hco),e(Ao,UA),e(UA,pco),e(UA,WB),e(WB,_co),e(UA,uco),e(Ao,bco),e(Ao,JA),e(JA,vco),e(JA,Cne),e(Cne,Fco),e(JA,Tco),e(Ao,Mco),e(Ao,He),M(YA,He,null),e(He,Eco),e(He,wne),e(wne,Cco),e(He,wco),e(He,ya),e(ya,Aco),e(ya,Ane),e(Ane,yco),e(ya,Lco),e(ya,yne),e(yne,xco),e(ya,$co),e(ya,Lne),e(Lne,kco),e(ya,Sco),e(He,Rco),e(He,Y),e(Y,dh),e(dh,xne),e(xne,Pco),e(dh,Bco),e(dh,QB),e(QB,Ico),e(dh,Nco),e(Y,qco),e(Y,ch),e(ch,$ne),e($ne,jco),e(ch,Dco),e(ch,HB),e(HB,Gco),e(ch,Oco),e(Y,Vco),e(Y,fh),e(fh,kne),e(kne,Xco),e(fh,zco),e(fh,UB),e(UB,Wco),e(fh,Qco),e(Y,Hco),e(Y,mh),e(mh,Sne),e(Sne,Uco),e(mh,Jco),e(mh,JB),e(JB,Yco),e(mh,Kco),e(Y,Zco),e(Y,gh),e(gh,Rne),e(Rne,efo),e(gh,ofo),e(gh,YB),e(YB,rfo),e(gh,tfo),e(Y,afo),e(Y,hh),e(hh,Pne),e(Pne,nfo),e(hh,sfo),e(hh,KB),e(KB,lfo),e(hh,ifo),e(Y,dfo),e(Y,ph),e(ph,Bne),e(Bne,cfo),e(ph,ffo),e(ph,ZB),e(ZB,mfo),e(ph,gfo),e(Y,hfo),e(Y,_h),e(_h,Ine),e(Ine,pfo),e(_h,_fo),e(_h,eI),e(eI,ufo),e(_h,bfo),e(Y,vfo),e(Y,uh),e(uh,Nne),e(Nne,Ffo),e(uh,Tfo),e(uh,oI),e(oI,Mfo),e(uh,Efo),e(Y,Cfo),e(Y,bh),e(bh,qne),e(qne,wfo),e(bh,Afo),e(bh,rI),e(rI,yfo),e(bh,Lfo),e(Y,xfo),e(Y,vh),e(vh,jne),e(jne,$fo),e(vh,kfo),e(vh,tI),e(tI,Sfo),e(vh,Rfo),e(Y,Pfo),e(Y,Fh),e(Fh,Dne),e(Dne,Bfo),e(Fh,Ifo),e(Fh,aI),e(aI,Nfo),e(Fh,qfo),e(Y,jfo),e(Y,Th),e(Th,Gne),e(Gne,Dfo),e(Th,Gfo),e(Th,nI),e(nI,Ofo),e(Th,Vfo),e(Y,Xfo),e(Y,Mh),e(Mh,One),e(One,zfo),e(Mh,Wfo),e(Mh,sI),e(sI,Qfo),e(Mh,Hfo),e(Y,Ufo),e(Y,Eh),e(Eh,Vne),e(Vne,Jfo),e(Eh,Yfo),e(Eh,lI),e(lI,Kfo),e(Eh,Zfo),e(Y,emo),e(Y,Ch),e(Ch,Xne),e(Xne,omo),e(Ch,rmo),e(Ch,iI),e(iI,tmo),e(Ch,amo),e(Y,nmo),e(Y,wh),e(wh,zne),e(zne,smo),e(wh,lmo),e(wh,dI),e(dI,imo),e(wh,dmo),e(Y,cmo),e(Y,Ah),e(Ah,Wne),e(Wne,fmo),e(Ah,mmo),e(Ah,cI),e(cI,gmo),e(Ah,hmo),e(Y,pmo),e(Y,yh),e(yh,Qne),e(Qne,_mo),e(yh,umo),e(yh,fI),e(fI,bmo),e(yh,vmo),e(Y,Fmo),e(Y,Lh),e(Lh,Hne),e(Hne,Tmo),e(Lh,Mmo),e(Lh,mI),e(mI,Emo),e(Lh,Cmo),e(Y,wmo),e(Y,xh),e(xh,Une),e(Une,Amo),e(xh,ymo),e(xh,gI),e(gI,Lmo),e(xh,xmo),e(Y,$mo),e(Y,$h),e($h,Jne),e(Jne,kmo),e($h,Smo),e($h,hI),e(hI,Rmo),e($h,Pmo),e(Y,Bmo),e(Y,kh),e(kh,Yne),e(Yne,Imo),e(kh,Nmo),e(kh,pI),e(pI,qmo),e(kh,jmo),e(Y,Dmo),e(Y,Sh),e(Sh,Kne),e(Kne,Gmo),e(Sh,Omo),e(Sh,_I),e(_I,Vmo),e(Sh,Xmo),e(Y,zmo),e(Y,Rh),e(Rh,Zne),e(Zne,Wmo),e(Rh,Qmo),e(Rh,uI),e(uI,Hmo),e(Rh,Umo),e(Y,Jmo),e(Y,Ph),e(Ph,ese),e(ese,Ymo),e(Ph,Kmo),e(Ph,bI),e(bI,Zmo),e(Ph,ego),e(Y,ogo),e(Y,Bh),e(Bh,ose),e(ose,rgo),e(Bh,tgo),e(Bh,vI),e(vI,ago),e(Bh,ngo),e(Y,sgo),e(Y,Ih),e(Ih,rse),e(rse,lgo),e(Ih,igo),e(Ih,FI),e(FI,dgo),e(Ih,cgo),e(Y,fgo),e(Y,Nh),e(Nh,tse),e(tse,mgo),e(Nh,ggo),e(Nh,TI),e(TI,hgo),e(Nh,pgo),e(Y,_go),e(Y,qh),e(qh,ase),e(ase,ugo),e(qh,bgo),e(qh,MI),e(MI,vgo),e(qh,Fgo),e(He,Tgo),M(jh,He,null),e(He,Mgo),M(Dh,He,null),e(Ao,Ego),e(Ao,Gh),M(KA,Gh,null),e(Gh,Cgo),e(Gh,nse),e(nse,wgo),b(f,Pqe,u),b(f,Ci,u),e(Ci,Oh),e(Oh,sse),M(ZA,sse,null),e(Ci,Ago),e(Ci,lse),e(lse,ygo),b(f,Bqe,u),b(f,yo,u),M(ey,yo,null),e(yo,Lgo),e(yo,oy),e(oy,xgo),e(oy,EI),e(EI,$go),e(oy,kgo),e(yo,Sgo),e(yo,ry),e(ry,Rgo),e(ry,ise),e(ise,Pgo),e(ry,Bgo),e(yo,Igo),e(yo,Ue),M(ty,Ue,null),e(Ue,Ngo),e(Ue,dse),e(dse,qgo),e(Ue,jgo),e(Ue,wi),e(wi,Dgo),e(wi,cse),e(cse,Ggo),e(wi,Ogo),e(wi,fse),e(fse,Vgo),e(wi,Xgo),e(Ue,zgo),e(Ue,he),e(he,Vh),e(Vh,mse),e(mse,Wgo),e(Vh,Qgo),e(Vh,CI),e(CI,Hgo),e(Vh,Ugo),e(he,Jgo),e(he,Xh),e(Xh,gse),e(gse,Ygo),e(Xh,Kgo),e(Xh,hse),e(hse,Zgo),e(Xh,eho),e(he,oho),e(he,zh),e(zh,pse),e(pse,rho),e(zh,tho),e(zh,wI),e(wI,aho),e(zh,nho),e(he,sho),e(he,Wh),e(Wh,_se),e(_se,lho),e(Wh,iho),e(Wh,AI),e(AI,dho),e(Wh,cho),e(he,fho),e(he,Qh),e(Qh,use),e(use,mho),e(Qh,gho),e(Qh,yI),e(yI,hho),e(Qh,pho),e(he,_ho),e(he,Hh),e(Hh,bse),e(bse,uho),e(Hh,bho),e(Hh,LI),e(LI,vho),e(Hh,Fho),e(he,Tho),e(he,Uh),e(Uh,vse),e(vse,Mho),e(Uh,Eho),e(Uh,xI),e(xI,Cho),e(Uh,who),e(he,Aho),e(he,Jh),e(Jh,Fse),e(Fse,yho),e(Jh,Lho),e(Jh,$I),e($I,xho),e(Jh,$ho),e(he,kho),e(he,Yh),e(Yh,Tse),e(Tse,Sho),e(Yh,Rho),e(Yh,kI),e(kI,Pho),e(Yh,Bho),e(he,Iho),e(he,Kh),e(Kh,Mse),e(Mse,Nho),e(Kh,qho),e(Kh,SI),e(SI,jho),e(Kh,Dho),e(he,Gho),e(he,Zh),e(Zh,Ese),e(Ese,Oho),e(Zh,Vho),e(Zh,RI),e(RI,Xho),e(Zh,zho),e(he,Who),e(he,ep),e(ep,Cse),e(Cse,Qho),e(ep,Hho),e(ep,PI),e(PI,Uho),e(ep,Jho),e(he,Yho),e(he,op),e(op,wse),e(wse,Kho),e(op,Zho),e(op,BI),e(BI,epo),e(op,opo),e(he,rpo),e(he,rp),e(rp,Ase),e(Ase,tpo),e(rp,apo),e(rp,II),e(II,npo),e(rp,spo),e(he,lpo),e(he,tp),e(tp,yse),e(yse,ipo),e(tp,dpo),e(tp,NI),e(NI,cpo),e(tp,fpo),e(he,mpo),e(he,ap),e(ap,Lse),e(Lse,gpo),e(ap,hpo),e(ap,qI),e(qI,ppo),e(ap,_po),e(he,upo),e(he,np),e(np,xse),e(xse,bpo),e(np,vpo),e(np,jI),e(jI,Fpo),e(np,Tpo),e(he,Mpo),e(he,sp),e(sp,$se),e($se,Epo),e(sp,Cpo),e(sp,DI),e(DI,wpo),e(sp,Apo),e(Ue,ypo),M(lp,Ue,null),e(Ue,Lpo),M(ip,Ue,null),e(yo,xpo),e(yo,dp),M(ay,dp,null),e(dp,$po),e(dp,kse),e(kse,kpo),b(f,Iqe,u),b(f,Ai,u),e(Ai,cp),e(cp,Sse),M(ny,Sse,null),e(Ai,Spo),e(Ai,Rse),e(Rse,Rpo),b(f,Nqe,u),b(f,Lo,u),M(sy,Lo,null),e(Lo,Ppo),e(Lo,yi),e(yi,Bpo),e(yi,GI),e(GI,Ipo),e(yi,Npo),e(yi,OI),e(OI,qpo),e(yi,jpo),e(Lo,Dpo),e(Lo,ly),e(ly,Gpo),e(ly,Pse),e(Pse,Opo),e(ly,Vpo),e(Lo,Xpo),e(Lo,tt),M(iy,tt,null),e(tt,zpo),e(tt,Bse),e(Bse,Wpo),e(tt,Qpo),e(tt,Li),e(Li,Hpo),e(Li,Ise),e(Ise,Upo),e(Li,Jpo),e(Li,VI),e(VI,Ypo),e(Li,Kpo),e(tt,Zpo),M(fp,tt,null),e(Lo,e_o),e(Lo,Je),M(dy,Je,null),e(Je,o_o),e(Je,Nse),e(Nse,r_o),e(Je,t_o),e(Je,La),e(La,a_o),e(La,qse),e(qse,n_o),e(La,s_o),e(La,jse),e(jse,l_o),e(La,i_o),e(La,Dse),e(Dse,d_o),e(La,c_o),e(Je,f_o),e(Je,x),e(x,mp),e(mp,Gse),e(Gse,m_o),e(mp,g_o),e(mp,XI),e(XI,h_o),e(mp,p_o),e(x,__o),e(x,gp),e(gp,Ose),e(Ose,u_o),e(gp,b_o),e(gp,zI),e(zI,v_o),e(gp,F_o),e(x,T_o),e(x,hp),e(hp,Vse),e(Vse,M_o),e(hp,E_o),e(hp,WI),e(WI,C_o),e(hp,w_o),e(x,A_o),e(x,pp),e(pp,Xse),e(Xse,y_o),e(pp,L_o),e(pp,QI),e(QI,x_o),e(pp,$_o),e(x,k_o),e(x,_p),e(_p,zse),e(zse,S_o),e(_p,R_o),e(_p,HI),e(HI,P_o),e(_p,B_o),e(x,I_o),e(x,up),e(up,Wse),e(Wse,N_o),e(up,q_o),e(up,UI),e(UI,j_o),e(up,D_o),e(x,G_o),e(x,bp),e(bp,Qse),e(Qse,O_o),e(bp,V_o),e(bp,JI),e(JI,X_o),e(bp,z_o),e(x,W_o),e(x,vp),e(vp,Hse),e(Hse,Q_o),e(vp,H_o),e(vp,YI),e(YI,U_o),e(vp,J_o),e(x,Y_o),e(x,Fp),e(Fp,Use),e(Use,K_o),e(Fp,Z_o),e(Fp,KI),e(KI,euo),e(Fp,ouo),e(x,ruo),e(x,Tp),e(Tp,Jse),e(Jse,tuo),e(Tp,auo),e(Tp,ZI),e(ZI,nuo),e(Tp,suo),e(x,luo),e(x,Mp),e(Mp,Yse),e(Yse,iuo),e(Mp,duo),e(Mp,eN),e(eN,cuo),e(Mp,fuo),e(x,muo),e(x,Ep),e(Ep,Kse),e(Kse,guo),e(Ep,huo),e(Ep,oN),e(oN,puo),e(Ep,_uo),e(x,uuo),e(x,Cp),e(Cp,Zse),e(Zse,buo),e(Cp,vuo),e(Cp,rN),e(rN,Fuo),e(Cp,Tuo),e(x,Muo),e(x,wp),e(wp,ele),e(ele,Euo),e(wp,Cuo),e(wp,tN),e(tN,wuo),e(wp,Auo),e(x,yuo),e(x,Ap),e(Ap,ole),e(ole,Luo),e(Ap,xuo),e(Ap,aN),e(aN,$uo),e(Ap,kuo),e(x,Suo),e(x,yp),e(yp,rle),e(rle,Ruo),e(yp,Puo),e(yp,nN),e(nN,Buo),e(yp,Iuo),e(x,Nuo),e(x,Lp),e(Lp,tle),e(tle,quo),e(Lp,juo),e(Lp,sN),e(sN,Duo),e(Lp,Guo),e(x,Ouo),e(x,xp),e(xp,ale),e(ale,Vuo),e(xp,Xuo),e(xp,lN),e(lN,zuo),e(xp,Wuo),e(x,Quo),e(x,$p),e($p,nle),e(nle,Huo),e($p,Uuo),e($p,iN),e(iN,Juo),e($p,Yuo),e(x,Kuo),e(x,kp),e(kp,sle),e(sle,Zuo),e(kp,e1o),e(kp,dN),e(dN,o1o),e(kp,r1o),e(x,t1o),e(x,Sp),e(Sp,lle),e(lle,a1o),e(Sp,n1o),e(Sp,cN),e(cN,s1o),e(Sp,l1o),e(x,i1o),e(x,Rp),e(Rp,ile),e(ile,d1o),e(Rp,c1o),e(Rp,fN),e(fN,f1o),e(Rp,m1o),e(x,g1o),e(x,Pp),e(Pp,dle),e(dle,h1o),e(Pp,p1o),e(Pp,mN),e(mN,_1o),e(Pp,u1o),e(x,b1o),e(x,Bp),e(Bp,cle),e(cle,v1o),e(Bp,F1o),e(Bp,gN),e(gN,T1o),e(Bp,M1o),e(x,E1o),e(x,Ip),e(Ip,fle),e(fle,C1o),e(Ip,w1o),e(Ip,hN),e(hN,A1o),e(Ip,y1o),e(x,L1o),e(x,Np),e(Np,mle),e(mle,x1o),e(Np,$1o),e(Np,pN),e(pN,k1o),e(Np,S1o),e(x,R1o),e(x,qp),e(qp,gle),e(gle,P1o),e(qp,B1o),e(qp,_N),e(_N,I1o),e(qp,N1o),e(x,q1o),e(x,jp),e(jp,hle),e(hle,j1o),e(jp,D1o),e(jp,uN),e(uN,G1o),e(jp,O1o),e(x,V1o),e(x,Dp),e(Dp,ple),e(ple,X1o),e(Dp,z1o),e(Dp,bN),e(bN,W1o),e(Dp,Q1o),e(x,H1o),e(x,Gp),e(Gp,_le),e(_le,U1o),e(Gp,J1o),e(Gp,vN),e(vN,Y1o),e(Gp,K1o),e(x,Z1o),e(x,Op),e(Op,ule),e(ule,ebo),e(Op,obo),e(Op,FN),e(FN,rbo),e(Op,tbo),e(x,abo),e(x,Vp),e(Vp,ble),e(ble,nbo),e(Vp,sbo),e(Vp,TN),e(TN,lbo),e(Vp,ibo),e(x,dbo),e(x,Bs),e(Bs,vle),e(vle,cbo),e(Bs,fbo),e(Bs,MN),e(MN,mbo),e(Bs,gbo),e(Bs,EN),e(EN,hbo),e(Bs,pbo),e(x,_bo),e(x,Xp),e(Xp,Fle),e(Fle,ubo),e(Xp,bbo),e(Xp,CN),e(CN,vbo),e(Xp,Fbo),e(x,Tbo),e(x,zp),e(zp,Tle),e(Tle,Mbo),e(zp,Ebo),e(zp,wN),e(wN,Cbo),e(zp,wbo),e(x,Abo),e(x,Wp),e(Wp,Mle),e(Mle,ybo),e(Wp,Lbo),e(Wp,AN),e(AN,xbo),e(Wp,$bo),e(x,kbo),e(x,Qp),e(Qp,Ele),e(Ele,Sbo),e(Qp,Rbo),e(Qp,yN),e(yN,Pbo),e(Qp,Bbo),e(x,Ibo),e(x,Hp),e(Hp,Cle),e(Cle,Nbo),e(Hp,qbo),e(Hp,LN),e(LN,jbo),e(Hp,Dbo),e(x,Gbo),e(x,Up),e(Up,wle),e(wle,Obo),e(Up,Vbo),e(Up,xN),e(xN,Xbo),e(Up,zbo),e(x,Wbo),e(x,Jp),e(Jp,Ale),e(Ale,Qbo),e(Jp,Hbo),e(Jp,$N),e($N,Ubo),e(Jp,Jbo),e(x,Ybo),e(x,Yp),e(Yp,yle),e(yle,Kbo),e(Yp,Zbo),e(Yp,kN),e(kN,e2o),e(Yp,o2o),e(x,r2o),e(x,Kp),e(Kp,Lle),e(Lle,t2o),e(Kp,a2o),e(Kp,SN),e(SN,n2o),e(Kp,s2o),e(x,l2o),e(x,Zp),e(Zp,xle),e(xle,i2o),e(Zp,d2o),e(Zp,RN),e(RN,c2o),e(Zp,f2o),e(x,m2o),e(x,e_),e(e_,$le),e($le,g2o),e(e_,h2o),e(e_,PN),e(PN,p2o),e(e_,_2o),e(x,u2o),e(x,o_),e(o_,kle),e(kle,b2o),e(o_,v2o),e(o_,BN),e(BN,F2o),e(o_,T2o),e(x,M2o),e(x,r_),e(r_,Sle),e(Sle,E2o),e(r_,C2o),e(r_,IN),e(IN,w2o),e(r_,A2o),e(x,y2o),e(x,t_),e(t_,Rle),e(Rle,L2o),e(t_,x2o),e(t_,NN),e(NN,$2o),e(t_,k2o),e(x,S2o),e(x,a_),e(a_,Ple),e(Ple,R2o),e(a_,P2o),e(a_,qN),e(qN,B2o),e(a_,I2o),e(x,N2o),e(x,n_),e(n_,Ble),e(Ble,q2o),e(n_,j2o),e(n_,jN),e(jN,D2o),e(n_,G2o),e(x,O2o),e(x,s_),e(s_,Ile),e(Ile,V2o),e(s_,X2o),e(s_,DN),e(DN,z2o),e(s_,W2o),e(x,Q2o),e(x,l_),e(l_,Nle),e(Nle,H2o),e(l_,U2o),e(l_,GN),e(GN,J2o),e(l_,Y2o),e(x,K2o),e(x,i_),e(i_,qle),e(qle,Z2o),e(i_,e4o),e(i_,ON),e(ON,o4o),e(i_,r4o),e(x,t4o),e(x,d_),e(d_,jle),e(jle,a4o),e(d_,n4o),e(d_,VN),e(VN,s4o),e(d_,l4o),e(x,i4o),e(x,c_),e(c_,Dle),e(Dle,d4o),e(c_,c4o),e(c_,XN),e(XN,f4o),e(c_,m4o),e(x,g4o),e(x,f_),e(f_,Gle),e(Gle,h4o),e(f_,p4o),e(f_,zN),e(zN,_4o),e(f_,u4o),e(x,b4o),e(x,m_),e(m_,Ole),e(Ole,v4o),e(m_,F4o),e(m_,WN),e(WN,T4o),e(m_,M4o),e(x,E4o),e(x,g_),e(g_,Vle),e(Vle,C4o),e(g_,w4o),e(g_,QN),e(QN,A4o),e(g_,y4o),e(x,L4o),e(x,h_),e(h_,Xle),e(Xle,x4o),e(h_,$4o),e(h_,HN),e(HN,k4o),e(h_,S4o),e(x,R4o),e(x,p_),e(p_,zle),e(zle,P4o),e(p_,B4o),e(p_,UN),e(UN,I4o),e(p_,N4o),e(x,q4o),e(x,__),e(__,Wle),e(Wle,j4o),e(__,D4o),e(__,JN),e(JN,G4o),e(__,O4o),e(x,V4o),e(x,u_),e(u_,Qle),e(Qle,X4o),e(u_,z4o),e(u_,YN),e(YN,W4o),e(u_,Q4o),e(x,H4o),e(x,b_),e(b_,Hle),e(Hle,U4o),e(b_,J4o),e(b_,KN),e(KN,Y4o),e(b_,K4o),e(x,Z4o),e(x,v_),e(v_,Ule),e(Ule,evo),e(v_,ovo),e(v_,ZN),e(ZN,rvo),e(v_,tvo),e(x,avo),e(x,F_),e(F_,Jle),e(Jle,nvo),e(F_,svo),e(F_,eq),e(eq,lvo),e(F_,ivo),e(x,dvo),e(x,T_),e(T_,Yle),e(Yle,cvo),e(T_,fvo),e(T_,oq),e(oq,mvo),e(T_,gvo),e(x,hvo),e(x,M_),e(M_,Kle),e(Kle,pvo),e(M_,_vo),e(M_,rq),e(rq,uvo),e(M_,bvo),e(x,vvo),e(x,E_),e(E_,Zle),e(Zle,Fvo),e(E_,Tvo),e(E_,tq),e(tq,Mvo),e(E_,Evo),e(x,Cvo),e(x,C_),e(C_,eie),e(eie,wvo),e(C_,Avo),e(C_,aq),e(aq,yvo),e(C_,Lvo),e(x,xvo),e(x,w_),e(w_,oie),e(oie,$vo),e(w_,kvo),e(w_,nq),e(nq,Svo),e(w_,Rvo),e(x,Pvo),e(x,A_),e(A_,rie),e(rie,Bvo),e(A_,Ivo),e(A_,sq),e(sq,Nvo),e(A_,qvo),e(x,jvo),e(x,y_),e(y_,tie),e(tie,Dvo),e(y_,Gvo),e(y_,lq),e(lq,Ovo),e(y_,Vvo),e(x,Xvo),e(x,L_),e(L_,aie),e(aie,zvo),e(L_,Wvo),e(L_,iq),e(iq,Qvo),e(L_,Hvo),e(x,Uvo),e(x,x_),e(x_,nie),e(nie,Jvo),e(x_,Yvo),e(x_,dq),e(dq,Kvo),e(x_,Zvo),e(x,eFo),e(x,$_),e($_,sie),e(sie,oFo),e($_,rFo),e($_,cq),e(cq,tFo),e($_,aFo),e(x,nFo),e(x,k_),e(k_,lie),e(lie,sFo),e(k_,lFo),e(k_,fq),e(fq,iFo),e(k_,dFo),e(x,cFo),e(x,S_),e(S_,iie),e(iie,fFo),e(S_,mFo),e(S_,mq),e(mq,gFo),e(S_,hFo),e(x,pFo),e(x,R_),e(R_,die),e(die,_Fo),e(R_,uFo),e(R_,gq),e(gq,bFo),e(R_,vFo),e(x,FFo),e(x,P_),e(P_,cie),e(cie,TFo),e(P_,MFo),e(P_,hq),e(hq,EFo),e(P_,CFo),e(x,wFo),e(x,B_),e(B_,fie),e(fie,AFo),e(B_,yFo),e(B_,pq),e(pq,LFo),e(B_,xFo),e(x,$Fo),e(x,I_),e(I_,mie),e(mie,kFo),e(I_,SFo),e(I_,_q),e(_q,RFo),e(I_,PFo),e(x,BFo),e(x,N_),e(N_,gie),e(gie,IFo),e(N_,NFo),e(N_,uq),e(uq,qFo),e(N_,jFo),e(x,DFo),e(x,q_),e(q_,hie),e(hie,GFo),e(q_,OFo),e(q_,bq),e(bq,VFo),e(q_,XFo),e(x,zFo),e(x,j_),e(j_,pie),e(pie,WFo),e(j_,QFo),e(j_,vq),e(vq,HFo),e(j_,UFo),e(x,JFo),e(x,D_),e(D_,_ie),e(_ie,YFo),e(D_,KFo),e(D_,Fq),e(Fq,ZFo),e(D_,e6o),e(x,o6o),e(x,G_),e(G_,uie),e(uie,r6o),e(G_,t6o),e(G_,Tq),e(Tq,a6o),e(G_,n6o),e(x,s6o),e(x,O_),e(O_,bie),e(bie,l6o),e(O_,i6o),e(O_,Mq),e(Mq,d6o),e(O_,c6o),e(x,f6o),e(x,V_),e(V_,vie),e(vie,m6o),e(V_,g6o),e(V_,Eq),e(Eq,h6o),e(V_,p6o),e(x,_6o),e(x,X_),e(X_,Fie),e(Fie,u6o),e(X_,b6o),e(X_,Cq),e(Cq,v6o),e(X_,F6o),e(x,T6o),e(x,z_),e(z_,Tie),e(Tie,M6o),e(z_,E6o),e(z_,wq),e(wq,C6o),e(z_,w6o),e(x,A6o),e(x,W_),e(W_,Mie),e(Mie,y6o),e(W_,L6o),e(W_,Aq),e(Aq,x6o),e(W_,$6o),e(x,k6o),e(x,Q_),e(Q_,Eie),e(Eie,S6o),e(Q_,R6o),e(Q_,yq),e(yq,P6o),e(Q_,B6o),e(x,I6o),e(x,H_),e(H_,Cie),e(Cie,N6o),e(H_,q6o),e(H_,Lq),e(Lq,j6o),e(H_,D6o),e(x,G6o),e(x,U_),e(U_,wie),e(wie,O6o),e(U_,V6o),e(U_,xq),e(xq,X6o),e(U_,z6o),e(x,W6o),e(x,J_),e(J_,Aie),e(Aie,Q6o),e(J_,H6o),e(J_,$q),e($q,U6o),e(J_,J6o),e(x,Y6o),e(x,Y_),e(Y_,yie),e(yie,K6o),e(Y_,Z6o),e(Y_,kq),e(kq,eTo),e(Y_,oTo),e(x,rTo),e(x,K_),e(K_,Lie),e(Lie,tTo),e(K_,aTo),e(K_,Sq),e(Sq,nTo),e(K_,sTo),e(x,lTo),e(x,Z_),e(Z_,xie),e(xie,iTo),e(Z_,dTo),e(Z_,Rq),e(Rq,cTo),e(Z_,fTo),e(x,mTo),e(x,eu),e(eu,$ie),e($ie,gTo),e(eu,hTo),e(eu,Pq),e(Pq,pTo),e(eu,_To),e(x,uTo),e(x,ou),e(ou,kie),e(kie,bTo),e(ou,vTo),e(ou,Bq),e(Bq,FTo),e(ou,TTo),e(x,MTo),e(x,ru),e(ru,Sie),e(Sie,ETo),e(ru,CTo),e(ru,Iq),e(Iq,wTo),e(ru,ATo),e(x,yTo),e(x,tu),e(tu,Rie),e(Rie,LTo),e(tu,xTo),e(tu,Nq),e(Nq,$To),e(tu,kTo),e(x,STo),e(x,au),e(au,Pie),e(Pie,RTo),e(au,PTo),e(au,qq),e(qq,BTo),e(au,ITo),e(x,NTo),e(x,nu),e(nu,Bie),e(Bie,qTo),e(nu,jTo),e(nu,jq),e(jq,DTo),e(nu,GTo),e(Je,OTo),e(Je,su),e(su,VTo),e(su,Iie),e(Iie,XTo),e(su,zTo),e(su,Nie),e(Nie,WTo),e(Je,QTo),M(lu,Je,null),b(f,qqe,u),b(f,xi,u),e(xi,iu),e(iu,qie),M(cy,qie,null),e(xi,HTo),e(xi,jie),e(jie,UTo),b(f,jqe,u),b(f,xo,u),M(fy,xo,null),e(xo,JTo),e(xo,$i),e($i,YTo),e($i,Dq),e(Dq,KTo),e($i,ZTo),e($i,Gq),e(Gq,e7o),e($i,o7o),e(xo,r7o),e(xo,my),e(my,t7o),e(my,Die),e(Die,a7o),e(my,n7o),e(xo,s7o),e(xo,at),M(gy,at,null),e(at,l7o),e(at,Gie),e(Gie,i7o),e(at,d7o),e(at,ki),e(ki,c7o),e(ki,Oie),e(Oie,f7o),e(ki,m7o),e(ki,Oq),e(Oq,g7o),e(ki,h7o),e(at,p7o),M(du,at,null),e(xo,_7o),e(xo,Ye),M(hy,Ye,null),e(Ye,u7o),e(Ye,Vie),e(Vie,b7o),e(Ye,v7o),e(Ye,xa),e(xa,F7o),e(xa,Xie),e(Xie,T7o),e(xa,M7o),e(xa,zie),e(zie,E7o),e(xa,C7o),e(xa,Wie),e(Wie,w7o),e(xa,A7o),e(Ye,y7o),e(Ye,G),e(G,cu),e(cu,Qie),e(Qie,L7o),e(cu,x7o),e(cu,Vq),e(Vq,$7o),e(cu,k7o),e(G,S7o),e(G,fu),e(fu,Hie),e(Hie,R7o),e(fu,P7o),e(fu,Xq),e(Xq,B7o),e(fu,I7o),e(G,N7o),e(G,mu),e(mu,Uie),e(Uie,q7o),e(mu,j7o),e(mu,zq),e(zq,D7o),e(mu,G7o),e(G,O7o),e(G,gu),e(gu,Jie),e(Jie,V7o),e(gu,X7o),e(gu,Wq),e(Wq,z7o),e(gu,W7o),e(G,Q7o),e(G,hu),e(hu,Yie),e(Yie,H7o),e(hu,U7o),e(hu,Qq),e(Qq,J7o),e(hu,Y7o),e(G,K7o),e(G,pu),e(pu,Kie),e(Kie,Z7o),e(pu,eMo),e(pu,Hq),e(Hq,oMo),e(pu,rMo),e(G,tMo),e(G,_u),e(_u,Zie),e(Zie,aMo),e(_u,nMo),e(_u,Uq),e(Uq,sMo),e(_u,lMo),e(G,iMo),e(G,uu),e(uu,ede),e(ede,dMo),e(uu,cMo),e(uu,Jq),e(Jq,fMo),e(uu,mMo),e(G,gMo),e(G,bu),e(bu,ode),e(ode,hMo),e(bu,pMo),e(bu,Yq),e(Yq,_Mo),e(bu,uMo),e(G,bMo),e(G,vu),e(vu,rde),e(rde,vMo),e(vu,FMo),e(vu,Kq),e(Kq,TMo),e(vu,MMo),e(G,EMo),e(G,Fu),e(Fu,tde),e(tde,CMo),e(Fu,wMo),e(Fu,Zq),e(Zq,AMo),e(Fu,yMo),e(G,LMo),e(G,Tu),e(Tu,ade),e(ade,xMo),e(Tu,$Mo),e(Tu,ej),e(ej,kMo),e(Tu,SMo),e(G,RMo),e(G,Mu),e(Mu,nde),e(nde,PMo),e(Mu,BMo),e(Mu,oj),e(oj,IMo),e(Mu,NMo),e(G,qMo),e(G,Eu),e(Eu,sde),e(sde,jMo),e(Eu,DMo),e(Eu,rj),e(rj,GMo),e(Eu,OMo),e(G,VMo),e(G,Cu),e(Cu,lde),e(lde,XMo),e(Cu,zMo),e(Cu,tj),e(tj,WMo),e(Cu,QMo),e(G,HMo),e(G,wu),e(wu,ide),e(ide,UMo),e(wu,JMo),e(wu,aj),e(aj,YMo),e(wu,KMo),e(G,ZMo),e(G,Au),e(Au,dde),e(dde,eEo),e(Au,oEo),e(Au,nj),e(nj,rEo),e(Au,tEo),e(G,aEo),e(G,yu),e(yu,cde),e(cde,nEo),e(yu,sEo),e(yu,sj),e(sj,lEo),e(yu,iEo),e(G,dEo),e(G,Lu),e(Lu,fde),e(fde,cEo),e(Lu,fEo),e(Lu,lj),e(lj,mEo),e(Lu,gEo),e(G,hEo),e(G,xu),e(xu,mde),e(mde,pEo),e(xu,_Eo),e(xu,ij),e(ij,uEo),e(xu,bEo),e(G,vEo),e(G,$u),e($u,gde),e(gde,FEo),e($u,TEo),e($u,dj),e(dj,MEo),e($u,EEo),e(G,CEo),e(G,ku),e(ku,hde),e(hde,wEo),e(ku,AEo),e(ku,cj),e(cj,yEo),e(ku,LEo),e(G,xEo),e(G,Su),e(Su,pde),e(pde,$Eo),e(Su,kEo),e(Su,fj),e(fj,SEo),e(Su,REo),e(G,PEo),e(G,Ru),e(Ru,_de),e(_de,BEo),e(Ru,IEo),e(Ru,mj),e(mj,NEo),e(Ru,qEo),e(G,jEo),e(G,Pu),e(Pu,ude),e(ude,DEo),e(Pu,GEo),e(Pu,gj),e(gj,OEo),e(Pu,VEo),e(G,XEo),e(G,Bu),e(Bu,bde),e(bde,zEo),e(Bu,WEo),e(Bu,hj),e(hj,QEo),e(Bu,HEo),e(G,UEo),e(G,Iu),e(Iu,vde),e(vde,JEo),e(Iu,YEo),e(Iu,pj),e(pj,KEo),e(Iu,ZEo),e(G,eCo),e(G,Nu),e(Nu,Fde),e(Fde,oCo),e(Nu,rCo),e(Nu,_j),e(_j,tCo),e(Nu,aCo),e(G,nCo),e(G,qu),e(qu,Tde),e(Tde,sCo),e(qu,lCo),e(qu,uj),e(uj,iCo),e(qu,dCo),e(G,cCo),e(G,ju),e(ju,Mde),e(Mde,fCo),e(ju,mCo),e(ju,bj),e(bj,gCo),e(ju,hCo),e(G,pCo),e(G,Du),e(Du,Ede),e(Ede,_Co),e(Du,uCo),e(Du,vj),e(vj,bCo),e(Du,vCo),e(G,FCo),e(G,Gu),e(Gu,Cde),e(Cde,TCo),e(Gu,MCo),e(Gu,Fj),e(Fj,ECo),e(Gu,CCo),e(G,wCo),e(G,Ou),e(Ou,wde),e(wde,ACo),e(Ou,yCo),e(Ou,Tj),e(Tj,LCo),e(Ou,xCo),e(G,$Co),e(G,Vu),e(Vu,Ade),e(Ade,kCo),e(Vu,SCo),e(Vu,Mj),e(Mj,RCo),e(Vu,PCo),e(G,BCo),e(G,Xu),e(Xu,yde),e(yde,ICo),e(Xu,NCo),e(Xu,Ej),e(Ej,qCo),e(Xu,jCo),e(G,DCo),e(G,zu),e(zu,Lde),e(Lde,GCo),e(zu,OCo),e(zu,Cj),e(Cj,VCo),e(zu,XCo),e(G,zCo),e(G,Wu),e(Wu,xde),e(xde,WCo),e(Wu,QCo),e(Wu,wj),e(wj,HCo),e(Wu,UCo),e(G,JCo),e(G,Qu),e(Qu,$de),e($de,YCo),e(Qu,KCo),e(Qu,Aj),e(Aj,ZCo),e(Qu,e5o),e(G,o5o),e(G,Hu),e(Hu,kde),e(kde,r5o),e(Hu,t5o),e(Hu,yj),e(yj,a5o),e(Hu,n5o),e(G,s5o),e(G,Uu),e(Uu,Sde),e(Sde,l5o),e(Uu,i5o),e(Uu,Lj),e(Lj,d5o),e(Uu,c5o),e(G,f5o),e(G,Ju),e(Ju,Rde),e(Rde,m5o),e(Ju,g5o),e(Ju,xj),e(xj,h5o),e(Ju,p5o),e(G,_5o),e(G,Yu),e(Yu,Pde),e(Pde,u5o),e(Yu,b5o),e(Yu,$j),e($j,v5o),e(Yu,F5o),e(Ye,T5o),e(Ye,Ku),e(Ku,M5o),e(Ku,Bde),e(Bde,E5o),e(Ku,C5o),e(Ku,Ide),e(Ide,w5o),e(Ye,A5o),M(Zu,Ye,null),b(f,Dqe,u),b(f,Si,u),e(Si,e1),e(e1,Nde),M(py,Nde,null),e(Si,y5o),e(Si,qde),e(qde,L5o),b(f,Gqe,u),b(f,$o,u),M(_y,$o,null),e($o,x5o),e($o,Ri),e(Ri,$5o),e(Ri,kj),e(kj,k5o),e(Ri,S5o),e(Ri,Sj),e(Sj,R5o),e(Ri,P5o),e($o,B5o),e($o,uy),e(uy,I5o),e(uy,jde),e(jde,N5o),e(uy,q5o),e($o,j5o),e($o,nt),M(by,nt,null),e(nt,D5o),e(nt,Dde),e(Dde,G5o),e(nt,O5o),e(nt,Pi),e(Pi,V5o),e(Pi,Gde),e(Gde,X5o),e(Pi,z5o),e(Pi,Rj),e(Rj,W5o),e(Pi,Q5o),e(nt,H5o),M(o1,nt,null),e($o,U5o),e($o,Ke),M(vy,Ke,null),e(Ke,J5o),e(Ke,Ode),e(Ode,Y5o),e(Ke,K5o),e(Ke,$a),e($a,Z5o),e($a,Vde),e(Vde,e3o),e($a,o3o),e($a,Xde),e(Xde,r3o),e($a,t3o),e($a,zde),e(zde,a3o),e($a,n3o),e(Ke,s3o),e(Ke,z),e(z,r1),e(r1,Wde),e(Wde,l3o),e(r1,i3o),e(r1,Pj),e(Pj,d3o),e(r1,c3o),e(z,f3o),e(z,t1),e(t1,Qde),e(Qde,m3o),e(t1,g3o),e(t1,Bj),e(Bj,h3o),e(t1,p3o),e(z,_3o),e(z,a1),e(a1,Hde),e(Hde,u3o),e(a1,b3o),e(a1,Ij),e(Ij,v3o),e(a1,F3o),e(z,T3o),e(z,n1),e(n1,Ude),e(Ude,M3o),e(n1,E3o),e(n1,Nj),e(Nj,C3o),e(n1,w3o),e(z,A3o),e(z,s1),e(s1,Jde),e(Jde,y3o),e(s1,L3o),e(s1,qj),e(qj,x3o),e(s1,$3o),e(z,k3o),e(z,l1),e(l1,Yde),e(Yde,S3o),e(l1,R3o),e(l1,jj),e(jj,P3o),e(l1,B3o),e(z,I3o),e(z,i1),e(i1,Kde),e(Kde,N3o),e(i1,q3o),e(i1,Dj),e(Dj,j3o),e(i1,D3o),e(z,G3o),e(z,d1),e(d1,Zde),e(Zde,O3o),e(d1,V3o),e(d1,Gj),e(Gj,X3o),e(d1,z3o),e(z,W3o),e(z,c1),e(c1,ece),e(ece,Q3o),e(c1,H3o),e(c1,Oj),e(Oj,U3o),e(c1,J3o),e(z,Y3o),e(z,f1),e(f1,oce),e(oce,K3o),e(f1,Z3o),e(f1,Vj),e(Vj,ewo),e(f1,owo),e(z,rwo),e(z,m1),e(m1,rce),e(rce,two),e(m1,awo),e(m1,Xj),e(Xj,nwo),e(m1,swo),e(z,lwo),e(z,g1),e(g1,tce),e(tce,iwo),e(g1,dwo),e(g1,zj),e(zj,cwo),e(g1,fwo),e(z,mwo),e(z,h1),e(h1,ace),e(ace,gwo),e(h1,hwo),e(h1,Wj),e(Wj,pwo),e(h1,_wo),e(z,uwo),e(z,p1),e(p1,nce),e(nce,bwo),e(p1,vwo),e(p1,Qj),e(Qj,Fwo),e(p1,Two),e(z,Mwo),e(z,_1),e(_1,sce),e(sce,Ewo),e(_1,Cwo),e(_1,Hj),e(Hj,wwo),e(_1,Awo),e(z,ywo),e(z,u1),e(u1,lce),e(lce,Lwo),e(u1,xwo),e(u1,Uj),e(Uj,$wo),e(u1,kwo),e(z,Swo),e(z,b1),e(b1,ice),e(ice,Rwo),e(b1,Pwo),e(b1,Jj),e(Jj,Bwo),e(b1,Iwo),e(z,Nwo),e(z,v1),e(v1,dce),e(dce,qwo),e(v1,jwo),e(v1,Yj),e(Yj,Dwo),e(v1,Gwo),e(z,Owo),e(z,F1),e(F1,cce),e(cce,Vwo),e(F1,Xwo),e(F1,Kj),e(Kj,zwo),e(F1,Wwo),e(z,Qwo),e(z,T1),e(T1,fce),e(fce,Hwo),e(T1,Uwo),e(T1,Zj),e(Zj,Jwo),e(T1,Ywo),e(z,Kwo),e(z,M1),e(M1,mce),e(mce,Zwo),e(M1,e0o),e(M1,eD),e(eD,o0o),e(M1,r0o),e(z,t0o),e(z,E1),e(E1,gce),e(gce,a0o),e(E1,n0o),e(E1,oD),e(oD,s0o),e(E1,l0o),e(z,i0o),e(z,C1),e(C1,hce),e(hce,d0o),e(C1,c0o),e(C1,rD),e(rD,f0o),e(C1,m0o),e(z,g0o),e(z,w1),e(w1,pce),e(pce,h0o),e(w1,p0o),e(w1,tD),e(tD,_0o),e(w1,u0o),e(z,b0o),e(z,A1),e(A1,_ce),e(_ce,v0o),e(A1,F0o),e(A1,aD),e(aD,T0o),e(A1,M0o),e(z,E0o),e(z,y1),e(y1,uce),e(uce,C0o),e(y1,w0o),e(y1,nD),e(nD,A0o),e(y1,y0o),e(z,L0o),e(z,L1),e(L1,bce),e(bce,x0o),e(L1,$0o),e(L1,sD),e(sD,k0o),e(L1,S0o),e(z,R0o),e(z,x1),e(x1,vce),e(vce,P0o),e(x1,B0o),e(x1,lD),e(lD,I0o),e(x1,N0o),e(z,q0o),e(z,$1),e($1,Fce),e(Fce,j0o),e($1,D0o),e($1,iD),e(iD,G0o),e($1,O0o),e(z,V0o),e(z,k1),e(k1,Tce),e(Tce,X0o),e(k1,z0o),e(k1,dD),e(dD,W0o),e(k1,Q0o),e(z,H0o),e(z,S1),e(S1,Mce),e(Mce,U0o),e(S1,J0o),e(S1,cD),e(cD,Y0o),e(S1,K0o),e(z,Z0o),e(z,R1),e(R1,Ece),e(Ece,eAo),e(R1,oAo),e(R1,fD),e(fD,rAo),e(R1,tAo),e(z,aAo),e(z,P1),e(P1,Cce),e(Cce,nAo),e(P1,sAo),e(P1,mD),e(mD,lAo),e(P1,iAo),e(z,dAo),e(z,B1),e(B1,wce),e(wce,cAo),e(B1,fAo),e(B1,gD),e(gD,mAo),e(B1,gAo),e(z,hAo),e(z,I1),e(I1,Ace),e(Ace,pAo),e(I1,_Ao),e(I1,hD),e(hD,uAo),e(I1,bAo),e(z,vAo),e(z,N1),e(N1,yce),e(yce,FAo),e(N1,TAo),e(N1,pD),e(pD,MAo),e(N1,EAo),e(z,CAo),e(z,q1),e(q1,Lce),e(Lce,wAo),e(q1,AAo),e(q1,_D),e(_D,yAo),e(q1,LAo),e(Ke,xAo),e(Ke,j1),e(j1,$Ao),e(j1,xce),e(xce,kAo),e(j1,SAo),e(j1,$ce),e($ce,RAo),e(Ke,PAo),M(D1,Ke,null),b(f,Oqe,u),b(f,Bi,u),e(Bi,G1),e(G1,kce),M(Fy,kce,null),e(Bi,BAo),e(Bi,Sce),e(Sce,IAo),b(f,Vqe,u),b(f,ko,u),M(Ty,ko,null),e(ko,NAo),e(ko,Ii),e(Ii,qAo),e(Ii,uD),e(uD,jAo),e(Ii,DAo),e(Ii,bD),e(bD,GAo),e(Ii,OAo),e(ko,VAo),e(ko,My),e(My,XAo),e(My,Rce),e(Rce,zAo),e(My,WAo),e(ko,QAo),e(ko,st),M(Ey,st,null),e(st,HAo),e(st,Pce),e(Pce,UAo),e(st,JAo),e(st,Ni),e(Ni,YAo),e(Ni,Bce),e(Bce,KAo),e(Ni,ZAo),e(Ni,vD),e(vD,eyo),e(Ni,oyo),e(st,ryo),M(O1,st,null),e(ko,tyo),e(ko,Ze),M(Cy,Ze,null),e(Ze,ayo),e(Ze,Ice),e(Ice,nyo),e(Ze,syo),e(Ze,ka),e(ka,lyo),e(ka,Nce),e(Nce,iyo),e(ka,dyo),e(ka,qce),e(qce,cyo),e(ka,fyo),e(ka,jce),e(jce,myo),e(ka,gyo),e(Ze,hyo),e(Ze,Q),e(Q,V1),e(V1,Dce),e(Dce,pyo),e(V1,_yo),e(V1,FD),e(FD,uyo),e(V1,byo),e(Q,vyo),e(Q,X1),e(X1,Gce),e(Gce,Fyo),e(X1,Tyo),e(X1,TD),e(TD,Myo),e(X1,Eyo),e(Q,Cyo),e(Q,z1),e(z1,Oce),e(Oce,wyo),e(z1,Ayo),e(z1,MD),e(MD,yyo),e(z1,Lyo),e(Q,xyo),e(Q,W1),e(W1,Vce),e(Vce,$yo),e(W1,kyo),e(W1,ED),e(ED,Syo),e(W1,Ryo),e(Q,Pyo),e(Q,Q1),e(Q1,Xce),e(Xce,Byo),e(Q1,Iyo),e(Q1,CD),e(CD,Nyo),e(Q1,qyo),e(Q,jyo),e(Q,H1),e(H1,zce),e(zce,Dyo),e(H1,Gyo),e(H1,wD),e(wD,Oyo),e(H1,Vyo),e(Q,Xyo),e(Q,U1),e(U1,Wce),e(Wce,zyo),e(U1,Wyo),e(U1,AD),e(AD,Qyo),e(U1,Hyo),e(Q,Uyo),e(Q,J1),e(J1,Qce),e(Qce,Jyo),e(J1,Yyo),e(J1,yD),e(yD,Kyo),e(J1,Zyo),e(Q,eLo),e(Q,Y1),e(Y1,Hce),e(Hce,oLo),e(Y1,rLo),e(Y1,LD),e(LD,tLo),e(Y1,aLo),e(Q,nLo),e(Q,K1),e(K1,Uce),e(Uce,sLo),e(K1,lLo),e(K1,xD),e(xD,iLo),e(K1,dLo),e(Q,cLo),e(Q,Z1),e(Z1,Jce),e(Jce,fLo),e(Z1,mLo),e(Z1,$D),e($D,gLo),e(Z1,hLo),e(Q,pLo),e(Q,eb),e(eb,Yce),e(Yce,_Lo),e(eb,uLo),e(eb,kD),e(kD,bLo),e(eb,vLo),e(Q,FLo),e(Q,ob),e(ob,Kce),e(Kce,TLo),e(ob,MLo),e(ob,SD),e(SD,ELo),e(ob,CLo),e(Q,wLo),e(Q,rb),e(rb,Zce),e(Zce,ALo),e(rb,yLo),e(rb,RD),e(RD,LLo),e(rb,xLo),e(Q,$Lo),e(Q,tb),e(tb,efe),e(efe,kLo),e(tb,SLo),e(tb,PD),e(PD,RLo),e(tb,PLo),e(Q,BLo),e(Q,ab),e(ab,ofe),e(ofe,ILo),e(ab,NLo),e(ab,BD),e(BD,qLo),e(ab,jLo),e(Q,DLo),e(Q,nb),e(nb,rfe),e(rfe,GLo),e(nb,OLo),e(nb,ID),e(ID,VLo),e(nb,XLo),e(Q,zLo),e(Q,sb),e(sb,tfe),e(tfe,WLo),e(sb,QLo),e(sb,ND),e(ND,HLo),e(sb,ULo),e(Q,JLo),e(Q,lb),e(lb,afe),e(afe,YLo),e(lb,KLo),e(lb,qD),e(qD,ZLo),e(lb,e8o),e(Q,o8o),e(Q,ib),e(ib,nfe),e(nfe,r8o),e(ib,t8o),e(ib,jD),e(jD,a8o),e(ib,n8o),e(Q,s8o),e(Q,db),e(db,sfe),e(sfe,l8o),e(db,i8o),e(db,DD),e(DD,d8o),e(db,c8o),e(Q,f8o),e(Q,cb),e(cb,lfe),e(lfe,m8o),e(cb,g8o),e(cb,GD),e(GD,h8o),e(cb,p8o),e(Q,_8o),e(Q,fb),e(fb,ife),e(ife,u8o),e(fb,b8o),e(fb,OD),e(OD,v8o),e(fb,F8o),e(Q,T8o),e(Q,mb),e(mb,dfe),e(dfe,M8o),e(mb,E8o),e(mb,VD),e(VD,C8o),e(mb,w8o),e(Q,A8o),e(Q,gb),e(gb,cfe),e(cfe,y8o),e(gb,L8o),e(gb,XD),e(XD,x8o),e(gb,$8o),e(Q,k8o),e(Q,hb),e(hb,ffe),e(ffe,S8o),e(hb,R8o),e(hb,zD),e(zD,P8o),e(hb,B8o),e(Q,I8o),e(Q,pb),e(pb,mfe),e(mfe,N8o),e(pb,q8o),e(pb,WD),e(WD,j8o),e(pb,D8o),e(Q,G8o),e(Q,_b),e(_b,gfe),e(gfe,O8o),e(_b,V8o),e(_b,QD),e(QD,X8o),e(_b,z8o),e(Q,W8o),e(Q,ub),e(ub,hfe),e(hfe,Q8o),e(ub,H8o),e(ub,HD),e(HD,U8o),e(ub,J8o),e(Q,Y8o),e(Q,bb),e(bb,pfe),e(pfe,K8o),e(bb,Z8o),e(bb,UD),e(UD,e9o),e(bb,o9o),e(Q,r9o),e(Q,vb),e(vb,_fe),e(_fe,t9o),e(vb,a9o),e(vb,ufe),e(ufe,n9o),e(vb,s9o),e(Q,l9o),e(Q,Fb),e(Fb,bfe),e(bfe,i9o),e(Fb,d9o),e(Fb,JD),e(JD,c9o),e(Fb,f9o),e(Q,m9o),e(Q,Tb),e(Tb,vfe),e(vfe,g9o),e(Tb,h9o),e(Tb,YD),e(YD,p9o),e(Tb,_9o),e(Q,u9o),e(Q,Mb),e(Mb,Ffe),e(Ffe,b9o),e(Mb,v9o),e(Mb,KD),e(KD,F9o),e(Mb,T9o),e(Q,M9o),e(Q,Eb),e(Eb,Tfe),e(Tfe,E9o),e(Eb,C9o),e(Eb,ZD),e(ZD,w9o),e(Eb,A9o),e(Ze,y9o),e(Ze,Cb),e(Cb,L9o),e(Cb,Mfe),e(Mfe,x9o),e(Cb,$9o),e(Cb,Efe),e(Efe,k9o),e(Ze,S9o),M(wb,Ze,null),b(f,Xqe,u),b(f,qi,u),e(qi,Ab),e(Ab,Cfe),M(wy,Cfe,null),e(qi,R9o),e(qi,wfe),e(wfe,P9o),b(f,zqe,u),b(f,So,u),M(Ay,So,null),e(So,B9o),e(So,ji),e(ji,I9o),e(ji,eG),e(eG,N9o),e(ji,q9o),e(ji,oG),e(oG,j9o),e(ji,D9o),e(So,G9o),e(So,yy),e(yy,O9o),e(yy,Afe),e(Afe,V9o),e(yy,X9o),e(So,z9o),e(So,lt),M(Ly,lt,null),e(lt,W9o),e(lt,yfe),e(yfe,Q9o),e(lt,H9o),e(lt,Di),e(Di,U9o),e(Di,Lfe),e(Lfe,J9o),e(Di,Y9o),e(Di,rG),e(rG,K9o),e(Di,Z9o),e(lt,exo),M(yb,lt,null),e(So,oxo),e(So,eo),M(xy,eo,null),e(eo,rxo),e(eo,xfe),e(xfe,txo),e(eo,axo),e(eo,Sa),e(Sa,nxo),e(Sa,$fe),e($fe,sxo),e(Sa,lxo),e(Sa,kfe),e(kfe,ixo),e(Sa,dxo),e(Sa,Sfe),e(Sfe,cxo),e(Sa,fxo),e(eo,mxo),e(eo,ue),e(ue,Lb),e(Lb,Rfe),e(Rfe,gxo),e(Lb,hxo),e(Lb,tG),e(tG,pxo),e(Lb,_xo),e(ue,uxo),e(ue,xb),e(xb,Pfe),e(Pfe,bxo),e(xb,vxo),e(xb,aG),e(aG,Fxo),e(xb,Txo),e(ue,Mxo),e(ue,$b),e($b,Bfe),e(Bfe,Exo),e($b,Cxo),e($b,nG),e(nG,wxo),e($b,Axo),e(ue,yxo),e(ue,kb),e(kb,Ife),e(Ife,Lxo),e(kb,xxo),e(kb,sG),e(sG,$xo),e(kb,kxo),e(ue,Sxo),e(ue,Sb),e(Sb,Nfe),e(Nfe,Rxo),e(Sb,Pxo),e(Sb,lG),e(lG,Bxo),e(Sb,Ixo),e(ue,Nxo),e(ue,Rb),e(Rb,qfe),e(qfe,qxo),e(Rb,jxo),e(Rb,iG),e(iG,Dxo),e(Rb,Gxo),e(ue,Oxo),e(ue,Pb),e(Pb,jfe),e(jfe,Vxo),e(Pb,Xxo),e(Pb,dG),e(dG,zxo),e(Pb,Wxo),e(ue,Qxo),e(ue,Bb),e(Bb,Dfe),e(Dfe,Hxo),e(Bb,Uxo),e(Bb,cG),e(cG,Jxo),e(Bb,Yxo),e(ue,Kxo),e(ue,Ib),e(Ib,Gfe),e(Gfe,Zxo),e(Ib,e$o),e(Ib,fG),e(fG,o$o),e(Ib,r$o),e(ue,t$o),e(ue,Nb),e(Nb,Ofe),e(Ofe,a$o),e(Nb,n$o),e(Nb,mG),e(mG,s$o),e(Nb,l$o),e(ue,i$o),e(ue,qb),e(qb,Vfe),e(Vfe,d$o),e(qb,c$o),e(qb,gG),e(gG,f$o),e(qb,m$o),e(ue,g$o),e(ue,jb),e(jb,Xfe),e(Xfe,h$o),e(jb,p$o),e(jb,hG),e(hG,_$o),e(jb,u$o),e(ue,b$o),e(ue,Db),e(Db,zfe),e(zfe,v$o),e(Db,F$o),e(Db,pG),e(pG,T$o),e(Db,M$o),e(ue,E$o),e(ue,Gb),e(Gb,Wfe),e(Wfe,C$o),e(Gb,w$o),e(Gb,_G),e(_G,A$o),e(Gb,y$o),e(ue,L$o),e(ue,Ob),e(Ob,Qfe),e(Qfe,x$o),e(Ob,$$o),e(Ob,uG),e(uG,k$o),e(Ob,S$o),e(ue,R$o),e(ue,Vb),e(Vb,Hfe),e(Hfe,P$o),e(Vb,B$o),e(Vb,bG),e(bG,I$o),e(Vb,N$o),e(eo,q$o),e(eo,Xb),e(Xb,j$o),e(Xb,Ufe),e(Ufe,D$o),e(Xb,G$o),e(Xb,Jfe),e(Jfe,O$o),e(eo,V$o),M(zb,eo,null),b(f,Wqe,u),b(f,Gi,u),e(Gi,Wb),e(Wb,Yfe),M($y,Yfe,null),e(Gi,X$o),e(Gi,Kfe),e(Kfe,z$o),b(f,Qqe,u),b(f,Ro,u),M(ky,Ro,null),e(Ro,W$o),e(Ro,Oi),e(Oi,Q$o),e(Oi,vG),e(vG,H$o),e(Oi,U$o),e(Oi,FG),e(FG,J$o),e(Oi,Y$o),e(Ro,K$o),e(Ro,Sy),e(Sy,Z$o),e(Sy,Zfe),e(Zfe,eko),e(Sy,oko),e(Ro,rko),e(Ro,it),M(Ry,it,null),e(it,tko),e(it,eme),e(eme,ako),e(it,nko),e(it,Vi),e(Vi,sko),e(Vi,ome),e(ome,lko),e(Vi,iko),e(Vi,TG),e(TG,dko),e(Vi,cko),e(it,fko),M(Qb,it,null),e(Ro,mko),e(Ro,oo),M(Py,oo,null),e(oo,gko),e(oo,rme),e(rme,hko),e(oo,pko),e(oo,Ra),e(Ra,_ko),e(Ra,tme),e(tme,uko),e(Ra,bko),e(Ra,ame),e(ame,vko),e(Ra,Fko),e(Ra,nme),e(nme,Tko),e(Ra,Mko),e(oo,Eko),e(oo,N),e(N,Hb),e(Hb,sme),e(sme,Cko),e(Hb,wko),e(Hb,MG),e(MG,Ako),e(Hb,yko),e(N,Lko),e(N,Ub),e(Ub,lme),e(lme,xko),e(Ub,$ko),e(Ub,EG),e(EG,kko),e(Ub,Sko),e(N,Rko),e(N,Jb),e(Jb,ime),e(ime,Pko),e(Jb,Bko),e(Jb,CG),e(CG,Iko),e(Jb,Nko),e(N,qko),e(N,Yb),e(Yb,dme),e(dme,jko),e(Yb,Dko),e(Yb,wG),e(wG,Gko),e(Yb,Oko),e(N,Vko),e(N,Kb),e(Kb,cme),e(cme,Xko),e(Kb,zko),e(Kb,AG),e(AG,Wko),e(Kb,Qko),e(N,Hko),e(N,Zb),e(Zb,fme),e(fme,Uko),e(Zb,Jko),e(Zb,yG),e(yG,Yko),e(Zb,Kko),e(N,Zko),e(N,e2),e(e2,mme),e(mme,eSo),e(e2,oSo),e(e2,LG),e(LG,rSo),e(e2,tSo),e(N,aSo),e(N,o2),e(o2,gme),e(gme,nSo),e(o2,sSo),e(o2,xG),e(xG,lSo),e(o2,iSo),e(N,dSo),e(N,r2),e(r2,hme),e(hme,cSo),e(r2,fSo),e(r2,$G),e($G,mSo),e(r2,gSo),e(N,hSo),e(N,t2),e(t2,pme),e(pme,pSo),e(t2,_So),e(t2,kG),e(kG,uSo),e(t2,bSo),e(N,vSo),e(N,a2),e(a2,_me),e(_me,FSo),e(a2,TSo),e(a2,SG),e(SG,MSo),e(a2,ESo),e(N,CSo),e(N,n2),e(n2,ume),e(ume,wSo),e(n2,ASo),e(n2,RG),e(RG,ySo),e(n2,LSo),e(N,xSo),e(N,s2),e(s2,bme),e(bme,$So),e(s2,kSo),e(s2,PG),e(PG,SSo),e(s2,RSo),e(N,PSo),e(N,l2),e(l2,vme),e(vme,BSo),e(l2,ISo),e(l2,BG),e(BG,NSo),e(l2,qSo),e(N,jSo),e(N,i2),e(i2,Fme),e(Fme,DSo),e(i2,GSo),e(i2,IG),e(IG,OSo),e(i2,VSo),e(N,XSo),e(N,d2),e(d2,Tme),e(Tme,zSo),e(d2,WSo),e(d2,NG),e(NG,QSo),e(d2,HSo),e(N,USo),e(N,c2),e(c2,Mme),e(Mme,JSo),e(c2,YSo),e(c2,qG),e(qG,KSo),e(c2,ZSo),e(N,eRo),e(N,f2),e(f2,Eme),e(Eme,oRo),e(f2,rRo),e(f2,jG),e(jG,tRo),e(f2,aRo),e(N,nRo),e(N,m2),e(m2,Cme),e(Cme,sRo),e(m2,lRo),e(m2,DG),e(DG,iRo),e(m2,dRo),e(N,cRo),e(N,g2),e(g2,wme),e(wme,fRo),e(g2,mRo),e(g2,GG),e(GG,gRo),e(g2,hRo),e(N,pRo),e(N,h2),e(h2,Ame),e(Ame,_Ro),e(h2,uRo),e(h2,OG),e(OG,bRo),e(h2,vRo),e(N,FRo),e(N,p2),e(p2,yme),e(yme,TRo),e(p2,MRo),e(p2,VG),e(VG,ERo),e(p2,CRo),e(N,wRo),e(N,_2),e(_2,Lme),e(Lme,ARo),e(_2,yRo),e(_2,XG),e(XG,LRo),e(_2,xRo),e(N,$Ro),e(N,u2),e(u2,xme),e(xme,kRo),e(u2,SRo),e(u2,zG),e(zG,RRo),e(u2,PRo),e(N,BRo),e(N,b2),e(b2,$me),e($me,IRo),e(b2,NRo),e(b2,WG),e(WG,qRo),e(b2,jRo),e(N,DRo),e(N,v2),e(v2,kme),e(kme,GRo),e(v2,ORo),e(v2,QG),e(QG,VRo),e(v2,XRo),e(N,zRo),e(N,F2),e(F2,Sme),e(Sme,WRo),e(F2,QRo),e(F2,HG),e(HG,HRo),e(F2,URo),e(N,JRo),e(N,T2),e(T2,Rme),e(Rme,YRo),e(T2,KRo),e(T2,UG),e(UG,ZRo),e(T2,ePo),e(N,oPo),e(N,M2),e(M2,Pme),e(Pme,rPo),e(M2,tPo),e(M2,JG),e(JG,aPo),e(M2,nPo),e(N,sPo),e(N,E2),e(E2,Bme),e(Bme,lPo),e(E2,iPo),e(E2,YG),e(YG,dPo),e(E2,cPo),e(N,fPo),e(N,C2),e(C2,Ime),e(Ime,mPo),e(C2,gPo),e(C2,KG),e(KG,hPo),e(C2,pPo),e(N,_Po),e(N,w2),e(w2,Nme),e(Nme,uPo),e(w2,bPo),e(w2,ZG),e(ZG,vPo),e(w2,FPo),e(N,TPo),e(N,A2),e(A2,qme),e(qme,MPo),e(A2,EPo),e(A2,eO),e(eO,CPo),e(A2,wPo),e(N,APo),e(N,y2),e(y2,jme),e(jme,yPo),e(y2,LPo),e(y2,oO),e(oO,xPo),e(y2,$Po),e(N,kPo),e(N,L2),e(L2,Dme),e(Dme,SPo),e(L2,RPo),e(L2,rO),e(rO,PPo),e(L2,BPo),e(N,IPo),e(N,x2),e(x2,Gme),e(Gme,NPo),e(x2,qPo),e(x2,tO),e(tO,jPo),e(x2,DPo),e(N,GPo),e(N,$2),e($2,Ome),e(Ome,OPo),e($2,VPo),e($2,aO),e(aO,XPo),e($2,zPo),e(N,WPo),e(N,k2),e(k2,Vme),e(Vme,QPo),e(k2,HPo),e(k2,nO),e(nO,UPo),e(k2,JPo),e(N,YPo),e(N,S2),e(S2,Xme),e(Xme,KPo),e(S2,ZPo),e(S2,sO),e(sO,eBo),e(S2,oBo),e(N,rBo),e(N,R2),e(R2,zme),e(zme,tBo),e(R2,aBo),e(R2,lO),e(lO,nBo),e(R2,sBo),e(N,lBo),e(N,P2),e(P2,Wme),e(Wme,iBo),e(P2,dBo),e(P2,iO),e(iO,cBo),e(P2,fBo),e(N,mBo),e(N,B2),e(B2,Qme),e(Qme,gBo),e(B2,hBo),e(B2,dO),e(dO,pBo),e(B2,_Bo),e(N,uBo),e(N,I2),e(I2,Hme),e(Hme,bBo),e(I2,vBo),e(I2,cO),e(cO,FBo),e(I2,TBo),e(N,MBo),e(N,N2),e(N2,Ume),e(Ume,EBo),e(N2,CBo),e(N2,fO),e(fO,wBo),e(N2,ABo),e(N,yBo),e(N,q2),e(q2,Jme),e(Jme,LBo),e(q2,xBo),e(q2,mO),e(mO,$Bo),e(q2,kBo),e(N,SBo),e(N,j2),e(j2,Yme),e(Yme,RBo),e(j2,PBo),e(j2,gO),e(gO,BBo),e(j2,IBo),e(N,NBo),e(N,D2),e(D2,Kme),e(Kme,qBo),e(D2,jBo),e(D2,hO),e(hO,DBo),e(D2,GBo),e(oo,OBo),e(oo,G2),e(G2,VBo),e(G2,Zme),e(Zme,XBo),e(G2,zBo),e(G2,ege),e(ege,WBo),e(oo,QBo),M(O2,oo,null),b(f,Hqe,u),b(f,Xi,u),e(Xi,V2),e(V2,oge),M(By,oge,null),e(Xi,HBo),e(Xi,rge),e(rge,UBo),b(f,Uqe,u),b(f,Po,u),M(Iy,Po,null),e(Po,JBo),e(Po,zi),e(zi,YBo),e(zi,pO),e(pO,KBo),e(zi,ZBo),e(zi,_O),e(_O,eIo),e(zi,oIo),e(Po,rIo),e(Po,Ny),e(Ny,tIo),e(Ny,tge),e(tge,aIo),e(Ny,nIo),e(Po,sIo),e(Po,dt),M(qy,dt,null),e(dt,lIo),e(dt,age),e(age,iIo),e(dt,dIo),e(dt,Wi),e(Wi,cIo),e(Wi,nge),e(nge,fIo),e(Wi,mIo),e(Wi,uO),e(uO,gIo),e(Wi,hIo),e(dt,pIo),M(X2,dt,null),e(Po,_Io),e(Po,ro),M(jy,ro,null),e(ro,uIo),e(ro,sge),e(sge,bIo),e(ro,vIo),e(ro,Pa),e(Pa,FIo),e(Pa,lge),e(lge,TIo),e(Pa,MIo),e(Pa,ige),e(ige,EIo),e(Pa,CIo),e(Pa,dge),e(dge,wIo),e(Pa,AIo),e(ro,yIo),e(ro,K),e(K,z2),e(z2,cge),e(cge,LIo),e(z2,xIo),e(z2,bO),e(bO,$Io),e(z2,kIo),e(K,SIo),e(K,W2),e(W2,fge),e(fge,RIo),e(W2,PIo),e(W2,vO),e(vO,BIo),e(W2,IIo),e(K,NIo),e(K,Q2),e(Q2,mge),e(mge,qIo),e(Q2,jIo),e(Q2,FO),e(FO,DIo),e(Q2,GIo),e(K,OIo),e(K,H2),e(H2,gge),e(gge,VIo),e(H2,XIo),e(H2,TO),e(TO,zIo),e(H2,WIo),e(K,QIo),e(K,U2),e(U2,hge),e(hge,HIo),e(U2,UIo),e(U2,MO),e(MO,JIo),e(U2,YIo),e(K,KIo),e(K,J2),e(J2,pge),e(pge,ZIo),e(J2,eNo),e(J2,EO),e(EO,oNo),e(J2,rNo),e(K,tNo),e(K,Y2),e(Y2,_ge),e(_ge,aNo),e(Y2,nNo),e(Y2,CO),e(CO,sNo),e(Y2,lNo),e(K,iNo),e(K,K2),e(K2,uge),e(uge,dNo),e(K2,cNo),e(K2,wO),e(wO,fNo),e(K2,mNo),e(K,gNo),e(K,Z2),e(Z2,bge),e(bge,hNo),e(Z2,pNo),e(Z2,AO),e(AO,_No),e(Z2,uNo),e(K,bNo),e(K,e4),e(e4,vge),e(vge,vNo),e(e4,FNo),e(e4,yO),e(yO,TNo),e(e4,MNo),e(K,ENo),e(K,o4),e(o4,Fge),e(Fge,CNo),e(o4,wNo),e(o4,LO),e(LO,ANo),e(o4,yNo),e(K,LNo),e(K,r4),e(r4,Tge),e(Tge,xNo),e(r4,$No),e(r4,xO),e(xO,kNo),e(r4,SNo),e(K,RNo),e(K,t4),e(t4,Mge),e(Mge,PNo),e(t4,BNo),e(t4,$O),e($O,INo),e(t4,NNo),e(K,qNo),e(K,a4),e(a4,Ege),e(Ege,jNo),e(a4,DNo),e(a4,kO),e(kO,GNo),e(a4,ONo),e(K,VNo),e(K,n4),e(n4,Cge),e(Cge,XNo),e(n4,zNo),e(n4,SO),e(SO,WNo),e(n4,QNo),e(K,HNo),e(K,s4),e(s4,wge),e(wge,UNo),e(s4,JNo),e(s4,RO),e(RO,YNo),e(s4,KNo),e(K,ZNo),e(K,l4),e(l4,Age),e(Age,eqo),e(l4,oqo),e(l4,PO),e(PO,rqo),e(l4,tqo),e(K,aqo),e(K,i4),e(i4,yge),e(yge,nqo),e(i4,sqo),e(i4,BO),e(BO,lqo),e(i4,iqo),e(K,dqo),e(K,d4),e(d4,Lge),e(Lge,cqo),e(d4,fqo),e(d4,IO),e(IO,mqo),e(d4,gqo),e(K,hqo),e(K,c4),e(c4,xge),e(xge,pqo),e(c4,_qo),e(c4,NO),e(NO,uqo),e(c4,bqo),e(K,vqo),e(K,f4),e(f4,$ge),e($ge,Fqo),e(f4,Tqo),e(f4,qO),e(qO,Mqo),e(f4,Eqo),e(K,Cqo),e(K,m4),e(m4,kge),e(kge,wqo),e(m4,Aqo),e(m4,jO),e(jO,yqo),e(m4,Lqo),e(K,xqo),e(K,g4),e(g4,Sge),e(Sge,$qo),e(g4,kqo),e(g4,DO),e(DO,Sqo),e(g4,Rqo),e(K,Pqo),e(K,h4),e(h4,Rge),e(Rge,Bqo),e(h4,Iqo),e(h4,GO),e(GO,Nqo),e(h4,qqo),e(K,jqo),e(K,p4),e(p4,Pge),e(Pge,Dqo),e(p4,Gqo),e(p4,OO),e(OO,Oqo),e(p4,Vqo),e(K,Xqo),e(K,_4),e(_4,Bge),e(Bge,zqo),e(_4,Wqo),e(_4,VO),e(VO,Qqo),e(_4,Hqo),e(K,Uqo),e(K,u4),e(u4,Ige),e(Ige,Jqo),e(u4,Yqo),e(u4,XO),e(XO,Kqo),e(u4,Zqo),e(K,ejo),e(K,b4),e(b4,Nge),e(Nge,ojo),e(b4,rjo),e(b4,zO),e(zO,tjo),e(b4,ajo),e(K,njo),e(K,v4),e(v4,qge),e(qge,sjo),e(v4,ljo),e(v4,WO),e(WO,ijo),e(v4,djo),e(K,cjo),e(K,F4),e(F4,jge),e(jge,fjo),e(F4,mjo),e(F4,QO),e(QO,gjo),e(F4,hjo),e(ro,pjo),e(ro,T4),e(T4,_jo),e(T4,Dge),e(Dge,ujo),e(T4,bjo),e(T4,Gge),e(Gge,vjo),e(ro,Fjo),M(M4,ro,null),b(f,Jqe,u),b(f,Qi,u),e(Qi,E4),e(E4,Oge),M(Dy,Oge,null),e(Qi,Tjo),e(Qi,Vge),e(Vge,Mjo),b(f,Yqe,u),b(f,Bo,u),M(Gy,Bo,null),e(Bo,Ejo),e(Bo,Hi),e(Hi,Cjo),e(Hi,HO),e(HO,wjo),e(Hi,Ajo),e(Hi,UO),e(UO,yjo),e(Hi,Ljo),e(Bo,xjo),e(Bo,Oy),e(Oy,$jo),e(Oy,Xge),e(Xge,kjo),e(Oy,Sjo),e(Bo,Rjo),e(Bo,ct),M(Vy,ct,null),e(ct,Pjo),e(ct,zge),e(zge,Bjo),e(ct,Ijo),e(ct,Ui),e(Ui,Njo),e(Ui,Wge),e(Wge,qjo),e(Ui,jjo),e(Ui,JO),e(JO,Djo),e(Ui,Gjo),e(ct,Ojo),M(C4,ct,null),e(Bo,Vjo),e(Bo,to),M(Xy,to,null),e(to,Xjo),e(to,Qge),e(Qge,zjo),e(to,Wjo),e(to,Ba),e(Ba,Qjo),e(Ba,Hge),e(Hge,Hjo),e(Ba,Ujo),e(Ba,Uge),e(Uge,Jjo),e(Ba,Yjo),e(Ba,Jge),e(Jge,Kjo),e(Ba,Zjo),e(to,eDo),e(to,Yr),e(Yr,w4),e(w4,Yge),e(Yge,oDo),e(w4,rDo),e(w4,YO),e(YO,tDo),e(w4,aDo),e(Yr,nDo),e(Yr,A4),e(A4,Kge),e(Kge,sDo),e(A4,lDo),e(A4,KO),e(KO,iDo),e(A4,dDo),e(Yr,cDo),e(Yr,y4),e(y4,Zge),e(Zge,fDo),e(y4,mDo),e(y4,ZO),e(ZO,gDo),e(y4,hDo),e(Yr,pDo),e(Yr,L4),e(L4,ehe),e(ehe,_Do),e(L4,uDo),e(L4,eV),e(eV,bDo),e(L4,vDo),e(Yr,FDo),e(Yr,x4),e(x4,ohe),e(ohe,TDo),e(x4,MDo),e(x4,oV),e(oV,EDo),e(x4,CDo),e(to,wDo),e(to,$4),e($4,ADo),e($4,rhe),e(rhe,yDo),e($4,LDo),e($4,the),e(the,xDo),e(to,$Do),M(k4,to,null),b(f,Kqe,u),b(f,Ji,u),e(Ji,S4),e(S4,ahe),M(zy,ahe,null),e(Ji,kDo),e(Ji,nhe),e(nhe,SDo),b(f,Zqe,u),b(f,Io,u),M(Wy,Io,null),e(Io,RDo),e(Io,Yi),e(Yi,PDo),e(Yi,rV),e(rV,BDo),e(Yi,IDo),e(Yi,tV),e(tV,NDo),e(Yi,qDo),e(Io,jDo),e(Io,Qy),e(Qy,DDo),e(Qy,she),e(she,GDo),e(Qy,ODo),e(Io,VDo),e(Io,ft),M(Hy,ft,null),e(ft,XDo),e(ft,lhe),e(lhe,zDo),e(ft,WDo),e(ft,Ki),e(Ki,QDo),e(Ki,ihe),e(ihe,HDo),e(Ki,UDo),e(Ki,aV),e(aV,JDo),e(Ki,YDo),e(ft,KDo),M(R4,ft,null),e(Io,ZDo),e(Io,ao),M(Uy,ao,null),e(ao,eGo),e(ao,dhe),e(dhe,oGo),e(ao,rGo),e(ao,Ia),e(Ia,tGo),e(Ia,che),e(che,aGo),e(Ia,nGo),e(Ia,fhe),e(fhe,sGo),e(Ia,lGo),e(Ia,mhe),e(mhe,iGo),e(Ia,dGo),e(ao,cGo),e(ao,H),e(H,P4),e(P4,ghe),e(ghe,fGo),e(P4,mGo),e(P4,nV),e(nV,gGo),e(P4,hGo),e(H,pGo),e(H,B4),e(B4,hhe),e(hhe,_Go),e(B4,uGo),e(B4,sV),e(sV,bGo),e(B4,vGo),e(H,FGo),e(H,I4),e(I4,phe),e(phe,TGo),e(I4,MGo),e(I4,lV),e(lV,EGo),e(I4,CGo),e(H,wGo),e(H,N4),e(N4,_he),e(_he,AGo),e(N4,yGo),e(N4,iV),e(iV,LGo),e(N4,xGo),e(H,$Go),e(H,q4),e(q4,uhe),e(uhe,kGo),e(q4,SGo),e(q4,dV),e(dV,RGo),e(q4,PGo),e(H,BGo),e(H,j4),e(j4,bhe),e(bhe,IGo),e(j4,NGo),e(j4,cV),e(cV,qGo),e(j4,jGo),e(H,DGo),e(H,D4),e(D4,vhe),e(vhe,GGo),e(D4,OGo),e(D4,fV),e(fV,VGo),e(D4,XGo),e(H,zGo),e(H,G4),e(G4,Fhe),e(Fhe,WGo),e(G4,QGo),e(G4,mV),e(mV,HGo),e(G4,UGo),e(H,JGo),e(H,O4),e(O4,The),e(The,YGo),e(O4,KGo),e(O4,gV),e(gV,ZGo),e(O4,eOo),e(H,oOo),e(H,V4),e(V4,Mhe),e(Mhe,rOo),e(V4,tOo),e(V4,hV),e(hV,aOo),e(V4,nOo),e(H,sOo),e(H,X4),e(X4,Ehe),e(Ehe,lOo),e(X4,iOo),e(X4,pV),e(pV,dOo),e(X4,cOo),e(H,fOo),e(H,z4),e(z4,Che),e(Che,mOo),e(z4,gOo),e(z4,_V),e(_V,hOo),e(z4,pOo),e(H,_Oo),e(H,W4),e(W4,whe),e(whe,uOo),e(W4,bOo),e(W4,uV),e(uV,vOo),e(W4,FOo),e(H,TOo),e(H,Q4),e(Q4,Ahe),e(Ahe,MOo),e(Q4,EOo),e(Q4,bV),e(bV,COo),e(Q4,wOo),e(H,AOo),e(H,H4),e(H4,yhe),e(yhe,yOo),e(H4,LOo),e(H4,vV),e(vV,xOo),e(H4,$Oo),e(H,kOo),e(H,U4),e(U4,Lhe),e(Lhe,SOo),e(U4,ROo),e(U4,FV),e(FV,POo),e(U4,BOo),e(H,IOo),e(H,J4),e(J4,xhe),e(xhe,NOo),e(J4,qOo),e(J4,TV),e(TV,jOo),e(J4,DOo),e(H,GOo),e(H,Y4),e(Y4,$he),e($he,OOo),e(Y4,VOo),e(Y4,MV),e(MV,XOo),e(Y4,zOo),e(H,WOo),e(H,K4),e(K4,khe),e(khe,QOo),e(K4,HOo),e(K4,EV),e(EV,UOo),e(K4,JOo),e(H,YOo),e(H,Z4),e(Z4,She),e(She,KOo),e(Z4,ZOo),e(Z4,CV),e(CV,eVo),e(Z4,oVo),e(H,rVo),e(H,ev),e(ev,Rhe),e(Rhe,tVo),e(ev,aVo),e(ev,wV),e(wV,nVo),e(ev,sVo),e(H,lVo),e(H,ov),e(ov,Phe),e(Phe,iVo),e(ov,dVo),e(ov,AV),e(AV,cVo),e(ov,fVo),e(H,mVo),e(H,rv),e(rv,Bhe),e(Bhe,gVo),e(rv,hVo),e(rv,yV),e(yV,pVo),e(rv,_Vo),e(H,uVo),e(H,tv),e(tv,Ihe),e(Ihe,bVo),e(tv,vVo),e(tv,LV),e(LV,FVo),e(tv,TVo),e(H,MVo),e(H,av),e(av,Nhe),e(Nhe,EVo),e(av,CVo),e(av,xV),e(xV,wVo),e(av,AVo),e(H,yVo),e(H,nv),e(nv,qhe),e(qhe,LVo),e(nv,xVo),e(nv,$V),e($V,$Vo),e(nv,kVo),e(H,SVo),e(H,sv),e(sv,jhe),e(jhe,RVo),e(sv,PVo),e(sv,kV),e(kV,BVo),e(sv,IVo),e(H,NVo),e(H,lv),e(lv,Dhe),e(Dhe,qVo),e(lv,jVo),e(lv,SV),e(SV,DVo),e(lv,GVo),e(H,OVo),e(H,iv),e(iv,Ghe),e(Ghe,VVo),e(iv,XVo),e(iv,RV),e(RV,zVo),e(iv,WVo),e(H,QVo),e(H,dv),e(dv,Ohe),e(Ohe,HVo),e(dv,UVo),e(dv,PV),e(PV,JVo),e(dv,YVo),e(H,KVo),e(H,cv),e(cv,Vhe),e(Vhe,ZVo),e(cv,eXo),e(cv,BV),e(BV,oXo),e(cv,rXo),e(H,tXo),e(H,fv),e(fv,Xhe),e(Xhe,aXo),e(fv,nXo),e(fv,IV),e(IV,sXo),e(fv,lXo),e(H,iXo),e(H,mv),e(mv,zhe),e(zhe,dXo),e(mv,cXo),e(mv,NV),e(NV,fXo),e(mv,mXo),e(H,gXo),e(H,gv),e(gv,Whe),e(Whe,hXo),e(gv,pXo),e(gv,qV),e(qV,_Xo),e(gv,uXo),e(ao,bXo),e(ao,hv),e(hv,vXo),e(hv,Qhe),e(Qhe,FXo),e(hv,TXo),e(hv,Hhe),e(Hhe,MXo),e(ao,EXo),M(pv,ao,null),b(f,eje,u),b(f,Zi,u),e(Zi,_v),e(_v,Uhe),M(Jy,Uhe,null),e(Zi,CXo),e(Zi,Jhe),e(Jhe,wXo),b(f,oje,u),b(f,No,u),M(Yy,No,null),e(No,AXo),e(No,ed),e(ed,yXo),e(ed,jV),e(jV,LXo),e(ed,xXo),e(ed,DV),e(DV,$Xo),e(ed,kXo),e(No,SXo),e(No,Ky),e(Ky,RXo),e(Ky,Yhe),e(Yhe,PXo),e(Ky,BXo),e(No,IXo),e(No,mt),M(Zy,mt,null),e(mt,NXo),e(mt,Khe),e(Khe,qXo),e(mt,jXo),e(mt,od),e(od,DXo),e(od,Zhe),e(Zhe,GXo),e(od,OXo),e(od,GV),e(GV,VXo),e(od,XXo),e(mt,zXo),M(uv,mt,null),e(No,WXo),e(No,no),M(eL,no,null),e(no,QXo),e(no,epe),e(epe,HXo),e(no,UXo),e(no,Na),e(Na,JXo),e(Na,ope),e(ope,YXo),e(Na,KXo),e(Na,rpe),e(rpe,ZXo),e(Na,ezo),e(Na,tpe),e(tpe,ozo),e(Na,rzo),e(no,tzo),e(no,V),e(V,bv),e(bv,ape),e(ape,azo),e(bv,nzo),e(bv,OV),e(OV,szo),e(bv,lzo),e(V,izo),e(V,vv),e(vv,npe),e(npe,dzo),e(vv,czo),e(vv,VV),e(VV,fzo),e(vv,mzo),e(V,gzo),e(V,Fv),e(Fv,spe),e(spe,hzo),e(Fv,pzo),e(Fv,XV),e(XV,_zo),e(Fv,uzo),e(V,bzo),e(V,Tv),e(Tv,lpe),e(lpe,vzo),e(Tv,Fzo),e(Tv,zV),e(zV,Tzo),e(Tv,Mzo),e(V,Ezo),e(V,Mv),e(Mv,ipe),e(ipe,Czo),e(Mv,wzo),e(Mv,WV),e(WV,Azo),e(Mv,yzo),e(V,Lzo),e(V,Ev),e(Ev,dpe),e(dpe,xzo),e(Ev,$zo),e(Ev,QV),e(QV,kzo),e(Ev,Szo),e(V,Rzo),e(V,Cv),e(Cv,cpe),e(cpe,Pzo),e(Cv,Bzo),e(Cv,HV),e(HV,Izo),e(Cv,Nzo),e(V,qzo),e(V,wv),e(wv,fpe),e(fpe,jzo),e(wv,Dzo),e(wv,UV),e(UV,Gzo),e(wv,Ozo),e(V,Vzo),e(V,Av),e(Av,mpe),e(mpe,Xzo),e(Av,zzo),e(Av,JV),e(JV,Wzo),e(Av,Qzo),e(V,Hzo),e(V,yv),e(yv,gpe),e(gpe,Uzo),e(yv,Jzo),e(yv,YV),e(YV,Yzo),e(yv,Kzo),e(V,Zzo),e(V,Lv),e(Lv,hpe),e(hpe,eWo),e(Lv,oWo),e(Lv,KV),e(KV,rWo),e(Lv,tWo),e(V,aWo),e(V,xv),e(xv,ppe),e(ppe,nWo),e(xv,sWo),e(xv,ZV),e(ZV,lWo),e(xv,iWo),e(V,dWo),e(V,$v),e($v,_pe),e(_pe,cWo),e($v,fWo),e($v,eX),e(eX,mWo),e($v,gWo),e(V,hWo),e(V,kv),e(kv,upe),e(upe,pWo),e(kv,_Wo),e(kv,oX),e(oX,uWo),e(kv,bWo),e(V,vWo),e(V,Sv),e(Sv,bpe),e(bpe,FWo),e(Sv,TWo),e(Sv,rX),e(rX,MWo),e(Sv,EWo),e(V,CWo),e(V,Rv),e(Rv,vpe),e(vpe,wWo),e(Rv,AWo),e(Rv,tX),e(tX,yWo),e(Rv,LWo),e(V,xWo),e(V,Pv),e(Pv,Fpe),e(Fpe,$Wo),e(Pv,kWo),e(Pv,aX),e(aX,SWo),e(Pv,RWo),e(V,PWo),e(V,Bv),e(Bv,Tpe),e(Tpe,BWo),e(Bv,IWo),e(Bv,nX),e(nX,NWo),e(Bv,qWo),e(V,jWo),e(V,Iv),e(Iv,Mpe),e(Mpe,DWo),e(Iv,GWo),e(Iv,sX),e(sX,OWo),e(Iv,VWo),e(V,XWo),e(V,Nv),e(Nv,Epe),e(Epe,zWo),e(Nv,WWo),e(Nv,lX),e(lX,QWo),e(Nv,HWo),e(V,UWo),e(V,qv),e(qv,Cpe),e(Cpe,JWo),e(qv,YWo),e(qv,iX),e(iX,KWo),e(qv,ZWo),e(V,eQo),e(V,jv),e(jv,wpe),e(wpe,oQo),e(jv,rQo),e(jv,dX),e(dX,tQo),e(jv,aQo),e(V,nQo),e(V,Dv),e(Dv,Ape),e(Ape,sQo),e(Dv,lQo),e(Dv,cX),e(cX,iQo),e(Dv,dQo),e(V,cQo),e(V,Gv),e(Gv,ype),e(ype,fQo),e(Gv,mQo),e(Gv,fX),e(fX,gQo),e(Gv,hQo),e(V,pQo),e(V,Ov),e(Ov,Lpe),e(Lpe,_Qo),e(Ov,uQo),e(Ov,mX),e(mX,bQo),e(Ov,vQo),e(V,FQo),e(V,Vv),e(Vv,xpe),e(xpe,TQo),e(Vv,MQo),e(Vv,gX),e(gX,EQo),e(Vv,CQo),e(V,wQo),e(V,Xv),e(Xv,$pe),e($pe,AQo),e(Xv,yQo),e(Xv,hX),e(hX,LQo),e(Xv,xQo),e(V,$Qo),e(V,zv),e(zv,kpe),e(kpe,kQo),e(zv,SQo),e(zv,pX),e(pX,RQo),e(zv,PQo),e(V,BQo),e(V,Wv),e(Wv,Spe),e(Spe,IQo),e(Wv,NQo),e(Wv,_X),e(_X,qQo),e(Wv,jQo),e(V,DQo),e(V,Qv),e(Qv,Rpe),e(Rpe,GQo),e(Qv,OQo),e(Qv,uX),e(uX,VQo),e(Qv,XQo),e(V,zQo),e(V,Hv),e(Hv,Ppe),e(Ppe,WQo),e(Hv,QQo),e(Hv,bX),e(bX,HQo),e(Hv,UQo),e(V,JQo),e(V,Uv),e(Uv,Bpe),e(Bpe,YQo),e(Uv,KQo),e(Uv,vX),e(vX,ZQo),e(Uv,eHo),e(V,oHo),e(V,Jv),e(Jv,Ipe),e(Ipe,rHo),e(Jv,tHo),e(Jv,FX),e(FX,aHo),e(Jv,nHo),e(V,sHo),e(V,Yv),e(Yv,Npe),e(Npe,lHo),e(Yv,iHo),e(Yv,TX),e(TX,dHo),e(Yv,cHo),e(V,fHo),e(V,Kv),e(Kv,qpe),e(qpe,mHo),e(Kv,gHo),e(Kv,MX),e(MX,hHo),e(Kv,pHo),e(V,_Ho),e(V,Zv),e(Zv,jpe),e(jpe,uHo),e(Zv,bHo),e(Zv,EX),e(EX,vHo),e(Zv,FHo),e(V,THo),e(V,eF),e(eF,Dpe),e(Dpe,MHo),e(eF,EHo),e(eF,CX),e(CX,CHo),e(eF,wHo),e(V,AHo),e(V,oF),e(oF,Gpe),e(Gpe,yHo),e(oF,LHo),e(oF,wX),e(wX,xHo),e(oF,$Ho),e(V,kHo),e(V,rF),e(rF,Ope),e(Ope,SHo),e(rF,RHo),e(rF,AX),e(AX,PHo),e(rF,BHo),e(V,IHo),e(V,tF),e(tF,Vpe),e(Vpe,NHo),e(tF,qHo),e(tF,yX),e(yX,jHo),e(tF,DHo),e(no,GHo),e(no,aF),e(aF,OHo),e(aF,Xpe),e(Xpe,VHo),e(aF,XHo),e(aF,zpe),e(zpe,zHo),e(no,WHo),M(nF,no,null),b(f,rje,u),b(f,rd,u),e(rd,sF),e(sF,Wpe),M(oL,Wpe,null),e(rd,QHo),e(rd,Qpe),e(Qpe,HHo),b(f,tje,u),b(f,qo,u),M(rL,qo,null),e(qo,UHo),e(qo,td),e(td,JHo),e(td,LX),e(LX,YHo),e(td,KHo),e(td,xX),e(xX,ZHo),e(td,eUo),e(qo,oUo),e(qo,tL),e(tL,rUo),e(tL,Hpe),e(Hpe,tUo),e(tL,aUo),e(qo,nUo),e(qo,gt),M(aL,gt,null),e(gt,sUo),e(gt,Upe),e(Upe,lUo),e(gt,iUo),e(gt,ad),e(ad,dUo),e(ad,Jpe),e(Jpe,cUo),e(ad,fUo),e(ad,$X),e($X,mUo),e(ad,gUo),e(gt,hUo),M(lF,gt,null),e(qo,pUo),e(qo,so),M(nL,so,null),e(so,_Uo),e(so,Ype),e(Ype,uUo),e(so,bUo),e(so,qa),e(qa,vUo),e(qa,Kpe),e(Kpe,FUo),e(qa,TUo),e(qa,Zpe),e(Zpe,MUo),e(qa,EUo),e(qa,e_e),e(e_e,CUo),e(qa,wUo),e(so,AUo),e(so,o_e),e(o_e,iF),e(iF,r_e),e(r_e,yUo),e(iF,LUo),e(iF,kX),e(kX,xUo),e(iF,$Uo),e(so,kUo),e(so,dF),e(dF,SUo),e(dF,t_e),e(t_e,RUo),e(dF,PUo),e(dF,a_e),e(a_e,BUo),e(so,IUo),M(cF,so,null),b(f,aje,u),b(f,nd,u),e(nd,fF),e(fF,n_e),M(sL,n_e,null),e(nd,NUo),e(nd,s_e),e(s_e,qUo),b(f,nje,u),b(f,jo,u),M(lL,jo,null),e(jo,jUo),e(jo,sd),e(sd,DUo),e(sd,SX),e(SX,GUo),e(sd,OUo),e(sd,RX),e(RX,VUo),e(sd,XUo),e(jo,zUo),e(jo,iL),e(iL,WUo),e(iL,l_e),e(l_e,QUo),e(iL,HUo),e(jo,UUo),e(jo,ht),M(dL,ht,null),e(ht,JUo),e(ht,i_e),e(i_e,YUo),e(ht,KUo),e(ht,ld),e(ld,ZUo),e(ld,d_e),e(d_e,eJo),e(ld,oJo),e(ld,PX),e(PX,rJo),e(ld,tJo),e(ht,aJo),M(mF,ht,null),e(jo,nJo),e(jo,lo),M(cL,lo,null),e(lo,sJo),e(lo,c_e),e(c_e,lJo),e(lo,iJo),e(lo,ja),e(ja,dJo),e(ja,f_e),e(f_e,cJo),e(ja,fJo),e(ja,m_e),e(m_e,mJo),e(ja,gJo),e(ja,g_e),e(g_e,hJo),e(ja,pJo),e(lo,_Jo),e(lo,Fe),e(Fe,gF),e(gF,h_e),e(h_e,uJo),e(gF,bJo),e(gF,BX),e(BX,vJo),e(gF,FJo),e(Fe,TJo),e(Fe,hF),e(hF,p_e),e(p_e,MJo),e(hF,EJo),e(hF,IX),e(IX,CJo),e(hF,wJo),e(Fe,AJo),e(Fe,pF),e(pF,__e),e(__e,yJo),e(pF,LJo),e(pF,NX),e(NX,xJo),e(pF,$Jo),e(Fe,kJo),e(Fe,_F),e(_F,u_e),e(u_e,SJo),e(_F,RJo),e(_F,qX),e(qX,PJo),e(_F,BJo),e(Fe,IJo),e(Fe,Is),e(Is,b_e),e(b_e,NJo),e(Is,qJo),e(Is,jX),e(jX,jJo),e(Is,DJo),e(Is,DX),e(DX,GJo),e(Is,OJo),e(Fe,VJo),e(Fe,uF),e(uF,v_e),e(v_e,XJo),e(uF,zJo),e(uF,GX),e(GX,WJo),e(uF,QJo),e(Fe,HJo),e(Fe,pt),e(pt,F_e),e(F_e,UJo),e(pt,JJo),e(pt,OX),e(OX,YJo),e(pt,KJo),e(pt,VX),e(VX,ZJo),e(pt,eYo),e(pt,XX),e(XX,oYo),e(pt,rYo),e(Fe,tYo),e(Fe,bF),e(bF,T_e),e(T_e,aYo),e(bF,nYo),e(bF,zX),e(zX,sYo),e(bF,lYo),e(Fe,iYo),e(Fe,vF),e(vF,M_e),e(M_e,dYo),e(vF,cYo),e(vF,WX),e(WX,fYo),e(vF,mYo),e(Fe,gYo),e(Fe,FF),e(FF,E_e),e(E_e,hYo),e(FF,pYo),e(FF,QX),e(QX,_Yo),e(FF,uYo),e(Fe,bYo),e(Fe,TF),e(TF,C_e),e(C_e,vYo),e(TF,FYo),e(TF,HX),e(HX,TYo),e(TF,MYo),e(Fe,EYo),e(Fe,MF),e(MF,w_e),e(w_e,CYo),e(MF,wYo),e(MF,UX),e(UX,AYo),e(MF,yYo),e(Fe,LYo),e(Fe,EF),e(EF,A_e),e(A_e,xYo),e(EF,$Yo),e(EF,JX),e(JX,kYo),e(EF,SYo),e(Fe,RYo),e(Fe,CF),e(CF,y_e),e(y_e,PYo),e(CF,BYo),e(CF,YX),e(YX,IYo),e(CF,NYo),e(lo,qYo),e(lo,wF),e(wF,jYo),e(wF,L_e),e(L_e,DYo),e(wF,GYo),e(wF,x_e),e(x_e,OYo),e(lo,VYo),M(AF,lo,null),b(f,sje,u),b(f,id,u),e(id,yF),e(yF,$_e),M(fL,$_e,null),e(id,XYo),e(id,k_e),e(k_e,zYo),b(f,lje,u),b(f,Do,u),M(mL,Do,null),e(Do,WYo),e(Do,dd),e(dd,QYo),e(dd,KX),e(KX,HYo),e(dd,UYo),e(dd,ZX),e(ZX,JYo),e(dd,YYo),e(Do,KYo),e(Do,gL),e(gL,ZYo),e(gL,S_e),e(S_e,eKo),e(gL,oKo),e(Do,rKo),e(Do,_t),M(hL,_t,null),e(_t,tKo),e(_t,R_e),e(R_e,aKo),e(_t,nKo),e(_t,cd),e(cd,sKo),e(cd,P_e),e(P_e,lKo),e(cd,iKo),e(cd,ez),e(ez,dKo),e(cd,cKo),e(_t,fKo),M(LF,_t,null),e(Do,mKo),e(Do,io),M(pL,io,null),e(io,gKo),e(io,B_e),e(B_e,hKo),e(io,pKo),e(io,Da),e(Da,_Ko),e(Da,I_e),e(I_e,uKo),e(Da,bKo),e(Da,N_e),e(N_e,vKo),e(Da,FKo),e(Da,q_e),e(q_e,TKo),e(Da,MKo),e(io,EKo),e(io,j_e),e(j_e,xF),e(xF,D_e),e(D_e,CKo),e(xF,wKo),e(xF,oz),e(oz,AKo),e(xF,yKo),e(io,LKo),e(io,$F),e($F,xKo),e($F,G_e),e(G_e,$Ko),e($F,kKo),e($F,O_e),e(O_e,SKo),e(io,RKo),M(kF,io,null),b(f,ije,u),b(f,fd,u),e(fd,SF),e(SF,V_e),M(_L,V_e,null),e(fd,PKo),e(fd,X_e),e(X_e,BKo),b(f,dje,u),b(f,Go,u),M(uL,Go,null),e(Go,IKo),e(Go,md),e(md,NKo),e(md,rz),e(rz,qKo),e(md,jKo),e(md,tz),e(tz,DKo),e(md,GKo),e(Go,OKo),e(Go,bL),e(bL,VKo),e(bL,z_e),e(z_e,XKo),e(bL,zKo),e(Go,WKo),e(Go,ut),M(vL,ut,null),e(ut,QKo),e(ut,W_e),e(W_e,HKo),e(ut,UKo),e(ut,gd),e(gd,JKo),e(gd,Q_e),e(Q_e,YKo),e(gd,KKo),e(gd,az),e(az,ZKo),e(gd,eZo),e(ut,oZo),M(RF,ut,null),e(Go,rZo),e(Go,co),M(FL,co,null),e(co,tZo),e(co,H_e),e(H_e,aZo),e(co,nZo),e(co,Ga),e(Ga,sZo),e(Ga,U_e),e(U_e,lZo),e(Ga,iZo),e(Ga,J_e),e(J_e,dZo),e(Ga,cZo),e(Ga,Y_e),e(Y_e,fZo),e(Ga,mZo),e(co,gZo),e(co,ke),e(ke,PF),e(PF,K_e),e(K_e,hZo),e(PF,pZo),e(PF,nz),e(nz,_Zo),e(PF,uZo),e(ke,bZo),e(ke,BF),e(BF,Z_e),e(Z_e,vZo),e(BF,FZo),e(BF,sz),e(sz,TZo),e(BF,MZo),e(ke,EZo),e(ke,IF),e(IF,eue),e(eue,CZo),e(IF,wZo),e(IF,lz),e(lz,AZo),e(IF,yZo),e(ke,LZo),e(ke,NF),e(NF,oue),e(oue,xZo),e(NF,$Zo),e(NF,iz),e(iz,kZo),e(NF,SZo),e(ke,RZo),e(ke,qF),e(qF,rue),e(rue,PZo),e(qF,BZo),e(qF,dz),e(dz,IZo),e(qF,NZo),e(ke,qZo),e(ke,jF),e(jF,tue),e(tue,jZo),e(jF,DZo),e(jF,cz),e(cz,GZo),e(jF,OZo),e(ke,VZo),e(ke,DF),e(DF,aue),e(aue,XZo),e(DF,zZo),e(DF,fz),e(fz,WZo),e(DF,QZo),e(ke,HZo),e(ke,GF),e(GF,nue),e(nue,UZo),e(GF,JZo),e(GF,mz),e(mz,YZo),e(GF,KZo),e(ke,ZZo),e(ke,OF),e(OF,sue),e(sue,eer),e(OF,oer),e(OF,gz),e(gz,rer),e(OF,ter),e(co,aer),e(co,VF),e(VF,ner),e(VF,lue),e(lue,ser),e(VF,ler),e(VF,iue),e(iue,ier),e(co,der),M(XF,co,null),b(f,cje,u),b(f,hd,u),e(hd,zF),e(zF,due),M(TL,due,null),e(hd,cer),e(hd,cue),e(cue,fer),b(f,fje,u),b(f,Oo,u),M(ML,Oo,null),e(Oo,mer),e(Oo,pd),e(pd,ger),e(pd,hz),e(hz,her),e(pd,per),e(pd,pz),e(pz,_er),e(pd,uer),e(Oo,ber),e(Oo,EL),e(EL,ver),e(EL,fue),e(fue,Fer),e(EL,Ter),e(Oo,Mer),e(Oo,bt),M(CL,bt,null),e(bt,Eer),e(bt,mue),e(mue,Cer),e(bt,wer),e(bt,_d),e(_d,Aer),e(_d,gue),e(gue,yer),e(_d,Ler),e(_d,_z),e(_z,xer),e(_d,$er),e(bt,ker),M(WF,bt,null),e(Oo,Ser),e(Oo,fo),M(wL,fo,null),e(fo,Rer),e(fo,hue),e(hue,Per),e(fo,Ber),e(fo,Oa),e(Oa,Ier),e(Oa,pue),e(pue,Ner),e(Oa,qer),e(Oa,_ue),e(_ue,jer),e(Oa,Der),e(Oa,uue),e(uue,Ger),e(Oa,Oer),e(fo,Ver),e(fo,Kr),e(Kr,QF),e(QF,bue),e(bue,Xer),e(QF,zer),e(QF,uz),e(uz,Wer),e(QF,Qer),e(Kr,Her),e(Kr,HF),e(HF,vue),e(vue,Uer),e(HF,Jer),e(HF,bz),e(bz,Yer),e(HF,Ker),e(Kr,Zer),e(Kr,UF),e(UF,Fue),e(Fue,eor),e(UF,oor),e(UF,vz),e(vz,ror),e(UF,tor),e(Kr,aor),e(Kr,JF),e(JF,Tue),e(Tue,nor),e(JF,sor),e(JF,Fz),e(Fz,lor),e(JF,ior),e(Kr,dor),e(Kr,YF),e(YF,Mue),e(Mue,cor),e(YF,mor),e(YF,Tz),e(Tz,gor),e(YF,hor),e(fo,por),e(fo,KF),e(KF,_or),e(KF,Eue),e(Eue,uor),e(KF,bor),e(KF,Cue),e(Cue,vor),e(fo,For),M(ZF,fo,null),b(f,mje,u),b(f,ud,u),e(ud,e6),e(e6,wue),M(AL,wue,null),e(ud,Tor),e(ud,Aue),e(Aue,Mor),b(f,gje,u),b(f,Vo,u),M(yL,Vo,null),e(Vo,Eor),e(Vo,bd),e(bd,Cor),e(bd,Mz),e(Mz,wor),e(bd,Aor),e(bd,Ez),e(Ez,yor),e(bd,Lor),e(Vo,xor),e(Vo,LL),e(LL,$or),e(LL,yue),e(yue,kor),e(LL,Sor),e(Vo,Ror),e(Vo,vt),M(xL,vt,null),e(vt,Por),e(vt,Lue),e(Lue,Bor),e(vt,Ior),e(vt,vd),e(vd,Nor),e(vd,xue),e(xue,qor),e(vd,jor),e(vd,Cz),e(Cz,Dor),e(vd,Gor),e(vt,Oor),M(o6,vt,null),e(Vo,Vor),e(Vo,mo),M($L,mo,null),e(mo,Xor),e(mo,$ue),e($ue,zor),e(mo,Wor),e(mo,Va),e(Va,Qor),e(Va,kue),e(kue,Hor),e(Va,Uor),e(Va,Sue),e(Sue,Jor),e(Va,Yor),e(Va,Rue),e(Rue,Kor),e(Va,Zor),e(mo,err),e(mo,Se),e(Se,r6),e(r6,Pue),e(Pue,orr),e(r6,rrr),e(r6,wz),e(wz,trr),e(r6,arr),e(Se,nrr),e(Se,t6),e(t6,Bue),e(Bue,srr),e(t6,lrr),e(t6,Az),e(Az,irr),e(t6,drr),e(Se,crr),e(Se,a6),e(a6,Iue),e(Iue,frr),e(a6,mrr),e(a6,yz),e(yz,grr),e(a6,hrr),e(Se,prr),e(Se,n6),e(n6,Nue),e(Nue,_rr),e(n6,urr),e(n6,Lz),e(Lz,brr),e(n6,vrr),e(Se,Frr),e(Se,s6),e(s6,que),e(que,Trr),e(s6,Mrr),e(s6,xz),e(xz,Err),e(s6,Crr),e(Se,wrr),e(Se,l6),e(l6,jue),e(jue,Arr),e(l6,yrr),e(l6,$z),e($z,Lrr),e(l6,xrr),e(Se,$rr),e(Se,i6),e(i6,Due),e(Due,krr),e(i6,Srr),e(i6,kz),e(kz,Rrr),e(i6,Prr),e(Se,Brr),e(Se,d6),e(d6,Gue),e(Gue,Irr),e(d6,Nrr),e(d6,Sz),e(Sz,qrr),e(d6,jrr),e(Se,Drr),e(Se,c6),e(c6,Oue),e(Oue,Grr),e(c6,Orr),e(c6,Rz),e(Rz,Vrr),e(c6,Xrr),e(mo,zrr),e(mo,f6),e(f6,Wrr),e(f6,Vue),e(Vue,Qrr),e(f6,Hrr),e(f6,Xue),e(Xue,Urr),e(mo,Jrr),M(m6,mo,null),b(f,hje,u),b(f,Fd,u),e(Fd,g6),e(g6,zue),M(kL,zue,null),e(Fd,Yrr),e(Fd,Wue),e(Wue,Krr),b(f,pje,u),b(f,Xo,u),M(SL,Xo,null),e(Xo,Zrr),e(Xo,Td),e(Td,etr),e(Td,Pz),e(Pz,otr),e(Td,rtr),e(Td,Bz),e(Bz,ttr),e(Td,atr),e(Xo,ntr),e(Xo,RL),e(RL,str),e(RL,Que),e(Que,ltr),e(RL,itr),e(Xo,dtr),e(Xo,Ft),M(PL,Ft,null),e(Ft,ctr),e(Ft,Hue),e(Hue,ftr),e(Ft,mtr),e(Ft,Md),e(Md,gtr),e(Md,Uue),e(Uue,htr),e(Md,ptr),e(Md,Iz),e(Iz,_tr),e(Md,utr),e(Ft,btr),M(h6,Ft,null),e(Xo,vtr),e(Xo,go),M(BL,go,null),e(go,Ftr),e(go,Jue),e(Jue,Ttr),e(go,Mtr),e(go,Xa),e(Xa,Etr),e(Xa,Yue),e(Yue,Ctr),e(Xa,wtr),e(Xa,Kue),e(Kue,Atr),e(Xa,ytr),e(Xa,Zue),e(Zue,Ltr),e(Xa,xtr),e(go,$tr),e(go,IL),e(IL,p6),e(p6,e1e),e(e1e,ktr),e(p6,Str),e(p6,Nz),e(Nz,Rtr),e(p6,Ptr),e(IL,Btr),e(IL,_6),e(_6,o1e),e(o1e,Itr),e(_6,Ntr),e(_6,qz),e(qz,qtr),e(_6,jtr),e(go,Dtr),e(go,u6),e(u6,Gtr),e(u6,r1e),e(r1e,Otr),e(u6,Vtr),e(u6,t1e),e(t1e,Xtr),e(go,ztr),M(b6,go,null),b(f,_je,u),b(f,Ed,u),e(Ed,v6),e(v6,a1e),M(NL,a1e,null),e(Ed,Wtr),e(Ed,n1e),e(n1e,Qtr),b(f,uje,u),b(f,zo,u),M(qL,zo,null),e(zo,Htr),e(zo,Cd),e(Cd,Utr),e(Cd,jz),e(jz,Jtr),e(Cd,Ytr),e(Cd,Dz),e(Dz,Ktr),e(Cd,Ztr),e(zo,ear),e(zo,jL),e(jL,oar),e(jL,s1e),e(s1e,rar),e(jL,tar),e(zo,aar),e(zo,Tt),M(DL,Tt,null),e(Tt,nar),e(Tt,l1e),e(l1e,sar),e(Tt,lar),e(Tt,wd),e(wd,iar),e(wd,i1e),e(i1e,dar),e(wd,car),e(wd,Gz),e(Gz,far),e(wd,mar),e(Tt,gar),M(F6,Tt,null),e(zo,har),e(zo,ho),M(GL,ho,null),e(ho,par),e(ho,d1e),e(d1e,_ar),e(ho,uar),e(ho,za),e(za,bar),e(za,c1e),e(c1e,Far),e(za,Tar),e(za,f1e),e(f1e,Mar),e(za,Ear),e(za,m1e),e(m1e,Car),e(za,war),e(ho,Aar),e(ho,Zr),e(Zr,T6),e(T6,g1e),e(g1e,yar),e(T6,Lar),e(T6,Oz),e(Oz,xar),e(T6,$ar),e(Zr,kar),e(Zr,M6),e(M6,h1e),e(h1e,Sar),e(M6,Rar),e(M6,Vz),e(Vz,Par),e(M6,Bar),e(Zr,Iar),e(Zr,E6),e(E6,p1e),e(p1e,Nar),e(E6,qar),e(E6,Xz),e(Xz,jar),e(E6,Dar),e(Zr,Gar),e(Zr,C6),e(C6,_1e),e(_1e,Oar),e(C6,Var),e(C6,zz),e(zz,Xar),e(C6,zar),e(Zr,War),e(Zr,w6),e(w6,u1e),e(u1e,Qar),e(w6,Har),e(w6,Wz),e(Wz,Uar),e(w6,Jar),e(ho,Yar),e(ho,A6),e(A6,Kar),e(A6,b1e),e(b1e,Zar),e(A6,enr),e(A6,v1e),e(v1e,onr),e(ho,rnr),M(y6,ho,null),b(f,bje,u),b(f,Ad,u),e(Ad,L6),e(L6,F1e),M(OL,F1e,null),e(Ad,tnr),e(Ad,T1e),e(T1e,anr),b(f,vje,u),b(f,Wo,u),M(VL,Wo,null),e(Wo,nnr),e(Wo,yd),e(yd,snr),e(yd,Qz),e(Qz,lnr),e(yd,inr),e(yd,Hz),e(Hz,dnr),e(yd,cnr),e(Wo,fnr),e(Wo,XL),e(XL,mnr),e(XL,M1e),e(M1e,gnr),e(XL,hnr),e(Wo,pnr),e(Wo,Mt),M(zL,Mt,null),e(Mt,_nr),e(Mt,E1e),e(E1e,unr),e(Mt,bnr),e(Mt,Ld),e(Ld,vnr),e(Ld,C1e),e(C1e,Fnr),e(Ld,Tnr),e(Ld,Uz),e(Uz,Mnr),e(Ld,Enr),e(Mt,Cnr),M(x6,Mt,null),e(Wo,wnr),e(Wo,po),M(WL,po,null),e(po,Anr),e(po,w1e),e(w1e,ynr),e(po,Lnr),e(po,Wa),e(Wa,xnr),e(Wa,A1e),e(A1e,$nr),e(Wa,knr),e(Wa,y1e),e(y1e,Snr),e(Wa,Rnr),e(Wa,L1e),e(L1e,Pnr),e(Wa,Bnr),e(po,Inr),e(po,xd),e(xd,$6),e($6,x1e),e(x1e,Nnr),e($6,qnr),e($6,Jz),e(Jz,jnr),e($6,Dnr),e(xd,Gnr),e(xd,k6),e(k6,$1e),e($1e,Onr),e(k6,Vnr),e(k6,Yz),e(Yz,Xnr),e(k6,znr),e(xd,Wnr),e(xd,S6),e(S6,k1e),e(k1e,Qnr),e(S6,Hnr),e(S6,Kz),e(Kz,Unr),e(S6,Jnr),e(po,Ynr),e(po,R6),e(R6,Knr),e(R6,S1e),e(S1e,Znr),e(R6,esr),e(R6,R1e),e(R1e,osr),e(po,rsr),M(P6,po,null),b(f,Fje,u),b(f,$d,u),e($d,B6),e(B6,P1e),M(QL,P1e,null),e($d,tsr),e($d,B1e),e(B1e,asr),b(f,Tje,u),b(f,Qo,u),M(HL,Qo,null),e(Qo,nsr),e(Qo,kd),e(kd,ssr),e(kd,Zz),e(Zz,lsr),e(kd,isr),e(kd,eW),e(eW,dsr),e(kd,csr),e(Qo,fsr),e(Qo,UL),e(UL,msr),e(UL,I1e),e(I1e,gsr),e(UL,hsr),e(Qo,psr),e(Qo,Et),M(JL,Et,null),e(Et,_sr),e(Et,N1e),e(N1e,usr),e(Et,bsr),e(Et,Sd),e(Sd,vsr),e(Sd,q1e),e(q1e,Fsr),e(Sd,Tsr),e(Sd,oW),e(oW,Msr),e(Sd,Esr),e(Et,Csr),M(I6,Et,null),e(Qo,wsr),e(Qo,_o),M(YL,_o,null),e(_o,Asr),e(_o,j1e),e(j1e,ysr),e(_o,Lsr),e(_o,Qa),e(Qa,xsr),e(Qa,D1e),e(D1e,$sr),e(Qa,ksr),e(Qa,G1e),e(G1e,Ssr),e(Qa,Rsr),e(Qa,O1e),e(O1e,Psr),e(Qa,Bsr),e(_o,Isr),e(_o,KL),e(KL,N6),e(N6,V1e),e(V1e,Nsr),e(N6,qsr),e(N6,rW),e(rW,jsr),e(N6,Dsr),e(KL,Gsr),e(KL,q6),e(q6,X1e),e(X1e,Osr),e(q6,Vsr),e(q6,tW),e(tW,Xsr),e(q6,zsr),e(_o,Wsr),e(_o,j6),e(j6,Qsr),e(j6,z1e),e(z1e,Hsr),e(j6,Usr),e(j6,W1e),e(W1e,Jsr),e(_o,Ysr),M(D6,_o,null),b(f,Mje,u),b(f,Rd,u),e(Rd,G6),e(G6,Q1e),M(ZL,Q1e,null),e(Rd,Ksr),e(Rd,H1e),e(H1e,Zsr),b(f,Eje,u),b(f,Ho,u),M(e8,Ho,null),e(Ho,elr),e(Ho,Pd),e(Pd,olr),e(Pd,aW),e(aW,rlr),e(Pd,tlr),e(Pd,nW),e(nW,alr),e(Pd,nlr),e(Ho,slr),e(Ho,o8),e(o8,llr),e(o8,U1e),e(U1e,ilr),e(o8,dlr),e(Ho,clr),e(Ho,Ct),M(r8,Ct,null),e(Ct,flr),e(Ct,J1e),e(J1e,mlr),e(Ct,glr),e(Ct,Bd),e(Bd,hlr),e(Bd,Y1e),e(Y1e,plr),e(Bd,_lr),e(Bd,sW),e(sW,ulr),e(Bd,blr),e(Ct,vlr),M(O6,Ct,null),e(Ho,Flr),e(Ho,uo),M(t8,uo,null),e(uo,Tlr),e(uo,K1e),e(K1e,Mlr),e(uo,Elr),e(uo,Ha),e(Ha,Clr),e(Ha,Z1e),e(Z1e,wlr),e(Ha,Alr),e(Ha,ebe),e(ebe,ylr),e(Ha,Llr),e(Ha,obe),e(obe,xlr),e(Ha,$lr),e(uo,klr),e(uo,rbe),e(rbe,V6),e(V6,tbe),e(tbe,Slr),e(V6,Rlr),e(V6,lW),e(lW,Plr),e(V6,Blr),e(uo,Ilr),e(uo,X6),e(X6,Nlr),e(X6,abe),e(abe,qlr),e(X6,jlr),e(X6,nbe),e(nbe,Dlr),e(uo,Glr),M(z6,uo,null),b(f,Cje,u),b(f,Id,u),e(Id,W6),e(W6,sbe),M(a8,sbe,null),e(Id,Olr),e(Id,lbe),e(lbe,Vlr),b(f,wje,u),b(f,Uo,u),M(n8,Uo,null),e(Uo,Xlr),e(Uo,Nd),e(Nd,zlr),e(Nd,iW),e(iW,Wlr),e(Nd,Qlr),e(Nd,dW),e(dW,Hlr),e(Nd,Ulr),e(Uo,Jlr),e(Uo,s8),e(s8,Ylr),e(s8,ibe),e(ibe,Klr),e(s8,Zlr),e(Uo,eir),e(Uo,wt),M(l8,wt,null),e(wt,oir),e(wt,dbe),e(dbe,rir),e(wt,tir),e(wt,qd),e(qd,air),e(qd,cbe),e(cbe,nir),e(qd,sir),e(qd,cW),e(cW,lir),e(qd,iir),e(wt,dir),M(Q6,wt,null),e(Uo,cir),e(Uo,bo),M(i8,bo,null),e(bo,fir),e(bo,fbe),e(fbe,mir),e(bo,gir),e(bo,Ua),e(Ua,hir),e(Ua,mbe),e(mbe,pir),e(Ua,_ir),e(Ua,gbe),e(gbe,uir),e(Ua,bir),e(Ua,hbe),e(hbe,vir),e(Ua,Fir),e(bo,Tir),e(bo,Ja),e(Ja,H6),e(H6,pbe),e(pbe,Mir),e(H6,Eir),e(H6,fW),e(fW,Cir),e(H6,wir),e(Ja,Air),e(Ja,U6),e(U6,_be),e(_be,yir),e(U6,Lir),e(U6,mW),e(mW,xir),e(U6,$ir),e(Ja,kir),e(Ja,J6),e(J6,ube),e(ube,Sir),e(J6,Rir),e(J6,gW),e(gW,Pir),e(J6,Bir),e(Ja,Iir),e(Ja,Y6),e(Y6,bbe),e(bbe,Nir),e(Y6,qir),e(Y6,hW),e(hW,jir),e(Y6,Dir),e(bo,Gir),e(bo,K6),e(K6,Oir),e(K6,vbe),e(vbe,Vir),e(K6,Xir),e(K6,Fbe),e(Fbe,zir),e(bo,Wir),M(Z6,bo,null),b(f,Aje,u),b(f,jd,u),e(jd,eT),e(eT,Tbe),M(d8,Tbe,null),e(jd,Qir),e(jd,Mbe),e(Mbe,Hir),b(f,yje,u),b(f,Jo,u),M(c8,Jo,null),e(Jo,Uir),e(Jo,Dd),e(Dd,Jir),e(Dd,pW),e(pW,Yir),e(Dd,Kir),e(Dd,_W),e(_W,Zir),e(Dd,edr),e(Jo,odr),e(Jo,f8),e(f8,rdr),e(f8,Ebe),e(Ebe,tdr),e(f8,adr),e(Jo,ndr),e(Jo,At),M(m8,At,null),e(At,sdr),e(At,Cbe),e(Cbe,ldr),e(At,idr),e(At,Gd),e(Gd,ddr),e(Gd,wbe),e(wbe,cdr),e(Gd,fdr),e(Gd,uW),e(uW,mdr),e(Gd,gdr),e(At,hdr),M(oT,At,null),e(Jo,pdr),e(Jo,vo),M(g8,vo,null),e(vo,_dr),e(vo,Abe),e(Abe,udr),e(vo,bdr),e(vo,Ya),e(Ya,vdr),e(Ya,ybe),e(ybe,Fdr),e(Ya,Tdr),e(Ya,Lbe),e(Lbe,Mdr),e(Ya,Edr),e(Ya,xbe),e(xbe,Cdr),e(Ya,wdr),e(vo,Adr),e(vo,$be),e($be,rT),e(rT,kbe),e(kbe,ydr),e(rT,Ldr),e(rT,bW),e(bW,xdr),e(rT,$dr),e(vo,kdr),e(vo,tT),e(tT,Sdr),e(tT,Sbe),e(Sbe,Rdr),e(tT,Pdr),e(tT,Rbe),e(Rbe,Bdr),e(vo,Idr),M(aT,vo,null),b(f,Lje,u),b(f,Od,u),e(Od,nT),e(nT,Pbe),M(h8,Pbe,null),e(Od,Ndr),e(Od,Bbe),e(Bbe,qdr),b(f,xje,u),b(f,Yo,u),M(p8,Yo,null),e(Yo,jdr),e(Yo,Vd),e(Vd,Ddr),e(Vd,vW),e(vW,Gdr),e(Vd,Odr),e(Vd,FW),e(FW,Vdr),e(Vd,Xdr),e(Yo,zdr),e(Yo,_8),e(_8,Wdr),e(_8,Ibe),e(Ibe,Qdr),e(_8,Hdr),e(Yo,Udr),e(Yo,yt),M(u8,yt,null),e(yt,Jdr),e(yt,Nbe),e(Nbe,Ydr),e(yt,Kdr),e(yt,Xd),e(Xd,Zdr),e(Xd,qbe),e(qbe,ecr),e(Xd,ocr),e(Xd,TW),e(TW,rcr),e(Xd,tcr),e(yt,acr),M(sT,yt,null),e(Yo,ncr),e(Yo,wr),M(b8,wr,null),e(wr,scr),e(wr,jbe),e(jbe,lcr),e(wr,icr),e(wr,Ka),e(Ka,dcr),e(Ka,Dbe),e(Dbe,ccr),e(Ka,fcr),e(Ka,Gbe),e(Gbe,mcr),e(Ka,gcr),e(Ka,Obe),e(Obe,hcr),e(Ka,pcr),e(wr,_cr),e(wr,q),e(q,lT),e(lT,Vbe),e(Vbe,ucr),e(lT,bcr),e(lT,MW),e(MW,vcr),e(lT,Fcr),e(q,Tcr),e(q,iT),e(iT,Xbe),e(Xbe,Mcr),e(iT,Ecr),e(iT,EW),e(EW,Ccr),e(iT,wcr),e(q,Acr),e(q,dT),e(dT,zbe),e(zbe,ycr),e(dT,Lcr),e(dT,CW),e(CW,xcr),e(dT,$cr),e(q,kcr),e(q,cT),e(cT,Wbe),e(Wbe,Scr),e(cT,Rcr),e(cT,wW),e(wW,Pcr),e(cT,Bcr),e(q,Icr),e(q,fT),e(fT,Qbe),e(Qbe,Ncr),e(fT,qcr),e(fT,AW),e(AW,jcr),e(fT,Dcr),e(q,Gcr),e(q,mT),e(mT,Hbe),e(Hbe,Ocr),e(mT,Vcr),e(mT,yW),e(yW,Xcr),e(mT,zcr),e(q,Wcr),e(q,gT),e(gT,Ube),e(Ube,Qcr),e(gT,Hcr),e(gT,LW),e(LW,Ucr),e(gT,Jcr),e(q,Ycr),e(q,hT),e(hT,Jbe),e(Jbe,Kcr),e(hT,Zcr),e(hT,xW),e(xW,efr),e(hT,ofr),e(q,rfr),e(q,pT),e(pT,Ybe),e(Ybe,tfr),e(pT,afr),e(pT,$W),e($W,nfr),e(pT,sfr),e(q,lfr),e(q,_T),e(_T,Kbe),e(Kbe,ifr),e(_T,dfr),e(_T,kW),e(kW,cfr),e(_T,ffr),e(q,mfr),e(q,uT),e(uT,Zbe),e(Zbe,gfr),e(uT,hfr),e(uT,SW),e(SW,pfr),e(uT,_fr),e(q,ufr),e(q,bT),e(bT,e2e),e(e2e,bfr),e(bT,vfr),e(bT,RW),e(RW,Ffr),e(bT,Tfr),e(q,Mfr),e(q,vT),e(vT,o2e),e(o2e,Efr),e(vT,Cfr),e(vT,PW),e(PW,wfr),e(vT,Afr),e(q,yfr),e(q,FT),e(FT,r2e),e(r2e,Lfr),e(FT,xfr),e(FT,BW),e(BW,$fr),e(FT,kfr),e(q,Sfr),e(q,TT),e(TT,t2e),e(t2e,Rfr),e(TT,Pfr),e(TT,IW),e(IW,Bfr),e(TT,Ifr),e(q,Nfr),e(q,MT),e(MT,a2e),e(a2e,qfr),e(MT,jfr),e(MT,NW),e(NW,Dfr),e(MT,Gfr),e(q,Ofr),e(q,ET),e(ET,n2e),e(n2e,Vfr),e(ET,Xfr),e(ET,qW),e(qW,zfr),e(ET,Wfr),e(q,Qfr),e(q,Ns),e(Ns,s2e),e(s2e,Hfr),e(Ns,Ufr),e(Ns,jW),e(jW,Jfr),e(Ns,Yfr),e(Ns,DW),e(DW,Kfr),e(Ns,Zfr),e(q,emr),e(q,CT),e(CT,l2e),e(l2e,omr),e(CT,rmr),e(CT,GW),e(GW,tmr),e(CT,amr),e(q,nmr),e(q,wT),e(wT,i2e),e(i2e,smr),e(wT,lmr),e(wT,OW),e(OW,imr),e(wT,dmr),e(q,cmr),e(q,AT),e(AT,d2e),e(d2e,fmr),e(AT,mmr),e(AT,VW),e(VW,gmr),e(AT,hmr),e(q,pmr),e(q,yT),e(yT,c2e),e(c2e,_mr),e(yT,umr),e(yT,XW),e(XW,bmr),e(yT,vmr),e(q,Fmr),e(q,LT),e(LT,f2e),e(f2e,Tmr),e(LT,Mmr),e(LT,zW),e(zW,Emr),e(LT,Cmr),e(q,wmr),e(q,xT),e(xT,m2e),e(m2e,Amr),e(xT,ymr),e(xT,WW),e(WW,Lmr),e(xT,xmr),e(q,$mr),e(q,$T),e($T,g2e),e(g2e,kmr),e($T,Smr),e($T,QW),e(QW,Rmr),e($T,Pmr),e(q,Bmr),e(q,kT),e(kT,h2e),e(h2e,Imr),e(kT,Nmr),e(kT,HW),e(HW,qmr),e(kT,jmr),e(q,Dmr),e(q,ST),e(ST,p2e),e(p2e,Gmr),e(ST,Omr),e(ST,UW),e(UW,Vmr),e(ST,Xmr),e(q,zmr),e(q,RT),e(RT,_2e),e(_2e,Wmr),e(RT,Qmr),e(RT,JW),e(JW,Hmr),e(RT,Umr),e(q,Jmr),e(q,PT),e(PT,u2e),e(u2e,Ymr),e(PT,Kmr),e(PT,YW),e(YW,Zmr),e(PT,egr),e(q,ogr),e(q,BT),e(BT,b2e),e(b2e,rgr),e(BT,tgr),e(BT,KW),e(KW,agr),e(BT,ngr),e(q,sgr),e(q,IT),e(IT,v2e),e(v2e,lgr),e(IT,igr),e(IT,ZW),e(ZW,dgr),e(IT,cgr),e(q,fgr),e(q,NT),e(NT,F2e),e(F2e,mgr),e(NT,ggr),e(NT,eQ),e(eQ,hgr),e(NT,pgr),e(q,_gr),e(q,qT),e(qT,T2e),e(T2e,ugr),e(qT,bgr),e(qT,oQ),e(oQ,vgr),e(qT,Fgr),e(q,Tgr),e(q,jT),e(jT,M2e),e(M2e,Mgr),e(jT,Egr),e(jT,rQ),e(rQ,Cgr),e(jT,wgr),e(q,Agr),e(q,DT),e(DT,E2e),e(E2e,ygr),e(DT,Lgr),e(DT,tQ),e(tQ,xgr),e(DT,$gr),e(q,kgr),e(q,GT),e(GT,C2e),e(C2e,Sgr),e(GT,Rgr),e(GT,aQ),e(aQ,Pgr),e(GT,Bgr),e(q,Igr),e(q,OT),e(OT,w2e),e(w2e,Ngr),e(OT,qgr),e(OT,nQ),e(nQ,jgr),e(OT,Dgr),e(q,Ggr),e(q,VT),e(VT,A2e),e(A2e,Ogr),e(VT,Vgr),e(VT,sQ),e(sQ,Xgr),e(VT,zgr),e(q,Wgr),e(q,XT),e(XT,y2e),e(y2e,Qgr),e(XT,Hgr),e(XT,lQ),e(lQ,Ugr),e(XT,Jgr),e(q,Ygr),e(q,zT),e(zT,L2e),e(L2e,Kgr),e(zT,Zgr),e(zT,iQ),e(iQ,ehr),e(zT,ohr),e(q,rhr),e(q,WT),e(WT,x2e),e(x2e,thr),e(WT,ahr),e(WT,dQ),e(dQ,nhr),e(WT,shr),e(q,lhr),e(q,QT),e(QT,$2e),e($2e,ihr),e(QT,dhr),e(QT,cQ),e(cQ,chr),e(QT,fhr),e(q,mhr),e(q,HT),e(HT,k2e),e(k2e,ghr),e(HT,hhr),e(HT,fQ),e(fQ,phr),e(HT,_hr),e(q,uhr),e(q,UT),e(UT,S2e),e(S2e,bhr),e(UT,vhr),e(UT,mQ),e(mQ,Fhr),e(UT,Thr),e(q,Mhr),e(q,JT),e(JT,R2e),e(R2e,Ehr),e(JT,Chr),e(JT,gQ),e(gQ,whr),e(JT,Ahr),e(q,yhr),e(q,YT),e(YT,P2e),e(P2e,Lhr),e(YT,xhr),e(YT,hQ),e(hQ,$hr),e(YT,khr),e(wr,Shr),M(KT,wr,null),b(f,$je,u),b(f,zd,u),e(zd,ZT),e(ZT,B2e),M(v8,B2e,null),e(zd,Rhr),e(zd,I2e),e(I2e,Phr),b(f,kje,u),b(f,Ko,u),M(F8,Ko,null),e(Ko,Bhr),e(Ko,Wd),e(Wd,Ihr),e(Wd,pQ),e(pQ,Nhr),e(Wd,qhr),e(Wd,_Q),e(_Q,jhr),e(Wd,Dhr),e(Ko,Ghr),e(Ko,T8),e(T8,Ohr),e(T8,N2e),e(N2e,Vhr),e(T8,Xhr),e(Ko,zhr),e(Ko,Lt),M(M8,Lt,null),e(Lt,Whr),e(Lt,q2e),e(q2e,Qhr),e(Lt,Hhr),e(Lt,Qd),e(Qd,Uhr),e(Qd,j2e),e(j2e,Jhr),e(Qd,Yhr),e(Qd,uQ),e(uQ,Khr),e(Qd,Zhr),e(Lt,epr),M(e7,Lt,null),e(Ko,opr),e(Ko,Ar),M(E8,Ar,null),e(Ar,rpr),e(Ar,D2e),e(D2e,tpr),e(Ar,apr),e(Ar,Za),e(Za,npr),e(Za,G2e),e(G2e,spr),e(Za,lpr),e(Za,O2e),e(O2e,ipr),e(Za,dpr),e(Za,V2e),e(V2e,cpr),e(Za,fpr),e(Ar,mpr),e(Ar,se),e(se,o7),e(o7,X2e),e(X2e,gpr),e(o7,hpr),e(o7,bQ),e(bQ,ppr),e(o7,_pr),e(se,upr),e(se,r7),e(r7,z2e),e(z2e,bpr),e(r7,vpr),e(r7,vQ),e(vQ,Fpr),e(r7,Tpr),e(se,Mpr),e(se,t7),e(t7,W2e),e(W2e,Epr),e(t7,Cpr),e(t7,FQ),e(FQ,wpr),e(t7,Apr),e(se,ypr),e(se,a7),e(a7,Q2e),e(Q2e,Lpr),e(a7,xpr),e(a7,TQ),e(TQ,$pr),e(a7,kpr),e(se,Spr),e(se,n7),e(n7,H2e),e(H2e,Rpr),e(n7,Ppr),e(n7,MQ),e(MQ,Bpr),e(n7,Ipr),e(se,Npr),e(se,s7),e(s7,U2e),e(U2e,qpr),e(s7,jpr),e(s7,EQ),e(EQ,Dpr),e(s7,Gpr),e(se,Opr),e(se,l7),e(l7,J2e),e(J2e,Vpr),e(l7,Xpr),e(l7,CQ),e(CQ,zpr),e(l7,Wpr),e(se,Qpr),e(se,i7),e(i7,Y2e),e(Y2e,Hpr),e(i7,Upr),e(i7,wQ),e(wQ,Jpr),e(i7,Ypr),e(se,Kpr),e(se,d7),e(d7,K2e),e(K2e,Zpr),e(d7,e_r),e(d7,AQ),e(AQ,o_r),e(d7,r_r),e(se,t_r),e(se,c7),e(c7,Z2e),e(Z2e,a_r),e(c7,n_r),e(c7,yQ),e(yQ,s_r),e(c7,l_r),e(se,i_r),e(se,f7),e(f7,e4e),e(e4e,d_r),e(f7,c_r),e(f7,LQ),e(LQ,f_r),e(f7,m_r),e(se,g_r),e(se,m7),e(m7,o4e),e(o4e,h_r),e(m7,p_r),e(m7,xQ),e(xQ,__r),e(m7,u_r),e(se,b_r),e(se,g7),e(g7,r4e),e(r4e,v_r),e(g7,F_r),e(g7,$Q),e($Q,T_r),e(g7,M_r),e(se,E_r),e(se,h7),e(h7,t4e),e(t4e,C_r),e(h7,w_r),e(h7,kQ),e(kQ,A_r),e(h7,y_r),e(se,L_r),e(se,p7),e(p7,a4e),e(a4e,x_r),e(p7,$_r),e(p7,SQ),e(SQ,k_r),e(p7,S_r),e(se,R_r),e(se,_7),e(_7,n4e),e(n4e,P_r),e(_7,B_r),e(_7,RQ),e(RQ,I_r),e(_7,N_r),e(se,q_r),e(se,u7),e(u7,s4e),e(s4e,j_r),e(u7,D_r),e(u7,PQ),e(PQ,G_r),e(u7,O_r),e(se,V_r),e(se,b7),e(b7,l4e),e(l4e,X_r),e(b7,z_r),e(b7,BQ),e(BQ,W_r),e(b7,Q_r),e(se,H_r),e(se,v7),e(v7,i4e),e(i4e,U_r),e(v7,J_r),e(v7,IQ),e(IQ,Y_r),e(v7,K_r),e(se,Z_r),e(se,F7),e(F7,d4e),e(d4e,eur),e(F7,our),e(F7,NQ),e(NQ,rur),e(F7,tur),e(se,aur),e(se,T7),e(T7,c4e),e(c4e,nur),e(T7,sur),e(T7,qQ),e(qQ,lur),e(T7,iur),e(se,dur),e(se,M7),e(M7,f4e),e(f4e,cur),e(M7,fur),e(M7,jQ),e(jQ,mur),e(M7,gur),e(se,hur),e(se,E7),e(E7,m4e),e(m4e,pur),e(E7,_ur),e(E7,DQ),e(DQ,uur),e(E7,bur),e(Ar,vur),M(C7,Ar,null),b(f,Sje,u),b(f,Hd,u),e(Hd,w7),e(w7,g4e),M(C8,g4e,null),e(Hd,Fur),e(Hd,h4e),e(h4e,Tur),b(f,Rje,u),b(f,Zo,u),M(w8,Zo,null),e(Zo,Mur),e(Zo,Ud),e(Ud,Eur),e(Ud,GQ),e(GQ,Cur),e(Ud,wur),e(Ud,OQ),e(OQ,Aur),e(Ud,yur),e(Zo,Lur),e(Zo,A8),e(A8,xur),e(A8,p4e),e(p4e,$ur),e(A8,kur),e(Zo,Sur),e(Zo,xt),M(y8,xt,null),e(xt,Rur),e(xt,_4e),e(_4e,Pur),e(xt,Bur),e(xt,Jd),e(Jd,Iur),e(Jd,u4e),e(u4e,Nur),e(Jd,qur),e(Jd,VQ),e(VQ,jur),e(Jd,Dur),e(xt,Gur),M(A7,xt,null),e(Zo,Our),e(Zo,yr),M(L8,yr,null),e(yr,Vur),e(yr,b4e),e(b4e,Xur),e(yr,zur),e(yr,en),e(en,Wur),e(en,v4e),e(v4e,Qur),e(en,Hur),e(en,F4e),e(F4e,Uur),e(en,Jur),e(en,T4e),e(T4e,Yur),e(en,Kur),e(yr,Zur),e(yr,Me),e(Me,y7),e(y7,M4e),e(M4e,e1r),e(y7,o1r),e(y7,XQ),e(XQ,r1r),e(y7,t1r),e(Me,a1r),e(Me,L7),e(L7,E4e),e(E4e,n1r),e(L7,s1r),e(L7,zQ),e(zQ,l1r),e(L7,i1r),e(Me,d1r),e(Me,x7),e(x7,C4e),e(C4e,c1r),e(x7,f1r),e(x7,WQ),e(WQ,m1r),e(x7,g1r),e(Me,h1r),e(Me,$7),e($7,w4e),e(w4e,p1r),e($7,_1r),e($7,QQ),e(QQ,u1r),e($7,b1r),e(Me,v1r),e(Me,k7),e(k7,A4e),e(A4e,F1r),e(k7,T1r),e(k7,HQ),e(HQ,M1r),e(k7,E1r),e(Me,C1r),e(Me,S7),e(S7,y4e),e(y4e,w1r),e(S7,A1r),e(S7,UQ),e(UQ,y1r),e(S7,L1r),e(Me,x1r),e(Me,R7),e(R7,L4e),e(L4e,$1r),e(R7,k1r),e(R7,JQ),e(JQ,S1r),e(R7,R1r),e(Me,P1r),e(Me,P7),e(P7,x4e),e(x4e,B1r),e(P7,I1r),e(P7,YQ),e(YQ,N1r),e(P7,q1r),e(Me,j1r),e(Me,B7),e(B7,$4e),e($4e,D1r),e(B7,G1r),e(B7,KQ),e(KQ,O1r),e(B7,V1r),e(Me,X1r),e(Me,I7),e(I7,k4e),e(k4e,z1r),e(I7,W1r),e(I7,ZQ),e(ZQ,Q1r),e(I7,H1r),e(Me,U1r),e(Me,N7),e(N7,S4e),e(S4e,J1r),e(N7,Y1r),e(N7,eH),e(eH,K1r),e(N7,Z1r),e(Me,ebr),e(Me,q7),e(q7,R4e),e(R4e,obr),e(q7,rbr),e(q7,oH),e(oH,tbr),e(q7,abr),e(yr,nbr),M(j7,yr,null),b(f,Pje,u),b(f,Yd,u),e(Yd,D7),e(D7,P4e),M(x8,P4e,null),e(Yd,sbr),e(Yd,B4e),e(B4e,lbr),b(f,Bje,u),b(f,er,u),M($8,er,null),e(er,ibr),e(er,Kd),e(Kd,dbr),e(Kd,rH),e(rH,cbr),e(Kd,fbr),e(Kd,tH),e(tH,mbr),e(Kd,gbr),e(er,hbr),e(er,k8),e(k8,pbr),e(k8,I4e),e(I4e,_br),e(k8,ubr),e(er,bbr),e(er,$t),M(S8,$t,null),e($t,vbr),e($t,N4e),e(N4e,Fbr),e($t,Tbr),e($t,Zd),e(Zd,Mbr),e(Zd,q4e),e(q4e,Ebr),e(Zd,Cbr),e(Zd,aH),e(aH,wbr),e(Zd,Abr),e($t,ybr),M(G7,$t,null),e(er,Lbr),e(er,Lr),M(R8,Lr,null),e(Lr,xbr),e(Lr,j4e),e(j4e,$br),e(Lr,kbr),e(Lr,on),e(on,Sbr),e(on,D4e),e(D4e,Rbr),e(on,Pbr),e(on,G4e),e(G4e,Bbr),e(on,Ibr),e(on,O4e),e(O4e,Nbr),e(on,qbr),e(Lr,jbr),e(Lr,rn),e(rn,O7),e(O7,V4e),e(V4e,Dbr),e(O7,Gbr),e(O7,nH),e(nH,Obr),e(O7,Vbr),e(rn,Xbr),e(rn,V7),e(V7,X4e),e(X4e,zbr),e(V7,Wbr),e(V7,sH),e(sH,Qbr),e(V7,Hbr),e(rn,Ubr),e(rn,X7),e(X7,z4e),e(z4e,Jbr),e(X7,Ybr),e(X7,lH),e(lH,Kbr),e(X7,Zbr),e(rn,e2r),e(rn,z7),e(z7,W4e),e(W4e,o2r),e(z7,r2r),e(z7,iH),e(iH,t2r),e(z7,a2r),e(Lr,n2r),M(W7,Lr,null),b(f,Ije,u),b(f,ec,u),e(ec,Q7),e(Q7,Q4e),M(P8,Q4e,null),e(ec,s2r),e(ec,H4e),e(H4e,l2r),b(f,Nje,u),b(f,or,u),M(B8,or,null),e(or,i2r),e(or,oc),e(oc,d2r),e(oc,dH),e(dH,c2r),e(oc,f2r),e(oc,cH),e(cH,m2r),e(oc,g2r),e(or,h2r),e(or,I8),e(I8,p2r),e(I8,U4e),e(U4e,_2r),e(I8,u2r),e(or,b2r),e(or,kt),M(N8,kt,null),e(kt,v2r),e(kt,J4e),e(J4e,F2r),e(kt,T2r),e(kt,rc),e(rc,M2r),e(rc,Y4e),e(Y4e,E2r),e(rc,C2r),e(rc,fH),e(fH,w2r),e(rc,A2r),e(kt,y2r),M(H7,kt,null),e(or,L2r),e(or,xr),M(q8,xr,null),e(xr,x2r),e(xr,K4e),e(K4e,$2r),e(xr,k2r),e(xr,tn),e(tn,S2r),e(tn,Z4e),e(Z4e,R2r),e(tn,P2r),e(tn,eve),e(eve,B2r),e(tn,I2r),e(tn,ove),e(ove,N2r),e(tn,q2r),e(xr,j2r),e(xr,ie),e(ie,U7),e(U7,rve),e(rve,D2r),e(U7,G2r),e(U7,mH),e(mH,O2r),e(U7,V2r),e(ie,X2r),e(ie,J7),e(J7,tve),e(tve,z2r),e(J7,W2r),e(J7,gH),e(gH,Q2r),e(J7,H2r),e(ie,U2r),e(ie,Y7),e(Y7,ave),e(ave,J2r),e(Y7,Y2r),e(Y7,hH),e(hH,K2r),e(Y7,Z2r),e(ie,e4r),e(ie,K7),e(K7,nve),e(nve,o4r),e(K7,r4r),e(K7,pH),e(pH,t4r),e(K7,a4r),e(ie,n4r),e(ie,Z7),e(Z7,sve),e(sve,s4r),e(Z7,l4r),e(Z7,_H),e(_H,i4r),e(Z7,d4r),e(ie,c4r),e(ie,eM),e(eM,lve),e(lve,f4r),e(eM,m4r),e(eM,uH),e(uH,g4r),e(eM,h4r),e(ie,p4r),e(ie,oM),e(oM,ive),e(ive,_4r),e(oM,u4r),e(oM,bH),e(bH,b4r),e(oM,v4r),e(ie,F4r),e(ie,rM),e(rM,dve),e(dve,T4r),e(rM,M4r),e(rM,vH),e(vH,E4r),e(rM,C4r),e(ie,w4r),e(ie,tM),e(tM,cve),e(cve,A4r),e(tM,y4r),e(tM,FH),e(FH,L4r),e(tM,x4r),e(ie,$4r),e(ie,aM),e(aM,fve),e(fve,k4r),e(aM,S4r),e(aM,TH),e(TH,R4r),e(aM,P4r),e(ie,B4r),e(ie,nM),e(nM,mve),e(mve,I4r),e(nM,N4r),e(nM,MH),e(MH,q4r),e(nM,j4r),e(ie,D4r),e(ie,sM),e(sM,gve),e(gve,G4r),e(sM,O4r),e(sM,EH),e(EH,V4r),e(sM,X4r),e(ie,z4r),e(ie,lM),e(lM,hve),e(hve,W4r),e(lM,Q4r),e(lM,CH),e(CH,H4r),e(lM,U4r),e(ie,J4r),e(ie,iM),e(iM,pve),e(pve,Y4r),e(iM,K4r),e(iM,wH),e(wH,Z4r),e(iM,evr),e(ie,ovr),e(ie,dM),e(dM,_ve),e(_ve,rvr),e(dM,tvr),e(dM,AH),e(AH,avr),e(dM,nvr),e(ie,svr),e(ie,cM),e(cM,uve),e(uve,lvr),e(cM,ivr),e(cM,yH),e(yH,dvr),e(cM,cvr),e(ie,fvr),e(ie,fM),e(fM,bve),e(bve,mvr),e(fM,gvr),e(fM,LH),e(LH,hvr),e(fM,pvr),e(ie,_vr),e(ie,mM),e(mM,vve),e(vve,uvr),e(mM,bvr),e(mM,xH),e(xH,vvr),e(mM,Fvr),e(ie,Tvr),e(ie,gM),e(gM,Fve),e(Fve,Mvr),e(gM,Evr),e(gM,$H),e($H,Cvr),e(gM,wvr),e(ie,Avr),e(ie,hM),e(hM,Tve),e(Tve,yvr),e(hM,Lvr),e(hM,kH),e(kH,xvr),e(hM,$vr),e(xr,kvr),M(pM,xr,null),b(f,qje,u),b(f,tc,u),e(tc,_M),e(_M,Mve),M(j8,Mve,null),e(tc,Svr),e(tc,Eve),e(Eve,Rvr),b(f,jje,u),b(f,rr,u),M(D8,rr,null),e(rr,Pvr),e(rr,ac),e(ac,Bvr),e(ac,SH),e(SH,Ivr),e(ac,Nvr),e(ac,RH),e(RH,qvr),e(ac,jvr),e(rr,Dvr),e(rr,G8),e(G8,Gvr),e(G8,Cve),e(Cve,Ovr),e(G8,Vvr),e(rr,Xvr),e(rr,St),M(O8,St,null),e(St,zvr),e(St,wve),e(wve,Wvr),e(St,Qvr),e(St,nc),e(nc,Hvr),e(nc,Ave),e(Ave,Uvr),e(nc,Jvr),e(nc,PH),e(PH,Yvr),e(nc,Kvr),e(St,Zvr),M(uM,St,null),e(rr,eFr),e(rr,$r),M(V8,$r,null),e($r,oFr),e($r,yve),e(yve,rFr),e($r,tFr),e($r,an),e(an,aFr),e(an,Lve),e(Lve,nFr),e(an,sFr),e(an,xve),e(xve,lFr),e(an,iFr),e(an,$ve),e($ve,dFr),e(an,cFr),e($r,fFr),e($r,ye),e(ye,bM),e(bM,kve),e(kve,mFr),e(bM,gFr),e(bM,BH),e(BH,hFr),e(bM,pFr),e(ye,_Fr),e(ye,vM),e(vM,Sve),e(Sve,uFr),e(vM,bFr),e(vM,IH),e(IH,vFr),e(vM,FFr),e(ye,TFr),e(ye,FM),e(FM,Rve),e(Rve,MFr),e(FM,EFr),e(FM,NH),e(NH,CFr),e(FM,wFr),e(ye,AFr),e(ye,TM),e(TM,Pve),e(Pve,yFr),e(TM,LFr),e(TM,qH),e(qH,xFr),e(TM,$Fr),e(ye,kFr),e(ye,MM),e(MM,Bve),e(Bve,SFr),e(MM,RFr),e(MM,jH),e(jH,PFr),e(MM,BFr),e(ye,IFr),e(ye,EM),e(EM,Ive),e(Ive,NFr),e(EM,qFr),e(EM,DH),e(DH,jFr),e(EM,DFr),e(ye,GFr),e(ye,CM),e(CM,Nve),e(Nve,OFr),e(CM,VFr),e(CM,GH),e(GH,XFr),e(CM,zFr),e(ye,WFr),e(ye,wM),e(wM,qve),e(qve,QFr),e(wM,HFr),e(wM,OH),e(OH,UFr),e(wM,JFr),e(ye,YFr),e(ye,AM),e(AM,jve),e(jve,KFr),e(AM,ZFr),e(AM,VH),e(VH,e6r),e(AM,o6r),e(ye,r6r),e(ye,yM),e(yM,Dve),e(Dve,t6r),e(yM,a6r),e(yM,XH),e(XH,n6r),e(yM,s6r),e($r,l6r),M(LM,$r,null),b(f,Dje,u),b(f,sc,u),e(sc,xM),e(xM,Gve),M(X8,Gve,null),e(sc,i6r),e(sc,Ove),e(Ove,d6r),b(f,Gje,u),b(f,tr,u),M(z8,tr,null),e(tr,c6r),e(tr,lc),e(lc,f6r),e(lc,zH),e(zH,m6r),e(lc,g6r),e(lc,WH),e(WH,h6r),e(lc,p6r),e(tr,_6r),e(tr,W8),e(W8,u6r),e(W8,Vve),e(Vve,b6r),e(W8,v6r),e(tr,F6r),e(tr,Rt),M(Q8,Rt,null),e(Rt,T6r),e(Rt,Xve),e(Xve,M6r),e(Rt,E6r),e(Rt,ic),e(ic,C6r),e(ic,zve),e(zve,w6r),e(ic,A6r),e(ic,QH),e(QH,y6r),e(ic,L6r),e(Rt,x6r),M($M,Rt,null),e(tr,$6r),e(tr,kr),M(H8,kr,null),e(kr,k6r),e(kr,Wve),e(Wve,S6r),e(kr,R6r),e(kr,nn),e(nn,P6r),e(nn,Qve),e(Qve,B6r),e(nn,I6r),e(nn,Hve),e(Hve,N6r),e(nn,q6r),e(nn,Uve),e(Uve,j6r),e(nn,D6r),e(kr,G6r),e(kr,oe),e(oe,kM),e(kM,Jve),e(Jve,O6r),e(kM,V6r),e(kM,HH),e(HH,X6r),e(kM,z6r),e(oe,W6r),e(oe,SM),e(SM,Yve),e(Yve,Q6r),e(SM,H6r),e(SM,UH),e(UH,U6r),e(SM,J6r),e(oe,Y6r),e(oe,RM),e(RM,Kve),e(Kve,K6r),e(RM,Z6r),e(RM,JH),e(JH,eTr),e(RM,oTr),e(oe,rTr),e(oe,PM),e(PM,Zve),e(Zve,tTr),e(PM,aTr),e(PM,YH),e(YH,nTr),e(PM,sTr),e(oe,lTr),e(oe,BM),e(BM,eFe),e(eFe,iTr),e(BM,dTr),e(BM,KH),e(KH,cTr),e(BM,fTr),e(oe,mTr),e(oe,IM),e(IM,oFe),e(oFe,gTr),e(IM,hTr),e(IM,ZH),e(ZH,pTr),e(IM,_Tr),e(oe,uTr),e(oe,NM),e(NM,rFe),e(rFe,bTr),e(NM,vTr),e(NM,eU),e(eU,FTr),e(NM,TTr),e(oe,MTr),e(oe,qM),e(qM,tFe),e(tFe,ETr),e(qM,CTr),e(qM,oU),e(oU,wTr),e(qM,ATr),e(oe,yTr),e(oe,jM),e(jM,aFe),e(aFe,LTr),e(jM,xTr),e(jM,rU),e(rU,$Tr),e(jM,kTr),e(oe,STr),e(oe,DM),e(DM,nFe),e(nFe,RTr),e(DM,PTr),e(DM,tU),e(tU,BTr),e(DM,ITr),e(oe,NTr),e(oe,GM),e(GM,sFe),e(sFe,qTr),e(GM,jTr),e(GM,aU),e(aU,DTr),e(GM,GTr),e(oe,OTr),e(oe,OM),e(OM,lFe),e(lFe,VTr),e(OM,XTr),e(OM,nU),e(nU,zTr),e(OM,WTr),e(oe,QTr),e(oe,VM),e(VM,iFe),e(iFe,HTr),e(VM,UTr),e(VM,sU),e(sU,JTr),e(VM,YTr),e(oe,KTr),e(oe,XM),e(XM,dFe),e(dFe,ZTr),e(XM,e7r),e(XM,lU),e(lU,o7r),e(XM,r7r),e(oe,t7r),e(oe,zM),e(zM,cFe),e(cFe,a7r),e(zM,n7r),e(zM,iU),e(iU,s7r),e(zM,l7r),e(oe,i7r),e(oe,WM),e(WM,fFe),e(fFe,d7r),e(WM,c7r),e(WM,dU),e(dU,f7r),e(WM,m7r),e(oe,g7r),e(oe,QM),e(QM,mFe),e(mFe,h7r),e(QM,p7r),e(QM,cU),e(cU,_7r),e(QM,u7r),e(oe,b7r),e(oe,HM),e(HM,gFe),e(gFe,v7r),e(HM,F7r),e(HM,fU),e(fU,T7r),e(HM,M7r),e(oe,E7r),e(oe,UM),e(UM,hFe),e(hFe,C7r),e(UM,w7r),e(UM,mU),e(mU,A7r),e(UM,y7r),e(oe,L7r),e(oe,JM),e(JM,pFe),e(pFe,x7r),e(JM,$7r),e(JM,gU),e(gU,k7r),e(JM,S7r),e(oe,R7r),e(oe,YM),e(YM,_Fe),e(_Fe,P7r),e(YM,B7r),e(YM,hU),e(hU,I7r),e(YM,N7r),e(oe,q7r),e(oe,KM),e(KM,uFe),e(uFe,j7r),e(KM,D7r),e(KM,pU),e(pU,G7r),e(KM,O7r),e(oe,V7r),e(oe,ZM),e(ZM,bFe),e(bFe,X7r),e(ZM,z7r),e(ZM,_U),e(_U,W7r),e(ZM,Q7r),e(oe,H7r),e(oe,eE),e(eE,vFe),e(vFe,U7r),e(eE,J7r),e(eE,uU),e(uU,Y7r),e(eE,K7r),e(oe,Z7r),e(oe,oE),e(oE,FFe),e(FFe,eMr),e(oE,oMr),e(oE,bU),e(bU,rMr),e(oE,tMr),e(oe,aMr),e(oe,rE),e(rE,TFe),e(TFe,nMr),e(rE,sMr),e(rE,vU),e(vU,lMr),e(rE,iMr),e(kr,dMr),M(tE,kr,null),b(f,Oje,u),b(f,dc,u),e(dc,aE),e(aE,MFe),M(U8,MFe,null),e(dc,cMr),e(dc,EFe),e(EFe,fMr),b(f,Vje,u),b(f,ar,u),M(J8,ar,null),e(ar,mMr),e(ar,cc),e(cc,gMr),e(cc,FU),e(FU,hMr),e(cc,pMr),e(cc,TU),e(TU,_Mr),e(cc,uMr),e(ar,bMr),e(ar,Y8),e(Y8,vMr),e(Y8,CFe),e(CFe,FMr),e(Y8,TMr),e(ar,MMr),e(ar,Pt),M(K8,Pt,null),e(Pt,EMr),e(Pt,wFe),e(wFe,CMr),e(Pt,wMr),e(Pt,fc),e(fc,AMr),e(fc,AFe),e(AFe,yMr),e(fc,LMr),e(fc,MU),e(MU,xMr),e(fc,$Mr),e(Pt,kMr),M(nE,Pt,null),e(ar,SMr),e(ar,Sr),M(Z8,Sr,null),e(Sr,RMr),e(Sr,yFe),e(yFe,PMr),e(Sr,BMr),e(Sr,sn),e(sn,IMr),e(sn,LFe),e(LFe,NMr),e(sn,qMr),e(sn,xFe),e(xFe,jMr),e(sn,DMr),e(sn,$Fe),e($Fe,GMr),e(sn,OMr),e(Sr,VMr),e(Sr,pe),e(pe,sE),e(sE,kFe),e(kFe,XMr),e(sE,zMr),e(sE,EU),e(EU,WMr),e(sE,QMr),e(pe,HMr),e(pe,lE),e(lE,SFe),e(SFe,UMr),e(lE,JMr),e(lE,CU),e(CU,YMr),e(lE,KMr),e(pe,ZMr),e(pe,iE),e(iE,RFe),e(RFe,eEr),e(iE,oEr),e(iE,wU),e(wU,rEr),e(iE,tEr),e(pe,aEr),e(pe,dE),e(dE,PFe),e(PFe,nEr),e(dE,sEr),e(dE,AU),e(AU,lEr),e(dE,iEr),e(pe,dEr),e(pe,cE),e(cE,BFe),e(BFe,cEr),e(cE,fEr),e(cE,yU),e(yU,mEr),e(cE,gEr),e(pe,hEr),e(pe,fE),e(fE,IFe),e(IFe,pEr),e(fE,_Er),e(fE,LU),e(LU,uEr),e(fE,bEr),e(pe,vEr),e(pe,mE),e(mE,NFe),e(NFe,FEr),e(mE,TEr),e(mE,xU),e(xU,MEr),e(mE,EEr),e(pe,CEr),e(pe,gE),e(gE,qFe),e(qFe,wEr),e(gE,AEr),e(gE,$U),e($U,yEr),e(gE,LEr),e(pe,xEr),e(pe,hE),e(hE,jFe),e(jFe,$Er),e(hE,kEr),e(hE,kU),e(kU,SEr),e(hE,REr),e(pe,PEr),e(pe,pE),e(pE,DFe),e(DFe,BEr),e(pE,IEr),e(pE,SU),e(SU,NEr),e(pE,qEr),e(pe,jEr),e(pe,_E),e(_E,GFe),e(GFe,DEr),e(_E,GEr),e(_E,RU),e(RU,OEr),e(_E,VEr),e(pe,XEr),e(pe,uE),e(uE,OFe),e(OFe,zEr),e(uE,WEr),e(uE,PU),e(PU,QEr),e(uE,HEr),e(pe,UEr),e(pe,bE),e(bE,VFe),e(VFe,JEr),e(bE,YEr),e(bE,BU),e(BU,KEr),e(bE,ZEr),e(pe,eCr),e(pe,vE),e(vE,XFe),e(XFe,oCr),e(vE,rCr),e(vE,IU),e(IU,tCr),e(vE,aCr),e(pe,nCr),e(pe,FE),e(FE,zFe),e(zFe,sCr),e(FE,lCr),e(FE,NU),e(NU,iCr),e(FE,dCr),e(pe,cCr),e(pe,TE),e(TE,WFe),e(WFe,fCr),e(TE,mCr),e(TE,qU),e(qU,gCr),e(TE,hCr),e(pe,pCr),e(pe,ME),e(ME,QFe),e(QFe,_Cr),e(ME,uCr),e(ME,jU),e(jU,bCr),e(ME,vCr),e(Sr,FCr),M(EE,Sr,null),b(f,Xje,u),b(f,mc,u),e(mc,CE),e(CE,HFe),M(e9,HFe,null),e(mc,TCr),e(mc,UFe),e(UFe,MCr),b(f,zje,u),b(f,nr,u),M(o9,nr,null),e(nr,ECr),e(nr,gc),e(gc,CCr),e(gc,DU),e(DU,wCr),e(gc,ACr),e(gc,GU),e(GU,yCr),e(gc,LCr),e(nr,xCr),e(nr,r9),e(r9,$Cr),e(r9,JFe),e(JFe,kCr),e(r9,SCr),e(nr,RCr),e(nr,Bt),M(t9,Bt,null),e(Bt,PCr),e(Bt,YFe),e(YFe,BCr),e(Bt,ICr),e(Bt,hc),e(hc,NCr),e(hc,KFe),e(KFe,qCr),e(hc,jCr),e(hc,OU),e(OU,DCr),e(hc,GCr),e(Bt,OCr),M(wE,Bt,null),e(nr,VCr),e(nr,Rr),M(a9,Rr,null),e(Rr,XCr),e(Rr,ZFe),e(ZFe,zCr),e(Rr,WCr),e(Rr,ln),e(ln,QCr),e(ln,e6e),e(e6e,HCr),e(ln,UCr),e(ln,o6e),e(o6e,JCr),e(ln,YCr),e(ln,r6e),e(r6e,KCr),e(ln,ZCr),e(Rr,e5r),e(Rr,n9),e(n9,AE),e(AE,t6e),e(t6e,o5r),e(AE,r5r),e(AE,VU),e(VU,t5r),e(AE,a5r),e(n9,n5r),e(n9,yE),e(yE,a6e),e(a6e,s5r),e(yE,l5r),e(yE,XU),e(XU,i5r),e(yE,d5r),e(Rr,c5r),M(LE,Rr,null),b(f,Wje,u),b(f,pc,u),e(pc,xE),e(xE,n6e),M(s9,n6e,null),e(pc,f5r),e(pc,s6e),e(s6e,m5r),b(f,Qje,u),b(f,sr,u),M(l9,sr,null),e(sr,g5r),e(sr,_c),e(_c,h5r),e(_c,zU),e(zU,p5r),e(_c,_5r),e(_c,WU),e(WU,u5r),e(_c,b5r),e(sr,v5r),e(sr,i9),e(i9,F5r),e(i9,l6e),e(l6e,T5r),e(i9,M5r),e(sr,E5r),e(sr,It),M(d9,It,null),e(It,C5r),e(It,i6e),e(i6e,w5r),e(It,A5r),e(It,uc),e(uc,y5r),e(uc,d6e),e(d6e,L5r),e(uc,x5r),e(uc,QU),e(QU,$5r),e(uc,k5r),e(It,S5r),M($E,It,null),e(sr,R5r),e(sr,Pr),M(c9,Pr,null),e(Pr,P5r),e(Pr,c6e),e(c6e,B5r),e(Pr,I5r),e(Pr,dn),e(dn,N5r),e(dn,f6e),e(f6e,q5r),e(dn,j5r),e(dn,m6e),e(m6e,D5r),e(dn,G5r),e(dn,g6e),e(g6e,O5r),e(dn,V5r),e(Pr,X5r),e(Pr,h6e),e(h6e,kE),e(kE,p6e),e(p6e,z5r),e(kE,W5r),e(kE,HU),e(HU,Q5r),e(kE,H5r),e(Pr,U5r),M(SE,Pr,null),b(f,Hje,u),b(f,bc,u),e(bc,RE),e(RE,_6e),M(f9,_6e,null),e(bc,J5r),e(bc,u6e),e(u6e,Y5r),b(f,Uje,u),b(f,lr,u),M(m9,lr,null),e(lr,K5r),e(lr,vc),e(vc,Z5r),e(vc,UU),e(UU,e3r),e(vc,o3r),e(vc,JU),e(JU,r3r),e(vc,t3r),e(lr,a3r),e(lr,g9),e(g9,n3r),e(g9,b6e),e(b6e,s3r),e(g9,l3r),e(lr,i3r),e(lr,Nt),M(h9,Nt,null),e(Nt,d3r),e(Nt,v6e),e(v6e,c3r),e(Nt,f3r),e(Nt,Fc),e(Fc,m3r),e(Fc,F6e),e(F6e,g3r),e(Fc,h3r),e(Fc,YU),e(YU,p3r),e(Fc,_3r),e(Nt,u3r),M(PE,Nt,null),e(lr,b3r),e(lr,Br),M(p9,Br,null),e(Br,v3r),e(Br,T6e),e(T6e,F3r),e(Br,T3r),e(Br,cn),e(cn,M3r),e(cn,M6e),e(M6e,E3r),e(cn,C3r),e(cn,E6e),e(E6e,w3r),e(cn,A3r),e(cn,C6e),e(C6e,y3r),e(cn,L3r),e(Br,x3r),e(Br,de),e(de,BE),e(BE,w6e),e(w6e,$3r),e(BE,k3r),e(BE,KU),e(KU,S3r),e(BE,R3r),e(de,P3r),e(de,IE),e(IE,A6e),e(A6e,B3r),e(IE,I3r),e(IE,ZU),e(ZU,N3r),e(IE,q3r),e(de,j3r),e(de,NE),e(NE,y6e),e(y6e,D3r),e(NE,G3r),e(NE,eJ),e(eJ,O3r),e(NE,V3r),e(de,X3r),e(de,qE),e(qE,L6e),e(L6e,z3r),e(qE,W3r),e(qE,oJ),e(oJ,Q3r),e(qE,H3r),e(de,U3r),e(de,jE),e(jE,x6e),e(x6e,J3r),e(jE,Y3r),e(jE,rJ),e(rJ,K3r),e(jE,Z3r),e(de,ewr),e(de,DE),e(DE,$6e),e($6e,owr),e(DE,rwr),e(DE,tJ),e(tJ,twr),e(DE,awr),e(de,nwr),e(de,GE),e(GE,k6e),e(k6e,swr),e(GE,lwr),e(GE,aJ),e(aJ,iwr),e(GE,dwr),e(de,cwr),e(de,OE),e(OE,S6e),e(S6e,fwr),e(OE,mwr),e(OE,nJ),e(nJ,gwr),e(OE,hwr),e(de,pwr),e(de,VE),e(VE,R6e),e(R6e,_wr),e(VE,uwr),e(VE,sJ),e(sJ,bwr),e(VE,vwr),e(de,Fwr),e(de,XE),e(XE,P6e),e(P6e,Twr),e(XE,Mwr),e(XE,lJ),e(lJ,Ewr),e(XE,Cwr),e(de,wwr),e(de,zE),e(zE,B6e),e(B6e,Awr),e(zE,ywr),e(zE,iJ),e(iJ,Lwr),e(zE,xwr),e(de,$wr),e(de,WE),e(WE,I6e),e(I6e,kwr),e(WE,Swr),e(WE,dJ),e(dJ,Rwr),e(WE,Pwr),e(de,Bwr),e(de,QE),e(QE,N6e),e(N6e,Iwr),e(QE,Nwr),e(QE,cJ),e(cJ,qwr),e(QE,jwr),e(de,Dwr),e(de,HE),e(HE,q6e),e(q6e,Gwr),e(HE,Owr),e(HE,fJ),e(fJ,Vwr),e(HE,Xwr),e(de,zwr),e(de,UE),e(UE,j6e),e(j6e,Wwr),e(UE,Qwr),e(UE,mJ),e(mJ,Hwr),e(UE,Uwr),e(de,Jwr),e(de,JE),e(JE,D6e),e(D6e,Ywr),e(JE,Kwr),e(JE,gJ),e(gJ,Zwr),e(JE,e0r),e(de,o0r),e(de,YE),e(YE,G6e),e(G6e,r0r),e(YE,t0r),e(YE,hJ),e(hJ,a0r),e(YE,n0r),e(de,s0r),e(de,KE),e(KE,O6e),e(O6e,l0r),e(KE,i0r),e(KE,pJ),e(pJ,d0r),e(KE,c0r),e(de,f0r),e(de,ZE),e(ZE,V6e),e(V6e,m0r),e(ZE,g0r),e(ZE,_J),e(_J,h0r),e(ZE,p0r),e(de,_0r),e(de,eC),e(eC,X6e),e(X6e,u0r),e(eC,b0r),e(eC,uJ),e(uJ,v0r),e(eC,F0r),e(Br,T0r),M(oC,Br,null),b(f,Jje,u),b(f,Tc,u),e(Tc,rC),e(rC,z6e),M(_9,z6e,null),e(Tc,M0r),e(Tc,W6e),e(W6e,E0r),b(f,Yje,u),b(f,ir,u),M(u9,ir,null),e(ir,C0r),e(ir,Mc),e(Mc,w0r),e(Mc,bJ),e(bJ,A0r),e(Mc,y0r),e(Mc,vJ),e(vJ,L0r),e(Mc,x0r),e(ir,$0r),e(ir,b9),e(b9,k0r),e(b9,Q6e),e(Q6e,S0r),e(b9,R0r),e(ir,P0r),e(ir,qt),M(v9,qt,null),e(qt,B0r),e(qt,H6e),e(H6e,I0r),e(qt,N0r),e(qt,Ec),e(Ec,q0r),e(Ec,U6e),e(U6e,j0r),e(Ec,D0r),e(Ec,FJ),e(FJ,G0r),e(Ec,O0r),e(qt,V0r),M(tC,qt,null),e(ir,X0r),e(ir,Ir),M(F9,Ir,null),e(Ir,z0r),e(Ir,J6e),e(J6e,W0r),e(Ir,Q0r),e(Ir,fn),e(fn,H0r),e(fn,Y6e),e(Y6e,U0r),e(fn,J0r),e(fn,K6e),e(K6e,Y0r),e(fn,K0r),e(fn,Z6e),e(Z6e,Z0r),e(fn,eAr),e(Ir,oAr),e(Ir,ce),e(ce,aC),e(aC,eTe),e(eTe,rAr),e(aC,tAr),e(aC,TJ),e(TJ,aAr),e(aC,nAr),e(ce,sAr),e(ce,nC),e(nC,oTe),e(oTe,lAr),e(nC,iAr),e(nC,MJ),e(MJ,dAr),e(nC,cAr),e(ce,fAr),e(ce,sC),e(sC,rTe),e(rTe,mAr),e(sC,gAr),e(sC,EJ),e(EJ,hAr),e(sC,pAr),e(ce,_Ar),e(ce,lC),e(lC,tTe),e(tTe,uAr),e(lC,bAr),e(lC,CJ),e(CJ,vAr),e(lC,FAr),e(ce,TAr),e(ce,iC),e(iC,aTe),e(aTe,MAr),e(iC,EAr),e(iC,wJ),e(wJ,CAr),e(iC,wAr),e(ce,AAr),e(ce,dC),e(dC,nTe),e(nTe,yAr),e(dC,LAr),e(dC,AJ),e(AJ,xAr),e(dC,$Ar),e(ce,kAr),e(ce,cC),e(cC,sTe),e(sTe,SAr),e(cC,RAr),e(cC,yJ),e(yJ,PAr),e(cC,BAr),e(ce,IAr),e(ce,fC),e(fC,lTe),e(lTe,NAr),e(fC,qAr),e(fC,LJ),e(LJ,jAr),e(fC,DAr),e(ce,GAr),e(ce,mC),e(mC,iTe),e(iTe,OAr),e(mC,VAr),e(mC,xJ),e(xJ,XAr),e(mC,zAr),e(ce,WAr),e(ce,gC),e(gC,dTe),e(dTe,QAr),e(gC,HAr),e(gC,$J),e($J,UAr),e(gC,JAr),e(ce,YAr),e(ce,hC),e(hC,cTe),e(cTe,KAr),e(hC,ZAr),e(hC,kJ),e(kJ,eyr),e(hC,oyr),e(ce,ryr),e(ce,pC),e(pC,fTe),e(fTe,tyr),e(pC,ayr),e(pC,SJ),e(SJ,nyr),e(pC,syr),e(ce,lyr),e(ce,_C),e(_C,mTe),e(mTe,iyr),e(_C,dyr),e(_C,RJ),e(RJ,cyr),e(_C,fyr),e(ce,myr),e(ce,uC),e(uC,gTe),e(gTe,gyr),e(uC,hyr),e(uC,PJ),e(PJ,pyr),e(uC,_yr),e(ce,uyr),e(ce,bC),e(bC,hTe),e(hTe,byr),e(bC,vyr),e(bC,BJ),e(BJ,Fyr),e(bC,Tyr),e(ce,Myr),e(ce,vC),e(vC,pTe),e(pTe,Eyr),e(vC,Cyr),e(vC,IJ),e(IJ,wyr),e(vC,Ayr),e(ce,yyr),e(ce,FC),e(FC,_Te),e(_Te,Lyr),e(FC,xyr),e(FC,NJ),e(NJ,$yr),e(FC,kyr),e(ce,Syr),e(ce,TC),e(TC,uTe),e(uTe,Ryr),e(TC,Pyr),e(TC,qJ),e(qJ,Byr),e(TC,Iyr),e(ce,Nyr),e(ce,MC),e(MC,bTe),e(bTe,qyr),e(MC,jyr),e(MC,jJ),e(jJ,Dyr),e(MC,Gyr),e(ce,Oyr),e(ce,EC),e(EC,vTe),e(vTe,Vyr),e(EC,Xyr),e(EC,DJ),e(DJ,zyr),e(EC,Wyr),e(Ir,Qyr),M(CC,Ir,null),b(f,Kje,u),b(f,Cc,u),e(Cc,wC),e(wC,FTe),M(T9,FTe,null),e(Cc,Hyr),e(Cc,TTe),e(TTe,Uyr),b(f,Zje,u),b(f,dr,u),M(M9,dr,null),e(dr,Jyr),e(dr,wc),e(wc,Yyr),e(wc,GJ),e(GJ,Kyr),e(wc,Zyr),e(wc,OJ),e(OJ,eLr),e(wc,oLr),e(dr,rLr),e(dr,E9),e(E9,tLr),e(E9,MTe),e(MTe,aLr),e(E9,nLr),e(dr,sLr),e(dr,jt),M(C9,jt,null),e(jt,lLr),e(jt,ETe),e(ETe,iLr),e(jt,dLr),e(jt,Ac),e(Ac,cLr),e(Ac,CTe),e(CTe,fLr),e(Ac,mLr),e(Ac,VJ),e(VJ,gLr),e(Ac,hLr),e(jt,pLr),M(AC,jt,null),e(dr,_Lr),e(dr,Nr),M(w9,Nr,null),e(Nr,uLr),e(Nr,wTe),e(wTe,bLr),e(Nr,vLr),e(Nr,mn),e(mn,FLr),e(mn,ATe),e(ATe,TLr),e(mn,MLr),e(mn,yTe),e(yTe,ELr),e(mn,CLr),e(mn,LTe),e(LTe,wLr),e(mn,ALr),e(Nr,yLr),e(Nr,xTe),e(xTe,yC),e(yC,$Te),e($Te,LLr),e(yC,xLr),e(yC,XJ),e(XJ,$Lr),e(yC,kLr),e(Nr,SLr),M(LC,Nr,null),b(f,eDe,u),b(f,yc,u),e(yc,xC),e(xC,kTe),M(A9,kTe,null),e(yc,RLr),e(yc,STe),e(STe,PLr),b(f,oDe,u),b(f,cr,u),M(y9,cr,null),e(cr,BLr),e(cr,Lc),e(Lc,ILr),e(Lc,zJ),e(zJ,NLr),e(Lc,qLr),e(Lc,WJ),e(WJ,jLr),e(Lc,DLr),e(cr,GLr),e(cr,L9),e(L9,OLr),e(L9,RTe),e(RTe,VLr),e(L9,XLr),e(cr,zLr),e(cr,Dt),M(x9,Dt,null),e(Dt,WLr),e(Dt,PTe),e(PTe,QLr),e(Dt,HLr),e(Dt,xc),e(xc,ULr),e(xc,BTe),e(BTe,JLr),e(xc,YLr),e(xc,QJ),e(QJ,KLr),e(xc,ZLr),e(Dt,e8r),M($C,Dt,null),e(cr,o8r),e(cr,qr),M($9,qr,null),e(qr,r8r),e(qr,ITe),e(ITe,t8r),e(qr,a8r),e(qr,gn),e(gn,n8r),e(gn,NTe),e(NTe,s8r),e(gn,l8r),e(gn,qTe),e(qTe,i8r),e(gn,d8r),e(gn,jTe),e(jTe,c8r),e(gn,f8r),e(qr,m8r),e(qr,DTe),e(DTe,kC),e(kC,GTe),e(GTe,g8r),e(kC,h8r),e(kC,HJ),e(HJ,p8r),e(kC,_8r),e(qr,u8r),M(SC,qr,null),b(f,rDe,u),b(f,$c,u),e($c,RC),e(RC,OTe),M(k9,OTe,null),e($c,b8r),e($c,VTe),e(VTe,v8r),b(f,tDe,u),b(f,fr,u),M(S9,fr,null),e(fr,F8r),e(fr,kc),e(kc,T8r),e(kc,UJ),e(UJ,M8r),e(kc,E8r),e(kc,JJ),e(JJ,C8r),e(kc,w8r),e(fr,A8r),e(fr,R9),e(R9,y8r),e(R9,XTe),e(XTe,L8r),e(R9,x8r),e(fr,$8r),e(fr,Gt),M(P9,Gt,null),e(Gt,k8r),e(Gt,zTe),e(zTe,S8r),e(Gt,R8r),e(Gt,Sc),e(Sc,P8r),e(Sc,WTe),e(WTe,B8r),e(Sc,I8r),e(Sc,YJ),e(YJ,N8r),e(Sc,q8r),e(Gt,j8r),M(PC,Gt,null),e(fr,D8r),e(fr,jr),M(B9,jr,null),e(jr,G8r),e(jr,QTe),e(QTe,O8r),e(jr,V8r),e(jr,hn),e(hn,X8r),e(hn,HTe),e(HTe,z8r),e(hn,W8r),e(hn,UTe),e(UTe,Q8r),e(hn,H8r),e(hn,JTe),e(JTe,U8r),e(hn,J8r),e(jr,Y8r),e(jr,te),e(te,BC),e(BC,YTe),e(YTe,K8r),e(BC,Z8r),e(BC,KJ),e(KJ,e9r),e(BC,o9r),e(te,r9r),e(te,IC),e(IC,KTe),e(KTe,t9r),e(IC,a9r),e(IC,ZJ),e(ZJ,n9r),e(IC,s9r),e(te,l9r),e(te,NC),e(NC,ZTe),e(ZTe,i9r),e(NC,d9r),e(NC,eY),e(eY,c9r),e(NC,f9r),e(te,m9r),e(te,qC),e(qC,e7e),e(e7e,g9r),e(qC,h9r),e(qC,oY),e(oY,p9r),e(qC,_9r),e(te,u9r),e(te,jC),e(jC,o7e),e(o7e,b9r),e(jC,v9r),e(jC,rY),e(rY,F9r),e(jC,T9r),e(te,M9r),e(te,DC),e(DC,r7e),e(r7e,E9r),e(DC,C9r),e(DC,tY),e(tY,w9r),e(DC,A9r),e(te,y9r),e(te,GC),e(GC,t7e),e(t7e,L9r),e(GC,x9r),e(GC,aY),e(aY,$9r),e(GC,k9r),e(te,S9r),e(te,OC),e(OC,a7e),e(a7e,R9r),e(OC,P9r),e(OC,nY),e(nY,B9r),e(OC,I9r),e(te,N9r),e(te,VC),e(VC,n7e),e(n7e,q9r),e(VC,j9r),e(VC,sY),e(sY,D9r),e(VC,G9r),e(te,O9r),e(te,XC),e(XC,s7e),e(s7e,V9r),e(XC,X9r),e(XC,lY),e(lY,z9r),e(XC,W9r),e(te,Q9r),e(te,zC),e(zC,l7e),e(l7e,H9r),e(zC,U9r),e(zC,iY),e(iY,J9r),e(zC,Y9r),e(te,K9r),e(te,WC),e(WC,i7e),e(i7e,Z9r),e(WC,exr),e(WC,dY),e(dY,oxr),e(WC,rxr),e(te,txr),e(te,QC),e(QC,d7e),e(d7e,axr),e(QC,nxr),e(QC,cY),e(cY,sxr),e(QC,lxr),e(te,ixr),e(te,HC),e(HC,c7e),e(c7e,dxr),e(HC,cxr),e(HC,fY),e(fY,fxr),e(HC,mxr),e(te,gxr),e(te,UC),e(UC,f7e),e(f7e,hxr),e(UC,pxr),e(UC,mY),e(mY,_xr),e(UC,uxr),e(te,bxr),e(te,JC),e(JC,m7e),e(m7e,vxr),e(JC,Fxr),e(JC,gY),e(gY,Txr),e(JC,Mxr),e(te,Exr),e(te,YC),e(YC,g7e),e(g7e,Cxr),e(YC,wxr),e(YC,hY),e(hY,Axr),e(YC,yxr),e(te,Lxr),e(te,KC),e(KC,h7e),e(h7e,xxr),e(KC,$xr),e(KC,pY),e(pY,kxr),e(KC,Sxr),e(te,Rxr),e(te,ZC),e(ZC,p7e),e(p7e,Pxr),e(ZC,Bxr),e(ZC,_Y),e(_Y,Ixr),e(ZC,Nxr),e(te,qxr),e(te,e5),e(e5,_7e),e(_7e,jxr),e(e5,Dxr),e(e5,uY),e(uY,Gxr),e(e5,Oxr),e(te,Vxr),e(te,o5),e(o5,u7e),e(u7e,Xxr),e(o5,zxr),e(o5,bY),e(bY,Wxr),e(o5,Qxr),e(te,Hxr),e(te,r5),e(r5,b7e),e(b7e,Uxr),e(r5,Jxr),e(r5,vY),e(vY,Yxr),e(r5,Kxr),e(te,Zxr),e(te,t5),e(t5,v7e),e(v7e,e$r),e(t5,o$r),e(t5,FY),e(FY,r$r),e(t5,t$r),e(te,a$r),e(te,a5),e(a5,F7e),e(F7e,n$r),e(a5,s$r),e(a5,TY),e(TY,l$r),e(a5,i$r),e(te,d$r),e(te,n5),e(n5,T7e),e(T7e,c$r),e(n5,f$r),e(n5,MY),e(MY,m$r),e(n5,g$r),e(jr,h$r),M(s5,jr,null),b(f,aDe,u),b(f,Rc,u),e(Rc,l5),e(l5,M7e),M(I9,M7e,null),e(Rc,p$r),e(Rc,E7e),e(E7e,_$r),b(f,nDe,u),b(f,mr,u),M(N9,mr,null),e(mr,u$r),e(mr,Pc),e(Pc,b$r),e(Pc,EY),e(EY,v$r),e(Pc,F$r),e(Pc,CY),e(CY,T$r),e(Pc,M$r),e(mr,E$r),e(mr,q9),e(q9,C$r),e(q9,C7e),e(C7e,w$r),e(q9,A$r),e(mr,y$r),e(mr,Ot),M(j9,Ot,null),e(Ot,L$r),e(Ot,w7e),e(w7e,x$r),e(Ot,$$r),e(Ot,Bc),e(Bc,k$r),e(Bc,A7e),e(A7e,S$r),e(Bc,R$r),e(Bc,wY),e(wY,P$r),e(Bc,B$r),e(Ot,I$r),M(i5,Ot,null),e(mr,N$r),e(mr,Dr),M(D9,Dr,null),e(Dr,q$r),e(Dr,y7e),e(y7e,j$r),e(Dr,D$r),e(Dr,pn),e(pn,G$r),e(pn,L7e),e(L7e,O$r),e(pn,V$r),e(pn,x7e),e(x7e,X$r),e(pn,z$r),e(pn,$7e),e($7e,W$r),e(pn,Q$r),e(Dr,H$r),e(Dr,Re),e(Re,d5),e(d5,k7e),e(k7e,U$r),e(d5,J$r),e(d5,AY),e(AY,Y$r),e(d5,K$r),e(Re,Z$r),e(Re,c5),e(c5,S7e),e(S7e,ekr),e(c5,okr),e(c5,yY),e(yY,rkr),e(c5,tkr),e(Re,akr),e(Re,f5),e(f5,R7e),e(R7e,nkr),e(f5,skr),e(f5,LY),e(LY,lkr),e(f5,ikr),e(Re,dkr),e(Re,m5),e(m5,P7e),e(P7e,ckr),e(m5,fkr),e(m5,xY),e(xY,mkr),e(m5,gkr),e(Re,hkr),e(Re,g5),e(g5,B7e),e(B7e,pkr),e(g5,_kr),e(g5,$Y),e($Y,ukr),e(g5,bkr),e(Re,vkr),e(Re,h5),e(h5,I7e),e(I7e,Fkr),e(h5,Tkr),e(h5,kY),e(kY,Mkr),e(h5,Ekr),e(Re,Ckr),e(Re,p5),e(p5,N7e),e(N7e,wkr),e(p5,Akr),e(p5,SY),e(SY,ykr),e(p5,Lkr),e(Re,xkr),e(Re,_5),e(_5,q7e),e(q7e,$kr),e(_5,kkr),e(_5,RY),e(RY,Skr),e(_5,Rkr),e(Re,Pkr),e(Re,u5),e(u5,j7e),e(j7e,Bkr),e(u5,Ikr),e(u5,PY),e(PY,Nkr),e(u5,qkr),e(Dr,jkr),M(b5,Dr,null),b(f,sDe,u),b(f,Ic,u),e(Ic,v5),e(v5,D7e),M(G9,D7e,null),e(Ic,Dkr),e(Ic,G7e),e(G7e,Gkr),b(f,lDe,u),b(f,gr,u),M(O9,gr,null),e(gr,Okr),e(gr,Nc),e(Nc,Vkr),e(Nc,BY),e(BY,Xkr),e(Nc,zkr),e(Nc,IY),e(IY,Wkr),e(Nc,Qkr),e(gr,Hkr),e(gr,V9),e(V9,Ukr),e(V9,O7e),e(O7e,Jkr),e(V9,Ykr),e(gr,Kkr),e(gr,Vt),M(X9,Vt,null),e(Vt,Zkr),e(Vt,V7e),e(V7e,eSr),e(Vt,oSr),e(Vt,qc),e(qc,rSr),e(qc,X7e),e(X7e,tSr),e(qc,aSr),e(qc,NY),e(NY,nSr),e(qc,sSr),e(Vt,lSr),M(F5,Vt,null),e(gr,iSr),e(gr,Gr),M(z9,Gr,null),e(Gr,dSr),e(Gr,z7e),e(z7e,cSr),e(Gr,fSr),e(Gr,_n),e(_n,mSr),e(_n,W7e),e(W7e,gSr),e(_n,hSr),e(_n,Q7e),e(Q7e,pSr),e(_n,_Sr),e(_n,H7e),e(H7e,uSr),e(_n,bSr),e(Gr,vSr),e(Gr,Ee),e(Ee,T5),e(T5,U7e),e(U7e,FSr),e(T5,TSr),e(T5,qY),e(qY,MSr),e(T5,ESr),e(Ee,CSr),e(Ee,M5),e(M5,J7e),e(J7e,wSr),e(M5,ASr),e(M5,jY),e(jY,ySr),e(M5,LSr),e(Ee,xSr),e(Ee,E5),e(E5,Y7e),e(Y7e,$Sr),e(E5,kSr),e(E5,DY),e(DY,SSr),e(E5,RSr),e(Ee,PSr),e(Ee,C5),e(C5,K7e),e(K7e,BSr),e(C5,ISr),e(C5,GY),e(GY,NSr),e(C5,qSr),e(Ee,jSr),e(Ee,w5),e(w5,Z7e),e(Z7e,DSr),e(w5,GSr),e(w5,OY),e(OY,OSr),e(w5,VSr),e(Ee,XSr),e(Ee,A5),e(A5,eMe),e(eMe,zSr),e(A5,WSr),e(A5,VY),e(VY,QSr),e(A5,HSr),e(Ee,USr),e(Ee,y5),e(y5,oMe),e(oMe,JSr),e(y5,YSr),e(y5,XY),e(XY,KSr),e(y5,ZSr),e(Ee,eRr),e(Ee,L5),e(L5,rMe),e(rMe,oRr),e(L5,rRr),e(L5,zY),e(zY,tRr),e(L5,aRr),e(Ee,nRr),e(Ee,x5),e(x5,tMe),e(tMe,sRr),e(x5,lRr),e(x5,WY),e(WY,iRr),e(x5,dRr),e(Ee,cRr),e(Ee,$5),e($5,aMe),e(aMe,fRr),e($5,mRr),e($5,QY),e(QY,gRr),e($5,hRr),e(Ee,pRr),e(Ee,k5),e(k5,nMe),e(nMe,_Rr),e(k5,uRr),e(k5,HY),e(HY,bRr),e(k5,vRr),e(Ee,FRr),e(Ee,S5),e(S5,sMe),e(sMe,TRr),e(S5,MRr),e(S5,UY),e(UY,ERr),e(S5,CRr),e(Gr,wRr),M(R5,Gr,null),b(f,iDe,u),b(f,jc,u),e(jc,P5),e(P5,lMe),M(W9,lMe,null),e(jc,ARr),e(jc,iMe),e(iMe,yRr),b(f,dDe,u),b(f,hr,u),M(Q9,hr,null),e(hr,LRr),e(hr,Dc),e(Dc,xRr),e(Dc,JY),e(JY,$Rr),e(Dc,kRr),e(Dc,YY),e(YY,SRr),e(Dc,RRr),e(hr,PRr),e(hr,H9),e(H9,BRr),e(H9,dMe),e(dMe,IRr),e(H9,NRr),e(hr,qRr),e(hr,Xt),M(U9,Xt,null),e(Xt,jRr),e(Xt,cMe),e(cMe,DRr),e(Xt,GRr),e(Xt,Gc),e(Gc,ORr),e(Gc,fMe),e(fMe,VRr),e(Gc,XRr),e(Gc,KY),e(KY,zRr),e(Gc,WRr),e(Xt,QRr),M(B5,Xt,null),e(hr,HRr),e(hr,Or),M(J9,Or,null),e(Or,URr),e(Or,mMe),e(mMe,JRr),e(Or,YRr),e(Or,un),e(un,KRr),e(un,gMe),e(gMe,ZRr),e(un,ePr),e(un,hMe),e(hMe,oPr),e(un,rPr),e(un,pMe),e(pMe,tPr),e(un,aPr),e(Or,nPr),e(Or,Le),e(Le,I5),e(I5,_Me),e(_Me,sPr),e(I5,lPr),e(I5,ZY),e(ZY,iPr),e(I5,dPr),e(Le,cPr),e(Le,N5),e(N5,uMe),e(uMe,fPr),e(N5,mPr),e(N5,eK),e(eK,gPr),e(N5,hPr),e(Le,pPr),e(Le,q5),e(q5,bMe),e(bMe,_Pr),e(q5,uPr),e(q5,oK),e(oK,bPr),e(q5,vPr),e(Le,FPr),e(Le,j5),e(j5,vMe),e(vMe,TPr),e(j5,MPr),e(j5,rK),e(rK,EPr),e(j5,CPr),e(Le,wPr),e(Le,D5),e(D5,FMe),e(FMe,APr),e(D5,yPr),e(D5,tK),e(tK,LPr),e(D5,xPr),e(Le,$Pr),e(Le,G5),e(G5,TMe),e(TMe,kPr),e(G5,SPr),e(G5,aK),e(aK,RPr),e(G5,PPr),e(Le,BPr),e(Le,O5),e(O5,MMe),e(MMe,IPr),e(O5,NPr),e(O5,nK),e(nK,qPr),e(O5,jPr),e(Le,DPr),e(Le,V5),e(V5,EMe),e(EMe,GPr),e(V5,OPr),e(V5,sK),e(sK,VPr),e(V5,XPr),e(Le,zPr),e(Le,X5),e(X5,CMe),e(CMe,WPr),e(X5,QPr),e(X5,lK),e(lK,HPr),e(X5,UPr),e(Le,JPr),e(Le,z5),e(z5,wMe),e(wMe,YPr),e(z5,KPr),e(z5,iK),e(iK,ZPr),e(z5,eBr),e(Or,oBr),M(W5,Or,null),b(f,cDe,u),b(f,Oc,u),e(Oc,Q5),e(Q5,AMe),M(Y9,AMe,null),e(Oc,rBr),e(Oc,yMe),e(yMe,tBr),b(f,fDe,u),b(f,pr,u),M(K9,pr,null),e(pr,aBr),e(pr,Vc),e(Vc,nBr),e(Vc,dK),e(dK,sBr),e(Vc,lBr),e(Vc,cK),e(cK,iBr),e(Vc,dBr),e(pr,cBr),e(pr,Z9),e(Z9,fBr),e(Z9,LMe),e(LMe,mBr),e(Z9,gBr),e(pr,hBr),e(pr,zt),M(ex,zt,null),e(zt,pBr),e(zt,xMe),e(xMe,_Br),e(zt,uBr),e(zt,Xc),e(Xc,bBr),e(Xc,$Me),e($Me,vBr),e(Xc,FBr),e(Xc,fK),e(fK,TBr),e(Xc,MBr),e(zt,EBr),M(H5,zt,null),e(pr,CBr),e(pr,Vr),M(ox,Vr,null),e(Vr,wBr),e(Vr,kMe),e(kMe,ABr),e(Vr,yBr),e(Vr,bn),e(bn,LBr),e(bn,SMe),e(SMe,xBr),e(bn,$Br),e(bn,RMe),e(RMe,kBr),e(bn,SBr),e(bn,PMe),e(PMe,RBr),e(bn,PBr),e(Vr,BBr),e(Vr,Pe),e(Pe,U5),e(U5,BMe),e(BMe,IBr),e(U5,NBr),e(U5,mK),e(mK,qBr),e(U5,jBr),e(Pe,DBr),e(Pe,J5),e(J5,IMe),e(IMe,GBr),e(J5,OBr),e(J5,gK),e(gK,VBr),e(J5,XBr),e(Pe,zBr),e(Pe,Y5),e(Y5,NMe),e(NMe,WBr),e(Y5,QBr),e(Y5,hK),e(hK,HBr),e(Y5,UBr),e(Pe,JBr),e(Pe,K5),e(K5,qMe),e(qMe,YBr),e(K5,KBr),e(K5,pK),e(pK,ZBr),e(K5,eIr),e(Pe,oIr),e(Pe,Z5),e(Z5,jMe),e(jMe,rIr),e(Z5,tIr),e(Z5,_K),e(_K,aIr),e(Z5,nIr),e(Pe,sIr),e(Pe,e3),e(e3,DMe),e(DMe,lIr),e(e3,iIr),e(e3,uK),e(uK,dIr),e(e3,cIr),e(Pe,fIr),e(Pe,o3),e(o3,GMe),e(GMe,mIr),e(o3,gIr),e(o3,bK),e(bK,hIr),e(o3,pIr),e(Pe,_Ir),e(Pe,r3),e(r3,OMe),e(OMe,uIr),e(r3,bIr),e(r3,vK),e(vK,vIr),e(r3,FIr),e(Pe,TIr),e(Pe,t3),e(t3,VMe),e(VMe,MIr),e(t3,EIr),e(t3,FK),e(FK,CIr),e(t3,wIr),e(Vr,AIr),M(a3,Vr,null),b(f,mDe,u),b(f,zc,u),e(zc,n3),e(n3,XMe),M(rx,XMe,null),e(zc,yIr),e(zc,zMe),e(zMe,LIr),b(f,gDe,u),b(f,_r,u),M(tx,_r,null),e(_r,xIr),e(_r,Wc),e(Wc,$Ir),e(Wc,TK),e(TK,kIr),e(Wc,SIr),e(Wc,MK),e(MK,RIr),e(Wc,PIr),e(_r,BIr),e(_r,ax),e(ax,IIr),e(ax,WMe),e(WMe,NIr),e(ax,qIr),e(_r,jIr),e(_r,Wt),M(nx,Wt,null),e(Wt,DIr),e(Wt,QMe),e(QMe,GIr),e(Wt,OIr),e(Wt,Qc),e(Qc,VIr),e(Qc,HMe),e(HMe,XIr),e(Qc,zIr),e(Qc,EK),e(EK,WIr),e(Qc,QIr),e(Wt,HIr),M(s3,Wt,null),e(_r,UIr),e(_r,Xr),M(sx,Xr,null),e(Xr,JIr),e(Xr,UMe),e(UMe,YIr),e(Xr,KIr),e(Xr,vn),e(vn,ZIr),e(vn,JMe),e(JMe,eNr),e(vn,oNr),e(vn,YMe),e(YMe,rNr),e(vn,tNr),e(vn,KMe),e(KMe,aNr),e(vn,nNr),e(Xr,sNr),e(Xr,xe),e(xe,l3),e(l3,ZMe),e(ZMe,lNr),e(l3,iNr),e(l3,CK),e(CK,dNr),e(l3,cNr),e(xe,fNr),e(xe,i3),e(i3,eEe),e(eEe,mNr),e(i3,gNr),e(i3,wK),e(wK,hNr),e(i3,pNr),e(xe,_Nr),e(xe,d3),e(d3,oEe),e(oEe,uNr),e(d3,bNr),e(d3,AK),e(AK,vNr),e(d3,FNr),e(xe,TNr),e(xe,c3),e(c3,rEe),e(rEe,MNr),e(c3,ENr),e(c3,yK),e(yK,CNr),e(c3,wNr),e(xe,ANr),e(xe,f3),e(f3,tEe),e(tEe,yNr),e(f3,LNr),e(f3,LK),e(LK,xNr),e(f3,$Nr),e(xe,kNr),e(xe,m3),e(m3,aEe),e(aEe,SNr),e(m3,RNr),e(m3,xK),e(xK,PNr),e(m3,BNr),e(xe,INr),e(xe,g3),e(g3,nEe),e(nEe,NNr),e(g3,qNr),e(g3,$K),e($K,jNr),e(g3,DNr),e(xe,GNr),e(xe,h3),e(h3,sEe),e(sEe,ONr),e(h3,VNr),e(h3,kK),e(kK,XNr),e(h3,zNr),e(xe,WNr),e(xe,p3),e(p3,lEe),e(lEe,QNr),e(p3,HNr),e(p3,SK),e(SK,UNr),e(p3,JNr),e(xe,YNr),e(xe,_3),e(_3,iEe),e(iEe,KNr),e(_3,ZNr),e(_3,RK),e(RK,eqr),e(_3,oqr),e(Xr,rqr),M(u3,Xr,null),b(f,hDe,u),b(f,Hc,u),e(Hc,b3),e(b3,dEe),M(lx,dEe,null),e(Hc,tqr),e(Hc,cEe),e(cEe,aqr),b(f,pDe,u),b(f,ur,u),M(ix,ur,null),e(ur,nqr),e(ur,Uc),e(Uc,sqr),e(Uc,PK),e(PK,lqr),e(Uc,iqr),e(Uc,BK),e(BK,dqr),e(Uc,cqr),e(ur,fqr),e(ur,dx),e(dx,mqr),e(dx,fEe),e(fEe,gqr),e(dx,hqr),e(ur,pqr),e(ur,Qt),M(cx,Qt,null),e(Qt,_qr),e(Qt,mEe),e(mEe,uqr),e(Qt,bqr),e(Qt,Jc),e(Jc,vqr),e(Jc,gEe),e(gEe,Fqr),e(Jc,Tqr),e(Jc,IK),e(IK,Mqr),e(Jc,Eqr),e(Qt,Cqr),M(v3,Qt,null),e(ur,wqr),e(ur,zr),M(fx,zr,null),e(zr,Aqr),e(zr,hEe),e(hEe,yqr),e(zr,Lqr),e(zr,Fn),e(Fn,xqr),e(Fn,pEe),e(pEe,$qr),e(Fn,kqr),e(Fn,_Ee),e(_Ee,Sqr),e(Fn,Rqr),e(Fn,uEe),e(uEe,Pqr),e(Fn,Bqr),e(zr,Iqr),e(zr,$e),e($e,F3),e(F3,bEe),e(bEe,Nqr),e(F3,qqr),e(F3,NK),e(NK,jqr),e(F3,Dqr),e($e,Gqr),e($e,T3),e(T3,vEe),e(vEe,Oqr),e(T3,Vqr),e(T3,qK),e(qK,Xqr),e(T3,zqr),e($e,Wqr),e($e,M3),e(M3,FEe),e(FEe,Qqr),e(M3,Hqr),e(M3,jK),e(jK,Uqr),e(M3,Jqr),e($e,Yqr),e($e,E3),e(E3,TEe),e(TEe,Kqr),e(E3,Zqr),e(E3,DK),e(DK,ejr),e(E3,ojr),e($e,rjr),e($e,C3),e(C3,MEe),e(MEe,tjr),e(C3,ajr),e(C3,GK),e(GK,njr),e(C3,sjr),e($e,ljr),e($e,w3),e(w3,EEe),e(EEe,ijr),e(w3,djr),e(w3,OK),e(OK,cjr),e(w3,fjr),e($e,mjr),e($e,A3),e(A3,CEe),e(CEe,gjr),e(A3,hjr),e(A3,VK),e(VK,pjr),e(A3,_jr),e($e,ujr),e($e,y3),e(y3,wEe),e(wEe,bjr),e(y3,vjr),e(y3,XK),e(XK,Fjr),e(y3,Tjr),e($e,Mjr),e($e,L3),e(L3,AEe),e(AEe,Ejr),e(L3,Cjr),e(L3,zK),e(zK,wjr),e(L3,Ajr),e($e,yjr),e($e,x3),e(x3,yEe),e(yEe,Ljr),e(x3,xjr),e(x3,WK),e(WK,$jr),e(x3,kjr),e(zr,Sjr),M($3,zr,null),b(f,_De,u),b(f,Yc,u),e(Yc,k3),e(k3,LEe),M(mx,LEe,null),e(Yc,Rjr),e(Yc,xEe),e(xEe,Pjr),b(f,uDe,u),b(f,br,u),M(gx,br,null),e(br,Bjr),e(br,Kc),e(Kc,Ijr),e(Kc,QK),e(QK,Njr),e(Kc,qjr),e(Kc,HK),e(HK,jjr),e(Kc,Djr),e(br,Gjr),e(br,hx),e(hx,Ojr),e(hx,$Ee),e($Ee,Vjr),e(hx,Xjr),e(br,zjr),e(br,Ht),M(px,Ht,null),e(Ht,Wjr),e(Ht,kEe),e(kEe,Qjr),e(Ht,Hjr),e(Ht,Zc),e(Zc,Ujr),e(Zc,SEe),e(SEe,Jjr),e(Zc,Yjr),e(Zc,UK),e(UK,Kjr),e(Zc,Zjr),e(Ht,eDr),M(S3,Ht,null),e(br,oDr),e(br,Wr),M(_x,Wr,null),e(Wr,rDr),e(Wr,REe),e(REe,tDr),e(Wr,aDr),e(Wr,Tn),e(Tn,nDr),e(Tn,PEe),e(PEe,sDr),e(Tn,lDr),e(Tn,BEe),e(BEe,iDr),e(Tn,dDr),e(Tn,IEe),e(IEe,cDr),e(Tn,fDr),e(Wr,mDr),e(Wr,De),e(De,R3),e(R3,NEe),e(NEe,gDr),e(R3,hDr),e(R3,JK),e(JK,pDr),e(R3,_Dr),e(De,uDr),e(De,P3),e(P3,qEe),e(qEe,bDr),e(P3,vDr),e(P3,YK),e(YK,FDr),e(P3,TDr),e(De,MDr),e(De,B3),e(B3,jEe),e(jEe,EDr),e(B3,CDr),e(B3,KK),e(KK,wDr),e(B3,ADr),e(De,yDr),e(De,I3),e(I3,DEe),e(DEe,LDr),e(I3,xDr),e(I3,ZK),e(ZK,$Dr),e(I3,kDr),e(De,SDr),e(De,N3),e(N3,GEe),e(GEe,RDr),e(N3,PDr),e(N3,eZ),e(eZ,BDr),e(N3,IDr),e(De,NDr),e(De,q3),e(q3,OEe),e(OEe,qDr),e(q3,jDr),e(q3,oZ),e(oZ,DDr),e(q3,GDr),e(De,ODr),e(De,j3),e(j3,VEe),e(VEe,VDr),e(j3,XDr),e(j3,rZ),e(rZ,zDr),e(j3,WDr),e(De,QDr),e(De,D3),e(D3,XEe),e(XEe,HDr),e(D3,UDr),e(D3,tZ),e(tZ,JDr),e(D3,YDr),e(Wr,KDr),M(G3,Wr,null),b(f,bDe,u),b(f,ef,u),e(ef,O3),e(O3,zEe),M(ux,zEe,null),e(ef,ZDr),e(ef,WEe),e(WEe,eGr),b(f,vDe,u),b(f,vr,u),M(bx,vr,null),e(vr,oGr),e(vr,of),e(of,rGr),e(of,aZ),e(aZ,tGr),e(of,aGr),e(of,nZ),e(nZ,nGr),e(of,sGr),e(vr,lGr),e(vr,vx),e(vx,iGr),e(vx,QEe),e(QEe,dGr),e(vx,cGr),e(vr,fGr),e(vr,Ut),M(Fx,Ut,null),e(Ut,mGr),e(Ut,HEe),e(HEe,gGr),e(Ut,hGr),e(Ut,rf),e(rf,pGr),e(rf,UEe),e(UEe,_Gr),e(rf,uGr),e(rf,sZ),e(sZ,bGr),e(rf,vGr),e(Ut,FGr),M(V3,Ut,null),e(vr,TGr),e(vr,Qr),M(Tx,Qr,null),e(Qr,MGr),e(Qr,JEe),e(JEe,EGr),e(Qr,CGr),e(Qr,Mn),e(Mn,wGr),e(Mn,YEe),e(YEe,AGr),e(Mn,yGr),e(Mn,KEe),e(KEe,LGr),e(Mn,xGr),e(Mn,ZEe),e(ZEe,$Gr),e(Mn,kGr),e(Qr,SGr),e(Qr,Ge),e(Ge,X3),e(X3,eCe),e(eCe,RGr),e(X3,PGr),e(X3,lZ),e(lZ,BGr),e(X3,IGr),e(Ge,NGr),e(Ge,z3),e(z3,oCe),e(oCe,qGr),e(z3,jGr),e(z3,iZ),e(iZ,DGr),e(z3,GGr),e(Ge,OGr),e(Ge,W3),e(W3,rCe),e(rCe,VGr),e(W3,XGr),e(W3,dZ),e(dZ,zGr),e(W3,WGr),e(Ge,QGr),e(Ge,Q3),e(Q3,tCe),e(tCe,HGr),e(Q3,UGr),e(Q3,cZ),e(cZ,JGr),e(Q3,YGr),e(Ge,KGr),e(Ge,H3),e(H3,aCe),e(aCe,ZGr),e(H3,eOr),e(H3,fZ),e(fZ,oOr),e(H3,rOr),e(Ge,tOr),e(Ge,U3),e(U3,nCe),e(nCe,aOr),e(U3,nOr),e(U3,mZ),e(mZ,sOr),e(U3,lOr),e(Ge,iOr),e(Ge,J3),e(J3,sCe),e(sCe,dOr),e(J3,cOr),e(J3,gZ),e(gZ,fOr),e(J3,mOr),e(Ge,gOr),e(Ge,Y3),e(Y3,lCe),e(lCe,hOr),e(Y3,pOr),e(Y3,hZ),e(hZ,_Or),e(Y3,uOr),e(Qr,bOr),M(K3,Qr,null),b(f,FDe,u),b(f,tf,u),e(tf,Z3),e(Z3,iCe),M(Mx,iCe,null),e(tf,vOr),e(tf,dCe),e(dCe,FOr),b(f,TDe,u),b(f,Fr,u),M(Ex,Fr,null),e(Fr,TOr),e(Fr,af),e(af,MOr),e(af,pZ),e(pZ,EOr),e(af,COr),e(af,_Z),e(_Z,wOr),e(af,AOr),e(Fr,yOr),e(Fr,Cx),e(Cx,LOr),e(Cx,cCe),e(cCe,xOr),e(Cx,$Or),e(Fr,kOr),e(Fr,Jt),M(wx,Jt,null),e(Jt,SOr),e(Jt,fCe),e(fCe,ROr),e(Jt,POr),e(Jt,nf),e(nf,BOr),e(nf,mCe),e(mCe,IOr),e(nf,NOr),e(nf,uZ),e(uZ,qOr),e(nf,jOr),e(Jt,DOr),M(ew,Jt,null),e(Fr,GOr),e(Fr,Hr),M(Ax,Hr,null),e(Hr,OOr),e(Hr,gCe),e(gCe,VOr),e(Hr,XOr),e(Hr,En),e(En,zOr),e(En,hCe),e(hCe,WOr),e(En,QOr),e(En,pCe),e(pCe,HOr),e(En,UOr),e(En,_Ce),e(_Ce,JOr),e(En,YOr),e(Hr,KOr),e(Hr,uCe),e(uCe,ow),e(ow,bCe),e(bCe,ZOr),e(ow,eVr),e(ow,bZ),e(bZ,oVr),e(ow,rVr),e(Hr,tVr),M(rw,Hr,null),b(f,MDe,u),b(f,sf,u),e(sf,tw),e(tw,vCe),M(yx,vCe,null),e(sf,aVr),e(sf,FCe),e(FCe,nVr),b(f,EDe,u),b(f,Tr,u),M(Lx,Tr,null),e(Tr,sVr),e(Tr,lf),e(lf,lVr),e(lf,vZ),e(vZ,iVr),e(lf,dVr),e(lf,FZ),e(FZ,cVr),e(lf,fVr),e(Tr,mVr),e(Tr,xx),e(xx,gVr),e(xx,TCe),e(TCe,hVr),e(xx,pVr),e(Tr,_Vr),e(Tr,Yt),M($x,Yt,null),e(Yt,uVr),e(Yt,MCe),e(MCe,bVr),e(Yt,vVr),e(Yt,df),e(df,FVr),e(df,ECe),e(ECe,TVr),e(df,MVr),e(df,TZ),e(TZ,EVr),e(df,CVr),e(Yt,wVr),M(aw,Yt,null),e(Tr,AVr),e(Tr,Ur),M(kx,Ur,null),e(Ur,yVr),e(Ur,CCe),e(CCe,LVr),e(Ur,xVr),e(Ur,Cn),e(Cn,$Vr),e(Cn,wCe),e(wCe,kVr),e(Cn,SVr),e(Cn,ACe),e(ACe,RVr),e(Cn,PVr),e(Cn,yCe),e(yCe,BVr),e(Cn,IVr),e(Ur,NVr),e(Ur,Sx),e(Sx,nw),e(nw,LCe),e(LCe,qVr),e(nw,jVr),e(nw,MZ),e(MZ,DVr),e(nw,GVr),e(Sx,OVr),e(Sx,sw),e(sw,xCe),e(xCe,VVr),e(sw,XVr),e(sw,EZ),e(EZ,zVr),e(sw,WVr),e(Ur,QVr),M(lw,Ur,null),b(f,CDe,u),b(f,cf,u),e(cf,iw),e(iw,$Ce),M(Rx,$Ce,null),e(cf,HVr),e(cf,kCe),e(kCe,UVr),b(f,wDe,u),b(f,Mr,u),M(Px,Mr,null),e(Mr,JVr),e(Mr,ff),e(ff,YVr),e(ff,CZ),e(CZ,KVr),e(ff,ZVr),e(ff,wZ),e(wZ,eXr),e(ff,oXr),e(Mr,rXr),e(Mr,Bx),e(Bx,tXr),e(Bx,SCe),e(SCe,aXr),e(Bx,nXr),e(Mr,sXr),e(Mr,Kt),M(Ix,Kt,null),e(Kt,lXr),e(Kt,RCe),e(RCe,iXr),e(Kt,dXr),e(Kt,mf),e(mf,cXr),e(mf,PCe),e(PCe,fXr),e(mf,mXr),e(mf,AZ),e(AZ,gXr),e(mf,hXr),e(Kt,pXr),M(dw,Kt,null),e(Mr,_Xr),e(Mr,Jr),M(Nx,Jr,null),e(Jr,uXr),e(Jr,BCe),e(BCe,bXr),e(Jr,vXr),e(Jr,wn),e(wn,FXr),e(wn,ICe),e(ICe,TXr),e(wn,MXr),e(wn,NCe),e(NCe,EXr),e(wn,CXr),e(wn,qCe),e(qCe,wXr),e(wn,AXr),e(Jr,yXr),e(Jr,jCe),e(jCe,cw),e(cw,DCe),e(DCe,LXr),e(cw,xXr),e(cw,yZ),e(yZ,$Xr),e(cw,kXr),e(Jr,SXr),M(fw,Jr,null),ADe=!0},p(f,[u]){const qx={};u&2&&(qx.$$scope={dirty:u,ctx:f}),Tf.$set(qx);const GCe={};u&2&&(GCe.$$scope={dirty:u,ctx:f}),wg.$set(GCe);const OCe={};u&2&&(OCe.$$scope={dirty:u,ctx:f}),sh.$set(OCe);const VCe={};u&2&&(VCe.$$scope={dirty:u,ctx:f}),jh.$set(VCe);const jx={};u&2&&(jx.$$scope={dirty:u,ctx:f}),Dh.$set(jx);const XCe={};u&2&&(XCe.$$scope={dirty:u,ctx:f}),lp.$set(XCe);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),ip.$set(An);const zCe={};u&2&&(zCe.$$scope={dirty:u,ctx:f}),fp.$set(zCe);const WCe={};u&2&&(WCe.$$scope={dirty:u,ctx:f}),lu.$set(WCe);const QCe={};u&2&&(QCe.$$scope={dirty:u,ctx:f}),du.$set(QCe);const Dx={};u&2&&(Dx.$$scope={dirty:u,ctx:f}),Zu.$set(Dx);const HCe={};u&2&&(HCe.$$scope={dirty:u,ctx:f}),o1.$set(HCe);const Gx={};u&2&&(Gx.$$scope={dirty:u,ctx:f}),D1.$set(Gx);const UCe={};u&2&&(UCe.$$scope={dirty:u,ctx:f}),O1.$set(UCe);const Ox={};u&2&&(Ox.$$scope={dirty:u,ctx:f}),wb.$set(Ox);const JCe={};u&2&&(JCe.$$scope={dirty:u,ctx:f}),yb.$set(JCe);const YCe={};u&2&&(YCe.$$scope={dirty:u,ctx:f}),zb.$set(YCe);const KCe={};u&2&&(KCe.$$scope={dirty:u,ctx:f}),Qb.$set(KCe);const gf={};u&2&&(gf.$$scope={dirty:u,ctx:f}),O2.$set(gf);const ZCe={};u&2&&(ZCe.$$scope={dirty:u,ctx:f}),X2.$set(ZCe);const e5e={};u&2&&(e5e.$$scope={dirty:u,ctx:f}),M4.$set(e5e);const o5e={};u&2&&(o5e.$$scope={dirty:u,ctx:f}),C4.$set(o5e);const Vx={};u&2&&(Vx.$$scope={dirty:u,ctx:f}),k4.$set(Vx);const r5e={};u&2&&(r5e.$$scope={dirty:u,ctx:f}),R4.$set(r5e);const t5e={};u&2&&(t5e.$$scope={dirty:u,ctx:f}),pv.$set(t5e);const a5e={};u&2&&(a5e.$$scope={dirty:u,ctx:f}),uv.$set(a5e);const et={};u&2&&(et.$$scope={dirty:u,ctx:f}),nF.$set(et);const Xx={};u&2&&(Xx.$$scope={dirty:u,ctx:f}),lF.$set(Xx);const n5e={};u&2&&(n5e.$$scope={dirty:u,ctx:f}),cF.$set(n5e);const zx={};u&2&&(zx.$$scope={dirty:u,ctx:f}),mF.$set(zx);const s5e={};u&2&&(s5e.$$scope={dirty:u,ctx:f}),AF.$set(s5e);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),LF.$set(ot);const l5e={};u&2&&(l5e.$$scope={dirty:u,ctx:f}),kF.$set(l5e);const hf={};u&2&&(hf.$$scope={dirty:u,ctx:f}),RF.$set(hf);const i5e={};u&2&&(i5e.$$scope={dirty:u,ctx:f}),XF.$set(i5e);const d5e={};u&2&&(d5e.$$scope={dirty:u,ctx:f}),WF.$set(d5e);const y={};u&2&&(y.$$scope={dirty:u,ctx:f}),ZF.$set(y);const mw={};u&2&&(mw.$$scope={dirty:u,ctx:f}),o6.$set(mw);const c5e={};u&2&&(c5e.$$scope={dirty:u,ctx:f}),m6.$set(c5e);const f5e={};u&2&&(f5e.$$scope={dirty:u,ctx:f}),h6.$set(f5e);const gw={};u&2&&(gw.$$scope={dirty:u,ctx:f}),b6.$set(gw);const m5e={};u&2&&(m5e.$$scope={dirty:u,ctx:f}),F6.$set(m5e);const g5e={};u&2&&(g5e.$$scope={dirty:u,ctx:f}),y6.$set(g5e);const hw={};u&2&&(hw.$$scope={dirty:u,ctx:f}),x6.$set(hw);const h5e={};u&2&&(h5e.$$scope={dirty:u,ctx:f}),P6.$set(h5e);const p5e={};u&2&&(p5e.$$scope={dirty:u,ctx:f}),I6.$set(p5e);const pw={};u&2&&(pw.$$scope={dirty:u,ctx:f}),D6.$set(pw);const _5e={};u&2&&(_5e.$$scope={dirty:u,ctx:f}),O6.$set(_5e);const u5e={};u&2&&(u5e.$$scope={dirty:u,ctx:f}),z6.$set(u5e);const _w={};u&2&&(_w.$$scope={dirty:u,ctx:f}),Q6.$set(_w);const b5e={};u&2&&(b5e.$$scope={dirty:u,ctx:f}),Z6.$set(b5e);const v5e={};u&2&&(v5e.$$scope={dirty:u,ctx:f}),oT.$set(v5e);const uw={};u&2&&(uw.$$scope={dirty:u,ctx:f}),aT.$set(uw);const F5e={};u&2&&(F5e.$$scope={dirty:u,ctx:f}),sT.$set(F5e);const T5e={};u&2&&(T5e.$$scope={dirty:u,ctx:f}),KT.$set(T5e);const bw={};u&2&&(bw.$$scope={dirty:u,ctx:f}),e7.$set(bw);const M5e={};u&2&&(M5e.$$scope={dirty:u,ctx:f}),C7.$set(M5e);const E5e={};u&2&&(E5e.$$scope={dirty:u,ctx:f}),A7.$set(E5e);const vw={};u&2&&(vw.$$scope={dirty:u,ctx:f}),j7.$set(vw);const C5e={};u&2&&(C5e.$$scope={dirty:u,ctx:f}),G7.$set(C5e);const w5e={};u&2&&(w5e.$$scope={dirty:u,ctx:f}),W7.$set(w5e);const Fw={};u&2&&(Fw.$$scope={dirty:u,ctx:f}),H7.$set(Fw);const A5e={};u&2&&(A5e.$$scope={dirty:u,ctx:f}),pM.$set(A5e);const y5e={};u&2&&(y5e.$$scope={dirty:u,ctx:f}),uM.$set(y5e);const Tw={};u&2&&(Tw.$$scope={dirty:u,ctx:f}),LM.$set(Tw);const L5e={};u&2&&(L5e.$$scope={dirty:u,ctx:f}),$M.$set(L5e);const x5e={};u&2&&(x5e.$$scope={dirty:u,ctx:f}),tE.$set(x5e);const Mw={};u&2&&(Mw.$$scope={dirty:u,ctx:f}),nE.$set(Mw);const $5e={};u&2&&($5e.$$scope={dirty:u,ctx:f}),EE.$set($5e);const k5e={};u&2&&(k5e.$$scope={dirty:u,ctx:f}),wE.$set(k5e);const Ew={};u&2&&(Ew.$$scope={dirty:u,ctx:f}),LE.$set(Ew);const S5e={};u&2&&(S5e.$$scope={dirty:u,ctx:f}),$E.$set(S5e);const R5e={};u&2&&(R5e.$$scope={dirty:u,ctx:f}),SE.$set(R5e);const Cw={};u&2&&(Cw.$$scope={dirty:u,ctx:f}),PE.$set(Cw);const P5e={};u&2&&(P5e.$$scope={dirty:u,ctx:f}),oC.$set(P5e);const B5e={};u&2&&(B5e.$$scope={dirty:u,ctx:f}),tC.$set(B5e);const ww={};u&2&&(ww.$$scope={dirty:u,ctx:f}),CC.$set(ww);const I5e={};u&2&&(I5e.$$scope={dirty:u,ctx:f}),AC.$set(I5e);const N5e={};u&2&&(N5e.$$scope={dirty:u,ctx:f}),LC.$set(N5e);const Aw={};u&2&&(Aw.$$scope={dirty:u,ctx:f}),$C.$set(Aw);const q5e={};u&2&&(q5e.$$scope={dirty:u,ctx:f}),SC.$set(q5e);const j5e={};u&2&&(j5e.$$scope={dirty:u,ctx:f}),PC.$set(j5e);const yw={};u&2&&(yw.$$scope={dirty:u,ctx:f}),s5.$set(yw);const D5e={};u&2&&(D5e.$$scope={dirty:u,ctx:f}),i5.$set(D5e);const G5e={};u&2&&(G5e.$$scope={dirty:u,ctx:f}),b5.$set(G5e);const Lw={};u&2&&(Lw.$$scope={dirty:u,ctx:f}),F5.$set(Lw);const O5e={};u&2&&(O5e.$$scope={dirty:u,ctx:f}),R5.$set(O5e);const V5e={};u&2&&(V5e.$$scope={dirty:u,ctx:f}),B5.$set(V5e);const xw={};u&2&&(xw.$$scope={dirty:u,ctx:f}),W5.$set(xw);const X5e={};u&2&&(X5e.$$scope={dirty:u,ctx:f}),H5.$set(X5e);const z5e={};u&2&&(z5e.$$scope={dirty:u,ctx:f}),a3.$set(z5e);const $w={};u&2&&($w.$$scope={dirty:u,ctx:f}),s3.$set($w);const W5e={};u&2&&(W5e.$$scope={dirty:u,ctx:f}),u3.$set(W5e);const Q5e={};u&2&&(Q5e.$$scope={dirty:u,ctx:f}),v3.$set(Q5e);const kw={};u&2&&(kw.$$scope={dirty:u,ctx:f}),$3.$set(kw);const H5e={};u&2&&(H5e.$$scope={dirty:u,ctx:f}),S3.$set(H5e);const U5e={};u&2&&(U5e.$$scope={dirty:u,ctx:f}),G3.$set(U5e);const Sw={};u&2&&(Sw.$$scope={dirty:u,ctx:f}),V3.$set(Sw);const J5e={};u&2&&(J5e.$$scope={dirty:u,ctx:f}),K3.$set(J5e);const Y5e={};u&2&&(Y5e.$$scope={dirty:u,ctx:f}),ew.$set(Y5e);const Rw={};u&2&&(Rw.$$scope={dirty:u,ctx:f}),rw.$set(Rw);const K5e={};u&2&&(K5e.$$scope={dirty:u,ctx:f}),aw.$set(K5e);const Z5e={};u&2&&(Z5e.$$scope={dirty:u,ctx:f}),lw.$set(Z5e);const Pw={};u&2&&(Pw.$$scope={dirty:u,ctx:f}),dw.$set(Pw);const e3e={};u&2&&(e3e.$$scope={dirty:u,ctx:f}),fw.$set(e3e)},i(f){ADe||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(RA.$$.fragment,f),E(PA.$$.fragment,f),E(Tf.$$.fragment,f),E(BA.$$.fragment,f),E(IA.$$.fragment,f),E(jA.$$.fragment,f),E(wg.$$.fragment,f),E(DA.$$.fragment,f),E(GA.$$.fragment,f),E(OA.$$.fragment,f),E(zA.$$.fragment,f),E(sh.$$.fragment,f),E(WA.$$.fragment,f),E(QA.$$.fragment,f),E(HA.$$.fragment,f),E(YA.$$.fragment,f),E(jh.$$.fragment,f),E(Dh.$$.fragment,f),E(KA.$$.fragment,f),E(ZA.$$.fragment,f),E(ey.$$.fragment,f),E(ty.$$.fragment,f),E(lp.$$.fragment,f),E(ip.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(sy.$$.fragment,f),E(iy.$$.fragment,f),E(fp.$$.fragment,f),E(dy.$$.fragment,f),E(lu.$$.fragment,f),E(cy.$$.fragment,f),E(fy.$$.fragment,f),E(gy.$$.fragment,f),E(du.$$.fragment,f),E(hy.$$.fragment,f),E(Zu.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(by.$$.fragment,f),E(o1.$$.fragment,f),E(vy.$$.fragment,f),E(D1.$$.fragment,f),E(Fy.$$.fragment,f),E(Ty.$$.fragment,f),E(Ey.$$.fragment,f),E(O1.$$.fragment,f),E(Cy.$$.fragment,f),E(wb.$$.fragment,f),E(wy.$$.fragment,f),E(Ay.$$.fragment,f),E(Ly.$$.fragment,f),E(yb.$$.fragment,f),E(xy.$$.fragment,f),E(zb.$$.fragment,f),E($y.$$.fragment,f),E(ky.$$.fragment,f),E(Ry.$$.fragment,f),E(Qb.$$.fragment,f),E(Py.$$.fragment,f),E(O2.$$.fragment,f),E(By.$$.fragment,f),E(Iy.$$.fragment,f),E(qy.$$.fragment,f),E(X2.$$.fragment,f),E(jy.$$.fragment,f),E(M4.$$.fragment,f),E(Dy.$$.fragment,f),E(Gy.$$.fragment,f),E(Vy.$$.fragment,f),E(C4.$$.fragment,f),E(Xy.$$.fragment,f),E(k4.$$.fragment,f),E(zy.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(R4.$$.fragment,f),E(Uy.$$.fragment,f),E(pv.$$.fragment,f),E(Jy.$$.fragment,f),E(Yy.$$.fragment,f),E(Zy.$$.fragment,f),E(uv.$$.fragment,f),E(eL.$$.fragment,f),E(nF.$$.fragment,f),E(oL.$$.fragment,f),E(rL.$$.fragment,f),E(aL.$$.fragment,f),E(lF.$$.fragment,f),E(nL.$$.fragment,f),E(cF.$$.fragment,f),E(sL.$$.fragment,f),E(lL.$$.fragment,f),E(dL.$$.fragment,f),E(mF.$$.fragment,f),E(cL.$$.fragment,f),E(AF.$$.fragment,f),E(fL.$$.fragment,f),E(mL.$$.fragment,f),E(hL.$$.fragment,f),E(LF.$$.fragment,f),E(pL.$$.fragment,f),E(kF.$$.fragment,f),E(_L.$$.fragment,f),E(uL.$$.fragment,f),E(vL.$$.fragment,f),E(RF.$$.fragment,f),E(FL.$$.fragment,f),E(XF.$$.fragment,f),E(TL.$$.fragment,f),E(ML.$$.fragment,f),E(CL.$$.fragment,f),E(WF.$$.fragment,f),E(wL.$$.fragment,f),E(ZF.$$.fragment,f),E(AL.$$.fragment,f),E(yL.$$.fragment,f),E(xL.$$.fragment,f),E(o6.$$.fragment,f),E($L.$$.fragment,f),E(m6.$$.fragment,f),E(kL.$$.fragment,f),E(SL.$$.fragment,f),E(PL.$$.fragment,f),E(h6.$$.fragment,f),E(BL.$$.fragment,f),E(b6.$$.fragment,f),E(NL.$$.fragment,f),E(qL.$$.fragment,f),E(DL.$$.fragment,f),E(F6.$$.fragment,f),E(GL.$$.fragment,f),E(y6.$$.fragment,f),E(OL.$$.fragment,f),E(VL.$$.fragment,f),E(zL.$$.fragment,f),E(x6.$$.fragment,f),E(WL.$$.fragment,f),E(P6.$$.fragment,f),E(QL.$$.fragment,f),E(HL.$$.fragment,f),E(JL.$$.fragment,f),E(I6.$$.fragment,f),E(YL.$$.fragment,f),E(D6.$$.fragment,f),E(ZL.$$.fragment,f),E(e8.$$.fragment,f),E(r8.$$.fragment,f),E(O6.$$.fragment,f),E(t8.$$.fragment,f),E(z6.$$.fragment,f),E(a8.$$.fragment,f),E(n8.$$.fragment,f),E(l8.$$.fragment,f),E(Q6.$$.fragment,f),E(i8.$$.fragment,f),E(Z6.$$.fragment,f),E(d8.$$.fragment,f),E(c8.$$.fragment,f),E(m8.$$.fragment,f),E(oT.$$.fragment,f),E(g8.$$.fragment,f),E(aT.$$.fragment,f),E(h8.$$.fragment,f),E(p8.$$.fragment,f),E(u8.$$.fragment,f),E(sT.$$.fragment,f),E(b8.$$.fragment,f),E(KT.$$.fragment,f),E(v8.$$.fragment,f),E(F8.$$.fragment,f),E(M8.$$.fragment,f),E(e7.$$.fragment,f),E(E8.$$.fragment,f),E(C7.$$.fragment,f),E(C8.$$.fragment,f),E(w8.$$.fragment,f),E(y8.$$.fragment,f),E(A7.$$.fragment,f),E(L8.$$.fragment,f),E(j7.$$.fragment,f),E(x8.$$.fragment,f),E($8.$$.fragment,f),E(S8.$$.fragment,f),E(G7.$$.fragment,f),E(R8.$$.fragment,f),E(W7.$$.fragment,f),E(P8.$$.fragment,f),E(B8.$$.fragment,f),E(N8.$$.fragment,f),E(H7.$$.fragment,f),E(q8.$$.fragment,f),E(pM.$$.fragment,f),E(j8.$$.fragment,f),E(D8.$$.fragment,f),E(O8.$$.fragment,f),E(uM.$$.fragment,f),E(V8.$$.fragment,f),E(LM.$$.fragment,f),E(X8.$$.fragment,f),E(z8.$$.fragment,f),E(Q8.$$.fragment,f),E($M.$$.fragment,f),E(H8.$$.fragment,f),E(tE.$$.fragment,f),E(U8.$$.fragment,f),E(J8.$$.fragment,f),E(K8.$$.fragment,f),E(nE.$$.fragment,f),E(Z8.$$.fragment,f),E(EE.$$.fragment,f),E(e9.$$.fragment,f),E(o9.$$.fragment,f),E(t9.$$.fragment,f),E(wE.$$.fragment,f),E(a9.$$.fragment,f),E(LE.$$.fragment,f),E(s9.$$.fragment,f),E(l9.$$.fragment,f),E(d9.$$.fragment,f),E($E.$$.fragment,f),E(c9.$$.fragment,f),E(SE.$$.fragment,f),E(f9.$$.fragment,f),E(m9.$$.fragment,f),E(h9.$$.fragment,f),E(PE.$$.fragment,f),E(p9.$$.fragment,f),E(oC.$$.fragment,f),E(_9.$$.fragment,f),E(u9.$$.fragment,f),E(v9.$$.fragment,f),E(tC.$$.fragment,f),E(F9.$$.fragment,f),E(CC.$$.fragment,f),E(T9.$$.fragment,f),E(M9.$$.fragment,f),E(C9.$$.fragment,f),E(AC.$$.fragment,f),E(w9.$$.fragment,f),E(LC.$$.fragment,f),E(A9.$$.fragment,f),E(y9.$$.fragment,f),E(x9.$$.fragment,f),E($C.$$.fragment,f),E($9.$$.fragment,f),E(SC.$$.fragment,f),E(k9.$$.fragment,f),E(S9.$$.fragment,f),E(P9.$$.fragment,f),E(PC.$$.fragment,f),E(B9.$$.fragment,f),E(s5.$$.fragment,f),E(I9.$$.fragment,f),E(N9.$$.fragment,f),E(j9.$$.fragment,f),E(i5.$$.fragment,f),E(D9.$$.fragment,f),E(b5.$$.fragment,f),E(G9.$$.fragment,f),E(O9.$$.fragment,f),E(X9.$$.fragment,f),E(F5.$$.fragment,f),E(z9.$$.fragment,f),E(R5.$$.fragment,f),E(W9.$$.fragment,f),E(Q9.$$.fragment,f),E(U9.$$.fragment,f),E(B5.$$.fragment,f),E(J9.$$.fragment,f),E(W5.$$.fragment,f),E(Y9.$$.fragment,f),E(K9.$$.fragment,f),E(ex.$$.fragment,f),E(H5.$$.fragment,f),E(ox.$$.fragment,f),E(a3.$$.fragment,f),E(rx.$$.fragment,f),E(tx.$$.fragment,f),E(nx.$$.fragment,f),E(s3.$$.fragment,f),E(sx.$$.fragment,f),E(u3.$$.fragment,f),E(lx.$$.fragment,f),E(ix.$$.fragment,f),E(cx.$$.fragment,f),E(v3.$$.fragment,f),E(fx.$$.fragment,f),E($3.$$.fragment,f),E(mx.$$.fragment,f),E(gx.$$.fragment,f),E(px.$$.fragment,f),E(S3.$$.fragment,f),E(_x.$$.fragment,f),E(G3.$$.fragment,f),E(ux.$$.fragment,f),E(bx.$$.fragment,f),E(Fx.$$.fragment,f),E(V3.$$.fragment,f),E(Tx.$$.fragment,f),E(K3.$$.fragment,f),E(Mx.$$.fragment,f),E(Ex.$$.fragment,f),E(wx.$$.fragment,f),E(ew.$$.fragment,f),E(Ax.$$.fragment,f),E(rw.$$.fragment,f),E(yx.$$.fragment,f),E(Lx.$$.fragment,f),E($x.$$.fragment,f),E(aw.$$.fragment,f),E(kx.$$.fragment,f),E(lw.$$.fragment,f),E(Rx.$$.fragment,f),E(Px.$$.fragment,f),E(Ix.$$.fragment,f),E(dw.$$.fragment,f),E(Nx.$$.fragment,f),E(fw.$$.fragment,f),ADe=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(RA.$$.fragment,f),C(PA.$$.fragment,f),C(Tf.$$.fragment,f),C(BA.$$.fragment,f),C(IA.$$.fragment,f),C(jA.$$.fragment,f),C(wg.$$.fragment,f),C(DA.$$.fragment,f),C(GA.$$.fragment,f),C(OA.$$.fragment,f),C(zA.$$.fragment,f),C(sh.$$.fragment,f),C(WA.$$.fragment,f),C(QA.$$.fragment,f),C(HA.$$.fragment,f),C(YA.$$.fragment,f),C(jh.$$.fragment,f),C(Dh.$$.fragment,f),C(KA.$$.fragment,f),C(ZA.$$.fragment,f),C(ey.$$.fragment,f),C(ty.$$.fragment,f),C(lp.$$.fragment,f),C(ip.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(sy.$$.fragment,f),C(iy.$$.fragment,f),C(fp.$$.fragment,f),C(dy.$$.fragment,f),C(lu.$$.fragment,f),C(cy.$$.fragment,f),C(fy.$$.fragment,f),C(gy.$$.fragment,f),C(du.$$.fragment,f),C(hy.$$.fragment,f),C(Zu.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(by.$$.fragment,f),C(o1.$$.fragment,f),C(vy.$$.fragment,f),C(D1.$$.fragment,f),C(Fy.$$.fragment,f),C(Ty.$$.fragment,f),C(Ey.$$.fragment,f),C(O1.$$.fragment,f),C(Cy.$$.fragment,f),C(wb.$$.fragment,f),C(wy.$$.fragment,f),C(Ay.$$.fragment,f),C(Ly.$$.fragment,f),C(yb.$$.fragment,f),C(xy.$$.fragment,f),C(zb.$$.fragment,f),C($y.$$.fragment,f),C(ky.$$.fragment,f),C(Ry.$$.fragment,f),C(Qb.$$.fragment,f),C(Py.$$.fragment,f),C(O2.$$.fragment,f),C(By.$$.fragment,f),C(Iy.$$.fragment,f),C(qy.$$.fragment,f),C(X2.$$.fragment,f),C(jy.$$.fragment,f),C(M4.$$.fragment,f),C(Dy.$$.fragment,f),C(Gy.$$.fragment,f),C(Vy.$$.fragment,f),C(C4.$$.fragment,f),C(Xy.$$.fragment,f),C(k4.$$.fragment,f),C(zy.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(R4.$$.fragment,f),C(Uy.$$.fragment,f),C(pv.$$.fragment,f),C(Jy.$$.fragment,f),C(Yy.$$.fragment,f),C(Zy.$$.fragment,f),C(uv.$$.fragment,f),C(eL.$$.fragment,f),C(nF.$$.fragment,f),C(oL.$$.fragment,f),C(rL.$$.fragment,f),C(aL.$$.fragment,f),C(lF.$$.fragment,f),C(nL.$$.fragment,f),C(cF.$$.fragment,f),C(sL.$$.fragment,f),C(lL.$$.fragment,f),C(dL.$$.fragment,f),C(mF.$$.fragment,f),C(cL.$$.fragment,f),C(AF.$$.fragment,f),C(fL.$$.fragment,f),C(mL.$$.fragment,f),C(hL.$$.fragment,f),C(LF.$$.fragment,f),C(pL.$$.fragment,f),C(kF.$$.fragment,f),C(_L.$$.fragment,f),C(uL.$$.fragment,f),C(vL.$$.fragment,f),C(RF.$$.fragment,f),C(FL.$$.fragment,f),C(XF.$$.fragment,f),C(TL.$$.fragment,f),C(ML.$$.fragment,f),C(CL.$$.fragment,f),C(WF.$$.fragment,f),C(wL.$$.fragment,f),C(ZF.$$.fragment,f),C(AL.$$.fragment,f),C(yL.$$.fragment,f),C(xL.$$.fragment,f),C(o6.$$.fragment,f),C($L.$$.fragment,f),C(m6.$$.fragment,f),C(kL.$$.fragment,f),C(SL.$$.fragment,f),C(PL.$$.fragment,f),C(h6.$$.fragment,f),C(BL.$$.fragment,f),C(b6.$$.fragment,f),C(NL.$$.fragment,f),C(qL.$$.fragment,f),C(DL.$$.fragment,f),C(F6.$$.fragment,f),C(GL.$$.fragment,f),C(y6.$$.fragment,f),C(OL.$$.fragment,f),C(VL.$$.fragment,f),C(zL.$$.fragment,f),C(x6.$$.fragment,f),C(WL.$$.fragment,f),C(P6.$$.fragment,f),C(QL.$$.fragment,f),C(HL.$$.fragment,f),C(JL.$$.fragment,f),C(I6.$$.fragment,f),C(YL.$$.fragment,f),C(D6.$$.fragment,f),C(ZL.$$.fragment,f),C(e8.$$.fragment,f),C(r8.$$.fragment,f),C(O6.$$.fragment,f),C(t8.$$.fragment,f),C(z6.$$.fragment,f),C(a8.$$.fragment,f),C(n8.$$.fragment,f),C(l8.$$.fragment,f),C(Q6.$$.fragment,f),C(i8.$$.fragment,f),C(Z6.$$.fragment,f),C(d8.$$.fragment,f),C(c8.$$.fragment,f),C(m8.$$.fragment,f),C(oT.$$.fragment,f),C(g8.$$.fragment,f),C(aT.$$.fragment,f),C(h8.$$.fragment,f),C(p8.$$.fragment,f),C(u8.$$.fragment,f),C(sT.$$.fragment,f),C(b8.$$.fragment,f),C(KT.$$.fragment,f),C(v8.$$.fragment,f),C(F8.$$.fragment,f),C(M8.$$.fragment,f),C(e7.$$.fragment,f),C(E8.$$.fragment,f),C(C7.$$.fragment,f),C(C8.$$.fragment,f),C(w8.$$.fragment,f),C(y8.$$.fragment,f),C(A7.$$.fragment,f),C(L8.$$.fragment,f),C(j7.$$.fragment,f),C(x8.$$.fragment,f),C($8.$$.fragment,f),C(S8.$$.fragment,f),C(G7.$$.fragment,f),C(R8.$$.fragment,f),C(W7.$$.fragment,f),C(P8.$$.fragment,f),C(B8.$$.fragment,f),C(N8.$$.fragment,f),C(H7.$$.fragment,f),C(q8.$$.fragment,f),C(pM.$$.fragment,f),C(j8.$$.fragment,f),C(D8.$$.fragment,f),C(O8.$$.fragment,f),C(uM.$$.fragment,f),C(V8.$$.fragment,f),C(LM.$$.fragment,f),C(X8.$$.fragment,f),C(z8.$$.fragment,f),C(Q8.$$.fragment,f),C($M.$$.fragment,f),C(H8.$$.fragment,f),C(tE.$$.fragment,f),C(U8.$$.fragment,f),C(J8.$$.fragment,f),C(K8.$$.fragment,f),C(nE.$$.fragment,f),C(Z8.$$.fragment,f),C(EE.$$.fragment,f),C(e9.$$.fragment,f),C(o9.$$.fragment,f),C(t9.$$.fragment,f),C(wE.$$.fragment,f),C(a9.$$.fragment,f),C(LE.$$.fragment,f),C(s9.$$.fragment,f),C(l9.$$.fragment,f),C(d9.$$.fragment,f),C($E.$$.fragment,f),C(c9.$$.fragment,f),C(SE.$$.fragment,f),C(f9.$$.fragment,f),C(m9.$$.fragment,f),C(h9.$$.fragment,f),C(PE.$$.fragment,f),C(p9.$$.fragment,f),C(oC.$$.fragment,f),C(_9.$$.fragment,f),C(u9.$$.fragment,f),C(v9.$$.fragment,f),C(tC.$$.fragment,f),C(F9.$$.fragment,f),C(CC.$$.fragment,f),C(T9.$$.fragment,f),C(M9.$$.fragment,f),C(C9.$$.fragment,f),C(AC.$$.fragment,f),C(w9.$$.fragment,f),C(LC.$$.fragment,f),C(A9.$$.fragment,f),C(y9.$$.fragment,f),C(x9.$$.fragment,f),C($C.$$.fragment,f),C($9.$$.fragment,f),C(SC.$$.fragment,f),C(k9.$$.fragment,f),C(S9.$$.fragment,f),C(P9.$$.fragment,f),C(PC.$$.fragment,f),C(B9.$$.fragment,f),C(s5.$$.fragment,f),C(I9.$$.fragment,f),C(N9.$$.fragment,f),C(j9.$$.fragment,f),C(i5.$$.fragment,f),C(D9.$$.fragment,f),C(b5.$$.fragment,f),C(G9.$$.fragment,f),C(O9.$$.fragment,f),C(X9.$$.fragment,f),C(F5.$$.fragment,f),C(z9.$$.fragment,f),C(R5.$$.fragment,f),C(W9.$$.fragment,f),C(Q9.$$.fragment,f),C(U9.$$.fragment,f),C(B5.$$.fragment,f),C(J9.$$.fragment,f),C(W5.$$.fragment,f),C(Y9.$$.fragment,f),C(K9.$$.fragment,f),C(ex.$$.fragment,f),C(H5.$$.fragment,f),C(ox.$$.fragment,f),C(a3.$$.fragment,f),C(rx.$$.fragment,f),C(tx.$$.fragment,f),C(nx.$$.fragment,f),C(s3.$$.fragment,f),C(sx.$$.fragment,f),C(u3.$$.fragment,f),C(lx.$$.fragment,f),C(ix.$$.fragment,f),C(cx.$$.fragment,f),C(v3.$$.fragment,f),C(fx.$$.fragment,f),C($3.$$.fragment,f),C(mx.$$.fragment,f),C(gx.$$.fragment,f),C(px.$$.fragment,f),C(S3.$$.fragment,f),C(_x.$$.fragment,f),C(G3.$$.fragment,f),C(ux.$$.fragment,f),C(bx.$$.fragment,f),C(Fx.$$.fragment,f),C(V3.$$.fragment,f),C(Tx.$$.fragment,f),C(K3.$$.fragment,f),C(Mx.$$.fragment,f),C(Ex.$$.fragment,f),C(wx.$$.fragment,f),C(ew.$$.fragment,f),C(Ax.$$.fragment,f),C(rw.$$.fragment,f),C(yx.$$.fragment,f),C(Lx.$$.fragment,f),C($x.$$.fragment,f),C(aw.$$.fragment,f),C(kx.$$.fragment,f),C(lw.$$.fragment,f),C(Rx.$$.fragment,f),C(Px.$$.fragment,f),C(Ix.$$.fragment,f),C(dw.$$.fragment,f),C(Nx.$$.fragment,f),C(fw.$$.fragment,f),ADe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(_f),f&&t(rt),f&&t(je),f&&t(We),f&&t(bf),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(Eqe),f&&t(vi),w(RA),f&&t(Cqe),f&&t(kn),f&&t(wqe),w(PA,f),f&&t(Aqe),f&&t(tk),f&&t(yqe),w(Tf,f),f&&t(Lqe),f&&t(Fi),w(BA),f&&t(xqe),f&&t(Co),w(IA),w(jA),w(wg),w(DA),f&&t($qe),f&&t(Mi),w(GA),f&&t(kqe),f&&t(wo),w(OA),w(zA),w(sh),w(WA),f&&t(Sqe),f&&t(Ei),w(QA),f&&t(Rqe),f&&t(Ao),w(HA),w(YA),w(jh),w(Dh),w(KA),f&&t(Pqe),f&&t(Ci),w(ZA),f&&t(Bqe),f&&t(yo),w(ey),w(ty),w(lp),w(ip),w(ay),f&&t(Iqe),f&&t(Ai),w(ny),f&&t(Nqe),f&&t(Lo),w(sy),w(iy),w(fp),w(dy),w(lu),f&&t(qqe),f&&t(xi),w(cy),f&&t(jqe),f&&t(xo),w(fy),w(gy),w(du),w(hy),w(Zu),f&&t(Dqe),f&&t(Si),w(py),f&&t(Gqe),f&&t($o),w(_y),w(by),w(o1),w(vy),w(D1),f&&t(Oqe),f&&t(Bi),w(Fy),f&&t(Vqe),f&&t(ko),w(Ty),w(Ey),w(O1),w(Cy),w(wb),f&&t(Xqe),f&&t(qi),w(wy),f&&t(zqe),f&&t(So),w(Ay),w(Ly),w(yb),w(xy),w(zb),f&&t(Wqe),f&&t(Gi),w($y),f&&t(Qqe),f&&t(Ro),w(ky),w(Ry),w(Qb),w(Py),w(O2),f&&t(Hqe),f&&t(Xi),w(By),f&&t(Uqe),f&&t(Po),w(Iy),w(qy),w(X2),w(jy),w(M4),f&&t(Jqe),f&&t(Qi),w(Dy),f&&t(Yqe),f&&t(Bo),w(Gy),w(Vy),w(C4),w(Xy),w(k4),f&&t(Kqe),f&&t(Ji),w(zy),f&&t(Zqe),f&&t(Io),w(Wy),w(Hy),w(R4),w(Uy),w(pv),f&&t(eje),f&&t(Zi),w(Jy),f&&t(oje),f&&t(No),w(Yy),w(Zy),w(uv),w(eL),w(nF),f&&t(rje),f&&t(rd),w(oL),f&&t(tje),f&&t(qo),w(rL),w(aL),w(lF),w(nL),w(cF),f&&t(aje),f&&t(nd),w(sL),f&&t(nje),f&&t(jo),w(lL),w(dL),w(mF),w(cL),w(AF),f&&t(sje),f&&t(id),w(fL),f&&t(lje),f&&t(Do),w(mL),w(hL),w(LF),w(pL),w(kF),f&&t(ije),f&&t(fd),w(_L),f&&t(dje),f&&t(Go),w(uL),w(vL),w(RF),w(FL),w(XF),f&&t(cje),f&&t(hd),w(TL),f&&t(fje),f&&t(Oo),w(ML),w(CL),w(WF),w(wL),w(ZF),f&&t(mje),f&&t(ud),w(AL),f&&t(gje),f&&t(Vo),w(yL),w(xL),w(o6),w($L),w(m6),f&&t(hje),f&&t(Fd),w(kL),f&&t(pje),f&&t(Xo),w(SL),w(PL),w(h6),w(BL),w(b6),f&&t(_je),f&&t(Ed),w(NL),f&&t(uje),f&&t(zo),w(qL),w(DL),w(F6),w(GL),w(y6),f&&t(bje),f&&t(Ad),w(OL),f&&t(vje),f&&t(Wo),w(VL),w(zL),w(x6),w(WL),w(P6),f&&t(Fje),f&&t($d),w(QL),f&&t(Tje),f&&t(Qo),w(HL),w(JL),w(I6),w(YL),w(D6),f&&t(Mje),f&&t(Rd),w(ZL),f&&t(Eje),f&&t(Ho),w(e8),w(r8),w(O6),w(t8),w(z6),f&&t(Cje),f&&t(Id),w(a8),f&&t(wje),f&&t(Uo),w(n8),w(l8),w(Q6),w(i8),w(Z6),f&&t(Aje),f&&t(jd),w(d8),f&&t(yje),f&&t(Jo),w(c8),w(m8),w(oT),w(g8),w(aT),f&&t(Lje),f&&t(Od),w(h8),f&&t(xje),f&&t(Yo),w(p8),w(u8),w(sT),w(b8),w(KT),f&&t($je),f&&t(zd),w(v8),f&&t(kje),f&&t(Ko),w(F8),w(M8),w(e7),w(E8),w(C7),f&&t(Sje),f&&t(Hd),w(C8),f&&t(Rje),f&&t(Zo),w(w8),w(y8),w(A7),w(L8),w(j7),f&&t(Pje),f&&t(Yd),w(x8),f&&t(Bje),f&&t(er),w($8),w(S8),w(G7),w(R8),w(W7),f&&t(Ije),f&&t(ec),w(P8),f&&t(Nje),f&&t(or),w(B8),w(N8),w(H7),w(q8),w(pM),f&&t(qje),f&&t(tc),w(j8),f&&t(jje),f&&t(rr),w(D8),w(O8),w(uM),w(V8),w(LM),f&&t(Dje),f&&t(sc),w(X8),f&&t(Gje),f&&t(tr),w(z8),w(Q8),w($M),w(H8),w(tE),f&&t(Oje),f&&t(dc),w(U8),f&&t(Vje),f&&t(ar),w(J8),w(K8),w(nE),w(Z8),w(EE),f&&t(Xje),f&&t(mc),w(e9),f&&t(zje),f&&t(nr),w(o9),w(t9),w(wE),w(a9),w(LE),f&&t(Wje),f&&t(pc),w(s9),f&&t(Qje),f&&t(sr),w(l9),w(d9),w($E),w(c9),w(SE),f&&t(Hje),f&&t(bc),w(f9),f&&t(Uje),f&&t(lr),w(m9),w(h9),w(PE),w(p9),w(oC),f&&t(Jje),f&&t(Tc),w(_9),f&&t(Yje),f&&t(ir),w(u9),w(v9),w(tC),w(F9),w(CC),f&&t(Kje),f&&t(Cc),w(T9),f&&t(Zje),f&&t(dr),w(M9),w(C9),w(AC),w(w9),w(LC),f&&t(eDe),f&&t(yc),w(A9),f&&t(oDe),f&&t(cr),w(y9),w(x9),w($C),w($9),w(SC),f&&t(rDe),f&&t($c),w(k9),f&&t(tDe),f&&t(fr),w(S9),w(P9),w(PC),w(B9),w(s5),f&&t(aDe),f&&t(Rc),w(I9),f&&t(nDe),f&&t(mr),w(N9),w(j9),w(i5),w(D9),w(b5),f&&t(sDe),f&&t(Ic),w(G9),f&&t(lDe),f&&t(gr),w(O9),w(X9),w(F5),w(z9),w(R5),f&&t(iDe),f&&t(jc),w(W9),f&&t(dDe),f&&t(hr),w(Q9),w(U9),w(B5),w(J9),w(W5),f&&t(cDe),f&&t(Oc),w(Y9),f&&t(fDe),f&&t(pr),w(K9),w(ex),w(H5),w(ox),w(a3),f&&t(mDe),f&&t(zc),w(rx),f&&t(gDe),f&&t(_r),w(tx),w(nx),w(s3),w(sx),w(u3),f&&t(hDe),f&&t(Hc),w(lx),f&&t(pDe),f&&t(ur),w(ix),w(cx),w(v3),w(fx),w($3),f&&t(_De),f&&t(Yc),w(mx),f&&t(uDe),f&&t(br),w(gx),w(px),w(S3),w(_x),w(G3),f&&t(bDe),f&&t(ef),w(ux),f&&t(vDe),f&&t(vr),w(bx),w(Fx),w(V3),w(Tx),w(K3),f&&t(FDe),f&&t(tf),w(Mx),f&&t(TDe),f&&t(Fr),w(Ex),w(wx),w(ew),w(Ax),w(rw),f&&t(MDe),f&&t(sf),w(yx),f&&t(EDe),f&&t(Tr),w(Lx),w($x),w(aw),w(kx),w(lw),f&&t(CDe),f&&t(cf),w(Rx),f&&t(wDe),f&&t(Mr),w(Px),w(Ix),w(dw),w(Nx),w(fw)}}}const wRt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function ARt(L){return Akt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class RRt extends Mkt{constructor(g){super();Ekt(this,g,ARt,CRt,Ckt,{})}}export{RRt as default,wRt as metadata};
